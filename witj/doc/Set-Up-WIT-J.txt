
-----------------------------------
How to Set Up WIT-J for Development
-----------------------------------

This document describes how to set up WIT-J for WIT-J development purposes
(including maintaining WIT-J's port to Windows SDK). Specifically, it explains
how to:

   * Acquire the WIT-J source files from RTC.
   * Build WIT-J and its Tester program.
   * Run the WIT-J Tester and verify its output.

At present this document applies to the following platforms:

   * Linux
   * Windows SDK

Note:
   This procedure uses several scripts. If you want to fully understand how it
   works (e.g., to adapt it to a new platform), it would be helpful to read the
   content and comments in these scripts. Nevertheless, the procedure described
   here can be carried out blindly, without reading the scripts, and everything
   should work fine.

Bob Wittrock

Revised 8/31/12

--------------------------------------------------------------------------------


Assumptions:

* WIT has been set up on the machine / userid.

* The IBM version of Java 6.0 has been installed on the machine.
  The IBM version of Java is available from IBM's Java Information Manager:

     http://w3.hursley.ibm.com/java/jim/

* In the Windows SDK case, you are operating under MSYS.

Steps:

1. Permanently set the JAVA_HOME environment variable to the full path name of
   the directory in which Java is located. For example, my login profile script
   contains the following line:

      export JAVA_HOME=/opt/ibm/java-i386-60

   Specifically, JAVA_HOME should be set so that the programs "javac", "jar",
   and "java" are located under $JAVA_HOME/bin and the C++ header file "jni.h"
   is located under $JAVA_HOME/include.

2. Permanently set the WIT_HOME environment variable to the full path name of
   your local workspace for the WIT-Projects stream on RTC. For example, my
   login profile script contains the following line:

      export WIT_HOME=/home/rjw/main/wit/wit-projects/

3. Permanently set the PLATFORM environment variable to one of the following, as
   appropriate:

      linux
      winsdk

   For example, my login profile script contains the following line:

      export PLATFORM=linux

4. Build MCL and WIT with exe_type=released.

   * Ideally, WIT should be built with CPLEX embedded.
   * Alternatively, WIT could be built without CPLEX embedded. In this case,
     there will be more differences when tests are performed.

5. cd $WIT_HOME

6. If the witj directory is not already there, load the witj directory from your
   RTC WIT-Projects repository workspace into the $WIT_HOME directory.
   
7. cd witj

8. scripts/build-witj-cpp

9. scripts/build-witj-java

10.scripts/build-witj-tester

11.scripts/witj-main-test

12.cat test/data/main-diff.output

13.scripts/witj-error-test

14.cat test/data/error-diff.output

15.scripts/witj-thread-test

16.cat test/data/thread-diff.output


Notes:

* Step 8 builds the C++ portion of WIT-J.
  The output of this is the WIT-J/C++ native library.
  On Linux, this is stored as a Shared Object file, located as follows:
     
     $WIT_HOME/witj/cpp/linux/libwitj.so

  On Windows SDK, this is stored as a Dynamic Link Library, located as follows:
     
     $WIT_HOME/witj/cpp/winsdk/witj.dll

* Step 9 builds the Java portion of WIT-J.
  The output of this is the WIT-J/Java Jar file, stored as follows:

     $WIT_HOME/witj/java/bytecode/witj.jar

* Step 10 builds the WIT-J Tester.
  The output of this is the following Jar file:

     $WIT_HOME/witj/test/bytecode/witj-test.jar

* Step 11 invokes the WIT-J Tester to run a standard set of tests of WIT-J, then
  does a diff on the output, comparing to a prior output acquired from RTC.

* Step 12 displays the difference file from Step 11. If the difference file is
  empty, then the installed version of WIT-J has passed this test. Otherwise,
  please notify me.
  If WIT was built without CPLEX embedded, there will be differences reflecting
  the absence of CPLEX.

* Step 13 invokes the WIT-J Tester to run a set of tests of WIT-J involving
  errors that require the program to be terminated, then does a diff on the
  output, comparing to a prior output acquired from RTC.

* Step 14 displays the difference file from Step 13. If the difference file
  consists only of line number differences in Java library classes (not WIT-J
  classes), then the installed version of WIT-J has passed this test. Otherwise,
  please notify me.

* Step 15 invokes the WIT-J Tester to run a set of tests of WIT-J involving
  calls from multiple threads, then does a diff on the output, comparing to a
  prior output acquired from RTC.

* Step 16 displays the difference file from Step 15. The installed version of
  WIT-J has passed this test, iff this file consists only of differences that
  indicate the output was written in a different order than before, which is an
  unavoidable consequence of the asynchronous nature of this test. In other
  words, for every line in thread-diff.output beginning with "<", there should
  be an otherwise identical line beginning with ">" and conversely. If this is
  not the case, please notify me.

* If WIT has been built without CPLEX embedded, then steps 15 and 16 should be
  skipped.

* Please note that, in the Windows SDK case, although the build procedure uses
  MSYS, the resulting files witj.dll and witj.jar can also be used on Windows
  *without* MSYS.

* Other potentially useful scripts:

  * clean-witj-cpp:
    Runs "make clean" on the WIT-J C++ object code.

  * depend-witj-cpp:
    Runs "make depend" on the WIT-J C++ source code.
