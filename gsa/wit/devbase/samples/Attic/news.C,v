head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2007.10.23.21.24.53;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2007.10.23.20.58.16;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.23.20.54.57;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Renamed news.C to newsvendor.C.
@
text
@//------------------------------------------------------------------------------
// Program: "news.C".
//
// A WIT application program to illustrate stochastic implosion.
// This program uses stochastic implosion to solve an instance of
// the newsvendor problem.
//------------------------------------------------------------------------------

#include <wit.h>

#include <iostream>

//------------------------------------------------------------------------------

void buildCoreProblem (WitRun * & theWitRun);
void enterStochData   (WitRun *   theWitRun);

void enterScenarioData (
   WitRun * theWitRun,
   int      theScenIdx,
   float    probability,
   float    demandVol);

void displaySoln     (WitRun *    theWitRun);

//------------------------------------------------------------------------------
// Main Program
//------------------------------------------------------------------------------

int main (int, char *)
   {
   WitRun * theWitRun;

   buildCoreProblem (theWitRun);
   enterStochData   (theWitRun);
   witStochImplode  (theWitRun);
   displaySoln      (theWitRun);
   witDeleteRun     (theWitRun);

   exit (0);
   }

//------------------------------------------------------------------------------

void buildCoreProblem (WitRun * & theWitRun)
   {
   float execCost  [] = {0.6};
   float shipReward[] = {1.0};

   witNewRun              (& theWitRun);

   witSetMesgFileAccessMode (theWitRun, WitTRUE, "w");
   witSetMesgFileName       (theWitRun, WitTRUE, "news.log");

   witInitialize            (theWitRun);
   witSetNPeriods           (theWitRun, 1);
   witAddPart               (theWitRun, "Hold",         WitMATERIAL);
   witAddOperation          (theWitRun, "Buy");
   witAddBopEntry           (theWitRun, "Buy",  "Hold");
   witAddDemand             (theWitRun, "Hold", "Sell");
   witSetOperationExecCost  (theWitRun, "Buy",          execCost);
   witSetDemandShipReward   (theWitRun, "Hold", "Sell", shipReward);
   }

//------------------------------------------------------------------------------

void enterStochData (WitRun * theWitRun)
   {
   witSetNScenarios          (theWitRun, 3);
   witSetStageByObject       (theWitRun, WitTRUE);

   witSetStochMode           (theWitRun, WitTRUE);
   
   witSetOperationStageIndex (theWitRun, "Buy",  0);
   witSetPartStageIndex      (theWitRun, "Hold", 1);

   enterScenarioData         (theWitRun, 0, 0.3, 200.0);
   enterScenarioData         (theWitRun, 1, 0.4, 300.0);
   enterScenarioData         (theWitRun, 2, 0.3, 400.0);
   }

//------------------------------------------------------------------------------
// enterScenarioData
// Enters the data for one scenario.
//------------------------------------------------------------------------------

void enterScenarioData (
      WitRun * theWitRun,
      int      theScenIdx,
      float    probability,
      float    demandVol)
   {
   float demandVolVec[1];

   demandVolVec[0] = demandVol;

   witSetCurScenarioIndex (theWitRun,                 theScenIdx);
   witSetProbability      (theWitRun,                 probability);
   witSetDemandDemandVol  (theWitRun, "Hold", "Sell", demandVolVec);
   }

//------------------------------------------------------------------------------

void displaySoln (WitRun * theWitRun)
   {
   int     theScenIdx;
   float * execVol;
   float * demandVol;
   float * shipVol;
   float   objValue;
   float   boundsValue;

   witGetOperationExecVol (theWitRun, "Buy",  & execVol);

   std::cout
      << "Buy "
      << execVol[0]
      << " papers."
      << std::endl;
   
   witFree (execVol);

   for (theScenIdx = 0; theScenIdx < 3; theScenIdx ++)
      {
      witSetCurScenarioIndex (theWitRun,                   theScenIdx);
      
      witGetDemandDemandVol  (theWitRun, "Hold", "Sell", & demandVol);
      witGetDemandShipVol    (theWitRun, "Hold", "Sell", & shipVol);

      std::cout
         << "If the demand is for "
         << demandVol[0]
         << " papers, sell "
         << shipVol[0]
         << " papers."
         << std::endl;

      witFree (demandVol);
      witFree (shipVol);
      }

   witGetObjValues (theWitRun, & objValue, & boundsValue);

   std::cout
      << "The expected profit is $"
      << objValue
      << "."
      << std::endl;
   }
@


1.2
log
@Minor update.
@
text
@@


1.1
log
@Added news.C:
   A WIT application program the demonstrates stochastic implosion.
@
text
@d5 2
@

