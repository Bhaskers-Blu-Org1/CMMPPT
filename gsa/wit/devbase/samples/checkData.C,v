head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2005.07.15.18.53.18;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.07.15.14.10.25;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.07.14.15.44.36;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.07.14.15.17.25;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.07.13.23.21.01;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.13.23.18.07;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@[exceptions]
@
text
@//------------------------------------------------------------------------------
// C++ Program "checkData.C"
//
// This program is intended as a demonstration of how to catch an exception
// thrown by WIT.
// The program takes a file name as its command line argument and displays
// text indicating whether or not the file is a valid WIT data file.
//------------------------------------------------------------------------------

#include <wit.h>

#include <string>
#include <iostream>

//------------------------------------------------------------------------------

void invokeWit (const std::string & fileName);

void handleException (
   const std::string & fileName,
   WitException &      theWitExc);

//------------------------------------------------------------------------------

int main (int argc, char * argv[])
   {
   std::string fileName;

   if (argc != 2)
      {
      std::cerr
         << "ERROR: Exactly one argument must be passed to checkData."
         << std::endl
         << std::endl;

      exit (1);
      }

   fileName = argv[1];

   try
      {
      invokeWit (fileName);
      }

   catch (WitException & theWitExc)
      {
      handleException (fileName, theWitExc);
      }

   std::cout
      << std::endl
      << "File \""
      << fileName
      << "\" is a valid WIT data file."
      << std::endl
      << std::endl;

   exit (0);
   }

//------------------------------------------------------------------------------

void invokeWit (const std::string & fileName)
   {
   WitRun * theWitRun;

   witNewRun (& theWitRun);

   remove ("wit.msg");

   witSetMesgFileName (
      theWitRun,
      WitTRUE,
      "wit.msg");

   witSetMesgThrowException (
      theWitRun,
      WitFALSE,
      WitSEVERE_MESSAGES,
      WitTRUE);

   witSetMesgThrowException (
      theWitRun,
      WitFALSE,
      WitFATAL_MESSAGES,
      WitTRUE);

   witInitialize (theWitRun);

   witReadData (theWitRun, fileName.c_str ());

   witDeleteRun (theWitRun);
   }

//------------------------------------------------------------------------------

void handleException (
      const std::string & fileName,
      WitException &      theWitExc)
   {
   std::string throwerName;

   throwerName = theWitExc.funcName;

   if (throwerName == "witReadData")
      if (theWitExc.retCode == WitSEVERE_RC)
         {
         std::cout
            << std::endl
            << "File \""
            << fileName
            << "\" is a NOT valid WIT data file."
            << std::endl
            << std::endl;

         exit (0);
         }

   std::cerr
      << std::endl
      << "checkData is terminating due to a programming error."
      << std::endl
      << std::endl;

   exit (1);
   }
@


1.5
log
@[exceptions]
@
text
@d2 1
a2 1
// C++ Program "checkData"
d107 1
a107 1
      if (theWitExc.myReturnCode == WitSEVERE_RC)
@


1.4
log
@[exceptions]
@
text
@d19 4
a27 1
   std::string throwerName;
d48 1
a48 23
      throwerName = theWitExc.funcName;

      if (throwerName == "witReadData")
         if (theWitExc.myReturnCode == WitSEVERE_RC)
            {
            std::cout
               << std::endl
               << "File \""
               << fileName
               << "\" is a NOT valid WIT data file."
               << std::endl
               << std::endl;

            exit (0);
            }

      std::cerr
         << std::endl
         << "checkData is terminating due to a programming error."
         << std::endl
         << std::endl;

      exit (1);
a90 2
// witSetPartBuildNstn (theWitRun, "A", WitTRUE);

d95 33
@


1.3
log
@Minor update.
@
text
@d43 1
a43 1
   catch (witException & theWitExc)
d110 2
@


1.2
log
@Minor update.
@
text
@d17 1
a17 6
void invokeWit (
   const std::string & fileName);

void handleExc (
   witException &      theWitExc,
   const std::string & fileName);
d24 1
d45 23
a67 1
      handleExc (theWitExc, fileName);
d70 1
a70 1
   std::cerr
a113 35

//------------------------------------------------------------------------------

void handleExc (
      witException &      theWitExc,
      const std::string & fileName)
   {
   std::string throwerName;

   throwerName = theWitExc.funcName;

   if (theWitExc.myReturnCode == WitSEVERE_RC)
      {
      if (throwerName == "witReadData")
         std::cerr
            << std::endl
            << "File \""
            << fileName
            << "\" is a NOT valid WIT data file."
            << std::endl
            << std::endl;
      else
         std::cerr
            << std::endl
            << "A programming error has been detected in checkData."
            << std::endl;
      }
   else
      std::cerr
         << std::endl
         << "A programming error has been detected in WIT."
         << std::endl;

   exit (1);
   }
@


1.1
log
@Added checkData.C, a program that demonstrates how to catch WIT exceptions.
The program tests the validity of the WIT data file.
@
text
@d4 3
a6 1
// This program takes a file name as its command line argument and displays
@

