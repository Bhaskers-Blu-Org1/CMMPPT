head	1.16;
access;
symbols
	dummy-release:1.1.1.1 dummy-vendor:1.1.1;
locks; strict;
comment	@# @;


1.16
date	2011.05.16.21.06.25;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.05.13.23.58.07;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.05.13.19.54.14;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.05.13.17.52.46;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.05.13.15.44.53;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.05.12.23.56.24;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.05.12.23.46.35;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.05.12.20.57.14;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.10.23.44.31;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.10.22.41.03;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.10.18.48.22;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.09.20.14.43;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.06.17.55.12;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.05.21.33.04;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.05.21.32.23;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.05.19.59.22;	author rjw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.05.19.59.22;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Testing unmodifyability.
@
text
@
//==============================================================================
// WIT-ML/Test Source File StatusQuoTester.java.
//==============================================================================

package com.ibm.witml.test;

import com.ibm.witml.InputTable;
import com.ibm.witml.PrimitiveCategory;
import com.ibm.witml.AppProblem;
import com.ibm.witml.Scheme;

/*******************************************************************************
 * Responsible for performing a series of tests on WIT-ML each of which
 * generates an error condition that that causes an Exception to be thrown,
 * but which does not change the state of WIT-ML.
 *******************************************************************************
 */
final class StatusQuoTester
{
//==============================================================================
// Package-Internal
//==============================================================================

/*******************************************************************************
 * Performs a status quo test.
 *******************************************************************************
 */
   static void performTest ()
      {
      int             theCaseIdx;
      StatusQuoTester theSQTester;
      
      for (theCaseIdx = 1; theCaseIdx <= 8; theCaseIdx ++)
         {
         theSQTester = new StatusQuoTester (theCaseIdx);
      
         theSQTester.testCurCase ();
         }

      System.out.println (
         "\n"
       + "Normal termination of status quo test.");
      }

//==============================================================================
// Private
//==============================================================================

/*******************************************************************************
 * Private Constructor
 *******************************************************************************
 */
   private StatusQuoTester (int theCaseIdx)
      {
      curCaseIdx = theCaseIdx;
      
      STATUS_QUO = Scheme.newScheme ("STATUS_QUO");
      }

/*******************************************************************************
 * Performs the status quo test indexed by curCaseIdx.
 *******************************************************************************
 */
   private void testCurCase ()
      {
      try
         {
         innerTestCurCase ();
 
         throw new AssertionError ();
         }

      catch (Exception theExc)
         {
         System.out.flush ();
         
         theExc.printStackTrace ();
                  
         System.out.flush ();
         }

      System.out.printf (
         "\n"
       + "Status Quo Test Case %d now concludes.\n",
         curCaseIdx);
      }

/*******************************************************************************
 * Performs the status quo test indexed by curCaseIdx.
 *******************************************************************************
 */
   private void innerTestCurCase ()
      throws
         Exception
      {
      switch (curCaseIdx)
         {
         case 1:
            testCase1 ();
            break;

         case 2:
            testCase2 ();
            break;

         case 3:
            testCase3 ();
            break;

         case 4:
            testCase4 ();
            break;

         case 5:
            testCase5 ();
            break;

         case 6:
            testCase6 ();
            break;

         case 7:
            testCase7 ();
            break;

         case 8:
            testCase8 ();
            break;

         default:
            throw new AssertionError ();
         }
      }

/*******************************************************************************
 * Performs status quo test case 1.
 *******************************************************************************
 */
   
   private void testCase1 ()
      {
      printHeading (
         "Passing a null argument to Scheme.newScheme (...).");

      Scheme.newScheme (null);
      }

/*******************************************************************************
 * Performs status quo test case 2.
 *******************************************************************************
 */
   private void testCase2 ()
      throws
         Exception
      {
      InputTable theTable;

      printHeading (
         "Call to theInputRow.getCell (...) with an invalid heading.");

      theTable = InputTable.newInputTable ("area.csv");
         
      theTable.getRows ().get (0).getCell ("nonsense");
      }

/*******************************************************************************
 * Performs status quo test case 3.
 *******************************************************************************
 */
   private void testCase3 ()
      {
      printHeading (
         "Creating a PrimitiveCategory with a duplicate name.");

      STATUS_QUO.newPrimitiveCategory ("PRIMCAT3");
      STATUS_QUO.newPrimitiveCategory ("PRIMCAT3");
      }

/*******************************************************************************
 * Performs status quo test case 4.
 *******************************************************************************
 */
   private void testCase4 ()
      {
      Scheme            SCHEME4;
      PrimitiveCategory PRIMCAT4;

      printHeading (
         "Call to theAppProblem.newPrimitive (...) with a Scheme mismatch.");
      
      SCHEME4  = Scheme.newScheme ("SCHEME4");
      
      PRIMCAT4 = SCHEME4.newPrimitiveCategory ("PRIMCAT4");
      
      makeAppProblem ();
      
      myAppProblem.newPrimitive (PRIMCAT4, "Prim4");
      }
   
/*******************************************************************************
 * Performs status quo test case 5.
 *******************************************************************************
 */
   private void testCase5 ()
      {
      printHeading (
         "Call to theScheme.newPrimitiveCategory (...) on a frozen Scheme.");
      
      STATUS_QUO.freeze ();
      
      STATUS_QUO.newPrimitiveCategory ("PRIMCAT5");
      }

/*******************************************************************************
 * Performs status quo test case 6.
 *******************************************************************************
 */
   private void testCase6 ()
      {
      printHeading (
         "Call to theScheme.newAppProblem (...) on an unfrozen Scheme.");
      
      STATUS_QUO.newAppProblem ("Test Case #6");
      }

/*******************************************************************************
 * Performs status quo test case 7.
 *******************************************************************************
 */
   private void testCase7 ()
      {
      PrimitiveCategory PRIMCAT7;

      printHeading (
         "Call to theAppProblem.newPrimitive (...) with a name collision.");
      
      PRIMCAT7 = STATUS_QUO.newPrimitiveCategory ("PRIMCAT7");
      
      makeAppProblem ();
      
      myAppProblem.newPrimitive (PRIMCAT7, "Prim7");
      myAppProblem.newPrimitive (PRIMCAT7, "Prim7");
      }

/*******************************************************************************
 * Performs status quo test case 8.
 *******************************************************************************
 */
   private void testCase8 ()
      {
      PrimitiveCategory PRIMCAT8;

      printHeading (
         "Call to a modifying method on the result of "
       + "theAppProblem.get (thePrimCat).");
      
      PRIMCAT8 = STATUS_QUO.newPrimitiveCategory ("PRIMCAT8");
      
      makeAppProblem ();
      
      myAppProblem.get (PRIMCAT8).clear ();
      }

/*******************************************************************************
 * Prints a heading for the status quo test case indexed by theCaseIdx.
 * 
 * @@param text Text describing the status quo test case.
 *******************************************************************************
 */
   private void printHeading (String text)
      {
      System.out.printf (
         "\n"
       + "----------------------------------------"
       + "----------------------------------------\n"
       + "WIT-MF Status Quo Test Case %d:\n"
       + "\n"
       + "%s\n"
       + "----------------------------------------"
       + "----------------------------------------\n"
       + "\n",
         curCaseIdx,
         text);
      }

/*******************************************************************************
 * Creates myAppProblem.
 *******************************************************************************
 */
   private void makeAppProblem ()
      {
      STATUS_QUO.freeze ();
      
      myAppProblem = STATUS_QUO.newAppProblem ("Test Case #" + curCaseIdx);
      }

/*******************************************************************************
 * The index of the status quo test cased to be performed.
 *******************************************************************************
 */
   private final int curCaseIdx;
   
/*******************************************************************************
 * The main Scheme to be used for a status quo test.
 *******************************************************************************
 */
   private final Scheme STATUS_QUO;

/*******************************************************************************
 * The main AppProblem to be used for a status quo test.
 *******************************************************************************
 */
   private AppProblem myAppProblem = null;

//==============================================================================
}
@


1.15
log
@Added class PrimitiveMgr.
@
text
@d34 1
a34 1
      for (theCaseIdx = 1; theCaseIdx <= 7; theCaseIdx ++)
d127 4
d247 19
@


1.14
log
@Realization ==> AppProblem
@
text
@d34 1
a34 1
      for (theCaseIdx = 1; theCaseIdx <= 6; theCaseIdx ++)
d123 4
d224 19
@


1.13
log
@Removed class Modeler.
@
text
@d10 1
a10 1
import com.ibm.witml.Realization;
d182 1
a182 1
         "Call to theRealization.newPrimitive (...) with a Scheme mismatch.");
d188 1
a188 1
      makeRealization ();
d190 1
a190 1
      myRealization.newPrimitive (PRIMCAT4, "Prim4");
d214 1
a214 1
         "Call to theScheme.newRealization (...) on an unfrozen Scheme.");
d216 1
a216 1
      STATUS_QUO.newRealization ("Test Case #6");
d242 1
a242 1
 * Creates myRealization.
d245 1
a245 1
   private void makeRealization ()
d249 1
a249 1
      myRealization = STATUS_QUO.newRealization ("Test Case #" + curCaseIdx);
d265 1
a265 1
 * The main Realization to be used for a status quo test.
d268 1
a268 1
   private Realization myRealization = null;
@


1.12
log
@Static Factory methods.
@
text
@a8 1
import com.ibm.witml.Modeler;
d182 1
a182 1
         "Call to theModeler.newPrimitive (...) with a Scheme mismatch.");
d188 1
a188 1
      makeSQModeler ();
d190 1
a190 1
      mySQModeler.newPrimitive (PRIMCAT4, "Prim4");
d242 1
a242 1
 * Creates mySQModeler and its Realization.
d245 1
a245 1
   private void makeSQModeler ()
a246 2
      Realization theRealization;
      
d249 1
a249 3
      theRealization = STATUS_QUO.newRealization ("Test Case #" + curCaseIdx);
      
      mySQModeler    = new SQModeler (theRealization);
d265 1
a265 1
 * The main Scheme to be used for a status quo test.
d268 1
a268 1
   private SQModeler mySQModeler = null;
a269 16
/*******************************************************************************
 * Private Static Nested Class SQModeler: </br>
 * The Modeler class for status quo tests.
 *******************************************************************************
 */
   private static class SQModeler extends Modeler
   {
   /****************************************************************************
    * Private Constructor
    ****************************************************************************
    */
      private SQModeler (Realization theRealization)
         {
         super (theRealization);
         }
   }
@


1.11
log
@Status Quo Test Case 6.
@
text
@d59 1
a59 1
      STATUS_QUO = Scheme.newInstance ("STATUS_QUO");
d137 1
a137 1
         "Passing a null argument to Scheme.newInstance (...).");
d139 1
a139 1
      Scheme.newInstance (null);
d155 1
a155 1
      theTable = InputTable.newInstance ("area.csv");
d185 1
a185 1
      SCHEME4  = Scheme.newInstance ("SCHEME4");
@


1.10
log
@Re-worked the status quo test.
@
text
@d35 1
a35 1
      for (theCaseIdx = 1; theCaseIdx <= 5; theCaseIdx ++)
d120 4
d209 12
@


1.9
log
@theScheme.frozen
@
text
@d20 1
a20 1
final class StatusQuoTester extends Modeler
d32 2
a33 2
      Realization     theRealization;
      StatusQuoTester theStatusQuoTester;
d35 3
a37 1
      STATUS_QUO.freeze ();
d39 2
a40 1
      theRealization     = STATUS_QUO.newRealization ("Status Quo");
d42 3
a44 3
      theStatusQuoTester = new StatusQuoTester (theRealization);

      theStatusQuoTester.perfTest ();
d55 1
a55 1
   private StatusQuoTester (Realization theRealization)
d57 3
a59 1
      super (theRealization);
d63 1
a63 1
 * Internal implementation of performTest ().
d66 1
a66 1
   private void perfTest ()
d68 1
a68 1
      for (curCaseIdx = 1; curCaseIdx <= 5; curCaseIdx ++)
d70 1
a70 3
         try
            {
            testCurCase ();
d72 2
a73 2
            throw new AssertionError ();
            }
d75 3
a77 3
         catch (Exception theExc)
            {
            System.out.flush ();
d79 1
a79 1
            theExc.printStackTrace ();
d81 1
a81 7
            System.out.flush ();
            }

         System.out.printf (
            "\n"
          + "Status Quo Test Case %d now concludes.\n",
            curCaseIdx);
d84 1
a84 1
      System.out.println (
d86 2
a87 1
       + "Normal termination of status quo test.");
d94 1
a94 1
   private void testCurCase ()
d129 1
a161 2
      Scheme SCHEME3;
   
d165 2
a166 4
      SCHEME3 = Scheme.newInstance ("SCHEME3");
   
      SCHEME3.newPrimitiveCategory ("PRIMCAT3");
      SCHEME3.newPrimitiveCategory ("PRIMCAT3");
d185 3
a187 1
      newPrimitive (PRIMCAT4, "Prim4");
d189 1
a189 1

d199 2
d227 1
a227 1
 * The Scheme to be used for some status quo tests.
d230 10
a239 1
   private static final Scheme STATUS_QUO = Scheme.newInstance ("STATUS_QUO");
d245 1
a245 1
   private int curCaseIdx;
d247 28
@


1.8
log
@Moved a factory method.
@
text
@d23 1
a23 1
// Package-Internal Methods
d35 2
d45 1
a45 1
// Private Constructors
a56 4
//==============================================================================
// Private Methods
//==============================================================================

d63 1
a63 1
      for (curCaseIdx = 1; curCaseIdx <= 4; curCaseIdx ++)
d118 4
d163 2
d168 4
a171 2
      STATUS_QUO.newPrimitiveCategory ("PRIMCAT1");
      STATUS_QUO.newPrimitiveCategory ("PRIMCAT1");
d194 12
a226 4
///==============================================================================
// Private Fields
//==============================================================================
   
d228 1
a228 1
 * The Scheme to be used for most status quo tests.
@


1.7
log
@theModeler.newPrimitive (...)
@
text
@d35 1
a35 1
      theRealization     = Realization.newInstance ("Status Quo", STATUS_QUO);
@


1.6
log
@ElementCategory ==> PrimitiveCategory
Element         ==> Primitive
ItemCategory    ==> ElementCategory
Item            ==> Element
@
text
@d9 3
d20 1
a20 1
final class StatusQuoTester
d32 1
d34 2
d37 1
a37 1
      theStatusQuoTester = new StatusQuoTester ();
d50 1
a50 1
   private StatusQuoTester ()
d52 1
d65 1
a65 1
      for (curCaseIdx = 1; curCaseIdx <= 3; curCaseIdx ++)
d116 4
a158 1
   
a159 2
      throws
         Exception
a160 2
      Scheme theScheme;
      
d164 17
a180 1
      theScheme = Scheme.newInstance ("CASE_3");
d182 3
a184 2
      theScheme.newPrimitiveCategory ("PRIMCAT1");
      theScheme.newPrimitiveCategory ("PRIMCAT1");
d212 6
@


1.5
log
@Class Scheme
@
text
@d156 1
a156 1
         "Creating an ElementCategory with a duplicate name.");
d160 2
a161 2
      theScheme.newElementCategory ("ELCAT1");
      theScheme.newElementCategory ("ELCAT1");
@


1.4
log
@Added class ItemCategory.
@
text
@d58 1
a58 1
      for (curCaseIdx = 1; curCaseIdx <= 2; curCaseIdx ++)
d105 4
d134 2
a138 2
      InputTable theTable;

d145 20
d195 1
a195 1

@


1.3
log
@CVS Test 2.
@
text
@d37 1
a37 1
// Private Methods & Constructors
d48 4
@


1.2
log
@CVS Test 2.
@
text
@a3 1
// CVS Test 2.
@


1.1
log
@Initial revision
@
text
@d4 1
@


1.1.1.1
log
@Creating a repository for WIT-ML.

@
text
@@
