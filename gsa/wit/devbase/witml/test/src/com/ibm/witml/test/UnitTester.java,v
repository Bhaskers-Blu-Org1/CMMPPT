head	1.14;
access;
symbols
	dummy-release:1.1.1.1 dummy-vendor:1.1.1;
locks; strict;
comment	@# @;


1.14
date	2011.05.16.20.42.26;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.05.16.19.05.47;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.05.13.19.54.14;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.05.13.17.52.47;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.05.13.15.44.54;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.05.12.20.57.14;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.12.17.58.11;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.11.23.45.35;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.10.23.44.31;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.10.22.41.04;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.10.18.48.22;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.06.22.44.48;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.06.17.55.13;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.05.19.59.23;	author rjw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.05.19.59.23;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Primitive List.
@
text
@
//==============================================================================
// WIT-ML/Test Source File UnitTester.java.
//==============================================================================

package com.ibm.witml.test;

import com.ibm.witml.Element;
import com.ibm.witml.InputRow;
import com.ibm.witml.InputTable;
import com.ibm.witml.Primitive;
import com.ibm.witml.PrimitiveCategory;
import com.ibm.witml.AppProblem;
import com.ibm.witml.Scheme;

/*******************************************************************************
 * Responsible for performing a unit test of WIT-ML.
 *******************************************************************************
 */
final class UnitTester
{
//==============================================================================
// Package
//==============================================================================

/*******************************************************************************
 * Performs a unit test of WIT-ML: Invokes all public methods of WIT-ML.
 *******************************************************************************
 */
   static void performTest ()
      {
      try
         {
         UnitTester theUnitTester;
         
         theUnitTester = new UnitTester ();

         theUnitTester.perfTest ();
         }

      catch (Exception theExc)
         {
         theExc.printStackTrace ();

         System.exit (4);
         }

      System.out.printf (
         "\n"
       + "Normal termination of unit test.%n");
      }

//==============================================================================
// Private
//==============================================================================
   
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   private UnitTester (AppProblem theAppProblem)
      {
      myAppProblem = theAppProblem;
      }

/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   private UnitTester ()
      {
      myAppProblem = UNIT_TEST.newAppProblem ("Unit-Test");
      }

/*******************************************************************************
 * Internal implementation of the unit test.
 *******************************************************************************
 */
   private void perfTest ()
      throws
         Exception
      {
      testInputTable        ();
      testScheme            ();
      testPrimitiveCategory ();
      testAppProblem        ();
      testPrimitive         ();
      }

/*******************************************************************************
 * Tests class InputTable and the classes that support it.
 *******************************************************************************
 */
   private void testInputTable ()
      throws
         Exception
      {
      InputTable theTable;

      theTable = InputTable.newInputTable ("area.csv");

      printTable       (theTable);
      printNonHeadings (theTable);
      }

/*******************************************************************************
 * Prints theTable.
 *******************************************************************************
 */
   private void printTable (InputTable theTable)
      {
      for (InputRow theRow: theTable.getRows ())
         {
         System.out.printf (
            "%n"
          + "Row %2d:%n"
          + "   Area:          = \"%s\"%n"
          + "   Work_Type:     = \"%s\"%n"
          + "   Workload_Type: = \"%s\"%n"
          + "   #Shifts:       = \"%s\"%n"
          + "   Min_IBM%%:      = \"%s\"%n"
          + "   #999:          = \"%s\"%n"
          + "   Training_Time: = \"%s\"%n",
            theRow.getIndex (),
            theRow.getCell ("Area"),
            theRow.getCell ("Work_Type"),
            theRow.getCell ("Workload_Type"),
            theRow.getCell ("#Shifts"),
            theRow.getCell ("Min_IBM%"),
            theRow.getCell ("#999"),
            theRow.getCell ("Training_Time"));
         }
      }

/*******************************************************************************
 * Prints some Strings that are not headings in theTable.
 *******************************************************************************
 */
   private void printNonHeadings (InputTable theTable)
      {
      String[] nonHeadings;

      System.out.printf (
         "%n"
       + "Not headings in the table:%n"
       + "%n");

      nonHeadings =
         theTable.findNonHeadings (
            "#Shifts",
            "Something Else",
            "Min_IBM%");

      for (String nonHeading: nonHeadings)
         System.out.printf (
            "   \"%s\"%n",
            nonHeading);
      }

/*******************************************************************************
 * Tests class Scheme.
 *******************************************************************************
 */
   private void testScheme ()
      {
      System.out.printf (
         "%n"
       + "%s:%n"
       + "   Name:   \"%s\"%n"
       + "   Frozen: %s%n",
         UNIT_TEST,
         UNIT_TEST.getName (),
         UNIT_TEST.isFrozen ());
      }

/*******************************************************************************
 * Tests class PrimitiveCategory.
 *******************************************************************************
 */
   private void testPrimitiveCategory ()
      {
      System.out.printf (
         "%n"
       + "%s:%n"
       + "   Scheme: \"%s\"%n"
       + "   Name:   \"%s\"%n",
         A_PRIM,
         A_PRIM.getScheme ().getName (),
         A_PRIM             .getName ());
      }

/*******************************************************************************
 * Tests class AppProblem.
 *******************************************************************************
 */
   private void testAppProblem ()
      {
      System.out.printf (
         "%n"
       + "%s:%n"
       + "   Scheme: \"%s\"%n"
       + "   Name:   \"%s\"%n",
         myAppProblem,
         myAppProblem.getScheme ().getName (),
         myAppProblem             .getName ());
      }

/*******************************************************************************
 * Tests class Primitive.
 *******************************************************************************
 */
   private void testPrimitive ()
      {
      Primitive firstA_PRIM;
      Element   theElem;
      Primitive foundPrim;
      
      firstA_PRIM = myAppProblem.newPrimitive (A_PRIM, "First");
      
                    myAppProblem.newPrimitive (A_PRIM, "Second");

      System.out.printf (
         "%n"
       + "%s:%n"
       + "   AppProblem:        \"%s\"%n"
       + "   PrimitiveCategory: \"%s\"%n"
       + "   Name:              \"%s\"%n",
         firstA_PRIM,
         firstA_PRIM.getAppProblem        ().getName (),
         firstA_PRIM.getPrimitiveCategory ().getName (),
         firstA_PRIM                        .getName ());
      
      theElem = firstA_PRIM;
      
      System.out.printf (
         "   ElementCategory:   \"%s\"%n",
         theElem.getElementCategory ().getName ());
      
      foundPrim = myAppProblem.get (A_PRIM, "First");
      
      assert (foundPrim == firstA_PRIM);

      System.out.printf (
         "%n"
       + "Primitives:%n");
      
      for (Primitive thePrim: myAppProblem.get (A_PRIM))
         {
         System.out.printf ("   %s%n", thePrim);
         }
      }

/*******************************************************************************
 * The Scheme for the unit test.
 *******************************************************************************
 */
   private static final Scheme             UNIT_TEST =
                        Scheme.newScheme ("UNIT_TEST");

/*******************************************************************************
 * The Elements of this PrimitiveCategory are "A-Primitives".
 *******************************************************************************
 */
   private static final PrimitiveCategory   A_PRIM =
           UNIT_TEST.newPrimitiveCategory ("A_PRIM");
   
/*******************************************************************************
 * The AppProblem for the unit test.
 *******************************************************************************
 */
   private final AppProblem myAppProblem;
   
//==============================================================================
// Static initialization block
// Freezes the Scheme.
//==============================================================================

   static
      {
      UNIT_TEST.freeze ();
      }
   
//==============================================================================
}
@


1.13
log
@Primitive look-up.
@
text
@d214 3
a216 3
      Primitive theA_PRIM;
      Element   theA_PRIM_Elem;
      Primitive foundA_PRIM;
d218 1
a218 2
      theA_PRIM = myAppProblem.newPrimitive (A_PRIM, "#1");
                  myAppProblem.newPrimitive (A_PRIM, "#2");
d220 2
d228 4
a231 4
         theA_PRIM,
         theA_PRIM.getAppProblem        ().getName (),
         theA_PRIM.getPrimitiveCategory ().getName (),
         theA_PRIM                        .getName ());
d233 1
a233 1
      theA_PRIM_Elem = theA_PRIM;
d237 3
a239 1
         theA_PRIM_Elem.getElementCategory ().getName ());
d241 5
a245 1
      foundA_PRIM = myAppProblem.get (A_PRIM, "#1");
d247 4
a250 1
      assert (foundA_PRIM == theA_PRIM);
@


1.12
log
@Realization ==> AppProblem
@
text
@d216 1
d219 1
d237 4
@


1.11
log
@Removed class Modeler.
@
text
@d13 1
a13 1
import com.ibm.witml.Realization;
d61 1
a61 1
   private UnitTester (Realization theRealization)
d63 1
a63 1
      myRealization = theRealization;
d72 1
a72 1
      myRealization = UNIT_TEST.newRealization ("Unit-Test");
d86 1
a86 1
      testRealization       ();
d193 1
a193 1
 * Tests class Realization.
d196 1
a196 1
   private void testRealization ()
d203 3
a205 3
         myRealization,
         myRealization.getScheme ().getName (),
         myRealization             .getName ());
d217 1
a217 1
      theA_PRIM = myRealization.newPrimitive (A_PRIM, "#1");
d222 1
a222 1
       + "   Realization:       \"%s\"%n"
d226 1
a226 1
         theA_PRIM.getRealization       ().getName (),
d252 1
a252 1
 * The Realization for the unit test.
d255 1
a255 1
   private final Realization myRealization;
@


1.10
log
@Static Factory methods.
@
text
@a10 1
import com.ibm.witml.Modeler;
d20 1
a20 1
final class UnitTester extends Modeler
d23 1
a23 1
// Package internal Methods
d34 1
a34 2
         Realization theRealization;
         UnitTester  theUnitTester;
d36 1
a36 5
         UNIT_TEST.freeze ();

         theRealization = UNIT_TEST.newRealization ("Unit-Test");
      
         theUnitTester = new UnitTester (theRealization);
d54 1
a54 1
// Private Constructors
d63 10
a72 1
      super (theRealization);
a74 4
//==============================================================================
// Private Methods
//==============================================================================
   
d203 3
a205 3
         getRealization (),
         getRealization ().getScheme ().getName (),
         getRealization ()             .getName ());
d217 1
a217 1
      theA_PRIM = newPrimitive (A_PRIM, "#1");
a236 4
//==============================================================================
// Private Static Fields
//==============================================================================

d251 16
@


1.9
log
@theScheme.frozen
@
text
@d101 1
a101 1
      theTable = InputTable.newInstance ("area.csv");
d246 2
a247 2
   private static final Scheme               UNIT_TEST =
                        Scheme.newInstance ("UNIT_TEST");
@


1.8
log
@theElement.getElementCategory ()
@
text
@d37 2
d170 2
a171 1
       + "   Name: \"%s\"%n",
d173 2
a174 1
         UNIT_TEST.getName ());
@


1.7
log
@Primitive and Element.
@
text
@d8 1
d212 1
d223 1
a223 1
         theA_PRIM.getRealization ()      .getName (),
d226 6
@


1.6
log
@Moved a factory method.
@
text
@d11 1
d181 2
a182 2
       + "   Name:   \"%s\"%n"
       + "   Scheme: \"%s\"%n",
d184 2
a185 2
         A_PRIM.getName   (),
         A_PRIM.getScheme ().getName ());
d197 2
a198 2
       + "   Name:   \"%s\"%n"
       + "   Scheme: \"%s\"%n",
d200 2
a201 2
         getRealization ().getName   (),
         getRealization ().getScheme ().getName ());
d210 14
a223 1
      newPrimitive (A_PRIM, "#1");
@


1.5
log
@theModeler.newPrimitive (...)
@
text
@d36 1
a36 1
         theRealization = Realization.newInstance ("Unit-Test", UNIT_TEST);
@


1.4
log
@ElementCategory ==> PrimitiveCategory
Element         ==> Primitive
ItemCategory    ==> ElementCategory
Item            ==> Element
@
text
@d84 1
d203 9
@


1.3
log
@ElementCategory / ItemCategory
@
text
@a7 1
import com.ibm.witml.ElementCategory;
d11 1
d80 4
a83 4
      testInputTable      ();
      testScheme          ();
      testElementCategory ();
      testRealization     ();
d171 1
a171 1
 * Tests class ElementCategory.
d174 1
a174 1
   private void testElementCategory ()
d181 3
a183 3
         A_ELEM,
         A_ELEM.getName   (),
         A_ELEM.getScheme ().getName ());
d214 1
a214 1
 * The Elements of this ElementCategory are "A-Elements".
d217 2
a218 2
   private static final ElementCategory   A_ELEM =
           UNIT_TEST.newElementCategory ("A_ELEM");
@


1.2
log
@Added class ItemCategory.
@
text
@d8 1
d36 1
a36 2
         theRealization =
            Realization.newInstance ("Unit-Test-Realization", UNIT_TEST_SCHEME);
d80 4
a83 3
      testInputTable  ();
      testScheme      ();
      testRealization ();
d166 18
a183 2
         UNIT_TEST_SCHEME,
         UNIT_TEST_SCHEME.getName ());
d196 1
a196 1
       + "   Scheme: %s%n",
d199 1
a199 1
         getRealization ().getScheme ());
d210 2
a211 9
   private static final Scheme UNIT_TEST_SCHEME;
   
//==============================================================================
// Private Non-Static Fields
//==============================================================================
   
//==============================================================================
// Static initialization block
//==============================================================================
d213 6
a218 4
   static
      {
      UNIT_TEST_SCHEME = Scheme.newInstance ("UNIT_TEST_SCHEME");
      }
@


1.1
log
@Initial revision
@
text
@d56 1
a56 1
// Private Methods & Constructors
d68 4
@


1.1.1.1
log
@Creating a repository for WIT-ML.

@
text
@@
