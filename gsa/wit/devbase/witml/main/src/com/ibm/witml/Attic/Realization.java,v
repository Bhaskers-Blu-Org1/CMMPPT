head	1.10;
access;
symbols
	dummy-release:1.1.1.1 dummy-vendor:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2011.05.13.19.54.10;	author rjw;	state dead;
branches;
next	1.9;

1.9
date	2011.05.13.17.52.42;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.12.17.58.07;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.11.20.50.40;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.10.23.44.12;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.10.22.40.59;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.06.23.47.35;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.06.22.44.44;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.06.17.55.08;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.05.19.59.25;	author rjw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.05.19.59.25;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Realization ==> AppProblem
@
text
@
//==============================================================================
// WIT-ML Source File Realization.java.
//==============================================================================

package       com.ibm.witml;

import static com.ibm.witml.Utility.*;

/*******************************************************************************
 * A Realization is the central object representing a "realization" of a WIT
 * model, i.e., a concrete instance of a WIT model, as populated with actual
 * data.</br> </br>
 * 
 * Please Note: </br>
 * The factory method for creating instances of this class is method
 * newRealization of class Scheme.
 *******************************************************************************
 */
public final class Realization
{
//==============================================================================
// Public
//==============================================================================

/*******************************************************************************
 * Factory method: <br>
 * Constructs a new Primitive that will belong to this Realization.
 *   
 * @@param  thePrimCat               The PrimitiveCategory to which the Primitive
 *                                  will belong
 * @@param  theName                  The name for the Primitive 
 * @@return                          The new Primitive
 * @@throws NullPointerException     If thePrimCat is null
 * @@throws NullPointerException     If theName    is null
 * @@throws IllegalArgumentException If the Scheme of thePrimCat does not match
 *                                  the Scheme of this Realization
 *******************************************************************************
 */
   public Primitive newPrimitive (
         PrimitiveCategory thePrimCat,
         String            theName)
      {
      prohibitNull (thePrimCat, "thePrimCat");
      prohibitNull (theName,    "theName");
      
      requireSchemeMatch (thePrimCat);
      
      return new Primitive (this, thePrimCat, theName);
      }
   
/*******************************************************************************
 * Override from class Object
 * 
 * @@return Format: <br>
 *         Realization "{getName ()}" of {getScheme ()}
 *******************************************************************************
 */
   public String toString ()
      {
      return "Realization \"" + myName + "\" of " + myScheme; 
      }
   
/*******************************************************************************
 * Accessor.
 * 
 * @@return The name of this Realization
 *******************************************************************************
 */
   public String getName ()
      {
      return myName;
      }

/*******************************************************************************
 * Accessor
 * 
 * @@return The Scheme of the WIT model realized by this Realization
 *******************************************************************************
 */
   public Scheme getScheme ()
      {
      return myScheme;
      }

//==============================================================================
// Package Internal
//==============================================================================
   
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   Realization (Scheme theScheme, String theName)
      {
      assert (theScheme != null);
      assert (theName   != null);
      
      myScheme = theScheme;
      myName   = theName;
      }

//==============================================================================
// Private
//==============================================================================

/*******************************************************************************
 * Verifies that the Scheme of thePrimCat matches the Scheme of this
 * Realization. <br>
 * To be called by newPrimitive (...).
 *******************************************************************************
 */
   private final void requireSchemeMatch (PrimitiveCategory thePrimCat)
      {
      if (thePrimCat.getScheme () != myScheme)
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   theRealization.newPrimitive (thePrimCat, theName) was\n"
             + "   called where the Scheme of thePrimCat does not match\n"
             + "   the Scheme of theRealization.\n"
             + "\n"
             + "      thePrimCat    .getScheme (): "
             +        thePrimCat    .getScheme () + "\n"
             + "      theRealization.getScheme (): " + getScheme () + "\n");
      }
   
/*******************************************************************************
 * The Scheme of the WIT model realized by this Realization
 *******************************************************************************
 */
   private final Scheme myScheme;
   
/*******************************************************************************
 * The name of this Realization
 *******************************************************************************
*/
   private final String myName;
   
//==============================================================================
}
@


1.9
log
@Removed class Modeler.
@
text
@@


1.8
log
@theElement.getElementCategory ()
@
text
@d27 26
d108 21
@


1.7
log
@Argument order.
@
text
@d39 1
a39 1
 * Getter.
d50 1
a50 1
 * Getter
@


1.6
log
@Moved a factory method.
@
text
@d68 1
a68 1
   Realization (String theName, Scheme theScheme)
d70 1
a71 1
      assert (theScheme != null);
d73 1
a74 1
      myScheme = theScheme;
d82 1
a82 1
 * The name of this Realization
d85 1
a85 1
   private final String myName;
d88 1
a88 1
 * The Scheme of the WIT model realized by this Realization
d90 2
a91 2
 */
   private final Scheme myScheme;
@


1.5
log
@theModeler.newPrimitive (...)
@
text
@d13 5
a17 1
 * data.
d23 1
a23 1
// Public Methods
a26 18
 * Factory method: Constructs a new Realization.
 *
 * @@param  theName              The name of the new Realization
 * @@param  theScheme            The Scheme of the WIT model 
 * @@return                      The new Realization
 * @@throws NullPointerException If theName   == null
 * @@throws NullPointerException If theScheme == null
 *******************************************************************************
 */
   public static Realization newInstance (String theName, Scheme theScheme)
      {
      prohibitNull (theName,   "theName");
      prohibitNull (theScheme, "theScheme");
      
      return new Realization (theName, theScheme);
      }
   
/*******************************************************************************
d61 1
a61 1
// Private Constructors
d68 1
a68 1
   private Realization (String theName, Scheme theScheme)
d78 1
a78 1
// Private Fields
@


1.4
log
@Changed Exceptions thrown
@
text
@d34 2
a35 2
      mustBeNonNull (theName,   "theName");
      mustBeNonNull (theScheme, "theScheme");
@


1.3
log
@ElementCategory / ItemCategory
@
text
@d25 5
a29 5
 * @@param  theName          The name of the new Realization
 * @@param  theScheme        The Scheme of the WIT model 
 * @@return                  The new Realization
 * @@throws RuntimeException If theName   is null
 * @@throws RuntimeException If theScheme is null
d34 2
a35 2
      mustBeNonNull (theName, "theName",   "Realization.newInstance");
      mustBeNonNull (theName, "theScheme", "Realization.newInstance");
@


1.2
log
@Added class ItemCategory.
@
text
@d40 7
a46 4
//******************************************************************************
// Override from class Object
//******************************************************************************
//
@


1.1
log
@Initial revision
@
text
@d72 1
a72 1
// Private Methods & Constructors
@


1.1.1.1
log
@Creating a repository for WIT-ML.

@
text
@@
