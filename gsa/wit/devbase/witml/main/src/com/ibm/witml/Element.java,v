head	1.7;
access;
symbols;
locks; strict;
comment	@# @;


1.7
date	2011.05.13.19.54.08;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.12.17.58.04;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.11.23.45.30;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.10.23.44.09;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.10.22.40.57;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.10.18.48.14;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.10.00.05.40;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Realization ==> AppProblem
@
text
@
//==============================================================================
// WIT-ML Source File Element.java.
//==============================================================================

package       com.ibm.witml;

import static com.ibm.witml.Utility.*;

/*******************************************************************************
 * An Element represents a data object in a WIT application problem. Each
 * Element belongs to a particular AppProblem and a particular ElementCategory.
 * The Elements that belong to a given AppProblem are the building blocks that
 * make up the AppProblem.
 *******************************************************************************
 */
public abstract class Element
{
//==============================================================================
// Public
//==============================================================================

/*******************************************************************************
 * Abstract Accessor.
 * 
 * @@return The ElementCategory to which this Element belongs
 *******************************************************************************
 */
   public abstract ElementCategory getElementCategory ();

/*******************************************************************************
 * Accessor.
 * 
 * @@return The AppProblem that owns this Element
 *******************************************************************************
 */
   public final AppProblem getAppProblem ()
      {
      return myAppProblem;
      }

//==============================================================================
// Package-Internal
//==============================================================================
   
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   Element (AppProblem theAppProblem)
      {
      myAppProblem = theAppProblem;
      }

//==============================================================================
// Private
//==============================================================================

/*******************************************************************************
 * The AppProblem that owns this Element.
 *******************************************************************************
 */
   private final AppProblem myAppProblem;
   
//==============================================================================
}
@


1.6
log
@theElement.getElementCategory ()
@
text
@d11 4
a14 4
 * An Element represents a data object in the realization of a WIT model. Each
 * Element belongs to a particular Realization and a particular ElementCategory.
 * The Elements that belong to a given Realization are the building blocks that
 * make up the Realization.
d34 1
a34 1
 * @@return The Realization that owns this Element
d37 1
a37 1
   public final Realization getRealization ()
d39 1
a39 1
      return myRealization;
d50 1
a50 1
   Element (Realization theRealization)
d52 1
a52 1
      myRealization = theRealization;
d60 1
a60 1
 * The Realization that owns this Element.
d63 1
a63 1
   private final Realization myRealization;
@


1.5
log
@Primitive and Element.
@
text
@d24 9
a32 1
 * Getter
@


1.4
log
@Moved a factory method.
@
text
@d20 15
d42 1
a42 1
   Element (Realization theRealization, ElementCategory theItemCat)
d44 1
a44 1
      assert (theItemCat.getScheme () == theRealization.getScheme ());
d48 10
@


1.3
log
@theModeler.newPrimitive (...)
@
text
@d20 1
a20 5
// Public Methods
//==============================================================================

//==============================================================================
// Package-Internal Constructors
a32 4
// Private Fields
//==============================================================================
   
//==============================================================================
@


1.2
log
@ElementCategory ==> PrimitiveCategory
Element         ==> Primitive
ItemCategory    ==> ElementCategory
Item            ==> Element
@
text
@d12 1
a12 1
 * Element belongs to a particular ElementCategory and a particular Realization.
d31 1
a31 1
   Element (ElementCategory theItemCat, Realization theRealization)
@


1.1
log
@Added class Element.
@
text
@d1 1
d11 4
a14 4
 * An Element is an Item that represents a data object that's considered to be
 * "elementary" or "fundamental", i.e., one that is not defined in terms of
 * other data objects. Each Element belongs to a particular ElementCategory and
 * a particular Realization. 
d17 1
a17 1
public final class Element extends Item
d24 1
a24 1
// Package Internal Constructors
d31 1
a31 1
   Element (ElementCategory theElCat, Realization theRealization)
d33 1
a33 1
      super (theElCat, theRealization);
@

