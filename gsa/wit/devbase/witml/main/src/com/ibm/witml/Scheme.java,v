head	1.17;
access;
symbols
	dummy-release:1.1.1.1 dummy-vendor:1.1.1;
locks; strict;
comment	@# @;


1.17
date	2011.05.13.23.58.04;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.05.13.19.54.10;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.05.13.15.44.50;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.05.12.23.56.20;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.05.12.23.46.32;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.05.12.20.57.09;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.05.12.17.58.07;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.05.11.20.50.40;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.05.10.23.44.13;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.10.22.40.59;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.10.18.48.18;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.09.22.43.06;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.09.20.14.39;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.06.23.47.36;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.06.22.44.44;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.06.17.55.09;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.05.19.59.24;	author rjw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.05.19.59.24;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Added class PrimitiveMgr.
@
text
@
//==============================================================================
// WIT-ML Source File Scheme.java.
//==============================================================================

package       com.ibm.witml;

import static com.ibm.witml.Utility.*;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/*******************************************************************************
 * A Scheme is the central object representing the static structure or "scheme"
 * of a WIT application problem, i.e., the data-independent aspects of the
 * problem.
 *******************************************************************************
 */
public final class Scheme
{
//==============================================================================
// Public
//==============================================================================

/*******************************************************************************
 * Factory method: <br>
 * Constructs a new Scheme.
 *
 * @@param  theName              The name of the WIT Model
 * @@return                      The new Scheme
 * @@throws NullPointerException If theName == null
 *******************************************************************************
 */
   public static Scheme newScheme (String theName)
      {
      prohibitNull (theName, "theName");
      
      return new Scheme (theName);
      }

/*******************************************************************************
 * Puts this Scheme into a frozen state. </br>
 * When a Scheme is frozen, its state cannot be changed.
 * 
 * @@throws IllegalStateException If this Scheme is frozen
 *******************************************************************************
 */
   public void freeze ()
      {
      prohibitFrozen ();
      
      frozen = true;
      }

/*******************************************************************************
 * Factory method: <br>
 * Constructs a new PrimitiveCategory that will belong to this Scheme.
 * 
 * @@param theName                   The name of the PrimitiveCategory to be
 *                                  constructed
 * @@return                          The new PrimitiveCategory
 * @@throws NullPointerException     If theName is null
 * @@throws IllegalArgumentException If theName duplicates the name of an
 *                                  existing ElementCategory in this Scheme
 * @@throws IllegalStateException    If this Scheme is frozen
 *******************************************************************************
 */
   public PrimitiveCategory newPrimitiveCategory (String theName)
      {
      PrimitiveCategory thePrimCat;
      
      prohibitNull         (theName, "theName");

      prohibitDupElCatName (theName);

      prohibitFrozen ();
      
      thePrimCat = new PrimitiveCategory (this, theName);
      
      myElementCategories  .add (thePrimCat);
      myPrimitiveCategories.add (thePrimCat);
      
      return thePrimCat;
      }

/*******************************************************************************
 * Factory method: Constructs a new AppProblem for this Scheme.
 *
 * @@param  theName               The name of the new AppProblem
 * @@return                       The new AppProblem
 * @@throws NullPointerException  If theName == null
 * @@throws IllegalStateException If this Scheme is not frozen
 *******************************************************************************
 */
   public AppProblem newAppProblem (String theName)
      {
      prohibitNull  (theName, "theName");
      
      requireFrozen (theName);
      
      return new AppProblem (this, theName);
      }
   
/*******************************************************************************
 * @@return Format: <br>
 *         Scheme "{getName ()}"
 *******************************************************************************
 */
   public String toString ()
      {
      return "Scheme \"" + myName + "\""; 
      }
   
/*******************************************************************************
 * @@return The name of the WIT model
 *******************************************************************************
 */
   public String getName ()
      {
      return myName;
      }

/*******************************************************************************
 * @@return True, iff this Scheme is "frozen". </br>
 * When a Scheme is frozen, its state cannot be changed.
 *******************************************************************************
 */
   public boolean isFrozen ()
      {
      return frozen;
      }

//==============================================================================
// Package Internal
//==============================================================================

/*******************************************************************************
 * @@return An unmodifiable view of a list of all PrimitiveCategories that belong
 *         to this Scheme.
 *******************************************************************************
 */
   List <PrimitiveCategory> getPrimitiveCategories ()
      {
      return Collections.unmodifiableList (myPrimitiveCategories);
      }

//==============================================================================
// Private
//==============================================================================

/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   private Scheme (String theName)
      {
      myName                = theName;
      myElementCategories   = new ArrayList <ElementCategory>   ();
      myPrimitiveCategories = new ArrayList <PrimitiveCategory> ();
      }

/*******************************************************************************
 * Verifies that theName does not duplicate the name of an existing
 * ElementCategory in this Scheme.
 * To be called by newPrimitiveCategory.
 *******************************************************************************
 */
   private void prohibitDupElCatName (String theName)
      {
      for (ElementCategory theElCat: myElementCategories)
         {
         if (theElCat.getName ().equals (theName))
            {
            throw
               new IllegalArgumentException (
                  "\n\n"
                + "   theScheme.newPrimitiveCategory (theName) was invoked\n"
                + "   where theName duplicates the name of an existing\n"
                + "   ElementCategory in theScheme.\n"
                + "\n"
                + "      Duplicate Name: \"" + theName + "\"\n");
            }
         }
      }

/*******************************************************************************
 * Verifies that this Scheme is not frozen.
 *******************************************************************************
 */
   private void prohibitFrozen ()
      {
      if (frozen)
         throw
            new IllegalStateException (
               "\n\n"
             + "   A method was called that changes with state of a Scheme\n"
             + "   when the Scheme was frozen:\n"
             + "\n"
             + "      " + this + "\n");
      }

/*******************************************************************************
 * Verifies that this Scheme is frozen. </br>
 * To be called by newAppProblem (theName).
 *******************************************************************************
 */
   private void requireFrozen (String theName)
      {
      if (! frozen)
         throw
            new IllegalStateException (
               "\n\n"
             + "   theScheme.newAppProblem (theName) was called\n"
             + "   when theScheme was not frozen:\n"
             + "\n"
             + "      theScheme: " + this    + "\n"
             + "      theName:   " + theName + "\n");
      }

/*******************************************************************************
 * The name of the WIT model.
 *******************************************************************************
 */
   private final String myName;
   
/*******************************************************************************
 * A list of all ElementCategories that belong to this Scheme.
 *******************************************************************************
 */
   private final ArrayList <ElementCategory> myElementCategories;

/*******************************************************************************
 * A list of all PrimitiveCategories that belong to this Scheme.
 *******************************************************************************
 */
   private final ArrayList <PrimitiveCategory> myPrimitiveCategories;

/*******************************************************************************
 * True, iff this Scheme is "frozen".
 *******************************************************************************
 */
   private boolean frozen = false;

//==============================================================================
}
@


1.16
log
@Realization ==> AppProblem
@
text
@d11 2
d81 2
a82 1
      myElementCategories.add (thePrimCat);
a105 2
 * Override from class Object
 * 
a115 2
 * Accessor.
 * 
a124 2
 * Accessor.
 * 
d135 14
d158 3
a160 2
      myName              = theName;
      myElementCategories = new ArrayList <ElementCategory> ();
a220 4
//==============================================================================
// Private Fields
//==============================================================================

d234 6
@


1.15
log
@Static Factory methods.
@
text
@d14 2
a15 3
 * of a WIT model, i.e., the data-independent aspects of a model. A Scheme is
 * populated with various objects that define the static structure of the WIT
 * model.
d85 1
a85 1
 * Factory method: Constructs a new Realization for this Scheme.
d87 2
a88 2
 * @@param  theName               The name of the new Realization
 * @@return                       The new Realization
d93 1
a93 1
   public Realization newRealization (String theName)
d99 1
a99 1
      return new Realization (this, theName);
d193 1
a193 1
 * To be called by newRealization (theName).
d202 1
a202 1
             + "   theScheme.newRealization (theName) was called\n"
@


1.14
log
@Status Quo Test Case 6.
@
text
@d34 1
a34 1
   public static Scheme newInstance (String theName)
@


1.13
log
@Re-worked the status quo test.
@
text
@d206 2
a207 2
             + "      theScheme:" + this    + "\n"
             + "      theName:  " + theName + "\n");
@


1.12
log
@theScheme.frozen
@
text
@d16 1
a16 2
 * model. These objects are called "schematic" objects and their classes are
 * called schematic classes.  
d42 2
a43 1
 * Puts this Scheme into a frozen state.
d130 1
a130 2
 * When a Scheme is frozen, the state of the Scheme and the state of its
 * Elements cannot be changed.
@


1.11
log
@theElement.getElementCategory ()
@
text
@d14 4
a17 1
 * of a WIT model, i.e., the data-independent aspects of a model.
d43 13
d65 1
d76 2
d88 4
a91 3
 * @@param  theName              The name of the new Realization
 * @@return                      The new Realization
 * @@throws NullPointerException If theName == null
d96 3
a98 1
      prohibitNull (theName, "theName");
d126 13
d149 1
a149 1
      myName           = theName;
d177 34
d222 1
a222 1
 * A list of all ItemCategories that belong to this Scheme.
d227 6
@


1.10
log
@Argument order.
@
text
@d94 1
a94 1
 * Getter.
@


1.9
log
@Moved a factory method.
@
text
@d59 1
a59 1
      thePrimCat = new PrimitiveCategory (theName, this);
d78 1
a78 1
      return new Realization (theName, this);
@


1.8
log
@theModeler.newPrimitive (...)
@
text
@d20 1
a20 1
// Public Methods
d67 15
d105 1
a105 1
// Private Constructors
a117 4
//==============================================================================
// Private Methods
//==============================================================================

@


1.7
log
@ElementCategory ==> PrimitiveCategory
Element         ==> Primitive
ItemCategory    ==> ElementCategory
Item            ==> Element
@
text
@d24 2
a25 1
 * Factory method: Constructs a new Scheme.
d34 1
a34 1
      mustBeNonNull (theName, "theName");
d40 1
d55 4
a58 15
      mustBeNonNull (theName, "theName");
      
      for (ElementCategory theItemCat: myItemCategories)
         {
         if (theItemCat.getName ().equals (theName))
            {
            throw
               new IllegalArgumentException (
                  "\n\n"
                + "   theScheme.newPrimitiveCategory (theName) was invoked\n"
                + "   where theName duplicates the name of an existing\n"
                + "   ElementCategory in theScheme.\n");
            }
         }
      
d61 1
a61 1
      myItemCategories.add (thePrimCat);
d100 29
a128 1
      myItemCategories = new ArrayList <ElementCategory> ();
d145 1
a145 1
   private final ArrayList <ElementCategory> myItemCategories;
@


1.6
log
@Class Item
@
text
@d39 1
a39 1
 * Constructs a new ElementCategory that will belong to this Scheme.
d41 1
a41 1
 * @@param theName                   The name of the ElementCategory to be
d43 1
a43 1
 * @@return                          The new ElementCategory
d46 1
a46 1
 *                                  existing ItemCategory in this Scheme
d49 1
a49 1
   public ElementCategory newElementCategory (String theName)
d51 1
a51 1
      ElementCategory theElCat;
d55 1
a55 1
      for (ItemCategory theItemCat: myItemCategories)
d62 1
a62 1
                + "   theScheme.newElementCategory (theName) was invoked\n"
d64 1
a64 1
                + "   ItemCategory in theScheme.\n");
d68 1
a68 1
      theElCat = new ElementCategory (theName, this);
d70 1
a70 1
      myItemCategories.add (theElCat);
d72 1
a72 1
      return theElCat;
d109 1
a109 1
      myItemCategories = new ArrayList <ItemCategory> ();
d126 1
a126 1
   private final ArrayList <ItemCategory> myItemCategories;
@


1.5
log
@Class Scheme
@
text
@d39 1
a39 1
 * Constructs a new ElementCategory.
d41 6
a46 4
 * @@param theName               The name of the ElementCategory to be
 *                              constructed
 * @@return                      The new ElementCategory
 * @@throws NullPointerException If theName is null
@


1.4
log
@Changed Exceptions thrown
@
text
@d10 2
d49 2
d52 19
a70 2

      return new ElementCategory (theName, this);
d106 2
a107 1
      myName = theName;
d119 6
@


1.3
log
@ElementCategory / ItemCategory
@
text
@d24 3
a26 3
 * @@param  theName          The name of the WIT Model
 * @@return                  The new Scheme
 * @@throws RuntimeException If theName is null
d31 1
a31 1
      mustBeNonNull (theName, "theName", "Scheme.newInstance");
d39 4
a42 4
 * @@param theName           The name of the ElementCategory to be
 *                          constructed
 * @@return                  The new ElementCategory
 * @@throws RuntimeException If theName is null
d47 1
a47 1
      mustBeNonNull (theName, "theName", "Scheme.newElementCategory");
@


1.2
log
@Added class ItemCategory.
@
text
@d36 23
a58 4
//******************************************************************************
// Override from class Object
//******************************************************************************
//
d61 1
a61 1
      return "Model Scheme \"" + myName + "\""; 
@


1.1
log
@Initial revision
@
text
@d57 1
a57 1
// Private Methods
@


1.1.1.1
log
@Creating a repository for WIT-ML.

@
text
@@
