head	1.9;
access;
symbols;
locks; strict;
comment	@# @;


1.9
date	2011.05.16.20.42.23;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.13.23.58.02;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.13.19.54.09;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.13.17.52.41;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.12.17.58.06;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.11.23.45.32;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.10.23.44.11;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.10.22.40.58;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.10.18.48.17;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Primitive List.
@
text
@
//==============================================================================
// WIT-ML Source File Primitive.java.
//==============================================================================

package       com.ibm.witml;

import static com.ibm.witml.Utility.*;

/*******************************************************************************
 * A Primitive is an Element that represents a data object that's considered to
 * be "primitive", i.e., one that is not defined in terms of other data objects.
 * Each Primitive has a name and belongs to a particular PrimitiveCategory and a
 * particular AppProblem. </br> </br>
 * 
 * Please Note: </br>
 * The factory method for creating instances of this class is method
 * newPrimitive of class AppProblem.
 *******************************************************************************
 */
public final class Primitive extends Element
{
//==============================================================================
// Public
//==============================================================================

/*******************************************************************************
 * Override from class Object
 *******************************************************************************
 */
   public String toString ()
      {
      return myPrimitiveCategory.getName () + " \"" + myName + "\"";
      }
   
/*******************************************************************************
 * Override from class Element
 * 
 * @@return The PrimitiveCategory to which this Primitive belongs
 *******************************************************************************
 */
   public ElementCategory getElementCategory ()
      {
      return myPrimitiveCategory;
      }

/*******************************************************************************
 * Accessor.
 * 
 * @@return The name of this Primitive
 *******************************************************************************
 */
   public String getName ()
      {
      return myName;
      }

/*******************************************************************************
 * Accessor.
 * 
 * @@return The PrimitiveCategory to which this Primitive belongs
 *******************************************************************************
 */
   public PrimitiveCategory getPrimitiveCategory ()
      {
      return myPrimitiveCategory;
      }

//==============================================================================
// Package Internal
//==============================================================================
   
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   Primitive (
         AppProblem        theAppProblem,
         PrimitiveCategory thePrimCat,
         String            theName)
      {
      super (theAppProblem);
      
      assert (thePrimCat.getScheme () == theAppProblem.getScheme ());
      
      myPrimitiveCategory = thePrimCat;
      myName              = theName;
      }
   
//==============================================================================
// Private
//==============================================================================

/*******************************************************************************
 * The name of this Primitive
 *******************************************************************************
 */
   private final PrimitiveCategory myPrimitiveCategory;
   
/*******************************************************************************
 * The name of this Primitive
 *******************************************************************************
 */
   private final String myName;
   
//==============================================================================
// Static initialization block
//
// This block contains vacuous code that refers to class InputTable, so that
// class InputTable and the classes it refers to will be compiled whenever class
// Primitive is compiled.
//==============================================================================

   static
      {
      if (false)
         InputTable.class.toString ();
      }
   
//==============================================================================
}
@


1.8
log
@Added class PrimitiveMgr.
@
text
@d33 1
a33 4
      return
         "Primitive \"" + getName () + "\""
       + " of " + myPrimitiveCategory
       + " in " + getAppProblem ();
@


1.7
log
@Realization ==> AppProblem
@
text
@d89 1
a90 1
      myPrimitiveCategory = thePrimCat;
@


1.6
log
@Removed class Modeler.
@
text
@d14 1
a14 1
 * particular Realization. </br> </br>
d18 1
a18 1
 * newPrimitive of class Realization.
d36 1
a36 1
       + " in " + getRealization ();
d81 1
a81 1
         Realization       theRealization,
d85 1
a85 1
      super (theRealization);
d87 1
a87 1
      assert (thePrimCat.getScheme () == theRealization.getScheme ());
@


1.5
log
@theElement.getElementCategory ()
@
text
@d18 1
a18 1
 * newPrimitive of class Modeler.
d110 14
@


1.4
log
@Primitive and Element.
@
text
@d40 12
a51 1
 * Getter.
d62 1
a62 1
 * Getter.
@


1.3
log
@Moved a factory method.
@
text
@d24 38
d74 6
a79 1
      super (theRealization, thePrimCat);
d83 16
@


1.2
log
@theModeler.newPrimitive (...)
@
text
@d14 5
a18 1
 * particular Realization. 
d24 1
a24 5
// Public Methods
//==============================================================================

//==============================================================================
// Package Internal Constructors
a37 4

//==============================================================================
// Private Fields
//==============================================================================
@


1.1
log
@ElementCategory ==> PrimitiveCategory
Element         ==> Primitive
ItemCategory    ==> ElementCategory
Item            ==> Element
@
text
@d13 2
a14 2
 * Each Primitive belongs to a particular PrimitiveCategory and a particular
 * Realization. 
d31 4
a34 1
   Primitive (PrimitiveCategory thePrimCat, Realization theRealization)
d36 1
a36 1
      super (thePrimCat, theRealization);
@

