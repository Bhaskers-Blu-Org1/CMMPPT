head	1.9;
access;
symbols;
locks; strict;
comment	@# @;


1.9
date	2011.05.12.17.58.04;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.11.23.45.31;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.11.20.50.39;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.10.23.44.10;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.10.18.48.14;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.10.00.05.40;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.07.00.01.08;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.06.22.44.43;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.06.19.24.33;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.9
log
@theElement.getElementCategory ()
@
text
@
//==============================================================================
// WIT-ML Source File ElementCategory.java.
//==============================================================================

package       com.ibm.witml;

import static com.ibm.witml.Utility.*;

/*******************************************************************************
 * An ElementCategory represents a conceptual grouping of similar Elements. Each
 * Element belongs to a particular ElementCategory and all Elements that belong
 * to a given ElementCategory are treated uniformly by WIT-ML. An
 * ElementCategory will belong to a Scheme and is considered to be a defining
 * aspect of the Scheme.
 *******************************************************************************
 */
public abstract class ElementCategory
{
//==============================================================================
// Public
//==============================================================================

/*******************************************************************************
 * Accessor.
 * 
 * @@return The name of this ElementCategory
 *******************************************************************************
 */
   public final String getName ()
      {
      return myName;
      }

/*******************************************************************************
 * Accessor.
 * 
 * @@return The Scheme for the WIT model to which this ElementCategory belongs
 *******************************************************************************
 */
   public final Scheme getScheme ()
      {
      return myScheme;
      }

//==============================================================================
// Package-Internal
//==============================================================================
   
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   ElementCategory (Scheme theScheme, String theName)
      {
      assert (theScheme != null);
      assert (theName   != null);
      
      myScheme = theScheme;
      myName   = theName;
      }

//==============================================================================
// Private
//==============================================================================
   
/*******************************************************************************
 * The Scheme of the WIT model to which this ElementCategory belongs
 *******************************************************************************
 */
   private final Scheme myScheme;
   
/*******************************************************************************
 * The name of this ElementCategory
 *******************************************************************************
 */
   private final String myName;
   
//==============================================================================
}
@


1.8
log
@Primitive and Element.
@
text
@d25 1
a25 1
 * Getter.
d36 1
a36 1
 * Getter.
@


1.7
log
@Argument order.
@
text
@d30 1
a30 1
   public String getName ()
d41 1
a41 1
   public Scheme getScheme ()
@


1.6
log
@Moved a factory method.
@
text
@d54 1
a54 1
   ElementCategory (String theName, Scheme theScheme)
d56 1
a57 1
      assert (theScheme != null);
d59 1
a60 1
      myScheme = theScheme;
d68 1
a68 1
 * The name of this ElementCategory
d71 1
a71 1
   private final String myName;
d74 1
a74 1
 * The Scheme for the WIT model to which this ElementCategory belongs
d77 1
a77 1
   private final Scheme myScheme;
@


1.5
log
@ElementCategory ==> PrimitiveCategory
Element         ==> Primitive
ItemCategory    ==> ElementCategory
Item            ==> Element
@
text
@d21 1
a21 1
// Public Methods
d47 1
a47 1
// Package-Internal Constructors
d64 1
a64 1
// Private Fields
@


1.4
log
@Added class Element.
@
text
@d11 5
a15 3
 * An ElementCategory is an ItemCategory for Elements.
 * The factory method for creating instances of this class is method
 * newElementCategory of class Scheme.
d18 1
a18 1
public final class ElementCategory extends ItemCategory
d25 1
a25 1
 * Override from class Object
d27 1
a27 2
 * @@return Format: <br>
 *         ElementCategory "{getName ()}"
d30 1
a30 1
   public String toString ()
d32 1
a32 1
      return "ElementCategory \"" + getName () + "\" of " + getScheme ();
d34 12
a45 1
   
d47 1
a47 1
// Package Internal Constructors
d56 5
a60 1
      super (theName, theScheme);
d67 12
@


1.3
log
@Revised a comment
@
text
@d11 2
a12 2
 * (This class is to be documented later.) <br>
 * The static factory method for creating instances of this class is method
@


1.2
log
@ElementCategory / ItemCategory
@
text
@d11 3
a13 1
 * (This class is to be documented later.)
@


1.1
log
@AtomCategory ==> ElementCategory
@
text
@d10 4
d20 12
d33 1
a33 1
// Private Constructors
@

