head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2011.05.10.18.48.16;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2011.05.09.22.43.05;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.06.22.44.43;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.06.17.55.08;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@ElementCategory ==> PrimitiveCategory
Element         ==> Primitive
ItemCategory    ==> ElementCategory
Item            ==> Element
@
text
@
//==============================================================================
// WIT-ML Source File ItemCategory.java.
//==============================================================================

package       com.ibm.witml;

import static com.ibm.witml.Utility.*;

/*******************************************************************************
 * An ItemCategory represents a conceptual grouping of similar Items. Each Item
 * belongs to a particular ItemCategory and all Items that belong to a given
 * ItemCategory are treated uniformly by WIT-ML. An ItemCategory will belong to
 * a Scheme and is considered to be a defining aspect of the Scheme.
 *******************************************************************************
 */
public abstract class ItemCategory
{
//==============================================================================
// Public Methods
//==============================================================================

/*******************************************************************************
 * Getter.
 * 
 * @@return The name of this ItemCategory
 *******************************************************************************
 */
   public String getName ()
      {
      return myName;
      }

/*******************************************************************************
 * Getter.
 * 
 * @@return The Scheme for the WIT model to which this ItemCategory belongs
 *******************************************************************************
 */
   public Scheme getScheme ()
      {
      return myScheme;
      }

//==============================================================================
// Package-Internal Constructors
//==============================================================================
   
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   ItemCategory (String theName, Scheme theScheme)
      {
      assert (theName   != null);
      assert (theScheme != null);
      
      myName   = theName;
      myScheme = theScheme;
      }

//==============================================================================
// Private Fields
//==============================================================================
   
/*******************************************************************************
 * The name of this ItemCategory
 *******************************************************************************
 */
   private final String myName;
   
/*******************************************************************************
 * The Scheme for the WIT model to which this ItemCategory belongs
 *******************************************************************************
 */
   private final Scheme myScheme;
   
//==============================================================================
}
@


1.3
log
@Class Item
@
text
@@


1.2
log
@ElementCategory / ItemCategory
@
text
@d11 4
a14 1
 * (This class is to be documented later.)
@


1.1
log
@Added class ItemCategory.
@
text
@d20 22
d54 3
d63 12
@

