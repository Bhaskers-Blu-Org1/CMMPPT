head	1.5;
access;
symbols
	dummy-release:1.1.1.1 dummy-vendor:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2011.05.13.15.44.50;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.10.23.44.11;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.06.23.47.34;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.06.17.55.07;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.05.19.59.24;	author rjw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.05.19.59.24;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Static Factory methods.
@
text
@
//==============================================================================
// WIT-ML Source File InputTable.java.
//==============================================================================

package       com.ibm.witml;

import static com.ibm.witml.Utility.*;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

/*******************************************************************************
 * An InputTable represents a table of Strings that was read in from a CSV file.
 * Immutable class
 *******************************************************************************
 */
public final class InputTable
{
//==============================================================================
// Public
//==============================================================================

/*******************************************************************************
 * Factory method: Constructs a new InputTable that stores the data given in a
 * CSV file.
 * 
 * @@param theFileName            The name of the CSV file.
 * @@return                       The new InputTable
 * @@throws FileNotFoundException If thrown when reading the file
 * @@throws IOException           If thrown when reading the file
 * @@throws IllegalStateException If the file is empty
 * @@throws IllegalStateException If two or more column headings are identical
 * @@throws IllegalStateException If a row is read whose length does not match
 *                               the number of column headings
 *******************************************************************************
 */
   public static InputTable newInputTable (String theFileName)
      throws
         FileNotFoundException,
         IOException
      {
      return new InputTable (theFileName);
      }

/*******************************************************************************
 * Returns an array listing all of the Strings given in a list of Strings that
 * are not column headings in this InputTable.
 * 
 * @@param theHeadings The list of Strings
 * @@return            (See summary)
 *******************************************************************************
 */
   public String[] findNonHeadings (String... theHeadings)
      {
      ArrayList <String> nonHeads;

      nonHeads = new ArrayList <String> (theHeadings.length);

      for (String theHeading: theHeadings)
         {
         if (! myColIndexMap.containsKey (theHeading))
            {
            nonHeads.add (theHeading);
            }
         }

      return nonHeads.toArray (new String[0]);
      }

/*******************************************************************************
 * Returns the List of InputRows for this InputTable.
 * 
 * @@return The List of InputRows, as an unmodifiable view of an ArrayList
 *******************************************************************************
 */
   public List <InputRow> getRows ()
      {
      return Collections.unmodifiableList (myRows);
      }

//==============================================================================
// Package-Internal
//==============================================================================

/*******************************************************************************
 * Returns the index of the column whose heading matches theHeading, if any,
 * otherwise 0.
 *******************************************************************************
 */
   int getColumnIndex (String theHeading)
      {
      Integer colIdx;

      colIdx = myColIndexMap.get (theHeading);

      return (colIdx != null)? colIdx: 0;
      }

//==============================================================================
// Private
//==============================================================================
   
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   private InputTable (String theFileName)
      throws
         FileNotFoundException,
         IOException
      {
      ArrayList  <String>             theHeadings;
      LinkedList <ArrayList <String>> theCellRows;

      theHeadings   = new ArrayList  <String>             (0);
      theCellRows   = new LinkedList <ArrayList <String>> ();

      CsvFileReader.read (theFileName, theHeadings, theCellRows);

      myColIndexMap = buildColIndexMap (theHeadings);
      myRows        = buildRows        (theCellRows);
      }

/*******************************************************************************
 * Builds and returns the Map to be used as myColIndexMap, based on theHeadings.
 *******************************************************************************
 */
   private HashMap <String, Integer> buildColIndexMap (
         List <String> theHeadings)
      {
      HashMap <String, Integer> theColIndexMap;
      String                    theHeading;
      int                       colIdx;

      theColIndexMap = new HashMap <String, Integer> (theHeadings.size () * 3);

      for (colIdx = 1; colIdx <= theHeadings.size (); colIdx ++)
         {
         theHeading = theHeadings.get (colIdx - 1);

         assert (! theColIndexMap.containsKey (theHeading));

         theColIndexMap.put (theHeading, colIdx);
         }

      return theColIndexMap;
      }

/*******************************************************************************
 * Creates the InputRows for this InputTable from theCellRows, stores them in an
 * ArrayList, and returns it.
 *******************************************************************************
 */
   private ArrayList <InputRow> buildRows (
         List <ArrayList <String>> theCellRows)
      {
      ArrayList <InputRow> theRows;
      int                  rowIdx;
      ArrayList <String>   theCells;
      InputRow             theRow;

      theRows = new ArrayList <InputRow> (theCellRows.size ());

      for (rowIdx = 1; rowIdx <= theCellRows.size (); rowIdx ++)
         {
         theCells = theCellRows.get (rowIdx - 1);

         assert (theCells.size () == myColIndexMap.size ());

         theRow   = new InputRow (this, rowIdx, theCells);

         theRows.add (theRow);
         }

      return theRows;
      }

/*******************************************************************************
 * myColIndexMap.get (theHeading) is the column index for theHeading.
 *******************************************************************************
 */
   private final HashMap <String, Integer> myColIndexMap;

/*******************************************************************************
 * myRows.get (rowIdx-1) is the InputRow that represents row #rowIdx in this
 * InputTable.
 *******************************************************************************
 */
   private final ArrayList <InputRow> myRows;

//==============================================================================
}
@


1.4
log
@Moved a factory method.
@
text
@d43 1
a43 1
   public static InputTable newInstance (String theFileName)
@


1.3
log
@Changed Exceptions thrown
@
text
@d26 1
a26 1
// Public Methods
d88 1
a88 1
// Package-Internal Methods
d106 1
a106 1
// Private Constructors
a129 4
//==============================================================================
// Private Methods
//==============================================================================
   
a183 4
//==============================================================================
// Private Fields
//==============================================================================

@


1.2
log
@Added class ItemCategory.
@
text
@d37 3
a39 3
 * @@throws RuntimeException      If the file is empty
 * @@throws RuntimeException      If two or more column headings are identical
 * @@throws RuntimeException      If a row is read whose length does not match
@


1.1
log
@Initial revision
@
text
@d106 1
a106 1
// Private Methods & Constructors
d130 4
@


1.1.1.1
log
@Creating a repository for WIT-ML.

@
text
@@
