head	1.14;
access;
symbols
	dummy-release:1.1.1.1 dummy-vendor:1.1.1;
locks; strict;
comment	@# @;


1.14
date	2011.05.13.17.52.41;	author rjw;	state dead;
branches;
next	1.13;

1.13
date	2011.05.12.17.58.05;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.05.11.23.45.31;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.05.10.23.44.11;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.05.10.22.40.58;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.05.10.18.48.16;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.10.00.05.41;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.09.22.43.05;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.06.23.47.35;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.06.22.44.44;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.06.19.24.34;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.06.18.25.40;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.06.17.55.08;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.05.19.59.24;	author rjw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.05.19.59.24;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Removed class Modeler.
@
text
@
//==============================================================================
// WIT-ML Source File Modeler.java.
//==============================================================================

package       com.ibm.witml;

import static com.ibm.witml.Utility.*;

/*******************************************************************************
 * Class Modeler is intended to be subclassed by any class in the application
 * program whose instances will be working with a particular Realization of a
 * particular WIT model. A Modeler is associated with a particular Realization
 * and the class has various methods whose behavior is defined in terms of that
 * Realization.
 *******************************************************************************
 */
public abstract class Modeler
{
//==============================================================================
// Public
//==============================================================================

/*******************************************************************************
 * Factory method: <br>
 * Constructs a new Primitive that will belong to the Realization for this
 * Modeler.
 *   
 * @@param  thePrimCat               The PrimitiveCategory to which the Primitive
 *                                  will belong
 * @@param  theName                  The name for the Primitive 
 * @@return                          The new Primitive
 * @@throws NullPointerException     If thePrimCat is null
 * @@throws NullPointerException     If theName    is null
 * @@throws IllegalArgumentException If the Scheme of thePrimCat does not match
 *                                  the Scheme of this Modeler
 *******************************************************************************
 */
   public final Primitive newPrimitive (PrimitiveCategory thePrimCat, String theName)
      {
      prohibitNull (thePrimCat, "thePrimCat");
      prohibitNull (theName,    "theName");
      
      requireSchemeMatch (thePrimCat);
      
      return new Primitive (myRealization, thePrimCat, theName);
      }
   
/*******************************************************************************
 * Indirect Accessor
 * 
 * @@return The Scheme of this Modeler, i.e., the Scheme of the Realization of
 *         this Modeler.
 *******************************************************************************
 */
   public final Scheme getScheme ()
      {
      return myRealization.getScheme ();
      }

/*******************************************************************************
 * Accessor
 * 
 * @@return The Realization of this Modeler.
 *******************************************************************************
 */
   public final Realization getRealization ()
      {
      return myRealization;
      }

//==============================================================================
// Protected
//==============================================================================

/*******************************************************************************
 * Constructor.
 * 
 * @@param  theRealization <br>
 *         The Realization to be associated with the constructed Modeler.
 * @@throws NullPointerException If theRealization == null
 *******************************************************************************
 */
   protected Modeler (Realization theRealization)
      {
      prohibitNull (theRealization, "theRealization");
      
      myRealization = theRealization;
      }

//==============================================================================
// Private
//==============================================================================

/*******************************************************************************
 * Verifies that the Scheme of thePrimCat matches the Scheme of this Modeler.
 * <br>
 * To be called by newPrimitive (...).
 *******************************************************************************
 */
   private final void requireSchemeMatch (PrimitiveCategory thePrimCat)
      {
      if (thePrimCat.getScheme () != myRealization.getScheme ())
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   theModeler.newPrimitive (thePrimCat, theName) was invoked\n"
             + "   where the Scheme of thePrimCat does not match\n"
             + "   the Scheme of theModeler.\n"
             + "\n"
             + "      thePrimCat.getScheme (): "
             +        thePrimCat.getScheme () + "\n"
             + "      theModeler.getScheme (): " + getScheme () + "\n");
      }
   
/*******************************************************************************
 * The Realization associated with this Modeler.
 *******************************************************************************
 */
   private final Realization myRealization;
   
//==============================================================================
// Static initialization block
//
// This block contains vacuous code that refers to class InputTable, so that
// class InputTable and the classes it refers to will be compiled whenever class
// Modeler is compiled.
//==============================================================================

   static
      {
      if (false)
         InputTable.class.toString ();
      }
   
//==============================================================================
}
@


1.13
log
@theElement.getElementCategory ()
@
text
@@


1.12
log
@Primitive and Element.
@
text
@d50 1
a50 1
 * Indirect Getter
d62 1
a62 1
 * Getter
@


1.11
log
@Moved a factory method.
@
text
@d39 1
a39 1
   public Primitive newPrimitive (PrimitiveCategory thePrimCat, String theName)
d56 1
a56 1
   public Scheme getScheme ()
d67 1
a67 1
   public Realization getRealization ()
d101 1
a101 1
   private void requireSchemeMatch (PrimitiveCategory thePrimCat)
@


1.10
log
@theModeler.newPrimitive (...)
@
text
@d21 1
a21 1
// Public Methods
d73 1
a73 1
// Protected Constructors
d92 1
a92 1
// Private Methods
a115 4
//==============================================================================
// Private Fields
//==============================================================================

@


1.9
log
@ElementCategory ==> PrimitiveCategory
Element         ==> Primitive
ItemCategory    ==> ElementCategory
Item            ==> Element
@
text
@d25 37
d64 1
a64 1
 * @@return The Realization associated with this Modeler.
d86 1
a86 1
      mustBeNonNull (theRealization, "theRealization");
d92 25
a140 14
// Static initialization block
//
// This block contains vacuous code that refers to class Primitive, so that
// class Primitive and the classes it refers to will be compiled whenever class
// Modeler is compiled.
//==============================================================================

   static
      {
      if (false)
         Primitive.class.toString ();
      }
   
//==============================================================================
@


1.8
log
@Added class Element.
@
text
@d81 2
a82 2
// This block contains vacuous code that refers to class Element, so that
// class Element and the classes it refers to will be compiled whenever class
d89 1
a89 1
         Element.class.toString ();
@


1.7
log
@Class Item
@
text
@d81 2
a82 2
// This block contains vacuous code that refers to class Item, so that
// class Item and the classes it refers to will be compiled whenever class
d89 1
a89 1
         Item.class.toString ();
@


1.6
log
@Changed Exceptions thrown
@
text
@d79 14
@


1.5
log
@ElementCategory / ItemCategory
@
text
@d44 1
a44 2
 * @@throws RuntimeException <br>
 *         If theRealization is null
d49 1
a49 1
      mustBeNonNull (theRealization, "theRealization",  "Modeler constructor");
@


1.4
log
@AtomCategory ==> ElementCategory
@
text
@a79 14
// Static initialization block
//
// This block contains vacuous code that refers to class ElementCategory, so
// that class ElementCategory and the classes it refers to will be compiled
// whenever class Modeler is compiled.
//==============================================================================

   static
      {
      if (false)
         ElementCategory.class.toString ();
      }
   
//==============================================================================
@


1.3
log
@Added class AtomCategory.
@
text
@d82 2
a83 2
// This block contains vacuous code that refers to class AtomCategory, so
// that class AtomCategory and the classes it refers to will be compiled
d90 1
a90 1
         AtomCategory.class.toString ();
@


1.2
log
@Added class ItemCategory.
@
text
@d82 2
a83 2
// This block contains vacuous code that refers to class ItemCategory, so
// that class ItemCategory and the classes it refers to will be compiled
d90 1
a90 1
         ItemCategory.class.toString ();
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
// Protected Methods & Constructors
a55 4
// Private Methods
//==============================================================================

//==============================================================================
d80 14
@


1.1.1.1
log
@Creating a repository for WIT-ML.

@
text
@@
