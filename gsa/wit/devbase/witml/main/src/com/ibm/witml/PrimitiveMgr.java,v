head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2011.05.16.20.42.24;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.13.23.58.03;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Primitive List.
@
text
@
//==============================================================================
// WIT-ML Source File PrimitiveMgr.java.
//==============================================================================

package       com.ibm.witml;

import static com.ibm.witml.Utility.*;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

/*******************************************************************************
 * "Primitive Manager" </br>
 * A PrimitiveMgr is associated with a particular AppProblem and a particular
 * PrimitiveCategory is responsible for maintaining the Primitives of the
 * PrimitiveCategory that belong to the AppProblem.
 *******************************************************************************
 */
final class PrimitiveMgr
{
//==============================================================================
// Package Internal
//==============================================================================
   
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   PrimitiveMgr (AppProblem theAppProblem, PrimitiveCategory thePrimCat)
      {
      myAppProblem        = theAppProblem;
      myPrimitiveCategory = thePrimCat;

      myPrimitiveList     = new ArrayList <Primitive> ();
      
      myPrimitiveView     = Collections.unmodifiableList (myPrimitiveList);
      
      myPrimitiveMap      = new HashMap <String, Primitive> ();
      }
   
/*******************************************************************************
 * Factory method: <br>
 * Constructs a new Primitive that will be maintained by this PrimitiveMgr.
 *   
 * @@param  theName The name for the Primitive 
 * @@return         The new Primitive
 *******************************************************************************
 */
   Primitive newPrimitive (String theName)
      {
      Primitive thePrim;
      Primitive oldPrim;
      
      thePrim = new Primitive (myAppProblem, myPrimitiveCategory, theName);
      
      myPrimitiveList.add (thePrim);
      
      oldPrim = myPrimitiveMap.put (theName, thePrim);
      
      assert (oldPrim == null);
      
      return thePrim;
      }
   
/*******************************************************************************
 * @@return An unmodifiable List of all Primitives maintained by this
 *         PrimitiveMgr, listed in the order in which they were created.
 *******************************************************************************
 */
   List <Primitive> getPrimitives ()
      {
      return myPrimitiveView;
      }
   
/*******************************************************************************
 * @@return The Primitive maintained by this PrimitiveMgr whose name matches
 * theName, if any; otherwise null.
 *******************************************************************************
 */
   Primitive getPrimitive (String theName)
      {
      return myPrimitiveMap.get (theName);
      }
   
//==============================================================================
// Private
//==============================================================================
   
/*******************************************************************************
 * The AppProblem to which this PrimitiveMgr belongs.
 *******************************************************************************
 */
   private final AppProblem myAppProblem;
   
/*******************************************************************************
 * The PrimitiveCategory of the Primitives maintained by this PrimitiveMgr.
 *******************************************************************************
 */
   private final PrimitiveCategory myPrimitiveCategory;
   
/*******************************************************************************
 * The List of all Primitives maintained by this PrimitiveMgr, listed in the
 * order in which they were created.
 *******************************************************************************
 */
   private final ArrayList <Primitive> myPrimitiveList;
   
/*******************************************************************************
 * An unmodifiable view of myPrimitiveList.
 *******************************************************************************
 */
   private List <Primitive> myPrimitiveView;
   
/*******************************************************************************
 * myPrimitiveMap.get (theName) is the Primitive maintained by this PrimitiveMgr
 * whose name matches theName.
 *******************************************************************************
 */
   private final HashMap <String, Primitive> myPrimitiveMap;
   
//==============================================================================
}
@


1.1
log
@Added class PrimitiveMgr.
@
text
@d10 2
d13 1
d36 4
d59 2
d69 10
d105 13
@

