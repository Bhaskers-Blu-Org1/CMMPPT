head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2011.05.16.20.42.23;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.13.23.58.03;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.11.23.45.32;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.11.20.50.39;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.10.23.44.12;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.10.18.48.17;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Primitive List.
@
text
@
//==============================================================================
// WIT-ML Source File PrimitiveCategory.java.
//==============================================================================

package       com.ibm.witml;

import static com.ibm.witml.Utility.*;

/*******************************************************************************
 * A PrimitiveCategory is an ElementCategory for Primitives.</br></br>
 * 
 * Please Note: </br>
 * The factory method for creating instances of this class is method
 * newPrimitiveCategory of class Scheme.
 *******************************************************************************
 */
public final class PrimitiveCategory extends ElementCategory
{
//==============================================================================
// Public
//==============================================================================

/*******************************************************************************
 * Override from class Object
 *******************************************************************************
 */
   public String toString ()
      {
      return "PrimitiveCategory \"" + getName () + "\"";
      }
   
//==============================================================================
// Package Internal
//==============================================================================
   
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   PrimitiveCategory (Scheme theScheme, String theName)
      {
      super (theScheme, theName);
      
      myIndex = theScheme.getPrimitiveCategories ().size ();
      }

/*******************************************************************************
 * @@return A unique index for this PrimitiveCategory.
 *******************************************************************************
 */
   int getIndex ()
      {
      return myIndex;
      }

//==============================================================================
// Private
//==============================================================================

/*******************************************************************************
 * A unique index for this PrimitiveCategory. </br>
 * # of PrimitiveCategories in the Scheme that were constructed before this one.
 *******************************************************************************
 */
   private final int myIndex;

//==============================================================================
}
@


1.5
log
@Added class PrimitiveMgr.
@
text
@d30 1
a30 1
      return "PrimitiveCategory \"" + getName () + "\" of " + getScheme ();
@


1.4
log
@Primitive and Element.
@
text
@d44 2
d48 20
@


1.3
log
@Argument order.
@
text
@a25 3
 * 
 * @@return Format: <br>
 *         PrimitiveCategory "{getName ()}"
@


1.2
log
@Moved a factory method.
@
text
@d44 1
a44 1
   PrimitiveCategory (String theName, Scheme theScheme)
d46 1
a46 1
      super (theName, theScheme);
@


1.1
log
@ElementCategory ==> PrimitiveCategory
Element         ==> Primitive
ItemCategory    ==> ElementCategory
Item            ==> Element
@
text
@d11 3
a13 1
 * A PrimitiveCategory is an ElementCategory for Primitives.
d21 1
a21 1
// Public Methods
d37 1
a37 1
// Package Internal Constructors
a49 4
// Private Fields
//==============================================================================
   
//==============================================================================
@

