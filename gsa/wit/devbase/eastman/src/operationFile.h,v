head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2004.11.08.23.23.20;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.28.14.53.29;	author grzes;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fixed up to recognize and test for records with duplicate keys.
@
text
@#ifndef ECCoperationFile_h
#define ECCoperationFile_h

#include "scoFile.h"


class ECCoperationFile : public SCOcsvFormatFile {
public:

  // Fields
  getFieldH(operation);
  
  // preferred constructor
  ECCoperationFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    //insertField("mtm");
    //insertField("plantLoc");
    //insertField("period");
    //insertField("supply");
    //insertField("wfmv");
    hasHeaderRecord(1);
    commentRecords(true);
    
    // don't normally call initialize here, but doing this for eastman
    // to make sure duplicate records are found.
    initialize();  
  };
  

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & operation) 
  {
    //char periodchar[100];
    //sprintf( periodchar, "%d", period );
    std::string retVal = operation;
    return retVal;
  };
  
  // destructor
  ~ECCoperationFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    ECCoperationFile file("../data/example1/operation.csv");
    
    // Test reading first record

    assert( file.operation(0) == "MakeEctonaTow" );

    assert( file.operation(2) == "MakeKingsportTow" );

    // Test reading record by key    
    assert( file.operation(file.key("MakePrimesterFlakes")) == "MakePrimesterFlakes" );

    int nr = file.numRecords();
    assert( nr == 8 );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      operation(recNum) );
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  ECCoperationFile();
  
  // copy constructor  -- don't use!
  ECCoperationFile( const ECCoperationFile& source );
  
  // assignment operator -- don't use!
  ECCoperationFile&
  operator=(const ECCoperationFile& rhs);

  
};



class ECCoperationFileIterator : public SCOfileIterator {
public:
  
  // fields 
  
  getFieldFileWithIteratorH(operation);
  
  // preferred constructor
  ECCoperationFileIterator(const ECCoperationFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~ECCoperationFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    ECCoperationFile file("../data/example1/operation.csv");
    ECCoperationFileIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        assert( fileIter.operation() == "MakeEctonaTow" );
      }   
      else if ( recNo == 1 ) {
        assert( fileIter.operation() == "MakeB81Flakes" ); 
      }
      recNo++;
    }
    
  }

private:
  
  
  // default constructor -- don't use!
  ECCoperationFileIterator();
  
  // copy constructor  -- don't use!
  ECCoperationFileIterator( const ECCoperationFileIterator& source );
  
  // assignment operator -- don't use!
  ECCoperationFileIterator&
  operator=(const ECCoperationFileIterator& rhs);

  
};
#endif
@


1.1
log
@Added operationFile.h.
@
text
@d26 4
@

