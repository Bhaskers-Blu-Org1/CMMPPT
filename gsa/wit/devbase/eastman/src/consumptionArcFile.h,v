head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2004.11.08.23.23.20;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.28.16.48.43;	author grzes;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.28.15.44.52;	author grzes;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Fixed up to recognize and test for records with duplicate keys.
@
text
@#ifndef ECCconsumptionArcFile_h
#define ECCconsumptionArcFile_h

#include "scoFile.h"


class ECCconsumptionArcFile : public SCOcsvFormatFile {
public:

  // Fields
  getFieldH(operation);
  getFieldH(consumedResource);
  getIntFieldH(period);
  getFloatFieldH(consumptionRate);
  
  // preferred constructor
  ECCconsumptionArcFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    //insertField("mtm");
    //insertField("plantLoc");
    //insertField("period");
    //insertField("consumptionRate");
    //insertField("wfmv");
    hasHeaderRecord(4);
    commentRecords(true);
    
    // don't normally call initialize here, but doing this for eastman
    // to make sure duplicate records are found.
    initialize();  
  };
  

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & operation,
	const std::string & consumedResource,
    int period) 
  {
    char periodchar[100];
    sprintf( periodchar, "%d", period );
    std::string retVal = operation+uniqueString()+consumedResource+uniqueString()+periodchar;
    return retVal;
  };
  
  // destructor
  ~ECCconsumptionArcFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    ECCconsumptionArcFile file("../data/example1/consumptionArc.csv");

    // Test reading first record
    assert( file.operation(0) == "MakeEctonaTow" );
	assert( file.consumedResource(0) == "B81Flake" );
    assert( file.periodAsInt(0) == 1 );
    assert( file.consumptionRateAsFloat(0) == 0.9353f );

    assert( file.operation(6) == "MakeEctonaTow" );
	assert( file.consumedResource(6) == "EctonaTowCapacity" );
    assert( file.periodAsInt(6) == 2 );
    assert( file.consumptionRateAsFloat(6) == 1.f );

    // Test reading record by key    
    assert( file.consumptionRateAsFloat(file.key("MakeEctonaTow","B81Flake",3)) == 0.9353f );

    int nr = file.numRecords();
    assert( nr == 5*17 );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      operation(recNum),
	  consumedResource(recNum),
      periodAsInt(recNum) );
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  ECCconsumptionArcFile();
  
  // copy constructor  -- don't use!
  ECCconsumptionArcFile( const ECCconsumptionArcFile& source );
  
  // assignment operator -- don't use!
  ECCconsumptionArcFile&
  operator=(const ECCconsumptionArcFile& rhs);

  
};



class ECCconsumptionArcFileIterator : public SCOfileIterator {
public:
  
  // fields 
  
  getFieldFileWithIteratorH(operation);
  getFieldFileWithIteratorH(consumedResource);
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(consumptionRate);
  
  // preferred constructor
  ECCconsumptionArcFileIterator(const ECCconsumptionArcFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~ECCconsumptionArcFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    ECCconsumptionArcFile file("../data/example1/consumptionArc.csv");
    ECCconsumptionArcFileIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        
        assert( fileIter.operation() == "MakeEctonaTow" );
		assert( fileIter.consumedResource() == "B81Flake" );
        assert( fileIter.periodAsInt() == 1 );
        assert( fileIter.consumptionRateAsFloat() == 0.9353f );
      }   
      else if ( recNo == 6 ) {
		assert( fileIter.operation() == "MakeEctonaTow" );
		assert( fileIter.consumedResource() == "EctonaTowCapacity" );
		assert( fileIter.periodAsInt() == 2 );
		assert( fileIter.consumptionRateAsFloat() == 1.f );
          
      }
      recNo++;
    }
    
  }

private:
  
  
  // default constructor -- don't use!
  ECCconsumptionArcFileIterator();
  
  // copy constructor  -- don't use!
  ECCconsumptionArcFileIterator( const ECCconsumptionArcFileIterator& source );
  
  // assignment operator -- don't use!
  ECCconsumptionArcFileIterator&
  operator=(const ECCconsumptionArcFileIterator& rhs);

  
};
#endif
@


1.2
log
@Added substituteMaterialFile.h.
Fixed a couple of nasty bugs in previously added files.
@
text
@d29 4
@


1.1
log
@Added consumptionArcFile.h
@
text
@d106 1
d130 1
a130 1
		assert( file.consumedResource(2) == "B81Flake" );
d134 5
a138 5
      else if ( recNo == 1 ) {
		assert( file.operation(6) == "MakeEctonaTow" );
		assert( file.consumedResource(6) == "EctonaTowCapacity" );
		assert( file.periodAsInt(6) == 2 );
		assert( file.consumptionRateAsFloat(6) == 1.f );
@

