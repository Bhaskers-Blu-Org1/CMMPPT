head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2004.11.08.23.23.20;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.28.15.50.50;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.28.12.57.45;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Fixed up to recognize and test for records with duplicate keys.
@
text
@#ifndef ECCparameter_h
#define ECCparameter_h

#include <cassert>
#include "scoFile.h"


class ECCparameterFile : public SCOcsvFormatFile {
public:
  
  // fields  
  getFieldH(parameterName);  
  getFieldH(parameterValue);
  
  // preferred constructor
  ECCparameterFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(2);
    commentRecords(true);
    
    // don't normally call initialize here, but doing this for eastman
    // to make sure duplicate records are found.
    initialize();  
  };
  
  // destructor
  ~ECCparameterFile()  
  {
    // Nothing to do here
  }
  
  // Self-test
  static void test()
  {
    
    ECCparameterFile file("../data/example1/parameter.csv");
    
    assert( file.parameterValue("numPeriods") == "5" );
    assert( file.fieldAsInt("numPeriods","parameterValue") == 5 );

    // Test that that wrong file name causes an exception
    {
      bool except = false;
      try {
         ECCparameterFile file("../data/example1/parameterXXX.csv");
         assert( file.parameterValue("numPeriods") == "5" );
      }
      catch ( SCOexception e ) {
        except = true;
      }
      assert( except );
    }

    // Test that that wrong field name casuse an exception
    {
      bool except = false;
      try {
         ECCparameterFile file("../data/example1/parameter.csv");
         assert( file.parameterValue("numPeriodsXXX") == "5" );
      }
      catch ( SCOexception e ) {
        except = true;
      }
      assert( except );
    }
#if 0
    // Test that that wrong field name casuse an exception
    {
      bool except = false;
      try {
         ECCparameterFile file("../data/example_missingHeaderField/globalAttr.csv");
         assert( file.attrValue("problem") == "resourceAction" );
      }
      catch ( SCOexception e ) {
        except = true;
      }
      assert( except );
    }
#endif


  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual
    std::string
    key( unsigned recNum ) const
  {
    std::string retVal = fieldAsString(recNum,"parameterName");
    return retVal;
  }
  
private:
  
  
  // default constructor -- don't use!
  ECCparameterFile();
  
  // copy constructor  -- don't use!
  ECCparameterFile( const ECCparameterFile& source );
  
  // assignment operator -- don't use!
  ECCparameterFile&
  operator=(const ECCparameterFile& rhs);

  
};


#if 0
class ECCparameterFileIterator : public SCOfileIterator {
public:
  
  // fields
  //std::string locName() const;

  // preferred constructor
  ECCparameterFileIterator(const ECCparameterFile &);
  
  // destructor
  ~ECCparameterFileIterator();
  
  // Self-test
  static void test();

private:
  
  
  // default constructor -- don't use!
  ECCparameterFileIterator();
  
  // copy constructor  -- don't use!
  ECCparameterFileIterator( const ECCparameterFileIterator& source );
  
  // assignment operator -- don't use!
  ECCparameterFileIterator&
  operator=(const ECCparameterFileIterator& rhs);

  
};
#endif
#endif
@


1.2
log
@added cassert include
@
text
@d23 4
@


1.1
log
@Added class for reading parameter file.
Fixed typo in file format document.
Added code for throwing exceptions when problems reading files
@
text
@d4 1
@

