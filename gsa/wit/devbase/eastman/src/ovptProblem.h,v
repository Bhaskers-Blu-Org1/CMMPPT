head	1.27;
access;
symbols;
locks; strict;
comment	@ * @;


1.27
date	2004.11.19.23.35.47;	author fasano;	state Exp;
branches;
next	1.26;

1.26
date	2004.11.19.18.27.54;	author grzes;	state Exp;
branches;
next	1.25;

1.25
date	2004.11.19.14.24.17;	author fasano;	state Exp;
branches;
next	1.24;

1.24
date	2004.11.18.22.38.05;	author grzes;	state Exp;
branches;
next	1.23;

1.23
date	2004.11.15.22.07.56;	author grzes;	state Exp;
branches;
next	1.22;

1.22
date	2004.11.15.16.50.23;	author fasano;	state Exp;
branches;
next	1.21;

1.21
date	2004.11.12.18.33.24;	author grzes;	state Exp;
branches;
next	1.20;

1.20
date	2004.11.10.16.53.23;	author fasano;	state Exp;
branches;
next	1.19;

1.19
date	2004.11.10.14.50.14;	author fasano;	state Exp;
branches;
next	1.18;

1.18
date	2004.11.10.04.11.31;	author fasano;	state Exp;
branches;
next	1.17;

1.17
date	2004.11.09.05.12.13;	author fasano;	state Exp;
branches;
next	1.16;

1.16
date	2004.11.03.12.49.12;	author fasano;	state Exp;
branches;
next	1.15;

1.15
date	2004.11.02.22.39.20;	author grzes;	state Exp;
branches;
next	1.14;

1.14
date	2004.11.02.03.29.43;	author fasano;	state Exp;
branches;
next	1.13;

1.13
date	2004.11.01.23.34.13;	author grzes;	state Exp;
branches;
next	1.12;

1.12
date	2004.10.31.19.38.07;	author fasano;	state Exp;
branches;
next	1.11;

1.11
date	2004.10.31.13.59.17;	author fasano;	state Exp;
branches;
next	1.10;

1.10
date	2004.10.31.13.34.58;	author fasano;	state Exp;
branches;
next	1.9;

1.9
date	2004.10.30.20.22.38;	author fasano;	state Exp;
branches;
next	1.8;

1.8
date	2004.10.30.16.36.03;	author fasano;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.30.15.40.20;	author fasano;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.30.04.25.05;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.29.23.19.12;	author grzes;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.29.18.44.17;	author grzes;	state Exp;
branches;
next	1.3;

1.3
date	2004.10.29.12.37.41;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.29.02.59.35;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.28.19.24.05;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.27
log
@added method getEccObjValueByPeriod
@
text
@#ifndef ECCovptProblem_h
#define ECCovptProblem_h

#include <vector>
#include "problemBase.h"

typedef std::vector<float> ECCvecFloat;
typedef std::pair<std::string,std::string> ECCstringPair;

class ECCovptProblem : public SCOproblemBase {
public:
  
  //----------------------
  // Methods for materials.
  //----------------------
  void addMaterial(const std::string & materialName);
  bool materialExists(const std::string & materialName)const;

  void setMaterialSupply(const std::string &materialName, int period, float supply );
  std::vector<float> getMaterialSupply(const std::string & materialName )const;

  void getMaterialNames( std::vector<std::string> & materialNames )const;
  std::vector<float> getMaterialConsumptionVolume(const std::string & materialName )const;
  std::vector<float> getMaterialProductionVolume(const std::string & materialName )const;
  std::vector<float> getMaterialScrapVolume(const std::string & materialName )const;

 

  //----------------------
  // Methods for capacities.
  //----------------------
  void addCapacity(const std::string & capacityName);
  bool capacityExists(const std::string & capacityName)const;

  void setCapacitySupply(const std::string & capacityName, int period, float supply );
  std::vector<float> getCapacitySupply(const std::string & capacityName )const;

  void getCapacityNames( std::vector<std::string> & capacityNames )const;
  std::vector<float> getCapacityConsumptionVolume(const std::string & capacityNames )const;
  std::vector<float> getCapacityExcessVolume(const std::string & capacityNames )const;

  //----------------------
  // Methods for operations.
  //----------------------
  void addOperation(const std::string & operationName);
  bool operationExists(const std::string & operationName)const;

  void setOperationContribution(const std::string &operationName, int period, float contrib );
  std::vector<float> getOperationContribution(const std::string & operationName )const;

  void setOperationMinimumProduction(const std::string &operationName, int period, float mp );
  std::vector<float> getOperationMinimumProduction(const std::string & operationName )const;

  void getOperationNames( std::vector<std::string> & operationNames )const;
  std::vector<float> getOperationExecutionVolume(const std::string & operationName )const;
  
  //----------------------
  // Methods for consumption arcs.
  //----------------------
  void addConsumptionArc(const std::string & operationName, const std::string & consumedResourceName );
  bool consumptionArcExists    (const std::string & operationName, const std::string & consumedResourceName)const;
  
  void setConsumptionArcConsumptionRate(const std::string & operationName, const std::string & consumedResourceName, int period, float consumptionRate );
  std::vector<float> getConsumptionArcConsumptionRate(const std::string & operationName, const std::string & consumedResourceName);

  void getConsumptionArcNames( std::vector<std::string> & operationNames, std::vector<std::string> & consumedResourceNames )const;

  //----------------------
  // Methods for production arcs.
  //----------------------
  void addProductionArc(const std::string & operationName, const std::string & producedResourceName );
  bool productionArcExists    (const std::string & operationName, const std::string & producedResourceName)const;
  
  void setProductionArcProductionRate(const std::string & operationName, const std::string & producedResourceName, int period, float consumptionRate );
  std::vector<float> getProductionArcProductionRate(const std::string & operationName, const std::string & producedResourceName);

  void getProductionArcNames( std::vector<std::string> & operationNames, std::vector<std::string> & producedResourceName )const;
  
  //----------------------
  // Methods for demands.
  //----------------------
  void addDemand(const std::string & demandedMaterial, const std::string & demandName);
  bool demandExists(const std::string & demandedMaterial, const std::string & demandName)const;

  void setDemandDemandVol(const std::string & demandedMaterial, const std::string & demandName, int period, float supply );
  std::vector<float> getDemandDemandVol(const std::string & demandedMaterial, const std::string & demandName)const;

  void setDemandContribution(const std::string & demandedMaterial, const std::string & demandName, int period, float supply );
  std::vector<float> getDemandContribution(const std::string & demandedMaterial, const std::string & demandName)const;

  void setDemandMinShipVol(const std::string & demandedMaterial, const std::string & demandName, int period, float minShipVol );
  std::vector<float> getDemandMinShipVol(const std::string & demandedMaterial, const std::string & demandName)const;

  void getDemandNames( std::vector<std::string> & materialNames, std::vector<std::string> & demandNames )const;
  std::vector<float> getDemandShipVol(const std::string & demandedMaterial, const std::string & demandName)const;

  //----------------------
  // Methods for substitute resources.
  // The application will only be substituting materials, but this method can be general to allow WIT part substitution.
  //----------------------
  void addSubstitutionArc(const std::string & operationName, const std::string & consumedResourceName, const std::string & substituteConsumedResourceName );
  bool substitutionArcExists(const std::string & operationName, const std::string & consumedResourceName, const std::string & substituteConsumedResourceName)const;

  void getSubstitutionArcNames( std::vector<std::string> & operationNames, std::vector<std::string> & consumedResourceNames, std::vector<std::string> & substituteConsumedResourceNames )const;

  //-----------------------------

  // methods for orphan objects
  void getMaterialOrphanNames( std::vector<std::string> & materialOrphanNames )const;
  void getCapacityOrphanNames( std::vector<std::string> & capacityOrphanNames )const;
  void getOperationOrphanNames( std::vector<std::string> & operationOrphanNames )const;
 
  //-----------------------------
  // Solve. Formulate and solve LP
  //-----------------------------
  void solve();

  //-----------------------------
  // Get objective function value from Eastman's perspective.
  // This includes the contributions from meeting demands and performing operations.
  // It does not include scrapCost which is added to ensure that materials are not
  // unnecessarily produced.
  //-----------------------------
  double getEccObjValue() const;
  std::vector<double> getEccObjValueByPeriod() const;

  std::string modelReport() const;

//------------------------

  // default constructor
  ECCovptProblem();

  // alternate constructor
  ECCovptProblem(const std::string & outputDirectory);
  
  // copy constructor
  ECCovptProblem( const ECCovptProblem& source );
  
  // assignment operator
  ECCovptProblem&
  operator=(const ECCovptProblem& rhs);
  
  // destructor
  ~ECCovptProblem();
  

  // Self-test
  static void test();


private:

  // methods that examine the solution
  bool unnecessaryProduction() const;

  // Methods used by material and capacity
  std::vector<float> getResourceConsumptionVolume(const std::string & resourceName )const;
  std::vector<float> getResourceProductionVolume(const std::string & resourceName )const;
  std::vector<float> getResourceScrapVolume(const std::string & resourceName )const;
  std::vector<float> getResourceExcessVolume(const std::string & resourceName )const;


  // Substitution Arc Methods.
  // Currently these methods are used by presolve.
  // Presolve sets the subBom ConsumptionRate to be equal to the boms Consumption rate.
  // If these methods are made public, then presolve may need to be changed, because
  // the responsability to set these values will fall on the user of class.
  void setSubstitutionArcConsumptionRate(
                     const std::string & operationName, 
										 const std::string & consumedResourceName, 
										 const std::string & substituteConsumedResourceName,
										 int period, float consumptionRate );
  std::vector<float> getSubstitutionArcConsumptionRate(
                             const std::string & operationName,
													   const std::string & consumedResourceName,
													   const std::string & substituteConsumedResourceName);

  // Demand name methods
  static std::string materialDemandName(const std::string & material, const std::string demand );
  static std::string materialFromMaterialDemandName(const std::string & materialDemandName );
  static std::string demandFromMaterialDemandName(const std::string & materialDemandName );
  static std::string demandRegulatorName(const std::string & material, const std::string demand );

  // Consumption Arc Name Methods
  static std::string consumptionArcName(const std::string & operation, const std::string consumedResource );
  static std::string operationFromConsumptionArcName(const std::string & consumptionArcName );
  static std::string consumedResourceFromConsumptionArcName(const std::string & consumptionArcName );

  // Substitution Arc Name Methods
  static std::string substitutionArcName(const std::string & operation, const std::string consumedResource, 
										 const std::string substituteConsumedResource );
  static std::string operationFromSubstitutionArcName(const std::string & substitutionArcName );
  static std::string consumedResourceFromSubstitutionArcName(const std::string & substitutionArcName );
  static std::string ECCovptProblem::substituteConsumedResourceFromSubstitutionArcName(const std::string & substitutionArcName );

  // Production Arc Name Methods
  static std::string productionArcName(const std::string & operation, const std::string producedResource );
  static std::string operationFromProductionArcName(const std::string & productionArcName );
  static std::string producedResourceFromProductionArcName(const std::string & productionArcName );

  //-----------------------------
  // Presolve. Complete the WIT model
  //-----------------------------
  void presolve();
  
  //Methods for setting scrap costs in order to prevent unnecessary production

  //-------------------------------------------------------------------------------------------------
  //Set scrap costs using arbitrary fixed scaling factor, not taking into account the number of parts
  //that appear or might appear in the model. This method is used by solve().
  //-------------------------------------------------------------------------------------------------
  void getRidOfUnnecessaryProductionUsingFixedScalingOnScrapCost();

  //-------------------------------------------------------------------------------------------------
  // Achieve what scrap costs do using Bob's trick with ExecVol Lo Bounds
  //-------------------------------------------------------------------------------------------------
  void getRidOfUnnecessaryProductionBobsWay();

  //-----------------------------
  // Methods used for testing
  //-----------------------------
  bool ECCovptProblem::isSolutionOK() const;
  double getObjValueWithNoScrapCosts() const;

  //---------------------------

  // private methods used by assignment operator, copy consturctor, and destructor
  void gutsOfCopy( const ECCovptProblem& source );
  void gutsOfDestructor();

  std::string outputDirectory_;
  double objValueWithNoScrapCosts_;
  std::set<std::string> materialNames_;
  std::set<std::string> capacityNames_;
  std::set<std::string> operationNames_;
  std::set<std::string> materialDemandNames_;
  std::set<std::string> consumptionArcNames_;
  std::set<std::string> substitutionArcNames_;
  std::set<std::string> productionArcNames_;
};


#endif
@


1.26
log
@Fixed Bob's method for getting rid of unnecessary production.
Modified slightly isSolutionOK() method.
Now it works fine for all test cases.
@
text
@d125 1
@


1.25
log
@changes to restore wit attributes after applying bobs method
@
text
@d215 1
a215 1
  // Achieve what scrap costs do using Bobn's trick with ExecVol Lo Bounds
@


1.24
log
@1. Separated the part setting scrap costs as a method
setScrapCostsUsingFixedScalingFactor()

2. Added a method
getRidOfUnnecessaryProductionBobsWay()
The last method is untested and is not called anywhere.
I'll check if it runs and add test cases tomorrow first thing in the morning.
The code builds and runs.
@
text
@d4 1
a4 1

d7 2
d212 1
a212 1
  void setScrapCostsUsingFixedScalingFactor();
@


1.23
log
@Added tests for orphan materials and orphan capacities
with test cases.
@
text
@a115 1

d204 13
@


1.22
log
@Added code to write a report describing the input model
@
text
@d106 4
a199 6
  // methods for checking if WIT model makes sense (no disconnected operations or resources)
  void getMaterialOrphanNames( std::vector<std::string> & materialOrphanNames )const;
  void getCapacityOrphanNames( std::vector<std::string> & capacityOrphanNames )const;
  void getOperationOrphanNames( std::vector<std::string> & operationOrphanNames )const;


@


1.21
log
@Error message text for nonxisting consumptionArc updated.
Declarations with empty definitions of 3 methods added.
@
text
@d44 1
a44 1
  bool operationExists    (const std::string & operationName)const;
d121 2
d152 5
a156 4
  std::vector<float> getResourceConsumptionVolume(const std::string & materialName )const;
  std::vector<float> getResourceProductionVolume(const std::string & materialName )const;
  std::vector<float> getResourceScrapVolume(const std::string & materialName )const;
  std::vector<float> getResourceExcessVolume(const std::string & materialName )const;
@


1.20
log
@added methods and testcases to test that solution has some required properties
@
text
@d193 6
@


1.19
log
@added methods to get objective value when there is not scrap cost
@
text
@d196 8
a203 1
    void presolve();
@


1.18
log
@added code to write output files.
added code to set scrapVol
@
text
@d111 9
a119 1
  double getObjValue() const;
d204 1
@


1.17
log
@Changes to have a witLog and oslLog file written to output directory.
@
text
@d23 3
d37 2
a38 1
  std::vector<float> getCapacityConsumptionVolume(const std::string & materialName )const;
d53 1
d111 1
d138 3
d144 2
d166 1
@


1.16
log
@Changed indentation, changed tabs to spaces for readability.
Changed set/getConsumptionArcConsumptionRate to be private methods.
@
text
@d111 3
d183 1
a183 1
  
@


1.15
log
@Private presolve() method has been added and test cases for it
have been added in the section where we test substitution arcs.
Minor bugfixes ("Consumpiton" -> "Consumption")
@
text
@a95 10
  
  void setSubstitutionArcConsumptionRate(
                     const std::string & operationName, 
										 const std::string & consumedResourceName, 
										 const std::string & substituteConsumedResourceName,
										 int period, float consumptionRate );
  std::vector<float> getSubstitutionArcConsumptionRate(
                             const std::string & operationName,
													   const std::string & consumedResourceName,
													   const std::string & substituteConsumedResourceName);
a98 6
/*
  void addSubstitutionArc(const std::string & operationName, const std::string & consumedResourceName, const std::string & substituteConsumedResourceName );

  void getSubstitutionArcNames( std::vector<std::string> & operationNames, std::vector<std::string> & consumedResourceNames, std::vector<std::string> & substituteConsumedResourceNames )const;
  bool substitutionArcExists    (const std::string & operationName, const std::string & consumedResourceName, const std::string & substituteConsumedResourceName )const;
*/
d133 14
@


1.14
log
@modified some subArc code
@
text
@d56 1
a56 1
  void setConsumpitonArcConsumptionRate(const std::string & operationName, const std::string & consumedResourceName, int period, float consumptionRate );
d117 1
d163 3
a165 3
  static std::string operationFromSubstitutionArcName(const std::string & consumptionArcName );
  static std::string consumedResourceFromSubstitutionArcName(const std::string & consumptionArcName );
  static std::string ECCovptProblem::substituteConsumedResourceFromSubstitutionArcName(const std::string & consumptionArcName );
d172 6
@


1.13
log
@Substitution Arc methods have been added.
Test cases for Substitution Arc methods have been added, all runs fine.
@
text
@a61 17
  // Methods for substitution arcs.
  //----------------------
  void addSubstitutionArc(const std::string & operationName, const std::string & consumedResourceName, const std::string & substituteConsumedResourceName );
  bool substitutionArcExists    (const std::string & operationName, const std::string & consumedResourceName, const std::string & substituteConsumedResourceName)const;
  
  void setSubstitutionArcConsumptionRate(const std::string & operationName, 
										 const std::string & consumedResourceName, 
										 const std::string & substituteConsumedResourceName,
										 int period, float consumptionRate );
  std::vector<float> getSubstitutionArcConsumptionRate(const std::string & operationName,
													   const std::string & consumedResourceName,
													   const std::string & substituteConsumedResourceName);

  void getSubstitutionArcNames( std::vector<std::string> & operationNames, std::vector<std::string> & consumedResourceNames, std::vector<std::string> & substituteConsumedResourceNames )const;


  //----------------------
d94 15
@


1.12
log
@added following methods: solve,getMaterialConsumptionVolume,getMaterialProductionVolume,getCapacityConsumptionVolume,getDemandShipVol
@
text
@d62 17
d161 7
d183 1
@


1.11
log
@implemented setDemandMinShipVol and getDemandMinShipVol
@
text
@d21 2
d34 1
d88 1
d102 4
d129 5
@


1.10
log
@Changed order of methods in header file so they are consistent
@
text
@d81 3
@


1.9
log
@added methods to class ECCovptProblem to add productionArcs and get and set their input attributes
@
text
@d15 1
a20 2
  bool materialExists(const std::string & materialName)const;

a25 1

a28 1

d37 1
a45 2
  bool operationExists    (const std::string & operationName)const;

a49 1

d51 2
a56 1
  bool consumptionArcExists    (const std::string & operationName, const std::string & consumedResourceName)const;
a60 1

d62 2
a67 2
  bool productionArcExists    (const std::string & operationName, const std::string & producedResourceName)const;

a72 1

a75 1

a78 1

@


1.8
log
@Added prototypes for substituteArcs
@
text
@d66 7
a72 1
  // To be done
d77 11
d89 1
a89 1
  // To be done
a102 16
  //----------------------
  // Methods for demands.
  //----------------------
  void addDemand(const std::string & demandedMaterial, const std::string & demandName);

  bool demandExists(const std::string & demandedMaterial, const std::string & demandName)const;

  void setDemandDemandVol(const std::string & demandedMaterial, const std::string & demandName, int period, float supply );

  std::vector<float> getDemandDemandVol(const std::string & demandedMaterial, const std::string & demandName)const;

  void setDemandContribution(const std::string & demandedMaterial, const std::string & demandName, int period, float supply );

  std::vector<float> getDemandContribution(const std::string & demandedMaterial, const std::string & demandName)const;

  void getDemandNames( std::vector<std::string> & materialNames, std::vector<std::string> & demandNames )const;
d136 5
d150 2
a151 1
  std::set<std::string> consumptionArcNames_;;
@


1.7
log
@Added methods for consumptionArcs
@
text
@d75 2
a76 1
  // Methods for substitute materials.
d78 2
d81 3
a83 1
  // To be done
@


1.6
log
@Added method to getDemandNames.
A few other cosmetic changes. (Made method names consistent with wit).
@
text
@d55 6
a60 1
  // To be done
d125 6
d139 1
@


1.5
log
@Some methods for Demands have been added.
There are methods for all the attributes except for
the minShipVol, which I don't think I understand well.
All new methods have their test cases.
@
text
@d50 24
d79 3
a81 1
  void addDemand(const std::string & material, const std::string & demandName);
d83 1
a83 1
  bool demandExists(const std::string & material, const std::string & demandName)const;
d85 1
a85 1
  void setDemandDemVol(const std::string & material, const std::string & demandName, int period, float supply );
d87 1
a87 1
  std::vector<float> getDemandDemVol(const std::string & material, const std::string & demandName)const;
d89 1
a89 1
  void setDemandContribution(const std::string & material, const std::string & demandName, int period, float supply );
d91 1
a91 1
  std::vector<float> getDemandContribution(const std::string & material, const std::string & demandName)const;
a92 1
  //void getCapacityNames( std::vector<std::string> & capacityNames )const;
d115 4
d127 1
a127 1
  std::set<std::string> demandNames_;
@


1.4
log
@Implemented 4 capacity methods and added test cases for them.
@
text
@d52 17
d98 1
@


1.3
log
@added comments defining capacity method prototypes.
modified the way materialExists method works.
@
text
@d26 3
d30 1
a30 3
  // To be done
  /*
  void addCapacity(const std::string & capacityName);
a31 1
  void setCapacitySupply(const std::string &capacityName, int period, float supply );
a34 3
  bool capacityExists(const std::string & capacityName)const;

  */
d79 1
@


1.2
log
@updated ovptProblem to implement operation methods
@
text
@d28 10
d81 2
a82 2
  std::vector<std::string> materialNames_;
  std::vector<std::string> operationNames_;
@


1.1
log
@Added skeleton to start
@
text
@d16 1
a16 1
  void setMaterialSupply    (const std::string &materialName, int period, float supply );
d20 1
a20 1
  bool materialExists    (const std::string & materialName)const;
d23 19
d72 1
@

