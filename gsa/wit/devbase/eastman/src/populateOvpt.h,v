head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2004.11.15.22.48.18;	author grzes;	state Exp;
branches;
next	1.8;

1.8
date	2004.11.15.22.07.56;	author grzes;	state Exp;
branches;
next	1.7;

1.7
date	2004.11.12.13.57.37;	author grzes;	state Exp;
branches;
next	1.6;

1.6
date	2004.11.09.18.29.44;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.09.05.12.13;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.08.21.10.36;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.06.23.51.19;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.29.01.42.17;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.28.15.51.28;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Added tests for orphan operation
and minor bugfixes
@
text
@#ifndef ECCpopulateOvpt_h
#define ECCpopulateOvpt_h

#include <string>
#include "scoFile.h"

class ECCovptProblem;

class ECCpopulateProblem  {
public:
  
  // Read directory of input files
  // If throwExceptionOnWarning is true, then an exception is
  // thrown on first warning.
  void readDirectoryFiles(bool throwExceptionOnWarning=false);
  
  //------------------------
  
  // expected constructor constructor
  ECCpopulateProblem(
    ECCovptProblem & prob,
    const std::string & inputDirectory,
    const std::string & logFileName);
  
  // destructor
  ~ECCpopulateProblem();
  
  
  // Self-test
  static void test();
  
private:
  
  // These methods are not implemented
  // default constructor
  ECCpopulateProblem();
  // copy constructor
  ECCpopulateProblem( const ECCpopulateProblem& source );
  // assignment operator
  ECCpopulateProblem&
    operator=(const ECCpopulateProblem& rhs);
  
  // Error checking methods
  void checkPeriodValidity(
    int period, 
    int nPeriods, 
    const SCOfileIterator & fileIter, 
    const SCOcsvFormatFile & file,
    const std::string severity,
    const std::string action);
  
  // Check that parameter is >=0. If it isn't throw an exception
  void checkNonNegativeParmValidity(
    float parmValue, 
    const std::string & parmName,
    const SCOfileIterator & fileIter, 
    const SCOcsvFormatFile & file,
    const std::string severity,
    const std::string action);
  
  // Check that material exists. If it doesn't throw an exception
  void checkMaterialExits(
    const std::string & materialName,
    const std::string & shortFileName,
    const SCOfileIterator & fileIter, 
    const SCOcsvFormatFile & file,
    const SCOcsvFormatFile & materialFile,
    const std::string severity,
    const std::string action) ;
  
  
  // Check that capacity exists. If it doesn't throw an exception
  void checkCapacityExits(
    const std::string & capacityName,
    const std::string & shortFileName,
    const SCOfileIterator & fileIter, 
    const SCOcsvFormatFile & file,
    const SCOcsvFormatFile & capacityFile,
    const std::string severity,
    const std::string action) ;
  
  
  // Check that resource exists. If it doesn't throw an exception
  void checkResourceExits(
    const std::string & resourceName,
    const std::string & shortFileName,
    const SCOfileIterator & fileIter, 
    const SCOcsvFormatFile & file,
    const SCOcsvFormatFile & materialFile,
    const SCOcsvFormatFile & capacityFile,
    const std::string severity,
    const std::string action);
  
  // Check that operation exists. If it doesn't throw an exception
  void checkOperationExits(
    const std::string & operationName,
    const std::string & shortFileName,
    const SCOfileIterator & fileIter, 
    const SCOcsvFormatFile & file,
    const SCOcsvFormatFile & operationFile,
    const std::string severity,
    const std::string action);

  // Check that consumptionArc exists. If it doesn't throw an exception
  void ECCpopulateProblem::checkConsumptionArcExits(
						 const std::string & operationName,
						 const std::string & consumedResourceName,
                         const std::string & shortFileName,
                         const SCOfileIterator & fileIter, 
                         const SCOcsvFormatFile & file,
                         const SCOcsvFormatFile & operationFile,
                         const std::string severity,
                         const std::string action); 

  // 3 methods for checking if orphans exist

  // Check if orphan materials exist. If they do, throw an exception
  void checkOrphanMaterialExists(const SCOcsvFormatFile & materialFile,
								 const std::string severity,
								 const std::string action);
  // Check if orphan capacities exist. If they do, throw an exception 
  void checkOrphanCapacityExists(const SCOcsvFormatFile & capacityFile,
								 const std::string severity,
								 const std::string action);
  // Check if orphan operations exist. If they do, throw an exception
  void checkOrphanOperationExists(const SCOcsvFormatFile & operationFile,
								  const std::string severity,
								  const std::string action);
  //-----------------------------------------------------------------

  void ECCpopulateProblem::writeMessage(const std::string & msg) const;
  
  
  ECCovptProblem & prob_;
  std::string inputDirectory_;
  std::string logFileName_;
  
  
};



#endif
@


1.8
log
@Added tests for orphan materials and orphan capacities
with test cases.
@
text
@d126 4
a129 1
  void checkOrphanOperationExists();
@


1.7
log
@Added test for the existence of consumptionArc when
creatin substitutionArc.
@
text
@d61 1
a61 1
  // Check that material exits. If it doesn't throw an exception
d72 1
a72 1
  // Check that capacity exits. If it doesn't throw an exception
d83 1
a83 1
  // Check that resource exits. If it doesn't throw an exception
d94 1
a94 1
  // Check that operation exits. If it doesn't throw an exception
d104 1
a104 1
// Check that consumptionArc exits. If it doesn't throw an exception
d115 13
@


1.6
log
@modified to have 3 logfiles: osl, wit, ovpt
@
text
@d102 12
a113 1
    const std::string action); 
@


1.5
log
@Changes to have a witLog and oslLog file written to output directory.
@
text
@d23 1
a23 1
    FILE * msgFilePtr);
d109 1
a109 1
  FILE * msgFilePtr_;
@


1.4
log
@Added error checking for an undefined operation
@
text
@d22 2
a23 1
    const std::string & inputDirectory);
d103 2
d109 1
@


1.3
log
@Modified so populate method is now a class
@
text
@d5 1
d12 4
a15 1
  void readDirectoryFiles();
@


1.2
log
@Updated so populate uses ovptProblem.
@
text
@d8 97
a104 6
void populate(
              ECCovptProblem & prob, 
              const std::string & inputDirectory 
              //const std::string & odir,
              //RcpOptCalendar & rcpCal
              );
@


1.1
log
@Initial effort on popluate and main program
@
text
@d6 2
d9 1
a9 1
              //RCPproblem & prob, 
a14 38
#if 0
#include "rcpProblem.h"
#include "toFromSubsFile.h"
#include "rcpOptCal.h"
#include "rcpOptTimer.h"


void readResourceFile(
                      RCPproblem & prob, 
                      const std::string & resourceFileName,
                      bool readFixedCost, // read fixedCosted from file
                      float fixedCost,    // value to set fixed cost (ignored if readFixedCost=true).

                      bool setAcquireCost,  // if true, then acquireCost is set to value of next parameter
                      float acquireCost,   // value to set acquire cost
                      bool setReleaseCost,
                      float releaseCost,
                      bool setReleaseTime,
                      float releaseTime,
                      std::vector<int> matchVector,
                      RcpOptCalendar & rcpCal
                      );
void readPrioritySubstitutionDescriptionFile(
                      RCPproblem & prob, 
                      const std::string & substitutionFileName
                      );


void populate04Feb(
              RCPproblem & prob, 
              const std::string & idir, 
              const std::string & odir,
              const std::string & resourceFileName,
              const std::string & bomFileName,
              int   nPeriods,
              bool   prioritySubs,
	          bool resourceIdPriority,
              RcpOptCalendar & rcpCal);
a15 27
void populate03Dec(
              RCPproblem & prob, 
              const std::string & idir, 
              const std::string & odir,
              const std::string & resourceFileName,
              const std::string & bomFileName,
              int   nPeriods,
              bool  tfSubs,
              bool  globalSubstitution,
              bool  resourceIdPriority,
              RcpOptCalendar & rcpCal,
              int hasResourceCosts);
void populate(
              RCPproblem & prob, 
              const std::string & idir, 
              const std::string & odir,
              RcpOptCalendar & rcpCal);


std::string createEngagementName(std::vector<std::string> resourceAttributeVector);


  void readSubsFile(
              RCPproblem & prob, 
              const SCOcsvFormatFile & file,
              const std::string & resourceIdName);
#endif
@

