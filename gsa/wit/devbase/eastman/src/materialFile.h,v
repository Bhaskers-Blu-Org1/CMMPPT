head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2004.11.08.23.23.20;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.06.13.21.52;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.28.04.44.11;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Fixed up to recognize and test for records with duplicate keys.
@
text
@#ifndef ECCmaterialFile_h
#define ECCmaterialFile_h

#include "scoFile.h"


class ECCmaterialFile : public SCOcsvFormatFile {
public:

  // Fields
  getFieldH(material);
  
  // preferred constructor
  ECCmaterialFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    //insertField("mtm");
    //insertField("plantLoc");
    //insertField("period");
    //insertField("supply");
    //insertField("wfmv");
    hasHeaderRecord(1);
    commentRecords(true);
    
    // don't normally call initialize here, but doing this for eastman
    // to make sure duplicate records are found.
    initialize();  
  };
  

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & material) 
  {
    //char periodchar[100];
    //sprintf( periodchar, "%d", period );
    std::string retVal = material;
    return retVal;
  };
  
  // destructor
  ~ECCmaterialFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    {
      ECCmaterialFile file("../data/example1/material.csv");
      
      // Test reading first record
      
      assert( file.material(0) == "Tow" );
      
      assert( file.material(2) == "RecoveredAceticAcid" );
      
      // Test reading record by key    
      assert( file.material(file.key("Flake")) == "Flake" );
      
      int nr = file.numRecords();
      assert( nr == 11 );
    }
    {
      bool expThrown=false;
      try {
        ECCmaterialFile file("../data/errorDuplicateName/material.csv");
      } catch ( SCOexception e ) {
        expThrown = true;
      }
      assert( expThrown );
    }

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      material(recNum) );
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  ECCmaterialFile();
  
  // copy constructor  -- don't use!
  ECCmaterialFile( const ECCmaterialFile& source );
  
  // assignment operator -- don't use!
  ECCmaterialFile&
  operator=(const ECCmaterialFile& rhs);

  
};



class ECCmaterialFileIterator : public SCOfileIterator {
public:
  
  // fields 
  
  getFieldFileWithIteratorH(material);
  
  // preferred constructor
  ECCmaterialFileIterator(const ECCmaterialFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~ECCmaterialFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    ECCmaterialFile file("../data/example1/material.csv");
    ECCmaterialFileIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        assert( fileIter.material() == "Tow" );
      }   
      else if ( recNo == 1 ) {
        assert( fileIter.material() == "WeakAceticAcid" ); 
      }
      recNo++;
    }
    
  }

private:
  
  
  // default constructor -- don't use!
  ECCmaterialFileIterator();
  
  // copy constructor  -- don't use!
  ECCmaterialFileIterator( const ECCmaterialFileIterator& source );
  
  // assignment operator -- don't use!
  ECCmaterialFileIterator&
  operator=(const ECCmaterialFileIterator& rhs);

  
};
#endif
@


1.2
log
@Test method changed to match changes to material.csv in example1 dir
@
text
@d26 4
d49 24
a72 13
    ECCmaterialFile file("../data/example1/material.csv");
    
    // Test reading first record

    assert( file.material(0) == "Tow" );

    assert( file.material(2) == "RecoveredAceticAcid" );

    // Test reading record by key    
    assert( file.material(file.key("Flake")) == "Flake" );

    int nr = file.numRecords();
    assert( nr == 11 );
@


1.1
log
@added materialAttributesFile and materialFile
@
text
@d57 1
a57 1
    assert( nr == 10 );
@

