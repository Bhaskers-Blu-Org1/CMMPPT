head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.11.08.23.23.20;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2004.10.28.16.51.36;	author grzes;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.28.15.50.33;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.28.15.19.52;	author grzes;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Fixed up to recognize and test for records with duplicate keys.
@
text
@#ifndef ECCoperationAttributesFile_h
#define ECCoperationAttributesFile_h

#include "scoFile.h"


class ECCoperationAttributesFile : public SCOcsvFormatFile {
public:

  // Fields
  getFieldH(operation);
  getIntFieldH(period);
  getFloatFieldH(contribution);
  getFloatFieldH(minimumProduction);
  
  // preferred constructor
  ECCoperationAttributesFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    //insertField("mtm");
    //insertField("plantLoc");
    //insertField("period");
    //insertField("contribution");
    //insertField("wfmv");
    hasHeaderRecord(4);
    commentRecords(true);
    
    // don't normally call initialize here, but doing this for eastman
    // to make sure duplicate records are found.
    initialize();  
  };
  

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & operation,
    int period) 
  {
    char periodchar[100];
    sprintf( periodchar, "%d", period );
    std::string retVal = operation+uniqueString()+periodchar;
    return retVal;
  };
  
  // destructor
  ~ECCoperationAttributesFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    ECCoperationAttributesFile file("../data/example1/operationAttributes.csv");

    // Test reading first record
    assert( file.operation(0) == "MakePrimesterFlakes" );
    assert( file.periodAsInt(0) == 1 );
    assert( file.contributionAsFloat(0) == 1234.5f );
	assert( file.minimumProductionAsFloat(0) == 0.f );

    assert( file.operation(2) == "MakePrimesterFlakes" );
    assert( file.periodAsInt(2) == 3 );
    assert( file.contributionAsFloat(2) == 1234.5f );
	assert( file.minimumProductionAsFloat(2) == 0.f );

    // Test reading record by key    
    assert( file.contributionAsFloat(file.key("MakePrimesterFlakes",3)) == 1234.5f );

    int nr = file.numRecords();
    assert( nr == 5 );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      operation(recNum),
      periodAsInt(recNum) );
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  ECCoperationAttributesFile();
  
  // copy constructor  -- don't use!
  ECCoperationAttributesFile( const ECCoperationAttributesFile& source );
  
  // assignment operator -- don't use!
  ECCoperationAttributesFile&
  operator=(const ECCoperationAttributesFile& rhs);

  
};



class ECCoperationAttributesFileIterator : public SCOfileIterator {
public:
  
  // fields 
  
  getFieldFileWithIteratorH(operation);
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(contribution);
  getFloatFieldFileWithIteratorH(minimumProduction);

  // preferred constructor
  ECCoperationAttributesFileIterator(const ECCoperationAttributesFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~ECCoperationAttributesFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    ECCoperationAttributesFile file("../data/example1/operationAttributes.csv");
    ECCoperationAttributesFileIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        
        assert( fileIter.operation() == "MakePrimesterFlakes" );
        assert( fileIter.periodAsInt() == 1 );
        assert( fileIter.contributionAsFloat() == 1234.5f );
		assert( fileIter.minimumProductionAsFloat() == 0.f );
      }   
      else if ( recNo == 1 ) {
        assert( fileIter.operation() == "MakePrimesterFlakes" );
        assert( fileIter.periodAsInt() == 2 );
        assert( fileIter.contributionAsFloat() == 1234.5f );
		assert( fileIter.minimumProductionAsFloat() == 0.f );
           
      }
      recNo++;
    }
    
  }

private:
  
  
  // default constructor -- don't use!
  ECCoperationAttributesFileIterator();
  
  // copy constructor  -- don't use!
  ECCoperationAttributesFileIterator( const ECCoperationAttributesFileIterator& source );
  
  // assignment operator -- don't use!
  ECCoperationAttributesFileIterator&
  operator=(const ECCoperationAttributesFileIterator& rhs);

  
};
#endif
@


1.3
log
@Just some formatting, no changes to the code.
@
text
@d29 4
@


1.2
log
@Updated to work with new values in data files
@
text
@d106 1
a106 1
   getFloatFieldFileWithIteratorH(minimumProduction);
@


1.1
log
@Added operationAttributesFile.h.
@
text
@d60 1
a60 1
	assert( file.minimumProductionAsFloat(2) == 4.f );
d136 1
a136 1
		assert( fileIter.minimumProductionAsFloat() == 1.f );
@

