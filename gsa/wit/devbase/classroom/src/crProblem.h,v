head	1.5;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2002.05.10.14.31.28;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.10.12.32.35;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.09.19.53.19;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.09.19.12.10;	author parija;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.08.19.39.12;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.05.08.19.39.12;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Added static methods for creating wit object names
@
text
@#ifndef CRproblem_h
#define CRproblem_h

#include <string>
#include <vector>
#include <map>
//#include "appData.h"


class WitRun;

class CRproblem  {
public:

  //------------------------------------
  // Set/Get String Describing Problem
  void setTitle(const std::string & title);
  std::string getTitle() const;

  // Set/Get Number of Periods in Problem
  void setNPeriods(int nP);
  int getNPeriods() const;

  //------------------------------------
  // Course Methods
  void addCourse( const std::string & courseName );
  const std::vector<std::string> & getCourses() const {return courseNames_;};

  // Instructor Methods
  void addInstructor( const std::string & instructorName );
  const std::vector<std::string> & getInstructors() const {return instructorNames_;};

  void setInstructorBlockoutPeriods(const std::string & instructorName, const std::vector<int> blockedPeriods );

  // Room Methods
  void addClassroom( const std::string & roomNumber, const std::string & locationName );
  //const std::vector<std::string> & getClassrooms() const {return classroomNames_;};
  void getClassrooms( std::vector<std::string> & roomNumbers, std::vector<std::string> & locationNames );


  void setClassroomBlockoutPeriods(const std::string & roomNumber, const std::string & locationName, const std::vector<int> blockedPeriods );

  // Class Methods (Definition:  a Class is an instance of a Course)
  void addClass(
	  const std::string & courseName, 
	  const std::string & locationName, 
	  const std::string & instance);
  /*const std::vector<std::string> & getClasses() const {return baseClassNames_;};*/
  void setClassNSeats(
	  const std::string & courseName, 
	  const std::string & locationName, 
	  const std::string & instance,
    int numSeats);
  void setClassNDays(
	  const std::string & courseName, 
	  const std::string & locationName, 
	  const std::string & instance,
    int numDays);
  int getClassNDays(
	  const std::string & courseName, 
	  const std::string & locationName, 
	  const std::string & instance) const;

  // WIT Algorithm Choices
  static std::vector<std::string> algorithmChoices() 
  {
    std::vector<std::string> retVal;
    retVal.push_back("LP");
    retVal.push_back("SimpleGreedy");
    retVal.push_back("MaxMinPortLocCostGreedy");
    retVal.push_back("MaxMaxPortLocCostGreedy");
    retVal.push_back("MaxMinPortLocResrcConsGreedy");
    retVal.push_back("MaxMaxPortLocResrcConsGreedy");
    retVal.push_back("MIP");
    return retVal;
  }
  void setAlgorithm( const std::string & alg );
  const std::string & getAlgorithm() const;
  static bool validAlgorithm(const std::string & alg);
  
  // Solve allocation 
  void solve();
  
  // return true if there are sufficent resources to do all application work
  bool sufficientResources() const;

  // return objective function value
  float getObjValue() const;

  // Get list of shortages
  void getShortages(     
    std::vector<std::string> & resourceDescriptions,
    std::vector<int> & periods,
    std::vector<float> & shortageVols ) const;

  // Indicate that the setting of execVols and subVols are
  // are complete, so consVols can be computed.
  // the is needed by GRmipProblem::solve for testing
  void execVolSubVolSettingComplete();


#ifdef CLEANUP
  // Get app sourcing
  void getAppSourcingLoc( 
      std::vector<std::string> & appName,
      std::vector<std::string> & LocName,                               
      std::vector<float> & quantity )
      const;
#endif


  //----------------------------------------------------------------------

  void writeWitData( std::string filename ) const;
  

  //----------------------------------------------------------------------

  // default constructor
  CRproblem();
  
  // copy constructor
  CRproblem( const CRproblem& source );
  
  // assignment operator
  CRproblem&
  operator=(const CRproblem& rhs);
  
  // destructor
  ~CRproblem();
  

  // Self-test
  static void test();

 

private:
  
  // methods for creating wit object names
  static std::string baseClassName(
    const std::string & courseName, 
    const std::string & locationName, 
    const std::string & instance );
  static std::string seatInClassPartName(
    const std::string & courseName, 
    const std::string & locationName, 
    const std::string & instance );
  static std::string teachClassOpName(
    const std::string & courseName, 
    const std::string & locationName, 
    const std::string & instance );
  static std::string classClassroomPartName(
    const std::string & courseName, 
    const std::string & locationName, 
    const std::string & instance );

  // methods for extracting pieces of wit object names
  static std::string courseNameFromBaseClassName(const std::string & baseClassName);
  static std::string locationNameFromBaseClassName(const std::string & baseClassName);
  static std::string instanceFromBaseClassName(const std::string & baselassName);

  inline std::vector<float> witFloatStarToStlVec(const float * inputVec ) const
  {
    std::vector<float>  retVal;
    int np = getNPeriods();
    int i;
    for ( i=0; i<np; ++i ) retVal.push_back(inputVec[i]);
    return retVal;
  };

  inline float * stlVecToFloatStar(const std::vector<float> & inputVector ) const
  {
    int len = inputVector.size();
    float * retVal = (float *) malloc(len*sizeof(float));
    int i;
    for ( i=0; i<len; ++i ) retVal[i] = inputVector[i];
    return retVal;
  };

  enum State {
    UNPREPROCESSED,
    PREPROCESSED,
    SOLVED,
    POSTPROCESSED
  };
  void setState( State s );
  State getState() const { return state_; };


  void unpreprocess();
  void preprocess();
  void postprocess();
  
#if 0
  // Get number of periods in problem
  int nPeriods() const;
#endif

public:

private:
  
  int getBomEntryIndex( 
    const std::string & port, 
    const std::string & portLoc, 
    const std::string & skill, 
    const std::string & resrcLoc,
    const std::string & band,
    const std::string & role,
    bool homeSite ) const;
  int getBopEntryIndex( 
    const std::string & port, 
    const std::string & portLoc ) const;
  
#ifdef CLEANUP
  std::string appNameFromAppSourcingOpName( std::string appSourcingOpName ) const;
  std::string locNameFromAppSourcingOpName( std::string appSourcingOpName ) const;
  bool isAppSourcingOpName( std::string opName ) const;
#endif


  WitRun * mutableWitRun() const;
  WitRun * witRun();

  void gutsOfCopy( const CRproblem& source );
  void gutsOfDestructor();

  mutable WitRun * wr_;
  State state_;
  std::string alg_;


  int numSubs_;
  std::vector<std::string> portNames_; 
  std::vector<std::string> locNames_;
  std::vector<std::string> resourceNames_;
  std::vector<std::string> countryNames_;

  std::vector<std::string> courseNames_; 
  std::vector<std::string> classroomNames_; 
  std::vector<std::string> instructorNames_; 
  std::vector<std::string> baseClassNames_; 
  
};


#endif
@


1.4
log
@Changes to implement the setting/getting of the nDays of a class in appData
@
text
@d48 1
a48 1
  const std::vector<std::string> & getClasses() const {return classNames_;};
d139 23
a161 1

d243 1
a243 1
  std::vector<std::string> classNames_; 
@


1.3
log
@Added set methods for a class nDays and nSeats
@
text
@d59 4
@


1.2
log
@Gyana's latest changes
@
text
@d37 3
a39 1
  const std::vector<std::string> & getClassrooms() const {return classroomNames_;};
d47 5
d53 6
a58 3
      int numSeats,
	  int numDays );
  const std::vector<std::string> & getClasses() const {return classNames_;};
@


1.1
log
@Initial revision
@
text
@d42 6
a47 1
  void addClass(const std::string & courseName, const std::string & locationName, const std::string & instance );
@


1.1.1.1
log
@start
@
text
@@
