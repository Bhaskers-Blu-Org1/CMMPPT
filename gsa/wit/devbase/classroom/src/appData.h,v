head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2002.05.10.12.32.35;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Changes to implement the setting/getting of the nDays of a class in appData
@
text
@#ifndef CRAppData_h
#define CRAppData_h

#include <vector>
#include <map>

class CRappData  {
public:
  virtual CRappData * clone() const = 0;

  // destructor
  virtual ~CRappData(){};

protected:
  
  // constructor
  CRappData(){};
  
  // copy constructor
  CRappData( const CRappData& source ){};
  
  // assignment operator
  CRappData & operator=(const CRappData& rhs)
  {  
    if (this != &rhs) {        
    // nothing to do here
    }
    return *this;
  }
  
  // Self-test
  //static void test();

  static void setVector(int len, const float * inputVec, std::vector<float> & outputVec )
  {
    int i;
    for ( i=0; outputVec.size()<len; ++i ) outputVec.push_back(0.0);
    for ( i=0; i<len; ++i ) outputVec[i] = inputVec[i];
  };
  
  static void setVector(int len, float inputScalar, std::vector<float> & outputVec )
  {
    int i;
    for ( i=0; outputVec.size()<len; ++i ) outputVec.push_back(0.0);
    for ( i=0; i<len; ++i ) outputVec[i] = inputScalar;
  };

  //v2=v2+v1
  static void addVector(const std::vector<float> & v1, std::vector<float> & v2)
  { 
    assert(v1.size()==v2.size());
    for (int t=0; t<v1.size(); t++) v2[t]+=v1[t];
  };

};



class CRteachClassOpAppData : public CRappData {
public:
   
  int getNDays() const { return nDays_; };
  void setNDays(float nDays ) { nDays_=nDays; };

   
  // default constructor
  CRteachClassOpAppData()
    :
    nDays_(1){};
  
  // destructor
  virtual ~CRteachClassOpAppData(){};
  
  // copy constructor
  CRteachClassOpAppData( const CRteachClassOpAppData& source ):
  CRappData(source),
    nDays_(source.nDays_)
  {};
  
  // assignment operator
  CRteachClassOpAppData&
    operator=(const CRteachClassOpAppData& rhs)
  {  
    if (this != &rhs) {        
      CRteachClassOpAppData::operator=(rhs);
      nDays_ = rhs.nDays_;
    }
    return *this;
  }

  virtual CRappData * clone() const
  { return (new CRteachClassOpAppData(*this));}
  
  // Self-test
  //static void test();
private:
  
  // duration of the class
  float nDays_;
  
};
#endif
@
