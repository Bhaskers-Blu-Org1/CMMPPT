head	1.2;
access;
symbols
	beforeInforms:1.1.1.1
	Start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2005.04.12.18.44.43;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.22.18.52.42;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.22.18.52.42;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Removing Sbb
@
text
@@


1.1
log
@Initial revision
@
text
@a0 202
// Copyright (C) 2003, International Business Machines
// Corporation and others.  All Rights Reserved.
#ifndef SbbCutGenerator_H
#define SbbCutGenerator_H

#include "OsiSolverInterface.hpp"
#include "OsiCuts.hpp"

class SbbModel;
class OsiRowCut;
class OsiRowCutDebugger;
class CglCutGenerator;

//#############################################################################

/** Interface between Sbb and Cut Generation Library.

  \c SbbCutGenerator is intended to provide an intelligent interface between
  Sbb and the cutting plane algorithms in the CGL. A \c SbbCutGenerator is
  bound to a \c CglCutGenerator and to an \c SbbModel. It contains parameters
  which control when and how the \c generateCuts method of the
  \c CglCutGenerator will be called.

  The builtin decision criteria available to use when deciding whether to
  generate cuts are limited: every <i>X</i> nodes, when a solution is found,
  and when a subproblem is found to be infeasible. The idea is that the class
  will grow more intelligent with time.

  \todo Add a pointer to function member which will allow a client to install
	their own decision algorithm to decide whether or not to call the CGL
	\p generateCuts method. Create a default decision method that looks
	at the builtin criteria.

  \todo It strikes me as not good that generateCuts contains code specific to
	individual CGL algorithms. Another set of pointer to function members,
	so that the client can specify the cut generation method as well as
	pre- and post-generation methods? Taken a bit further, should this
	class contain a bunch of pointer to function members, one for each
	of the places where the cut generator might be referenced?
	Initialization, root node, search tree node, discovery of solution,
	and termination all come to mind. Initialization and termination would
	also be useful for instrumenting sbb.
*/

class SbbCutGenerator  {
  
public:
    
  /** \name Generate Cuts */
  //@@{
  /** Generate cuts for the client model.

    Evaluate the state of the client model and decide whether to generate cuts.
    The generated cuts are inserted into and returned in the collection of cuts
    \p cs.

    If \p fullScan is true, the generator is obliged to call the CGL
    \c generateCuts routine.  Otherwise, it is free to make a local decision.
    The current implementation uses \c whenCutGenerator_ to decide.

    The routine returns true if reoptimisation is needed (because the state of
    the solver interface has been modified).
  */
  bool generateCuts( OsiCuts &cs, bool fullScan); 
  //@@}

    
  /**@@name Constructors and destructors */
  //@@{
  /// Default constructor 
  SbbCutGenerator (); 

  /// Normal constructor
  SbbCutGenerator(SbbModel * model,CglCutGenerator * generator,
		  int howOften=1, const char * name=NULL,
		  bool normal=true, bool atSolution=false, 
		  bool infeasible=false);
 
  /// Copy constructor 
  SbbCutGenerator (const SbbCutGenerator &);

  /// Assignment operator 
  SbbCutGenerator & operator=(const SbbCutGenerator& rhs);

  /// Destructor 
  ~SbbCutGenerator ();
  //@@}

  /**@@name Gets and sets */
  //@@{
  /** Set the client model.
  
    In addition to setting the client model, refreshModel also calls
    the \c refreshSolver method of the CglCutGenerator object.
  */
  void refreshModel(SbbModel * model);

  /// return name of generator
  inline const char * cutGeneratorName() const
  { return generatorName_;};

  /** Set the cut generation interval

    Set the number of nodes evaluated between calls to the Cgl object's
    \p generateCuts routine.

    If \p value is positive, cuts will always be generated at the specified
    interval.
    If \p value is negative, cuts will initially be generated at the specified
    interval, but Sbb may adjust the value depending on the success of cuts
    produced by this generator.

    A value of -100 disables the generator, while a value of -99 means
    just at root.
  */
  void setHowOften(int value) ;

  /// Get the cut generation interval.
  inline int howOften() const
  { return whenCutGenerator_;};

  /// Get whether the cut generator should be called in the normal place
  inline bool normal() const
  { return normal_;};
  /// Set whether the cut generator should be called in the normal place
  inline void setNormal(bool value) 
  { normal_=value;};
  /// Get whether the cut generator should be called when a solution is found
  inline bool atSolution() const
  { return atSolution_;};
  /// Set whether the cut generator should be called when a solution is found
  inline void setAtSolution(bool value) 
  { atSolution_=value;};
  /** Get whether the cut generator should be called when the subproblem is
      found to be infeasible.
  */
  inline bool whenInfeasible() const
  { return whenInfeasible_;};
  /** Set whether the cut generator should be called when the subproblem is
      found to be infeasible.
  */
  inline void setWhenInfeasible(bool value) 
  { whenInfeasible_=value;};
  /// Get the \c CglCutGenerator corresponding to this \c SbbCutGenerator.
  inline CglCutGenerator * generator() const
  { return generator_;};
  /// Number times cut generator entered
  inline int numberTimesEntered() const
  { return numberTimes_;};
  void setNumberTimesEntered(int value)
  { numberTimes_ = value;};
  void incrementNumberTimesEntered(int value=1)
  { numberTimes_ += value;};
  /// Total number of cuts added
  inline int numberCutsInTotal() const
  { return numberCuts_;};
  void setNumberCutsInTotal(int value)
  { numberCuts_ = value;};
  void incrementNumberCutsInTotal(int value=1)
  { numberCuts_ += value;};
  /// Total number of cuts active after (at end of n cut passes at each node)
  inline int numberCutsActive() const
  { return numberCutsActive_;};
  void setNumberCutsActive(int value)
  { numberCutsActive_ = value;};
  void incrementNumberCutsActive(int value=1)
  { numberCutsActive_ += value;};
  //@@}
  
private:
  /// The client model
  SbbModel *model_;

  // The CglCutGenerator object
  CglCutGenerator * generator_;

  /** Number of nodes between calls to the CglCutGenerator::generateCuts
     routine.
  */
  int whenCutGenerator_;

  /// Name of generator
  char * generatorName_;

  /// Whether to call the generator in the normal place
  bool normal_;

  /// Whether to call the generator when a new solution is found
  bool atSolution_;

  /// Whether to call generator when a subproblem is found to be infeasible
  bool whenInfeasible_;
  
  /// Number times cut generator entered
  int numberTimes_;
  /// Total number of cuts added
  int numberCuts_;
  /// Total number of cuts active after (at end of n cut passes at each node)
  int numberCutsActive_;
};

#endif
@


1.1.1.1
log
@COIN code from IBM hosted repository (before move to informs)
@
text
@@
