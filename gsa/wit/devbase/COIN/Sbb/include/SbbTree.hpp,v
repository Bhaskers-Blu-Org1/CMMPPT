head	1.2;
access;
symbols
	beforeInforms:1.1.1.1
	Start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2005.04.12.18.44.44;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.22.18.52.43;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.22.18.52.43;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Removing Sbb
@
text
@@


1.1
log
@Initial revision
@
text
@a0 90
// Copyright (C) 2004, International Business Machines
// Corporation and others.  All Rights Reserved.
#ifndef SbbTree_H
#define SbbTree_H
using namespace std;


#include <vector>

/*! \class tree
    \brief Implementation of live set as a heap.

    This class is used to hold the set of live nodes in the search tree.
*/

class SbbTree {

public:

  // Default Constructor 
  SbbTree ();

  // Copy constructor 
  SbbTree ( const SbbTree & rhs);
  // = operator
  SbbTree & operator=(const SbbTree & rhs);
   
  virtual ~SbbTree();

  /// Clone
  virtual SbbTree * clone() const;

/*! \name Heap access and maintenance methods */
//@@{

  /// Set comparison function and resort heap
  void setComparison(SbbCompareBase  &compare);

  /// Return the top node of the heap 
  virtual SbbNode * top();

  /// Add a node to the heap
  virtual void push(SbbNode * x);

  /// Remove the top node from the heap
  virtual void pop() ;

//@@}
/*! \name vector methods */
//@@{

  /// Test if empty *** note may be overridden
  virtual bool empty() ;

  /// Return size
  inline int size() const
  { return nodes_.size();};

  /// [] operator
  inline SbbNode * operator [] (int i) const
  { return nodes_[i];};

  /// Return a node pointer
  inline SbbNode * nodePointer (int i) const
  { return nodes_[i];};

//@@}

/*! \name Search tree maintenance */
//@@{

/*! \brief Prune the tree using an objective function cutoff

  This routine removes all nodes with objective worst than the
  specified cutoff value.
*/

  void cleanTree(SbbModel * model, double cutoff);

  /// We may have got an intelligent tree so give it one more chance
  virtual void endSearch() {};
//@@}
protected:
  std::vector <SbbNode *> nodes_;
  SbbCompare comparison_;	///> Sort function for heap ordering.


};
#endif

@


1.1.1.1
log
@COIN code from IBM hosted repository (before move to informs)
@
text
@@
