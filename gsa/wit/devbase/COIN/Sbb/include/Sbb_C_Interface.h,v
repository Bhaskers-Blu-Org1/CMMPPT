head	1.2;
access;
symbols
	beforeInforms:1.1.1.1
	Start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2005.04.12.18.44.44;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.22.18.52.43;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.22.18.52.43;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Removing Sbb
@
text
@@


1.1
log
@Initial revision
@
text
@a0 381
/* Copyright (C) 2004 International Business Machines
   Corporation and others.  All Rights Reserved.*/
#ifndef SbbModelC_H
#define SbbModelC_H

/* include all defines and ugly stuff */
#include "Coin_C_defines.h"

/** This is a first "C" interface to Sbb.
    It is mostly similar to the "C" interface to Clp and
    was contributed by Bob Entriken.
*/

#ifdef __cplusplus
extern "C"{
#endif
  
  /**@@name Constructors and destructor 
     These do not have an exact analogue in C++.
     The user does not need to know structure of Sbb_Model.
     
     For all functions outside this group there is an exact C++
     analogue created by taking the first parameter out, removing the Sbb_
     from name and applying the method to an object of type ClpSimplex.
  */
  /*@@{*/

  /** Default constructor */
  COINLIBAPI Sbb_Model * COINLINKAGE Sbb_newModel(void);
  /** Destructor */
  COINLIBAPI void COINLINKAGE Sbb_deleteModel(Sbb_Model * model);
  /*@@}*/

  /**@@name Load model - loads some stuff and initializes others */
  /*@@{*/
  /** Loads a problem (the constraints on the
      rows are given by lower and upper bounds). If a pointer is NULL then the
      following values are the default:
      <ul>
      <li> <code>colub</code>: all columns have upper bound infinity
      <li> <code>collb</code>: all columns have lower bound 0 
      <li> <code>rowub</code>: all rows have upper bound infinity
      <li> <code>rowlb</code>: all rows have lower bound -infinity
      <li> <code>obj</code>: all variables have 0 objective coefficient
      </ul>
  */
  /** Just like the other loadProblem() method except that the matrix is
	given in a standard column major ordered format (without gaps). */
  COINLIBAPI void COINLINKAGE Sbb_loadProblem (Sbb_Model * model,  const int numcols, const int numrows,
		      const CoinBigIndex * start, const int* index,
		      const double* value,
		      const double* collb, const double* colub,   
		      const double* obj,
		      const double* rowlb, const double* rowub);
  /** Read an mps file from the given filename */
  COINLIBAPI int COINLINKAGE Sbb_readMps(Sbb_Model * model,const char *filename);
  /** Write an mps file from the given filename */
  COINLIBAPI void COINLINKAGE Sbb_writeMps(Sbb_Model * model,const char *filename);  /** Copy in integer informations */
  /** Copy in integer informations */
  COINLIBAPI void COINLINKAGE Sbb_copyInIntegerInformation(Sbb_Model * model,const char * information);
  /** Drop integer informations */
  COINLIBAPI void COINLINKAGE Sbb_deleteIntegerInformation(Sbb_Model * model);
  /** Resizes rim part of model  */
  COINLIBAPI void COINLINKAGE Sbb_resize (Sbb_Model * model, int newNumberRows, int newNumberColumns);
  /** Deletes rows */
  COINLIBAPI void COINLINKAGE Sbb_deleteRows(Sbb_Model * model, int number, const int * which);
  /** Add rows */
  COINLIBAPI void COINLINKAGE Sbb_addRows(Sbb_Model * model, int number, const double * rowLower, 
	       const double * rowUpper,
	       const int * rowStarts, const int * columns,
	       const double * elements);

  /** Deletes columns */
  COINLIBAPI void COINLINKAGE Sbb_deleteColumns(Sbb_Model * model, int number, const int * which);
  /** Add columns */
  COINLIBAPI void COINLINKAGE Sbb_addColumns(Sbb_Model * model, int number, const double * columnLower, 
		  const double * columnUpper,
		  const double * objective,
		  const int * columnStarts, const int * rows,
		  const double * elements);
  /** Drops names - makes lengthnames 0 and names empty */
  COINLIBAPI void COINLINKAGE Sbb_dropNames(Sbb_Model * model);
  /** Copies in names */
  COINLIBAPI void COINLINKAGE Sbb_copyNames(Sbb_Model * model, const char * const * rowNames,
		 const char * const * columnNames);
  
  /*@@}*/
  /**@@name gets and sets - you will find some synonyms at the end of this file */
  /*@@{*/ 
  /** Number of rows */
  COINLIBAPI int COINLINKAGE Sbb_numberRows(Sbb_Model * model);
  /** Number of columns */
  COINLIBAPI int COINLINKAGE Sbb_numberColumns(Sbb_Model * model);
  /** Primal tolerance to use */
  COINLIBAPI double COINLINKAGE Sbb_primalTolerance(Sbb_Model * model);
  COINLIBAPI void COINLINKAGE Sbb_setPrimalTolerance(Sbb_Model * model,  double value) ;
  /** Dual tolerance to use */
  COINLIBAPI double COINLINKAGE Sbb_dualTolerance(Sbb_Model * model);
  COINLIBAPI void COINLINKAGE Sbb_setDualTolerance(Sbb_Model * model,  double value) ;
  /* Integer tolerance to use */
  COINLIBAPI double COINLINKAGE Sbb_integerTolerance(Sbb_Model * model);
  COINLIBAPI void COINLINKAGE Sbb_setIntegerTolerance(Sbb_Model * model,  double value);
  /** Dual objective limit */
  COINLIBAPI double COINLINKAGE Sbb_dualObjectiveLimit(Sbb_Model * model);
  COINLIBAPI void COINLINKAGE Sbb_setDualObjectiveLimit(Sbb_Model * model, double value);
  /** Objective offset */
  COINLIBAPI double COINLINKAGE Sbb_objectiveOffset(Sbb_Model * model);
  COINLIBAPI void COINLINKAGE Sbb_setObjectiveOffset(Sbb_Model * model, double value);
  /** Fills in array with problem name  */
  COINLIBAPI void COINLINKAGE Sbb_problemName(Sbb_Model * model, int maxNumberCharacters, char * array);
  /** Sets problem name.  Must have \0 at end.  */
  COINLIBAPI int COINLINKAGE 
  Sbb_setProblemName(Sbb_Model * model, int maxNumberCharacters, char * array);
  /** Number of iterations */
  COINLIBAPI int COINLINKAGE Sbb_numberIterations(Sbb_Model * model);
  COINLIBAPI void COINLINKAGE Sbb_setNumberIterations(Sbb_Model * model, int numberIterations);
  /** Maximum number of iterations */
  COINLIBAPI int Sbb_maximumIterations(Sbb_Model * model);
  COINLIBAPI void COINLINKAGE Sbb_setMaximumIterations(Sbb_Model * model, int value);
  /** Maximum time in seconds (from when set called) */
  COINLIBAPI double COINLINKAGE Sbb_maximumSeconds(Sbb_Model * model);
  COINLIBAPI void COINLINKAGE Sbb_setMaximumSeconds(Sbb_Model * model, double value);
  /** Returns true if hit maximum iterations (or time) */
  COINLIBAPI int COINLINKAGE Sbb_hitMaximumIterations(Sbb_Model * model);
  /** Status of problem:
      0 - optimal
      1 - primal infeasible
      2 - dual infeasible
      3 - stopped on iterations etc
      4 - stopped due to errors
  */
  COINLIBAPI int COINLINKAGE Sbb_status(Sbb_Model * model);
  /** Set problem status */
  COINLIBAPI void COINLINKAGE Sbb_setProblemStatus(Sbb_Model * model, int problemStatus);
  /** Secondary status of problem - may get extended
      0 - none
      1 - primal infeasible because dual limit reached
      2 - scaled problem optimal - unscaled has primal infeasibilities
      3 - scaled problem optimal - unscaled has dual infeasibilities
      4 - scaled problem optimal - unscaled has both dual and primal infeasibilities
  */
  COINLIBAPI int COINLINKAGE Sbb_secondaryStatus(Sbb_Model * model);
  COINLIBAPI void COINLINKAGE Sbb_setSecondaryStatus(Sbb_Model * model, int status);
  /** Direction of optimization (1 - minimize, -1 - maximize, 0 - ignore */
  COINLIBAPI double COINLINKAGE Sbb_optimizationDirection(Sbb_Model * model);
  COINLIBAPI void COINLINKAGE Sbb_setOptimizationDirection(Sbb_Model * model, double value);
  /** Primal row solution */
  COINLIBAPI double * COINLINKAGE Sbb_primalRowSolution(Sbb_Model * model);
  /** Primal column solution */
  COINLIBAPI double * COINLINKAGE Sbb_primalColumnSolution(Sbb_Model * model);
  /** Dual row solution */
  COINLIBAPI double * COINLINKAGE Sbb_dualRowSolution(Sbb_Model * model);
  /** Reduced costs */
  COINLIBAPI double * COINLINKAGE Sbb_dualColumnSolution(Sbb_Model * model);
  /** Row lower */
  COINLIBAPI double* COINLINKAGE Sbb_rowLower(Sbb_Model * model);
  /** Row upper  */
  COINLIBAPI double* COINLINKAGE Sbb_rowUpper(Sbb_Model * model);
  /** Objective */
  COINLIBAPI double * COINLINKAGE Sbb_objective(Sbb_Model * model);            
  /** Column Lower */
  COINLIBAPI double * COINLINKAGE Sbb_columnLower(Sbb_Model * model);
  /** Column Upper */
  COINLIBAPI double * COINLINKAGE Sbb_columnUpper(Sbb_Model * model);
  /** Number of elements in matrix */
  COINLIBAPI int COINLINKAGE Sbb_getNumElements(Sbb_Model * model);
  /** Column starts in matrix */
  COINLIBAPI const CoinBigIndex * COINLINKAGE Sbb_getVectorStarts(Sbb_Model * model); 
  /** Row indices in matrix */
  COINLIBAPI const int * COINLINKAGE Sbb_getIndices(Sbb_Model * model); 
  /** Column vector lengths in matrix */
  COINLIBAPI const int * COINLINKAGE Sbb_getVectorLengths(Sbb_Model * model); 
  /** Element values in matrix */
  COINLIBAPI const double * COINLINKAGE Sbb_getElements(Sbb_Model * model); 
  /** Objective value */
  COINLIBAPI double COINLINKAGE Sbb_objectiveValue(Sbb_Model * model);
  /** Integer information */
  COINLIBAPI char * COINLINKAGE Sbb_integerInformation(Sbb_Model * model);
  /** Infeasibility/unbounded ray (NULL returned if none/wrong)
      Up to user to use delete [] on these arrays.  */
  COINLIBAPI double * COINLINKAGE Sbb_infeasibilityRay(Sbb_Model * model);
  COINLIBAPI double * COINLINKAGE Sbb_unboundedRay(Sbb_Model * model);
  /** See if status array exists (partly for OsiClp) */
  COINLIBAPI int COINLINKAGE Sbb_statusExists(Sbb_Model * model);
  /** Return address of status array (char[numberRows+numberColumns]) */
  COINLIBAPI void  COINLINKAGE Sbb_getBasisStatus(Sbb_Model * model, int * cstat, int * rstat);
  /** Copy in status vector */
  COINLIBAPI void COINLINKAGE setBasisStatus(Sbb_Model * model, int * cstat, int * rstat);
  
  /** User pointer for whatever reason */
  COINLIBAPI void COINLINKAGE Sbb_setUserPointer (Sbb_Model * model, void * pointer);
  COINLIBAPI void * COINLINKAGE Sbb_getUserPointer (Sbb_Model * model);
  /*@@}*/
  /**@@name Message handling.  Call backs are handled by ONE function */
  /*@@{*/
  /** Pass in Callback function.
   Message numbers up to 1000000 are Clp, Coin ones have 1000000 added */
  COINLIBAPI void COINLINKAGE Sbb_registerCallBack(Sbb_Model * model, 
						   sbb_callback userCallBack);
  /** Unset Callback function */
  COINLIBAPI void COINLINKAGE Sbb_clearCallBack(Sbb_Model * model);
  /** Amount of print out:
      0 - none
      1 - just final
      2 - just factorizations
      3 - as 2 plus a bit more
      4 - verbose
      above that 8,16,32 etc just for selective debug
  */
  COINLIBAPI void COINLINKAGE Sbb_setLogLevel(Sbb_Model * model, int value);
  COINLIBAPI int COINLINKAGE Sbb_logLevel(Sbb_Model * model);
  /** length of names (0 means no names0 */
  COINLIBAPI int COINLINKAGE Sbb_lengthNames(Sbb_Model * model);
  /** Fill in array (at least lengthNames+1 long) with a row name */
  COINLIBAPI void COINLINKAGE Sbb_rowName(Sbb_Model * model, int iRow, char * name);
  /** Fill in array (at least lengthNames+1 long) with a column name */
  COINLIBAPI void COINLINKAGE Sbb_columnName(Sbb_Model * model, int iColumn, char * name);

  /*@@}*/


  /**@@name Functions most useful to user */
  /*@@{*/
  /** General solve algorithm which can do presolve.
      See  ClpSolve.hpp for options
   */
  COINLIBAPI int COINLINKAGE Sbb_initialSolve(Sbb_Model * model);
  /* General solve algorithm which can do presolve.
     See  SbbModel.hpp for options
  */
  COINLIBAPI int COINLINKAGE Sbb_branchAndBound(Sbb_Model * model);
  /** Dual initial solve */
  COINLIBAPI int COINLINKAGE Sbb_initialDualSolve(Sbb_Model * model);
  /** Primal initial solve */
  COINLIBAPI int COINLINKAGE Sbb_initialPrimalSolve(Sbb_Model * model);
  /** Dual algorithm - see ClpSimplexDual.hpp for method */
  COINLIBAPI int COINLINKAGE Sbb_dual(Sbb_Model * model, int ifValuesPass);
  /** Primal algorithm - see ClpSimplexPrimal.hpp for method */
  COINLIBAPI int COINLINKAGE Sbb_primal(Sbb_Model * model, int ifValuesPass);
  /** Sets or unsets scaling, 0 -off, 1 equilibrium, 2 geometric, 3, auto, 4 dynamic(later) */
  COINLIBAPI void COINLINKAGE Sbb_scaling(Sbb_Model * model, int mode);
  /** Gets scalingFlag */
  COINLIBAPI int COINLINKAGE Sbb_scalingFlag(Sbb_Model * model);
  /** Crash - at present just aimed at dual, returns
      -2 if dual preferred and crash basis created
      -1 if dual preferred and all slack basis preferred
       0 if basis going in was not all slack
       1 if primal preferred and all slack basis preferred
       2 if primal preferred and crash basis created.
       
       if gap between bounds <="gap" variables can be flipped

       If "pivot" is
       0 No pivoting (so will just be choice of algorithm)
       1 Simple pivoting e.g. gub
       2 Mini iterations
  */
  COINLIBAPI int COINLINKAGE Sbb_crash(Sbb_Model * model, double gap,int pivot);
  /*@@}*/


  /**@@name most useful gets and sets */
  /*@@{*/ 
  /** If problem is primal feasible */
  COINLIBAPI int COINLINKAGE Sbb_primalFeasible(Sbb_Model * model);
  /** If problem is dual feasible */
  COINLIBAPI int COINLINKAGE Sbb_dualFeasible(Sbb_Model * model);
  /** Dual bound */
  COINLIBAPI double COINLINKAGE Sbb_dualBound(Sbb_Model * model);
  COINLIBAPI void COINLINKAGE Sbb_setDualBound(Sbb_Model * model, double value);
  /** Infeasibility cost */
  COINLIBAPI double COINLINKAGE Sbb_infeasibilityCost(Sbb_Model * model);
  COINLIBAPI void COINLINKAGE Sbb_setInfeasibilityCost(Sbb_Model * model, double value);
  /** Perturbation:
      50  - switch on perturbation
      100 - auto perturb if takes too long (1.0e-6 largest nonzero)
      101 - we are perturbed
      102 - don't try perturbing again
      default is 100
      others are for playing
  */
  COINLIBAPI int COINLINKAGE Sbb_perturbation(Sbb_Model * model);
  COINLIBAPI void COINLINKAGE Sbb_setPerturbation(Sbb_Model * model, int value);
  /** Current (or last) algorithm */
  COINLIBAPI int COINLINKAGE Sbb_algorithm(Sbb_Model * model); 
  /** Set algorithm */
  COINLIBAPI void COINLINKAGE Sbb_setAlgorithm(Sbb_Model * model, int value);
  /** Sum of dual infeasibilities */
  COINLIBAPI double COINLINKAGE Sbb_sumDualInfeasibilities(Sbb_Model * model); 
  /** Number of dual infeasibilities */
  COINLIBAPI int COINLINKAGE Sbb_numberDualInfeasibilities(Sbb_Model * model); 
  /** Sum of primal infeasibilities */
  COINLIBAPI double COINLINKAGE Sbb_sumPrimalInfeasibilities(Sbb_Model * model); 
  /** Number of primal infeasibilities */
  COINLIBAPI int COINLINKAGE Sbb_numberPrimalInfeasibilities(Sbb_Model * model); 
  /** Save model to file, returns 0 if success.  This is designed for
      use outside algorithms so does not save iterating arrays etc.
  It does not save any messaging information. 
  Does not save scaling values.
  It does not know about all types of virtual functions.
  */
  COINLIBAPI int COINLINKAGE Sbb_saveModel(Sbb_Model * model, const char * fileName);
  /** Restore model from file, returns 0 if success,
      deletes current model */
  COINLIBAPI int COINLINKAGE Sbb_restoreModel(Sbb_Model * model, const char * fileName);
  
  /** Just check solution (for external use) - sets sum of
      infeasibilities etc */
  COINLIBAPI void COINLINKAGE Sbb_checkSolution(Sbb_Model * model);
  /*@@}*/

  /******************** End of most useful part **************/
  /**@@name gets and sets - some synonyms */
  /*@@{*/ 
  /** Number of rows */
  COINLIBAPI int COINLINKAGE Sbb_getNumRows(Sbb_Model * model);
  /** Number of columns */
  COINLIBAPI int COINLINKAGE Sbb_getNumCols(Sbb_Model * model);
  /** Number of iterations */
  COINLIBAPI int COINLINKAGE Sbb_getIterationCount(Sbb_Model * model);
  /** Are there a numerical difficulties? */
  COINLIBAPI int COINLINKAGE Sbb_isAbandoned(Sbb_Model * model);
  /** Is optimality proven? */
  COINLIBAPI int COINLINKAGE Sbb_isProvenOptimal(Sbb_Model * model);
  /** Is primal infeasiblity proven? */
  COINLIBAPI int COINLINKAGE Sbb_isProvenPrimalInfeasible(Sbb_Model * model);
  /** Is dual infeasiblity proven? */
  COINLIBAPI int COINLINKAGE Sbb_isProvenDualInfeasible(Sbb_Model * model);
  /** Is the given primal objective limit reached? */
  COINLIBAPI int COINLINKAGE Sbb_isPrimalObjectiveLimitReached(Sbb_Model * model) ;
  /** Is the given dual objective limit reached? */
  COINLIBAPI int COINLINKAGE Sbb_isDualObjectiveLimitReached(Sbb_Model * model) ;
  /** Iteration limit reached? */
  COINLIBAPI int COINLINKAGE Sbb_isIterationLimitReached(Sbb_Model * model);
  /** Direction of optimization (1 - minimize, -1 - maximize, 0 - ignore */
  COINLIBAPI double COINLINKAGE Sbb_getObjSense(Sbb_Model * model);
  /** Primal row solution */
  COINLIBAPI const double * COINLINKAGE Sbb_getRowActivity(Sbb_Model * model);
  /** Primal column solution */
  COINLIBAPI const double * COINLINKAGE Sbb_getColSolution(Sbb_Model * model);
  COINLIBAPI void COINLINKAGE Sbb_setColSolution(Sbb_Model * model, const double * input);
  /** Dual row solution */
  COINLIBAPI const double * COINLINKAGE Sbb_getRowPrice(Sbb_Model * model);
  /** Reduced costs */
  COINLIBAPI const double * COINLINKAGE Sbb_getReducedCost(Sbb_Model * model);
  /** Row lower */
  COINLIBAPI const double* COINLINKAGE Sbb_getRowLower(Sbb_Model * model);
  /** Row upper  */
  COINLIBAPI const double* COINLINKAGE Sbb_getRowUpper(Sbb_Model * model);
  /** Objective */
  COINLIBAPI const double * COINLINKAGE Sbb_getObjCoefficients(Sbb_Model * model); 
  /** Column Lower */
  COINLIBAPI const double * COINLINKAGE Sbb_getColLower(Sbb_Model * model);
  /** Column Upper */
  COINLIBAPI const double * COINLINKAGE Sbb_getColUpper(Sbb_Model * model);
  /** Objective value */
  COINLIBAPI double COINLINKAGE Sbb_getObjValue(Sbb_Model * model);
  /** Print the model */
  COINLIBAPI void COINLINKAGE Sbb_printModel(Sbb_Model * model, const char * prefix);
  /** Determine whether the variable at location i is integer restricted */
  COINLIBAPI int COINLINKAGE Sbb_isInteger(Sbb_Model * model, int i);
  /** Return CPU time */
  COINLIBAPI double COINLINKAGE Sbb_cpuTime(Sbb_Model * model);
  /** Number of nodes explored in B&B tree */
  COINLIBAPI int COINLINKAGE Sbb_getNodeCount(Sbb_Model * model);
  /** Return a copy of this model */
  COINLIBAPI Sbb_Model * COINLINKAGE Sbb_clone(Sbb_Model * model);
  /** Set this the variable to be continuous */
  COINLIBAPI Sbb_Model * COINLINKAGE Sbb_setContinuous(Sbb_Model * model, int iColumn);
  /* Add an SOS constraint to the model */
  COINLIBAPI void  COINLINKAGE Sbb_addSOS(Sbb_Model * model, int numberMembers,
             const int * which, const double * weights, int identifier, int type);
  /* Delete all object information */
  COINLIBAPI void  COINLINKAGE Sbb_deleteObjects(Sbb_Model * model);
  /* Print the solution */
  COINLIBAPI void  COINLINKAGE Sbb_printSolution(Sbb_Model * model);
  /*@@}*/
#ifdef __cplusplus
	  }
#endif
#endif
@


1.1.1.1
log
@COIN code from IBM hosted repository (before move to informs)
@
text
@@
