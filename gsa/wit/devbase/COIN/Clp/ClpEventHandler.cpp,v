head	1.1;
branch	1.1.1;
access;
symbols
	beforeInforms:1.1.1.1
	Start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2004.12.22.18.52.13;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.22.18.52.13;	author fasano;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@// Copyright (C) 2004, International Business Machines
// Corporation and others.  All Rights Reserved.

#include "CoinPragma.hpp"

#include "ClpEventHandler.hpp"
#include "ClpSimplex.hpp"

//#############################################################################
// Constructors / Destructor / Assignment
//#############################################################################

//-------------------------------------------------------------------
// Default Constructor 
//-------------------------------------------------------------------
ClpEventHandler::ClpEventHandler (ClpSimplex * model) :
  model_(model)
{

}

//-------------------------------------------------------------------
// Copy constructor 
//-------------------------------------------------------------------
ClpEventHandler::ClpEventHandler (const ClpEventHandler & rhs) 
  : model_(rhs.model_)
{  
}

//-------------------------------------------------------------------
// Destructor 
//-------------------------------------------------------------------
ClpEventHandler::~ClpEventHandler ()
{
}

//----------------------------------------------------------------
// Assignment operator 
//-------------------------------------------------------------------
ClpEventHandler &
ClpEventHandler::operator=(const ClpEventHandler& rhs)
{
  if (this != &rhs) {
    model_ = rhs.model_;
  }
  return *this;
}
// Clone
ClpEventHandler * 
ClpEventHandler::clone() const
{
  return new ClpEventHandler(*this);
}
// Event
int
ClpEventHandler::event(Event whichEvent)
{
  return -1; // do nothing
}
/* set model. */
void 
ClpEventHandler::setSimplex(ClpSimplex * model)
{
  model_= model;
}


@


1.1.1.1
log
@COIN code from IBM hosted repository (before move to informs)
@
text
@@
