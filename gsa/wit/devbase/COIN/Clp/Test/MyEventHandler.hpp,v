head	1.1;
branch	1.1.1;
access;
symbols
	beforeInforms:1.1.1.1
	Start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2004.12.22.18.52.24;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.22.18.52.24;	author fasano;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@// Copyright (C) 2004, International Business Machines
// Corporation and others.  All Rights Reserved.
#ifndef MyEventHandler_H
#define MyEventHandler_H

#include "ClpEventHandler.hpp"

/** This is so user can trap events and do useful stuff.  
    This is used in Clp/Test/unitTest.cpp

    ClpSimplex model_ is available as well as anything else you care 
    to pass in
*/

class MyEventHandler : public ClpEventHandler {
  
public:
  /**@@name Overrides */
  //@@{
  virtual int event(Event whichEvent);
  //@@}

  /**@@name Constructors, destructor etc*/
  //@@{
  /** Default constructor. */
  MyEventHandler();
  /// Constructor with pointer to model (redundant as setEventHandler does)
  MyEventHandler(ClpSimplex * model);
  /** Destructor */
  virtual ~MyEventHandler();
  /** The copy constructor. */
  MyEventHandler(const MyEventHandler & rhs);
  /// Assignment
  MyEventHandler& operator=(const MyEventHandler & rhs);
  /// Clone
  virtual ClpEventHandler * clone() const ;
  //@@}
   
    
protected:
  // data goes here
};

#endif
@


1.1.1.1
log
@COIN code from IBM hosted repository (before move to informs)
@
text
@@
