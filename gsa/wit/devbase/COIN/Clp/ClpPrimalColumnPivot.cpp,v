head	1.1;
branch	1.1.1;
access;
symbols
	beforeInforms:1.1.1.1
	Start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2004.12.22.18.52.15;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.22.18.52.15;	author fasano;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@// Copyright (C) 2002, International Business Machines
// Corporation and others.  All Rights Reserved.

#include "CoinPragma.hpp"

#include "ClpSimplex.hpp"
#include "ClpPrimalColumnPivot.hpp"

//#############################################################################
// Constructors / Destructor / Assignment
//#############################################################################

//-------------------------------------------------------------------
// Default Constructor 
//-------------------------------------------------------------------
ClpPrimalColumnPivot::ClpPrimalColumnPivot () :
  model_(NULL), 
  type_(-1),
  looksOptimal_(false)
{

}

//-------------------------------------------------------------------
// Copy constructor 
//-------------------------------------------------------------------
ClpPrimalColumnPivot::ClpPrimalColumnPivot (const ClpPrimalColumnPivot & source) :
  model_(source.model_),
  type_(source.type_),
  looksOptimal_(source.looksOptimal_)
{  

}

//-------------------------------------------------------------------
// Destructor 
//-------------------------------------------------------------------
ClpPrimalColumnPivot::~ClpPrimalColumnPivot ()
{

}

//----------------------------------------------------------------
// Assignment operator 
//-------------------------------------------------------------------
ClpPrimalColumnPivot &
ClpPrimalColumnPivot::operator=(const ClpPrimalColumnPivot& rhs)
{
  if (this != &rhs) {
    type_ = rhs.type_;
    model_ = rhs.model_;
    looksOptimal_ = rhs.looksOptimal_;
  }
  return *this;
}
void 
ClpPrimalColumnPivot::saveWeights(ClpSimplex * model,int mode)
{
  model_=model;
}
// checks accuracy and may re-initialize (may be empty)

void 
ClpPrimalColumnPivot::updateWeights(CoinIndexedVector * input)
{
}

// Gets rid of all arrays
void 
ClpPrimalColumnPivot::clearArrays()
{
}
/* Returns number of extra columns for sprint algorithm - 0 means off.
   Also number of iterations before recompute
*/
int 
ClpPrimalColumnPivot::numberSprintColumns(int & numberIterations) const
{
  return 0;
}
// Switch off sprint idea
void 
ClpPrimalColumnPivot::switchOffSprint()
{
}
@


1.1.1.1
log
@COIN code from IBM hosted repository (before move to informs)
@
text
@@
