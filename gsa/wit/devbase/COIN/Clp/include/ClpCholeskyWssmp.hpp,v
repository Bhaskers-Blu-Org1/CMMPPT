head	1.1;
branch	1.1.1;
access;
symbols
	beforeInforms:1.1.1.1
	Start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2004.12.22.18.52.18;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.22.18.52.18;	author fasano;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@// Copyright (C) 2003, International Business Machines
// Corporation and others.  All Rights Reserved.
#ifndef ClpCholeskyWssmp_H
#define ClpCholeskyWssmp_H

#include "ClpCholeskyBase.hpp"
class ClpMatrixBase;
class ClpCholeskyDense;


/** Wssmp class for Clp Cholesky factorization

*/
class ClpCholeskyWssmp : public ClpCholeskyBase {
  
public:
   /**@@name Virtual methods that the derived classes provides  */
   //@@{
  /** Orders rows and saves pointer to matrix.and model.
   Returns non-zero if not enough memory */
  virtual int order(ClpInterior * model) ;
  /** Does Symbolic factorization given permutation.
      This is called immediately after order.  If user provides this then
      user must provide factorize and solve.  Otherwise the default factorization is used
      returns non-zero if not enough memory */
  virtual int symbolic();
  /** Factorize - filling in rowsDropped and returning number dropped.
      If return code negative then out of memory */
  virtual int factorize(const double * diagonal, int * rowsDropped) ;
  /** Uses factorization to solve. */
  virtual void solve (double * region) ;
  //@@}


  /**@@name Constructors, destructor */
  //@@{
  /** Constructor which has dense columns activated.
      Default is off. */
  ClpCholeskyWssmp(int denseThreshold=-1);
  /** Destructor  */
  virtual ~ClpCholeskyWssmp();
  // Copy
  ClpCholeskyWssmp(const ClpCholeskyWssmp&);
  // Assignment
  ClpCholeskyWssmp& operator=(const ClpCholeskyWssmp&);
  /// Clone
  virtual ClpCholeskyBase * clone() const ;
  //@@}
   
    
private:
  /**@@name Data members */
   //@@{
  //@@}
};

#endif
@


1.1.1.1
log
@COIN code from IBM hosted repository (before move to informs)
@
text
@@
