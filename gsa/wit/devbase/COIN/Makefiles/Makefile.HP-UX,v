head	1.1;
branch	1.1.1;
access;
symbols
	beforeInforms:1.1.1.1
	Start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2004.12.22.18.52.37;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.22.18.52.37;	author fasano;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@
# The first order of business is to attempt to figure out what programming
# environment we're using, and what the appropriate command names are.

pathsearch = $(firstword $(wildcard $(addsuffix /$(1), \
	       $(subst :, ,$(PATH)))))

# If the user hasn't specified the programming environment up front, try to
# figure it out. First up, check for HP compiler. If it's present, use
# it (after all, someone paid real money to acquire it). For the HP compiler
# 'aCC -Ae' is correct for C compilation, aCC for C++ compilation.

# If HP's compiler isn't present, assume the GCC is available (after all, we're
# running Gnu make).  Do we want cc or gcc as the C compilation command? If gcc
# exists, use it.

# Yes, FF is correct --- see Makefile.rules.

HP-UX_PROGENV = HPaCC
# HP-UX_PROGENV = GCC

ifeq ($(origin HP-UX_PROGENV),undefined)
  testcmd := $(call pathsearch,aCC)
  ifneq ($(testcmd),)
    HP-UX_PROGENV = HPaCC
  endif
endif

HP-UX_PROGENV ?= GCC

####

ifeq ($(HP-UX_PROGENV),HPaCC)
  CC := aCC -Ae
  CXX := aCC -AA
  FF := nonexistent
  DEPCXX := $(CXX) +make -E
  DEPCC := $(CC) +make -E
endif

ifeq ($(HP-UX_PROGENV),GCC)
  CC := gcc
  CXX := g++
  FF := g77
  DEPCXX := $(CXX) -MM
  DEPCC := $(CC) -MM
  #STDCPP_DIR = $(subst /bin/$(CXX),/lib,$(call pathsearch,$(CXX)))
  #SYSLD += -L$(STDCPP_DIR) -Wl,-R,$(STDCPP_DIR) -lstdc++
  #SYSLD += -Wl,-R,$(STDCPP_DIR) -lstdc++ -lnsl -lsocket
endif

CP := /usr/bin/cp -p
LN := ln -s

###############################################################################

ifeq ($(HP-UX_PROGENV),HPaCC)
  ifeq ($(OptLevel),-O)
      OPTFLAG := +O3
  else
      OPTFLAG := $(OptLevel)
  endif
  compilerOptFlags := -O -O2 +O +O1 +O2 +O3 +O4
else
  ifeq ($(OptLevel),-O)
      OPTFLAG := -O6
  else
      OPTFLAG := $(OptLevel)
  endif
  compilerOptFlags := -O -O1 -O2 -O3 -O4 -O5 -O6
endif

###############################################################################
# It's OK to specify this even if static executable is created.
# Used in Osi/Test/Makefile.Test to link unitTest; perhaps elsewhere.


ifeq ($(HP-UX_PROGENV),HPaCC)
    SHLINKPREFIX :=
    SYSLD += 
    STATICSYSLD += -Bstatic
    ifeq (${LibType},SHARED)
        LD  := $(CXX) -o
        LIBLDFLAGS := -b
        LIBEXT := .so
        CXXFLAGS += +z
    else
        LD  := ar -q
        LIBLDFLAGS :=
        LIBEXT := .a
        CXXFLAGS +=
    endif

else

    SHLINKPREFIX := 
    SYSLD += 
    STATICSYSLD += -static
    ifeq (${LibType},SHARED)
        LD  := g++ -o
        LIBLDFLAGS := -shared
        LIBEXT := .so
        CXXFLAGS += -fPIC
    else
        LD  := ar -q
        LIBLDFLAGS :=
        LIBEXT := .a
        CXXFLAGS +=
    endif

endif

EFENCE := -lefence
@


1.1.1.1
log
@COIN code from IBM hosted repository (before move to informs)
@
text
@@
