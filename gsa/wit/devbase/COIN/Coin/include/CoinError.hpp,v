head	1.2;
access;
symbols
	beforeInforms:1.1.1.1
	Start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2005.04.12.18.55.35;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.22.18.52.29;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.22.18.52.29;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Updated from Informs COIN repository Apr 12 2005
@
text
@// Copyright (C) 2000, International Business Machines
// Corporation and others.  All Rights Reserved.
#ifndef CoinError_H
#define CoinError_H

#include <string>
#include <iostream>
#include <cassert>
//-------------------------------------------------------------------
//
// Error class used to throw exceptions
//
// Errors contain:
//
//-------------------------------------------------------------------

/** Error Class thrown by an exception

This class is used when exceptions are thrown.
It contains:
  <ul>
  <li>message text
  <li>name of method throwing exception
  <li>name of class throwing exception or hint
  <li>name of file if assert
  <li>line number
  </ul>
  For asserts class=> optional hint
*/
class CoinError  {
   friend void CoinErrorUnitTest();

public:
    
  //-------------------------------------------------------------------
  // Get methods
  //-------------------------------------------------------------------   
  /**@@name Get error attributes */
  //@@{
    /// get message text
    inline const std::string & message() const 
    { return message_; }
    /// get name of method instantiating error
    inline const std::string & methodName() const 
    { return method_;  }
    /// get name of class instantiating error (or hint for assert)
    inline const std::string & className() const 
    { return class_;   }
    /// get name of file for assert
    inline const std::string & fileName() const 
    { return file_;  }
    /// get line number of assert (-1 if not assert)
    inline int lineNumber() const 
    { return lineNumber_;   }
    /// Just print (for asserts)
    void print() const;
  //@@}
  
    
  /**@@name Constructors and destructors */
  //@@{
    /// Default Constructor 
    CoinError ()
      :
      message_(),
      method_(),
      class_(),
      file_(),
      lineNumber_(-1)
    {
      // nothing to do here
    }
  
    /// Alternate Constructor 
    CoinError ( 
      std::string message, 
      std::string methodName, 
      std::string className)
      :
      message_(message),
      method_(methodName),
      class_(className),
      file_(),
      lineNumber_(-1)
    {
      // nothing to do here
    }

    /// Other alternate Constructor 
    CoinError ( 
      const char * message, 
      const char * methodName, 
      const char * className)
      :
      message_(message),
      method_(methodName),
      class_(className),
      file_(),
      lineNumber_(-1)
    {
      // nothing to do here
    }

    /// Other alternate Constructor for assert
    CoinError ( 
      const char * assertion, 
      const char * methodName, 
      const char * hint,
      const char * fileName, 
      int line);

    /// Copy constructor 
    CoinError (const CoinError & source);

    /// Assignment operator 
    CoinError & operator=(const CoinError& rhs);

    /// Destructor 
    virtual ~CoinError ()
    {
      // nothing to do here
    }
  //@@}
    
private:
    
  /**@@name Private member data */
  //@@{
    /// message test
    std::string message_;
    /// method name
    std::string method_;
    /// class name or hint
    std::string class_;
    /// file name
    std::string file_;
    /// Line number
    int lineNumber_;
  //@@}
};
#ifndef COIN_ASSERT
# define CoinAssertDebug(expression) assert(expression)
# define CoinAssertDebugHint(expression,hint) assert(expression)
# define CoinAssert(expression) assert(expression)
# define CoinAssertHint(expression,hint) assert(expression)
#else
#ifdef NDEBUG
# define CoinAssertDebug(expression)		(static_cast<void> (0))
# define CoinAssertDebugHint(expression,hint)		(static_cast<void> (0))
#else
#if  (__GNUC_PREREQ (2, 6))
# define CoinAssertDebug(expression) \
  (static_cast<void> ((expression) ? 0 :					      \
		       ( throw CoinError(__STRING(expression), __PRETTY_FUNCTION__, "",\
                       __FILE__,__LINE__))))
# define CoinAssertDebugHint(expression,hint) \
  (static_cast<void> ((expression) ? 0 :					      \
		       ( throw CoinError(__STRING(expression), __PRETTY_FUNCTION__, hint ,\
                        __FILE__,__LINE__))))
#else
# define CoinAssertDebug(expression) \
  (static_cast<void> ((expression) ? 0 :					      \
		       ( throw CoinError(__STRING(expression), "", "", __FILE__,__LINE__))))
# define CoinAssertDebugHint(expression,hint) \
  (static_cast<void> ((expression) ? 0 :					      \
		       ( throw CoinError(__STRING(expression), "", hint , __FILE__,__LINE__))))
#endif
#endif
#if  (__GNUC_PREREQ (2, 6))
# define CoinAssert(expression) \
  (static_cast<void> ((expression) ? 0 :					      \
		       ( throw CoinError(__STRING(expression), __PRETTY_FUNCTION__, "",\
                       __FILE__,__LINE__))))
# define CoinAssertHint(expression,hint) \
  (static_cast<void> ((expression) ? 0 :					      \
		       ( throw CoinError(__STRING(expression), __PRETTY_FUNCTION__, hint ,\
                        __FILE__,__LINE__))))
#else
# define CoinAssert(expression) \
  (static_cast<void> ((expression) ? 0 :					      \
		       ( throw CoinError(__STRING(expression), "", "", __FILE__,__LINE__))))
# define CoinAssertHint(expression,hint) \
  (static_cast<void> ((expression) ? 0 :					      \
		       ( throw CoinError(__STRING(expression), "", hint , __FILE__,__LINE__))))
#endif
#endif

//#############################################################################
/** A function that tests the methods in the CoinError class. The
    only reason for it not to be a member method is that this way it doesn't
    have to be compiled into the library. And that's a gain, because the
    library should be compiled with optimization on, but this method should be
    compiled with debugging. */
void
CoinErrorUnitTest();

#endif
@


1.1
log
@Initial revision
@
text
@d7 2
d24 3
a26 1
  <li>name of class throwing exception
d28 1
d41 1
a41 1
    const std::string & message() const 
d44 1
a44 1
    const std::string & methodName() const 
d46 2
a47 2
    /// get name of class instantiating error
    const std::string & className() const 
d49 8
d67 3
a69 1
      class_()
d82 3
a84 1
      class_(className)
d97 3
a99 1
      class_(className)
d104 8
d113 1
a113 8
    CoinError (const CoinError & source)
      :
      message_(source.message_),
      method_(source.method_),
      class_(source.class_)
    {
      // nothing to do here
    }
d116 1
a116 9
    CoinError & operator=(const CoinError& rhs)
    {
      if (this != &rhs) {
	message_=rhs.message_;
	method_=rhs.method_;
	class_=rhs.class_;
      }
      return *this;
    }
d133 1
a133 1
    /// class name
d135 4
d141 46
@


1.1.1.1
log
@COIN code from IBM hosted repository (before move to informs)
@
text
@@
