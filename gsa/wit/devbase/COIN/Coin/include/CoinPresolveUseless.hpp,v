head	1.2;
access;
symbols
	beforeInforms:1.1.1.1
	Start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2005.04.12.18.55.36;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.22.18.52.31;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.22.18.52.31;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Updated from Informs COIN repository Apr 12 2005
@
text
@// Copyright (C) 2002, International Business Machines
// Corporation and others.  All Rights Reserved.

#ifndef CoinPresolveUseless_H
#define CoinPresolveUseless_H
#define	USELESS		20

class useless_constraint_action : public CoinPresolveAction {
  struct action {
    double rlo;
    double rup;
    const int *rowcols;
    const double *rowels;
    int row;
    int ninrow;
  };

  const int nactions_;
  const action *const actions_;

  useless_constraint_action(int nactions,
                            const action *actions,
                            const CoinPresolveAction *next);
  ~useless_constraint_action();

 public:
  const char *name() const;

  // These rows are asserted to be useless,
  // that is, given a solution the row activity
  // must be in range.
  static const CoinPresolveAction *presolve(CoinPresolveMatrix * prob,
					 const int *useless_rows,
					 int nuseless_rows,
					 const CoinPresolveAction *next);

  void postsolve(CoinPostsolveMatrix *prob) const;
};


#endif
@


1.1
log
@Initial revision
@
text
@d22 3
a24 4
		      const action *actions,
		      const CoinPresolveAction *next) :
    CoinPresolveAction(next),
    nactions_(nactions), actions_(actions) {};
@


1.1.1.1
log
@COIN code from IBM hosted repository (before move to informs)
@
text
@@
