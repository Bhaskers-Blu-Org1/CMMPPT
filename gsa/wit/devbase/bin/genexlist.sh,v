head	1.1;
branch	1.1.1;
access;
symbols
	latest_sce4_20_OSL:1.1.1.1.0.12
	sce_4_20_OSL:1.1.1.1
	sce_4_05_20040511:1.1.1.1
	sce_4_00_20040201:1.1.1.1
	nextGenBranch:1.1.1.1.0.10
	nextGenRoot:1.1.1.1
	sce_3_30_20030627:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2000.02.23.17.02.56;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.23.17.02.56;	author wit;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#!/usr/bin/ksh
# $Header: /u/implode/devbase/bin/genexlist.sh,v 1.1 1996/01/02 23:03:08 rwang Exp $
#
# $Log: genexlist.sh,v $
# Revision 1.1  1996/01/02 23:03:08  rwang
# Makefile: Added genexlist.
# genexlist.sh: Shell script for generating export symbols for building shared
# libraries (from Niagra group).
#
#
#	(11-Feb-92, RAB) Adapted from work done by D Cummings and Joe Crichton
#################################################################################
# genexplist
#
#    Shell to generate an export list for use in making shared libs
#
#    Arguments should be all libs and objects which will be put into
#    shared lib and whose symbols should be exported. If we find a symbol
#    preceeded by a '.', strip off the dot and send the symbol through.
#    The dotted name could be an alias for a non-dotted name.
#

TFILE=/tmp/genex$$

for file
do
  case $file in

     *.a)
         ar -w $file      | \
         sed -e "s/^\.//" | \
         cut  -f1 >> $TFILE
         ;;

     *.x)
         nm -e -n -h $* | \
         sed -e "s/^\.//" | \
         sed -n -e "s/\|.*\|extern\|.*\|.*\|.*\|\..*$//p" | \
         sed -e "s/[ \t][ \t]*//g" >> $TFILE
         ;;

     *.o)
#
# NM is going to give us a symbol list that looks like so:
#
#     $1        $2       $3     $4     $5     $6      $7
# SymbolName | Value | Class | Type | Size | Line | Section
#
# We want only the symbols which are Class = extern and is in a Section
# of some sort (.bss, .data.text). So, we pipe the NM output of the .o
# into an awk script which filters for the above conditions, and returns only
# the symbol name (with no whitespace).
#
# Also, for all extern names which begin with a dot ('.'), we remove the dot
# (which I guess is what the MUNCH program does also).
#
         nm -e -n -h $* | \
         awk -F'|' \
         '/^[^\|]*\|[^\|]*\|[ \t]*extern[ \t]*\|[^\|]*\|[^\|]*\|[^\|]*\|[ \t]*\..*/ \
                   {
                      gsub(" ","",$1);                      \
                      if (index($1,".") == 1)               \
                         print(substr($1,2,length($1)-1));   \
                      else                                  \
                         print($1)                          \
                   }' >> $TFILE
         ;;
      *)
#         echo Ignoring file $file
         ;;
  esac
done


if [ -s $TFILE ]
then
# NOTE: Using sort -u instead of sort $TFILE | uniq was stripping off uniques!
  sort $TFILE | uniq
  rm -f $TFILE
fi
@


1.1.1.1
log
@Import bin
@
text
@@
