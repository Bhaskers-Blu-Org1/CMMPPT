head	1.2;
access;
symbols
	latest_sce4_20_OSL:1.2.0.12
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.10
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	latest_sce_3_10_20010924:1.2.0.8
	sce_3_10_20010924:1.2
	latest_sce_3_00_20010601:1.2.0.6
	sce_3_00_20010601:1.2
	latest_sce_2_31_20010308:1.2.0.4
	sce_2_31_20010308:1.2
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2000.02.23.18.43.58;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.23.17.02.56;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.23.17.02.56;	author wit;	state Exp;
branches;
next	;


desc
@@


1.2
log
@modified scripts to use /u/wit rather than /u/implode
@
text
@#!/bin/rexx


/*
 * disguise
 *
 *    The purpose of this script is to rename wit symbols
 *    to something beginning with wit to avoid name collisions
 *    and make reverse engineering more difficult.
 *
 *    Generates a completely new "define.h" file.
 *
 *    To build with new symbols, must compile DISGUISE defined.
 *
 * $Id: disguise.sh,v 1.1.1.1 2000/02/23 17:02:56 wit Exp $
 */

/* init */
SYMTAB.=0 
symCnt=0

/* parse arg dirTree filePattern */
dirTree="."
filePattern="\*.C"
say "Directory tree is" dirTree
say "File pattern is" filePattern
/* filePattern="LpCons.C" */

/* Get root name for temporary files */
  /* temp = sourceline(3)        */
  /* parse var temp . tempFile . */
  /* address ksh "print $$" */
tempFile = date('B') || time('L')
tempFile = translate(tempFile,".",":")

/* Create names of required temporary files */
tempFileList = tempFile || "List"
"rm" tempFileList "2>/dev/null"

/* get list of all files to be operated on */
"find" dirTree "-type f -name" filePattern "-print >" tempFileList "2>/dev/null"

/* Check to see if any files were found */
if stream(tempFileList,"c","query size")=0 then do

   say "No files found in directory tree" dirTree
   say "which matched the file search pattern" filePattern
   return 1
end

/* read wit.h file so all symbols in it will not be renamed */
do forever
   if lines("wit.h")=0 then leave
   witHLine = linein("wit.h");
   do forever
      parse upper var witHLine symUpper witHLine
      parse var symUpper symUpper "("
      if symUpper="WITRUN" then iterate
      if substr(symUpper,1,3)="WIT" then SYMTAB.symUpper = 1
      if witHLine="" then leave
   end
end

/* Put header lines in disguise.h */
outFile="disguise.h.new"
"rm" outFile "2>/dev/null"
call lineout outFile, "//---------------------------------------"
call lineout outFile, "//"
call lineout outFile, "//     (c) Copyright IBM Corp. 1993,1994."
call lineout outFile, "//     (Unpublished)"
call lineout outFile, "//     OCO Source Modules"
call lineout outFile, "//     IBM Confidential"
call lineout outFile, "//"
call lineout outFile, "// -------------------------------------"
call lineout outFile, " "
call lineout outFile, "#ifndef disguise_h"
call lineout outFile, "#define disguise_h"
call lineout outFile, " "
call lineout outFile, " "
call lineout outFile, "#if DISGUISE"
call lineout outFile, " "


/* Loop once for each file found */
/* stream(tempFileList,"c","open") */
do forever
   /* If no more files in list then leave loop */
   if lines(tempFileList)=0 then leave

   /* Read next line of list of files */
   fileName = linein(tempFileList);

   /* Get root file name without suffix */
   parse var fileName rootName ".C"

   /* Peform operation on file fileName */
/*
 *  if pos("LpCons",fileName)<>0 then iterate
 *  if pos("ProbEl",fileName)<>0 then iterate
 */
   say fileName 
   call lineout outFile, " "
   call lineout outFile, "// -------------------------------------"
   call lineout outFile, "// " fileName
   call lineout outFile, "// -------------------------------------"

   /* Produce listing of symbols */
   includes = "-I/usr/lpp/osl/ekkincf"
   includes = includes "-I/u/wit/power/include"
   includes = includes "-I../.."
   defines = "-DEXE_TYPE=debug -DDEBUG -DRWMEMCK -DRWDEBUG"
   defines = defines "-DDEVELOPMENT=1 -DDISGUISE=0"
   command = "xlC -DRS6K -qattr -Q -I." includes defines "-c" fileName
   say command
   command
   "rm" rootName".o"

   /* Read file with symbols */
   do symbolFileLineCnt=1

      /* read next line from file */
      if lines(rootName".lst")=0 then leave
      symbolLine = linein(rootName".lst");
      symbolLine = strip(symbolLine)
      if pos(">>>>> FILE TABLE SECTION <<<<<",symbolLine)<>0 then leave

      /* Get symbol from line */
      if symbolFileLineCnt<=6 then iterate
      if symbolLine="" then iterate
      parse var symbolLine sym .
      parse var sym sym "::"
      parse upper var sym symUpper
      if substr(sym,1,1)="_" then iterate
      if substr(sym,1,1)="~" then iterate
      if symUpper="TIME" then iterate
      if pos("operator",symbolLine)<>0 then iterate
      if pos("extern",symbolLine)<>0 then iterate
      if pos("struct",symbolLine)<>0 then iterate
      /* if pos("static",symbolLine)<>0 then iterate */
      if pos("typedef",symbolLine)<>0 then iterate
      if pos("fabs",sym)<>0 then iterate
      if pos("strcmp",sym)<>0 then iterate
      if pos("strlen",sym)<>0 then iterate
      if pos("strcpy",sym)<>0 then iterate
      if pos("strcat",sym)<>0 then iterate
      if pos("strdup",sym)<>0 then iterate
      if pos("memset",sym)<>0 then iterate
      if pos("memcpy",sym)<>0 then iterate
      if pos("memmove",sym)<>0 then iterate
      if pos("memcmp",sym)<>0 then iterate

      if pos("RW",sym)<>0 then iterate
      if "append"=sym then iterate
      if "at"=sym then iterate
      if "contains"=sym then iterate
      if "containsReference"=sym then iterate
      if "apply"=sym then iterate
      if pos("find",sym)<>0 then iterate
      if "first"=sym then iterate
      if "get"=sym then iterate
      if pos("insert",sym)<>0 then iterate
      if "last"=sym then iterate
      if "lastLink"=sym then iterate
      if "occurrencesOf"=sym then iterate
      if "occurrencesOfReference"=sym then iterate
      if "prepend"=sym then iterate
      if pos("remove",sym)<>0 then iterate
      if "isActive"=sym then iterate
      if "isEmpty"=sym then iterate
      if "key"=sym then iterate
      if "entries"=sym then iterate
      
      if "demand"=sym then iterate
      if "part"=sym then iterate
      if "arc"=sym then iterate
      if "sub"=sym then iterate
      if "WitRun"=sym then iterate

      if "inputErr"=sym then iterate
      if "defaultInputGlobalData"=sym then iterate
      if "message"=sym then iterate
      if "all_fvector"=sym then iterate
      if "ealloc"=sym then iterate
      if "setDemandInit"=sym then iterate
      if "compShortageSched"=sym then iterate
      if "enteringApiFunction"=sym then iterate
      if "current"=sym then iterate

      /* Check to see if this is a new symbol */
      /* if datatype(value("SYMTAB."sym),"Binary") then iterate */
      if SYMTAB.symUpper then iterate
      SYMTAB.symUpper = 1

      /* This is a new symbol, generate line to redefine it */
      defineLine ="#define" sym "wit" || right(symCnt,6,"0")
      symCnt = symCnt + 1
      /* say defineLine */
      call lineout outFile, defineLine
   end  /* Read file with symbols */
   "rm" rootName".lst"
   

end

call lineout outFile, "#endif"
call lineout outFile, "#endif"
"mv disguise.h disguise.h.old"
"mv" outFile "disguise.h"
"rm" tempFileList "2>/dev/null"
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
 * $Id: disguise.sh,v 1.8 1995/01/10 14:43:09 fasano Exp $
d109 1
a109 1
   includes = includes "-I/u/implode/power/include"
@


1.1.1.1
log
@Import bin
@
text
@@
