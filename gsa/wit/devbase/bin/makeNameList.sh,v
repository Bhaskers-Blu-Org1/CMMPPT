head	1.1;
branch	1.1.1;
access;
symbols
	latest_sce4_20_OSL:1.1.1.1.0.12
	sce_4_20_OSL:1.1.1.1
	sce_4_05_20040511:1.1.1.1
	sce_4_00_20040201:1.1.1.1
	nextGenBranch:1.1.1.1.0.10
	nextGenRoot:1.1.1.1
	sce_3_30_20030627:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2000.02.23.17.02.57;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.23.17.02.57;	author wit;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#!/bin/tcsh
# make a list of all of the variables used in the makefiles specified

# format makeNameList.sh fn1 fn2 ...
# where the fn's are names of makefiles to scan

# Note: it would be better to write this in perl, but this was a quickie.
# Bug: makeNameList only pics up one variable per line,
# even if there are multiple, and it doesn't ignore comment lines.

# $Id: makeNameList.sh,v 1.2 1994/10/04 00:56:11 wally Exp $


# The cat command concatenates all of the input files and sends them to stdout
# The 1st sed command filters out all of the lines except the ones that contain
# a string starting with $( ending with ) and having only letters, numbers,
# and underscores between them.  For the lines having such strings, it sends
# the characters between the parens in the first such string to stdout.
# The 2nd sed command makes lines to print out the variables names and values
# The last line (the subshell) sends "print_vars:" and then the lines from
# the 2nd sed command to stdout
cat $* \
	| sed -n 's/^.*\$(\([a-zA-Z0-9_]*\)).*$/\1/p' \
	| sort | uniq \
	| sed 's/\(.*\)/	echo \1: $(\1)/' \
	| (echo print_vars:; cat )
@


1.1.1.1
log
@Import bin
@
text
@@
