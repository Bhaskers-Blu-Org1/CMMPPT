head	1.1;
access;
symbols;
locks; strict;
comment	@// @;


1.1
date	2006.02.23.18.56.10;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.1
log
@updates
@
text
@#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#endif

#include "demandPlanningProblem.h"
#include "resourceAppData.h"


std::vector<float> DPresourceAppData::getReq() const
{
  return req_;
}
void DPresourceAppData::setReq(int period, float req)
{
	req_[period]=req;
}

// default constructor
DPresourceAppData::DPresourceAppData()
:
  DPappData(),req_(0){}

DPresourceAppData::DPresourceAppData(int nPeriods)
:
DPappData(),
req_()
{
  setVector(nPeriods,0.0f,req_);
}


// destructor

DPresourceAppData::~DPresourceAppData()
{}

// copy constructor
DPresourceAppData::DPresourceAppData( const DPresourceAppData& source ):
DPappData(source),
req_(source.req_)
{};

// assignment operator
DPresourceAppData&
DPresourceAppData::operator=(const DPresourceAppData& rhs)
{  
  if (this != &rhs) {        
    DPappData::operator=(rhs);
    req_ = rhs.req_;
    
  }
  return *this;
}

DPappData * DPresourceAppData::clone() const
{ return (new DPresourceAppData(*this));}

// Self-test
void DPresourceAppData::test()
{
  
 
}
@
