head	1.21;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2006.10.06.17.07.35;	author gresh;	state Exp;
branches;
next	1.20;

1.20
date	2006.08.17.18.11.16;	author gresh;	state Exp;
branches;
next	1.19;

1.19
date	2006.08.01.14.21.12;	author gresh;	state Exp;
branches;
next	1.18;

1.18
date	2006.05.24.16.42.20;	author gresh;	state Exp;
branches;
next	1.17;

1.17
date	2006.05.22.15.32.05;	author gresh;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.18.17.33.52;	author gresh;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.18.17.23.18;	author gresh;	state Exp;
branches;
next	1.14;

1.14
date	2006.05.08.16.05.34;	author gresh;	state Exp;
branches;
next	1.13;

1.13
date	2006.04.18.13.27.05;	author gresh;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.21.15.22.42;	author gresh;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.17.17.49.17;	author gresh;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.02.18.25.38;	author gresh;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.02.16.33.46;	author gresh;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.01.16.21.28;	author gresh;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.28.14.37.26;	author gresh;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.24.16.57.43;	author gresh;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.23.18.56.10;	author gresh;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.23.14.39.45;	author gresh;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.23.13.50.38;	author gresh;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.22.19.03.35;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.22.15.41.58;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.02.22.15.41.58;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.21
log
@*** empty log message ***
@
text
@#ifndef DemandPlanningProblem_h
#define DemandPlanningProblem_h


#include "problemBase.h"


typedef std::set<std::string> DPcollectionOfStrings;
typedef std::vector<std::string> DPvectorString;

class demandPlanningProblem : public SCOproblemBase {
public:
  //general methods
  void writeModel(std::string modelName);
  void doMrp();
  void doImplosionProblem();
  void setUserNPeriods(int nPeriods);
  int getUserNPeriods();
  void setIsMrpProblem(bool isMrp);
  void setDivisibleDemand(bool isDivisible);
  bool isMrpProblem();
  bool isDivisibleDemand();
  void reInitialize();
  void netSupply();
  void purge();


  //----------------------
  // Methods for solutions.
  //----------------------
  void addSolution(const std::string & sName);
  void setSolutionIncLotSize(const std::string & sName, float lotSize);
  bool solutionExists(const std::string & sName);
  void setSolutionDuration(const std::string & sName, int periods);
  std::string solutionName(const std::string & sName )const;
  static std::string solutionFromSolutionName(const std::string & sName);
  void getSolutionNames( std::vector<std::string> & solutionNames ) const;
  void setEquitableAllocation(bool e);
  void setSolutionForDeletion(const std::string & sName);
  //std::vector<float> getSolutionReqQuantity(std::string &sName);
  //void setSolutionReqQuantity(std::string sName, int period, float req);



  //----------------------
  // Methods for resources.
  //----------------------  
  void addResource(const std::vector<std::string> &resourceAttributeVector);
  void setResourceSupplyQuantity(const std::vector<std::string> &resourceAttributeVector, float supplyQuantity);
  void setResourceSupplyQuantityByPeriod(const std::vector<std::string> &resourceAttributeVector, float supplyQuantity, int period);
  
  std::string baseResourceName(const std::vector<std::string> &resourceAttributeVector )const;
  void addResourceIdentifierName(const std::string & identifierName);
  const std::vector<std::string> & getResourceIdentifierNames() const;
  bool resourceExists(const std::vector<std::string> &resourceAttributeVector)const ;
  void demandPlanningProblem::setResourceReqQuantity(
                                        const std::vector<std::string> &resourceIdentifierValues,
                                        int period,
                                        float reqQuantity);
  std::vector<float> getResourceReqQuantity(const std::vector<std::string> &resourceIdentifierValues);
  void demandPlanningProblem::getResourceNames( std::vector<std::vector<std::string> > & names )const;
  std::vector<std::string> demandPlanningProblem::resourceIdentifierValuesFromResourceName(const std::string &baseResourceName ) const;
  std::string demandPlanningProblem::resourceIdentifierValueFromResourceName(const std::string &resourcename, int which)const;
 
  
  
  //----------------------
  // Methods for boms.
  //----------------------  

  void addResourceRequirement(const std::string & sName,
	  const std::vector<std::string> &resourceIdentifierValues,
	  float hoursPerSolnHour);
  void addAtomicSolutionRequirements(const std::string & specificSolutionName,
	  const std::string & solutinName,
	   int duration);
  float getResourceRequirement(const std::string & sname,
	  const std::vector<std::string> &resourceIdentifierValues, int period);

 //----------------------
  // Methods for demand.
  //----------------------
  void addDemand(const std::string & dName, const std::string & sName, const std::string & demandType);
  void setDemandForDeletion(const std::string & dName, const std::string & sName);
  void setDemandQuantity(const std::string & dName, const std::string &sName, int period, float quantity);
  void resetDemandQuantity(const std::string & dName, const std::string & sName);
  std::string demandName(const std::string & dName )const;
  std::string demandScalingName(const std::string & dName, const std::string & sName)const;
  bool demandExists(const std::string & dName, const std::string & sName)const ;
  std::vector<std::pair<std::string, std::string> > getDemandNames();
  bool getDemandShipped(const std::string & dName, const std::string & sName);
  float getDemandTotalQuantityShipped(const std::string & dName, const std::string & sName);
  float getDemandQuantityShipped(const std::string & dName, const std::string & sName, int period);
  int getDemandPeriodShipped(const std::string & dName, const std::string & sName);
  void demandPlanningProblem::setDemandShipLateAllowance(const std::string & dName, const std::string & sName, int allowance);
  void addToWedgeDemandList(const std::pair<std::string, std::string> dName);
  void addToOpportunityDemandList(const std::pair<std::string, std::string> dName);
  void addToOngoingDemandList(const std::pair<std::string, std::string>  dName);
  std::vector<std::pair<std::string, std::string> >  getWedgeDemandList();
  std::vector<std::pair<std::string, std::string> >  getOpportunityDemandList();
  std::vector<std::pair<std::string, std::string> >  getOngoingDemandList();
  void setDemandPriority(const std::string &, const std::string &, int);

  demandPlanningProblem();
  ~demandPlanningProblem();
  // copy constructor
  demandPlanningProblem( const demandPlanningProblem& source );
  
  // assignment operator
  demandPlanningProblem&
  operator=(const demandPlanningProblem& rhs);
  

  // Self-test
  static void test();


private:


  void gutsOfCopy( const demandPlanningProblem& source );
  void gutsOfDestructor();


  DPvectorString resourceIdentifierNames_;
  DPcollectionOfStrings solutionNames_;
  DPcollectionOfStrings resourceNames_;
  std::vector<std::pair<std::string, std::string> > demandNames_;
  int userNPeriods_;
  bool isMrp_;
  bool isDivisibleDemand_;
  std::vector<std::pair<std::string, std::string> > wedgeDemandList_;
  std::vector<std::pair<std::string, std::string> > ongoingDemandList_;
  std::vector<std::pair<std::string, std::string> > opportunityDemandList_;
 
 
};

#endif
@


1.20
log
@changes to support available to promise
@
text
@d50 2
@


1.19
log
@change tolerance, and add some more models for the future
@
text
@d23 5
d39 1
d82 1
@


1.18
log
@changes to deal properly with durations, incLotSize, simulation/implosion, etc.
@
text
@d20 1
d22 1
d33 1
d83 1
d122 1
@


1.17
log
@implosion examples/code
@
text
@d25 1
d80 2
@


1.16
log
@added support for "ship late allowance"
@
text
@d19 2
a20 1

d71 1
a71 1
  void addDemand(const std::string & dName, const std::string & sName);
d80 7
a86 1

d114 4
@


1.15
log
@added support for doing heuristic implosion given resource supply quantity
@
text
@d78 2
@


1.14
log
@put back in a model which includes durations for projects (for
avail to promise potential work).
@
text
@d16 1
d38 1
d76 2
d103 1
@


1.13
log
@changed to "one period" solutions to better handle ongoing and wedge demands
@
text
@d59 3
d70 1
@


1.12
log
@simulation for variance
@
text
@a24 1
  int getSolutionDuration(const std::string & sName);
d28 2
a29 2
  std::vector<float> getSolutionReqQuantity(std::string &sName);
  void setSolutionReqQuantity(std::string sName, int period, float req);
a54 5
  void addConstantResourceRequirement(const std::string & sName, 
                        const std::vector<std::string> &resourceIdentifierValues,
						float hoursPerSolnHour);
  float getConstantResourceRequirement(const std::string & sName,
	                        const std::vector<std::string> &resourceIdentifierValues);
d58 1
a58 1
	  int period, float hoursPerSolnHour);
a66 1
  void resetDemandQuantity(const std::string & dName, const std::string &sName, int period, float quantity);
@


1.11
log
@changed model to remove intermediate operation/part to do the 1/quantity. Now I just apply the probability directly to the quantity demanded.
@
text
@d73 1
@


1.10
log
@improved the names of some routines
@
text
@d16 2
a72 1
  void setDemandProbability(const std::string & dName, const std::string &sName, int period, float probability);
d101 1
@


1.9
log
@more testing of api for ::test
@
text
@d54 1
a54 1
  void addBomEntries(const std::string & sName, 
d57 1
a57 1
  float getBomEntryQuantity(const std::string & sName,
d60 5
@


1.8
log
@changes related to accumulating requirements for each solution over
time (for Mark S)
@
text
@d54 1
a54 1
void addBomEntries(const std::string & sName, 
d57 13
a79 2
  void gutsOfCopy( const demandPlanningProblem& source );
  void gutsOfDestructor();
d85 7
d96 1
a96 9
  //----------------------
  // Methods for demand.
  //----------------------
  void addDemand(const std::string & dName, const std::string & sName);
  void setDemandQuantity(const std::string & dName, const std::string &sName, int period, float quantity);
  void setDemandProbability(const std::string & dName, const std::string &sName, int period, float probability);
  std::string demandName(const std::string & dName )const;
  std::string demandScalingName(const std::string & dName, const std::string & sName)const;
  bool demandExists(const std::string & dName, const std::string & sName)const ;
@


1.7
log
@handle odds and uncertain start times. Unit test was updated as well
@
text
@d27 3
@


1.6
log
@added unit test
@
text
@d78 3
a80 1
  void addDemand(const std::string & dName, const std::string & sName, int period, float quantity);
d82 1
@


1.5
log
@updates
@
text
@d25 3
d67 3
@


1.4
log
@*** empty log message ***
@
text
@d14 2
a15 2
	void writeModel(std::string modelName);

d24 1
a24 1
  std::string solutionName(const std::string & sName );
d34 11
a44 2


d69 6
a74 1

@


1.3
log
@new files
@
text
@d20 4
a23 3
  void addSolution(const std::string & solutionName);
  void setSolutionDuration(const std::string & solutionName, int periods);
  int getSolutionDuration(const std::string & solutionName);
@


1.2
log
@new files for appdata
@
text
@d13 4
a16 1
  
d32 1
a32 1

@


1.1
log
@Initial revision
@
text
@d8 2
a9 2
typedef std::vector<std::string> RCPvectorString;

d15 17
a31 1
  // Methods for engagements.
d33 5
a37 3
 
	
  void addEngagement       (const std::string & engagementName);
a50 1
  
d52 4
@


1.1.1.1
log
@initial import
@
text
@@
