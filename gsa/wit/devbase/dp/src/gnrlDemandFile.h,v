head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2006.05.15.14.26.29;	author gresh;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.18.13.27.05;	author gresh;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.28.14.37.26;	author gresh;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.27.19.22.37;	author gresh;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.23.18.56.10;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.23.15.23.52;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.6
log
@handle non-integer durations (not quite done yet though). need to scale last period's quantity by fractional duration.
@
text
@#ifndef DPgnrlDemandFile_h
#define DPgnrlDemandFile_h

#include "scoFile.h"


class DPgnrlDemandFile : public SCOcsvFormatFile {
public:

  getFieldH(solution);
  getFieldH(demand);
  getIntFieldH(period);
  getFloatFieldH(quantity); //in hours
  getFloatFieldH(odds);
  getFloatFieldH(duration);

  
  // preferred constructor
  DPgnrlDemandFile(
    std::string filename )
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(6);
    commentRecords(true);
  };

  // compute key for storing record in dictionary

  std::string key( 
	  const std::string & sName, const std::string & dName, int period) const
  {
    std::string retVal;
    char periodchar[100];
    sprintf( periodchar, "%d", period );
    retVal = dName + "!@@#$%" + sName + "!@@#$%" + periodchar ;

 
    
    return retVal;
  };
  
  // destructor
  ~DPgnrlDemandFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {

  

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {



	std::string sName = solution(recNum);
	std::string dName = demand(recNum);
	int p = periodAsInt(recNum);
    
    std::string retVal = key(dName,sName,p);
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  DPgnrlDemandFile();
  
  // copy constructor  -- don't use!
  DPgnrlDemandFile( const DPgnrlDemandFile& source );
  
  // assignment operator -- don't use!
  DPgnrlDemandFile&
  operator=(const DPgnrlDemandFile& rhs);

};



class DPgnrlDemandFileIterator : public SCOfileIterator {
public:
  
  getFieldFileWithIteratorH(demand);
  getFieldFileWithIteratorH(solution);
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(quantity);
  getFloatFieldFileWithIteratorH(duration);
  getFloatFieldFileWithIteratorH(odds);

  // preferred constructor
  DPgnrlDemandFileIterator(const DPgnrlDemandFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~DPgnrlDemandFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {

  }

private:
  
  
  // default constructor -- don't use!
  DPgnrlDemandFileIterator();
  
  // copy constructor  -- don't use!
  DPgnrlDemandFileIterator( const DPgnrlDemandFileIterator& source );
  
  // assignment operator -- don't use!
  DPgnrlDemandFileIterator&
  operator=(const DPgnrlDemandFileIterator& rhs);

  
};
#endif
@


1.5
log
@changed to "one period" solutions to better handle ongoing and wedge demands
@
text
@d15 1
d94 1
a94 1
  getIntFieldFileWithIteratorH(duration);
@


1.4
log
@handle odds and uncertain start times. Unit test was updated as well
@
text
@d24 1
a24 1
    hasHeaderRecord(5);
d93 1
@


1.3
log
@uncertain start probability
@
text
@d93 1
@


1.2
log
@updates
@
text
@d14 1
d24 1
a24 1
    hasHeaderRecord(4);
@


1.1
log
@idemand file
@
text
@d11 1
d18 1
a18 2
    std::string filename,
    int numResourceIdFields )
d23 1
a23 2
    numResourceIdFields_ = numResourceIdFields;
    hasHeaderRecord(numResourceIdFields);
d30 1
a30 1
    const std::string & sName, int period) const
a32 1
    unsigned int i;
d35 1
a35 1
    retVal = sName + "!@@#$%" + periodchar ;
d62 1
d65 1
a65 1
    std::string retVal = key(sName,p);
d88 1
d90 2
a91 2
  getIntFileWithIteratorH(period);
  getFloatFileWithIteratorH(quantity);
@

