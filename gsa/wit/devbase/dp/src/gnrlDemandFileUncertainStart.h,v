head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2006.08.17.18.11.16;	author gresh;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.22.15.32.05;	author gresh;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.18.17.23.19;	author gresh;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.15.14.26.29;	author gresh;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.18.13.27.05;	author gresh;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.28.14.37.26;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.27.19.22.37;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.7
log
@changes to support available to promise
@
text
@#ifndef DPgnrlDemandFileUncertainStart_h
#define DPgnrlDemandFileUncertainStart_h

#include "scoFile.h"


class DPgnrlDemandFileUncertainStart : public SCOcsvFormatFile {
public:

  getFieldH(solution);
  getFieldH(demand);
  getFloatFieldH(duration);
  getFloatFieldH(quantity); //in hours
  getFloatFieldH(odds);
  getIntFieldH(lateAllowance); //0 means no late allowance, -1 means any time is ok
  

  
  // preferred constructor
  DPgnrlDemandFileUncertainStart(
    std::string filename, int numPeriods, bool lateAllowance )
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
	int numColumns;
	if (!lateAllowance)
		numColumns = 5+numPeriods;
	else
		numColumns = 6+numPeriods;
    hasHeaderRecord(numColumns);
    commentRecords(true);
  };

  // compute key for storing record in dictionary

  std::string key( 
	  const std::string & sName, const std::string & dName) const
  {
    std::string retVal;
    retVal = dName + "!@@#$%" + sName ;

 
    
    return retVal;
  };
  
  // destructor
  ~DPgnrlDemandFileUncertainStart(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {

  

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {



	std::string sName = solution(recNum);
	std::string dName = demand(recNum);
    
    std::string retVal = key(dName,sName);
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  DPgnrlDemandFileUncertainStart();
  
  // copy constructor  -- don't use!
  DPgnrlDemandFileUncertainStart( const DPgnrlDemandFileUncertainStart& source );
  
  // assignment operator -- don't use!
  DPgnrlDemandFileUncertainStart&
  operator=(const DPgnrlDemandFileUncertainStart& rhs);

};



class DPgnrlDemandFileUncertainStartIterator : public SCOfileIterator {
public:
  
  getFieldFileWithIteratorH(demand);
  getFieldFileWithIteratorH(solution);
  getFloatFieldFileWithIteratorH(quantity);
  getFloatFieldFileWithIteratorH(duration);
  getFloatFieldFileWithIteratorH(odds);
  getIntFieldFileWithIteratorH(lateAllowance);

  // preferred constructor
  DPgnrlDemandFileUncertainStartIterator(const DPgnrlDemandFileUncertainStart & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~DPgnrlDemandFileUncertainStartIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {

  }

private:
  
  
  // default constructor -- don't use!
  DPgnrlDemandFileUncertainStartIterator();
  
  // copy constructor  -- don't use!
  DPgnrlDemandFileUncertainStartIterator( const DPgnrlDemandFileUncertainStartIterator& source );
  
  // assignment operator -- don't use!
  DPgnrlDemandFileUncertainStartIterator&
  operator=(const DPgnrlDemandFileUncertainStartIterator& rhs);

  
};
#endif
@


1.6
log
@implosion examples/code
@
text
@d21 1
a21 1
    std::string filename, int numPeriods, bool mrpProblem )
d27 1
a27 1
	if (mrpProblem)
@


1.5
log
@added support for doing heuristic implosion given resource supply quantity
@
text
@d15 1
d21 1
a21 1
    std::string filename, int numPeriods )
d26 5
a30 1
	int numColumns = 5+numPeriods; //probability for each period start
d98 1
@


1.4
log
@handle non-integer durations (not quite done yet though). need to scale last period's quantity by fractional duration.
@
text
@d15 1
@


1.3
log
@changed to "one period" solutions to better handle ongoing and wedge demands
@
text
@d12 1
a12 1
  getIntFieldH(duration);
d90 1
a90 1
  getIntFieldFileWithIteratorH(duration);
@


1.2
log
@handle odds and uncertain start times. Unit test was updated as well
@
text
@d12 1
d24 1
a24 1
	int numColumns = 4+numPeriods; //probability for each period start
d90 1
@


1.1
log
@uncertain start probability
@
text
@d89 1
@

