head	1.10;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2006.10.06.17.11.22;	author gresh;	state Exp;
branches;
next	1.9;

1.9
date	2006.10.06.17.07.35;	author gresh;	state Exp;
branches;
next	1.8;

1.8
date	2006.08.18.17.47.45;	author gresh;	state Exp;
branches;
next	1.7;

1.7
date	2006.08.17.18.11.15;	author gresh;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.08.16.05.34;	author gresh;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.21.15.22.42;	author gresh;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.17.17.49.17;	author gresh;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.23.18.56.10;	author gresh;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.23.13.50.38;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.22.15.41.58;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.02.22.15.41.58;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.10
log
@*** empty log message ***
@
text
@#ifndef DEMANDPLANNING_h
#define DEMANDPLANNING_h

#include <string>
#include "demandPlanningDll.h"
  
#ifdef __cplusplus

typedef struct { 
	std::string JRSS; 
	int period; 
	float quantity;
} resourceGlut;

typedef struct {
	std::string solName; 
	std::string JRSS; 
	float quantity;
} solutionBomEntry;

// Method may throw an RcpOptException.
int DP_DECLSPEC atpRequest(const std::string solutionId, int durationInWeeks,
            float quantityInHours, int requestedPeriod,
            int lateAllowanceInWeeks, int planningHorizonInWeeks,
            float** supplyGlut, float** resourceBomRatio);

int  atpSetSupply(std::vector<resourceGlut>);
int  atpSetSolutionBom(std::vector<solutionBomEntry>);
int  atpSingleRequest(const std::string & solutionName, int duration, float quantity, int requestedPeriod, int lateAllowance);
//int DP_DECLSPEC atpReset(int numperiods);
void writeATPModel(std::string name);
int DP_DECLSPEC demandPlanning(const std::string & dirname);
int DP_DECLSPEC demandPlanningSimulation(const std::string & dirname);
//int  startATP(const std::string & dirname);
int resetATP(int horizon);
//int DP_DECLSPEC atpRequest(const std::string & solutionName, int duration, float quantity, int requestedPeriod, int lateAllowance);
void  stopATP();
void DP_DECLSPEC runATS(const std::string & dirname);
void loadATP(const std::string & dirname);

//int DP_DECLSPEC demandPlanning();

#endif

#endif
@


1.9
log
@*** empty log message ***
@
text
@a34 1
int  resetATP();
@


1.8
log
@removed a small memory leak
@
text
@d9 11
d22 10
d34 5
a38 4
int DP_DECLSPEC startATP(const std::string & dirname);
void DP_DECLSPEC resetATP(const std::string & dirname);
int DP_DECLSPEC atpRequest(const std::string & solutionName, int duration, float quantity, int requestedPeriod, int lateAllowance);
void DP_DECLSPEC stopATP();
@


1.7
log
@changes to support available to promise
@
text
@d17 1
@


1.6
log
@put back in a model which includes durations for projects (for
avail to promise potential work).
@
text
@d13 5
a17 1

@


1.5
log
@simulation for variance
@
text
@d4 1
@


1.4
log
@changed model to remove intermediate operation/part to do the 1/quantity. Now I just apply the probability directly to the quantity demanded.
@
text
@d12 2
@


1.3
log
@updates
@
text
@d11 1
@


1.2
log
@new files
@
text
@d10 1
a10 1
int DP_DECLSPEC demandPlanning(std::string dirname);
@


1.1
log
@Initial revision
@
text
@d10 2
a11 1
int DP_DECLSPEC demandPlanning();
@


1.1.1.1
log
@initial import
@
text
@@
