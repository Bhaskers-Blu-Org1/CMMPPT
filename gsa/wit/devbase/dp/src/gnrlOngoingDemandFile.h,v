head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2006.02.24.19.52.59;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.1
log
@ongoing demand is now added
@
text
@#ifndef DPgnrlOngoingDemandFile_h
#define DPgnrlOngoingDemandFile_h

#include "scoFile.h"


class DPgnrlOngoingDemandFile : public SCOcsvFormatFile {
public:

  getFieldH(solution);
  getFieldH(demand);
  getIntFieldH(remaining);
  getFloatFieldH(quantity); //in hours

  
  // preferred constructor
  DPgnrlOngoingDemandFile(
    std::string filename )
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(4);
    commentRecords(true);
  };

  // compute key for storing record in dictionary

  std::string key( 
	  const std::string & sName, const std::string & dName) const
  {
    std::string retVal;

    retVal = dName + "!@@#$%" + sName ;

 
    
    return retVal;
  };
  
  // destructor
  ~DPgnrlOngoingDemandFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {

  

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {



	std::string sName = solution(recNum);
	std::string dName = demand(recNum);
    
    std::string retVal = key(dName,sName);
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  DPgnrlOngoingDemandFile();
  
  // copy constructor  -- don't use!
  DPgnrlOngoingDemandFile( const DPgnrlOngoingDemandFile& source );
  
  // assignment operator -- don't use!
  DPgnrlOngoingDemandFile&
  operator=(const DPgnrlOngoingDemandFile& rhs);

};



class DPgnrlOngoingDemandFileIterator : public SCOfileIterator {
public:
  
  getFieldFileWithIteratorH(demand);
  getFieldFileWithIteratorH(solution);
  getIntFieldFileWithIteratorH(remaining);
  getFloatFieldFileWithIteratorH(quantity);

  // preferred constructor
  DPgnrlOngoingDemandFileIterator(const DPgnrlOngoingDemandFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~DPgnrlOngoingDemandFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {

  }

private:
  
  
  // default constructor -- don't use!
  DPgnrlOngoingDemandFileIterator();
  
  // copy constructor  -- don't use!
  DPgnrlOngoingDemandFileIterator( const DPgnrlOngoingDemandFileIterator& source );
  
  // assignment operator -- don't use!
  DPgnrlOngoingDemandFileIterator&
  operator=(const DPgnrlOngoingDemandFileIterator& rhs);

  
};
#endif
@
