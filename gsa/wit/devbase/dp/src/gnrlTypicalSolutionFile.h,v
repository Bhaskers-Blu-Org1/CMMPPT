head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2006.08.18.17.47.45;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.1
log
@removed a small memory leak
@
text
@#ifndef DPgnrlTypicalSolutionFile_h
#define DPgnrlTypicalSolutionFile_h

#include "scoFile.h"


class DPgnrlTypicalSolutionFile : public SCOcsvFormatFile {
public:

  getFieldH(solution);
  getFloatFieldH(quantity);
  getIntFieldH(duration);

  // preferred constructor
  DPgnrlTypicalSolutionFile(
    std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(3);
    commentRecords(true);
  };

  // compute key for storing record in dictionary

  std::string key( 
    const std::string & solutionName) const
  {
    std::string retVal;
    retVal = solutionName;
    return retVal;
  };
  
  // destructor
  ~DPgnrlTypicalSolutionFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {

  

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {


    std::vector<std::string> vals;

    std::string fv = fieldNAsString(recNum,0);
  
    
    std::string retVal = key(fv);
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  DPgnrlTypicalSolutionFile();
  
  // copy constructor  -- don't use!
  DPgnrlTypicalSolutionFile( const DPgnrlTypicalSolutionFile& source );
  
  // assignment operator -- don't use!
  DPgnrlTypicalSolutionFile&
  operator=(const DPgnrlTypicalSolutionFile& rhs);

};



class DPgnrlTypicalSolutionFileIterator : public SCOfileIterator {
public:
  
  getFieldFileWithIteratorH(solution);
  getIntFieldFileWithIteratorH(duration);
  getFloatFieldFileWithIteratorH(quantity);
 
  // preferred constructor
  DPgnrlTypicalSolutionFileIterator(const DPgnrlTypicalSolutionFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~DPgnrlTypicalSolutionFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {

  }

private:
  
  
  // default constructor -- don't use!
  DPgnrlTypicalSolutionFileIterator();
  
  // copy constructor  -- don't use!
  DPgnrlTypicalSolutionFileIterator( const DPgnrlTypicalSolutionFileIterator& source );
  
  // assignment operator -- don't use!
  DPgnrlTypicalSolutionFileIterator&
  operator=(const DPgnrlTypicalSolutionFileIterator& rhs);

  
};
#endif
@
