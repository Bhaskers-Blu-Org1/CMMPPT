head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2006.02.23.14.39.45;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@#ifndef scoException_h
#define scoException_h

#include <string>

class SCO_DECLSPEC SCOexception {

public:

  // Return current record number
  const char * what() const
  {
    return msg_.c_str();
  }
  
  // preferred constructor
  SCOexception(std::string msg):
  msg_(msg)
  {};

  // default constructor
  SCOexception():
  msg_()
  {};
  
  // copy constructor
  SCOexception( const SCOexception& source ):
  msg_(source.msg_)
  {};
  
  // assignment operator
  SCOexception& operator=(const SCOexception& rhs)
  {  
    if (this != &rhs) {   
      msg_ = rhs.msg_;
    }
    return *this;
  }
  
  // destructor
  virtual
    ~SCOexception()
  {};
  
private:
  

  // Member data
  std::string msg_; 

};

#endif





@
