head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2006.05.18.17.23.19;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.23.13.50.39;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.2
log
@added support for doing heuristic implosion given resource supply quantity
@
text
@#ifndef DPgnrlResourceFile_h
#define DPgnrlResourceFile_h

#include "scoFile.h"


class DPgnrlResourceFile : public SCOcsvFormatFile {
public:

  getFloatFieldH(supply);

  // preferred constructor
  DPgnrlResourceFile(
    std::string filename,
    int numResourceIdFields, bool mrpProblem )
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    numResourceIdFields_ = numResourceIdFields;
    if (mrpProblem)
		hasHeaderRecord(numResourceIdFields);
	else
		hasHeaderRecord(numResourceIdFields + 1);
    commentRecords(true);
  };

  // compute key for storing record in dictionary

  std::string key( 
    const std::vector<std::string> & resourceIdValues) const
  {
    std::string retVal;
    unsigned int i;
    for ( i=0; i<resourceIdValues.size(); ++i ) {
      retVal = retVal + resourceIdValues[i] + "!@@#$%";
    }
    
    return retVal;
  };
  
  // destructor
  ~DPgnrlResourceFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {

  

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {


    std::vector<std::string> vals;
    int f;
    for ( f=0; f<numResourceIdFields_; ++f ) {
      std::string fv = fieldNAsString(recNum,f);
      vals.push_back(fv);
    }
    
    std::string retVal = key(vals);
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  DPgnrlResourceFile();
  
  // copy constructor  -- don't use!
  DPgnrlResourceFile( const DPgnrlResourceFile& source );
  
  // assignment operator -- don't use!
  DPgnrlResourceFile&
  operator=(const DPgnrlResourceFile& rhs);

  int numResourceIdFields_;
};



class DPgnrlResourceFileIterator : public SCOfileIterator {
public:
  
  getFloatFieldFileWithIteratorH(supply);


  // preferred constructor
  DPgnrlResourceFileIterator(const DPgnrlResourceFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~DPgnrlResourceFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {

  }

private:
  
  
  // default constructor -- don't use!
  DPgnrlResourceFileIterator();
  
  // copy constructor  -- don't use!
  DPgnrlResourceFileIterator( const DPgnrlResourceFileIterator& source );
  
  // assignment operator -- don't use!
  DPgnrlResourceFileIterator&
  operator=(const DPgnrlResourceFileIterator& rhs);

  
};
#endif
@


1.1
log
@new files
@
text
@d10 2
a11 1
  
d15 1
a15 1
    int numResourceIdFields )
d21 4
a24 1
    hasHeaderRecord(numResourceIdFields);
d91 2
a92 1
 
@

