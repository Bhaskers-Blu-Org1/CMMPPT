head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2006.02.23.13.50.38;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.1
log
@new files
@
text
@#ifndef DP_GLOBALATTRDATA_h
#define DP_GLOBALATTRDATA_h

#include "scoFile.h"


class DPglobalAttrFile : public SCOcsvFormatFile {
public:
  
  // fields  
  getFieldH(attrName);  
  getFieldH(attrValue);
  
  // preferred constructor
  DPglobalAttrFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(2);
    commentRecords(true);
  };
  
  // destructor
  ~DPglobalAttrFile()  
  {
    // Nothing to do here
  }
  
  // Self-test
  static void test()
  {
    
  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual
    std::string
    key( unsigned recNum ) const
  {
    std::string retVal = fieldAsString(recNum,"attrName");
    return retVal;
  }
  
private:
  
  
  // default constructor -- don't use!
  DPglobalAttrFile();
  
  // copy constructor  -- don't use!
  DPglobalAttrFile( const DPglobalAttrFile& source );
  
  // assignment operator -- don't use!
  DPglobalAttrFile&
  operator=(const DPglobalAttrFile& rhs);

  
};


#if 0
class DPglobalAttrFileIterator : public SCOfileIterator {
public:
  
  // fields
  //std::string locName() const;

  // preferred constructor
  DPglobalAttrFileIterator(const DPglobalAttrFile &);
  
  // destructor
  ~DPglobalAttrFileIterator();
  
  // Self-test
  static void test();

private:
  
  
  // default constructor -- don't use!
  DPglobalAttrFileIterator();
  
  // copy constructor  -- don't use!
  DPglobalAttrFileIterator( const DPglobalAttrFileIterator& source );
  
  // assignment operator -- don't use!
  DPglobalAttrFileIterator&
  operator=(const DPglobalAttrFileIterator& rhs);

  
};
#endif
#endif
@
