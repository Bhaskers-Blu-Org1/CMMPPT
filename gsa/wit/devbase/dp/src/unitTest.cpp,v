head	1.6;
access;
symbols;
locks; strict;
comment	@// @;


1.6
date	2006.10.06.17.07.35;	author gresh;	state Exp;
branches;
next	1.5;

1.5
date	2006.08.17.18.11.16;	author gresh;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.22.15.32.06;	author gresh;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.28.18.03.34;	author gresh;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.24.19.03.56;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.24.16.57.43;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.6
log
@*** empty log message ***
@
text
@#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#pragma warning(disable:4290)
#endif

#include <assert.h>

#include <iostream>

#include <float.h>

#include "dpException.h"
#include "dpIntException.h"
#include "globalAttrFile.h"

#include "demandPlanningProblem.h"
#include "gnrlResourceFile.h"
#include "gnrlSolutionFile.h"
#include "gnrlSolutionBomFile.h"
#include "populateDP.h"
#include "demandPlanning.h"

// Function Prototypes. Function definitions is in this file.
void testingMessage( const char * const msg );



int
main (int argc, char * argv[])
{


try {
  testingMessage( "Testing demandPlanningProblem\n" );
  demandPlanningProblem::test();


  
  testingMessage( "Testing demandPlanning(firstExample)\n" );
  demandPlanning("../data/firstExample");
 
  testingMessage( "Testing demandPlanning(firstExampleUncertainStart)\n" );
  demandPlanning("../data/firstExampleUncertainStart");
 
  testingMessage( "Testing demandPlanning(uncertainStart)\n" );
  demandPlanning("../data/uncertainStart");
 
  testingMessage( "Testing demandPlanning(itexample)\n" );
  demandPlanning("../data/itexample");

   
  //
  {
  testingMessage( "Now testing new version of ATP\n");
  resetATP(3);
  std::vector<resourceGlut> vecRG;

	resourceGlut rg1;
	rg1.JRSS="AAA";
	rg1.period=0;
	rg1.quantity=13;
	vecRG.push_back(rg1);

	resourceGlut rg2;
	rg2.JRSS="AAA";
	rg2.period=1;
	rg2.quantity=13;
	vecRG.push_back(rg2);

	resourceGlut rg3;
	rg3.JRSS="AAA";
	rg3.period=2;
	rg3.quantity=14;
	vecRG.push_back(rg3);

	resourceGlut rg4;
	rg4.JRSS="BBB";
	rg4.period=0;
	rg4.quantity=14;
	vecRG.push_back(rg4);

	resourceGlut rg5;
	rg5.JRSS="BBB";
	rg5.period=1;
	rg5.quantity=14;
	vecRG.push_back(rg5);

	resourceGlut rg6;
	rg6.JRSS="BBB";
	rg6.period=2;
	rg6.quantity=15;
	vecRG.push_back(rg6);


  
  atpSetSupply(vecRG);

  solutionBomEntry solbomentry1, solbomentry2;
  std::vector<solutionBomEntry> vecSBE;
  solbomentry1.solName="AAA";
  solbomentry1.JRSS = "AAA";
  solbomentry1.quantity = 1;
  vecSBE.push_back(solbomentry1);
  solbomentry2.solName = "BBB";
  solbomentry2.JRSS = "BBB";
  solbomentry2.quantity = 1;
  vecSBE.push_back(solbomentry2);
  atpSetSolutionBom(vecSBE);
  int duration = 1;
  float quantity = 1;
  int requestedPeriod=0;
  int lateAllowance=0;
  int result;
  result=atpSingleRequest("AAA",duration,quantity,requestedPeriod,lateAllowance);
  assert(result==0); //enough supply
  quantity=20;
  resetATP(3);
  atpSetSupply(vecRG);
  atpSetSolutionBom(vecSBE);
  result=atpSingleRequest("AAA",duration,quantity,requestedPeriod,lateAllowance);
  assert(result==-1); //not enough supply
  quantity=14;
  resetATP(3);
  atpSetSupply(vecRG);
  atpSetSolutionBom(vecSBE);
  result=atpSingleRequest("AAA",duration,quantity,requestedPeriod,lateAllowance);
  assert(result==-1); //not enough supply and no slack
  lateAllowance=1;
  resetATP(3);
  atpSetSupply(vecRG);
  atpSetSolutionBom(vecSBE);
  result=atpSingleRequest("AAA",duration,quantity,requestedPeriod,lateAllowance);
  assert(result==-1); //not enough supply and not enough slack
  lateAllowance=2;
  resetATP(3);
  atpSetSupply(vecRG);
  atpSetSolutionBom(vecSBE);
  result=atpSingleRequest("AAA",duration,quantity,requestedPeriod,lateAllowance);
  assert(result==2); //not enough supply but enough slack
  quantity=15;
  resetATP(3);
  atpSetSupply(vecRG);
  atpSetSolutionBom(vecSBE);
  result=atpSingleRequest("AAA",duration,quantity,requestedPeriod,lateAllowance);
  assert(result==-1); //late allowance not enough now
  lateAllowance=5; //too big
  resetATP(3);
  atpSetSupply(vecRG);
  atpSetSolutionBom(vecSBE);
  result=atpSingleRequest("AAA",duration,quantity,requestedPeriod,lateAllowance);
  assert(result==-1000);
  quantity=14;
  resetATP(3);
  atpSetSupply(vecRG);
  atpSetSolutionBom(vecSBE);
  lateAllowance=0;
  requestedPeriod=2;
  resetATP(3);
  atpSetSupply(vecRG);
  atpSetSolutionBom(vecSBE);
  result=atpSingleRequest("AAA",duration,quantity,requestedPeriod,lateAllowance);
  assert(result==0); //can be done when requested
  quantity=14;
  lateAllowance=2;
  requestedPeriod=1;
  duration=100; //should be ok, since we truncate duration
  resetATP(3);
  atpSetSupply(vecRG);
  atpSetSolutionBom(vecSBE);
  result=atpSingleRequest("AAA",duration,quantity,requestedPeriod,lateAllowance);
  assert(result==1);
  lateAllowance=15;
  requestedPeriod=1;
  duration=100; //lateAllowance is too big
  resetATP(3);
  atpSetSupply(vecRG);
  atpSetSolutionBom(vecSBE);
  result=atpSingleRequest("AAA",duration,quantity,requestedPeriod,lateAllowance);
  assert(result==-1000);

  //more tests with a slightly more complicated scenario
  resetATP(10);
  vecSBE.clear();
  solbomentry1.solName="TestSolution";
  solbomentry1.JRSS = "AAA";
  solbomentry1.quantity = 1;
  vecSBE.push_back(solbomentry1);
  solbomentry2.solName = "TestSolution";
  solbomentry2.JRSS = "BBB";
  solbomentry2.quantity = 2;
  vecSBE.push_back(solbomentry2);
  atpSetSolutionBom(vecSBE);
  vecRG.clear();

	resourceGlut rgA1,rgA2,rgA3,rgA4,rgA5,rgA6,rgA7,rgA8,rgA9,rgA10;
	resourceGlut rgB1,rgB2,rgB3,rgB4,rgB5,rgB6,rgB7,rgB8,rgB9,rgB10;
	rgA1.JRSS="AAA";
	rgA1.period=0;
	rgA1.quantity=1;
	vecRG.push_back(rgA1);
	rgA2.JRSS="AAA";
	rgA2.period=1;
	rgA2.quantity=1;
	vecRG.push_back(rgA2);
	rgA3.JRSS="AAA";
	rgA3.period=2;
	rgA3.quantity=1;
	vecRG.push_back(rgA3);
	rgA4.JRSS="AAA";
	rgA4.period=3;
	rgA4.quantity=1;
	vecRG.push_back(rgA4);
	rgA5.JRSS="AAA";
	rgA5.period=4;
	rgA5.quantity=1;
	vecRG.push_back(rgA5);
	rgA6.JRSS="AAA";
	rgA6.period=5;
	rgA6.quantity=1;
	vecRG.push_back(rgA6);
	rgA7.JRSS="AAA";
	rgA7.period=6;
	rgA7.quantity=1;
	vecRG.push_back(rgA7);
	rgA8.JRSS="AAA";
	rgA8.period=7;
	rgA8.quantity=1;
	vecRG.push_back(rgA8);
	rgA9.JRSS="AAA";
	rgA9.period=8;
	rgA9.quantity=1;
	vecRG.push_back(rgA9);
	rgA10.JRSS="AAA";
	rgA10.period=9;
	rgA10.quantity=1;
	vecRG.push_back(rgA10);

	rgB1.JRSS="BBB";
	rgB1.period=0;
	rgB1.quantity=1;
	vecRG.push_back(rgB1);
	rgB2.JRSS="BBB";
	rgB2.period=1;
	rgB2.quantity=1;
	vecRG.push_back(rgB2);
	rgB3.JRSS="BBB";
	rgB3.period=2;
	rgB3.quantity=1;
	vecRG.push_back(rgB3);
	rgB4.JRSS="BBB";
	rgB4.period=3;
	rgB4.quantity=1;
	vecRG.push_back(rgB4);
	rgB5.JRSS="BBB";
	rgB5.period=4;
	rgB5.quantity=1;
	vecRG.push_back(rgB5);
	rgB6.JRSS="BBB";
	rgB6.period=5;
	rgB6.quantity=1;
	vecRG.push_back(rgB6);
	rgB7.JRSS="BBB";
	rgB7.period=6;
	rgB7.quantity=1;
	vecRG.push_back(rgB7);
	rgB8.JRSS="BBB";
	rgB8.period=7;
	rgB8.quantity=1;
	vecRG.push_back(rgB8);
	rgB9.JRSS="BBB";
	rgB9.period=8;
	rgB9.quantity=1;
	vecRG.push_back(rgB9);
	rgB10.JRSS="BBB";
	rgB10.period=9;
	rgB10.quantity=1;
	vecRG.push_back(rgB10);

	
  
    atpSetSupply(vecRG);

	//now try them
    quantity =1;
	duration=2;
	requestedPeriod=0;
	lateAllowance=0;
    result=atpSingleRequest("TestSolution",duration,quantity,requestedPeriod,lateAllowance);
	assert(result==-1);
	requestedPeriod=8;
	resetATP(10);
	atpSetSolutionBom(vecSBE);
    atpSetSupply(vecRG);
    result=atpSingleRequest("TestSolution",duration,quantity,requestedPeriod,lateAllowance);
	assert(result==-1);
    lateAllowance=3;
	resetATP(10);
	atpSetSolutionBom(vecSBE);
    atpSetSupply(vecRG);
    result=atpSingleRequest("TestSolution",duration,quantity,requestedPeriod,lateAllowance);
	assert(result==-1);
    //add more supply of BBB
	resetATP(10);
    atpSetSolutionBom(vecSBE);
	vecRG.clear();
	vecRG.push_back(rgA1);
	vecRG.push_back(rgA2);
	vecRG.push_back(rgA3);
	vecRG.push_back(rgA4);
	vecRG.push_back(rgA5);
	vecRG.push_back(rgA6);
	vecRG.push_back(rgA7);
	vecRG.push_back(rgA8);
	vecRG.push_back(rgA9);
	vecRG.push_back(rgA10);
	rgB1.quantity=1;
	vecRG.push_back(rgB1);
	rgB2.quantity=1;
	vecRG.push_back(rgB2);
	rgB3.quantity=2;
	vecRG.push_back(rgB3);
	rgB4.quantity=2;
	vecRG.push_back(rgB4);
	rgB5.quantity=2;
	vecRG.push_back(rgB5);
	rgB6.quantity=2;
	vecRG.push_back(rgB6);
	rgB7.quantity=2;
	vecRG.push_back(rgB7);
	rgB8.quantity=2;
	vecRG.push_back(rgB8);
	rgB9.quantity=2;
	vecRG.push_back(rgB9);
	rgB10.quantity=2;
	vecRG.push_back(rgB10);
	atpSetSupply(vecRG);

	quantity =1;
	duration=2;
	lateAllowance=0;
	requestedPeriod=0;
    result=atpSingleRequest("TestSolution",duration,quantity,requestedPeriod,lateAllowance);
	assert(result==-1);
	requestedPeriod=2;
	resetATP(10);
	atpSetSolutionBom(vecSBE);
    atpSetSupply(vecRG);
    result=atpSingleRequest("TestSolution",duration,quantity,requestedPeriod,lateAllowance);
	assert(result==0);
	requestedPeriod=9;
	resetATP(10);
	atpSetSolutionBom(vecSBE);
    atpSetSupply(vecRG);
    result=atpSingleRequest("TestSolution",duration,quantity,requestedPeriod,lateAllowance);
	assert(result==0);
	lateAllowance=3;
	requestedPeriod=0;
	resetATP(10);
	atpSetSolutionBom(vecSBE);
    atpSetSupply(vecRG);
    result=atpSingleRequest("TestSolution",duration,quantity,requestedPeriod,lateAllowance);
	assert(result==2);
	//change the supply of BBB again
	resetATP(10);
    atpSetSolutionBom(vecSBE);
	vecRG.clear();
	vecRG.push_back(rgA1);
	vecRG.push_back(rgA2);
	vecRG.push_back(rgA3);
	vecRG.push_back(rgA4);
	vecRG.push_back(rgA5);
	vecRG.push_back(rgA6);
	vecRG.push_back(rgA7);
	vecRG.push_back(rgA8);
	vecRG.push_back(rgA9);
	vecRG.push_back(rgA10);

	rgB1.quantity=1;
	vecRG.push_back(rgB1);
	rgB2.quantity=1;
	vecRG.push_back(rgB2);
	rgB3.quantity=2;
	vecRG.push_back(rgB3);
	rgB4.quantity=2;
	vecRG.push_back(rgB4);
	rgB5.quantity=2;
	vecRG.push_back(rgB5);
	rgB6.quantity=1;
	vecRG.push_back(rgB6);
	rgB7.quantity=1;
	vecRG.push_back(rgB7);
	rgB8.quantity=1;
	vecRG.push_back(rgB8);
	rgB9.quantity=1;
	vecRG.push_back(rgB9);
	rgB10.quantity=1;
	vecRG.push_back(rgB10);
    atpSetSupply(vecRG);
	lateAllowance=2;
	duration=3;
	requestedPeriod=0;
    result=atpSingleRequest("TestSolution",duration,quantity,requestedPeriod,lateAllowance);
	assert(result==2);
	requestedPeriod=2;
	resetATP(10);
	atpSetSolutionBom(vecSBE);
    atpSetSupply(vecRG);
    result=atpSingleRequest("TestSolution",duration,quantity,requestedPeriod,lateAllowance);
	assert(result==0);
	requestedPeriod=3;
	resetATP(10);
	atpSetSolutionBom(vecSBE);
    atpSetSupply(vecRG);
    result=atpSingleRequest("TestSolution",duration,quantity,requestedPeriod,lateAllowance);
	assert(result==-1);
	duration=4;
	requestedPeriod=0;
	resetATP(10);
	atpSetSolutionBom(vecSBE);
    atpSetSupply(vecRG);
    result=atpSingleRequest("TestSolution",duration,quantity,requestedPeriod,lateAllowance);
	assert(result==-1);
	requestedPeriod=2;
	resetATP(10);
	atpSetSolutionBom(vecSBE);
    atpSetSupply(vecRG);
    result=atpSingleRequest("TestSolution",duration,quantity,requestedPeriod,lateAllowance);
	assert(result==-1);

  }


  }
  catch ( SCOexception e ) {
    std::cerr <<e.what() <<std::endl;
	return 1;
   }
  catch ( DPIntException e ) {
    std::cerr <<e.what() <<std::endl;
	return 1;
  }
  catch ( DpException e) {
    std::cerr <<e.what() <<std::endl;
	return 1;
  }

#if 0
    // this one throws an exception
  bool exceptionCaught=false;
  try {
        testingMessage( "Testing rcpOpt(example_er5neg)\n");
        rcpOpt("../data/example_er5neg");
  }
  catch ( RcpOptException e ) {
        exceptionCaught = true;
  }
  assert (exceptionCaught);
#endif
 
  return 0;
}


// Display message on stdout and stderr
void testingMessage( const char * const msg )
{
  std::cerr <<msg;
  //cout <<endl <<"*****************************************"
  //     <<endl <<msg <<endl;
}
@


1.5
log
@changes to support available to promise
@
text
@d52 58
a109 2
  testingMessage( "Now testing ATP\n");
  startATP("../data/ATP_test");
d115 1
a115 1
  result=atpRequest("AAA",duration,quantity,requestedPeriod,lateAllowance);
d118 4
a121 1
  result=atpRequest("AAA",duration,quantity,requestedPeriod,lateAllowance);
d124 4
a127 1
  result=atpRequest("AAA",duration,quantity,requestedPeriod,lateAllowance);
d130 4
a133 1
  result=atpRequest("AAA",duration,quantity,requestedPeriod,lateAllowance);
d136 4
a139 1
  result=atpRequest("AAA",duration,quantity,requestedPeriod,lateAllowance);
d142 4
a145 1
  result=atpRequest("AAA",duration,quantity,requestedPeriod,lateAllowance);
d147 6
a152 3
  lateAllowance=5;
  result=atpRequest("AAA",duration,quantity,requestedPeriod,lateAllowance);
  assert(result=3);
d154 3
d159 4
a162 1
  result=atpRequest("AAA",duration,quantity,requestedPeriod,lateAllowance);
d164 268
a432 2
  resetATP("../data/ATP_example");
 
@


1.4
log
@implosion examples/code
@
text
@d51 35
@


1.3
log
@new test
@
text
@d49 4
@


1.2
log
@added trick with placing demand at *end* of solution duration, with positive
offsets, and with first periods on boms set.
@
text
@d42 8
a49 1
}
@


1.1
log
@added unit test
@
text
@d14 1
d34 1
a34 1

d42 13
@

