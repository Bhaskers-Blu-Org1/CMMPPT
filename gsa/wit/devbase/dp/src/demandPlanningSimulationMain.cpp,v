head	1.1;
access;
symbols;
locks; strict;
comment	@// @;


1.1
date	2006.05.17.17.33.53;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.1
log
@added for first time
@
text
@#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#endif

#include <iostream>
#include <vector>
#include <string>
#include "demandPlanning.h"
#include "dpException.h"


int
main (int argc, char * argv[])
{
  
  int retVal = 0;
  
  // Put Parms into a vector
  std::vector<std::string> args;
  for (int i=0; i<argc; i++) 
    args.push_back(argv[i]);
  
  {
    // Check parm passed to program
    bool parmError = false;
    
    if ( args.size()> 1 ) {
      if (args[1]=="?" ) {
        parmError = true; // set flag to provide usage info
      }
    }
    
    if ( ! parmError ) {
      if ( args.size()!=2 ) {
        // Wrong number of parms. Write message
        std::cerr 
          <<"-------------------------------------------------------"  <<std::endl
          <<"Wrong number of parmeters specified"                      <<std::endl
          <<"  Number parameters specified: " <<args.size()-1          <<std::endl
          <<"  Expected number of parameters: 1"                       <<std::endl
          <<"-------------------------------------------------------"  <<std::endl;
        parmError = true;
      }
    }
    
    
    
    if ( parmError ) {
      // Write correct usage
      std::cerr 
        <<"-------------------------------------------------------"  <<std::endl
        <<argv[0] <<" dataDirectory "                                <<std::endl
        <<"  where:"                                                 <<std::endl
        <<"    dataDirectory:"                                       <<std::endl
        <<"      Directory where input files are located and"        <<std::endl
        <<"      output files are written."                          <<std::endl
        <<"  example usage:"                                         <<std::endl
        <<"    " <<argv[0] <<" example_finalformat"                  <<std::endl
        <<"-------------------------------------------------------"  <<std::endl;
      return 1;
    }
  }
  
  try {
    //demandPlanning(args[1]);
	demandPlanningSimulation(args[1]);

  }
  catch ( DpException e ) {
    std::cerr <<e.what() <<std::endl;
    retVal = 1;
  }
  return retVal;
}


@
