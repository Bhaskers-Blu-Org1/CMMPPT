head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2006.08.17.18.11.16;	author gresh;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.01.16.21.28;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.22.19.03.35;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.3
log
@changes to support available to promise
@
text
@#ifndef DPsolutionAppData_h
#define DPsolutionAppData_h


#include "appData.h"
#include "demandPlanningProblem.h"



class DPsolutionAppData : public DPappData {
public:

	void setDuration(int duration );
  
	int getDuration()const;
  
  // default constructor
  //DPsolutionAppData();
  DPsolutionAppData(int nP);

  // destructor
  virtual ~DPsolutionAppData();
  
  // copy constructor
  DPsolutionAppData( const DPsolutionAppData& source );
  
  // assignment operator
  DPsolutionAppData&
    operator=(const DPsolutionAppData& rhs);

  virtual DPappData * clone() const;

  // Self-test
  static void test();

private:
  
  
  int duration_;
  
};



#endif
@


1.2
log
@changes related to accumulating requirements for each solution over
time (for Mark S)
@
text
@a7 2
// Demand Period
// Resource QtyFromSupply QtyAcquired
a8 2
// Demand Period
// Resource QtyFromSubs SubsResource
a11 2
  	void setReq(int period, float req );
	std::vector<float>  getReq()const;
a38 1
  std::vector<float> req_;
@


1.1
log
@new files for appdata
@
text
@d16 3
a18 1
  
d24 3
a26 2
  DPsolutionAppData();
  
d45 1
a45 1

@

