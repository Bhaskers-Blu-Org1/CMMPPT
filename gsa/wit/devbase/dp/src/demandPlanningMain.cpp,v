head	1.8;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@// @;


1.8
date	2006.08.17.18.11.15;	author gresh;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.18.13.27.04;	author gresh;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.21.15.22.42;	author gresh;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.17.17.49.17;	author gresh;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.23.18.56.10;	author gresh;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.23.15.26.45;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.23.13.50.38;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.22.15.41.58;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.02.22.15.41.58;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.8
log
@changes to support available to promise
@
text
@#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#endif

#include <iostream>
#include <vector>
#include <string>
//#include "demandPlanningMain.h"
#include "demandPlanning.h"
//#include "demandPlanningProblem.h"
#include "dpException.h"
//#include "rcpOptIntException.h"


int
main (int argc, char * argv[])
{
  
  int retVal = 0;
  
  // Put Parms into a vector
  std::vector<std::string> args;
  for (int i=0; i<argc; i++) 
    args.push_back(argv[i]);
  
  {
    // Check parm passed to program
    bool parmError = false;
    
    if ( args.size()> 1 ) {
      if (args[1]=="?" ) {
        parmError = true; // set flag to provide usage info
      }
    }
    
    if ( ! parmError ) {
      if ( args.size()!=2 ) {
        // Wrong number of parms. Write message
        std::cerr 
          <<"-------------------------------------------------------"  <<std::endl
          <<"Wrong number of parmeters specified"                      <<std::endl
          <<"  Number parameters specified: " <<args.size()-1          <<std::endl
          <<"  Expected number of parameters: 1"                       <<std::endl
          <<"-------------------------------------------------------"  <<std::endl;
        parmError = true;
      }
    }
    
    
    
    if ( parmError ) {
      // Write correct usage
      std::cerr 
        <<"-------------------------------------------------------"  <<std::endl
        <<argv[0] <<" dataDirectory "                                <<std::endl
        <<"  where:"                                                 <<std::endl
        <<"    dataDirectory:"                                       <<std::endl
        <<"      Directory where input files are located and"        <<std::endl
        <<"      output files are written."                          <<std::endl
        <<"  example usage:"                                         <<std::endl
        <<"    " <<argv[0] <<" example_finalformat"                  <<std::endl
        <<"-------------------------------------------------------"  <<std::endl;
      return 1;
    }
  }
  
  try {
    demandPlanning(args[1]);

#if 0
    startATP(args[1]);
	std::string solName = "AAA";
	int duration = 1;
	float quantity = 1;
	int requestedPeriod = 0;
	int lateAllowance = 2;
	int foo = atpRequest(solName,duration,quantity,requestedPeriod,lateAllowance);	
	resetATP(args[1]);
#endif

  }
  catch ( DpException e ) {
    std::cerr <<e.what() <<std::endl;
    retVal = 1;
  }
  return retVal;
}


@


1.7
log
@changed to "one period" solutions to better handle ongoing and wedge demands
@
text
@d70 11
a80 1
	//demandPlanningSimulation(args[1]);
@


1.6
log
@simulation for variance
@
text
@d70 1
a70 1
	demandPlanningSimulation(args[1]);
@


1.5
log
@changed model to remove intermediate operation/part to do the 1/quantity. Now I just apply the probability directly to the quantity demanded.
@
text
@d70 1
a70 1
	//demandPlanningSimulation(args[1]);
@


1.4
log
@updates
@
text
@a68 2
    // Call rcpOpt that has exception handling
	//std::string arg1(args[1]);
d70 2
a71 1
	 // demandPlanning();
@


1.3
log
@Changed to pass String rather than const char * to demandPlanning function
@
text
@d70 1
@


1.2
log
@new files
@
text
@d70 1
a70 1
    demandPlanning(args[1].c_str());
@


1.1
log
@Initial revision
@
text
@d20 48
a67 1
  int retVal;
d69 3
a71 1
       demandPlanning();
a77 1

@


1.1.1.1
log
@initial import
@
text
@@
