head	1.32;
access;
symbols;
locks; strict;
comment	@# @;


1.32
date	2009.08.12.19.10.56;	author rjw;	state dead;
branches;
next	1.31;

1.31
date	2009.08.12.15.04.59;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2009.08.12.13.29.49;	author dpc;	state Exp;
branches;
next	1.29;

1.29
date	2009.08.07.23.04.36;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2009.08.07.19.45.53;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2009.08.06.14.40.09;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2009.08.04.22.15.25;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2009.08.04.16.14.14;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2009.07.31.15.53.23;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2009.07.30.21.24.11;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2009.07.22.21.49.48;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2009.07.21.22.33.03;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.07.08.19.24.43;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.04.10.23.51.14;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.03.05.23.02.43;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.02.26.16.51.29;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.01.30.16.24.36;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.01.05.20.21.35;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.01.05.19.06.01;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.05.17.28.58;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.24.21.34.00;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.24.20.57.05;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.24.20.34.23;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.24.00.18.56;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.23.15.30.37;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.22.21.41.50;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.22.20.21.40;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.14.16.58.02;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.07.16.26.38;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.10.20.20.54.38;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.15.21.10.19;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.15.21.01.59;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Moved scripts from scripts/linux/ to scripts/.
@
text
@#!/bin/sh

#-------------------------------------------------------------------------------
# Sh Script error-test-witj
#
# Performs the complete set of terminal error tests for WIT-J.
# Compares the output to the output of a previous run of the tests.
#-------------------------------------------------------------------------------

cd $WIT_HOME/witj/test/data

rm error-out.new 2> /dev/null
rm error-out.good1 2> /dev/null


echo
echo "Running error tests for WIT-J."

#-------------------------------------------------------------------------------
# Error Tests
#
# Note: Case 9 is normally skipped: 
#    It's more than 10 times slower than the others.
#-------------------------------------------------------------------------------

../../scripts/linux/error-case-witj  1 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj  2 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj  3 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj  4 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj  5 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj  6 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj  7 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj  8 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj 10 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj 11 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj 12 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj 13 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj 14 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj 15 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj 16 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj 17 2>&1 | cat >> error-out.new

rm heapdump.*
rm javacore.*
rm     Snap.*

#-------------------------------------------------------------------------------
# Compare
#-------------------------------------------------------------------------------

echo "Comparing error-out.new with error-out.good1."
echo

cp error-out.good error-out.good1

if [ $PLATFORM = "mingw" ] 
then 
    dos2unix error-out.good1
    dos2unix error-out.new
fi


diff                                                                    \
   -I "^WIT0097I Watson Implosion Technology ("                         \
   -I "^         Run on "                                               \
   -I "^JVMDUMP"                                                        \
   -I "^      java.library.path = "                                     \
   -I "^      Offending string (as a Java String): S"                   \
   -I "^WIT0716I    Operation Name:            \"S"                     \
   -I "at sun.misc.Launcher\$AppClassLoader.loadClass(Launcher.java:"   \
   -I "at java.lang.ClassLoader.loadLibraryWithPath(ClassLoader.java:"  \
   -I "00MB of memory have been allocated by WIT-J"                     \
   -I "00MB of memory have been discarded."                             \
                                                                        \
   error-out.good1                                                      \
   error-out.new                                                        \
 > error-out.diff                                                       \

@


1.31
log
@Added space around the = signs in the if statements to make them correct.
@
text
@@


1.30
log
@Added code to handle dos2unix conversion that is needed on the mingw platform.
@
text
@d56 1
a56 1
if [ $PLATFORM="mingw" ] 
@


1.29
log
@WIT-J scripts no longer depend on $USER.
WIT-J scripts now       depend on $WIT_HOME.
WIT-J scripts now       depend on $PLATFORM.
@
text
@d13 2
d51 1
a51 1
echo "Comparing error-out.new with error-out.good."
d54 9
d75 1
a75 1
   error-out.good                                                       \
@


1.28
log
@Changed ksh to sh in scripts.
@
text
@d10 1
a10 3
WITJ_PATH=/home/$USER/u/wit/$USER/witj

cd $WITJ_PATH/test/data
@


1.27
log
@Moved the UTF-8 logic to a special print method and re-used it.
@
text
@d1 1
a1 1
#!/bin/ksh
d4 1
a4 1
# Ksh Script error-test-witj
@


1.26
log
@Added more filters to the diff.
@
text
@a59 1
   -I "^The offending String given in the BadCharacterException was: S" \
@


1.25
log
@Added a filter to the diff.
@
text
@d54 16
a69 12
diff                                                                   \
   -I "^WIT0097I Watson Implosion Technology ("                        \
   -I "^         Run on "                                              \
   -I "^JVMDUMP"                                                       \
   -I "^      java.library.path = "                                    \
   -I "at sun.misc.Launcher\$AppClassLoader.loadClass(Launcher.java:"  \
   -I "at java.lang.ClassLoader.loadLibraryWithPath(ClassLoader.java:" \
   -I "00MB of memory have been allocated by WIT-J"                    \
   -I "00MB of memory have been discarded."                            \
   error-out.good                                                      \
   error-out.new                                                       \
 > error-out.diff                                                      \
@


1.24
log
@Replaced environment variables with command line arguments.
@
text
@d54 12
a65 11
diff                                                                          \
   -I "^WIT0097I Watson Implosion Technology ("                               \
   -I "^         Run on "                                                     \
   -I "^JVMDUMP"                                                              \
   -I "^	at sun.misc.Launcher\$AppClassLoader.loadClass(Launcher.java:"\
   -I "^      java.library.path = "                                           \
   -I "00MB of memory have been allocated by WIT-J"                           \
   -I "00MB of memory have been discarded."                                   \
   error-out.good                                                             \
   error-out.new                                                              \
 > error-out.diff                                                             \
@


1.23
log
@Revised the error test scripts to the new approach.
@
text
@d10 1
a10 1
cd /home/$USER/u/wit/$USER/witj/test/data
d12 3
a14 1
rm output.new 2> /dev/null
d59 1
@


1.22
log
@Made WIT-J throw an InternalErrorException instead of a
   TerminalAppErrorException when the native library fails to load.
@
text
@d12 1
a12 4
if [ -f error-out.new ]
then
   rm error-out.new
fi
@


1.21
log
@Made WIT-J throw a TerminalAppErrorException when the C++ library could not
be loaded.
@
text
@d42 1
@


1.20
log
@Revised the testing scripts to filter out more in the diffs.
@
text
@d41 1
@


1.19
log
@Bad data file character detection.
@
text
@d53 10
a62 8
diff                                               \
   -I "^WIT0097I Watson Implosion Technology ("    \
   -I "^         Run on "                          \
   -I "^JVMDUMP"                                   \
   -I "0MB of memory have been allocated by WIT-J" \
   error-out.good                                  \
   error-out.new                                   \
 > error-out.diff                                  \
@


1.18
log
@purgeData
@
text
@d40 1
@


1.17
log
@PurgeData
@
text
@a39 1
../../scripts/linux/error-case-witj 15 2>&1 | cat >> error-out.new
@


1.16
log
@Setting wit34Allowed to false.
@
text
@d40 1
@


1.15
log
@Added code to handle errors in the execution of readData.
@
text
@d39 1
@


1.14
log
@Added code to handle running out of memory in WIT.
@
text
@d38 1
@


1.13
log
@Implemented the handling of fatal errors from WIT.
@
text
@d37 1
@


1.12
log
@Added a test for a severe error from WIT.
@
text
@d36 1
@


1.11
log
@Removed case 9 from the set of cases tested by error-test-witj.
@
text
@d27 9
a35 8
../../scripts/linux/error-case-witj 1 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj 2 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj 3 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj 4 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj 5 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj 6 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj 7 2>&1 | cat >> error-out.new
../../scripts/linux/error-case-witj 8 2>&1 | cat >> error-out.new
@


1.10
log
@Added code to handle memory errors in makeJString.
@
text
@d4 1
a4 1
# Ksh Script test-witj
d22 3
a34 1
../../scripts/linux/error-case-witj 9 2>&1 | cat >> error-out.new
@


1.9
log
@Added code to handle Java exceptions raised during the execution of JNI
   functions.
@
text
@d32 1
d45 8
a52 8
diff                                                \
   -I "^WIT0097I Watson Implosion Technology ("     \
   -I "^         Run on "                           \
   -I "^JVMDUMP"                                    \
   -I "00MB of memory have been allocated by WIT-J" \
   error-out.good                                   \
   error-out.new                                    \
 > error-out.diff                                   \
@


1.8
log
@Added code to handle a memory overflow in the C++ side of WIT-J.
@
text
@d31 1
@


1.7
log
@Added Error Test Case 6.
@
text
@d30 1
d43 8
a50 8
diff                                               \
   -I "^WIT0097I Watson Implosion Technology ("    \
   -I "^         Run on "                          \
   -I "^JVMDUMP"                                   \
   -I "00MB of memory have been allocated."        \
   error-out.good                                  \
   error-out.new                                   \
 > error-out.diff                                  \
@


1.6
log
@Split unrecoverable error testing from the rest of the tests.
@
text
@d29 5
d45 2
@


1.5
log
@Updated scripts to use the version of Java installed at $JAVA_HOME.
@
text
@d4 1
a4 1
# Ksh Script error-test-witj
d6 2
a7 1
# Runs an error test on WIT-J for the case given in the argument.
d12 11
a22 6
$JAVA_HOME/bin/java                    \
   -jar                                \
   -enableassertions                   \
   -Djava.library.path=../../cpp/linux \
    ../bytecode/witj.test.jar          \
    error-test $1                      \
d24 5
d30 3
a32 4
if [ ! -f ErrTester.out ]
then
   exit
fi
d34 2
a35 4
echo                               >> output.new
echo "---------------------------" >> output.new
echo " Contents of ErrTester.out " >> output.new
echo "---------------------------" >> output.new
d37 6
a42 2
cat ErrTester.out >> output.new
rm  ErrTester.out
@


1.4
log
@Added type checking to Attribute type conversion methods.
@
text
@d11 1
a11 1
java                                   \
@


1.3
log
@Made ErrTester display WIT output after WIT-J output.
@
text
@d16 1
a16 1
    e $1                               \
@


1.2
log
@Attempt to fix a bug in the error-test-witj script.
@
text
@d18 14
@


1.1
log
@Added a script to run the WIT-J error test.
@
text
@d14 1
a14 1
   -Djava.library.path=$witj/cpp/linux \
@

