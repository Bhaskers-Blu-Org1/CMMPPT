head	1.7;
access;
symbols;
locks; strict;
comment	@# @;


1.7
date	2009.08.13.19.45.20;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2009.08.03.19.41.21;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.31.20.11.48;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.09.22.13.01;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.24.19.04.24;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.24.18.22.11;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.24.16.15.00;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Brought instructions for setting up WIT-J up to date.
@
text
@
--------------------------------------------------------------------------------
How to Set Up WIT-J on a Linux Machine

Note:
   This process uses several scripts. To fully understand how it works, it would
   be helpful to read the content and comments in these scripts.
--------------------------------------------------------------------------------

Bob Wittrock

Revised 8/3/09


Assumptions:

* WIT has been set up on the machine / userid.

* WIT was built with exe_type=released.

* Java 6.0 has been installed on the machine.

* KornShell (Ksh) is available on the machine.

* The userid is given as "user2"; substitute any userid for this.


Steps:

1. Permanently set the JAVA_HOME environment variable to the full path name of
   the directory in which Java is located. For example, my login profile script
   contains the following line:

      export JAVA_HOME=/opt/ibm/java-i386-60

   Specifically, JAVA_HOME should be set so that the programs "javac", "jar",
   and "java" are located under $JAVA_HOME/bin and the C++ header file "jni.h"
   is located under $JAVA_HOME/include.

2. cd /home/user2/u/wit/user2

3. cvs checkout -P witj

4. cd witj

5. scripts/linux/build-witj-cpp released

6. scripts/linux/build-witj-java

7. scripts/linux/build-witj-tester

8. scripts/linux/test-witj

9. cat test/data/output.diff

10.scripts/linux/error-test-witj

11.cat test/data/error-out.diff


Notes:

* The -P option is recommended for cvs checkout of WIT-J in order to avoid some
  extraneous directories. (Directories cannot be deleted from CVS.)

* Similarly, cvs update -d should be done as cvs update -d -P.

* Step 5 builds the C++ portion of WIT-J.
  The output of this is the WIT-J/C++ native library, which is stored as a Linux
  shared object file, located as follows:
     
     /home/$USER/u/wit/$USER/witj/cpp/linux/libwitj.so

* Step 6 builds the Java portion of WIT-J.
  The output of this is the WIT-J/Java Jar file, stored as follows:

     /home/$USER/u/wit/$USER/witj/java/bytecode/witj.jar

* Step 7 builds the WIT-J Tester.
  The output of this is a set of class files, located under the following
  directory:

     /home/$USER/u/wit/$USER/witj/test/bytecode/com/ibm/witj/test

* Step 8 invokes the WIT-J Tester to run a standard set of tests of WIT-J, then
  does a diff on the output, comparing to a prior output acquired from CVS.

* Step 9 displays the difference file from Step 8. If the difference file is
  empty, then the installed version of WIT-J has passed this test. Otherwise,
  please notify me.

* Step 10 invokes the WIT-J Tester to run a set of tests of WIT-J involving
  errors that require the program to be terminated, then does a diff on the
  output, comparing to a prior output acquired from CVS.

* Step 11 displays the difference file from Step 10. If the difference file is
  empty, then the installed version of WIT-J has passed this test. Otherwise,
  please notify me.
@


1.6
log
@Revised the documentation to the current state of WIT-J.
@
text
@@


1.5
log
@*** empty log message ***
@
text
@d2 1
a2 1
--------------------------------------
d4 5
a8 1
--------------------------------------
d12 1
a12 1
Revised 7/23/09
d68 3
a70 2
* Step 5 builds the C++ portion of WIT-J, storing the result as the following
  shared object file:
d74 2
a75 2
* Step 6 builds the Java portion of WIT-J, storing the result as the following
  jar file:
d79 3
a81 2
* Step 7 builds the test code for WIT-J, storing the result as the following
  jar file:
d83 1
a83 1
     /home/$USER/u/wit/$USER/witj/test/bytecode/witj.test.jar
d85 1
a85 1
* Step 8 invokes witj.test.jar to run a standard set of tests of WIT-J, then
d92 3
a94 3
* Step 10 invokes witj.test.jar to run a set of tests of WIT-J involving errors
  that require the program to be terminated, then does a diff on the output,
  comparing to a prior output acquired from CVS.
@


1.4
log
@Revised the documentation, especially adding Set-Up-WIT-J-On-Linux.txt.
@
text
@d8 1
a8 1
Revised 7/9/09
d17 1
a17 1
* Java 1.6 (or higher) has been installed on the machine.
@


1.3
log
@Revised for Java 1.6.
@
text
@d2 1
d8 1
a8 1
Revised 6/24/09
d64 29
a92 10
* Step 8 runs a standard set of tests of WIT-J, then does a diff on the output,
  comparing to a prior output acquired from CVS. Step 9 displays the difference
  file. If the difference file is empty, then the installed version of WIT-J has
  passed this test. Otherwise, please notify me.

* Step 10 runs a set of tests of WIT-J involving errors that require the program
  to be terminated, then does a diff on the output, comparing to a prior output
  acquired from CVS. Step 11 displays the difference file. If the difference
  file is empty, then the installed version of WIT-J has passed this test.
  Otherwise, please notify me.
@


1.2
log
@Revised the documented procedure for setting up WIT-J on Linux.
@
text
@d16 1
a16 1
* Java 1.5 (or higher) has been installed on the machine.
d29 1
a29 1
      export JAVA_HOME=/usr/lib/jvm/java-1.5.0-ibm-1.5.0.6
@


1.1
log
@Changed some file names.
@
text
@d3 1
a3 1
--- -- --- -- ----- -- - ----- -------
d7 1
a7 1
Revised 11/14/08
d14 2
d41 1
a41 1
5. scripts/linux/build-witj-cpp beta
d51 4
a62 4
* In step 5, a "beta" build of the C++ portion of WIT-J is used. Any exe_type
  may be used; however, it's probably a good idea to have to the exe_type of
  WIT-J/C++ match that of WIT.

d66 1
a66 1
  passed the test. Otherwise, please notify me.
d68 5
@

