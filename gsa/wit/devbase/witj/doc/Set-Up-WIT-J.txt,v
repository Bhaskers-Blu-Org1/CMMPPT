head	1.17;
access;
symbols;
locks; strict;
comment	@# @;


1.17
date	2011.06.08.17.28.37;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.03.01.20.55.26;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2010.10.14.21.25.08;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2010.09.08.21.23.26;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2010.06.11.16.28.24;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2010.06.10.20.48.17;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2010.06.08.17.54.56;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2010.05.27.19.37.51;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2010.05.26.20.05.50;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2010.05.26.20.02.00;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.10.28.22.27.46;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.10.09.15.20.25;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.10.08.19.50.03;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.08.14.18.36.35;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.08.13.21.52.22;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.08.13.21.25.20;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.08.13.19.45.20;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Revised tests to accomodate all 4 solver embedded modes.
@
text
@
-----------------------------------
How to Set Up WIT-J for Development
-----------------------------------

This document describes how to set up WIT-J for WIT-J development purposes
(including maintaining WIT-J's ports to MinGW and Cygwin). Specifically, it
explains how to:

   * Acquire the WIT-J source files from CVS.
   * Build WIT-J and its Tester program.
   * Run the WIT-J Tester and verify its output.

At present this document applies to the following platforms:

   * Linux
   * MinGW
   * Cygwin

Note:
   This procedure uses several scripts. If you want to fully understand how it
   works (e.g., to adapt it to a new platform), it would be helpful to read the
   content and comments in these scripts. Nevertheless, the procedure described
   here can be carried out blindly, without reading the scripts, and everything
   should work fine.

Bob Wittrock

Revised 6/8/11

--------------------------------------------------------------------------------


Assumptions:

* WIT has been set up on the machine / userid.

* The IBM version of Java 6.0 has been installed on the machine.
  The IBM version of Java is available from IBM's Java Information Manager:

     http://w3.hursley.ibm.com/java/jim/

Steps:

1. Permanently set the JAVA_HOME environment variable to the full path name of
   the directory in which Java is located. For example, my login profile script
   contains the following line:

      export JAVA_HOME=/opt/ibm/java-i386-60

   Specifically, JAVA_HOME should be set so that the programs "javac", "jar",
   and "java" are located under $JAVA_HOME/bin and the C++ header file "jni.h"
   is located under $JAVA_HOME/include.

2. Permanently set the WIT_HOME environment variable to the full path name of
   the directory in which WIT-related CVS directories have been checked out,
   e.g., wit, mcl, config.  For example, my login profile script contains the
   following line:

      export WIT_HOME=/home/rjw/u/wit/rjw

3. Permanently set the PLATFORM environment variable to one of the following, as
   appropriate:

      linux
      mingw
      cygwinGcc

   For example, my login profile script contains the following line:

      export PLATFORM=linux

4. Build MCL and WIT with exe_type=released.

   * Ideally, WIT should be built with both COIN and CPLEX embedded.
   * Alternatively, it can be built with just COIN embedded or just CPLEX
     embedded or neither solver embedded. In these cases, there will be more
     differences when tests are performed.

5. cd $WIT_HOME

6. If witj is not there:

      cvs checkout -P witj

7. cd witj

8. rm cpp/$PLATFORM/Makefile

9. cvs update -d -P

10.If the platform is Cygwin:

      dos2unix scripts/*

11.scripts/build-witj-cpp

12.scripts/build-witj-java

13.scripts/build-witj-tester

14.scripts/witj-main-test

15.cat test/data/main-diff.output

16.scripts/witj-error-test

17.cat test/data/error-diff.output

18.scripts/witj-thread-test

19.cat test/data/thread-diff.output


Notes:

* Note that on Cygwin, some steps (cvs) should be done from a Windows
  environment, some steps (rm, dos2unix, scripts, and cat) should be done from a
  Cygwin environment, and some steps (permanently setting environment variables)
  should be done from both.

* The -P option is recommended for cvs checkout of WIT-J in order to avoid some
  extraneous directories. (Directories cannot be deleted from CVS.)

* Similarly, cvs update -d should be done as cvs update -d -P.

* Step 11 builds the C++ portion of WIT-J.
  The output of this is the WIT-J/C++ native library.
  On Linux, this is stored as a Shared Object file, located as follows:
     
     $WIT_HOME/witj/cpp/linux/libwitj.so

  On MinGW and Cygwin, this is stored as a Dynamic Link Library, located as
  follows:
     
     $WIT_HOME/witj/cpp/mingw/witj.dll

     $WIT_HOME/witj/cpp/cygwinGcc/witj.dll

* Step 12 builds the Java portion of WIT-J.
  The output of this is the WIT-J/Java Jar file, stored as follows:

     $WIT_HOME/witj/java/bytecode/witj.jar

* Step 13 builds the WIT-J Tester.
  The output of this is the following Jar file:

     $WIT_HOME/witj/test/bytecode/witj-test.jar

* Step 14 invokes the WIT-J Tester to run a standard set of tests of WIT-J, then
  does a diff on the output, comparing to a prior output acquired from CVS.

* Step 15 displays the difference file from Step 14. If the difference file is
  empty, then the installed version of WIT-J has passed this test. Otherwise,
  please notify me.
  If WIT was built without CPLEX embedded, there will be differences reflecting
  the absence of CPLEX.
  If WIT was built without COIN embedded, there will be differences reflecting 
  the absence of COIN.

* Step 16 invokes the WIT-J Tester to run a set of tests of WIT-J involving
  errors that require the program to be terminated, then does a diff on the
  output, comparing to a prior output acquired from CVS.

* Step 17 displays the difference file from Step 16. If the difference file
  consists only of line number differences in Java library classes (not WIT-J
  classes), then the installed version of WIT-J has passed this test. Otherwise,
  please notify me.

* Step 18 invokes the WIT-J Tester to run a set of tests of WIT-J involving
  calls from multiple threads, then does a diff on the output, comparing to a
  prior output acquired from CVS.

* Step 19 displays the difference file from Step 18. The installed version of
  WIT-J has passed this test, iff this file consists only of differences that
  indicate the output was written in a different order than before, which is an
  unavoidable consequence of the asynchronous nature of this test. In other
  words, for every line in thread-diff.output beginning with "<", there should
  be an otherwise identical line beginning with ">" and conversely. If this is
  not the case, please notify me.

* Steps 18 and 19 should be skipped, when WIT has been built with neither solver
  embedded.

* Please note that, in the MinGW case, although the build procedure uses MinGW,
  the resulting files witj.dll and witj.jar can be used on Windows *without*
  MinGW. This applies to the Cygwin case, as well.
@


1.16
log
@Made build-witj-cpp automatically use exe_type=released.
@
text
@d29 1
a29 1
Revised 10/14/10
d77 2
a78 2
     embedded. In this case, there will be more differences when tests are
     performed.
d155 5
a159 2
  please notify me. If WIT was built without CPLEX embedded, there will be
  differences reflecting the absence of CPLEX.
d182 3
@


1.15
log
@CPLEX
@
text
@d76 3
a78 2
   * Alternatively, it can be built with just COIN embedded. In this case, there
     will be more differences when tests are performed.
d96 1
a96 1
11.scripts/build-witj-cpp released
@


1.14
log
@Various updates.
@
text
@d29 1
a29 1
Revised 9/8/10
d75 4
d154 2
a155 1
  please notify me.
@


1.13
log
@Minor revisions for Cygwin.
@
text
@d29 1
a29 1
Revised 6/11/10
d81 1
a81 1
   If witj is already there:
d83 1
a83 1
      cvs update -d -P witj
d85 1
a85 1
7. cd witj
d87 1
a87 1
8. If the platform is Cygwin:
d91 1
a91 1
9. scripts/build-witj-cpp released
d93 1
a93 1
10.scripts/build-witj-java
d95 1
a95 1
11.scripts/build-witj-tester
d97 1
a97 1
12.scripts/witj-main-test
d99 1
a99 1
13.cat test/data/main-diff.output
d101 1
a101 1
14.scripts/witj-error-test
d103 1
a103 1
15.cat test/data/error-diff.output
d105 1
a105 1
16.scripts/witj-thread-test
d107 1
a107 1
17.cat test/data/thread-diff.output
d112 5
d122 1
a122 1
* Step 9 builds the C++ portion of WIT-J.
d135 1
a135 1
* Step 10 builds the Java portion of WIT-J.
d140 1
a140 1
* Step 11 builds the WIT-J Tester.
d145 1
a145 1
* Step 12 invokes the WIT-J Tester to run a standard set of tests of WIT-J, then
d148 1
a148 1
* Step 13 displays the difference file from Step 12. If the difference file is
d152 1
a152 1
* Step 14 invokes the WIT-J Tester to run a set of tests of WIT-J involving
d156 4
a159 3
* Step 15 displays the difference file from Step 14. If the difference file is
  empty, then the installed version of WIT-J has passed this test. Otherwise,
  please notify me. (On Cygwin, we seem to get a few harmless differences.)
d161 1
a161 1
* Step 16 invokes the WIT-J Tester to run a set of tests of WIT-J involving
d165 1
a165 1
* Step 17 displays the difference file from Step 16. The installed version of
@


1.12
log
@Clarification.
@
text
@d29 1
a29 1
Revised 6/10/10
d153 1
a153 1
  please notify me.
d169 1
a169 1
  MinGW.
@


1.11
log
@Minor revision.
@
text
@d29 1
a29 1
Revised 6/8/10
a37 2
* WIT was built with exe_type=released.

d73 3
a75 1
4. cd $WIT_HOME
d77 1
a77 1
5. If witj is not there:
d85 1
a85 1
6. cd witj
d87 1
a87 1
7. If the platform is Cygwin:
d91 1
a91 1
8. scripts/build-witj-cpp released
d93 1
a93 1
9. scripts/build-witj-java
d95 1
a95 1
10.scripts/build-witj-tester
d97 1
a97 1
11.scripts/witj-main-test
d99 1
a99 1
12.cat test/data/main-diff.output
d101 1
a101 1
13.scripts/witj-error-test
d103 1
a103 1
14.cat test/data/error-diff.output
d105 1
a105 1
15.scripts/witj-thread-test
d107 1
a107 1
16.cat test/data/thread-diff.output
d117 1
a117 1
* Step 8 builds the C++ portion of WIT-J.
d130 1
a130 1
* Step 9 builds the Java portion of WIT-J.
d135 1
a135 1
* Step 10 builds the WIT-J Tester.
d140 1
a140 1
* Step 11 invokes the WIT-J Tester to run a standard set of tests of WIT-J, then
d143 1
a143 1
* Step 12 displays the difference file from Step 11. If the difference file is
d147 1
a147 1
* Step 13 invokes the WIT-J Tester to run a set of tests of WIT-J involving
d151 1
a151 1
* Step 14 displays the difference file from Step 13. If the difference file is
d155 1
a155 1
* Step 15 invokes the WIT-J Tester to run a set of tests of WIT-J involving
d159 1
a159 1
* Step 16 displays the difference file from Step 15. The installed version of
d163 3
a165 3
  words, for every line in thread-diff.output beginning with "<", the should be
  an otherwise identical line  beginning with ">" and conversely. If this is not
  the case, please notify me.
@


1.10
log
@Porting to Cygwin.
@
text
@d29 1
a29 1
Revised 5/27/10
d77 7
a83 1
5. cvs checkout -P witj
@


1.9
log
@Porting WIT-J to Cygwin.
@
text
@d29 1
a29 1
Revised 5/26/10
d81 1
a81 1
7. scripts/build-witj-cpp released
d83 1
a83 1
8. scripts/build-witj-java
d85 1
a85 1
9. scripts/build-witj-tester
d87 1
a87 1
10.scripts/witj-main-test
d89 1
a89 1
11.cat test/data/main-diff.output
d91 1
a91 1
12.scripts/witj-error-test
d93 1
a93 1
13.cat test/data/error-diff.output
d95 1
a95 1
14.scripts/witj-thread-test
d97 5
a101 1
15.cat test/data/thread-diff.output
d111 1
a111 1
* Step 7 builds the C++ portion of WIT-J.
d124 1
a124 1
* Step 8 builds the Java portion of WIT-J.
d129 1
a129 1
* Step 9 builds the WIT-J Tester.
d134 1
a134 1
* Step 10 invokes the WIT-J Tester to run a standard set of tests of WIT-J, then
d137 1
a137 1
* Step 11 displays the difference file from Step 10. If the difference file is
d141 1
a141 1
* Step 12 invokes the WIT-J Tester to run a set of tests of WIT-J involving
d145 1
a145 1
* Step 13 displays the difference file from Step 12. If the difference file is
d149 1
a149 1
* Step 14 invokes the WIT-J Tester to run a set of tests of WIT-J involving
d153 1
a153 1
* Step 15 displays the difference file from Step 14. The installed version of
@


1.8
log
@Porting WIT-J to Cygwin.
@
text
@d29 1
a29 1
Revised 10/28/09
@


1.7
log
@Brought documentation up to date.
@
text
@d7 2
a8 1
(including maintaining WIT-J's port to MinGW). Specifically, it explains how to:
d18 1
d69 1
d113 2
a114 1
  On MinGW, this is stored as a Dynamic Link Library, located as follows:
d118 2
@


1.6
log
@Corrected the numbering.
@
text
@d27 1
a27 1
Revised 10/8/09
d86 1
a86 1
11.cat test/data/main-diff.out
d90 1
a90 1
13.cat test/data/error-diff.out
d94 1
a94 1
15.cat test/data/thread-diff.out
d120 1
a120 2
  The output of this is a set of class files, located under the following
  directory:
d122 1
a122 1
     $WIT_HOME/witj/test/bytecode/com/ibm/witj/test
d147 2
a148 2
  words, for every line in thread-diff.out beginning with "<", the should be an
  otherwise identical line  beginning with ">" and conversely. If this is not
@


1.5
log
@Minor update to the thread test script.
Revised the documentation to explain the thread test.
@
text
@d92 1
a92 1
12.scripts/witj-thread-test
d94 1
a94 1
13.cat test/data/thread-diff.out
@


1.4
log
@Added a requirement to use IBM's version of Java.
@
text
@d27 1
a27 1
Revised 8/14/09
d92 4
d140 12
@


1.3
log
@Added an initial blank line.
@
text
@d27 1
a27 1
Revised 8/13/09
d38 2
a39 1
* Java 6.0 has been installed on the machine.
d41 1
@


1.2
log
@Revised and renamed the document for building and running Demo1.
@
text
@d1 1
@


1.1
log
@Brought instructions for setting up WIT-J up to date.
@
text
@d1 3
a3 3
-------------------
How to Set Up WIT-J
-------------------
d5 2
a6 1
This document describes how to:
d18 1
a18 1
   This process uses several scripts. If you want to fully understand how it
d20 1
a20 1
   content and comments in these scripts. Nevertheless, the process described
d133 1
a133 1
* Please note that, in the MinGW case, although the build process uses MinGW,
@

