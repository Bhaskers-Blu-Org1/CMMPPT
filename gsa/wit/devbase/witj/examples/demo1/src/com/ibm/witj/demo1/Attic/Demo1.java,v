head	1.8;
access;
symbols;
locks; strict;
comment	@# @;


1.8
date	2009.07.28.21.37.27;	author rjw;	state dead;
branches;
next	1.7;

1.7
date	2009.07.06.21.19.27;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.06.20.59.59;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.06.20.55.44;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.06.20.53.20;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.06.20.48.34;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.06.20.22.12;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.02.22.24.45;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Simplified the build of WIT-J-Demo-1.
@
text
@
//==============================================================================
// Example WIT-J Application Program Demo1.
//
// The program builds a trivial implosion problem, solves it with heuristic
// implosion and displays the shipment schedule and the supplyVol PIP.
//==============================================================================

package       com.ibm.witj.demo1;

import        com.ibm.witj.*;
import static com.ibm.witj.Attribute.*;
import static com.ibm.witj.Part.Category.*;

import                java.util.*;

public final class Demo1
{
//------------------------------------------------------------------------------
// Main Program
//------------------------------------------------------------------------------

   public static void main (String[] theArgs)
      {
      Demo1 theDemo1;

      theDemo1 = new Demo1 ();

      theDemo1.performDemo ();
      }

//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------

   private Demo1 ()
      {
      }

//------------------------------------------------------------------------------
// performDemo ()
//------------------------------------------------------------------------------

   private void performDemo ()
      {
      try
         {
         buildProblem ();

         myProblem.heurImplode ();
         myProblem.buildPip    ();

         displaySolution ();

         myProblem.deactivate ();

         myProblem = null;
         }

      catch (WitjException theWitjException)
         {
         handleWitjException (theWitjException);
         }
      }

//------------------------------------------------------------------------------
// buildProblem ()
//
// Creates and populates myProblem.
//------------------------------------------------------------------------------

   private void buildProblem ()
      {
      Part      thePartA;
      Operation theOpnB;
      Part      thePartC;
      Demand    theDemandD;
      Demand    theDemandE;

      myProblem = Problem.newInstance ();

      myProblem.getMessageMgr ().setMesgFileName ("demo1.wmsg");

      myProblem.getGlobalAspect ().setValue (nPeriods,       2);
      myProblem.getGlobalAspect ().setValue (pipSeqFromHeur, true);

      thePartA   = Part     .newInstance (myProblem, "A",      CAPACITY);
      theOpnB    = Operation.newInstance (myProblem, "B");
                   BomEntry .newInstance (theOpnB,   thePartA);
      thePartC   = Part     .newInstance (myProblem, "C",      MATERIAL);
                   BopEntry .newInstance (theOpnB,   thePartC);
      theDemandD = Demand   .newInstance (thePartC,  "D");
      theDemandE = Demand   .newInstance (thePartC,  "E");

      thePartC  .setValue (buildNstn, true);

      thePartA  .setValue (supplyVol, new double[]{30,  0});
      thePartC  .setValue (supplyVol, new double[]{30, 10});

      theDemandD.setValue (demandVol, new double[]{20, 20});
      theDemandE.setValue (demandVol, new double[]{20, 20});

      theDemandD.setVectorToScalar (priority, 1);
      theDemandD.setVectorToScalar (priority, 2);
      }

//------------------------------------------------------------------------------
// displaySolution ()
//
// Displays the shipment schedule and the supplyVol pegging from PIP.
//------------------------------------------------------------------------------

   private void displaySolution ()
      {
      double[]                       shipVolArr;
      int                            thePer;
      ArrayList <AllocTriple <Part>> supplyVolPip;

      for (Demand theDemand: myProblem.getDemands ())
         {
         shipVolArr = theDemand.getValue (shipVol);

         for (thePer = 0; thePer < 2; thePer ++)
            {
            if (shipVolArr[thePer] < .000001)
               continue;

            System.out.printf (
               "%n"
             + "Demand %s, Period %d:          shipVol = %2.0f%n",
               theDemand.getValue (demandName),
               thePer,
               shipVolArr[thePer]);

            supplyVolPip = theDemand.getSupplyVolPip (thePer);
            
            for (AllocTriple <Part> theTriple: supplyVolPip)
               {
               System.out.printf (
                  "Part   %s, Period %d: pegged supplyVol = %2.0f%n",
                  theTriple.getRoot   ().getValue (partName),
                  theTriple.getPeriod (),
                  theTriple.getVolume ());
               }
            }
         }
      }

//------------------------------------------------------------------------------
// handleWitjException (theWitjException)
//
// Handles any exception thrown from WIT-J.
//------------------------------------------------------------------------------

   private void handleWitjException (WitjException theWitjException)
      {
      theWitjException.printStackTrace ();

      if (! TerminalException.witjHasTerminated ())
         {
         if (myProblem != null)
            {
            if (myProblem.isActive ())
               {
               myProblem.deactivate ();
               }

            myProblem = null;
            }
         }

      System.out.printf (
         "%n"
       + "Demo1 is terminating due to the above exception.%n");

      System.exit (3);
      }

//------------------------------------------------------------------------------
// myProblem
//
// The Problem for this WIT-J application.
//------------------------------------------------------------------------------

   Problem myProblem = null;
}
@


1.7
log
@Minor revision.
@
text
@@


1.6
log
@*** empty log message ***
@
text
@d62 1
a62 1
         handle (theWitjException);
d150 1
a150 1
// handle (theWitjException)
d155 1
a155 1
   private void handle (WitjException theWitjException)
@


1.5
log
@Trivial revision.
@
text
@d3 1
a3 1
// Example WIt-J Application Program Demo1.
@


1.4
log
@Trivial revision.
@
text
@d3 1
a3 1
// WIT-J Example Program Demo1.
@


1.3
log
@Updated to reflect the WIT-J class name change from GeneralException to
   WitjException.
@
text
@d59 1
a185 2

//==============================================================================
@


1.2
log
@Added exception handling.
@
text
@d59 1
a59 1
      catch (GeneralException theGeneralException)
d61 1
a61 1
         handle (theGeneralException);
d149 1
a149 1
// handle (theGeneralException)
d151 1
a151 1
// Handles any exception thrown from WIT-J:
d154 1
a154 1
   private void handle (GeneralException theGeneralException)
d156 1
a156 1
      theGeneralException.printStackTrace ();
@


1.1
log
@Added the Demo1 example.
@
text
@d19 1
a19 2
//==============================================================================
// Public Methods
d21 1
a21 1
//==============================================================================
d32 3
a34 3
//==============================================================================
// Private Constructor
//==============================================================================
a39 4
//==============================================================================
// Private Methods
//==============================================================================

d46 3
a48 1
      buildProblem ();
d50 2
a51 2
      myProblem.heurImplode ();
      myProblem.buildPip    ();
d53 1
a53 1
      displaySolution ();
d55 1
a55 1
      myProblem.deactivate ();
d57 6
a62 1
      myProblem = null;
d109 1
a109 1
// Displays:
d148 29
a176 3
//==============================================================================
// Private Fields
//==============================================================================
@

