head	1.12;
access;
symbols;
locks; strict;
comment	@# @;


1.12
date	2009.07.29.19.02.11;	author rjw;	state dead;
branches;
next	1.11;

1.11
date	2009.06.24.21.36.43;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.06.15.15.54.11;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.05.08.22.13.11;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.04.15.18.40.51;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.03.13.19.32.20;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.03.12.22.45.19;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.26.20.10.59;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.25.15.28.47;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.20.20.05.50;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.22.13.43.29;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.21.21.12.14;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Changed name of class Lister to WitJPartLister.
Put class WitJPartLister into an unnamed package.
@
text
@
//==============================================================================
// WIT-J Example Source File Lister.java.
//
// Contains the declaration of class Lister.
//==============================================================================

package       com.ibm.witj.partlister;

import        com.ibm.witj.*;
import static com.ibm.witj.Attribute.*;

//==============================================================================
// Class Lister
//
// This class is the complete implementation of the WIT-J example application
// program "partlister".
// The partlister program reads in the WIT data file "diner.data", then prints
// out the following information for each Part in the Problem:
//
//    partName
//    supplyVol
//    the operationName of the Operation associated with each BomEntry
//    associated with the part
//==============================================================================

public final class Lister
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// Main Program.
//------------------------------------------------------------------------------

   public static void main (String[] theArgs)
      {
      Lister theLister;

      theLister = new Lister ();

      theLister.listParts ();
      }

//==============================================================================
// Private Constructor
//==============================================================================

   private Lister ()
      {
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// listParts ()
//
// Reads the file and lists the Parts.
//------------------------------------------------------------------------------

   private void listParts ()
      {
      Problem  theProblem;
      int      nPeriodsVal;
      double[] supplyVolArr;

      theProblem = Problem.newInstance ();

      theProblem.
         getMessageMgr ().
            setMesgTimesPrint (MessageGroup.INFORMATIONAL, 0);
      
      theProblem.readData ("diner.data");

      nPeriodsVal  = theProblem.getGlobalAspect ().getValue (nPeriods);

      supplyVolArr = new double[nPeriodsVal];

      System.out.printf (
         "%n"                         +
         "Parts in \"diner.data\":%n" +
         "%n");

      for (Part thePart: theProblem.getParts ())
         {
         System.out.printf (
            "%s:%n"         +
            "   SupplyVol:",
            thePart.getValue (partName));

         thePart.getValue (supplyVol, supplyVolArr);

         for (double theDbl: supplyVolArr)
            System.out.printf (
               " %.0f",
               theDbl);

         System.out.printf (
            "%n"           +
            "   Used by:%n");

         for (BomEntry theBomEnt: thePart.getBomEntries ())
            System.out.printf (
               "      %s%n",
               theBomEnt.getOperation ().getValue (operationName));

         System.out.printf ("%n");
         }

      theProblem.deactivate ();
      }

//==============================================================================

}
@


1.11
log
@Used getParts () instead of getComponents ().
@
text
@@


1.10
log
@Replaced public accessor methods for the Attributes with piublic fields.
@
text
@a68 1
      Part     thePart;
d87 6
a92 4
      for (Component theComp: theProblem.getComponents ())
         if (theComp instanceof Part)
            {
            thePart = (Part) theComp;
d94 3
d98 6
a103 10
               "%s:%n"         +
               "   SupplyVol:",
               thePart.getValue (partName));

            thePart.getValue (supplyVol, supplyVolArr);

            for (double theDbl: supplyVolArr)
               System.out.printf (
                  " %.0f",
                  theDbl);
d105 1
d107 2
a108 7
               "%n"           +
               "   Used by:%n");

            for (BomEntry theBomEnt: thePart.getBomEntries ())
               System.out.printf (
                  "      %s%n",
                  theBomEnt.getOperation ().getValue (operationName));
d110 2
a111 2
            System.out.printf ("%n");
            }
@


1.9
log
@Removed the "enabled" concept from WIT-J.
@
text
@d79 1
a79 1
      nPeriodsVal  = theProblem.getGlobalAspect ().getValue (nPeriods ());
d96 1
a96 1
               thePart.getValue (partName ()));
d98 1
a98 1
            thePart.getValue (supplyVol (), supplyVolArr);
d112 1
a112 1
                  theBomEnt.getOperation ().getValue (operationName ()));
@


1.8
log
@Made partlister work correctly with the current version of WIT-J.
@
text
@a76 2
      theProblem.enable ();

@


1.7
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d81 1
a81 1
      nPeriodsVal  = theProblem.getGlobalComponent ().getValue (nPeriods ());
d119 1
a119 1
      theProblem.shutDown ();
@


1.6
log
@Changed name of GlobalElement classes to GlobalComponent.
@
text
@d90 2
a91 2
      for (Element theElement: theProblem.getElements ())
         if (theElement instanceof Part)
d93 1
a93 1
            thePart = (Part) theElement;
@


1.5
log
@Changed the default value of quite mode from false to true.
Changed MessageMgr method names:
   setQuietMode ==> setQuiet
   getQuietMode ==> isQuiet
@
text
@d81 1
a81 1
      nPeriodsVal  = theProblem.getGlobalElement ().getValue (nPeriods ());
@


1.4
log
@Removed class Session from the public interface.
@
text
@a72 2
      theProblem.getMessageMgr ().setQuietMode (true);

@


1.3
log
@Method name changes:
   theElement.set (...) ==> theElement.setValue (...)
   theElement.get (...) ==> theElement.getValue (...)
@
text
@a65 1
      Session  theSession;
d71 1
a71 1
      theSession = Session.newInstance ();
d73 1
a73 1
      theSession.getMessageMgr ().setQuietMode (true);
d75 1
a75 1
      theSession.
d79 1
a79 1
      theProblem   = Problem.newInstance (theSession);
d121 1
a121 1
      theSession.shutDown ();
@


1.2
log
@Changed name of generic class AttSpec <V> to Attribute <V>.
@
text
@d84 1
a84 1
      nPeriodsVal  = theProblem.getGlobalElement ().get (nPeriods ());
d101 1
a101 1
               thePart.get (partName ()));
d103 1
a103 1
            thePart.get (supplyVol (), supplyVolArr);
d117 1
a117 1
                  theBomEnt.getOperation ().get (operationName ()));
@


1.1
log
@Added the WIT-J example application program "partlister".
@
text
@d11 1
a11 1
import static com.ibm.witj.AttSpec.*;
@

