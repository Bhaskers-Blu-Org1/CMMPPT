head	1.28;
access;
symbols;
locks; strict;
comment	@ * @;


1.28
date	2011.05.04.22.49.04;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.04.12.00.33.14;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.04.01.19.23.36;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.02.25.16.06.53;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2010.04.20.20.55.07;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2010.04.19.20.48.02;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2010.04.17.00.20.19;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2010.04.13.23.10.42;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.03.13.19.32.19;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.03.13.16.36.08;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.03.12.22.45.19;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.12.22.16.29.12;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.12.15.17.28.48;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.12.12.19.29.26;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.12.03.18.28.49;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.11.21.15.49.15;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.10.14.22.04.38;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.10.07.18.50.24;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.10.06.22.14.03;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.10.06.14.42.38;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.10.01.22.55.33;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.04.15.07.59;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.08.29.15.34.42;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.08.28.18.30.37;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.08.27.15.30.46;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.06.18.48.21;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.01.16.29.32;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.07.22.21.08.59;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.28
log
@setValue ==> set
getValue ==> get
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source file ScalarAtts.C.
//
// Contains the implementations of the following class templates:
//
//    ProblemScalarAtt <Value>
//       PartScalarAtt <Value>
//     DemandScalarAtt <Value>
//        OpnScalarAtt <Value>
//     BomEntScalarAtt <Value>
//        SubScalarAtt <Value>
//     BopEntScalarAtt <Value>
//
// Contains the explicit instantiation of each of these class templates.
//
// Contains the implementation of the following class:
//
//    StringProblemScalarAtt
//------------------------------------------------------------------------------

#include <ScalarAtts.h>
#include       <Part.h>
#include     <Demand.h>
#include  <Operation.h>
#include   <BomEntry.h>
#include <Substitute.h>
#include   <BopEntry.h>
#include  <StringJOR.h>

//------------------------------------------------------------------------------
// Implementation of class template ProblemScalarAtt.
//------------------------------------------------------------------------------

template <typename Value>
      WitJ::ProblemScalarAtt <Value>::ProblemScalarAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "Problem"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   EXCEPTION_ASSERT (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Value>
      WitJ::ProblemScalarAtt <Value>::~ProblemScalarAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Value>
      void WitJ::ProblemScalarAtt <Value>::set (
         Component *,
         Value       theValue)
   {
   EXCEPTION_ASSERT (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (getWitRun (), theValue);
   }

//------------------------------------------------------------------------------

template <typename Value>
      void WitJ::ProblemScalarAtt <Value>::get (
         Component *,
         Value &     theValue)
   {
   myGetFuncPtr_ (getWitRun (), & theValue);
   }

//------------------------------------------------------------------------------

template <typename Value>
      bool WitJ::ProblemScalarAtt <Value>::isModifiable ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------

template <typename Value>
      bool WitJ::ProblemScalarAtt <Value>::valueTypeMatches (
         const std::string & theTypeName)
   {
   return scalarTypeMatches <Value> (theTypeName);
   }

//------------------------------------------------------------------------------
// Implementation of class template PartScalarAtt.
//------------------------------------------------------------------------------

template <typename Value>
      WitJ::PartScalarAtt <Value>::PartScalarAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "Part"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   EXCEPTION_ASSERT (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Value>
      WitJ::PartScalarAtt <Value>::~PartScalarAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Value>
      void WitJ::PartScalarAtt <Value>::set (
         Component * theComp,
         Value       theValue)
   {
   Part * thePart;

   thePart = theComp->asPart ();

   EXCEPTION_ASSERT (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (getWitRun (), thePart->getPartName (), theValue);
   }

//------------------------------------------------------------------------------

template <typename Value>
      void WitJ::PartScalarAtt <Value>::get (
         Component * theComp,
         Value &     theValue)
   {
   Part * thePart;

   thePart = theComp->asPart ();

   myGetFuncPtr_ (getWitRun (), thePart->getPartName (), & theValue);
   }

//------------------------------------------------------------------------------

template <typename Value>
      bool WitJ::PartScalarAtt <Value>::isModifiable ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------

template <typename Value>
      bool WitJ::PartScalarAtt <Value>::valueTypeMatches (
         const std::string & theTypeName)
   {
   return scalarTypeMatches <Value> (theTypeName);
   }

//------------------------------------------------------------------------------
// Implementation of class template DemandScalarAtt.
//------------------------------------------------------------------------------

template <typename Value>
      WitJ::DemandScalarAtt <Value>::DemandScalarAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "Demand"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   EXCEPTION_ASSERT (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Value>
      WitJ::DemandScalarAtt <Value>::~DemandScalarAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Value>
      void WitJ::DemandScalarAtt <Value>::set (
         Component * theComp,
         Value       theValue)
   {
   Demand * theDemand;

   theDemand = theComp->asDemand ();

   EXCEPTION_ASSERT (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (
      getWitRun                (),
      theDemand->getPartName   (),
      theDemand->getDemandName (),
      theValue);
   }

//------------------------------------------------------------------------------

template <typename Value>
      void WitJ::DemandScalarAtt <Value>::get (
         Component * theComp,
         Value &     theValue)
   {
   Demand * theDemand;

   theDemand = theComp->asDemand ();

   myGetFuncPtr_ (
      getWitRun                (),
      theDemand->getPartName   (),
      theDemand->getDemandName (),
    & theValue);
   }

//------------------------------------------------------------------------------

template <typename Value>
      bool WitJ::DemandScalarAtt <Value>::isModifiable ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------

template <typename Value>
      bool WitJ::DemandScalarAtt <Value>::valueTypeMatches (
         const std::string & theTypeName)
   {
   return scalarTypeMatches <Value> (theTypeName);
   }

//------------------------------------------------------------------------------
// Implementation of class template OpnScalarAtt.
//------------------------------------------------------------------------------

template <typename Value>
      WitJ::OpnScalarAtt <Value>::OpnScalarAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "Operation"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   EXCEPTION_ASSERT (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Value>
      WitJ::OpnScalarAtt <Value>::~OpnScalarAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Value>
      void WitJ::OpnScalarAtt <Value>::set (
         Component * theComp,
         Value       theValue)
   {
   Operation * theOpn;

   theOpn = theComp->asOperation ();

   EXCEPTION_ASSERT (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (getWitRun (), theOpn->getOperationName (), theValue);
   }

//------------------------------------------------------------------------------

template <typename Value>
      void WitJ::OpnScalarAtt <Value>::get (
         Component * theComp,
         Value &     theValue)
   {
   Operation * theOpn;

   theOpn = theComp->asOperation ();

   myGetFuncPtr_ (getWitRun (), theOpn->getOperationName (), & theValue);
   }

//------------------------------------------------------------------------------

template <typename Value>
      bool WitJ::OpnScalarAtt <Value>::isModifiable ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------

template <typename Value>
      bool WitJ::OpnScalarAtt <Value>::valueTypeMatches (
         const std::string & theTypeName)
   {
   return scalarTypeMatches <Value> (theTypeName);
   }

//------------------------------------------------------------------------------
// Implementation of class template BomEntScalarAtt.
//------------------------------------------------------------------------------

template <typename Value>
      WitJ::BomEntScalarAtt <Value>::BomEntScalarAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "BomEntry"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   EXCEPTION_ASSERT (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Value>
      WitJ::BomEntScalarAtt <Value>::~BomEntScalarAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Value>
      void WitJ::BomEntScalarAtt <Value>::set (
         Component * theComp,
         Value       theValue)
   {
   BomEntry * theBomEnt;

   theBomEnt = theComp->asBomEntry ();

   EXCEPTION_ASSERT (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (
      getWitRun                   (),
      theBomEnt->getOperationName (),
      theBomEnt->getBomIndex      (),
      theValue);
   }

//------------------------------------------------------------------------------

template <typename Value>
      void WitJ::BomEntScalarAtt <Value>::get (
         Component * theComp,
         Value &     theValue)
   {
   BomEntry * theBomEnt;

   theBomEnt = theComp->asBomEntry ();

   myGetFuncPtr_ (
      getWitRun                   (),
      theBomEnt->getOperationName (),
      theBomEnt->getBomIndex      (),
    & theValue);
   }

//------------------------------------------------------------------------------

template <typename Value>
      bool WitJ::BomEntScalarAtt <Value>::isModifiable ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------

template <typename Value>
      bool WitJ::BomEntScalarAtt <Value>::valueTypeMatches (
         const std::string & theTypeName)
   {
   return scalarTypeMatches <Value> (theTypeName);
   }

//------------------------------------------------------------------------------
// Implementation of class template SubScalarAtt.
//------------------------------------------------------------------------------

template <typename Value>
      WitJ::SubScalarAtt <Value>::SubScalarAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "Substitute"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   EXCEPTION_ASSERT (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Value>
      WitJ::SubScalarAtt <Value>::~SubScalarAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Value>
      void WitJ::SubScalarAtt <Value>::set (
         Component * theComp,
         Value       theValue)
   {
   Substitute * theSub;

   theSub = theComp->asSubstitute ();

   EXCEPTION_ASSERT (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (
      getWitRun                (),
      theSub->getOperationName (),
      theSub->getBomIndex      (),
      theSub->getSubIndex      (),
      theValue);
   }

//------------------------------------------------------------------------------

template <typename Value>
      void WitJ::SubScalarAtt <Value>::get (
         Component * theComp,
         Value &     theValue)
   {
   Substitute * theSub;

   theSub = theComp->asSubstitute ();

   myGetFuncPtr_ (
      getWitRun                (),
      theSub->getOperationName (),
      theSub->getBomIndex      (),
      theSub->getSubIndex      (),
    & theValue);
   }

//------------------------------------------------------------------------------

template <typename Value>
      bool WitJ::SubScalarAtt <Value>::isModifiable ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------

template <typename Value>
      bool WitJ::SubScalarAtt <Value>::valueTypeMatches (
         const std::string & theTypeName)
   {
   return scalarTypeMatches <Value> (theTypeName);
   }

//------------------------------------------------------------------------------
// Implementation of class template BopEntScalarAtt.
//------------------------------------------------------------------------------

template <typename Value>
      WitJ::BopEntScalarAtt <Value>::BopEntScalarAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "BopEntry"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   EXCEPTION_ASSERT (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Value>
      WitJ::BopEntScalarAtt <Value>::~BopEntScalarAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Value>
      void WitJ::BopEntScalarAtt <Value>::set (
         Component * theComp,
         Value       theValue)
   {
   BopEntry * theBopEnt;

   theBopEnt = theComp->asBopEntry ();

   EXCEPTION_ASSERT (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (
      getWitRun                   (),
      theBopEnt->getOperationName (),
      theBopEnt->getBopIndex      (),
      theValue);
   }

//------------------------------------------------------------------------------

template <typename Value>
      void WitJ::BopEntScalarAtt <Value>::get (
         Component * theComp,
         Value &     theValue)
   {
   BopEntry * theBopEnt;

   theBopEnt = theComp->asBopEntry ();

   myGetFuncPtr_ (
      getWitRun                   (),
      theBopEnt->getOperationName (),
      theBopEnt->getBopIndex      (),
    & theValue);
   }

//------------------------------------------------------------------------------

template <typename Value>
      bool WitJ::BopEntScalarAtt <Value>::isModifiable ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------

template <typename Value>
      bool WitJ::BopEntScalarAtt <Value>::valueTypeMatches (
         const std::string & theTypeName)
   {
   return scalarTypeMatches <Value> (theTypeName);
   }

//------------------------------------------------------------------------------
// Explicit instantiation of the class templates implemented in this file.
//------------------------------------------------------------------------------

template class WitJ::ProblemScalarAtt <int>;
template class WitJ::   PartScalarAtt <int>;
template class WitJ:: DemandScalarAtt <int>;
template class WitJ::    OpnScalarAtt <int>;
template class WitJ:: BomEntScalarAtt <int>;
template class WitJ::    SubScalarAtt <int>;
template class WitJ:: BopEntScalarAtt <int>;

template class WitJ::ProblemScalarAtt <double>;
template class WitJ::   PartScalarAtt <double>;
template class WitJ:: DemandScalarAtt <double>;
template class WitJ::    OpnScalarAtt <double>;
template class WitJ:: BomEntScalarAtt <double>;
template class WitJ::    SubScalarAtt <double>;
template class WitJ:: BopEntScalarAtt <double>;

//------------------------------------------------------------------------------
// Implementation of class template StringProblemScalarAtt.
//------------------------------------------------------------------------------

WitJ::StringProblemScalarAtt::StringProblemScalarAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "Problem"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   EXCEPTION_ASSERT (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

WitJ::StringProblemScalarAtt::~StringProblemScalarAtt ()
   {
   }

//------------------------------------------------------------------------------

void WitJ::StringProblemScalarAtt::set (Component *, const char * theCStr)
   {
   EXCEPTION_ASSERT (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (getWitRun (), theCStr);
   }

//------------------------------------------------------------------------------

void WitJ::StringProblemScalarAtt::get (
      Component *,
      StringJOR & theStringJOR)
   {
   char * theCString;

   myGetFuncPtr_ (getWitRun (), & theCString);

   theStringJOR.makeJavaString (theCString);

   witFree (theCString);
   }

//------------------------------------------------------------------------------

bool WitJ::StringProblemScalarAtt::isModifiable ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------

bool WitJ::StringProblemScalarAtt::valueTypeMatches (
      const std::string & theTypeName)
   {
   return (theTypeName == "String");
   }
@


1.27
log
@Class StringJOR
@
text
@d58 1
a58 1
      void WitJ::ProblemScalarAtt <Value>::setValue (
d70 1
a70 1
      void WitJ::ProblemScalarAtt <Value>::getValue (
d122 1
a122 1
      void WitJ::PartScalarAtt <Value>::setValue (
d138 1
a138 1
      void WitJ::PartScalarAtt <Value>::getValue (
d194 1
a194 1
      void WitJ::DemandScalarAtt <Value>::setValue (
d214 1
a214 1
      void WitJ::DemandScalarAtt <Value>::getValue (
d274 1
a274 1
      void WitJ::OpnScalarAtt <Value>::setValue (
d290 1
a290 1
      void WitJ::OpnScalarAtt <Value>::getValue (
d346 1
a346 1
      void WitJ::BomEntScalarAtt <Value>::setValue (
d366 1
a366 1
      void WitJ::BomEntScalarAtt <Value>::getValue (
d426 1
a426 1
      void WitJ::SubScalarAtt <Value>::setValue (
d447 1
a447 1
      void WitJ::SubScalarAtt <Value>::getValue (
d508 1
a508 1
      void WitJ::BopEntScalarAtt <Value>::setValue (
d528 1
a528 1
      void WitJ::BopEntScalarAtt <Value>::getValue (
d605 1
a605 1
void WitJ::StringProblemScalarAtt::setValue (Component *, const char * theCStr)
d614 1
a614 1
void WitJ::StringProblemScalarAtt::getValue (
@


1.26
log
@Replaced newHeldCString with copyInto.
@
text
@d21 8
a28 8
#include  <ScalarAtts.h>
#include        <Part.h>
#include      <Demand.h>
#include   <Operation.h>
#include    <BomEntry.h>
#include  <Substitute.h>
#include    <BopEntry.h>
#include <WitVecOwner.h>
d616 1
a616 1
      WitStringOwner & theWSO)
d618 1
a618 1
   char * theWitString;
d620 1
a620 1
   myGetFuncPtr_ (getWitRun (), & theWitString);
d622 3
a624 1
   theWSO.acquireWitVec (theWitString);
@


1.25
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@d89 1
a89 1
         const std::string theTypeName)
d161 1
a161 1
         const std::string theTypeName)
d241 1
a241 1
         const std::string theTypeName)
d313 1
a313 1
         const std::string theTypeName)
d393 1
a393 1
         const std::string theTypeName)
d475 1
a475 1
         const std::string theTypeName)
d555 1
a555 1
         const std::string theTypeName)
d635 1
a635 1
      const std::string theTypeName)
@


1.24
log
@Multi-Obj Mode
@
text
@d6 7
a12 7
//    GlobalScalarAtt <Value>
//      PartScalarAtt <Value>
//    DemandScalarAtt <Value>
//       OpnScalarAtt <Value>
//    BomEntScalarAtt <Value>
//       SubScalarAtt <Value>
//    BopEntScalarAtt <Value>
d18 1
a18 1
//    StringGlobalScalarAtt
d31 1
a31 1
// Implementation of class template GlobalScalarAtt.
d35 1
a35 1
      WitJ::GlobalScalarAtt <Value>::GlobalScalarAtt (
d41 1
a41 1
         Att           (theAttBldr, theName, "GlobalAspect"),
d51 1
a51 1
      WitJ::GlobalScalarAtt <Value>::~GlobalScalarAtt ()
d58 1
a58 1
      void WitJ::GlobalScalarAtt <Value>::setValue (
d70 1
a70 1
      void WitJ::GlobalScalarAtt <Value>::getValue (
d80 1
a80 1
      bool WitJ::GlobalScalarAtt <Value>::isModifiable ()
d88 1
a88 1
      bool WitJ::GlobalScalarAtt <Value>::valueTypeMatches (
d564 15
a578 15
template class WitJ::GlobalScalarAtt <int>;
template class WitJ::  PartScalarAtt <int>;
template class WitJ::DemandScalarAtt <int>;
template class WitJ::   OpnScalarAtt <int>;
template class WitJ::BomEntScalarAtt <int>;
template class WitJ::   SubScalarAtt <int>;
template class WitJ::BopEntScalarAtt <int>;

template class WitJ::GlobalScalarAtt <double>;
template class WitJ::  PartScalarAtt <double>;
template class WitJ::DemandScalarAtt <double>;
template class WitJ::   OpnScalarAtt <double>;
template class WitJ::BomEntScalarAtt <double>;
template class WitJ::   SubScalarAtt <double>;
template class WitJ::BopEntScalarAtt <double>;
d581 1
a581 1
// Implementation of class template StringGlobalScalarAtt.
d584 1
a584 1
WitJ::StringGlobalScalarAtt::StringGlobalScalarAtt (
d590 1
a590 1
         Att           (theAttBldr, theName, "GlobalAspect"),
d599 1
a599 1
WitJ::StringGlobalScalarAtt::~StringGlobalScalarAtt ()
d605 1
a605 1
void WitJ::StringGlobalScalarAtt::setValue (Component *, const char * theCStr)
d614 1
a614 1
void WitJ::StringGlobalScalarAtt::getValue (
d627 1
a627 1
bool WitJ::StringGlobalScalarAtt::isModifiable ()
d634 1
a634 1
bool WitJ::StringGlobalScalarAtt::valueTypeMatches (
@


1.23
log
@Multi-Obj Mode
@
text
@d21 8
a28 8
#include <ScalarAtts.h>
#include       <Part.h>
#include     <Demand.h>
#include  <Operation.h>
#include   <BomEntry.h>
#include <Substitute.h>
#include   <BopEntry.h>
#include     <VecWoa.h>
d616 1
a616 1
      VecWoa <char> & theStringWoa)
d622 1
a622 1
   theStringWoa.acquireWitVec (theWitString);
@


1.22
log
@Multi-Obj Mode
@
text
@d618 1
a618 1
   char * theCString;
d620 1
a620 1
   myGetFuncPtr_ (getWitRun (), & theCString);
d622 1
a622 1
   theStringWoa.acquire (theCString);
@


1.21
log
@Implemented String StdAttImps.
@
text
@d28 1
a28 1
#include  <StringWoa.h>
d616 1
a616 1
      StringWoa & theStringWoa)
d618 5
a622 1
   myGetFuncPtr_ (getWitRun (), theStringWoa.getCStrAddr ());
@


1.20
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d15 4
d28 1
d579 56
@


1.19
log
@Changed name of GlobalComponent classes to GlobalAspect.
@
text
@d54 2
a55 2
         Element * theElement,
         Value     theValue)
d66 2
a67 2
         Element * theElement,
         Value &   theValue)
d118 2
a119 2
         Element * theElement,
         Value     theValue)
d123 1
a123 1
   thePart = theElement->asPart ();
d134 2
a135 2
         Element * theElement,
         Value &   theValue)
d139 1
a139 1
   thePart = theElement->asPart ();
d190 2
a191 2
         Element * theElement,
         Value     theValue)
d195 1
a195 1
   theDemand = theElement->asDemand ();
d210 2
a211 2
         Element * theElement,
         Value &   theValue)
d215 1
a215 1
   theDemand = theElement->asDemand ();
d270 2
a271 2
         Element * theElement,
         Value     theValue)
d275 1
a275 1
   theOpn = theElement->asOperation ();
d286 2
a287 2
         Element * theElement,
         Value &   theValue)
d291 1
a291 1
   theOpn = theElement->asOperation ();
d342 2
a343 2
         Element * theElement,
         Value     theValue)
d347 1
a347 1
   theBomEnt = theElement->asBomEntry ();
d362 2
a363 2
         Element * theElement,
         Value &   theValue)
d367 1
a367 1
   theBomEnt = theElement->asBomEntry ();
d422 2
a423 2
         Element * theElement,
         Value     theValue)
d427 1
a427 1
   theSub = theElement->asSubstitute ();
d443 2
a444 2
         Element * theElement,
         Value &   theValue)
d448 1
a448 1
   theSub = theElement->asSubstitute ();
d504 2
a505 2
         Element * theElement,
         Value     theValue)
d509 1
a509 1
   theBopEnt = theElement->asBopEntry ();
d524 2
a525 2
         Element * theElement,
         Value &   theValue)
d529 1
a529 1
   theBopEnt = theElement->asBopEntry ();
@


1.18
log
@Changed name of GlobalElement classes to GlobalComponent.
@
text
@d17 7
a23 8
#include      <ScalarAtts.h>
#include <GlobalComponent.h>
#include            <Part.h>
#include          <Demand.h>
#include       <Operation.h>
#include        <BomEntry.h>
#include      <Substitute.h>
#include        <BopEntry.h>
d36 1
a36 1
         Att           (theAttBldr, theName, "GlobalComponent"),
@


1.17
log
@Implemented EXCEPTION_ASSERT and ABORTING_ASSERT.
@
text
@d17 8
a24 8
#include    <ScalarAtts.h>
#include <GlobalElement.h>
#include          <Part.h>
#include        <Demand.h>
#include     <Operation.h>
#include      <BomEntry.h>
#include    <Substitute.h>
#include      <BopEntry.h>
d37 1
a37 1
         Att           (theAttBldr, theName, "GlobalElement"),
@


1.16
log
@Updated some comments.
@
text
@d41 1
a41 1
   WITJ_ASSERT (theGetFuncPtr != NULL);
d58 1
a58 1
   WITJ_ASSERT (mySetFuncPtr_ != NULL);
d105 1
a105 1
   WITJ_ASSERT (theGetFuncPtr != NULL);
d126 1
a126 1
   WITJ_ASSERT (mySetFuncPtr_ != NULL);
d177 1
a177 1
   WITJ_ASSERT (theGetFuncPtr != NULL);
d198 1
a198 1
   WITJ_ASSERT (mySetFuncPtr_ != NULL);
d257 1
a257 1
   WITJ_ASSERT (theGetFuncPtr != NULL);
d278 1
a278 1
   WITJ_ASSERT (mySetFuncPtr_ != NULL);
d329 1
a329 1
   WITJ_ASSERT (theGetFuncPtr != NULL);
d350 1
a350 1
   WITJ_ASSERT (mySetFuncPtr_ != NULL);
d409 1
a409 1
   WITJ_ASSERT (theGetFuncPtr != NULL);
d430 1
a430 1
   WITJ_ASSERT (mySetFuncPtr_ != NULL);
d491 1
a491 1
   WITJ_ASSERT (theGetFuncPtr != NULL);
d512 1
a512 1
   WITJ_ASSERT (mySetFuncPtr_ != NULL);
@


1.15
log
@Changed to all upper case for the names of macros.
@
text
@d4 1
a4 1
// Contains the definitions of the following class templates:
d27 1
a27 1
// Definition of class template GlobalScalarAtt.
d91 1
a91 1
// Definition of class template PartScalarAtt.
d163 1
a163 1
// Definition of class template DemandScalarAtt.
d243 1
a243 1
// Definition of class template OpnScalarAtt.
d315 1
a315 1
// Definition of class template BomEntScalarAtt.
d395 1
a395 1
// Definition of class template SubScalarAtt.
d477 1
a477 1
// Definition of class template BopEntScalarAtt.
d557 1
a557 1
// Explicit instantiation of the class templates defined in this file.
@


1.14
log
@Changed name of method Attribute.allowsSetValue to isModifiable.
@
text
@d41 1
a41 1
   witjAssert (theGetFuncPtr != NULL);
d58 1
a58 1
   witjAssert (mySetFuncPtr_ != NULL);
d105 1
a105 1
   witjAssert (theGetFuncPtr != NULL);
d126 1
a126 1
   witjAssert (mySetFuncPtr_ != NULL);
d177 1
a177 1
   witjAssert (theGetFuncPtr != NULL);
d198 1
a198 1
   witjAssert (mySetFuncPtr_ != NULL);
d257 1
a257 1
   witjAssert (theGetFuncPtr != NULL);
d278 1
a278 1
   witjAssert (mySetFuncPtr_ != NULL);
d329 1
a329 1
   witjAssert (theGetFuncPtr != NULL);
d350 1
a350 1
   witjAssert (mySetFuncPtr_ != NULL);
d409 1
a409 1
   witjAssert (theGetFuncPtr != NULL);
d430 1
a430 1
   witjAssert (mySetFuncPtr_ != NULL);
d491 1
a491 1
   witjAssert (theGetFuncPtr != NULL);
d512 1
a512 1
   witjAssert (mySetFuncPtr_ != NULL);
@


1.13
log
@Attributes.
@
text
@d76 1
a76 1
      bool WitJ::GlobalScalarAtt <Value>::allowsSetValue ()
d148 1
a148 1
      bool WitJ::PartScalarAtt <Value>::allowsSetValue ()
d228 1
a228 1
      bool WitJ::DemandScalarAtt <Value>::allowsSetValue ()
d300 1
a300 1
      bool WitJ::OpnScalarAtt <Value>::allowsSetValue ()
d380 1
a380 1
      bool WitJ::BomEntScalarAtt <Value>::allowsSetValue ()
d462 1
a462 1
      bool WitJ::SubScalarAtt <Value>::allowsSetValue ()
d542 1
a542 1
      bool WitJ::BopEntScalarAtt <Value>::allowsSetValue ()
@


1.12
log
@Minor Revision.
@
text
@d76 1
a76 1
      bool WitJ::GlobalScalarAtt <Value>::getIsInputAtt ()
d148 1
a148 1
      bool WitJ::PartScalarAtt <Value>::getIsInputAtt ()
d228 1
a228 1
      bool WitJ::DemandScalarAtt <Value>::getIsInputAtt ()
d300 1
a300 1
      bool WitJ::OpnScalarAtt <Value>::getIsInputAtt ()
d380 1
a380 1
      bool WitJ::BomEntScalarAtt <Value>::getIsInputAtt ()
d462 1
a462 1
      bool WitJ::SubScalarAtt <Value>::getIsInputAtt ()
d542 1
a542 1
      bool WitJ::BopEntScalarAtt <Value>::getIsInputAtt ()
@


1.11
log
@Name change.
@
text
@d76 1
a76 1
      bool WitJ::GlobalScalarAtt <Value>::getInputAccess ()
d148 1
a148 1
      bool WitJ::PartScalarAtt <Value>::getInputAccess ()
d228 1
a228 1
      bool WitJ::DemandScalarAtt <Value>::getInputAccess ()
d300 1
a300 1
      bool WitJ::OpnScalarAtt <Value>::getInputAccess ()
d380 1
a380 1
      bool WitJ::BomEntScalarAtt <Value>::getInputAccess ()
d462 1
a462 1
      bool WitJ::SubScalarAtt <Value>::getInputAccess ()
d542 1
a542 1
      bool WitJ::BopEntScalarAtt <Value>::getInputAccess ()
@


1.10
log
@Changed name of Component to Entity.
@
text
@d17 8
a24 8
#include   <ScalarAtts.h>
#include <GlobalEntity.h>
#include         <Part.h>
#include       <Demand.h>
#include    <Operation.h>
#include     <BomEntry.h>
#include   <Substitute.h>
#include     <BopEntry.h>
d37 1
a37 1
         Att           (theAttBldr, theName, "GlobalEntity"),
d55 2
a56 2
         Entity * theEntity,
         Value    theValue)
d67 2
a68 2
         Entity * theEntity,
         Value &  theValue)
d119 2
a120 2
         Entity * theEntity,
         Value    theValue)
d124 1
a124 1
   thePart = theEntity->asPart ();
d135 2
a136 2
         Entity * theEntity,
         Value &  theValue)
d140 1
a140 1
   thePart = theEntity->asPart ();
d191 2
a192 2
         Entity * theEntity,
         Value    theValue)
d196 1
a196 1
   theDemand = theEntity->asDemand ();
d211 2
a212 2
         Entity * theEntity,
         Value &  theValue)
d216 1
a216 1
   theDemand = theEntity->asDemand ();
d271 2
a272 2
         Entity * theEntity,
         Value    theValue)
d276 1
a276 1
   theOpn = theEntity->asOperation ();
d287 2
a288 2
         Entity * theEntity,
         Value &  theValue)
d292 1
a292 1
   theOpn = theEntity->asOperation ();
d343 2
a344 2
         Entity * theEntity,
         Value    theValue)
d348 1
a348 1
   theBomEnt = theEntity->asBomEntry ();
d363 2
a364 2
         Entity * theEntity,
         Value &  theValue)
d368 1
a368 1
   theBomEnt = theEntity->asBomEntry ();
d423 2
a424 2
         Entity * theEntity,
         Value    theValue)
d428 1
a428 1
   theSub = theEntity->asSubstitute ();
d444 2
a445 2
         Entity * theEntity,
         Value &  theValue)
d449 1
a449 1
   theSub = theEntity->asSubstitute ();
d505 2
a506 2
         Entity * theEntity,
         Value    theValue)
d510 1
a510 1
   theBopEnt = theEntity->asBopEntry ();
d525 2
a526 2
         Entity * theEntity,
         Value &  theValue)
d530 1
a530 1
   theBopEnt = theEntity->asBopEntry ();
@


1.9
log
@Minor revision.
@
text
@d17 8
a24 8
#include <ScalarAtts.h>
#include <GlobalComp.h>
#include       <Part.h>
#include     <Demand.h>
#include  <Operation.h>
#include   <BomEntry.h>
#include <Substitute.h>
#include   <BopEntry.h>
d37 1
a37 1
         Att           (theAttBldr, theName, "GlobalComp"),
d55 2
a56 2
         Component * theComp,
         Value       theValue)
d67 2
a68 2
         Component * theComp,
         Value &     theValue)
d119 2
a120 2
         Component * theComp,
         Value       theValue)
d124 1
a124 1
   thePart = theComp->asPart ();
d135 2
a136 2
         Component * theComp,
         Value &     theValue)
d140 1
a140 1
   thePart = theComp->asPart ();
d191 2
a192 2
         Component * theComp,
         Value       theValue)
d196 1
a196 1
   theDemand = theComp->asDemand ();
d211 2
a212 2
         Component * theComp,
         Value &     theValue)
d216 1
a216 1
   theDemand = theComp->asDemand ();
d271 2
a272 2
         Component * theComp,
         Value       theValue)
d276 1
a276 1
   theOpn = theComp->asOperation ();
d287 2
a288 2
         Component * theComp,
         Value &     theValue)
d292 1
a292 1
   theOpn = theComp->asOperation ();
d343 2
a344 2
         Component * theComp,
         Value       theValue)
d348 1
a348 1
   theBomEnt = theComp->asBomEntry ();
d363 2
a364 2
         Component * theComp,
         Value &     theValue)
d368 1
a368 1
   theBomEnt = theComp->asBomEntry ();
d423 2
a424 2
         Component * theComp,
         Value       theValue)
d428 1
a428 1
   theSub = theComp->asSubstitute ();
d444 2
a445 2
         Component * theComp,
         Value &     theValue)
d449 1
a449 1
   theSub = theComp->asSubstitute ();
d505 2
a506 2
         Component * theComp,
         Value       theValue)
d510 1
a510 1
   theBopEnt = theComp->asBopEntry ();
d525 2
a526 2
         Component * theComp,
         Value &     theValue)
d530 1
a530 1
   theBopEnt = theComp->asBopEntry ();
@


1.8
log
@Minor revision.
@
text
@d76 1
a76 1
      bool WitJ::GlobalScalarAtt <Value>::getInputMode ()
d148 1
a148 1
      bool WitJ::PartScalarAtt <Value>::getInputMode ()
d228 1
a228 1
      bool WitJ::DemandScalarAtt <Value>::getInputMode ()
d300 1
a300 1
      bool WitJ::OpnScalarAtt <Value>::getInputMode ()
d380 1
a380 1
      bool WitJ::BomEntScalarAtt <Value>::getInputMode ()
d462 1
a462 1
      bool WitJ::SubScalarAtt <Value>::getInputMode ()
d542 1
a542 1
      bool WitJ::BopEntScalarAtt <Value>::getInputMode ()
@


1.7
log
@Attributes.
@
text
@d76 1
a76 1
      bool WitJ::GlobalScalarAtt <Value>::isAnInputAtt ()
d148 1
a148 1
      bool WitJ::PartScalarAtt <Value>::isAnInputAtt ()
d228 1
a228 1
      bool WitJ::DemandScalarAtt <Value>::isAnInputAtt ()
d300 1
a300 1
      bool WitJ::OpnScalarAtt <Value>::isAnInputAtt ()
d380 1
a380 1
      bool WitJ::BomEntScalarAtt <Value>::isAnInputAtt ()
d462 1
a462 1
      bool WitJ::SubScalarAtt <Value>::isAnInputAtt ()
d542 1
a542 1
      bool WitJ::BopEntScalarAtt <Value>::isAnInputAtt ()
@


1.6
log
@Attributes.
@
text
@d60 1
a60 3
   mySetFuncPtr_ (
      Att::getWitRun (),
      theValue);
d70 1
a70 3
   myGetFuncPtr_ (
      Att::getWitRun (),
    & theValue);
d87 1
a87 1
   return Att::scalarTypeMatches <Value> (theTypeName);
d128 1
a128 4
   mySetFuncPtr_ (
      Att::getWitRun       (),
      thePart->getPartName (),
      theValue);
d142 1
a142 4
   myGetFuncPtr_ (
      Att::getWitRun       (),
      thePart->getPartName (),
    & theValue);
d159 1
a159 1
   return Att::scalarTypeMatches <Value> (theTypeName);
d201 1
a201 1
      Att::getWitRun           (),
d219 1
a219 1
      Att::getWitRun           (),
d239 1
a239 1
   return Att::scalarTypeMatches <Value> (theTypeName);
d280 1
a280 4
   mySetFuncPtr_ (
      Att::getWitRun           (),
      theOpn->getOperationName (),
      theValue);
d294 1
a294 4
   myGetFuncPtr_ (
      Att::getWitRun           (),
      theOpn->getOperationName (),
    & theValue);
d311 1
a311 1
   return Att::scalarTypeMatches <Value> (theTypeName);
d353 1
a353 1
      Att::getWitRun              (),
d371 1
a371 1
      Att::getWitRun              (),
d391 1
a391 1
   return Att::scalarTypeMatches <Value> (theTypeName);
d433 1
a433 1
      Att::getWitRun           (),
d452 1
a452 1
      Att::getWitRun           (),
d473 1
a473 1
   return Att::scalarTypeMatches <Value> (theTypeName);
d515 1
a515 1
      Att::getWitRun              (),
d533 1
a533 1
      Att::getWitRun              (),
d553 1
a553 1
   return Att::scalarTypeMatches <Value> (theTypeName);
@


1.5
log
@Name change: Global --> GlobalComp.
@
text
@d133 2
a134 2
      Att::getWitRun        (),
      thePart->getPartCName (),
d150 2
a151 2
      Att::getWitRun        (),
      thePart->getPartCName (),
d211 3
a213 3
      Att::getWitRun            (),
      theDemand->getPartCName   (),
      theDemand->getDemandCName (),
d229 3
a231 3
      Att::getWitRun            (),
      theDemand->getPartCName   (),
      theDemand->getDemandCName (),
d291 2
a292 2
      Att::getWitRun            (),
      theOpn->getOperationCName (),
d308 2
a309 2
      Att::getWitRun            (),
      theOpn->getOperationCName (),
d369 3
a371 3
      Att::getWitRun            (),
      theBomEnt->getOperationCName (),
      theBomEnt->getBomIndex       (),
d387 3
a389 3
      Att::getWitRun            (),
      theBomEnt->getOperationCName (),
      theBomEnt->getBomIndex       (),
d449 4
a452 4
      Att::getWitRun            (),
      theSub->getOperationCName (),
      theSub->getBomIndex       (),
      theSub->getSubIndex       (),
d468 4
a471 4
      Att::getWitRun            (),
      theSub->getOperationCName (),
      theSub->getBomIndex       (),
      theSub->getSubIndex       (),
d531 3
a533 3
      Att::getWitRun               (),
      theBopEnt->getOperationCName (),
      theBopEnt->getBopIndex       (),
d549 3
a551 3
      Att::getWitRun               (),
      theBopEnt->getOperationCName (),
      theBopEnt->getBopIndex       (),
@


1.4
log
@Attributes.
@
text
@d18 1
a18 1
#include     <Global.h>
d37 1
a37 1
         Att           (theAttBldr, theName, "Global"),
@


1.3
log
@Classes Global and GlobalCI.
@
text
@d128 1
a128 1
   thePart = theComp->thisPart ();
d147 1
a147 1
   thePart = theComp->thisPart ();
d206 1
a206 1
   theDemand = theComp->thisDemand ();
d226 1
a226 1
   theDemand = theComp->thisDemand ();
d286 1
a286 1
   theOpn = theComp->thisOperation ();
d305 1
a305 1
   theOpn = theComp->thisOperation ();
d364 1
a364 1
   theBomEnt = theComp->thisBomEntry ();
d384 1
a384 1
   theBomEnt = theComp->thisBomEntry ();
d444 1
a444 1
   theSub = theComp->thisSubstitute ();
d465 1
a465 1
   theSub = theComp->thisSubstitute ();
d526 1
a526 1
   theBopEnt = theComp->thisBopEntry ();
d546 1
a546 1
   theBopEnt = theComp->thisBopEntry ();
@


1.2
log
@Attributes.
@
text
@d18 1
a18 1
#include <GlobalComp.h>
d37 1
a37 1
         Att           (theAttBldr, theName, "GlobalComp"),
@


1.1
log
@Attributes.
@
text
@d61 1
a61 1
      getWitRun (),
d73 1
a73 1
      getWitRun (),
d86 9
d133 1
a133 1
      getWitRun             (),
d150 1
a150 1
      getWitRun             (),
d164 9
d211 1
a211 1
      getWitRun                 (),
d229 1
a229 1
      getWitRun                 (),
d244 9
d291 1
a291 1
      getWitRun                 (),
d308 1
a308 1
      getWitRun                 (),
d322 9
d369 1
a369 1
      getWitRun                 (),
d387 1
a387 1
      getWitRun                 (),
d402 9
d449 1
a449 1
      getWitRun                 (),
d468 1
a468 1
      getWitRun                 (),
d484 9
d531 1
a531 1
      getWitRun                 (),
d549 1
a549 1
      getWitRun                 (),
d564 9
@

