head	1.44;
access;
symbols;
locks; strict;
comment	@ * @;


1.44
date	2011.05.04.22.49.02;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2011.04.13.16.00.13;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2011.04.12.00.33.09;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2011.04.01.19.23.31;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2011.02.25.16.06.44;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2010.04.20.20.55.06;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2010.04.17.00.20.18;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2010.04.13.23.10.42;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2009.03.27.21.04.49;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2009.03.27.20.27.58;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2009.03.23.21.51.39;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2009.03.13.19.32.16;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.12.15.17.28.46;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.12.15.17.17.37;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.12.03.18.28.48;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.11.21.15.49.15;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.10.14.22.04.38;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.10.07.18.50.21;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.10.06.22.13.59;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.10.06.14.42.38;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.10.01.22.55.33;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.09.26.22.50.15;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.09.09.20.04.07;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.09.09.18.59.57;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.08.29.15.34.42;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.08.27.15.30.44;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.08.01.16.29.31;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.07.23.17.47.43;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.07.22.21.08.58;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.07.21.21.44.07;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.07.21.20.58.06;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.07.18.20.29.15;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.07.15.17.46.07;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.07.07.22.59.30;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.07.01.16.09.20;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.27.21.43.23;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.27.16.34.06;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.19.20.15.06;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.18.21.28.16;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.11.19.27.15;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.10.22.32.34;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.28.22.29.35;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.28.20.24.46;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.28.18.10.11;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.44
log
@setValue ==> set
getValue ==> get
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File Att.h.
//
// Contains the declaration of class Att.
//------------------------------------------------------------------------------

#ifndef Att_h
#define Att_h

#include <JavaAccObj.h>

#include     <string>

//------------------------------------------------------------------------------
// Class Att
//
// Represents an attribute of an Component in an implosion problem.
//
// Class Hierarchy:
//
// JavaAccObj
//    Att
//       ProblemScalarAtt <Value>
//       GlobalScalarAtt  <Value>
//       PartScalarAtt    <Value>
//       DemandScalarAtt  <Value>
//       OpnScalarAtt     <Value>
//       BomScalarAtt     <Value>
//       SubScalarAtt     <Value>
//       BopScalarAtt     <Value>
//       StringProblemScalarAtt
//       StringGlobalScalarAtt
//       GlobalVectorAtt <Elem>
//       PartVectorAtt   <Elem>
//       DemandVectorAtt <Elem>
//       OpnVectorAtt    <Elem>
//       BomVectorAtt    <Elem>
//       SubVectorAtt    <Elem>
//       BopVectorAtt    <Elem>
//------------------------------------------------------------------------------

namespace WitJ
{
class Att: public JavaAccObj
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   virtual ~Att ();
      //
      // Destructor.

   virtual Att * asAtt ();
      //
      // Override from class JavaAccObj.

   //---------------------------------------------------------------------------
   // set (Component *, ...) functions
   //
   // For each of these functions, if this Att represents an input attribute of
   // the type that matches the second argument and that's associated with the
   // Component class of the Component argument, the function sets the value of
   // the attribute for the Component to the value of the second argument.
   // Otherwise, the function throws an assertion exception.
   //---------------------------------------------------------------------------

   virtual void set (Component *, int);
   virtual void set (Component *, double);
   virtual void set (Component *, const char *);
   virtual void set (Component *, const int *);
   virtual void set (Component *, const double *);

   //---------------------------------------------------------------------------

   template <typename Elem>
         void setVectorToScalar (Component * theComp, Elem theScalar);
      //
      // If this Att represents an input attribute of type vector of Elem and
      // that's associated with the Component class of the Component argument,
      // this function sets the value of the attribute for the Component to
      // theScalar in all periods.
      // Otherwise, this function throws an assertion exception.
      // Note: During the execution of this function, the CTVecSupply for the
      // Problem is temporarily put into a reserved state.

   //---------------------------------------------------------------------------
   // get (Component *, ...) functions
   //
   // For each of these functions, if this Att represents an attribute of the
   // type that matches the second argument and that's associated with the
   // Component class of the Component argument, the function sets the value of
   // the second argument to the value of the attribute for the Component.
   //---------------------------------------------------------------------------

   virtual void get (Component *, int &);
   virtual void get (Component *, double &);
   virtual void get (Component *, ArrayJOR <int> &);
   virtual void get (Component *, ArrayJOR <double> &);
   virtual void get (Component *, StringJOR &);

   //---------------------------------------------------------------------------

   virtual bool isModifiable () = 0;
      //
      // Returns true, iff this Att supports a "set" member function.

   virtual bool valueTypeMatches (const std::string & theTypeName) = 0;
      //
      // Returns true, iff theTypeName indicates a java type that matches the
      // value type of this Att.

   //---------------------------------------------------------------------------
   // Accessors.
   //---------------------------------------------------------------------------

   inline const std::string & getAttName ()
      {
      return myAttName_;
      }

   inline const std::string & getCompClassName ()
      {
      return myCompClassName_;
      }

   //---------------------------------------------------------------------------
   // Protected member functions.
   //---------------------------------------------------------------------------

   protected:

   explicit Att (
         AttBldr *    theAttBldr,
         const char * theAttName,
         const char * theCompClassName);
      //
      // Constructor.
      // The first character of theAttName must be an upper case letter.
      // myAttName_ is set to theAttName, with the first character converted
      // to lower case.

   template <typename Value>
         static bool scalarTypeMatches (const std::string & theTypeName);
      //
      // Returns true, iff theTypeName indicates a java scalar type that matches
      // Value.

   template <typename Elem>
         static bool vectorTypeMatches (const std::string & theTypeName);
      //
      // Returns true, iff theTypeName indicates a java array type whose element
      // type matches Elem.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   Att              (const Att &);
   Att & operator = (const Att &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   std::string myAttName_;
      //
      // The name of the attribute represented by this Att.

   const std::string myCompClassName_;
      //
      // The name of the Component class to which the represented attribute
      // applies.
   };
};
//
// End of namespace WitJ.

#endif
@


1.43
log
@ArrayJOR classes
@
text
@d61 1
a61 1
   // setValue (Component *, ...) functions
d70 5
a74 5
   virtual void setValue (Component *, int);
   virtual void setValue (Component *, double);
   virtual void setValue (Component *, const char *);
   virtual void setValue (Component *, const int *);
   virtual void setValue (Component *, const double *);
d90 1
a90 1
   // getValue (Component *, ...) functions
d98 5
a102 5
   virtual void getValue (Component *, int &);
   virtual void getValue (Component *, double &);
   virtual void getValue (Component *, ArrayJOR <int> &);
   virtual void getValue (Component *, ArrayJOR <double> &);
   virtual void getValue (Component *, StringJOR &);
d108 1
a108 1
      // Returns true, iff this Att supports a "setValue" member function.
@


1.42
log
@Class StringJOR
@
text
@d100 2
a101 2
   virtual void getValue (Component *, WitVecOwner <int> &);
   virtual void getValue (Component *, WitVecOwner <double> &);
@


1.41
log
@Replaced newHeldCString with copyInto.
@
text
@d102 1
a102 1
   virtual void getValue (Component *, WitStringOwner &);
@


1.40
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@d110 1
a110 1
   virtual bool valueTypeMatches (const std::string theTypeName) = 0;
d146 1
a146 1
         static bool scalarTypeMatches (const std::string theTypeName);
d152 1
a152 1
         static bool vectorTypeMatches (const std::string theTypeName);
@


1.39
log
@Multi-Obj Mode
@
text
@d23 9
a31 7
//       GlobalScalarAtt <Value>
//       PartScalarAtt   <Value>
//       DemandScalarAtt <Value>
//       OpnScalarAtt    <Value>
//       BomScalarAtt    <Value>
//       SubScalarAtt    <Value>
//       BopScalarAtt    <Value>
@


1.38
log
@Multi-Obj Mode
@
text
@d98 3
a100 3
   virtual void getValue (Component *, VecWoa <int> &);
   virtual void getValue (Component *, VecWoa <double> &);
   virtual void getValue (Component *, VecWoa <char> &);
@


1.37
log
@Implemented String StdAttImps.
@
text
@a97 1
   virtual void getValue (Component *, StringWoa &);
d100 1
@


1.36
log
@Minor revision.
@
text
@d30 1
d70 1
d98 1
@


1.35
log
@Revised the C++ implementation of the setVectorToScalar methods.
@
text
@d82 2
@


1.34
log
@Added theComp.setValueToScalar (...) methods.
@
text
@d73 11
@


1.33
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d64 1
a64 1
   // Otherwise, the function issues an internal error.
@


1.32
log
@Updated some comments.
@
text
@d17 1
a17 1
// Represents an attribute of an Element in an implosion problem.
d58 1
a58 1
   // setValue (Element *, ...) functions
d62 2
a63 2
   // Element class of the Element argument, the function sets the value of
   // the attribute for the Element to the value of the second argument.
d67 4
a70 4
   virtual void setValue (Element *, int);
   virtual void setValue (Element *, double);
   virtual void setValue (Element *, const int *);
   virtual void setValue (Element *, const double *);
d73 1
a73 1
   // getValue (Element *, ...) functions
d77 2
a78 2
   // Element class of the Element argument, the function sets the value of
   // the second argument to the value of the attribute for the Element.
d81 4
a84 4
   virtual void getValue (Element *, int &);
   virtual void getValue (Element *, double &);
   virtual void getValue (Element *, VecWoa <int> &);
   virtual void getValue (Element *, VecWoa <double> &);
d106 1
a106 1
   inline const std::string & getElemClassName ()
d108 1
a108 1
      return myElemClassName_;
d120 1
a120 1
         const char * theElemClassName);
d158 1
a158 1
   const std::string myElemClassName_;
d160 1
a160 1
      // The name of the Element class to which the represented attribute
@


1.31
log
@Initial implementation of class ExceptionHandler.
@
text
@d148 1
a148 1
      // Not defined; prevents accidental copying and assignment.
@


1.30
log
@Changed name of method Attribute.allowsSetValue to isModifiable.
@
text
@d21 16
a36 16
//    JavaAccObj
//       Att
//          GlobalScalarAtt <Value>
//          PartScalarAtt   <Value>
//          DemandScalarAtt <Value>
//          OpnScalarAtt    <Value>
//          BomScalarAtt    <Value>
//          SubScalarAtt    <Value>
//          BopScalarAtt    <Value>
//          GlobalVectorAtt <Elem>
//          PartVectorAtt   <Elem>
//          DemandVectorAtt <Elem>
//          OpnVectorAtt    <Elem>
//          BomVectorAtt    <Elem>
//          SubVectorAtt    <Elem>
//          BopVectorAtt    <Elem>
@


1.29
log
@Attributes.
@
text
@d88 1
a88 1
   virtual bool allowsSetValue () = 0;
@


1.28
log
@Minor Revision.
@
text
@d88 1
a88 1
   virtual bool getIsInputAtt () = 0;
d90 1
a90 2
      // Returns true, iff this Att represents an input attribute, i.e., one
      // that supports "set".
@


1.27
log
@Name change.
@
text
@d88 1
a88 1
   virtual bool getInputAccess () = 0;
@


1.26
log
@Changed name of Component to Entity.
@
text
@d17 1
a17 1
// Represents an attribute of a Entity in an implosion problem.
d58 1
a58 1
   // setValue (Entity *, ...) functions
d62 2
a63 2
   // Entity class of the Entity argument, the function sets the value of
   // the attribute for the Entity to the value of the second argument.
d67 4
a70 4
   virtual void setValue (Entity *, int);
   virtual void setValue (Entity *, double);
   virtual void setValue (Entity *, const int *);
   virtual void setValue (Entity *, const double *);
d73 1
a73 1
   // getValue (Entity *, ...) functions
d77 2
a78 2
   // Entity class of the Entity argument, the function sets the value of
   // the second argument to the value of the attribute for the Entity.
d81 4
a84 4
   virtual void getValue (Entity *, int &);
   virtual void getValue (Entity *, double &);
   virtual void getValue (Entity *, VecWoa <int> &);
   virtual void getValue (Entity *, VecWoa <double> &);
d107 1
a107 1
   inline const std::string & getEntityClassName ()
d109 1
a109 1
      return myEntityClassName_;
d121 1
a121 1
         const char * theEntityClassName);
d159 1
a159 1
   const std::string myEntityClassName_;
d161 1
a161 1
      // The name of the Entity class to which the represented attribute
@


1.25
log
@Minor revision.
@
text
@d17 1
a17 1
// Represents an attribute of a Component in an implosion problem.
d58 1
a58 1
   // setValue (Component *, ...) functions
d62 2
a63 2
   // Component class of the Component argument, the function sets the value of
   // the attribute for the Component to the value of the second argument.
d67 4
a70 4
   virtual void setValue (Component *, int);
   virtual void setValue (Component *, double);
   virtual void setValue (Component *, const int *);
   virtual void setValue (Component *, const double *);
d73 1
a73 1
   // getValue (Component *, ...) functions
d77 2
a78 2
   // Component class of the Component argument, the function sets the value of
   // the second argument to the value of the attribute for the Component.
d81 4
a84 4
   virtual void getValue (Component *, int &);
   virtual void getValue (Component *, double &);
   virtual void getValue (Component *, VecWoa <int> &);
   virtual void getValue (Component *, VecWoa <double> &);
d107 1
a107 1
   inline const std::string & getCompClassName ()
d109 1
a109 1
      return myCompClassName_;
d121 1
a121 1
         const char * theCompClassName);
d159 1
a159 1
   const std::string myCompClassName_;
d161 1
a161 1
      // The name of the Component class to which the represented attribute
@


1.24
log
@Minor revision.
@
text
@d88 1
a88 1
   virtual bool getInputMode () = 0;
@


1.23
log
@Changed name of C++ class JAccObject to JavaAccObj.
@
text
@d88 1
a88 1
   virtual bool isAnInputAtt () = 0;
@


1.22
log
@Minor update.
@
text
@d10 1
a10 1
#include <JAccObject.h>
d21 1
a21 1
//    JAccObject
d41 1
a41 1
class Att: public JAccObject
d55 1
a55 1
      // Override from class JAccObject.
@


1.21
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@a10 1
#include    <Session.h>
a140 9
   // Accessors.
   //---------------------------------------------------------------------------

   inline WitRun * getWitRun ()
      {
      return getSession ()->getWitRun ();
      }

   //---------------------------------------------------------------------------
@


1.20
log
@Attributes.
@
text
@d11 1
a11 1
#include  <ProbCoord.h>
d147 1
a147 1
      return getProbCoord ()->getWitRun ();
@


1.19
log
@Attributes.
@
text
@d121 2
a122 2
         const char * theAttNameCStr,
         const char * theCompClassNameCStr);
d125 2
a126 2
      // The first character of theAttNameCStr must be an upper case letter.
      // myAttName_ is set to theAttNameCStr, with the first character converted
@


1.18
log
@Attributes.
@
text
@d54 1
a54 1
   virtual Att * thisAtt ();
@


1.17
log
@Attributes.
@
text
@d25 1
a25 1
//            PartScalarAtt <Value>
d27 4
a30 4
//             OpnScalarAtt <Value>
//             BomScalarAtt <Value>
//             SubScalarAtt <Value>
//             BopScalarAtt <Value>
d32 1
a32 1
//            PartVectorAtt <Elem>
d34 4
a37 4
//             OpnVectorAtt <Elem>
//             BomVectorAtt <Elem>
//             SubVectorAtt <Elem>
//             BopVectorAtt <Elem>
d94 5
d129 12
@


1.16
log
@Attributes.
@
text
@d120 3
d148 1
a148 1
   const std::string myAttName_;
@


1.15
log
@Attributes.
@
text
@d24 14
a37 14
//          GlobalScalAtt <Value>
//            PartScalAtt <Value>
//          DemandScalAtt <Value>
//             OpnScalAtt <Value>
//             BomScalAtt <Value>
//             SubScalAtt <Value>
//             BopScalAtt <Value>
//           GlobalVecAtt <Elem>
//             PartVecAtt <Elem>
//           DemandVecAtt <Elem>
//              OpnVecAtt <Elem>
//              BomVecAtt <Elem>
//              SubVecAtt <Elem>
//              BopVecAtt <Elem>
@


1.14
log
@Attributes.
@
text
@d31 1
d34 4
@


1.13
log
@Attributes.
@
text
@d24 9
a32 3
//            SubScalAtt <Value>
//            PartVecAtt <Elem>
//          DemandVecAtt <Elem>
@


1.12
log
@Attributes.
@
text
@d72 2
@


1.11
log
@Attributes.
@
text
@d47 28
a74 35
   virtual void setValue (
         Component * theComp,
         int         theInt);
      //
      // If this Att represents an input attribute of type int
      // that's associated with the Component class of theComp, this
      // function sets the value of the attribute for theComp to theInt.
      // Otherwise, it issues an error.

   virtual void getValue (
         Component * theComp,
         int &       theInt);
      //
      // If this Att represents an attribute of type int
      // that's associated with the Component class of theComp, this function
      // sets theInt to the value of the attribute for theComp.
      // Otherwise, it issues an error.

   virtual void setValue (
         Component *    theComp,
         const double * theDblCVec);
      //
      // If this Att represents an input attribute of type time-vector of
      // doubles that's associated with the Component class of theComp, this
      // function sets the value of the attribute for theComp to theDblCVec.
      // Otherwise, it issues an error.

   virtual void getValue (
         Component *       theComp,
         VecWoa <double> & theDblVecWoa);
      //
      // If this Att represents an attribute of type time-vector of doubles
      // that's associated with the Component class of theComp, this function
      // sets theDblVecWoa to the value of the attribute for theComp.
      // Otherwise, it issues an error.
@


1.10
log
@Changed the names of access functions beginning with "my"
to begin with "get".
@
text
@a87 5
   virtual const char * getCompClassName () = 0;
      //
      // Returns the name of the Component class to which the represented
      // attribute applies.

d92 1
a92 1
   inline const std::string & getName ()
d94 6
a99 1
      return myName_;
d110 2
a111 1
         const char * theName);
d139 1
a139 1
   const std::string myName_;
d142 5
@


1.9
log
@Self-Test.
@
text
@d88 1
a88 1
   virtual const char * myCompClassName () = 0;
d97 1
a97 1
   inline const std::string & myName ()
d118 1
a118 1
   inline WitRun * myWitRun ()
d120 1
a120 1
      return myProbCoord ()->myWitRun ();
@


1.8
log
@Initial implementation of self-test.
@
text
@d88 5
@


1.7
log
@Implemented the demandVol attribute.
@
text
@d83 5
@


1.6
log
@Attributes.
@
text
@d24 3
a26 2
//          SubScalAtt <Value>
//          PartVecAtt <Elem>
@


1.5
log
@Attributes.
@
text
@d7 2
a8 2
#ifndef AttH
#define AttH
d24 1
d47 18
@


1.4
log
@Replaced class WitJ::String with class std::string.
@
text
@d64 9
d79 1
a79 1
         ProbCoord *  theProbCoord,
@


1.3
log
@Added myName_ to class Att.
@
text
@d12 2
a13 1
#include     <String.h>
d99 1
a99 1
   const String myName_;
@


1.2
log
@Attributes
@
text
@d12 1
d68 3
a70 1
   explicit Att (ProbCoord *);
d93 8
@


1.1
log
@Initial implementation of attributes.
@
text
@d52 9
@

