head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2011.04.13.19.16.18;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.03.27.20.27.58;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.03.26.19.22.22;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@CTVecSupply
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File CTVecSupply.C.
//
// Contains the implementation of class CTVecSupply.
//------------------------------------------------------------------------------

#include <CTVecSupply.h>

//------------------------------------------------------------------------------
// Definition of class CTVecSupply.
//------------------------------------------------------------------------------

WitJ::CTVecSupply::CTVecSupply (int nPeriodsVal):

      nPeriods_    (nPeriodsVal),
      myIntCTVecs_ (),
      myDblCTVecs_ ()
   {
   }

//------------------------------------------------------------------------------

WitJ::CTVecSupply::~CTVecSupply ()
   {
   while (not myIntCTVecs_.empty ())
      {
      delete myIntCTVecs_.back ();

      myIntCTVecs_.pop_back ();
      }

   while (not myDblCTVecs_.empty ())
      {
      delete myDblCTVecs_.back ();

      myDblCTVecs_.pop_back ();
      }
   }

//------------------------------------------------------------------------------

void WitJ::CTVecSupply::provideCTVec (int * & theIntCTVec)
   {
   if (myIntCTVecs_.empty ())
      {
      theIntCTVec = new int[nPeriods_];
      }
   else
      {
      theIntCTVec = myIntCTVecs_.back ();

      myIntCTVecs_.pop_back ();
      }
   }

//------------------------------------------------------------------------------

void WitJ::CTVecSupply::provideCTVec (double * & theDblCTVec)
   {
   if (myDblCTVecs_.empty ())
      {
      theDblCTVec = new double[nPeriods_];
      }
   else
      {
      theDblCTVec = myDblCTVecs_.back ();

      myDblCTVecs_.pop_back ();
      }
   }

//------------------------------------------------------------------------------

void WitJ::CTVecSupply::reclaimCTVec (int * & theIntCTVec)
   {
   myIntCTVecs_.push_back (theIntCTVec);

   theIntCTVec = NULL;
   }

//------------------------------------------------------------------------------

void WitJ::CTVecSupply::reclaimCTVec (double * & theDblCTVec)
   {
   myDblCTVecs_.push_back (theDblCTVec);

   theDblCTVec = NULL;
   }
@


1.2
log
@Revised the C++ implementation of the setVectorToScalar methods.
@
text
@d15 4
a18 12
   reserved_      (false),
   myIntCTVec_    (NULL),
   myDblCTVec_    (NULL),
   myHardLBCTVec_ (NULL),
   mySoftLBCTVec_ (NULL),
   myHardUBCTVec_ (NULL)
   {
   myIntCTVec_    = new int   [nPeriodsVal];
   myDblCTVec_    = new double[nPeriodsVal];
   myHardLBCTVec_ = new double[nPeriodsVal];
   mySoftLBCTVec_ = new double[nPeriodsVal];
   myHardUBCTVec_ = new double[nPeriodsVal];
d25 13
a37 5
   delete myDblCTVec_;
   delete myIntCTVec_;
   delete myHardUBCTVec_;
   delete mySoftLBCTVec_;
   delete myHardLBCTVec_;
d44 7
a50 3
   EXCEPTION_ASSERT (! reserved_);

   theIntCTVec = myIntCTVec_;
d52 2
a53 1
   reserved_   = true;
d60 7
a66 1
   EXCEPTION_ASSERT (! reserved_);
d68 2
a69 3
   theDblCTVec = myDblCTVec_;

   reserved_   = true;
d74 5
a78 12
void WitJ::CTVecSupply::provideBoundCTVecs (
      double * & theHardLBCTVec,
      double * & theSoftLBCTVec,
      double * & theHardUBCTVec)
   {
   EXCEPTION_ASSERT (! reserved_);

   reserved_      = true;

   theHardLBCTVec = myHardLBCTVec_;
   theSoftLBCTVec = mySoftLBCTVec_;
   theHardUBCTVec = myHardUBCTVec_;
d83 1
a83 1
void WitJ::CTVecSupply::reclaimCTVecs ()
d85 1
a85 1
   EXCEPTION_ASSERT (reserved_);
d87 1
a87 1
   reserved_ = false;
@


1.1
log
@Replaced C++ classes CTVecHolder <...> and CTVecRes with CTVecSupply.
@
text
@a15 1
   myBoolCTVec_   (NULL),
d22 5
a26 6
   myBoolCTVec_   = new Boolean[nPeriodsVal];
   myIntCTVec_    = new int    [nPeriodsVal];
   myDblCTVec_    = new double [nPeriodsVal];
   myHardLBCTVec_ = new double [nPeriodsVal];
   mySoftLBCTVec_ = new double [nPeriodsVal];
   myHardUBCTVec_ = new double [nPeriodsVal];
a34 1
   delete myBoolCTVec_;
d42 1
a42 1
WitJ::Boolean * WitJ::CTVecSupply::provideBoolCTVec ()
d46 1
a46 1
   reserved_ = true;
d48 1
a48 1
   return myBoolCTVec_;
d53 1
a53 1
int * WitJ::CTVecSupply::provideIntCTVec  ()
d57 1
a57 1
   reserved_ = true;
d59 1
a59 12
   return myIntCTVec_;
   }

//------------------------------------------------------------------------------

double * WitJ::CTVecSupply::provideDblCTVec ()
   {
   EXCEPTION_ASSERT (! reserved_);

   reserved_ = true;

   return myDblCTVec_;
@

