head	1.39;
access;
symbols;
locks; strict;
comment	@ * @;


1.39
date	2011.05.04.22.49.01;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2011.04.13.19.16.17;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2011.04.13.16.00.12;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2011.04.12.00.33.09;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2011.04.01.19.23.31;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2011.02.25.16.06.44;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2010.04.20.20.55.06;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2010.04.17.00.20.18;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2010.04.13.23.10.41;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2009.03.27.21.04.49;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2009.03.27.20.27.58;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2009.03.13.19.32.16;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2009.01.21.21.43.21;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2009.01.16.17.03.33;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2009.01.15.20.46.51;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.12.22.16.29.11;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.12.15.17.28.45;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.12.12.19.29.23;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.11.26.18.33.03;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.10.07.18.50.21;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.10.06.22.13.59;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.09.26.22.50.15;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.09.09.18.59.57;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.09.04.15.07.56;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.08.29.15.34.38;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.08.27.15.30.41;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.08.01.16.29.28;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.07.23.17.47.40;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.07.18.20.29.12;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.07.15.17.46.07;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.07.07.22.59.28;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.07.01.16.09.20;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.26.19.18.06;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.19.20.57.27;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.18.21.28.16;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.11.19.27.15;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.28.22.29.35;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.28.20.24.46;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.28.18.10.10;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.39
log
@setValue ==> set
getValue ==> get
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File Att.C.
//
// Contains the implementation of class Att.
//------------------------------------------------------------------------------

#include         <Att.h>
#include     <AttBldr.h>
#include <Coordinator.h>
#include     <Problem.h>
#include <CTVecSupply.h>

//------------------------------------------------------------------------------

WitJ::Att::~Att ()
   {
   }

//------------------------------------------------------------------------------

WitJ::Att * WitJ::Att::asAtt ()
   {
   return this;
   }

//------------------------------------------------------------------------------
// Class Att implementations of set functions.
//
// Each of these functions is called iff the Att does not represent an attribute
// of the indicated type. Each simply issues an error.
//------------------------------------------------------------------------------

void WitJ::Att::set (Component *, int)
   {
   EXCEPTION_ASSERT (false);
   }

void WitJ::Att::set (Component *, double)
   {
   EXCEPTION_ASSERT (false);
   }

void WitJ::Att::set (Component *, const char *)
   {
   EXCEPTION_ASSERT (false);
   }

void WitJ::Att::set (Component *, const int *)
   {
   EXCEPTION_ASSERT (false);
   }

void WitJ::Att::set (Component *, const double *)
   {
   EXCEPTION_ASSERT (false);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::Att::setVectorToScalar (Component * theComp, Elem theScalar)
   {
   Elem * theCTVec;
   int    nPers;
   int    thePer;

   getCTVecSupply ()->provideCTVec (theCTVec);

   nPers = getCoordinator ()->getProblem ()->getNPeriods ();

   for (thePer = 0; thePer < nPers; thePer ++)
      {
      theCTVec[thePer] = theScalar;
      }

   set (theComp, theCTVec);

   getCTVecSupply ()->reclaimCTVec (theCTVec);
   }

//------------------------------------------------------------------------------
// Explicit instantiation of member function template setVectorToScalar (...).
//------------------------------------------------------------------------------

template void WitJ::Att::setVectorToScalar <int>    (Component *, int);
template void WitJ::Att::setVectorToScalar <double> (Component *, double);

//------------------------------------------------------------------------------
// Class Att implementations of get functions.
//
// Each of these functions is called iff the Att does not represent an attribute
// of the indicated type. Each simply issues an error.
//------------------------------------------------------------------------------

void WitJ::Att::get (Component *, int &)
   {
   EXCEPTION_ASSERT (false);
   }

void WitJ::Att::get (Component *, double &)
   {
   EXCEPTION_ASSERT (false);
   }

void WitJ::Att::get (Component *, ArrayJOR <int> &)
   {
   EXCEPTION_ASSERT (false);
   }

void WitJ::Att::get (Component *, ArrayJOR <double> &)
   {
   EXCEPTION_ASSERT (false);
   }

void WitJ::Att::get (Component *, StringJOR &)
   {
   EXCEPTION_ASSERT (false);
   }

//------------------------------------------------------------------------------

WitJ::Att::Att (
         AttBldr *    theAttBldr,
         const char * theAttName,
         const char * theCompClassName):

      JavaAccObj       (theAttBldr->getCoordinator ()),
      myAttName_       (theAttName),
      myCompClassName_ (theCompClassName)
   {
   EXCEPTION_ASSERT (isupper (myAttName_[0]));

   myAttName_[0] = tolower (myAttName_[0]);

   theAttBldr->acquireAtt (this);
   }

//------------------------------------------------------------------------------
// Specialized implementation of member function Att::scalarTypeMatches <Value>.
//------------------------------------------------------------------------------

namespace WitJ
{
template <>
      bool Att::scalarTypeMatches <int> (const std::string & theTypeName)
   {
   return
         (theTypeName == "Integer")
      || (theTypeName == "Boolean");
   }
}

//------------------------------------------------------------------------------

namespace WitJ
{
template <>
      bool Att::scalarTypeMatches <double> (const std::string & theTypeName)
   {
   return (theTypeName == "Double");
   }
}

//------------------------------------------------------------------------------
// Specialized implementation of member function Att::vectorTypeMatches <Elem>.
//------------------------------------------------------------------------------

namespace WitJ
{
template <>
      bool Att::vectorTypeMatches <int> (const std::string & theTypeName)
   {
   return
         (theTypeName == "int[]")
      || (theTypeName == "boolean[]");
   }
}

//------------------------------------------------------------------------------

namespace WitJ
{
template <>
      bool Att::vectorTypeMatches <double> (const std::string & theTypeName)
   {
   return (theTypeName == "double[]");
   }
}
@


1.38
log
@CTVecSupply
@
text
@d27 1
a27 1
// Class Att implementations of setValue functions.
d33 1
a33 1
void WitJ::Att::setValue (Component *, int)
d38 1
a38 1
void WitJ::Att::setValue (Component *, double)
d43 1
a43 1
void WitJ::Att::setValue (Component *, const char *)
d48 1
a48 1
void WitJ::Att::setValue (Component *, const int *)
d53 1
a53 1
void WitJ::Att::setValue (Component *, const double *)
d76 1
a76 1
   setValue (theComp, theCTVec);
d89 1
a89 1
// Class Att implementations of getValue functions.
d95 1
a95 1
void WitJ::Att::getValue (Component *, int &)
d100 1
a100 1
void WitJ::Att::getValue (Component *, double &)
d105 1
a105 1
void WitJ::Att::getValue (Component *, ArrayJOR <int> &)
d110 1
a110 1
void WitJ::Att::getValue (Component *, ArrayJOR <double> &)
d115 1
a115 1
void WitJ::Att::getValue (Component *, StringJOR &)
@


1.37
log
@ArrayJOR classes
@
text
@d78 1
a78 1
   getCTVecSupply ()->reclaimCTVecs ();
@


1.36
log
@Class StringJOR
@
text
@d105 1
a105 1
void WitJ::Att::getValue (Component *, WitVecOwner <int> &)
d110 1
a110 1
void WitJ::Att::getValue (Component *, WitVecOwner <double> &)
@


1.35
log
@Replaced newHeldCString with copyInto.
@
text
@d115 1
a115 1
void WitJ::Att::getValue (Component *, WitStringOwner &)
@


1.34
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@d145 1
a145 1
      bool Att::scalarTypeMatches <int> (const std::string theTypeName)
d158 1
a158 1
      bool Att::scalarTypeMatches <double> (const std::string theTypeName)
d171 1
a171 1
      bool Att::vectorTypeMatches <int> (const std::string theTypeName)
d184 1
a184 1
      bool Att::vectorTypeMatches <double> (const std::string theTypeName)
@


1.33
log
@Multi-Obj Mode
@
text
@d7 5
a11 5
#include          <Att.h>
#include      <AttBldr.h>
#include  <Coordinator.h>
#include <GlobalAspect.h>
#include  <CTVecSupply.h>
d69 1
a69 1
   nPers = getCoordinator ()->getGlobalAspect ()->getNPeriods ();
@


1.32
log
@Multi-Obj Mode
@
text
@d105 1
a105 1
void WitJ::Att::getValue (Component *, VecWoa <int> &)
d110 1
a110 1
void WitJ::Att::getValue (Component *, VecWoa <double> &)
d115 1
a115 1
void WitJ::Att::getValue (Component *, VecWoa <char> &)
@


1.31
log
@Implemented String StdAttImps.
@
text
@d105 1
a105 1
void WitJ::Att::getValue (Component *, StringWoa &)
d110 1
a110 1
void WitJ::Att::getValue (Component *, VecWoa <int> &)
d115 1
a115 1
void WitJ::Att::getValue (Component *, VecWoa <double> &)
@


1.30
log
@Minor revision.
@
text
@d43 5
d105 5
@


1.29
log
@Revised the C++ implementation of the setVectorToScalar methods.
@
text
@d54 30
a128 30

template <typename Elem>
      void WitJ::Att::setVectorToScalar (Component * theComp, Elem theScalar)
   {
   Elem * theCTVec;
   int    nPers;
   int    thePer;

   getCTVecSupply ()->provideCTVec (theCTVec);

   nPers = getCoordinator ()->getGlobalAspect ()->getNPeriods ();

   for (thePer = 0; thePer < nPers; thePer ++)
      {
      theCTVec[thePer] = theScalar;
      }

   setValue (theComp, theCTVec);

   getCTVecSupply ()->reclaimCTVecs ();
   }

//------------------------------------------------------------------------------
// Explicit instantiation of member function template setVectorToScalar (...).
//------------------------------------------------------------------------------

template void WitJ::Att::setVectorToScalar <int>    (Component *, int);
template void WitJ::Att::setVectorToScalar <double> (Component *, double);

//------------------------------------------------------------------------------
@


1.28
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d7 5
a11 2
#include     <Att.h>
#include <AttBldr.h>
d99 30
@


1.27
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d30 1
a30 1
void WitJ::Att::setValue (Element *, int)
d35 1
a35 1
void WitJ::Att::setValue (Element *, double)
d40 1
a40 1
void WitJ::Att::setValue (Element *, const int *)
d45 1
a45 1
void WitJ::Att::setValue (Element *, const double *)
d57 1
a57 1
void WitJ::Att::getValue (Element *, int &)
d62 1
a62 1
void WitJ::Att::getValue (Element *, double &)
d67 1
a67 1
void WitJ::Att::getValue (Element *, VecWoa <int> &)
d72 1
a72 1
void WitJ::Att::getValue (Element *, VecWoa <double> &)
d82 1
a82 1
         const char * theElemClassName):
d86 1
a86 1
      myElemClassName_ (theElemClassName)
@


1.26
log
@Change the mname of the ProbCtr classes to ProbMgr in both Java and C++.
@
text
@d84 1
a84 1
      JavaAccObj       (theAttBldr->getProbMgr ()),
@


1.25
log
@Continued implementation of the ProbCtr classes.
@
text
@d84 1
a84 1
      JavaAccObj       (theAttBldr->getProbCtr ()),
@


1.24
log
@Implemented EXCEPTION_ASSERT and ABORTING_ASSERT.
@
text
@d84 1
a84 1
      JavaAccObj       (theAttBldr->getProblem ()),
@


1.23
log
@Updated some comments.
@
text
@d32 1
a32 1
   WITJ_ASSERT (false);
d37 1
a37 1
   WITJ_ASSERT (false);
d42 1
a42 1
   WITJ_ASSERT (false);
d47 1
a47 1
   WITJ_ASSERT (false);
d59 1
a59 1
   WITJ_ASSERT (false);
d64 1
a64 1
   WITJ_ASSERT (false);
d69 1
a69 1
   WITJ_ASSERT (false);
d74 1
a74 1
   WITJ_ASSERT (false);
d88 1
a88 1
   WITJ_ASSERT    (isupper (myAttName_[0]));
@


1.22
log
@Changed to all upper case for the names of macros.
@
text
@d4 1
a4 1
// Contains the definition of class Att.
d24 1
a24 1
// Class Att definitions of setValue functions.
d51 1
a51 1
// Class Att definitions of getValue functions.
d96 1
a96 1
// Specialized definition of member function Att::scalarTypeMatches <Value>.
d122 1
a122 1
// Specialized definition of member function Att::vectorTypeMatches <Elem>.
@


1.21
log
@Removed C++ class Session.
@
text
@d32 1
a32 1
   witjAssert (false);
d37 1
a37 1
   witjAssert (false);
d42 1
a42 1
   witjAssert (false);
d47 1
a47 1
   witjAssert (false);
d59 1
a59 1
   witjAssert (false);
d64 1
a64 1
   witjAssert (false);
d69 1
a69 1
   witjAssert (false);
d74 1
a74 1
   witjAssert (false);
d88 1
a88 1
   witjAssert     (isupper (myAttName_[0]));
@


1.20
log
@Name change.
@
text
@d84 1
a84 1
      JavaAccObj       (theAttBldr->getSession ()),
@


1.19
log
@Changed name of Component to Entity.
@
text
@d30 1
a30 1
void WitJ::Att::setValue (Entity *, int)
d35 1
a35 1
void WitJ::Att::setValue (Entity *, double)
d40 1
a40 1
void WitJ::Att::setValue (Entity *, const int *)
d45 1
a45 1
void WitJ::Att::setValue (Entity *, const double *)
d57 1
a57 1
void WitJ::Att::getValue (Entity *, int &)
d62 1
a62 1
void WitJ::Att::getValue (Entity *, double &)
d67 1
a67 1
void WitJ::Att::getValue (Entity *, VecWoa <int> &)
d72 1
a72 1
void WitJ::Att::getValue (Entity *, VecWoa <double> &)
d82 1
a82 1
         const char * theEntityClassName):
d84 3
a86 3
      JavaAccObj         (theAttBldr->getSession ()),
      myAttName_         (theAttName),
      myEntityClassName_ (theEntityClassName)
@


1.18
log
@Changed name of C++ class JAccObject to JavaAccObj.
@
text
@d30 1
a30 1
void WitJ::Att::setValue (Component *, int)
d35 1
a35 1
void WitJ::Att::setValue (Component *, double)
d40 1
a40 1
void WitJ::Att::setValue (Component *, const int *)
d45 1
a45 1
void WitJ::Att::setValue (Component *, const double *)
d57 1
a57 1
void WitJ::Att::getValue (Component *, int &)
d62 1
a62 1
void WitJ::Att::getValue (Component *, double &)
d67 1
a67 1
void WitJ::Att::getValue (Component *, VecWoa <int> &)
d72 1
a72 1
void WitJ::Att::getValue (Component *, VecWoa <double> &)
d82 1
a82 1
         const char * theCompClassName):
d84 3
a86 3
      JavaAccObj       (theAttBldr->getSession ()),
      myAttName_       (theAttName),
      myCompClassName_ (theCompClassName)
@


1.17
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@d84 1
a84 1
      JAccObject       (theAttBldr->getSession ()),
@


1.16
log
@Attributes.
@
text
@d84 1
a84 1
      JAccObject       (theAttBldr->getProbCoord ()),
@


1.15
log
@Attributes.
@
text
@d105 2
a106 2
         (theTypeName == "int")
      || (theTypeName == "boolean");
d117 1
a117 1
   return (theTypeName == "double");
@


1.14
log
@Attributes.
@
text
@d81 2
a82 2
         const char * theAttCName,
         const char * theCompClassCName):
d85 2
a86 2
      myAttName_       (theAttCName),
      myCompClassName_ (theCompClassCName)
@


1.13
log
@Attributes.
@
text
@d18 1
a18 1
WitJ::Att * WitJ::Att::thisAtt ()
@


1.12
log
@Attributes.
@
text
@d94 52
@


1.11
log
@Attributes.
@
text
@d88 4
@


1.10
log
@Attributes.
@
text
@d24 5
a32 2
      //
      // This Att does not represent an attribute of type int.
a34 2
//------------------------------------------------------------------------------

a37 2
      //
      // This Att does not represent an attribute of type int.
a39 2
//------------------------------------------------------------------------------

a42 3
      //
      // This Att does not represent an attribute of type time-vector of
      // doubles.
a44 2
//------------------------------------------------------------------------------

a47 3
      //
      // This Att does not represent an attribute of type time-vector of
      // doubles.
d51 5
a59 2
      //
      // This Att does not represent an attribute of type int.
d62 9
a70 1
//------------------------------------------------------------------------------
a74 3
      //
      // This Att does not represent an attribute of type time-vector of
      // doubles.
@


1.9
log
@Attributes.
@
text
@d25 1
a25 3
void WitJ::Att::setValue (
      Component * theComp,
      int         theInt)
d34 1
a34 3
void WitJ::Att::getValue (
      Component * theComp,
      int &       theInt)
d43 1
a43 3
void WitJ::Att::setValue (
      Component *    theComp,
      const double * theDblCVec)
d53 20
a72 3
void WitJ::Att::getValue (
      Component *       theComp,
      VecWoa <double> & theDblVecWoa)
@


1.8
log
@Changed the names of access functions beginning with "my"
to begin with "get".
@
text
@d72 3
a74 2
         AttBldr *  theAttBldr,
         const char * theName):
d76 3
a78 2
      JAccObject (theAttBldr->getProbCoord ()),
      myName_    (theName)
@


1.7
log
@Attributes.
@
text
@d75 1
a75 1
      JAccObject (theAttBldr->myProbCoord ()),
@


1.6
log
@Attributes.
@
text
@d29 1
a29 1
   assert (false);
d40 1
a40 1
   assert (false);
d51 1
a51 1
   assert (false);
d63 1
a63 1
   assert (false);
@


1.5
log
@Attributes.
@
text
@d7 2
a8 6
#include      <Att.h>
#include  <AttBldr.h>

#include      <wit.h>

#include <iostream>
a13 6
   std::cout
      << std::endl
      << "Destroying Att \""
      << myName_
      << "\"."
      << std::endl;
@


1.4
log
@Attributes.
@
text
@d10 2
d36 22
@


1.3
log
@Added myName_ to class Att.
@
text
@d8 1
d58 1
a58 1
         ProbCoord *  theProbCoord,
d61 1
a61 1
      JAccObject (theProbCoord),
d64 1
@


1.2
log
@Attributes
@
text
@d17 3
a19 1
      << "Destroying a WitJ::Att."
d56 3
a58 1
WitJ::Att::Att (ProbCoord * theProbCoord):
d60 2
a61 1
      JAccObject (theProbCoord)
a63 1

@


1.1
log
@Initial implementation of attributes.
@
text
@d42 12
@

