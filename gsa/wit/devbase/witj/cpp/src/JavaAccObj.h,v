head	1.39;
access;
symbols;
locks; strict;
comment	@ * @;


1.39
date	2011.04.15.00.07.24;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2011.04.05.22.25.41;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2011.04.01.23.25.01;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2011.03.29.23.38.46;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2011.03.25.22.49.14;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2011.03.15.20.56.42;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.02.25.16.06.50;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2010.04.13.23.10.42;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2009.06.04.23.04.21;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2009.03.26.19.22.23;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2009.03.13.19.32.18;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2009.03.13.16.36.07;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2009.03.12.22.45.18;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2009.02.26.22.46.58;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2009.02.20.17.18.44;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2009.02.17.23.46.01;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2009.02.10.23.19.29;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2009.02.06.22.40.58;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2009.02.03.16.32.27;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.01.31.00.56.26;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.01.29.22.06.37;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.01.23.23.57.55;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.01.22.23.12.41;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.01.21.21.43.22;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.01.16.21.33.31;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.01.16.17.03.34;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.15.22.50.31;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.15.20.46.51;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.01.14.22.24.34;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.15.17.28.47;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.15.17.17.39;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.11.26.18.33.04;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.26.15.28.04;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.26.14.48.18;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.07.18.50.24;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.10.06.22.14.02;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.29.18.44.09;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.27.00.37.58;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.26.22.50.16;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.39
log
@Class template CORJOR
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File JavaAccObj.h.
//
// Contains the declaration of class JavaAccObj.
//------------------------------------------------------------------------------

#ifndef JavaAccObj_h
#define JavaAccObj_h

#include <Includes.h>

//------------------------------------------------------------------------------
// Class JavaAccObj
//
// "Java Accessible Object"
// This class and the classes derived from it are set up to be accessible from
// the Java side of WIT-J.
//
// Class Hierarchy:
//
// JavaAccObj
//    Coordinator
//    AttBldr
//    Att
//       ProblemScalarAtt <Value>
//       GlobalScalarAtt  <Value>
//       PartScalarAtt    <Value>
//       DemandScalarAtt  <Value>
//       OpnScalarAtt     <Value>
//       BomScalarAtt     <Value>
//       SubScalarAtt     <Value>
//       BopScalarAtt     <Value>
//       StringProblemScalarAtt
//       StringGlobalScalarAtt
//       GlobalVectorAtt <Elem>
//       PartVectorAtt   <Elem>
//       DemandVectorAtt <Elem>
//       OpnVectorAtt    <Elem>
//       BomVectorAtt    <Elem>
//       SubVectorAtt    <Elem>
//       BopVectorAtt    <Elem>
//    MessageMgr
//    Component
//       Problem
//       Part
//       Demand
//       Operation
//       BomEntry
//       Substitute
//       BopEntry
//------------------------------------------------------------------------------

namespace WitJ
{
class JavaAccObj
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   virtual ~JavaAccObj ();

   inline bool isValid ()
      {
      return (validityMarker_ == validMark_);
      }

   //---------------------------------------------------------------------------
   // getDerived (...) functions.
   //
   // In each case, if this JavaAccObj is actually an instance of the
   // indicated derived class, the argument is set to that instance;
   // Otherwise, an error is issued.
   //---------------------------------------------------------------------------

   void getDerived (JavaAccObj * &);
   void getDerived (Coordinator * &);
   void getDerived (Problem * &);
   void getDerived (AttBldr * &); 
   void getDerived (Att * &);
   void getDerived (MessageMgr * &);
   void getDerived (Component * &);
   void getDerived (Part * &);
   void getDerived (Demand * &);
   void getDerived (Operation * &);
   void getDerived (BomEntry * &);
   void getDerived (Substitute * &);
   void getDerived (BopEntry * &);

   //---------------------------------------------------------------------------
   // as{derived class} functions.
   //
   // In each case, if this JavaAccObj is actually an instance of the
   // indicated derived class, the function returns that instance;
   // Otherwise, an error is issued.
   //---------------------------------------------------------------------------

   virtual Coordinator * asCoordinator ();
   virtual Problem *     asProblem     ();
   virtual AttBldr *     asAttBldr     ();
   virtual Att *         asAtt         ();
   virtual MessageMgr *  asMessageMgr  ();
   virtual Component *   asComponent   ();
   virtual Part *        asPart        ();
   virtual Demand *      asDemand      ();
   virtual Operation *   asOperation   ();
   virtual BomEntry *    asBomEntry    ();
   virtual Substitute *  asSubstitute  ();
   virtual BopEntry *    asBopEntry    ();

   //---------------------------------------------------------------------------
   // Pass thru to myCoordinator_:
   //---------------------------------------------------------------------------

   WitRun *      getWitRun         ();
   CTVecSupply * getCTVecSupply    ();
   bool          extractInProgress ();

   //---------------------------------------------------------------------------
   // Accessors.
   //---------------------------------------------------------------------------

   inline Coordinator * getCoordinator ()
      {
      return             myCoordinator_;
      }

   //---------------------------------------------------------------------------
   // Protected member functions.
   //---------------------------------------------------------------------------

   protected:

   explicit JavaAccObj (Coordinator *);
      //
      // Constructor.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   JavaAccObj              (const JavaAccObj &);
   JavaAccObj & operator = (const JavaAccObj &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   Coordinator * const myCoordinator_;
      //
      // The Coordinator for this JavaAccObj.

   static const int validMark_;
      //
      // The value of the validityMarker_ data member of any valid JavaAccObj.

   int validityMarker_;
      //
      // This AccObject is currently valid (i.e., not destroyed), iff
      // validityMarker_ == validMark_.
   };
};
//
// End of namespace WitJ.

#endif
@


1.38
log
@Namespace JniUtil.
@
text
@d71 22
@


1.37
log
@JniAsst
@
text
@a94 1
   JniAsst *     getJniAsst        ();
@


1.36
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@d95 1
@


1.35
log
@ArrayListJOR
@
text
@a64 5
   void acquire (CORJOR * theCORJOR);
      //
      // Takes ownership of theCORJOR.
      // To be called once for each instance of this class.

a102 5
   inline CORJOR * getCORJOR ()
      {
      return            myCORJOR_;
      }

a132 7
   CORJOR * myCORJOR_;
      //
      // The CORJOR owned by this JavaAccObj.
      // Represents the Java object that owns this JavaAccObj.
      // Since the pointer is initially NULL, it should be set to a CORJOR
      // with a call to acquire (...) before this JavaAccObj is put into use.

@


1.34
log
@Renamed JavaObjRep to CORJOR.
@
text
@a50 1
//    AllocTripleVec
d83 12
a94 13
   virtual Coordinator *    asCoordinator    ();
   virtual Problem *        asProblem        ();
   virtual AttBldr *        asAttBldr        ();
   virtual Att *            asAtt            ();
   virtual MessageMgr *     asMessageMgr     ();
   virtual Component *      asComponent      ();
   virtual Part *           asPart           ();
   virtual Demand *         asDemand         ();
   virtual Operation *      asOperation      ();
   virtual BomEntry *       asBomEntry       ();
   virtual Substitute *     asSubstitute     ();
   virtual BopEntry *       asBopEntry       ();
   virtual AllocTripleVec * asAllocTripleVec ();
@


1.33
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@d66 1
a66 1
   void acquire (JavaObjRep * theJavaObjRep);
d68 1
a68 1
      // Takes ownership of theJavaObjRep.
d110 1
a110 1
   inline JavaObjRep * getJavaObjRep ()
d112 1
a112 1
      return            myJavaObjRep_;
d145 1
a145 1
   JavaObjRep * myJavaObjRep_;
d147 1
a147 1
      // The JavaObjRep owned by this JavaAccObj.
d149 1
a149 1
      // Since the pointer is initially NULL, it should be set to a JavaObjRep
@


1.32
log
@Implemented String StdAttImps.
@
text
@a21 1
//    Problem
d25 9
a33 7
//       GlobalScalarAtt <Value>
//       PartScalarAtt   <Value>
//       DemandScalarAtt <Value>
//       OpnScalarAtt    <Value>
//       BomScalarAtt    <Value>
//       SubScalarAtt    <Value>
//       BopScalarAtt    <Value>
d44 1
a44 1
//       GlobalAspect
a89 1
   virtual GlobalAspect *   asGlobalAspect   ();
@


1.31
log
@Changed handling of Lists of AllocTriples to avoid call-backs.
@
text
@d33 1
@


1.30
log
@Replaced C++ classes CTVecHolder <...> and CTVecRes with CTVecSupply.
@
text
@d49 1
a49 1
//    AllocTripleList
d82 14
a95 14
   virtual Coordinator *     asCoordinator     ();
   virtual Problem *         asProblem         ();
   virtual AttBldr *         asAttBldr         ();
   virtual Att *             asAtt             ();
   virtual MessageMgr *      asMessageMgr      ();
   virtual Component *       asComponent       ();
   virtual GlobalAspect *    asGlobalAspect    ();
   virtual Part *            asPart            ();
   virtual Demand *          asDemand          ();
   virtual Operation *       asOperation       ();
   virtual BomEntry *        asBomEntry        ();
   virtual Substitute *      asSubstitute      ();
   virtual BopEntry *        asBopEntry        ();
   virtual AllocTripleList * asAllocTripleList ();
@


1.29
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d98 2
d101 3
a103 7
   WitRun * getWitRun ();
      //
      // Pass thru to myCoordinator_.

   bool extractInProgress ();
      //
      // Pass thru to myCoordinator_.
@


1.28
log
@Changed name of GlobalComponent classes to GlobalAspect.
@
text
@d41 1
a41 1
//    Element
d87 1
a87 1
   virtual Element *         asElement         ();
@


1.27
log
@Changed name of GlobalElement classes to GlobalComponent.
@
text
@d42 1
a42 1
//       GlobalComponent
d88 1
a88 1
   virtual GlobalComponent * asGlobalComponent ();
@


1.26
log
@Removed C++ class Extractor.
@
text
@d42 1
a42 1
//       GlobalElement
d88 1
a88 1
   virtual GlobalElement *   asGlobalElement   ();
@


1.25
log
@Added the AllocTripleList classes.
@
text
@d103 1
a103 1
   bool getExtractMode ();
d105 1
a105 1
      // Pass thru to the Extractor.
@


1.24
log
@Removed the ShipTriple classes.
@
text
@d49 1
d82 14
a95 13
   virtual Coordinator *   asCoordinator   ();
   virtual Problem *       asProblem       ();
   virtual AttBldr *       asAttBldr       ();
   virtual Att *           asAtt           ();
   virtual MessageMgr *    asMessageMgr    ();
   virtual Element *       asElement       ();
   virtual GlobalElement * asGlobalElement ();
   virtual Part *          asPart          ();
   virtual Demand *        asDemand        ();
   virtual Operation *     asOperation     ();
   virtual BomEntry *      asBomEntry      ();
   virtual Substitute *    asSubstitute    ();
   virtual BopEntry *      asBopEntry      ();
@


1.23
log
@Replaced the AllocTarget classes with ShipTriple classes.
@
text
@a48 1
//    ShipTriple
a93 1
   virtual ShipTriple *    asShipTriple    ();
@


1.22
log
@Problem.eqHeurAlloc.
@
text
@d49 1
a49 1
//    AllocTarget
d95 1
a95 1
   virtual AllocTarget *   asAllocTarget   ();
@


1.21
log
@Removed the Alternative classes.
@
text
@d49 1
d95 1
@


1.20
log
@Part.Category as Alternative
@
text
@a39 1
//    Alternative
a93 1
   virtual Alternative *   asAlternative   ();
@


1.19
log
@Implemented Java class CppGateway.
@
text
@d40 1
a49 1
//    Alternative
@


1.18
log
@Alternative classes.
@
text
@d64 5
d111 5
d118 1
a118 1
      return myCoordinator_;
d146 7
@


1.17
log
@Removed java class ElementMgr, moving its responsibilities to class
Coordinator.
@
text
@d49 1
d90 1
@


1.16
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d22 1
a23 1
//    Problem
@


1.15
log
@ProbMgr classes.
@
text
@d22 1
a22 1
//    ProbMgr
d76 1
a76 1
   virtual ProbMgr *       asProbMgr       ();
d94 1
a94 1
      // Pass thru to myProbMgr_.
d104 1
a104 1
   inline ProbMgr * getProbMgr ()
d106 1
a106 1
      return myProbMgr_;
d115 1
a115 1
   explicit JavaAccObj (ProbMgr *);
d134 1
a134 1
   ProbMgr * const myProbMgr_;
d136 1
a136 1
      // The ProbMgr for this JavaAccObj.
@


1.14
log
@Change the mname of the ProbCtr classes to ProbMgr in both Java and C++.
@
text
@a91 4
   Problem * getProblem ();
      //
      // Pass thru to myProbMgr_.

@


1.13
log
@Continued implementation of ProbCtr classes.
@
text
@d22 1
a22 1
//    ProbCtr
d76 1
a76 1
   virtual ProbCtr *       asProbCtr       ();
d94 1
a94 1
      // Pass thru to myProbCtr_.
d98 1
a98 1
      // Pass thru to myProbCtr_.
d108 1
a108 1
   inline ProbCtr * getProbCtr ()
d110 1
a110 1
      return myProbCtr_;
d119 1
a119 1
   explicit JavaAccObj (ProbCtr *);
d138 1
a138 1
   ProbCtr * const myProbCtr_;
d140 1
a140 1
      // The ProbCtr for this JavaAccObj.
@


1.12
log
@Continued implementation of the ProbCtr classes.
@
text
@d76 1
@


1.11
log
@Initial implementation of C++ class ProbCtr.
@
text
@d91 4
d97 1
a97 1
      // Pass thru to myProblem_.
d107 1
a107 1
   inline Problem * getProblem ()
d109 1
a109 1
      return myProblem_;
d118 1
a118 1
   explicit JavaAccObj (Problem *);
a136 4
   Problem * const myProblem_;
      //
      // The Problem for this JavaAccObj.

@


1.10
log
@Updated some comments.
@
text
@d22 1
d137 4
@


1.9
log
@Initial implementation of class ExceptionHandler.
@
text
@d126 1
a126 1
      // Not defined; prevents accidental copying and assignment.
@


1.8
log
@Removed C++ class Session.
@
text
@d21 27
a47 27
//    JavaAccObj
//       Problem
//       AttBldr
//       Att
//          GlobalScalarAtt <Value>
//          PartScalarAtt   <Value>
//          DemandScalarAtt <Value>
//          OpnScalarAtt    <Value>
//          BomScalarAtt    <Value>
//          SubScalarAtt    <Value>
//          BopScalarAtt    <Value>
//          GlobalVectorAtt <Elem>
//          PartVectorAtt   <Elem>
//          DemandVectorAtt <Elem>
//          OpnVectorAtt    <Elem>
//          BomVectorAtt    <Elem>
//          SubVectorAtt    <Elem>
//          BopVectorAtt    <Elem>
//       MessageMgr
//       Element
//          GlobalElement
//          Part
//          Demand
//          Operation
//          BomEntry
//          Substitute
//          BopEntry
@


1.7
log
@Removed SessionCOR.C.
@
text
@a21 1
//       Session
d75 3
a77 1
   virtual Session *       asSession       ();
a78 1
   virtual Problem *       asProblem       ();
a86 2
   virtual AttBldr *       asAttBldr       ();
   virtual Att *           asAtt           ();
d92 1
a92 1
      // Pass thru to mySession_.
a97 4
   virtual bool isProblem ();
      //
      // Returrns true, iff this JavaAccObj is actually a Problem.

d102 1
a102 1
   inline Session * getSession ()
d104 1
a104 1
      return mySession_;
d113 1
a113 1
   explicit JavaAccObj (Session *);
d132 1
a132 1
   Session * const mySession_;
d134 1
a134 1
      // The Session for this JavaAccObj.
@


1.6
log
@Removed Java class SessionCOR.
@
text
@a22 1
//       MessageMgr
a23 8
//       Element
//          GlobalElement
//          Part
//          Demand
//          Operation
//          BomEntry
//          Substitute
//          BopEntry
d40 9
@


1.5
log
@Name change.
@
text
@d100 4
@


1.4
log
@Changed name of Component to Entity.
@
text
@d25 2
a26 2
//       Entity
//          GlobalEntity
d76 13
a88 13
   virtual Session *      asSession      ();
   virtual MessageMgr *   asMessageMgr   ();
   virtual Problem *      asProblem      ();
   virtual Entity *       asEntity       ();
   virtual GlobalEntity * asGlobalEntity ();
   virtual Part *         asPart         ();
   virtual Demand *       asDemand       ();
   virtual Operation *    asOperation    ();
   virtual BomEntry *     asBomEntry     ();
   virtual Substitute *   asSubstitute   ();
   virtual BopEntry *     asBopEntry     ();
   virtual AttBldr *      asAttBldr      ();
   virtual Att *          asAtt          ();
@


1.3
log
@Call-back infrastructure.
@
text
@d25 2
a26 2
//       Component
//          GlobalComp
d76 13
a88 13
   virtual Session *    asSession    ();
   virtual MessageMgr * asMessageMgr ();
   virtual Problem *    asProblem    ();
   virtual Component *  asComponent  ();
   virtual GlobalComp * asGlobalComp ();
   virtual Part *       asPart       ();
   virtual Demand *     asDemand     ();
   virtual Operation *  asOperation  ();
   virtual BomEntry *   asBomEntry   ();
   virtual Substitute * asSubstitute ();
   virtual BopEntry *   asBopEntry   ();
   virtual AttBldr *    asAttBldr    ();
   virtual Att *        asAtt        ();
@


1.2
log
@Extraction.
@
text
@a108 7
   inline JavaObjRep * getJavaObjRep ()
      {
      witjAssert (myJavaObjRep_ != NULL);

      return myJavaObjRep_;
      }

a115 1
   explicit JavaAccObj (Session *, JavaObjRep *);
d117 1
a117 1
      // Constructors.
a137 4
   JavaObjRep * const myJavaObjRep_;
      //
      // The JavaObjRep for this JavaAccObj, if any; otherwise NULL.

@


1.1
log
@Changed name of C++ class JAccObject to JavaAccObj.
@
text
@a91 6
   void attach (JavaObjRep * theJavaObjRep);
      //
      // Attaches theJavaObjRep to this JavaAccObj.

   //---------------------------------------------------------------------------

d123 1
d125 1
a125 1
      // Constructor.
d142 1
a142 1
   JavaObjRep * myJavaObjRep_;
d144 1
a144 1
      // The JavaObjRep for this JavaAccObj, if any; otherwise NULL.
d146 1
a146 1
   Session * const mySession_;
d148 1
a148 1
      // The Session for this JavaAccObj.
@

