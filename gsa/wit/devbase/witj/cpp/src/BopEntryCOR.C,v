head	1.20;
access;
symbols;
locks; strict;
comment	@ * @;


1.20
date	2011.04.15.19.12.30;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.04.15.19.01.05;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.04.15.00.07.21;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.04.13.22.36.20;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.04.05.22.25.38;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.04.01.23.24.59;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.03.30.16.20.37;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.03.29.23.38.43;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.03.19.00.26.07;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.06.05.15.08.21;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.03.06.15.43.24;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.29.22.06.36;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.15.17.17.38;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.12.23.38.30;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.12.19.29.24;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.03.20.35.52;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.29.22.43.46;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.29.15.26.11;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.29.15.05.36;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.26.22.21.21;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Java CppObjRep classes
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source file BopEntryCOR.C.
//
// Contains the C++ implementations of the native methods of Java class
// witj.BopEntryCOR.
//------------------------------------------------------------------------------

#include     <NativeMacros.h>
#include <ExceptionHandler.h>
#include           <CORJOR.h>
#include         <BopEntry.h>

using namespace WitJ;

//------------------------------------------------------------------------------

NATIVE_METHOD (void, BopEntryCOR, acquireNewCppObject) (
      JNIEnv *   theJNIEnv,
      _jobject * theBopEntCORJObj,
      _jobject * theOpnCORJObj,
      jint       theBopIdx,
      _jobject * thePartCORJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <BopEntry>  theBopEntCJOR (theBopEntCORJObj, theJNIEnv);
   CORJOR <Operation> theOpnCJOR    (theOpnCORJObj,    theJNIEnv);
   CORJOR <Part>      thePartCJOR   (thePartCORJObj,   theJNIEnv);
   BopEntry *         theBopEnt;

   theBopEnt =
      new BopEntry (
         theOpnCJOR .getCppObject (),
         theBopIdx,
         thePartCJOR.getCppObject ());

   theBopEntCJOR.acquire (theBopEnt);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (jint, BopEntryCOR, getBopIndex) (
      JNIEnv *   theJNIEnv,
      _jobject * theBopEntCORJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <BopEntry> theBopEntCJOR (theBopEntCORJObj,  theJNIEnv);

   return theBopEntCJOR.getCppObject ()->getBopIndex ();

   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, 0)
   }
@


1.19
log
@Class template CORJOR
@
text
@d17 1
a17 1
NATIVE_METHOD (void, BopEntryCOR, createCppObject) (
@


1.18
log
@Class template CORJOR
@
text
@d29 1
d31 7
a37 1
   theBopEntCJOR = new BopEntry (theOpnCJOR, theBopIdx, thePartCJOR);
d52 1
a52 1
   return theBopEntCJOR->getBopIndex ();
@


1.17
log
@Removed namespace JniUtil.
@
text
@d10 1
d26 3
a28 3
   Operation * theOpn;
   Part      * thePart;
   BopEntry  * theBopEnt;
d30 1
a30 6
   theOpn    = getOperation (theOpnCORJObj,  theJNIEnv);
   thePart   = getPart      (thePartCORJObj, theJNIEnv);

   theBopEnt = new BopEntry (theOpn, theBopIdx, thePart);

   JniClient::transferTo (theBopEntCORJObj, theBopEnt, theJNIEnv);
d43 1
a43 3
   BopEntry * theBopEnt;

   theBopEnt = getBopEntry (theBopEntCORJObj, theJNIEnv);
d45 1
a45 1
   return theBopEnt->getBopIndex ();
@


1.16
log
@Namespace JniUtil.
@
text
@a8 1
#include          <JniUtil.h>
a12 1
using namespace WitJ::JniUtil;
d34 1
a34 1
   transferTo (theBopEntCORJObj, theBopEnt, theJNIEnv);
@


1.15
log
@JniAsst
@
text
@d9 1
a10 1
#include          <JniAsst.h>
d14 1
d31 2
a32 2
   theOpn    = JniAsst::getOperation (theOpnCORJObj,  theJNIEnv);
   thePart   = JniAsst::getPart      (thePartCORJObj, theJNIEnv);
d36 1
a36 1
   theBopEnt->getJniAsst ()->transferTo (theBopEntCORJObj, theBopEnt);
d51 1
a51 1
   theBopEnt = JniAsst::getBopEntry (theBopEntCORJObj, theJNIEnv);
@


1.14
log
@Revised CppObjRep class ctors.
@
text
@d10 1
a10 1
#include       <NativeCall.h>
a25 1
   NativeCall  theCall (theJNIEnv);
d30 2
a31 2
   theOpn       = theCall.getJavaAccObj  (theOpnCORJObj)->asOperation ();
   thePart      = theCall.getJavaAccObj (thePartCORJObj)->asPart      ();
d33 1
a33 1
   theBopEnt    = new BopEntry (theOpn, theBopIdx, thePart);
d35 1
a35 1
   theCall.transferTo (theBopEntCORJObj, theBopEnt);
a47 1
   NativeCall theCall (theJNIEnv);
d50 1
a50 1
   theBopEnt = theCall.getJavaAccObj (theBopEntCORJObj)->asBopEntry ();
@


1.13
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@d21 1
a21 1
      jint       theBopIndex,
d34 1
a34 1
   theBopEnt    = new BopEntry (theOpn, theBopIndex, thePart);
@


1.12
log
@Revised the arguments to eqHeurAlloc.
@
text
@d36 1
a36 1
   theCall.associate (theBopEntCORJObj, theBopEnt);
@


1.11
log
@Changed the name each native method that creates a C++ object to
   createCppObject.
@
text
@d31 2
a32 2
   theOpn       = theCall.getObject  (theOpnCORJObj)->asOperation ();
   thePart      = theCall.getObject (thePartCORJObj)->asPart      ();
d52 1
a52 1
   theBopEnt = theCall.getObject (theBopEntCORJObj)->asBopEntry ();
@


1.10
log
@purgeData
@
text
@d17 1
a17 1
NATIVE_METHOD (void, BopEntryCOR, createMyCppBopEntry) (
@


1.9
log
@Implemented Java class CppGateway.
@
text
@d40 18
@


1.8
log
@Initial implementation of class ExceptionHandler.
@
text
@a10 1
#include       <JavaObjRep.h>
d22 1
a22 2
      _jobject * thePartCORJObj,
      _jobject * theBopEntJObj)
d26 4
a29 5
   NativeCall   theCall (theJNIEnv);
   Operation *  theOpn;
   Part      *  thePart;
   JavaObjRep * theBopEntJOR;
   BopEntry  *  theBopEnt;
d34 1
a34 1
   theBopEntJOR = new JavaObjRep (theCall, theBopEntJObj);
d36 1
a36 3
   theBopEnt    = new BopEntry (theOpn, theBopIndex, thePart, theBopEntJOR);

   theCall.transferTo (theBopEntCORJObj, theBopEnt);
@


1.7
log
@Imbedded every native method implementation in a canonical try block.
@
text
@d8 5
a12 5
#include  <NativeMacros.h>
#include <WitjException.h>
#include    <NativeCall.h>
#include    <JavaObjRep.h>
#include      <BopEntry.h>
@


1.6
log
@Changed to all upper case for the names of macros.
@
text
@d8 5
a12 4
#include <NativeMacros.h>
#include   <NativeCall.h>
#include   <JavaObjRep.h>
#include     <BopEntry.h>
d26 2
d42 2
@


1.5
log
@Implemented extraction of BOP entries.
@
text
@d17 1
a17 1
nativeMethod (void, BopEntryCOR, createMyCppBopEntry) (
@


1.4
log
@Call-back infrastructure.
@
text
@d21 1
d36 1
a36 1
   theBopEnt    = new BopEntry (theOpn, thePart, theBopEntJOR);
@


1.3
log
@Changed name of C++ class JniHandler to NativeCall.
@
text
@d10 1
d21 2
a22 1
      _jobject * thePartCORJObj)
d24 5
a28 4
   NativeCall  theCall (theJNIEnv);
   Operation * theOpn;
   Part      * thePart;
   BopEntry  * theBopEnt;
d30 2
a31 2
   theOpn    = theCall.getObject  (theOpnCORJObj)->asOperation ();
   thePart   = theCall.getObject (thePartCORJObj)->asPart      ();
d33 3
a35 1
   theBopEnt = new BopEntry (theOpn, thePart);
@


1.2
log
@Moved macro nativeMethod to its own header file.
@
text
@d9 1
a9 1
#include   <JniHandler.h>
d22 1
a22 1
   JniHandler  theJniHand (theJNIEnv);
d27 2
a28 2
   theOpn    = theJniHand.getObject  (theOpnCORJObj)->asOperation ();
   thePart   = theJniHand.getObject (thePartCORJObj)->asPart      ();
d32 1
a32 1
   theJniHand.transferTo (theBopEntCORJObj, theBopEnt);
@


1.1
log
@Numerous class name changes.
@
text
@d8 3
a10 2
#include <JniHandler.h>
#include   <BopEntry.h>
@

