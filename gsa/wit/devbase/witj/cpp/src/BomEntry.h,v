head	1.34;
access;
symbols;
locks; strict;
comment	@ * @;


1.34
date	2011.04.08.20.56.16;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.03.30.16.20.36;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2009.04.15.23.33.26;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2009.04.15.22.14.55;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2009.04.15.21.11.57;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2009.03.13.19.32.17;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2009.03.05.19.09.16;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2009.03.05.17.21.25;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2009.02.27.23.12.29;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2009.02.27.21.22.39;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2009.02.27.18.44.24;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2009.01.29.22.06.36;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.12.15.17.28.46;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.12.15.17.17.38;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.10.07.18.50.22;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.10.06.22.14.00;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.10.02.21.45.13;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.09.29.22.43.46;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.09.26.22.50.15;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.08.29.15.34.42;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.08.27.15.30.44;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.07.01.17.49.15;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.18.21.28.17;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.10.23.25.06;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.10.23.21.32;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.10.22.32.34;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.22.22.00.12;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.22.21.02.57;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.21.14.33.47;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.20.18.16.38;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.19.22.20.53;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.19.16.15.29;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.15.19.45.16;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.20.54.10;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.34
log
@copyComponentData
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File BomEntry.h.
//
// Contains the declaration of class BomEntry.
//------------------------------------------------------------------------------

#ifndef BomEntry_h
#define BomEntry_h

#include <Component.h>

//------------------------------------------------------------------------------
// Class BomEntry
//
// Represents a BOM entry in an implosion problem.
//
// Class Hierarchy:
//
// JavaAccObj
//    Component
//       BomEntry
//------------------------------------------------------------------------------

namespace WitJ
{
class BomEntry: public Component
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit BomEntry (
         Operation *  theOpn, 
         int          theBomIdx,
         Part *       thePart);
      //
      // Constructor.

   ~BomEntry ();
      //
      // Destructor.

   virtual BomEntry * asBomEntry ();
      //
      // Override from class JavaAccObj.

   virtual void copyComponentData (Component *);
      //
      // Override from class Component.

   const char * getOperationName ();
      //
      // Access wrapper from myOpn_;

   void setBomIndex (int);
      //
      // Setter.

   //---------------------------------------------------------------------------
   // Accessors.
   //---------------------------------------------------------------------------

   inline int getBomIndex ()
      {
      return myBomIndex_;
      }

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   BomEntry              (const BomEntry &);
   BomEntry & operator = (const BomEntry &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   Operation * const myOpn_;
      //
      // The consuming Operation for this BomEntry.

   int myBomIndex_;
      //
      // The BOM entry index for this BomEntry.
      // This is the # of BomEntries for myOpn_ that were created before this
      // one and still exist.
   };
};
//
// End of namespace WitJ.

#endif
@


1.33
log
@Revised CppObjRep class ctors.
@
text
@d49 4
@


1.32
log
@Moved findInstsnce functions into class Component.
@
text
@d36 1
a36 1
         int          theBomIndex,
@


1.31
log
@Moved restoreInstance functions from the Component classes to class
   Coordinator.
@
text
@a52 8
   static BomEntry * findInstance (
         Coordinator * theCoord,
         const char *  theOpnName,
         int           theBomIndex);
      //
      // Finds and returns the BomEntry identified by the arguments.
      // WIT verifies that the BomEntry exists.

@


1.30
log
@Moved Component extraction functions to class Coordinator.
Removed debugging output code from createMyCppCoordinator implementation.
@
text
@a52 7
   static void restoreInstance (Coordinator * theCoord);
      //
      // * Assumes that object iteration for the WitRun is currently positioned
      //   at a BomEntry.
      // * Updates the state of the BomEntry to as appropriate just after a call
      //   to witPurgeData.

d61 4
@


1.29
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@a52 7
   static void extractInstance (Coordinator * theCoord);
      //
      // * Assumes that object iteration for the WitRun is currently positioned
      //   at a BomEntry.
      // * Creates a Java BomEntry and a C++ BomEntry matching the BomEntry at
      //   which object iteration is currently positioned.

@


1.28
log
@purgeData
@
text
@d10 1
a10 1
#include <Element.h>
d20 1
a20 1
//    Element
d26 1
a26 1
class BomEntry: public Element
@


1.27
log
@purgeData
@
text
@d60 1
a60 1
   static void preserveInstance (Coordinator * theCoord);
d64 2
a65 3
      // * Sets wasDeletedInWit for the BomEntry to false.
      // * Sets myBomIndex_ to match the BomEntry at which object iteration is
      //   currently positioned.
@


1.26
log
@purgeData
@
text
@d64 1
a64 2
      // * Tells the matching Java BomEntry not to shut down at the end of
      //   purgeData ().
@


1.25
log
@purgeData
@
text
@d69 8
@


1.24
log
@purgeData
@
text
@d55 3
a57 2
      // * Assumes that object iteration be currently positioned at a BomEntry.
      // * Creates a BomEntry on both sides of WIT-J matching the BomEntry at
d60 9
d97 1
a97 1
   const int myBomIndex_;
@


1.23
log
@Implemented Java class CppGateway.
@
text
@d53 6
@


1.22
log
@Updated some comments.
@
text
@d37 1
a37 2
         Part *       thePart,
         JavaObjRep * theBomEntJOR);
@


1.21
log
@Initial implementation of class ExceptionHandler.
@
text
@d72 1
a72 1
      // Not defined; prevents accidental copying and assignment.
@


1.20
log
@Name change.
@
text
@d19 3
a21 3
//    JavaAccObj
//       Element
//          BomEntry
@


1.19
log
@Changed name of Component to Entity.
@
text
@d10 1
a10 1
#include <Entity.h>
d20 1
a20 1
//       Entity
d26 1
a26 1
class BomEntry: public Entity
@


1.18
log
@Implemented extraction of BOM entries.
@
text
@d10 1
a10 1
#include <Component.h>
d20 1
a20 1
//       Component
d26 1
a26 1
class BomEntry: public Component
@


1.17
log
@Call-back infrastructure.
@
text
@d36 1
d82 1
a82 1
   int myBomIndex_;
@


1.16
log
@Changed name of C++ class JAccObject to JavaAccObj.
@
text
@d35 3
a37 2
         Operation * theOpn, 
         Part *      thePart);
@


1.15
log
@Attributes.
@
text
@d19 1
a19 1
//    JAccObject
d46 1
a46 1
      // Override from class JAccObject.
@


1.14
log
@Attributes.
@
text
@d48 1
a48 1
   const char * getOperationCName ();
@


1.13
log
@Accessor names.
@
text
@d44 1
a44 1
   virtual BomEntry * thisBomEntry ();
@


1.12
log
@Attributes.
@
text
@d48 1
a48 1
   const char * consumingOpnCName ();
d50 1
a50 1
      // Access wrapper from consumingOpn_;
d56 1
a56 1
   inline int bomIndex ()
d58 1
a58 1
      return bomIndex_;
d76 1
a76 1
   Operation * const consumingOpn_;
d80 1
a80 1
   int bomIndex_;
d83 2
a84 2
      // This is the # of BomEntries for consumingOpn_ that were created before
      // this one and still exist.
@


1.11
log
@Removed some #includes.
@
text
@d7 2
a8 2
#ifndef BomEntryH
#define BomEntryH
@


1.10
log
@Strings.
@
text
@a11 2
#include    <string>

@


1.9
log
@Replaced class WitJ::String with class std::string.
@
text
@d50 1
a50 1
   const std::string & consumingOpnName  ();
@


1.8
log
@*** empty log message ***
@
text
@d12 2
d50 1
a50 1
   const String & consumingOpnName ();
@


1.7
log
@*** empty log message ***
@
text
@d56 1
a56 1
   inline int bomEntIdx ()
d58 1
a58 1
      return bomEntIdx_;
d80 1
a80 1
   int bomEntIdx_;
@


1.6
log
@*** empty log message ***
@
text
@d15 1
a15 1
// Represents an BOM entry in an implosion problem.
d48 4
d53 1
a53 1
   // Access Wrapper.
d56 4
a59 3
   const String & consumingOpnName ();
      //
      // Access Wrapper from consumingOpn_;
d83 2
@


1.5
log
@*** empty log message ***
@
text
@a43 4
   virtual void getDerivedInstance (BomEntry * &);
      //
      // Override from class JAccObject.

@


1.4
log
@*** empty log message ***
@
text
@d48 1
a48 1
   virtual BomEntry * thisBomEnt ();
@


1.3
log
@*** empty log message ***
@
text
@d48 4
@


1.2
log
@*** empty log message ***
@
text
@d34 1
a34 1
   BomEntry (
@


1.1
log
@*** empty log message ***
@
text
@d35 2
a36 2
         const CIJia <Operation> & theOpnJia,
         const CIJia <Part> &      thePartJia);
@

