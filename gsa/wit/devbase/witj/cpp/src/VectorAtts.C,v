head	1.30;
access;
symbols;
locks; strict;
comment	@ * @;


1.30
date	2011.05.04.22.49.05;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2011.04.13.16.00.18;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2011.04.01.19.23.37;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.02.25.16.06.54;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2010.04.20.20.55.08;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2010.04.19.20.48.02;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2010.04.17.00.20.20;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2009.04.01.21.33.04;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2009.03.13.19.32.19;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2009.03.13.16.36.08;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.03.12.22.45.19;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.02.14.00.51.30;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.12.22.16.29.12;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.12.15.17.28.49;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.12.12.19.29.26;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.12.03.18.28.49;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.11.21.15.49.15;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.10.14.22.04.38;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.10.07.18.50.25;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.10.06.22.14.03;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.10.06.14.42.39;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.10.03.19.06.59;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.10.01.22.55.33;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.04.15.07.59;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.08.29.15.34.43;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.08.28.18.30.37;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.08.27.15.30.46;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.06.18.48.21;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.01.16.29.32;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.07.22.21.08.59;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.30
log
@setValue ==> set
getValue ==> get
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File VectorAtts.C.
//
// Contains the implementations of the following class templates:
//
//    ProblemVectorAtt <Elem>
//       PartVectorAtt <Elem>
//     DemandVectorAtt <Elem>
//        OpnVectorAtt <Elem>
//        BomVectorAtt <Elem>
//        SubVectorAtt <Elem>
//        BopVectorAtt <Elem>
//
// Contains the explicit instantiation of each of these class templates.
//------------------------------------------------------------------------------

#include <VectorAtts.h>
#include       <Part.h>
#include     <Demand.h>
#include  <Operation.h>
#include   <BomEntry.h>
#include <Substitute.h>
#include   <BopEntry.h>
#include   <ArrayJOR.h>

//------------------------------------------------------------------------------
// Implementation of class template ProblemVectorAtt.
//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::ProblemVectorAtt <Elem>::ProblemVectorAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "Problem"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   EXCEPTION_ASSERT (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::ProblemVectorAtt <Elem>::~ProblemVectorAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::ProblemVectorAtt <Elem>::set (
         Component *,
         const Elem * theCVec)
   {
   EXCEPTION_ASSERT (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (getWitRun (), theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::ProblemVectorAtt <Elem>::get (
         Component *,
         ArrayJOR <Elem> & theArrayJOR)
   {
   Elem * theCVec;

   myGetFuncPtr_ (getWitRun (), & theCVec);

   theArrayJOR.copyFrom (theCVec);

   witFree (theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::ProblemVectorAtt <Elem>::isModifiable ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::ProblemVectorAtt <Elem>::valueTypeMatches (
         const std::string & theTypeName)
   {
   return vectorTypeMatches <Elem> (theTypeName);
   }

//------------------------------------------------------------------------------
// Implementation of class template PartVectorAtt.
//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::PartVectorAtt <Elem>::PartVectorAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "Part"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   EXCEPTION_ASSERT (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::PartVectorAtt <Elem>::~PartVectorAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::PartVectorAtt <Elem>::set (
         Component *  theComp,
         const Elem * theCVec)
   {
   Part * thePart;

   thePart = theComp->asPart ();

   EXCEPTION_ASSERT (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (getWitRun (), thePart->getPartName (), theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::PartVectorAtt <Elem>::get (
         Component *       theComp,
         ArrayJOR <Elem> & theArrayJOR)
   {
   Part * thePart;
   Elem * theCVec;

   thePart = theComp->asPart ();

   myGetFuncPtr_ (
      getWitRun            (),
      thePart->getPartName (),
    & theCVec);

   theArrayJOR.copyFrom (theCVec);

   witFree (theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::PartVectorAtt <Elem>::isModifiable ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::PartVectorAtt <Elem>::valueTypeMatches (
         const std::string & theTypeName)
   {
   return vectorTypeMatches <Elem> (theTypeName);
   }

//------------------------------------------------------------------------------
// Implementation of class template DemandVectorAtt.
//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::DemandVectorAtt <Elem>::DemandVectorAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "Demand"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   EXCEPTION_ASSERT (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::DemandVectorAtt <Elem>::~DemandVectorAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::DemandVectorAtt <Elem>::set (
         Component *  theComp,
         const Elem * theCVec)
   {
   Demand * theDemand;

   theDemand = theComp->asDemand ();

   EXCEPTION_ASSERT (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (
      getWitRun                (),
      theDemand->getPartName   (),
      theDemand->getDemandName (),
      theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::DemandVectorAtt <Elem>::get (
         Component *       theComp,
         ArrayJOR <Elem> & theArrayJOR)
   {
   Demand * theDemand;
   Elem *   theCVec;

   theDemand = theComp->asDemand ();

   myGetFuncPtr_ (
      getWitRun                (),
      theDemand->getPartName   (),
      theDemand->getDemandName (),
    & theCVec);

   theArrayJOR.copyFrom (theCVec);

   witFree (theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::DemandVectorAtt <Elem>::isModifiable ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::DemandVectorAtt <Elem>::valueTypeMatches (
         const std::string & theTypeName)
   {
   return vectorTypeMatches <Elem> (theTypeName);
   }

//------------------------------------------------------------------------------
// Implementation of class template OpnVectorAtt.
//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::OpnVectorAtt <Elem>::OpnVectorAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "Operation"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   EXCEPTION_ASSERT (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::OpnVectorAtt <Elem>::~OpnVectorAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::OpnVectorAtt <Elem>::set (
         Component *  theComp,
         const Elem * theCVec)
   {
   Operation * theOpn;

   theOpn = theComp->asOperation ();

   EXCEPTION_ASSERT (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (getWitRun (), theOpn->getOperationName (), theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::OpnVectorAtt <Elem>::get (
         Component *       theComp,
         ArrayJOR <Elem> & theArrayJOR)
   {
   Operation * theOpn;
   Elem *      theCVec;

   theOpn = theComp->asOperation ();

   myGetFuncPtr_ (
      getWitRun                (),
      theOpn->getOperationName (),
    & theCVec);

   theArrayJOR.copyFrom (theCVec);

   witFree (theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::OpnVectorAtt <Elem>::isModifiable ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::OpnVectorAtt <Elem>::valueTypeMatches (
         const std::string & theTypeName)
   {
   return vectorTypeMatches <Elem> (theTypeName);
   }

//------------------------------------------------------------------------------
// Implementation of class template BomEntVectorAtt.
//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::BomEntVectorAtt <Elem>::BomEntVectorAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "BomEntry"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   EXCEPTION_ASSERT (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::BomEntVectorAtt <Elem>::~BomEntVectorAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::BomEntVectorAtt <Elem>::set (
         Component *  theComp,
         const Elem * theCVec)
   {
   BomEntry * theBomEnt;

   theBomEnt = theComp->asBomEntry ();

   EXCEPTION_ASSERT (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (
      getWitRun                   (),
      theBomEnt->getOperationName (),
      theBomEnt->getBomIndex      (),
      theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::BomEntVectorAtt <Elem>::get (
         Component *       theComp,
         ArrayJOR <Elem> & theArrayJOR)
   {
   BomEntry * theBomEnt;
   Elem *     theCVec;

   theBomEnt = theComp->asBomEntry ();

   myGetFuncPtr_ (
      getWitRun                   (),
      theBomEnt->getOperationName (),
      theBomEnt->getBomIndex      (),
    & theCVec);

   theArrayJOR.copyFrom (theCVec);

   witFree (theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::BomEntVectorAtt <Elem>::isModifiable ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::BomEntVectorAtt <Elem>::valueTypeMatches (
         const std::string & theTypeName)
   {
   return vectorTypeMatches <Elem> (theTypeName);
   }

//------------------------------------------------------------------------------
// Implementation of class template SubVectorAtt.
//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::SubVectorAtt <Elem>::SubVectorAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "Substitute"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   EXCEPTION_ASSERT (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::SubVectorAtt <Elem>::~SubVectorAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::SubVectorAtt <Elem>::set (
         Component *  theComp,
         const Elem * theCVec)
   {
   Substitute * theSub;

   theSub = theComp->asSubstitute ();

   EXCEPTION_ASSERT (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (
      getWitRun                (),
      theSub->getOperationName (),
      theSub->getBomIndex      (),
      theSub->getSubIndex      (),
      theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::SubVectorAtt <Elem>::get (
         Component *       theComp,
         ArrayJOR <Elem> & theArrayJOR)
   {
   Substitute * theSub;
   Elem *       theCVec;

   theSub = theComp->asSubstitute ();

   myGetFuncPtr_ (
      getWitRun                (),
      theSub->getOperationName (),
      theSub->getBomIndex      (),
      theSub->getSubIndex      (),
    & theCVec);

   theArrayJOR.copyFrom (theCVec);

   witFree (theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::SubVectorAtt <Elem>::isModifiable ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::SubVectorAtt <Elem>::valueTypeMatches (
         const std::string & theTypeName)
   {
   return vectorTypeMatches <Elem> (theTypeName);
   }

//------------------------------------------------------------------------------
// Implementation of class template BopEntVectorAtt.
//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::BopEntVectorAtt <Elem>::BopEntVectorAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "BopEntry"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   EXCEPTION_ASSERT (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::BopEntVectorAtt <Elem>::~BopEntVectorAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::BopEntVectorAtt <Elem>::set (
         Component *  theComp,
         const Elem * theCVec)
   {
   BopEntry * theBopEnt;

   theBopEnt = theComp->asBopEntry ();

   EXCEPTION_ASSERT (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (
      getWitRun                  (),
      theBopEnt->getOperationName (),
      theBopEnt->getBopIndex      (),
      theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::BopEntVectorAtt <Elem>::get (
         Component *       theComp,
         ArrayJOR <Elem> & theArrayJOR)
   {
   BopEntry * theBopEnt;
   Elem *     theCVec;

   theBopEnt = theComp->asBopEntry ();

   myGetFuncPtr_ (
      getWitRun                   (),
      theBopEnt->getOperationName (),
      theBopEnt->getBopIndex      (),
    & theCVec);

   theArrayJOR.copyFrom (theCVec);

   witFree (theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::BopEntVectorAtt <Elem>::isModifiable ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::BopEntVectorAtt <Elem>::valueTypeMatches (
         const std::string & theTypeName)
   {
   return vectorTypeMatches <Elem> (theTypeName);
   }

//------------------------------------------------------------------------------
// Explicit instantiation of the class templates implemented in this file.
//------------------------------------------------------------------------------

template class WitJ::ProblemVectorAtt <int>;
template class WitJ::   PartVectorAtt <int>;
template class WitJ:: DemandVectorAtt <int>;
template class WitJ::    OpnVectorAtt <int>;
template class WitJ:: BomEntVectorAtt <int>;
template class WitJ::    SubVectorAtt <int>;
template class WitJ:: BopEntVectorAtt <int>;

template class WitJ::ProblemVectorAtt <double>;
template class WitJ::   PartVectorAtt <double>;
template class WitJ:: DemandVectorAtt <double>;
template class WitJ::    OpnVectorAtt <double>;
template class WitJ:: BomEntVectorAtt <double>;
template class WitJ::    SubVectorAtt <double>;
template class WitJ:: BopEntVectorAtt <double>;
@


1.29
log
@ArrayJOR classes
@
text
@d54 1
a54 1
      void WitJ::ProblemVectorAtt <Elem>::setValue (
d66 1
a66 1
      void WitJ::ProblemVectorAtt <Elem>::getValue (
d124 1
a124 1
      void WitJ::PartVectorAtt <Elem>::setValue (
d140 1
a140 1
      void WitJ::PartVectorAtt <Elem>::getValue (
d204 1
a204 1
      void WitJ::DemandVectorAtt <Elem>::setValue (
d224 1
a224 1
      void WitJ::DemandVectorAtt <Elem>::getValue (
d289 1
a289 1
      void WitJ::OpnVectorAtt <Elem>::setValue (
d305 1
a305 1
      void WitJ::OpnVectorAtt <Elem>::getValue (
d369 1
a369 1
      void WitJ::BomEntVectorAtt <Elem>::setValue (
d389 1
a389 1
      void WitJ::BomEntVectorAtt <Elem>::getValue (
d454 1
a454 1
      void WitJ::SubVectorAtt <Elem>::setValue (
d475 1
a475 1
      void WitJ::SubVectorAtt <Elem>::getValue (
d541 1
a541 1
      void WitJ::BopEntVectorAtt <Elem>::setValue (
d561 1
a561 1
      void WitJ::BopEntVectorAtt <Elem>::getValue (
@


1.28
log
@Replaced newHeldCString with copyInto.
@
text
@d17 8
a24 8
#include  <VectorAtts.h>
#include        <Part.h>
#include      <Demand.h>
#include   <Operation.h>
#include    <BomEntry.h>
#include  <Substitute.h>
#include    <BopEntry.h>
#include <WitVecOwner.h>
d68 1
a68 1
         WitVecOwner <Elem> & theWVO)
d70 1
a70 1
   Elem * theWitVec;
d72 1
a72 1
   myGetFuncPtr_ (getWitRun (), & theWitVec);
d74 3
a76 1
   theWVO.acquireWitVec (theWitVec);
d141 2
a142 2
         Component *          theComp,
         WitVecOwner <Elem> & theWVO)
d145 1
a145 1
   Elem * theWitVec;
d152 3
a154 1
    & theWitVec);
d156 1
a156 1
   theWVO.acquireWitVec (theWitVec);
d225 2
a226 2
         Component *          theComp,
         WitVecOwner <Elem> & theWVO)
d229 1
a229 1
   Elem *   theWitVec;
d237 1
a237 1
    & theWitVec);
d239 3
a241 1
   theWVO.acquireWitVec (theWitVec);
d306 2
a307 2
         Component *          theComp,
         WitVecOwner <Elem> & theWVO)
d310 1
a310 1
   Elem *      theWitVec;
d317 3
a319 1
    & theWitVec);
d321 1
a321 1
   theWVO.acquireWitVec (theWitVec);
d390 2
a391 2
         Component *          theComp,
         WitVecOwner <Elem> & theWVO)
d394 1
a394 1
   Elem *     theWitVec;
d402 1
a402 1
    & theWitVec);
d404 3
a406 1
   theWVO.acquireWitVec (theWitVec);
d476 2
a477 2
         Component *          theComp,
         WitVecOwner <Elem> & theWVO)
d480 1
a480 1
   Elem *       theWitVec;
d489 3
a491 1
    & theWitVec);
d493 1
a493 1
   theWVO.acquireWitVec (theWitVec);
d562 2
a563 2
         Component *          theComp,
         WitVecOwner <Elem> & theWVO)
d566 1
a566 1
   Elem *     theWitVec;
d574 3
a576 1
    & theWitVec);
d578 1
a578 1
   theWVO.acquireWitVec (theWitVec);
@


1.27
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@d89 1
a89 1
         const std::string theTypeName)
d167 1
a167 1
         const std::string theTypeName)
d250 1
a250 1
         const std::string theTypeName)
d328 1
a328 1
         const std::string theTypeName)
d411 1
a411 1
         const std::string theTypeName)
d496 1
a496 1
         const std::string theTypeName)
d579 1
a579 1
         const std::string theTypeName)
@


1.26
log
@Multi-Obj Mode
@
text
@d6 7
a12 7
//    GlobalVectorAtt <Elem>
//      PartVectorAtt <Elem>
//    DemandVectorAtt <Elem>
//       OpnVectorAtt <Elem>
//       BomVectorAtt <Elem>
//       SubVectorAtt <Elem>
//       BopVectorAtt <Elem>
d27 1
a27 1
// Implementation of class template GlobalVectorAtt.
d31 1
a31 1
      WitJ::GlobalVectorAtt <Elem>::GlobalVectorAtt (
d37 1
a37 1
         Att           (theAttBldr, theName, "GlobalAspect"),
d47 1
a47 1
      WitJ::GlobalVectorAtt <Elem>::~GlobalVectorAtt ()
d54 1
a54 1
      void WitJ::GlobalVectorAtt <Elem>::setValue (
d66 1
a66 1
      void WitJ::GlobalVectorAtt <Elem>::getValue (
d80 1
a80 1
      bool WitJ::GlobalVectorAtt <Elem>::isModifiable ()
d88 1
a88 1
      bool WitJ::GlobalVectorAtt <Elem>::valueTypeMatches (
d588 15
a602 15
template class WitJ::GlobalVectorAtt <int>;
template class WitJ::  PartVectorAtt <int>;
template class WitJ::DemandVectorAtt <int>;
template class WitJ::   OpnVectorAtt <int>;
template class WitJ::BomEntVectorAtt <int>;
template class WitJ::   SubVectorAtt <int>;
template class WitJ::BopEntVectorAtt <int>;

template class WitJ::GlobalVectorAtt <double>;
template class WitJ::  PartVectorAtt <double>;
template class WitJ::DemandVectorAtt <double>;
template class WitJ::   OpnVectorAtt <double>;
template class WitJ::BomEntVectorAtt <double>;
template class WitJ::   SubVectorAtt <double>;
template class WitJ::BopEntVectorAtt <double>;
@


1.25
log
@Multi-Obj Mode
@
text
@d17 8
a24 8
#include <VectorAtts.h>
#include       <Part.h>
#include     <Demand.h>
#include  <Operation.h>
#include   <BomEntry.h>
#include <Substitute.h>
#include   <BopEntry.h>
#include     <VecWoa.h>
d68 1
a68 1
         VecWoa <Elem> & theVecWoa)
d74 1
a74 1
   theVecWoa.acquireWitVec (theWitVec);
d139 2
a140 2
         Component *     theComp,
         VecWoa <Elem> & theVecWoa)
d152 1
a152 1
   theVecWoa.acquireWitVec (theWitVec);
d221 2
a222 2
         Component *     theComp,
         VecWoa <Elem> & theVecWoa)
d235 1
a235 1
   theVecWoa.acquireWitVec (theWitVec);
d300 2
a301 2
         Component *     theComp,
         VecWoa <Elem> & theVecWoa)
d313 1
a313 1
   theVecWoa.acquireWitVec (theWitVec);
d382 2
a383 2
         Component *     theComp,
         VecWoa <Elem> & theVecWoa)
d396 1
a396 1
   theVecWoa.acquireWitVec (theWitVec);
d466 2
a467 2
         Component *     theComp,
         VecWoa <Elem> & theVecWoa)
d481 1
a481 1
   theVecWoa.acquireWitVec (theWitVec);
d550 2
a551 2
         Component *     theComp,
         VecWoa <Elem> & theVecWoa)
d564 1
a564 1
   theVecWoa.acquireWitVec (theWitVec);
@


1.24
log
@Multi-Obj Mode
@
text
@d70 1
a70 1
   Elem * theCVec;
d72 1
a72 1
   myGetFuncPtr_ (getWitRun (), & theCVec);
d74 1
a74 1
   theVecWoa.acquire (theCVec);
d143 1
a143 1
   Elem * theCVec;
d150 1
a150 1
    & theCVec);
d152 1
a152 1
   theVecWoa.acquire (theCVec);
d225 1
a225 1
   Elem *   theCVec;
d233 1
a233 1
    & theCVec);
d235 1
a235 1
   theVecWoa.acquire (theCVec);
d304 1
a304 1
   Elem *      theCVec;
d311 1
a311 1
    & theCVec);
d313 1
a313 1
   theVecWoa.acquire (theCVec);
d386 1
a386 1
   Elem *     theCVec;
d394 1
a394 1
    & theCVec);
d396 1
a396 1
   theVecWoa.acquire (theCVec);
d470 1
a470 1
   Elem *       theCVec;
d479 1
a479 1
    & theCVec);
d481 1
a481 1
   theVecWoa.acquire (theCVec);
d554 1
a554 1
   Elem *     theCVec;
d562 1
a562 1
    & theCVec);
d564 1
a564 1
   theVecWoa.acquire (theCVec);
@


1.23
log
@Setting vector elements from the queue.
@
text
@d70 5
a74 1
   myGetFuncPtr_ (getWitRun (), theVecWoa.getCVecAddr ());
d143 1
d148 5
a152 3
      getWitRun             (),
      thePart->getPartName  (),
      theVecWoa.getCVecAddr ());
d225 1
d233 3
a235 1
      theVecWoa.getCVecAddr    ());
d304 1
d311 3
a313 1
      theVecWoa.getCVecAddr    ());
d386 1
d394 3
a396 1
      theVecWoa.getCVecAddr       ());
d470 1
d479 3
a481 1
      theVecWoa.getCVecAddr    ());
d554 1
d562 3
a564 1
      theVecWoa.getCVecAddr       ());
@


1.22
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d68 1
a68 1
         VecWoa <Elem> & theDblVecWoa)
d70 1
a70 1
   myGetFuncPtr_ (getWitRun (), theDblVecWoa.getCVecAddr ());
d136 1
a136 1
         VecWoa <Elem> & theDblVecWoa)
d143 3
a145 3
      getWitRun                (),
      thePart->getPartName     (),
      theDblVecWoa.getCVecAddr ());
d215 1
a215 1
         VecWoa <Elem> & theDblVecWoa)
d225 1
a225 1
      theDblVecWoa.getCVecAddr ());
d291 1
a291 1
         VecWoa <Elem> & theDblVecWoa)
d300 1
a300 1
      theDblVecWoa.getCVecAddr ());
d370 1
a370 1
         VecWoa <Elem> & theDblVecWoa)
d380 1
a380 1
      theDblVecWoa.getCVecAddr    ());
d451 1
a451 1
         VecWoa <Elem> & theDblVecWoa)
d462 1
a462 1
      theDblVecWoa.getCVecAddr ());
d532 1
a532 1
         VecWoa <Elem> & theDblVecWoa)
d542 1
a542 1
      theDblVecWoa.getCVecAddr    ());
@


1.21
log
@Changed name of GlobalComponent classes to GlobalAspect.
@
text
@d55 1
a55 1
         Element *    theElement,
d67 1
a67 1
         Element *       theElement,
d119 1
a119 1
         Element *    theElement,
d124 1
a124 1
   thePart = theElement->asPart ();
d135 1
a135 1
         Element *       theElement,
d140 1
a140 1
   thePart = theElement->asPart ();
d194 1
a194 1
         Element *    theElement,
d199 1
a199 1
   theDemand = theElement->asDemand ();
d214 1
a214 1
         Element *       theElement,
d219 1
a219 1
   theDemand = theElement->asDemand ();
d274 1
a274 1
         Element *    theElement,
d279 1
a279 1
   theOpn = theElement->asOperation ();
d290 1
a290 1
         Element *       theElement,
d295 1
a295 1
   theOpn = theElement->asOperation ();
d349 1
a349 1
         Element *    theElement,
d354 1
a354 1
   theBomEnt = theElement->asBomEntry ();
d369 1
a369 1
         Element *       theElement,
d374 1
a374 1
   theBomEnt = theElement->asBomEntry ();
d429 1
a429 1
         Element *    theElement,
d434 1
a434 1
   theSub = theElement->asSubstitute ();
d450 1
a450 1
         Element *       theElement,
d455 1
a455 1
   theSub = theElement->asSubstitute ();
d511 1
a511 1
         Element *    theElement,
d516 1
a516 1
   theBopEnt = theElement->asBopEntry ();
d531 1
a531 1
         Element *       theElement,
d536 1
a536 1
   theBopEnt = theElement->asBopEntry ();
@


1.20
log
@Changed name of GlobalElement classes to GlobalComponent.
@
text
@d17 8
a24 9
#include      <VectorAtts.h>
#include <GlobalComponent.h>
#include            <Part.h>
#include          <Demand.h>
#include       <Operation.h>
#include        <BomEntry.h>
#include      <Substitute.h>
#include        <BopEntry.h>
#include          <VecWoa.h>
d37 1
a37 1
         Att           (theAttBldr, theName, "GlobalComponent"),
@


1.19
log
@Implemented getPipSeq.
@
text
@d17 9
a25 9
#include    <VectorAtts.h>
#include <GlobalElement.h>
#include          <Part.h>
#include        <Demand.h>
#include     <Operation.h>
#include      <BomEntry.h>
#include    <Substitute.h>
#include      <BopEntry.h>
#include        <VecWoa.h>
d38 1
a38 1
         Att           (theAttBldr, theName, "GlobalElement"),
@


1.18
log
@Implemented EXCEPTION_ASSERT and ABORTING_ASSERT.
@
text
@d71 1
a71 1
   myGetFuncPtr_ (getWitRun (), & theDblVecWoa);
d143 4
a146 1
   myGetFuncPtr_ (getWitRun (), thePart->getPartName (), & theDblVecWoa);
d226 1
a226 1
    & theDblVecWoa);
d298 4
a301 1
   myGetFuncPtr_ (getWitRun (), theOpn->getOperationName (), & theDblVecWoa);
d381 1
a381 1
    & theDblVecWoa);
d463 1
a463 1
    & theDblVecWoa);
d543 1
a543 1
    & theDblVecWoa);
@


1.17
log
@Updated some comments.
@
text
@d42 1
a42 1
   WITJ_ASSERT (theGetFuncPtr != NULL);
d59 1
a59 1
   WITJ_ASSERT (mySetFuncPtr_ != NULL);
d106 1
a106 1
   WITJ_ASSERT (theGetFuncPtr != NULL);
d127 1
a127 1
   WITJ_ASSERT (mySetFuncPtr_ != NULL);
d178 1
a178 1
   WITJ_ASSERT (theGetFuncPtr != NULL);
d199 1
a199 1
   WITJ_ASSERT (mySetFuncPtr_ != NULL);
d258 1
a258 1
   WITJ_ASSERT (theGetFuncPtr != NULL);
d279 1
a279 1
   WITJ_ASSERT (mySetFuncPtr_ != NULL);
d330 1
a330 1
   WITJ_ASSERT (theGetFuncPtr != NULL);
d351 1
a351 1
   WITJ_ASSERT (mySetFuncPtr_ != NULL);
d410 1
a410 1
   WITJ_ASSERT (theGetFuncPtr != NULL);
d431 1
a431 1
   WITJ_ASSERT (mySetFuncPtr_ != NULL);
d492 1
a492 1
   WITJ_ASSERT (theGetFuncPtr != NULL);
d513 1
a513 1
   WITJ_ASSERT (mySetFuncPtr_ != NULL);
@


1.16
log
@Changed to all upper case for the names of macros.
@
text
@d4 1
a4 1
// Contains the definitions of the following class templates:
d28 1
a28 1
// Definition of class template GlobalVectorAtt.
d92 1
a92 1
// Definition of class template PartVectorAtt.
d164 1
a164 1
// Definition of class template DemandVectorAtt.
d244 1
a244 1
// Definition of class template OpnVectorAtt.
d316 1
a316 1
// Definition of class template BomEntVectorAtt.
d396 1
a396 1
// Definition of class template SubVectorAtt.
d478 1
a478 1
// Definition of class template BopEntVectorAtt.
d558 1
a558 1
// Explicit instantiation of the class templates defined in this file.
@


1.15
log
@Changed name of method Attribute.allowsSetValue to isModifiable.
@
text
@d42 1
a42 1
   witjAssert (theGetFuncPtr != NULL);
d59 1
a59 1
   witjAssert (mySetFuncPtr_ != NULL);
d106 1
a106 1
   witjAssert (theGetFuncPtr != NULL);
d127 1
a127 1
   witjAssert (mySetFuncPtr_ != NULL);
d178 1
a178 1
   witjAssert (theGetFuncPtr != NULL);
d199 1
a199 1
   witjAssert (mySetFuncPtr_ != NULL);
d258 1
a258 1
   witjAssert (theGetFuncPtr != NULL);
d279 1
a279 1
   witjAssert (mySetFuncPtr_ != NULL);
d330 1
a330 1
   witjAssert (theGetFuncPtr != NULL);
d351 1
a351 1
   witjAssert (mySetFuncPtr_ != NULL);
d410 1
a410 1
   witjAssert (theGetFuncPtr != NULL);
d431 1
a431 1
   witjAssert (mySetFuncPtr_ != NULL);
d492 1
a492 1
   witjAssert (theGetFuncPtr != NULL);
d513 1
a513 1
   witjAssert (mySetFuncPtr_ != NULL);
@


1.14
log
@Attributes.
@
text
@d77 1
a77 1
      bool WitJ::GlobalVectorAtt <Elem>::allowsSetValue ()
d149 1
a149 1
      bool WitJ::PartVectorAtt <Elem>::allowsSetValue ()
d229 1
a229 1
      bool WitJ::DemandVectorAtt <Elem>::allowsSetValue ()
d301 1
a301 1
      bool WitJ::OpnVectorAtt <Elem>::allowsSetValue ()
d381 1
a381 1
      bool WitJ::BomEntVectorAtt <Elem>::allowsSetValue ()
d463 1
a463 1
      bool WitJ::SubVectorAtt <Elem>::allowsSetValue ()
d543 1
a543 1
      bool WitJ::BopEntVectorAtt <Elem>::allowsSetValue ()
@


1.13
log
@Minor Revision.
@
text
@d77 1
a77 1
      bool WitJ::GlobalVectorAtt <Elem>::getIsInputAtt ()
d149 1
a149 1
      bool WitJ::PartVectorAtt <Elem>::getIsInputAtt ()
d229 1
a229 1
      bool WitJ::DemandVectorAtt <Elem>::getIsInputAtt ()
d301 1
a301 1
      bool WitJ::OpnVectorAtt <Elem>::getIsInputAtt ()
d381 1
a381 1
      bool WitJ::BomEntVectorAtt <Elem>::getIsInputAtt ()
d463 1
a463 1
      bool WitJ::SubVectorAtt <Elem>::getIsInputAtt ()
d543 1
a543 1
      bool WitJ::BopEntVectorAtt <Elem>::getIsInputAtt ()
@


1.12
log
@Name change.
@
text
@d77 1
a77 1
      bool WitJ::GlobalVectorAtt <Elem>::getInputAccess ()
d149 1
a149 1
      bool WitJ::PartVectorAtt <Elem>::getInputAccess ()
d229 1
a229 1
      bool WitJ::DemandVectorAtt <Elem>::getInputAccess ()
d301 1
a301 1
      bool WitJ::OpnVectorAtt <Elem>::getInputAccess ()
d381 1
a381 1
      bool WitJ::BomEntVectorAtt <Elem>::getInputAccess ()
d463 1
a463 1
      bool WitJ::SubVectorAtt <Elem>::getInputAccess ()
d543 1
a543 1
      bool WitJ::BopEntVectorAtt <Elem>::getInputAccess ()
@


1.11
log
@Changed name of Component to Entity.
@
text
@d17 9
a25 9
#include   <VectorAtts.h>
#include <GlobalEntity.h>
#include         <Part.h>
#include       <Demand.h>
#include    <Operation.h>
#include     <BomEntry.h>
#include   <Substitute.h>
#include     <BopEntry.h>
#include       <VecWoa.h>
d38 1
a38 1
         Att           (theAttBldr, theName, "GlobalEntity"),
d56 1
a56 1
         Entity *     theEntity,
d68 1
a68 1
         Entity *        theEntity,
d120 1
a120 1
         Entity *     theEntity,
d125 1
a125 1
   thePart = theEntity->asPart ();
d136 1
a136 1
         Entity *        theEntity,
d141 1
a141 1
   thePart = theEntity->asPart ();
d192 1
a192 1
         Entity *     theEntity,
d197 1
a197 1
   theDemand = theEntity->asDemand ();
d212 1
a212 1
         Entity *        theEntity,
d217 1
a217 1
   theDemand = theEntity->asDemand ();
d272 1
a272 1
         Entity *     theEntity,
d277 1
a277 1
   theOpn = theEntity->asOperation ();
d288 1
a288 1
         Entity *        theEntity,
d293 1
a293 1
   theOpn = theEntity->asOperation ();
d344 1
a344 1
         Entity *     theEntity,
d349 1
a349 1
   theBomEnt = theEntity->asBomEntry ();
d364 1
a364 1
         Entity *        theEntity,
d369 1
a369 1
   theBomEnt = theEntity->asBomEntry ();
d424 1
a424 1
         Entity *     theEntity,
d429 1
a429 1
   theSub = theEntity->asSubstitute ();
d445 1
a445 1
         Entity *        theEntity,
d450 1
a450 1
   theSub = theEntity->asSubstitute ();
d506 1
a506 1
         Entity *     theEntity,
d511 1
a511 1
   theBopEnt = theEntity->asBopEntry ();
d526 1
a526 1
         Entity *        theEntity,
d531 1
a531 1
   theBopEnt = theEntity->asBopEntry ();
@


1.10
log
@Minor revision.
@
text
@d17 9
a25 9
#include <VectorAtts.h>
#include <GlobalComp.h>
#include       <Part.h>
#include     <Demand.h>
#include  <Operation.h>
#include   <BomEntry.h>
#include <Substitute.h>
#include   <BopEntry.h>
#include     <VecWoa.h>
d38 1
a38 1
         Att           (theAttBldr, theName, "GlobalComp"),
d56 1
a56 1
         Component *  theComp,
d68 1
a68 1
         Component *     theComp,
d120 1
a120 1
         Component *  theComp,
d125 1
a125 1
   thePart = theComp->asPart ();
d136 1
a136 1
         Component *     theComp,
d141 1
a141 1
   thePart = theComp->asPart ();
d192 1
a192 1
         Component *  theComp,
d197 1
a197 1
   theDemand = theComp->asDemand ();
d212 1
a212 1
         Component *     theComp,
d217 1
a217 1
   theDemand = theComp->asDemand ();
d272 1
a272 1
         Component *  theComp,
d277 1
a277 1
   theOpn = theComp->asOperation ();
d288 1
a288 1
         Component *     theComp,
d293 1
a293 1
   theOpn = theComp->asOperation ();
d344 1
a344 1
         Component *  theComp,
d349 1
a349 1
   theBomEnt = theComp->asBomEntry ();
d364 1
a364 1
         Component *     theComp,
d369 1
a369 1
   theBomEnt = theComp->asBomEntry ();
d424 1
a424 1
         Component *  theComp,
d429 1
a429 1
   theSub = theComp->asSubstitute ();
d445 1
a445 1
         Component *     theComp,
d450 1
a450 1
   theSub = theComp->asSubstitute ();
d506 1
a506 1
         Component *  theComp,
d511 1
a511 1
   theBopEnt = theComp->asBopEntry ();
d526 1
a526 1
         Component *     theComp,
d531 1
a531 1
   theBopEnt = theComp->asBopEntry ();
@


1.9
log
@Revised C++ class template VecWoa.
@
text
@d77 1
a77 1
      bool WitJ::GlobalVectorAtt <Elem>::getInputMode ()
d149 1
a149 1
      bool WitJ::PartVectorAtt <Elem>::getInputMode ()
d229 1
a229 1
      bool WitJ::DemandVectorAtt <Elem>::getInputMode ()
d301 1
a301 1
      bool WitJ::OpnVectorAtt <Elem>::getInputMode ()
d381 1
a381 1
      bool WitJ::BomEntVectorAtt <Elem>::getInputMode ()
d463 1
a463 1
      bool WitJ::SubVectorAtt <Elem>::getInputMode ()
d543 1
a543 1
      bool WitJ::BopEntVectorAtt <Elem>::getInputMode ()
@


1.8
log
@Minor revision.
@
text
@d71 1
a71 1
   myGetFuncPtr_ (getWitRun (), theDblVecWoa.getCVecAddr ());
d143 1
a143 4
   myGetFuncPtr_ (
      getWitRun                (), 
      thePart->getPartName     (), 
      theDblVecWoa.getCVecAddr ());
d223 1
a223 1
      theDblVecWoa.getCVecAddr ());
d295 1
a295 4
   myGetFuncPtr_ (
      getWitRun (),
      theOpn->getOperationName (),
      theDblVecWoa.getCVecAddr ());
d375 1
a375 1
      theDblVecWoa.getCVecAddr    ());
d457 1
a457 1
      theDblVecWoa.getCVecAddr ());
d537 1
a537 1
      theDblVecWoa.getCVecAddr    ());
@


1.7
log
@Attributes.
@
text
@d77 1
a77 1
      bool WitJ::GlobalVectorAtt <Elem>::isAnInputAtt ()
d152 1
a152 1
      bool WitJ::PartVectorAtt <Elem>::isAnInputAtt ()
d232 1
a232 1
      bool WitJ::DemandVectorAtt <Elem>::isAnInputAtt ()
d307 1
a307 1
      bool WitJ::OpnVectorAtt <Elem>::isAnInputAtt ()
d387 1
a387 1
      bool WitJ::BomEntVectorAtt <Elem>::isAnInputAtt ()
d469 1
a469 1
      bool WitJ::SubVectorAtt <Elem>::isAnInputAtt ()
d549 1
a549 1
      bool WitJ::BopEntVectorAtt <Elem>::isAnInputAtt ()
@


1.6
log
@Attributes.
@
text
@d61 1
a61 3
   mySetFuncPtr_ (
      Att::getWitRun (),
      theCVec);
d71 1
a71 3
   myGetFuncPtr_ (
      Att::getWitRun           (),
      theDblVecWoa.getCVecAddr ());
d88 1
a88 1
   return Att::vectorTypeMatches <Elem> (theTypeName);
d129 1
a129 4
   mySetFuncPtr_ (
      Att::getWitRun       (),
      thePart->getPartName (),
      theCVec);
d144 2
a145 2
      Att::getWitRun           (),
      thePart->getPartName     (),
d163 1
a163 1
   return Att::vectorTypeMatches <Elem> (theTypeName);
d205 1
a205 1
      Att::getWitRun           (),
d223 1
a223 1
      Att::getWitRun           (),
d243 1
a243 1
   return Att::vectorTypeMatches <Elem> (theTypeName);
d284 1
a284 4
   mySetFuncPtr_ (
      Att::getWitRun           (),
      theOpn->getOperationName (),
      theCVec);
d299 1
a299 1
      Att::getWitRun (),
d318 1
a318 1
   return Att::vectorTypeMatches <Elem> (theTypeName);
d360 1
a360 1
      Att::getWitRun              (),
d378 1
a378 1
      Att::getWitRun              (),
d398 1
a398 1
   return Att::vectorTypeMatches <Elem> (theTypeName);
d440 1
a440 1
      Att::getWitRun           (),
d459 1
a459 1
      Att::getWitRun           (),
d480 1
a480 1
   return Att::vectorTypeMatches <Elem> (theTypeName);
d522 1
a522 1
      Att::getWitRun (),
d540 1
a540 1
      Att::getWitRun (),
d560 1
a560 1
   return Att::vectorTypeMatches <Elem> (theTypeName);
@


1.5
log
@Name change: Global --> GlobalComp.
@
text
@d134 2
a135 2
      Att::getWitRun        (),
      thePart->getPartCName (),
d152 1
a152 1
      thePart->getPartCName    (),
d212 3
a214 3
      Att::getWitRun            (),
      theDemand->getPartCName   (),
      theDemand->getDemandCName (),
d230 4
a233 4
      Att::getWitRun            (),
      theDemand->getPartCName   (),
      theDemand->getDemandCName (),
      theDblVecWoa.getCVecAddr  ());
d292 2
a293 2
      Att::getWitRun            (),
      theOpn->getOperationCName (),
d310 2
a311 2
      theOpn->getOperationCName (),
      theDblVecWoa.getCVecAddr  ());
d370 3
a372 3
      Att::getWitRun               (),
      theBomEnt->getOperationCName (),
      theBomEnt->getBomIndex       (),
d388 4
a391 4
      Att::getWitRun               (),
      theBomEnt->getOperationCName (),
      theBomEnt->getBomIndex       (),
      theDblVecWoa.getCVecAddr     ());
d450 4
a453 4
      Att::getWitRun            (),
      theSub->getOperationCName (),
      theSub->getBomIndex       (),
      theSub->getSubIndex       (),
d469 5
a473 5
      Att::getWitRun            (),
      theSub->getOperationCName (),
      theSub->getBomIndex       (),
      theSub->getSubIndex       (),
      theDblVecWoa.getCVecAddr  ());
d533 2
a534 2
      theBopEnt->getOperationCName (),
      theBopEnt->getBopIndex       (),
d551 3
a553 3
      theBopEnt->getOperationCName (),
      theBopEnt->getBopIndex       (),
      theDblVecWoa.getCVecAddr     ());
@


1.4
log
@Attributes.
@
text
@d18 1
a18 1
#include     <Global.h>
d38 1
a38 1
         Att           (theAttBldr, theName, "Global"),
@


1.3
log
@Classes Global and GlobalCI.
@
text
@d129 1
a129 1
   thePart = theComp->thisPart ();
d148 1
a148 1
   thePart = theComp->thisPart ();
d207 1
a207 1
   theDemand = theComp->thisDemand ();
d227 1
a227 1
   theDemand = theComp->thisDemand ();
d287 1
a287 1
   theOpn = theComp->thisOperation ();
d306 1
a306 1
   theOpn = theComp->thisOperation ();
d365 1
a365 1
   theBomEnt = theComp->thisBomEntry ();
d385 1
a385 1
   theBomEnt = theComp->thisBomEntry ();
d445 1
a445 1
   theSub = theComp->thisSubstitute ();
d466 1
a466 1
   theSub = theComp->thisSubstitute ();
d527 1
a527 1
   theBopEnt = theComp->thisBopEntry ();
d547 1
a547 1
   theBopEnt = theComp->thisBopEntry ();
@


1.2
log
@Attributes.
@
text
@d18 1
a18 1
#include <GlobalComp.h>
d38 1
a38 1
         Att           (theAttBldr, theName, "GlobalComp"),
@


1.1
log
@Attributes.
@
text
@d62 1
a62 1
      getWitRun (),
d74 1
a74 1
      getWitRun (),
d87 9
d134 1
a134 1
      getWitRun (),
d151 2
a152 2
      getWitRun (),
      thePart->getPartCName (),
d165 9
d212 2
a213 2
      getWitRun (),
      theDemand->getPartCName (),
d230 2
a231 2
      getWitRun (),
      theDemand->getPartCName (),
d233 1
a233 1
      theDblVecWoa.getCVecAddr ());
d245 9
d292 1
a292 1
      getWitRun (),
d309 1
a309 1
      getWitRun (),
d311 1
a311 1
      theDblVecWoa.getCVecAddr ());
d323 9
d370 1
a370 1
      getWitRun                    (),
d388 1
a388 1
      getWitRun                    (),
d403 9
d450 1
a450 1
      getWitRun                 (),
d469 1
a469 1
      getWitRun                 (),
d485 9
d532 1
a532 1
      getWitRun (),
d550 1
a550 1
      getWitRun (),
d565 9
@

