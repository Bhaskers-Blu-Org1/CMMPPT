head	1.13;
access;
symbols;
locks; strict;
comment	@ * @;


1.13
date	2011.03.15.18.59.35;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.02.23.44.18;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.24.22.59.45;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.24.20.34.21;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.24.15.37.33;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.24.15.01.10;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.24.00.18.55;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.18.16.18.27;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.16.17.18.55;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.15.22.31.41;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.15.21.40.51;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.12.15.17.28.47;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.15.17.17.39;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Revised some comments.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File ExceptionHandler.h.
//
// Contains the declaration of class ExceptionHandler.
//------------------------------------------------------------------------------

#ifndef ExceptionHandler_h
#define ExceptionHandler_h

#include <JniClient.h>

//------------------------------------------------------------------------------
// Class ExceptionHandler
//
// Responsible for working with C++ and Java exceptions.
//
// Class Hierarchy:
//
// JniClient
//    ExceptionHandler
//------------------------------------------------------------------------------

namespace WitJ
{
class ExceptionHandler: public JniClient
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   static void handleAnyException (JNIEnv * theJNIEnv);
      //
      // Handles any C++ exception thrown in WIT-J.
      // This function is designed to be called only from the catch clause of a
      // canonical try block that implements a Java native method.
      // It should not be called from anywhere else.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   explicit ExceptionHandler (JNIEnv * theJNIEnv);
      //
      // Constructor.

   ~ExceptionHandler ();
      //
      // Destructor.

   void handleAnyException ();
      //
      // Handles any C++ exception that has been caught in a canonical try
      // block.

   void handleWitErrorExc (WitErrorExc & theWitErrorExc);
      //
      // Handles a WitErrorExc that has been caught as a C++ exception in a
      // canonical try block.

   void handleJThrowable (_jthrowable * theJThrow);
      //
      // Handles a _jthrowable that has been caught as a C++ exception in a
      // canonical try block.

   void raiseJavaException (
         const char * theClassName,
         const char * message = "");
      //
      // Causes JNI to:
      //    Construct a WIT-J/Java Exception whose class name is given by
      //       theClassName.
      //    Pass message to the Exception's ctor.
      //    Arrange for the Exception to be thrown when the currently running
      //       native method returns to Java.
      // Terminates execution if there is already a Java Exception pending.

   void raiseJavaExceptionForJThrowable (_jthrowable * causeJThrow);
      //
      // Causes JNI to:
      //    Construct a Java InternalErrorException indicating that a Java
      //       Throwable (referenced by causeJThrow) has been thrown during the
      //       execution of a JNI function called by the C++ side of WIT-J.
      //    Set the InternalErrorException's cause to the Java Throwable
      //       referenced by causeJThrow.
      //    Arrange for the InternalErrorException to be thrown when the
      //       currently running native method returns to Java.
      // Terminates execution if there is already a Java Exception pending.

   void abortOnJavaException ();
      //
      // Checks for any Java Throwable that's currently pending and if there is
      // one, aborts the program with an error message.

   ExceptionHandler              (const ExceptionHandler &);
   ExceptionHandler & operator = (const ExceptionHandler &);
      //
      // Not implemented; prevents accidental copying and assignment.
   };
};

//
// End of namespace WitJ.

#endif
@


1.12
log
@Collapsed the subclasses of InternalErrorException into InternalErrorException.
@
text
@d85 1
a85 1
      //       Throwable (represented by causeJThrow) has been thrown during the
d88 1
a88 1
      //       represented by causeJThrow.
@


1.11
log
@Added code to handle severe errors from WIT.
@
text
@d81 1
a81 1
   void raiseJniExcException (_jthrowable * causeJThrow);
d84 7
a90 5
      //    Construct a Java JniExcException.
      //    Pass the Java Throwable represented by causeJThrow to the
      //       JniExcException's ctor as the cause of the Exception.
      //    Arrange for the JniExcException to be thrown when the currently
      //       running native method returns to Java.
@


1.10
log
@Added code to handle memory errors in makeJString.
@
text
@d59 5
d66 1
a66 1
      // Handles _jthrowable that has been caught as a C++ exception in a
@


1.9
log
@Minor revision.
@
text
@d56 7
a62 1
      // Handles any C++ exception thrown in WIT-J.
@


1.8
log
@Replaced class JavaExcException with the throwing of a _jthrowable pointer.
@
text
@d80 5
@


1.7
log
@Added code to handle Java exceptions raised during the execution of JNI
   functions.
@
text
@d65 3
a67 3
      //    Passes message to the Exception's ctor.
      //    Sets up the Exception to be thrown when the currently running native
      //       method returns to Java.
d70 1
a70 1
   void raiseJniExcException (JavaExcException & theJavaExcException);
d74 4
a77 2
      //    Sets up the Exception to be thrown when the currently running native
      //       method returns to Java.
@


1.6
log
@Minor revision.
@
text
@d17 4
a20 1
// This class is for static use only; no instances can be constructed.
d58 3
a60 1
   void submitJavaException (const char * theClassName, const char * message);
d70 8
@


1.5
log
@Implemented and used ExceptionHandler::pendJavaException.
@
text
@d55 1
a55 1
   void pendJavaException (const char * theClassName, const char * message);
d61 1
a61 1
      //    Pends the Exception to be thrown when the currently running native
@


1.4
log
@Added test of C++ assertion failure.
@
text
@d55 1
a55 1
   void handleUnexpectedException ();
d57 7
a63 1
      // Handles an exception of an unexpected type thrown in WIT-J.
@


1.3
log
@Implemented Java class UnexpectedCppExcException.
@
text
@d55 4
@


1.2
log
@Updated some comments.
@
text
@d33 3
a35 2
      // To be called from the catch clause of a canonical try block and
      // nowhere else.
d43 1
a43 1
   explicit ExceptionHandler ();
a45 1
      // Not implemented.
d50 4
a53 1
      // Not implemented.
@


1.1
log
@Initial implementation of class ExceptionHandler.
@
text
@d45 1
a45 1
      // Not defined.
d50 1
a50 1
      // Not defined.
d55 1
a55 1
      // Not defined; prevents accidental copying and assignment.
@

