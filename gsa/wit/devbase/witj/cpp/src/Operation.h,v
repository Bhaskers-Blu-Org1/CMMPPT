head	1.43;
access;
symbols;
locks; strict;
comment	@ * @;


1.43
date	2011.04.13.16.00.17;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2011.04.08.20.56.19;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2010.04.20.20.55.07;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2009.04.15.23.33.27;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2009.04.15.22.14.55;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2009.04.15.21.11.57;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2009.03.13.19.32.19;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2009.03.05.19.09.17;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2009.03.05.17.21.26;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2009.02.27.23.12.29;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2009.02.27.21.22.39;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2009.02.27.18.44.24;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2009.01.29.22.06.38;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2009.01.23.19.32.23;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2009.01.21.21.43.22;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2009.01.16.17.03.34;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2009.01.16.16.32.02;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.12.15.17.28.48;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.12.15.17.17.39;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.10.07.18.50.24;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.10.06.22.14.03;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.09.29.22.43.46;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.09.26.22.50.17;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.09.12.14.43.23;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.09.09.18.59.58;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.09.04.20.36.22;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.08.29.17.19.06;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.08.29.15.34.42;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.08.27.15.30.45;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.07.01.17.49.15;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.26.19.18.06;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.18.21.28.17;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.10.23.21.35;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.10.22.32.35;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.28.20.24.47;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.21.14.33.48;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.20.20.37.02;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.20.18.16.40;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.19.22.20.55;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.19.16.15.30;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.16.15.40.30;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.15.19.45.17;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.20.54.11;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.43
log
@ArrayJOR classes
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File Operation.h.
//
// Contains the declaration of class Operation.
//------------------------------------------------------------------------------

#ifndef Operation_h
#define Operation_h

#include <Component.h>

#include    <string>

//------------------------------------------------------------------------------
// Class Operation
//
// Represents an operation in an implosion problem.
//
// Class Hierarchy:
//
// JavaAccObj
//    Component
//       Operation
//------------------------------------------------------------------------------

namespace WitJ
{
class Operation: public Component
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit Operation (Coordinator * theCoord, const char * theOpnNameCStr);
      //
      // Constructor.

   ~Operation ();
      //
      // Destructor.

   virtual Operation * asOperation ();
      //
      // Override from class JavaAccObj.

   virtual void setBoundSet (
         const double *,
         const double *,
         const double *);
      //
      // Override from class Component.

   virtual void getBoundSet (
         DblArrayJOR & hardLBAJOR,
         DblArrayJOR & softLBAJOR,
         DblArrayJOR & hardUBAJOR);
      //
      // Override from class Component.

   virtual void copyComponentData (Component *);
      //
      // Override from class Component.

   void setOperationName (const char *);
      //
      // Sets the OperationName of this Operation within the Operation itself
      // and in WIT.

   //---------------------------------------------------------------------------
   // Accessors.
   //---------------------------------------------------------------------------

   const char * getOperationName ();

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   Operation              (const Operation &);
   Operation & operator = (const Operation &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   std::string myOperationName_;
      //
      // The OperationName of this Operation.
   };
};
//
// End of namespace WitJ.

#endif
@


1.42
log
@copyComponentData
@
text
@d56 3
a58 3
         WitVecOwner <double> &,
         WitVecOwner <double> &,
         WitVecOwner <double> &);
@


1.41
log
@Multi-Obj Mode
@
text
@d62 4
@


1.40
log
@Moved findInstsnce functions into class Component.
@
text
@d56 3
a58 3
         VecWoa <double> &,
         VecWoa <double> &,
         VecWoa <double> &);
@


1.39
log
@Moved restoreInstance functions from the Component classes to class
   Coordinator.
@
text
@a66 7
   static Operation * findInstance (
         Coordinator * theCoord,
         const char *  theOpnName);
      //
      // Finds and returns the Operation identified by the arguments.
      // WIT verifies that the Operation exists.

@


1.38
log
@Moved Component extraction functions to class Coordinator.
Removed debugging output code from createMyCppCoordinator implementation.
@
text
@a66 7
   static void restoreInstance (Coordinator * theCoord);
      //
      // * Assumes that object iteration for the WitRun is currently positioned
      //   at a Operation.
      // * Updates the state of the Operation to as appropriate just after a
      //   call to witPurgeData.

@


1.37
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@a66 7
   static void extractInstance (Coordinator * theCoord);
      //
      // * Assumes that object iteration for the WitRun is currently positioned
      //   at an Operation.
      // * Creates a Java Operation and a C++ Operation matching the Operation
      //   at which object iteration is currently positioned.

@


1.36
log
@purgeData
@
text
@d10 1
a10 1
#include <Element.h>
d12 1
a12 1
#include  <string>
d22 1
a22 1
//    Element
d28 1
a28 1
class Operation: public Element
d53 1
a53 1
      // Override from class Element.
d60 1
a60 1
      // Override from class Element.
@


1.35
log
@purgeData
@
text
@d74 1
a74 1
   static void preserveInstance (Coordinator * theCoord);
d78 2
a79 1
      // * Sets wasDeletedInWit for the Operation to false.
@


1.34
log
@purgeData
@
text
@d78 1
a78 2
      // * Tells the matching Java Operation not to shut down at the end of
      //   purgeData ().
@


1.33
log
@purgeData
@
text
@d81 7
@


1.32
log
@purgeData
@
text
@d69 11
a79 4
      // * Assumes that object iteration be currently positioned at an
      //   Operation.
      // * Creates an Operation on both sides of WIT-J matching the Operation at
      //   which object iteration is currently positioned.
@


1.31
log
@Implemented Java class CppGateway.
@
text
@d67 7
@


1.30
log
@Coordinator
@
text
@d36 1
a36 4
   explicit Operation (
         Coordinator * theCoord,
         const char *  theOpnNameCStr,
         JavaObjRep *  theOpnJOR);
@


1.29
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d37 1
a37 1
         Coordinator * theCoordinator,
@


1.28
log
@Change the mname of the ProbCtr classes to ProbMgr in both Java and C++.
@
text
@d37 3
a39 3
         ProbMgr *    theProbMgr,
         const char * theOpnNameCStr,
         JavaObjRep * theOpnJOR);
@


1.27
log
@Continued implementation of the ProbCtr classes.
@
text
@d37 1
a37 1
         ProbCtr *    theProbCtr,
@


1.26
log
@Updated some comments.
@
text
@d37 1
a37 1
         Problem *    theProblem,
@


1.25
log
@Initial implementation of class ExceptionHandler.
@
text
@d85 1
a85 1
      // Not defined; prevents accidental copying and assignment.
@


1.24
log
@Name change.
@
text
@d21 3
a23 3
//    JavaAccObj
//       Element
//          Operation
@


1.23
log
@Changed name of Component to Entity.
@
text
@d10 1
a10 1
#include <Entity.h>
d12 1
a12 1
#include <string>
d22 1
a22 1
//       Entity
d28 1
a28 1
class Operation: public Entity
d56 1
a56 1
      // Override from class Entity.
d63 1
a63 1
      // Override from class Entity.
@


1.22
log
@Call-back infrastructure.
@
text
@d10 1
a10 1
#include <Component.h>
d12 1
a12 1
#include    <string>
d22 1
a22 1
//       Component
d28 1
a28 1
class Operation: public Component
d56 1
a56 1
      // Override from class Component.
d63 1
a63 1
      // Override from class Component.
@


1.21
log
@Changed name of C++ class JAccObject to JavaAccObj.
@
text
@d36 4
a39 1
   explicit Operation (Problem * theProblem, const char * theOpnNameCStr);
@


1.20
log
@Revised the use of class CTVecRes.
@
text
@d21 1
a21 1
//    JAccObject
d46 1
a46 1
      // Override from class JAccObject.
@


1.19
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@d36 1
a36 1
   explicit Operation (Session * theSession, const char * theOpnNameCStr);
@


1.18
log
@Added attribute "execBounds".
@
text
@d36 1
a36 3
   explicit Operation (
         ProbCoord *  theProbCoord,
         const char * theOpnNameCStr);
@


1.17
log
@"operationName" attribute.
@
text
@d50 14
@


1.16
log
@Attributes.
@
text
@d38 1
a38 1
         const char * operationNameCStr);
d50 5
d78 1
a78 1
      // The operationName of this Operation.
@


1.15
log
@Attributes.
@
text
@d54 1
a54 1
   const char * getOperationCName ();
@


1.14
log
@Accessor names.
@
text
@d46 1
a46 1
   virtual Operation * thisOperation ();
@


1.13
log
@Attributes.
@
text
@d54 1
a54 1
   const char * operationCName ();
d71 1
a71 1
   std::string operationName_;
@


1.12
log
@Attributes.
@
text
@a49 8
   void setExecCost (const double * execCostCVec);
      //
      // Wrapper for witSetOperationExecCostDbl (...).

   void getExecCost (VecWoa <double> & execCostWoa);
      //
      // Wrapper for witGetOperationExecCostDbl (...).

@


1.11
log
@Strings.
@
text
@d7 2
a8 2
#ifndef OperationH
#define OperationH
@


1.10
log
@Replaced class WitJ::String with class std::string.
@
text
@d62 1
a62 4
   inline const std::string & operationName ()
      {
      return operationName_;
      }
@


1.9
log
@Attributes
@
text
@d11 2
a12 1
#include    <String.h>
d62 1
a62 1
   inline const String & operationName ()
d82 1
a82 1
   String operationName_;
@


1.8
log
@*** empty log message ***
@
text
@d53 1
a53 1
   void getExecCost (DblVecWoa & execCostWoa);
@


1.7
log
@*** empty log message ***
@
text
@a44 4
   virtual void getDerivedInstance (Operation * &);
      //
      // Override from class JAccObject.

@


1.6
log
@*** empty log message ***
@
text
@d35 3
a37 1
   explicit Operation (ProbCoord * theProbCoord, const char * operationNameVal);
@


1.5
log
@*** empty log message ***
@
text
@d47 1
a47 1
   virtual Operation * thisOpn ();
@


1.4
log
@*** empty log message ***
@
text
@d47 4
@


1.3
log
@*** empty log message ***
@
text
@d35 1
a35 1
   Operation (ProbCoord * theProbCoord, const char * operationNameVal);
@


1.2
log
@*** empty log message ***
@
text
@d47 1
a47 1
   void setExecCost (DblTVecJia & execCostJia);
d51 1
a51 1
   void getExecCost (DblVecJoa & execCostJoa);
@


1.1
log
@*** empty log message ***
@
text
@d35 1
a35 3
   Operation (
         const CIJia <Problem> & theProblemJia,
         const StringJia &       operationNameJia);
@

