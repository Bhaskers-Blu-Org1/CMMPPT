head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2008.12.16.19.55.55;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.15.17.17.39;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.12.22.53.06;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.12.19.29.25;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.12.03.18.55.07;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.29.15.05.36;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Changed C++ class name: WitjException ==> Exception
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File NativeMacros.h.
//
// Contains the declaration of macros to be call from the implementations of
// native methods.
//------------------------------------------------------------------------------

#ifndef NativeMacros_h
#define NativeMacros_h

//------------------------------------------------------------------------------
// Macro NATIVE_METHOD (RetType, ClassID, methodID)
//
// Expands to the function prototype (except for the argument list) of a C++
// function that is the implmentation of a native method in the java portion of
// WIT-J.
// Arguments:
//
//    RetType:  The JNI return type
//    ClassID:  The Java class  identifier
//    methodID: The Java method identifier
//------------------------------------------------------------------------------

#define NATIVE_METHOD(RetType, ClassID, methodID)                              \
                                                                               \
   extern "C" JNIEXPORT RetType JNICALL                                        \
      Java_com_ibm_witj_ ## ClassID ## _ ## methodID                           \

//------------------------------------------------------------------------------
// Canonical Try Block Macros:
//
// The body of the implementation of each native method should consist of a
// "canonical try block". A canonical try block is a try block of the following
// form:
//
// try
//    {
//    <Contents of native method implementation>
//    }
//
// catch (...)
//    {
//    ExceptionHandler::handleAnyException (theJNIEnv);
//
//    <Return statement>
//    }
//
// where theJNIEnv is the JNI environment pointer for the native method.
//
// The return statement is a return statement without a value, if the
// native method returns void or a return statement that returns a value
// matching the return type of the native method, if the return type is not
// void. Since ExceptionHandler::handleAnyException will cause a Java exception
// to be thrown when the native method returns, the value returned by the return
// statement won't actually matter.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Macro BEGIN_TRY_BLOCK
//
// Expands to the beginning of a canonical try block.
//------------------------------------------------------------------------------

#define BEGIN_TRY_BLOCK                                                        \
                                                                               \
   try                                                                         \
      {                                                                        \

//------------------------------------------------------------------------------
// Macro END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
//
// Expands to the end of a canonical try block whose return statement does not
// return a value.
// theJNIEnv is to be the JNI environment pointer for the native method.
//------------------------------------------------------------------------------

#define END_TRY_BLOCK_SIMPLE_RETURN(theJNIEnv)                                 \
                                                                               \
      }                                                                        \
                                                                               \
   catch (...)                                                                 \
      {                                                                        \
      ExceptionHandler::handleAnyException (theJNIEnv);                        \
                                                                               \
      return;                                                                  \
      }                                                                        \

//------------------------------------------------------------------------------
// Macro END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, returnValue)
//
// Expands to the end of a canonical try block whose return statement returns a
// value.
// theJNIEnv is to be the JNI environment pointer for the native method.
//------------------------------------------------------------------------------

#define END_TRY_BLOCK_VALUE_RETURN(theJNIEnv, returnValue)                     \
                                                                               \
      }                                                                        \
                                                                               \
   catch (...)                                                                 \
      {                                                                        \
      ExceptionHandler::handleAnyException (theJNIEnv);                        \
                                                                               \
      return (returnValue);                                                    \
      }                                                                        \

#endif
@


1.5
log
@Initial implementation of class ExceptionHandler.
@
text
@d43 1
a43 1
//    WitjException::handleAnyException (theJNIEnv);
d53 2
a54 2
// void. Since WitjException::handleAnyException will cause a Java exception to
// be thrown when the native method returns, the value returned by the return
@


1.4
log
@Implemented the C++ canonical try block macros.
@
text
@d83 1
a83 1
      WitjException::handleAnyException (theJNIEnv);                           \
d89 1
a89 1
// Macro END_TRY_BLOCK_RETURNING_VALUE (theJNIEnv, returnValue)
d96 1
a96 1
#define END_TRY_BLOCK_RETURNING_VALUE(theJNIEnv, returnValue)                  \
d102 1
a102 1
      WitjException::handleAnyException (theJNIEnv);                           \
@


1.3
log
@Changed to all upper case for the names of macros.
@
text
@d4 2
a5 1
// Contains the declaration of macro NATIVE_METHOD.
d29 78
@


1.2
log
@Minor changes.
@
text
@d4 1
a4 1
// Contains the declaration of macro nativeMethod.
d11 1
a11 1
// Macro nativeMethod (RetType, ClassID, methodID)
d23 1
a23 1
#define nativeMethod(RetType, ClassID, methodID)                               \
@


1.1
log
@Moved macro nativeMethod to its own header file.
@
text
@d4 1
a4 1
// Contains the declaration of macro nativeMethod (...).
@

