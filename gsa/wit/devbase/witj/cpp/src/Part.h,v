head	1.55;
access;
symbols;
locks; strict;
comment	@ * @;


1.55
date	2011.04.13.16.00.17;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2011.04.08.20.56.20;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2011.04.06.23.29.23;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2011.03.29.23.38.48;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2010.04.20.20.55.07;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2009.04.15.23.33.27;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2009.04.15.22.14.56;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2009.04.15.21.11.58;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2009.03.13.19.32.19;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2009.03.05.19.09.17;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2009.03.05.17.21.26;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2009.02.27.23.12.30;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2009.02.27.21.22.39;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2009.02.27.18.44.24;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2009.02.24.17.44.57;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2009.02.03.23.18.07;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2009.02.03.16.32.27;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2009.01.31.00.56.26;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2009.01.29.22.06.38;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2009.01.23.19.32.23;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2009.01.21.21.43.23;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2009.01.16.17.03.34;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2009.01.16.16.32.02;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.12.15.17.28.48;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.12.15.17.17.39;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.10.14.22.17.46;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.10.07.18.50.24;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.10.06.22.14.03;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.10.06.14.52.39;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.10.01.22.33.04;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.09.29.22.43.47;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.09.26.22.50.17;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.09.19.15.11.13;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.09.12.14.43.23;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.09.09.18.59.59;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.09.04.21.24.30;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.09.02.14.37.23;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.08.29.17.19.06;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.08.29.15.34.42;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.08.29.15.07.59;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.08.29.14.22.00;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.08.27.15.30.46;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.07.01.17.49.16;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.18.21.28.17;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.10.23.21.36;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.10.22.32.35;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.28.20.24.47;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.28.18.10.12;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.27.14.57.44;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.21.14.33.48;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.20.20.37.02;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.19.22.20.55;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.19.16.15.30;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.15.19.45.17;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.20.54.11;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.55
log
@ArrayJOR classes
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File Part.h.
//
// Contains the declaration of class Part.
//------------------------------------------------------------------------------

#ifndef Part_h
#define Part_h

#include <Component.h>

#include       <wit.h>

#include    <string>

//------------------------------------------------------------------------------
// Class Part
//
// Represents a part in an implosion problem.
//
// Class Hierarchy:
//
// JavaAccObj
//    Component
//       Part
//------------------------------------------------------------------------------

namespace WitJ
{
class Part: public Component
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit Part (
         Coordinator * theCoord,
         const char *  thePartNameCStr,
         bool          isMaterial);
      //
      // Constructor.

   ~Part ();
      //
      // Destructor.

   virtual Part * asPart ();
      //
      // Override from class JavaAccObj.

   void getBelowList (CompALJOR <Part> & theBelowALJOR);
      //
      // Retrieves the below list for this Part and stores it in the Java
      // ArrayList represented by theBelowALJOR.

   virtual void setBoundSet (
         const double *,
         const double *,
         const double *);
      //
      // Override from class Component.

   virtual void getBoundSet (
         DblArrayJOR & hardLBAJOR,
         DblArrayJOR & softLBAJOR,
         DblArrayJOR & hardUBAJOR);
      //
      // Override from class Component.

   virtual void copyComponentData (Component *);
      //
      // Override from class Component.

   void setPartName (const char *);
      //
      // Sets the PartName of this Part within the Part itself and in WIT.

   //---------------------------------------------------------------------------
   // Accessors.
   //---------------------------------------------------------------------------

   const char * getPartName ();

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   Part              (const Part &);
   Part & operator = (const Part &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   std::string myPartName_;
      //
      // The PartName of this Part.
   };
};
//
// End of namespace WitJ.

#endif
@


1.54
log
@copyComponentData
@
text
@d66 3
a68 3
         WitVecOwner <double> &,
         WitVecOwner <double> &,
         WitVecOwner <double> &);
@


1.53
log
@getBelowList
@
text
@d72 4
@


1.52
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@d53 5
@


1.51
log
@Multi-Obj Mode
@
text
@d41 1
a41 1
         bool          theCategoryIsMaterial);
@


1.50
log
@Moved findInstsnce functions into class Component.
@
text
@d61 3
a63 3
         VecWoa <double> &,
         VecWoa <double> &,
         VecWoa <double> &);
@


1.49
log
@Moved restoreInstance functions from the Component classes to class
   Coordinator.
@
text
@a70 7
   static Part * findInstance (
         Coordinator * theCoord,
         const char *  thePartName);
      //
      // Finds and returns the Part identified by the arguments.
      // WIT verifies that the Part exists.

@


1.48
log
@Moved Component extraction functions to class Coordinator.
Removed debugging output code from createMyCppCoordinator implementation.
@
text
@a70 7
   static void restoreInstance (Coordinator * theCoord);
      //
      // * Assumes that object iteration for the WitRun is currently positioned
      //   at a Part.
      // * Updates the state of the Part to as appropriate just after a call to
      //   witPurgeData.

@


1.47
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@a70 7
   static void extractInstance (Coordinator * theCoord);
      //
      // * Assumes that object iteration for the WitRun is currently positioned
      //   at a Part.
      // * Creates a Java Part and a C++ Part matching the Part at which
      //   object iteration is currently positioned.

@


1.46
log
@purgeData
@
text
@d10 1
a10 1
#include <Element.h>
d12 1
a12 1
#include     <wit.h>
d14 1
a14 1
#include  <string>
d24 1
a24 1
//    Element
d30 1
a30 1
class Part: public Element
d58 1
a58 1
      // Override from class Element.
d65 1
a65 1
      // Override from class Element.
@


1.45
log
@purgeData
@
text
@d78 1
a78 1
   static void preserveInstance (Coordinator * theCoord);
d82 2
a83 1
      // * Sets wasDeletedInWit for the Part to false.
@


1.44
log
@purgeData
@
text
@d82 1
a82 2
      // * Tells the matching Java Part not to shut down at the end of
      //   purgeData ().
@


1.43
log
@purgeData
@
text
@d85 7
@


1.42
log
@purgeData
@
text
@d73 3
a75 2
      // * Assumes that object iteration be currently positioned at a Part.
      // * Creates a Part on both sides of WIT-J matching the Part at which
d78 7
@


1.41
log
@Part.Category by boolean.
@
text
@d71 6
@


1.40
log
@Part Category
@
text
@d41 1
a41 1
         const char *  thePartCatNameCStr);
a70 11
   const char * getCategory ();
      //
      // Returns the Part Category of this Part.
      // The Category is identified by its name.

   static const char * findCategoryName (witAttr thePartCatAttr);
      //
      // Looks up and returns the name of the Part Category identified by
      // thePartCatAttr.
      // Returns "INVALID", if thePartCatAttr does not identify a Part Category.

@


1.39
log
@Removed the Alternative classes.
@
text
@d41 1
a41 1
         int           thePartCatIdx);
d71 1
a71 1
   int getCategoryIndex ();
d73 2
a74 1
      // Returns the index of the Part Category of this Part.
d76 1
a76 1
   static int findCategoryIndex (witAttr thePartCatAttr);
d78 1
a78 1
      // Looks up and returns the index of the Part Category identified by
d80 1
a80 1
      // Asserts that thePartCatAttr identifies a Part Category.
a105 5

   static witAttr allPartCatAttrs_[];
      //
      // allPartCatAttrs_[thePartCatIdx] is the witAttr for the Part Category
      // whose index is thePartCatIdx.
@


1.38
log
@Part.Category as Alternative
@
text
@d12 2
d41 1
a41 1
         Alternative * thePartCatAlt);
d71 5
a75 1
   Alternative * getCategory ();
d77 3
a79 1
      // Returns the Alternative that models Part Category of this Part.
d105 5
@


1.37
log
@Implemented Java class CppGateway.
@
text
@d39 1
a39 1
         bool          theCategoryIsMat);
d69 1
a69 1
   bool getCategoryIsMat ();
d71 1
a71 1
      // Returns true, iff this Part is a Material Part.
@


1.36
log
@Coordinator
@
text
@d39 1
a39 2
         bool          theCategoryIsMat,
         JavaObjRep *  thePartJOR);
@


1.35
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d37 1
a37 1
         Coordinator * theCoordinator,
@


1.34
log
@Change the mname of the ProbCtr classes to ProbMgr in both Java and C++.
@
text
@d37 4
a40 4
         ProbMgr *    theProbMgr,
         const char * thePartNameCStr,
         bool         theCategoryIsMat,
         JavaObjRep * thePartJOR);
@


1.33
log
@Continued implementation of the ProbCtr classes.
@
text
@d37 1
a37 1
         ProbCtr *    theProbCtr,
@


1.32
log
@Updated some comments.
@
text
@d37 1
a37 1
         Problem *    theProblem,
@


1.31
log
@Initial implementation of class ExceptionHandler.
@
text
@d89 1
a89 1
      // Not defined; prevents accidental copying and assignment.
@


1.30
log
@Minot revision.
@
text
@d21 3
a23 3
//    JavaAccObj
//       Element
//          Part
@


1.29
log
@Name change.
@
text
@d39 1
a39 1
         bool         theMaterialCase,
d70 1
a70 1
   bool getMaterialCase ();
@


1.28
log
@Changed name of Component to Entity.
@
text
@d10 1
a10 1
#include <Entity.h>
d12 1
a12 1
#include <string>
d22 1
a22 1
//       Entity
d28 1
a28 1
class Part: public Entity
d57 1
a57 1
      // Override from class Entity.
d64 1
a64 1
      // Override from class Entity.
@


1.27
log
@Minor revision
@
text
@d10 1
a10 1
#include <Component.h>
d12 1
a12 1
#include    <string>
d22 1
a22 1
//       Component
d28 1
a28 1
class Part: public Component
d57 1
a57 1
      // Override from class Component.
d64 1
a64 1
      // Override from class Component.
@


1.26
log
@Minor revision.
@
text
@d39 1
a39 1
         bool         theMaterialMode,
d70 1
a70 1
   bool getMaterialMode ();
@


1.25
log
@Call-back infrastructure.
@
text
@d39 1
a39 1
         bool         toBeAMaterial,
d70 1
a70 1
   bool isAMaterial ();
@


1.24
log
@Changed name of C++ class JAccObject to JavaAccObj.
@
text
@d39 2
a40 1
         bool         toBeAMaterial);
@


1.23
log
@Minor revision.
@
text
@d21 1
a21 1
//    JAccObject
d49 1
a49 1
      // Override from class JAccObject.
@


1.22
log
@Revised the use of class CTVecRes.
@
text
@d39 1
a39 1
         bool         isMaterialBool);
d69 1
a69 1
   bool isMaterial ();
@


1.21
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@d37 1
a37 1
         Session *    theSession,
@


1.20
log
@Added attribute "stockBounds".
@
text
@d37 1
a37 1
         ProbCoord *  theProbCoord,
@


1.19
log
@"partCategory" attribute.
@
text
@d51 14
@


1.18
log
@"operationName" attribute.
@
text
@d39 1
a39 1
         bool         isaMaterial);
d55 4
@


1.17
log
@Attributes.
@
text
@d53 1
a53 1
      // Sets the PartName of this Part in this Part and in WIT.
@


1.16
log
@"partName" attribute.
@
text
@d59 1
a59 1
   const char * getPartCName ();
@


1.15
log
@"partName" attribute.
@
text
@d38 1
a38 1
         const char * partNameCStr,
d51 1
a51 1
   void setPartName (const char * theCStr);
d78 1
a78 1
      // The partName of this Part.
@


1.14
log
@Attributes.
@
text
@d51 4
@


1.13
log
@Accessor names.
@
text
@d47 1
a47 1
   virtual Part * thisPart ();
@


1.12
log
@Attributes.
@
text
@d55 1
a55 1
   const char * partCName ();
d72 1
a72 1
   std::string partName_;
@


1.11
log
@Strings.
@
text
@d7 2
a8 2
#ifndef PartH
#define PartH
@


1.10
log
@Replaced class WitJ::String with class std::string.
@
text
@d55 1
a55 4
   inline const std::string & partName ()
      {
      return partName_;
      }
@


1.9
log
@Attributes
@
text
@d11 2
a12 1
#include    <String.h>
d55 1
a55 1
   inline const String & partName ()
d75 1
a75 1
   String partName_;
@


1.8
log
@Initial implementation of attributes.
@
text
@a49 4
   void getSupplyVol (DblVecWoa & supplyVolWoa);
      //
      // Wrapper for witGetPartSupplyVolDbl (...).

@


1.7
log
@*** empty log message ***
@
text
@a49 4
   void setSupplyVol (const double * supplyVolCVec);
      //
      // Wrapper for witSetPartSupplyVolDbl (...).

@


1.6
log
@*** empty log message ***
@
text
@d50 8
@


1.5
log
@*** empty log message ***
@
text
@a45 4
   virtual void getDerivedInstance (Part * &);
      //
      // Override from class JAccObject.

@


1.4
log
@*** empty log message ***
@
text
@d37 1
a37 1
         const char * partNameVal,
@


1.3
log
@*** empty log message ***
@
text
@d50 4
@


1.2
log
@*** empty log message ***
@
text
@d35 1
a35 1
   Part (
@


1.1
log
@*** empty log message ***
@
text
@d36 3
a38 3
         const CIJia <Problem> & theProblemJia,
         const StringJia &       partNameJia,
         bool                    isaMaterial);
@

