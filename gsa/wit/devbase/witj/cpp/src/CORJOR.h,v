head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2011.04.15.19.01.05;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.04.15.00.07.22;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.03.29.23.38.44;	author rjw;	state dead;
branches;
next	1.11;

1.11
date	2011.03.28.15.57.04;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.03.28.15.27.42;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.03.24.21.17.51;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.03.24.20.58.31;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.24.19.11.17;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.03.24.19.03.38;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.03.24.16.37.58;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.03.24.16.30.00;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.03.23.20.30.04;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.19.00.26.08;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.03.15.20.56.39;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Class template CORJOR
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File CORJOR.h.
//
// Contains the declaration of the following classes and templates:
//
//    CppObjRepJOR
//    CORJOR <J>
//------------------------------------------------------------------------------

#ifndef CORJOR_h
#define CORJOR_h

#include <JniClient.h>

//------------------------------------------------------------------------------
// Class CppObjRepJOR
//
// "CppObjRep Java Object Representation"
// Represents a Java CppObjRep.
//
// An instance of this class stores a local reference to the represented Java
// CppObjRep. Thus an instance of this class should always be destroyed
// by the time the native method in which it was created returns.
//
// Class Hierarchy:
//
// JniClient
//    CppObjRepJOR
//       CORJOR <J>
//------------------------------------------------------------------------------

namespace WitJ
{
class CppObjRepJOR: public JniClient
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   static void setUpJni (JNIEnv *);
      //
      // Sets up the interaction between this class and JNI.

   //---------------------------------------------------------------------------
   // Protected member functions.
   //---------------------------------------------------------------------------

   protected:

   explicit CppObjRepJOR (_jobject *, JNIEnv *);
      //
      // Constructor.

   ~CppObjRepJOR ();
      //
      // Destructor.

   void acquireJavaAccObj (JavaAccObj * theJavaAccObj);
      //
      // Transfers ownership of theJavaAccObj to the represented Java CppObjRep.
      // If theJavaAccObj is NULL, the represented Java CppObjRep releases
      // ownership of its JavaAccObj.

   JavaAccObj * getJavaAccObj ();
      //
      // Returns the JavaAccObj owned by the CppObjRep.
      // May return NULL.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   CppObjRepJOR              (const CppObjRepJOR &);
   CppObjRepJOR & operator = (const CppObjRepJOR &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   static _jfieldID * ourMyCppObjectAsLongFid_;
      //
      // The JNI field ID for witj.CppObjRep.myCppObjectAsLong.

   _jobject * const myCppObjRepJObj_;
      //          
      // A local reference to the represented Java CppObjRep.
   };
};
//
// End of namespace WitJ.

//------------------------------------------------------------------------------
// Class template CORJOR <J>
//
// "C++ Object Representation Java Object Representation"
// J is to be a C++ class derived from JavaAccObj.
// An instance of class CORJOR <J> represents an instance of the Java subclass
// of CppObjRep corresponding to C++ class J.
// For example, an instance of CORJOR <Part> represents a Java PartCOR.
//
// Class Hierarchy:
//
// JniClient
//    CppObjRepJOR
//       CORJOR <J>
//------------------------------------------------------------------------------

namespace WitJ
{
template <typename J>
      class CORJOR: public CppObjRepJOR
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit CORJOR (_jobject * theCORJObj, JNIEnv *);
      //
      // Constructor.
      // theCORJObj is to be a local reference to an instance of the Java
      // CppObjRep class corresponding to C++ class J.

   ~CORJOR ();
      //
      // Destructor.

   void acquire (J * theJ);
      //
      // Transfers ownership of theJ to the represented Java CppObjRep.
      // If theJ is NULL, the represented Java CppObjRep releases ownership of
      // its JavaAccObj.

   J * getCppObject ();
      //
      // Returns the instance of class J owned by the represented Java
      // CppObjRep, which must not be NULL.
      // (Uses lazy evaluation)

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   CORJOR              (const CORJOR &);
   CORJOR & operator = (const CORJOR &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   J * myJ_;
      //
      // The J instance owned by the represented Java CppObjRep, if any;
      // otherwise NULL.
   };
};
//
// End of namespace WitJ.

#endif
@


1.13
log
@Class template CORJOR
@
text
@d60 1
a60 1
   void setCppPtr (JavaAccObj * theJavaAccObj);
d62 3
a64 2
      // Sets the C++ pointer of the represented Java CppObjRep to
      // theJavaAccObj, which may be NULL.
d135 1
a135 1
   void operator = (J * theJ);
d137 3
a139 1
      // Sets the C++ pointer of the represented Java CppObjRep to theJ.
d141 5
a145 9
   inline operator J * ()
      {
      return myJ_;
      }

   inline J * operator -> ()
      {
      return myJ_;
      }
@


1.12
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@d4 4
a7 1
// Contains the declaration of class CORJOR.
d16 4
a19 1
// Class CORJOR
d21 3
a23 3
// "CppObjRep Java Object Representative"
// Each instance of this class is owned by a JavaAccObj, which is owned by a
// Java CppObjRep. The instance is considered to represent the Java CppObjRep.
d28 2
a29 1
//    CORJOR
d34 1
a34 1
class CORJOR: public JniClient
d42 11
a52 1
   explicit CORJOR (JniClient & theJniClient, _jobject * theCORJObj);
d56 1
a56 1
   ~CORJOR ();
d60 6
a65 1
   static void setUpJni (JNIEnv * theJNIEnv);
d67 2
a68 2
      // Sets up the interaction between this class and JNI.
      // Uses theJNIEnv as its JNI environment.
d71 1
a71 5
   // Public static call-back functions.
   //
   // Each of these functions does a call-back to the Java method with the same
   // name on CppObjRep that owns the first argument, passing the remaining
   // arguments.
d74 1
a74 3
   static void makePart       (Coordinator * theCoord,
                               const char *  thePartNameCStr,
                               bool          theCategoryIsMaterial);
d76 4
a79 2
   static void makeDemand     (Part *        thePart,
                               const char *  theDemandNameCStr);
d81 3
a83 2
   static void makeOperation  (Coordinator * theCoordinator,
                               const char *  theOpnNameCStr);
d85 3
a87 2
   static void makeBomEntry   (Operation *   theOpn,
                               Part *        thePart);
d89 7
a95 2
   static void makeSubstitute (BomEntry *    theBomEnt,
                               Part *        thePart);
d97 15
a111 5
   static void makeBopEntry   (Operation *   theOpn,
                               Part *        thePart);

   static void setNPeriods    (Problem *     theProblem,
                               int           theValue);
d113 7
d122 1
a122 8
   static _jobject * newPeggingTripleLRef (
         Component * theComp,
         int         thePeriod,
         double      theVolume);
      //
      // Creates a new PeggingTriple for the Java Component corresponding to
      // theComp and thePeriod and theVolume and returns a newly created local
      // reference to it.
d124 1
a124 1
   static _jobject * getComponentLRef (Component * theComp);
d126 3
a128 2
      // Creates and returns a local reference to the Java Component
      // corresponding to theComp.
d130 1
a130 1
   static void findNonsense (Coordinator * theCoord);
d132 1
a132 2
      // Searches for a Java class called "Nonsense".
      // Used for testing.
d134 1
a134 1
   void exhaustJniMemory ();
d136 1
a136 3
      // Repeatedly has JNI allocate memory in 100MB increments until memory is
      // exhausted.
      // Used for testing.
d138 4
a141 3
   //---------------------------------------------------------------------------
   // Accessors.
   //---------------------------------------------------------------------------
d143 1
a143 1
   inline _jobject * getCORJObj ()
d145 1
a145 1
      return myCORJObj_;
a153 5
   static void findAllJMethodIDs (JNIEnv * theJNIEnv);
      //
      // Finds and stores each of the _jmethodIDs stored by this class.
      // Uses theJNIEnv as its JNI environment.

d163 1
a163 28
   jweak myCORJObj_;
      //          
      // A weak global reference to the Java CppObjRep that owns the JavaAccObj
      // that owns this CORJOR.

   static _jclass * ourPeggingTripleJCl_;
      //
      // A JNI Global reference to Java class PeggingTriple.

   //---------------------------------------------------------------------------
   // _jmethodIDs.
   //
   // Each of the following data members is the _jmethodID of a non-static Java
   // method whose name is indicated by the name of the data member.
   // For example, makePartJMeth_ is the _jmethodID of the "makePart"
   // method of WIT-J/Java class CoordinatorCOR.
   //---------------------------------------------------------------------------

   static _jmethodID * makePartJMeth_;
   static _jmethodID * makeDemandJMeth_;
   static _jmethodID * makeOperationJMeth_;
   static _jmethodID * makeBomEntryJMeth_;
   static _jmethodID * makeSubstituteJMeth_;
   static _jmethodID * makeBopEntryJMeth_;
   static _jmethodID * setNPeriodsFromCppJMeth_;
   static _jmethodID * getComponentJMeth_;

   static _jmethodID * ctorPeggingTripleJMeth_;
d165 2
a166 1
      // The _jmethodID of the ctor for Java class PeggingTriple.
@


1.11
log
@Changed name of class AllocTriple to PeggingTriple.
@
text
@@


1.10
log
@Removed some #includes.
@
text
@d80 1
a80 1
   static _jobject * newAllocTripleLRef (
d85 1
a85 1
      // Creates a new AllocTriple for the Java Component corresponding to
d139 1
a139 1
   static _jclass * ourAllocTripleJCl_;
d141 1
a141 1
      // A JNI Global reference to Java class AllocTriple.
d161 1
a161 1
   static _jmethodID * ctorAllocTripleJMeth_;
d163 1
a163 1
      // The _jmethodID of the ctor for Java class AllocTriple.
@


1.9
log
@Call-back functions.
@
text
@a11 2
#include    <vector>

@


1.8
log
@Call-back functions.
@
text
@a121 13
   _jobject * newAllocTripleLRefFromCompCOR (int thePeriod, double theVolume);
      //
      // The Java CppObjRep represented by this CORJOR must be a ComponentCOR.
      // This function creates a new Java AllocTriple for the Component
      // corresponding to the represented ComponentCOR and thePeriod and
      // theVolume and returns a newly created local reference to it.

   _jobject * getComponentLRefFromCompCOR ();
      //
      // The Java CppObjRep represented by this CORJOR must be a ComponentCOR.
      // Creates and returns a local reference to the Java Component
      // corresponding to the represented ComponentCOR.

@


1.7
log
@FromCompCOR
@
text
@a134 16
   //---------------------------------------------------------------------------
   // callVoidJMethod functions.
   //
   // Each of these functions calls the non-static void Java method identified
   // by the first argument, calling it on the Java CppObjRep represented by
   // this CORJOR, and passing to it the remaining arguments, converted to
   // the corresponding Java types.
   //---------------------------------------------------------------------------

   void callVoidJMethod (_jmethodID *, const char *);
   void callVoidJMethod (_jmethodID *, const char *, bool);
   void callVoidJMethod (_jmethodID *, int);
   void callVoidJMethod (_jmethodID *, JavaAccObj *);

   //---------------------------------------------------------------------------

@


1.6
log
@getComponentLRef
@
text
@d122 1
a122 1
   _jobject * newAllocTripleLRef (int thePeriod, double theVolume);
d129 1
a129 1
   _jobject * getComponentLRef ();
@


1.5
log
@newAllocTripleLRef
@
text
@d91 1
a91 1
   static _jobject * getComponentJObj (Component * theComp);
d93 2
a94 2
      // Returns a local reference to the Java Component corresponding to
      // theComp.
d129 6
a150 7
   _jobject * callObjectJMethod (_jmethodID *);
      //
      // Same as above. Returns a local reference to the Java Object returned by
      // the Java method.

   //---------------------------------------------------------------------------

@


1.4
log
@newAllocTriple
@
text
@d82 1
a82 1
   static _jobject * newAllocTriple (
d88 2
a89 2
      // theComp and thePeriod and theVolume and returns a local reference to
      // it.
d122 1
a122 1
   _jobject * newAllocTriple (int thePeriod, double theVolume);
@


1.3
log
@AllocTripleALJOR
@
text
@d83 1
a83 1
         Component * theRoot,
d88 1
a88 1
      // theRoot and thePeriod and theVolume and returns a local reference to
d122 7
@


1.2
log
@Revised the arguments to eqHeurAlloc.
@
text
@d82 9
d164 4
d185 4
@


1.1
log
@Renamed JavaObjRep to CORJOR.
@
text
@d37 1
a37 1
   explicit CORJOR (NativeCall & theCall, _jobject * theCORJObj);
a140 13
   static _jmethodID * findWitJMethodID (
         JNIEnv *     theJNIEnv,
         const char * theClassName,
         const char * theMethName,
         const char * theMethDesc);
      //
      // Finds and returns the _jmethodID of a non-static WIT-J/Java method.
      // Arguments:
      //    theJNIEnv:    The JNI environment to be used.
      //    theClassName: The name of the class to which the method belongs.
      //    theMethName:  The name of the method.
      //    theMethDesc:  The JNI method descriptor of the method.

@

