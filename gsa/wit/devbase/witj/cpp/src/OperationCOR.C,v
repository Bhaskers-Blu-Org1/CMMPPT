head	1.29;
access;
symbols;
locks; strict;
comment	@ * @;


1.29
date	2011.04.15.19.12.32;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2011.04.15.19.01.08;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.04.15.15.49.05;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.04.15.00.07.25;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.04.14.16.11.42;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2011.04.13.22.36.24;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.04.13.16.00.17;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.04.12.00.33.12;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2011.04.11.18.38.19;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2011.04.05.22.25.44;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.04.01.23.25.04;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.04.01.19.23.35;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.03.29.23.38.48;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.03.19.00.26.11;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.02.15.20.18.59;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2010.04.20.20.55.07;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.06.05.15.08.22;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.29.22.06.38;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.01.23.19.32.23;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.21.21.43.23;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.16.17.03.34;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.16.16.32.02;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.15.17.17.39;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.12.23.38.31;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.12.19.29.25;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.29.22.43.46;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.29.15.26.12;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.29.15.05.36;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.26.22.21.22;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Java CppObjRep classes
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source file OperationCOR.C.
//
// Contains the C++ implementations of the native methods of Java class
// witj.OperationCOR.
//------------------------------------------------------------------------------

#include     <NativeMacros.h>
#include <ExceptionHandler.h>
#include           <CORJOR.h>
#include      <Coordinator.h>
#include        <Operation.h>
#include        <StringJOR.h>

using namespace WitJ;

//------------------------------------------------------------------------------

NATIVE_METHOD (void, OperationCOR, setOperationName) (
      JNIEnv *   theJNIEnv,
      _jobject * theOpnCORJObj,
      _jstring * theOpnNameJStr)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Operation> theOpnCJOR     (theOpnCORJObj,  theJNIEnv);
   StringJOR          theOpnNameSJOR (theOpnNameJStr, theJNIEnv);

   theOpnCJOR.
      getCppObject ()->
         setOperationName (
            theOpnNameSJOR.getCString ());

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, OperationCOR, acquireNewCppObject) (
      JNIEnv *   theJNIEnv,
      _jobject * theOpnCORJObj,
      _jobject * theCoordCORJObj,
      _jstring * theOpnNameJStr)
   { 
   BEGIN_TRY_BLOCK

   CORJOR <Operation>   theOpnCJOR     (theOpnCORJObj,   theJNIEnv);
   CORJOR <Coordinator> theCoordCJOR   (theCoordCORJObj, theJNIEnv);
   StringJOR            theOpnNameSJOR (theOpnNameJStr,  theJNIEnv);
   Operation *          theOpn;

   theOpn =
      new Operation (
         theCoordCJOR  .getCppObject (),
         theOpnNameSJOR.getCString   ());

   theOpnCJOR.acquire (theOpn);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }
@


1.28
log
@Class template CORJOR
@
text
@d39 1
a39 1
NATIVE_METHOD (void, OperationCOR, createCppObject) (
@


1.27
log
@Class StringJOR
@
text
@d29 4
a32 1
   theOpnCJOR->setOperationName (theOpnNameSJOR.getCString ());
d50 1
d52 1
a52 1
   theOpnCJOR =
d54 4
a57 2
         theCoordCJOR,
         theOpnNameSJOR.getCString ());
@


1.26
log
@Class template CORJOR
@
text
@d29 1
a29 1
   theOpnCJOR->setOperationName (theOpnNameSJOR);
d48 4
a51 1
   theOpnCJOR = new Operation (theCoordCJOR, theOpnNameSJOR);
@


1.25
log
@Class StringJOR
@
text
@d10 1
d26 2
a27 2
   Operation * theOpn;
   StringJOR   theOpnNameSJOR (theOpnNameJStr, theJNIEnv);
d29 1
a29 3
   theOpn = getOperation      (theOpnCORJObj,  theJNIEnv);

   theOpn->setOperationName (theOpnNameSJOR);
d44 3
a46 7
   Coordinator * theCoord;
   StringJOR     theOpnNameSJOR (theOpnNameJStr,  theJNIEnv);
   Operation *   theOpn;

   theCoord = getCoordinator    (theCoordCORJObj, theJNIEnv);

   theOpn   = new Operation (theCoord, theOpnNameSJOR);
d48 1
a48 1
   JniClient::transferTo (theOpnCORJObj, theOpn, theJNIEnv);
@


1.24
log
@Removed namespace JniUtil.
@
text
@d30 1
a30 1
   theOpn->setOperationName (theOpnNameSJOR.getCString ());
d51 1
a51 1
   theOpn   = new Operation (theCoord, theOpnNameSJOR.getCString ());
@


1.23
log
@ArrayJOR classes
@
text
@a8 1
#include          <JniUtil.h>
a14 1
using namespace WitJ::JniUtil;
d53 1
a53 1
   transferTo (theOpnCORJObj, theOpn, theJNIEnv);
@


1.22
log
@Class StringJOR
@
text
@a10 1
#include      <WitVecOwner.h>
@


1.21
log
@Class WString
@
text
@d14 1
a14 1
#include          <WString.h>
d29 1
a29 1
   WString     theOpnNameWStr;
d31 1
a31 1
   theOpn = getOperation (theOpnCORJObj, theJNIEnv);
d33 1
a33 3
   copyInto (theOpnNameWStr, theOpnNameJStr, theJNIEnv);

   theOpn->setOperationName (theOpnNameWStr.getCString ());
d49 1
a49 1
   WString       theOpnNameWStr;
d52 1
a52 3
   theCoord = getCoordinator (theCoordCORJObj, theJNIEnv);

   copyInto (theOpnNameWStr, theOpnNameJStr, theJNIEnv);
d54 1
a54 1
   theOpn   = new Operation (theCoord, theOpnNameWStr.getCString ());
@


1.20
log
@Namespace JniUtil.
@
text
@d14 1
a14 1
#include           <String.h>
d29 1
a29 1
   String      theOpnNameStr;
d33 1
a33 1
   copyInto (theOpnNameStr, theOpnNameJStr, theJNIEnv);
d35 1
a35 1
   theOpn->setOperationName (theOpnNameStr.getCString ());
d51 1
a51 1
   String        theOpnNameStr;
d56 1
a56 1
   copyInto (theOpnNameStr, theOpnNameJStr, theJNIEnv);
d58 1
a58 1
   theOpn   = new Operation (theCoord, theOpnNameStr.getCString ());
@


1.19
log
@JniAsst
@
text
@d9 1
a10 1
#include          <JniAsst.h>
d17 1
d31 1
a31 1
   theOpn = JniAsst::getOperation (theOpnCORJObj, theJNIEnv);
d33 1
a33 1
   theOpn->getJniAsst ()->copyInto (theOpnNameStr, theOpnNameJStr);
d54 1
a54 1
   theCoord = JniAsst::getCoordinator (theCoordCORJObj, theJNIEnv);
d56 1
a56 1
   theCoord->getJniAsst ()->copyInto (theOpnNameStr, theOpnNameJStr);
d60 1
a60 1
   theOpn  ->getJniAsst ()->transferTo (theOpnCORJObj, theOpn);
@


1.18
log
@Replaced newHeldCString with copyInto.
@
text
@d10 1
a10 1
#include       <NativeCall.h>
d12 1
a26 1
   NativeCall  theCall (theJNIEnv);
d30 1
a30 1
   theOpn = theCall.getJavaAccObj (theOpnCORJObj)->asOperation ();
d32 1
a32 1
   theCall.copyInto (theOpnNameStr, theOpnNameJStr);
a48 1
   NativeCall    theCall (theJNIEnv);
d53 1
a53 1
   theCoord = theCall.getJavaAccObj (theCoordCORJObj)->asCoordinator ();
d55 1
a55 1
   theCall.copyInto (theOpnNameStr, theOpnNameJStr);
d59 1
a59 1
   theCall.transferTo (theOpnCORJObj, theOpn);
@


1.17
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@d13 1
d26 3
a28 3
   NativeCall   theCall (theJNIEnv);
   Operation *  theOpn;
   const char * theOpnNameCStr;
d30 1
a30 1
   theOpn         = theCall.getJavaAccObj (theOpnCORJObj)->asOperation ();
d32 1
a32 1
   theOpnNameCStr = theCall.newHeldCString (theOpnNameJStr);
d34 1
a34 1
   theOpn->setOperationName (theOpnNameCStr);
d51 1
a51 1
   const char *  theOpnNameCStr;
d54 1
a54 1
   theCoord       = theCall.getJavaAccObj (theCoordCORJObj)->asCoordinator ();
d56 1
a56 1
   theOpnNameCStr = theCall.newHeldCString (theOpnNameJStr);
d58 1
a58 1
   theOpn         = new Operation (theCoord, theOpnNameCStr);
@


1.16
log
@Revised the arguments to eqHeurAlloc.
@
text
@d59 1
a59 1
   theCall.associate (theOpnCORJObj, theOpn);
@


1.15
log
@CPLEX
@
text
@d29 1
a29 1
   theOpn         = theCall.getObject (theOpnCORJObj)->asOperation ();
d53 1
a53 1
   theCoord       = theCall.getObject (theCoordCORJObj)->asCoordinator ();
@


1.14
log
@Multi-Obj Mode
@
text
@d31 1
a31 1
   theOpnNameCStr = theCall.makeCString (theOpnNameJStr);
d55 1
a55 1
   theOpnNameCStr = theCall.makeCString (theOpnNameJStr);
@


1.13
log
@Changed the name each native method that creates a C++ object to
   createCppObject.
@
text
@d11 1
a11 1
#include           <VecWoa.h>
@


1.12
log
@Implemented Java class CppGateway.
@
text
@d40 1
a40 1
NATIVE_METHOD (void, OperationCOR, createMyCppOperation) (
@


1.11
log
@Coordinator
@
text
@a10 1
#include       <JavaObjRep.h>
d18 1
a18 1
NATIVE_METHOD (void, OperationCOR, createMyCppOperation) (
d21 2
a22 4
      _jobject * theCoordCORJObj,
      _jstring * theOpnNameJStr,
      _jobject * theOpnJObj)
   { 
d25 3
a27 5
   NativeCall    theCall (theJNIEnv);
   Coordinator * theCoord;
   const char *  theOpnNameCStr;
   JavaObjRep *  theOpnJOR;
   Operation *   theOpn;
d29 1
a29 1
   theCoord       = theCall.getObject (theCoordCORJObj)->asCoordinator ();
d33 1
a33 5
   theOpnJOR      = new JavaObjRep (theCall, theOpnJObj);

   theOpn         = new Operation (theCoord, theOpnNameCStr, theOpnJOR);

   theCall.transferTo (theOpnCORJObj, theOpn);
d40 1
a40 1
NATIVE_METHOD (void, OperationCOR, setOperationName) (
d43 1
d45 1
a45 1
   {
d48 4
a51 3
   NativeCall   theCall (theJNIEnv);
   Operation *  theOpn;
   const char * theOpnNameCStr;
d53 1
a53 1
   theOpn         = theCall.getObject (theOpnCORJObj)->asOperation ();
d57 3
a59 1
   theOpn->setOperationName (theOpnNameCStr);
@


1.10
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d22 1
a22 1
      _jobject * theCoordinatorCORJObj,
d29 1
a29 1
   Coordinator * theCoordinator;
d34 1
a34 1
   theCoordinator = theCall.getObject (theCoordinatorCORJObj)->asCoordinator ();
d40 1
a40 1
   theOpn         = new Operation (theCoordinator, theOpnNameCStr, theOpnJOR);
@


1.9
log
@Change the mname of the ProbCtr classes to ProbMgr in both Java and C++.
@
text
@d22 1
a22 1
      _jobject * theProbMgrCORJObj,
d28 5
a32 5
   NativeCall   theCall (theJNIEnv);
   ProbMgr *    theProbMgr;
   const char * theOpnNameCStr;
   JavaObjRep * theOpnJOR;
   Operation *  theOpn;
d34 1
a34 1
   theProbMgr     = theCall.getObject (theProbMgrCORJObj)->asProbMgr ();
d40 1
a40 1
   theOpn         = new Operation (theProbMgr, theOpnNameCStr, theOpnJOR);
@


1.8
log
@Continued implementation of the ProbCtr classes.
@
text
@d22 1
a22 1
      _jobject * theProbCtrCORJObj,
d29 1
a29 1
   ProbCtr *    theProbCtr;
d34 1
a34 1
   theProbCtr     = theCall.getObject (theProbCtrCORJObj)->asProbCtr ();
d40 1
a40 1
   theOpn         = new Operation (theProbCtr, theOpnNameCStr, theOpnJOR);
@


1.7
log
@Initial implementation of class ExceptionHandler.
@
text
@d22 1
a22 1
      _jobject * theProblemCORJObj,
d29 1
a29 1
   Problem *    theProblem;
d34 1
a34 1
   theProblem     = theCall.getObject (theProblemCORJObj)->asProblem ();
d40 1
a40 1
   theOpn         = new Operation (theProblem, theOpnNameCStr, theOpnJOR);
@


1.6
log
@Imbedded every native method implementation in a canonical try block.
@
text
@d8 6
a13 6
#include  <NativeMacros.h>
#include <WitjException.h>
#include    <NativeCall.h>
#include    <JavaObjRep.h>
#include        <VecWoa.h>
#include     <Operation.h>
@


1.5
log
@Changed to all upper case for the names of macros.
@
text
@d8 6
a13 5
#include <NativeMacros.h>
#include   <NativeCall.h>
#include   <JavaObjRep.h>
#include       <VecWoa.h>
#include    <Operation.h>
d26 2
d43 2
d54 2
d65 2
@


1.4
log
@Call-back infrastructure.
@
text
@d18 1
a18 1
nativeMethod (void, OperationCOR, createMyCppOperation) (
d44 1
a44 1
nativeMethod (void, OperationCOR, setOperationName) (
@


1.3
log
@Changed name of C++ class JniHandler to NativeCall.
@
text
@d10 1
d22 2
a23 1
      _jstring * theOpnNameJStr)
d28 1
d35 3
a37 1
   theOpn         = new Operation (theProblem, theOpnNameCStr);
@


1.2
log
@Moved macro nativeMethod to its own header file.
@
text
@d9 1
a9 1
#include   <JniHandler.h>
d23 1
a23 1
   JniHandler   theJniHand (theJNIEnv);
d28 1
a28 1
   theProblem     = theJniHand.getObject (theProblemCORJObj)->asProblem ();
d30 1
a30 1
   theOpnNameCStr = theJniHand.makeCString (theOpnNameJStr);
d34 1
a34 1
   theJniHand.transferTo (theOpnCORJObj, theOpn);
d44 1
a44 1
   JniHandler   theJniHand (theJNIEnv);
d48 1
a48 1
   theOpn         = theJniHand.getObject (theOpnCORJObj)->asOperation ();
d50 1
a50 1
   theOpnNameCStr = theJniHand.makeCString (theOpnNameJStr);
@


1.1
log
@Numerous class name changes.
@
text
@d8 4
a11 3
#include <JniHandler.h>
#include     <VecWoa.h>
#include  <Operation.h>
@

