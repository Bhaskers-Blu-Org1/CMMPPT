head	1.38;
access;
symbols;
locks; strict;
comment	@ * @;


1.38
date	2011.04.15.19.12.31;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2011.04.15.19.01.07;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2011.04.15.15.49.03;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2011.04.15.00.07.23;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2011.04.14.16.11.41;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.04.13.22.36.22;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.04.12.00.33.10;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.04.11.18.38.17;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.04.06.15.56.36;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2011.04.05.22.25.40;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2011.04.01.23.25.00;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.04.01.19.23.33;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.03.29.23.38.46;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.03.28.15.57.06;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2011.03.25.22.49.13;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.03.19.00.26.09;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.02.15.20.18.57;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2009.06.05.15.08.21;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.06.04.23.04.20;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.02.25.20.05.59;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.02.25.16.55.19;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.02.25.16.47.16;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.02.24.22.18.45;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.02.21.01.00.56;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.02.20.17.18.43;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.02.19.17.39.21;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.02.17.19.26.13;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.02.06.23.27.12;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.02.04.21.51.54;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.02.04.20.16.00;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.29.22.06.37;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.15.17.17.38;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.12.23.38.30;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.12.19.29.24;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.29.22.43.46;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.29.15.26.11;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.29.15.05.36;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.26.22.21.21;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.38
log
@Java CppObjRep classes
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source file DemandCOR.C.
//
// Contains the C++ implementations of the native methods of Java class
// witj.DemandCOR.
//------------------------------------------------------------------------------

#include     <NativeMacros.h>
#include <ExceptionHandler.h>
#include           <CORJOR.h>
#include             <Part.h>
#include           <Demand.h>
#include     <ArrayListJOR.h>
#include        <StringJOR.h>

using namespace WitJ;

//------------------------------------------------------------------------------

NATIVE_METHOD (void, DemandCOR, appendToPipSeq) (
      JNIEnv *   theJNIEnv,
      _jobject * theDemandCORJObj,
      jint       theShipPer,
      jdouble    incShipVol)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Demand> theDemandCJOR (theDemandCORJObj, theJNIEnv);

   theDemandCJOR.getCppObject ()->appendToPipSeq (theShipPer, incShipVol);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, DemandCOR, getPegging) (
      JNIEnv *   theJNIEnv,
      _jobject * theDemandCORJObj,
      jint       thePggAttIdx,
      jint       shipPer,
      _jobject * theTripleListJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Demand>    theDemandCJOR (theDemandCORJObj,  theJNIEnv);
   PeggingTripleALJOR theTripALJOR  (theTripleListJObj, theJNIEnv);

   theDemandCJOR.
      getCppObject ()->
         getPegging (thePggAttIdx, shipPer, theTripALJOR);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, DemandCOR, setDemandName) (
      JNIEnv *   theJNIEnv,
      _jobject * theDemandCORJObj,
      _jstring * theDemandNameJStr)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Demand> theDemandCJOR     (theDemandCORJObj,  theJNIEnv);
   StringJOR       theDemandNameSJOR (theDemandNameJStr, theJNIEnv);

   theDemandCJOR.
      getCppObject ()->
         setDemandName (
            theDemandNameSJOR.getCString ());

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (jdouble, DemandCOR, incHeurAlloc) (
      JNIEnv *   theJNIEnv,
      _jobject * theDemandCORJObj,
      jint       shipPeriod,
      jdouble    desIncVol)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Demand> theDemandCJOR (theDemandCORJObj, theJNIEnv);
   double          incVol;

   incVol = theDemandCJOR.getCppObject ()->incHeurAlloc (shipPeriod, desIncVol);

   return incVol;

   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, 0.0)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, DemandCOR, acquireNewCppObject) (
      JNIEnv *   theJNIEnv,
      _jobject * theDemandCORJObj,
      _jobject * thePartCORJObj,
      _jstring * theDemandNameJStr)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Demand> theDemandCJOR     (theDemandCORJObj,  theJNIEnv);
   CORJOR <Part>   thePartCJOR       (thePartCORJObj,    theJNIEnv);
   StringJOR       theDemandNameSJOR (theDemandNameJStr, theJNIEnv);
   Demand *        theDemand;

   theDemand =
      new Demand (
         thePartCJOR      .getCppObject (),
         theDemandNameSJOR.getCString   ());

   theDemandCJOR.acquire (theDemand);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }
@


1.37
log
@Class template CORJOR
@
text
@d98 1
a98 1
NATIVE_METHOD (void, DemandCOR, createCppObject) (
@


1.36
log
@Class StringJOR
@
text
@d30 1
a30 1
   theDemandCJOR->appendToPipSeq (theShipPer, incShipVol);
d49 3
a51 1
   theDemandCJOR->getPegging (thePggAttIdx, shipPer, theTripALJOR);
d68 4
a71 1
   theDemandCJOR->setDemandName (theDemandNameSJOR.getCString ());
d89 1
a89 1
   incVol    = theDemandCJOR->incHeurAlloc (shipPeriod, desIncVol);
d109 1
d111 1
a111 1
   theDemandCJOR =
d113 4
a116 2
         thePartCJOR,
         theDemandNameSJOR.getCString ());
@


1.35
log
@Class template CORJOR
@
text
@d66 1
a66 1
   theDemandCJOR->setDemandName (theDemandNameSJOR);
d105 4
a108 1
   theDemandCJOR = new Demand (thePartCJOR, theDemandNameSJOR);
@


1.34
log
@Class StringJOR
@
text
@d10 1
d28 1
a28 1
   Demand * theDemand;
d30 1
a30 3
   theDemand = getDemand (theDemandCORJObj, theJNIEnv);

   theDemand->appendToPipSeq (theShipPer, incShipVol);
d46 2
a47 4
   Demand *           theDemand;
   PeggingTripleALJOR theTripALJOR (theTripleListJObj, theJNIEnv);

   theDemand = getDemand (theDemandCORJObj, theJNIEnv);
d49 1
a49 1
   theDemand->getPegging (thePggAttIdx, shipPer, theTripALJOR);
d63 2
a64 4
   Demand *  theDemand;
   StringJOR theDemandNameSJOR (theDemandNameJStr, theJNIEnv);

   theDemand = getDemand       (theDemandCORJObj,  theJNIEnv);
d66 1
a66 1
   theDemand->setDemandName (theDemandNameSJOR);
d81 2
a82 2
   Demand * theDemand;
   double   incVol;
d84 1
a84 3
   theDemand = getDemand (theDemandCORJObj, theJNIEnv);

   incVol    = theDemand->incHeurAlloc (shipPeriod, desIncVol);
d101 3
a103 7
   Part *    thePart;
   StringJOR theDemandNameSJOR (theDemandNameJStr, theJNIEnv);
   Demand *  theDemand;

   thePart   = getPart         (thePartCORJObj,    theJNIEnv);

   theDemand = new Demand (thePart, theDemandNameSJOR);
d105 1
a105 1
   JniClient::transferTo (theDemandCORJObj, theDemand, theJNIEnv);
@


1.33
log
@Removed namespace JniUtil.
@
text
@d71 1
a71 1
   theDemand->setDemandName (theDemandNameSJOR.getCString ());
d114 1
a114 1
   theDemand = new Demand (thePart, theDemandNameSJOR.getCString ());
@


1.32
log
@Class StringJOR
@
text
@a8 1
#include          <JniUtil.h>
a15 1
using namespace WitJ::JniUtil;
d116 1
a116 1
   transferTo (theDemandCORJObj, theDemand, theJNIEnv);
@


1.31
log
@Class WString
@
text
@d14 1
a14 1
#include          <WString.h>
d69 1
a69 1
   WString   theDemandNameWStr;
d71 1
a71 3
   theDemand = getDemand (theDemandCORJObj, theJNIEnv);

   copyInto (theDemandNameWStr, theDemandNameJStr, theJNIEnv);
d73 1
a73 1
   theDemand->setDemandName (theDemandNameWStr.getCString ());
d110 3
a112 5
   Part *   thePart;
   WString  theDemandNameWStr;
   Demand * theDemand;

   thePart   = getPart (thePartCORJObj, theJNIEnv);
d114 1
a114 1
   copyInto (theDemandNameWStr, theDemandNameJStr, theJNIEnv);
d116 1
a116 1
   theDemand = new Demand (thePart, theDemandNameWStr.getCString ());
@


1.30
log
@JNIEnv arguments.
@
text
@d14 1
a14 1
#include           <String.h>
d68 2
a69 2
   Demand * theDemand;
   String   theDemandNameStr;
d73 1
a73 1
   copyInto (theDemandNameStr, theDemandNameJStr, theJNIEnv);
d75 1
a75 1
   theDemand->setDemandName (theDemandNameStr.getCString ());
d113 1
a113 1
   String   theDemandNameStr;
d118 1
a118 1
   copyInto (theDemandNameStr, theDemandNameJStr, theJNIEnv);
d120 1
a120 1
   theDemand = new Demand (thePart, theDemandNameStr.getCString ());
@


1.29
log
@Namespace JniUtil.
@
text
@d50 1
a50 1
   PeggingTripleALJOR theTripALJOR (theJNIEnv, theTripleListJObj);
@


1.28
log
@JniAsst
@
text
@d9 1
a10 1
#include          <JniAsst.h>
d17 1
d31 1
a31 1
   theDemand = JniAsst::getDemand (theDemandCORJObj, theJNIEnv);
d52 1
a52 1
   theDemand = JniAsst::getDemand (theDemandCORJObj, theJNIEnv);
d71 1
a71 1
   theDemand = JniAsst::getDemand (theDemandCORJObj, theJNIEnv);
d73 1
a73 1
   theDemand->getJniAsst ()->copyInto (theDemandNameStr, theDemandNameJStr);
d93 1
a93 1
   theDemand = JniAsst::getDemand (theDemandCORJObj, theJNIEnv);
d116 1
a116 1
   thePart   = JniAsst::getPart (thePartCORJObj, theJNIEnv);
d118 1
a118 1
   thePart  ->getJniAsst ()->copyInto (theDemandNameStr, theDemandNameJStr);
d122 1
a122 1
   theDemand->getJniAsst ()->transferTo (theDemandCORJObj, theDemand);
@


1.27
log
@Replaced newHeldCString with copyInto.
@
text
@d10 2
a11 1
#include       <NativeCall.h>
d28 1
a28 2
   NativeCall theCall (theJNIEnv);
   Demand *   theDemand;
d30 1
a30 1
   theDemand = theCall.getJavaAccObj (theDemandCORJObj)->asDemand ();
a47 1
   NativeCall         theCall (theJNIEnv);
d51 1
a51 1
   theDemand = theCall.getJavaAccObj (theDemandCORJObj)->asDemand ();
d67 2
a68 3
   NativeCall theCall (theJNIEnv);
   Demand *   theDemand;
   String     theDemandNameStr;
d70 1
a70 1
   theDemand = theCall.getJavaAccObj (theDemandCORJObj)->asDemand ();
d72 1
a72 1
   theCall.copyInto (theDemandNameStr, theDemandNameJStr);
d89 2
a90 3
   NativeCall theCall (theJNIEnv);
   Demand *   theDemand;
   double     incVol;
d92 1
a92 1
   theDemand = theCall.getJavaAccObj (theDemandCORJObj)->asDemand ();
d111 3
a113 4
   NativeCall theCall (theJNIEnv);
   Part *     thePart;
   String     theDemandNameStr;
   Demand *   theDemand;
d115 1
a115 1
   thePart   = theCall.getJavaAccObj (thePartCORJObj)->asPart ();
d117 1
a117 1
   theCall.copyInto (theDemandNameStr, theDemandNameJStr);
d121 1
a121 1
   theCall.transferTo (theDemandCORJObj, theDemand);
@


1.26
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@d13 1
d68 3
a70 3
   NativeCall   theCall (theJNIEnv);
   Demand *     theDemand;
   const char * theDemandNameCStr;
d72 1
a72 1
   theDemand         = theCall.getJavaAccObj (theDemandCORJObj)->asDemand ();
d74 1
a74 1
   theDemandNameCStr = theCall.newHeldCString (theDemandNameJStr);
d76 1
a76 1
   theDemand->setDemandName (theDemandNameCStr);
d114 4
a117 4
   NativeCall   theCall (theJNIEnv);
   Part *       thePart;
   const char * theDemandNameCStr;
   Demand *     theDemand;
d119 1
a119 1
   thePart           = theCall.getJavaAccObj (thePartCORJObj)->asPart ();
d121 1
a121 1
   theDemandNameCStr = theCall.newHeldCString (theDemandNameJStr);
d123 1
a123 1
   theDemand         = new Demand (thePart, theDemandNameCStr);
@


1.25
log
@Changed name of class AllocTriple to PeggingTriple.
@
text
@d124 1
a124 1
   theCall.associate (theDemandCORJObj, theDemand);
@


1.24
log
@ArrayListJOR
@
text
@d47 3
a49 3
   NativeCall       theCall (theJNIEnv);
   Demand *         theDemand;
   AllocTripleALJOR theTripALJOR (theJNIEnv, theTripleListJObj);
@


1.23
log
@Revised the arguments to eqHeurAlloc.
@
text
@d12 1
d43 1
a43 1
      _jobject * theAllocTripleVecCORJObj)
d49 1
a49 1
   AllocTripleVec * theAllocTripleVec;
d51 1
a51 4
   theDemand         = theCall.getJavaAccObj (theDemandCORJObj)->asDemand ();

   theAllocTripleVec =
     theCall.getJavaAccObj (theAllocTripleVecCORJObj)->asAllocTripleVec ();
d53 1
a53 1
   theDemand->getPegging (thePggAttIdx, shipPer, theAllocTripleVec);
@


1.22
log
@CPLEX
@
text
@d28 1
a28 1
   theDemand = theCall.getObject (theDemandCORJObj)->asDemand ();
d50 1
a50 1
   theDemand         = theCall.getObject (theDemandCORJObj)->asDemand ();
d53 1
a53 1
     theCall.getObject (theAllocTripleVecCORJObj)->asAllocTripleVec ();
d73 1
a73 1
   theDemand         = theCall.getObject (theDemandCORJObj)->asDemand ();
d96 1
a96 1
   theDemand = theCall.getObject (theDemandCORJObj)->asDemand ();
d120 1
a120 1
   thePart           = theCall.getObject (thePartCORJObj)->asPart ();
@


1.21
log
@Changed the name each native method that creates a C++ object to
   createCppObject.
@
text
@d75 1
a75 1
   theDemandNameCStr = theCall.makeCString (theDemandNameJStr);
d122 1
a122 1
   theDemandNameCStr = theCall.makeCString (theDemandNameJStr);
@


1.20
log
@Changed handling of Lists of AllocTriples to avoid call-backs.
@
text
@d107 1
a107 1
NATIVE_METHOD (void, DemandCOR, createMyCppDemand) (
@


1.19
log
@PIP.
@
text
@a11 1
#include  <AllocTripleList.h>
d42 1
a42 1
      _jobject * theAllocTripleListCORJObj)
d46 3
a48 3
   NativeCall        theCall (theJNIEnv);
   Demand *          theDemand;
   AllocTripleList * theAllocTripleList;
d50 1
a50 1
   theDemand          = theCall.getObject (theDemandCORJObj)->asDemand ();
d52 2
a53 2
   theAllocTripleList =
     theCall.getObject (theAllocTripleListCORJObj)->asAllocTripleList ();
d55 1
a55 1
   theDemand->getPegging (thePggAttIdx, shipPer, theAllocTripleList);
@


1.18
log
@Pegging
@
text
@a48 1
   PggAttID          thePggAttID;
a52 2
   thePggAttID        = static_cast <PggAttID> (thePggAttIdx);

d54 1
a54 1
        theCall.getObject (theAllocTripleListCORJObj)->asAllocTripleList ();
d56 1
a56 1
   theDemand->getPegging (thePggAttID, shipPer, theAllocTripleList);
@


1.17
log
@Pegging
@
text
@d41 1
a41 1
      jint       thePeggingAttIdx,
d49 1
a49 1
   PeggingAttID      thePeggingAttID;
d54 1
a54 1
   thePeggingAttID    = static_cast <PeggingAttID> (thePeggingAttIdx);
d59 1
a59 1
   theDemand->getPegging (thePeggingAttID, shipPer, theAllocTripleList);
@


1.16
log
@PIP.
@
text
@d38 1
a38 1
NATIVE_METHOD (void, DemandCOR, getPip) (
d59 1
a59 1
   theDemand->getPip (thePeggingAttID, shipPer, theAllocTripleList);
@


1.15
log
@PIP.
@
text
@d41 1
a42 1
      jint       thePeggingAttIdx,
@


1.14
log
@Added the AllocTripleList classes.
@
text
@d38 1
a38 1
NATIVE_METHOD (void, DemandCOR, getExecVolPip) (
d42 1
d49 1
d54 2
d59 1
a59 1
   theDemand->getExecVolPip (shipPer, theAllocTripleList);
@


1.13
log
@Demand.getExecVolPip
@
text
@d12 1
d41 2
a42 1
      jint       shipPer)
d46 5
a50 2
   NativeCall theCall (theJNIEnv);
   Demand *   theDemand;
d52 2
a53 1
   theDemand = theCall.getObject (theDemandCORJObj)->asDemand ();
d55 1
a55 1
   theDemand->getExecVolPip (shipPer);
@


1.12
log
@PIP.
@
text
@d37 19
@


1.11
log
@Removed eqHeurAllocTwme
@
text
@d17 20
@


1.10
log
@Heuristic Allocation
@
text
@a61 24
NATIVE_METHOD (jdouble, DemandCOR, incHeurAllocTwme) (
      JNIEnv *   theJNIEnv,
      _jobject * theDemandCORJObj,
      jint       shipPeriod,
      jdouble    desIncVol,
      jboolean   asapMultiExec)
   {
   BEGIN_TRY_BLOCK

   NativeCall theCall (theJNIEnv);
   Demand *   theDemand;
   double     incVol;

   theDemand = theCall.getObject (theDemandCORJObj)->asDemand ();

   incVol = theDemand->incHeurAllocTwme (shipPeriod, desIncVol, asapMultiExec);

   return incVol;

   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, 0.0)
   }

//------------------------------------------------------------------------------

@


1.9
log
@Heuristic Allocation
@
text
@d62 21
a82 1
// double incHeurAlloc (int shipPeriod, double desIncVol);
@


1.8
log
@Implemented Java class CppGateway.
@
text
@d39 27
@


1.7
log
@Initial implementation of class ExceptionHandler.
@
text
@a10 1
#include       <JavaObjRep.h>
d43 1
a43 2
      _jstring * theDemandNameJStr,
      _jobject * theDemandJObj)
a49 1
   JavaObjRep * theDemandJOR;
d56 1
a56 3
   theDemandJOR      = new JavaObjRep (theCall, theDemandJObj);

   theDemand         = new Demand (thePart, theDemandNameCStr, theDemandJOR);
d58 1
a58 1
   theCall.transferTo (theDemandCORJObj, theDemand);
@


1.6
log
@Imbedded every native method implementation in a canonical try block.
@
text
@d8 5
a12 5
#include  <NativeMacros.h>
#include <WitjException.h>
#include    <NativeCall.h>
#include    <JavaObjRep.h>
#include        <Demand.h>
@


1.5
log
@Changed to all upper case for the names of macros.
@
text
@d8 5
a12 4
#include <NativeMacros.h>
#include   <NativeCall.h>
#include   <JavaObjRep.h>
#include       <Demand.h>
d23 2
d34 2
d47 2
d64 2
@


1.4
log
@Call-back infrastructure.
@
text
@d17 1
a17 1
nativeMethod (void, DemandCOR, setDemandName) (
d35 1
a35 1
nativeMethod (void, DemandCOR, createMyCppDemand) (
@


1.3
log
@Changed name of C++ class JniHandler to NativeCall.
@
text
@d10 1
d39 2
a40 1
      _jstring * theDemandNameJStr)
d45 1
d52 3
a54 1
   theDemand         = new Demand (thePart, theDemandNameCStr);
@


1.2
log
@Moved macro nativeMethod to its own header file.
@
text
@d9 1
a9 1
#include   <JniHandler.h>
d21 1
a21 1
   JniHandler   theJniHand (theJNIEnv);
d25 1
a25 1
   theDemand         = theJniHand.getObject (theDemandCORJObj)->asDemand ();
d27 1
a27 1
   theDemandNameCStr = theJniHand.makeCString (theDemandNameJStr);
d40 1
a40 1
   JniHandler   theJniHand (theJNIEnv);
d45 1
a45 1
   thePart           = theJniHand.getObject (thePartCORJObj)->asPart ();
d47 1
a47 1
   theDemandNameCStr = theJniHand.makeCString (theDemandNameJStr);
d51 1
a51 1
   theJniHand.transferTo (theDemandCORJObj, theDemand);
@


1.1
log
@Numerous class name changes.
@
text
@d8 3
a10 2
#include <JniHandler.h>
#include     <Demand.h>
@

