head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2011.04.15.21.02.17;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.13.21.50.32;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.13.16.00.12;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Class template ArrayJOR <E>
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File ArrayJOR.h.
//
// Contains the declaration of the following classes and templetes:
//
//    ArrayJOR <E>
//    BoolArrayJOR
//    IntArrayJOR
//    DblArrayJOR
//------------------------------------------------------------------------------

#ifndef ArrayJOR_h
#define ArrayJOR_h

#include <JniClient.h>

//------------------------------------------------------------------------------
// Class template ArrayJOR <E>
//
// "Array Java Object Representation"
// Represents a Java array of primitives corresponding to the C++ type E.
//
// Class Hierarchy:
//
// JniClient
//    ArrayJOR <Boolean>
//       BoolArrayJOR
//    ArrayJOR <int>
//       IntArrayJOR
//    ArrayJOR <double>
//       DblArrayJOR
//------------------------------------------------------------------------------

namespace WitJ
{
template <typename E>
      class ArrayJOR: public JniClient
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   virtual void copyFrom (const E * theCVec) = 0;
      //
      // Copies theCVec the represented a Java array.
      // It is assumed that theCVec is the same length as the Java array
      // (normally nPeriods). 
      // Not allowed, if the reference to the represented a Java array is NULL.

   //---------------------------------------------------------------------------
   // Protected member functions.
   //---------------------------------------------------------------------------

   protected:

   explicit ArrayJOR (_jarray *, CORJOR <Component> &);
      //
      // Constructor.

   ~ArrayJOR ();
      //
      // Destructor.

   void * getVoidCVecCrit ();
      //
      // Calls JNI's GetPrimitiveArrayCritical (...), checks for exceptions and
      // returns the result.

   E * acquiredCTVec ();
      //
      // Returns the C time vector for this ArrayJOR, acquired from
      // myCTVecSupply_.

   void releaseJArrayCritAndCopy (void * theVoidCVec);
      //
      // Calls JNI's ReleasePrimitiveArrayCritical (...), instructing it to copy
      // back from theVoidCVec to the represented Java array, if necessary.

   void releaseJArrayCritDontCopy (void * theVoidCVec);
      //
      // Calls JNI's ReleasePrimitiveArrayCritical (...), instructing it not to
      // copy back from theVoidCVec to the represented Java array.

   inline int getLength ()
      {
      return myLength_;
      }

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   ArrayJOR              (const ArrayJOR &);
   ArrayJOR & operator = (const ArrayJOR &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   _jarray * const myJArray_;
      //
      // A local reference to the represented Java array.
      // May be NULL.

   int myLength_;
      //
      // The length of the represented Java array.
      // 0, if myJArray_ is NULL.

   CTVecSupply * myCTVecSupply_;
      //
      // The CTVecSupply for this ArrayJOR.

   E * myCTVector_;
      //
      // The c-vector of length nPeriods owned by this ArrayJOR, if any;
      // otherwise NULL.
   };
};
//
// End of namespace WitJ.

//------------------------------------------------------------------------------
// Class BoolArrayJOR
//
// "Boolean Array Java Object Representation"
// Represents a Java boolean[].
//
// Class Hierarchy:
//
// JniClient
//    ArrayJOR <Boolean>
//       BoolArrayJOR
//------------------------------------------------------------------------------

namespace WitJ
{
class BoolArrayJOR: public ArrayJOR <Boolean>
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit BoolArrayJOR (_jbooleanArray * theJBoolArray, CORJOR <Component> &);
      //
      // Constructor.
      // theJBoolArray should be a local reference.

   ~BoolArrayJOR ();
      //
      // Destructor.

   virtual void copyFrom (const Boolean *);
      //
      // Override from class  ArrayJOR <Boolean>

   const Boolean * getCTVec ();
      //
      // Returns the represented Java array as a c-vector.
      // It is assumed that the Java array is of length nPeriods. 
      // Not allowed, if the reference to the represented a Java array is NULL.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   BoolArrayJOR              (const BoolArrayJOR &);
   BoolArrayJOR & operator = (const BoolArrayJOR &);
      //
      // Not implemented; prevents accidental copying and assignment.
   };
};
//
// End of namespace WitJ.

//------------------------------------------------------------------------------
// Class IntArrayJOR
//
// "Integer Array Java Object Representation"
// Represents a Java int[].
//
// Class Hierarchy:
//
// JniClient
//    ArrayJOR <int>
//       IntArrayJOR
//------------------------------------------------------------------------------

namespace WitJ
{
class IntArrayJOR: public ArrayJOR <int>
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit IntArrayJOR (_jintArray * theJIntArray, CORJOR <Component> &);
      //
      // Constructor.
      // theJIntArray should be a local reference.

   ~IntArrayJOR ();
      //
      // Destructor.

   virtual void copyFrom (const int *);
      //
      // Overrides from class  ArrayJOR <int>

   virtual const int * getCTVec ();
      //
      // See BoolArrayJOR::getCTVec ().

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   IntArrayJOR              (const IntArrayJOR &);
   IntArrayJOR & operator = (const IntArrayJOR &);
      //
      // Not implemented; prevents accidental copying and assignment.
   };
};
//
// End of namespace WitJ.

//------------------------------------------------------------------------------
// Class DblArrayJOR
//
// "Double Array Java Object Representation"
// Represents a Java double[].
//
// Class Hierarchy:
//
// JniClient
//    ArrayJOR <double>
//       DblArrayJOR
//------------------------------------------------------------------------------

namespace WitJ
{
class DblArrayJOR: public ArrayJOR <double>
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit DblArrayJOR (_jdoubleArray * theJDblArray, CORJOR <Component> &);
      //
      // Constructor.
      // theJDblArray should be a local reference.

   ~DblArrayJOR ();
      //
      // Destructor.

   const double * getBoundCTVec ();
      //
      // Same as getCTVec (...), except that if the reference to the represented
      // Java array is NULL, then NULL is returned.

   virtual void copyFrom (const double *);
      //
      // Override from class  ArrayJOR <double>

   const double * getCTVec ();
      //
      // See BoolArrayJOR::getCTVec ().

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   DblArrayJOR              (const DblArrayJOR &);
   DblArrayJOR & operator = (const DblArrayJOR &);
      //
      // Not implemented; prevents accidental copying and assignment.
   };
};
//
// End of namespace WitJ.

#endif
@


1.2
log
@ArrayJOR classes
@
text
@a51 7
   virtual const E * getCTVec (Component * theComp) = 0;
      //
      // Returns the represented Java array as a c-vector.
      // It is assumed that the Java array is of length nPeriods. 
      // Obtains the c-vector from the CTVecSupply for theComp.
      // Not allowed, if the reference to the represented a Java array is NULL.

d58 1
a58 1
   explicit ArrayJOR (_jarray *, JNIEnv *);
d71 1
a71 1
   E * acquireCTVec (Component * theComp);
d73 2
a74 2
      // Takes posession of a c time vector from the CTVecSupply for theComp and
      // returns it.
d116 4
a123 4

   CTVecSupply * myCTVecSupply_;
      //
      // The CTVecSupply for this ArrayJOR, if any; otherwise NULL.
d152 1
a152 1
   explicit BoolArrayJOR (_jbooleanArray * theJBoolArray, JNIEnv *);
d161 5
a165 2
   virtual void            copyFrom (const Boolean *);
   virtual const Boolean * getCTVec (Component *);
d167 3
a169 1
      // Overrides from class  ArrayJOR <Boolean>
d209 1
a209 1
   explicit IntArrayJOR (_jintArray * theJIntArray, JNIEnv *);
d218 1
a218 2
   virtual void        copyFrom (const int *);
   virtual const int * getCTVec (Component *);
d222 4
d264 1
a264 1
   explicit DblArrayJOR (_jdoubleArray * theJDblArray, JNIEnv *);
d273 1
a273 1
   const double * getBoundCTVec (Component * theComp);
d278 5
a282 2
   virtual void           copyFrom (const double *);
   virtual const double * getCTVec (Component *);
d284 1
a284 1
      // Overrides from class  ArrayJOR <double>
@


1.1
log
@ArrayJOR classes
@
text
@d50 8
d78 5
d88 5
d116 1
d121 10
d168 2
a169 1
   virtual void copyFrom (const Boolean *);
d171 1
a171 1
      // Override from class  ArrayJOR <Boolean>
d220 2
a221 1
   virtual void copyFrom (const int *);
d223 1
a223 1
      // Override from class  ArrayJOR <int>
d272 7
a278 1
   virtual void copyFrom (const double *);
d280 1
a280 1
      // Override from class  ArrayJOR <double>
@

