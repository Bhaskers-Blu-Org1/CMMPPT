head	1.33;
access;
symbols;
locks; strict;
comment	@ * @;


1.33
date	2011.04.15.00.07.24;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.04.13.22.36.22;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.04.06.16.29.03;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.04.05.23.07.39;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2011.04.05.22.25.42;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2011.04.01.23.25.02;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.03.30.23.23.00;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.03.30.19.49.52;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.03.29.23.38.47;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2011.03.24.19.03.39;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.03.23.20.30.05;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.03.19.00.26.10;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2011.03.11.23.49.22;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2011.03.09.22.35.26;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.02.16.21.03.09;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.02.16.19.08.30;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.02.15.19.38.01;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.02.14.21.13.47;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.02.14.19.59.09;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2010.04.23.22.41.22;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.04.13.19.51.40;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.02.18.22.10.21;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.02.14.00.51.29;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.24.20.34.22;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.24.15.37.34;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.24.15.01.11;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.24.00.18.55;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.22.16.29.12;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.15.17.28.47;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.12.19.29.25;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.10.10.17.51.11;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.03.18.07.57;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.01.19.47.12;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.33
log
@Class template CORJOR
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File JniClient.C.
//
// Contains the implementation of class JniClient.
//------------------------------------------------------------------------------

#include  <JniClient.h>
#include <JavaAccObj.h>

//------------------------------------------------------------------------------

_jclass *    WitJ::JniClient:: ourStringJCl_       = NULL;
_jclass *    WitJ::JniClient::ourIntegerJCl_       = NULL;
_jclass *    WitJ::JniClient:: ourDoubleJCl_       = NULL;

_jmethodID * WitJ::JniClient::valueOfIntegerJMeth_ = NULL;
_jmethodID * WitJ::JniClient:: valueOfDoubleJMeth_ = NULL;

//------------------------------------------------------------------------------

void WitJ::JniClient::setUpJni (JNIEnv * theJNIEnv)
   {
   ourStringJCl_  = newJClassGRef ("java/lang/String",  theJNIEnv);
   ourIntegerJCl_ = newJClassGRef ("java/lang/Integer", theJNIEnv);
   ourDoubleJCl_  = newJClassGRef ("java/lang/Double",  theJNIEnv);

   valueOfIntegerJMeth_ =
      getStaticJMethodID (
         ourIntegerJCl_,
         "valueOf",
         "(I)Ljava/lang/Integer;",
         theJNIEnv);

   valueOfDoubleJMeth_ =
      getStaticJMethodID (
         ourDoubleJCl_,
         "valueOf",
         "(D)Ljava/lang/Double;",
         theJNIEnv);
   }

//------------------------------------------------------------------------------

_jstring * WitJ::JniClient::newJString (
      const char * theCString,
      JNIEnv *     theJNIEnv)
   {
   _jstring * theJString;

   EXCEPTION_ASSERT (theCString != NULL);

   theJString = theJNIEnv->NewStringUTF (theCString);

   throwAnyJavaException (theJNIEnv);

   return theJString;
   }

//------------------------------------------------------------------------------

_jobject * WitJ::JniClient::matchingIntegerJObj (
      int      theInt,
      JNIEnv * theJNIEnv)
   {
   _jobject * theIntJObj;

   theIntJObj =
      theJNIEnv->
         CallStaticObjectMethod (ourIntegerJCl_, valueOfIntegerJMeth_, theInt);

   throwAnyJavaException (theJNIEnv);

   return theIntJObj;
   }

//------------------------------------------------------------------------------

_jobject * WitJ::JniClient::matchingDoubleJObj (
      double   theDbl,
      JNIEnv * theJNIEnv)
   {
   _jobject * theDblJObj;

   theDblJObj =
      theJNIEnv->
         CallStaticObjectMethod (ourDoubleJCl_, valueOfDoubleJMeth_, theDbl);

   throwAnyJavaException (theJNIEnv);

   return theDblJObj;
   }

//------------------------------------------------------------------------------

bool WitJ::JniClient::isaUTF8String (const char * theCString)
   {
   _jstring *   theJString;
   const char * theCString2;
   bool         isUFT8;

   theJString  = newJString (theCString);

   theCString2 = getJNIEnv ()->GetStringUTFChars (theJString, NULL);

   throwAnyJavaException ();

   isUFT8      = equal (theCString2, theCString);

   getJNIEnv ()->ReleaseStringUTFChars (theJString, theCString2);

   deleteLocalRef (theJString);

   return isUFT8;
   }

//------------------------------------------------------------------------------

void WitJ::JniClient::throwAnyJavaException (JNIEnv * theJNIEnv)
   {
   _jthrowable * theJThrow;

   theJThrow = theJNIEnv->ExceptionOccurred ();

   if (theJThrow != NULL)
      {
      theJNIEnv->ExceptionClear ();

      throw theJThrow;
      }
   }

//------------------------------------------------------------------------------

void WitJ::JniClient::findNonsense ()
   {
   findJClass ("Nonsense", getJNIEnv ());
   }

//------------------------------------------------------------------------------

WitJ::JniClient::JniClient (JNIEnv * theJNIEnv):

      myJNIEnv_ (theJNIEnv)
   {
   }

//------------------------------------------------------------------------------

WitJ::JniClient::JniClient (const JniClient & theJniClient):

      myJNIEnv_ (theJniClient.myJNIEnv_)
   {
   }

//------------------------------------------------------------------------------

WitJ::JniClient::~JniClient ()
   {
   }

//------------------------------------------------------------------------------

_jclass * WitJ::JniClient::newJClassGRef (
      const char * theClassName,
      JNIEnv *     theJNIEnv)
   {
   _jclass *  theJClLRef;
   _jobject * theJClGRef;

   theJClLRef = findJClass (theClassName, theJNIEnv);

   theJClGRef = theJNIEnv->NewGlobalRef (theJClLRef);

   EXCEPTION_ASSERT (theJClGRef != NULL);

   theJNIEnv->DeleteLocalRef (theJClLRef);

   return static_cast <_jclass *> (theJClGRef);
   }

//------------------------------------------------------------------------------

_jmethodID * WitJ::JniClient::getJMethodID (
      const char * theClassName,
      const char * theMethName,
      const char * theMethDesc,
      JNIEnv *     theJNIEnv)
   {
   _jclass *    theJClass;
   _jmethodID * theJMethodID;

   theJClass    = findJClass (theClassName, theJNIEnv);

   theJMethodID = theJNIEnv->GetMethodID (theJClass, theMethName, theMethDesc);

   throwAnyJavaException (theJNIEnv);

   theJNIEnv->DeleteLocalRef (theJClass);

   return theJMethodID;
   }

//------------------------------------------------------------------------------

_jmethodID * WitJ::JniClient::getStaticJMethodID (
      _jclass *    theJClass,
      const char * theMethName,
      const char * theMethDesc,
      JNIEnv *     theJNIEnv)
   {
   _jmethodID * theJMethodID;

   theJMethodID =
      theJNIEnv->GetStaticMethodID (theJClass, theMethName, theMethDesc);

   throwAnyJavaException (theJNIEnv);

   return theJMethodID;
   }

//------------------------------------------------------------------------------

_jstring * WitJ::JniClient::newJString (const char * theCString)
   {
   return newJString (theCString, myJNIEnv_);
   }

//------------------------------------------------------------------------------

_jclass * WitJ::JniClient::findJClass (
      const char * theClassName,
      JNIEnv *     theJNIEnv)
   {
   _jclass * theJClass;

   theJClass = theJNIEnv->FindClass (theClassName);

   throwAnyJavaException (theJNIEnv);

   return theJClass;
   }

//------------------------------------------------------------------------------

void WitJ::JniClient::throwAnyJavaException ()
   {
   throwAnyJavaException (myJNIEnv_);
   }

//------------------------------------------------------------------------------

void WitJ::JniClient::deleteLocalRef (_jobject * theLocalRef)
   {
   myJNIEnv_->DeleteLocalRef (theLocalRef);
   }
@


1.32
log
@Removed namespace JniUtil.
@
text
@a4 2
// Contains the implementation of the get{Class} global (namespace WitJ)
//    functions.
a11 2
_jfieldID *  WitJ::JniClient::ourMyCppObjectAsLongFid_ = NULL;

a22 15
   _jclass * theJClassForCppObjRep;

   EXCEPTION_ASSERT (ourMyCppObjectAsLongFid_ == NULL);

   theJClassForCppObjRep    = findJClass ("com/ibm/witj/CppObjRep", theJNIEnv);

   ourMyCppObjectAsLongFid_ =
      theJNIEnv->
         GetFieldID (
            theJClassForCppObjRep,
            "myCppObjectAsLong",
            "J");

   EXCEPTION_ASSERT (ourMyCppObjectAsLongFid_ != NULL);

a117 55
void WitJ::JniClient::transferTo (
      _jobject *   theCppObjRepJObj,
      JavaAccObj * theJavaAccObj,
      JNIEnv *     theJNIEnv)
   {
   jlong theJavaAccObjAsJLong;
   
   EXCEPTION_ASSERT (theCppObjRepJObj != NULL);
   EXCEPTION_ASSERT (theJavaAccObj    != NULL);

   theJavaAccObjAsJLong = reinterpret_cast <jlong> (theJavaAccObj);

   theJNIEnv->
      SetLongField (
         theCppObjRepJObj,
         ourMyCppObjectAsLongFid_,
         theJavaAccObjAsJLong);
   }

//------------------------------------------------------------------------------

void WitJ::JniClient::nullifyCppObjectPtr (
      _jobject * theCppObjRepJObj,
      JNIEnv *   theJNIEnv)
   {
   theJNIEnv->SetLongField (theCppObjRepJObj, ourMyCppObjectAsLongFid_, 0);

   throwAnyJavaException (theJNIEnv);
   }

//------------------------------------------------------------------------------

WitJ::JavaAccObj * WitJ::JniClient::getJavaAccObj (
      _jobject * theCppObjRepJObj,
      JNIEnv *   theJNIEnv)
   {
   jlong        theJavaAccObjAsJLong;
   JavaAccObj * theJavaAccObj;

   EXCEPTION_ASSERT (theCppObjRepJObj != NULL);

   theJavaAccObjAsJLong =
      theJNIEnv->GetLongField (theCppObjRepJObj, ourMyCppObjectAsLongFid_);

   theJavaAccObj = reinterpret_cast <JavaAccObj *> (theJavaAccObjAsJLong);

   EXCEPTION_ASSERT (theJavaAccObj != NULL);

   EXCEPTION_ASSERT (theJavaAccObj->isValid ());

   return theJavaAccObj;
   }

//------------------------------------------------------------------------------

a229 14
void WitJ::JniClient::throwAnyJavaException ()
   {
   throwAnyJavaException (myJNIEnv_);
   }

//------------------------------------------------------------------------------

void WitJ::JniClient::deleteLocalRef (_jobject * theLocalRef)
   {
   myJNIEnv_->DeleteLocalRef (theLocalRef);
   }

//------------------------------------------------------------------------------

d245 1
a245 3
WitJ::Coordinator * WitJ::getCoordinator (
      _jobject * theCoordJObj,
      JNIEnv *   theJNIEnv)
d247 1
a247 1
   return JniClient::getJavaAccObj (theCoordJObj, theJNIEnv)->asCoordinator ();
d252 1
a252 3
WitJ::Problem * WitJ::getProblem (
      _jobject * theProblemJObj,
      JNIEnv *   theJNIEnv)
d254 1
a254 95
   return JniClient::getJavaAccObj (theProblemJObj, theJNIEnv)->asProblem ();
   }

//------------------------------------------------------------------------------

WitJ::AttBldr * WitJ::getAttBldr (
      _jobject * theAttBldrJObj,
      JNIEnv *   theJNIEnv)
   {
   return JniClient::getJavaAccObj (theAttBldrJObj, theJNIEnv)->asAttBldr ();
   }

//------------------------------------------------------------------------------

WitJ::Att * WitJ::getAtt (
      _jobject * theAttJObj,
      JNIEnv *   theJNIEnv)
   {
   return JniClient::getJavaAccObj (theAttJObj, theJNIEnv)->asAtt ();
   }

//------------------------------------------------------------------------------

WitJ::MessageMgr * WitJ::getMessageMgr (
      _jobject * theMessageMgrJObj,
      JNIEnv *   theJNIEnv)
   {
   return
      JniClient::getJavaAccObj (theMessageMgrJObj, theJNIEnv)->asMessageMgr ();
   }

//------------------------------------------------------------------------------

WitJ::Component * WitJ::getComponent (
      _jobject * theComponentJObj,
      JNIEnv *   theJNIEnv)
   {
   return
      JniClient::getJavaAccObj (theComponentJObj, theJNIEnv)->asComponent ();
   }

//------------------------------------------------------------------------------

WitJ::Part * WitJ::getPart (
      _jobject * thePartJObj,
      JNIEnv *   theJNIEnv)
   {
   return JniClient::getJavaAccObj (thePartJObj, theJNIEnv)->asPart ();
   }

//------------------------------------------------------------------------------

WitJ::Demand * WitJ::getDemand (
      _jobject * theDemandJObj,
      JNIEnv *   theJNIEnv)
   {
   return JniClient::getJavaAccObj (theDemandJObj, theJNIEnv)->asDemand ();
   }

//------------------------------------------------------------------------------

WitJ::Operation * WitJ::getOperation (
      _jobject * theOperationJObj,
      JNIEnv *   theJNIEnv)
   {
   return
      JniClient::getJavaAccObj (theOperationJObj, theJNIEnv)->asOperation ();
   }

//------------------------------------------------------------------------------

WitJ::BomEntry * WitJ::getBomEntry (
      _jobject * theBomEntryJObj,
      JNIEnv *   theJNIEnv)
   {
   return JniClient::getJavaAccObj (theBomEntryJObj, theJNIEnv)->asBomEntry ();
   }

//------------------------------------------------------------------------------

WitJ::Substitute * WitJ::getSubstitute (
      _jobject * theSubstituteJObj,
      JNIEnv *   theJNIEnv)
   {
   return
      JniClient::getJavaAccObj (theSubstituteJObj, theJNIEnv)->asSubstitute ();
   }

//------------------------------------------------------------------------------

WitJ::BopEntry * WitJ::getBopEntry (
      _jobject * theBopEntryJObj,
      JNIEnv *   theJNIEnv)
   {
   return JniClient::getJavaAccObj (theBopEntryJObj, theJNIEnv)->asBopEntry ();
@


1.31
log
@intValue and doubleValue.
@
text
@d5 2
d330 112
@


1.30
log
@JniClient
@
text
@a19 2
_jmethodID * WitJ::JniClient::      intValueJMeth_ = NULL;
_jmethodID * WitJ::JniClient::   doubleValueJMeth_ = NULL;
a56 14

   intValueJMeth_ =
      getJMethodID (
         "java/lang/Integer",
         "intValue",
         "()I",
         theJNIEnv);

   doubleValueJMeth_ =
      getJMethodID (
         "java/lang/Double",
         "doubleValue",
         "()D",
         theJNIEnv);
a111 27
int WitJ::JniClient::intValue (_jobject * theIntegerJObj)
   {
   jint theJIntValue;

   theJIntValue = myJNIEnv_->CallIntMethod (theIntegerJObj, intValueJMeth_);

   throwAnyJavaException ();

   return theJIntValue;
   }

//------------------------------------------------------------------------------

double WitJ::JniClient::doubleValue (_jobject * theDoubleJObj)
   {
   jdouble theJdoubleValue;

   theJdoubleValue =
      myJNIEnv_->CallDoubleMethod (theDoubleJObj, doubleValueJMeth_);

   throwAnyJavaException ();

   return theJdoubleValue;
   }

//------------------------------------------------------------------------------

@


1.29
log
@Namespace JniUtil.
@
text
@d31 1
a31 1
   theJClassForCppObjRep    = findJClass (theJNIEnv, "com/ibm/witj/CppObjRep");
d42 3
a44 3
   ourStringJCl_  = newJClassGRef (theJNIEnv, "java/lang/String");
   ourIntegerJCl_ = newJClassGRef (theJNIEnv, "java/lang/Integer");
   ourDoubleJCl_  = newJClassGRef (theJNIEnv, "java/lang/Double");
a47 1
         theJNIEnv,
d50 2
a51 1
         "(I)Ljava/lang/Integer;");
a54 1
         theJNIEnv,
d57 2
a58 1
         "(D)Ljava/lang/Double;");
a61 1
         theJNIEnv,
d64 2
a65 1
         "()I");
a68 1
         theJNIEnv,
d71 2
a72 1
         "()D");
d249 7
d279 2
a280 2
      JNIEnv *     theJNIEnv,
      const char * theClassName)
d285 1
a285 1
   theJClLRef = findJClass (theJNIEnv, theClassName);
a297 15
_jclass * WitJ::JniClient::findJClass (
      JNIEnv *     theJNIEnv,
      const char * theClassName)
   {
   _jclass * theJClass;

   theJClass = theJNIEnv->FindClass (theClassName);

   throwAnyJavaException (theJNIEnv);

   return theJClass;
   }

//------------------------------------------------------------------------------

a298 1
      JNIEnv *     theJNIEnv,
d301 2
a302 1
      const char * theMethDesc)
d307 1
a307 1
   theJClass    = findJClass (theJNIEnv, theClassName);
a320 1
      JNIEnv *     theJNIEnv,
d323 2
a324 1
      const char * theMethDesc)
d356 15
@


1.28
log
@JniAsst
@
text
@d77 3
a79 1
_jstring * WitJ::JniClient::newJString (const char * theCString)
d83 1
a83 1
   ABORTING_ASSERT (theCString != NULL);
d85 1
a85 1
   theJString = myJNIEnv_->NewStringUTF (theCString);
d87 1
a87 1
   throwAnyJavaException ();
d94 3
a96 1
_jobject * WitJ::JniClient::matchingIntegerJObj (int theInt)
a97 1
   jint       theJInt;
a99 2
   theJInt    = theInt;

d101 2
a102 2
      myJNIEnv_->
         CallStaticObjectMethod (ourIntegerJCl_, valueOfIntegerJMeth_, theJInt);
d104 1
a104 1
   throwAnyJavaException ();
d111 3
a113 1
_jobject * WitJ::JniClient::matchingDoubleJObj (double theDbl)
a114 1
   jdouble    theJDbl;
a116 2
   theJDbl    = theDbl;

d118 2
a119 2
      myJNIEnv_->
         CallStaticObjectMethod (ourDoubleJCl_, valueOfDoubleJMeth_, theJDbl);
d121 1
a121 1
   throwAnyJavaException ();
d180 2
a181 1
      JavaAccObj * theJavaAccObj)
d190 1
a190 1
   myJNIEnv_->
d199 3
a201 1
void WitJ::JniClient::nullifyCppObjectPtr (_jobject * theCppObjRepJObj)
d203 1
a203 5
   myJNIEnv_->
      SetLongField (
         theCppObjRepJObj,
         ourMyCppObjectAsLongFid_,
         0);
d205 1
a205 1
   throwAnyJavaException ();
d210 3
a212 1
WitJ::JavaAccObj * WitJ::JniClient::getJavaAccObj (_jobject * theCppObjRepJObj)
d220 1
a220 1
      myJNIEnv_->GetLongField (theCppObjRepJObj, ourMyCppObjectAsLongFid_);
d233 16
d346 1
a346 1
void WitJ::JniClient::throwAnyJavaException ()
d348 1
a348 1
   throwAnyJavaException (myJNIEnv_);
d353 1
a353 1
void WitJ::JniClient::throwAnyJavaException (JNIEnv * theJNIEnv)
d355 1
a355 10
   _jthrowable * theJThrow;

   theJThrow = theJNIEnv->ExceptionOccurred ();

   if (theJThrow != NULL)
      {
      theJNIEnv->ExceptionClear ();

      throw theJThrow;
      }
@


1.27
log
@Revised set/get ObjectiveList for ArrayList <String>.
@
text
@d7 1
a7 1
#include <NativeCall.h>
@


1.26
log
@C++ class JavaObjRep.
@
text
@a76 29
_jobjectArray * WitJ::JniClient::newJStrArray (
      const char * const * theCStrVec,
      int                  theLength)
   {
   _jobjectArray * theJObjArr;
   int             theIdx;
   _jstring *      theJString;

   theJObjArr =
      getJNIEnv ()->NewObjectArray (theLength, ourStringJCl_, NULL);

   throwAnyJavaException ();

   for (theIdx = 0; theIdx < theLength; theIdx ++)
      {
      theJString = newJString (theCStrVec[theIdx]);

      getJNIEnv ()->SetObjectArrayElement (theJObjArr, theIdx, theJString);
      
      throwAnyJavaException ();

      deleteLocalRef (theJString);
      }

   return theJObjArr;
   }

//------------------------------------------------------------------------------

@


1.25
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@d14 8
a21 9
_jclass *    WitJ::JniClient:: ourStringJCl_           = NULL;
_jclass *    WitJ::JniClient::ourIntegerJCl_           = NULL;
_jclass *    WitJ::JniClient:: ourDoubleJCl_           = NULL;

_jmethodID * WitJ::JniClient::valueOfIntegerJMeth_     = NULL;
_jmethodID * WitJ::JniClient:: valueOfDoubleJMeth_     = NULL;
_jmethodID * WitJ::JniClient::      intValueJMeth_     = NULL;
_jmethodID * WitJ::JniClient::   doubleValueJMeth_     = NULL;
_jmethodID * WitJ::JniClient::  getDemandCORJMeth_     = NULL;
a72 7

   getDemandCORJMeth_ =
      getJMethodID (
         theJNIEnv,
         "com/ibm/witj/Demand",
         "getDemandCOR",
         "()Lcom/ibm/witj/DemandCOR;");
a183 17
WitJ::Demand * WitJ::JniClient::getDemand (_jobject * theDemandJObj)
   {
   _jobject * theDemandCORJObj;
   Demand *   theDemand;

   theDemandCORJObj =
      myJNIEnv_->CallObjectMethod (theDemandJObj, getDemandCORJMeth_);

   theDemand = getJavaAccObj (theDemandCORJObj)->asDemand ();

   deleteLocalRef (theDemandCORJObj);

   return theDemand;
   }

//------------------------------------------------------------------------------

@


1.24
log
@getComponentLRef
@
text
@a8 1
#include     <CORJOR.h>
d129 1
a129 1
_jobject * WitJ::JniClient::matchingIntegerLRef (int theInt)
d147 1
a147 1
_jobject * WitJ::JniClient::matchingDoubleLRef (double theDbl)
d232 1
a232 1
void WitJ::JniClient::associate (
d236 1
a236 2
   jlong    theJavaAccObjAsJLong;
   CORJOR * theCORJOR;
a247 4

   theCORJOR = new CORJOR (* this, theCppObjRepJObj);

   theJavaAccObj->acquire (theCORJOR);
@


1.23
log
@AllocTripleALJOR
@
text
@d130 1
a130 1
_jobject * WitJ::JniClient::matchingIntegerJObj (int theInt)
d148 1
a148 1
_jobject * WitJ::JniClient::matchingDoubleJObj (double theDbl)
@


1.22
log
@Revised the arguments to eqHeurAlloc.
@
text
@d132 1
a132 1
   jint       theJint;
d135 1
a135 1
   theJint    = theInt;
d139 1
a139 1
         CallStaticObjectMethod (ourIntegerJCl_, valueOfIntegerJMeth_, theJint);
d150 1
a150 1
   jdouble    theJdbl;
d153 1
a153 1
   theJdbl    = theDbl;
d157 1
a157 1
         CallStaticObjectMethod (ourDoubleJCl_, valueOfDoubleJMeth_, theJdbl);
d168 1
a168 1
   jint theJintValue;
d170 1
a170 1
   theJintValue = myJNIEnv_->CallIntMethod (theIntegerJObj, intValueJMeth_);
d174 1
a174 1
   return theJintValue;
d314 20
a415 20

//------------------------------------------------------------------------------

_jclass * WitJ::JniClient::newJClassGRef (
      JNIEnv *     theJNIEnv,
      const char * theClassName)
   {
   _jclass *  theJClLRef;
   _jobject * theJClGRef;

   theJClLRef = findJClass (theJNIEnv, theClassName);

   theJClGRef = theJNIEnv->NewGlobalRef (theJClLRef);

   EXCEPTION_ASSERT (theJClGRef != NULL);

   theJNIEnv->DeleteLocalRef (theJClLRef);

   return static_cast <_jclass *> (theJClGRef);
   }
@


1.21
log
@Problem.getCriticalList ()
@
text
@d8 2
d13 1
a13 3
_jclass *    WitJ::JniClient::ourStringJCl_        = NULL;
_jclass *    WitJ::JniClient::ourIntegerJCl_       = NULL;
_jclass *    WitJ::JniClient::ourDoubleJCl_        = NULL;
d15 9
a23 2
_jmethodID * WitJ::JniClient::valueOfIntegerJMeth_ = NULL;
_jmethodID * WitJ::JniClient::valueOfDoubleJMeth_  = NULL;
d29 5
a33 1
   EXCEPTION_ASSERT (ourStringJCl_ == NULL);
d35 12
a46 3
   ourStringJCl_  = findJClassGRef (theJNIEnv, "java/lang/String");
   ourIntegerJCl_ = findJClassGRef (theJNIEnv, "java/lang/Integer");
   ourDoubleJCl_  = findJClassGRef (theJNIEnv, "java/lang/Double");
d49 2
a50 1
      theJNIEnv->GetStaticMethodID (
a54 2
   throwAnyJavaException (theJNIEnv);

d56 2
a57 1
      theJNIEnv->GetStaticMethodID (
d62 20
a81 20
   throwAnyJavaException (theJNIEnv);
   }

//------------------------------------------------------------------------------

_jdoubleArray * WitJ::JniClient::newJDblArray (
      double * theDblCVec,
      int      theLength)
   {
   _jdoubleArray * theJDblArr;

   theJDblArr = getJNIEnv ()->NewDoubleArray (theLength);

   throwAnyJavaException ();

   getJNIEnv ()->SetDoubleArrayRegion (theJDblArr, 0, theLength, theDblCVec);

   throwAnyJavaException ();

   return theJDblArr;
d130 1
a130 1
_jobject * WitJ::JniClient::anIntegerJObjFor (int theInt)
d148 1
a148 1
_jobject * WitJ::JniClient::aDoubleJObjFor (double theDbl)
d166 44
d233 59
d331 22
d359 2
a360 1
   theJMethodID = theJNIEnv->GetMethodID (theJClass, theMethName, theMethDesc);
d399 1
a399 1
_jclass * WitJ::JniClient::findJClassGRef (
@


1.20
log
@Replaced calls to ctors for Java Integer and Double with valueOf.
@
text
@d24 3
a26 5
   ourStringJCl_  = findJClass (theJNIEnv, "java/lang/String");
   ourIntegerJCl_ = findJClass (theJNIEnv, "java/lang/Integer");
   ourDoubleJCl_  = findJClass (theJNIEnv, "java/lang/Double");

   throwAnyJavaException (theJNIEnv);
d191 32
d253 1
a253 1
_jclass * WitJ::JniClient::findJClass (
d260 1
a260 3
   theJClLRef = theJNIEnv->FindClass (theClassName);

   throwAnyJavaException (theJNIEnv);
@


1.19
log
@CPLEX
@
text
@d11 6
a16 5
_jclass *    WitJ::JniClient::ourJClForString_        = NULL;
_jclass *    WitJ::JniClient::ourJClForInteger_       = NULL;
_jclass *    WitJ::JniClient::ourJClForDouble_        = NULL;
_jmethodID * WitJ::JniClient::ourJMethForIntegerCtor_ = NULL;
_jmethodID * WitJ::JniClient::ourJMethForDoubleCtor_  = NULL;
d22 5
a26 1
   EXCEPTION_ASSERT (ourJClForString_ == NULL);
d28 1
a28 3
   ourJClForString_  = findJClass (theJNIEnv, "java/lang/String");
   ourJClForInteger_ = findJClass (theJNIEnv, "java/lang/Integer");
   ourJClForDouble_  = findJClass (theJNIEnv, "java/lang/Double");
d30 5
a34 2
   ourJMethForIntegerCtor_ =
      theJNIEnv->GetMethodID (ourJClForInteger_, "<init>", "(I)V");
d38 5
a42 2
   ourJMethForDoubleCtor_ =
      theJNIEnv->GetMethodID (ourJClForDouble_,  "<init>", "(D)V");
d77 1
a77 1
      getJNIEnv ()->NewObjectArray (theLength, ourJClForString_, NULL);
d112 1
a112 1
_jobject * WitJ::JniClient::newJInteger (int theInt)
d114 2
a115 1
   _jobject * theJInteger;
d117 3
a119 1
   theJInteger =
d121 1
a121 4
         NewObject (
            ourJClForInteger_,
            ourJMethForIntegerCtor_,
            theInt);
d125 1
a125 1
   return theJInteger;
d130 1
a130 1
_jobject * WitJ::JniClient::newJDouble (double theDbl)
d132 4
a135 1
   _jobject * theJDouble;
d137 1
a137 1
   theJDouble =
d139 1
a139 4
         NewObject (
            ourJClForDouble_,
            ourJMethForDoubleCtor_,
            theDbl);
d143 1
a143 1
   return theJDouble;
@


1.18
log
@CPLEX
@
text
@d13 1
d15 1
d25 1
d31 5
d121 18
@


1.17
log
@CPLEX
@
text
@d32 1
a32 1
_jdoubleArray * WitJ::JniClient::makeJDblArray (
d51 1
a51 1
_jobjectArray * WitJ::JniClient::makeJStrArray (
d66 1
a66 1
      theJString = makeJString (theCStrVec[theIdx]);
d80 1
a80 1
_jstring * WitJ::JniClient::makeJString (const char * theCString)
d95 1
a95 1
_jobject * WitJ::JniClient::makeJInteger (int theInt)
d119 1
a119 1
   theJString  = makeJString (theCString);
@


1.16
log
@CPLEX
@
text
@d11 3
a13 1
_jclass * WitJ::JniClient::ourJClForString_ = NULL;
d19 9
a27 1
   findJClForString (theJNIEnv);
d95 18
d188 3
a190 1
void WitJ::JniClient::findJClForString (JNIEnv * theJNIEnv)
d193 1
a193 3
   _jobject * theJClWGRef;

   EXCEPTION_ASSERT (ourJClForString_ == NULL);
d195 1
a195 1
   theJClLRef  = theJNIEnv->FindClass ("java/lang/String");
d199 1
a199 1
   theJClWGRef = theJNIEnv->NewWeakGlobalRef (theJClLRef);
d201 1
a201 1
   throwAnyJavaException (theJNIEnv);
d205 1
a205 1
   ourJClForString_ = static_cast <_jclass *> (theJClWGRef);
@


1.15
log
@CPLEX
@
text
@d15 1
a15 1
void WitJ::JniClient::setUpJni (NativeCall & theCall)
d17 1
a17 1
   findJClForString (theCall);
d160 1
a160 1
void WitJ::JniClient::findJClForString (NativeCall & theCall)
d167 1
a167 1
   theJClLRef  = theCall.getJNIEnv ()->FindClass ("java/lang/String");
d169 1
a169 1
   theCall.throwAnyJavaException ();
d171 1
a171 1
   theJClWGRef = theCall.getJNIEnv ()->NewWeakGlobalRef (theJClLRef);
d173 1
a173 1
   theCall.throwAnyJavaException ();
d175 1
a175 1
   theCall.deleteLocalRef (theJClLRef);
@


1.14
log
@Multi-Obj Mode.
@
text
@d11 11
a44 1
   _jclass *       theJClForString;
d49 2
a50 5
   theJClForString = getJNIEnv ()->FindClass ("java/lang/String");

   throwAnyJavaException ();

   theJObjArr = getJNIEnv ()->NewObjectArray (theLength, theJClForString, NULL);
a53 2
   deleteLocalRef (theJClForString);

d157 22
@


1.13
log
@Detection of  non-UFT-8 strings.
@
text
@d7 1
a7 1
#include <JniClient.h>
d30 35
@


1.12
log
@PIP
@
text
@d45 23
@


1.11
log
@Implemented getPipSeq.
@
text
@a29 17
_jintArray * WitJ::JniClient::makeJIntArray (int * theIntCVec, int theLength)
   {
   _jintArray * theJIntArr;

   theJIntArr = getJNIEnv ()->NewIntArray (theLength);

   throwAnyJavaException ();

   getJNIEnv ()->SetIntArrayRegion (theJIntArr, 0, theLength, theIntCVec);

   throwAnyJavaException ();

   return theJIntArr;
   }

//------------------------------------------------------------------------------

@


1.10
log
@Added code to handle memory errors in makeJString.
@
text
@d11 36
@


1.9
log
@Minor revision.
@
text
@d19 1
a19 2
   if (theJString == NULL)
      abortForMemory ("NewStringUTF");
d48 1
a48 1
void WitJ::JniClient::throwOnJavaException ()
d50 1
a50 1
   throwOnJavaException (myJNIEnv_);
d55 1
a55 1
void WitJ::JniClient::throwOnJavaException (JNIEnv * theJNIEnv)
@


1.8
log
@Replaced class JavaExcException with the throwing of a _jthrowable pointer.
@
text
@a71 19
void WitJ::JniClient::abortOnJavaException ()
   {
   abortOnJavaException (myJNIEnv_);
   }

//------------------------------------------------------------------------------

void WitJ::JniClient::abortOnJavaException (JNIEnv * theJNIEnv)
   {
   if (theJNIEnv->ExceptionCheck ())
      {
      theJNIEnv->ExceptionDescribe ();

      ABORTING_ASSERT (false);
      }
   }

//------------------------------------------------------------------------------

@


1.7
log
@Added code to handle Java exceptions raised during the execution of JNI
   functions.
@
text
@d7 1
a7 2
#include        <JniClient.h>
#include <JavaExcException.h>
d58 1
a58 1
   _jthrowable * theJThrowable;
d60 1
a60 1
   theJThrowable = theJNIEnv->ExceptionOccurred ();
d62 1
a62 1
   if (theJThrowable != NULL)
a63 2
      JavaExcException theExc (theJThrowable);

d66 1
a66 1
      throw theExc;
@


1.6
log
@Implemented EXCEPTION_ASSERT and ABORTING_ASSERT.
@
text
@d7 2
a8 1
#include <JniClient.h>
d50 1
a50 1
void WitJ::JniClient::checkForJniException ()
d52 1
a52 1
   checkForJniException (myJNIEnv_);
d57 26
a82 1
void WitJ::JniClient::checkForJniException (JNIEnv * theJNIEnv)
@


1.5
log
@Updated some comments.
@
text
@d15 1
a15 1
   WITJ_ASSERT (theCString != NULL);
d62 1
a62 1
      WITJ_ASSERT (false);
@


1.4
log
@Changed to all upper case for the names of macros.
@
text
@d4 1
a4 1
// Contains the definition of class JniClient.
@


1.3
log
@Removed C++ class JniLocalFrame.
@
text
@d15 1
a15 1
   witjAssert (theCString != NULL);
d62 1
a62 1
      witjAssert (false);
@


1.2
log
@Revised class StringWoa.
@
text
@d65 7
@


1.1
log
@Changed name of C++ class JniWrapper to JniClient.
@
text
@a7 1
#include <StringWoa.h>
d11 1
a11 1
_jstring * WitJ::JniClient::makeJString (const StringWoa & theStringWoa)
d15 1
a15 1
   witjAssert (theStringWoa.getCString () != NULL);
d17 1
a17 1
   theJString = myJNIEnv_->NewStringUTF (theStringWoa.getCString ());
@

