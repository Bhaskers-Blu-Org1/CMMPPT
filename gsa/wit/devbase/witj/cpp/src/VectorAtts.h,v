head	1.18;
access;
symbols;
locks; strict;
comment	@ * @;


1.18
date	2011.05.04.22.49.05;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.04.13.16.00.18;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.04.01.19.23.38;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.02.25.16.06.54;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2010.04.20.20.55.08;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.03.13.19.32.19;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.15.17.28.49;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.15.17.17.40;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.03.18.28.49;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.11.21.15.49.15;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.10.14.22.04.38;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.10.07.18.50.25;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.06.22.14.03;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.06.14.42.39;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.10.01.22.55.33;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.26.22.50.17;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.01.16.29.32;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.07.22.21.08.59;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.18
log
@setValue ==> set
getValue ==> get
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File VectorAtts.h.
//
// Contains the declarations of the following class templates:
//
//    ProblemVectorAtt <Elem>
//       PartVectorAtt <Elem>
//     DemandVectorAtt <Elem>
//        OpnVectorAtt <Elem>
//        BomVectorAtt <Elem>
//        SubVectorAtt <Elem>
//        BopVectorAtt <Elem>
//------------------------------------------------------------------------------

#ifndef VectorAtts_h
#define VectorAtts_h

#include <Att.h>

#include <wit.h>

//------------------------------------------------------------------------------
// Class template ProblemVectorAtt <Elem>
//
// Represents an attribute of type time-vector of Elems associated with the
// whole Problem.
//
// Class Hierarchy:
//
// JavaAccObj
//    Att
//       ProblemVectorAtt <Elem>
//
// The implementation is in VectorAtts.C.
//------------------------------------------------------------------------------

namespace WitJ
{
template <typename Elem>
      class ProblemVectorAtt: public Att
   {
   //---------------------------------------------------------------------------
   // Local typedefs.
   //
   // SetFuncPtr:
   //    A pointer to a WIT API function that sets      the value of an
   //    attribute of type time-vector of Elems associated with the whole
   //    Problem.
   //
   // GetFuncPtr:
   //    A pointer to a WIT API function that retrieves the value of an
   //    attribute of type time-vector of Elems associated with the whole
   //    Problem.
   //---------------------------------------------------------------------------

   typedef
      WIT_DECLSPEC witReturnCode STDCALL (* SetFuncPtr) (
         WitRun * const,
         const Elem * const);

   typedef
      WIT_DECLSPEC witReturnCode STDCALL (* GetFuncPtr) (
         WitRun * const,
         Elem * *);

   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit ProblemVectorAtt (
         AttBldr *    theAttBldr,
         const char * theName,
         SetFuncPtr   theSetFuncPtr,
         GetFuncPtr   theGetFuncPtr);
      //
      // Constructor.

   virtual ~ProblemVectorAtt ();
      //
      // Destructor.

   virtual void set              (Component *, const Elem *);
   virtual void get              (Component *, ArrayJOR <Elem> &);
   virtual bool isModifiable     ();
   virtual bool valueTypeMatches (const std::string &);
      //
      // Overrides from class Att.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   ProblemVectorAtt              (const ProblemVectorAtt &);
   ProblemVectorAtt & operator = (const ProblemVectorAtt &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   const SetFuncPtr mySetFuncPtr_;
      //
      // A pointer to the WIT API function that sets      the value of the
      // attribute represented by this ProblemVectorAtt.
      // NULL, if this ProblemVectorAtt represents an output attribute.

   const GetFuncPtr myGetFuncPtr_;
      //
      // A pointer to the WIT API function that retrieves the value of the
      // attribute represented by this ProblemVectorAtt.
   };
};
//
// End of namespace WitJ.

//------------------------------------------------------------------------------
// Class template PartVectorAtt <Elem>
//
// Represents an attribute of type time-vector of Elems associated with a Part.
//
// Class Hierarchy:
//
// JavaAccObj
//    Att
//       PartVectorAtt <Elem>
//
// The implementation is in VectorAtts.C.
//------------------------------------------------------------------------------

namespace WitJ
{
template <typename Elem>
      class PartVectorAtt: public Att
   {
   //---------------------------------------------------------------------------
   // Local typedefs.
   //
   // SetFuncPtr:
   //    A pointer to a WIT API function that sets      the value of an
   //    attribute of type time-vector of Elems associated with a Part.
   //
   // GetFuncPtr:
   //    A pointer to a WIT API function that retrieves the value of an
   //    attribute of type time-vector of Elems associated with a Part.
   //---------------------------------------------------------------------------

   typedef
      WIT_DECLSPEC witReturnCode STDCALL (* SetFuncPtr) (
         WitRun * const,
         const char * const,
         const Elem * const);

   typedef
      WIT_DECLSPEC witReturnCode STDCALL (* GetFuncPtr) (
         WitRun * const,
         const char * const,
         Elem * *);

   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit PartVectorAtt (
         AttBldr *    theAttBldr,
         const char * theName,
         SetFuncPtr   theSetFuncPtr,
         GetFuncPtr   theGetFuncPtr);
      //
      // Constructor.

   virtual ~PartVectorAtt ();
      //
      // Destructor.

   virtual void set              (Component *, const Elem *);
   virtual void get              (Component *, ArrayJOR <Elem> &);
   virtual bool isModifiable     ();
   virtual bool valueTypeMatches (const std::string &);
      //
      // Overrides from class Att.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   PartVectorAtt              (const PartVectorAtt &);
   PartVectorAtt & operator = (const PartVectorAtt &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   const SetFuncPtr mySetFuncPtr_;
      //
      // A pointer to the WIT API function that sets      the value of the
      // attribute represented by this PartVectorAtt.
      // NULL, if this PartVectorAtt represents an output attribute.

   const GetFuncPtr myGetFuncPtr_;
      //
      // A pointer to the WIT API function that retrieves the value of the
      // attribute represented by this PartVectorAtt.
   };
};
//
// End of namespace WitJ.

//------------------------------------------------------------------------------
// Class template DemandVectorAtt <Elem>
//
// Represents an attribute of type time-vector of Elems associated with a
// Demand.
//
// Class Hierarchy:
//
// JavaAccObj
//    Att
//       DemandVectorAtt <Elem>
//
// The implementation is in VectorAtts.C.
//------------------------------------------------------------------------------

namespace WitJ
{
template <typename Elem>
      class DemandVectorAtt: public Att
   {
   //---------------------------------------------------------------------------
   // Local typedefs.
   //
   // SetFuncPtr:
   //    A pointer to a WIT API function that sets      the value of an
   //    attribute of type time-vector of Elems associated with a Demand.
   //
   // GetFuncPtr:
   //    A pointer to a WIT API function that retrieves the value of an
   //    attribute of type time-vector of Elems associated with a Demand.
   //---------------------------------------------------------------------------

   typedef
      WIT_DECLSPEC witReturnCode STDCALL (* SetFuncPtr) (
         WitRun * const,
         const char * const,
         const char * const,
         const Elem * const);

   typedef
      WIT_DECLSPEC witReturnCode STDCALL (* GetFuncPtr) (
         WitRun * const,
         const char * const,
         const char * const,
         Elem * *);

   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit DemandVectorAtt (
         AttBldr *    theAttBldr,
         const char * theName,
         SetFuncPtr   theSetFuncPtr,
         GetFuncPtr   theGetFuncPtr);
      //
      // Constructor.

   virtual ~DemandVectorAtt ();
      //
      // Destructor.

   virtual void set              (Component *, const Elem *);
   virtual void get              (Component *, ArrayJOR <Elem> &);
   virtual bool isModifiable     ();
   virtual bool valueTypeMatches (const std::string &);
      //
      // Overrides from class Att.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   DemandVectorAtt              (const DemandVectorAtt &);
   DemandVectorAtt & operator = (const DemandVectorAtt &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   const SetFuncPtr mySetFuncPtr_;
      //
      // A pointer to the WIT API function that sets      the value of the
      // attribute represented by this DemandVectorAtt.
      // NULL, if this DemandVectorAtt represents an output attribute.

   const GetFuncPtr myGetFuncPtr_;
      //
      // A pointer to the WIT API function that retrieves the value of the
      // attribute represented by this DemandVectorAtt.
   };
};
//
// End of namespace WitJ.

//------------------------------------------------------------------------------
// Class template OpnVectorAtt <Elem>
//
// Represents an attribute of type time-vector of Elems associated with an
// Operation.
//
// Class Hierarchy:
//
// JavaAccObj
//    Att
//       OpnVectorAtt <Elem>
//
// The implementation is in VectorAtts.C.
//------------------------------------------------------------------------------

namespace WitJ
{
template <typename Elem>
      class OpnVectorAtt: public Att
   {
   //---------------------------------------------------------------------------
   // Local typedefs.
   //
   // SetFuncPtr:
   //    A pointer to a WIT API function that sets      the value of an
   //    attribute of type time-vector of Elems associated with an Operation.
   //
   // GetFuncPtr:
   //    A pointer to a WIT API function that retrieves the value of an
   //    attribute of type time-vector of Elems associated with an Operation.
   //---------------------------------------------------------------------------

   typedef
      WIT_DECLSPEC witReturnCode STDCALL (* SetFuncPtr) (
         WitRun * const,
         const char * const,
         const Elem * const);

   typedef
      WIT_DECLSPEC witReturnCode STDCALL (* GetFuncPtr) (
         WitRun * const,
         const char * const,
         Elem * *);

   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit OpnVectorAtt (
         AttBldr *    theAttBldr,
         const char * theName,
         SetFuncPtr   theSetFuncPtr,
         GetFuncPtr   theGetFuncPtr);
      //
      // Constructor.

   virtual ~OpnVectorAtt ();
      //
      // Destructor.

   virtual void set              (Component *, const Elem *);
   virtual void get              (Component *, ArrayJOR <Elem> &);
   virtual bool isModifiable     ();
   virtual bool valueTypeMatches (const std::string &);
      //
      // Overrides from class Att.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   OpnVectorAtt              (const OpnVectorAtt &);
   OpnVectorAtt & operator = (const OpnVectorAtt &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   const SetFuncPtr mySetFuncPtr_;
      //
      // A pointer to the WIT API function that sets      the value of the
      // attribute represented by this OpnVectorAtt.
      // NULL, if this OpnVectorAtt represents an output attribute.

   const GetFuncPtr myGetFuncPtr_;
      //
      // A pointer to the WIT API function that retrieves the value of the
      // attribute represented by this OpnVectorAtt.
   };
};
//
// End of namespace WitJ.

//------------------------------------------------------------------------------
// Class template BomEntVectorAtt <Elem>
//
// Represents an attribute of type time-vector of Elems associated with a
// BomEntry.
//
// Class Hierarchy:
//
// JavaAccObj
//    Att
//       BomEntVectorAtt <Elem>
//
// The implementation is in VectorAtts.C.
//------------------------------------------------------------------------------

namespace WitJ
{
template <typename Elem>
      class BomEntVectorAtt: public Att
   {
   //---------------------------------------------------------------------------
   // Local typedefs.
   //
   // SetFuncPtr:
   //    A pointer to a WIT API function that sets      the value of an
   //    attribute of type time-vector of Elems associated with a BomEntry.
   //
   // GetFuncPtr:
   //    A pointer to a WIT API function that retrieves the value of an
   //    attribute of type time-vector of Elems associated with a BomEntry.
   //---------------------------------------------------------------------------

   typedef
      WIT_DECLSPEC witReturnCode STDCALL (* SetFuncPtr) (
         WitRun * const,
         const char * const,
         const int,
         const Elem * const);

   typedef
      WIT_DECLSPEC witReturnCode STDCALL (* GetFuncPtr) (
         WitRun * const,
         const char * const,
         const int,
         Elem * *);

   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit BomEntVectorAtt (
         AttBldr *    theAttBldr,
         const char * theName,
         SetFuncPtr   theSetFuncPtr,
         GetFuncPtr   theGetFuncPtr);
      //
      // Constructor.

   virtual ~BomEntVectorAtt ();
      //
      // Destructor.

   virtual void set              (Component *, const Elem *);
   virtual void get              (Component *, ArrayJOR <Elem> &);
   virtual bool isModifiable     ();
   virtual bool valueTypeMatches (const std::string &);
      //
      // Overrides from class Att.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   BomEntVectorAtt              (const BomEntVectorAtt &);
   BomEntVectorAtt & operator = (const BomEntVectorAtt &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   const SetFuncPtr mySetFuncPtr_;
      //
      // A pointer to the WIT API function that sets      the value of the
      // attribute represented by this BomEntVectorAtt.
      // NULL, if this BomEntVectorAtt represents an output attribute.

   const GetFuncPtr myGetFuncPtr_;
      //
      // A pointer to the WIT API function that retrieves the value of the
      // attribute represented by this BomEntVectorAtt.
   };
};
//
// End of namespace WitJ.

//------------------------------------------------------------------------------
// Class template SubVectorAtt <Elem>
//
// Represents an attribute of type time-vector of Elems associated with a
// Substitute.
//
// Class Hierarchy:
//
// JavaAccObj
//    Att
//       SubVectorAtt <Elem>
//
// The implementation is in VectorAtts.C.
//------------------------------------------------------------------------------

namespace WitJ
{
template <typename Elem>
      class SubVectorAtt: public Att
   {
   //---------------------------------------------------------------------------
   // Local typedefs.
   //
   // SetFuncPtr:
   //    A pointer to a WIT API function that sets      the value of an
   //    attribute of type time-vector of Elems associated with a Substitute.
   //
   // GetFuncPtr:
   //    A pointer to a WIT API function that retrieves the value of an
   //    attribute of type time-vector of Elems associated with a Substitute.
   //---------------------------------------------------------------------------

   typedef
      WIT_DECLSPEC witReturnCode STDCALL (* SetFuncPtr) (
         WitRun * const,
         const char * const,
         const int,
         const int,
         const Elem * const);

   typedef
      WIT_DECLSPEC witReturnCode STDCALL (* GetFuncPtr) (
         WitRun * const,
         const char * const,
         const int,
         const int,
         Elem * *);

   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit SubVectorAtt (
         AttBldr *    theAttBldr,
         const char * theName,
         SetFuncPtr   theSetFuncPtr,
         GetFuncPtr   theGetFuncPtr);
      //
      // Constructor.

   virtual ~SubVectorAtt ();
      //
      // Destructor.

   virtual void set              (Component *, const Elem *);
   virtual void get              (Component *, ArrayJOR <Elem> &);
   virtual bool isModifiable     ();
   virtual bool valueTypeMatches (const std::string &);
      //
      // Overrides from class Att.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   SubVectorAtt              (const SubVectorAtt &);
   SubVectorAtt & operator = (const SubVectorAtt &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   const SetFuncPtr mySetFuncPtr_;
      //
      // A pointer to the WIT API function that sets      the value of the
      // attribute represented by this SubVectorAtt.
      // NULL, if this SubVectorAtt represents an output attribute.

   const GetFuncPtr myGetFuncPtr_;
      //
      // A pointer to the WIT API function that retrieves the value of the
      // attribute represented by this SubVectorAtt.
   };
};
//
// End of namespace WitJ.

//------------------------------------------------------------------------------
// Class template BopEntVectorAtt <Elem>
//
// Represents an attribute of type time-vector of Elems associated with a
// BopEntry.
//
// Class Hierarchy:
//
// JavaAccObj
//    Att
//       BopEntVectorAtt <Elem>
//
// The implementation is in VectorAtts.C.
//------------------------------------------------------------------------------

namespace WitJ
{
template <typename Elem>
      class BopEntVectorAtt: public Att
   {
   //---------------------------------------------------------------------------
   // Local typedefs.
   //
   // SetFuncPtr:
   //    A pointer to a WIT API function that sets      the value of an
   //    attribute of type time-vector of Elems associated with a BopEntry.
   //
   // GetFuncPtr:
   //    A pointer to a WIT API function that retrieves the value of an
   //    attribute of type time-vector of Elems associated with a BopEntry.
   //---------------------------------------------------------------------------

   typedef
      WIT_DECLSPEC witReturnCode STDCALL (* SetFuncPtr) (
         WitRun * const,
         const char * const,
         const int,
         const Elem * const);

   typedef
      WIT_DECLSPEC witReturnCode STDCALL (* GetFuncPtr) (
         WitRun * const,
         const char * const,
         const int,
         Elem * *);

   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit BopEntVectorAtt (
         AttBldr *    theAttBldr,
         const char * theName,
         SetFuncPtr   theSetFuncPtr,
         GetFuncPtr   theGetFuncPtr);
      //
      // Constructor.

   virtual ~BopEntVectorAtt ();
      //
      // Destructor.

   virtual void set              (Component *, const Elem *);
   virtual void get              (Component *, ArrayJOR <Elem> &);
   virtual bool isModifiable     ();
   virtual bool valueTypeMatches (const std::string &);
      //
      // Overrides from class Att.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   BopEntVectorAtt              (const BopEntVectorAtt &);
   BopEntVectorAtt & operator = (const BopEntVectorAtt &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   const SetFuncPtr mySetFuncPtr_;
      //
      // A pointer to the WIT API function that sets      the value of the
      // attribute represented by this BopEntVectorAtt.
      // NULL, if this BopEntVectorAtt represents an output attribute.

   const GetFuncPtr myGetFuncPtr_;
      //
      // A pointer to the WIT API function that retrieves the value of the
      // attribute represented by this BopEntVectorAtt.
   };
};
//
// End of namespace WitJ.

#endif
@


1.17
log
@ArrayJOR classes
@
text
@d84 2
a85 2
   virtual void setValue         (Component *, const Elem *);
   virtual void getValue         (Component *, ArrayJOR <Elem> &);
d182 2
a183 2
   virtual void setValue         (Component *, const Elem *);
   virtual void getValue         (Component *, ArrayJOR <Elem> &);
d283 2
a284 2
   virtual void setValue         (Component *, const Elem *);
   virtual void getValue         (Component *, ArrayJOR <Elem> &);
d382 2
a383 2
   virtual void setValue         (Component *, const Elem *);
   virtual void getValue         (Component *, ArrayJOR <Elem> &);
d483 2
a484 2
   virtual void setValue         (Component *, const Elem *);
   virtual void getValue         (Component *, ArrayJOR <Elem> &);
d586 2
a587 2
   virtual void setValue         (Component *, const Elem *);
   virtual void getValue         (Component *, ArrayJOR <Elem> &);
d687 2
a688 2
   virtual void setValue         (Component *, const Elem *);
   virtual void getValue         (Component *, ArrayJOR <Elem> &);
@


1.16
log
@Replaced newHeldCString with copyInto.
@
text
@d85 1
a85 1
   virtual void getValue         (Component *, WitVecOwner <Elem> &);
d183 1
a183 1
   virtual void getValue         (Component *, WitVecOwner <Elem> &);
d284 1
a284 1
   virtual void getValue         (Component *, WitVecOwner <Elem> &);
d383 1
a383 1
   virtual void getValue         (Component *, WitVecOwner <Elem> &);
d484 1
a484 1
   virtual void getValue         (Component *, WitVecOwner <Elem> &);
d587 1
a587 1
   virtual void getValue         (Component *, WitVecOwner <Elem> &);
d688 1
a688 1
   virtual void getValue         (Component *, WitVecOwner <Elem> &);
@


1.15
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@d87 1
a87 1
   virtual bool valueTypeMatches (const std::string);
d185 1
a185 1
   virtual bool valueTypeMatches (const std::string);
d286 1
a286 1
   virtual bool valueTypeMatches (const std::string);
d385 1
a385 1
   virtual bool valueTypeMatches (const std::string);
d486 1
a486 1
   virtual bool valueTypeMatches (const std::string);
d589 1
a589 1
   virtual bool valueTypeMatches (const std::string);
d690 1
a690 1
   virtual bool valueTypeMatches (const std::string);
@


1.14
log
@Multi-Obj Mode
@
text
@d6 7
a12 7
//    GlobalVectorAtt <Elem>
//      PartVectorAtt <Elem>
//    DemandVectorAtt <Elem>
//       OpnVectorAtt <Elem>
//       BomVectorAtt <Elem>
//       SubVectorAtt <Elem>
//       BopVectorAtt <Elem>
d23 1
a23 1
// Class template GlobalVectorAtt <Elem>
d32 1
a32 1
//       GlobalVectorAtt <Elem>
d40 1
a40 1
      class GlobalVectorAtt: public Att
d72 1
a72 1
   explicit GlobalVectorAtt (
d80 1
a80 1
   virtual ~GlobalVectorAtt ();
d97 2
a98 2
   GlobalVectorAtt              (const GlobalVectorAtt &);
   GlobalVectorAtt & operator = (const GlobalVectorAtt &);
d109 2
a110 2
      // attribute represented by this GlobalVectorAtt.
      // NULL, if this GlobalVectorAtt represents an output attribute.
d115 1
a115 1
      // attribute represented by this GlobalVectorAtt.
@


1.13
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d85 1
a85 1
   virtual void getValue         (Component *, VecWoa <Elem> &);
d183 1
a183 1
   virtual void getValue         (Component *, VecWoa <Elem> &);
d284 1
a284 1
   virtual void getValue         (Component *, VecWoa <Elem> &);
d383 1
a383 1
   virtual void getValue         (Component *, VecWoa <Elem> &);
d484 1
a484 1
   virtual void getValue         (Component *, VecWoa <Elem> &);
d587 1
a587 1
   virtual void getValue         (Component *, VecWoa <Elem> &);
d688 1
a688 1
   virtual void getValue         (Component *, VecWoa <Elem> &);
@


1.12
log
@Updated some comments.
@
text
@d84 2
a85 2
   virtual void setValue         (Element *, const Elem *);
   virtual void getValue         (Element *, VecWoa <Elem> &);
d182 2
a183 2
   virtual void setValue         (Element *, const Elem *);
   virtual void getValue         (Element *, VecWoa <Elem> &);
d283 2
a284 2
   virtual void setValue         (Element *, const Elem *);
   virtual void getValue         (Element *, VecWoa <Elem> &);
d382 2
a383 2
   virtual void setValue         (Element *, const Elem *);
   virtual void getValue         (Element *, VecWoa <Elem> &);
d483 2
a484 2
   virtual void setValue         (Element *, const Elem *);
   virtual void getValue         (Element *, VecWoa <Elem> &);
d586 2
a587 2
   virtual void setValue         (Element *, const Elem *);
   virtual void getValue         (Element *, VecWoa <Elem> &);
d687 2
a688 2
   virtual void setValue         (Element *, const Elem *);
   virtual void getValue         (Element *, VecWoa <Elem> &);
@


1.11
log
@Initial implementation of class ExceptionHandler.
@
text
@d34 1
a34 1
// The definition is in VectorAtts.C.
d100 1
a100 1
      // Not defined; prevents accidental copying and assignment.
d132 1
a132 1
// The definition is in VectorAtts.C.
d198 1
a198 1
      // Not defined; prevents accidental copying and assignment.
d231 1
a231 1
// The definition is in VectorAtts.C.
d299 1
a299 1
      // Not defined; prevents accidental copying and assignment.
d332 1
a332 1
// The definition is in VectorAtts.C.
d398 1
a398 1
      // Not defined; prevents accidental copying and assignment.
d431 1
a431 1
// The definition is in VectorAtts.C.
d499 1
a499 1
      // Not defined; prevents accidental copying and assignment.
d532 1
a532 1
// The definition is in VectorAtts.C.
d602 1
a602 1
      // Not defined; prevents accidental copying and assignment.
d635 1
a635 1
// The definition is in VectorAtts.C.
d703 1
a703 1
      // Not defined; prevents accidental copying and assignment.
@


1.10
log
@Changed name of method Attribute.allowsSetValue to isModifiable.
@
text
@d30 3
a32 3
//    JavaAccObj
//       Att
//          GlobalVectorAtt <Elem>
d128 3
a130 3
//    JavaAccObj
//       Att
//          PartVectorAtt <Elem>
d227 3
a229 3
//    JavaAccObj
//       Att
//          DemandVectorAtt <Elem>
d328 3
a330 3
//    JavaAccObj
//       Att
//          OpnVectorAtt <Elem>
d427 3
a429 3
//    JavaAccObj
//       Att
//          BomEntVectorAtt <Elem>
d528 3
a530 3
//    JavaAccObj
//       Att
//          SubVectorAtt <Elem>
d631 3
a633 3
//    JavaAccObj
//       Att
//          BopEntVectorAtt <Elem>
@


1.9
log
@Attributes.
@
text
@d86 1
a86 1
   virtual bool allowsSetValue   ();
d184 1
a184 1
   virtual bool allowsSetValue   ();
d285 1
a285 1
   virtual bool allowsSetValue   ();
d384 1
a384 1
   virtual bool allowsSetValue   ();
d485 1
a485 1
   virtual bool allowsSetValue   ();
d588 1
a588 1
   virtual bool allowsSetValue   ();
d689 1
a689 1
   virtual bool allowsSetValue   ();
@


1.8
log
@Minor Revision.
@
text
@d86 1
a86 1
   virtual bool getIsInputAtt    ();
d184 1
a184 1
   virtual bool getIsInputAtt    ();
d285 1
a285 1
   virtual bool getIsInputAtt    ();
d384 1
a384 1
   virtual bool getIsInputAtt    ();
d485 1
a485 1
   virtual bool getIsInputAtt    ();
d588 1
a588 1
   virtual bool getIsInputAtt    ();
d689 1
a689 1
   virtual bool getIsInputAtt    ();
@


1.7
log
@Name change.
@
text
@d86 1
a86 1
   virtual bool getInputAccess   ();
d184 1
a184 1
   virtual bool getInputAccess   ();
d285 1
a285 1
   virtual bool getInputAccess   ();
d384 1
a384 1
   virtual bool getInputAccess   ();
d485 1
a485 1
   virtual bool getInputAccess   ();
d588 1
a588 1
   virtual bool getInputAccess   ();
d689 1
a689 1
   virtual bool getInputAccess   ();
@


1.6
log
@Changed name of Component to Entity.
@
text
@d84 2
a85 2
   virtual void setValue         (Entity *, const Elem *);
   virtual void getValue         (Entity *, VecWoa <Elem> &);
d182 2
a183 2
   virtual void setValue         (Entity *, const Elem *);
   virtual void getValue         (Entity *, VecWoa <Elem> &);
d283 2
a284 2
   virtual void setValue         (Entity *, const Elem *);
   virtual void getValue         (Entity *, VecWoa <Elem> &);
d382 2
a383 2
   virtual void setValue         (Entity *, const Elem *);
   virtual void getValue         (Entity *, VecWoa <Elem> &);
d483 2
a484 2
   virtual void setValue         (Entity *, const Elem *);
   virtual void getValue         (Entity *, VecWoa <Elem> &);
d586 2
a587 2
   virtual void setValue         (Entity *, const Elem *);
   virtual void getValue         (Entity *, VecWoa <Elem> &);
d687 2
a688 2
   virtual void setValue         (Entity *, const Elem *);
   virtual void getValue         (Entity *, VecWoa <Elem> &);
@


1.5
log
@Minor revision.
@
text
@d84 2
a85 2
   virtual void setValue         (Component *, const Elem *);
   virtual void getValue         (Component *, VecWoa <Elem> &);
d182 2
a183 2
   virtual void setValue         (Component *, const Elem *);
   virtual void getValue         (Component *, VecWoa <Elem> &);
d283 2
a284 2
   virtual void setValue         (Component *, const Elem *);
   virtual void getValue         (Component *, VecWoa <Elem> &);
d382 2
a383 2
   virtual void setValue         (Component *, const Elem *);
   virtual void getValue         (Component *, VecWoa <Elem> &);
d483 2
a484 2
   virtual void setValue         (Component *, const Elem *);
   virtual void getValue         (Component *, VecWoa <Elem> &);
d586 2
a587 2
   virtual void setValue         (Component *, const Elem *);
   virtual void getValue         (Component *, VecWoa <Elem> &);
d687 2
a688 2
   virtual void setValue         (Component *, const Elem *);
   virtual void getValue         (Component *, VecWoa <Elem> &);
@


1.4
log
@Minor revision.
@
text
@d86 1
a86 1
   virtual bool getInputMode     ();
d184 1
a184 1
   virtual bool getInputMode     ();
d285 1
a285 1
   virtual bool getInputMode     ();
d384 1
a384 1
   virtual bool getInputMode     ();
d485 1
a485 1
   virtual bool getInputMode     ();
d588 1
a588 1
   virtual bool getInputMode     ();
d689 1
a689 1
   virtual bool getInputMode     ();
@


1.3
log
@Changed name of C++ class JAccObject to JavaAccObj.
@
text
@d86 1
a86 1
   virtual bool isAnInputAtt     ();
d184 1
a184 1
   virtual bool isAnInputAtt     ();
d285 1
a285 1
   virtual bool isAnInputAtt     ();
d384 1
a384 1
   virtual bool isAnInputAtt     ();
d485 1
a485 1
   virtual bool isAnInputAtt     ();
d588 1
a588 1
   virtual bool isAnInputAtt     ();
d689 1
a689 1
   virtual bool isAnInputAtt     ();
@


1.2
log
@Attributes.
@
text
@d30 1
a30 1
//    JAccObject
d128 1
a128 1
//    JAccObject
d227 1
a227 1
//    JAccObject
d328 1
a328 1
//    JAccObject
d427 1
a427 1
//    JAccObject
d528 1
a528 1
//    JAccObject
d631 1
a631 1
//    JAccObject
@


1.1
log
@Attributes.
@
text
@d84 4
a87 3
   virtual void setValue     (Component *, const Elem *);
   virtual void getValue     (Component *, VecWoa <Elem> &);
   virtual bool isAnInputAtt ();
d182 4
a185 3
   virtual void setValue     (Component *, const Elem *);
   virtual void getValue     (Component *, VecWoa <Elem> &);
   virtual bool isAnInputAtt ();
d283 4
a286 3
   virtual void setValue     (Component *, const Elem *);
   virtual void getValue     (Component *, VecWoa <Elem> &);
   virtual bool isAnInputAtt ();
d382 4
a385 3
   virtual void setValue     (Component *, const Elem *);
   virtual void getValue     (Component *, VecWoa <Elem> &);
   virtual bool isAnInputAtt ();
d483 4
a486 3
   virtual void setValue     (Component *, const Elem *);
   virtual void getValue     (Component *, VecWoa <Elem> &);
   virtual bool isAnInputAtt ();
d586 4
a589 3
   virtual void setValue     (Component *, const Elem *);
   virtual void getValue     (Component *, VecWoa <Elem> &);
   virtual bool isAnInputAtt ();
d687 4
a690 3
   virtual void setValue     (Component *, const Elem *);
   virtual void getValue     (Component *, VecWoa <Elem> &);
   virtual bool isAnInputAtt ();
@

