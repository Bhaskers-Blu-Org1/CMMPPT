head	1.28;
access;
symbols;
locks; strict;
comment	@ * @;


1.28
date	2009.01.23.23.57.54;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2009.01.23.19.32.22;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2009.01.21.21.43.21;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2009.01.16.17.03.33;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2009.01.16.16.32.01;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.12.15.17.28.46;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.12.15.17.17.38;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.12.03.18.55.06;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.11.25.21.58.16;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.10.06.14.58.26;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.10.01.22.59.57;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.09.26.22.50.15;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.09.09.18.59.57;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.08.27.15.30.44;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.07.29.22.14.09;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.07.28.22.03.09;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.07.23.22.13.19;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.07.23.21.45.55;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.07.09.22.26.46;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.07.07.22.59.31;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.07.07.18.41.49;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.07.03.14.42.44;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.18.21.28.16;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.12.14.54.22;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.11.19.59.53;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.11.19.27.15;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.10.20.40.27;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.29.15.51.16;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Alternative classes.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File AttBldr.h.
//
// Contains the declaration of class AttBldr.
//------------------------------------------------------------------------------

#ifndef AttBldr_h
#define AttBldr_h

#include <JavaAccObj.h>

#include        <map>
#include     <string>

//------------------------------------------------------------------------------
// Class AttBldr
//
// "Attribute Builder"
// Reponsible for creating, temporarily holding, and then transferring ownership
// of the Atts for a Problem.
//
// Class Hierarchy:
//
// JavaAccObj
//    AttBldr
//------------------------------------------------------------------------------

namespace WitJ
{
class AttBldr: public JavaAccObj
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit AttBldr (Coordinator * theCoord);
      //
      // Constructor.

   virtual ~AttBldr ();
      //
      // Destructor.

   virtual AttBldr * asAttBldr ();
      //
      // Override from class JavaAccObj.

   void acquireAtt (Att * theAtt);
      //
      // Takes ownership of theAtt.
      // (Duplicate names are not allowed.)
      // Verifies that the AttName of theAtt is alphabetically no earlier that
      // that of the previously acquired Att.

   void dupAttError (Att * theAtt);
      //
      // Issues an error message indicating that the scoped name of theAtt
      // duplicates that of a previously acquired Att.

   void outOfOrderError (Att * theAtt);
      //
      // Issues an error message indicating that the AttName of theAtt is
      // alphabetically earlier than that of the previously acquired Att.

   bool hasAttFor (const char * scopedAttNameCStr);
      //
      // Returns true, iff this AttBldr currently owns an Att whose scoped name
      // matches scopedAttNameCStr.

   Att * handOverAttFor (const char * scopedAttNameCStr);
      //
      // If this AttBldr currently owns an Att whose scoped name matches
      // scopedAttNameCStr, that Att is returned and ownership of the Att is
      // transferred to the caller;
      // otherwise an error is issued.

   bool isEmpty ();
      //
      // Returns true, iff this AttBldr currently owns no Atts.

   void print ();
      //
      // Prints the contents of this AttBldr.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   void buildAtts ();
      //
      // Creates the Atts.
      // The Atts are created in alphabetical order.
      // (This is verified by the code.)

   AttBldr              (const AttBldr &);
   AttBldr & operator = (const AttBldr &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   std::map <std::string, Att *> myAttMap_;
      //
      // Maps the scoped name of each Att owned by this AttBldr to the Atts that
      // has that scoped name.

   std::string scopedAttName_;
      //
      // Used by acquireAtt.
      // Stores the scoped name of the attribute.

   Att * mostRecentAtt_;
      //
      // During buildOlds (), mostRecentAtt_ is the most recent Att acquired, if
      // any; otherwise NULL.
   };
};
//
// End of namespace WitJ.

#endif
@


1.27
log
@Coordinator
@
text
@d3 2
@


1.26
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d36 1
a36 1
   explicit AttBldr (Coordinator * theCoordinator);
@


1.25
log
@Change the mname of the ProbCtr classes to ProbMgr in both Java and C++.
@
text
@d36 1
a36 1
   explicit AttBldr (ProbMgr * theProbMgr);
@


1.24
log
@Continued implementation of the ProbCtr classes.
@
text
@d36 1
a36 1
   explicit AttBldr (ProbCtr * theProbCtr);
@


1.23
log
@Updated some comments.
@
text
@d36 1
a36 1
   explicit AttBldr (Problem * theProblem);
@


1.22
log
@Initial implementation of class ExceptionHandler.
@
text
@d100 1
a100 1
      // Not defined; prevents accidental copying and assignment.
@


1.21
log
@Minor changes.
@
text
@d22 2
a23 2
//    JavaAccObj
//       AttBldr
@


1.20
log
@Dismantling class SessionCOR.
@
text
@d113 1
a113 1
      // Used by acquireAtt (...).
@


1.19
log
@Minor revision.
@
text
@d36 1
a36 1
   explicit AttBldr (Session * theSession);
@


1.18
log
@Minor revision.
@
text
@d77 1
a77 1
   bool getEmptyMode ();
@


1.17
log
@Changed name of C++ class JAccObject to JavaAccObj.
@
text
@d77 1
a77 1
   bool isEmpty ();
@


1.16
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@d8 1
a8 1
#include <JAccObject.h>
d22 1
a22 1
//    JAccObject
d28 1
a28 1
class AttBldr: public JAccObject
d46 1
a46 1
      // Override from class JAccObject.
@


1.15
log
@Attributes.
@
text
@d36 1
a36 1
   explicit AttBldr (ProbCoord * theProbCoord);
@


1.14
log
@Attributes.
@
text
@d44 1
a44 1
   virtual AttBldr * thisAttBldr ();
@


1.13
log
@Attributes.
@
text
@d55 10
@


1.12
log
@Attributes.
@
text
@d108 1
a108 1
      // During buildAtts (), mostRecentAtt_ is the most recent Att acquired, if
@


1.11
log
@Attributes.
@
text
@d52 2
@


1.10
log
@Attributes.
@
text
@d82 2
d103 5
@


1.9
log
@Attributes.
@
text
@d53 1
a53 1
   Att * handOverAtt (const char * scopedAttNameCStr);
d55 6
a60 1
      // If this AttBldr current owns an Att whose scoped name matches
@


1.8
log
@Implemented and use class AppAtt.
@
text
@d11 1
d53 5
a57 7
   Att * handOverAtt (
         const char * theAttName,
         const char * theClassName);
      //
      // If this AttBldr current owns an Att whose name matches theAttName and
      // whose Component class name matches theClassName, that Att is returned
      // and ownership of the Att is transferred to the caller;
d87 6
a92 1
   std::multimap <std::string, Att *> myAttMap_;
d94 2
a95 2
      // Maps the name of each Att owned by this AttBldr to all Atts that have
      // the name.
@


1.7
log
@Atttributes.
@
text
@d65 4
@


1.6
log
@Attributes.
@
text
@d52 3
a54 1
   Att * handOverAtt (const char * theName);
d56 3
a58 2
      // If this AttBldr current owns an Att whose name matches theName, that
      // Att is returned and ownership of the Att is transferred to the caller;
d84 1
a84 1
   std::map <std::string, Att *> myAttMap_;
d86 2
a87 2
      // Maps the name of each Att owned by this AttBldr to the corresponding
      // Att.
@


1.5
log
@Comments, etc.
@
text
@d5 2
a6 2
#ifndef AttBldrH
#define AttBldrH
@


1.4
log
@Attributes
@
text
@d52 1
a52 1
   Att * relinquishAtt (const char * theName);
@


1.3
log
@Attributes.
@
text
@d52 1
a52 1
   Att * cedeAttFor (const char * theName);
d58 4
@


1.2
log
@Attributes
@
text
@d10 2
d47 6
a52 1
   Att * releaseAtt (const char * theName);
d55 1
a55 1
      // Att is returned and ownership of the Att is assumed by the caller;
d77 1
a77 1
   Att * supplyVol_;
d79 2
a80 2
      // The supplyVol attribute created by this AttBldr.
      // NULL, after ownership has been transferred.
@


1.1
log
@Initial implementation of class AttBldr.
@
text
@d45 1
a45 1
   Att * transferAttFor (const char * theName);
@

