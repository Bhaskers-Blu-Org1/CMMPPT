head	1.32;
access;
symbols;
locks; strict;
comment	@ * @;


1.32
date	2011.04.13.16.00.14;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.04.08.20.56.17;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.03.29.23.38.44;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2011.02.25.16.06.46;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2010.04.20.20.55.06;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2009.04.08.21.02.39;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2009.03.13.19.32.17;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.10.06.22.14.00;	author rjw;	state dead;
branches;
next	1.24;

1.24
date	2008.09.29.22.43.46;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.09.29.18.44.09;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.09.27.00.37.57;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.09.26.22.50.15;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.09.09.20.04.07;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.09.09.18.59.58;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.09.04.20.36.22;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.08.28.18.30.36;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.08.27.15.30.45;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.08.06.18.48.20;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.07.01.16.09.21;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.18.21.28.17;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.05.22.21.02.57;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.05.22.14.19.16;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.05.21.22.09.34;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.21.14.33.47;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.20.18.16.39;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.19.22.20.54;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.19.16.15.29;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.16.17.07.05;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.15.21.18.09;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.15.21.03.30;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.15.19.45.16;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.20.54.10;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.32
log
@ArrayJOR classes
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File Component.h.
//
// Contains the declaration of class Component.
//------------------------------------------------------------------------------

#ifndef Component_h
#define Component_h

#include <JavaAccObj.h>

//------------------------------------------------------------------------------
// Class Component
//
// Represents an element (i.e. data object) of an implosion problem.
//
// Class Hierarchy:
//
// JavaAccObj
//    Component
//       Problem
//       Part
//       Demand
//       Operation
//       BomEntry
//       Substitute
//       BopEntry
//------------------------------------------------------------------------------

namespace WitJ
{
class Component: public JavaAccObj
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   ~Component ();
      //
      // Destructor.

   virtual Component * asComponent ();
      //
      // Override from class JavaAccObj.

   void setComponentJOR (ComponentJOR *);
      //
      // To be called exactly once.

   virtual void setBoundSet (
         const double * hardLBCVec,
         const double * softLBCVec,
         const double * hardUBCVec);
      //
      // If this Component is an instance of a class that has a BoundSet, this
      // function calls WIT to set the value of the BoundSet to the arguments;
      // otherwise an assertion exception is thrown.

   void setBoundSetToScalars (
         double hardLBVal,
         double softLBVal,
         double hardUBVal);
      //
      // If this Component is an instance of a class that has a BoundSet, this
      // function calls WIT to set the value of the BoundSet to the arguments in
      // all periods; otherwise an assertion exception is thrown.

   virtual void getBoundSet (
         DblArrayJOR & hardLBAJOR,
         DblArrayJOR & softLBAJOR,
         DblArrayJOR & hardUBAJOR);
      //
      // If this Component is an instance of a class that has a BoundSet, this 
      // function calls WIT to set the value of the arguments to the BoundSet;
      // otherwise an assertion exception is thrown.

   virtual void copyComponentData (Component * origComp) = 0;
      //
      // Cals WIT to copy this input data from origComp'into this Component.

   void setWasDeletedInWit (bool);
      //
      // Setter.

   //---------------------------------------------------------------------------
   // Accessors.
   //---------------------------------------------------------------------------

   inline ComponentJOR * getComponentJOR ()
      {
      return myComponentJOR_;
      }

   inline bool wasDeletedInWit ()
      {
      return wasDeletedInWit_;
      }

   //---------------------------------------------------------------------------
   // Protected member functions.
   //---------------------------------------------------------------------------

   protected:

   explicit Component (Coordinator * theCoord);
      //
      // Constructor

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   Component              (const Component &);
   Component & operator = (const Component &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   ComponentJOR * myComponentJOR_;
      //
      // Represents the Java Component that corresponds to this C++ Component.

   bool wasDeletedInWit_;
      //
      // True, iff the WIT element modeled by this WIT-J/C++ Component has been
      // deleted by witPurgeData.
   };
};
//
// End of namespace WitJ.

#endif
@


1.31
log
@copyComponentData
@
text
@d71 3
a73 3
         WitVecOwner <double> & hardLBWVO,
         WitVecOwner <double> & softLBWVO,
         WitVecOwner <double> & hardUBWVO);
@


1.30
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@d79 4
@


1.29
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@d48 4
d87 5
d122 4
@


1.28
log
@Multi-Obj Mode
@
text
@d21 1
a21 1
//       GlobalAspect
@


1.27
log
@Added theComp.setBoundSetToScalars (...).
@
text
@d67 3
a69 3
         VecWoa <double> & hardLBWoa,
         VecWoa <double> & softLBWoa,
         VecWoa <double> & hardUBWoa);
@


1.26
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d55 10
a64 1
      // otherwise issues an internal error.
d73 1
a73 1
      // otherwise issues an internal error.
@


1.25
log
@Changed name of Component to Entity.
@
text
@d15 1
a15 1
// Represents an component (i.e. data object) of an implosion problem.
d19 9
a27 9
//    JavaAccObj
//       Component
//          GlobalComp
//          Part
//          Demand
//          Operation
//          BomEntry
//          Substitute
//          BopEntry
d66 4
d74 1
a74 1
   inline JavaObjRep * getJavaObjRep ()
d76 1
a76 1
      return myJavaObjRep_;
d85 1
a85 1
   explicit Component (Session * theSession, JavaObjRep * theJavaObjRep);
d98 1
a98 1
      // Not defined; prevents accidental copying and assignment.
d101 1
a101 1
   // Private member data.
d104 1
a104 1
   JavaObjRep * const myJavaObjRep_;
d106 2
a107 1
      // The JavaObjRep for this Component.
@


1.24
log
@Call-back infrastructure.
@
text
@@


1.23
log
@Call-back infrastructure.
@
text
@a71 2
      witjAssert (myJavaObjRep_ != NULL);

a80 1
   explicit Component (Session * theSession);
d83 1
a83 1
      // Constructors.
d102 1
a102 1
      // The JavaObjRep for this Component, if any; otherwise NULL.
@


1.22
log
@Extraction.
@
text
@d67 11
d98 8
@


1.21
log
@Changed name of C++ class JAccObject to JavaAccObj.
@
text
@d73 1
d75 1
a75 1
      // Constructor.
@


1.20
log
@Minor update.
@
text
@d10 1
a10 1
#include <JAccObject.h>
d19 1
a19 1
//    JAccObject
d32 1
a32 1
class Component: public JAccObject
d46 1
a46 1
      // Override from class JAccObject.
@


1.19
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@a10 1
#include    <Session.h>
a76 9
   // Accessors.
   //---------------------------------------------------------------------------

   inline WitRun * getWitRun ()
      {
      return getSession ()->getWitRun ();
      }

   //---------------------------------------------------------------------------
@


1.18
log
@Added attribute "execBounds".
@
text
@d11 1
a11 1
#include  <ProbCoord.h>
d73 1
a73 1
   explicit Component (ProbCoord * theProbCoord);
d83 1
a83 1
      return getProbCoord ()->getWitRun ();
@


1.17
log
@Name change: Global --> GlobalComp.
@
text
@d49 18
@


1.16
log
@Attributes.
@
text
@d22 1
a22 1
//          Global
@


1.15
log
@Classes Global and GlobalCI.
@
text
@d45 1
a45 1
   virtual Component * thisComponent ();
@


1.14
log
@Changed the names of access functions beginning with "my"
to begin with "get".
@
text
@d22 1
a22 1
//          GlobalComp
@


1.13
log
@Attributes.
@
text
@d63 1
a63 1
   inline WitRun * myWitRun ()
d65 1
a65 1
      return myProbCoord ()->myWitRun ();
@


1.12
log
@*** empty log message ***
@
text
@d7 2
a8 2
#ifndef ComponentH
#define ComponentH
@


1.11
log
@*** empty log message ***
@
text
@d27 1
@


1.10
log
@*** empty log message ***
@
text
@d27 1
@


1.9
log
@*** empty log message ***
@
text
@a47 9
   // Accessors.
   //---------------------------------------------------------------------------

   inline ProbCoord * myProbCoord ()
      {
      return myProbCoord_;
      }

   //---------------------------------------------------------------------------
d63 1
a63 1
      return myProbCoord_->myWitRun ();
a75 8

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   ProbCoord * const myProbCoord_;
      //
      // The ProbCoord for this Component.
@


1.8
log
@*** empty log message ***
@
text
@a42 4
   virtual void getDerivedInstance (Component * &);
      //
      // Override from class JAccObject.

@


1.7
log
@*** empty log message ***
@
text
@d47 1
a47 1
   virtual Component * thisComp ();
@


1.6
log
@*** empty log message ***
@
text
@d47 4
@


1.5
log
@*** empty log message ***
@
text
@d62 1
a62 1
   Component (ProbCoord * theProbCoord);
@


1.4
log
@*** empty log message ***
@
text
@d43 4
@


1.3
log
@*** empty log message ***
@
text
@a46 5
   inline Problem * myProblem ()
      {
      return myProblem_;
      }

a85 4
   Problem * const myProblem_;
      //
      // The Problem for this Component.

@


1.2
log
@*** empty log message ***
@
text
@d11 1
a11 1
#include    <Problem.h>
d73 1
a73 1
      return myProblem_->myWitRun ();
@


1.1
log
@*** empty log message ***
@
text
@a38 4
   Component (Problem * theProblem);
      //
      // Constructor.

d52 5
d63 4
d94 4
@

