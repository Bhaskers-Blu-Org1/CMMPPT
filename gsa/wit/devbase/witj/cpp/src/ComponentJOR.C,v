head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2011.04.08.23.39.53;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.07.19.07.37;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.06.15.56.35;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.05.23.07.39;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.30.19.49.50;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.03.29.23.38.45;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Removed C++ class JavaObjRep.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File ComponentJOR.C.
//
// Contains the implementation of class ComponentJOR.
//------------------------------------------------------------------------------

#include <ComponentJOR.h>
#include      <Problem.h>
#include         <Part.h>
#include    <Operation.h>
#include     <BomEntry.h>

#include     <iostream>

//------------------------------------------------------------------------------

_jclass *    WitJ::ComponentJOR::                ourPartJCl_ = NULL;
_jclass *    WitJ::ComponentJOR::              ourDemandJCl_ = NULL;
_jclass *    WitJ::ComponentJOR::           ourOperationJCl_ = NULL;
_jclass *    WitJ::ComponentJOR::            ourBomEntryJCl_ = NULL;
_jclass *    WitJ::ComponentJOR::          ourSubstituteJCl_ = NULL;
_jclass *    WitJ::ComponentJOR::            ourBopEntryJCl_ = NULL;

_jmethodID * WitJ::ComponentJOR::     makeInstancePartJMeth_ = NULL;
_jmethodID * WitJ::ComponentJOR::    newInstanceDemandJMeth_ = NULL;
_jmethodID * WitJ::ComponentJOR:: newInstanceOperationJMeth_ = NULL;
_jmethodID * WitJ::ComponentJOR::  newInstanceBomEntryJMeth_ = NULL;
_jmethodID * WitJ::ComponentJOR::newInstanceSubstituteJMeth_ = NULL;
_jmethodID * WitJ::ComponentJOR::  newInstanceBopEntryJMeth_ = NULL;
_jmethodID * WitJ::ComponentJOR::          setNPeriodsJMeth_ = NULL;

//------------------------------------------------------------------------------

WitJ::ComponentJOR::ComponentJOR (_jobject * theCompJObj, JNIEnv * theJNIEnv):

      JniClient        (theJNIEnv),
      myComponentJObj_ (NULL)
   {
   myComponentJObj_ = getJNIEnv ()->NewGlobalRef (theCompJObj);

   EXCEPTION_ASSERT (myComponentJObj_ != NULL);
   }

//------------------------------------------------------------------------------

WitJ::ComponentJOR::~ComponentJOR ()
   {
   getJNIEnv ()->DeleteGlobalRef (myComponentJObj_);
   }

//------------------------------------------------------------------------------

void WitJ::ComponentJOR::setUpJni (JNIEnv * theJNIEnv)
   {
   findAllJClasses   (theJNIEnv);
   findAllJMethodIDs (theJNIEnv);
   }

//------------------------------------------------------------------------------

void WitJ::ComponentJOR::makeJavaPart (
      Problem *    theProblem,
      const char * thePartNameCStr,
      bool         isMaterial)
   {
   ComponentJOR * theCompJOR;
   _jobject *     theProblemJObj;
   _jstring *     thePartNameJStr;

   theCompJOR      = theProblem->getComponentJOR ();
   theProblemJObj  = theProblem->getComponentJOR ()->myComponentJObj_;

   thePartNameJStr = theCompJOR->newJString (thePartNameCStr);

   theCompJOR->
      getJNIEnv ()->
         CallStaticObjectMethod (
            ourPartJCl_,
            makeInstancePartJMeth_,
            theProblemJObj,
            thePartNameJStr,
            isMaterial);

   theCompJOR->throwAnyJavaException ();

   theCompJOR->deleteLocalRef (thePartNameJStr);
   }

//------------------------------------------------------------------------------

void WitJ::ComponentJOR::makeJavaDemand (
      Part *       thePart,
      const char * theDemandNameCStr)
   {
   ComponentJOR * theCompJOR;
   _jobject *     thePartJObj;
   _jstring *     theDemandNameJStr;
   _jobject *     theDemandJObj;

   theCompJOR        = thePart->getComponentJOR ();
   thePartJObj       = thePart->getComponentJOR ()->myComponentJObj_;
   
   theDemandNameJStr = theCompJOR->newJString (theDemandNameCStr);

   theDemandJObj     =
      theCompJOR->
         getJNIEnv ()->
            CallStaticObjectMethod (
               ourDemandJCl_,
               newInstanceDemandJMeth_,
               thePartJObj,
               theDemandNameJStr);

   theCompJOR->throwAnyJavaException ();

   theCompJOR->deleteLocalRef (theDemandNameJStr);
   theCompJOR->deleteLocalRef (theDemandJObj);
   }

//------------------------------------------------------------------------------

void WitJ::ComponentJOR::makeJavaOperation (
      Problem *    theProblem,
      const char * theOpnNameCStr)
   {
   ComponentJOR * theCompJOR;
   _jobject *     theProblemJObj;
   _jstring *     theOpnNameJStr;
   _jobject *     theOpnJObj;

   theCompJOR       = theProblem->getComponentJOR ();
   theProblemJObj   = theProblem->getComponentJOR ()->myComponentJObj_;
   
   theOpnNameJStr   = theCompJOR->newJString (theOpnNameCStr);

   theOpnJObj =
      theCompJOR->
         getJNIEnv ()->
            CallStaticObjectMethod (
               ourOperationJCl_,
               newInstanceOperationJMeth_,
               theProblemJObj,
               theOpnNameJStr);

   theCompJOR->throwAnyJavaException ();

   theCompJOR->deleteLocalRef (theOpnNameJStr);
   theCompJOR->deleteLocalRef (theOpnJObj);
   }

//------------------------------------------------------------------------------

void WitJ::ComponentJOR::makeJavaBomEntry (Operation * theOpn, Part * thePart)
   {
   ComponentJOR * theCompJOR;
   _jobject *     theOpnJObj;
   _jobject *     thePartJObj;
   _jobject *     theBomEntJObj;

   theCompJOR    = theOpn ->getComponentJOR ();
   theOpnJObj    = theOpn ->getComponentJOR ()->myComponentJObj_;
   thePartJObj   = thePart->getComponentJOR ()->myComponentJObj_;
   
   theBomEntJObj =
      theCompJOR->
         getJNIEnv ()->
            CallStaticObjectMethod (
               ourBomEntryJCl_,
               newInstanceBomEntryJMeth_,
               theOpnJObj,
               thePartJObj);

   theCompJOR->throwAnyJavaException ();

   theCompJOR->deleteLocalRef (theBomEntJObj);
   }

//------------------------------------------------------------------------------

void WitJ::ComponentJOR::makeJavaSubstitute (
      BomEntry * theBomEnt,
      Part *     thePart)
   {   
   ComponentJOR * theCompJOR;
   _jobject *     theBomEntJObj;
   _jobject *     thePartJObj;
   _jobject *     theSubJObj;

   theCompJOR    = theBomEnt->getComponentJOR ();
   theBomEntJObj = theBomEnt->getComponentJOR ()->myComponentJObj_;
   thePartJObj   = thePart  ->getComponentJOR ()->myComponentJObj_;

   theSubJObj    =
      theCompJOR->
         getJNIEnv ()->
            CallStaticObjectMethod (
               ourSubstituteJCl_,
               newInstanceSubstituteJMeth_,
               theBomEntJObj,
               thePartJObj);

   theCompJOR->throwAnyJavaException ();

   theCompJOR->deleteLocalRef (theSubJObj);
   }

//------------------------------------------------------------------------------

void WitJ::ComponentJOR::makeJavaBopEntry (Operation * theOpn, Part * thePart)
   {
   ComponentJOR * theCompJOR;
   _jobject *     theOpnJObj;
   _jobject *     thePartJObj;
   _jobject *     theBopEntJObj;

   theCompJOR    = theOpn ->getComponentJOR ();
   theOpnJObj    = theOpn ->getComponentJOR ()->myComponentJObj_;
   thePartJObj   = thePart->getComponentJOR ()->myComponentJObj_;
   
   theBopEntJObj =
      theCompJOR->
         getJNIEnv ()->
            CallStaticObjectMethod (
               ourBopEntryJCl_,
               newInstanceBopEntryJMeth_,
               theOpnJObj,
               thePartJObj);

   theCompJOR->throwAnyJavaException ();

   theCompJOR->deleteLocalRef (theBopEntJObj);
   }

//------------------------------------------------------------------------------

void WitJ::ComponentJOR::setJavaNPeriods (Problem * theProblem, int theValue)
   {
   ComponentJOR * theCompJOR;
   _jobject *     theProblemJObj;

   theCompJOR     = theProblem->getComponentJOR ();
   theProblemJObj = theProblem->getComponentJOR ()->myComponentJObj_;

   theCompJOR->
      getJNIEnv ()->
         CallVoidMethod (
            theProblemJObj,
            setNPeriodsJMeth_,
            theValue);

   theCompJOR->throwAnyJavaException ();
   }

//------------------------------------------------------------------------------

void WitJ::ComponentJOR::exhaustJniMemory ()
   {
   std::string  theString;
   const char * theCString;
   int          totDiscarded;
   _jstring *   theJString;
   _jobject *   theJGlobalRef;

   theString.append (10485760, ' ');

   theCString = theString.c_str ();

   for (totDiscarded = 10; totDiscarded <= 10000; totDiscarded += 10)
      {
      theJString    = newJString (theCString);

      theJGlobalRef = getJNIEnv ()->NewGlobalRef (theJString);

      EXCEPTION_ASSERT (theJGlobalRef != NULL);

      std::cout << totDiscarded << "MB of memory have been allocated by JNI.\n";

      std::cout.flush ();

      deleteLocalRef (theJString);
      }

   EXCEPTION_ASSERT (false);
   }

//------------------------------------------------------------------------------

void WitJ::ComponentJOR::findAllJClasses (JNIEnv * theJNIEnv)
   {
   ourPartJCl_       = newJClassGRef ("com/ibm/witj/Part",       theJNIEnv);
   ourDemandJCl_     = newJClassGRef ("com/ibm/witj/Demand",     theJNIEnv);
   ourOperationJCl_  = newJClassGRef ("com/ibm/witj/Operation",  theJNIEnv);
   ourBomEntryJCl_   = newJClassGRef ("com/ibm/witj/BomEntry",   theJNIEnv);
   ourSubstituteJCl_ = newJClassGRef ("com/ibm/witj/Substitute", theJNIEnv);
   ourBopEntryJCl_   = newJClassGRef ("com/ibm/witj/BopEntry",   theJNIEnv);
   }

//------------------------------------------------------------------------------

void WitJ::ComponentJOR::findAllJMethodIDs (JNIEnv * theJNIEnv)
   {
   makeInstancePartJMeth_ =
      getStaticJMethodID (
         ourPartJCl_,
         "makeInstance",
         "(Lcom/ibm/witj/Problem;Ljava/lang/String;Z)V",
         theJNIEnv);

   newInstanceDemandJMeth_ =
      getStaticJMethodID (
         ourDemandJCl_,
         "newInstance",
         "(Lcom/ibm/witj/Part;Ljava/lang/String;)Lcom/ibm/witj/Demand;",
         theJNIEnv);

   newInstanceOperationJMeth_ =
      getStaticJMethodID (
         ourOperationJCl_,
         "newInstance",
         "(Lcom/ibm/witj/Problem;Ljava/lang/String;)Lcom/ibm/witj/Operation;",
         theJNIEnv);

   newInstanceBomEntryJMeth_ =
      getStaticJMethodID (
         ourBomEntryJCl_,
         "newInstance",
         "(Lcom/ibm/witj/Operation;Lcom/ibm/witj/Part;)"
            "Lcom/ibm/witj/BomEntry;",
         theJNIEnv);

   newInstanceSubstituteJMeth_ =
      getStaticJMethodID (
         ourSubstituteJCl_,
         "newInstance",
         "(Lcom/ibm/witj/BomEntry;Lcom/ibm/witj/Part;)"
            "Lcom/ibm/witj/Substitute;",
         theJNIEnv);

   newInstanceBopEntryJMeth_ =
      getStaticJMethodID (
         ourBopEntryJCl_,
         "newInstance",
         "(Lcom/ibm/witj/Operation;Lcom/ibm/witj/Part;)"
            "Lcom/ibm/witj/BopEntry;",
         theJNIEnv);

   setNPeriodsJMeth_ =
      getJMethodID (
         "com/ibm/witj/Problem",
         "setNPeriods",
         "(I)V",
         theJNIEnv);
   }
@


1.5
log
@getExpCycle
@
text
@d36 2
a37 1
      JavaObjRep (theCompJObj, theJNIEnv)
d39 3
d48 1
d71 1
a71 1
   theProblemJObj  = theProblem->getComponentJOR ()->getJObject ();
d101 1
a101 1
   thePartJObj       = thePart->getComponentJOR ()->getJObject ();
d132 1
a132 1
   theProblemJObj   = theProblem->getComponentJOR ()->getJObject ();
d161 2
a162 2
   theOpnJObj    = theOpn ->getComponentJOR ()->getJObject ();
   thePartJObj   = thePart->getComponentJOR ()->getJObject ();
d190 2
a191 2
   theBomEntJObj = theBomEnt->getComponentJOR ()->getJObject ();
   thePartJObj   = thePart  ->getComponentJOR ()->getJObject ();
d217 2
a218 2
   theOpnJObj    = theOpn ->getComponentJOR ()->getJObject ();
   thePartJObj   = thePart->getComponentJOR ()->getJObject ();
d242 1
a242 1
   theProblemJObj = theProblem->getComponentJOR ()->getJObject ();
@


1.4
log
@JNIEnv arguments.
@
text
@a270 2
      deleteLocalRef (theJString);

d274 2
@


1.3
log
@JniClient
@
text
@d34 1
a34 1
WitJ::ComponentJOR::ComponentJOR (JNIEnv * theJNIEnv, _jobject * theCompJObj):
d36 1
a36 1
      JavaObjRep (theJNIEnv, theCompJObj)
@


1.2
log
@C++ class JavaObjRep.
@
text
@a250 7
void WitJ::ComponentJOR::findNonsense ()
   {
   findJClass (getJNIEnv (), "Nonsense");
   }

//------------------------------------------------------------------------------

d285 6
a290 17
   ourPartJCl_          =
      newJClassGRef (theJNIEnv, "com/ibm/witj/Part");

   ourDemandJCl_        =
      newJClassGRef (theJNIEnv, "com/ibm/witj/Demand");

   ourOperationJCl_     =
      newJClassGRef (theJNIEnv, "com/ibm/witj/Operation");

   ourBomEntryJCl_      =
      newJClassGRef (theJNIEnv, "com/ibm/witj/BomEntry");

   ourSubstituteJCl_    =
      newJClassGRef (theJNIEnv, "com/ibm/witj/Substitute");

   ourBopEntryJCl_      =
      newJClassGRef (theJNIEnv, "com/ibm/witj/BopEntry");
a298 1
         theJNIEnv,
d301 2
a302 1
         "(Lcom/ibm/witj/Problem;Ljava/lang/String;Z)V");
a305 1
         theJNIEnv,
d308 2
a309 1
         "(Lcom/ibm/witj/Part;Ljava/lang/String;)Lcom/ibm/witj/Demand;");
a312 1
         theJNIEnv,
d315 2
a316 1
         "(Lcom/ibm/witj/Problem;Ljava/lang/String;)Lcom/ibm/witj/Operation;");
a319 1
         theJNIEnv,
d323 2
a324 1
            "Lcom/ibm/witj/BomEntry;");
a327 1
         theJNIEnv,
d331 2
a332 1
            "Lcom/ibm/witj/Substitute;");
a335 1
         theJNIEnv,
d339 2
a340 1
            "Lcom/ibm/witj/BopEntry;");
a343 1
         theJNIEnv,
d346 2
a347 1
         "(I)V");
@


1.1
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@d17 6
a22 7
_jclass * WitJ::ComponentJOR::         ourPartJCl_ = NULL;
_jclass * WitJ::ComponentJOR::       ourDemandJCl_ = NULL;
_jclass * WitJ::ComponentJOR::    ourOperationJCl_ = NULL;
_jclass * WitJ::ComponentJOR::     ourBomEntryJCl_ = NULL;
_jclass * WitJ::ComponentJOR::   ourSubstituteJCl_ = NULL;
_jclass * WitJ::ComponentJOR::     ourBopEntryJCl_ = NULL;
_jclass * WitJ::ComponentJOR::ourPeggingTripleJCl_ = NULL;
a29 1
_jmethodID * WitJ::ComponentJOR::    ctorPeggingTripleJMeth_ = NULL;
d36 1
a36 2
      JniClient        (theJNIEnv),
      myComponentJObj_ (NULL)
a37 3
   myComponentJObj_ = getJNIEnv ()->NewGlobalRef (theCompJObj);

   EXCEPTION_ASSERT (myComponentJObj_ != NULL);
a43 1
   getJNIEnv ()->DeleteGlobalRef (myComponentJObj_);
d66 1
a66 1
   theProblemJObj  = theProblem->getComponentJOR ()->myComponentJObj_;
d96 1
a96 1
   thePartJObj       = thePart->getComponentJOR ()->myComponentJObj_;
d127 1
a127 1
   theProblemJObj   = theProblem->getComponentJOR ()->myComponentJObj_;
d156 2
a157 2
   theOpnJObj    = theOpn ->getComponentJOR ()->myComponentJObj_;
   thePartJObj   = thePart->getComponentJOR ()->myComponentJObj_;
d185 2
a186 2
   theBomEntJObj = theBomEnt->getComponentJOR ()->myComponentJObj_;
   thePartJObj   = thePart  ->getComponentJOR ()->myComponentJObj_;
d212 2
a213 2
   theOpnJObj    = theOpn ->getComponentJOR ()->myComponentJObj_;
   thePartJObj   = thePart->getComponentJOR ()->myComponentJObj_;
d237 1
a237 1
   theProblemJObj = theProblem->getComponentJOR ()->myComponentJObj_;
a250 29
_jobject * WitJ::ComponentJOR::newPeggingTripleJObj (
      int    thePeriod,
      double theVolume)
   {
   _jobject * thePeggingTripleJObj;

   thePeggingTripleJObj =
      getJNIEnv ()->
         NewObject (
            ourPeggingTripleJCl_,
            ctorPeggingTripleJMeth_,
            myComponentJObj_,
            thePeriod,
            theVolume);
               
   throwAnyJavaException ();

   return thePeggingTripleJObj;
   }

//------------------------------------------------------------------------------

_jobject * WitJ::ComponentJOR::getComponentJObj ()
   {
   return myComponentJObj_;
   }

//------------------------------------------------------------------------------

a308 3

   ourPeggingTripleJCl_ =
      newJClassGRef (theJNIEnv, "com/ibm/witj/PeggingTriple");
a359 7
   ctorPeggingTripleJMeth_ =
      getJMethodID (
         theJNIEnv,
         "com/ibm/witj/PeggingTriple",
         "<init>",
         "(Lcom/ibm/witj/Component;ID)V");

@

