head	1.29;
access;
symbols;
locks; strict;
comment	@ * @;


1.29
date	2011.04.15.19.12.29;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2011.04.15.19.01.04;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.04.15.15.49.01;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.04.15.00.07.19;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.04.14.16.11.39;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2011.04.13.22.36.19;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.04.12.00.33.09;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.04.11.18.38.16;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2011.04.05.22.25.37;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2011.04.01.23.24.58;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.04.01.19.23.32;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.03.29.23.38.42;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.03.19.00.26.06;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.02.15.20.18.56;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.06.05.15.08.21;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.01.29.22.06.36;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.23.19.32.22;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.21.21.43.21;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.01.16.17.03.33;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.16.16.32.01;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.15.17.17.38;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.12.23.38.30;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.12.19.29.24;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.25.21.58.16;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.06.14.58.26;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.10.01.22.59.57;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.29.15.26.11;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.29.15.05.35;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.26.22.21.20;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Java CppObjRep classes
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source file AttBldrCOR.C.
//
// Contains the C++ implementations of the native methods of Java class
// witj.AttBldrCOR.
//------------------------------------------------------------------------------

#include     <NativeMacros.h>
#include <ExceptionHandler.h>
#include           <CORJOR.h>
#include          <AttBldr.h>
#include        <StringJOR.h>

using namespace WitJ;

//------------------------------------------------------------------------------

NATIVE_METHOD (jboolean, AttBldrCOR, hasAttFor) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttBldrCORJObj,
      _jstring * scopedAttNameJStr)
   {
   BEGIN_TRY_BLOCK

   CORJOR <AttBldr> theAttBldrCJOR    (theAttBldrCORJObj, theJNIEnv);
   StringJOR        scopedAttNameSJOR (scopedAttNameJStr, theJNIEnv);

   return
      theAttBldrCJOR.
         getCppObject ()->
            hasAttFor (
               scopedAttNameSJOR.getCString ());

   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, false)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (jboolean, AttBldrCOR, isEmpty) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttBldrCORJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <AttBldr> theAttBldrCJOR (theAttBldrCORJObj, theJNIEnv);

   return theAttBldrCJOR.getCppObject ()->isEmpty ();

   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, false)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, AttBldrCOR, print) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttBldrCORJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <AttBldr> theAttBldrCJOR (theAttBldrCORJObj, theJNIEnv);

   theAttBldrCJOR.getCppObject ()->print ();

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, AttBldrCOR, acquireNewCppObject) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttBldrCORJObj,
      _jobject * theCoordCORJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <AttBldr>     theAttBldrCJOR (theAttBldrCORJObj, theJNIEnv);
   CORJOR <Coordinator> theCoordCJOR   (theCoordCORJObj,   theJNIEnv);
   AttBldr *            theAttBldr;

   theAttBldr = new AttBldr (theCoordCJOR.getCppObject ());

   theAttBldrCJOR.acquire (theAttBldr);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }
@


1.28
log
@Class template CORJOR
@
text
@d69 1
a69 1
NATIVE_METHOD (void, AttBldrCOR, createCppObject) (
@


1.27
log
@Class StringJOR
@
text
@d28 5
a32 1
   return theAttBldrCJOR->hasAttFor (scopedAttNameSJOR.getCString ());
d47 1
a47 1
   return theAttBldrCJOR->isEmpty ();
d62 1
a62 1
   theAttBldrCJOR->print ();
d78 1
d80 3
a82 1
   theAttBldrCJOR = new AttBldr (theCoordCJOR);
@


1.26
log
@Class template CORJOR
@
text
@d28 1
a28 1
   return theAttBldrCJOR->hasAttFor (scopedAttNameSJOR);
@


1.25
log
@Class StringJOR
@
text
@d10 1
d25 2
a26 2
   AttBldr * theAttBldr;
   StringJOR scopedAttNameSJOR (scopedAttNameJStr, theJNIEnv);
d28 1
a28 3
   theAttBldr = getAttBldr     (theAttBldrCORJObj, theJNIEnv);

   return theAttBldr->hasAttFor (scopedAttNameSJOR);
d41 1
a41 3
   AttBldr * theAttBldr;

   theAttBldr = getAttBldr (theAttBldrCORJObj, theJNIEnv);
d43 1
a43 1
   return theAttBldr->isEmpty ();
d56 1
a56 3
   AttBldr * theAttBldr;

   theAttBldr = getAttBldr (theAttBldrCORJObj, theJNIEnv);
d58 1
a58 1
   theAttBldr->print ();
d72 2
a73 6
   Coordinator * theCoord;
   AttBldr *     theAttBldr;

   theCoord   = getCoordinator (theCoordCORJObj, theJNIEnv);

   theAttBldr = new AttBldr (theCoord);
d75 1
a75 1
   JniClient::transferTo (theAttBldrCORJObj, theAttBldr, theJNIEnv);
@


1.24
log
@Removed namespace JniUtil.
@
text
@d29 1
a29 1
   return theAttBldr->hasAttFor (scopedAttNameSJOR.getCString ());
@


1.23
log
@Class StringJOR
@
text
@a8 1
#include          <JniUtil.h>
a13 1
using namespace WitJ::JniUtil;
d84 1
a84 1
   transferTo (theAttBldrCORJObj, theAttBldr, theJNIEnv);
@


1.22
log
@Class WString
@
text
@d12 1
a12 1
#include          <WString.h>
d27 1
a27 1
   WString   scopedAttNameWStr;
d29 1
a29 3
   theAttBldr = getAttBldr (theAttBldrCORJObj, theJNIEnv);

   copyInto (scopedAttNameWStr, scopedAttNameJStr, theJNIEnv);
d31 1
a31 1
   return theAttBldr->hasAttFor (scopedAttNameWStr.getCString ());
@


1.21
log
@Namespace JniUtil.
@
text
@d12 1
a12 1
#include           <String.h>
d27 1
a27 1
   String    scopedAttNameStr;
d31 1
a31 1
   copyInto (scopedAttNameStr, scopedAttNameJStr, theJNIEnv);
d33 1
a33 1
   return theAttBldr->hasAttFor (scopedAttNameStr.getCString ());
@


1.20
log
@JniAsst
@
text
@d9 1
a10 1
#include          <JniAsst.h>
d15 1
d29 1
a29 1
   theAttBldr = JniAsst::getAttBldr (theAttBldrCORJObj, theJNIEnv);
d31 1
a31 1
   theAttBldr->getJniAsst ()->copyInto (scopedAttNameStr, scopedAttNameJStr);
d48 1
a48 1
   theAttBldr = JniAsst::getAttBldr (theAttBldrCORJObj, theJNIEnv);
d65 1
a65 1
   theAttBldr = JniAsst::getAttBldr (theAttBldrCORJObj, theJNIEnv);
d84 1
a84 1
   theCoord    = JniAsst::getCoordinator (theCoordCORJObj, theJNIEnv);
d86 1
a86 1
   theAttBldr  = new AttBldr (theCoord);
d88 1
a88 1
   theAttBldr->getJniAsst ()->transferTo (theAttBldrCORJObj, theAttBldr);
@


1.19
log
@Replaced newHeldCString with copyInto.
@
text
@d10 1
a10 1
#include       <NativeCall.h>
d25 2
a26 3
   NativeCall theCall (theJNIEnv);
   AttBldr *  theAttBldr;
   String     scopedAttNameStr;
d28 1
a28 1
   theAttBldr = theCall.getJavaAccObj (theAttBldrCORJObj)->asAttBldr ();
d30 1
a30 1
   theCall.copyInto (scopedAttNameStr, scopedAttNameJStr);
d45 1
a45 2
   NativeCall theCall (theJNIEnv);
   AttBldr *  theAttBldr;
d47 1
a47 1
   theAttBldr = theCall.getJavaAccObj (theAttBldrCORJObj)->asAttBldr ();
d62 1
a62 2
   NativeCall theCall (theJNIEnv);
   AttBldr *  theAttBldr;
d64 1
a64 1
   theAttBldr = theCall.getJavaAccObj (theAttBldrCORJObj)->asAttBldr ();
a79 1
   NativeCall    theCall (theJNIEnv);
d83 1
a83 1
   theCoord    = theCall.getJavaAccObj (theCoordCORJObj)->asCoordinator ();
d87 1
a87 1
   theCall.transferTo (theAttBldrCORJObj, theAttBldr);
@


1.18
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@d12 1
d25 3
a27 3
   NativeCall   theCall (theJNIEnv);
   AttBldr *    theAttBldr;
   const char * scopedAttNameCStr;
d29 1
a29 1
   theAttBldr        = theCall.getJavaAccObj (theAttBldrCORJObj)->asAttBldr ();
d31 1
a31 1
   scopedAttNameCStr = theCall.newHeldCString (scopedAttNameJStr);
d33 1
a33 1
   return theAttBldr->hasAttFor (scopedAttNameCStr);
@


1.17
log
@Revised the arguments to eqHeurAlloc.
@
text
@d90 1
a90 1
   theCall.associate (theAttBldrCORJObj, theAttBldr);
@


1.16
log
@CPLEX
@
text
@d28 1
a28 1
   theAttBldr        = theCall.getObject (theAttBldrCORJObj)->asAttBldr ();
d48 1
a48 1
   theAttBldr = theCall.getObject (theAttBldrCORJObj)->asAttBldr ();
d66 1
a66 1
   theAttBldr = theCall.getObject (theAttBldrCORJObj)->asAttBldr ();
d86 1
a86 1
   theCoord    = theCall.getObject (theCoordCORJObj)->asCoordinator ();
@


1.15
log
@Changed the name each native method that creates a C++ object to
   createCppObject.
@
text
@d30 1
a30 1
   scopedAttNameCStr = theCall.makeCString (scopedAttNameJStr);
@


1.14
log
@Implemented Java class CppGateway.
@
text
@d75 1
a75 1
NATIVE_METHOD (void, AttBldrCOR, createMyCppAttBldr) (
@


1.13
log
@Coordinator
@
text
@a16 22
NATIVE_METHOD (void, AttBldrCOR, createMyCppAttBldr) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttBldrCORJObj,
      _jobject * theCoordCORJObj)
   {
   BEGIN_TRY_BLOCK

   NativeCall    theCall (theJNIEnv);
   Coordinator * theCoord;
   AttBldr *     theAttBldr;

   theCoord    = theCall.getObject (theCoordCORJObj)->asCoordinator ();

   theAttBldr  = new AttBldr (theCoord);

   theCall.transferTo (theAttBldrCORJObj, theAttBldr);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

d72 22
@


1.12
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d20 1
a20 1
      _jobject * theCoordinatorCORJObj)
d25 1
a25 1
   Coordinator * theCoordinator;
d28 1
a28 1
   theCoordinator = theCall.getObject (theCoordinatorCORJObj)->asCoordinator ();
d30 1
a30 1
   theAttBldr     = new AttBldr (theCoordinator);
@


1.11
log
@Change the mname of the ProbCtr classes to ProbMgr in both Java and C++.
@
text
@d20 1
a20 1
      _jobject * theProbMgrCORJObj)
d24 3
a26 3
   NativeCall theCall (theJNIEnv);
   ProbMgr *  theProbMgr;
   AttBldr *  theAttBldr;
d28 1
a28 1
   theProbMgr = theCall.getObject (theProbMgrCORJObj)->asProbMgr ();
d30 1
a30 1
   theAttBldr = new AttBldr (theProbMgr);
@


1.10
log
@Continued implementation of the ProbCtr classes.
@
text
@d20 1
a20 1
      _jobject * theProbCtrCORJObj)
d25 1
a25 1
   ProbCtr *  theProbCtr;
d28 1
a28 1
   theProbCtr = theCall.getObject (theProbCtrCORJObj)->asProbCtr ();
d30 1
a30 1
   theAttBldr = new AttBldr (theProbCtr);
@


1.9
log
@Initial implementation of class ExceptionHandler.
@
text
@d20 1
a20 1
      _jobject * theProblemCORJObj)
d25 1
a25 1
   Problem *  theProblem;
d28 1
a28 1
   theProblem = theCall.getObject (theProblemCORJObj)->asProblem ();
d30 1
a30 1
   theAttBldr = new AttBldr (theProblem);
@


1.8
log
@Imbedded every native method implementation in a canonical try block.
@
text
@d8 4
a11 4
#include  <NativeMacros.h>
#include <WitjException.h>
#include    <NativeCall.h>
#include       <AttBldr.h>
d56 1
a56 1
   END_TRY_BLOCK_RETURNING_VALUE (theJNIEnv, false)
d74 1
a74 1
   END_TRY_BLOCK_RETURNING_VALUE (theJNIEnv, false)
@


1.7
log
@Changed to all upper case for the names of macros.
@
text
@d8 4
a11 3
#include <NativeMacros.h>
#include   <NativeCall.h>
#include      <AttBldr.h>
d22 2
d33 2
d44 2
d55 2
d65 2
d73 2
d83 2
d91 2
@


1.6
log
@Dismantling class SessionCOR.
@
text
@d16 1
a16 1
nativeMethod (void, AttBldrCOR, createMyCppAttBldr) (
d34 1
a34 1
nativeMethod (jboolean, AttBldrCOR, hasAttFor) (
d52 1
a52 1
nativeMethod (jboolean, AttBldrCOR, isEmpty) (
d66 1
a66 1
nativeMethod (void, AttBldrCOR, print) (
@


1.5
log
@Minor revision.
@
text
@d19 1
a19 1
      _jobject * theSessionCORJObj)
d22 1
a22 1
   Session *  theSession;
d25 1
a25 1
   theSession = theCall.getObject (theSessionCORJObj)->asSession ();
d27 1
a27 1
   theAttBldr = new AttBldr (theSession);
@


1.4
log
@Minor revision.
@
text
@d52 1
a52 1
nativeMethod (jboolean, AttBldrCOR, getEmptyMode) (
d61 1
a61 1
   return theAttBldr->getEmptyMode ();
@


1.3
log
@Changed name of C++ class JniHandler to NativeCall.
@
text
@d52 1
a52 1
nativeMethod (jboolean, AttBldrCOR, isEmpty) (
d61 1
a61 1
   return theAttBldr->isEmpty ();
@


1.2
log
@Moved macro nativeMethod to its own header file.
@
text
@d9 1
a9 1
#include   <JniHandler.h>
d21 1
a21 1
   JniHandler theJniHand (theJNIEnv);
d25 1
a25 1
   theSession = theJniHand.getObject (theSessionCORJObj)->asSession ();
d29 1
a29 1
   theJniHand.transferTo (theAttBldrCORJObj, theAttBldr);
d39 1
a39 1
   JniHandler   theJniHand (theJNIEnv);
d43 1
a43 1
   theAttBldr        = theJniHand.getObject (theAttBldrCORJObj)->asAttBldr ();
d45 1
a45 1
   scopedAttNameCStr = theJniHand.makeCString (scopedAttNameJStr);
d56 1
a56 1
   JniHandler theJniHand (theJNIEnv);
d59 1
a59 1
   theAttBldr = theJniHand.getObject (theAttBldrCORJObj)->asAttBldr ();
d70 1
a70 1
   JniHandler theJniHand (theJNIEnv);
d73 1
a73 1
   theAttBldr = theJniHand.getObject (theAttBldrCORJObj)->asAttBldr ();
@


1.1
log
@Numerous class name changes.
@
text
@d8 3
a10 2
#include <JniHandler.h>
#include    <AttBldr.h>
@

