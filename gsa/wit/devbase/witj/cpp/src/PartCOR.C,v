head	1.36;
access;
symbols;
locks; strict;
comment	@ * @;


1.36
date	2011.04.15.19.12.32;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2011.04.15.19.01.08;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2011.04.15.15.49.05;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.04.15.00.07.25;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.04.14.16.11.42;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.04.13.22.36.25;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.04.12.00.33.13;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2011.04.11.18.38.19;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2011.04.06.23.29.24;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.04.05.22.25.45;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.04.01.23.25.04;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.04.01.19.23.35;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2011.03.29.23.38.48;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.03.19.00.26.12;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.03.15.20.56.46;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2011.02.15.20.19.00;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.06.05.15.08.22;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.02.24.17.44.57;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.02.03.23.18.07;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.02.03.16.32.27;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.01.31.00.56.26;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.01.29.22.06.38;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.01.23.19.32.23;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.21.21.43.23;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.16.17.03.35;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.01.16.16.32.02;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.15.17.17.39;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.12.23.38.31;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.12.19.29.26;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.10.14.22.17.46;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.06.14.52.39;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.01.22.33.04;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.29.22.43.47;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.29.15.26.12;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.29.15.05.36;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.26.22.21.22;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.36
log
@Java CppObjRep classes
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source file PartCOR.C.
//
// Contains the C++ implementations of the native methods of Java class
// witj.PartCOR.
//------------------------------------------------------------------------------

#include     <NativeMacros.h>
#include <ExceptionHandler.h>
#include           <CORJOR.h>
#include             <Part.h>
#include      <Coordinator.h>
#include        <StringJOR.h>
#include     <ArrayListJOR.h>

using namespace WitJ;

//------------------------------------------------------------------------------

NATIVE_METHOD (void, PartCOR, setPartName) (
      JNIEnv *   theJNIEnv,
      _jobject * thePartCORJObj,
      _jstring * thePartNameJStr)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Part> thePartCJOR     (thePartCORJObj,  theJNIEnv);
   StringJOR     thePartNameSJOR (thePartNameJStr, theJNIEnv);

   thePartCJOR.
      getCppObject ()->
         setPartName (
            thePartNameSJOR.getCString ());

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, PartCOR, getBelowList) (
      JNIEnv *   theJNIEnv,
      _jobject * thePartCORJObj,
      _jobject * theBelowListJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Part>    thePartCJOR   (thePartCORJObj,   theJNIEnv);
   CompALJOR <Part> theBelowALJOR (theBelowListJObj, theJNIEnv);

   thePartCJOR.getCppObject ()->getBelowList (theBelowALJOR);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, PartCOR, acquireNewCppObject) (
      JNIEnv *   theJNIEnv,
      _jobject * thePartCORJObj,
      _jobject * theCoordCORJObj,
      _jstring * thePartNameJStr,
      jboolean   isMaterial)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Part>        thePartCJOR     (thePartCORJObj,  theJNIEnv);
   CORJOR <Coordinator> theCoordCJOR    (theCoordCORJObj, theJNIEnv);
   StringJOR            thePartNameSJOR (thePartNameJStr, theJNIEnv);
   Part *               thePart;

   thePart =
      new Part (
         theCoordCJOR   .getCppObject (),
         thePartNameSJOR.getCString   (),
         isMaterial);

   thePartCJOR.acquire (thePart);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }
@


1.35
log
@Class template CORJOR
@
text
@d57 1
a57 1
NATIVE_METHOD (void, PartCOR, createCppObject) (
@


1.34
log
@Class StringJOR
@
text
@d30 4
a33 1
   thePartCJOR->setPartName (thePartNameSJOR.getCString ());
d50 1
a50 1
   thePartCJOR->getBelowList (theBelowALJOR);
d69 1
d71 1
a71 1
   thePartCJOR =
d73 2
a74 2
         theCoordCJOR,
         thePartNameSJOR.getCString (),
d77 2
@


1.33
log
@Class template CORJOR
@
text
@d30 1
a30 1
   thePartCJOR->setPartName (thePartNameSJOR);
d67 5
a71 1
   thePartCJOR = new Part (theCoordCJOR, thePartNameSJOR, isMaterial);
@


1.32
log
@Class StringJOR
@
text
@d10 1
d27 2
a28 4
   Part *    thePart;
   StringJOR thePartNameSJOR (thePartNameJStr, theJNIEnv);

   thePart = getPart         (thePartCORJObj,  theJNIEnv);
d30 1
a30 1
   thePart->setPartName (thePartNameSJOR);
d44 1
a44 1
   Part *           thePart;
d47 1
a47 3
   thePart = getPart              (thePartCORJObj,   theJNIEnv);

   thePart->getBelowList (theBelowALJOR);
d63 3
a65 7
   Coordinator * theCoord;
   StringJOR     thePartNameSJOR (thePartNameJStr, theJNIEnv);
   Part *        thePart;

   theCoord = getCoordinator     (theCoordCORJObj, theJNIEnv);

   thePart  = new Part (theCoord, thePartNameSJOR, isMaterial);
d67 1
a67 1
   JniClient::transferTo (thePartCORJObj, thePart, theJNIEnv);
@


1.31
log
@Removed namespace JniUtil.
@
text
@d31 1
a31 1
   thePart->setPartName (thePartNameSJOR.getCString ());
d72 1
a72 1
   thePart  = new Part (theCoord, thePartNameSJOR.getCString (), isMaterial);
@


1.30
log
@Class StringJOR
@
text
@a8 1
#include          <JniUtil.h>
a15 1
using namespace WitJ::JniUtil;
d74 1
a74 1
   transferTo (thePartCORJObj, thePart, theJNIEnv);
@


1.29
log
@Class WString
@
text
@d13 1
a13 1
#include          <WString.h>
d28 2
a29 2
   Part *  thePart;
   WString thePartNameWStr;
d31 1
a31 1
   thePart = getPart (thePartCORJObj, theJNIEnv);
d33 1
a33 3
   copyInto (thePartNameWStr, thePartNameJStr, theJNIEnv);

   thePart->setPartName (thePartNameWStr.getCString ());
d69 1
a69 1
   WString       thePartNameWStr;
d72 1
a72 3
   theCoord = getCoordinator (theCoordCORJObj, theJNIEnv);

   copyInto (thePartNameWStr, thePartNameJStr, theJNIEnv);
d74 1
a74 1
   thePart  = new Part (theCoord, thePartNameWStr.getCString (), isMaterial);
@


1.28
log
@getBelowList
@
text
@d13 1
a13 1
#include           <String.h>
d28 2
a29 2
   Part * thePart;
   String thePartNameStr;
d33 1
a33 1
   copyInto (thePartNameStr, thePartNameJStr, theJNIEnv);
d35 1
a35 1
   thePart->setPartName (thePartNameStr.getCString ());
d71 1
a71 1
   String        thePartNameStr;
d76 1
a76 1
   copyInto (thePartNameStr, thePartNameJStr, theJNIEnv);
d78 1
a78 1
   thePart  = new Part (theCoord, thePartNameStr.getCString (), isMaterial);
@


1.27
log
@Namespace JniUtil.
@
text
@d14 1
d42 19
@


1.26
log
@JniAsst
@
text
@d9 1
a10 1
#include          <JniAsst.h>
d16 1
d30 1
a30 1
   thePart = JniAsst::getPart (thePartCORJObj, theJNIEnv);
d32 1
a32 1
   thePart->getJniAsst ()->copyInto (thePartNameStr, thePartNameJStr);
d54 1
a54 1
   theCoord = JniAsst::getCoordinator (theCoordCORJObj, theJNIEnv);
d56 1
a56 1
   theCoord->getJniAsst ()->copyInto (thePartNameStr, thePartNameJStr);
d60 1
a60 1
   thePart ->getJniAsst ()->transferTo (thePartCORJObj, thePart);
@


1.25
log
@Replaced newHeldCString with copyInto.
@
text
@d10 1
a10 1
#include       <NativeCall.h>
d12 1
d26 2
a27 3
   NativeCall theCall (theJNIEnv);
   Part *     thePart;
   String     thePartNameStr;
d29 1
a29 1
   thePart = theCall.getJavaAccObj (thePartCORJObj)->asPart ();
d31 1
a31 1
   theCall.copyInto (thePartNameStr, thePartNameJStr);
a48 1
   NativeCall    theCall (theJNIEnv);
d53 1
a53 1
   theCoord = theCall.getJavaAccObj (theCoordCORJObj)->asCoordinator ();
d55 1
a55 1
   theCall.copyInto (thePartNameStr, thePartNameJStr);
d59 1
a59 1
   theCall.transferTo (thePartCORJObj, thePart);
@


1.24
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@d12 1
d25 3
a27 3
   NativeCall   theCall (theJNIEnv);
   Part *       thePart;
   const char * thePartNameCStr;
d29 1
a29 1
   thePart         = theCall.getJavaAccObj (thePartCORJObj)->asPart ();
d31 1
a31 1
   thePartNameCStr = theCall.newHeldCString (thePartNameJStr);
d33 1
a33 1
   thePart->setPartName (thePartNameCStr);
d51 1
a51 1
   const char *  thePartNameCStr;
d54 1
a54 1
   theCoord        = theCall.getJavaAccObj (theCoordCORJObj)->asCoordinator ();
d56 1
a56 1
   thePartNameCStr = theCall.newHeldCString (thePartNameJStr);
d58 1
a58 1
   thePart = new Part (theCoord, thePartNameCStr, isMaterial);
@


1.23
log
@Revised the arguments to eqHeurAlloc.
@
text
@d44 1
a44 1
      jboolean   theCategoryIsMaterial)
d57 1
a57 1
   thePart = new Part (theCoord, thePartNameCStr, theCategoryIsMaterial);
d59 1
a59 1
   theCall.associate (thePartCORJObj, thePart);
@


1.22
log
@Renamed JavaObjRep to CORJOR.
@
text
@d28 1
a28 1
   thePart         = theCall.getObject (thePartCORJObj)->asPart ();
d53 1
a53 1
   theCoord        = theCall.getObject (theCoordCORJObj)->asCoordinator ();
@


1.21
log
@CPLEX
@
text
@a11 1
#include       <JavaObjRep.h>
@


1.20
log
@Changed the name each native method that creates a C++ object to
   createCppObject.
@
text
@d31 1
a31 1
   thePartNameCStr = theCall.makeCString (thePartNameJStr);
d56 1
a56 1
   thePartNameCStr = theCall.makeCString (thePartNameJStr);
@


1.19
log
@Part.Category by boolean.
@
text
@d40 1
a40 1
NATIVE_METHOD (void, PartCOR, createMyCppPart) (
@


1.18
log
@Part Category
@
text
@a39 24
NATIVE_METHOD (_jstring *, PartCOR, getCategory) (
      JNIEnv *   theJNIEnv,
      _jobject * thePartCORJObj)
   {
   BEGIN_TRY_BLOCK

   NativeCall   theCall (theJNIEnv);
   Part *       thePart;
   const char * thePartCatNameCStr;
   _jstring *   thePartCatNameJStr;

   thePart            = theCall.getObject (thePartCORJObj)->asPart ();

   thePartCatNameCStr = thePart->getCategory ();

   thePartCatNameJStr = theCall.makeJString (thePartCatNameCStr);

   return thePartCatNameJStr;

   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, NULL)
   }

//------------------------------------------------------------------------------

d45 1
a45 1
      _jstring * thePartCatNameJStr)
a51 1
   const char *  thePartCatNameCStr;
d54 1
a54 1
   theCoord           = theCall.getObject (theCoordCORJObj)->asCoordinator ();
d56 1
a56 2
   thePartNameCStr    = theCall.makeCString (thePartNameJStr);
   thePartCatNameCStr = theCall.makeCString (thePartCatNameJStr);
d58 1
a58 1
   thePart = new Part (theCoord, thePartNameCStr, thePartCatNameCStr);
@


1.17
log
@Removed the Alternative classes.
@
text
@d40 1
a40 1
NATIVE_METHOD (jint, PartCOR, getCategoryIndex) (
d46 4
a49 2
   NativeCall theCall (theJNIEnv);
   Part *     thePart;
d51 1
a51 1
   thePart = theCall.getObject (thePartCORJObj)->asPart ();
d53 1
a53 1
   return thePart->getCategoryIndex ();
d55 5
a59 1
   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, -1)
d69 1
a69 1
      jint       thePartCatIdx)
d76 1
d79 1
a79 1
   theCoord        = theCall.getObject (theCoordCORJObj)->asCoordinator ();
d81 2
a82 1
   thePartNameCStr = theCall.makeCString (thePartNameJStr);
d84 1
a84 1
   thePart         = new Part (theCoord, thePartNameCStr, thePartCatIdx);
@


1.16
log
@Part.Category as Alternative
@
text
@a11 1
#include      <Alternative.h>
d40 1
a40 1
NATIVE_METHOD (_jobject *, PartCOR, getCategory) (
d51 1
a51 1
   return thePart->getCategory ()->getJavaObjRep ()->getCORJObj ();
d53 1
a53 1
   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, NULL)
d63 1
a63 1
      _jobject * thePartCatAltCORJObj)
a68 1
   Alternative * thePartCatAlt;
d72 1
a72 2
   theCoord        = theCall.getObject (theCoordCORJObj)     ->asCoordinator ();
   thePartCatAlt   = theCall.getObject (thePartCatAltCORJObj)->asAlternative ();
d76 1
a76 1
   thePart         = new Part (theCoord, thePartNameCStr, thePartCatAlt);
@


1.15
log
@Implemented Java class CppGateway.
@
text
@d12 2
d41 1
a41 1
NATIVE_METHOD (jboolean, PartCOR, getCategoryIsMat) (
d52 1
a52 1
   return thePart->getCategoryIsMat ();
d54 1
a54 1
   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, false)
d64 1
a64 1
      jboolean   theCategoryIsMat)
d70 1
d74 2
a75 1
   theCoord        = theCall.getObject (theCoordCORJObj)->asCoordinator ();
d79 1
a79 2
   thePart         =
      new Part (theCoord, thePartNameCStr, theCategoryIsMat);
@


1.14
log
@Coordinator
@
text
@a10 1
#include       <JavaObjRep.h>
d62 1
a62 2
      jboolean   theCategoryIsMat,
      _jobject * thePartJObj)
a68 1
   JavaObjRep *  thePartJOR;
a74 2
   thePartJOR      = new JavaObjRep (theCall, thePartJObj);

d76 1
a76 1
      new Part (theCoord, thePartNameCStr, theCategoryIsMat, thePartJOR);
d78 1
a78 1
   theCall.transferTo (thePartCORJObj, thePart);
@


1.13
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d61 1
a61 1
      _jobject * theCoordinatorCORJObj,
d69 1
a69 1
   Coordinator * theCoordinator;
d74 1
a74 1
   theCoordinator = theCall.getObject (theCoordinatorCORJObj)->asCoordinator ();
d81 1
a81 1
      new Part (theCoordinator, thePartNameCStr, theCategoryIsMat, thePartJOR);
@


1.12
log
@Change the mname of the ProbCtr classes to ProbMgr in both Java and C++.
@
text
@d61 1
a61 1
      _jobject * theProbMgrCORJObj,
d68 5
a72 5
   NativeCall   theCall (theJNIEnv);
   ProbMgr *    theProbMgr;
   const char * thePartNameCStr;
   JavaObjRep * thePartJOR;
   Part *       thePart;
d74 1
a74 1
   theProbMgr      = theCall.getObject (theProbMgrCORJObj)->asProbMgr ();
d81 1
a81 1
      new Part (theProbMgr, thePartNameCStr, theCategoryIsMat, thePartJOR);
@


1.11
log
@Continued implementation of the ProbCtr classes.
@
text
@d61 1
a61 1
      _jobject * theProbCtrCORJObj,
d69 1
a69 1
   ProbCtr *    theProbCtr;
d74 1
a74 1
   theProbCtr      = theCall.getObject (theProbCtrCORJObj)->asProbCtr ();
d81 1
a81 1
      new Part (theProbCtr, thePartNameCStr, theCategoryIsMat, thePartJOR);
@


1.10
log
@Initial implementation of class ExceptionHandler.
@
text
@d61 1
a61 1
      _jobject * theProblemCORJObj,
d69 1
a69 1
   Problem *    theProblem;
d74 1
a74 1
   theProblem      = theCall.getObject (theProblemCORJObj)->asProblem ();
d81 1
a81 1
      new Part (theProblem, thePartNameCStr, theCategoryIsMat, thePartJOR);
@


1.9
log
@Imbedded every native method implementation in a canonical try block.
@
text
@d8 5
a12 5
#include  <NativeMacros.h>
#include <WitjException.h>
#include    <NativeCall.h>
#include    <JavaObjRep.h>
#include          <Part.h>
d53 1
a53 1
   END_TRY_BLOCK_RETURNING_VALUE (theJNIEnv, false)
@


1.8
log
@Changed to all upper case for the names of macros.
@
text
@d8 5
a12 4
#include <NativeMacros.h>
#include   <NativeCall.h>
#include   <JavaObjRep.h>
#include         <Part.h>
d23 2
d34 2
d44 2
d52 2
d66 2
d84 2
@


1.7
log
@Minot revision.
@
text
@d17 1
a17 1
nativeMethod (void, PartCOR, setPartName) (
d35 1
a35 1
nativeMethod (jboolean, PartCOR, getCategoryIsMat) (
d49 1
a49 1
nativeMethod (void, PartCOR, createMyCppPart) (
@


1.6
log
@Minor revision
@
text
@d35 1
a35 1
nativeMethod (jboolean, PartCOR, getMaterialCase) (
d44 1
a44 1
   return thePart->getMaterialCase ();
d54 1
a54 1
      jboolean   theMaterialCase,
d70 1
a70 1
      new Part (theProblem, thePartNameCStr, theMaterialCase, thePartJOR);
@


1.5
log
@Minor revision.
@
text
@d35 1
a35 1
nativeMethod (jboolean, PartCOR, getMaterialMode) (
d44 1
a44 1
   return thePart->getMaterialMode ();
d54 1
a54 1
      jboolean   theMaterialMode,
d70 1
a70 1
      new Part (theProblem, thePartNameCStr, theMaterialMode, thePartJOR);
@


1.4
log
@Call-back infrastructure.
@
text
@d35 1
a35 1
nativeMethod (jboolean, PartCOR, isAMaterial) (
d44 1
a44 1
   return thePart->isAMaterial ();
d54 1
a54 1
      jboolean   toBeAMaterial,
d69 2
a70 1
   thePart = new Part (theProblem, thePartNameCStr, toBeAMaterial, thePartJOR);
@


1.3
log
@Changed name of C++ class JniHandler to NativeCall.
@
text
@d10 1
d54 2
a55 1
      jboolean   toBeAMaterial)
d60 1
d67 3
a69 1
   thePart         = new Part (theProblem, thePartNameCStr, toBeAMaterial);
@


1.2
log
@Moved macro nativeMethod to its own header file.
@
text
@d9 1
a9 1
#include   <JniHandler.h>
d21 1
a21 1
   JniHandler   theJniHand (theJNIEnv);
d25 1
a25 1
   thePart         = theJniHand.getObject (thePartCORJObj)->asPart ();
d27 1
a27 1
   thePartNameCStr = theJniHand.makeCString (thePartNameJStr);
d38 1
a38 1
   JniHandler theJniHand (theJNIEnv);
d41 1
a41 1
   thePart = theJniHand.getObject (thePartCORJObj)->asPart ();
d55 1
a55 1
   JniHandler   theJniHand (theJNIEnv);
d60 1
a60 1
   theProblem      = theJniHand.getObject (theProblemCORJObj)->asProblem ();
d62 1
a62 1
   thePartNameCStr = theJniHand.makeCString (thePartNameJStr);
d66 1
a66 1
   theJniHand.transferTo (thePartCORJObj, thePart);
@


1.1
log
@Numerous class name changes.
@
text
@d8 3
a10 2
#include <JniHandler.h>
#include       <Part.h>
@

