head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2011.04.15.00.07.19;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.04.12.00.33.09;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.04.08.23.39.52;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.04.06.16.29.01;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.04.06.15.56.34;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.03.30.23.22.59;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.03.30.19.49.50;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.28.15.57.03;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.03.25.22.49.10;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.03.23.20.30.03;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.03.23.14.58.53;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.03.22.20.17.20;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.19.00.26.06;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.03.15.23.02.46;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Class template CORJOR
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File ArrayListJOR.h.
//
// Contains the declaration of the following classes and templates:
//
//    ArrayListJOR
//    IntALJOR
//    DblALJOR
//    StringALJOR
//    CompALJOR <C>
//    DemandALJOR
//    PeggingTripleALJOR
//------------------------------------------------------------------------------

#ifndef ArrayListJOR_h
#define ArrayListJOR_h

#include <JniClient.h>

#include    <vector>

//------------------------------------------------------------------------------
// Class ArrayListJOR
//
// "ArrayList Java Object Representation"
// Represents a Java ArrayList <E> for some element type, E.
//
// An instance of this class stores a local reference to the represented Java
// ArrayList. Thus an instance of this class should always be destroyed
// by the time the native method in which it was created returns.
//
// Class Hierarchy:
//
// JniClient
//    ArrayListJOR
//       IntALJOR
//       DblALJOR
//       StringALJOR
//       CompALJOR <C>
//       DemandALJOR
//       PeggingTripleALJOR
//------------------------------------------------------------------------------

namespace WitJ
{
class ArrayListJOR: public JniClient
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   static void setUpJni (JNIEnv *);
      //
      // Sets up the interaction between this class and JNI.

   void clearAndAllocate (int minCapacity);
      //
      // Removes all of the elements from the represented Java ArrayList <E>.
      // Increases the storage capacity of the represented Java ArrayList <E> to
      // at least minCapacity.

   //---------------------------------------------------------------------------
   // Protected member functions.
   //---------------------------------------------------------------------------

   protected:

   explicit ArrayListJOR (_jobject * theArrayListJObj, JNIEnv *);
      //
      // Constructor.
      // theArrayListJObj should be a local reference to a Java ArrayList <E>
      // for some element type, E.

   ~ArrayListJOR ();
      //
      // Destructor.

   int size ();
      //
      // Returns the # of elements in the represented Java ArrayList <E>.

   void add (_jobject * theJObject);
      //
      // Appends the Java Object referenced by theJObject to the end of the
      // represented Java ArrayList <E>.
      // The Java Object referenced by theJObject must be of type E.

   _jobject * get (int theIdx);
      //
      // Creates and returns a local reference to the Java Object of type E
      // stored by the represented Java ArrayList <E> at theIdx.
      // Performs range checking on theIdx.
                                                               
   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   ArrayListJOR              (const ArrayListJOR &);
   ArrayListJOR & operator = (const ArrayListJOR &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   static _jmethodID *          clearJMeth_;
   static _jmethodID * ensureCapacityJMeth_;
   static _jmethodID *           sizeJMeth_;
   static _jmethodID *            addJMeth_;
   static _jmethodID *            getJMeth_;
      //
      // The JNI method IDs for the following Java class ArrayList methods:
      //    clear
      //    ensureCapacity
      //    size
      //    add
      //    get

   //---------------------------------------------------------------------------

   _jobject * const myArrayListJObj_;
      //          
      // A local reference to the represented Java ArrayList.
   };
};
//
// End of namespace WitJ.

//------------------------------------------------------------------------------
// Class IntALJOR
//
// "Integer ArrayList Java Object Representation"
// Represents a Java ArrayList <Integer>.
//
// Class Hierarchy:
//
// JniClient
//    ArrayListJOR
//       IntALJOR
//------------------------------------------------------------------------------

namespace WitJ
{
class IntALJOR: public ArrayListJOR
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   static void setUpJni (JNIEnv *);
      //
      // Sets up the interaction between this class and JNI.

   explicit IntALJOR (_jobject * theIntArrayListJObj, JNIEnv *);
      //
      // Constructor.
      // theIntArrayListJObj must reference a Java ArrayList <Integer>.

   ~IntALJOR ();
      //
      // Destructor.

   void copyFrom (const int * theIntCVec, int theLength);
      //
      // Copies theIntCVec into the represented Java ArrayList <Integer>,
      // where theLength is taken to be the length of theIntCVec.

   void copyInto (std::vector <int> & theIntVec);
      //
      // Copies the represented Java ArrayList <Integer> into theIntVec.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   IntALJOR              (const IntALJOR &);
   IntALJOR & operator = (const IntALJOR &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   static _jmethodID * intValueJMeth_;
      //
      // The JNI method ID for the intValue method of Java class Integer.
   };
};
//
// End of namespace WitJ.

//------------------------------------------------------------------------------
// Class DblALJOR
//
// "Double ArrayList Java Object Representation"
// Represents a Java ArrayList <Double>.
//
// Class Hierarchy:
//
// JniClient
//    ArrayListJOR
//       DblALJOR
//------------------------------------------------------------------------------

namespace WitJ
{
class DblALJOR: public ArrayListJOR
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   static void setUpJni (JNIEnv *);
      //
      // Sets up the interaction between this class and JNI.

   explicit DblALJOR (_jobject * theDblArrayListJObj, JNIEnv *);
      //
      // Constructor.
      // theDblArrayListJObj must reference a Java ArrayList <Double>.

   ~DblALJOR ();
      //
      // Destructor.

   void copyFrom (const double * theDblCVec, int theLength);
      //
      // Copies theDblCVec into the represented Java ArrayList <Double>,
      // where theLength is taken to be the length of theDblCVec.

   void copyInto (std::vector <double> & theDblVec);
      //
      // Copies the represented Java ArrayList <Double> into theDblVec.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   DblALJOR              (const DblALJOR &);
   DblALJOR & operator = (const DblALJOR &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   static _jmethodID * doubleValueJMeth_;
      //
      // The JNI method ID for the doubleValue method of Java class Double.
   };
};
//
// End of namespace WitJ.

//------------------------------------------------------------------------------
// Class StringALJOR
//
// "String ArrayList Java Object Representation"
// Represents a Java ArrayList <String>.
//
// Class Hierarchy:
//
// JniClient
//    ArrayListJOR
//       StringALJOR
//------------------------------------------------------------------------------

namespace WitJ
{
class StringALJOR: public ArrayListJOR
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit StringALJOR (_jobject * theStringArrayListJObj, JNIEnv *);
      //
      // Constructor.
      // theStringArrayListJObj must reference a Java ArrayList <String>.

   ~StringALJOR ();
      //
      // Destructor.

   void copyFrom (const char * const * theCStrCVec, int theLength);
      //
      // Copies theCStrCVec into the represented Java ArrayList <String>,
      // where theLength is taken to be the length of theCStrCVec.

   void copyInto (StringVec & theStringVec);
      //
      // Copies the represented Java ArrayList <String> into theStringVec.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   StringALJOR              (const StringALJOR &);
   StringALJOR & operator = (const StringALJOR &);
      //
      // Not implemented; prevents accidental copying and assignment.
   };
};
//
// End of namespace WitJ.

//------------------------------------------------------------------------------
// Class template CompALJOR <C>
//
// "Component ArrayList Java Object Representation"
// Represents a Java ArrayList <C extends Component>.
// C is to be a C++ class derived from Component.
//
// Class Hierarchy:
//
// JniClient
//    ArrayListJOR
//       CompALJOR <C>
//------------------------------------------------------------------------------

namespace WitJ
{
template <typename C>
      class CompALJOR: public ArrayListJOR
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit CompALJOR (_jobject * theCompArrayListJObj, JNIEnv *);
      //
      // Constructor.
      // theCompArrayListJObj must reference a Java
      // ArrayList <C extends Component>.

   ~CompALJOR ();
      //
      // Destructor.

   void add (C * theC);
      //
      // Appends the instance Java class C corresponding to theC to the end of
      // the represented Java ArrayList <C>.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   CompALJOR              (const CompALJOR &);
   CompALJOR & operator = (const CompALJOR &);
      //
      // Not implemented; prevents accidental copying and assignment.
   };
};
//
// End of namespace WitJ.

//------------------------------------------------------------------------------
// Class DemandALJOR
//
// "Demand ArrayList Java Object Representation"
// Represents a Java ArrayList <Demand>.
//
// Class Hierarchy:
//
// JniClient
//    ArrayListJOR
//       DemandALJOR
//------------------------------------------------------------------------------

namespace WitJ
{
class DemandALJOR: public ArrayListJOR
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   static void setUpJni (JNIEnv *);
      //
      // Sets up the interaction between this class and JNI.

   explicit DemandALJOR (_jobject * theDemandArrayListJObj, JNIEnv *);
      //
      // Constructor.
      // theDemandArrayListJObj must reference a Java ArrayList <Demand>.

   ~DemandALJOR ();
      //
      // Destructor.

   void populateIDVecs (
         std::vector <const char *> & thePartNameVec,
         std::vector <const char *> & theDemandNameVec);
      //
      // Populates thePartNameVec and theDemandNameVec with the partNames and
      // demandNames of the Demands in the Java ArrayList <Demand> represented
      // by this DemandALJOR.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   static _jmethodID * getDemandCORJMeth_;
      //
      // The JNI method ID for the getDemandCOR method of Java class Demand.

   private:

   DemandALJOR              (const DemandALJOR &);
   DemandALJOR & operator = (const DemandALJOR &);
      //
      // Not implemented; prevents accidental copying and assignment.
   };
};
//
// End of namespace WitJ.

//------------------------------------------------------------------------------
// Class PeggingTripleALJOR
//
// "PeggingTriple ArrayList Java Object Representation"
// Represents a Java ArrayList <PeggingTriple <C>> for some Java Component class
// C.
//
// Class Hierarchy:
//
// JniClient
//    ArrayListJOR
//       PeggingTripleALJOR
//------------------------------------------------------------------------------

namespace WitJ
{
class PeggingTripleALJOR: public ArrayListJOR
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   static void setUpJni (JNIEnv *);
      //
      // Sets up the interaction between this class and JNI.

   explicit PeggingTripleALJOR (_jobject * theTripleListJObj, JNIEnv *);
      //
      // Constructor.
      // theTripleListJObj must reference a Java ArrayList <PeggingTriple <C>>.

   ~PeggingTripleALJOR ();
      //
      // Destructor.

   void add (Component * theComp, int thePeriod, double theVolume);
      //
      // theComp must be an instance of the C++ class corresponding to the Java
      // class C for this PeggingTripleALJOR.
      // Constructs a Java PeggingTriple <C> from the Java C instance
      // corresponding to theComp along with thePeriod and theVolume and appends
      // the new PeggingTriple <C> to the represented Java
      // ArrayList <PeggingTriple <C>>.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   PeggingTripleALJOR              (const PeggingTripleALJOR &);
   PeggingTripleALJOR & operator = (const PeggingTripleALJOR &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   static _jclass * ourPeggingTripleJCl_;
      //
      // A global reference to the (raw) WIT-J/Java class PeggingTriple.

   static _jmethodID * ctorPeggingTripleJMeth_;
      //
      // The _jmethodID of the ctor for WIT-J/Java class PeggingTriple.
   };
};
//
// End of namespace WitJ.

#endif
@


1.13
log
@Class StringJOR
@
text
@d4 1
a4 1
// Contains the declaration of the following classes and templetes:
@


1.12
log
@Removed C++ class JavaObjRep.
@
text
@d4 1
a4 1
// Contains the declaration of the following clases and templetes:
d28 3
a30 6
// An instance of this class stores a reference to the represented Java
// ArrayList. This reference is passed in through the ctor and is assumed to be
// a local reference. Thus an instance of this class should always be destroyed
// by the time the native method in which it was created returns. This is
// normally done by declaring the instance as a local non-heap variable in the
// native method implementation.
d73 2
a74 2
      // theArrayListJObj must reference a Java ArrayList <E> for some element
      // type, E.
d128 1
a128 1
      // A reference (presumed local) to the represented Java ArrayList.
d500 1
@


1.11
log
@intValue and doubleValue.
@
text
@d18 1
a18 1
#include <JavaObjRep.h>
d20 1
a20 1
#include     <vector>
d28 7
d38 7
a44 8
//    JavaObjRep
//       ArrayListJOR
//          IntALJOR
//          DblALJOR
//          StringALJOR
//          CompALJOR <C>
//          DemandALJOR
//          PeggingTripleALJOR
d49 1
a49 1
class ArrayListJOR: public JavaObjRep
d126 6
d146 2
a147 3
//    JavaObjRep
//       ArrayListJOR
//          IntALJOR
d214 2
a215 3
//    JavaObjRep
//       ArrayListJOR
//          DblALJOR
d282 2
a283 3
//    JavaObjRep
//       ArrayListJOR
//          StringALJOR
d339 2
a340 3
//    JavaObjRep
//       ArrayListJOR
//          CompALJOR <C>
d393 2
a394 3
//    JavaObjRep
//       ArrayListJOR
//          DemandALJOR
d457 2
a458 3
//    JavaObjRep
//       ArrayListJOR
//          PeggingTripleALJOR
@


1.10
log
@JNIEnv arguments.
@
text
@d149 4
d181 8
d218 4
d250 8
@


1.9
log
@Revised set/get ObjectiveList for ArrayList <String>.
@
text
@d51 1
a51 1
   static void setUpJni (JNIEnv * theJNIEnv);
a53 1
      // Uses theJNIEnv as its JNI environment.
d67 1
a67 1
   explicit ArrayListJOR (JNIEnv * theJNIEnv, _jobject * theArrayListJObj);
d149 1
a149 1
   explicit IntALJOR (JNIEnv * theJNIEnv, _jobject * theIntArrayListJObj);
d206 1
a206 1
   explicit DblALJOR (JNIEnv * theJNIEnv, _jobject * theDblArrayListJObj);
d263 1
a263 1
   explicit StringALJOR (JNIEnv * theJNIEnv, _jobject * theStringArrayListJObj);
d322 1
a322 1
   explicit CompALJOR (JNIEnv * theJNIEnv, _jobject * theCompArrayListJObj);
d376 1
a376 1
   static void setUpJni (JNIEnv * theJNIEnv);
a378 1
      // Uses theJNIEnv as its JNI environment.
d380 1
a380 1
   explicit DemandALJOR (JNIEnv * theJNIEnv, _jobject * theDemandArrayListJObj);
d441 1
a441 1
   static void setUpJni (JNIEnv * theJNIEnv);
a443 1
      // Uses theJNIEnv as its JNI environment.
d445 1
a445 3
   explicit PeggingTripleALJOR (
         JNIEnv *   theJNIEnv,
         _jobject * theTripleListJObj);
@


1.8
log
@C++ class JavaObjRep.
@
text
@d9 1
d35 1
d241 57
@


1.7
log
@Changed name of class AllocTriple to PeggingTriple.
@
text
@d17 1
a17 1
#include <JniClient.h>
d19 1
a19 1
#include    <vector>
d30 7
a36 6
//    ArrayListJOR
//       IntALJOR
//       DblALJOR
//       CompALJOR <C>
//       DemandALJOR
//       PeggingTripleALJOR
d41 1
a41 1
class ArrayListJOR: public JniClient
a118 5

   _jobject * const myArrayListJObj_;
      //
      // A JNI reference to the Java ArrayList <E> represented by this
      // ArrayListJOR.
d133 3
a135 2
//    ArrayListJOR
//       IntALJOR
d190 3
a192 2
//    ArrayListJOR
//       DblALJOR
d248 3
a250 2
//    ArrayListJOR
//       CompALJOR <C>
d303 3
a305 2
//    ArrayListJOR
//       DemandALJOR
d318 5
d344 4
d369 3
a371 2
//    ArrayListJOR
//       PeggingTripleALJOR
d384 5
d419 11
@


1.6
log
@ArrayListJOR
@
text
@d11 1
a11 1
//    AllocTripleALJOR
d35 1
a35 1
//       AllocTripleALJOR
d351 1
a351 1
// Class AllocTripleALJOR
d353 2
a354 2
// "AllocTriple ArrayList Java Object Representation"
// Represents a Java ArrayList <AllocTriple <C>> for some Java Component class
d361 1
a361 1
//       AllocTripleALJOR
d366 1
a366 1
class AllocTripleALJOR: public ArrayListJOR
d374 1
a374 1
   explicit AllocTripleALJOR (
d379 1
a379 1
      // theTripleListJObj must reference a Java ArrayList <AllocTriple <C>>.
d381 1
a381 1
   ~AllocTripleALJOR ();
d388 2
a389 2
      // class C for this AllocTripleALJOR.
      // Constructs a Java AllocTriple <C> from the Java C instance
d391 2
a392 2
      // the new AllocTriple <C> to the represented Java
      // ArrayList <AllocTriple <C>>.
d400 2
a401 2
   AllocTripleALJOR              (const AllocTripleALJOR &);
   AllocTripleALJOR & operator = (const AllocTripleALJOR &);
@


1.5
log
@AllocTripleALJOR
@
text
@d10 2
a11 1
//    AllocTripleALJOR <C>
d34 2
a35 1
//       AllocTripleALJOR <C>
d53 6
a74 6
   void clearAndAllocate (int minCapacity);
      //
      // Removes all of the elements from the represented Java ArrayList <E>.
      // Increases the storage capacity of the represented Java ArrayList <E> to
      // at least minCapacity.

d275 49
a323 1
   void copyFrom (const std::vector <C *> & theCInstVec);
d325 1
a325 2
      // Causes the represented Java ArrayList <C> to become a list of the Java
      // C instances corresponding to the C++ C instances in theCInstVec.
d327 1
a327 1
   void copyDemandIDsInto (
d331 3
a333 4
      // This method is only implemented for C = Demand.
      // Causes thePartNameVec and theDemandNameVec to become lists of the
      // partNames and demandNames of the Demands in the Java ArrayList <Demand>
      // represented by this ArrayListJOR <Demand>.
d341 2
a342 2
   CompALJOR              (const CompALJOR &);
   CompALJOR & operator = (const CompALJOR &);
d351 1
a351 1
// Class template AllocTripleALJOR <C>
d354 2
a355 2
// Represents a Java ArrayList <AllocTriple <C extends Component>>.
// C is to be a C++ class derived from Component.
d361 1
a361 1
//       AllocTripleALJOR <C>
d366 1
a366 2
template <typename C>
      class AllocTripleALJOR: public ArrayListJOR
d376 1
a376 1
         _jobject * theAllocTripleALJObj);
d379 1
a379 2
      // theAllocTripleALJObj must reference a Java
      // ArrayList <AllocTriple <C extends Component>>.
d385 8
a392 8
   void populateFrom (
         const std::vector <C *> & theCInstVec,
         const int *               thePeriodCVec,
         const double *            theVolumeCVec);
      //
      // Causes the represented Java ArrayList <AllocTriple <C>> to become a
      // list of Java AllocTriple <C> instances newly constructed from the
      // Java C instances, periods, and volumes corresponding to the arguments.
@


1.4
log
@ArrayListJOR
@
text
@d10 1
d33 1
d302 61
@


1.3
log
@getCriticialList and eqHeurAlloc.
@
text
@a48 9
   static void copyFrom (
         CompALJOR <Demand> &         theDemandALJOR,
         std::vector <const char *> & thePartNameVec,
         std::vector <const char *> & theDemandNameVec);
      //
      // Causes thePartNameVec and theDemandNameVec to become lists of the
      // partNames and demandNames of the Demands in the Java ArrayList <Demand>
      // represented by theDemandALJOR.

d276 9
@


1.2
log
@Revised the arguments to eqHeurAlloc.
@
text
@d9 1
a9 2
//    PartALJOR
//    DemandALJOR
d31 1
a31 2
//       PartALJOR
//       DemandALJOR
d49 9
d246 1
a246 58
// Class PartALJOR
//
// "Part ArrayList Java Object Representation"
// Represents a Java ArrayList <Part>.
//
// Class Hierarchy:
//
// JniClient
//    ArrayListJOR
//       PartALJOR
//------------------------------------------------------------------------------

namespace WitJ
{
class PartALJOR: public ArrayListJOR
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit PartALJOR (JNIEnv * theJNIEnv, _jobject * thePartArrayListJObj);
      //
      // Constructor.
      // thePartArrayListJObj must reference a Java ArrayList <Part>.

   ~PartALJOR ();
      //
      // Destructor.

   void copyFrom (
         const char * const * thePartNames,
         int                  theLength,
         Coordinator *        theCoordinator);
      //
      // Makes the represented Java ArrayList <Part> into a list of the Java
      // Parts identified by thePartNames, where theLength is taken to be the
      // length of the list and the Parts belong to the Problem corresponding to
      // theCoordinator.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   PartALJOR              (const PartALJOR &);
   PartALJOR & operator = (const PartALJOR &);
      //
      // Not implemented; prevents accidental copying and assignment.
   };
};
//
// End of namespace WitJ.

//------------------------------------------------------------------------------
// Class DemandALJOR
d248 3
a250 2
// "Demand ArrayList Java Object Representation"
// Represents a Java ArrayList <Demand>.
d256 1
a256 1
//       DemandALJOR
d261 2
a262 1
class DemandALJOR: public ArrayListJOR
d270 1
a270 1
   explicit DemandALJOR (JNIEnv * theJNIEnv, _jobject * theDemandArrayListJObj);
d273 2
a274 1
      // theDemandArrayListJObj must reference a Java ArrayList <Demand>.
d276 1
a276 1
   ~DemandALJOR ();
d280 1
a280 3
   void copyInto (
         std::vector <const char *> & thePartNameVec,
         std::vector <const char *> & theDemandNameVec);
d282 2
a283 2
      // Copies the partNames and demandNames of the Demands in the represented
      // Java ArrayList <Double> into thePartNameVec and theDemandNameVec.
d291 2
a292 2
   DemandALJOR              (const DemandALJOR &);
   DemandALJOR & operator = (const DemandALJOR &);
@


1.1
log
@Name changes.
@
text
@d8 3
a10 1
//    CompALJOR <C>
d18 2
d30 4
a33 2
//        IntALJOR
//       CompALJOR <C>
a50 4
   void ensureCapacity (int minCapacity);
      //
      // Calls ensureCapacity (minCapacity) on the Java ArrayList.

d67 11
a77 1
   void addJObject (_jobject * theJObject);
d80 8
a87 3
      // represented Java ArrayList.
      // The Java Object referenced by theJObject must be of the type stored by
      // the represented Java ArrayList.
d104 1
d106 1
d108 1
d110 6
a115 2
      // The JNI method ID for the Java class ArrayList method ensureCapacity.
      // The JNI method ID for the Java class ArrayList method add (E).
d119 2
a120 1
      // The jobject for the Java ArrayList represented by this ArrayListJOR.
d158 6
a163 1
   void add (int theInt);
d165 1
a165 2
      // Appends a Java Integer matching theInt to the end of the represented
      // Java ArrayList <Integer>.
d183 60
a242 1
// Class CompALJOR <C>
d244 53
a296 2
// "Component ArrayList Java Object Representation"
// Represents a Java ArrayList <C extends Component>.
d298 2
a299 1
// C must be a C++ class derived from Component.
d305 1
a305 1
//       CompALJOR <C>
d310 1
a310 2
template <typename C>
      class CompALJOR: public ArrayListJOR
d318 1
a318 1
   explicit CompALJOR (JNIEnv * theJNIEnv, _jobject * theCompArrayListJObj);
d321 1
a321 1
      // theCompArrayListJObj must reference a Java ArrayList <C>.
d323 1
a323 1
   ~CompALJOR ();
d327 3
a329 1
   void add (C * theC);
d331 2
a332 2
      // Appends the Java Component corresponding to theC to the end of the
      // represented Java ArrayList <C>.
d340 2
a341 2
   CompALJOR              (const CompALJOR &);
   CompALJOR & operator = (const CompALJOR &);
@

