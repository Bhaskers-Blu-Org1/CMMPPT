head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2011.04.15.19.01.05;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.04.15.00.07.22;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.03.29.23.38.43;	author rjw;	state dead;
branches;
next	1.11;

1.11
date	2011.03.28.15.57.04;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.03.24.21.17.50;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.03.24.20.58.31;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.03.24.19.11.17;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.24.19.03.37;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.03.24.16.37.58;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.03.24.16.29.59;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.03.23.23.32.44;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.03.23.20.30.04;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.19.00.26.07;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.03.15.20.56.38;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Class template CORJOR
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File CORJOR.C.
//
// Contains the implementation of the following clases and templates:
//
//    CppObjRepJOR
//    CORJOR <J>
//------------------------------------------------------------------------------

#include      <CORJOR.h>
#include  <JavaAccObj.h>
#include <Coordinator.h>
#include     <Problem.h>
#include     <AttBldr.h>
#include         <Att.h>
#include  <MessageMgr.h>
#include   <Component.h>
#include        <Part.h>
#include      <Demand.h>
#include   <Operation.h>
#include    <BomEntry.h>
#include  <Substitute.h>
#include    <BopEntry.h>

//------------------------------------------------------------------------------
// Implementation of class CppObjRepJOR.
//------------------------------------------------------------------------------

_jfieldID *  WitJ::CppObjRepJOR::ourMyCppObjectAsLongFid_ = NULL;

//------------------------------------------------------------------------------

void WitJ::CppObjRepJOR::setUpJni (JNIEnv * theJNIEnv)
   {
   _jclass * theJClassForCppObjRep;

   EXCEPTION_ASSERT (ourMyCppObjectAsLongFid_ == NULL);

   theJClassForCppObjRep    = findJClass ("com/ibm/witj/CppObjRep", theJNIEnv);

   ourMyCppObjectAsLongFid_ =
      theJNIEnv->
         GetFieldID (
            theJClassForCppObjRep,
            "myCppObjectAsLong",
            "J");

   throwAnyJavaException (theJNIEnv);

   theJNIEnv->DeleteLocalRef (theJClassForCppObjRep);
   }

//------------------------------------------------------------------------------

WitJ::CppObjRepJOR::CppObjRepJOR (
         _jobject * theCppObjRepJObj,
         JNIEnv *   theJNIEnv):

      JniClient        (theJNIEnv),
      myCppObjRepJObj_ (theCppObjRepJObj)
   {
   }

//------------------------------------------------------------------------------

WitJ::CppObjRepJOR::~CppObjRepJOR ()
   {
   }

//------------------------------------------------------------------------------

void WitJ::CppObjRepJOR::acquireJavaAccObj (JavaAccObj * theJavaAccObj)
   {
   jlong theCppPtrAsJLong;

   theCppPtrAsJLong = reinterpret_cast <jlong> (theJavaAccObj);

   getJNIEnv()->
      SetLongField (
         myCppObjRepJObj_,
         ourMyCppObjectAsLongFid_,
         theCppPtrAsJLong);

   throwAnyJavaException ();
   }

//------------------------------------------------------------------------------

WitJ::JavaAccObj * WitJ::CppObjRepJOR::getJavaAccObj ()
   {
   jlong        theCppPtrAsJLong;
   JavaAccObj * theJavaAccObj;

   theCppPtrAsJLong =
      getJNIEnv ()->GetLongField (myCppObjRepJObj_, ourMyCppObjectAsLongFid_);

   throwAnyJavaException ();

   theJavaAccObj = reinterpret_cast <JavaAccObj *> (theCppPtrAsJLong);

   if (theJavaAccObj != NULL)
      EXCEPTION_ASSERT (theJavaAccObj->isValid ());

   return theJavaAccObj;
   }

//------------------------------------------------------------------------------
// Implementation of class template CORJOR <J>.
//------------------------------------------------------------------------------

template <typename J>
      WitJ::CORJOR <J>::CORJOR (_jobject * theCORJObj, JNIEnv * theJNIEnv):

         CppObjRepJOR (theCORJObj, theJNIEnv),
         myJ_         (NULL)
   {
   }

//------------------------------------------------------------------------------

template <typename J>
      WitJ::CORJOR <J>::~CORJOR ()
   {
   }

//------------------------------------------------------------------------------

template <typename J>
      void WitJ::CORJOR <J>::acquire (J * theJ)
   {
   acquireJavaAccObj (theJ);

   myJ_ = theJ;
   }

//------------------------------------------------------------------------------

template <typename J>
      J * WitJ::CORJOR <J>::getCppObject ()
   {
   JavaAccObj * theJavaAccObj;

   if (myJ_ == NULL)
      {
      theJavaAccObj = getJavaAccObj ();

      EXCEPTION_ASSERT (theJavaAccObj != NULL);

      theJavaAccObj->getDerived (myJ_);
      }

   return myJ_;
   }

//------------------------------------------------------------------------------
// Explicit instantiation of class template CORJOR <J>.
//------------------------------------------------------------------------------

namespace WitJ
{
template class CORJOR <JavaAccObj>;
template class CORJOR <Coordinator>;
template class CORJOR <Problem>;
template class CORJOR <AttBldr>;
template class CORJOR <Att>;
template class CORJOR <MessageMgr>;
template class CORJOR <Component>;
template class CORJOR <Part>;
template class CORJOR <Demand>;
template class CORJOR <Operation>;
template class CORJOR <BomEntry>;
template class CORJOR <Substitute>;
template class CORJOR <BopEntry>;
}
@


1.13
log
@Class template CORJOR
@
text
@d72 1
a72 1
void WitJ::CppObjRepJOR::setCppPtr (JavaAccObj * theJavaAccObj)
d117 1
a117 1
   JavaAccObj * theJavaAccObj;
d119 1
a119 1
   theJavaAccObj = getJavaAccObj ();
d121 3
a123 2
   if (theJavaAccObj != NULL)
      theJavaAccObj->getDerived (myJ_);
d129 1
a129 1
      WitJ::CORJOR <J>::~CORJOR ()
d131 3
d139 1
a139 1
      void WitJ::CORJOR <J>::operator = (J * theJ)
d141 5
a145 1
   setCppPtr (theJ);
d147 6
a152 1
   myJ_ = theJ;
@


1.12
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@d4 4
a7 1
// Contains the implementation of class CORJOR.
d11 2
a12 1
#include  <NativeCall.h>
d14 4
a17 1
#include <Coordinator.h>
d19 1
d22 2
d25 2
a26 3
#include      <string>
#include    <iostream>

d29 1
a29 11
_jclass *    WitJ::CORJOR::ourPeggingTripleJCl_     = NULL;

_jmethodID * WitJ::CORJOR::makePartJMeth_           = NULL;
_jmethodID * WitJ::CORJOR::makeDemandJMeth_         = NULL;
_jmethodID * WitJ::CORJOR::makeOperationJMeth_      = NULL;
_jmethodID * WitJ::CORJOR::makeBomEntryJMeth_       = NULL;
_jmethodID * WitJ::CORJOR::makeSubstituteJMeth_     = NULL;
_jmethodID * WitJ::CORJOR::makeBopEntryJMeth_       = NULL;
_jmethodID * WitJ::CORJOR::setNPeriodsFromCppJMeth_ = NULL;
_jmethodID * WitJ::CORJOR::getComponentJMeth_       = NULL;
_jmethodID * WitJ::CORJOR::ctorPeggingTripleJMeth_  = NULL;
d33 3
a35 1
WitJ::CORJOR::CORJOR (JniClient & theJniClient, _jobject * theCORJObj):
d37 1
a37 4
      JniClient  (theJniClient),
      myCORJObj_ (NULL)
   {
   EXCEPTION_ASSERT (theCORJObj != NULL);
d39 1
a39 1
   myCORJObj_ = getJNIEnv ()->NewWeakGlobalRef (theCORJObj);
d41 6
a46 2
   throwAnyJavaException ();
   }
d48 1
a48 1
//------------------------------------------------------------------------------
d50 1
a50 3
WitJ::CORJOR::~CORJOR ()
   {
   getJNIEnv ()->DeleteWeakGlobalRef (myCORJObj_);
d55 6
a60 1
void WitJ::CORJOR::setUpJni (JNIEnv * theJNIEnv)
a61 4
   ourPeggingTripleJCl_ =
      newJClassGRef (theJNIEnv, "com/ibm/witj/PeggingTriple");

   findAllJMethodIDs (theJNIEnv);
d66 1
a66 4
void WitJ::CORJOR::makePart (
      Coordinator * theCoord,
      const char *  thePartNameCStr,
      bool          theCategoryIsMaterial)
a67 20
   CORJOR *   theCORJOR;
   _jobject * theCoordCORJObj;
   _jstring * thePartNameJStr;
   
   theCORJOR       = theCoord->getCORJOR ();
   theCoordCORJObj = theCoord->getCORJOR ()->myCORJObj_;

   thePartNameJStr = theCORJOR->newJString (thePartNameCStr);

   theCORJOR->
      getJNIEnv ()->
         CallVoidMethod (
            theCoordCORJObj,
            makePartJMeth_,
            thePartNameJStr,
            theCategoryIsMaterial);

   theCORJOR->throwAnyJavaException ();

   theCORJOR->deleteLocalRef (thePartNameJStr);
d72 1
a72 1
void WitJ::CORJOR::makeDemand (Part * thePart, const char * theDemandNameCStr)
d74 3
a76 12
   CORJOR *   theCORJOR;
   _jobject * thePartCORJObj;
   _jstring * theDemandNameJStr;

   theCORJOR         = thePart->getCORJOR ();
   thePartCORJObj    = thePart->getCORJOR ()->myCORJObj_;
   
   theDemandNameJStr = theCORJOR->newJString (theDemandNameCStr);

   theCORJOR->
      getJNIEnv ()->
         CallVoidMethod (thePartCORJObj, makeDemandJMeth_, theDemandNameJStr);
d78 5
a82 1
   theCORJOR->throwAnyJavaException ();
d84 1
a84 1
   theCORJOR->deleteLocalRef (theDemandNameJStr);
d89 1
a89 3
void WitJ::CORJOR::makeOperation (
      Coordinator * theCoord,
      const char *  theOpnNameCStr)
d91 2
a92 12
   CORJOR *   theCORJOR;
   _jobject * theCoordCORJObj;
   _jstring * theOpnNameJStr;
   
   theCORJOR       = theCoord->getCORJOR ();
   theCoordCORJObj = theCoord->getCORJOR ()->myCORJObj_;

   theOpnNameJStr  = theCORJOR->newJString (theOpnNameCStr);

   theCORJOR->
      getJNIEnv ()->
         CallVoidMethod (theCoordCORJObj, makeOperationJMeth_, theOpnNameJStr);
d94 2
a95 1
   theCORJOR->throwAnyJavaException ();
d97 1
a97 2
   theCORJOR->deleteLocalRef (theOpnNameJStr);
   }
d99 1
a99 1
//------------------------------------------------------------------------------
d101 2
a102 13
void WitJ::CORJOR::makeBomEntry (Operation * theOpn, Part * thePart)
   {
   CORJOR *   theCORJOR;
   _jobject * theOpnCORJObj;
   _jobject * thePartCORJObj;

   theCORJOR      = theOpn ->getCORJOR ();
   theOpnCORJObj  = theOpn ->getCORJOR ()->myCORJObj_;
   thePartCORJObj = thePart->getCORJOR ()->myCORJObj_;

   theCORJOR->
      getJNIEnv ()->
         CallVoidMethod (theOpnCORJObj, makeBomEntryJMeth_, thePartCORJObj);
d104 1
a104 1
   theCORJOR->throwAnyJavaException ();
d108 1
a108 21

void WitJ::CORJOR::makeSubstitute (BomEntry * theBomEnt, Part * thePart)
   {
   CORJOR *   theCORJOR;
   _jobject * theBomEntCORJObj;
   _jobject * thePartCORJObj;

   theCORJOR        = theBomEnt->getCORJOR ();
   theBomEntCORJObj = theBomEnt->getCORJOR ()->myCORJObj_;
   thePartCORJObj   = thePart  ->getCORJOR ()->myCORJObj_;

   theCORJOR->
      getJNIEnv ()->
         CallVoidMethod (
            theBomEntCORJObj,
            makeSubstituteJMeth_,
            thePartCORJObj);

   theCORJOR->throwAnyJavaException ();
   }

d111 2
a112 18
void WitJ::CORJOR::makeBopEntry (Operation * theOpn, Part * thePart)
   {
   CORJOR *   theCORJOR;
   _jobject * theOpnCORJObj;
   _jobject * thePartCORJObj;

   theCORJOR      = theOpn ->getCORJOR ();
   theOpnCORJObj  = theOpn ->getCORJOR ()->myCORJObj_;
   thePartCORJObj = thePart->getCORJOR ()->myCORJObj_;

   theCORJOR->
      getJNIEnv ()->
         CallVoidMethod (theOpnCORJObj, makeBopEntryJMeth_, thePartCORJObj);

   theCORJOR->throwAnyJavaException ();
   }

//------------------------------------------------------------------------------
d114 2
a115 1
void WitJ::CORJOR::setNPeriods (Problem * theProblem, int theValue)
d117 1
a117 2
   CORJOR *   theCORJOR;
   _jobject * theProblemCORJObj;
d119 1
a119 2
   theCORJOR         = theProblem->getCORJOR ();
   theProblemCORJObj = theProblem->getCORJOR ()->myCORJObj_;
d121 2
a122 5
   theCORJOR->
      getJNIEnv ()->
         CallVoidMethod (theProblemCORJObj, setNPeriodsFromCppJMeth_, theValue);

   theCORJOR->throwAnyJavaException ();
d127 2
a128 4
_jobject * WitJ::CORJOR::newPeggingTripleLRef (
      Component * theComp,
      int         thePeriod,
      double      theVolume)
a129 23
   CORJOR *   theCORJOR;
   _jobject * theCompJObj;
   _jobject * thePeggingTripleJObj;

   theCORJOR            = theComp->getCORJOR ();

   theCompJObj          = getComponentLRef (theComp);

   thePeggingTripleJObj =
      theCORJOR->
         getJNIEnv ()->
            NewObject (
               ourPeggingTripleJCl_,
               ctorPeggingTripleJMeth_,
               theCompJObj,
               thePeriod,
               theVolume);
               
   theCORJOR->throwAnyJavaException ();

   theCORJOR->deleteLocalRef (theCompJObj);

   return thePeggingTripleJObj;
d134 2
a135 1
_jobject * WitJ::CORJOR::getComponentLRef (Component * theComp)
d137 1
a137 18
   CORJOR *   theCORJOR;
   _jobject * theCompCORJObj;
   _jobject * theCompJObj;

   theCORJOR      = theComp->getCORJOR ();
   theCompCORJObj = theComp->getCORJOR ()->myCORJObj_;

   theCompJObj    =
      theCORJOR->
         getJNIEnv ()->
            CallObjectMethod (theCompCORJObj, getComponentJMeth_);
            
   theCORJOR->throwAnyJavaException ();
            
   return theCompJObj;
   }

//------------------------------------------------------------------------------
d139 1
a139 3
void WitJ::CORJOR::findNonsense (Coordinator * theCoord)
   {
   findJClass (theCoord->getCORJOR ()->getJNIEnv (), "Nonsense");
d143 1
a143 31

void WitJ::CORJOR::exhaustJniMemory ()
   {
   std::string  theString;
   const char * theCString;
   int          totDiscarded;
   _jstring *   theJString;
   _jobject *   theJGlobalRef;

   theString.append (10485760, ' ');

   theCString = theString.c_str ();

   for (totDiscarded = 10; totDiscarded <= 10000; totDiscarded += 10)
      {
      theJString    = newJString (theCString);

      theJGlobalRef = getJNIEnv ()->NewGlobalRef (theJString);

      EXCEPTION_ASSERT (theJGlobalRef != NULL);

      deleteLocalRef (theJString);

      std::cout << totDiscarded << "MB of memory have been allocated by JNI.\n";

      std::cout.flush ();
      }

   EXCEPTION_ASSERT (false);
   }

d146 16
a161 67
void WitJ::CORJOR::findAllJMethodIDs (JNIEnv * theJNIEnv)
   {
   EXCEPTION_ASSERT (makePartJMeth_ == NULL);

   makePartJMeth_ =
      getJMethodID (
         theJNIEnv,
         "com/ibm/witj/CoordinatorCOR",
         "makePart",
         "(Ljava/lang/String;Z)V");

   makeDemandJMeth_ =
      getJMethodID (
         theJNIEnv,
         "com/ibm/witj/PartCOR",
         "makeDemand",
         "(Ljava/lang/String;)V");

   makeOperationJMeth_ =
      getJMethodID (
         theJNIEnv,
         "com/ibm/witj/CoordinatorCOR",
         "makeOperation",
         "(Ljava/lang/String;)V");

   makeBomEntryJMeth_ =
      getJMethodID (
         theJNIEnv,
         "com/ibm/witj/OperationCOR",
         "makeBomEntry",
         "(Lcom/ibm/witj/PartCOR;)V");

   makeSubstituteJMeth_ =
      getJMethodID (
         theJNIEnv,
         "com/ibm/witj/BomEntryCOR",
         "makeSubstitute",
         "(Lcom/ibm/witj/PartCOR;)V");

   makeBopEntryJMeth_ =
      getJMethodID (
         theJNIEnv,
         "com/ibm/witj/OperationCOR",
         "makeBopEntry",
         "(Lcom/ibm/witj/PartCOR;)V");

   setNPeriodsFromCppJMeth_ =
      getJMethodID (
         theJNIEnv,
         "com/ibm/witj/ProblemCOR",
         "setNPeriodsFromCpp",
         "(I)V");

   getComponentJMeth_ =
      getJMethodID (
         theJNIEnv,
         "com/ibm/witj/ComponentCOR",
         "getComponent",
         "()Lcom/ibm/witj/Component;");

   ctorPeggingTripleJMeth_ =
      getJMethodID (
         theJNIEnv,
         "com/ibm/witj/PeggingTriple",
         "<init>",
         "(Lcom/ibm/witj/Component;ID)V");
   }
@


1.11
log
@Changed name of class AllocTriple to PeggingTriple.
@
text
@@


1.10
log
@Call-back functions.
@
text
@d20 1
a20 1
_jclass *    WitJ::CORJOR::ourAllocTripleJCl_       = NULL;
d30 1
a30 1
_jmethodID * WitJ::CORJOR::ctorAllocTripleJMeth_    = NULL;
d57 2
a58 1
   ourAllocTripleJCl_ = newJClassGRef (theJNIEnv, "com/ibm/witj/AllocTriple");
d217 1
a217 1
_jobject * WitJ::CORJOR::newAllocTripleLRef (
d224 1
a224 1
   _jobject * theAllocTripleJObj;
d226 1
a226 1
   theCORJOR          = theComp->getCORJOR ();
d228 1
a228 1
   theCompJObj        = getComponentLRef (theComp);
d230 1
a230 1
   theAllocTripleJObj =
d234 2
a235 2
               ourAllocTripleJCl_,
               ctorAllocTripleJMeth_,
d244 1
a244 1
   return theAllocTripleJObj;
d369 1
a369 1
   ctorAllocTripleJMeth_ =
d372 1
a372 1
         "com/ibm/witj/AllocTriple",
@


1.9
log
@Call-back functions.
@
text
@d204 2
a205 2
   theCORJOR         = theProblem ->getCORJOR ();
   theProblemCORJObj = theProblem ->getCORJOR ()->myCORJObj_;
d221 23
a243 4
   return
      theComp->
         getCORJOR ()->
            newAllocTripleLRefFromCompCOR (thePeriod, theVolume);
d250 15
a264 1
   return theComp->getCORJOR ()->getComponentLRefFromCompCOR ();
a307 44
_jobject * WitJ::CORJOR::newAllocTripleLRefFromCompCOR (
      int    thePeriod,
      double theVolume)
   {
   _jobject * theCompJObj;
   _jobject * theAllocTripleJObj;

   theCompJObj =
      getJNIEnv ()->CallObjectMethod (myCORJObj_, getComponentJMeth_);
            
   throwAnyJavaException ();

   theAllocTripleJObj =
      getJNIEnv ()->
         NewObject (
            ourAllocTripleJCl_,
            ctorAllocTripleJMeth_,
            theCompJObj,
            thePeriod,
            theVolume);
               
   throwAnyJavaException ();

   deleteLocalRef (theCompJObj);

   return theAllocTripleJObj;
   }

//------------------------------------------------------------------------------

_jobject * WitJ::CORJOR::getComponentLRefFromCompCOR ()
   {
   _jobject * theCompJObj;

   theCompJObj =
      getJNIEnv ()->CallObjectMethod (myCORJObj_, getComponentJMeth_);
            
   throwAnyJavaException ();
            
   return theCompJObj;
   }

//------------------------------------------------------------------------------

@


1.8
log
@FromCompCOR
@
text
@d69 16
a84 1
   CORJOR * theCoordCORJOR;
d86 1
a86 1
   theCoordCORJOR = theCoord->getCORJOR ();
d88 1
a88 2
   theCoordCORJOR->
      callVoidJMethod (makePartJMeth_, thePartNameCStr, theCategoryIsMaterial);
d95 12
a106 1
   CORJOR * thePartCORJOR;
d108 1
a108 1
   thePartCORJOR = thePart->getCORJOR ();
d110 1
a110 1
   thePartCORJOR->callVoidJMethod (makeDemandJMeth_, theDemandNameCStr);
d119 6
a124 1
   CORJOR * theCoordCORJOR;
d126 5
a130 1
   theCoordCORJOR = theCoord->getCORJOR ();
d132 3
a134 1
   theCoordCORJOR->callVoidJMethod (makeOperationJMeth_, theOpnNameCStr);
d141 7
a147 1
   CORJOR * theOpnCORJOR;
d149 3
a151 1
   theOpnCORJOR = theOpn->getCORJOR ();
d153 1
a153 1
   theOpnCORJOR->callVoidJMethod (makeBomEntryJMeth_, thePart);
d160 7
a166 1
   CORJOR * theBomEntCORJOR;
d168 6
a173 1
   theBomEntCORJOR = theBomEnt->getCORJOR ();
d175 1
a175 1
   theBomEntCORJOR->callVoidJMethod (makeSubstituteJMeth_, thePart);
d182 7
a188 1
   CORJOR * theOpnCORJOR;
d190 3
a192 1
   theOpnCORJOR = theOpn->getCORJOR ();
d194 1
a194 1
   theOpnCORJOR->callVoidJMethod (makeBopEntryJMeth_, thePart);
d201 5
a205 1
   CORJOR * theProblemCORJOR;
d207 3
a209 1
   theProblemCORJOR = theProblem->getCORJOR ();
d211 1
a211 1
   theProblemCORJOR->callVoidJMethod (setNPeriodsFromCppJMeth_, theValue);
a318 59
void WitJ::CORJOR::callVoidJMethod (
      _jmethodID * theMethodID,
      const char * theCString)
   {
   _jstring * theJString;
   
   theJString = newJString (theCString);

   getJNIEnv ()->CallVoidMethod (myCORJObj_, theMethodID, theJString);

   throwAnyJavaException ();

   deleteLocalRef (theJString);
   }

//------------------------------------------------------------------------------

void WitJ::CORJOR::callVoidJMethod (
      _jmethodID * theMethodID,
      const char * theCString,
      bool         theBool)
   {
   _jstring * theJString;
   
   theJString = newJString (theCString);

   getJNIEnv ()->CallVoidMethod (myCORJObj_, theMethodID, theJString, theBool);

   throwAnyJavaException ();

   deleteLocalRef (theJString);
   }

//------------------------------------------------------------------------------

void WitJ::CORJOR::callVoidJMethod (_jmethodID * theMethodID, int theInt)
   {
   getJNIEnv ()->CallVoidMethod (myCORJObj_, theMethodID, theInt);

   throwAnyJavaException ();
   }

//------------------------------------------------------------------------------

void WitJ::CORJOR::callVoidJMethod (
      _jmethodID * theMethodID,
      JavaAccObj * theJavaAccObj)
   {
   _jobject * theCORJObj;
   
   theCORJObj = theJavaAccObj->getCORJOR ()->myCORJObj_;

   getJNIEnv ()->CallVoidMethod (myCORJObj_, theMethodID, theCORJObj);

   throwAnyJavaException ();
   }

//------------------------------------------------------------------------------

@


1.7
log
@getComponentLRef
@
text
@d152 4
a155 1
   return theComp->getCORJOR ()->newAllocTripleLRef (thePeriod, theVolume);
d162 1
a162 1
   return theComp->getCORJOR ()->getComponentLRef ();
d206 3
a208 1
_jobject * WitJ::CORJOR::newAllocTripleLRef (int thePeriod, double theVolume)
a209 1
   _jobject * theCompCORJObj;
a212 2
   theCompCORJObj = myCORJObj_;

d214 1
a214 1
      getJNIEnv ()->CallObjectMethod (theCompCORJObj, getComponentJMeth_);
d236 1
a236 1
_jobject * WitJ::CORJOR::getComponentLRef ()
a237 1
   _jobject * theCompCORJObj;
d240 2
a241 4
   theCompCORJObj = myCORJObj_;

   theCompJObj    =
      getJNIEnv ()->CallObjectMethod (theCompCORJObj, getComponentJMeth_);
@


1.6
log
@newAllocTripleLRef
@
text
@d157 1
a157 1
_jobject * WitJ::CORJOR::getComponentJObj (Component * theComp)
d159 1
a159 1
   return theComp->getCORJOR ()->callObjectJMethod (getComponentJMeth_);
d234 17
a309 13
_jobject * WitJ::CORJOR::callObjectJMethod (_jmethodID * theMethodID)
   {
   _jobject * theJObject;

   theJObject = getJNIEnv ()->CallObjectMethod (myCORJObj_, theMethodID);
            
   throwAnyJavaException ();
            
   return theJObject;
   }

//------------------------------------------------------------------------------

@


1.5
log
@newAllocTriple
@
text
@d147 1
a147 1
_jobject * WitJ::CORJOR::newAllocTriple (
d152 1
a152 1
   return theComp->getCORJOR ()->newAllocTriple (thePeriod, theVolume);
d203 1
a203 1
_jobject * WitJ::CORJOR::newAllocTriple (int thePeriod, double theVolume)
@


1.4
log
@CORJOR
@
text
@d148 1
a148 1
      Component * theRoot,
d152 1
a152 29
   CORJOR *   theRootCORJOR;
   _jobject * theRootJObj;
   jint       thePeriodJInt;
   jdouble    theVolumeJDbl;
   _jobject * theAllocTripleJObj;

   theRootCORJOR = theRoot->getCORJOR ();

   theRootJObj   = theRootCORJOR->callObjectJMethod (getComponentJMeth_);

   thePeriodJInt = thePeriod;

   theVolumeJDbl = theVolume;

   theAllocTripleJObj =
      theRootCORJOR->
         getJNIEnv ()->
            NewObject (
               ourAllocTripleJCl_,
               ctorAllocTripleJMeth_,
               theRootJObj,
               thePeriodJInt,
               theVolumeJDbl);
               
   theRootCORJOR->throwAnyJavaException ();

   theRootCORJOR->deleteLocalRef (theRootJObj);

   return theAllocTripleJObj;
d203 31
@


1.3
log
@AllocTripleALJOR
@
text
@d69 6
a74 6
   theCoord->
      getCORJOR ()->
         callVoidJMethod (
            makePartJMeth_,
            thePartNameCStr,
            theCategoryIsMaterial);
d79 1
a79 3
void WitJ::CORJOR::makeDemand (
      Part *       thePart,
      const char * theDemandNameCStr)
d81 5
a85 1
   thePart->getCORJOR ()->callVoidJMethod (makeDemandJMeth_, theDemandNameCStr);
d94 5
a98 3
   theCoord->
      getCORJOR ()->
         callVoidJMethod (makeOperationJMeth_, theOpnNameCStr);
d105 5
a109 1
   theOpn->getCORJOR ()->callVoidJMethod (makeBomEntryJMeth_, thePart);
d116 5
a120 1
   theBomEnt->getCORJOR ()->callVoidJMethod (makeSubstituteJMeth_, thePart);
d127 5
a131 1
   theOpn->getCORJOR ()->callVoidJMethod (makeBopEntryJMeth_, thePart);
d138 5
a142 3
   theProblem->
      getCORJOR ()->
         callVoidJMethod (setNPeriodsFromCppJMeth_, theValue);
d242 2
d260 2
@


1.2
log
@Revised the arguments to eqHeurAlloc.
@
text
@d20 2
d30 1
d57 2
d129 38
d340 7
@


1.1
log
@Renamed JavaObjRep to CORJOR.
@
text
@d31 1
a31 1
WitJ::CORJOR::CORJOR (NativeCall & theCall, _jobject * theCORJObj):
d33 1
a33 1
      JniClient  (theCall),
d243 1
a243 1
      findWitJMethodID (
d245 1
a245 1
         "CoordinatorCOR",
d250 1
a250 1
      findWitJMethodID (
d252 1
a252 1
         "PartCOR",
d257 1
a257 1
      findWitJMethodID (
d259 1
a259 1
         "CoordinatorCOR",
d264 1
a264 1
      findWitJMethodID (
d266 1
a266 1
         "OperationCOR",
d271 1
a271 1
      findWitJMethodID (
d273 1
a273 1
         "BomEntryCOR",
d278 1
a278 1
      findWitJMethodID (
d280 1
a280 1
         "OperationCOR",
d285 1
a285 1
      findWitJMethodID (
d287 1
a287 1
         "ProblemCOR",
d292 1
a292 1
      findWitJMethodID (
d294 1
a294 1
         "ComponentCOR",
a297 25

//------------------------------------------------------------------------------

_jmethodID * WitJ::CORJOR::findWitJMethodID (
      JNIEnv *     theJNIEnv,
      const char * theClassName,
      const char * theMethName,
      const char * theMethDesc)
   {
   std::string  fullClassName;
   _jclass *    theJClass;
   _jmethodID * theJMethodID;

   fullClassName  = "com/ibm/witj/";

   fullClassName += theClassName;

   theJClass      = findJClass (theJNIEnv, fullClassName.c_str ());

   theJMethodID = getJMethodID (theJNIEnv, theJClass, theMethName, theMethDesc);

   theJNIEnv->DeleteLocalRef (theJClass);

   return theJMethodID;
   }
@

