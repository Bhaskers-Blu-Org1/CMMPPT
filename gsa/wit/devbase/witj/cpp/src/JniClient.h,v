head	1.44;
access;
symbols;
locks; strict;
comment	@ * @;


1.44
date	2011.04.15.21.02.19;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2011.04.15.15.49.04;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2011.04.15.00.07.24;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2011.04.13.22.36.22;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2011.04.13.16.00.16;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2011.04.12.00.33.11;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2011.04.08.23.39.55;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2011.04.06.16.29.04;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2011.04.06.15.56.37;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2011.04.05.23.07.40;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2011.04.05.22.25.43;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.04.01.23.25.02;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.03.30.23.23.01;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.03.30.19.49.52;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.03.29.23.38.47;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2011.03.28.15.57.07;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2011.03.25.22.49.15;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.03.24.19.03.39;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.03.23.23.32.45;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.03.23.20.30.06;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2011.03.22.20.17.22;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.03.19.00.26.10;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.03.15.23.02.50;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2011.03.15.20.56.44;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2011.03.11.23.49.22;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.03.09.22.35.26;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.02.16.21.03.09;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.02.16.19.08.30;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.02.15.19.38.01;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.02.14.21.13.47;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.02.14.19.59.09;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2010.04.23.22.41.22;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.04.13.19.51.40;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.02.18.22.10.21;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.02.14.00.51.29;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.24.20.34.22;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.24.15.37.34;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.24.15.01.11;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.24.00.18.55;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.15.17.28.48;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.10.10.17.51.11;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.10.03.18.07.57;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.02.14.01.19;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.01.19.47.12;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.44
log
@Class template ArrayJOR <E>
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File JniClient.h.
//
// Contains the declaration of class JniClient.
//------------------------------------------------------------------------------

#ifndef JniClient_h
#define JniClient_h

#include <Includes.h>

#include      <jni.h>

//------------------------------------------------------------------------------
// Class JniClient
//
// This class and the classes derived from it are responsible for all
// interaction with JNI.
//
// Class Hierarchy:
//
// JniClient
//    CppObjRepJOR
//       CORJOR <J>
//    StringJOR
//    ArrayJOR <Boolean>
//       BoolArrayJOR
//    ArrayJOR <int>
//       IntArrayJOR
//    ArrayJOR <double>
//       DblArrayJOR
//    ArrayListJOR
//       IntALJOR
//       DblALJOR
//       StringALJOR
//       CompALJOR <C>
//       DemandALJOR
//       PeggingTripleALJOR
//    ComponentJOR
//    ExceptionHandler
//------------------------------------------------------------------------------

namespace WitJ
{
class JniClient
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   static void setUpJni (JNIEnv *);
      //
      // Sets up the interaction between this class and JNI.

   static _jstring * newJString (const char * theCString, JNIEnv * theJNIEnv);
      //
      // Creates a Java string that's a copy of theCString and creates and
      // returns a local reference to it.

   static _jobject * matchingIntegerJObj (int    theInt, JNIEnv * theJNIEnv);
   static _jobject * matchingDoubleJObj  (double theDbl, JNIEnv * theJNIEnv);
      //
      // Creates and returns a local reference to a Java Integer whose value
      //    matches theInt.
      // Creates and returns a local reference to a Java Double  whose value
      //    matches theDbl.

   bool isaUTF8String (const char * theCString);
      //
      // Returns true, iff theCString is in UTF-8 format.
      // This is determined by converting theCString from UFT-8 format into a
      // Java String and then back again and verifying that its content is
      // preserved.

   static void throwAnyJavaException (JNIEnv * theJNIEnv);
      //
      // Checks for any Java Throwable that's currently pending and if there is
      // one, clears it and then throws the corresponding _jthrowable pointer as
      // a C++ exception.

   void findNonsense ();
      //
      // Searches for a Java class called "Nonsense".
      // Used for testing.

   //---------------------------------------------------------------------------
   // Protected member functions.
   //---------------------------------------------------------------------------

   protected:

   explicit JniClient (JNIEnv *);
      //
      // Constructor.

   explicit JniClient (const JniClient &);
      //
      // Copy Constructor.

   ~JniClient ();
      //
      // Destructor.

   static _jclass * newJClassGRef (
         const char * theClassName,
         JNIEnv *     theJNIEnv);
      //
      // Finds the JNI class object for the Java class whose name is given by
      // theClassName and creates and returns a global reference to it.

   static _jmethodID * getJMethodID (
         const char * theClassName,
         const char * theMethName,
         const char * theMethDesc,
         JNIEnv *     theJNIEnv);
      //
      // Finds and returns the _jmethodID of a non-static Java method.
      // Arguments:
      //    theClassName: The name of the class to which the method belongs.
      //    theMethName:  The name of the method.
      //    theMethDesc:  The JNI method descriptor of the method.
      //    theJNIEnv:    The JNI environment to be used.

   static _jmethodID * getStaticJMethodID (
         _jclass *    theJClass,
         const char * theMethName,
         const char * theMethDesc,
         JNIEnv *     theJNIEnv);
      //
      // Returns the _jmethodID for a static Java method corresponding to the
      // arguments.

   _jstring * newJString (const char * theCString);
      //
      // Creates a Java string that's a copy of theCString and creates and
      // returns a local reference to it.

   static _jclass * findJClass (const char * theClassName, JNIEnv * theJNIEnv);
      //
      // Finds the Java class whose name is given by theClassName and creates
      // and returns a JNI local reference to it.

   void throwAnyJavaException ();
      //
      // Checks for any Java Throwable that's currently pending and if there is
      // one, clears it and then throws the corresponding _jthrowable pointer as
      // a C++ exception.

   void deleteLocalRef (_jobject * theLocalRef);
      //
      // Deletes the local reference theLocalRef.

   inline JNIEnv * getJNIEnv ()
      {
      return myJNIEnv_;
      }

   inline JNIEnv * getJNIEnv (JniClient & theJniClient)
      {
      return theJniClient.myJNIEnv_;
      }

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   JniClient & operator = (const JniClient &);
      //
      // Not implemented; prevents accidental assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   JNIEnv * const myJNIEnv_;
      //
      // The JNI environment for this JniClient.

   static _jclass *  ourStringJCl_;
   static _jclass * ourIntegerJCl_;
   static _jclass *  ourDoubleJCl_;
      //
      // JNI Global references to each of the following Java classes:
      //    String
      //    Integer
      //    Double

   static _jmethodID * valueOfIntegerJMeth_;
   static _jmethodID *  valueOfDoubleJMeth_;
      //
      // The JNI method IDs for each of the following Java methods:
      //    Class Integer static method valueOf
      //    Class Double  static method valueOf
   };
};
//
// End of namespace WitJ.

#endif
@


1.43
log
@Class StringJOR
@
text
@d160 5
@


1.42
log
@Class template CORJOR
@
text
@a24 1
//    ComponentJOR
d39 1
@


1.41
log
@Removed namespace JniUtil.
@
text
@a4 1
// Contains the declaration of the get{Class} global (namespace WitJ) functions.
d23 2
a76 24
   static void transferTo (
         _jobject *   theCppObjRepJObj,
         JavaAccObj * theJavaAccObj,
         JNIEnv *     theJNIEnv);
      //
      // Transfers ownership of theJavaAccObj to the Java CppObjRep referenced
      // by theCppObjRepJObj.

   static void nullifyCppObjectPtr (
         _jobject * theCppObjRepJObj,
         JNIEnv *   theJNIEnv);
      //
      // theCppObjRepJObj must reference a Java CppObjRep.
      // Sets the myCppObjectAsLong field of the Java CppObjRep to null.

   static JavaAccObj * getJavaAccObj (
         _jobject * theCppObjRepJObj,
         JNIEnv *   theJNIEnv);
      //
      // theCppObjRepJObj must must reference an instance of Java class
      // CppObjRep.
      // Returns a pointer to the JavaAccObj owned by the CppObjRep.
      // Asserts that the pointer is not NULL.

d140 5
a165 5
   static _jclass * findJClass (const char * theClassName, JNIEnv * theJNIEnv);
      //
      // Finds the Java class whose name is given by theClassName and creates
      // and returns a JNI local reference to it.

a177 4
   static _jfieldID * ourMyCppObjectAsLongFid_;
      //
      // The JNI field ID for witj.CppObjRep.myCppObjectAsLong.

a197 27
//------------------------------------------------------------------------------
// get{Class} global (namespace WitJ) functions
//
// In each of the following functions, the first argument must reference an
// instance of the Java COR class matching the name.
// The function returns the corresponding instance of the C++ class indicated
// by the name.
//------------------------------------------------------------------------------

namespace WitJ
{
Coordinator * getCoordinator (_jobject *, JNIEnv *);
Problem *     getProblem     (_jobject *, JNIEnv *);
AttBldr *     getAttBldr     (_jobject *, JNIEnv *);
Att *         getAtt         (_jobject *, JNIEnv *);
MessageMgr *  getMessageMgr  (_jobject *, JNIEnv *);
Component *   getComponent   (_jobject *, JNIEnv *);
Part *        getPart        (_jobject *, JNIEnv *);
Demand *      getDemand      (_jobject *, JNIEnv *);
Operation *   getOperation   (_jobject *, JNIEnv *);
BomEntry *    getBomEntry    (_jobject *, JNIEnv *);
Substitute *  getSubstitute  (_jobject *, JNIEnv *);
BopEntry *    getBopEntry    (_jobject *, JNIEnv *);
};
//
// End of namespace WitJ.

@


1.40
log
@ArrayJOR classes
@
text
@d5 1
d18 2
a19 2
// This class, the classes derived from it, and namespace JniUtil are
// responsible for all interaction with JNI.
d225 27
@


1.39
log
@Class StringJOR
@
text
@d25 6
@


1.38
log
@Removed C++ class JavaObjRep.
@
text
@d24 1
@


1.37
log
@intValue and doubleValue.
@
text
@d23 8
a30 9
//    JavaObjRep
//       ComponentJOR
//       ArrayListJOR
//          IntALJOR
//          DblALJOR
//          StringALJOR
//          CompALJOR <C>
//          DemandALJOR
//          PeggingTripleALJOR
@


1.36
log
@JNIEnv arguments.
@
text
@a61 10
   int intValue (_jobject * theIntegerJObj);
      //
      // theIntegerJObj must refer to a Java Integer.
      // Returns the Java Integer converted to an int.

   double doubleValue (_jobject * theDoubleJObj);
      //
      // theDoubleJObj must refer to a Java Double.
      // Returns the Java Double converted to a double.

a208 2
   static _jmethodID *       intValueJMeth_;
   static _jmethodID *    doubleValueJMeth_;
a212 2
      //    Class Integer        method intValue
      //    Class Double         method doubleValue
@


1.35
log
@JniClient
@
text
@d45 1
a45 1
   static void setUpJni (JNIEnv * theJNIEnv);
a47 1
      // Uses theJNIEnv as its JNI environment.
@


1.34
log
@Namespace JniUtil.
@
text
@d110 5
d134 2
a135 2
         JNIEnv *     theJNIEnv,
         const char * theClassName);
a138 7
      // Uses theJNIEnv as its JNI environment.

   static _jclass * findJClass (JNIEnv * theJNIEnv, const char * theClassName);
      //
      // Finds the Java class whose name is given by theClassName and creates
      // and returns a JNI local reference to it.
      // Uses theJNIEnv as its JNI environment.
a140 1
         JNIEnv *     theJNIEnv,
d143 2
a144 1
         const char * theMethDesc);
a147 1
      //    theJNIEnv:    The JNI environment to be used.
d151 1
a153 1
         JNIEnv *     theJNIEnv,
d156 2
a157 1
         const char * theMethDesc);
d188 5
@


1.33
log
@JniAsst
@
text
@d17 2
a18 2
// This class and the classes derived from it are responsible for all
// interaction with JNI.
a22 1
//    JniAsst
d50 1
a50 1
   _jstring * newJString (const char * theCString);
d55 2
a56 2
   _jobject * matchingIntegerJObj (int    theInt);
   _jobject * matchingDoubleJObj  (double theDbl);
d80 4
a83 1
   void transferTo (_jobject * theCppObjRepJObj, JavaAccObj * theJavaAccObj);
d88 3
a90 3
   void nullifyCppObjectPtr (_jobject * theCppObjRepJObj);
      //
      // theCppObjRepJObj: References a Java CppObjRep.
d92 1
d95 3
a97 1
   JavaAccObj * getJavaAccObj (_jobject * theCppObjRepJObj);
d104 6
d164 1
a164 1
   void throwAnyJavaException ();
d166 2
a167 3
      // Checks for any Java Throwable that's currently pending and if there is
      // one, clears it and then throws the corresponding _jthrowable pointer as
      // a C++ exception.
d169 1
a169 1
   static void throwAnyJavaException (JNIEnv * theJNIEnv);
@


1.32
log
@Revised set/get ObjectiveList for ArrayList <String>.
@
text
@d23 1
a23 1
//    NativeCall
@


1.31
log
@C++ class JavaObjRep.
@
text
@d29 1
a50 7
   _jobjectArray * newJStrArray (
         const char * const * theCStrVec,
         int                  theLength);
      //
      // Creates a Java array of Strings that's a copy of theCStrVec and is of
      // length theLength and returns a local reference to it.

@


1.30
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@d24 8
a31 7
//    ComponentJOR
//    ArrayListJOR
//       IntALJOR
//       DblALJOR
//       CompALJOR <C>
//       DemandALJOR
//       PeggingTripleALJOR
a79 5
   Demand * getDemand (_jobject * theDemandJObj);
      //
      // theDemandJObj must refer to a Java Demand.
      // Returns the corresponding C++ Demand.

a214 1
   static _jmethodID *   getDemandCORJMeth_;
a220 1
      //    Class Demand         method getDemandCOR
@


1.29
log
@Changed name of class AllocTriple to PeggingTriple.
@
text
@d24 1
a24 1
//    CORJOR
d61 2
a62 2
   _jobject * matchingIntegerLRef (int    theInt);
   _jobject * matchingDoubleLRef  (double theDbl);
d91 1
a91 1
   void associate (_jobject * theCppObjRepJObj, JavaAccObj * theJavaAccObj);
d93 2
a94 5
      // * Transfers ownership of theJavaAccObj to the Java CppObjRep
      //   referenced by theCppObjRepJObj.
      // * Constructs a CORJOR that represents the Java CppObjRep
      //   referenced by theCppObjRepJObj.
      // * Transfers ownership of the new CORJOR to theJavaAccObj.
a161 1
      // Checks for any exceptions.
@


1.28
log
@ArrayListJOR
@
text
@d30 1
a30 1
//       AllocTripleALJOR
@


1.27
log
@getComponentLRef
@
text
@d29 2
a30 1
//       AllocTripleALJOR <C>
@


1.26
log
@CORJOR
@
text
@d60 2
a61 2
   _jobject * matchingIntegerJObj (int    theInt);
   _jobject * matchingDoubleJObj  (double theDbl);
d63 1
a63 1
      // Returns a newly created local reference to a Java Integer whose value
d65 1
a65 1
      // Returns a newly created local reference to a Java Double  whose value
@


1.25
log
@AllocTripleALJOR
@
text
@d57 2
a58 2
      // Creates a Java string that's a copy of theCString and returns a local
      // reference to it.
@


1.24
log
@getCriticialList and eqHeurAlloc.
@
text
@d29 1
d129 8
a192 8
   static _jclass * newJClassGRef (
         JNIEnv *     theJNIEnv,
         const char * theClassName);
      //
      // Finds the JNI class object for the Java class whose name is given by
      // theClassName and creates and returns a global reference to it.
      // Uses theJNIEnv as its JNI environment.

@


1.23
log
@Revised the arguments to eqHeurAlloc.
@
text
@d28 1
a28 2
//       PartALJOR
//       DemandALJOR
@


1.22
log
@Name changes.
@
text
@d26 4
a29 2
//        IntALJOR
//       CompALJOR <C>
a47 5
   _jdoubleArray * newJDblArray (double * theDblCVec, int theLength);
      //
      // Creates a Java array of doubles that's a copy of theDblCVec and is of
      // length theLength and returns a local reference to it.

d60 14
a73 2
   _jobject * anIntegerJObjFor (int    theInt);
   _jobject * aDoubleJObjFor   (double theDbl);
d75 7
a81 2
      // Returns a local reference to a Java Integer whose value matches theInt.
      // Returns a local reference to a Java Double  whose value matches theDbl.
d90 21
d129 1
a129 3
   static _jclass * findJClass (
         JNIEnv *     theJNIEnv,
         const char * theClassName);
d131 2
a132 2
      // Finds the JNI class object for the Java class whose name is given by
      // theClassName and returns a local reference to it.
d137 13
d154 2
a155 1
      // Returns the _jmethodID corresponding to the arguments.
a156 2
      // Note that a _jmethodID is not a local or global reference and does not
      // need to be managed as such.
d185 1
a185 1
   static _jclass * findJClassGRef (
d190 1
a190 1
      // theClassName and returns a global reference to it.
d205 5
a209 1
   static _jclass * ourStringJCl_;
d211 1
a211 1
   static _jclass * ourDoubleJCl_;
d213 4
a216 3
      // A global reference to the JNI class object for Java class String.
      // A global reference to the JNI class object for Java class Integer.
      // A global reference to the JNI class object for Java class Double.
d219 11
a229 4
   static _jmethodID * valueOfDoubleJMeth_;
      //
      // The JNI method ID for the Java class Integer static method valueOf.
      // The JNI method ID for the Java class Double  static method valueOf.
@


1.21
log
@Renamed JavaObjRep to CORJOR.
@
text
@d25 3
@


1.20
log
@Problem.getCriticalList ()
@
text
@d24 1
a24 1
//    JavaObjRep
@


1.19
log
@Replaced calls to ctors for Java Integer and Double with valueOf.
@
text
@a41 4
      //
      // This function is to be called only from within the execution of the
      // Java method CppObjRep.setUpCppPortion (), which is statically
      // synchronized.
d91 19
d137 3
a139 1
   static _jclass * findJClass (JNIEnv * theJNIEnv, const char * theClassName);
d166 1
d169 1
a169 4

   static _jmethodID * valueOfDoubleJMeth_;
      //
      // The JNI method ID for the Java class Double static method valueOf.
@


1.18
log
@CPLEX
@
text
@d64 2
a65 1
   _jobject * newJInteger (int theInt);
d67 2
a68 7
      // Creates a Java Integer whose value is theInt and returns a local
      // reference to it.

   _jobject * newJDouble (double theDbl);
      //
      // Creates a Java Double whose value is theDbl and returns a local
      // reference to it.
d140 3
a142 3
   static _jclass * ourJClForString_;
   static _jclass * ourJClForInteger_;
   static _jclass * ourJClForDouble_;
d148 5
a152 2
   static _jmethodID * ourJMethForIntegerCtor_;
   static _jmethodID * ourJMethForDoubleCtor_;
d154 1
a154 2
      // The JNI method ID for the Java class Integer constructor.
      // The JNI method ID for the Java class Double  constructor.
@


1.17
log
@CPLEX
@
text
@d66 6
a71 1
      // Creates a Java Integer whose value if theInt and returns a local
d145 2
a148 3

   static _jclass * ourJClForInteger_;
      //
d150 1
d153 1
d155 2
a156 1
      // The JNI method ID for the ctor for the Java class Integer.
@


1.16
log
@CPLEX
@
text
@d47 1
a47 1
   _jdoubleArray * makeJDblArray (double * theDblCVec, int theLength);
d52 1
a52 1
   _jobjectArray * makeJStrArray (
d59 1
a59 1
   _jstring * makeJString (const char * theCString);
d64 1
a64 1
   _jobject * makeJInteger (int theInt);
@


1.15
log
@CPLEX
@
text
@d64 5
d121 1
a121 1
   static void findJClForString (JNIEnv * theJNIEnv);
d123 2
a124 1
      // Sets ourJClForString_.
d141 9
a149 1
      // A weak global reference to the JNI jclass for Java class String.
@


1.14
log
@CPLEX
@
text
@d38 1
a38 1
   static void setUpJni (NativeCall & theCall);
d41 1
d116 1
a116 1
   static void findJClForString (NativeCall & theCall);
d119 1
@


1.13
log
@Multi-Obj Mode.
@
text
@d38 8
d115 4
d130 4
@


1.12
log
@Detection of  non-UFT-8 strings.
@
text
@d43 7
@


1.11
log
@PIP
@
text
@d48 7
@


1.10
log
@Implemented getPipSeq.
@
text
@a42 5
   _jintArray * makeJIntArray (int * theIntCVec, int theLength);
      //
      // Creates a Java array of ints that's a copy of theIntCVec and is of
      // length theLength and returns a local reference to it.

@


1.9
log
@Added code to handle memory errors in makeJString.
@
text
@d38 10
d50 2
a51 1
      // Creates and returns local reference to a j-string copy of theCString.
@


1.8
log
@Minor revision.
@
text
@d60 1
a60 1
   void throwOnJavaException ();
d66 1
a66 1
   static void throwOnJavaException (JNIEnv * theJNIEnv);
@


1.7
log
@Replaced class JavaExcException with the throwing of a _jthrowable pointer.
@
text
@d63 1
a63 1
      // one, clears it and then throws the corresponding jthrowable pointer as
d69 1
a69 1
      // one, clears it and then throws the corresponding jthrowable pointer as
a71 10
   void abortOnJavaException ();
      //
      // Checks for any Java Throwable that's currently pending and if there is
      // one, aborts the program with an error message.

   static void abortOnJavaException (JNIEnv * theJNIEnv);
      //
      // Checks for any Java Throwable that's currently pending and if there is
      // one, aborts the program with an error message.

@


1.6
log
@Added code to handle Java exceptions raised during the execution of JNI
   functions.
@
text
@d63 2
a64 1
      // one, throws a JavaExcException.
d69 2
a70 1
      // one, throws a JavaExcException.
@


1.5
log
@Updated some comments.
@
text
@d19 7
d60 11
a70 1
   void checkForJniException ();
d72 2
a73 1
      // Handles any exception that has been thrown by JNI.
d75 1
a75 1
   static void checkForJniException (JNIEnv * theJNIEnv);
d77 2
a78 1
      // Handles any exception that has been thrown by JNI.
@


1.4
log
@Removed C++ class JniLocalFrame.
@
text
@d78 1
a78 1
      // Not defined; prevents accidental assignment.
@


1.3
log
@Revised class StringWoa.
@
text
@d61 4
@


1.2
log
@Extraction.
@
text
@d31 1
a31 1
   _jstring * makeJString (const StringWoa & theStringWoa);
d33 1
a33 1
      // Creates and returns local reference to a j-string copy of theStringWoa.
@


1.1
log
@Changed name of C++ class JniWrapper to JniClient.
@
text
@d33 1
a33 1
      // Creates and returns a j-string copy of theStringWoa.
@

