head	1.26;
access;
symbols;
locks; strict;
comment	@ * @;


1.26
date	2008.09.26.22.21.22;	author rjw;	state dead;
branches;
next	1.25;

1.25
date	2008.09.19.15.11.13;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.09.12.14.43.23;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.09.09.18.59.59;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.09.02.14.37.23;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.08.29.18.36.43;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.08.29.15.07.59;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.08.29.14.22.00;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.08.27.15.30.46;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.05.30.16.33.36;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.05.30.15.52.20;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.05.29.22.03.31;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.05.29.20.53.56;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.05.28.20.24.47;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.05.28.18.10.12;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.05.27.14.57.44;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.05.23.22.58.33;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.22.21.02.58;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.21.18.07.12;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.20.20.37.02;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.20.18.16.40;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.20.15.24.49;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.19.22.20.55;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.16.18.06.46;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.15.19.45.17;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.20.54.11;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Numerous class name changes.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source file PartCI.C.
//
// Contains the C++ implementations of the native methods of Java class
// witj.PartCI.
//------------------------------------------------------------------------------

#include <JniHandler.h>
#include       <Part.h>

using namespace WitJ;

//------------------------------------------------------------------------------

nativeMethod (void, PartCI, setPartName) (
      JNIEnv *   theJNIEnv,
      _jobject * thePartCIJObj,
      _jstring * thePartNameJStr)
   {
   JniHandler   theJniHand (theJNIEnv);
   Part *       thePart;
   const char * thePartNameCStr;

   thePart         = theJniHand.getObject (thePartCIJObj)->asPart ();

   thePartNameCStr = theJniHand.makeCString (thePartNameJStr);

   thePart->setPartName (thePartNameCStr);
   }

//------------------------------------------------------------------------------

nativeMethod (jboolean, PartCI, isAMaterial) (
      JNIEnv *   theJNIEnv,
      _jobject * thePartCIJObj)
   {
   JniHandler theJniHand (theJNIEnv);
   Part *     thePart;

   thePart = theJniHand.getObject (thePartCIJObj)->asPart ();

   return thePart->isAMaterial ();
   }

//------------------------------------------------------------------------------

nativeMethod (void, PartCI, createMyCppPart) (
      JNIEnv *   theJNIEnv,
      _jobject * thePartCIJObj,
      _jobject * theProblemCIJObj,
      _jstring * thePartNameJStr,
      jboolean   toBeAMaterial)
   {
   JniHandler   theJniHand (theJNIEnv);
   Problem *    theProblem;
   const char * thePartNameCStr;
   Part *       thePart;

   theProblem      = theJniHand.getObject (theProblemCIJObj)->asProblem ();

   thePartNameCStr = theJniHand.makeCString (thePartNameJStr);

   thePart         = new Part (theProblem, thePartNameCStr, toBeAMaterial);

   theJniHand.transferTo (thePartCIJObj, thePart);
   }
@


1.25
log
@Minor revision.
@
text
@@


1.24
log
@Revised the use of class CTVecRes.
@
text
@d33 1
a33 1
nativeMethod (jboolean, PartCI, isMaterial) (
d42 1
a42 1
   return thePart->isMaterial ();
d52 1
a52 1
      jboolean   isMaterialBool)
d63 1
a63 1
   thePart         = new Part (theProblem, thePartNameCStr, isMaterialBool);
@


1.23
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@d50 1
a50 1
      _jobject * theSessionCIJObj,
d55 1
a55 1
   Session *    theSession;
d59 1
a59 1
   theSession      = theJniHand.getObject (theSessionCIJObj)->asSession ();
d63 1
a63 1
   thePart         = new Part (theSession, thePartNameCStr, isMaterialBool);
@


1.22
log
@"partCategory" attribute.
@
text
@d50 1
a50 1
      _jobject * theProbCoordCIJObj,
d55 1
a55 1
   ProbCoord *  theProbCoord;
d59 1
a59 1
   theProbCoord    = theJniHand.getObject (theProbCoordCIJObj)->asProbCoord ();
d63 1
a63 1
   thePart         = new Part (theProbCoord, thePartNameCStr, isMaterialBool);
@


1.21
log
@"demandName" attribute.
@
text
@d33 14
d52 1
a52 1
      jboolean   isaMaterial)
d63 1
a63 1
   thePart         = new Part (theProbCoord, thePartNameCStr, isaMaterial);
@


1.20
log
@"partName" attribute.
@
text
@d15 1
a15 1
nativeMethod (void, PartCI, createMyCppPart) (
d18 1
a18 3
      _jobject * theProbCoordCIJObj,
      _jstring * thePartNameJStr,
      jboolean   isaMaterial)
d21 1
a21 1
   ProbCoord *  theProbCoord;
a22 1
   Part *       thePart;
d24 1
a24 1
   theProbCoord    = theJniHand.getObject (theProbCoordCIJObj)->asProbCoord ();
d28 1
a28 3
   thePart         = new Part (theProbCoord, thePartNameCStr, isaMaterial);

   theJniHand.transferTo (thePartCIJObj, thePart);
d33 1
a33 1
nativeMethod (void, PartCI, setPartName) (
d36 3
a38 1
      _jstring * thePartNameJStr)
d41 2
a43 1
   const char * thePartNameCStr;
d45 1
a45 1
   thePart         = theJniHand.getObject (thePartCIJObj)->asPart ();
d49 3
a51 1
   thePart->setPartName (thePartNameCStr);
@


1.19
log
@"partName" attribute.
@
text
@d19 1
a19 1
      _jstring * partNameJStr,
d24 1
a24 1
   const char * partNameCStr;
d27 1
a27 1
   theProbCoord = theJniHand.getObject (theProbCoordCIJObj)->asProbCoord ();
d29 1
a29 1
   partNameCStr = theJniHand.makeCString (partNameJStr);
d31 1
a31 1
   thePart      = new Part (theProbCoord, partNameCStr, isaMaterial);
d41 1
a41 1
      _jstring * partNameJStr)
d45 1
a45 1
   const char * partNameCStr;
d47 1
a47 1
   thePart      = theJniHand.getObject (thePartCIJObj)->asPart ();
d49 1
a49 1
   partNameCStr = theJniHand.makeCString (partNameJStr);
d51 1
a51 1
   thePart->setPartName (partNameCStr);
@


1.18
log
@Attributes.
@
text
@d35 18
@


1.17
log
@JniHandler
@
text
@d27 1
a27 1
   theProbCoord = theJniHand.getObject (theProbCoordCIJObj)->thisProbCoord ();
@


1.16
log
@JniHandler
@
text
@d27 1
a27 1
   theProbCoord = theJniHand.getProbCoord (theProbCoordCIJObj);
@


1.15
log
@Attributes
@
text
@d17 1
a17 1
      _jobject * theJObj,
d22 1
a22 1
   JniHandler   theJniHand (theJNIEnv, theJObj);
d33 1
a33 1
   theJniHand.attachToCI (thePart);
@


1.14
log
@Attributes.
@
text
@a8 1
#include     <VecWoa.h>
a9 1
#include        <Att.h>
a34 18

//------------------------------------------------------------------------------

nativeMethod (void, PartCI, getSupplyVol) (
      JNIEnv *        theJNIEnv,
      _jobject *      theJObj,
      _jdoubleArray * supplyVolJDblAr)
   {
   JniHandler      theJniHand (theJNIEnv, theJObj);
   Part *          thePart;
   VecWoa <double> supplyVolWoa;

   thePart = theJniHand.getPart ();

   thePart->myProbCoord ()->supplyVol ()->getValue (thePart, supplyVolWoa);

   theJniHand.copyInto (supplyVolJDblAr, supplyVolWoa);
   }
@


1.13
log
@Attributes
@
text
@a39 18
nativeMethod (void, PartCI, setSupplyVol) (
      JNIEnv *        theJNIEnv,
      _jobject *      theJObj,
      _jdoubleArray * supplyVolJDblAr)
   {
   JniHandler     theJniHand (theJNIEnv, theJObj);
   Part *         thePart;
   const double * supplyVolCVec;

   thePart       = theJniHand.getPart ();

   supplyVolCVec = theJniHand.makeDblCTVec (supplyVolJDblAr);

   thePart->myProbCoord ()->supplyVol ()->setValue (thePart, supplyVolCVec);
   }

//------------------------------------------------------------------------------

@


1.12
log
@Initial implementation of attributes.
@
text
@d63 3
a65 3
   JniHandler  theJniHand (theJNIEnv, theJObj);
   Part *      thePart;
   DblVecWoa   supplyVolWoa;
d69 1
a69 1
   thePart->getSupplyVol (supplyVolWoa);
@


1.11
log
@*** empty log message ***
@
text
@d11 1
d53 1
a53 1
   thePart->setSupplyVol (supplyVolCVec);
@


1.10
log
@*** empty log message ***
@
text
@d9 1
d36 36
@


1.9
log
@*** empty log message ***
@
text
@d27 1
a27 1
   theProbCoord = theJniHand.getObject (theProbCoordCIJObj)->thisProbCoord ();
@


1.8
log
@*** empty log message ***
@
text
@d33 1
a33 1
   theJniHand.attachToCppInterface (thePart);
@


1.7
log
@*** empty log message ***
@
text
@a9 1
#include     <Native.h>
d17 1
a17 1
      _jobject * thePartCIJObj,
d22 1
a22 1
   JniHandler   theJniHand (theJNIEnv);
d33 1
a33 1
   theJniHand.acquireFor (thePartCIJObj, thePart);
@


1.6
log
@*** empty log message ***
@
text
@a8 1
#include  <StringJia.h>
d23 1
a23 2
   JniHandler   theJniHandler (theJNIEnv);
   StringJia    partNameJia   (theJNIEnv, partNameJStr);
d25 1
a25 1
   const char * partNameVal;
d28 1
a28 1
   theProbCoord = theJniHandler.objectOf (theProbCoordCIJObj)->thisProbCoord ();
d30 1
a30 1
   partNameVal  = partNameJia.myCString ();
d32 1
a32 1
   thePart      = new Part (theProbCoord, partNameVal, isaMaterial);
d34 1
a34 1
   theJniHandler.transferTo (thePartCIJObj, thePart);
@


1.5
log
@*** empty log message ***
@
text
@a8 1
#include      <CIJia.h>
d24 5
a28 6
   JniHandler        theJniHandler     (theJNIEnv);
   CIJia <ProbCoord> theProbCoordCIJia (theJNIEnv, theProbCoordCIJObj);
   StringJia         partNameJia       (theJNIEnv, partNameJStr);
   ProbCoord *       theProbCoord;
   const char *      partNameVal;
   Part *            thePart;
d30 1
a30 1
   theProbCoord = theProbCoordCIJia.myObject ();
@


1.4
log
@*** empty log message ***
@
text
@d8 5
a12 5
#include   <JniAsst.h>
#include     <CIJia.h>
#include <StringJia.h>
#include      <Part.h>
#include    <Native.h>
d25 1
a25 1
   JniAsst           theJniAsst        (theJNIEnv);
d38 1
a38 1
   theJniAsst.transferTo (thePartCIJObj, thePart);
@


1.3
log
@*** empty log message ***
@
text
@d8 1
d25 1
a25 1
   CIJia <Part>      thePartCIJia      (theJNIEnv, thePartCIJObj);
d38 1
a38 1
   thePartCIJia.attach (thePart);
@


1.2
log
@*** empty log message ***
@
text
@d31 1
a31 1
   theProbCoord = theProbCoordCIJia.myDerJAccObject ();
@


1.1
log
@*** empty log message ***
@
text
@d20 1
a20 1
      _jobject * theProblemCIJObj,
d24 6
a29 4
   CIJia <Part>    thePartCIJia    (theJNIEnv, thePartCIJObj);
   CIJia <Problem> theProblemCIJia (theJNIEnv, theProblemCIJObj);
   StringJia       partNameJia     (theJNIEnv, partNameJStr);
   Part *          thePart;
d31 5
a35 1
   thePart = new Part (theProblemCIJia, partNameJia, isaMaterial);
@

