head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2008.09.26.22.21.21;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2008.09.05.18.34.02;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.04.20.36.22;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Numerous class name changes.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File ComponentCI.C.
//
// Contains the C++ implementations of the native methods of Java class
// witj.ComponentCI.
//------------------------------------------------------------------------------

#include <JniHandler.h>
#include  <Component.h>
#include     <VecWoa.h>

using namespace WitJ;

//------------------------------------------------------------------------------

nativeMethod (void, ComponentCI, setBoundSet) (
      JNIEnv *        theJNIEnv,
      _jobject *      theCompCIJObj,
      _jdoubleArray * hardLBJArr,
      _jdoubleArray * softLBJArr,
      _jdoubleArray * hardUBJArr)
   {
   JniHandler     theJniHand (theJNIEnv);
   Component *    theComp;
   const double * hardLBCVec;
   const double * softLBCVec;
   const double * hardUBCVec;

   theComp    = theJniHand.getObject (theCompCIJObj)->asComponent ();

   hardLBCVec = theJniHand.makeBoundVec (hardLBJArr);
   softLBCVec = theJniHand.makeBoundVec (softLBJArr);
   hardUBCVec = theJniHand.makeBoundVec (hardUBJArr);

   theComp->setBoundSet (hardLBCVec, softLBCVec, hardUBCVec);
   }

//------------------------------------------------------------------------------

nativeMethod (void, ComponentCI, getBoundSet) (
      JNIEnv *        theJNIEnv,
      _jobject *      theCompCIJObj,
      _jdoubleArray * hardLBJArr,
      _jdoubleArray * softLBJArr,
      _jdoubleArray * hardUBJArr)
   {
   JniHandler      theJniHand (theJNIEnv);
   Component *     theComp;
   VecWoa <double> hardLBWoa;
   VecWoa <double> softLBWoa;
   VecWoa <double> hardUBWoa;

   theComp = theJniHand.getObject (theCompCIJObj)->asComponent ();

   theComp->getBoundSet (hardLBWoa, softLBWoa, hardUBWoa);

   theJniHand.copyInto (hardLBJArr, hardLBWoa);
   theJniHand.copyInto (softLBJArr, softLBWoa);
   theJniHand.copyInto (hardUBJArr, hardUBWoa);
   }
@


1.2
log
@BoundSet attributes.
@
text
@@


1.1
log
@Added attribute "execBounds".
@
text
@d29 1
a29 1
   theComp       = theJniHand.getObject (theCompCIJObj)->asComponent ();
d31 3
a33 3
   hardLBCVec = theJniHand.makeDblCTVec (hardLBJArr);
   softLBCVec = theJniHand.makeDblCTVec (softLBJArr);
   hardUBCVec = theJniHand.makeDblCTVec (hardUBJArr);
@

