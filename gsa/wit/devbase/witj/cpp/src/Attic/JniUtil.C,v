head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2011.04.13.22.36.23;	author rjw;	state dead;
branches;
next	1.7;

1.7
date	2011.04.13.21.50.34;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.13.17.27.27;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.13.16.00.16;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.12.00.33.11;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.11.18.38.18;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.06.15.18.19;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.05.22.25.43;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Removed namespace JniUtil.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File JniUtil.C.
//------------------------------------------------------------------------------

#include    <JniUtil.h>
#include  <JniClient.h>
#include <JavaAccObj.h>

//------------------------------------------------------------------------------

void WitJ::JniUtil::transferTo (
      _jobject *   theCppObjRepJObj,
      JavaAccObj * theJavaAccObj,
      JNIEnv *     theJNIEnv)
   {
   JniClient::transferTo (theCppObjRepJObj, theJavaAccObj, theJNIEnv);
   }

//------------------------------------------------------------------------------

void WitJ::JniUtil::nullifyCppObjectPtr (
      _jobject * theCppObjRepJObj,
      JNIEnv *   theJNIEnv)
   {
   JniClient::nullifyCppObjectPtr (theCppObjRepJObj, theJNIEnv);
   }

//------------------------------------------------------------------------------

WitJ::Coordinator * WitJ::JniUtil::getCoordinator (
      _jobject * theCoordJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theCoordJObj, theJNIEnv)->asCoordinator ();
   }

//------------------------------------------------------------------------------

WitJ::Problem * WitJ::JniUtil::getProblem (
      _jobject * theProblemJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theProblemJObj, theJNIEnv)->asProblem ();
   }

//------------------------------------------------------------------------------

WitJ::AttBldr * WitJ::JniUtil::getAttBldr (
      _jobject * theAttBldrJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theAttBldrJObj, theJNIEnv)->asAttBldr ();
   }

//------------------------------------------------------------------------------

WitJ::Att * WitJ::JniUtil::getAtt (
      _jobject * theAttJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theAttJObj, theJNIEnv)->asAtt ();
   }

//------------------------------------------------------------------------------

WitJ::MessageMgr * WitJ::JniUtil::getMessageMgr (
      _jobject * theMessageMgrJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theMessageMgrJObj, theJNIEnv)->asMessageMgr ();
   }

//------------------------------------------------------------------------------

WitJ::Component * WitJ::JniUtil::getComponent (
      _jobject * theComponentJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theComponentJObj, theJNIEnv)->asComponent ();
   }

//------------------------------------------------------------------------------

WitJ::Part * WitJ::JniUtil::getPart (
      _jobject * thePartJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (thePartJObj, theJNIEnv)->asPart ();
   }

//------------------------------------------------------------------------------

WitJ::Demand * WitJ::JniUtil::getDemand (
      _jobject * theDemandJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theDemandJObj, theJNIEnv)->asDemand ();
   }

//------------------------------------------------------------------------------

WitJ::Operation * WitJ::JniUtil::getOperation (
      _jobject * theOperationJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theOperationJObj, theJNIEnv)->asOperation ();
   }

//------------------------------------------------------------------------------

WitJ::BomEntry * WitJ::JniUtil::getBomEntry (
      _jobject * theBomEntryJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theBomEntryJObj, theJNIEnv)->asBomEntry ();
   }

//------------------------------------------------------------------------------

WitJ::Substitute * WitJ::JniUtil::getSubstitute (
      _jobject * theSubstituteJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theSubstituteJObj, theJNIEnv)->asSubstitute ();
   }

//------------------------------------------------------------------------------

WitJ::BopEntry * WitJ::JniUtil::getBopEntry (
      _jobject * theBopEntryJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theBopEntryJObj, theJNIEnv)->asBopEntry ();
   }

//------------------------------------------------------------------------------

WitJ::JavaAccObj * WitJ::JniUtil::getJavaAccObj (
      _jobject * theCppObjRepJObj,
      JNIEnv *   theJNIEnv)
   {
   return JniClient::getJavaAccObj (theCppObjRepJObj, theJNIEnv);
   }

//------------------------------------------------------------------------------

_jobject * WitJ::JniUtil::matchingIntegerJObj (int theInt, JNIEnv * theJNIEnv)
   {
   JniClient::matchingIntegerJObj (theInt, theJNIEnv);
   }

//------------------------------------------------------------------------------

_jobject * WitJ::JniUtil::matchingDoubleJObj (double theDbl, JNIEnv * theJNIEnv)
   {
   JniClient::matchingDoubleJObj (theDbl, theJNIEnv);
   }
@


1.7
log
@ArrayJOR classes
@
text
@@


1.6
log
@JniUtil
@
text
@a146 93
void WitJ::JniUtil::copyInto (
      Boolean *        theBoolCVec,
      _jbooleanArray * theJBoolArr,
      JNIEnv *         theJNIEnv)
   {
   int        theLength;
   void *     theVoidCVec;
   jboolean * theJBoolCVec;
   int        theIdx;

   theLength    = theJNIEnv->GetArrayLength (theJBoolArr);

   theVoidCVec  = getCVecFromJArrayCrit (theJBoolArr, theJNIEnv);

   theJBoolCVec = static_cast <jboolean *> (theVoidCVec);

   for (theIdx = 0; theIdx < theLength; theIdx ++)
      {
      theBoolCVec[theIdx] = theJBoolCVec[theIdx];
      }

   releaseJArrayCritDontCopy (theJBoolArr, theVoidCVec, theJNIEnv);
   }

//------------------------------------------------------------------------------

void WitJ::JniUtil::copyInto (
      int *        theIntCVec,
      _jintArray * theJIntArr,
      JNIEnv *     theJNIEnv)
   {
   int    theLength;
   void * theVoidCVec;
   jint * theJIntCVec;
   int    theIdx;

   theLength   = theJNIEnv->GetArrayLength (theJIntArr);

   theVoidCVec = getCVecFromJArrayCrit (theJIntArr, theJNIEnv);

   theJIntCVec = static_cast <jint *> (theVoidCVec);

   for (theIdx = 0; theIdx < theLength; theIdx ++)
      {
      theIntCVec[theIdx] = theJIntCVec[theIdx];
      }

   releaseJArrayCritDontCopy (theJIntArr, theVoidCVec, theJNIEnv);
   }

//------------------------------------------------------------------------------

void WitJ::JniUtil::copyInto (
      double *        theDblCVec,
      _jdoubleArray * theJDblArr,
      JNIEnv *        theJNIEnv)
   {
   int       theLength;
   void *    theVoidCVec;
   jdouble * theJDblCVec;
   int       theIdx;

   theLength   = theJNIEnv->GetArrayLength (theJDblArr);

   theVoidCVec = getCVecFromJArrayCrit (theJDblArr, theJNIEnv);

   theJDblCVec = static_cast <jdouble *> (theVoidCVec);

   for (theIdx = 0; theIdx < theLength; theIdx ++)
      {
      theDblCVec[theIdx] = theJDblCVec[theIdx];
      }

   releaseJArrayCritDontCopy (theJDblArr, theVoidCVec, theJNIEnv);
   }

//------------------------------------------------------------------------------

void WitJ::JniUtil::copyBoundVecInto (
      double * &      theDblCVec,
      _jdoubleArray * theJDblArr,
      JNIEnv *        theJNIEnv)
   {
   if (theJDblArr == NULL)
      {
      theDblCVec = NULL;
      }
   else
      copyInto (theDblCVec, theJDblArr, theJNIEnv);
   }

//------------------------------------------------------------------------------

a157 30

//------------------------------------------------------------------------------

void * WitJ::JniUtil::getCVecFromJArrayCrit (
       _jarray * theJArr,
      JNIEnv *   theJNIEnv)
   {
   void * theVoidCVec;

   theVoidCVec = theJNIEnv->GetPrimitiveArrayCritical (theJArr, NULL);

   if (theVoidCVec == NULL)
      {
      JniClient::throwAnyJavaException (theJNIEnv);

      EXCEPTION_ASSERT (false);
      }

   return theVoidCVec;
   }

//------------------------------------------------------------------------------

void WitJ::JniUtil::releaseJArrayCritDontCopy (
      _jarray * theJArr,
      void *    theCVec,
      JNIEnv *  theJNIEnv)
   {
   theJNIEnv->ReleasePrimitiveArrayCritical (theJArr, theCVec, JNI_ABORT);
   }
@


1.5
log
@ArrayJOR classes
@
text
@a239 78
void WitJ::JniUtil::copyInto (
      _jbooleanArray * theJBoolArr,
      const Boolean *  theBoolCVec,
      JNIEnv *         theJNIEnv)
   {
   int        theLength;
   void *     theVoidCVec;
   jboolean * theJBoolCVec;
   int        theIdx;

   theLength    = theJNIEnv->GetArrayLength (theJBoolArr);

   theVoidCVec  = getCVecFromJArrayCrit (theJBoolArr, theJNIEnv);

   theJBoolCVec = static_cast <jboolean *> (theVoidCVec);

   for (theIdx = 0; theIdx < theLength; theIdx ++)
      {
      theJBoolCVec[theIdx] = theBoolCVec[theIdx];
      }

   releaseJArrayCritAndCopy (theJBoolArr, theVoidCVec, theJNIEnv);
   }

//------------------------------------------------------------------------------

void WitJ::JniUtil::copyInto (
      _jintArray * theJIntArr,
      const int *  theIntCVec,
      JNIEnv *     theJNIEnv)
   {
   int    theLength;
   void * theVoidCVec;
   jint * theJIntCVec;
   int    theIdx;

   theLength   = theJNIEnv->GetArrayLength (theJIntArr);

   theVoidCVec = getCVecFromJArrayCrit (theJIntArr, theJNIEnv);

   theJIntCVec = static_cast <jint *> (theVoidCVec);

   for (theIdx = 0; theIdx < theLength; theIdx ++)
      {
      theJIntCVec[theIdx] = theIntCVec[theIdx];
      }

   releaseJArrayCritAndCopy (theJIntArr, theVoidCVec, theJNIEnv);
   }

//------------------------------------------------------------------------------

void WitJ::JniUtil::copyInto (
      _jdoubleArray * theJDblArr,
      const double *  theDblCVec,
      JNIEnv *        theJNIEnv)
   {
   int       theLength;
   void *    theVoidCVec;
   jdouble * theJDblCVec;
   int       theIdx;

   theLength   = theJNIEnv->GetArrayLength (theJDblArr);

   theVoidCVec = getCVecFromJArrayCrit (theJDblArr, theJNIEnv);

   theJDblCVec = static_cast <jdouble *> (theVoidCVec);

   for (theIdx = 0; theIdx < theLength; theIdx ++)
      {
      theJDblCVec[theIdx] = theDblCVec[theIdx];
      }

   releaseJArrayCritAndCopy (theJDblArr, theVoidCVec, theJNIEnv);
   }

//------------------------------------------------------------------------------

a280 10

//------------------------------------------------------------------------------

void WitJ::JniUtil::releaseJArrayCritAndCopy (
      _jarray * theJArr,
      void *    theCVec,
      JNIEnv *  theJNIEnv)
   {
   theJNIEnv->ReleasePrimitiveArrayCritical (theJArr, theCVec, 0);
   }
@


1.4
log
@Class StringJOR
@
text
@d209 1
a209 1
   theLength    = theJNIEnv->GetArrayLength (theJDblArr);
d276 1
a276 1
   theLength    = theJNIEnv->GetArrayLength (theJIntArr);
@


1.3
log
@Class WString
@
text
@a7 1
#include    <WString.h>
a224 29
void WitJ::JniUtil::copyInto (
      WString &  theWString,
      _jstring * theJString,
      JNIEnv *   theJNIEnv)
   {
   int theJStringLen;
   int theCStringLen;

   EXCEPTION_ASSERT (theJString != NULL);

   theJStringLen = theJNIEnv->GetStringLength    (theJString);
   theCStringLen = theJNIEnv->GetStringUTFLength (theJString);

   theWString.resize (theCStringLen);

   theJNIEnv->
      GetStringUTFRegion (
         theJString,
         0,
         theJStringLen,
         theWString.getCString ());

   JniClient::throwAnyJavaException (theJNIEnv);

   theWString.getCString ()[theCStringLen] = '\0';
   }

//------------------------------------------------------------------------------

a317 17
_jstring * WitJ::JniUtil::newJString (
      const char * theCString,
      JNIEnv *     theJNIEnv)
   {
   _jstring * theJString;

   EXCEPTION_ASSERT (theCString != NULL);

   theJString = theJNIEnv->NewStringUTF (theCString);

   JniClient::throwAnyJavaException (theJNIEnv);

   return theJString;
   }

//------------------------------------------------------------------------------

@


1.2
log
@JniUtil
@
text
@d8 1
a8 1
#include     <String.h>
d227 1
a227 1
      String &   theString,
d239 1
a239 1
   theString.resize (theCStringLen);
d246 1
a246 1
         theString.getCString ());
d250 1
a250 1
   theString.getCString ()[theCStringLen] = '\0';
@


1.1
log
@Namespace JniUtil.
@
text
@d22 9
d365 14
@

