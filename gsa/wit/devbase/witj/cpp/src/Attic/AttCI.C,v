head	1.23;
access;
symbols;
locks; strict;
comment	@ * @;


1.23
date	2008.09.26.22.21.20;	author rjw;	state dead;
branches;
next	1.22;

1.22
date	2008.08.27.15.30.44;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.08.06.16.33.04;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.08.01.16.29.31;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.07.18.20.29.15;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.07.15.17.46.07;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.07.09.22.26.46;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.07.07.22.59.31;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.07.03.14.42.44;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.07.01.16.09.21;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.27.21.43.23;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.27.16.34.06;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.26.21.49.07;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.26.19.18.06;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.18.21.28.16;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.12.14.54.23;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.11.19.59.53;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.11.19.27.16;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.10.20.40.27;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.30.16.33.36;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.30.15.52.18;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.29.22.03.31;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.29.20.53.56;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Numerous class name changes.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source file AttCI.C.
//
// Contains the C++ implementations of the native methods of Java class
// witj.AttCI.
//------------------------------------------------------------------------------

#include <JniHandler.h>
#include        <Att.h>
#include    <AttBldr.h>
#include     <VecWoa.h>

using namespace WitJ;

//------------------------------------------------------------------------------

nativeMethod (void, AttCI, acquireMyCppAtt) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttCIJObj,
      _jobject * theAttBldrCIJObj,
      _jstring * scopedAttNameJStr)
   {
   JniHandler   theJniHand (theJNIEnv);
   AttBldr *    theAttBldr;
   const char * scopedAttNameCStr;
   Att *        theAtt;

   theAttBldr        = theJniHand.getObject (theAttBldrCIJObj)->asAttBldr ();

   scopedAttNameCStr = theJniHand.makeCString (scopedAttNameJStr);

   theAtt            = theAttBldr->handOverAttFor (scopedAttNameCStr);

   theJniHand.transferTo (theAttCIJObj, theAtt);
   }

//------------------------------------------------------------------------------

nativeMethod (void, AttCI, setBool) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttCIJObj,
      _jobject * theCompCIJObj,
      jboolean   theJBool)
   {
   JniHandler  theJniHand (theJNIEnv);
   Att *       theAtt;
   Component * theComp;

   theAtt  = theJniHand.getObject  (theAttCIJObj)->asAtt       ();
   theComp = theJniHand.getObject (theCompCIJObj)->asComponent ();

   theAtt->setValue (theComp, theJBool);
   }

//------------------------------------------------------------------------------

nativeMethod (void, AttCI, setInt) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttCIJObj,
      _jobject * theCompCIJObj,
      jint       theJInt)
   {
   JniHandler  theJniHand (theJNIEnv);
   Att *       theAtt;
   Component * theComp;

   theAtt  = theJniHand.getObject  (theAttCIJObj)->asAtt       ();
   theComp = theJniHand.getObject (theCompCIJObj)->asComponent ();

   theAtt->setValue (theComp, theJInt);
   }

//------------------------------------------------------------------------------

nativeMethod (void, AttCI, setDbl) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttCIJObj,
      _jobject * theCompCIJObj,
      jdouble    theJDbl)
   {
   JniHandler  theJniHand (theJNIEnv);
   Att *       theAtt;
   Component * theComp;

   theAtt  = theJniHand.getObject  (theAttCIJObj)->asAtt       ();
   theComp = theJniHand.getObject (theCompCIJObj)->asComponent ();

   theAtt->setValue (theComp, theJDbl);
   }

//------------------------------------------------------------------------------

nativeMethod (void, AttCI, setBoolVec) (
      JNIEnv *         theJNIEnv,
      _jobject *       theAttCIJObj,
      _jobject *       theCompCIJObj,
      _jbooleanArray * theJBoolArr)
   {
   JniHandler      theJniHand (theJNIEnv);
   Att *           theAtt;
   Component *     theComp;
   const Boolean * theBoolCVec;

   theAtt      = theJniHand.getObject  (theAttCIJObj)->asAtt       ();
   theComp     = theJniHand.getObject (theCompCIJObj)->asComponent ();

   theBoolCVec = theJniHand.makeBoolCTVec (theJBoolArr);

   theAtt->setValue (theComp, theBoolCVec);
   }

//------------------------------------------------------------------------------

nativeMethod (void, AttCI, setIntVec) (
      JNIEnv *     theJNIEnv,
      _jobject *   theAttCIJObj,
      _jobject *   theCompCIJObj,
      _jintArray * theJIntArr)
   {
   JniHandler  theJniHand (theJNIEnv);
   Att *       theAtt;
   Component * theComp;
   const int * theIntCVec;

   theAtt     = theJniHand.getObject  (theAttCIJObj)->asAtt       ();
   theComp    = theJniHand.getObject (theCompCIJObj)->asComponent ();

   theIntCVec = theJniHand.makeIntCTVec (theJIntArr);

   theAtt->setValue (theComp, theIntCVec);
   }

//------------------------------------------------------------------------------

nativeMethod (void, AttCI, setDblVec) (
      JNIEnv *        theJNIEnv,
      _jobject *      theAttCIJObj,
      _jobject *      theCompCIJObj,
      _jdoubleArray * theJDblArr)
   {
   JniHandler     theJniHand (theJNIEnv);
   Att *          theAtt;
   Component *    theComp;
   const double * theDblCVec;

   theAtt     = theJniHand.getObject  (theAttCIJObj)->asAtt       ();
   theComp    = theJniHand.getObject (theCompCIJObj)->asComponent ();

   theDblCVec = theJniHand.makeDblCTVec (theJDblArr);

   theAtt->setValue (theComp, theDblCVec);
   }

//------------------------------------------------------------------------------

nativeMethod (jboolean, AttCI, getBool) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttCIJObj,
      _jobject * theCompCIJObj)
   {
   JniHandler  theJniHand (theJNIEnv);
   Att *       theAtt;
   Component * theComp;
   Boolean     theBool;

   theAtt  = theJniHand.getObject  (theAttCIJObj)->asAtt       ();
   theComp = theJniHand.getObject (theCompCIJObj)->asComponent ();

   theAtt->getValue (theComp, theBool);

   witjAssert ((theBool == 0) || (theBool == 1));

   return theBool;
   }

//------------------------------------------------------------------------------

nativeMethod (jint, AttCI, getInt) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttCIJObj,
      _jobject * theCompCIJObj)
   {
   JniHandler  theJniHand (theJNIEnv);
   Att *       theAtt;
   Component * theComp;
   int         theInt;

   theAtt  = theJniHand.getObject  (theAttCIJObj)->asAtt       ();
   theComp = theJniHand.getObject (theCompCIJObj)->asComponent ();

   theAtt->getValue (theComp, theInt);

   return theInt;
   }

//------------------------------------------------------------------------------

nativeMethod (jdouble, AttCI, getDbl) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttCIJObj,
      _jobject * theCompCIJObj)
   {
   JniHandler  theJniHand (theJNIEnv);
   Att *       theAtt;
   Component * theComp;
   double      theDbl;

   theAtt  = theJniHand.getObject  (theAttCIJObj)->asAtt       ();
   theComp = theJniHand.getObject (theCompCIJObj)->asComponent ();

   theAtt->getValue (theComp, theDbl);

   return theDbl;
   }

//------------------------------------------------------------------------------

nativeMethod (void, AttCI, getBoolVec) (
      JNIEnv *         theJNIEnv,
      _jobject *       theAttCIJObj,
      _jobject *       theCompCIJObj,
      _jbooleanArray * theJBoolArr)
   {
   JniHandler       theJniHand (theJNIEnv);
   Att *            theAtt;
   Component *      theComp;
   VecWoa <Boolean> theBoolVecWoa;

   theAtt  = theJniHand.getObject  (theAttCIJObj)->asAtt       ();
   theComp = theJniHand.getObject (theCompCIJObj)->asComponent ();

   theAtt->getValue (theComp, theBoolVecWoa);

   theJniHand.copyInto (theJBoolArr, theBoolVecWoa);
   }

//------------------------------------------------------------------------------

nativeMethod (void, AttCI, getIntVec) (
      JNIEnv *     theJNIEnv,
      _jobject *   theAttCIJObj,
      _jobject *   theCompCIJObj,
      _jintArray * theJIntArr)
   {
   JniHandler   theJniHand (theJNIEnv);
   Att *        theAtt;
   Component *  theComp;
   VecWoa <int> theIntVecWoa;

   theAtt  = theJniHand.getObject  (theAttCIJObj)->asAtt       ();
   theComp = theJniHand.getObject (theCompCIJObj)->asComponent ();

   theAtt->getValue (theComp, theIntVecWoa);

   theJniHand.copyInto (theJIntArr, theIntVecWoa);
   }

//------------------------------------------------------------------------------

nativeMethod (void, AttCI, getDblVec) (
      JNIEnv *        theJNIEnv,
      _jobject *      theAttCIJObj,
      _jobject *      theCompCIJObj,
      _jdoubleArray * theJDblArr)
   {
   JniHandler      theJniHand (theJNIEnv);
   Att *           theAtt;
   Component *     theComp;
   VecWoa <double> theDblVecWoa;

   theAtt  = theJniHand.getObject  (theAttCIJObj)->asAtt       ();
   theComp = theJniHand.getObject (theCompCIJObj)->asComponent ();

   theAtt->getValue (theComp, theDblVecWoa);

   theJniHand.copyInto (theJDblArr, theDblVecWoa);
   }

//------------------------------------------------------------------------------

nativeMethod (jboolean, AttCI, isAnInputAtt) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttCIJObj)
   {
   JniHandler theJniHand (theJNIEnv);
   Att *      theAtt;

   theAtt = theJniHand.getObject (theAttCIJObj)->asAtt ();

   theAtt->isAnInputAtt ();

   return theAtt->isAnInputAtt ();
   }

//------------------------------------------------------------------------------

nativeMethod (jboolean, AttCI, valueTypeMatches) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttCIJObj,
      _jstring * theTypeNameJStr)
   {
   JniHandler  theJniHand (theJNIEnv);
   Att *       theAtt;
   std::string theTypeName;

   theAtt      = theJniHand.getObject   (theAttCIJObj)->asAtt ();

   theTypeName = theJniHand.makeCString (theTypeNameJStr);

   return theAtt->valueTypeMatches (theTypeName);
   }

//------------------------------------------------------------------------------

nativeMethod (jboolean, AttCI, appliesTo) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttCIJObj,
      _jstring * theClassNameJStr)
   {
   JniHandler   theJniHand (theJNIEnv);
   Att *        theAtt;
   const char * theClassNameCStr;

   theAtt           = theJniHand.getObject (theAttCIJObj)->asAtt ();

   theClassNameCStr = theJniHand.makeCString (theClassNameJStr);

   return (theAtt->getCompClassName () == theClassNameCStr);
   }
@


1.22
log
@Attributes.
@
text
@@


1.21
log
@Class ProbCoord.
@
text
@d28 1
a28 1
   theAttBldr        = theJniHand.getObject (theAttBldrCIJObj)->thisAttBldr ();
d49 2
a50 2
   theAtt  = theJniHand.getObject  (theAttCIJObj)->thisAtt       ();
   theComp = theJniHand.getObject (theCompCIJObj)->thisComponent ();
d67 2
a68 2
   theAtt  = theJniHand.getObject  (theAttCIJObj)->thisAtt       ();
   theComp = theJniHand.getObject (theCompCIJObj)->thisComponent ();
d85 2
a86 2
   theAtt  = theJniHand.getObject  (theAttCIJObj)->thisAtt       ();
   theComp = theJniHand.getObject (theCompCIJObj)->thisComponent ();
d104 2
a105 2
   theAtt      = theJniHand.getObject  (theAttCIJObj)->thisAtt       ();
   theComp     = theJniHand.getObject (theCompCIJObj)->thisComponent ();
d125 2
a126 2
   theAtt     = theJniHand.getObject  (theAttCIJObj)->thisAtt       ();
   theComp    = theJniHand.getObject (theCompCIJObj)->thisComponent ();
d146 2
a147 2
   theAtt     = theJniHand.getObject  (theAttCIJObj)->thisAtt       ();
   theComp    = theJniHand.getObject (theCompCIJObj)->thisComponent ();
d166 2
a167 2
   theAtt  = theJniHand.getObject  (theAttCIJObj)->thisAtt       ();
   theComp = theJniHand.getObject (theCompCIJObj)->thisComponent ();
d188 2
a189 2
   theAtt  = theJniHand.getObject  (theAttCIJObj)->thisAtt       ();
   theComp = theJniHand.getObject (theCompCIJObj)->thisComponent ();
d208 2
a209 2
   theAtt  = theJniHand.getObject  (theAttCIJObj)->thisAtt       ();
   theComp = theJniHand.getObject (theCompCIJObj)->thisComponent ();
d229 2
a230 2
   theAtt  = theJniHand.getObject  (theAttCIJObj)->thisAtt       ();
   theComp = theJniHand.getObject (theCompCIJObj)->thisComponent ();
d250 2
a251 2
   theAtt  = theJniHand.getObject  (theAttCIJObj)->thisAtt       ();
   theComp = theJniHand.getObject (theCompCIJObj)->thisComponent ();
d271 2
a272 2
   theAtt  = theJniHand.getObject  (theAttCIJObj)->thisAtt       ();
   theComp = theJniHand.getObject (theCompCIJObj)->thisComponent ();
d288 1
a288 1
   theAtt = theJniHand.getObject (theAttCIJObj)->thisAtt ();
d306 1
a306 1
   theAtt      = theJniHand.getObject   (theAttCIJObj)->thisAtt ();
d324 1
a324 1
   theAtt           = theJniHand.getObject (theAttCIJObj)->thisAtt ();
@


1.20
log
@Attributes.
@
text
@d94 3
a96 3
      JNIEnv *        theJNIEnv,
      _jobject *      theAttCIJObj,
      _jobject *      theCompCIJObj,
@


1.19
log
@Attributes.
@
text
@d297 18
@


1.18
log
@Attributes.
@
text
@d93 42
d139 1
a139 1
      _jdoubleArray * theJDblAr)
d149 1
a149 1
   theDblCVec = theJniHand.makeDblCTVec (theJDblAr);
d164 22
d193 45
a237 1
   witjAssert ((theInt == 0) || (theInt == 1));
d239 17
a255 1
   return theInt;
d260 1
a260 1
nativeMethod (_jdoubleArray *, AttCI, getDblVec) (
d264 1
a264 1
      _jdoubleArray * theJDblAr)
d276 1
a276 3
   theJniHand.copyInto (theJDblAr, theDblVecWoa);

   return theJDblAr;
@


1.17
log
@Attributes.
@
text
@d57 1
a57 1
nativeMethod (jboolean, AttCI, getBool) (
d60 2
a61 1
      _jobject * theCompCIJObj)
a65 1
   int         theInt;
d70 14
a83 1
   theAtt->getValue (theComp, theInt);
d85 2
a86 1
   witjAssert ((theInt == 0) || (theInt == 1));
d88 1
a88 1
   return theInt;
d114 22
@


1.16
log
@Attributes.
@
text
@d32 1
a32 1
   theAtt            = theAttBldr->handOverAtt (scopedAttNameCStr);
@


1.15
log
@Atttributes.
@
text
@d21 1
a21 2
      _jstring * theAttNameJStr,
      _jstring * theClassNameJStr)
d25 1
a25 2
   const char * theAttNameCStr;
   const char * theClassNameCStr;
d28 1
a28 3
   theAttBldr       = theJniHand.getObject (theAttBldrCIJObj)->thisAttBldr ();

   theAttNameCStr   = theJniHand.makeCString (theAttNameJStr);
d30 1
a30 1
   theClassNameCStr = theJniHand.makeCString (theClassNameJStr);
d32 1
a32 2
   theAtt           =
      theAttBldr->handOverAtt (theAttNameCStr, theClassNameCStr);
d132 2
d144 3
a146 3
   JniHandler  theJniHand (theJNIEnv);
   Att *       theAtt;
   std::string theClassName;
d148 1
a148 1
   theAtt       = theJniHand.getObject (theAttCIJObj)->thisAtt ();
d150 1
a150 1
   theClassName = theJniHand.makeCString (theClassNameJStr);
d152 1
a152 1
   return (theClassName == theAtt->getCompClassName ());
@


1.14
log
@Changed the names of access functions beginning with "my"
to begin with "get".
@
text
@d21 2
a22 1
      _jstring * theAttNameJStr)
d27 1
d30 3
a32 1
   theAttBldr     = theJniHand.getObject (theAttBldrCIJObj)->thisAttBldr ();
d34 1
a34 1
   theAttNameCStr = theJniHand.makeCString (theAttNameJStr);
d36 2
a37 1
   theAtt         = theAttBldr->handOverAtt (theAttNameCStr);
@


1.13
log
@Self-Test.
@
text
@d150 1
a150 1
   return (theClassName == theAtt->myCompClassName ());
@


1.12
log
@Initial implementation of self-test.
@
text
@d134 18
@


1.11
log
@Attributes.
@
text
@d120 14
@


1.10
log
@Attributes.
@
text
@d100 1
a100 1
nativeMethod (void, AttCI, getDblVec) (
d117 2
@


1.9
log
@Attributes.
@
text
@d72 1
a72 1
   assert ((theInt == 0) || (theInt == 1));
@


1.8
log
@Comments, etc.
@
text
@d39 40
@


1.7
log
@Attributes
@
text
@d32 1
a32 1
   theAtt         = theAttBldr->relinquishAtt (theAttNameCStr);
@


1.6
log
@Attributes.
@
text
@d32 1
a32 1
   theAtt         = theAttBldr->cedeAttFor (theAttNameCStr);
@


1.5
log
@Attributes
@
text
@d32 1
a32 1
   theAtt         = theAttBldr->releaseAtt (theAttNameCStr);
@


1.4
log
@JniHandler
@
text
@d32 1
a32 1
   theAtt         = theAttBldr->transferAttFor (theAttNameCStr);
@


1.3
log
@JniHandler
@
text
@d28 1
a28 1
   theAttBldr     = theJniHand.getAttBldr  (theAttBldrCIJObj);
d50 3
a52 2
   theAtt     = theJniHand.getAtt       (theAttCIJObj);
   theComp    = theJniHand.getComponent (theCompCIJObj);
d71 2
a72 2
   theAtt  = theJniHand.getAtt       (theAttCIJObj);
   theComp = theJniHand.getComponent (theCompCIJObj);
@


1.2
log
@Attributes
@
text
@d19 1
a19 1
      _jobject * theJObj,
d23 1
a23 1
   JniHandler   theJniHand (theJNIEnv, theJObj);
d34 1
a34 1
   theJniHand.attachToCI (theAtt);
d41 1
a41 1
      _jobject *      theJObj,
d45 1
a45 1
   JniHandler     theJniHand (theJNIEnv, theJObj);
d50 1
a50 1
   theAtt     = theJniHand.getAtt       ();
d61 1
a61 1
      _jobject *      theJObj,
d65 1
a65 1
   JniHandler      theJniHand (theJNIEnv, theJObj);
d70 1
a70 1
   theAtt  = theJniHand.getAtt       ();
@


1.1
log
@Attributes.
@
text
@d11 1
d56 21
@

