head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2009.03.13.19.32.18;	author rjw;	state dead;
branches;
next	1.8;

1.8
date	2009.03.12.19.55.24;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.03.12.19.54.04;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2009.03.05.17.21.25;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.02.14.00.51.28;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.15.17.17.39;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.12.23.38.30;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.12.12.19.29.25;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.07.18.50.22;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File ElementCOR.C.
//
// Contains the C++ implementations of the native methods of Java class
// witj.ElementCOR.
//------------------------------------------------------------------------------

#include     <NativeMacros.h>
#include <ExceptionHandler.h>
#include       <NativeCall.h>
#include          <Element.h>
#include           <VecWoa.h>

using namespace WitJ;

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ElementCOR, setBoundSet) (
      JNIEnv *        theJNIEnv,
      _jobject *      theElementCORJObj,
      _jdoubleArray * hardLBJArr,
      _jdoubleArray * softLBJArr,
      _jdoubleArray * hardUBJArr)
   {
   BEGIN_TRY_BLOCK

   NativeCall     theCall (theJNIEnv);
   Element *      theElement;
   const double * hardLBCVec;
   const double * softLBCVec;
   const double * hardUBCVec;

   theElement = theCall.getObject (theElementCORJObj)->asElement ();

   hardLBCVec = theCall.makeBoundVec (hardLBJArr);
   softLBCVec = theCall.makeBoundVec (softLBJArr);
   hardUBCVec = theCall.makeBoundVec (hardUBJArr);

   theElement->setBoundSet (hardLBCVec, softLBCVec, hardUBCVec);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ElementCOR, getBoundSet) (
      JNIEnv *        theJNIEnv,
      _jobject *      theElementCORJObj,
      _jdoubleArray * hardLBJArr,
      _jdoubleArray * softLBJArr,
      _jdoubleArray * hardUBJArr)
   {
   BEGIN_TRY_BLOCK

   NativeCall      theCall (theJNIEnv);
   Element *       theElement;
   VecWoa <double> hardLBWoa;
   VecWoa <double> softLBWoa;
   VecWoa <double> hardUBWoa;

   theElement = theCall.getObject (theElementCORJObj)->asElement ();

   theElement->getBoundSet (hardLBWoa, softLBWoa, hardUBWoa);

   theCall.copyInto (hardLBJArr, hardLBWoa.getCVec ());
   theCall.copyInto (softLBJArr, softLBWoa.getCVec ());
   theCall.copyInto (hardUBJArr, hardUBWoa.getCVec ());

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ElementCOR, setWasDeletedInWit) (
      JNIEnv *   theJNIEnv,
      _jobject * theElementCORJObj,
      jboolean   theJBool)
   {
   BEGIN_TRY_BLOCK

   NativeCall theCall (theJNIEnv);
   Element *  theElement;

   theElement = theCall.getObject (theElementCORJObj)->asElement ();

   theElement->setWasDeletedInWit (theJBool);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (jboolean, ElementCOR, wasDeletedInWit) (
      JNIEnv *   theJNIEnv,
      _jobject * theElementCORJObj)
   {
   BEGIN_TRY_BLOCK

   NativeCall theCall (theJNIEnv);
   Element *  theElement;

   theElement = theCall.getObject (theElementCORJObj)->asElement ();

   return theElement->wasDeletedInWit ();

   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, false)
   }
@


1.8
log
@Restoration of Element files.
@
text
@@


1.7
log
@Temporary removal of Element files.
@
text
@@


1.6
log
@purgeData
@
text
@@


1.5
log
@Implemented getPipSeq.
@
text
@d71 37
@


1.4
log
@Initial implementation of class ExceptionHandler.
@
text
@d65 3
a67 3
   theCall.copyInto (hardLBJArr, hardLBWoa);
   theCall.copyInto (softLBJArr, softLBWoa);
   theCall.copyInto (hardUBJArr, hardUBWoa);
@


1.3
log
@Imbedded every native method implementation in a canonical try block.
@
text
@d8 5
a12 5
#include  <NativeMacros.h>
#include <WitjException.h>
#include    <NativeCall.h>
#include       <Element.h>
#include        <VecWoa.h>
@


1.2
log
@Changed to all upper case for the names of macros.
@
text
@d8 5
a12 4
#include <NativeMacros.h>
#include   <NativeCall.h>
#include      <Element.h>
#include       <VecWoa.h>
d25 2
d40 2
d53 2
d68 2
@


1.1
log
@Name change.
@
text
@d17 1
a17 1
nativeMethod (void, ElementCOR, setBoundSet) (
d41 1
a41 1
nativeMethod (void, ElementCOR, getBoundSet) (
@

