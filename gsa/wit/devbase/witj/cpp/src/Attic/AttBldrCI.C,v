head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2008.09.26.22.21.20;	author rjw;	state dead;
branches;
next	1.8;

1.8
date	2008.09.09.18.59.57;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.08.27.15.30.44;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.07.09.22.26.46;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.07.18.41.49;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.11.19.59.53;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.30.16.33.35;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.30.15.52.18;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.29.20.53.56;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Numerous class name changes.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source file AttBldrCI.C.
//
// Contains the C++ implementations of the native methods of Java class
// witj.AttBldrCI.
//------------------------------------------------------------------------------

#include <JniHandler.h>
#include    <AttBldr.h>

using namespace WitJ;

//------------------------------------------------------------------------------

nativeMethod (void, AttBldrCI, createMyCppAttBldr) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttBldrCIJObj,
      _jobject * theSessionCIJObj)
   {
   JniHandler theJniHand (theJNIEnv);
   Session *  theSession;
   AttBldr *  theAttBldr;

   theSession = theJniHand.getObject (theSessionCIJObj)->asSession ();

   theAttBldr = new AttBldr (theSession);

   theJniHand.transferTo (theAttBldrCIJObj, theAttBldr);
   }

//------------------------------------------------------------------------------

nativeMethod (jboolean, AttBldrCI, hasAttFor) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttBldrCIJObj,
      _jstring * scopedAttNameJStr)
   {
   JniHandler   theJniHand (theJNIEnv);
   AttBldr *    theAttBldr;
   const char * scopedAttNameCStr;

   theAttBldr        = theJniHand.getObject (theAttBldrCIJObj)->asAttBldr ();

   scopedAttNameCStr = theJniHand.makeCString (scopedAttNameJStr);

   return theAttBldr->hasAttFor (scopedAttNameCStr);
   }

//------------------------------------------------------------------------------

nativeMethod (jboolean, AttBldrCI, isEmpty) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttBldrCIJObj)
   {
   JniHandler theJniHand (theJNIEnv);
   AttBldr *  theAttBldr;

   theAttBldr = theJniHand.getObject (theAttBldrCIJObj)->asAttBldr ();

   return theAttBldr->isEmpty ();
   }

//------------------------------------------------------------------------------

nativeMethod (void, AttBldrCI, print) (
      JNIEnv *   theJNIEnv,
      _jobject * theAttBldrCIJObj)
   {
   JniHandler theJniHand (theJNIEnv);
   AttBldr *  theAttBldr;

   theAttBldr = theJniHand.getObject (theAttBldrCIJObj)->asAttBldr ();

   theAttBldr->print ();
   }
@


1.8
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@@


1.7
log
@Attributes.
@
text
@d18 1
a18 1
      _jobject * theProbCoordCIJObj)
d20 3
a22 3
   JniHandler  theJniHand (theJNIEnv);
   ProbCoord * theProbCoord;
   AttBldr *   theAttBldr;
d24 1
a24 1
   theProbCoord = theJniHand.getObject (theProbCoordCIJObj)->asProbCoord ();
d26 1
a26 1
   theAttBldr   = new AttBldr (theProbCoord);
@


1.6
log
@Attributes.
@
text
@d24 1
a24 1
   theProbCoord = theJniHand.getObject (theProbCoordCIJObj)->thisProbCoord ();
d42 1
a42 1
   theAttBldr        = theJniHand.getObject (theAttBldrCIJObj)->thisAttBldr ();
d58 1
a58 1
   theAttBldr = theJniHand.getObject (theAttBldrCIJObj)->thisAttBldr ();
d72 1
a72 1
   theAttBldr = theJniHand.getObject (theAttBldrCIJObj)->thisAttBldr ();
@


1.5
log
@Implemented and use class AppAtt.
@
text
@d33 18
@


1.4
log
@Attributes
@
text
@d44 14
@


1.3
log
@JniHandler
@
text
@d30 14
@


1.2
log
@JniHandler
@
text
@d24 1
a24 1
   theProbCoord = theJniHand.getProbCoord (theProbCoordCIJObj);
@


1.1
log
@Attributes.
@
text
@d17 1
a17 1
      _jobject * theJObj,
d20 1
a20 1
   JniHandler  theJniHand (theJNIEnv, theJObj);
d28 1
a28 1
   theJniHand.attachToCI (theAttBldr);
@

