head	1.13;
access;
symbols;
locks; strict;
comment	@ * @;


1.13
date	2010.04.20.20.55.08;	author rjw;	state dead;
branches;
next	1.12;

1.12
date	2010.04.19.20.48.02;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.17.00.20.19;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.02.18.22.10.22;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.02.14.00.51.30;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.02.06.22.40.58;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.15.17.28.49;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.03.19.06.59;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.01.16.09.22;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.18.21.28.18;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.28.20.24.47;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.19.16.15.30;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.20.54.12;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Multi-Obj Mode
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File VecWoa.h.
//
// Contains the declaration of class template VecWoa <Elem>.
//------------------------------------------------------------------------------

#ifndef VecWoa_h
#define VecWoa_h

#include <Includes.h>

//------------------------------------------------------------------------------
// Class template VecWoa <Elem>
//
// "Vector WIT Output Argument"
// Represents an output argument to WIT of type vector of Elem.
//------------------------------------------------------------------------------

namespace WitJ
{
template <typename Elem>
      class VecWoa
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit VecWoa ();
      //
      // Constructor.

   ~VecWoa ();
      //
      // Destructor.
      // Calls witFree on the c-vector currently held by this VecWoa, if any.

   void acquireWitVec (Elem * theWitVec);
      //
      // Causes this VecWoa to hold theWitVec as its c-vector and take
      // responsibility for calling witFree on it when it's finished with it.

   inline Elem operator[] (int theIdx)
      {
      EXCEPTION_ASSERT (myWitVec_ != NULL);

      return myWitVec_[theIdx];
      }

   inline Elem * getCVec ()
      {
      EXCEPTION_ASSERT (myWitVec_ != NULL);

      return myWitVec_;
      }

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   VecWoa              (const VecWoa &);
   VecWoa & operator = (const VecWoa &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   Elem * myWitVec_;
      //
      // The c-vector that was allocated by WIT, if any; otherwise NULL.
   };
};
//
// End of namespace WitJ.

#endif
@


1.12
log
@Multi-Obj Mode
@
text
@@


1.11
log
@Multi-Obj Mode
@
text
@d39 1
a39 1
   void acquire (Elem * theCVec);
d41 1
a41 1
      // Causes this VecWoa to hold theCVec as its c-vector and take
d46 1
a46 1
      EXCEPTION_ASSERT (myCVec_ != NULL);
d48 1
a48 1
      return myCVec_[theIdx];
d53 1
a53 1
      EXCEPTION_ASSERT (myCVec_ != NULL);
d55 1
a55 1
      return myCVec_;
d73 1
a73 1
   Elem * myCVec_;
d75 1
a75 1
      // The c-vector to be obtained from WIT.
@


1.10
log
@PIP
@
text
@d39 1
a39 1
   Elem * * getCVecAddr ();
d41 2
a42 4
      // Calls witFree on the c-vector currently held by this VecWoa, if any,
      // sets the pointer to NULL and returns the address of the c-vector
      // pointer to be passed as an output vector argument to a WIT API
      // function.
@


1.9
log
@Implemented getPipSeq.
@
text
@d46 7
@


1.8
log
@Problem.eqHeurAlloc.
@
text
@d39 1
a39 1
   Elem * * operator & ();
d46 1
a46 1
   inline operator Elem * ()
a52 7
   inline Elem operator[] (int theIdx)
      {
      EXCEPTION_ASSERT (myCVec_ != NULL);

      return myCVec_[theIdx];
      }

@


1.7
log
@Updated some comments.
@
text
@d48 2
d53 7
@


1.6
log
@Revised C++ class template VecWoa.
@
text
@d60 1
a60 1
      // Not defined; prevents accidental copying and assignment.
@


1.5
log
@Changed the names of access functions beginning with "my"
to begin with "get".
@
text
@d37 1
d39 6
a44 4
   inline Elem * * getCVecAddr ()
      {
      return & myCVec_;
      }
d46 1
a46 1
   inline Elem * getCVec () const
@


1.4
log
@Attributes.
@
text
@d38 1
a38 1
   inline Elem * * myCVecAddr ()
d43 1
a43 1
   inline Elem * myCVec () const
@


1.3
log
@Attributes
@
text
@d7 2
a8 2
#ifndef VecWoaH
#define VecWoaH
@


1.2
log
@*** empty log message ***
@
text
@d4 1
a4 1
// Contains the declaration of class DblVecWoa.
d13 1
a13 1
// Class DblVecWoa
d15 2
a16 2
// "Double Vector WIT Output Argument"
// Represents an output argument to WIT of type vector of double.
d21 2
a22 1
class DblVecWoa
d30 1
a30 1
   explicit DblVecWoa ();
d34 1
a34 1
   ~DblVecWoa ();
d38 1
a38 1
   inline double * * myDblCVecAddr ()
d40 1
a40 1
      return & myDblCVec_;
d43 1
a43 1
   inline double * myDblCVec () const
d45 1
a45 1
      return myDblCVec_;
d54 2
a55 2
   DblVecWoa              (const DblVecWoa &);
   DblVecWoa & operator = (const DblVecWoa &);
d63 1
a63 1
   double * myDblCVec_;
d65 1
a65 1
      // The double c-vector to be obtained from WIT.
@


1.1
log
@*** empty log message ***
@
text
@d29 1
a29 1
   DblVecWoa ();
@

