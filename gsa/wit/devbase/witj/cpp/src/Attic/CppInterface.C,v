head	1.17;
access;
symbols;
locks; strict;
comment	@ * @;


1.17
date	2008.09.26.22.21.21;	author rjw;	state dead;
branches;
next	1.16;

1.16
date	2008.09.26.20.31.19;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.09.24.21.53.26;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.08.06.15.39.26;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.08.05.21.55.52;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.08.05.20.46.46;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.05.30.16.33.36;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.05.30.15.52.19;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.23.22.58.32;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.22.21.02.57;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.21.18.07.12;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.20.20.37.01;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.20.18.16.39;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.20.15.24.49;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.19.22.20.54;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.16.18.06.46;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.20.54.10;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Numerous class name changes.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source file CppInterface.C.
//
// Contains the C++ implementations of the native methods of Java class
// witj.CppInterface.
//------------------------------------------------------------------------------

#include <JniHandler.h>
#include <JavaObjRep.h>

using namespace WitJ;

//------------------------------------------------------------------------------

nativeMethod (void, CppInterface, initTimeSetUp) (
      JNIEnv *  theJNIEnv,
      _jclass * theJClassForCppInterface)
   {
   JniHandler::findJFieldIDs  (theJNIEnv, theJClassForCppInterface);
   JavaObjRep::findJMethodIDs (theJNIEnv);
   }

//------------------------------------------------------------------------------

nativeMethod (void, CppInterface, deleteMyCppJAccObject) (
      JNIEnv *   theJNIEnv,
      _jobject * theCIJObj)
   {
   JniHandler::deleteObject (theJNIEnv, theCIJObj);
   }
@


1.16
log
@Changed name of C++ class JavaLink to JavaObjRep.
@
text
@@


1.15
log
@Continued implementation of nPeriods extraction.
@
text
@d9 1
a9 1
#include   <JavaLink.h>
d20 1
a20 1
   JavaLink  ::findJMethodIDs (theJNIEnv);
@


1.14
log
@Class JniHandler.
@
text
@d9 1
a9 1
#include <JAccObject.h>
d19 2
a20 1
   JniHandler::acquireJFieldIDs (theJNIEnv, theJClassForCppInterface);
@


1.13
log
@JniHandler class.
@
text
@d28 1
a28 8
   JniHandler   theJniHand (theJNIEnv);
   JAccObject * theJAccObject;

   theJAccObject = theJniHand.getObject (theCIJObj);

   theJniHand.releaseJAccObject (theCIJObj);

   delete theJAccObject;
@


1.12
log
@Fixed the segmentation error (probably).
@
text
@d33 1
a33 1
   theJniHand.releaseProbCoord ();
a35 2

   theJniHand.transferTo (theCIJObj, NULL);
@


1.11
log
@JniHandler
@
text
@d33 2
@


1.10
log
@JniHandler
@
text
@d31 1
a31 1
   theJAccObject = theJniHand.getJAccObject (theCIJObj);
@


1.9
log
@*** empty log message ***
@
text
@d26 1
a26 1
      _jobject * theJObj)
d28 1
a28 1
   JniHandler   theJniHand (theJNIEnv, theJObj);
d31 1
a31 1
   theJAccObject = theJniHand.getJAccObject ();
d35 1
a35 1
   theJniHand.attachToCI (NULL);
@


1.8
log
@*** empty log message ***
@
text
@d28 2
a29 1
   JniHandler theJniHand (theJNIEnv, theJObj);
d31 3
a33 1
   delete theJniHand.myObject ();
@


1.7
log
@*** empty log message ***
@
text
@d32 1
a32 1
   theJniHand.attachToCppInterface (NULL);
@


1.6
log
@*** empty log message ***
@
text
@a9 1
#include     <Native.h>
d26 1
a26 1
      _jobject * theCppInterfaceJObj)
d28 1
a28 2
   JniHandler   theJniHand (theJNIEnv);
   JAccObject * theJAccObject;
d30 1
a30 1
   theJAccObject = theJniHand.getObject (theCppInterfaceJObj);
d32 1
a32 3
   delete theJAccObject;

   theJniHand.acquireFor (theCppInterfaceJObj, NULL);
@


1.5
log
@*** empty log message ***
@
text
@d29 1
a29 1
   JniHandler   theJniHandler (theJNIEnv);
d32 1
a32 1
   theJAccObject = theJniHandler.objectOf (theCppInterfaceJObj);
d36 1
a36 1
   theJniHandler.transferTo (theCppInterfaceJObj, NULL);
@


1.4
log
@*** empty log message ***
@
text
@a8 1
#include      <CIJia.h>
a19 1
   AbsCIJia  ::acquireJFieldIDs (theJNIEnv, theJClassForCppInterface);
d29 2
a30 2
   JniHandler         theJniHandler      (theJNIEnv);
   CIJia <JAccObject> theCppInterfaceJia (theJNIEnv, theCppInterfaceJObj);
d32 3
a34 1
   delete theCppInterfaceJia.myObject ();
a37 3

//------------------------------------------------------------------------------

@


1.3
log
@*** empty log message ***
@
text
@d8 1
a8 1
#include    <JniAsst.h>
a9 1
#include    <JniAsst.h>
d21 2
a22 2
   AbsCIJia::acquireJFieldIDs (theJNIEnv, theJClassForCppInterface);
   JniAsst ::acquireJFieldIDs (theJNIEnv, theJClassForCppInterface);
d31 1
a31 1
   JniAsst            theJniAsst         (theJNIEnv);
d36 1
a36 1
   theJniAsst.transferTo (theCppInterfaceJObj, NULL);
@


1.2
log
@*** empty log message ***
@
text
@d8 1
d10 1
d23 1
d32 1
d37 1
a37 1
   theCppInterfaceJia.attach (NULL);
@


1.1
log
@*** empty log message ***
@
text
@d31 1
a31 1
   delete theCppInterfaceJia.myDerJAccObject ();
@

