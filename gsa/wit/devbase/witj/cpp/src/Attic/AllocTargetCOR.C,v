head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2009.02.10.23.19.29;	author rjw;	state dead;
branches;
next	1.1;

1.1
date	2009.02.06.22.40.58;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Replaced the AllocTarget classes with ShipTriple classes.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source file AllocTargetCOR.C.
//
// Contains the C++ implementations of the native methods of Java class
// witj.AllocTargetCOR.
//------------------------------------------------------------------------------

#include     <NativeMacros.h>
#include <ExceptionHandler.h>
#include       <NativeCall.h>
#include      <AllocTarget.h>

using namespace WitJ;

//------------------------------------------------------------------------------

NATIVE_METHOD (jdouble, AllocTargetCOR, getIncVol) (
      JNIEnv *   theJNIEnv,
      _jobject * theTargetCORJObj)
   {
   BEGIN_TRY_BLOCK

   NativeCall    theCall (theJNIEnv);
   AllocTarget * theTarget;

   theTarget = theCall.getObject (theTargetCORJObj)->asAllocTarget ();

   return theTarget->getIncVol ();

   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, 0.0)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, AllocTargetCOR, createMyCppAllocTarget) (
      JNIEnv *   theJNIEnv,
      _jobject * theTargetCORJObj,
      _jobject * theDemandCORJObj,
      jint       theShipPer,
      jdouble    theDesIncVol)
   {
   BEGIN_TRY_BLOCK

   NativeCall    theCall (theJNIEnv);
   Demand *      theDemand;
   AllocTarget * theTarget;

   theDemand = theCall.getObject (theDemandCORJObj)->asDemand ();

   theTarget = new AllocTarget (theDemand, theShipPer, theDesIncVol);

   theCall.associate (theTargetCORJObj, theTarget);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }
@


1.1
log
@Problem.eqHeurAlloc.
@
text
@@

