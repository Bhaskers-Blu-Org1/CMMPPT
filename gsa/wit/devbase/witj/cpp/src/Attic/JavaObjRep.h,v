head	1.56;
access;
symbols;
locks; strict;
comment	@ * @;


1.56
date	2011.04.08.23.39.55;	author rjw;	state dead;
branches;
next	1.55;

1.55
date	2011.04.06.15.56.37;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2011.03.30.23.23.00;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2011.03.30.19.49.51;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2011.03.15.20.56.44;	author rjw;	state dead;
branches;
next	1.51;

1.51
date	2011.03.11.23.49.22;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2011.03.09.22.35.25;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2011.02.25.16.06.50;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2011.02.14.21.13.47;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2009.09.18.21.13.22;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2009.09.18.18.35.08;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2009.06.04.23.04.21;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2009.03.13.19.32.18;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2009.03.13.16.36.07;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2009.03.12.22.45.19;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2009.03.05.17.21.26;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2009.02.27.15.41.53;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2009.02.24.17.44.56;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2009.02.20.20.58.42;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2009.02.20.17.18.44;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2009.02.18.22.10.21;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2009.02.14.00.51.29;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2009.02.03.23.18.07;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2009.02.03.16.32.27;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2009.01.31.00.56.26;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2009.01.29.22.06.38;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2009.01.23.18.46.54;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.12.24.20.34.22;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.12.24.00.18.55;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.12.15.21.40.51;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.12.15.17.28.47;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.12.03.18.55.07;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.10.22.14.17.36;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.10.14.22.17.46;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.10.11.00.31.01;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.10.11.00.10.38;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.10.10.22.25.14;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.10.10.17.33.17;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.10.07.18.50.24;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.10.06.22.14.02;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.10.06.14.52.39;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.10.03.21.47.51;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.10.03.20.35.52;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.10.03.18.07.57;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.10.02.21.45.13;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.10.02.17.34.35;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.10.02.15.13.51;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.10.01.22.10.10;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.10.01.19.47.12;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.10.01.18.19.15;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.01.15.12.09;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.29.18.09.11;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.29.17.34.15;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.26.22.50.16;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.26.20.46.05;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.26.20.31.19;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.56
log
@Removed C++ class JavaObjRep.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File JavaObjRep.h.
//
// Contains the declaration of class JavaObjRep.
//------------------------------------------------------------------------------

#ifndef JavaObjRep_h
#define JavaObjRep_h

#include <JniClient.h>

//------------------------------------------------------------------------------
// Class JavaObjRep
//
// "Java Object Representative"
// A C++ representation of a Java Object.
//
// Class Hierarchy:
//
// JniClient
//    JavaObjRep
//       ComponentJOR
//       ArrayListJOR
//          IntALJOR
//          DblALJOR
//          StringALJOR
//          CompALJOR <C>
//          DemandALJOR
//          PeggingTripleALJOR
//------------------------------------------------------------------------------

namespace WitJ
{
class JavaObjRep: public JniClient
   {
   //---------------------------------------------------------------------------
   // Protected member functions.
   //---------------------------------------------------------------------------

   protected:

   explicit JavaObjRep (_jobject *, JNIEnv *);
      //
      // Constructor.

   ~JavaObjRep ();
      //
      // Destructor.

   inline _jobject * getJObject ()
      {
      return myJObject_;
      }

   inline static _jobject * getJObject (JavaObjRep * theJavaObjRep)
      {
      return theJavaObjRep->myJObject_;
      }

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   JavaObjRep              (const JavaObjRep &);
   JavaObjRep & operator = (const JavaObjRep &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   _jobject * myJObject_;
      //          
      // A global reference to the represented Java Object.
   };
};
//
// End of namespace WitJ.

#endif
@


1.55
log
@JNIEnv arguments.
@
text
@@


1.54
log
@Revised set/get ObjectiveList for ArrayList <String>.
@
text
@d42 1
a42 1
   explicit JavaObjRep (JNIEnv *, _jobject * theJObject);
@


1.53
log
@C++ class JavaObjRep.
@
text
@d26 1
@


1.52
log
@Renamed JavaObjRep to CORJOR.
@
text
@a11 2
#include    <vector>

d16 1
a16 2
// Each instance of this class is owned by a JavaAccObj, which is owned by a
// Java CppObjRep. The instance is considered to represent the Java CppObjRep.
d22 7
d36 1
a36 1
   // Public member functions.
d39 1
a39 1
   public:
d41 1
a41 1
   explicit JavaObjRep (NativeCall & theCall, _jobject * theCORJObj);
d49 4
a52 25
   static void setUpJni (JNIEnv * theJNIEnv);
      //
      // Sets up the interaction between this class and JNI.
      // Uses theJNIEnv as its JNI environment.

   //---------------------------------------------------------------------------
   // Public static call-back functions.
   //
   // Each of these functions does a call-back to the Java method with the same
   // name on CppObjRep that owns the first argument, passing the remaining
   // arguments.
   //---------------------------------------------------------------------------

   static void makePart       (Coordinator * theCoord,
                               const char *  thePartNameCStr,
                               bool          theCategoryIsMaterial);

   static void makeDemand     (Part *        thePart,
                               const char *  theDemandNameCStr);

   static void makeOperation  (Coordinator * theCoordinator,
                               const char *  theOpnNameCStr);

   static void makeBomEntry   (Operation *   theOpn,
                               Part *        thePart);
d54 1
a54 32
   static void makeSubstitute (BomEntry *    theBomEnt,
                               Part *        thePart);

   static void makeBopEntry   (Operation *   theOpn,
                               Part *        thePart);

   static void setNPeriods    (Problem *     theProblem,
                               int           theValue);

   //---------------------------------------------------------------------------

   static _jobject * getComponentJObj (Component * theComp);
      //
      // Returns a local reference to the Java Component corresponding to
      // theComp.

   static void findNonsense (Coordinator * theCoord);
      //
      // Searches for a Java class called "Nonsense".
      // Used for testing.

   void exhaustJniMemory ();
      //
      // Repeatedly has JNI allocate memory in 100MB increments until memory is
      // exhausted.
      // Used for testing.

   //---------------------------------------------------------------------------
   // Accessors.
   //---------------------------------------------------------------------------

   inline _jobject * getCORJObj ()
d56 1
a56 1
      return myCORJObj_;
a64 41
   //---------------------------------------------------------------------------
   // callVoidJMethod functions.
   //
   // Each of these functions calls the non-static void Java method identified
   // by the first argument, calling it on the Java CppObjRep represented by
   // this JavaObjRep, and passing to it the remaining arguments, converted to
   // the corresponding Java types.
   //---------------------------------------------------------------------------

   void callVoidJMethod (_jmethodID *, const char *);
   void callVoidJMethod (_jmethodID *, const char *, bool);
   void callVoidJMethod (_jmethodID *, int);
   void callVoidJMethod (_jmethodID *, JavaAccObj *);

   //---------------------------------------------------------------------------

   _jobject * callObjectJMethod (_jmethodID *);
      //
      // Same as above. Returns a local reference to the Java Object returned by
      // the Java method.

   //---------------------------------------------------------------------------

   static void findAllJMethodIDs (JNIEnv * theJNIEnv);
      //
      // Finds and stores each of the _jmethodIDs stored by this class.
      // Uses theJNIEnv as its JNI environment.

   static _jmethodID * findWitJMethodID (
         JNIEnv *     theJNIEnv,
         const char * theClassName,
         const char * theMethName,
         const char * theMethDesc);
      //
      // Finds and returns the _jmethodID of a non-static WIT-J/Java method.
      // Arguments:
      //    theJNIEnv:    The JNI environment to be used.
      //    theClassName: The name of the class to which the method belongs.
      //    theMethName:  The name of the method.
      //    theMethDesc:  The JNI method descriptor of the method.

d74 1
a74 1
   jweak myCORJObj_;
d76 1
a76 20
      // A weak global reference to the Java CppObjRep that owns the JavaAccObj
      // that owns this JavaObjRep.

   //---------------------------------------------------------------------------
   // _jmethodIDs.
   //
   // Each of the following data members is the _jmethodID of a non-static Java
   // method whose name is indicated by the name of the data member.
   // For example, makePartJMeth_ is the _jmethodID of the "makePart"
   // method of WIT-J/Java class CoordinatorCOR.
   //---------------------------------------------------------------------------

   static _jmethodID * makePartJMeth_;
   static _jmethodID * makeDemandJMeth_;
   static _jmethodID * makeOperationJMeth_;
   static _jmethodID * makeBomEntryJMeth_;
   static _jmethodID * makeSubstituteJMeth_;
   static _jmethodID * makeBopEntryJMeth_;
   static _jmethodID * setNPeriodsFromCppJMeth_;
   static _jmethodID * getComponentJMeth_;
@


1.51
log
@Problem.getCriticalList ()
@
text
@@


1.50
log
@Replaced calls to ctors for Java Integer and Double with valueOf.
@
text
@a48 4
      //
      // This function is to be called only from within the execution of the
      // Java method CppObjRep.setUpCppPortion (), which is statically
      // synchronized.
d58 3
a60 3
   static void makePart            (Coordinator *     theCoord,
                                    const char *      thePartNameCStr,
                                    bool              theCategoryIsMaterial);
d62 2
a63 2
   static void makeDemand          (Part *            thePart,
                                    const char *      theDemandNameCStr);
d65 2
a66 2
   static void makeOperation       (Coordinator *     theCoordinator,
                                    const char *      theOpnNameCStr);
d68 2
a69 2
   static void makeBomEntry        (Operation *       theOpn,
                                    Part *            thePart);
d71 2
a72 2
   static void makeSubstitute      (BomEntry *        theBomEnt,
                                    Part *            thePart);
d74 2
a75 2
   static void makeBopEntry        (Operation *       theOpn,
                                    Part *            thePart);
d77 2
a78 2
   static void setNPeriods         (Problem *         theProblem,
                                    int               theValue);
d82 5
d114 1
a114 1
   // callJavaMethod functions.
d116 4
a119 4
   // Each of these functions calls the non-static Java method identified by
   // the first argument, calling it on the Java CppObjRep represented by this
   // JavaObjRep, and passing to it the remaining arguments, converted to the
   // corresponding Java types.
d122 11
a132 4
   void callJavaMethod (_jmethodID *, const char *);
   void callJavaMethod (_jmethodID *, const char *, bool);
   void callJavaMethod (_jmethodID *, int);
   void callJavaMethod (_jmethodID *, JavaAccObj *);
d141 1
a141 1
   static _jmethodID * findJMethodID (
d184 1
@


1.49
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@d165 1
a165 1
   // For example, makePart_ is the _jmethodID of the "makePart"
d169 7
a175 7
   static _jmethodID * makePart_;
   static _jmethodID * makeDemand_;
   static _jmethodID * makeOperation_;
   static _jmethodID * makeBomEntry_;
   static _jmethodID * makeSubstitute_;
   static _jmethodID * makeBopEntry_;
   static _jmethodID * setNPeriodsFromCpp_;
@


1.48
log
@CPLEX
@
text
@d81 1
a81 1
   static void setNPeriods         (GlobalAspect *    theGlobalAspect,
@


1.47
log
@Revised some comments.
@
text
@d45 1
a45 1
   static void setUpJni (NativeCall & theCall);
d48 1
d128 18
@


1.46
log
@Implemented synchronized WIT-J/C++/JNI set-up.
@
text
@d48 4
@


1.45
log
@Changed handling of Lists of AllocTriples to avoid call-backs.
@
text
@d45 4
a106 16
   void findAllJMethodIDs ();
      //
      // Sets each of the _jmethodID static data members to the corrsponding
      // jmethodID.

   _jmethodID * findJMethodID (
         const char * theClassName,
         const char * theMethName,
         const char * theMethDesc);
      //
      // Finds and returns the _jmethodID of a non-static WIT-J/Java method.
      // Arguments:
      //    theClassName: The name of the class to which the method belongs.
      //    theMethName:  The name of the method.
      //    theMethDesc:  The JNI method descriptor of the method.

@


1.44
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@a74 8
   static void prepareForTriples   (AllocTripleList * theAllocTripleList,
                                    int               nTriples);

   static void addTriple           (AllocTripleList * theAllocTripleList,
                                    Component *       theComp,
                                    int               thePeriod,
                                    double            theVolume);

d89 9
a131 1
   void callJavaMethod (_jmethodID *, JavaAccObj *, int,          double);
a164 2
   static _jmethodID * prepareForTriples_;
   static _jmethodID * addTriple_;
@


1.43
log
@Changed name of GlobalComponent classes to GlobalAspect.
@
text
@d79 1
a79 1
                                    Element *         theElement,
@


1.42
log
@Changed name of GlobalElement classes to GlobalComponent.
@
text
@d72 1
a72 1
   static void setNPeriods         (GlobalComponent * theGlobalComp,
@


1.41
log
@purgeData
@
text
@d72 1
a72 1
   static void setNPeriods         (GlobalElement *   theGlobalElement,
@


1.40
log
@purgeData
@
text
@a82 3
   static void setToBeShutDown     (Element *         theElement,
                                    bool              theValue);

a128 1
   void callJavaMethod (_jmethodID *, bool);
a166 1
   static _jmethodID * setToBeShutDown_;
@


1.39
log
@Part.Category by boolean.
@
text
@d83 3
d132 1
d171 1
@


1.38
log
@Removed Java class CppGateway.
@
text
@d53 1
a53 1
   static void makePart            (Coordinator *     theCoordinator,
d55 1
a55 1
                                    const char *      thePartCatNameCStr);
d128 1
a128 1
   void callJavaMethod (_jmethodID *, const char *, const char *);
@


1.37
log
@Added the AllocTripleList classes.
@
text
@d48 3
a50 2
   // Each of these functions is a wrapper for the static method of Java class
   // CppGateway of the same name.
a96 9
   // Accessors.
   //---------------------------------------------------------------------------

   inline _jobject * getCORJObj ()
      {
      return myCORJObj_;
      }

   //---------------------------------------------------------------------------
a101 10
   void findAllJClasses ();
      //
      // Sets the _jclass static data members to the corrsponding _jclass.

   _jclass * findJClass (const char * theClassName);
      //
      // Finds the _jclass of the WIT-J Java class whose name is given by
      // theClassName, creates a JNI global reference to it, and returns the
      // global reference.

d108 1
d112 5
a116 3
      // Finds and returns the _jmethodID of the static method of Java class
      // CppGateway whose name is given by theMethName and whose JNI method
      // descriptor is theMethDesc.
d121 3
a123 3
   // Each of these functions calls the static method of Java class CppGateway
   // identified by the first argument, passing to it the Java CppObjRep for
   // this JavaObjRep, followed by the remaining arguments, converted to the
a149 12
   // _jclasses.
   //
   // Each of the following data members is the _jclass of the WIT-J Java class
   // whose name is indicated by the name of the data member. For example,
   // ourCppGatewayJCl_ is the _jclass of WIT-J Java class CppGateway.
   // Each jclass is stored as a JNI global reference.
   //---------------------------------------------------------------------------

   static _jclass * ourCppGatewayJCl_;
   static _jclass * ourElementCORJCl_;

   //---------------------------------------------------------------------------
d152 4
a155 4
   // Each of the following data members is the _jmethodID of the method of Java
   // class CppGateway whose name is indicated by the name of the data member.
   // For example, makePartID_ is the _jmethodID of the "makePart" method of
   // Java class CppGateway.
d158 9
a166 9
   static _jmethodID * makePartID_;
   static _jmethodID * makeDemandID_;
   static _jmethodID * makeOperationID_;
   static _jmethodID * makeBomEntryID_;
   static _jmethodID * makeSubstituteID_;
   static _jmethodID * makeBopEntryID_;
   static _jmethodID * setNPeriodsID_;
   static _jmethodID * prepareForTriplesID_;
   static _jmethodID * addTripleID_;
@


1.36
log
@PIP
@
text
@d52 3
a54 3
   static void makePart            (Coordinator *   theCoordinator,
                                    const char *    thePartNameCStr,
                                    const char *    thePartCatNameCStr);
d56 2
a57 2
   static void makeDemand          (Part *          thePart,
                                    const char *    theDemandNameCStr);
d59 2
a60 2
   static void makeOperation       (Coordinator *   theCoordinator,
                                    const char *    theOpnNameCStr);
d62 2
a63 2
   static void makeBomEntry        (Operation *     theOpn,
                                    Part *          thePart);
d65 2
a66 2
   static void makeSubstitute      (BomEntry *      theBomEnt,
                                    Part *          thePart);
d68 2
a69 2
   static void makeBopEntry        (Operation *     theOpn,
                                    Part *          thePart);
d71 2
a72 2
   static void setNPeriods         (GlobalElement * theGlobalElement,
                                    int             theValue);
d74 2
a75 2
   static void prepAllocTripleList (Coordinator *   theCoordinator,
                                    int             nTriples);
d77 4
a80 3
   static void addAllocTriple      (Element *       theElement,
                                    int             thePeriod,
                                    double          theVolume);
a144 1
   void callJavaMethod (_jmethodID *, int,          double);
d146 1
d192 2
a193 2
   static _jmethodID * prepAllocTripleListID_;
   static _jmethodID * addAllocTripleID_;
@


1.35
log
@Implemented getPipSeq.
@
text
@d52 3
a54 3
   static void makePart          (Coordinator *   theCoordinator,
                                  const char *    thePartNameCStr,
                                  const char *    thePartCatNameCStr);
d56 2
a57 2
   static void makeDemand        (Part *          thePart,
                                  const char *    theDemandNameCStr);
d59 2
a60 2
   static void makeOperation     (Coordinator *   theCoordinator,
                                  const char *    theOpnNameCStr);
d62 2
a63 2
   static void makeBomEntry      (Operation *     theOpn,
                                  Part *          thePart);
d65 2
a66 2
   static void makeSubstitute    (BomEntry *      theBomEnt,
                                  Part *          thePart);
d68 2
a69 2
   static void makeBopEntry      (Operation *     theOpn,
                                  Part *          thePart);
d71 2
a72 2
   static void setNPeriods       (GlobalElement * theGlobalElement,
                                  int             theValue);
d74 6
a79 5
   static void storeAllocTriples (Coordinator *   theCoordinator,
                                  const std::vector <Element *> &
                                                  theElementVec,
                                  int *           thePeriodCVec,
                                  double *        theVolumeCVec);
a131 14
   void storeAllocTriples (
         const std::vector <Element *> & theElementVec,
         int *                           thePeriodCVec,
         double *                        theVolumeCVec);
      //
      // Non-static private version of storeAllocTriples.

   _jobjectArray * makeJObjArray (
         const std::vector <Element *> & theElementVec);
      //
      // Creates and returns a JNI local reference to a _jobjectArray that
      // contains the _jobjects that represent the Java ElementCORs that own
      // the Elements in theElementVec.

d144 1
d191 2
a192 1
   static _jmethodID * storeAllocTriplesID_;
@


1.34
log
@Part Category
@
text
@d12 2
d52 6
a57 3
   static void makePart       (Coordinator *   theCoordinator,
                               const char *    thePartNameCStr,
                               const char *    thePartCatNameCStr);
d59 2
a60 2
   static void makeDemand     (Part *          thePart,
                               const char *    theDemandNameCStr);
d62 2
a63 2
   static void makeOperation  (Coordinator *   theCoordinator,
                               const char *    theOpnNameCStr);
d65 2
a66 2
   static void makeBomEntry   (Operation *     theOpn,
                               Part *          thePart);
d68 2
a69 2
   static void makeSubstitute (BomEntry *      theBomEnt,
                               Part *          thePart);
d71 2
a72 2
   static void makeBopEntry   (Operation *     theOpn,
                               Part *          thePart);
d74 5
a78 2
   static void setNPeriods    (GlobalElement * theGlobalElement,
                               int             theValue);
d108 1
a108 1
   void findCppGatewayJCl ();
d110 7
a116 1
      // Sets ourCppGatewayJCl_ to the appropriate jclass.
d120 1
a120 1
      // Sets each of the jmethodID static data members to the corrsponding
d127 17
a143 3
      // Returns the _jmethodID of the static method of Java class CppGateway
      // whose name is given by theMethName and whose JNI method descriptor is
      // theMethDesc.
d149 3
a151 2
   // identified by the first argument, passing to it the remaining arguments,
   // converted to the corresponding Java types.
d154 4
a157 5
   static void callJavaMethod (_jmethodID *, JavaAccObj *, const char *);
   static void callJavaMethod (_jmethodID *, JavaAccObj *, const char *,
                                                           const char *);
   static void callJavaMethod (_jmethodID *, JavaAccObj *, int);
   static void callJavaMethod (_jmethodID *, JavaAccObj *, JavaAccObj *);
d172 11
a182 3
      // A reference to the Java CppObjRep that owns the JavaAccObj that owns
      // this JavaObjRep.
      // A JNI weak global reference.
d185 1
a185 3
      //
      // The jclass that represents Java class CppGateway.
      // A JNI global reference.
d188 1
a188 1
   // jmethodIDs.
d190 1
a190 1
   // Each of the following data members is the jmethodID of the method of Java
d192 2
a193 2
   // For example, makePartID_ is the jmethodID of the "makePart" method of Java
   // class CppGateway.
d203 1
@


1.33
log
@Removed the Alternative classes.
@
text
@d52 1
a52 1
                               int             thePartCatIdx);
d126 2
a127 1
   static void callJavaMethod (_jmethodID *, JavaAccObj *, const char *, int);
@


1.32
log
@Part.Category as Alternative
@
text
@d52 1
a52 1
                               Alternative *   thePartCatAlt);
d126 1
a128 3
   static void callJavaMethod (_jmethodID *, JavaAccObj *,
                                             const char *,
                                             JavaAccObj *);
@


1.31
log
@Implemented Java class CppGateway.
@
text
@d52 1
a52 1
                               bool            theCategoryIsMat);
d86 9
a125 1
   static void callJavaMethod (_jmethodID *, JavaAccObj *, const char *, bool);
d128 3
@


1.30
log
@Coordinator
@
text
@d15 3
a17 1
// A C++ representation of a Java object.
d35 1
a35 1
   explicit JavaObjRep (JniClient &, _jobject *);
d44 1
a44 1
   // make{Java Class} functions.
d46 10
a55 12
   // Each of these functions constructs an instance of the indicated WIT-J/Java
   // class, translating the function's arguments into equivalent Java objects
   // and passing them to the appropriate constructor in Java.
   //---------------------------------------------------------------------------

   static void makePart       (Coordinator *, const char * thePartName,
                                              bool         theCategoryIsMat);
   static void makeDemand     (Part *,        const char * theDemandName);
   static void makeOperation  (Coordinator *, const char * theOpnName);
   static void makeBomEntry   (Operation *,   Part *);
   static void makeSubstitute (BomEntry *,    Part *);
   static void makeBopEntry   (Operation *,   Part *);
d57 8
a64 4
   static void makeNonsense   (Coordinator *, const char * theName);
      //
      // Same as makeOperation, but "Nonsense" is used as the class name.
      // Used for testing.
d66 2
a67 6
   //---------------------------------------------------------------------------
   // Public static call-back functions.
   //
   // Each of these functions is a wrapper for a Java method of the same name
   // and whose Java class matches the first argument.
   //---------------------------------------------------------------------------
d69 2
a70 1
   static void setNPeriods (GlobalElement *, int nPeriodsVal);
d74 5
d91 8
a98 61
   void makePartInt (
         Coordinator *,
         const char *   thePartName,
         bool           theCategoryIsMat);
      //
      // Non-static internal implementation of makePart.

   void setNPeriods (int);
      //
      // Non-static internal implementation of the public setNPeriods.

   void makeObjectFromObjectString (
         _jclass *    & theJClass,
         _jmethodID * & theCtorID,
         const char *   theClassName,
         const char *   arg1ClassName,
         const char *   theName);
      //       
      // Constructs an instance of the WIT-J/Java class represented by
      // theJClass, using the constructor identified by theCtorID, passing it
      // the Java Object represented by this JavaObjRep and theName.
      // If theJClass is NULL, it is set to the _jclass representing the
      // WIT-J/Java class indicated by theClassName and theCtorID is set to the
      // jmethodID for the class's constructor that takes two arguments: an
      // instance of the class indicated by arg1ClassName and a String.

   void makeObjectFromObjectElement (
         _jclass *    & theJClass,
         _jmethodID * & theCtorID,
         const char *   theClassName,
         const char *   arg1ClassName,
         const char *   arg2ClassName,
         Element *      theElement);
      //       
      // Constructs an instance of the WIT-J/Java class represented by
      // theJClass, using the constructor identified by theCtorID, passing it
      // the Java Object represented by this JavaObjRep and 
      // the Java Element corresponding to theElement.
      // If theJClass is NULL, it is set to the _jclass representing the
      // WIT-J/Java class indicated by theClassName and theCtorID is set to the
      // jmethodID for the class's constructor that takes two arguments:
      // an instance of the class indicated by arg1ClassName and
      // an instance of the class indicated by arg2ClassName.

   _jclass * findJClass (const char * theClassName);
      //
      // Finds and returns the _jclass representing the WIT-J/Java class 
      // indicated by theClassName.
      // Note: This function creates a global reference that will never be
      // deleted, so it should be called a limited number of times during the
      // program process.

   _jmethodID * findCtorID (
         _jclass *    theJClass,
         const char * arg1ClassDesc,
         const char * arg2ClassDesc);
      //
      // Finds and returns the _jmethodID for the constructor that creates an
      // instance of the Java class represented by theJClass and takes two
      // arguments that are instances of the Java classes whose descriptors are
      // given by arg1ClassDesc and arg2ClassDesc.
d104 18
a121 7
      // Returns the _jmethodID of the Java method indicated by the arguments.
      // The method found will belong to the class of the Java object
      // represented by this JavaObjRep. 
      //
      // Arguments:
      //    theMethName: The name of the Java method
      //    theMethDesc: The JNI method descriptor of the Java method
d132 1
a132 1
   jweak myJObj_;
d134 25
a158 2
      // A JNI weak global reference to the Java Object represented by this
      // JavaObjRep.
@


1.29
log
@Added code to handle memory errors in makeJString.
@
text
@d49 7
a55 7
   static void makePart       (Problem *,   const char * thePartName,
                                            bool         theCategoryIsMat);
   static void makeDemand     (Part *,      const char * theDemandName);
   static void makeOperation  (Problem *,   const char * theOpnName);
   static void makeBomEntry   (Operation *, Part *);
   static void makeSubstitute (BomEntry *,  Part *);
   static void makeBopEntry   (Operation *, Part *);
d57 1
a57 1
   static void makeNonsense   (Problem *,   const char * theName);
d86 3
a88 3
         Problem *,
         const char * thePartName,
         bool         theCategoryIsMat);
@


1.28
log
@Added code to handle Java exceptions raised during the execution of JNI
   functions.
@
text
@d72 8
@


1.27
log
@Implemented Java class UnexpectedCppExcException.
@
text
@d16 5
d57 5
@


1.26
log
@Updated some comments.
@
text
@d124 1
a124 1
      // Finds and returns the jmethodID for the constructor that creates an
@


1.25
log
@Minor changes.
@
text
@d144 1
a144 1
      // Not defined; prevents accidental copying and assignment.
@


1.24
log
@Replaced _jweak * with jweak.
@
text
@d72 1
a72 1
      // Non-static internal implementation of makePart (...).
d76 1
a76 1
      // Non-static internal implementation of the public setNPeriods (...).
@


1.23
log
@Minot revision.
@
text
@d150 1
a150 1
   _jweak * myJObj_;
@


1.22
log
@Call-back infrastructure.
@
text
@d45 1
a45 1
                                            bool         theMaterialCase);
d67 4
a70 1
   void makePartInt (Problem *, const char * thePartName, bool theMaterialCase);
@


1.21
log
@Call-back infrastructure.
@
text
@a36 14
   // Public static call-back functions.
   //
   // Each of these functions is a wrapper for a Java method of the same name
   // and whose Java class matches the first argument.
   //
   // The type-correctness of the object arguments is enforced at compile time.
   //
   // Each public call-back function is implemented by calling the matching
   // private call-back function.
   //---------------------------------------------------------------------------

   static void setNPeriods (GlobalElement *, int nPeriodsVal);

   //---------------------------------------------------------------------------
d53 4
a56 1
   // Private member functions.
d59 1
a59 1
   private:
d62 1
a62 7
   // Private non-static call-back functions.
   //
   // Each of these functions is a wrapper for a Java method of the same name.
   //
   // The type-correctness of the object arguments (including this) is the
   // responsibility of the caller, which is expected to be the matching public
   // call-back function.
d65 1
a65 5
   void setNPeriods (int);

   //---------------------------------------------------------------------------
   // Other private member functions.
   //---------------------------------------------------------------------------
d71 4
a107 15
   void findJMethodID (
         _jmethodID * & theJMethodID,
         const char *   theMethName,
         const char *   theMethDesc);
      //
      // If theJMethodID is NULL, theJMethodID is set to the _jmethodID of the
      // Java method indicated by the arguments. The method found will belong to
      // the class of the Java object represented by this JavaObjRep. 
      // Handles any exceptions that result.
      // No-op, if theJMethodID is not NULL.
      //
      // Arguments:
      //    theMethName: The name of the Java method
      //    theMethDesc: The JNI method descriptor of the Java method

d126 12
@


1.20
log
@Call-back infrastructure.
@
text
@d48 1
a48 3
   static void setNPeriods (GlobalElement *,        int    nPeriodsVal);
   static void newPart     (Problem *,       const char * thePartName,
                                                   bool   theMaterialCase);
d58 2
d82 1
a82 3
   void setNPeriods (      int);
   void newPart     (const char *       thePartName,
                           bool         theMaterialCase);
d88 4
d102 1
a102 1
      // If theJClass is NULL, it is set to the jclass representing the
d119 1
a119 1
      // If theJClass is NULL, it is set to the jclass representing the
d142 1
a142 1
      // Finds and returns the jclass representing the WIT-J/Java class 
@


1.19
log
@Call-back infrastructure.
@
text
@d48 3
a50 7
   static void setNPeriods   (GlobalElement *,        int    nPeriodsVal);
   static void newPart       (Problem *,       const char * thePartName,
                                                     bool   theMaterialCase);
   static void newDemand     (Part *,          const char * theDemandName);
   static void newBomEntry   (Operation *,           Part * thePart);
   static void newSubstitute (BomEntry *,            Part * thePart);
   static void newBopEntry   (Operation *,           Part * thePart);
d60 5
a64 1
   static void makeOperation (Problem *, const char * theOpnName);
d82 3
a84 7
   void setNPeriods   (      int);
   void newPart       (const char *       thePartName,
                             bool         theMaterialCase);
   void newDemand     (const char *       theDemandName);
   void newBomEntry   (      JavaObjRep * thePartJOR);
   void newSubstitute (      JavaObjRep * thePartJOR);
   void newBopEntry   (      JavaObjRep * thePartJOR);
d90 33
d138 18
@


1.18
log
@Name change.
@
text
@a51 1
   static void newOperation  (Problem *,       const char * theOpnName);
d57 10
a85 1
   void newOperation  (const char *       theOpnName);
@


1.17
log
@Changed name of Component to Entity.
@
text
@d48 8
a55 8
   static void setNPeriods   (GlobalEntity *,       int    nPeriodsVal);
   static void newPart       (Problem *,      const char * thePartName,
                                                    bool   theMaterialCase);
   static void newDemand     (Part *,         const char * theDemandName);
   static void newOperation  (Problem *,      const char * theOpnName);
   static void newBomEntry   (Operation *,          Part * thePart);
   static void newSubstitute (BomEntry *,           Part * thePart);
   static void newBopEntry   (Operation *,          Part * thePart);
@


1.16
log
@Minor revision
@
text
@d48 8
a55 8
   static void setNPeriods   (GlobalComp *,       int    nPeriodsVal);
   static void newPart       (Problem *,    const char * thePartName,
                                                  bool   theMaterialCase);
   static void newDemand     (Part *,       const char * theDemandName);
   static void newOperation  (Problem *,    const char * theOpnName);
   static void newBomEntry   (Operation *,        Part * thePart);
   static void newSubstitute (BomEntry *,         Part * thePart);
   static void newBopEntry   (Operation *,        Part * thePart);
@


1.15
log
@Implemented extraction of substitutes.
@
text
@d50 1
a50 1
                                                  bool   theMaterialMode);
d75 1
a75 1
                             bool         theMaterialMode);
@


1.14
log
@Implemented extraction of BOP entries.
@
text
@d48 8
a55 7
   static void setNPeriods  (GlobalComp *,       int    nPeriodsVal);
   static void newPart      (Problem *,    const char * thePartName,
                                                 bool   theMaterialMode);
   static void newDemand    (Part *,       const char * theDemandName);
   static void newOperation (Problem *,    const char * theOpnName);
   static void newBomEntry  (Operation *,        Part * thePart);
   static void newBopEntry  (Operation *,        Part * thePart);
d73 8
a80 7
   void setNPeriods  (      int);
   void newPart      (const char *       thePartName,
                            bool         theMaterialMode);
   void newDemand    (const char *       theDemandName);
   void newOperation (const char *       theOpnName);
   void newBomEntry  (      JavaObjRep * thePartJOR);
   void newBopEntry  (      JavaObjRep * thePartJOR);
@


1.13
log
@Revised class StringWoa.
@
text
@d54 1
d78 1
@


1.12
log
@Implemented extraction of BOM entries.
@
text
@d48 6
a53 6
   static void setNPeriods  (GlobalComp *,       int          nPeriodsVal);
   static void newPart      (Problem *,    const StringWoa &  thePartNameWoa,
                                                 bool         theMaterialMode);
   static void newDemand    (Part *,       const StringWoa &  theDemandNameWoa);
   static void newOperation (Problem *,    const StringWoa &  theOpnNameWoa);
   static void newBomEntry  (Operation *,        Part *       thePart);
d72 1
a72 1
   void newPart      (const StringWoa &  thePartNameWoa,
d74 2
a75 2
   void newDemand    (const StringWoa &  theDemandNameWoa);
   void newOperation (const StringWoa &  theOpnNameWoa);
@


1.11
log
@Call-back infrastructure.
Implemented extraction of Demands.
@
text
@d48 6
a53 5
   static void setNPeriods  (GlobalComp *, int nPeriodsVal);
   static void newPart      (Problem *,    const StringWoa & thePartNameWoa,
                                           bool              theMaterialMode);
   static void newDemand    (Part *,       const StringWoa & theDemandNameWoa);
   static void newOperation (Problem *,    const StringWoa & theOpnNameWoa);
d71 6
a76 5
   void setNPeriods  (int);
   void newPart      (const StringWoa & thePartNameWoa,
                      bool              theMaterialMode);
   void newDemand    (const StringWoa & theDemandNameWoa);
   void newOperation (const StringWoa & theOpnNameWoa);
d106 1
a106 1
   _jweak * myJObject_;
@


1.10
log
@Implemented extraction of Parts.
@
text
@d49 4
a52 7

   static void newPart (
      Problem *,
      const StringWoa & thePartNameWoa,
      bool              theMaterialMode);

   static void newOperation (Problem *, const StringWoa & theOpnNameWoa);
d71 3
a73 1
   void newPart      (const StringWoa & thePartNameWoa, bool theMaterialMode);
@


1.9
log
@Extraction.
@
text
@d48 8
a55 2
   static void setNPeriods  (GlobalComp *, int);
   static void newOperation (Problem *,    const StringWoa & theOpnNameWoa);
d74 1
@


1.8
log
@Changed name of C++ class JniWrapper to JniClient.
@
text
@d38 1
d41 1
d43 3
d59 1
d61 1
d63 2
a64 1
   // responsibility of the caller.
@


1.7
log
@Extraction
@
text
@d10 1
a10 1
#include <JniWrapper.h>
d20 1
a20 1
class JavaObjRep: public JniWrapper
d28 1
a28 1
   explicit JavaObjRep (JniWrapper &, _jobject *);
@


1.6
log
@Call-back infrastructure.
@
text
@d28 1
a28 1
   explicit JavaObjRep (NativeCall &, _jobject *);
d36 9
a44 4
   static void setNPeriods (GlobalComp * theGlobalComp, int theInt);
      //
      // Calls setNPeriods on the Java side.
      // Type-safe version.
d52 13
a64 4
   void setNPeriods (int theInt);
      //
      // Calls setNPeriods on the Java side.
      // Internal version.
@


1.5
log
@Call-back infrastructure.
@
text
@a35 4
   static void findJMethodIDs (JNIEnv * theJNIEnv);
      //
      // Finds the _jmethodIDs needed by this class.

a46 14
   static _jmethodID * findMethodID (
         JNIEnv *     theJNIEnv,
         const char * theMethName,
         const char * theClassName,
         const char * theMethDesc);
      //
      // Finds and returns the _jmethodID of the Java method indicated by the
      // arguments. Handles any exceptions that result.
      // Arguements:
      //    theJNIEnv:    The JNI environment
      //    theMethName:  The name of the Java method
      //    theClassName: The name of the Java class to which the method belongs
      //    theMethDesc:  The JNI method descriptor of the Java method

d52 15
a79 4

   static _jmethodID * setNPeriodsID_;
      //
      // The jmethodID for theGlobalComp.setNPeriods (...).
@


1.4
log
@Implemented C++ class JniWrapper.
@
text
@d43 1
d65 1
a65 1
   static JNIEnv * theJNIEnvFor (JavaAccObj * theJavaAccObj);
d67 2
a68 6
      // Returns the JNIEnv for theJavaAccObj.

   static _jobject * getJObjectFor (JavaAccObj * theJavaAccObj);
      //
      // Returns the _jobject that represents the Java Object corresponding to
      // theJavaAccObj.
@


1.3
log
@Changed name of C++ class JAccObject to JavaAccObj.
@
text
@d10 1
a10 3
#include <Includes.h>

#include      <jni.h>
d20 1
a20 1
class JavaObjRep
d28 1
a28 1
   explicit JavaObjRep (JNIEnv * theJNIEnv, _jobject * theJObject);
a63 5
   static void checkForJniException (JavaAccObj * theJavaAccObj);
      //
      // Handles any exception that has been thrown by JNI.
      // Uses the JNIEnv corresponding to theJavaAccObj.

a81 4
   JNIEnv * const myJNIEnv_;
      //
      // The JNI environment for this JavaObjRep.

@


1.2
log
@Minor revision.
@
text
@d66 1
a66 1
   static void checkForJniException (JAccObject * theJAccObject);
d69 1
a69 1
      // Uses the JNIEnv corresponding to theJAccObject.
d71 1
a71 1
   static JNIEnv * theJNIEnvFor (JAccObject * theJAccObject);
d73 1
a73 1
      // Returns the JNIEnv for theJAccObject.
d75 1
a75 1
   static _jobject * getJObjectFor (JAccObject * theJAccObject);
d78 1
a78 1
      // theJAccObject.
@


1.1
log
@Changed name of C++ class JavaLink to JavaObjRep.
@
text
@d17 1
a17 1
// The C++ interface to a Java object.
d75 1
a75 1
   static _jobject * linkedJObjectFor (JAccObject * theJAccObject);
d93 1
a93 1
   _jweak * linkedJObject_;
d95 2
a96 2
      // A JNI weak global reference that represents the Java Object to which
      // this JavaObjRep provides access.
@

