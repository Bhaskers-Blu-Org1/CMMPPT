head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	2009.02.26.22.46.58;	author rjw;	state dead;
branches;
next	1.11;

1.11
date	2009.01.21.21.43.22;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.16.19.42.43;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.15.17.28.47;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.15.17.17.39;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.10.07.18.50.23;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.06.22.25.45;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.06.22.14.01;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.30.16.14.56;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.24.16.26.35;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.22.15.26.56;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.19.21.59.26;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Removed C++ class Extractor.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File Extractor.h.
//
// Contains the declaration of class Extractor.
//------------------------------------------------------------------------------

#ifndef Extractor_h
#define Extractor_h

#include <Includes.h>

//------------------------------------------------------------------------------
// Class Extractor
//
// Responsible for extracting the state of a WIT problem from WIT and copying it
// into both the Java side and the C++ side of WIT-J.
//------------------------------------------------------------------------------

namespace WitJ
{
class Extractor
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit Extractor (Coordinator *);
      //
      // Constructor.

   ~Extractor ();

   void extract ();
      //
      // Extracts the state of the WIT problem from the WitRun associated with
      // this Extractor and copies it into the WIT-J Problem associated with
      // this Extractor on both the Java side and the C++ side.

   //---------------------------------------------------------------------------
   // Accessors.
   //---------------------------------------------------------------------------

   inline bool getExtractMode ()
      {
      return myExtractMode_;
      }

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   void extractNPeriods ();
      //
      // Sets nPeriods as stored by both sides of WIT-J to the value stored in
      // the WitRun.

   void extractElements ();
      //
      // For each non-global Element in the WitRun, creates a matching Element
      // on both sides of WIT-J.

   void extractPart       ();
   void extractDemand     ();
   void extractOperation  ();
   void extractBomEntry   ();
   void extractSubstitute ();
   void extractBopEntry   ();
      //
      // Each of these functions does the following:
      // * Requires that object iteration be currently positioned at an
      //   instance of the indicated Element class.
      // * Creates an Element on both sides of WIT-J matching the Element at
      //   which object iteration is currently positioned.

   Extractor              (const Extractor &);
   Extractor & operator = (const Extractor &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   Coordinator * const myCoordinator_;
      //
      // The Coordinator that owns this Extractor.

   WitRun * const myWitRun_;
      //
      // The WitRun associated with this Extractor.

   bool myExtractMode_;
      //
      // True, iff the extract () function is currently executing.
   };
};
//
// End of namespace WitJ.

#endif
@


1.11
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@@


1.10
log
@ProbMgr classes.
@
text
@d29 1
a29 1
   explicit Extractor (ProbMgr *);
d88 1
a88 1
   ProbMgr * const myProbMgr_;
d90 1
a90 1
      // The ProbMgr that owns this Extractor.
@


1.9
log
@Updated some comments.
@
text
@d29 1
a29 1
   explicit Extractor (Problem *);
d88 1
a88 1
   Problem * const myProblem_;
d90 1
a90 1
      // The Problem that owns this Extractor.
@


1.8
log
@Initial implementation of class ExceptionHandler.
@
text
@d82 1
a82 1
      // Not defined; prevents accidental copying and assignment.
@


1.7
log
@Name change.
@
text
@d3 2
@


1.6
log
@Minor corrections.
@
text
@d59 1
a59 1
   void extractEntities ();
d61 2
a62 2
      // For each non-global Entity in WitRun, creates a matching Entity on both
      // sides of WIT-J.
d73 2
a74 2
      //   instance of the indicated Entity class.
      // * Creates an Entity on both sides of WIT-J matching the Entity at
@


1.5
log
@Changed name of Component to Entity.
@
text
@a76 2
   void createsCompError (const char * theClassName);

@


1.4
log
@Extraction.
@
text
@d59 1
a59 1
   void extractComponents ();
d61 2
a62 2
      // For each non-global Component in WitRun, creates a matching Component
      // on both sides of WIT-J.
d73 2
a74 2
      //   instance of the indicated Component class.
      // * Creates a Component on both sides of WIT-J matching the Component at
@


1.3
log
@Intitial implementation of extraction of nPeriods.
@
text
@d57 1
a57 1
      // WIT.
d59 17
a75 1
   void checkForPartsOpns ();
d77 1
a77 1
   void createsPartOpnError ();
@


1.2
log
@Continued implementation of readData.
@
text
@d40 9
d54 5
d72 1
a72 1
   Session * const mySession_;
d74 1
a74 1
      // The Session associated with this Extractor.
d79 4
@


1.1
log
@Began implementation of Problem.readData (...).
@
text
@d13 2
a14 2
// Responsible for extracting the structure of a WIT problem from WIT and
// copying it into both the Java side and the C++ side of WIT-J.
d35 3
a37 3
      // Extracts the structure of the WIT problem from the WitRun associated
      // with this Extractor and copies it into the WIT-J Problem associated
      // with this Extractor on both the Java side and the C++ side.
d45 3
a47 1
   void addedPartOpnError ();
@

