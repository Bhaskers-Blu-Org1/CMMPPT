head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	2008.09.26.22.21.20;	author rjw;	state dead;
branches;
next	1.11;

1.11
date	2008.08.27.15.30.44;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.05.30.16.33.36;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.30.15.52.18;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.23.22.58.32;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.22.21.02.57;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.21.18.07.12;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.20.20.37.01;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.20.18.16.38;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.20.15.24.48;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.19.22.20.53;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.16.22.10.23;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Numerous class name changes.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source file BomEntryCI.C.
//
// Contains the C++ implementations of the native methods of Java class
// witj.BomEntryCI.
//------------------------------------------------------------------------------

#include <JniHandler.h>
#include   <BomEntry.h>

using namespace WitJ;

//------------------------------------------------------------------------------

nativeMethod (void, BomEntryCI, createMyCppBomEntry) (
      JNIEnv *   theJNIEnv,
      _jobject * theBomEntCIJObj,
      _jobject * theOpnCIJObj,
      _jobject * thePartCIJObj)
   {
   JniHandler  theJniHand (theJNIEnv);
   Operation * theOpn;
   Part      * thePart;
   BomEntry  * theBomEnt;

   theOpn    = theJniHand.getObject  (theOpnCIJObj)->asOperation ();
   thePart   = theJniHand.getObject (thePartCIJObj)->asPart      ();

   theBomEnt = new BomEntry (theOpn, thePart);

   theJniHand.transferTo (theBomEntCIJObj, theBomEnt);
   }
@


1.11
log
@Attributes.
@
text
@@


1.10
log
@JniHandler
@
text
@d26 2
a27 2
   theOpn    = theJniHand.getObject  (theOpnCIJObj)->thisOperation ();
   thePart   = theJniHand.getObject (thePartCIJObj)->thisPart      ();
@


1.9
log
@JniHandler
@
text
@d26 2
a27 2
   theOpn    = theJniHand.getOperation (theOpnCIJObj);
   thePart   = theJniHand.getPart      (thePartCIJObj);
@


1.8
log
@*** empty log message ***
@
text
@d17 1
a17 1
      _jobject * theJObj,
d21 1
a21 1
   JniHandler  theJniHand (theJNIEnv, theJObj);
d31 1
a31 1
   theJniHand.attachToCI (theBomEnt);
@


1.7
log
@*** empty log message ***
@
text
@d26 2
a27 2
   theOpn    = theJniHand.getObject (theOpnCIJObj) ->thisOperation ();
   thePart   = theJniHand.getObject (thePartCIJObj)->thisPart      ();
@


1.6
log
@*** empty log message ***
@
text
@d31 1
a31 1
   theJniHand.attachToCppInterface (theBomEnt);
@


1.5
log
@*** empty log message ***
@
text
@a9 1
#include     <Native.h>
d17 1
a17 1
      _jobject * theBomEntCIJObj,
d21 1
a21 1
   JniHandler  theJniHand (theJNIEnv);
d31 1
a31 1
   theJniHand.acquireFor (theBomEntCIJObj, theBomEnt);
@


1.4
log
@*** empty log message ***
@
text
@a8 1
#include  <StringJia.h>
d22 1
a22 1
   JniHandler  theJniHandler (theJNIEnv);
d27 2
a28 2
   theOpn    = theJniHandler.objectOf (theOpnCIJObj) ->thisOperation ();
   thePart   = theJniHandler.objectOf (thePartCIJObj)->thisPart      ();
d32 1
a32 1
   theJniHandler.transferTo (theBomEntCIJObj, theBomEnt);
@


1.3
log
@*** empty log message ***
@
text
@a8 1
#include      <CIJia.h>
d23 4
a26 6
   JniHandler        theJniHandler (theJNIEnv);
   CIJia <Operation> theOpnCIJia   (theJNIEnv, theOpnCIJObj);
   CIJia <Part>      thePartCIJia  (theJNIEnv, thePartCIJObj);
   Operation *       theOpn;
   Part      *       thePart;
   BomEntry  *       theBomEnt;
d28 2
a29 2
   theOpn    = theOpnCIJia .myObject ();
   thePart   = thePartCIJia.myObject ();
@


1.2
log
@*** empty log message ***
@
text
@d8 5
a12 5
#include   <JniAsst.h>
#include     <CIJia.h>
#include <StringJia.h>
#include  <BomEntry.h>
#include    <Native.h>
d24 3
a26 3
   JniAsst           theJniAsst   (theJNIEnv);
   CIJia <Operation> theOpnCIJia  (theJNIEnv, theOpnCIJObj);
   CIJia <Part>      thePartCIJia (theJNIEnv, thePartCIJObj);
d36 1
a36 1
   theJniAsst.transferTo (theBomEntCIJObj, theBomEnt);
@


1.1
log
@*** empty log message ***
@
text
@d8 1
d24 3
a26 3
   CIJia <BomEntry>  theBomEntCIJia (theJNIEnv, theBomEntCIJObj);
   CIJia <Operation> theOpnCIJia    (theJNIEnv, theOpnCIJObj);
   CIJia <Part>      thePartCIJia   (theJNIEnv, thePartCIJObj);
d36 1
a36 1
   theBomEntCIJia.attach (theBomEnt);
@

