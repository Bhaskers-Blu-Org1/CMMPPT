head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2011.04.05.22.25.42;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2011.04.01.23.25.01;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.20.15.24.49;	author rjw;	state dead;
branches;
next	1.1;

1.1
date	2008.05.19.22.20.54;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Namespace JniUtil.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File JniAsst.C.
//
// Contains the implementation of class JniAsst.
//------------------------------------------------------------------------------

#include     <JniAsst.h>
#include  <JavaAccObj.h>
#include <Coordinator.h>
#include     <Problem.h>
#include      <String.h>

//------------------------------------------------------------------------------

_jfieldID * WitJ::JniAsst::ourMyCppObjectAsLongFid_ = NULL;

//------------------------------------------------------------------------------

void WitJ::JniAsst::setUpJni (JNIEnv * theJNIEnv)
   {
   _jclass * theJClassForCppObjRep;

   EXCEPTION_ASSERT (ourMyCppObjectAsLongFid_ == NULL);

   theJClassForCppObjRep    = findJClass (theJNIEnv, "com/ibm/witj/CppObjRep");

   ourMyCppObjectAsLongFid_ =
      theJNIEnv->GetFieldID (theJClassForCppObjRep, "myCppObjectAsLong", "J");

   EXCEPTION_ASSERT (ourMyCppObjectAsLongFid_ != NULL);
   }

//------------------------------------------------------------------------------

WitJ::JniAsst::JniAsst (JNIEnv * theJNIEnv):

      JniClient      (theJNIEnv),
      myCoordinator_ (NULL)
   {
   }

//------------------------------------------------------------------------------

WitJ::JniAsst::~JniAsst ()
   {
   }

//------------------------------------------------------------------------------

void WitJ::JniAsst::setCoordinator (Coordinator * theCoord)
   {
   EXCEPTION_ASSERT (myCoordinator_ == NULL);

   myCoordinator_ = theCoord;
   }

//------------------------------------------------------------------------------

WitJ::Coordinator * WitJ::JniAsst::getCoordinator (
      _jobject * theCoordJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theCoordJObj, theJNIEnv)->asCoordinator ();
   }

//------------------------------------------------------------------------------

WitJ::Problem * WitJ::JniAsst::getProblem (
      _jobject * theProblemJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theProblemJObj, theJNIEnv)->asProblem ();
   }

//------------------------------------------------------------------------------

WitJ::AttBldr * WitJ::JniAsst::getAttBldr (
      _jobject * theAttBldrJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theAttBldrJObj, theJNIEnv)->asAttBldr ();
   }

//------------------------------------------------------------------------------

WitJ::Att * WitJ::JniAsst::getAtt (
      _jobject * theAttJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theAttJObj, theJNIEnv)->asAtt ();
   }

//------------------------------------------------------------------------------

WitJ::MessageMgr * WitJ::JniAsst::getMessageMgr (
      _jobject * theMessageMgrJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theMessageMgrJObj, theJNIEnv)->asMessageMgr ();
   }

//------------------------------------------------------------------------------

WitJ::Component * WitJ::JniAsst::getComponent (
      _jobject * theComponentJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theComponentJObj, theJNIEnv)->asComponent ();
   }

//------------------------------------------------------------------------------

WitJ::Part * WitJ::JniAsst::getPart (
      _jobject * thePartJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (thePartJObj, theJNIEnv)->asPart ();
   }

//------------------------------------------------------------------------------

WitJ::Demand * WitJ::JniAsst::getDemand (
      _jobject * theDemandJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theDemandJObj, theJNIEnv)->asDemand ();
   }

//------------------------------------------------------------------------------

WitJ::Operation * WitJ::JniAsst::getOperation (
      _jobject * theOperationJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theOperationJObj, theJNIEnv)->asOperation ();
   }

//------------------------------------------------------------------------------

WitJ::BomEntry * WitJ::JniAsst::getBomEntry (
      _jobject * theBomEntryJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theBomEntryJObj, theJNIEnv)->asBomEntry ();
   }

//------------------------------------------------------------------------------

WitJ::Substitute * WitJ::JniAsst::getSubstitute (
      _jobject * theSubstituteJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theSubstituteJObj, theJNIEnv)->asSubstitute ();
   }

//------------------------------------------------------------------------------

WitJ::BopEntry * WitJ::JniAsst::getBopEntry (
      _jobject * theBopEntryJObj,
      JNIEnv *   theJNIEnv)
   {
   return getJavaAccObj (theBopEntryJObj, theJNIEnv)->asBopEntry ();
   }

//------------------------------------------------------------------------------

WitJ::JavaAccObj * WitJ::JniAsst::getJavaAccObj (
      _jobject * theCppObjRepJObj,
      JNIEnv *   theJNIEnv)
   {
   jlong        theJavaAccObjAsJLong;
   JavaAccObj * theJavaAccObj;

   EXCEPTION_ASSERT (theCppObjRepJObj != NULL);

   theJavaAccObjAsJLong =
      theJNIEnv->GetLongField (theCppObjRepJObj, ourMyCppObjectAsLongFid_);

   theJavaAccObj = reinterpret_cast <JavaAccObj *> (theJavaAccObjAsJLong);

   EXCEPTION_ASSERT (theJavaAccObj != NULL);

   EXCEPTION_ASSERT (theJavaAccObj->isValid ());

   return theJavaAccObj;
   }

//------------------------------------------------------------------------------

int WitJ::JniAsst::getLength (_jarray * theJArr)
   {
   return getJNIEnv ()->GetArrayLength (theJArr);
   }

//------------------------------------------------------------------------------

void WitJ::JniAsst::copyInto (
      Boolean *        theBoolCTVec,
      _jbooleanArray * theJBoolArr)
   {
   void *     theVoidCTVec;
   jboolean * theJBoolCTVec;
   int        theIdx;

   checkJArrayForTVec (theJBoolArr);

   theVoidCTVec  = getCVecFromJArrayCrit (theJBoolArr);

   theJBoolCTVec = static_cast <jboolean *> (theVoidCTVec);

   for (theIdx = getNPeriods () - 1; theIdx >= 0; theIdx --)
      {
      theBoolCTVec[theIdx] = theJBoolCTVec[theIdx];
      }

   releaseJArrayCritDontCopy (theJBoolArr, theVoidCTVec);
   }

//------------------------------------------------------------------------------

void WitJ::JniAsst::copyInto (int * theIntCTVec, _jintArray * theJIntArr)
   {
   void * theVoidCTVec;
   jint * theJIntCTVec;
   int    theIdx;

   checkJArrayForTVec (theJIntArr);

   theVoidCTVec = getCVecFromJArrayCrit (theJIntArr);

   theJIntCTVec = static_cast <jint *> (theVoidCTVec);

   for (theIdx = getNPeriods () - 1; theIdx >= 0; theIdx --)
      {
      theIntCTVec[theIdx] = theJIntCTVec[theIdx];
      }

   releaseJArrayCritDontCopy (theJIntArr, theVoidCTVec);
   }

//------------------------------------------------------------------------------

void WitJ::JniAsst::copyInto (
      double *        theDblCTVec,
      _jdoubleArray * theJDblArr)
   {
   void *    theVoidCTVec;
   jdouble * theJDblCTVec;
   int       theIdx;

   checkJArrayForTVec (theJDblArr);

   theVoidCTVec = getCVecFromJArrayCrit (theJDblArr);

   theJDblCTVec = static_cast <jdouble *> (theVoidCTVec);

   for (theIdx = getNPeriods () - 1; theIdx >= 0; theIdx --)
      {
      theDblCTVec[theIdx] = theJDblCTVec[theIdx];
      }

   releaseJArrayCritDontCopy (theJDblArr, theVoidCTVec);
   }

//------------------------------------------------------------------------------

void WitJ::JniAsst::copyInto (String & theString, _jstring * theJString)
   {
   int theJStringLen;
   int theCStringLen;

   EXCEPTION_ASSERT (theJString != NULL);

   theJStringLen = getJNIEnv ()->GetStringLength    (theJString);
   theCStringLen = getJNIEnv ()->GetStringUTFLength (theJString);

   theString.resize (theCStringLen);

   getJNIEnv ()->
      GetStringUTFRegion (
         theJString,
         0,
         theJStringLen,
         theString.getCString ());

   throwAnyJavaException ();

   theString.getCString ()[theCStringLen] = '\0';
   }

//------------------------------------------------------------------------------

void WitJ::JniAsst::copyBoundVecInto (
      double * &      theDblCTVec,
      _jdoubleArray * theJDblArr)
   {
   if (theJDblArr == NULL)
      {
      theDblCTVec = NULL;
      }
   else
      copyInto (theDblCTVec, theJDblArr);
   }

//------------------------------------------------------------------------------

void WitJ::JniAsst::copyInto (
      _jbooleanArray * theJBoolArr,
      const Boolean *  theBoolCTVec)
   {
   void *     theVoidCTVec;
   jboolean * theJBoolCTVec;
   int        theIdx;

   checkJArrayForTVec (theJBoolArr);

   theVoidCTVec  = getCVecFromJArrayCrit (theJBoolArr);

   theJBoolCTVec = static_cast <jboolean *> (theVoidCTVec);

   for (theIdx = getNPeriods () - 1; theIdx >= 0; theIdx --)
      {
      theJBoolCTVec[theIdx] = theBoolCTVec[theIdx];
      }

   releaseJArrayCritAndCopy (theJBoolArr, theVoidCTVec);
   }

//------------------------------------------------------------------------------

void WitJ::JniAsst::copyInto (
      _jintArray * theJIntArr,
      const int *  theIntCTVec)
   {
   void * theVoidCTVec;
   jint * theJIntCTVec;
   int    theIdx;

   checkJArrayForTVec (theJIntArr);

   theVoidCTVec = getCVecFromJArrayCrit (theJIntArr);

   theJIntCTVec = static_cast <jint *> (theVoidCTVec);

   for (theIdx = getNPeriods () - 1; theIdx >= 0; theIdx --)
      {
      theJIntCTVec[theIdx] = theIntCTVec[theIdx];
      }

   releaseJArrayCritAndCopy (theJIntArr, theVoidCTVec);
   }

//------------------------------------------------------------------------------

void WitJ::JniAsst::copyInto (
      _jdoubleArray * theJDblArr,
      const double *  theDblCTVec)
   {
   void *    theVoidCTVec;
   jdouble * theJDblCTVec;
   int       theIdx;

   checkJArrayForTVec (theJDblArr);

   theVoidCTVec = getCVecFromJArrayCrit (theJDblArr);

   theJDblCTVec = static_cast <jdouble *> (theVoidCTVec);

   for (theIdx = getNPeriods () - 1; theIdx >= 0; theIdx --)
      {
      theJDblCTVec[theIdx] = theDblCTVec[theIdx];
      }

   releaseJArrayCritAndCopy (theJDblArr, theVoidCTVec);
   }

//------------------------------------------------------------------------------

void WitJ::JniAsst::checkJArrayForTVec (_jarray * theJArr)
   {
   EXCEPTION_ASSERT (getJNIEnv ()->GetArrayLength (theJArr) == getNPeriods ());
   }

//------------------------------------------------------------------------------

void * WitJ::JniAsst::getCVecFromJArrayCrit (_jarray * theJArr)
   {
   void * theVoidCVec;

   theVoidCVec = getJNIEnv ()->GetPrimitiveArrayCritical (theJArr, NULL);

   if (theVoidCVec == NULL)
      {
      throwAnyJavaException ();

      EXCEPTION_ASSERT (false);
      }

   return theVoidCVec;
   }

//------------------------------------------------------------------------------

void WitJ::JniAsst::releaseJArrayCritDontCopy (
      _jarray * theJArr,
      void *    theCVec)
   {
   getJNIEnv ()->ReleasePrimitiveArrayCritical (theJArr, theCVec, JNI_ABORT);
   }

//------------------------------------------------------------------------------

void WitJ::JniAsst::releaseJArrayCritAndCopy (
      _jarray * theJArr,
      void *    theCVec)
   {
   getJNIEnv ()->ReleasePrimitiveArrayCritical (theJArr, theCVec, 0);
   }

//------------------------------------------------------------------------------

int WitJ::JniAsst::getNPeriods ()
   {
   EXCEPTION_ASSERT (myCoordinator_ != NULL);

   return myCoordinator_->getProblem ()->getNPeriods ();
   }
@


1.3
log
@JniAsst
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d4 1
a4 1
// Contains the definition of class JniAsst.
d7 25
a31 1
#include <JniAsst.h>
d37 2
a38 1
      myJNIEnv_ (theJNIEnv)
d50 120
a169 3
void WitJ::JniAsst::acquireJFieldIDs (
      JNIEnv *  theJNIEnv,
      _jclass * theJClassForCppInterface)
d171 9
a179 1
   assert (myFidForMyCppJAccObjectAsLong_ == NULL);
d181 1
a181 6
   myFidForMyCppJAccObjectAsLong_ =
      theJNIEnv->
         GetFieldID (
            theJClassForCppInterface,
            "myCppJAccObjectAsLong",
            "J");
d183 10
a192 1
   assert (myFidForMyCppJAccObjectAsLong_ != NULL);
d197 3
a199 3
void WitJ::JniAsst::transferTo (
      _jobject *   theCppInterfaceAsJObject,
      JAccObject * theJAccObject)
d201 3
a203 1
   jlong theJAccObjectAsJLong;
d205 1
a205 1
   theJAccObjectAsJLong = reinterpret_cast <jlong> (theJAccObject);
d207 10
a216 5
   myJNIEnv_->
      SetLongField (
         theCppInterfaceAsJObject,
         myFidForMyCppJAccObjectAsLong_,
         theJAccObjectAsJLong);
d221 207
a427 1
_jfieldID * WitJ::JniAsst::myFidForMyCppJAccObjectAsLong_ = NULL;
@


1.1
log
@*** empty log message ***
@
text
@@

