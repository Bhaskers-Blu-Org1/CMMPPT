head	1.23;
access;
symbols;
locks; strict;
comment	@ * @;


1.23
date	2008.09.26.22.21.22;	author rjw;	state dead;
branches;
next	1.22;

1.22
date	2008.09.12.14.43.23;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.09.09.18.59.58;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.08.29.17.19.06;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.08.27.15.30.45;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.06.26.19.18.07;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.05.30.16.33.36;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.05.30.15.52.19;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.05.28.20.24.47;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.05.23.22.58.33;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.05.22.21.02.58;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.05.21.22.09.35;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.05.21.18.56.01;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.05.21.18.07.12;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.20.20.37.02;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.20.18.16.40;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.20.15.24.49;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.19.22.20.55;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.16.18.06.46;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.16.17.07.05;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.16.15.40.30;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.15.19.45.17;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.20.54.11;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Numerous class name changes.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source file OperationCI.C.
//
// Contains the C++ implementations of the native methods of Java class
// witj.OperationCI.
//------------------------------------------------------------------------------

#include <JniHandler.h>
#include     <VecWoa.h>
#include  <Operation.h>

using namespace WitJ;

//------------------------------------------------------------------------------

nativeMethod (void, OperationCI, createMyCppOperation) (
      JNIEnv *   theJNIEnv,
      _jobject * theOpnCIJObj,
      _jobject * theProblemCIJObj,
      _jstring * theOpnNameJStr)
   { 
   JniHandler   theJniHand (theJNIEnv);
   Problem *    theProblem;
   const char * theOpnNameCStr;
   Operation *  theOpn;

   theProblem     = theJniHand.getObject (theProblemCIJObj)->asProblem ();

   theOpnNameCStr = theJniHand.makeCString (theOpnNameJStr);

   theOpn         = new Operation (theProblem, theOpnNameCStr);

   theJniHand.transferTo (theOpnCIJObj, theOpn);
   }

//------------------------------------------------------------------------------

nativeMethod (void, OperationCI, setOperationName) (
      JNIEnv *   theJNIEnv,
      _jobject * theOpnCIJObj,
      _jstring * theOpnNameJStr)
   {
   JniHandler   theJniHand (theJNIEnv);
   Operation *  theOpn;
   const char * theOpnNameCStr;

   theOpn         = theJniHand.getObject (theOpnCIJObj)->asOperation ();

   theOpnNameCStr = theJniHand.makeCString (theOpnNameJStr);

   theOpn->setOperationName (theOpnNameCStr);
   }
@


1.22
log
@Revised the use of class CTVecRes.
@
text
@@


1.21
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@d19 1
a19 1
      _jobject * theSessionCIJObj,
d23 1
a23 1
   Session *    theSession;
d27 1
a27 1
   theSession     = theJniHand.getObject (theSessionCIJObj)->asSession ();
d31 1
a31 1
   theOpn         = new Operation (theSession, theOpnNameCStr);
@


1.20
log
@"operationName" attribute.
@
text
@d19 1
a19 1
      _jobject * theProbCoordCIJObj,
d23 1
a23 1
   ProbCoord *  theProbCoord;
d27 1
a27 1
   theProbCoord   = theJniHand.getObject (theProbCoordCIJObj)->asProbCoord ();
d31 1
a31 1
   theOpn         = new Operation (theProbCoord, theOpnNameCStr);
@


1.19
log
@Attributes.
@
text
@d20 1
a20 1
      _jstring * operationNameJStr)
d24 1
a24 1
   const char * operationNameCStr;
d27 1
a27 1
   theProbCoord = theJniHand.getObject (theProbCoordCIJObj)->asProbCoord ();
d29 1
a29 1
   operationNameCStr = theJniHand.makeCString (operationNameJStr);
d31 1
a31 1
   theOpn            = new Operation (theProbCoord, operationNameCStr);
d35 18
@


1.18
log
@Attributes.
@
text
@d27 1
a27 1
   theProbCoord = theJniHand.getObject (theProbCoordCIJObj)->thisProbCoord ();
@


1.17
log
@JniHandler
@
text
@a34 36

//------------------------------------------------------------------------------

nativeMethod (void, OperationCI, setExecCost) (
      JNIEnv *        theJNIEnv,
      _jobject *      theOpnCIJObj,
      _jdoubleArray * execCostJDblAr)
   {
   JniHandler     theJniHand (theJNIEnv);
   Operation *    theOpn;
   const double * execCostCVec;

   theOpn       = theJniHand.getObject (theOpnCIJObj)->thisOperation ();

   execCostCVec = theJniHand.makeDblCTVec (execCostJDblAr);

   theOpn->setExecCost (execCostCVec);
   }

//------------------------------------------------------------------------------

nativeMethod (void, OperationCI, getExecCost) (
      JNIEnv *        theJNIEnv,
      _jobject *      theOpnCIJObj,
      _jdoubleArray * execCostJDblAr)
   {
   JniHandler      theJniHand (theJNIEnv);
   Operation *     theOpn;
   VecWoa <double> execCostWoa;

   theOpn = theJniHand.getObject (theOpnCIJObj)->thisOperation ();

   theOpn->getExecCost (execCostWoa);

   theJniHand.copyInto (execCostJDblAr, execCostWoa);
   }
@


1.16
log
@JniHandler
@
text
@d27 1
a27 1
   theProbCoord      = theJniHand.getProbCoord (theProbCoordCIJObj);
d47 1
a47 1
   theOpn       = theJniHand.getOperation (theOpnCIJObj);
d65 1
a65 1
   theOpn = theJniHand.getOperation (theOpnCIJObj);
@


1.15
log
@Attributes
@
text
@d18 1
a18 1
      _jobject * theJObj,
d21 2
a22 2
   {
   JniHandler   theJniHand (theJNIEnv, theJObj);
d33 1
a33 1
   theJniHand.attachToCI (theOpn);
d40 1
a40 1
      _jobject *      theJObj,
d43 1
a43 1
   JniHandler     theJniHand (theJNIEnv, theJObj);
d47 1
a47 1
   theOpn       = theJniHand.getOperation ();
d58 1
a58 1
      _jobject *      theJObj,
d61 1
a61 1
   JniHandler      theJniHand (theJNIEnv, theJObj);
d65 1
a65 1
   theOpn = theJniHand.getOperation ();
@


1.14
log
@*** empty log message ***
@
text
@d61 3
a63 3
   JniHandler  theJniHand (theJNIEnv, theJObj);
   Operation * theOpn;
   DblVecWoa   execCostWoa;
@


1.13
log
@*** empty log message ***
@
text
@d27 1
a27 1
   theProbCoord = theJniHand.getObject (theProbCoordCIJObj)->thisProbCoord ();
d47 1
a47 1
   theOpn       = theJniHand.myObject ()->thisOperation ();
d65 1
a65 1
   theOpn = theJniHand.myObject ()->thisOperation ();
@


1.12
log
@*** empty log message ***
@
text
@d33 1
a33 1
   theJniHand.attachToCppInterface (theOpn);
@


1.11
log
@*** empty log message ***
@
text
@a8 1
#include    <TVecJia.h>
d43 1
a43 2
   JniHandler     theJniHand  (theJNIEnv, theJObj);
   DblTVecJia     execCostJia (theJNIEnv, theJObj, execCostJDblAr);
d49 1
a49 1
   execCostCVec = execCostJia.myDblCVec ();
@


1.10
log
@*** empty log message ***
@
text
@a9 1
#include     <VecJoa.h>
d63 1
a63 2
   JniHandler  theJniHand  (theJNIEnv, theJObj);
   DblVecJoa   execCostJoa (theJNIEnv, execCostJDblAr);
d67 1
a67 1
   theOpn      = theJniHand.myObject ()->thisOperation ();
d71 1
a71 1
   execCostJoa = execCostWoa;
@


1.9
log
@*** empty log message ***
@
text
@a12 1
#include     <Native.h>
d20 1
a20 1
      _jobject * theOpnCIJObj,
d24 1
a24 1
   JniHandler   theJniHand (theJNIEnv);
d35 1
a35 1
   theJniHand.acquireFor (theOpnCIJObj, theOpn);
d42 1
a42 1
      _jobject *      theOpnCIJObj,
d45 2
a46 2
   JniHandler     theJniHand  (theJNIEnv);
   DblTVecJia     execCostJia (theJNIEnv, execCostJDblAr, theOpnCIJObj);
d50 1
a50 1
   theOpn       = theJniHand.getObject (theOpnCIJObj)->thisOperation ();
d61 1
a61 1
      _jobject *      theOpnCIJObj,
d64 1
a64 1
   JniHandler  theJniHand  (theJNIEnv);
d69 1
a69 1
   theOpn      = theJniHand.getObject (theOpnCIJObj)->thisOperation ();
@


1.8
log
@*** empty log message ***
@
text
@a8 1
#include  <StringJia.h>
d25 1
a25 2
   JniHandler   theJniHandler     (theJNIEnv);
   StringJia    operationNameJia  (theJNIEnv, operationNameJStr);
d27 1
a27 1
   const char * operationNameVal;
d30 1
a30 1
   theProbCoord = theJniHandler.objectOf (theProbCoordCIJObj)->thisProbCoord ();
d32 1
a32 1
   operationNameVal = operationNameJia .myCString ();
d34 1
a34 1
   theOpn           = new Operation (theProbCoord, operationNameVal);
d36 1
a36 1
   theJniHandler.transferTo (theOpnCIJObj, theOpn);
d46 2
a47 2
   JniHandler     theJniHandler (theJNIEnv);
   DblTVecJia     execCostJia   (theJNIEnv, execCostJDblAr, theOpnCIJObj);
d51 1
a51 1
   theOpn       = theJniHandler.objectOf (theOpnCIJObj)->thisOperation ();
d65 2
a66 2
   JniHandler  theJniHandler (theJNIEnv);
   DblVecJoa   execCostJoa   (theJNIEnv, execCostJDblAr);
d70 1
a70 1
   theOpn      = theJniHandler.objectOf (theOpnCIJObj)->thisOperation ();
@


1.7
log
@*** empty log message ***
@
text
@a8 1
#include      <CIJia.h>
d26 5
a30 6
   JniHandler        theJniHandler     (theJNIEnv);
   CIJia <ProbCoord> theProbCoordCIJia (theJNIEnv, theProbCoordCIJObj);
   StringJia         operationNameJia  (theJNIEnv, operationNameJStr);
   ProbCoord *       theProbCoord;
   const char *      operationNameVal;
   Operation *       theOpn;
d32 1
a32 1
   theProbCoord     = theProbCoordCIJia.myObject ();
d48 4
a51 4
   CIJia <Operation> theOpnCIJia (theJNIEnv, theOpnCIJObj);
   DblTVecJia        execCostJia (theJNIEnv, execCostJDblAr, theOpnCIJObj);
   Operation *       theOpn;
   const double *    execCostCVec;
d53 1
a53 1
   theOpn       = theOpnCIJia.myObject ();
d67 4
a70 4
   CIJia <Operation> theOpnCIJia (theJNIEnv, theOpnCIJObj);
   DblVecJoa         execCostJoa (theJNIEnv, execCostJDblAr);
   Operation *       theOpn;
   DblVecWoa         execCostWoa;
d72 1
a72 1
   theOpn      = theOpnCIJia.myObject ();
@


1.6
log
@*** empty log message ***
@
text
@d8 8
a15 8
#include   <JniAsst.h>
#include     <CIJia.h>
#include <StringJia.h>
#include   <TVecJia.h>
#include    <VecJoa.h>
#include    <VecWoa.h>
#include <Operation.h>
#include    <Native.h>
d27 1
a27 1
   JniAsst           theJniAsst        (theJNIEnv);
d40 1
a40 1
   theJniAsst.transferTo (theOpnCIJObj, theOpn);
@


1.5
log
@*** empty log message ***
@
text
@d8 1
d27 1
a27 1
   CIJia <Operation> theOpnCIJia       (theJNIEnv, theOpnCIJObj);
d40 1
a40 1
   theOpnCIJia.attach (theOpn);
@


1.4
log
@*** empty log message ***
@
text
@d33 1
a33 1
   theProbCoord     = theProbCoordCIJia.myDerJAccObject ();
d54 1
a54 1
   theOpn       = theOpnCIJia.myDerJAccObject ();
d73 1
a73 1
   theOpn      = theOpnCIJia.myDerJAccObject ();
@


1.3
log
@*** empty log message ***
@
text
@d22 1
a22 1
      _jobject * theOpnNiJObj,
d26 1
a26 1
   CIJia <Operation> theOpnCIJia       (theJNIEnv, theOpnNiJObj);
d46 1
a46 1
      _jobject *      theOpnNiJObj,
d49 2
a50 2
   CIJia <Operation> theOpnCIJia (theJNIEnv, theOpnNiJObj);
   DblTVecJia        execCostJia (theJNIEnv, execCostJDblAr);
a55 2
   execCostJia.attach (theOpn->myProbCoord ());

d65 1
a65 1
      _jobject *      theOpnNiJObj,
d68 1
a68 1
   CIJia <Operation> theOpnCIJia (theJNIEnv, theOpnNiJObj);
a78 1

@


1.2
log
@*** empty log message ***
@
text
@d12 1
d51 8
d60 1
a60 1
   theOpnCIJia.myDerJAccObject ()->setExecCost (execCostJia);
d72 4
d77 3
a79 1
   theOpnCIJia.myDerJAccObject ()->getExecCost (execCostJoa);
d81 1
@


1.1
log
@*** empty log message ***
@
text
@d22 1
a22 1
      _jobject * theProblemCIJObj,
d25 5
a29 3
   CIJia <Operation> theOpnCIJia      (theJNIEnv, theOpnNiJObj);
   CIJia <Problem>   theProblemCIJia  (theJNIEnv, theProblemCIJObj);
   StringJia         operationNameJia (theJNIEnv, operationNameJStr);
d32 5
a36 1
   theOpn = new Operation (theProblemCIJia, operationNameJia);
@

