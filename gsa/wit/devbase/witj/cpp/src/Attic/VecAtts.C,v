head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2008.07.22.21.08.59;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2008.07.22.20.38.25;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.07.22.13.54.52;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.07.21.21.44.07;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.07.15.18.40.59;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Attributes.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File VecAtts.C.
//
// Contains the definitions of the following class templates:
//
//    GlobalVecAtt <Elem>
//      PartVecAtt <Elem>
//    DemandVecAtt <Elem>
//       OpnVecAtt <Elem>
//       BomVecAtt <Elem>
//       SubVecAtt <Elem>
//       BopVecAtt <Elem>
//
// Contains the explicit instantiation of each of these class templates.
//------------------------------------------------------------------------------

#include    <VecAtts.h>
#include <GlobalComp.h>
#include       <Part.h>
#include     <Demand.h>
#include  <Operation.h>
#include   <BomEntry.h>
#include <Substitute.h>
#include   <BopEntry.h>
#include     <VecWoa.h>

//------------------------------------------------------------------------------
// Definition of class template GlobalVecAtt.
//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::GlobalVecAtt <Elem>::GlobalVecAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "GlobalComp"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   witjAssert (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::GlobalVecAtt <Elem>::~GlobalVecAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::GlobalVecAtt <Elem>::setValue (
         Component *  theComp,
         const Elem * theCVec)
   {
   witjAssert (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (
      getWitRun (),
      theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::GlobalVecAtt <Elem>::getValue (
         Component *     theComp,
         VecWoa <Elem> & theDblVecWoa)
   {
   myGetFuncPtr_ (
      getWitRun (),
      theDblVecWoa.getCVecAddr ());
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::GlobalVecAtt <Elem>::isAnInputAtt ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------
// Definition of class template PartVecAtt.
//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::PartVecAtt <Elem>::PartVecAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "Part"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   witjAssert (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::PartVecAtt <Elem>::~PartVecAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::PartVecAtt <Elem>::setValue (
         Component *  theComp,
         const Elem * theCVec)
   {
   Part * thePart;

   thePart = theComp->thisPart ();

   witjAssert (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (
      getWitRun (),
      thePart->getPartCName (),
      theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::PartVecAtt <Elem>::getValue (
         Component *     theComp,
         VecWoa <Elem> & theDblVecWoa)
   {
   Part * thePart;

   thePart = theComp->thisPart ();

   myGetFuncPtr_ (
      getWitRun (),
      thePart->getPartCName (),
      theDblVecWoa.getCVecAddr ());
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::PartVecAtt <Elem>::isAnInputAtt ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------
// Definition of class template DemandVecAtt.
//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::DemandVecAtt <Elem>::DemandVecAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "Demand"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   witjAssert (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::DemandVecAtt <Elem>::~DemandVecAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::DemandVecAtt <Elem>::setValue (
         Component *  theComp,
         const Elem * theCVec)
   {
   Demand * theDemand;

   theDemand = theComp->thisDemand ();

   witjAssert (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (
      getWitRun (),
      theDemand->getPartCName (),
      theDemand->getDemandCName (),
      theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::DemandVecAtt <Elem>::getValue (
         Component *     theComp,
         VecWoa <Elem> & theDblVecWoa)
   {
   Demand * theDemand;

   theDemand = theComp->thisDemand ();

   myGetFuncPtr_ (
      getWitRun (),
      theDemand->getPartCName (),
      theDemand->getDemandCName (),
      theDblVecWoa.getCVecAddr ());
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::DemandVecAtt <Elem>::isAnInputAtt ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------
// Definition of class template OpnVecAtt.
//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::OpnVecAtt <Elem>::OpnVecAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "Operation"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   witjAssert (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::OpnVecAtt <Elem>::~OpnVecAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::OpnVecAtt <Elem>::setValue (
         Component *  theComp,
         const Elem * theCVec)
   {
   Operation * theOpn;

   theOpn = theComp->thisOperation ();

   witjAssert (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (
      getWitRun (),
      theOpn->getOperationCName (),
      theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::OpnVecAtt <Elem>::getValue (
         Component *     theComp,
         VecWoa <Elem> & theDblVecWoa)
   {
   Operation * theOpn;

   theOpn = theComp->thisOperation ();

   myGetFuncPtr_ (
      getWitRun (),
      theOpn->getOperationCName (),
      theDblVecWoa.getCVecAddr ());
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::OpnVecAtt <Elem>::isAnInputAtt ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------
// Definition of class template BomEntVecAtt.
//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::BomEntVecAtt <Elem>::BomEntVecAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "BomEntry"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   witjAssert (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::BomEntVecAtt <Elem>::~BomEntVecAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::BomEntVecAtt <Elem>::setValue (
         Component *  theComp,
         const Elem * theCVec)
   {
   BomEntry * theBomEnt;

   theBomEnt = theComp->thisBomEntry ();

   witjAssert (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (
      getWitRun                    (),
      theBomEnt->getOperationCName (),
      theBomEnt->getBomIndex       (),
      theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::BomEntVecAtt <Elem>::getValue (
         Component *     theComp,
         VecWoa <Elem> & theDblVecWoa)
   {
   BomEntry * theBomEnt;

   theBomEnt = theComp->thisBomEntry ();

   myGetFuncPtr_ (
      getWitRun                    (),
      theBomEnt->getOperationCName (),
      theBomEnt->getBomIndex       (),
      theDblVecWoa.getCVecAddr     ());
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::BomEntVecAtt <Elem>::isAnInputAtt ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------
// Definition of class template SubVecAtt.
//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::SubVecAtt <Elem>::SubVecAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "Substitute"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   witjAssert (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::SubVecAtt <Elem>::~SubVecAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::SubVecAtt <Elem>::setValue (
         Component *  theComp,
         const Elem * theCVec)
   {
   Substitute * theSub;

   theSub = theComp->thisSubstitute ();

   witjAssert (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (
      getWitRun                 (),
      theSub->getOperationCName (),
      theSub->getBomIndex       (),
      theSub->getSubIndex       (),
      theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::SubVecAtt <Elem>::getValue (
         Component *     theComp,
         VecWoa <Elem> & theDblVecWoa)
   {
   Substitute * theSub;

   theSub = theComp->thisSubstitute ();

   myGetFuncPtr_ (
      getWitRun                 (),
      theSub->getOperationCName (),
      theSub->getBomIndex       (),
      theSub->getSubIndex       (),
      theDblVecWoa.getCVecAddr  ());
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::SubVecAtt <Elem>::isAnInputAtt ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------
// Definition of class template BopEntVecAtt.
//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::BopEntVecAtt <Elem>::BopEntVecAtt (
            AttBldr *    theAttBldr,
            const char * theName,
            SetFuncPtr   theSetFuncPtr,
            GetFuncPtr   theGetFuncPtr):

         Att           (theAttBldr, theName, "BopEntry"),
         mySetFuncPtr_ (theSetFuncPtr),
         myGetFuncPtr_ (theGetFuncPtr)
   {
   witjAssert (theGetFuncPtr != NULL);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::BopEntVecAtt <Elem>::~BopEntVecAtt ()
   {
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::BopEntVecAtt <Elem>::setValue (
         Component *  theComp,
         const Elem * theCVec)
   {
   BopEntry * theBopEnt;

   theBopEnt = theComp->thisBopEntry ();

   witjAssert (mySetFuncPtr_ != NULL);

   mySetFuncPtr_ (
      getWitRun (),
      theBopEnt->getOperationCName (),
      theBopEnt->getBopIndex       (),
      theCVec);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::BopEntVecAtt <Elem>::getValue (
         Component *     theComp,
         VecWoa <Elem> & theDblVecWoa)
   {
   BopEntry * theBopEnt;

   theBopEnt = theComp->thisBopEntry ();

   myGetFuncPtr_ (
      getWitRun (),
      theBopEnt->getOperationCName (),
      theBopEnt->getBopIndex       (),
      theDblVecWoa.getCVecAddr     ());
   }

//------------------------------------------------------------------------------

template <typename Elem>
      bool WitJ::BopEntVecAtt <Elem>::isAnInputAtt ()
   {
   return (mySetFuncPtr_ != NULL);
   }

//------------------------------------------------------------------------------
// Explicit instantiation of the class templates defined in this file.
//------------------------------------------------------------------------------

template class WitJ::GlobalVecAtt <int>;
template class WitJ::  PartVecAtt <int>;
template class WitJ::DemandVecAtt <int>;
template class WitJ::   OpnVecAtt <int>;
template class WitJ::BomEntVecAtt <int>;
template class WitJ::   SubVecAtt <int>;
template class WitJ::BopEntVecAtt <int>;

template class WitJ::GlobalVecAtt <double>;
template class WitJ::  PartVecAtt <double>;
template class WitJ::DemandVecAtt <double>;
template class WitJ::   OpnVecAtt <double>;
template class WitJ::BomEntVecAtt <double>;
template class WitJ::   SubVecAtt <double>;
template class WitJ::BopEntVecAtt <double>;
@


1.4
log
@Attributes.
@
text
@@


1.3
log
@Attributes.
@
text
@d33 4
a36 4
            AttBldr *     theAttBldr,
            const char *  theName,
            WitSetFuncPtr theSetFuncPtr,
            WitGetFuncPtr theGetFuncPtr):
d92 4
a95 4
            AttBldr *     theAttBldr,
            const char *  theName,
            WitSetFuncPtr theSetFuncPtr,
            WitGetFuncPtr theGetFuncPtr):
d161 4
a164 4
            AttBldr *     theAttBldr,
            const char *  theName,
            WitSetFuncPtr theSetFuncPtr,
            WitGetFuncPtr theGetFuncPtr):
d232 4
a235 4
            AttBldr *     theAttBldr,
            const char *  theName,
            WitSetFuncPtr theSetFuncPtr,
            WitGetFuncPtr theGetFuncPtr):
d301 4
a304 4
            AttBldr *     theAttBldr,
            const char *  theName,
            WitSetFuncPtr theSetFuncPtr,
            WitGetFuncPtr theGetFuncPtr):
d372 4
a375 4
            AttBldr *     theAttBldr,
            const char *  theName,
            WitSetFuncPtr theSetFuncPtr,
            WitGetFuncPtr theGetFuncPtr):
d445 4
a448 4
            AttBldr *     theAttBldr,
            const char *  theName,
            WitSetFuncPtr theSetFuncPtr,
            WitGetFuncPtr theGetFuncPtr):
@


1.2
log
@Attributes.
@
text
@d4 1
a4 2
// Contains the definitions of the following class templates, with explicit
// instantiation:
d13 2
d511 1
a511 1
// Explicit instantiation of class template PartVecAtt <Elem>.
d514 7
a520 5
template class WitJ::PartVecAtt <double>;

//------------------------------------------------------------------------------
// Explicit instantiation of class template DemandVecAtt <Elem>.
//------------------------------------------------------------------------------
d522 2
d525 4
@


1.1
log
@Attributes.
@
text
@d7 2
a8 1
//    PartVecAtt   <Elem>
d10 41
d53 31
a83 4
#include <VecAtts.h>
#include    <Part.h>
#include  <Demand.h>
#include  <VecWoa.h>
d226 284
@

