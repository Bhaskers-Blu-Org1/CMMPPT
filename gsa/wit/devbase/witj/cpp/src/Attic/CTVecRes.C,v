head	1.15;
access;
symbols;
locks; strict;
comment	@ * @;


1.15
date	2009.03.26.19.22.22;	author rjw;	state dead;
branches;
next	1.14;

1.14
date	2009.03.17.21.08.00;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.02.14.00.51.28;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.15.17.28.46;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.10.22.16.12.40;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.12.14.58.07;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.11.22.22.45;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.10.22.20.16;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.09.18.59.57;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.08.28.18.30.36;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.08.06.18.48.20;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.08.05.20.46.46;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.04.15.51.50;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.07.18.20.29.15;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.07.18.15.49.40;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Replaced C++ classes CTVecHolder <...> and CTVecRes with CTVecSupply.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File CTVecRes.C.
//
// Contains the implementation of the following classes and templates:
//
//    CTVecRes
//    CTVecHolder <Elem>
//------------------------------------------------------------------------------

#include    <CTVecRes.h>
#include <CTVecHolder.h>

//------------------------------------------------------------------------------
// Definition of class CTVecRes.
//------------------------------------------------------------------------------

WitJ::CTVecRes::CTVecRes (int nPeriodsVal):

      myIntCTVecHolder_ (NULL),
      myDblCTVecHolder_ (NULL),
      providedCTVecs_   (false)
   {
   myIntCTVecHolder_ = new CTVecHolder <int>    (nPeriodsVal);
   myDblCTVecHolder_ = new CTVecHolder <double> (nPeriodsVal);
   }

//------------------------------------------------------------------------------

WitJ::CTVecRes::~CTVecRes ()
   {
   delete myDblCTVecHolder_;
   delete myIntCTVecHolder_;
   }

//------------------------------------------------------------------------------

WitJ::Boolean * WitJ::CTVecRes::provideBoolCTVec ()
   {
   providedCTVecs_ = true;

   return myIntCTVecHolder_->provideCTVec ();
   }

//------------------------------------------------------------------------------

int * WitJ::CTVecRes::provideIntCTVec ()
   {
   providedCTVecs_ = true;

   return myIntCTVecHolder_->provideCTVec ();
   }

//------------------------------------------------------------------------------

double * WitJ::CTVecRes::provideDblCTVec ()
   {
   providedCTVecs_ = true;

   return myDblCTVecHolder_->provideCTVec ();
   }

//------------------------------------------------------------------------------

void WitJ::CTVecRes::reclaimCTVecs ()
   {
   if (! providedCTVecs_)
      return;

   myIntCTVecHolder_->reclaimCTVecs ();
   myDblCTVecHolder_->reclaimCTVecs ();

   providedCTVecs_ = false;
   }

//------------------------------------------------------------------------------
// Definition of class template CTVecHolder <Elem>.
//------------------------------------------------------------------------------

template <typename Elem>
         WitJ::CTVecHolder <Elem>::CTVecHolder (int nPeriodsVal):

      nPeriods_ (nPeriodsVal)
   {
   availCTVecs_.reserve (3);
   inUseCTVecs_.reserve (3);
   }

//------------------------------------------------------------------------------

template <typename Elem>
      WitJ::CTVecHolder <Elem>::~CTVecHolder ()
   {
   Elem * theCTVec;

   reclaimCTVecs ();

   while (! availCTVecs_.empty ())
      {
      theCTVec = availCTVecs_.back ();

      availCTVecs_.pop_back ();

      delete theCTVec;
      }
   }

//------------------------------------------------------------------------------

template <typename Elem>
      Elem * WitJ::CTVecHolder <Elem>::provideCTVec ()
   {
   Elem * theCTVec;

   if (availCTVecs_.empty ())
      availCTVecs_.push_back (new Elem[nPeriods_]);

   theCTVec = availCTVecs_.back ();

   availCTVecs_.pop_back ();

   inUseCTVecs_.push_back (theCTVec);

   return theCTVec;
   }

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::CTVecHolder <Elem>::reclaimCTVecs ()
   {
   Elem * theCTVec;

   while (! inUseCTVecs_.empty ())
      {
      theCTVec = inUseCTVecs_.back ();

      inUseCTVecs_.pop_back ();

      availCTVecs_.push_back (theCTVec);
      }
   }
@


1.14
log
@Removed non-portable assignments between _jint * and int *.
@
text
@@


1.13
log
@Implemented getPipSeq.
@
text
@d19 6
a24 7
        myIntCTVecHolder_ (NULL),
        myDblCTVecHolder_ (NULL),
      myJBoolCTVecHolder_ (NULL)
   {
     myIntCTVecHolder_ = new CTVecHolder <int>      (nPeriodsVal);
     myDblCTVecHolder_ = new CTVecHolder <double>   (nPeriodsVal);
   myJBoolCTVecHolder_ = new CTVecHolder <jboolean> (nPeriodsVal);
d31 2
a32 3
   delete myJBoolCTVecHolder_;
   delete   myDblCTVecHolder_;
   delete   myIntCTVecHolder_;
d39 2
d48 2
d57 2
d64 1
a64 1
jboolean * WitJ::CTVecRes::provideJBoolCTVec ()
d66 2
a67 2
   return myJBoolCTVecHolder_->provideCTVec ();
   }
d69 2
a70 1
//------------------------------------------------------------------------------
d72 1
a72 5
void WitJ::CTVecRes::reclaimCTVecs ()
   {
     myIntCTVecHolder_->reclaimCTVecs ();
     myDblCTVecHolder_->reclaimCTVecs ();
   myJBoolCTVecHolder_->reclaimCTVecs ();
@


1.12
log
@Updated some comments.
@
text
@a18 1
       myBoolCTVecHolder_ (NULL),
d21 1
a21 2
      myJBoolCTVecHolder_ (NULL),
      myJIntCTVecHolder_  (NULL)
a22 1
    myBoolCTVecHolder_ = new CTVecHolder <Boolean>  (nPeriodsVal);
a25 1
    myJIntCTVecHolder_ = new CTVecHolder <jint>     (nPeriodsVal);
a31 1
   delete  myJIntCTVecHolder_;
a34 1
   delete  myBoolCTVecHolder_;
d41 1
a41 1
   return myBoolCTVecHolder_->provideCTVec ();
a66 7
jint * WitJ::CTVecRes::provideJIntCTVec ()
   {
   return myJIntCTVecHolder_->provideCTVec ();
   }

//------------------------------------------------------------------------------

a68 1
    myBoolCTVecHolder_->reclaimCTVecs ();
a71 1
    myJIntCTVecHolder_->reclaimCTVecs ();
@


1.11
log
@Removed implicit conversions from int * to jint *.
@
text
@d4 1
a4 1
// Contains the definition of the following classes and templates:
@


1.10
log
@Revised class CTVecRes.
@
text
@d22 2
a23 1
      myJBoolCTVecHolder_ (NULL)
d29 1
d36 1
d73 7
d86 1
@


1.9
log
@Moves C++ GlobalComp from Session to Problem.
@
text
@a11 3
#include     <Session.h>
#include     <Problem.h>
#include  <GlobalComp.h>
d17 1
a17 1
WitJ::CTVecRes::CTVecRes (Session * theSession):
a18 1
      mySession_          (theSession),
d24 4
a27 4
    myBoolCTVecHolder_ = new CTVecHolder <Boolean>  (theSession);
     myIntCTVecHolder_ = new CTVecHolder <int>      (theSession);
     myDblCTVecHolder_ = new CTVecHolder <double>   (theSession);
   myJBoolCTVecHolder_ = new CTVecHolder <jboolean> (theSession);
d79 1
a79 1
// Definition of class CTVecHolder <Elem>.
d83 1
a83 1
      WitJ::CTVecHolder <Elem>::CTVecHolder (Session * theSession):
d85 1
a85 2
         mySession_ (theSession),
         nPeriods_  (0)
a116 3
   if (nPeriods_ == 0)
       nPeriods_ = mySession_->getProblem ()->getGlobalComp ()->getNPeriods ();

@


1.8
log
@Updated class CTVecRes.
@
text
@d13 1
d123 1
a123 1
       nPeriods_ = mySession_->getGlobalComp ()->getNPeriods ();
@


1.7
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@d122 1
a122 5
      {
      witjAssert (mySession_->getNPeriodsLocked ());

      nPeriods_ = mySession_->getGlobalComp ()->getNPeriods ();
      }
@


1.6
log
@Name change: Global --> GlobalComp.
@
text
@d12 1
a12 1
#include   <ProbCoord.h>
d19 1
a19 1
WitJ::CTVecRes::CTVecRes (ProbCoord * theProbCoord):
d21 1
a21 1
      myProbCoord_        (theProbCoord),
d27 4
a30 4
    myBoolCTVecHolder_ = new CTVecHolder <Boolean>  (theProbCoord);
     myIntCTVecHolder_ = new CTVecHolder <int>      (theProbCoord);
     myDblCTVecHolder_ = new CTVecHolder <double>   (theProbCoord);
   myJBoolCTVecHolder_ = new CTVecHolder <jboolean> (theProbCoord);
d86 1
a86 1
      WitJ::CTVecHolder <Elem>::CTVecHolder (ProbCoord * theProbCoord):
d88 2
a89 2
         myProbCoord_ (theProbCoord),
         nPeriods_    (0)
d123 1
a123 1
      witjAssert (myProbCoord_->getNPeriodsLocked ());
d125 1
a125 1
      nPeriods_ = myProbCoord_->getGlobalComp ()->getNPeriods ();
@


1.5
log
@Classes Global and GlobalCI.
@
text
@d13 1
a13 1
#include      <Global.h>
d125 1
a125 1
      nPeriods_ = myProbCoord_->getGlobal ()->getNPeriods ();
@


1.4
log
@Fixed the segmentation error (probably).
@
text
@d13 1
a13 1
#include  <GlobalComp.h>
d125 1
a125 1
      nPeriods_ = myProbCoord_->getGlobalComp ()->getNPeriods ();
@


1.3
log
@Attributes.
@
text
@a118 17
   if (nPeriods_ == 0)
      {
      witjAssert (myProbCoord_->getNPeriodsLocked ());

      nPeriods_ = myProbCoord_->getGlobalComp ()->getNPeriods ();
      }

   return new Elem[nPeriods_];
   }

//------------------------------------------------------------------------------

#if 0

template <typename Elem>
      Elem * WitJ::CTVecHolder <Elem>::provideCTVec ()
   {
a139 9
#endif

//------------------------------------------------------------------------------

template <typename Elem>
      void WitJ::CTVecHolder <Elem>::reclaimCTVecs ()
   {
   }

a141 2
#if 0

a155 2

#endif
@


1.2
log
@Attributes.
@
text
@d119 17
d157 9
d168 2
d184 2
@


1.1
log
@Attributes.
@
text
@d22 1
d27 1
d40 8
d75 1
@

