head	1.52;
access;
symbols;
locks; strict;
comment	@ * @;


1.52
date	2011.04.01.23.25.03;	author rjw;	state dead;
branches;
next	1.51;

1.51
date	2011.04.01.19.23.34;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2011.03.30.23.23.01;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2011.03.19.00.26.11;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2011.03.15.20.56.45;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2011.03.09.22.35.27;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2011.02.25.16.06.51;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2011.02.16.19.08.31;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2011.02.15.20.18.58;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2011.02.14.21.13.47;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2010.04.16.00.08.31;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2010.04.15.21.33.55;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2009.09.18.18.35.08;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2009.06.05.15.08.21;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2009.04.13.19.51.40;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2009.04.10.21.18.19;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2009.03.26.19.22.23;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2009.03.23.21.51.39;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2009.03.17.22.23.30;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2009.03.17.22.06.15;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2009.03.17.21.08.01;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2009.03.13.16.36.07;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2009.03.12.22.45.19;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2009.02.17.23.46.01;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2009.02.14.00.51.29;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2009.02.10.23.19.29;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2009.02.06.22.40.58;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2009.01.29.22.06.38;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2009.01.21.21.43.22;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2009.01.16.19.08.59;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2009.01.16.18.49.18;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2009.01.16.18.23.38;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.01.15.22.50.31;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.12.24.20.40.54;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.12.24.20.34.22;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.12.24.15.37.34;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.12.24.00.18.55;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.12.22.16.40.53;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.12.22.16.29.12;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.12.15.17.28.48;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.12.19.29.25;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.11.26.18.33.04;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.11.26.14.48.19;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.10.22.16.12.43;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.10.07.18.50.24;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.10.06.22.14.02;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.03.19.06.59;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.01.19.47.12;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.10.01.18.19.15;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.29.18.09.11;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.29.17.34.16;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.29.15.33.05;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.52
log
@JniAsst
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File NativeCall.C.
//
// Contains the implementation of class NativeCall.
//------------------------------------------------------------------------------

#include  <NativeCall.h>
#include <Coordinator.h>
#include     <Problem.h>
#include      <String.h>

//------------------------------------------------------------------------------

WitJ::NativeCall::NativeCall (JNIEnv * theJNIEnv):

      JniClient      (theJNIEnv),
      myCoordinator_ (NULL)
   {
   }

//------------------------------------------------------------------------------

WitJ::NativeCall::~NativeCall ()
   {
   }

//------------------------------------------------------------------------------

int WitJ::NativeCall::getLength (_jarray * theJArr)
   {
   return getJNIEnv ()->GetArrayLength (theJArr);
   }

//------------------------------------------------------------------------------

WitJ::JavaAccObj * WitJ::NativeCall::getJavaAccObj (_jobject * theCppObjRepJObj)
   {
   JavaAccObj * theJavaAccObj;

   theJavaAccObj = JniClient::getJavaAccObj (theCppObjRepJObj);

   if (myCoordinator_ == NULL)
      myCoordinator_ = theJavaAccObj->getCoordinator ();

   return theJavaAccObj;
   }

//------------------------------------------------------------------------------

void WitJ::NativeCall::copyInto (
      Boolean *        theBoolCTVec,
      _jbooleanArray * theJBoolArr)
   {
   void *     theVoidCTVec;
   jboolean * theJBoolCTVec;
   int        theIdx;

   checkJArrayForTVec (theJBoolArr);

   theVoidCTVec  = getCVecFromJArrayCrit (theJBoolArr);

   theJBoolCTVec = static_cast <jboolean *> (theVoidCTVec);

   for (theIdx = getNPeriods () - 1; theIdx >= 0; theIdx --)
      {
      theBoolCTVec[theIdx] = theJBoolCTVec[theIdx];
      }

   releaseJArrayCritDontCopy (theJBoolArr, theVoidCTVec);
   }

//------------------------------------------------------------------------------

void WitJ::NativeCall::copyInto (int * theIntCTVec, _jintArray * theJIntArr)
   {
   void * theVoidCTVec;
   jint * theJIntCTVec;
   int    theIdx;

   checkJArrayForTVec (theJIntArr);

   theVoidCTVec = getCVecFromJArrayCrit (theJIntArr);

   theJIntCTVec = static_cast <jint *> (theVoidCTVec);

   for (theIdx = getNPeriods () - 1; theIdx >= 0; theIdx --)
      {
      theIntCTVec[theIdx] = theJIntCTVec[theIdx];
      }

   releaseJArrayCritDontCopy (theJIntArr, theVoidCTVec);
   }

//------------------------------------------------------------------------------

void WitJ::NativeCall::copyInto (
      double *        theDblCTVec,
      _jdoubleArray * theJDblArr)
   {
   void *    theVoidCTVec;
   jdouble * theJDblCTVec;
   int       theIdx;

   checkJArrayForTVec (theJDblArr);

   theVoidCTVec = getCVecFromJArrayCrit (theJDblArr);

   theJDblCTVec = static_cast <jdouble *> (theVoidCTVec);

   for (theIdx = getNPeriods () - 1; theIdx >= 0; theIdx --)
      {
      theDblCTVec[theIdx] = theJDblCTVec[theIdx];
      }

   releaseJArrayCritDontCopy (theJDblArr, theVoidCTVec);
   }

//------------------------------------------------------------------------------

void WitJ::NativeCall::copyInto (String & theString, _jstring * theJString)
   {
   int theJStringLen;
   int theCStringLen;

   EXCEPTION_ASSERT (theJString != NULL);

   theJStringLen = getJNIEnv ()->GetStringLength    (theJString);
   theCStringLen = getJNIEnv ()->GetStringUTFLength (theJString);

   theString.resize (theCStringLen);

   getJNIEnv ()->
      GetStringUTFRegion (
         theJString,
         0,
         theJStringLen,
         theString.getCString ());

   throwAnyJavaException ();

   theString.getCString ()[theCStringLen] = '\0';
   }

//------------------------------------------------------------------------------

void WitJ::NativeCall::copyBoundVecInto (
      double * &      theDblCTVec,
      _jdoubleArray * theJDblArr)
   {
   if (theJDblArr == NULL)
      {
      theDblCTVec = NULL;
      }
   else
      copyInto (theDblCTVec, theJDblArr);
   }

//------------------------------------------------------------------------------

void WitJ::NativeCall::copyInto (
      _jbooleanArray * theJBoolArr,
      const Boolean *  theBoolCTVec)
   {
   void *     theVoidCTVec;
   jboolean * theJBoolCTVec;
   int        theIdx;

   checkJArrayForTVec (theJBoolArr);

   theVoidCTVec  = getCVecFromJArrayCrit (theJBoolArr);

   theJBoolCTVec = static_cast <jboolean *> (theVoidCTVec);

   for (theIdx = getNPeriods () - 1; theIdx >= 0; theIdx --)
      {
      theJBoolCTVec[theIdx] = theBoolCTVec[theIdx];
      }

   releaseJArrayCritAndCopy (theJBoolArr, theVoidCTVec);
   }

//------------------------------------------------------------------------------

void WitJ::NativeCall::copyInto (
      _jintArray * theJIntArr,
      const int *  theIntCTVec)
   {
   void * theVoidCTVec;
   jint * theJIntCTVec;
   int    theIdx;

   checkJArrayForTVec (theJIntArr);

   theVoidCTVec = getCVecFromJArrayCrit (theJIntArr);

   theJIntCTVec = static_cast <jint *> (theVoidCTVec);

   for (theIdx = getNPeriods () - 1; theIdx >= 0; theIdx --)
      {
      theJIntCTVec[theIdx] = theIntCTVec[theIdx];
      }

   releaseJArrayCritAndCopy (theJIntArr, theVoidCTVec);
   }

//------------------------------------------------------------------------------

void WitJ::NativeCall::copyInto (
      _jdoubleArray * theJDblArr,
      const double *  theDblCTVec)
   {
   void *    theVoidCTVec;
   jdouble * theJDblCTVec;
   int       theIdx;

   checkJArrayForTVec (theJDblArr);

   theVoidCTVec = getCVecFromJArrayCrit (theJDblArr);

   theJDblCTVec = static_cast <jdouble *> (theVoidCTVec);

   for (theIdx = getNPeriods () - 1; theIdx >= 0; theIdx --)
      {
      theJDblCTVec[theIdx] = theDblCTVec[theIdx];
      }

   releaseJArrayCritAndCopy (theJDblArr, theVoidCTVec);
   }

//------------------------------------------------------------------------------

void WitJ::NativeCall::checkJArrayForTVec (_jarray * theJArr)
   {
   EXCEPTION_ASSERT (getJNIEnv ()->GetArrayLength (theJArr) == getNPeriods ());
   }

//------------------------------------------------------------------------------

void * WitJ::NativeCall::getCVecFromJArrayCrit (_jarray * theJArr)
   {
   void * theVoidCVec;

   theVoidCVec = getJNIEnv ()->GetPrimitiveArrayCritical (theJArr, NULL);

   if (theVoidCVec == NULL)
      {
      throwAnyJavaException ();

      EXCEPTION_ASSERT (false);
      }

   return theVoidCVec;
   }

//------------------------------------------------------------------------------

void WitJ::NativeCall::releaseJArrayCritDontCopy (
      _jarray * theJArr,
      void *    theCVec)
   {
   getJNIEnv ()->ReleasePrimitiveArrayCritical (theJArr, theCVec, JNI_ABORT);
   }

//------------------------------------------------------------------------------

void WitJ::NativeCall::releaseJArrayCritAndCopy (
      _jarray * theJArr,
      void *    theCVec)
   {
   getJNIEnv ()->ReleasePrimitiveArrayCritical (theJArr, theCVec, 0);
   }

//------------------------------------------------------------------------------

int WitJ::NativeCall::getNPeriods ()
   {
   EXCEPTION_ASSERT (myCoordinator_ != NULL);

   return myCoordinator_->getProblem ()->getNPeriods ();
   }
@


1.51
log
@Replaced newHeldCString with copyInto.
@
text
@@


1.50
log
@Revised set/get ObjectiveList for ArrayList <String>.
@
text
@d10 1
a10 2

#include      <string>
a16 1
      heldCStrings_  (NULL),
a24 2
   if (heldCStrings_ != NULL)
      releaseCStrings ();
d120 26
a231 52
const char * WitJ::NativeCall::newHeldCString (_jstring * theJString)
   {
   int    theJStringLen;
   int    theCStringLen;
   char * theCString;

   EXCEPTION_ASSERT (theJString != NULL);

   theJStringLen = getJNIEnv ()->GetStringLength    (theJString);
   theCStringLen = getJNIEnv ()->GetStringUTFLength (theJString);

   theCString    = new char[theCStringLen + 1];

   getJNIEnv ()->
      GetStringUTFRegion (
         theJString,
         0,
         theJStringLen,
         theCString);

   throwAnyJavaException ();

   theCString[theCStringLen] = '\0';

   if (heldCStrings_ == NULL)
      heldCStrings_ = new std::list <char *>;

   heldCStrings_->push_back (theCString);

   return theCString;
   }

//------------------------------------------------------------------------------

void WitJ::NativeCall::releaseCStrings ()
   {
   EXCEPTION_ASSERT (heldCStrings_ != NULL);

   while (! heldCStrings_->empty ())
      {
      delete[] heldCStrings_->back ();

      heldCStrings_->pop_back ();
      }

   delete heldCStrings_;

   heldCStrings_ = NULL;
   }

//------------------------------------------------------------------------------

@


1.49
log
@Revised the arguments to eqHeurAlloc.
@
text
@a9 1
#include   <StringVec.h>
a209 50
void WitJ::NativeCall::copyInto (
      StringVec &     theStringVec,
      _jobjectArray * theStringJObjArr)
   {
   int        theArrayLen;
   int        theIdx;
   _jobject * theStringJObj;
   _jstring * theJString;
   int        theJStringLen;
   int        theCStringLen;

   EXCEPTION_ASSERT (theStringJObjArr != NULL);

   theArrayLen = getJNIEnv ()->GetArrayLength (theStringJObjArr);

   theStringVec.resize (theArrayLen);

   for (theIdx = 0; theIdx < theArrayLen; theIdx ++)
      {
      theStringJObj =
         getJNIEnv ()->GetObjectArrayElement (theStringJObjArr, theIdx);

      throwAnyJavaException ();

      EXCEPTION_ASSERT (theStringJObj != NULL);

      theJString       = static_cast <_jstring *> (theStringJObj);

      theJStringLen = getJNIEnv ()->GetStringLength    (theJString);
      theCStringLen = getJNIEnv ()->GetStringUTFLength (theJString);

      theStringVec.resizeAt (theIdx, theCStringLen);

      getJNIEnv ()->
         GetStringUTFRegion (
            theJString,
            0,
            theJStringLen,
            theStringVec[theIdx]);

      throwAnyJavaException ();

      deleteLocalRef (theStringJObj);

      theStringVec[theIdx][theCStringLen] = '\0';
      }
   }

//------------------------------------------------------------------------------

@


1.48
log
@Renamed JavaObjRep to CORJOR.
@
text
@a7 1
#include      <CORJOR.h>
a15 4
_jfieldID * WitJ::NativeCall::ourMyCppObjectAsLongFid_ = NULL;

//------------------------------------------------------------------------------

a33 43
void WitJ::NativeCall::setUpJni (
      JNIEnv *  theJNIEnv,
      _jclass * theJClassForCppObjRep)
   {
   EXCEPTION_ASSERT (ourMyCppObjectAsLongFid_ == NULL);

   ourMyCppObjectAsLongFid_ =
      theJNIEnv->
         GetFieldID (
            theJClassForCppObjRep,
            "myCppObjectAsLong",
            "J");

   EXCEPTION_ASSERT (ourMyCppObjectAsLongFid_ != NULL);
   }

//------------------------------------------------------------------------------

void WitJ::NativeCall::associate (
      _jobject *   theCppObjRepJObj,
      JavaAccObj * theJavaAccObj)
   {
   jlong    theJavaAccObjAsJLong;
   CORJOR * theCORJOR;
   
   EXCEPTION_ASSERT (theCppObjRepJObj != NULL);
   EXCEPTION_ASSERT (theJavaAccObj    != NULL);

   theJavaAccObjAsJLong = reinterpret_cast <jlong> (theJavaAccObj);

   getJNIEnv ()->
      SetLongField (
         theCppObjRepJObj,
         ourMyCppObjectAsLongFid_,
         theJavaAccObjAsJLong);

   theCORJOR = new CORJOR (* this, theCppObjRepJObj);

   theJavaAccObj->acquire (theCORJOR);
   }

//------------------------------------------------------------------------------

d41 1
a41 3
WitJ::JavaAccObj * WitJ::NativeCall::getIndexedObject  (
      _jobjectArray * theCppObjRepJObjArr,
      int             theIdx)
a42 1
   _jobject *   theCppObjRepJObj;
d45 1
a45 34
   EXCEPTION_ASSERT (theCppObjRepJObjArr != NULL);

   theCppObjRepJObj =
      getJNIEnv ()->GetObjectArrayElement (theCppObjRepJObjArr, theIdx);

   throwAnyJavaException ();

   theJavaAccObj = getObject (theCppObjRepJObj);

   deleteLocalRef (theCppObjRepJObj);

   return theJavaAccObj;
   }

//------------------------------------------------------------------------------

WitJ::JavaAccObj * WitJ::NativeCall::getObject (_jobject * theCppObjRepJObj)
   {
   jlong        theJavaAccObjAsJLong;
   JavaAccObj * theJavaAccObj;

   EXCEPTION_ASSERT (theCppObjRepJObj != NULL);

   theJavaAccObjAsJLong =
      getJNIEnv ()->
         GetLongField (
            theCppObjRepJObj,
            ourMyCppObjectAsLongFid_);

   theJavaAccObj = reinterpret_cast <JavaAccObj *> (theJavaAccObjAsJLong);

   EXCEPTION_ASSERT (theJavaAccObj != NULL);

   EXCEPTION_ASSERT (theJavaAccObj->isValid ());
a54 13
void WitJ::NativeCall::nullifyCppObjectPtr (_jobject * theCppObjRepJObj)
   {
   getJNIEnv ()->
      SetLongField (
         theCppObjRepJObj,
         ourMyCppObjectAsLongFid_,
         0);

   throwAnyJavaException ();
   }

//------------------------------------------------------------------------------

a211 55
      std::vector <int> & theIntVec,
      _jintArray *        theJIntArr)
   {
   void * theVoidCVec;
   jint * theJIntCVec;
   int    theLength;
   int    theIdx;

   theVoidCVec = getCVecFromJArrayCrit (theJIntArr);

   theJIntCVec = static_cast <jint *> (theVoidCVec);

   theLength   = getJNIEnv ()->GetArrayLength (theJIntArr);

   theIntVec.resize (theLength);

   for (theIdx = 0; theIdx < theLength; theIdx ++)
      {
      theIntVec[theIdx] = theJIntCVec[theIdx];
      }

   releaseJArrayCritDontCopy (theJIntArr, theVoidCVec);
   }


//------------------------------------------------------------------------------

void WitJ::NativeCall::copyInto (
      std::vector <double> & theDblVec,
      _jdoubleArray *        theJDblArr)
   {
   void *    theVoidCVec;
   jdouble * theJDblCVec;
   int       theLength;
   int       theIdx;

   theVoidCVec = getCVecFromJArrayCrit (theJDblArr);

   theJDblCVec = static_cast <jdouble *> (theVoidCVec);

   theLength   = getJNIEnv ()->GetArrayLength (theJDblArr);

   theDblVec.resize (theLength);

   for (theIdx = 0; theIdx < theLength; theIdx ++)
      {
      theDblVec[theIdx] = theJDblCVec[theIdx];
      }

   releaseJArrayCritDontCopy (theJDblArr, theVoidCVec);
   }

//------------------------------------------------------------------------------

void WitJ::NativeCall::copyInto (
@


1.47
log
@Replaced calls to ctors for Java Integer and Double with valueOf.
@
text
@d8 1
a8 1
#include  <JavaObjRep.h>
d61 2
a62 2
   jlong        theJavaAccObjAsJLong;
   JavaObjRep * theJavaObjRep;
d75 1
a75 1
   theJavaObjRep = new JavaObjRep (* this, theCppObjRepJObj);
d77 1
a77 1
   theJavaAccObj->acquire (theJavaObjRep);
@


1.46
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@d17 1
a17 1
_jfieldID * WitJ::NativeCall::ourFidForMyCppObjectAsLong_ = NULL;
d43 1
a43 1
   EXCEPTION_ASSERT (ourFidForMyCppObjectAsLong_ == NULL);
d45 1
a45 1
   ourFidForMyCppObjectAsLong_ =
d52 1
a52 1
   EXCEPTION_ASSERT (ourFidForMyCppObjectAsLong_ != NULL);
d72 1
a72 1
         ourFidForMyCppObjectAsLong_,
d123 1
a123 1
            ourFidForMyCppObjectAsLong_);
d144 1
a144 1
         ourFidForMyCppObjectAsLong_,
@


1.45
log
@CPLEX
@
text
@d7 5
a11 5
#include   <NativeCall.h>
#include   <JavaObjRep.h>
#include  <Coordinator.h>
#include <GlobalAspect.h>
#include    <StringVec.h>
d13 1
a13 1
#include       <string>
d114 1
d117 13
a129 1
   theJavaAccObj = getObject (getJNIEnv (), theCppObjRepJObj);
d139 1
a139 3
void WitJ::NativeCall::deleteObject (
      JNIEnv *   theJNIEnv,
      _jobject * theCppObjRepJObj)
d141 5
a145 2
   jlong        theJavaAccObjAsJLong;
   JavaAccObj * theJavaAccObj;
d147 1
a147 13
   theJavaAccObjAsJLong =
      theJNIEnv->
         GetLongField (theCppObjRepJObj, ourFidForMyCppObjectAsLong_);

   theJavaAccObj = reinterpret_cast <JavaAccObj *> (theJavaAccObjAsJLong);

   EXCEPTION_ASSERT (theJavaAccObj != NULL);

   theJNIEnv->SetLongField (theCppObjRepJObj, ourFidForMyCppObjectAsLong_, 0);

   delete theJavaAccObj;

   throwAnyJavaException (theJNIEnv);
a446 23
WitJ::JavaAccObj * WitJ::NativeCall::getObject (
      JNIEnv *   theJNIEnv,
      _jobject * theCppObjRepJObj)
   {
   jlong        theJavaAccObjAsJLong;
   JavaAccObj * theJavaAccObj;

   EXCEPTION_ASSERT (theCppObjRepJObj != NULL);

   theJavaAccObjAsJLong =
      theJNIEnv->GetLongField (theCppObjRepJObj, ourFidForMyCppObjectAsLong_);

   theJavaAccObj = reinterpret_cast <JavaAccObj *> (theJavaAccObjAsJLong);

   EXCEPTION_ASSERT (theJavaAccObj != NULL);

   EXCEPTION_ASSERT (theJavaAccObj->isValid ());

   return theJavaAccObj;
   }

//------------------------------------------------------------------------------

d512 1
a512 1
   return myCoordinator_->getGlobalAspect ()->getNPeriods ();
@


1.44
log
@CPLEX
@
text
@a435 1
      {
a436 1
      }
@


1.43
log
@CPLEX
@
text
@d23 3
a25 3
      JniClient       (theJNIEnv),
      storedCStrings_ (NULL),
      myCoordinator_  (NULL)
d33 1
a33 1
   if (storedCStrings_ != NULL)
d411 1
a411 1
const char * WitJ::NativeCall::makeCString (_jstring * theJString)
d435 1
a435 1
   if (storedCStrings_ == NULL)
d437 1
a437 1
      storedCStrings_ = new std::list <char *>;
d440 1
a440 1
   storedCStrings_->push_back (theCString);
d472 1
a472 1
   EXCEPTION_ASSERT (storedCStrings_ != NULL);
d474 1
a474 1
   while (! storedCStrings_->empty ())
d476 1
a476 1
      delete[] storedCStrings_->back ();
d478 1
a478 1
      storedCStrings_->pop_back ();
d481 1
a481 1
   delete storedCStrings_;
d483 1
a483 1
   storedCStrings_ = NULL;
@


1.42
log
@Multi-Obj Mode
@
text
@d39 3
a41 1
void WitJ::NativeCall::setUpJni (_jclass * theJClassForCppObjRep)
d46 1
a46 1
      getJNIEnv ()->
a56 29
_jmethodID * WitJ::NativeCall::findJMethodID (
      const char * theClassName,
      const char * theMethName,
      const char * theMethDesc)
   {
   std::string  fullClassName;
   _jclass *    theJClass;
   _jmethodID * theJMethodID;

   fullClassName  = "com/ibm/witj/";

   fullClassName += theClassName;

   theJClass      = getJNIEnv ()->FindClass (fullClassName.c_str ());

   throwAnyJavaException ();

   theJMethodID =
      getJNIEnv ()->GetMethodID (theJClass, theMethName, theMethDesc);

   throwAnyJavaException ();

   deleteLocalRef (theJClass);

   return theJMethodID;
   }

//------------------------------------------------------------------------------

@


1.41
log
@Multi-Obj Mode
@
text
@a23 1
      storedJStrings_ (NULL),
d392 1
a392 1
   int        theArrayLength;
d396 2
a397 2
   int        theJStringLength;
   int        theCStringLength;
d401 1
a401 1
   theArrayLength = getJNIEnv ()->GetArrayLength (theStringJObjArr);
d403 1
a403 1
   theStringVec.resize (theArrayLength);
d405 1
a405 1
   for (theIdx = 0; theIdx < theArrayLength; theIdx ++)
d416 2
a417 2
      theJStringLength = getJNIEnv ()->GetStringLength    (theJString);
      theCStringLength = getJNIEnv ()->GetStringUTFLength (theJString);
d419 1
a419 1
      theStringVec.resizeAt (theIdx, theCStringLength);
d425 1
a425 1
            theJStringLength,
d432 1
a432 1
      theStringVec[theIdx][theCStringLength] = '\0';
d440 3
a442 1
   const char * theCString;
d446 11
a456 1
   theCString = getJNIEnv ()->GetStringUTFChars (theJString, NULL);
d460 3
a462 1
   if (storedJStrings_ == NULL)
d464 1
a464 2
      storedJStrings_ = new std::list <_jstring *>;
      storedCStrings_ = new std::list <const char *>;
a466 1
   storedJStrings_->push_back (theJString);
a498 3
   _jstring *   theJString;
   const char * theCString;

d503 1
a503 2
      theJString = storedJStrings_->back ();
      theCString = storedCStrings_->back ();
a504 1
      storedJStrings_->pop_back ();
a505 2

      getJNIEnv ()->ReleaseStringUTFChars (theJString, theCString);
a508 1
   delete storedJStrings_;
a510 1
   storedJStrings_ = NULL;
@


1.40
log
@Implemented synchronized WIT-J/C++/JNI set-up.
@
text
@d11 1
d389 50
@


1.39
log
@Changed the name each native method that creates a C++ object to
   createCppObject.
@
text
@d12 6
d39 1
a39 3
void WitJ::NativeCall::findJFieldIDs (
      JNIEnv *  theJNIEnv,
      _jclass * theJClassForCppObjRep)
d44 1
a44 1
      theJNIEnv->
d55 29
a510 4

//------------------------------------------------------------------------------

_jfieldID * WitJ::NativeCall::ourFidForMyCppObjectAsLong_ = NULL;
@


1.38
log
@Detection of  non-UFT-8 strings.
@
text
@d37 1
a37 1
   EXCEPTION_ASSERT (ourFidForMyCppJavaAccObjAsLong_ == NULL);
d39 1
a39 1
   ourFidForMyCppJavaAccObjAsLong_ =
d43 1
a43 1
            "myCppJavaAccObjAsLong",
d46 1
a46 1
   EXCEPTION_ASSERT (ourFidForMyCppJavaAccObjAsLong_ != NULL);
d66 1
a66 1
         ourFidForMyCppJavaAccObjAsLong_,
d129 1
a129 1
         GetLongField (theCppObjRepJObj, ourFidForMyCppJavaAccObjAsLong_);
d135 1
a135 2
   theJNIEnv->
      SetLongField (theCppObjRepJObj, ourFidForMyCppJavaAccObjAsLong_, 0);
d389 1
a389 2
      theJNIEnv->
         GetLongField (theCppObjRepJObj, ourFidForMyCppJavaAccObjAsLong_);
d481 1
a481 1
_jfieldID * WitJ::NativeCall::ourFidForMyCppJavaAccObjAsLong_ = NULL;
@


1.37
log
@Added the UTF-8 test.
@
text
@a357 1
   jboolean     isCopy;
d362 1
a362 1
   theCString = getJNIEnv ()->GetStringUTFChars (theJString, & isCopy);
@


1.36
log
@Replaced C++ classes CTVecHolder <...> and CTVecRes with CTVecSupply.
@
text
@d358 1
d363 1
a363 1
   theCString = getJNIEnv ()->GetStringUTFChars (theJString, NULL);
@


1.35
log
@Added theComp.setValueToScalar (...) methods.
@
text
@a8 2
#include     <CTVecRes.h>
#include  <CTVecHolder.h>
a26 4
   if (myCoordinator_ != NULL)
      if (myCoordinator_->hasCTVecRes ())
         getCTVecRes ()->reclaimCTVecs ();

d145 2
a146 11
const double * WitJ::NativeCall::makeBoundVec (_jdoubleArray * theJDblArr)
   {
   if (theJDblArr == NULL)
      return NULL;
   else
      return makeCTVec (theJDblArr);
   }

//------------------------------------------------------------------------------

const WitJ::Boolean * WitJ::NativeCall::makeCTVec (
a150 1
   Boolean *  theBoolCTVec;
a158 2
   theBoolCTVec  = getCTVecRes ()->provideIntCTVec ();

a164 2

   return theBoolCTVec;
d169 1
a169 1
const int * WitJ::NativeCall::makeCTVec (_jintArray * theJIntArr)
a172 1
   int *  theIntCTVec;
a180 2
   theIntCTVec  = getCTVecRes ()->provideIntCTVec ();

a186 2

   return theIntCTVec;
d191 3
a193 1
const double * WitJ::NativeCall::makeCTVec (_jdoubleArray * theJDblArr)
a196 1
   double *  theDblCTVec;
a204 2
   theDblCTVec  = getCTVecRes ()->provideDblCTVec ();

a210 2

   return theDblCTVec;
d215 3
a217 1
const WitJ::Boolean * WitJ::NativeCall::makeCTVecFromScalar (jboolean theJBool)
d219 1
a219 6
   Boolean * theBoolCTVec;
   int       theIdx;

   theBoolCTVec = getCTVecRes ()->provideBoolCTVec ();

   for (theIdx = getNPeriods () - 1; theIdx >= 0; theIdx --)
d221 1
a221 1
      theBoolCTVec[theIdx] = theJBool;
d223 2
a224 36

   return theBoolCTVec;
   }

//------------------------------------------------------------------------------

const int * WitJ::NativeCall::makeCTVecFromScalar (jint theJInt)
   {
   int * theIntCTVec;
   int   theIdx;

   theIntCTVec = getCTVecRes ()->provideIntCTVec ();

   for (theIdx = getNPeriods () - 1; theIdx >= 0; theIdx --)
      {
      theIntCTVec[theIdx] = theJInt;
      }

   return theIntCTVec;
   }

//------------------------------------------------------------------------------

const double * WitJ::NativeCall::makeCTVecFromScalar (jdouble theJDbl)
   {
   double * theDblCTVec;
   int      theIdx;

   theDblCTVec = getCTVecRes ()->provideDblCTVec ();

   for (theIdx = getNPeriods () - 1; theIdx >= 0; theIdx --)
      {
      theDblCTVec[theIdx] = theJDbl;
      }

   return theDblCTVec;
d253 3
a255 1
void WitJ::NativeCall::copyInto (_jintArray * theJIntArr, int * theIntCTVec)
d279 1
a279 1
      double *        theDblCTVec)
a482 9
WitJ::CTVecRes * WitJ::NativeCall::getCTVecRes ()
   {
   EXCEPTION_ASSERT (myCoordinator_ != NULL);

   return myCoordinator_->getCTVecRes ();
   }

//------------------------------------------------------------------------------

@


1.34
log
@Trivial update.
@
text
@d156 1
a156 1
      return makeDblCTVec (theJDblArr);
d161 1
a161 1
const WitJ::Boolean * WitJ::NativeCall::makeBoolCTVec (
d189 1
a189 1
const int * WitJ::NativeCall::makeIntCTVec (_jintArray * theJIntArr)
d216 1
a216 1
const double * WitJ::NativeCall::makeDblCTVec (_jdoubleArray * theJDblArr)
d243 51
@


1.33
log
@Removed non-portable assignments between _jdouble * and double *.
@
text
@d403 1
a403 1
      GetLongField (theCppObjRepJObj, ourFidForMyCppJavaAccObjAsLong_);
@


1.32
log
@Removed non-portable assignments between _jint * and int *.
@
text
@d171 1
a171 1
   theVoidCTVec  = getPrimitiveArrayCritical (theJBoolArr);
d182 1
a182 2
   getJNIEnv ()->
      ReleasePrimitiveArrayCritical (theJBoolArr, theVoidCTVec, JNI_ABORT);
d198 1
a198 1
   theVoidCTVec = getPrimitiveArrayCritical (theJIntArr);
d209 1
a209 2
   getJNIEnv ()->
      ReleasePrimitiveArrayCritical (theJIntArr, theVoidCTVec, JNI_ABORT);
d218 4
a221 1
   double * theDblCTVec;
d225 1
a225 1
   theDblCTVec = getCTVecRes ()->provideDblCTVec ();
d227 1
a227 6
   getJNIEnv ()->
      GetDoubleArrayRegion (
         theJDblArr,
         0,
         getNPeriods (),
         theDblCTVec);
d229 8
a236 1
   throwAnyJavaException ();
d253 1
a253 1
   theVoidCTVec  = getPrimitiveArrayCritical (theJBoolArr);
d262 1
a262 1
   getJNIEnv ()->ReleasePrimitiveArrayCritical (theJBoolArr, theVoidCTVec, 0);
d275 1
a275 1
   theVoidCTVec = getPrimitiveArrayCritical (theJIntArr);
d284 1
a284 1
   getJNIEnv ()->ReleasePrimitiveArrayCritical (theJIntArr, theVoidCTVec, 0);
d293 4
d299 3
a301 6
   getJNIEnv ()->
      SetDoubleArrayRegion (
         theJDblArr,
         0,
         getNPeriods (),
         theDblCTVec);
d303 6
a308 1
   throwAnyJavaException ();
d322 1
a322 1
   theVoidCVec = getPrimitiveArrayCritical (theJIntArr);
d335 1
a335 2
   getJNIEnv ()->
      ReleasePrimitiveArrayCritical (theJIntArr, theVoidCVec, JNI_ABORT);
d338 1
d345 6
a350 1
   int theLength;
d352 3
a354 1
   theLength = getJNIEnv ()->GetArrayLength (theJDblArr);
d358 4
a361 2
   getJNIEnv ()->
      GetDoubleArrayRegion (theJDblArr, 0, theLength, & theDblVec[0]);
d363 1
a363 1
   throwAnyJavaException ();
d450 1
a450 1
void * WitJ::NativeCall::getPrimitiveArrayCritical (_jarray * theJArr)
d468 18
@


1.31
log
@Changed name of GlobalComponent classes to GlobalAspect.
@
text
@a18 1
      acquiredCTVecs_ (false),
d29 3
a31 2
   if (acquiredCTVecs_)
       getCTVecRes ()->reclaimCTVecs ();
d164 1
a164 1
   int        nPeriodsVal;
d169 1
a169 7
   EXCEPTION_ASSERT (myCoordinator_ != NULL);

   nPeriodsVal = getNPeriods ();

   EXCEPTION_ASSERT (getJNIEnv ()->GetArrayLength (theJBoolArr) == nPeriodsVal);

   acquiredCTVecs_ = true;
d171 1
a171 1
   theJBoolCTVec   = getCTVecRes ()->provideJBoolCTVec ();
d173 1
a173 8
   getJNIEnv ()->
      GetBooleanArrayRegion (
         theJBoolArr,
         0,
         nPeriodsVal,
         theJBoolCTVec);

   throwAnyJavaException ();
d175 1
a175 1
   theBoolCTVec = getCTVecRes ()->provideIntCTVec ();
d177 1
a177 1
   for (theIdx = 0; theIdx < nPeriodsVal; theIdx ++)
d182 3
d192 4
a195 2
   int   nPeriodsVal;
   int * theIntCTVec;
d197 1
a197 1
   EXCEPTION_ASSERT (myCoordinator_ != NULL);
d199 1
a199 1
   nPeriodsVal     = getNPeriods ();
d201 1
a201 1
   EXCEPTION_ASSERT (getJNIEnv ()->GetArrayLength (theJIntArr) == nPeriodsVal);
d203 1
a203 1
   acquiredCTVecs_ = true;
d205 4
a208 1
   theIntCTVec     = getCTVecRes ()->provideIntCTVec ();
d211 1
a211 7
      GetIntArrayRegion (
         theJIntArr,
         0,
         nPeriodsVal,
         theIntCTVec);

   throwAnyJavaException ();
a219 1
   int      nPeriodsVal;
d222 1
a222 7
   EXCEPTION_ASSERT (myCoordinator_ != NULL);

   nPeriodsVal     = getNPeriods ();

   EXCEPTION_ASSERT (getJNIEnv ()->GetArrayLength (theJDblArr) == nPeriodsVal);

   acquiredCTVecs_ = true;
d224 1
a224 1
   theDblCTVec     = getCTVecRes ()->provideDblCTVec ();
d230 1
a230 1
         nPeriodsVal,
d244 1
a245 1
   int        nPeriodsVal;
d248 1
a248 3
   EXCEPTION_ASSERT (myCoordinator_ != NULL);

   acquiredCTVecs_ = true;
d250 1
a250 1
   theJBoolCTVec   = getCTVecRes ()->provideJBoolCTVec ();
d252 1
a252 1
   nPeriodsVal     = getNPeriods ();
d254 1
a254 1
   for (theIdx = 0; theIdx < nPeriodsVal; theIdx ++)
d259 1
a259 10
   EXCEPTION_ASSERT (getJNIEnv ()->GetArrayLength (theJBoolArr) == nPeriodsVal);

   getJNIEnv ()->
      SetBooleanArrayRegion (
         theJBoolArr,
         0,
         nPeriodsVal,
         theJBoolCTVec);

   throwAnyJavaException ();
d266 3
a268 1
   int nPeriodsVal;
d270 1
a270 1
   EXCEPTION_ASSERT (myCoordinator_ != NULL);
d272 1
a272 1
   acquiredCTVecs_ = true;
d274 1
a274 1
   nPeriodsVal     = getNPeriods ();
d276 4
a279 1
   EXCEPTION_ASSERT (getJNIEnv ()->GetArrayLength (theJIntArr) == nPeriodsVal);
d281 1
a281 8
   getJNIEnv ()->
      SetIntArrayRegion (
         theJIntArr,
         0,
         nPeriodsVal,
         theIntCTVec);

   throwAnyJavaException ();
d290 1
a290 7
   int nPeriodsVal;

   EXCEPTION_ASSERT (myCoordinator_ != NULL);

   nPeriodsVal = getNPeriods ();

   EXCEPTION_ASSERT (getJNIEnv ()->GetArrayLength (theJDblArr) == nPeriodsVal);
d296 1
a296 1
         nPeriodsVal,
d308 8
a315 1
   int theLength;
d317 1
a317 1
   theLength = getJNIEnv ()->GetArrayLength (theJIntArr);
d321 4
a324 1
   getJNIEnv ()->GetIntArrayRegion (theJIntArr, 0, theLength, & theIntVec[0]);
d326 2
a327 1
   throwAnyJavaException ();
d425 25
@


1.30
log
@Changed name of GlobalElement classes to GlobalComponent.
@
text
@d7 6
a12 6
#include      <NativeCall.h>
#include      <JavaObjRep.h>
#include        <CTVecRes.h>
#include     <CTVecHolder.h>
#include     <Coordinator.h>
#include <GlobalComponent.h>
d455 1
a455 1
   return myCoordinator_->getGlobalComponent ()->getNPeriods ();
@


1.29
log
@Removed the ShipTriple classes.
@
text
@d7 6
a12 6
#include    <NativeCall.h>
#include    <JavaObjRep.h>
#include      <CTVecRes.h>
#include   <CTVecHolder.h>
#include   <Coordinator.h>
#include <GlobalElement.h>
d455 1
a455 1
   return myCoordinator_->getGlobalElement ()->getNPeriods ();
@


1.28
log
@Implemented getPipSeq.
@
text
@d341 35
@


1.27
log
@Replaced the AllocTarget classes with ShipTriple classes.
@
text
@d186 2
d202 2
a203 4
   int    nPeriodsVal;
   jint * theJIntCTVec;
   int *  theIntCTVec;
   int    theIdx;
d207 1
a207 1
   nPeriodsVal = getNPeriods ();
d213 1
a213 1
   theJIntCTVec    = getCTVecRes ()->provideJIntCTVec ();
d220 1
a220 1
         theJIntCTVec);
d222 1
a222 6
   theIntCTVec = getCTVecRes ()->provideIntCTVec ();

   for (theIdx = 0; theIdx < nPeriodsVal; theIdx ++)
      {
      theIntCTVec[theIdx] = theJIntCTVec[theIdx];
      }
d236 1
a236 1
   nPeriodsVal = getNPeriods ();
d251 2
d287 2
d293 1
a293 3
void WitJ::NativeCall::copyInto (
      _jintArray * theJIntArr,
      const int *  theIntCTVec)
d295 1
a295 3
   jint * theJIntCTVec;
   int    nPeriodsVal;
   int    theIdx;
a300 2
   theJIntCTVec    = getCTVecRes ()->provideJIntCTVec ();

a302 5
   for (theIdx = 0; theIdx < nPeriodsVal; theIdx ++)
      {
      theJIntCTVec[theIdx] = theIntCTVec[theIdx];
      }

d310 3
a312 1
         theJIntCTVec);
a334 11
   }

//------------------------------------------------------------------------------

_jdoubleArray * WitJ::NativeCall::makeJDblArray (
      double * theDblCVec,
      int      theLength)
   {
   _jdoubleArray * theJDblArr;

   theJDblArr = getJNIEnv ()->NewDoubleArray (theLength);
a336 9

   getJNIEnv ()->
      SetDoubleArrayRegion (
         theJDblArr,
         0,
         theLength,
         theDblCVec);

   return theJDblArr;
@


1.26
log
@Problem.eqHeurAlloc.
@
text
@d349 22
@


1.25
log
@Implemented Java class CppGateway.
@
text
@a12 1
#include        <VecWoa.h>
d82 30
@


1.24
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d8 1
d58 1
a58 1
void WitJ::NativeCall::transferTo (
d62 5
a66 3
   jlong theJavaAccObjAsJLong;

   EXCEPTION_ASSERT (theJavaAccObj != NULL);
d75 4
@


1.23
log
@ProbMgr classes.
@
text
@d10 1
a10 1
#include       <ProbMgr.h>
d22 1
a22 1
      myProbMgr_      (NULL)
d82 2
a83 2
   if (myProbMgr_ == NULL)
      myProbMgr_ = theJavaAccObj->getProbMgr ();
d133 1
a133 1
   EXCEPTION_ASSERT (myProbMgr_ != NULL);
d169 1
a169 1
   EXCEPTION_ASSERT (myProbMgr_ != NULL);
d203 1
a203 1
   EXCEPTION_ASSERT (myProbMgr_ != NULL);
d233 1
a233 1
   EXCEPTION_ASSERT (myProbMgr_ != NULL);
d266 1
a266 1
   EXCEPTION_ASSERT (myProbMgr_ != NULL);
d297 1
a297 1
   EXCEPTION_ASSERT (myProbMgr_ != NULL);
d390 1
a390 1
   EXCEPTION_ASSERT (myProbMgr_ != NULL);
d392 1
a392 1
   return myProbMgr_->getGlobalElement ()->getNPeriods ();
d399 1
a399 1
   EXCEPTION_ASSERT (myProbMgr_ != NULL);
d401 1
a401 1
   return myProbMgr_->getCTVecRes ();
@


1.22
log
@ProbMgr classes.
@
text
@a9 1
#include       <Problem.h>
d401 1
a401 1
   return myProbMgr_->getProblem ()->getCTVecRes ();
@


1.21
log
@ProbMgr classes.
@
text
@d393 1
a393 1
   return myProbMgr_->getProblem ()->getGlobalElement ()->getNPeriods ();
@


1.20
log
@Continued implementation of ProbCtr classes.
@
text
@d11 1
d23 1
a23 1
      myProblem_      (NULL)
d83 2
a84 13
   if (myProblem_ == NULL)
      myProblem_ = theJavaAccObj->getProblem ();

   return theJavaAccObj;
   }

//------------------------------------------------------------------------------

WitJ::JavaAccObj * WitJ::NativeCall::getObjectTmp (_jobject * theCppObjRepJObj)
   {
   JavaAccObj * theJavaAccObj;

   theJavaAccObj = getObject (getJNIEnv (), theCppObjRepJObj);
d134 1
a134 1
   EXCEPTION_ASSERT (myProblem_ != NULL);
d170 1
a170 1
   EXCEPTION_ASSERT (myProblem_ != NULL);
d204 1
a204 1
   EXCEPTION_ASSERT (myProblem_ != NULL);
d234 1
a234 1
   EXCEPTION_ASSERT (myProblem_ != NULL);
d267 1
a267 1
   EXCEPTION_ASSERT (myProblem_ != NULL);
d298 1
a298 1
   EXCEPTION_ASSERT (myProblem_ != NULL);
d391 1
a391 1
   EXCEPTION_ASSERT (myProblem_ != NULL);
d393 1
a393 1
   return myProblem_->getGlobalElement ()->getNPeriods ();
d400 1
a400 1
   EXCEPTION_ASSERT (myProblem_ != NULL);
d402 1
a402 1
   return myProblem_->getCTVecRes ();
@


1.19
log
@Replaced abortForMemory with throwAnyJavaException.
@
text
@d90 11
@


1.18
log
@Added code to handle memory errors in makeJString.
@
text
@d321 1
a321 2
   if (theCString == NULL)
      abortForMemory ("GetStringUTFChars");
@


1.17
log
@Minor revision.
@
text
@d110 1
a110 1
   throwOnJavaException (theJNIEnv);
@


1.16
log
@Added code to handle Java exceptions raised during the execution of JNI
   functions.
@
text
@a34 2

   abortOnJavaException ();
d110 1
a110 1
   abortOnJavaException (theJNIEnv);
@


1.15
log
@Turned some ABORTING_ASSERTs into EXCEPTION_ASSERTs.
@
text
@d36 1
a36 1
   checkForJniException ();
d112 1
a112 1
   checkForJniException (theJNIEnv);
@


1.14
log
@Implemented EXCEPTION_ASSERT and ABORTING_ASSERT.
@
text
@d45 1
a45 1
   ABORTING_ASSERT (ourFidForMyCppJavaAccObjAsLong_ == NULL);
d54 1
a54 1
   ABORTING_ASSERT (ourFidForMyCppJavaAccObjAsLong_ != NULL);
d65 1
a65 1
   ABORTING_ASSERT (theJavaAccObj != NULL);
d105 1
a105 1
   ABORTING_ASSERT (theJavaAccObj != NULL);
d135 1
a135 1
   ABORTING_ASSERT (myProblem_ != NULL);
d139 1
a139 1
   ABORTING_ASSERT (getJNIEnv ()->GetArrayLength (theJBoolArr) == nPeriodsVal);
d171 1
a171 1
   ABORTING_ASSERT (myProblem_ != NULL);
d175 1
a175 1
   ABORTING_ASSERT (getJNIEnv ()->GetArrayLength (theJIntArr) == nPeriodsVal);
d205 1
a205 1
   ABORTING_ASSERT (myProblem_ != NULL);
d209 1
a209 1
   ABORTING_ASSERT (getJNIEnv ()->GetArrayLength (theJDblArr) == nPeriodsVal);
d235 1
a235 1
   ABORTING_ASSERT (myProblem_ != NULL);
d248 1
a248 1
   ABORTING_ASSERT (getJNIEnv ()->GetArrayLength (theJBoolArr) == nPeriodsVal);
d268 1
a268 1
   ABORTING_ASSERT (myProblem_ != NULL);
d281 1
a281 1
   ABORTING_ASSERT (getJNIEnv ()->GetArrayLength (theJIntArr) == nPeriodsVal);
d299 1
a299 1
   ABORTING_ASSERT (myProblem_ != NULL);
d303 1
a303 1
   ABORTING_ASSERT (getJNIEnv ()->GetArrayLength (theJDblArr) == nPeriodsVal);
d319 1
a319 1
   ABORTING_ASSERT (theJString != NULL);
d347 1
a347 1
   ABORTING_ASSERT (theCppObjRepJObj != NULL);
d355 1
a355 1
   ABORTING_ASSERT (theJavaAccObj != NULL);
d357 1
a357 1
   ABORTING_ASSERT (theJavaAccObj->isValid ());
d369 1
a369 1
   ABORTING_ASSERT (storedCStrings_ != NULL);
d393 1
a393 1
   ABORTING_ASSERT (myProblem_ != NULL);
d402 1
a402 1
   ABORTING_ASSERT (myProblem_ != NULL);
@


1.13
log
@Updated some comments.
@
text
@d45 1
a45 1
   WITJ_ASSERT (ourFidForMyCppJavaAccObjAsLong_ == NULL);
d54 1
a54 1
   WITJ_ASSERT (ourFidForMyCppJavaAccObjAsLong_ != NULL);
d65 1
a65 1
   WITJ_ASSERT (theJavaAccObj != NULL);
d105 1
a105 1
   WITJ_ASSERT (theJavaAccObj != NULL);
d135 1
a135 1
   WITJ_ASSERT (myProblem_ != NULL);
d139 1
a139 1
   WITJ_ASSERT (getJNIEnv ()->GetArrayLength (theJBoolArr) == nPeriodsVal);
d171 1
a171 1
   WITJ_ASSERT (myProblem_ != NULL);
d175 1
a175 1
   WITJ_ASSERT (getJNIEnv ()->GetArrayLength (theJIntArr) == nPeriodsVal);
d205 1
a205 1
   WITJ_ASSERT (myProblem_ != NULL);
d209 1
a209 1
   WITJ_ASSERT (getJNIEnv ()->GetArrayLength (theJDblArr) == nPeriodsVal);
d235 1
a235 1
   WITJ_ASSERT (myProblem_ != NULL);
d248 1
a248 1
   WITJ_ASSERT (getJNIEnv ()->GetArrayLength (theJBoolArr) == nPeriodsVal);
d268 1
a268 1
   WITJ_ASSERT (myProblem_ != NULL);
d281 1
a281 1
   WITJ_ASSERT (getJNIEnv ()->GetArrayLength (theJIntArr) == nPeriodsVal);
d299 1
a299 1
   WITJ_ASSERT (myProblem_ != NULL);
d303 1
a303 1
   WITJ_ASSERT (getJNIEnv ()->GetArrayLength (theJDblArr) == nPeriodsVal);
d319 1
a319 1
   WITJ_ASSERT (theJString != NULL);
d347 1
a347 1
   WITJ_ASSERT (theCppObjRepJObj != NULL);
d355 1
a355 1
   WITJ_ASSERT (theJavaAccObj != NULL);
d357 1
a357 1
   WITJ_ASSERT (theJavaAccObj->isValid ());
d369 1
a369 1
   WITJ_ASSERT (storedCStrings_ != NULL);
d393 1
a393 1
   WITJ_ASSERT (myProblem_ != NULL);
d402 1
a402 1
   WITJ_ASSERT (myProblem_ != NULL);
@


1.12
log
@Changed to all upper case for the names of macros.
@
text
@d4 1
a4 1
// Contains the definition of class NativeCall.
@


1.11
log
@Removed C++ class Session.
@
text
@d45 1
a45 1
   witjAssert (ourFidForMyCppJavaAccObjAsLong_ == NULL);
d54 1
a54 1
   witjAssert (ourFidForMyCppJavaAccObjAsLong_ != NULL);
d65 1
a65 1
   witjAssert (theJavaAccObj != NULL);
d105 1
a105 1
   witjAssert (theJavaAccObj != NULL);
d135 1
a135 1
   witjAssert (myProblem_ != NULL);
d139 1
a139 1
   witjAssert (getJNIEnv ()->GetArrayLength (theJBoolArr) == nPeriodsVal);
d171 1
a171 1
   witjAssert (myProblem_ != NULL);
d175 1
a175 1
   witjAssert (getJNIEnv ()->GetArrayLength (theJIntArr) == nPeriodsVal);
d205 1
a205 1
   witjAssert (myProblem_ != NULL);
d209 1
a209 1
   witjAssert (getJNIEnv ()->GetArrayLength (theJDblArr) == nPeriodsVal);
d235 1
a235 1
   witjAssert (myProblem_ != NULL);
d248 1
a248 1
   witjAssert (getJNIEnv ()->GetArrayLength (theJBoolArr) == nPeriodsVal);
d268 1
a268 1
   witjAssert (myProblem_ != NULL);
d281 1
a281 1
   witjAssert (getJNIEnv ()->GetArrayLength (theJIntArr) == nPeriodsVal);
d299 1
a299 1
   witjAssert (myProblem_ != NULL);
d303 1
a303 1
   witjAssert (getJNIEnv ()->GetArrayLength (theJDblArr) == nPeriodsVal);
d319 1
a319 1
   witjAssert (theJString != NULL);
d347 1
a347 1
   witjAssert (theCppObjRepJObj != NULL);
d355 1
a355 1
   witjAssert (theJavaAccObj != NULL);
d357 1
a357 1
   witjAssert (theJavaAccObj->isValid ());
d369 1
a369 1
   witjAssert (storedCStrings_ != NULL);
d393 1
a393 1
   witjAssert (myProblem_ != NULL);
d402 1
a402 1
   witjAssert (myProblem_ != NULL);
@


1.10
log
@Removed Java class SessionCOR.
@
text
@a9 1
#include       <Session.h>
d22 1
a22 1
      mySession_      (NULL)
d84 2
a85 2
   if (mySession_ == NULL)
      mySession_ = theJavaAccObj->getSession ();
a97 1
   Session *    theSessionToDel;
a109 5
   theSessionToDel = NULL;

   if (theJavaAccObj->isProblem ())
      theSessionToDel = theJavaAccObj->getSession ();

a111 3
   if (theSessionToDel != NULL)
      delete theSessionToDel;

d135 1
a135 1
   witjAssert (mySession_ != NULL);
d171 1
a171 1
   witjAssert (mySession_ != NULL);
d205 1
a205 1
   witjAssert (mySession_ != NULL);
d235 1
a235 1
   witjAssert (mySession_ != NULL);
d268 1
a268 1
   witjAssert (mySession_ != NULL);
d299 1
a299 1
   witjAssert (mySession_ != NULL);
d393 1
a393 1
   witjAssert (mySession_ != NULL);
d395 1
a395 1
   return mySession_->getProblem ()->getGlobalElement ()->getNPeriods ();
d402 1
a402 1
   witjAssert (mySession_ != NULL);
d404 1
a404 1
   return mySession_->getProblem ()->getCTVecRes ();
@


1.9
log
@Removed implicit conversions from int * to jint *.
@
text
@d99 1
d112 5
d119 3
@


1.8
log
@Name change.
@
text
@d167 4
a170 2
   int   nPeriodsVal;
   int * theIntCTVec;
d180 1
a180 1
   theIntCTVec     = getCTVecRes ()->provideIntCTVec ();
d187 8
a194 1
         theIntCTVec);
d230 1
a230 1
      Boolean *        theBoolCTVec)
d261 3
a263 1
void WitJ::NativeCall::copyInto (_jintArray * theJIntArr, int * theIntCTVec)
d265 3
a267 1
   int nPeriodsVal;
d271 10
a280 1
   nPeriodsVal = getNPeriods ();
d289 1
a289 1
         theIntCTVec);
@


1.7
log
@Changed name of Component to Entity.
@
text
@d7 7
a13 7
#include   <NativeCall.h>
#include     <CTVecRes.h>
#include  <CTVecHolder.h>
#include      <Session.h>
#include      <Problem.h>
#include <GlobalEntity.h>
#include       <VecWoa.h>
d374 1
a374 1
   return mySession_->getProblem ()->getGlobalEntity ()->getNPeriods ();
@


1.6
log
@Revised C++ class template VecWoa.
@
text
@d7 7
a13 7
#include  <NativeCall.h>
#include    <CTVecRes.h>
#include <CTVecHolder.h>
#include     <Session.h>
#include     <Problem.h>
#include  <GlobalComp.h>
#include      <VecWoa.h>
d374 1
a374 1
   return mySession_->getProblem ()->getGlobalComp ()->getNPeriods ();
@


1.5
log
@Changed name of C++ class JniWrapper to JniClient.
@
text
@d220 2
a221 2
      _jbooleanArray *   theJBoolArr,
      VecWoa <Boolean> & theBoolVecWoa)
a222 1
   Boolean *  theBoolCTVec;
a228 2
   theBoolCTVec    = theBoolVecWoa.getCVec ();

d252 1
a252 3
void WitJ::NativeCall::copyInto (
      _jintArray *   theJIntArr,
      VecWoa <int> & theIntVecWoa)
d267 1
a267 1
         theIntVecWoa.getCVec ());
d273 2
a274 2
      _jdoubleArray *   theJDblArr,
      VecWoa <double> & theDblVecWoa)
d289 1
a289 1
         theDblVecWoa.getCVec ());
@


1.4
log
@Extraction
@
text
@d19 1
a19 1
      JniWrapper      (theJNIEnv),
@


1.3
log
@Call-back infrastructure.
@
text
@a13 1
#include   <StringWoa.h>
a323 16
_jstring * WitJ::NativeCall::makeJString (const StringWoa & theStringWoa)
   {
   _jstring * theJString;

   witjAssert (theStringWoa.getCString () != NULL);

   theJString = getJNIEnv ()->NewStringUTF (theStringWoa.getCString ());

   if (theJString == NULL)
      abortForMemory ("NewStringUTF");

   return theJString;
   }

//------------------------------------------------------------------------------

@


1.2
log
@Implemented C++ class JniWrapper.
@
text
@d38 1
a38 1
   checkForJniException (getJNIEnv ());
@


1.1
log
@File name correction.
@
text
@a7 1
#include  <JavaObjRep.h>
d20 1
a20 1
      myJNIEnv_       (theJNIEnv),
d38 1
a38 1
   checkForJniException (myJNIEnv_);
a60 7
WitJ::JavaObjRep * WitJ::NativeCall::newJavaObjRep (_jobject * theJObject)
   {
   return new JavaObjRep (myJNIEnv_, theJObject);
   }

//------------------------------------------------------------------------------

d71 1
a71 1
   myJNIEnv_->
d84 1
a84 1
   theJavaAccObj = getObject (myJNIEnv_, theCppObjRepJObj);
d141 1
a141 1
   witjAssert (myJNIEnv_->GetArrayLength (theJBoolArr) == nPeriodsVal);
d147 1
a147 1
   myJNIEnv_->
d175 1
a175 1
   witjAssert (myJNIEnv_->GetArrayLength (theJIntArr) == nPeriodsVal);
d181 1
a181 1
   myJNIEnv_->
d202 1
a202 1
   witjAssert (myJNIEnv_->GetArrayLength (theJDblArr) == nPeriodsVal);
d208 1
a208 1
   myJNIEnv_->
d244 1
a244 1
   witjAssert (myJNIEnv_->GetArrayLength (theJBoolArr) == nPeriodsVal);
d246 1
a246 1
   myJNIEnv_->
d266 1
a266 1
   witjAssert (myJNIEnv_->GetArrayLength (theJIntArr) == nPeriodsVal);
d268 1
a268 1
   myJNIEnv_->
d288 1
a288 1
   witjAssert (myJNIEnv_->GetArrayLength (theJDblArr) == nPeriodsVal);
d290 1
a290 1
   myJNIEnv_->
d306 1
a306 1
   theCString = myJNIEnv_->GetStringUTFChars (theJString, NULL);
a324 12
void WitJ::NativeCall::checkForJniException (JNIEnv * theJNIEnv)
   {
   if (theJNIEnv->ExceptionCheck ())
      {
      theJNIEnv->ExceptionDescribe ();

      witjAssert (false);
      }
   }

//------------------------------------------------------------------------------

d331 1
a331 1
   theJString = myJNIEnv_->NewStringUTF (theStringWoa.getCString ());
d380 1
a380 1
      myJNIEnv_->ReleaseStringUTFChars (theJString, theCString);
@

