head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2009.02.03.16.32.26;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2009.01.31.00.56.25;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.23.23.57.54;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Removed the Alternative classes.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File Alternative.C.
//
// Contains the implementation of class Alternative.
//------------------------------------------------------------------------------

#include <Alternative.h>

#include      <string>

//------------------------------------------------------------------------------

WitJ::Alternative * WitJ::Alternative::material_ = NULL;
WitJ::Alternative * WitJ::Alternative::capacity_ = NULL;

//------------------------------------------------------------------------------

WitJ::Alternative * WitJ::Alternative::asAlternative ()
   {
   return this;
   }

//------------------------------------------------------------------------------

void WitJ::Alternative::createAllInstances (Coordinator * theCoord)
   {
   EXCEPTION_ASSERT (material_ == NULL);

   material_ = new Alternative (theCoord);
   capacity_ = new Alternative (theCoord);
   }

//------------------------------------------------------------------------------

WitJ::Alternative * WitJ::Alternative::findInstanceFor (
      const char * theAltNameCStr)
   {
   std::string theAltName;

   theAltName = theAltNameCStr;

   if (theAltName == "MATERIAL")
      return          material_;

   if (theAltName == "CAPACITY")
      return          capacity_;

   EXCEPTION_ASSERT (false);

   return NULL;
   }

//------------------------------------------------------------------------------

witAttr WitJ::Alternative::getPartCategory ()
   {
   if (this ==  material_)
      return WitMATERIAL;

   if (this ==  capacity_)
      return WitCAPACITY;

   EXCEPTION_ASSERT (false);

   return NULL;
   }

//------------------------------------------------------------------------------

WitJ::Alternative * WitJ::Alternative::findInstanceForPartCategory (
      witAttr theAttr)
   {
   if (theAttr == WitMATERIAL)
      return         material_;

   if (theAttr == WitCAPACITY)
      return         capacity_;

   EXCEPTION_ASSERT (false);

   return NULL;
   }

//------------------------------------------------------------------------------

WitJ::Alternative::Alternative (Coordinator * theCoord):

      JavaAccObj (theCoord)
   {
   }

//------------------------------------------------------------------------------

WitJ::Alternative::~Alternative ()
   {
   EXCEPTION_ASSERT (false);
   }
@


1.2
log
@Part.Category as Alternative
@
text
@@


1.1
log
@Alternative classes.
@
text
@d13 2
a14 8
WitJ::Alternative::Alternative (
         Coordinator * theCoord,
         const char *  theAltNameCStr):

      JavaAccObj (theCoord),
      myWitAttr_ (NULL)
   {
   }
d18 1
a18 1
WitJ::Alternative::~Alternative ()
d20 1
d25 1
a25 1
WitJ::Alternative * WitJ::Alternative::asAlternative ()
d27 4
a30 1
   return this;
d35 2
a36 1
witAttr WitJ::Alternative::findWitAttrFor (const char * theAltNameCStr)
d43 1
a43 1
      return       WitMATERIAL;
d46 32
a77 1
      return       WitCAPACITY;
d83 15
@

