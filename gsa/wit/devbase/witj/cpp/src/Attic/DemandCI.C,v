head	1.16;
access;
symbols;
locks; strict;
comment	@ * @;


1.16
date	2008.09.26.22.21.21;	author rjw;	state dead;
branches;
next	1.15;

1.15
date	2008.08.29.18.36.43;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.08.29.17.19.06;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.08.27.15.30.45;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.05.30.16.33.36;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.05.30.15.52.19;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.05.23.22.58.32;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.22.21.02.57;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.21.18.07.12;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.20.20.37.02;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.20.18.16.39;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.20.15.24.49;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.19.22.20.54;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.16.18.06.46;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.15.19.45.16;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.20.54.10;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Numerous class name changes.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source file DemandCI.C.
//
// Contains the C++ implementations of the native methods of Java class
// witj.DemandCI.
//------------------------------------------------------------------------------

#include <JniHandler.h>
#include     <Demand.h>

using namespace WitJ;

//------------------------------------------------------------------------------

nativeMethod (void, DemandCI, setDemandName) (
      JNIEnv *   theJNIEnv,
      _jobject * theDemandCIJObj,
      _jstring * theDemandNameJStr)
   {
   JniHandler   theJniHand (theJNIEnv);
   Demand *     theDemand;
   const char * theDemandNameCStr;

   theDemand         = theJniHand.getObject (theDemandCIJObj)->asDemand ();

   theDemandNameCStr = theJniHand.makeCString (theDemandNameJStr);

   theDemand->setDemandName (theDemandNameCStr);
   }

//------------------------------------------------------------------------------

nativeMethod (void, DemandCI, createMyCppDemand) (
      JNIEnv *   theJNIEnv,
      _jobject * theDemandCIJObj,
      _jobject * thePartCIJObj,
      _jstring * theDemandNameJStr)
   {
   JniHandler   theJniHand (theJNIEnv);
   Part *       thePart;
   const char * theDemandNameCStr;
   Demand *     theDemand;

   thePart           = theJniHand.getObject (thePartCIJObj)->asPart ();

   theDemandNameCStr = theJniHand.makeCString (theDemandNameJStr);

   theDemand         = new Demand (thePart, theDemandNameCStr);

   theJniHand.transferTo (theDemandCIJObj, theDemand);
   }
@


1.15
log
@"demandName" attribute.
@
text
@@


1.14
log
@"operationName" attribute.
@
text
@d15 18
@


1.13
log
@Attributes.
@
text
@d19 1
a19 1
      _jstring * demandNameJStr)
d23 1
a23 1
   const char * demandNameCStr;
d26 1
a26 1
   thePart        = theJniHand.getObject (thePartCIJObj)->asPart ();
d28 1
a28 1
   demandNameCStr = theJniHand.makeCString (demandNameJStr);
d30 1
a30 1
   theDemand      = new Demand (thePart, demandNameCStr);
@


1.12
log
@JniHandler
@
text
@d26 1
a26 1
   thePart        = theJniHand.getObject (thePartCIJObj)->thisPart ();
@


1.11
log
@JniHandler
@
text
@d26 1
a26 1
   thePart        = theJniHand.getPart (thePartCIJObj);
@


1.10
log
@*** empty log message ***
@
text
@d17 1
a17 1
      _jobject * theJObj,
d21 1
a21 1
   JniHandler   theJniHand (theJNIEnv, theJObj);
d32 1
a32 1
   theJniHand.attachToCI (theDemand);
@


1.9
log
@*** empty log message ***
@
text
@d26 1
a26 1
   thePart        = theJniHand.getObject (thePartCIJObj)->thisPart ();
@


1.8
log
@*** empty log message ***
@
text
@d32 1
a32 1
   theJniHand.attachToCppInterface (theDemand);
@


1.7
log
@*** empty log message ***
@
text
@a9 1
#include     <Native.h>
d17 1
a17 1
      _jobject * theDemandCIJObj,
d21 1
a21 1
   JniHandler   theJniHand (theJNIEnv);
d32 1
a32 1
   theJniHand.acquireFor (theDemandCIJObj, theDemand);
@


1.6
log
@*** empty log message ***
@
text
@a8 1
#include  <StringJia.h>
d22 1
a22 2
   JniHandler   theJniHandler (theJNIEnv);
   StringJia    demandNameJia (theJNIEnv, demandNameJStr);
d24 1
a24 1
   const char * demandNameVal;
d27 1
a27 1
   thePart       = theJniHandler.objectOf (thePartCIJObj)->thisPart ();
d29 1
a29 1
   demandNameVal = demandNameJia.myCString ();
d31 1
a31 1
   theDemand     = new Demand (thePart, demandNameVal);
d33 1
a33 1
   theJniHandler.transferTo (theDemandCIJObj, theDemand);
@


1.5
log
@*** empty log message ***
@
text
@a8 1
#include      <CIJia.h>
d23 5
a27 6
   JniHandler     theJniHandler (theJNIEnv);
   CIJia <Part>   thePartCIJia  (theJNIEnv, thePartCIJObj);
   StringJia      demandNameJia (theJNIEnv, demandNameJStr);
   Part *         thePart;
   const char *   demandNameVal;
   Demand *       theDemand;
d29 1
a29 1
   thePart       = thePartCIJia.myObject ();
@


1.4
log
@*** empty log message ***
@
text
@d8 5
a12 5
#include   <JniAsst.h>
#include     <CIJia.h>
#include <StringJia.h>
#include    <Demand.h>
#include    <Native.h>
d24 1
a24 1
   JniAsst        theJniAsst    (theJNIEnv);
d37 1
a37 1
   theJniAsst.transferTo (theDemandCIJObj, theDemand);
@


1.3
log
@*** empty log message ***
@
text
@d8 1
d24 6
a29 6
   CIJia <Demand>  theDemandCIJia (theJNIEnv, theDemandCIJObj);
   CIJia <Part>    thePartCIJia   (theJNIEnv, thePartCIJObj);
   StringJia       demandNameJia  (theJNIEnv, demandNameJStr);
   Part *          thePart;
   const char *    demandNameVal;
   Demand *        theDemand;
d37 1
a37 1
   theDemandCIJia.attach (theDemand);
@


1.2
log
@*** empty log message ***
@
text
@d30 1
a30 1
   thePart       = thePartCIJia .myDerJAccObject ();
d35 1
a35 1
                                 
@


1.1
log
@*** empty log message ***
@
text
@d26 2
d30 5
a34 1
   theDemand = new Demand (thePartCIJia, demandNameJia);
@

