head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2008.11.26.18.33.05;	author rjw;	state dead;
branches;
next	1.10;

1.10
date	2008.09.26.22.50.17;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.12.14.43.23;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.11.22.22.46;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.11.21.14.42;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.11.15.20.53;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.10.22.20.19;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.10.21.32.34;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.09.18.59.59;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.09.15.38.19;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.08.19.45.34;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Removed C++ class Session.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File Session.h.
//
// Contains the declaration of class Session.
//------------------------------------------------------------------------------

#ifndef Session_h
#define Session_h

#include <JavaAccObj.h>

//------------------------------------------------------------------------------
// Class Session
//
// The governing C++ class of WIT-J.
// Each instance owns a WitRun.
//
// Class Hierarchy:
//
//    JavaAccObj
//       Session
//------------------------------------------------------------------------------

namespace WitJ
{
class Session: public JavaAccObj
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit Session ();
      //
      // Constructor.

   ~Session ();
      //
      // Destructor.
   
   virtual Session * asSession ();
      //
      // Override from class JavaAccObj.

   void store (Problem * theProblem);
      //
      // Stores theProblem as myProblem_.
      // May be called at most once.

   //---------------------------------------------------------------------------
   // Accessors.
   //---------------------------------------------------------------------------

   inline WitRun * getWitRun ()
      {
      return myWitRun_;
      }

   inline Problem * getProblem ()
      {
      witjAssert (myProblem_ != NULL);

      return myProblem_;
      }

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   Session              (const Session &);
   Session & operator = (const Session &);
      //
      // Not defined; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   WitRun * myWitRun_;
      //
      // The WitRun owned by this Session.

   Problem * myProblem_;
      //
      // The Problem for this Session, if any; otherwise NULL.
   };
};
//
// End of namespace WitJ.

#endif
@


1.10
log
@Changed name of C++ class JAccObject to JavaAccObj.
@
text
@@


1.9
log
@Revised the use of class CTVecRes.
@
text
@d10 1
a10 1
#include <JAccObject.h>
d20 1
a20 1
//    JAccObject
d26 1
a26 1
class Session: public JAccObject
d44 1
a44 1
      // Override from class JAccObject.
@


1.8
log
@Moves C++ GlobalComp from Session to Problem.
@
text
@a50 5
   void lockNPeriods ();
      //
      // Indicates that nPeriods can no longer be changed because at least one
      // Part or Operation exists.

a66 12
   inline CTVecRes * getCTVecRes ()
      {
      witjAssert (myCTVecRes_ != NULL);

      return myCTVecRes_;
      }

   inline bool hasCTVecRes ()
      {
      return (myCTVecRes_ != NULL);
      }

a88 4

   CTVecRes * myCTVecRes_;
      //
      // The CTVecRes owned by this Session, if any; otherwise NULL.
@


1.7
log
@Added theSession.myProblem_.
@
text
@a50 5
   void store (GlobalComp * theGlobalComp);
      //
      // Stores theGlobalComp as myGlobalComp_.
      // Must be called exactly once.

a71 7
   inline GlobalComp * getGlobalComp ()
      {
      witjAssert (myGlobalComp_ != NULL);

      return myGlobalComp_;
      }

a106 4
   GlobalComp * myGlobalComp_;
      //
      // The GlobalComp for this Session.

@


1.6
log
@Disallowed creating a Problem for a Session that already has one.
@
text
@d46 5
d70 7
d115 4
@


1.5
log
@Updated class CTVecRes.
@
text
@a50 4
   void clearProblem ();
      //
      // Puts this Session back into a state without a Problem.

@


1.4
log
@Initial implementation of creating a Session without a Problem.
@
text
@d78 2
d83 1
a83 1
   inline bool getNPeriodsLocked ()
d85 1
a85 1
      return nPeriodsLocked_;
a110 5
   bool nPeriodsLocked_;
      //
      // True, iff nPeriods cannot be changed because at least one Part or
      // Operation exists.

d113 1
a113 1
      // The CTVecRes owned by this Session.
@


1.3
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@a12 6
// Forward declaration.
//------------------------------------------------------------------------------

class WitRun;

//------------------------------------------------------------------------------
d51 4
@


1.2
log
@Removed Java class SessionCI.
Removed C++  class Session.
Kept the empty source files.
@
text
@d3 2
d10 114
@


1.1
log
@Initial implementation of the Session classes.
@
text
@a2 2
//
// Contains the declaration of class Session.
a7 51
#include <JAccObject.h>

//------------------------------------------------------------------------------
// Class Session
//
// The governing class of WIT-J's C++ code.
// Corresponds to a WitRun.
//
// Class Hierarchy:
//
//    JAccObject
//       Session
//------------------------------------------------------------------------------

namespace WitJ
{
class Session: public JAccObject
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit Session (ProbCoord *);
      //
      // Constructor.

   ~Session ();
      //
      // Destructor.
   
   virtual Session * asSession ();
      //
      // Override from class JAccObject.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   Session              (const Session &);
   Session & operator = (const Session &);
      //
      // Not defined; prevents accidental copying and assignment.
   };
};
//
// End of namespace WitJ.

@

