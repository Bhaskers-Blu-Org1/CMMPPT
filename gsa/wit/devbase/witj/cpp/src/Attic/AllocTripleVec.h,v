head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2011.03.25.22.49.08;	author rjw;	state dead;
branches;
next	1.5;

1.5
date	2010.04.20.20.55.06;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.19.20.48.01;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.17.00.20.18;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.05.17.55.44;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.04.23.04.20;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@ArrayListJOR
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File AllocTripleVec.h.
//
// Contains the declaration of class AllocTripleVec.
//------------------------------------------------------------------------------

#ifndef AllocTripleVec_h
#define AllocTripleVec_h

#include  <JavaAccObj.h>
#include <WitVecOwner.h>

#include      <vector>

//------------------------------------------------------------------------------
// Class AllocTripleVec
//
// "Allocation Triple Vector"
//
// Represents a vector of triples of type (Component, int, double), where the
// int is a period and the double is the "volume" of the triple and the data
// has been retrieved from WIT.
//
// Class Hierarchy:
//
// JavaAccObj
//    AllocTripleVec
//------------------------------------------------------------------------------

namespace WitJ
{
class AllocTripleVec: public JavaAccObj
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit AllocTripleVec (Coordinator * theCoord);
      //
      // Constructor.

   virtual ~AllocTripleVec ();
      //
      // Destructor.

   virtual AllocTripleVec * asAllocTripleVec ();
      //
      // Override from class JavaAccObj.

   void resize (int nTriples);
      //
      // Resizes this AllocTripleVec to hold nTriples triples.

   void acquirePeriodWitVec (int * theWitVec);
      //
      // Acquires thePeriodWitVec as the c-vector of periods for this
      // AllocTripleVec, with responsibility for calling witFree on it.

   void acquireVolumeWitVec (double * theWitVec);
      //
      // Acquires theVolumeWitVec as the c-vector of volumes for this
      // AllocTripleVec, with responsibility for calling witFree on it.

   void setComponent (int theIdx, Component * theComp);
      //
      // Sets the Component for the triple at theIdx to theComp.

   //---------------------------------------------------------------------------
   // Accessors.
   //---------------------------------------------------------------------------

   int getNTriples ();
      //
      // Returns the # triples stored by this AllocTripleVec.

   Component * getComponent (int theIdx);
      //
      // Returns the Component for the triple at theIdx.

   int getPeriod (int theIdx);
      //
      // Returns the period for the triple at theIdx.

   double getVolume (int theIdx);
      //
      // Returns the volume for the triple at theIdx.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   AllocTripleVec              (const AllocTripleVec &);
   AllocTripleVec & operator = (const AllocTripleVec &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   std::vector <Component *> myCompVec_;
      //
      // myCompVec_[theIdx] is the Component for the triple at theIdx.

   WitVecOwner <int> myPeriodWVO_;
      //
      // myPeriodWVO_[theIdx] is the period for the triple at theIdx.

   WitVecOwner <double> myVolumeWVO_;
      //
      // myVolumeWVO_[theIdx] is the volume for the triple at theIdx.
   };
};
//
// End of namespace WitJ.

#endif
@


1.5
log
@Multi-Obj Mode
@
text
@@


1.4
log
@Multi-Obj Mode
@
text
@d10 2
a11 2
#include <JavaAccObj.h>
#include     <VecWoa.h>
d13 1
a13 1
#include     <vector>
d109 1
a109 1
   VecWoa <int> myPeriodVecWoa_;
d111 1
a111 1
      // myPeriodVecWoa_[theIdx] is the period for the triple at theIdx.
d113 1
a113 1
   VecWoa <double> myVolumeVecWoa_;
d115 1
a115 1
      // myVolumeVecWoa_[theIdx] is the volume for the triple at theIdx.
@


1.3
log
@Multi-Obj Mode
@
text
@d52 1
a52 4
   void acquireData (
         int      nTriplesVal,
         int *    thePeriodCVec,
         double * theVolumeCVec);
d54 5
a58 2
      // Resizes this AllocTripleVec to hold nTrips triples.
      // Acquires thePeriodCVec as the c-vector of periods for this
d60 4
a63 1
      // Acquires theVolumeCVec as the c-vector of volumes for this
@


1.2
log
@Changed getCInstance () to getSubComponent ().
@
text
@d52 4
a55 1
   void setNTriples (int nTrips);
d58 4
a66 10
   int * * getPeriodCVecAddr ();
      //
      // Calls getCVecAddr () on the underlying VecWoa for the periods of this
      // AllocTripleVec and returns the result.

   double * * getVolumeCVecAddr ();
      //
      // Calls getCVecAddr () on the underlying VecWoa for the volumes of this
      // AllocTripleVec and returns the result.

@


1.1
log
@Changed handling of Lists of AllocTriples to avoid call-backs.
@
text
@d21 2
a22 1
// int is a period and the double is the "volume" of the triple.
@

