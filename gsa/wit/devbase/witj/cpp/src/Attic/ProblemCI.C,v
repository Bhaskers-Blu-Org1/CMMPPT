head	1.22;
access;
symbols;
locks; strict;
comment	@ * @;


1.22
date	2008.09.26.22.21.22;	author rjw;	state dead;
branches;
next	1.21;

1.21
date	2008.09.19.21.59.26;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.09.16.22.21.40;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.09.16.22.14.01;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.09.12.19.44.33;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.09.09.18.59.59;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.08.27.15.30.46;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.06.19.19.31.13;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.05.30.16.33.36;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.05.30.15.52.20;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.05.23.22.58.33;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.05.22.21.23.00;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.05.22.21.02.58;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.21.18.07.13;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.20.20.37.03;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.20.18.16.40;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.20.15.24.49;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.19.22.20.56;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.16.18.37.16;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.16.18.06.47;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.15.22.11.57;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.20.54.11;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Numerous class name changes.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source file ProblemCI.C.
//
// Contains the C++ implementations of the native methods of Java class
// witj.ProblemCI.
//------------------------------------------------------------------------------

#include <JniHandler.h>
#include    <Problem.h>

using namespace WitJ;

//------------------------------------------------------------------------------

nativeMethod (void, ProblemCI, createMyCppProblem) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCIJObj,
      _jobject * theSessionCIJObj)
   {
   JniHandler theJniHand (theJNIEnv);
   Session *  theSession;
   Problem *  theProblem;

   theSession = theJniHand.getObject (theSessionCIJObj)->asSession ();

   theProblem = new Problem (theSession);

   theJniHand.transferTo (theProblemCIJObj, theProblem);
   }

//------------------------------------------------------------------------------

nativeMethod (void, ProblemCI, displayData) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCIJObj,
      _jstring * fileNameJStr)
   {
   JniHandler   theJniHand (theJNIEnv);
   Problem *    theProblem;
   const char * fileNameCStr;

   theProblem   = theJniHand.getObject (theProblemCIJObj)->asProblem ();

   fileNameCStr = theJniHand.makeCString (fileNameJStr);

   theProblem->displayData (fileNameCStr);
   }

//------------------------------------------------------------------------------

nativeMethod (void, ProblemCI, evalObjectives) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCIJObj)
   {
   JniHandler theJniHand (theJNIEnv);
   Problem *  theProblem;

   theProblem = theJniHand.getObject (theProblemCIJObj)->asProblem ();

   theProblem->evalObjectives ();
   }

//------------------------------------------------------------------------------

nativeMethod (void, ProblemCI, generatePriorities) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCIJObj)
   {
   JniHandler theJniHand (theJNIEnv);
   Problem *  theProblem;

   theProblem = theJniHand.getObject (theProblemCIJObj)->asProblem ();

   theProblem->generatePriorities ();
   }

//------------------------------------------------------------------------------

nativeMethod (void, ProblemCI, heurImplode) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCIJObj)
   {
   JniHandler theJniHand (theJNIEnv);
   Problem *  theProblem;

   theProblem = theJniHand.getObject (theProblemCIJObj)->asProblem ();

   theProblem->heurImplode ();
   }

//------------------------------------------------------------------------------

nativeMethod (void, ProblemCI, readData) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCIJObj,
      _jstring * fileNameJStr)
   {
   JniHandler   theJniHand (theJNIEnv);
   Problem *    theProblem;
   const char * fileNameCStr;

   theProblem   = theJniHand.getObject (theProblemCIJObj)->asProblem ();

   fileNameCStr = theJniHand.makeCString (fileNameJStr);

   theProblem->readData (fileNameCStr);
   }
@


1.21
log
@Began implementation of Problem.readData (...).
@
text
@@


1.20
log
@Wrapped witGeneratePriorities.
@
text
@d90 18
@


1.19
log
@Wrapped witEvalObjectives.
@
text
@d65 14
@


1.18
log
@Implemented theMsgHandler.flushFile ().
@
text
@d51 14
d69 2
a70 2
   JniHandler   theJniHand (theJNIEnv);
   Problem *    theProblem;
@


1.17
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@a32 14
nativeMethod (void, ProblemCI, flushMsgFile) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCIJObj)
   {
   JniHandler theJniHand (theJNIEnv);
   Problem *  theProblem;

   theProblem = theJniHand.getObject (theProblemCIJObj)->asProblem ();

   theProblem->flushMsgFile ();
   }

//------------------------------------------------------------------------------

@


1.16
log
@Attributes.
@
text
@d18 1
a18 1
      _jobject * theProbCoordCIJObj)
d20 3
a22 3
   JniHandler  theJniHand (theJNIEnv);
   ProbCoord * theProbCoord;
   Problem *   theProblem;
d24 1
a24 1
   theProbCoord = theJniHand.getObject (theProbCoordCIJObj)->asProbCoord ();
d26 1
a26 1
   theProblem   = new Problem (theProbCoord);
@


1.15
log
@Implemented Problem.heurImplode.
@
text
@d24 1
a24 1
   theProbCoord = theJniHand.getObject (theProbCoordCIJObj)->thisProbCoord ();
d40 1
a40 1
   theProblem = theJniHand.getObject (theProblemCIJObj)->thisProblem ();
d56 1
a56 1
   theProblem   = theJniHand.getObject (theProblemCIJObj)->thisProblem ();
d72 1
a72 1
   theProblem = theJniHand.getObject (theProblemCIJObj)->thisProblem ();
@


1.14
log
@JniHandler
@
text
@d62 14
@


1.13
log
@JniHandler
@
text
@d24 1
a24 1
   theProbCoord = theJniHand.getProbCoord (theProbCoordCIJObj);
d40 1
a40 1
   theProblem = theJniHand.getProblem (theProblemCIJObj);
d56 1
a56 1
   theProblem   = theJniHand.getProblem (theProblemCIJObj);
@


1.12
log
@*** empty log message ***
@
text
@d17 1
a17 1
      _jobject * theJObj,
d20 1
a20 1
   JniHandler  theJniHand (theJNIEnv, theJObj);
d28 1
a28 1
   theJniHand.attachToCI (theProblem);
d35 1
a35 1
      _jobject * theJObj)
d37 1
a37 1
   JniHandler theJniHand (theJNIEnv, theJObj);
d40 1
a40 1
   theProblem = theJniHand.getProblem ();
d49 1
a49 1
      _jobject * theJObj,
d52 1
a52 1
   JniHandler   theJniHand (theJNIEnv, theJObj);
d56 1
a56 1
   theProblem   = theJniHand.getProblem ();
@


1.11
log
@*** empty log message ***
@
text
@d24 1
a24 1
   theProbCoord = theJniHand.getObject (theProbCoordCIJObj)->thisProbCoord ();
d40 1
a40 1
   theProblem = theJniHand.myObject ()->thisProblem ();
d56 1
a56 1
   theProblem   = theJniHand.myObject ()->thisProblem ();
@


1.10
log
@*** empty log message ***
@
text
@d33 14
@


1.9
log
@*** empty log message ***
@
text
@d28 1
a28 1
   theJniHand.attachToCppInterface (theProblem);
@


1.8
log
@*** empty log message ***
@
text
@a9 1
#include     <Native.h>
d17 1
a17 1
      _jobject * theProblemCIJObj,
d20 1
a20 1
   JniHandler  theJniHand (theJNIEnv);
d28 1
a28 1
   theJniHand.acquireFor (theProblemCIJObj, theProblem);
d35 1
a35 1
      _jobject * theProblemCIJObj,
d38 1
a38 1
   JniHandler   theJniHand (theJNIEnv);
d42 1
a42 1
   theProblem   = theJniHand.getObject (theProblemCIJObj)->thisProblem ();
@


1.7
log
@*** empty log message ***
@
text
@a8 1
#include  <StringJia.h>
d21 1
a21 1
   JniHandler  theJniHandler (theJNIEnv);
d25 1
a25 1
   theProbCoord = theJniHandler.objectOf (theProbCoordCIJObj)->thisProbCoord ();
d29 1
a29 1
   theJniHandler.transferTo (theProblemCIJObj, theProblem);
d39 1
a39 1
   JniHandler   theJniHandler (theJNIEnv);
a40 1
   StringJia    fileNameJia   (theJNIEnv, fileNameJStr);
d43 1
a43 1
   theProblem   = theJniHandler.objectOf (theProblemCIJObj)->thisProblem ();
d45 1
a45 1
   fileNameCStr = fileNameJia.myCString ();
@


1.6
log
@*** empty log message ***
@
text
@a8 1
#include      <CIJia.h>
d22 3
a24 4
   JniHandler        theJniHandler     (theJNIEnv);
   CIJia <ProbCoord> theProbCoordCIJia (theJNIEnv, theProbCoordCIJObj);
   ProbCoord *       theProbCoord;
   Problem *         theProblem;
d26 1
a26 1
   theProbCoord = theProbCoordCIJia.myObject ();
d40 4
a43 4
   CIJia <Problem> theProblemCIJia (theJNIEnv, theProblemCIJObj);
   StringJia       fileNameJia     (theJNIEnv, fileNameJStr);
   Problem *       theProblem;
   const char *    fileNameCStr;
d45 1
a45 1
   theProblem   = theProblemCIJia.myObject ();
@


1.5
log
@*** empty log message ***
@
text
@d8 5
a12 5
#include   <JniAsst.h>
#include     <CIJia.h>
#include <StringJia.h>
#include   <Problem.h>
#include    <Native.h>
d23 1
a23 1
   JniAsst           theJniAsst        (theJNIEnv);
d32 1
a32 1
   theJniAsst.transferTo (theProblemCIJObj, theProblem);
@


1.4
log
@*** empty log message ***
@
text
@d8 1
d23 1
a23 1
   CIJia <Problem>   theProblemCIJia   (theJNIEnv, theProblemCIJObj);
d32 1
a32 1
   theProblemCIJia.attach (theProblem);
@


1.3
log
@*** empty log message ***
@
text
@d44 1
d46 1
a46 1
   theProblem = theProblemCIJia.myObject ();
d48 3
a50 1
   theProblem->displayData (fileNameJia);
@


1.2
log
@*** empty log message ***
@
text
@d27 1
a27 1
   theProbCoord = theProbCoordCIJia.myDerJAccObject ();
d43 1
d45 3
a47 1
   theProblemCIJia.myDerJAccObject ()->displayData (fileNameJia);
@


1.1
log
@*** empty log message ***
@
text
@d19 2
a20 1
      _jobject * theProblemCIJObj)
d22 6
a27 2
   CIJia <Problem> theProblemCIJia (theJNIEnv, theProblemCIJObj);
   Problem *       theProblem;
d29 1
a29 1
   theProblem = new Problem ();
@

