head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2008.05.20.18.16.39;	author rjw;	state dead;
branches;
next	1.5;

1.5
date	2008.05.19.22.20.54;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.19.16.15.29;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.16.18.06.46;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.15.19.45.16;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.20.54.10;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@*** empty log message ***
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File CIJia.h.
//
// Contains the declaration of class AbsCIJia.
// Contains the declaration of class template CIJia <DerJAccObject>.
//------------------------------------------------------------------------------

#ifndef CIJiaH
#define CIJiaH

#include <Includes.h>

#include      <jni.h>

//------------------------------------------------------------------------------
// Class AbsCIJia
//
// "Abstract C++ Interface Java Input Argument"
// Represents an input argument from Java of type CppInterface.
//
// Class Hierarchy:
//
//    AbsCIJia
//       CIJia <DerJAccObject>
//------------------------------------------------------------------------------

namespace WitJ
{
class AbsCIJia
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   static void acquireJFieldIDs (
         JNIEnv *  theJNIEnv,
         _jclass * theJClassForCppInterface);
      //
      // Acquires the _jfieldIDs needed by this class.
      // Arguments:
      //    theJNIEnv:                The JNI environment.
      //    theJClassForCppInterface: The _jclass for the Java class
      //                              CppInterface.

   explicit AbsCIJia (
         JNIEnv *   theJNIEnv,
         _jobject * theCppInterfaceAsJObject);
      //
      // Constructor.
      // Arguments:
      //    theJNIEnv:                The JNI environment.
      //    theCppInterfaceAsJObject: The CppInterface referenced by this
      //                              AbsCIJia, as a JNI-object.

   ~AbsCIJia ();
      //
      // Destructor.

   //---------------------------------------------------------------------------
   // Protected member functions.
   //---------------------------------------------------------------------------

   protected:

   JAccObject * myJAccObject () const;
      //
      // Returns the JAccObject owned by the Java CppInterface for this
      // AbsCIJia.
      // Asserts that it is not NULL.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   AbsCIJia              (const AbsCIJia &);
   AbsCIJia & operator = (const AbsCIJia &);
      //
      // Not defined; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   static _jfieldID * myFidForMyCppJAccObjectAsLong_;
      //
      // The JNI field ID for witj.CppInterface.myCppJAccObjectAsLong.

   JNIEnv * const myJNIEnv_;
      //
      // The JNI environment for this AbsCIJia.

   _jobject * const myCppInterfaceAsJObject_;
      //
      // The CppInterface referenced by this AbsCIJia, as a JNI-object.
   };
};
//
// End of namespace WitJ.


//------------------------------------------------------------------------------
// Class template CIJia <DerJAccObject>
//
// "C++ Interface Java Input Argument"
// Represents an input argument from Java of type CppInterface whose JAccObject
// is actually an instance of the DerJAccObject class.
//
// Class Hierarchy:
//
//    AbsCIJia
//       CIJia <DerJAccObject>
//
// All definition is inline.
//------------------------------------------------------------------------------

namespace WitJ
{
template <typename DerJAccObject> 
      class CIJia: public AbsCIJia
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   inline explicit CIJia (
            JNIEnv *   theJNIEnv,
            _jobject * theDerCppInterfaceAsJObject):

         AbsCIJia (theJNIEnv, theDerCppInterfaceAsJObject)
      {
      }

   inline ~CIJia ()
      {
      }

      //------------------------------------------------------------------------
      // myObject ()
      // Returns the DerJAccObject owned by the Java CppInterface represented by
      // this CIJia <DerJAccObject>. Asserts that it is not NULL.
      //------------------------------------------------------------------------
      //
   inline DerJAccObject * myObject () const
      {
      DerJAccObject * theDerJAccObject;

      myJAccObject ()->getDerivedInstance (theDerJAccObject);

      return theDerJAccObject;
      }

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   CIJia              (const CIJia &);
   CIJia & operator = (const CIJia &);
      //
      // Not defined; prevents accidental copying and assignment.
   };
};
//
// End of namespace WitJ.

#endif
@


1.5
log
@*** empty log message ***
@
text
@@


1.4
log
@*** empty log message ***
@
text
@a66 4
   void attachAbs (JAccObject * theJAccObject);
      //
      // Causes the Java CppInterface for this AbsCIJia to own theJAccObject.

a142 5
   inline void attach (DerJAccObject * theDerJAccObject)
      {
      attachAbs (theDerJAccObject);
      }

@


1.3
log
@*** empty log message ***
@
text
@d47 3
a49 1
   AbsCIJia (JNIEnv * theJNIEnv, _jobject * theCppInterfaceAsJObject);
d135 3
a137 1
   inline CIJia (JNIEnv * theJNIEnv, _jobject * theDerCppInterfaceAsJObject):
@


1.2
log
@*** empty log message ***
@
text
@d149 1
a149 1
      // myDerJAccObject ()
d154 1
a154 1
   inline DerJAccObject * myDerJAccObject () const
@


1.1
log
@*** empty log message ***
@
text
@d18 1
d110 1
@

