head	1.16;
access;
symbols;
locks; strict;
comment	@ * @;


1.16
date	2009.03.13.19.32.18;	author rjw;	state dead;
branches;
next	1.15;

1.15
date	2009.03.13.16.36.06;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.12.22.45.18;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.03.12.19.55.24;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.03.12.19.54.03;	author rjw;	state dead;
branches;
next	1.11;

1.11
date	2009.03.05.17.21.25;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.02.27.21.22.39;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.29.22.06.37;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.23.19.32.22;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.21.21.43.21;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.16.17.03.34;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.16.16.32.01;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.15.17.28.47;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.15.17.17.38;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.26.18.33.04;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.07.18.50.22;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File Element.h.
//
// Contains the declaration of class Element.
//------------------------------------------------------------------------------

#ifndef Element_h
#define Element_h

#include <JavaAccObj.h>

//------------------------------------------------------------------------------
// Class Element
//
// Represents an element (i.e. data object) of an implosion problem.
//
// Class Hierarchy:
//
// JavaAccObj
//    Element
//       GlobalAspect
//       Part
//       Demand
//       Operation
//       BomEntry
//       Substitute
//       BopEntry
//------------------------------------------------------------------------------

namespace WitJ
{
class Element: public JavaAccObj
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   ~Element ();
      //
      // Destructor.

   virtual Element * asElement ();
      //
      // Override from class JavaAccObj.

   virtual void setBoundSet (
         const double * hardLBCVec,
         const double * softLBCVec,
         const double * hardUBCVec);
      //
      // If this Element is an instance of a class that has a BoundSet, this
      // function calls WIT to set the value of the BoundSet to the arguments;
      // otherwise issues an internal error.

   virtual void getBoundSet (
         VecWoa <double> & hardLBWoa,
         VecWoa <double> & softLBWoa,
         VecWoa <double> & hardUBWoa);
      //
      // If this Element is an instance of a class that has a BoundSet, this 
      // function calls WIT to set the value of the arguments to the BoundSet;
      // otherwise issues an internal error.

   void setWasDeletedInWit (bool);
      //
      // Setter.

   //---------------------------------------------------------------------------
   // Accessors.
   //---------------------------------------------------------------------------

   inline bool wasDeletedInWit ()
      {
      return wasDeletedInWit_;
      }

   //---------------------------------------------------------------------------
   // Protected member functions.
   //---------------------------------------------------------------------------

   protected:

   explicit Element (Coordinator * theCoord);
      //
      // Constructor

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   Element              (const Element &);
   Element & operator = (const Element &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   bool wasDeletedInWit_;
      //
      // True, iff the WIT element modeled by this WIT-J/C++ Element has been
      // deleted by witPurgeData.
   };
};
//
// End of namespace WitJ.

#endif
@


1.15
log
@Changed name of GlobalComponent classes to GlobalAspect.
@
text
@@


1.14
log
@Changed name of GlobalElement classes to GlobalComponent.
@
text
@d21 1
a21 1
//       GlobalComponent
@


1.13
log
@Restoration of Element files.
@
text
@d21 1
a21 1
//       GlobalElement
@


1.12
log
@Temporary removal of Element files.
@
text
@@


1.11
log
@purgeData
@
text
@@


1.10
log
@purgeData
@
text
@d66 13
a88 5
   void setToBeShutDown (bool theValue);
      //
      // Value setter for the toBeShutDown field of the Java Element that owns
      // this C++ Element.

d99 9
@


1.9
log
@Implemented Java class CppGateway.
@
text
@d76 5
@


1.8
log
@Coordinator
@
text
@a66 9
   // Accessors.
   //---------------------------------------------------------------------------

   inline JavaObjRep * getJavaObjRep ()
      {
      return myJavaObjRep_;
      }

   //---------------------------------------------------------------------------
d72 1
a72 1
   explicit Element (Coordinator * theCoord, JavaObjRep * theJavaObjRep);
a85 8

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   JavaObjRep * const myJavaObjRep_;
      //
      // The JavaObjRep for this Element.
@


1.7
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d81 1
a81 1
   explicit Element (Coordinator * theCoordinator, JavaObjRep * theJavaObjRep);
@


1.6
log
@Change the mname of the ProbCtr classes to ProbMgr in both Java and C++.
@
text
@d81 1
a81 1
   explicit Element (ProbMgr * theProbMgr, JavaObjRep * theJavaObjRep);
@


1.5
log
@Continued implementation of the ProbCtr classes.
@
text
@d81 1
a81 1
   explicit Element (ProbCtr * theProbCtr, JavaObjRep * theJavaObjRep);
@


1.4
log
@Updated some comments.
@
text
@d81 1
a81 1
   explicit Element (Problem * theProblem, JavaObjRep * theJavaObjRep);
@


1.3
log
@Initial implementation of class ExceptionHandler.
@
text
@d94 1
a94 1
      // Not defined; prevents accidental copying and assignment.
@


1.2
log
@Removed C++ class Session.
@
text
@d19 9
a27 9
//    JavaAccObj
//       Element
//          GlobalElement
//          Part
//          Demand
//          Operation
//          BomEntry
//          Substitute
//          BopEntry
@


1.1
log
@Name change.
@
text
@d81 1
a81 1
   explicit Element (Session * theSession, JavaObjRep * theJavaObjRep);
@

