head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2011.04.05.22.25.42;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2011.04.01.23.25.02;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.20.15.24.49;	author rjw;	state dead;
branches;
next	1.1;

1.1
date	2008.05.19.22.20.55;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Namespace JniUtil.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File JniAsst.h.
//
// Contains the declaration of class JniAsst.
//------------------------------------------------------------------------------

#ifndef JniAsst_h
#define JniAsst_h

#include <JniClient.h>

//------------------------------------------------------------------------------
// Class JniAsst
//
// "JNI Assistant"
//
// Contains various facilities for working with JNI objects.
//
// Class Hierarchy:
//
// JniClient
//    JniAsst
//------------------------------------------------------------------------------

namespace WitJ
{
class JniAsst: public JniClient
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   static void setUpJni (JNIEnv * theJNIEnv);
      //
      // Sets up the interaction between this class and JNI.
      // Uses theJNIEnv as its JNI environment.

   explicit JniAsst (JNIEnv * theJNIEnv);
      //
      // Constructor.

   ~JniAsst ();
      //
      // Destructor.

   void setCoordinator (Coordinator *);
      //
      // Setter.
      // To be called exactly once.

   //---------------------------------------------------------------------------
   // get{class name} functions.
   //
   // In each of these functions, the first argument must reference an instance
   // of the Java COR class matching the name.
   // The function returns the corresponding instance of the C++ class
   // indicated by the name.
   // Uses the second argument as its JNI environment.
   //---------------------------------------------------------------------------

   static Coordinator * getCoordinator (_jobject *, JNIEnv *);
   static Problem *     getProblem     (_jobject *, JNIEnv *);
   static AttBldr *     getAttBldr     (_jobject *, JNIEnv *);
   static Att *         getAtt         (_jobject *, JNIEnv *);
   static MessageMgr *  getMessageMgr  (_jobject *, JNIEnv *);
   static Component *   getComponent   (_jobject *, JNIEnv *);
   static Part *        getPart        (_jobject *, JNIEnv *);
   static Demand *      getDemand      (_jobject *, JNIEnv *);
   static Operation *   getOperation   (_jobject *, JNIEnv *);
   static BomEntry *    getBomEntry    (_jobject *, JNIEnv *);
   static Substitute *  getSubstitute  (_jobject *, JNIEnv *);
   static BopEntry *    getBopEntry    (_jobject *, JNIEnv *);

   //---------------------------------------------------------------------------

   static JavaAccObj * getJavaAccObj (
         _jobject * theCppObjRepJObj,
         JNIEnv *   theJNIEnv);
      //
      // theCppObjRepJObj must reference an instance of Java class CppObjRep.
      // Returns a pointer to the JavaAccObj owned by the CppObjRep.
      // Asserts that the pointer is not NULL.
      // Uses theJNIEnv as its JNI environment.

   int getLength (_jarray * theJArr);
      //
      // Returns the length of the Java array referenced by theJArr.

   //---------------------------------------------------------------------------
   // copyInto (theCTVec, theJArray) functions.
   //
   // Each of these functions copies theJArray, an array passed in from Java,
   // into theCTVec.
   //---------------------------------------------------------------------------
 
   void copyInto (Boolean *, _jbooleanArray *);
   void copyInto (int     *, _jintArray     *);
   void copyInto (double  *, _jdoubleArray  *);

   //---------------------------------------------------------------------------

   void copyInto (String & theString, _jstring * theJString);
      //
      // Copies the Java String referenced by theJString into theString as a
      // null terminated string.

   //---------------------------------------------------------------------------

   void copyBoundVecInto (
         double * &       theDblCTVec,
         _jdoubleArray  * theJDblArr);
      //
      // Same as copyInto, except that theJDblArr may be NULL (for a bound
      // vector) and if it is, then theDblCTVec will be set to NULL.

   //---------------------------------------------------------------------------
   // copyInto (theJArray, theCTVec) functions.
   //
   // Each of these functions copies theCTVec into theJArray, an array passed
   // in from Java.
   //---------------------------------------------------------------------------
 
   void copyInto (_jbooleanArray *, const Boolean *);
   void copyInto (_jintArray     *, const int     *);
   void copyInto (_jdoubleArray  *, const double  *);

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   void checkJArrayForTVec (_jarray * theJArr);
      //
      // Verifies that theJArr is in a valid state for copying theJArr to or
      // from a time-vector.

   void * getCVecFromJArrayCrit (_jarray * theJArr);
      //
      // Calls JNI's GetPrimitiveArrayCritical (...), checks for exceptions and
      // returns the result.

   void releaseJArrayCritDontCopy (_jarray * theJArr, void * theCVec);
      //
      // Calls JNI's ReleasePrimitiveArrayCritical (...), instructing it not to
      // copy back from theCVec to theJArr.

   void releaseJArrayCritAndCopy (_jarray * theJArr, void * theCVec);
      //
      // Calls JNI's ReleasePrimitiveArrayCritical (...), instructing it to copy
      // back from theCVec to theJArr.

   int getNPeriods ();
      //
      // Pass-through.

   JniAsst              (const JniAsst &);
   JniAsst & operator = (const JniAsst &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   static _jfieldID * ourMyCppObjectAsLongFid_;
      //
      // The JNI field ID for witj.CppObjRep.myCppObjectAsLong.

   Coordinator * myCoordinator_;
      //
      // The Coordinator for this JniAsst.
   };
};
//
// End of namespace WitJ.

#endif
@


1.3
log
@JniAsst
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d7 2
a8 2
#ifndef JniAsstH
#define JniAsstH
d10 1
a10 3
#include <Includes.h>

#include      <jni.h>
a15 1
// Provides relatively easy methods for interacting with JNI.
d17 3
a19 1
// The expected mode of use of class JniAsst is as follows:
d21 2
a22 6
// * Declare an instance as a local variable in the implementation of a native
//   method of a Java class.
// * Pass the JNIEnv * argument for the native method to the JniAsst's ctor.
// * Use the JniAsst's member functions instead of direct calls to JNI.
// * When the native method returns, the JniAsst's dtor will be invoked
//   automatically and perform any necessary JNI clean-up.
d27 1
a27 1
class JniAsst
d35 5
a42 3
      // Argument:
      //    theJNIEnv: The JNI environment for the native method within which
      //               this JniAsst is to exist as a local variable.
d48 66
a113 13
   static void acquireJFieldIDs (
         JNIEnv *  theJNIEnv,
         _jclass * theJClassForCppInterface);
      //
      // Acquires the _jfieldIDs needed by this class.
      // Arguments:
      //    theJNIEnv:                The JNI environment.
      //    theJClassForCppInterface: The _jclass for the Java class
      //                              CppInterface.

   void transferTo (
         _jobject *   theCppInterfaceAsJObject,
         JAccObject * theJAccObject);
d115 13
a127 2
      // theCppInterfaceAsJObject is a Java CppInterface, as a JNI-object.
      // Transfers ownership of theJAccObject to the CppInterface.
d135 24
d162 1
a162 1
      // Not defined; prevents accidental copying and assignment.
d168 1
a168 1
   static _jfieldID * myFidForMyCppJAccObjectAsLong_;
d170 1
a170 1
      // The JNI field ID for witj.CppInterface.myCppJAccObjectAsLong.
d172 1
a172 1
   JNIEnv * const myJNIEnv_;
d174 1
a174 2
      // The JNI environment for the native method within which this JniAsst
      // exists as a local variable.
@


1.1
log
@*** empty log message ***
@
text
@@

