head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2011.04.13.16.00.19;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2011.03.08.22.01.04;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.20.20.55.08;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@ArrayJOR classes
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File WitVecOwner.h.
//
// Contains the declaration of class template WitVecOwner <Elem>.
//------------------------------------------------------------------------------

#ifndef WitVecOwner_h
#define WitVecOwner_h

#include <Includes.h>

//------------------------------------------------------------------------------
// Class template WitVecOwner <Elem>
//
// "WIT Vector Owner"
// Responsible for holding a c-vector that was retrieved from WIT and eventually
// calling witFree on it.
//------------------------------------------------------------------------------

namespace WitJ
{
template <typename Elem>
      class WitVecOwner
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit WitVecOwner ();
      //
      // Constructor.

   ~WitVecOwner ();
      //
      // Destructor.
      // Calls witFree on the c-vector currently held by this WitVecOwner, if
      // any.

   void acquireWitVec (Elem * theWitVec);
      //
      // Causes this WitVecOwner to hold theWitVec as its c-vector and take
      // responsibility for calling witFree on it when it's finished with it.

   inline Elem * getWitVec ()
      {
      EXCEPTION_ASSERT (myWitVec_ != NULL);

      return myWitVec_;
      }

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   WitVecOwner              (const WitVecOwner &);
   WitVecOwner & operator = (const WitVecOwner &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   Elem * myWitVec_;
      //
      // The c-vector that was allocated by WIT, if any; otherwise NULL.
   };
};
//
// End of namespace WitJ.

#endif
@


1.2
log
@Revised a comment.
@
text
@@


1.1
log
@Multi-Obj Mode
@
text
@d15 3
a17 2
// "Vector WIT Output Argument"
// Represents an output argument to WIT of type vector of Elem.
@

