head	1.24;
access;
symbols;
locks; strict;
comment	@ * @;


1.24
date	2008.09.09.18.59.59;	author rjw;	state dead;
branches;
next	1.23;

1.23
date	2008.08.28.18.30.37;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.08.27.15.30.46;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.08.06.18.48.21;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.08.06.16.33.06;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.07.18.15.49.41;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.07.15.19.39.55;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.07.01.17.49.16;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.07.01.16.09.22;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.06.26.19.18.07;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.18.21.28.18;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.05.30.17.34.50;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.05.30.15.52.20;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.05.29.15.51.17;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.05.28.18.10.12;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.22.14.03.19;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.21.22.09.35;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.21.14.33.48;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.19.22.20.55;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.19.16.15.30;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.15.22.11.57;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.15.21.18.09;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.15.21.03.30;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.15.19.45.17;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File ProbCoord.h.
//
// Contains the declaration of class ProbCoord.
//------------------------------------------------------------------------------

#ifndef ProbCoord_h
#define ProbCoord_h

#include <JAccObject.h>

//------------------------------------------------------------------------------
// Forward declaration.
//------------------------------------------------------------------------------

class WitRun;

//------------------------------------------------------------------------------
// Class ProbCoord
//
// "Problem Coordinator"
// Responsible for coordinating the objects associated with a Problem.
//
// Class Hierarchy:
//
//    JAccObject
//       ProbCoord
//------------------------------------------------------------------------------

namespace WitJ
{
class ProbCoord: public JAccObject
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit ProbCoord ();
      //
      // Constructor.

   ~ProbCoord ();
      //
      // Destructor.
   
   virtual ProbCoord * asProbCoord ();
      //
      // Override from class JAccObject.

   void store (GlobalComp * theGlobalComp);
      //
      // Stores theGlobalComp as myGlobalComp_.
      // Must be called exactly once.

   void lockNPeriods ();
      //
      // Indicates that nPeriods can no longer be changed because at least one
      // Part or Operation exists.

   //---------------------------------------------------------------------------
   // Accessors.
   //---------------------------------------------------------------------------

   inline WitRun * getWitRun ()
      {
      return myWitRun_;
      }

   inline GlobalComp * getGlobalComp ()
      {
      witjAssert (myGlobalComp_ != NULL);

      return myGlobalComp_;
      }

   inline CTVecRes * getCTVecRes ()
      {
      return myCTVecRes_;
      }

   inline bool getNPeriodsLocked ()
      {
      return nPeriodsLocked_;
      }

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   ProbCoord              (const ProbCoord &);
   ProbCoord & operator = (const ProbCoord &);
      //
      // Not defined; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   WitRun * myWitRun_;
      //
      // The WitRun owned by this ProbCoord.

   GlobalComp * myGlobalComp_;
      //
      // The GlobalComp for this ProbCoord.

   bool nPeriodsLocked_;
      //
      // True, iff nPeriods cannot be changed because at least one Part or
      // Operation exists.

   CTVecRes * myCTVecRes_;
      //
      // The CTVecRes owned by this ProbCoord.
   };
};
//
// End of namespace WitJ.

#endif
@


1.23
log
@Name change: Global --> GlobalComp.
@
text
@@


1.22
log
@Attributes.
@
text
@d52 1
a52 1
   void store (Global * theGlobal);
d54 1
a54 1
      // Stores theGlobal as myGlobal_.
d71 1
a71 1
   inline Global * getGlobal ()
d73 1
a73 1
      witjAssert (myGlobal_ != NULL);
d75 1
a75 1
      return myGlobal_;
d107 1
a107 1
   Global * myGlobal_;
d109 1
a109 1
      // The Global for this ProbCoord.
@


1.21
log
@Classes Global and GlobalCI.
@
text
@d48 1
a48 1
   virtual ProbCoord * thisProbCoord  ();
@


1.20
log
@Class ProbCoord.
@
text
@d52 1
a52 1
   void store (GlobalComp * theGlobalComp);
d54 1
a54 1
      // Stores theGlobalComp as myGlobalComp_.
d71 1
a71 1
   inline GlobalComp * getGlobalComp ()
d73 1
a73 1
      witjAssert (myGlobalComp_ != NULL);
d75 1
a75 1
      return myGlobalComp_;
d107 1
a107 1
   GlobalComp * myGlobalComp_;
d109 1
a109 1
      // The GlobalComp for this ProbCoord.
@


1.19
log
@Attributes.
@
text
@a102 4
   CTVecRes * myCTVecRes_;
      //
      // The CTVecRes owned by this ProbCoord.

d115 4
@


1.18
log
@Attributes.
@
text
@d78 1
a78 1
   inline CTVecRepos <int>    * getIntCTVecRepos ()
d80 1
a80 6
      return myIntCTVecRepos_;
      }

   inline CTVecRepos <double> * getDblCTVecRepos ()
      {
      return myDblCTVecRepos_;
a93 4
   void buildAtts ();
      //
      // Builds the Atts to be owned by this ProbCoord.

d103 4
a114 6
   CTVecRepos <int>    * myIntCTVecRepos_;
   CTVecRepos <double> * myDblCTVecRepos_;
      //
      // The CTVecRepos <int>    owned by this ProbCoord.
      // The CTVecRepos <double> owned by this ProbCoord.

@


1.17
log
@Accessor names.
@
text
@d78 6
a83 1
   inline DblCTVecRepos * getDblCTVecRepos ()
d120 2
a121 1
   DblCTVecRepos * myDblCTVecRepos_;
d123 2
a124 1
      // The DblCTVecRepos owned by this ProbCoord.
@


1.16
log
@Changed the names of access functions beginning with "my"
to begin with "get".
@
text
@d83 1
a83 1
   inline bool nPeriodsLocked ()
@


1.15
log
@Attributes.
@
text
@d66 1
a66 1
   inline WitRun * myWitRun ()
d71 1
a71 1
   inline GlobalComp * myGlobalComp ()
d78 1
a78 1
   inline DblCTVecRepos * myDblCTVecRepos ()
@


1.14
log
@Attributes.
@
text
@d73 1
a73 1
      assert (myGlobalComp_ != NULL);
@


1.13
log
@Attributes
@
text
@d7 2
a8 2
#ifndef ProbCoordH
#define ProbCoordH
@


1.12
log
@JniHandler
@
text
@a77 5
   inline Att * supplyVol ()
      {
      return supplyVol_;
      }

a114 4
   Att * supplyVol_;
      //
      // The supplyVol attribute.

@


1.11
log
@Initial implementation of class AttBldr.
@
text
@d57 1
a57 1
   void recNewPartOpn ();
d59 2
a60 1
      // Records the fact that a new Part or Operation is being created.
d85 2
a86 1
      assert (myDblCTVecRepos_ != NULL);
d88 3
a90 1
      return myDblCTVecRepos_;
d127 5
@


1.10
log
@Initial implementation of attributes.
@
text
@d95 4
@


1.9
log
@*** empty log message ***
@
text
@d77 5
d112 4
@


1.8
log
@*** empty log message ***
@
text
@d77 1
a77 1
   inline DblTVecRepos * myDblTVecRepos ()
d79 1
a79 1
      assert (myDblTVecRepos_ != NULL);
d81 1
a81 1
      return myDblTVecRepos_;
d107 1
a107 1
   DblTVecRepos * myDblTVecRepos_;
d109 1
a109 1
      // The DblTVecRepos owned by this ProbCoord.
@


1.7
log
@*** empty log message ***
@
text
@d77 1
a77 1
   inline DblTVecJiaRepos * myDblTVecJiaRepos ()
d79 1
a79 1
      assert (myDblTVecJiaRepos_ != NULL);
d81 1
a81 1
      return myDblTVecJiaRepos_;
d107 1
a107 1
   DblTVecJiaRepos * myDblTVecJiaRepos_;
d109 1
a109 1
      // The DblTVecJiaRepos owned by this ProbCoord.
@


1.6
log
@*** empty log message ***
@
text
@a47 4
   virtual void getDerivedInstance (ProbCoord * &);
      //
      // Override from class JAccObject.

@


1.5
log
@*** empty log message ***
@
text
@d52 4
@


1.4
log
@*** empty log message ***
@
text
@d40 1
a40 1
   ProbCoord ();
@


1.3
log
@*** empty log message ***
@
text
@d10 1
a10 1
#include <Problem.h>
d40 1
a40 1
   ProbCoord (Problem *);
@


1.2
log
@*** empty log message ***
@
text
@a64 5
   inline Problem * myProblem ()
      {
      return myProblem_;
      }

d101 1
a101 5
      // The WitRun owned by this Problem.

   Problem * const myProblem_;
      //
      // The Problem for this ProbCoord.
@


1.1
log
@*** empty log message ***
@
text
@d10 7
a16 1
#include <JAccObject.h>
d70 5
d104 4
@

