head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2011.04.13.22.36.24;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2011.04.13.21.50.34;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.13.17.27.28;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.12.00.33.11;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.11.18.38.18;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.06.15.18.19;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.05.22.25.43;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Removed namespace JniUtil.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File JniUtil.h.
//
// Contains the declarations of global functions within namespace JniUtil.
//------------------------------------------------------------------------------

#ifndef JniUtil_h
#define JniUtil_h

#include <Includes.h>

#include <jni.h>

//------------------------------------------------------------------------------
// Namespace JniUtil
//
// This namespace contains various global utility functions for interacting
// with JNI.
// By convention, all functions in this namespace have a JNIEnv * as their last
// argument for the function to use as its JNI environment.
//------------------------------------------------------------------------------

namespace WitJ
{


namespace JniUtil
{
void transferTo (
      _jobject *   theCppObjRepJObj,
      JavaAccObj * theJavaAccObj,
      JNIEnv *     theJNIEnv);
   //
   // Transfers ownership of theJavaAccObj to the Java CppObjRep referenced by
   // theCppObjRepJObj.

void nullifyCppObjectPtr (_jobject * theCppObjRepJObj, JNIEnv * theJNIEnv);
   //
   // theCppObjRepJObj must reference a Java CppObjRep.
   // Sets the myCppObjectAsLong field of the Java CppObjRep to null.

Coordinator * getCoordinator (_jobject *, JNIEnv *);
Problem *     getProblem     (_jobject *, JNIEnv *);
AttBldr *     getAttBldr     (_jobject *, JNIEnv *);
Att *         getAtt         (_jobject *, JNIEnv *);
MessageMgr *  getMessageMgr  (_jobject *, JNIEnv *);
Component *   getComponent   (_jobject *, JNIEnv *);
Part *        getPart        (_jobject *, JNIEnv *);
Demand *      getDemand      (_jobject *, JNIEnv *);
Operation *   getOperation   (_jobject *, JNIEnv *);
BomEntry *    getBomEntry    (_jobject *, JNIEnv *);
Substitute *  getSubstitute  (_jobject *, JNIEnv *);
BopEntry *    getBopEntry    (_jobject *, JNIEnv *);
   //
   // In each of these functions, the first argument must reference an instance
   // of the Java COR class matching the name.
   // The function returns the corresponding instance of the C++ class indicated
   // by the name.

JavaAccObj * getJavaAccObj (_jobject * theCppObjRepJObj, JNIEnv *);
   //
   // theCppObjRepJObj must must reference an instance of Java class CppObjRep.
   // Returns a pointer to the JavaAccObj owned by the CppObjRep.
   // Asserts that the pointer is not NULL.

_jobject * matchingIntegerJObj (int    theInt, JNIEnv * theJNIEnv);
_jobject * matchingDoubleJObj  (double theDbl, JNIEnv * theJNIEnv);
   //
   // Creates and returns a local reference to a Java Integer whose value
   //    matches theInt.
   // Creates and returns a local reference to a Java Double  whose value
   //    matches theDbl.
};

//
// End of namespace JniUtil.


};
//
// End of namespace WitJ.

#endif
@


1.6
log
@ArrayJOR classes
@
text
@@


1.5
log
@JniUtil
@
text
@a65 17
void copyInto (Boolean *, _jbooleanArray *, JNIEnv *);
void copyInto (int     *, _jintArray     *, JNIEnv *);
void copyInto (double  *, _jdoubleArray  *, JNIEnv *);
   //
   // Each of these functions copies the Java array referenced by the second
   // argument into the C-vector first argument.
   // It is assumed that the C-vector is the same length as the Java array
   // (normally nPeriods).

void copyBoundVecInto (
      double * &       theDblCTVec,
      _jdoubleArray  * theJDblArr,
      JNIEnv *);
   //
   // Same as copyInto, except that theJDblArr may be NULL (for a bound
   // vector) and if it is, then theDblCTVec will be set to NULL.

a72 10

void * getCVecFromJArrayCrit (_jarray * theJArr, JNIEnv *);
   //
   // Calls JNI's GetPrimitiveArrayCritical (...), checks for exceptions and
   // returns the result.

void releaseJArrayCritDontCopy (_jarray * theJArr, void * theCVec, JNIEnv *);
   //
   // Calls JNI's ReleasePrimitiveArrayCritical (...), instructing it not to
   // copy back from theCVec to theJArr.
@


1.4
log
@Class StringJOR
@
text
@a82 9
void copyInto (_jbooleanArray *, const Boolean *, JNIEnv *);
void copyInto (_jintArray     *, const int     *, JNIEnv *);
void copyInto (_jdoubleArray  *, const double  *, JNIEnv *);
   //
   // Each of these functions copies the C-vector second argument into the Java
   // array referenced by the first argument.
   // It is assumed that the C-vector is the same length as the Java array
   // (normally nPeriods).

a99 5

void releaseJArrayCritAndCopy (_jarray * theJArr, void * theCVec, JNIEnv *);
   //
   // Calls JNI's ReleasePrimitiveArrayCritical (...), instructing it to copy
   // back from theCVec to theJArr.
@


1.3
log
@Class WString
@
text
@a74 5
void copyInto (WString & theWString, _jstring * theJString, JNIEnv *);
   //
   // Copies the Java String referenced by theJString into theWString as a null
   // terminated string.

a91 5
_jstring * newJString (const char * theCString, JNIEnv * theJNIEnv);
   //
   // Creates a Java string that's a copy of theCString and creates and
   // returns a local reference to it.

@


1.2
log
@JniUtil
@
text
@d75 1
a75 1
void copyInto (String & theString, _jstring * theJString, JNIEnv *);
d77 2
a78 2
   // Copies the Java String referenced by theJString into theString as a
   // null terminated string.
@


1.1
log
@Namespace JniUtil.
@
text
@d37 5
d102 8
@

