head	1.38;
access;
symbols;
locks; strict;
comment	@ * @;


1.38
date	2008.09.26.22.50.16;	author rjw;	state dead;
branches;
next	1.37;

1.37
date	2008.09.26.20.46.04;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.09.26.20.31.19;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2008.09.26.19.48.41;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.09.25.20.24.41;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.09.24.16.26.36;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.09.23.16.42.19;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.09.19.16.29.50;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.09.15.16.20.38;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.09.12.18.57.24;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.09.09.20.04.07;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.09.09.18.59.58;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.09.09.15.38.19;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.09.08.19.45.34;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.08.28.18.30.37;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.08.27.15.30.45;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.08.06.18.48.21;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.08.01.16.29.32;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.07.22.21.08.58;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.07.21.21.44.07;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.07.21.20.58.06;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.07.18.15.49.40;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.07.11.23.02.52;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.07.01.16.09.21;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.19.20.15.06;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.18.21.28.17;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.05.29.15.51.16;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.05.28.18.10.11;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.05.22.21.02.58;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.22.14.19.16;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.21.22.09.34;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.21.14.33.48;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.20.18.16.39;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.19.22.20.54;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.19.16.15.30;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.16.17.07.05;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.15.19.45.17;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.20.54.11;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.38
log
@Changed name of C++ class JAccObject to JavaAccObj.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File JAccObject.h.
//
// Contains the declaration of class JAccObject.
//------------------------------------------------------------------------------

#ifndef JAccObject_h
#define JAccObject_h

#include <Includes.h>

//------------------------------------------------------------------------------
// Class JAccObject
//
// "Java Accessible Object"
// This class and the classes derived from it are set up to be accessible from
// the Java side of WIT-J.
//
// Class Hierarchy:
//
//    JAccObject
//       Session
//       MessageMgr
//       Problem
//       Component
//          GlobalComp
//          Part
//          Demand
//          Operation
//          BomEntry
//          Substitute
//          BopEntry
//       AttBldr
//       Att
//          GlobalScalarAtt <Value>
//          PartScalarAtt   <Value>
//          DemandScalarAtt <Value>
//          OpnScalarAtt    <Value>
//          BomScalarAtt    <Value>
//          SubScalarAtt    <Value>
//          BopScalarAtt    <Value>
//          GlobalVectorAtt <Elem>
//          PartVectorAtt   <Elem>
//          DemandVectorAtt <Elem>
//          OpnVectorAtt    <Elem>
//          BomVectorAtt    <Elem>
//          SubVectorAtt    <Elem>
//          BopVectorAtt    <Elem>
//------------------------------------------------------------------------------

namespace WitJ
{
class JAccObject
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   virtual ~JAccObject ();

   inline bool isValid ()
      {
      return (validityMarker_ == validMark_);
      }

   //---------------------------------------------------------------------------
   // as{derived class} functions.
   //
   // In each case, if this JAccObject is actually an instance of the
   // indicated derived class, the function returns that instance;
   // Otherwise, an error is issued.
   //---------------------------------------------------------------------------

   virtual Session *    asSession    ();
   virtual MessageMgr * asMessageMgr ();
   virtual Problem *    asProblem    ();
   virtual Component *  asComponent  ();
   virtual GlobalComp * asGlobalComp ();
   virtual Part *       asPart       ();
   virtual Demand *     asDemand     ();
   virtual Operation *  asOperation  ();
   virtual BomEntry *   asBomEntry   ();
   virtual Substitute * asSubstitute ();
   virtual BopEntry *   asBopEntry   ();
   virtual AttBldr *    asAttBldr    ();
   virtual Att *        asAtt        ();

   //---------------------------------------------------------------------------

   void attach (JavaObjRep * theJavaObjRep);
      //
      // Attaches theJavaObjRep to this JAccObject.

   //---------------------------------------------------------------------------

   WitRun * getWitRun ();
      //
      // Pass thru to mySession_.

   bool getExtractMode ();
      //
      // Pass thru to the Extractor.

   //---------------------------------------------------------------------------
   // Accessors.
   //---------------------------------------------------------------------------

   inline Session * getSession ()
      {
      return mySession_;
      }

   inline JavaObjRep * getJavaObjRep ()
      {
      witjAssert (myJavaObjRep_ != NULL);

      return myJavaObjRep_;
      }

   //---------------------------------------------------------------------------
   // Protected member functions.
   //---------------------------------------------------------------------------

   protected:

   explicit JAccObject (Session *);
      //
      // Constructor.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   JAccObject              (const JAccObject &);
   JAccObject & operator = (const JAccObject &);
      //
      // Not defined; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   JavaObjRep * myJavaObjRep_;
      //
      // The JavaObjRep for this JAccObject, if any; otherwise NULL.

   Session * const mySession_;
      //
      // The Session for this JAccObject.

   static const int validMark_;
      //
      // The value of the validityMarker_ data member of any valid JAccObject.

   int validityMarker_;
      //
      // This AccObject is currently valid (i.e., not destroyed), iff
      // validityMarker_ == validMark_.
   };
};
//
// End of namespace WitJ.

#endif
@


1.37
log
@Minor revision.
@
text
@@


1.36
log
@Changed name of C++ class JavaLink to JavaObjRep.
@
text
@d92 1
a92 1
   void store (JavaObjRep * theJavaObjRep);
d94 1
a94 1
      // Stores theJavaObjRep as myJavaObjRep_.
@


1.35
log
@Extraction
@
text
@d92 1
a92 1
   void store (JavaLink * theJavaLink);
d94 1
a94 1
      // Stores theJavaLink as asJavaLink_.
d115 1
a115 1
   inline JavaLink * getJavaLink ()
d117 1
a117 1
      witjAssert (myJavaLink_ != NULL);
d119 1
a119 1
      return myJavaLink_;
d147 1
a147 1
   JavaLink * myJavaLink_;
d149 1
a149 1
      // The JavaLink that owns this JAccObject.
@


1.34
log
@Extraction.
@
text
@d16 2
a17 2
// This class and the classes derived from it are intended to be accessible from
// Java.
@


1.33
log
@Intitial implementation of extraction of nPeriods.
@
text
@d117 2
@


1.32
log
@Continued implementation of C++ class JavaLink.
@
text
@d102 4
d115 5
@


1.31
log
@Class name change.
@
text
@d92 6
d136 4
d151 1
a151 1
      // validityMarker == validMark.
@


1.30
log
@Class name changes.
@
text
@d23 1
a23 1
//       MsgMgr
d77 1
a77 1
   virtual MsgMgr *     asMsgMgr     ();
@


1.29
log
@Initial implementation of MsgHandler classes.
@
text
@d23 1
a23 1
//       MsgHandler
d77 1
a77 1
   virtual MsgHandler * asMsgHandler ();
@


1.28
log
@Minor update.
@
text
@d23 1
d76 2
a78 1
   virtual Session *    asSession    ();
@


1.27
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@d89 6
@


1.26
log
@Removed Java class SessionCI.
Removed C++  class Session.
Kept the empty source files.
@
text
@d22 1
a22 1
//       ProbCoord
d76 1
a76 1
   virtual ProbCoord *  asProbCoord  ();
d92 1
a92 1
   inline ProbCoord * getProbCoord ()
d94 1
a94 1
      return myProbCoord_;
d103 1
a103 1
   explicit JAccObject (ProbCoord *);
d122 1
a122 1
   ProbCoord * const myProbCoord_;
d124 1
a124 1
      // The ProbCoord for this JAccObject.
@


1.25
log
@Initial implementation of the Session classes.
@
text
@a21 1
//       Session
a74 1
   virtual Session *    asSession    ();
@


1.24
log
@Name change: Global --> GlobalComp.
@
text
@d22 1
d76 1
@


1.23
log
@Attributes.
@
text
@d25 1
a25 1
//          Global
d78 1
a78 1
   virtual Global *     asGlobal     ();
@


1.22
log
@Classes Global and GlobalCI.
@
text
@d68 1
a68 1
   // This-derived-class-instance functions.
d75 12
a86 12
   virtual Problem *    thisProblem    ();
   virtual ProbCoord *  thisProbCoord  ();
   virtual Component *  thisComponent  ();
   virtual Global *     thisGlobal     ();
   virtual Part *       thisPart       ();
   virtual Demand *     thisDemand     ();
   virtual Operation *  thisOperation  ();
   virtual BomEntry *   thisBomEntry   ();
   virtual Substitute * thisSubstitute ();
   virtual BopEntry *   thisBopEntry   ();
   virtual AttBldr *    thisAttBldr    ();
   virtual Att *        thisAtt        ();
@


1.21
log
@Attributes.
@
text
@d25 1
a25 1
//          GlobalComp
d78 1
a78 1
   virtual GlobalComp * thisGlobalComp ();
@


1.20
log
@Attributes.
@
text
@d35 1
a35 1
//            PartScalarAtt <Value>
d37 4
a40 4
//             OpnScalarAtt <Value>
//             BomScalarAtt <Value>
//             SubScalarAtt <Value>
//             BopScalarAtt <Value>
d42 1
a42 1
//            PartVectorAtt <Elem>
d44 4
a47 4
//             OpnVectorAtt <Elem>
//             BomVectorAtt <Elem>
//             SubVectorAtt <Elem>
//             BopVectorAtt <Elem>
@


1.19
log
@Attributes.
@
text
@d34 14
a47 14
//          GlobalScalAtt <Value>
//            PartScalAtt <Value>
//          DemandScalAtt <Value>
//             OpnScalAtt <Value>
//             BomScalAtt <Value>
//             SubScalAtt <Value>
//             BopScalAtt <Value>
//           GlobalVecAtt <Elem>
//             PartVecAtt <Elem>
//           DemandVecAtt <Elem>
//              OpnVecAtt <Elem>
//              BomVecAtt <Elem>
//              SubVecAtt <Elem>
//              BopVecAtt <Elem>
@


1.18
log
@Attributes.
@
text
@d41 1
a41 1
//             PartVecAtt <Elem>
d44 4
@


1.17
log
@Attributes.
@
text
@d34 10
a43 4
//            SubScalAtt <Value>
//         BopEntScalAtt <Value>
//            PartVecAtt <Elem>
//          DemandVecAtt <Elem>
@


1.16
log
@Attribute.
@
text
@d52 5
d115 9
@


1.15
log
@Changed the names of access functions beginning with "my"
to begin with "get".
@
text
@d35 1
@


1.14
log
@Implemented the demandVol attribute.
@
text
@d76 1
a76 1
   inline ProbCoord * myProbCoord ()
@


1.13
log
@Attributes.
@
text
@d34 3
a36 1
//          PartVecAtt <Elem>
@


1.12
log
@Initial implementation of class AttBldr.
@
text
@d7 2
a8 2
#ifndef JAccObjectH
#define JAccObjectH
@


1.11
log
@Initial implementation of attributes.
@
text
@d32 1
d67 1
@


1.10
log
@*** empty log message ***
@
text
@d22 1
a23 1
//       ProbCoord
d32 2
d66 1
@


1.9
log
@*** empty log message ***
@
text
@d30 1
d62 1
@


1.8
log
@*** empty log message ***
@
text
@d30 1
d61 1
@


1.7
log
@*** empty log message ***
@
text
@d62 9
d76 1
a76 1
   explicit JAccObject ();
d90 8
@


1.6
log
@*** empty log message ***
@
text
@a44 24
   // getDerivedInstance (...) functions.
   //
   // Each of the functions has, as its only argument, a reference to a pointer
   // to an instance of a class derived from JAccObject.
   // If this JAccObject is actually an instance of that derived class, the
   // pointer is set to that instance.
   // Otherwise, an error is issued.
   //---------------------------------------------------------------------------

   virtual void getDerivedInstance (Problem    * &);
   virtual void getDerivedInstance (ProbCoord  * &);
   virtual void getDerivedInstance (Component  * &);
   virtual void getDerivedInstance (GlobalComp * &);
   virtual void getDerivedInstance (Part       * &);
   virtual void getDerivedInstance (Demand     * &);
   virtual void getDerivedInstance (Operation  * &);
   virtual void getDerivedInstance (BomEntry   * &);

   inline  void getDerivedInstance (JAccObject * & theJAccObject)
      {
      theJAccObject = this;
      }

   //---------------------------------------------------------------------------
@


1.5
log
@*** empty log message ***
@
text
@d78 1
a78 1
   virtual Component *  thisComp       ();
d82 2
a83 2
   virtual Operation *  thisOpn        ();
   virtual BomEntry *   thisBomEnt     ();
@


1.4
log
@*** empty log message ***
@
text
@d69 17
@


1.3
log
@*** empty log message ***
@
text
@d74 1
a74 1
   JAccObject ();
@


1.2
log
@*** empty log message ***
@
text
@d56 1
@


1.1
log
@*** empty log message ***
@
text
@d23 1
d55 1
@

