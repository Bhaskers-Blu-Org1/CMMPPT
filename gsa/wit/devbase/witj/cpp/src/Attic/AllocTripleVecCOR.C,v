head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2011.03.25.22.49.09;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2011.03.19.00.26.05;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.03.15.20.56.37;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.05.15.08.21;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.04.23.04.20;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@ArrayListJOR
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source file AllocTripleVecCOR.C.
//
// Contains the C++ implementations of the native methods of Java class
// witj.AllocTripleVecCOR.
//------------------------------------------------------------------------------

#include     <NativeMacros.h>
#include <ExceptionHandler.h>
#include       <NativeCall.h>
#include   <AllocTripleVec.h>
#include        <Component.h>
#include           <CORJOR.h>

using namespace WitJ;

//------------------------------------------------------------------------------

NATIVE_METHOD (void, AllocTripleVecCOR, createCppObject) (
      JNIEnv *   theJNIEnv,
      _jobject * theAllocTripleVecCORJObj,
      _jobject * theCoordCORJObj)
   {
   BEGIN_TRY_BLOCK

   NativeCall       theCall (theJNIEnv);
   Coordinator *    theCoord;
   AllocTripleVec * theAllocTripleVec;

   theCoord = theCall.getJavaAccObj (theCoordCORJObj)->asCoordinator ();

   theAllocTripleVec = new AllocTripleVec (theCoord);

   theCall.associate (theAllocTripleVecCORJObj, theAllocTripleVec);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (jint, AllocTripleVecCOR, getNTriples) (
      JNIEnv *   theJNIEnv,
      _jobject * theAllocTripleVecCORJObj)
   {
   BEGIN_TRY_BLOCK

   NativeCall       theCall (theJNIEnv);
   AllocTripleVec * theAllocTripleVec;

   theAllocTripleVec =
      theCall.getJavaAccObj (theAllocTripleVecCORJObj)->asAllocTripleVec ();

   return theAllocTripleVec->getNTriples ();

   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, 0)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (_jobject *, AllocTripleVecCOR, getComponentCOR) (
      JNIEnv *   theJNIEnv,
      _jobject * theAllocTripleVecCORJObj,
      jint       theIdx)
   {
   BEGIN_TRY_BLOCK

   NativeCall       theCall (theJNIEnv);
   AllocTripleVec * theAllocTripleVec;
   Component *      theComp;

   theAllocTripleVec =
      theCall.getJavaAccObj (theAllocTripleVecCORJObj)->asAllocTripleVec ();

   theComp = theAllocTripleVec->getComponent (theIdx);

   return theComp->getCORJOR ()->getCORJObj ();

   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, NULL)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (jint, AllocTripleVecCOR, getPeriod) (
      JNIEnv *   theJNIEnv,
      _jobject * theAllocTripleVecCORJObj,
      jint       theIdx)
   {
   BEGIN_TRY_BLOCK

   NativeCall       theCall (theJNIEnv);
   AllocTripleVec * theAllocTripleVec;

   theAllocTripleVec =
      theCall.getJavaAccObj (theAllocTripleVecCORJObj)->asAllocTripleVec ();

   return theAllocTripleVec->getPeriod (theIdx);

   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, 0)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (jdouble, AllocTripleVecCOR, getVolume) (
      JNIEnv *   theJNIEnv,
      _jobject * theAllocTripleVecCORJObj,
      jint       theIdx)
   {
   BEGIN_TRY_BLOCK

   NativeCall       theCall (theJNIEnv);
   AllocTripleVec * theAllocTripleVec;

   theAllocTripleVec =
      theCall.getJavaAccObj (theAllocTripleVecCORJObj)->asAllocTripleVec ();

   return theAllocTripleVec->getVolume (theIdx);

   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, 0)
   }
@


1.4
log
@Revised the arguments to eqHeurAlloc.
@
text
@@


1.3
log
@Renamed JavaObjRep to CORJOR.
@
text
@d30 1
a30 1
   theCoord          = theCall.getObject (theCoordCORJObj)->asCoordinator ();
d51 1
a51 1
      theCall.getObject (theAllocTripleVecCORJObj)->asAllocTripleVec ();
d72 1
a72 1
      theCall.getObject (theAllocTripleVecCORJObj)->asAllocTripleVec ();
d94 1
a94 1
      theCall.getObject (theAllocTripleVecCORJObj)->asAllocTripleVec ();
d114 1
a114 1
      theCall.getObject (theAllocTripleVecCORJObj)->asAllocTripleVec ();
@


1.2
log
@Changed the name each native method that creates a C++ object to
   createCppObject.
@
text
@d13 1
a13 1
#include       <JavaObjRep.h>
d76 1
a76 1
   return theComp->getJavaObjRep ()->getCORJObj ();
@


1.1
log
@Changed handling of Lists of AllocTriples to avoid call-backs.
@
text
@d19 1
a19 1
NATIVE_METHOD (void, AllocTripleVecCOR, createMyCppAllocTripleVec) (
@

