head	1.41;
access;
symbols;
locks; strict;
comment	@ * @;


1.41
date	2011.04.01.23.25.03;	author rjw;	state dead;
branches;
next	1.40;

1.40
date	2011.04.01.19.23.34;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2011.03.30.23.23.01;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2011.03.28.15.27.43;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2011.03.19.00.26.11;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2011.03.15.20.56.45;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2011.03.15.18.59.36;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2011.03.11.23.49.23;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.03.09.22.35.27;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.02.25.16.06.51;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.02.16.19.08.31;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.02.15.20.18.59;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2011.02.14.21.13.48;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2010.04.16.00.08.32;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2010.04.15.21.33.56;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2009.09.18.21.13.22;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2009.09.18.18.35.08;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2009.06.05.15.08.22;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2009.03.26.19.22.23;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2009.03.23.21.51.39;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2009.03.17.22.06.15;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.03.17.21.08.01;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.02.17.23.46.01;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.02.14.00.51.29;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.02.10.23.19.29;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.02.06.22.40.58;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.01.29.22.06.38;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.01.21.21.43.22;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.16.18.23.38;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.15.22.50.31;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.24.00.18.55;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.15.17.28.48;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.03.18.55.07;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.11.26.18.33.04;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.10.22.16.12.43;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.03.19.06.59;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.01.19.47.13;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.10.01.18.19.15;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.29.18.09.11;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.29.17.34.16;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.29.15.26.12;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.41
log
@JniAsst
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File NativeCall.h.
//
// Contains the declaration of class NativeCall.
//------------------------------------------------------------------------------

#ifndef NativeCall_h
#define NativeCall_h

#include <JniClient.h>

//------------------------------------------------------------------------------
// Class NativeCall
//
// Represents a call to a native method of a Java class.
//
// The expected mode of use of class NativeCall is as follows:
//
// * Declare an instance as a local variable in the C++ implementation of a
//   native method of a Java class.
// * Pass the first argument of the native method to the NativeCall's ctor.
// * Use the NativeCall's member functions instead of direct calls to JNI.
// * When the native method returns, the NativeCall's dtor will be invoked
//   automatically and perform any necessary JNI clean-up.
//
// Class Hierarchy:
//
// JniClient
//    NativeCall
//------------------------------------------------------------------------------

namespace WitJ
{
class NativeCall: public JniClient
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit NativeCall (JNIEnv * theJNIEnv);
      //
      // Constructor.
      //
      // theJNIEnv: The JNI environment for the native method.

   ~NativeCall ();
      //
      // Destructor.

   int getLength (_jarray * theJArr);
      //
      // Returns the length of the Java array referenced by theJArr.

   JavaAccObj * getJavaAccObj (_jobject * theCppObjRepJObj);
      //
      // theCppObjRepJObj is a JNI-object that must reference an instance of
      // Java class CppObjRep.
      // Returns a pointer to the JavaAccObj owned by the CppObjRep.
      // Asserts that the pointer is not NULL.

   //---------------------------------------------------------------------------
   // copyInto (theCTVec, theJArray) functions.
   //
   // Each of these functions copies theJArray, an array passed in from Java,
   // into theCTVec.
   //---------------------------------------------------------------------------
 
   void copyInto (Boolean *, _jbooleanArray *);
   void copyInto (int     *, _jintArray     *);
   void copyInto (double  *, _jdoubleArray  *);

   //---------------------------------------------------------------------------

   void copyInto (String & theString, _jstring * theJString);
      //
      // Copies the Java String referenced by theJString into theString as a
      // null terminated string.

   //---------------------------------------------------------------------------

   void copyBoundVecInto (
         double * &       theDblCTVec,
         _jdoubleArray  * theJDblArr);
      //
      // Same as copyInto, except that theJDblArr may be NULL (for a bound
      // vector) and if it is, then theDblCTVec will be set to NULL.

   //---------------------------------------------------------------------------
   // copyInto (theJArray, theCTVec) functions.
   //
   // Each of these functions copies theCTVec into theJArray, an array passed
   // in from Java.
   //---------------------------------------------------------------------------
 
   void copyInto (_jbooleanArray *, const Boolean *);
   void copyInto (_jintArray     *, const int     *);
   void copyInto (_jdoubleArray  *, const double  *);

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   void checkJArrayForTVec (_jarray * theJArr);
      //
      // Verifies that theJArr and this NativeCall are in a valid state for
      // copying theJArr to or from a time-vector.

   void * getCVecFromJArrayCrit (_jarray * theJArr);
      //
      // Calls JNI's GetPrimitiveArrayCritical (...), checks for exceptions and
      // returns the result.

   void releaseJArrayCritDontCopy (_jarray * theJArr, void * theCVec);
      //
      // Calls JNI's ReleasePrimitiveArrayCritical (...), instructing it not to
      // copy back from theCVec to theJArr.

   void releaseJArrayCritAndCopy (_jarray * theJArr, void * theCVec);
      //
      // Calls JNI's ReleasePrimitiveArrayCritical (...), instructing it to copy
      // back from theCVec to theJArr.

   inline int getNPeriods ();
      //
      // Pass-through.

   NativeCall              (const NativeCall &);
   NativeCall & operator = (const NativeCall &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   Coordinator * myCoordinator_;
      //
      // The Coordinator for this NativeCall, if one has been used;
      // otherwise NULL.
   };
};
//
// End of namespace WitJ.

#endif
@


1.40
log
@Replaced newHeldCString with copyInto.
@
text
@@


1.39
log
@Revised set/get ObjectiveList for ArrayList <String>.
@
text
@a11 2
#include      <list>

d76 7
a101 8

   const char * newHeldCString (_jstring * theJString);
      //
      // Creates  and returns a new c-string thats a copy of theJString.
      // The c-string is held in storage by this NativeCall, until this
      // NativeCall is destroyed, at which point the c-string is deleted.

   //---------------------------------------------------------------------------
a106 4
   void releaseCStrings ();
      //
      // Deletes the c-strings that were created and returned by newHeldCString.

a139 5
   std::list <char *> * heldCStrings_;
      //
      // The set of c-strings that have been created by newHeldCString.
      // NULL, if newHeldCString has not been called.

@


1.38
log
@Removed some #includes.
@
text
@a97 7
   void copyInto (
         StringVec &     theStringVec,
         _jobjectArray * theStringJObjArr);
      //
      // theStringJObjArr is a JNI-object-array that must reference a Java array
      // of Strings. Copies the Strings into theStringVec.

@


1.37
log
@Revised the arguments to eqHeurAlloc.
@
text
@a12 1
#include    <vector>
@


1.36
log
@Renamed JavaObjRep to CORJOR.
@
text
@a54 15
   static void setUpJni (JNIEnv * theJNIEnv, _jclass * theJClassForCppObjRep);
      //
      // Sets up the interaction between this class and JNI.
      // Arguments:
      //    theJNIEnv:             The JNI environment to be used.
      //    theJClassForCppObjRep: The _jclass for the Java class CppObjRep.

   void associate (_jobject * theCppObjRepJObj, JavaAccObj * theJavaAccObj);
      //
      // * Transfers ownership of theJavaAccObj to the Java CppObjRep
      //   referenced by theCppObjRepJObj.
      // * Constructs a CORJOR that represents the Java CppObjRep
      //   referenced by theCppObjRepJObj.
      // * Transfers ownership of the new CORJOR to theJavaAccObj.

d59 1
a59 11
   JavaAccObj * getIndexedObject  (
         _jobjectArray * theCppObjRepJObjArr,
         int             theIdx);
      //
      // theCppObjRepJObjArr is a JNI-object-array that must reference a Java
      // array of CppObjReps.
      // Returns a pointer to the JavaAccObj owned by the CppObjRep located at
      // theIdx in the Java array.
      // Asserts that the pointer is not NULL.

   JavaAccObj * getObject (_jobject * theCppObjRepJObj);
a65 7
   void nullifyCppObjectPtr (_jobject * theCppObjRepJObj);
      //
      // theCppObjRepJObj: A JNI-object that references an instance of Java
      //                   class CppObjRep.
      //
      // Sets the myCppObjectAsLong field of the CppObjRep instance to null.

a97 10
   // copyInto (theVec, theJArray) functions.
   //
   // Each of these functions copies theJArray (an array passed in from Java)
   // into theVec.
   //---------------------------------------------------------------------------

   void copyInto (std::vector <int>    &, _jintArray    *);
   void copyInto (std::vector <double> &, _jdoubleArray *);

   //---------------------------------------------------------------------------
a154 4
   static _jfieldID * ourMyCppObjectAsLongFid_;
      //
      // The JNI field ID for witj.CppObjRep.myCppObjectAsLong.

@


1.35
log
@Revised some comments.
@
text
@d66 1
a66 1
      // * Constructs a JavaObjRep that represents the Java CppObjRep
d68 1
a68 1
      // * Transfers ownership of the new JavaObjRep to theJavaAccObj.
@


1.34
log
@Problem.getCriticalList ()
@
text
@d65 1
a65 1
      //   represented by theCppObjRepJObj.
d67 1
a67 1
      //   represented by theCppObjRepJObj.
d72 1
a72 1
      // Returns the length of the Java array represented by theJArr.
d78 2
a79 2
      // theCppObjRepJObjArr is a JNI-object-array that is assumed to represent
      // Java array of CppObjReps.
d86 2
a87 2
      // theCppObjRepJObj is a JNI-object that is assumed to represent an
      // instance of Java class CppObjRep.
d93 1
a93 1
      // theCppObjRepJObj: A JNI-object that represents an instance of Java
d145 2
a146 2
      // theStringJObjArr is a JNI-object-array that is assumed to represent
      // Java array of Strings. Copies the Strings into theStringVec.
@


1.33
log
@Replaced calls to ctors for Java Integer and Double with valueOf.
@
text
@a60 4
      //
      // This function is to be called only from within the execution of the
      // Java method CppObjRep.setUpCppPortion (), which is statically
      // synchronized.
@


1.32
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@d201 1
a201 1
   static _jfieldID * ourFidForMyCppObjectAsLong_;
@


1.31
log
@CPLEX
@
text
@d95 1
a95 1
   static void deleteObject (JNIEnv * theJNIEnv, _jobject * theCppObjRepJObj);
a96 2
      // theJNIEnv:        The JNI environment for the native method that's
      //                   invoking this function.
d100 1
a100 3
      // Asserts that theCppObjRepJObj is not a NULL pointer.
      // Sets the myCppObjectAsLong field of the CppObjRep instance to
      // null and deletes the corresponding C++ JavaAccObj.
a163 12
   static JavaAccObj * getObject (
         JNIEnv *   theJNIEnv,
         _jobject * theCppObjRepJObj);
      //
      // theJNIEnv:        The JNI environment for the native method that's
      //                   invoking this function.
      // theCppObjRepJObj: A JNI-object that represents an instance of Java
      //                   class CppObjRep.
      //
      // Returns a pointer to the JavaAccObj owned by the CppObjRep instance.
      // Asserts that the pointer is not NULL.

@


1.30
log
@CPLEX
@
text
@d159 2
a160 2
      // The NativeCall retains a pointer to the c-string until the NativeCall
      // is destroyed, at which point the c-string is deleted.
@


1.29
log
@CPLEX
@
text
@d156 1
a156 1
   const char * makeCString (_jstring * theJString);
d158 3
a160 3
      // Creates a c-string copy of theJString, stores it, and returns it.
      // The returned c-string remains valid until this NativeCall is destroyed
      // at which point the returned c-string is deleted.
d182 1
a182 1
      // Deletes the c-strings that were created and returned by makeCString.
d221 1
a221 1
   std::list <char *> * storedCStrings_;
d223 2
a224 2
      // The set of c-strings that have been created by makeCString.
      // NULL, if makeCString has not been called.
@


1.28
log
@Multi-Obj Mode
@
text
@d55 1
a55 1
   void setUpJni (_jclass * theJClassForCppObjRep);
d58 2
a59 1
      // Argument:
a65 11
   _jmethodID * findJMethodID (
         const char * theClassName,
         const char * theMethName,
         const char * theMethDesc);
      //
      // Finds and returns the _jmethodID of a non-static WIT-J/Java method.
      // Arguments:
      //    theClassName: The name of the class to which the method belongs.
      //    theMethName:  The name of the method.
      //    theMethDesc:  The JNI method descriptor of the method.

@


1.27
log
@Multi-Obj Mode
@
text
@d170 1
a170 1
      // at which point the memory for the returned c-string is reclaimed.
d192 1
a192 2
      // Reclaims the memory for each of the c-strings that were created and
      // returned by makeCString.
d231 1
a231 6
   std::list <_jstring *> * storedJStrings_;
      //
      // The set of jstrings that have been passed to makeCString.
      // NULL, if makeCString has not been called.

   std::list <const char *> * storedCStrings_;
a234 2
      // The contents of storedJStrings_ and storedCStrings_ are stored in the
      // same order.
@


1.26
log
@Revised some comments.
@
text
@d159 7
@


1.25
log
@Implemented synchronized WIT-J/C++/JNI set-up.
@
text
@d60 4
@


1.24
log
@Changed the name each native method that creates a C++ object to
   createCppObject.
@
text
@d55 1
a55 3
   static void findJFieldIDs (
         JNIEnv *  theJNIEnv,
         _jclass * theJClassForCppObjRep);
d57 10
a66 1
      // Finds the _jfieldIDs needed by this class.
d68 3
a70 2
      //    theJNIEnv:             The JNI environment.
      //    theJClassForCppObjRep: The _jclass for the Java class CppObjRep.
@


1.23
log
@Replaced C++ classes CTVecHolder <...> and CTVecRes with CTVecSupply.
@
text
@d101 1
a101 1
      // Sets the myCppJavaAccObjAsLong field of the CppObjRep instance to
d209 1
a209 1
   static _jfieldID * ourFidForMyCppJavaAccObjAsLong_;
d211 1
a211 1
      // The JNI field ID for witj.CppObjRep.myCppJavaAccObjAsLong.
@


1.22
log
@Added theComp.setValueToScalar (...) methods.
@
text
@a103 5
   const double * makeBoundVec (_jdoubleArray * theJDblArr);
      //
      // Same as makeCTVec, except that theJDblArr is allowed to be NULL, in
      // which case, NULL is returned.

d105 1
a105 1
   // makeCTVec (theJArray) functions.
d107 2
a108 6
   // Each of these functions creates or reuses and returns a c-vector copy of
   // theJArray, an array of Elem passed in from Java. theJArray must be of
   // length nPeriods. The copy is owned by this NativeCall and remains valid
   // until this NativeCall is destroyed.
   // This function must only be called when the Java CppObjRep for this
   // NativeCall owns a JavaAccObj.
d110 4
a114 13
   const Boolean * makeCTVec (_jbooleanArray *);
   const int     * makeCTVec (_jintArray     *);
   const double  * makeCTVec (_jdoubleArray  *);

   //---------------------------------------------------------------------------
   // makeCTVecFromScalar (theValue) functions.
   //
   // Each of these functions creates or reuses and returns a c-vector of
   // length nPeriods in which element has been set to theValue.
   // The vector is owned by this NativeCall and remains valid until this
   // NativeCall is destroyed.
   // This function must only be called when the Java CppObjRep for this
   // NativeCall owns a JavaAccObj.
d117 6
a122 3
   const Boolean * makeCTVecFromScalar (jboolean);
   const int     * makeCTVecFromScalar (jint);
   const double  * makeCTVecFromScalar (jdouble);
d132 2
a133 2
   void copyInto (_jintArray     *, int           *);
   void copyInto (_jdoubleArray  *, double        *);
a199 4
   inline CTVecRes * getCTVecRes ();
      //
      // Pass-through.

@


1.21
log
@Removed non-portable assignments between _jdouble * and double *.
@
text
@d106 1
a106 1
      // Same as makeDblCTVec, except that theJDblArr is allowed to be NULL, in
d110 1
a110 1
   // make{Elem}CTVec (theJArray) functions.
d112 1
a112 1
   // Each of these functions creates (or reuses) and returns a c-vector copy of
d120 18
a137 3
   const Boolean * makeBoolCTVec (_jbooleanArray *);
   const int     * makeIntCTVec  (_jintArray     *);
   const double  * makeDblCTVec  (_jdoubleArray  *);
@


1.20
log
@Removed non-portable assignments between _jint * and int *.
@
text
@d181 1
a181 1
   void * getPrimitiveArrayCritical (_jarray * theJArr);
d183 1
a183 1
      // Calls JNI's getPrimitiveArrayCritical (...), checks for exceptions and
d186 10
@


1.19
log
@Removed the ShipTriple classes.
@
text
@d176 10
a206 5
   bool acquiredCTVecs_;
      //
      // True, iff this NativeCall has called a provide...CTVec () method at
      // least once.

@


1.18
log
@Implemented getPipSeq.
@
text
@d13 1
d136 10
@


1.17
log
@Replaced the AllocTarget classes with ShipTriple classes.
@
text
@d131 1
a131 1
   void copyInto (_jintArray     *, const int     *);
a135 5
   _jdoubleArray * makeJDblArray (double * theDblCVec, int theLength);
      //
      // Creates a Java array that's a copy of theDblCVec and is of length
      // theLength and returns a _jdoubleArray that represents it.

@


1.16
log
@Problem.eqHeurAlloc.
@
text
@d136 5
@


1.15
log
@Implemented Java class CppGateway.
@
text
@d71 14
d89 1
a89 1
      // Returns a pointer to the JavaAccObj owned by the CppObjRep instance.
@


1.14
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d63 1
a63 1
   void transferTo (_jobject * theCppObjRepJObj, JavaAccObj * theJavaAccObj);
d65 5
a69 2
      // Transfers ownership of theJavaAccObj to the Java CppObjRep
      // represented by theCppObjRepJObj.
@


1.13
log
@ProbMgr classes.
@
text
@d186 1
a186 1
   ProbMgr * myProbMgr_;
d188 1
a188 1
      // The ProbMgr for this NativeCall, if one has been used;
@


1.12
log
@Continued implementation of ProbCtr classes.
@
text
@a74 9
   JavaAccObj * getObjectTmp (_jobject * theCppObjRepJObj);
      //
      // theCppObjRepJObj is a JNI-object that is assumed to represent an
      // instance of Java class CppObjRep.
      // Returns a pointer to the JavaAccObj owned by the CppObjRep instance.
      // Asserts that the pointer is not NULL.
      //
      // Temporary Version

d186 1
a186 1
   Problem * myProblem_;
d188 1
a188 1
      // The Problem for this NativeCall, if one has been used;
@


1.11
log
@Added code to handle Java exceptions raised during the execution of JNI
   functions.
@
text
@d75 9
@


1.10
log
@Updated some comments.
@
text
@d27 5
@


1.9
log
@Minor changes.
@
text
@d154 1
a154 1
      // Not defined; prevents accidental copying and assignment.
@


1.8
log
@Removed C++ class Session.
@
text
@d141 1
a141 1
      // returned by makeCString (...).
d171 2
a172 2
      // The set of jstrings that have been passed to makeCString (...).
      // NULL, if makeCString (...) has not been called.
d176 2
a177 2
      // The set of c-strings that have been created by makeCString (...).
      // NULL, if makeCString (...) has not been called.
@


1.7
log
@Removed implicit conversions from int * to jint *.
@
text
@d181 1
a181 1
   Session * mySession_;
d183 1
a183 1
      // The Session for this NativeCall, if one has been used;
@


1.6
log
@Revised C++ class template VecWoa.
@
text
@d108 3
a110 3
   void copyInto (_jbooleanArray *, Boolean *);
   void copyInto (_jintArray     *, int     *);
   void copyInto (_jdoubleArray  *, double  *);
@


1.5
log
@Changed name of C++ class JniWrapper to JniClient.
@
text
@d102 1
a102 1
   // copyInto (theJArray, theVecWoa) functions.
d104 1
a104 1
   // Each of these functions copies theVecWoa into theJArray, an array passed
d108 3
a110 3
   void copyInto (_jbooleanArray *, VecWoa <Boolean> &);
   void copyInto (_jintArray *,     VecWoa <int>     &);
   void copyInto (_jdoubleArray *,  VecWoa <double>  &);
@


1.4
log
@Extraction
@
text
@d10 1
a10 1
#include <JniWrapper.h>
d12 1
a12 1
#include       <list>
d31 1
a31 1
class NativeCall: public JniWrapper
@


1.3
log
@Call-back infrastructure.
@
text
@a119 4
   _jstring * makeJString (const StringWoa & theStringWoa);
      //
      // Creates and returns a j-string copy of theStringWoa.

@


1.2
log
@Implemented C++ class JniWrapper.
@
text
@d17 1
a17 1
// Responsible for all interaction with JNI.
@


1.1
log
@Changed name of C++ class JniHandler to NativeCall.
@
text
@d10 1
a10 1
#include <Includes.h>
d12 1
a12 3
#include      <jni.h>

#include     <list>
d31 1
a31 1
class NativeCall
a57 5
   JavaObjRep * newJavaObjRep (_jobject * theJObject);
      //
      // Creates and returns a new JavaObjRep that represents the Java Object
      // represented by theJObject.

a123 4
   static void checkForJniException (JNIEnv * theJNIEnv);
      //
      // Handles any exception that has been thrown by JNI.

a167 5
   JNIEnv * const myJNIEnv_;
      //
      // The JNI environment for the native method within which this NativeCall
      // exists as a local variable.

@

