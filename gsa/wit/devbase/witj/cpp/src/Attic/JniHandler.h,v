head	1.39;
access;
symbols;
locks; strict;
comment	@ * @;


1.39
date	2008.09.29.15.26.12;	author rjw;	state dead;
branches;
next	1.38;

1.38
date	2008.09.29.15.05.36;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.09.27.00.37.58;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.09.26.22.50.16;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2008.09.26.22.21.22;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.09.26.20.46.05;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.09.26.20.31.20;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.09.26.19.48.41;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.09.25.20.24.41;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.09.25.18.52.27;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.09.24.21.53.26;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.09.24.16.26.36;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.09.23.15.50.37;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.09.12.14.43.22;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.09.11.22.22.46;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.09.09.18.59.58;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.09.05.18.34.06;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.08.28.15.37.58;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.08.06.15.39.29;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.08.05.21.55.55;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.08.05.20.46.46;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.07.18.20.29.15;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.07.18.15.49.40;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.06.18.21.28.17;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.05.30.16.33.36;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.05.30.15.52.19;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.05.29.20.53.56;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.05.28.20.24.46;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.05.28.18.10.11;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.05.23.22.58.33;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.22.21.02.58;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.22.14.03.18;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.21.22.09.35;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.21.18.56.01;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.21.18.07.12;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.20.21.31.25;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.20.20.37.02;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.20.18.16.40;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.20.15.24.49;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.39
log
@Changed name of C++ class JniHandler to NativeCall.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File JniHandler.h.
//
// Contains the declaration of class JniHandler.
//------------------------------------------------------------------------------

#ifndef JniHandler_h
#define JniHandler_h

#include <Includes.h>

#include      <jni.h>

#include     <list>

//------------------------------------------------------------------------------
// Class JniHandler
//
// Responsible for all interaction with JNI.
//
// The expected mode of use of class JniHandler is as follows:
//
// * Declare an instance as a local variable in the C++ implementation of a
//   native method of a Java class.
// * Pass the first argument of the native method to the JniHandler's ctor.
// * Use the JniHandler's member functions instead of direct calls to JNI.
// * When the native method returns, the JniHandler's dtor will be invoked
//   automatically and perform any necessary JNI clean-up.
//------------------------------------------------------------------------------

namespace WitJ
{
class JniHandler
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit JniHandler (JNIEnv * theJNIEnv);
      //
      // Constructor.
      //
      // theJNIEnv: The JNI environment for the native method.

   ~JniHandler ();
      //
      // Destructor.

   static void findJFieldIDs (
         JNIEnv *  theJNIEnv,
         _jclass * theJClassForCppObjRep);
      //
      // Finds the _jfieldIDs needed by this class.
      // Arguments:
      //    theJNIEnv:             The JNI environment.
      //    theJClassForCppObjRep: The _jclass for the Java class CppObjRep.

   JavaObjRep * newJavaObjRep (_jobject * theJObject);
      //
      // Creates and returns a new JavaObjRep that represents the Java Object
      // represented by theJObject.

   void transferTo (_jobject * theCppObjRepJObj, JavaAccObj * theJavaAccObj);
      //
      // Transfers ownership of theJavaAccObj to the Java CppObjRep
      // represented by theCppObjRepJObj.

   JavaAccObj * getObject (_jobject * theCppObjRepJObj);
      //
      // theCppObjRepJObj is a JNI-object that is assumed to represent an
      // instance of Java class CppObjRep.
      // Returns a pointer to the JavaAccObj owned by the CppObjRep instance.
      // Asserts that the pointer is not NULL.

   static void deleteObject (JNIEnv * theJNIEnv, _jobject * theCppObjRepJObj);
      //
      // theJNIEnv:        The JNI environment for the native method that's
      //                   invoking this function.
      // theCppObjRepJObj: A JNI-object that represents an instance of Java
      //                   class CppObjRep.
      //
      // Asserts that theCppObjRepJObj is not a NULL pointer.
      // Sets the myCppJavaAccObjAsLong field of the CppObjRep instance to
      // null and deletes the corresponding C++ JavaAccObj.

   const double * makeBoundVec (_jdoubleArray * theJDblArr);
      //
      // Same as makeDblCTVec, except that theJDblArr is allowed to be NULL, in
      // which case, NULL is returned.

   //---------------------------------------------------------------------------
   // make{Elem}CTVec (theJArray) functions.
   //
   // Each of these functions creates (or reuses) and returns a c-vector copy of
   // theJArray, an array of Elem passed in from Java. theJArray must be of
   // length nPeriods. The copy is owned by this JniHandler and remains valid
   // until this JniHandler is destroyed.
   // This function must only be called when the Java CppObjRep for this
   // JniHandler owns a JavaAccObj.
   //---------------------------------------------------------------------------

   const Boolean * makeBoolCTVec (_jbooleanArray *);
   const int     * makeIntCTVec  (_jintArray     *);
   const double  * makeDblCTVec  (_jdoubleArray  *);

   //---------------------------------------------------------------------------
   // copyInto (theJArray, theVecWoa) functions.
   //
   // Each of these functions copies theVecWoa into theJArray, an array passed
   // in from Java.
   //---------------------------------------------------------------------------
 
   void copyInto (_jbooleanArray *, VecWoa <Boolean> &);
   void copyInto (_jintArray *,     VecWoa <int>     &);
   void copyInto (_jdoubleArray *,  VecWoa <double>  &);

   //---------------------------------------------------------------------------

   const char * makeCString (_jstring * theJString);
      //
      // Creates a c-string copy of theJString, stores it, and returns it.
      // The returned c-string remains valid until this JniHandler is destroyed
      // at which point the memory for the returned c-string is reclaimed.

   _jstring * makeJString (const StringWoa & theStringWoa);
      //
      // Creates and returns a j-string copy of theStringWoa.

   static void checkForJniException (JNIEnv * theJNIEnv);
      //
      // Handles any exception that has been thrown by JNI.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   static JavaAccObj * getObject (
         JNIEnv *   theJNIEnv,
         _jobject * theCppObjRepJObj);
      //
      // theJNIEnv:        The JNI environment for the native method that's
      //                   invoking this function.
      // theCppObjRepJObj: A JNI-object that represents an instance of Java
      //                   class CppObjRep.
      //
      // Returns a pointer to the JavaAccObj owned by the CppObjRep instance.
      // Asserts that the pointer is not NULL.

   void releaseCStrings ();
      //
      // Reclaims the memory for each of the c-strings that were created and
      // returned by makeCString (...).

   inline int getNPeriods ();
      //
      // Pass-through.

   inline CTVecRes * getCTVecRes ();
      //
      // Pass-through.

   JniHandler              (const JniHandler &);
   JniHandler & operator = (const JniHandler &);
      //
      // Not defined; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   static _jfieldID * ourFidForMyCppJavaAccObjAsLong_;
      //
      // The JNI field ID for witj.CppObjRep.myCppJavaAccObjAsLong.

   JNIEnv * const myJNIEnv_;
      //
      // The JNI environment for the native method within which this JniHandler
      // exists as a local variable.

   bool acquiredCTVecs_;
      //
      // True, iff this JniHandler has called a provide...CTVec () method at
      // least once.

   std::list <_jstring *> * storedJStrings_;
      //
      // The set of jstrings that have been passed to makeCString (...).
      // NULL, if makeCString (...) has not been called.

   std::list <const char *> * storedCStrings_;
      //
      // The set of c-strings that have been created by makeCString (...).
      // NULL, if makeCString (...) has not been called.
      // The contents of storedJStrings_ and storedCStrings_ are stored in the
      // same order.

   Session * mySession_;
      //
      // The Session for this JniHandler, if one has been used;
      // otherwise NULL.
   };
};
//
// End of namespace WitJ.

#endif
@


1.38
log
@Moved macro nativeMethod to its own header file.
@
text
@@


1.37
log
@Extraction.
@
text
@d4 1
a4 3
// Contains:
//    The declaration of class JniHandler.
//    The declaration of macro nativeMethod (...).
a209 18
//------------------------------------------------------------------------------
// Macro nativeMethod (RetType, ClassID, methodID)
//
// Expands to the function prototype (except for the argument list) of a C++
// function that is the implmentation of a native method in the java portion of
// WIT-J.
// Arguments:
//
//    RetType:  The JNI return type
//    ClassID:  The Java class  identifier
//    methodID: The Java method identifier
//------------------------------------------------------------------------------

#define nativeMethod(RetType, ClassID, methodID)                               \
                                                                               \
   extern "C" JNIEXPORT RetType JNICALL                                        \
      Java_com_ibm_witj_ ## ClassID ## _ ## methodID                           \

@


1.36
log
@Changed name of C++ class JAccObject to JavaAccObj.
@
text
@d62 5
a71 5
   void attachRepFor (_jobject * theJObject, JavaAccObj * theJavaAccObj);
      //
      // Creates and new JavaObjRep that represents the Java Object
      // represented by theJObject and attaches it to theJavaAccObj.

@


1.35
log
@Numerous class name changes.
@
text
@d62 1
a62 1
   void transferTo (_jobject * theCppObjRepJObj, JAccObject * theJAccObject);
d64 1
a64 1
      // Transfers ownership of theJAccObject to the Java CppObjRep
d67 1
a67 1
   void attachRepFor (_jobject * theJObject, JAccObject * theJAccObject);
d70 1
a70 1
      // represented by theJObject and attaches it to theJAccObject.
d72 1
a72 1
   JAccObject * getObject (_jobject * theCppObjRepJObj);
d76 1
a76 1
      // Returns a pointer to the JAccObject owned by the CppObjRep instance.
d87 2
a88 2
      // Sets the myCppJAccObjectAsLong field of the CppObjRep instance to
      // null and deletes the corresponding C++ JAccObject.
d103 1
a103 1
   // JniHandler owns a JAccObject.
d143 1
a143 1
   static JAccObject * getObject (
d152 1
a152 1
      // Returns a pointer to the JAccObject owned by the CppObjRep instance.
d177 1
a177 1
   static _jfieldID * ourFidForMyCppJAccObjectAsLong_;
d179 1
a179 1
      // The JNI field ID for witj.CppObjRep.myCppJAccObjectAsLong.
@


1.34
log
@Minor revision.
@
text
@d55 1
a55 1
         _jclass * theJClassForCppInterface);
d59 2
a60 3
      //    theJNIEnv:                The JNI environment.
      //    theJClassForCppInterface: The _jclass for the Java class
      //                              CppInterface.
d62 1
a62 1
   void transferTo (_jobject * theCppInterfaceJObj, JAccObject * theJAccObject);
d64 2
a65 2
      // Transfers ownership of theJAccObject to the Java CppInterface
      // represented by theCppInterfaceJObj.
d72 1
a72 1
   JAccObject * getObject (_jobject * theCppInterfaceJObj);
d74 3
a76 3
      // theCppInterfaceJObj is a JNI-object that is assumed to represent an
      // instance of Java class CppInterface.
      // Returns a pointer to the JAccObject owned by the CppInterface instance.
d79 1
a79 3
   static void deleteObject (
         JNIEnv *   theJNIEnv,
         _jobject * theCppInterfaceJObj);
d81 4
a84 4
      // theJNIEnv:           The JNI environment for the native method that's
      //                      invoking this function.
      // theCppInterfaceJObj: A JNI-object that represents an instance of Java
      //                      class CppInterface.
d86 2
a87 2
      // Asserts that theCppInterfaceJObj is not a NULL pointer.
      // Sets the myCppJAccObjectAsLong field of the CppInterface instance to
d102 1
a102 1
   // This function must only be called when the Java CppInterface for this
d145 1
a145 1
         _jobject * theCppInterfaceJObj);
d147 4
a150 4
      // theJNIEnv:           The JNI environment for the native method that's
      //                      invoking this function.
      // theCppInterfaceJObj: A JNI-object that represents an instance of Java
      //                      class CppInterface.
d152 1
a152 1
      // Returns a pointer to the JAccObject owned by the CppInterface instance.
d179 1
a179 1
      // The JNI field ID for witj.CppInterface.myCppJAccObjectAsLong.
@


1.33
log
@Changed name of C++ class JavaLink to JavaObjRep.
@
text
@d68 1
a68 1
   void linkTo (_jobject * theJObject, JAccObject * theJAccObject);
d70 2
a71 2
      // Creates and new JavaObjRep that provides access to the Java Object
      // represented by theJObject and stores it in theJAccObject.
@


1.32
log
@Extraction
@
text
@d70 1
a70 1
      // Creates and new JavaLink that provides access to the Java Object
@


1.31
log
@Extraction.
@
text
@d63 1
a63 1
   void transferTo (_jobject * theCIJObj, JAccObject * theJAccObject);
d66 1
a66 1
      // represented by theCIJObj.
d68 1
a68 1
   void linkTo (_jobject * theCIJObj, JAccObject * theJAccObject);
d70 2
a71 2
      // Creates and new JavaLink that provides access to the Java CppInterface
      // represented by theCIJObj and stores it in theJAccObject.
d73 1
a73 1
   JAccObject * getObject (_jobject * theCIJObj);
d75 2
a76 2
      // theCIJObj is a JNI-object that is assumed to represent an instance of
      // Java class CppInterface.
d80 8
a87 1
   static void deleteObject (JNIEnv * theJNIEnv, _jobject * theCIJObj);
d89 1
a89 6
      // theJNIEnv: The JNI environment for the native method that's invoking
      //            this function.
      // theCIJObj: A JNI-object that represents an instance of Java class
      //            CppInterface.
      //
      // Asserts that theCIJObj is not a NULL pointer.
d146 8
a153 6
   static JAccObject * getObject (JNIEnv * theJNIEnv, _jobject * theCIJObj);
      //
      // theJNIEnv: The JNI environment for the native method that's invoking
      //            this function.
      // theCIJObj: A JNI-object that represents an instance of Java class
      //            CppInterface.
@


1.30
log
@Continued implementation of nPeriods extraction.
@
text
@d68 5
@


1.29
log
@Continued implementation of nPeriods extraction.
@
text
@d171 1
a171 1
   static _jfieldID * ourFidForMyCppJavaLinkAsLong_;
d173 1
a173 1
      // The JNI field ID for witj.CppInterface.myCppJavaLinkAsLong.
@


1.28
log
@Intitial implementation of extraction of nPeriods.
@
text
@d53 1
a53 1
   static void acquireJFieldIDs (
d57 1
a57 1
      // Acquires the _jfieldIDs needed by this class.
a130 3
      // theJNIEnv: The JNI environment for the native method that's invoking
      //            this function.
      //
@


1.27
log
@Initial implementation of C++ class JavaLink.
@
text
@d129 7
a156 7
   static void checkForJniException (JNIEnv * theJNIEnv);
      //
      // theJNIEnv: The JNI environment for the native method that's invoking
      //            this function.
      //
      // Handles any exception that has been thrown by JNI.

@


1.26
log
@Revised the use of class CTVecRes.
@
text
@d174 1
a174 1
   static _jfieldID * myFidForMyCppJAccObjectAsLong_;
d176 1
a176 1
      // The JNI field ID for witj.CppInterface.myCppJAccObjectAsLong.
@


1.25
log
@Moves C++ GlobalComp from Session to Problem.
@
text
@d158 6
d183 5
@


1.24
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@d157 2
@


1.23
log
@BoundSet attributes.
@
text
@d187 1
a187 1
   ProbCoord * myProbCoord_;
d189 1
a189 1
      // The ProbCoord for this JniHandler, if one has been used;
@


1.22
log
@"title" attribute.
@
text
@d86 5
@


1.21
log
@Class JniHandler.
@
text
@d116 1
a116 1
      // Creates a c-string equivalent of theJString, stores it, and returns it.
d120 4
@


1.20
log
@JniHandler class.
@
text
@a67 5
   void releaseJAccObject (_jobject * theCIJObj);
      //
      // Causes the Java CppInterface represented by theCIJObj to terminate
      // ownership of its JAccObject.

d75 11
d126 10
d141 7
@


1.19
log
@Fixed the segmentation error (probably).
@
text
@d68 5
a79 4
   void releaseProbCoord ();
      //
      // Removes the association of this JAccObject with a ProbCoord.

@


1.18
log
@Attributes.
@
text
@d75 4
@


1.17
log
@Attributes.
@
text
@d86 3
a88 3
   const int    * makeIntCTVec  (_jintArray     *);
   const double * makeDblCTVec  (_jdoubleArray  *);
   const int    * makeBoolCTVec (_jbooleanArray *);
d91 5
d97 5
a101 6
   void copyInto (
         _jdoubleArray *   theJDoubleArray,
         VecWoa <double> & theDblVecWoa);
      //
      // Copies theDblVecWoa into theJDoubleArray, a double array passed in from
      // Java.
@


1.16
log
@Attributes.
@
text
@d75 16
a90 8
   const double * makeDblCTVec (_jdoubleArray * theJDoubleArray);
      //
      // Creates (or reuses) and returns a c-vector copy of theJDoubleArray, a
      // double array passed in from Java. theJDoubleArray must be of length
      // nPeriods. The copy is owned by this JniHandler and remains valid until
      // this JniHandler is destroyed.
      // This function must only be called when the Java CppInterface for this
      // JniHandler owns a JAccObject.
@


1.15
log
@JniHandler
@
text
@d9 2
a10 2
#ifndef JniHandlerH
#define JniHandlerH
@


1.14
log
@JniHandler
@
text
@d68 6
a73 31
   //---------------------------------------------------------------------------
   // get<derived class instance> functions.
   //
   // In each case, the argument is a JNI-object that is assumed to represent an
   // instance of the Java class that extends CppInterface and holds a pointer
   // to an instance of the indicated C++ class.
   //
   // Returns the pointer to the instance of the indicated C++ class.
   //
   // Asserts that the pointer not NULL.
   // 
   // If the argument does not represent an instance of the Java class that
   // extends CppInterface and holds a pointer to an instance of the indicated
   // C++ class, an error is issued.
   //---------------------------------------------------------------------------

   JAccObject * getJAccObject (_jobject * theCIJObj);
   Problem *    getProblem    (_jobject * theProblemCIJObj);
   ProbCoord *  getProbCoord  (_jobject * theProbCoordCIJObj);
   Component *  getComponent  (_jobject * theCompCIJObj);
   GlobalComp * getGlobalComp (_jobject * theGlobalCompCIJObj);
   Part *       getPart       (_jobject * thePartCIJObj);
   Demand *     getDemand     (_jobject * theDemandCIJObj);
   Operation *  getOperation  (_jobject * theOpnCIJObj);
   BomEntry *   getBomEntry   (_jobject * theBomEntCIJObj);
   Substitute * getSubstitute (_jobject * theSubCIJObj);
   BopEntry *   getBopEntry   (_jobject * theBopEntCIJObj);
   AttBldr *    getAttBldr    (_jobject * theAttBldrCIJObj);
   Att *        getAtt        (_jobject * theAttCIJObj);

   //---------------------------------------------------------------------------
@


1.13
log
@Attributes.
@
text
@d26 2
a27 4
//   non-static native method of a Java class that inherits from (or is)
//   CppInterface.
// * Pass the first two arguments for the native method to the JniHandler's
//   ctor.
d43 1
a43 3
   explicit JniHandler (
         JNIEnv *   theJNIEnv,
         _jobject * theJObj);
a46 4
      // The arguments, theJNIEnv and theJObj, are to be the first two arguments
      // of the C++ version of the Java native method within which this
      // JniHandler been declared as a local variable:
      //
a47 6
      // theJObj:   The "this" pointer of the java native method, as a _jobject.
      //            Since the native method is to be a method of a Java class
      //            that inherits from (or is) CppInterface, the Java object
      //            represented by theJObj is therefore a CppInterface
      //            instance and is called "the Java CppInterface for this
      //            JniHandler".
d63 1
a63 1
   void attachToCI (JAccObject * theJAccObject);
d65 2
a66 2
      // Transfers ownership of theJAccObject to the Java CppInterface for this
      // JniHandler.
a78 3
   // If the argument is NULL (the default), it is taken to be the JNI-object   
   // that represents the Java CppInterface for this JniHandler.
   //
d84 13
a96 13
   JAccObject * getJAccObject (_jobject * theCIJObj           = NULL);
   Problem *    getProblem    (_jobject * theProblemCIJObj    = NULL);
   ProbCoord *  getProbCoord  (_jobject * theProbCoordCIJObj  = NULL);
   Component *  getComponent  (_jobject * theCompCIJObj       = NULL);
   GlobalComp * getGlobalComp (_jobject * theGlobalCompCIJObj = NULL);
   Part *       getPart       (_jobject * thePartCIJObj       = NULL);
   Demand *     getDemand     (_jobject * theDemandCIJObj     = NULL);
   Operation *  getOperation  (_jobject * theOpnCIJObj        = NULL);
   BomEntry *   getBomEntry   (_jobject * theBomEntCIJObj     = NULL);
   Substitute * getSubstitute (_jobject * theSubCIJObj        = NULL);
   BopEntry *   getBopEntry   (_jobject * theBopEntCIJObj     = NULL);
   AttBldr *    getAttBldr    (_jobject * theAttBldrCIJObj    = NULL);
   Att *        getAtt        (_jobject * theAttCIJObj        = NULL);
a150 7
   _jobject * const myJObj_;
      //
      // _jobject version of the Java CppInterface for this JniHandler.
      // Specifically, it is the _jobject version of the "this" pointer of the
      // java native method within which this JniHandler exists as a local
      // variable.

@


1.12
log
@Attributes
@
text
@d112 1
@


1.11
log
@Initial implementation of attributes.
@
text
@d126 2
a127 2
         _jdoubleArray * theJDoubleArray,
         DblVecWoa &     theDblVecWoa);
@


1.10
log
@*** empty log message ***
@
text
@d112 1
@


1.9
log
@*** empty log message ***
@
text
@d82 32
a113 5
   JAccObject * myObject ();
      //
      // Returns the JAccObject owned by the Java CppInterface for this
      // JniHandler.
      // Asserts that it is not NULL.
a130 6
   JAccObject * getObject (_jobject * theCppInterfaceAsJObject);
      //
      // theCppInterfaceAsJObject is a Java CppInterface, as a JNI-object.
      // Returns the JAccObject owned by the Java CppInterface.
      // Asserts that it is not NULL.

@


1.8
log
@*** empty log message ***
@
text
@d77 1
a77 1
   void attachToCppInterface (JAccObject * theJAccObject);
@


1.7
log
@*** empty log message ***
@
text
@d60 2
a61 2
      //            instance. This instance is taken to be the
      //            CppInterface corresponding to this JniHandler.
d79 2
a80 2
      // Transfers ownership of theJAccObject to the Java CppInterface
      // corresponding to this JniHandler.
d84 2
a85 2
      // Returns the JAccObject owned by the Java CppInterface corresponding to
      // this JniHandler.
d94 3
a96 1

d147 1
a147 2
      // _jobject version of the Java CppInterface corresponding to this
      // JniHandler.
@


1.6
log
@*** empty log message ***
@
text
@d88 7
d99 1
a99 1
      // Copies theDblVecWoa into theJDoubleArray, double array passed in from
d162 5
@


1.5
log
@*** empty log message ***
@
text
@d88 7
@


1.4
log
@*** empty log message ***
@
text
@d4 3
a6 1
// Contains the declaration of class JniHandler.
d25 5
a29 3
// * Declare an instance as a local variable in the implementation of a native
//   method of a Java class.
// * Pass the JNIEnv * argument for the native method to the JniHandler's ctor.
d45 3
a47 1
   explicit JniHandler (JNIEnv * theJNIEnv);
d50 12
a61 3
      // Argument:
      //    theJNIEnv: The JNI environment for the native method within which
      //               this JniHandler is to exist as a local variable.
d77 6
a82 3
   void acquireFor (
         _jobject *   theCppInterfaceAsJObject,
         JAccObject * theJAccObject);
d84 3
a86 2
      // theCppInterfaceAsJObject is a Java CppInterface, as a JNI-object.
      // Transfers ownership of theJAccObject to the CppInterface.
d129 8
d153 18
@


1.3
log
@*** empty log message ***
@
text
@d14 2
d78 2
a79 2
      // The memory for the c-string will be released when this JniHandler is
      // destroyed.
d87 5
d110 1
a110 1
   _jstring * myJString_;
d112 2
a113 1
      // ...
d115 1
a115 1
   const char * myCString_;
d117 4
a120 1
      // ...
@


1.2
log
@*** empty log message ***
@
text
@d60 1
a60 1
   void transferTo (
d67 1
a67 1
   JAccObject * objectOf (_jobject * theCppInterfaceAsJObject);
d73 6
d102 8
@


1.1
log
@*** empty log message ***
@
text
@d67 6
@

