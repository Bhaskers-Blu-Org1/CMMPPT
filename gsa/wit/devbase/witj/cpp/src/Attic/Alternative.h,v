head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2009.02.03.16.32.26;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2009.01.31.00.56.25;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.23.23.57.54;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Removed the Alternative classes.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File Alternative.h.
//
// Contains the declaration of class Alternative.
//------------------------------------------------------------------------------

#ifndef Alternative_h
#define Alternative_h

#include <JavaAccObj.h>

#include        <wit.h>

//------------------------------------------------------------------------------
// Class Alternative
//
// Represents a multiple-choice alternative.
// Each instance corresponds to a Java Enum instance.
//
// Class Hierarchy:
//
// JavaAccObj
//    Alternative
//------------------------------------------------------------------------------

namespace WitJ
{
class Alternative: public JavaAccObj
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   virtual Alternative * asAlternative ();
      //
      // Override from class JavaAccObj.

   static void createAllInstances (Coordinator * theCoord);
      //
      // Creates all instances of this class.
      // To be called exactly once per program process.

   static Alternative * findInstanceFor (const char * theAltNameCStr);
      //
      // Looks up and returns the Alternative whose name matches
      // theAltNameCStr.
      // Asserts that such an Alternative exists.

   witAttr getPartCategory ();
      //
      // Returns the Part Category witAttr modeled by this Alternative.
      // Asserts that there is one.

   static Alternative * findInstanceForPartCategory (witAttr theAttr);
      //
      // Looks up and returns the Alternative that models the Part Category
      // identified by theAttr.
      // Asserts that theAttr identifies a Part Category.

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   explicit Alternative (Coordinator * theCoord);

   virtual ~Alternative ();
      //
      // Destructor.
      // Not to be called.

   Alternative              (const Alternative &);
   Alternative & operator = (const Alternative &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   //---------------------------------------------------------------------------
   // The following are the only Alternatives that will exist in WIT-J.
   //---------------------------------------------------------------------------

   static Alternative * material_;
   static Alternative * capacity_;
   };
};
//
// End of namespace WitJ.

#endif
@


1.2
log
@Part.Category as Alternative
@
text
@@


1.1
log
@Alternative classes.
@
text
@d18 1
a18 1
// Corresponds to a witAttr in WIT.
d36 1
a36 1
   explicit Alternative (Coordinator * theCoord, const char * theAltNameCStr);
d38 1
a38 1
      // Constructs an Alternative corrsponding to theAltNameCStr.
d40 12
a51 1
   virtual ~Alternative ();
d53 2
a54 1
      // Destructor.
d56 1
a56 1
   virtual Alternative * asAlternative ();
d58 3
a60 1
      // Override from class JavaAccObj.
d68 3
a70 1
   static witAttr findWitAttrFor (const char * theAltNameCStr);
d72 2
a73 2
      // Looks up and returns the witAttr that corresponds to theAltNameCStr, if
      // any; otherwise throws an exception.
d84 6
a89 3
   const witAttr myWitAttr_;
      //
      // The witAttr for this Alternative.
@

