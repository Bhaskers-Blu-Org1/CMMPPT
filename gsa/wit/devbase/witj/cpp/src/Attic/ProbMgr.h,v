head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2009.01.21.21.43.23;	author rjw;	state dead;
branches;
next	1.8;

1.8
date	2009.01.20.22.05.03;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.16.22.47.09;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.16.21.11.47;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.16.20.55.48;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.16.19.42.43;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.16.19.09.00;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.16.18.49.18;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.16.17.03.35;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File ProbMgr.h.
//
// Contains the declaration of class   ProbMgr.
//------------------------------------------------------------------------------

#ifndef ProbMgr_h
#define ProbMgr_h

#include <JavaAccObj.h>

//------------------------------------------------------------------------------
// Class ProbMgr
//
// "Problem Manager"
// The central object responsible for internal housekeeping for a Problem.
//
// Class Hierarchy:
//
// JavaAccObj
//    ProbMgr
//------------------------------------------------------------------------------

namespace WitJ
{
class ProbMgr: public JavaAccObj
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit ProbMgr ();
      //
      // Constructor.

   ~ProbMgr ();
      //
      // Destructor.
   
   virtual ProbMgr * asProbMgr ();
      //
      // Override from class JavaAccObj.

   void store (Problem * theProblem);
      //
      // Asserts that myProblem_ is NULL.
      // Sets myProblem_ to theProblem.

   void store (GlobalElement * theGlobalElement);
      //
      // Stores theGlobalElement as myGlobalElement_.
      // Must be called exactly once.

   void freezeNPeriods ();
      //
      // Takes action appropriate when the first Part or Operation is created,
      // so that nPeriods can no longer be changed.

   //---------------------------------------------------------------------------
   // Find{Element Class} functions.
   //
   // Each of these functions finds and returns the instance of the indicated
   // Element class identified by the arguments.
   // If the Element does not exist, WIT will issue a severe error.
   //---------------------------------------------------------------------------

   Part *      findPart      (const char * thePartName);
   Operation * findOperation (const char * theOpnName);
   BomEntry *  findBomEntry  (const char * theOpnName,
                              int          theBomIndex);

   //---------------------------------------------------------------------------
   // Accessors.
   //---------------------------------------------------------------------------

   inline Problem * getProblem ()
      {
      EXCEPTION_ASSERT (myProblem_ != NULL);

      return myProblem_;
      }

   inline WitRun * getWitRun ()
      {
      return myWitRun_;
      }

   inline GlobalElement * getGlobalElement ()
      {
      return myGlobalElement_;
      }

   inline Extractor * getExtractor ()
      {
      return myExtractor_;
      }

   inline CTVecRes * getCTVecRes ()
      {
      EXCEPTION_ASSERT (myCTVecRes_ != NULL);

      return myCTVecRes_;
      }

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   ProbMgr              (const ProbMgr &);
   ProbMgr & operator = (const ProbMgr &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   Problem * myProblem_;
      //
      // The Problem for this ProbMgr, if any; otherwise NULL.

   WitRun * myWitRun_;
      //
      // The WitRun owned by this ProbMgr.

   GlobalElement * myGlobalElement_;
      //
      // The GlobalElement for this ProbMgr.

   CTVecRes * myCTVecRes_;
      //
      // The CTVecRes that belongs to this ProbMgr, if any; otherwise NULL.

   Extractor * myExtractor_;
      // 
      // The Extractor that belongs to this ProbMgr.
   };
};
//
// End of namespace WitJ.

#endif
@


1.8
log
@Continued implementation of the ProbMgr classes.
@
text
@@


1.7
log
@ProbMgr classes.
@
text
@a3 1
// Contains the declaration of typedef SimpleWitFunc
a11 17
#include        <wit.h>

#include        <map>
#include     <string>

//------------------------------------------------------------------------------
// Typedef SimpleWitFunc
// "Simple WIT API Function"
//
// A pointer to a WIT API function whose only argument is the WitRun *.
//------------------------------------------------------------------------------

namespace WitJ
{
typedef WIT_DECLSPEC witReturnCode STDCALL (* SimpleWitFunc) (WitRun * const);
}

a60 5
   void callSimpleWitFunc (const char * theFuncName);
      //
      // Calls the simple WIT API function whose name is given by theFuncName.
      // Asserts that such a function has been defined.

a112 8
   void defineAllSimpleWitFuncs ();
      //
      // Populates mySimpleWitFuncMap_.

   void defineSimpleWitFunc (const char * theFuncName, SimpleWitFunc theFunc);
      //
      // Creates an entry in mySimpleWitFuncMap_ mapping theFuncName to theFunc;

a140 5

   std::map <std::string, SimpleWitFunc> mySimpleWitFuncMap_;
      //
      // Maps the name of a simple WIT API function to the corresponding
      // function pointer.
@


1.6
log
@ProbMgr classes.
@
text
@d34 1
a34 1
// The internal manager of a Problem.
@


1.5
log
@ProbMgr classes.
@
text
@d85 13
@


1.4
log
@ProbMgr classes.
@
text
@d4 2
a5 1
// Contains the declaration of class ProbMgr.
d13 17
d79 5
d123 8
d159 5
@


1.3
log
@ProbMgr classes.
@
text
@d82 5
d124 4
@


1.2
log
@ProbMgr classes.
@
text
@d56 5
d82 7
d115 4
@


1.1
log
@Change the mname of the ProbCtr classes to ProbMgr in both Java and C++.
@
text
@d51 5
d72 5
d99 4
@

