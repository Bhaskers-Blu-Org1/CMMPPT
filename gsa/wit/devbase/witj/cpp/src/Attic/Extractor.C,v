head	1.37;
access;
symbols;
locks; strict;
comment	@ * @;


1.37
date	2009.02.26.22.46.58;	author rjw;	state dead;
branches;
next	1.36;

1.36
date	2009.02.24.17.44.56;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2009.02.14.00.51.28;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2009.02.03.23.18.06;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2009.02.03.16.32.26;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2009.01.31.00.56.25;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2009.01.23.19.32.23;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2009.01.23.18.46.53;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2009.01.21.21.43.21;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2009.01.16.21.11.47;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2009.01.16.19.42.43;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2009.01.16.18.49.18;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.12.22.16.29.11;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.12.15.17.28.47;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.12.12.19.29.25;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.10.14.22.17.45;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.10.11.00.10.38;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.10.10.22.25.14;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.10.10.17.33.17;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.10.07.18.50.23;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.10.06.22.25.45;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.10.06.22.14.01;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.10.06.14.52.39;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.10.03.21.47.50;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.10.03.20.35.52;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.10.03.19.43.26;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.10.03.18.07.56;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.10.02.21.45.13;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.10.02.17.34.35;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.10.02.15.13.51;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.10.01.18.19.15;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.30.16.14.56;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.26.20.31.19;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.24.19.57.53;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.24.16.26.35;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.22.15.26.56;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.19.21.59.26;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.37
log
@Removed C++ class Extractor.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File Extractor.C.
//
// Contains the implementation of class Extractor.
//------------------------------------------------------------------------------

#include     <Extractor.h>
#include   <Coordinator.h>
#include <GlobalElement.h>
#include          <Part.h>
#include    <JavaObjRep.h>
#include        <VecWoa.h>

#include           <wit.h>

//------------------------------------------------------------------------------

WitJ::Extractor::Extractor (Coordinator * theCoord):

      myCoordinator_ (theCoord),
      myWitRun_      (theCoord->getWitRun ()),
      myExtractMode_ (false)
   {
   }

//------------------------------------------------------------------------------

WitJ::Extractor::~Extractor ()
   {
   }

//------------------------------------------------------------------------------

void WitJ::Extractor::extract ()
   {
   EXCEPTION_ASSERT (! myExtractMode_);

   myExtractMode_ = true;

   extractNPeriods ();

   extractElements ();

   myExtractMode_ = false;
   }

//------------------------------------------------------------------------------

void WitJ::Extractor::extractNPeriods ()
   {
   int nPeriodsVal;

   witGetNPeriods (myWitRun_, & nPeriodsVal);
   
   JavaObjRep::setNPeriods (myCoordinator_->getGlobalElement (), nPeriodsVal);
   }

//------------------------------------------------------------------------------

void WitJ::Extractor::extractElements ()
   {
   witAttr theState;

   witGetObjItrState (myWitRun_, & theState);

   EXCEPTION_ASSERT (theState == WitINACTIVE);

   while (true)
      {
      witAdvanceObjItr (myWitRun_);

      witGetObjItrState (myWitRun_, & theState);

      if (theState == WitINACTIVE)
         break;

      else if (theState == WitAT_PART)
         extractPart ();

      else if (theState == WitAT_DEMAND)
         extractDemand ();

      else if (theState == WitAT_OPERATION)
         extractOperation ();

      else if (theState == WitAT_BOM_ENTRY)
         extractBomEntry ();

      else if (theState == WitAT_SUB_ENTRY)
         extractSubstitute ();

      else if (theState == WitAT_BOP_ENTRY)
         extractBopEntry ();

      else
         EXCEPTION_ASSERT (false);
      }
   }

//------------------------------------------------------------------------------

void WitJ::Extractor::extractPart ()
   {
   StringWoa thePartNameWoa;
   witAttr   theCategoryAttr;
   bool      theCategoryIsMaterial;

   witGetObjItrPart   (myWitRun_, thePartNameWoa.getCVecAddr ());

   witGetPartCategory (myWitRun_, thePartNameWoa.getCVec (), & theCategoryAttr);

   theCategoryIsMaterial = (theCategoryAttr == WitMATERIAL);

   JavaObjRep::makePart (
      myCoordinator_,
      thePartNameWoa.getCVec (),
      theCategoryIsMaterial);
   }

//------------------------------------------------------------------------------

void WitJ::Extractor::extractDemand ()
   {
   StringWoa thePartNameWoa;
   StringWoa theDemandNameWoa;
   Part *    thePart;

   witGetObjItrDemand (
      myWitRun_,
      thePartNameWoa  .getCVecAddr (),
      theDemandNameWoa.getCVecAddr ());

   thePart = myCoordinator_->findPart (thePartNameWoa.getCVec ());

   JavaObjRep::makeDemand (thePart, theDemandNameWoa.getCVec ());
   }

//------------------------------------------------------------------------------

void WitJ::Extractor::extractOperation ()
   {
   StringWoa theOpnNameWoa;

   witGetObjItrOperation (myWitRun_, theOpnNameWoa.getCVecAddr ());

   JavaObjRep::makeOperation (myCoordinator_, theOpnNameWoa.getCVec ());
   }

//------------------------------------------------------------------------------

void WitJ::Extractor::extractBomEntry ()
   {
   StringWoa   theOpnNameWoa;
   int         theBomIndex;
   Operation * theOpn;
   StringWoa   thePartNameWoa;
   Part *      thePart;

   witGetObjItrBomEntry (
      myWitRun_,
      theOpnNameWoa.getCVecAddr (),
    & theBomIndex);

   theOpn = myCoordinator_->findOperation (theOpnNameWoa.getCVec ());

   witGetBomEntryConsumedPart (
      myWitRun_,
      theOpnNameWoa.getCVec (),
      theBomIndex,
      thePartNameWoa.getCVecAddr ());

   thePart = myCoordinator_->findPart (thePartNameWoa.getCVec ());

   JavaObjRep::makeBomEntry (theOpn, thePart);
   }

//------------------------------------------------------------------------------

void WitJ::Extractor::extractSubstitute ()
   {
   StringWoa  theOpnNameWoa;
   int        theBomIndex;
   int        theSubIndex;
   BomEntry * theBomEnt;
   StringWoa  thePartNameWoa;
   Part *     thePart;

   witGetObjItrSubsBomEntry (
      myWitRun_,
      theOpnNameWoa.getCVecAddr (),
    & theBomIndex,
    & theSubIndex);

   theBomEnt =
      myCoordinator_->findBomEntry (theOpnNameWoa.getCVec (), theBomIndex);

   witGetSubsBomEntryConsumedPart (
      myWitRun_,
      theOpnNameWoa.getCVec (),
      theBomIndex,
      theSubIndex,
      thePartNameWoa.getCVecAddr ());

   thePart = myCoordinator_->findPart (thePartNameWoa.getCVec ());

   JavaObjRep::makeSubstitute (theBomEnt, thePart);
   }

//------------------------------------------------------------------------------

void WitJ::Extractor::extractBopEntry ()
   {
   StringWoa   theOpnNameWoa;
   int         theBopIndex;
   Operation * theOpn;
   StringWoa   thePartNameWoa;
   Part *      thePart;

   witGetObjItrBopEntry (
      myWitRun_,
      theOpnNameWoa.getCVecAddr (),
    & theBopIndex);

   theOpn = myCoordinator_->findOperation (theOpnNameWoa.getCVec ());

   witGetBopEntryProducedPart (
      myWitRun_,
      theOpnNameWoa.getCVec (),
      theBopIndex,
      thePartNameWoa.getCVecAddr ());

   thePart = myCoordinator_->findPart (thePartNameWoa.getCVec ());

   JavaObjRep::makeBopEntry (theOpn, thePart);
   }
@


1.36
log
@Part.Category by boolean.
@
text
@@


1.35
log
@Implemented getPipSeq.
@
text
@d104 3
a106 3
   StringWoa    thePartNameWoa;
   witAttr      thePartCatAttr;
   const char * thePartCatNameCStr;
d110 1
a110 1
   witGetPartCategory (myWitRun_, thePartNameWoa.getCVec (), & thePartCatAttr);
d112 1
a112 1
   thePartCatNameCStr = Part::findCategoryName (thePartCatAttr);
d117 1
a117 1
      thePartCatNameCStr);
@


1.34
log
@Part Category
@
text
@d108 1
a108 1
   witGetObjItrPart   (myWitRun_, & thePartNameWoa);
d110 1
a110 1
   witGetPartCategory (myWitRun_, thePartNameWoa, & thePartCatAttr);
d114 4
a117 1
   JavaObjRep::makePart (myCoordinator_, thePartNameWoa, thePartCatNameCStr);
d128 4
a131 1
   witGetObjItrDemand (myWitRun_, & thePartNameWoa, & theDemandNameWoa);
d133 1
a133 1
   thePart = myCoordinator_->findPart (thePartNameWoa);
d135 1
a135 1
   JavaObjRep::makeDemand (thePart, theDemandNameWoa);
d144 1
a144 1
   witGetObjItrOperation (myWitRun_, & theOpnNameWoa);
d146 1
a146 1
   JavaObjRep::makeOperation (myCoordinator_, theOpnNameWoa);
d159 4
a162 1
   witGetObjItrBomEntry (myWitRun_, & theOpnNameWoa, & theBomIndex);
d164 1
a164 1
   theOpn = myCoordinator_->findOperation (theOpnNameWoa);
d168 1
a168 1
      theOpnNameWoa,
d170 1
a170 1
    & thePartNameWoa);
d172 1
a172 1
   thePart = myCoordinator_->findPart (thePartNameWoa);
d190 1
a190 1
    & theOpnNameWoa,
d194 2
a195 1
   theBomEnt = myCoordinator_->findBomEntry (theOpnNameWoa, theBomIndex);
d199 1
a199 1
      theOpnNameWoa,
d202 1
a202 1
    & thePartNameWoa);
d204 1
a204 1
   thePart = myCoordinator_->findPart (thePartNameWoa);
d219 4
a222 1
   witGetObjItrBopEntry (myWitRun_, & theOpnNameWoa, & theBopIndex);
d224 1
a224 1
   theOpn = myCoordinator_->findOperation (theOpnNameWoa);
d228 1
a228 1
      theOpnNameWoa,
d230 1
a230 1
    & thePartNameWoa);
d232 1
a232 1
   thePart = myCoordinator_->findPart (thePartNameWoa);
@


1.33
log
@Removed the Alternative classes.
@
text
@d104 3
a106 3
   StringWoa thePartNameWoa;
   witAttr   thePartCatAttr;
   int       thePartCatIdx;
d112 1
a112 1
   thePartCatIdx = Part::findCategoryIndex (thePartCatAttr);
d114 1
a114 1
   JavaObjRep::makePart (myCoordinator_, thePartNameWoa, thePartCatIdx);
@


1.32
log
@Part.Category as Alternative
@
text
@d10 1
a10 1
#include   <Alternative.h>
d104 3
a106 3
   StringWoa     thePartNameWoa;
   witAttr       theAttr;
   Alternative * thePartCatAlt;
d110 1
a110 1
   witGetPartCategory (myWitRun_, thePartNameWoa, & theAttr);
d112 1
a112 1
   thePartCatAlt = Alternative::findInstanceForPartCategory (theAttr);
d114 1
a114 1
   JavaObjRep::makePart (myCoordinator_, thePartNameWoa, thePartCatAlt);
@


1.31
log
@Coordinator
@
text
@d10 1
d104 3
a106 3
   StringWoa thePartNameWoa;
   witAttr   theCategory;
   bool      theCategoryIsMat;
d110 1
a110 1
   witGetPartCategory (myWitRun_, thePartNameWoa, & theCategory);
d112 1
a112 1
   theCategoryIsMat = (theCategory == WitMATERIAL);
d114 1
a114 1
   JavaObjRep::makePart (myCoordinator_, thePartNameWoa, theCategoryIsMat);
@


1.30
log
@Coordinator
@
text
@d17 1
a17 1
WitJ::Extractor::Extractor (Coordinator * theCoordinator):
d19 2
a20 2
      myCoordinator_ (theCoordinator),
      myWitRun_      (theCoordinator->getWitRun ()),
@


1.29
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@a8 1
#include       <Problem.h>
d113 1
a113 4
   JavaObjRep::makePart (
      myCoordinator_->getProblem (),
      thePartNameWoa,
      theCategoryIsMat);
d139 1
a139 1
   JavaObjRep::makeOperation (myCoordinator_->getProblem (), theOpnNameWoa);
@


1.28
log
@ProbMgr classes.
@
text
@d8 1
a8 1
#include       <ProbMgr.h>
d18 1
a18 1
WitJ::Extractor::Extractor (ProbMgr * theProbMgr):
d20 2
a21 2
      myProbMgr_     (theProbMgr),
      myWitRun_      (theProbMgr->getWitRun ()),
d55 1
a55 1
   JavaObjRep::setNPeriods (myProbMgr_->getGlobalElement (), nPeriodsVal);
d115 1
a115 1
      myProbMgr_->getProblem (),
d130 1
a130 1
   thePart = myProbMgr_->findPart (thePartNameWoa);
d143 1
a143 1
   JavaObjRep::makeOperation (myProbMgr_->getProblem (), theOpnNameWoa);
d158 1
a158 1
   theOpn = myProbMgr_->findOperation (theOpnNameWoa);
d166 1
a166 1
   thePart = myProbMgr_->findPart (thePartNameWoa);
d188 1
a188 1
   theBomEnt = myProbMgr_->findBomEntry (theOpnNameWoa, theBomIndex);
d197 1
a197 1
   thePart = myProbMgr_->findPart (thePartNameWoa);
d214 1
a214 1
   theOpn = myProbMgr_->findOperation (theOpnNameWoa);
d222 1
a222 1
   thePart = myProbMgr_->findPart (thePartNameWoa);
@


1.27
log
@ProbMgr classes.
@
text
@d130 1
a130 1
   thePart = myProbMgr_->getProblem ()->findPart (thePartNameWoa);
d158 1
a158 1
   theOpn = myProbMgr_->getProblem ()->findOperation (theOpnNameWoa);
d166 1
a166 1
   thePart = myProbMgr_->getProblem ()->findPart (thePartNameWoa);
d188 1
a188 2
   theBomEnt =
      myProbMgr_->getProblem ()->findBomEntry (theOpnNameWoa, theBomIndex);
d197 1
a197 1
   thePart = myProbMgr_->getProblem ()->findPart (thePartNameWoa);
d214 1
a214 1
   theOpn = myProbMgr_->getProblem ()->findOperation (theOpnNameWoa);
d222 1
a222 1
   thePart = myProbMgr_->getProblem ()->findPart (thePartNameWoa);
@


1.26
log
@ProbMgr classes.
@
text
@d18 1
a18 1
WitJ::Extractor::Extractor (Problem * theProblem):
d20 2
a21 2
      myProblem_     (theProblem),
      myWitRun_      (theProblem->getWitRun ()),
d55 1
a55 3
   JavaObjRep::setNPeriods (
      myProblem_->getProbMgr ()->getGlobalElement (),
      nPeriodsVal);
d114 4
a117 1
   JavaObjRep::makePart (myProblem_, thePartNameWoa, theCategoryIsMat);
d130 1
a130 1
   thePart = myProblem_->findPart (thePartNameWoa);
d143 1
a143 1
   JavaObjRep::makeOperation (myProblem_, theOpnNameWoa);
d158 1
a158 1
   theOpn = myProblem_->findOperation (theOpnNameWoa);
d166 1
a166 1
   thePart = myProblem_->findPart (thePartNameWoa);
d188 2
a189 1
   theBomEnt = myProblem_->findBomEntry (theOpnNameWoa, theBomIndex);
d198 1
a198 1
   thePart = myProblem_->findPart (thePartNameWoa);
d215 1
a215 1
   theOpn = myProblem_->findOperation (theOpnNameWoa);
d223 1
a223 1
   thePart = myProblem_->findPart (thePartNameWoa);
@


1.25
log
@Implemented EXCEPTION_ASSERT and ABORTING_ASSERT.
@
text
@d8 1
d55 3
a57 1
   JavaObjRep::setNPeriods (myProblem_->getGlobalElement (), nPeriodsVal);
@


1.24
log
@Updated some comments.
@
text
@d35 1
a35 1
   WITJ_ASSERT (! myExtractMode_);
d65 1
a65 1
   WITJ_ASSERT (theState == WitINACTIVE);
d95 1
a95 1
         WITJ_ASSERT (false);
@


1.23
log
@Changed to all upper case for the names of macros.
@
text
@d4 1
a4 1
// Contains the definition of class Extractor.
@


1.22
log
@Minot revision.
@
text
@d35 1
a35 1
   witjAssert (! myExtractMode_);
d65 1
a65 1
   witjAssert (theState == WitINACTIVE);
d95 1
a95 1
         witjAssert (false);
@


1.21
log
@Call-back infrastructure.
@
text
@d105 1
a105 1
   bool      theMaterialCase;
d111 1
a111 1
   theMaterialCase = (theCategory == WitMATERIAL);
d113 1
a113 1
   JavaObjRep::makePart (myProblem_, thePartNameWoa, theMaterialCase);
@


1.20
log
@Call-back infrastructure.
@
text
@a14 2
#include      <iostream>

d113 1
a113 1
   JavaObjRep::newPart (myProblem_, thePartNameWoa, theMaterialCase);
@


1.19
log
@Call-back infrastructure.
@
text
@d130 1
a130 1
   JavaObjRep::newDemand (thePart, theDemandNameWoa);
a141 2

// JavaObjRep::newOperation (myProblem_, theOpnNameWoa);
d166 1
a166 1
   JavaObjRep::newBomEntry (theOpn, thePart);
d197 1
a197 1
   JavaObjRep::newSubstitute (theBomEnt, thePart);
d222 1
a222 1
   JavaObjRep::newBopEntry (theOpn, thePart);
@


1.18
log
@Name change.
@
text
@d141 3
a143 1
   JavaObjRep::newOperation (myProblem_, theOpnNameWoa);
@


1.17
log
@Minor corrections.
@
text
@d7 5
a11 5
#include    <Extractor.h>
#include      <Problem.h>
#include <GlobalEntity.h>
#include   <JavaObjRep.h>
#include       <VecWoa.h>
d13 1
a13 1
#include          <wit.h>
d15 1
a15 1
#include     <iostream>
d43 1
a43 1
   extractEntities ();
d56 1
a56 1
   JavaObjRep::setNPeriods (myProblem_->getGlobalEntity (), nPeriodsVal);
d61 1
a61 1
void WitJ::Extractor::extractEntities ()
@


1.16
log
@Changed name of Component to Entity.
@
text
@a223 17

//------------------------------------------------------------------------------

void WitJ::Extractor::createsCompError (const char * theClassName)
   {
   std::cout
      << "\n"
      << "WIT-J Application Program Error:\n"
      << "\n"
      << "   Problem.readData was called on a file that creates "
      << theClassName
      << ".\n"
      << "\n"
      << "Application Program aborted by WIT-J.\n";

   exit (3);
   }
@


1.15
log
@Minor revision
@
text
@d7 5
a11 5
#include  <Extractor.h>
#include    <Problem.h>
#include <GlobalComp.h>
#include <JavaObjRep.h>
#include     <VecWoa.h>
d13 1
a13 1
#include        <wit.h>
d15 1
a15 1
#include   <iostream>
d43 1
a43 1
   extractComponents ();
d56 1
a56 1
   JavaObjRep::setNPeriods (myProblem_->getGlobalComp (), nPeriodsVal);
d61 1
a61 1
void WitJ::Extractor::extractComponents ()
@


1.14
log
@Implemented extraction of substitutes.
@
text
@d107 1
a107 1
   bool      theMaterialMode;
d113 1
a113 1
   theMaterialMode = (theCategory == WitMATERIAL);
d115 1
a115 1
   JavaObjRep::newPart (myProblem_, thePartNameWoa, theMaterialMode);
@


1.13
log
@Implemented extraction of BOP entries.
@
text
@a9 1
#include  <Operation.h>
d160 1
a160 1
      theOpn->getOperationName (),
d173 25
a197 1
   createsCompError ("a Substitute");
d216 1
a216 1
      theOpn->getOperationName (),
@


1.12
log
@Replaced C++ class StringWoa with a typedef for VecWoa <char>.
@
text
@d181 19
a199 1
   createsCompError ("a BopEntry");
@


1.11
log
@Revised class StringWoa.
@
text
@d12 1
a12 1
#include  <StringWoa.h>
@


1.10
log
@Implemented extraction of BOM entries.
@
text
@d110 1
a110 1
   witGetObjItrPart   (myWitRun_, thePartNameWoa.getCStringAddr ());
d112 1
a112 1
   witGetPartCategory (myWitRun_, thePartNameWoa.getCString (), & theCategory);
d127 1
a127 4
   witGetObjItrDemand (
      myWitRun_,
      thePartNameWoa  .getCStringAddr (),
      theDemandNameWoa.getCStringAddr ());
d140 1
a140 1
   witGetObjItrOperation (myWitRun_, theOpnNameWoa.getCStringAddr ());
d155 1
a155 4
   witGetObjItrBomEntry (
      myWitRun_,
      theOpnNameWoa.getCStringAddr (),
    & theBomIndex);
d163 1
a163 1
      thePartNameWoa.getCStringAddr ());
@


1.9
log
@Call-back infrastructure.
Implemented extraction of Demands.
@
text
@d10 1
d132 1
a132 1
   thePart = myProblem_->findPart (thePartNameWoa.getCString ());
d152 22
a173 1
   createsCompError ("a BomEntry");
@


1.8
log
@Implemented extraction of Parts.
@
text
@d122 12
a133 1
   createsCompError ("a Demand");
@


1.7
log
@Extraction
@
text
@d105 11
a115 1
   createsCompError ("a Part");
@


1.6
log
@Extraction.
@
text
@d11 1
d119 5
a123 1
   createsCompError ("an Operation");
@


1.5
log
@Changed name of C++ class JavaLink to JavaObjRep.
@
text
@d42 1
a42 1
   checkForPartsOpns ();
d60 1
a60 1
void WitJ::Extractor::checkForPartsOpns ()
d77 20
a96 1
      createsPartOpnError ();
d102 43
a144 1
void WitJ::Extractor::createsPartOpnError ()
d150 3
a152 2
      << "   Problem.readData was called on a file that creates\n"
      << "   at least one Part or at least one Operation.\n"
@


1.4
log
@Continued implementation of nPeriods extraction.
@
text
@d10 1
a10 1
#include   <JavaLink.h>
d55 1
a55 1
   JavaLink::setNPeriods (myProblem_->getGlobalComp (), nPeriodsVal);
@


1.3
log
@Intitial implementation of extraction of nPeriods.
@
text
@d55 1
a55 4
   myProblem_->
      getGlobalComp ()->
         getJavaLink ()->
            setNPeriods (nPeriodsVal);
@


1.2
log
@Continued implementation of readData.
@
text
@a7 1
#include    <Session.h>
d10 1
d20 3
a22 2
      mySession_ (theProblem->getSession ()),
      myWitRun_  (theProblem->getWitRun ())
d36 5
a40 1
   mySession_->getProblem ()->getGlobalComp ()->extractNPeriods ();
d43 16
@


1.1
log
@Began implementation of Problem.readData (...).
@
text
@d7 4
a10 2
#include <Extractor.h>
#include   <Problem.h>
d12 1
a12 1
#include       <wit.h>
d14 1
a14 1
#include  <iostream>
d35 9
d59 1
a59 1
      addedPartOpnError ();
d65 1
a65 1
void WitJ::Extractor::addedPartOpnError ()
@

