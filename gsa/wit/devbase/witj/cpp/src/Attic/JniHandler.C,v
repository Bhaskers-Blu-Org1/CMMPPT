head	1.47;
access;
symbols;
locks; strict;
comment	@ * @;


1.47
date	2008.09.29.15.33.05;	author rjw;	state dead;
branches;
next	1.46;

1.46
date	2008.09.27.00.37.58;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2008.09.26.22.50.16;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2008.09.26.22.21.22;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2008.09.26.20.46.05;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2008.09.26.20.31.20;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2008.09.26.19.48.41;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2008.09.25.20.24.41;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2008.09.25.18.52.27;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2008.09.24.21.53.26;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.09.24.16.26.36;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.09.23.19.30.10;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2008.09.23.17.52.29;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.09.23.15.50.37;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.09.12.14.43.22;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.09.11.22.22.46;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.09.10.22.20.19;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.09.09.18.59.58;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.09.05.18.34.05;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.08.28.18.30.37;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.08.28.15.37.57;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.08.26.21.40.30;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.08.06.18.48.21;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.08.06.15.39.29;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.08.05.21.55.55;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.08.05.20.46.46;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.07.18.21.28.10;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.07.18.20.29.15;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.07.18.15.49.40;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.07.01.16.09.22;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.06.26.19.18.06;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.05.30.16.33.36;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.05.30.15.52.19;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.05.29.20.53.56;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.05.28.20.24.46;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.05.28.18.10.11;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.05.23.22.58.32;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.05.22.21.02.58;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.22.14.03.18;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.21.22.09.34;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.21.18.56.00;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.21.18.07.12;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.20.21.33.42;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.20.21.31.25;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.20.20.37.02;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.20.18.16.39;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.20.15.24.49;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.47
log
@File name correction.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File JniHandler.C.
//
// Contains the definition of class JniHandler.
//------------------------------------------------------------------------------

#include  <JniHandler.h>
#include  <JavaObjRep.h>
#include    <CTVecRes.h>
#include <CTVecHolder.h>
#include     <Session.h>
#include     <Problem.h>
#include  <GlobalComp.h>
#include      <VecWoa.h>
#include   <StringWoa.h>

//------------------------------------------------------------------------------

WitJ::JniHandler::JniHandler (JNIEnv * theJNIEnv):

      myJNIEnv_       (theJNIEnv),
      acquiredCTVecs_ (false),
      storedJStrings_ (NULL),
      storedCStrings_ (NULL),
      mySession_      (NULL)
   {
   }

//------------------------------------------------------------------------------

WitJ::JniHandler::~JniHandler ()
   {
   if (acquiredCTVecs_)
       getCTVecRes ()->reclaimCTVecs ();

   if (storedCStrings_ != NULL)
      releaseCStrings ();

   checkForJniException (myJNIEnv_);
   }

//------------------------------------------------------------------------------

void WitJ::JniHandler::findJFieldIDs (
      JNIEnv *  theJNIEnv,
      _jclass * theJClassForCppObjRep)
   {
   witjAssert (ourFidForMyCppJavaAccObjAsLong_ == NULL);

   ourFidForMyCppJavaAccObjAsLong_ =
      theJNIEnv->
         GetFieldID (
            theJClassForCppObjRep,
            "myCppJavaAccObjAsLong",
            "J");

   witjAssert (ourFidForMyCppJavaAccObjAsLong_ != NULL);
   }

//------------------------------------------------------------------------------

WitJ::JavaObjRep * WitJ::JniHandler::newJavaObjRep (_jobject * theJObject)
   {
   return new JavaObjRep (myJNIEnv_, theJObject);
   }

//------------------------------------------------------------------------------

void WitJ::JniHandler::transferTo (
      _jobject *   theCppObjRepJObj,
      JavaAccObj * theJavaAccObj)
   {
   jlong theJavaAccObjAsJLong;

   witjAssert (theJavaAccObj != NULL);

   theJavaAccObjAsJLong = reinterpret_cast <jlong> (theJavaAccObj);

   myJNIEnv_->
      SetLongField (
         theCppObjRepJObj,
         ourFidForMyCppJavaAccObjAsLong_,
         theJavaAccObjAsJLong);
   }

//------------------------------------------------------------------------------

WitJ::JavaAccObj * WitJ::JniHandler::getObject (_jobject * theCppObjRepJObj)
   {
   JavaAccObj * theJavaAccObj;

   theJavaAccObj = getObject (myJNIEnv_, theCppObjRepJObj);

   if (mySession_ == NULL)
      mySession_ = theJavaAccObj->getSession ();

   return theJavaAccObj;
   }

//------------------------------------------------------------------------------

void WitJ::JniHandler::deleteObject (
      JNIEnv *   theJNIEnv,
      _jobject * theCppObjRepJObj)
   {
   jlong        theJavaAccObjAsJLong;
   JavaAccObj * theJavaAccObj;

   theJavaAccObjAsJLong =
      theJNIEnv->
         GetLongField (theCppObjRepJObj, ourFidForMyCppJavaAccObjAsLong_);

   theJavaAccObj = reinterpret_cast <JavaAccObj *> (theJavaAccObjAsJLong);

   witjAssert (theJavaAccObj != NULL);

   theJNIEnv->
      SetLongField (theCppObjRepJObj, ourFidForMyCppJavaAccObjAsLong_, 0);

   delete theJavaAccObj;

   checkForJniException (theJNIEnv);
   }

//------------------------------------------------------------------------------

const double * WitJ::JniHandler::makeBoundVec (_jdoubleArray * theJDblArr)
   {
   if (theJDblArr == NULL)
      return NULL;
   else
      return makeDblCTVec (theJDblArr);
   }

//------------------------------------------------------------------------------

const WitJ::Boolean * WitJ::JniHandler::makeBoolCTVec (
      _jbooleanArray * theJBoolArr)
   {
   int        nPeriodsVal;
   jboolean * theJBoolCTVec;
   Boolean *  theBoolCTVec;
   int        theIdx;

   witjAssert (mySession_ != NULL);

   nPeriodsVal = getNPeriods ();

   witjAssert (myJNIEnv_->GetArrayLength (theJBoolArr) == nPeriodsVal);

   acquiredCTVecs_ = true;

   theJBoolCTVec   = getCTVecRes ()->provideJBoolCTVec ();

   myJNIEnv_->
      GetBooleanArrayRegion (
         theJBoolArr,
         0,
         nPeriodsVal,
         theJBoolCTVec);

   theBoolCTVec = getCTVecRes ()->provideIntCTVec ();

   for (theIdx = 0; theIdx < nPeriodsVal; theIdx ++)
      {
      theBoolCTVec[theIdx] = theJBoolCTVec[theIdx];
      }

   return theBoolCTVec;
   }

//------------------------------------------------------------------------------

const int * WitJ::JniHandler::makeIntCTVec (_jintArray * theJIntArr)
   {
   int   nPeriodsVal;
   int * theIntCTVec;

   witjAssert (mySession_ != NULL);

   nPeriodsVal = getNPeriods ();

   witjAssert (myJNIEnv_->GetArrayLength (theJIntArr) == nPeriodsVal);

   acquiredCTVecs_ = true;

   theIntCTVec     = getCTVecRes ()->provideIntCTVec ();

   myJNIEnv_->
      GetIntArrayRegion (
         theJIntArr,
         0,
         nPeriodsVal,
         theIntCTVec);

   return theIntCTVec;
   }

//------------------------------------------------------------------------------

const double * WitJ::JniHandler::makeDblCTVec (_jdoubleArray * theJDblArr)
   {
   int      nPeriodsVal;
   double * theDblCTVec;

   witjAssert (mySession_ != NULL);

   nPeriodsVal = getNPeriods ();

   witjAssert (myJNIEnv_->GetArrayLength (theJDblArr) == nPeriodsVal);

   acquiredCTVecs_ = true;

   theDblCTVec     = getCTVecRes ()->provideDblCTVec ();

   myJNIEnv_->
      GetDoubleArrayRegion (
         theJDblArr,
         0,
         nPeriodsVal,
         theDblCTVec);

   return theDblCTVec;
   }

//------------------------------------------------------------------------------

void WitJ::JniHandler::copyInto (
      _jbooleanArray *   theJBoolArr,
      VecWoa <Boolean> & theBoolVecWoa)
   {
   Boolean *  theBoolCTVec;
   jboolean * theJBoolCTVec;
   int        nPeriodsVal;
   int        theIdx;

   witjAssert (mySession_ != NULL);

   theBoolCTVec    = theBoolVecWoa.getCVec ();

   acquiredCTVecs_ = true;

   theJBoolCTVec   = getCTVecRes ()->provideJBoolCTVec ();

   nPeriodsVal     = getNPeriods ();

   for (theIdx = 0; theIdx < nPeriodsVal; theIdx ++)
      {
      theJBoolCTVec[theIdx] = theBoolCTVec[theIdx];
      }

   witjAssert (myJNIEnv_->GetArrayLength (theJBoolArr) == nPeriodsVal);

   myJNIEnv_->
      SetBooleanArrayRegion (
         theJBoolArr,
         0,
         nPeriodsVal,
         theJBoolCTVec);
   }

//------------------------------------------------------------------------------

void WitJ::JniHandler::copyInto (
      _jintArray *   theJIntArr,
      VecWoa <int> & theIntVecWoa)
   {
   int nPeriodsVal;

   witjAssert (mySession_ != NULL);

   nPeriodsVal = getNPeriods ();

   witjAssert (myJNIEnv_->GetArrayLength (theJIntArr) == nPeriodsVal);

   myJNIEnv_->
      SetIntArrayRegion (
         theJIntArr,
         0,
         nPeriodsVal,
         theIntVecWoa.getCVec ());
   }

//------------------------------------------------------------------------------

void WitJ::JniHandler::copyInto (
      _jdoubleArray *   theJDblArr,
      VecWoa <double> & theDblVecWoa)
   {
   int nPeriodsVal;

   witjAssert (mySession_ != NULL);

   nPeriodsVal = getNPeriods ();

   witjAssert (myJNIEnv_->GetArrayLength (theJDblArr) == nPeriodsVal);

   myJNIEnv_->
      SetDoubleArrayRegion (
         theJDblArr,
         0,
         nPeriodsVal,
         theDblVecWoa.getCVec ());
   }

//------------------------------------------------------------------------------

const char * WitJ::JniHandler::makeCString (_jstring * theJString)
   {
   const char * theCString;

   witjAssert (theJString != NULL);

   theCString = myJNIEnv_->GetStringUTFChars (theJString, NULL);

   if (theCString == NULL)
      abortForMemory ("GetStringUTFChars");

   if (storedJStrings_ == NULL)
      {
      storedJStrings_ = new std::list <_jstring *>;
      storedCStrings_ = new std::list <const char *>;
      }

   storedJStrings_->push_back (theJString);
   storedCStrings_->push_back (theCString);

   return theCString;
   }

//------------------------------------------------------------------------------

void WitJ::JniHandler::checkForJniException (JNIEnv * theJNIEnv)
   {
   if (theJNIEnv->ExceptionCheck ())
      {
      theJNIEnv->ExceptionDescribe ();

      witjAssert (false);
      }
   }

//------------------------------------------------------------------------------

_jstring * WitJ::JniHandler::makeJString (const StringWoa & theStringWoa)
   {
   _jstring * theJString;

   witjAssert (theStringWoa.getCString () != NULL);

   theJString = myJNIEnv_->NewStringUTF (theStringWoa.getCString ());

   if (theJString == NULL)
      abortForMemory ("NewStringUTF");

   return theJString;
   }

//------------------------------------------------------------------------------

WitJ::JavaAccObj * WitJ::JniHandler::getObject (
      JNIEnv *   theJNIEnv,
      _jobject * theCppObjRepJObj)
   {
   jlong        theJavaAccObjAsJLong;
   JavaAccObj * theJavaAccObj;

   witjAssert (theCppObjRepJObj != NULL);

   theJavaAccObjAsJLong =
      theJNIEnv->
      GetLongField (theCppObjRepJObj, ourFidForMyCppJavaAccObjAsLong_);

   theJavaAccObj = reinterpret_cast <JavaAccObj *> (theJavaAccObjAsJLong);

   witjAssert (theJavaAccObj != NULL);

   witjAssert (theJavaAccObj->isValid ());

   return theJavaAccObj;
   }

//------------------------------------------------------------------------------

void WitJ::JniHandler::releaseCStrings ()
   {
   _jstring *   theJString;
   const char * theCString;

   witjAssert (storedCStrings_ != NULL);

   while (! storedCStrings_->empty ())
      {
      theJString = storedJStrings_->back ();
      theCString = storedCStrings_->back ();

      storedJStrings_->pop_back ();
      storedCStrings_->pop_back ();

      myJNIEnv_->ReleaseStringUTFChars (theJString, theCString);
      }

   delete storedCStrings_;
   delete storedJStrings_;

   storedCStrings_ = NULL;
   storedJStrings_ = NULL;
   }

//------------------------------------------------------------------------------

int WitJ::JniHandler::getNPeriods ()
   {
   witjAssert (mySession_ != NULL);

   return mySession_->getProblem ()->getGlobalComp ()->getNPeriods ();
   }

//------------------------------------------------------------------------------

WitJ::CTVecRes * WitJ::JniHandler::getCTVecRes ()
   {
   witjAssert (mySession_ != NULL);

   return mySession_->getProblem ()->getCTVecRes ();
   }

//------------------------------------------------------------------------------

_jfieldID * WitJ::JniHandler::ourFidForMyCppJavaAccObjAsLong_ = NULL;
@


1.46
log
@Extraction.
@
text
@@


1.45
log
@Changed name of C++ class JAccObject to JavaAccObj.
@
text
@d62 7
a87 13
void WitJ::JniHandler::attachRepFor (
      _jobject *   theJObject,
      JavaAccObj * theJavaAccObj)
   {
   JavaObjRep * theJavaObjRep;

   theJavaObjRep = new JavaObjRep (myJNIEnv_, theJObject);

   theJavaAccObj->attach (theJavaObjRep);
   }

//------------------------------------------------------------------------------

@


1.44
log
@Numerous class name changes.
@
text
@d48 1
a48 1
   witjAssert (ourFidForMyCppJAccObjectAsLong_ == NULL);
d50 1
a50 1
   ourFidForMyCppJAccObjectAsLong_ =
d54 1
a54 1
            "myCppJAccObjectAsLong",
d57 1
a57 1
   witjAssert (ourFidForMyCppJAccObjectAsLong_ != NULL);
d64 1
a64 1
      JAccObject * theJAccObject)
d66 1
a66 1
   jlong theJAccObjectAsJLong;
d68 1
a68 1
   witjAssert (theJAccObject != NULL);
d70 1
a70 1
   theJAccObjectAsJLong = reinterpret_cast <jlong> (theJAccObject);
d75 2
a76 2
         ourFidForMyCppJAccObjectAsLong_,
         theJAccObjectAsJLong);
d83 1
a83 1
      JAccObject * theJAccObject)
d89 1
a89 1
   theJAccObject->attach (theJavaObjRep);
d94 1
a94 1
WitJ::JAccObject * WitJ::JniHandler::getObject (_jobject * theCppObjRepJObj)
d96 1
a96 1
   JAccObject * theJAccObject;
d98 1
a98 1
   theJAccObject = getObject (myJNIEnv_, theCppObjRepJObj);
d101 1
a101 1
      mySession_ = theJAccObject->getSession ();
d103 1
a103 1
   return theJAccObject;
d112 2
a113 2
   jlong        theJAccObjectAsJLong;
   JAccObject * theJAccObject;
d115 1
a115 1
   theJAccObjectAsJLong =
d117 1
a117 1
         GetLongField (theCppObjRepJObj, ourFidForMyCppJAccObjectAsLong_);
d119 1
a119 1
   theJAccObject = reinterpret_cast <JAccObject *> (theJAccObjectAsJLong);
d121 1
a121 1
   witjAssert (theJAccObject != NULL);
d124 1
a124 1
      SetLongField (theCppObjRepJObj, ourFidForMyCppJAccObjectAsLong_, 0);
d126 1
a126 1
   delete theJAccObject;
d367 1
a367 1
WitJ::JAccObject * WitJ::JniHandler::getObject (
d371 2
a372 2
   jlong        theJAccObjectAsJLong;
   JAccObject * theJAccObject;
d376 1
a376 1
   theJAccObjectAsJLong =
d378 1
a378 1
      GetLongField (theCppObjRepJObj, ourFidForMyCppJAccObjectAsLong_);
d380 1
a380 1
   theJAccObject = reinterpret_cast <JAccObject *> (theJAccObjectAsJLong);
d382 1
a382 1
   witjAssert (theJAccObject != NULL);
d384 1
a384 1
   witjAssert (theJAccObject->isValid ());
d386 1
a386 1
   return theJAccObject;
d436 1
a436 1
_jfieldID * WitJ::JniHandler::ourFidForMyCppJAccObjectAsLong_ = NULL;
@


1.43
log
@Minor revision.
@
text
@d46 1
a46 1
      _jclass * theJClassForCppInterface)
d53 1
a53 1
            theJClassForCppInterface,
d63 1
a63 1
      _jobject *   theCppInterfaceJObj,
d74 1
a74 1
         theCppInterfaceJObj,
d94 1
a94 1
WitJ::JAccObject * WitJ::JniHandler::getObject (_jobject * theCppInterfaceJObj)
d98 1
a98 1
   theJAccObject = getObject (myJNIEnv_, theCppInterfaceJObj);
d110 1
a110 1
      _jobject * theCppInterfaceJObj)
d117 1
a117 1
         GetLongField (theCppInterfaceJObj, ourFidForMyCppJAccObjectAsLong_);
d124 1
a124 1
      SetLongField (theCppInterfaceJObj, ourFidForMyCppJAccObjectAsLong_, 0);
d369 1
a369 1
      _jobject * theCppInterfaceJObj)
d374 1
a374 1
   witjAssert (theCppInterfaceJObj != NULL);
d378 1
a378 1
      GetLongField (theCppInterfaceJObj, ourFidForMyCppJAccObjectAsLong_);
@


1.42
log
@Changed name of C++ class JavaLink to JavaObjRep.
@
text
@d81 1
a81 1
void WitJ::JniHandler::linkTo (
d89 1
a89 1
   theJAccObject->store (theJavaObjRep);
@


1.41
log
@Extraction
@
text
@d8 1
a8 1
#include    <JavaLink.h>
d85 1
a85 1
   JavaLink * theJavaLink;
d87 1
a87 1
   theJavaLink = new JavaLink (myJNIEnv_, theJObject);
d89 1
a89 1
   theJAccObject->store (theJavaLink);
@


1.40
log
@Extraction.
@
text
@d63 1
a63 1
      _jobject *   theCIJObj,
d74 1
a74 1
         theCIJObj,
d81 3
a83 1
void WitJ::JniHandler::linkTo (_jobject * theCIJObj, JAccObject * theJAccObject)
d87 1
a87 1
   theJavaLink = new JavaLink (myJNIEnv_, theCIJObj);
d94 1
a94 1
WitJ::JAccObject * WitJ::JniHandler::getObject (_jobject * theCIJObj)
d98 1
a98 1
   theJAccObject = getObject (myJNIEnv_, theCIJObj);
d108 3
a110 1
void WitJ::JniHandler::deleteObject (JNIEnv * theJNIEnv, _jobject * theCIJObj)
d116 2
a117 1
      theJNIEnv->GetLongField (theCIJObj, ourFidForMyCppJAccObjectAsLong_);
d123 2
a124 1
   theJNIEnv->SetLongField (theCIJObj, ourFidForMyCppJAccObjectAsLong_, 0);
d369 1
a369 1
      _jobject * theCIJObj)
d374 1
a374 1
   witjAssert (theCIJObj != NULL);
d377 2
a378 1
      theJNIEnv->GetLongField (theCIJObj, ourFidForMyCppJAccObjectAsLong_);
@


1.39
log
@Continued implementation of nPeriods extraction.
@
text
@d66 1
a66 2
   JavaLink * theJavaLink;
   jlong      theJAccObjectAsJLong;
a69 4
   theJavaLink = new JavaLink (myJNIEnv_, theCIJObj);

   theJAccObject->store (theJavaLink);

d81 11
@


1.38
log
@Continued implementation of nPeriods extraction.
@
text
@d48 1
a48 1
   witjAssert (ourFidForMyCppJavaLinkAsLong_ == NULL);
d50 1
a50 1
   ourFidForMyCppJavaLinkAsLong_ =
d54 1
a54 1
            "myCppJavaLinkAsLong",
d57 1
a57 1
   witjAssert (ourFidForMyCppJavaLinkAsLong_ != NULL);
d67 1
a67 1
   jlong      theJavaLinkAsJLong;
d71 1
a71 1
   theJavaLink        = new JavaLink (myJNIEnv_, theCIJObj, theJAccObject);
d73 3
a75 1
   theJavaLinkAsJLong = reinterpret_cast <jlong> (theJavaLink);
d80 2
a81 2
         ourFidForMyCppJavaLinkAsLong_,
         theJavaLinkAsJLong);
d102 2
a103 2
   jlong      theJavaLinkAsJLong;
   JavaLink * theJavaLink;
d105 2
a106 2
   theJavaLinkAsJLong =
      theJNIEnv->GetLongField (theCIJObj, ourFidForMyCppJavaLinkAsLong_);
d108 1
a108 1
   theJavaLink = reinterpret_cast <JavaLink *> (theJavaLinkAsJLong);
d110 1
a110 1
   witjAssert (theJavaLink != NULL);
d112 1
a112 1
   theJNIEnv->SetLongField (theCIJObj, ourFidForMyCppJavaLinkAsLong_, 0);
d114 1
a114 1
   delete theJavaLink;
d359 1
a359 2
   jlong        theJavaLinkAsJLong;
   JavaLink *   theJavaLink;
d364 2
a365 2
   theJavaLinkAsJLong =
      theJNIEnv->GetLongField (theCIJObj, ourFidForMyCppJavaLinkAsLong_);
d367 1
a367 1
   theJavaLink = reinterpret_cast <JavaLink *> (theJavaLinkAsJLong);
d369 1
a369 3
   witjAssert (theJavaLink != NULL);

   theJAccObject = theJavaLink->getJAccObject ();
d423 1
a423 1
_jfieldID * WitJ::JniHandler::ourFidForMyCppJavaLinkAsLong_ = NULL;
@


1.37
log
@Intitial implementation of extraction of nPeriods.
@
text
@d44 1
a44 1
void WitJ::JniHandler::acquireJFieldIDs (
@


1.36
log
@Continued implementation of C++ class JavaLink.
@
text
@d325 12
a405 12
void WitJ::JniHandler::checkForJniException (JNIEnv * theJNIEnv)
   {
   if (theJNIEnv->ExceptionCheck ())
      {
      theJNIEnv->ExceptionDescribe ();

      witjAssert (false);
      }
   }

//------------------------------------------------------------------------------

@


1.35
log
@Continued implementation of C++ class JavaLink.
@
text
@d71 1
a71 1
   theJavaLink        = new JavaLink (myJNIEnv_, theJAccObject);
@


1.34
log
@Initial implementation of C++ class JavaLink.
@
text
@d71 1
a71 1
   theJavaLink        = new JavaLink (theJAccObject);
@


1.33
log
@Revised the use of class CTVecRes.
@
text
@d8 1
d19 1
a19 1
WitJ::JniHandler:: JniHandler (JNIEnv * theJNIEnv):
d48 1
a48 1
   witjAssert (myFidForMyCppJAccObjectAsLong_ == NULL);
d50 1
a50 1
   myFidForMyCppJAccObjectAsLong_ =
d54 1
a54 1
            "myCppJAccObjectAsLong",
d57 1
a57 1
   witjAssert (myFidForMyCppJAccObjectAsLong_ != NULL);
d66 2
a67 1
   jlong theJAccObjectAsJLong;
d71 3
a73 1
   theJAccObjectAsJLong = reinterpret_cast <jlong> (theJAccObject);
d78 2
a79 2
         myFidForMyCppJAccObjectAsLong_,
         theJAccObjectAsJLong);
d100 7
a106 1
   JAccObject * theJAccObject;
d108 1
a108 1
   theJAccObject = getObject (theJNIEnv, theCIJObj);
d110 1
a110 1
   theJNIEnv->SetLongField (theCIJObj, myFidForMyCppJAccObjectAsLong_, 0);
d112 1
a112 1
   delete theJAccObject;
d345 2
a346 1
   jlong        theJAccObjectAsJLong;
d351 4
a354 2
   theJAccObjectAsJLong =
      theJNIEnv->GetLongField (theCIJObj, myFidForMyCppJAccObjectAsLong_);
d356 1
a356 1
   theJAccObject = reinterpret_cast <JAccObject *> (theJAccObjectAsJLong);
d358 1
a358 1
   witjAssert (theJAccObject != NULL);
d424 1
a424 1
_jfieldID * WitJ::JniHandler::myFidForMyCppJAccObjectAsLong_ = NULL;
@


1.32
log
@Moves C++ GlobalComp from Session to Problem.
@
text
@d21 1
d32 2
a33 3
   if    (mySession_ != NULL)
      if (mySession_->hasCTVecRes ())
          mySession_->getCTVecRes ()->reclaimCTVecs ();
d133 3
a135 1
   theJBoolCTVec = mySession_->getCTVecRes ()->provideJBoolCTVec ();
d144 1
a144 1
   theBoolCTVec = mySession_->getCTVecRes ()->provideIntCTVec ();
d167 3
a169 1
   theIntCTVec = mySession_->getCTVecRes ()->provideIntCTVec ();
d194 3
a196 1
   theDblCTVec = mySession_->getCTVecRes ()->provideDblCTVec ();
d221 1
a221 1
   theBoolCTVec  = theBoolVecWoa.getCVec ();
d223 1
a223 1
   theJBoolCTVec = mySession_->getCTVecRes ()->provideJBoolCTVec ();
d225 3
a227 1
   nPeriodsVal   = getNPeriods ();
d402 9
@


1.31
log
@Updated class CTVecRes.
@
text
@d11 1
d129 1
a129 1
   nPeriodsVal = mySession_->getGlobalComp ()->getNPeriods ();
d161 1
a161 1
   nPeriodsVal = mySession_->getGlobalComp ()->getNPeriods ();
d186 1
a186 1
   nPeriodsVal = mySession_->getGlobalComp ()->getNPeriods ();
d219 1
a219 1
   nPeriodsVal   = mySession_->getGlobalComp ()->getNPeriods ();
d246 1
a246 1
   nPeriodsVal = mySession_->getGlobalComp ()->getNPeriods ();
d268 1
a268 1
   nPeriodsVal = mySession_->getGlobalComp ()->getNPeriods ();
d385 9
@


1.30
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@d30 3
a32 4
   if (mySession_ != NULL)
      {
      mySession_->getCTVecRes ()->reclaimCTVecs ();
      }
a34 1
      {
a35 1
      }
@


1.29
log
@BoundSet attributes.
@
text
@d10 1
a10 1
#include   <ProbCoord.h>
d22 1
a22 1
      myProbCoord_    (NULL)
d30 1
a30 1
   if (myProbCoord_ != NULL)
d32 1
a32 1
      myProbCoord_->getCTVecRes ()->reclaimCTVecs ();
d88 2
a89 2
   if (myProbCoord_ == NULL)
      myProbCoord_ = theJAccObject->getProbCoord ();
d129 1
a129 1
   witjAssert (myProbCoord_ != NULL);
d131 1
a131 1
   nPeriodsVal = myProbCoord_->getGlobalComp ()->getNPeriods ();
d135 1
a135 1
   theJBoolCTVec = myProbCoord_->getCTVecRes ()->provideJBoolCTVec ();
d144 1
a144 1
   theBoolCTVec = myProbCoord_->getCTVecRes ()->provideIntCTVec ();
d161 1
a161 1
   witjAssert (myProbCoord_ != NULL);
d163 1
a163 1
   nPeriodsVal = myProbCoord_->getGlobalComp ()->getNPeriods ();
d167 1
a167 1
   theIntCTVec = myProbCoord_->getCTVecRes ()->provideIntCTVec ();
d186 1
a186 1
   witjAssert (myProbCoord_ != NULL);
d188 1
a188 1
   nPeriodsVal = myProbCoord_->getGlobalComp ()->getNPeriods ();
d192 1
a192 1
   theDblCTVec = myProbCoord_->getCTVecRes ()->provideDblCTVec ();
d215 1
a215 1
   witjAssert (myProbCoord_ != NULL);
d219 1
a219 1
   theJBoolCTVec = myProbCoord_->getCTVecRes ()->provideJBoolCTVec ();
d221 1
a221 1
   nPeriodsVal   = myProbCoord_->getGlobalComp ()->getNPeriods ();
d246 1
a246 1
   witjAssert (myProbCoord_ != NULL);
d248 1
a248 1
   nPeriodsVal = myProbCoord_->getGlobalComp ()->getNPeriods ();
d268 1
a268 1
   witjAssert (myProbCoord_ != NULL);
d270 1
a270 1
   nPeriodsVal = myProbCoord_->getGlobalComp ()->getNPeriods ();
@


1.28
log
@Name change: Global --> GlobalComp.
@
text
@d111 10
@


1.27
log
@"title" attribute.
@
text
@d11 1
a11 1
#include      <Global.h>
d121 1
a121 1
   nPeriodsVal = myProbCoord_->getGlobal ()->getNPeriods ();
d153 1
a153 1
   nPeriodsVal = myProbCoord_->getGlobal ()->getNPeriods ();
d178 1
a178 1
   nPeriodsVal = myProbCoord_->getGlobal ()->getNPeriods ();
d211 1
a211 1
   nPeriodsVal   = myProbCoord_->getGlobal ()->getNPeriods ();
d238 1
a238 1
   nPeriodsVal = myProbCoord_->getGlobal ()->getNPeriods ();
d260 1
a260 1
   nPeriodsVal = myProbCoord_->getGlobal ()->getNPeriods ();
@


1.26
log
@Added "title" attribute (set only).
@
text
@d13 1
d299 16
@


1.25
log
@Classes Global and GlobalCI.
@
text
@a332 2
      myJNIEnv_->ReleaseStringUTFChars (theJString, theCString);

d335 2
@


1.24
log
@Class JniHandler.
@
text
@d11 1
a11 1
#include  <GlobalComp.h>
d120 1
a120 1
   nPeriodsVal = myProbCoord_->getGlobalComp ()->getNPeriods ();
d152 1
a152 1
   nPeriodsVal = myProbCoord_->getGlobalComp ()->getNPeriods ();
d177 1
a177 1
   nPeriodsVal = myProbCoord_->getGlobalComp ()->getNPeriods ();
d210 1
a210 1
   nPeriodsVal   = myProbCoord_->getGlobalComp ()->getNPeriods ();
d237 1
a237 1
   nPeriodsVal = myProbCoord_->getGlobalComp ()->getNPeriods ();
d259 1
a259 1
   nPeriodsVal = myProbCoord_->getGlobalComp ()->getNPeriods ();
@


1.23
log
@JniHandler class.
@
text
@d39 1
a39 6
   if (myJNIEnv_->ExceptionCheck ())
      {
      myJNIEnv_->ExceptionDescribe ();

      witjAssert (false);
      }
d81 1
a81 1
void WitJ::JniHandler::releaseJAccObject (_jobject * theCIJObj)
d83 3
a85 1
   myProbCoord_ = NULL;
d87 4
a90 5
   myJNIEnv_->
      SetLongField (
         theCIJObj,
         myFidForMyCppJAccObjectAsLong_,
         0);
d95 1
a95 1
WitJ::JAccObject * WitJ::JniHandler::getObject (_jobject * theCIJObj)
a96 1
   jlong        theJAccObjectAsJLong;
d99 1
a99 6
   witjAssert (theCIJObj != NULL);

   theJAccObjectAsJLong =
      myJNIEnv_->GetLongField (theCIJObj, myFidForMyCppJAccObjectAsLong_);

   theJAccObject = reinterpret_cast <JAccObject *> (theJAccObjectAsJLong);
d101 1
a101 1
   witjAssert (theJAccObject != NULL);
d103 1
a103 1
   witjAssert (theJAccObject->isValid ());
d105 1
a105 4
   if (myProbCoord_ == NULL)
      myProbCoord_ = theJAccObject->getProbCoord ();

   return theJAccObject;
d298 23
d348 12
@


1.22
log
@Fixed the segmentation error (probably).
@
text
@d73 2
d86 13
a122 7
void WitJ::JniHandler::releaseProbCoord ()
   {
   myProbCoord_ = NULL;
   }

//------------------------------------------------------------------------------

@


1.21
log
@Attributes.
@
text
@d108 7
@


1.20
log
@Attributes.
@
text
@d231 1
a231 1
   int vecLength;
d233 5
a237 1
   vecLength = myJNIEnv_->GetArrayLength (theJIntArr);
d243 1
a243 1
         vecLength,
d253 5
a257 1
   int vecLength;
d259 1
a259 1
   vecLength = myJNIEnv_->GetArrayLength (theJDblArr);
d265 1
a265 1
         vecLength,
@


1.19
log
@Attributes.
@
text
@d108 35
d193 3
a195 1
const int * WitJ::JniHandler::makeBoolCTVec (_jbooleanArray * theJBoolArr)
d197 2
a199 2
   jboolean * theJBoolCTVec;
   jint *     theIntCTVec;
d204 10
a213 1
   nPeriodsVal = myProbCoord_->getGlobalComp ()->getNPeriods ();
a216 2
   theJBoolCTVec = myProbCoord_->getCTVecRes ()->provideJBoolCTVec ();

d218 1
a218 1
      GetBooleanArrayRegion (
d223 1
d225 7
a231 1
   theIntCTVec = myProbCoord_->getCTVecRes ()->provideIntCTVec ();
d233 1
a233 4
   for (theIdx = 0; theIdx < nPeriodsVal; theIdx ++)
      {
      theIntCTVec[theIdx] = theJBoolCTVec[theIdx];
      }
d235 6
a240 1
   return theIntCTVec;
@


1.18
log
@Changed the names of access functions beginning with "my"
to begin with "get".
@
text
@d7 6
a12 5
#include <JniHandler.h>
#include <CTVecRepos.h>
#include  <ProbCoord.h>
#include <GlobalComp.h>
#include     <VecWoa.h>
d30 3
a32 1
      myProbCoord_->getDblCTVecRepos ()->reclaimCTVecs ();
d35 1
d37 8
d98 2
d108 26
a133 1
const double * WitJ::JniHandler::makeDblCTVec (_jdoubleArray * theJDoubleArray)
d142 1
a142 1
   witjAssert (myJNIEnv_->GetArrayLength (theJDoubleArray) == nPeriodsVal);
d144 1
a144 1
   theDblCTVec = myProbCoord_->getDblCTVecRepos ()->provideCTVec ();
d148 4
a151 4
         theJDoubleArray,
          0,
          nPeriodsVal,
          theDblCTVec);
d158 34
d193 1
a193 1
      _jdoubleArray *   theJDoubleArray,
d198 1
a198 1
   vecLength = myJNIEnv_->GetArrayLength (theJDoubleArray);
d202 1
a202 1
         theJDoubleArray,
@


1.17
log
@Attributes.
@
text
@d29 1
a29 1
      myProbCoord_->myDblCTVecRepos ()->reclaimCTVecs ();
d87 1
a87 1
      myProbCoord_ = theJAccObject->myProbCoord ();
d101 1
a101 1
   nPeriodsVal = myProbCoord_->myGlobalComp ()->getNPeriods ();
d105 1
a105 1
   theDblCTVec = myProbCoord_->myDblCTVecRepos ()->provideCTVec ();
d132 1
a132 1
         theDblVecWoa.myCVec ());
@


1.16
log
@JniHandler
@
text
@d41 1
a41 1
   assert (myFidForMyCppJAccObjectAsLong_ == NULL);
d50 1
a50 1
   assert (myFidForMyCppJAccObjectAsLong_ != NULL);
d77 1
a77 1
   assert (theCIJObj != NULL);
d84 1
a84 1
   assert (theJAccObject != NULL);
d99 1
a99 1
   assert (myProbCoord_ != NULL);
d103 1
a103 1
   assert (myJNIEnv_->GetArrayLength (theJDoubleArray) == nPeriodsVal);
d141 1
a141 1
   assert (theJString != NULL);
d167 1
a167 1
   assert (storedCStrings_ != NULL);
@


1.15
log
@JniHandler
@
text
@d72 1
a72 1
WitJ::JAccObject * WitJ::JniHandler::getJAccObject (_jobject * theCIJObj)
a93 85
WitJ::Problem * WitJ::JniHandler::getProblem (_jobject * theProblemCIJObj)
   {
   return getJAccObject (theProblemCIJObj)->thisProblem ();
   }

//------------------------------------------------------------------------------

WitJ::ProbCoord * WitJ::JniHandler::getProbCoord (_jobject * theProbCoordCIJObj)
   {
   return getJAccObject (theProbCoordCIJObj)->thisProbCoord ();
   }

//------------------------------------------------------------------------------

WitJ::Component * WitJ::JniHandler::getComponent (_jobject * theCompCIJObj)
   {
   return getJAccObject (theCompCIJObj)->thisComponent ();
   }

//------------------------------------------------------------------------------

WitJ::GlobalComp * WitJ::JniHandler::getGlobalComp (
      _jobject * theGlobalCompCIJObj)
   {
   return getJAccObject (theGlobalCompCIJObj)->thisGlobalComp ();
   }

//------------------------------------------------------------------------------

WitJ::Part * WitJ::JniHandler::getPart (_jobject * thePartCIJObj)
   {
   return getJAccObject (thePartCIJObj)->thisPart ();
   }

//------------------------------------------------------------------------------

WitJ::Demand * WitJ::JniHandler::getDemand (_jobject * theDemandCIJObj)
   {
   return getJAccObject (theDemandCIJObj)->thisDemand ();
   }

//------------------------------------------------------------------------------

WitJ::Operation * WitJ::JniHandler::getOperation (_jobject * theOpnCIJObj)
   {
   return getJAccObject (theOpnCIJObj)->thisOperation ();
   }

//------------------------------------------------------------------------------

WitJ::BomEntry * WitJ::JniHandler::getBomEntry (_jobject * theBomEntCIJObj)
   {
   return getJAccObject (theBomEntCIJObj)->thisBomEntry ();
   }

//------------------------------------------------------------------------------

WitJ::Substitute * WitJ::JniHandler::getSubstitute (_jobject * theSubCIJObj)
   {
   return getJAccObject (theSubCIJObj)->thisSubstitute ();
   }

//------------------------------------------------------------------------------

WitJ::BopEntry * WitJ::JniHandler::getBopEntry (_jobject * theBopEntCIJObj)
   {
   return getJAccObject (theBopEntCIJObj)->thisBopEntry ();
   }

//------------------------------------------------------------------------------

WitJ::AttBldr * WitJ::JniHandler::getAttBldr (_jobject * theAttBldrCIJObj)
   {
   return getJAccObject (theAttBldrCIJObj)->thisAttBldr ();
   }

//------------------------------------------------------------------------------

WitJ::Att * WitJ::JniHandler::getAtt (_jobject * theAttCIJObj)
   {
   return getJAccObject (theAttCIJObj)->thisAtt ();
   }

//------------------------------------------------------------------------------

@


1.14
log
@Attributes.
@
text
@d15 1
a15 3
WitJ::JniHandler:: JniHandler (
         JNIEnv *   theJNIEnv,
         _jobject * theJObj):
a17 1
      myJObj_         (theJObj),
d55 3
a57 1
void WitJ::JniHandler::attachToCI (JAccObject * theJAccObject)
d65 1
a65 1
         myJObj_,
d74 2
a75 1
   jlong theJAccObjectAsJLong;
d77 1
a77 2
   if (theCIJObj == NULL)
       theCIJObj =  myJObj_;
d82 3
a84 1
   assert (theJAccObjectAsJLong != 0);
d86 4
a89 1
   return reinterpret_cast <JAccObject *> (theJAccObjectAsJLong);
d184 1
a184 2
   if (myProbCoord_ == NULL)
      myProbCoord_ = getJAccObject ()->myProbCoord ();
@


1.13
log
@Attributes
@
text
@d161 7
@


1.12
log
@Initial implementation of attributes.
@
text
@d195 2
a196 2
      _jdoubleArray * theJDoubleArray,
      DblVecWoa &     theDblVecWoa)
d207 1
a207 1
         theDblVecWoa.myDblCVec ());
@


1.11
log
@*** empty log message ***
@
text
@d161 7
@


1.10
log
@*** empty log message ***
@
text
@d73 1
a73 1
WitJ::JAccObject * WitJ::JniHandler::myObject ()
d77 3
d81 1
a81 1
      myJNIEnv_->GetLongField (myJObj_, myFidForMyCppJAccObjectAsLong_);
d90 71
d167 1
a167 1
      myProbCoord_ = myObject ()->myProbCoord ();
a204 18
WitJ::JAccObject * WitJ::JniHandler::getObject (
      _jobject * theCppInterfaceAsJObject)
   {
   jlong theJAccObjectAsJLong;

   theJAccObjectAsJLong =
      myJNIEnv_->
         GetLongField (
            theCppInterfaceAsJObject,
            myFidForMyCppJAccObjectAsLong_);

   assert (theJAccObjectAsJLong != 0);

   return reinterpret_cast <JAccObject *> (theJAccObjectAsJLong);
   }

//------------------------------------------------------------------------------

@


1.9
log
@*** empty log message ***
@
text
@d58 1
a58 1
void WitJ::JniHandler::attachToCppInterface (JAccObject * theJAccObject)
@


1.8
log
@*** empty log message ***
@
text
@d8 1
a8 1
#include  <TVecRepos.h>
d32 1
a32 1
      myProbCoord_->myDblTVecRepos ()->reclaimCTVecs ();
d99 1
a99 1
   theDblCTVec = myProbCoord_->myDblTVecRepos ()->provideCTVec ();
@


1.7
log
@*** empty log message ***
@
text
@d8 3
d22 2
a23 1
      storedCStrings_ (NULL)
d31 3
d87 26
@


1.6
log
@*** empty log message ***
@
text
@d8 1
d80 18
@


1.5
log
@*** empty log message ***
@
text
@d11 3
a13 1
WitJ::JniHandler::JniHandler (JNIEnv * theJNIEnv):
d16 1
d50 1
a50 3
void WitJ::JniHandler::acquireFor (
      _jobject *   theCppInterfaceAsJObject,
      JAccObject * theJAccObject)
d58 1
a58 1
         theCppInterfaceAsJObject,
d65 14
@


1.4
log
@*** empty log message ***
@
text
@d23 1
a23 1
   if (storedJStrings_ != NULL)
d112 1
a112 1
   assert (storedJStrings_ != NULL);
d114 1
a114 1
   while (! storedJStrings_->empty ())
@


1.3
log
@*** empty log message ***
@
text
@d13 3
a15 3
      myJNIEnv_  (theJNIEnv),
      myJString_ (NULL),
      myCString_ (NULL)
d23 2
a24 2
   if (myJString_ != NULL)
      myJNIEnv_->ReleaseStringUTFChars (myJString_, myCString_);
d84 2
d88 23
a110 1
   assert (myJString_ == NULL);
d112 1
a112 1
   myJString_ = theJString;
d114 4
a117 1
   myCString_ = myJNIEnv_->GetStringUTFChars (myJString_, NULL);
d119 8
a126 2
   if (myCString_ == NULL)
      abortForMemory ("GetStringUTFChars");
d128 2
a129 1
   return myCString_;
@


1.2
log
@*** empty log message ***
@
text
@d13 3
a15 1
      myJNIEnv_ (theJNIEnv)
d23 2
d47 1
a47 1
void WitJ::JniHandler::transferTo (
d64 1
a64 1
WitJ::JAccObject * WitJ::JniHandler::objectOf (
d82 18
@


1.1
log
@*** empty log message ***
@
text
@d60 18
@

