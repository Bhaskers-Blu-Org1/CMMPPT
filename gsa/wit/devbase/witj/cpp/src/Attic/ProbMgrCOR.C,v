head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2009.01.21.21.43.23;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2009.01.20.22.05.03;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.16.20.55.48;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.16.17.03.35;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File ProbMgrCOR.C.
//------------------------------------------------------------------------------

#include     <NativeMacros.h>
#include <ExceptionHandler.h>
#include       <NativeCall.h>
#include          <ProbMgr.h>

using namespace WitJ;

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProbMgrCOR, createMyCppProbMgr) (
      JNIEnv *   theJNIEnv,
      _jobject * theProbMgrCORJObj)
   {
   BEGIN_TRY_BLOCK

   NativeCall theCall (theJNIEnv);
   ProbMgr *  theProbMgr;

   theProbMgr = new ProbMgr;

   theCall.transferTo (theProbMgrCORJObj, theProbMgr);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }
@


1.3
log
@Continued implementation of the ProbMgr classes.
@
text
@@


1.2
log
@ProbMgr classes.
@
text
@a28 22

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProbMgrCOR, callSimpleWitFunc) (
      JNIEnv *   theJNIEnv,
      _jobject * theProbMgrCORJObj,
      _jstring * theFuncNameJStr)
   {
   BEGIN_TRY_BLOCK

   NativeCall   theCall (theJNIEnv);
   ProbMgr *    theProbMgr;
   const char * theFuncNameCStr;

   theProbMgr      = theCall.getObject (theProbMgrCORJObj)->asProbMgr ();

   theFuncNameCStr = theCall.makeCString (theFuncNameJStr);

   theProbMgr->callSimpleWitFunc (theFuncNameCStr);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }
@


1.1
log
@Change the mname of the ProbCtr classes to ProbMgr in both Java and C++.
@
text
@d29 22
@

