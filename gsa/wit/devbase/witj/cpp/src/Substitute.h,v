head	1.28;
access;
symbols;
locks; strict;
comment	@ * @;


1.28
date	2011.04.08.20.56.21;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.03.30.16.20.39;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2009.04.15.23.33.27;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2009.04.15.22.14.56;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2009.04.15.21.11.58;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2009.03.13.19.32.19;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2009.03.05.19.09.17;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2009.03.05.17.21.26;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.02.27.23.12.30;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.02.27.21.22.39;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.02.27.18.44.24;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.01.29.22.06.39;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.12.15.17.28.49;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.12.15.17.17.40;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.10.07.18.50.25;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.10.06.22.14.03;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.10.03.21.47.51;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.29.22.43.47;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.26.22.50.17;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.08.29.15.34.43;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.08.27.15.30.46;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.07.01.17.49.16;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.18.21.28.18;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.10.23.25.07;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.10.23.21.37;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.10.22.32.36;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.22.22.00.12;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.22.21.02.58;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.28
log
@copyComponentData
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File Substitute.h.
//
// Contains the declaration of class Substitute.
//------------------------------------------------------------------------------

#ifndef Substitute_h
#define Substitute_h

#include <Component.h>

//------------------------------------------------------------------------------
// Class Substitute
//
// Represents a substitute BOM entry in an implosion problem.
//
// Class Hierarchy:
//
// JavaAccObj
//    Component
//       Substitute
//------------------------------------------------------------------------------

namespace WitJ
{
class Substitute: public Component
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit Substitute (
         BomEntry *   theBomEnt,
         int          theSubIdx,
         Part *       thePart);
      //
      // Constructor.

   ~Substitute ();
      //
      // Destructor.

   virtual Substitute * asSubstitute ();
      //
      // Override from class JavaAccObj.

   virtual void copyComponentData (Component *);
      //
      // Override from class Component.

   const char * getOperationName ();
      //
      // Access Wrapper from myBomEnt_.

   int getBomIndex ();
      //
      // Access Wrapper from myBomEnt_.

   void setSubIndex (int);
      //
      // Setter.

   //---------------------------------------------------------------------------
   // Accessors.
   //---------------------------------------------------------------------------

   inline int getSubIndex ()
      {
      return mySubIndex_;
      }

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   Substitute              (const Substitute &);
   Substitute & operator = (const Substitute &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   BomEntry * const myBomEnt_;
      //
      // The BomEntry for which this Substutite is substituting.

   int mySubIndex_;
      //
      // The substitute index for this Substutite.
      // This is the # of Substitutes for myBomEnt_ that were created before
      // this one and still exist.
   };
};
//
// End of namespace WitJ.

#endif
@


1.27
log
@Revised CppObjRep class ctors.
@
text
@d49 4
@


1.26
log
@Moved findInstsnce functions into class Component.
@
text
@d36 1
a36 1
         int          theSubIndex,
@


1.25
log
@Moved restoreInstance functions from the Component classes to class
   Coordinator.
@
text
@a56 9
   static Substitute * findInstance (
         Coordinator * theCoord,
         const char *  theOpnName,
         int           theBomIndex,
         int           theSubIndex);
      //
      // Finds and returns the Substitute identified by the arguments.
      // WIT verifies that the Substitute exists.

@


1.24
log
@Moved Component extraction functions to class Coordinator.
Removed debugging output code from createMyCppCoordinator implementation.
@
text
@a56 7
   static void restoreInstance (Coordinator * theCoord);
      //
      // * Assumes that object iteration for the WitRun is currently positioned
      //   at a Substitute.
      // * Updates the state of the Substitute to as appropriate just after a
      //   call to witPurgeData.

d66 4
@


1.23
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@a56 7
   static void extractInstance (Coordinator * theCoord);
      //
      // * Assumes that object iteration for the WitRun is currently positioned
      //   at a Substitute.
      // * Creates a Java Substitute and a C++ Substitute matching the
      //   Substitute at which object iteration is currently positioned.

@


1.22
log
@purgeData
@
text
@d10 1
a10 1
#include <Element.h>
d20 1
a20 1
//    Element
d26 1
a26 1
class Substitute: public Element
@


1.21
log
@purgeData
@
text
@d64 1
a64 1
   static void preserveInstance (Coordinator * theCoord);
d68 2
a69 3
      // * Sets wasDeletedInWit for the Substitute to false.
      // * Sets mySubIndex_ to match the Substitute at which object iteration is
      //   currently positioned.
@


1.20
log
@purgeData
@
text
@d68 1
a68 2
      // * Tells the matching Java Substitute not to shut down at the end of
      //   purgeData ().
@


1.19
log
@purgeData
@
text
@d73 9
@


1.18
log
@purgeData
@
text
@d59 13
a71 4
      // * Assumes that object iteration be currently positioned at a
      //   Substitute.
      // * Creates a Substitute on both sides of WIT-J matching the Substitute
      //   at which object iteration is currently positioned.
d101 1
a101 1
   const int mySubIndex_;
@


1.17
log
@Implemented Java class CppGateway.
@
text
@d57 7
@


1.16
log
@Updated some comments.
@
text
@d37 1
a37 2
         Part *       thePart,
         JavaObjRep * theSubJOR);
@


1.15
log
@Initial implementation of class ExceptionHandler.
@
text
@d76 1
a76 1
      // Not defined; prevents accidental copying and assignment.
@


1.14
log
@Name change.
@
text
@d19 3
a21 3
//    JavaAccObj
//       Element
//          Substitute
@


1.13
log
@Changed name of Component to Entity.
@
text
@d10 1
a10 1
#include <Entity.h>
d20 1
a20 1
//       Entity
d26 1
a26 1
class Substitute: public Entity
@


1.12
log
@Implemented extraction of substitutes.
@
text
@d10 1
a10 1
#include <Component.h>
d20 1
a20 1
//       Component
d26 1
a26 1
class Substitute: public Component
@


1.11
log
@Call-back infrastructure.
@
text
@d36 1
d86 1
a86 1
   int mySubIndex_;
@


1.10
log
@Changed name of C++ class JAccObject to JavaAccObj.
@
text
@d35 3
a37 2
         BomEntry * theBomEnt,
         Part *     thePart);
@


1.9
log
@Attributes.
@
text
@d19 1
a19 1
//    JAccObject
d46 1
a46 1
      // Override from class JAccObject.
@


1.8
log
@Attributes.
@
text
@d48 1
a48 1
   const char * getOperationCName ();
@


1.7
log
@Accessor names.
@
text
@d44 1
a44 1
   virtual Substitute * thisSubstitute ();
@


1.6
log
@Attributes.
@
text
@d48 1
a48 1
   const char * consumingOpnCName ();
d52 1
a52 1
   int bomIndex ();
d60 1
a60 1
   inline int subIndex ()
d62 1
a62 1
      return subIndex_;
d84 1
a84 1
   int subIndex_;
@


1.5
log
@Removed some #includes.
@
text
@d7 2
a8 2
#ifndef SubstituteH
#define SubstituteH
a47 6
   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

d56 15
@


1.4
log
@Strings.
@
text
@a11 2
#include    <string>

@


1.3
log
@Replaced class WitJ::String with class std::string.
@
text
@d56 1
a56 1
   const std::string & consumingOpnName ();
@


1.2
log
@*** empty log message ***
@
text
@d12 2
d56 1
a56 1
   const String & consumingOpnName ();
@


1.1
log
@*** empty log message ***
@
text
@d58 1
a58 1
   int bomEntIdx ();
d75 1
a75 1
   int subIdx_;
@

