head	1.55;
access;
symbols;
locks; strict;
comment	@ * @;


1.55
date	2011.04.13.16.00.15;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2011.04.08.20.56.18;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2011.03.28.15.57.05;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2011.03.25.22.49.12;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2010.04.20.20.55.06;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2009.06.04.23.04.20;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2009.04.15.23.33.26;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2009.04.15.22.14.55;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2009.04.15.21.11.57;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2009.03.13.19.32.17;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2009.03.05.19.09.17;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2009.03.05.17.21.25;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2009.02.27.23.12.29;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2009.02.27.21.22.39;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2009.02.27.18.44.24;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2009.02.25.20.05.59;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2009.02.25.18.30.39;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2009.02.25.16.55.19;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2009.02.25.16.47.16;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2009.02.25.16.32.17;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2009.02.24.22.18.45;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2009.02.21.01.00.56;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2009.02.20.17.18.43;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2009.02.19.17.39.21;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2009.02.17.19.26.13;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2009.02.06.23.27.12;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2009.02.04.21.51.54;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2009.02.04.20.16.00;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2009.01.29.22.06.37;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.12.15.17.28.46;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.12.15.17.17.38;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.10.07.18.50.22;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.10.06.22.14.01;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.09.29.22.43.46;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.09.26.22.50.16;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.09.04.21.47.41;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.08.29.18.36.43;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.08.29.17.19.06;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.08.29.15.34.42;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.08.27.15.30.45;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.07.01.17.49.15;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.07.01.16.09.21;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.19.20.15.06;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.18.21.28.17;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.10.23.21.34;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.10.22.32.35;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.22.22.00.12;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.22.21.02.57;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.21.14.33.47;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.20.20.37.02;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.19.22.20.54;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.19.16.15.29;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.16.15.40.30;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.15.19.45.16;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.20.54.10;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.55
log
@ArrayJOR classes
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File Demand.h.
//
// Contains the declaration of class Demand.
//------------------------------------------------------------------------------

#ifndef Demand_h
#define Demand_h

#include <Component.h>

#include       <wit.h>

#include    <string>

//------------------------------------------------------------------------------
// Class Demand
//
// Represents a demand in an implosion problem.
//
// Class Hierarchy:
//
// JavaAccObj
//    Component
//       Demand
//------------------------------------------------------------------------------

namespace WitJ
{
class Demand: public Component
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit Demand (Part * thePart, const char * theDemandNameCStr);
      //
      // Constructor.

   ~Demand ();
      //
      // Destructor.

   virtual Demand * asDemand ();
      //
      // Override from class JavaAccObj.

   virtual void setBoundSet (
         const double *,
         const double *,
         const double *);
      //
      // Override from class Component.

   virtual void getBoundSet (
         DblArrayJOR & hardLBAJOR,
         DblArrayJOR & softLBAJOR,
         DblArrayJOR & hardUBAJOR);
      //
      // Override from class Component.

   virtual void copyComponentData (Component *);
      //
      // Override from class Component.

   void appendToPipSeq (int theShipPer, double incShipVol);
      //
      // Appends the shipment triple (this, theShipPer, incShipVol) to the PIP
      // shipment sequence.

   void getPegging (
         int                  thePggAttIdx,
         int                  shipPer,
         PeggingTripleALJOR & theTripALJOR);
      //
      // Retrieves the pegging of the attribute indicated by thePggAttIdx for
      // this Demand in shipPer, storing it in the Java
      // ArrayList <PeggingTriple <? extends Component>> represented by
      // theTripALJOR.

   void setDemandName (const char *);
      //
      // Sets the DemandName of this Demand within the Demand itself and in WIT.

   const char * getPartName ();
      //
      // Access Wrapper from myPart_.

   //---------------------------------------------------------------------------
   // Wrappers for WIT API Functions.
   //---------------------------------------------------------------------------

   double incHeurAlloc (int shipPeriod, double desIncVol);

   //---------------------------------------------------------------------------
   // Accessors.
   //---------------------------------------------------------------------------

   const char * getDemandName ();

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   //---------------------------------------------------------------------------
   // get{Component Class}AttPgg functions.
   //
   // The first argument of each of these functions is thePeggingFunc, which is
   // assumed to be a WIT API function that retrieves a pegging of an attribute
   // of the indicated Component Class, where the pegging might be either PIP or
   // CPeg. The function invokes thePeggingFunc to retrieve the indicated
   // pegging for this Demand in shipPer, storing it in the Java
   // ArrayList <PeggingTriple <C>> represented by the PeggingTripleALJOR, where
   // Java class C must match the Component class indicated in the name of the
   // function.
   //---------------------------------------------------------------------------

   void getPartAttPgg (
         WIT_DECLSPEC witReturnCode STDCALL (* thePeggingFunc) (
            WitRun * const,
            const char * const,
            const char * const,
            const int,
            int *,
            char * * *,
            int * *,
            double * *),
         int                  shipPer,
         PeggingTripleALJOR & thePartATALJOR);

   void getOperationAttPgg (
         WIT_DECLSPEC witReturnCode STDCALL (* thePeggingFunc) (
            WitRun * const,
            const char * const,
            const char * const,
            const int,
            int *,
            char * * *,
            int * *,
            double * *),
         int                  shipPer,
         PeggingTripleALJOR & theOpnATALJOR);

   void getSubstituteAttPgg (
         WIT_DECLSPEC witReturnCode STDCALL (* thePeggingFunc) (
            WitRun * const,
            const char * const,
            const char * const,
            const int,
            int *,
            char * * *,
            int * *,
            int * *,
            int * *,
            double * *),
         int                  shipPer,
         PeggingTripleALJOR & theSubATALJOR);

   void getBopEntryAttPgg (
         WIT_DECLSPEC witReturnCode STDCALL (* thePeggingFunc) (
            WitRun * const,
            const char * const,
            const char * const,
            const int,
            int *,
            char * * *,
            int * *,
            int * *,
            double * *),
         int                  shipPer,
         PeggingTripleALJOR & theBopEntATALJOR);

   //---------------------------------------------------------------------------

   Demand              (const Demand &);
   Demand & operator = (const Demand &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   Part * const myPart_;
      //
      // The demanded Part for this Demand.

   std::string myDemandName_;
      //
      // The DemandName of this Demand.
   };
};
//
// End of namespace WitJ.

#endif
@


1.54
log
@copyComponentData
@
text
@d58 3
a60 3
         WitVecOwner <double> &,
         WitVecOwner <double> &,
         WitVecOwner <double> &);
@


1.53
log
@Changed name of class AllocTriple to PeggingTriple.
@
text
@d64 4
@


1.52
log
@ArrayListJOR
@
text
@d70 3
a72 3
         int                thePggAttIdx,
         int                shipPer,
         AllocTripleALJOR & theTripALJOR);
d76 1
a76 1
      // ArrayList <AllocTriple <? extends Component>> represented by
d113 1
a113 1
   // ArrayList <AllocTriple <C>> represented by the AllocTripleALJOR, where
d128 2
a129 2
         int                shipPer,
         AllocTripleALJOR & thePartATALJOR);
d141 2
a142 2
         int                shipPer,
         AllocTripleALJOR & theOpnATALJOR);
d156 2
a157 2
         int                shipPer,
         AllocTripleALJOR & theSubATALJOR);
d170 2
a171 2
         int                shipPer,
         AllocTripleALJOR & theBopEntATALJOR);
@


1.51
log
@Multi-Obj Mode
@
text
@d70 3
a72 3
         int              thePggAttIdx,
         int              shipPer,
         AllocTripleVec * theTripleVec);
d75 3
a77 1
      // this Demand in shipPer, storing it in theTripleVec.
d108 1
a108 1
   // The first argument of each of these functions is thePggFunc, which is
d111 5
a115 2
   // CPeg. The function invokes thePggFunc to retrieve the indicated pegging
   // for this Demand in shipPer, storing it in theTripleList.
d119 1
a119 1
          WIT_DECLSPEC witReturnCode STDCALL (* thePggFunc) (
d128 2
a129 2
         int              shipPer,
         AllocTripleVec * theTripleVec);
d132 1
a132 1
          WIT_DECLSPEC witReturnCode STDCALL (* thePggFunc) (
d141 2
a142 2
         int              shipPer,
         AllocTripleVec * theTripleVec);
d145 1
a145 1
          WIT_DECLSPEC witReturnCode STDCALL (* thePggFunc) (
d156 2
a157 2
         int              shipPer,
         AllocTripleVec * theTripleVec);
d160 1
a160 1
          WIT_DECLSPEC witReturnCode STDCALL (* thePggFunc) (
d170 2
a171 2
         int              shipPer,
         AllocTripleVec * theTripleVec);
@


1.50
log
@Changed handling of Lists of AllocTriples to avoid call-backs.
@
text
@d58 3
a60 3
         VecWoa <double> &,
         VecWoa <double> &,
         VecWoa <double> &);
@


1.49
log
@Moved findInstsnce functions into class Component.
@
text
@d70 3
a72 3
         int               thePggAttIdx,
         int               shipPer,
         AllocTripleList * theTripleList);
d75 1
a75 1
      // this Demand in shipPer, storing it in theTripleList.
d123 2
a124 2
         int               shipPer,
         AllocTripleList * theTripleList);
d136 2
a137 2
         int               shipPer,
         AllocTripleList * theTripleList);
d151 2
a152 2
         int               shipPer,
         AllocTripleList * theTripleList);
d165 4
a168 2
         int               shipPer,
         AllocTripleList * theTripleList);
@


1.48
log
@Moved restoreInstance functions from the Component classes to class
   Coordinator.
@
text
@a84 8
   static Demand * findInstance (
         Coordinator * theCoord,
         const char *  thePartName,
         const char *  theDemandName);
      //
      // Finds and returns the Demand identified by the arguments.
      // WIT verifies that the Demand exists.

@


1.47
log
@Moved Component extraction functions to class Coordinator.
Removed debugging output code from createMyCppCoordinator implementation.
@
text
@a84 7
   static void restoreInstance (Coordinator * theCoord);
      //
      // * Assumes that object iteration for the WitRun is currently positioned
      //   at a Demand.
      // * Updates the state of the Demand to as appropriate just after a call
      //   to witPurgeData.

@


1.46
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@a84 7
   static void extractInstance (Coordinator * theCoord);
      //
      // * Assumes that object iteration for the WitRun is currently positioned
      //   at a Demand.
      // * Creates a Java Demand and a C++ Demand matching the Demand at which
      //   object iteration is currently positioned.

@


1.45
log
@purgeData
@
text
@d10 1
a10 1
#include <Element.h>
d12 1
a12 1
#include     <wit.h>
d14 1
a14 1
#include  <string>
d24 1
a24 1
//    Element
d30 1
a30 1
class Demand: public Element
d55 1
a55 1
      // Override from class Element.
d62 1
a62 1
      // Override from class Element.
d126 1
a126 1
   // get{Element Class}AttPgg functions.
d130 1
a130 1
   // of the indicated Element Class, where the pegging might be either PIP or
@


1.44
log
@purgeData
@
text
@d92 1
a92 1
   static void preserveInstance (Coordinator * theCoord);
d96 2
a97 1
      // * Sets wasDeletedInWit for the Demand to false.
@


1.43
log
@purgeData
@
text
@d96 1
a96 2
      // * Tells the matching Java Demand not to shut down at the end of
      //   purgeData ().
@


1.42
log
@purgeData
@
text
@d99 8
@


1.41
log
@purgeData
@
text
@d87 3
a89 2
      // * Assumes that object iteration be currently positioned at a Demand.
      // * Creates a Demand on both sides of WIT-J matching the Demand at which
d92 7
@


1.40
log
@PIP.
@
text
@d85 6
@


1.39
log
@Concurrent pegging.
@
text
@a4 1
// Contains the declaration of enum PggAttID
d14 1
a14 25
#include <string>

//------------------------------------------------------------------------------
// Enum PggAttID
//
// Identifies a pegging attribute.
//------------------------------------------------------------------------------

namespace WitJ
{
enum PggAttID
   {
      CONS_VOL_PIP  = 0,
   CO_EXEC_VOL_PIP  = 1,
      EXEC_VOL_PIP  = 2,
      PROD_VOL_PIP  = 3,
      SIDE_VOL_PIP  = 4,
       SUB_VOL_PIP  = 5,
    SUPPLY_VOL_PIP  = 6,
      EXEC_VOL_CPEG = 7,
       SUB_VOL_CPEG = 8,
   };
};
//
// End of namespace WitJ.
d70 1
a70 1
         PggAttID          thePggAttID,
d74 1
a74 1
      // Retrieves the pegging of the attribute indicated by thePggAttID for
@


1.38
log
@Pegging
@
text
@d27 9
a35 7
      CONS_VOL_PIP = 0,
   CO_EXEC_VOL_PIP = 1,
      EXEC_VOL_PIP = 2,
      PROD_VOL_PIP = 3,
      SIDE_VOL_PIP = 4,
       SUB_VOL_PIP = 5,
    SUPPLY_VOL_PIP = 6,
@


1.37
log
@Pegging
@
text
@d5 1
a5 1
// Contains the declaration of enum PeggingAttID
d18 1
a18 1
// Enum PeggingAttID
d25 1
a25 1
enum PeggingAttID
d93 1
a93 1
         PeggingAttID      thePeggingAttID,
d97 1
a97 1
      // Retrieves the pegging of the attribute indicated by thePeggingAttID for
@


1.36
log
@Pegging
@
text
@d92 1
a92 1
   void getPip (
d97 1
a97 1
      // Retrieves the PIP of the attribute indicated by thePeggingAttID for
@


1.35
log
@PIP.
@
text
@d127 1
a127 1
   // PIP retrieval functions.
d129 5
a133 2
   // Each of these functions retrieves the PIP of the indicated attribute for
   // this Demand in shipPer, storing it in theTripleList.
d136 25
a160 3
   void getCoExecVolPip (int shipPer, AllocTripleList * theTripleList);
   void getExecVolPip   (int shipPer, AllocTripleList * theTripleList);
   void getSubVolPip    (int shipPer, AllocTripleList * theTripleList);
d162 14
a175 1
   //---------------------------------------------------------------------------
d177 2
a178 2
   void getPartAttPip (
          WIT_DECLSPEC witReturnCode STDCALL (* thePipFunc) (
d186 1
a189 4
      //
      // Assuming thePipFunc is a WIT API function that retrieves a PIP of a
      // Part attribute, this function invokes thePipFunc to retrieve the
      // indicated PIP for this Demand in shipPer, storing it in theTripleList.
@


1.34
log
@PIP.
@
text
@d30 3
a32 3
      PROD_VOL_PIP = 4,
      SIDE_VOL_PIP = 5,
       SUB_VOL_PIP = 3,
@


1.33
log
@Added the AllocTripleList classes.
@
text
@d5 1
d13 2
d18 22
d92 4
a95 1
   void getExecVolPip (int shipPer, AllocTripleList * theTripleList);
d97 2
a98 2
      // Retrieves the execVol PIP for this Demand in shipPer, storing it in
      // theTripleList.
d127 28
@


1.32
log
@Demand.getExecVolPip
@
text
@d67 1
a67 1
   void getExecVolPip (int shipPer);
d69 2
a70 2
      // Retrieves the execVol PIP for this Demand in shipPer and stores it in
      // the Java Coordinator's currently held AllocTriple List.
@


1.31
log
@PIP.
@
text
@d67 5
@


1.30
log
@Removed eqHeurAllocTwme
@
text
@d62 5
@


1.29
log
@Heuristic Allocation
@
text
@a75 5
   double incHeurAllocTwme (
      int    shipPeriod,
      double desIncVol,
      bool   asapMultiExec);

@


1.28
log
@Heuristic Allocation
@
text
@d76 5
@


1.27
log
@Implemented Java class CppGateway.
@
text
@d71 6
@


1.26
log
@Updated some comments.
@
text
@d36 1
a36 4
   explicit Demand (
         Part *       thePart,
         const char * theDemandNameCStr,
         JavaObjRep * theDemandJOR);
@


1.25
log
@Initial implementation of class ExceptionHandler.
@
text
@d90 1
a90 1
      // Not defined; prevents accidental copying and assignment.
@


1.24
log
@Name change.
@
text
@d21 3
a23 3
//    JavaAccObj
//       Element
//          Demand
@


1.23
log
@Changed name of Component to Entity.
@
text
@d10 1
a10 1
#include <Entity.h>
d22 1
a22 1
//       Entity
d28 1
a28 1
class Demand: public Entity
d56 1
a56 1
      // Override from class Entity.
d63 1
a63 1
      // Override from class Entity.
@


1.22
log
@Call-back infrastructure.
@
text
@d10 1
a10 1
#include <Component.h>
d12 1
a12 1
#include    <string>
d22 1
a22 1
//       Component
d28 1
a28 1
class Demand: public Component
d56 1
a56 1
      // Override from class Component.
d63 1
a63 1
      // Override from class Component.
@


1.21
log
@Changed name of C++ class JAccObject to JavaAccObj.
@
text
@d38 2
a39 1
         const char * theDemandNameCStr);
@


1.20
log
@Added attribute cumShipBounds.
@
text
@d21 1
a21 1
//    JAccObject
d48 1
a48 1
      // Override from class JAccObject.
@


1.19
log
@"demandName" attribute.
@
text
@d50 14
@


1.18
log
@"operationName" attribute.
@
text
@d50 4
@


1.17
log
@Attributes.
@
text
@d38 1
a38 1
         const char * demandNameCStr);
d83 1
a83 1
      // The demandName of this Demand.
@


1.16
log
@Attributes.
@
text
@d50 1
a50 1
   const char * getPartCName ();
d58 1
a58 1
   const char * getDemandCName ();
@


1.15
log
@Accessor names.
@
text
@d46 1
a46 1
   virtual Demand * thisDemand ();
@


1.14
log
@Changed the names of access functions beginning with "my"
to begin with "get".
@
text
@d58 1
a58 1
   const char * demandCName ();
d81 1
a81 1
   std::string demandName_;
@


1.13
log
@Implemented the demandVol attribute.
@
text
@d50 1
a50 1
   const char * myPartCName ();
@


1.12
log
@Attributes.
@
text
@a49 6
   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

d61 6
@


1.11
log
@Strings.
@
text
@d7 2
a8 2
#ifndef DemandH
#define DemandH
@


1.10
log
@Replaced class WitJ::String with class std::string.
@
text
@d56 1
a56 1
   const std::string & myPartName ();
d60 8
@


1.9
log
@*** empty log message ***
@
text
@d11 2
a12 1
#include    <String.h>
d56 1
a56 1
   const String & myPartName ();
d73 1
a73 1
   String demandName_;
@


1.8
log
@*** empty log message ***
@
text
@d55 1
a55 1
   const String & demandedPartName ();
d57 1
a57 1
      // Access Wrapper from demandedPart_.
d68 1
a68 1
   Part * const demandedPart_;
@


1.7
log
@*** empty log message ***
@
text
@d16 1
a16 1
// Represents an demand in an implosion problem.
d50 1
a50 1
   // Access Wrapper.
d53 2
a58 6
   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

@


1.6
log
@*** empty log message ***
@
text
@a44 4
   virtual void getDerivedInstance (Demand * &);
      //
      // Override from class JAccObject.

@


1.5
log
@*** empty log message ***
@
text
@d37 1
a37 1
         const char * demandNameVal);
@


1.4
log
@*** empty log message ***
@
text
@d49 4
@


1.3
log
@*** empty log message ***
@
text
@d35 1
a35 1
   Demand (
@


1.2
log
@*** empty log message ***
@
text
@a35 6
         const CIJia <Part> & thePartJia,
         const StringJia &    demandNameJia);
      //
      // Constructor.

   Demand (
@


1.1
log
@*** empty log message ***
@
text
@d41 6
@

