head	1.25;
access;
symbols;
locks; strict;
comment	@ * @;


1.25
date	2011.04.07.19.07.38;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2009.07.23.18.26.40;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2009.07.21.19.09.15;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2009.04.13.22.19.43;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2009.04.10.23.51.14;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.01.05.20.21.34;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.01.05.19.06.01;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.01.05.17.28.57;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.01.02.23.44.18;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.12.24.22.59.45;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.12.24.20.34.21;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.12.24.15.37.33;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.12.24.15.01.10;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.24.00.18.54;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.23.15.30.36;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.22.23.15.50;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.22.16.29.11;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.18.16.18.27;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.16.22.53.13;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.16.17.18.54;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.15.22.31.41;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.15.22.00.16;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.15.21.40.50;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.12.15.17.28.47;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.15.17.17.39;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.25
log
@getExpCycle
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File ExceptionHandler.C.
//
// Contains the implementation of class ExceptionHandler.
//------------------------------------------------------------------------------

#include <ExceptionHandler.h>
#include <PreJavaException.h>

#include              <wit.h>

#include           <string>

//------------------------------------------------------------------------------

void WitJ::ExceptionHandler::handleAnyException (JNIEnv * theJNIEnv)
   {
   ExceptionHandler theHandler (theJNIEnv);

   theHandler.handleAnyException ();
   }

//------------------------------------------------------------------------------

WitJ::ExceptionHandler::ExceptionHandler (JNIEnv * theJNIEnv):

      JniClient (theJNIEnv)
   {
   }

//------------------------------------------------------------------------------

WitJ::ExceptionHandler::~ExceptionHandler ()
   {
   }

//------------------------------------------------------------------------------

void WitJ::ExceptionHandler::handleAnyException ()
   {
   try
      {
      throw;
      }

   catch (WitErrorExc & theWitErrorExc)
      {
      handleWitErrorExc (theWitErrorExc);
      }

   catch (PreJavaException & thePreJavaException)
      {
      raiseJavaException (
         thePreJavaException.getJavaExcClassName (),
         thePreJavaException.getMessage          ());
      }

   catch (_jthrowable * theJThrow)
      {
      handleJThrowable (theJThrow);
      }

   catch (std::bad_alloc &)
      {
      raiseJavaException ("OutOfMemoryException", "WIT-J's C++ code");
      }

   catch (...)
      {
      raiseJavaException (
         "InternalErrorException", 
         "   A C++ exception of an unexpected type "
            "was thrown from the C++ side of WIT-J.");
      }
   }

//------------------------------------------------------------------------------

void WitJ::ExceptionHandler::handleWitErrorExc (WitErrorExc & theWitErrorExc)
   {
   if (theWitErrorExc.retCode () == WitSEVERE_RC)
      {
      if (theWitErrorExc.mesgNum () == 404)
         {
         raiseJavaException ("OutOfMemoryException", "WIT");
         }
      else
         {
         raiseJavaException (
            "TerminalAppException",
            "   WIT has issued a severe error message.");
         }
      }
   else if (theWitErrorExc.retCode () == WitFATAL_RC)
      {
      raiseJavaException (
         "InternalErrorException", 
         "   WIT has issued a fatal error message.");
      }
   else
      {
      ABORTING_ASSERT (false);
      }
   }

//------------------------------------------------------------------------------

void WitJ::ExceptionHandler::handleJThrowable (_jthrowable * theJThrow)
   {
   _jclass * theOutOfMemoryErrorJCl;
   bool      memoryCase;

   theOutOfMemoryErrorJCl =
      getJNIEnv ()->FindClass ("java/lang/OutOfMemoryError");

   abortOnJavaException ();

   memoryCase = getJNIEnv ()->IsInstanceOf (theJThrow, theOutOfMemoryErrorJCl);

   if (memoryCase)
      {
      raiseJavaException ("OutOfMemoryException", "JNI");
      }
   else
      {
      raiseJavaExceptionForJThrowable (theJThrow);
      }

   deleteLocalRef (theOutOfMemoryErrorJCl);
   }

//------------------------------------------------------------------------------

void WitJ::ExceptionHandler::raiseJavaException (
      const char * theClassName,
      const char * message)
   {
   std::string theClassDesc;
   _jclass *   theJClass;
   jint        throwResult;

   theClassDesc  = "com/ibm/witj/";

   theClassDesc += theClassName;

   theJClass     = getJNIEnv ()->FindClass (theClassDesc.c_str ());

   abortOnJavaException ();

   throwResult   = getJNIEnv ()->ThrowNew (theJClass, message);

   ABORTING_ASSERT (throwResult == 0);

   deleteLocalRef (theJClass);
   }

//------------------------------------------------------------------------------

void WitJ::ExceptionHandler::raiseJavaExceptionForJThrowable (
      _jthrowable * causeJThrow)
   {
   _jclass *     theInternalErrorExcJCl;
   _jmethodID *  newInstanceForThrowableFromJniID;
   _jobject *    theInternalErrorExcJObj;
   _jthrowable * theInternalErrorExcJThrow;
   jint          throwResult;

   theInternalErrorExcJCl =
      getJNIEnv ()->FindClass ("com/ibm/witj/InternalErrorException");

   abortOnJavaException ();

   newInstanceForThrowableFromJniID =
      getJNIEnv ()->
         GetStaticMethodID (
            theInternalErrorExcJCl,
            "newInstanceForThrowableFromJni",
            "(Ljava/lang/Throwable;)Lcom/ibm/witj/InternalErrorException;");

   abortOnJavaException ();

   theInternalErrorExcJObj =
      getJNIEnv ()->
         CallStaticObjectMethod (
            theInternalErrorExcJCl,
            newInstanceForThrowableFromJniID,
            causeJThrow);

   abortOnJavaException ();

   theInternalErrorExcJThrow =
      static_cast <_jthrowable *> (theInternalErrorExcJObj);

   throwResult = getJNIEnv ()->Throw (theInternalErrorExcJThrow);

   ABORTING_ASSERT (throwResult == 0);

   deleteLocalRef (theInternalErrorExcJCl);
   deleteLocalRef (theInternalErrorExcJObj);
   }

//------------------------------------------------------------------------------

void WitJ::ExceptionHandler::abortOnJavaException ()
   {
   if (getJNIEnv ()->ExceptionCheck ())
      {
      getJNIEnv ()->ExceptionDescribe ();

      ABORTING_ASSERT (false);
      }
   }
@


1.24
log
@Changed name of class TerminalAppErrorException to TerminalAppException.
@
text
@a119 2
   deleteLocalRef (theOutOfMemoryErrorJCl);

d128 2
@


1.23
log
@Replaced class WitSevereErrorException with class TerminalAppErrorException.
@
text
@d90 1
a90 1
            "TerminalAppErrorException",
@


1.22
log
@Implemented C++ class PreJavaException.
@
text
@d89 3
a91 1
         raiseJavaException ("WitSevereErrorException");
@


1.21
log
@Bad data file character detection.
@
text
@d8 1
a8 1
#include  <AssertException.h>
d51 1
a51 1
   catch (AssertException & theAssertException)
d54 2
a55 2
         "InternalErrorException", 
         theAssertException.getMessage ().c_str ());
a80 4
   std::string theFuncName;

   theFuncName = theWitErrorExc.funcName ();

a82 2
      std::string witReadDataStr = "witReadData";

a86 8
      else if (theFuncName == "witReadData")
         {
         raiseJavaException ("ReadDataException");
         }
      else if (theFuncName == "witReadData")
         {
         raiseJavaException ("WitSevereErrorException");
         }
d96 1
a96 1
         "   WIT has issued a fatal message.");
@


1.20
log
@Added code to handle errors in the execution of readData.
@
text
@d97 4
@


1.19
log
@Added code to handle running out of memory in WIT.
@
text
@d81 4
d87 2
d93 4
@


1.18
log
@Implemented the handling of fatal errors from WIT.
@
text
@d83 8
a90 1
      raiseJavaException ("WitSevereErrorException");
d99 1
d101 1
@


1.17
log
@Collapsed the subclasses of InternalErrorException into InternalErrorException.
@
text
@d85 1
a85 1
   else
d87 3
a89 1
      raiseJavaException ("UnexpCppExcException");
d91 2
@


1.16
log
@Added code to handle severe errors from WIT.
@
text
@d54 1
a54 1
         "CppAssertionException",
d70 4
a73 1
      raiseJavaException ("UnexpCppExcException");
d113 1
a113 1
      raiseJniExcException (theJThrow);
d144 2
a145 1
void WitJ::ExceptionHandler::raiseJniExcException (_jthrowable * causeJThrow)
d147 4
a150 4
   _jclass *     theJniExcExcJCl;
   _jmethodID *  theCtorID;
   _jobject *    theJniExcExcJObj;
   _jthrowable * theJniExcExcJThrow;
d153 2
a154 3
   ABORTING_ASSERT (causeJThrow != NULL);

   theJniExcExcJCl = getJNIEnv ()->FindClass ("com/ibm/witj/JniExcException");
d158 1
a158 1
   theCtorID =
d160 4
a163 1
         GetMethodID (theJniExcExcJCl, "<init>", "(Ljava/lang/Throwable;)V");
d167 6
a172 2
   theJniExcExcJObj =
      getJNIEnv ()->NewObject (theJniExcExcJCl, theCtorID, causeJThrow);
d176 2
a177 1
   theJniExcExcJThrow = static_cast <_jthrowable *> (theJniExcExcJObj);
d179 1
a179 1
   throwResult = getJNIEnv ()->Throw (theJniExcExcJThrow);
d183 2
a184 2
   deleteLocalRef (theJniExcExcJObj);
   deleteLocalRef (theJniExcExcJCl);
@


1.15
log
@Added code to handle memory errors in makeJString.
@
text
@d10 2
d46 5
d76 14
@


1.14
log
@Minor revision.
@
text
@d53 1
a53 1
      raiseJniExcException (theJThrow);
d69 26
d122 1
a122 1
   _jclass *     theJClass;
d130 1
a130 1
   theJClass = getJNIEnv ()->FindClass ("com/ibm/witj/JniExcException");
d136 1
a136 1
         GetMethodID (theJClass, "<init>", "(Ljava/lang/Throwable;)V");
d141 1
a141 1
      getJNIEnv ()->NewObject (theJClass, theCtorID, causeJThrow);
d152 1
a152 1
   deleteLocalRef (theJClass);
@


1.13
log
@Replaced class JavaExcException with the throwing of a _jthrowable pointer.
@
text
@d128 12
@


1.12
log
@Added code to handle Java exceptions raised during the execution of JNI
   functions.
@
text
@a8 1
#include <JavaExcException.h>
d51 1
a51 1
   catch (JavaExcException & theJavaExcException)
d53 1
a53 1
      raiseJniExcException (theJavaExcException);
d94 1
a94 2
void WitJ::ExceptionHandler::raiseJniExcException (
      JavaExcException & theJavaExcException)
a97 1
   _jthrowable * causeJThrowable;
d99 1
a99 1
   _jthrowable * theJniExcExcJThrowable;
d102 2
a113 2
   causeJThrowable  = theJavaExcException.getJThrowable ();

d115 1
a115 1
      getJNIEnv ()->NewObject (theJClass, theCtorID, causeJThrowable);
d119 1
a119 1
   theJniExcExcJThrowable = static_cast <_jthrowable *> (theJniExcExcJObj);
d121 1
a121 1
   throwResult = getJNIEnv ()->Throw (theJniExcExcJThrowable);
@


1.11
log
@Added code to handle a memory overflow in the C++ side of WIT-J.
@
text
@d9 1
d47 1
a47 1
      submitJavaException (
d52 1
a52 1
   catch (std::bad_alloc & theExc)
d54 6
a59 1
      submitJavaException ("OutOfMemoryException", "WIT-J's C++ code");
d64 1
a64 4
      submitJavaException (
         "UnexpCppExcException",
         "   A C++ exception of an unexpected type "
            "was thrown from the C++ side of WIT-J.\n");
d70 1
a70 1
void WitJ::ExceptionHandler::submitJavaException (
d84 1
a84 1
   checkForJniException ();
d93 38
@


1.10
log
@Changed some Java Exception class names.
@
text
@d51 5
@


1.9
log
@Implemented EXCEPTION_ASSERT and ABORTING_ASSERT.
@
text
@d47 1
a47 1
         "CppAssertFailureException",
d54 1
a54 1
         "UnexpectedCppExcException",
@


1.8
log
@Minor revision.
@
text
@d80 1
a80 1
   WITJ_ASSERT (throwResult == 0);
@


1.7
log
@C++ assertion exceptions.
@
text
@d46 1
a46 1
      pendJavaException (
d53 1
a53 1
      pendJavaException (
d62 1
a62 1
void WitJ::ExceptionHandler::pendJavaException (
@


1.6
log
@Implemented and used ExceptionHandler::pendJavaException.
@
text
@d8 1
d44 7
@


1.5
log
@Added test of C++ assertion failure.
@
text
@d9 2
d45 4
a48 1
      handleUnexpectedException ();
d54 3
a56 1
void WitJ::ExceptionHandler::handleUnexpectedException ()
d58 3
a60 5
   _jclass *     theJClass;
   _jmethodID *  theCtorID;
   _jobject *    theExcJObj;
   _jthrowable * theExcJThrowable;
   jint          throwResult;
d62 1
a62 2
   theJClass =
      getJNIEnv ()->FindClass ("com/ibm/witj/UnexpectedCppExcException");
d64 1
a64 1
   checkForJniException ();
d66 1
a66 1
   theCtorID = getJNIEnv ()->GetMethodID (theJClass, "<init>", "()V");
d70 1
a70 7
   theExcJObj = getJNIEnv ()->NewObject (theJClass, theCtorID);

   checkForJniException ();

   theExcJThrowable = static_cast <_jthrowable *> (theExcJObj);

   throwResult = getJNIEnv ()->Throw (theExcJThrowable);
a73 1
   deleteLocalRef (theExcJThrowable);
d76 1
@


1.4
log
@Deleted some local references.
@
text
@d36 15
@


1.3
log
@Implemented Java class UnexpectedCppExcException.
@
text
@d60 3
@


1.2
log
@Updated some comments.
@
text
@d13 11
a23 1
   WITJ_ASSERT (false);
d26 35
@


1.1
log
@Initial implementation of class ExceptionHandler.
@
text
@d4 1
a4 1
// Contains the definition of class ExceptionHandler.
@

