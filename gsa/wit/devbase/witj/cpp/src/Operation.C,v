head	1.60;
access;
symbols;
locks; strict;
comment	@ * @;


1.60
date	2011.04.13.16.00.17;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2011.04.08.20.56.19;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2010.04.20.20.55.07;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2010.04.19.20.48.01;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2010.04.17.00.20.19;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2009.04.15.23.33.27;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2009.04.15.22.14.55;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2009.04.15.21.11.57;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2009.04.14.16.17.17;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2009.04.13.22.52.30;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2009.04.13.19.51.40;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2009.04.09.19.26.41;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2009.04.09.16.28.30;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2009.03.13.19.32.19;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2009.03.05.19.09.17;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2009.03.05.17.21.26;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2009.02.28.00.27.54;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2009.02.27.23.12.29;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2009.02.27.21.22.39;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2009.02.27.18.44.24;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2009.02.26.22.46.58;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2009.02.14.00.51.29;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2009.01.29.22.06.38;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2009.01.23.19.32.23;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2009.01.21.21.43.22;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2009.01.16.19.08.59;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2009.01.16.17.03.34;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2009.01.16.16.32.02;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.12.15.17.28.48;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.11.26.18.33.04;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.10.07.18.50.24;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.10.06.22.14.02;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.10.03.19.06.59;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.10.02.17.34.35;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.10.01.22.10.11;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.10.01.18.19.15;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.09.29.22.43.46;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.09.12.15.21.59;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.09.12.14.43.22;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.09.09.18.59.58;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.09.04.20.36.22;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.08.29.17.19.06;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.08.29.15.34.42;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.08.28.18.50.40;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.08.27.15.30.45;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.07.01.17.49.15;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.07.01.16.09.22;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.26.19.18.06;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.10.23.21.34;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.10.22.32.35;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.05.30.15.52.19;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.28.22.29.35;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.28.20.24.46;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.21.14.33.48;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.20.20.37.02;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.20.18.16.40;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.19.22.20.55;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.16.15.40.30;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.15.19.45.17;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.20.54.11;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.60
log
@ArrayJOR classes
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File Operation.C.
//
// Contains the implementation of class Operation.
//------------------------------------------------------------------------------

#include   <Operation.h>
#include <Coordinator.h>
#include    <ArrayJOR.h>

#include         <wit.h>

//------------------------------------------------------------------------------

WitJ::Operation::Operation (
         Coordinator * theCoord,
         const char *  theOpnNameCStr):

      Component        (theCoord),
      myOperationName_ (theOpnNameCStr)
   {
   if (! extractInProgress ())
      witAddOperation (getWitRun (), getOperationName ());

   witSetOperationAppData (getWitRun (), getOperationName (), this);

   theCoord->recordCreatePartOpn ();
   }

//------------------------------------------------------------------------------

WitJ::Operation::~Operation ()
   {
   getCoordinator ()->recordDeletePartOpn ();
   }

//------------------------------------------------------------------------------

WitJ::Operation * WitJ::Operation::asOperation ()
   {
   return this;
   }

//------------------------------------------------------------------------------

void WitJ::Operation::setBoundSet (
      const double * hardLBCVec,
      const double * softLBCVec,
      const double * hardUBCVec)
   {
   witSetOperationExecBoundsDbl (
      getWitRun        (),
      getOperationName (),
      hardLBCVec,
      softLBCVec,
      hardUBCVec);
   }

//------------------------------------------------------------------------------

void WitJ::Operation::getBoundSet (
      DblArrayJOR & hardLBAJOR,
      DblArrayJOR & softLBAJOR,
      DblArrayJOR & hardUBAJOR)
   {
   double * hardLBCVec;
   double * softLBCVec;
   double * hardUBCVec;

   witGetOperationExecBoundsDbl (
      getWitRun        (),
      getOperationName (),
    & hardLBCVec,
    & softLBCVec,
    & hardUBCVec);
 
   hardLBAJOR.copyFrom (hardLBCVec);
   softLBAJOR.copyFrom (softLBCVec);
   hardUBAJOR.copyFrom (hardUBCVec);

   witFree (hardLBCVec);
   witFree (softLBCVec);
   witFree (hardUBCVec);
   }

//------------------------------------------------------------------------------

void WitJ::Operation::copyComponentData (Component * origComp)
   {
   Operation * origOpn;

   origOpn = origComp->asOperation ();

   witCopyOperationData (
               getWitRun        (),
               getOperationName (),
      origOpn->getWitRun        (),
      origOpn->getOperationName ());
   }

//------------------------------------------------------------------------------

void WitJ::Operation::setOperationName (const char * theOpnNameCStr)
   {
   witSetOperationOperationName (
      getWitRun        (),
      getOperationName (),
      theOpnNameCStr);

   myOperationName_ = theOpnNameCStr;
   }

//------------------------------------------------------------------------------

const char * WitJ::Operation::getOperationName ()
   {
   return myOperationName_.c_str ();
   }
@


1.59
log
@copyComponentData
@
text
@d9 1
a9 1
#include <WitVecOwner.h>
d62 7
a68 7
      WitVecOwner <double> & hardLBWVO,
      WitVecOwner <double> & softLBWVO,
      WitVecOwner <double> & hardUBWVO)
   {
   double * hardLBWitVec;
   double * softLBWitVec;
   double * hardUBWitVec;
d73 11
a83 7
    & hardLBWitVec,
    & softLBWitVec,
    & hardUBWitVec);

   hardLBWVO.acquireWitVec (hardLBWitVec);
   softLBWVO.acquireWitVec (softLBWitVec);
   hardUBWVO.acquireWitVec (hardUBWitVec);
@


1.58
log
@Multi-Obj Mode
@
text
@d84 15
@


1.57
log
@Multi-Obj Mode
@
text
@d9 1
a9 1
#include      <VecWoa.h>
d62 3
a64 3
      VecWoa <double> & hardLBWoa,
      VecWoa <double> & softLBWoa,
      VecWoa <double> & hardUBWoa)
d77 3
a79 3
   hardLBWoa.acquireWitVec (hardLBWitVec);
   softLBWoa.acquireWitVec (softLBWitVec);
   hardUBWoa.acquireWitVec (hardUBWitVec);
@


1.56
log
@Multi-Obj Mode
@
text
@d66 3
a68 3
   double * hardLBCVec;
   double * softLBCVec;
   double * hardUBCVec;
d73 7
a79 7
    & hardLBCVec,
    & softLBCVec,
    & hardUBCVec);

   hardLBWoa.acquire (hardLBCVec);
   softLBWoa.acquire (softLBCVec);
   hardUBWoa.acquire (hardUBCVec);
@


1.55
log
@Moved findInstsnce functions into class Component.
@
text
@d66 4
d71 9
a79 5
      getWitRun             (),
      getOperationName      (),
      hardLBWoa.getCVecAddr (),
      softLBWoa.getCVecAddr (),
      hardUBWoa.getCVecAddr ());
@


1.54
log
@Moved restoreInstance functions from the Component classes to class
   Coordinator.
@
text
@d9 1
a9 2
#include   <StringWoa.h>
#include  <JavaObjRep.h>
a87 13
WitJ::Operation * WitJ::Operation::findInstance (
      Coordinator * theCoord,
      const char *  theOpnName)
   {
   void * theAppData;

   witGetOperationAppData (theCoord->getWitRun (), theOpnName, & theAppData);

   return static_cast <Operation *> (theAppData);
   }

//------------------------------------------------------------------------------

@


1.53
log
@Moved Component extraction functions to class Coordinator.
Removed debugging output code from createMyCppCoordinator implementation.
@
text
@a88 16
void WitJ::Operation::restoreInstance (Coordinator * theCoord)
   {
   StringWoa   theOpnNameWoa;
   Operation * theOpn;

   witGetObjItrOperation (
      theCoord    ->getWitRun   (),
      theOpnNameWoa.getCStrAddr ());

   theOpn = findInstance (theCoord, theOpnNameWoa .getCString ());

   theOpn->setWasDeletedInWit (false);
   }

//------------------------------------------------------------------------------

@


1.52
log
@Detection of non-UTF-8.
@
text
@a88 15
void WitJ::Operation::extractInstance (Coordinator * theCoord)
   {
   StringWoa theOpnNameWoa;

   witGetObjItrOperation (
      theCoord    ->getWitRun   (),
      theOpnNameWoa.getCStrAddr ());

   theCoord->verifyUTF8 (theOpnNameWoa.getCString ());

   JavaObjRep::makeOperation (theCoord, theOpnNameWoa.getCString ());
   }

//------------------------------------------------------------------------------

@


1.51
log
@Checking for non-UTF-8 characters.
@
text
@d7 4
a10 5
#include        <Operation.h>
#include      <Coordinator.h>
#include        <StringWoa.h>
#include       <JavaObjRep.h>
#include <PreJavaException.h>
d12 1
a12 1
#include              <wit.h>
d91 1
a91 2
   StringWoa    theOpnNameWoa;
   const char * theOpnNameCStr;
d97 1
a97 1
   theOpnNameCStr = theOpnNameWoa.getCString ();
d99 1
a99 6
   if (! theCoord->getJavaObjRep ()->isaUTF8String (theOpnNameCStr))
      {
      throw PreJavaException ("NonUTF8DataFileException", theOpnNameCStr);
      }

   JavaObjRep::makeOperation (theCoord, theOpnNameCStr);
@


1.50
log
@Detection of  non-UFT-8 strings.
@
text
@d7 5
a11 4
#include   <Operation.h>
#include <Coordinator.h>
#include   <StringWoa.h>
#include  <JavaObjRep.h>
d13 1
a13 1
#include         <wit.h>
d92 2
a93 1
   StringWoa theOpnNameWoa;
d99 1
a99 2
   EXCEPTION_ASSERT (
      theCoord->getJavaObjRep ()->isaUTF8String (theOpnNameWoa.getCString ()));
d101 6
a106 1
   JavaObjRep::makeOperation (theCoord, theOpnNameWoa.getCString ());
@


1.49
log
@Fixed bug: The C++ Coordinator new deletes the CTVecSupply when it needs to.
@
text
@d97 3
d114 1
a114 1
   theOpn = Operation::findInstance (theCoord, theOpnNameWoa .getCString ());
@


1.48
log
@Fixed the memory leak in theCoord->freezeNPeriods ().
@
text
@d28 1
a28 1
   theCoord->recordPartOpn ();
d35 1
@


1.47
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d28 1
a28 1
   theCoord->freezeNPeriods ();
@


1.46
log
@purgeData
@
text
@d20 1
a20 1
      Element          (theCoord),
@


1.45
log
@purgeData
@
text
@d101 1
a101 1
void WitJ::Operation::preserveInstance (Coordinator * theCoord)
@


1.44
log
@purgeData
@
text
@d112 1
a112 1
   theOpn->setToBeShutDown (false);
@


1.43
log
@purgeData
@
text
@d9 1
a9 1
#include      <VecWoa.h>
d94 1
a94 1
      theOpnNameWoa.getCVecAddr ());
d96 1
a96 1
   JavaObjRep::makeOperation (theCoord, theOpnNameWoa.getCVec ());
d108 1
a108 1
      theOpnNameWoa.getCVecAddr ());
d110 1
a110 1
   theOpn = Operation::findInstance (theCoord, theOpnNameWoa .getCVec ());
@


1.42
log
@purgeData
@
text
@d110 1
a110 1
   theOpn = theCoord->findOperation (theOpnNameWoa.getCVec ());
d117 13
@


1.41
log
@purgeData
@
text
@d101 16
@


1.40
log
@Removed C++ class Extractor.
@
text
@d10 1
d88 13
@


1.39
log
@Implemented getPipSeq.
@
text
@d22 1
a22 1
   if (! getExtractMode ())
@


1.38
log
@Implemented Java class CppGateway.
@
text
@d66 5
a70 5
      getWitRun        (),
      getOperationName (),
    & hardLBWoa,
    & softLBWoa,
    & hardUBWoa);
@


1.37
log
@Coordinator
@
text
@d17 1
a17 2
         const char *  theOpnNameCStr,
         JavaObjRep *  theOpnJOR):
d19 1
a19 1
      Element          (theCoord, theOpnJOR),
@


1.36
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d16 1
a16 1
         Coordinator * theCoordinator,
d20 1
a20 1
      Element          (theCoordinator, theOpnJOR),
d28 1
a28 1
   theCoordinator->freezeNPeriods ();
@


1.35
log
@ProbMgr classes.
@
text
@d7 3
a9 3
#include <Operation.h>
#include   <ProbMgr.h>
#include    <VecWoa.h>
d11 1
a11 1
#include       <wit.h>
d16 3
a18 3
         ProbMgr *    theProbMgr,
         const char * theOpnNameCStr,
         JavaObjRep * theOpnJOR):
d20 1
a20 1
      Element          (theProbMgr, theOpnJOR),
d28 1
a28 1
   theProbMgr->freezeNPeriods ();
@


1.34
log
@Change the mname of the ProbCtr classes to ProbMgr in both Java and C++.
@
text
@a7 1
#include   <Problem.h>
d28 1
a28 1
   theProbMgr->getProblem ()->freezeNPeriods ();
@


1.33
log
@Continued implementation of the ProbCtr classes.
@
text
@d9 1
a9 1
#include   <ProbCtr.h>
d17 1
a17 1
         ProbCtr *    theProbCtr,
d21 1
a21 1
      Element          (theProbCtr, theOpnJOR),
d29 1
a29 1
   theProbCtr->getProblem ()->freezeNPeriods ();
@


1.32
log
@Updated some comments.
@
text
@d9 1
d17 1
a17 1
         Problem *    theProblem,
d21 1
a21 1
      Element          (theProblem, theOpnJOR),
d29 1
a29 1
   theProblem->freezeNPeriods ();
@


1.31
log
@Removed C++ class Session.
@
text
@d4 1
a4 1
// Contains the definition of class Operation.
@


1.30
log
@Name change.
@
text
@d20 1
a20 1
      Element          (theProblem->getSession (), theOpnJOR),
@


1.29
log
@Changed name of Component to Entity.
@
text
@d20 1
a20 1
      Entity           (theProblem->getSession (), theOpnJOR),
@


1.28
log
@Revised C++ class template VecWoa.
@
text
@d20 1
a20 1
      Component        (theProblem->getSession (), theOpnJOR),
@


1.27
log
@Call-back infrastructure.
Implemented extraction of Demands.
@
text
@d67 5
a71 5
      getWitRun             (),
      getOperationName      (),
      hardLBWoa.getCVecAddr (),
      softLBWoa.getCVecAddr (),
      hardUBWoa.getCVecAddr ());
@


1.26
log
@Extraction.
@
text
@d26 2
@


1.25
log
@Extraction
@
text
@d24 1
a24 3
      witAddOperation (
         getWitRun (),
         getOperationName ());
@


1.24
log
@Call-back infrastructure.
@
text
@d23 4
a26 3
   witAddOperation (
      getWitRun (),
      getOperationName ());
@


1.23
log
@Minor change.
@
text
@d15 4
a18 1
WitJ::Operation::Operation (Problem * theProblem, const char * theOpnNameCStr):
d20 1
a20 1
      Component        (theProblem->getSession ()),
@


1.22
log
@Revised the use of class CTVecRes.
@
text
@d24 1
a24 1
   theProblem->lockNPeriods ();
@


1.21
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@d8 1
a8 1
#include   <Session.h>
d15 1
a15 1
WitJ::Operation::Operation (Session * theSession, const char * theOpnNameCStr):
d17 1
a17 1
      Component        (theSession),
d24 1
a24 1
   theSession->lockNPeriods ();
@


1.20
log
@Added attribute "execBounds".
@
text
@d8 1
a8 1
#include <ProbCoord.h>
d15 1
a15 3
WitJ::Operation::Operation (
      ProbCoord *  theProbCoord,
      const char * theOpnNameCStr):
d17 1
a17 1
      Component        (theProbCoord),
d24 1
a24 1
   theProbCoord->lockNPeriods ();
@


1.19
log
@"operationName" attribute.
@
text
@d44 30
d77 1
a77 1
      getWitRun (),
@


1.18
log
@Attributes.
@
text
@d17 1
a17 1
      const char * operationNameCStr):
d20 1
a20 1
      myOperationName_ (operationNameCStr)
d44 12
@


1.17
log
@Removed some debugging output.
@
text
@d24 1
a24 1
      getOperationCName ());
d44 1
a44 1
const char * WitJ::Operation::getOperationCName ()
@


1.16
log
@Attributes.
@
text
@a12 2
#include  <iostream>

a32 6
   std::cout
      << std::endl
      << "Destroying Operation \""
      << getOperationCName ()
      << "\"."
      << std::endl;
@


1.15
log
@Accessor names.
@
text
@d45 1
a45 1
WitJ::Operation * WitJ::Operation::thisOperation ()
@


1.14
log
@Changed the names of access functions beginning with "my"
to begin with "get".
@
text
@d21 2
a22 2
      Component      (theProbCoord),
      operationName_ (operationNameCStr)
d26 1
a26 1
      operationCName ());
d38 1
a38 1
      << operationCName ()
d52 1
a52 1
const char * WitJ::Operation::operationCName ()
d54 1
a54 1
   return operationName_.c_str ();
@


1.13
log
@Attributes.
@
text
@d25 1
a25 1
      myWitRun (),
@


1.12
log
@Strings.
@
text
@a51 20
void WitJ::Operation::setExecCost (const double * execCostCVec)
   {
   witSetOperationExecCostDbl (
      myWitRun (),
      operationCName (),
      execCostCVec);
   }

//------------------------------------------------------------------------------

void WitJ::Operation::getExecCost (VecWoa <double> & execCostWoa)
   {
   witGetOperationExecCostDbl (
      myWitRun (),
      operationCName (),
      execCostWoa.myCVecAddr ());
   }

//------------------------------------------------------------------------------

@


1.11
log
@Replaced class WitJ::String with class std::string.
@
text
@d26 1
a26 1
      operationName_.c_str ());
d38 1
a38 1
      << operationName_
d56 1
a56 1
      operationName_.c_str (),
d66 1
a66 1
      operationName_.c_str (),
d69 7
@


1.10
log
@JniHandler
@
text
@d26 1
a26 1
      operationName_);
d56 1
a56 1
      operationName_,
d66 1
a66 1
      operationName_,
@


1.9
log
@Added myName_ to class Att.
@
text
@a23 2
   myProbCoord ()->recNewPartOpn ();

d27 2
@


1.8
log
@Attributes
@
text
@d37 1
a37 1
      << "Destroying WitJ::Operation \""
@


1.7
log
@*** empty log message ***
@
text
@d62 1
a62 1
void WitJ::Operation::getExecCost (DblVecWoa & execCostWoa)
d67 1
a67 1
      execCostWoa.myDblCVecAddr ());
@


1.6
log
@*** empty log message ***
@
text
@a44 7
void WitJ::Operation::getDerivedInstance (Operation * & theOperation)
   {
   theOperation = this;
   }

//------------------------------------------------------------------------------

@


1.5
log
@*** empty log message ***
@
text
@d19 1
a19 1
      const char * operationNameVal):
d22 1
a22 1
      operationName_ (operationNameVal)
@


1.4
log
@*** empty log message ***
@
text
@d52 1
a52 1
WitJ::Operation * WitJ::Operation::thisOpn ()
@


1.3
log
@*** empty log message ***
@
text
@d52 7
@


1.2
log
@*** empty log message ***
@
text
@a8 2
#include   <TVecJia.h>
#include    <VecJoa.h>
d52 1
a52 1
void WitJ::Operation::setExecCost (DblTVecJia & execCostJia)
a53 2
   execCostJia.attach (myProbCoord ());

d57 1
a57 1
      execCostJia.myDblCVec ());
d62 1
a62 1
void WitJ::Operation::getExecCost (DblVecJoa & execCostJoa)
a63 2
   DblVecWoa execCostWoa;

a67 2

   execCostJoa = execCostWoa;
@


1.1
log
@*** empty log message ***
@
text
@d8 1
a8 1
#include     <CIJia.h>
a11 1
#include <StringJia.h>
d20 2
a21 2
         const CIJia <Problem> & theProblemJia,
         const StringJia &       operationNameJia):
d23 2
a24 2
      Component      (theProblemJia   .myDerJAccObject ()),
      operationName_ (operationNameJia.myCString       ())
d26 1
a26 1
   myProblem ()->recNewPartOpn ();
d56 1
a56 1
   execCostJia.attach (myProblem ());
@

