head	1.78;
access;
symbols;
locks; strict;
comment	@ * @;


1.78
date	2011.04.15.19.12.33;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2011.04.15.19.01.09;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2011.04.15.15.49.06;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2011.04.15.00.07.25;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2011.04.14.16.11.42;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2011.04.13.22.36.25;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2011.04.12.00.33.13;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2011.04.11.18.38.19;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2011.04.08.20.56.21;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2011.04.07.22.11.21;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2011.04.07.21.39.27;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2011.04.07.19.07.39;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2011.04.06.21.56.49;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2011.04.06.20.34.27;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2011.04.06.15.56.38;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2011.04.06.15.18.20;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2011.04.05.22.25.45;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2011.04.01.23.25.04;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2011.04.01.19.23.35;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2011.03.30.23.23.02;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2011.03.29.23.38.49;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2011.03.28.15.57.09;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2011.03.25.22.49.16;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2011.03.24.19.03.40;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2011.03.23.20.30.07;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2011.03.22.20.17.24;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2011.03.19.00.26.13;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2011.03.15.23.02.51;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2011.03.12.00.29.52;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2011.03.11.23.49.24;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2011.03.09.22.35.28;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2011.02.25.16.06.52;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2011.02.16.21.03.10;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2011.02.16.19.08.31;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2011.02.15.20.19.00;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2011.02.15.19.38.02;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2011.02.14.19.59.10;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2010.04.20.20.55.07;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2009.06.05.15.08.22;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2009.05.08.22.13.11;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2009.04.17.19.51.59;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2009.02.25.23.06.44;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2009.02.25.22.13.53;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2009.02.19.19.51.46;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2009.02.17.23.46.01;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2009.02.17.19.26.13;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2009.02.17.17.23.49;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2009.02.14.00.51.29;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2009.02.11.18.59.29;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2009.02.10.23.19.29;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2009.02.06.22.40.58;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2009.01.29.22.06.39;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2009.01.23.19.32.24;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2009.01.23.18.46.54;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2009.01.21.21.43.23;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2009.01.20.22.05.03;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2009.01.16.20.55.49;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2009.01.16.18.23.38;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.01.16.17.03.35;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.01.15.22.50.31;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.01.15.20.46.52;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.01.12.17.24.13;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.01.08.21.13.52;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.12.18.22.12.34;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.12.18.22.00.08;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.12.15.22.31.41;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.15.17.17.40;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.12.23.38.31;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.12.22.53.06;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.12.19.29.26;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.11.26.18.33.05;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.26.14.48.19;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.25.15.28.47;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.31.14.53.29;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.30.15.17.41;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.29.15.26.12;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.29.15.05.37;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.26.22.21.23;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.78
log
@Java CppObjRep classes
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source file ProblemCOR.C.
//
// Contains the C++ implementations of the native methods of Java class
// witj.ProblemCOR.
//------------------------------------------------------------------------------

#include     <NativeMacros.h>
#include <ExceptionHandler.h>
#include           <CORJOR.h>
#include          <Problem.h>
#include      <Coordinator.h>
#include     <ArrayListJOR.h>
#include        <StringJOR.h>

using namespace WitJ;

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, callSimpleWitFunc) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jstring * theFuncNameJStr)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR  (theProblemCORJObj, theJNIEnv);
   StringJOR        theFuncNameSJOR (theFuncNameJStr,   theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         callSimpleWitFunc (
            theFuncNameSJOR.getCString ());

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, writeSched) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jstring * schedNameJStr,
      _jstring * fileNameJStr,
      jboolean   theFormatIsBSV)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR (theProblemCORJObj, theJNIEnv);
   StringJOR        schedNameSJOR  (schedNameJStr,     theJNIEnv);
   StringJOR        fileNameSJOR   (fileNameJStr,      theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         writeSched (
            schedNameSJOR.getCString (),
            fileNameSJOR .getCString (),
            theFormatIsBSV);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, performAction) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jstring * theCommandJStr)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR (theProblemCORJObj, theJNIEnv);
   StringJOR        theCommandSJOR (theCommandJStr,    theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         performAction (
            theCommandSJOR.getCString ());

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (jboolean, ProblemCOR, throwUnexpException) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR (theProblemCORJObj, theJNIEnv);

   return theProblemCJOR.getCppObject ()->throwUnexpException ();

   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, false)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, addDblCplexParSpec) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jstring * theNameJStr,
      jdouble    theValue)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR (theProblemCORJObj, theJNIEnv);
   StringJOR        theNameSJOR    (theNameJStr,       theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         addDblCplexParSpec (
            theNameSJOR.getCString (),
            theValue);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, addIntCplexParSpec) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jstring * theNameJStr,
      jint       theValue)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR (theProblemCORJObj, theJNIEnv);
   StringJOR        theNameSJOR    (theNameJStr,       theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         addIntCplexParSpec (
            theNameSJOR.getCString (),
            theValue);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, copyData) (
      JNIEnv *   theJNIEnv,
      _jobject * dupProblemCORJObj,
      _jobject * origProblemCORJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem>  dupProblemCJOR  (dupProblemCORJObj, theJNIEnv);
   CORJOR <Problem> origProblemCJOR (origProblemCORJObj, theJNIEnv);

   dupProblemCJOR.
      getCppObject ()->
         copyData (
            origProblemCJOR.getCppObject ());

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, displayData) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jstring * fileNameJStr)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR (theProblemCORJObj, theJNIEnv);
   StringJOR        fileNameSJOR   (fileNameJStr,      theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         displayData (
            fileNameSJOR.getCString ());

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, eqHeurAlloc) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jobject * theDemandListJObj,
      _jobject * shipPeriodListJObj,
      _jobject * desIncVolListJObj,
      _jobject * incVolListJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR  (theProblemCORJObj, theJNIEnv);
   DemandALJOR      theDemandALJOR  (theDemandListJObj,  theJNIEnv);
   IntALJOR         shipPeriodALJOR (shipPeriodListJObj, theJNIEnv);
   DblALJOR         desIncVolALJOR  (desIncVolListJObj,  theJNIEnv);
   DblALJOR         incVolALJOR     (incVolListJObj,     theJNIEnv);
   Problem *        theProblem;

   theProblemCJOR.
      getCppObject ()->
         eqHeurAlloc (
            theDemandALJOR,
            shipPeriodALJOR,
            desIncVolALJOR,
            incVolALJOR);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, getCriticalList) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jobject * critPartListJObj,
      _jobject * critPeriodListJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR  (theProblemCORJObj,  theJNIEnv);
   CompALJOR <Part> critPartALJOR   (critPartListJObj,   theJNIEnv);
   IntALJOR         critPeriodALJOR (critPeriodListJObj, theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         getCriticalList (
            critPartALJOR,
            critPeriodALJOR);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (_jobject *, ProblemCOR, getDblCplexParSpec) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jstring * theNameJStr)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR (theProblemCORJObj, theJNIEnv);
   StringJOR        theNameSJOR    (theNameJStr,       theJNIEnv);
   bool             dblSpecExists;
   double           theValue;

   theProblemCJOR.getCppObject ()->
         getDblCplexParSpec (
            theNameSJOR.getCString (),
            dblSpecExists,
            theValue);

   if (dblSpecExists)
      return JniClient::matchingDoubleJObj (theValue, theJNIEnv);
   else
      return NULL;

   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, NULL)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, getExpCycle) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jobject * thePartListJObj,
      _jobject * theOpnListJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem>      theProblemCJOR (theProblemCORJObj, theJNIEnv);
   CompALJOR <Part>      thePartALJOR   (thePartListJObj,   theJNIEnv);
   CompALJOR <Operation> theOpnALJOR    (theOpnListJObj,    theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         getExpCycle (thePartALJOR, theOpnALJOR);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (_jobject *, ProblemCOR, getIntCplexParSpec) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jstring * theNameJStr)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR (theProblemCORJObj, theJNIEnv);
   StringJOR        theNameSJOR    (theNameJStr,       theJNIEnv);
   bool             intSpecExists;
   int              theValue;

   theProblemCJOR.
      getCppObject ()->
         getIntCplexParSpec (
            theNameSJOR.getCString (),
            intSpecExists,
            theValue);

   if (intSpecExists)
      return JniClient::matchingIntegerJObj (theValue, theJNIEnv);
   else
      return NULL;

   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, NULL)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, getObjectiveList) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jobject * theObjNameListJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR  (theProblemCORJObj,  theJNIEnv);
   StringALJOR      theObjNameALJOR (theObjNameListJObj, theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         getObjectiveList (theObjNameALJOR);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (_jstring *, ProblemCOR, getOptInitMethod) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR (theProblemCORJObj, theJNIEnv);
   StringJOR        theMethodNameSJOR                 (theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         getOptInitMethod (theMethodNameSJOR);

   return theMethodNameSJOR.getJString ();

   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, NULL)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, getPgdCritList) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jobject * critPartListJObj,
      _jobject * critPeriodListJObj,
      _jobject * theDemandListJObj,
      _jobject * shipPeriodListJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem>   theProblemCJOR  (theProblemCORJObj, theJNIEnv);
   CompALJOR <Part>   critPartALJOR   (critPartListJObj,   theJNIEnv);
   IntALJOR           critPeriodALJOR (critPeriodListJObj, theJNIEnv);
   CompALJOR <Demand> theDemandALJOR  (theDemandListJObj,  theJNIEnv);
   IntALJOR           shipPeriodALJOR (shipPeriodListJObj, theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         getPgdCritList (
            critPartALJOR,
            critPeriodALJOR,
            theDemandALJOR,
            shipPeriodALJOR);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, getPipSeq) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jobject * theDemandTripListJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem>   theProblemCJOR   (theProblemCORJObj,     theJNIEnv);
   PeggingTripleALJOR theDemandATALJOR (theDemandTripListJObj, theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         getPipSeq (theDemandATALJOR);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, getSortedOperations) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jobject * theOpnListJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem>      theProblemCJOR (theProblemCORJObj, theJNIEnv);
   CompALJOR <Operation> theOpnALJOR    (theOpnListJObj,    theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         getSortedOperations (theOpnALJOR);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, getSortedParts) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jobject * thePartListJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR (theProblemCORJObj, theJNIEnv);
   CompALJOR <Part> thePartALJOR   (thePartListJObj,   theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         getSortedParts (thePartALJOR);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, readData) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jstring * fileNameJStr)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR (theProblemCORJObj, theJNIEnv);
   StringJOR        fileNameSJOR   (fileNameJStr,      theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         readData (fileNameSJOR.getCString ());

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, setNPeriods) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      jint       theNPeriodsJInt)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR (theProblemCORJObj, theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         setNPeriods (theNPeriodsJInt);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, setObjectiveList) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jobject * theObjNameListJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR  (theProblemCORJObj,  theJNIEnv);
   StringALJOR      theObjNameALJOR (theObjNameListJObj, theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         setObjectiveList (theObjNameALJOR);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, setOptInitMethod) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jstring * theMethodNameJStr)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR    (theProblemCORJObj, theJNIEnv);
   StringJOR        theMethodNameSJOR (theMethodNameJStr, theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         setOptInitMethod (theMethodNameSJOR.getCString ());

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, writeCriticalList) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jstring * fileNameJStr,
      jboolean   theFormatIsBSV,
      jint       maxListLen)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR (theProblemCORJObj, theJNIEnv);
   StringJOR        fileNameSJOR   (fileNameJStr,      theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         writeCriticalList (
            fileNameSJOR.getCString (),
            theFormatIsBSV,
            maxListLen);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, writeData) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jstring * fileNameJStr)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem> theProblemCJOR (theProblemCORJObj, theJNIEnv);
   StringJOR        fileNameSJOR   (fileNameJStr,      theJNIEnv);

   theProblemCJOR.
      getCppObject ()->
         writeData (fileNameSJOR.getCString ());

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, acquireNewCppObject) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jobject * theCoordCORJObj)
   {
   BEGIN_TRY_BLOCK

   CORJOR <Problem>     theProblemCJOR (theProblemCORJObj, theJNIEnv);
   CORJOR <Coordinator> theCoordCJOR   (theCoordCORJObj,   theJNIEnv);
   Problem *            theProblem;

   theProblem = new Problem (theCoordCJOR.getCppObject ());

   theProblemCJOR.acquire (theProblem);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }
@


1.77
log
@Class template CORJOR
@
text
@d558 1
a558 1
NATIVE_METHOD (void, ProblemCOR, createCppObject) (
@


1.76
log
@Class StringJOR
@
text
@d30 4
a33 1
   theProblemCJOR->callSimpleWitFunc (theFuncNameSJOR.getCString ());
d53 6
a58 5
   theProblemCJOR->
      writeSched (
         schedNameSJOR.getCString (),
         fileNameSJOR .getCString (),
         theFormatIsBSV);
d75 4
a78 1
   theProblemCJOR->performAction (theCommandSJOR.getCString ());
d93 1
a93 1
   return theProblemCJOR->throwUnexpException ();
d111 5
a115 1
   theProblemCJOR->addDblCplexParSpec (theNameSJOR.getCString (), theValue);
d133 5
a137 1
   theProblemCJOR->addIntCplexParSpec (theNameSJOR.getCString (), theValue);
d154 4
a157 1
   dupProblemCJOR->copyData (origProblemCJOR);
d174 4
a177 1
   theProblemCJOR->displayData (fileNameSJOR.getCString ());
d201 7
a207 6
   theProblemCJOR->
      eqHeurAlloc (
         theDemandALJOR,
         shipPeriodALJOR,
         desIncVolALJOR,
         incVolALJOR);
d226 5
a230 1
   theProblemCJOR->getCriticalList (critPartALJOR, critPeriodALJOR);
d249 5
a253 5
   theProblemCJOR->
      getDblCplexParSpec (
         theNameSJOR.getCString (),
         dblSpecExists,
         theValue);
d277 3
a279 1
   theProblemCJOR->getExpCycle (thePartALJOR, theOpnALJOR);
d298 6
a303 5
   theProblemCJOR->
      getIntCplexParSpec (
         theNameSJOR.getCString (),
         intSpecExists,
         theValue);
d325 3
a327 1
   theProblemCJOR->getObjectiveList (theObjNameALJOR);
d343 3
a345 1
   theProblemCJOR->getOptInitMethod (theMethodNameSJOR);
d370 7
a376 6
   theProblemCJOR->
      getPgdCritList (
         critPartALJOR,
         critPeriodALJOR,
         theDemandALJOR,
         shipPeriodALJOR);
d393 3
a395 1
   theProblemCJOR->getPipSeq (theDemandATALJOR);
d412 3
a414 1
   theProblemCJOR->getSortedOperations (theOpnALJOR);
d431 3
a433 1
   theProblemCJOR->getSortedParts (thePartALJOR);
d450 3
a452 1
   theProblemCJOR->readData (fileNameSJOR.getCString ());
d468 3
a470 1
   theProblemCJOR->setNPeriods (theNPeriodsJInt);
d487 3
a489 1
   theProblemCJOR->setObjectiveList (theObjNameALJOR);
d506 3
a508 1
   theProblemCJOR->setOptInitMethod (theMethodNameSJOR.getCString ());
d527 6
a532 5
   theProblemCJOR->
      writeCriticalList (
         fileNameSJOR.getCString (),
         theFormatIsBSV,
         maxListLen);
d549 3
a551 1
   theProblemCJOR->writeData (fileNameSJOR.getCString ());
d567 1
d569 3
a571 1
   theProblemCJOR = new Problem (theCoordCJOR);
@


1.75
log
@Class template CORJOR
@
text
@d30 1
a30 1
   theProblemCJOR->callSimpleWitFunc (theFuncNameSJOR);
d50 5
a54 1
   theProblemCJOR->writeSched (schedNameSJOR, fileNameSJOR , theFormatIsBSV);
d71 1
a71 1
   theProblemCJOR->performAction (theCommandSJOR);
d104 1
a104 1
   theProblemCJOR->addDblCplexParSpec (theNameSJOR, theValue);
d122 1
a122 1
   theProblemCJOR->addIntCplexParSpec (theNameSJOR, theValue);
d156 1
a156 1
   theProblemCJOR->displayData (fileNameSJOR);
d223 5
a227 1
   theProblemCJOR->getDblCplexParSpec (theNameSJOR, dblSpecExists, theValue);
d270 5
a274 1
   theProblemCJOR->getIntCplexParSpec (theNameSJOR, intSpecExists, theValue);
d410 1
a410 1
   theProblemCJOR->readData (fileNameSJOR);
d460 1
a460 1
   theProblemCJOR->setOptInitMethod (theMethodNameSJOR);
d479 5
a483 1
   theProblemCJOR->writeCriticalList (fileNameSJOR, theFormatIsBSV, maxListLen);
d500 1
a500 1
   theProblemCJOR->writeData (fileNameSJOR);
@


1.74
log
@Class StringJOR
@
text
@d10 1
d27 2
a28 2
   Problem * theProblem;
   StringJOR theFuncNameSJOR (theFuncNameJStr,   theJNIEnv);
d30 1
a30 3
   theProblem = getProblem   (theProblemCORJObj, theJNIEnv);

   theProblem->callSimpleWitFunc (theFuncNameSJOR);
d46 3
a48 5
   Problem * theProblem;
   StringJOR schedNameSJOR (schedNameJStr,     theJNIEnv);
   StringJOR fileNameSJOR  (fileNameJStr,      theJNIEnv);

   theProblem = getProblem (theProblemCORJObj, theJNIEnv);
d50 1
a50 1
   theProblem->writeSched (schedNameSJOR, fileNameSJOR , theFormatIsBSV);
d64 2
a65 2
   Problem * theProblem;
   StringJOR theCommandSJOR (theCommandJStr,    theJNIEnv);
d67 1
a67 3
   theProblem = getProblem  (theProblemCORJObj, theJNIEnv);

   theProblem->performAction (theCommandSJOR);
d80 1
a80 3
   Problem * theProblem;

   theProblem = getProblem (theProblemCORJObj, theJNIEnv);
d82 1
a82 1
   return theProblem->throwUnexpException ();
d97 2
a98 2
   Problem * theProblem;
   StringJOR theNameSJOR   (theNameJStr,       theJNIEnv);
d100 1
a100 3
   theProblem = getProblem (theProblemCORJObj, theJNIEnv);

   theProblem->addDblCplexParSpec (theNameSJOR, theValue);
d115 2
a116 4
   Problem * theProblem;
   StringJOR theNameSJOR   (theNameJStr,       theJNIEnv);

   theProblem = getProblem (theProblemCORJObj, theJNIEnv);
d118 1
a118 1
   theProblem->addIntCplexParSpec (theNameSJOR, theValue);
d132 2
a133 2
   Problem * dupProblem;
   Problem * origProblem;
d135 1
a135 4
   dupProblem  = getProblem (dupProblemCORJObj,  theJNIEnv);
   origProblem = getProblem (origProblemCORJObj, theJNIEnv);

   dupProblem->copyData (origProblem);
d149 2
a150 4
   Problem * theProblem;
   StringJOR fileNameSJOR  (fileNameJStr,      theJNIEnv);

   theProblem = getProblem (theProblemCORJObj, theJNIEnv);
d152 1
a152 1
   theProblem->displayData (fileNameSJOR);
d169 6
a174 7
   DemandALJOR theDemandALJOR  (theDemandListJObj,  theJNIEnv);
   IntALJOR    shipPeriodALJOR (shipPeriodListJObj, theJNIEnv);
   DblALJOR    desIncVolALJOR  (desIncVolListJObj,  theJNIEnv);
   DblALJOR    incVolALJOR     (incVolListJObj,     theJNIEnv);
   Problem *   theProblem;

   theProblem = getProblem (theProblemCORJObj, theJNIEnv);
d176 1
a176 1
   theProblem->
d196 1
a196 1
   Problem *        theProblem;
d200 1
a200 3
   theProblem = getProblem          (theProblemCORJObj,  theJNIEnv);

   theProblem->getCriticalList (critPartALJOR, critPeriodALJOR);
d214 4
a217 4
   Problem * theProblem;
   StringJOR theNameSJOR   (theNameJStr,       theJNIEnv);
   bool      dblSpecExists;
   double    theValue;
d219 1
a219 3
   theProblem = getProblem (theProblemCORJObj, theJNIEnv);

   theProblem->getDblCplexParSpec (theNameSJOR, dblSpecExists, theValue);
d239 3
a241 5
   Problem *             theProblem;
   CompALJOR <Part>      thePartALJOR (thePartListJObj,   theJNIEnv);
   CompALJOR <Operation> theOpnALJOR  (theOpnListJObj,    theJNIEnv);

   theProblem = getProblem            (theProblemCORJObj, theJNIEnv);
d243 1
a243 1
   theProblem->getExpCycle (thePartALJOR, theOpnALJOR);
d257 4
a260 6
   Problem * theProblem;
   StringJOR theNameSJOR   (theNameJStr,       theJNIEnv);
   bool      intSpecExists;
   int       theValue;

   theProblem = getProblem (theProblemCORJObj, theJNIEnv);
d262 1
a262 1
   theProblem->getIntCplexParSpec (theNameSJOR, intSpecExists, theValue);
d281 2
a282 2
   Problem *   theProblem;
   StringALJOR theObjNameALJOR (theObjNameListJObj, theJNIEnv);
d284 1
a284 3
   theProblem = getProblem (theProblemCORJObj, theJNIEnv);

   theProblem->getObjectiveList (theObjNameALJOR);
d297 2
a298 4
   Problem * theProblem;
   StringJOR theMethodNameSJOR (theJNIEnv);

   theProblem = getProblem (theProblemCORJObj, theJNIEnv);
d300 1
a300 1
   theProblem->getOptInitMethod (theMethodNameSJOR);
d319 1
a319 1
   Problem *          theProblem;
d325 1
a325 3
   theProblem = getProblem            (theProblemCORJObj,  theJNIEnv);

   theProblem->
d344 1
a344 1
   Problem *          theProblem;
d347 1
a347 3
   theProblem = getProblem (theProblemCORJObj, theJNIEnv);

   theProblem->getPipSeq (theDemandATALJOR);
d361 2
a362 2
   Problem *             theProblem;
   CompALJOR <Operation> theOpnALJOR (theOpnListJObj,    theJNIEnv);
d364 1
a364 3
   theProblem = getProblem           (theProblemCORJObj, theJNIEnv);

   theProblem->getSortedOperations (theOpnALJOR);
d378 2
a379 4
   Problem *        theProblem;
   CompALJOR <Part> thePartALJOR (thePartListJObj,   theJNIEnv);

   theProblem = getProblem       (theProblemCORJObj, theJNIEnv);
d381 1
a381 1
   theProblem->getSortedParts (thePartALJOR);
d395 2
a396 4
   Problem * theProblem;
   StringJOR fileNameSJOR  (fileNameJStr,      theJNIEnv);

   theProblem = getProblem (theProblemCORJObj, theJNIEnv);
d398 1
a398 1
   theProblem->readData (fileNameSJOR);
d412 1
a412 1
   Problem * theProblem;
d414 1
a414 3
   theProblem = getProblem (theProblemCORJObj, theJNIEnv);

   theProblem->setNPeriods (theNPeriodsJInt);
d428 2
a429 4
   Problem *   theProblem;
   StringALJOR theObjNameALJOR (theObjNameListJObj, theJNIEnv);

   theProblem = getProblem     (theProblemCORJObj,  theJNIEnv);
d431 1
a431 1
   theProblem->setObjectiveList (theObjNameALJOR);
d445 2
a446 2
   Problem * theProblem;
   StringJOR theMethodNameSJOR (theMethodNameJStr, theJNIEnv);
d448 1
a448 3
   theProblem = getProblem     (theProblemCORJObj, theJNIEnv);

   theProblem->setOptInitMethod (theMethodNameSJOR);
d464 2
a465 4
   Problem * theProblem;
   StringJOR fileNameSJOR  (fileNameJStr,      theJNIEnv);

   theProblem = getProblem (theProblemCORJObj, theJNIEnv);
d467 1
a467 1
   theProblem->writeCriticalList (fileNameSJOR, theFormatIsBSV, maxListLen);
d481 2
a482 2
   Problem * theProblem;
   StringJOR fileNameSJOR  (fileNameJStr,      theJNIEnv);
d484 1
a484 3
   theProblem = getProblem (theProblemCORJObj, theJNIEnv);

   theProblem->writeData (fileNameSJOR);
d498 2
a499 6
   Coordinator * theCoord;
   Problem *     theProblem;

   theCoord   = getCoordinator (theCoordCORJObj, theJNIEnv);

   theProblem = new Problem (theCoord);
d501 1
a501 1
   JniClient::transferTo (theProblemCORJObj, theProblem, theJNIEnv);
@


1.73
log
@Removed namespace JniUtil.
@
text
@d31 1
a31 1
   theProblem->callSimpleWitFunc (theFuncNameSJOR.getCString ());
d53 1
a53 5
   theProblem->
      writeSched (
         schedNameSJOR.getCString (),
         fileNameSJOR .getCString (),
         theFormatIsBSV);
d72 1
a72 1
   theProblem->performAction (theCommandSJOR.getCString ());
d109 1
a109 1
   theProblem->addDblCplexParSpec (theNameSJOR.getCString (), theValue);
d129 1
a129 1
   theProblem->addIntCplexParSpec (theNameSJOR.getCString (), theValue);
d168 1
a168 1
   theProblem->displayData (fileNameSJOR.getCString ());
d240 1
a240 2
   theProblem->
      getDblCplexParSpec (theNameSJOR.getCString (), dblSpecExists, theValue);
d287 1
a287 2
   theProblem->
      getIntCplexParSpec (theNameSJOR.getCString (), intSpecExists, theValue);
d437 1
a437 1
   theProblem->readData (fileNameSJOR.getCString ());
d493 1
a493 1
   theProblem->setOptInitMethod (theMethodNameSJOR.getCString ());
d514 1
a514 5
   theProblem->
      writeCriticalList (
         fileNameSJOR.getCString (),
         theFormatIsBSV,
         maxListLen);
d533 1
a533 1
   theProblem->writeData (fileNameSJOR.getCString ());
@


1.72
log
@Class StringJOR
@
text
@a8 1
#include          <JniUtil.h>
a15 1
using namespace WitJ::JniUtil;
d248 1
a248 1
      return matchingDoubleJObj (theValue, theJNIEnv);
d296 1
a296 1
      return matchingIntegerJObj (theValue, theJNIEnv);
d564 1
a564 1
   transferTo (theProblemCORJObj, theProblem, theJNIEnv);
@


1.71
log
@Class WString
@
text
@d14 1
a14 1
#include          <WString.h>
d29 1
a29 1
   WString   theFuncNameWStr;
d31 1
a31 3
   theProblem = getProblem (theProblemCORJObj, theJNIEnv);

   copyInto (theFuncNameWStr, theFuncNameJStr, theJNIEnv);
d33 1
a33 1
   theProblem->callSimpleWitFunc (theFuncNameWStr.getCString ());
d50 2
a51 2
   WString   schedNameWStr;
   WString   fileNameWStr;
a54 3
   copyInto (schedNameWStr, schedNameJStr, theJNIEnv);
   copyInto (fileNameWStr,  fileNameJStr,  theJNIEnv);

d57 2
a58 2
         schedNameWStr.getCString (),
         fileNameWStr .getCString (),
d74 1
a74 3
   WString   theCommandWStr;

   theProblem = getProblem (theProblemCORJObj, theJNIEnv);
d76 1
a76 1
   copyInto (theCommandWStr, theCommandJStr, theJNIEnv);
d78 1
a78 1
   theProblem->performAction (theCommandWStr.getCString ());
d111 1
a111 1
   WString   theNameWStr;
d115 1
a115 3
   copyInto (theNameWStr, theNameJStr, theJNIEnv);

   theProblem->addDblCplexParSpec (theNameWStr.getCString (), theValue);
d131 1
a131 1
   WString   theNameWStr;
d135 1
a135 3
   copyInto (theNameWStr, theNameJStr, theJNIEnv);

   theProblem->addIntCplexParSpec (theNameWStr.getCString (), theValue);
d170 1
a170 1
   WString   fileNameWStr;
d174 1
a174 3
   copyInto (fileNameWStr, fileNameJStr, theJNIEnv);

   theProblem->displayData (fileNameWStr.getCString ());
d240 1
a240 1
   WString   theNameWStr;
a245 2
   copyInto (theNameWStr, theNameJStr, theJNIEnv);

d247 1
a247 1
      getDblCplexParSpec (theNameWStr.getCString (), dblSpecExists, theValue);
d288 1
a288 1
   WString   theNameWStr;
a293 2
   copyInto (theNameWStr, theNameJStr, theJNIEnv);

d295 1
a295 1
      getIntCplexParSpec (theNameWStr.getCString (), intSpecExists, theValue);
d332 2
a333 2
   Problem *    theProblem;
   const char * theMethodNameCStr;
d335 1
a335 1
   theProblem        = getProblem (theProblemCORJObj, theJNIEnv);
d337 1
a337 1
   theMethodNameCStr = theProblem->getOptInitMethod ();
d339 1
a339 1
   return newJString (theMethodNameCStr, theJNIEnv);
d441 1
a441 1
   WString   fileNameWStr;
d445 1
a445 3
   copyInto (fileNameWStr, fileNameJStr, theJNIEnv);

   theProblem->readData (fileNameWStr.getCString ());
d497 1
a497 1
   WString   theMethodNameWStr;
d499 1
a499 3
   theProblem = getProblem (theProblemCORJObj, theJNIEnv);

   copyInto (theMethodNameWStr, theMethodNameJStr, theJNIEnv);
d501 1
a501 1
   theProblem->setOptInitMethod (theMethodNameWStr.getCString ());
d518 1
a518 1
   WString   fileNameWStr;
a521 2
   copyInto (fileNameWStr, fileNameJStr, theJNIEnv);

d524 1
a524 1
         fileNameWStr.getCString (),
d541 1
a541 1
   WString   fileNameWStr;
d545 1
a545 3
   copyInto (fileNameWStr, fileNameJStr, theJNIEnv);

   theProblem->writeData (fileNameWStr.getCString ());
@


1.70
log
@copyComponentData
@
text
@d14 1
a14 1
#include           <String.h>
d29 1
a29 1
   String    theFuncNameStr;
d33 1
a33 1
   copyInto (theFuncNameStr, theFuncNameJStr, theJNIEnv);
d35 1
a35 1
   theProblem->callSimpleWitFunc (theFuncNameStr.getCString ());
d52 2
a53 2
   String    schedNameStr;
   String    fileNameStr;
d57 2
a58 2
   copyInto (schedNameStr, schedNameJStr, theJNIEnv);
   copyInto (fileNameStr,  fileNameJStr,  theJNIEnv);
d62 2
a63 2
         schedNameStr.getCString (),
         fileNameStr .getCString (),
d79 1
a79 1
   String    theCommandStr;
d83 1
a83 1
   copyInto (theCommandStr, theCommandJStr, theJNIEnv);
d85 1
a85 1
   theProblem->performAction (theCommandStr.getCString ());
d118 1
a118 1
   String    theNameStr;
d122 1
a122 1
   copyInto (theNameStr, theNameJStr, theJNIEnv);
d124 1
a124 1
   theProblem->addDblCplexParSpec (theNameStr.getCString (), theValue);
d140 1
a140 1
   String    theNameStr;
d144 1
a144 1
   copyInto (theNameStr, theNameJStr, theJNIEnv);
d146 1
a146 1
   theProblem->addIntCplexParSpec (theNameStr.getCString (), theValue);
d181 1
a181 1
   String    fileNameStr;
d185 1
a185 1
   copyInto (fileNameStr, fileNameJStr, theJNIEnv);
d187 1
a187 1
   theProblem->displayData (fileNameStr.getCString ());
d253 1
a253 1
   String    theNameStr;
d259 1
a259 1
   copyInto (theNameStr, theNameJStr, theJNIEnv);
d262 1
a262 1
      getDblCplexParSpec (theNameStr.getCString (), dblSpecExists, theValue);
d303 1
a303 1
   String    theNameStr;
d309 1
a309 1
   copyInto (theNameStr, theNameJStr, theJNIEnv);
d312 1
a312 1
      getIntCplexParSpec (theNameStr.getCString (), intSpecExists, theValue);
d458 1
a458 1
   String    fileNameStr;
d462 1
a462 1
   copyInto (fileNameStr, fileNameJStr, theJNIEnv);
d464 1
a464 1
   theProblem->readData (fileNameStr.getCString ());
d516 1
a516 1
   String    theMethodNameStr;
d520 1
a520 1
   copyInto (theMethodNameStr, theMethodNameJStr, theJNIEnv);
d522 1
a522 1
   theProblem->setOptInitMethod (theMethodNameStr.getCString ());
d539 1
a539 1
   String    fileNameStr;
d543 1
a543 1
   copyInto (fileNameStr, fileNameJStr, theJNIEnv);
d546 4
a549 1
      writeCriticalList (fileNameStr.getCString (), theFormatIsBSV, maxListLen);
d564 1
a564 1
   String    fileNameStr;
d568 1
a568 1
   copyInto (fileNameStr, fileNameJStr, theJNIEnv);
d570 1
a570 1
   theProblem->writeData (fileNameStr.getCString ());
@


1.69
log
@getSortedOperations
@
text
@d155 2
a156 2
      _jobject * dstProblemCORJObj,
      _jobject * srcProblemCORJObj)
d160 2
a161 2
   Problem * dstProblem;
   Problem * srcProblem;
d163 2
a164 2
   dstProblem = getProblem (dstProblemCORJObj, theJNIEnv);
   srcProblem = getProblem (srcProblemCORJObj, theJNIEnv);
d166 1
a166 1
   dstProblem->copyData (srcProblem);
@


1.68
log
@getSortedParts
@
text
@d412 19
@


1.67
log
@getExpCycle
@
text
@d412 19
@


1.66
log
@Critical parts list
@
text
@a244 30
NATIVE_METHOD (void, ProblemCOR, getPgdCritList) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jobject * critPartListJObj,
      _jobject * critPeriodListJObj,
      _jobject * theDemandListJObj,
      _jobject * shipPeriodListJObj)
   {
   BEGIN_TRY_BLOCK

   Problem *          theProblem;
   CompALJOR <Part>   critPartALJOR   (critPartListJObj,   theJNIEnv);
   IntALJOR           critPeriodALJOR (critPeriodListJObj, theJNIEnv);
   CompALJOR <Demand> theDemandALJOR  (theDemandListJObj,  theJNIEnv);
   IntALJOR           shipPeriodALJOR (shipPeriodListJObj, theJNIEnv);

   theProblem = getProblem            (theProblemCORJObj,  theJNIEnv);

   theProblem->
      getPgdCritList (
         critPartALJOR,
         critPeriodALJOR,
         theDemandALJOR,
         shipPeriodALJOR);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

d274 21
d363 49
a490 19
NATIVE_METHOD (void, ProblemCOR, getPipSeq) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jobject * theDemandTripListJObj)
   {
   BEGIN_TRY_BLOCK

   Problem *          theProblem;
   PeggingTripleALJOR theDemandATALJOR (theDemandTripListJObj, theJNIEnv);

   theProblem = getProblem (theProblemCORJObj, theJNIEnv);

   theProblem->getPipSeq (theDemandATALJOR);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

@


1.65
log
@getPgdCritList
@
text
@d227 2
a228 2
      _jobject * thePartListJObj,
      _jobject * thePeriodListJObj)
d233 2
a234 2
   CompALJOR <Part> thePartALJOR   (thePartListJObj,   theJNIEnv);
   IntALJOR         thePeriodALJOR (thePeriodListJObj, theJNIEnv);
d236 1
a236 1
   theProblem = getProblem         (theProblemCORJObj, theJNIEnv);
d238 1
a238 1
   theProblem->getCriticalList (thePartALJOR, thePeriodALJOR);
@


1.64
log
@JNIEnv arguments.
@
text
@d232 1
a234 1
   Problem *        theProblem;
d236 1
a236 1
   theProblem = getProblem (theProblemCORJObj, theJNIEnv);
d245 30
@


1.63
log
@JniUtil
@
text
@d204 4
a207 4
   DemandALJOR theDemandALJOR  (theJNIEnv, theDemandListJObj);
   IntALJOR    shipPeriodALJOR (theJNIEnv, shipPeriodListJObj);
   DblALJOR    desIncVolALJOR  (theJNIEnv, desIncVolListJObj);
   DblALJOR    incVolALJOR     (theJNIEnv, incVolListJObj);
d232 2
a233 2
   CompALJOR <Part> thePartALJOR   (theJNIEnv, thePartListJObj);
   IntALJOR         thePeriodALJOR (theJNIEnv, thePeriodListJObj);
d311 1
a311 1
   StringALJOR theObjNameALJOR (theJNIEnv, theObjNameListJObj);
d389 1
a389 1
   StringALJOR theObjNameALJOR (theJNIEnv, theObjNameListJObj);
d391 1
a391 1
   theProblem = getProblem (theProblemCORJObj, theJNIEnv);
d429 1
a429 1
   PeggingTripleALJOR theDemandATALJOR (theJNIEnv, theDemandTripListJObj);
@


1.62
log
@Namespace JniUtil.
@
text
@d265 1
a265 1
      return JniClient::matchingDoubleJObj (theValue, theJNIEnv);
d294 1
a294 1
      return JniClient::matchingIntegerJObj (theValue, theJNIEnv);
@


1.61
log
@JniAsst
@
text
@d9 1
a10 1
#include          <JniAsst.h>
d17 1
d31 1
a31 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d33 1
a33 1
   theProblem->getJniAsst ()->copyInto (theFuncNameStr, theFuncNameJStr);
d55 1
a55 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d57 2
a58 2
   theProblem->getJniAsst ()->copyInto (schedNameStr, schedNameJStr);
   theProblem->getJniAsst ()->copyInto (fileNameStr,  fileNameJStr);
d81 1
a81 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d83 1
a83 1
   theProblem->getJniAsst ()->copyInto (theCommandStr, theCommandJStr);
d100 1
a100 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d120 1
a120 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d122 1
a122 1
   theProblem->getJniAsst ()->copyInto (theNameStr, theNameJStr);
d142 1
a142 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d144 1
a144 1
   theProblem->getJniAsst ()->copyInto (theNameStr, theNameJStr);
d163 2
a164 2
   dstProblem = JniAsst::getProblem (dstProblemCORJObj, theJNIEnv);
   srcProblem = JniAsst::getProblem (srcProblemCORJObj, theJNIEnv);
d183 1
a183 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d185 1
a185 1
   theProblem->getJniAsst ()->copyInto (fileNameStr, fileNameJStr);
d210 1
a210 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d236 1
a236 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d257 1
a257 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d259 1
a259 1
   theProblem->getJniAsst ()->copyInto (theNameStr, theNameJStr);
d265 1
a265 1
      return theProblem->getJniAsst ()->matchingDoubleJObj (theValue);
d286 1
a286 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d288 1
a288 1
   theProblem->getJniAsst ()->copyInto (theNameStr, theNameJStr);
d294 1
a294 1
      return theProblem->getJniAsst ()->matchingIntegerJObj (theValue);
d313 1
a313 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
a329 1
   _jstring *   theMethodNameJStr;
d331 1
a331 1
   theProblem        = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d335 1
a335 4
   theMethodNameJStr =
      theProblem->getJniAsst ()->newJString (theMethodNameCStr);

   return theMethodNameJStr;
d352 1
a352 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d354 1
a354 1
   theProblem->getJniAsst ()->copyInto (fileNameStr, fileNameJStr);
d372 1
a372 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d391 1
a391 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d410 1
a410 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d412 1
a412 1
   theProblem->getJniAsst ()->copyInto (theMethodNameStr, theMethodNameJStr);
d431 1
a431 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d452 1
a452 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d454 1
a454 1
   theProblem->getJniAsst ()->copyInto (fileNameStr, fileNameJStr);
d474 1
a474 1
   theProblem = JniAsst::getProblem (theProblemCORJObj, theJNIEnv);
d476 1
a476 1
   theProblem->getJniAsst ()->copyInto (fileNameStr, fileNameJStr);
d495 1
a495 1
   theCoord   = JniAsst::getCoordinator (theCoordCORJObj, theJNIEnv);
d499 1
a499 1
   theProblem->getJniAsst ()->transferTo (theProblemCORJObj, theProblem);
@


1.60
log
@Replaced newHeldCString with copyInto.
@
text
@d10 1
a10 1
#include       <NativeCall.h>
d27 2
a28 3
   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;
   String     theFuncNameStr;
d30 1
a30 1
   theProblem = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d32 1
a32 1
   theCall.copyInto (theFuncNameStr, theFuncNameJStr);
d50 3
a52 4
   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;
   String     schedNameStr;
   String     fileNameStr;
d54 1
a54 1
   theProblem = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d56 2
a57 2
   theCall.copyInto (schedNameStr, schedNameJStr);
   theCall.copyInto (fileNameStr,  fileNameJStr);
d77 2
a78 3
   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;
   String     theCommandStr;
d80 1
a80 1
   theProblem = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d82 1
a82 1
   theCall.copyInto (theCommandStr, theCommandJStr);
d97 1
a97 2
   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;
d99 1
a99 1
   theProblem = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d116 2
a117 3
   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;
   String     theNameStr;
d119 1
a119 1
   theProblem  = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d121 1
a121 1
   theCall.copyInto (theNameStr, theNameJStr);
d138 2
a139 3
   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;
   String     theNameStr;
d141 1
a141 1
   theProblem  = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d143 1
a143 1
   theCall.copyInto (theNameStr, theNameJStr);
d159 2
a160 3
   NativeCall theCall (theJNIEnv);
   Problem *  dstProblem;
   Problem *  srcProblem;
d162 2
a163 2
   dstProblem = theCall.getJavaAccObj (dstProblemCORJObj)->asProblem ();
   srcProblem = theCall.getJavaAccObj (srcProblemCORJObj)->asProblem ();
d179 2
a180 3
   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;
   String     fileNameStr;
d182 1
a182 1
   theProblem = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d184 1
a184 1
   theCall.copyInto (fileNameStr, fileNameJStr);
a202 1
   NativeCall  theCall         (theJNIEnv);
d209 1
a209 1
   theProblem = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
a230 1
   NativeCall       theCall        (theJNIEnv);
d235 1
a235 1
   theProblem = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d251 4
a254 5
   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;
   String     theNameStr;
   bool       dblSpecExists;
   double     theValue;
d256 1
a256 1
   theProblem = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d258 1
a258 1
   theCall.copyInto (theNameStr, theNameJStr);
d264 1
a264 1
      return theCall.matchingDoubleJObj (theValue);
d280 4
a283 5
   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;
   String     theNameStr;
   bool       intSpecExists;
   int        theValue;
d285 1
a285 1
   theProblem = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d287 1
a287 1
   theCall.copyInto (theNameStr, theNameJStr);
d293 1
a293 1
      return theCall.matchingIntegerJObj (theValue);
a308 1
   NativeCall  theCall (theJNIEnv);
d312 1
a312 1
   theProblem = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
a326 1
   NativeCall   theCall (theJNIEnv);
d331 1
a331 1
   theProblem        = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d335 2
a336 1
   theMethodNameJStr = theCall.newJString (theMethodNameCStr);
d352 2
a353 3
   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;
   String     fileNameStr;
d355 1
a355 1
   theProblem = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d357 1
a357 1
   theCall.copyInto (fileNameStr, fileNameJStr);
d373 1
a373 2
   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;
d375 1
a375 1
   theProblem = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
a390 1
   NativeCall  theCall (theJNIEnv);
d394 1
a394 1
   theProblem = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d410 2
a411 3
   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;
   String     theMethodNameStr;
d413 1
a413 1
   theProblem = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d415 1
a415 1
   theCall.copyInto (theMethodNameStr, theMethodNameJStr);
a430 1
   NativeCall         theCall          (theJNIEnv);
d434 1
a434 1
   theProblem = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d452 2
a453 3
   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;
   String     fileNameStr;
d455 1
a455 1
   theProblem = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d457 1
a457 1
   theCall.copyInto (fileNameStr, fileNameJStr);
d474 2
a475 3
   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;
   String     fileNameStr;
d477 1
a477 1
   theProblem = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d479 1
a479 1
   theCall.copyInto (fileNameStr, fileNameJStr);
a494 1
   NativeCall    theCall (theJNIEnv);
d498 1
a498 1
   theCoord   = theCall.getJavaAccObj (theCoordCORJObj)->asCoordinator ();
d502 1
a502 1
   theCall.transferTo (theProblemCORJObj, theProblem);
@


1.59
log
@Revised set/get ObjectiveList for ArrayList <String>.
@
text
@d14 1
d27 3
a29 3
   NativeCall   theCall (theJNIEnv);
   Problem *    theProblem;
   const char * theFuncNameCStr;
d31 1
a31 1
   theProblem      = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d33 1
a33 1
   theFuncNameCStr = theCall.newHeldCString (theFuncNameJStr);
d35 1
a35 1
   theProblem->callSimpleWitFunc (theFuncNameCStr);
d51 4
a54 4
   NativeCall   theCall (theJNIEnv);
   Problem *    theProblem;
   const char * schedNameCStr;
   const char * fileNameCStr;
d56 1
a56 1
   theProblem    = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d58 2
a59 2
   schedNameCStr = theCall.newHeldCString (schedNameJStr);
   fileNameCStr  = theCall.newHeldCString (fileNameJStr);
d61 5
a65 1
   theProblem->writeSched (schedNameCStr, fileNameCStr, theFormatIsBSV);
d79 3
a81 3
   NativeCall   theCall (theJNIEnv);
   Problem *    theProblem;
   const char * theCommandCStr;
d83 1
a83 1
   theProblem     = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d85 1
a85 1
   theCommandCStr = theCall.newHeldCString (theCommandJStr);
d87 1
a87 1
   theProblem->performAction (theCommandCStr);
d120 3
a122 3
   NativeCall   theCall (theJNIEnv);
   Problem *    theProblem;
   const char * theNameCStr;
d126 1
a126 1
   theNameCStr = theCall.newHeldCString (theNameJStr);
d128 1
a128 1
   theProblem->addDblCplexParSpec (theNameCStr, theValue);
d143 3
a145 3
   NativeCall   theCall (theJNIEnv);
   Problem *    theProblem;
   const char * theNameCStr;
d149 1
a149 1
   theNameCStr = theCall.newHeldCString (theNameJStr);
d151 1
a151 1
   theProblem->addIntCplexParSpec (theNameCStr, theValue);
d186 3
a188 3
   NativeCall   theCall (theJNIEnv);
   Problem *    theProblem;
   const char * fileNameCStr;
d190 1
a190 1
   theProblem   = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d192 1
a192 1
   fileNameCStr = theCall.newHeldCString (fileNameJStr);
d194 1
a194 1
   theProblem->displayData (fileNameCStr);
d261 5
a265 5
   NativeCall   theCall (theJNIEnv);
   Problem *    theProblem;
   const char * theNameCStr;
   bool         dblSpecExists;
   double       theValue;
d267 1
a267 1
   theProblem  = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d269 1
a269 1
   theNameCStr = theCall.newHeldCString (theNameJStr);
d271 2
a272 1
   theProblem->getDblCplexParSpec (theNameCStr, dblSpecExists, theValue);
d291 5
a295 5
   NativeCall   theCall (theJNIEnv);
   Problem *    theProblem;
   const char * theNameCStr;
   bool         intSpecExists;
   int          theValue;
d297 1
a297 1
   theProblem  = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d299 1
a299 1
   theNameCStr = theCall.newHeldCString (theNameJStr);
d301 2
a302 1
   theProblem->getIntCplexParSpec (theNameCStr, intSpecExists, theValue);
d365 3
a367 3
   NativeCall   theCall (theJNIEnv);
   Problem *    theProblem;
   const char * fileNameCStr;
d369 1
a369 1
   theProblem   = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d371 1
a371 1
   fileNameCStr = theCall.newHeldCString (fileNameJStr);
d373 1
a373 1
   theProblem->readData (fileNameCStr);
d426 3
a428 3
   NativeCall   theCall (theJNIEnv);
   Problem *    theProblem;
   const char * theMethodNameCStr;
d432 1
a432 1
   theMethodNameCStr = theCall.newHeldCString (theMethodNameJStr);
d434 1
a434 1
   theProblem->setOptInitMethod (theMethodNameCStr);
d470 3
a472 3
   NativeCall   theCall (theJNIEnv);
   Problem *    theProblem;
   const char * fileNameCStr;
d474 1
a474 1
   theProblem   = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d476 1
a476 1
   fileNameCStr = theCall.newHeldCString (fileNameJStr);
d478 2
a479 1
   theProblem->writeCriticalList (fileNameCStr, theFormatIsBSV, maxListLen);
d493 3
a495 3
   NativeCall   theCall (theJNIEnv);
   Problem *    theProblem;
   const char * fileNameCStr;
d497 1
a497 1
   theProblem   = theCall.getJavaAccObj (theProblemCORJObj)->asProblem ();
d499 1
a499 1
   fileNameCStr = theCall.newHeldCString (fileNameJStr);
d501 1
a501 1
   theProblem->writeData (fileNameCStr);
@


1.58
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@a12 3
#include      <WitVecOwner.h>
#include        <StringVec.h>
#include   <WitStrVecOwner.h>
d307 1
a307 1
NATIVE_METHOD (_jobjectArray *, ProblemCOR, getObjectiveList) (
d309 2
a310 1
      _jobject * theProblemCORJObj)
d314 3
a316 4
   NativeCall      theCall (theJNIEnv);
   Problem *       theProblem;
   WitStrVecOwner  theObjNameWSVO;
   _jobjectArray * theObjNameJStrArr;
d320 1
a320 1
   theProblem->getObjectiveList (theObjNameWSVO);
d322 1
a322 9
   theObjNameJStrArr =
      theCall.
         newJStrArray (
            theObjNameWSVO.getWitStrVec (),
            theObjNameWSVO.getLength    ());

   return theObjNameJStrArr;

   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, NULL)
d393 3
a395 3
      JNIEnv *        theJNIEnv,
      _jobject *      theProblemCORJObj,
      _jobjectArray * theObjNameJObjArr)
d399 3
a401 3
   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;
   StringVec  theObjNameStringVec;
d405 1
a405 3
   theCall.copyInto (theObjNameStringVec, theObjNameJObjArr);

   theProblem->setObjectiveList (theObjNameStringVec);
@


1.57
log
@Changed name of class AllocTriple to PeggingTriple.
@
text
@d272 1
a272 1
      return theCall.matchingDoubleLRef (theValue);
d301 1
a301 1
      return theCall.matchingIntegerLRef (theValue);
d528 1
a528 1
   theCall.associate (theProblemCORJObj, theProblem);
@


1.56
log
@ArrayListJOR
@
text
@d454 3
a456 3
   NativeCall       theCall          (theJNIEnv);
   Problem *        theProblem;
   AllocTripleALJOR theDemandATALJOR (theJNIEnv, theDemandTripListJObj);
@


1.55
log
@getComponentLRef
@
text
@d209 6
a214 6
   NativeCall         theCall         (theJNIEnv);
   CompALJOR <Demand> theDemandALJOR  (theJNIEnv, theDemandListJObj);
   IntALJOR           shipPeriodALJOR (theJNIEnv, shipPeriodListJObj);
   DblALJOR           desIncVolALJOR  (theJNIEnv, desIncVolListJObj);
   DblALJOR           incVolALJOR     (theJNIEnv, incVolListJObj);
   Problem *          theProblem;
d454 3
a456 4
   NativeCall                theCall          (theJNIEnv);
   Problem *                 theProblem;
   AllocTripleALJOR <Demand> theDemandATALJOR (theJNIEnv,
                                               theDemandTripListJObj);
@


1.54
log
@AllocTripleALJOR
@
text
@d272 1
a272 1
      return theCall.matchingDoubleJObj (theValue);
d301 1
a301 1
      return theCall.matchingIntegerJObj (theValue);
@


1.53
log
@getCriticialList and eqHeurAlloc.
@
text
@d450 1
a450 1
      _jobject * theAllocTripleVecCORJObj)
d454 4
a457 3
   NativeCall       theCall (theJNIEnv);
   Problem *        theProblem;
   AllocTripleVec * theAllocTripleVec;
d461 1
a461 4
   theAllocTripleVec =
      theCall.getJavaAccObj (theAllocTripleVecCORJObj)->asAllocTripleVec ();

   theProblem->getPipSeq (theAllocTripleVec);
@


1.52
log
@Revised the arguments to eqHeurAlloc.
@
text
@d209 6
a214 6
   NativeCall  theCall         (theJNIEnv);
   DemandALJOR theDemandALJOR  (theJNIEnv, theDemandListJObj);
   IntALJOR    shipPeriodALJOR (theJNIEnv, shipPeriodListJObj);
   DblALJOR    desIncVolALJOR  (theJNIEnv, desIncVolListJObj);
   DblALJOR    incVolALJOR     (theJNIEnv, incVolListJObj);
   Problem *   theProblem;
d238 4
a241 4
   NativeCall theCall        (theJNIEnv);
   PartALJOR  thePartALJOR   (theJNIEnv, thePartListJObj);
   IntALJOR   thePeriodALJOR (theJNIEnv, thePeriodListJObj);
   Problem *  theProblem;
@


1.51
log
@Name changes.
@
text
@a17 2
#include           <vector>

d33 1
a33 1
   theProblem      = theCall.getObject (theProblemCORJObj)->asProblem ();
d58 2
a59 1
   theProblem    = theCall.getObject      (theProblemCORJObj)->asProblem ();
d81 1
a81 1
   theProblem   = theCall.getObject (theProblemCORJObj)->asProblem ();
d101 1
a101 1
   theProblem = theCall.getObject (theProblemCORJObj)->asProblem ();
d122 1
a122 1
   theProblem  = theCall.getObject (theProblemCORJObj)->asProblem ();
d145 1
a145 1
   theProblem  = theCall.getObject (theProblemCORJObj)->asProblem ();
d167 2
a168 2
   dstProblem = theCall.getObject (dstProblemCORJObj)->asProblem ();
   srcProblem = theCall.getObject (srcProblemCORJObj)->asProblem ();
d188 1
a188 1
   theProblem   = theCall.getObject (theProblemCORJObj)->asProblem ();
d199 7
a205 6
NATIVE_METHOD (_jdoubleArray *, ProblemCOR, eqHeurAlloc) (
      JNIEnv *        theJNIEnv,
      _jobject *      theProblemCORJObj,
      _jobjectArray * theDemandCORJObjArr,
      _jintArray *    shipPerJIntArr,
      _jdoubleArray * desIncVolJDblArr)
d209 6
a214 13
   NativeCall             theCall (theJNIEnv);
   Problem *              theProblem;
   int                    nTriples;
   std::vector <Demand *> theDemandVec;
   int                    theIdx;
   std::vector <int>      shipPerVec;
   std::vector <double>   desIncVolVec;
   WitVecOwner <double>   incVolWVO;
   _jdoubleArray *        incVolJArr;

   theProblem = theCall.getObject (theProblemCORJObj)->asProblem ();

   nTriples   = theCall.getLength (theDemandCORJObjArr);
d216 1
a216 10
   theDemandVec.resize (nTriples);

   for (theIdx = 0; theIdx < nTriples; theIdx ++)
      {
      theDemandVec[theIdx] =
         theCall.getIndexedObject (theDemandCORJObjArr, theIdx)->asDemand ();
      }

   theCall.copyInto (shipPerVec,   shipPerJIntArr);
   theCall.copyInto (desIncVolVec, desIncVolJDblArr);
d220 4
a223 4
         theDemandVec,
         shipPerVec,
         desIncVolVec,
         incVolWVO);
d225 1
a225 5
   incVolJArr = theCall.newJDblArray (incVolWVO.getWitVec (), nTriples);

   return incVolJArr;

   END_TRY_BLOCK_VALUE_RETURN (theJNIEnv, NULL)
d238 4
a241 4
   NativeCall       theCall        (theJNIEnv);
   CompALJOR <Part> thePartALJOR   (theJNIEnv, thePartListJObj);
   IntALJOR         thePeriodALJOR (theJNIEnv, thePeriodListJObj);
   Problem *        theProblem;
d243 1
a243 1
   theProblem = theCall.getObject (theProblemCORJObj)->asProblem ();
d265 1
a265 1
   theProblem  = theCall.getObject (theProblemCORJObj)->asProblem ();
d272 1
a272 1
      return theCall.aDoubleJObjFor (theValue);
d294 1
a294 1
   theProblem  = theCall.getObject (theProblemCORJObj)->asProblem ();
d301 1
a301 1
      return theCall.anIntegerJObjFor (theValue);
d321 1
a321 1
   theProblem = theCall.getObject (theProblemCORJObj)->asProblem ();
d349 1
a349 1
   theProblem        = theCall.getObject (theProblemCORJObj)->asProblem ();
d373 1
a373 1
   theProblem   = theCall.getObject (theProblemCORJObj)->asProblem ();
d394 1
a394 1
   theProblem = theCall.getObject (theProblemCORJObj)->asProblem ();
d414 1
a414 1
   theProblem = theCall.getObject (theProblemCORJObj)->asProblem ();
d436 1
a436 1
   theProblem = theCall.getObject (theProblemCORJObj)->asProblem ();
d458 1
a458 1
   theProblem = theCall.getObject (theProblemCORJObj)  ->asProblem ();
d461 1
a461 1
      theCall.getObject (theAllocTripleVecCORJObj)->asAllocTripleVec ();
d483 1
a483 1
   theProblem   = theCall.getObject (theProblemCORJObj)->asProblem ();
d505 1
a505 1
   theProblem   = theCall.getObject (theProblemCORJObj)->asProblem ();
d527 1
a527 1
   theCoord   = theCall.getObject (theCoordCORJObj)->asCoordinator ();
@


1.50
log
@Problem.getCriticalList ()
@
text
@d16 1
a16 1
#include       <JArrayList.h>
d258 4
a261 4
   NativeCall            theCall      (theJNIEnv);
   CompJArrayList <Part> thePartJAL   (theJNIEnv, thePartListJObj);
   IntJArrayList         thePeriodJAL (theJNIEnv, thePeriodListJObj);
   Problem *             theProblem;
d265 1
a265 1
   theProblem->getCriticalList (thePartJAL, thePeriodJAL);
@


1.49
log
@Problem.getCriticalList ()
@
text
@d253 2
a254 2
      _jobject * thePartsJObj,
      _jobject * thePeriodsJObj)
d258 3
a260 3
   NativeCall            theCall       (theJNIEnv);
   CompJArrayList <Part> thePartsJAL   (theJNIEnv, thePartsJObj);
   IntJArrayList         thePeriodsJAL (theJNIEnv, thePeriodsJObj);
d265 1
a265 1
   theProblem->getCriticalList (thePartsJAL, thePeriodsJAL);
@


1.48
log
@Replaced calls to ctors for Java Integer and Double with valueOf.
@
text
@d16 1
d250 22
@


1.47
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@d269 1
a269 1
      return theCall.newJDouble (theValue);
d298 1
a298 1
      return theCall.newJInteger (theValue);
@


1.46
log
@CPLEX
@
text
@d14 2
d307 52
d381 86
@


1.45
log
@CPLEX
@
text
@d247 29
@


1.44
log
@CPLEX
@
text
@d238 1
a238 1
   incVolJArr = theCall.makeJDblArray (incVolWVO.getWitVec (), nTriples);
d267 1
a267 1
      return theCall.makeJInteger (theValue);
@


1.43
log
@CPLEX
@
text
@d34 1
a34 1
   theFuncNameCStr = theCall.makeCString (theFuncNameJStr);
d57 3
a59 3
   theProblem    = theCall.getObject   (theProblemCORJObj)->asProblem ();
   schedNameCStr = theCall.makeCString (schedNameJStr);
   fileNameCStr  = theCall.makeCString (fileNameJStr);
d81 1
a81 1
   theCommandCStr = theCall.makeCString (theCommandJStr);
d122 1
a122 1
   theNameCStr = theCall.makeCString (theNameJStr);
d145 1
a145 1
   theNameCStr = theCall.makeCString (theNameJStr);
d188 1
a188 1
   fileNameCStr = theCall.makeCString (fileNameJStr);
d262 1
a262 1
   theNameCStr = theCall.makeCString (theNameJStr);
d289 1
a289 1
   fileNameCStr = theCall.makeCString (fileNameJStr);
d313 1
a313 1
   fileNameCStr = theCall.makeCString (fileNameJStr);
d335 1
a335 1
   fileNameCStr = theCall.makeCString (fileNameJStr);
@


1.42
log
@CPLEX
@
text
@a246 2
#if 0

a270 4
   EXCEPTION_ASSERT (false);

   return NULL;

a273 2
#endif

@


1.41
log
@Multi-Obj Mode
@
text
@d108 46
d247 37
@


1.40
log
@Changed the name each native method that creates a C++ object to
   createCppObject.
@
text
@d13 1
a13 1
#include           <VecWoa.h>
d167 1
a167 1
   VecWoa <double>        incVolVecWoa;
d190 1
a190 1
         incVolVecWoa);
d192 1
a192 1
   incVolJArr = theCall.makeJDblArray (incVolVecWoa.getCVec (), nTriples);
@


1.39
log
@Removed the "enabled" concept from WIT-J.
@
text
@d269 1
a269 1
NATIVE_METHOD (void, ProblemCOR, createMyCppProblem) (
@


1.38
log
@theProblem.copyData (...).
@
text
@a20 18
NATIVE_METHOD (void, ProblemCOR, enable) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj)
   {
   BEGIN_TRY_BLOCK

   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;

   theProblem = theCall.getObject (theProblemCORJObj)->asProblem ();

   theProblem->enable ();

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

@


1.37
log
@writeCriticalList
@
text
@d126 21
@


1.36
log
@Implemented writeExecSched, writeShipSched, and writeReqSched.
@
text
@d220 24
@


1.35
log
@Moved set/get-PipSeq from class Problem to class GlobalElement.
@
text
@d61 25
@


1.34
log
@Removed the ShipTriple classes.
@
text
@a100 18
NATIVE_METHOD (void, ProblemCOR, getPipSeq) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj)
   {
   BEGIN_TRY_BLOCK

   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;

   theProblem = theCall.getObject (theProblemCORJObj)->asProblem ();

   theProblem->getPipSeq ();

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

@


1.33
log
@PIP.
@
text
@d144 3
a146 1
      _jobjectArray * theTripleCORJObjArr)
d150 9
a158 7
   NativeCall                 theCall (theJNIEnv);
   Problem *                  theProblem;
   int                        nTriples;
   std::vector <ShipTriple *> theTripleVec;
   int                        theIdx;
   VecWoa <double>            incVolVecWoa;
   _jdoubleArray *            incVolJArr;
d162 1
a162 1
   nTriples   = theCall.getLength (theTripleCORJObjArr);
d164 1
a164 1
   theTripleVec.resize (nTriples);
d168 2
a169 3
      theTripleVec[theIdx] =
         theCall.
            getIndexedObject (theTripleCORJObjArr, theIdx)->asShipTriple ();
d172 9
a180 1
   theProblem->eqHeurAlloc (theTripleVec, incVolVecWoa);
@


1.32
log
@PIP.
@
text
@a100 33
NATIVE_METHOD (void, ProblemCOR, setPipSeq) (
      JNIEnv *        theJNIEnv,
      _jobject *      theProblemCORJObj,
      _jobjectArray * theTripleCORJObjArr)
   {
   BEGIN_TRY_BLOCK

   NativeCall                 theCall (theJNIEnv);
   Problem *                  theProblem;
   int                        nTriples;
   std::vector <ShipTriple *> theTripleVec;
   int                        theIdx;

   theProblem = theCall.getObject (theProblemCORJObj)->asProblem ();

   nTriples   = theCall.getLength (theTripleCORJObjArr);

   theTripleVec.resize (nTriples);

   for (theIdx = 0; theIdx < nTriples; theIdx ++)
      {
      theTripleVec[theIdx] =
         theCall.
            getIndexedObject (theTripleCORJObjArr, theIdx)->asShipTriple ();
      }

   theProblem->setPipSeq (theTripleVec);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

@


1.31
log
@Implemented getPipSeq.
@
text
@a10 1
#include       <JavaObjRep.h>
d134 18
a212 27
NATIVE_METHOD (void, ProblemCOR, getPipSeq) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj)
   {
   BEGIN_TRY_BLOCK

   NativeCall              theCall (theJNIEnv);
   Problem *               theProblem;
   std::vector <Element *> theElementVec;
   VecWoa <int>            theShipPerVecWoa;
   VecWoa <double>         incShipVolVecWoa;

   theProblem = theCall.getObject (theProblemCORJObj)->asProblem ();

   theProblem->getPipSeq (theElementVec, theShipPerVecWoa, incShipVolVecWoa);

   JavaObjRep::storeAllocTriples (
      theProblem->getCoordinator (),
      theElementVec,
      theShipPerVecWoa.getCVec (),
      incShipVolVecWoa.getCVec ());

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

@


1.30
log
@Implemented buildPip and setPipSeq.
@
text
@d11 1
d13 1
d187 1
a187 1
   incVolJArr = theCall.makeJDblArray (incVolVecWoa, nTriples);
d196 27
@


1.29
log
@Replaced the AllocTarget classes with ShipTriple classes.
@
text
@d100 33
@


1.28
log
@Problem.eqHeurAlloc.
@
text
@d122 1
a122 1
NATIVE_METHOD (void, ProblemCOR, eqHeurAlloc) (
d125 1
a125 1
      _jobjectArray * theTargetCORJObjArr)
d129 7
a135 6
   NativeCall                  theCall (theJNIEnv);
   Problem *                   theProblem;
   int                         nTargets;
   std::vector <AllocTarget *> theTargetVec;
   int                         theIdx;
   AllocTarget *               theTarget;
d139 1
a139 1
   nTargets   = theCall.getLength (theTargetCORJObjArr);
d141 1
a141 1
   theTargetVec.resize (nTargets);
d143 1
a143 1
   for (theIdx = 0; theIdx < nTargets; theIdx ++)
d145 1
a145 1
      theTarget =
d147 4
a150 1
            getIndexedObject (theTargetCORJObjArr, theIdx)->asAllocTarget ();
d152 1
a152 2
      theTargetVec[theIdx] = theTarget;
      }
d154 1
a154 1
   theProblem->eqHeurAlloc (theTargetVec);
d156 1
a156 1
   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
@


1.27
log
@Implemented Java class CppGateway.
@
text
@d12 3
d122 36
@


1.26
log
@Coordinator
@
text
@a10 1
#include       <JavaObjRep.h>
a16 22
NATIVE_METHOD (void, ProblemCOR, createMyCppProblem) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jobject * theCoordCORJObj)
   {
   BEGIN_TRY_BLOCK

   NativeCall    theCall (theJNIEnv);
   Coordinator * theCoord;
   Problem *     theProblem;

   theCoord   = theCall.getObject (theCoordCORJObj)->asCoordinator ();

   theProblem = new Problem (theCoord);

   theCall.transferTo (theProblemCORJObj, theProblem);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

d160 22
@


1.25
log
@Coordinator
@
text
@d21 1
a21 1
      _jobject * theCoordinatorCORJObj)
d26 1
a26 1
   Coordinator * theCoordinator;
d29 1
a29 1
   theCoordinator = theCall.getObject (theCoordinatorCORJObj)->asCoordinator ();
d31 1
a31 1
   theProblem     = new Problem (theCoordinator);
@


1.24
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@a20 1
      _jobject * theProblemJObj,
a25 1
   JavaObjRep *  theProblemJOR;
a28 2
   theProblemJOR  = new JavaObjRep (theCall, theProblemJObj);

d31 1
a31 1
   theProblem     = new Problem (theProblemJOR, theCoordinator);
@


1.23
log
@Continued implementation of the ProbMgr classes.
@
text
@d22 1
a22 1
      _jobject * theProbMgrCORJObj)
d26 4
a29 4
   NativeCall   theCall (theJNIEnv);
   JavaObjRep * theProblemJOR;
   ProbMgr *    theProbMgr;
   Problem *    theProblem;
d31 1
a31 1
   theProblemJOR = new JavaObjRep (theCall, theProblemJObj);
d33 1
a33 1
   theProbMgr    = theCall.getObject (theProbMgrCORJObj)->asProbMgr ();
d35 1
a35 1
   theProblem    = new Problem (theProblemJOR, theProbMgr);
@


1.22
log
@ProbMgr classes.
@
text
@d62 22
@


1.21
log
@ProbMgr classes.
@
text
@a61 22
NATIVE_METHOD (void, ProblemCOR, callSimpleWitFunc) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj,
      _jstring * theFuncNameJStr)
   {
   BEGIN_TRY_BLOCK

   NativeCall   theCall (theJNIEnv);
   Problem *    theProblem;
   const char * theFuncNameCStr;

   theProblem      = theCall.getObject (theProblemCORJObj)->asProblem ();

   theFuncNameCStr = theCall.makeCString (theFuncNameJStr);

   theProblem->callSimpleWitFunc (theFuncNameCStr);

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

@


1.20
log
@Change the mname of the ProbCtr classes to ProbMgr in both Java and C++.
@
text
@d33 1
a33 1
   theProbMgr    = theCall.getObjectTmp (theProbMgrCORJObj)->asProbMgr ();
@


1.19
log
@Continued implementation of ProbCtr classes.
@
text
@d22 1
a22 1
      _jobject * theProbCtrCORJObj)
d28 1
a28 1
   ProbCtr *    theProbCtr;
d33 1
a33 1
   theProbCtr    = theCall.getObjectTmp (theProbCtrCORJObj)->asProbCtr ();
d35 1
a35 1
   theProblem    = new Problem (theProblemJOR, theProbCtr);
@


1.18
log
@Continued implementation of the ProbCtr classes.
@
text
@d21 2
a22 1
      _jobject * theProblemJObj)
d28 1
d33 3
a35 1
   theProblem    = Problem::newInstance (theProblemJOR);
@


1.17
log
@Implemented method writeData of class Problem.
@
text
@d31 1
a31 1
   theProblem    = new Problem (theProblemJOR);
@


1.16
log
@Implemented SimpleWitFuncs and used them for 4 methods.
@
text
@d161 22
@


1.15
log
@Removed an unneeded test case.
@
text
@d58 22
a141 72
NATIVE_METHOD (void, ProblemCOR, evalObjectives) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj)
   {
   BEGIN_TRY_BLOCK

   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;

   theProblem = theCall.getObject (theProblemCORJObj)->asProblem ();

   theProblem->evalObjectives ();

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, generatePriorities) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj)
   {
   BEGIN_TRY_BLOCK

   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;

   theProblem = theCall.getObject (theProblemCORJObj)->asProblem ();

   theProblem->generatePriorities ();

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, heurImplode) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj)
   {
   BEGIN_TRY_BLOCK

   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;

   theProblem = theCall.getObject (theProblemCORJObj)->asProblem ();

   theProblem->heurImplode ();

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

NATIVE_METHOD (void, ProblemCOR, postprocess) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj)
   {
   BEGIN_TRY_BLOCK

   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;

   theProblem = theCall.getObject (theProblemCORJObj)->asProblem ();

   theProblem->postprocess ();

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

@


1.14
log
@theProblem.performAction (theCommand)
@
text
@d80 1
a80 1
NATIVE_METHOD (jboolean, ProblemCOR, throwUnexpExceptionBool) (
d91 1
a91 1
   return theProblem->throwUnexpExceptionBool ();
@


1.13
log
@Added test of C++ assertion failure.
@
text
@d58 1
a58 1
NATIVE_METHOD (void, ProblemCOR, throwUnexpException) (
d60 2
a61 1
      _jobject * theProblemCORJObj)
d65 5
a69 2
   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;
d71 1
a71 1
   theProblem = theCall.getObject (theProblemCORJObj)->asProblem ();
d73 1
a73 1
   theProblem->throwUnexpException ();
a97 18
NATIVE_METHOD (void, ProblemCOR, incurAssertFailure) (
      JNIEnv *   theJNIEnv,
      _jobject * theProblemCORJObj)
   {
   BEGIN_TRY_BLOCK

   NativeCall theCall (theJNIEnv);
   Problem *  theProblem;

   theProblem = theCall.getObject (theProblemCORJObj)->asProblem ();

   theProblem->incurAssertFailure ();

   END_TRY_BLOCK_SIMPLE_RETURN (theJNIEnv)
   }

//------------------------------------------------------------------------------

@


1.12
log
@Initial implementation of class ExceptionHandler.
@
text
@d94 18
@


1.11
log
@Imbedded every native method implementation in a canonical try block.
@
text
@d8 5
a12 5
#include  <NativeMacros.h>
#include <WitjException.h>
#include    <NativeCall.h>
#include    <JavaObjRep.h>
#include       <Problem.h>
d89 1
a89 1
   END_TRY_BLOCK_RETURNING_VALUE (theJNIEnv, false)
@


1.10
log
@Implemented the C++ canonical try block macros.
@
text
@d23 2
d34 2
d44 2
d52 2
d99 2
d110 2
d120 2
d128 2
d138 2
d146 2
d156 2
d164 2
d174 2
d182 2
d193 2
d204 2
@


1.9
log
@Changed to all upper case for the names of macros.
@
text
@d8 5
a12 4
#include <NativeMacros.h>
#include   <NativeCall.h>
#include   <JavaObjRep.h>
#include      <Problem.h>
d50 36
@


1.8
log
@Removed C++ class Session.
@
text
@d17 1
a17 1
nativeMethod (void, ProblemCOR, createMyCppProblem) (
d35 1
a35 1
nativeMethod (void, ProblemCOR, enable) (
d49 1
a49 1
nativeMethod (void, ProblemCOR, displayData) (
d67 1
a67 1
nativeMethod (void, ProblemCOR, evalObjectives) (
d81 1
a81 1
nativeMethod (void, ProblemCOR, generatePriorities) (
d95 1
a95 1
nativeMethod (void, ProblemCOR, heurImplode) (
d109 1
a109 1
nativeMethod (void, ProblemCOR, postprocess) (
d123 1
a123 1
nativeMethod (void, ProblemCOR, readData) (
@


1.7
log
@Removed Java class SessionCOR.
@
text
@a11 1
#include      <Session.h>
d28 1
a28 1
   theProblem    = new Problem (new Session, theProblemJOR);
@


1.6
log
@Removed class Session from the public interface.
@
text
@d12 1
a20 1
      _jobject * theSessionCORJObj,
a23 1
   Session *    theSession;
a26 2
   theSession    = theCall.getObject (theSessionCORJObj)->asSession ();

d29 1
a29 1
   theProblem    = new Problem (theSession, theProblemJOR);
@


1.5
log
@Added theProblem.postprocess ().
@
text
@d39 14
@


1.4
log
@Call-back infrastructure.
@
text
@d99 14
@


1.3
log
@Changed name of C++ class JniHandler to NativeCall.
@
text
@d10 1
d20 2
a21 1
      _jobject * theSessionCORJObj)
d23 6
a28 3
   NativeCall theCall (theJNIEnv);
   Session *  theSession;
   Problem *  theProblem;
d30 1
a30 1
   theSession = theCall.getObject (theSessionCORJObj)->asSession ();
d32 1
a32 1
   theProblem = new Problem (theSession);
@


1.2
log
@Moved macro nativeMethod to its own header file.
@
text
@d9 1
a9 1
#include   <JniHandler.h>
d21 1
a21 1
   JniHandler theJniHand (theJNIEnv);
d25 1
a25 1
   theSession = theJniHand.getObject (theSessionCORJObj)->asSession ();
d29 1
a29 1
   theJniHand.transferTo (theProblemCORJObj, theProblem);
d39 1
a39 1
   JniHandler   theJniHand (theJNIEnv);
d43 1
a43 1
   theProblem   = theJniHand.getObject (theProblemCORJObj)->asProblem ();
d45 1
a45 1
   fileNameCStr = theJniHand.makeCString (fileNameJStr);
d56 1
a56 1
   JniHandler theJniHand (theJNIEnv);
d59 1
a59 1
   theProblem = theJniHand.getObject (theProblemCORJObj)->asProblem ();
d70 1
a70 1
   JniHandler theJniHand (theJNIEnv);
d73 1
a73 1
   theProblem = theJniHand.getObject (theProblemCORJObj)->asProblem ();
d84 1
a84 1
   JniHandler theJniHand (theJNIEnv);
d87 1
a87 1
   theProblem = theJniHand.getObject (theProblemCORJObj)->asProblem ();
d99 1
a99 1
   JniHandler   theJniHand (theJNIEnv);
d103 1
a103 1
   theProblem   = theJniHand.getObject (theProblemCORJObj)->asProblem ();
d105 1
a105 1
   fileNameCStr = theJniHand.makeCString (fileNameJStr);
@


1.1
log
@Numerous class name changes.
@
text
@d8 3
a10 2
#include <JniHandler.h>
#include    <Problem.h>
@

