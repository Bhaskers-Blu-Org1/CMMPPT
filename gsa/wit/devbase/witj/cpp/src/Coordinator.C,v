head	1.52;
access;
symbols;
locks; strict;
comment	@ * @;


1.52
date	2011.04.07.19.07.37;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2011.04.06.20.34.25;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2011.04.05.22.25.39;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2011.04.01.23.25.00;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2011.03.29.23.38.45;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2011.03.25.22.49.11;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2011.03.24.15.26.26;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2011.03.23.20.30.04;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2011.03.22.20.17.21;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2011.03.19.00.26.08;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2011.03.15.20.56.40;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2011.02.25.16.06.46;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2010.04.17.00.20.18;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2010.04.13.23.46.42;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2010.04.13.23.10.42;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2009.10.07.22.43.38;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2009.10.01.23.00.54;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2009.05.29.17.59.38;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2009.05.08.23.28.39;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2009.05.08.22.13.11;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2009.04.17.19.51.58;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2009.04.16.21.08.38;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2009.04.15.23.33.26;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2009.04.15.22.14.55;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2009.04.15.21.11.57;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2009.04.15.16.29.28;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2009.04.14.16.17.17;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2009.04.10.23.51.13;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2009.04.09.19.26.40;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2009.04.09.16.28.30;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2009.03.26.19.22.22;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2009.03.13.19.32.17;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.03.13.16.36.06;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.03.12.22.45.17;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.03.05.19.09.16;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.02.27.23.12.29;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.02.27.21.22.39;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.02.27.18.44.24;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.02.27.15.41.53;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.02.26.22.46.57;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.02.21.01.00.56;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.02.18.22.10.21;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.02.17.17.23.49;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.02.14.00.51.28;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.02.03.16.51.23;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.02.03.16.32.26;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.31.00.56.25;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.30.16.24.36;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.29.22.06.36;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.27.20.22.58;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.23.18.46.53;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.21.21.43.21;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.52
log
@getExpCycle
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File Coordinator.C.
//
// Contains the implementation of class Coordinator.
//------------------------------------------------------------------------------

#include      <Coordinator.h>
#include          <Problem.h>
#include             <Part.h>
#include           <Demand.h>
#include        <Operation.h>
#include         <BomEntry.h>
#include       <Substitute.h>
#include         <BopEntry.h>
#include      <CTVecSupply.h>
#include     <ComponentJOR.h>
#include     <ArrayListJOR.h>
#include <PreJavaException.h>

#include              <wit.h>

//------------------------------------------------------------------------------

WitJ::Coordinator::Coordinator ():

      JavaAccObj          (this),
      myWitRun_           (NULL),
      myProblem_          (NULL),
      nPartsOpns_         (0),
      myCTVecSupply_      (NULL),
      extractInProgress_  (false),
      extractForReadData_ (false)
   {
   witNewRun (& myWitRun_);

   witSetMesgThrowErrorExc (myWitRun_, WitTRUE, WitSEVERE_MESSAGES, WitTRUE);
   witSetMesgThrowErrorExc (myWitRun_, WitTRUE,  WitFATAL_MESSAGES, WitTRUE);

   witSetMesgTimesPrint    (myWitRun_, WitTRUE,                 97, 0);
   witSetMesgTimesPrint    (myWitRun_, WitTRUE,                 98, 0);
   witSetMesgTimesPrint    (myWitRun_, WitTRUE,                183, 0);

   witInitialize           (myWitRun_);
   witSetWit34Allowed      (myWitRun_,                              WitFALSE);

   witSetMesgTimesPrint    (myWitRun_, WitTRUE,                183, UCHAR_MAX);
   witSetMesgTimesPrint    (myWitRun_, WitTRUE,                 98, UCHAR_MAX);
   witSetMesgTimesPrint    (myWitRun_, WitTRUE,                 97, UCHAR_MAX);
   }

//------------------------------------------------------------------------------

WitJ::Coordinator::~Coordinator ()
   {
   delete myCTVecSupply_;

   witDeleteRun (myWitRun_);
   }

//------------------------------------------------------------------------------

WitJ::Coordinator * WitJ::Coordinator::asCoordinator ()
   {
   return this;
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::store (Problem * theProblem)
   {
   EXCEPTION_ASSERT ( myProblem_ == NULL);
   EXCEPTION_ASSERT (theProblem  != NULL);

   EXCEPTION_ASSERT (theProblem->getCoordinator () == this);

   myProblem_ = theProblem;
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::recordCreatePartOpn ()
   {
   if (nPartsOpns_ == 0)
      {
      myCTVecSupply_ = new CTVecSupply (myProblem_->getNPeriods ());
      }

   nPartsOpns_ ++;
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::recordDeletePartOpn ()
   {
   nPartsOpns_ --;

   if (nPartsOpns_ == 0)
      {
      delete myCTVecSupply_;

      myCTVecSupply_ = NULL;
      }
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::extract (bool forReadData)
   {
   EXCEPTION_ASSERT (! extractInProgress_);

   extractInProgress_  = true;
   extractForReadData_ = forReadData;

   if (forReadData)
      verifyGlobalUTF8 ();

   extractGlobalData     ();
   extractNonGlobalComps ();

   extractForReadData_ = false;
   extractInProgress_  = false;
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::restoreAfterPurge ()
   {
   witAttr theState;

   witGetObjItrState (myWitRun_, & theState);

   EXCEPTION_ASSERT (theState == WitINACTIVE);

   while (true)
      {
      witAdvanceObjItr (myWitRun_);

      witGetObjItrState (myWitRun_, & theState);

           if (theState == WitINACTIVE)     break;
      else if (theState == WitAT_PART)      restorePart       ();
      else if (theState == WitAT_DEMAND)    restoreDemand     ();
      else if (theState == WitAT_OPERATION) restoreOperation  ();
      else if (theState == WitAT_BOM_ENTRY) restoreBomEntry   ();
      else if (theState == WitAT_SUB_ENTRY) restoreSubstitute ();
      else if (theState == WitAT_BOP_ENTRY) restoreBopEntry   ();
      else                                  EXCEPTION_ASSERT  (false);
      }
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::clearData ()
   {
   nPartsOpns_   = 0;

   delete myCTVecSupply_;

   myCTVecSupply_ = NULL;

   myProblem_->clearData ();

   witInitialize      (myWitRun_);
   witSetWit34Allowed (myWitRun_, WitFALSE);
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::populate (
      CompALJOR <Part> &   thePartALJOR,
      const char * const * partNameCVec,
      int                  theLength)
   {
   int    theIdx;
   Part * thePart;

   thePartALJOR.clearAndAllocate (theLength);

   for (theIdx = 0; theIdx < theLength; theIdx ++)
      {
      thePart = findPart (partNameCVec[theIdx]);

      thePartALJOR.add (thePart);
      }
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::populate (
      CompALJOR <Demand> & theDemandALJOR,
      const char * const * partNameCVec,
      const char * const * demandNameCVec,
      int                  theLength)
   {
   int      theIdx;
   Demand * theDemand;

   theDemandALJOR.clearAndAllocate (theLength);

   for (theIdx = 0; theIdx < theLength; theIdx ++)
      {
      theDemand = findDemand (partNameCVec[theIdx], demandNameCVec[theIdx]);

      theDemandALJOR.add (theDemand);
      }
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::populate (
      CompALJOR <Operation> & theOpnALJOR,
      const char * const *    opnNameCVec,
      int                     theLength)
   {
   int         theIdx;
   Operation * theOpn;

   theOpnALJOR.clearAndAllocate (theLength);

   for (theIdx = 0; theIdx < theLength; theIdx ++)
      {
      theOpn = findOperation (opnNameCVec[theIdx]);

      theOpnALJOR.add (theOpn);
      }
   }

//------------------------------------------------------------------------------

WitJ::Part * WitJ::Coordinator::findPart (const char * thePartName)
   {
   void * theAppData;

   witGetPartAppData (getWitRun (), thePartName, & theAppData);

   return static_cast <Part *> (theAppData);
   }

//------------------------------------------------------------------------------

WitJ::Demand * WitJ::Coordinator::findDemand (
      const char * thePartName,
      const char * theDemandName)
   {
   void * theAppData;

   witGetDemandAppData (getWitRun (), thePartName, theDemandName, & theAppData);

   return static_cast <Demand *> (theAppData);
   }

//------------------------------------------------------------------------------

WitJ::Operation * WitJ::Coordinator::findOperation (const char * theOpnName)
   {
   void * theAppData;

   witGetOperationAppData (getWitRun (), theOpnName, & theAppData);

   return static_cast <Operation *> (theAppData);
   }

//------------------------------------------------------------------------------

WitJ::BomEntry * WitJ::Coordinator::findBomEntry (
      const char * theOpnName,
      int          theBomIndex)
   {
   void * theAppData;

   witGetBomEntryAppData (getWitRun (), theOpnName, theBomIndex, & theAppData);

   return static_cast <BomEntry *> (theAppData);
   }

//------------------------------------------------------------------------------

WitJ::Substitute * WitJ::Coordinator::findSubstitute (
      const char * theOpnName,
      int          theBomIndex,
      int          theSubIndex)
   {
   void * theAppData;

   witGetSubsBomEntryAppData (
      getWitRun (),
      theOpnName,
      theBomIndex,
      theSubIndex,
    & theAppData);

   return static_cast <Substitute *> (theAppData);
   }

//------------------------------------------------------------------------------

WitJ::BopEntry * WitJ::Coordinator::findBopEntry (
      const char * theOpnName,
      int          theBopIndex)
   {
   void * theAppData;

   witGetBopEntryAppData (getWitRun (), theOpnName, theBopIndex, & theAppData);

   return static_cast <BopEntry *> (theAppData);
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::verifyGlobalUTF8 ()
   {
   char *     theCString;
   witBoolean multiObjModeVal;

   witGetTitle                (getWitRun (), & theCString);
   verifyUTF8                                 (theCString);
   witFree                                    (theCString);

   witGetSolverLogFileName    (getWitRun (), & theCString);
   verifyUTF8                                 (theCString);
   witFree                                    (theCString);

   witGetMultiObjMode         (getWitRun (), & multiObjModeVal);

   if (multiObjModeVal)
      {
      witGetObjectiveListSpec (getWitRun (), & theCString);
      verifyUTF8                              (theCString);
      witFree                                 (theCString);
      }
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::extractGlobalData ()
   {
   int nPeriodsVal;

   witGetNPeriods (myWitRun_, & nPeriodsVal);
   
   ComponentJOR::setJavaNPeriods (myProblem_, nPeriodsVal);
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::extractNonGlobalComps ()
   {
   witAttr theState;

   witGetObjItrState (myWitRun_, & theState);

   EXCEPTION_ASSERT (theState == WitINACTIVE);

   while (true)
      {
      witAdvanceObjItr (myWitRun_);

      witGetObjItrState (myWitRun_, & theState);

           if (theState == WitINACTIVE)     break;
      else if (theState == WitAT_PART)      extractPart       ();
      else if (theState == WitAT_DEMAND)    extractDemand     ();
      else if (theState == WitAT_OPERATION) extractOperation  ();
      else if (theState == WitAT_BOM_ENTRY) extractBomEntry   ();
      else if (theState == WitAT_SUB_ENTRY) extractSubstitute ();
      else if (theState == WitAT_BOP_ENTRY) extractBopEntry   ();
      else                                  EXCEPTION_ASSERT  (false);
      }
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::extractPart ()
   {
   char *  thePartNameCStr;
   witAttr thePartCatAttr;
   bool    isMaterial;

   witGetObjItrPart (getWitRun (), & thePartNameCStr);

   if (extractForReadData_)
      verifyUTF8 (thePartNameCStr);

   witGetPartCategory (getWitRun (), thePartNameCStr, & thePartCatAttr);

   isMaterial = (thePartCatAttr == WitMATERIAL);

   ComponentJOR::makeJavaPart (myProblem_, thePartNameCStr, isMaterial);

   witFree (thePartNameCStr);
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::extractDemand ()
   {
   char * thePartNameCStr;
   char * theDemandNameCStr;
   Part * thePart;

   witGetObjItrDemand (getWitRun (), & thePartNameCStr, & theDemandNameCStr);

   thePart = findPart (thePartNameCStr);

   if (extractForReadData_)
      verifyUTF8 (theDemandNameCStr);

   ComponentJOR::makeJavaDemand (thePart, theDemandNameCStr);

   witFree (theDemandNameCStr);
   witFree (thePartNameCStr);
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::extractOperation ()
   {
   char * theOpnNameCStr;

   witGetObjItrOperation (getWitRun (), & theOpnNameCStr);

   if (extractForReadData_)
      verifyUTF8 (theOpnNameCStr);

   ComponentJOR::makeJavaOperation (myProblem_, theOpnNameCStr);

   witFree (theOpnNameCStr);
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::extractBomEntry ()
   {
   char *      theOpnNameCStr;
   int         theBomIndex;
   char *      thePartNameCStr;
   Operation * theOpn;
   Part *      thePart;

   witGetObjItrBomEntry (getWitRun (), & theOpnNameCStr, & theBomIndex);

   witGetBomEntryConsumedPart (
      getWitRun (),
      theOpnNameCStr,
      theBomIndex,
    & thePartNameCStr);

   theOpn  = findOperation (theOpnNameCStr);
   thePart = findPart      (thePartNameCStr);

   ComponentJOR::makeJavaBomEntry (theOpn, thePart);

   witFree (thePartNameCStr);
   witFree (theOpnNameCStr);
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::extractSubstitute ()
   {
   char *     theOpnNameCStr;
   int        theBomIndex;
   int        theSubIndex;
   char *     thePartNameCStr;
   BomEntry * theBomEnt;
   Part *     thePart;

   witGetObjItrSubsBomEntry (
      getWitRun (),
    & theOpnNameCStr,
    & theBomIndex,
    & theSubIndex);

   witGetSubsBomEntryConsumedPart (
      getWitRun (),
      theOpnNameCStr,
      theBomIndex,
      theSubIndex,
    & thePartNameCStr);

   theBomEnt = findBomEntry (theOpnNameCStr, theBomIndex);
   thePart   = findPart     (thePartNameCStr);

   ComponentJOR::makeJavaSubstitute (theBomEnt, thePart);

   witFree (thePartNameCStr);
   witFree (theOpnNameCStr);
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::extractBopEntry ()
   {
   char *      theOpnNameCStr;
   int         theBopIndex;
   char *      thePartNameCStr;
   Operation * theOpn;
   Part *      thePart;

   witGetObjItrBopEntry (getWitRun (), & theOpnNameCStr, & theBopIndex);

   witGetBopEntryProducedPart (
      getWitRun (),
      theOpnNameCStr,
      theBopIndex,
    & thePartNameCStr);

   theOpn  = findOperation (theOpnNameCStr);
   thePart = findPart      (thePartNameCStr);

   ComponentJOR::makeJavaBopEntry (theOpn, thePart);

   witFree (thePartNameCStr);
   witFree (theOpnNameCStr);
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::restorePart ()
   {
   char * thePartNameCStr;
   Part * thePart;

   witGetObjItrPart (getWitRun (), & thePartNameCStr);

   thePart = findPart (thePartNameCStr);

   thePart->setWasDeletedInWit (false);

   witFree (thePartNameCStr);
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::restoreDemand ()
   {
   char *   thePartNameCStr;
   char *   theDemandNameCStr;
   Demand * theDemand;

   witGetObjItrDemand (getWitRun (), & thePartNameCStr, & theDemandNameCStr);

   theDemand = findDemand (thePartNameCStr, theDemandNameCStr);

   theDemand->setWasDeletedInWit (false);

   witFree (theDemandNameCStr);
   witFree (thePartNameCStr);
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::restoreOperation ()
   {
   char *      theOpnNameCStr;
   Operation * theOpn;

   witGetObjItrOperation (getWitRun (), & theOpnNameCStr);

   theOpn = findOperation (theOpnNameCStr);

   theOpn->setWasDeletedInWit (false);

   witFree (theOpnNameCStr);
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::restoreBomEntry ()
   {
   char *     theOpnNameCStr;
   int        theBomIndex;
   BomEntry * theBomEnt;

   witGetObjItrBomEntry (getWitRun (), & theOpnNameCStr, & theBomIndex);

   theBomEnt = findBomEntry (theOpnNameCStr, theBomIndex);

   theBomEnt->setBomIndex        (theBomIndex);
   theBomEnt->setWasDeletedInWit (false);

   witFree (theOpnNameCStr);
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::restoreSubstitute ()
   {
   char *       theOpnNameCStr;
   int          theBomIndex;
   int          theSubIndex;
   Substitute * theSub;

   witGetObjItrSubsBomEntry (
      getWitRun (),
    & theOpnNameCStr,
    & theBomIndex,
    & theSubIndex);

   theSub = findSubstitute (theOpnNameCStr, theBomIndex, theSubIndex);

   theSub->setSubIndex        (theSubIndex);
   theSub->setWasDeletedInWit (false);

   witFree (theOpnNameCStr);
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::restoreBopEntry ()
   {
   char *     theOpnNameCStr;
   int        theBopIndex;
   BopEntry * theBopEnt;

   witGetObjItrBopEntry (getWitRun (), & theOpnNameCStr, & theBopIndex);

   theBopEnt = findBopEntry (theOpnNameCStr, theBopIndex);

   theBopEnt->setBopIndex        (theBopIndex);
   theBopEnt->setWasDeletedInWit (false);

   witFree (theOpnNameCStr);
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::verifyUTF8 (const char * theCString)
   {
   if (! myProblem_->getComponentJOR ()->isaUTF8String (theCString))
      throw PreJavaException ("BadCharacterException", theCString);
   }
@


1.51
log
@getPgdCritList
@
text
@d210 20
@


1.50
log
@Namespace JniUtil.
@
text
@d189 21
@


1.49
log
@JniAsst
@
text
@a7 1
#include          <JniAsst.h>
d24 1
a24 1
WitJ::Coordinator::Coordinator (JniAsst * theJniAsst):
a26 1
      myJniAsst_          (theJniAsst),
a35 2
   myJniAsst_->setCoordinator (this);

a57 2

   delete myJniAsst_;
@


1.48
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@d8 1
d25 1
a25 1
WitJ::Coordinator::Coordinator ():
d28 1
d38 2
d62 2
@


1.47
log
@ArrayListJOR
@
text
@d16 1
a16 1
#include           <CORJOR.h>
d300 1
a300 1
   CORJOR::setNPeriods (myProblem_, nPeriodsVal);
d336 1
a336 1
   bool    thePartCatIsMaterial;
d345 1
a345 1
   thePartCatIsMaterial = (thePartCatAttr == WitMATERIAL);
d347 1
a347 1
   CORJOR::makePart (this, thePartNameCStr, thePartCatIsMaterial);
d367 1
a367 1
   CORJOR::makeDemand (thePart, theDemandNameCStr);
d384 1
a384 1
   CORJOR::makeOperation (this, theOpnNameCStr);
d410 1
a410 1
   CORJOR::makeBomEntry (theOpn, thePart);
d443 1
a443 1
   CORJOR::makeSubstitute (theBomEnt, thePart);
d470 1
a470 1
   CORJOR::makeBopEntry (theOpn, thePart);
d589 1
a589 1
   if (! getCORJOR ()->isaUTF8String (theCString))
@


1.46
log
@"populate" functions.
@
text
@d170 3
a172 3
      std::vector <Part *> & thePartVec,
      const char * const *   partNameCStrVec,
      int                    theLength)
d174 2
a175 1
   int theIdx;
d177 1
a177 1
   thePartVec.resize (theLength);
d181 1
a181 5
      thePartVec[theIdx] = findPart (partNameCStrVec[theIdx]);
      }
   }

//------------------------------------------------------------------------------
d183 1
a183 14
void WitJ::Coordinator::populate (
      std::vector <Demand *> & theDemandVec,
      const char * const *     partNameCStrVec,
      const char * const *     demandNameCStrVec,
      int                      theLength)
   {
   int theIdx;

   theDemandVec.resize (theLength);

   for (theIdx = 0; theIdx < theLength; theIdx ++)
      {
      theDemandVec[theIdx] = findDemand (partNameCStrVec  [theIdx],
                                         demandNameCStrVec[theIdx]);
@


1.45
log
@AllocTripleALJOR
@
text
@d169 1
a169 1
void WitJ::Coordinator::findParts (
d186 1
a186 1
void WitJ::Coordinator::findDemands (
@


1.44
log
@getCriticialList and eqHeurAlloc.
@
text
@d169 1
a169 1
void WitJ::Coordinator::copyInto (
d171 1
a171 1
      const char * const *   thePartNames,
d180 20
a199 1
      thePartVec[theIdx] = findPart (thePartNames[theIdx]);
@


1.43
log
@Revised the arguments to eqHeurAlloc.
@
text
@d169 17
@


1.42
log
@Renamed JavaObjRep to CORJOR.
@
text
@d17 1
@


1.41
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@d16 1
a16 1
#include       <JavaObjRep.h>
d279 1
a279 1
   JavaObjRep::setNPeriods (myProblem_, nPeriodsVal);
d326 1
a326 1
   JavaObjRep::makePart (this, thePartNameCStr, thePartCatIsMaterial);
d346 1
a346 1
   JavaObjRep::makeDemand (thePart, theDemandNameCStr);
d363 1
a363 1
   JavaObjRep::makeOperation (this, theOpnNameCStr);
d389 1
a389 1
   JavaObjRep::makeBomEntry (theOpn, thePart);
d422 1
a422 1
   JavaObjRep::makeSubstitute (theBomEnt, thePart);
d449 1
a449 1
   JavaObjRep::makeBopEntry (theOpn, thePart);
d568 2
a569 3
   if (! getJavaObjRep ()->isaUTF8String (theCString))
      throw
         PreJavaException ("BadCharacterException", theCString);
@


1.40
log
@Multi-Obj Mode
@
text
@d8 1
a8 1
#include     <GlobalAspect.h>
d27 1
a27 1
      myGlobalAspect_     (NULL),
d68 1
a68 1
void WitJ::Coordinator::store (GlobalAspect * theGlobalAspect)
d70 2
a71 2
   EXCEPTION_ASSERT ( myGlobalAspect_ == NULL);
   EXCEPTION_ASSERT (theGlobalAspect  != NULL);
d73 1
a73 1
   EXCEPTION_ASSERT (theGlobalAspect->getCoordinator () == this);
d75 1
a75 1
   myGlobalAspect_ = theGlobalAspect;
d84 1
a84 1
      myCTVecSupply_ = new CTVecSupply (myGlobalAspect_->getNPeriods ());
d116 2
a117 2
   extractGlobalData ();
   extractComponents ();
a128 2
   myGlobalAspect_->setWasDeletedInWit (false);

d160 1
a160 1
   myGlobalAspect_->clearData ();
d279 1
a279 1
   JavaObjRep::setNPeriods (myGlobalAspect_, nPeriodsVal);
d284 1
a284 1
void WitJ::Coordinator::extractComponents ()
@


1.39
log
@Multi-Obj Mode
@
text
@a16 1
#include        <StringWoa.h>
d252 1
a252 1
   StringWoa  theStringWoa;
d255 7
a261 2
   witGetTitle (getWitRun (), theStringWoa.getCStrAddr ());
   verifyUTF8  (              theStringWoa.getCString  ());
d263 1
a263 4
   witGetSolverLogFileName (getWitRun (), theStringWoa.getCStrAddr ());
   verifyUTF8              (              theStringWoa.getCString  ());

   witGetMultiObjMode (getWitRun (), & multiObjModeVal);
d267 3
a269 2
      witGetObjectiveListSpec (getWitRun (), theStringWoa.getCStrAddr ());
      verifyUTF8              (              theStringWoa.getCString  ());
d315 3
a317 3
   StringWoa thePartNameWoa;
   witAttr   theCategoryAttr;
   bool      theCategoryIsMaterial;
d319 1
a319 1
   witGetObjItrPart (getWitRun (), thePartNameWoa.getCStrAddr ());
d322 5
a326 1
      verifyUTF8 (thePartNameWoa.getCString ());
d328 3
a330 11
   witGetPartCategory (
      getWitRun                 (),
      thePartNameWoa.getCString (),
    & theCategoryAttr);

   theCategoryIsMaterial = (theCategoryAttr == WitMATERIAL);

   JavaObjRep::makePart (
      this,
      thePartNameWoa.getCString (),
      theCategoryIsMaterial);
d337 5
a341 8
   StringWoa thePartNameWoa;
   StringWoa theDemandNameWoa;
   Part *    thePart;

   witGetObjItrDemand (
      getWitRun                    (),
      thePartNameWoa  .getCStrAddr (),
      theDemandNameWoa.getCStrAddr ());
d343 1
a343 1
   thePart = findPart (thePartNameWoa.getCString ());
d346 3
a348 1
      verifyUTF8 (theDemandNameWoa.getCString ());
d350 2
a351 1
   JavaObjRep::makeDemand (thePart, theDemandNameWoa.getCString ());
d358 1
a358 1
   StringWoa theOpnNameWoa;
d360 1
a360 1
   witGetObjItrOperation (getWitRun (), theOpnNameWoa.getCStrAddr ());
d363 1
a363 1
      verifyUTF8 (theOpnNameWoa.getCString ());
d365 3
a367 1
   JavaObjRep::makeOperation (this, theOpnNameWoa.getCString ());
d374 1
a374 1
   StringWoa   theOpnNameWoa;
d376 1
a376 1
   StringWoa   thePartNameWoa;
d380 1
a380 4
   witGetObjItrBomEntry (
      getWitRun                 (),
      theOpnNameWoa.getCStrAddr (),
    & theBomIndex);
d383 2
a384 2
      getWitRun                  (),
      theOpnNameWoa .getCString  (),
d386 1
a386 1
      thePartNameWoa.getCStrAddr ());
d388 2
a389 2
   theOpn  = findOperation (theOpnNameWoa .getCString ());
   thePart = findPart      (thePartNameWoa.getCString ());
d392 3
d401 1
a401 1
   StringWoa  theOpnNameWoa;
d404 1
a404 1
   StringWoa  thePartNameWoa;
d409 2
a410 2
      getWitRun                 (),
      theOpnNameWoa.getCStrAddr (),
d415 2
a416 2
      getWitRun                  (),
      theOpnNameWoa .getCString  (),
d419 1
a419 1
      thePartNameWoa.getCStrAddr ());
d421 2
a422 2
   theBomEnt = findBomEntry (theOpnNameWoa .getCString (), theBomIndex);
   thePart   = findPart     (thePartNameWoa.getCString ());
d425 3
d434 1
a434 1
   StringWoa   theOpnNameWoa;
d436 1
a436 1
   StringWoa   thePartNameWoa;
d440 1
a440 4
   witGetObjItrBopEntry (
      getWitRun                 (),
      theOpnNameWoa.getCStrAddr (),
    & theBopIndex);
d443 2
a444 2
      getWitRun                  (),
      theOpnNameWoa .getCString  (),
d446 1
a446 1
      thePartNameWoa.getCStrAddr ());
d448 2
a449 2
   theOpn  = findOperation (theOpnNameWoa .getCString ());
   thePart = findPart      (thePartNameWoa.getCString ());
d452 3
d461 2
a462 2
   StringWoa thePartNameWoa;
   Part *    thePart;
d464 1
a464 1
   witGetObjItrPart (getWitRun (), thePartNameWoa.getCStrAddr ());
d466 1
a466 1
   thePart = findPart (thePartNameWoa.getCString ());
d469 2
d477 7
a483 13
   StringWoa thePartNameWoa;
   StringWoa theDemandNameWoa;
   Demand *  theDemand;

   witGetObjItrDemand (
      getWitRun                    (),
      thePartNameWoa  .getCStrAddr (),
      theDemandNameWoa.getCStrAddr ());

   theDemand =
      findDemand (
         thePartNameWoa  .getCString (), 
         theDemandNameWoa.getCString ());
d486 3
d495 1
a495 1
   StringWoa   theOpnNameWoa;
d498 1
a498 1
   witGetObjItrOperation (getWitRun (), theOpnNameWoa.getCStrAddr ());
d500 1
a500 1
   theOpn = findOperation (theOpnNameWoa .getCString ());
d503 2
d511 1
a511 1
   StringWoa  theOpnNameWoa;
d515 1
a515 4
   witGetObjItrBomEntry (
      getWitRun                 (),
      theOpnNameWoa.getCStrAddr (),
    & theBomIndex);
d517 1
a517 1
   theBomEnt = findBomEntry (theOpnNameWoa.getCString (), theBomIndex);
d521 2
d529 1
a529 1
   StringWoa    theOpnNameWoa;
d535 2
a536 2
      getWitRun                 (),
      theOpnNameWoa.getCStrAddr (),
d540 1
a540 2
   theSub =
      findSubstitute (theOpnNameWoa.getCString (), theBomIndex, theSubIndex);
d544 2
d552 1
a552 1
   StringWoa  theOpnNameWoa;
d556 1
a556 4
   witGetObjItrBopEntry (
      getWitRun                 (),
      theOpnNameWoa.getCStrAddr (),
    & theBopIndex);
d558 1
a558 1
   theBopEnt = findBopEntry (theOpnNameWoa.getCString (), theBopIndex);
d562 2
@


1.38
log
@Implemented String StdAttImps.
@
text
@d114 3
d251 22
d275 1
a275 2
   int       nPeriodsVal;
   StringWoa titleWoa;
a279 4

   witGetTitle (getWitRun (), titleWoa.getCStrAddr ());

   verifyUTF8 (titleWoa.getCString ());
d319 2
a320 1
   verifyUTF8 (thePartNameWoa.getCString ());
d350 2
a351 1
   verifyUTF8 (theDemandNameWoa.getCString ());
d364 2
a365 1
   verifyUTF8 (theOpnNameWoa.getCString ());
d567 3
a569 5
   if (extractForReadData_)
      if (! getJavaObjRep ()->isaUTF8String (theCString))
         {
         throw PreJavaException ("BadCharacterException", theCString);
         }
@


1.37
log
@Removed synchronization of CoordinatorCOR ctor.
@
text
@d257 1
a257 1
   myGlobalAspect_->getTitle (titleWoa);
@


1.36
log
@Fixed bug: The WIT multiThread attribute is now set to true.
Implemented the test for calls to readData from two Threads.
@
text
@a44 1
   witSetMultiThread       (myWitRun_,                              WitTRUE);
@


1.35
log
@Changed name of clear methods to clearData.
@
text
@d45 1
@


1.34
log
@Revised theProblem.clear ().
@
text
@d152 1
a152 1
void WitJ::Coordinator::clear ()
d160 1
a160 1
   myGlobalAspect_->clear();
@


1.33
log
@Removed the "enabled" concept from WIT-J.
@
text
@d161 3
@


1.32
log
@theProblem.copyData (...).
@
text
@d38 11
@


1.31
log
@theProblem.clear ().
@
text
@d26 7
a32 6
      JavaAccObj         (this),
      myWitRun_          (NULL),
      myGlobalAspect_    (NULL),
      nPartsOpns_        (0),
      myCTVecSupply_     (NULL),
      extractInProgress_ (false)
d96 1
a96 1
void WitJ::Coordinator::extract ()
d100 2
a101 1
   extractInProgress_ = true;
d106 2
a107 1
   extractInProgress_ = false;
a233 10
void WitJ::Coordinator::verifyUTF8 (const char * theCString)
   {
   if (! getJavaObjRep ()->isaUTF8String (theCString))
      {
      throw PreJavaException ("BadCharacterException", theCString);
      }
   }

//------------------------------------------------------------------------------

d525 11
@


1.30
log
@Moved findInstsnce functions into class Component.
@
text
@d138 13
@


1.29
log
@Moved restoreInstance functions from the Component classes to class
   Coordinator.
@
text
@d138 80
d307 1
a307 1
   thePart = Part::findInstance (this, thePartNameWoa.getCString ());
d348 2
a349 2
   theOpn  = Operation::findInstance (this, theOpnNameWoa .getCString ());
   thePart = Part     ::findInstance (this, thePartNameWoa.getCString ());
d378 2
a379 4
   theBomEnt = BomEntry::findInstance (this, theOpnNameWoa .getCString (),
                                             theBomIndex);

   thePart   = Part    ::findInstance (this, thePartNameWoa.getCString ());
d405 2
a406 2
   theOpn  = Operation::findInstance (this, theOpnNameWoa .getCString ());
   thePart = Part     ::findInstance (this, thePartNameWoa.getCString ());
d420 1
a420 1
   thePart = Part::findInstance (this, thePartNameWoa.getCString ());
d439 2
a440 3
      Demand::findInstance (
         this,
         thePartNameWoa  .getCString (),
d455 1
a455 1
   theOpn = Operation::findInstance (this, theOpnNameWoa .getCString ());
d473 1
a473 2
   theBomEnt =
      BomEntry::findInstance (this, theOpnNameWoa.getCString (), theBomIndex);
d495 1
a495 5
      Substitute::findInstance (
         this,
         theOpnNameWoa.getCString (),
         theBomIndex,
         theSubIndex);
d514 1
a514 2
   theBopEnt =
      BopEntry::findInstance (this, theOpnNameWoa.getCString (), theBopIndex);
@


1.28
log
@Moved Component extraction functions to class Coordinator.
Removed debugging output code from createMyCppCoordinator implementation.
@
text
@d125 8
a132 9
      if      (theState == WitINACTIVE)                 break;
      else if (theState == WitAT_PART)            Part::restoreInstance (this);
      else if (theState == WitAT_DEMAND)        Demand::restoreInstance (this);
      else if (theState == WitAT_OPERATION)  Operation::restoreInstance (this);
      else if (theState == WitAT_BOM_ENTRY)   BomEntry::restoreInstance (this);
      else if (theState == WitAT_SUB_ENTRY) Substitute::restoreInstance (this);
      else if (theState == WitAT_BOP_ENTRY)   BopEntry::restoreInstance (this);
      else
         EXCEPTION_ASSERT (false);
d178 1
a178 1
      if      (theState == WitINACTIVE)     break;
d197 1
a197 3
   witGetObjItrPart (
      getWitRun                  (),
      thePartNameWoa.getCStrAddr ());
d332 116
@


1.27
log
@Changed the name of Java class NonUTF8DataFileException to
   BadCharacterException.
@
text
@d179 8
a186 8
      if      (theState == WitINACTIVE)                 break;
      else if (theState == WitAT_PART)            Part::extractInstance (this);
      else if (theState == WitAT_DEMAND)        Demand::extractInstance (this);
      else if (theState == WitAT_OPERATION)  Operation::extractInstance (this);
      else if (theState == WitAT_BOM_ENTRY)   BomEntry::extractInstance (this);
      else if (theState == WitAT_SUB_ENTRY) Substitute::extractInstance (this);
      else if (theState == WitAT_BOP_ENTRY)   BopEntry::extractInstance (this);
      else                                             EXCEPTION_ASSERT (false);
d189 146
@


1.26
log
@Detection of non-UTF-8.
@
text
@d143 1
a143 1
      throw PreJavaException ("NonUTF8DataFileException", theCString);
@


1.25
log
@Bad data file character detection.
@
text
@d7 12
a18 10
#include  <Coordinator.h>
#include <GlobalAspect.h>
#include         <Part.h>
#include       <Demand.h>
#include    <Operation.h>
#include     <BomEntry.h>
#include   <Substitute.h>
#include     <BopEntry.h>
#include  <CTVecSupply.h>
#include   <JavaObjRep.h>
d20 1
a20 1
#include          <wit.h>
d101 1
a101 2
   extractNPeriods ();

d139 11
a149 1
void WitJ::Coordinator::extractNPeriods ()
d151 2
a152 1
   int nPeriodsVal;
d157 4
@


1.24
log
@Fixed bug: The C++ Coordinator new deletes the CTVecSupply when it needs to.
@
text
@d170 1
a170 2
      else
         EXCEPTION_ASSERT (false);
@


1.23
log
@Fixed the memory leak in theCoord->freezeNPeriods ().
@
text
@d27 1
d67 1
a67 1
void WitJ::Coordinator::recordPartOpn ()
d69 1
a69 1
   if (myCTVecSupply_ == NULL)
d73 16
@


1.22
log
@Replaced C++ classes CTVecHolder <...> and CTVecRes with CTVecSupply.
@
text
@d66 1
a66 1
void WitJ::Coordinator::freezeNPeriods ()
d68 4
a71 1
   myCTVecSupply_ = new CTVecSupply (myGlobalAspect_->getNPeriods ());
@


1.21
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d15 1
a15 1
#include     <CTVecRes.h>
d27 1
a27 1
      myCTVecRes_        (NULL),
d40 1
a40 1
   delete myCTVecRes_;
d68 1
a68 1
   myCTVecRes_ = new CTVecRes (myGlobalAspect_->getNPeriods ());
@


1.20
log
@Changed name of GlobalComponent classes to GlobalAspect.
@
text
@d81 1
a81 1
   extractElements ();
d129 1
a129 1
void WitJ::Coordinator::extractElements ()
@


1.19
log
@Changed name of GlobalElement classes to GlobalComponent.
@
text
@d7 10
a16 10
#include     <Coordinator.h>
#include <GlobalComponent.h>
#include            <Part.h>
#include          <Demand.h>
#include       <Operation.h>
#include        <BomEntry.h>
#include      <Substitute.h>
#include        <BopEntry.h>
#include        <CTVecRes.h>
#include      <JavaObjRep.h>
d18 1
a18 1
#include             <wit.h>
d26 1
a26 1
      myGlobalComponent_ (NULL),
d54 1
a54 1
void WitJ::Coordinator::store (GlobalComponent * theGlobalComp)
d56 2
a57 2
   EXCEPTION_ASSERT (myGlobalComponent_ == NULL);
   EXCEPTION_ASSERT (theGlobalComp      != NULL);
d59 1
a59 1
   EXCEPTION_ASSERT (theGlobalComp->getCoordinator () == this);
d61 1
a61 1
   myGlobalComponent_ = theGlobalComp;
d68 1
a68 1
   myCTVecRes_ = new CTVecRes (myGlobalComponent_->getNPeriods ());
d92 1
a92 1
   myGlobalComponent_->setWasDeletedInWit (false);
d124 1
a124 1
   JavaObjRep::setNPeriods (myGlobalComponent_, nPeriodsVal);
@


1.18
log
@purgeData
@
text
@d7 10
a16 10
#include   <Coordinator.h>
#include <GlobalElement.h>
#include          <Part.h>
#include        <Demand.h>
#include     <Operation.h>
#include      <BomEntry.h>
#include    <Substitute.h>
#include      <BopEntry.h>
#include      <CTVecRes.h>
#include    <JavaObjRep.h>
d18 1
a18 1
#include           <wit.h>
d26 1
a26 1
      myGlobalElement_   (NULL),
d54 1
a54 1
void WitJ::Coordinator::store (GlobalElement * theGlobalElement)
d56 2
a57 2
   EXCEPTION_ASSERT (myGlobalElement_ == NULL);
   EXCEPTION_ASSERT (theGlobalElement != NULL);
d59 1
a59 1
   EXCEPTION_ASSERT (theGlobalElement->getCoordinator () == this);
d61 1
a61 1
   myGlobalElement_ = theGlobalElement;
d68 1
a68 1
   myCTVecRes_ = new CTVecRes (myGlobalElement_->getNPeriods ());
d92 1
a92 1
   myGlobalElement_->setWasDeletedInWit (false);
d124 1
a124 1
   JavaObjRep::setNPeriods (myGlobalElement_, nPeriodsVal);
@


1.17
log
@purgeData
@
text
@d88 1
a88 1
void WitJ::Coordinator::purgeData ()
d92 1
a92 1
   witPurgeData (myWitRun_);
d105 6
a110 6
      else if (theState == WitAT_PART)            Part::preserveInstance (this);
      else if (theState == WitAT_DEMAND)        Demand::preserveInstance (this);
      else if (theState == WitAT_OPERATION)  Operation::preserveInstance (this);
      else if (theState == WitAT_BOM_ENTRY)   BomEntry::preserveInstance (this);
      else if (theState == WitAT_SUB_ENTRY) Substitute::preserveInstance (this);
      else if (theState == WitAT_BOP_ENTRY)   BopEntry::preserveInstance (this);
@


1.16
log
@purgeData
@
text
@a117 88
WitJ::Part * WitJ::Coordinator::findPart (const char * thePartName)
   {
   void * theAppData;

   witGetPartAppData (myWitRun_, thePartName, & theAppData);

   return static_cast <Part *> (theAppData);
   }

//------------------------------------------------------------------------------

WitJ::Demand * WitJ::Coordinator::findDemand (
      const char * thePartName,
      const char * theDemandName)
   {
   void * theAppData;

   witGetDemandAppData (myWitRun_, thePartName, theDemandName, & theAppData);

   return static_cast <Demand *> (theAppData);
   }

//------------------------------------------------------------------------------

WitJ::Operation * WitJ::Coordinator::findOperation (const char * theOpnName)
   {
   void * theAppData;

   witGetOperationAppData (myWitRun_, theOpnName, & theAppData);

   return static_cast <Operation *> (theAppData);
   }

//------------------------------------------------------------------------------

WitJ::BomEntry * WitJ::Coordinator::findBomEntry (
      const char * theOpnName,
      int          theBomIndex)
   {
   void * theAppData;

   witGetBomEntryAppData (
      myWitRun_,
      theOpnName,
      theBomIndex,
    & theAppData);

   return static_cast <BomEntry *> (theAppData);
   }

//------------------------------------------------------------------------------

WitJ::Substitute * WitJ::Coordinator::findSubstitute (
      const char * theOpnName,
      int          theBomIndex,
      int          theSubIndex)
   {
   void * theAppData;

   witGetSubsBomEntryAppData (
      myWitRun_,
      theOpnName,
      theBomIndex,
      theSubIndex,
    & theAppData);

   return static_cast <Substitute *> (theAppData);
   }

//------------------------------------------------------------------------------

WitJ::BopEntry * WitJ::Coordinator::findBopEntry (
      const char * theOpnName,
      int          theBopIndex)
   {
   void * theAppData;

   witGetBopEntryAppData (
      myWitRun_,
      theOpnName,
      theBopIndex,
    & theAppData);

   return static_cast <BopEntry *> (theAppData);
   }

//------------------------------------------------------------------------------

@


1.15
log
@purgeData
@
text
@d90 2
d94 20
a113 1
   EXCEPTION_ASSERT (false);
@


1.14
log
@purgeData
@
text
@d9 1
d11 4
a15 2
#include     <StrVecWoa.h>
#include        <VecWoa.h>
d210 7
a216 21
      if (theState == WitINACTIVE)
         break;

      else if (theState == WitAT_PART)
         extractPart ();

      else if (theState == WitAT_DEMAND)
         extractDemand ();

      else if (theState == WitAT_OPERATION)
         extractOperation ();

      else if (theState == WitAT_BOM_ENTRY)
         extractBomEntry ();

      else if (theState == WitAT_SUB_ENTRY)
         extractSubstitute ();

      else if (theState == WitAT_BOP_ENTRY)
         extractBopEntry ();

a220 136

//------------------------------------------------------------------------------

void WitJ::Coordinator::extractPart ()
   {
   StringWoa thePartNameWoa;
   witAttr   theCategoryAttr;
   bool      theCategoryIsMaterial;

   witGetObjItrPart   (myWitRun_, thePartNameWoa.getCVecAddr ());

   witGetPartCategory (myWitRun_, thePartNameWoa.getCVec (), & theCategoryAttr);

   theCategoryIsMaterial = (theCategoryAttr == WitMATERIAL);

   JavaObjRep::makePart (
      this,
      thePartNameWoa.getCVec (),
      theCategoryIsMaterial);
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::extractDemand ()
   {
   StringWoa thePartNameWoa;
   StringWoa theDemandNameWoa;
   Part *    thePart;

   witGetObjItrDemand (
      myWitRun_,
      thePartNameWoa  .getCVecAddr (),
      theDemandNameWoa.getCVecAddr ());

   thePart = findPart (thePartNameWoa.getCVec ());

   JavaObjRep::makeDemand (thePart, theDemandNameWoa.getCVec ());
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::extractOperation ()
   {
   StringWoa theOpnNameWoa;

   witGetObjItrOperation (myWitRun_, theOpnNameWoa.getCVecAddr ());

   JavaObjRep::makeOperation (this, theOpnNameWoa.getCVec ());
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::extractBomEntry ()
   {
   StringWoa   theOpnNameWoa;
   int         theBomIndex;
   Operation * theOpn;
   StringWoa   thePartNameWoa;
   Part *      thePart;

   witGetObjItrBomEntry (
      myWitRun_,
      theOpnNameWoa.getCVecAddr (),
    & theBomIndex);

   theOpn = findOperation (theOpnNameWoa.getCVec ());

   witGetBomEntryConsumedPart (
      myWitRun_,
      theOpnNameWoa.getCVec (),
      theBomIndex,
      thePartNameWoa.getCVecAddr ());

   thePart = findPart (thePartNameWoa.getCVec ());

   JavaObjRep::makeBomEntry (theOpn, thePart);
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::extractSubstitute ()
   {
   StringWoa  theOpnNameWoa;
   int        theBomIndex;
   int        theSubIndex;
   BomEntry * theBomEnt;
   StringWoa  thePartNameWoa;
   Part *     thePart;

   witGetObjItrSubsBomEntry (
      myWitRun_,
      theOpnNameWoa.getCVecAddr (),
    & theBomIndex,
    & theSubIndex);

   theBomEnt = findBomEntry (theOpnNameWoa.getCVec (), theBomIndex);

   witGetSubsBomEntryConsumedPart (
      myWitRun_,
      theOpnNameWoa.getCVec (),
      theBomIndex,
      theSubIndex,
      thePartNameWoa.getCVecAddr ());

   thePart = findPart (thePartNameWoa.getCVec ());

   JavaObjRep::makeSubstitute (theBomEnt, thePart);
   }

//------------------------------------------------------------------------------

void WitJ::Coordinator::extractBopEntry ()
   {
   StringWoa   theOpnNameWoa;
   int         theBopIndex;
   Operation * theOpn;
   StringWoa   thePartNameWoa;
   Part *      thePart;

   witGetObjItrBopEntry (
      myWitRun_,
      theOpnNameWoa.getCVecAddr (),
    & theBopIndex);

   theOpn = findOperation (theOpnNameWoa.getCVec ());

   witGetBopEntryProducedPart (
      myWitRun_,
      theOpnNameWoa.getCVec (),
      theBopIndex,
      thePartNameWoa.getCVecAddr ());

   thePart = findPart (thePartNameWoa.getCVec ());

   JavaObjRep::makeBopEntry (theOpn, thePart);
   }
@


1.13
log
@Removed C++ class Extractor.
@
text
@d85 9
@


1.12
log
@PIP.
@
text
@d12 2
a13 1
#include     <Extractor.h>
d21 5
a25 5
      JavaAccObj       (this),
      myWitRun_        (NULL),
      myGlobalElement_ (NULL),
      myCTVecRes_      (NULL),
      myExtractor_     (NULL)
a30 2

   myExtractor_ = new Extractor (this);
a36 1
   delete myExtractor_;
d70 15
d170 189
@


1.11
log
@PIP
@
text
@d121 36
@


1.10
log
@PIP.
@
text
@a71 23
void WitJ::Coordinator::fillWithDemands (
      std::vector <Element *> & theElementVec,
      StrVecWoa &               partNameVecWoa,
      StrVecWoa &               demandNameVecWoa)
   {
   int nDemands;
   int theIdx;

   nDemands = partNameVecWoa.getLength ();

   theElementVec.resize (nDemands);

   for (theIdx = 0; theIdx < nDemands; theIdx ++)
      {
      theElementVec[theIdx] =
         findDemand (
            partNameVecWoa  [theIdx],
            demandNameVecWoa[theIdx]);
      }
   }

//------------------------------------------------------------------------------

@


1.9
log
@Implemented getPipSeq.
@
text
@a73 1
      int                       nDemands,
d77 1
d80 2
@


1.8
log
@Simplified the static instance logic.
@
text
@d9 1
d11 1
d72 21
d104 13
@


1.7
log
@Removed the Alternative classes.
@
text
@d16 1
a16 1
WitJ::Coordinator::Coordinator (bool forStaticCoord):
@


1.6
log
@Part.Category as Alternative
@
text
@a10 1
#include   <Alternative.h>
a28 3
   if (forStaticCoord)
      Alternative::createAllInstances (this);

@


1.5
log
@Setting wit34Allowed to false.
@
text
@d11 1
d17 1
a17 1
WitJ::Coordinator::Coordinator ():
d30 3
@


1.4
log
@Implemented Java class CppGateway.
@
text
@d26 3
@


1.3
log
@Fixed a memory leak.
@
text
@a7 1
#include    <JavaObjRep.h>
d16 1
a16 1
WitJ::Coordinator::Coordinator (JavaObjRep * theJavaObjRep):
a18 1
      myJavaObjRep_    (theJavaObjRep),
a36 2

   delete myJavaObjRep_;
@


1.2
log
@Coordinator
@
text
@d8 1
d39 2
@


1.1
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d16 1
a16 1
WitJ::Coordinator::Coordinator ():
d19 1
a19 1
      myProblem_       (NULL),
a48 7
void WitJ::Coordinator::store (Problem * theProblem)
   {
   myProblem_ = theProblem;
   }

//------------------------------------------------------------------------------

@

