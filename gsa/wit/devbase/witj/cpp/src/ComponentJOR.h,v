head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2011.04.08.23.39.53;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.06.15.56.36;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.05.23.07.39;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.30.19.49.50;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.03.29.23.38.45;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Removed C++ class JavaObjRep.
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File ComponentJOR.h.
//
// Contains the declaration of class ComponentJOR.
//------------------------------------------------------------------------------

#ifndef ComponentJOR_h
#define ComponentJOR_h

#include <JniClient.h>

//------------------------------------------------------------------------------
// Class ComponentJOR
//
// "Component Java Object Representative"
// A C++ representation of a WIT-J/Java Component.
//
// Class Hierarchy:
//
// JniClient
//    ComponentJOR
//------------------------------------------------------------------------------

namespace WitJ
{
class ComponentJOR: public JniClient
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit ComponentJOR (_jobject * theCompJObj, JNIEnv *);
      //
      // Constructor.

   ~ComponentJOR ();
      //
      // Destructor.

   static void setUpJni (JNIEnv *);
      //
      // Sets up the interaction between this class and JNI.

   //---------------------------------------------------------------------------
   // makeJava{Component class} functions.
   //
   // Each of these functions creates a new instance of the indicated Java
   // Component class for the Java equivalent of the arguments.
   //---------------------------------------------------------------------------

   static void makeJavaPart (
         Problem *    theProblem,
         const char * thePartNameCStr,
         bool         isMaterial);

   static void makeJavaDemand (Part * thePart, const char * theDemandNameCStr);

   static void makeJavaOperation (
         Problem *    theProblem,
         const char * theOpnNameCStr);

   static void makeJavaBomEntry   (Operation * theOpn,    Part * thePart);
   static void makeJavaSubstitute (BomEntry *  theBomEnt, Part * thePart);
   static void makeJavaBopEntry   (Operation * theOpn,    Part * thePart);

   //---------------------------------------------------------------------------

   static void setJavaNPeriods (Problem * theProblem, int theValue);
      //
      // Sets nPeriods for the Java Problem corresponding to theProblem to
      // theValue.

   void exhaustJniMemory ();
      //
      // Repeatedly has JNI allocate memory in 100MB increments until memory is
      // exhausted.
      // Used for testing.

   inline _jobject * getComponentJObj ()
      {
      return myComponentJObj_;
      }

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   static void findAllJClasses (JNIEnv *);
      //
      // Finds and stores of the _jclass stored by this class.

   static void findAllJMethodIDs (JNIEnv *);
      //
      // Finds and stores each of the _jmethodIDs stored by this class.

   ComponentJOR              (const ComponentJOR &);
   ComponentJOR & operator = (const ComponentJOR &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   //---------------------------------------------------------------------------
   // _jclasses
   // 
   // Each of the following data members is a _jclass that's a global reference
   // to the WIT-J/Java class indicated by the name.
   //---------------------------------------------------------------------------

   static _jclass *       ourPartJCl_;
   static _jclass *     ourDemandJCl_;
   static _jclass *  ourOperationJCl_;
   static _jclass *   ourBomEntryJCl_;
   static _jclass * ourSubstituteJCl_;
   static _jclass *   ourBopEntryJCl_;

   //---------------------------------------------------------------------------
   // _jmethodIDs.
   //
   // Each of the following data members is the _jmethodID of a WIT-J/Java
   // method whose name and class is indicated by the name of the data member.
   // For example, newInstanceDemandJMeth_ is the _jmethodID of WIT-J/Java
   // method newInstance of class Demand.
   //---------------------------------------------------------------------------

   static _jmethodID *      makeInstancePartJMeth_;
   static _jmethodID *     newInstanceDemandJMeth_;
   static _jmethodID *  newInstanceOperationJMeth_;
   static _jmethodID *   newInstanceBomEntryJMeth_;
   static _jmethodID * newInstanceSubstituteJMeth_;
   static _jmethodID *   newInstanceBopEntryJMeth_;
   static _jmethodID *           setNPeriodsJMeth_;

   //---------------------------------------------------------------------------

   _jobject * myComponentJObj_;
      //          
      // A global reference to the represented Java Component.
   };
};
//
// End of namespace WitJ.

#endif
@


1.4
log
@JNIEnv arguments.
@
text
@d10 1
a10 1
#include <JavaObjRep.h>
d20 1
a20 1
// JavaObjRep
d26 1
a26 1
class ComponentJOR: public JavaObjRep
d81 5
d139 6
@


1.3
log
@JniClient
@
text
@d34 1
a34 1
   explicit ComponentJOR (JNIEnv *, _jobject * theCompJObj);
d42 1
a42 1
   static void setUpJni (JNIEnv * theJNIEnv);
a44 1
      // Uses theJNIEnv as its JNI environment.
d87 1
a87 1
   static void findAllJClasses (JNIEnv * theJNIEnv);
a89 1
      // Uses theJNIEnv as its JNI environment.
d91 1
a91 1
   static void findAllJMethodIDs (JNIEnv * theJNIEnv);
a93 1
      // Uses theJNIEnv as its JNI environment.
@


1.2
log
@C++ class JavaObjRep.
@
text
@a75 5
   void findNonsense ();
      //
      // Searches for a Java class called "Nonsense".
      // Used for testing.

@


1.1
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@d10 1
a10 1
#include <JniClient.h>
d16 1
a16 1
// A representation of a WIT-J/Java Component.
d20 1
a20 1
// JniClient
d26 1
a26 1
class ComponentJOR: public JniClient
a75 11
   _jobject * newPeggingTripleJObj (int thePeriod, double theVolume);
      //
      // Creates a new Java PeggingTriple for the represented Java Component
      // along with thePeriod and theVolume and creates and returns a local
      // reference to it.

   _jobject * getComponentJObj ();
      //
      // Accessor.
      // Returns a global reference to the represented Java Component.

a111 4
   _jobject * myComponentJObj_;
      //          
      // A global reference to the represented Java Component.

d119 6
a124 7
   static _jclass *          ourPartJCl_;
   static _jclass *        ourDemandJCl_;
   static _jclass *     ourOperationJCl_;
   static _jclass *      ourBomEntryJCl_;
   static _jclass *    ourSubstituteJCl_;
   static _jclass *      ourBopEntryJCl_;
   static _jclass * ourPeggingTripleJCl_;
a140 1
   static _jmethodID *     ctorPeggingTripleJMeth_; // Constructor
@

