head	1.66;
access;
symbols;
locks; strict;
comment	@ * @;


1.66
date	2011.04.13.16.00.15;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2011.04.08.20.56.18;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2011.03.28.15.57.05;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2011.03.25.22.49.12;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2010.04.20.20.55.06;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2010.04.20.16.36.58;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2010.04.19.20.48.01;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2010.04.17.00.20.18;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2009.06.04.23.04.20;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2009.05.29.21.59.16;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2009.04.15.23.33.26;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2009.04.15.22.14.55;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2009.04.15.21.11.57;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2009.04.14.16.17.17;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2009.03.13.19.32.17;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2009.03.05.19.09.17;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2009.03.05.17.21.25;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2009.02.28.00.27.53;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2009.02.27.23.12.29;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2009.02.27.21.22.39;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2009.02.27.18.44.24;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2009.02.26.22.46.57;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2009.02.25.20.05.58;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2009.02.25.18.30.38;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2009.02.25.16.55.19;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2009.02.25.16.47.15;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2009.02.25.16.32.17;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2009.02.21.01.00.56;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2009.02.20.17.18.43;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2009.02.19.17.39.21;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2009.02.17.19.26.12;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2009.02.14.00.51.28;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2009.02.06.23.27.12;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2009.02.04.21.51.54;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2009.02.04.20.16.00;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2009.01.29.22.06.37;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2009.01.21.21.43.21;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2009.01.16.17.30.24;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2009.01.16.17.03.34;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2009.01.16.16.32.01;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.12.15.17.28.46;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.11.26.18.33.04;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.10.07.18.50.22;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.10.06.22.14.01;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.10.03.19.06.58;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.10.02.17.34.35;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.10.01.22.10.10;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.09.29.22.43.46;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.09.09.18.59.58;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.09.04.21.47.41;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.08.29.18.36.40;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.08.29.17.19.03;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.08.29.15.34.42;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.08.28.18.50.40;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.08.27.15.30.45;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.07.01.17.49.15;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.07.01.16.09.21;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.10.23.21.33;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.10.22.32.35;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.28.22.29.35;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.22.22.00.12;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.21.14.33.47;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.20.20.37.02;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.19.22.20.54;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.15.19.45.16;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.20.54.10;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.66
log
@ArrayJOR classes
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File Demand.C.
//
// Contains the declaration    of enum  PeggingAtt
// Contains the implementation of class Demand.
//------------------------------------------------------------------------------

#include       <Demand.h>
#include         <Part.h>
#include    <Operation.h>
#include   <Substitute.h>
#include     <BopEntry.h>
#include  <Coordinator.h>
#include <ArrayListJOR.h>
#include     <ArrayJOR.h>

//------------------------------------------------------------------------------
// Enum PeggingAtt
//
// Identifies a pegging attribute.
//------------------------------------------------------------------------------

namespace WitJ
{
enum PeggingAtt
   {
      CONS_VOL_PIP = 0,
   CO_EXEC_VOL_PIP = 1,
      EXEC_VOL_PIP = 2,
      PROD_VOL_PIP = 3,
      SIDE_VOL_PIP = 4,
       SUB_VOL_PIP = 5,
    SUPPLY_VOL_PIP = 6,
      EXEC_VOL_CP  = 7,
       SUB_VOL_CP  = 8,
   };
};
//
// End of namespace WitJ.

//------------------------------------------------------------------------------
// Non-Inline member functions.
//------------------------------------------------------------------------------

WitJ::Demand::Demand (Part * thePart, const char * theDemandNameCStr):

      Component     (thePart->getCoordinator ()),
      myPart_       (thePart),
      myDemandName_ (theDemandNameCStr)
   {
   if (! extractInProgress ())
      witAddDemand (getWitRun (), getPartName (), getDemandName ());

   witSetDemandAppData (getWitRun (), getPartName (), getDemandName (), this);
   }

//------------------------------------------------------------------------------

WitJ::Demand::~Demand ()
   {
   }

//------------------------------------------------------------------------------

WitJ::Demand * WitJ::Demand::asDemand ()
   {
   return this;
   }

//------------------------------------------------------------------------------

void WitJ::Demand::setBoundSet (
      const double * hardLBCVec,
      const double * softLBCVec,
      const double * hardUBCVec)
   {
   witSetDemandCumShipBoundsDbl (
      getWitRun     (),
      getPartName   (),
      getDemandName (),
      hardLBCVec,
      softLBCVec,
      hardUBCVec);
   }

//------------------------------------------------------------------------------

void WitJ::Demand::getBoundSet (
      DblArrayJOR & hardLBAJOR,
      DblArrayJOR & softLBAJOR,
      DblArrayJOR & hardUBAJOR)
   {
   double * hardLBCVec;
   double * softLBCVec;
   double * hardUBCVec;

   witGetDemandCumShipBoundsDbl (
      getWitRun     (),
      getPartName   (),
      getDemandName (),
    & hardLBCVec,
    & softLBCVec,
    & hardUBCVec);

   hardLBAJOR.copyFrom (hardLBCVec);
   softLBAJOR.copyFrom (softLBCVec);
   hardUBAJOR.copyFrom (hardUBCVec);

   witFree (hardLBCVec);
   witFree (softLBCVec);
   witFree (hardUBCVec);
   }

//------------------------------------------------------------------------------

void WitJ::Demand::copyComponentData (Component * origComp)
   {
   Demand * origDemand;

   origDemand = origComp->asDemand ();

   witCopyDemandData (
                  getWitRun     (),
                  getPartName   (),
                  getDemandName (),
      origDemand->getWitRun     (),
      origDemand->getPartName   (),
      origDemand->getDemandName ());
   }

//------------------------------------------------------------------------------

void WitJ::Demand::appendToPipSeq (int theShipPer, double incShipVol)
   {
   witAppendToPipSeqDbl (
      getWitRun     (),
      getPartName   (),
      getDemandName (),
      theShipPer,
      incShipVol);
   }

//------------------------------------------------------------------------------

void WitJ::Demand::getPegging (
      int                  thePggAttIdx,
      int                  shipPer,
      PeggingTripleALJOR & theTripALJOR)
   {
   PeggingAtt thePggAtt;

   thePggAtt = static_cast <PeggingAtt> (thePggAttIdx);

   switch (thePggAtt)
      {
      case CONS_VOL_PIP:
         {
         getPartAttPgg (
            witGetDemandConsVolPipDbl,
            shipPer,
            theTripALJOR);

         return;
         }

      case CO_EXEC_VOL_PIP:
         {
         getBopEntryAttPgg (
            witGetDemandCoExecVolPipDbl,
            shipPer,
            theTripALJOR);

         return;
         }

      case    EXEC_VOL_PIP:
         {
         getOperationAttPgg (
            witGetDemandExecVolPipDbl,
            shipPer,
            theTripALJOR);

         return;
         }

      case    PROD_VOL_PIP:
         {
         getPartAttPgg (
            witGetDemandProdVolPipDbl,
            shipPer,
            theTripALJOR);

         return;
         }

      case    SIDE_VOL_PIP:
         {
         getPartAttPgg (
            witGetDemandSideVolPipDbl,
            shipPer,
            theTripALJOR);

         return;
         }

      case     SUB_VOL_PIP:
         {
         getSubstituteAttPgg (
            witGetDemandSubVolPipDbl,
            shipPer,
            theTripALJOR);

         return;
         }

      case  SUPPLY_VOL_PIP:
         {
         getPartAttPgg (
            witGetDemandSupplyVolPipDbl,
            shipPer,
            theTripALJOR);

         return;
         }

      case    EXEC_VOL_CP:
         {
         getOperationAttPgg (
            witGetDemandExecVolPeggingDbl,
            shipPer,
            theTripALJOR);

         return;
         }

      case     SUB_VOL_CP:
         {
         getSubstituteAttPgg (
            witGetDemandSubVolPeggingDbl,
            shipPer,
            theTripALJOR);

         return;
         }
      }

   EXCEPTION_ASSERT (false);
   }

//------------------------------------------------------------------------------

void WitJ::Demand::setDemandName (const char * theDemandNameCStr)
   {
   witSetDemandDemandName (
      getWitRun     (),
      getPartName   (),
      getDemandName (),
      theDemandNameCStr);

   myDemandName_ = theDemandNameCStr;
   }

//------------------------------------------------------------------------------

const char * WitJ::Demand::getPartName ()
   {
   return myPart_->getPartName ();
   }

//------------------------------------------------------------------------------

double WitJ::Demand::incHeurAlloc (int shipPeriod, double desIncVol)
   {
   double incVol;

   witIncHeurAllocDbl (
      getWitRun     (),
      getPartName   (),
      getDemandName (),
      shipPeriod,
      desIncVol,
    & incVol);

   return incVol;
   }

//------------------------------------------------------------------------------

const char * WitJ::Demand::getDemandName ()
   {
   return myDemandName_.c_str ();
   }

//------------------------------------------------------------------------------

void WitJ::Demand::getPartAttPgg (
      WIT_DECLSPEC witReturnCode STDCALL (* thePeggingFunc) (
         WitRun * const,
         const char * const,
         const char * const,
         const int,
         int *,
         char * * *,
         int * *,
         double * *),
      int                  shipPer,
      PeggingTripleALJOR & thePartATALJOR)
   {
   int      nTriples;
   char * * partNameCVec;
   int *    thePeriodCVec;
   double * theVolumeCVec;
   int      theIdx;
   Part *   thePart;

   thePeggingFunc (
      getWitRun     (),
      getPartName   (),
      getDemandName (),
      shipPer,
    & nTriples,
    & partNameCVec,
    & thePeriodCVec,
    & theVolumeCVec);

   thePartATALJOR.clearAndAllocate (nTriples);

   for (theIdx = 0; theIdx < nTriples; theIdx ++)
      {
      thePart = getCoordinator ()->findPart (partNameCVec[theIdx]);

      thePartATALJOR.
         add (
            thePart,
            thePeriodCVec[theIdx],
            theVolumeCVec[theIdx]);
      }

   freeWitStrVec (partNameCVec, nTriples);

   witFree       (thePeriodCVec);
   witFree       (theVolumeCVec);
   }

//------------------------------------------------------------------------------

void WitJ::Demand::getOperationAttPgg (
      WIT_DECLSPEC witReturnCode STDCALL (* thePeggingFunc) (
         WitRun * const,
         const char * const,
         const char * const,
         const int,
         int *,
         char * * *,
         int * *,
         double * *),
      int                  shipPer,
      PeggingTripleALJOR & theOpnATALJOR)
   {
   int         nTriples;
   char * *    opnNameCVec;
   int *       thePeriodCVec;
   double *    theVolumeCVec;
   int         theIdx;
   Operation * theOpn;

   thePeggingFunc (
      getWitRun     (),
      getPartName   (),
      getDemandName (),
      shipPer,
    & nTriples,
    & opnNameCVec,
    & thePeriodCVec,
    & theVolumeCVec);

   theOpnATALJOR.clearAndAllocate (nTriples);

   for (theIdx = 0; theIdx < nTriples; theIdx ++)
      {
      theOpn = getCoordinator ()->findOperation (opnNameCVec[theIdx]);

      theOpnATALJOR.
         add (
            theOpn,
            thePeriodCVec[theIdx],
            theVolumeCVec[theIdx]);
      }

   freeWitStrVec (opnNameCVec, nTriples);

   witFree       (thePeriodCVec);
   witFree       (theVolumeCVec);
   }

//------------------------------------------------------------------------------

void WitJ::Demand::getSubstituteAttPgg (
      WIT_DECLSPEC witReturnCode STDCALL (* thePeggingFunc) (
         WitRun * const,
         const char * const,
         const char * const,
         const int,
         int *,
         char * * *,
         int * *,
         int * *,
         int * *,
         double * *),
      int                  shipPer,
      PeggingTripleALJOR & theSubATALJOR)
   {
   int          nTriples;
   char * *     opnNameCVec;
   int *        theBomIdxCVec;
   int *        theSubIdxCVec;
   int *        thePeriodCVec;
   double *     theVolumeCVec;
   int          theIdx;
   Substitute * theSub;

   thePeggingFunc (
      getWitRun     (),
      getPartName   (),
      getDemandName (),
      shipPer,
    & nTriples,
    & opnNameCVec,
    & theBomIdxCVec,
    & theSubIdxCVec,
    & thePeriodCVec,
    & theVolumeCVec);

   theSubATALJOR.clearAndAllocate (nTriples);

   for (theIdx = 0; theIdx < nTriples; theIdx ++)
      {
      theSub =
         getCoordinator ()->
            findSubstitute (
               opnNameCVec  [theIdx],
               theBomIdxCVec[theIdx],
               theSubIdxCVec[theIdx]);

      theSubATALJOR.
         add (
            theSub,
            thePeriodCVec[theIdx],
            theVolumeCVec[theIdx]);
      }

   freeWitStrVec (opnNameCVec, nTriples);

   witFree       (theBomIdxCVec);
   witFree       (theSubIdxCVec);
   witFree       (thePeriodCVec);
   witFree       (theVolumeCVec);
   }

//------------------------------------------------------------------------------

void WitJ::Demand::getBopEntryAttPgg (
      WIT_DECLSPEC witReturnCode STDCALL (* thePeggingFunc) (
         WitRun * const,
         const char * const,
         const char * const,
         const int,
         int *,
         char * * *,
         int * *,
         int * *,
         double * *),
      int                  shipPer,
      PeggingTripleALJOR & theBopEntATALJOR)
   {
   int        nTriples;
   char * *   opnNameCVec;
   int *      theBopIdxCVec;
   int *      thePeriodCVec;
   double *   theVolumeCVec;
   int        theIdx;
   BopEntry * theBopEnt;

   thePeggingFunc (
      getWitRun     (),
      getPartName   (),
      getDemandName (),
      shipPer,
    & nTriples,
    & opnNameCVec,
    & theBopIdxCVec,
    & thePeriodCVec,
    & theVolumeCVec);

   theBopEntATALJOR.clearAndAllocate (nTriples);

   for (theIdx = 0; theIdx < nTriples; theIdx ++)
      {
      theBopEnt =
         getCoordinator ()->
            findBopEntry (
               opnNameCVec  [theIdx],
               theBopIdxCVec[theIdx]);

      theBopEntATALJOR.
         add (
            theBopEnt,
            thePeriodCVec[theIdx],
            theVolumeCVec[theIdx]);
      }

   freeWitStrVec (opnNameCVec, nTriples);

   witFree       (theBopIdxCVec);
   witFree       (thePeriodCVec);
   witFree       (theVolumeCVec);
   }
@


1.65
log
@copyComponentData
@
text
@a13 1
#include  <WitVecOwner.h>
d15 1
d89 7
a95 7
      WitVecOwner <double> & hardLBWVO,
      WitVecOwner <double> & softLBWVO,
      WitVecOwner <double> & hardUBWVO)
   {
   double * hardLBWitVec;
   double * softLBWitVec;
   double * hardUBWitVec;
d101 11
a111 7
    & hardLBWitVec,
    & softLBWitVec,
    & hardUBWitVec);

   hardLBWVO.acquireWitVec (hardLBWitVec);
   softLBWVO.acquireWitVec (softLBWitVec);
   hardUBWVO.acquireWitVec (hardUBWitVec);
@


1.64
log
@Changed name of class AllocTriple to PeggingTriple.
@
text
@d112 17
@


1.63
log
@ArrayListJOR
@
text
@d125 3
a127 3
      int                thePggAttIdx,
      int                shipPer,
      AllocTripleALJOR & theTripALJOR)
d285 2
a286 2
      int                shipPer,
      AllocTripleALJOR & thePartATALJOR)
d336 2
a337 2
      int                shipPer,
      AllocTripleALJOR & theOpnATALJOR)
d389 2
a390 2
      int                shipPer,
      AllocTripleALJOR & theSubATALJOR)
d452 2
a453 2
      int                shipPer,
      AllocTripleALJOR & theBopEntATALJOR)
@


1.62
log
@Multi-Obj Mode
@
text
@d8 8
a15 8
#include         <Demand.h>
#include           <Part.h>
#include      <Operation.h>
#include     <Substitute.h>
#include       <BopEntry.h>
#include    <Coordinator.h>
#include <AllocTripleVec.h>
#include    <WitVecOwner.h>
d125 3
a127 3
      int              thePggAttIdx,
      int              shipPer,
      AllocTripleVec * theTripleVec)
d135 1
a135 1
      case    CONS_VOL_PIP:
d140 1
a140 1
            theTripleVec);
d150 1
a150 1
            theTripleVec);
d160 1
a160 1
            theTripleVec);
d170 1
a170 1
            theTripleVec);
d180 1
a180 1
            theTripleVec);
d190 1
a190 1
            theTripleVec);
d200 1
a200 1
            theTripleVec);
d210 1
a210 1
            theTripleVec);
d220 1
a220 1
            theTripleVec);
d276 1
a276 1
       WIT_DECLSPEC witReturnCode STDCALL (* thePggFunc) (
d285 2
a286 2
      int              shipPer,
      AllocTripleVec * theTripleVec)
d288 6
a293 6
   int       nTriples;
   char * *  partNameWitStrVec;
   int *     thePeriodWitVec;
   double *  theVolumeWitVec;
   int       theIdx;
   Part *    thePart;
d295 1
a295 1
   thePggFunc (
d301 5
a305 7
    & partNameWitStrVec,
    & thePeriodWitVec,
    & theVolumeWitVec);

   theTripleVec->resize              (nTriples);
   theTripleVec->acquirePeriodWitVec (thePeriodWitVec);
   theTripleVec->acquireVolumeWitVec (theVolumeWitVec);
d309 1
a309 1
      thePart = getCoordinator ()->findPart (partNameWitStrVec[theIdx]);
d311 5
a315 1
      theTripleVec->setComponent (theIdx, thePart);
d318 4
a321 1
   freeWitStrVec (partNameWitStrVec, nTriples);
d327 1
a327 1
       WIT_DECLSPEC witReturnCode STDCALL (* thePggFunc) (
d336 2
a337 2
      int              shipPer,
      AllocTripleVec * theTripleVec)
d340 3
a342 3
   char * *    opnNameWitStrVec;
   int *       thePeriodWitVec;
   double *    theVolumeWitVec;
d346 1
a346 1
   thePggFunc (
d352 5
a356 7
    & opnNameWitStrVec,
    & thePeriodWitVec,
    & theVolumeWitVec);

   theTripleVec->resize              (nTriples);
   theTripleVec->acquirePeriodWitVec (thePeriodWitVec);
   theTripleVec->acquireVolumeWitVec (theVolumeWitVec);
d360 1
a360 1
      theOpn = getCoordinator ()->findOperation (opnNameWitStrVec[theIdx]);
d362 8
a369 2
      theTripleVec->setComponent (theIdx, theOpn);
      }     
d371 2
a372 1
   freeWitStrVec (opnNameWitStrVec, nTriples);
d378 1
a378 1
       WIT_DECLSPEC witReturnCode STDCALL (* thePggFunc) (
d389 2
a390 2
      int              shipPer,
      AllocTripleVec * theTripleVec)
d393 5
a397 5
   char * *     opnNameWitStrVec;
   int *        bomIdxWitVec;
   int *        subIdxWitVec;
   int *        thePeriodWitVec;
   double *     theVolumeWitVec;
d401 1
a401 1
   thePggFunc (
d407 7
a413 9
    & opnNameWitStrVec,
    & bomIdxWitVec,
    & subIdxWitVec,
    & thePeriodWitVec,
    & theVolumeWitVec);

   theTripleVec->resize              (nTriples);
   theTripleVec->acquirePeriodWitVec (thePeriodWitVec);
   theTripleVec->acquireVolumeWitVec (theVolumeWitVec);
d420 17
a436 10
               opnNameWitStrVec[theIdx],
               bomIdxWitVec    [theIdx],
               subIdxWitVec    [theIdx]);

      theTripleVec->setComponent (theIdx, theSub);
      }     

   witFree       (subIdxWitVec);
   witFree       (bomIdxWitVec);
   freeWitStrVec (opnNameWitStrVec, nTriples);
d442 1
a442 1
       WIT_DECLSPEC witReturnCode STDCALL (* thePggFunc) (
d452 2
a453 2
      int              shipPer,
      AllocTripleVec * theTripleVec)
d456 4
a459 4
   char * *   opnNameWitStrVec;
   int *      bopIdxWitVec;
   int *      thePeriodWitVec;
   double *   theVolumeWitVec;
d463 1
a463 1
   thePggFunc (
d469 6
a474 8
    & opnNameWitStrVec,
    & bopIdxWitVec,
    & thePeriodWitVec,
    & theVolumeWitVec);

   theTripleVec->resize              (nTriples);
   theTripleVec->acquirePeriodWitVec (thePeriodWitVec);
   theTripleVec->acquireVolumeWitVec (theVolumeWitVec);
d481 9
a489 2
               opnNameWitStrVec[theIdx],
               bopIdxWitVec    [theIdx]);
d491 1
a491 2
      theTripleVec->setComponent (theIdx, theBopEnt);
      }     
d493 3
a495 2
   witFree       (bopIdxWitVec);
   freeWitStrVec (opnNameWitStrVec, nTriples);
@


1.61
log
@Multi-Obj Mode
@
text
@d15 1
a15 1
#include         <VecWoa.h>
d89 3
a91 3
      VecWoa <double> & hardLBWoa,
      VecWoa <double> & softLBWoa,
      VecWoa <double> & hardUBWoa)
d105 3
a107 3
   hardLBWoa.acquireWitVec (hardLBWitVec);
   softLBWoa.acquireWitVec (softLBWitVec);
   hardUBWoa.acquireWitVec (hardUBWitVec);
@


1.60
log
@Multi-Obj Mode
@
text
@a15 1
#include      <StrVecWoa.h>
d289 1
a289 1
   StrVecWoa partNameVecWoa (nTriples);
d301 1
a301 1
      partNameVecWoa.getCVecAddr (),
d311 1
a311 1
      thePart = getCoordinator ()->findPart (partNameVecWoa[theIdx]);
d314 3
a316 1
      }     
d335 1
a335 1
   StrVecWoa   opnNameVecWoa (nTriples);
d347 1
a347 1
      opnNameVecWoa.getCVecAddr (),
d357 1
a357 1
      theOpn = getCoordinator ()->findOperation (opnNameVecWoa[theIdx]);
d361 2
d383 1
a383 1
   StrVecWoa    opnNameVecWoa (nTriples);
d397 1
a397 1
      opnNameVecWoa.getCVecAddr (),
d412 3
a414 3
               opnNameVecWoa[theIdx],
               bomIdxWitVec [theIdx],
               subIdxWitVec [theIdx]);
d419 3
a421 2
   witFree (subIdxWitVec);
   witFree (bomIdxWitVec);
d441 1
a441 1
   StrVecWoa  opnNameVecWoa (nTriples);
d454 1
a454 1
      opnNameVecWoa.getCVecAddr (),
d468 2
a469 2
               opnNameVecWoa[theIdx],
               bopIdxWitVec [theIdx]);
d474 2
a475 1
   witFree (bopIdxWitVec);
@


1.59
log
@Multi-Obj Mode
@
text
@d94 3
a96 3
   double * hardLBCVec;
   double * softLBCVec;
   double * hardUBCVec;
d102 7
a108 7
    & hardLBCVec,
    & softLBCVec,
    & hardUBCVec);

   hardLBWoa.acquire (hardLBCVec);
   softLBWoa.acquire (softLBCVec);
   hardUBWoa.acquire (hardUBCVec);
d291 2
a292 2
   int *     thePeriodCVec;
   double *  theVolumeCVec;
d303 2
a304 2
    & thePeriodCVec,
    & theVolumeCVec);
d306 3
a308 1
   theTripleVec->acquireData (nTriples, thePeriodCVec, theVolumeCVec);
d335 2
a336 2
   int *       thePeriodCVec;
   double *    theVolumeCVec;
d347 2
a348 2
    & thePeriodCVec,
    & theVolumeCVec);
d350 3
a352 1
   theTripleVec->acquireData (nTriples, thePeriodCVec, theVolumeCVec);
d381 4
a384 4
   int *        bomIdxCVec;
   int *        subIdxCVec;
   int *        thePeriodCVec;
   double *     theVolumeCVec;
d395 8
a402 6
    & bomIdxCVec,
    & subIdxCVec,
    & thePeriodCVec,
    & theVolumeCVec);

   theTripleVec->acquireData (nTriples, thePeriodCVec, theVolumeCVec);
d410 2
a411 2
               bomIdxCVec   [theIdx],
               subIdxCVec   [theIdx]);
d416 2
a417 2
   witFree (subIdxCVec);
   witFree (bomIdxCVec);
d438 3
a440 3
   int *      bopIdxCVec;
   int *      thePeriodCVec;
   double *   theVolumeCVec;
d451 7
a457 5
    & bopIdxCVec,
    & thePeriodCVec,
    & theVolumeCVec);

   theTripleVec->acquireData (nTriples, thePeriodCVec, theVolumeCVec);
d465 1
a465 1
               bopIdxCVec   [theIdx]);
d470 1
a470 1
   witFree (bopIdxCVec);
@


1.58
log
@Changed handling of Lists of AllocTriples to avoid call-backs.
@
text
@d94 4
d99 10
a108 6
      getWitRun             (),
      getPartName           (),
      getDemandName         (),
      hardLBWoa.getCVecAddr (),
      softLBWoa.getCVecAddr (),
      hardUBWoa.getCVecAddr ());
d289 1
a289 1
   int       nTriples       (0);
d291 2
d302 3
a304 3
      partNameVecWoa     .getCVecAddr (),
      theTripleVec->getPeriodCVecAddr (),
      theTripleVec->getVolumeCVecAddr ());
d306 1
a306 1
   theTripleVec->setNTriples (nTriples);
d331 1
a331 1
   int         nTriples      (0);
d333 2
d344 3
a346 3
      opnNameVecWoa      .getCVecAddr (),
      theTripleVec->getPeriodCVecAddr (),
      theTripleVec->getVolumeCVecAddr ());
d348 1
a348 1
   theTripleVec->setNTriples (nTriples);
d375 1
a375 1
   int          nTriples      (0);
d377 4
a380 2
   VecWoa <int> bomIdxVecWoa;
   VecWoa <int> subIdxVecWoa;
d390 5
a394 5
      opnNameVecWoa      .getCVecAddr (),
      bomIdxVecWoa       .getCVecAddr (),
      subIdxVecWoa       .getCVecAddr (),
      theTripleVec->getPeriodCVecAddr (),
      theTripleVec->getVolumeCVecAddr ());
d396 1
a396 1
   theTripleVec->setNTriples (nTriples);
d404 2
a405 2
                bomIdxVecWoa[theIdx],
                subIdxVecWoa[theIdx]);
d409 3
d430 7
a436 5
   int          nTriples      (0);
   StrVecWoa    opnNameVecWoa (nTriples);
   VecWoa <int> bopIdxVecWoa;
   int          theIdx;
   BopEntry *   theBopEnt;
d444 4
a447 4
      opnNameVecWoa      .getCVecAddr (),
      bopIdxVecWoa       .getCVecAddr (),
      theTripleVec->getPeriodCVecAddr (),
      theTripleVec->getVolumeCVecAddr ());
d449 1
a449 1
   theTripleVec->setNTriples (nTriples);
d457 1
a457 1
               bopIdxVecWoa [theIdx]);
d461 2
@


1.57
log
@Revised pegging methods.
@
text
@d8 9
a16 9
#include          <Demand.h>
#include            <Part.h>
#include       <Operation.h>
#include      <Substitute.h>
#include        <BopEntry.h>
#include     <Coordinator.h>
#include <AllocTripleList.h>
#include          <VecWoa.h>
#include       <StrVecWoa.h>
d118 3
a120 3
      int               thePggAttIdx,
      int               shipPer,
      AllocTripleList * theTripleList)
d132 2
a133 2
               shipPer,
               theTripleList);
d143 1
a143 1
            theTripleList);
d153 1
a153 1
            theTripleList);
d163 1
a163 1
            theTripleList);
d173 1
a173 1
            theTripleList);
d183 1
a183 1
            theTripleList);
d193 1
a193 1
            theTripleList);
d203 1
a203 1
            theTripleList);
d213 1
a213 1
            theTripleList);
d278 2
a279 2
      int               shipPer,
      AllocTripleList * theTripleList)
d281 4
a284 9
   int             nTriples       (0);
   StrVecWoa       partNameVecWoa (nTriples);
   VecWoa <int>    pegPerVecWoa;
   VecWoa <double> pegVolVecWoa;
   int             theIdx;
   const char *    partName;
   int             pegPer;
   double          pegVol;
   Part *          thePart;
d292 6
a297 6
      partNameVecWoa.getCVecAddr (),
      pegPerVecWoa  .getCVecAddr (),
      pegVolVecWoa  .getCVecAddr ());
      
   theTripleList->prepareForTriples (nTriples);
      
d300 1
a300 5
      partName = partNameVecWoa[theIdx];
      pegPer   = pegPerVecWoa  [theIdx];
      pegVol   = pegVolVecWoa  [theIdx];

      thePart  = getCoordinator ()->findPart (partName);
d302 1
a302 1
      theTripleList->addTriple (thePart, pegPer, pegVol);
d318 2
a319 2
      int               shipPer,
      AllocTripleList * theTripleList)
d321 4
a324 9
   int             nTriples      (0);
   StrVecWoa       opnNameVecWoa (nTriples);
   VecWoa <int>    pegPerVecWoa;
   VecWoa <double> pegVolVecWoa;
   int             theIdx;
   const char *    opnName;
   int             pegPer;
   double          pegVol;
   Operation *     theOpn;
d332 6
a337 6
      opnNameVecWoa.getCVecAddr (),
      pegPerVecWoa .getCVecAddr (),
      pegVolVecWoa .getCVecAddr ());
      
   theTripleList->prepareForTriples (nTriples);
      
d340 1
a340 5
      opnName = opnNameVecWoa[theIdx];
      pegPer  = pegPerVecWoa [theIdx];
      pegVol  = pegVolVecWoa [theIdx];

      theOpn  = getCoordinator ()->findOperation (opnName);
d342 1
a342 1
      theTripleList->addTriple (theOpn, pegPer, pegVol);
d360 2
a361 2
      int               shipPer,
      AllocTripleList * theTripleList)
d363 6
a368 13
   int             nTriples      (0);
   StrVecWoa       opnNameVecWoa (nTriples);
   VecWoa <int>    bomIdxVecWoa;
   VecWoa <int>    subIdxVecWoa;
   VecWoa <int>    pegPerVecWoa;
   VecWoa <double> pegVolVecWoa;
   int             theIdx;
   const char *    opnName;
   int             theBomIndex;
   int             theSubIndex;
   int             pegPer;
   double          pegVol;
   Substitute *    theSub;
d376 8
a383 8
      opnNameVecWoa.getCVecAddr (),
      bomIdxVecWoa .getCVecAddr (),
      subIdxVecWoa .getCVecAddr (),
      pegPerVecWoa .getCVecAddr (),
      pegVolVecWoa .getCVecAddr ());
      
   theTripleList->prepareForTriples (nTriples);
      
d386 6
a391 8
      opnName     = opnNameVecWoa[theIdx];
      theBomIndex = bomIdxVecWoa [theIdx];
      theSubIndex = subIdxVecWoa [theIdx];
      pegPer      = pegPerVecWoa [theIdx];
      pegVol      = pegVolVecWoa [theIdx];

      theSub      =
         getCoordinator ()->findSubstitute (opnName, theBomIndex, theSubIndex);
d393 1
a393 1
      theTripleList->addTriple (theSub, pegPer, pegVol);
d410 2
a411 2
      int               shipPer,
      AllocTripleList * theTripleList)
d413 5
a417 11
   int             nTriples      (0);
   StrVecWoa       opnNameVecWoa (nTriples);
   VecWoa <int>    bopIdxVecWoa;
   VecWoa <int>    pegPerVecWoa;
   VecWoa <double> pegVolVecWoa;
   int             theIdx;
   const char *    opnName;
   int             theBopIndex;
   int             pegPer;
   double          pegVol;
   BopEntry *      theBopEnt;
d425 7
a431 7
      opnNameVecWoa.getCVecAddr (),
      bopIdxVecWoa .getCVecAddr (),
      pegPerVecWoa .getCVecAddr (),
      pegVolVecWoa .getCVecAddr ());
      
   theTripleList->prepareForTriples (nTriples);
      
d434 5
a438 6
      opnName     = opnNameVecWoa[theIdx];
      theBopIndex = bopIdxVecWoa [theIdx];
      pegPer      = pegPerVecWoa [theIdx];
      pegVol      = pegVolVecWoa [theIdx];

      theBopEnt   = getCoordinator ()->findBopEntry (opnName, theBopIndex);
d440 1
a440 1
      theTripleList->addTriple (theBopEnt, pegPer, pegVol);
@


1.56
log
@Moved findInstsnce functions into class Component.
@
text
@d4 1
a4 1
// Contains the declaration    of enum  PggAttID
d19 1
a19 1
// Enum PggAttID
d26 1
a26 1
enum PggAttID
d28 9
a36 9
      CONS_VOL_PIP  = 0,
   CO_EXEC_VOL_PIP  = 1,
      EXEC_VOL_PIP  = 2,
      PROD_VOL_PIP  = 3,
      SIDE_VOL_PIP  = 4,
       SUB_VOL_PIP  = 5,
    SUPPLY_VOL_PIP  = 6,
      EXEC_VOL_CPEG = 7,
       SUB_VOL_CPEG = 8,
d122 1
a122 1
   PggAttID thePggAttID;
d124 1
a124 1
   thePggAttID = static_cast <PggAttID> (thePggAttIdx);
d126 1
a126 1
   switch (thePggAttID)
d198 1
a198 1
      case    EXEC_VOL_CPEG:
d208 1
a208 1
      case     SUB_VOL_CPEG:
@


1.55
log
@Moved restoreInstance functions from the Component classes to class
   Coordinator.
@
text
@d15 1
a15 1
#include       <StringWoa.h>
a16 1
#include      <JavaObjRep.h>
a243 18
WitJ::Demand * WitJ::Demand::findInstance (
      Coordinator * theCoord,
      const char *  thePartName,
      const char *  theDemandName)
   {
   void * theAppData;

   witGetDemandAppData (
      theCoord->getWitRun (),
      thePartName,
      theDemandName,
    & theAppData);

   return static_cast <Demand *> (theAppData);
   }

//------------------------------------------------------------------------------

d309 1
a309 1
      thePart  = Part::findInstance (getCoordinator (), partName);
d358 1
a358 1
      theOpn  = Operation::findInstance (getCoordinator (), opnName);
d417 2
a418 6
      theSub =
         Substitute::findInstance (
            getCoordinator (),
            opnName,
            theBomIndex,
            theSubIndex);
d472 1
a472 2
      theBopEnt   =
         BopEntry::findInstance (getCoordinator (), opnName, theBopIndex);
@


1.54
log
@Moved Component extraction functions to class Coordinator.
Removed debugging output code from createMyCppCoordinator implementation.
@
text
@a244 22
void WitJ::Demand::restoreInstance (Coordinator * theCoord)
   {
   StringWoa thePartNameWoa;
   StringWoa theDemandNameWoa;
   Demand *  theDemand;

   witGetObjItrDemand (
      theCoord       ->getWitRun   (),
      thePartNameWoa  .getCStrAddr (),
      theDemandNameWoa.getCStrAddr ());

   theDemand =
      findInstance (
         theCoord,
         thePartNameWoa  .getCString (),
         theDemandNameWoa.getCString ());

   theDemand->setWasDeletedInWit (false);
   }

//------------------------------------------------------------------------------

@


1.53
log
@Detection of non-UTF-8.
@
text
@a244 20
void WitJ::Demand::extractInstance (Coordinator * theCoord)
   {
   StringWoa thePartNameWoa;
   StringWoa theDemandNameWoa;
   Part *    thePart;

   witGetObjItrDemand (
      theCoord->getWitRun (),
      thePartNameWoa  .getCStrAddr (),
      theDemandNameWoa.getCStrAddr ());

   thePart = Part::findInstance (theCoord, thePartNameWoa.getCString ());

   theCoord->verifyUTF8 (theDemandNameWoa.getCString ());

   JavaObjRep::makeDemand (thePart, theDemandNameWoa.getCString ());
   }

//------------------------------------------------------------------------------

@


1.52
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d258 2
@


1.51
log
@purgeData
@
text
@d49 1
a49 1
      Element       (thePart->getCoordinator ()),
@


1.50
log
@purgeData
@
text
@d263 1
a263 1
void WitJ::Demand::preserveInstance (Coordinator * theCoord)
@


1.49
log
@purgeData
@
text
@d280 1
a280 1
   theDemand->setToBeShutDown (false);
@


1.48
log
@purgeData
@
text
@d15 1
a15 1
#include          <VecWoa.h>
d253 2
a254 2
      thePartNameWoa  .getCVecAddr (),
      theDemandNameWoa.getCVecAddr ());
d256 1
a256 1
   thePart = Part::findInstance (theCoord, thePartNameWoa.getCVec ());
d258 1
a258 1
   JavaObjRep::makeDemand (thePart, theDemandNameWoa.getCVec ());
d271 2
a272 2
      thePartNameWoa  .getCVecAddr (),
      theDemandNameWoa.getCVecAddr ());
d277 2
a278 2
         thePartNameWoa  .getCVec (),
         theDemandNameWoa.getCVec ());
@


1.47
log
@purgeData
@
text
@d256 1
a256 1
   thePart = theCoord->findPart (thePartNameWoa.getCVec ());
d275 4
a278 4
      theCoord->
         findDemand (
            thePartNameWoa  .getCVec (),
            theDemandNameWoa.getCVec ());
d285 18
d368 1
a368 1
      thePart  = getCoordinator ()->findPart (partName);
d417 1
a417 1
      theOpn  = getCoordinator ()->findOperation (opnName);
d476 6
a481 3
      theSub      =
         getCoordinator ()->
            findSubstitute (opnName, theBomIndex, theSubIndex);
d535 2
a536 1
      theBopEnt   = getCoordinator ()->findBopEntry (opnName, theBopIndex);
@


1.46
log
@purgeData
@
text
@d263 22
@


1.45
log
@Removed C++ class Extractor.
@
text
@d17 1
d245 18
@


1.44
log
@PIP.
@
text
@d52 1
a52 1
   if (! getExtractMode ())
@


1.43
log
@Concurrent pegging.
@
text
@d4 1
d19 24
d118 1
a118 1
      PggAttID          thePggAttID,
d122 4
@


1.42
log
@Pegging
@
text
@d101 4
a104 1
         getPartAttPgg (witGetDemandConsVolPipDbl, shipPer, theTripleList);
d121 4
a124 1
         getOperationAttPgg (witGetDemandExecVolPipDbl, shipPer, theTripleList);
d131 4
a134 1
         getPartAttPgg (witGetDemandProdVolPipDbl, shipPer, theTripleList);
d141 4
a144 1
         getPartAttPgg (witGetDemandSideVolPipDbl, shipPer, theTripleList);
d151 4
a154 1
         getSubstituteAttPgg (witGetDemandSubVolPipDbl, shipPer, theTripleList);
d161 24
a184 1
         getPartAttPgg (witGetDemandSupplyVolPipDbl, shipPer, theTripleList);
@


1.41
log
@Pegging
@
text
@d93 1
a93 1
      PeggingAttID      thePeggingAttID,
d97 1
a97 1
   switch (thePeggingAttID)
@


1.40
log
@Pegging
@
text
@d92 1
a92 1
void WitJ::Demand::getPip (
@


1.39
log
@PIP.
@
text
@d101 1
a101 1
         getPartAttPip (witGetDemandConsVolPipDbl, shipPer, theTripleList);
d108 4
a111 1
         getCoExecVolPip (shipPer, theTripleList);
d118 1
a118 1
         getExecVolPip (shipPer, theTripleList);
d125 1
a125 1
         getPartAttPip (witGetDemandProdVolPipDbl, shipPer, theTripleList);
d132 1
a132 1
         getPartAttPip (witGetDemandSideVolPipDbl, shipPer, theTripleList);
d139 1
a139 1
         getSubVolPip (shipPer, theTripleList);
d146 1
a146 1
         getPartAttPip (witGetDemandSupplyVolPipDbl, shipPer, theTripleList);
d201 10
a210 1
void WitJ::Demand::getCoExecVolPip (
d214 4
a217 5
   int             nTriples      (0);
   StrVecWoa       opnNameVecWoa (nTriples);
   VecWoa <int>    bopIdxVecWoa;
   VecWoa <int>    execPerVecWoa;
   VecWoa <double> pgdCoExecVolVecWoa;
d219 4
a222 5
   const char *    opnName;
   int             theBopIndex;
   int             execPer;
   double          pgdCoExecVol;
   BopEntry *      theBopEnt;
d224 1
a224 1
   witGetDemandCoExecVolPipDbl (
d230 3
a232 4
      opnNameVecWoa     .getCVecAddr (),
      bopIdxVecWoa      .getCVecAddr (),
      execPerVecWoa     .getCVecAddr (),
      pgdCoExecVolVecWoa.getCVecAddr ());
d238 3
a240 4
      opnName      = opnNameVecWoa     [theIdx];
      theBopIndex  = bopIdxVecWoa      [theIdx];
      execPer      = execPerVecWoa     [theIdx];
      pgdCoExecVol = pgdCoExecVolVecWoa[theIdx];
d242 1
a242 1
      theBopEnt    = getCoordinator ()->findBopEntry (opnName, theBopIndex);
d244 1
a244 1
      theTripleList->addTriple (theBopEnt, execPer, pgdCoExecVol);
d250 12
a261 1
void WitJ::Demand::getExecVolPip (int shipPer, AllocTripleList * theTripleList)
d265 2
a266 2
   VecWoa <int>    execPerVecWoa;
   VecWoa <double> pgdExecVolVecWoa;
d269 2
a270 2
   int             execPer;
   double          pgdExecVol;
d273 1
a273 1
   witGetDemandExecVolPipDbl (
d279 3
a281 3
      opnNameVecWoa   .getCVecAddr (),
      execPerVecWoa   .getCVecAddr (),
      pgdExecVolVecWoa.getCVecAddr ());
d287 3
a289 3
      opnName    = opnNameVecWoa   [theIdx];
      execPer    = execPerVecWoa   [theIdx];
      pgdExecVol = pgdExecVolVecWoa[theIdx];
d291 1
a291 1
      theOpn     = getCoordinator ()->findOperation (opnName);
d293 1
a293 1
      theTripleList->addTriple (theOpn, execPer, pgdExecVol);
d299 12
a310 1
void WitJ::Demand::getSubVolPip (
d318 2
a319 2
   VecWoa <int>    execPerVecWoa;
   VecWoa <double> pgdSubVolVecWoa;
d324 2
a325 2
   int             execPer;
   double          pgdSubVol;
d328 1
a328 1
   witGetDemandSubVolPipDbl (
d334 5
a338 5
      opnNameVecWoa  .getCVecAddr (),
      bomIdxVecWoa   .getCVecAddr (),
      subIdxVecWoa   .getCVecAddr (),
      execPerVecWoa  .getCVecAddr (),
      pgdSubVolVecWoa.getCVecAddr ());
d344 5
a348 5
      opnName     = opnNameVecWoa  [theIdx];
      theBomIndex = bomIdxVecWoa   [theIdx];
      theSubIndex = subIdxVecWoa   [theIdx];
      execPer     = execPerVecWoa  [theIdx];
      pgdSubVol   = pgdSubVolVecWoa[theIdx];
d351 2
a352 1
         getCoordinator ()->findSubstitute (opnName, theBomIndex, theSubIndex);
d354 1
a354 1
      theTripleList->addTriple (theSub, execPer, pgdSubVol);
d360 2
a361 2
void WitJ::Demand::getPartAttPip (
       WIT_DECLSPEC witReturnCode STDCALL (* thePipFunc) (
d369 1
d374 3
a376 2
   int             nTriples       (0);
   StrVecWoa       partNameVecWoa (nTriples);
d380 2
a381 1
   const char *    partName;
d384 1
a384 1
   Part *          thePart;
d386 1
a386 1
   thePipFunc (
d392 4
a395 3
      partNameVecWoa.getCVecAddr (),
      pegPerVecWoa  .getCVecAddr (),
      pegVolVecWoa  .getCVecAddr ());
d401 4
a404 3
      partName = partNameVecWoa[theIdx];
      pegPer   = pegPerVecWoa  [theIdx];
      pegVol   = pegVolVecWoa  [theIdx];
d406 1
a406 1
      thePart  = getCoordinator ()->findPart (partName);
d408 1
a408 1
      theTripleList->addTriple (thePart, pegPer, pegVol);
@


1.38
log
@Added the AllocTripleList classes.
@
text
@d10 2
a16 2
#include             <wit.h>

d92 150
d280 3
a282 1
void WitJ::Demand::setDemandName (const char * theDemandNameCStr)
d284 15
a298 1
   witSetDemandDemandName (
d302 17
a318 1
      theDemandNameCStr);
d320 2
a321 2
   myDemandName_ = theDemandNameCStr;
   }
d323 2
a324 5
//------------------------------------------------------------------------------

const char * WitJ::Demand::getPartName ()
   {
   return myPart_->getPartName ();
d329 22
a350 3
double WitJ::Demand::incHeurAlloc (int shipPeriod, double desIncVol)
   {
   double incVol;
d352 1
a352 1
   witIncHeurAllocDbl (
d356 13
a368 3
      shipPeriod,
      desIncVol,
    & incVol);
d370 1
a370 2
   return incVol;
   }
d372 2
a373 5
//------------------------------------------------------------------------------

const char * WitJ::Demand::getDemandName ()
   {
   return myDemandName_.c_str ();
@


1.37
log
@Demand.getExecVolPip
@
text
@d7 7
a13 7
#include      <Demand.h>
#include        <Part.h>
#include   <Operation.h>
#include <Coordinator.h>
#include      <VecWoa.h>
#include   <StrVecWoa.h>
#include  <JavaObjRep.h>
d15 1
a15 1
#include         <wit.h>
d92 1
a92 1
void WitJ::Demand::getExecVolPip (int shipPer)
d114 1
a114 1
   JavaObjRep::prepAllocTripleList (getCoordinator (), nTriples);
d124 1
a124 1
      JavaObjRep::addAllocTriple (theOpn, execPer, pgdExecVol);
@


1.36
log
@PIP.
@
text
@d7 7
a13 3
#include <Demand.h>
#include   <Part.h>
#include <VecWoa.h>
d15 1
a15 1
#include   <wit.h>
d92 38
@


1.35
log
@Implemented getPipSeq.
@
text
@d76 12
@


1.34
log
@Removed eqHeurAllocTwme
@
text
@d66 6
a71 6
      getWitRun     (),
      getPartName   (),
      getDemandName (),
    & hardLBWoa,
    & softLBWoa,
    & hardUBWoa);
@


1.33
log
@Heuristic Allocation
@
text
@a112 21
double WitJ::Demand::incHeurAllocTwme (
      int    shipPeriod,
      double desIncVol,
      bool   asapMultiExec)
   {
   double incVol;

   witIncHeurAllocTwmeDbl (
      getWitRun     (),
      getPartName   (),
      getDemandName (),
      shipPeriod,
      desIncVol,
    & incVol,
      asapMultiExec);

   return incVol;
   }

//------------------------------------------------------------------------------

@


1.32
log
@Heuristic Allocation
@
text
@d113 21
@


1.31
log
@Implemented Java class CppGateway.
@
text
@d96 17
@


1.30
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d17 1
a17 4
WitJ::Demand::Demand (
         Part *       thePart,
         const char * theDemandNameCStr,
         JavaObjRep * theDemandJOR):
d19 1
a19 1
      Element       (thePart->getCoordinator (), theDemandJOR),
@


1.29
log
@ProbMgr classes.
@
text
@d22 1
a22 1
      Element       (thePart->getProbMgr (), theDemandJOR),
@


1.28
log
@Change the mname of the ProbCtr classes to ProbMgr in both Java and C++.
@
text
@a16 2
#include <Problem.h>

d22 1
a22 1
      Element       (thePart->getProblem ()->getProbMgr (), theDemandJOR),
@


1.27
log
@Continued implementation of the ProbCtr classes.
@
text
@d24 1
a24 1
      Element       (thePart->getProblem ()->getProbCtr (), theDemandJOR),
@


1.26
log
@Updated some comments.
@
text
@d17 2
d24 1
a24 1
      Element       (thePart->getProblem (), theDemandJOR),
@


1.25
log
@Removed C++ class Session.
@
text
@d4 1
a4 1
// Contains the definition of class Demand.
@


1.24
log
@Name change.
@
text
@d9 1
a9 1
#include  <VecWoa.h>
d11 1
a11 1
#include    <wit.h>
d22 1
a22 1
      Element       (thePart->getSession (), theDemandJOR),
@


1.23
log
@Changed name of Component to Entity.
@
text
@d22 1
a22 1
      Entity        (thePart->getSession (), theDemandJOR),
@


1.22
log
@Revised C++ class template VecWoa.
@
text
@d22 1
a22 1
      Component     (thePart->getSession (), theDemandJOR),
@


1.21
log
@Call-back infrastructure.
Implemented extraction of Demands.
@
text
@d69 6
a74 6
      getWitRun             (),
      getPartName           (),
      getDemandName         (),
      hardLBWoa.getCVecAddr (),
      softLBWoa.getCVecAddr (),
      hardUBWoa.getCVecAddr ());
@


1.20
log
@Extraction.
@
text
@d28 2
@


1.19
log
@Call-back infrastructure.
@
text
@d26 2
a27 4
   witAddDemand (
      getWitRun (),
      getPartName (),
      getDemandName ());
@


1.18
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@d19 2
a20 1
         const char * theDemandNameCStr):
d22 1
a22 1
      Component     (thePart->getSession ()),
@


1.17
log
@Added attribute cumShipBounds.
@
text
@d21 1
a21 1
      Component     (thePart->getProbCoord ()),
@


1.16
log
@"demandName" attribute.
@
text
@d7 3
a9 2
#include   <Demand.h>
#include     <Part.h>
d11 1
a11 1
#include      <wit.h>
d46 32
d81 2
a82 2
      getWitRun (),
      getPartName (),
@


1.15
log
@"operationName" attribute.
@
text
@d45 13
@


1.14
log
@Attributes.
@
text
@d18 1
a18 1
         const char * demandNameCStr):
d22 1
a22 1
      myDemandName_ (demandNameCStr)
@


1.13
log
@Removed some debugging output.
@
text
@d26 2
a27 2
      getPartCName (),
      getDemandCName ());
d45 1
a45 1
const char * WitJ::Demand::getPartCName ()
d47 1
a47 1
   return myPart_->getPartCName ();
d52 1
a52 1
const char * WitJ::Demand::getDemandCName ()
@


1.12
log
@Attributes.
@
text
@a11 2
#include <iostream>

a33 7
   std::cout
      << "\n"
      << "Destroying Demand \""
      << getDemandCName ()
      << "\" for Part \""
      << getPartCName ()
      << "\".\n";
@


1.11
log
@Accessor names.
@
text
@d47 1
a47 1
WitJ::Demand * WitJ::Demand::thisDemand ()
@


1.10
log
@Changed the names of access functions beginning with "my"
to begin with "get".
@
text
@d22 3
a24 3
      Component   (thePart->getProbCoord ()),
      myPart_     (thePart),
      demandName_ (demandNameCStr)
d29 1
a29 1
      demandCName ());
d39 1
a39 1
      << demandCName ()
d56 1
a56 1
   return myPart_->partCName ();
d61 1
a61 1
const char * WitJ::Demand::demandCName ()
d63 1
a63 1
   return demandName_.c_str ();
@


1.9
log
@Strings.
@
text
@d22 1
a22 1
      Component   (thePart->myProbCoord ()),
d27 2
a28 2
      myWitRun (),
      myPartCName (),
d41 1
a41 1
      << myPartCName ()
d54 1
a54 1
const char * WitJ::Demand::myPartCName ()
@


1.8
log
@Replaced class WitJ::String with class std::string.
@
text
@d28 2
a29 2
      myPartName ().c_str (),
      demandName_.c_str ());
d39 1
a39 1
      << demandName_
d41 1
a41 1
      << myPartName ()
d54 1
a54 1
const std::string & WitJ::Demand::myPartName ()
d56 8
a63 1
   return myPart_->partName ();
@


1.7
log
@Added myName_ to class Att.
@
text
@d28 2
a29 2
      myPartName (),
      demandName_);
d54 1
a54 1
const WitJ::String & WitJ::Demand::myPartName ()
@


1.6
log
@*** empty log message ***
@
text
@d38 1
a38 1
      << "Destroying WitJ::Demand \""
@


1.5
log
@*** empty log message ***
@
text
@d22 3
a24 3
      Component     (thePart->myProbCoord ()),
      demandedPart_ (thePart),
      demandName_   (demandNameCStr)
d28 1
a28 1
      demandedPartName (),
d41 1
a41 1
      << demandedPartName ()
d54 1
a54 1
const WitJ::String & WitJ::Demand::demandedPartName ()
d56 1
a56 1
   return demandedPart_->partName ();
@


1.4
log
@*** empty log message ***
@
text
@a46 7
void WitJ::Demand::getDerivedInstance (Demand * & theDemand)
   {
   theDemand = this;
   }

//------------------------------------------------------------------------------

@


1.3
log
@*** empty log message ***
@
text
@d20 1
a20 1
         const char * demandNameVal):
d24 1
a24 1
      demandName_   (demandNameVal)
@


1.2
log
@*** empty log message ***
@
text
@d54 7
@


1.1
log
@*** empty log message ***
@
text
@d7 2
a8 4
#include    <Demand.h>
#include      <Part.h>
#include     <CIJia.h>
#include <StringJia.h>
d10 1
a10 1
#include       <wit.h>
d12 1
a12 1
#include  <iostream>
d19 2
a20 2
         const CIJia <Part> & thePartJia,
         const StringJia &    demandNameJia):
d22 3
a24 3
      Component     (thePartJia   .myDerJAccObject ()->myProblem ()),
      demandedPart_ (thePartJia   .myDerJAccObject ()),
      demandName_   (demandNameJia.myCString       ())
@

