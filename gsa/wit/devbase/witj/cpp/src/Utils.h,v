head	1.15;
access;
symbols;
locks; strict;
comment	@ * @;


1.15
date	2010.06.08.20.36.00;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2010.04.20.16.36.58;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2010.04.16.00.08.32;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.04.21.20.56.07;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.04.13.22.19.44;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.02.03.23.18.07;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.02.03.21.31.10;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.02.03.19.01.03;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.24.20.40.54;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.24.20.34.22;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.22.16.29.12;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.27.16.34.06;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.26.19.18.07;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.18.21.28.18;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.20.54.12;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Removed cpuTime ().
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File Utils.h.
//
// Contains the declarations of various global utility functions within
// namespace WitJ.
//------------------------------------------------------------------------------

#ifndef Utils_h
#define Utils_h

namespace WitJ
{
bool equal (
      const char * theCString1,
      const char * theCString2);
   //
   // Returns true, if theCString1 and theCString2 are identical c-strings.

void freeWitStrVec (char * * theWitStrVec, int theLength);
   //
   // Assumes that theWitStrVec is a vector of c-strings allocated by WIT, whose
   // length is theLength.
   // Calls witFree on the c-strings and and the c-vector.

void exceptionAssertFailure (
      const char * srcFileName,
      int          lineNo);
   //
   // Throws an PreJavaException for a C++ assertion failure.

void abortingAssertFailure (
      const char * srcFileName,
      int          lineNo);
   //
   // Issues an error message for a assertion failure and then aborts the
   // program.
};
//
// End of namespace WitJ.

#endif
@


1.14
log
@Multi-Obj Mode
@
text
@a36 4

double cpuTime ();
   //
   // Returns the current cumulative CPU time of the program process in seconds.
@


1.13
log
@Multi-Obj Mode
@
text
@d19 6
@


1.12
log
@Aded temporary code to test the ability to measure CPU time.
@
text
@d17 1
a17 1
   // Returns true, if theCString1 and theCString2 are identical strings.
@


1.11
log
@Implemented C++ class PreJavaException.
@
text
@d31 4
@


1.10
log
@Part Category
@
text
@d23 1
a23 1
   // Throws an AssertException.
@


1.9
log
@OptInitMethod.
@
text
@d13 6
@


1.8
log
@Message Group by group name.
@
text
@a12 6
bool equal (
      const char * theCString1,
      const char * theCString2);
   //
   // Returns true, iff theCString1 and theCString2 are equal as strings.

@


1.7
log
@Replaced abortForMemory with throwAnyJavaException.
@
text
@d13 6
@


1.6
log
@Added code to handle memory errors in makeJString.
@
text
@a12 5
void abortForMemory (const char * funcName);
   //
   // Issues an error message for a memory error from the function indicated by
   // funcName and then aborts the program.

@


1.5
log
@Implemented EXCEPTION_ASSERT and ABORTING_ASSERT.
@
text
@a17 4
void abortWmsg (const char * errorText);
   //
   // Issues the error message given in errorText and then aborts the program.

@


1.4
log
@Initial implementation of self-test.
@
text
@d22 7
a28 1
void assertFailure (
@


1.3
log
@Attributes.
@
text
@d24 1
a24 2
      int          lineNo,
      const char * assertionString);
@


1.2
log
@Attributes.
@
text
@d21 8
@


1.1
log
@*** empty log message ***
@
text
@d8 2
a9 2
#ifndef UtilsH
#define UtilsH
@

