head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2011.04.15.21.02.16;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.13.21.50.32;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.13.16.00.12;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Class template ArrayJOR <E>
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Source File ArrayJOR.C.
//
// Contains the implementation of the following clases and templates:
//
//    ArrayJOR <E>
//    BoolArrayJOR
//    IntArrayJOR
//    DblArrayJOR
//------------------------------------------------------------------------------

#include    <ArrayJOR.h>
#include      <CORJOR.h>
#include <CTVecSupply.h>
#include   <Component.h>
#include <Coordinator.h>

//------------------------------------------------------------------------------
// Implementation of class template ArrayJOR <E>.
//------------------------------------------------------------------------------

template <typename E>
      WitJ::ArrayJOR <E>::ArrayJOR (
            _jarray *            theJArray,
            CORJOR <Component> & theCompCORJOR):

         JniClient      (getJNIEnv (theCompCORJOR)),
         myJArray_      (theJArray),
         myLength_      (0),
         myCTVecSupply_ (NULL),
         myCTVector_    (NULL)
   {
   if (theJArray != NULL)
      myLength_ = getJNIEnv ()->GetArrayLength (myJArray_);
   else
      myLength_ = 0;

   myCTVecSupply_ =
      theCompCORJOR.getCppObject ()->getCoordinator ()->getCTVecSupply ();
   }

//------------------------------------------------------------------------------

template <typename E>
      WitJ::ArrayJOR <E>::~ArrayJOR ()
   {
   if (myCTVector_ != NULL)
      {
      myCTVecSupply_->reclaimCTVec (myCTVector_);
      }
   }

//------------------------------------------------------------------------------

template <typename E>
      void * WitJ::ArrayJOR <E>::getVoidCVecCrit ()
   {
   void * theVoidCVec;

   theVoidCVec = getJNIEnv ()->GetPrimitiveArrayCritical (myJArray_, NULL);

   throwAnyJavaException ();

   return theVoidCVec;
   }

//------------------------------------------------------------------------------

template <typename E>
      E * WitJ::ArrayJOR <E>::acquiredCTVec ()
   {
   myCTVecSupply_->provideCTVec (myCTVector_);

   return myCTVector_;
   }

//------------------------------------------------------------------------------

template <typename E>
      void WitJ::ArrayJOR <E>::releaseJArrayCritAndCopy (void * theVoidCVec)
   {
   getJNIEnv ()->ReleasePrimitiveArrayCritical (myJArray_, theVoidCVec, 0);
   }

//------------------------------------------------------------------------------

template <typename E>
      void WitJ::ArrayJOR <E>::releaseJArrayCritDontCopy (void * theVoidCVec)
   {
   getJNIEnv ()->
      ReleasePrimitiveArrayCritical (myJArray_, theVoidCVec, JNI_ABORT);
   }

//------------------------------------------------------------------------------
// Implementation of class BoolArrayJOR.
//------------------------------------------------------------------------------

WitJ::BoolArrayJOR::BoolArrayJOR (
         _jbooleanArray *     theJBoolArray,
         CORJOR <Component> & theCompCORJOR):

      ArrayJOR <Boolean> (theJBoolArray, theCompCORJOR)
   {
   }

//------------------------------------------------------------------------------

WitJ::BoolArrayJOR::~BoolArrayJOR ()
   {
   }

//------------------------------------------------------------------------------

void WitJ::BoolArrayJOR::copyFrom (const Boolean * theBoolCVec)
   {
   jboolean * theJBoolCVec;
   int        theIdx;

   theJBoolCVec = static_cast <jboolean *> (getVoidCVecCrit ());

   for (theIdx = 0; theIdx < getLength (); theIdx ++)
      {
      theJBoolCVec[theIdx] = theBoolCVec[theIdx];
      }

   releaseJArrayCritAndCopy (theJBoolCVec);
   }

//------------------------------------------------------------------------------

const WitJ::Boolean * WitJ::BoolArrayJOR::getCTVec ()
   {
   jboolean * theJBoolCVec;
   Boolean *  theBoolCVec;
   int        theIdx;

   theJBoolCVec = static_cast <jboolean *> (getVoidCVecCrit ());

   theBoolCVec  = acquiredCTVec ();

   for (theIdx = 0; theIdx < getLength (); theIdx ++)
      {
      theBoolCVec[theIdx] = theJBoolCVec[theIdx];
      }

   releaseJArrayCritDontCopy (theJBoolCVec);

   return theBoolCVec;
   }

//------------------------------------------------------------------------------
// Implementation of class IntArrayJOR.
//------------------------------------------------------------------------------

WitJ::IntArrayJOR::IntArrayJOR (
         _jintArray *         theJIntArray,
         CORJOR <Component> & theCompCORJOR):

      ArrayJOR <int> (theJIntArray, theCompCORJOR)
   {
   }

//------------------------------------------------------------------------------

WitJ::IntArrayJOR::~IntArrayJOR ()
   {
   }

//------------------------------------------------------------------------------

void WitJ::IntArrayJOR::copyFrom (const int * theIntCVec)
   {
   jint * theJIntCVec;
   int    theIdx;

   theJIntCVec = static_cast <jint *> (getVoidCVecCrit ());

   for (theIdx = 0; theIdx < getLength (); theIdx ++)
      {
      theJIntCVec[theIdx] = theIntCVec[theIdx];
      }

   releaseJArrayCritAndCopy (theJIntCVec);
   }

//------------------------------------------------------------------------------

const int * WitJ::IntArrayJOR::getCTVec ()
   {
   jint * theJIntCVec;
   int *  theIntCVec;
   int    theIdx;

   theJIntCVec = static_cast <jint *> (getVoidCVecCrit ());

   theIntCVec  = acquiredCTVec ();

   for (theIdx = 0; theIdx < getLength (); theIdx ++)
      {
      theIntCVec[theIdx] = theJIntCVec[theIdx];
      }

   releaseJArrayCritDontCopy (theJIntCVec);

   return theIntCVec;
   }

//------------------------------------------------------------------------------
// Implementation of class DblArrayJOR.
//------------------------------------------------------------------------------

WitJ::DblArrayJOR::DblArrayJOR (
         _jdoubleArray *      theJDblArray,
         CORJOR <Component> & theCompCORJOR):

      ArrayJOR <double> (theJDblArray, theCompCORJOR)
   {
   }

//------------------------------------------------------------------------------

WitJ::DblArrayJOR::~DblArrayJOR ()
   {
   }

//------------------------------------------------------------------------------

const double * WitJ::DblArrayJOR::getBoundCTVec ()
   {
   if (getLength () == 0)
      return NULL;
   else
      return getCTVec ();
   }

//------------------------------------------------------------------------------

void WitJ::DblArrayJOR::copyFrom (const double * theDblCVec)
   {
   jdouble * theJDblCVec;
   int       theIdx;

   theJDblCVec = static_cast <jdouble *> (getVoidCVecCrit ());

   for (theIdx = 0; theIdx < getLength (); theIdx ++)
      {
      theJDblCVec[theIdx] = theDblCVec[theIdx];
      }

   releaseJArrayCritAndCopy (theJDblCVec);
   }

//------------------------------------------------------------------------------

const double * WitJ::DblArrayJOR::getCTVec ()
   {
   jdouble * theJDblCVec;
   double *  theDblCVec;
   int       theIdx;

   theJDblCVec = static_cast <jdouble *> (getVoidCVecCrit ());

   theDblCVec  = acquiredCTVec ();

   for (theIdx = 0; theIdx < getLength (); theIdx ++)
      {
      theDblCVec[theIdx] = theJDblCVec[theIdx];
      }

   releaseJArrayCritDontCopy (theJDblCVec);

   return theDblCVec;
   }
@


1.2
log
@ArrayJOR classes
@
text
@d13 1
d23 3
a25 1
      WitJ::ArrayJOR <E>::ArrayJOR (_jarray * theJArray, JNIEnv * theJNIEnv):
d27 1
a27 1
         JniClient      (theJNIEnv),
d30 2
a31 2
         myCTVector_    (NULL),
         myCTVecSupply_ (NULL)
d37 3
d47 1
a47 1
   if (myCTVecSupply_ != NULL)
d70 1
a70 1
      E * WitJ::ArrayJOR <E>::acquireCTVec (Component * theComp)
a71 2
   myCTVecSupply_ = theComp->getCoordinator ()->getCTVecSupply ();

d99 2
a100 2
         _jbooleanArray * theJBoolArray,
         JNIEnv *         theJNIEnv):
d102 1
a102 1
      ArrayJOR <Boolean> (theJBoolArray, theJNIEnv)
d131 1
a131 1
const WitJ::Boolean * WitJ::BoolArrayJOR::getCTVec (Component * theComp)
d139 1
a139 1
   theBoolCVec  = acquireCTVec (theComp);
d155 3
a157 1
WitJ::IntArrayJOR::IntArrayJOR (_jintArray * theJIntArray, JNIEnv * theJNIEnv):
d159 1
a159 1
      ArrayJOR <int> (theJIntArray, theJNIEnv)
d188 1
a188 1
const int * WitJ::IntArrayJOR::getCTVec (Component * theComp)
d196 1
a196 1
   theIntCVec  = acquireCTVec (theComp);
d213 2
a214 2
         _jdoubleArray * theJDblArray,
         JNIEnv *        theJNIEnv):
d216 1
a216 1
      ArrayJOR <double> (theJDblArray, theJNIEnv)
d228 1
a228 1
const double * WitJ::DblArrayJOR::getBoundCTVec (Component * theComp)
d233 1
a233 1
      return getCTVec (theComp);
d255 1
a255 1
const double * WitJ::DblArrayJOR::getCTVec (Component * theComp)
d263 1
a263 1
   theDblCVec  = acquireCTVec (theComp);
@


1.1
log
@ArrayJOR classes
@
text
@d12 4
a15 1
#include <ArrayJOR.h>
d24 10
a33 5
         JniClient (theJNIEnv),
         myJArray_ (theJArray),
         myLength_ (0)
   {
   myLength_ = getJNIEnv ()->GetArrayLength (myJArray_);
d41 4
d64 12
d82 9
d126 22
d181 22
d222 10
d246 22
@

