head	1.41;
access;
symbols;
locks; strict;
comment	@ * @;


1.41
date	2011.04.07.19.07.38;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2011.04.06.20.34.25;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2011.04.05.22.25.39;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2011.04.01.23.25.00;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2011.03.28.15.27.42;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2011.03.25.22.49.12;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2011.03.24.15.26.26;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2011.03.23.20.30.05;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.03.22.20.17.21;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.02.25.16.06.47;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2010.04.13.23.46.42;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2009.10.07.22.43.38;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2009.10.06.16.38.55;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2009.05.29.17.59.38;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2009.04.17.19.51.58;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2009.04.16.21.08.38;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2009.04.15.23.33.26;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2009.04.15.22.14.55;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2009.04.15.21.11.57;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2009.04.14.16.17.17;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2009.04.09.19.26.41;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.04.09.16.28.30;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.03.26.19.22.23;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.03.17.21.08.01;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.03.13.19.32.17;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.03.13.16.36.06;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.03.12.22.45.17;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.05.19.09.17;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.02.27.23.12.29;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.02.27.18.44.24;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.02.27.15.41.53;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.02.26.22.46.57;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.02.21.01.00.56;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.02.18.22.10.21;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.02.17.17.23.49;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.02.14.00.51.28;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.02.03.16.51.23;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.31.00.56.25;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.29.22.06.37;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.23.18.46.53;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.21.21.43.21;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.41
log
@getExpCycle
@
text
@//------------------------------------------------------------------------------
// WIT-J C++ Header File Coordinator.h.
//
// Contains the declaration of class Coordinator.
//------------------------------------------------------------------------------

#ifndef Coordinator_h
#define Coordinator_h

#include <JavaAccObj.h>

//------------------------------------------------------------------------------
// Class Coordinator
//
// Facilitates interactions between the objects of a Problem.
// Owns the WitRun for a Problem.
//
// Class Hierarchy:
//
// JavaAccObj
//    Coordinator
//------------------------------------------------------------------------------

namespace WitJ
{
class Coordinator: public JavaAccObj
   {
   //---------------------------------------------------------------------------
   // Public member functions.
   //---------------------------------------------------------------------------

   public:

   explicit Coordinator ();
      //
      // Constructor.

   ~Coordinator ();
      //
      // Destructor.
   
   virtual Coordinator * asCoordinator ();
      //
      // Override from class JavaAccObj.

   void store (Problem * theProblem);
      //
      // Stores theProblem as myProblem_.
      // To be called exactly once.

   void recordCreatePartOpn ();
      //
      // Takes action appropriate when a Part or an Operation is created.

   void recordDeletePartOpn ();
      //
      // Takes action appropriate when a Part or an Operation is deleted.

   void extract (bool forReadData);
      //
      // Extracts the state of the WIT problem from the WitRun associated with
      // this Coordinator and copies it into the WIT-J Problem associated with
      // this Coordinator on both the Java side and the C++ side.
      // forReadData is true, iff this is being for for readData.

   void restoreAfterPurge ();
      //
      // Updates the state of WIT-J/C++ to match that of WIT just after a call
      // to witPurgeData.

   void clearData ();
      //
      // Restores this Coordinator to its default state.

   //---------------------------------------------------------------------------
   // populate functions
   //
   // Each of these functions populates the Java ArrayList represented by the
   // CompALJOR with the Components identified by the subsequent arguments, 
   // where theLength is taken to be the length of the list.
   //---------------------------------------------------------------------------

   void populate (
         CompALJOR <Part> &   thePartALJOR,
         const char * const * partNameCVec,
         int                  theLength);

   void populate (
         CompALJOR <Demand> & theDemandALJOR,
         const char * const * partNameCVec,
         const char * const * demandNameCVec,
         int                  theLength);

   void populate (
         CompALJOR <Operation> & theOpnALJOR,
         const char * const *    opnNameCVec,
         int                     theLength);

   //---------------------------------------------------------------------------
   // find{Component Class} functions
   //
   // Each of these functions:
   // * Finds and returns the instance of the indicated Component Class that's
   //   identified by the arguments.
   // * Has WIT verify that such an instance exists.
   //---------------------------------------------------------------------------

   Part *       findPart       (const char * thePartName);
   Demand *     findDemand     (const char * thePartName, 
                                const char * theDemandName);
   Operation *  findOperation  (const char * theOpnName);
   BomEntry *   findBomEntry   (const char * theOpnName,
                                int          theBomIndex);
   Substitute * findSubstitute (const char * theOpnName,
                                int          theBomIndex,
                                int          theSubIndex);
   BopEntry *   findBopEntry   (const char * theOpnName,
                                int          theBopIndex);

   //---------------------------------------------------------------------------
   // Accessors.
   //---------------------------------------------------------------------------

   inline WitRun * getWitRun ()
      {
      return myWitRun_;
      }

   inline Problem * getProblem ()
      {
      return myProblem_;
      }

   inline CTVecSupply * getCTVecSupply ()
      {
      EXCEPTION_ASSERT (myCTVecSupply_ != NULL);

      return myCTVecSupply_;
      }

   inline bool extractInProgress ()
      {
      return extractInProgress_;
      }

   //---------------------------------------------------------------------------
   // Private member functions.
   //---------------------------------------------------------------------------

   private:

   void verifyGlobalUTF8 ();
      //
      // Verifies that all global string attributes are UFT-8.

   void extractGlobalData ();
      //
      // Sets nPeriods as stored by both sides of WIT-J to the value stored in
      // the WitRun.

   void extractNonGlobalComps ();
      //
      // For each non-global Component in the WitRun, creates a matching
      // Component on both sides of WIT-J.

   //---------------------------------------------------------------------------
   // extract{Component Class} functions
   //
   // Each of these functions:
   // * Assumes that object iteration for the WitRun is currently positioned
   //   at an instance of the indicated Component Class.
   // * Creates an instance of the indicated Component Class on the Java side of
   //   of WIT-J and an instance on the C++ side, both matching the WIT object
   //   at which object iteration is currently positioned.
   //---------------------------------------------------------------------------

   void extractPart       ();
   void extractDemand     ();
   void extractOperation  ();
   void extractBomEntry   ();
   void extractSubstitute ();
   void extractBopEntry   ();

   //---------------------------------------------------------------------------
   // restore{Component Class} functions
   //
   // Each of these functions:
   // * Assumes that object iteration for the WitRun is currently positioned
   //   at an instance of the indicated Component Class.
   // * Updates the state of the Component to as appropriate just after a call
   //   to witPurgeData.
   //---------------------------------------------------------------------------

   void restorePart       ();
   void restoreDemand     ();
   void restoreOperation  ();
   void restoreBomEntry   ();
   void restoreSubstitute ();
   void restoreBopEntry   ();

   //---------------------------------------------------------------------------

   void verifyUTF8 (const char * theCString);
      //
      // Verifies that theCString is UFT-8 and throws a PreJavaException if not.
      // The verification is only done during extraction for readData.

   Coordinator              (const Coordinator &);
   Coordinator & operator = (const Coordinator &);
      //
      // Not implemented; prevents accidental copying and assignment.

   //---------------------------------------------------------------------------
   // Private member data.
   //---------------------------------------------------------------------------

   WitRun * myWitRun_;
      //
      // The WitRun owned by this Coordinator.

   Problem * myProblem_;
      //
      // The Problem for this Coordinator.

   int nPartsOpns_;
      //
      // # Parts + # Operations in the Problem for this Coordinator.

   CTVecSupply * myCTVecSupply_;
      //
      // The CTVecSupply that belongs to this Coordinator, if any;
      // otherwise NULL.
      // Specifically, myCTVecSupply_ is non-NULL, iff at least one Part or
      // Operation exists in the Problem.

   bool extractInProgress_;
      //
      // True, iff an extraction is currently in progress, i.e., iff the
      // extract () function is currently executing.

   bool extractForReadData_;
      //
      // True,  iff an extraction for readData is currently in progress
   };
};
//
// End of namespace WitJ.

#endif
@


1.40
log
@getPgdCritList
@
text
@d94 5
@


1.39
log
@Namespace JniUtil.
@
text
@d75 8
d87 6
a92 4
      //
      // Populates the Java ArrayList <Part> represented by thePartALJOR with
      // the Parts identified by partNameCVec, where theLength is taken to be
      // the length of the list.
@


1.38
log
@JniAsst
@
text
@d34 1
a34 1
   explicit Coordinator (JniAsst * theJniAsst);
a36 1
      // Takes ownership of theJniAsst.
a108 5
   inline JniAsst * getJniAsst ()
      {
      return myJniAsst_;
      }

a201 4
   JniAsst * const myJniAsst_;
      //
      // The JniAsst owned by this Coordinator.

@


1.37
log
@Removed some #includes.
@
text
@d34 1
a34 1
   explicit Coordinator ();
d37 1
d110 5
d208 4
@


1.36
log
@ArrayListJOR
@
text
@a11 2
#include     <vector>

@


1.35
log
@"populate" functions.
@
text
@a76 13
   //---------------------------------------------------------------------------
   // populate functions
   //
   // Each of these functions causes the first argument to become a list of the
   // {Component Class} instances identified by c-vector arguments, where the
   // last argument is taken to be the length of the list.
   //---------------------------------------------------------------------------

   void populate (
         std::vector <Part *> & thePartVec,
         const char * const *   partNameCStrVec,
         int                    theLength);

d78 7
a84 4
         std::vector <Demand *> & theDemandVec,
         const char * const *     partNameCStrVec,
         const char * const *     demandNameCStrVec,
         int                      theLength);
@


1.34
log
@AllocTripleALJOR
@
text
@d78 1
a78 1
   // find{Component Class}s functions
d85 1
a85 1
   void findParts (
d90 1
a90 1
   void findDemands (
@


1.33
log
@getCriticialList and eqHeurAlloc.
@
text
@d77 9
a85 1
   void copyInto (
d87 1
a87 1
         const char * const *   thePartNames,
d89 6
a94 3
      //
      // Causes thePartVec to become a list of the Parts identified by
      // thePartNames, where theLength is taken to be the length of the list.
@


1.32
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@d12 2
d77 8
@


1.31
log
@Multi-Obj Mode
@
text
@d46 1
a46 1
   void store (GlobalAspect * theGlobalAspect);
d48 2
a49 2
      // Stores theGlobalAspect as myGlobalAspect_.
      // Must be called exactly once.
d105 1
a105 1
   inline GlobalAspect * getGlobalAspect ()
d107 1
a107 1
      return myGlobalAspect_;
d137 1
a137 1
   void extractComponents ();
d197 1
a197 1
   GlobalAspect * myGlobalAspect_;
d199 1
a199 1
      // The GlobalAspect for this Coordinator.
@


1.30
log
@Removed synchronization of CoordinatorCOR ctor.
@
text
@d128 4
a135 1
      // Verifies that the value of the title attribute is UTF-8.
@


1.29
log
@Moved ctor synchronization logic from class Coordinator to class
CoordinatorCOR.
@
text
@a36 2
      // The first call to this ctor must not be asynchronous with any other
      // call to it, because it puts WIT into multiThread mode.
@


1.28
log
@Changed name of clear methods to clearData.
@
text
@d37 2
@


1.27
log
@theProblem.copyData (...).
@
text
@d71 1
a71 1
   void clear ();
@


1.26
log
@theProblem.clear ().
@
text
@d59 1
a59 1
   void extract ();
d64 1
a96 6

   void verifyUTF8 (const char * theCString);
      //
      // Verifies that theCString is UFT-8 and throws a PreJavaException is not.

   //---------------------------------------------------------------------------
d174 7
d213 4
@


1.25
log
@Moved findInstsnce functions into class Component.
@
text
@d70 4
@


1.24
log
@Moved restoreInstance functions from the Component classes to class
   Coordinator.
@
text
@d70 23
@


1.23
log
@Moved Component extraction functions to class Coordinator.
Removed debugging output code from createMyCppCoordinator implementation.
@
text
@d135 17
@


1.22
log
@Detection of non-UTF-8.
@
text
@d117 18
@


1.21
log
@Fixed bug: The C++ Coordinator new deletes the CTVecSupply when it needs to.
@
text
@d70 4
d106 1
a106 1
   void extractNPeriods ();
d110 1
@


1.20
log
@Fixed the memory leak in theCoord->freezeNPeriods ().
@
text
@d51 1
a51 1
   void recordPartOpn ();
d55 4
d129 4
@


1.19
log
@Replaced C++ classes CTVecHolder <...> and CTVecRes with CTVecSupply.
@
text
@d51 1
a51 1
   void freezeNPeriods ();
d53 1
a53 2
      // Takes action appropriate when the first Part or Operation is created,
      // so that nPeriods can no longer be changed.
d129 2
@


1.18
log
@Removed non-portable assignments between _jint * and int *.
@
text
@d81 1
a81 1
   inline CTVecRes * getCTVecRes ()
d83 1
a83 1
      EXCEPTION_ASSERT (myCTVecRes_ != NULL);
d85 1
a85 6
      return myCTVecRes_;
      }

   inline bool hasCTVecRes ()
      {
      return (myCTVecRes_ != NULL);
d126 1
a126 1
   CTVecRes * myCTVecRes_;
d128 2
a129 1
      // The CTVecRes that belongs to this Coordinator, if any; otherwise NULL.
@


1.17
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d88 5
@


1.16
log
@Changed name of GlobalComponent classes to GlobalAspect.
@
text
@d104 1
a104 1
   void extractElements ();
d106 2
a107 2
      // For each non-global Element in the WitRun, creates a matching Element
      // on both sides of WIT-J.
@


1.15
log
@Changed name of GlobalElement classes to GlobalComponent.
@
text
@d46 1
a46 1
   void store (GlobalComponent * theGlobalComp);
d48 1
a48 1
      // Stores theGlobalComp as myGlobalComponent_.
d76 1
a76 1
   inline GlobalComponent * getGlobalComponent ()
d78 1
a78 1
      return myGlobalComponent_;
d122 1
a122 1
   GlobalComponent * myGlobalComponent_;
d124 1
a124 1
      // The GlobalComponent for this Coordinator.
@


1.14
log
@purgeData
@
text
@d46 1
a46 1
   void store (GlobalElement * theGlobalElement);
d48 1
a48 1
      // Stores theGlobalElement as myGlobalElement_.
d76 1
a76 1
   inline GlobalElement * getGlobalElement ()
d78 1
a78 1
      return myGlobalElement_;
d122 1
a122 1
   GlobalElement * myGlobalElement_;
d124 1
a124 1
      // The GlobalElement for this Coordinator.
@


1.13
log
@purgeData
@
text
@d62 1
a62 1
   void purgeData ();
d64 2
a65 3
      // Calls witPurgeData () and then updates the state of the C++ portion of
      // WIT-J and some of the Java portion as well.
      // Implementation in progress.
@


1.12
log
@purgeData
@
text
@a68 20
   // Find{Element Class} functions.
   //
   // Each of these functions finds and returns the instance of the indicated
   // Element class identified by the arguments.
   // If the Element does not exist, WIT will issue a severe error.
   //---------------------------------------------------------------------------

   Part *       findPart       (const char * thePartName);
   Demand *     findDemand     (const char * thePartName,
                                const char * theDemandName);
   Operation *  findOperation  (const char * theOpnName);
   BomEntry *   findBomEntry   (const char * theOpnName,
                                int          theBomIndex);
   Substitute * findSubstitute (const char * theOpnName,
                                int          theBomIndex,
                                int          theSubIndex);
   BopEntry *   findBopEntry   (const char * theOpnName,
                                int          theBopIndex);

   //---------------------------------------------------------------------------
@


1.11
log
@purgeData
@
text
@a129 13
   void extractPart       ();
   void extractDemand     ();
   void extractOperation  ();
   void extractBomEntry   ();
   void extractSubstitute ();
   void extractBopEntry   ();
      //
      // Each of these functions does the following:
      // * Requires that object iteration be currently positioned at an
      //   instance of the indicated Element class.
      // * Creates an Element on both sides of WIT-J matching the Element at
      //   which object iteration is currently positioned.

@


1.10
log
@Removed C++ class Extractor.
@
text
@d62 6
@


1.9
log
@PIP.
@
text
@d56 6
a95 5
   inline Extractor * getExtractor ()
      {
      return myExtractor_;
      }

d103 5
d114 23
d158 4
a161 3
   Extractor * myExtractor_;
      // 
      // The Extractor that belongs to this Coordinator.
@


1.8
log
@PIP
@
text
@d64 11
a74 6
   Part *      findPart      (const char * thePartName);
   Demand *    findDemand    (const char * thePartName,
                              const char * theDemandName);
   Operation * findOperation (const char * theOpnName);
   BomEntry *  findBomEntry  (const char * theOpnName,
                              int          theBomIndex);
@


1.7
log
@PIP.
@
text
@a11 2
#include     <vector>

a55 8
   void fillWithDemands (
         std::vector <Element *> & theElementVec,
         StrVecWoa &               partNameVecWoa,
         StrVecWoa &               demandNameVecWoa);
      //
      // Makes theElementVec into a vector of the Demands for this Coordinator
      // identified by the StrVecWoas.

@


1.6
log
@Implemented getPipSeq.
@
text
@a59 1
         int                       nDemands,
d63 2
a64 2
      // Makes theElementVec into a vector of length nDemands of the Demands
      // for this Coordinator identified by the StrVecWoas.
@


1.5
log
@Simplified the static instance logic.
@
text
@d12 2
d58 9
d76 2
@


1.4
log
@Part.Category as Alternative
@
text
@d34 1
a34 1
   explicit Coordinator (bool forStaticCoord);
a36 2
      // forStaticCoord: true, iff the Coordinator is to be belong to the static
      //                 Java Coordinator.
@


1.3
log
@Implemented Java class CppGateway.
@
text
@d34 1
a34 1
   explicit Coordinator ();
d37 2
@


1.2
log
@Coordinator
@
text
@d34 1
a34 1
   explicit Coordinator (JavaObjRep *);
a72 5
   inline JavaObjRep * getJavaObjRep ()
      {
      return myJavaObjRep_;
      }

a109 4
   JavaObjRep * const myJavaObjRep_;
      //
      // The JavaObjRep for this Coordinator.

@


1.1
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d34 1
a34 1
   explicit Coordinator ();
a45 5
   void store (Problem * theProblem);
      //
      // Asserts that myProblem_ is NULL.
      // Sets myProblem_ to theProblem.

d73 1
a73 1
   inline Problem * getProblem ()
d75 1
a75 3
      EXCEPTION_ASSERT (myProblem_ != NULL);

      return myProblem_;
d115 1
a115 1
   Problem * myProblem_;
d117 1
a117 1
      // The Problem for this Coordinator, if any; otherwise NULL.
@

