head	1.81;
access;
symbols;
locks; strict;
comment	@# @;


1.81
date	2011.05.02.18.32.19;	author rjw;	state Exp;
branches;
next	1.80;

1.80
date	2011.03.30.16.20.47;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2009.09.30.18.44.11;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2009.09.29.20.43.56;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2009.05.13.19.15.30;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2009.05.12.22.11.30;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2009.05.12.19.29.50;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2009.05.12.15.57.57;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2009.05.05.20.17.05;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2009.04.17.15.38.24;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2009.04.10.16.16.19;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2009.03.30.20.19.54;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2009.03.20.19.47.00;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2009.03.20.16.08.10;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2009.03.19.20.45.26;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2009.03.16.20.26.56;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2009.03.16.20.04.59;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2009.03.16.19.35.44;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2009.03.13.22.30.58;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2009.03.13.19.32.20;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2009.03.12.19.02.41;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2009.03.10.19.08.39;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2009.03.10.18.58.09;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2009.03.09.22.09.09;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2009.03.09.21.09.21;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2009.03.06.23.56.42;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2009.03.06.23.23.04;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2009.03.06.17.17.07;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2009.03.06.15.43.24;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2009.03.05.22.31.31;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2009.03.05.21.31.43;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2009.03.05.17.21.26;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2009.01.22.23.12.41;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2008.12.16.23.43.03;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2008.12.16.16.13.29;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2008.12.15.15.35.32;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2008.12.11.19.06.23;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2008.12.11.17.01.29;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2008.12.11.15.37.40;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2008.12.10.20.54.09;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2008.12.10.19.20.40;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2008.12.09.18.38.18;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2008.12.03.23.02.21;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2008.12.03.18.55.07;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.10.14.20.05.43;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.10.14.16.29.41;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2008.10.10.22.25.14;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.10.09.21.20.22;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.10.07.18.50.25;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.10.06.22.14.04;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.10.03.21.47.51;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.10.02.21.45.13;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.09.30.15.17.41;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.09.29.22.43.47;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.09.26.22.21.24;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.09.18.21.45.09;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.09.18.21.12.26;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.09.18.19.10.38;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.09.18.17.41.42;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.09.12.16.09.36;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.09.11.20.05.50;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.09.11.19.10.22;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.09.08.19.45.35;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.09.05.22.06.50;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.09.03.20.18.06;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.09.03.18.03.08;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.08.19.22.14.32;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.08.18.22.16.56;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.30.22.02.10;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.26.19.18.07;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.16.20.41.01;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.13.22.42.16;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.13.18.09.31;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.13.15.57.09;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.12.14.54.23;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.23.15.14.08;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.22.22.00.12;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.22.21.02.59;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.19.19.04.43;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.19.18.20.07;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.16.22.10.23;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.81
log
@Reduced heading comments.
@
text
@
//==============================================================================
// WIT-J Java Source File BomEntry.java.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import           java.util.*;

//==============================================================================
// Class BomEntry
//
// Represents a BOM entry in an implosion problem.
//
// Class Hierarchy:
//
// ThreadedObject
//    PreservedObject
//       Component
//          BomEntry
//
// Part.Associate
//    BomEntry
//==============================================================================

public final class BomEntry extends Component implements Part.Associate
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// newInstance (theOpn, thePart)
//
// Factory method: Constructs and returns a new BomEntry for the arguments.
//------------------------------------------------------------------------------

   public static BomEntry newInstance (Operation theOpn, Part thePart)
      {
      try
         {
         notAllowedWhenTerminated ("BomEntry.newInstance");

         reqMatchingProblems (
            theOpn,
           "theOpn",
            thePart,
           "thePart",
           "BomEntry.newInstance");

         return new BomEntry (theOpn, thePart);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getSubstitutes ()
//
// Returns an unmodifiable List of all the Substitutes associated with this
// BomEntry, listed in the order of creation.
//------------------------------------------------------------------------------

   public List <Substitute> getSubstitutes ()
      {
      try
         {
         mustBeActive ("BomEntry.getSubstitutes");

         return unmodSubstitutes;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getSubstitutesTo (thePart)
//
// Creates and returns a List of all Substitutes from this BomEntry to thePart,
// listed in order of creation.
//------------------------------------------------------------------------------

   public List <Substitute> getSubstitutesTo (Part thePart)
      {
      try
         {
         mustBeActive ("BomEntry.getSubstitutesTo");

         return thePart.findAssociatesIn (mySubstitutes);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getUniqueSubstituteTo (thePart)
//
// If there is exactly one Substitute from this BomEntry to thePart, it is
//    returned.
// If there are none, null is returned.
// If there are more than one, a StatusQuoExeption is thrown.
//------------------------------------------------------------------------------

   public Substitute getUniqueSubstituteTo (Part thePart)
      {
      try
         {
         mustBeActive ("BomEntry.getUniqueSubstituteTo");

         return
            thePart.
               findUniqueAssociateIn (
                  mySubstitutes,
                  "   theBomEntry.getUniqueSubstituteTo (thePart) was\n"
                + "   called where theBomEntry and thePart are connected\n"
                + "   by more than one Substitute:");
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   public Operation getOperation ()
      {
      try
         {
         mustBeActive ("BomEntry.getOperation");

         return myOperation;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public Part getPart ()
      {
      try
         {
         mustBeActive ("BomEntry.getPart");

         return myPart;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// toStringActive ().
//
// Override from class PreservedObject.
//------------------------------------------------------------------------------

   String toStringActive ()
      {
      return
           "BomEntry #"
         + myBomEntryCOR.getBomIndex ()
         + " for "
         + myOperation
         + ", consuming "
         + myPart;
      }

//------------------------------------------------------------------------------
// deactivate ().
//
// Override from class PreservedObject.
//------------------------------------------------------------------------------

   void deactivate ()
      {
      myBomEntryCOR.deactivate ();
      super        .deactivate ();
      }

//------------------------------------------------------------------------------
// recordSubstitute (theSub)
//
// Records the fact that theSub has been created.
//------------------------------------------------------------------------------

   void recordSubstitute (Substitute theSub)
      {
      assert (theSub.getBomEntry () == this);

      mySubstitutes.add (theSub);
      }

//------------------------------------------------------------------------------
// restoreAfterPurge ()
//
// Override from class Component.
//------------------------------------------------------------------------------

   void restoreAfterPurge ()
      {
      removeInactive (mySubstitutes);
      }

//------------------------------------------------------------------------------
// getCompClassID ()
//
// Override from class Component.
//------------------------------------------------------------------------------

   CompClassID getCompClassID ()
      {
      return CompClassID.BOM_ENTRY;
      }

//------------------------------------------------------------------------------
// getComponentCOR ().
//
// Override from class Component.
//------------------------------------------------------------------------------

   ComponentCOR getComponentCOR ()
      {
      return myBomEntryCOR;
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   BomEntryCOR getBomEntryCOR ()
      {
      return myBomEntryCOR;
      }

//==============================================================================
// Private Constructor
//==============================================================================

   private BomEntry (Operation theOpn, Part thePart)
      {
      super (theOpn.getCoordinator ());

      int theBomIdx;

      myOperation      = theOpn;
      myPart           = thePart;

      theBomIdx        = theOpn. getBomEntries ().size ();

      myBomEntryCOR    =
         new BomEntryCOR (
            theOpn. getOperationCOR (),
            theBomIdx,
            thePart.getPartCOR ());

      mySubstitutes    = new ArrayList <Substitute> (0);

      unmodSubstitutes = Collections.unmodifiableList (mySubstitutes);

      getCoordinator ().recordConcComp (this);
      myOperation      .recordBomEntry (this);
      myPart           .recordBomEntry (this);
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myOperation.
//
// The Operation whose consumption of a Part is represented by this BomEntry.
//------------------------------------------------------------------------------

   private final Operation myOperation;

//------------------------------------------------------------------------------
// myPart.
//
// The Part whose consumption by an Operation is represented by this BomEntry.
//------------------------------------------------------------------------------

   private final Part myPart;

//------------------------------------------------------------------------------
// myBomEntryCOR.
//
// The BomEntryCOR that belongs to this BomEntry.
//------------------------------------------------------------------------------

   private final BomEntryCOR myBomEntryCOR;

//------------------------------------------------------------------------------
// mySubstitutes
//
// The list of all Substitutes associated with this BomEntry, listed in the
// order of creation.
//------------------------------------------------------------------------------

   private final ArrayList <Substitute> mySubstitutes;

//------------------------------------------------------------------------------
// unmodSubstitutes
//
// Unmodifiable view of mySubstitutes.
//------------------------------------------------------------------------------

   private final List <Substitute> unmodSubstitutes;

//==============================================================================
}
@


1.80
log
@Revised CppObjRep class ctors.
@
text
@a3 2
//
// Contains the declaration of class BomEntry.
@


1.79
log
@Further implementation of class ThreadedObject.
@
text
@d271 2
a272 2
   
      myOperation   = theOpn;
d275 1
a275 1
      theBomIdx        = theOpn.getBomEntries ().size ();
d277 5
a281 1
      myBomEntryCOR    = new BomEntryCOR (this, theBomIdx);
@


1.78
log
@Initial implementation of class ThreadedObject.
@
text
@d49 5
a53 5
             theOpn,
            "theOpn",
             thePart,
            "thePart",
            "BomEntry.newInstance");
@


1.77
log
@Made getBomEntriesTo, etc. return modifiable Lists.
@
text
@d21 4
a24 3
// PreservedObject
//    Component
//       BomEntry
@


1.76
log
@Removed lazy evaluation of unmodifiable views.
@
text
@d88 2
a89 2
// Creates and returns an unmodifiable List of all Substitutes from this
// BomEntry to thePart in order of creation.
@


1.75
log
@Replaced the throwExceptionFor method with getExeceptionToThrow.
@
text
@d67 1
a67 1
// BomEntry.
a75 3
         if (unmodSubstitutes == null)
             unmodSubstitutes = Collections.unmodifiableList (mySubstitutes);

d270 3
d274 1
a274 2
      myOperation   = theOpn;
      myPart        = thePart;
d276 1
a276 1
      theBomIdx     = theOpn.getBomEntries ().size ();
d278 1
a278 1
      myBomEntryCOR = new BomEntryCOR (this, theBomIdx);
d280 1
a280 1
      mySubstitutes = new ArrayList <Substitute> (0);
d318 2
a319 1
// The list of all Substitutes associated with this BomEntry.
a327 1
// Created by lazy evaluation.
d330 1
a330 1
   private List <Substitute> unmodSubstitutes = null;
@


1.74
log
@Changed name of Java class WitjException to GeneralException.
@
text
@d57 1
a57 1
      catch (Throwable theThrowable)
d59 1
a59 3
         throwExceptionFor (theThrowable);

         return null;
d82 1
a82 1
      catch (Throwable theThrowable)
d84 1
a84 3
         throwExceptionFor (theThrowable);

         return null;
d104 1
a104 1
      catch (Throwable theThrowable)
d106 1
a106 3
         throwExceptionFor (theThrowable);

         return null;
d134 1
a134 1
      catch (Throwable theThrowable)
d136 1
a136 3
         throwExceptionFor (theThrowable);

         return null;
d153 1
a153 1
      catch (Throwable theThrowable)
d155 1
a155 3
         throwExceptionFor (theThrowable);

         return null;
d170 1
a170 1
      catch (Throwable theThrowable)
d172 1
a172 3
         throwExceptionFor (theThrowable);

         return null;
@


1.73
log
@Changed name of Java class RetainedObject to PreservedObject.
@
text
@d59 3
a61 1
         throw getWitjExceptionFor (theThrowable);
d86 3
a88 1
         throw getWitjExceptionFor (theThrowable);
d110 3
a112 1
         throw getWitjExceptionFor (theThrowable);
d142 3
a144 1
         throw getWitjExceptionFor (theThrowable);
d163 3
a165 1
         throw getWitjExceptionFor (theThrowable);
d182 3
a184 1
         throw getWitjExceptionFor (theThrowable);
@


1.72
log
@Argument checking.
@
text
@d21 1
a21 1
// RetainedObject
d183 1
a183 1
// Override from class RetainedObject.
d200 1
a200 1
// Override from class RetainedObject.
@


1.71
log
@Minor revisions.
@
text
@d47 1
a47 1
         argProblemsMustMatch (
@


1.70
log
@Replaced theProblem.getInstances (theClass) with theProblem.GetParts (),
etc.
@
text
@d210 1
a210 1
// record (theSub)
d215 1
a215 1
   void record (Substitute theSub)
d283 3
a285 3
      getCoordinator ().record (this);
      myOperation      .record (this);
      myPart           .record (this);
@


1.69
log
@Added:
   theOpn     .getUniqueBomEntryTo   (thePart)
   theOpn     .getUniqueBopEntryTo   (thePart)
   theBomEntry.getUniqueSubstituteTo (thePart)
@
text
@d66 1
a66 1
// Return an unmodifiable List of all the Substitutes associated with this
@


1.68
log
@Added:
   theOpn     .getBomEntriesTo  (thePart)
   theOpn     .getBopEntriesTo  (thePart)
   theBomEntry.getSubstitutesTo (thePart)
@
text
@d111 30
@


1.67
log
@Implemented theProblem.getInstances (theCompClass).
@
text
@d24 3
d29 1
a29 1
public final class BomEntry extends Component
d89 22
@


1.66
log
@Removed:
   theOpn     .nBomEntries  ()
   theOpn     .nBopEntries  ()
   theBomEntry.nSubstitutes ()
@
text
@d228 3
a230 2
      myOperation.record (this);
      myPart     .record (this);
@


1.65
log
@Removed:
   theOpn     .getBomEntry   (theIdx)
   theOpn     .getBopEntry   (theIdx)
   theBomEntry.getSubstitute (theIdx)
@
text
@a200 11
// nSubstitutes ()
//
// Returns the # of Substitutes for this BomEntry.
//------------------------------------------------------------------------------

   int nSubstitutes ()
      {
      return mySubstitutes.size ();
      }

//------------------------------------------------------------------------------
d217 6
a222 2
      myOperation = theOpn;
      myPart      = thePart;
d224 1
a224 1
      myBomEntryCOR = new BomEntryCOR (this, theOpn.nBomEntries ());
@


1.64
log
@Replaced Attribute.getAllAttributes () with Attribute.getAttributes (),
which returns an unmodifiable List.
@
text
@a85 34
// getSubstitute (theSubIndex)
//
// Returns the Substitute that's associated with this BomEntry and whose
// subIndex matches theSubIndex, if any; otherwise terminates with an error
// message.
//------------------------------------------------------------------------------

   public Substitute getSubstitute (int theSubIndex)
      {
      try
         {
         mustBeActive ("BomEntry.getSubstitute");

         if ((theSubIndex <  0) || (theSubIndex >= mySubstitutes.size ()))
            throw
               new StatusQuoException (
                  "   BomEntry.getSubstitute (theSubIndex) was called\n"
                + "   where theSubIndex was out of range.\n"
                + "\n"
                + "      BomEntry:    " +  this        + "\n"
                + "      theSubIndex: " +  theSubIndex + "\n"
                + "      Valid Range: 0 <= theSubIndex < "
                +        mySubstitutes.size ());

         return mySubstitutes.get (theSubIndex);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
@


1.63
log
@Changed the following methods to return an unmodifiable List:

   thePart     .getDemands     ()
   thePart     .getBomEntries  ()
   thePart     .getSubstitutes ()
   thePart     .getBopEntries  ()
   theOperation.getBomEntries  ()
   theOperation.getBopEntries  ()
   theBomEntry .getSubstitutes ()
@
text
@d313 1
a313 1
// Constructed by lazy evaluation.
@


1.62
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d61 1
a61 1
// getSubstitutes
d63 2
a64 1
// Returns an array of all the Substitutes associated with this BomEntry.
d67 1
a67 1
   public Substitute[] getSubstitutes ()
d73 4
a76 1
         return mySubstitutes.toArray (new Substitute[0]);
d309 9
@


1.61
log
@Changed name of Problem method shutDown to deactivate.
@
text
@d22 1
a22 1
//    Element
d26 1
a26 1
public final class BomEntry extends Element
d200 1
a200 1
// Override from class Element.
d209 1
a209 1
// getElemClassID ()
d211 1
a211 1
// Override from class Element.
d214 1
a214 1
   ElemClassID getElemClassID ()
d216 1
a216 1
      return ElemClassID.BOM_ENTRY;
d220 1
a220 1
// getElementCOR ().
d222 1
a222 1
// Override from class Element.
d225 1
a225 1
   ElementCOR getElementCOR ()
@


1.60
log
@purgeData
@
text
@d173 1
a173 1
// shutDown ().
d178 1
a178 1
   void shutDown ()
d180 2
a181 2
      myBomEntryCOR.shutDown ();
      super        .shutDown ();
@


1.59
log
@purgeData
@
text
@d303 1
a303 1
   private ArrayList <Substitute> mySubstitutes = null;
@


1.58
log
@purgeData
@
text
@d205 1
a205 1
      mySubstitutes = activeOnly (mySubstitutes);
@


1.57
log
@purgeData
@
text
@d198 11
@


1.56
log
@purgeData
@
text
@d165 1
a165 1
         + myBomIndex
a197 11
// restoreAfterPurge ()
//
// Override from class Element.
//------------------------------------------------------------------------------

   void restoreAfterPurge ()
      {
      myBomIndex = myBomEntryCOR.getBomIndex ();
      }

//------------------------------------------------------------------------------
a233 5
   int getBomIndex ()
      {
      return myBomIndex;
      }

d247 2
a248 3
      myOperation   = theOpn;
      myBomIndex    = theOpn.nBomEntries ();
      myPart        = thePart;
d250 1
a250 1
      myBomEntryCOR = new BomEntryCOR (this);
a270 8
// myBomIndex.
//
// The # of BomEntries for myOperation constructed before this one.
//------------------------------------------------------------------------------

   private int myBomIndex = -1;

//------------------------------------------------------------------------------
@


1.55
log
@purgeData
@
text
@a241 11
// getOperationInt ()
//
// Internal version of getOperation ().
//------------------------------------------------------------------------------

   Operation getOperationInt ()
      {
      return myOperation;
      }

//------------------------------------------------------------------------------
@


1.54
log
@purgeData
@
text
@a115 27
// toString
//
// Override from class Object.
//------------------------------------------------------------------------------

   public String toString ()
      {
      try
         {
         notAllowedWhenTerminated ("BomEntry.toString");

         return
              "BomEntry #"
            + myBomIndex
            + " for "
            + myOperation
            + ", consuming "
            + myPart;
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
d156 17
@


1.53
log
@purgeData
@
text
@d252 11
@


1.52
log
@purgeData
@
text
@d215 1
a215 23
      int theSubIdx;

      mySubstitutes = activeOnly (mySubstitutes);

      theSubIdx = 0;

      for (Substitute theSub: mySubstitutes)
         {
         theSub.setSubIndex (theSubIdx);

         theSubIdx ++;
         }
      }

//------------------------------------------------------------------------------
// setBomIndex (theValue)
//
// Setter.
//------------------------------------------------------------------------------

   void setBomIndex (int theValue)
      {
      myBomIndex = theValue;
@


1.51
log
@purgeData
@
text
@d215 2
d218 20
@


1.50
log
@purgeData
@
text
@d208 1
a208 1
// reconcileForPurge ()
d213 1
a213 1
   void reconcileForPurge ()
d215 1
a215 3
      mySubstitutes.clear ();

      assert (false);
d327 1
a327 1
   private final List <Substitute> mySubstitutes;
@


1.49
log
@Removed java class ElementMgr, moving its responsibilities to class
Coordinator.
@
text
@d208 1
a208 1
// nSubstitutes ()
d210 1
a210 1
// Returns the # of Substitutes for this BomEntry.
d213 1
a213 1
   int nSubstitutes ()
d215 3
a217 1
      return mySubstitutes.size ();
d221 3
a223 1
// Accessors.
d226 1
a226 1
   int getBomIndex ()
d228 1
a228 1
      return myBomIndex;
d231 7
a237 1
   BomEntryCOR getBomEntryCOR ()
d243 1
a243 1
// getElemClassID ()
d245 1
a245 1
// Override from class Element.
d248 1
a248 1
   ElemClassID getElemClassID ()
d250 1
a250 1
      return ElemClassID.BOM_ENTRY;
d254 1
a254 3
// getElementCOR ().
//
// Override from class Element.
d257 6
a262 1
   ElementCOR getElementCOR ()
d305 1
a305 1
   private final int myBomIndex;
@


1.48
log
@Changed a Java class name: WitjAbortsException ==> TerminalException
@
text
@d260 1
a260 1
      super (theOpn.getElementMgr ());
@


1.47
log
@Changed class name: NonFunctionalException ==> WitjAbortsException
@
text
@d42 1
a42 1
         witjAbortedNotAllowed ("BomEntry.newInstance");
d125 1
a125 1
         witjAbortedNotAllowed ("BomEntry.toString");
@


1.46
log
@Minor revision.
@
text
@d42 1
a42 1
         witjMustBeFunctional ("BomEntry.newInstance");
d125 1
a125 1
         witjMustBeFunctional ("BomEntry.toString");
@


1.45
log
@Added text to the detail message of StatusQuoExceptions.
@
text
@d21 3
a23 3
//    RetainedObject
//       Element
//          BomEntry
@


1.44
log
@Changed name of class IntactException to StatusQuoException.
@
text
@d96 9
a104 9
            throw new StatusQuoException (
               "\n\n"
             + "   BomEntry.getSubstitute (theSubIndex) was called\n"
             + "   where theSubIndex was out of range.\n"
             + "\n"
             + "      BomEntry:    " +  this        + "\n"
             + "      theSubIndex: " +  theSubIndex + "\n"
             + "      Valid Range: 0 <= theSubIndex < " + mySubstitutes.size ()
             + "\n");
@


1.43
log
@Added the uniform try block whereever it was needed.
@
text
@d96 1
a96 1
            throw new IntactException (
@


1.42
log
@Added a call to witjMustBeFunctional whereever it was needed.
@
text
@d40 18
a57 10
      witjMustBeFunctional ("BomEntry.newInstance");

      argProblemsMustMatch (
          theOpn,
         "theOpn",
          thePart,
         "thePart",
         "BomEntry.newInstance");

      return new BomEntry (theOpn, thePart);
d68 11
a78 3
      mustBeActive ("BomEntry.getSubstitutes");

      return mySubstitutes.toArray (new Substitute[0]);
d91 22
a112 14
      mustBeActive ("BomEntry.getSubstitute");

      if ((theSubIndex <  0) || (theSubIndex >= mySubstitutes.size ()))
         throw new IntactException (
            "\n\n"
          + "   BomEntry.getSubstitute (theSubIndex) was called\n"
          + "   where theSubIndex was out of range.\n"
          + "\n"
          + "      BomEntry:    " +  this        + "\n"
          + "      theSubIndex: " +  theSubIndex + "\n"
          + "      Valid Range: 0 <= theSubIndex < " + mySubstitutes.size ()
          + "\n");

      return mySubstitutes.get (theSubIndex);
d123 17
a139 9
      witjMustBeFunctional ("BomEntry.toString");

      return
           "BomEntry #"
         + myBomIndex
         + " for "
         + myOperation
         + ", consuming "
         + myPart;
d148 12
a159 1
      mustBeActive ("BomEntry.getOperation");
d161 1
a161 2
      return myOperation;
      }
d165 11
a175 3
      mustBeActive ("BomEntry.getPart");

      return myPart;
@


1.41
log
@Changed class names:
   HarmlessException ==> IntactException
   UnknownException  ==> UnexpectedException
@
text
@d40 2
d99 2
@


1.40
log
@Replaced standard Exceptions with HarmlessExceptions in throw statements.
@
text
@d76 1
a76 1
         throw new HarmlessException (
@


1.39
log
@Exceptions
@
text
@d76 1
a76 1
         throw new IndexOutOfBoundsException (
@


1.38
log
@Minor changes.
@
text
@d76 3
a78 2
         abortWmsg (
            "   BomEntry.getSubstitute (theSubIndex) was called\n"
d83 2
a84 1
          + "      Valid Range: 0 <= theSubIndex < " + mySubstitutes.size ());
@


1.37
log
@Conditional expressions.
@
text
@d51 1
a51 1
// getSubstitutes ()
d88 1
a88 1
// toString ().
@


1.36
log
@Made bomIndex, subIndex, and bopIndex into formal attributes.
@
text
@d75 1
a75 1
      if ((theSubIndex <  0)|| (theSubIndex >= mySubstitutes.size ()))
@


1.35
log
@Call-back infrastructure.
@
text
@d67 1
a67 1
// BomIndex matches theSubIndex, if any; otherwise terminates with an error
a121 7
   public int getBomIndex ()
      {
      mustBeActive ("BomEntry.getBomIndex");

      return myBomIndex;
      }

d166 5
@


1.34
log
@Revised factory methods.
@
text
@a220 17
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// newSubstitute (thePart)
//
// Factory method: Constructs and returns a new Substitute for the arguments.
//
// Intended for invocation from WIT-J/C++.
//------------------------------------------------------------------------------

   private Substitute newSubstitute (Part thePart)
      {
      return Substitute.newInstance (this, thePart);
      }

//==============================================================================
@


1.33
log
@Name change.
@
text
@d33 1
a33 1
// newSubstitute (thePart)
d35 1
a35 2
// Factory method:
// Constructs and returns a new Substitute for this BomEntry and thePart.
d38 1
a38 1
   public Substitute newSubstitute (Part thePart)
d40 6
a45 4
      int theSubIndex;

      mustBeActive                                 ("BomEntry.newSubstitute");
      argMustBelongToMyProblem (thePart, "thePart", "BomEntry.newSubstitute");
d47 1
a47 3
      theSubIndex = mySubstitutes.size ();

      return new Substitute (this, theSubIndex, thePart);
a129 28
// Package-Internal Constructor
//
// Arguments:
//    theOpn:      The consuming Operation for this BomEntry.
//    theBomIndex: The BOM entry index     for this BomEntry.
//    thePart:     The consumed  Part      for this BomEntry.
//==============================================================================

   BomEntry (
         Operation theOpn,
         int       theBomIndex,
         Part      thePart)
      {
      super (theOpn.getElementMgr ());

      myOperation   = theOpn;
      myBomIndex    = theBomIndex;
      myPart        = thePart;

      myBomEntryCOR = new BomEntryCOR (this);

      mySubstitutes = new ArrayList <Substitute> (0);

      myOperation.record (this);
      myPart     .record (this);
      }

//==============================================================================
d159 11
d201 37
@


1.32
log
@Changed name of Component to Entity.
@
text
@d22 1
a22 1
//       Entity
d26 1
a26 1
public final class BomEntry extends Entity
d144 1
a144 1
      super (theOpn.getEntityMgr ());
d197 1
a197 1
// getEntityClassID ()
d199 1
a199 1
// Override from class Entity.
d202 1
a202 1
   EntityClassID getEntityClassID ()
d204 1
a204 1
      return EntityClassID.BOM_ENTRY;
d208 1
a208 1
// getEntityCOR ().
d210 1
a210 1
// Override from class Entity.
d213 1
a213 1
   EntityCOR getEntityCOR ()
@


1.31
log
@Implemented extraction of substitutes.
@
text
@d22 1
a22 1
//       Component
d26 1
a26 1
public final class BomEntry extends Component
d144 1
a144 1
      super (theOpn.getCompMgr ());
d197 1
a197 1
// getCompClassID ()
d199 1
a199 1
// Override from class Component.
d202 1
a202 1
   CompClassID getCompClassID ()
d204 1
a204 1
      return CompClassID.BOM_ENTRY;
d208 1
a208 1
// getCompCOR ().
d210 1
a210 1
// Override from class Component.
d213 1
a213 1
   ComponentCOR getCompCOR ()
@


1.30
log
@Implemented extraction of BOM entries.
@
text
@d41 2
d46 3
a48 1
      return new Substitute (this, thePart);
a187 11
// getNSubstitutes ()
//
// Returns the # of Substitutes associated with this BomEntry.
//------------------------------------------------------------------------------

   int getNSubstitutes ()
      {
      return mySubstitutes.size ();
      }

//------------------------------------------------------------------------------
@


1.29
log
@Call-back infrastructure.
@
text
@d130 3
a132 2
//    theOpn:  The consuming Operation for this BomEntry.
//    thePart: The consumed  Part      for this BomEntry.
d137 1
d143 1
a144 1
      myBomIndex    = theOpn.getNBomEntries ();
d238 1
a238 1
// myPart.
d240 1
a240 1
// The Part whose consumption by an Operation is represented by this BomEntry.
d243 1
a243 1
   private final Part myPart;
d246 1
a246 1
// myBomIndex.
d248 1
a248 1
// The # of BomEntries for myOperation constructed before this one.
d251 1
a251 1
   private final int myBomIndex;
@


1.28
log
@Call-back infrastructure.
@
text
@a131 2
//
// To be called from theOpn.newBomEntry (thePart) only.
@


1.27
log
@Numerous class name changes.
@
text
@a141 3
      OperationCOR theOpnCOR;
      PartCOR      thePartCOR;

d144 1
a144 3
      myBomIndex    = theOpn .getNBomEntries  ();
      theOpnCOR     = theOpn .getOperationCOR ();
      thePartCOR    = thePart.getPartCOR      ();
d146 1
a146 1
      myBomEntryCOR = new BomEntryCOR (theOpnCOR, thePartCOR);
@


1.26
log
@Implemented theBomEnt.getSubstitute (theSubIndex).
@
text
@d142 2
a143 2
      OperationCI theOpnCI;
      PartCI      thePartCI;
d147 3
a149 3
      myBomIndex    = theOpn .getNBomEntries ();
      theOpnCI      = theOpn .getOperationCI ();
      thePartCI     = thePart.getPartCI      ();
d151 1
a151 1
      myBomEntryCI  = new BomEntryCI (theOpnCI, thePartCI);
d171 2
a172 2
      myBomEntryCI.shutDown ();
      super       .shutDown ();
d203 1
a203 1
   BomEntryCI getBomEntryCI ()
d205 1
a205 1
      return myBomEntryCI;
d220 1
a220 1
// getCompCI ().
d225 1
a225 1
   ComponentCI getCompCI ()
d227 1
a227 1
      return myBomEntryCI;
d259 1
a259 1
// myBomEntryCI.
d261 1
a261 1
// The BomEntryCI that belongs to this BomEntry.
d264 1
a264 1
   private final BomEntryCI myBomEntryCI;
@


1.25
log
@Implemented theBomEnt.getSubstitutes ().
@
text
@d61 24
@


1.24
log
@Implemented theOpn.getBomEntries ().
Implemented theOpn.getBopEntries ().
@
text
@d12 2
d48 13
d121 5
a125 5
      myOperation    = theOpn;
      myPart         = thePart;
      myBomIndex     = theOpn .getNBomEntries ();
      theOpnCI       = theOpn .getOperationCI ();
      thePartCI      = thePart.getPartCI      ();
d127 1
a127 1
      myBomEntryCI   = new BomEntryCI (theOpnCI, thePartCI);
d129 1
a129 1
      myNSubstitutes = 0;
d152 14
a165 1
// recNewSub ()
d167 1
a167 1
// Records the fact that a new Substitute for this BomEntry has been created.
d170 1
a170 1
   void recNewSub ()
d172 1
a172 1
      myNSubstitutes ++;
a183 5
   int getNSubstitutes ()
      {
      return myNSubstitutes;
      }

d243 1
a243 1
// myNSubstitutes.
d245 1
a245 1
// The # of Substitutes for this BomEntry.
d248 1
a248 1
   private int myNSubstitutes;
@


1.23
log
@Implemented thePart.getBomEntries ().
@
text
@d116 2
a117 3
      theOpn.recNewBomEnt ();

      myPart.record (this);
@


1.22
log
@Active state / shutDown method.
@
text
@d117 2
@


1.21
log
@Added verification that arguments belong to the same Problem.
@
text
@d39 1
a39 1
      mustBeUnreleased                             ("BomEntry.newSubstitute");
d68 1
a68 1
      mustBeUnreleased ("BomEntry.getOperation");
d75 1
a75 1
      mustBeUnreleased ("BomEntry.getPart");
d82 1
a82 1
      mustBeUnreleased ("BomEntry.getBomIndex");
d124 1
a124 1
// release ().
d129 1
a129 1
   void release ()
d131 2
a132 2
      myBomEntryCI.release ();
      super       .release ();
@


1.20
log
@Revised the factory methods.
@
text
@d39 2
a40 2
         mustBeUnreleased                     ("BomEntry.newSubstitute");
      argMustBeUnreleased (thePart, "thePart", "BomEntry.newSubstitute");
@


1.19
log
@Initial implementation of the Session classes.
@
text
@d31 1
a31 1
// makeInstance (theOpn, thePart)
d33 2
a34 5
// Factory method: Constructs and returns a new BomEntry.
//
// Arguments:
//    theOpn:  The consuming Operation for the BomEntry.
//    thePart: The consumed  Part      for the BomEntry.
d37 1
a37 3
   public static BomEntry makeInstance (
         Operation theOpn,
         Part      thePart)
d39 2
a40 2
      argMustBeUnreleased (theOpn,  "theOpn",  "BomEntry.makeInstance");
      argMustBeUnreleased (thePart, "thePart", "BomEntry.makeInstance");
d42 1
a42 1
      return new BomEntry (theOpn, thePart);
d88 32
a182 30
// Private Constructor
//
// Arguments:
//    theOpn:  The consuming Operation for this BomEntry.
//    thePart: The consumed  Part      for this BomEntry.
//==============================================================================

   private BomEntry (
         Operation theOpn,
         Part      thePart)
      {
      super (theOpn.getCompMgr ());

      OperationCI theOpnCI;
      PartCI      thePartCI;

      myOperation    = theOpn;
      myPart         = thePart;
      myBomIndex     = theOpn .getNBomEntries ();
      theOpnCI       = theOpn .getOperationCI ();
      thePartCI      = thePart.getPartCI      ();

      myBomEntryCI   = new BomEntryCI (theOpnCI, thePartCI);

      myNSubstitutes = 0;

      theOpn.recNewBomEnt ();
      }

//==============================================================================
@


1.18
log
@Terminology change.
@
text
@d156 1
a156 5
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// Constructor.
d161 1
a161 1
//------------------------------------------------------------------------------
@


1.17
log
@Replaced class PublicObject with class VitalObject.
@
text
@d19 1
a19 1
//    VitalObject
d44 2
a45 2
      mustBeNonNullActive (theOpn,  "theOpn",  "BomEntry.makeInstance");
      mustBeNonNullActive (thePart, "thePart", "BomEntry.makeInstance");
d73 1
a73 1
      mustBeActive ("BomEntry.getOperation");
d80 1
a80 1
      mustBeActive ("BomEntry.getPart");
d87 1
a87 1
      mustBeActive ("BomEntry.getBomIndex");
d97 1
a97 1
// shutDown ().
d99 1
a99 1
// Override from class VitalObject.
d102 1
a102 1
   void shutDown ()
d104 2
a105 2
      myBomEntryCI.shutDown ();
      super       .shutDown ();
@


1.16
log
@Replaced toStringActive () with toString ().
@
text
@d19 1
a19 1
//    PublicObject
d99 1
a99 1
// Override from class PublicObject.
@


1.15
log
@Revised the shut-down model.
@
text
@d51 17
a133 17
// toStringActive ().
//
// Override from class PublicObject.
//------------------------------------------------------------------------------

   String toStringActive ()
      {
      return
           "BomEntry #"
         + myBomIndex
         + " for "
         + myOperation
         + ", consuming "
         + myPart;
      }

//------------------------------------------------------------------------------
@


1.14
log
@Implemented Utility class.
@
text
@a87 6

      myOperation  = null;
      myPart       = null;
      myBomIndex   = -1;
      myBomEntryCI = null;

d199 1
a199 1
   private Operation myOperation;
d207 1
a207 1
   private Part myPart;
d215 1
a215 1
   private int myBomIndex;
d223 1
a223 1
   private BomEntryCI myBomEntryCI;
@


1.13
log
@Made accessor names begin with "get".
@
text
@d8 3
a10 1
package com.ibm.witj;
@


1.12
log
@Attributes.
@
text
@d49 1
a49 3
// myOperation ().
//
// Accessor.
d52 1
a52 1
   public Operation myOperation ()
d54 1
a54 1
      mustBeActive ("BomEntry.myOperation");
d59 1
a59 7
//------------------------------------------------------------------------------
// myPart ().
//
// Accessor.
//------------------------------------------------------------------------------

   public Part myPart ()
d61 1
a61 1
      mustBeActive ("BomEntry.myPart");
d66 1
a66 7
//------------------------------------------------------------------------------
// bomIndex ().
//
// Accessor.
//------------------------------------------------------------------------------

   public int bomIndex ()
d68 1
a68 1
      mustBeActive ("BomEntry.bomIndex");
d70 1
a70 1
      return bomIndex;
d89 1
a89 1
      bomIndex     = -1;
d103 1
a103 1
      nSubstitutes ++;
d107 1
a107 3
// myBomEntryCI ().
//
// Accessor.
d110 1
a110 1
   BomEntryCI myBomEntryCI ()
d115 1
a115 7
//------------------------------------------------------------------------------
// nSubstitutes ().
//
// Accessor.
//------------------------------------------------------------------------------

   int nSubstitutes ()
d117 1
a117 1
      return nSubstitutes;
d130 1
a130 1
         + bomIndex
d138 1
a138 1
// myCompClassID ()
d143 1
a143 1
   CompClassID myCompClassID ()
d149 1
a149 1
// myCompCI ().
d154 1
a154 1
   ComponentCI myCompCI ()
d175 1
a175 1
      super (theOpn.myCompMgr ());
d180 5
a184 5
      myOperation  = theOpn;
      myPart       = thePart;
      bomIndex     = theOpn .nBomEntries   ();
      theOpnCI     = theOpn .myOperationCI ();
      thePartCI    = thePart.myPartCI      ();
d186 1
a186 1
      myBomEntryCI = new BomEntryCI (theOpnCI, thePartCI);
d188 1
a188 1
      nSubstitutes = 0;
d214 1
a214 1
// bomIndex.
d219 1
a219 1
   private int bomIndex;
d230 1
a230 1
// nSubstitutes.
d235 1
a235 1
   private int nSubstitutes;
@


1.11
log
@Created Java class CompMgr.
@
text
@d160 11
@


1.10
log
@Attributes.
@
text
@d186 1
a186 1
      super (theOpn.myProbCoord ());
@


1.9
log
@Removed class LTPubObject.
@
text
@d159 11
d235 1
a235 1
// The C++ BomEntry interface that belongs to this BomEntry.
@


1.8
log
@Added Java class LTPubObject.
@
text
@d18 2
a19 3
//       LTPubObject
//          Component
//             BomEntry
@


1.7
log
@Comments, etc.
@
text
@d18 3
a20 2
//       Component
//          BomEntry
@


1.6
log
@*** empty log message ***
@
text
@d1 7
@


1.5
log
@*** empty log message ***
@
text
@d41 39
a113 22
// myOperation ().
//
// Accessor.
//------------------------------------------------------------------------------

   Operation myOperation ()
      {
      return myOperation;
      }

//------------------------------------------------------------------------------
// bomIndex ().
//
// Accessor.
//------------------------------------------------------------------------------

   int bomIndex ()
      {
      return bomIndex;
      }

//------------------------------------------------------------------------------
@


1.4
log
@*** empty log message ***
@
text
@d55 4
a58 4
      consumingOperation = null;
      consumedPart       = null;
      bomEntryIndex      = -1;
      myBomEntryCI       = null;
d75 1
a75 1
// consumingOperation ().
d80 1
a80 1
   Operation consumingOperation ()
d82 1
a82 1
      return consumingOperation;
d86 1
a86 1
// bomEntryIndex ().
d91 1
a91 1
   int bomEntryIndex ()
d93 1
a93 1
      return bomEntryIndex;
d128 1
a128 1
         + bomEntryIndex
d130 1
a130 1
         + consumingOperation
d132 1
a132 1
         + consumedPart;
d156 5
a160 5
      consumingOperation = theOpn;
      consumedPart       = thePart;
      bomEntryIndex      = theOpn .nBomEntries   ();
      theOpnCI           = theOpn .myOperationCI ();
      thePartCI          = thePart.myPartCI      ();
d162 1
a162 1
      myBomEntryCI       = new BomEntryCI (theOpnCI, thePartCI);
d164 1
a164 1
      nSubstitutes       = 0;
d174 1
a174 1
// consumingOperation.
d179 1
a179 1
   private Operation consumingOperation;
d182 1
a182 1
// consumedPart.
d187 1
a187 1
   private Part consumedPart;
d190 1
a190 1
// bomEntryIndex.
d192 1
a192 1
// The # of BomEntries for consumingOperation constructed before this one.
d195 1
a195 1
   private int bomEntryIndex;
@


1.3
log
@*** empty log message ***
@
text
@d6 1
a6 1
// Represents an BOM entry in an implosion problem.
d57 1
d64 55
d129 2
a130 1
         + " for " + consumingOperation
d164 2
d205 8
@


1.2
log
@*** empty log message ***
@
text
@d54 5
d120 1
a120 1
   private final Operation consumingOperation;
d128 1
a128 1
   private final Part consumedPart;
d144 1
a144 1
   private final BomEntryCI myBomEntryCI;
@


1.1
log
@*** empty log message ***
@
text
@a40 16
//------------------------------------------------------------------------------
// toString ().
//
// Override from class Object.
//------------------------------------------------------------------------------

   public String toString ()
      {
      return
           "BomEntry #"
         + bomEntryIndex
         + " for " + consumingOperation
         + ", consuming "
         + consumedPart;
      }

d57 16
@

