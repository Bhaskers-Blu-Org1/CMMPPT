head	1.31;
access;
symbols;
locks; strict;
comment	@# @;


1.31
date	2011.05.02.18.32.28;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.04.15.19.12.42;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2011.04.06.23.29.32;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2011.03.29.23.38.57;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2009.09.29.19.09.25;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2009.06.05.15.08.23;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2009.05.05.20.17.07;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2009.03.13.19.32.22;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2009.03.09.20.05.25;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2009.02.24.17.44.57;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2009.02.20.20.58.43;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.02.14.00.51.31;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.02.03.23.18.08;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.02.03.16.32.28;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.01.31.00.56.27;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.01.29.22.06.40;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.01.23.20.06.20;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.01.23.19.32.25;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.22.23.41.06;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.21.21.43.25;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.01.16.17.03.36;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.16.16.32.02;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.15.15.35.34;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.03.18.55.08;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.10.14.22.17.46;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.07.18.50.28;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.06.22.14.07;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.10.06.14.52.40;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.10.01.22.33.04;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.29.22.43.48;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.26.22.21.26;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Reduced heading comments.
@
text
@
//==============================================================================
// WIT-J Java Source File PartCOR.java.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import           java.util.*;

//==============================================================================
// Class PartCOR
//
// "Part C++ Object Representation"
// A Java representation of a C++ Part.
//
// Class Hierarchy:
//
// PreservedInternal
//    CppObjRep
//       ComponentCOR
//          PartCOR
//==============================================================================

final class PartCOR extends ComponentCOR
{
//==============================================================================
// Package-Internal Constructor
//==============================================================================

   PartCOR (
         CoordinatorCOR theCoordCOR,
         String         thePartName,
         boolean        isMaterial)
      {
      acquireNewCppObject (theCoordCOR, thePartName, isMaterial);
      }

//==============================================================================
// Package-Internal Native Methods
//==============================================================================

//------------------------------------------------------------------------------
// setPartName
//
// Sets the PartName of the C++ Part.
//------------------------------------------------------------------------------

   native void setPartName (String thePartName);

//------------------------------------------------------------------------------

   native void getBelowList (ArrayList <Part> theBelowList);

//==============================================================================
// Private Native Methods
//==============================================================================

//------------------------------------------------------------------------------
// acquireNewCppObject
// 
// This method is explained in the comment for class CppObjRep.
//------------------------------------------------------------------------------

   private native void acquireNewCppObject (
      CoordinatorCOR theCoordCOR,
      String         thePartName,
      boolean        theCategoryIsMaterial);

//==============================================================================
}
@


1.30
log
@Java CppObjRep classes
@
text
@a1 1

a3 2
//
// Contains the declaration of class PartCOR.
@


1.29
log
@getBelowList
@
text
@d40 1
a40 1
      createCppObject (theCoordCOR, thePartName, isMaterial);
d64 1
a64 1
// createCppObject
d69 1
a69 1
   private native void createCppObject (
@


1.28
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@d13 2
d55 4
@


1.27
log
@Implemented class PreservedInternal and made several classes extend it
   instead of class PreservedObject.
@
text
@d33 4
a36 1
   PartCOR (Part thePart)
d38 1
a38 13
      super (thePart);

      CoordinatorCOR theCoordCOR;
      String         thePartName;
      boolean        theCategoryIsMaterial;

      theCoordCOR           = thePart.getCoordinator ().getCoordinatorCOR ();
      thePartName           = thePart.getPartName    ();

      theCategoryIsMaterial =
         (thePart.getCategory () == Part.Category.MATERIAL);
      
      createCppObject (theCoordCOR, thePartName, theCategoryIsMaterial);
a53 15
// Private C++ Call-Back Methods
//==============================================================================

//------------------------------------------------------------------------------
// makeDemand (theDemandName)
//
// Constructs a new Demand.
//------------------------------------------------------------------------------

   private void makeDemand (String theDemandName)
      {
      Demand.newInstance (getComponent ().asPart (), theDemandName);
      }

//==============================================================================
@


1.26
log
@Changed the name each native method that creates a C++ object to
   createCppObject.
@
text
@d21 1
a21 1
// PreservedObject
@


1.25
log
@Changed name of Java class RetainedObject to PreservedObject.
@
text
@d47 1
a47 1
      createMyCppPart (theCoordCOR, thePartName, theCategoryIsMaterial);
d82 1
a82 1
// createMyCppPart
d84 1
a84 1
// Constructs a new C++ Part for the arguments and takes ownership of it.
d87 1
a87 1
   private native void createMyCppPart (
@


1.24
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d2 1
d21 1
a21 1
// RetainedObject
@


1.23
log
@purgeData
@
text
@d22 1
a22 1
//       ElementCOR
d26 1
a26 1
final class PartCOR extends ElementCOR
d73 1
a73 1
      Demand.newInstance (getElement ().asPart (), theDemandName);
@


1.22
log
@Part.Category by boolean.
@
text
@a61 9
// Package-Internal Accessors
//==============================================================================

   Part getPart ()
      {
      return (Part) getElement ();
      }

//==============================================================================
d73 1
a73 1
      Demand.newInstance (getPart (), theDemandName);
@


1.21
log
@Removed Java class CppGateway.
@
text
@d32 1
a32 1
   PartCOR (Part thePart, String thePartCatName)
d38 1
d40 5
a44 2
      theCoordCOR = thePart.getCoordinator ().getCoordinatorCOR ();
      thePartName = thePart.getPartName    ();
d46 1
a46 1
      createMyCppPart (theCoordCOR, thePartName, thePartCatName);
a60 8
//------------------------------------------------------------------------------
// getCategory ()
//
// Returns the Part.Category of the Part, as identified by its name.
//------------------------------------------------------------------------------

   native String getCategory ();

d98 1
a98 1
      String         thePartCatName);
@


1.20
log
@Implemented getPipSeq.
@
text
@d75 15
@


1.19
log
@Part Category
@
text
@d34 2
a38 1
      myPart      = thePart;
d71 1
a71 1
      return myPart;
a89 12
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myPart
//
// The Part that owns this PartCOR.
//------------------------------------------------------------------------------

   private final Part myPart;

//==============================================================================
@


1.18
log
@Removed the Alternative classes.
@
text
@d32 1
a32 1
   PartCOR (Part thePart, int thePartCatIdx)
d41 1
a41 1
      createMyCppPart (theCoordCOR, thePartName, thePartCatIdx);
d57 1
a57 1
// getCategoryIndex ()
d59 1
a59 1
// Returns the index of the Part.Category of the Part.
d62 1
a62 1
   native int getCategoryIndex ();
d86 1
a86 1
      int            thePartCatIdx);
@


1.17
log
@Part.Category as Alternative
@
text
@d32 1
a32 1
   PartCOR (Part thePart, Part.Category theCategory)
a35 1
      AlternativeCOR thePartCatAltCOR;
d37 3
a39 4
      myPart           = thePart;
      theCoordCOR      = thePart    .getCoordinator    ().getCoordinatorCOR ();
      thePartName      = thePart    .getPartName       ();
      thePartCatAltCOR = theCategory.getAlternativeCOR ();
d41 1
a41 4
      createMyCppPart (
         theCoordCOR,
         thePartName,
         thePartCatAltCOR);
d57 1
a57 1
// getCategory ()
d59 1
a59 2
// Returns the AlternativeCOR that owns the Alternative that models the
// Part.Category of the Part.
d62 1
a62 1
   native AlternativeCOR getCategory ();
d86 1
a86 1
      AlternativeCOR thePartCatAltCOR);
@


1.16
log
@Implemented Java class CppGateway.
@
text
@d36 1
a36 1
      boolean        theCategoryIsMat;
d39 3
a41 2
      theCoordCOR      = thePart.getCoordinator ().getCoordinatorCOR ();
      thePartName      = thePart.getPartName    ();
a42 2
      theCategoryIsMat = (theCategory == Part.Category.MATERIAL);

d46 1
a46 1
         theCategoryIsMat);
d62 1
a62 1
// getCategoryIsMat
d64 2
a65 1
// Returns true, iff the C++ Part is a Material Part.
d68 1
a68 1
   native boolean getCategoryIsMat ();
d92 1
a92 1
      boolean        theCategoryIsMat);
@


1.15
log
@Coordinator
@
text
@d38 1
d40 1
a40 2

      thePartName      = thePart.getPartName ();
d47 1
a47 2
         theCategoryIsMat,
         thePart);
d51 1
a51 1
// Package-Internal Methods
d71 10
a80 1
// Private Methods
d92 13
a104 2
      boolean        theCategoryIsMat,
      Part           thePart);
@


1.14
log
@Coordinator
@
text
@a81 12
      ProblemCOR theProblemCOR,
      String     thePartName,
      boolean    theCategoryIsMat,
      Part       thePart);

//------------------------------------------------------------------------------
// createMyCppPart
// 
// Constructs a new C++ Part for the arguments and takes ownership of it.
//------------------------------------------------------------------------------

   private native void createMyCppPart (
@


1.13
log
@Coordinator
@
text
@d34 1
a34 1
      CoordinatorCOR theCoordinatorCOR;
d38 1
a38 1
      theCoordinatorCOR = thePart.getCoordinator ().getCoordinatorCOR ();
d40 1
a40 1
      thePartName       = thePart.getPartName ();
d42 1
a42 1
      theCategoryIsMat  = (theCategory == Part.Category.MATERIAL);
d45 1
a45 1
         theCoordinatorCOR,
d94 1
a94 1
      CoordinatorCOR theCoordinatorCOR,
@


1.12
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d38 1
a38 2
      theCoordinatorCOR =
         thePart.getProblem ().getCoordinator ().getCoordinatorCOR ();
@


1.11
log
@Change the mname of the ProbCtr classes to ProbMgr in both Java and C++.
@
text
@d34 3
a36 3
      ProbMgrCOR theProbMgrCOR;
      String     thePartName;
      boolean    theCategoryIsMat;
d38 2
a39 1
      theProbMgrCOR    = thePart.getProblem ().getProbMgr ().getProbMgrCOR ();
d41 1
a41 1
      thePartName      = thePart.getPartName ();
d43 1
a43 1
      theCategoryIsMat = (theCategory == Part.Category.MATERIAL);
d45 5
a49 1
      createMyCppPart (theProbMgrCOR, thePartName, theCategoryIsMat, thePart);
d95 4
a98 4
      ProbMgrCOR theProbMgrCOR,
      String     thePartName,
      boolean    theCategoryIsMat,
      Part       thePart);
@


1.10
log
@Continued implementation of the ProbCtr classes.
@
text
@d34 1
a34 1
      ProbCtrCOR theProbCtrCOR;
d38 1
a38 1
      theProbCtrCOR    = thePart.getProblem ().getProbCtr ().getProbCtrCOR ();
d44 1
a44 1
      createMyCppPart (theProbCtrCOR, thePartName, theCategoryIsMat, thePart);
d90 1
a90 1
      ProbCtrCOR theProbCtrCOR,
@


1.9
log
@Minor revision.
@
text
@d34 1
a34 1
      ProblemCOR theProblemCOR;
d38 1
a38 1
      theProblemCOR    = thePart.getProblem ().getProblemCOR ();
d44 1
a44 1
      createMyCppPart (theProblemCOR, thePartName, theCategoryIsMat, thePart);
d83 12
@


1.8
log
@Minor changes.
@
text
@d20 4
a23 4
//    RetainedObject
//       CppObjRep
//          ElementCOR
//             PartCOR
@


1.7
log
@Minot revision.
@
text
@d52 1
a52 1
// setPartName (...)
d60 1
a60 1
// getCategoryIsMat ()
d72 1
a72 1
// createMyCppPart (...)
@


1.6
log
@Name change.
@
text
@d36 1
a36 1
      boolean    theMaterialCase;
d38 1
a38 1
      theProblemCOR   = thePart.getProblem ().getProblemCOR ();
d40 1
a40 1
      thePartName     = thePart.getPartName ();
d42 1
a42 1
      theMaterialCase = (theCategory == Part.Category.MATERIAL);
d44 1
a44 1
      createMyCppPart (theProblemCOR, thePartName, theMaterialCase, thePart);
d60 1
a60 1
// getMaterialCase ()
d65 1
a65 1
   native boolean getMaterialCase ();
d80 1
a80 1
      boolean    theMaterialCase,
@


1.5
log
@Changed name of Component to Entity.
@
text
@d22 1
a22 1
//          EntityCOR
d26 1
a26 1
final class PartCOR extends EntityCOR
@


1.4
log
@Minor revision
@
text
@d22 1
a22 1
//          ComponentCOR
d26 1
a26 1
final class PartCOR extends ComponentCOR
@


1.3
log
@Minor revision.
@
text
@d36 1
a36 1
      boolean    theMaterialMode;
d42 1
a42 1
      theMaterialMode = (theCategory == Part.Category.MATERIAL);
d44 1
a44 1
      createMyCppPart (theProblemCOR, thePartName, theMaterialMode, thePart);
d60 1
a60 1
// getMaterialMode ()
d65 1
a65 1
   native boolean getMaterialMode ();
d80 1
a80 1
      boolean    theMaterialMode,
@


1.2
log
@Call-back infrastructure.
@
text
@d36 1
a36 1
      boolean    toBeAMaterial;
d38 1
a38 1
      theProblemCOR = thePart.getProblem ().getProblemCOR ();
d40 1
a40 1
      thePartName   = thePart.getPartName ();
d42 1
a42 1
      toBeAMaterial = (theCategory == Part.Category.MATERIAL);
d44 1
a44 1
      createMyCppPart (theProblemCOR, thePartName, toBeAMaterial, thePart);
d60 1
a60 1
// isAMaterial ()
d65 1
a65 1
   native boolean isAMaterial ();
d80 1
a80 1
      boolean    toBeAMaterial,
@


1.1
log
@Numerous class name changes.
@
text
@d32 1
a32 4
   PartCOR (
         ProblemCOR theProblemCOR,
         String     thePartName,
         boolean    toBeAMaterial)
d34 11
a44 1
      createMyCppPart (theProblemCOR, thePartName, toBeAMaterial);
d80 2
a81 1
      boolean    toBeAMaterial);
@

