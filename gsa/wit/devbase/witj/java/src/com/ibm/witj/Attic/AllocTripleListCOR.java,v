head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2009.06.04.23.04.22;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2009.05.05.20.17.05;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.03.13.19.32.20;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.02.20.20.58.43;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.02.20.17.18.44;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Changed handling of Lists of AllocTriples to avoid call-backs.
@
text
@
//==============================================================================
// WIT-J Java Source File AllocTripleListCOR.java.
//
// Contains the declaration of class AllocTripleListCOR.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import       java.util.*;

//==============================================================================
// Class AllocTripleListCOR
//
// "AllocTripleList C++ Object Representation"
// A Java representation of a C++ AllocTripleList.
//
// Class Hierarchy:
//
// PreservedObject
//    CppObjRep
//       AllocTripleListCOR
//==============================================================================

final class AllocTripleListCOR extends CppObjRep
{
//==============================================================================
// Package-Internal Constructor
//==============================================================================

   <C extends Component> AllocTripleListCOR (
         ArrayList <AllocTriple <C>> theAllocTripleList,
         Class <C>                   theCompClass,
         Coordinator                 theCoord)
      {
      myAllocTripleList = theAllocTripleList;
      myCompClass       = theCompClass;

      createMyCppAllocTripleList (theCoord.getCoordinatorCOR ());
      }

//==============================================================================
// Private C++ Call-Back Methods
//==============================================================================

//------------------------------------------------------------------------------
// prepareForTriples (nTriples)
//
// Clears the ArrayList of AllocTriples and increases its capacity to nTriples.
//------------------------------------------------------------------------------

   private void prepareForTriples (int nTriples)
      {
      myAllocTripleList.ensureCapacity (nTriples);
      myAllocTripleList.clear          ();
      }

//------------------------------------------------------------------------------
// addTriple (theCompCOR, thePeriod, theVolume)
//
// Creates a new AllocTriple from the arguments and adds it to the ArrayList of
// AllocTriples.
// Verifies that theCompCOR's Component is an instance of the Component class C
// required by the ArrayList of AllocTriples.
//------------------------------------------------------------------------------

  @@SuppressWarnings ("unchecked")

   private void addTriple (
         ComponentCOR theCompCOR,
         int          thePeriod,
         double       theVolume)
      {
      Component                           theComp;
      ArrayList <AllocTriple <Component>> theTripleList;
      AllocTriple <Component>             theTriple;

      theComp = theCompCOR.getComponent ();

      assert (myCompClass.isInstance (theComp));

      theTripleList = (ArrayList <AllocTriple <Component>>) myAllocTripleList;

      theTriple = AllocTriple.newInstance (theComp, thePeriod, theVolume);

      theTripleList.add (theTriple);
      }

//==============================================================================
// Private Native Methods
//==============================================================================

//------------------------------------------------------------------------------
// createMyCppAllocTripleList (theCoordCOR)
// 
// Constructs a new C++ AllocTripleList for theCoordCOR and takes ownership of
// it.
//------------------------------------------------------------------------------

   private native void createMyCppAllocTripleList (CoordinatorCOR theCoordCOR);

//==============================================================================
// Private Fields
//==============================================================================
 
//------------------------------------------------------------------------------
// myAllocTripleList
//
// A reference to the ArrayList <AllocTriple <C extends Component>> represented
// by the C++ AllocTripleList owned by this AllocTripleListCOR.
//------------------------------------------------------------------------------

   private final ArrayList <?> myAllocTripleList;

//------------------------------------------------------------------------------
// myCompClass
//
// The underlying Component class (C) for the
// ArrayList <AllocTriple <C extends Component>> represented by the C++
// AllocTripleList.
//------------------------------------------------------------------------------

   private final Class <? extends Component> myCompClass;

//==============================================================================
}
@


1.4
log
@Changed name of Java class RetainedObject to PreservedObject.
@
text
@@


1.3
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d22 1
a22 1
// RetainedObject
@


1.2
log
@Removed Java class CppGateway.
@
text
@d33 3
a35 3
   <E extends Element> AllocTripleListCOR (
         ArrayList <AllocTriple <E>> theAllocTripleList,
         Class <E>                   theElementClass,
d39 1
a39 1
      myElementClass    = theElementClass;
d61 1
a61 1
// addTriple (theElementCOR, thePeriod, theVolume)
d65 1
a65 1
// Verifies that theElementCOR's Element is an instance of the Element class E
d72 3
a74 3
         ElementCOR theElementCOR,
         int        thePeriod,
         double     theVolume)
d76 3
a78 3
      Element                           theElement;
      ArrayList <AllocTriple <Element>> theTripleList;
      AllocTriple <Element>             theTriple;
d80 1
a80 1
      theElement = theElementCOR.getElement ();
d82 1
a82 1
      assert (myElementClass.isInstance (theElement));
d84 1
a84 1
      theTripleList = (ArrayList <AllocTriple <Element>>) myAllocTripleList;
d86 1
a86 1
      theTriple = AllocTriple.newInstance (theElement, thePeriod, theVolume);
d111 2
a112 2
// A reference to the ArrayList <AllocTriple <E extends Element>> represented by
// the C++ AllocTripleList owned by this AllocTripleListCOR.
d118 1
a118 1
// myElementClass
d120 2
a121 2
// The underlying Element class (E) for the
// ArrayList <AllocTriple <E extends Element>> represented by the C++
d125 1
a125 1
   private final Class <? extends Element> myElementClass;
@


1.1
log
@Added the AllocTripleList classes.
@
text
@d45 1
a45 1
// Package-Internal Methods
d54 1
a54 1
   void prepareForTriples (int nTriples)
d61 1
a61 1
// addTriple (theElement, thePeriod, theVolume)
d65 2
a66 2
// Verifies that theElement is an instance of the Element class E required by
// the ArrayList of AllocTriples.
d71 4
a74 1
   void addTriple (Element theElement, int thePeriod, double theVolume)
d76 1
d80 2
d92 1
a92 1
// Private Methods
@

