head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2008.12.11.21.54.03;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2008.12.11.20.48.51;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.12.10.23.10.15;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.10.22.27.43;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Changed class name: FatalException ==> NonFunctionalException
@
text
@
//==============================================================================
// WIT-J Java Source File FatalException.java.
//
// Contains the declaration of class FatalException.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

//==============================================================================
// Class FatalException
//
// One kind of unchecked Exception thrown by WIT-J.
//
// When WIT-J throws a FatalException, this indicates that:
//
// * As a result of the throw, WIT-J is now in a non-functional state.
//   No further calls to WIT-J methods should be made for the rest of the
//   program process.
//
// Class Hierarchy:
//
//    Throwable
//       Exception
//          RuntimeException
//             WitjException
//                FatalException
//                   UnexpectedThrowableException
//==============================================================================

public abstract class FatalException extends WitjException
{
//==============================================================================
// Package-Internal Constructor
//==============================================================================

   FatalException (String message)
      {
      super (message);

      witjFunctional = false;
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   static boolean witjIsFunctional ()
      {
      return witjFunctional;
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// witjFunctional
//
// WIT-J is considered to be is a functional state, iff witjFunctional is true.
//------------------------------------------------------------------------------

   private static boolean witjFunctional = true;

//==============================================================================
}
@


1.3
log
@Changed class name: UnexpectedException ==> UnexpectedThrowableException.
Improved the detail message for UnexpectedThrowableException.
@
text
@@


1.2
log
@Added canonical try blocks to all public methods of class Problem.
@
text
@d30 1
a30 1
//                   UnexpectedException
@


1.1
log
@Added class FatalException.
Removed class ExceptionHandler.
@
text
@d17 1
a17 1
// When WIT-J throws an FatalException, this indicates that:
d19 3
a21 2
// * As a result of the throw, WIT-J is now in an unvalid state. No further
//   calls to WIT-J methods should be made for the rest of the program process.
@

