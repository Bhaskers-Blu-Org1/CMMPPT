head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2008.07.10.21.44.25;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2008.07.09.15.59.52;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.07.09.15.45.39;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Attributes.
@
text
@
//==============================================================================
// WIT-J Java Source File AttribOld.java.
//
// Contains the declaration of class AttribOld.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.AttribOld.AccessMode.*;
import static com.ibm.witj.CompClassID.*;

import        java.util.*;

//==============================================================================
// Class AttribOld
//
// Represents a WIT attribute, actually the set of all WIT attributes that have
// a given name.
//
// Class Hierarchy:
//
//    AttribOld
//       AttribOld.BooleanScalar
//       AttribOld.DoubleVector
//==============================================================================

public abstract class AttribOld
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// Accessors for AttribOlds.
//------------------------------------------------------------------------------

   public static DoubleVector supplyVol ()
      {
      return supplyVol;
      }

   public static DoubleVector scrapVol ()
      {
      return scrapVol;
      }

   public static DoubleVector demandVol ()
      {
      return demandVol;
      }

   public static BooleanScalar mrpNetAllowed ()
      {
      return mrpNetAllowed;
      }

//------------------------------------------------------------------------------
// toString ().
//
// Override from class Object.
//------------------------------------------------------------------------------

   public final String toString ()
      {
      return myName;
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// initialize ()
//
// Does nothing.
// Calling this method forces class AttribOld to be initialized.
//------------------------------------------------------------------------------

   static void initialize ()
      {
      }

//------------------------------------------------------------------------------
// appliesTo (theCompClassID)
//
// Returns true, iff represented attribute applies to the Component class
// identified by theCompClassID.
//------------------------------------------------------------------------------

   boolean appliesTo (CompClassID theCompClassID)
      {
      return (myAppAttMap.containsKey (theCompClassID));
      }

//------------------------------------------------------------------------------
// getAppAttFor (theCompClassID)
//
// Returns the AppAtt that represents this AttribOld as applied to the Component
// class identified by theCompClassID.
// This AttribOld must apply to the Component class.
//------------------------------------------------------------------------------

   AppAtt getAppAttFor (CompClassID theCompClassID)
      {
      AppAtt theAppAtt;

      theAppAtt = myAppAttMap.get (theCompClassID);

      assert (theAppAtt != null);

      return theAppAtt;
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   final AccessMode getAccessMode ()
      {
      return myAccessMode;
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// Static factory methods for subclasses.
//------------------------------------------------------------------------------

   private static BooleanScalar makeBoolScalAtt (
         String      theName,
         AccessMode  theAccessMode,
         CompClassID theCompClassID)
      {
      return new BooleanScalar (theName, theAccessMode, theCompClassID);
      }

   private static DoubleVector makeDblVecAtt (
         String      theName,
         AccessMode  theAccessMode,
         CompClassID theCompClassID)
      {
      return new DoubleVector (theName, theAccessMode, theCompClassID);
      }

//------------------------------------------------------------------------------
// Constructor.
//------------------------------------------------------------------------------

   private AttribOld (
         String      theName,
         AccessMode  theAccessMode,
         CompClassID theCompClassID)
      {
      AppAtt theAppAtt;

      myName       = theName;
      myAccessMode = theAccessMode;
      myAppAttMap  = new EnumMap <CompClassID, AppAtt> (CompClassID.class);
      theAppAtt    = new AppAtt (this, theCompClassID);

      myAppAttMap.put (theCompClassID, theAppAtt);
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// The following are the only AttribOlds that exist in WIT-J.
//------------------------------------------------------------------------------

   private static final DoubleVector  supplyVol;
   private static final DoubleVector  scrapVol;
   private static final DoubleVector  demandVol;
   private static final BooleanScalar mrpNetAllowed;

//------------------------------------------------------------------------------
// myName
//
// The name of this AttribOld.
//------------------------------------------------------------------------------

   private final String myName;

//------------------------------------------------------------------------------
// myAccessMode
//
// Indicates the mode of access allowed by the attributes.
//------------------------------------------------------------------------------

   private final AccessMode myAccessMode;

//------------------------------------------------------------------------------
// myAppAttMap
//
// If this AttribOld applies to the Component class identified by
// theCompClassID, then myAppAttMap.get (theCompClassID) is the AppAtt that
// represents this AttribOld as applied to the Component class.
// Otherwise myAppAttMap.get (theCompClassID) is null.
//------------------------------------------------------------------------------

   private final EnumMap <CompClassID, AppAtt> myAppAttMap;

//==============================================================================
// Static Initialization Block
//==============================================================================

   static
   {
   supplyVol     = makeDblVecAtt   ("supplyVol",     INPUT,  PART);
   scrapVol      = makeDblVecAtt   ("scrapVol",      OUTPUT, PART);
   demandVol     = makeDblVecAtt   ("demandVol",     INPUT,  DEMAND);
   mrpNetAllowed = makeBoolScalAtt ("mrpNetAllowed", INPUT,  SUBSTITUTE);
   }

//==============================================================================
// Static Nested Classes and Enums
//==============================================================================

//------------------------------------------------------------------------------
// Nested Class BooleanScalar
//
// An AttribOld of type "boolean scalar".
//------------------------------------------------------------------------------

   static final class BooleanScalar extends AttribOld
   {
      private BooleanScalar (
            String      theName,
            AccessMode  theAccessMode,
            CompClassID theCompClassID)
         {
         super (theName, theAccessMode, theCompClassID);
         }
   }

//------------------------------------------------------------------------------
// Nested Class DoubleVector
//
// An AttribOld for attributes of type "time-vector of doubles".
//------------------------------------------------------------------------------

   static final class DoubleVector extends AttribOld
   {
      private DoubleVector (
            String      theName,
            AccessMode  theAccessMode,
            CompClassID theCompClassID)
         {
         super (theName, theAccessMode, theCompClassID);
         }
   }

//------------------------------------------------------------------------------
// Nested Enum AccessMode
//
// Indicates the mode of access allowed by an attribute:
//
//    INPUT:  The value of the attribute can be retrieved, and it can    be set.
//    OUTPUT: The value of the attribute can be retrieved, but it cannot be set.
//------------------------------------------------------------------------------

   enum AccessMode
   {
      INPUT,
      OUTPUT,
   }

//==============================================================================
}
@


1.2
log
@Attributes.
@
text
@@


1.1
log
@Attributes.
@
text
@d18 2
a19 2
// Represents a WIT attribute, actually all WIT attributes that have a given
// name.
@

