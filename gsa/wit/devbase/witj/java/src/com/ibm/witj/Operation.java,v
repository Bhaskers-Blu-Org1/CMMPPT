head	1.97;
access;
symbols;
locks; strict;
comment	@# @;


1.97
date	2011.05.02.18.32.26;	author rjw;	state Exp;
branches;
next	1.96;

1.96
date	2011.03.30.16.20.51;	author rjw;	state Exp;
branches;
next	1.95;

1.95
date	2009.09.30.18.44.11;	author rjw;	state Exp;
branches;
next	1.94;

1.94
date	2009.09.29.20.43.57;	author rjw;	state Exp;
branches;
next	1.93;

1.93
date	2009.05.13.19.15.30;	author rjw;	state Exp;
branches;
next	1.92;

1.92
date	2009.05.12.22.11.31;	author rjw;	state Exp;
branches;
next	1.91;

1.91
date	2009.05.12.19.29.51;	author rjw;	state Exp;
branches;
next	1.90;

1.90
date	2009.05.12.15.57.58;	author rjw;	state Exp;
branches;
next	1.89;

1.89
date	2009.05.08.22.13.12;	author rjw;	state Exp;
branches;
next	1.88;

1.88
date	2009.05.05.20.17.07;	author rjw;	state Exp;
branches;
next	1.87;

1.87
date	2009.04.17.19.51.59;	author rjw;	state Exp;
branches;
next	1.86;

1.86
date	2009.04.17.15.38.24;	author rjw;	state Exp;
branches;
next	1.85;

1.85
date	2009.04.10.16.16.19;	author rjw;	state Exp;
branches;
next	1.84;

1.84
date	2009.03.30.20.19.55;	author rjw;	state Exp;
branches;
next	1.83;

1.83
date	2009.03.20.19.47.00;	author rjw;	state Exp;
branches;
next	1.82;

1.82
date	2009.03.20.16.08.10;	author rjw;	state Exp;
branches;
next	1.81;

1.81
date	2009.03.19.22.30.31;	author rjw;	state Exp;
branches;
next	1.80;

1.80
date	2009.03.19.20.45.27;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2009.03.16.20.26.57;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2009.03.16.20.04.59;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2009.03.16.19.35.44;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2009.03.13.22.30.58;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2009.03.13.19.32.22;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2009.03.12.19.02.42;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2009.03.10.19.08.39;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2009.03.10.18.58.10;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2009.03.06.23.23.05;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2009.03.06.15.43.25;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2009.03.05.22.31.32;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2009.03.05.21.31.44;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2009.03.05.17.21.27;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2009.01.23.19.32.24;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2009.01.23.18.46.54;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2009.01.22.23.12.42;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2008.12.16.23.43.04;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2008.12.16.16.13.30;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2008.12.15.15.35.34;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2008.12.11.19.06.23;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2008.12.11.17.01.29;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2008.12.11.15.37.40;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2008.12.10.20.54.10;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2008.12.10.19.20.41;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2008.12.09.18.38.18;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2008.12.03.23.02.21;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2008.12.03.18.55.08;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2008.11.25.15.28.47;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2008.10.14.20.05.46;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2008.10.14.16.29.41;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2008.10.10.22.25.14;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2008.10.10.17.33.18;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2008.10.09.21.20.22;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2008.10.07.18.50.27;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2008.10.06.22.14.06;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2008.10.03.20.35.52;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2008.10.02.21.45.13;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2008.09.30.15.17.42;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2008.09.29.22.43.47;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2008.09.26.22.21.26;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2008.09.18.21.45.12;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2008.09.18.21.12.29;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.09.18.20.38.21;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.09.18.20.22.11;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2008.09.18.19.10.41;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.09.18.16.01.32;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.09.17.21.01.37;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.09.12.16.09.36;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.09.12.14.43.23;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.09.11.20.05.53;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.09.11.19.10.25;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.09.09.19.00.00;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.09.09.16.27.06;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.09.09.15.15.30;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.09.08.19.45.36;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.09.05.22.06.51;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.09.05.15.53.04;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.09.03.20.18.06;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.09.03.18.03.08;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.08.29.17.19.07;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.08.19.22.14.33;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.08.18.22.16.58;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.06.30.22.02.11;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.06.30.19.56.04;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.06.26.19.18.08;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.16.20.41.02;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.13.22.42.17;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.13.18.09.32;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.13.15.57.10;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.12.14.54.24;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.23.15.14.09;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.22.15.18.40;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.19.19.04.43;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.19.18.20.08;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.16.22.10.24;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.16.14.37.27;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.15.19.45.19;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.14.16.07.27;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.21.06.37;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.97
log
@Reduced heading comments.
@
text
@
//==============================================================================
// WIT-J Java Source File Operation.java.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import           java.util.*;

//==============================================================================
// Class Operation
//
// Represents an operation in an implosion problem.
//==============================================================================

public final class Operation extends Component
{
//==============================================================================
// Public Methods
//
// Class Hierarchy:
//
// ThreadedObject
//    PreservedObject
//       Component
//          Operation
//==============================================================================

//------------------------------------------------------------------------------
// newInstance (theProblem, theOpnName)
//
// Factory method: Constructs and returns a new Operation for the arguments.
//------------------------------------------------------------------------------

   public static Operation newInstance (Problem theProblem, String theOpnName)
      {
      try
         {
         notAllowedWhenTerminated                ("Operation.newInstance");
         mustBeActive  (theProblem, "theProblem", "Operation.newInstance");
         mustBeNonNull (theOpnName, "theOpnName", "Operation.newInstance");

         return new Operation (theProblem.getCoordinator (), theOpnName);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getBomEntries ()
//
// Returns an unmodifiable List of all the BomEntries associated with this
// Operation, listed in the order of creation.
//------------------------------------------------------------------------------

   public List <BomEntry> getBomEntries ()
      {
      try
         {
         mustBeActive ("Operation.getBomEntries");

         return unmodBomEntries;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getBopEntries ()
//
// Returns an unmodifiable List of all the BopEntries associated with this
// Operation, listed in the order of creation.
//------------------------------------------------------------------------------

   public List <BopEntry> getBopEntries ()
      {
      try
         {
         mustBeActive ("Operation.getBopEntries");

         return unmodBopEntries;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getBomEntriesTo (thePart)
//
// Creates and returns a List of all BomEntries from this Operation to thePart,
// listed in order of creation.
//------------------------------------------------------------------------------

   public List <BomEntry> getBomEntriesTo (Part thePart)
      {
      try
         {
         mustBeActive ("Operation.getBomEntriesTo");

         return thePart.findAssociatesIn (myBomEntries);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getBopEntriesTo (thePart)
//
// Creates and returns a List of all BopEntries from this Operation to thePart,
// listed in order of creation.
//------------------------------------------------------------------------------

   public List <BopEntry> getBopEntriesTo (Part thePart)
      {
      try
         {
         mustBeActive ("Operation.getBopEntriesTo");

         return thePart.findAssociatesIn (myBopEntries);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getUniqueBomEntryTo (thePart)
//
// If there is exactly one BomEntry from this Operation to thePart, it is
//    returned.
// If there are none, null is returned.
// If there are more than one, a StatusQuoExeption is thrown.
//------------------------------------------------------------------------------

   public BomEntry getUniqueBomEntryTo (Part thePart)
      {
      try
         {
         mustBeActive ("Operation.getUniqueBomEntryTo");

         return
            thePart.
               findUniqueAssociateIn (
                  myBomEntries,
                  "   theOperation.getUniqueBomEntryTo (thePart) was\n"
                + "   called where theOperation and thePart are connected\n"
                + "   by more than one BomEntry:");
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getUniqueBopEntryTo (thePart)
//
// If there is exactly one BopEntry from this Operation to thePart, it is
//    returned.
// If there are none, null is returned.
// If there are more than one, a StatusQuoExeption is thrown.
//------------------------------------------------------------------------------

   public BopEntry getUniqueBopEntryTo (Part thePart)
      {
      try
         {
         mustBeActive ("Operation.getUniqueBopEntryTo");

         return
            thePart.
               findUniqueAssociateIn (
                  myBopEntries,
                  "   theOperation.getUniqueBopEntryTo (thePart) was\n"
                + "   called where theOperation and thePart are connected\n"
                + "   by more than one BopEntry:");
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// restoreAfterPurge ()
//
// Override from class Component.
//------------------------------------------------------------------------------

   void restoreAfterPurge ()
      {
      removeInactive (myBomEntries);
      removeInactive (myBopEntries);
      }

//------------------------------------------------------------------------------
// toStringActive ().
//
// Override from class PreservedObject.
//------------------------------------------------------------------------------

   String toStringActive ()
      {
      return
         "Operation \""
       + myOperationName
       + "\"";
      }

//------------------------------------------------------------------------------
// getCompClassID
//
// Override from class Component.
//------------------------------------------------------------------------------

   CompClassID getCompClassID ()
      {
      return CompClassID.OPERATION;
      }

//------------------------------------------------------------------------------
// getComponentCOR
//
// Override from class Component.
//------------------------------------------------------------------------------

   ComponentCOR getComponentCOR ()
      {
      return myOperationCOR;
      }

//------------------------------------------------------------------------------
// deactivate
//
// Override from class PreservedObject.
//------------------------------------------------------------------------------

   void deactivate ()
      {
      myOperationCOR.deactivate ();
      super         .deactivate ();
      }

//------------------------------------------------------------------------------
// recordBomEntry (theBomEnt)
// recordBopEntry (theBopEnt)
//
// Each of these methods records the fact that the argument has been created.
//------------------------------------------------------------------------------

   void recordBomEntry (BomEntry theBomEnt)
      {
      assert (theBomEnt.getOperation () == this);

      myBomEntries.add (theBomEnt);
      }

   void recordBopEntry (BopEntry theBopEnt)
      {
      assert (theBopEnt.getOperation () == this);

      myBopEntries.add (theBopEnt);
      }

//------------------------------------------------------------------------------
// setOperationName
//
// Sets the OperationName of this Operation.
//------------------------------------------------------------------------------

   void setOperationName (String theOpnName)
      {
      myOperationCOR.setOperationName (theOpnName);

      myOperationName = theOpnName;
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   String getOperationName ()
      {
      return myOperationName;
      }

   OperationCOR getOperationCOR ()
      {
      return myOperationCOR;
      }

//==============================================================================
// Private Constructor
//==============================================================================

   private Operation (Coordinator theCoord, String theOpnName)
      {
      super (theCoord);

      myOperationName = theOpnName;

      myOperationCOR  =
         new OperationCOR (theCoord.getCoordinatorCOR (), theOpnName);

      myBomEntries    = new ArrayList <BomEntry> (0);
      myBopEntries    = new ArrayList <BopEntry> (0);

      unmodBomEntries = Collections.unmodifiableList (myBomEntries);
      unmodBopEntries = Collections.unmodifiableList (myBopEntries);

      getCoordinator ().recordOperation (this);
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myOperationName;
//
// The OperationName of this Operation.
//------------------------------------------------------------------------------

   private String myOperationName;

//------------------------------------------------------------------------------
// myOperationCOR.
//
// The OperationCOR that belongs to this Operation.
//------------------------------------------------------------------------------

   private final OperationCOR myOperationCOR;

//------------------------------------------------------------------------------
// myBomEntries
// myBopEntries
//
// A List of all BomEntries associated with this Operation.
// A List of all BopEntries associated with this Operation.
// The Components are listed in the order of creation.
//------------------------------------------------------------------------------

   private final ArrayList <BomEntry> myBomEntries;
   private final ArrayList <BopEntry> myBopEntries;

//------------------------------------------------------------------------------
// unmodBomEntries
// unmodBopEntries
//
// Unmodifiable views of:
//    myBomEntries
//    myBopEntries
//------------------------------------------------------------------------------

   private final List <BomEntry> unmodBomEntries;
   private final List <BopEntry> unmodBopEntries;

//==============================================================================
}
@


1.96
log
@Revised CppObjRep class ctors.
@
text
@a3 2
//
// Contains the declaration of class Operation.
@


1.95
log
@Further implementation of class ThreadedObject.
@
text
@d326 2
a327 1
      myOperationCOR  = new OperationCOR (this);
@


1.94
log
@Initial implementation of class ThreadedObject.
@
text
@d43 3
a45 4
         notAllowedWhenTerminated                  ("Operation.newInstance");
         Problem.
            mustBeActive (theProblem, "theProblem", "Operation.newInstance");
         mustBeNonNull   (theOpnName, "theOpnName", "Operation.newInstance");
@


1.93
log
@Made getBomEntriesTo, etc. return modifiable Lists.
@
text
@d27 4
a30 3
// PreservedObject
//    Component
//       Operation
@


1.92
log
@Removed lazy evaluation of unmodifiable views.
@
text
@d103 2
a104 2
// Creates and returns an unmodifiable List of all BomEntries from this
// Operation to thePart in order of creation.
d125 2
a126 2
// Creates and returns an unmodifiable List of all BopEntries from this
// Operation to thePart in order of creation.
@


1.91
log
@Replaced the throwExceptionFor method with getExeceptionToThrow.
@
text
@d60 1
a60 1
// Operation.
a68 3
         if (unmodBomEntries == null)
             unmodBomEntries = Collections.unmodifiableList (myBomEntries);

d82 1
a82 1
// Operation.
a90 3
         if (unmodBopEntries == null)
             unmodBopEntries = Collections.unmodifiableList (myBopEntries);

d331 3
d361 3
a363 2
// The list of all BomEntries associated with this Operation.
// The list of all BopEntries associated with this Operation.
a375 2
//
// The view Lists are created by lazy evaluation.
d378 2
a379 2
   private List <BomEntry> unmodBomEntries = null;
   private List <BopEntry> unmodBopEntries = null;
@


1.90
log
@Changed name of Java class WitjException to GeneralException.
@
text
@d50 1
a50 1
      catch (Throwable theThrowable)
d52 1
a52 3
         throwExceptionFor (theThrowable);

         return null;
d75 1
a75 1
      catch (Throwable theThrowable)
d77 1
a77 3
         throwExceptionFor (theThrowable);

         return null;
d100 1
a100 1
      catch (Throwable theThrowable)
d102 1
a102 3
         throwExceptionFor (theThrowable);

         return null;
d122 1
a122 1
      catch (Throwable theThrowable)
d124 1
a124 3
         throwExceptionFor (theThrowable);

         return null;
d144 1
a144 1
      catch (Throwable theThrowable)
d146 1
a146 3
         throwExceptionFor (theThrowable);

         return null;
d174 1
a174 1
      catch (Throwable theThrowable)
d176 1
a176 3
         throwExceptionFor (theThrowable);

         return null;
d204 1
a204 1
      catch (Throwable theThrowable)
d206 1
a206 3
         throwExceptionFor (theThrowable);

         return null;
@


1.89
log
@Removed the "enabled" concept from WIT-J.
@
text
@d52 3
a54 1
         throw getWitjExceptionFor (theThrowable);
d79 3
a81 1
         throw getWitjExceptionFor (theThrowable);
d106 3
a108 1
         throw getWitjExceptionFor (theThrowable);
d130 3
a132 1
         throw getWitjExceptionFor (theThrowable);
d154 3
a156 1
         throw getWitjExceptionFor (theThrowable);
d186 3
a188 1
         throw getWitjExceptionFor (theThrowable);
d218 3
a220 1
         throw getWitjExceptionFor (theThrowable);
@


1.88
log
@Changed name of Java class RetainedObject to PreservedObject.
@
text
@d42 4
a45 5
         notAllowedWhenTerminated ("Operation.newInstance");

         Problem.mustBeEnabled (theProblem,       "Operation.newInstance");

         mustBeNonNull (theOpnName, "theOpnName", "Operation.newInstance");
@


1.87
log
@theProblem.copyData (...).
@
text
@d27 1
a27 1
// RetainedObject
d230 1
a230 1
// Override from class RetainedObject.
d266 1
a266 1
// Override from class RetainedObject.
@


1.86
log
@Argument checking.
@
text
@d44 3
a46 3
         Problem.
            mustBeEnabled (theProblem,               "Operation.newInstance");
         mustBeNonNull    (theOpnName, "theOpnName", "Operation.newInstance");
@


1.85
log
@Minor revisions.
@
text
@d44 2
a45 1
         argMustBeEnabled (theProblem,               "Operation.newInstance");
@


1.84
log
@Replaced theProblem.getInstances (theClass) with theProblem.GetParts (),
etc.
@
text
@d275 2
a276 1
// record (theArg) methods
d278 1
a278 1
// Each of these methods records the fact that theArg has been created.
d281 1
a281 1
   void record (BomEntry theBomEnt)
d288 1
a288 1
   void record (BopEntry theBopEnt)
@


1.83
log
@Added:
   theOpn     .getUniqueBomEntryTo   (thePart)
   theOpn     .getUniqueBopEntryTo   (thePart)
   theBomEntry.getUniqueSubstituteTo (thePart)
@
text
@d59 1
a59 1
// Return an unmodifiable List of all the BomEntries associated with this
d84 1
a84 1
// Return an unmodifiable List of all the BopEntries associated with this
@


1.82
log
@Added:
   theOpn     .getBomEntriesTo  (thePart)
   theOpn     .getBopEntriesTo  (thePart)
   theBomEntry.getSubstitutesTo (thePart)
@
text
@d150 60
@


1.81
log
@Added theOpn.getBomEntriesTo (thePart).
@
text
@d119 23
a141 1
         return getBomEntriesToImpl (thePart);
a279 25
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// getBomEntriesToImpl (thePart)
//
// Internal implementation of getBomEntriesToImpl (thePart).
//------------------------------------------------------------------------------

   private List <BomEntry> getBomEntriesToImpl (Part thePart)
      {
      ArrayList <BomEntry> theBomEnts;

      theBomEnts = new ArrayList <BomEntry> (myBomEntries.size ());

      for (BomEntry theBomEnt: myBomEntries)
         if (theBomEnt.getPart () == thePart)
            theBomEnts.add (theBomEnt);

      theBomEnts.trimToSize ();

      return Collections.unmodifiableList (theBomEnts);
      }

//==============================================================================
@


1.80
log
@Implemented theProblem.getInstances (theCompClass).
@
text
@d106 22
d258 25
@


1.79
log
@Removed:
   theOpn     .nBomEntries  ()
   theOpn     .nBopEntries  ()
   theBomEntry.nSubstitutes ()
@
text
@d232 1
a232 1
      getCoordinator ().record (this);
@


1.78
log
@Removed:
   theOpn     .getBomEntry   (theIdx)
   theOpn     .getBopEntry   (theIdx)
   theBomEntry.getSubstitute (theIdx)
@
text
@a203 18
// nBomEntries
// nBopEntries
//
// Returns the # of BomEntries for this Operation.
// Returns the # of BopEntries for this Operation.
//------------------------------------------------------------------------------

   int nBomEntries ()
      {
      return myBomEntries.size ();
      }

   int nBopEntries ()
      {
      return myBopEntries.size ();
      }

//------------------------------------------------------------------------------
@


1.77
log
@Replaced Attribute.getAllAttributes () with Attribute.getAttributes (),
which returns an unmodifiable List.
@
text
@a105 66
//------------------------------------------------------------------------------
// getBomEntry (theBomIndex)
//
// Returns the BomEntry that's associated with this Operation and whose bomIndex
// matches theBomIndex, if any; otherwise terminates with an error message.
//------------------------------------------------------------------------------

   public BomEntry getBomEntry (int theBomIndex)
      {
      try
         {
         mustBeActive ("Operation.getBomEntry");

         if ((theBomIndex <  0) || (theBomIndex >= myBomEntries.size ()))
            throw
               new StatusQuoException (
                  "   Operation.getBomEntry (theBomIndex) was called\n"
                + "   where theBomIndex was out of range.\n"
                + "\n"
                + "      Operation:   " +  this        + "\n"
                + "      theBomIndex: " +  theBomIndex + "\n"
                + "      Valid Range: 0 <= theBomIndex < "
                +        myBomEntries.size ());

         return myBomEntries.get (theBomIndex);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getBopEntry (theBopIndex)
//
// Returns the BopEntry that's associated with this Operation and whose bopIndex
// matches theBopIndex, if any; otherwise terminates with an error message.
//------------------------------------------------------------------------------

   public BopEntry getBopEntry (int theBopIndex)
      {
      try
         {
         mustBeActive ("Operation.getBopEntry");

         if ((theBopIndex <  0) || (theBopIndex >= myBopEntries.size ()))
            throw
               new StatusQuoException (
                  "   Operation.getBopEntry (theBopIndex) was called\n"
                + "   where theBopIndex was out of range.\n"
                + "\n"
                + "      Operation:   " +  this        + "\n"
                + "      theBopIndex: " +  theBopIndex + "\n"
                + "      Valid Range: 0 <= theBopIndex < "
                +        myBopEntries.size ());

         return myBopEntries.get (theBopIndex);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

@


1.76
log
@Changed the following methods to return an unmodifiable List:

   thePart     .getDemands     ()
   thePart     .getBomEntries  ()
   thePart     .getSubstitutes ()
   thePart     .getBopEntries  ()
   theOperation.getBomEntries  ()
   theOperation.getBopEntries  ()
   theBomEntry .getSubstitutes ()
@
text
@d358 1
a358 1
// The view Lists are constructed by lazy evaluation.
@


1.75
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d59 2
a60 1
// Returns an array of all the BomEntries associated with this Operation.
d63 1
a63 1
   public BomEntry[] getBomEntries ()
d69 4
a72 1
         return myBomEntries.toArray (new BomEntry[0]);
d84 2
a85 1
// Returns an array of all the BopEntries associated with this Operation.
d88 1
a88 1
   public BopEntry[] getBopEntries ()
d94 4
a97 1
         return myBopEntries.toArray (new BopEntry[0]);
d350 14
@


1.74
log
@Changed name of Problem method shutDown to deactivate.
@
text
@d20 1
a20 1
public final class Operation extends Element
d28 1
a28 1
//    Element
d171 1
a171 1
// Override from class Element.
d195 1
a195 1
// getElemClassID
d197 1
a197 1
// Override from class Element.
d200 1
a200 1
   ElemClassID getElemClassID ()
d202 1
a202 1
      return ElemClassID.OPERATION;
d206 1
a206 1
// getElementCOR
d208 1
a208 1
// Override from class Element.
d211 1
a211 1
   ElementCOR getElementCOR ()
@


1.73
log
@purgeData
@
text
@d217 1
a217 1
// shutDown
d222 1
a222 1
   void shutDown ()
d224 2
a225 2
      myOperationCOR.shutDown ();
      super         .shutDown ();
@


1.72
log
@purgeData
@
text
@d339 2
a340 2
   private ArrayList <BomEntry> myBomEntries = null;
   private ArrayList <BopEntry> myBopEntries = null;
@


1.71
log
@purgeData
@
text
@d176 2
a177 2
      myBomEntries = activeOnly (myBomEntries);
      myBopEntries = activeOnly (myBopEntries);
@


1.70
log
@purgeData
@
text
@a163 21
//------------------------------------------------------------------------------
// toString ().
//
// Override from class Object.
//------------------------------------------------------------------------------

   public String toString ()
      {
      try
         {
         notAllowedWhenTerminated ("Operation.toString");

         return "Operation \"" + myOperationName + "\"";
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

d181 14
@


1.69
log
@purgeData
@
text
@a196 3
      int theBomIdx;
      int theBopIdx;

a197 10

      theBomIdx = 0;

      for (BomEntry theBomEnt: myBomEntries)
         {
         theBomEnt.setBomIndex (theBomIdx);

         theBomIdx ++;
         }

a198 9

      theBopIdx = 0;

      for (BopEntry theBopEnt: myBopEntries)
         {
         theBopEnt.setBopIndex (theBopIdx);

         theBopIdx ++;
         }
@


1.68
log
@purgeData
@
text
@d197 3
d201 10
d212 9
@


1.67
log
@purgeData
@
text
@d190 1
a190 1
// reconcileForPurge ()
d195 1
a195 1
   void reconcileForPurge ()
d197 2
a198 4
      myBomEntries.clear ();
      myBopEntries.clear ();

      assert (false);
d346 2
a347 2
   private final List <BomEntry> myBomEntries;
   private final List <BopEntry> myBopEntries;
@


1.66
log
@Coordinator
@
text
@d190 14
@


1.65
log
@Coordinator
@
text
@d292 1
a292 1
   private Operation (Coordinator theCoordinator, String theOpnName)
d294 1
a294 1
      super (theCoordinator);
@


1.64
log
@Removed java class ElementMgr, moving its responsibilities to class
Coordinator.
@
text
@d47 1
a47 1
         return new Operation (theProblem, theOpnName);
d292 1
a292 1
   private Operation (Problem theProblem, String theOpnName)
d294 1
a294 1
      super (theProblem.getCoordinator ());
@


1.63
log
@Changed a Java class name: WitjAbortsException ==> TerminalException
@
text
@d294 1
a294 1
      super (theProblem.getElementMgr ());
d303 1
a303 1
      getElementMgr ().record (this);
@


1.62
log
@Changed class name: NonFunctionalException ==> WitjAbortsException
@
text
@d42 1
a42 1
         witjAbortedNotAllowed ("Operation.newInstance");
d174 1
a174 1
         witjAbortedNotAllowed ("Operation.toString");
@


1.61
log
@Minor revision.
@
text
@d42 1
a42 1
         witjMustBeFunctional ("Operation.newInstance");
d174 1
a174 1
         witjMustBeFunctional ("Operation.toString");
@


1.60
log
@Added text to the detail message of StatusQuoExceptions.
@
text
@d27 3
a29 3
//    RetainedObject
//       Element
//          Operation
@


1.59
log
@Changed name of class IntactException to StatusQuoException.
@
text
@d112 9
a120 9
            throw new StatusQuoException (
               "\n\n"
             + "   Operation.getBomEntry (theBomIndex) was called\n"
             + "   where theBomIndex was out of range.\n"
             + "\n"
             + "      Operation:   " +  this        + "\n"
             + "      theBomIndex: " +  theBomIndex + "\n"
             + "      Valid Range: 0 <= theBomIndex < " + myBomEntries.size ()
             + "\n");
d145 9
a153 9
            throw new StatusQuoException (
               "\n\n"
             + "   Operation.getBopEntry (theBopIndex) was called\n"
             + "   where theBopIndex was out of range.\n"
             + "\n"
             + "      Operation:   " +  this        + "\n"
             + "      theBopIndex: " +  theBopIndex + "\n"
             + "      Valid Range: 0 <= theBopIndex < " + myBopEntries.size ()
             + "\n");
@


1.58
log
@Added the uniform try block whereever it was needed.
@
text
@d112 1
a112 1
            throw new IntactException (
d145 1
a145 1
            throw new IntactException (
@


1.57
log
@Added a call to witjMustBeFunctional whereever it was needed.
@
text
@d40 14
a53 6
      witjMustBeFunctional ("Operation.newInstance");

      argMustBeEnabled (theProblem,               "Operation.newInstance");
      mustBeNonNull    (theOpnName, "theOpnName", "Operation.newInstance");

      return new Operation (theProblem, theOpnName);
d64 11
a74 3
      mustBeActive ("Operation.getBomEntries");

      return myBomEntries.toArray (new BomEntry[0]);
d85 11
a95 3
      mustBeActive ("Operation.getBopEntries");

      return myBopEntries.toArray (new BopEntry[0]);
d107 22
a128 14
      mustBeActive ("Operation.getBomEntry");

      if ((theBomIndex <  0) || (theBomIndex >= myBomEntries.size ()))
         throw new IntactException (
            "\n\n"
          + "   Operation.getBomEntry (theBomIndex) was called\n"
          + "   where theBomIndex was out of range.\n"
          + "\n"
          + "      Operation:   " +  this        + "\n"
          + "      theBomIndex: " +  theBomIndex + "\n"
          + "      Valid Range: 0 <= theBomIndex < " + myBomEntries.size ()
          + "\n");

      return myBomEntries.get (theBomIndex);
d140 22
a161 14
      mustBeActive ("Operation.getBopEntry");

      if ((theBopIndex <  0) || (theBopIndex >= myBopEntries.size ()))
         throw new IntactException (
            "\n\n"
          + "   Operation.getBopEntry (theBopIndex) was called\n"
          + "   where theBopIndex was out of range.\n"
          + "\n"
          + "      Operation:   " +  this        + "\n"
          + "      theBopIndex: " +  theBopIndex + "\n"
          + "      Valid Range: 0 <= theBopIndex < " + myBopEntries.size ()
          + "\n");

      return myBopEntries.get (theBopIndex);
d172 11
a182 3
      witjMustBeFunctional ("Operation.toString");

      return "Operation \"" + myOperationName + "\"";
@


1.56
log
@Changed class names:
   HarmlessException ==> IntactException
   UnknownException  ==> UnexpectedException
@
text
@d40 2
d132 2
@


1.55
log
@Replaced standard Exceptions with HarmlessExceptions in throw statements.
@
text
@d84 1
a84 1
         throw new HarmlessException (
d109 1
a109 1
         throw new HarmlessException (
@


1.54
log
@Exceptions
@
text
@d84 1
a84 1
         throw new IndexOutOfBoundsException (
d109 1
a109 1
         throw new IndexOutOfBoundsException (
@


1.53
log
@Minor changes.
@
text
@d84 3
a86 2
         abortWmsg (
            "   Operation.getBomEntry (theBomIndex) was called\n"
d91 2
a92 1
          + "      Valid Range: 0 <= theBomIndex < " + myBomEntries.size ());
d109 3
a111 2
         abortWmsg (
            "   Operation.getBopEntry (theBopIndex) was called\n"
d116 2
a117 1
          + "      Valid Range: 0 <= theBopIndex < " + myBopEntries.size ());
@


1.52
log
@Removed class Session from the public interface.
@
text
@d134 1
a134 1
// getElemClassID ()
d145 1
a145 1
// getElementCOR ().
d156 1
a156 1
// shutDown ().
d188 1
a188 1
// setOperationName (...)
d201 2
a202 2
// nBomEntries ()
// nBopEntries ()
@


1.51
log
@Conditional expressions.
@
text
@d40 2
a41 2
      argMustBeActive (theProblem, "theProblem", "Operation.newInstance");
      mustBeNonNull   (theOpnName, "theOpnName", "Operation.newInstance");
@


1.50
log
@Made bomIndex, subIndex, and bopIndex into formal attributes.
@
text
@d83 1
a83 1
      if ((theBomIndex <  0)|| (theBomIndex >= myBomEntries.size ()))
d106 1
a106 1
      if ((theBopIndex <  0)|| (theBopIndex >= myBopEntries.size ()))
@


1.49
log
@Call-back infrastructure.
@
text
@d75 1
a75 1
// Returns the BomEntry that's associated with this Operation and whose BomIndex
d98 1
a98 1
// Returns the BopEntry that's associated with this Operation and whose BopIndex
@


1.48
log
@Call-back infrastructure.
@
text
@a249 28
//------------------------------------------------------------------------------
// newBomEntry (thePart)
//
// Factory method:
// Constructs and returns a new BomEntry for this Operation and thePart.
//
// Intended for invocation from WIT-J/C++.
//------------------------------------------------------------------------------

   private BomEntry newBomEntry (Part thePart)
      {
      return BomEntry.newInstance (this, thePart);
      }

//------------------------------------------------------------------------------
// newBopEntry (thePart)
//
// Factory method:
// Constructs and returns a new BopEntry for this Operation and thePart.
//
// Intended for invocation from WIT-J/C++.
//------------------------------------------------------------------------------

   private BopEntry newBopEntry (Part thePart)
      {
      return BopEntry.newInstance (this, thePart);
      }

@


1.47
log
@Revised factory methods.
@
text
@a233 4
//
// Arguments:
//    theProblem: The Problem for the Operation
//    theOpnName: The OperationName of the Operation
@


1.46
log
@Name change.
@
text
@d33 1
a33 1
// newBomEntry (thePart)
d35 1
a35 2
// Factory method:
// Constructs and returns a new BomEntry for this Operation and thePart.
d38 1
a38 1
   public BomEntry newBomEntry (Part thePart)
d40 2
a41 1
      int theBomIndex;
d43 1
a43 25
      mustBeActive                                 ("Operation.newBomEntry");
      argMustBelongToMyProblem (thePart, "thePart", "Operation.newBomEntry");

      theBomIndex = myBomEntries.size ();

      return new BomEntry (this, theBomIndex, thePart);
      }

//------------------------------------------------------------------------------
// newBopEntry (thePart)
//
// Factory method:
// Constructs and returns a new BopEntry for this Operation and thePart.
//------------------------------------------------------------------------------

   public BopEntry newBopEntry (Part thePart)
      {
      int theBopIndex;

      mustBeActive                                 ("Operation.newBopEntry");
      argMustBelongToMyProblem (thePart, "thePart", "Operation.newBopEntry");

      theBopIndex = myBopEntries.size ();

      return new BopEntry (this, theBopIndex, thePart);
a129 22
// Package-Internal Constructor
//
// Arguments:
//    theProblem: The Problem for the Operation
//    theOpnName: The OperationName of the Operation
//==============================================================================

   Operation (Problem theProblem, String theOpnName)
      {
      super (theProblem.getElementMgr ());

      myOperationName = theOpnName;

      myOperationCOR  = new OperationCOR (this);

      myBomEntries    = new ArrayList <BomEntry> (0);
      myBopEntries    = new ArrayList <BopEntry> (0);

      getElementMgr ().record (this);
      }

//==============================================================================
d201 18
d222 1
a222 1
   public String getOperationName ()
d233 50
@


1.45
log
@Changed name of Component to Entity.
@
text
@d20 1
a20 1
public final class Operation extends Entity
d28 1
a28 1
//       Entity
d163 1
a163 1
      super (theProblem.getEntityMgr ());
d172 1
a172 1
      getEntityMgr ().record (this);
d180 1
a180 1
// getEntityClassID ()
d182 1
a182 1
// Override from class Entity.
d185 1
a185 1
   EntityClassID getEntityClassID ()
d187 1
a187 1
      return EntityClassID.OPERATION;
d191 1
a191 1
// getEntityCOR ().
d193 1
a193 1
// Override from class Entity.
d196 1
a196 1
   EntityCOR getEntityCOR ()
@


1.44
log
@Implemented extraction of BOP entries.
@
text
@d20 1
a20 1
public final class Operation extends Component
d28 1
a28 1
//       Component
d163 1
a163 1
      super (theProblem.getCompMgr ());
d172 1
a172 1
      getCompMgr ().record (this);
d180 1
a180 1
// getCompClassID ()
d182 1
a182 1
// Override from class Component.
d185 1
a185 1
   CompClassID getCompClassID ()
d187 1
a187 1
      return CompClassID.OPERATION;
d191 1
a191 1
// getCompCOR ().
d193 1
a193 1
// Override from class Component.
d196 1
a196 1
   ComponentCOR getCompCOR ()
@


1.43
log
@Implemented extraction of BOM entries.
@
text
@d60 2
d65 3
a67 1
      return new BopEntry (this, thePart);
a246 11
// getNBopEntries ()
//
// Returns the # of BopEntries associated with this Operation.
//------------------------------------------------------------------------------

   int getNBopEntries ()
      {
      return myBopEntries.size ();
      }

//------------------------------------------------------------------------------
@


1.42
log
@Call-back infrastructure.
@
text
@d41 2
d44 1
d46 1
a46 1
      argMustBelongToMyProblem (thePart, "thePart", "Operation.newBomEntry");
d48 1
a48 1
      return new BomEntry (this, thePart);
a242 1
// getNBomEntries ()
a244 1
// Returns the # of BomEntries associated with this Operation.
a247 5
   int getNBomEntries ()
      {
      return myBomEntries.size ();
      }

@


1.41
log
@Call-back infrastructure.
@
text
@a151 2
//
// To be called from theProblem.newOperation (theOpnName) only.
@


1.40
log
@Numerous class name changes.
@
text
@a159 2
      ProblemCOR theProblemCOR;

d162 1
a162 3
      theProblemCOR   = theProblem.getProblemCOR ();

      myOperationCOR  = new OperationCOR (theProblemCOR, theOpnName);
@


1.39
log
@Implemented theBomEnt.getSubstitute (theSubIndex).
@
text
@d160 1
a160 1
      ProblemCI theProblemCI;
d164 1
a164 1
      theProblemCI    = theProblem.getProblemCI ();
d166 1
a166 1
      myOperationCI   = new OperationCI (theProblemCI, theOpnName);
d190 1
a190 1
// getCompCI ().
d195 1
a195 1
   ComponentCI getCompCI ()
d197 1
a197 1
      return myOperationCI;
d208 2
a209 2
      myOperationCI.shutDown ();
      super        .shutDown ();
d240 1
a240 1
      myOperationCI.setOperationName (theOpnName);
d272 1
a272 1
   OperationCI getOperationCI ()
d274 1
a274 1
      return myOperationCI;
d290 1
a290 1
// myOperationCI.
d292 1
a292 1
// The OperationCI that belongs to this Operation.
d295 1
a295 1
   private final OperationCI myOperationCI;
@


1.38
log
@Implemented theBomEnt.getSubstitutes ().
@
text
@d90 1
a90 1
// getBomEntry ()
d92 2
a93 1
// Returns an array of all the BomEntries associated with this Operation.
d113 1
a113 1
// getBopEntry ()
d115 2
a116 1
// Returns an array of all the BopEntries associated with this Operation.
@


1.37
log
@Implemented theOpn.getBopEntry (theBopIndex).
@
text
@d244 5
a248 1
// Accessors.
d251 1
a251 1
   public String getOperationName ()
d253 1
a253 1
      return myOperationName;
d256 1
a256 1
   OperationCI getOperationCI ()
d258 1
a258 1
      return myOperationCI;
d261 5
a265 1
   int getNBomEntries ()
d267 1
a267 1
      return myBomEntries.size ();
d270 1
a270 1
   int getNBopEntries ()
d272 1
a272 1
      return myBopEntries.size ();
@


1.36
log
@Implemented theOpn.getBomEntry (theBomIndex).
@
text
@d112 22
@


1.35
log
@Implemented theOpn.getBomEntries ().
Implemented theOpn.getBopEntries ().
@
text
@d90 22
@


1.34
log
@Implemented thePart.getDemands ().
@
text
@d12 2
d64 26
d122 2
a123 2
      myNBomEntries = 0;
      myNBopEntries = 0;
d167 1
a167 1
// recNewBomEnt ()
d169 1
a169 1
// Records the fact that a new BomEntry for this Operation has been created.
d172 1
a172 1
   void recNewBomEnt ()
d174 3
a176 1
      myNBomEntries ++;
d179 3
a181 5
//------------------------------------------------------------------------------
// recNewBopEnt ()
//
// Records the fact that a new BopEntry for this Operation has been created.
//------------------------------------------------------------------------------
d183 1
a183 3
   void recNewBopEnt ()
      {
      myNBopEntries ++;
d215 1
a215 1
      return myNBomEntries;
d220 1
a220 1
      return myNBopEntries;
d244 2
a245 9
// myNBomEntries.
//
// The # of BomEntries for this Operation.
//------------------------------------------------------------------------------

   private int myNBomEntries;

//------------------------------------------------------------------------------
// myNBopEntries.
d247 2
a248 1
// The # of BopEntries for this Operation.
d251 2
a252 1
   private int myNBopEntries;
@


1.33
log
@Implemented theProblem.getPart (thePartName).
@
text
@d97 1
a97 1
      getCompMgr ().add (this);
@


1.32
log
@Active state / shutDown method.
@
text
@d96 2
@


1.31
log
@Revised the use of class CTVecRes.
@
text
@d39 1
a39 1
      mustBeUnreleased                             ("Operation.newBomEntry");
d55 1
a55 1
      mustBeUnreleased                             ("Operation.newBopEntry");
d125 1
a125 1
// release ().
d130 1
a130 1
   void release ()
d132 2
a133 2
      myOperationCI.release ();
      super        .release ();
@


1.30
log
@Added verification that arguments belong to the same Problem.
@
text
@d86 1
a86 1
      SessionCI theSessionCI;
d90 1
a90 1
      theSessionCI    = theProblem.getSession ().getSessionCI ();
d92 1
a92 1
      myOperationCI   = new OperationCI (theSessionCI, theOpnName);
@


1.29
log
@Revised the factory methods.
@
text
@d39 3
a41 2
         mustBeUnreleased                     ("Operation.newBomEntry");
      argMustBeUnreleased (thePart, "thePart", "Operation.newBomEntry");
d55 2
a56 2
         mustBeUnreleased                     ("Operation.newBopEntry");
      argMustBeUnreleased (thePart, "thePart", "Operation.newBopEntry");
@


1.28
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@d31 1
a31 1
// makeInstance (theProblem, theOpnName)
d33 17
a49 4
// Factory method: Constructs and returns a new Operation.
// Arguments:
//    theProblem: The Problem that will own the Operation
//    theOpnName: The OperationName of the Operation
d52 1
a52 3
   public static Operation makeInstance (
         Problem theProblem,
         String  theOpnName)
d54 2
a55 2
      argMustBeUnreleased (theProblem, "theProblem", "Operation.makeInstance");
      mustBeNonNull       (theOpnName, "theOpnName", "Operation.makeInstance");
d57 1
a57 1
      return new Operation (theProblem, theOpnName);
d72 26
a194 24
// Private Constructor
//
// Arguments:
//    theProblem: The Problem for the Operation
//    theOpnName: The OperationName of the Operation
//==============================================================================

   private Operation (Problem theProblem, String theOpnName)
      {
      super (theProblem.getCompMgr ());

      SessionCI theSessionCI;

      myOperationName = theOpnName;

      theSessionCI    = theProblem.getSession ().getSessionCI ();

      myOperationCI   = new OperationCI (theSessionCI, theOpnName);

      myNBomEntries = 0;
      myNBopEntries = 0;
      }

//==============================================================================
@


1.27
log
@Moved onwership of the ProbCoordCI from class Problem to class Session.
@
text
@d169 1
a169 1
      ProbCoordCI theProbCoordCI;
d173 1
a173 1
      theProbCoordCI  = theProblem.getSession ().getProbCoordCI ();
d175 1
a175 1
      myOperationCI   = new OperationCI (theProbCoordCI, theOpnName);
@


1.26
log
@Removed Java class ProbCoord.
@
text
@d169 2
d173 3
a175 4
      myOperationCI   =
         new OperationCI (
            theProblem.getProbCoordCI (),
            theOpnName);
@


1.25
log
@Initial implementation of the Session classes.
@
text
@d46 1
a46 1
      return new Operation (theProblem.getProbCoord (), theOpnName);
d161 2
a162 2
//    theProbCoord: The ProbCoord for the Operation
//    theOpnName:   The OperationName of the Operation
d165 1
a165 1
   private Operation (ProbCoord theProbCoord, String theOpnName)
d167 1
a167 1
      super (theProbCoord.getCompMgr ());
d173 1
a173 1
            theProbCoord.getProbCoordCI (),
@


1.24
log
@Terminology change.
@
text
@d158 1
a158 5
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// Constructor.
d163 1
a163 1
//------------------------------------------------------------------------------
@


1.23
log
@Added checking for null arguments.
@
text
@d25 1
a25 1
//    VitalObject
d43 1
a43 1
      mustBeNonNullActive (theProblem, "theProblem", "Operation.makeInstance");
d87 1
a87 1
// shutDown ().
d89 1
a89 1
// Override from class VitalObject.
d92 1
a92 1
   void shutDown ()
d94 2
a95 2
      myOperationCI.shutDown ();
      super        .shutDown ();
@


1.22
log
@Replaced class PublicObject with class VitalObject.
@
text
@d44 1
@


1.21
log
@Replaced toStringActive () with toString ().
@
text
@d25 1
a25 1
//    PublicObject
d88 1
a88 1
// Override from class PublicObject.
@


1.20
log
@"operationName" attribute.
@
text
@d49 15
a84 4
//==============================================================================
// Package-Internal Methods
//==============================================================================

a155 11
//------------------------------------------------------------------------------
// toStringActive ().
//
// Override from class PublicObject.
//------------------------------------------------------------------------------

   String toStringActive ()
      {
      return "Operation \"" + myOperationName + "\"";
      }

@


1.19
log
@Revised the shut-down model.
@
text
@d31 1
a31 1
// makeInstance (theProblem, theOperationName)
d35 2
a36 2
//    theProblem:       The Problem that will own the Operation
//    theOperationName: The operationName of the Operation
d41 1
a41 1
         String  theOperationName)
d45 1
a45 1
      return new Operation (theProblem.getProbCoord (), theOperationName);
a69 11
//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   public String getOperationName ()
      {
      mustBeActive ("Operation.getOperationName");

      return myOperationName;
      }

d109 13
d125 5
d164 2
a165 2
//    theProbCoord:     The ProbCoord for the Operation
//    theOperationName: The operationName of the Operation
d168 1
a168 1
   private Operation (ProbCoord theProbCoord, String theOperationName)
d172 1
a172 1
      myOperationName = theOperationName;
d174 1
a174 1
      myOperationCI =
d177 1
a177 1
            theOperationName);
d190 1
a190 1
// The operationName of this Operation.
@


1.18
log
@Implemented Utility class.
@
text
@a93 3

      myOperationCI = null;

d194 1
a194 1
   private OperationCI myOperationCI;
@


1.17
log
@Made accessor names begin with "get".
@
text
@d8 3
a10 1
package com.ibm.witj;
@


1.16
log
@Minor update.
@
text
@d29 1
a29 1
// makeInstance (theProblem, operationNameVal)
d34 1
a34 1
//    operationNameVal: The operationName of the Operation
d39 1
a39 1
         String  operationNameVal)
d43 1
a43 1
      return new Operation (theProblem.myProbCoord (), operationNameVal);
d47 1
a47 1
// myCompClassID ()
d52 1
a52 1
   CompClassID myCompClassID ()
d58 1
a58 1
// myCompCI ().
d63 1
a63 1
   ComponentCI myCompCI ()
d72 1
a72 1
   public String operationName ()
d74 1
a74 1
      mustBeActive ("Operation.operationName");
d76 1
a76 1
      return operationName;
d106 1
a106 1
      nBomEntries ++;
d117 1
a117 1
      nBopEntries ++;
d121 1
a121 3
// myOperationCI ().
//
// Accessor.
d124 1
a124 1
   OperationCI myOperationCI ()
d129 1
a129 7
//------------------------------------------------------------------------------
// nBomEntries ().
//
// Accessor.
//------------------------------------------------------------------------------

   int nBomEntries ()
d131 1
a131 1
      return nBomEntries;
d134 1
a134 7
//------------------------------------------------------------------------------
// nBopEntries ().
//
// Accessor.
//------------------------------------------------------------------------------

   int nBopEntries ()
d136 1
a136 1
      return nBopEntries;
d147 1
a147 1
      return "Operation \"" + operationName + "\"";
d158 2
a159 2
//    theProbCoord:  The ProbCoord for the Operation
//    operationName: The operationName of the Operation
d162 1
a162 1
   private Operation (ProbCoord theProbCoord, String operationNameVal)
d164 1
a164 1
      super (theProbCoord.myCompMgr ());
d166 1
a166 1
      operationName = operationNameVal;
d170 2
a171 2
            theProbCoord.myProbCoordCI (),
            operationNameVal);
d173 2
a174 2
      nBomEntries = 0;
      nBopEntries = 0;
d182 1
a182 1
// operationName;
d184 1
a184 1
// The name of this Operation.
d187 1
a187 1
   private String operationName;
d198 1
a198 1
// nBomEntries.
d203 1
a203 1
   private int nBomEntries;
d206 1
a206 1
// nBopEntries.
d211 1
a211 1
   private int nBopEntries;
@


1.15
log
@Attributes.
@
text
@d69 1
a69 3
// operationName ().
//
// Accessor.
@


1.14
log
@Created Java class CompMgr.
@
text
@d47 1
a47 1
// setExecCost (...)
d49 1
a49 1
// Wrapper for witSetOperationExecCostDbl (...).
d52 1
a52 1
   public void setExecCost (double[] execCostVal)
d54 1
a54 33
      mustBeActive ("Operation.setExecCost");

      if (execCostVal.length != nPeriods ())
         abortWmsg (
              "   Operation.setExecCost (...) was called with an array whose\n"
            + "   length does not match nPeriods for the Problem.\n"
            + "\n"
            + "      Array Length: "
            + execCostVal.length
            + "\n"
            + "      nPeriods:     "
            + nPeriods ());

      myOperationCI.setExecCost (execCostVal);
      }

//------------------------------------------------------------------------------
// getExecCost ()
//
// Wrapper for witGetOperationExecCostDbl (...).
//------------------------------------------------------------------------------

   public double[] getExecCost ()
      {
      double[] execCostVal;

      mustBeActive ("Operation.getExecCost");

      execCostVal = new double[nPeriods ()];
      
      myOperationCI.getExecCost (execCostVal);

      return execCostVal;
@


1.13
log
@Attributes.
@
text
@d212 1
a212 1
      super (theProbCoord);
@


1.12
log
@Removed class LTPubObject.
@
text
@d90 11
d240 1
a240 1
// The C++ Operation interface that belongs to this Operation.
@


1.11
log
@Added Java class LTPubObject.
@
text
@d24 2
a25 3
//       LTPubObject
//          Component
//             Operation
@


1.10
log
@Comments, etc.
@
text
@d24 3
a26 2
//       Component
//          Operation
@


1.9
log
@*** empty log message ***
@
text
@d1 7
@


1.8
log
@*** empty log message ***
@
text
@d82 13
@


1.7
log
@*** empty log message ***
@
text
@d113 11
d146 11
d191 1
d222 8
@


1.6
log
@*** empty log message ***
@
text
@d95 3
d189 1
a189 1
   private final OperationCI myOperationCI;
@


1.5
log
@*** empty log message ***
@
text
@a39 11
// toString ().
//
// Override from class Object.
//------------------------------------------------------------------------------

   public String toString ()
      {
      return "Operation \"" + operationName + "\"";
      }

//------------------------------------------------------------------------------
d131 11
@


1.4
log
@*** empty log message ***
@
text
@d109 33
d158 3
a160 1
      myOperationCI      =
d165 1
a165 1
      operationName = operationNameVal;
d188 8
@


1.3
log
@*** empty log message ***
@
text
@d16 1
a16 1
//    ExportedObject
d100 1
a100 1
// Override from class ExportedObject.
@


1.2
log
@*** empty log message ***
@
text
@d36 1
a36 1
      return new Operation (theProblem, operationNameVal);
d117 1
a117 1
//    theProblem:    The Problem that will own the Operation
d121 1
a121 1
   private Operation (Problem theProblem, String operationNameVal)
d123 1
a123 1
      super (theProblem.myProbCoord ());
d127 1
a127 1
            theProblem.myProblemCI (),
d148 1
a148 1
// The Java interface to the C++ Operation that belongs to this Operation.
@


1.1
log
@*** empty log message ***
@
text
@d123 1
a123 1
      super (theProblem.myCompMgr ());
@

