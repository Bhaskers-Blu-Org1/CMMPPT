head	1.90;
access;
symbols;
locks; strict;
comment	@# @;


1.90
date	2011.05.02.18.32.24;	author rjw;	state Exp;
branches;
next	1.89;

1.89
date	2011.03.30.16.20.50;	author rjw;	state Exp;
branches;
next	1.88;

1.88
date	2011.03.28.15.57.20;	author rjw;	state Exp;
branches;
next	1.87;

1.87
date	2011.03.25.22.49.29;	author rjw;	state Exp;
branches;
next	1.86;

1.86
date	2011.03.22.22.24.13;	author rjw;	state Exp;
branches;
next	1.85;

1.85
date	2011.03.09.22.35.36;	author rjw;	state Exp;
branches;
next	1.84;

1.84
date	2010.04.13.23.10.43;	author rjw;	state Exp;
branches;
next	1.83;

1.83
date	2009.09.29.20.43.56;	author rjw;	state Exp;
branches;
next	1.82;

1.82
date	2009.06.04.23.04.22;	author rjw;	state Exp;
branches;
next	1.81;

1.81
date	2009.06.03.19.51.24;	author rjw;	state Exp;
branches;
next	1.80;

1.80
date	2009.06.02.21.57.30;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2009.05.29.23.42.01;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2009.05.29.21.59.17;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2009.05.12.19.29.51;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2009.05.12.15.57.57;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2009.05.05.20.17.06;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2009.04.17.15.38.24;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2009.04.10.16.16.19;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2009.03.19.20.45.27;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2009.03.13.19.32.21;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2009.03.12.19.02.42;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2009.03.06.23.23.04;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2009.03.06.15.43.25;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2009.03.05.22.31.31;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2009.03.05.21.31.43;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2009.03.05.17.21.27;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2009.02.25.18.30.39;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2009.02.25.16.55.19;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2009.02.25.16.47.16;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2009.02.24.22.18.45;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2009.02.24.17.44.57;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2009.02.21.01.00.56;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2009.02.20.17.18.44;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2009.02.19.17.39.21;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2009.02.18.17.00.44;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2009.02.14.00.51.30;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2009.02.06.23.27.12;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2009.02.06.22.40.59;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2009.02.04.21.51.54;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2009.02.04.20.16.01;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2009.01.22.23.12.41;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2008.12.16.23.43.04;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2008.12.16.16.13.30;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2008.12.15.15.35.33;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2008.12.11.15.37.40;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2008.12.10.20.54.09;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2008.12.03.18.55.08;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2008.10.09.21.20.22;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2008.10.07.18.50.26;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2008.10.06.22.14.05;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2008.09.30.15.17.42;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2008.09.29.22.43.47;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2008.09.26.22.21.25;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.09.18.16.01.32;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.09.12.16.09.36;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2008.09.11.19.10.25;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.09.08.19.45.36;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.09.05.22.06.51;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.09.05.15.53.04;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.09.03.20.18.06;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.09.03.18.03.08;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.08.29.18.36.43;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.08.29.17.19.07;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.08.19.22.14.32;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.08.18.22.16.57;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.06.30.22.02.11;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.06.30.19.56.04;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.06.26.19.48.04;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.06.26.19.18.08;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.06.25.21.43.51;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.06.24.18.18.47;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.06.24.15.39.28;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.06.24.14.29.08;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.06.19.22.16.55;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.06.19.20.15.06;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.06.19.16.06.28;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.16.20.41.02;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.13.22.42.17;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.13.18.09.31;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.13.15.57.09;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.12.14.54.23;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.23.15.14.09;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.22.22.00.13;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.22.21.02.59;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.19.19.04.43;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.19.18.20.07;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.16.14.37.26;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.15.19.45.18;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.14.16.07.27;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.21.06.37;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.90
log
@Reduced heading comments.
@
text
@
//==============================================================================
// WIT-J Java Source File Demand.java.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;
import static com.ibm.witj.PeggingAtt.*;

import       java.util.*;

//==============================================================================
// Class Demand
//
// Represents a demand in an implosion problem.
//
// Class Hierarchy:
//
// ThreadedObject
//    PreservedObject
//       Component
//          Demand
//==============================================================================

public final class Demand extends Component
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// newInstance (thePart, theDemandName)
//
// Factory method: Constructs and returns a new Demand for the arguments.
//------------------------------------------------------------------------------

   public static Demand newInstance (Part thePart, String theDemandName)
      {
      try
         {
         notAllowedWhenTerminated ("Demand.newInstance");

         mustBeActive  (thePart,       "thePart",       "Demand.newInstance");
         mustBeNonNull (theDemandName, "theDemandName", "Demand.newInstance");

         return new Demand (thePart, theDemandName);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// incHeurAlloc (shipPeriod, desIncVol)
//
// Wrapper for witIncHeurAlloc.
//------------------------------------------------------------------------------

   public double incHeurAlloc (int shipPeriod, double desIncVol)
      {
      try
         {
         mustBeActive ("Demand.incHeurAlloc");

         return myDemandCOR.incHeurAlloc (shipPeriod, desIncVol);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// appendToPipSeq (theShipPer, incShipVol)
//
// Appends the shipment triple (this Demand, theShipPer, incShipVol) to the
// PIP shipment sequence.
//------------------------------------------------------------------------------

   public void appendToPipSeq (int theShipPer, double incShipVol)
      {
      try
         {
         mustBeActive ("Demand.appendToPipSeq");

         myDemandCOR.appendToPipSeq (theShipPer, incShipVol);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getConsVolPip (shipPeriod)
//
// Returns the consVol PIP for this Demand in shipPeriod.
//------------------------------------------------------------------------------

   public ArrayList <PeggingTriple <Part>> getConsVolPip (int shipPeriod)
      {
      try
         {
         mustBeActive ("Demand.getConsVolPip");

         return getPegging (CONS_VOL_PIP, Part.class, shipPeriod);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getCoExecVolPip (shipPeriod)
//
// Returns the coExecVol PIP for this Demand in shipPeriod.
//------------------------------------------------------------------------------

   public ArrayList <PeggingTriple <BopEntry>> getCoExecVolPip (int shipPeriod)
      {
      try
         {
         mustBeActive ("Demand.getCoExecVolPip");

         return getPegging (CO_EXEC_VOL_PIP, BopEntry.class, shipPeriod);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getExecVolPip (shipPeriod)
//
// Returns the execVol PIP for this Demand in shipPeriod.
//------------------------------------------------------------------------------

   public ArrayList <PeggingTriple <Operation>> getExecVolPip (int shipPeriod)
      {
      try
         {
         mustBeActive ("Demand.getExecVolPip");

         return getPegging (EXEC_VOL_PIP, Operation.class, shipPeriod);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getProdVolPip (shipPeriod)
//
// Returns the prodVol PIP for this Demand in shipPeriod.
//------------------------------------------------------------------------------

   public ArrayList <PeggingTriple <Part>> getProdVolPip (int shipPeriod)
      {
      try
         {
         mustBeActive ("Demand.getProdVolPip");

         return getPegging (PROD_VOL_PIP, Part.class, shipPeriod);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getSideVolPip (shipPeriod)
//
// Returns the sideVol PIP for this Demand in shipPeriod.
//------------------------------------------------------------------------------

   public ArrayList <PeggingTriple <Part>> getSideVolPip (int shipPeriod)
      {
      try
         {
         mustBeActive ("Demand.getSideVolPip");

         return getPegging (SIDE_VOL_PIP, Part.class, shipPeriod);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getSubVolPip (shipPeriod)
//
// Returns the subVol PIP for this Demand in shipPeriod.
//------------------------------------------------------------------------------

   public ArrayList <PeggingTriple <Substitute>> getSubVolPip (int shipPeriod)
      {
      try
         {
         mustBeActive ("Demand.getSubVolPip");

         return getPegging (SUB_VOL_PIP, Substitute.class, shipPeriod);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getSupplyVolPip (shipPeriod)
//
// Returns the supplyVol PIP for this Demand in shipPeriod.
//------------------------------------------------------------------------------

   public ArrayList <PeggingTriple <Part>> getSupplyVolPip (int shipPeriod)
      {
      try
         {
         mustBeActive ("Demand.getSupplyVolPip");

         return getPegging (SUPPLY_VOL_PIP, Part.class, shipPeriod);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getExecVolPegging (shipPeriod)
//
// Returns the execVol concurrent pegging for this Demand in shipPeriod.
//------------------------------------------------------------------------------

   public ArrayList <PeggingTriple <Operation>> getExecVolPegging (
         int shipPeriod)
      {
      try
         {
         mustBeActive ("Demand.getExecVolPegging");

         return getPegging (EXEC_VOL_CP, Operation.class, shipPeriod);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getSubVolPegging (shipPeriod)
//
// Returns the subVol concurrent pegging for this Demand in shipPeriod.
//------------------------------------------------------------------------------

   public ArrayList <PeggingTriple <Substitute>> getSubVolPegging (
         int shipPeriod)
      {
      try
         {
         mustBeActive ("Demand.getSubVolPegging");

         return getPegging (SUB_VOL_CP, Substitute.class, shipPeriod);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   public Part getPart ()
      {
      try
         {
         mustBeActive ("Demand.getPart");

         return myPart;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// toStringActive ().
//
// Override from class PreservedObject.
//------------------------------------------------------------------------------

   String toStringActive ()
      {
      return
           "Demand \""
         + myDemandName
         + "\" for "
         + myPart;
      }

//------------------------------------------------------------------------------
// deactivate
//
// Override from class PreservedObject.
//------------------------------------------------------------------------------

   void deactivate ()
      {
      myDemandCOR.deactivate ();
      super      .deactivate ();
      }

//------------------------------------------------------------------------------
// restoreAfterPurge ()
//
// Override from class Component.
//------------------------------------------------------------------------------

   void restoreAfterPurge ()
      {
      }

//------------------------------------------------------------------------------
// getCompClassID
//
// Override from class Component.
//------------------------------------------------------------------------------

   CompClassID getCompClassID ()
      {
      return CompClassID.DEMAND;
      }

//------------------------------------------------------------------------------
// getComponentCOR
//
// Override from class Component.
//------------------------------------------------------------------------------

   ComponentCOR getComponentCOR ()
      {
      return myDemandCOR;
      }

//------------------------------------------------------------------------------
// setDemandName
//
// Sets the DemandName of this Demand.
//------------------------------------------------------------------------------

   void setDemandName (String theDemandName)
      {
      myDemandCOR.setDemandName (theDemandName);

      myDemandName = theDemandName;
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   String getDemandName ()
      {
      return myDemandName;
      }

//------------------------------------------------------------------------------

   DemandCOR getDemandCOR ()
      {
      return myDemandCOR;
      }

//==============================================================================
// Private Constructor
//
// Arguments:
//    thePart:       The demanded Part for the Demand.
//    theDemandName: The DemandName of the Demand.
//==============================================================================

   private Demand (Part thePart, String theDemandName)
      {
      super (thePart.getCoordinator ());

      myPart       = thePart;

      myDemandName = theDemandName;

      myDemandCOR  = new DemandCOR (thePart.getPartCOR (), theDemandName);

      getCoordinator ().recordConcComp (this);
      myPart           .recordDemand   (this);
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// getPegging (thePggAtt, theCompClass, shipPeriod)
//
// Returns the pegging of the attribute indicated by thePggAtt for this Demand
// in shipPeriod, where theCompClass indicates that Component class of the
// pegging.
//------------------------------------------------------------------------------

   private <C extends Component> ArrayList <PeggingTriple <C>> getPegging (
         PeggingAtt thePggAtt,
         Class <C>  theCompClass,
         int        shipPeriod)
      {
      int                           thePggAttIdx;
      ArrayList <PeggingTriple <C>> theTripleList;

      thePggAttIdx  = thePggAtt.getIndex ();

      theTripleList = new ArrayList <PeggingTriple <C>> (0);

      myDemandCOR.getPegging (thePggAttIdx, shipPeriod, theTripleList);

      return theTripleList;
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myPart.
//
// The demanded Part for this Demand.
//------------------------------------------------------------------------------

   private final Part myPart;

//------------------------------------------------------------------------------
// myDemandName.
//
// The name of this Demand.
//------------------------------------------------------------------------------

   private String myDemandName;

//------------------------------------------------------------------------------
// myDemandCOR.
//
// The DemandCOR that belongs to this Demand.
//------------------------------------------------------------------------------

   private final DemandCOR myDemandCOR;

//==============================================================================
}
@


1.89
log
@Revised CppObjRep class ctors.
@
text
@a3 2
//
// Contains the declaration of class Demand.
@


1.88
log
@Changed name of class AllocTriple to PeggingTriple.
@
text
@d419 1
a419 1
      myDemandCOR  = new DemandCOR (this);
@


1.87
log
@ArrayListJOR
@
text
@d107 1
a107 1
   public ArrayList <AllocTriple <Part>> getConsVolPip (int shipPeriod)
d128 1
a128 1
   public ArrayList <AllocTriple <BopEntry>> getCoExecVolPip (int shipPeriod)
d149 1
a149 1
   public ArrayList <AllocTriple <Operation>> getExecVolPip (int shipPeriod)
d170 1
a170 1
   public ArrayList <AllocTriple <Part>> getProdVolPip (int shipPeriod)
d191 1
a191 1
   public ArrayList <AllocTriple <Part>> getSideVolPip (int shipPeriod)
d212 1
a212 1
   public ArrayList <AllocTriple <Substitute>> getSubVolPip (int shipPeriod)
d233 1
a233 1
   public ArrayList <AllocTriple <Part>> getSupplyVolPip (int shipPeriod)
d254 2
a255 1
   public ArrayList <AllocTriple <Operation>> getExecVolPegging (int shipPeriod)
d276 2
a277 1
   public ArrayList <AllocTriple <Substitute>> getSubVolPegging (int shipPeriod)
d437 1
a437 1
   private <C extends Component> ArrayList <AllocTriple <C>> getPegging (
d442 2
a443 2
      int                         thePggAttIdx;
      ArrayList <AllocTriple <C>> theTripleList;
d447 1
a447 1
      theTripleList = new ArrayList <AllocTriple <C>> (0);
@


1.86
log
@Replaced setPipSeq with clearPipSeq and appendToPipSeq.
@
text
@a440 1
      AllocTripleVecCOR           theAllocTripleVecCOR;
d443 1
a443 1
      thePggAttIdx         = thePggAtt.getIndex ();
d445 1
a445 1
      theAllocTripleVecCOR = new AllocTripleVecCOR (getCoordinator ());
d447 1
a447 5
      myDemandCOR.getPegging (thePggAttIdx, shipPeriod, theAllocTripleVecCOR);

      theTripleList = theAllocTripleVecCOR.newAllocTripleList (theCompClass);

      theAllocTripleVecCOR.deactivate ();
@


1.85
log
@Replaced calls to ctors for Java Integer and Double with valueOf.
@
text
@d80 22
@


1.84
log
@Implemented String StdAttImps.
@
text
@d408 3
a410 2
// Returns the PIP of the attribute indicated by thePggAtt for this Demand in
// shipPeriod, where theCompClass indicates that Component class of the pegging.
@


1.83
log
@Initial implementation of class ThreadedObject.
@
text
@d406 1
a406 1
// getPegging (thePggAttID, theCompClass, shipPeriod)
d408 1
a408 1
// Returns the PIP of the attribute indicated by thePggAttID for this Demand in
@


1.82
log
@Changed handling of Lists of AllocTriples to avoid call-backs.
@
text
@d22 4
a25 3
// PreservedObject
//    Component
//       Demand
@


1.81
log
@Made methods that retrieve an ArrayList <AllocTriple>> return it instead.
@
text
@a87 2
         ArrayList <AllocTriple <Part>> theTripleList;

d90 1
a90 5
         theTripleList = new ArrayList <AllocTriple <Part>> (0);

         getPegging (CONS_VOL_PIP, Part.class, shipPeriod, theTripleList);

         return theTripleList;
a108 2
         ArrayList <AllocTriple <BopEntry>> theTripleList;

d111 1
a111 9
         theTripleList = new ArrayList <AllocTriple <BopEntry>> (0);

         getPegging (
            CO_EXEC_VOL_PIP,
            BopEntry.class,
            shipPeriod,
            theTripleList);

         return theTripleList;
a129 2
         ArrayList <AllocTriple <Operation>> theTripleList;

d132 1
a132 5
         theTripleList = new ArrayList <AllocTriple <Operation>> (0);

         getPegging (EXEC_VOL_PIP, Operation.class, shipPeriod, theTripleList);

         return theTripleList;
a150 2
         ArrayList <AllocTriple <Part>> theTripleList;

d153 1
a153 5
         theTripleList = new ArrayList <AllocTriple <Part>> (0);

         getPegging (PROD_VOL_PIP, Part.class, shipPeriod, theTripleList);

         return theTripleList;
a171 2
         ArrayList <AllocTriple <Part>> theTripleList;

d174 1
a174 5
         theTripleList = new ArrayList <AllocTriple <Part>> (0);

         getPegging (SIDE_VOL_PIP, Part.class, shipPeriod, theTripleList);

         return theTripleList;
a192 2
         ArrayList <AllocTriple <Substitute>> theTripleList;

d195 1
a195 5
         theTripleList = new ArrayList <AllocTriple <Substitute>> (0);

         getPegging (SUB_VOL_PIP, Substitute.class, shipPeriod, theTripleList);

         return theTripleList;
a213 2
         ArrayList <AllocTriple <Part>> theTripleList;

d216 1
a216 5
         theTripleList = new ArrayList <AllocTriple <Part>> (0);

         getPegging (SUPPLY_VOL_PIP, Part.class, shipPeriod, theTripleList);

         return theTripleList;
a234 2
         ArrayList <AllocTriple <Operation>> theTripleList;

d237 1
a237 5
         theTripleList = new ArrayList <AllocTriple <Operation>> (0);

         getPegging (EXEC_VOL_CP, Operation.class, shipPeriod, theTripleList);

         return theTripleList;
a255 2
         ArrayList <AllocTriple <Substitute>> theTripleList;

d258 1
a258 5
         theTripleList = new ArrayList <AllocTriple <Substitute>> (0);

         getPegging (SUB_VOL_CP, Substitute.class, shipPeriod, theTripleList);

         return theTripleList;
d405 1
a405 1
// getPegging (thePggAttID, shipPeriod, theTripleList)
d407 2
a408 2
// Retrieves the PIP of the attribute indicated by thePggAttID for this Demand
// in shipPer, storing it in theTripleList.
d411 4
a414 5
   private <C extends Component> void getPegging (
         PeggingAtt                  thePggAtt,
         Class <C>                   theCompClass,
         int                         shipPeriod,
         ArrayList <AllocTriple <C>> theTripleList)
d416 7
a422 2
      int                thePggAttIdx;
      AllocTripleListCOR theAllocTripleListCOR;
d424 1
a424 1
      thePggAttIdx          = thePggAtt.getIndex ();
d426 1
a426 5
      theAllocTripleListCOR =
         new AllocTripleListCOR (
            theTripleList,
            theCompClass,
            getCoordinator ());
d428 1
a428 1
      myDemandCOR.getPegging (thePggAttIdx, shipPeriod, theAllocTripleListCOR);
d430 1
a430 1
      theAllocTripleListCOR.deactivate ();
@


1.80
log
@Made pegging retrieval methods not use enum PeggingAtt.
@
text
@d79 1
a79 1
// getConsVolPip (shipPeriod, theTripleList)
d81 1
a81 2
// Retrieves the consVol PIP for this Demand in shipPeriod and stores it in
// theTripleList.
d84 1
a84 3
   public void getConsVolPip (
         int                            shipPeriod,
         ArrayList <AllocTriple <Part>> theTripleList)
d88 2
d92 2
d95 2
d106 1
a106 1
// getCoExecVolPip (shipPeriod, theTripleList)
d108 1
a108 2
// Retrieves the coExecVol PIP for this Demand in shipPeriod and stores it in
// theTripleList.
d111 1
a111 3
   public void getCoExecVolPip (
         int                                shipPeriod,
         ArrayList <AllocTriple <BopEntry>> theTripleList)
d115 2
d119 2
d126 2
d137 1
a137 1
// getExecVolPip (shipPeriod, theTripleList)
d139 1
a139 2
// Retrieves the execVol PIP for this Demand in shipPeriod and stores it in
// theTripleList.
d142 1
a142 3
   public void getExecVolPip (
         int                                 shipPeriod,
         ArrayList <AllocTriple <Operation>> theTripleList)
d146 2
d150 2
d153 2
d164 1
a164 1
// getProdVolPip (shipPeriod, theTripleList)
d166 1
a166 2
// Retrieves the prodVol PIP for this Demand in shipPeriod and stores it in
// theTripleList.
d169 1
a169 3
   public void getProdVolPip (
         int                            shipPeriod,
         ArrayList <AllocTriple <Part>> theTripleList)
d173 2
d177 2
d180 2
d191 1
a191 1
// getSideVolPip (shipPeriod, theTripleList)
d193 1
a193 2
// Retrieves the sideVol PIP for this Demand in shipPeriod and stores it in
// theTripleList.
d196 1
a196 3
   public void getSideVolPip (
         int                            shipPeriod,
         ArrayList <AllocTriple <Part>> theTripleList)
d200 2
d204 2
d207 2
d218 1
a218 1
// getSubVolPip (shipPeriod, theTripleList)
d220 1
a220 2
// Retrieves the subVol PIP for this Demand in shipPeriod and stores it in
// theTripleList.
d223 1
a223 3
   public void getSubVolPip (
         int                                  shipPeriod,
         ArrayList <AllocTriple <Substitute>> theTripleList)
d227 2
d231 2
d234 2
d245 1
a245 1
// getSupplyVolPip (shipPeriod, theTripleList)
d247 1
a247 2
// Retrieves the supplyVol PIP for this Demand in shipPeriod and stores it in
// theTripleList.
d250 1
a250 3
   public void getSupplyVolPip (
         int                            shipPeriod,
         ArrayList <AllocTriple <Part>> theTripleList)
d254 2
d258 2
d261 2
d272 1
a272 1
// getExecVolPegging (shipPeriod, theTripleList)
d274 1
a274 2
// Retrieves the execVol concurrent pegging for this Demand in shipPeriod and
// stores it in theTripleList.
d277 1
a277 3
   public void getExecVolPegging (
         int                                 shipPeriod,
         ArrayList <AllocTriple <Operation>> theTripleList)
d281 2
d285 2
d288 2
d299 1
a299 1
// getSubVolPegging (shipPeriod, theTripleList)
d301 1
a301 2
// Retrieves the subVol concurrent pegging for this Demand in shipPeriod and
// stores it in theTripleList.
d304 1
a304 3
   public void getSubVolPegging (
         int                                  shipPeriod,
         ArrayList <AllocTriple <Substitute>> theTripleList)
d308 2
d312 2
d315 2
@


1.79
log
@Revised pegging to use PeggingAtt in the public interface.
@
text
@d79 1
a79 1
// getPegging (thePggAtt, shipPeriod, theTripleList, theCompClass)
d81 174
a254 3
// Retrieves the pegging of the attribute indicated by thePggAtt for this Demand
// in shipPer, storing it in theTripleList.
// theCompClass identifies the Component class for theTripleList.
d257 3
a259 5
   public <C extends Component> void getPegging (
         PeggingAtt                  thePggAtt,
         int                         shipPeriod,
         ArrayList <AllocTriple <C>> theTripleList,
         Class <C>                   theCompClass)
d263 10
a272 2
         int                thePggAttIdx;
         AllocTripleListCOR theAllocTripleListCOR;
d274 6
a279 27
         mustBeActive ("Demand.getPegging");

         if (theCompClass != thePggAtt.getComponentClass ())
            {
            throw
               new StatusQuoException (
                  "   Demand.getPegging was called with a Component class\n"
                + "   argument that does not match the Component class of\n"
                + "   the PeggingAtt argument.\n"
                + "\n"
                + "      Demand:                     " + this      + "\n"
                + "      PeggingAtt:                 " + thePggAtt + "\n"
                + "      PeggingAtt Component Class: "
                +           thePggAtt.
                               getComponentClass ().
                                  getSimpleName ()                 + "\n"
                + "      Component Class Argument:   "
                +           theCompClass.getSimpleName ());
            }

         thePggAttIdx          = thePggAtt.getIndex ();

         theAllocTripleListCOR =
            new AllocTripleListCOR (
               theTripleList,
               theCompClass,
               getCoordinator ());
d281 7
a287 2
         myDemandCOR.
            getPegging (thePggAttIdx, shipPeriod, theAllocTripleListCOR);
d289 1
a289 1
         theAllocTripleListCOR.deactivate ();
d432 33
@


1.78
log
@Revised pegging methods.
@
text
@d79 1
a79 1
// getConsVolPip (shipPeriod, theTripleList)
d81 3
a83 2
// Retrieves the consVol PIP for this Demand in shipPeriod and stores it in
// theTripleList.
d86 5
a90 127
   public void getConsVolPip (
         int                            shipPeriod,
         ArrayList <AllocTriple <Part>> theTripleList)
      {
      try
         {
         mustBeActive ("Demand.getConsVolPip");

         getPegging (CONS_VOL_PIP, Part.class, shipPeriod, theTripleList);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getCoExecVolPip (shipPeriod, theTripleList)
//
// Retrieves the coExecVol PIP for this Demand in shipPeriod and stores it in
// theTripleList.
//------------------------------------------------------------------------------

   public void getCoExecVolPip (
         int                                shipPeriod,
         ArrayList <AllocTriple <BopEntry>> theTripleList)
      {
      try
         {
         mustBeActive ("Demand.getCoExecVolPip");

         getPegging (
            CO_EXEC_VOL_PIP,
            BopEntry.class,
            shipPeriod,
            theTripleList);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getExecVolPip (shipPeriod, theTripleList)
//
// Retrieves the execVol PIP for this Demand in shipPeriod and stores it in
// theTripleList.
//------------------------------------------------------------------------------

   public void getExecVolPip (
         int                                 shipPeriod,
         ArrayList <AllocTriple <Operation>> theTripleList)
      {
      try
         {
         mustBeActive ("Demand.getExecVolPip");

         getPegging (EXEC_VOL_PIP, Operation.class, shipPeriod, theTripleList);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getProdVolPip (shipPeriod, theTripleList)
//
// Retrieves the prodVol PIP for this Demand in shipPeriod and stores it in
// theTripleList.
//------------------------------------------------------------------------------

   public void getProdVolPip (
         int                            shipPeriod,
         ArrayList <AllocTriple <Part>> theTripleList)
      {
      try
         {
         mustBeActive ("Demand.getProdVolPip");

         getPegging (PROD_VOL_PIP, Part.class, shipPeriod, theTripleList);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getSideVolPip (shipPeriod, theTripleList)
//
// Retrieves the sideVol PIP for this Demand in shipPeriod and stores it in
// theTripleList.
//------------------------------------------------------------------------------

   public void getSideVolPip (
         int                            shipPeriod,
         ArrayList <AllocTriple <Part>> theTripleList)
      {
      try
         {
         mustBeActive ("Demand.getSideVolPip");

         getPegging (SIDE_VOL_PIP, Part.class, shipPeriod, theTripleList);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getSubVolPip (shipPeriod, theTripleList)
//
// Retrieves the subVol PIP for this Demand in shipPeriod and stores it in
// theTripleList.
//------------------------------------------------------------------------------

   public void getSubVolPip (
         int                                  shipPeriod,
         ArrayList <AllocTriple <Substitute>> theTripleList)
d94 2
a95 1
         mustBeActive ("Demand.getSubVolPip");
d97 27
a123 2
         getPegging (SUB_VOL_PIP, Substitute.class, shipPeriod, theTripleList);
         }
d125 2
a126 5
      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }
d128 1
a128 64
//------------------------------------------------------------------------------
// getSupplyVolPip (shipPeriod, theTripleList)
//
// Retrieves the supplyVol PIP for this Demand in shipPeriod and stores it in
// theTripleList.
//------------------------------------------------------------------------------

   public void getSupplyVolPip (
         int                            shipPeriod,
         ArrayList <AllocTriple <Part>> theTripleList)
      {
      try
         {
         mustBeActive ("Demand.getSupplyVolPip");

         getPegging (SUPPLY_VOL_PIP, Part.class, shipPeriod, theTripleList);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getExecVolPegging (shipPeriod, theTripleList)
//
// Retrieves the execVol concurrent pegging for this Demand in shipPeriod and
// stores it in theTripleList.
//------------------------------------------------------------------------------

   public void getExecVolPegging (
         int                                 shipPeriod,
         ArrayList <AllocTriple <Operation>> theTripleList)
      {
      try
         {
         mustBeActive ("Demand.getExecVolPegging");

         getPegging (EXEC_VOL_CP, Operation.class, shipPeriod, theTripleList);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getSubVolPegging (shipPeriod, theTripleList)
//
// Retrieves the subVol concurrent pegging for this Demand in shipPeriod and
// stores it in theTripleList.
//------------------------------------------------------------------------------

   public void getSubVolPegging (
         int                                  shipPeriod,
         ArrayList <AllocTriple <Substitute>> theTripleList)
      {
      try
         {
         mustBeActive ("Demand.getSubVolPegging");

         getPegging (SUB_VOL_CP, Substitute.class, shipPeriod, theTripleList);
a270 33
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// getPegging (thePggAtt, shipPeriod, theTripleList)
//
// Retrieves the PIP of the attribute indicated by thePggAtt for this Demand
// in shipPer, storing it in theTripleList.
//------------------------------------------------------------------------------

   private <C extends Component> void getPegging (
         PeggingAtt                  thePggAtt,
         Class <C>                   theCompClass,
         int                         shipPeriod,
         ArrayList <AllocTriple <C>> theTripleList)
      {
      int                thePggAttIdx;
      AllocTripleListCOR theAllocTripleListCOR;

      thePggAttIdx          = thePggAtt.getIndex ();

      theAllocTripleListCOR =
         new AllocTripleListCOR (
            theTripleList,
            theCompClass,
            getCoordinator ());

      myDemandCOR.getPegging (thePggAttIdx, shipPeriod, theAllocTripleListCOR);

      theAllocTripleListCOR.deactivate ();
      }

//==============================================================================
@


1.77
log
@Replaced the throwExceptionFor method with getExeceptionToThrow.
@
text
@d11 1
d93 1
a93 5
         getPegging (
            PggAttID.CONS_VOL_PIP,
            Part.class,
            shipPeriod,
            theTripleList);
d118 1
a118 1
            PggAttID.CO_EXEC_VOL_PIP,
d145 1
a145 5
         getPegging (
            PggAttID.EXEC_VOL_PIP,
            Operation.class,
            shipPeriod,
            theTripleList);
d169 1
a169 5
         getPegging (
            PggAttID.PROD_VOL_PIP,
            Part.class,
            shipPeriod,
            theTripleList);
d193 1
a193 5
         getPegging (
            PggAttID.SIDE_VOL_PIP,
            Part.class,
            shipPeriod,
            theTripleList);
d217 1
a217 5
         getPegging (
            PggAttID.SUB_VOL_PIP,
            Substitute.class,
            shipPeriod,
            theTripleList);
d241 1
a241 5
         getPegging (
            PggAttID.SUPPLY_VOL_PIP,
            Part.class,
            shipPeriod,
            theTripleList);
d265 1
a265 5
         getPegging (
            PggAttID.EXEC_VOL_CPEG,
            Operation.class,
            shipPeriod,
            theTripleList);
d289 1
a289 5
         getPegging (
            PggAttID.SUB_VOL_CPEG,
            Substitute.class,
            shipPeriod,
            theTripleList);
d436 1
a436 1
// getPegging (thePggAttID, shipPeriod, theTripleList)
d438 1
a438 1
// Retrieves the PIP of the attribute indicated by thePggAttID for this Demand
d443 1
a443 1
         PggAttID                    thePggAttID,
d451 1
a451 1
      thePggAttIdx          = thePggAttID.getIndex ();
a492 52
// Private Static Nested Enum PggAttID
//
// Identifies a pegging attribute.
//==============================================================================

   private static enum PggAttID
   {
   //---------------------------------------------------------------------------
   // Enum Constants.
   //---------------------------------------------------------------------------

      CONS_VOL_PIP  (0),
   CO_EXEC_VOL_PIP  (1),
      EXEC_VOL_PIP  (2),
      PROD_VOL_PIP  (3),
      SIDE_VOL_PIP  (4),
       SUB_VOL_PIP  (5),
    SUPPLY_VOL_PIP  (6),
      EXEC_VOL_CPEG (7),
       SUB_VOL_CPEG (8),
   ;

   //---------------------------------------------------------------------------
   // Package Internal Accessor.
   //---------------------------------------------------------------------------

   int getIndex ()
      {
      return myIndex;
      }

   //---------------------------------------------------------------------------
   // Private Constructor.
   //---------------------------------------------------------------------------

   private PggAttID (int theIdx)
      {
      myIndex = theIdx;
      }

   //---------------------------------------------------------------------------
   // Private Field myIndex.
   //
   // The Index of this PggAttID.
   // This value must match the int value of the C++ PggAttID with the same
   // name.
   //---------------------------------------------------------------------------

   private final int myIndex;
   }

//==============================================================================
@


1.76
log
@Changed name of Java class WitjException to GeneralException.
@
text
@d50 1
a50 1
      catch (Throwable theThrowable)
d52 1
a52 3
         throwExceptionFor (theThrowable);

         return null;
d71 1
a71 1
      catch (Throwable theThrowable)
d73 1
a73 3
         throwExceptionFor (theThrowable);

         return 0.0;
d99 1
a99 1
      catch (Throwable theThrowable)
d101 1
a101 1
         throwExceptionFor (theThrowable);
d127 1
a127 1
      catch (Throwable theThrowable)
d129 1
a129 1
         throwExceptionFor (theThrowable);
d155 1
a155 1
      catch (Throwable theThrowable)
d157 1
a157 1
         throwExceptionFor (theThrowable);
d183 1
a183 1
      catch (Throwable theThrowable)
d185 1
a185 1
         throwExceptionFor (theThrowable);
d211 1
a211 1
      catch (Throwable theThrowable)
d213 1
a213 1
         throwExceptionFor (theThrowable);
d239 1
a239 1
      catch (Throwable theThrowable)
d241 1
a241 1
         throwExceptionFor (theThrowable);
d267 1
a267 1
      catch (Throwable theThrowable)
d269 1
a269 1
         throwExceptionFor (theThrowable);
d295 1
a295 1
      catch (Throwable theThrowable)
d297 1
a297 1
         throwExceptionFor (theThrowable);
d323 1
a323 1
      catch (Throwable theThrowable)
d325 1
a325 1
         throwExceptionFor (theThrowable);
d342 1
a342 1
      catch (Throwable theThrowable)
d344 1
a344 3
         throwExceptionFor (theThrowable);

         return null;
@


1.75
log
@Changed name of Java class RetainedObject to PreservedObject.
@
text
@d52 3
a54 1
         throw getWitjExceptionFor (theThrowable);
d75 3
a77 1
         throw getWitjExceptionFor (theThrowable);
d105 1
a105 1
         throw getWitjExceptionFor (theThrowable);
d133 1
a133 1
         throw getWitjExceptionFor (theThrowable);
d161 1
a161 1
         throw getWitjExceptionFor (theThrowable);
d189 1
a189 1
         throw getWitjExceptionFor (theThrowable);
d217 1
a217 1
         throw getWitjExceptionFor (theThrowable);
d245 1
a245 1
         throw getWitjExceptionFor (theThrowable);
d273 1
a273 1
         throw getWitjExceptionFor (theThrowable);
d301 1
a301 1
         throw getWitjExceptionFor (theThrowable);
d329 1
a329 1
         throw getWitjExceptionFor (theThrowable);
d348 3
a350 1
         throw getWitjExceptionFor (theThrowable);
@


1.74
log
@Argument checking.
@
text
@d21 1
a21 1
// RetainedObject
d355 1
a355 1
// Override from class RetainedObject.
d370 1
a370 1
// Override from class RetainedObject.
@


1.73
log
@Minor revisions.
@
text
@d44 2
a45 2
         argMustBeActive (thePart,       "thePart",       "Demand.newInstance");
         mustBeNonNull   (theDemandName, "theDemandName", "Demand.newInstance");
@


1.72
log
@Implemented theProblem.getInstances (theCompClass).
@
text
@d458 2
a459 2
      getCoordinator ().record (this);
      myPart           .record (this);
@


1.71
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d458 2
a459 1
      myPart.record (this);
@


1.70
log
@Changed name of Problem method shutDown to deactivate.
@
text
@d22 1
a22 1
//    Element
d26 1
a26 1
public final class Demand extends Element
d382 1
a382 1
// Override from class Element.
d390 1
a390 1
// getElemClassID
d392 1
a392 1
// Override from class Element.
d395 1
a395 1
   ElemClassID getElemClassID ()
d397 1
a397 1
      return ElemClassID.DEMAND;
d401 1
a401 1
// getElementCOR
d403 1
a403 1
// Override from class Element.
d406 1
a406 1
   ElementCOR getElementCOR ()
d472 1
a472 1
   private <E extends Element> void getPegging (
d474 1
a474 1
         Class <E>                   theElementClass,
d476 1
a476 1
         ArrayList <AllocTriple <E>> theTripleList)
d486 1
a486 1
            theElementClass,
@


1.69
log
@purgeData
@
text
@d368 1
a368 1
// shutDown
d373 1
a373 1
   void shutDown ()
d375 2
a376 2
      myDemandCOR.shutDown ();
      super      .shutDown ();
d491 1
a491 1
      theAllocTripleListCOR.shutDown ();
@


1.68
log
@purgeData
@
text
@a56 25
// toString ().
//
// Override from class Object.
//------------------------------------------------------------------------------

   public String toString ()
      {
      try
         {
         notAllowedWhenTerminated ("Demand.toString");

         return
              "Demand \""
            + myDemandName
            + "\" for "
            + myPart;
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
d353 15
@


1.67
log
@purgeData
@
text
@d390 10
@


1.66
log
@purgeData
@
text
@a389 10
// restoreAfterPurge ()
//
// Override from class Element.
//------------------------------------------------------------------------------

   void restoreAfterPurge ()
      {
      }

//------------------------------------------------------------------------------
@


1.65
log
@purgeData
@
text
@d390 1
a390 1
// reconcileForPurge ()
d395 1
a395 1
   void reconcileForPurge ()
a396 1
      assert (false);
@


1.64
log
@Concurrent pegging.
@
text
@d390 11
@


1.63
log
@Pegging
@
text
@d299 56
d534 9
a542 7
      CONS_VOL_PIP (0),
   CO_EXEC_VOL_PIP (1),
      EXEC_VOL_PIP (2),
      PROD_VOL_PIP (3),
      SIDE_VOL_PIP (4),
       SUB_VOL_PIP (5),
    SUPPLY_VOL_PIP (6),
@


1.62
log
@Pegging
@
text
@d118 1
a118 1
            PeggingAttID.CONS_VOL_PIP,
d146 1
a146 1
            PeggingAttID.CO_EXEC_VOL_PIP,
d174 1
a174 1
            PeggingAttID.EXEC_VOL_PIP,
d202 1
a202 1
            PeggingAttID.PROD_VOL_PIP,
d230 1
a230 1
            PeggingAttID.SIDE_VOL_PIP,
d258 1
a258 1
            PeggingAttID.SUB_VOL_PIP,
d286 1
a286 1
            PeggingAttID.SUPPLY_VOL_PIP,
d410 1
a410 1
// getPegging (thePeggingAttID, shipPeriod, theTripleList)
d412 2
a413 2
// Retrieves the PIP of the attribute indicated by thePeggingAttID for this
// Demand in shipPer, storing it in theTripleList.
d417 1
a417 1
         PeggingAttID                thePeggingAttID,
d422 1
a422 1
      int                thePeggingAttIdx;
d425 1
a425 1
      thePeggingAttIdx      = thePeggingAttID.getIndex ();
d433 1
a433 2
      myDemandCOR.
         getPegging (thePeggingAttIdx, shipPeriod, theAllocTripleListCOR);
d467 1
a467 1
// Private Static Nested Enum PeggingAttID
d472 1
a472 1
   private static enum PeggingAttID
d500 1
a500 1
   private PeggingAttID (int theIdx)
d508 2
a509 2
   // The Index of this PeggingAttID.
   // This value must match the int value of the C++ PeggingAttID with the same
@


1.61
log
@PIP.
@
text
@d117 1
a117 1
         getPip (
d145 1
a145 1
         getPip (
d173 1
a173 1
         getPip (
d201 1
a201 1
         getPip (
d229 1
a229 1
         getPip (
d257 1
a257 1
         getPip (
d285 1
a285 1
         getPip (
d410 1
a410 1
// getPip (thePeggingAttID, shipPeriod, theTripleList)
d416 1
a416 1
   private <E extends Element> void getPip (
d433 2
a434 1
      myDemandCOR.getPip (thePeggingAttIdx, shipPeriod, theAllocTripleListCOR);
@


1.60
log
@Part.Category by boolean.
@
text
@d103 56
d187 112
@


1.59
log
@PIP.
@
text
@d257 1
a257 1
      thePeggingAttIdx      = thePeggingAttID.getIdx ();
d323 1
a323 1
   int getIdx ()
d325 1
a325 1
      return myIdx;
d334 1
a334 1
      myIdx = theIdx;
d338 1
a338 1
   // Private Field myIdx.
d345 1
a345 1
   private final int myIdx;
@


1.58
log
@Added the AllocTripleList classes.
@
text
@d117 5
a121 1
         getExecVolPipInt (shipPeriod, theTripleList);
d242 1
a242 1
// getExecVolPipInt (shipPeriod, theTripleList)
d244 2
a245 1
// Internal implementation of getExecVolPip (shipPeriod, theTripleList).
d248 5
a252 3
   private void getExecVolPipInt (
         int                                 shipPeriod,
         ArrayList <AllocTriple <Operation>> theTripleList)
d254 1
d257 2
d262 1
a262 1
            Operation.class,
d265 1
a265 1
      myDemandCOR.getExecVolPip (shipPeriod, theAllocTripleListCOR);
d299 50
@


1.57
log
@Demand.getExecVolPip
@
text
@d103 1
a103 1
// getExecVolPip (shipPeriod, theTriples)
d106 1
a106 1
// theTriples.
d111 1
a111 1
         ArrayList <AllocTriple <Operation>> theTriples)
d117 1
a117 5
         getCoordinator ().holdAllocTripleList (theTriples, Operation.class);

         myDemandCOR      .getExecVolPip (shipPeriod);

         getCoordinator ().releaseAllocTripleList ();
d234 27
@


1.56
log
@PIP
@
text
@d12 2
d103 28
@


1.55
log
@Implemented getPipSeq.
@
text
@a123 13
// newAllocTriple (thePeriod, theVolume)
//
// Override from class Element.
//------------------------------------------------------------------------------

   AllocTriple <? extends Element> newAllocTriple (
         int    thePeriod,
         double theVolume)
      {
      return AllocTriple.newInstance (this, thePeriod, theVolume);
      }

//------------------------------------------------------------------------------
@


1.54
log
@Removed eqHeurAllocTwme
@
text
@d124 13
@


1.53
log
@Problem.eqHeurAlloc.
@
text
@a100 26
// incHeurAllocTwme (shipPeriod, desIncVol, asapMultiExec)
//
// Wrapper for witIncHeurAllocTwme.
//------------------------------------------------------------------------------

   public double incHeurAllocTwme (
         int     shipPeriod,
         double  desIncVol,
         boolean asapMultiExec)
      {
      try
         {
         mustBeActive ("Demand.incHeurAlloc");

         return
            myDemandCOR.
               incHeurAllocTwme (shipPeriod, desIncVol, asapMultiExec);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
@


1.52
log
@Heuristic Allocation
@
text
@d205 7
@


1.51
log
@Heuristic Allocation
@
text
@d80 1
a80 1
// incHeurAlloc (shipPeriod, desIncVol);
d101 26
@


1.50
log
@Removed java class ElementMgr, moving its responsibilities to class
Coordinator.
@
text
@d80 21
@


1.49
log
@Changed a Java class name: WitjAbortsException ==> TerminalException
@
text
@d168 1
a168 1
      super (thePart.getElementMgr ());
@


1.48
log
@Changed class name: NonFunctionalException ==> WitjAbortsException
@
text
@d40 1
a40 1
         witjAbortedNotAllowed ("Demand.newInstance");
d64 1
a64 1
         witjAbortedNotAllowed ("Demand.toString");
@


1.47
log
@Minor revision.
@
text
@d40 1
a40 1
         witjMustBeFunctional ("Demand.newInstance");
d64 1
a64 1
         witjMustBeFunctional ("Demand.toString");
@


1.46
log
@Added the uniform try block whereever it was needed.
@
text
@d19 3
a21 3
//    RetainedObject
//       Element
//          Demand
@


1.45
log
@Added a call to witjMustBeFunctional whereever it was needed.
@
text
@d38 14
a51 6
      witjMustBeFunctional ("Demand.newInstance");

      argMustBeActive (thePart,       "thePart",       "Demand.newInstance");
      mustBeNonNull   (theDemandName, "theDemandName", "Demand.newInstance");

      return new Demand (thePart, theDemandName);
d62 15
a76 7
      witjMustBeFunctional ("Demand.toString");

      return
           "Demand \""
         + myDemandName
         + "\" for "
          + myPart;
d85 11
a95 3
      mustBeActive ("Demand.getPart");

      return myPart;
@


1.44
log
@Minor changes.
@
text
@d38 2
d54 2
@


1.43
log
@Revised factory methods.
@
text
@d75 1
a75 1
// shutDown ().
d87 1
a87 1
// getElemClassID ()
d98 1
a98 1
// getElementCOR ().
d109 1
a109 1
// setDemandName (...)
@


1.42
log
@Name change.
@
text
@d31 14
a69 28
   public String getDemandName ()
      {
      mustBeActive ("Demand.getDemandName");

      return myDemandName;
      }

//==============================================================================
// Package-Internal Constructor
//
// Arguments:
//    thePart:       The demanded Part for the Demand.
//    theDemandName: The DemandName of the Demand.
//==============================================================================

   Demand (Part thePart, String theDemandName)
      {
      super (thePart.getElementMgr ());

      myPart       = thePart;

      myDemandName = theDemandName;

      myDemandCOR  = new DemandCOR (this);

      myPart.record (this);
      }

d121 30
@


1.41
log
@Changed name of Component to Entity.
@
text
@d20 1
a20 1
//       Entity
d24 1
a24 1
public final class Demand extends Entity
d73 1
a73 1
      super (thePart.getEntityMgr ());
d101 1
a101 1
// getEntityClassID ()
d103 1
a103 1
// Override from class Entity.
d106 1
a106 1
   EntityClassID getEntityClassID ()
d108 1
a108 1
      return EntityClassID.DEMAND;
d112 1
a112 1
// getEntityCOR ().
d114 1
a114 1
// Override from class Entity.
d117 1
a117 1
   EntityCOR getEntityCOR ()
@


1.40
log
@Call-back infrastructure.
@
text
@d20 1
a20 1
//       Component
d24 1
a24 1
public final class Demand extends Component
d73 1
a73 1
      super (thePart.getCompMgr ());
d101 1
a101 1
// getCompClassID ()
d103 1
a103 1
// Override from class Component.
d106 1
a106 1
   CompClassID getCompClassID ()
d108 1
a108 1
      return CompClassID.DEMAND;
d112 1
a112 1
// getCompCOR ().
d114 1
a114 1
// Override from class Component.
d117 1
a117 1
   ComponentCOR getCompCOR ()
@


1.39
log
@Call-back infrastructure.
@
text
@a68 2
//
// To be called only from thePart.newDemmand (theDemandName).
@


1.38
log
@Numerous class name changes.
@
text
@d81 1
a81 1
      myDemandCOR  = new DemandCOR (myPart.getPartCOR (), myDemandName);
@


1.37
log
@Implemented thePart.getDemands ().
@
text
@d81 1
a81 1
      myDemandCI   = new DemandCI (myPart.getPartCI (), myDemandName);
d98 2
a99 2
      myDemandCI.shutDown ();
      super     .shutDown ();
d114 1
a114 1
// getCompCI ().
d119 1
a119 1
   ComponentCI getCompCI ()
d121 1
a121 1
      return myDemandCI;
d132 1
a132 1
      myDemandCI.setDemandName (theDemandName);
d158 1
a158 1
// myDemandCI.
d160 1
a160 1
// The DemandCI that belongs to this Demand.
d163 1
a163 1
   private final DemandCI myDemandCI;
@


1.36
log
@Active state / shutDown method.
@
text
@d82 2
@


1.35
log
@Revised the factory methods.
@
text
@d51 1
a51 1
      mustBeUnreleased ("Demand.getPart");
d58 1
a58 1
      mustBeUnreleased ("Demand.getDemandName");
d89 1
a89 1
// release ().
d94 1
a94 1
   void release ()
d96 2
a97 2
      myDemandCI.release ();
      super     .release ();
@


1.34
log
@Initial implementation of the Session classes.
@
text
@a30 18
// makeInstance (thePart, theDemandName)
//
// Factory method: Constructs and returns a new Demand.
// Arguments:
//    thePart:       The demanded Part for the Demand.
//    theDemandName: The DemandName of the Demand.
//------------------------------------------------------------------------------

   public static Demand makeInstance (Part thePart, String theDemandName)
      {
      argMustBeUnreleased (thePart, "thePart", "Demand.makeInstance");

      mustBeNonNull (theDemandName, "theDemandName", "Demand.makeInstance");

      return new Demand (thePart, theDemandName);
      }

//------------------------------------------------------------------------------
d64 21
a135 19
// Private Constructor
//
// Arguments:
//    thePart:       The demanded Part for the Demand.
//    theDemandName: The DemandName of the Demand.
//==============================================================================

   private Demand (Part thePart, String theDemandName)
      {
      super (thePart.getCompMgr ());

      myPart       = thePart;

      myDemandName = theDemandName;

      myDemandCI   = new DemandCI (myPart.getPartCI (), myDemandName);
      }

//==============================================================================
@


1.33
log
@Terminology change.
@
text
@d133 1
a133 5
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// Constructor.
d138 1
a138 1
//------------------------------------------------------------------------------
@


1.32
log
@Added checking for null arguments.
@
text
@d19 1
a19 1
//    VitalObject
d41 1
a41 1
      mustBeNonNullActive (thePart, "thePart", "Demand.makeInstance");
d69 1
a69 1
      mustBeActive ("Demand.getPart");
d76 1
a76 1
      mustBeActive ("Demand.getDemandName");
d86 1
a86 1
// shutDown ().
d88 1
a88 1
// Override from class VitalObject.
d91 1
a91 1
   void shutDown ()
d93 2
a94 2
      myDemandCI.shutDown ();
      super     .shutDown ();
@


1.31
log
@Replaced class PublicObject with class VitalObject.
@
text
@d43 2
@


1.30
log
@Replaced toStringActive () with toString ().
@
text
@d19 1
a19 1
//    PublicObject
d86 1
a86 1
// Override from class PublicObject.
@


1.29
log
@"demandName" attribute.
@
text
@d47 15
a95 15
// toStringActive ().
//
// Override from class PublicObject.
//------------------------------------------------------------------------------

   String toStringActive ()
      {
      return
           "Demand \""
         + myDemandName
         + "\" for "
          + myPart;
      }

//------------------------------------------------------------------------------
@


1.28
log
@"operationName" attribute.
@
text
@d117 13
@


1.27
log
@Revised the shut-down model.
@
text
@d36 1
a36 1
//    theDemandName: The demandName of the Demand.
d126 1
a126 1
//    theDemandName: The demandName of the Demand.
@


1.26
log
@Implemented Utility class.
@
text
@a76 4

      myPart     = null;
      myDemandCI = null;

d150 1
a150 1
   private Part myPart;
d166 1
a166 1
   private DemandCI myDemandCI;
@


1.25
log
@Made accessor names begin with "get".
@
text
@d8 3
a10 1
package com.ibm.witj;
@


1.24
log
@Minor update.
@
text
@d29 1
a29 1
// makeInstance (thePart, demandNameVal)
d34 1
a34 1
//    demandNameVal: The demandName of the Demand.
d37 1
a37 1
   public static Demand makeInstance (Part thePart, String demandNameVal)
d41 1
a41 1
      return new Demand (thePart, demandNameVal);
d48 1
a48 1
   public Part myPart ()
d50 1
a50 1
      mustBeActive ("Demand.myPart");
d55 1
a55 1
   public String demandName ()
d57 1
a57 1
      mustBeActive ("Demand.demandName");
d59 1
a59 1
      return demandName;
d92 1
a92 1
         + demandName
d98 1
a98 1
// myCompClassID ()
d103 1
a103 1
   CompClassID myCompClassID ()
d109 1
a109 1
// myCompCI ().
d114 1
a114 1
   ComponentCI myCompCI ()
d128 1
a128 1
//    demandNameVal: The demandName of the Demand.
d131 1
a131 1
   private Demand (Part thePart, String demandNameVal)
d133 1
a133 1
      super (thePart.myCompMgr ());
d135 1
a135 1
      myPart     = thePart;
d137 1
a137 1
      demandName = demandNameVal;
d139 1
a139 1
      myDemandCI = new DemandCI (myPart.myPartCI (), demandName);
d155 1
a155 1
// demandName.
d160 1
a160 1
   private String demandName;
@


1.23
log
@Attributes.
@
text
@d45 1
a45 3
// myPart ().
//
// Accessor.
a54 6
//------------------------------------------------------------------------------
// demandName ().
//
// Accessor.
//------------------------------------------------------------------------------

@


1.22
log
@Attributes.
@
text
@a9 2
import  static com.ibm.witj.AttID.*;

a44 22
// getDemandVol ()
//
// Returns the current value of the demandVol attribute for this Demand.
//------------------------------------------------------------------------------

   public double[] getDemandVol ()
      {
      AttCI    theAttCI;
      double[] theDblArr;

      mustBeActive ("Demand.getDemandVol");

      theAttCI  = myProbCoord ().myAttMgr ().myAttCIFor (DEMAND_VOL);

      theDblArr = new double[nPeriods ()];

      theAttCI.getDblVec (myCompCI (), theDblArr);

      return theDblArr;
      }

//------------------------------------------------------------------------------
@


1.21
log
@Attributes.
@
text
@a46 29
// setDemandVol (theDblArr)
//
// Sets the value of the demandVol attribute for this Demand to theDblArr.
// theDblArr must be of length nPeriods.
//------------------------------------------------------------------------------

   public void setDemandVol (double[] theDblArr)
      {
      AttCI theAttCI;

      mustBeActive ("Demand.setDemandVol");

      if (theDblArr.length != nPeriods ())
         abortWmsg (
              "   Demand.setDemandVol (...) was called with an array\n"
            + "   whose length does not match nPeriods for the Problem.\n"
            + "\n"
            + "      Array Length: "
            +        theDblArr.length
            + "\n"
            + "      nPeriods:     "
            +        nPeriods ());

      theAttCI = myProbCoord ().myAttMgr ().myAttCIFor (DEMAND_VOL);

      theAttCI.setDblVec (myCompCI (), theDblArr);
      }

//------------------------------------------------------------------------------
d130 11
@


1.20
log
@Removed enum AttID.
@
text
@d10 2
d70 1
a70 1
      theAttCI = myProbCoord ().myAttMgr ().myAttCIFor ("demandVol");
d88 1
a88 1
      theAttCI  = myProbCoord ().myAttMgr ().myAttCIFor ("demandVol");
@


1.19
log
@Removed AttAcc classes.
@
text
@d68 1
a68 1
      theAttCI = myProbCoord ().myAttMgr ().myAttCIFor (AttID.demandVol);
d86 1
a86 1
      theAttCI  = myProbCoord ().myAttMgr ().myAttCIFor (AttID.demandVol);
@


1.18
log
@Attributes.
@
text
@d53 2
d57 14
a70 1
      getDblVecInAttAccFor (AttID.demandVol).setValue (theDblArr);
d81 3
d86 7
a92 1
      return getDblVecInAttAccFor (AttID.demandVol).getValue ();
@


1.17
log
@Implemented of class DblVecOutAttAcc.
@
text
@d45 1
a45 1
// demandVol ()
d47 2
a48 2
// Locates the DblVecInAttAcc for this Demand's Problem, associates it with
// the demandVol attribute of this Demand and then returns it.
d51 1
a51 1
   public final DblVecInAttAcc demandVol ()
d53 16
a68 3
      mustBeActive ("Demand.demandVol");
      
      return getDblVecInAttAccFor (AttID.demandVol);
@


1.16
log
@Implemented the demandVol attribute.
@
text
@d47 1
a47 1
// Retrieves the DblVecInAttAcc for this Demand's Problem, associates it with
@


1.15
log
@Attributes.
@
text
@d45 14
@


1.14
log
@Created Java class CompMgr.
@
text
@d96 1
a96 1
   public String toStringActive ()
@


1.13
log
@Attributes.
@
text
@d130 1
a130 1
      super (thePart.myProbCoord ());
@


1.12
log
@Removed class LTPubObject.
@
text
@d105 11
d162 1
a162 1
// The C++ Demand interface that belongs to this Demand.
@


1.11
log
@Added Java class LTPubObject.
@
text
@d18 2
a19 3
//       LTPubObject
//          Component
//             Demand
@


1.10
log
@Comments, etc.
@
text
@d18 3
a20 2
//       Component
//          Demand
@


1.9
log
@*** empty log message ***
@
text
@d1 7
@


1.8
log
@*** empty log message ***
@
text
@d37 26
@


1.7
log
@*** empty log message ***
@
text
@d51 2
a52 2
      demandedPart = null;
      myDemandCI   = null;
d69 1
a69 1
          + demandedPart;
d88 1
a88 1
      demandedPart = thePart;
d90 1
a90 1
      demandName   = demandNameVal;
d92 1
a92 1
      myDemandCI   = new DemandCI (demandedPart.myPartCI (), demandName);
d100 1
a100 1
// demandedPart.
d105 1
a105 1
   private Part demandedPart;
@


1.6
log
@*** empty log message ***
@
text
@d6 1
a6 1
// Represents an demand in an implosion problem.
d65 5
a69 1
      return "Demand \"" + demandName + "\" for " + demandedPart;
@


1.5
log
@*** empty log message ***
@
text
@d50 4
d101 1
a101 1
   private final Part demandedPart;
d117 1
a117 1
   private final DemandCI myDemandCI;
@


1.4
log
@*** empty log message ***
@
text
@a36 11
//------------------------------------------------------------------------------
// toString ().
//
// Override from class Object.
//------------------------------------------------------------------------------

   public String toString ()
      {
      return "Demand \"" + demandName + "\" for " + demandedPart;
      }

d53 11
@


1.3
log
@*** empty log message ***
@
text
@d10 1
a10 1
//    ExportedObject
d55 1
a55 1
// Override from class ExportedObject.
@


1.2
log
@*** empty log message ***
@
text
@d110 1
a110 1
// The Java interface to the C++ Demand that belongs to this Demand.
@


1.1
log
@*** empty log message ***
@
text
@d78 1
a78 1
      super (thePart.myCompMgr ());
@

