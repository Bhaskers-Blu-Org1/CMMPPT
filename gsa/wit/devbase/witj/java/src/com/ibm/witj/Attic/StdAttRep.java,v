head	1.52;
access;
symbols;
locks; strict;
comment	@# @;


1.52
date	2009.03.30.21.07.32;	author rjw;	state dead;
branches;
next	1.51;

1.51
date	2009.03.30.16.16.13;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2009.03.23.21.51.40;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2009.03.16.19.35.45;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2009.03.13.19.32.23;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2009.03.12.19.02.43;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2009.01.27.19.25.58;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2009.01.23.20.38.23;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2009.01.23.20.06.20;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2009.01.23.19.32.25;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2009.01.21.21.43.25;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2009.01.16.23.45.58;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2008.12.15.15.35.34;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2008.12.05.00.04.32;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2008.12.03.18.28.50;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.11.25.20.47.41;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.11.25.19.01.44;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2008.11.25.16.39.38;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.11.21.23.07.39;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.11.21.19.15.37;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.11.21.17.20.32;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.11.21.16.56.12;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.11.21.15.49.16;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.11.05.23.14.57;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.10.29.20.27.19;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.10.27.20.43.48;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.10.22.13.43.30;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.10.14.22.04.39;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.10.14.20.05.47;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.10.07.18.50.28;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.10.06.22.14.07;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.10.06.14.42.39;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.10.01.22.55.34;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.09.26.22.21.27;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.09.12.16.09.37;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.09.09.15.15.31;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.09.08.19.45.36;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.09.05.22.06.52;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.09.04.20.56.18;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.09.03.20.33.11;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.08.26.18.19.51;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.08.22.17.53.46;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.08.20.20.18.00;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.08.20.19.47.51;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.08.18.22.16.58;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.08.08.23.56.55;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.08.08.23.02.11;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.08.08.21.27.26;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.08.08.21.26.16;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2008.08.07.21.36.44;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.07.19.58.31;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.07.18.21.07;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.52
log
@Changed names of AttRep classes to AttImp.
@
text
@
//==============================================================================
// WIT-J Java Source File StdAttRep.java.
//
// Contains the declaration of class StdAttRep.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import       java.util.*;

//==============================================================================
// Class StdAttRep
//
// "Standardized Attribute Representative."
// An AttRep that operates in a standard, uniform way.
//
// Class Hierarchy:
//
// RetainedObject
//    AttRep
//       StdAttRep
//==============================================================================

final class StdAttRep extends AttRep
{
//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// buildInstances (theCoord)
//
// Creates and stores the StdAttReps that are to belong to theCoord.
//------------------------------------------------------------------------------

   static void buildInstances (Coordinator theCoord)
      {
      AttBldrCOR theAttBldrCOR;
      StdAttRep  theStdAttRep;

      theAttBldrCOR = new AttBldrCOR (theCoord.getCoordinatorCOR ());

      for (Attribute <?> theAtt: Attribute.getAttributes ())
         {
         if (theCoord.getAttRepFor (theAtt) != null)
            continue;

         theStdAttRep = new StdAttRep (theAttBldrCOR, theAtt);

         theCoord.store (theStdAttRep);
         }

      if (Coordinator.isSelfTesting ())
         {
         if (theAttBldrCOR.isEmpty ())
            {
            println (
                 "\n"
               + "All C++ Atts have been matched to "
               + "corresponding Java Attributes.");
            }
         else
            theAttBldrCOR.print ();
         }

      theAttBldrCOR.deactivate ();
      }

//------------------------------------------------------------------------------
// Overrides from class AttRep.
//------------------------------------------------------------------------------

   boolean appliesTo (CompClassID theCompClassID)
      {
      return (myAttCORMap.get (theCompClassID)!= null);
      }

//------------------------------------------------------------------------------

   boolean isModifiable ()
      {
      return modifiable;
      }

//------------------------------------------------------------------------------

   void setBool (Component theComp, boolean theValue)
      {
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.setBool (theCompCOR, theValue);
      }

//------------------------------------------------------------------------------

   void setInt (Component theComp, int theValue)
      {
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.setInt (theCompCOR, theValue);
      }

//------------------------------------------------------------------------------

   void setDbl (Component theComp, double theValue)
      {
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.setDbl (theCompCOR, theValue);
      }

//------------------------------------------------------------------------------

   void setBoolVec (Component theComp, boolean[] theArray)
      {
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.setBoolVec (theCompCOR, theArray);
      }

//------------------------------------------------------------------------------

   void setIntVec (Component theComp, int[] theArray)
      {
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.setIntVec (theCompCOR, theArray);
      }

//------------------------------------------------------------------------------

   void setDblVec  (Component theComp, double[]  theArray)
      {
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.setDblVec (theCompCOR, theArray);
      }

//------------------------------------------------------------------------------

   void setBoolVecToScalar  (Component theComp, boolean theValue)
      {
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.setBoolVecToScalar (theCompCOR, theValue);
      }

//------------------------------------------------------------------------------

   void setIntVecToScalar (Component theComp, int theValue)
      {
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.setIntVecToScalar (theCompCOR, theValue);
      }

//------------------------------------------------------------------------------

   void setDblVecToScalar (Component theComp, double theValue)
      {
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.setDblVecToScalar (theCompCOR, theValue);
      }

//------------------------------------------------------------------------------

   boolean getBool (Component theComp)
      {
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      return theAttCOR.getBool (theCompCOR);
      }

//------------------------------------------------------------------------------

   int getInt (Component theComp)
      {
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      return theAttCOR.getInt (theCompCOR);
      }

//------------------------------------------------------------------------------

   double  getDbl  (Component theComp)
      {
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      return theAttCOR.getDbl (theCompCOR);
      }

//------------------------------------------------------------------------------

   void getBoolVec (Component theComp, boolean[] theArray)
      {
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.getBoolVec (theCompCOR, theArray);
      }

//------------------------------------------------------------------------------

   void getIntVec (Component theComp, int[] theArray)
      {
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.getIntVec (theCompCOR, theArray);
      }

//------------------------------------------------------------------------------

   void getDblVec  (Component theComp, double[]  theArray)
      {
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.getDblVec (theCompCOR, theArray);
      }

//------------------------------------------------------------------------------
// deactivate ()
//
// Override from class RetainedObject.
//------------------------------------------------------------------------------

   void deactivate ()
      {
      AttCOR theAttCOR;

      for (CompClassID theCompClassID: CompClassID.values ())
         {
         theAttCOR = myAttCORMap.get (theCompClassID);

         if (theAttCOR != null)
            theAttCOR.deactivate ();
         }

      myAttCORMap.clear ();

      super.deactivate ();
      }

//==============================================================================
// Private Constructor
//==============================================================================

   private StdAttRep (AttBldrCOR theAttBldrCOR, Attribute <?> theAtt)
      {
      super (theAtt);

      myAttCORMap = new EnumMap <CompClassID, AttCOR> (CompClassID.class);

      setUpAttCORMap (theAttBldrCOR);

      modifiable = compModifiable ();

      if (Coordinator.isSelfTesting ())
         checkValueType ();
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// setUpAttCORMap ()
//
// Sets up myAttCORMap.
//------------------------------------------------------------------------------

   private void setUpAttCORMap (AttBldrCOR theAttBldrCOR)
      {
      String theAttCORName;
      AttCOR theAttCOR;

      for (CompClassID theCompClassID: CompClassID.values ())
         {
         theAttCORName = theCompClassID + "." + getAttribute ();

         if (theAttBldrCOR.hasAttFor (theAttCORName))
            {
            theAttCOR = new AttCOR (theAttBldrCOR, theAttCORName);

            myAttCORMap.put (theCompClassID, theAttCOR);
            }
         }
      }

//------------------------------------------------------------------------------
// compModifiable ()
//
// Computes and returns the value to be assigned to the modifiable field of this
// StdAttRep.
//
// * If all C++ attributes corresponding to this StdAttRep are modifiable,
//   true is returned.
//
// * If all C++ attributes corresponding to this StdAttRep are non-modifiable,
//   false is returned.
//
// * If one  C++ attribute corresponding to this StdAttRep is modifiable and
//   another C++ attribute corresponding to this StdAttRep is non-modifiable,
//   an assert error is issued.
//------------------------------------------------------------------------------

   private boolean compModifiable ()
      {
      boolean prevAttCORFound;
      boolean firstAttCORIsMod;
      AttCOR  theAttCOR;
      boolean theAttCORIsMod;

      prevAttCORFound  = false;
      firstAttCORIsMod = false;

      for (CompClassID theCompClassID: CompClassID.values ())
         {
         theAttCOR = myAttCORMap.get (theCompClassID);

         if (theAttCOR == null)
            continue;

         theAttCORIsMod = theAttCOR.isModifiable ();

         if (! prevAttCORFound)
            {
            firstAttCORIsMod = theAttCORIsMod;
            prevAttCORFound  = true;
            }
         else
            assert (theAttCORIsMod == firstAttCORIsMod);
         }

      return firstAttCORIsMod;
      }

//------------------------------------------------------------------------------
// checkValueType ()
//
// Verifies that the value type of the Java Attribute for this StdAttRep matches
// that of all corresponding C++ Atts.
//------------------------------------------------------------------------------

   private void checkValueType ()
      {
      String theTypeName;
      AttCOR theAttCOR;

      theTypeName = getAttribute ().getValueType ().getSimpleName ();

      for (CompClassID theCompClassID: CompClassID.values ())
         {
         theAttCOR = myAttCORMap.get (theCompClassID);

         if (theAttCOR == null)
            continue;

         if (! theAttCOR.valueTypeMatches (theTypeName))
            internalError (
                 "   A Java Attribute was found whose value type does not\n"
               + "   match that of all of the corresponding C++ Atts.\n"
               + "\n"
               + "      Attribute:       " + getAttribute () + "\n"
               + "      Component Class: " + theCompClassID  + "\n"
               + "      Value Type:      " + theTypeName);
         }
      }

//------------------------------------------------------------------------------
// getAttCORFor (theComp)
//
// Returns the AttCOR that owns the C++ Att corresponding to this StdAttRep and
// the Component class of theComp, if any; otherwise null.
//------------------------------------------------------------------------------

   private AttCOR getAttCORFor (Component theComp)
      {
      return myAttCORMap.get (theComp.getCompClassID ());
      }
 
//------------------------------------------------------------------------------
// getCompCORFor (theComp)
//
// Returns the ComponentCOR for theComp.
//------------------------------------------------------------------------------

   private ComponentCOR getCompCORFor (Component theComp)
      {
      return theComp.getComponentCOR ();
      }

//==============================================================================
// Private Fields
//==============================================================================
 
//------------------------------------------------------------------------------
// myAttCORMap
//
// myAttCORMap.get (theCompClassID) is the AttCOR that owns the C++ Att
// corresponding to this StdAttRep and the Component class identified by
// theCompClassID, if any; otherwise null.
//------------------------------------------------------------------------------

   private final EnumMap <CompClassID, AttCOR> myAttCORMap;

//------------------------------------------------------------------------------
// True, iff the corresponding setValue method(s) of class Component can validly
// be invoked for this StdAttRep's Attribute.
//------------------------------------------------------------------------------

   private final boolean modifiable;

//==============================================================================
}
@


1.51
log
@Minor revision.
@
text
@@


1.50
log
@Added theComp.setValueToScalar (...) methods.
@
text
@d90 1
a90 1
   void setBool    (Component theComp, boolean   theValue)
d92 7
a98 1
      myAttCORFor (theComp).setBool    (theComp.getComponentCOR (), theValue);
d103 1
a103 1
   void setInt     (Component theComp, int       theValue)
d105 7
a111 1
      myAttCORFor (theComp).setInt     (theComp.getComponentCOR (), theValue);
d116 1
a116 1
   void setDbl     (Component theComp, double    theValue)
d118 7
a124 1
      myAttCORFor (theComp).setDbl     (theComp.getComponentCOR (), theValue);
d131 7
a137 1
      myAttCORFor (theComp).setBoolVec (theComp.getComponentCOR (), theArray);
d142 1
a142 1
   void setIntVec  (Component theComp, int[]     theArray)
d144 7
a150 1
      myAttCORFor (theComp).setIntVec  (theComp.getComponentCOR (), theArray);
d157 7
a163 1
      myAttCORFor (theComp).setDblVec  (theComp.getComponentCOR (), theArray);
d170 7
a176 2
      myAttCORFor (theComp).
         setBoolVecToScalar (theComp.getComponentCOR (), theValue);
d181 1
a181 1
   void setIntVecToScalar  (Component theComp, int theValue)
d183 7
a189 2
      myAttCORFor (theComp).
         setIntVecToScalar (theComp.getComponentCOR (), theValue);
d194 1
a194 1
   void setDblVecToScalar  (Component theComp, double theValue)
d196 7
a202 2
      myAttCORFor (theComp).
         setDblVecToScalar (theComp.getComponentCOR (), theValue);
d209 7
a215 1
      return myAttCORFor (theComp).getBool (theComp.getComponentCOR ());
d220 1
a220 1
   int     getInt  (Component theComp)
d222 7
a228 1
      return myAttCORFor (theComp).getInt  (theComp.getComponentCOR ());
d235 7
a241 1
      return myAttCORFor (theComp).getDbl  (theComp.getComponentCOR ());
d248 7
a254 1
      myAttCORFor (theComp).getBoolVec (theComp.getComponentCOR (), theArray);
d259 1
a259 1
   void getIntVec  (Component theComp, int[]     theArray)
d261 7
a267 1
      myAttCORFor (theComp).getIntVec  (theComp.getComponentCOR (), theArray);
d274 7
a280 1
      myAttCORFor (theComp).getDblVec  (theComp.getComponentCOR (), theArray);
d433 1
a433 1
// myAttCORFor (theComp)
d439 1
a439 1
   private AttCOR myAttCORFor (Component theComp)
d444 11
@


1.49
log
@Replaced Attribute.getAllAttributes () with Attribute.getAttributes (),
which returns an unmodifiable List.
@
text
@d132 24
@


1.48
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d46 1
a46 1
      for (Attribute <?> theAtt: Attribute.getAllAttributes ())
@


1.47
log
@Changed name of Problem method shutDown to deactivate.
@
text
@d76 1
a76 1
   boolean appliesTo (ElemClassID theElemClassID)
d78 1
a78 1
      return (myAttCORMap.get (theElemClassID)!= null);
d90 1
a90 1
   void setBool    (Element theElem, boolean   theValue)
d92 1
a92 1
      myAttCORFor (theElem).setBool    (theElem.getElementCOR (), theValue);
d97 1
a97 1
   void setInt     (Element theElem, int       theValue)
d99 1
a99 1
      myAttCORFor (theElem).setInt     (theElem.getElementCOR (), theValue);
d104 1
a104 1
   void setDbl     (Element theElem, double    theValue)
d106 1
a106 1
      myAttCORFor (theElem).setDbl     (theElem.getElementCOR (), theValue);
d111 1
a111 1
   void setBoolVec (Element theElem, boolean[] theArray)
d113 1
a113 1
      myAttCORFor (theElem).setBoolVec (theElem.getElementCOR (), theArray);
d118 1
a118 1
   void setIntVec  (Element theElem, int[]     theArray)
d120 1
a120 1
      myAttCORFor (theElem).setIntVec  (theElem.getElementCOR (), theArray);
d125 1
a125 1
   void setDblVec  (Element theElem, double[]  theArray)
d127 1
a127 1
      myAttCORFor (theElem).setDblVec  (theElem.getElementCOR (), theArray);
d132 1
a132 1
   boolean getBool (Element theElem)
d134 1
a134 1
      return myAttCORFor (theElem).getBool (theElem.getElementCOR ());
d139 1
a139 1
   int     getInt  (Element theElem)
d141 1
a141 1
      return myAttCORFor (theElem).getInt  (theElem.getElementCOR ());
d146 1
a146 1
   double  getDbl  (Element theElem)
d148 1
a148 1
      return myAttCORFor (theElem).getDbl  (theElem.getElementCOR ());
d153 1
a153 1
   void getBoolVec (Element theElem, boolean[] theArray)
d155 1
a155 1
      myAttCORFor (theElem).getBoolVec (theElem.getElementCOR (), theArray);
d160 1
a160 1
   void getIntVec  (Element theElem, int[]     theArray)
d162 1
a162 1
      myAttCORFor (theElem).getIntVec  (theElem.getElementCOR (), theArray);
d167 1
a167 1
   void getDblVec  (Element theElem, double[]  theArray)
d169 1
a169 1
      myAttCORFor (theElem).getDblVec  (theElem.getElementCOR (), theArray);
d182 1
a182 1
      for (ElemClassID theElemClassID: ElemClassID.values ())
d184 1
a184 1
         theAttCOR = myAttCORMap.get (theElemClassID);
d203 1
a203 1
      myAttCORMap = new EnumMap <ElemClassID, AttCOR> (ElemClassID.class);
d228 1
a228 1
      for (ElemClassID theElemClassID: ElemClassID.values ())
d230 1
a230 1
         theAttCORName = theElemClassID + "." + getAttribute ();
d236 1
a236 1
            myAttCORMap.put (theElemClassID, theAttCOR);
d268 1
a268 1
      for (ElemClassID theElemClassID: ElemClassID.values ())
d270 1
a270 1
         theAttCOR = myAttCORMap.get (theElemClassID);
d303 1
a303 1
      for (ElemClassID theElemClassID: ElemClassID.values ())
d305 1
a305 1
         theAttCOR = myAttCORMap.get (theElemClassID);
d315 3
a317 3
               + "      Attribute:     " + getAttribute () + "\n"
               + "      Element Class: " + theElemClassID  + "\n"
               + "      Value Type:    " + theTypeName);
d322 1
a322 1
// myAttCORFor (theElement)
d325 1
a325 1
// the Element class of theElement, if any; otherwise null.
d328 1
a328 1
   private AttCOR myAttCORFor (Element theElement)
d330 1
a330 1
      return myAttCORMap.get (theElement.getElemClassID ());
d340 3
a342 3
// myAttCORMap.get (theElemClassID) is the AttCOR that owns the C++ Att
// corresponding to this StdAttRep and the Element class identified by
// theElemClassID, if any; otherwise null.
d345 1
a345 1
   private final EnumMap <ElemClassID, AttCOR> myAttCORMap;
d348 1
a348 1
// True, iff the corresponding setValue method(s) of class Element can validly
@


1.46
log
@Self-Test.
@
text
@d69 1
a69 1
      theAttBldrCOR.shutDown ();
d173 1
a173 1
// shutDown ()
d178 1
a178 1
   void shutDown ()
d187 1
a187 1
            theAttCOR.shutDown ();
d192 1
a192 1
      super.shutDown ();
@


1.45
log
@Coordinator
@
text
@d51 1
a51 1
         theStdAttRep = new StdAttRep (theCoord, theAttBldrCOR, theAtt);
d56 1
a56 1
      if (theCoord.isSelfTesting ())
d199 1
a199 4
   private StdAttRep (
         Coordinator   theCoord,
         AttBldrCOR    theAttBldrCOR,
         Attribute <?> theAtt)
d209 1
a209 1
      if (theCoord.isSelfTesting ())
@


1.44
log
@Coordinator
@
text
@d56 1
a56 1
      if (theCoord.getProblem().isSelfTesting ())
d212 1
a212 1
      if (theCoord.getProblem ().isSelfTesting ())
@


1.43
log
@Coordinator
@
text
@d51 1
a51 2
         theStdAttRep =
            new StdAttRep (theCoord.getProblem (), theAttBldrCOR, theAtt);
d200 1
a200 1
         Problem       theProblem,
d212 1
a212 1
      if (theProblem.isSelfTesting ())
@


1.42
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d34 1
a34 1
// buildInstances (theCoordinator)
d36 1
a36 1
// Creates and stores the StdAttReps that are to belong to theCoordinator.
d39 1
a39 1
   static void buildInstances (Coordinator theCoordinator)
d44 1
a44 1
      theAttBldrCOR = new AttBldrCOR (theCoordinator.getCoordinatorCOR ());
d48 1
a48 1
         if (theCoordinator.getAttRepFor (theAtt) != null)
d52 1
a52 1
            new StdAttRep (theCoordinator.getProblem (), theAttBldrCOR, theAtt);
d54 1
a54 1
         theCoordinator.store (theStdAttRep);
d57 1
a57 1
      if (theCoordinator.getProblem().isSelfTesting ())
@


1.41
log
@Java ProbMgr
@
text
@d34 1
a34 1
// buildInstances (theProbMgr)
d36 1
a36 1
// Creates and stores the StdAttReps that are to belong to theProbMgr.
d39 1
a39 1
   static void buildInstances (ProbMgr theProbMgr)
d44 1
a44 1
      theAttBldrCOR = new AttBldrCOR (theProbMgr.getProbMgrCOR ());
d48 1
a48 1
         if (theProbMgr.getAttRepFor (theAtt) != null)
d52 1
a52 1
            new StdAttRep (theProbMgr.getProblem (), theAttBldrCOR, theAtt);
d54 1
a54 1
         theProbMgr.store (theStdAttRep);
d57 1
a57 1
      if (theProbMgr.getProblem().isSelfTesting ())
@


1.40
log
@Minor revision.
@
text
@d30 1
a30 1
// Package-Internal Constructor
d33 7
a39 4
   StdAttRep (
         Problem       theProblem,
         AttBldrCOR    theAttBldrCOR,
         Attribute <?> theAtt)
d41 9
a49 1
      super (theAtt);
d51 2
a52 1
      myAttCORMap = new EnumMap <ElemClassID, AttCOR> (ElemClassID.class);
d54 2
a55 1
      setUpAttCORMap (theAttBldrCOR);
d57 12
a68 1
      modifiable = compModifiable ();
d70 1
a70 2
      if (theProblem.isSelfTesting ())
         checkValueType ();
a72 4
//==============================================================================
// Package-Internal Methods
//==============================================================================

d197 21
@


1.39
log
@Replaced Utility.intAbortWmsg with Utility.internalError.
@
text
@d22 3
a24 3
//    RetainedObject
//       AttRep
//          StdAttRep
@


1.38
log
@Changed name of method Attribute.allowsSetValue to isModifiable.
@
text
@d275 7
a281 7
            intAbortWmsg (
               "   A Java Attribute was found whose value type does not\n"
             + "   match that of all of the corresponding C++ Atts.\n"
             + "\n"
             + "      Attribute:     " + getAttribute () + "\n"
             + "      Element Class: " + theElemClassID  + "\n"
             + "      Value Type:    " + theTypeName);
@


1.37
log
@Dismantling Session.
@
text
@d44 1
a44 1
      allowSetValue = compAllowSetValue ();
d65 1
a65 1
   boolean allowsSetValue ()
d67 1
a67 1
      return allowSetValue;
d206 1
a206 1
// compAllowSetValue ()
d208 2
a209 1
// Computes and returns the value of the allowSetValue field for this AttRep.
d211 1
a211 1
// * If all C++ attributes corresponding to this StdAttRep allow setValue,
d214 1
a214 1
// * If no C++ attribute corresponding to this StdAttRep allows setValue,
d217 3
a219 3
// * If one C++ attribute corresponding to this StdAttRep allows setValue and
//   another C++ attribute corresponding to this StdAttRep does not allow
//   setValue, an error is issued.
d222 1
a222 1
   private boolean compAllowSetValue ()
d224 2
a225 1
      boolean firstAttCOR;
d227 1
a227 2
      boolean theAttCORAllowsIt;
      boolean firstAttCORAllowsIt;
d229 2
a230 2
      firstAttCOR         = true;
      firstAttCORAllowsIt = false;
d239 1
a239 1
         theAttCORAllowsIt = theAttCOR.allowsSetValue ();
d241 1
a241 1
         if (firstAttCOR)
d243 2
a244 3
            firstAttCORAllowsIt = theAttCORAllowsIt;

            firstAttCOR         = false;
d247 1
a247 1
            assert (theAttCORAllowsIt == firstAttCORAllowsIt);
d250 1
a250 1
      return firstAttCORAllowsIt;
d313 1
a313 1
// be invoked for getAttribute ().
d316 1
a316 1
   private final boolean allowSetValue;
@


1.36
log
@Moved self-test responsibility from class Session to class Problem.
@
text
@d34 1
a34 1
         Session       theSession,
d46 1
a46 1
      if (theSession.getProblem ().isSelfTesting ())
@


1.35
log
@Moved some responsibility from Session to Problem.
@
text
@d46 1
a46 1
      if (theSession.isSelfTesting ())
@


1.34
log
@Minor revision.
@
text
@d46 1
a46 1
      if (theSession.getSelfTestMode ())
@


1.33
log
@Removed all remaining reflection code.
@
text
@d44 1
a44 1
      iAllowSetValue = compAllowSetValue ();
d67 1
a67 1
      return iAllowSetValue;
d208 1
a208 1
// Computes and returns the value of the iAllowSetValue field for this AttRep.
d316 1
a316 1
   private final boolean iAllowSetValue;
@


1.32
log
@Attributes.
@
text
@d44 1
a44 1
      detIAllowSetValue ();
d65 7
a154 48
// compIAllowSetValue ()
//
// Override from class AttRep.
//
// * If all C++ attributes corresponding to this StdAttRep allow setValue,
//   true is returned.
//
// * If no C++ attribute corresponding to this StdAttRep allows setValue,
//   false is returned.
//
// * If one C++ attribute corresponding to this StdAttRep allows setValue and
//   another C++ attribute corresponding to this StdAttRep does not allow
//   setValue, an error is issued.
//------------------------------------------------------------------------------

   boolean compIAllowSetValue ()
      {
      boolean firstAttCOR;
      AttCOR  theAttCOR;
      boolean theAttCORAllowsIt;
      boolean firstAttCORAllowsIt;

      firstAttCOR         = true;
      firstAttCORAllowsIt = false;

      for (ElemClassID theElemClassID: ElemClassID.values ())
         {
         theAttCOR = myAttCORMap.get (theElemClassID);

         if (theAttCOR == null)
            continue;

         theAttCORAllowsIt = theAttCOR.allowsSetValue ();

         if (firstAttCOR)
            {
            firstAttCORAllowsIt = theAttCORAllowsIt;

            firstAttCOR         = false;
            }
         else
            assert (theAttCORAllowsIt == firstAttCORAllowsIt);
         }

      return firstAttCORAllowsIt;
      }

//------------------------------------------------------------------------------
d206 48
d311 7
@


1.31
log
@Removed Enum AccessStyle.
@
text
@d44 1
a44 1
      detAllowSetValue ();
a57 7
   boolean appliesTo (Element theElem)
      {
      return (myAttCORFor (theElem) != null);
      }

//------------------------------------------------------------------------------

d148 1
a148 1
// compAllowSetValue ()
d163 1
a163 1
   boolean compAllowSetValue ()
@


1.30
log
@Attributes.
@
text
@d44 1
a44 1
      detAccessStyle ();
d155 1
a155 1
// compAccessStyle ()
d159 2
a160 2
// * If all C++ attributes corresponding to this StdAttRep are input
//   attributes, INPUT  is returned.
d162 2
a163 2
// * If all C++ attributes corresponding to this StdAttRep are output
//   attributes, OUtPUT is returned.
d165 3
a167 2
// * If not all C++ attributes corresponding to this StdAttRep have the same
//   access style, an error is issued.
d170 1
a170 1
   AccessStyle compAccessStyle ()
d172 4
a175 3
      AttCOR      theAttCOR;
      AccessStyle theAttCORStyle;
      AccessStyle theAccessStyle;
d177 2
a178 1
      theAccessStyle = null;
d187 1
a187 4
         theAttCORStyle =
            theAttCOR.allowsSetValue ()?
               AccessStyle.INPUT:
               AccessStyle.OUTPUT;
d189 6
a194 2
         if (theAccessStyle == null)
            theAccessStyle = theAttCORStyle;
d196 1
a196 1
            assert (theAttCORStyle == theAccessStyle);
d199 1
a199 4
      if (theAccessStyle == null)
         theAccessStyle = AccessStyle.OUTPUT;

      return theAccessStyle;
@


1.29
log
@Minor revision.
@
text
@d185 1
a185 1
            theAttCOR.getIsInputAtt ()?
@


1.28
log
@Implemented theAttribute.appliesTo (theClass).
@
text
@d36 1
a36 1
         Attribute <?> theAttribute)
d38 1
a38 1
      super (theAttribute);
@


1.27
log
@Changed ownership of AttRepMgr from Problem to Session.
@
text
@d65 7
@


1.26
log
@Changed name of generic class AttSpec <V> to Attribute <V>.
@
text
@d34 1
a34 1
         Problem       theProblem,
d46 1
a46 1
      if (theProblem.getSession ().getSelfTestMode ())
@


1.25
log
@Minor Revision.
@
text
@d34 3
a36 3
         Problem     theProblem,
         AttBldrCOR  theAttBldrCOR,
         AttSpec <?> theAttSpec)
d38 1
a38 1
      super (theAttSpec);
d234 1
a234 1
         theAttCORName = theElemClassID + "." + getAttSpec ();
d248 1
a248 1
// Verifies that the value type of the Java AttSpec for this StdAttRep matches
d257 1
a257 1
      theTypeName = getAttSpec ().getValueType ().getSimpleName ();
d268 1
a268 1
               "   A Java AttSpec was found whose value type does not\n"
d271 2
a272 2
             + "      AttSpec:       " + getAttSpec ()  + "\n"
             + "      Element Class: " + theElemClassID + "\n"
@


1.24
log
@Conditional expressions.
@
text
@d178 1
a178 1
            theAttCOR.getInputAccess ()?
@


1.23
log
@Name change.
@
text
@d177 7
a183 2
         if (theAttCOR.getInputAccess ())
            theAttCORStyle = AccessStyle.INPUT;
a184 3
            theAttCORStyle = AccessStyle.OUTPUT;

         if (theAccessStyle != null)
a185 2
         else
            theAccessStyle = theAttCORStyle;
@


1.22
log
@Changed name of Component to Entity.
@
text
@d40 1
a40 1
      myAttCORMap = new EnumMap <EntityClassID, AttCOR> (EntityClassID.class);
d58 1
a58 1
   boolean appliesTo (Entity theEntity)
d60 1
a60 1
      return (myAttCORFor (theEntity) != null);
d65 1
a65 1
   void setBool    (Entity theEntity, boolean   theValue)
d67 1
a67 1
      myAttCORFor (theEntity).setBool    (theEntity.getEntityCOR (), theValue);
d72 1
a72 1
   void setInt     (Entity theEntity, int       theValue)
d74 1
a74 1
      myAttCORFor (theEntity).setInt     (theEntity.getEntityCOR (), theValue);
d79 1
a79 1
   void setDbl     (Entity theEntity, double    theValue)
d81 1
a81 1
      myAttCORFor (theEntity).setDbl     (theEntity.getEntityCOR (), theValue);
d86 1
a86 1
   void setBoolVec (Entity theEntity, boolean[] theArray)
d88 1
a88 1
      myAttCORFor (theEntity).setBoolVec (theEntity.getEntityCOR (), theArray);
d93 1
a93 1
   void setIntVec  (Entity theEntity, int[]     theArray)
d95 1
a95 1
      myAttCORFor (theEntity).setIntVec  (theEntity.getEntityCOR (), theArray);
d100 1
a100 1
   void setDblVec  (Entity theEntity, double[]  theArray)
d102 1
a102 1
      myAttCORFor (theEntity).setDblVec  (theEntity.getEntityCOR (), theArray);
d107 1
a107 1
   boolean getBool (Entity theEntity)
d109 1
a109 1
      return myAttCORFor (theEntity).getBool (theEntity.getEntityCOR ());
d114 1
a114 1
   int     getInt  (Entity theEntity)
d116 1
a116 1
      return myAttCORFor (theEntity).getInt  (theEntity.getEntityCOR ());
d121 1
a121 1
   double  getDbl  (Entity theEntity)
d123 1
a123 1
      return myAttCORFor (theEntity).getDbl  (theEntity.getEntityCOR ());
d128 1
a128 1
   void getBoolVec (Entity theEntity, boolean[] theArray)
d130 1
a130 1
      myAttCORFor (theEntity).getBoolVec (theEntity.getEntityCOR (), theArray);
d135 1
a135 1
   void getIntVec  (Entity theEntity, int[]     theArray)
d137 1
a137 1
      myAttCORFor (theEntity).getIntVec  (theEntity.getEntityCOR (), theArray);
d142 1
a142 1
   void getDblVec  (Entity theEntity, double[]  theArray)
d144 1
a144 1
      myAttCORFor (theEntity).getDblVec  (theEntity.getEntityCOR (), theArray);
d170 1
a170 1
      for (EntityClassID theEntityClassID: EntityClassID.values ())
d172 1
a172 1
         theAttCOR = myAttCORMap.get (theEntityClassID);
d204 1
a204 1
      for (EntityClassID theEntityClassID: EntityClassID.values ())
d206 1
a206 1
         theAttCOR = myAttCORMap.get (theEntityClassID);
d232 1
a232 1
      for (EntityClassID theEntityClassID: EntityClassID.values ())
d234 1
a234 1
         theAttCORName = theEntityClassID + "." + getAttSpec ();
d240 1
a240 1
            myAttCORMap.put (theEntityClassID, theAttCOR);
d259 1
a259 1
      for (EntityClassID theEntityClassID: EntityClassID.values ())
d261 1
a261 1
         theAttCOR = myAttCORMap.get (theEntityClassID);
d271 3
a273 3
             + "      AttSpec:      " + getAttSpec ()  + "\n"
             + "      Entity Class: " + theEntityClassID + "\n"
             + "      Value Type:   " + theTypeName);
d278 1
a278 1
// myAttCORFor (theEntity)
d281 1
a281 1
// the Entity class of theEntity, if any; otherwise null.
d284 1
a284 1
   private AttCOR myAttCORFor (Entity theEntity)
d286 1
a286 1
      return myAttCORMap.get (theEntity.getEntityClassID ());
d296 3
a298 3
// myAttCORMap.get (theEntityClassID) is the AttCOR that owns the C++ Att
// corresponding to this StdAttRep and the Entity class identified by
// theEntityClassID, if any; otherwise null.
d301 1
a301 1
   private final EnumMap <EntityClassID, AttCOR> myAttCORMap;
@


1.21
log
@Minor revision.
@
text
@d40 1
a40 1
      myAttCORMap = new EnumMap <CompClassID, AttCOR> (CompClassID.class);
d58 1
a58 1
   boolean appliesTo (Component theComp)
d60 1
a60 1
      return (myAttCORFor (theComp) != null);
d65 1
a65 1
   void setBool    (Component theComp, boolean   theValue)
d67 1
a67 1
      myAttCORFor (theComp).setBool    (theComp.getCompCOR (), theValue);
d72 1
a72 1
   void setInt     (Component theComp, int       theValue)
d74 1
a74 1
      myAttCORFor (theComp).setInt     (theComp.getCompCOR (), theValue);
d79 1
a79 1
   void setDbl     (Component theComp, double    theValue)
d81 1
a81 1
      myAttCORFor (theComp).setDbl     (theComp.getCompCOR (), theValue);
d86 1
a86 1
   void setBoolVec (Component theComp, boolean[] theArray)
d88 1
a88 1
      myAttCORFor (theComp).setBoolVec (theComp.getCompCOR (), theArray);
d93 1
a93 1
   void setIntVec  (Component theComp, int[]     theArray)
d95 1
a95 1
      myAttCORFor (theComp).setIntVec  (theComp.getCompCOR (), theArray);
d100 1
a100 1
   void setDblVec  (Component theComp, double[]  theArray)
d102 1
a102 1
      myAttCORFor (theComp).setDblVec  (theComp.getCompCOR (), theArray);
d107 1
a107 1
   boolean getBool (Component theComp)
d109 1
a109 1
      return myAttCORFor (theComp).getBool (theComp.getCompCOR ());
d114 1
a114 1
   int     getInt  (Component theComp)
d116 1
a116 1
      return myAttCORFor (theComp).getInt  (theComp.getCompCOR ());
d121 1
a121 1
   double  getDbl  (Component theComp)
d123 1
a123 1
      return myAttCORFor (theComp).getDbl  (theComp.getCompCOR ());
d128 1
a128 1
   void getBoolVec (Component theComp, boolean[] theArray)
d130 1
a130 1
      myAttCORFor (theComp).getBoolVec (theComp.getCompCOR (), theArray);
d135 1
a135 1
   void getIntVec  (Component theComp, int[]     theArray)
d137 1
a137 1
      myAttCORFor (theComp).getIntVec  (theComp.getCompCOR (), theArray);
d142 1
a142 1
   void getDblVec  (Component theComp, double[]  theArray)
d144 1
a144 1
      myAttCORFor (theComp).getDblVec  (theComp.getCompCOR (), theArray);
d170 1
a170 1
      for (CompClassID theCompClassID: CompClassID.values ())
d172 1
a172 1
         theAttCOR = myAttCORMap.get (theCompClassID);
d204 1
a204 1
      for (CompClassID theCompClassID: CompClassID.values ())
d206 1
a206 1
         theAttCOR = myAttCORMap.get (theCompClassID);
d232 1
a232 1
      for (CompClassID theCompClassID: CompClassID.values ())
d234 1
a234 1
         theAttCORName = theCompClassID + "." + getAttSpec ();
d240 1
a240 1
            myAttCORMap.put (theCompClassID, theAttCOR);
d259 1
a259 1
      for (CompClassID theCompClassID: CompClassID.values ())
d261 1
a261 1
         theAttCOR = myAttCORMap.get (theCompClassID);
d271 3
a273 3
             + "      AttSpec:         " + getAttSpec ()  + "\n"
             + "      Component Class: " + theCompClassID + "\n"
             + "      Value Type:      " + theTypeName);
d278 1
a278 1
// myAttCORFor (theComp)
d281 1
a281 1
// the Component class of theComp, if any; otherwise null.
d284 1
a284 1
   private AttCOR myAttCORFor (Component theComp)
d286 1
a286 1
      return myAttCORMap.get (theComp.getCompClassID ());
d296 3
a298 3
// myAttCORMap.get (theCompClassID) is the AttCOR that owns the C++ Att
// corresponding to this StdAttRep and the Component class identified by
// theCompClassID, if any; otherwise null.
d301 1
a301 1
   private final EnumMap <CompClassID, AttCOR> myAttCORMap;
@


1.20
log
@Minor revision.
@
text
@d177 1
a177 1
         if (theAttCOR.getInputMode ())
@


1.19
log
@Numerous class name changes.
@
text
@d177 1
a177 1
         if (theAttCOR.isAnInputAtt ())
@


1.18
log
@Active state / shutDown method.
@
text
@d35 1
a35 1
         AttBldrCI   theAttBldrCI,
d40 1
a40 1
      myAttCIMap    = new EnumMap <CompClassID, AttCI> (CompClassID.class);
d42 1
a42 1
      setUpAttCIMap (theAttBldrCI);
d60 1
a60 1
      return (myAttCIFor (theComp) != null);
d67 1
a67 1
      myAttCIFor (theComp).setBool    (theComp.getCompCI (), theValue);
d74 1
a74 1
      myAttCIFor (theComp).setInt     (theComp.getCompCI (), theValue);
d81 1
a81 1
      myAttCIFor (theComp).setDbl     (theComp.getCompCI (), theValue);
d88 1
a88 1
      myAttCIFor (theComp).setBoolVec (theComp.getCompCI (), theArray);
d95 1
a95 1
      myAttCIFor (theComp).setIntVec  (theComp.getCompCI (), theArray);
d102 1
a102 1
      myAttCIFor (theComp).setDblVec  (theComp.getCompCI (), theArray);
d109 1
a109 1
      return myAttCIFor (theComp).getBool (theComp.getCompCI ());
d116 1
a116 1
      return myAttCIFor (theComp).getInt  (theComp.getCompCI ());
d123 1
a123 1
      return myAttCIFor (theComp).getDbl  (theComp.getCompCI ());
d130 1
a130 1
      myAttCIFor (theComp).getBoolVec (theComp.getCompCI (), theArray);
d137 1
a137 1
      myAttCIFor (theComp).getIntVec  (theComp.getCompCI (), theArray);
d144 1
a144 1
      myAttCIFor (theComp).getDblVec  (theComp.getCompCI (), theArray);
d164 2
a165 2
      AttCI       theAttCI;
      AccessStyle theAttCIStyle;
d172 1
a172 1
         theAttCI = myAttCIMap.get (theCompClassID);
d174 1
a174 1
         if (theAttCI == null)
d177 2
a178 2
         if (theAttCI.isAnInputAtt ())
            theAttCIStyle = AccessStyle.INPUT;
d180 1
a180 1
            theAttCIStyle = AccessStyle.OUTPUT;
d183 1
a183 1
            assert (theAttCIStyle == theAccessStyle);
d185 1
a185 1
            theAccessStyle = theAttCIStyle;
d202 1
a202 1
      AttCI theAttCI;
d206 1
a206 1
         theAttCI = myAttCIMap.get (theCompClassID);
d208 2
a209 2
         if (theAttCI != null)
            theAttCI.shutDown ();
d212 1
a212 1
      myAttCIMap.clear ();
d222 1
a222 1
// setUpAttCIMap ()
d224 1
a224 1
// Sets up myAttCIMap.
d227 1
a227 1
   private void setUpAttCIMap (AttBldrCI theAttBldrCI)
d229 2
a230 2
      String theAttCIName;
      AttCI  theAttCI;
d234 1
a234 1
         theAttCIName = theCompClassID + "." + getAttSpec ();
d236 1
a236 1
         if (theAttBldrCI.hasAttFor (theAttCIName))
d238 1
a238 1
            theAttCI = new AttCI (theAttBldrCI, theAttCIName);
d240 1
a240 1
            myAttCIMap.put (theCompClassID, theAttCI);
d255 1
a255 1
      AttCI  theAttCI;
d261 1
a261 1
         theAttCI = myAttCIMap.get (theCompClassID);
d263 1
a263 1
         if (theAttCI == null)
d266 1
a266 1
         if (! theAttCI.valueTypeMatches (theTypeName))
d278 1
a278 1
// myAttCIFor (theComp)
d280 1
a280 1
// Returns the AttCI that owns the C++ Att corresponding to this StdAttRep and
d284 1
a284 1
   private AttCI myAttCIFor (Component theComp)
d286 1
a286 1
      return myAttCIMap.get (theComp.getCompClassID ());
d294 1
a294 1
// myAttCIMap
d296 1
a296 1
// myAttCIMap.get (theCompClassID) is the AttCI that owns the C++ Att
d301 1
a301 1
   private final EnumMap <CompClassID, AttCI> myAttCIMap;
@


1.17
log
@Removed Java class ProbCoord.
@
text
@d195 1
a195 1
// release ()
d200 1
a200 1
   void release ()
d209 1
a209 1
            theAttCI.release ();
d214 1
a214 1
      super.release ();
@


1.16
log
@Initial implementation of the Session classes.
@
text
@d34 1
a34 1
         ProbCoord   theProbCoord,
d46 1
a46 1
      if (theProbCoord.selfTestMode ())
@


1.15
log
@Terminology change.
@
text
@d30 1
a30 1
// Package-Internal Constructors
@


1.14
log
@Attributes.
@
text
@d22 1
a22 1
//    VitalObject
d195 1
a195 1
// shutDown ()
d197 1
a197 1
// Override from class VitalObject.
d200 1
a200 1
   void shutDown ()
d209 1
a209 1
            theAttCI.shutDown ();
d214 1
a214 1
      super.shutDown ();
@


1.13
log
@Replaced class InternalObject with class VitalObject.
@
text
@d34 3
a36 3
         ProbCoord theProbCoord,
         AttBldrCI theAttBldrCI,
         AttSpec   theAttSpec)
@


1.12
log
@Attributes.
@
text
@d22 1
a22 1
//    InternalObject
d197 1
a197 1
// Override from class InternalObject.
@


1.11
log
@Removed enum AttID.
@
text
@d44 1
a44 1
      myAccessStyle = compAccessStyle ();
a64 7
   AccessStyle getAccessStyle ()
      {
      return myAccessStyle;
      }

//------------------------------------------------------------------------------

d148 47
a245 38
// compAccessStyle ()
//
// Computes and returns the value to be stored in myAccessStyle.
//------------------------------------------------------------------------------

   private AccessStyle compAccessStyle ()
      {
      AttCI       theAttCI;
      AccessStyle theAttCIStyle;
      AccessStyle theAccessStyle;

      theAccessStyle = null;

      for (CompClassID theCompClassID: CompClassID.values ())
         {
         theAttCI = myAttCIMap.get (theCompClassID);

         if (theAttCI == null)
            continue;

         if (theAttCI.isAnInputAtt ())
            theAttCIStyle = AccessStyle.INPUT;
         else
            theAttCIStyle = AccessStyle.OUTPUT;

         if (theAccessStyle != null)
            assert (theAttCIStyle == theAccessStyle);
         else
            theAccessStyle = theAttCIStyle;
         }

      if (theAccessStyle == null)
         theAccessStyle = AccessStyle.OUTPUT;

      return theAccessStyle;
      }

//------------------------------------------------------------------------------
a302 12
//------------------------------------------------------------------------------
// myAccessStyle
//
// The access style of all C++ attributes corresponding to this StdAttRep.
//
// It is assumed that  all C++ attributes corresponding to this StdAttRep have
// the same access style.
// This assumption is verified during construction.
//------------------------------------------------------------------------------

   private final AccessStyle myAccessStyle;

@


1.10
log
@Customized Attributes.
@
text
@d33 4
a36 1
   StdAttRep (ProbCoord theProbCoord, AttBldrCI theAttBldrCI, AttID theAttID)
d38 1
a38 1
      super (theAttID);
d42 1
a42 1
      setUpAttCIMap (theAttBldrCI, theAttID);
d187 1
a187 1
   private void setUpAttCIMap (AttBldrCI theAttBldrCI, AttID theAttID)
d194 1
a194 1
         theAttCIName = theCompClassID + "." + theAttID;
d255 1
a255 1
      theTypeName = getAttID ().getAttSpec ().getValueType ().getSimpleName ();
d269 1
a269 1
             + "      AttSpec:         " + getAttID ()    + "\n"
@


1.9
log
@Added enum AccessStyle.
@
text
@d208 1
a208 1
   AccessStyle compAccessStyle ()
d301 1
a301 1
// The access style of all C++ attributes corresponding to this AttRep.
d303 2
a304 2
// It is assumed that all C++ attributes corresponding to this AttRep have the
// same access style.
@


1.8
log
@Implemented Utility class.
@
text
@d37 1
a37 1
      myAttCIMap   = new EnumMap <CompClassID, AttCI> (CompClassID.class);
d41 1
a41 1
      isAnInputAtt = compIsInputAtt ();
d62 1
a62 1
   boolean isAnInputAtt ()
d64 1
a64 1
      return isAnInputAtt;
d203 1
a203 1
// compIsInputAtt ()
d205 1
a205 1
// Computes and returns the value to be stored in isAnInputAtt.
d208 1
a208 1
   boolean compIsInputAtt ()
d210 3
a212 3
      boolean foundAttCI;
      AttCI   theAttCI;
      boolean isAnInputAttVal;
d214 1
a214 2
      foundAttCI      = false;
      isAnInputAttVal = false;
d223 2
a224 4
         if (foundAttCI)
            {
            assert (theAttCI.isAnInputAtt () == isAnInputAttVal);
            }
d226 1
a226 3
            {
            isAnInputAttVal = theAttCI.isAnInputAtt ();
            }
d228 4
a231 1
         foundAttCI = true;
d234 4
a237 1
      return isAnInputAttVal;
d299 1
a299 4
// isAnInputAtt
//
// If isAnInputAtt is true,  then all C++ attributes corresponding to this
//    AttRep are input  attributes.
d301 1
a301 2
// If isAnInputAtt is false  then all C++ attributes corresponding to this
//    AttRep are output attributes.
d303 2
a304 2
// It is assumed that there are StdAttRep corresponding to at least one input
// and at least one output C++ attribute.
d308 1
a308 1
   private final boolean isAnInputAtt;
@


1.7
log
@AttReps.
@
text
@d8 1
a8 1
package com.ibm.witj;
d10 3
a12 1
import     java.util.*;
@


1.6
log
@AttReps.
@
text
@d31 1
a31 1
   StdAttRep (AttBldrCI theAttBldrCI, AttID theAttID)
d33 2
d40 3
d238 32
@


1.5
log
@AttReps.
@
text
@d33 1
a33 2
      String theAttCIName;
      AttCI  theAttCI;
d35 1
a35 1
      myAttCIMap = new EnumMap <CompClassID, AttCI> (CompClassID.class);
d37 1
a37 11
      for (CompClassID theCompClassID: CompClassID.values ())
         {
         theAttCIName = theCompClassID + "." + theAttID;

         if (theAttBldrCI.hasAttFor (theAttCIName))
            {
            theAttCI = new AttCI (theAttBldrCI, theAttCIName);

            myAttCIMap.put (theCompClassID, theAttCI);
            }
         }
d55 7
d172 61
d258 16
@


1.4
log
@AttReps.
@
text
@d10 2
d15 1
a15 1
// "Standard Attribute Representative."
d31 1
a31 1
   StdAttRep (AttCI theAttCI)
d33 16
a48 1
      myAttCI = theAttCI;
d59 7
d68 1
a68 1
      myAttCI.setBool    (theComp.getCompCI (),  theValue);
d75 1
a75 1
      myAttCI.setInt     (theComp.getCompCI (),  theValue);
d82 1
a82 1
      myAttCI.setDbl     (theComp.getCompCI (),  theValue);
d89 1
a89 1
      myAttCI.setBoolVec (theComp.getCompCI (),  theArray);
d96 1
a96 1
      myAttCI.setIntVec  (theComp.getCompCI (),  theArray);
d103 1
a103 1
      myAttCI.setDblVec  (theComp.getCompCI (),  theArray);
d110 1
a110 1
      return myAttCI.getBool (theComp.getCompCI ());
d117 1
a117 1
      return myAttCI.getInt  (theComp.getCompCI ());
d124 1
a124 1
      return myAttCI.getDbl  (theComp.getCompCI ());
d131 1
a131 1
      myAttCI.getBoolVec (theComp.getCompCI (), theArray);
d138 1
a138 1
      myAttCI.getIntVec  (theComp.getCompCI (), theArray);
d145 1
a145 1
      myAttCI.getDblVec  (theComp.getCompCI (), theArray);
d156 9
a164 1
      myAttCI.shutDown ();
d166 1
a166 1
      myAttCI = null;
d168 1
a168 1
      super  .shutDown ();
d172 16
d192 1
a192 1
// myAttCI
d194 3
a196 1
// The AttCI owned by this StdAttRep.
d199 2
a200 2
   private AttCI myAttCI;
 
@


1.3
log
@AttReps.
@
text
@@


1.2
log
@AttReps.
@
text
@d39 86
@


1.1
log
@AttReps.
@
text
@d26 1
a26 1
// Package-Internal Methods
d29 1
a29 5
//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------

   StdAttRep ()
d31 1
d34 4
d46 5
a50 1
      super.shutDown ();
d57 8
@

