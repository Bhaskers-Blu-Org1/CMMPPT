head	1.8;
access;
symbols;
locks; strict;
comment	@# @;


1.8
date	2008.12.16.16.13.30;	author rjw;	state dead;
branches;
next	1.7;

1.7
date	2008.12.16.15.19.20;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.15.23.01.42;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.15.21.40.51;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.15.15.35.34;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.11.23.39.51;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.12.11.22.21.52;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.11.21.54.03;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Changed class name: NonFunctionalException ==> WitjAbortsException
@
text
@
//==============================================================================
// WIT-J Java Source File NonFunctionalException.java.
//
// Contains the declaration of class NonFunctionalException.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

//==============================================================================
// Class NonFunctionalException
//
// One kind of unchecked Exception thrown by WIT-J.
//
// When WIT-J throws a NonFunctionalException, this indicates that:
//
// * As a result of the throw, WIT-J is now in a non-functional state.
//   No further calls to WIT-J methods should be made for the rest of the
//   program process.
//
// Class Hierarchy:
//
// RuntimeException
//    WitjException
//       NonFunctionalException
//          AssertionErrorException
//          CppAssertFailureException
//          UnexpectedCppExcException
//          UnexpectedThrowableException
//==============================================================================

public abstract class NonFunctionalException extends WitjException
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// witjIsFunctional ()
//
// Returns true, iff WIT-J is currently considered to be in a functional state.
//------------------------------------------------------------------------------

   public static boolean witjIsFunctional ()
      {
      try
         {
         return witjFunctional;
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//==============================================================================
// Package-Internal Constructor
//==============================================================================

   NonFunctionalException (String message)
      {
      super (
            "\n"
       +    "\n"
       +     message
       +    "\n"
       + "   This indicates a programming error in WIT-J.\n"
       +    "\n"
       + "   As a result of this Exception, "
       +    "WIT-J is now in a non-functional state. No\n"
       + "   further calls to WIT-J methods should be made for the rest of "
       +    "the program\n" 
       + "   process.\n");

      witjFunctional = false;
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// witjMustBeFunctional (methName)
//
// Verifies that WIT-J is currently in a functional state.
//
// Arguments:
//    methName: The name of the method.
//------------------------------------------------------------------------------

   static void witjMustBeFunctional (String methName)
      {
      if (! witjFunctional)
         throw
            new StatusQuoException (
               "   A WIT-J method was called when WIT-J was in a "
             +    "non-functional state.\n"
             + "\n"
             + "      Method: " + methName);
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// witjFunctional
//
// WIT-J is considered to be is a functional state, iff witjFunctional is true.
//------------------------------------------------------------------------------

   private static boolean witjFunctional = true;

//==============================================================================
}
@


1.7
log
@Minor revision.
@
text
@@


1.6
log
@Initial implementation of java class CppAssertFailureException.
@
text
@d69 12
a80 1
      super (message);
@


1.5
log
@Implemented Java class UnexpectedCppExcException.
@
text
@d29 1
@


1.4
log
@Minor revision.
@
text
@d29 1
@


1.3
log
@Implementated class AssertionErrorException.
@
text
@d25 5
a29 7
//    Throwable
//       Exception
//          RuntimeException
//             WitjException
//                NonFunctionalException
//                   AssertionErrorException
//                   UnexpectedThrowableException
@


1.2
log
@Moved more responsibility into class NonFunctionalException.
@
text
@d30 1
@


1.1
log
@Changed class name: FatalException ==> NonFunctionalException
@
text
@d36 27
d78 6
a83 1
// Accessors.
d86 1
a86 1
   static boolean witjIsFunctional ()
d88 7
a94 1
      return witjFunctional;
@

