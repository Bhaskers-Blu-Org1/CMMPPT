head	1.59;
access;
symbols;
locks; strict;
comment	@# @;


1.59
date	2011.05.02.18.32.31;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2011.04.15.19.12.43;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2011.04.08.20.56.41;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2011.04.07.22.11.27;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2011.04.07.21.39.33;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2011.04.07.19.07.44;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2011.04.06.21.56.56;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2011.04.06.20.34.35;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2011.03.30.23.23.10;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2011.03.29.23.38.58;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2011.03.28.15.57.23;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2011.03.23.20.30.14;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2011.03.19.00.26.24;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2011.03.12.00.30.01;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2011.03.11.23.49.41;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2011.02.25.16.07.10;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2011.02.16.21.03.22;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2011.02.16.19.55.52;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2011.02.14.19.59.19;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2009.09.29.19.09.25;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2009.09.25.22.42.43;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2009.07.22.21.49.48;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2009.06.29.15.18.11;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2009.06.05.15.08.23;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2009.05.08.22.13.12;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2009.05.05.20.17.07;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2009.04.17.19.51.59;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2009.02.25.23.06.45;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2009.02.25.22.13.53;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2009.02.19.19.51.47;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2009.02.18.17.00.44;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2009.02.17.23.46.02;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2009.02.17.19.26.13;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2009.02.17.17.23.49;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2009.02.14.00.51.31;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2009.02.11.18.59.29;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2009.02.10.23.19.30;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2009.02.06.22.40.59;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2009.01.23.20.06.20;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.01.23.19.32.25;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.01.23.18.46.55;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.01.21.21.43.25;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.01.20.22.05.03;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.01.16.20.55.49;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.01.16.17.03.37;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.01.15.22.50.32;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.12.17.24.14;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.08.21.13.52;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.18.22.12.34;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.18.22.00.08;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.15.22.31.42;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.15.15.35.34;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.12.22.53.06;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.26.14.48.19;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.25.21.04.03;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.25.15.28.48;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.10.31.14.53.29;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.30.15.17.42;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.26.22.21.27;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.59
log
@Reduced heading comments.
@
text
@
//==============================================================================
// WIT-J Java Source File ProblemCOR.java.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import       java.util.*;

//==============================================================================
// Class ProblemCOR
//
// "Problem C++ Object Representation"
// A Java representation of a C++ Problem.
//
// Class Hierarchy:
//
// PreservedInternal
//    CppObjRep
//       ComponentCOR
//          ProblemCOR
//==============================================================================

final class ProblemCOR extends ComponentCOR
{
//==============================================================================
// Package-Internal Constructor
//==============================================================================

   ProblemCOR (CoordinatorCOR theCoordCOR)
      {
      acquireNewCppObject (theCoordCOR);
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// Wrappers for corresponding C++ Problem member functions.
//------------------------------------------------------------------------------

   native void    callSimpleWitFunc   (String                theFuncName);
   native void    performAction       (String                theCommand);
   native boolean throwUnexpException ();
   native void    writeSched          (String                schedName,
                                       String                fileName, 
                                       boolean               theFormatIsBSV);
   native void    addDblCplexParSpec  (String                theName,
                                       double                theValue);
   native void    addIntCplexParSpec  (String                theName,
                                       int                   theValue);
   native void    copyData            (ProblemCOR            origProblemCOR);
   native void    displayData         (String                fileName);
   native void    eqHeurAlloc         (ArrayList <Demand>    theDemandList,
                                       ArrayList <Integer>   shipPeriodList,
                                       ArrayList <Double>    desIncVolList,
                                       ArrayList <Double>    incVolList);
   native void    getCriticalList     (ArrayList <Part>      critPartList,
                                       ArrayList <Integer>   critPeriodList);
   native Double  getDblCplexParSpec  (String                theName);
   native void    getExpCycle         (ArrayList <Part>      thePartList,
                                       ArrayList <Operation> theOpnList);
   native Integer getIntCplexParSpec  (String                theName);
   native void    getObjectiveList    (ArrayList <String>    theObjNameList);
   native String  getOptInitMethod    ();
   native void    getPgdCritList (     ArrayList <Part>      critPartList,
                                       ArrayList <Integer>   critPeriodList,
                                       ArrayList <Demand>    theDemandList,
                                       ArrayList <Integer>   shipPeriodList);
   native void    getPipSeq           (ArrayList <PeggingTriple <Demand>>
                                                             theDemandTripList);
   native void    getSortedOperations (ArrayList <Operation> theOpnList);
   native void    getSortedParts      (ArrayList <Part>      thePartList);
   native void    readData            (String                fileName);
   native void    setNPeriods         (int                   theInt);
   native void    setObjectiveList    (ArrayList <String>    theObjNameList);
   native void    setOptInitMethod    (String                theMethodName);
   native void    writeCriticalList   (String                fileName, 
                                       boolean               theFormatIsBSV,
                                       int                   maxListLen);
   native void    writeData           (String                fileName);

//------------------------------------------------------------------------------
// notImplemented ()
//
// This native method is not implemented in the C++ portion.
// It is intended for use in error testing.
//------------------------------------------------------------------------------

   native void notImplemented ();

//==============================================================================
// Private Native Methods
//==============================================================================

//------------------------------------------------------------------------------
// acquireNewCppObject (theCoordCOR)
// 
// This method is explained in the comment for class CppObjRep.
//------------------------------------------------------------------------------

   private native void acquireNewCppObject (CoordinatorCOR theCoordCOR);

//==============================================================================
}
@


1.58
log
@Java CppObjRep classes
@
text
@a3 2
//
// Contains the declaration of class ProblemCOR.
@


1.57
log
@copyComponentData
@
text
@d36 1
a36 1
      createCppObject (theCoordCOR);
d102 1
a102 1
// createCppObject (theCoordCOR)
d107 1
a107 1
   private native void createCppObject (CoordinatorCOR theCoordCOR);
@


1.56
log
@getSortedOperations
@
text
@d57 1
a57 1
   native void    copyData            (ProblemCOR            srcProblemCOR);
@


1.55
log
@getSortedParts
@
text
@d77 1
@


1.54
log
@getExpCycle
@
text
@d77 1
@


1.53
log
@Critical parts list
@
text
@d47 2
a48 2
   native void    callSimpleWitFunc   (String              theFuncName);
   native void    performAction       (String              theCommand);
d50 20
a69 22
   native void    writeSched          (String              schedName,
                                       String              fileName, 
                                       boolean             theFormatIsBSV);
   native void    addDblCplexParSpec  (String              theName,
                                       double              theValue);
   native void    addIntCplexParSpec  (String              theName,
                                       int                 theValue);
   native void    copyData            (ProblemCOR          srcProblemCOR);
   native void    displayData         (String              fileName);
   native void    eqHeurAlloc         (ArrayList <Demand>  theDemandList,
                                       ArrayList <Integer> shipPeriodList,
                                       ArrayList <Double>  desIncVolList,
                                       ArrayList <Double>  incVolList);
   native void    getCriticalList     (ArrayList <Part>    critPartList,
                                       ArrayList <Integer> critPeriodList);
   native void    getPgdCritList (     ArrayList <Part>    critPartList,
                                       ArrayList <Integer> critPeriodList,
                                       ArrayList <Demand>  theDemandList,
                                       ArrayList <Integer> shipPeriodList);
   native Double  getDblCplexParSpec  (String              theName);
   native Integer getIntCplexParSpec  (String              theName);
   native void    getObjectiveList    (ArrayList <String>  theObjNameList);
d71 4
d76 9
a84 9
                                                           theDemandTripList);
   native void    readData            (String              fileName);
   native void    setNPeriods         (int                 theInt);
   native void    setObjectiveList    (ArrayList <String>  theObjNameList);
   native void    setOptInitMethod    (String              theMethodName);
   native void    writeCriticalList   (String              fileName, 
                                       boolean             theFormatIsBSV,
                                       int                 maxListLen);
   native void    writeData           (String              fileName);
@


1.52
log
@getPgdCritList
@
text
@d63 2
a64 2
   native void    getCriticalList     (ArrayList <Part>    thePartList,
                                       ArrayList <Integer> thePeriodList);
@


1.51
log
@Revised set/get ObjectiveList for ArrayList <String>.
@
text
@d65 4
@


1.50
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@d47 32
a78 32
   native void     callSimpleWitFunc   (String              theFuncName);
   native void     performAction       (String              theCommand);
   native boolean  throwUnexpException ();
   native void     writeSched          (String              schedName,
                                        String              fileName, 
                                        boolean             theFormatIsBSV);
   native void     addDblCplexParSpec  (String              theName,
                                        double              theValue);
   native void     addIntCplexParSpec  (String              theName,
                                        int                 theValue);
   native void     copyData            (ProblemCOR          srcProblemCOR);
   native void     displayData         (String              fileName);
   native void     eqHeurAlloc         (ArrayList <Demand>  theDemandList,
                                        ArrayList <Integer> shipPeriodList,
                                        ArrayList <Double>  desIncVolList,
                                        ArrayList <Double>  incVolList);
   native void     getCriticalList     (ArrayList <Part>    thePartList,
                                        ArrayList <Integer> thePeriodList);
   native Double   getDblCplexParSpec  (String              theName);
   native Integer  getIntCplexParSpec  (String              theName);
   native String[] getObjectiveList    ();
   native String   getOptInitMethod    ();
   native void     getPipSeq           (ArrayList <PeggingTriple <Demand>>
                                                            theDemandTripList);
   native void     readData            (String              fileName);
   native void     setNPeriods         (int                 theInt);
   native void     setObjectiveList    (String[]            theObjNameArr);
   native void     setOptInitMethod    (String              theMethodName);
   native void     writeCriticalList   (String              fileName, 
                                        boolean             theFormatIsBSV,
                                        int                 maxListLen);
   native void     writeData           (String              fileName);
@


1.49
log
@Changed name of class AllocTriple to PeggingTriple.
@
text
@d34 1
a34 1
   ProblemCOR (Problem theProblem)
a35 6
      super (theProblem);

      CoordinatorCOR theCoordCOR;

      theCoordCOR = theProblem.getCoordinator ().getCoordinatorCOR ();

a89 15
// Private C++ Call-Back Methods
//==============================================================================

//------------------------------------------------------------------------------
// setNPeriodsFromCpp (theValue)
//
// Sets nPeriods to theValue.
//------------------------------------------------------------------------------

   private void setNPeriodsFromCpp (int theValue)
      {
      getComponent ().asProblem ().setNPeriods (theValue);
      }

//==============================================================================
@


1.48
log
@AllocTripleALJOR
@
text
@d75 1
a75 1
   native void     getPipSeq           (ArrayList <AllocTriple <Demand>>
@


1.47
log
@Revised the arguments to eqHeurAlloc.
@
text
@d75 2
a76 1
   native void     getPipSeq           (AllocTripleVecCOR theAllocTripleVecCOR);
@


1.46
log
@Problem.getCriticalList ()
@
text
@d53 2
a54 2
   native void     callSimpleWitFunc   (String            theFuncName);
   native void     performAction       (String            theCommand);
d56 13
a68 12
   native void     writeSched          (String            schedName,
                                        String            fileName, 
                                        boolean           theFormatIsBSV);
   native void     addDblCplexParSpec  (String            theName,
                                        double            theValue);
   native void     addIntCplexParSpec  (String            theName,
                                        int               theValue);
   native void     copyData            (ProblemCOR        srcProblemCOR);
   native void     displayData         (String            fileName);
   native double[] eqHeurAlloc         (DemandCOR[]       theDemandCORArr,
                                        int[]             shipPerArr,
                                        double[]          desIncVolArr);
d71 2
a72 2
   native Double   getDblCplexParSpec  (String            theName);
   native Integer  getIntCplexParSpec  (String            theName);
d76 8
a83 8
   native void     readData            (String            fileName);
   native void     setNPeriods         (int               theInt);
   native void     setObjectiveList    (String[]          theObjNameArr);
   native void     setOptInitMethod    (String            theMethodName);
   native void     writeCriticalList   (String            fileName, 
                                        boolean           theFormatIsBSV,
                                        int               maxListLen);
   native void     writeData           (String            fileName);
@


1.45
log
@Problem.getCriticalList ()
@
text
@d68 2
a69 2
   native void     getCriticalList     (ArrayList <Part>    theParts,
                                        ArrayList <Integer> thePeriods);
@


1.44
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@d12 2
d68 2
d88 1
a88 1
// It is intended for use in an error testing.
@


1.43
log
@CPLEX
@
text
@d22 2
a23 1
//       ProblemCOR
d26 1
a26 1
final class ProblemCOR extends CppObjRep
d32 1
a32 1
   ProblemCOR (Coordinator theCoord)
d34 7
a40 1
      createCppObject (theCoord.getCoordinatorCOR ());
d51 2
a52 2
   native void     callSimpleWitFunc   (String      theFuncName);
   native void     performAction       (String      theCommand);
d54 25
a78 19
   native void     writeSched          (String      schedName,
                                        String      fileName, 
                                        boolean     theFormatIsBSV);
   native void     addDblCplexParSpec  (String      theName,
                                        double      theValue);
   native void     addIntCplexParSpec  (String      theName,
                                        int         theValue);
   native void     copyData            (ProblemCOR  srcProblemCOR);
   native void     displayData         (String      fileName);
   native double[] eqHeurAlloc         (DemandCOR[] theDemandCORArr,
                                        int[]       shipPerArr,
                                        double[]    desIncVolArr);
   native Double   getDblCplexParSpec  (String      theName);
   native Integer  getIntCplexParSpec  (String      theName);
   native void     readData            (String      fileName);
   native void     writeCriticalList   (String      fileName, 
                                        boolean     theFormatIsBSV,
                                        int         maxListLen);
   native void     writeData           (String      fileName);
d90 16
a105 1
// Private Methods
@


1.42
log
@CPLEX
@
text
@d59 1
@


1.41
log
@CPLEX
@
text
@d59 1
@


1.40
log
@Implemented class PreservedInternal and made several classes extend it
   instead of class PreservedObject.
@
text
@d50 4
@


1.39
log
@Implemented thePreservedObject.getCoordinator ().
@
text
@d20 1
a20 1
// PreservedObject
a32 2
      super (theCoord);

@


1.38
log
@Made WIT-J throw an InternalErrorException instead of a
   TerminalAppErrorException when the native library fails to load.
@
text
@d31 1
a31 1
   ProblemCOR (CoordinatorCOR theCoordCOR)
d33 3
a35 1
      createCppObject (theCoordCOR);
@


1.37
log
@Method argument name change.
@
text
@d61 9
@


1.36
log
@Changed the name each native method that creates a C++ object to
   createCppObject.
@
text
@d50 1
a50 1
   native void     copyData            (ProblemCOR  theProblemCOR);
@


1.35
log
@Removed the "enabled" concept from WIT-J.
@
text
@d33 1
a33 1
      createMyCppProblem (theCoordCOR);
d66 1
a66 1
// createMyCppProblem (theCoordCOR)
d68 1
a68 1
// Constructs a new C++ Problem for theCoordCOR and takes ownership of it.
d71 1
a71 1
   private native void createMyCppProblem (CoordinatorCOR theCoordCOR);
@


1.34
log
@Changed name of Java class RetainedObject to PreservedObject.
@
text
@a43 1
   native void     enable              ();
@


1.33
log
@theProblem.copyData (...).
@
text
@d20 1
a20 1
// RetainedObject
@


1.32
log
@writeCriticalList
@
text
@d51 1
@


1.31
log
@Implemented writeExecSched, writeShipSched, and writeReqSched.
@
text
@d56 3
@


1.30
log
@Moved set/get-PipSeq from class Problem to class GlobalElement.
@
text
@a39 5
   native void    enable              ();
   native void    callSimpleWitFunc   (String theFuncName);
   native void    performAction       (String theCommand);
   native boolean throwUnexpException ();

d41 1
a41 1
// Wrappers for corresponding WIT functions.
d44 13
a56 6
   native void     displayData (String      fileName);
   native double[] eqHeurAlloc (DemandCOR[] theDemandCORArr,
                                int[]       shipPerArr,
                                double[]    desIncVolArr);
   native void     readData    (String      fileName);
   native void     writeData   (String      fileName);
@


1.29
log
@PIP
@
text
@a45 9
// getPipSeq ()
//
// Retrieves the PIP shipment sequence and stores it in the Java Coordinator's
// currently held AllocTriple List.
//------------------------------------------------------------------------------

   native void getPipSeq ();

//------------------------------------------------------------------------------
@


1.28
log
@Removed the ShipTriple classes.
@
text
@d49 1
a49 1
// AllocTriple List.
@


1.27
log
@PIP.
@
text
@d58 6
a63 4
   native void     displayData (String          fileName);
   native double[] eqHeurAlloc (ShipTripleCOR[] theTripleCORArr);
   native void     readData    (String          fileName);
   native void     writeData   (String          fileName);
@


1.26
log
@PIP.
@
text
@a45 9
// setPipSeq ()
//
// Sets the PIP shipment sequence to the list of C++ ShipTriples in
// theTripleCORArr.
//------------------------------------------------------------------------------

   native void setPipSeq (ShipTripleCOR[] theTripleCORArr);

//------------------------------------------------------------------------------
@


1.25
log
@Implemented getPipSeq.
@
text
@d44 18
a61 1
   native void    setPipSeq           (ShipTripleCOR[] theTripleCORArr);
a68 1
   native void     getPipSeq   ();
@


1.24
log
@Implemented buildPip and setPipSeq.
@
text
@d52 1
@


1.23
log
@Replaced the AllocTarget classes with ShipTriple classes.
@
text
@d44 1
d50 4
a53 4
   native void     displayData (String           fileName);
   native double[] eqHeurAlloc (ShipTripleCOR[]  theTripleCORArr);
   native void     readData    (String           fileName);
   native void     writeData   (String           fileName);
@


1.22
log
@Problem.eqHeurAlloc.
@
text
@d49 4
a52 4
   native void displayData (String           fileName);
   native void eqHeurAlloc (AllocTargetCOR[] theTargetCORArr);
   native void readData    (String           fileName);
   native void writeData   (String           fileName);
@


1.21
log
@Coordinator
@
text
@d49 4
a52 3
   native void displayData (String fileName);
   native void readData    (String fileName);
   native void writeData   (String fileName);
@


1.20
log
@Coordinator
@
text
@d60 1
a60 1
// Constructs a new C++ Problem for theProblem and takes ownership of it.
@


1.19
log
@Coordinator
@
text
@d31 1
a31 1
   ProblemCOR (CoordinatorCOR theCoordinatorCOR)
d33 1
a33 1
      createMyCppProblem (theCoordinatorCOR);
d58 1
a58 1
// createMyCppProblem (theCoordinatorCOR)
d63 1
a63 1
   private native void createMyCppProblem (CoordinatorCOR theCoordinatorCOR);
@


1.18
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d31 1
a31 1
   ProblemCOR (Problem theProblem, CoordinatorCOR theCoordinatorCOR)
d33 1
a33 1
      createMyCppProblem (theProblem, theCoordinatorCOR);
d58 1
a58 1
// createMyCppProblem (theProblem, theCoordinatorCOR)
d60 1
a60 2
// Constructs a new C++ Problem for theProblem and the C++ Coordinator that
// belongs theCoordinatorCOR and takes ownership of it.
d63 1
a63 3
   private native void createMyCppProblem (
      Problem        theProblem,
      CoordinatorCOR theCoordinatorCOR);
@


1.17
log
@Continued implementation of the ProbMgr classes.
@
text
@d31 1
a31 1
   ProblemCOR (Problem theProblem, ProbMgrCOR theProbMgrCOR)
d33 1
a33 1
      createMyCppProblem (theProblem, theProbMgrCOR);
d58 1
a58 1
// createMyCppProblem (theProblem, theProbMgrCOR)
d60 2
a61 2
// Constructs a new C++ Problem for theProblem and the C++ ProbMgr that belongs
// theProbMgrCOR and takes ownership of it.
d65 2
a66 2
      Problem    theProblem,
      ProbMgrCOR theProbMgrCOR);
@


1.16
log
@ProbMgr classes.
@
text
@d41 1
@


1.15
log
@Change the mname of the ProbCtr classes to ProbMgr in both Java and C++.
@
text
@a40 1
   native void    callSimpleWitFunc   (String theFuncName);
@


1.14
log
@Continued implementation of ProbCtr classes.
@
text
@d31 1
a31 1
   ProblemCOR (Problem theProblem, ProbCtrCOR theProbCtrCOR)
d33 1
a33 1
      createMyCppProblem (theProblem, theProbCtrCOR);
d58 1
a58 1
// createMyCppProblem (theProblem, theProbCtrCOR)
d60 2
a61 2
// Constructs a new C++ Problem for theProblem and the C++ ProbCtr that belongs
// theProbCtrCOR and takes ownership of it.
d66 1
a66 1
      ProbCtrCOR theProbCtrCOR);
@


1.13
log
@Implemented method writeData of class Problem.
@
text
@d31 1
a31 1
   ProblemCOR (Problem theProblem)
d33 1
a33 1
      createMyCppProblem (theProblem);
d58 1
a58 1
// createMyCppProblem (theProblem)
d60 2
a61 1
// Constructs a new C++ Problem for theProblem and takes ownership of it.
d64 3
a66 1
   private native void createMyCppProblem (Problem theProblem);
@


1.12
log
@Implemented SimpleWitFuncs and used them for 4 methods.
@
text
@d51 1
@


1.11
log
@Removed an unneeded test case.
@
text
@d41 1
d49 2
a50 6
   native void displayData        (String fileName);
   native void evalObjectives     ();
   native void generatePriorities ();
   native void heurImplode        ();
   native void postprocess        ();
   native void readData           (String fileName);
@


1.10
log
@theProblem.performAction (theCommand)
@
text
@d40 3
a42 3
   native void    enable                  ();
   native void    performAction           (String theCommand);
   native boolean throwUnexpExceptionBool ();
@


1.9
log
@Added test of C++ assertion failure.
@
text
@d41 1
a41 1
   native void    throwUnexpException     ();
a42 1
   native void    incurAssertFailure      ();
@


1.8
log
@Minor revision.
@
text
@d43 1
@


1.7
log
@Implemented the C++ canonical try block macros.
@
text
@d20 3
a22 3
//    RetainedObject
//       CppObjRep
//          ProblemCOR
@


1.6
log
@Removed Java class SessionCOR.
@
text
@d40 3
a42 1
   native void enable ();
@


1.5
log
@Removed Java class Session.
@
text
@d33 1
a33 5
      SessionCOR theSessionCOR;

      theSessionCOR = theProblem.getSessionCOR ();

      createMyCppProblem (theSessionCOR, theProblem);
d58 1
a58 1
// createMyCppProblem (theSessionCOR)
d60 1
a60 1
// Constructs a new C++ Problem for theSessionCOR and takes ownership of it.
d63 1
a63 3
   private native void createMyCppProblem (
      SessionCOR theSessionCOR,
      Problem    theProblem);
@


1.4
log
@Removed class Session from the public interface.
@
text
@d35 1
a35 1
      theSessionCOR = theProblem.getSession ().getSessionCOR ();
@


1.3
log
@Added theProblem.postprocess ().
@
text
@d44 2
@


1.2
log
@Call-back infrastructure.
@
text
@d52 1
@


1.1
log
@Numerous class name changes.
@
text
@d31 1
a31 1
   ProblemCOR (SessionCOR theSessionCOR)
d33 5
a37 1
      createMyCppProblem (theSessionCOR);
d64 3
a66 1
   private native void createMyCppProblem (SessionCOR theSessionCOR);
@

