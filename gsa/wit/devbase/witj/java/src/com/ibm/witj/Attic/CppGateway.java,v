head	1.8;
access;
symbols;
locks; strict;
comment	@# @;


1.8
date	2009.02.20.20.58.43;	author rjw;	state dead;
branches;
next	1.7;

1.7
date	2009.02.20.17.18.44;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.02.18.22.10.22;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.02.14.00.51.30;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.02.03.23.18.07;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.02.03.16.32.28;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.31.00.56.27;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.29.22.06.39;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Removed Java class CppGateway.
@
text
@
//==============================================================================
// WIT-J Java Source File CppGateway.java.
//
// Contains the declaration of class CppGateway.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

//==============================================================================
// Class CppGateway
//
// A collection of static methods that are designed to be called from C++ and
// are intended to be the *only* methods that are called from C++.
// All of the methods are declared private.
//
// This class is noninstantiable.
//==============================================================================

final class CppGateway
{
//==============================================================================
// Private Constructor
//==============================================================================

   private CppGateway ()
      {
      }

//==============================================================================
// Private Static Methods to be Called from C++.
//==============================================================================

//------------------------------------------------------------------------------
// makePart (theCoordCOR, thePartName, thePartCatName)
//------------------------------------------------------------------------------

   private static void makePart (
         CoordinatorCOR theCoordCOR,
         String         thePartName,
         String         thePartCatName)
      {
      Problem       theProblem;
      Part.Category thePartCat;

      theProblem = theCoordCOR.getCoordinator ().getProblem ();

      thePartCat = Part.Category.valueOf (thePartCatName);

      Part.newInstance (theProblem, thePartName, thePartCat);
      }

//------------------------------------------------------------------------------
// makeDemand (thePartCOR, theDemandName)
//------------------------------------------------------------------------------

   private static void makeDemand (PartCOR thePartCOR, String theDemandName)
      {
      Demand.newInstance (thePartCOR.getPart (), theDemandName);
      }

//------------------------------------------------------------------------------
// makeOperation (theCoordCOR, theOpnName)
//------------------------------------------------------------------------------

   private static void makeOperation (
         CoordinatorCOR theCoordCOR,
         String         theOpnName)
      {
      Problem theProblem;

      theProblem = theCoordCOR.getCoordinator ().getProblem ();

      Operation.newInstance (theProblem, theOpnName);
      }

//------------------------------------------------------------------------------
// makeBomEntry (theOpnCOR, thePartCOR)
//------------------------------------------------------------------------------

   private static void makeBomEntry (OperationCOR theOpnCOR, PartCOR thePartCOR)
      {
      BomEntry.newInstance (theOpnCOR.getOperation (), thePartCOR.getPart ());
      }

//------------------------------------------------------------------------------
// makeSubstitute (theBomEntCOR, thePartCOR)
//------------------------------------------------------------------------------

   private static void makeSubstitute (
         BomEntryCOR theBomEntCOR,
         PartCOR     thePartCOR)
      {
      Substitute.
         newInstance (theBomEntCOR.getBomEntry (), thePartCOR.getPart ());
      }

//------------------------------------------------------------------------------
// makeBopEntry (theOpnCOR, thePartCOR)
//------------------------------------------------------------------------------

   private static void makeBopEntry (OperationCOR theOpnCOR, PartCOR thePartCOR)
      {
      BopEntry.newInstance (theOpnCOR.getOperation (), thePartCOR.getPart ());
      }

//------------------------------------------------------------------------------
// setNPeriods (theGlobalElementCOR, theValue)
//------------------------------------------------------------------------------

   private static void setNPeriods (
         GlobalElementCOR theGlobalElementCOR,
         int              theValue)
      {
      theGlobalElementCOR.getGlobalElement ().setNPeriods (theValue);
      }

//------------------------------------------------------------------------------
// prepareForTriples (nTriples)
//------------------------------------------------------------------------------

   private static void prepareForTriples (
         AllocTripleListCOR theAllocTripleListCOR,
         int                nTriples)
      {
      theAllocTripleListCOR.prepareForTriples (nTriples);
      }

//------------------------------------------------------------------------------
// addTriple (theElementCOR, thePeriod, theVolume)
//------------------------------------------------------------------------------

   private static void addTriple (
         AllocTripleListCOR theAllocTripleListCOR,
         ElementCOR         theElementCOR,
         int                thePeriod,
         double             theVolume)
      {
      Element theElement;

      theElement = theElementCOR.getElement ();

      theAllocTripleListCOR.addTriple (theElement, thePeriod, theVolume);
      }

//==============================================================================
}
@


1.7
log
@Added the AllocTripleList classes.
@
text
@@


1.6
log
@PIP
@
text
@d121 1
a121 1
// prepAllocTripleList (theCoordinatorCOR, nTriples)
d124 3
a126 3
   private static void prepAllocTripleList (
         CoordinatorCOR theCoordinatorCOR,
         int            nTriples)
d128 1
a128 1
      theCoordinatorCOR.getCoordinator ().prepAllocTripleList (nTriples);
d132 1
a132 1
// addAllocTriple (theElementCOR, thePeriod, theVolume)
d135 5
a139 4
   private static void addAllocTriple (
         ElementCOR theElementCOR,
         int        thePeriod,
         double     theVolume)
d145 1
a145 3
      theElement.
         getCoordinator ().
            addAllocTriple (theElement, thePeriod, theVolume);
@


1.5
log
@Implemented getPipSeq.
@
text
@d121 1
a121 2
// storeAllocTriples (
//    theCoordinatorCOR, theElementCORArr, thePeriodArr, theVolumeArr)
d124 1
a124 1
   private static void storeAllocTriples (
d126 1
a126 3
         ElementCOR[]   theElementCORArr,
         int[]          thePeriodArr,
         double[]       theVolumeArr)
d128 17
a144 1
      theCoordinatorCOR.
d146 1
a146 1
            storeAllocTriples (theElementCORArr, thePeriodArr, theVolumeArr);
@


1.4
log
@Part Category
@
text
@d120 16
@


1.3
log
@Removed the Alternative classes.
@
text
@d37 1
a37 1
// makePart (theCoordCOR, thePartName, thePartCatIdx)
d43 1
a43 1
         int            thePartCatIdx)
d50 1
a50 1
      thePartCat = Part.Category.values ()[thePartCatIdx];
@


1.2
log
@Part.Category as Alternative
@
text
@d37 1
a37 1
// makePart (theCoordCOR, thePartName, thePartCatAltCOR)
d43 1
a43 1
         AlternativeCOR thePartCatAltCOR)
d46 1
a46 1
      Part.Category theCategory;
d48 1
a48 1
      theProblem  = theCoordCOR.getCoordinator ().getProblem ();
d50 1
a50 1
      theCategory = (Part.Category) thePartCatAltCOR.getAlternative ();
d52 1
a52 1
      Part.newInstance (theProblem, thePartName, theCategory);
@


1.1
log
@Implemented Java class CppGateway.
@
text
@d22 1
a22 1
public final class CppGateway
d37 1
a37 1
// makePart (theCoordCOR, thePartName, theCategoryIsMat)
d43 1
a43 1
         boolean        theCategoryIsMat)
d48 1
a48 1
      theProblem = theCoordCOR.getCoordinator ().getProblem ();
d50 1
a50 4
      theCategory =
         theCategoryIsMat?
            Part.Category.MATERIAL:
            Part.Category.CAPACITY;
@

