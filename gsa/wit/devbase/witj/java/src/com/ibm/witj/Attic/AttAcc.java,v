head	1.7;
access;
symbols;
locks; strict;
comment	@# @;


1.7
date	2008.06.24.15.39.27;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2008.06.19.22.16.55;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.19.17.35.28;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.19.16.06.27;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.19.15.54.40;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.19.15.05.15;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.19.13.36.44;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Removed AttAcc classes.
@
text
@
//==============================================================================
// WIT-J Java Source File AttAcc.java.
//
// Contains the declaration of class AttAcc.
//==============================================================================

package com.ibm.witj;

//==============================================================================
// Class AttAcc
//
// "Attribute Accessor"
// An instance of any subclass of this class provides access to all input or
// output attributes of one type belonging to all the Components of a Problem.
// At any point in time, an AttAcc will be associated either with one
// attribute of one Component or with no attribute.
// The associated attribute and Component can be changed at any time.
// The sub classes of this class are attribute-type specific and provide the
// ability to set and retrieve the value of the associated attribute
// for the associated Component.
//
// Class Hierarchy:
//
//    PublicObject
//       AttAcc
//          BoolInAttAcc
//          VecAttAcc
//             DblVecInAttAcc
//             DblVecOutAttAcc
//==============================================================================

public abstract class AttAcc extends PublicObject
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// isAssociated ().
//
// Returns true, iff this AttAcc is currently associated with an attribute.
//------------------------------------------------------------------------------

   public boolean isAssociated ()
      {
      return (assocAttID != null);
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// Constructor.
//------------------------------------------------------------------------------

   AttAcc (AttMgr theAttMgr)
      {
      super ();

      myAttMgr = theAttMgr;
      }

//------------------------------------------------------------------------------
// shutDown ().
//
// Override from class PublicObject.
//------------------------------------------------------------------------------

   void shutDown ()
      {
      assocComp  = null;
      assocAttID = null;
      myAttMgr   = null;

      super.shutDown ();
      }

//------------------------------------------------------------------------------
// associateWith (theAttID, theComp).
//
// Associates this AttAcc with the attribute indicated by theAttID and theComp.
//------------------------------------------------------------------------------

   void associateWith (
         AttID     theAttID,
         Component theComp)
      {
      assert (theComp.myProbCoord () == myAttMgr.myProbCoord ());

      assocAttID = theAttID;
      assocComp  = theComp;
      }

//------------------------------------------------------------------------------
// disassociate ().
//
// Causes this AttAcc not to be associated with any attribute and Component.
//------------------------------------------------------------------------------

   void disassociate ()
      {
      assocAttID = null;
      assocComp  = null;
      }

//------------------------------------------------------------------------------
// checkState ()
//
// Verifies that the state of this AttAcc is appropriate for accessing an
// attribute via a method whose name is given by methodName.
//------------------------------------------------------------------------------

   void checkState (String methodName)
      {
      mustBeActive (concClassName () + "." + methodName);

      if (! isAssociated ())
         abortWmsg (
              "   "
            +     concClassName ()
            +    "."
            +     methodName
            +    " (...) was called on an AttAcc\n"
            + "   that is not currently associated with an attribute.");
      }

//------------------------------------------------------------------------------
// assocAttCI ()
//
// Returns the AttCI for the currently associated attribute.
// Throws a null pointer exception, if this AttAcc is not currently associated
// with an attribute.
//------------------------------------------------------------------------------

   AttCI assocAttCI ()
      {
      return myAttMgr.myAttCIFor (assocAttID);
      }

//------------------------------------------------------------------------------
// assocCompCI ()
//
// Returns the ComponentCI for the currently associated Component.
// Throws a null pointer exception, if this AttAcc is not currently associated
// with an attribute.
//------------------------------------------------------------------------------

   ComponentCI assocCompCI ()
      {
      return assocComp.myCompCI ();
      }

//------------------------------------------------------------------------------
// toStringActive ().
//
// Override from class PublicObject.
//------------------------------------------------------------------------------

   String toStringActive ()
      {
      if (isAssociated ())
         return
              concClassName ()
            + " currently associated with the "
            + assocAttID
            + " attribute of "
            + assocComp;
      else
         return
              concClassName ()
            + " not currently associated with an attribute";
      }

//------------------------------------------------------------------------------
// concClassName ()
//
// Returns the name of the concrete class to which this AttAcc belongs.
//------------------------------------------------------------------------------

   abstract String concClassName ();

//------------------------------------------------------------------------------
// myAttMgr ()
//
// Accessor.
//------------------------------------------------------------------------------

   AttMgr myAttMgr ()
      {
      return myAttMgr;
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myAttMgr
//
// The AttMgr that owns this AddRep.
//------------------------------------------------------------------------------

   private AttMgr myAttMgr;

//------------------------------------------------------------------------------
// assocAttID
//
// The AttID of the currently associated attribute.
// Null, if this AttAcc is not currently associated with an attribute.
//------------------------------------------------------------------------------

   private AttID assocAttID;

//------------------------------------------------------------------------------
// assocComp
//
// The currently associated Component.
// Null, if this AttAcc is not currently associated with an attribute.
//------------------------------------------------------------------------------

   private Component assocComp;

//==============================================================================
}
@


1.6
log
@Implemented of class DblVecOutAttAcc.
@
text
@@


1.5
log
@Initial implementation of class BoolInAttAcc.
@
text
@d30 1
@


1.4
log
@Attributes.
@
text
@d27 1
@


1.3
log
@Initial implementation of Java class VecAttAcc.
@
text
@a47 21
//------------------------------------------------------------------------------
// toStringActive ().
//
// Override from class PublicObject.
//------------------------------------------------------------------------------

   public String toStringActive ()
      {
      if (isAssociated ())
         return
              concClassName ()
            + " currently associated with the "
            + assocAttID
            + " attribute of "
            + assocComp;
      else
         return
              concClassName ()
            + " not currently associated with an attribute";
      }

d154 1
a154 1
// nPeriods ()
d156 1
a156 1
// Access Wrapper
d159 1
a159 1
   int nPeriods ()
d161 11
a171 1
      return myAttMgr.myProbCoord ().myCompMgr ().myGlobalComp ().nPeriods ();
d182 11
@


1.2
log
@Changed class name DblVecAttAcc to DblVecInAttAcc.
@
text
@d14 2
a15 2
// An instance of any subclass of this class provides access to all
// attributes of one type belonging to all the Components of a Problem.
d27 2
a28 1
//          DblVecInAttAcc
d128 1
a128 1
// checkVecSetValue (int theLength)
d130 2
a131 2
// Does error checking for setting the value of a vector attribute to an array
// of length theLength.
d134 1
a134 1
   void checkVecSetValue (int theLength)
d136 1
a136 1
      mustBeActive (concClassName () + ".setValue");
d142 3
a144 32
            +    ".setValue (...) was called on an AttAcc\n"
            + "   that is not currently associated with an attribute.");

      if (theLength != nPeriods ())
         abortWmsg (
              "   "
            +     concClassName ()
            +    ".setValue (...) was called with an array\n"
            + "   whose length does not match nPeriods for the Problem.\n"
            + "\n"
            + "      Array Length: "
            +        theLength
            + "\n"
            + "      nPeriods:     "
            +        nPeriods ());
      }

//------------------------------------------------------------------------------
// checkGetValue ()
//
// Does error checking for retrieving the value of an attribute.
//------------------------------------------------------------------------------

   void checkGetValue ()
      {
      mustBeActive (concClassName () + ".getValue");

      if (! isAssociated ())
         abortWmsg (
              "   "
            +     concClassName ()
            +    ".getValue (...) was called on an AttAcc\n"
@


1.1
log
@Changed class name       AttI to       AttAcc.
Changed class name DblVecAttI to DblVecAttAcc.
@
text
@d27 1
a27 1
//          DblVecAttAcc
@

