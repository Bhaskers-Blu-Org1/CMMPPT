head	1.19;
access;
symbols;
locks; strict;
comment	@# @;


1.19
date	2011.02.25.16.07.07;	author rjw;	state dead;
branches;
next	1.18;

1.18
date	2010.04.23.22.41.23;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2010.04.15.21.33.56;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.09.29.20.43.56;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.06.30.21.05.30;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.06.05.17.55.44;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.06.04.23.04.22;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.06.03.19.51.24;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.05.29.17.59.39;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.05.26.18.31.44;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.05.12.19.29.51;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.05.12.15.57.58;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.05.08.22.13.12;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.05.20.17.06;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.04.16.21.08.39;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.03.19.20.45.27;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.03.13.21.08.58;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.03.13.19.32.22;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.03.13.16.36.08;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@
//==============================================================================
// WIT-J Java Source File GlobalAspect.java.
//
// Contains the declaration of class GlobalAspect.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import       java.util.*;

//==============================================================================
// Class GlobalAspect
//
// Responsible for working with global attributes of an implosion problem.
//
// Class Hierarchy:
//
// ThreadedObject
//    PreservedObject
//       Component
//          GlobalAspect
//==============================================================================

public final class GlobalAspect extends Component
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// setOptInitMethod (theMethod)
//
// Setter.
//------------------------------------------------------------------------------

   public void setOptInitMethod (OptInitMethod theMethod)
      {
      try
         {
         mustBeActive ("GlobalAspect.setOptInitMethod");

         myGlobalAspectCOR.setOptInitMethod (theMethod.name ());
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getOptInitMethod ()
//
// Accessor.
//------------------------------------------------------------------------------

   public OptInitMethod getOptInitMethod ()
      {
      try
         {
         String theMethodName;

         mustBeActive ("GlobalAspect.getOptInitMethod");

         theMethodName = myGlobalAspectCOR.getOptInitMethod ();

         return OptInitMethod.valueOf (theMethodName);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// setObjectiveList (theObjNames)
//
// Setter.
//------------------------------------------------------------------------------

   public void setObjectiveList (String... theObjNames)
      {
      try
         {
         mustBeActive ("GlobalAspect.setObjectiveList");

         myGlobalAspectCOR.setObjectiveList (theObjNames);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getObjectiveList ()
//
// Accessor.
//------------------------------------------------------------------------------

   public String[] getObjectiveList ()
      {
      try
         {
         mustBeActive ("GlobalAspect.getObjectiveList");

         return myGlobalAspectCOR.getObjectiveList ();
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// setPipSeq (theTripleList)
//
// Sets the PIP shipment sequence to the list of AllocTriples in theTripleList.
//------------------------------------------------------------------------------

   public void setPipSeq (ArrayList <AllocTriple <Demand>> theTripleList)
      {
      try
         {
         mustBeActive ("GlobalAspect.setPipSeq");

         setPipSeqInt (theTripleList);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getPipSeq ()
//
// Returns the PIP shipment sequence.
//------------------------------------------------------------------------------

   public ArrayList <AllocTriple <Demand>> getPipSeq ()
      {
      try
         {
         mustBeActive ("GlobalAspect.getPipSeq");

         return getPipSeqInt ();
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//==============================================================================
// Package-Internal Constructor
//==============================================================================

   GlobalAspect (Coordinator theCoord)
      {
      super (theCoord);

      myGlobalAspectCOR = new GlobalAspectCOR (this);

      clearData ();
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// toStringActive ().
//
// Override from class PreservedObject.
//------------------------------------------------------------------------------

   String toStringActive ()
      {
      return "GlobalAspect";
      }

//------------------------------------------------------------------------------
// deactivate ().
//
// Override from class PreservedObject.
//------------------------------------------------------------------------------

   void deactivate ()
      {
      myGlobalAspectCOR.deactivate ();
      super            .deactivate ();
      }

//------------------------------------------------------------------------------
// clearData ()
//
// Puts this GlobalAspect into its default state.
//------------------------------------------------------------------------------

   void clearData ()
      {
      nPeriods = 26;
      }

//------------------------------------------------------------------------------
// setNPeriods (theValue)
//
// Setter for nPeriods.
//------------------------------------------------------------------------------

   void setNPeriods (int theValue)
      {
      assert (! getCoordinator ().hasPartsOrOperations ());

      myGlobalAspectCOR.setNPeriods (theValue);

      nPeriods = theValue;
      }

//------------------------------------------------------------------------------
// getNPeriods ()
//
// Accessor.
//------------------------------------------------------------------------------

   int getNPeriods ()
      {
      return nPeriods;
      }

//------------------------------------------------------------------------------
// getCompClassID ()
//
// Override from class Component.
//------------------------------------------------------------------------------

   CompClassID getCompClassID ()
      {
      return CompClassID.GLOBAL_ASPECT;
      }

//------------------------------------------------------------------------------
// getComponentCOR ().
//
// Override from class Component.
//------------------------------------------------------------------------------

   ComponentCOR getComponentCOR ()
      {
      return myGlobalAspectCOR;
      }

//------------------------------------------------------------------------------
// Accessors
//------------------------------------------------------------------------------

   GlobalAspectCOR getGlobalAspectCOR ()
      {
      return myGlobalAspectCOR;
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// setPipSeqInt (theTripleList)
//
// Internal implementation of setPipSeq (theTripleList).
//------------------------------------------------------------------------------

   private void setPipSeqInt (ArrayList <AllocTriple <Demand>> theTripleList)
      {
      DemandCOR theDemandCOR;
      int       theShipPer;
      double    incShipVol;

      getCoordinator ().
         checkDemandTriples (theTripleList, "theGlobalAspect.setPipSeq");

      getProblem ().getProblemCOR ().callSimpleWitFunc ("witClearPipSeq");

      for (AllocTriple <Demand> theTriple: theTripleList)
         {
         theDemandCOR = theTriple.getRoot   ().getDemandCOR ();
         theShipPer   = theTriple.getPeriod ();
         incShipVol   = theTriple.getVolume ();

         theDemandCOR.appendToPipSeq (theShipPer, incShipVol);
         }
      }

//------------------------------------------------------------------------------
// getPipSeqInt ()
//
// Internal implementation of getPipSeq ().
//------------------------------------------------------------------------------

   private ArrayList <AllocTriple <Demand>> getPipSeqInt ()
      {
      AllocTripleVecCOR                theAllocTripleVecCOR;
      ArrayList <AllocTriple <Demand>> theTripleList;

      theAllocTripleVecCOR = new AllocTripleVecCOR (getCoordinator ());

      myGlobalAspectCOR.getPipSeq (theAllocTripleVecCOR);

      theTripleList = theAllocTripleVecCOR.newAllocTripleList (Demand.class);

      theAllocTripleVecCOR.deactivate ();

      return theTripleList;
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// nPeriods
//
// Cached copy of the value stored in WIT.
//------------------------------------------------------------------------------

   private int nPeriods;

//------------------------------------------------------------------------------
// myGlobalAspectCOR.
//
// The GlobalAspectCOR that belongs to this GlobalAspect.
//------------------------------------------------------------------------------

   private final GlobalAspectCOR myGlobalAspectCOR;

//==============================================================================
}
@


1.18
log
@Multi-Obj Mode.
@
text
@@


1.17
log
@Multi-Obj Mode
@
text
@d101 21
@


1.16
log
@Initial implementation of class ThreadedObject.
@
text
@d80 21
@


1.15
log
@Replaced "SubComponent" with "Root".
@
text
@d21 4
a24 3
// PreservedObject
//    Component
//       GlobalAspect
@


1.14
log
@Changed getCInstance () to getSubComponent ().
@
text
@d251 3
a253 3
         theDemandCOR = theTriple.getSubComponent ().getDemandCOR ();
         theShipPer   = theTriple.getPeriod                       ();
         incShipVol   = theTriple.getVolume                       ();
@


1.13
log
@Changed handling of Lists of AllocTriples to avoid call-backs.
@
text
@d251 3
a253 3
         theDemandCOR = theTriple.getCInstance ().getDemandCOR ();
         theShipPer   = theTriple.getPeriod    ();
         incShipVol   = theTriple.getVolume    ();
@


1.12
log
@Made methods that retrieve an ArrayList <AllocTriple>> return it instead.
@
text
@d267 1
a268 1
      AllocTripleListCOR               theAllocTripleListCOR;
d270 1
a270 1
      theTripleList = new ArrayList <AllocTriple <Demand>> (0);
d272 1
a272 5
      theAllocTripleListCOR =
         new AllocTripleListCOR (
            theTripleList,
            Demand.class,
            getCoordinator ());
d274 1
a274 1
      myGlobalAspectCOR.getPipSeq (theAllocTripleListCOR);
d276 1
a276 1
      theAllocTripleListCOR.deactivate ();
@


1.11
log
@Changed name of clear methods to clearData.
@
text
@d100 1
a100 1
// getPipSeq (theTripleList)
d102 1
a102 1
// Retrieves the PIP shipment sequence, storing it in theTripleList.
d105 1
a105 1
   public void getPipSeq (ArrayList <AllocTriple <Demand>> theTripleList)
d111 1
a111 1
         getPipSeqInt (theTripleList);
d260 1
a260 1
// getPipSeqInt (theTripleList)
d262 1
a262 1
// Internal implementation of getPipSeq (theTripleList).
d265 1
a265 1
   private void getPipSeqInt (ArrayList <AllocTriple <Demand>> theTripleList)
d267 4
a270 1
      AllocTripleListCOR theAllocTripleListCOR;
d281 2
@


1.10
log
@Changed names of instances of class C in generic class AllocTriple <C>.
@
text
@d130 1
a130 1
      clear ();
d161 1
a161 1
// clear ()
d166 1
a166 1
   void clear ()
@


1.9
log
@Replaced the throwExceptionFor method with getExeceptionToThrow.
@
text
@d251 3
a253 3
         theDemandCOR = theTriple.getC      ().getDemandCOR ();
         theShipPer   = theTriple.getPeriod ();
         incShipVol   = theTriple.getVolume ();
@


1.8
log
@Changed name of Java class WitjException to GeneralException.
@
text
@d47 1
a47 1
      catch (Throwable theThrowable)
d49 1
a49 1
         throwExceptionFor (theThrowable);
d72 1
a72 1
      catch (Throwable theThrowable)
d74 1
a74 3
         throwExceptionFor (theThrowable);

         return null;
d93 1
a93 1
      catch (Throwable theThrowable)
d95 1
a95 1
         throwExceptionFor (theThrowable);
d114 1
a114 1
      catch (Throwable theThrowable)
d116 1
a116 1
         throwExceptionFor (theThrowable);
@


1.7
log
@Removed the "enabled" concept from WIT-J.
@
text
@d49 1
a49 1
         throw getWitjExceptionFor (theThrowable);
d74 3
a76 1
         throw getWitjExceptionFor (theThrowable);
d97 1
a97 1
         throw getWitjExceptionFor (theThrowable);
d118 1
a118 1
         throw getWitjExceptionFor (theThrowable);
@


1.6
log
@Changed name of Java class RetainedObject to PreservedObject.
@
text
@a129 2
      getCoordinator ().recordGlobalAspect (this);

@


1.5
log
@theProblem.clear ().
@
text
@d21 1
a21 1
// RetainedObject
d142 1
a142 1
// Override from class RetainedObject.
d153 1
a153 1
// Override from class RetainedObject.
@


1.4
log
@Implemented theProblem.getInstances (theCompClass).
@
text
@a127 2
      nPeriods          = 26;

d131 2
d163 11
@


1.3
log
@Changed theProblem.getComponents () to return an unmodifiable view.
@
text
@d132 1
a132 1
      getCoordinator ().record (this);
d170 1
a170 1
      assert (getCoordinator ().getComponents ().size () == 1);
@


1.2
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d170 1
a170 1
      assert (! getCoordinator ().hasPartsOpns ());
@


1.1
log
@Changed name of GlobalComponent classes to GlobalAspect.
@
text
@d22 1
a22 1
//    Element
d26 1
a26 1
public final class GlobalAspect extends Element
d189 1
a189 1
// getElemClassID ()
d191 1
a191 1
// Override from class Element.
d194 1
a194 1
   ElemClassID getElemClassID ()
d196 1
a196 1
      return ElemClassID.GLOBAL_ASPECT;
d200 1
a200 1
// getElementCOR ().
d202 1
a202 1
// Override from class Element.
d205 1
a205 1
   ElementCOR getElementCOR ()
d242 1
a242 1
         theDemandCOR = theTriple.getE      ().getDemandCOR ();
@

