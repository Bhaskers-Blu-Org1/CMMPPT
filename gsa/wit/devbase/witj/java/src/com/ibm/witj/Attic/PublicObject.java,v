head	1.30;
access;
symbols;
locks; strict;
comment	@# @;


1.30
date	2008.09.03.20.18.07;	author rjw;	state dead;
branches;
next	1.29;

1.29
date	2008.09.03.18.03.09;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.09.02.22.46.00;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.08.28.18.30.38;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.08.27.18.13.59;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.08.21.20.53.12;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.08.19.22.14.33;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.08.19.16.28.55;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.08.18.22.16.58;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.08.07.15.25.50;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.08.06.18.48.23;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.07.25.22.06.58;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.07.25.21.45.28;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.07.25.21.16.47;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.07.01.21.18.08;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.06.19.22.16.56;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.19.17.35.30;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.19.15.05.16;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.19.13.36.45;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.18.14.06.24;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.17.15.34.21;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.17.13.38.08;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.13.22.42.17;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.13.18.09.32;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.13.15.57.10;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.12.14.54.24;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.22.21.02.59;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.19.18.20.08;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.16.22.10.24;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.16.14.37.27;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.30
log
@Replaced class PublicObject with class VitalObject.
@
text
@
//==============================================================================
// WIT-J Java Source File PublicObject.java.
//
// Contains the declaration of class PublicObject.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

//==============================================================================
// Class PublicObject
//
// The super class for all public classes in WIT-J.
// An instance of any such class is an object of WIT-J's Application Programming
// Interface.
//
// Class Hierarchy:
//
//    PublicObject
//       AttSpec <RefType>
//       Problem
//       Component
//          GlobalComp
//          Part
//          Demand
//          Operation
//          BomEntry
//          Substitute
//          BopEntry
//       BoundSet
//==============================================================================

public abstract class PublicObject
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// isActive ().
//
// Returns true, iff this PublicObject is currently active. If any other
// public method of an PublicObject (i.e., other than this method) is called
// when this PublicObject is inactive, the program aborts with an error
// message.
//------------------------------------------------------------------------------

   public boolean isActive ()
      {
      return isActive;
      }

//==============================================================================
// Protected Methods
//==============================================================================

//------------------------------------------------------------------------------
// finalize ()
//
// Override from class Object.
//------------------------------------------------------------------------------

   protected void finalize () throws Throwable
      {
      super.finalize ();

      assert (! isActive);
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// Constructor.
//------------------------------------------------------------------------------

   PublicObject ()
      {
      }

//------------------------------------------------------------------------------
// shutDown ().
//
// Puts this PublicObject into an inactive state.
//
// The following must be done when a PublicObject is shut down:
//
// * All C++  objects that it owns are deleted.
// * All Java objects that it owns are shut down.
// * All references to it from active WIT-J objects are removed.
//
// Thus, if a PublicObject is shut down and all references to it from the
// application program are removed, it is ready for garbage collection.
// Garbage collection of a PublicObject while it is still active results in an
// internal error.
//------------------------------------------------------------------------------

   void shutDown ()
      {
      assert (isActive);

      isActive = false;
      }

//------------------------------------------------------------------------------
// mustBeActive (theArg, argName)
//
// Verifies that the PublicObject is active.
// Arguments:
//    methName: The name of the method.
//------------------------------------------------------------------------------

   void mustBeActive (String methName)
      {
      if (! isActive ())
         abortWmsg (
              "   A method was called on an inactive PublicObject "
            +    "where this is not allowed.\n"
            + "\n"
            + "      Method: "
            + methName
            + "\n"
            + "      Object: "
            + this);
      }

//------------------------------------------------------------------------------
// mustBeNonNullActive (theArg, argName)
//
// Verifies that a PublicObject argument to a method is non-null and active.
// Arguments:
//    theArg:   The argument being checked.
//    argName:  The name of the argument being checked.
//    methName: The name of the method.
//------------------------------------------------------------------------------

   static void mustBeNonNullActive (
         PublicObject theArg,
         String       argName,
         String       methName)
      {
      if (theArg == null)
         abortWmsg (
              "   A method was called with a null argument "
            +    "where this is not allowed.\n"
            + "\n"
            + "      Method:   "
            + methName
            + "\n"
            + "      Argument: "
            + argName);

      if (! theArg.isActive ())
         abortWmsg (
              "   A method was called with an inactive PublicObject as one "
            +    "of its arguments\n"
            + "   where this is not allowed.\n"
            + "\n"
            + "      Method:         "
            + methName
            + "\n"
            + "      Argument:       "
            + argName
            + "\n"
            + "      Argument Value: "
            + theArg);
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// isActive.
//
// True, iff this PublicObject is currently active.
//------------------------------------------------------------------------------

   private boolean isActive = true;

//==============================================================================
}
@


1.29
log
@Replaced toStringActive () with toString ().
@
text
@@


1.28
log
@Began implementation of bound set attributes.
@
text
@a54 14
//------------------------------------------------------------------------------
// toString ().
//
// Override from class Object.
//------------------------------------------------------------------------------

   public final String toString ()
      {
      if (isActive ())
         return toStringActive ();
      else
         return "Inactive " + getClass ().getSimpleName ();
      }

a171 9
//------------------------------------------------------------------------------
// toStringActive ();
//
// Returns the String to be returned by toString.
// Valid only if this PublicObject is currently active.
//------------------------------------------------------------------------------

   abstract String toStringActive ();

@


1.27
log
@Name change: Global --> GlobalComp.
@
text
@d32 1
@


1.26
log
@Attributes.
@
text
@d25 1
a25 1
//          Global
@


1.25
log
@Attributes.
@
text
@d22 1
a31 12
//       AttSpec <Boolean>
//          AttSpec.BoolSpec
//       AttSpec <Integer>
//          AttSpec.IntSpec
//       AttSpec <Double>
//          AttSpec.DblSpec
//       AttSpec <boolean[]>
//          AttSpec.BoolVecSpec
//       AttSpec <int[]>
//          AttSpec.IntVecSpec
//       AttSpec <double[]>
//          AttSpec.DblVecSpec
@


1.24
log
@Revised the shut-down model.
@
text
@d31 12
a42 7
//       AttSpec <RefType>
//          AttSpec.BooleanAtt
//          AttSpec.IntegerAtt
//          AttSpec.DoubleAtt
//          AttSpec.BooleanVectorAtt
//          AttSpec.IntegerVectorAtt
//          AttSpec.DoubleVectorAtt
@


1.23
log
@Replaced use of raw AttSpec with AttSpec <?>.
@
text
@d107 11
@


1.22
log
@Implemented Utility class.
@
text
@d31 1
a31 1
//       AttSpec
@


1.21
log
@Attributes.
@
text
@d8 3
a10 1
package com.ibm.witj;
a180 27
// abortWmsg (errorTxt)
//
// Issues an error message whose content is given the errorTxt and then aborts
// the program.
//------------------------------------------------------------------------------

   static void abortWmsg (String errorTxt)
      {
      System.out.println (
           "\n"
         + "WIT-J Application Program Error:\n"
         + "\n"
         + errorTxt
         + "\n"
         + "\n"
         + "Stack Trace:\n");

      new Throwable ().printStackTrace ();

      System.out.println (
           "\n"
         + "Application Program aborted by WIT-J.\n");
   
      System.exit (3);
      }

//------------------------------------------------------------------------------
@


1.20
log
@Classes Global and GlobalCI.
@
text
@d29 7
a35 7
//       Attribute
//          Attribute.BooleanAtt
//          Attribute.IntegerAtt
//          Attribute.DoubleAtt
//          Attribute.BooleanVectorAtt
//          Attribute.IntegerVectorAtt
//          Attribute.DoubleVectorAtt
@


1.19
log
@Attributes.
@
text
@d22 1
a22 1
//          GlobalComp
@


1.18
log
@Attributes.
@
text
@d73 17
@


1.17
log
@Attributes.
@
text
@d29 7
a35 5
//       AttAcc
//          BoolInAttAcc
//          VecAttAcc
//             DblVecInAttAcc
//             DblVecOutAttAcc
@


1.16
log
@Replaced classes Material and Capacity with an enum.
@
text
@d67 1
a67 1
         return "Inactive PublicObject of " + getClass ();
d120 1
a120 1
// Verifies that an PublicObject argument to a method is non-null and active.
@


1.15
log
@Implemented of class DblVecOutAttAcc.
@
text
@a23 2
//             Material
//             Capacity
@


1.14
log
@Initial implementation of class BoolInAttAcc.
@
text
@d35 1
@


1.13
log
@Changed class name DblVecAttAcc to DblVecInAttAcc.
@
text
@d32 3
a34 1
//          DblVecInAttAcc
@


1.12
log
@Changed class name       AttI to       AttAcc.
Changed class name DblVecAttI to DblVecAttAcc.
@
text
@d32 1
a32 1
//          DblVecAttAcc
@


1.11
log
@Changed name of class       AttRep to       AttI.
Changed name of class DblVecAttRep to DblVecAttI.
@
text
@d31 2
a32 2
//       AttI
//          DblVecAttI
@


1.10
log
@Initial implementation of class DblVecAttRep.
@
text
@d31 2
a32 2
//       AttRep
//          DblVecAttRep
@


1.9
log
@Implemented Java class AttRep.
@
text
@d32 1
@


1.8
log
@Attributes.
@
text
@d31 1
d81 1
a81 1
// shutdown ().
@


1.7
log
@Removed class LTPubObject.
@
text
@a19 1
//       LTPubObject
@


1.6
log
@Added Java class LTPubObject.
@
text
@d21 11
a31 11
//          Problem
//          Component
//             GlobalComp
//             Part
//                Material
//                Capacity
//             Demand
//             Operation
//             BomEntry
//             Substitute
//             BopEntry
d49 4
a52 1
   abstract public boolean isActive ();
d86 6
a91 1
   abstract void shutDown ();
d194 12
@


1.5
log
@Comments, etc.
@
text
@d20 12
a31 11
//       Problem
//       Component
//          GlobalComp
//          Part
//             Material
//             Capacity
//          Demand
//          Operation
//          BomEntry
//          Substitute
//          BopEntry
d49 1
a49 4
   public boolean isActive ()
      {
      return isActive;
      }
d59 1
a59 1
      if (isActive)
a65 20
// Protected Methods
//==============================================================================

//------------------------------------------------------------------------------
// finalize ()
//------------------------------------------------------------------------------

   protected void finalize () throws Throwable
      {
      super.finalize ();

      if (isActive)
         abortWmsg (
              "   Garbage-collection was invoked on an active PublicObject."
            + "\n"
            + "      Object: "
            + this);
      }

//==============================================================================
a80 1
// This method must be called before this PublicObject is garbage-collected.
d83 1
a83 6
   void shutDown ()
      {
      mustBeActive ("PublicObject.shutDown");

      isActive = false;
      }
d95 1
a95 1
      if (! isActive)
d133 1
a133 1
      if (! theArg.isActive)
a185 12
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// isActive.
//
// See public method isActive ().
//------------------------------------------------------------------------------

   private boolean isActive = true;

//==============================================================================
@


1.4
log
@*** empty log message ***
@
text
@d1 7
@


1.3
log
@*** empty log message ***
@
text
@d22 2
@


1.2
log
@*** empty log message ***
@
text
@d47 1
a47 2
// This declaration forces all concrete subclasses of class PublicObject to
// override toString ().
d50 7
a56 1
   public abstract String toString ();
d195 9
@


1.1
log
@*** empty log message ***
@
text
@d21 1
@

