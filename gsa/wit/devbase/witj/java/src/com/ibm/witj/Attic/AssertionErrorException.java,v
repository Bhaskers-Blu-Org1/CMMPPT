head	1.9;
access;
symbols;
locks; strict;
comment	@# @;


1.9
date	2008.12.22.23.15.50;	author rjw;	state dead;
branches;
next	1.8;

1.8
date	2008.12.18.23.48.08;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.18.20.39.34;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.16.23.43.03;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.16.16.13.29;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.16.15.19.20;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.15.21.40.51;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.12.15.15.35.32;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.11.23.39.51;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Changed some Java Exception class names.
@
text
@
//==============================================================================
// WIT-J Java Source File AssertionErrorException.java.
//
// Contains the declaration of class AssertionErrorException.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

//==============================================================================
// Class AssertionErrorException
//
// One kind of unchecked Exception thrown by WIT-J.
//
// When WIT-J throws an AssertionErrorException, this indicates that:
//
// * An AssertionError was thrown from the Java side of WIT-J.
// * This was apparently caused by a bug in WIT-J.
// * As a result of the throw, WIT-J is now in a non-functional state.
//   No further calls to WIT-J methods should be made for the rest of the
//   program process.
//
// Class Hierarchy:
//
// RuntimeException
//    WitjException
//       TerminalException
//          InternalErrorException
//             AssertionErrorException
//==============================================================================

public final class AssertionErrorException extends InternalErrorException
{
//==============================================================================
// Package-Internal Constructor
//==============================================================================

   AssertionErrorException (AssertionError theAssertErr)
      {
      super ("   An AssertionError was thrown from the Java side of WIT-J.\n");

      initCause (theAssertErr);
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// serialVersionUID
//
// This field is required in order to avoid a compiler warning whenever an
// instance is constructed, because this class inherits from class Throwable,
// which implements the interface Serializable.
//------------------------------------------------------------------------------

   private static final long serialVersionUID = 1L;

//==============================================================================
}
@


1.8
log
@Implemented class InternalErrorException.
@
text
@@


1.7
log
@theProblem.performAction (theCommand)
@
text
@d30 2
a31 1
//          AssertionErrorException
d34 1
a34 1
public final class AssertionErrorException extends TerminalException
@


1.6
log
@Changed a Java class name: WitjAbortsException ==> TerminalException
@
text
@a35 30
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// selfTest
//
// Tests this class:
// Causes an assertion failure within WIT-J, which causes an
// AssertionErrorException to be thrown to the application program.
// This method needs to be called in enableAssertions mode.
//------------------------------------------------------------------------------

   public static void selfTest ()
      {
      try
         {
         Problem theProblem;

         theProblem = Problem.newInstance ();

         theProblem.getElementMgr ();
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//==============================================================================
@


1.5
log
@Changed class name: NonFunctionalException ==> WitjAbortsException
@
text
@d29 1
a29 1
//       WitjAbortsException
d33 1
a33 1
public final class AssertionErrorException extends WitjAbortsException
@


1.4
log
@Minor revision.
@
text
@d29 1
a29 1
//       NonFunctionalException
d33 1
a33 1
public final class AssertionErrorException extends NonFunctionalException
@


1.3
log
@Implemented Java class UnexpectedCppExcException.
@
text
@d71 1
a71 12
      super (
            "\n"
       +    "\n"
       + "   An AssertionError was thrown from the Java side of WIT-J.\n"
       +    "\n"
       + "   This indicates a programming error in WIT-J.\n"
       +    "\n"
       + "   As a result of this Exception, "
       +    "WIT-J is now in a non-functional state. No\n"
       + "   further calls to WIT-J methods should be made for the rest of "
       +    "the program\n" 
       + "   process.\n");
@


1.2
log
@Minor revision.
@
text
@d19 1
a19 1
// * An AssertionError was thrown within WIT-J and caught by WIT-J.
d21 3
a23 2
// * As a result of the throw, WIT-J is now in an invalid state. No further
//   calls to WIT-J methods should be made for the rest of the program process.
d74 1
a74 1
       + "   An AssertionError was thrown within WIT-J.\n"
@


1.1
log
@Implementated class AssertionErrorException.
@
text
@d26 4
a29 6
//    Throwable
//       Exception
//          RuntimeException
//             WitjException
//                NonFunctionalException
//                   AssertionErrorException
@

