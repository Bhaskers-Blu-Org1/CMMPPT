head	1.44;
access;
symbols;
locks; strict;
comment	@# @;


1.44
date	2011.05.02.19.04.58;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2011.05.02.18.32.34;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2011.03.19.00.26.24;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2011.03.11.23.49.41;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2010.04.14.15.42.16;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2009.09.30.20.45.02;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2009.09.17.21.46.46;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2009.07.06.20.43.23;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2009.05.12.19.29.52;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2009.05.12.15.57.59;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2009.04.17.15.38.25;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.12.16.23.43.05;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.12.16.16.13.31;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.12.11.23.39.51;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.12.11.22.21.52;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.12.11.21.54.03;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.12.11.21.37.16;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.12.11.20.48.52;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.12.11.19.06.23;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.12.11.17.01.29;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.12.11.16.48.31;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.12.11.15.37.41;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.12.10.23.10.15;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.12.10.22.27.44;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.12.10.19.20.41;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.12.10.18.49.23;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.12.09.18.38.19;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.12.05.00.24.51;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.12.05.00.04.32;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.12.04.16.56.33;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.12.03.18.55.09;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.12.03.15.57.59;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.11.25.15.28.48;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.11.14.22.52.53;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.10.14.21.37.00;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.10.01.22.19.14;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.10.01.15.12.09;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.19.14.56.45;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.12.16.09.37;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.05.22.06.52;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.05.20.20.51;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.05.15.53.04;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.03.20.18.07;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.18.22.16.59;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.44
log
@Revised some comments.
@
text
@
//==============================================================================
// WIT-J Java Source File Utility.java.
//==============================================================================

package com.ibm.witj;

import     java.util.*;

//==============================================================================
// Class Utility
//
// Noninstantiable class.
//
// Contains various static utility methods.
//==============================================================================

final class Utility
{
//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// getExceptionToThrow (theThrowable)
//
// Return a WitjException to be thrown when theThrowable was caught by WIT-J.
//------------------------------------------------------------------------------

   static WitjException getExceptionToThrow (Throwable theThrowable)
      {
      return WitjException.getExceptionToThrow (theThrowable);
      }

//------------------------------------------------------------------------------
// mustBeNonNull
//
// Verifies that an Object argument to a method is non-null.
//
// Arguments:
//    theArg:   The argument being checked.
//    argName:  The name of the argument being checked.
//    methName: The name of the method.
//------------------------------------------------------------------------------

   static void mustBeNonNull (Object theArg, String argName, String methName)
      {
      if (theArg == null)
         throw
            new StatusQuoException (
               "   A method was called with a null argument "
             +    "where this is not allowed.\n"
             + "\n"
             + "      Method:   " + methName + "\n"
             + "      Argument: " + argName);
      }

//------------------------------------------------------------------------------
// notAllowedWhenTerminated (methName)
//
// Verifies that WIT-J has not terminated its functioning.
//
// Arguments:
//    methName: The name of the method.
//------------------------------------------------------------------------------

   static void notAllowedWhenTerminated (String methName)
      {
      TerminalException.notAllowedWhenTerminated (methName);
      }

//------------------------------------------------------------------------------
// internalError (errorTxt)
//
// Throws an Assertion error with the errorTxt and some extra text.
//------------------------------------------------------------------------------

   static void internalError (String errorTxt)
      {
      throw
         new AssertionError (
              "\n\n"
            + errorTxt + "\n"
            + "\n"
            + "   This indicates a WIT-J internal error.\n");
      }

//------------------------------------------------------------------------------
// notYetAvailable (methName)
//------------------------------------------------------------------------------

   static void notYetAvailable (String methName)
      {
      throw
         new StatusQuoException (
            "   The method called is not yet available in WIT-J.\n"
          + "\n"
          + "      Method: " + methName);
      }

//------------------------------------------------------------------------------
// println (text)
//
// Wrapper method.
//------------------------------------------------------------------------------

   static void println (String text)
      {
      System.out.println (text);
      }

//------------------------------------------------------------------------------
// newHashSet (theStrings)
//
// Creates and returns a HashSet whose elements are theStrings.
//------------------------------------------------------------------------------

   static HashSet <String> newHashSet (String... theStrings)
      {
      HashSet <String> theHashSet;

      theHashSet = new HashSet <String> (theStrings.length * 3);

      for (String theString: theStrings)
         {
         theHashSet.add (theString);
         }

      return theHashSet;
      }

//==============================================================================
// Private Constructor.
//
// Prevents instantiation.
//==============================================================================

   private Utility ()
      {
      }

//==============================================================================
}
@


1.43
log
@Reduced heading comments.
@
text
@d134 2
a139 1
      internalError ("   The constructor for class Utility was invoked.");
@


1.42
log
@Revised the arguments to eqHeurAlloc.
@
text
@a3 2
//
// Contains the declaration of class Utility.
@


1.41
log
@Problem.getCriticalList ()
@
text
@d98 1
a98 1
            "   The method called is not yet available.\n"
@


1.40
log
@Multi-Obj Mode
@
text
@d91 13
@


1.39
log
@Removed restriction forbidding WIT-J to be called from more than one Thread.
@
text
@d10 2
d101 20
@


1.38
log
@Implemented minimal thread safety:
   All calls to WIT-J must be from the same Thread or a StatusQuoException
   will be thrown.
@
text
@a72 23
// checkThread (methName)
//
// Verifies that the current Thread is the Thread from which WIT-J was initially
// invoked.
// methName is the name of the current public method.
//------------------------------------------------------------------------------

   static void checkThread (String methName)
      {
      if (Thread.currentThread () != ourThread)
         {
         throw
            new StatusQuoException (
               "   The Thread from which the current method was invoked\n"
             + "   is not the Thread from which WIT-J was initially invoked.\n"
             + "\n"
             + "      Method:         " + methName                + "\n"
             + "      Current Thread: " + Thread.currentThread () + "\n"
             + "      Initial Thread: " + ourThread);
         }
      }

//------------------------------------------------------------------------------
a108 22
// Private Data.
//==============================================================================

//------------------------------------------------------------------------------
// ourThread
//
// The Thread from which WIT-J was initially invoked.
// All calls to WIT-J must be from this Thread.
//------------------------------------------------------------------------------

   private static final Thread ourThread;

//==============================================================================
// Static Initialization Block.
//==============================================================================

   static
      {
      ourThread = Thread.currentThread ();
      }

//==============================================================================
@


1.37
log
@Changed class name GeneralException to WitjException.
@
text
@d73 23
d132 22
@


1.36
log
@Replaced the throwExceptionFor method with getExeceptionToThrow.
@
text
@d27 1
a27 1
// Return a GeneralException to be thrown when theThrowable was caught by WIT-J.
d30 1
a30 1
   static GeneralException getExceptionToThrow (Throwable theThrowable)
d32 1
a32 1
      return GeneralException.getExceptionToThrow (theThrowable);
@


1.35
log
@Changed name of Java class WitjException to GeneralException.
@
text
@d25 1
a25 1
// throwExceptionFor (theThrowable)
d27 1
a27 2
// Throws a Witj Exception suitable for be caught by the application program
// when theThrowable was caught by WIT-J.
d30 1
a30 1
   static void throwExceptionFor (Throwable theThrowable)
d32 1
a32 1
      GeneralException.throwExceptionFor (theThrowable);
@


1.34
log
@Argument checking.
@
text
@d25 1
a25 1
// getWitjExceptionFor (theThrowable)
d27 1
a27 1
// Returns a WitjException suitable to be caught by the application program
d31 1
a31 1
   static WitjException getWitjExceptionFor (Throwable theThrowable)
d33 1
a33 1
      return WitjException.getWitjExceptionFor (theThrowable);
@


1.33
log
@Changed a Java class name: WitjAbortsException ==> TerminalException
@
text
@a36 39
// argMustBeEnabled
//
// Verifies that a Problem argument to a method is non-null, active, and
// enabled.
//
// Arguments:
//    theProblem: The argument being checked.
//    methName:   The name of the method.
//------------------------------------------------------------------------------

   static void argMustBeEnabled (Problem theProblem, String methName)
      {
      argMustBeActive (theProblem, "theProblem", methName);

      theProblem.mustBeEnabledAsArg (methName);
      }

//------------------------------------------------------------------------------
// argMustBeActive
//
// Verifies that a RetainedObject argument to a method is non-null and active.
//
// Arguments:
//    theArg:   The argument being checked.
//    argName:  The name of the argument being checked.
//    methName: The name of the method.
//------------------------------------------------------------------------------

   static void argMustBeActive (
         RetainedObject theArg,
         String         argName,
         String         methName)
      {
      mustBeNonNull (theArg, argName, methName);

      theArg.mustBeActiveAsArg (argName, methName);
      }

//------------------------------------------------------------------------------
@


1.32
log
@Changed class name: NonFunctionalException ==> WitjAbortsException
@
text
@d99 1
a99 1
// witjAbortedNotAllowed (methName)
d101 1
a101 1
// Verifies that WIT-J has not aborted its functioning.
d107 1
a107 1
   static void witjAbortedNotAllowed (String methName)
d109 1
a109 1
      WitjAbortsException.witjAbortedNotAllowed (methName);
@


1.31
log
@Implementated class AssertionErrorException.
@
text
@d99 1
a99 1
// witjMustBeFunctional (methName)
d101 1
a101 1
// Verifies that WIT-J is currently in a functional state.
d107 1
a107 1
   static void witjMustBeFunctional (String methName)
d109 1
a109 1
      NonFunctionalException.witjMustBeFunctional (methName);
@


1.30
log
@Moved more responsibility into class NonFunctionalException.
@
text
@d33 1
a33 14
      try
         {
         throw theThrowable;
         }

      catch (StatusQuoException theStatusQuoExc)
         {
         return theStatusQuoExc;
         }

      catch (Throwable unexpThrowable)
         {
         return new UnexpectedThrowableException (unexpThrowable);
         }
@


1.29
log
@Changed class name: FatalException ==> NonFunctionalException
@
text
@d122 1
a122 7
      if (! NonFunctionalException.witjIsFunctional ())
         throw
            new StatusQuoException (
               "   A WIT-J method was called when WIT-J was in a "
             +    "non-functional state.\n"
             + "\n"
             + "      Method: " + methName);
@


1.28
log
@Added code to test WIT-J's response to catching an instance of an
unexpected Throwable class.
@
text
@d122 1
a122 1
      if (! FatalException.witjIsFunctional ())
@


1.27
log
@Changed class name: UnexpectedException ==> UnexpectedThrowableException.
Improved the detail message for UnexpectedThrowableException.
@
text
@d125 2
a126 2
               "   A method (other than Problem.witjIsFunctional) was called\n"
             + "   when WIT-J was not in a functional state.\n"
@


1.26
log
@Added text to the detail message of StatusQuoExceptions.
@
text
@d38 1
a38 1
      catch (StatusQuoException theIntactExc)
d40 1
a40 1
         return theIntactExc;
d45 1
a45 1
         return new UnexpectedException (unexpThrowable);
@


1.25
log
@Changed name of class IntactException to StatusQuoException.
@
text
@d102 7
a108 7
         throw new StatusQuoException (
              "\n\n"
            + "   A method was called with a null argument "
            +    "where this is not allowed.\n"
            + "\n"
            + "      Method:   " + methName + "\n"
            + "      Argument: " + argName  + "\n");
d123 6
a128 6
         throw new StatusQuoException (
              "\n\n"
            + "   A method (other than Problem.witjIsFunctional) was called\n"
            + "   when WIT-J was not in a functional state.\n"
            + "\n"
            + "      Method: " + methName + "\n");
@


1.24
log
@Removed some internal calls to public methods.
@
text
@d38 1
a38 1
      catch (IntactException theIntactExc)
d102 1
a102 1
         throw new IntactException (
d123 1
a123 1
         throw new IntactException (
@


1.23
log
@Added the uniform try block whereever it was needed.
@
text
@d64 1
a64 7
      if (! theProblem.isEnabled ())
         throw new IntactException (
              "\n\n"
            + "   A unenabled Problem was passed as an argument to a method\n"
            + "   that requires an enabled Problem.\n"
            + "\n"
            + "      Method: " + methName + "\n");
d85 1
a85 9
      if (! theArg.isActive ())
         throw new IntactException (
              "\n\n"
            + "   A inactive RetainedObject was passed as an argument to\n"
            + "   a method that requires an active RetainedObject.\n"
            + "\n"
            + "      Method:         " + methName + "\n"
            + "      Argument:       " + argName  + "\n"
            + "      Argument Value: " + theArg   + "\n");
@


1.22
log
@Added canonical try blocks to all public methods of class Problem.
@
text
@a34 3
//       println (
//          "Call to Utility.getWitjExceptionFor.\n");

@


1.21
log
@Added class FatalException.
Removed class ExceptionHandler.
@
text
@d25 28
@


1.20
log
@Changed class names:
   HarmlessException ==> IntactException
   UnknownException  ==> UnexpectedException
@
text
@d111 1
a111 1
      if (! ExceptionHandler.witjIsFunctional ())
@


1.19
log
@Exceptions
@
text
@d40 1
a40 1
         throw new HarmlessException (
d67 1
a67 1
         throw new HarmlessException (
d91 1
a91 1
         throw new HarmlessException (
d112 1
a112 1
         throw new HarmlessException (
@


1.18
log
@Replaced standard Exceptions with HarmlessExceptions in throw statements.
@
text
@d101 20
@


1.17
log
@Replaced assert (false) with internalError invocations.
@
text
@d40 1
a40 1
         throw new IllegalArgumentException (
d67 1
a67 1
         throw new IllegalArgumentException (
d91 1
a91 1
         throw new NullPointerException (
@


1.16
log
@Replaced Utility.intAbortWmsg with Utility.internalError.
@
text
@d133 1
a133 1
      assert (false);
@


1.15
log
@Exceptions
@
text
@d101 1
a101 1
// intAbortWmsg (errorTxt)
d103 1
a103 2
// Issues an internal error message whose content is given the errorTxt and then
// aborts the program.
d106 1
a106 1
   static void intAbortWmsg (String errorTxt)
d108 6
a113 16
      println (
           "\n"
         + "WIT-J Internal Error:\n"
         + "\n"
         + errorTxt
         + "\n"
         + "\n"
         + "Stack Trace:\n");

      new Throwable ().printStackTrace ();

      println (
           "\n"
         + "Application Program aborted by WIT-J.\n");
   
      System.exit (4);
@


1.14
log
@Minor changes.
@
text
@d40 4
a43 3
         abortWmsg (
              "   A unenabled Problem was passed as an argument to\n"
            + "   a public method that requires an enabled Problem.\n"
d45 1
a45 3
            + "      Method: "
            + methName
            + "\n");
d67 8
a74 12
         abortWmsg (
              "   A inactive RetainedObject was passed as an argument to\n"
            + "   a public method that requires an active RetainedObject.\n"
            + "\n"
            + "      Method:         "
            + methName
            + "\n"
            + "      Argument:       "
            + argName
            + "\n"
            + "      Argument Value: "
            + theArg);
d91 3
a93 2
         abortWmsg (
              "   A method was called with a null argument "
d96 2
a97 32
            + "      Method:   "
            + methName
            + "\n"
            + "      Argument: "
            + argName);
      }

//------------------------------------------------------------------------------
// abortWmsg (errorTxt)
//
// Issues an error message whose content is given the errorTxt and then aborts
// the program.
//------------------------------------------------------------------------------

   static void abortWmsg (String errorTxt)
      {
      println (
           "\n"
         + "WIT-J Application Program Error:\n"
         + "\n"
         + errorTxt
         + "\n"
         + "\n"
         + "Stack Trace:\n");

      new Throwable ().printStackTrace ();

      println (
           "\n"
         + "Application Program aborted by WIT-J.\n");
   
      System.exit (3);
@


1.13
log
@Exceptions
@
text
@d25 1
a25 1
// argMustBeEnabled (...)
d50 1
a50 1
// argMustBeActive (...)
d83 1
a83 1
// mustBeNonNull (...)
@


1.12
log
@Removed class Session from the public interface.
@
text
@d41 6
a46 6
            "   A unenabled Problem was passed as an argument to\n"
          + "   a public method that requires an enabled Problem.\n"
          + "\n"
          + "      Method: "
          + methName
          + "\n");
d69 11
a79 11
            "   A inactive RetainedObject was passed as an argument to\n"
          + "   a public method that requires an active RetainedObject.\n"
          + "\n"
          + "      Method:         "
          + methName
          + "\n"
          + "      Argument:       "
          + argName
          + "\n"
          + "      Argument Value: "
          + theArg);
d97 8
a104 8
            "   A method was called with a null argument "
          +    "where this is not allowed.\n"
          + "\n"
          + "      Method:   "
          + methName
          + "\n"
          + "      Argument: "
          + argName);
@


1.11
log
@Name change in class RetainedObject: getActiveState ==> isActive.
@
text
@d25 25
@


1.10
log
@Minor revision.
@
text
@d42 1
a42 1
      if (! theArg.getActiveState ())
@


1.9
log
@Minor revision.
@
text
@d42 1
a42 1
      if (! theArg.getActiveMode ())
@


1.8
log
@Call-back infrastructure.
@
text
@d42 1
a42 1
      if (! theArg.isActive ())
@


1.7
log
@Minor revision.
@
text
@d8 1
a8 3
package       com.ibm.witj;

import static com.ibm.witj.Utility.*;
@


1.6
log
@Active state / shutDown method.
@
text
@d44 1
a44 1
      if (! theArg.getActive ())
@


1.5
log
@Terminology change.
@
text
@d27 1
a27 1
// argMustBeUnreleased (...)
d29 1
a29 2
// Verifies that a RetainedObject argument to a method is non-null and
// unreleased.
d37 1
a37 1
   static void argMustBeUnreleased (
d44 1
a44 1
      if (theArg.getReleased ())
d46 2
a47 2
            "   A released RetainedObject was passed as an argument to\n"
          + "   a public method that requires an unreleased RetainedObject.\n"
@


1.4
log
@Minor change.
@
text
@d27 1
a27 1
// mustBeNonNullActive (...)
d29 2
a30 1
// Verifies that a VitalObject argument to a method is non-null and active.
d38 4
a41 4
   static void mustBeNonNullActive (
         VitalObject theArg,
         String      argName,
         String      methName)
d45 1
a45 1
      if (! theArg.getActive ())
d47 2
a48 2
            "   An inactive VitalObject was passed as an argument\n"
          + "   to a public method that requires an active VitalObject.\n"
@


1.3
log
@Added checking for null arguments.
@
text
@d44 1
a44 1
      if (! theArg.isActive ())
@


1.2
log
@Replaced class PublicObject with class VitalObject.
@
text
@d27 1
a27 1
// mustBeNonNullActive (theArg, argName)
d30 1
d42 1
a42 10
      if (theArg == null)
         abortWmsg (
            "   A method was called with a null argument "
          +    "where this is not allowed.\n"
          + "\n"
          + "      Method:   "
          + methName
          + "\n"
          + "      Argument: "
          + argName);
d60 25
@


1.1
log
@Implemented Utility class.
@
text
@d27 41
@

