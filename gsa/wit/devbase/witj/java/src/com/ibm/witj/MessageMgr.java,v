head	1.28;
access;
symbols;
locks; strict;
comment	@# @;


1.28
date	2011.05.02.18.32.26;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.03.30.16.20.51;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2009.09.29.20.43.57;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2009.09.25.23.44.30;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2009.09.25.22.42.43;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2009.05.12.19.29.51;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2009.05.12.15.57.58;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2009.05.05.20.17.06;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.05.04.21.49.57;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.03.12.19.02.42;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.03.06.23.23.05;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.02.03.19.01.03;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.01.23.19.32.24;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.01.21.21.43.24;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.01.16.17.30.24;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.12.16.23.43.04;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.16.16.13.30;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.15.15.35.33;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.11.15.37.40;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.10.20.54.10;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.11.26.20.11.00;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.25.21.58.17;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.25.21.04.03;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.25.20.47.40;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.25.20.11.08;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.10.01.22.10.11;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.26.22.21.26;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.19.16.29.51;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Reduced heading comments.
@
text
@
//==============================================================================
// WIT-J Java Source File MessageMgr.java.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

//==============================================================================
// Class MessageMgr
//
// "Message Manager"
// Provides an interface to WIT's message functions for a Problem.
//
// Class Hierarchy:
//
// ThreadedObject
//    PreservedObject
//       MessageMgr
//==============================================================================

public final class MessageMgr extends PreservedObject
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// flushFile ()
//
// Flushes WIT's message file.
//------------------------------------------------------------------------------

   public void flushFile ()
      {
      try
         {
         mustBeActive ("MessageMgr.flushFile");

         myMessageMgrCOR.flushFile ();
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// setQuiet (quietVal)
//
// Setter.
//------------------------------------------------------------------------------

   public void setQuiet (boolean quietVal)
      {
      try
         {
         mustBeActive ("MessageMgr.setQuiet");

         myMessageMgrCOR.setQuiet (quietVal);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// isQuiet ()
//
// Accessor.
//------------------------------------------------------------------------------

   public boolean isQuiet ()
      {
      try
         {
         mustBeActive ("MessageMgr.isQuiet");

         return myMessageMgrCOR.isQuiet ();
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// Wrappers for corresponding WIT API functions.
//------------------------------------------------------------------------------

   public void setMesgFileAccessMode (String theValue)
      {
      try
         {
         mustBeActive ("MessageMgr.setMesgFileAccessMode");

         myMessageMgrCOR.setMesgFileAccessMode (theValue);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public String getMesgFileAccessMode ()
      {
      try
         {
         mustBeActive ("MessageMgr.getMesgFileAccessMode");

         return myMessageMgrCOR.getMesgFileAccessMode ();
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public void setMesgFileName (String theValue)
      {
      try
         {
         mustBeActive ("MessageMgr.setMesgFileName");

         myMessageMgrCOR.setMesgFileName (theValue);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public String getMesgFileName ()
      {
      try
         {
         mustBeActive ("MessageMgr.getMesgFileName");

         return myMessageMgrCOR.getMesgFileName ();
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public void setMesgTimesPrint (int theMsgNo, int theCount)
      {
      try
         {
         mustBeActive ("MessageMgr.setMesgTimesPrint");

         myMessageMgrCOR.setMesgTimesPrint (theMsgNo, theCount);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public int getMesgTimesPrint (int theMsgNo)
      {
      try
         {
         mustBeActive ("MessageMgr.getMesgTimesPrint");

         return myMessageMgrCOR.getMesgTimesPrint (theMsgNo);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public void setMesgTimesPrint (MessageGroup theGroup, int theCount)
      {
      try
         {
         mustBeActive ("MessageMgr.setMesgTimesPrint");

         myMessageMgrCOR.setMesgTimesPrintByGroup (theGroup.name (), theCount);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//==============================================================================
// Package-Internal Constructor
//==============================================================================

   MessageMgr (Coordinator theCoord)
      {
      super (theCoord);

      myMessageMgrCOR = new MessageMgrCOR (theCoord.getCoordinatorCOR ());
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// toStringActive ().
//
// Override from class PreservedObject.
//------------------------------------------------------------------------------

   String toStringActive ()
      {
      return "MessageMgr";
      }

//------------------------------------------------------------------------------
// deactivate ()
//
// Override from class PreservedObject.
//------------------------------------------------------------------------------

   void deactivate ()
      {
      myMessageMgrCOR.deactivate ();
      super          .deactivate ();
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myMessageMgrCOR.
//
// The C++ MsgMgr interface that belongs to this MessageMgr.
//------------------------------------------------------------------------------

   private final MessageMgrCOR myMessageMgrCOR;

//==============================================================================
}
@


1.27
log
@Revised CppObjRep class ctors.
@
text
@a3 2
//
// Contains the declaration of class MessageMgr.
@


1.26
log
@Initial implementation of class ThreadedObject.
@
text
@d223 1
a223 1
      myMessageMgrCOR = new MessageMgrCOR (theCoord);
@


1.25
log
@Moved myCoordinator to PreservedObject.
@
text
@d20 3
a22 2
// PreservedObject
//    MessageMgr
@


1.24
log
@Implemented thePreservedObject.getCoordinator ().
@
text
@d220 1
a220 1
      myCoordinator   = theCoord;
a229 11
// getCoordinator ()
//
// Override from class PreservedObject.
//------------------------------------------------------------------------------

   Coordinator getCoordinator ()
      {
      return myCoordinator;
      }

//------------------------------------------------------------------------------
a256 8
// myCoordinator
//
// The Coordinator for this MessageMgr.
//------------------------------------------------------------------------------
 
   private final Coordinator myCoordinator;

//------------------------------------------------------------------------------
@


1.23
log
@Replaced the throwExceptionFor method with getExeceptionToThrow.
@
text
@d220 1
a220 1
      CoordinatorCOR theCoordCOR;
d222 1
a222 3
      theCoordCOR     = theCoord.getCoordinatorCOR ();

      myMessageMgrCOR = new MessageMgrCOR (theCoordCOR);
d230 11
d268 8
@


1.22
log
@Changed name of Java class WitjException to GeneralException.
@
text
@d45 1
a45 1
      catch (Throwable theThrowable)
d47 1
a47 1
         throwExceptionFor (theThrowable);
d66 1
a66 1
      catch (Throwable theThrowable)
d68 1
a68 1
         throwExceptionFor (theThrowable);
d87 1
a87 1
      catch (Throwable theThrowable)
d89 1
a89 3
         throwExceptionFor (theThrowable);

         return false;
d106 1
a106 1
      catch (Throwable theThrowable)
d108 1
a108 1
         throwExceptionFor (theThrowable);
d123 1
a123 1
      catch (Throwable theThrowable)
d125 1
a125 3
         throwExceptionFor (theThrowable);

         return null;
d140 1
a140 1
      catch (Throwable theThrowable)
d142 1
a142 1
         throwExceptionFor (theThrowable);
d157 1
a157 1
      catch (Throwable theThrowable)
d159 1
a159 3
         throwExceptionFor (theThrowable);

         return null;
d174 1
a174 1
      catch (Throwable theThrowable)
d176 1
a176 1
         throwExceptionFor (theThrowable);
d191 1
a191 1
      catch (Throwable theThrowable)
d193 1
a193 3
         throwExceptionFor (theThrowable);

         return 0;
d208 1
a208 1
      catch (Throwable theThrowable)
d210 1
a210 1
         throwExceptionFor (theThrowable);
@


1.21
log
@Changed name of Java class RetainedObject to PreservedObject.
@
text
@d47 1
a47 1
         throw getWitjExceptionFor (theThrowable);
d68 1
a68 1
         throw getWitjExceptionFor (theThrowable);
d89 3
a91 1
         throw getWitjExceptionFor (theThrowable);
d110 1
a110 1
         throw getWitjExceptionFor (theThrowable);
d127 3
a129 1
         throw getWitjExceptionFor (theThrowable);
d146 1
a146 1
         throw getWitjExceptionFor (theThrowable);
d163 3
a165 1
         throw getWitjExceptionFor (theThrowable);
d182 1
a182 1
         throw getWitjExceptionFor (theThrowable);
d199 3
a201 1
         throw getWitjExceptionFor (theThrowable);
d218 1
a218 1
         throw getWitjExceptionFor (theThrowable);
@


1.20
log
@Moved the iAmModifiable field to AttID class.
@
text
@d20 1
a20 1
// RetainedObject
d24 1
a24 1
public final class MessageMgr extends RetainedObject
d234 1
a234 1
// Override from class RetainedObject.
d245 1
a245 1
// Override from class RetainedObject.
@


1.19
log
@Changed name of Problem method shutDown to deactivate.
@
text
@d16 1
a16 1
// Provides an interface WIT's message functions for a Problem.
@


1.18
log
@purgeData
@
text
@d243 1
a243 1
// shutDown ()
d248 1
a248 1
   void shutDown ()
d250 2
a251 2
      myMessageMgrCOR.shutDown ();
      super          .shutDown ();
@


1.17
log
@Message Group by group name.
@
text
@a93 21
// toString ().
//
// Override from class Object.
//------------------------------------------------------------------------------

   public String toString ()
      {
      try
         {
         notAllowedWhenTerminated ("MessageMgr.toString");

         return "MessageMgr";
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
d232 11
@


1.16
log
@Coordinator
@
text
@d186 1
a186 1
   public void setMesgTimesPrint (int theMsgNo, int theInt)
d192 1
a192 1
         myMessageMgrCOR.setMesgTimesPrint (theMsgNo, theInt);
d220 1
a220 1
   public void setMesgTimesPrint (MessageGroup theGroup, int theInt)
d226 1
a226 18
         myMessageMgrCOR.setMesgTimesPrint (theGroup.getMsgNo (), theInt);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public int getMesgTimesPrint (MessageGroup theGroup)
      {
      try
         {
         mustBeActive ("MessageMgr.getMesgTimesPrint");

         return myMessageMgrCOR.getMesgTimesPrint (theGroup.getMsgNo ());
@


1.15
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d256 1
a256 1
   MessageMgr (Coordinator theCoordinator)
d258 1
a258 1
      CoordinatorCOR theCoordinatorCOR;
d260 1
a260 1
      theCoordinatorCOR = theCoordinator.getCoordinatorCOR ();
d262 1
a262 1
      myMessageMgrCOR   = new MessageMgrCOR (theCoordinatorCOR);
@


1.14
log
@ProbMgr classes.
@
text
@d256 1
a256 1
   MessageMgr (ProbMgr theProbMgr)
d258 1
a258 1
      ProbMgrCOR theProbMgrCOR;
d260 1
a260 1
      theProbMgrCOR   = theProbMgr.getProbMgrCOR ();
d262 1
a262 1
      myMessageMgrCOR = new MessageMgrCOR (theProbMgrCOR);
@


1.13
log
@Changed a Java class name: WitjAbortsException ==> TerminalException
@
text
@d256 1
a256 1
   MessageMgr (Problem theProblem)
d258 1
a258 1
      ProblemCOR theProblemCOR;
d260 1
a260 1
      theProblemCOR   = theProblem.getProblemCOR ();
d262 1
a262 1
      myMessageMgrCOR = new MessageMgrCOR (theProblemCOR);
@


1.12
log
@Changed class name: NonFunctionalException ==> WitjAbortsException
@
text
@d103 1
a103 1
         witjAbortedNotAllowed ("MessageMgr.toString");
@


1.11
log
@Minor revision.
@
text
@d103 1
a103 1
         witjMustBeFunctional ("MessageMgr.toString");
@


1.10
log
@Added the uniform try block whereever it was needed.
@
text
@d20 2
a21 2
//    RetainedObject
//       MessageMgr
@


1.9
log
@Added a call to witjMustBeFunctional whereever it was needed.
@
text
@d38 11
a48 3
      mustBeActive ("MessageMgr.flushFile");

      myMessageMgrCOR.flushFile ();
d59 11
a69 3
      mustBeActive ("MessageMgr.setQuiet");

      myMessageMgrCOR.setQuiet (quietVal);
d80 11
a90 3
      mustBeActive ("MessageMgr.isQuiet");

      return myMessageMgrCOR.isQuiet ();
d101 11
a111 3
      witjMustBeFunctional ("MessageMgr.toString");

      return "MessageMgr";
d120 12
a131 1
      mustBeActive ("MessageMgr.setMesgFileAccessMode");
d133 1
a133 2
      myMessageMgrCOR.setMesgFileAccessMode (theValue);
      }
d137 12
a148 1
      mustBeActive ("MessageMgr.getMesgFileAccessMode");
d150 1
a150 2
      return myMessageMgrCOR.getMesgFileAccessMode ();
      }
d154 12
a165 1
      mustBeActive ("MessageMgr.setMesgFileName");
d167 1
a167 2
      myMessageMgrCOR.setMesgFileName (theValue);
      }
d171 12
a182 1
      mustBeActive ("MessageMgr.getMesgFileName");
d184 1
a184 2
      return myMessageMgrCOR.getMesgFileName ();
      }
d188 12
a199 1
      mustBeActive ("MessageMgr.setMesgTimesPrint");
d201 1
a201 2
      myMessageMgrCOR.setMesgTimesPrint (theMsgNo, theInt);
      }
d205 12
a216 1
      mustBeActive ("MessageMgr.getMesgTimesPrint");
d218 1
a218 2
      return myMessageMgrCOR.getMesgTimesPrint (theMsgNo);
      }
d222 12
a233 1
      mustBeActive ("MessageMgr.setMesgTimesPrint");
d235 1
a235 2
      myMessageMgrCOR.setMesgTimesPrint (theGroup.getMsgNo (), theInt);
      }
d239 11
a249 3
      mustBeActive ("MessageMgr.getMesgTimesPrint");

      return myMessageMgrCOR.getMesgTimesPrint (theGroup.getMsgNo ());
@


1.8
log
@Changed the default value of quite mode from false to true.
Changed MessageMgr method names:
   setQuietMode ==> setQuiet
   getQuietMode ==> isQuiet
@
text
@d77 2
@


1.7
log
@Dismantling class SessionCOR.
@
text
@d44 1
a44 1
// setQuietMode (theQuietMode)
d46 1
a46 1
// Updater.
d49 1
a49 1
   public void setQuietMode (boolean theQuietMode)
d51 1
a51 1
      mustBeActive ("MessageMgr.setQuietMode");
d53 1
a53 1
      myMessageMgrCOR.setQuietMode (theQuietMode);
d57 1
a57 1
// getQuietMode ()
d62 1
a62 1
   public boolean getQuietMode ()
d64 1
a64 1
      mustBeActive ("MessageMgr.getQuietMode");
d66 1
a66 1
      return myMessageMgrCOR.getQuietMode ();
@


1.6
log
@Removed Java class Session.
@
text
@d16 1
a16 1
// Provides an interface WIT's message functions for a Session.
d146 1
a146 1
      SessionCOR theSessionCOR;
d148 1
a148 1
      theSessionCOR   = theProblem.getSessionCOR ();
d150 1
a150 1
      myMessageMgrCOR = new MessageMgrCOR (theSessionCOR);
@


1.5
log
@Dismantling Session.
@
text
@d148 1
a148 1
      theSessionCOR   = theProblem.getSession ().getSessionCOR ();
@


1.4
log
@Dismantling class Session.
@
text
@a141 2
//
// To be called only from theSession....
d144 1
a144 1
   MessageMgr (Session theSession)
d148 1
a148 1
      theSessionCOR   = theSession.getSessionCOR ();
@


1.3
log
@Extraction.
@
text
@d155 1
a155 1
//===t==========================================================================
@


1.2
log
@Numerous class name changes.
@
text
@d44 1
a44 1
// setQuiet (isQuietVal)
d49 1
a49 1
   public void setQuiet (boolean isQuietVal)
d51 1
a51 1
      mustBeActive ("MessageMgr.setQuiet");
d53 1
a53 1
      myMessageMgrCOR.setQuiet (isQuietVal);
d57 1
a57 1
// isQuiet ()
d62 1
a62 1
   public boolean isQuiet ()
d64 1
a64 1
      mustBeActive ("MessageMgr.isQuiet");
d66 1
a66 1
      return myMessageMgrCOR.isQuiet ();
@


1.1
log
@Class name change.
@
text
@d40 1
a40 1
      myMessageMgrCI.flushFile ();
d53 1
a53 1
      myMessageMgrCI.setQuiet (isQuietVal);
d66 1
a66 1
      return myMessageMgrCI.isQuiet ();
d88 1
a88 1
      myMessageMgrCI.setMesgFileAccessMode (theValue);
d95 1
a95 1
      return myMessageMgrCI.getMesgFileAccessMode ();
d102 1
a102 1
      myMessageMgrCI.setMesgFileName (theValue);
d109 1
a109 1
      return myMessageMgrCI.getMesgFileName ();
d116 1
a116 1
      myMessageMgrCI.setMesgTimesPrint (theMsgNo, theInt);
d123 1
a123 1
      return myMessageMgrCI.getMesgTimesPrint (theMsgNo);
d130 1
a130 1
      myMessageMgrCI.setMesgTimesPrint (theGroup.getMsgNo (), theInt);
d137 1
a137 1
      return myMessageMgrCI.getMesgTimesPrint (theGroup.getMsgNo ());
d148 1
a148 1
      SessionCI theSessionCI;
d150 1
a150 1
      theSessionCI   = theSession.getSessionCI ();
d152 1
a152 1
      myMessageMgrCI = new MessageMgrCI (theSessionCI);
d167 2
a168 2
      myMessageMgrCI.shutDown ();
      super         .shutDown ();
d176 1
a176 1
// myMessageMgrCI.
d181 1
a181 1
   private final MessageMgrCI myMessageMgrCI;
@

