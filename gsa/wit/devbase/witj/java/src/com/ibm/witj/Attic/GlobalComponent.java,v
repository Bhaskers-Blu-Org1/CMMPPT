head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2009.03.13.16.36.09;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2009.03.12.22.48.37;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.03.12.22.45.20;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Changed name of GlobalComponent classes to GlobalAspect.
@
text
@
//==============================================================================
// WIT-J Java Source File GlobalComponent.java.
//
// Contains the declaration of class GlobalComponent.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import       java.util.*;

//==============================================================================
// Class GlobalComponent
//
// Responsible for working with global attributes of an implosion problem.
//
// Class Hierarchy:
//
// RetainedObject
//    Element
//       GlobalComponent
//==============================================================================

public final class GlobalComponent extends Element
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// setOptInitMethod (theMethod)
//
// Setter.
//------------------------------------------------------------------------------

   public void setOptInitMethod (OptInitMethod theMethod)
      {
      try
         {
         mustBeActive ("GlobalComponent.setOptInitMethod");

         myGlobalComponentCOR.setOptInitMethod (theMethod.name ());
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getOptInitMethod ()
//
// Accessor.
//------------------------------------------------------------------------------

   public OptInitMethod getOptInitMethod ()
      {
      try
         {
         String theMethodName;

         mustBeActive ("GlobalComponent.getOptInitMethod");

         theMethodName = myGlobalComponentCOR.getOptInitMethod ();

         return OptInitMethod.valueOf (theMethodName);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// setPipSeq (theTripleList)
//
// Sets the PIP shipment sequence to the list of AllocTriples in theTripleList.
//------------------------------------------------------------------------------

   public void setPipSeq (ArrayList <AllocTriple <Demand>> theTripleList)
      {
      try
         {
         mustBeActive ("GlobalComponent.setPipSeq");

         setPipSeqInt (theTripleList);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getPipSeq (theTripleList)
//
// Retrieves the PIP shipment sequence, storing it in theTripleList.
//------------------------------------------------------------------------------

   public void getPipSeq (ArrayList <AllocTriple <Demand>> theTripleList)
      {
      try
         {
         mustBeActive ("GlobalComponent.getPipSeq");

         getPipSeqInt (theTripleList);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//==============================================================================
// Package-Internal Constructor
//==============================================================================

   GlobalComponent (Coordinator theCoord)
      {
      super (theCoord);

      nPeriods             = 26;

      myGlobalComponentCOR = new GlobalComponentCOR (this);

      getCoordinator ().record (this);
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// toStringActive ().
//
// Override from class RetainedObject.
//------------------------------------------------------------------------------

   String toStringActive ()
      {
      return "GlobalComponent";
      }

//------------------------------------------------------------------------------
// deactivate ().
//
// Override from class RetainedObject.
//------------------------------------------------------------------------------

   void deactivate ()
      {
      myGlobalComponentCOR.deactivate ();
      super               .deactivate ();
      }

//------------------------------------------------------------------------------
// setNPeriods (theValue)
//
// Setter for nPeriods.
//------------------------------------------------------------------------------

   void setNPeriods (int theValue)
      {
      assert (! getCoordinator ().hasPartsOpns ());

      myGlobalComponentCOR.setNPeriods (theValue);

      nPeriods = theValue;
      }

//------------------------------------------------------------------------------
// getNPeriods ()
//
// Accessor.
//------------------------------------------------------------------------------

   int getNPeriods ()
      {
      return nPeriods;
      }

//------------------------------------------------------------------------------
// getElemClassID ()
//
// Override from class Element.
//------------------------------------------------------------------------------

   ElemClassID getElemClassID ()
      {
      return ElemClassID.GLOBAL_COMPONENT;
      }

//------------------------------------------------------------------------------
// getElementCOR ().
//
// Override from class Element.
//------------------------------------------------------------------------------

   ElementCOR getElementCOR ()
      {
      return myGlobalComponentCOR;
      }

//------------------------------------------------------------------------------
// Accessors
//------------------------------------------------------------------------------

   GlobalComponentCOR getGlobalComponentCOR ()
      {
      return myGlobalComponentCOR;
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// setPipSeqInt (theTripleList)
//
// Internal implementation of setPipSeq (theTripleList).
//------------------------------------------------------------------------------

   private void setPipSeqInt (ArrayList <AllocTriple <Demand>> theTripleList)
      {
      DemandCOR theDemandCOR;
      int       theShipPer;
      double    incShipVol;

      getCoordinator ().
         checkDemandTriples (theTripleList, "theGlobalComponent.setPipSeq");

      getProblem ().getProblemCOR ().callSimpleWitFunc ("witClearPipSeq");

      for (AllocTriple <Demand> theTriple: theTripleList)
         {
         theDemandCOR = theTriple.getE      ().getDemandCOR ();
         theShipPer   = theTriple.getPeriod ();
         incShipVol   = theTriple.getVolume ();

         theDemandCOR.appendToPipSeq (theShipPer, incShipVol);
         }
      }

//------------------------------------------------------------------------------
// getPipSeqInt (theTripleList)
//
// Internal implementation of getPipSeq (theTripleList).
//------------------------------------------------------------------------------

   private void getPipSeqInt (ArrayList <AllocTriple <Demand>> theTripleList)
      {
      AllocTripleListCOR theAllocTripleListCOR;

      theAllocTripleListCOR =
         new AllocTripleListCOR (
            theTripleList,
            Demand.class,
            getCoordinator ());

      myGlobalComponentCOR.getPipSeq (theAllocTripleListCOR);

      theAllocTripleListCOR.deactivate ();
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// nPeriods
//
// Cached copy of the value stored in WIT.
//------------------------------------------------------------------------------

   private int nPeriods;

//------------------------------------------------------------------------------
// myGlobalComponentCOR.
//
// The GlobalComponentCOR that belongs to this GlobalComponent.
//------------------------------------------------------------------------------

   private final GlobalComponentCOR myGlobalComponentCOR;

//==============================================================================
}
@


1.2
log
@Enum name change: GLOBAL_ELEMENT --> GLOBAL_COMPONENT
@
text
@@


1.1
log
@Changed name of GlobalElement classes to GlobalComponent.
@
text
@d196 1
a196 1
      return ElemClassID.GLOBAL_ELEMENT;
@

