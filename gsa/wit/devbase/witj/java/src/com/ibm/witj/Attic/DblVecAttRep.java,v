head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2008.06.18.14.06.23;	author rjw;	state dead;
branches;
next	1.5;

1.5
date	2008.06.17.22.04.52;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.17.19.46.03;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.17.18.19.49;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.17.16.19.44;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.17.15.34.21;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Changed name of class       AttRep to       AttI.
Changed name of class DblVecAttRep to DblVecAttI.
@
text
@
//==============================================================================
// WIT-J Java Source File DblVecAttRep.java.
//
// Contains the declaration of class DblVecAttRep.
//==============================================================================

package com.ibm.witj;

//==============================================================================
// Class DblVecAttRep
//
// "Double Vector Attribute Representative"
// An AttRep representing an attribute of type vector of doubles.
//
// Class Hierarchy:
//
//    PublicObject
//       AttRep
//          DblVecAttRep
//==============================================================================

public final class DblVecAttRep extends AttRep
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// setValue (theDblArr)
//
// Sets the value of the represented attribute for the represented Component to
// theDblArr.
// theDblArr must be of length nPeriods.
//------------------------------------------------------------------------------

   public void setValue (double[] theDblArr)
      {
      checkVecSetValue (theDblArr.length);

      curAttCI ().setDblVec (curCompCI (), theDblArr);
      }

//------------------------------------------------------------------------------
// getValue (theDblArr)
//
// Returns the current value of the represented attribute for the represented
// Component.
//------------------------------------------------------------------------------

   public double[] getValue ()
      {
      double[] theDblArr;

      checkGetValue ();

      theDblArr = new double[nPeriods ()];

      curAttCI ().getDblVec (curCompCI (), theDblArr);

      return theDblArr;
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// Constructor.
//------------------------------------------------------------------------------

   DblVecAttRep (AttMgr theAttMgr)
      {
      super (theAttMgr);
      }

//------------------------------------------------------------------------------
// concClassName ().
//
// Override from class AttRep.
//------------------------------------------------------------------------------

   String concClassName ()
      {
      return "DblVecAttRep";
      }

//==============================================================================
}
@


1.5
log
@Attributes.
@
text
@@


1.4
log
@Attributes.
@
text
@d39 1
a39 17
      mustBeActive ("DblVecAttRep.setValue");

      if (! representsAtt ())
         abortWmsg (
              "   setValue (...) was called on a DblVecAttRep the does not "
            +    "currently represent an attribute.");

      if (theDblArr.length != nPeriods ())
         abortWmsg (
              "   DblVecAttRep.setValue (...) was called with an array\n"
            + "   whose length does not match nPeriods for the Problem.\n"
            + "\n"
            + "      Array Length: "
            +        theDblArr.length
            + "\n"
            + "      nPeriods:     "
            +        nPeriods ());
d55 1
a55 6
      mustBeActive ("DblVecAttRep.getValue");

      if (! representsAtt ())
         abortWmsg (
              "   getValue () was called on a DblVecAttRep the does not "
            +    "currently represent an attribute.");
@


1.3
log
@Attributes.
@
text
@d48 8
a55 8
              "   setValue (...) was called with an array who length does not "
            +    "match nPeriods.\n"
            +    "\n"
            + "   Array Length: "
            +    theDblArr.length
            +    "\n"
            + "   nPeriods:     "
            +    nPeriods ());
d71 7
@


1.2
log
@Attributes.
@
text
@d86 1
a86 1
   DblVecAttRep ()
d88 1
a88 1
      super ();
@


1.1
log
@Initial implementation of class DblVecAttRep.
@
text
@d60 18
@

