head	1.26;
access;
symbols;
locks; strict;
comment	@# @;


1.26
date	2011.05.02.18.32.23;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.04.15.19.12.40;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2011.03.30.16.20.49;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.03.29.23.38.56;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2009.10.07.22.43.38;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2009.10.06.16.38.56;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.10.05.23.20.12;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.10.01.23.00.54;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.09.29.19.09.24;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.09.25.22.42.43;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.06.05.15.08.23;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.05.29.17.59.39;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.05.05.20.17.06;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.04.16.21.08.39;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.04.15.19.56.49;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.03.05.19.09.18;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.02.27.15.41.53;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.02.24.17.44.57;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.02.20.21.18.32;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.02.20.20.58.43;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.02.03.16.51.23;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.31.00.56.27;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.29.22.06.39;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.23.19.32.24;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.23.18.46.54;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.21.21.43.24;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Reduced heading comments.
@
text
@
//==============================================================================
// WIT-J Java Source File CoordinatorCOR.java.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

//==============================================================================
// Class CoordinatorCOR
//
// "Coordinator C++ Object Representation"
// A Java representation of a C++ Coordinator.
//
// Class Hierarchy:
//
// PreservedInternal
//    CppObjRep
//       CoordinatorCOR
//==============================================================================

final class CoordinatorCOR extends CppObjRep
{
//==============================================================================
// Package-Internal Constructor
//==============================================================================

    CoordinatorCOR ()
      {
      acquireNewCppObject ();
      }

//==============================================================================
// Package-Internal Native Methods
//==============================================================================

   native void restoreAfterPurge ();
   native void clearData         ();

//==============================================================================
// Private Native Methods
//==============================================================================

//------------------------------------------------------------------------------
// acquireNewCppObject ()
// 
// This method is explained in the comment for class CppObjRep.
//------------------------------------------------------------------------------

   private native void acquireNewCppObject ();

//==============================================================================
}

@


1.25
log
@Java CppObjRep classes
@
text
@a3 2
//
// Contains the declaration of class CoordinatorCOR.
@


1.24
log
@Revised CppObjRep class ctors.
@
text
@d33 1
a33 1
      createCppObject ();
d48 1
a48 1
// createCppObject ()
d53 1
a53 1
   private native void createCppObject ();
@


1.23
log
@Replaced C++ class CORJOR with ComponentJOR.
@
text
@d31 1
a31 1
    CoordinatorCOR (Coordinator theCoord)
a32 2
      myCoordinator = theCoord;

a55 12
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myCoordinator
//
// The Coordinator for this CoordinatorCOR.
//------------------------------------------------------------------------------

   private final Coordinator myCoordinator;

//==============================================================================
@


1.22
log
@Removed synchronization of CoordinatorCOR ctor.
@
text
@a57 40
// Private C++ Call-Back Methods
//==============================================================================

//------------------------------------------------------------------------------
// makePart (thePartName, theCategoryIsMaterial)
//
// Constructs a new Part for the arguments.
//------------------------------------------------------------------------------

   private void makePart (String thePartName, boolean theCategoryIsMaterial)
      {
      Problem       theProblem;
      Part.Category theCategory;

      theProblem  = myCoordinator.getProblem ();

      theCategory =
         theCategoryIsMaterial?
            Part.Category.MATERIAL:
            Part.Category.CAPACITY;

      Part.newInstance (theProblem, thePartName, theCategory);
      }

//------------------------------------------------------------------------------
// makeOperation (theOperationName)
//
// Constructs a new Operation.
//------------------------------------------------------------------------------

   private void makeOperation (String theOperationName)
      {
      Problem theProblem;

      theProblem = myCoordinator.getProblem ();

      Operation.newInstance (theProblem, theOperationName);
      }

//==============================================================================
@


1.21
log
@Moved ctor synchronization logic from class Coordinator to class
CoordinatorCOR.
@
text
@d28 1
a28 1
// Package-Internal Methods
d31 1
a31 21
//------------------------------------------------------------------------------
// newInstance (theCoord)
//
// Constructs and returns a new CoordinatorCOR for theCoord.
//
// This method calls the CoordinatorCOR ctor according to the following
// synchronization logic:
//
// * The first call to this method blocks all subsequent calls to it, until its
//   call to the CoordinatorCOR ctor completes.
//
// * All subsequent calls to this method wait for the first call to the ctor to
//   complete and then call the ctor asynchronously.
//
// This synchronization logic is necessary, because the CoordinatorCOR ctor
// eventually calls the WIT-J/C++ Coordinator ctor, which puts WIT into
// multiThread mode the first time it is called, and this must be not be done
// asyncronously.
//------------------------------------------------------------------------------

   static CoordinatorCOR newInstance (Coordinator theCoord)
d33 1
a33 9
      synchronized (CoordinatorCOR.class)
         {
         if (! newInstanceCalled)
            {
            newInstanceCalled = true;

            return new CoordinatorCOR (theCoord);
            }
         }
d35 1
a35 1
      return new CoordinatorCOR (theCoord);
a45 13
// Private Constructor
//
// Called only by newInstance (...).
//==============================================================================

   private CoordinatorCOR (Coordinator theCoord)
      {
      myCoordinator = theCoord;

      createCppObject ();
      }

//==============================================================================
a101 8
// newInstanceCalled
//
// true, iff newInstance has been called at least once in this program process.
//------------------------------------------------------------------------------

   private static boolean newInstanceCalled = false;

//------------------------------------------------------------------------------
@


1.20
log
@Made calls to CoordinatorCOR ctor synchronized only with the first call.
@
text
@d28 1
a28 1
// Package-Internal Constructor
d31 21
a51 1
   CoordinatorCOR (Coordinator theCoord)
d53 9
a61 1
      myCoordinator = theCoord;
d63 1
a63 1
      createCppObject ();
d74 13
d143 8
@


1.19
log
@Fixed bug: The WIT multiThread attribute is now set to true.
Implemented the test for calls to readData from two Threads.
@
text
@d35 1
a35 4
      synchronized (createCppObjectLock)
         {
         createCppObject ();
         }
a101 9
// createCppObjectLock
//
// The synchronization lock for this Object is used to globally synchronize all
// calls to createCppObject.
//------------------------------------------------------------------------------

   private static final Object createCppObjectLock = new Object ();

//------------------------------------------------------------------------------
@


1.18
log
@Implemented class PreservedInternal and made several classes extend it
   instead of class PreservedObject.
@
text
@d35 4
a38 1
      createCppObject ();
d105 9
@


1.17
log
@Implemented thePreservedObject.getCoordinator ().
@
text
@d20 1
a20 1
// PreservedObject
d33 1
a33 1
      super (theCoord);
d72 1
a72 1
      theProblem  = getCoordinator ().getProblem ();
d92 1
a92 1
      theProblem = getCoordinator ().getProblem ();
d98 12
@


1.16
log
@Changed the name each native method that creates a C++ object to
   createCppObject.
@
text
@d33 1
a33 1
      myCoordinator = theCoord;
d72 1
a72 1
      theProblem  = myCoordinator.getProblem ();
d92 1
a92 1
      theProblem = myCoordinator.getProblem ();
a97 12
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myCoordinator
//
// The Coordinator that owns this CoordinatorCOR.
//------------------------------------------------------------------------------

   private final Coordinator myCoordinator;

//==============================================================================
@


1.15
log
@Changed name of clear methods to clearData.
@
text
@d35 1
a35 1
      createMyCppCoordinator ();
d50 1
a50 1
// createMyCppCoordinator ()
d52 1
a52 1
// Constructs a new C++ Coordinator and takes ownership of it
d55 1
a55 1
   private native void createMyCppCoordinator ();
@


1.14
log
@Changed name of Java class RetainedObject to PreservedObject.
@
text
@d43 1
a43 1
   native void clear             ();
@


1.13
log
@theProblem.clear ().
@
text
@d20 1
a20 1
// RetainedObject
@


1.12
log
@Added temporary debugging output statements to the implementation of
   createMyCppCoordinator.
@
text
@d43 1
@


1.11
log
@purgeData
@
text
@d49 1
a49 1
// createMyCppCoordinator (forStaticCoord)
@


1.10
log
@purgeData
@
text
@d42 1
a42 7
//------------------------------------------------------------------------------
// Calls witPurgeData and then updates the state of the C++ portion of WIT-J and
// some of the Java portion as well.
// Implementation in progress.
//------------------------------------------------------------------------------

   native void purgeData ();
@


1.9
log
@Part.Category by boolean.
@
text
@d39 12
@


1.8
log
@Minor revision.
@
text
@d55 1
a55 1
// makePart (thePartName, thePartCatName)
d60 1
a60 1
   private void makePart (String thePartName, String thePartCatName)
d63 1
a63 1
      Part.Category thePartCat;
d65 1
a65 1
      theProblem = myCoordinator.getProblem ();
d67 4
a70 1
      thePartCat = Part.Category.valueOf (thePartCatName);
d72 1
a72 1
      Part.newInstance (theProblem, thePartName, thePartCat);
@


1.7
log
@Removed Java class CppGateway.
@
text
@a38 9
// Package-Internal Accessors
//==============================================================================

   Coordinator getCoordinator ()
      {
      return myCoordinator;
      }

//==============================================================================
@


1.6
log
@Simplified the static instance logic.
@
text
@d60 37
@


1.5
log
@Part.Category as Alternative
@
text
@a28 3
//
// forStaticCoord: true, iff the CoordinatorCOR is to be belong to the static
//                 Coordinator.
d31 1
a31 1
   CoordinatorCOR (Coordinator theCoord, boolean forStaticCoord)
d35 1
a35 1
      createMyCppCoordinator (forStaticCoord);
a54 12
// forStaticCoord: true, iff the C++ Coordinator is to be belong to the static
//                 Coordinator.
//------------------------------------------------------------------------------

   private native void createMyCppCoordinator (boolean forStaticCoord);

//==============================================================================
// Private Methods to be called from C++.
//==============================================================================

//------------------------------------------------------------------------------
// makeOperation (theOpnName)
d57 1
a57 4
   private void makeOperation (String theOpnName)
      {
      Operation.newInstance (myCoordinator.getProblem (), theOpnName);
      }
@


1.4
log
@Implemented Java class CppGateway.
@
text
@d29 3
d34 1
a34 1
   CoordinatorCOR (Coordinator theCoord)
d38 1
a38 1
      createMyCppCoordinator ();
d55 1
a55 1
// createMyCppCoordinator ()
d58 2
d62 1
a62 1
   private native void createMyCppCoordinator ();
@


1.3
log
@Coordinator
@
text
@d33 12
a44 1
      createMyCppCoordinator (theCoord);
d48 1
a48 1
// Private Methods
d52 1
a52 1
// createMyCppCoordinator (theCoord)
d54 26
a79 1
// Constructs a new C++ Coordinator for theCoord and takes ownership of it
d82 1
a82 1
   private native void createMyCppCoordinator (Coordinator theCoord);
@


1.2
log
@Coordinator
@
text
@d31 1
a31 1
   CoordinatorCOR (Coordinator theCoordinator)
d33 1
a33 1
      createMyCppCoordinator (theCoordinator);
d41 1
a41 1
// createMyCppCoordinator (theCoordinator)
d43 1
a43 1
// Constructs a new C++ Coordinator for theCoordinator and takes ownership of it
d46 1
a46 1
   private native void createMyCppCoordinator (Coordinator theCoordinator);
@


1.1
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d31 1
a31 1
   CoordinatorCOR ()
d33 1
a33 1
      createMyCppCoordinator ();
d41 1
a41 1
// createMyCppCoordinator ()
d43 1
a43 1
// Constructs a new C++ Coordinator and takes ownership of it.
d46 1
a46 1
   private native void createMyCppCoordinator ();
@

