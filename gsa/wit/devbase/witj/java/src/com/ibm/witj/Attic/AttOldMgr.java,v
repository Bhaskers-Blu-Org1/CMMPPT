head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.07.10.21.44.25;	author rjw;	state dead;
branches;
next	1.1;

1.1
date	2008.07.09.15.45.39;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Attributes.
@
text
@
//==============================================================================
// WIT-J Java Source File AttOldMgr.java.
//
// Contains the declaration of class AttOldMgr.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.AttribOld.*;

import       java.util.*;

//==============================================================================
// Class AttOldMgr
//
// "Attribute Manager"
// Owns and provides access to the AttCIs for a problem.
//
// Class Hierarchy:
//
//    InternalObject
//       AttOldMgr
//==============================================================================

final class AttOldMgr extends InternalObject
{
//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------

   AttOldMgr (ProbCoord theProbCoord)
      {
      myProbCoord = theProbCoord;

      buildAttCIs ();
      }

//------------------------------------------------------------------------------
// shutDown ()
//
// Override from class InternalObject.
//------------------------------------------------------------------------------

   void shutDown ()
      {
      shutDownAttCIs ();

      myProbCoord = null;

      super.shutDown ();
      }

//------------------------------------------------------------------------------
// selfTest ()
//
// Verifies internal consistency of the attribute aspects of WIT-J.
//------------------------------------------------------------------------------

   void selfTest ()
      {
      AttCI      theAttCI;
      AccessMode theAccMode;
      String     theClassName;

      for (AppAtt theAppAtt: AppAtt.values ())
         {
         theAttCI = getAttCIFor (theAppAtt);

         if (theAttCI.isAnInputAtt ())
            theAccMode = AccessMode.INPUT;
         else
            theAccMode = AccessMode.OUTPUT;

         assert (theAccMode == theAppAtt.getAttribOld ().getAccessMode ());

         theClassName = theAppAtt.getCompClassID ().toString ();

         assert (theAttCI.appliesTo (theClassName));
         }
      }

//------------------------------------------------------------------------------
// getAttCIFor (theAppAtt)
//
// Returns the AttCI that owns the C++ Att corresponding to theAppAtt.
//------------------------------------------------------------------------------

   AttCI getAttCIFor (AppAtt theAppAtt)
      {
      return myAttCIMap.get (theAppAtt);
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// buildAttCIs ()
//
// Creates the AttCIs that will be owned by this AttOldMgr.
//------------------------------------------------------------------------------

   private void buildAttCIs ()
      {
      AttBldrCI theAttBldrCI;
      AttCI     theAttCI;

      AttribOld.initialize ();

      myAttCIMap   = new HashMap <AppAtt, AttCI> (AppAtt.nInstances (), 1.0f);

      theAttBldrCI = new AttBldrCI (myProbCoord.getProbCoordCI ());

      for (AppAtt theAppAtt: AppAtt.values ())
         {
         theAttCI = new AttCI (theAttBldrCI, theAppAtt.toString ());

         myAttCIMap.put (theAppAtt, theAttCI);
         }

      assert (theAttBldrCI.isEmpty ());

      theAttBldrCI.shutDown ();
      }

//------------------------------------------------------------------------------
// shutDownAttCIs ()
//
// Shuts down the AttCIs owned by this AttOldMgr.
// Removes the references to the AttCIs.
//------------------------------------------------------------------------------

   private void shutDownAttCIs ()
      {
      for (AppAtt theAppAtt: AppAtt.values ())
         {
         myAttCIMap.get (theAppAtt).shutDown ();
         }

      myAttCIMap = null;
      }

//==============================================================================
// Private Fields
//==============================================================================
 
//------------------------------------------------------------------------------
// myProbCoord
//
// The ProbCoord that owns this AttOldMgr.
//------------------------------------------------------------------------------

   private ProbCoord myProbCoord;

//------------------------------------------------------------------------------
// myAttCIMap
//
// myAttCIMap.get (theAppAtt) is the AttCI that owns the C++ Att corresponding
// to theAppAtt.
//------------------------------------------------------------------------------

   private HashMap <AppAtt, AttCI> myAttCIMap;

//------------------------------------------------------------------------------
}
@


1.1
log
@Attributes.
@
text
@@

