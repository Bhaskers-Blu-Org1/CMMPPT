head	1.115;
access;
symbols;
locks; strict;
comment	@# @;


1.115
date	2011.06.27.15.01.12;	author rjw;	state Exp;
branches;
next	1.114;

1.114
date	2011.05.04.22.15.41;	author rjw;	state Exp;
branches;
next	1.113;

1.113
date	2011.05.02.18.32.21;	author rjw;	state Exp;
branches;
next	1.112;

1.112
date	2011.04.08.20.56.39;	author rjw;	state Exp;
branches;
next	1.111;

1.111
date	2011.02.25.16.07.04;	author rjw;	state Exp;
branches;
next	1.110;

1.110
date	2009.09.29.20.43.56;	author rjw;	state Exp;
branches;
next	1.109;

1.109
date	2009.09.25.23.44.30;	author rjw;	state Exp;
branches;
next	1.108;

1.108
date	2009.09.25.22.42.42;	author rjw;	state Exp;
branches;
next	1.107;

1.107
date	2009.06.29.19.56.31;	author rjw;	state Exp;
branches;
next	1.106;

1.106
date	2009.06.17.20.27.58;	author rjw;	state Exp;
branches;
next	1.105;

1.105
date	2009.06.11.19.39.14;	author rjw;	state Exp;
branches;
next	1.104;

1.104
date	2009.06.11.18.59.57;	author rjw;	state Exp;
branches;
next	1.103;

1.103
date	2009.05.21.20.05.49;	author rjw;	state Exp;
branches;
next	1.102;

1.102
date	2009.05.20.18.47.32;	author rjw;	state Exp;
branches;
next	1.101;

1.101
date	2009.05.12.19.29.51;	author rjw;	state Exp;
branches;
next	1.100;

1.100
date	2009.05.12.15.57.57;	author rjw;	state Exp;
branches;
next	1.99;

1.99
date	2009.05.05.20.17.06;	author rjw;	state Exp;
branches;
next	1.98;

1.98
date	2009.05.05.17.56.47;	author rjw;	state Exp;
branches;
next	1.97;

1.97
date	2009.05.04.21.49.57;	author rjw;	state Exp;
branches;
next	1.96;

1.96
date	2009.04.17.15.38.24;	author rjw;	state Exp;
branches;
next	1.95;

1.95
date	2009.04.08.21.02.40;	author rjw;	state Exp;
branches;
next	1.94;

1.94
date	2009.04.08.19.18.01;	author rjw;	state Exp;
branches;
next	1.93;

1.93
date	2009.04.08.17.57.03;	author rjw;	state Exp;
branches;
next	1.92;

1.92
date	2009.04.07.22.13.29;	author rjw;	state Exp;
branches;
next	1.91;

1.91
date	2009.04.03.23.12.03;	author rjw;	state Exp;
branches;
next	1.90;

1.90
date	2009.04.03.22.33.51;	author rjw;	state Exp;
branches;
next	1.89;

1.89
date	2009.04.02.19.18.20;	author rjw;	state Exp;
branches;
next	1.88;

1.88
date	2009.04.01.16.34.50;	author rjw;	state Exp;
branches;
next	1.87;

1.87
date	2009.03.30.21.07.31;	author rjw;	state Exp;
branches;
next	1.86;

1.86
date	2009.03.30.16.16.13;	author rjw;	state Exp;
branches;
next	1.85;

1.85
date	2009.03.25.14.44.27;	author rjw;	state Exp;
branches;
next	1.84;

1.84
date	2009.03.23.21.51.40;	author rjw;	state Exp;
branches;
next	1.83;

1.83
date	2009.03.19.20.45.26;	author rjw;	state Exp;
branches;
next	1.82;

1.82
date	2009.03.13.19.32.21;	author rjw;	state Exp;
branches;
next	1.81;

1.81
date	2008.10.06.22.14.05;	author rjw;	state dead;
branches;
next	1.80;

1.80
date	2008.09.26.22.21.24;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2008.09.18.16.01.31;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2008.09.18.14.56.22;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2008.09.17.21.27.58;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2008.09.12.16.09.36;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2008.09.11.20.05.53;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2008.09.09.15.15.30;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2008.09.08.19.45.35;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2008.09.05.22.06.51;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2008.09.05.18.34.06;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2008.09.05.15.53.01;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2008.09.04.20.36.22;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2008.09.04.15.31.53;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2008.09.04.15.08.00;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2008.09.03.20.18.06;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2008.09.02.20.00.19;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2008.09.02.14.37.23;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2008.08.29.18.36.43;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2008.08.29.17.19.07;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2008.08.29.14.22.01;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2008.08.28.18.30.38;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2008.08.27.15.30.46;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2008.08.27.15.18.13;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2008.08.26.21.40.31;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2008.08.22.17.53.46;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2008.08.21.20.53.12;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2008.08.20.19.47.50;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2008.08.19.22.14.32;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2008.08.19.16.28.55;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2008.08.18.22.16.57;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2008.08.08.23.02.11;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2008.08.08.21.26.16;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2008.08.07.22.06.08;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2008.08.07.21.36.44;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2008.08.07.15.25.50;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2008.08.06.18.48.22;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2008.08.05.15.37.22;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2008.07.25.17.45.56;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2008.07.25.16.20.14;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2008.07.24.20.19.52;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2008.07.18.21.48.52;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2008.07.18.20.29.16;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2008.07.15.17.46.08;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.07.11.17.42.13;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.07.10.21.44.25;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2008.07.10.21.20.09;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.07.09.23.00.02;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.07.09.15.45.40;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.07.08.19.31.02;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.07.07.18.41.50;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.07.03.22.35.49;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.07.03.14.42.45;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.07.02.18.17.48;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.07.01.21.18.08;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.06.30.22.02.11;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.06.27.15.13.19;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.06.26.21.49.09;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.06.26.21.15.47;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.06.26.20.19.51;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.06.26.19.48.02;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.06.26.19.18.08;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.06.24.15.39.28;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.06.19.22.16.55;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.06.19.18.36.40;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.06.19.15.05.15;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.06.19.13.36.44;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.18.14.06.23;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.17.18.41.30;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.17.13.38.07;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.16.20.41.01;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.13.22.42.17;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.13.18.09.31;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.13.15.57.09;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.12.14.54.23;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.22.21.02.59;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.19.19.04.43;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.16.22.10.23;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.16.14.37.26;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.14.16.07.26;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.21.06.36;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.115
log
@Removed AppObject.
@
text
@
//==============================================================================
// WIT-J Java Source File Component.java.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

//==============================================================================
// Class Component
//
// Represents a component of a Problem, i.e., a "data object" such as an
// Operation or a Demand.
//
// Class Hierarchy:
//
// ThreadedObject
//    PreservedObject
//       Component
//          Problem
//          Part
//          Demand
//          Operation
//          BomEntry
//          Substitute
//          BopEntry
//==============================================================================

public abstract class Component extends PreservedObject
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// set (theAtt, theValue) methods
//
// Each of these methods sets the value of the WIT attribute represented by
// theAtt for this Component to theValue.
// If the attribute is a vector attribute, theValue must be an array of length
// nPeriods.
// Note that if the value type of the Attribute is a Wrapper class, the type of
// theValue is the corresponding primitive type.
//------------------------------------------------------------------------------

   public final void set (Attribute <Boolean> theAtt, boolean theValue)
      {
      try
         {
         checkForSet  (theAtt, Boolean.class);

         getAttImpFor (theAtt).setBool (this, theValue);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final void set (Attribute <Integer> theAtt, int theValue)
      {
      try
         {
         checkForSet  (theAtt, Integer.class);

         getAttImpFor (theAtt).setInt (this, theValue);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final void set (Attribute <Double> theAtt, double theValue)
      {
      try
         {
         checkForSet  (theAtt, Double.class);

         getAttImpFor (theAtt).setDbl (this, theValue);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final void set (Attribute <boolean[]> theAtt, boolean[] theValue)
      {
      try
         {
         checkForSet      (theAtt, boolean[].class);

         mustBeNonNull    (theValue, "theValue", "Component.set");

         checkArrayLength (theAtt, "set", theValue.length);

         getAttImpFor     (theAtt).setBoolVec (this, theValue);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final void set (Attribute <int[]> theAtt, int[] theValue)
      {
      try
         {
         checkForSet      (theAtt, int[].class);

         mustBeNonNull    (theValue, "theValue", "Component.set");

         checkArrayLength (theAtt, "set", theValue.length);

         getAttImpFor     (theAtt).setIntVec (this, theValue);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final void set (Attribute <double[]> theAtt, double[] theValue)
      {
      try
         {
         checkForSet      (theAtt, double[].class);

         mustBeNonNull    (theValue, "theValue", "Component.set");

         checkArrayLength (theAtt, "set", theValue.length);

         getAttImpFor     (theAtt).setDblVec (this, theValue);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final void set (
         Attribute <BoundSet> theAtt,
         double[]             hardLBArr,
         double[]             softLBArr,
         double[]             hardUBArr)
      {
      try
         {
         checkForSet           (theAtt, BoundSet.class);

         checkBoundArrayLength (theAtt, hardLBArr);
         checkBoundArrayLength (theAtt, softLBArr);
         checkBoundArrayLength (theAtt, hardUBArr);

         getComponentCOR ().setBoundSet (hardLBArr, softLBArr, hardUBArr);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final void set (Attribute <String> theAtt, String theValue)
      {
      try
         {
         checkForSet   (theAtt, String.class);

         mustBeNonNull (theValue, "theValue", "Component.set");

         getAttImpFor  (theAtt).setString (this, theValue);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// setVectorToScalar (theAtt, theValue) methods
//
// Each of these methods sets each element of the value of the WIT vector
// attribute represented by theAtt for this Component to theValue.
//------------------------------------------------------------------------------

   public final void setVectorToScalar (
         Attribute <boolean[]> theAtt,
         boolean               theValue)
      {
      try
         {
         checkForSetVectorToScalar (theAtt, boolean[].class);

         getAttImpFor              (theAtt).setBoolVecToScalar (this, theValue);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final void setVectorToScalar (Attribute <int[]> theAtt, int theValue)
      {
      try
         {
         checkForSetVectorToScalar (theAtt, int[].class);

         getAttImpFor              (theAtt).setIntVecToScalar (this, theValue);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final void setVectorToScalar (
         Attribute <double[]> theAtt,
         double               theValue)
      {
      try
         {
         checkForSetVectorToScalar (theAtt, double[].class);

         getAttImpFor              (theAtt).setDblVecToScalar (this, theValue);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// setBoundSetToScalars (theAtt, hardLBVal, softLBVal, hardUBVal)
//
// Sets the value of the BoundSet Attribute to the arguments in all periods.
//------------------------------------------------------------------------------

   public final void setBoundSetToScalars (
         Attribute <BoundSet> theAtt,
         double               hardLBVal,
         double               softLBVal,
         double               hardUBVal)
      {
      try
         {
         checkForSet (theAtt, BoundSet.class, "setBoundSetToScalars");

         getComponentCOR ().
            setBoundSetToScalars (hardLBVal, softLBVal, hardUBVal);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// get (theAtt) methods
//
// Each of these methods returns the current value of the WIT attribute
// represented by theAtt for this Component.
// Note that if the value type of the Attribute is a Wrapper class, the return
// type is the corresponding primitive type.
//------------------------------------------------------------------------------

   public final boolean get (Attribute <Boolean> theAtt)
      {
      try
         {
         checkForGet         (theAtt, Boolean.class);

         return getAttImpFor (theAtt).getBool (this);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final int get (Attribute <Integer> theAtt)
      {
      try
         {
         checkForGet         (theAtt, Integer.class);

         return getAttImpFor (theAtt).getInt (this);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final double get (Attribute <Double> theAtt)
      {
      try
         {
         checkForGet         (theAtt, Double.class);

         return getAttImpFor (theAtt).getDbl (this);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final boolean[] get (Attribute <boolean[]> theAtt)
      {
      try
         {
         boolean[] theBoolArr;

         checkForGet (theAtt, boolean[].class);

         theBoolArr = new boolean[getNPeriods ()];

         getAttImpFor (theAtt).getBoolVec (this, theBoolArr);

         return theBoolArr;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final int[] get (Attribute <int[]> theAtt)
      {
      try
         {
         int[] theIntArr;

         checkForGet (theAtt, int[].class);

         theIntArr = new int[getNPeriods ()];

         getAttImpFor (theAtt).getIntVec (this, theIntArr);

         return theIntArr;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final double[] get (Attribute <double[]> theAtt)
      {
      try
         {
         double[] theDblArr;

         checkForGet (theAtt, double[].class);

         theDblArr = new double[getNPeriods ()];

         getAttImpFor (theAtt).getDblVec (this, theDblArr);

         return theDblArr;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final String get (Attribute <String> theAtt)
      {
      try
         {
         checkForGet         (theAtt, String.class);

         return getAttImpFor (theAtt).getString (this);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// get (theAtt, theArray) methods
//
// In each of these methods, theArray must be an array of length nPeriods.
// The current value of the WIT vector attribute represented by theAtt for
// this Component is stored in theArray.
//------------------------------------------------------------------------------

   public final void get (Attribute <boolean[]> theAtt, boolean[] theArray)
      {
      try
         {
         checkForGet      (theAtt, boolean[].class);

         mustBeNonNull    (theArray, "theArray", "Component.get");

         checkArrayLength (theAtt, "get", theArray.length);

         getAttImpFor     (theAtt).getBoolVec (this, theArray);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final void get (Attribute <int[]> theAtt, int[] theArray)
      {
      try
         {
         checkForGet      (theAtt, int[].class);

         mustBeNonNull    (theArray, "theArray", "Component.get");

         checkArrayLength (theAtt, "get", theArray.length);

         getAttImpFor     (theAtt).getIntVec (this, theArray);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final void get (Attribute <double[]> theAtt, double[] theArray)
      {
      try
         {
         checkForGet      (theAtt, double[].class);

         mustBeNonNull    (theArray, "theArray", "Component.get");

         checkArrayLength (theAtt, "get", theArray.length);

         getAttImpFor     (theAtt).getDblVec (this, theArray);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final void get (
         Attribute <BoundSet> theAtt,
         double[]             hardLBArr,
         double[]             softLBArr,
         double[]             hardUBArr)
      {
      try
         {
         checkForGet (theAtt, BoundSet.class);

         mustBeNonNull    (hardLBArr, "hardLBArr", "Component.get");
         mustBeNonNull    (softLBArr, "softLBArr", "Component.get");
         mustBeNonNull    (hardUBArr, "hardUBArr", "Component.get");

         checkArrayLength (theAtt, "get", hardLBArr.length);
         checkArrayLength (theAtt, "get", softLBArr.length);
         checkArrayLength (theAtt, "get", hardUBArr.length);

         getComponentCOR ().getBoundSet (hardLBArr, softLBArr, hardUBArr);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// copyComponentData (Component origComp)
//
// Copies input data from origComp into this Component.
// This Component must not be an instance of class Problem.
// origComp must be an instance of the same Component class as this Component.
//------------------------------------------------------------------------------

   public void copyComponentData (Component origComp)
      {
      try
         {
         checkForCopyComp (origComp);

         if (origComp == this)
            return;

         getComponentCOR ().copyComponentData (origComp.getComponentCOR ());
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getProblem ()
//
// Returns the Problem for this Component.
//------------------------------------------------------------------------------

   public final Problem getProblem ()
      {
      try
         {
         mustBeActive ("Component.getProblem");

         return getCoordinator ().getProblem ();
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//==============================================================================
// Package-Internal Constructor
//
// Constructs a Component that will belong to theCoord.
//==============================================================================

   Component (Coordinator theCoord)
      {
      super (theCoord);
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// reqMatchingProblems (...)
//
// Throws a StatusQuoException, if theComp1 and this theComp2 belong to
// different Problems.
//------------------------------------------------------------------------------

   static final void reqMatchingProblems (
         Component theComp1,
         String    theArgName1,
         Component theComp2,
         String    theArgName2,
         String    theMethName)
      {
      mustBeActive (theComp1, theArgName1, theMethName);
      mustBeActive (theComp2, theArgName2, theMethName);

      if (theComp1.getCoordinator () != theComp2.getCoordinator ())
         throw
            new StatusQuoException (
               "   A method was called with two Component arguments that\n"
             + "   belong to different Problems where this is not allowed.\n"
             + "\n"
             + "      Method:                    " + theMethName + "\n"
             + "      First  Component Argument: " + theArgName1 + "\n"
             + "      First  Component ID:       " + theComp1 + "\n"
             + "      Second Component Argument: " + theArgName2 + "\n"
             + "      Second Component ID:       " + theComp2);
      }

//------------------------------------------------------------------------------
// restoreAfterPurge ()
//
// Updates the state of this Component as appropriate just after a call to
// witPurgeData.
//------------------------------------------------------------------------------

   void restoreAfterPurge ()
      {
      }

//------------------------------------------------------------------------------
// Casting methods
//------------------------------------------------------------------------------

   final Problem asProblem ()
      {
      return (Problem) this;
      }

   final Part asPart ()
      {
      return (Part) this;
      }

   final Demand asDemand ()
      {
      return (Demand) this;
      }

   final Operation asOperation ()
      {
      return (Operation) this;
      }

   final BomEntry asBomEntry ()
      {
      return (BomEntry) this;
      }

   final Substitute asSubstitute ()
      {
      return (Substitute) this;
      }

   final BopEntry asBopEntry ()
      {
      return (BopEntry) this;
      }

//------------------------------------------------------------------------------
// getCompClassID ()
//
// Returns the CompClassID for the Component class to which this Component
// belongs.
//------------------------------------------------------------------------------

   abstract CompClassID getCompClassID ();

//------------------------------------------------------------------------------
// getComponentCOR ().
//
// Returns the ComponentCOR that belongs to this Component.
//------------------------------------------------------------------------------

   abstract ComponentCOR getComponentCOR ();

//------------------------------------------------------------------------------
// Access wrappers.
//------------------------------------------------------------------------------

   int getNPeriods ()
      {
      return getCoordinator ().getProblem ().getNPeriods ();
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// checkForSet (theAtt, theValueType)
//
// Does error checking for a "set" method.
//------------------------------------------------------------------------------

   private <V> void checkForSet (
         Attribute <V> theAtt,
         Class <V>     theValueType)
      {
      checkForSet (theAtt, theValueType, "set");
      }

//------------------------------------------------------------------------------
// checkForSetVectorToScalar (theAtt, theValueType)
//
// Does error checking for a "setVectorToScalar" method.
//------------------------------------------------------------------------------

   private <V> void checkForSetVectorToScalar (
         Attribute <V> theAtt,
         Class <V>     theValueType)
      {
      checkForSet (theAtt, theValueType, "setVectorToScalar");
      }

//------------------------------------------------------------------------------
// checkForSet (theAtt, theValueType, methodName)
//
// Does error checking for a "set" or "setVectorToScalar" method.
//------------------------------------------------------------------------------

   private <V> void checkForSet (
         Attribute <V> theAtt,
         Class <V>     theValueType,
         String        methodName)
      {
      checkForSetGet (methodName, theAtt, theValueType);

      if (! theAtt.isModifiable ())
         throw
            new StatusQuoException (
                 "   Component." + methodName
               +    " was called with a non-modifiable Attribute.\n"
               + "\n"
               + "      Component: " + this   + "\n"
               + "      Attribute: " + theAtt);
      }

//------------------------------------------------------------------------------
// checkBoundArrayLength (theAtt, theBoundArr)
//
// Does checkArrayLength (...) for theBoundArr, if it is not null.
//------------------------------------------------------------------------------

   private void checkBoundArrayLength (
         Attribute <BoundSet> theAtt,
         double[]             theBoundArr)
      {
      if (theBoundArr != null)
         {
         checkArrayLength (theAtt, "set", theBoundArr.length);
         }
      }

//------------------------------------------------------------------------------
// checkArrayLength (theAtt, methodName, theLength)
//
// Verifies that theLength == nPeriods for setting/getting a vector attribute.
// methodName is the name of the calling method.
//------------------------------------------------------------------------------

   private void checkArrayLength (
         Attribute <?> theAtt,
         String        methodName,
         int           theLength)
      {
      if (theLength != getNPeriods ())
         throw
            new StatusQuoException (
               "   Component." + methodName + " was called with an array\n"
             + "   whose length does not match nPeriods for the Problem.\n"
             + "\n"
             + "      Component:    " + this           + "\n"
             + "      Attribute:    " + theAtt         + "\n"
             + "      Array Length: " + theLength      + "\n"
             + "      nPeriods:     " + getNPeriods ());
      }

//------------------------------------------------------------------------------
// checkForGet (theAtt, theValueType)
//
// Does error checking for a "get" function.
//------------------------------------------------------------------------------

   private <V> void checkForGet (
         Attribute <V> theAtt,
         Class <V>     theValueType)
      {
      checkForSetGet ("get", theAtt, theValueType);
      }

//------------------------------------------------------------------------------
// checkForSetGet (theAtt, theValueType)
//
// Does error checking for a "set" or "get" function.
//------------------------------------------------------------------------------

   private <V> void checkForSetGet (
         String        methodName,
         Attribute <V> theAtt,
         Class <V>     theValueType)
      {
      mustBeActive ("Component." + methodName);

      mustBeNonNull (theAtt, "theAtt", "Component." + methodName);

      if (theValueType != theAtt.getValueType ())
         {
         String realTypeName;
         String castTypeName;

         realTypeName = theAtt.getValueType ().getSimpleName ();
         castTypeName = theValueType          .getSimpleName ();

         throw
            new StatusQuoException (
               "   Component." + methodName + " was called for an "
             +    "Attribute <" + realTypeName + ">\n"
             + "   that has been cast into an "
             +    "Attribute <" + castTypeName + ">.\n"
             + "\n"
             + "      Component:  " + this   + "\n"
             + "      Attribute:  " + theAtt);
         }

      if (! theAtt.appliesTo (getCompClassID ()))
         throw
            new StatusQuoException (
               "   Component." + methodName
             +   " was called for an instance of a Component class\n"
             + "   to which the Attribute does not apply.\n"
             + "\n"
             + "      Component: " + this   + "\n"
             + "      Attribute: " + theAtt);
      }

//------------------------------------------------------------------------------
// checkForCopyComp (origComp)
//
// Does error checking for copyComponentData (theComp).
//------------------------------------------------------------------------------

   private void checkForCopyComp (Component origComp)
      {
      mustBeActive                       ("Component.copyComponentData");
      mustBeActive (origComp, "origComp", "Component.copyComponentData");

      if (getCompClassID () == CompClassID.PROBLEM)
         throw
            new StatusQuoException (
               "   Component.copyComponentData was called for an instance of "
                + "class Problem.");

      if (origComp.getCompClassID () != getCompClassID ())
         throw
            new StatusQuoException (
               "   Component.copyComponentData was called with an original\n"
             + "   Component and a duplicate Component that belong to\n"
             + "   different classes.\n"
             + "\n"
             + "       Original Component: " + origComp + "\n"
             + "      Duplicate Component: " + this);
      }

//------------------------------------------------------------------------------
// getAttImpFor (theAtt)
//
// Returns the AttImp corresponding to theAtt.
//------------------------------------------------------------------------------

   private AttImp getAttImpFor (Attribute <?> theAtt)
      {
      return getCoordinator ().getAttImpFor (theAtt);
      }

//==============================================================================
}
@


1.114
log
@setValue ==> set
getValue ==> get
@
text
@a577 42
//------------------------------------------------------------------------------
// getAppObject ()
//
// Accessor
//------------------------------------------------------------------------------

   public final Object getAppObject ()
      {
      try
         {
         mustBeActive ("Component.getAppObject");

         return myAppObject;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// setAppObject (theAppObject)
//
// Setter
//------------------------------------------------------------------------------

   public final void setAppObject (Object theAppObject)
      {
      try
         {
         mustBeActive ("Component.setAppObject");

         myAppObject = theAppObject;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

a889 14
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myAppObject
//
// The "application Object" for this Component.
// The Object (if any) that the application program has associated with this
// Component.
//------------------------------------------------------------------------------

   private Object myAppObject = null;

//==============================================================================
@


1.113
log
@Reduced heading comments.
@
text
@d37 1
a37 1
// setValue (theAtt, theValue) methods
d47 1
a47 1
   public final void setValue (Attribute <Boolean> theAtt, boolean theValue)
d51 1
a51 1
         checkForSetValue (theAtt, Boolean.class);
d53 1
a53 1
         getAttImpFor     (theAtt).setBool (this, theValue);
d64 1
a64 1
   public final void setValue (Attribute <Integer> theAtt, int theValue)
d68 1
a68 1
         checkForSetValue (theAtt, Integer.class);
d70 1
a70 1
         getAttImpFor     (theAtt).setInt (this, theValue);
d81 1
a81 1
   public final void setValue (Attribute <Double> theAtt, double theValue)
d85 1
a85 1
         checkForSetValue (theAtt, Double.class);
d87 1
a87 1
         getAttImpFor     (theAtt).setDbl (this, theValue);
d98 1
a98 1
   public final void setValue (Attribute <boolean[]> theAtt, boolean[] theValue)
d102 1
a102 1
         checkForSetValue (theAtt, boolean[].class);
d104 1
a104 1
         mustBeNonNull    (theValue, "theValue", "Component.setValue");
d106 1
a106 1
         checkArrayLength (theAtt, "setValue", theValue.length);
d119 1
a119 1
   public final void setValue (Attribute <int[]> theAtt, int[] theValue)
d123 1
a123 1
         checkForSetValue (theAtt, int[].class);
d125 1
a125 1
         mustBeNonNull    (theValue, "theValue", "Component.setValue");
d127 1
a127 1
         checkArrayLength (theAtt, "setValue", theValue.length);
d140 1
a140 1
   public final void setValue (Attribute <double[]> theAtt, double[] theValue)
d144 1
a144 1
         checkForSetValue (theAtt, double[].class);
d146 1
a146 1
         mustBeNonNull    (theValue, "theValue", "Component.setValue");
d148 1
a148 1
         checkArrayLength (theAtt, "setValue", theValue.length);
d161 1
a161 1
   public final void setValue (
d169 1
a169 1
         checkForSetValue      (theAtt, BoundSet.class);
d186 1
a186 1
   public final void setValue (Attribute <String> theAtt, String theValue)
d190 1
a190 1
         checkForSetValue (theAtt, String.class);
d192 1
a192 1
         mustBeNonNull    (theValue, "theValue", "Component.setValue");
d194 1
a194 1
         getAttImpFor     (theAtt).setString (this, theValue);
d290 1
a290 1
// getValue (theAtt) methods
d298 1
a298 1
   public final boolean getValue (Attribute <Boolean> theAtt)
d302 1
a302 1
         checkForGetValue    (theAtt, Boolean.class);
d315 1
a315 1
   public final int getValue (Attribute <Integer> theAtt)
d319 1
a319 1
         checkForGetValue    (theAtt, Integer.class);
d332 1
a332 1
   public final double getValue (Attribute <Double> theAtt)
d336 1
a336 1
         checkForGetValue    (theAtt, Double.class);
d349 1
a349 1
   public final boolean[] getValue (Attribute <boolean[]> theAtt)
d355 1
a355 1
         checkForGetValue (theAtt, boolean[].class);
d372 1
a372 1
   public final int[] getValue (Attribute <int[]> theAtt)
d378 1
a378 1
         checkForGetValue (theAtt, int[].class);
d395 1
a395 1
   public final double[] getValue (Attribute <double[]> theAtt)
d401 1
a401 1
         checkForGetValue (theAtt, double[].class);
d418 1
a418 1
   public final String getValue (Attribute <String> theAtt)
d422 1
a422 1
         checkForGetValue    (theAtt, String.class);
d434 1
a434 1
// getValue (theAtt, theArray) methods
d441 1
a441 1
   public final void getValue (Attribute <boolean[]> theAtt, boolean[] theArray)
d445 1
a445 1
         checkForGetValue (theAtt, boolean[].class);
d447 1
a447 1
         mustBeNonNull    (theArray, "theArray", "Component.getValue");
d449 1
a449 1
         checkArrayLength (theAtt, "getValue", theArray.length);
d462 1
a462 1
   public final void getValue (Attribute <int[]> theAtt, int[] theArray)
d466 1
a466 1
         checkForGetValue (theAtt, int[].class);
d468 1
a468 1
         mustBeNonNull    (theArray, "theArray", "Component.getValue");
d470 1
a470 1
         checkArrayLength (theAtt, "getValue", theArray.length);
d483 1
a483 1
   public final void getValue (Attribute <double[]> theAtt, double[] theArray)
d487 1
a487 1
         checkForGetValue (theAtt, double[].class);
d489 1
a489 1
         mustBeNonNull    (theArray, "theArray", "Component.getValue");
d491 1
a491 1
         checkArrayLength (theAtt, "getValue", theArray.length);
d504 1
a504 1
   public final void getValue (
d512 1
a512 1
         checkForGetValue (theAtt, BoundSet.class);
d514 7
a520 7
         mustBeNonNull    (hardLBArr, "hardLBArr", "Component.getValue");
         mustBeNonNull    (softLBArr, "softLBArr", "Component.getValue");
         mustBeNonNull    (hardUBArr, "hardUBArr", "Component.getValue");

         checkArrayLength (theAtt, "getValue", hardLBArr.length);
         checkArrayLength (theAtt, "getValue", softLBArr.length);
         checkArrayLength (theAtt, "getValue", hardUBArr.length);
d746 1
a746 1
// checkForSetValue (theAtt, theValueType)
d748 1
a748 1
// Does error checking for a "setValue" method.
d751 1
a751 1
   private <V> void checkForSetValue (
d755 1
a755 1
      checkForSet (theAtt, theValueType, "setValue");
d774 1
a774 1
// Does error checking for a "setValue" or "setVectorToScalar" method.
d782 1
a782 1
      checkForSetGetValue (methodName, theAtt, theValueType);
d806 1
a806 1
         checkArrayLength (theAtt, "setValue", theBoundArr.length);
d835 1
a835 1
// checkForGetValue (theAtt, theValueType)
d837 1
a837 1
// Does error checking for a "getValue" function.
d840 1
a840 1
   private <V> void checkForGetValue (
d844 1
a844 1
      checkForSetGetValue ("getValue", theAtt, theValueType);
d848 1
a848 1
// checkForSetGetValue (theAtt, theValueType)
d850 1
a850 1
// Does error checking for a "setValue" or "getValue" function.
d853 1
a853 1
   private <V> void checkForSetGetValue (
@


1.112
log
@copyComponentData
@
text
@a3 2
//
// Contains the declaration of class Component.
@


1.111
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@d534 26
d895 28
@


1.110
log
@Initial implementation of class ThreadedObject.
@
text
@d23 1
a23 1
//          GlobalAspect
d656 1
a656 1
   final GlobalAspect asGlobalAspect ()
d658 1
a658 1
      return (GlobalAspect) this;
d714 1
a714 1
      return getCoordinator ().getGlobalAspect ().getNPeriods ();
d861 2
a862 2
             +   " was called for an instance of an\n"
             + "   Component class to which the Attribute does not apply.\n"
@


1.109
log
@Moved myCoordinator to PreservedObject.
@
text
@d20 10
a29 9
// PreservedObject
//    Component
//       GlobalAspect
//       Part
//       Demand
//       Operation
//       BomEntry
//       Substitute
//       BopEntry
@


1.108
log
@Implemented thePreservedObject.getCoordinator ().
@
text
@d544 1
a544 1
         return myCoordinator.getProblem ();
d603 1
a603 1
      myCoordinator = theCoord;
d627 1
a627 1
      if (theComp1.myCoordinator != theComp2.myCoordinator)
d713 1
a713 12
      return myCoordinator.getGlobalAspect ().getNPeriods ();
      }

//------------------------------------------------------------------------------
// getCoordinator ()
//
// Override from class PreservedObject.
//------------------------------------------------------------------------------

   Coordinator getCoordinator ()
      {
      return myCoordinator;
a882 8
// myCoordinator.
//
// The Coordinator for this Component.
//------------------------------------------------------------------------------

   private final Coordinator myCoordinator;

//------------------------------------------------------------------------------
@


1.107
log
@Removed the "place element request" capability.
@
text
@d717 3
a719 1
// Accessors.
d722 1
a722 1
   final Coordinator getCoordinator ()
@


1.106
log
@Changed name of appData to appObject.
@
text
@a10 1
import static com.ibm.witj.BoundSet.BoundID.*;
a290 150
// placeVectorElementRequest (theAtt, thePeriod, theValue) methods
//
// Each of these methods places a request to set the value of theAtt for this
// Component in thePeriod to theValue.
// Verifies that 0 <= thePeriod < # periods.
//------------------------------------------------------------------------------

   public final void placeVectorElementRequest (
         Attribute <boolean[]> theAtt, 
         int                   thePeriod,
         boolean               theValue)
      {
      try
         {
         placeVectorElementRequest (
            theAtt,
            boolean[].class,
            thePeriod,
            theValue);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final void placeVectorElementRequest (
         Attribute <int[]> theAtt, 
         int               thePeriod,
         int               theValue)
      {
      try
         {
         placeVectorElementRequest (
            theAtt,
            int[].class,
            thePeriod,
            theValue);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final void placeVectorElementRequest (
         Attribute <double[]> theAtt, 
         int                  thePeriod,
         double               theValue)
      {
      try
         {
         placeVectorElementRequest (
            theAtt,
            double[].class,
            thePeriod,
            theValue);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// placeHardLBElementRequest (theAtt, thePeriod, theValue)
// placeSoftLBElementRequest (theAtt, thePeriod, theValue)
// placeHardUBElementRequest (theAtt, thePeriod, theValue)
//
// Each of these methods corresponds to one of the three bounds of a BoundSet
// Attribute. The method places a request to set the value of the bound of
// theAtt for this Component in thePeriod to theValue.
// Verifies that 0 <= thePeriod < # periods.
//------------------------------------------------------------------------------

   public final void placeHardLBElementRequest (
         Attribute <BoundSet> theAtt, 
         int                  thePeriod,
         double               theValue)
      {
      try
         {
         placeBoundElementRequest (
            HARD_LB,
            "HardLB",
            theAtt,
            thePeriod,
            theValue);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final void placeSoftLBElementRequest (
         Attribute <BoundSet> theAtt, 
         int                  thePeriod,
         double               theValue)
      {
      try
         {
         placeBoundElementRequest (
            SOFT_LB,
            "SoftLB",
            theAtt,
            thePeriod,
            theValue);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public final void placeHardUBElementRequest (
         Attribute <BoundSet> theAtt, 
         int                  thePeriod,
         double               theValue)
      {
      try
         {
         placeBoundElementRequest (
            HARD_UB,
            "HardUB",
            theAtt,
            thePeriod,
            theValue);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
a729 52
// placeVectorElementRequest (theAtt, theValueType, thePeriod, theValue)
//
// Places a request to set the value of theAtt for this Component in thePeriod
// to theValue.
// theValueType is to be the value type of theAtt.
// Verifies that 0 <= thePeriod < # periods.
//------------------------------------------------------------------------------

   private <V> void placeVectorElementRequest (
         Attribute <V> theAtt, 
         Class <V>     theValueType,
         int           thePeriod,
         Object        theValue)
      {
      checkForElementReq (
         "placeVectorElementRequest",
         theAtt,
         theValueType,
         thePeriod);

      getAttImpFor (theAtt).
         placeVectorElementRequest (this, thePeriod, theValue);
      }

//------------------------------------------------------------------------------
// placeBoundElementRequest (
//    theBoundID, theBoundName, theAtt, thePeriod, theValue)
//
// theBoundID, theBoundName, and theAtt identify a bound of a BoundSet
// Attribute. This method places a request to set the value of the bound of
// theAtt for this Component in thePeriod to theValue.
// Verifies that 0 <= thePeriod < # periods.
//------------------------------------------------------------------------------

   private void placeBoundElementRequest (
         BoundSet.BoundID     theBoundID,
         String               theBoundName,
         Attribute <BoundSet> theAtt, 
         int                  thePeriod,
         double               theValue)
      {
      checkForElementReq (
         "place" + theBoundName + "ElementRequest",
         theAtt,
         BoundSet.class,
         thePeriod);

      getAttImpFor (theAtt).
         placeBoundElementRequest (this, theBoundID, thePeriod, theValue);
      }

//------------------------------------------------------------------------------
a755 28
// checkForElementReq (methodName, theAtt, theValueType, thePeriod)
//
// Does error checking for a "place...ElementRequest" method.
//------------------------------------------------------------------------------

   private <V> void checkForElementReq (
         String        methodName,
         Attribute <V> theAtt,
         Class <V>     theValueType,
         int           thePeriod)
      {
      checkForSet (theAtt, theValueType, methodName);

      if ((thePeriod < 0) || (thePeriod >= getNPeriods ()))
         throw
            new StatusQuoException (
               "   Component." + methodName + " was called with an argument, \n"
             + "   \"thePeriod\", that falls outside the range:\n"
             + "\n"
             + "      0 <= thePeriod < nPeriods\n"
             + "\n"
             + "      Component: " + this      + "\n"
             + "      Attribute: " + theAtt    + "\n"
             + "      thePeriod: " + thePeriod + "\n"
             + "      nPeriods:  " + getNPeriods ());
      }

//------------------------------------------------------------------------------
@


1.105
log
@Moaved isModifiable from enum AttID to class Attribute.
@
text
@d705 1
a705 1
// getAppData ()
d710 1
a710 1
   public final Object getAppData ()
d714 1
a714 1
         mustBeActive ("Component.getAppData");
d716 1
a716 1
         return myAppData;
d726 1
a726 1
// setAppData (theAppData)
d731 1
a731 1
   public final void setAppData (Object theAppData)
d735 1
a735 1
         mustBeActive ("Component.setAppData");
d737 1
a737 1
         myAppData = theAppData;
d1131 1
a1131 1
// myAppData
d1133 1
a1133 1
// The "application data" for this Component.
d1138 1
a1138 1
   private Object myAppData = null;
@


1.104
log
@Moved appliesTo capability from enum AttID to class Attribute.
@
text
@d999 1
a999 1
      if (! theAtt.getAttID ().isModifiable ())
@


1.103
log
@Added displayNonDefGlobalBoolAtts (...) to UnitTester.
@
text
@d1096 1
a1096 1
      if (! theAtt.getAttID ().appliesTo (getCompClassID ()))
@


1.102
log
@Changed terminology:
   "Queueing element values" was replaced by
   "Placing element requests".
@
text
@d266 26
a441 26
// setBoundSetToScalars (theAtt, hardLBVal, softLBVal, hardUBVal)
//
// Sets the value of the BoundSet Attribute to the arguments in all periods.
//------------------------------------------------------------------------------

   public final void setBoundSetToScalars (
         Attribute <BoundSet> theAtt,
         double               hardLBVal,
         double               softLBVal,
         double               hardUBVal)
      {
      try
         {
         checkForSet (theAtt, BoundSet.class, "setBoundSetToScalars");

         getComponentCOR ().
            setBoundSetToScalars (hardLBVal, softLBVal, hardUBVal);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
@


1.101
log
@Replaced the throwExceptionFor method with getExeceptionToThrow.
@
text
@d266 1
a266 1
// queueVectorElement (theAtt, thePeriod, theValue) methods
d268 2
a269 2
// Each of these methods queues theValue as a value to which theAtt is to be set
// (later) for this Component in thePeriod.
d273 1
a273 1
   public final void queueVectorElement (
d280 5
a284 1
         queueVectorElement (theAtt, boolean[].class, thePeriod, theValue);
d295 1
a295 1
   public final void queueVectorElement (
d302 5
a306 1
         queueVectorElement (theAtt, int[].class, thePeriod, theValue);
d317 1
a317 1
   public final void queueVectorElement (
d324 5
a328 1
         queueVectorElement (theAtt, double[].class, thePeriod, theValue);
d338 3
a340 3
// queueHardLBElement (theAtt, thePeriod, theValue)
// queueSoftLBElement (theAtt, thePeriod, theValue)
// queueHardUBElement (theAtt, thePeriod, theValue)
d343 2
a344 2
// Attribute. The method queues theValue as a value to which the indicated
// bound of theAtt is to be set (later) for this Component in thePeriod.
d348 1
a348 1
   public final void queueHardLBElement (
d355 6
a360 1
         queueBoundElement (HARD_LB, "HardLB", theAtt, thePeriod, theValue);
d371 1
a371 1
   public final void queueSoftLBElement (
d378 6
a383 1
         queueBoundElement (SOFT_LB, "SoftLB", theAtt, thePeriod, theValue);
d394 1
a394 1
   public final void queueHardUBElement (
d401 6
a406 1
         queueBoundElement (HARD_UB, "HardUB", theAtt, thePeriod, theValue);
d881 1
a881 1
// queueVectorElement (theAtt, theValueType, thePeriod, theValue)
d883 2
a884 2
// Queues theValue as a value to which theAtt is to be set
// (later) for this Component in thePeriod.
d889 1
a889 1
   private <V> void queueVectorElement (
d895 2
a896 2
      checkForQueueElement (
         "queueVectorElement",
d901 2
a902 1
      getAttImpFor (theAtt).queueVectorElement (this, thePeriod, theValue);
d906 2
a907 1
// queueBoundElement (theBoundID, theBoundName, theAtt, thePeriod, theValue)
d910 2
a911 2
// Attribute. This method queues theValue as a value to which the bound is to be
// set (later) for this Component in thePeriod.
d915 1
a915 1
   private void queueBoundElement (
d922 2
a923 2
      checkForQueueElement (
         "queue" + theBoundName + "Element",
d929 1
a929 1
         queueBoundElement (this, theBoundID, thePeriod, theValue);
d959 1
a959 1
// checkForQueueElement (methodName, theAtt, theValueType, thePeriod)
d961 1
a961 1
// Does error checking for a "queue...Element" method.
d964 1
a964 1
   private <V> void checkForQueueElement (
@


1.100
log
@Changed name of Java class WitjException to GeneralException.
@
text
@d58 1
a58 1
      catch (Throwable theThrowable)
d60 1
a60 1
         throwExceptionFor (theThrowable);
d75 1
a75 1
      catch (Throwable theThrowable)
d77 1
a77 1
         throwExceptionFor (theThrowable);
d92 1
a92 1
      catch (Throwable theThrowable)
d94 1
a94 1
         throwExceptionFor (theThrowable);
d113 1
a113 1
      catch (Throwable theThrowable)
d115 1
a115 1
         throwExceptionFor (theThrowable);
d134 1
a134 1
      catch (Throwable theThrowable)
d136 1
a136 1
         throwExceptionFor (theThrowable);
d155 1
a155 1
      catch (Throwable theThrowable)
d157 1
a157 1
         throwExceptionFor (theThrowable);
d180 1
a180 1
      catch (Throwable theThrowable)
d182 1
a182 1
         throwExceptionFor (theThrowable);
d199 1
a199 1
      catch (Throwable theThrowable)
d201 1
a201 1
         throwExceptionFor (theThrowable);
d223 1
a223 1
      catch (Throwable theThrowable)
d225 1
a225 1
         throwExceptionFor (theThrowable);
d240 1
a240 1
      catch (Throwable theThrowable)
d242 1
a242 1
         throwExceptionFor (theThrowable);
d259 1
a259 1
      catch (Throwable theThrowable)
d261 1
a261 1
         throwExceptionFor (theThrowable);
d283 1
a283 1
      catch (Throwable theThrowable)
d285 1
a285 1
         throwExceptionFor (theThrowable);
d301 1
a301 1
      catch (Throwable theThrowable)
d303 1
a303 1
         throwExceptionFor (theThrowable);
d319 1
a319 1
      catch (Throwable theThrowable)
d321 1
a321 1
         throwExceptionFor (theThrowable);
d346 1
a346 1
      catch (Throwable theThrowable)
d348 1
a348 1
         throwExceptionFor (theThrowable);
d364 1
a364 1
      catch (Throwable theThrowable)
d366 1
a366 1
         throwExceptionFor (theThrowable);
d382 1
a382 1
      catch (Throwable theThrowable)
d384 1
a384 1
         throwExceptionFor (theThrowable);
d408 1
a408 1
      catch (Throwable theThrowable)
d410 1
a410 1
         throwExceptionFor (theThrowable);
d432 1
a432 1
      catch (Throwable theThrowable)
d434 1
a434 3
         throwExceptionFor (theThrowable);

         return false;
d449 1
a449 1
      catch (Throwable theThrowable)
d451 1
a451 3
         throwExceptionFor (theThrowable);

         return 0;
d466 1
a466 1
      catch (Throwable theThrowable)
d468 1
a468 3
         throwExceptionFor (theThrowable);

         return 0.0;
d489 1
a489 1
      catch (Throwable theThrowable)
d491 1
a491 3
         throwExceptionFor (theThrowable);

         return null;
d512 1
a512 1
      catch (Throwable theThrowable)
d514 1
a514 3
         throwExceptionFor (theThrowable);

         return null;
d535 1
a535 1
      catch (Throwable theThrowable)
d537 1
a537 3
         throwExceptionFor (theThrowable);

         return null;
d552 1
a552 1
      catch (Throwable theThrowable)
d554 1
a554 3
         throwExceptionFor (theThrowable);

         return null;
d579 1
a579 1
      catch (Throwable theThrowable)
d581 1
a581 1
         throwExceptionFor (theThrowable);
d600 1
a600 1
      catch (Throwable theThrowable)
d602 1
a602 1
         throwExceptionFor (theThrowable);
d621 1
a621 1
      catch (Throwable theThrowable)
d623 1
a623 1
         throwExceptionFor (theThrowable);
d650 1
a650 1
      catch (Throwable theThrowable)
d652 1
a652 1
         throwExceptionFor (theThrowable);
d671 1
a671 1
      catch (Throwable theThrowable)
d673 1
a673 3
         throwExceptionFor (theThrowable);

         return null;
d692 1
a692 1
      catch (Throwable theThrowable)
d694 1
a694 3
         throwExceptionFor (theThrowable);

         return null;
d713 1
a713 1
      catch (Throwable theThrowable)
d715 1
a715 1
         throwExceptionFor (theThrowable);
@


1.99
log
@Changed name of Java class RetainedObject to PreservedObject.
@
text
@d60 1
a60 1
         throw getWitjExceptionFor (theThrowable);
d77 1
a77 1
         throw getWitjExceptionFor (theThrowable);
d94 1
a94 1
         throw getWitjExceptionFor (theThrowable);
d115 1
a115 1
         throw getWitjExceptionFor (theThrowable);
d136 1
a136 1
         throw getWitjExceptionFor (theThrowable);
d157 1
a157 1
         throw getWitjExceptionFor (theThrowable);
d182 1
a182 1
         throw getWitjExceptionFor (theThrowable);
d201 1
a201 1
         throw getWitjExceptionFor (theThrowable);
d225 1
a225 1
         throw getWitjExceptionFor (theThrowable);
d242 1
a242 1
         throw getWitjExceptionFor (theThrowable);
d261 1
a261 1
         throw getWitjExceptionFor (theThrowable);
d285 1
a285 1
         throw getWitjExceptionFor (theThrowable);
d303 1
a303 1
         throw getWitjExceptionFor (theThrowable);
d321 1
a321 1
         throw getWitjExceptionFor (theThrowable);
d348 1
a348 1
         throw getWitjExceptionFor (theThrowable);
d366 1
a366 1
         throw getWitjExceptionFor (theThrowable);
d384 1
a384 1
         throw getWitjExceptionFor (theThrowable);
d410 1
a410 1
         throw getWitjExceptionFor (theThrowable);
d434 3
a436 1
         throw getWitjExceptionFor (theThrowable);
d453 3
a455 1
         throw getWitjExceptionFor (theThrowable);
d472 3
a474 1
         throw getWitjExceptionFor (theThrowable);
d497 3
a499 1
         throw getWitjExceptionFor (theThrowable);
d522 3
a524 1
         throw getWitjExceptionFor (theThrowable);
d547 3
a549 1
         throw getWitjExceptionFor (theThrowable);
d566 3
a568 1
         throw getWitjExceptionFor (theThrowable);
d595 1
a595 1
         throw getWitjExceptionFor (theThrowable);
d616 1
a616 1
         throw getWitjExceptionFor (theThrowable);
d637 1
a637 1
         throw getWitjExceptionFor (theThrowable);
d666 1
a666 1
         throw getWitjExceptionFor (theThrowable);
d687 3
a689 1
         throw getWitjExceptionFor (theThrowable);
d710 3
a712 1
         throw getWitjExceptionFor (theThrowable);
d733 1
a733 1
         throw getWitjExceptionFor (theThrowable);
@


1.98
log
@Made theAttribute.appliesTo (...) based on data on the Java side.
@
text
@d21 1
a21 1
// RetainedObject
d32 1
a32 1
public abstract class Component extends RetainedObject
@


1.97
log
@Moved the iAmModifiable field to AttID class.
@
text
@d1067 1
a1067 1
      if (! getAttImpFor (theAtt).appliesTo (getCompClassID ()))
@


1.96
log
@Argument checking.
@
text
@d970 1
a970 1
      if (! getAttImpFor (theAtt).isModifiable ())
@


1.95
log
@Added theComp.setBoundSetToScalars (...).
@
text
@d735 2
a736 24
// Throws a StatusQuoException, if theComp and this Component belong to
// different Problems.
//------------------------------------------------------------------------------

   final void argMustBelongToMyProblem (
         Component theComp,
         String    theArgName,
         String    theMethName)
      {
      argMustBeActive (theComp, theArgName, theMethName);

      if (theComp.myCoordinator != myCoordinator)
         throw
            new StatusQuoException (
               "   A method of was called on a Component where the Component\n"
             + "   and one the method arguments belong to different Problems."
             + "\n\n"
             + "      Method:         " + theMethName + "\n"
             + "      Component:      " + this        + "\n"
             + "      Argument:       " + theArgName  + "\n"
             + "      Argument Value: " + theComp);
      }

//------------------------------------------------------------------------------
d741 1
a741 1
   static final void argProblemsMustMatch (
d748 2
a749 2
      argMustBeActive (theComp1, theArgName1, theMethName);
      argMustBeActive (theComp2, theArgName2, theMethName);
@


1.94
log
@Made some methods final.
@
text
@d389 26
@


1.93
log
@Removed setBoundSet and getBoundSet methods from classes AttImp and
   CustAttgImp.
@
text
@d49 1
a49 1
   public void setValue (Attribute <Boolean> theAtt, boolean theValue)
d66 1
a66 1
   public void setValue (Attribute <Integer> theAtt, int theValue)
d83 1
a83 1
   public void setValue (Attribute <Double> theAtt, double theValue)
d100 1
a100 1
   public void setValue (Attribute <boolean[]> theAtt, boolean[] theValue)
d121 1
a121 1
   public void setValue (Attribute <int[]> theAtt, int[] theValue)
d142 1
a142 1
   public void setValue (Attribute <double[]> theAtt, double[] theValue)
d163 1
a163 1
   public void setValue (
d188 1
a188 1
   public void setValue (Attribute <String> theAtt, String theValue)
d212 1
a212 1
   public void setVectorToScalar (
d231 1
a231 1
   public void setVectorToScalar (Attribute <int[]> theAtt, int theValue)
d248 3
a250 1
   public void setVectorToScalar (Attribute <double[]> theAtt, double theValue)
d273 1
a273 1
   public void queueVectorElement (
d291 1
a291 1
   public void queueVectorElement (
d309 1
a309 1
   public void queueVectorElement (
d336 1
a336 1
   public void queueHardLBElement (
d354 1
a354 1
   public void queueSoftLBElement (
d372 1
a372 1
   public void queueHardUBElement (
d397 1
a397 1
   public boolean getValue (Attribute <Boolean> theAtt)
d414 1
a414 1
   public int getValue (Attribute <Integer> theAtt)
d431 1
a431 1
   public double getValue (Attribute <Double> theAtt)
d448 1
a448 1
   public boolean[] getValue (Attribute <boolean[]> theAtt)
d471 1
a471 1
   public int[] getValue (Attribute <int[]> theAtt)
d494 1
a494 1
   public double[] getValue (Attribute <double[]> theAtt)
d517 1
a517 1
   public String getValue (Attribute <String> theAtt)
d540 1
a540 1
   public void getValue (Attribute <boolean[]> theAtt, boolean[] theArray)
d561 1
a561 1
   public void getValue (Attribute <int[]> theAtt, int[] theArray)
d582 1
a582 1
   public void getValue (Attribute <double[]> theAtt, double[] theArray)
d603 1
a603 1
   public void getValue (
d636 1
a636 1
   public Problem getProblem ()
d657 1
a657 1
   public Object getAppData ()
d678 1
a678 1
   public void setAppData (Object theAppData)
d713 1
a713 1
   void argMustBelongToMyProblem (
d737 1
a737 1
   static void argProblemsMustMatch (
d840 1
a840 1
   Coordinator getCoordinator ()
@


1.92
log
@Setting BoundSet Attributes elements from a queue.
@
text
@d171 1
a171 1
         checkForSetValue    (theAtt, BoundSet.class);
d173 3
a175 2
         if (hardLBArr != null)
            checkArrayLength (theAtt, "setValue", hardLBArr.length);
d177 1
a177 12
         if (softLBArr != null)
            checkArrayLength (theAtt, "setValue", softLBArr.length);

         if (hardUBArr != null)
            checkArrayLength (theAtt, "setValue", hardUBArr.length);

         getAttImpFor        (theAtt).
            setBoundSet (
               this,
               hardLBArr,
               softLBArr,
               hardUBArr);
d619 1
a619 6
         getAttImpFor     (theAtt).
            getBoundSet (
               this,
               hardLBArr,
               softLBArr,
               hardUBArr);
d975 16
@


1.91
log
@Setting boolean vector elements from queue.
@
text
@d11 1
d274 1
a274 1
// queueElementValue (theAtt, thePeriod, theValue) methods
d281 1
a281 1
   public void queueElementValue (
d288 1
a288 3
         checkForQueueElementValue (theAtt, boolean[].class, thePeriod);

         getAttImpFor (theAtt).queueElementValue (this, thePeriod, theValue);
d299 1
a299 1
   public void queueElementValue (
d306 2
a307 1
         checkForQueueElementValue (theAtt, int[].class, thePeriod);
d309 16
a324 1
         getAttImpFor (theAtt).queueElementValue (this, thePeriod, theValue);
d334 9
d344 2
a345 2
   public void queueElementValue (
         Attribute <double[]> theAtt, 
d351 2
a352 1
         checkForQueueElementValue (theAtt, double[].class, thePeriod);
d354 34
a387 1
         getAttImpFor (theAtt).queueElementValue (this, thePeriod, theValue);
d863 50
d918 3
a920 1
   private void checkForSetValue (Attribute <?> theAtt, Class <?> theValueType)
d931 3
a933 3
   private void checkForSetVectorToScalar (
         Attribute <?> theAtt,
         Class <?>     theValueType)
d939 1
a939 1
// checkForQueueElementValue (theAtt, theValueType, thePeriod)
d941 1
a941 1
// Does error checking for a "queueElementValue" method.
d944 4
a947 3
   private void checkForQueueElementValue (
         Attribute <?> theAtt,
         Class <?>     theValueType,
d950 1
a950 1
      checkForSet (theAtt, theValueType, "queueElementValue");
d955 1
a955 1
               "   Component.queueElementValue was called with an argument, \n"
d958 1
a958 1
             + "   0 <= thePeriod < nPeriods\n"
d972 3
a974 3
   private void checkForSet (
         Attribute <?> theAtt,
         Class <?>     theValueType,
d1019 3
a1021 1
   private void checkForGetValue (Attribute <?> theAtt, Class <?> theValueType)
d1032 1
a1032 1
   private void checkForSetGetValue (
d1034 2
a1035 2
         Attribute <?> theAtt,
         Class <?>     theValueType)
@


1.90
log
@Setting integer vector elements from a queue.
@
text
@d281 20
@


1.89
log
@Added test for call to theComp.queueElementValue (...) with an out-of-range
   period argument.
@
text
@d273 1
a273 1
// queueElementValue (theAtt, thePeriod, theValue)
d275 2
a276 2
// Queues theValue as a value to which theAtt is to be set (later) for this
// Component in thePeriod.
d281 20
@


1.88
log
@Initial implementation of theComp.queueElementValue (...).
@
text
@d804 2
a805 2
               "   Component.queueElementValue was called with a\n"
             + "   \"thePeriod\" argument that falls outside the range:\n"
@


1.87
log
@Changed names of AttRep classes to AttImp.
@
text
@d273 26
d789 27
@


1.86
log
@Minor revision.
@
text
@d54 1
a54 1
         getAttRepFor     (theAtt).setBool (this, theValue);
d71 1
a71 1
         getAttRepFor     (theAtt).setInt (this, theValue);
d88 1
a88 1
         getAttRepFor     (theAtt).setDbl (this, theValue);
d109 1
a109 1
         getAttRepFor     (theAtt).setBoolVec (this, theValue);
d130 1
a130 1
         getAttRepFor     (theAtt).setIntVec (this, theValue);
d151 1
a151 1
         getAttRepFor     (theAtt).setDblVec (this, theValue);
d181 1
a181 1
         getAttRepFor        (theAtt).
d205 1
a205 1
         getAttRepFor     (theAtt).setString (this, theValue);
d229 1
a229 1
         getAttRepFor              (theAtt).setBoolVecToScalar (this, theValue);
d246 1
a246 1
         getAttRepFor              (theAtt).setIntVecToScalar (this, theValue);
d263 1
a263 1
         getAttRepFor              (theAtt).setDblVecToScalar (this, theValue);
d287 1
a287 1
         return getAttRepFor (theAtt).getBool (this);
d304 1
a304 1
         return getAttRepFor (theAtt).getInt (this);
d321 1
a321 1
         return getAttRepFor (theAtt).getDbl (this);
d342 1
a342 1
         getAttRepFor (theAtt).getBoolVec (this, theBoolArr);
d365 1
a365 1
         getAttRepFor (theAtt).getIntVec (this, theIntArr);
d388 1
a388 1
         getAttRepFor (theAtt).getDblVec (this, theDblArr);
d407 1
a407 1
         return getAttRepFor (theAtt).getString (this);
d434 1
a434 1
         getAttRepFor     (theAtt).getBoolVec (this, theArray);
d455 1
a455 1
         getAttRepFor     (theAtt).getIntVec (this, theArray);
d476 1
a476 1
         getAttRepFor     (theAtt).getDblVec (this, theArray);
d505 1
a505 1
         getAttRepFor     (theAtt).
d775 1
a775 1
      if (! getAttRepFor (theAtt).isModifiable ())
d854 1
a854 1
      if (! getAttRepFor (theAtt).appliesTo (getCompClassID ()))
d866 1
a866 1
// getAttRepFor (theAtt)
d868 1
a868 1
// Returns the AttRep corresponding to theAtt.
d871 1
a871 1
   private AttRep getAttRepFor (Attribute <?> theAtt)
d873 1
a873 1
      return getCoordinator ().getAttRepFor (theAtt);
@


1.85
log
@Changed name of method setValueToScalar to setVectorToScalar.
@
text
@d15 1
a15 1
// Represents an element of a Problem, i.e., a "data object" such as an
d227 1
a227 1
         checkForSetValueToScalar (theAtt, boolean[].class);
d229 1
a229 1
         getAttRepFor             (theAtt).setBoolVecToScalar (this, theValue);
d244 1
a244 1
         checkForSetValueToScalar (theAtt, int[].class);
d246 1
a246 1
         getAttRepFor             (theAtt).setIntVecToScalar (this, theValue);
d261 1
a261 1
         checkForSetValueToScalar (theAtt, double[].class);
d263 1
a263 1
         getAttRepFor             (theAtt).setDblVecToScalar (this, theValue);
d750 1
a750 1
// checkForSetValueToScalar (theAtt, theValueType)
d755 1
a755 1
   private void checkForSetValueToScalar (
@


1.84
log
@Added theComp.setValueToScalar (...) methods.
@
text
@d215 1
a215 1
// setValueToScalar (theAtt, theValue) methods
d221 3
a223 1
   public void setValueToScalar (Attribute <boolean[]> theAtt, boolean theValue)
d240 1
a240 1
   public void setValueToScalar (Attribute <int[]> theAtt, int theValue)
d257 1
a257 1
   public void setValueToScalar (Attribute <double[]> theAtt, double theValue)
d752 1
a752 1
// Does error checking for a "setValueToScalar" method.
d759 1
a759 1
      checkForSet (theAtt, theValueType, "setValueToScalar");
d765 1
a765 1
// Does error checking for a "setValue" or "setValueToScalar" method.
@


1.83
log
@Implemented theProblem.getInstances (theCompClass).
@
text
@d215 56
d737 1
a737 1
// checkForSetValue (theAtt)
d739 1
a739 1
// Does error checking for a "setValue" function.
d744 28
a771 1
      checkForSetGetValue ("setValue", theAtt, theValueType);
d776 2
a777 2
                 "   Component.setValue was called with a non-modifiable "
               +    "Attribute.\n"
@


1.82
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@a532 2

      myCoordinator.record (this);
@


1.81
log
@Changed name of Component to Entity.
@
text
@d15 1
a15 1
// Represents an component of a Problem, i.e., a "data object" such as an
d20 9
a28 9
//    RetainedObject
//       Component
//          GlobalComp
//          Part
//          Demand
//          Operation
//          BomEntry
//          Substitute
//          BopEntry
d38 1
a38 1
// set (theAttSpec, theValue) methods
d41 1
a41 1
// theAttSpec for this Component to theValue.
d44 1
a44 1
// Note that if the value type of the AttSpec is a Wrapper class, the type of
d48 1
a48 3
   public void set (
         AttSpec <Boolean> theAttSpec,
         boolean           theValue)
d50 6
a55 1
      checkForSet  (theAttSpec, Boolean.class);
d57 4
a60 1
      getAttRepFor (theAttSpec).setBool (this, theValue);
d65 1
a65 3
   public void set (
         AttSpec <Integer> theAttSpec,
         int               theValue)
d67 3
a69 1
      checkForSet  (theAttSpec, Integer.class);
d71 7
a77 1
      getAttRepFor (theAttSpec).setInt (this, theValue);
d82 1
a82 3
   public void set (
         AttSpec <Double> theAttSpec,
         double           theValue)
d84 3
a86 1
      checkForSet  (theAttSpec, Double.class);
d88 7
a94 1
      getAttRepFor (theAttSpec).setDbl (this, theValue);
d99 1
a99 3
   public void set (
         AttSpec <boolean[]> theAttSpec,
         boolean[]           theValue)
d101 5
a105 1
      checkForSet      (theAttSpec, boolean[].class);
d107 1
a107 1
      mustBeNonNull    (theValue, "theValue", "Component.set");
d109 2
a110 1
      checkArrayLength (theAttSpec, "set", theValue.length);
d112 4
a115 1
      getAttRepFor     (theAttSpec).setBoolVec (this, theValue);
d120 1
a120 3
   public void set (
         AttSpec <int[]> theAttSpec,
         int[]           theValue)
d122 3
a124 1
      checkForSet      (theAttSpec, int[].class);
d126 1
a126 1
      mustBeNonNull    (theValue, "theValue", "Component.set");
d128 4
a131 1
      checkArrayLength (theAttSpec, "set", theValue.length);
d133 4
a136 1
      getAttRepFor     (theAttSpec).setIntVec (this, theValue);
d141 1
a141 3
   public void set (
         AttSpec <double[]> theAttSpec,
         double[]           theValue)
d143 3
a145 1
      checkForSet      (theAttSpec, double[].class);
d147 1
a147 1
      mustBeNonNull    (theValue, "theValue", "Component.set");
d149 1
a149 1
      checkArrayLength (theAttSpec, "set", theValue.length);
d151 7
a157 1
      getAttRepFor     (theAttSpec).setDblVec (this, theValue);
d162 5
a166 5
   public void set (
         AttSpec <BoundSet> theAttSpec,
         double[]           hardLBArr,
         double[]           softLBArr,
         double[]           hardUBArr)
d168 3
a170 1
      checkForSet         (theAttSpec, BoundSet.class);
d172 2
a173 2
      if (hardLBArr != null)
         checkArrayLength (theAttSpec, "set", hardLBArr.length);
d175 2
a176 2
      if (softLBArr != null)
         checkArrayLength (theAttSpec, "set", softLBArr.length);
d178 10
a187 2
      if (hardUBArr != null)
         checkArrayLength (theAttSpec, "set", hardUBArr.length);
d189 4
a192 6
      getAttRepFor        (theAttSpec).
         setBoundSet (
            this,
            hardLBArr,
            softLBArr,
            hardUBArr);
d197 1
a197 3
   public void set (
         AttSpec <String> theAttSpec,
         String           theValue)
d199 5
a203 1
      checkForSet   (theAttSpec, String.class);
d205 2
a206 1
      mustBeNonNull (theValue, "theValue", "Component.set");
d208 4
a211 1
      getAttRepFor  (theAttSpec).setString (this, theValue);
d215 1
a215 1
// get (theAttSpec) methods
d218 2
a219 2
// represented by theAttSpec for this Component.
// Note that if the value type of the AttSpec is a Wrapper class, the return
d223 1
a223 1
   public boolean get (AttSpec <Boolean> theAttSpec)
d225 3
a227 1
      checkForGet         (theAttSpec, Boolean.class);
d229 7
a235 1
      return getAttRepFor (theAttSpec).getBool (this);
d240 1
a240 1
   public int get (AttSpec <Integer> theAttSpec)
d242 3
a244 1
      checkForGet         (theAttSpec, Integer.class);
d246 7
a252 1
      return getAttRepFor (theAttSpec).getInt (this);
d257 1
a257 1
   public double get (AttSpec <Double> theAttSpec)
d259 6
a264 1
      checkForGet         (theAttSpec, Double.class);
d266 4
a269 1
      return getAttRepFor (theAttSpec).getDbl (this);
d274 1
a274 1
   public boolean[] get (AttSpec <boolean[]> theAttSpec)
d276 5
a280 1
      boolean[] theBoolArr;
d282 1
a282 1
      theBoolArr = new boolean[getNPeriods ()];
d284 1
a284 1
      checkForGet  (theAttSpec, boolean[].class);
d286 2
a287 1
      getAttRepFor (theAttSpec).getBoolVec (this, theBoolArr);
d289 4
a292 1
      return theBoolArr;
d297 1
a297 1
   public int[] get (AttSpec <int[]> theAttSpec)
d299 3
a301 1
      int[] theIntArr;
d303 1
a303 1
      theIntArr = new int[getNPeriods ()];
d305 1
a305 1
      checkForGet  (theAttSpec, int[].class);
d307 1
a307 1
      getAttRepFor (theAttSpec).getIntVec (this, theIntArr);
d309 7
a315 1
      return theIntArr;
d320 1
a320 1
   public double[] get (AttSpec <double[]> theAttSpec)
d322 3
a324 1
      double[] theDblArr;
d326 1
a326 1
      theDblArr = new double[getNPeriods ()];
d328 1
a328 1
      checkForGet  (theAttSpec, double[].class);
d330 1
a330 1
      getAttRepFor (theAttSpec).getDblVec (this, theDblArr);
d332 7
a338 1
      return theDblArr;
d343 1
a343 1
   public String get (AttSpec <String> theAttSpec)
d345 3
a347 1
      checkForGet         (theAttSpec, String.class);
d349 2
a350 2
      return getAttRepFor (theAttSpec).getString (this);
      }
d352 4
a355 7
//------------------------------------------------------------------------------

   public Part.Category get (AttSpec <Part.Category> theAttSpec)
      {
      checkForGet         (theAttSpec, Part.Category.class);

      return getAttRepFor (theAttSpec).getPartCat (this);
d359 1
a359 1
// get (theAttSpec, theArray) methods
d362 1
a362 1
// The current value of the WIT vector attribute represented by theAttSpec for
d366 1
a366 3
   public void get (
         AttSpec <boolean[]> theAttSpec,
         boolean[]           theArray)
d368 3
a370 1
      checkForGet      (theAttSpec, boolean[].class);
d372 1
a372 1
      mustBeNonNull    (theArray, "theArray", "Component.get");
d374 1
a374 1
      checkArrayLength (theAttSpec, "get", theArray.length);
d376 7
a382 1
      getAttRepFor     (theAttSpec).getBoolVec (this, theArray);
d387 1
a387 3
   public void get (
         AttSpec <int[]> theAttSpec,
         int[]           theArray)
d389 3
a391 1
      checkForGet      (theAttSpec, int[].class);
d393 1
a393 1
      mustBeNonNull    (theArray, "theArray", "Component.get");
d395 1
a395 1
      checkArrayLength (theAttSpec, "get", theArray.length);
d397 7
a403 1
      getAttRepFor     (theAttSpec).getIntVec (this, theArray);
d408 1
a408 3
   public void get (
         AttSpec <double[]> theAttSpec,
         double[]           theArray)
d410 3
a412 1
      checkForGet      (theAttSpec, double[].class);
d414 1
a414 1
      mustBeNonNull    (theArray, "theArray", "Component.get");
d416 1
a416 1
      checkArrayLength (theAttSpec, "get", theArray.length);
d418 7
a424 1
      getAttRepFor     (theAttSpec).getDblVec (this, theArray);
d429 5
a433 5
   public void get (
         AttSpec <BoundSet> theAttSpec,
         double[]           hardLBArr,
         double[]           softLBArr,
         double[]           hardUBArr)
d435 3
a437 1
      checkForGet      (theAttSpec, BoundSet.class);
d439 15
a453 3
      mustBeNonNull    (hardLBArr, "hardLBArr", "Component.get");
      mustBeNonNull    (softLBArr, "softLBArr", "Component.get");
      mustBeNonNull    (hardUBArr, "hardUBArr", "Component.get");
d455 4
a458 10
      checkArrayLength (theAttSpec, "get", hardLBArr.length);
      checkArrayLength (theAttSpec, "get", softLBArr.length);
      checkArrayLength (theAttSpec, "get", hardUBArr.length);

      getAttRepFor     (theAttSpec).
         getBoundSet (
            this,
            hardLBArr,
            softLBArr,
            hardUBArr);
d469 3
a471 1
      mustBeActive ("Problem.getProblem");
d473 49
a521 1
      return myCompMgr.getProblem ();
d527 1
a527 1
// Constructs a Component that will belong to theCompMgr.
d530 1
a530 1
   Component (CompMgr theCompMgr)
d532 1
a532 1
      myCompMgr = theCompMgr;
d534 1
a534 1
      theCompMgr.record (this);
d542 2
a543 1
// Aborts, if theComp ans this belong to different Problems.
d553 49
a601 9
      if (theComp.myCompMgr != myCompMgr)
         abortWmsg (
            "   A method of was called on a Component where the Component and\n"
          + "   one the arguments in the call belong to different Problems.\n"
          + "\n"
          + "      Method:         " + theMethName + "\n"
          + "      Component:      " + this        + "\n"
          + "      Argument:       " + theArgName  + "\n"
          + "      Argument Value: " + theComp);
d608 1
a608 1
   final GlobalComp asGlobalComp ()
d610 1
a610 1
      return (GlobalComp) this;
d628 4
a631 3
//------------------------------------------------------------------------------
// Access wrappers.
//------------------------------------------------------------------------------
d633 1
a633 1
   int getNPeriods ()
d635 1
a635 1
      return myCompMgr.getGlobalComp ().getNPeriods ();
d638 1
a638 5
//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   CompMgr getCompMgr ()
d640 1
a640 1
      return myCompMgr;
d653 1
a653 1
// getCompCOR ().
d658 1
a658 1
   abstract ComponentCOR getCompCOR ();
d660 8
a667 3
//==============================================================================
// Private Methods
//==============================================================================
d670 1
a670 3
// checkForSet (theAttSpec)
//
// Does error checking for a "set" function.
d673 1
a673 1
   private void checkForSet (AttSpec <?> theAttSpec, Class <?> theValueType)
d675 2
a676 1
      checkForSetGet ("set", theAttSpec, theValueType);
d678 3
a680 9
      if (getAttRepFor (theAttSpec).getAccessStyle () == AccessStyle.OUTPUT)
         {
         abortWmsg (
              "   Component.set (...) was called on an output attribute.\n"
            + "\n"
            + "      Component: " + this + "\n"
            + "      AttSpec:   " + theAttSpec);
         }
      }
d683 1
a683 1
// checkArrayLength (theAttSpec, theLength)
d685 1
a685 1
// Verifies that theLength == nPeriods for setting a vector attribute.
d688 1
a688 3
   private void checkArrayLength (
         AttSpec <?> theAttSpec,
         int         theLength)
d690 10
a699 9
      if (theLength != getNPeriods ())
         abortWmsg (
              "   Component.set (...) was called with an array\n"
            + "   whose length does not match nPeriods for the Problem.\n"
            + "\n"
            + "      Component:    " + this       + "\n"
            + "      AttSpec:      " + theAttSpec + "\n"
            + "      Array Length: " + theLength  + "\n"
            + "      nPeriods:     " + getNPeriods ());
d703 1
a703 1
// checkArrayLength (theAttSpec, methodName, theLength)
d710 3
a712 3
         AttSpec <?> theAttSpec,
         String      methodName,
         int         theLength)
d715 9
a723 8
         abortWmsg (
              "   Component." + methodName + " (...) was called with an array\n"
            + "   whose length does not match nPeriods for the Problem.\n"
            + "\n"
            + "      Component:    " + this       + "\n"
            + "      AttSpec:      " + theAttSpec + "\n"
            + "      Array Length: " + theLength  + "\n"
            + "      nPeriods:     " + getNPeriods ());
d727 1
a727 1
// checkForGet (theAttSpec, theValueType)
d729 1
a729 1
// Does error checking for a "get" function.
d732 1
a732 1
   private void checkForGet (AttSpec <?> theAttSpec, Class <?> theValueType)
d734 1
a734 1
      checkForSetGet ("get", theAttSpec, theValueType);
d738 1
a738 1
// checkForSetGet (theAttSpec, theValueType)
d740 1
a740 1
// Does error checking for a "set" or "get" function.
d743 4
a746 4
   private void checkForSetGet (
         String      methodName,
         AttSpec <?> theAttSpec,
         Class <?>   theValueType)
d750 1
a750 1
      mustBeNonNull (theAttSpec, "theAttSpec", "Component." + methodName);
d752 1
a752 1
      if (theValueType != theAttSpec.getValueType ())
d754 2
a755 1
         String theTypeName;
d757 2
a758 1
         theTypeName = theValueType.getSimpleName ();
d760 9
a768 10
         abortWmsg (
              "   Component." + methodName + "(...) was called for an "
            +    "AttSpec <" +  theTypeName + ">\n"
            + "   whose actual value type is not " + theTypeName + ".\n"
            + "   (This can be done with casting.)\n"
            + "\n"
            + "      Component:  " + this              + "\n"
            + "      AttSpec:    " + theAttSpec        + "\n"
            + "      Value Type: "
            +        theAttSpec.getValueType ().getSimpleName ());
d771 9
a779 8
      if (! getAttRepFor (theAttSpec).appliesTo (this))
         abortWmsg (
              "   Component." + methodName + "(...) "
            +    "was called for an instance of a\n"
            + "   Component class to which the attribute does not apply.\n"
            + "\n"
            + "      Component: " + this + "\n"
            + "      AttSpec:   " + theAttSpec);
d783 1
a783 1
// getAttRepFor (theAttSpec)
d785 1
a785 1
// Returns the AttRep corresponding to theAttSpec.
d788 1
a788 1
   private AttRep getAttRepFor (AttSpec <?> theAttSpec)
d790 1
a790 1
      return getProblem ().getAttRepMgr ().getAttRepFor (theAttSpec);
d798 9
a806 1
// myCompMgr.
d808 3
a810 1
// The CompMgr for this Component.
d813 1
a813 1
   private final CompMgr myCompMgr;
@


1.80
log
@Numerous class name changes.
@
text
@@


1.79
log
@Implemented thePart.getDemands ().
@
text
@d442 1
a442 1
// getCompCI ().
d444 1
a444 1
// Returns the ComponentCI that belongs to this Component.
d447 1
a447 1
   abstract ComponentCI getCompCI ();
@


1.78
log
@Implemented theComp.getProblem ().
@
text
@d361 1
a361 1
      theCompMgr.add (this);
@


1.77
log
@Minor revision.
@
text
@d338 13
a422 5
   Problem getProblem ()
      {
      return myCompMgr.getProblem ();
      }

@


1.76
log
@Active state / shutDown method.
@
text
@d341 1
a341 1
// Constructs an Component to be owned by the Problem for theCompMgr.
@


1.75
log
@Added verification that arguments belong to the same Problem.
@
text
@d364 1
a364 1
      argMustBeUnreleased (theComp, theArgName, theMethName);
d531 1
a531 1
      mustBeUnreleased ("Component." + methodName);
@


1.74
log
@Removed Java class ProbCoord.
@
text
@d356 22
@


1.73
log
@Initial implementation of the Session classes.
@
text
@d388 1
a388 1
   ProbCoord getProbCoord ()
d390 1
a390 1
      return myCompMgr.getProbCoord ();
d549 1
a549 1
      return getProbCoord ().getAttRepMgr ().getAttRepFor (theAttSpec);
@


1.72
log
@Terminology change.
@
text
@d339 1
a339 5
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// Constructor.
d342 1
a342 1
//------------------------------------------------------------------------------
d351 4
@


1.71
log
@BoundSet attributes.
@
text
@d20 1
a20 1
//    VitalObject
d31 1
a31 1
public abstract class Component extends VitalObject
d509 1
a509 1
      mustBeActive ("Component." + methodName);
@


1.70
log
@Added checking for null arguments.
@
text
@d132 1
a132 1
      checkForSet      (theAttSpec, BoundSet.class);
d134 2
a135 7
      mustBeNonNull    (hardLBArr, "hardLBArr", "Component.set");
      mustBeNonNull    (softLBArr, "softLBArr", "Component.set");
      mustBeNonNull    (hardUBArr, "hardUBArr", "Component.set");

      checkArrayLength (theAttSpec, "set", hardLBArr.length);
      checkArrayLength (theAttSpec, "set", softLBArr.length);
      checkArrayLength (theAttSpec, "set", hardUBArr.length);
d137 7
a143 1
      getAttRepFor     (theAttSpec).
@


1.69
log
@Added attribute "execBounds".
@
text
@d87 2
d102 2
d117 2
d134 4
d156 1
a156 1
      checkForSet  (theAttSpec, String.class);
d158 1
d160 1
a160 1
      getAttRepFor (theAttSpec).setString (this, theValue);
d274 2
d289 2
d304 2
d321 4
d510 2
@


1.68
log
@Attributes.
@
text
@d121 22
d294 22
@


1.67
log
@Attributes.
@
text
@d455 1
@


1.66
log
@Replaced class PublicObject with class VitalObject.
@
text
@d44 2
d52 1
a52 1
      checkForSet  (theAttSpec, boolean.class);
d63 1
a63 1
      checkForSet  (theAttSpec, int.class);
d74 1
a74 1
      checkForSet  (theAttSpec, double.class);
d135 2
d141 1
a141 1
      checkForGet         (theAttSpec, boolean.class);
d150 1
a150 1
      checkForGet         (theAttSpec, int.class);
d159 1
a159 1
      checkForGet         (theAttSpec, double.class);
d446 5
d452 3
a454 4
              "   Component." + methodName + "(...) "
            +    "was called for an instance of\n"
            + "   generic class AttSpec <RefType>, where RefType\n"
            + "   does not match the value type of the attribute.\n"
d456 2
a457 4
            + "      Component:  " + this                          + "\n"
            + "      AttSpec:    " + theAttSpec                    + "\n"
            + "      RefType:    "
            +        getRefTypeFor (theValueType).getSimpleName () + "\n"
d459 2
a460 1
            +        theAttSpec.getValueType ()  .getSimpleName ());
a472 22
// getRefTypeFor (Class <?> theValueType)
//
// Returns the reference type for an AttSpec whose value type if given by
// theValueType.
//------------------------------------------------------------------------------

   private static Class <?> getRefTypeFor (Class <?> theValueType)
      {
      if      (theValueType == boolean.class)
         return                Boolean.class;

      else if (theValueType == int    .class)
         return                Integer.class;

      else if (theValueType == double .class)
         return                Double .class;

      else
         return                theValueType;
      }

//------------------------------------------------------------------------------
@


1.65
log
@Added value type error checking for attributes.
@
text
@d20 1
a20 1
//    PublicObject
d31 1
a31 1
public abstract class Component extends PublicObject
@


1.64
log
@"partCategory" attribute.
@
text
@d50 1
a50 1
      checkForSet  (theAttSpec);
d61 1
a61 1
      checkForSet  (theAttSpec);
d72 1
a72 1
      checkForSet  (theAttSpec);
d83 2
a84 1
      checkForSet      (theAttSpec);
d96 2
a97 1
      checkForSet      (theAttSpec);
d109 2
a110 1
      checkForSet      (theAttSpec);
d122 2
a123 1
      checkForSet  (theAttSpec);
d137 1
a137 1
      checkForGet         (theAttSpec);
d146 1
a146 1
      checkForGet         (theAttSpec);
d155 1
a155 1
      checkForGet         (theAttSpec);
d168 1
a168 1
      checkForGet  (theAttSpec);
d183 1
a183 1
      checkForGet  (theAttSpec);
d198 1
a198 1
      checkForGet  (theAttSpec);
d209 1
a209 1
      checkForGet         (theAttSpec);
d218 1
a218 1
      checkForGet         (theAttSpec);
d235 2
a236 1
      checkForGet      (theAttSpec);
d248 2
a249 1
      checkForGet      (theAttSpec);
d261 2
a262 1
      checkForGet      (theAttSpec);
d359 1
a359 1
   private void checkForSet (AttSpec <?> theAttSpec)
d361 1
a361 3
      AttRep theAttRep;

      theAttRep = getAttRepFor (theAttSpec);
d363 1
a363 3
      mustBeActive ("Component.set");

      if (theAttRep.getAccessStyle () == AccessStyle.OUTPUT)
a370 8

      if (! theAttRep.appliesTo (this))
         abortWmsg (
              "   Component.set (...) was called for an instance of a\n"
            + "   Component class to which the attribute does not apply.\n"
            + "\n"
            + "      Component: " + this + "\n"
            + "      AttSpec:   " + theAttSpec);
d418 1
a418 1
// checkForGet (theAttSpec)
d423 1
a423 1
   private void checkForGet (AttSpec <?> theAttSpec)
d425 29
a453 1
      mustBeActive ("Component.get");
d457 2
a458 1
              "   Component.get (...) was called for an instance of a\n"
d466 22
@


1.63
log
@"demandName" attribute.
@
text
@a79 11
         AttSpec <String> theAttSpec,
         String           theValue)
      {
      checkForSet  (theAttSpec);

      getAttRepFor (theAttSpec).setString (this, theValue);
      }

//------------------------------------------------------------------------------

   public void set (
d114 11
a157 9
   public String get (AttSpec <String> theAttSpec)
      {
      checkForGet         (theAttSpec);

      return getAttRepFor (theAttSpec).getString (this);
      }

//------------------------------------------------------------------------------

d202 18
@


1.62
log
@"operationName" attribute.
@
text
@d283 5
@


1.61
log
@"partName" attribute.
@
text
@d283 5
@


1.60
log
@Name change: Global --> GlobalComp.
@
text
@d278 5
@


1.59
log
@Attributes.
@
text
@d22 1
a22 1
//          Global
d273 1
a273 1
   final Global asGlobal ()
d275 1
a275 1
      return (Global) this;
d284 1
a284 1
      return myCompMgr.getGlobal ().getNPeriods ();
@


1.58
log
@Attributes.
@
text
@d273 1
a273 1
   final Global asaGlobal ()
@


1.57
log
@Added "title" attribute (set only).
@
text
@d270 9
@


1.56
log
@Removed enum AttID.
@
text
@d80 11
d158 9
@


1.55
log
@Attributes.
@
text
@a231 2
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

d396 1
a396 5
      AttID theAttID;

      theAttID = theAttSpec.getAttID ();

      return getProbCoord ().getAttRepMgr ().getAttRepFor (theAttID);
@


1.54
log
@Added enum AccessStyle.
@
text
@a10 1
import static com.ibm.witj.AttSpec.*;
d232 2
@


1.53
log
@Revised the shut-down model.
@
text
@d308 1
a308 1
      if (! theAttRep.isAnInputAtt ())
@


1.52
log
@Replaced use of raw AttSpec with AttSpec <?>.
@
text
@a250 13
// shutDown ().
//
// Override from class PublicObject.
//------------------------------------------------------------------------------

   void shutDown ()
      {
      myCompMgr = null;

      super.shutDown ();
      }

//------------------------------------------------------------------------------
d414 1
a414 1
   private CompMgr myCompMgr;
@


1.51
log
@Implemented Utility class.
@
text
@d313 1
a313 1
   private void checkForSet (AttSpec theAttSpec)
d346 2
a347 2
         AttSpec theAttSpec,
         int     theLength)
d368 3
a370 3
         AttSpec theAttSpec,
         String  methodName,
         int     theLength)
d389 1
a389 1
   private void checkForGet (AttSpec theAttSpec)
d408 1
a408 1
   private AttRep getAttRepFor (AttSpec theAttSpec)
@


1.50
log
@AttReps.
@
text
@d10 1
@


1.49
log
@AttReps.
@
text
@a313 1
      AttID  theAttID;
a315 2
      theAttID  = theAttSpec.getAttID ();

d320 1
a320 1
      if (! getProbCoord ().getAttCIMgr ().isAnInputAtt (theAttID))
@


1.48
log
@AttReps.
@
text
@d314 4
a317 1
      AttID theAttID;
d319 1
a319 1
      theAttID = theAttSpec.getAttID ();
d332 1
a332 1
      if (getAttRepFor (theAttSpec) == null)
d395 1
a395 1
      if (getAttRepFor (theAttSpec) == null)
d407 1
a407 2
// Returns the AttRep corresponding to theAttSpec and the class of this
// Component, or null if none exists.
d416 1
a416 4
      return
         getProbCoord ().
            getAttRepMgr ().
               getAttRepFor (theAttID, getCompClassID ());
@


1.47
log
@AttReps.
@
text
@d329 1
a329 1
      if (getAttCIFor (theAttSpec) == null)
d392 1
a392 1
      if (getAttCIFor (theAttSpec) == null)
a401 19
// getAttCIFor (theAttSpec)
//
// Returns the AttCI that owns the C++ Att corresponding to theAttSpec and the
// Component class of this Component.
//------------------------------------------------------------------------------

   private AttCI getAttCIFor (AttSpec theAttSpec)
      {
      AttID theAttID;

      theAttID = theAttSpec.getAttID ();

      return
         getProbCoord ().
            getAttCIMgr ().
               getAttCIFor (theAttID, getCompClassID ());
      }

//------------------------------------------------------------------------------
@


1.46
log
@Attributes.
@
text
@d50 1
a50 1
      checkForSet (theAttSpec);
d52 1
a52 1
      getAttCIFor (theAttSpec).setBool (getCompCI (), theValue);
d61 1
a61 1
      checkForSet (theAttSpec);
d63 1
a63 1
      getAttCIFor (theAttSpec).setInt (getCompCI (), theValue);
d72 1
a72 1
      checkForSet (theAttSpec);
d74 1
a74 1
      getAttCIFor (theAttSpec).setDbl (getCompCI (), theValue);
d86 1
a86 1
      getAttCIFor      (theAttSpec).setBoolVec (getCompCI (), theValue);
d98 1
a98 1
      getAttCIFor      (theAttSpec).setIntVec (getCompCI (), theValue);
d110 1
a110 1
      getAttCIFor      (theAttSpec).setDblVec (getCompCI (), theValue);
d122 1
a122 1
      checkForGet        (theAttSpec);
d124 1
a124 1
      return getAttCIFor (theAttSpec).getBool (getCompCI ());
d131 1
a131 1
      checkForGet        (theAttSpec);
d133 1
a133 1
      return getAttCIFor (theAttSpec).getInt (getCompCI ());
d140 1
a140 1
      checkForGet        (theAttSpec);
d142 1
a142 1
      return getAttCIFor (theAttSpec).getDbl (getCompCI ());
d153 1
a153 1
      checkForGet (theAttSpec);
d155 1
a155 1
      getAttCIFor (theAttSpec).getBoolVec (getCompCI (), theBoolArr);
d168 1
a168 1
      checkForGet (theAttSpec);
d170 1
a170 1
      getAttCIFor (theAttSpec).getIntVec (getCompCI (), theIntArr);
d183 1
a183 1
      checkForGet (theAttSpec);
d185 1
a185 1
      getAttCIFor (theAttSpec).getDblVec (getCompCI (), theDblArr);
d194 2
a195 2
// The current value of the WIT vector attribute represented by theAttSpec for this
// Component is stored in theArray.
d205 1
a205 1
      getAttCIFor      (theAttSpec).getBoolVec (getCompCI (), theArray);
d217 1
a217 1
      getAttCIFor      (theAttSpec).getIntVec (getCompCI (), theArray);
d229 1
a229 1
      getAttCIFor      (theAttSpec).getDblVec (getCompCI (), theArray);
d420 19
@


1.45
log
@Classes Global and GlobalCI.
@
text
@d10 1
a10 1
import static com.ibm.witj.Attribute.*;
d38 1
a38 1
// set (theAtt, theValue) methods
d41 1
a41 1
// theAtt for this Component to theValue.
d47 2
a48 2
         Attribute <Boolean> theAtt,
         boolean             theValue)
d50 1
a50 1
      checkForSet (theAtt);
d52 1
a52 1
      getAttCIFor (theAtt).setBool (getCompCI (), theValue);
d58 2
a59 2
         Attribute <Integer> theAtt,
         int                 theValue)
d61 1
a61 1
      checkForSet (theAtt);
d63 1
a63 1
      getAttCIFor (theAtt).setInt (getCompCI (), theValue);
d69 2
a70 2
         Attribute <Double> theAtt,
         double             theValue)
d72 1
a72 1
      checkForSet (theAtt);
d74 1
a74 1
      getAttCIFor (theAtt).setDbl (getCompCI (), theValue);
d80 2
a81 2
         Attribute <boolean[]> theAtt,
         boolean[]             theValue)
d83 2
a84 2
      checkForSet      (theAtt);
      checkArrayLength (theAtt, "set", theValue.length);
d86 1
a86 1
      getAttCIFor      (theAtt).setBoolVec (getCompCI (), theValue);
d92 2
a93 2
         Attribute <int[]> theAtt,
         int[]             theValue)
d95 2
a96 2
      checkForSet      (theAtt);
      checkArrayLength (theAtt, "set", theValue.length);
d98 1
a98 1
      getAttCIFor      (theAtt).setIntVec (getCompCI (), theValue);
d104 2
a105 2
         Attribute <double[]> theAtt,
         double[]             theValue)
d107 2
a108 2
      checkForSet      (theAtt);
      checkArrayLength (theAtt, "set", theValue.length);
d110 1
a110 1
      getAttCIFor      (theAtt).setDblVec (getCompCI (), theValue);
d114 1
a114 1
// get (theAtt) methods
d117 1
a117 1
// represented by theAtt for this Component.
d120 1
a120 1
   public boolean get (Attribute <Boolean> theAtt)
d122 1
a122 1
      checkForGet        (theAtt);
d124 1
a124 1
      return getAttCIFor (theAtt).getBool (getCompCI ());
d129 1
a129 1
   public int get (Attribute <Integer> theAtt)
d131 1
a131 1
      checkForGet        (theAtt);
d133 1
a133 1
      return getAttCIFor (theAtt).getInt (getCompCI ());
d138 1
a138 1
   public double get (Attribute <Double> theAtt)
d140 1
a140 1
      checkForGet        (theAtt);
d142 1
a142 1
      return getAttCIFor (theAtt).getDbl (getCompCI ());
d147 1
a147 1
   public boolean[] get (Attribute <boolean[]> theAtt)
d153 1
a153 1
      checkForGet (theAtt);
d155 1
a155 1
      getAttCIFor (theAtt).getBoolVec (getCompCI (), theBoolArr);
d162 1
a162 1
   public int[] get (Attribute <int[]> theAtt)
d168 1
a168 1
      checkForGet (theAtt);
d170 1
a170 1
      getAttCIFor (theAtt).getIntVec (getCompCI (), theIntArr);
d177 1
a177 1
   public double[] get (Attribute <double[]> theAtt)
d183 1
a183 1
      checkForGet (theAtt);
d185 1
a185 1
      getAttCIFor (theAtt).getDblVec (getCompCI (), theDblArr);
d191 1
a191 1
// get (theAtt, theArray) methods
d194 1
a194 1
// The current value of the WIT vector attribute represented by theAtt for this
d199 2
a200 2
         Attribute <boolean[]> theAtt,
         boolean[]             theArray)
d202 2
a203 2
      checkForGet      (theAtt);
      checkArrayLength (theAtt, "get", theArray.length);
d205 1
a205 1
      getAttCIFor      (theAtt).getBoolVec (getCompCI (), theArray);
d211 2
a212 2
         Attribute <int[]> theAtt,
         int[]             theArray)
d214 2
a215 2
      checkForGet      (theAtt);
      checkArrayLength (theAtt, "get", theArray.length);
d217 1
a217 1
      getAttCIFor      (theAtt).getIntVec (getCompCI (), theArray);
d223 2
a224 2
         Attribute <double[]> theAtt,
         double[]             theArray)
d226 2
a227 2
      checkForGet      (theAtt);
      checkArrayLength (theAtt, "get", theArray.length);
d229 1
a229 1
      getAttCIFor      (theAtt).getDblVec (getCompCI (), theArray);
d307 1
a307 1
// checkForSet (theAtt)
d312 1
a312 1
   private void checkForSet (Attribute theAtt)
d314 3
a316 1
      AttCI theAttCI;
d320 1
a320 1
      if (! getProbCoord ().getAttCIMgr ().isAnInputAtt (theAtt.getAttID ()))
d326 1
a326 1
            + "      Attribute: " + theAtt);
d329 1
a329 1
      if (getAttCIFor (theAtt) == null)
d335 1
a335 1
            + "      Attribute: " + theAtt);
d339 1
a339 1
// checkArrayLength (theAtt, theLength)
d345 2
a346 2
         Attribute theAtt,
         int       theLength)
d353 3
a355 3
            + "      Component:    " + this      + "\n"
            + "      Attribute:    " + theAtt    + "\n"
            + "      Array Length: " + theLength + "\n"
d360 1
a360 1
// checkArrayLength (theAtt, methodName, theLength)
d367 3
a369 3
         Attribute theAtt,
         String    methodName,
         int       theLength)
d376 3
a378 3
            + "      Component:    " + this      + "\n"
            + "      Attribute:    " + theAtt    + "\n"
            + "      Array Length: " + theLength + "\n"
d383 1
a383 1
// checkForGet (theAtt)
d388 1
a388 1
   private void checkForGet (Attribute theAtt)
d392 1
a392 1
      if (getAttCIFor (theAtt) == null)
d398 1
a398 1
            + "      Attribute: " + theAtt);
d402 1
a402 1
// getAttCIFor (theAtt)
d404 1
a404 1
// Returns the AttCI that owns the C++ Att corresponding to theAtt and the
d408 1
a408 1
   private AttCI getAttCIFor (Attribute theAtt)
d412 1
a412 1
      theAttID = theAtt.getAttID ();
@


1.44
log
@Attributes.
@
text
@d22 1
a22 1
//          GlobalComp
d268 1
a268 1
      return myCompMgr.getGlobalComp ().getNPeriods ();
@


1.43
log
@Attributes.
@
text
@a41 2
// theAtt is an instance of a subclass of Attribute that determines the
// type of the attribute and the type of the second argument.
d47 2
a48 2
         BooleanAtt theAtt,
         boolean    theValue)
d58 2
a59 2
         IntegerAtt theAtt,
         int        theValue)
d69 2
a70 2
         DoubleAtt theAtt,
         double    theValue)
d80 2
a81 2
         BooleanVectorAtt theAtt,
         boolean[]        theValue)
d92 2
a93 2
         IntegerVectorAtt theAtt,
         int[]            theValue)
d104 2
a105 2
         DoubleVectorAtt theAtt,
         double[]        theValue)
d120 1
a120 1
   public boolean get (BooleanAtt theAtt)
d129 1
a129 1
   public int get (IntegerAtt theAtt)
d138 1
a138 1
   public double get (DoubleAtt theAtt)
d147 1
a147 1
   public boolean[] get (BooleanVectorAtt theAtt)
d162 1
a162 1
   public int[] get (IntegerVectorAtt theAtt)
d177 1
a177 1
   public double[] get (DoubleVectorAtt theAtt)
d199 2
a200 2
         BooleanVectorAtt theAtt,
         boolean[]        theArray)
d211 2
a212 2
         IntegerVectorAtt theAtt,
         int[]            theArray)
d223 2
a224 2
         DoubleVectorAtt theAtt,
         double[]        theArray)
@


1.42
log
@Attributes.
@
text
@d49 2
a50 2
         BooleanScalarAtt theAtt,
         boolean          theValue)
d60 2
a61 2
         IntegerScalarAtt theAtt,
         int              theValue)
d71 2
a72 2
         DoubleScalarAtt theAtt,
         double          theValue)
d122 1
a122 1
   public boolean get (BooleanScalarAtt theAtt)
d131 1
a131 1
   public int get (IntegerScalarAtt theAtt)
d140 1
a140 1
   public double get (DoubleScalarAtt theAtt)
@


1.41
log
@Attributes.
@
text
@d8 3
a10 1
package com.ibm.witj;
d49 2
a50 2
         Attribute.BooleanScalar theAtt,
         boolean                 theValue)
d60 2
a61 2
         Attribute.IntegerScalar theAtt,
         int                     theValue)
d71 2
a72 2
         Attribute.DoubleScalar theAtt,
         double                 theValue)
d82 2
a83 2
         Attribute.BooleanVector theAtt,
         boolean[]               theValue)
d94 2
a95 2
         Attribute.IntegerVector theAtt,
         int[]                   theValue)
d106 2
a107 2
         Attribute.DoubleVector theAtt,
         double[]               theValue)
d122 1
a122 1
   public boolean get (Attribute.BooleanScalar theAtt)
d131 1
a131 1
   public int get (Attribute.IntegerScalar theAtt)
d140 1
a140 1
   public double get (Attribute.DoubleScalar theAtt)
d149 1
a149 1
   public boolean[] get (Attribute.BooleanVector theAtt)
d164 1
a164 1
   public int[] get (Attribute.IntegerVector theAtt)
d179 1
a179 1
   public double[] get (Attribute.DoubleVector theAtt)
d201 2
a202 2
         Attribute.BooleanVector theAtt,
         boolean[]               theArray)
d213 2
a214 2
         Attribute.IntegerVector theAtt,
         int[]                   theArray)
d225 2
a226 2
         Attribute.DoubleVector theAtt,
         double[]               theArray)
@


1.40
log
@Attributes.
@
text
@d47 2
a48 2
         Attribute <Boolean> theAtt,
         boolean             theValue)
d58 2
a59 2
         Attribute <Integer> theAtt,
         int                 theValue)
d69 2
a70 2
         Attribute <Double> theAtt,
         double             theValue)
d80 2
a81 2
         Attribute <boolean[]> theAtt,
         boolean[]             theValue)
d92 2
a93 2
         Attribute <int[]> theAtt,
         int[]             theValue)
d104 2
a105 2
         Attribute <double[]> theAtt,
         double[]             theValue)
d120 1
a120 1
   public boolean get (Attribute <Boolean> theAtt)
d129 1
a129 1
   public int get (Attribute <Integer> theAtt)
d138 1
a138 1
   public double get (Attribute <Double> theAtt)
d147 1
a147 1
   public boolean[] get (Attribute <boolean[]> theAtt)
d162 1
a162 1
   public int[] get (Attribute <int[]> theAtt)
d177 1
a177 1
   public double[] get (Attribute <double[]> theAtt)
d199 2
a200 2
         Attribute <boolean[]> theAtt,
         boolean[]             theArray)
d211 2
a212 2
         Attribute <int[]> theAtt,
         int[]             theArray)
d223 2
a224 2
         Attribute <double[]> theAtt,
         double[]             theArray)
@


1.39
log
@Attributes.
@
text
@d36 1
a36 1
// set (theAtt, theValue) methods (overloaded)
d58 46
d114 1
a114 1
// get (theAtt) methods (overloaded)
d120 43
a162 1
   public double[] get (Attribute <double[]> theAtt)
d164 1
a164 1
      double[] theArray;
d166 1
a166 1
      theArray = new double[getNPeriods ()];
d170 1
a170 1
      getAttCIFor (theAtt).getDblVec (getCompCI (), theArray);
d172 1
a172 1
      return theArray;
d177 1
a177 1
   public boolean get (Attribute <Boolean> theAtt)
d179 7
a185 1
      checkForGet        (theAtt);
d187 1
a187 1
      return getAttCIFor (theAtt).getBool (getCompCI ());
d191 1
a191 1
// get (theAtt, theArray) methods (overloaded)
d199 24
@


1.38
log
@Attributes.
@
text
@d76 1
a76 1
      checkForGet    (theAtt);
d78 7
a84 3
      return
         getAttCIFor (theAtt).
            getDblVec (getCompCI (), new double[getNPeriods ()]);
@


1.37
log
@Attributes.
@
text
@d47 2
a48 2
         Attribute <double[]> theAtt,
         double[]             theValue)
d50 1
a50 2
      checkForSet      (theAtt);
      checkArrayLength (theAtt, "set", theValue.length);
d52 1
a52 1
      getAttCIFor      (theAtt).setDblVec (getCompCI (), theValue);
d58 2
a59 2
         Attribute <Boolean> theAtt,
         boolean             theValue)
d61 2
a62 1
      checkForSet (theAtt);
d64 1
a64 1
      getAttCIFor (theAtt).setBool (getCompCI (), theValue);
@


1.36
log
@Attributes.
@
text
@d47 2
a48 2
         Attribute.DoubleVector theAtt,
         double[]               theValue)
d59 2
a60 2
         Attribute.BooleanScalar theAtt,
         boolean                 theValue)
d74 1
a74 1
   public double[] get (Attribute.DoubleVector theAtt)
d85 1
a85 1
   public boolean get (Attribute.BooleanScalar theAtt)
d101 2
a102 2
         Attribute.DoubleVector theAtt,
         double[]               theArray)
@


1.35
log
@Attributes.
@
text
@d8 1
a8 3
package       com.ibm.witj;

import static com.ibm.witj.AttribOld.AccessMode.*;
a35 38
// Old Code
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// set (theAtt, theValue) methods (overloaded)
//
// Each of these methods sets the value of the WIT attribute represented by
// theAtt for this Component to theValue.
// theAtt is an instance of a subclass of AttribOld that determines the
// type of the attribute and the type of the second argument.
// If the attribute is a vector attribute, theValue must be an array of length
// nPeriods.
//------------------------------------------------------------------------------

   public void set (
         AttribOld.DoubleVector theAtt,
         double[]               theValue)
      {
      checkForSet      (theAtt);
      checkArrayLength (theAtt, "set", theValue.length);

      getAttCIFor      (theAtt).setDblVec (getCompCI (), theValue);
      }

//------------------------------------------------------------------------------

   public void set (
         AttribOld.BooleanScalar theAtt,
         boolean                 theValue)
      {
      checkForSet (theAtt);

      getAttCIFor (theAtt).setBool (getCompCI (), theValue);
      }

//------------------------------------------------------------------------------
// New Code
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
a67 31
// Old Code
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// get (theAtt) methods (overloaded)
//
// Each of these methods returns the current value of the WIT attribute
// represented by theAtt for this Component.
//------------------------------------------------------------------------------

   public double[] get (AttribOld.DoubleVector theAtt)
      {
      checkForGet    (theAtt);

      return
         getAttCIFor (theAtt).
            getDblVec (getCompCI (), new double[getNPeriods ()]);
      }

//------------------------------------------------------------------------------

   public boolean get (AttribOld.BooleanScalar theAtt)
      {
      checkForGet        (theAtt);

      return getAttCIFor (theAtt).getBool (getCompCI ());
      }

//------------------------------------------------------------------------------
// New Code
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
a92 24
// Old Code
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// get (theAtt, theArray) methods (overloaded)
//
// In each of these methods, theArray must be an array of length nPeriods.
// The current value of the WIT vector attribute represented by theAtt for this
// Component is stored in theArray.
//------------------------------------------------------------------------------

   public void get (
         AttribOld.DoubleVector theAtt,
         double[]               theArray)
      {
      checkForGet      (theAtt);
      checkArrayLength (theAtt, "get", theArray.length);

      getAttCIFor      (theAtt).getDblVec (getCompCI (), theArray);
      }

//------------------------------------------------------------------------------
// New Code
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
a184 36
// Old Code
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// checkForSet (theAtt)
//
// Does error checking for a "set" function.
//------------------------------------------------------------------------------

   private void checkForSet (AttribOld theAtt)
      {
      AttCI theAttCI;

      mustBeActive ("Component.set");

      if (theAtt.getAccessMode () == OUTPUT)
         {
         abortWmsg (
              "   Component.set (...) was called on an output attribute.\n"
            + "\n"
            + "      Component: " + this + "\n"
            + "      AttribOld: " + theAtt);
         }

      if (! theAtt.appliesTo (getCompClassID ()))
         abortWmsg (
              "   Component.set (...) was called for an instance of a\n"
            + "   Component class to which the attribute does not apply.\n"
            + "\n"
            + "      Component: " + this + "\n"
            + "      AttribOld: " + theAtt);
      }

//------------------------------------------------------------------------------
// New Code
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
a214 27
// Old Code
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// checkArrayLength (theAtt, theLength)
//
// Verifies that theLength == nPeriods for setting a vector attribute.
//------------------------------------------------------------------------------

   private void checkArrayLength (
         AttribOld theAtt,
         int       theLength)
      {
      if (theLength != getNPeriods ())
         abortWmsg (
              "   Component.set (...) was called with an array\n"
            + "   whose length does not match nPeriods for the Problem.\n"
            + "\n"
            + "      Component:    " + this      + "\n"
            + "      AttribOld:    " + theAtt    + "\n"
            + "      Array Length: " + theLength + "\n"
            + "      nPeriods:     " + getNPeriods ());
      }

//------------------------------------------------------------------------------
// New Code
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
a235 29
// Old Code
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// checkArrayLength (theAtt, methodName, theLength)
//
// Verifies that theLength == nPeriods for setting/getting a vector attribute.
// methodName is the name of the calling method.
//------------------------------------------------------------------------------

   private void checkArrayLength (
         AttribOld theAtt,
         String    methodName,
         int       theLength)
      {
      if (theLength != getNPeriods ())
         abortWmsg (
              "   Component." + methodName + " (...) was called with an array\n"
            + "   whose length does not match nPeriods for the Problem.\n"
            + "\n"
            + "      Component:    " + this      + "\n"
            + "      AttribOld:    " + theAtt    + "\n"
            + "      Array Length: " + theLength + "\n"
            + "      nPeriods:     " + getNPeriods ());
      }

//------------------------------------------------------------------------------
// New Code
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
a258 27
// Old Code
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// checkForGet (theAtt)
//
// Does error checking for a "get" function.
//------------------------------------------------------------------------------

   private void checkForGet (AttribOld theAtt)
      {
      AttCI theAttCI;

      mustBeActive ("Component.get");

      if (! theAtt.appliesTo (getCompClassID ()))
         abortWmsg (
              "   Component.get (...) was called for an instance of a\n"
            + "   Component class to which the attribute does not apply.\n"
            + "\n"
            + "      Component: " + this + "\n"
            + "      AttribOld: " + theAtt);
      }

//------------------------------------------------------------------------------
// New Code
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
a277 22
// Old Code
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// getAttCIFor (theAtt)
//
// Returns the AttCI that owns the C++ Att corresponding to theAtt and the
// Component class of this Component.
//------------------------------------------------------------------------------

   private AttCI getAttCIFor (AttribOld theAtt)
      {
      AppAtt theAppAtt;

      theAppAtt = theAtt.getAppAttFor (getCompClassID ());

      return getProbCoord ().getAttOldMgr ().getAttCIFor (theAppAtt);
      }

//------------------------------------------------------------------------------
// New Code
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
@


1.34
log
@Attributes.
@
text
@d38 3
d73 38
d136 31
d178 2
a179 2
      checkForGet       (theAtt);
      checkArrayLength  (theAtt, "get", theArray.length);
d181 22
a202 1
      getAttCIFor       (theAtt).getDblVec (getCompCI (), theArray);
d280 3
d313 36
d370 27
d420 29
d470 25
d511 3
@


1.33
log
@Attributes.
@
text
@d297 19
@


1.32
log
@Changed name of class AttID to Attribute.
@
text
@d10 1
a10 1
import static com.ibm.witj.Attribute.AccessMode.*;
d42 1
a42 1
// theAtt is an instance of a subclass of Attribute that determines the
d49 1
a49 1
         Attribute.DoubleVector theAtt,
d61 1
a61 1
         Attribute.BooleanScalar theAtt,
d76 1
a76 1
   public double[] get (Attribute.DoubleVector theAtt)
d87 1
a87 1
   public boolean get (Attribute.BooleanScalar theAtt)
d103 1
a103 1
         Attribute.DoubleVector theAtt,
d192 1
a192 1
   private void checkForSet (Attribute theAtt)
d204 1
a204 1
            + "      Attribute: " + theAtt);
d213 1
a213 1
            + "      Attribute: " + theAtt);
d223 1
a223 1
         Attribute theAtt,
d232 1
a232 1
            + "      Attribute:    " + theAtt    + "\n"
d245 1
a245 1
         Attribute theAtt,
d255 1
a255 1
            + "      Attribute:    " + theAtt    + "\n"
d266 1
a266 1
   private void checkForGet (Attribute theAtt)
d278 1
a278 1
            + "      Attribute: " + theAtt);
d288 1
a288 1
   private AttCI getAttCIFor (Attribute theAtt)
d294 1
a294 1
      return getProbCoord ().getAttMgr ().getAttCIFor (theAppAtt);
@


1.31
log
@Implemented and use class AppAtt.
@
text
@d10 1
a10 1
import static com.ibm.witj.AttID.AccessMode.*;
d38 1
a38 1
// set (theAttID, theValue) methods (overloaded)
d40 4
a43 4
// Each of these methods sets the value of the attribute identified by theAttID
// for this Component to theValue.
// theAttID is an instance of a subclass of AttID that determines the type of
// the attribute and the type of the second argument.
d49 2
a50 2
         AttID.DoubleVectorID theAttID,
         double[]             theValue)
d52 2
a53 2
      checkForSet      (theAttID);
      checkArrayLength (theAttID, "set", theValue.length);
d55 1
a55 1
      getAttCIFor      (theAttID).setDblVec (getCompCI (), theValue);
d61 2
a62 2
         AttID.BooleanID theAttID,
         boolean         theValue)
d64 1
a64 1
      checkForSet (theAttID);
d66 1
a66 1
      getAttCIFor (theAttID).setBool (getCompCI (), theValue);
d70 1
a70 1
// get (theAttID) methods (overloaded)
d72 2
a73 2
// Each of these methods returns the current value of the attribute identified
// by theAttID for this Component.
d76 1
a76 1
   public double[] get (AttID.DoubleVectorID theAttID)
d78 1
a78 1
      checkForGet    (theAttID);
d81 1
a81 1
         getAttCIFor (theAttID).
d87 1
a87 1
   public boolean get (AttID.BooleanID theAttID)
d89 1
a89 1
      checkForGet        (theAttID);
d91 1
a91 1
      return getAttCIFor (theAttID).getBool (getCompCI ());
d95 1
a95 1
// get (theAttID, theArray) methods (overloaded)
d98 1
a98 1
// The current value of the vector attribute identified by theAttID for this
d103 2
a104 2
         AttID.DoubleVectorID theAttID,
         double[]             theArray)
d106 2
a107 2
      checkForGet       (theAttID);
      checkArrayLength  (theAttID, "get", theArray.length);
d109 1
a109 1
      getAttCIFor       (theAttID).getDblVec (getCompCI (), theArray);
d187 1
a187 1
// checkForSet (theAttID)
d192 1
a192 1
   private void checkForSet (AttID theAttID)
d198 1
a198 1
      if (theAttID.getAccessMode () == OUTPUT)
d204 1
a204 1
            + "      AttID:     " + theAttID);
d207 1
a207 1
      if (! theAttID.appliesTo (getCompClassID ()))
d213 1
a213 1
            + "      AttID:     " + theAttID);
d217 1
a217 1
// checkArrayLength (theAttID, theLength)
d223 2
a224 2
         AttID theAttID,
         int   theLength)
d232 1
a232 1
            + "      AttID:        " + theAttID  + "\n"
d238 1
a238 1
// checkArrayLength (theAttID, methodName, theLength)
d245 3
a247 3
         AttID  theAttID,
         String methodName,
         int    theLength)
d255 1
a255 1
            + "      AttID:        " + theAttID  + "\n"
d261 1
a261 1
// checkForGet (theAttID)
d266 1
a266 1
   private void checkForGet (AttID theAttID)
d272 1
a272 1
      if (! theAttID.appliesTo (getCompClassID ()))
d278 1
a278 1
            + "      AttID:     " + theAttID);
d282 1
a282 1
// getAttCIFor (theAttID)
d284 1
a284 1
// Returns the AttCI that owns the C++ Att corresponding to theAttID and the
d288 1
a288 1
   private AttCI getAttCIFor (AttID theAttID)
d292 1
a292 1
      theAppAtt = theAttID.getAppAttFor (getCompClassID ());
@


1.30
log
@Attributes.
@
text
@d290 5
a294 4
      return
         getProbCoord ().
            getAttMgr ().
               getAttCIFor (theAttID, getCompClassID ());
@


1.29
log
@Atttributes.
@
text
@d203 2
a204 5
            + "      Component: "
            +        this
            + "\n"
            + "      AttID:     "
            +        theAttID);
d207 1
a207 1
      if (theAttID.getCompClassID () != getCompClassID ())
d212 2
a213 8
            + "      Component:                "
            +        this
            + "\n"
            + "      AttID:                    "
            +        theAttID
            + "\n"
            + "      Required Component Class: "
            +        theAttID.getCompClassID ());
d231 4
a234 11
            + "      Component:    "
            +        this
            + "\n"
            + "      AttID:        "
            +        theAttID
            + "\n"
            + "      Array Length: "
            +        theLength
            + "\n"
            + "      nPeriods:     "
            +        getNPeriods ());
d272 1
a272 1
      if (theAttID.getCompClassID () != getCompClassID ())
d277 2
a278 8
            + "      Component:                "
            +        this
            + "\n"
            + "      AttID:                    "
            +        theAttID
            + "\n"
            + "      Required Component Class: "
            +        theAttID.getCompClassID ());
@


1.28
log
@Attributes.
@
text
@d306 2
a307 1
// Returns the AttCI that owns the C++ Att corresponding to theAttID.
d312 4
a315 1
      return getProbCoord ().getAttMgr ().getAttCIFor (theAttID);
@


1.27
log
@Replaced classes Material and Capacity with an enum.
@
text
@d8 1
a8 1
package        com.ibm.witj;
d10 1
a10 2
import  static com.ibm.witj.AttID.*;
import  static com.ibm.witj.AttID.AccessMode.*;
d49 2
a50 2
         DoubleVectorAttID theAttID,
         double[]          theValue)
d61 2
a62 2
         BooleanAttID theAttID,
         boolean      theValue)
d76 1
a76 1
   public double[] get (DoubleVectorAttID theAttID)
d87 1
a87 1
   public boolean get (BooleanAttID theAttID)
d103 2
a104 2
         DoubleVectorAttID theAttID,
         double[]          theArray)
@


1.26
log
@Made accessor names begin with "get".
@
text
@a24 2
//             Material
//             Capacity
@


1.25
log
@Attributes.
@
text
@d58 1
a58 1
      myAttCIFor       (theAttID).setDblVec (myCompCI (), theValue);
d69 1
a69 1
      myAttCIFor  (theAttID).setBool (myCompCI (), theValue);
d81 1
a81 1
      checkForGet   (theAttID);
d84 2
a85 1
         myAttCIFor (theAttID).getDblVec (myCompCI (), new double[nPeriods ()]);
d92 1
a92 1
      checkForGet       (theAttID);
d94 1
a94 1
      return myAttCIFor (theAttID).getBool (myCompCI ());
d109 2
a110 2
      checkForGet      (theAttID);
      checkArrayLength (theAttID, "get", theArray.length);
d112 1
a112 1
      myAttCIFor       (theAttID).getDblVec (myCompCI (), theArray);
d149 1
a149 1
   int nPeriods ()
d151 1
a151 1
      return myCompMgr.myGlobalComp ().getNPeriods ();
d154 1
a154 1
   ProbCoord myProbCoord ()
d156 1
a156 1
      return myCompMgr.myProbCoord ();
d163 1
a163 1
   CompMgr myCompMgr ()
d169 1
a169 1
// myCompClassID ()
d175 1
a175 1
   abstract CompClassID myCompClassID ();
d178 1
a178 1
// myCompCI ().
d183 1
a183 1
   abstract ComponentCI myCompCI ();
d201 1
a201 1
      if (theAttID.myAccessMode () == OUTPUT)
d213 1
a213 1
      if (theAttID.myCompClassID () != myCompClassID ())
d225 1
a225 1
            +        theAttID.myCompClassID ());
d238 1
a238 1
      if (theLength != nPeriods ())
d253 1
a253 1
            +        nPeriods ());
d268 1
a268 1
      if (theLength != nPeriods ())
d276 1
a276 1
            + "      nPeriods:     " + nPeriods ());
d291 1
a291 1
      if (theAttID.myCompClassID () != myCompClassID ())
d303 1
a303 1
            +        theAttID.myCompClassID ());
d307 1
a307 1
// myAttCIFor (theAttID)
d312 1
a312 1
   private AttCI myAttCIFor (AttID theAttID)
d314 1
a314 1
      return myProbCoord ().myAttMgr ().myAttCIFor (theAttID);
@


1.24
log
@Attributes.
@
text
@d41 1
a41 1
// set (theAttID, theDblArr) methods (overloaded)
d44 1
a44 1
// for this Component to the value given in the second argument.
d47 2
a48 2
// If the attribute is a vector attribute, the second argument must be an array
// of length nPeriods.
d53 1
a53 1
         double[]          theDblArr)
d56 1
a56 1
      checkArrayLength (theAttID, theDblArr.length);
d58 1
a58 1
      myAttCIFor       (theAttID).setDblVec (myCompCI (), theDblArr);
d65 1
a65 1
         boolean      theBool)
d69 1
a69 1
      myAttCIFor  (theAttID).setBool (myCompCI (), theBool);
d81 1
a81 1
      checkForGet (theAttID);
d84 1
a84 2
         myAttCIFor (theAttID).
            getDblVec (myCompCI (), new double[nPeriods ()]);
d91 1
a91 1
      checkForGet (theAttID);
d96 18
d233 3
a235 1
   private void checkArrayLength (AttID theAttID, int theLength)
d256 23
@


1.23
log
@Attributes.
@
text
@d37 1
a37 1
// Package-Internal Methods
d41 1
a41 27
// Constructor.
//
// Constructs an Component to be owned by the Problem for theCompMgr.
//------------------------------------------------------------------------------

   Component (CompMgr theCompMgr)
      {
      myCompMgr = theCompMgr;

      theCompMgr.add (this);
      }

//------------------------------------------------------------------------------
// shutDown ().
//
// Override from class PublicObject.
//------------------------------------------------------------------------------

   void shutDown ()
      {
      myCompMgr = null;

      super.shutDown ();
      }

//------------------------------------------------------------------------------
// set (theAttID, theDblArr)
d43 6
a48 3
// Sets the value of the attribute identified by theAttID for this Component to
// theDblArr.
// theDblArr must be of length nPeriods.
a61 5
// set (theAttID, theBool)
//
// Sets the value of the attribute identified by theAttID for this Component to
// theBool.
//------------------------------------------------------------------------------
d73 1
a73 1
// get (theAttID)
d75 2
a76 2
// Returns the current value of the attribute identified by theAttID for this
// Component.
d81 1
a81 1
      double[] theDblArr;
d83 9
d94 12
a105 1
      theDblArr = new double[nPeriods ()];
d107 3
a109 1
      myAttCIFor (theAttID).getDblVec (myCompCI (), theDblArr);
d111 1
a111 1
      return theDblArr;
d115 1
a115 1
// get (theAttID)
d117 1
a117 2
// Returns the current value of the attribute identified by theAttID for this
// Component.
d120 1
a120 1
   public boolean get (BooleanAttID theAttID)
d122 1
a122 1
      checkForGet (theAttID);
d124 1
a124 1
      return myAttCIFor (theAttID).getBool (myCompCI ());
@


1.22
log
@Attributes.
@
text
@d74 3
a76 1
   public void set (DoubleVectorAttID theAttID, double[] theDblArr)
d78 2
a79 48
      AttCI theAttCI;

      mustBeActive ("Component.set");

      if (theAttID.myAccessMode () == OUTPUT)
         {
         abortWmsg (
              "   Component.set (...) was called on an output attribute.\n"
            + "\n"
            + "      Component: "
            +        this
            + "\n"
            + "      AttID:     "
            +        theAttID);
         }

      if (theAttID.myCompClassID () != myCompClassID ())
         abortWmsg (
              "   Component.set (...) was called for an instance of a\n"
            + "   Component class to which the attribute does not apply.\n"
            + "\n"
            + "      Component:                "
            +        this
            + "\n"
            + "      AttID:                    "
            +        theAttID
            + "\n"
            + "      Required Component Class: "
            +        theAttID.myCompClassID ());

      if (theDblArr.length != nPeriods ())
         abortWmsg (
              "   Component.set (...) was called with an array\n"
            + "   whose length does not match nPeriods for the Problem.\n"
            + "\n"
            + "      Component:    "
            +        this
            + "\n"
            + "      AttID:        "
            +        theAttID
            + "\n"
            + "      Array Length: "
            +        theDblArr.length
            + "\n"
            + "      nPeriods:     "
            +        nPeriods ());

      theAttCI = myProbCoord ().myAttMgr ().myAttCIFor (theAttID);
d81 1
a81 1
      theAttCI.setDblVec (myCompCI (), theDblArr);
d91 3
a93 1
   public void set (BooleanAttID theAttID, boolean theBool)
d95 1
a95 3
      AttCI theAttCI;

      mustBeActive ("Component.set");
d97 1
a97 29
      if (theAttID.myAccessMode () == OUTPUT)
         {
         abortWmsg (
              "   Component.set (...) was called on an output attribute.\n"
            + "\n"
            + "      Component: "
            +        this
            + "\n"
            + "      AttID:     "
            +        theAttID);
         }

      if (theAttID.myCompClassID () != myCompClassID ())
         abortWmsg (
              "   Component.set (...) was called for an instance of a\n"
            + "   Component class to which the attribute does not apply.\n"
            + "\n"
            + "      Component:                "
            +        this
            + "\n"
            + "      AttID:                    "
            +        theAttID
            + "\n"
            + "      Required Component Class: "
            +        theAttID.myCompClassID ());

      theAttCI = myProbCoord ().myAttMgr ().myAttCIFor (theAttID);

      theAttCI.setBool (myCompCI (), theBool);
a109 1
      AttCI    theAttCI;
d111 1
a111 15
      mustBeActive ("Component.get");

      if (theAttID.myCompClassID () != myCompClassID ())
         abortWmsg (
              "   Component.get (...) was called for an instance of a\n"
            + "   Component class to which the attribute does not apply.\n"
            + "\n"
            + "      Component:                "
            +        this
            + "\n"
            + "      AttID:                    "
            +        theAttID
            + "\n"
            + "      Required Component Class: "
            +        theAttID.myCompClassID ());
d115 1
a115 3
      theAttCI  = myProbCoord ().myAttMgr ().myAttCIFor (theAttID);

      theAttCI.getDblVec (myCompCI (), theDblArr);
d129 1
a129 19
      AttCI theAttCI;

      mustBeActive ("Component.get");

      if (theAttID.myCompClassID () != myCompClassID ())
         abortWmsg (
              "   Component.get (...) was called for an instance of a\n"
            + "   Component class to which the attribute does not apply.\n"
            + "\n"
            + "      Component:                "
            +        this
            + "\n"
            + "      AttID:                    "
            +        theAttID
            + "\n"
            + "      Required Component Class: "
            +        theAttID.myCompClassID ());

      theAttCI = myProbCoord ().myAttMgr ().myAttCIFor (theAttID);
d131 1
a131 1
      return theAttCI.getBool (myCompCI ());
d179 93
a271 1
// myAttMgr ().
d273 1
a273 1
// Access Wrapper.
d276 1
a276 1
   AttMgr myAttMgr ()
d278 1
a278 1
      return myProbCoord ().myAttMgr ();
@


1.21
log
@Attributes.
@
text
@d69 1
a69 1
// Sets the value of the attribute identified by theAttID for this Component to\
d129 44
d210 32
@


1.20
log
@Attributes.
@
text
@d129 37
@


1.19
log
@Removed AttAcc classes.
@
text
@d8 4
a11 1
package com.ibm.witj;
d67 62
d152 9
@


1.18
log
@Implemented of class DblVecOutAttAcc.
@
text
@a63 41
// get...AttAccFor (theAttID)
//
// Each of these methods retrieves the AttAcc of the indicated type for the
// Problem, associates it with the attribute identified by theAttID for this
// Component, and returns it.
//------------------------------------------------------------------------------

   final BoolInAttAcc getBoolInAttAccFor (AttID theAttID)
      {
      BoolInAttAcc theBoolInAttAcc;

      theBoolInAttAcc = myAttMgr ().myBoolInAttAcc ();

      theBoolInAttAcc.associateWith (theAttID, this);

      return theBoolInAttAcc;
      }

   final DblVecInAttAcc getDblVecInAttAccFor (AttID theAttID)
      {
      DblVecInAttAcc theDblVecInAttAcc;

      theDblVecInAttAcc = myAttMgr ().myDblVecInAttAcc ();

      theDblVecInAttAcc.associateWith (theAttID, this);

      return theDblVecInAttAcc;
      }

   final DblVecOutAttAcc getDblVecOutAttAccFor (AttID theAttID)
      {
      DblVecOutAttAcc theDblVecOutAttAcc;

      theDblVecOutAttAcc = myAttMgr ().myDblVecOutAttAcc ();

      theDblVecOutAttAcc.associateWith (theAttID, this);

      return theDblVecOutAttAcc;
      }

//------------------------------------------------------------------------------
@


1.17
log
@Attributes.
@
text
@d93 11
@


1.16
log
@Changed class name DblVecAttAcc to DblVecInAttAcc.
@
text
@d64 1
a64 1
// getDblVecInAttAccFor (theAttID)
d66 3
a68 2
// Retrieves the DblVecInAttAcc for the Problem, associates it with the
// attribute identified by theAttID for this Component, and returns it.
d71 11
d86 1
a86 1
      theDblVecInAttAcc = myProbCoord ().myAttMgr ().myDblVecInAttAcc ();
d94 1
a94 3
// nPeriods ().
//
// Access wrapper.
a101 6
//------------------------------------------------------------------------------
// myProbCoord ().
//
// Access Wrapper.
//------------------------------------------------------------------------------

d108 1
a108 3
// myCompMgr ().
//
// Accessor.
d125 15
@


1.15
log
@Changed class name       AttI to       AttAcc.
Changed class name DblVecAttI to DblVecAttAcc.
@
text
@d64 1
a64 1
// getDblVecAttAccFor (theAttID)
d66 2
a67 2
// Retrieves the DblVecAttAcc for the Problem, associates it with the attribute
// identified by theAttID for this Component, and returns it.
d70 1
a70 1
   final DblVecAttAcc getDblVecAttAccFor (AttID theAttID)
d72 1
a72 1
      DblVecAttAcc theDblVecAttAcc;
d74 1
a74 1
      theDblVecAttAcc = myProbCoord ().myAttMgr ().myDblVecAttAcc ();
d76 1
a76 1
      theDblVecAttAcc.associateWith (theAttID, this);
d78 1
a78 1
      return theDblVecAttAcc;
@


1.14
log
@Changed name of class       AttRep to       AttI.
Changed name of class DblVecAttRep to DblVecAttI.
@
text
@d64 1
a64 1
// getDblVecAttIFor (theAttID)
d66 1
a66 1
// Retrieves the DblVecAttI for the Problem, associates it with the attribute
d70 1
a70 1
   final DblVecAttI getDblVecAttIFor (AttID theAttID)
d72 1
a72 1
      DblVecAttI theDblVecAttI;
d74 1
a74 1
      theDblVecAttI = myProbCoord ().myAttMgr ().myDblVecAttI ();
d76 1
a76 1
      theDblVecAttI.associateWith (theAttID, this);
d78 1
a78 1
      return theDblVecAttI;
@


1.13
log
@Attributes.
@
text
@d64 1
a64 1
// getDblVecAttRepFor (theAttID)
d66 1
a66 1
// Gets the DblVecAttRep for the Problem, tells it to represent the attribute
d70 1
a70 1
   final DblVecAttRep getDblVecAttRepFor (AttID theAttID)
d72 1
a72 1
      DblVecAttRep theDblVecAttRep;
d74 1
a74 1
      theDblVecAttRep = myProbCoord ().myAttMgr ().myDblVecAttRep ();
d76 1
a76 1
      theDblVecAttRep.represent (theAttID, this);
d78 1
a78 1
      return theDblVecAttRep;
@


1.12
log
@Implemented Java class AttRep.
@
text
@d64 18
@


1.11
log
@Created Java class CompMgr.
@
text
@d13 1
a13 1
// Represents an element of a Problem, i.e., a "data object" such as an
@


1.10
log
@Attributes.
@
text
@d40 1
a40 1
// Constructs an Component to be owned by the Problem for theProbCoord.
d43 1
a43 1
   Component (ProbCoord theProbCoord)
d45 1
a45 1
      myProbCoord = theProbCoord;
d47 1
a47 1
      myProbCoord.add (this);
d58 1
a58 1
      myProbCoord = null;
d71 1
a71 1
      return myProbCoord.myGlobalComp ().getNPeriods ();
d77 11
d91 1
a91 1
   ProbCoord myProbCoord ()
d93 1
a93 1
      return myProbCoord;
d109 1
a109 1
// myProbCoord.
d111 1
a111 1
// The ProbCoord for this Component.
d114 1
a114 1
   private ProbCoord myProbCoord;
@


1.9
log
@Removed class LTPubObject.
@
text
@d85 8
@


1.8
log
@Added Java class LTPubObject.
@
text
@d19 10
a28 11
//       LTPubObject
//          Component
//             GlobalComp
//             Part
//                Material
//                Capacity
//             Demand
//             Operation
//             BomEntry
//             Substitute
//             BopEntry
d31 1
a31 1
public abstract class Component extends LTPubObject
@


1.7
log
@Comments, etc.
@
text
@d19 11
a29 10
//       Component
//          GlobalComp
//          Part
//             Material
//             Capacity
//          Demand
//          Operation
//          BomEntry
//          Substitute
//          BopEntry
d32 1
a32 1
public abstract class Component extends PublicObject
@


1.6
log
@*** empty log message ***
@
text
@d1 7
@


1.5
log
@*** empty log message ***
@
text
@d20 2
@


1.4
log
@*** empty log message ***
@
text
@d42 13
d86 1
a86 1
   private final ProbCoord myProbCoord;
@


1.3
log
@*** empty log message ***
@
text
@d19 1
@


1.2
log
@*** empty log message ***
@
text
@d11 1
a11 1
//    ExportedObject
d21 1
a21 1
public abstract class Component extends ExportedObject
@


1.1
log
@*** empty log message ***
@
text
@d30 1
a30 1
// Constructs an Component to be owned by the Problem for theCompMgr.
d33 1
a33 1
   Component (CompMgr theCompMgr)
d35 1
a35 1
      myCompMgr = theCompMgr;
d37 1
a37 1
      myCompMgr.add (this);
d48 1
a48 1
      return myCompMgr.myGlobalComp ().getNPeriods ();
d52 1
a52 1
// myCompMgr ().
d57 1
a57 1
   CompMgr myCompMgr ()
d59 1
a59 1
      return myCompMgr;
d67 1
a67 1
// myCompMgr.
d69 1
a69 1
// The CompMgr for this Component.
d72 1
a72 1
   private final CompMgr myCompMgr;
@

