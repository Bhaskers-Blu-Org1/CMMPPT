head	1.21;
access;
symbols;
locks; strict;
comment	@# @;


1.21
date	2009.03.12.22.45.20;	author rjw;	state dead;
branches;
next	1.20;

1.20
date	2009.03.12.19.02.42;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.03.09.21.09.22;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.03.06.23.23.05;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.03.06.15.43.25;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.03.05.22.31.32;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.03.05.21.31.44;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.05.17.21.27;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.02.20.17.18.45;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.02.19.19.51.47;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.02.03.21.31.10;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.23.19.32.24;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.22.23.12.42;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.16.23.43.04;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.16.16.13.30;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.15.15.35.33;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.11.15.37.40;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.10.20.54.09;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.03.23.02.21;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.24.22.30.19;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.07.18.50.27;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Changed name of GlobalElement classes to GlobalComponent.
@
text
@
//==============================================================================
// WIT-J Java Source File GlobalElement.java.
//
// Contains the declaration of class GlobalElement.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import       java.util.*;

//==============================================================================
// Class GlobalElement
//
// Responsible for working with global attributes of an implosion problem.
//
// Class Hierarchy:
//
// RetainedObject
//    Element
//       GlobalElement
//==============================================================================

public final class GlobalElement extends Element
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// setOptInitMethod (theMethod)
//
// Setter.
//------------------------------------------------------------------------------

   public void setOptInitMethod (OptInitMethod theMethod)
      {
      try
         {
         mustBeActive ("GlobalElement.setOptInitMethod");

         myGlobalElementCOR.setOptInitMethod (theMethod.name ());
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getOptInitMethod ()
//
// Accessor.
//------------------------------------------------------------------------------

   public OptInitMethod getOptInitMethod ()
      {
      try
         {
         String theMethodName;

         mustBeActive ("GlobalElement.getOptInitMethod");

         theMethodName = myGlobalElementCOR.getOptInitMethod ();

         return OptInitMethod.valueOf (theMethodName);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// setPipSeq (theTripleList)
//
// Sets the PIP shipment sequence to the list of AllocTriples in theTripleList.
//------------------------------------------------------------------------------

   public void setPipSeq (ArrayList <AllocTriple <Demand>> theTripleList)
      {
      try
         {
         mustBeActive ("GlobalElement.setPipSeq");

         setPipSeqInt (theTripleList);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getPipSeq (theTripleList)
//
// Retrieves the PIP shipment sequence, storing it in theTripleList.
//------------------------------------------------------------------------------

   public void getPipSeq (ArrayList <AllocTriple <Demand>> theTripleList)
      {
      try
         {
         mustBeActive ("GlobalElement.getPipSeq");

         getPipSeqInt (theTripleList);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//==============================================================================
// Package-Internal Constructor
//==============================================================================

   GlobalElement (Coordinator theCoord)
      {
      super (theCoord);

      nPeriods           = 26;

      myGlobalElementCOR = new GlobalElementCOR (this);

      getCoordinator ().record (this);
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// toStringActive ().
//
// Override from class RetainedObject.
//------------------------------------------------------------------------------

   String toStringActive ()
      {
      return "GlobalElement";
      }

//------------------------------------------------------------------------------
// deactivate ().
//
// Override from class RetainedObject.
//------------------------------------------------------------------------------

   void deactivate ()
      {
      myGlobalElementCOR.deactivate ();
      super             .deactivate ();
      }

//------------------------------------------------------------------------------
// setNPeriods (theValue)
//
// Setter for nPeriods.
//------------------------------------------------------------------------------

   void setNPeriods (int theValue)
      {
      assert (! getCoordinator ().hasPartsOpns ());

      myGlobalElementCOR.setNPeriods (theValue);

      nPeriods = theValue;
      }

//------------------------------------------------------------------------------
// getNPeriods ()
//
// Accessor.
//------------------------------------------------------------------------------

   int getNPeriods ()
      {
      return nPeriods;
      }

//------------------------------------------------------------------------------
// getElemClassID ()
//
// Override from class Element.
//------------------------------------------------------------------------------

   ElemClassID getElemClassID ()
      {
      return ElemClassID.GLOBAL_ELEMENT;
      }

//------------------------------------------------------------------------------
// getElementCOR ().
//
// Override from class Element.
//------------------------------------------------------------------------------

   ElementCOR getElementCOR ()
      {
      return myGlobalElementCOR;
      }

//------------------------------------------------------------------------------
// Accessors
//------------------------------------------------------------------------------

   GlobalElementCOR getGlobalElementCOR ()
      {
      return myGlobalElementCOR;
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// setPipSeqInt (theTripleList)
//
// Internal implementation of setPipSeq (theTripleList).
//------------------------------------------------------------------------------

   private void setPipSeqInt (ArrayList <AllocTriple <Demand>> theTripleList)
      {
      DemandCOR theDemandCOR;
      int       theShipPer;
      double    incShipVol;

      getCoordinator ().
         checkDemandTriples (theTripleList, "theGlobalElement.setPipSeq");

      getProblem ().getProblemCOR ().callSimpleWitFunc ("witClearPipSeq");

      for (AllocTriple <Demand> theTriple: theTripleList)
         {
         theDemandCOR = theTriple.getE      ().getDemandCOR ();
         theShipPer   = theTriple.getPeriod ();
         incShipVol   = theTriple.getVolume ();

         theDemandCOR.appendToPipSeq (theShipPer, incShipVol);
         }
      }

//------------------------------------------------------------------------------
// getPipSeqInt (theTripleList)
//
// Internal implementation of getPipSeq (theTripleList).
//------------------------------------------------------------------------------

   private void getPipSeqInt (ArrayList <AllocTriple <Demand>> theTripleList)
      {
      AllocTripleListCOR theAllocTripleListCOR;

      theAllocTripleListCOR =
         new AllocTripleListCOR (
            theTripleList,
            Demand.class,
            getCoordinator ());

      myGlobalElementCOR.getPipSeq (theAllocTripleListCOR);

      theAllocTripleListCOR.deactivate ();
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// nPeriods
//
// Cached copy of the value stored in WIT.
//------------------------------------------------------------------------------

   private int nPeriods;

//------------------------------------------------------------------------------
// myGlobalElementCOR.
//
// The GlobalElementCOR that belongs to this GlobalElement.
//------------------------------------------------------------------------------

   private final GlobalElementCOR myGlobalElementCOR;

//==============================================================================
}
@


1.20
log
@Changed name of Problem method shutDown to deactivate.
@
text
@@


1.19
log
@purgeData
@
text
@d151 1
a151 1
// shutDown ().
d156 1
a156 1
   void shutDown ()
d158 2
a159 2
      myGlobalElementCOR.shutDown ();
      super             .shutDown ();
d268 1
a268 1
      theAllocTripleListCOR.shutDown ();
@


1.18
log
@purgeData
@
text
@a177 10
// restoreAfterPurge ()
//
// Override from class Element.
//------------------------------------------------------------------------------

   void restoreAfterPurge ()
      {
      }

//------------------------------------------------------------------------------
@


1.17
log
@purgeData
@
text
@a32 21
// toString ().
//
// Override from class Object.
//------------------------------------------------------------------------------

   public String toString ()
      {
      try
         {
         notAllowedWhenTerminated ("GlobalElement.toString");

         return "GlobalElement";
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
d140 11
@


1.16
log
@purgeData
@
text
@d188 10
@


1.15
log
@purgeData
@
text
@a172 10
// restoreAfterPurge ()
//
// Override from class Element.
//------------------------------------------------------------------------------

   void restoreAfterPurge ()
      {
      }

//------------------------------------------------------------------------------
@


1.14
log
@purgeData
@
text
@d173 1
a173 1
// reconcileForPurge ()
d178 1
a178 1
   void reconcileForPurge ()
@


1.13
log
@Added the AllocTripleList classes.
@
text
@d173 10
@


1.12
log
@Moved set/get-PipSeq from class Problem to class GlobalElement.
@
text
@d100 1
a100 1
// setPipSeq (theTriples)
d102 1
a102 1
// Sets the PIP shipment sequence to the list of AllocTriples in theTriples.
d105 1
a105 1
   public void setPipSeq (ArrayList <AllocTriple <Demand>> theTriples)
d109 3
a111 1
         setPipSeqInt (theTriples);
d121 1
a121 1
// getPipSeq (theTriples)
d123 1
a123 1
// Sets theTriples to the PIP shipment sequence.
d126 1
a126 1
   public void getPipSeq (ArrayList <AllocTriple <Demand>> theTriples)
d132 1
a132 5
         getCoordinator ().holdAllocTripleList (theTriples, Demand.class);

         myGlobalElementCOR.getPipSeq ();

         getCoordinator ().releaseAllocTripleList ();
d234 1
a234 1
// setPipSeqInt (theTriples)
d236 1
a236 1
// Internal implementation of setPipSeq (theTriples)
d239 1
a239 1
   private void setPipSeqInt (ArrayList <AllocTriple <Demand>> theTriples)
a244 2
      mustBeActive ("GlobalElement.setPipSeq");

d246 1
a246 1
         checkDemandTriples (theTriples, "theGlobalElement.setPipSeq");
d250 1
a250 1
      for (AllocTriple <Demand> theTriple: theTriples)
d260 21
@


1.11
log
@OptInitMethod.
@
text
@d12 2
d99 44
d232 33
@


1.10
log
@Coordinator
@
text
@d51 46
@


1.9
log
@Removed java class ElementMgr, moving its responsibilities to class
Coordinator.
@
text
@d55 1
a55 1
   GlobalElement (Coordinator theCoordinator)
d57 1
a57 1
      super (theCoordinator);
@


1.8
log
@Changed a Java class name: WitjAbortsException ==> TerminalException
@
text
@d55 1
a55 1
   GlobalElement (ElementMgr theElementMgr)
d57 1
a57 1
      super (theElementMgr);
d63 1
a63 1
      getElementMgr ().record (this);
d90 1
a90 1
      assert (! getElementMgr ().hasPartsOpns ());
@


1.7
log
@Changed class name: NonFunctionalException ==> WitjAbortsException
@
text
@d40 1
a40 1
         witjAbortedNotAllowed ("GlobalElement.toString");
@


1.6
log
@Minor revision.
@
text
@d40 1
a40 1
         witjMustBeFunctional ("GlobalElement.toString");
@


1.5
log
@Added the uniform try block whereever it was needed.
@
text
@d19 3
a21 3
//    RetainedObject
//       Element
//          GlobalElement
@


1.4
log
@Added a call to witjMustBeFunctional whereever it was needed.
@
text
@d38 11
a48 3
      witjMustBeFunctional ("GlobalElement.toString");

      return "GlobalElement";
@


1.3
log
@Exceptions
@
text
@d38 2
@


1.2
log
@Minor Revision.
@
text
@d80 3
a82 4
      if (getElementMgr ().hasPartsOpns ())
         abortWmsg (
            "   The \"set\" method was called for attribute \"nPeriods\" in a\n"
          + "   Problem that has at least one Part or at least one Operation.");
a84 2

      myGlobalElementCOR.setNPeriods (theValue);
@


1.1
log
@Name change.
@
text
@d109 1
a109 1
      return ElemClassID.GLOBAL_COMP;
@

