head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.05.16.14.37.26;	author rjw;	state dead;
branches;
next	1.1;

1.1
date	2008.05.13.21.06.37;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@package com.ibm.witj;

//==============================================================================
// Class ExportedObject
//
// The super class for all public classes in WIT-J.
// An instance of any such class is an object of WIT-J's Application Programming
// Interface.
//
// Class Hierarchy:
//
//    ExportedObject
//       Problem
//       Component
//          GlobalComp
//          Part
//             Material
//             Capacity
//          Demand
//          Operation
//==============================================================================

public abstract class ExportedObject
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// isActive ().
//
// Returns true, iff this ExportedObject is currently active. If any other
// public method of an ExportedObject (i.e., other than this method) is called
// when this ExportedObject is inactive, the program aborts with an error
// message.
//------------------------------------------------------------------------------

   public boolean isActive ()
      {
      return isActive;
      }

//------------------------------------------------------------------------------
// toString ().
//
// This declaration forces all concrete subclasses of class ExportedObject to
// override toString ().
//------------------------------------------------------------------------------

   public abstract String toString ();

//==============================================================================
// Protected Methods
//==============================================================================

//------------------------------------------------------------------------------
// finalize ()
//------------------------------------------------------------------------------

   protected void finalize () throws Throwable
      {
      super.finalize ();

      if (isActive)
         abortWmsg (
              "   Garbage-collection was invoked on an active ExportedObject."
            + "\n"
            + "      Object: "
            + this);
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// Constructor.
//------------------------------------------------------------------------------

   ExportedObject ()
      {
      }

//------------------------------------------------------------------------------
// shutdown ().
//
// Puts this ExportedObject into an inactive state.
// This method must be called before this ExportedObject is garbage-collected.
//------------------------------------------------------------------------------

   void shutDown ()
      {
      mustBeActive ("ExportedObject.shutDown");

      isActive = false;
      }

//------------------------------------------------------------------------------
// mustBeActive (theArg, argName)
//
// Verifies that the ExportedObject is active.
// Arguments:
//    methName: The name of the method.
//------------------------------------------------------------------------------

   void mustBeActive (String methName)
      {
      if (! isActive)
         abortWmsg (
              "   A method was called on an inactive ExportedObject "
            +    "where this is not allowed.\n"
            + "\n"
            + "      Method: "
            + methName
            + "\n"
            + "      Object: "
            + this);
      }

//------------------------------------------------------------------------------
// mustBeNonNullActive (theArg, argName)
//
// Verifies that an ExportedObject argument to a method is non-null and active.
// Arguments:
//    theArg:   The argument being checked.
//    argName:  The name of the argument being checked.
//    methName: The name of the method.
//------------------------------------------------------------------------------

   static void mustBeNonNullActive (
         ExportedObject theArg,
         String         argName,
         String         methName)
      {
      if (theArg == null)
         abortWmsg (
              "   A method was called with a null argument "
            +    "where this is not allowed.\n"
            + "\n"
            + "      Method:   "
            + methName
            + "\n"
            + "      Argument: "
            + argName);

      if (! theArg.isActive)
         abortWmsg (
              "   A method was called with an inactive ExportedObject as one "
            +    "of its arguments\n"
            + "   where this is not allowed.\n"
            + "\n"
            + "      Method:         "
            + methName
            + "\n"
            + "      Argument:       "
            + argName
            + "\n"
            + "      Argument Value: "
            + theArg);
      }

//------------------------------------------------------------------------------
// abortWmsg (errorTxt)
//
// Issues an error message whose content is given the errorTxt and then aborts
// the program.
//------------------------------------------------------------------------------

   static void abortWmsg (String errorTxt)
      {
      System.out.println (
           "\n"
         + "WIT-J Application Program Error:\n"
         + "\n"
         + errorTxt
         + "\n"
         + "\n"
         + "Stack Trace:\n");

      new Throwable ().printStackTrace ();

      System.out.println (
           "\n"
         + "Application Program aborted by WIT-J.\n");
   
      System.exit (3);
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// isActive.
//
// See public method isActive ().
//------------------------------------------------------------------------------

   private boolean isActive = true;

//==============================================================================
}
@


1.1
log
@*** empty log message ***
@
text
@@

