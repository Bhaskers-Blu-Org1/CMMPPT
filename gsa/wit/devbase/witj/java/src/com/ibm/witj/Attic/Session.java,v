head	1.34;
access;
symbols;
locks; strict;
comment	@# @;


1.34
date	2008.11.25.21.04.03;	author rjw;	state dead;
branches;
next	1.33;

1.33
date	2008.11.25.20.47.41;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.11.25.20.25.12;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.11.25.20.11.08;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.11.25.19.37.04;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.11.25.19.01.44;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.11.25.16.39.38;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.11.25.15.28.48;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.11.13.17.14.38;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.10.29.20.27.19;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.10.27.20.43.48;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.10.22.13.43.30;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.10.21.20.34.05;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.10.21.15.03.43;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.10.14.21.37.00;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.10.09.21.20.22;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.10.08.19.03.38;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.10.07.21.12.58;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.10.06.22.43.09;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.09.30.15.17.42;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.09.26.22.21.27;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.09.19.16.29.51;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.09.15.16.20.40;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.12.19.44.34;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.12.18.57.24;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.12.16.09.37;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.11.19.10.26;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.11.15.20.54;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.10.21.32.35;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.09.19.00.01;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.09.16.27.07;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.09.15.38.19;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.09.15.15.31;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.08.19.45.36;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.34
log
@Removed Java class Session.
@
text
@
//==============================================================================
// WIT-J Java Source File Session.java.
//
// Contains the declaration of class Session.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import       java.util.*;

//==============================================================================
// Class Session
//
// The governing interface class of WIT-J.
// Each instance of class Session corresponds to a WitRun which may or may not
// be initialized.
//
// Class Hierarchy:
//
//    RetainedObject
//       Session
//==============================================================================

final class Session extends RetainedObject
{
//==============================================================================
// Package-Internal Constructor
//==============================================================================

   Session ()
      {
      mySessionCOR = new SessionCOR ();
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// shutDown ().
//
// Override from class RetainedObject.
//
// Shuts down this Session and the objects that it owns.
// This Session and the objects it owns cannot be garbage-collected until this
// method is called.
//------------------------------------------------------------------------------

   void shutDown ()
      {
      mySessionCOR.shutDown ();
      super       .shutDown ();
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   SessionCOR getSessionCOR ()
      {
      return mySessionCOR;
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// mySessionCOR.
//
// The SessionCOR that belongs to this Session.
//------------------------------------------------------------------------------

   private final SessionCOR mySessionCOR;

//==============================================================================
}
@


1.33
log
@Dismantling Session.
@
text
@@


1.32
log
@Dismantling class Session.
@
text
@d30 1
a30 1
//  Package-Internal Constructor
d33 1
a33 1
   Session (Problem theProblem)
a34 2
      myProblem    = theProblem;

a61 5
   Problem getProblem ()
      {
      return myProblem;
      }

a71 8
// myProblem.
//
// The Problem that belongs to this Session, if any.
//------------------------------------------------------------------------------

   private final Problem myProblem;

//------------------------------------------------------------------------------
@


1.31
log
@Dismantling class Session.
@
text
@a37 1
      myAttRepMgr  = new AttRepMgr  (this);
a55 1
      myAttRepMgr .shutDown ();
a73 5
   AttRepMgr getAttRepMgr ()
      {
      return myAttRepMgr;
      }

a93 8
//------------------------------------------------------------------------------
// myAttRepMgr.
//
// The AttRepMgr that belongs to this Session.
//------------------------------------------------------------------------------

   private final AttRepMgr myAttRepMgr;

@


1.30
log
@Session removal.
@
text
@a38 1
      myMessageMgr = new MessageMgr (this);
a56 1
      myMessageMgr.shutDown ();
a65 5
   MessageMgr getMessageMgr ()
      {
      return myMessageMgr;
      }

a108 8
//------------------------------------------------------------------------------
// myMessageMgr.
//
// The MessageMgr that belongs to this Session.
//------------------------------------------------------------------------------

   private final MessageMgr myMessageMgr;

@


1.29
log
@Moved self-test responsibility from class Session to class Problem.
@
text
@a34 2
      activeInstances.add (this);

a61 4

      assert (activeInstances.contains (this));

      activeInstances.remove (this);
a77 4
//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

a87 14
   static Session getStaticInstance ()
      {
      if (ourStaticInstance == null)
         {
         Problem theProblem;

         theProblem        = Problem.newInstance ();

         ourStaticInstance = new Session (theProblem);
         }

      return ourStaticInstance;
      }

a123 27
//------------------------------------------------------------------------------
// ourStaticInstance
//
// A Session to be used as needed by various static methods.
//------------------------------------------------------------------------------

   private static Session ourStaticInstance = null;

//------------------------------------------------------------------------------
// activeInstances
//
// The set of all Sessions in the program process that are currently active.
// Their presence in this Set prevents them from being garbage-collected until
// they are shut down.
//------------------------------------------------------------------------------

   private static final Set <Session> activeInstances;

//==============================================================================
// Static initialization block
//==============================================================================

   static
      {
      activeInstances = new HashSet <Session> (10);
      }

@


1.28
log
@Moved some responsibility from Session to Problem.
@
text
@d33 1
a33 1
   Session (boolean selfTestingState)
d37 1
a37 1
      selfTesting  = selfTestingState;
a84 15
// record (theProblem)
//
// Records the fact that theProblem has been created.
//------------------------------------------------------------------------------

   void record (Problem theProblem)
      {
      assert (theProblem.getSession () == this);

      assert (myProblem == null);

      myProblem = theProblem;
      }

//------------------------------------------------------------------------------
a97 5
   boolean isSelfTesting ()
      {
      return selfTesting;
      }

d101 7
a107 1
         ourStaticInstance = new Session (false);
d117 1
a117 1
// selfTesting
d119 1
a119 1
// True, iff this Session is currently performing a self-test.
d122 1
a122 1
   private final boolean selfTesting;
a148 8
// myProblem.
//
// The Problem that belongs to this Session, if any.
//------------------------------------------------------------------------------

   private Problem myProblem = null;

//------------------------------------------------------------------------------
@


1.27
log
@Removed class Session from the public interface.
@
text
@d30 1
a30 1
// Package-Internal Methods
d33 1
a33 7
//------------------------------------------------------------------------------
// newInstance ()
//
// Factory method: Constructs and returns a new Session.
//------------------------------------------------------------------------------

   static Session newInstance ()
d35 1
a35 2
      return new Session (false);
      }
d37 1
a37 6
//------------------------------------------------------------------------------
// selfTest ()
//
// Performs various tests of WIT-J that cannot be done by calling public
// methods.
//------------------------------------------------------------------------------
d39 4
a42 3
   static void selfTest ()
      {
      Session theSession;
d44 3
a46 24
      println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "Performing a self-test.\n"
         + "----------------------------------------"
         + "----------------------------------------");

      AttID.selfTest ();

      theSession = new Session (true);

      Problem.newInstance (theSession);

      theSession.getProblem ().shutDown ();

      println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "Self-test complete.\n"
         + "----------------------------------------"
         + "----------------------------------------");
      }
d113 1
a113 1
   boolean getSelfTestMode ()
d115 1
a115 1
      return mySelfTestMode;
a126 15
// Private Constructor
//==============================================================================

   private Session (boolean theSelfTestMode)
      {
      activeInstances.add (this);

      mySelfTestMode = theSelfTestMode;

      mySessionCOR   = new SessionCOR ();
      myAttRepMgr    = new AttRepMgr  (this);
      myMessageMgr   = new MessageMgr (this);
      }

//==============================================================================
d131 1
a131 1
// mySelfTestMode
d136 1
a136 1
   private final boolean mySelfTestMode;
@


1.26
log
@Attributes.
@
text
@d27 1
a27 1
public final class Session extends RetainedObject
d30 1
a30 1
// Public Methods
d39 1
a39 1
   public static Session newInstance ()
d47 1
a47 1
// Performs various tests of WIT-J that cannot be done by calling (other) public
d51 1
a51 1
   public static void selfTest ()
d69 1
a69 1
      theSession.shutDown ();
d90 1
a90 1
   public void shutDown ()
a91 5
      mustBeActive ("Session.shutDown");

      if (myProblem != null)
         myProblem.shutDown ();

a102 11
// toString ().
//
// Override from class Object.
//------------------------------------------------------------------------------

   public String toString ()
      {
      return "Session";
      }

//------------------------------------------------------------------------------
d106 1
a106 1
   public MessageMgr getMessageMgr ()
a107 2
      mustBeActive ("Session.getMessageMgr");

d111 1
a111 1
   public Problem getProblem ()
a112 2
      mustBeActive ("Session.getProblem");

a115 4
//==============================================================================
// Package-Internal Methods
//==============================================================================

@


1.25
log
@Implemented theAttribute.appliesTo (theClass).
@
text
@d63 1
a63 1
      Attribute.selfTest ();
@


1.24
log
@Changed ownership of AttRepMgr from Problem to Session.
@
text
@d174 8
d242 8
@


1.23
log
@Changed name of generic class AttSpec <V> to Attribute <V>.
@
text
@d98 1
d164 5
d185 1
d210 8
@


1.22
log
@Revised some of the calls to the overloaded member function
   theAtt->setValue (...) to disambiguate which function was being called.
@
text
@d63 1
a63 1
      AttSpec.selfTest ();
@


1.21
log
@Revised the check for garbage collection of an active object.
@
text
@a173 2
      assert (! activeInstances.contains (this));

@


1.20
log
@Minor revision.
@
text
@a135 21
// Protected Methods
//==============================================================================

//------------------------------------------------------------------------------
// finalize ()
//
// Override from class Object.
//------------------------------------------------------------------------------

   protected void finalize () throws Throwable
      {
      if (getActiveState ())
         {
         abortWmsg (
            "   Garbage-collection has been attempted on an active Session.");
         }

      super.finalize ();
      }

//==============================================================================
@


1.19
log
@Revised factory methods.
@
text
@d147 1
a147 1
      if (getActiveMode ())
@


1.18
log
@Added test for active Session at finalize time.
@
text
@d34 1
a34 1
// newSession ()
d39 1
a39 1
   public static Session newSession ()
d67 1
a67 1
      theSession.newProblem ();
a106 19
// newProblem ()
//
// Factory method:
// Cconstructs a new Problem for this Session and returns it.
//------------------------------------------------------------------------------

   public Problem newProblem ()
      {
      mustBeActive ("Session.newProblem");

      if (myProblem != null)
         abortWmsg (
            "   theSession.newProblem () was called\n"
          + "   with a Session that already has a Problem.");

      return new Problem (this);
      }

//------------------------------------------------------------------------------
@


1.17
log
@Moved unit test to class UnitTester.
@
text
@d155 21
@


1.16
log
@Minor revision.
@
text
@d4 2
@


1.15
log
@Call-back infrastructure.
@
text
@d67 1
a67 1
      theSession.shutDownAll ();
d79 3
a81 1
// shutDownAll ()
d88 1
a88 1
   public void shutDownAll ()
d90 10
a99 1
      mustBeActive ("Session.shutDownAll");
d101 1
a101 1
      shutDown ();
a171 20
// shutDown ().
//
// Override from class RetainedObject.
//------------------------------------------------------------------------------

   void shutDown ()
      {
      if (myProblem != null)
         myProblem.shutDown ();

      myMessageMgr.shutDown ();
      mySessionCOR.shutDown ();
      super       .shutDown ();

      assert (activeInstances.contains (this));

      activeInstances.remove (this);
      }

//------------------------------------------------------------------------------
@


1.14
log
@Numerous class name changes.
@
text
@a101 2
      Problem theProblem;

d109 1
a109 3
      myProblem = new Problem (this);

      return myProblem;
d146 15
@


1.13
log
@Class name change.
@
text
@d161 1
a161 1
      mySessionCI .shutDown ();
d173 1
a173 1
   SessionCI getSessionCI ()
d175 1
a175 1
      return mySessionCI;
d195 2
a196 2
      mySessionCI  = new SessionCI  ();
      myMessageMgr = new MessageMgr (this);
d212 1
a212 1
// mySessionCI.
d214 1
a214 1
// The C++ Session interface that belongs to this Session.
d217 1
a217 1
   private final SessionCI mySessionCI;
@


1.12
log
@Class name changes.
@
text
@d131 1
a131 1
   public MessageManager getMessageManager ()
d133 1
a133 1
      mustBeActive ("Session.getMessageManager");
d135 1
a135 1
      return myMessageManager;
d160 3
a162 3
      myMessageManager.shutDown ();
      mySessionCI     .shutDown ();
      super           .shutDown ();
d195 2
a196 2
      mySessionCI      = new SessionCI      ();
      myMessageManager = new MessageManager (this);
d220 1
a220 1
// myMessageManager.
d222 1
a222 1
// The MessageManager that belongs to this Session.
d225 1
a225 1
   private final MessageManager myMessageManager;
@


1.11
log
@Implemented theMsgHandler.flushFile ().
@
text
@d131 1
a131 1
   public MsgHandler getMsgHandler ()
d133 1
a133 1
      mustBeActive ("Session.getMsgHandler");
d135 1
a135 1
      return myMsgHandler;
d160 3
a162 3
      myMsgHandler.shutDown ();
      mySessionCI .shutDown ();
      super       .shutDown ();
d195 2
a196 2
      mySessionCI    = new SessionCI ();
      myMsgHandler   = new MsgHandler (this);
d220 1
a220 1
// myMsgHandler.
d222 1
a222 1
// The MsgHandler that belongs to this Session.
d225 1
a225 1
   private final MsgHandler myMsgHandler;
@


1.10
log
@Initial implementation of MsgHandler classes.
@
text
@d131 7
d140 2
@


1.9
log
@Active state / shutDown method.
@
text
@a140 13
// store (theProblem)
//
// Sets myProblem to theProblem.
//------------------------------------------------------------------------------

   void store (Problem theProblem)
      {
      assert (myProblem == null);

      myProblem = theProblem;
      }

//------------------------------------------------------------------------------
d151 1
d187 1
d211 8
d221 1
a221 1
// The Problem the belongs to this Session, if any.
d224 1
a224 1
   Problem myProblem = null;
@


1.8
log
@Revised the factory methods.
@
text
@d67 1
a67 1
      theSession.releaseAll ();
d79 1
a79 1
// releaseAll ()
d81 1
a81 1
// Releases this Session andthe objects it owns.
d86 1
a86 1
   public void releaseAll ()
d88 1
a88 1
      mustBeUnreleased ("Session.releaseAll");
d90 1
a90 1
      release ();
d104 1
a104 1
      mustBeUnreleased ("Session.newProblem");
d154 1
a154 1
// release ().
d159 1
a159 1
   void release ()
d162 1
a162 1
         myProblem.release ();
d164 2
a165 2
      mySessionCI .release ();
      super       .release ();
d167 1
a167 1
      assert (unreleasedInstances.contains (this));
d169 1
a169 1
      unreleasedInstances.remove (this);
d192 1
a192 1
      assert (! unreleasedInstances.contains (this));
d194 1
a194 1
      unreleasedInstances.add (this);
d230 1
a230 1
// unreleasedInstances
d232 3
a234 3
// The set of all Sessions in the program process that have not yet been
// released. Their presence in this Set prevents them from being
// garbage-collected until they are released.
d237 1
a237 1
   private static final Set <Session> unreleasedInstances;
d245 1
a245 1
      unreleasedInstances = new HashSet <Session> (10);
@


1.7
log
@Disallowed creating a Problem for a Session that already has one.
@
text
@d32 1
a32 1
// makeInstance ()
d37 1
a37 1
   public static Session makeInstance ()
d65 1
a65 1
      Problem.makeInstance (theSession);
d94 23
@


1.6
log
@Initial implementation of creating a Session without a Problem.
@
text
@a117 19
// clearProblem ()
//
// Releases myProblem and clears the reference to it.
// Does nothing, if myProblem is null.
//------------------------------------------------------------------------------

   void clearProblem ()
      {
      if (myProblem == null)
         return;

      mySessionCI.clearProblem ();

      myProblem  .release ();

      myProblem = null;
      }

//------------------------------------------------------------------------------
@


1.5
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@d16 2
a17 1
// Each instance corresponds to a WitRun.
d55 7
a61 1
         + "Performing self-test.");
d64 12
d118 32
d157 5
a161 3
      myProblem  .release ();
      mySessionCI.release ();
      super      .release ();
a194 5

      myProblem      = new Problem (this);

      if (mySelfTestMode)
         AttSpec.selfTest ();
d220 1
a220 1
// The Problem the belongs to this Session.
d223 1
a223 1
   final Problem myProblem;
@


1.4
log
@Moved onwership of the ProbCoordCI from class Problem to class Session.
@
text
@d16 1
a16 1
// A WIT-J Session corresponds to a WIT WitRun.
d106 3
a108 3
      myProblem    .release ();
      myProbCoordCI.release ();
      super        .release ();
d119 1
a119 1
   ProbCoordCI getProbCoordCI ()
d121 1
a121 1
      return myProbCoordCI;
d141 1
a141 1
      myProbCoordCI  = new ProbCoordCI ();
d162 1
a162 1
// myProbCoordCI.
d164 1
a164 1
// The C++ ProbCoord interface that belongs to this Session.
d167 1
a167 1
   private final ProbCoordCI myProbCoordCI;
@


1.3
log
@Removed Java class SessionCI.
Removed C++  class Session.
Kept the empty source files.
@
text
@d106 3
a108 2
      myProblem.release ();
      super    .release ();
d119 5
d141 2
d162 8
@


1.2
log
@Removed Java class ProbCoord.
@
text
@d106 2
a107 3
      myProblem  .release ();
      mySessionCI.release ();
      super      .release ();
a136 2
      mySessionCI    = new SessionCI (myProblem.getProbCoordCI ());

a161 8
// mySessionCI.
//
// The C++ Session interface that belongs to this Session.
//------------------------------------------------------------------------------

   final SessionCI mySessionCI;

//------------------------------------------------------------------------------
@


1.1
log
@Initial implementation of the Session classes.
@
text
@d10 2
a94 12
// Package-Internal Constructor
//==============================================================================

   Session (boolean selfTestModeVal)
      {
      myProblem   = new Problem (this, selfTestModeVal);

      mySessionCI =
         new SessionCI (myProblem.getProbCoord ().getProbCoordCI ());
      }

//==============================================================================
d109 33
d149 8
d172 19
@

