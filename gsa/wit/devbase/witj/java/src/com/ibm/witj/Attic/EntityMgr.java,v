head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.10.07.18.50.27;	author rjw;	state dead;
branches;
next	1.1;

1.1
date	2008.10.06.22.14.06;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Name change.
@
text
@
//==============================================================================
// WIT-J Java Source File EntityMgr.java.
//
// Contains the declaration of class EntityMgr.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import           java.util.*;

//==============================================================================
// Class EntityMgr
//
// "Entity Manager"
// Coordinates the Entities of a Problem.
//
// Class Hierarchy:
//
//    RetainedObject
//       EntityMgr
//==============================================================================

final class EntityMgr extends RetainedObject
{
//==============================================================================
// Package-Internal Constructor
//==============================================================================

   EntityMgr (Problem theProblem)
      {
      myProblem  = theProblem;

      myEntities = new ArrayList <Entity> ();

      myPartMap  = new HashMap <String, Part>      ();
      myOpnMap   = new HashMap <String, Operation> ();

      new GlobalEntity (this);
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// shutDown ().
//
// Override from class RetainedObject.
//------------------------------------------------------------------------------

   void shutDown ()
      {
      int theIdx;

      for (theIdx = myEntities.size () - 1; theIdx >= 0; theIdx --)
         {
         myEntities.get (theIdx).shutDown ();
         }

      myEntities.clear ();

      super.shutDown ();
      }

//------------------------------------------------------------------------------
// record (theEntity)
//
// Records the fact that theEntity has been created.
//------------------------------------------------------------------------------

   void record (Entity theEntity)
      {
      assert (theEntity.getEntityMgr () == this);

      myEntities.add (theEntity);
      }

//------------------------------------------------------------------------------
// record (theGlobalEntity)
//
// Records the fact that theGlobalEntity has been created.
//------------------------------------------------------------------------------

   void record (GlobalEntity theGlobalEntity)
      {
      assert (theGlobalEntity.getEntityMgr () == this);

      assert (myGlobalEntity == null);

      myGlobalEntity = theGlobalEntity;
      }

//------------------------------------------------------------------------------
// record (thePart)
//
// Records the fact that thePart has been created.
//------------------------------------------------------------------------------

   void record (Part thePart)
      {
      assert (thePart.getEntityMgr () == this);

      myPartMap.put (thePart.getPartName (), thePart);
      }

//------------------------------------------------------------------------------
// record (theOpn)
//
// Records the fact that theOpn has been created.
//------------------------------------------------------------------------------

   void record (Operation theOpn)
      {
      assert (theOpn.getEntityMgr () == this);

      myOpnMap.put (theOpn.getOperationName (), theOpn);
      }

//------------------------------------------------------------------------------
// getPart (thePartName)
//
// Returns the Part that belongs to this EntityMgr whose PartName matches
// thePartName, if any; otherwise null.
//------------------------------------------------------------------------------

   Part getPart (String thePartName)
      {
      return myPartMap.get (thePartName);
      }

//------------------------------------------------------------------------------
// getOperation (theOpnName)
//
// Returns the Operation that belongs to this EntityMgr whose OperationName
// matches theOpnName, if any; otherwise null.
//------------------------------------------------------------------------------

   Operation getOperation (String theOpnName)
      {
      return myOpnMap.get (theOpnName);
      }

//------------------------------------------------------------------------------
// hasPartsOpns ()
//
// Returns true, iff this EntityMgr owns at least one Part or Operation.
//------------------------------------------------------------------------------

   boolean hasPartsOpns ()
      {
      return (myEntities.size () > 1);
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   Problem getProblem ()
      {
      return myProblem;
      }

   Entity[] getEntities ()
      {
      return myEntities.toArray (new Entity[0]);
      }

   GlobalEntity getGlobalEntity ()
      {
      return myGlobalEntity;
      }

//==============================================================================
// Private Fields
//==============================================================================
 
//------------------------------------------------------------------------------
// myProblem.
//
// The Problem that owns this EntityMgr.
//------------------------------------------------------------------------------

   private final Problem myProblem;

//------------------------------------------------------------------------------
// myEntities.
//
// The list of all Entities that belong to this EntityMgr.
//------------------------------------------------------------------------------

   private final List <Entity> myEntities;

//------------------------------------------------------------------------------
// myGlobalEntity.
//
// The GlobalEntity responsible for working with global attributes of the
// Problem.
//------------------------------------------------------------------------------

   private GlobalEntity myGlobalEntity = null;

//------------------------------------------------------------------------------
// myPartMap
//
// myPartMap.get (thePartName) is the Part that belongs to this EntityMgr whose
// PartName matches thePartName, if any; otherwise null.
//------------------------------------------------------------------------------

   private final Map <String, Part> myPartMap;

//------------------------------------------------------------------------------
// myOpnMap
//
// myOpnMap.get (theOpnName) is the Operation that belongs to this EntityMgr
// whose OperationName matches theOpnName, if any; otherwise null.
//------------------------------------------------------------------------------

   private final Map <String, Operation> myOpnMap;

//------------------------------------------------------------------------------
}
@


1.1
log
@Changed name of Component to Entity.
@
text
@@

