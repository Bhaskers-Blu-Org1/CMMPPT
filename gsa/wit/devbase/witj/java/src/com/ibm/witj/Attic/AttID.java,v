head	1.72;
access;
symbols;
locks; strict;
comment	@# @;


1.72
date	2009.06.12.21.22.19;	author rjw;	state dead;
branches;
next	1.71;

1.71
date	2009.06.12.20.33.41;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2009.06.11.23.19.29;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2009.06.11.22.13.11;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2009.06.11.20.11.47;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2009.06.11.20.00.28;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2009.06.11.19.39.13;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2009.06.11.18.59.56;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2009.05.05.17.56.47;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2009.05.04.21.49.56;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2009.03.16.19.35.44;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2009.01.07.18.21.28;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2009.01.06.23.45.59;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2008.12.08.23.15.49;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2008.12.05.00.04.32;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2008.11.21.23.07.39;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2008.11.21.15.29.01;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2008.11.20.22.07.22;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2008.11.14.21.47.41;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2008.11.14.20.37.42;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2008.11.13.23.29.54;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2008.11.13.17.14.37;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2008.11.13.16.37.33;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2008.11.13.16.27.03;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2008.11.13.15.04.29;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2008.08.22.17.53.45;	author rjw;	state dead;
branches;
next	1.46;

1.46
date	2008.08.21.20.53.11;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2008.08.20.18.49.24;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2008.08.19.19.20.27;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2008.08.19.16.28.51;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2008.08.18.22.16.56;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2008.08.09.00.18.27;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2008.08.07.15.25.49;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2008.08.01.21.57.44;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2008.08.01.21.38.54;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.08.01.18.19.22;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.08.01.17.56.30;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2008.07.30.20.03.57;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.07.24.21.09.30;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.07.24.20.19.49;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.07.23.22.13.22;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.07.14.21.14.21;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.07.14.19.28.23;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.07.11.21.16.19;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.07.11.17.42.12;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.07.10.20.04.36;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.07.10.19.07.18;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.07.09.20.41.31;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.07.09.15.59.49;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.07.09.15.45.39;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.07.08.19.31.01;	author rjw;	state dead;
branches;
next	1.21;

1.21
date	2008.07.08.18.26.01;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.07.07.18.41.50;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.07.03.22.35.47;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.07.03.19.45.25;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.07.02.19.41.21;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.07.02.18.17.47;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.06.30.22.02.10;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.27.21.43.24;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.26.19.18.07;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.26.14.04.56;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.25.21.43.50;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.25.19.47.26;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.25.16.15.39;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.25.15.01.51;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.25.14.46.34;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.24.22.16.54;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.24.18.18.46;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2008.06.19.22.16.55;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.19.20.15.06;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.18.21.28.19;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.12.21.16.40;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.72
log
@Removed enum AttID.
@
text
@
//==============================================================================
// WIT-J Java Source File AttID.java.
//
// Contains the declaration of Enum AttID.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;
import static com.ibm.witj.DefaultCase.*;
import static com.ibm.witj.CompClassID.*;

//==============================================================================
// Enum AttID
//
// Identifies an Attribute.
//==============================================================================

enum AttID
{
//==============================================================================
// Enum Constants
//==============================================================================

   accAfterOptImp      (Attribute.accAfterOptImp),
   accAfterSoftLB      (Attribute.accAfterSoftLB),
   accelerated         (Attribute.accelerated),
   asapPipOrder        (Attribute.asapPipOrder),
   autoPriority        (Attribute.autoPriority),
   bomIndex            (Attribute.bomIndex),
   bopIndex            (Attribute.bopIndex),
   boundsValue         (Attribute.boundsValue),
   buildAheadUB        (Attribute.buildAheadUB),
   buildAsap           (Attribute.buildAsap),
   buildNstn           (Attribute.buildNstn),
   compPrices          (Attribute.compPrices),
   computeCriticalList (Attribute.computeCriticalList),
   consRate            (Attribute.consRate),
   consVol             (Attribute.consVol),
   cumShipBounds       (Attribute.cumShipBounds),
   cumShipReward       (Attribute.cumShipReward),
   currentScenario     (Attribute.currentScenario),
   demandName          (Attribute.demandName),
   demandVol           (Attribute.demandVol),
   earliestPeriod      (Attribute.earliestPeriod),
   equitability        (Attribute.equitability),
   excessVol           (Attribute.excessVol),
   execBounds          (Attribute.execBounds),
   execCost            (Attribute.execCost),
   execEmptyBom        (Attribute.execEmptyBom),
   execPenalty         (Attribute.execPenalty),
   execVol             (Attribute.execVol),
   executable          (Attribute.executable),
   expAllowed          (Attribute.expAllowed),
   expAversion         (Attribute.expAversion),
   expCutoff           (Attribute.expCutoff),
   expNetAversion      (Attribute.expNetAversion),
   extOptActive        (Attribute.extOptActive),
   falloutRate         (Attribute.falloutRate),
   feasible            (Attribute.feasible),
   focusHorizon        (Attribute.focusHorizon),
   focusShortageVol    (Attribute.focusShortageVol),
   forcedMultiEq       (Attribute.forcedMultiEq),
   fssExecVol          (Attribute.fssExecVol),
   fssShipVol          (Attribute.fssShipVol),
   fssSubVol           (Attribute.fssSubVol),
   heurAllocActive     (Attribute.heurAllocActive),
   highPrecisionWD     (Attribute.highPrecisionWD),
   impactPeriod        (Attribute.impactPeriod),
   incLotSize          (Attribute.incLotSize),
   incLotSize2         (Attribute.incLotSize2),
   independentOffsets  (Attribute.independentOffsets),
   intExecVols         (Attribute.intExecVols),
   intShipVols         (Attribute.intShipVols),
   intSubVols          (Attribute.intSubVols),
   latestPeriod        (Attribute.latestPeriod),
   lotSize2Thresh      (Attribute.lotSize2Thresh),
   lotSizeTol          (Attribute.lotSizeTol),
   mandEC              (Attribute.mandEC),
   minLotSize          (Attribute.minLotSize),
   minLotSize2         (Attribute.minLotSize2),
   minimalExcess       (Attribute.minimalExcess),
   mipMode             (Attribute.mipMode),
   mrpConsVol          (Attribute.mrpConsVol),
   mrpExcessVol        (Attribute.mrpExcessVol),
   mrpExecVol          (Attribute.mrpExecVol),
   mrpNetAllowed       (Attribute.mrpNetAllowed),
   mrpResidualVol      (Attribute.mrpResidualVol),
   mrpSubVol           (Attribute.mrpSubVol),
   multiExec           (Attribute.multiExec),
   multiRoute          (Attribute.multiRoute),
   nPeriods            (Attribute.nPeriods),
   nScenarios          (Attribute.nScenarios),
   netAllowed          (Attribute.netAllowed),
   nstnResidual        (Attribute.nstnResidual),
   objValue            (Attribute.objValue),
   objectStage         (Attribute.objectStage),
   offset              (Attribute.offset),
   operationName       (Attribute.operationName),
   partName            (Attribute.partName),
   penExec             (Attribute.penExec),
   perfPegging         (Attribute.perfPegging),
   periodStage         (Attribute.periodStage),
   pgdCritListMode     (Attribute.pgdCritListMode),
   pipExists           (Attribute.pipExists),
   pipSeqFromHeur      (Attribute.pipSeqFromHeur),
   postprocessed       (Attribute.postprocessed),
   prefHighStockSLBs   (Attribute.prefHighStockSLBs),
   preprocessed        (Attribute.preprocessed),
   priority            (Attribute.priority),
   probability         (Attribute.probability),
   prodVol             (Attribute.prodVol),
   productRate         (Attribute.productRate),
   propRtg             (Attribute.propRtg),
   reqVol              (Attribute.reqVol),
   residualVol         (Attribute.residualVol),
   respectStockSLBs    (Attribute.respectStockSLBs),
   roundReqVols        (Attribute.roundReqVols),
   routingShare        (Attribute.routingShare),
   scrapAllowed        (Attribute.scrapAllowed),
   scrapCost           (Attribute.scrapCost),
   scrapVol            (Attribute.scrapVol),
   searchInc           (Attribute.searchInc),
   selForDel           (Attribute.selForDel),
   selSplit            (Attribute.selSplit),
   shadowPrice         (Attribute.shadowPrice),
   shipLateAllowed     (Attribute.shipLateAllowed),
   shipLateUB          (Attribute.shipLateUB),
   shipReward          (Attribute.shipReward),
   shipVol             (Attribute.shipVol),
   singleSource        (Attribute.singleSource),
   skipFailures        (Attribute.skipFailures),
   solverLogFileName   (Attribute.solverLogFileName),
   stageByObject       (Attribute.stageByObject),
   stochMode           (Attribute.stochMode),
   stochSolnMode       (Attribute.stochSolnMode),
   stockBounds         (Attribute.stockBounds),
   stockCost           (Attribute.stockCost),
   stockReallocation   (Attribute.stockReallocation),
   stockVol            (Attribute.stockVol),
   subCost             (Attribute.subCost),
   subIndex            (Attribute.subIndex),
   subVol              (Attribute.subVol),
   supplyVol           (Attribute.supplyVol),
   tieBreakPropRt      (Attribute.tieBreakPropRt),
   title               (Attribute.title),
   truncOffsets        (Attribute.truncOffsets),
   twoLevelLotSizes    (Attribute.twoLevelLotSizes),
   twoWayMultiExec     (Attribute.twoWayMultiExec),
   useFocusHorizons    (Attribute.useFocusHorizons),
   userHeurStart       (Attribute.userHeurStart),
   wbounds             (Attribute.wbounds),
   yieldRate           (Attribute.yieldRate),
   ;

//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// toString ()
//
// Override from class Object.
// Not to be called.
//------------------------------------------------------------------------------

   public String toString ()
      {
      try
         {
         internalError ("   AttID.toString () was invoked.");

         return null;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// Accessors
//------------------------------------------------------------------------------

   Attribute <?> getAttribute ()
      {
      return myAttribute;
      }

//==============================================================================
// Private Constructors
//
// Each constructor constructs an AttID for an Attribute <V>, where V matches
// theValueType.
// The first constructor constructs an AttID for an Attribute whose default
// value is a specific value, given by theDefValue.
// The second constructor constructs an AttID for an Attribute whose default
// value is not a specific value, and whose DefaultCase is given by
// theDefaultCase.
// theCompClassIDs specify the set of Component classes to which the Attribute
// will apply.
//==============================================================================

   AttID (
         Class <?>      theValueType,
         Object         theDefValue,
         CompClassID... theCompClassIDs)
      {
      myAttribute =
         Attribute.
            newInstance (name (), theValueType, theDefValue, theCompClassIDs);
      }

   AttID (
         Class <?>      theValueType,
         DefaultCase    theDefaultCase,
         CompClassID... theCompClassIDs)
      {
      myAttribute =
         Attribute.
            newInstance (
               name (),
               theValueType,
               theDefaultCase,
               theCompClassIDs);
      }

//==============================================================================
// Private Constructor
//==============================================================================

   AttID (Attribute <?> theAtt)
      {
      myAttribute = theAtt;
      }

//==============================================================================
// Private Fields
//==============================================================================
 
//------------------------------------------------------------------------------
// myAttribute
//
// The Attribute identified by this AttID.
//------------------------------------------------------------------------------

   private final Attribute <?> myAttribute;

//==============================================================================
// Static initialization block
//==============================================================================

   static
      {
      Attribute.overrideModifiable  ();
      Attribute.defMaterialPartAtts ();
      Attribute.defStochModeAtts    ();
      }

//==============================================================================
}
@


1.71
log
@AttID to Attribute.
@
text
@@


1.70
log
@AttID to Attribute.
@
text
@d26 129
a154 152
   accAfterOptImp      (Boolean  .class,        false, GLOBAL_ASPECT),
   accAfterSoftLB      (Boolean  .class,        false, GLOBAL_ASPECT),
   accelerated         (Boolean  .class,   NO_DEFAULT, GLOBAL_ASPECT),
   asapPipOrder        (Boolean  .class,        false, PART         ),
   autoPriority        (Boolean  .class,        false, GLOBAL_ASPECT),
   bomIndex            (Integer  .class,   NO_DEFAULT, BOM_ENTRY    ),
   bopIndex            (Integer  .class,   NO_DEFAULT, BOP_ENTRY    ),
   boundsValue         (Double   .class,   NO_DEFAULT, GLOBAL_ASPECT),
   buildAheadUB        (int[]    .class,  LAST_PERIOD, PART         ),
   buildAsap           (Boolean  .class,        false, PART         ),
   buildNstn           (Boolean  .class,        false, PART         ),
   compPrices          (Boolean  .class,        false, GLOBAL_ASPECT),
   computeCriticalList (Boolean  .class,        false, GLOBAL_ASPECT),
   consRate            (double[] .class,          1.0, BOM_ENTRY,
                                                       SUBSTITUTE   ),
   consVol             (double[] .class,   NO_DEFAULT, PART         ),
   cumShipBounds       (BoundSet .class,    BOUND_SET, DEMAND       ),
   cumShipReward       (double[] .class,          0.0, DEMAND       ),
   currentScenario     (Integer  .class,            0, GLOBAL_ASPECT),
   demandName          (String   .class,   NO_DEFAULT, DEMAND       ),
   demandVol           (double[] .class,          0.0, DEMAND       ),
   earliestPeriod      (Integer  .class,            0, BOM_ENTRY,
                                                       SUBSTITUTE,
                                                       BOP_ENTRY    ),
   equitability        (Integer  .class,            1, GLOBAL_ASPECT),
   excessVol           (double[] .class,   NO_DEFAULT, PART         ),
   execBounds          (BoundSet .class,    BOUND_SET, OPERATION    ),
   execCost            (double[] .class,          0.0, OPERATION    ),
   execEmptyBom        (Boolean  .class,         true, GLOBAL_ASPECT),
   execPenalty         (Double   .class,          0.0, OPERATION,
                                                       BOM_ENTRY,
                                                       SUBSTITUTE),
   execVol             (double[] .class,          0.0, OPERATION    ),
   executable          (boolean[].class,   NO_DEFAULT, OPERATION    ),
   expAllowed          (Boolean  .class,         true, SUBSTITUTE,
                                                       BOP_ENTRY    ),
   expAversion         (Double   .class,          0.0, BOP_ENTRY    ),
   expCutoff           (Double   .class,         0.01, GLOBAL_ASPECT),
   expNetAversion      (Double   .class,          0.0, SUBSTITUTE   ),
   extOptActive        (Boolean  .class,   NO_DEFAULT, GLOBAL_ASPECT),
   falloutRate         (Double   .class,          0.0, BOM_ENTRY,
                                                       SUBSTITUTE   ),
   feasible            (Boolean  .class,   NO_DEFAULT, GLOBAL_ASPECT),
   focusHorizon        (Integer  .class,           -1, DEMAND       ),
   focusShortageVol    (double[] .class,   NO_DEFAULT, PART         ),
   forcedMultiEq       (Boolean  .class,        false, GLOBAL_ASPECT),
   fssExecVol          (double[] .class,   NO_DEFAULT, OPERATION    ),
   fssShipVol          (double[] .class,          0.0, DEMAND       ),
   fssSubVol           (double[] .class,   NO_DEFAULT, SUBSTITUTE   ),
   heurAllocActive     (Boolean  .class,   NO_DEFAULT, GLOBAL_ASPECT),
   highPrecisionWD     (Boolean  .class,        false, GLOBAL_ASPECT),
   impactPeriod        (int[]    .class,   NO_DEFAULT, BOM_ENTRY,
                                                       SUBSTITUTE,
                                                       BOP_ENTRY    ),
   incLotSize          (double[] .class,          0.0, OPERATION    ),
   incLotSize2         (double[] .class,          0.0, OPERATION    ),
   independentOffsets  (Boolean  .class,        false, GLOBAL_ASPECT),
   intExecVols         (Boolean  .class,        false, OPERATION    ),
   intShipVols         (Boolean  .class,        false, DEMAND       ),
   intSubVols          (Boolean  .class,        false, SUBSTITUTE   ),
   latestPeriod        (Integer  .class,  LAST_PERIOD, BOM_ENTRY,
                                                       SUBSTITUTE,
                                                       BOP_ENTRY    ),
   lotSize2Thresh      (double[] .class,          0.0, OPERATION    ),
   lotSizeTol          (Double   .class,      0.00001, GLOBAL_ASPECT),
   mandEC              (Boolean  .class,        false, BOM_ENTRY    ),
   minLotSize          (double[] .class,          0.0, OPERATION    ),
   minLotSize2         (double[] .class,          0.0, OPERATION    ),
   minimalExcess       (Boolean  .class,        false, GLOBAL_ASPECT),
   mipMode             (Boolean  .class,        false, GLOBAL_ASPECT),
   mrpConsVol          (double[] .class,   NO_DEFAULT, PART         ),
   mrpExcessVol        (double[] .class,   NO_DEFAULT, PART         ),
   mrpExecVol          (double[] .class,   NO_DEFAULT, OPERATION    ),
   mrpNetAllowed       (Boolean  .class,        false, SUBSTITUTE   ),
   mrpResidualVol      (double[] .class,   NO_DEFAULT, PART         ),
   mrpSubVol           (double[] .class,   NO_DEFAULT, SUBSTITUTE   ),
   multiExec           (Boolean  .class,        false, GLOBAL_ASPECT),
   multiRoute          (Boolean  .class,        false, GLOBAL_ASPECT),
   nPeriods            (Integer  .class,           26, GLOBAL_ASPECT),
   nScenarios          (Integer  .class,            1, GLOBAL_ASPECT),
   netAllowed          (Boolean  .class,         true, SUBSTITUTE   ),
   nstnResidual        (Boolean  .class,        false, GLOBAL_ASPECT),
   objValue            (Double   .class,   NO_DEFAULT, GLOBAL_ASPECT),
   objectStage         (Integer  .class,            0, PART,
                                                       OPERATION    ),
   offset              (double[] .class,          0.0, BOM_ENTRY,
                                                       SUBSTITUTE,
                                                       BOP_ENTRY    ),
   operationName       (String   .class,   NO_DEFAULT, OPERATION    ),
   partName            (String   .class,   NO_DEFAULT, PART         ),
   penExec             (Boolean  .class,        false, GLOBAL_ASPECT),
   perfPegging         (Boolean  .class,        false, GLOBAL_ASPECT),
   periodStage         (int[]    .class,            0, GLOBAL_ASPECT),
   pgdCritListMode     (Boolean  .class,        false, GLOBAL_ASPECT),
   pipExists           (Boolean  .class,   NO_DEFAULT, GLOBAL_ASPECT),
   pipSeqFromHeur      (Boolean  .class,        false, GLOBAL_ASPECT),
   postprocessed       (Boolean  .class,   NO_DEFAULT, GLOBAL_ASPECT),
   prefHighStockSLBs   (Boolean  .class,        false, GLOBAL_ASPECT),
   preprocessed        (Boolean  .class,   NO_DEFAULT, GLOBAL_ASPECT),
   priority            (int[]    .class,            0, DEMAND       ),
   probability         (Double   .class,          1.0, GLOBAL_ASPECT),
   prodVol             (double[] .class,   NO_DEFAULT, PART         ),
   productRate         (double[] .class,          1.0, BOP_ENTRY    ),
   propRtg             (boolean[].class,        false, PART,
                                                       BOM_ENTRY    ),
   reqVol              (double[] .class,   NO_DEFAULT, PART         ),
   residualVol         (double[] .class,   NO_DEFAULT, PART         ),
   respectStockSLBs    (Boolean  .class,        false, GLOBAL_ASPECT),
   roundReqVols        (Boolean  .class,        false, GLOBAL_ASPECT),
   routingShare        (double[] .class,          1.0, BOM_ENTRY,
                                                       SUBSTITUTE,
                                                       BOP_ENTRY    ),
   scrapAllowed        (Boolean  .class,         true, PART         ),
   scrapCost           (double[] .class,          0.0, PART         ),
   scrapVol            (double[] .class,   NO_DEFAULT, PART         ),
   searchInc           (Double   .class,          1.0, DEMAND       ),
   selForDel           (Boolean  .class,        false, PART,
                                                       DEMAND,
                                                       OPERATION,
                                                       BOM_ENTRY,
                                                       SUBSTITUTE,
                                                       BOP_ENTRY    ),
   selSplit            (Boolean  .class,        false, GLOBAL_ASPECT),
   shadowPrice         (double[] .class,   NO_DEFAULT, PART         ),
   shipLateAllowed     (Boolean  .class,         true, DEMAND       ),
   shipLateUB          (int[]    .class,  LAST_PERIOD, DEMAND       ),
   shipReward          (double[] .class,          0.0, DEMAND       ),
   shipVol             (double[] .class,          0.0, DEMAND       ),
   singleSource        (Boolean  .class,        false, PART,
                                                       BOM_ENTRY    ),
   skipFailures        (Boolean  .class,         true, GLOBAL_ASPECT),
   solverLogFileName   (String   .class, "solver.log", GLOBAL_ASPECT),
   stageByObject       (Boolean  .class,        false, GLOBAL_ASPECT),
   stochMode           (Boolean  .class,        false, GLOBAL_ASPECT),
   stochSolnMode       (Boolean  .class,   NO_DEFAULT, GLOBAL_ASPECT),
   stockBounds         (BoundSet .class,    BOUND_SET, PART         ),
   stockCost           (double[] .class,          0.0, PART         ),
   stockReallocation   (Boolean  .class,        false, GLOBAL_ASPECT),
   stockVol            (double[] .class,   NO_DEFAULT, PART         ),
   subCost             (double[] .class,          0.0, SUBSTITUTE   ),
   subIndex            (Integer  .class,   NO_DEFAULT, SUBSTITUTE   ),
   subVol              (double[] .class,          0.0, SUBSTITUTE   ),
   supplyVol           (double[] .class,          0.0, PART         ),
   tieBreakPropRt      (Boolean  .class,        false, GLOBAL_ASPECT),
   title               (String   .class,   "Untitled", GLOBAL_ASPECT),
   truncOffsets        (Boolean  .class,        false, GLOBAL_ASPECT),
   twoLevelLotSizes    (Boolean  .class,        false, OPERATION    ),
   twoWayMultiExec     (Boolean  .class,        false, GLOBAL_ASPECT),
   useFocusHorizons    (Boolean  .class,         true, GLOBAL_ASPECT),
   userHeurStart       (Boolean  .class,        false, GLOBAL_ASPECT),
   wbounds             (Double   .class,      10000.0, GLOBAL_ASPECT),
   yieldRate           (double[] .class,          1.0, OPERATION    ),
d235 9
@


1.69
log
@AttID to Attribute.
@
text
@d240 1
a240 6
            newInstance (
               name (),
               theValueType,
               this,
               theDefValue,
               theCompClassIDs);
a252 1
               this,
d275 3
a277 3
      Attribute.overrideModifiable    ();
      Attribute.defMaterialPartAttIDs ();
      Attribute.defStochModeAttIDs    ();
@


1.68
log
@AttID to Attribute.
@
text
@d181 26
d240 6
a245 1
            newInstance (theValueType, this, theDefValue, theCompClassIDs);
d255 6
a260 1
            newInstance (theValueType, this, theDefaultCase, theCompClassIDs);
@


1.67
log
@Moved more responsibility from AttID to Attribute.
@
text
@a184 11
// selfTest ()
//
// Does self-test for AttIDs.
//------------------------------------------------------------------------------

   static void selfTest ()
      {
      checkAlphaOrder ();
      }

//------------------------------------------------------------------------------
a227 38
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// checkAlphaOrder ()
//
// Verifies that the Attributes (AttIDs) are listed in alphabetical order.
//------------------------------------------------------------------------------

   private static void checkAlphaOrder ()
      {
      String theAttName;
      String prevAttName = null;

      println (
           "\n"
         + "Verifying that the Attributes are listed in alphabetical order.\n");

      for (AttID theAttID: values ())
         {
         theAttName = theAttID.toString ();

         if (prevAttName != null)
            if (theAttName.compareTo (prevAttName) < 0)
               internalError (
                    "   An AttID was found whose name is alphabetically\n"
                  + "   earlier than that of the preceding AttID.\n"
                  + "\n"
                  + "      Preceding AttID: " + prevAttName + "\n"
                  + "      Current   AttID: " + theAttName);

         prevAttName = theAttName;
         }

      println ("Verified: The Attributes are listed in alphabetical order.");
      }

//==============================================================================
@


1.66
log
@Moaved isModifiable from enum AttID to class Attribute.
@
text
@a203 10
   boolean requiresMaterialPart ()
      {
      return thisRequiresMaterialPart;
      }

   boolean requiresStochMode ()
      {
      return thisRequiresStochMode;
      }

a242 32
// defMaterialPartAttIDs ()
//
// Sets the thisRequiresMaterialPart field to true, for the appropriate AttIDs.
//------------------------------------------------------------------------------

   private static void defMaterialPartAttIDs ()
      {
      asapPipOrder.thisRequiresMaterialPart = true;
      buildAheadUB.thisRequiresMaterialPart = true;
      buildAsap   .thisRequiresMaterialPart = true;
      buildNstn   .thisRequiresMaterialPart = true;
      stockBounds .thisRequiresMaterialPart = true;
      stockCost   .thisRequiresMaterialPart = true;
      stockVol    .thisRequiresMaterialPart = true;
      }

//------------------------------------------------------------------------------
// defStochModeAttIDs ()
//
// Sets the thisRequiresStochMode field to true, for the appropriate AttIDs.
//------------------------------------------------------------------------------

   private static void defStochModeAttIDs ()
      {
      currentScenario.thisRequiresStochMode = true;
      objectStage    .thisRequiresStochMode = true;
      periodStage    .thisRequiresStochMode = true;
      probability    .thisRequiresStochMode = true;
      stochSolnMode  .thisRequiresStochMode = true;
      }

//------------------------------------------------------------------------------
a287 18
//------------------------------------------------------------------------------
// thisRequiresMaterialPart
//
// true, iff the Attribute identified by this AttID applies only to Parts of
// Category MATERIAL.
//------------------------------------------------------------------------------

   private boolean thisRequiresMaterialPart = false;

//------------------------------------------------------------------------------
// thisRequiresStochMode
//
// true, iff the Attribute identified by this AttID is valid only in
// stochastic mode (stochMode == true).
//------------------------------------------------------------------------------

   private boolean thisRequiresStochMode = false;

d294 3
a296 4
      defMaterialPartAttIDs ();
      defStochModeAttIDs    ();

      Attribute.overrideModifiable ();
@


1.65
log
@Moved appliesTo capability from enum AttID to class Attribute.
@
text
@a203 5
   boolean isModifiable ()
      {
      return iAmModifiable;
      }

d206 1
a206 1
      return iRequireMaterialPart;
d211 1
a211 1
      return iRequireStochMode;
d221 1
a221 1
// The first constructor constructs an AttID for an Attribute whose default
d233 1
a233 1
      myAttribute   =
a235 2

      iAmModifiable = true;
d243 1
a243 1
      myAttribute   =
a245 2

      iAmModifiable = (theDefaultCase != NO_DEFAULT);
a252 14
// overrideIAmModifiable ()
//
// Sets the the value of the iAmModifiable field of the AttIDs for which the
// correct value is different from the value given in the ctor.
//------------------------------------------------------------------------------

   private static void overrideIAmModifiable ()
      {
      demandName   .iAmModifiable = true;
      operationName.iAmModifiable = true;
      partName     .iAmModifiable = true;
      }

//------------------------------------------------------------------------------
d255 1
a255 1
// Sets the iRequireMaterialPart field to true, for the appropriate AttIDs.
d260 7
a266 7
      asapPipOrder.iRequireMaterialPart = true;
      buildAheadUB.iRequireMaterialPart = true;
      buildAsap   .iRequireMaterialPart = true;
      buildNstn   .iRequireMaterialPart = true;
      stockBounds .iRequireMaterialPart = true;
      stockCost   .iRequireMaterialPart = true;
      stockVol    .iRequireMaterialPart = true;
d272 1
a272 1
// Sets the iRequireStochMode field to true, for the appropriate AttIDs.
d277 5
a281 5
      currentScenario.iRequireStochMode = true;
      objectStage    .iRequireStochMode = true;
      periodStage    .iRequireStochMode = true;
      probability    .iRequireStochMode = true;
      stochSolnMode  .iRequireStochMode = true;
d331 1
a331 8
// True, iff the corresponding setValue method(s) of class Component can validly
// be invoked for myAttribute.
//------------------------------------------------------------------------------

   private boolean iAmModifiable;

//------------------------------------------------------------------------------
// iRequireMaterialPart
d337 1
a337 1
   private boolean iRequireMaterialPart = false;
d340 1
a340 1
// iRequireStochMode
d346 1
a346 1
   private boolean iRequireStochMode = false;
a353 1
      overrideIAmModifiable ();
d356 2
@


1.64
log
@Made theAttribute.appliesTo (...) based on data on the Java side.
@
text
@a13 2
import       java.util.*;

a195 12
// appliesTo (theCompClassID)
//
// Returns true, iff myAttribute applies to the Component class identified by
// theCompClassID.
//------------------------------------------------------------------------------

   boolean appliesTo (CompClassID theCompClassID)
      {
      return myApplicableSet.contains (theCompClassID);
      }

//------------------------------------------------------------------------------
d238 3
a240 3
      myAttribute     = Attribute.newInstance (theValueType, this, theDefValue);

      iAmModifiable   = true;
d242 1
a242 1
      myApplicableSet = newCompClassIDSet (theCompClassIDs);
d250 3
a252 2
      myAttribute     = Attribute.newInstance (theValueType, this,
                                                             theDefaultCase);
d254 1
a254 3
      iAmModifiable   = (theDefaultCase != NO_DEFAULT);

      myApplicableSet = newCompClassIDSet (theCompClassIDs);
a261 21
// newCompClassIDSet (theCompClassIDs)
//
// Creates and returns an EnumSet whose contents are theCompClassIDs.
//------------------------------------------------------------------------------

   private static EnumSet <CompClassID> newCompClassIDSet (
         CompClassID... theCompClassIDs)
      {
      EnumSet <CompClassID> theCompClassIDSet;

      theCompClassIDSet = EnumSet.noneOf (CompClassID.class);

      for (CompClassID theCompClassID: theCompClassIDs)
         {
         theCompClassIDSet.add (theCompClassID);
         }

      return theCompClassIDSet;
      }

//------------------------------------------------------------------------------
a360 9
// myApplicableSet
//
// The set of CompClassID identifying the set of Component classes to which
// myAttribute applies.
//------------------------------------------------------------------------------

   private final EnumSet <CompClassID> myApplicableSet;

//------------------------------------------------------------------------------
@


1.63
log
@Moved the iAmModifiable field to AttID class.
@
text
@d12 3
d28 152
a179 129
   accAfterOptImp      (Boolean  .class,        false),
   accAfterSoftLB      (Boolean  .class,        false),
   accelerated         (Boolean  .class,   NO_DEFAULT),
   asapPipOrder        (Boolean  .class,        false),
   autoPriority        (Boolean  .class,        false),
   bomIndex            (Integer  .class,   NO_DEFAULT),
   bopIndex            (Integer  .class,   NO_DEFAULT),
   boundsValue         (Double   .class,   NO_DEFAULT),
   buildAheadUB        (int[]    .class,  LAST_PERIOD),
   buildAsap           (Boolean  .class,        false),
   buildNstn           (Boolean  .class,        false),
   compPrices          (Boolean  .class,        false),
   computeCriticalList (Boolean  .class,        false),
   consRate            (double[] .class,          1.0),
   consVol             (double[] .class,   NO_DEFAULT),
   cumShipBounds       (BoundSet .class,    BOUND_SET),
   cumShipReward       (double[] .class,          0.0),
   currentScenario     (Integer  .class,            0),
   demandName          (String   .class,   NO_DEFAULT),
   demandVol           (double[] .class,          0.0),
   earliestPeriod      (Integer  .class,            0),
   equitability        (Integer  .class,            1),
   excessVol           (double[] .class,   NO_DEFAULT),
   execBounds          (BoundSet .class,    BOUND_SET),
   execCost            (double[] .class,          0.0),
   execEmptyBom        (Boolean  .class,         true),
   execPenalty         (Double   .class,          0.0),
   execVol             (double[] .class,          0.0),
   executable          (boolean[].class,   NO_DEFAULT),
   expAllowed          (Boolean  .class,         true),
   expAversion         (Double   .class,          0.0),
   expCutoff           (Double   .class,         0.01),
   expNetAversion      (Double   .class,          0.0),
   extOptActive        (Boolean  .class,   NO_DEFAULT),
   falloutRate         (Double   .class,          0.0),
   feasible            (Boolean  .class,   NO_DEFAULT),
   focusHorizon        (Integer  .class,           -1),
   focusShortageVol    (double[] .class,   NO_DEFAULT),
   forcedMultiEq       (Boolean  .class,        false),
   fssExecVol          (double[] .class,   NO_DEFAULT),
   fssShipVol          (double[] .class,          0.0),
   fssSubVol           (double[] .class,   NO_DEFAULT),
   heurAllocActive     (Boolean  .class,   NO_DEFAULT),
   highPrecisionWD     (Boolean  .class,        false),
   impactPeriod        (int[]    .class,   NO_DEFAULT),
   incLotSize          (double[] .class,          0.0),
   incLotSize2         (double[] .class,          0.0),
   independentOffsets  (Boolean  .class,        false),
   intExecVols         (Boolean  .class,        false),
   intShipVols         (Boolean  .class,        false),
   intSubVols          (Boolean  .class,        false),
   latestPeriod        (Integer  .class,  LAST_PERIOD),
   lotSize2Thresh      (double[] .class,          0.0),
   lotSizeTol          (Double   .class,      0.00001),
   mandEC              (Boolean  .class,        false),
   minLotSize          (double[] .class,          0.0),
   minLotSize2         (double[] .class,          0.0),
   minimalExcess       (Boolean  .class,        false),
   mipMode             (Boolean  .class,        false),
   mrpConsVol          (double[] .class,   NO_DEFAULT),
   mrpExcessVol        (double[] .class,   NO_DEFAULT),
   mrpExecVol          (double[] .class,   NO_DEFAULT),
   mrpNetAllowed       (Boolean  .class,        false),
   mrpResidualVol      (double[] .class,   NO_DEFAULT),
   mrpSubVol           (double[] .class,   NO_DEFAULT),
   multiExec           (Boolean  .class,        false),
   multiRoute          (Boolean  .class,        false),
   nPeriods            (Integer  .class,           26),
   nScenarios          (Integer  .class,            1),
   netAllowed          (Boolean  .class,         true),
   nstnResidual        (Boolean  .class,        false),
   objValue            (Double   .class,   NO_DEFAULT),
   objectStage         (Integer  .class,            0),
   offset              (double[] .class,          0.0),
   operationName       (String   .class,   NO_DEFAULT),
   partName            (String   .class,   NO_DEFAULT),
   penExec             (Boolean  .class,        false),
   perfPegging         (Boolean  .class,        false),
   periodStage         (int[]    .class,            0),
   pgdCritListMode     (Boolean  .class,        false),
   pipExists           (Boolean  .class,   NO_DEFAULT),
   pipSeqFromHeur      (Boolean  .class,        false),
   postprocessed       (Boolean  .class,   NO_DEFAULT),
   prefHighStockSLBs   (Boolean  .class,        false),
   preprocessed        (Boolean  .class,   NO_DEFAULT),
   priority            (int[]    .class,            0),
   probability         (Double   .class,          1.0),
   prodVol             (double[] .class,   NO_DEFAULT),
   productRate         (double[] .class,          1.0),
   propRtg             (boolean[].class,        false),
   reqVol              (double[] .class,   NO_DEFAULT),
   residualVol         (double[] .class,   NO_DEFAULT),
   respectStockSLBs    (Boolean  .class,        false),
   roundReqVols        (Boolean  .class,        false),
   routingShare        (double[] .class,          1.0),
   scrapAllowed        (Boolean  .class,         true),
   scrapCost           (double[] .class,          0.0),
   scrapVol            (double[] .class,   NO_DEFAULT),
   searchInc           (Double   .class,          1.0),
   selForDel           (Boolean  .class,        false),
   selSplit            (Boolean  .class,        false),
   shadowPrice         (double[] .class,   NO_DEFAULT),
   shipLateAllowed     (Boolean  .class,         true),
   shipLateUB          (int[]    .class,  LAST_PERIOD),
   shipReward          (double[] .class,          0.0),
   shipVol             (double[] .class,          0.0),
   singleSource        (Boolean  .class,        false),
   skipFailures        (Boolean  .class,         true),
   solverLogFileName   (String   .class, "solver.log"),
   stageByObject       (Boolean  .class,        false),
   stochMode           (Boolean  .class,        false),
   stochSolnMode       (Boolean  .class,   NO_DEFAULT),
   stockBounds         (BoundSet .class,    BOUND_SET),
   stockCost           (double[] .class,          0.0),
   stockReallocation   (Boolean  .class,        false),
   stockVol            (double[] .class,   NO_DEFAULT),
   subCost             (double[] .class,          0.0),
   subIndex            (Integer  .class,   NO_DEFAULT),
   subVol              (double[] .class,          0.0),
   supplyVol           (double[] .class,          0.0),
   tieBreakPropRt      (Boolean  .class,        false),
   title               (String   .class,   "Untitled"),
   truncOffsets        (Boolean  .class,        false),
   twoLevelLotSizes    (Boolean  .class,        false),
   twoWayMultiExec     (Boolean  .class,        false),
   useFocusHorizons    (Boolean  .class,         true),
   userHeurStart       (Boolean  .class,        false),
   wbounds             (Double   .class,      10000.0),
   yieldRate           (double[] .class,          1.0),
d198 12
d213 1
a213 1
   final Attribute <?> getAttribute ()
d218 1
a218 1
   final boolean isModifiable ()
d223 1
a223 1
   final boolean requiresMaterialPart ()
d228 1
a228 1
   final boolean requiresStochMode ()
d243 2
d247 4
a250 1
   AttID (Class <?> theValueType, Object theDefValue)
d252 3
a254 1
      myAttribute   = Attribute.newInstance (theValueType, this, theDefValue);
d256 1
a256 1
      iAmModifiable = true;
d259 4
a262 1
   AttID (Class <?> theValueType, DefaultCase theDefaultCase)
d264 2
a265 1
      myAttribute = Attribute.newInstance (theValueType, this, theDefaultCase);
d267 3
a269 1
      iAmModifiable = (theDefaultCase != NO_DEFAULT);
d277 21
d397 9
@


1.62
log
@Replaced Attribute.getAllAttributes () with Attribute.getAttributes (),
which returns an unmodifiable List.
@
text
@d180 5
d187 1
a187 1
      return requireMaterialPart;
d192 1
a192 1
      return requireStochMode;
d209 3
a211 1
      myAttribute = Attribute.newInstance (theValueType, this, theDefValue);
d217 2
d226 14
d242 1
a242 1
// Sets the requireMaterialPart field to true, for the appropriate AttIDs.
d247 7
a253 7
      asapPipOrder.requireMaterialPart = true;
      buildAheadUB.requireMaterialPart = true;
      buildAsap   .requireMaterialPart = true;
      buildNstn   .requireMaterialPart = true;
      stockBounds .requireMaterialPart = true;
      stockCost   .requireMaterialPart = true;
      stockVol    .requireMaterialPart = true;
d259 1
a259 1
// Sets the requireStochMode field to true, for the appropriate AttIDs.
d264 5
a268 5
      currentScenario.requireStochMode = true;
      objectStage    .requireStochMode = true;
      periodStage    .requireStochMode = true;
      probability    .requireStochMode = true;
      stochSolnMode  .requireStochMode = true;
d318 8
a325 1
// requireMaterialPart
d331 1
a331 1
   private boolean requireMaterialPart = false;
d334 1
a334 1
// requireStochMode
d340 1
a340 1
   private boolean requireStochMode = false;
d348 1
@


1.61
log
@Removed Attribute wit34Compatible.
@
text
@d321 2
@


1.60
log
@Added Attribute wit34Compatible.
@
text
@a152 1
   wit34Compatible     (Boolean  .class,        false),
@


1.59
log
@Attributes
@
text
@d153 1
@


1.58
log
@Replaced Utility.intAbortWmsg with Utility.internalError.
@
text
@d204 1
a204 3
      myAttribute =
         Attribute.
            newInstance (theValueType, this, theDefValue);
d209 1
a209 3
      myAttribute =
         Attribute.
            newInstance (theValueType, this, theDefaultCase);
@


1.57
log
@Minor revision.
@
text
@d273 6
a278 6
               intAbortWmsg (
                  "   An Attribute was found whose name is alphabetically\n"
                + "   earlier than that of the preceding Attribute.\n"
                + "\n"
                + "      Preceding Attribute: " + prevAttName + "\n"
                + "      Current   Attribute: " + theAttName);
@


1.56
log
@Replaced theAtt.getIsInputAtt (theProblem) with theAtt.allowsSetValue ().
@
text
@d182 1
a182 1
      return iRequireMaterialPart;
d187 1
a187 1
      return iRequireStochMode;
d223 1
a223 1
// Sets the iRequireMaterialPart field to true, for the appropriate AttIDs.
d228 7
a234 7
      asapPipOrder.iRequireMaterialPart = true;
      buildAheadUB.iRequireMaterialPart = true;
      buildAsap   .iRequireMaterialPart = true;
      buildNstn   .iRequireMaterialPart = true;
      stockBounds .iRequireMaterialPart = true;
      stockCost   .iRequireMaterialPart = true;
      stockVol    .iRequireMaterialPart = true;
d240 1
a240 1
// Sets the iRequireStochMode field to true, for the appropriate AttIDs.
d245 5
a249 5
      currentScenario.iRequireStochMode = true;
      objectStage    .iRequireStochMode = true;
      periodStage    .iRequireStochMode = true;
      probability    .iRequireStochMode = true;
      stochSolnMode  .iRequireStochMode = true;
d299 1
a299 1
// iRequireMaterialPart
d305 1
a305 1
   private boolean iRequireMaterialPart = false;
d308 1
a308 1
// iRequireStochMode
d314 1
a314 1
   private boolean iRequireStochMode = false;
@


1.55
log
@Made enum DefaultCase non-nested.
@
text
@d182 1
a182 1
      return requiresMaterialPart;
d187 1
a187 1
      return requiresStochMode;
d223 1
a223 1
// Sets the requiresMaterialPart field to true, for the appropriate AttIDs.
d228 7
a234 7
      asapPipOrder.requiresMaterialPart = true;
      buildAheadUB.requiresMaterialPart = true;
      buildAsap   .requiresMaterialPart = true;
      buildNstn   .requiresMaterialPart = true;
      stockBounds .requiresMaterialPart = true;
      stockCost   .requiresMaterialPart = true;
      stockVol    .requiresMaterialPart = true;
d240 1
a240 1
// Sets the requiresStochMode field to true, for the appropriate AttIDs.
d245 5
a249 5
      currentScenario.requiresStochMode = true;
      objectStage    .requiresStochMode = true;
      periodStage    .requiresStochMode = true;
      probability    .requiresStochMode = true;
      stochSolnMode  .requiresStochMode = true;
d299 1
a299 1
// requiresMaterialPart
d305 1
a305 1
   private boolean requiresMaterialPart = false;
d308 1
a308 1
// requiresStochMode
d314 1
a314 1
   private boolean requiresStochMode = false;
@


1.54
log
@Implemented method theAtt.requiresStochMode ().
@
text
@d11 1
a11 1
import static com.ibm.witj.Attribute.DefaultCase.*;
d209 1
a209 1
   AttID (Class <?> theValueType, Attribute.DefaultCase theDefaultCase)
@


1.53
log
@Added theAtt.requiresMaterialPart ().
@
text
@d185 5
d238 15
d307 9
d323 1
@


1.52
log
@Attributes.
@
text
@d180 5
d216 17
d277 18
@


1.51
log
@Attributes.
@
text
@d11 1
d25 129
a153 129
   accAfterOptImp      (Boolean  .class),
   accAfterSoftLB      (Boolean  .class),
   accelerated         (Boolean  .class),
   asapPipOrder        (Boolean  .class),
   autoPriority        (Boolean  .class),
   bomIndex            (Integer  .class),
   bopIndex            (Integer  .class),
   boundsValue         (Double   .class),
   buildAheadUB        (int[]    .class),
   buildAsap           (Boolean  .class),
   buildNstn           (Boolean  .class),
   compPrices          (Boolean  .class),
   computeCriticalList (Boolean  .class),
   consRate            (double[] .class),
   consVol             (double[] .class),
   cumShipBounds       (BoundSet .class),
   cumShipReward       (double[] .class),
   currentScenario     (Integer  .class),
   demandName          (String   .class),
   demandVol           (double[] .class),
   earliestPeriod      (Integer  .class),
   equitability        (Integer  .class),
   excessVol           (double[] .class),
   execBounds          (BoundSet .class),
   execCost            (double[] .class),
   execEmptyBom        (Boolean  .class),
   execPenalty         (Double   .class),
   execVol             (double[] .class),
   executable          (boolean[].class),
   expAllowed          (Boolean  .class),
   expAversion         (Double   .class),
   expCutoff           (Double   .class),
   expNetAversion      (Double   .class),
   extOptActive        (Boolean  .class),
   falloutRate         (Double   .class),
   feasible            (Boolean  .class),
   focusHorizon        (Integer  .class),
   focusShortageVol    (double[] .class),
   forcedMultiEq       (Boolean  .class),
   fssExecVol          (double[] .class),
   fssShipVol          (double[] .class),
   fssSubVol           (double[] .class),
   heurAllocActive     (Boolean  .class),
   highPrecisionWD     (Boolean  .class),
   impactPeriod        (int[]    .class),
   incLotSize          (double[] .class),
   incLotSize2         (double[] .class),
   independentOffsets  (Boolean  .class),
   intExecVols         (Boolean  .class),
   intShipVols         (Boolean  .class),
   intSubVols          (Boolean  .class),
   latestPeriod        (Integer  .class),
   lotSize2Thresh      (double[] .class),
   lotSizeTol          (Double   .class),
   mandEC              (Boolean  .class),
   minLotSize          (double[] .class),
   minLotSize2         (double[] .class),
   minimalExcess       (Boolean  .class),
   mipMode             (Boolean  .class),
   mrpConsVol          (double[] .class),
   mrpExcessVol        (double[] .class),
   mrpExecVol          (double[] .class),
   mrpNetAllowed       (Boolean  .class),
   mrpResidualVol      (double[] .class),
   mrpSubVol           (double[] .class),
   multiExec           (Boolean  .class),
   multiRoute          (Boolean  .class),
   nPeriods            (Integer  .class),
   nScenarios          (Integer  .class),
   netAllowed          (Boolean  .class),
   nstnResidual        (Boolean  .class),
   objValue            (Double   .class),
   objectStage         (Integer  .class),
   offset              (double[] .class),
   operationName       (String   .class),
   partName            (String   .class),
   penExec             (Boolean  .class),
   perfPegging         (Boolean  .class),
   periodStage         (int[]    .class),
   pgdCritListMode     (Boolean  .class),
   pipExists           (Boolean  .class),
   pipSeqFromHeur      (Boolean  .class),
   postprocessed       (Boolean  .class),
   prefHighStockSLBs   (Boolean  .class),
   preprocessed        (Boolean  .class),
   priority            (int[]    .class),
   probability         (Double   .class),
   prodVol             (double[] .class),
   productRate         (double[] .class),
   propRtg             (boolean[].class),
   reqVol              (double[] .class),
   residualVol         (double[] .class),
   respectStockSLBs    (Boolean  .class),
   roundReqVols        (Boolean  .class),
   routingShare        (double[] .class),
   scrapAllowed        (Boolean  .class),
   scrapCost           (double[] .class),
   scrapVol            (double[] .class),
   searchInc           (Double   .class),
   selForDel           (Boolean  .class),
   selSplit            (Boolean  .class),
   shadowPrice         (double[] .class),
   shipLateAllowed     (Boolean  .class),
   shipLateUB          (int[]    .class),
   shipReward          (double[] .class),
   shipVol             (double[] .class),
   singleSource        (Boolean  .class),
   skipFailures        (Boolean  .class),
   solverLogFileName   (String   .class),
   stageByObject       (Boolean  .class),
   stochMode           (Boolean  .class),
   stochSolnMode       (Boolean  .class),
   stockBounds         (BoundSet .class),
   stockCost           (double[] .class),
   stockReallocation   (Boolean  .class),
   stockVol            (double[] .class),
   subCost             (double[] .class),
   subIndex            (Integer  .class),
   subVol              (double[] .class),
   supplyVol           (double[] .class),
   tieBreakPropRt      (Boolean  .class),
   title               (String   .class),
   truncOffsets        (Boolean  .class),
   twoLevelLotSizes    (Boolean  .class),
   twoWayMultiExec     (Boolean  .class),
   useFocusHorizons    (Boolean  .class),
   userHeurStart       (Boolean  .class),
   wbounds             (Double   .class),
   yieldRate           (double[] .class),
d181 9
a189 1
// Private Constructor
d192 1
a192 1
   AttID (Class <?> theValueType)
d194 10
a203 1
      myAttribute = Attribute.newInstance (theValueType, this);
a254 9

//==============================================================================
// Static initialization block
//==============================================================================

   static
      {
      Attribute.setDefaultValues ();
      }
@


1.50
log
@Attributes
@
text
@d160 11
d189 38
@


1.49
log
@Attributes
@
text
@d174 1
a174 1
      myAttribute = Attribute.newInstance (this, theValueType);
@


1.48
log
@Attributes
@
text
@d24 129
a152 129
   accAfterOptImp,
   accAfterSoftLB,
   accelerated,
   asapPipOrder,
   autoPriority,
   bomIndex,
   bopIndex,
   boundsValue,
   buildAheadUB,
   buildAsap,
   buildNstn,
   compPrices,
   computeCriticalList,
   consRate,
   consVol,
   cumShipBounds,
   cumShipReward,
   currentScenario,
   demandName,
   demandVol,
   earliestPeriod,
   equitability,
   excessVol,
   execBounds,
   execCost,
   execEmptyBom,
   execPenalty,
   execVol,
   executable,
   expAllowed,
   expAversion,
   expCutoff,
   expNetAversion,
   extOptActive,
   falloutRate,
   feasible,
   focusHorizon,
   focusShortageVol,
   forcedMultiEq,
   fssExecVol,
   fssShipVol,
   fssSubVol,
   heurAllocActive,
   highPrecisionWD,
   impactPeriod,
   incLotSize,
   incLotSize2,
   independentOffsets,
   intExecVols,
   intShipVols,
   intSubVols,
   latestPeriod,
   lotSize2Thresh,
   lotSizeTol,
   mandEC,
   minLotSize,
   minLotSize2,
   minimalExcess,
   mipMode,
   mrpConsVol,
   mrpExcessVol,
   mrpExecVol,
   mrpNetAllowed,
   mrpResidualVol,
   mrpSubVol,
   multiExec,
   multiRoute,
   nPeriods,
   nScenarios,
   netAllowed,
   nstnResidual,
   objValue,
   objectStage,
   offset,
   operationName,
   partName,
   penExec,
   perfPegging,
   periodStage,
   pgdCritListMode,
   pipExists,
   pipSeqFromHeur,
   postprocessed,
   prefHighStockSLBs,
   preprocessed,
   priority,
   probability,
   prodVol,
   productRate,
   propRtg,
   reqVol,
   residualVol,
   respectStockSLBs,
   roundReqVols,
   routingShare,
   scrapAllowed,
   scrapCost,
   scrapVol,
   searchInc,
   selForDel,
   selSplit,
   shadowPrice,
   shipLateAllowed,
   shipLateUB,
   shipReward,
   shipVol,
   singleSource,
   skipFailures,
   solverLogFileName,
   stageByObject,
   stochMode,
   stochSolnMode,
   stockBounds,
   stockCost,
   stockReallocation,
   stockVol,
   subCost,
   subIndex,
   subVol,
   supplyVol,
   tieBreakPropRt,
   title,
   truncOffsets,
   twoLevelLotSizes,
   twoWayMultiExec,
   useFocusHorizons,
   userHeurStart,
   wbounds,
   yieldRate,
d160 1
a160 3
// store (theAtt)
//
// Stores theAtt as the Attribute identified by this AttID.
d163 1
a163 1
   void store (Attribute <?> theAtt)
d165 1
a165 5
      assert (myAttribute == null);

      assert (theAtt.getAttID () == this);

      myAttribute = theAtt;
d168 3
a170 3
//------------------------------------------------------------------------------
// Accessors
//------------------------------------------------------------------------------
d172 1
a172 1
   final Attribute <?> getAttribute ()
d174 1
a174 1
      return myAttribute;
d187 10
a196 1
   private Attribute <?> myAttribute = null;
@


1.47
log
@Removed enum AttID.
@
text
@d5 1
a5 1
// Contains the declaration of enum AttID.
d15 1
a15 2
// "Attribute Identification"
// Identifies the set of all WIT attributes that have a given name.
a21 3
//
// Each constant of this Enum is the AttID that identifies set of all WIT
// attributes whose name matches the name of the enum constant.
d29 3
d39 1
d42 1
d47 1
d64 1
d95 1
d98 2
d132 1
d136 1
d141 1
d145 1
d160 1
a160 12
// selfTest ()
//
// Does self-test for AttIDs.
//------------------------------------------------------------------------------

   static void selfTest ()
      {
      checkAlphaOrder ();
      }

//------------------------------------------------------------------------------
// getSpecObject ()
d162 1
a162 21
// Returns null.
//------------------------------------------------------------------------------

   Object getSpecObject ()
      {
      return null;
      }

//------------------------------------------------------------------------------
// getAttSpec ()
//
// Returns the AttSpec identified by this AttID.
//------------------------------------------------------------------------------

   AttSpec <?> getAttSpec ()
      {
      return myAttSpec;
      }

//------------------------------------------------------------------------------
// findAttSpecs ()
d165 1
a165 1
   static void findAttSpecs ()
d167 1
a167 1
      AttID theAttID;
d169 1
a169 3
      for (AttSpec <?> theAttSpec: AttSpec.values ())
         {
         theAttID           = theAttSpec.getAttID ();
d171 1
a171 2
         theAttID.myAttSpec = theAttSpec;
         }
a173 4
//==============================================================================
// Private Methods
//==============================================================================

d175 1
a175 3
// checkAlphaOrder ()
//
// Verifies that the AttIDs are listed in alphabetical order.
d178 1
a178 1
   private static void checkAlphaOrder ()
d180 1
a180 24
      String theAttName;
      String prevAttName = null;

      println (
           "\n"
         + "Verifying that the AttIDs are listed in alphabetical order.\n");

      for (AttID theAttID: values ())
         {
         theAttName = theAttID.toString ();

         if (prevAttName != null)
            if (theAttName.compareTo (prevAttName) < 0)
               intAbortWmsg (
                  "   An AttID was found whose name is alphabetically earlier\n"
                + "   than that of the preceding AttID.\n"
                + "\n"
                + "      Preceding AttID: " + prevAttName + "\n"
                + "      Current   AttID: " + theAttName);

         prevAttName = theAttName;
         }

      println ("Verified: The AttIDs are listed in alphabetical order.");
d186 1
a186 1

d188 1
a188 1
// myAttSpec
d190 1
a190 1
// The AttSpec identified by this AttID.
d193 1
a193 3
   private AttSpec <?> myAttSpec;

//==============================================================================
a194 1

@


1.46
log
@Attributes.
@
text
@@


1.45
log
@Customized Attributes.
@
text
@d163 1
a163 1
// Returns the AttSpec identified by this AttID as an Object.
d168 1
a168 1
      return myAttSpec;
d182 3
a184 3
//==============================================================================
// Private Constructor
//==============================================================================
d186 1
a186 1
   private AttID ()
d188 8
a195 1
      myAttSpec = AttSpec.makeInstance (this);
d246 1
a246 1
   private final AttSpec <?> myAttSpec;
@


1.44
log
@Attributes.
@
text
@d88 1
@


1.43
log
@Replaced use of raw AttSpec with AttSpec <?>.
@
text
@d160 11
@


1.42
log
@Implemented Utility class.
@
text
@d165 1
a165 1
   AttSpec getAttSpec ()
d227 1
a227 1
   private final AttSpec myAttSpec;
@


1.41
log
@AttReps.
@
text
@d8 3
a10 1
package com.ibm.witj;
d194 1
a194 1
      System.out.println (
d204 1
a204 1
               InternalObject.intAbortWmsg (
d214 1
a214 2
      System.out.println (
           "Verified: The AttIDs are listed in alphabetical order.");
@


1.40
log
@Attributes.
@
text
@d147 11
d178 39
@


1.39
log
@Attributes.
@
text
@d147 1
a147 1
// getAtt ()
d149 1
a149 1
// Returns the Attribute identified by this AttID.
d152 1
a152 1
   Attribute getAtt ()
d154 1
a154 1
      return myAtt;
d163 1
a163 1
      myAtt = Attribute.makeInstance (this);
d171 1
a171 1
// myAtt
d173 1
a173 1
// The Attribute identifies this AttID.
d176 1
a176 1
   private final Attribute myAtt;
@


1.38
log
@Attributes.
@
text
@a25 11
/*

   demandVol,
   expAllowed,
   mrpNetAllowed,
   scrapVol,
   supplyVol,
   ;

*/

@


1.37
log
@Attributes.
@
text
@d26 2
d35 1
a35 1
/*
a152 2
*/

@


1.36
log
@Attributes.
@
text
@a153 22
// Static initialization block
//
// Verifies that the AttIDs are listed in alphabetical order.
//==============================================================================

   static
      {
      String theAttName;
      String prevAttName = null;

      for (AttID theAttID: values ())
         {
         theAttName = theAttID.toString ();

         if (prevAttName != null)
            assert (theAttName.compareTo (prevAttName) >= 0);

         prevAttName = theAttName;
         }
      }

//==============================================================================
@


1.35
log
@Attributes.
@
text
@d26 9
d151 2
@


1.34
log
@Attributes.
@
text
@d26 14
d41 8
d50 31
d82 30
d113 18
d132 8
@


1.33
log
@Attributes.
@
text
@d60 1
a60 1
// getAttribute ()
d65 1
a65 1
   Attribute getAttribute ()
d67 1
a67 1
      return Attribute.getInstanceFor (this);
d71 21
@


1.32
log
@Attributes.
@
text
@d56 15
@


1.31
log
@Attributes.
@
text
@d34 22
@


1.30
log
@Attributes.
@
text
@a25 2
   supplyVol,
   scrapVol,
d27 1
d29 2
@


1.29
log
@Attributes.
@
text
@a9 2
import  java.lang.reflect.*;

d11 1
a11 1
// Class AttID
a32 128
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// getBoolAtt ()
//
// Returns myAtt, cast as an Attribute <Boolean>.
//------------------------------------------------------------------------------

   Attribute <Boolean> getBoolAtt ()
      {
      return (BoolAtt) myAtt;
      }

//------------------------------------------------------------------------------
// getDblVecAtt ()
//
// Returns myAtt, cast as an Attribute <double[]>.
//------------------------------------------------------------------------------

   Attribute <double[]> getDblVecAtt ()
      {
      return (DblVecAtt) myAtt;
      }

//==============================================================================
// Private Constructors
//==============================================================================

   AttID ()
      {
      myAtt = makeMyAtt ();
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// makeMyAtt ()
//
// Creates and returns a new Attribute of that is to be owned by this AttID and
// belongs to the appropriate subclass.
//------------------------------------------------------------------------------

   private Attribute makeMyAtt ()
      {
      Class[]     allAttClasses;
      Method      theAttAccessor;
      Type        theAttType;
      Constructor theCtor;

      try
         {
         allAttClasses  = AttID.class.getDeclaredClasses ();

         theAttAccessor = Attribute.class.getDeclaredMethod (toString ());

         theAttType     = theAttAccessor.getGenericReturnType ();

         for (Class theAttClass: allAttClasses)
            if (theAttClass.getGenericSuperclass ().equals (theAttType))
               {
               theCtor = theAttClass.getDeclaredConstructor (AttID.class);

               return (Attribute) theCtor.newInstance (this);
               }

         assert (false);
         }
      catch (Exception theExc)
         {
         InternalObject.intAbortWmsg ("   " + theExc);
         }

      return null;
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myAtt
//
// The Attribute owned by this AttID, if any.
//------------------------------------------------------------------------------

   private final Attribute myAtt;

//==============================================================================
// Static Nested Classes
//==============================================================================

//------------------------------------------------------------------------------
// Nested Classes:
//    AttID.BoolAtt
//    AttID.DblVecAtt
//
// Each of these classes is simply a concrete version of the parameterized
// Attribute class which it extends.
//
// Class Hierarchy:
//
//    Attribute <Boolean>
//       AttID.BoolAtt
//
//    Attribute <double []>
//       AttID.DblVecAtt
//------------------------------------------------------------------------------

   private static final class BoolAtt   extends Attribute <Boolean>
   {
      BoolAtt (AttID theAttID)
         {
         super (theAttID);
         }
   }

   private static final class DblVecAtt extends Attribute <double []>
   {
      DblVecAtt (AttID theAttID)
         {
         super (theAttID);
         }
   }

//==============================================================================
@


1.28
log
@Attributes.
@
text
@d10 2
d39 11
d51 2
d57 6
a62 2
      if (myAtt == null)
         myAtt = new DblVecAtt (this);
d64 3
a66 1
      return (DblVecAtt) myAtt;
d69 4
d74 4
a77 1
// getBoolAtt ()
d80 1
a80 1
   Attribute <Boolean> getBoolAtt ()
d82 17
a98 2
      if (myAtt == null)
         myAtt = new BoolAtt (this);
d100 11
a110 1
      return (BoolAtt) myAtt;
d123 1
a123 1
   private Attribute myAtt = null;
d130 3
a132 1
// Nested Class AttID.BoolAtt
d134 2
a135 1
// Represents a set of WIT attributes of type "boolean".
d141 3
d146 1
a146 1
   private static final class BoolAtt extends Attribute <Boolean>
a153 11
//------------------------------------------------------------------------------
// Nested Class AttID.DblVecAtt
//
// Represents a set of WIT attributes of type "time-vector of doubles".
//
// Class Hierarchy:
//
//    Attribute <double []>
//       AttID.DblVecAtt
//------------------------------------------------------------------------------

@


1.27
log
@Attribute.
@
text
@d37 1
a37 4
// getBoolScalAtt ()
//
// If the Attribute owned by this AttID is an Attribute.BooleanScalar, it is
// returned. Otherwise a casting exception is thrown.
d40 1
a40 1
   Attribute.BooleanScalar getBoolScalAtt ()
d42 4
a45 1
      return (Attribute.BooleanScalar) myAtt;
d49 1
a49 3
// getDblVecAtt ()
//
// Same as getBoolScalAtt (), but for class Attribute.DoubleVector.
d52 1
a52 1
   Attribute.DoubleVector getDblVecAtt ()
d54 4
a57 1
      return (Attribute.DoubleVector) myAtt;
d61 1
a61 1
// Private Constuctors
d64 7
a70 4
   AttID ()
      {
      myAtt = Attribute.makeInstance (this);
      }
d73 1
a73 1
// Private Fields
d77 24
a100 1
// myAtt
d102 2
a103 1
// The Attribute owned by this AttID, if any.
d106 9
a114 1
   private final Attribute myAtt;
@


1.26
log
@Attributes.
@
text
@a9 2
import java.lang.reflect.*;

@


1.25
log
@Attributes.
@
text
@d10 2
d41 2
a42 10
// Returns the Attribute.BooleanScalar owned by this AttID:
//
//    If this AttID does not already own an Attribute, an
//    Attribute.BooleanScalar is created, stored, and returned.
//
//    If this AttID already owns an Attribute, but it is not an
//    Attribute.BooleanScalar, a casting exception is thrown.
//
//    If this AttID already owns an Attribute, and it is an
//    Attribute.BooleanScalar, it is returned.
a46 3
      if (myAtt == null)
         myAtt = new Attribute.BooleanScalar (this);

d58 6
a63 2
      if (myAtt == null)
         myAtt = new Attribute.DoubleVector (this);
d65 3
a67 1
      return (Attribute.DoubleVector) myAtt;
d80 1
a80 1
   private Attribute myAtt = null;
@


1.24
log
@Attributes.
@
text
@d14 1
a14 2
// Identifies a WIT attribute, actually the set of all WIT attributes that have
// a given name.
d21 3
d33 41
d76 8
@


1.23
log
@Attributes.
@
text
@d4 2
d10 25
@


1.22
log
@Changed name of class AttID to Attribute.
@
text
@a1 1

a3 27
//
// Contains the declaration of class AttID.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.AttID.AccessMode.*;
import static com.ibm.witj.CompClassID.*;

import        java.util.*;

//==============================================================================
// Class AttID
//
// "Attribute Identification"
// Used to identify all WIT attributes that have a given name.
// For now, only one attribute per AttID will be allowed.
//
// Class Hierarchy:
//
//    AttID
//       AttID.BooleanID
//       AttID.DoubleVectorID
//==============================================================================

public abstract class AttID
{
a4 37
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// Accessors for AttIDs.
//------------------------------------------------------------------------------

   public static DoubleVectorID supplyVol ()
      {
      return supplyVol;
      }

   public static DoubleVectorID scrapVol ()
      {
      return scrapVol;
      }

   public static DoubleVectorID demandVol ()
      {
      return demandVol;
      }

   public static BooleanID mrpNetAllowed ()
      {
      return mrpNetAllowed;
      }

//------------------------------------------------------------------------------
// toString ().
//
// Override from class Object.
//------------------------------------------------------------------------------

   public final String toString ()
      {
      return myName;
      }
d6 1
a6 58
//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// initialize ()
//
// Does nothing.
// Calling this method forces class AttID to be initialized.
//------------------------------------------------------------------------------

   static void initialize ()
      {
      }

//------------------------------------------------------------------------------
// appliesTo (theCompClassID)
//
// Returns true, iff the attribute identified by this AttID applies to the
// Component class identified by theCompClassID.
//------------------------------------------------------------------------------

   boolean appliesTo (CompClassID theCompClassID)
      {
      return (myAppAttMap.containsKey (theCompClassID));
      }

//------------------------------------------------------------------------------
// getAppAttFor (theCompClassID)
//
// Returns the AppAtt that represents the attribute identified by this AttID as
// as applied to the Component class identified by theCompClassID.
// The attribute must apply to the Component class.
//------------------------------------------------------------------------------

   AppAtt getAppAttFor (CompClassID theCompClassID)
      {
      AppAtt theAppAtt;

      theAppAtt = myAppAttMap.get (theCompClassID);

      assert (theAppAtt != null);

      return theAppAtt;
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   final AccessMode getAccessMode ()
      {
      return myAccessMode;
      }

//==============================================================================
// Private Methods
//==============================================================================
a7 146
//------------------------------------------------------------------------------
// Static factory methods for subclasses.
//------------------------------------------------------------------------------

   private static BooleanID makeBoolID (
         String      theName,
         AccessMode  theAccessMode,
         CompClassID theCompClassID)
      {
      return new BooleanID      (theName, theAccessMode, theCompClassID);
      }

   private static DoubleVectorID makeDblVecID (
         String      theName,
         AccessMode  theAccessMode,
         CompClassID theCompClassID)
      {
      return new DoubleVectorID (theName, theAccessMode, theCompClassID);
      }

//------------------------------------------------------------------------------
// Constructor.
//------------------------------------------------------------------------------

   private AttID (
         String      theName,
         AccessMode  theAccessMode,
         CompClassID theCompClassID)
      {
      AppAtt theAppAtt;

      myName       = theName;
      myAccessMode = theAccessMode;
      myAppAttMap  = new EnumMap <CompClassID, AppAtt> (CompClassID.class);
      theAppAtt    = new AppAtt (this, theCompClassID);

      myAppAttMap.put (theCompClassID, theAppAtt);
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// The following are the only AttIDs that exist in WIT-J.
//------------------------------------------------------------------------------

   private static final DoubleVectorID supplyVol;
   private static final DoubleVectorID scrapVol;
   private static final DoubleVectorID demandVol;
   private static final      BooleanID mrpNetAllowed;

//------------------------------------------------------------------------------
// myName
//
// The name of the attributes identified by this AttID.
//------------------------------------------------------------------------------

   private final String myName;

//------------------------------------------------------------------------------
// myAccessMode
//
// Indicates the mode of access allowed by the attributes.
//------------------------------------------------------------------------------

   private final AccessMode myAccessMode;

//------------------------------------------------------------------------------
// myAppAttMap
//
// If the attribute identified by this AttID applies to the Component class
// identified by theCompClassID, then myAppAttMap.get (theCompClassID) is the
// AppAtt that represents the attribute as applied to the Component class.
// Otherwise myAppAttMap.get (theCompClassID) is null.
//------------------------------------------------------------------------------

   private final EnumMap <CompClassID, AppAtt> myAppAttMap;

//==============================================================================
// Static Initialization Block
//==============================================================================

   static
   {
   supplyVol     = makeDblVecID ("supplyVol",     INPUT,  PART);
   scrapVol      = makeDblVecID ("scrapVol",      OUTPUT, PART);
   demandVol     = makeDblVecID ("demandVol",     INPUT,  DEMAND);
   mrpNetAllowed = makeBoolID   ("mrpNetAllowed", INPUT,  SUBSTITUTE);
   }

//==============================================================================
// Static Nested Classes and Enums
//==============================================================================

//------------------------------------------------------------------------------
// Nested Class BooleanID
//
// An AttID for attributes of type "boolean".
//------------------------------------------------------------------------------

   static final class BooleanID extends AttID
   {
      private BooleanID (
            String      theName,
            AccessMode  theAccessMode,
            CompClassID theCompClassID)
         {
         super (theName, theAccessMode, theCompClassID);
         }
   }

//------------------------------------------------------------------------------
// Nested Class DoubleVectorID
//
// An AttID for attributes of type "time-vector of doubles".
//------------------------------------------------------------------------------

   static final class DoubleVectorID extends AttID
   {
      private DoubleVectorID (
            String      theName,
            AccessMode  theAccessMode,
            CompClassID theCompClassID)
         {
         super (theName, theAccessMode, theCompClassID);
         }
   }

//------------------------------------------------------------------------------
// Nested Enum AccessMode
//
// Indicates the mode of access allowed by an attribute:
//
//    INPUT:  The value of the attribute can be retrieved, and it can    be set.
//    OUTPUT: The value of the attribute can be retrieved, but it cannot be set.
//------------------------------------------------------------------------------

   enum AccessMode
   {
      INPUT,
      OUTPUT,
   }

//==============================================================================
}
@


1.21
log
@Attributes.
@
text
@@


1.20
log
@Implemented and use class AppAtt.
@
text
@d2 1
d37 24
a71 13
// Public Static Immutable Fields
//==============================================================================

//------------------------------------------------------------------------------
// The following are the only AttIDs that exist in WIT-J.
//------------------------------------------------------------------------------

   public static final DoubleVectorID SUPPLY_VOL;
   public static final DoubleVectorID SCRAP_VOL;
   public static final DoubleVectorID DEMAND_VOL;
   public static final      BooleanID MRP_NET_ALLOWED;

//==============================================================================
d174 9
d215 4
a218 4
   SUPPLY_VOL      = makeDblVecID ("SUPPLY_VOL",      INPUT,  PART);
   SCRAP_VOL       = makeDblVecID ("SCRAP_VOL",       OUTPUT, PART);
   DEMAND_VOL      = makeDblVecID ("DEMAND_VOL",      INPUT,  DEMAND);
   MRP_NET_ALLOWED = makeBoolID   ("MRP_NET_ALLOWED", INPUT,  SUBSTITUTE);
@


1.19
log
@Attributes.
@
text
@a35 11
// hashCode ()
//
// Override from class Object.
//------------------------------------------------------------------------------

   public final int hashCode ()
      {
      return myIndex;
      }

//------------------------------------------------------------------------------
d64 1
a64 1
// nInstances ()
d66 2
a67 1
// Returns the # of existing AttIDs.
d70 1
a70 1
   static int nInstances ()
a71 1
      return allInstances.size ();
d75 1
a75 1
// values ()
d77 2
a78 1
// Creates and returns an array containing all existing AttIDs.
d81 1
a81 1
   static AttID[] values ()
d83 1
a83 5
      AttID[] theAttIDArr;

      theAttIDArr = new AttID[nInstances ()];

      return allInstances.toArray (theAttIDArr);
d87 1
a87 1
// appliesTo (theCompClassID)
d89 3
a91 2
// Returns true, iff the attribute identified by this AttID applies to the
// Component class identified by theCompClassID.
d94 1
a94 1
   boolean appliesTo (CompClassID theCompClassID)
d96 7
a102 1
      return myCompClassIDs.contains (theCompClassID);
a108 5
   final String getName ()
      {
      return myName;
      }

a113 9
   final CompClassID[] getCompClassIDs ()
      {
      CompClassID[] theCompClassIDs;

      theCompClassIDs = new CompClassID[myCompClassIDs.size ()];

      return myCompClassIDs.toArray (theCompClassIDs);
      }

d147 6
a152 4
      myName         = theName;
      myAccessMode   = theAccessMode;
      myCompClassIDs = EnumSet.of (theCompClassID);
      myIndex        = nInstances ();
d154 1
a154 1
      allInstances.addLast (this);
d161 6
d168 6
a173 2
      //
      // The name of the attributes identified by this AttID.
a175 2
      //
      // Indicates the mode of access allowed by the attributes.
d177 10
a186 12
   private final EnumSet <CompClassID> myCompClassIDs;
      //
      // Identifies the set of all Component classes to which the attribute
      // applies.

   private final int myIndex;
      //
      // A unique index for this AttID;

   private static final LinkedList <AttID> allInstances;
      //
      // The list of all existing AttIDs.
a193 2
   allInstances    = new LinkedList <AttID> ();

@


1.18
log
@Attributes.
@
text
@d54 1
a54 1
      return "AttID." + myName;
d101 12
d126 1
a126 1
   final CompClassID getCompClassID ()
d128 5
a132 1
      return myCompClassID;
d168 4
a171 1
      boolean notDuplicate;
d173 1
a173 8
      myName        = theName;
      myAccessMode  = theAccessMode;
      myCompClassID = theCompClassID;
      myIndex       = nInstances ();

      notDuplicate  = allInstances.add (this);

      assert (notDuplicate);
d188 1
a188 1
   private final CompClassID myCompClassID;
d190 2
a191 1
      // Identifies the Component class to which the attribute applies.
d197 1
a197 1
   private static final ArrayList <AttID> allInstances;
d207 1
a207 1
   allInstances    = new ArrayList <AttID> (1000);
a212 2

   allInstances.trimToSize ();
@


1.17
log
@Attributes.
@
text
@d36 11
a118 5
   final int getIndex ()
      {
      return myIndex;
      }

@


1.16
log
@Attributes.
@
text
@a59 21
// Static Initialization Block
//==============================================================================

   static
      {
      allInstances = new ArrayList <AttID> (1000);

                           SUPPLY_VOL      =
      new DoubleVectorID ("SUPPLY_VOL",      INPUT,  PART);

                           SCRAP_VOL       =
      new DoubleVectorID ("SCRAP_VOL",       OUTPUT, PART);

                           DEMAND_VOL      =
      new DoubleVectorID ("DEMAND_VOL",      INPUT,  DEMAND);

                           MRP_NET_ALLOWED =
      new      BooleanID ("MRP_NET_ALLOWED", INPUT,  SUBSTITUTE);
      }

//==============================================================================
d118 20
d183 16
@


1.15
log
@Made accessor names begin with "get".
@
text
@d25 2
a26 2
//       AttID.BooleanAttID
//       AttID.DoubleVectorAttID
d54 4
a57 4
   public static final DoubleVectorAttID SUPPLY_VOL;
   public static final DoubleVectorAttID SCRAP_VOL;
   public static final DoubleVectorAttID DEMAND_VOL;
   public static final      BooleanAttID MRP_NET_ALLOWED;
d67 2
a68 2
                              SUPPLY_VOL      =
      new DoubleVectorAttID ("SUPPLY_VOL",      INPUT,  PART);
d70 2
a71 2
                              SCRAP_VOL       =
      new DoubleVectorAttID ("SCRAP_VOL",       OUTPUT, PART);
d73 2
a74 2
                              DEMAND_VOL      =
      new DoubleVectorAttID ("DEMAND_VOL",      INPUT,  DEMAND);
d76 2
a77 2
                              MRP_NET_ALLOWED =
      new      BooleanAttID ("MRP_NET_ALLOWED", INPUT,  SUBSTITUTE);
d188 1
a188 1
// Nested Class BooleanAttID
d193 1
a193 1
   static final class BooleanAttID extends AttID
d195 1
a195 1
      private BooleanAttID (
d205 1
a205 1
// Nested Class DoubleVectorAttID
d210 1
a210 1
   static final class DoubleVectorAttID extends AttID
d212 1
a212 1
      private DoubleVectorAttID (
@


1.14
log
@Self-Test.
@
text
@d114 1
a114 1
   final String myName ()
d119 1
a119 1
   final AccessMode myAccessMode ()
d124 1
a124 1
   final CompClassID myCompClassID ()
d129 1
a129 1
   final int myIndex ()
@


1.13
log
@Attributes.
@
text
@d96 1
a96 1
// getInstances ()
d101 1
a101 1
   static AttID[] getInstances ()
@


1.12
log
@Attributes.
@
text
@d10 1
a10 1
import static com.ibm.witj.AttID.AccessStyle.*;
d119 10
d144 1
a144 1
         AccessStyle theAccessStyle,
d150 1
a150 1
      myAccessStyle = theAccessStyle;
d167 1
a167 1
   private final AccessStyle myAccessStyle;
d169 1
a169 1
      // Indicates the style of access allowed by the attributes.
d193 1
a193 1
   private static final class BooleanAttID extends AttID
d197 1
a197 1
            AccessStyle theAccessStyle,
d200 1
a200 1
         super (theName, theAccessStyle, theCompClassID);
d210 1
a210 1
   private static final class DoubleVectorAttID extends AttID
d214 1
a214 1
            AccessStyle theAccessStyle,
d217 1
a217 1
         super (theName, theAccessStyle, theCompClassID);
d222 1
a222 1
// Nested Enum AccessStyle
d224 1
a224 1
// Indicates the style of access allowed by an attribute:
d230 1
a230 1
   enum AccessStyle
@


1.11
log
@Attributes.
@
text
@d8 1
a8 1
package com.ibm.witj;
d13 2
d65 1
a65 1
      nInstances = 0;
d67 2
a68 2
      SUPPLY_VOL      =
         new DoubleVectorAttID ("SUPPLY_VOL",      INPUT,  PART);
d70 2
a71 2
      SCRAP_VOL       =
         new DoubleVectorAttID ("SCRAP_VOL",       OUTPUT, PART);
d73 2
a74 2
      DEMAND_VOL      =
         new DoubleVectorAttID ("DEMAND_VOL",      INPUT,  DEMAND);
d76 2
a77 2
      MRP_NET_ALLOWED =
         new      BooleanAttID ("MRP_NET_ALLOWED", INPUT,  SUBSTITUTE);
d85 26
a123 5
   static int nInstances ()
      {
      return nInstances;
      }

d137 2
d142 3
a144 1
      myIndex       = nInstances;
d146 1
a146 1
      nInstances ++;
d169 1
a169 1
   private static int nInstances;
d171 1
a171 1
      // The # of AttID created
@


1.10
log
@Added enum CompClassID.
@
text
@d63 2
d79 23
d142 1
a142 1
   private static int nInstances = 0;
@


1.9
log
@Added nested enum AttID.AccessStyle.
@
text
@d11 1
d64 1
a64 1
         new DoubleVectorAttID ("SUPPLY_VOL",      INPUT,       Part.class);
d67 1
a67 1
         new DoubleVectorAttID ("SCRAP_VOL",       OUTPUT,      Part.class);
d70 1
a70 1
         new DoubleVectorAttID ("DEMAND_VOL",      INPUT,     Demand.class);
d73 1
a73 1
         new      BooleanAttID ("MRP_NET_ALLOWED", INPUT, Substitute.class);
d87 1
a87 1
         Class       theClass)
d91 1
a91 1
      myCompClass   = theClass;
d109 1
a109 1
   private final Class myCompClass;
d111 1
a111 2
      // The Class object for the Component class that owns the attribute
      // identified by this AttID.
d136 1
a136 1
            Class       theClass)
d138 1
a138 1
         super (theName, theAccessStyle, theClass);
d153 1
a153 1
            Class       theClass)
d155 1
a155 1
         super (theName, theAccessStyle, theClass);
@


1.8
log
@Attributes.
@
text
@d10 2
d63 1
a63 1
         new DoubleVectorAttID ("SUPPLY_VOL",      "Input",       Part.class);
d66 1
a66 1
         new DoubleVectorAttID ("SCRAP_VOL",       "Output",      Part.class);
d69 1
a69 1
         new DoubleVectorAttID ("DEMAND_VOL",      "Input",     Demand.class);
d72 1
a72 1
         new      BooleanAttID ("MRP_NET_ALLOWED", "Input", Substitute.class);
a80 9
//
// Arguments:
//    theName:       The name of the attributes identified by the AttID.
//    isInputString: "Input",  if the attributes identified by the AttID are
//                             input attributes.
//                   "Output", if the attributes identified by the AttID are
//                             output attributes.
//    theClass:      The Class object for the Component class that owns the
//                   attribute identified by this AttID.
d84 3
a86 3
         String theName,
         String isInputString,
         Class  theClass)
d88 4
a91 16
      myName = theName;
      
      if        (isInputString.equals ("Input"))
         {
         isInput = true;
         }
      else
         {
         assert (isInputString.equals ("Output"));

         isInput = false;
         }

      myCompClass = theClass;

      myIndex     = nInstances;
d104 1
a104 1
   private final boolean isInput;
d106 1
a106 2
      // True, iff the value of the attributes identified by this AttID input
      // attributes.
d122 1
a122 1
// Private Static Nested Classes
d126 1
a126 1
// Inner Class BooleanAttID
d134 3
a136 3
            String theName,
            String isInputString,
            Class  theClass)
d138 1
a138 1
         super (theName, isInputString, theClass);
d143 1
a143 1
// Inner Class DoubleVectorAttID
d151 3
a153 3
            String theName,
            String isInputString,
            Class  theClass)
d155 1
a155 1
         super (theName, isInputString, theClass);
d159 15
@


1.7
log
@Attributes
@
text
@d20 2
a21 2
//       AttID.BooleanScalar
//       AttID.DoubleVector
d49 4
a52 4
   public static final  DoubleVector SUPPLY_VOL;
   public static final  DoubleVector SCRAP_VOL;
   public static final  DoubleVector DEMAND_VOL;
   public static final BooleanScalar MRP_NET_ALLOWED;
d61 1
a61 1
         new DoubleVector  ("SUPPLY_VOL",      "Input",       Part.class);
d64 1
a64 1
         new DoubleVector  ("SCRAP_VOL",       "Output",      Part.class);
d67 1
a67 1
         new DoubleVector  ("DEMAND_VOL",      "Input",     Demand.class);
d70 1
a70 1
         new BooleanScalar ("MRP_NET_ALLOWED", "Input", Substitute.class);
d146 1
a146 1
// Inner Class BooleanScalar
d148 1
a148 1
// An AttID for attributes of type "scalar boolean".
d151 1
a151 1
   private static final class BooleanScalar extends AttID
d153 1
a153 1
      private BooleanScalar (
d163 1
a163 1
// Inner Class DoubleVector
d168 1
a168 1
   private static final class DoubleVector extends AttID
d170 1
a170 1
      private DoubleVector (
@


1.6
log
@Initial implementation of AttID classes.
@
text
@d50 1
a50 1
   public static final  DoubleVector STOCK_VOL;
d63 2
a64 2
      STOCK_VOL       =
         new DoubleVector  ("STOCK_VOL",       "Output",  Material.class);
@


1.5
log
@Removed enum AttID.
@
text
@d5 1
a5 1
// Contains the declaration of enum AttID.
d11 1
a11 1
// Enum AttID
d14 8
a21 3
// Uniquely identifies an attribute.
// There is exactly one AttID for each C++ Att in a Problem.
// The name of an AttID is the name of the corresponding C++ Att.
d24 1
a24 1
enum AttID
d26 154
a179 4
   supplyVol,
   stockVol,
   demandVol,
   mrpNetAllowed,
@


1.4
log
@Implemented of class DblVecOutAttAcc.
@
text
@@


1.3
log
@Implemented the demandVol attribute.
@
text
@d22 1
@


1.2
log
@Attributes.
@
text
@d22 1
@


1.1
log
@Added enum AttID.
@
text
@d22 1
@

