head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2009.01.22.23.12.42;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2008.12.15.15.35.33;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.07.18.50.26;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Removed java class ElementMgr, moving its responsibilities to class
Coordinator.
@
text
@
//==============================================================================
// WIT-J Java Source File ElementMgr.java.
//
// Contains the declaration of class ElementMgr.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import           java.util.*;

//==============================================================================
// Class ElementMgr
//
// "Element Manager"
// Coordinates the Elements of a Problem.
//
// Class Hierarchy:
//
// RetainedObject
//    ElementMgr
//==============================================================================

final class ElementMgr extends RetainedObject
{
//==============================================================================
// Package-Internal Constructor
//==============================================================================

   ElementMgr (Problem theProblem)
      {
      myProblem  = theProblem;

      myElements = new ArrayList <Element> ();

      myPartMap  = new HashMap <String, Part>      ();
      myOpnMap   = new HashMap <String, Operation> ();

      new GlobalElement (this);
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// shutDown ().
//
// Override from class RetainedObject.
//------------------------------------------------------------------------------

   void shutDown ()
      {
      int theIdx;

      for (theIdx = myElements.size () - 1; theIdx >= 0; theIdx --)
         {
         myElements.get (theIdx).shutDown ();
         }

      myElements.clear ();

      super.shutDown ();
      }

//------------------------------------------------------------------------------
// record (theElement)
//
// Records the fact that theElement has been created.
//------------------------------------------------------------------------------

   void record (Element theElement)
      {
      assert (theElement.getElementMgr () == this);

      myElements.add (theElement);
      }

//------------------------------------------------------------------------------
// record (theGlobalElement)
//
// Records the fact that theGlobalElement has been created.
//------------------------------------------------------------------------------

   void record (GlobalElement theGlobalElement)
      {
      assert (theGlobalElement.getElementMgr () == this);

      assert (myGlobalElement == null);

      myGlobalElement = theGlobalElement;
      }

//------------------------------------------------------------------------------
// record (thePart)
//
// Records the fact that thePart has been created.
//------------------------------------------------------------------------------

   void record (Part thePart)
      {
      assert (thePart.getElementMgr () == this);

      myPartMap.put (thePart.getPartName (), thePart);
      }

//------------------------------------------------------------------------------
// record (theOpn)
//
// Records the fact that theOpn has been created.
//------------------------------------------------------------------------------

   void record (Operation theOpn)
      {
      assert (theOpn.getElementMgr () == this);

      myOpnMap.put (theOpn.getOperationName (), theOpn);
      }

//------------------------------------------------------------------------------
// getPart (thePartName)
//
// Returns the Part that belongs to this ElementMgr whose PartName matches
// thePartName, if any; otherwise null.
//------------------------------------------------------------------------------

   Part getPart (String thePartName)
      {
      return myPartMap.get (thePartName);
      }

//------------------------------------------------------------------------------
// getOperation (theOpnName)
//
// Returns the Operation that belongs to this ElementMgr whose OperationName
// matches theOpnName, if any; otherwise null.
//------------------------------------------------------------------------------

   Operation getOperation (String theOpnName)
      {
      return myOpnMap.get (theOpnName);
      }

//------------------------------------------------------------------------------
// hasPartsOpns ()
//
// Returns true, iff this ElementMgr owns at least one Part or Operation.
//------------------------------------------------------------------------------

   boolean hasPartsOpns ()
      {
      return (myElements.size () > 1);
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   Problem getProblem ()
      {
      return myProblem;
      }

   Element[] getElements ()
      {
      return myElements.toArray (new Element[0]);
      }

   GlobalElement getGlobalElement ()
      {
      return myGlobalElement;
      }

//==============================================================================
// Private Fields
//==============================================================================
 
//------------------------------------------------------------------------------
// myProblem.
//
// The Problem that owns this ElementMgr.
//------------------------------------------------------------------------------

   private final Problem myProblem;

//------------------------------------------------------------------------------
// myElements.
//
// The list of all Elements that belong to this ElementMgr.
//------------------------------------------------------------------------------

   private final List <Element> myElements;

//------------------------------------------------------------------------------
// myGlobalElement.
//
// The GlobalElement responsible for working with global attributes of the
// Problem.
//------------------------------------------------------------------------------

   private GlobalElement myGlobalElement = null;

//------------------------------------------------------------------------------
// myPartMap
//
// myPartMap.get (thePartName) is the Part that belongs to this ElementMgr whose
// PartName matches thePartName, if any; otherwise null.
//------------------------------------------------------------------------------

   private final Map <String, Part> myPartMap;

//------------------------------------------------------------------------------
// myOpnMap
//
// myOpnMap.get (theOpnName) is the Operation that belongs to this ElementMgr
// whose OperationName matches theOpnName, if any; otherwise null.
//------------------------------------------------------------------------------

   private final Map <String, Operation> myOpnMap;

//------------------------------------------------------------------------------
}
@


1.2
log
@Minor revision.
@
text
@@


1.1
log
@Name change.
@
text
@d22 2
a23 2
//    RetainedObject
//       ElementMgr
@

