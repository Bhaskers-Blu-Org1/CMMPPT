head	1.55;
access;
symbols;
locks; strict;
comment	@# @;


1.55
date	2011.05.02.18.32.20;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2011.03.30.16.20.47;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2009.09.29.20.43.56;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2009.05.12.19.29.51;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2009.05.12.15.57.57;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2009.05.05.20.17.05;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2009.04.17.15.38.24;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2009.04.10.16.16.19;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2009.03.20.16.08.10;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2009.03.19.20.45.26;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2009.03.16.20.26.56;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2009.03.13.19.32.20;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2009.03.12.19.02.42;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2009.03.09.21.09.21;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2009.03.06.23.23.04;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2009.03.06.15.43.25;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2009.03.05.22.31.31;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2009.03.05.21.31.43;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2009.03.05.17.21.26;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2009.01.22.23.12.41;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2008.12.16.23.43.03;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.12.16.16.13.30;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.12.15.15.35.33;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.12.11.15.37.40;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.12.10.20.54.09;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.12.03.18.55.07;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.10.14.16.29.41;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.10.09.21.20.22;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.10.07.18.50.26;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.10.06.22.14.04;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.10.03.20.35.52;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.09.30.15.17.42;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.09.29.22.43.47;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.09.26.22.21.24;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.09.18.19.10.41;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.09.18.18.18.50;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.09.12.16.09.36;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.09.11.19.10.25;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.09.08.19.45.35;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.09.05.22.06.50;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.09.03.20.18.06;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.09.03.18.03.08;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.08.19.22.14.32;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.08.18.22.16.57;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.30.22.02.10;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.26.19.18.07;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.16.20.41.01;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.13.22.42.16;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.13.18.09.31;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.13.15.57.09;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.12.14.54.23;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.23.15.14.09;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.22.22.00.12;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.22.21.02.59;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.22.15.18.39;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.55
log
@Reduced heading comments.
@
text
@
//==============================================================================
// WIT-J Java Source File BopEntry.java.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

//==============================================================================
// Class BopEntry
//
// Represents a BOP entry in an implosion problem.
//
// Class Hierarchy:
//
// ThreadedObject
//    PreservedObject
//       Component
//          BopEntry
//
// Part.Associate
//    BopEntry
//==============================================================================

public final class BopEntry extends Component implements Part.Associate
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// newInstance (theOpn, thePart)
//
// Factory method: Constructs and returns a new BopEntry for the arguments.
//------------------------------------------------------------------------------

   public static BopEntry newInstance (Operation theOpn, Part thePart)
      {
      try
         {
         notAllowedWhenTerminated ("BopEntry.newInstance");

         reqMatchingProblems (
             theOpn,
            "theOpn",
             thePart,
            "thePart",
            "BopEntry.newInstance");

         return new BopEntry (theOpn, thePart);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   public Operation getOperation ()
      {
      try
         {
         mustBeActive ("BopEntry.getOperation");

         return myOperation;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public Part getPart ()
      {
      try
         {
         mustBeActive ("BopEntry.getPart");

         return myPart;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// toStringActive ().
//
// Override from class PreservedObject.
//------------------------------------------------------------------------------

   String toStringActive ()
      {
      return
           "BopEntry #"
         + myBopEntryCOR.getBopIndex ()
         + " for "
         + myOperation
         + ", producing "
         + myPart;
      }

//------------------------------------------------------------------------------
// deactivate ().
//
// Override from class PreservedObject.
//------------------------------------------------------------------------------

   void deactivate ()
      {
      myBopEntryCOR.deactivate ();
      super        .deactivate ();
      }

//------------------------------------------------------------------------------
// getCompClassID ()
//
// Override from class Component.
//------------------------------------------------------------------------------

   CompClassID getCompClassID ()
      {
      return CompClassID.BOP_ENTRY;
      }

//------------------------------------------------------------------------------
// getComponentCOR ().
//
// Override from class Component.
//------------------------------------------------------------------------------

   ComponentCOR getComponentCOR ()
      {
      return myBopEntryCOR;
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   BopEntryCOR getBopEntryCOR ()
      {
      return myBopEntryCOR;
      }

//==============================================================================
// Private Constructor
//==============================================================================

   private BopEntry (Operation theOpn, Part thePart)
      {
      super (theOpn.getCoordinator ());

      int theBopIdx;

      myOperation   = theOpn;
      myPart        = thePart;

      theBopIdx     = theOpn.getBopEntries ().size ();

      myBopEntryCOR    =
         new BopEntryCOR (
            theOpn. getOperationCOR (),
            theBopIdx,
            thePart.getPartCOR ());

      getCoordinator ().recordConcComp (this);
      myOperation      .recordBopEntry (this);
      myPart           .recordBopEntry (this);
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myOperation.
//
// The Operation whose production of a Part is represented by this BopEntry.
//------------------------------------------------------------------------------

   private final Operation myOperation;

//------------------------------------------------------------------------------
// myPart.
//
// The Part whose production by an Operation is represented by this BopEntry.
//------------------------------------------------------------------------------

   private final Part myPart;

//------------------------------------------------------------------------------
// myBopEntryCOR.
//
// The BopEntryCOR that belongs to this BopEntry.
//------------------------------------------------------------------------------

   private final BopEntryCOR myBopEntryCOR;

//==============================================================================
}
@


1.54
log
@Revised CppObjRep class ctors.
@
text
@a3 2
//
// Contains the declaration of class BopEntry.
@


1.53
log
@Initial implementation of class ThreadedObject.
@
text
@d177 5
a181 1
      myBopEntryCOR = new BopEntryCOR (this, theBopIdx);
@


1.52
log
@Replaced the throwExceptionFor method with getExeceptionToThrow.
@
text
@d19 4
a22 3
// PreservedObject
//    Component
//       BopEntry
@


1.51
log
@Changed name of Java class WitjException to GeneralException.
@
text
@d55 1
a55 1
      catch (Throwable theThrowable)
d57 1
a57 3
         throwExceptionFor (theThrowable);

         return null;
d74 1
a74 1
      catch (Throwable theThrowable)
d76 1
a76 3
         throwExceptionFor (theThrowable);

         return null;
d91 1
a91 1
      catch (Throwable theThrowable)
d93 1
a93 3
         throwExceptionFor (theThrowable);

         return null;
@


1.50
log
@Changed name of Java class RetainedObject to PreservedObject.
@
text
@d57 3
a59 1
         throw getWitjExceptionFor (theThrowable);
d78 3
a80 1
         throw getWitjExceptionFor (theThrowable);
d97 3
a99 1
         throw getWitjExceptionFor (theThrowable);
@


1.49
log
@Argument checking.
@
text
@d19 1
a19 1
// RetainedObject
d104 1
a104 1
// Override from class RetainedObject.
d121 1
a121 1
// Override from class RetainedObject.
@


1.48
log
@Minor revisions.
@
text
@d45 1
a45 1
         argProblemsMustMatch (
@


1.47
log
@Added:
   theOpn     .getBomEntriesTo  (thePart)
   theOpn     .getBopEntriesTo  (thePart)
   theBomEntry.getSubstitutesTo (thePart)
@
text
@d178 3
a180 3
      getCoordinator ().record (this);
      myOperation      .record (this);
      myPart           .record (this);
@


1.46
log
@Implemented theProblem.getInstances (theCompClass).
@
text
@d21 4
a24 1
//         BopEntry
d27 1
a27 1
public final class BopEntry extends Component
@


1.45
log
@Removed:
   theOpn     .nBomEntries  ()
   theOpn     .nBopEntries  ()
   theBomEntry.nSubstitutes ()
@
text
@d175 3
a177 2
      myOperation.record (this);
      myPart     .record (this);
@


1.44
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d166 2
d171 3
a173 1
      myBopEntryCOR = new BopEntryCOR (this, theOpn.nBopEntries ());
@


1.43
log
@Changed name of Problem method shutDown to deactivate.
@
text
@d20 1
a20 1
//    Element
d24 1
a24 1
public final class BopEntry extends Element
d128 1
a128 1
// getElemClassID ()
d130 1
a130 1
// Override from class Element.
d133 1
a133 1
   ElemClassID getElemClassID ()
d135 1
a135 1
      return ElemClassID.BOP_ENTRY;
d139 1
a139 1
// getElementCOR ().
d141 1
a141 1
// Override from class Element.
d144 1
a144 1
   ElementCOR getElementCOR ()
@


1.42
log
@purgeData
@
text
@d116 1
a116 1
// shutDown ().
d121 1
a121 1
   void shutDown ()
d123 2
a124 2
      myBopEntryCOR.shutDown ();
      super        .shutDown ();
@


1.41
log
@purgeData
@
text
@d108 1
a108 1
         + myBopIndex
a127 11
// restoreAfterPurge ()
//
// Override from class Element.
//------------------------------------------------------------------------------

   void restoreAfterPurge ()
      {
      myBopIndex = myBopEntryCOR.getBopIndex ();
      }

//------------------------------------------------------------------------------
d144 1
a144 1
   int getBopIndex ()
d146 1
a146 1
      return myBopIndex;
d149 5
a153 1
   ElementCOR getElementCOR ()
a166 1
      myBopIndex    = theOpn.nBopEntries ();
d169 1
a169 1
      myBopEntryCOR = new BopEntryCOR (this);
a187 8
// myBopIndex.
//
// The # of BopEntries for myOperation constructed before this one.
//------------------------------------------------------------------------------

   private int myBopIndex = -1;

//------------------------------------------------------------------------------
@


1.40
log
@purgeData
@
text
@a58 27
// toString
//
// Override from class Object.
//------------------------------------------------------------------------------

   public String toString ()
      {
      try
         {
         notAllowedWhenTerminated ("BopEntry.toString");

         return
              "BopEntry #"
            + myBopIndex
            + " for "
            + myOperation
            + ", producing "
            + myPart;
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
d99 17
@


1.39
log
@purgeData
@
text
@d138 1
a138 1
// setBopIndex (theValue)
d140 1
a140 1
// Setter.
d143 1
a143 1
   void setBopIndex (int theValue)
d145 1
a145 1
      myBopIndex = theValue;
@


1.38
log
@purgeData
@
text
@d138 1
a138 1
// restoreAfterPurge ()
d140 1
a140 1
// Override from class Element.
d143 1
a143 1
   void restoreAfterPurge ()
d145 1
@


1.37
log
@purgeData
@
text
@d138 1
a138 1
// reconcileForPurge ()
d143 1
a143 1
   void reconcileForPurge ()
a144 1
      assert (false);
@


1.36
log
@Removed java class ElementMgr, moving its responsibilities to class
Coordinator.
@
text
@d138 11
d211 1
a211 1
   private final int myBopIndex;
@


1.35
log
@Changed a Java class name: WitjAbortsException ==> TerminalException
@
text
@d170 1
a170 1
      super (theOpn.getElementMgr ());
@


1.34
log
@Changed class name: NonFunctionalException ==> WitjAbortsException
@
text
@d40 1
a40 1
         witjAbortedNotAllowed ("BopEntry.newInstance");
d68 1
a68 1
         witjAbortedNotAllowed ("BopEntry.toString");
@


1.33
log
@Minor revision.
@
text
@d40 1
a40 1
         witjMustBeFunctional ("BopEntry.newInstance");
d68 1
a68 1
         witjMustBeFunctional ("BopEntry.toString");
@


1.32
log
@Added the uniform try block whereever it was needed.
@
text
@d19 3
a21 3
//    RetainedObject
//       Element
//          BopEntry
@


1.31
log
@Added a call to witjMustBeFunctional whereever it was needed.
@
text
@d38 18
a55 10
      witjMustBeFunctional ("BopEntry.newInstance");

      argProblemsMustMatch (
          theOpn,
         "theOpn",
          thePart,
         "thePart",
         "BopEntry.newInstance");

      return new BopEntry (theOpn, thePart);
d66 17
a82 9
      witjMustBeFunctional ("BopEntry.toString");

      return
           "BopEntry #"
         + myBopIndex
         + " for "
         + myOperation
         + ", producing "
         + myPart;
d91 12
a102 1
      mustBeActive ("BopEntry.getOperation");
d104 1
a104 2
      return myOperation;
      }
d108 11
a118 3
      mustBeActive ("BopEntry.getPart");

      return myPart;
@


1.30
log
@Minor changes.
@
text
@d38 2
d58 2
@


1.29
log
@Made bomIndex, subIndex, and bopIndex into formal attributes.
@
text
@d49 1
a49 1
// toString ().
@


1.28
log
@Revised factory methods.
@
text
@a82 7
   public int getBopIndex ()
      {
      mustBeActive ("BopEntry.getBopIndex");

      return myBopIndex;
      }

d116 5
@


1.27
log
@Name change.
@
text
@d31 18
a90 23
// Package-Internal Constructor
//
// Arguments:
//    theOpn:      The producing Operation for this BopEntry.
//    theBopIndex: The BOP entry index     for this BopEntry.
//    thePart:     The produced  Part      for this BopEntry.
//==============================================================================

   BopEntry (Operation theOpn, int theBopIndex, Part thePart)
      {
      super (theOpn.getElementMgr ());

      myOperation   = theOpn;
      myBopIndex    = theBopIndex;
      myPart        = thePart;

      myBopEntryCOR = new BopEntryCOR (this);

      myOperation.record (this);
      myPart     .record (this);
      }

//==============================================================================
d129 18
@


1.26
log
@Changed name of Component to Entity.
@
text
@d20 1
a20 1
//       Entity
d24 1
a24 1
public final class BopEntry extends Entity
d83 1
a83 1
      super (theOpn.getEntityMgr ());
d112 1
a112 1
// getEntityClassID ()
d114 1
a114 1
// Override from class Entity.
d117 1
a117 1
   EntityClassID getEntityClassID ()
d119 1
a119 1
      return EntityClassID.BOP_ENTRY;
d123 1
a123 1
// getEntityCOR ().
d125 1
a125 1
// Override from class Entity.
d128 1
a128 1
   EntityCOR getEntityCOR ()
@


1.25
log
@Implemented extraction of BOP entries.
@
text
@d20 1
a20 1
//       Component
d24 1
a24 1
public final class BopEntry extends Component
d83 1
a83 1
      super (theOpn.getCompMgr ());
d112 1
a112 1
// getCompClassID ()
d114 1
a114 1
// Override from class Component.
d117 1
a117 1
   CompClassID getCompClassID ()
d119 1
a119 1
      return CompClassID.BOP_ENTRY;
d123 1
a123 1
// getCompCOR ().
d125 1
a125 1
// Override from class Component.
d128 1
a128 1
   ComponentCOR getCompCOR ()
@


1.24
log
@Call-back infrastructure.
@
text
@d76 3
a78 2
//    theOpn:  The producing Operation for this BopEntry.
//    thePart: The produced  Part      for this BopEntry.
d81 1
a81 1
   BopEntry (Operation theOpn, Part thePart)
d86 1
a87 1
      myBopIndex    = theOpn.getNBopEntries ();
d146 1
a146 1
// myPart.
d148 1
a148 1
// The Part whose production by an Operation is represented by this BopEntry.
d151 1
a151 1
   private final Part myPart;
d154 1
a154 1
// myBopIndex.
d156 1
a156 1
// The # of BopEntries for myOperation constructed before this one.
d159 1
a159 1
   private final int myBopIndex;
@


1.23
log
@Call-back infrastructure.
@
text
@a77 2
//
// To be called from theOpn.newBopEntry (thePart) only.
@


1.22
log
@Numerous class name changes.
@
text
@a85 3
      OperationCOR theOpnCOR;
      PartCOR      thePartCOR;

d88 1
a88 3
      myBopIndex    = theOpn .getNBopEntries  ();
      theOpnCOR     = theOpn .getOperationCOR ();
      thePartCOR    = thePart.getPartCOR      ();
d90 1
a90 1
      myBopEntryCOR = new BopEntryCOR (theOpnCOR, thePartCOR);
@


1.21
log
@Implemented theOpn.getBomEntries ().
Implemented theOpn.getBopEntries ().
@
text
@d86 2
a87 2
      OperationCI theOpnCI;
      PartCI      thePartCI;
d89 5
a93 5
      myOperation  = theOpn;
      myPart       = thePart;
      myBopIndex   = theOpn .getNBopEntries ();
      theOpnCI     = theOpn .getOperationCI ();
      thePartCI    = thePart.getPartCI      ();
d95 1
a95 1
      myBopEntryCI = new BopEntryCI (theOpnCI, thePartCI);
d113 2
a114 2
      myBopEntryCI.shutDown ();
      super       .shutDown ();
d129 1
a129 1
// getCompCI ().
d134 1
a134 1
   ComponentCI getCompCI ()
d136 1
a136 1
      return myBopEntryCI;
d168 1
a168 1
// myBopEntryCI.
d170 1
a170 1
// The BopEntryCI that belongs to this BopEntry.
d173 1
a173 1
   private final BopEntryCI myBopEntryCI;
@


1.20
log
@Implemented thePart.getBopEntries ().
@
text
@d97 2
a98 3
      theOpn.recNewBopEnt ();

      myPart.record (this);
@


1.19
log
@Active state / shutDown method.
@
text
@d98 2
@


1.18
log
@Revised the factory methods.
@
text
@d53 1
a53 1
      mustBeUnreleased ("BopEntry.getOperation");
d60 1
a60 1
      mustBeUnreleased ("BopEntry.getPart");
d67 1
a67 1
      mustBeUnreleased ("BopEntry.getBopIndex");
d105 1
a105 1
// release ().
d110 1
a110 1
   void release ()
d112 2
a113 2
      myBopEntryCI.release ();
      super       .release ();
@


1.17
log
@Initial implementation of the Session classes.
@
text
@a30 20
// makeInstance (theOpn, thePart)
//
// Factory method: Constructs and returns a new BopEntry.
//
// Arguments:
//    theOpn:  The producing Operation for the BopEntry.
//    thePart: The produced  Part      for the BopEntry.
//------------------------------------------------------------------------------

   public static BopEntry makeInstance (
         Operation theOpn,
         Part      thePart)
      {
      argMustBeUnreleased (theOpn,  "theOpn",  "BopEntry.makeInstance");
      argMustBeUnreleased (thePart, "thePart", "BopEntry.makeInstance");

      return new BopEntry (theOpn, thePart);
      }

//------------------------------------------------------------------------------
d73 28
a138 28
// Private Constructor
//
// Arguments:
//    theOpn:  The producing Operation for this BopEntry.
//    thePart: The produced  Part      for this BopEntry.
//==============================================================================

   private BopEntry (
         Operation theOpn,
         Part      thePart)
      {
      super (theOpn.getCompMgr ());

      OperationCI theOpnCI;
      PartCI      thePartCI;

      myOperation  = theOpn;
      myPart       = thePart;
      myBopIndex   = theOpn .getNBopEntries ();
      theOpnCI     = theOpn .getOperationCI ();
      thePartCI    = thePart.getPartCI      ();

      myBopEntryCI = new BopEntryCI (theOpnCI, thePartCI);

      theOpn.recNewBopEnt ();
      }

//==============================================================================
@


1.16
log
@Terminology change.
@
text
@d131 1
a131 5
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// Constructor.
d136 1
a136 1
//------------------------------------------------------------------------------
@


1.15
log
@Replaced class PublicObject with class VitalObject.
@
text
@d19 1
a19 1
//    VitalObject
d44 2
a45 2
      mustBeNonNullActive (theOpn,  "theOpn",  "BopEntry.makeInstance");
      mustBeNonNullActive (thePart, "thePart", "BopEntry.makeInstance");
d73 1
a73 1
      mustBeActive ("BopEntry.getOperation");
d80 1
a80 1
      mustBeActive ("BopEntry.getPart");
d87 1
a87 1
      mustBeActive ("BopEntry.getBopIndex");
d97 1
a97 1
// shutDown ().
d99 1
a99 1
// Override from class VitalObject.
d102 1
a102 1
   void shutDown ()
d104 2
a105 2
      myBopEntryCI.shutDown ();
      super       .shutDown ();
@


1.14
log
@Replaced toStringActive () with toString ().
@
text
@d19 1
a19 1
//    PublicObject
d99 1
a99 1
// Override from class PublicObject.
@


1.13
log
@Revised the shut-down model.
@
text
@d51 17
a108 17
// toStringActive ().
//
// Override from class PublicObject.
//------------------------------------------------------------------------------

   String toStringActive ()
      {
      return
           "BopEntry #"
         + myBopIndex
         + " for "
         + myOperation
         + ", producing "
         + myPart;
      }

//------------------------------------------------------------------------------
@


1.12
log
@Implemented Utility class.
@
text
@a87 6

      myOperation  = null;
      myPart       = null;
      myBopIndex   = -1;
      myBopEntryCI = null;

d172 1
a172 1
   private Operation myOperation;
d180 1
a180 1
   private Part myPart;
d188 1
a188 1
   private int myBopIndex;
d196 1
a196 1
   private BopEntryCI myBopEntryCI;
@


1.11
log
@Made accessor names begin with "get".
@
text
@d8 3
a10 1
package com.ibm.witj;
@


1.10
log
@Attributes.
@
text
@d49 1
a49 3
// myOperation ().
//
// Accessor.
d52 1
a52 1
   public Operation myOperation ()
d54 1
a54 1
      mustBeActive ("BopEntry.myOperation");
d59 1
a59 7
//------------------------------------------------------------------------------
// myPart ().
//
// Accessor.
//------------------------------------------------------------------------------

   public Part myPart ()
d61 1
a61 1
      mustBeActive ("BopEntry.myPart");
d66 1
a66 7
//------------------------------------------------------------------------------
// bopIndex ().
//
// Accessor.
//------------------------------------------------------------------------------

   public int bopIndex ()
d68 1
a68 1
      mustBeActive ("BopEntry.bopIndex");
d70 1
a70 1
      return bopIndex;
d89 1
a89 1
      bopIndex     = -1;
d105 1
a105 1
         + bopIndex
d113 1
a113 1
// myCompClassID ()
d118 1
a118 1
   CompClassID myCompClassID ()
d124 1
a124 1
// myCompCI ().
d129 1
a129 1
   ComponentCI myCompCI ()
d150 1
a150 1
      super (theOpn.myCompMgr ());
d157 3
a159 3
      bopIndex     = theOpn .nBopEntries   ();
      theOpnCI     = theOpn .myOperationCI ();
      thePartCI    = thePart.myPartCI      ();
d187 1
a187 1
// bopIndex.
d192 1
a192 1
   private int bopIndex;
@


1.9
log
@Created Java class CompMgr.
@
text
@d127 11
@


1.8
log
@Attributes.
@
text
@d153 1
a153 1
      super (theOpn.myProbCoord ());
@


1.7
log
@Removed class LTPubObject.
@
text
@d126 11
d200 1
a200 1
// The C++ BopEntry interface that belongs to this BopEntry.
@


1.6
log
@Added Java class LTPubObject.
@
text
@d18 2
a19 3
//       LTPubObject
//          Component
//             BopEntry
@


1.5
log
@Comments, etc.
@
text
@d18 3
a20 2
//       Component
//          BopEntry
@


1.4
log
@*** empty log message ***
@
text
@d1 7
@


1.3
log
@*** empty log message ***
@
text
@d41 39
@


1.2
log
@*** empty log message ***
@
text
@d55 4
a58 4
      producingOperation = null;
      producedPart       = null;
      bopEntryIndex      = -1;
      myBopEntryCI       = null;
d73 1
a73 1
         + bopEntryIndex
d75 1
a75 1
         + producingOperation
d77 1
a77 1
         + producedPart;
d101 5
a105 5
      producingOperation = theOpn;
      producedPart       = thePart;
      bopEntryIndex      = theOpn .nBopEntries   ();
      theOpnCI           = theOpn .myOperationCI ();
      thePartCI          = thePart.myPartCI      ();
d107 1
a107 1
      myBopEntryCI       = new BopEntryCI (theOpnCI, thePartCI);
d117 1
a117 1
// producingOperation.
d122 1
a122 1
   private Operation producingOperation;
d125 1
a125 1
// producedPart.
d130 1
a130 1
   private Part producedPart;
d133 1
a133 1
// bopEntryIndex.
d135 1
a135 1
// The # of BopEntries for producingOperation constructed before this one.
d138 1
a138 1
   private int bopEntryIndex;
@


1.1
log
@*** empty log message ***
@
text
@d6 1
a6 1
// Represents an BOP entry in an implosion problem.
d57 1
d74 2
a75 1
         + " for " + producingOperation
@

