head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2011.06.03.15.13.35;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2011.06.02.18.07.13;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.06.02.16.02.08;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.06.01.23.04.53;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Removed Pair and Quadruple.
@
text
@
//==============================================================================
// WIT-J Java Source File Pair.java.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import       java.util.*;

//==============================================================================
// Generic Class Pair <E1, E2>
//
// Represents an ordered pair of type (E1, E2)
//==============================================================================

public final class Pair <E1, E2>
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// getElement1 ()
//
// Accessor
//------------------------------------------------------------------------------

   public E1 getElement1 ()
      {
      try
         {
         notAllowedWhenTerminated ("Pair.getElement1");

         return myElement1;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getElement2 ()
//
// Accessor
//------------------------------------------------------------------------------

   public E2 getElement2 ()
      {
      try
         {
         notAllowedWhenTerminated ("Pair.getElement2");

         return myElement2;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// newArrayList (theE1List, theE2List)
//
// Constructs and returns a new List of Pairs whose elements are formed as pairs
// of corresponding elements of theE1List and theE2List.
//------------------------------------------------------------------------------

   static <E1, E2> List <Pair <E1, E2>> newList (
         ArrayList <E1> theE1List,
         ArrayList <E2> theE2List)
      {
      ArrayList <Pair <E1, E2>> thePairList;
      int                       theIdx;
      E1                        theE1;
      E2                        theE2;
      Pair <E1, E2>             thePair;

      assert (theE2List.size () == theE1List.size ());

      thePairList = new ArrayList <Pair <E1, E2>> (theE1List.size ());

      for (theIdx = 0; theIdx < theE1List.size (); theIdx ++)
         {
         theE1   = theE1List.get (theIdx);
         theE2   = theE2List.get (theIdx);

         thePair = new Pair <E1, E2> (theE1, theE2);

         thePairList.add (thePair);
         }

      return thePairList;
      }

//==============================================================================
// Private Constructor
//==============================================================================

   private Pair (E1 theE1, E2 theE2)
      {
      myElement1 = theE1;
      myElement2 = theE2;
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myElement1
// myElement2
//
// The first  Element in this Pair.
// The second Element in this Pair.
//------------------------------------------------------------------------------

   private final E1 myElement1;
   private final E2 myElement2;

//==============================================================================
}
@


1.3
log
@getPgdCritList
@
text
@@


1.2
log
@Pair
@
text
@d73 2
a74 2
// Constructs and returns a new ArrayList of Pairs whose elements are formed as
// pairs of corresponding elements of theE1List and theE2List.
d77 1
a77 1
   static <E1, E2> ArrayList <Pair <E1, E2>> newArrayList (
d87 1
a87 1
      assert (theE1List.size () == theE2List.size ());
a119 7
//
// The first Element in this Pair.
//------------------------------------------------------------------------------

   private final E1 myElement1;

//------------------------------------------------------------------------------
d122 1
d126 1
@


1.1
log
@Revised getCriticalList
@
text
@a24 22
// newInstance (theE1, theE2)
//
// Factory method:
//    Constructs and returns a new pair representing (theE1, theE2).
//------------------------------------------------------------------------------

   public static <E1, E2> Pair <E1, E2> newInstance (E1 theE1, E2 theE2)
      {
      try
         {
         notAllowedWhenTerminated ("Pair.newInstance");

         return new Pair <E1, E2> (theE1, theE2);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
a66 10
// Package-Internal Constructor
//==============================================================================

   Pair (E1 theE1, E2 theE2)
      {
      myElement1 = theE1;
      myElement2 = theE2;
      }

//==============================================================================
d83 2
d93 4
a96 4
         thePair =
            Pair.newInstance (
               theE1List.get (theIdx),
               theE2List.get (theIdx));
d105 10
@

