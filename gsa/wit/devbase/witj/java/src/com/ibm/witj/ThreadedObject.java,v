head	1.11;
access;
symbols;
locks; strict;
comment	@# @;


1.11
date	2011.05.02.18.32.34;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.03.22.21.10.08;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.02.25.16.07.11;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.09.21.33.07;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.10.01.19.50.33;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.09.30.18.28.30;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.09.30.18.27.45;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2009.09.30.18.02.10;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.29.21.50.27;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.29.20.55.32;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.29.20.43.57;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Reduced heading comments.
@
text
@
//==============================================================================
// WIT-J Java Source File ThreadedObject.java.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

//==============================================================================
// Class ThreadedObject
//
// A ThreadedObject is a public object that's associated with a specific Thread,
// specifically, the Thread in which it was created.
// Use of a ThreadedObject is limited to its associated Thread;
// using a ThreadedObject from outside its associated Thread triggers an
// exception.
//
// Class Hierarchy:
//
// ThreadedObject
//    PreservedObject
//       MessageMgr
//       Component
//          Problem
//          Part
//          Demand
//          Operation
//          BomEntry
//          Substitute
//          BopEntry
//==============================================================================

public abstract class ThreadedObject
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   public final synchronized Thread getThread ()
      {
      try
         {
         notAllowedWhenTerminated ("ThreadedObject.getThread");

         return myThread;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//==============================================================================
// Package-Internal Constructor
//==============================================================================

   ThreadedObject ()
      {
      myThread = Thread.currentThread ();
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// checkThread (methName)
//
// Verifies that the current Thread is the Thread associated with this
// ThreadedObject.
// Verifies that WIT-J has not been terminated.
//
// Arguments:
//    methName: The name of the method.
//------------------------------------------------------------------------------

   final void checkThread (String methName)
      {
      notAllowedWhenTerminated (methName);

      if (Thread.currentThread () != myThread)
         throw
            new StatusQuoException (
               "   A method of a ThreadedObject was invoked from outside the\n"
             + "   ThreadedObject's associated Thread.\n"
             + "\n"
             + "      ThreadedObject:    " + this     + "\n"
             + "      Method:            " + methName + "\n"
             + "      Associated Thread: " + myThread + "\n"
             + "      Current    Thread: " + Thread.currentThread ());
      }

//------------------------------------------------------------------------------
// checkThread (theArg, argName, methName)
//
// Verifies that the current Thread is the Thread associated with a
// ThreadedObject argument to a method.
// Verifies the argument is non-null.
//
// Arguments:
//    theArg:   The argument being checked.
//    argName:  The name of the argument being checked.
//    methName: The name of the method.
//------------------------------------------------------------------------------

   static void checkThread (
         ThreadedObject theArg,
         String         argName,
         String         methName)
      {
      mustBeNonNull (theArg, argName, methName);

      if (Thread.currentThread () != theArg.myThread)
         throw
            new StatusQuoException (
               "   A ThreadedObject was passed as an argument to a method\n"
             + "   from outside the ThreadedObject's associated Thread.\n"
             + "\n"
             + "      Method:            " + methName        + "\n"
             + "      Argument:          " + argName         + "\n"
             + "      Argument Value:    " + theArg          + "\n"
             + "      Associated Thread: " + theArg.myThread + "\n"
             + "      Current    Thread: " + Thread.currentThread ());
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myThread
//
// The Thread associated with this ThreadedObject, i.e., the Thread in which it
// was created.
//------------------------------------------------------------------------------

   private final Thread myThread;

//==============================================================================
}
@


1.10
log
@Made AllocTriple not extend ThreadedObject.
@
text
@a3 2
//
// Contains the declaration of class ThreadedObject.
@


1.9
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@a33 1
//    AllocTriple
@


1.8
log
@Revised a comment.
@
text
@a24 1
//       Problem
d27 1
a27 1
//          GlobalAspect
@


1.7
log
@Implemented thread-safety test cases 1 & 2.
@
text
@d17 2
a18 2
// Access to a ThreadedObject is limited to its associated Thread;
// accessing a ThreadedObject from outside its associated Thread triggers an
@


1.6
log
@Restoring ThreadedObject.java.
@
text
@d94 2
a95 2
               "   A method of a ThreadedObject was invoked from outside its\n"
             + "   associated Thread.\n"
d127 1
a127 1
             + "   from outside its associated Thread.\n"
@


1.5
log
@Temporarily removing ThreadedObject.java.
@
text
@@


1.4
log
@Further implementation of class ThreadedObject.
@
text
@@


1.3
log
@Implemented theThreadedObject.checkThread (...).
@
text
@d15 5
a19 2
// A ThreadedObject is a public object that is only to be accessed from the
// Thread in which it was created.
d79 3
a81 2
// Verifies that the current Thread is the Thread in which this ThreadedObject
// was created.
d94 34
a127 2
               "   A method of a ThreadedObject was invoked in a different\n"
             + "   Thread than the Thread in which the object was created.\n"
d129 5
a133 4
             + "      ThreadedObject:    " + this                    + "\n"
             + "      Method:            " + methName                + "\n"
             + "      Invocation Thread: " + Thread.currentThread () + "\n"
             + "      Creation   Thread: " + myThread);
d143 2
a144 1
// The Thread in which this ThreadedObject was created.
@


1.2
log
@Made class AllocTriple extend ThreadedObject.
@
text
@d70 30
@


1.1
log
@Initial implementation of class ThreadedObject.
@
text
@d32 1
@

