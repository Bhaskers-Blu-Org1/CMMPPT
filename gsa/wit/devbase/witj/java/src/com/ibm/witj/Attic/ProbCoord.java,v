head	1.29;
access;
symbols;
locks; strict;
comment	@# @;


1.29
date	2008.09.09.15.15.31;	author rjw;	state dead;
branches;
next	1.28;

1.28
date	2008.09.08.19.45.36;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.09.05.22.06.51;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.09.03.20.33.11;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.09.03.20.18.07;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.08.22.17.53.46;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.08.19.22.14.33;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.08.18.22.16.58;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.08.09.00.18.27;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.08.07.17.28.25;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.07.31.15.52.01;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.07.30.22.43.31;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.07.30.22.05.23;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.07.18.15.49.41;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.07.10.21.44.25;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.07.09.22.26.47;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.07.09.15.45.40;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.30.22.02.11;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.30.19.56.05;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.17.13.38.08;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.16.20.41.02;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.12.15.37.20;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.12.14.54.24;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.11.19.59.53;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.29.20.53.57;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.19.19.04.43;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.15.22.11.58;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.15.19.45.19;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.14.16.07.27;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Removed Java class ProbCoord.
@
text
@
//==============================================================================
// WIT-J Java Source File ProbCoord.java.
//
// Contains the declaration of class ProbCoord.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import  java.util.*;

//==============================================================================
// Class ProbCoord
//
// "Problem Coordinator"
// Responsible for coordinating the objects associated with a Problem.
//
// Class Hierarchy:
//
//    RetainedObject
//       ProbCoord
//==============================================================================

final class ProbCoord extends RetainedObject
{
//==============================================================================
// Package-Internal Constructor
//==============================================================================

   ProbCoord (
         Problem theProblem,
         boolean selfTestModeVal)
      {
      assert (! unreleasedInstances.contains (this));

      unreleasedInstances.add (this);

      selfTestMode  = selfTestModeVal;

      myProblem     = theProblem;

      myProbCoordCI = new ProbCoordCI ();
      myCompMgr     = new CompMgr     (this);
      myAttRepMgr   = new AttRepMgr   (this);

      if (selfTestMode)
         AttSpec.selfTest ();
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// release ().
//
// Override from class RetainedObject.
//------------------------------------------------------------------------------

   void release ()
      {
      myCompMgr    .release ();
      myProbCoordCI.release ();
      myAttRepMgr  .release ();

      assert (unreleasedInstances.contains (this));

      unreleasedInstances.remove (this);

      super        .release ();
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   Problem getProblem ()
      {
      return myProblem;
      }

   ProbCoordCI getProbCoordCI ()
      {
      return myProbCoordCI;
      }

   CompMgr getCompMgr ()
      {
      return myCompMgr;
      }

   AttRepMgr getAttRepMgr ()
      {
      return myAttRepMgr;
      }

   boolean selfTestMode ()
      {
      return selfTestMode;
      }

//==============================================================================
// Private Fields
//==============================================================================
 
//------------------------------------------------------------------------------
// myProblem.
//
// The Problem that owns this ProbCoord.
//------------------------------------------------------------------------------

   private final Problem myProblem;

//------------------------------------------------------------------------------
// myProbCoordCI.
//
// The C++ ProbCoord interface that belongs to this ProbCoord.
//------------------------------------------------------------------------------

   private final ProbCoordCI myProbCoordCI;

//------------------------------------------------------------------------------
// myCompMgr.
//
// The CompMgr that belongs to this ProbCoord.
//------------------------------------------------------------------------------

   private final CompMgr myCompMgr;

//------------------------------------------------------------------------------
// myAttRepMgr.
//
// The AttRepMgr that belongs to this ProbCoord.
//------------------------------------------------------------------------------

   private final AttRepMgr myAttRepMgr;

//------------------------------------------------------------------------------
// selfTestMode
//
// True, iff myProblem is currently performing a self-test.
//------------------------------------------------------------------------------

   private final boolean selfTestMode;

//------------------------------------------------------------------------------
// unreleasedInstances
//
// The set of all ProbCoords in the program process that have not yet been
// released. Their presence in this Set prevents them from being
// garbage-collected until they are released.
//------------------------------------------------------------------------------

   private static final Set <ProbCoord> unreleasedInstances;

//==============================================================================
// Static initialization block
//==============================================================================

   static
      {
      unreleasedInstances = new HashSet <ProbCoord> (10);
      }

//==============================================================================
}
@


1.28
log
@Initial implementation of the Session classes.
@
text
@@


1.27
log
@Terminology change.
@
text
@d29 1
a29 1
// Package-Internal Methods
a31 4
//------------------------------------------------------------------------------
// Constructor.
//------------------------------------------------------------------------------

d52 4
@


1.26
log
@Replaced class InternalObject with class VitalObject.
@
text
@d22 1
a22 1
//    VitalObject
d26 1
a26 1
final class ProbCoord extends VitalObject
d40 1
a40 1
      assert (! allActiveInstances.contains (this));
d42 1
a42 1
      allActiveInstances.add (this);
d57 1
a57 1
// shutDown ().
d59 1
a59 1
// Override from class VitalObject.
d62 1
a62 1
   void shutDown ()
d64 3
a66 3
      myCompMgr    .shutDown ();
      myProbCoordCI.shutDown ();
      myAttRepMgr  .shutDown ();
d68 1
a68 1
      assert (allActiveInstances.contains (this));
d70 1
a70 1
      allActiveInstances.remove (this);
d72 1
a72 1
      super        .shutDown ();
d149 1
a149 1
// allActiveInstances
d151 3
a153 3
// The set of all ProbCoords in the program process that are currently active.
// Their presence in this Set prevents them from being garbage-collected while
// they are active.
d156 1
a156 1
   private static final HashSet <ProbCoord> allActiveInstances;
d164 1
a164 1
      allActiveInstances = new HashSet <ProbCoord> (10);
@


1.25
log
@Replaced class PublicObject with class VitalObject.
@
text
@d22 1
a22 1
//    InternalObject
d26 1
a26 1
final class ProbCoord extends InternalObject
d59 1
a59 1
// Override from class InternalObject.
@


1.24
log
@Removed enum AttID.
@
text
@d152 2
a153 2
// Their presence in this Set prevents them from being garbage-collected before
// they are shut-down.
@


1.23
log
@Revised the shut-down model.
@
text
@d53 1
a53 1
         AttID.selfTest ();
@


1.22
log
@Implemented Utility class.
@
text
@d40 4
d68 3
a70 4
      myProblem     = null;
      myProbCoordCI = null;
      myCompMgr     = null;
      myAttRepMgr   = null;
d114 1
a114 1
   private Problem myProblem;
d122 1
a122 1
   private ProbCoordCI myProbCoordCI;
d130 1
a130 1
   private CompMgr myCompMgr;
d138 1
a138 1
   private AttRepMgr myAttRepMgr;
d149 19
@


1.21
log
@AttReps.
@
text
@d8 3
a10 1
package com.ibm.witj;
a60 5

      System.out.println (
           "\n"
         + "Before myProbCoordCI.shutDown ().\n");

a61 5

      System.out.println (
           "\n"
         + "After  myProbCoordCI.shutDown ().\n");

@


1.20
log
@AttReps.
@
text
@d45 3
a47 1
      myAttCIMgr    = new AttCIMgr    (this);
a70 1
      myAttCIMgr   .shutDown ();
a75 1
      myAttCIMgr    = null;
a103 5
   AttCIMgr getAttCIMgr ()
      {
      return myAttCIMgr;
      }

a145 8
// myAttCIMgr.
//
// The AttCIMgr that belongs to this ProbCoord.
//------------------------------------------------------------------------------

   private AttCIMgr myAttCIMgr;

//------------------------------------------------------------------------------
@


1.19
log
@Attributes.
@
text
@d44 1
d68 1
d74 1
d99 5
d143 8
@


1.18
log
@Attributes.
@
text
@d34 3
a36 1
   ProbCoord (Problem theProblem)
d38 2
d43 2
a44 3

      myCompMgr     = new CompMgr  (this);
      myAttCIMgr    = new AttCIMgr (this);
a77 17
// selfTest ()
//
// Performs various tests of WIT-J that cannot be done by calling (other) public
// methods.
//------------------------------------------------------------------------------

   void selfTest ()
      {
      System.out.println (
           "\n"
         + "Performing self-test.");

      Attribute .selfTest ();
      myAttCIMgr.selfTest ();
      }

//------------------------------------------------------------------------------
d101 5
d143 8
@


1.17
log
@Attributes.
@
text
@d87 1
@


1.16
log
@Attributes.
@
text
@d75 16
@


1.15
log
@Attributes.
@
text
@d52 6
d59 5
a63 1
      myCompMgr    .shutDown ();
@


1.14
log
@Attributes.
@
text
@d40 2
a41 3
      myCompMgr     = new CompMgr     (this);
      myAttOldMgr   = new AttOldMgr   (this);
      myAttCIMgr    = new AttCIMgr    (this);
a53 1
      myAttOldMgr  .shutDown ();
a58 1
      myAttOldMgr   = null;
a82 5
   AttOldMgr getAttOldMgr ()
      {
      return myAttOldMgr;
      }

a116 8
// myAttOldMgr.
//
// The AttOldMgr that belongs to this ProbCoord.
//------------------------------------------------------------------------------

   private AttOldMgr myAttOldMgr;

//------------------------------------------------------------------------------
@


1.13
log
@Attributes.
@
text
@d42 1
d56 1
d62 1
d91 5
d133 8
@


1.12
log
@Made accessor names begin with "get".
@
text
@d41 1
a41 1
      myAttMgr      = new AttMgr      (this);
d54 1
a54 1
      myAttMgr     .shutDown ();
d59 1
a59 1
      myAttMgr      = null;
d83 1
a83 1
   AttMgr getAttMgr ()
d85 1
a85 1
      return myAttMgr;
d117 1
a117 1
// myAttMgr.
d119 1
a119 1
// The AttMgr that belongs to this ProbCoord.
d122 1
a122 1
   private AttMgr myAttMgr;
@


1.11
log
@Minor update.
@
text
@d68 1
a68 1
   Problem myProblem ()
d73 1
a73 1
   ProbCoordCI myProbCoordCI ()
d78 1
a78 1
   CompMgr myCompMgr ()
d83 1
a83 1
   AttMgr myAttMgr ()
@


1.10
log
@Implemented Java class AttRep.
@
text
@d65 1
a65 3
// myProblem ()
//
// Accessor.
a72 6
//------------------------------------------------------------------------------
// myProbCoordCI ()
//
// Accessor.
//------------------------------------------------------------------------------

a77 6
//------------------------------------------------------------------------------
// myCompMgr ()
//
// Accessor.
//------------------------------------------------------------------------------

a82 6
//------------------------------------------------------------------------------
// myAttMgr ()
//
// Accessor.
//------------------------------------------------------------------------------

@


1.9
log
@Created Java class CompMgr.
@
text
@d40 2
a41 2
      myCompMgr     = new CompMgr    (this);
      myAttMgr      = new AttMgr     (this);
d45 1
a45 1
// shutdown ().
@


1.8
log
@Added Java class AttMgr.
@
text
@d40 2
a41 5
      myComponents  = new ArrayList <Component> ();

      myGlobalComp  = new GlobalComp (this);

      myAttMgr      = new AttMgr (this);
a51 8
      int theIdx;

      for (theIdx = myComponents.size () - 1; theIdx >= 0; theIdx --)
         {
         myComponents.get (theIdx).shutDown ();
         }

      myComponents .clear    ();
d53 1
d58 1
a58 1
      myGlobalComp  = null;
a64 16
// add (theComp)
//
// Adds theComp to the set of Components owned by the Problem.
//------------------------------------------------------------------------------

   void add (Component theComp)
      {
      myComponents.add (theComp);

      if (! nPeriodsFrozen)
         if (   (theComp instanceof Part)
             || (theComp instanceof Operation))
            nPeriodsFrozen = true;
      }

//------------------------------------------------------------------------------
d87 1
a87 1
// myGlobalComp ()
d92 1
a92 1
   GlobalComp myGlobalComp ()
d94 1
a94 1
      return myGlobalComp;
a107 11
//------------------------------------------------------------------------------
// nPeriodsFrozen ()
//
// Accessor.
//------------------------------------------------------------------------------

   boolean nPeriodsFrozen ()
      {
      return nPeriodsFrozen;
      }

d129 1
a129 1
// myComponents.
d131 1
a131 1
// The list of all Components owned by the Problem.
d134 1
a134 9
   private final ArrayList <Component> myComponents;

//------------------------------------------------------------------------------
// myGlobalComp.
//
// The GlobalComp responsible for working with global attributes of the Problem.
//------------------------------------------------------------------------------

   private GlobalComp myGlobalComp;
a144 9
// nPeriodsFrozen.
//
// True, iff the value of nPeriods cannot be changed, due to the presence of at
// least one Part or Operation in the Problem.
//------------------------------------------------------------------------------

   private boolean nPeriodsFrozen = false;

//------------------------------------------------------------------------------
@


1.7
log
@Comments, etc.
@
text
@d44 1
a44 1
      buildAttCIs ();
d64 1
a64 3

      if (supplyVolCI != null)
         supplyVolCI.shutDown ();
d69 1
a69 1
      supplyVolCI   = null;
d124 1
a124 1
// supplyVolCI ()
d129 1
a129 1
   AttCI supplyVolCI ()
d131 1
a131 1
      return supplyVolCI;
a145 23
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// buildAttCIs ()
//
// Creates the AttCIs that will be owned by this ProbCoord.
//------------------------------------------------------------------------------

   private void buildAttCIs ()
      {
      AttBldrCI theAttBldrCI;

      theAttBldrCI = new AttBldrCI (myProbCoordCI);

      supplyVolCI  = new AttCI (theAttBldrCI, "supplyVol");

      assert (theAttBldrCI.isEmpty ());

      theAttBldrCI.shutDown ();
      }

//==============================================================================
d182 1
a182 1
// supplyVolCI.
d184 1
a184 1
// The Java interface to the C++ Att representing the supplyVol attribute.
d187 1
a187 1
   private AttCI supplyVolCI;
@


1.6
log
@Attributes
@
text
@d1 7
@


1.5
log
@Attributes.
@
text
@d158 2
@


1.4
log
@*** empty log message ***
@
text
@d36 2
d58 3
d64 1
d97 4
d119 11
d141 21
d198 8
@


1.3
log
@*** empty log message ***
@
text
@d55 5
d129 1
a129 1
   private final Problem myProblem;
d137 1
a137 1
   private final ProbCoordCI myProbCoordCI;
d153 1
a153 1
   private final GlobalComp myGlobalComp;
@


1.2
log
@*** empty log message ***
@
text
@d31 1
a31 1
      myProbCoordCI = new ProbCoordCI (theProblem.myProblemCI ());
@


1.1
log
@*** empty log message ***
@
text
@d29 1
a29 1
      myProblem    = theProblem;
d31 1
a31 1
      myComponents = new ArrayList <Component> ();
d33 3
a35 1
      myGlobalComp = new GlobalComp (this);
d53 3
a55 3
      myComponents.clear ();

      super.shutDown ();
d69 2
a70 1
         if (theComp instanceof Operation)
d86 7
d127 8
d154 1
a154 1
// least one Operation in the Problem.
@

