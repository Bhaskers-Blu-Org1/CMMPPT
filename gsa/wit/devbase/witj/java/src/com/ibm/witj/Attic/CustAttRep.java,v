head	1.72;
access;
symbols;
locks; strict;
comment	@# @;


1.72
date	2009.03.30.21.07.31;	author rjw;	state dead;
branches;
next	1.71;

1.71
date	2009.03.19.20.45.27;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2009.03.13.21.08.58;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2009.03.13.19.32.21;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2009.03.13.16.36.08;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2009.03.12.22.48.36;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2009.03.12.22.45.20;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2009.03.09.21.09.21;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2009.01.27.19.51.05;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2009.01.23.19.32.24;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2009.01.22.23.12.41;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2009.01.21.21.43.24;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2009.01.17.00.14.16;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2009.01.16.23.45.55;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2008.12.15.15.35.33;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2008.12.11.19.06.23;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2008.12.11.17.01.29;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2008.12.10.19.20.40;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2008.12.09.18.38.18;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2008.12.03.23.02.21;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2008.12.03.18.28.49;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2008.11.21.19.15.36;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2008.11.21.17.20.32;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2008.11.21.16.56.11;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2008.11.12.20.40.32;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2008.11.05.23.14.56;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2008.10.29.20.27.19;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2008.10.27.20.43.48;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2008.10.24.22.30.19;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2008.10.22.13.43.30;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2008.10.14.22.17.46;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2008.10.14.20.05.46;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2008.10.14.16.29.41;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2008.10.07.18.50.26;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2008.10.06.22.14.05;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.10.06.14.52.39;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.10.01.22.33.04;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2008.09.26.22.21.25;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.09.19.15.11.13;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.09.17.21.27.58;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.09.05.22.06.51;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.09.04.21.47.41;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.09.04.21.24.30;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.09.04.20.56.18;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.09.04.20.36.23;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.09.03.20.33.11;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.09.02.21.04.21;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.09.02.14.37.24;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.08.29.18.36.43;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.08.29.17.19.07;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.08.29.15.13.33;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.08.29.14.22.01;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.08.28.21.13.42;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.08.28.18.50.40;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.08.28.18.30.38;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.08.28.15.37.58;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.08.27.15.30.47;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.08.27.15.18.17;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.08.26.21.51.35;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.08.26.21.40.31;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.08.26.18.19.51;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.08.22.17.53.46;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.08.20.22.49.02;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.08.20.21.48.21;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.08.20.20.57.48;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.08.20.20.45.50;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.08.20.20.17.57;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.08.20.19.47.50;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.08.20.18.49.28;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.20.15.08.40;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.19.22.14.32;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.19.20.34.46;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.72
log
@Changed names of AttRep classes to AttImp.
@
text
@
//==============================================================================
// WIT-J Java Source File CustAttRep.java.
//
// Contains the declaration of class CustAttRep.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility    .*;
import static com.ibm.witj.Attribute  .*;
import static com.ibm.witj.CompClassID.*;

import       java.util.*;

//==============================================================================
// Class CustAttRep
//
// "Customized Attribute Representative."
// An AttRep that operates in a specific, customized way.
//
// Class Hierarchy:
//
// RetainedObject
//    AttRep
//       CustAttRep
//          {Anonymous Inner Classes}
//==============================================================================

abstract class CustAttRep extends AttRep
{
//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// Overrides from class AttRep.
//------------------------------------------------------------------------------

   boolean appliesTo (CompClassID theCompClassID)
      {
      return (theCompClassID == myCompClassID);
      }

//------------------------------------------------------------------------------
// buildInstances (theCoord)
//
// Constructs all of the CustAttReps that are to belong to theCoord.
//------------------------------------------------------------------------------

   static void buildInstances (Coordinator theCoord)
      {
      ourCoordForBuild = theCoord;

      buildBomIndexAttRep          ();
      buildBopIndexAttRep          ();
      buildDemandNameAttRep        ();
      buildNPeriodsAttRep          ();
      buildOperationNameAttRep     ();
      buildPartNameAttRep          ();
      buildSolverLogFileNameAttRep ();
      buildSubIndexAttRep          ();
      buildTitleAttRep             ();

      buildBoundSetAttRep (DEMAND,    cumShipBounds ());
      buildBoundSetAttRep (OPERATION, execBounds    ());
      buildBoundSetAttRep (PART,      stockBounds   ());

      ourCoordForBuild = null;
      }

//==============================================================================
// Private Constructor
//==============================================================================

   private CustAttRep (CompClassID theCompClassID, Attribute <?> theAtt)
      {
      super (theAtt);

      myCompClassID = theCompClassID;

      ourCoordForBuild.store (this);
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// build{AttName}AttRep methods
//
// Each of these methods constructs the indicated CustAttRep.
//------------------------------------------------------------------------------

   static void buildBomIndexAttRep ()
      {
      new CustAttRep (BOM_ENTRY, bomIndex ())
         {
         boolean isModifiable ()
            {
            return false;
            }

         int getInt (Component theComp)
            {
            return theComp.asBomEntry ().getBomEntryCOR ().getBomIndex ();
            }
         };
      }

   static void buildBopIndexAttRep ()
      {
      new CustAttRep (BOP_ENTRY, bopIndex ())
         {
         boolean isModifiable ()
            {
            return false;
            }

         int getInt (Component theComp)
            {
            return theComp.asBopEntry ().getBopEntryCOR ().getBopIndex ();
            }
         };
      }

   static void buildDemandNameAttRep ()
      {
      new CustAttRep (DEMAND, demandName ())
         {
         boolean isModifiable ()
            {
            return true;
            }

         void setString (Component theComp, String theValue)
            {
            theComp.asDemand ().setDemandName (theValue);
            }

         String getString (Component theComp)
            {
            return theComp.asDemand ().getDemandName ();
            }
         };
      }

   static void buildNPeriodsAttRep ()
      {
      new CustAttRep (GLOBAL_ASPECT, nPeriods ())
         {
         boolean isModifiable ()
            {
            return true;
            }

         void setInt (Component theComp, int theValue)
            {
            if (theComp.getCoordinator ().hasPartsOrOperations ())
               {
               throw
                  new StatusQuoException (
                     "   The setValue method was called for Attribute "
                   +    "\"nPeriods\"\n"
                   + "   in a Problem that has one or more Parts or Operations."
                      );
               }

            theComp.asGlobalAspect ().setNPeriods (theValue);
            }

         int getInt (Component theComp)
            {
            return theComp.asGlobalAspect ().getNPeriods ();
            }
         };
      }

   static void buildOperationNameAttRep ()
      {
      new CustAttRep (OPERATION, operationName ())
         {
         boolean isModifiable ()
            {
            return true;
            }

         void setString (Component theComp, String theValue)
            {
            theComp.asOperation ().setOperationName (theValue);
            }

         String getString (Component theComp)
            {
            return theComp.asOperation ().getOperationName ();
            }
         };
      }

   static void buildPartNameAttRep ()
      {
      new CustAttRep (PART, partName ())
         {
         boolean isModifiable ()
            {
            return true;
            }

         void setString (Component theComp, String theValue)
            {
            theComp.asPart ().setPartName (theValue);
            }

         String getString (Component theComp)
            {
            return theComp.asPart ().getPartName ();
            }
         };
      }

   static void buildSolverLogFileNameAttRep ()
      {
      new CustAttRep (GLOBAL_ASPECT, solverLogFileName ())
         {
         boolean isModifiable ()
            {
            return true;
            }

         void setString (Component theComp, String theValue)
            {
            theComp.
               asGlobalAspect ().
                  getGlobalAspectCOR ().
                     setSolverLogFileName (theValue);
            }

         String getString (Component theComp)
            {
            return
               theComp.
                  asGlobalAspect ().
                     getGlobalAspectCOR ().
                        getSolverLogFileName ();
            }
         };
      }

   static void buildSubIndexAttRep ()
      {
      new CustAttRep (SUBSTITUTE, subIndex ())
         {
         boolean isModifiable ()
            {
            return false;
            }

         int getInt (Component theComp)
            {
            return theComp.asSubstitute ().getSubstituteCOR ().getSubIndex ();
            }
         };
      }

   static void buildTitleAttRep ()
      {
      new CustAttRep (GLOBAL_ASPECT, title ())
         {
         boolean isModifiable ()
            {
            return true;
            }

         void setString (Component theComp, String theValue)
            {
            theComp.asGlobalAspect ().getGlobalAspectCOR ().setTitle (theValue);
            }

         String getString (Component theComp)
            {
            return theComp.asGlobalAspect ().getGlobalAspectCOR ().getTitle ();
            }
         };
      }

//------------------------------------------------------------------------------
// buildBoundSetAttRep (theCompClassID, theAtt)
//
// Constructs a CustAttRep for a Bound Set attribute specified by theAtt,
// that applies to the Component class identified by theCompClassID.
//------------------------------------------------------------------------------

   private static void buildBoundSetAttRep (
         CompClassID          theCompClassID,
         Attribute <BoundSet> theAtt)
      {
      new CustAttRep (theCompClassID, theAtt)
         {
         boolean isModifiable ()
            {
            return true;
            }

         void setBoundSet (
               Component theComp,
               double[]  hardLBArr,
               double[]  softLBArr,
               double[]  hardUBArr)
            {
            theComp.
               getComponentCOR ().
                  setBoundSet (hardLBArr, softLBArr, hardUBArr);
            }

         void getBoundSet (
               Component theComp,
               double[]  hardLBArr,
               double[]  softLBArr,
               double[]  hardUBArr)
            {
            theComp.
               getComponentCOR ().
                  getBoundSet (hardLBArr, softLBArr, hardUBArr);
            }
         };
      }

//==============================================================================
// Private Fields
//==============================================================================
 
//------------------------------------------------------------------------------
// myCompClassID
//
// Identifies the Component class to which this CustAttRep applies.
// A CustAttRep applies to only one Component class.
//------------------------------------------------------------------------------

   private final CompClassID myCompClassID;

//------------------------------------------------------------------------------
// ourCoordForBuild
//
// During the execution of buildInstances (theCoord), ourCoordForBuild is the
// Coordinator with which it was called; otherwise ourCoordForBuild is null.
//------------------------------------------------------------------------------

   private static Coordinator ourCoordForBuild = null;

//==============================================================================
}
@


1.71
log
@Implemented theProblem.getInstances (theCompClass).
@
text
@@


1.70
log
@Changed theProblem.getComponents () to return an unmodifiable view.
@
text
@d159 2
a160 1
            if (theComp.getCoordinator ().getComponents ().size () > 1)
d167 1
@


1.69
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d159 1
a159 1
            if (theComp.getCoordinator ().hasPartsOpns ())
@


1.68
log
@Changed name of GlobalComponent classes to GlobalAspect.
@
text
@d12 1
a12 1
import static com.ibm.witj.ElemClassID.*;
d40 1
a40 1
   boolean appliesTo (ElemClassID theElemClassID)
d42 1
a42 1
      return (theElemClassID == myElemClassID);
d76 1
a76 1
   private CustAttRep (ElemClassID theElemClassID, Attribute <?> theAtt)
d80 1
a80 1
      myElemClassID = theElemClassID;
d104 1
a104 1
         int getInt (Element theElement)
d106 1
a106 1
            return theElement.asBomEntry ().getBomEntryCOR ().getBomIndex ();
d120 1
a120 1
         int getInt (Element theElement)
d122 1
a122 1
            return theElement.asBopEntry ().getBopEntryCOR ().getBopIndex ();
d136 1
a136 1
         void setString (Element theElement, String theValue)
d138 1
a138 1
            theElement.asDemand ().setDemandName (theValue);
d141 1
a141 1
         String getString (Element theElement)
d143 1
a143 1
            return theElement.asDemand ().getDemandName ();
d157 1
a157 1
         void setInt (Element theElement, int theValue)
d159 1
a159 1
            if (theElement.getCoordinator ().hasPartsOpns ())
d167 1
a167 1
            theElement.asGlobalAspect ().setNPeriods (theValue);
d170 1
a170 1
         int getInt (Element theElement)
d172 1
a172 1
            return theElement.asGlobalAspect ().getNPeriods ();
d186 1
a186 1
         void setString (Element theElement, String theValue)
d188 1
a188 1
            theElement.asOperation ().setOperationName (theValue);
d191 1
a191 1
         String getString (Element theElement)
d193 1
a193 1
            return theElement.asOperation ().getOperationName ();
d207 1
a207 1
         void setString (Element theElement, String theValue)
d209 1
a209 1
            theElement.asPart ().setPartName (theValue);
d212 1
a212 1
         String getString (Element theElement)
d214 1
a214 1
            return theElement.asPart ().getPartName ();
d228 1
a228 1
         void setString (Element theElement, String theValue)
d230 1
a230 1
            theElement.
d236 1
a236 1
         String getString (Element theElement)
d239 1
a239 1
               theElement.
d256 1
a256 1
         int getInt (Element theElement)
d258 1
a258 2
            return
               theElement.asSubstitute ().getSubstituteCOR ().getSubIndex ();
d272 1
a272 1
         void setString (Element theElement, String theValue)
d274 1
a274 4
            theElement.
               asGlobalAspect ().
                  getGlobalAspectCOR ().
                     setTitle (theValue);
d277 1
a277 1
         String getString (Element theElement)
d279 1
a279 5
            return
               theElement.
                  asGlobalAspect ().
                     getGlobalAspectCOR ().
                        getTitle ();
d285 1
a285 1
// buildBoundSetAttRep (theElemClassID, theAtt)
d288 1
a288 1
// that applies to the Element class identified by theElemClassID.
d292 1
a292 1
         ElemClassID          theElemClassID,
d295 1
a295 1
      new CustAttRep (theElemClassID, theAtt)
d303 4
a306 4
               Element  theElement,
               double[] hardLBArr,
               double[] softLBArr,
               double[] hardUBArr)
d308 2
a309 2
            theElement.
               getElementCOR ().
d314 4
a317 4
               Element  theElement,
               double[] hardLBArr,
               double[] softLBArr,
               double[] hardUBArr)
d319 2
a320 2
            theElement.
               getElementCOR ().
d331 1
a331 1
// myElemClassID
d333 2
a334 2
// Identifies the Element class to which this CustAttRep applies.
// A CustAttRep applies to only one Element class.
d337 1
a337 1
   private final ElemClassID myElemClassID;
@


1.67
log
@Enum name change: GLOBAL_ELEMENT --> GLOBAL_COMPONENT
@
text
@d150 1
a150 1
      new CustAttRep (GLOBAL_COMPONENT, nPeriods ())
d167 1
a167 1
            theElement.asGlobalComponent ().setNPeriods (theValue);
d172 1
a172 1
            return theElement.asGlobalComponent ().getNPeriods ();
d221 1
a221 1
      new CustAttRep (GLOBAL_COMPONENT, solverLogFileName ())
d231 2
a232 2
               asGlobalComponent ().
                  getGlobalComponentCOR ().
d240 2
a241 2
                  asGlobalComponent ().
                     getGlobalComponentCOR ().
d266 1
a266 1
      new CustAttRep (GLOBAL_COMPONENT, title ())
d276 2
a277 2
               asGlobalComponent ().
                  getGlobalComponentCOR ().
d285 2
a286 2
                  asGlobalComponent ().
                     getGlobalComponentCOR ().
@


1.66
log
@Changed name of GlobalElement classes to GlobalComponent.
@
text
@d150 1
a150 1
      new CustAttRep (GLOBAL_ELEMENT, nPeriods ())
d221 1
a221 1
      new CustAttRep (GLOBAL_ELEMENT, solverLogFileName ())
d266 1
a266 1
      new CustAttRep (GLOBAL_ELEMENT, title ())
@


1.65
log
@purgeData
@
text
@d167 1
a167 1
            theElement.asGlobalElement ().setNPeriods (theValue);
d172 1
a172 1
            return theElement.asGlobalElement ().getNPeriods ();
d231 2
a232 2
               asGlobalElement ().
                  getGlobalElementCOR ().
d240 2
a241 2
                  asGlobalElement ().
                     getGlobalElementCOR ().
d276 2
a277 2
               asGlobalElement ().
                  getGlobalElementCOR ().
d284 4
a287 1
               theElement.asGlobalElement ().getGlobalElementCOR ().getTitle ();
@


1.64
log
@CustAttRep.
@
text
@d106 1
a106 1
            return theElement.asBomEntry ().getBomIndex ();
d122 1
a122 1
            return theElement.asBopEntry ().getBopIndex ();
d258 2
a259 1
            return theElement.asSubstitute ().getSubIndex ();
@


1.63
log
@Coordinator
@
text
@d53 17
a69 13
      buildBomIndexAttRep          (theCoord);
      buildBopIndexAttRep          (theCoord);
      buildDemandNameAttRep        (theCoord);
      buildNPeriodsAttRep          (theCoord);
      buildOperationNameAttRep     (theCoord);
      buildPartNameAttRep          (theCoord);
      buildSolverLogFileNameAttRep (theCoord);
      buildSubIndexAttRep          (theCoord);
      buildTitleAttRep             (theCoord);

      buildBoundSetAttRep (theCoord, DEMAND,    cumShipBounds ());
      buildBoundSetAttRep (theCoord, OPERATION, execBounds    ());
      buildBoundSetAttRep (theCoord, PART,      stockBounds   ());
d76 1
a76 4
   private CustAttRep (
         Coordinator   theCoord,
         ElemClassID   theElemClassID,
         Attribute <?> theAtt)
d82 1
a82 1
      theCoord.store (this);
d92 1
a92 1
// Each of these methods constructs the indicated CustAttRep for theCoord.
d95 1
a95 1
   static void buildBomIndexAttRep (Coordinator theCoord)
d97 1
a97 1
      new CustAttRep (theCoord, BOM_ENTRY, bomIndex ())
d111 1
a111 1
   static void buildBopIndexAttRep (Coordinator theCoord)
d113 1
a113 1
      new CustAttRep (theCoord, BOP_ENTRY, bopIndex ())
d127 1
a127 1
   static void buildDemandNameAttRep (Coordinator theCoord)
d129 1
a129 1
      new CustAttRep (theCoord, DEMAND, demandName ())
d148 1
a148 1
   static void buildNPeriodsAttRep (Coordinator theCoord)
d150 1
a150 1
      new CustAttRep (theCoord, GLOBAL_ELEMENT, nPeriods ())
d177 1
a177 1
   static void buildOperationNameAttRep (Coordinator theCoord)
d179 1
a179 1
      new CustAttRep (theCoord, OPERATION, operationName ())
d198 1
a198 1
   static void buildPartNameAttRep (Coordinator theCoord)
d200 1
a200 1
      new CustAttRep (theCoord, PART, partName ())
d219 1
a219 1
   static void buildSolverLogFileNameAttRep (Coordinator theCoord)
d221 1
a221 1
      new CustAttRep (theCoord, GLOBAL_ELEMENT, solverLogFileName ())
d247 1
a247 1
   static void buildSubIndexAttRep (Coordinator theCoord)
d249 1
a249 1
      new CustAttRep (theCoord, SUBSTITUTE, subIndex ())
d263 1
a263 1
   static void buildTitleAttRep (Coordinator theCoord)
d265 1
a265 1
      new CustAttRep (theCoord, GLOBAL_ELEMENT, title ())
d289 1
a289 1
// buildBoundSetAttRep (theCoord, theElemClassID, theAtt)
d292 1
a292 2
// that applies to the Element class identified by theElemClassID and that is
// to belong to by theCoord and stores it in theCoord.
a295 1
         Coordinator          theCoord,
d299 1
a299 1
      new CustAttRep (theCoord, theElemClassID, theAtt)
d343 9
@


1.62
log
@Removed java class ElementMgr, moving its responsibilities to class
Coordinator.
@
text
@d46 1
a46 1
// buildInstances (theCoordinator)
d48 1
a48 1
// Constructs all of the CustAttReps that are to belong to theCoordinator.
d51 1
a51 1
   static void buildInstances (Coordinator theCoordinator)
d53 13
a65 13
      buildBomIndexAttRep          (theCoordinator);
      buildBopIndexAttRep          (theCoordinator);
      buildDemandNameAttRep        (theCoordinator);
      buildNPeriodsAttRep          (theCoordinator);
      buildOperationNameAttRep     (theCoordinator);
      buildPartNameAttRep          (theCoordinator);
      buildSolverLogFileNameAttRep (theCoordinator);
      buildSubIndexAttRep          (theCoordinator);
      buildTitleAttRep             (theCoordinator);

      buildBoundSetAttRep (theCoordinator, DEMAND,    cumShipBounds ());
      buildBoundSetAttRep (theCoordinator, OPERATION, execBounds    ());
      buildBoundSetAttRep (theCoordinator, PART,      stockBounds   ());
d73 1
a73 1
         Coordinator   theCoordinator,
d81 1
a81 1
      theCoordinator.store (this);
d91 1
a91 1
// Each of these methods constructs the indicated CustAttRep for theCoordinator.
d94 1
a94 1
   static void buildBomIndexAttRep (Coordinator theCoordinator)
d96 1
a96 1
      new CustAttRep (theCoordinator, BOM_ENTRY, bomIndex ())
d110 1
a110 1
   static void buildBopIndexAttRep (Coordinator theCoordinator)
d112 1
a112 1
      new CustAttRep (theCoordinator, BOP_ENTRY, bopIndex ())
d126 1
a126 1
   static void buildDemandNameAttRep (Coordinator theCoordinator)
d128 1
a128 1
      new CustAttRep (theCoordinator, DEMAND, demandName ())
d147 1
a147 1
   static void buildNPeriodsAttRep (Coordinator theCoordinator)
d149 1
a149 1
      new CustAttRep (theCoordinator, GLOBAL_ELEMENT, nPeriods ())
d176 1
a176 1
   static void buildOperationNameAttRep (Coordinator theCoordinator)
d178 1
a178 1
      new CustAttRep (theCoordinator, OPERATION, operationName ())
d197 1
a197 1
   static void buildPartNameAttRep (Coordinator theCoordinator)
d199 1
a199 1
      new CustAttRep (theCoordinator, PART, partName ())
d218 1
a218 1
   static void buildSolverLogFileNameAttRep (Coordinator theCoordinator)
d220 1
a220 1
      new CustAttRep (theCoordinator, GLOBAL_ELEMENT, solverLogFileName ())
d246 1
a246 1
   static void buildSubIndexAttRep (Coordinator theCoordinator)
d248 1
a248 1
      new CustAttRep (theCoordinator, SUBSTITUTE, subIndex ())
d262 1
a262 1
   static void buildTitleAttRep (Coordinator theCoordinator)
d264 1
a264 1
      new CustAttRep (theCoordinator, GLOBAL_ELEMENT, title ())
d288 1
a288 1
// buildBoundSetAttRep (theCoordinator, theElemClassID, theAtt)
d292 1
a292 1
// to belong to by theCoordinator and stores it in theCoordinator.
d296 1
a296 1
         Coordinator          theCoordinator,
d300 1
a300 1
      new CustAttRep (theCoordinator, theElemClassID, theAtt)
@


1.61
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d158 1
a158 1
            if (theElement.getElementMgr ().hasPartsOpns ())
@


1.60
log
@Java ProbMgr.
@
text
@d46 1
a46 1
// buildInstances (theProbMgr)
d48 1
a48 1
// Constructs all of the CustAttReps that are to belong to theProbMgr.
d51 1
a51 1
   static void buildInstances (ProbMgr theProbMgr)
d53 13
a65 13
      buildBomIndexAttRep          (theProbMgr);
      buildBopIndexAttRep          (theProbMgr);
      buildDemandNameAttRep        (theProbMgr);
      buildNPeriodsAttRep          (theProbMgr);
      buildOperationNameAttRep     (theProbMgr);
      buildPartNameAttRep          (theProbMgr);
      buildSolverLogFileNameAttRep (theProbMgr);
      buildSubIndexAttRep          (theProbMgr);
      buildTitleAttRep             (theProbMgr);

      buildBoundSetAttRep (theProbMgr, DEMAND,    cumShipBounds ());
      buildBoundSetAttRep (theProbMgr, OPERATION, execBounds    ());
      buildBoundSetAttRep (theProbMgr, PART,      stockBounds   ());
d73 1
a73 1
         ProbMgr       theProbMgr,
d81 1
a81 1
      theProbMgr.store (this);
d91 1
a91 1
// Each of these methods constructs the indicated CustAttRep for theProbMgr.
d94 1
a94 1
   static void buildBomIndexAttRep (ProbMgr theProbMgr)
d96 1
a96 1
      new CustAttRep (theProbMgr, BOM_ENTRY, bomIndex ())
d110 1
a110 1
   static void buildBopIndexAttRep (ProbMgr theProbMgr)
d112 1
a112 1
      new CustAttRep (theProbMgr, BOP_ENTRY, bopIndex ())
d126 1
a126 1
   static void buildDemandNameAttRep (ProbMgr theProbMgr)
d128 1
a128 1
      new CustAttRep (theProbMgr, DEMAND, demandName ())
d147 1
a147 1
   static void buildNPeriodsAttRep (ProbMgr theProbMgr)
d149 1
a149 1
      new CustAttRep (theProbMgr, GLOBAL_ELEMENT, nPeriods ())
d176 1
a176 1
   static void buildOperationNameAttRep (ProbMgr theProbMgr)
d178 1
a178 1
      new CustAttRep (theProbMgr, OPERATION, operationName ())
d197 1
a197 1
   static void buildPartNameAttRep (ProbMgr theProbMgr)
d199 1
a199 1
      new CustAttRep (theProbMgr, PART, partName ())
d218 1
a218 1
   static void buildSolverLogFileNameAttRep (ProbMgr theProbMgr)
d220 1
a220 1
      new CustAttRep (theProbMgr, GLOBAL_ELEMENT, solverLogFileName ())
d246 1
a246 1
   static void buildSubIndexAttRep (ProbMgr theProbMgr)
d248 1
a248 1
      new CustAttRep (theProbMgr, SUBSTITUTE, subIndex ())
d262 1
a262 1
   static void buildTitleAttRep (ProbMgr theProbMgr)
d264 1
a264 1
      new CustAttRep (theProbMgr, GLOBAL_ELEMENT, title ())
d288 1
a288 1
// buildBoundSetAttRep (theProbMgr, theElemClassID, theAtt)
d292 1
a292 1
// to belong to by theProbMgr and stores it in theProbMgr.
d296 1
a296 1
         ProbMgr              theProbMgr,
d300 1
a300 1
      new CustAttRep (theProbMgr, theElemClassID, theAtt)
@


1.59
log
@Java ProbMgr
@
text
@d53 43
d108 1
d110 2
a111 2
      //........................................................................

d124 1
d126 2
a127 6
      //........................................................................

      buildBoundSetAttRep (theProbMgr, DEMAND, cumShipBounds ());

      //........................................................................

d145 1
d147 2
a148 6
      //........................................................................

     buildBoundSetAttRep (theProbMgr, OPERATION, execBounds ());

      //........................................................................

d174 1
d176 2
a177 2
      //........................................................................

d195 1
d197 2
a198 2
      //........................................................................

d216 1
d218 2
a219 2
      //........................................................................

d244 1
d246 2
a247 6
      //........................................................................

     buildBoundSetAttRep (theProbMgr, PART, stockBounds ());

      //........................................................................

d260 1
d262 2
a263 2
      //........................................................................

a286 20
//==============================================================================
// Private Constructor
//==============================================================================

   private CustAttRep (
         ProbMgr       theProbMgr,
         ElemClassID   theElemClassID,
         Attribute <?> theAtt)
      {
      super (theAtt);

      myElemClassID = theElemClassID;

      theProbMgr.store (this);
      }

//==============================================================================
// Private Methods
//==============================================================================

@


1.58
log
@Minor revision.
@
text
@d46 1
a46 1
// buildInstances (theAttRepMgr)
d48 1
a48 1
// Constructs all of the CustAttReps that are to belong to theAttRepMgr.
d51 1
a51 1
   static void buildInstances (AttRepMgr theAttRepMgr)
d53 1
a53 1
      new CustAttRep (theAttRepMgr, BOM_ENTRY, bomIndex ())
d68 1
a68 1
      new CustAttRep (theAttRepMgr, BOP_ENTRY, bopIndex ())
d83 1
a83 1
      buildBoundSetAttRep (theAttRepMgr, DEMAND, cumShipBounds ());
d87 1
a87 1
      new CustAttRep (theAttRepMgr, DEMAND, demandName ())
d107 1
a107 1
     buildBoundSetAttRep (theAttRepMgr, OPERATION, execBounds ());
d111 1
a111 1
      new CustAttRep (theAttRepMgr, GLOBAL_ELEMENT, nPeriods ())
d139 1
a139 1
      new CustAttRep (theAttRepMgr, OPERATION, operationName ())
d159 1
a159 1
      new CustAttRep (theAttRepMgr, PART, partName ())
d179 1
a179 1
      new CustAttRep (theAttRepMgr, GLOBAL_ELEMENT, solverLogFileName ())
d206 1
a206 1
     buildBoundSetAttRep (theAttRepMgr, PART, stockBounds ());
d210 1
a210 1
      new CustAttRep (theAttRepMgr, SUBSTITUTE, subIndex ())
d225 1
a225 1
      new CustAttRep (theAttRepMgr, GLOBAL_ELEMENT, title ())
d253 1
a253 1
         AttRepMgr     theAttRepMgr,
d261 1
a261 1
      theAttRepMgr.store (this);
d269 1
a269 1
// buildBoundSetAttRep (theAttRepMgr, theElemClassID, theAtt)
d273 1
a273 1
// to belong to by theAttRepMgr and stores it in theAttRepMgr.
d277 1
a277 1
         AttRepMgr            theAttRepMgr,
d281 1
a281 1
      new CustAttRep (theAttRepMgr, theElemClassID, theAtt)
@


1.57
log
@Added text to the detail message of StatusQuoExceptions.
@
text
@d24 4
a27 4
//    RetainedObject
//       AttRep
//          CustAttRep
//             {Anonymous Inner Classes}
@


1.56
log
@Changed name of class IntactException to StatusQuoException.
@
text
@d121 6
a126 6
               throw new StatusQuoException (
                    "\n\n"
                  + "   The setValue method was called for Attribute "
                  +    "\"nPeriods\"\n"
                  + "   in a Problem that has one or more Parts or " 
                  +    "Operations.\n");
@


1.55
log
@Changed class names:
   HarmlessException ==> IntactException
   UnknownException  ==> UnexpectedException
@
text
@d121 1
a121 1
               throw new IntactException (
@


1.54
log
@Replaced standard Exceptions with HarmlessExceptions in throw statements.
@
text
@d121 1
a121 1
               throw new HarmlessException (
@


1.53
log
@Exceptions
@
text
@d121 1
a121 1
               throw new IllegalStateException (
@


1.52
log
@Changed name of method Attribute.allowsSetValue to isModifiable.
@
text
@d120 8
@


1.51
log
@Removed all remaining reflection code.
@
text
@d55 1
a55 1
         boolean allowsSetValue ()
d70 1
a70 1
         boolean allowsSetValue ()
d89 1
a89 1
         boolean allowsSetValue ()
d113 1
a113 1
         boolean allowsSetValue ()
d133 1
a133 1
         boolean allowsSetValue ()
d153 1
a153 1
         boolean allowsSetValue ()
d173 1
a173 1
         boolean allowsSetValue ()
d204 1
a204 1
         boolean allowsSetValue ()
d219 1
a219 1
         boolean allowsSetValue ()
d275 1
a275 1
         boolean allowsSetValue ()
@


1.50
log
@Attributes.
@
text
@a14 1
import       java.lang.reflect.*;
a45 20
// compIAllowSetValue ()
//
// Override from class AttRep.
//
// Returns true, iff the concrete class to which this CustAttRep belongs has at
// least one "set" method.
//------------------------------------------------------------------------------

   boolean compIAllowSetValue ()
      {
      for (Method theMethod: getClass ().getDeclaredMethods ())
         {
         if (theMethod.getName ().substring (0, 3).equals ("set"))
            return true;
         }

      return false;
      }

//------------------------------------------------------------------------------
d55 5
d70 5
d89 5
d113 5
d133 5
d153 5
d173 5
d204 5
d219 5
a252 2
      detIAllowSetValue ();

d275 5
@


1.49
log
@Removed Enum AccessStyle.
@
text
@a40 5
   boolean appliesTo (Element theElement)
      {
      return (theElement.getElemClassID () == myElemClassID);
      }

d47 1
a47 1
// compAllowSetValue ()
d55 1
a55 1
   boolean compAllowSetValue ()
d69 1
a69 2
// Constructs all of the CustAttReps that are to belong to theAttRepMgr and
// takes ownership of them.
d229 1
a229 1
      detAllowSetValue ();
@


1.48
log
@Replaced Attribute partCategory with thePart.getCategory ().
@
text
@a11 1
import static com.ibm.witj.AccessStyle.*;
d52 1
a52 1
// compAccessStyle ()
d56 2
a57 2
// If the concrete class to which this CustAttRep belongs has at least one "set"
// method, INPUT is returned; otherwise OUTPUT is returned.
d60 1
a60 1
   AccessStyle compAccessStyle ()
d65 1
a65 1
            return INPUT;
d68 1
a68 1
      return OUTPUT;
d235 1
a235 1
      detAccessStyle ();
@


1.47
log
@Minor revision.
@
text
@a153 13
      new CustAttRep (theAttRepMgr, PART, partCategory ())
         {
         Part.Category getPartCat (Element theElement)
            {
            return
               theElement.asPart ().getPartCOR ().getCategoryIsMat ()?
                  Part.Category.MATERIAL:
                  Part.Category.CAPACITY;
            }
         };

      //........................................................................

@


1.46
log
@Implemented theAttribute.appliesTo (theClass).
@
text
@d243 1
a243 1
         Attribute <?> theAttribute)
d245 1
a245 1
      super (theAttribute);
d259 1
a259 1
// buildBoundSetAttRep (theAttRepMgr, theElemClassID, theAttribute)
d261 1
a261 1
// Constructs a CustAttRep for a Bound Set attribute specified by theAttribute,
d269 1
a269 1
         Attribute <BoundSet> theAttribute)
d271 1
a271 1
      new CustAttRep (theAttRepMgr, theElemClassID, theAttribute)
@


1.45
log
@Changed ownership of AttRepMgr from Problem to Session.
@
text
@d47 5
@


1.44
log
@Minor Revision.
@
text
@a156 1
                  
@


1.43
log
@Changed name of generic class AttSpec <V> to Attribute <V>.
@
text
@d119 1
a119 1
      new CustAttRep (theAttRepMgr, GLOBAL_COMP, nPeriods ())
d178 1
a178 1
      new CustAttRep (theAttRepMgr, GLOBAL_COMP, solverLogFileName ())
d214 1
a214 1
      new CustAttRep (theAttRepMgr, GLOBAL_COMP, title ())
@


1.42
log
@Minot revision.
@
text
@d11 1
a11 1
import static com.ibm.witj.AttSpec    .*;
d237 3
a239 3
         AttRepMgr   theAttRepMgr,
         ElemClassID theElemClassID,
         AttSpec <?> theAttSpec)
d241 1
a241 1
      super (theAttSpec);
d255 1
a255 1
// buildBoundSetAttRep (theAttRepMgr, theElemClassID, theAttSpec)
d257 1
a257 1
// Constructs a CustAttRep for a Bound Set attribute specified by theAttSpec,
d263 3
a265 3
         AttRepMgr          theAttRepMgr,
         ElemClassID        theElemClassID,
         AttSpec <BoundSet> theAttSpec)
d267 1
a267 1
      new CustAttRep (theAttRepMgr, theElemClassID, theAttSpec)
@


1.41
log
@Conditional expressions.
@
text
@d154 1
a154 1
               theElement.asPart ().getPartCOR ().getMaterialCase ()?
@


1.40
log
@Made bomIndex, subIndex, and bopIndex into formal attributes.
@
text
@d153 5
a157 4
            if (theElement.asPart ().getPartCOR ().getMaterialCase ())
               return Part.Category.MATERIAL;
            else
               return Part.Category.CAPACITY;
@


1.39
log
@Name change.
@
text
@d76 20
d203 10
@


1.38
log
@Changed name of Component to Entity.
@
text
@d10 4
a13 4
import static com.ibm.witj.Utility      .*;
import static com.ibm.witj.AttSpec      .*;
import static com.ibm.witj.AccessStyle  .*;
import static com.ibm.witj.EntityClassID.*;
d42 1
a42 1
   boolean appliesTo (Entity theEntity)
d44 1
a44 1
      return (theEntity.getEntityClassID () == myEntityClassID);
d82 1
a82 1
         void setString (Entity theEntity, String theValue)
d84 1
a84 1
            theEntity.asDemand ().setDemandName (theValue);
d87 1
a87 1
         String getString (Entity theEntity)
d89 1
a89 1
            return theEntity.asDemand ().getDemandName ();
d101 1
a101 1
         void setInt (Entity theEntity, int theValue)
d103 1
a103 1
            theEntity.asGlobalEntity ().setNPeriods (theValue);
d106 1
a106 1
         int getInt (Entity theEntity)
d108 1
a108 1
            return theEntity.asGlobalEntity ().getNPeriods ();
d116 1
a116 1
         void setString (Entity theEntity, String theValue)
d118 1
a118 1
            theEntity.asOperation ().setOperationName (theValue);
d121 1
a121 1
         String getString (Entity theEntity)
d123 1
a123 1
            return theEntity.asOperation ().getOperationName ();
d131 1
a131 1
         Part.Category getPartCat (Entity theEntity)
d133 1
a133 1
            if (theEntity.asPart ().getPartCOR ().getMaterialCase ())
d144 1
a144 1
         void setString (Entity theEntity, String theValue)
d146 1
a146 1
            theEntity.asPart ().setPartName (theValue);
d149 1
a149 1
         String getString (Entity theEntity)
d151 1
a151 1
            return theEntity.asPart ().getPartName ();
d159 1
a159 1
         void setString (Entity theEntity, String theValue)
d161 3
a163 3
            theEntity.
               asGlobalEntity ().
                  getGlobalEntityCOR ().
d167 1
a167 1
         String getString (Entity theEntity)
d170 3
a172 3
               theEntity.
                  asGlobalEntity ().
                     getGlobalEntityCOR ().
d185 1
a185 1
         void setString (Entity theEntity, String theValue)
d187 3
a189 3
            theEntity.
               asGlobalEntity ().
                  getGlobalEntityCOR ().
d193 1
a193 1
         String getString (Entity theEntity)
d196 1
a196 1
               theEntity.asGlobalEntity ().getGlobalEntityCOR ().getTitle ();
d206 3
a208 3
         AttRepMgr     theAttRepMgr,
         EntityClassID theEntityClassID,
         AttSpec <?>   theAttSpec)
d212 1
a212 1
      myEntityClassID = theEntityClassID;
d224 1
a224 1
// buildBoundSetAttRep (theAttRepMgr, theEntityClassID, theAttSpec)
d227 1
a227 1
// that applies to the Entity class identified by theEntityClassID and that is
d233 1
a233 1
         EntityClassID      theEntityClassID,
d236 1
a236 1
      new CustAttRep (theAttRepMgr, theEntityClassID, theAttSpec)
d239 1
a239 1
               Entity   theEntity,
d244 2
a245 2
            theEntity.
               getEntityCOR ().
d250 1
a250 1
               Entity   theEntity,
d255 2
a256 2
            theEntity.
               getEntityCOR ().
d267 1
a267 1
// myEntityClassID
d269 2
a270 2
// Identifies the Entity class to which this CustAttRep applies.
// A CustAttRep applies to only one Entity class.
d273 1
a273 1
   private final EntityClassID myEntityClassID;
@


1.37
log
@Minor revision
@
text
@d10 4
a13 4
import static com.ibm.witj.Utility    .*;
import static com.ibm.witj.AttSpec    .*;
import static com.ibm.witj.AccessStyle.*;
import static com.ibm.witj.CompClassID.*;
d42 1
a42 1
   boolean appliesTo (Component theComp)
d44 1
a44 1
      return (theComp.getCompClassID () == myCompClassID);
d82 1
a82 1
         void setString (Component theComp, String theValue)
d84 1
a84 1
            theComp.asDemand ().setDemandName (theValue);
d87 1
a87 1
         String getString (Component theComp)
d89 1
a89 1
            return theComp.asDemand ().getDemandName ();
d101 1
a101 1
         void setInt (Component theComp, int theValue)
d103 1
a103 1
            theComp.asGlobalComp ().setNPeriods (theValue);
d106 1
a106 1
         int getInt (Component theComp)
d108 1
a108 1
            return theComp.asGlobalComp ().getNPeriods ();
d116 1
a116 1
         void setString (Component theComp, String theValue)
d118 1
a118 1
            theComp.asOperation ().setOperationName (theValue);
d121 1
a121 1
         String getString (Component theComp)
d123 1
a123 1
            return theComp.asOperation ().getOperationName ();
d131 1
a131 1
         Part.Category getPartCat (Component theComp)
d133 1
a133 1
            if (theComp.asPart ().getPartCOR ().getMaterialCase ())
d144 1
a144 1
         void setString (Component theComp, String theValue)
d146 1
a146 1
            theComp.asPart ().setPartName (theValue);
d149 1
a149 1
         String getString (Component theComp)
d151 1
a151 1
            return theComp.asPart ().getPartName ();
d159 1
a159 1
         void setString (Component theComp, String theValue)
d161 3
a163 3
            theComp.
               asGlobalComp ().
                  getGlobalCompCOR ().
d167 1
a167 1
         String getString (Component theComp)
d170 3
a172 3
               theComp.
                  asGlobalComp ().
                     getGlobalCompCOR ().
d185 1
a185 1
         void setString (Component theComp, String theValue)
d187 4
a190 1
            theComp.asGlobalComp ().getGlobalCompCOR ().setTitle (theValue);
d193 1
a193 1
         String getString (Component theComp)
d195 2
a196 1
            return theComp.asGlobalComp ().getGlobalCompCOR ().getTitle ();
d206 3
a208 3
         AttRepMgr   theAttRepMgr,
         CompClassID theCompClassID,
         AttSpec <?> theAttSpec)
d212 1
a212 1
      myCompClassID = theCompClassID;
d224 1
a224 1
// buildBoundSetAttRep (theAttRepMgr, theCompClassID, theAttSpec)
d227 1
a227 1
// that applies to the Component class identified by theCompClassID and that is
d233 1
a233 1
         CompClassID        theCompClassID,
d236 1
a236 1
      new CustAttRep (theAttRepMgr, theCompClassID, theAttSpec)
d239 4
a242 4
               Component theComp,
               double[]  hardLBArr,
               double[]  softLBArr,
               double[]  hardUBArr)
d244 2
a245 2
            theComp.
               getCompCOR ().
d250 4
a253 4
               Component theComp,
               double[]  hardLBArr,
               double[]  softLBArr,
               double[]  hardUBArr)
d255 2
a256 2
            theComp.
               getCompCOR ().
d267 1
a267 1
// myCompClassID
d269 2
a270 2
// Identifies the Component class to which this CustAttRep applies.
// A CustAttRep applies to only one Component class.
d273 1
a273 1
   private final CompClassID myCompClassID;
@


1.36
log
@Minor revision.
@
text
@d133 1
a133 1
            if (theComp.asPart ().getPartCOR ().getMaterialMode ())
@


1.35
log
@Numerous class name changes.
@
text
@d133 1
a133 1
            if (theComp.asPart ().getPartCOR ().isAMaterial ())
@


1.34
log
@Minor revision.
@
text
@d133 1
a133 1
            if (theComp.asPart ().getPartCI ().isAMaterial ())
d163 1
a163 1
                  getGlobalCompCI ().
d172 1
a172 1
                     getGlobalCompCI ().
d187 1
a187 1
            theComp.asGlobalComp ().getGlobalCompCI ().setTitle (theValue);
d192 1
a192 1
            return theComp.asGlobalComp ().getGlobalCompCI ().getTitle ();
d241 1
a241 1
               getCompCI ().
d252 1
a252 1
               getCompCI ().
@


1.33
log
@Minor revision.
@
text
@d133 1
a133 1
            if (theComp.asPart ().getPartCI ().isMaterial ())
@


1.32
log
@Terminology change.
@
text
@d70 2
a71 2
// Constructs all of the CustAttReps to be owned by theAttRepMgr and stores them
// in theAttRepMgr.
d223 2
a224 2
// that applies to the Component class identified by theCompClassID, to be owned
// by theAttRepMgr and stores it in theAttRepMgr.
@


1.31
log
@Added attribute cumShipBounds.
@
text
@d26 1
a26 1
//    VitalObject
@


1.30
log
@Added attribute "stockBounds".
@
text
@d76 4
@


1.29
log
@Attributes.
@
text
@d175 4
@


1.28
log
@Added attribute "execBounds".
@
text
@d196 1
a196 1
         AttSpec     theAttSpec)
@


1.27
log
@Replaced class InternalObject with class VitalObject.
@
text
@d29 1
a29 1
//             [Anonymous inner classes of class CustAttRep]
d91 4
d208 43
@


1.26
log
@Customized attributes.
@
text
@d26 1
a26 1
//    InternalObject
@


1.25
log
@"partCategory" attribute.
@
text
@d11 1
d68 1
a68 1
// makeInstances ()
d70 2
a71 2
// Constructs all of the CustAttReps to be used in a Problem and returns a List
// of them.
d74 1
a74 1
   static List <CustAttRep> makeInstances ()
d76 6
a81 1
      ArrayList <CustAttRep> theCustAttReps;
d83 5
a87 1
      theCustAttReps = new ArrayList <CustAttRep> ();
d89 1
a89 7
      theCustAttReps.add (demandName        ());
      theCustAttReps.add (operationName     ());
      theCustAttReps.add (nPeriods          ());
      theCustAttReps.add (partCategory      ());
      theCustAttReps.add (partName          ());
      theCustAttReps.add (solverLogFileName ());
      theCustAttReps.add (title             ());
d91 6
a96 2
      return theCustAttReps;
      }
d98 5
a102 3
//==============================================================================
// Private Constructor
//==============================================================================
d104 1
a104 5
   private CustAttRep (
         AttSpec     theAttSpec,
         CompClassID theCompClassID)
      {
      super (theAttSpec);
d106 6
a111 1
      myCompClassID = theCompClassID;
d113 1
a113 18
      detAccessStyle ();
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// Static factory methods
//
// Each of these methods constructs and returns a new CustAttRep for the
// attribute indicated by the name of the method.
//------------------------------------------------------------------------------

   private static CustAttRep demandName ()
      {
      return
         new CustAttRep (AttSpec.demandName (), DEMAND)
d115 3
a117 11
            void setString (Component theComp, String theValue)
               {
               theComp.asDemand ().setDemandName (theValue);
               }

            String getString (Component theComp)
               {
               return theComp.asDemand ().getDemandName ();
               }
            };
      }
d119 1
a119 1
//------------------------------------------------------------------------------
d121 3
a123 4
   private static CustAttRep nPeriods ()
      {
      return
         new CustAttRep (AttSpec.nPeriods (), GLOBAL_COMP)
d125 6
a130 11
            void setInt (Component theComp, int theValue)
               {
               theComp.asGlobalComp ().setNPeriods (theValue);
               }

            int getInt (Component theComp)
               {
               return theComp.asGlobalComp ().getNPeriods ();
               }
            };
      }
d132 1
a132 1
//------------------------------------------------------------------------------
d134 3
a136 4
   private static CustAttRep operationName ()
      {
      return
         new CustAttRep (AttSpec.operationName (), OPERATION)
d138 2
a139 11
            void setString (Component theComp, String theValue)
               {
               theComp.asOperation ().setOperationName (theValue);
               }

            String getString (Component theComp)
               {
               return theComp.asOperation ().getOperationName ();
               }
            };
      }
d141 1
a141 6
//------------------------------------------------------------------------------

   private static CustAttRep partCategory ()
      {
      return
         new CustAttRep (AttSpec.partCategory (), PART)
d143 3
a145 9
            Part.Category getPartCat (Component theComp)
               {
               if (theComp.asPart ().getPartCI ().isMaterial ())
                  return Part.Category.MATERIAL;
               else
                  return Part.Category.CAPACITY;
               }
            };
      }
d147 1
a147 1
//------------------------------------------------------------------------------
d149 3
a151 4
   private static CustAttRep partName ()
      {
      return
         new CustAttRep (AttSpec.partName (), PART)
d153 5
a157 11
            void setString (Component theComp, String theValue)
               {
               theComp.asPart ().setPartName (theValue);
               }

            String getString (Component theComp)
               {
               return theComp.asPart ().getPartName ();
               }
            };
      }
d159 1
a159 6
//------------------------------------------------------------------------------

   private static CustAttRep solverLogFileName ()
      {
      return
         new CustAttRep (AttSpec.solverLogFileName (), GLOBAL_COMP)
d161 1
a161 2
            void setString (Component theComp, String theValue)
               {
d165 5
a169 2
                        setSolverLogFileName (theValue);
               }
d171 12
a182 9
            String getString (Component theComp)
               {
               return
                  theComp.
                     asGlobalComp ().
                        getGlobalCompCI ().
                           getSolverLogFileName ();
               }
            };
d185 3
a187 1
//------------------------------------------------------------------------------
d189 4
a192 1
   private static CustAttRep title ()
d194 7
a200 13
      return
         new CustAttRep (AttSpec.title (), GLOBAL_COMP)
            {
            void setString (Component theComp, String theValue)
               {
               theComp.asGlobalComp ().getGlobalCompCI ().setTitle (theValue);
               }

            String getString (Component theComp)
               {
               return theComp.asGlobalComp ().getGlobalCompCI ().getTitle ();
               }
            };
@


1.24
log
@"demandName" attribute.
@
text
@d82 1
d173 17
@


1.23
log
@"operationName" attribute.
@
text
@d79 1
d115 19
@


1.22
log
@Customized Attributes.
@
text
@d79 1
a79 1
      theCustAttReps.add (solverLogFileName ());
d82 1
d114 20
a133 1
   private static CustAttRep solverLogFileName ()
d136 1
a136 1
         new CustAttRep (AttSpec.solverLogFileName (), GLOBAL_COMP)
d140 1
a140 4
               theComp.
                  asGlobalComp ().
                     getGlobalCompCI ().
                        setSolverLogFileName (theValue);
d145 1
a145 5
               return
                  theComp.
                     asGlobalComp ().
                        getGlobalCompCI ().
                           getSolverLogFileName ();
d152 1
a152 1
   private static CustAttRep nPeriods ()
d155 1
a155 1
         new CustAttRep (AttSpec.nPeriods (), GLOBAL_COMP)
d157 1
a157 1
            void setInt (Component theComp, int theValue)
d159 1
a159 1
               theComp.asGlobalComp ().setNPeriods (theValue);
d162 1
a162 1
            int getInt (Component theComp)
d164 1
a164 1
               return theComp.asGlobalComp ().getNPeriods ();
d171 1
a171 1
   private static CustAttRep title ()
d174 1
a174 1
         new CustAttRep (AttSpec.title (), GLOBAL_COMP)
d178 4
a181 1
               theComp.asGlobalComp ().getGlobalCompCI ().setTitle (theValue);
d186 5
a190 1
               return theComp.asGlobalComp ().getGlobalCompCI ().getTitle ();
d197 1
a197 1
   private static CustAttRep partName ()
d200 1
a200 1
         new CustAttRep (AttSpec.partName (), PART)
d204 1
a204 1
               theComp.asPart ().setPartName (theValue);
d209 1
a209 1
               return theComp.asPart ().getPartName ();
@


1.21
log
@"partName" attribute.
@
text
@a10 1
import static com.ibm.witj.AttSpec    .*;
d79 4
a82 4
      theCustAttReps.add (solverLogFileNameAttRep ());
      theCustAttReps.add (         nPeriodsAttRep ());
      theCustAttReps.add (         partNameAttRep ());
      theCustAttReps.add (            titleAttRep ());
d113 1
a113 1
   private static CustAttRep solverLogFileNameAttRep ()
d116 1
a116 1
         new CustAttRep (solverLogFileName (), GLOBAL_COMP)
d139 1
a139 1
   private static CustAttRep nPeriodsAttRep ()
d142 1
a142 1
         new CustAttRep (nPeriods (), GLOBAL_COMP)
d158 1
a158 1
   private static CustAttRep titleAttRep ()
d161 1
a161 1
         new CustAttRep (title (), GLOBAL_COMP)
d177 1
a177 1
   private static CustAttRep partNameAttRep ()
d180 1
a180 1
         new CustAttRep (partName (), PART)
@


1.20
log
@"solverLogFileName" attribute.
@
text
@d82 1
d176 19
@


1.19
log
@Removed some debugging output.
@
text
@d80 3
a82 2
      theCustAttReps.add (makeNPeriodsAttRep ());
      theCustAttReps.add (makeTitleAttRep    ());
d107 1
a107 1
// makeNPeriodsAttRep ()
d109 2
a110 1
// Constructs and returns a new CustAttRep for the "nPeriods" attribute.
d113 27
a139 1
   private static CustAttRep makeNPeriodsAttRep ()
a156 4
// makeTitleAttRep ()
//
// Constructs and returns a new CustAttRep for the "title" attribute.
//------------------------------------------------------------------------------
d158 1
a158 1
   private static CustAttRep makeTitleAttRep ()
@


1.18
log
@Name change: Global --> GlobalComp.
@
text
@d118 1
a118 1
               ((GlobalComp) theComp).setNPeriods (theValue);
d123 1
a123 1
               return ((GlobalComp) theComp).getNPeriods ();
@


1.17
log
@"title" attribute.
@
text
@d114 1
a114 1
         new CustAttRep (nPeriods (), GLOBAL)
d118 1
a118 1
               ((Global) theComp).setNPeriods (theValue);
d123 1
a123 1
               return ((Global) theComp).getNPeriods ();
d137 1
a137 1
         new CustAttRep (title (), GLOBAL)
d141 1
a141 1
               theComp.asGlobal ().getGlobalCI ().setTitle (theValue);
d146 1
a146 1
               return theComp.asGlobal ().getGlobalCI ().getTitle ();
@


1.16
log
@Attributes.
@
text
@d146 1
a146 4
               abortWmsg (
                  "   \"get\" for attribute \"title\" is not yet implemented.");

               return null;
@


1.15
log
@Attributes.
@
text
@d141 1
a141 1
               theComp.asaGlobal ().getGlobalCI ().setTitle (theValue);
@


1.14
log
@"title" attribute.
@
text
@d141 1
a141 1
               ((GlobalCI) theComp.getCompCI ()).setTitle (theValue);
@


1.13
log
@Added "title" attribute (set only).
@
text
@d146 2
a147 1
               assert (false);
@


1.12
log
@Attributes.
@
text
@d81 1
d108 1
a108 1
// Constructs and returns a new CustAttRep for the nPeriods attribute.
d128 25
@


1.11
log
@Removed enum AttID.
@
text
@d47 10
a56 1
   AccessStyle getAccessStyle ()
d58 7
a64 1
      return myAccessStyle;
d96 2
a97 1
      myAccessStyle = findAccessStyle ();
a126 18
//------------------------------------------------------------------------------
// findAccessStyle ()
//
// Uses reflection to determine the AccessStyle of this CustAttRep and returns
// it.
//------------------------------------------------------------------------------

   private AccessStyle findAccessStyle ()
      {
      for (Method theMethod: getClass ().getDeclaredMethods ())
         {
         if (theMethod.getName ().substring (0, 3).equals ("set"))
            return INPUT;
         }

      return OUTPUT;
      }

a139 8
//------------------------------------------------------------------------------
// myAccessStyle
//
// The access style this CustAttRep.
//------------------------------------------------------------------------------

   private final AccessStyle myAccessStyle;

@


1.10
log
@Customized Attributes.
@
text
@d11 1
a11 1
import static com.ibm.witj.AttID      .*;
d75 1
a75 1
         AttID       theAttID,
d78 1
a78 1
      super (theAttID);
d97 1
a97 1
         new CustAttRep (nPeriods, GLOBAL)
@


1.9
log
@Customized Attributes.
@
text
@d16 1
d71 1
a71 1
// Private Constructors
d76 1
a76 2
         CompClassID theCompClassID,
         AccessStyle theAccessStyle)
d81 1
a81 1
      myAccessStyle = theAccessStyle;
d97 1
a97 1
         new CustAttRep (nPeriods, GLOBAL, INPUT)
d111 18
@


1.8
log
@Customized Attributes.
@
text
@d15 2
d52 1
a52 1
// newNPeriodsAttRep ()
d54 2
a55 1
// Constructs and returns a new CustAttRep for the nPeriods attribute.
d58 1
a58 1
   static CustAttRep newNPeriodsAttRep ()
d60 5
a64 7
      return
         new CustAttRep (nPeriods, GLOBAL, INPUT)
            {
            void setInt (Component theComp, int theValue)
               {
               ((Global) theComp).setNPeriods (theValue);
               }
d66 1
a66 5
            int getInt (Component theComp)
               {
               return ((Global) theComp).getNPeriods ();
               }
            };
d85 27
@


1.7
log
@Made class CustAttRep.NPeriods anonymous.
@
text
@d26 1
a26 1
//             [Anonymous inner classes of class AttRepMgr]
a31 15
// Package-Internal Constructors
//==============================================================================

   CustAttRep (
         AttID       theAttID,
         CompClassID theCompClassID,
         AccessStyle theAccessStyle)
      {
      super (theAttID);

      myCompClassID = theCompClassID;
      myAccessStyle = theAccessStyle;
      }

//==============================================================================
d49 38
@


1.6
log
@Customized Attributes.
@
text
@d26 1
d37 1
d42 1
d54 5
d69 1
a69 1
// myAccessStyle
d71 2
a72 1
// The access style this CustAttRep.
d75 1
a75 5
   private final AccessStyle myAccessStyle;

//==============================================================================
// Private Static Nested Classes
//==============================================================================
d78 3
a80 2
// Each of these nested classes extends class CustAttRep and corresponds to a
// specific AttID.
d83 1
a83 26
//------------------------------------------------------------------------------
// This class is to be made private later.
//------------------------------------------------------------------------------

   static final class NPeriods extends CustAttRep
   {
   NPeriods ()
      {
      super (nPeriods, INPUT);
      }

   boolean appliesTo (Component theComp)
      {
      return (theComp.getCompClassID () == GLOBAL);
      }

   void setInt (Component theComp, int theValue)
      {
      ((Global) theComp).setNPeriods (theValue);
      }

   int getInt (Component theComp)
      {
      return ((Global) theComp).getNPeriods ();
      }
   }
@


1.5
log
@Added enum AccessStyle.
@
text
@d10 4
a13 1
import static com.ibm.witj.Utility.*;
d34 3
a36 1
   CustAttRep (AttID theAttID)
d39 15
d57 12
d85 1
a85 1
      super (AttID.nPeriods);
d90 1
a90 6
      return (theComp.getCompClassID () == CompClassID.GLOBAL);
      }

   AccessStyle getAccessStyle ()
      {
      return AccessStyle.INPUT;
@


1.4
log
@Customized Attributes.
@
text
@d61 1
a61 1
   boolean isAnInputAtt ()
d63 1
a63 1
      return true;
@


1.3
log
@Customized Attributes.
@
text
@d37 41
@


1.2
log
@Revised the shut-down model.
@
text
@d31 1
a31 1
   CustAttRep (ProbCoord theProbCoord, AttID theAttID)
a33 36

      myProbCoord = theProbCoord;
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// Overrides from class AttRep.
//------------------------------------------------------------------------------

   void setBool    (Component theComp, boolean   theValue)
      {
      assert (false);
      }

//------------------------------------------------------------------------------

   void setInt     (Component theComp, int       theValue)
      {
      assert (false);
      }

//------------------------------------------------------------------------------

   void setDbl     (Component theComp, double    theValue)
      {
      assert (false);
      }

//------------------------------------------------------------------------------

   void setBoolVec (Component theComp, boolean[] theArray)
      {
      assert (false);
a35 74
//------------------------------------------------------------------------------

   void setIntVec  (Component theComp, int[]     theArray)
      {
      assert (false);
      }

//------------------------------------------------------------------------------

   void setDblVec  (Component theComp, double[]  theArray)
      {
      assert (false);
      }

//------------------------------------------------------------------------------

   boolean getBool (Component theComp)
      {
      assert (false);

      return false;
      }

//------------------------------------------------------------------------------

   int     getInt  (Component theComp)
      {
      assert (false);

      return 0;
      }

//------------------------------------------------------------------------------

   double  getDbl  (Component theComp)
      {
      assert (false);

      return 0.0;
      }

//------------------------------------------------------------------------------

   void getBoolVec (Component theComp, boolean[] theArray)
      {
      assert (false);
      }

//------------------------------------------------------------------------------

   void getIntVec  (Component theComp, int[]     theArray)
      {
      assert (false);
      }

//------------------------------------------------------------------------------

   void getDblVec  (Component theComp, double[]  theArray)
      {
      assert (false);
      }

//==============================================================================
// Private Fields
//==============================================================================
 
//------------------------------------------------------------------------------
// myProbCoord
//
// The ProbCoord for this CustAttRep.
//------------------------------------------------------------------------------

   private final ProbCoord myProbCoord;

@


1.1
log
@Added class CustAttRep.
@
text
@a133 13
//------------------------------------------------------------------------------
// shutDown ()
//
// Override from class InternalObject.
//------------------------------------------------------------------------------

   void shutDown ()
      {
      myProbCoord = null;

      super.shutDown ();
      }

d144 1
a144 1
   private ProbCoord myProbCoord;
@

