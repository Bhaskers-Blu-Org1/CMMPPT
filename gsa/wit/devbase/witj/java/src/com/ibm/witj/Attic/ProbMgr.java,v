head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2009.01.21.21.43.25;	author rjw;	state dead;
branches;
next	1.5;

1.5
date	2009.01.21.20.31.25;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.21.20.21.04;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.16.23.45.56;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.16.22.47.10;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.16.17.03.36;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@
//==============================================================================
// WIT-J Java Source File ProbMgr.java.
//
// Contains the declaration of class ProbMgr.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import       java.util.*;

//==============================================================================
// Class ProbMgr
//
// "Problem Manager"
// The central object responsible for internal housekeeping for a Problem.
//
// Class Hierarchy:
//
// RetainedObject
//    ProbMgr
//==============================================================================

final class ProbMgr extends RetainedObject
{
//==============================================================================
// Package-Internal Constructor
//==============================================================================

   ProbMgr (Problem theProblem)
      {
      myProblem    = theProblem;

      myProbMgrCOR = new ProbMgrCOR ();

      myAttRepMap  = new EnumMap <AttID, AttRep> (AttID.class);

      CustAttRep.buildInstances (this);
      StdAttRep .buildInstances (this);
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// store (theAttRep)
//
// Stores theAttRep in myAttRepMap.
//------------------------------------------------------------------------------

   void store (AttRep theAttRep)
      {
      AttID theAttID;

      theAttID = theAttRep.getAttribute ().getAttID ();

      myAttRepMap.put (theAttID, theAttRep);
      }

//------------------------------------------------------------------------------
// getAttRepFor (theAtt)
//
// Returns the AttRep that belongs to this ProbMgr corresponding to theAtt.
//------------------------------------------------------------------------------

   AttRep getAttRepFor (Attribute <?> theAtt)
      {
      return myAttRepMap.get (theAtt.getAttID ());
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   ProbMgrCOR getProbMgrCOR ()
      {
      return myProbMgrCOR;
      }

   Problem getProblem ()
      {
      return myProblem;
      }

//------------------------------------------------------------------------------
// shutDown ().
//
// Override from class RetainedObject.
//------------------------------------------------------------------------------

   void shutDown ()
      {
      for (Attribute <?> theAtt: Attribute.getAllAttributes ())
         {
         getAttRepFor (theAtt).shutDown ();
         }

      myProbMgrCOR.shutDown ();
      super       .shutDown ();
      }

//==============================================================================
// Private Fields
//==============================================================================
 
//------------------------------------------------------------------------------
// myProblem.
//
// The Problem that owns this ProbMgr.
//------------------------------------------------------------------------------

   private final Problem myProblem;

//------------------------------------------------------------------------------
// myProbMgrCOR.
//
// The ProbMgrCOR that belongs to this ProbMgr.
//------------------------------------------------------------------------------

   private final ProbMgrCOR myProbMgrCOR;

//------------------------------------------------------------------------------
// myAttRepMap
//
// myAttRepMap.get (theAttID) is the AttRep that belongs to this ProbMgr
// corresponding to theAttID.
//------------------------------------------------------------------------------

   private final Map <AttID, AttRep> myAttRepMap;

//------------------------------------------------------------------------------
}
@


1.5
log
@Continued implementation of Java class ProbMgr.
@
text
@@


1.4
log
@Continued implementation of java class ProbMgr.
@
text
@a33 2
      activeInstances.add (this);

a102 4

      assert (activeInstances.contains (this));

      activeInstances.remove (this);
a125 10
// activeInstances
//
// The set of all ProbMgrs in the program process whose Problems are currently
// active. Their presence in this Set prevents them from being garbage-collected
// until they are shut down.
//------------------------------------------------------------------------------

   private static final Set <ProbMgr> activeInstances;

//------------------------------------------------------------------------------
a133 9
//==============================================================================
// Static initialization block
//==============================================================================

   static
      {
      activeInstances = new HashSet <ProbMgr> (10);
      }

@


1.3
log
@Java ProbMgr
@
text
@a89 8
   static ProbMgr getStaticInstance ()
      {
      if (myStaticInstance == null)
         myStaticInstance = Problem.newInstance ().getProbMgr ();

      return myStaticInstance;
      }

a131 8
// myStaticInstance
//
// A ProbMgr to be used as needed by various static methods.
//------------------------------------------------------------------------------

   private static ProbMgr myStaticInstance = null;

//------------------------------------------------------------------------------
@


1.2
log
@ProbMgr classes.
@
text
@d39 5
d51 1
a51 1
// shutDown ().
d53 1
a53 1
// Override from class RetainedObject.
d56 1
a56 1
   void shutDown ()
d58 6
a63 2
      myProbMgrCOR.shutDown ();
      super       .shutDown ();
d65 5
a69 1
      assert (activeInstances.contains (this));
d71 3
a73 1
      activeInstances.remove (this);
d98 21
d157 9
@


1.1
log
@Change the mname of the ProbCtr classes to ProbMgr in both Java and C++.
@
text
@d12 2
d18 1
a18 1
// The internal manager of a Problem.
d32 1
a32 1
   ProbMgr ()
d34 4
d55 4
d70 13
d88 8
d104 27
@

