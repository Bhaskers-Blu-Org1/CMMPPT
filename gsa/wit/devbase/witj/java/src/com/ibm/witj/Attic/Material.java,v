head	1.14;
access;
symbols;
locks; strict;
comment	@# @;


1.14
date	2008.07.01.21.18.08;	author rjw;	state dead;
branches;
next	1.13;

1.13
date	2008.06.30.22.02.11;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.25.14.46.35;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.24.18.18.47;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.24.15.39.28;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.24.14.29.08;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.19.22.16.55;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.13.18.09.32;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.13.15.57.10;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.12.14.54.24;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.19.18.20.08;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.16.14.37.27;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.15.19.45.19;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.13.21.06.37;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Replaced classes Material and Capacity with an enum.
@
text
@
//==============================================================================
// WIT-J Java Source File Material.java.
//
// Contains the declaration of class Material.
//==============================================================================

package com.ibm.witj;

//==============================================================================
// Class Material
//
// Represents a material part in an implosion problem.
//
// Class Hierarchy:
//
//    PublicObject
//       Component
//          Part
//             Material
//==============================================================================

public final class Material extends Part
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// makeInstance (theProblem, thePartName)
//
// Factory method: Constructs and returns a new Material.
// Arguments:
//    theProblem:  The Problem that will own the Material
//    thePartName: The partName of the Material
//------------------------------------------------------------------------------

   public static Material makeInstance (
         Problem theProblem,
         String  thePartName)
      {
      mustBeNonNullActive (theProblem, "theProblem", "Material.makeInstance");

      return new Material (theProblem.getProbCoord (), thePartName);
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// toStringActive ().
//
// Override from class PublicObject.
//------------------------------------------------------------------------------

   String toStringActive ()
      {
      return "Material \"" + getPartName () + "\"";
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// Constructor.
//
// Arguments:
//    theProbCoord: The ProbCoord for the Material
//    thePartName:  The partName of the Material
//------------------------------------------------------------------------------

   private Material (ProbCoord theProbCoord, String thePartName)
      {
      super (theProbCoord, thePartName, true);
      }

//==============================================================================
}
@


1.13
log
@Made accessor names begin with "get".
@
text
@@


1.12
log
@Attributes
@
text
@d30 1
a30 1
// makeInstance (theProblem, partNameVal)
d35 1
a35 1
//    partNameVal: The partName of the Material
d40 1
a40 1
         String  partNameVal)
d44 1
a44 1
      return new Material (theProblem.myProbCoord (), partNameVal);
d59 1
a59 1
      return "Material \"" + partName () + "\"";
d71 1
a71 1
//    partName:     The partName of the Material
d74 1
a74 1
   private Material (ProbCoord theProbCoord, String partNameVal)
d76 1
a76 1
      super (theProbCoord, partNameVal, true);
@


1.11
log
@Removed enum AttID.
@
text
@a46 22
//------------------------------------------------------------------------------
// getStockVol ()
//
// Returns the current value of the stockVol attribute for this Material.
//------------------------------------------------------------------------------

   public double[] getStockVol ()
      {
      AttCI    theAttCI;
      double[] theDblArr;

      mustBeActive ("Material.getStockVol");

      theAttCI  = myProbCoord ().myAttMgr ().myAttCIFor ("stockVol");

      theDblArr = new double[nPeriods ()];

      theAttCI.getDblVec (myCompCI (), theDblArr);

      return theDblArr;
      }

@


1.10
log
@Removed AttAcc classes.
@
text
@d60 1
a60 1
      theAttCI  = myProbCoord ().myAttMgr ().myAttCIFor (AttID.stockVol);
@


1.9
log
@Attributes.
@
text
@d55 3
d60 7
a66 1
      return getDblVecOutAttAccFor (AttID.stockVol).getValue ();
@


1.8
log
@Implemented of class DblVecOutAttAcc.
@
text
@d48 1
a48 1
// stockVol ()
d50 1
a50 2
// Locates the DblVecOutAttAcc for this Material's Problem, associates it with
// the stockVol attribute of this Material and then returns it.
d53 1
a53 1
   public final DblVecOutAttAcc stockVol ()
d55 3
a57 3
      mustBeActive ("Material.stockVol");
      
      return getDblVecOutAttAccFor (AttID.stockVol);
@


1.7
log
@Removed class LTPubObject.
@
text
@d47 14
@


1.6
log
@Added Java class LTPubObject.
@
text
@d18 3
a20 4
//       LTPubObject
//          Component
//             Part
//                Material
@


1.5
log
@Comments, etc.
@
text
@d18 4
a21 3
//       Component
//          Part
//             Material
@


1.4
log
@*** empty log message ***
@
text
@d1 7
@


1.3
log
@*** empty log message ***
@
text
@d40 4
d45 1
a45 1
// toString ().
d47 1
a47 1
// Override from class Object.
d50 1
a50 1
   public String toString ()
@


1.2
log
@*** empty log message ***
@
text
@d10 1
a10 1
//    ExportedObject
@


1.1
log
@*** empty log message ***
@
text
@d37 1
a37 1
      return new Material (theProblem, partNameVal);
d59 2
a60 2
//    theProblem: The Problem that will own the Material
//    partName:   The partName of the Material
d63 1
a63 1
   private Material (Problem theProblem, String partNameVal)
d65 1
a65 1
      super (theProblem, partNameVal, true);
@

