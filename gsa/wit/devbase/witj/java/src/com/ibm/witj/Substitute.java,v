head	1.65;
access;
symbols;
locks; strict;
comment	@# @;


1.65
date	2011.05.02.18.32.32;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2011.03.30.16.20.54;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2009.09.30.18.44.12;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2009.09.29.20.43.57;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2009.05.12.19.29.52;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2009.05.12.15.57.58;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2009.05.05.20.17.07;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2009.04.17.15.38.25;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2009.04.10.16.16.20;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2009.03.20.16.08.10;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2009.03.19.20.45.27;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2009.03.16.20.26.57;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2009.03.13.19.32.23;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2009.03.12.19.02.43;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2009.03.09.21.09.22;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2009.03.06.23.56.42;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2009.03.06.23.23.05;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2009.03.06.17.17.07;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2009.03.06.15.43.25;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2009.03.05.22.31.32;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2009.03.05.21.31.44;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2009.03.05.17.21.27;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2009.01.22.23.12.42;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2008.12.16.23.43.04;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2008.12.16.16.13.31;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2008.12.15.15.35.35;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2008.12.11.15.37.41;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2008.12.10.20.54.10;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.12.03.18.55.08;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.10.14.16.29.41;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2008.10.09.21.20.23;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.10.07.18.50.28;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.10.06.22.14.07;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.10.03.21.47.51;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.09.30.15.17.42;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.09.29.22.43.48;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.09.26.22.21.27;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.09.18.21.12.29;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.09.18.18.10.19;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.09.12.16.09.37;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.09.11.19.10.26;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.09.08.19.45.37;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.09.05.22.06.52;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.09.03.20.18.07;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.09.03.18.03.09;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.08.19.22.14.33;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.08.18.22.16.59;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.07.08.19.31.02;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.06.30.22.02.12;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.06.26.20.19.53;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.06.26.19.18.08;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.25.21.43.51;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.24.18.18.47;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.24.15.39.28;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.24.14.29.08;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.19.22.16.56;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.19.18.36.41;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.16.20.41.02;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.13.22.42.17;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.13.18.09.32;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.13.15.57.10;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.12.14.54.24;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.23.15.14.09;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.22.22.00.13;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.22.21.02.59;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.65
log
@Reduced heading comments.
@
text
@
//==============================================================================
// WIT-J Java Source File Substitute.java.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

//==============================================================================
// Class Substitute
//
// Represents a substitute BOM entry in an implosion problem.
//
// Class Hierarchy:
//
// ThreadedObject
//    PreservedObject
//       Component
//          Substitute
//
// Part.Associate
//    Substitute
//==============================================================================

public final class Substitute extends Component implements Part.Associate
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// newInstance (theBomEnt, thePart)
//
// Factory method: Constructs and returns a new Substitute for the arguments.
//------------------------------------------------------------------------------

   public static Substitute newInstance (BomEntry theBomEnt, Part thePart)
      {
      try
         {
         notAllowedWhenTerminated ("Substitute.newInstance");

         reqMatchingProblems (
            theBomEnt,
           "theBomEnt",
            thePart,
           "thePart",
           "Substitute.newInstance");

         return new Substitute (theBomEnt, thePart);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   public BomEntry getBomEntry ()
      {
      try
         {
         mustBeActive ("Substitute.getBomEntry");

         return myBomEntry;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public Part getPart ()
      {
      try
         {
         mustBeActive ("Substitute.getPart");

         return myPart;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// toStringActive ().
//
// Override from class PreservedObject.
//------------------------------------------------------------------------------

   String toStringActive ()
      {
      return
           "Substitute #"
         + mySubstituteCOR.getSubIndex ()
         + " for BomEntry #"
         + myBomEntry.getBomEntryCOR ().getBomIndex ()
         + " for "
         + myBomEntry.getOperation ()
         + ", consuming "
         + myPart;
      }

//------------------------------------------------------------------------------
// deactivate ()
//
// Override from class PreservedObject.
//------------------------------------------------------------------------------

   void deactivate ()
      {
      mySubstituteCOR.deactivate ();
      super          .deactivate ();
      }

//------------------------------------------------------------------------------
// getCompClassID ()
//
// Override from class Component.
//------------------------------------------------------------------------------

   CompClassID getCompClassID ()
      {
      return CompClassID.SUBSTITUTE;
      }

//------------------------------------------------------------------------------
// getComponentCOR ()
//
// Override from class Component.
//------------------------------------------------------------------------------

   ComponentCOR getComponentCOR ()
      {
      return mySubstituteCOR;
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   SubstituteCOR getSubstituteCOR ()
      {
      return mySubstituteCOR;
      }

//==============================================================================
// Private Constructor
//==============================================================================

   private Substitute (BomEntry theBomEnt, Part thePart)
      {
      super (theBomEnt.getCoordinator ());

      int theSubIdx;

      myBomEntry      = theBomEnt;
      myPart          = thePart;

      theSubIdx       = theBomEnt.getSubstitutes ().size ();

      mySubstituteCOR =
         new SubstituteCOR (
            theBomEnt.getBomEntryCOR (),
            theSubIdx,
            thePart.getPartCOR ());

      getCoordinator ().recordConcComp   (this);
      myBomEntry       .recordSubstitute (this);
      myPart           .recordSubstitute (this);
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myBomEntry
//
// The BomEntry for which this Substitute represents alternative consumption.
//------------------------------------------------------------------------------

   private final BomEntry myBomEntry;

//------------------------------------------------------------------------------
// myPart.
//
// The Part whose consumption is represented by this Substitute.
//------------------------------------------------------------------------------

   private final Part myPart;

//------------------------------------------------------------------------------
// mySubstituteCOR.
//
// The SubstituteCOR that belongs to this Substitute.
//------------------------------------------------------------------------------

   private final SubstituteCOR mySubstituteCOR;

//==============================================================================
}
@


1.64
log
@Revised CppObjRep class ctors.
@
text
@a3 2
//
// Contains the declaration of class Substitute.
@


1.63
log
@Further implementation of class ThreadedObject.
@
text
@d179 5
a183 1
      mySubstituteCOR = new SubstituteCOR (this, theSubIdx);
@


1.62
log
@Initial implementation of class ThreadedObject.
@
text
@d46 6
a51 6
            reqMatchingProblems (
             theBomEnt,
            "theBomEnt",
             thePart,
            "thePart",
            "Substitute.newInstance");
@


1.61
log
@Replaced the throwExceptionFor method with getExeceptionToThrow.
@
text
@d19 4
a22 3
// PreservedObject
//    Component
//       Substitute
@


1.60
log
@Changed name of Java class WitjException to GeneralException.
@
text
@d55 1
a55 1
      catch (Throwable theThrowable)
d57 1
a57 3
         throwExceptionFor (theThrowable);

         return null;
d74 1
a74 1
      catch (Throwable theThrowable)
d76 1
a76 3
         throwExceptionFor (theThrowable);

         return null;
d91 1
a91 1
      catch (Throwable theThrowable)
d93 1
a93 3
         throwExceptionFor (theThrowable);

         return null;
@


1.59
log
@Changed name of Java class RetainedObject to PreservedObject.
@
text
@d57 3
a59 1
         throw getWitjExceptionFor (theThrowable);
d78 3
a80 1
         throw getWitjExceptionFor (theThrowable);
d97 3
a99 1
         throw getWitjExceptionFor (theThrowable);
@


1.58
log
@Argument checking.
@
text
@d19 1
a19 1
// RetainedObject
d104 1
a104 1
// Override from class RetainedObject.
d123 1
a123 1
// Override from class RetainedObject.
@


1.57
log
@Minor revisions.
@
text
@d45 1
a45 1
            argProblemsMustMatch (
@


1.56
log
@Added:
   theOpn     .getBomEntriesTo  (thePart)
   theOpn     .getBopEntriesTo  (thePart)
   theBomEntry.getSubstitutesTo (thePart)
@
text
@d180 3
a182 3
      getCoordinator ().record (this);
      myPart           .record (this);
      myBomEntry       .record (this);
@


1.55
log
@Implemented theProblem.getInstances (theCompClass).
@
text
@d22 3
d27 1
a27 1
public final class Substitute extends Component
@


1.54
log
@Removed:
   theOpn     .nBomEntries  ()
   theOpn     .nBopEntries  ()
   theBomEntry.nSubstitutes ()
@
text
@d177 3
a179 2
      myPart    .record (this);
      myBomEntry.record (this);
@


1.53
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d168 2
d173 3
a175 1
      mySubstituteCOR = new SubstituteCOR (this, theBomEnt.nSubstitutes ());
@


1.52
log
@Changed name of Problem method shutDown to deactivate.
@
text
@d20 1
a20 1
//    Element
d24 1
a24 1
public final class Substitute extends Element
d130 1
a130 1
// getElemClassID ()
d132 1
a132 1
// Override from class Element.
d135 1
a135 1
   ElemClassID getElemClassID ()
d137 1
a137 1
      return ElemClassID.SUBSTITUTE;
d141 1
a141 1
// getElementCOR ()
d143 1
a143 1
// Override from class Element.
d146 1
a146 1
   ElementCOR getElementCOR ()
@


1.51
log
@purgeData
@
text
@d118 1
a118 1
// shutDown ()
d123 1
a123 1
   void shutDown ()
d125 2
a126 2
      mySubstituteCOR.shutDown ();
      super          .shutDown ();
@


1.50
log
@purgeData
@
text
@d108 1
a108 1
         + mySubIndex
d110 1
a110 1
         + myBomEntry.getBomIndex ()
a129 11
// restoreAfterPurge ()
//
// Override from class Element.
//------------------------------------------------------------------------------

   void restoreAfterPurge ()
      {
      mySubIndex = mySubstituteCOR.getSubIndex ();
      }

//------------------------------------------------------------------------------
d155 1
a155 1
   int getSubIndex ()
d157 1
a157 1
      return mySubIndex;
a168 1
      mySubIndex      = theBomEnt.nSubstitutes ();
d171 1
a171 1
      mySubstituteCOR = new SubstituteCOR (this);
a189 8
// mySubIndex.
//
// The # of existing Substitutes for myBomEntry constructed before this one.
//------------------------------------------------------------------------------

   private int mySubIndex = -1;

//------------------------------------------------------------------------------
@


1.49
log
@purgeData
@
text
@d112 1
a112 1
         + myBomEntry.getOperationInt ()
@


1.48
log
@purgeData
@
text
@a58 29
// toString
//
// Override from class Object.
//------------------------------------------------------------------------------

   public String toString ()
      {
      try
         {
         notAllowedWhenTerminated ("Substitute.toString");

         return
              "Substitute #"
            + mySubIndex
            + " for BomEntry #"
            + myBomEntry.getBomIndex ()
            + " for "
            + myBomEntry.getOperationInt ()
            + ", consuming "
            + myPart;
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
d99 19
@


1.47
log
@purgeData
@
text
@d76 1
a76 1
            + myBomEntry.getOperation ()
@


1.46
log
@purgeData
@
text
@d140 1
a140 1
// setSubIndex (theValue)
d142 1
a142 1
// Setter.
d145 1
a145 1
   void setSubIndex (int theValue)
d147 1
a147 1
      mySubIndex = theValue;
@


1.45
log
@purgeData
@
text
@d140 1
a140 1
// restoreAfterPurge ()
d142 1
a142 1
// Override from class Element.
d145 1
a145 1
   void restoreAfterPurge ()
d147 1
@


1.44
log
@purgeData
@
text
@d140 1
a140 1
// reconcileForPurge ()
d145 1
a145 1
   void reconcileForPurge ()
a146 1
      assert (false);
@


1.43
log
@Removed java class ElementMgr, moving its responsibilities to class
Coordinator.
@
text
@d140 3
a142 1
// Accessors.
d145 1
a145 1
   int getSubIndex ()
d147 1
a147 1
      return mySubIndex;
d172 9
d217 1
a217 1
   private final int mySubIndex;
@


1.42
log
@Changed a Java class name: WitjAbortsException ==> TerminalException
@
text
@d176 1
a176 1
      super (theBomEnt.getElementMgr ());
@


1.41
log
@Changed class name: NonFunctionalException ==> WitjAbortsException
@
text
@d40 1
a40 1
         witjAbortedNotAllowed ("Substitute.newInstance");
d68 1
a68 1
         witjAbortedNotAllowed ("Substitute.toString");
@


1.40
log
@Minor revision.
@
text
@d40 1
a40 1
         witjMustBeFunctional ("Substitute.newInstance");
d68 1
a68 1
         witjMustBeFunctional ("Substitute.toString");
@


1.39
log
@Added the uniform try block whereever it was needed.
@
text
@d19 3
a21 3
//    RetainedObject
//       Element
//          Substitute
@


1.38
log
@Added a call to witjMustBeFunctional whereever it was needed.
@
text
@d38 18
a55 10
      witjMustBeFunctional ("Substitute.newInstance");

      argProblemsMustMatch (
          theBomEnt,
         "theBomEnt",
          thePart,
         "thePart",
         "Substitute.newInstance");

      return new Substitute (theBomEnt, thePart);
d66 19
a84 11
      witjMustBeFunctional ("Substitute.toString");

      return
           "Substitute #"
         + mySubIndex
         + " for BomEntry #"
         + myBomEntry.getBomIndex ()
         + " for "
         + myBomEntry.getOperation ()
         + ", consuming "
         + myPart;
d93 12
a104 1
      mustBeActive ("Substitute.getBomEntry");
d106 1
a106 2
      return myBomEntry;
      }
d110 11
a120 3
      mustBeActive ("Substitute.getPart");

      return myPart;
@


1.37
log
@Minor changes.
@
text
@d38 2
d58 2
@


1.36
log
@Made bomIndex, subIndex, and bopIndex into formal attributes.
@
text
@d49 1
a49 1
// toString ().
@


1.35
log
@Revised factory methods.
@
text
@a84 7
   public int getSubIndex ()
      {
      mustBeActive ("Substitute.getSubIndex");

      return mySubIndex;
      }

d102 9
@


1.34
log
@Name change.
@
text
@d31 18
a92 24
// Package-Internal Constructor
//
// Arguments:
//    theBomEnt:   The BomEntry for which this Substitute represents alternative
//                 consumption.
//    theSubIndex: The Substitute index for this Substitute.
//    thePart:     The consumed Part    for this Substitute.
//==============================================================================

   Substitute (BomEntry theBomEnt, int theSubIndex, Part thePart)
      {
      super (theBomEnt.getElementMgr ());

      myBomEntry      = theBomEnt;
      mySubIndex      = theSubIndex;
      myPart          = thePart;

      mySubstituteCOR = new SubstituteCOR (this);

      myPart    .record (this);
      myBomEntry.record (this);
      }

//==============================================================================
d131 18
@


1.33
log
@Changed name of Component to Entity.
@
text
@d20 1
a20 1
//       Entity
d24 1
a24 1
public final class Substitute extends Entity
d86 1
a86 1
      super (theBomEnt.getEntityMgr ());
d115 1
a115 1
// getEntityClassID ()
d117 1
a117 1
// Override from class Entity.
d120 1
a120 1
   EntityClassID getEntityClassID ()
d122 1
a122 1
      return EntityClassID.SUBSTITUTE;
d126 1
a126 1
// getEntityCOR ()
d128 1
a128 1
// Override from class Entity.
d131 1
a131 1
   EntityCOR getEntityCOR ()
@


1.32
log
@Implemented extraction of substitutes.
@
text
@d20 1
a20 1
//       Component
d24 1
a24 1
public final class Substitute extends Component
d86 1
a86 1
      super (theBomEnt.getCompMgr ());
d115 1
a115 1
// getCompClassID ()
d117 1
a117 1
// Override from class Component.
d120 1
a120 1
   CompClassID getCompClassID ()
d122 1
a122 1
      return CompClassID.SUBSTITUTE;
d126 1
a126 1
// getCompCOR ()
d128 1
a128 1
// Override from class Component.
d131 1
a131 1
   ComponentCOR getCompCOR ()
@


1.31
log
@Call-back infrastructure.
@
text
@d78 4
a81 3
//    theBomEnt: The BomEntry for which this Substitute represents alternative
//               consumption.
//    thePart:   The consumed Part for this Substitute.
d84 1
a84 1
   Substitute (BomEntry theBomEnt, Part thePart)
d89 1
a90 1
      mySubIndex      = myBomEntry.getNSubstitutes ();
d149 1
a149 1
// myPart.
d151 1
a151 1
// The Part whose consumption is represented by this Substitute.
d154 1
a154 1
   private final Part myPart;
d157 1
a157 1
// mySubIndex.
d159 1
a159 1
// The # of existing Substitutes for myBomEntry constructed before this one.
d162 1
a162 1
   private final int mySubIndex;
@


1.30
log
@Call-back infrastructure.
@
text
@a80 2
//
// To be called from theBomEnt.newSubstitute (thePart) only.
@


1.29
log
@Numerous class name changes.
@
text
@a88 3
      BomEntryCOR theBomEntCOR;
      PartCOR     thePartCOR;

a91 2
      theBomEntCOR    = myBomEntry.getBomEntryCOR  ();
      thePartCOR      = myPart    .getPartCOR      ();
d93 1
a93 1
      mySubstituteCOR = new SubstituteCOR (theBomEntCOR, thePartCOR);
@


1.28
log
@Implemented theBomEnt.getSubstitutes ().
@
text
@d89 2
a90 2
      BomEntryCI theBomEntCI;
      PartCI     thePartCI;
d92 5
a96 5
      myBomEntry     = theBomEnt;
      myPart         = thePart;
      mySubIndex     = myBomEntry.getNSubstitutes ();
      theBomEntCI    = myBomEntry.getBomEntryCI   ();
      thePartCI      = myPart    .getPartCI       ();
d98 1
a98 1
      mySubstituteCI = new SubstituteCI (theBomEntCI, thePartCI);
d116 2
a117 2
      mySubstituteCI.shutDown ();
      super         .shutDown ();
d132 1
a132 1
// getCompCI ()
d137 1
a137 1
   ComponentCI getCompCI ()
d139 1
a139 1
      return mySubstituteCI;
d171 1
a171 1
// mySubstituteCI.
d173 1
a173 1
// The SubstituteCI that belongs to this Substitute.
d176 1
a176 1
   private final SubstituteCI mySubstituteCI;
@


1.27
log
@Implemented thePart.getSubstitutes ().
@
text
@d100 2
a101 3
      myBomEntry.recNewSub ();

      myPart.record (this);
d109 1
a109 1
// shutDown ().
d132 1
a132 1
// getCompCI ().
@


1.26
log
@Active state / shutDown method.
@
text
@d101 2
@


1.25
log
@Revised the factory methods.
@
text
@d55 1
a55 1
      mustBeUnreleased ("Substitute.getBomEntry");
d62 1
a62 1
      mustBeUnreleased ("Substitute.getPart");
d69 1
a69 1
      mustBeUnreleased ("Substitute.getSubIndex");
d108 1
a108 1
// release ().
d113 1
a113 1
   void release ()
d115 2
a116 2
      mySubstituteCI.release ();
      super         .release ();
@


1.24
log
@Initial implementation of the Session classes.
@
text
@a30 21
// makeInstance (theBomEnt, thePart)
//
// Factory method: Constructs and returns a new Substitute.
//
// Arguments:
//    theBomEnt: The BomEntry for which this Substitute represents alternative
//               consumption.
//    thePart:   The consumed Part for this Substitute.
//------------------------------------------------------------------------------

   public static Substitute makeInstance (
         BomEntry theBomEnt,
         Part     thePart)
      {
      argMustBeUnreleased (theBomEnt, "theBomEnt", "Substitute.makeInstance");
      argMustBeUnreleased (thePart,   "thePart",   "Substitute.makeInstance");

      return new Substitute (theBomEnt, thePart);
      }

//------------------------------------------------------------------------------
d75 29
a141 29
// Private Constructor
//
// Arguments:
//    theBomEnt: The BomEntry for which this Substitute represents alternative
//               consumption.
//    thePart:   The consumed Part for this Substitute.
//==============================================================================

   private Substitute (
         BomEntry theBomEnt,
         Part     thePart)
      {
      super (theBomEnt.getCompMgr ());

      BomEntryCI theBomEntCI;
      PartCI     thePartCI;

      myBomEntry     = theBomEnt;
      myPart         = thePart;
      mySubIndex     = myBomEntry.getNSubstitutes ();
      theBomEntCI    = myBomEntry.getBomEntryCI   ();
      thePartCI      = myPart    .getPartCI       ();

      mySubstituteCI = new SubstituteCI (theBomEntCI, thePartCI);

      myBomEntry.recNewSub ();
      }

//==============================================================================
@


1.23
log
@Terminology change.
@
text
@d134 1
a134 5
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// Constructor.
d140 1
a140 1
//------------------------------------------------------------------------------
@


1.22
log
@Replaced class PublicObject with class VitalObject.
@
text
@d19 1
a19 1
//    VitalObject
d45 2
a46 2
      mustBeNonNullActive (theBomEnt, "theBomEnt", "Substitute.makeInstance");
      mustBeNonNullActive (thePart,   "thePart",   "Substitute.makeInstance");
d76 1
a76 1
      mustBeActive ("Substitute.getBomEntry");
d83 1
a83 1
      mustBeActive ("Substitute.getPart");
d90 1
a90 1
      mustBeActive ("Substitute.getSubIndex");
d100 1
a100 1
// shutDown ().
d102 1
a102 1
// Override from class VitalObject.
d105 1
a105 1
   void shutDown ()
d107 2
a108 2
      mySubstituteCI.shutDown ();
      super         .shutDown ();
@


1.21
log
@Replaced toStringActive () with toString ().
@
text
@d19 1
a19 1
//    PublicObject
d102 1
a102 1
// Override from class PublicObject.
@


1.20
log
@Revised the shut-down model.
@
text
@d52 19
a111 19
// toStringActive ().
//
// Override from class PublicObject.
//------------------------------------------------------------------------------

   String toStringActive ()
      {
      return
           "Substitute #"
         + mySubIndex
         + " for BomEntry #"
         + myBomEntry.getBomIndex ()
         + " for "
         + myBomEntry.getOperation ()
         + ", consuming "
         + myPart;
      }

//------------------------------------------------------------------------------
@


1.19
log
@Implemented Utility class.
@
text
@a88 6

      myBomEntry     = null;
      myPart         = null;
      mySubIndex     = -1;
      mySubstituteCI = null;

d176 1
a176 1
   private BomEntry myBomEntry;
d184 1
a184 1
   private Part myPart;
d192 1
a192 1
   private int mySubIndex;
d200 1
a200 1
   private SubstituteCI mySubstituteCI;
@


1.18
log
@Changed name of class AttID to Attribute.
@
text
@d8 3
a10 1
package com.ibm.witj;
@


1.17
log
@Made accessor names begin with "get".
@
text
@a9 2
import  static com.ibm.witj.AttID.*;

@


1.16
log
@Attributes.
@
text
@d55 1
a55 1
   public BomEntry myBomEntry ()
d57 1
a57 1
      mustBeActive ("Substitute.myBomEntry");
d62 1
a62 1
   public Part myPart ()
d64 1
a64 1
      mustBeActive ("Substitute.myPart");
d69 1
a69 1
   public int subIndex ()
d71 1
a71 1
      mustBeActive ("Substitute.subIndex");
d73 1
a73 1
      return subIndex;
d92 1
a92 1
      subIndex       = -1;
d108 1
a108 1
         + subIndex
d110 1
a110 1
         + myBomEntry.bomIndex ()
d112 1
a112 1
         + myBomEntry.myOperation ()
d118 1
a118 1
// myCompClassID ()
d123 1
a123 1
   CompClassID myCompClassID ()
d129 1
a129 1
// myCompCI ().
d134 1
a134 1
   ComponentCI myCompCI ()
d156 1
a156 1
      super (theBomEnt.myCompMgr ());
d163 3
a165 3
      subIndex       = myBomEntry.nSubstitutes ();
      theBomEntCI    = myBomEntry.myBomEntryCI ();
      thePartCI      = myPart    .myPartCI     ();
d193 1
a193 1
// SubIndex.
d198 1
a198 1
   private int subIndex;
@


1.15
log
@Attributes.
@
text
@a51 35
// setMrpNetAllowed (theBoolean)
//
// Sets the value of the mrpNetAllowed attribute for this Substitute to
// theBoolean.
//------------------------------------------------------------------------------

   public void setMrpNetAllowed (boolean theBoolean)
      {
      AttCI theAttCI;

      mustBeActive ("Substitute.setMrpNetAllowed");

      theAttCI = myProbCoord ().myAttMgr ().myAttCIFor (MRP_NET_ALLOWED);

      theAttCI.setBool (myCompCI (), theBoolean);
      }

//------------------------------------------------------------------------------
// getMrpNetAllowed ()
//
// Returns the current value of the mrpNetAllowed attribute for this Substitute.
//------------------------------------------------------------------------------

   public boolean getMrpNetAllowed ()
      {
      AttCI theAttCI;

      mustBeActive ("Substitute.getMrpNetAllowed");

      theAttCI = myProbCoord ().myAttMgr ().myAttCIFor (MRP_NET_ALLOWED);

      return theAttCI.getBool (myCompCI ());
      }

//------------------------------------------------------------------------------
@


1.14
log
@Attributes.
@
text
@d153 11
@


1.13
log
@Removed enum AttID.
@
text
@d10 2
d64 1
a64 1
      theAttCI = myProbCoord ().myAttMgr ().myAttCIFor ("mrpNetAllowed");
d81 1
a81 1
      theAttCI = myProbCoord ().myAttMgr ().myAttCIFor ("mrpNetAllowed");
@


1.12
log
@Removed AttAcc classes.
@
text
@d62 1
a62 1
      theAttCI = myProbCoord ().myAttMgr ().myAttCIFor (AttID.mrpNetAllowed);
d79 1
a79 1
      theAttCI = myProbCoord ().myAttMgr ().myAttCIFor (AttID.mrpNetAllowed);
@


1.11
log
@Attributes.
@
text
@d58 2
d62 3
a64 1
      getBoolInAttAccFor (AttID.mrpNetAllowed).setValue (theBoolean);
d75 2
d79 3
a81 1
      return getBoolInAttAccFor (AttID.mrpNetAllowed).getValue ();
@


1.10
log
@Implemented of class DblVecOutAttAcc.
@
text
@d50 1
a50 1
// mrpNetAllowed ()
d52 2
a53 2
// Locates the BoolInAttAcc for this Sub's Problem, associates it with the
// mrpNetAllowed attribute of this Sub and then returns it.
d56 1
a56 1
   public final BoolInAttAcc mrpNetAllowed ()
d58 16
a73 3
      mustBeActive ("Substitute.mrpNetAllowed");
      
      return getBoolInAttAccFor (AttID.mrpNetAllowed);
@


1.9
log
@Attributes.
@
text
@d52 1
a52 1
// Retrieves the BoolInAttAcc for this Sub's Problem, associates it with the
@


1.8
log
@Created Java class CompMgr.
@
text
@d50 1
a50 1
// myBomEntry ().
d52 13
a64 1
// Accessor.
a73 6
//------------------------------------------------------------------------------
// myPart ().
//
// Accessor.
//------------------------------------------------------------------------------

a80 6
//------------------------------------------------------------------------------
// subIndex ().
//
// Accessor.
//------------------------------------------------------------------------------

@


1.7
log
@Attributes.
@
text
@d157 1
a157 1
      super (theBomEnt.myProbCoord ());
@


1.6
log
@Removed class LTPubObject.
@
text
@d129 11
d204 1
a204 1
// The C++ Substitute interface that belongs to this Substitute.
@


1.5
log
@Added Java class LTPubObject.
@
text
@d18 2
a19 3
//       LTPubObject
//          Component
//             Substitute
@


1.4
log
@Comments, etc.
@
text
@d18 3
a20 2
//       Component
//          Substitute
@


1.3
log
@*** empty log message ***
@
text
@d1 7
@


1.2
log
@*** empty log message ***
@
text
@d42 39
@


1.1
log
@*** empty log message ***
@
text
@d76 1
a76 1
         + myBomEntry.bomEntryIndex ()
d78 1
a78 1
         + myBomEntry.consumingOperation ()
@

