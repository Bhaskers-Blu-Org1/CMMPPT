head	1.45;
access;
symbols;
locks; strict;
comment	@# @;


1.45
date	2009.03.30.21.07.31;	author rjw;	state dead;
branches;
next	1.44;

1.44
date	2009.03.23.21.51.40;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2009.03.13.19.32.20;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2009.03.06.23.23.04;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2008.12.15.15.35.32;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2008.12.05.00.04.32;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2008.12.03.18.28.49;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2008.11.21.19.15.36;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.11.21.17.20.32;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.11.21.16.56.11;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2008.11.12.20.40.32;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.11.05.23.14.56;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.10.29.20.27.19;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.10.22.13.43.29;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.10.07.18.50.25;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.10.06.22.14.04;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.09.08.19.45.35;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.09.05.22.06.50;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.09.04.20.56.15;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.09.04.20.36.22;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.09.03.20.33.10;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.09.02.14.37.23;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.08.26.21.40.30;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.08.26.18.19.48;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.08.22.17.53.45;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.08.20.20.57.48;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.08.20.20.45.46;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.08.20.19.47.50;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.08.20.15.08.39;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.08.19.22.14.29;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.08.19.20.34.43;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.08.18.22.16.56;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.08.08.23.56.55;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.08.08.23.02.10;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.08.08.21.27.26;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.08.08.21.26.15;	author rjw;	state dead;
branches;
next	1.9;

1.9
date	2008.08.07.21.36.44;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.08.07.19.58.30;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.08.07.18.21.04;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.08.07.17.39.36;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.18.14.06.23;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2008.06.17.22.04.51;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.17.18.19.49;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.17.15.34.21;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.17.13.38.07;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.45
log
@Changed names of AttRep classes to AttImp.
@
text
@
//==============================================================================
// WIT-J Java Source File AttRep.java.
//
// Contains the declaration of class AttRep.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

//==============================================================================
// Class AttRep
//
// "Attribute Representative"
// Represents the set of all WIT attributes that have a given name.
// Each AttRep corresponds to one Problem and one Attribute.
//
// Class Hierarchy:
//
// RetainedObject
//    AttRep
//       StdAttRep
//       CustAttRep
//          {Anonymous Inner Classes}
//==============================================================================

abstract class AttRep extends RetainedObject
{
//==============================================================================
// Package-Internal Constructor
//==============================================================================

   AttRep (Attribute <?> theAtt)
      {
      myAttribute = theAtt;
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// appliesTo (theCompClassID)
//
// Returns true, iff this AttRep applies to the Component class identified by
// theCompClassID.
//------------------------------------------------------------------------------

   abstract boolean appliesTo (CompClassID theCompClassID);

//------------------------------------------------------------------------------
// isModifiable ()
//
// Returns true, iff the corresponding setValue method(s) of class Component can
// validly be invoked for myAttribute.
//------------------------------------------------------------------------------

   abstract boolean isModifiable ();

//------------------------------------------------------------------------------
// set... (theComp, theValue) methods
//
// Each of these methods sets the represented attribute's value associated with 
// theComp to theValue.
//
// Issues an internal error if any of the following conditions occur:
//
//    The represented attribute is not an input attribute.
//    The type of the represented attribute does not match the scalar type
//       indicated by the method name.
//    The Component class of the represented attribute does not match that of
//       theComp.
//    The concrete AttRep class does not provide an overriding implementation
//       for the method.
//------------------------------------------------------------------------------

   void setBool     (Component    theComp, boolean   theValue)
      {
      notOverridden ("setBool",   theComp);
      }

   void setInt      (Component    theComp, int       theValue)
      {
      notOverridden ("setInt",    theComp);
      }

   void setDbl      (Component    theComp, double    theValue)
      {
      notOverridden ("setDbl",    theComp);
      }

   void setString   (Component    theComp, String    theValue)
      {
      notOverridden ("setString", theComp);
      }

//------------------------------------------------------------------------------
// set...Vec (theComp, theArray) methods
//
// Each of these methods sets the represented attribute's value associated with 
// theComp to theArray.
//
// Issues an internal error if any of the following conditions occur:
//
//    The represented attribute is not an input attribute.
//    The type of the represented attribute does not match the vector type
//       indicated by the method name.
//    The Component class of the represented attribute does not match that of
//       theComp.
//    The length of theArray != nPeriods.
//    The concrete AttRep class does not provide an overriding implementation
//       for the method.
//------------------------------------------------------------------------------

   void setBoolVec (Component theComp, boolean[] theArray)
      {
      notOverridden ("setBoolVec", theComp);
      }

   void setIntVec  (Component theComp, int[]     theArray)
      {
      notOverridden ("setIntVec", theComp);
      }

   void setDblVec  (Component theComp, double[]  theArray)
      {
      notOverridden ("setDblVec", theComp);
      }

   void setBoundSet (
         Component  theComp,
         double[] hardLBArr,
         double[] softLBArr,
         double[] hardUBArr)
      {
      notOverridden ("setBoundSet", theComp);
      }

//------------------------------------------------------------------------------
// set...VecToScalar (theComp, theValue) methods
//
// Each of these methods sets each element of the represented vector attribute's
// value associated with theComp to theValue.
//
// Issues an internal error if any of the following conditions occur:
//
//    The represented attribute is not an input attribute.
//    The type of the represented attribute does not match the vector type
//       indicated by the method name.
//    The Component class of the represented attribute does not match that of
//       theComp.
//    The concrete AttRep class does not provide an overriding implementation
//       for the method.
//------------------------------------------------------------------------------

   void setBoolVecToScalar (Component theComp, boolean theValue)
      {
      notOverridden ("setBoolVecToScalar", theComp);
      }

   void setIntVecToScalar (Component theComp, int theValue)
      {
      notOverridden ("setIntVecToScalar", theComp);
      }

   void setDblVecToScalar (Component theComp, double theValue)
      {
      notOverridden ("setDblVecToScalar", theComp);
      }

//------------------------------------------------------------------------------
// get... (theComp) methods
//
// Each of these methods returns the represented attribute's value associated
// with theComp.
//
// Issues an internal error if either of the following conditions occur:
//
//    The type of the represented attribute does not match the scalar type
//       indicated by the method name.
//    The Component class of the represented attribute does not match that of
//       theComp.
//    The concrete AttRep class does not provide an overriding implementation
//       for the method.
//------------------------------------------------------------------------------

   boolean            getBool    (Component theComp)
      {
      notOverridden ("getBool",             theComp);

      return false;
      }

   int                getInt     (Component theComp)
      {
      notOverridden ("getInt",              theComp);

      return 0;
      }

   double             getDbl     (Component theComp)
      {
      notOverridden ("getDbl",              theComp);

      return 0.0;
      }

   String             getString  (Component theComp)
      {
      notOverridden ("getString",           theComp);

      return null;
      }

//------------------------------------------------------------------------------
// get...Vec (theComp, theArray) methods
//
// Each of these methods sets theArray to the represented attribute's value
// associated with theComp.
//
// Issues an internal error if any of the following conditions occur:
//
//    The type of the represented attribute does not match the vector type
//       indicated by the method name.
//    The Component class of the represented attribute does not match that of
//       theComp.
//    The length of theArray != nPeriods.
//    The concrete AttRep class does not provide an overriding implementation
//       for the method.
//------------------------------------------------------------------------------

   void getBoolVec (Component theComp, boolean[] theArray)
      {
      notOverridden ("getBoolVec", theComp);
      }

   void getIntVec  (Component theComp, int[]     theArray)
      {
      notOverridden ("getIntVec", theComp);
      }

   void getDblVec  (Component theComp, double[]  theArray)
      {
      notOverridden ("getDblVec", theComp);
      }

   void getBoundSet (
         Component theComp,
         double[]  hardLBArr,
         double[]  softLBArr,
         double[]  hardUBArr)
      {
      notOverridden ("getBoundSet", theComp);
      }

//------------------------------------------------------------------------------
// toStringActive ().
//
// Override from class RetainedObject.
//------------------------------------------------------------------------------

   String toStringActive ()
      {
      return "AttRep";
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   final Attribute <?> getAttribute ()
      {
      return myAttribute;
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// notOverridden (methodName, theComp)
//------------------------------------------------------------------------------

   private final void notOverridden (String methodName, Component theComp)
      {
      internalError (
           "   The \"" + methodName + "\" method "
         +    "was invoked on an AttRep whose concrete\n"
         + "   class does not provide an overriding implementation.\n"
         + "\n"
         + "      Attribute: " + myAttribute + "\n"
         + "      Component: " + theComp);
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myAttribute
//
// The Attribute for this AttRep.
//------------------------------------------------------------------------------
 
   private final Attribute <?> myAttribute;

//==============================================================================
}
@


1.44
log
@Added theComp.setValueToScalar (...) methods.
@
text
@@


1.43
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d141 32
@


1.42
log
@purgeData
@
text
@d44 1
a44 1
// appliesTo (theElemClassID)
d46 2
a47 2
// Returns true, iff this AttRep applies to the Element class identified by
// theElemClassID.
d50 1
a50 1
   abstract boolean appliesTo (ElemClassID theElemClassID);
d55 1
a55 1
// Returns true, iff the corresponding setValue method(s) of class Element can
d62 1
a62 1
// set... (theElement, theValue) methods
d65 1
a65 1
// theElement to theValue.
d72 2
a73 2
//    The Element class of the represented attribute does not match that of
//       theElement.
d78 1
a78 1
   void setBool     (Element      theElement, boolean   theValue)
d80 1
a80 1
      notOverridden ("setBool",   theElement);
d83 1
a83 1
   void setInt      (Element      theElement, int       theValue)
d85 1
a85 1
      notOverridden ("setInt",    theElement);
d88 1
a88 1
   void setDbl      (Element      theElement, double    theValue)
d90 1
a90 1
      notOverridden ("setDbl",    theElement);
d93 1
a93 1
   void setString   (Element      theElement, String    theValue)
d95 1
a95 1
      notOverridden ("setString", theElement);
d99 1
a99 1
// set...Vec (theElement, theArray) methods
d102 1
a102 1
// theElement to theArray.
d109 2
a110 2
//    The Element class of the represented attribute does not match that of
//       theElement.
d116 1
a116 1
   void setBoolVec (Element theElement, boolean[] theArray)
d118 1
a118 1
      notOverridden ("setBoolVec", theElement);
d121 1
a121 1
   void setIntVec  (Element theElement, int[]     theArray)
d123 1
a123 1
      notOverridden ("setIntVec", theElement);
d126 1
a126 1
   void setDblVec  (Element theElement, double[]  theArray)
d128 1
a128 1
      notOverridden ("setDblVec", theElement);
d132 1
a132 1
         Element  theElement,
d137 1
a137 1
      notOverridden ("setBoundSet", theElement);
d141 1
a141 1
// get... (theElement) methods
d144 1
a144 1
// with theElement.
d150 2
a151 2
//    The Element class of the represented attribute does not match that of
//       theElement.
d156 1
a156 1
   boolean            getBool    (Element theElement)
d158 1
a158 1
      notOverridden ("getBool",           theElement);
d163 1
a163 1
   int                getInt     (Element theElement)
d165 1
a165 1
      notOverridden ("getInt",            theElement);
d170 1
a170 1
   double             getDbl     (Element theElement)
d172 1
a172 1
      notOverridden ("getDbl",            theElement);
d177 1
a177 1
   String             getString  (Element theElement)
d179 1
a179 1
      notOverridden ("getString",         theElement);
d185 1
a185 1
// get...Vec (theElement, theArray) methods
d188 1
a188 1
// associated with theElement.
d194 2
a195 2
//    The Element class of the represented attribute does not match that of
//       theElement.
d201 1
a201 1
   void getBoolVec (Element theElement, boolean[] theArray)
d203 1
a203 1
      notOverridden ("getBoolVec", theElement);
d206 1
a206 1
   void getIntVec  (Element theElement, int[]     theArray)
d208 1
a208 1
      notOverridden ("getIntVec", theElement);
d211 1
a211 1
   void getDblVec  (Element theElement, double[]  theArray)
d213 1
a213 1
      notOverridden ("getDblVec", theElement);
d217 1
a217 1
         Element theElement,
d222 1
a222 1
      notOverridden ("getBoundSet", theElement);
d250 1
a250 1
// notOverridden (methodName, theElement)
d253 1
a253 1
   private final void notOverridden (String methodName, Element theElement)
d261 1
a261 1
         + "      Element:   " + theElement);
@


1.41
log
@Minor revision.
@
text
@d226 11
@


1.40
log
@Replaced Utility.intAbortWmsg with Utility.internalError.
@
text
@d21 5
a25 5
//    RetainedObject
//       AttRep
//          StdAttRep
//          CustAttRep
//             {Anonymous Inner Classes}
@


1.39
log
@Changed name of method Attribute.allowsSetValue to isModifiable.
@
text
@d244 7
a250 8
      intAbortWmsg (
         "   The \"" + methodName + "\" method "
       +    "was invoked on an AttRep whose concrete\n"
       + "   class does not provide an overriding implementation.\n"
       + "\n"
       + "      Attribute:    " + myAttribute                  + "\n"
       + "      AttRep Class: " + getClass ().getSimpleName () + "\n"
       + "      Element:      " + theElement);
@


1.38
log
@Removed all remaining reflection code.
@
text
@d53 1
a53 1
// allowsSetValue ()
d59 1
a59 1
   abstract boolean allowsSetValue ();
@


1.37
log
@Attributes.
@
text
@d53 9
a225 19
// detIAllowSetValue ()
//
// Determines the value of the iAllowSetValue field for this AttRep.
//------------------------------------------------------------------------------

   final void detIAllowSetValue ()
      {
      iAllowSetValue = compIAllowSetValue ();
      }

//------------------------------------------------------------------------------
// compIAllowSetValue ()
//
// Computes and returns the value of the iAllowSetValue field for this AttRep.
//------------------------------------------------------------------------------

   abstract boolean compIAllowSetValue ();

//------------------------------------------------------------------------------
a233 12
//------------------------------------------------------------------------------
// allowsSetValue ()
//
// Returns true, iff the corresponding setValue method(s) of class Element can
// validly be invoked for myAttribute.
//------------------------------------------------------------------------------

   public final boolean allowsSetValue ()
      {
      return iAllowSetValue;
      }

a265 7
//------------------------------------------------------------------------------
// True, iff the corresponding setValue method(s) of class Element can validly
// be invoked for myAttribute.
//------------------------------------------------------------------------------

   private boolean iAllowSetValue = false;

@


1.36
log
@Removed Enum AccessStyle.
@
text
@a43 9
// appliesTo (theElement)
//
// Returns true, iff this AttRep applies to the Element class of which
// theElement is an instance.
//------------------------------------------------------------------------------

   abstract boolean appliesTo (Element theElement);

//------------------------------------------------------------------------------
d217 1
a217 1
// detAllowSetValue ()
d222 1
a222 1
   final void detAllowSetValue ()
d224 1
a224 1
      iAllowSetValue = compAllowSetValue ();
d228 1
a228 1
// compAllowSetValue ()
d233 1
a233 1
   abstract boolean compAllowSetValue ();
@


1.35
log
@Replaced Attribute partCategory with thePart.getCategory ().
@
text
@d226 1
a226 1
// detAccessStyle ()
d228 1
a228 1
// Determines the AccessStyle for this AttRep.
d231 1
a231 1
   final void detAccessStyle ()
d233 1
a233 1
      myAccessStyle = compAccessStyle ();
d237 1
a237 1
// compAccessStyle ()
d239 1
a239 1
// Computes and returns the AccessStyle for this AttRep.
d242 1
a242 1
   abstract AccessStyle compAccessStyle ();
d253 8
a260 1
   final AccessStyle getAccessStyle ()
d262 1
a262 1
      return myAccessStyle;
d298 2
a299 3
// myAccessStyle
//
// The access style this AttRep.
d302 1
a302 1
   private AccessStyle myAccessStyle = null;
@


1.34
log
@Minor revision.
@
text
@a183 7
   Part.Category      getPartCat (Element theElement)
      {
      notOverridden ("getPartCat",        theElement);

      return null;
      }

@


1.33
log
@Implemented theAttribute.appliesTo (theClass).
@
text
@d34 1
a34 1
   AttRep (Attribute <?> theAttribute)
d36 1
a36 1
      myAttribute = theAttribute;
@


1.32
log
@Changed name of generic class AttSpec <V> to Attribute <V>.
@
text
@d53 9
@


1.31
log
@Name change.
@
text
@d17 1
a17 1
// Each AttRep corresponds to one Problem and one AttSpec.
d34 1
a34 1
   AttRep (AttSpec <?> theAttSpec)
d36 1
a36 1
      myAttSpec = theAttSpec;
d246 1
a246 1
   final AttSpec <?> getAttSpec ()
d248 1
a248 1
      return myAttSpec;
d271 1
a271 1
       + "      AttSpec:      " + myAttSpec                    + "\n"
d281 1
a281 1
// myAttSpec
d283 1
a283 1
// The AttSpec for this AttRep.
d286 1
a286 1
   private final AttSpec <?> myAttSpec;
@


1.30
log
@Changed name of Component to Entity.
@
text
@d44 1
a44 1
// appliesTo (theEntity)
d46 2
a47 2
// Returns true, iff this AttRep applies to the Entity class of which
// theEntity is an instance.
d50 1
a50 1
   abstract boolean appliesTo (Entity theEntity);
d53 1
a53 1
// set... (theEntity, theValue) methods
d56 1
a56 1
// theEntity to theValue.
d63 2
a64 2
//    The Entity class of the represented attribute does not match that of
//       theEntity.
d69 1
a69 1
   void setBool     (Entity       theEntity, boolean   theValue)
d71 1
a71 1
      notOverridden ("setBool",   theEntity);
d74 1
a74 1
   void setInt      (Entity       theEntity, int       theValue)
d76 1
a76 1
      notOverridden ("setInt",    theEntity);
d79 1
a79 1
   void setDbl      (Entity       theEntity, double    theValue)
d81 1
a81 1
      notOverridden ("setDbl",    theEntity);
d84 1
a84 1
   void setString   (Entity       theEntity, String    theValue)
d86 1
a86 1
      notOverridden ("setString", theEntity);
d90 1
a90 1
// set...Vec (theEntity, theArray) methods
d93 1
a93 1
// theEntity to theArray.
d100 2
a101 2
//    The Entity class of the represented attribute does not match that of
//       theEntity.
d107 1
a107 1
   void setBoolVec (Entity theEntity, boolean[] theArray)
d109 1
a109 1
      notOverridden ("setBoolVec", theEntity);
d112 1
a112 1
   void setIntVec  (Entity theEntity, int[]     theArray)
d114 1
a114 1
      notOverridden ("setIntVec", theEntity);
d117 1
a117 1
   void setDblVec  (Entity theEntity, double[]  theArray)
d119 1
a119 1
      notOverridden ("setDblVec", theEntity);
d123 1
a123 1
         Entity   theEntity,
d128 1
a128 1
      notOverridden ("setBoundSet", theEntity);
d132 1
a132 1
// get... (theEntity) methods
d135 1
a135 1
// with theEntity.
d141 2
a142 2
//    The Entity class of the represented attribute does not match that of
//       theEntity.
d147 1
a147 1
   boolean            getBool    (Entity theEntity)
d149 1
a149 1
      notOverridden ("getBool",          theEntity);
d154 1
a154 1
   int                getInt     (Entity theEntity)
d156 1
a156 1
      notOverridden ("getInt",           theEntity);
d161 1
a161 1
   double             getDbl     (Entity theEntity)
d163 1
a163 1
      notOverridden ("getDbl",           theEntity);
d168 1
a168 1
   String             getString  (Entity theEntity)
d170 1
a170 1
      notOverridden ("getString",        theEntity);
d175 1
a175 1
   Part.Category      getPartCat (Entity theEntity)
d177 1
a177 1
      notOverridden ("getPartCat",       theEntity);
d183 1
a183 1
// get...Vec (theEntity, theArray) methods
d186 1
a186 1
// associated with theEntity.
d192 2
a193 2
//    The Entity class of the represented attribute does not match that of
//       theEntity.
d199 1
a199 1
   void getBoolVec (Entity theEntity, boolean[] theArray)
d201 1
a201 1
      notOverridden ("getBoolVec", theEntity);
d204 1
a204 1
   void getIntVec  (Entity theEntity, int[]     theArray)
d206 1
a206 1
      notOverridden ("getIntVec", theEntity);
d209 1
a209 1
   void getDblVec  (Entity theEntity, double[]  theArray)
d211 1
a211 1
      notOverridden ("getDblVec", theEntity);
d215 1
a215 1
         Entity theEntity,
d220 1
a220 1
      notOverridden ("getBoundSet", theEntity);
d261 1
a261 1
// notOverridden (methodName, theEntity)
d264 1
a264 1
   private final void notOverridden (String methodName, Entity theEntity)
d273 1
a273 1
       + "      Entity:       " + theEntity);
@


1.29
log
@Initial implementation of the Session classes.
@
text
@d44 1
a44 1
// appliesTo (theComp)
d46 2
a47 2
// Returns true, iff this AttRep applies to the Component class of which
// theComp is an instance.
d50 1
a50 1
   abstract boolean appliesTo (Component theComp);
d53 1
a53 1
// set... (theComp, theValue) methods
d56 1
a56 1
// theComp to theValue.
d63 2
a64 2
//    The Component class of the represented attribute does not match that of
//       theComp.
d69 1
a69 1
   void setBool     (Component      theComp, boolean   theValue)
d71 1
a71 1
      notOverridden ("setBool",     theComp);
d74 1
a74 1
   void setInt      (Component      theComp, int       theValue)
d76 1
a76 1
      notOverridden ("setInt",      theComp);
d79 1
a79 1
   void setDbl      (Component      theComp, double    theValue)
d81 1
a81 1
      notOverridden ("setDbl",      theComp);
d84 1
a84 1
   void setString   (Component      theComp, String    theValue)
d86 1
a86 1
      notOverridden ("setString",   theComp);
d90 1
a90 1
// set...Vec (theComp, theArray) methods
d93 1
a93 1
// theComp to theArray.
d100 2
a101 2
//    The Component class of the represented attribute does not match that of
//       theComp.
d107 1
a107 1
   void setBoolVec (Component theComp, boolean[] theArray)
d109 1
a109 1
      notOverridden ("setBoolVec", theComp);
d112 1
a112 1
   void setIntVec  (Component theComp, int[]     theArray)
d114 1
a114 1
      notOverridden ("setIntVec", theComp);
d117 1
a117 1
   void setDblVec  (Component theComp, double[]  theArray)
d119 1
a119 1
      notOverridden ("setDblVec", theComp);
d123 4
a126 4
         Component theComp,
         double[]  hardLBArr,
         double[]  softLBArr,
         double[]  hardUBArr)
d128 1
a128 1
      notOverridden ("setBoundSet", theComp);
d132 1
a132 1
// get... (theComp) methods
d135 1
a135 1
// with theComp.
d141 2
a142 2
//    The Component class of the represented attribute does not match that of
//       theComp.
d147 1
a147 1
   boolean            getBool    (Component theComp)
d149 1
a149 1
      notOverridden ("getBool",             theComp);
d154 1
a154 1
   int                getInt     (Component theComp)
d156 1
a156 1
      notOverridden ("getInt",              theComp);
d161 1
a161 1
   double             getDbl     (Component theComp)
d163 1
a163 1
      notOverridden ("getDbl",              theComp);
d168 1
a168 1
   String             getString  (Component theComp)
d170 1
a170 1
      notOverridden ("getString",           theComp);
d175 1
a175 1
   Part.Category      getPartCat (Component theComp)
d177 1
a177 1
      notOverridden ("getPartCat",          theComp);
d183 1
a183 1
// get...Vec (theComp, theArray) methods
d186 1
a186 1
// associated with theComp.
d192 2
a193 2
//    The Component class of the represented attribute does not match that of
//       theComp.
d199 1
a199 1
   void getBoolVec (Component theComp, boolean[] theArray)
d201 1
a201 1
      notOverridden ("getBoolVec", theComp);
d204 1
a204 1
   void getIntVec  (Component theComp, int[]     theArray)
d206 1
a206 1
      notOverridden ("getIntVec", theComp);
d209 1
a209 1
   void getDblVec  (Component theComp, double[]  theArray)
d211 1
a211 1
      notOverridden ("getDblVec", theComp);
d215 1
a215 1
         Component theComp,
d220 1
a220 1
      notOverridden ("getBoundSet", theComp);
d261 1
a261 1
// notOverridden (methodName, theComp)
d264 1
a264 1
   private final void notOverridden (String methodName, Component theComp)
d273 1
a273 1
       + "      Component:    " + theComp);
@


1.28
log
@Terminology change.
@
text
@d31 1
a31 1
// Package-Internal Constructors
@


1.27
log
@Attributes.
@
text
@d21 1
a21 1
//    VitalObject
d28 1
a28 1
abstract class AttRep extends VitalObject
@


1.26
log
@Added attribute "execBounds".
@
text
@d34 1
a34 1
   AttRep (AttSpec theAttSpec)
d246 1
a246 1
   final AttSpec getAttSpec ()
d286 1
a286 1
   private final AttSpec myAttSpec;
@


1.25
log
@Replaced class InternalObject with class VitalObject.
@
text
@d25 1
a25 1
//             [Anonymous inner classes of class CustAttRep]
d69 1
a69 1
   void setBool   (Component theComp, boolean theValue)
d71 1
a71 1
      notOverridden ("setBool", theComp);
d74 1
a74 1
   void setInt    (Component theComp, int     theValue)
d76 1
a76 1
      notOverridden ("setInt", theComp);
d79 1
a79 1
   void setDbl    (Component theComp, double  theValue)
d81 1
a81 1
      notOverridden ("setDbl", theComp);
d84 1
a84 1
   void setString (Component theComp, String  theValue)
d86 1
a86 1
      notOverridden ("setDbl", theComp);
d122 9
d214 9
@


1.24
log
@"partCategory" attribute.
@
text
@d21 1
a21 1
//    InternalObject
d28 1
a28 1
abstract class AttRep extends InternalObject
@


1.23
log
@Added "title" attribute (set only).
@
text
@d138 1
a138 1
   boolean getBool   (Component    theComp)
d140 1
a140 1
      notOverridden ("getBool",    theComp);
d145 1
a145 1
   int     getInt    (Component   theComp)
d147 1
a147 1
      notOverridden ("getInt",    theComp);
d152 1
a152 1
   double  getDbl    (Component   theComp)
d154 1
a154 1
      notOverridden ("getDbl",    theComp);
d159 1
a159 1
   String  getString (Component   theComp)
d161 8
a168 1
      notOverridden ("getString", theComp);
@


1.22
log
@Attributes.
@
text
@d69 1
a69 1
   void setBool (Component theComp, boolean theValue)
d74 1
a74 1
   void setInt  (Component theComp, int     theValue)
d79 6
a84 1
   void setDbl  (Component theComp, double  theValue)
d138 1
a138 1
   boolean getBool (Component theComp)
d140 1
a140 1
      notOverridden ("getBool", theComp);
d145 1
a145 1
   int     getInt  (Component theComp)
d147 1
a147 1
      notOverridden ("getInt", theComp);
d152 1
a152 1
   double  getDbl  (Component theComp)
d154 1
a154 1
      notOverridden ("getDbl", theComp);
d159 7
@


1.21
log
@Removed enum AttID.
@
text
@a52 8
// getAccessStyle ()
//
// Returns the access style for this AttRep.
//------------------------------------------------------------------------------

   abstract AccessStyle getAccessStyle ();

//------------------------------------------------------------------------------
d187 19
d214 5
d251 8
@


1.20
log
@Customized Attributes.
@
text
@d17 1
a17 1
// Each AttRep corresponds to one Problem and one AttID.
d34 1
a34 1
   AttRep (AttID theAttID)
d36 1
a36 1
      myAttID = theAttID;
d198 1
a198 1
   final AttID getAttID ()
d200 1
a200 1
      return myAttID;
d218 1
a218 1
       + "      AttID:        " + myAttID                      + "\n"
d228 1
a228 1
// myAttID
d230 1
a230 1
// The AttID for this AttRep.
d233 1
a233 1
   private final AttID myAttID;
@


1.19
log
@Made class CustAttRep.NPeriods anonymous.
@
text
@d25 1
a25 1
//             [Anonymous inner classes of class AttRepMgr]
@


1.18
log
@Added enum AccessStyle.
@
text
@d25 1
@


1.17
log
@Customized Attributes.
@
text
@d52 1
a52 1
// isAnInputAtt ()
d54 1
a54 1
// Returns true,  if this AttRep represents input  attributes.
d57 1
a57 1
   abstract boolean isAnInputAtt ();
@


1.16
log
@Revised the shut-down model.
@
text
@d72 2
d76 14
a89 3
   abstract void setBool (Component theComp, boolean theValue);
   abstract void setInt  (Component theComp, int     theValue);
   abstract void setDbl  (Component theComp, double  theValue);
d105 2
d109 14
a122 3
   abstract void setBoolVec (Component theComp, boolean[] theArray);
   abstract void setIntVec  (Component theComp, int[]     theArray);
   abstract void setDblVec  (Component theComp, double[]  theArray);
d136 2
d140 20
a159 3
   abstract boolean getBool (Component theComp);
   abstract int     getInt  (Component theComp);
   abstract double  getDbl  (Component theComp);
d174 2
d178 14
a191 3
   abstract void getBoolVec (Component theComp, boolean[] theArray);
   abstract void getIntVec  (Component theComp, int[]     theArray);
   abstract void getDblVec  (Component theComp, double[]  theArray);
d203 20
@


1.15
log
@Added class CustAttRep.
@
text
@a143 11
//------------------------------------------------------------------------------
// shutDown ().
//
// Override from class InternalObject.
//------------------------------------------------------------------------------

   void shutDown ()
      {
      super.shutDown ();
      }

@


1.14
log
@Implemented Utility class.
@
text
@d24 1
@


1.13
log
@AttReps.
@
text
@d8 3
a10 1
package com.ibm.witj;
@


1.12
log
@AttReps.
@
text
@d30 1
a30 1
   AttRep ()
d32 1
d133 9
d153 12
@


1.11
log
@AttReps.
@
text
@d48 8
@


1.10
log
@AttReps.
@
text
@d14 2
a15 2
// Represents a WIT attribute.
// Each AttRep corresponds to one Problem, one AttID, and one CompClassID.
d39 9
a134 4
// Private Fields
//==============================================================================

//==============================================================================
@


1.9
log
@AttReps.
@
text
@@


1.8
log
@AttReps.
@
text
@d39 76
@


1.7
log
@AttReps.
@
text
@d27 1
a27 1
// Package-Internal Methods
a29 4
//------------------------------------------------------------------------------
// Constructor.
//------------------------------------------------------------------------------

d34 4
@


1.6
log
@AttReps.
@
text
@d21 1
@


1.5
log
@Changed name of class       AttRep to       AttI.
Changed name of class DblVecAttRep to DblVecAttI.
@
text
@d14 2
a15 6
// Represents a particular attribute of a particular Component on a temporary
// basis.
// The represented attribute and Component can be changed at any time.
// The sub classes of this class are attribute-type specific and provide the
// ability to set and retrieve the value of the currently represented attribute
// for the currently represented Component.
d19 1
a19 1
//    PublicObject
a20 1
//          DblVecAttRep
d23 1
a23 1
public abstract class AttRep extends PublicObject
a25 36
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// representsAtt ().
//
// Returns true, iff this AttRep currently represents an attribute.
//------------------------------------------------------------------------------

   public boolean representsAtt ()
      {
      return (curAttID != null);
      }

//------------------------------------------------------------------------------
// toStringActive ().
//
// Override from class PublicObject.
//------------------------------------------------------------------------------

   public String toStringActive ()
      {
      if (representsAtt ())
         return
              concClassName ()
            + " currently representing the "
            + curAttID
            + " attribute of "
            + curComp;
      else
         return
              concClassName ()
            + " currently not representing an attribute";
      }

//==============================================================================
d33 1
a33 1
   AttRep (AttMgr theAttMgr)
a34 3
      super ();

      myAttMgr = theAttMgr;
d40 1
a40 1
// Override from class PublicObject.
a44 4
      curComp  = null;
      curAttID = null;
      myAttMgr = null;

a47 122
//------------------------------------------------------------------------------
// represent (theAttID, theComp).
//
// Causes this AttRep to represent the attribute indicated by theAttID and
// theComp.
//------------------------------------------------------------------------------

   void represent (
         AttID     theAttID,
         Component theComp)
      {
      assert (theComp.myProbCoord () == myAttMgr.myProbCoord ());

      curAttID = theAttID;
      curComp  = theComp;
      }

//------------------------------------------------------------------------------
// clear ().
//
// Causes this AttRep not to represent an attribute and Component.
//------------------------------------------------------------------------------

   void clear ()
      {
      curAttID = null;
      curComp  = null;
      }

//------------------------------------------------------------------------------
// checkVecSetValue (int theLength)
//
// Does error checking for setting the value of a vector attribute to an array
// of length theLength.
//------------------------------------------------------------------------------

   void checkVecSetValue (int theLength)
      {
      mustBeActive (concClassName () + ".setValue");

      if (! representsAtt ())
         abortWmsg (
              "   setValue (...) was called on a "
            +     concClassName ()
            +    "that does not currently represent an attribute.");

      if (theLength != nPeriods ())
         abortWmsg (
              "   "
            +     concClassName ()
            +    ".setValue (...) was called with an array\n"
            + "   whose length does not match nPeriods for the Problem.\n"
            + "\n"
            + "      Array Length: "
            +        theLength
            + "\n"
            + "      nPeriods:     "
            +        nPeriods ());
      }

//------------------------------------------------------------------------------
// checkGetValue ()
//
// Does error checking for retrieving the value of an attribute.
//------------------------------------------------------------------------------

   void checkGetValue ()
      {
      mustBeActive (concClassName () + ".getValue");

      if (! representsAtt ())
         abortWmsg (
              "   getValue (...) was called on a "
            +     concClassName ()
            +    "that does not currently represent an attribute.");
      }

//------------------------------------------------------------------------------
// curAttCI ()
//
// Returns the AttCI for the currently represented attribute.
// Throws a null pointer exception, if this AttRep does not currently represent
// an attribute.
//------------------------------------------------------------------------------

   AttCI curAttCI ()
      {
      return myAttMgr.myAttCIFor (curAttID);
      }

//------------------------------------------------------------------------------
// curCompCI ()
//
// Returns the ComponentCI for the currently represented Component.
// Throws a null pointer exception, if this AttRep does not currently represent
// an attribute.
//------------------------------------------------------------------------------

   ComponentCI curCompCI ()
      {
      return curComp.myCompCI ();
      }

//------------------------------------------------------------------------------
// nPeriods ()
//
// Access Wrapper
//------------------------------------------------------------------------------

   int nPeriods ()
      {
      return myAttMgr.myProbCoord ().myCompMgr ().myGlobalComp ().nPeriods ();
      }

//------------------------------------------------------------------------------
// concClassName ()
//
// Returns the name of the concrete class to which this AttRep belongs.
//------------------------------------------------------------------------------

   abstract String concClassName ();

a51 26
//------------------------------------------------------------------------------
// myAttMgr
//
// The AttMgr that owns this AddRep.
//------------------------------------------------------------------------------

   private AttMgr myAttMgr;

//------------------------------------------------------------------------------
// curAttID
//
// The AttID of the currently represented attribute.
// Null, if this AttRep does not currently represent an attribute.
//------------------------------------------------------------------------------

   private AttID curAttID;

//------------------------------------------------------------------------------
// curComp
//
// The currently represented Component.
// Null, if this AttRep does not currently represent an attribute.
//------------------------------------------------------------------------------

   private Component curComp;

@


1.4
log
@Attributes.
@
text
@@


1.3
log
@Attributes.
@
text
@d126 48
@


1.2
log
@Initial implementation of class DblVecAttRep.
@
text
@d74 1
a74 1
   AttRep ()
d77 2
d89 3
a91 1
      clear ();
d107 2
d126 1
a126 1
// curAttCI ().
d135 1
a135 5
      return
         curComp.
            myProbCoord ().
               myAttMgr ().
                  myAttCIFor (curAttID);
d139 1
a139 1
// curAttCI ().
d152 1
a152 1
// concClassName ().
d154 1
a154 1
// Returns the name of the concrete class to which this AttRep belongs.
d157 4
a160 1
   abstract String concClassName ();
d163 1
a163 1
// nPeriods ().
d165 1
a165 3
// Returns the # of periods in the Problem for the current Component.
// Throws a null pointer exception, if this AttRep does not currently represent
// an attribute.
d168 1
a168 4
   int nPeriods ()
      {
      return curComp.myCompMgr ().myGlobalComp ().nPeriods ();
      }
d175 9
a183 1
// curAttID.
d192 1
a192 1
// curComp.
@


1.1
log
@Implemented Java class AttRep.
@
text
@d17 3
a19 2
// Provides the ability to set and retrieve the value of the currently
// represented attribute for the currently represented Component.
d25 1
d31 36
d76 1
d108 1
a108 1
// clear ()
d120 1
a120 1
// curAttCI ()
d124 1
a124 1
// an attribute and Component.
d137 1
a137 1
// curAttCI ()
d141 1
a141 1
// an attribute and Component.
d149 21
d178 1
a178 1
// Null, if this AttRep does not currently represent an attribute and Component.
d187 1
a187 1
// Null, if this AttRep does not currently represent an attribute and Component.
@

