head	1.45;
access;
symbols;
locks; strict;
comment	@# @;


1.45
date	2009.01.16.23.45.51;	author rjw;	state dead;
branches;
next	1.44;

1.44
date	2009.01.16.17.03.36;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2009.01.16.16.32.02;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2009.01.08.21.13.52;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2008.12.15.15.35.32;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2008.12.03.23.02.21;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2008.11.25.21.58.17;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2008.11.25.21.04.03;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.11.25.20.47.40;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.11.25.19.01.44;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2008.11.25.16.39.38;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.11.20.19.27.12;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.11.13.15.04.29;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.11.05.23.14.56;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.10.27.20.43.47;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.10.22.13.43.29;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.10.06.14.58.26;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.10.01.22.59.57;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.09.26.22.21.24;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.09.17.21.27.58;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.09.12.16.09.32;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.09.09.19.00.00;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.09.09.16.27.04;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.09.09.15.15.30;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.09.08.19.45.35;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.09.05.22.06.50;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.09.04.20.56.17;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.09.03.20.33.10;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.09.02.21.04.18;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.08.22.17.53.45;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.08.20.22.23.56;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.08.20.21.48.18;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.08.20.20.57.48;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.08.20.20.48.02;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.08.20.20.45.49;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.08.20.18.49.27;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.08.19.22.14.32;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.08.18.22.16.56;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.08.08.23.56.55;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.08.08.21.26.15;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.08.07.21.36.44;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.08.07.19.58.30;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.07.19.08.56;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.07.18.21.07;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.07.17.28.25;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.45
log
@Java ProbMgr
@
text
@
//==============================================================================
// WIT-J Java Source File AttRepMgr.java.
//
// Contains the declaration of class AttRepMgr.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import       java.util.*;

//==============================================================================
// Class AttRepMgr
//
// "Attribute Representative Manager"
// Owns and provides access to the AttReps for a Problem.
//
// Class Hierarchy:
//
// RetainedObject
//    AttRepMgr
//==============================================================================

final class AttRepMgr extends RetainedObject
{
//==============================================================================
// Package-Internal Constructor
//==============================================================================

   AttRepMgr (Problem theProblem)
      {
      myProblem   = theProblem;

      myAttRepMap = new EnumMap <AttID, AttRep> (AttID.class);

      CustAttRep.buildInstances (this);

      buildStdAttReps ();
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// getAttRepFor (theAtt)
//
// Returns the AttRep that belongs to this AttRepMgr corresponding to theAtt.
//------------------------------------------------------------------------------

   AttRep getAttRepFor (Attribute <?> theAtt)
      {
      return myAttRepMap.get (theAtt.getAttID ());
      }

//------------------------------------------------------------------------------
// store (theAttRep)
//
// Stores theAttRep in myAttRepMap.
//------------------------------------------------------------------------------

   void store (AttRep theAttRep)
      {
      AttID theAttID;

      theAttID = theAttRep.getAttribute ().getAttID ();

      myAttRepMap.put (theAttID, theAttRep);
      }

//------------------------------------------------------------------------------
// shutDown ()
//
// Override from class RetainedObject.
//------------------------------------------------------------------------------

   void shutDown ()
      {
      for (Attribute <?> theAtt: Attribute.getAllAttributes ())
         {
         getAttRepFor (theAtt).shutDown ();
         }

      super.shutDown ();
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// buildStdAttReps ()
//
// Creates and stores the StdAttReps that are to belong to this AttRepMgr.
//------------------------------------------------------------------------------

   private void buildStdAttReps ()
      {
      AttBldrCOR theAttBldrCOR;
      StdAttRep  theStdAttRep;

      theAttBldrCOR = new AttBldrCOR (myProblem.getProbMgr ().getProbMgrCOR ());

      for (Attribute <?> theAtt: Attribute.getAllAttributes ())
         {
         if (getAttRepFor (theAtt) != null)
            continue;

         theStdAttRep = new StdAttRep (myProblem, theAttBldrCOR, theAtt);

         store (theStdAttRep);
         }

      if (myProblem.isSelfTesting ())
         {
         if (theAttBldrCOR.isEmpty ())
            {
            println (
                 "\n"
               + "All C++ Atts have been matched to "
               + "corresponding Java Attributes.");
            }
         else
            theAttBldrCOR.print ();
         }

      theAttBldrCOR.shutDown ();
      }

//==============================================================================
// Private Fields
//==============================================================================
 
//------------------------------------------------------------------------------
// myProblem
//
// The Problem that owns this AttRepMgr.
//------------------------------------------------------------------------------

   private final Problem myProblem;

//------------------------------------------------------------------------------
// myAttRepMap
//
// myAttRepMap.get (theAttID) is the AttRep that belongs to this AttRepMgr
// corresponding to theAttID.
//------------------------------------------------------------------------------

   private final Map <AttID, AttRep> myAttRepMap;

//==============================================================================
}
@


1.44
log
@Change the mname of the ProbCtr classes to ProbMgr in both Java and C++.
@
text
@@


1.43
log
@Continued implementation of the ProbCtr classes.
@
text
@d104 1
a104 1
      theAttBldrCOR = new AttBldrCOR (myProblem.getProbCtr ().getProbCtrCOR ());
@


1.42
log
@Implemented SimpleWitFuncs and used them for 4 methods.
@
text
@d104 1
a104 1
      theAttBldrCOR = new AttBldrCOR (myProblem.getProblemCOR ());
@


1.41
log
@Minor revision.
@
text
@d96 1
a96 2
// Creates and stores the StdAttReps that are to be that belongs to this
// AttRepMgr.
@


1.40
log
@Exceptions
@
text
@d22 2
a23 2
//    RetainedObject
//       AttRepMgr
@


1.39
log
@Dismantling class SessionCOR.
@
text
@d18 1
a18 1
// Owns and provides access to the AttReps for a problem.
@


1.38
log
@Removed Java class Session.
@
text
@d105 1
a105 1
      theAttBldrCOR = new AttBldrCOR (myProblem.getSessionCOR ());
@


1.37
log
@Dismantling Session.
@
text
@d105 1
a105 2
      theAttBldrCOR =
         new AttBldrCOR (myProblem.getSession ().getSessionCOR ());
@


1.36
log
@Moved self-test responsibility from class Session to class Problem.
@
text
@d32 1
a32 1
   AttRepMgr (Session theSession)
d34 1
a34 1
      mySession   = theSession;
d105 2
a106 1
      theAttBldrCOR = new AttBldrCOR (mySession.getSessionCOR ());
d113 1
a113 1
         theStdAttRep = new StdAttRep (mySession, theAttBldrCOR, theAtt);
d118 1
a118 1
      if (mySession.getProblem ().isSelfTesting ())
d139 1
a139 1
// mySession
d141 1
a141 1
// The Session that owns this AttRepMgr.
d144 1
a144 1
   private final Session mySession;
@


1.35
log
@Moved some responsibility from Session to Problem.
@
text
@d117 1
a117 1
      if (mySession.isSelfTesting ())
@


1.34
log
@Changed method name:
   Attribute.values () ==> Attribute.getAllAttributes ()
@
text
@d117 1
a117 1
      if (mySession.getSelfTestMode ())
@


1.33
log
@Attributes
@
text
@d81 1
a81 1
      for (Attribute <?> theAtt: Attribute.values ())
d107 1
a107 1
      for (Attribute <?> theAtt: Attribute.values ())
@


1.32
log
@Minor revision.
@
text
@d12 2
d36 1
a36 1
      myAttRepArr = new AttRep[Attribute.values ().length];
d55 1
a55 1
      return myAttRepArr[theAtt.getIndex ()];
d61 1
a61 1
// Stores theAttRep in myAttRepArr.
d66 1
a66 3
      int theIdx;

      theIdx = theAttRep.getAttribute ().getIndex ();
d68 1
a68 1
      assert (myAttRepArr[theIdx] == null);
d70 1
a70 1
      myAttRepArr[theIdx] = theAttRep;
d146 1
a146 1
// myAttRepArr
d148 2
a149 2
// myAttRepArr[theAtt.getIndex ()] is the AttRep that belongs to this
// AttRepMgr corresponding to theAtt.
d152 1
a152 1
   private final AttRep[] myAttRepArr;
@


1.31
log
@Changed ownership of AttRepMgr from Problem to Session.
@
text
@d46 1
a46 1
// getAttRepFor (theAttribute)
d48 1
a48 2
// Returns the AttRep that belongs to this AttRepMgr corresponding to
// theAttribute.
d51 1
a51 1
   AttRep getAttRepFor (Attribute <?> theAttribute)
d53 1
a53 1
      return myAttRepArr[theAttribute.getIndex ()];
d81 1
a81 1
      for (Attribute <?> theAttribute: Attribute.values ())
d83 1
a83 1
         getAttRepFor (theAttribute).shutDown ();
d107 1
a107 1
      for (Attribute <?> theAttribute: Attribute.values ())
d109 1
a109 1
         if (getAttRepFor (theAttribute) != null)
d112 1
a112 1
         theStdAttRep = new StdAttRep (mySession, theAttBldrCOR, theAttribute);
d148 2
a149 2
// myAttRepArr[theAttribute.getIndex ()] is the AttRep that belongs to this
// AttRepMgr corresponding to theAttribute.
@


1.30
log
@Changed name of generic class AttSpec <V> to Attribute <V>.
@
text
@d30 1
a30 1
   AttRepMgr (Problem theProblem)
d32 1
a32 1
      myProblem   = theProblem;
d106 1
a106 1
      theAttBldrCOR = new AttBldrCOR (myProblem.getSession ().getSessionCOR ());
d113 1
a113 1
         theStdAttRep = new StdAttRep (myProblem, theAttBldrCOR, theAttribute);
d118 1
a118 1
      if (myProblem.getSession ().getSelfTestMode ())
d139 1
a139 1
// myProblem
d141 1
a141 1
// The Problem that owns this AttRepMgr.
d144 1
a144 1
   private final Problem myProblem;
@


1.29
log
@Minor revision.
@
text
@d34 1
a34 1
      myAttRepArr = new AttRep[AttSpec.values ().length];
d46 1
a46 1
// getAttRepFor (theAttSpec)
d49 1
a49 1
// theAttSpec.
d52 1
a52 1
   AttRep getAttRepFor (AttSpec <?> theAttSpec)
d54 1
a54 1
      return myAttRepArr[theAttSpec.getIndex ()];
d67 1
a67 1
      theIdx = theAttRep.getAttSpec ().getIndex ();
d82 1
a82 1
      for (AttSpec <?> theAttSpec: AttSpec.values ())
d84 1
a84 1
         getAttRepFor (theAttSpec).shutDown ();
d108 1
a108 1
      for (AttSpec <?> theAttSpec: AttSpec.values ())
d110 1
a110 1
         if (getAttRepFor (theAttSpec) != null)
d113 1
a113 1
         theStdAttRep = new StdAttRep (myProblem, theAttBldrCOR, theAttSpec);
d125 1
a125 1
               + "corresponding Java AttSpecs.");
d149 2
a150 2
// myAttRepArr[theAttSpec.getIndex ()] is the AttRep that belongs to this
// AttRepMgr corresponding to theAttSpec.
@


1.28
log
@Minor revision.
@
text
@d120 1
a120 1
         if (theAttBldrCOR.getEmptyMode ())
@


1.27
log
@Numerous class name changes.
@
text
@d120 1
a120 1
         if (theAttBldrCOR.isEmpty ())
@


1.26
log
@Minor revision.
@
text
@d103 2
a104 2
      AttBldrCI theAttBldrCI;
      StdAttRep theStdAttRep;
d106 1
a106 1
      theAttBldrCI = new AttBldrCI (myProblem.getSession ().getSessionCI ());
d113 1
a113 1
         theStdAttRep = new StdAttRep (myProblem, theAttBldrCI, theAttSpec);
d120 1
a120 1
         if (theAttBldrCI.isEmpty ())
d128 1
a128 1
            theAttBldrCI.print ();
d131 1
a131 1
      theAttBldrCI.shutDown ();
@


1.25
log
@Active state / shutDown method.
@
text
@d48 2
a49 1
// Returns the AttRep owned by this AttRepMgr corresponding to theAttSpec.
d97 2
a98 1
// Creates and stores the StdAttReps that are to be owned by this AttRepMgr.
d149 2
a150 2
// myAttRepArr[theAttSpec.getIndex ()] is the AttRep owned by this AttRepMgr
// corresponding to theAttSpec.
@


1.24
log
@Renamed Java class ProbCoordCI to SessionCI.
Renamed C++  class ProbCoord   to Session.
@
text
@d74 1
a74 1
// release ()
d79 1
a79 1
   void release ()
d83 1
a83 1
         getAttRepFor (theAttSpec).release ();
d86 1
a86 1
      super.release ();
d129 1
a129 1
      theAttBldrCI.release ();
@


1.23
log
@Moved onwership of the ProbCoordCI from class Problem to class Session.
@
text
@d104 1
a104 1
      theAttBldrCI = new AttBldrCI (myProblem.getSession ().getProbCoordCI ());
@


1.22
log
@Removed Java class ProbCoord.
@
text
@d104 1
a104 1
      theAttBldrCI = new AttBldrCI (myProblem.getProbCoordCI ());
@


1.21
log
@Initial implementation of the Session classes.
@
text
@d30 1
a30 1
   AttRepMgr (ProbCoord theProbCoord)
d32 1
a32 1
      myProbCoord = theProbCoord;
d104 1
a104 1
      theAttBldrCI = new AttBldrCI (myProbCoord.getProbCoordCI ());
d111 1
a111 1
         theStdAttRep = new StdAttRep (myProbCoord, theAttBldrCI, theAttSpec);
d116 1
a116 1
      if (myProbCoord.selfTestMode ())
d137 1
a137 1
// myProbCoord
d139 1
a139 1
// The ProbCoord that owns this AttRepMgr.
d142 1
a142 1
   private final ProbCoord myProbCoord;
@


1.20
log
@Terminology change.
@
text
@d27 1
a27 1
// Package-Internal Constructors
@


1.19
log
@Attributes.
@
text
@d20 1
a20 1
//    VitalObject
d24 1
a24 1
final class AttRepMgr extends VitalObject
d74 1
a74 1
// shutDown ()
d76 1
a76 1
// Override from class VitalObject.
d79 1
a79 1
   void shutDown ()
d83 1
a83 1
         getAttRepFor (theAttSpec).shutDown ();
d86 1
a86 1
      super.shutDown ();
d129 1
a129 1
      theAttBldrCI.shutDown ();
@


1.18
log
@Replaced class InternalObject with class VitalObject.
@
text
@d51 1
a51 1
   AttRep getAttRepFor (AttSpec theAttSpec)
d81 1
a81 1
      for (AttSpec theAttSpec: AttSpec.values ())
d106 1
a106 1
      for (AttSpec theAttSpec: AttSpec.values ())
@


1.17
log
@Customized attributes.
@
text
@d20 1
a20 1
//    InternalObject
d24 1
a24 1
final class AttRepMgr extends InternalObject
d76 1
a76 1
// Override from class InternalObject.
@


1.16
log
@Removed enum AttID.
@
text
@d36 3
a38 2
      buildCustAttReps ();
      buildStdAttReps  ();
d57 17
a93 14
// buildCustAttReps ()
//
// Creates and stores the CustAttReps that are to be owned by this AttRepMgr.
//------------------------------------------------------------------------------

   private void buildCustAttReps ()
      {
      for (CustAttRep theCustAttRep: CustAttRep.makeInstances ())
         {
         store (theCustAttRep);
         }
      }

//------------------------------------------------------------------------------
a131 17
//------------------------------------------------------------------------------
// store (theAttRep)
//
// Stores theAttRep in myAttRepArr.
//------------------------------------------------------------------------------

   void store (AttRep theAttRep)
      {
      int theIdx;

      theIdx = theAttRep.getAttSpec ().getIndex ();

      assert (myAttRepArr[theIdx] == null);

      myAttRepArr[theIdx] = theAttRep;
      }

@


1.15
log
@Customized Attributes.
@
text
@a11 2
import       java.util.*;

d34 1
a34 1
      myAttRepMap = new EnumMap <AttID, AttRep> (AttID.class);
d45 1
a45 1
// getAttRepFor (theAttID)
d47 1
a47 1
// Returns the AttRep owned by this AttRepMgr corresponding to theAttID.
d50 1
a50 1
   AttRep getAttRepFor (AttID theAttID)
d52 1
a52 1
      return myAttRepMap.get (theAttID);
d63 1
a63 1
      for (AttID theAttID: AttID.values ())
d65 1
a65 1
         myAttRepMap.get (theAttID).shutDown ();
a67 2
      myAttRepMap.clear ();

d85 1
a85 1
         myAttRepMap.put (theCustAttRep.getAttID (), theCustAttRep);
d102 1
a102 1
      for (AttID theAttID: AttID.values ())
d104 1
a104 1
         if (myAttRepMap.containsKey (theAttID))
d107 1
a107 1
         theStdAttRep = new StdAttRep (myProbCoord, theAttBldrCI, theAttID);
d109 1
a109 1
         myAttRepMap.put (theAttID, theStdAttRep);
d119 1
a119 1
               + "corresponding Java AttIDs.");
d128 17
d158 1
a158 1
// myAttRepMap
d160 2
a161 2
// myAttRepMap.get (theAttID) is the AttRep owned by this AttRepMgr
// corresponding to theAttID.
d164 1
a164 1
   private final EnumMap <AttID, AttRep> myAttRepMap;
@


1.14
log
@Customized Attributes.
@
text
@d87 1
a87 5
      List <CustAttRep> theCustAttReps;

      theCustAttReps = CustAttRep.makeInstances ();

      for (CustAttRep theCustAttRep: theCustAttReps)
@


1.13
log
@Customized Attributes.
@
text
@d10 1
a10 4
import static com.ibm.witj.Utility    .*;
import static com.ibm.witj.AttID      .*;
import static com.ibm.witj.AccessStyle.*;
import static com.ibm.witj.CompClassID.*;
d87 8
a94 1
      myAttRepMap.put (AttID.nPeriods, CustAttRep.newNPeriodsAttRep ());
@


1.12
log
@Customized Attributes.
@
text
@d90 1
a90 24
      myAttRepMap.put (AttID.nPeriods, newNPeriodsAttRep ());
      }

//------------------------------------------------------------------------------
// newNPeriodsAttRep ()
//
// Constructs and returns a new CustAttRep for the nPeriods attribute.
//------------------------------------------------------------------------------

   private static CustAttRep newNPeriodsAttRep ()
      {
      return
         new CustAttRep (nPeriods, GLOBAL, INPUT)
            {
            void setInt (Component theComp, int theValue)
               {
               ((Global) theComp).setNPeriods (theValue);
               }

            int getInt (Component theComp)
               {
               return ((Global) theComp).getNPeriods ();
               }
            };
@


1.11
log
@Made class CustAttRep.NPeriods anonymous.
@
text
@d99 1
a99 1
   private CustAttRep newNPeriodsAttRep ()
@


1.10
log
@Customized Attributes.
@
text
@d10 4
a13 1
import static com.ibm.witj.Utility.*;
d90 2
a91 1
      CustAttRep theCustAttRep;
d93 5
a97 1
      theCustAttRep = new CustAttRep.NPeriods ();
d99 15
a113 1
      myAttRepMap.put (AttID.nPeriods, theCustAttRep);
@


1.9
log
@Revised the shut-down model.
@
text
@d38 2
a39 1
      buildStdAttReps ();
d80 15
d109 3
@


1.8
log
@Implemented Utility class.
@
text
@d36 2
d64 4
a67 1
      shutDownAttReps ();
d69 1
a69 1
      myProbCoord = null;
a90 2
      myAttRepMap  = new EnumMap <AttID, AttRep> (AttID.class);

a113 17
//------------------------------------------------------------------------------
// shutDownAttReps ()
//
// Shuts down the AttReps owned by this AttRepMgr.
// Removes the references to the AttReps.
//------------------------------------------------------------------------------

   private void shutDownAttReps ()
      {
      for (AttID theAttID: AttID.values ())
         {
         myAttRepMap.get (theAttID).shutDown ();
         }

      myAttRepMap = null;
      }

d124 1
a124 1
   private ProbCoord myProbCoord;
d133 1
a133 1
   private EnumMap <AttID, AttRep> myAttRepMap;
@


1.7
log
@AttReps.
@
text
@d8 1
a8 1
package com.ibm.witj;
d10 3
a12 1
import     java.util.*;
d99 1
a99 1
            System.out.println (
@


1.6
log
@AttReps.
@
text
@d88 1
a88 1
         theStdAttRep = new StdAttRep (theAttBldrCI, theAttID);
@


1.5
log
@AttReps.
@
text
@d42 1
a42 1
// getAttRepFor (theAttID, theCompClassID)
d44 1
a44 2
// Returns the AttRep corresponding to theAttID and theCompClassID, or null if
// none exists.
d47 1
a47 3
   AttRep getAttRepFor (
         AttID       theAttID,
         CompClassID theCompClassID)
d49 1
a49 1
      return myAttRepMap.get (theAttID).get (theCompClassID);
d79 2
a80 5
      AttBldrCI                     theAttBldrCI;
      EnumMap <CompClassID, AttRep> theInnerMap;
      String                        theAttCIName;
      AttCI                         theAttCI;
      StdAttRep                     theStdAttRep;
d82 1
a82 2
      myAttRepMap =
         new EnumMap <AttID, EnumMap <CompClassID, AttRep>> (AttID.class);
d84 1
a84 1
      theAttBldrCI = new AttBldrCI (myProbCoord.getProbCoordCI ());
d88 1
a88 13
         theInnerMap = new EnumMap <CompClassID, AttRep> (CompClassID.class);

         myAttRepMap.put (theAttID, theInnerMap);

         for (CompClassID theCompClassID: CompClassID.values ())
            {
            theAttCIName = theCompClassID + "." + theAttID;

            if (theAttBldrCI.hasAttFor (theAttCIName))
               {
               theAttCI     = new AttCI (theAttBldrCI, theAttCIName);

               theStdAttRep = new StdAttRep (theAttCI);
d90 1
a90 3
               theInnerMap.put (theCompClassID, theStdAttRep);
               }
            }
a117 3
      EnumMap <CompClassID, AttRep> theInnerMap;
      AttRep                        theAttRep;

d120 1
a120 9
         theInnerMap = myAttRepMap.get (theAttID);

         for (CompClassID theCompClassID: CompClassID.values ())
            {
            theAttRep = theInnerMap.get (theCompClassID);

            if (theAttRep != null)
               theAttRep.shutDown ();
            }
d141 2
a142 3
// myAttRepMap.get (theAttID).get (theCompClassID) is the AttRep that owns the
// C++ Att that's identified by theAttID and applies to the Component class
// identified by theCompClassID, if any.
d145 1
a145 1
   private EnumMap <AttID, EnumMap <CompClassID, AttRep>> myAttRepMap;
@


1.4
log
@AttReps.
@
text
@d42 14
@


1.3
log
@AttReps.
@
text
@d27 1
a27 1
// Package-Internal Methods
a29 4
//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------

d37 4
d49 2
d71 1
d91 3
a93 1
               theStdAttRep = new StdAttRep ();
d116 28
@


1.2
log
@AttReps.
@
text
@d10 2
d36 3
d49 2
d58 53
d115 18
@


1.1
log
@AttReps.
@
text
@d13 1
a13 1
// "AttCI Manager"
d55 1
a55 1
//------------------------------------------------------------------------------
@

