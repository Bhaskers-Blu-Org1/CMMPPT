head	1.20;
access;
symbols;
locks; strict;
comment	@# @;


1.20
date	2008.09.26.22.21.23;	author rjw;	state dead;
branches;
next	1.19;

1.19
date	2008.09.17.21.27.58;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.09.08.19.45.35;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.09.05.22.06.50;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.09.03.20.33.10;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.08.18.22.16.56;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.08.07.21.36.40;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.08.01.16.29.32;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.07.18.21.28.13;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.07.18.20.29.16;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.07.15.17.46.07;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.07.07.22.59.33;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.07.03.14.42.44;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.27.21.43.24;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.27.16.34.06;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.26.21.49.09;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.18.21.28.18;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.12.14.54.23;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.29.22.03.31;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.29.20.53.56;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Numerous class name changes.
@
text
@
//==============================================================================
// WIT-J Java Source File AttCI.java.
//
// Contains the declaration of class AttCI.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

//==============================================================================
// Class AttCI
//
// "Att C++ Interface"
// The Java interface to a C++ Att.
// In the comments below, the WIT attribute represented by the C++ Att that
// belongs to this AttCI is called "the represented attribute".
//
// Class Hierarchy:
//
//    RetainedObject
//       CppInterface
//          AttCI
//==============================================================================

final class AttCI extends CppInterface
{
//==============================================================================
// Package-Internal Constructor
// 
// Creates an AttCI that will own the C++ Att whose scoped name matches
// scopedAttName and that was built by the C++ AttBldr that belongs to
// theAttBldrCI.
//==============================================================================

   AttCI (
         AttBldrCI theAttBldrCI,
         String    scopedAttName)
      {
      acquireMyCppAtt (theAttBldrCI, scopedAttName);
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// set... (theCompCI, theValue) methods
//
// Each of these methods sets the represented attribute's value associated with 
// the C++ Component that belongs to theCompCI to theValue.
//
// Issues an internal error if any of the following conditions occur:
//
//    The represented attribute is not an input attribute.
//    The type of the represented attribute does not match the scalar type
//       indicated by the method name.
//    The Component class of the represented attribute does not match the C++
//       Component that belongs to theCompCI.
//------------------------------------------------------------------------------

   native void setBool (ComponentCI theCompCI, boolean theValue);
   native void setInt  (ComponentCI theCompCI, int     theValue);
   native void setDbl  (ComponentCI theCompCI, double  theValue);

//------------------------------------------------------------------------------
// set...Vec (theCompCI, theArray) methods
//
// Each of these methods sets the represented attribute's value associated with 
// the C++ Component that belongs to theCompCI to theArray.
//
// Issues an internal error if any of the following conditions occur:
//
//    The represented attribute is not an input attribute.
//    The type of the represented attribute does not match the vector type
//       indicated by the method name.
//    The Component class of the represented attribute does not match the C++
//       Component that belongs to theCompCI.
//    The length of theArray != nPeriods.
//------------------------------------------------------------------------------

   native void setBoolVec (ComponentCI theCompCI, boolean[] theArray);
   native void setIntVec  (ComponentCI theCompCI, int[]     theArray);
   native void setDblVec  (ComponentCI theCompCI, double[]  theArray);

//------------------------------------------------------------------------------
// get... (theCompCI) methods
//
// Returns the represented attribute's value associated with the C++ Component
// that belongs to theCompCI.
//
// Issues an internal error if either of the following conditions occur:
//
//    The type of the represented attribute does not match the scalar type
//       indicated by the method name.
//    The Component class of the represented attribute does not match the C++
//       Component that belongs to theCompCI.
//------------------------------------------------------------------------------

   native boolean getBool (ComponentCI theCompCI);
   native int     getInt  (ComponentCI theCompCI);
   native double  getDbl  (ComponentCI theCompCI);

//------------------------------------------------------------------------------
// get...Vec (theCompCI, theArray) methods
//
// Sets theArray to the represented attribute's value associated with the
// the C++ Component that belongs to theCompCI.
//
// Issues an internal error if any of the following conditions occur:
//
//    The type of the represented attribute does not match the vector type
//       indicated by the method name.
//    The Component class of the represented attribute does not match the C++
//       Component that belongs to theCompCI.
//    The length of theArray != nPeriods.
//------------------------------------------------------------------------------

   native void getBoolVec (ComponentCI theCompCI, boolean[] theArray);
   native void getIntVec  (ComponentCI theCompCI, int[]     theArray);
   native void getDblVec  (ComponentCI theCompCI, double[]  theArray);

//------------------------------------------------------------------------------
// isAnInputAtt ()
//
// Returns true, iff the represented attribute is an input attribute, i.e., one
// that supports "set".
//------------------------------------------------------------------------------

   native boolean isAnInputAtt ();

//------------------------------------------------------------------------------
// valueTypeMatches (theTypeName)
//
// Returns true, iff the value type of the represented attribute matches
// theTypeName.
//------------------------------------------------------------------------------

   native boolean valueTypeMatches (String theTypeName);

//------------------------------------------------------------------------------
// appliesTo (theClassName)
//
// Returns true, iff the represented attribute applies to the Component class
// whose name is given by theClassName.
//------------------------------------------------------------------------------

   native boolean appliesTo (String theClassName);

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// acquireMyCppAtt (theAttBldrCI, scopedAttName)
// 
// Takes ownership of the C++ Att whose scoped name matches scopedAttName and
// that was built by the C++ AttBldr that belongs to theAttBldrCI.
//------------------------------------------------------------------------------

   private native void acquireMyCppAtt (
      AttBldrCI theAttBldrCI,
      String    scopedAttName);

//==============================================================================
}
@


1.19
log
@Minor revision.
@
text
@@


1.18
log
@Initial implementation of the Session classes.
@
text
@d17 2
a18 2
// In the comments below, the WIT attribute represented by the C++ Att owned by
// this AttCI is called "the represented attribute".
d33 2
a34 1
// scopedAttName and that was built by the C++ AttBldr owned by theAttBldrCI.
d52 1
a52 1
// the C++ Component owned by theCompCI to theValue.
d60 1
a60 1
//       Component owned by theCompCI.
d71 1
a71 1
// the C++ Component owned by theCompCI to theArray.
d79 1
a79 1
//       Component owned by theCompCI.
d91 1
a91 1
// owned by theCompCI.
d98 1
a98 1
//       Component owned by theCompCI.
d109 1
a109 1
// the C++ Component owned by theCompCI.
d116 1
a116 1
//       Component owned by theCompCI.
d159 1
a159 1
// that was built by the C++ AttBldr owned by theAttBldrCI.
@


1.17
log
@Terminology change.
@
text
@d30 1
a30 5
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// Constructor.
d34 1
a34 1
//------------------------------------------------------------------------------
d43 4
@


1.16
log
@Replaced class InternalObject with class VitalObject.
@
text
@d22 1
a22 1
//    VitalObject
@


1.15
log
@Implemented Utility class.
@
text
@d22 1
a22 1
//    InternalObject
@


1.14
log
@AttReps.
@
text
@d8 3
a10 1
package com.ibm.witj;
@


1.13
log
@Attributes.
@
text
@d101 1
a101 1
   
@


1.12
log
@Attributes.
@
text
@d131 9
@


1.11
log
@Attributes.
@
text
@d46 1
a46 1
// setBool (theCompCI, theBoolean)
d48 10
a57 4
// Sets the represented attribute's value associated with theComp to theBoolean.
// Issues an error if the represented attribute is not an input attribute of
// type boolean or the Component class of the C++ Component owned by
// theCompCI does not match the represented attribute.
d60 3
a62 3
   native void setBool (
      ComponentCI theCompCI,
      boolean     theBoolean);
d65 6
a70 1
// setDblVec (theCompCI, theDblAr)
d72 6
a77 4
// Sets the represented attribute's value associated with theComp to theDblAr.
// Issues an error if the represented attribute is not an input attribute of
// type vector of double or the Component class of the C++ Component owned by
// theCompCI does not match the represented attribute.
d80 3
a82 3
   native void setDblVec (
      ComponentCI theCompCI,
      double[]    theDblAr);
d85 1
a85 1
// getBool (theCompCI)
d87 9
a95 4
// Returns the represented attribute's value associated with theComp.
// Issues an error if the represented attribute is not an input attribute of
// type boolean or the Component class of the C++ Component owned by
// theCompCI does not match the represented attribute.
d98 3
a100 2
   native boolean getBool (
      ComponentCI theCompCI);
d103 6
a108 1
// getDblVec (theCompCI, theDblAr)
d110 5
a114 4
// Sets theDblAr to the represented attribute's value associated with theComp.
// Issues an error if the represented attribute is of 
// type vector of double or the Component class of the C++ Component owned by
// theCompCI does not match the represented attribute.
d117 3
a119 3
   native void getDblVec (
      ComponentCI theCompCI,
      double[]    theDblAr);
@


1.10
log
@Attributes.
@
text
@a89 1
// Returns theDblAr.
d92 1
a92 1
   native double[] getDblVec (
@


1.9
log
@Attributes.
@
text
@a58 12
// getBool (theCompCI)
//
// Returns the represented attribute's value associated with theComp.
// Issues an error if the represented attribute is not an input attribute of
// type boolean or the Component class of the C++ Component owned by
// theCompCI does not match the represented attribute.
//------------------------------------------------------------------------------

   native boolean getBool (
      ComponentCI theCompCI);
   
//------------------------------------------------------------------------------
d72 12
@


1.8
log
@Atttributes.
@
text
@d34 2
a35 3
// Creates an AttCI that will own the C++ Att whose name and Component class
// match theAttName and theClassName and that was built by the C++ AttBldr owned
// by theAttBldrCI.
d40 1
a40 2
         String    theAttName,
         String    theClassName)
d42 1
a42 1
      acquireMyCppAtt (theAttBldrCI, theAttName, theClassName);
d120 1
a120 1
// acquireMyCppAtt (theAttBldrCI, theAttName, theClassName)
d122 2
a123 3
// Takes ownership of the C++ Att whose name and Component class match
// theAttName and theClassName and that was built by the C++ AttBldr owned by
// theAttBldrCI.
d128 1
a128 2
      String    theAttName,
      String    theClassName);
@


1.7
log
@Self-Test.
@
text
@d34 3
a36 2
// Creates an AttCI that will own the C++ Att whose name matches theAttName and
// that was built by the C++ AttBldr owned by theAttBldrCI.
d41 2
a42 1
         String    theAttName)
d44 1
a44 1
      acquireMyCppAtt (theAttBldrCI, theAttName);
d122 1
a122 1
// acquireMyCppAtt (theAttBldrCI, theAttName)
d124 3
a126 2
// Takes ownership of the C++ Att whose name matches theAttName and that was
// built by the C++ AttBldr owned by theAttBldrCI.
d131 2
a132 1
      String    theAttName);
@


1.6
log
@Initial implementation of self-test.
@
text
@d105 10
a114 1
   
@


1.5
log
@Attributes.
@
text
@d97 9
@


1.4
log
@Attributes.
@
text
@d90 1
d93 1
a93 1
   native void getDblVec (
@


1.3
log
@Comments, etc.
@
text
@d46 25
@


1.2
log
@Attributes
@
text
@d1 7
@


1.1
log
@Attributes.
@
text
@d51 13
@

