head	1.14;
access;
symbols;
locks; strict;
comment	@# @;


1.14
date	2011.05.02.18.32.32;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.03.30.16.20.53;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.03.08.22.01.21;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.13.23.10.43;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2010.04.09.22.13.16;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.09.29.19.09.25;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.09.25.22.42.43;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.09.18.23.31.39;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.06.11.18.59.57;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.05.20.17.07;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.05.17.56.47;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.04.21.49.57;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.01.16.34.50;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.03.30.21.07.32;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Reduced heading comments.
@
text
@
//==============================================================================
// WIT-J Java Source File StdAttImp.java.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import       java.util.*;

//==============================================================================
// Class StdAttImp
//
// "Standardized Attribute Implementation."
// An AttImp that operates in a standard, uniform way.
//
// Class Hierarchy:
//
// PreservedInternal
//    AttImp
//       StdAttImp
//==============================================================================

final class StdAttImp extends AttImp
{
//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// buildInstances (theCoord)
//
// Creates and stores the StdAttImps that are to belong to theCoord.
//------------------------------------------------------------------------------

   static void buildInstances (Coordinator theCoord)
      {
      AttBldrCOR theAttBldrCOR;
      StdAttImp  theStdAttImp;

      theAttBldrCOR = new AttBldrCOR (theCoord.getCoordinatorCOR ());

      for (Attribute <?> theAtt: Attribute.getAttributes ())
         {
         if (theCoord.getAttImpFor (theAtt) != null)
            continue;

         theStdAttImp = new StdAttImp (theAtt, theAttBldrCOR, theCoord);

         theCoord.store (theStdAttImp);
         }

      if (theCoord.isSelfTesting ())
         {
         if (theAttBldrCOR.isEmpty ())
            {
            println (
                 "\n"
               + "All C++ Atts have been matched to "
               + "corresponding Java Attributes.");
            }
         else
            theAttBldrCOR.print ();
         }

      theAttBldrCOR.deactivate ();
      }

//------------------------------------------------------------------------------
// Overrides from class AttImp.
//------------------------------------------------------------------------------

   void verifyIsModifiable ()
      {
      boolean theAttIsModifiable;
      AttCOR  theAttCOR;

      theAttIsModifiable = getAttribute ().isModifiable ();

      for (CompClassID theCompClassID: CompClassID.values ())
         {
         theAttCOR = myAttCORMap.get (theCompClassID);

         if (theAttCOR == null)
            continue;

         assert (theAttCOR.isModifiable () == theAttIsModifiable);
         }
      }

//------------------------------------------------------------------------------

   void verifyAppliesTo ()
      {
      boolean appliesInJava;
      boolean appliesInCpp;

      for (CompClassID theCompClassID: CompClassID.values ())
         {
         appliesInJava = getAttribute ().appliesTo (theCompClassID);

         appliesInCpp  = (myAttCORMap.get (theCompClassID) != null);

         if (appliesInJava != appliesInCpp)
            {
            System.out.printf (
               "\n"
             + "Error:\n"
             + "   A mismatch was found in the Attribute.appliesTo method.\n"
             + "\n"
             + "      Attribute:       %s\n"
             + "      Component Class: %s\n"
             + "      Java Value:      %s\n"
             + "      C++  Value:      %s\n"
             + "\n",
               getAttribute (),
               theCompClassID,
               appliesInJava,
               appliesInCpp);

            assert (false);
            }
         }
      }

//------------------------------------------------------------------------------

   void setBool (Component theComp, boolean theValue)
      {
      ComponentCOR theCompCOR = theComp.getComponentCOR ();

      getAttCORFor (theComp).setBool (theCompCOR, theValue);
      }

//------------------------------------------------------------------------------

   void setInt (Component theComp, int theValue)
      {
      ComponentCOR theCompCOR = theComp.getComponentCOR ();

      getAttCORFor (theComp).setInt (theCompCOR, theValue);
      }

//------------------------------------------------------------------------------

   void setDbl (Component theComp, double theValue)
      {
      ComponentCOR theCompCOR = theComp.getComponentCOR ();

      getAttCORFor (theComp).setDbl (theCompCOR, theValue);
      }

//------------------------------------------------------------------------------

   void setString (Component theComp, String theValue)
      {
      ComponentCOR theCompCOR = theComp.getComponentCOR ();

      getAttCORFor (theComp).setString (theCompCOR, theValue);
      }

//------------------------------------------------------------------------------

   void setBoolVec (Component theComp, boolean[] theArray)
      {
      ComponentCOR theCompCOR = theComp.getComponentCOR ();

      getAttCORFor (theComp).setBoolVec (theCompCOR, theArray);
      }

//------------------------------------------------------------------------------

   void setIntVec (Component theComp, int[] theArray)
      {
      ComponentCOR theCompCOR = theComp.getComponentCOR ();

      getAttCORFor (theComp).setIntVec (theCompCOR, theArray);
      }

//------------------------------------------------------------------------------

   void setDblVec (Component theComp, double[]  theArray)
      {
      ComponentCOR theCompCOR = theComp.getComponentCOR ();

      getAttCORFor (theComp).setDblVec (theCompCOR, theArray);
      }

//------------------------------------------------------------------------------

   void setBoolVecToScalar  (Component theComp, boolean theValue)
      {
      ComponentCOR theCompCOR = theComp.getComponentCOR ();

      getAttCORFor (theComp).setBoolVecToScalar (theCompCOR, theValue);
      }

//------------------------------------------------------------------------------

   void setIntVecToScalar (Component theComp, int theValue)
      {
      ComponentCOR theCompCOR = theComp.getComponentCOR ();

      getAttCORFor (theComp).setIntVecToScalar (theCompCOR, theValue);
      }

//------------------------------------------------------------------------------

   void setDblVecToScalar (Component theComp, double theValue)
      {
      ComponentCOR theCompCOR = theComp.getComponentCOR ();

      getAttCORFor (theComp).setDblVecToScalar (theCompCOR, theValue);
      }

//------------------------------------------------------------------------------

   boolean getBool (Component theComp)
      {
      ComponentCOR theCompCOR = theComp.getComponentCOR ();

      return getAttCORFor (theComp).getBool (theCompCOR);
      }

//------------------------------------------------------------------------------

   int getInt (Component theComp)
      {
      ComponentCOR theCompCOR = theComp.getComponentCOR ();

      return getAttCORFor (theComp).getInt (theCompCOR);
      }

//------------------------------------------------------------------------------

   double  getDbl  (Component theComp)
      {
      ComponentCOR theCompCOR = theComp.getComponentCOR ();

      return getAttCORFor (theComp).getDbl (theCompCOR);
      }

//------------------------------------------------------------------------------

   String getString (Component theComp)
      {
      ComponentCOR theCompCOR = theComp.getComponentCOR ();

      return getAttCORFor (theComp).getString (theCompCOR);
      }

//------------------------------------------------------------------------------

   void getBoolVec (Component theComp, boolean[] theArray)
      {
      ComponentCOR theCompCOR = theComp.getComponentCOR ();

      getAttCORFor (theComp).getBoolVec (theCompCOR, theArray);
      }

//------------------------------------------------------------------------------

   void getIntVec (Component theComp, int[] theArray)
      {
      ComponentCOR theCompCOR = theComp.getComponentCOR ();

      getAttCORFor (theComp).getIntVec (theCompCOR, theArray);
      }

//------------------------------------------------------------------------------

   void getDblVec (Component theComp, double[] theArray)
      {
      ComponentCOR theCompCOR = theComp.getComponentCOR ();

      getAttCORFor (theComp).getDblVec (theCompCOR, theArray);
      }

//------------------------------------------------------------------------------
// deactivate ()
//
// Override from class PreservedInternal.
//------------------------------------------------------------------------------

   void deactivate ()
      {
      AttCOR theAttCOR;

      for (CompClassID theCompClassID: CompClassID.values ())
         {
         theAttCOR = myAttCORMap.get (theCompClassID);

         if (theAttCOR != null)
            theAttCOR.deactivate ();
         }

      myAttCORMap.clear ();

      super.deactivate ();
      }

//==============================================================================
// Private Constructor
//==============================================================================

   private StdAttImp (
         Attribute <?> theAtt,
         AttBldrCOR    theAttBldrCOR,
         Coordinator   theCoord)
      {
      super (theAtt, theCoord);

      myAttCORMap = new EnumMap <CompClassID, AttCOR> (CompClassID.class);

      setUpAttCORMap (theAttBldrCOR);

      if (theCoord.isSelfTesting ())
         checkValueType ();
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// setUpAttCORMap ()
//
// Sets up myAttCORMap.
//------------------------------------------------------------------------------

   private void setUpAttCORMap (AttBldrCOR theAttBldrCOR)
      {
      String theAttCORName;
      AttCOR theAttCOR;

      for (CompClassID theCompClassID: CompClassID.values ())
         {
         theAttCORName = theCompClassID + "." + getAttribute ();

         if (theAttBldrCOR.hasAttFor (theAttCORName))
            {
            theAttCOR = new AttCOR (theAttBldrCOR, theAttCORName);

            myAttCORMap.put (theCompClassID, theAttCOR);
            }
         }
      }

//------------------------------------------------------------------------------
// checkValueType ()
//
// Verifies that the value type of the Java Attribute for this StdAttImp matches
// that of all corresponding C++ Atts.
//------------------------------------------------------------------------------

   private void checkValueType ()
      {
      String theTypeName;
      AttCOR theAttCOR;

      theTypeName = getAttribute ().getValueType ().getSimpleName ();

      for (CompClassID theCompClassID: CompClassID.values ())
         {
         theAttCOR = myAttCORMap.get (theCompClassID);

         if (theAttCOR == null)
            continue;

         if (! theAttCOR.valueTypeMatches (theTypeName))
            internalError (
                 "   A Java Attribute was found whose value type does not\n"
               + "   match that of all of the corresponding C++ Atts.\n"
               + "\n"
               + "      Attribute:       " + getAttribute () + "\n"
               + "      Component Class: " + theCompClassID  + "\n"
               + "      Value Type:      " + theTypeName);
         }
      }

//------------------------------------------------------------------------------
// getAttCORFor (theComp)
//
// Returns the AttCOR that owns the C++ Att corresponding to this StdAttImp and
// the Component class of theComp, if any; otherwise null.
//------------------------------------------------------------------------------

   private AttCOR getAttCORFor (Component theComp)
      {
      return myAttCORMap.get (theComp.getCompClassID ());
      }
 
//==============================================================================
// Private Fields
//==============================================================================
 
//------------------------------------------------------------------------------
// myAttCORMap
//
// myAttCORMap.get (theCompClassID) is the AttCOR that owns the C++ Att
// corresponding to this StdAttImp and the Component class identified by
// theCompClassID, if any; otherwise null.
//------------------------------------------------------------------------------

   private final EnumMap <CompClassID, AttCOR> myAttCORMap;

//==============================================================================
}
@


1.13
log
@Revised CppObjRep class ctors.
@
text
@a3 2
//
// Contains the declaration of class StdAttImp.
@


1.12
log
@Minor revision.
@
text
@d44 1
a44 1
      theAttBldrCOR = new AttBldrCOR (theCoord);
@


1.11
log
@Implemented String StdAttImps.
@
text
@d133 3
a135 4
      getAttCORFor (theComp).
         setBool (
            getCompCORFor (theComp),
            theValue);
d142 3
a144 4
      getAttCORFor (theComp).
         setInt (
            getCompCORFor (theComp),
            theValue);
d151 3
a153 4
      getAttCORFor (theComp).
         setDbl (
            getCompCORFor (theComp),
            theValue);
d160 3
a162 4
      getAttCORFor (theComp).
         setString (
            getCompCORFor (theComp),
            theValue);
d169 3
a171 4
      getAttCORFor (theComp).
         setBoolVec (
            getCompCORFor (theComp),
            theArray);
d178 3
a180 4
      getAttCORFor (theComp).
         setIntVec (
            getCompCORFor (theComp),
            theArray);
d187 3
a189 4
      getAttCORFor (theComp).
         setDblVec (
            getCompCORFor (theComp),
            theArray);
d196 3
a198 4
      getAttCORFor (theComp).
         setBoolVecToScalar (
            getCompCORFor (theComp),
            theValue);
d205 3
a207 4
      getAttCORFor (theComp).
         setIntVecToScalar (
            getCompCORFor (theComp),
            theValue);
d214 3
a216 4
      getAttCORFor (theComp).
         setDblVecToScalar (
            getCompCORFor (theComp),
            theValue);
d223 3
a225 4
      return
         getAttCORFor (theComp).
            getBool (
               getCompCORFor (theComp));
d232 3
a234 4
      return
         getAttCORFor (theComp).
            getInt (
               getCompCORFor (theComp));
d241 3
a243 4
      return
         getAttCORFor (theComp).
            getDbl (
               getCompCORFor (theComp));
d250 3
a252 4
      return
         getAttCORFor (theComp).
            getString (
               getCompCORFor (theComp));
d259 3
a261 4
      getAttCORFor (theComp).
         getBoolVec (
            getCompCORFor (theComp),
            theArray);
d268 3
a270 4
      getAttCORFor (theComp).
         getIntVec (
            getCompCORFor (theComp),
            theArray);
d277 3
a279 4
      getAttCORFor (theComp).
         getDblVec (
            getCompCORFor (theComp),
            theArray);
a395 11
//------------------------------------------------------------------------------
// getCompCORFor (theComp)
//
// Returns the ComponentCOR for theComp.
//------------------------------------------------------------------------------

   private ComponentCOR getCompCORFor (Component theComp)
      {
      return theComp.getComponentCOR ();
      }

@


1.10
log
@Minor revision.
@
text
@d133 4
a136 7
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.setBool (theCompCOR, theValue);
d143 4
a146 7
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.setInt (theCompCOR, theValue);
d153 5
a157 2
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;
d159 1
a159 2
      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);
d161 6
a166 1
      theAttCOR.setDbl (theCompCOR, theValue);
d173 4
a176 7
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.setBoolVec (theCompCOR, theArray);
d183 4
a186 7
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.setIntVec (theCompCOR, theArray);
d193 4
a196 7
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.setDblVec (theCompCOR, theArray);
d203 4
a206 7
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.setBoolVecToScalar (theCompCOR, theValue);
d213 4
a216 7
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.setIntVecToScalar (theCompCOR, theValue);
d223 4
a226 7
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.setDblVecToScalar (theCompCOR, theValue);
d233 4
a236 7
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      return theAttCOR.getBool (theCompCOR);
d243 4
a246 7
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      return theAttCOR.getInt (theCompCOR);
d253 5
a257 2
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;
d259 1
a259 2
      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);
d261 6
a266 1
      return theAttCOR.getDbl (theCompCOR);
d273 4
a276 7
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.getBoolVec (theCompCOR, theArray);
d283 4
a286 7
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.getIntVec (theCompCOR, theArray);
d291 1
a291 1
   void getDblVec  (Component theComp, double[]  theArray)
d293 4
a296 7
      AttCOR       theAttCOR;
      ComponentCOR theCompCOR;

      theAttCOR  = getAttCORFor  (theComp);
      theCompCOR = getCompCORFor (theComp);

      theAttCOR.getDblVec (theCompCOR, theArray);
@


1.9
log
@Implemented class PreservedInternal and made several classes extend it
   instead of class PreservedObject.
@
text
@d196 1
a196 1
   void setDblVec  (Component theComp, double[]  theArray)
@


1.8
log
@Implemented thePreservedObject.getCoordinator ().
@
text
@d22 1
a22 1
// PreservedObject
d327 1
a327 1
// Override from class PreservedObject.
@


1.7
log
@Maded the static field Coordinator.selfTesting non-static.
@
text
@d44 1
a44 1
      theAttBldrCOR = new AttBldrCOR (theCoord.getCoordinatorCOR ());
@


1.6
log
@Moved appliesTo capability from enum AttID to class Attribute.
@
text
@d56 1
a56 1
      if (Coordinator.isSelfTesting ())
d362 1
a362 1
      if (Coordinator.isSelfTesting ())
@


1.5
log
@Changed name of Java class RetainedObject to PreservedObject.
@
text
@d103 1
a103 1
         appliesInJava = getAttribute ().getAttID ().appliesTo (theCompClassID);
@


1.4
log
@Made theAttribute.appliesTo (...) based on data on the Java side.
@
text
@d22 1
a22 1
// RetainedObject
d327 1
a327 1
// Override from class RetainedObject.
@


1.3
log
@Moved the iAmModifiable field to AttID class.
@
text
@d76 1
a76 8
   boolean appliesTo (CompClassID theCompClassID)
      {
      return (myAttCORMap.get (theCompClassID)!= null);
      }

//------------------------------------------------------------------------------

   final void verifyIsModifiable ()
d96 35
@


1.2
log
@Initial implementation of theComp.queueElementValue (...).
@
text
@d83 1
a83 1
   boolean isModifiable ()
d85 14
a98 1
      return modifiable;
a333 2
      modifiable = compModifiable ();

a366 48
// compModifiable ()
//
// Computes and returns the value to be assigned to the modifiable field of this
// StdAttImp.
//
// * If all C++ attributes corresponding to this StdAttImp are modifiable,
//   true is returned.
//
// * If all C++ attributes corresponding to this StdAttImp are non-modifiable,
//   false is returned.
//
// * If one  C++ attribute corresponding to this StdAttImp is modifiable and
//   another C++ attribute corresponding to this StdAttImp is non-modifiable,
//   an assert error is issued.
//------------------------------------------------------------------------------

   private boolean compModifiable ()
      {
      boolean prevAttCORFound;
      boolean firstAttCORIsMod;
      AttCOR  theAttCOR;
      boolean theAttCORIsMod;

      prevAttCORFound  = false;
      firstAttCORIsMod = false;

      for (CompClassID theCompClassID: CompClassID.values ())
         {
         theAttCOR = myAttCORMap.get (theCompClassID);

         if (theAttCOR == null)
            continue;

         theAttCORIsMod = theAttCOR.isModifiable ();

         if (! prevAttCORFound)
            {
            firstAttCORIsMod = theAttCORIsMod;
            prevAttCORFound  = true;
            }
         else
            assert (theAttCORIsMod == firstAttCORIsMod);
         }

      return firstAttCORIsMod;
      }

//------------------------------------------------------------------------------
a434 7
//------------------------------------------------------------------------------
// True, iff the corresponding setValue method(s) of class Component can validly
// be invoked for this StdAttImp's Attribute.
//------------------------------------------------------------------------------

   private final boolean modifiable;

@


1.1
log
@Changed names of AttRep classes to AttImp.
@
text
@d51 1
a51 1
         theStdAttImp = new StdAttImp (theAttBldrCOR, theAtt);
d310 4
a313 1
   private StdAttImp (AttBldrCOR theAttBldrCOR, Attribute <?> theAtt)
d315 1
a315 1
      super (theAtt);
@

