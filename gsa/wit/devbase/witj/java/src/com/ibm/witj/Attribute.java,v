head	1.137;
access;
symbols;
locks; strict;
comment	@# @;


1.137
date	2011.08.25.23.20.43;	author rjw;	state Exp;
branches;
next	1.136;

1.136
date	2011.05.04.22.15.40;	author rjw;	state Exp;
branches;
next	1.135;

1.135
date	2011.05.02.18.32.18;	author rjw;	state Exp;
branches;
next	1.134;

1.134
date	2011.03.03.22.09.29;	author rjw;	state Exp;
branches;
next	1.133;

1.133
date	2011.03.03.00.31.06;	author rjw;	state Exp;
branches;
next	1.132;

1.132
date	2011.03.02.23.53.55;	author rjw;	state Exp;
branches;
next	1.131;

1.131
date	2011.03.02.23.19.22;	author rjw;	state Exp;
branches;
next	1.130;

1.130
date	2011.03.02.22.35.34;	author rjw;	state Exp;
branches;
next	1.129;

1.129
date	2011.02.28.23.17.49;	author rjw;	state Exp;
branches;
next	1.128;

1.128
date	2011.02.25.16.07.03;	author rjw;	state Exp;
branches;
next	1.127;

1.127
date	2011.02.16.17.34.53;	author rjw;	state Exp;
branches;
next	1.126;

1.126
date	2011.02.11.17.06.47;	author rjw;	state Exp;
branches;
next	1.125;

1.125
date	2010.10.14.20.04.10;	author rjw;	state Exp;
branches;
next	1.124;

1.124
date	2010.10.01.14.47.18;	author rjw;	state Exp;
branches;
next	1.123;

1.123
date	2010.08.13.22.38.24;	author rjw;	state Exp;
branches;
next	1.122;

1.122
date	2010.08.06.17.50.39;	author rjw;	state Exp;
branches;
next	1.121;

1.121
date	2010.04.26.22.06.21;	author rjw;	state Exp;
branches;
next	1.120;

1.120
date	2010.04.26.21.09.29;	author rjw;	state Exp;
branches;
next	1.119;

1.119
date	2010.04.26.19.32.47;	author rjw;	state Exp;
branches;
next	1.118;

1.118
date	2010.04.14.15.42.15;	author rjw;	state Exp;
branches;
next	1.117;

1.117
date	2010.04.12.22.28.18;	author rjw;	state Exp;
branches;
next	1.116;

1.116
date	2010.04.12.19.30.29;	author rjw;	state Exp;
branches;
next	1.115;

1.115
date	2010.04.09.19.54.32;	author rjw;	state Exp;
branches;
next	1.114;

1.114
date	2010.04.05.21.56.27;	author rjw;	state Exp;
branches;
next	1.113;

1.113
date	2010.04.05.21.31.01;	author rjw;	state Exp;
branches;
next	1.112;

1.112
date	2009.09.21.20.45.43;	author rjw;	state Exp;
branches;
next	1.111;

1.111
date	2009.09.21.20.40.23;	author rjw;	state Exp;
branches;
next	1.110;

1.110
date	2009.09.18.22.33.22;	author rjw;	state Exp;
branches;
next	1.109;

1.109
date	2009.06.16.21.50.32;	author rjw;	state Exp;
branches;
next	1.108;

1.108
date	2009.06.15.15.54.11;	author rjw;	state Exp;
branches;
next	1.107;

1.107
date	2009.06.12.21.22.19;	author rjw;	state Exp;
branches;
next	1.106;

1.106
date	2009.06.12.20.33.42;	author rjw;	state Exp;
branches;
next	1.105;

1.105
date	2009.06.11.23.19.29;	author rjw;	state Exp;
branches;
next	1.104;

1.104
date	2009.06.11.23.00.15;	author rjw;	state Exp;
branches;
next	1.103;

1.103
date	2009.06.11.22.28.43;	author rjw;	state Exp;
branches;
next	1.102;

1.102
date	2009.06.11.22.13.12;	author rjw;	state Exp;
branches;
next	1.101;

1.101
date	2009.06.11.20.49.11;	author rjw;	state Exp;
branches;
next	1.100;

1.100
date	2009.06.11.20.11.48;	author rjw;	state Exp;
branches;
next	1.99;

1.99
date	2009.06.11.20.00.28;	author rjw;	state Exp;
branches;
next	1.98;

1.98
date	2009.06.11.19.39.13;	author rjw;	state Exp;
branches;
next	1.97;

1.97
date	2009.06.11.18.59.57;	author rjw;	state Exp;
branches;
next	1.96;

1.96
date	2009.05.12.19.29.50;	author rjw;	state Exp;
branches;
next	1.95;

1.95
date	2009.05.12.15.57.57;	author rjw;	state Exp;
branches;
next	1.94;

1.94
date	2009.05.05.17.56.47;	author rjw;	state Exp;
branches;
next	1.93;

1.93
date	2009.05.04.21.49.56;	author rjw;	state Exp;
branches;
next	1.92;

1.92
date	2009.03.30.21.07.31;	author rjw;	state Exp;
branches;
next	1.91;

1.91
date	2009.03.16.19.35.44;	author rjw;	state Exp;
branches;
next	1.90;

1.90
date	2009.03.13.19.32.20;	author rjw;	state Exp;
branches;
next	1.89;

1.89
date	2009.01.27.16.56.21;	author rjw;	state Exp;
branches;
next	1.88;

1.88
date	2009.01.21.21.43.24;	author rjw;	state Exp;
branches;
next	1.87;

1.87
date	2009.01.21.20.21.04;	author rjw;	state Exp;
branches;
next	1.86;

1.86
date	2009.01.16.23.45.54;	author rjw;	state Exp;
branches;
next	1.85;

1.85
date	2009.01.16.22.47.09;	author rjw;	state Exp;
branches;
next	1.84;

1.84
date	2009.01.07.18.21.28;	author rjw;	state Exp;
branches;
next	1.83;

1.83
date	2009.01.06.23.45.59;	author rjw;	state Exp;
branches;
next	1.82;

1.82
date	2008.12.16.23.43.03;	author rjw;	state Exp;
branches;
next	1.81;

1.81
date	2008.12.16.16.13.29;	author rjw;	state Exp;
branches;
next	1.80;

1.80
date	2008.12.11.19.06.22;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2008.12.11.17.01.28;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2008.12.11.15.37.39;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2008.12.10.20.54.09;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2008.12.10.19.20.40;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2008.12.09.18.38.18;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2008.12.08.23.15.49;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2008.12.05.00.24.51;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2008.12.04.18.55.07;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2008.12.03.23.02.21;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2008.12.03.19.02.12;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2008.12.03.18.28.49;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2008.12.03.15.57.59;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2008.11.25.20.25.12;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2008.11.25.19.37.03;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2008.11.21.16.56.11;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2008.11.21.15.29.01;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2008.11.20.22.07.22;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2008.11.20.19.27.12;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2008.11.14.21.47.41;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2008.11.14.20.37.42;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2008.11.14.19.15.34;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2008.11.13.23.36.14;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2008.11.13.23.29.54;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2008.11.13.17.14.38;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2008.11.13.16.37.34;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2008.11.13.16.27.04;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2008.11.13.15.04.29;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2008.11.12.20.40.32;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2008.11.08.00.06.27;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2008.11.07.21.41.09;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2008.11.07.16.47.58;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2008.11.07.16.26.38;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2008.11.06.23.29.45;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2008.11.06.16.37.12;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2008.11.05.23.14.56;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2008.11.04.22.22.24;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2008.11.04.21.25.37;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2008.11.04.14.52.35;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2008.11.03.20.41.07;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2008.10.30.17.38.12;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2008.10.29.20.27.19;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2008.10.27.20.43.48;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.10.22.13.43.30;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.08.07.15.25.50;	author rjw;	state dead;
branches;
next	1.35;

1.35
date	2008.08.05.19.06.17;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.08.05.18.41.52;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.08.05.17.30.57;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.08.05.15.43.51;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.08.05.15.37.18;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.08.01.21.38.56;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.08.01.17.56.30;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.08.01.16.29.32;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.07.30.22.43.30;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.07.25.22.06.55;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.07.25.21.45.25;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.07.25.21.16.43;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.07.25.20.30.54;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.07.25.17.45.54;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.07.25.16.20.11;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.07.25.15.53.51;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.07.25.15.01.55;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.07.24.22.19.46;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.07.24.21.09.30;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.07.24.20.19.52;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.07.24.17.55.28;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.07.24.15.59.10;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.07.24.15.21.43;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.07.21.18.27.31;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.07.15.17.46.07;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.07.14.22.08.54;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.07.14.21.14.21;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.07.14.19.28.26;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.07.14.16.23.58;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.07.11.17.42.13;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.10.19.07.21;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.07.09.23.00.02;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.07.09.20.41.33;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.07.09.15.45.39;	author rjw;	state dead;
branches;
next	1.1;

1.1
date	2008.07.08.19.31.02;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.137
log
@Revisions for the removal of COIN from WIT.
@
text
@
//==============================================================================
// WIT-J Java Source File Attribute.java.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;
import static com.ibm.witj.CompClassID.*;
import static com.ibm.witj.Attribute.DefaultCase.*;

import       java.util.*;

//==============================================================================
// Generic Class Attribute <V>
//
// "Attribute (Value Type)"
//
// Represents the set of all WIT attributes that have a given name.
// Each Attribute has a value type, the type of value that it stores.
// The instances of this class are immutable.
//==============================================================================

public final class Attribute <V>
{
//==============================================================================
// Static initialization block
//==============================================================================

   static
      {
      initAttributes =
         new ArrayList <Attribute <?>> (200);

      materialPartAttNames =
         newHashSet (
            "asapPipOrder",
            "buildAheadUB",
            "buildAsap",
            "buildNstn",
            "stockBounds",
            "stockCost",
            "stockVol");

      stochModeAttNames =
         newHashSet (
            "currentScenario",
            "objectStage",
            "periodStage",
            "probability",
            "stochSolnMode");

      multiObjModeAttNames =
         newHashSet (
            "currentObjective",
            "multiObjTol",
            "objectiveListSpec",
            "objectiveRank");
      }

//==============================================================================
// Attribute fields
//
// The following fields store all of WIT-J's Attributes.
//==============================================================================

   public static final
   Attribute <Boolean>          accAfterOptImp =
      newAtt (Boolean  .class, "accAfterOptImp",          false, PROBLEM);

   public static final
   Attribute <Boolean>          accAfterSoftLB =
      newAtt (Boolean  .class, "accAfterSoftLB",          false, PROBLEM);

   public static final
   Attribute <Boolean>          accelerated =
      newAtt (Boolean  .class, "accelerated",      UNMODIFIABLE, PROBLEM);

   public static final
   Attribute <Boolean>          asapPipOrder =
      newAtt (Boolean  .class, "asapPipOrder",            false, PART);

   public static final
   Attribute <Boolean>          autoPriority =
      newAtt (Boolean  .class, "autoPriority",            false, PROBLEM);

   public static final
   Attribute <Integer>          bomIndex =
      newAtt (Integer  .class, "bomIndex",         UNMODIFIABLE, BOM_ENTRY);

   public static final
   Attribute <Integer>          bopIndex =
      newAtt (Integer  .class, "bopIndex",         UNMODIFIABLE, BOP_ENTRY);

   public static final
   Attribute <Boolean>          boundedLeadTimes =
      newAtt (Boolean  .class, "boundedLeadTimes",        false, PART);

   public static final
   Attribute <Double>           boundsValue =
      newAtt (Double   .class, "boundsValue",      UNMODIFIABLE, PROBLEM);

   public static final
   Attribute <int[]>            buildAheadUB =
      newAtt (int[]    .class, "buildAheadUB",       CALCULATED, PART);

   public static final
   Attribute <Boolean>          buildAsap =
      newAtt (Boolean  .class, "buildAsap",               false, PART);

   public static final
   Attribute <Boolean>          buildNstn =
      newAtt (Boolean  .class, "buildNstn",               false, PART);

   public static final
   Attribute <Boolean>          compPrices =
      newAtt (Boolean  .class, "compPrices",              false, PROBLEM);

   public static final
   Attribute <Boolean>          computeCriticalList =
      newAtt (Boolean  .class, "computeCriticalList",     false, PROBLEM);

   public static final
   Attribute <double[]>         consRate =
      newAtt (double[] .class, "consRate",                  1.0, BOM_ENTRY,
                                                                 SUBSTITUTE);
   public static final
   Attribute <double[]>         consVol =
      newAtt (double[] .class, "consVol",          UNMODIFIABLE, PART);

   public static final
   Attribute <Boolean>          cplexEmbedded =
      newAtt (Boolean  .class, "cplexEmbedded",    UNMODIFIABLE, PROBLEM);

   public static final
   Attribute <Double>           cplexMipBound =
      newAtt (Double   .class, "cplexMipBound",    UNMODIFIABLE, PROBLEM);

   public static final
   Attribute <Double>           cplexMipRelGap =
      newAtt (Double   .class, "cplexMipRelGap",   UNMODIFIABLE, PROBLEM);

   public static final
   Attribute <Double>           cplexParSpecDblVal =
      newAtt (Double   .class, "cplexParSpecDblVal",        0.0, PROBLEM);

   public static final
   Attribute <Integer>          cplexParSpecIntVal =
      newAtt (Integer  .class, "cplexParSpecIntVal",          0, PROBLEM);

   public static final
   Attribute <String>           cplexParSpecName =
      newAtt (String   .class, "cplexParSpecName",   "NO_PARAM", PROBLEM);

   public static final
   Attribute <Integer>          cplexStatusCode =
      newAtt (Integer  .class, "cplexStatusCode",  UNMODIFIABLE, PROBLEM);

   public static final
   Attribute <String>           cplexStatusText =
      newAtt (String   .class, "cplexStatusText",  UNMODIFIABLE, PROBLEM);

   public static final
   Attribute <BoundSet>         cumShipBounds =
      newAtt (BoundSet .class, "cumShipBounds",      CALCULATED, DEMAND);

   public static final
   Attribute <double[]>         cumShipReward =
      newAtt (double[] .class, "cumShipReward",             0.0, DEMAND);

   public static final
   Attribute <String>           currentObjective =
      newAtt (String   .class, "currentObjective",   NO_DEFAULT, PROBLEM);

   public static final
   Attribute <Integer>          currentScenario =
      newAtt (Integer  .class, "currentScenario",             0, PROBLEM);

   public static final
   Attribute <String>           demandName =
      newAtt (String   .class, "demandName",         NO_DEFAULT, DEMAND);

   public static final
   Attribute <double[]>         demandVol =
      newAtt (double[] .class, "demandVol",                 0.0, DEMAND);

   public static final
   Attribute <Integer>          earliestPeriod =
      newAtt (Integer  .class, "earliestPeriod",              0, BOM_ENTRY,
                                                                 SUBSTITUTE,
                                                                 BOP_ENTRY);

   public static final
   Attribute <Integer>          equitability =
      newAtt (Integer  .class, "equitability",                1, PROBLEM);

   public static final
   Attribute <double[]>         excessVol =
      newAtt (double[] .class, "excessVol",        UNMODIFIABLE, PART);

   public static final
   Attribute <BoundSet>         execBounds =
      newAtt (BoundSet .class, "execBounds",         CALCULATED, OPERATION);

   public static final
   Attribute <double[]>         execCost =
      newAtt (double[] .class, "execCost",                  0.0, OPERATION);

   public static final
   Attribute <Boolean>          execEmptyBom =
      newAtt (Boolean  .class, "execEmptyBom",             true, PROBLEM);

   public static final
   Attribute <Double>           execPenalty =
      newAtt (Double   .class, "execPenalty",               0.0, OPERATION,
                                                                 BOM_ENTRY,
                                                                 SUBSTITUTE);

   public static final
   Attribute <double[]>         execVol =
      newAtt (double[] .class, "execVol",                   0.0, OPERATION);

   public static final
   Attribute <boolean[]>        executable =
      newAtt (boolean[].class, "executable",       UNMODIFIABLE, OPERATION);

   public static final
   Attribute <Boolean>          expAllowed =
      newAtt (Boolean  .class, "expAllowed",               true, SUBSTITUTE,
                                                                 BOP_ENTRY);

   public static final
   Attribute <Double>           expAversion =
      newAtt (Double   .class, "expAversion",               0.0, BOP_ENTRY);

   public static final
   Attribute <Double>           expCutoff =
      newAtt (Double   .class, "expCutoff",                0.01, PROBLEM);

   public static final
   Attribute <Double>           expNetAversion =
      newAtt (Double   .class, "expNetAversion",            0.0, SUBSTITUTE);

   public static final
   Attribute <Boolean>          extOptActive =
      newAtt (Boolean  .class, "extOptActive",     UNMODIFIABLE, PROBLEM);

   public static final
   Attribute <Double>           falloutRate =
      newAtt (Double   .class, "falloutRate",               0.0, BOM_ENTRY,
                                                                 SUBSTITUTE);

   public static final
   Attribute <Boolean>          feasible =
      newAtt (Boolean  .class, "feasible",         UNMODIFIABLE, PROBLEM);

   public static final
   Attribute <Integer>          focusHorizon =
      newAtt (Integer  .class, "focusHorizon",               -1, DEMAND);

   public static final
   Attribute <double[]>         focusShortageVol =
      newAtt (double[] .class, "focusShortageVol", UNMODIFIABLE, PART);

   public static final
   Attribute <Boolean>          forcedMultiEq =
      newAtt (Boolean  .class, "forcedMultiEq",           false, PROBLEM);

   public static final
   Attribute <double[]>         fssExecVol =
      newAtt (double[] .class, "fssExecVol",       UNMODIFIABLE, OPERATION);

   public static final
   Attribute <double[]>         fssShipVol =
      newAtt (double[] .class, "fssShipVol",                0.0, DEMAND);

   public static final
   Attribute <double[]>         fssSubVol =
      newAtt (double[] .class, "fssSubVol",        UNMODIFIABLE, SUBSTITUTE);

   public static final
   Attribute <Boolean>          heurAllocActive =
      newAtt (Boolean  .class, "heurAllocActive",  UNMODIFIABLE, PROBLEM);

   public static final
   Attribute <Boolean>          highPrecisionWD =
      newAtt (Boolean  .class, "highPrecisionWD",         false, PROBLEM);

   public static final
   Attribute <int[]>            impactPeriod =
      newAtt (int[]    .class, "impactPeriod",     UNMODIFIABLE, BOM_ENTRY,
                                                                 SUBSTITUTE,
                                                                 BOP_ENTRY);

   public static final
   Attribute <double[]>         incLotSize =
      newAtt (double[] .class, "incLotSize",                0.0, OPERATION);

   public static final
   Attribute <double[]>         incLotSize2 =
      newAtt (double[] .class, "incLotSize2",               0.0, OPERATION);

   public static final
   Attribute <Boolean>          independentOffsets =
      newAtt (Boolean  .class, "independentOffsets",      false, PROBLEM);

   public static final
   Attribute <Boolean>          intExecVols =
      newAtt (Boolean  .class, "intExecVols",             false, OPERATION);

   public static final
   Attribute <Boolean>          intShipVols =
      newAtt (Boolean  .class, "intShipVols",             false, DEMAND);

   public static final
   Attribute <Boolean>          intSubVols =
      newAtt (Boolean  .class, "intSubVols",              false, SUBSTITUTE);

   public static final
   Attribute <Integer>          latestPeriod =
      newAtt (Integer  .class, "latestPeriod",       CALCULATED, BOM_ENTRY,
                                                                 SUBSTITUTE,
                                                                 BOP_ENTRY);

   public static final
   Attribute <int[]>            leadTimeUB =
      newAtt (int[]    .class, "leadTimeUB",         CALCULATED, DEMAND);

   public static final
   Attribute <double[]>         lotSize2Thresh =
      newAtt (double[] .class, "lotSize2Thresh",            0.0, OPERATION);

   public static final
   Attribute <Double>           lotSizeTol =
      newAtt (Double   .class, "lotSizeTol",            0.00001, PROBLEM);

   public static final
   Attribute <Boolean>          mandEC =
      newAtt (Boolean  .class, "mandEC",                  false, BOM_ENTRY);

   public static final
   Attribute <double[]>         minLotSize =
      newAtt (double[] .class, "minLotSize",                0.0, OPERATION);

   public static final
   Attribute <double[]>         minLotSize2 =
      newAtt (double[] .class, "minLotSize2",               0.0, OPERATION);

   public static final
   Attribute <Boolean>          minimalExcess =
      newAtt (Boolean  .class, "minimalExcess",           false, PROBLEM);

   public static final
   Attribute <Boolean>          mipMode =
      newAtt (Boolean  .class, "mipMode",                 false, PROBLEM);

   public static final
   Attribute <Boolean>          modHeurAlloc =
      newAtt (Boolean  .class, "modHeurAlloc",            false, PROBLEM);

   public static final
   Attribute <double[]>         mrpConsVol =
      newAtt (double[] .class, "mrpConsVol",       UNMODIFIABLE, PART);

   public static final
   Attribute <double[]>         mrpExcessVol =
      newAtt (double[] .class, "mrpExcessVol",     UNMODIFIABLE, PART);

   public static final
   Attribute <double[]>         mrpExecVol =
      newAtt (double[] .class, "mrpExecVol",       UNMODIFIABLE, OPERATION);

   public static final
   Attribute <Boolean>          mrpNetAllowed =
      newAtt (Boolean  .class, "mrpNetAllowed",           false, SUBSTITUTE);

   public static final
   Attribute <double[]>         mrpResidualVol =
      newAtt (double[] .class, "mrpResidualVol",   UNMODIFIABLE, PART);

   public static final
   Attribute <double[]>         mrpSubVol =
      newAtt (double[] .class, "mrpSubVol",        UNMODIFIABLE, SUBSTITUTE);

   public static final
   Attribute <Boolean>          multiExec =
      newAtt (Boolean  .class, "multiExec",               false, PROBLEM);

   public static final
   Attribute <Boolean>          multiObjMode =
      newAtt (Boolean  .class, "multiObjMode",            false, PROBLEM);

   public static final
   Attribute <Double>           multiObjTol =
      newAtt (Double   .class, "multiObjTol",             1.e-7, PROBLEM);

   public static final
   Attribute <Boolean>          multiRoute =
      newAtt (Boolean  .class, "multiRoute",              false, PROBLEM);

   public static final
   Attribute <Integer>          nPeriods =
      newAtt (Integer  .class, "nPeriods",                   26, PROBLEM);

   public static final
   Attribute <Integer>          nScenarios =
      newAtt (Integer  .class, "nScenarios",                  1, PROBLEM);

   public static final
   Attribute <Boolean>          netAllowed =
      newAtt (Boolean  .class, "netAllowed",               true, SUBSTITUTE);

   public static final
   Attribute <Boolean>          nstnResidual =
      newAtt (Boolean  .class, "nstnResidual",            false, PROBLEM);

   public static final
   Attribute <Double>           objValue =
      newAtt (Double   .class, "objValue",         UNMODIFIABLE, PROBLEM);

   public static final
   Attribute <Integer>          objectStage =
      newAtt (Integer  .class, "objectStage",                 0, PART,
                                                                 OPERATION);
   public static final
   Attribute <String>           objectiveListSpec =
      newAtt (String   .class, "objectiveListSpec",   "Default", PROBLEM);

   public static final
   Attribute <Integer>          objectiveRank =
      newAtt (Integer  .class, "objectiveRank",      NO_DEFAULT, PROBLEM);

   public static final
   Attribute <double[]>         offset =
      newAtt (double[] .class, "offset",                    0.0, BOM_ENTRY,
                                                                 SUBSTITUTE,
                                                                 BOP_ENTRY);

   public static final
   Attribute <String>           operationName =
      newAtt (String   .class, "operationName",      NO_DEFAULT, OPERATION);

   public static final
   Attribute <String>           partName =
      newAtt (String   .class, "partName",           NO_DEFAULT, PART);

   public static final
   Attribute <Boolean>          penExec =
      newAtt (Boolean  .class, "penExec",                 false, PROBLEM);

   public static final
   Attribute <Boolean>          perfPegging =
      newAtt (Boolean  .class, "perfPegging",             false, PROBLEM);

   public static final
   Attribute <int[]>            periodStage =
      newAtt (int[]    .class, "periodStage",                 0, PROBLEM);

   public static final
   Attribute <Boolean>          pgdCritListMode =
      newAtt (Boolean  .class, "pgdCritListMode",         false, PROBLEM);

   public static final
   Attribute <Boolean>          pipExists =
      newAtt (Boolean  .class, "pipExists",        UNMODIFIABLE, PROBLEM);

   public static final
   Attribute <Boolean>          pipSeqFromHeur =
      newAtt (Boolean  .class, "pipSeqFromHeur",          false, PROBLEM);

   public static final
   Attribute <Boolean>          postprocessed =
      newAtt (Boolean  .class, "postprocessed",    UNMODIFIABLE, PROBLEM);

   public static final
   Attribute <Boolean>          prefHighStockSLBs =
      newAtt (Boolean  .class, "prefHighStockSLBs",       false, PROBLEM);

   public static final
   Attribute <Boolean>          preprocessed =
      newAtt (Boolean  .class, "preprocessed",     UNMODIFIABLE, PROBLEM);

   public static final
   Attribute <int[]>            priority =
      newAtt (int[]    .class, "priority",                    0, DEMAND);

   public static final
   Attribute <Double>           probability =
      newAtt (Double   .class, "probability",               1.0, PROBLEM);

   public static final
   Attribute <double[]>         prodVol =
      newAtt (double[] .class, "prodVol",          UNMODIFIABLE, PART);

   public static final
   Attribute <double[]>         productRate =
      newAtt (double[] .class, "productRate",               1.0, BOP_ENTRY);

   public static final
   Attribute <boolean[]>        propRtg =
      newAtt (boolean[].class, "propRtg",                 false, PART,
                                                                 BOM_ENTRY);

   public static final
   Attribute <double[]>         reqVol =
      newAtt (double[] .class, "reqVol",           UNMODIFIABLE, PART);

   public static final
   Attribute <double[]>         residualVol =
      newAtt (double[] .class, "residualVol",      UNMODIFIABLE, PART);

   public static final
   Attribute <Boolean>          respectStockSLBs =
      newAtt (Boolean  .class, "respectStockSLBs",        false, PROBLEM);

   public static final
   Attribute <Boolean>          roundReqVols =
      newAtt (Boolean  .class, "roundReqVols",            false, PROBLEM);

   public static final
   Attribute <double[]>         routingShare =
      newAtt (double[] .class, "routingShare",              1.0, BOM_ENTRY,
                                                                 SUBSTITUTE,
                                                                 BOP_ENTRY);

   public static final
   Attribute <Boolean>          scrapAllowed =
      newAtt (Boolean  .class, "scrapAllowed",             true, PART);

   public static final
   Attribute <double[]>         scrapCost =
      newAtt (double[] .class, "scrapCost",                 0.0, PART);

   public static final
   Attribute <double[]>         scrapVol =
      newAtt (double[] .class, "scrapVol",         UNMODIFIABLE, PART);

   public static final
   Attribute <Double>           searchInc =
      newAtt (Double   .class, "searchInc",                 1.0, DEMAND);

   public static final
   Attribute <Boolean>          selForDel =
      newAtt (Boolean  .class, "selForDel",               false, PART,
                                                                 DEMAND,
                                                                 OPERATION,
                                                                 BOM_ENTRY,
                                                                 SUBSTITUTE,
                                                                 BOP_ENTRY);

   public static final
   Attribute <Boolean>          selSplit =
      newAtt (Boolean  .class, "selSplit",                false, PROBLEM);

   public static final
   Attribute <Boolean>          selectionRecovery =
      newAtt (Boolean  .class, "selectionRecovery",       false, PROBLEM);

   public static final
   Attribute <double[]>         shadowPrice =
      newAtt (double[] .class, "shadowPrice",      UNMODIFIABLE, PART);

   public static final
   Attribute <Boolean>          shipLateAllowed =
      newAtt (Boolean  .class, "shipLateAllowed",          true, DEMAND);

   public static final
   Attribute <int[]>            shipLateUB =
      newAtt (int[]    .class, "shipLateUB",         CALCULATED, DEMAND);

   public static final
   Attribute <double[]>         shipReward =
      newAtt (double[] .class, "shipReward",                0.0, DEMAND);

   public static final
   Attribute <double[]>         shipVol =
      newAtt (double[] .class, "shipVol",                   0.0, DEMAND);

   public static final
   Attribute <Boolean>          singleSource =
      newAtt (Boolean  .class, "singleSource",            false, PART,
                                                                 BOM_ENTRY);

   public static final
   Attribute <Boolean>          skipFailures =
      newAtt (Boolean  .class, "skipFailures",             true, PROBLEM);

   public static final
   Attribute <String>           solverLogFileName =
      newAtt (String   .class, "solverLogFileName","solver.log", PROBLEM);

   public static final
   Attribute <Boolean>          stageByObject =
      newAtt (Boolean  .class, "stageByObject",           false, PROBLEM);

   public static final
   Attribute <Boolean>          stochMode =
      newAtt (Boolean  .class, "stochMode",               false, PROBLEM);

   public static final
   Attribute <Boolean>          stochSolnMode =
      newAtt (Boolean  .class, "stochSolnMode",    UNMODIFIABLE, PROBLEM);

   public static final
   Attribute <BoundSet>         stockBounds =
      newAtt (BoundSet .class, "stockBounds",        CALCULATED, PART);

   public static final
   Attribute <double[]>         stockCost =
      newAtt (double[] .class, "stockCost",                 0.0, PART);

   public static final
   Attribute <Boolean>          stockReallocation =
      newAtt (Boolean  .class, "stockReallocation",       false, PROBLEM);

   public static final
   Attribute <double[]>         stockVol =
      newAtt (double[] .class, "stockVol",         UNMODIFIABLE, PART);

   public static final
   Attribute <double[]>         subCost =
      newAtt (double[] .class, "subCost",                   0.0, SUBSTITUTE);

   public static final
   Attribute <Integer>          subIndex =
      newAtt (Integer  .class, "subIndex",         UNMODIFIABLE, SUBSTITUTE);

   public static final
   Attribute <double[]>         subVol =
      newAtt (double[] .class, "subVol",                    0.0, SUBSTITUTE);

   public static final
   Attribute <double[]>         supplyVol =
      newAtt (double[] .class, "supplyVol",                 0.0, PART);

   public static final
   Attribute <Boolean>          tieBreakPropRt =
      newAtt (Boolean  .class, "tieBreakPropRt",          false, PROBLEM);

   public static final
   Attribute <String>           title =
      newAtt (String   .class, "title",              "Untitled", PROBLEM);

   public static final
   Attribute <Boolean>          truncOffsets =
      newAtt (Boolean  .class, "truncOffsets",            false, PROBLEM);

   public static final
   Attribute <Boolean>          twoLevelLotSizes =
      newAtt (Boolean  .class, "twoLevelLotSizes",        false, OPERATION);

   public static final
   Attribute <Boolean>          twoWayMultiExec =
      newAtt (Boolean  .class, "twoWayMultiExec",         false, PROBLEM);

   public static final
   Attribute <Boolean>          useFocusHorizons =
      newAtt (Boolean  .class, "useFocusHorizons",         true, PROBLEM);

   public static final
   Attribute <Boolean>          userHeurStart =
      newAtt (Boolean  .class, "userHeurStart",           false, PROBLEM);

   public static final
   Attribute <Double>           wbounds =
      newAtt (Double   .class, "wbounds",               10000.0, PROBLEM);

   public static final
   Attribute <double[]>         yieldRate =
      newAtt (double[] .class, "yieldRate",                 1.0, OPERATION);

//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// getAttributes
//
// Return an unmodifiable List of all Attributes in WIT-J.
//------------------------------------------------------------------------------

   public static List <Attribute <?>> getAttributes ()
      {
      try
         {
         notAllowedWhenTerminated ("Attribute.getAttributes");

         return allAttributes;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getValueType ()
//
// Returns the value type of this Attribute.
//------------------------------------------------------------------------------

   public Class <V> getValueType ()
      {
      try
         {
         notAllowedWhenTerminated ("Attribute.getValueType");

         return myValueType;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// appliesTo (theClass)
//
// Returns true, iff this Attribute applies to the Component class indicated by
// theClass (which must not be class Component).
//------------------------------------------------------------------------------

   public boolean appliesTo (Class <? extends Component> theClass)
      {
      try
         {
         CompClassID theCompClassID;

         notAllowedWhenTerminated ("Attribute.appliesTo");

         mustBeNonNull (theClass, "theClass", "Attribute <?>.appliesTo");

         if (theClass == Component.class)
            throw
               new StatusQuoException (
                  "   Attribute.appliesTo (Class) was called "
                +    "where the Class is Component.class.");

         theCompClassID = CompClassID.getInstanceFor (theClass);

         assert (theCompClassID != null);

         return appliesTo (theCompClassID);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// isModifiable ()
//
// Returns true, iff the corresponding set method(s) of class Component can
// validly be invoked for this Attribute.
//------------------------------------------------------------------------------

   public boolean isModifiable ()
      {
      try
         {
         notAllowedWhenTerminated ("Attribute.isModifiable");

         return modifiable;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// isValidFor (theComp)
//
// Returns true, iff this Attribute is valid for a "get" call to theComp in the
// present state.
//------------------------------------------------------------------------------
   
   public boolean isValidFor (Component theComp)
      {
      try
         {
         notAllowedWhenTerminated ("Attribute.isValidFor");

         if (! appliesTo (theComp.getCompClassID ()))
            return false;

         if (reqMaterialPart)
            if (theComp.asPart ().getCategory () != Part.Category.MATERIAL)
               return false;

         if (reqStochMode)
            if (! theComp.getProblem ().get (stochMode))
               return false;

         if (reqMultiObjMode)
            if (! theComp.getProblem ().get (multiObjMode))
               return false;

         if (this == objectStage)
            if (! theComp.getProblem ().get (stageByObject))
               return false;

         if (this == periodStage)
            if (theComp.getProblem ().get (stageByObject))
               return false;

         return true;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// hasDefaultValue ()
//
// Returns true, iff this Attribute has a default value.
//------------------------------------------------------------------------------

   public boolean hasDefaultValue ()
      {
      try
         {
         notAllowedWhenTerminated ("Attribute.hasDefaultValue");

         return haveDefaultValue;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// asAttribute (theValueType)
//
// Returns this Attribute, safely converted to an Attribute <V2>, where V2
// corresponds to theValueType.
//------------------------------------------------------------------------------

  @@SuppressWarnings ("unchecked")

   public <V2> Attribute <V2> asAttribute (Class <V2> theValueType)
      {
      try
         {
         notAllowedWhenTerminated ("Attribute.asAttribute");

         if (theValueType != myValueType)
            throw
               new StatusQuoException (
                  "   Attribute.asAttribute (theValueType) was called, where\n"
                + "   theValueType does not match the value type of the "
                +    "Attribute.\n"
                + "\n"
                + "      Attribute:            " + this + "\n"
                + "      Attribute Value Type: " + myValueType .getSimpleName ()
                + "\n"
                + "      Requested Value Type: "
                +        theValueType.getSimpleName ());

         return (Attribute <V2>) this;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// toString ()
//
// Override from class Object.
//------------------------------------------------------------------------------

   public String toString ()
      {
      try
         {
         notAllowedWhenTerminated ("Attribute.toString");

         return myName;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//==============================================================================
// Package-Internal Static Nested Enum DefaultCase
//
// Indicates which kind of default value an Attribute has.
//==============================================================================

   static enum DefaultCase
   {
      SPECIFIED,
      CALCULATED,
      NO_DEFAULT,
      UNMODIFIABLE,
   }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// appliesTo (theCompClassID)
//
// Returns true, iff this Attribute applies to the Component class identified by
// theCompClassID.
//------------------------------------------------------------------------------

   boolean appliesTo (CompClassID theCompClassID)
      {
      return myApplicableSet.contains (theCompClassID);
      }

//------------------------------------------------------------------------------
// selfTest ()
//
// Does self-test for Attributes.
//------------------------------------------------------------------------------

   static void selfTest ()
      {
      checkAlphaOrder ();
      }

//------------------------------------------------------------------------------
// Accessors
//------------------------------------------------------------------------------

   V getSpecDefValue ()
      {
      assert (hasSpecDefValue ());

      return mySpecDefValue;
      }

   boolean hasSpecDefValue ()
      {
      return (mySpecDefValue != null);
      }

   int getIndex ()
      {
      return myIndex;
      }

//==============================================================================
// Private Constructor
//
// The default value of the Attribute will be a specified value given by
// theDefValue.
//==============================================================================

   private Attribute (
         String        theName,
         Class <V>     theValueType,
         V             theSpecDefValue,
         CompClassID[] theCompClassIDArr)
      {
      assert (theSpecDefValue != null);

      myName           = theName;
      myValueType      = theValueType;
      haveDefaultValue = true;
      mySpecDefValue   = theSpecDefValue;

      myApplicableSet  = newCompClassIDSet (theCompClassIDArr);

      myIndex          = initAttributes.size ();

      modifiable       = true;

      reqMaterialPart  = materialPartAttNames.contains (theName);
      reqStochMode     = stochModeAttNames   .contains (theName);
      reqMultiObjMode  = multiObjModeAttNames.contains (theName);

      initAttributes.add (this);
      }

//==============================================================================
// Private Constructor
//
// theDefaultCase must not be SPECIFIED.
//==============================================================================

   private Attribute (
         String        theName,
         Class <V>     theValueType,
         DefaultCase   theDefaultCase,
         CompClassID[] theCompClassIDArr)
      {
      assert (theDefaultCase != SPECIFIED);

      myName           = theName;
      myValueType      = theValueType;
      haveDefaultValue = (theDefaultCase == CALCULATED);
      mySpecDefValue   = null;

      myApplicableSet  = newCompClassIDSet (theCompClassIDArr);

      myIndex          = initAttributes.size ();

      modifiable       = (theDefaultCase != UNMODIFIABLE);

      reqMaterialPart  = materialPartAttNames.contains (theName);
      reqStochMode     = stochModeAttNames   .contains (theName);
      reqMultiObjMode  = multiObjModeAttNames.contains (theName);

      initAttributes.add (this);
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// newAtt (theValueType, theName, theSpecDefValue, theCompClassIDs)
//
// Creates and returns a new Attribute <V>:
//    theValueType    identifies the value type, V.
//    theName         will be the name of the Attribute.
//    theSpecDefValue will be the specified default value of the Attribute.
//    theCompClassIDs lists the CompClassIDs of the Component classes to which
//                    theAttribute will apply.
//------------------------------------------------------------------------------

   private static <V> Attribute <V> newAtt (
         Class <V>      theValueType,
         String         theName,
         V              theSpecDefValue,
         CompClassID... theCompClassIDs)
      {
      return
         new Attribute <V> (
            theName,
            theValueType,
            theSpecDefValue,
            theCompClassIDs);
      }

//------------------------------------------------------------------------------
// newAtt (...)
//
// Same as newAtt above, but for a specific array type, where theSpecDefValue is
// a scalar of the array type.
//------------------------------------------------------------------------------

   private static Attribute <boolean[]> newAtt (
         Class <boolean[]> theValueType,
         String            theName,
         boolean           theSpecDefValue,
         CompClassID...    theCompClassIDs)
      {
      return
         new Attribute <boolean[]> (
            theName,
            theValueType,
            new boolean[]{theSpecDefValue},
            theCompClassIDs);
      }

   private static Attribute <int[]> newAtt (
         Class <int[]>  theValueType,
         String         theName,
         int            theSpecDefValue,
         CompClassID... theCompClassIDs)
      {
      return
         new Attribute <int[]> (
            theName,
            theValueType,
            new int[]{theSpecDefValue},
            theCompClassIDs);
      }

   private static Attribute <double[]> newAtt (
         Class <double[]> theValueType,
         String           theName,
         double           theSpecDefValue,
         CompClassID...   theCompClassIDs)
      {
      return
         new Attribute <double[]> (
            theName,
            theValueType,
            new double[]{theSpecDefValue},
            theCompClassIDs);
      }

//------------------------------------------------------------------------------
// newAtt (theValueType, theName, theDefaultCase, theCompClassIDs)
//
// Creates and returns a new Attribute <V>:
//    theValueType    identifies the value type, V.
//    theName         will be the name of the Attribute.
//    theDefaultCase  will be the DefaultCase for the Attribute, which must not
//                    be SPECIFIED.
//    theCompClassIDs lists the CompClassIDs of the Component classes to which
//                    theAttribute will apply.
//------------------------------------------------------------------------------

   private static <V> Attribute <V> newAtt (
         Class <V>      theValueType,
         String         theName,
         DefaultCase    theDefaultCase,
         CompClassID... theCompClassIDs)
      {
      return
         new Attribute <V> (
            theName,
            theValueType,
            theDefaultCase,
            theCompClassIDs);
      }

//------------------------------------------------------------------------------
// newCompClassIDSet (theCompClassArr)
//
// Creates and returns an EnumSet whose contents are theCompClassArr.
//------------------------------------------------------------------------------

   private static EnumSet <CompClassID> newCompClassIDSet (
         CompClassID[] theCompClassArr)
      {
      EnumSet <CompClassID> theCompClassIDSet;

      theCompClassIDSet = EnumSet.noneOf (CompClassID.class);

      for (CompClassID theCompClassID: theCompClassArr)
         {
         theCompClassIDSet.add (theCompClassID);
         }

      return theCompClassIDSet;
      }

//------------------------------------------------------------------------------
// checkAlphaOrder ()
//
// Verifies that the Attributes are listed in alphabetical order.
//------------------------------------------------------------------------------

   private static void checkAlphaOrder ()
      {
      String theAttName;
      String prevAttName = null;

      println (
           "\n"
         + "Verifying that the Attributes are listed in alphabetical order.\n");

      for (Attribute <?> theAtt: allAttributes)
         {
         theAttName = theAtt.myName;

         if (prevAttName != null)
            if (theAttName.compareTo (prevAttName) < 0)
               internalError (
                    "   An Attribute was found whose name is alphabetically\n"
                  + "   earlier than that of the preceding Attribute.\n"
                  + "\n"
                  + "      Preceding Attribute: " + prevAttName + "\n"
                  + "      Current   Attribute: " + theAttName);

         prevAttName = theAttName;
         }

      println ("Verified: The Attributes are listed in alphabetical order.");
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// initAttributes
//
// During static initialization, initAttributes is a modifiable ArrayList of the
// Attributes in WIT-J.
// After static initialization, initAttributes is a null pointer.
// (This is done to facilitate thread safety.)
//------------------------------------------------------------------------------

   private static ArrayList <Attribute <?>> initAttributes;

//------------------------------------------------------------------------------
// allAttributes
//
// After static initialization, allAttributes is an unmodifiable List of all of
// the Attributes in WIT-J.
//------------------------------------------------------------------------------

   private static final List <Attribute <?>> allAttributes;

//------------------------------------------------------------------------------
// myName
//
// The name of this Attribute.
//------------------------------------------------------------------------------

   private final String myName;

//------------------------------------------------------------------------------
// myValueType
//
// Indicates the value type of this attribute.
//------------------------------------------------------------------------------

   private final Class <V> myValueType;

//------------------------------------------------------------------------------
// haveDefaultValue
//
// True, iff this Attribute has a default value.
//------------------------------------------------------------------------------

   private final boolean haveDefaultValue;

//------------------------------------------------------------------------------
// mySpecDefValue
//
// If mySpecDefValue != null, this Attribute has a specified default value and
//    mySpecDefValue stores it.
// If mySpecDefValue == null, this Attribute does not have a specified default
//    value.
//------------------------------------------------------------------------------

   private final V mySpecDefValue;

//------------------------------------------------------------------------------
// myApplicableSet
//
// The set of CompClassID identifying the set of Component classes to which
// this Attribute applies.
//------------------------------------------------------------------------------

   private final EnumSet <CompClassID> myApplicableSet;

//------------------------------------------------------------------------------
// myIndex
//
// # Attributes constructed before this one.
//------------------------------------------------------------------------------

   private final int myIndex;

//------------------------------------------------------------------------------
// True, iff the corresponding set method(s) of class Component can validly be
// invoked with this Attribute.
//------------------------------------------------------------------------------

   private final boolean modifiable;

//------------------------------------------------------------------------------
// reqMaterialPart
//
// true, iff this Attribute applies only to Parts of Category MATERIAL.
//------------------------------------------------------------------------------

   private final boolean reqMaterialPart;

//------------------------------------------------------------------------------
// reqStochMode
//
// true, iff this Attribute is valid only in stochastic mode (stochMode == true)
//------------------------------------------------------------------------------

   private final boolean reqStochMode;

//------------------------------------------------------------------------------
// reqMultiObjMode
//
// true, iff this Attribute is valid only in multiple objectives mode
// (multiObjMode == true)
//------------------------------------------------------------------------------

   private final boolean reqMultiObjMode;

//------------------------------------------------------------------------------
// materialPartAttNames
//
// A List of the names of all Attributes that require a material Part.
//------------------------------------------------------------------------------

   private static final HashSet <String> materialPartAttNames;

//------------------------------------------------------------------------------
// stochModeAttNames
//
// A List of the names of all Attributes that require stochastic mode.
//------------------------------------------------------------------------------

   private static final HashSet <String> stochModeAttNames;

//------------------------------------------------------------------------------
// multiObjModeAttNames
//
// A List of the names of all Attributes that require multiple objectives mode.
//------------------------------------------------------------------------------

   private static final HashSet <String> multiObjModeAttNames;

//==============================================================================
// Static initialization block
//==============================================================================

   static
      {
      initAttributes.trimToSize ();

      allAttributes  = Collections.unmodifiableList (initAttributes);

      initAttributes = null;
      }

//==============================================================================
}
@


1.136
log
@setValue ==> set
getValue ==> get
@
text
@a115 8
   Attribute <Boolean>          coinEmbedded =
      newAtt (Boolean  .class, "coinEmbedded",     UNMODIFIABLE, PROBLEM);

   public static final
   Attribute <Boolean>          coinSelected =
      newAtt (Boolean  .class, "coinSelected",       CALCULATED, PROBLEM);

   public static final
a155 4
   Attribute <Boolean>          cplexSelected =
      newAtt (Boolean  .class, "cplexSelected",      CALCULATED, PROBLEM);

   public static final
@


1.135
log
@Reduced heading comments.
@
text
@d769 1
a769 1
// Returns true, iff the corresponding setValue method(s) of class Component can
d791 2
a792 2
// Returns true, iff this Attribute is valid for a "getValue" call to theComp in
// the present state.
d809 1
a809 1
            if (! theComp.getProblem ().getValue (stochMode))
d813 1
a813 1
            if (! theComp.getProblem ().getValue (multiObjMode))
d817 1
a817 1
            if (! theComp.getProblem ().getValue (stageByObject))
d821 1
a821 1
            if (theComp.getProblem ().getValue (stageByObject))
d1275 2
a1276 2
// True, iff the corresponding setValue method(s) of class Component can validly
// be invoked with this Attribute.
@


1.134
log
@Fixed a bug in isValidFor.
@
text
@a3 2
//
// Contains the declaration of generic class Attribute <V>.
@


1.133
log
@DefaultCase
@
text
@d803 24
a826 5
         return
               isValidRegAppliesTo    (theComp)
            && isValidRegMaterial     (theComp)
            && isValidRegStochMode    (theComp)
            && isValidRegMultiObjMode (theComp);
d1002 3
a1004 3
      reqsMaterialPart = materialPartAttNames.contains (theName);
      reqsStochMode    = stochModeAttNames   .contains (theName);
      reqsMultiObjMode = multiObjModeAttNames.contains (theName);
d1034 3
a1036 3
      reqsMaterialPart = materialPartAttNames.contains (theName);
      reqsStochMode    = stochModeAttNames   .contains (theName);
      reqsMultiObjMode = multiObjModeAttNames.contains (theName);
a1199 64
//------------------------------------------------------------------------------
// isValidRegAppliesTo (Component theComp)
//
// Returns true, iff this Attribute is valid for theComp regarding appliesTo.
//------------------------------------------------------------------------------

   private boolean isValidRegAppliesTo (Component theComp)
      {
      return appliesTo (theComp.getCompClassID ());
      }

//------------------------------------------------------------------------------
// isValidRegMaterial (Component theComp)
//
// Returns true, iff this Attribute is valid for theComp regarding a material
// part requirement.
//------------------------------------------------------------------------------

   private boolean isValidRegMaterial (Component theComp)
      {
      Part thePart;

      if (! reqsMaterialPart)
         return true;

      if (! (theComp instanceof Part))
         return false;

      thePart = (Part) theComp;

      return (thePart.getCategory () == Part.Category.MATERIAL);
      }

//------------------------------------------------------------------------------
// isValidRegStochMode (Component theComp)
//
// Returns true, iff this Attribute is valid for theComp regarding stochastic
// mode.
//------------------------------------------------------------------------------

   private boolean isValidRegStochMode (Component theComp)
      {
      if (! reqsStochMode)
         return true;

      return theComp.getCoordinator ().getProblem ().getValue (stochMode);
      }

//------------------------------------------------------------------------------
// isValidRegMultiObjMode (Component theComp)
//
// Returns true, iff this Attribute is valid for theComp regarding multiple
// objectives mode.
//------------------------------------------------------------------------------

   private boolean isValidRegMultiObjMode (Component theComp)
      {
      if (! reqsMultiObjMode)
         return true;

      return
         theComp.getCoordinator ().getProblem ().getValue (multiObjMode);
      }

d1284 1
a1284 1
// reqsMaterialPart
d1289 1
a1289 1
   private final boolean reqsMaterialPart;
d1292 1
a1292 1
// reqsStochMode
d1297 1
a1297 1
   private final boolean reqsStochMode;
d1300 1
a1300 1
// reqsMultiObjMode
d1306 1
a1306 1
   private final boolean reqsMultiObjMode;
@


1.132
log
@DefaultCase
@
text
@a10 1
import static com.ibm.witj.DefaultCase.*;
d12 1
d896 14
@


1.131
log
@DefaultCase
@
text
@d828 1
a828 7
         if (myDefaultCase == SPECIFIED)
            return true;

         if (myDefaultCase == CALCULATED)
            return true;

         return false;
d926 1
a926 1
   DefaultCase getDefaultCase ()
d928 3
a930 1
      return myDefaultCase;
d933 1
a933 1
   V getSpecDefValue ()
d935 1
a935 3
      assert (myDefaultCase == SPECIFIED);

      return mySpecDefValue;
d956 2
d960 1
a960 1
      myDefaultCase    = SPECIFIED;
d992 1
a992 1
      myDefaultCase    = theDefaultCase;
d1272 1
a1272 1
// myDefaultCase
d1274 1
a1274 1
// Indicates which kind of default value this Attribute has.
d1277 1
a1277 1
   private final DefaultCase myDefaultCase;
d1282 4
a1285 2
// If myDefaultCase == SPECIFIED, mySpecDefValue stores the specified
// default value for this Attribute. Otherwise mySpecDefValue is null.
@


1.130
log
@DefaultCase == CALCULATED
@
text
@a36 8
      modifiableAttNames =
         newHashSet (
            "currentObjective",
            "demandName",
            "objectiveRank",
            "operationName",
            "partName");

d79 1
a79 1
      newAtt (Boolean  .class, "accelerated",        NO_DEFAULT, PROBLEM);
d91 1
a91 1
      newAtt (Integer  .class, "bomIndex",           NO_DEFAULT, BOM_ENTRY);
d95 1
a95 1
      newAtt (Integer  .class, "bopIndex",           NO_DEFAULT, BOP_ENTRY);
d103 1
a103 1
      newAtt (Double   .class, "boundsValue",        NO_DEFAULT, PROBLEM);
d119 1
a119 1
      newAtt (Boolean  .class, "coinEmbedded",       NO_DEFAULT, PROBLEM);
d139 1
a139 1
      newAtt (double[] .class, "consVol",            NO_DEFAULT, PART);
d143 1
a143 1
      newAtt (Boolean  .class, "cplexEmbedded",      NO_DEFAULT, PROBLEM);
d147 1
a147 1
      newAtt (Double   .class, "cplexMipBound",      NO_DEFAULT, PROBLEM);
d151 1
a151 1
      newAtt (Double   .class, "cplexMipRelGap",     NO_DEFAULT, PROBLEM);
d171 1
a171 1
      newAtt (Integer  .class, "cplexStatusCode",    NO_DEFAULT, PROBLEM);
d175 1
a175 1
      newAtt (String   .class, "cplexStatusText",    NO_DEFAULT, PROBLEM);
d213 1
a213 1
      newAtt (double[] .class, "excessVol",          NO_DEFAULT, PART);
d239 1
a239 1
      newAtt (boolean[].class, "executable",         NO_DEFAULT, OPERATION);
d260 1
a260 1
      newAtt (Boolean  .class, "extOptActive",       NO_DEFAULT, PROBLEM);
d269 1
a269 1
      newAtt (Boolean  .class, "feasible",           NO_DEFAULT, PROBLEM);
d277 1
a277 1
      newAtt (double[] .class, "focusShortageVol",   NO_DEFAULT, PART);
d285 1
a285 1
      newAtt (double[] .class, "fssExecVol",         NO_DEFAULT, OPERATION);
d293 1
a293 1
      newAtt (double[] .class, "fssSubVol",          NO_DEFAULT, SUBSTITUTE);
d297 1
a297 1
      newAtt (Boolean  .class, "heurAllocActive",    NO_DEFAULT, PROBLEM);
d305 1
a305 1
      newAtt (int[]    .class, "impactPeriod",       NO_DEFAULT, BOM_ENTRY,
d377 1
a377 1
      newAtt (double[] .class, "mrpConsVol",         NO_DEFAULT, PART);
d381 1
a381 1
      newAtt (double[] .class, "mrpExcessVol",       NO_DEFAULT, PART);
d385 1
a385 1
      newAtt (double[] .class, "mrpExecVol",         NO_DEFAULT, OPERATION);
d393 1
a393 1
      newAtt (double[] .class, "mrpResidualVol",     NO_DEFAULT, PART);
d397 1
a397 1
      newAtt (double[] .class, "mrpSubVol",          NO_DEFAULT, SUBSTITUTE);
d433 1
a433 1
      newAtt (Double   .class, "objValue",           NO_DEFAULT, PROBLEM);
d479 1
a479 1
      newAtt (Boolean  .class, "pipExists",          NO_DEFAULT, PROBLEM);
d487 1
a487 1
      newAtt (Boolean  .class, "postprocessed",      NO_DEFAULT, PROBLEM);
d495 1
a495 1
      newAtt (Boolean  .class, "preprocessed",       NO_DEFAULT, PROBLEM);
d507 1
a507 1
      newAtt (double[] .class, "prodVol",            NO_DEFAULT, PART);
d520 1
a520 1
      newAtt (double[] .class, "reqVol",             NO_DEFAULT, PART);
d524 1
a524 1
      newAtt (double[] .class, "residualVol",        NO_DEFAULT, PART);
d550 1
a550 1
      newAtt (double[] .class, "scrapVol",           NO_DEFAULT, PART);
d575 1
a575 1
      newAtt (double[] .class, "shadowPrice",        NO_DEFAULT, PART);
d616 1
a616 1
      newAtt (Boolean  .class, "stochSolnMode",      NO_DEFAULT, PROBLEM);
d632 1
a632 1
      newAtt (double[] .class, "stockVol",           NO_DEFAULT, PART);
d640 1
a640 1
      newAtt (Integer  .class, "subIndex",           NO_DEFAULT, SUBSTITUTE);
d828 7
a834 1
         return (myDefaultCase != NO_DEFAULT);
d994 4
a997 4
      myName          = theName;
      myValueType     = theValueType;
      myDefaultCase   = theDefaultCase;
      mySpecDefValue  = null;
d999 1
a999 1
      myApplicableSet = newCompClassIDSet (theCompClassIDArr);
d1001 1
a1001 1
      myIndex         = initAttributes.size ();
d1003 1
a1003 6
      if (theDefaultCase == NO_DEFAULT)
         {
         modifiable = modifiableAttNames.contains (theName);
         }
      else
         modifiable = true;
a1341 10
// modifiableAttNames
//
// The set of the names of all modifiable Attributes whose DefaultCase is not
// SPECIFIED.
// Used for initializing the modifiable field.
//------------------------------------------------------------------------------

   private static final HashSet <String> modifiableAttNames;

//------------------------------------------------------------------------------
@


1.129
log
@Revised the default values for coinSelected and cplexSelected.
@
text
@d115 1
a115 1
      newAtt (int[]    .class, "buildAheadUB",      LAST_PERIOD, PART);
d187 1
a187 1
      newAtt (BoundSet .class, "cumShipBounds",       BOUND_SET, DEMAND);
d225 1
a225 1
      newAtt (BoundSet .class, "execBounds",          BOUND_SET, OPERATION);
d343 1
a343 1
      newAtt (Integer  .class, "latestPeriod",      LAST_PERIOD, BOM_ENTRY,
d349 1
a349 1
      newAtt (int[]    .class, "leadTimeUB",        LAST_PERIOD, DEMAND);
d591 1
a591 1
      newAtt (int[]    .class, "shipLateUB",        LAST_PERIOD, DEMAND);
d628 1
a628 1
      newAtt (BoundSet .class, "stockBounds",         BOUND_SET, PART);
d939 1
a939 1
   V getDefaultValue ()
d941 1
a941 1
      assert (myDefaultCase == SPECIFIC_VALUE);
d943 1
a943 1
      return myDefaultValue;
d954 1
a954 1
// The default value of the Attribute will be a specific value given by
d961 1
a961 1
         V             theDefaultValue,
d966 2
a967 2
      myDefaultCase    = SPECIFIC_VALUE;
      myDefaultValue   = theDefaultValue;
d985 1
a985 1
// theDefaultCase must not be SPECIFIC_VALUE.
d994 1
a994 1
      assert (theDefaultCase != SPECIFIC_VALUE);
d999 1
a999 1
      myDefaultValue  = null;
d1024 1
a1024 1
// newAtt (theValueType, theName, theDefaultValue, theCompClassIDs)
d1029 1
a1029 2
//    theDefaultValue will be the default value of the Attribute (a specific
//                    value)
d1037 1
a1037 1
         V              theDefaultValue,
d1044 1
a1044 1
            theDefaultValue,
d1051 1
a1051 1
// Same as newAtt above, but for a specific array type, where theDefaultValue is
d1058 1
a1058 1
         boolean           theDefaultValue,
d1065 1
a1065 1
            new boolean[]{theDefaultValue},
d1072 1
a1072 1
         int            theDefaultValue,
d1079 1
a1079 1
            new int[]{theDefaultValue},
d1086 1
a1086 1
         double           theDefaultValue,
d1093 1
a1093 1
            new double[]{theDefaultValue},
d1104 1
a1104 1
//                    be SPECIFIC_VALUE.
d1291 1
a1291 1
// myDefaultValue
d1293 2
a1294 2
// If myDefaultCase == SPECIFIC_VALUE, myDefaultValue stores the default value
// for this Attribute. Otherwise myDefaultValue is null.
d1297 1
a1297 1
   private final V myDefaultValue;
d1352 1
a1352 1
// SPECIFIC_VALUE.
@


1.128
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@d131 1
a131 1
      newAtt (Boolean  .class, "coinSelected",            true,  PROBLEM);
d175 1
a175 1
      newAtt (Boolean  .class, "cplexSelected",           false, PROBLEM);
@


1.127
log
@CPLEX
@
text
@d79 1
a79 1
      newAtt (Boolean  .class, "accAfterOptImp",          false, GLOBAL_ASPECT);
d83 1
a83 1
      newAtt (Boolean  .class, "accAfterSoftLB",          false, GLOBAL_ASPECT);
d87 1
a87 1
      newAtt (Boolean  .class, "accelerated",        NO_DEFAULT, GLOBAL_ASPECT);
d95 1
a95 1
      newAtt (Boolean  .class, "autoPriority",            false, GLOBAL_ASPECT);
d111 1
a111 1
      newAtt (Double   .class, "boundsValue",        NO_DEFAULT, GLOBAL_ASPECT);
d127 1
a127 1
      newAtt (Boolean  .class, "coinEmbedded",       NO_DEFAULT, GLOBAL_ASPECT);
d131 1
a131 1
      newAtt (Boolean  .class, "coinSelected",            true,  GLOBAL_ASPECT);
d135 1
a135 1
      newAtt (Boolean  .class, "compPrices",              false, GLOBAL_ASPECT);
d139 1
a139 1
      newAtt (Boolean  .class, "computeCriticalList",     false, GLOBAL_ASPECT);
d151 1
a151 1
      newAtt (Boolean  .class, "cplexEmbedded",      NO_DEFAULT, GLOBAL_ASPECT);
d155 1
a155 1
      newAtt (Double   .class, "cplexMipBound",      NO_DEFAULT, GLOBAL_ASPECT);
d159 1
a159 1
      newAtt (Double   .class, "cplexMipRelGap",     NO_DEFAULT, GLOBAL_ASPECT);
d163 1
a163 1
      newAtt (Double   .class, "cplexParSpecDblVal",        0.0, GLOBAL_ASPECT);
d167 1
a167 1
      newAtt (Integer  .class, "cplexParSpecIntVal",          0, GLOBAL_ASPECT);
d171 1
a171 1
      newAtt (String   .class, "cplexParSpecName",   "NO_PARAM", GLOBAL_ASPECT);
d175 1
a175 1
      newAtt (Boolean  .class, "cplexSelected",           false, GLOBAL_ASPECT);
d179 1
a179 1
      newAtt (Integer  .class, "cplexStatusCode",    NO_DEFAULT, GLOBAL_ASPECT);
d183 1
a183 1
      newAtt (String   .class, "cplexStatusText",    NO_DEFAULT, GLOBAL_ASPECT);
d195 1
a195 1
      newAtt (String   .class, "currentObjective",   NO_DEFAULT, GLOBAL_ASPECT);
d199 1
a199 1
      newAtt (Integer  .class, "currentScenario",             0, GLOBAL_ASPECT);
d217 1
a217 1
      newAtt (Integer  .class, "equitability",                1, GLOBAL_ASPECT);
d233 1
a233 1
      newAtt (Boolean  .class, "execEmptyBom",             true, GLOBAL_ASPECT);
d260 1
a260 1
      newAtt (Double   .class, "expCutoff",                0.01, GLOBAL_ASPECT);
d268 1
a268 1
      newAtt (Boolean  .class, "extOptActive",       NO_DEFAULT, GLOBAL_ASPECT);
d277 1
a277 1
      newAtt (Boolean  .class, "feasible",           NO_DEFAULT, GLOBAL_ASPECT);
d289 1
a289 1
      newAtt (Boolean  .class, "forcedMultiEq",           false, GLOBAL_ASPECT);
d305 1
a305 1
      newAtt (Boolean  .class, "heurAllocActive",    NO_DEFAULT, GLOBAL_ASPECT);
d309 1
a309 1
      newAtt (Boolean  .class, "highPrecisionWD",         false, GLOBAL_ASPECT);
d327 1
a327 1
      newAtt (Boolean  .class, "independentOffsets",      false, GLOBAL_ASPECT);
d357 1
a357 1
      newAtt (Double   .class, "lotSizeTol",            0.00001, GLOBAL_ASPECT);
d373 1
a373 1
      newAtt (Boolean  .class, "minimalExcess",           false, GLOBAL_ASPECT);
d377 1
a377 1
      newAtt (Boolean  .class, "mipMode",                 false, GLOBAL_ASPECT);
d381 1
a381 1
      newAtt (Boolean  .class, "modHeurAlloc",            false, GLOBAL_ASPECT);
d409 1
a409 1
      newAtt (Boolean  .class, "multiExec",               false, GLOBAL_ASPECT);
d413 1
a413 1
      newAtt (Boolean  .class, "multiObjMode",            false, GLOBAL_ASPECT);
d417 1
a417 1
      newAtt (Double   .class, "multiObjTol",             1.e-7, GLOBAL_ASPECT);
d421 1
a421 1
      newAtt (Boolean  .class, "multiRoute",              false, GLOBAL_ASPECT);
d425 1
a425 1
      newAtt (Integer  .class, "nPeriods",                   26, GLOBAL_ASPECT);
d429 1
a429 1
      newAtt (Integer  .class, "nScenarios",                  1, GLOBAL_ASPECT);
d437 1
a437 1
      newAtt (Boolean  .class, "nstnResidual",            false, GLOBAL_ASPECT);
d441 1
a441 1
      newAtt (Double   .class, "objValue",           NO_DEFAULT, GLOBAL_ASPECT);
d449 1
a449 1
      newAtt (String   .class, "objectiveListSpec",   "Default", GLOBAL_ASPECT);
d453 1
a453 1
      newAtt (Integer  .class, "objectiveRank",      NO_DEFAULT, GLOBAL_ASPECT);
d471 1
a471 1
      newAtt (Boolean  .class, "penExec",                 false, GLOBAL_ASPECT);
d475 1
a475 1
      newAtt (Boolean  .class, "perfPegging",             false, GLOBAL_ASPECT);
d479 1
a479 1
      newAtt (int[]    .class, "periodStage",                 0, GLOBAL_ASPECT);
d483 1
a483 1
      newAtt (Boolean  .class, "pgdCritListMode",         false, GLOBAL_ASPECT);
d487 1
a487 1
      newAtt (Boolean  .class, "pipExists",          NO_DEFAULT, GLOBAL_ASPECT);
d491 1
a491 1
      newAtt (Boolean  .class, "pipSeqFromHeur",          false, GLOBAL_ASPECT);
d495 1
a495 1
      newAtt (Boolean  .class, "postprocessed",      NO_DEFAULT, GLOBAL_ASPECT);
d499 1
a499 1
      newAtt (Boolean  .class, "prefHighStockSLBs",       false, GLOBAL_ASPECT);
d503 1
a503 1
      newAtt (Boolean  .class, "preprocessed",       NO_DEFAULT, GLOBAL_ASPECT);
d511 1
a511 1
      newAtt (Double   .class, "probability",               1.0, GLOBAL_ASPECT);
d536 1
a536 1
      newAtt (Boolean  .class, "respectStockSLBs",        false, GLOBAL_ASPECT);
d540 1
a540 1
      newAtt (Boolean  .class, "roundReqVols",            false, GLOBAL_ASPECT);
d575 1
a575 1
      newAtt (Boolean  .class, "selSplit",                false, GLOBAL_ASPECT);
d579 1
a579 1
      newAtt (Boolean  .class, "selectionRecovery",       false, GLOBAL_ASPECT);
d608 1
a608 1
      newAtt (Boolean  .class, "skipFailures",             true, GLOBAL_ASPECT);
d612 1
a612 1
      newAtt (String   .class, "solverLogFileName","solver.log", GLOBAL_ASPECT);
d616 1
a616 1
      newAtt (Boolean  .class, "stageByObject",           false, GLOBAL_ASPECT);
d620 1
a620 1
      newAtt (Boolean  .class, "stochMode",               false, GLOBAL_ASPECT);
d624 1
a624 1
      newAtt (Boolean  .class, "stochSolnMode",      NO_DEFAULT, GLOBAL_ASPECT);
d636 1
a636 1
      newAtt (Boolean  .class, "stockReallocation",       false, GLOBAL_ASPECT);
d660 1
a660 1
      newAtt (Boolean  .class, "tieBreakPropRt",          false, GLOBAL_ASPECT);
d664 1
a664 1
      newAtt (String   .class, "title",              "Untitled", GLOBAL_ASPECT);
d668 1
a668 1
      newAtt (Boolean  .class, "truncOffsets",            false, GLOBAL_ASPECT);
d676 1
a676 1
      newAtt (Boolean  .class, "twoWayMultiExec",         false, GLOBAL_ASPECT);
d680 1
a680 1
      newAtt (Boolean  .class, "useFocusHorizons",         true, GLOBAL_ASPECT);
d684 1
a684 1
      newAtt (Boolean  .class, "userHeurStart",           false, GLOBAL_ASPECT);
d688 1
a688 1
      newAtt (Double   .class, "wbounds",               10000.0, GLOBAL_ASPECT);
d1224 1
a1224 1
      return theComp.getCoordinator ().getGlobalAspect ().getValue (stochMode);
d1240 1
a1240 1
         theComp.getCoordinator ().getGlobalAspect ().getValue (multiObjMode);
@


1.126
log
@CPLEX
@
text
@d154 6
a159 2
   Attribute <Double>           cplexObjBound =
      newAtt (Double   .class, "cplexObjBound",      NO_DEFAULT, GLOBAL_ASPECT);
@


1.125
log
@CPLEX
@
text
@d154 16
d171 9
a179 1
      newAtt (Boolean  .class, "cplexSelected",          false,  GLOBAL_ASPECT);
@


1.124
log
@Modifiable Heuristic Allocation
@
text
@d126 8
a144 1

d150 8
@


1.123
log
@Lead Time Bounds
@
text
@d337 4
@


1.122
log
@Selection Recovery
@
text
@d106 4
d305 4
@


1.121
log
@Multi-Obj Mode
@
text
@d523 4
@


1.120
log
@Multi-Obj Mode
@
text
@d66 1
d361 4
@


1.119
log
@Multi-Obj Mode
@
text
@d39 1
d41 1
d66 2
a67 1
            "objectiveListSpec");
d147 1
a147 1
      newAtt (String   .class, "currentObjective",   "Default",  GLOBAL_ASPECT);
d389 5
a393 1
      newAtt (String   .class, "objectiveListSpec",  "Default",  GLOBAL_ASPECT);
@


1.118
log
@Multi-Obj Mode
@
text
@d63 1
d143 4
@


1.117
log
@Multi-Obj Mode
@
text
@d29 1
a29 1
// Static initialization blocks
d34 2
a35 53
      initAttributes = new ArrayList <Attribute <?>> (200);
      }

   static
      {
      HashSet <String> theNames;
      
      theNames = new HashSet <String> ();

      theNames.add ("demandName");
      theNames.add ("operationName");
      theNames.add ("partName");

      modifiableAttNames = theNames;
      }

   static
      {
      HashSet <String> theNames;
      
      theNames = new HashSet <String> ();

      theNames.add ("asapPipOrder");
      theNames.add ("buildAheadUB");
      theNames.add ("buildAsap");
      theNames.add ("buildNstn");
      theNames.add ("stockBounds");
      theNames.add ("stockCost");
      theNames.add ("stockVol");

      materialPartAttNames = theNames;
      }

   static
      {
      HashSet <String> theNames;
      
      theNames = new HashSet <String> ();

      theNames.add ("currentScenario");
      theNames.add ("objectStage");
      theNames.add ("periodStage");
      theNames.add ("probability");
      theNames.add ("stochSolnMode");

      stochModeAttNames = theNames;
      }

   static
      {
      HashSet <String> theNames;
      
      theNames = new HashSet <String> ();
d37 27
a63 1
      multiObjModeAttNames = theNames;
@


1.116
log
@Multi-Obj Mode.
@
text
@d404 3
@


1.115
log
@Minor revision.
@
text
@d82 9
d373 4
d757 5
a761 34
         if (! appliesTo (theComp.getCompClassID ()))
            {
            return false;
            }

         if (reqsMaterialPart)
            {
            Part thePart;

            thePart = (Part) theComp;

            if (thePart.getCategory () != Part.Category.MATERIAL)
               {
               return false;
               }
            }

         if (reqsStochMode)
            {
            boolean stochModeVal;

            stochModeVal = 
               theComp.
                  getCoordinator ().
                     getGlobalAspect ().
                        getValue (stochMode);

            if (! stochModeVal)
               {
               return false;
               }
            }

         return true;
d923 1
d960 1
d1125 64
d1287 9
d1321 8
@


1.114
log
@Revised a comment.
@
text
@d696 1
a696 1
         theCompClassID = CompClassID.getInstance (theClass);
@


1.113
log
@Replaced Attribute methods requiresStochMode and requiresMaterialPart
with isValidFor.
@
text
@d734 2
a735 2
// Returns true, iff the is valid for a "getValue" call for theComp in the
// present state.
@


1.112
log
@Added a comment.
@
text
@d732 1
a732 1
// requiresMaterialPart ()
d734 2
a735 1
// Returns true, iff this Attribute applies only to Parts of Category MATERIAL.
d737 2
a738 2

   public boolean requiresMaterialPart ()
d742 1
a742 17
         notAllowedWhenTerminated ("Attribute.requiresMaterialPart");

         return requiringMaterialPart;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// requiresStochMode ()
//
// Returns true, iff this Attribute is valid only in stochastic mode
// (stochMode == true).
//------------------------------------------------------------------------------
d744 32
a775 5
   public boolean requiresStochMode ()
      {
      try
         {
         notAllowedWhenTerminated ("Attribute.requiresStochMode");
d777 1
a777 1
         return requiringStochMode;
d926 4
a929 4
      myName                = theName;
      myValueType           = theValueType;
      myDefaultCase         = SPECIFIC_VALUE;
      myDefaultValue        = theDefaultValue;
d931 1
a931 1
      myApplicableSet       = newCompClassIDSet (theCompClassIDArr);
d933 1
a933 1
      myIndex               = initAttributes.size ();
d935 1
a935 1
      modifiable            = true;
d937 2
a938 2
      requiringMaterialPart = materialPartAttNames.contains (theName);
      requiringStochMode    = stochModeAttNames   .contains (theName);
d973 2
a974 2
      requiringMaterialPart = materialPartAttNames.contains (theName);
      requiringStochMode    = stochModeAttNames   .contains (theName);
d1221 1
a1221 1
// requiringMaterialPart
d1226 1
a1226 1
   private final boolean requiringMaterialPart;
d1229 1
a1229 1
// requiringStochMode
d1234 1
a1234 1
   private final boolean requiringStochMode;
@


1.111
log
@Made the following fields of class Attribute final:

   modifiable
   requiringMaterialPart
   requiringStochMode
@
text
@d23 1
@


1.110
log
@Made Attibute.allAttributes more transparently thread-safe.
@
text
@d28 1
a28 1
// Static initialization block
d36 45
d721 1
a721 1
         return thisIsModifiable;
d742 1
a742 1
         return thisRequiresMaterialPart;
d764 1
a764 1
         return thisRequiresStochMode;
d913 4
a916 4
      myName           = theName;
      myValueType      = theValueType;
      myDefaultCase    = SPECIFIC_VALUE;
      myDefaultValue   = theDefaultValue;
d918 1
a918 1
      myApplicableSet  = newCompClassIDSet (theCompClassIDArr);
d920 1
a920 1
      myIndex          = initAttributes.size ();
d922 4
a925 1
      thisIsModifiable = true;
d944 4
a947 4
      myName           = theName;
      myValueType      = theValueType;
      myDefaultCase    = theDefaultCase;
      myDefaultValue   = null;
d949 1
a949 1
      myApplicableSet  = newCompClassIDSet (theCompClassIDArr);
d951 1
a951 1
      myIndex          = initAttributes.size ();
d953 9
a961 1
      thisIsModifiable = (theDefaultCase != NO_DEFAULT);
a1125 47
//------------------------------------------------------------------------------
// overrideModifiable ()
//
// Sets the the value of the thisIsModifiable field of the Attributes for which
// the correct value is different from the value given in the ctor.
//------------------------------------------------------------------------------

   private static void overrideModifiable ()
      {
      demandName   .thisIsModifiable = true;
      operationName.thisIsModifiable = true;
      partName     .thisIsModifiable = true;
      }

//------------------------------------------------------------------------------
// defMaterialPartAtts ()
//
// Sets the thisRequiresMaterialPart field to true, for the appropriate
// Attributes.
//------------------------------------------------------------------------------

   private static void defMaterialPartAtts ()
      {
      asapPipOrder.thisRequiresMaterialPart = true;
      buildAheadUB.thisRequiresMaterialPart = true;
      buildAsap   .thisRequiresMaterialPart = true;
      buildNstn   .thisRequiresMaterialPart = true;
      stockBounds .thisRequiresMaterialPart = true;
      stockCost   .thisRequiresMaterialPart = true;
      stockVol    .thisRequiresMaterialPart = true;
      }

//------------------------------------------------------------------------------
// defStochModeAtts ()
//
// Sets the thisRequiresStochMode field to true, for the appropriate Attributes.
//------------------------------------------------------------------------------

   private static void defStochModeAtts ()
      {
      currentScenario.thisRequiresStochMode = true;
      objectStage    .thisRequiresStochMode = true;
      periodStage    .thisRequiresStochMode = true;
      probability    .thisRequiresStochMode = true;
      stochSolnMode  .thisRequiresStochMode = true;
      }

d1205 1
a1205 1
   private boolean thisIsModifiable;
d1208 1
a1208 1
// thisRequiresMaterialPart
d1213 1
a1213 1
   private boolean thisRequiresMaterialPart = false;
d1216 1
a1216 1
// thisRequiresStochMode
d1221 19
a1239 1
   private boolean thisRequiresStochMode = false;
d1241 7
a1259 4

      overrideModifiable  ();
      defMaterialPartAtts ();
      defStochModeAtts    ();
@


1.109
log
@Removed the hashCode from class Attribute <V>.
@
text
@d33 1
a33 1
      allAttributes = new ArrayList <Attribute <?>> (200);
d597 1
a597 1
         return Collections.unmodifiableList (allAttributes);
d875 1
a875 1
      myIndex          = allAttributes.size ();
d879 1
a879 1
      allAttributes.add (this);
d903 1
a903 1
      myIndex          = allAttributes.size ();
d907 1
a907 1
      allAttributes.add (this);
d1122 11
d1135 2
a1136 1
// An ArrayList of all of the Attributes in WIT-J.
d1139 1
a1139 1
   private static final ArrayList <Attribute <?>> allAttributes;
d1221 5
a1225 1
      allAttributes.trimToSize ();
@


1.108
log
@Replaced public accessor methods for the Attributes with piublic fields.
@
text
@a786 21
// hashCode ()
//
// Override from class Object.
//------------------------------------------------------------------------------

   public int hashCode ()
      {
      try
         {
         notAllowedWhenTerminated ("Attribute.hashCode");

         return myIndex;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
a1174 1
// Used as the hashCode for this class.
@


1.107
log
@Removed enum AttID.
@
text
@d37 3
a39 1
// Attribute Accessors
d42 7
a48 387
   public static    Attribute <Boolean>   accAfterOptImp ()
      {   return                          accAfterOptImp;
      }
   public static    Attribute <Boolean>   accAfterSoftLB ()
      {   return                          accAfterSoftLB;
      }
   public static    Attribute <Boolean>   accelerated ()
      {   return                          accelerated;
      }
   public static    Attribute <Boolean>   asapPipOrder ()
      {   return                          asapPipOrder;
      }
   public static    Attribute <Boolean>   autoPriority ()
      {   return                          autoPriority;
      }
   public static    Attribute <Integer>   bomIndex ()
      {   return                          bomIndex;
      }
   public static    Attribute <Integer>   bopIndex ()
      {   return                          bopIndex;
      }
   public static    Attribute <Double>    boundsValue ()
      {   return                          boundsValue;
      }
   public static    Attribute <int[]>     buildAheadUB ()
      {   return                          buildAheadUB;
      }
   public static    Attribute <Boolean>   buildAsap ()
      {   return                          buildAsap;
      }
   public static    Attribute <Boolean>   buildNstn ()
      {   return                          buildNstn;
      }
   public static    Attribute <Boolean>   compPrices ()
      {   return                          compPrices;
      }
   public static    Attribute <Boolean>   computeCriticalList ()
      {   return                          computeCriticalList;
      }
   public static    Attribute <double[]>  consRate ()
      {   return                          consRate;
      }
   public static    Attribute <double[]>  consVol ()
      {   return                          consVol;
      }
   public static    Attribute <BoundSet>  cumShipBounds ()
      {   return                          cumShipBounds;
      }
   public static    Attribute <double[]>  cumShipReward ()
      {   return                          cumShipReward;
      }
   public static    Attribute <Integer>   currentScenario ()
      {   return                          currentScenario;
      }
   public static    Attribute <String>    demandName ()
      {   return                          demandName;
      }
   public static    Attribute <double[]>  demandVol ()
      {   return                          demandVol;
      }
   public static    Attribute <Integer>   earliestPeriod ()
      {   return                          earliestPeriod;
      }
   public static    Attribute <Integer>   equitability ()
      {   return                          equitability;
      }
   public static    Attribute <double[]>  excessVol ()
      {   return                          excessVol;
      }
   public static    Attribute <BoundSet>  execBounds ()
      {   return                          execBounds;
      }
   public static    Attribute <double[]>  execCost ()
      {   return                          execCost;
      }
   public static    Attribute <Boolean>   execEmptyBom ()
      {   return                          execEmptyBom;
      }
   public static    Attribute <Double>    execPenalty ()
      {   return                          execPenalty;
      }
   public static    Attribute <double[]>  execVol ()
      {   return                          execVol;
      }
   public static    Attribute <boolean[]> executable ()
      {   return                          executable;
      }
   public static    Attribute <Boolean>   expAllowed ()
      {   return                          expAllowed;
      }
   public static    Attribute <Double>    expAversion ()
      {   return                          expAversion;
      }
   public static    Attribute <Double>    expCutoff ()
      {   return                          expCutoff;
      }
   public static    Attribute <Double>    expNetAversion ()
      {   return                          expNetAversion;
      }
   public static    Attribute <Boolean>   extOptActive ()
      {   return                          extOptActive;
      }
   public static    Attribute <Double>    falloutRate ()
      {   return                          falloutRate;
      }
   public static    Attribute <Boolean>   feasible ()
      {   return                          feasible;
      }
   public static    Attribute <Integer>   focusHorizon ()
      {   return                          focusHorizon;
      }
   public static    Attribute <double[]>  focusShortageVol ()
      {   return                          focusShortageVol;
      }
   public static    Attribute <Boolean>   forcedMultiEq ()
      {   return                          forcedMultiEq;
      }
   public static    Attribute <double[]>  fssExecVol ()
      {   return                          fssExecVol;
      }
   public static    Attribute <double[]>  fssShipVol ()
      {   return                          fssShipVol;
      }
   public static    Attribute <double[]>  fssSubVol ()
      {   return                          fssSubVol;
      }
   public static    Attribute <Boolean>   heurAllocActive ()
      {   return                          heurAllocActive;
      }
   public static    Attribute <Boolean>   highPrecisionWD ()
      {   return                          highPrecisionWD;
      }
   public static    Attribute <int[]>     impactPeriod ()
      {   return                          impactPeriod;
      }
   public static    Attribute <double[]>  incLotSize ()
      {   return                          incLotSize;
      }
   public static    Attribute <double[]>  incLotSize2 ()
      {   return                          incLotSize2;
      }
   public static    Attribute <Boolean>   independentOffsets ()
      {   return                          independentOffsets;
      }
   public static    Attribute <Boolean>   intExecVols ()
      {   return                          intExecVols;
      }
   public static    Attribute <Boolean>   intShipVols ()
      {   return                          intShipVols;
      }
   public static    Attribute <Boolean>   intSubVols ()
      {   return                          intSubVols;
      }
   public static    Attribute <Integer>   latestPeriod ()
      {   return                          latestPeriod;
      }
   public static    Attribute <double[]>  lotSize2Thresh ()
      {   return                          lotSize2Thresh;
      }
   public static    Attribute <Double>    lotSizeTol ()
      {   return                          lotSizeTol;
      }
   public static    Attribute <Boolean>   mandEC ()
      {   return                          mandEC;
      }
   public static    Attribute <double[]>  minLotSize ()
      {   return                          minLotSize;
      }
   public static    Attribute <double[]>  minLotSize2 ()
      {   return                          minLotSize2;
      }
   public static    Attribute <Boolean>   minimalExcess ()
      {   return                          minimalExcess;
      }
   public static    Attribute <Boolean>   mipMode ()
      {   return                          mipMode;
      }
   public static    Attribute <double[]>  mrpConsVol ()
      {   return                          mrpConsVol;
      }
   public static    Attribute <double[]>  mrpExcessVol ()
      {   return                          mrpExcessVol;
      }
   public static    Attribute <double[]>  mrpExecVol ()
      {   return                          mrpExecVol;
      }
   public static    Attribute <Boolean>   mrpNetAllowed ()
      {   return                          mrpNetAllowed;
      }
   public static    Attribute <double[]>  mrpResidualVol ()
      {   return                          mrpResidualVol;
      }
   public static    Attribute <double[]>  mrpSubVol ()
      {   return                          mrpSubVol;
      }
   public static    Attribute <Boolean>   multiExec ()
      {   return                          multiExec;
      }
   public static    Attribute <Boolean>   multiRoute ()
      {   return                          multiRoute;
      }
   public static    Attribute <Integer>   nPeriods ()
      {   return                          nPeriods;
      }
   public static    Attribute <Integer>   nScenarios ()
      {   return                          nScenarios;
      }
   public static    Attribute <Boolean>   netAllowed ()
      {   return                          netAllowed;
      }
   public static    Attribute <Boolean>   nstnResidual ()
      {   return                          nstnResidual;
      }
   public static    Attribute <Double>    objValue ()
      {   return                          objValue;
      }
   public static    Attribute <Integer>   objectStage ()
      {   return                          objectStage;
      }
   public static    Attribute <double[]>  offset ()
      {   return                          offset;
      }
   public static    Attribute <String>    operationName ()
      {   return                          operationName;
      }
   public static    Attribute <String>    partName ()
      {   return                          partName;
      }
   public static    Attribute <Boolean>   penExec ()
      {   return                          penExec;
      }
   public static    Attribute <Boolean>   perfPegging ()
      {   return                          perfPegging;
      }
   public static    Attribute <int[]>     periodStage ()
      {   return                          periodStage;
      }
   public static    Attribute <Boolean>   pgdCritListMode ()
      {   return                          pgdCritListMode;
      }
   public static    Attribute <Boolean>   pipExists ()
      {   return                          pipExists;
      }
   public static    Attribute <Boolean>   pipSeqFromHeur ()
      {   return                          pipSeqFromHeur;
      }
   public static    Attribute <Boolean>   postprocessed ()
      {   return                          postprocessed;
      }
   public static    Attribute <Boolean>   prefHighStockSLBs ()
      {   return                          prefHighStockSLBs;
      }
   public static    Attribute <Boolean>   preprocessed ()
      {   return                          preprocessed;
      }
   public static    Attribute <int[]>     priority ()
      {   return                          priority;
      }
   public static    Attribute <Double>    probability ()
      {   return                          probability;
      }
   public static    Attribute <double[]>  prodVol ()
      {   return                          prodVol;
      }
   public static    Attribute <double[]>  productRate ()
      {   return                          productRate;
      }
   public static    Attribute <boolean[]> propRtg ()
      {   return                          propRtg;
      }
   public static    Attribute <double[]>  reqVol ()
      {   return                          reqVol;
      }
   public static    Attribute <double[]>  residualVol ()
      {   return                          residualVol;
      }
   public static    Attribute <Boolean>   respectStockSLBs ()
      {   return                          respectStockSLBs;
      }
   public static    Attribute <Boolean>   roundReqVols ()
      {   return                          roundReqVols;
      }
   public static    Attribute <double[]>  routingShare ()
      {   return                          routingShare;
      }
   public static    Attribute <Boolean>   scrapAllowed ()
      {   return                          scrapAllowed;
      }
   public static    Attribute <double[]>  scrapCost ()
      {   return                          scrapCost;
      }
   public static    Attribute <double[]>  scrapVol ()
      {   return                          scrapVol;
      }
   public static    Attribute <Double>    searchInc ()
      {   return                          searchInc;
      }
   public static    Attribute <Boolean>   selForDel ()
      {   return                          selForDel;
      }
   public static    Attribute <Boolean>   selSplit ()
      {   return                          selSplit;
      }
   public static    Attribute <double[]>  shadowPrice ()
      {   return                          shadowPrice;
      }
   public static    Attribute <Boolean>   shipLateAllowed ()
      {   return                          shipLateAllowed;
      }
   public static    Attribute <int[]>     shipLateUB ()
      {   return                          shipLateUB;
      }
   public static    Attribute <double[]>  shipReward ()
      {   return                          shipReward;
      }
   public static    Attribute <double[]>  shipVol ()
      {   return                          shipVol;
      }
   public static    Attribute <Boolean>   singleSource ()
      {   return                          singleSource;
      }
   public static    Attribute <Boolean>   skipFailures ()
      {   return                          skipFailures;
      }
   public static    Attribute <String>    solverLogFileName ()
      {   return                          solverLogFileName;
      }
   public static    Attribute <Boolean>   stageByObject ()
      {   return                          stageByObject;
      }
   public static    Attribute <Boolean>   stochMode ()
      {   return                          stochMode;
      }
   public static    Attribute <Boolean>   stochSolnMode ()
      {   return                          stochSolnMode;
      }
   public static    Attribute <BoundSet>  stockBounds ()
      {   return                          stockBounds;
      }
   public static    Attribute <double[]>  stockCost ()
      {   return                          stockCost;
      }
   public static    Attribute <Boolean>   stockReallocation ()
      {   return                          stockReallocation;
      }
   public static    Attribute <double[]>  stockVol ()
      {   return                          stockVol;
      }
   public static    Attribute <double[]>  subCost ()
      {   return                          subCost;
      }
   public static    Attribute <Integer>   subIndex ()
      {   return                          subIndex;
      }
   public static    Attribute <double[]>  subVol ()
      {   return                          subVol;
      }
   public static    Attribute <double[]>  supplyVol ()
      {   return                          supplyVol;
      }
   public static    Attribute <Boolean>   tieBreakPropRt ()
      {   return                          tieBreakPropRt;
      }
   public static    Attribute <String>    title ()
      {   return                          title;
      }
   public static    Attribute <Boolean>   truncOffsets ()
      {   return                          truncOffsets;
      }
   public static    Attribute <Boolean>   twoLevelLotSizes ()
      {   return                          twoLevelLotSizes;
      }
   public static    Attribute <Boolean>   twoWayMultiExec ()
      {   return                          twoWayMultiExec;
      }
   public static    Attribute <Boolean>   useFocusHorizons ()
      {   return                          useFocusHorizons;
      }
   public static    Attribute <Boolean>   userHeurStart ()
      {   return                          userHeurStart;
      }
   public static    Attribute <Double>    wbounds ()
      {   return                          wbounds;
      }
   public static    Attribute <double[]>  yieldRate ()
      {   return                          yieldRate;
      }
d50 3
a52 3
//==============================================================================
// Public Methods (other than Attribute Accessors)
//==============================================================================
d54 3
a56 5
//------------------------------------------------------------------------------
// getAttributes
//
// Return an unmodifiable List of all Attributes in WIT-J.
//------------------------------------------------------------------------------
d58 3
a60 5
   public static List <Attribute <?>> getAttributes ()
      {
      try
         {
         notAllowedWhenTerminated ("Attribute.getAttributes");
d62 3
a64 2
         return Collections.unmodifiableList (allAttributes);
         }
d66 3
a68 5
      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }
d70 3
a72 5
//------------------------------------------------------------------------------
// getValueType ()
//
// Returns the value type of this Attribute.
//------------------------------------------------------------------------------
d74 3
a76 5
   public Class <V> getValueType ()
      {
      try
         {
         notAllowedWhenTerminated ("Attribute.getValueType");
d78 3
a80 2
         return myValueType;
         }
d82 3
a84 5
      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }
d86 3
a88 6
//------------------------------------------------------------------------------
// appliesTo (theClass)
//
// Returns true, iff this Attribute applies to the Component class indicated by
// theClass (which must not be class Component).
//------------------------------------------------------------------------------
d90 3
a92 5
   public boolean appliesTo (Class <? extends Component> theClass)
      {
      try
         {
         CompClassID theCompClassID;
d94 4
a97 1
         notAllowedWhenTerminated ("Attribute.appliesTo");
d99 3
a101 1
         mustBeNonNull (theClass, "theClass", "Attribute <?>.appliesTo");
d103 3
a105 5
         if (theClass == Component.class)
            throw
               new StatusQuoException (
                  "   Attribute.appliesTo (Class) was called "
                +    "where the Class is Component.class.");
d107 3
a109 1
         theCompClassID = CompClassID.getInstance (theClass);
d111 3
a113 1
         assert (theCompClassID != null);
d115 3
a117 2
         return appliesTo (theCompClassID);
         }
d119 3
a121 5
      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }
d123 5
a127 6
//------------------------------------------------------------------------------
// isModifiable ()
//
// Returns true, iff the corresponding setValue method(s) of class Component can
// validly be invoked for this Attribute.
//------------------------------------------------------------------------------
d129 3
a131 5
   public boolean isModifiable ()
      {
      try
         {
         notAllowedWhenTerminated ("Attribute.isModifiable");
d133 3
a135 2
         return thisIsModifiable;
         }
d137 3
a139 5
      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }
d141 3
a143 5
//------------------------------------------------------------------------------
// requiresMaterialPart ()
//
// Returns true, iff this Attribute applies only to Parts of Category MATERIAL.
//------------------------------------------------------------------------------
d145 3
a147 5
   public boolean requiresMaterialPart ()
      {
      try
         {
         notAllowedWhenTerminated ("Attribute.requiresMaterialPart");
d149 5
a153 2
         return thisRequiresMaterialPart;
         }
d155 3
a157 5
      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }
d159 3
a161 6
//------------------------------------------------------------------------------
// requiresStochMode ()
//
// Returns true, iff this Attribute is valid only in stochastic mode
// (stochMode == true).
//------------------------------------------------------------------------------
d163 4
a166 5
   public boolean requiresStochMode ()
      {
      try
         {
         notAllowedWhenTerminated ("Attribute.requiresStochMode");
d168 3
a170 2
         return thisRequiresStochMode;
         }
d172 3
a174 5
      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }
d176 3
a178 5
//------------------------------------------------------------------------------
// hasDefaultValue ()
//
// Returns true, iff this Attribute has a default value.
//------------------------------------------------------------------------------
d180 3
a182 5
   public boolean hasDefaultValue ()
      {
      try
         {
         notAllowedWhenTerminated ("Attribute.hasDefaultValue");
d184 4
a187 2
         return (myDefaultCase != NO_DEFAULT);
         }
d189 3
a191 5
      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }
d193 3
a195 6
//------------------------------------------------------------------------------
// asAttribute (theValueType)
//
// Returns this Attribute, safely converted to an Attribute <V2>, where V2
// corresponds to theValueType.
//------------------------------------------------------------------------------
d197 3
a199 1
  @@SuppressWarnings ("unchecked")
d201 3
a203 5
   public <V2> Attribute <V2> asAttribute (Class <V2> theValueType)
      {
      try
         {
         notAllowedWhenTerminated ("Attribute.asAttribute");
d205 3
a207 12
         if (theValueType != myValueType)
            throw
               new StatusQuoException (
                  "   Attribute.asAttribute (theValueType) was called, where\n"
                + "   theValueType does not match the value type of the "
                +    "Attribute.\n"
                + "\n"
                + "      Attribute:            " + this + "\n"
                + "      Attribute Value Type: " + myValueType .getSimpleName ()
                + "\n"
                + "      Requested Value Type: "
                +        theValueType.getSimpleName ());
d209 3
a211 2
         return (Attribute <V2>) this;
         }
d213 3
a215 5
      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }
d217 3
a219 5
//------------------------------------------------------------------------------
// hashCode ()
//
// Override from class Object.
//------------------------------------------------------------------------------
d221 3
a223 5
   public int hashCode ()
      {
      try
         {
         notAllowedWhenTerminated ("Attribute.hashCode");
d225 5
a229 2
         return myIndex;
         }
d231 3
a233 5
      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }
d235 3
a237 5
//------------------------------------------------------------------------------
// toString ()
//
// Override from class Object.
//------------------------------------------------------------------------------
d239 3
a241 5
   public String toString ()
      {
      try
         {
         notAllowedWhenTerminated ("Attribute.toString");
d243 3
a245 2
         return myName;
         }
d247 3
a249 5
      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }
d251 3
a253 3
//==============================================================================
// Package-Internal Methods
//==============================================================================
d255 5
a259 6
//------------------------------------------------------------------------------
// appliesTo (theCompClassID)
//
// Returns true, iff this Attribute applies to the Component class identified by
// theCompClassID.
//------------------------------------------------------------------------------
d261 3
a263 4
   boolean appliesTo (CompClassID theCompClassID)
      {
      return myApplicableSet.contains (theCompClassID);
      }
d265 3
a267 5
//------------------------------------------------------------------------------
// selfTest ()
//
// Does self-test for Attributes.
//------------------------------------------------------------------------------
d269 3
a271 4
   static void selfTest ()
      {
      checkAlphaOrder ();
      }
d273 3
a275 3
//------------------------------------------------------------------------------
// Accessors
//------------------------------------------------------------------------------
d277 3
a279 4
   DefaultCase getDefaultCase ()
      {
      return myDefaultCase;
      }
d281 3
a283 3
   V getDefaultValue ()
      {
      assert (myDefaultCase == SPECIFIC_VALUE);
d285 3
a287 2
      return myDefaultValue;
      }
d289 3
a291 4
   int getIndex ()
      {
      return myIndex;
      }
d293 3
a295 6
//==============================================================================
// Private Constructor
//
// The default value of the Attribute will be a specific value given by
// theDefValue.
//==============================================================================
d297 3
a299 10
   private Attribute (
         String        theName,
         Class <V>     theValueType,
         V             theDefaultValue,
         CompClassID[] theCompClassIDArr)
      {
      myName           = theName;
      myValueType      = theValueType;
      myDefaultCase    = SPECIFIC_VALUE;
      myDefaultValue   = theDefaultValue;
d301 3
a303 1
      myApplicableSet  = newCompClassIDSet (theCompClassIDArr);
d305 3
a307 1
      myIndex          = allAttributes.size ();
d309 3
a311 1
      thisIsModifiable = true;
d313 3
a315 2
      allAttributes.add (this);
      }
d317 3
a319 5
//==============================================================================
// Private Constructor
//
// theDefaultCase must not be SPECIFIC_VALUE.
//==============================================================================
d321 3
a323 7
   private Attribute (
         String        theName,
         Class <V>     theValueType,
         DefaultCase   theDefaultCase,
         CompClassID[] theCompClassIDArr)
      {
      assert (theDefaultCase != SPECIFIC_VALUE);
d325 3
a327 4
      myName           = theName;
      myValueType      = theValueType;
      myDefaultCase    = theDefaultCase;
      myDefaultValue   = null;
d329 3
a331 1
      myApplicableSet  = newCompClassIDSet (theCompClassIDArr);
d333 3
a335 1
      myIndex          = allAttributes.size ();
d337 3
a339 1
      thisIsModifiable = (theDefaultCase != NO_DEFAULT);
d341 4
a344 2
      allAttributes.add (this);
      }
d346 5
a350 3
//==============================================================================
// Private Methods
//==============================================================================
d352 3
a354 11
//------------------------------------------------------------------------------
// newAtt (theValueType, theName, theDefaultValue, theCompClassIDs)
//
// Creates and returns a new Attribute <V>:
//    theValueType    identifies the value type, V.
//    theName         will be the name of the Attribute.
//    theDefaultValue will be the default value of the Attribute (a specific
//                    value)
//    theCompClassIDs lists the CompClassIDs of the Component classes to which
//                    theAttribute will apply.
//------------------------------------------------------------------------------
d356 3
a358 13
   private static <V> Attribute <V> newAtt (
         Class <V>      theValueType,
         String         theName,
         V              theDefaultValue,
         CompClassID... theCompClassIDs)
      {
      return
         new Attribute <V> (
            theName,
            theValueType,
            theDefaultValue,
            theCompClassIDs);
      }
d360 3
a362 6
//------------------------------------------------------------------------------
// newAtt (...)
//
// Same as newAtt above, but for a specific array type, where theDefaultValue is
// a scalar of the array type.
//------------------------------------------------------------------------------
d364 3
a366 13
   private static Attribute <boolean[]> newAtt (
         Class <boolean[]> theValueType,
         String            theName,
         boolean           theDefaultValue,
         CompClassID...    theCompClassIDs)
      {
      return
         new Attribute <boolean[]> (
            theName,
            theValueType,
            new boolean[]{theDefaultValue},
            theCompClassIDs);
      }
d368 3
a370 13
   private static Attribute <int[]> newAtt (
         Class <int[]>  theValueType,
         String         theName,
         int            theDefaultValue,
         CompClassID... theCompClassIDs)
      {
      return
         new Attribute <int[]> (
            theName,
            theValueType,
            new int[]{theDefaultValue},
            theCompClassIDs);
      }
d372 3
a374 13
   private static Attribute <double[]> newAtt (
         Class <double[]> theValueType,
         String           theName,
         double           theDefaultValue,
         CompClassID...   theCompClassIDs)
      {
      return
         new Attribute <double[]> (
            theName,
            theValueType,
            new double[]{theDefaultValue},
            theCompClassIDs);
      }
d376 3
a378 11
//------------------------------------------------------------------------------
// newAtt (theValueType, theName, theDefaultCase, theCompClassIDs)
//
// Creates and returns a new Attribute <V>:
//    theValueType    identifies the value type, V.
//    theName         will be the name of the Attribute.
//    theDefaultCase  will be the DefaultCase for the Attribute, which must not
//                    be SPECIFIC_VALUE.
//    theCompClassIDs lists the CompClassIDs of the Component classes to which
//                    theAttribute will apply.
//------------------------------------------------------------------------------
d380 3
a382 13
   private static <V> Attribute <V> newAtt (
         Class <V>      theValueType,
         String         theName,
         DefaultCase    theDefaultCase,
         CompClassID... theCompClassIDs)
      {
      return
         new Attribute <V> (
            theName,
            theValueType,
            theDefaultCase,
            theCompClassIDs);
      }
d384 3
a386 5
//------------------------------------------------------------------------------
// newCompClassIDSet (theCompClassArr)
//
// Creates and returns an EnumSet whose contents are theCompClassArr.
//------------------------------------------------------------------------------
d388 3
a390 4
   private static EnumSet <CompClassID> newCompClassIDSet (
         CompClassID[] theCompClassArr)
      {
      EnumSet <CompClassID> theCompClassIDSet;
d392 3
a394 1
      theCompClassIDSet = EnumSet.noneOf (CompClassID.class);
d396 3
a398 4
      for (CompClassID theCompClassID: theCompClassArr)
         {
         theCompClassIDSet.add (theCompClassID);
         }
d400 3
a402 2
      return theCompClassIDSet;
      }
d404 3
a406 5
//------------------------------------------------------------------------------
// checkAlphaOrder ()
//
// Verifies that the Attributes are listed in alphabetical order.
//------------------------------------------------------------------------------
d408 3
a410 4
   private static void checkAlphaOrder ()
      {
      String theAttName;
      String prevAttName = null;
d412 4
a415 3
      println (
           "\n"
         + "Verifying that the Attributes are listed in alphabetical order.\n");
d417 3
a419 3
      for (Attribute <?> theAtt: allAttributes)
         {
         theAttName = theAtt.myName;
d421 3
a423 8
         if (prevAttName != null)
            if (theAttName.compareTo (prevAttName) < 0)
               internalError (
                    "   An Attribute was found whose name is alphabetically\n"
                  + "   earlier than that of the preceding Attribute.\n"
                  + "\n"
                  + "      Preceding Attribute: " + prevAttName + "\n"
                  + "      Current   Attribute: " + theAttName);
d425 3
a427 2
         prevAttName = theAttName;
         }
d429 3
a431 2
      println ("Verified: The Attributes are listed in alphabetical order.");
      }
d433 5
a437 6
//------------------------------------------------------------------------------
// overrideModifiable ()
//
// Sets the the value of the thisIsModifiable field of the Attributes for which
// the correct value is different from the value given in the ctor.
//------------------------------------------------------------------------------
d439 3
a441 6
   private static void overrideModifiable ()
      {
      demandName   .thisIsModifiable = true;
      operationName.thisIsModifiable = true;
      partName     .thisIsModifiable = true;
      }
d443 3
a445 6
//------------------------------------------------------------------------------
// defMaterialPartAtts ()
//
// Sets the thisRequiresMaterialPart field to true, for the appropriate
// Attributes.
//------------------------------------------------------------------------------
d447 3
a449 10
   private static void defMaterialPartAtts ()
      {
      asapPipOrder.thisRequiresMaterialPart = true;
      buildAheadUB.thisRequiresMaterialPart = true;
      buildAsap   .thisRequiresMaterialPart = true;
      buildNstn   .thisRequiresMaterialPart = true;
      stockBounds .thisRequiresMaterialPart = true;
      stockCost   .thisRequiresMaterialPart = true;
      stockVol    .thisRequiresMaterialPart = true;
      }
d451 3
a453 5
//------------------------------------------------------------------------------
// defStochModeAtts ()
//
// Sets the thisRequiresStochMode field to true, for the appropriate Attributes.
//------------------------------------------------------------------------------
d455 8
a462 8
   private static void defStochModeAtts ()
      {
      currentScenario.thisRequiresStochMode = true;
      objectStage    .thisRequiresStochMode = true;
      periodStage    .thisRequiresStochMode = true;
      probability    .thisRequiresStochMode = true;
      stochSolnMode  .thisRequiresStochMode = true;
      }
d464 3
a466 3
//==============================================================================
// Private Fields
//==============================================================================
d468 3
a470 5
//------------------------------------------------------------------------------
// allAttributes
//
// An ArrayList of all of the Attributes in WIT-J.
//------------------------------------------------------------------------------
d472 3
a474 1
   private static final ArrayList <Attribute <?>> allAttributes;
d476 3
a478 5
//------------------------------------------------------------------------------
// myName
//
// The name of this Attribute.
//------------------------------------------------------------------------------
d480 3
a482 1
   private final String myName;
d484 3
a486 5
//------------------------------------------------------------------------------
// myValueType
//
// Indicates the value type of this attribute.
//------------------------------------------------------------------------------
d488 4
a491 1
   private final Class <V> myValueType;
d493 3
a495 5
//------------------------------------------------------------------------------
// myDefaultCase
//
// Indicates which kind of default value this Attribute has.
//------------------------------------------------------------------------------
d497 3
a499 1
   private final DefaultCase myDefaultCase;
d501 3
a503 6
//------------------------------------------------------------------------------
// myDefaultValue
//
// If myDefaultCase == SPECIFIC_VALUE, myDefaultValue stores the default value
// for this Attribute. Otherwise myDefaultValue is null.
//------------------------------------------------------------------------------
d505 3
a507 1
   private final V myDefaultValue;
d509 3
a511 6
//------------------------------------------------------------------------------
// myApplicableSet
//
// The set of CompClassID identifying the set of Component classes to which
// this Attribute applies.
//------------------------------------------------------------------------------
d513 3
a515 1
   private final EnumSet <CompClassID> myApplicableSet;
d517 3
a519 6
//------------------------------------------------------------------------------
// myIndex
//
// # Attributes constructed before this one.
// Used as the hashCode for this class.
//------------------------------------------------------------------------------
d521 3
a523 1
   private final int myIndex;
d525 3
a527 4
//------------------------------------------------------------------------------
// True, iff the corresponding setValue method(s) of class Component can validly
// be invoked with this Attribute.
//------------------------------------------------------------------------------
d529 3
a531 1
   private boolean thisIsModifiable;
d533 3
a535 5
//------------------------------------------------------------------------------
// thisRequiresMaterialPart
//
// true, iff this Attribute applies only to Parts of Category MATERIAL.
//------------------------------------------------------------------------------
d537 3
a539 1
   private boolean thisRequiresMaterialPart = false;
d541 3
a543 5
//------------------------------------------------------------------------------
// thisRequiresStochMode
//
// true, iff this Attribute is valid only in stochastic mode (stochMode == true)
//------------------------------------------------------------------------------
d545 3
a547 1
   private boolean thisRequiresStochMode = false;
d549 3
a551 5
//------------------------------------------------------------------------------
// Attribute fields
//
// The following fields store all of WIT-J's Attributes.
//------------------------------------------------------------------------------
d553 3
a555 3
   private static final
   Attribute <Boolean>          accAfterOptImp =
      newAtt (Boolean  .class, "accAfterOptImp",          false, GLOBAL_ASPECT);
d557 3
a559 3
   private static final
   Attribute <Boolean>          accAfterSoftLB =
      newAtt (Boolean  .class, "accAfterSoftLB",          false, GLOBAL_ASPECT);
d561 3
a563 3
   private static final
   Attribute <Boolean>          accelerated =
      newAtt (Boolean  .class, "accelerated",        NO_DEFAULT, GLOBAL_ASPECT);
d565 3
a567 3
   private static final
   Attribute <Boolean>          asapPipOrder =
      newAtt (Boolean  .class, "asapPipOrder",            false, PART);
d569 3
a571 3
   private static final
   Attribute <Boolean>          autoPriority =
      newAtt (Boolean  .class, "autoPriority",            false, GLOBAL_ASPECT);
d573 3
a575 3
   private static final
   Attribute <Integer>          bomIndex =
      newAtt (Integer  .class, "bomIndex",           NO_DEFAULT, BOM_ENTRY);
d577 3
a579 3
   private static final
   Attribute <Integer>          bopIndex =
      newAtt (Integer  .class, "bopIndex",           NO_DEFAULT, BOP_ENTRY);
d581 3
a583 3
   private static final
   Attribute <Double>           boundsValue =
      newAtt (Double   .class, "boundsValue",        NO_DEFAULT, GLOBAL_ASPECT);
d585 5
a589 3
   private static final
   Attribute <int[]>            buildAheadUB =
      newAtt (int[]    .class, "buildAheadUB",      LAST_PERIOD, PART);
d591 5
a595 3
   private static final
   Attribute <Boolean>          buildAsap =
      newAtt (Boolean  .class, "buildAsap",               false, PART);
d597 2
a598 7
   private static final
   Attribute <Boolean>          buildNstn =
      newAtt (Boolean  .class, "buildNstn",               false, PART);

   private static final
   Attribute <Boolean>          compPrices =
      newAtt (Boolean  .class, "compPrices",              false, GLOBAL_ASPECT);
d600 5
a604 3
   private static final
   Attribute <Boolean>          computeCriticalList =
      newAtt (Boolean  .class, "computeCriticalList",     false, GLOBAL_ASPECT);
d606 5
a610 4
   private static final
   Attribute <double[]>         consRate =
      newAtt (double[] .class, "consRate",                  1.0, BOM_ENTRY,
                                                                 SUBSTITUTE);
d612 5
a616 3
   private static final
   Attribute <double[]>         consVol =
      newAtt (double[] .class, "consVol",            NO_DEFAULT, PART);
d618 2
a619 3
   private static final
   Attribute <BoundSet>         cumShipBounds =
      newAtt (BoundSet .class, "cumShipBounds",       BOUND_SET, DEMAND);
d621 5
a625 3
   private static final
   Attribute <double[]>         cumShipReward =
      newAtt (double[] .class, "cumShipReward",             0.0, DEMAND);
d627 6
a632 3
   private static final
   Attribute <Integer>          currentScenario =
      newAtt (Integer  .class, "currentScenario",             0, GLOBAL_ASPECT);
d634 5
a638 3
   private static final
   Attribute <String>           demandName =
      newAtt (String   .class, "demandName",         NO_DEFAULT, DEMAND);
d640 1
a640 3
   private static final
   Attribute <double[]>         demandVol =
      newAtt (double[] .class, "demandVol",                 0.0, DEMAND);
d642 1
a642 5
   private static final
   Attribute <Integer>          earliestPeriod =
      newAtt (Integer  .class, "earliestPeriod",              0, BOM_ENTRY,
                                                                 SUBSTITUTE,
                                                                 BOP_ENTRY);
d644 5
a648 3
   private static final
   Attribute <Integer>          equitability =
      newAtt (Integer  .class, "equitability",                1, GLOBAL_ASPECT);
d650 1
a650 3
   private static final
   Attribute <double[]>         excessVol =
      newAtt (double[] .class, "excessVol",          NO_DEFAULT, PART);
d652 1
a652 3
   private static final
   Attribute <BoundSet>         execBounds =
      newAtt (BoundSet .class, "execBounds",          BOUND_SET, OPERATION);
d654 2
a655 3
   private static final
   Attribute <double[]>         execCost =
      newAtt (double[] .class, "execCost",                  0.0, OPERATION);
d657 5
a661 3
   private static final
   Attribute <Boolean>          execEmptyBom =
      newAtt (Boolean  .class, "execEmptyBom",             true, GLOBAL_ASPECT);
d663 6
a668 5
   private static final
   Attribute <Double>           execPenalty =
      newAtt (Double   .class, "execPenalty",               0.0, OPERATION,
                                                                 BOM_ENTRY,
                                                                 SUBSTITUTE);
d670 5
a674 3
   private static final
   Attribute <double[]>         execVol =
      newAtt (double[] .class, "execVol",                   0.0, OPERATION);
d676 2
a677 3
   private static final
   Attribute <boolean[]>        executable =
      newAtt (boolean[].class, "executable",         NO_DEFAULT, OPERATION);
d679 5
a683 4
   private static final
   Attribute <Boolean>          expAllowed =
      newAtt (Boolean  .class, "expAllowed",               true, SUBSTITUTE,
                                                                 BOP_ENTRY);
d685 5
a689 3
   private static final
   Attribute <Double>           expAversion =
      newAtt (Double   .class, "expAversion",               0.0, BOP_ENTRY);
d691 5
a695 3
   private static final
   Attribute <Double>           expCutoff =
      newAtt (Double   .class, "expCutoff",                0.01, GLOBAL_ASPECT);
d697 2
a698 3
   private static final
   Attribute <Double>           expNetAversion =
      newAtt (Double   .class, "expNetAversion",            0.0, SUBSTITUTE);
d700 5
a704 3
   private static final
   Attribute <Boolean>          extOptActive =
      newAtt (Boolean  .class, "extOptActive",       NO_DEFAULT, GLOBAL_ASPECT);
d706 6
a711 4
   private static final
   Attribute <Double>           falloutRate =
      newAtt (Double   .class, "falloutRate",               0.0, BOM_ENTRY,
                                                                 SUBSTITUTE);
d713 5
a717 3
   private static final
   Attribute <Boolean>          feasible =
      newAtt (Boolean  .class, "feasible",           NO_DEFAULT, GLOBAL_ASPECT);
d719 2
a720 3
   private static final
   Attribute <Integer>          focusHorizon =
      newAtt (Integer  .class, "focusHorizon",               -1, DEMAND);
d722 5
a726 3
   private static final
   Attribute <double[]>         focusShortageVol =
      newAtt (double[] .class, "focusShortageVol",   NO_DEFAULT, PART);
d728 5
a732 3
   private static final
   Attribute <Boolean>          forcedMultiEq =
      newAtt (Boolean  .class, "forcedMultiEq",           false, GLOBAL_ASPECT);
d734 5
a738 3
   private static final
   Attribute <double[]>         fssExecVol =
      newAtt (double[] .class, "fssExecVol",         NO_DEFAULT, OPERATION);
d740 2
a741 3
   private static final
   Attribute <double[]>         fssShipVol =
      newAtt (double[] .class, "fssShipVol",                0.0, DEMAND);
d743 5
a747 3
   private static final
   Attribute <double[]>         fssSubVol =
      newAtt (double[] .class, "fssSubVol",          NO_DEFAULT, SUBSTITUTE);
d749 6
a754 3
   private static final
   Attribute <Boolean>          heurAllocActive =
      newAtt (Boolean  .class, "heurAllocActive",    NO_DEFAULT, GLOBAL_ASPECT);
d756 1
a756 3
   private static final
   Attribute <Boolean>          highPrecisionWD =
      newAtt (Boolean  .class, "highPrecisionWD",         false, GLOBAL_ASPECT);
d758 5
a762 5
   private static final
   Attribute <int[]>            impactPeriod =
      newAtt (int[]    .class, "impactPeriod",       NO_DEFAULT, BOM_ENTRY,
                                                                 SUBSTITUTE,
                                                                 BOP_ENTRY);
d764 12
a775 3
   private static final
   Attribute <double[]>         incLotSize =
      newAtt (double[] .class, "incLotSize",                0.0, OPERATION);
d777 2
a778 3
   private static final
   Attribute <double[]>         incLotSize2 =
      newAtt (double[] .class, "incLotSize2",               0.0, OPERATION);
d780 5
a784 3
   private static final
   Attribute <Boolean>          independentOffsets =
      newAtt (Boolean  .class, "independentOffsets",      false, GLOBAL_ASPECT);
d786 5
a790 3
   private static final
   Attribute <Boolean>          intExecVols =
      newAtt (Boolean  .class, "intExecVols",             false, OPERATION);
d792 5
a796 3
   private static final
   Attribute <Boolean>          intShipVols =
      newAtt (Boolean  .class, "intShipVols",             false, DEMAND);
d798 2
a799 3
   private static final
   Attribute <Boolean>          intSubVols =
      newAtt (Boolean  .class, "intSubVols",              false, SUBSTITUTE);
d801 5
a805 5
   private static final
   Attribute <Integer>          latestPeriod =
      newAtt (Integer  .class, "latestPeriod",      LAST_PERIOD, BOM_ENTRY,
                                                                 SUBSTITUTE,
                                                                 BOP_ENTRY);
d807 5
a811 3
   private static final
   Attribute <double[]>         lotSize2Thresh =
      newAtt (double[] .class, "lotSize2Thresh",            0.0, OPERATION);
d813 5
a817 3
   private static final
   Attribute <Double>           lotSizeTol =
      newAtt (Double   .class, "lotSizeTol",            0.00001, GLOBAL_ASPECT);
d819 2
a820 3
   private static final
   Attribute <Boolean>          mandEC =
      newAtt (Boolean  .class, "mandEC",                  false, BOM_ENTRY);
d822 5
a826 3
   private static final
   Attribute <double[]>         minLotSize =
      newAtt (double[] .class, "minLotSize",                0.0, OPERATION);
d828 3
a830 3
   private static final
   Attribute <double[]>         minLotSize2 =
      newAtt (double[] .class, "minLotSize2",               0.0, OPERATION);
d832 6
a837 3
   private static final
   Attribute <Boolean>          minimalExcess =
      newAtt (Boolean  .class, "minimalExcess",           false, GLOBAL_ASPECT);
d839 4
a842 3
   private static final
   Attribute <Boolean>          mipMode =
      newAtt (Boolean  .class, "mipMode",                 false, GLOBAL_ASPECT);
d844 5
a848 3
   private static final
   Attribute <double[]>         mrpConsVol =
      newAtt (double[] .class, "mrpConsVol",         NO_DEFAULT, PART);
d850 4
a853 3
   private static final
   Attribute <double[]>         mrpExcessVol =
      newAtt (double[] .class, "mrpExcessVol",       NO_DEFAULT, PART);
d855 3
a857 3
   private static final
   Attribute <double[]>         mrpExecVol =
      newAtt (double[] .class, "mrpExecVol",         NO_DEFAULT, OPERATION);
d859 4
a862 3
   private static final
   Attribute <Boolean>          mrpNetAllowed =
      newAtt (Boolean  .class, "mrpNetAllowed",           false, SUBSTITUTE);
d864 3
a866 3
   private static final
   Attribute <double[]>         mrpResidualVol =
      newAtt (double[] .class, "mrpResidualVol",     NO_DEFAULT, PART);
d868 2
a869 3
   private static final
   Attribute <double[]>         mrpSubVol =
      newAtt (double[] .class, "mrpSubVol",          NO_DEFAULT, SUBSTITUTE);
d871 4
a874 3
   private static final
   Attribute <Boolean>          multiExec =
      newAtt (Boolean  .class, "multiExec",               false, GLOBAL_ASPECT);
d876 6
a881 3
   private static final
   Attribute <Boolean>          multiRoute =
      newAtt (Boolean  .class, "multiRoute",              false, GLOBAL_ASPECT);
d883 10
a892 3
   private static final
   Attribute <Integer>          nPeriods =
      newAtt (Integer  .class, "nPeriods",                   26, GLOBAL_ASPECT);
d894 1
a894 3
   private static final
   Attribute <Integer>          nScenarios =
      newAtt (Integer  .class, "nScenarios",                  1, GLOBAL_ASPECT);
d896 1
a896 3
   private static final
   Attribute <Boolean>          netAllowed =
      newAtt (Boolean  .class, "netAllowed",               true, SUBSTITUTE);
d898 1
a898 3
   private static final
   Attribute <Boolean>          nstnResidual =
      newAtt (Boolean  .class, "nstnResidual",            false, GLOBAL_ASPECT);
d900 2
a901 3
   private static final
   Attribute <Double>           objValue =
      newAtt (Double   .class, "objValue",           NO_DEFAULT, GLOBAL_ASPECT);
d903 5
a907 4
   private static final
   Attribute <Integer>          objectStage =
      newAtt (Integer  .class, "objectStage",                 0, PART,
                                                                 OPERATION);
d909 7
a915 5
   private static final
   Attribute <double[]>         offset =
      newAtt (double[] .class, "offset",                    0.0, BOM_ENTRY,
                                                                 SUBSTITUTE,
                                                                 BOP_ENTRY);
d917 4
a920 3
   private static final
   Attribute <String>           operationName =
      newAtt (String   .class, "operationName",      NO_DEFAULT, OPERATION);
d922 1
a922 3
   private static final
   Attribute <String>           partName =
      newAtt (String   .class, "partName",           NO_DEFAULT, PART);
d924 1
a924 3
   private static final
   Attribute <Boolean>          penExec =
      newAtt (Boolean  .class, "penExec",                 false, GLOBAL_ASPECT);
d926 1
a926 3
   private static final
   Attribute <Boolean>          perfPegging =
      newAtt (Boolean  .class, "perfPegging",             false, GLOBAL_ASPECT);
d928 2
a929 3
   private static final
   Attribute <int[]>            periodStage =
      newAtt (int[]    .class, "periodStage",                 0, GLOBAL_ASPECT);
d931 3
a933 3
   private static final
   Attribute <Boolean>          pgdCritListMode =
      newAtt (Boolean  .class, "pgdCritListMode",         false, GLOBAL_ASPECT);
d935 11
a945 3
   private static final
   Attribute <Boolean>          pipExists =
      newAtt (Boolean  .class, "pipExists",          NO_DEFAULT, GLOBAL_ASPECT);
d947 13
a959 3
   private static final
   Attribute <Boolean>          pipSeqFromHeur =
      newAtt (Boolean  .class, "pipSeqFromHeur",          false, GLOBAL_ASPECT);
d961 6
a966 3
   private static final
   Attribute <Boolean>          postprocessed =
      newAtt (Boolean  .class, "postprocessed",      NO_DEFAULT, GLOBAL_ASPECT);
d968 13
a980 3
   private static final
   Attribute <Boolean>          prefHighStockSLBs =
      newAtt (Boolean  .class, "prefHighStockSLBs",       false, GLOBAL_ASPECT);
d982 13
a994 3
   private static final
   Attribute <Boolean>          preprocessed =
      newAtt (Boolean  .class, "preprocessed",       NO_DEFAULT, GLOBAL_ASPECT);
d996 13
a1008 3
   private static final
   Attribute <int[]>            priority =
      newAtt (int[]    .class, "priority",                    0, DEMAND);
d1010 11
a1020 3
   private static final
   Attribute <Double>           probability =
      newAtt (Double   .class, "probability",               1.0, GLOBAL_ASPECT);
d1022 13
a1034 3
   private static final
   Attribute <double[]>         prodVol =
      newAtt (double[] .class, "prodVol",            NO_DEFAULT, PART);
d1036 5
a1040 3
   private static final
   Attribute <double[]>         productRate =
      newAtt (double[] .class, "productRate",               1.0, BOP_ENTRY);
d1042 4
a1045 4
   private static final
   Attribute <boolean[]>        propRtg =
      newAtt (boolean[].class, "propRtg",                 false, PART,
                                                                 BOM_ENTRY);
d1047 1
a1047 3
   private static final
   Attribute <double[]>         reqVol =
      newAtt (double[] .class, "reqVol",             NO_DEFAULT, PART);
d1049 4
a1052 3
   private static final
   Attribute <double[]>         residualVol =
      newAtt (double[] .class, "residualVol",        NO_DEFAULT, PART);
d1054 2
a1055 3
   private static final
   Attribute <Boolean>          respectStockSLBs =
      newAtt (Boolean  .class, "respectStockSLBs",        false, GLOBAL_ASPECT);
d1057 5
a1061 3
   private static final
   Attribute <Boolean>          roundReqVols =
      newAtt (Boolean  .class, "roundReqVols",            false, GLOBAL_ASPECT);
d1063 4
a1066 5
   private static final
   Attribute <double[]>         routingShare =
      newAtt (double[] .class, "routingShare",              1.0, BOM_ENTRY,
                                                                 SUBSTITUTE,
                                                                 BOP_ENTRY);
d1068 3
a1070 3
   private static final
   Attribute <Boolean>          scrapAllowed =
      newAtt (Boolean  .class, "scrapAllowed",             true, PART);
d1072 3
a1074 3
   private static final
   Attribute <double[]>         scrapCost =
      newAtt (double[] .class, "scrapCost",                 0.0, PART);
d1076 8
a1083 3
   private static final
   Attribute <double[]>         scrapVol =
      newAtt (double[] .class, "scrapVol",           NO_DEFAULT, PART);
d1085 2
a1086 3
   private static final
   Attribute <Double>           searchInc =
      newAtt (Double   .class, "searchInc",                 1.0, DEMAND);
d1088 2
a1089 8
   private static final
   Attribute <Boolean>          selForDel =
      newAtt (Boolean  .class, "selForDel",               false, PART,
                                                                 DEMAND,
                                                                 OPERATION,
                                                                 BOM_ENTRY,
                                                                 SUBSTITUTE,
                                                                 BOP_ENTRY);
d1091 6
a1096 3
   private static final
   Attribute <Boolean>          selSplit =
      newAtt (Boolean  .class, "selSplit",                false, GLOBAL_ASPECT);
d1098 6
a1103 3
   private static final
   Attribute <double[]>         shadowPrice =
      newAtt (double[] .class, "shadowPrice",        NO_DEFAULT, PART);
d1105 6
a1110 3
   private static final
   Attribute <Boolean>          shipLateAllowed =
      newAtt (Boolean  .class, "shipLateAllowed",          true, DEMAND);
d1112 10
a1121 3
   private static final
   Attribute <int[]>            shipLateUB =
      newAtt (int[]    .class, "shipLateUB",        LAST_PERIOD, DEMAND);
d1123 5
a1127 3
   private static final
   Attribute <double[]>         shipReward =
      newAtt (double[] .class, "shipReward",                0.0, DEMAND);
d1129 8
a1136 3
   private static final
   Attribute <double[]>         shipVol =
      newAtt (double[] .class, "shipVol",                   0.0, DEMAND);
d1138 3
a1140 4
   private static final
   Attribute <Boolean>          singleSource =
      newAtt (Boolean  .class, "singleSource",            false, PART,
                                                                 BOM_ENTRY);
d1142 5
a1146 3
   private static final
   Attribute <Boolean>          skipFailures =
      newAtt (Boolean  .class, "skipFailures",             true, GLOBAL_ASPECT);
d1148 1
a1148 3
   private static final
   Attribute <String>           solverLogFileName =
      newAtt (String   .class, "solverLogFileName","solver.log", GLOBAL_ASPECT);
d1150 5
a1154 3
   private static final
   Attribute <Boolean>          stageByObject =
      newAtt (Boolean  .class, "stageByObject",           false, GLOBAL_ASPECT);
d1156 1
a1156 3
   private static final
   Attribute <Boolean>          stochMode =
      newAtt (Boolean  .class, "stochMode",               false, GLOBAL_ASPECT);
d1158 5
a1162 3
   private static final
   Attribute <Boolean>          stochSolnMode =
      newAtt (Boolean  .class, "stochSolnMode",      NO_DEFAULT, GLOBAL_ASPECT);
d1164 1
a1164 3
   private static final
   Attribute <BoundSet>         stockBounds =
      newAtt (BoundSet .class, "stockBounds",         BOUND_SET, PART);
d1166 5
a1170 3
   private static final
   Attribute <double[]>         stockCost =
      newAtt (double[] .class, "stockCost",                 0.0, PART);
d1172 1
a1172 3
   private static final
   Attribute <Boolean>          stockReallocation =
      newAtt (Boolean  .class, "stockReallocation",       false, GLOBAL_ASPECT);
d1174 6
a1179 3
   private static final
   Attribute <double[]>         stockVol =
      newAtt (double[] .class, "stockVol",           NO_DEFAULT, PART);
d1181 1
a1181 3
   private static final
   Attribute <double[]>         subCost =
      newAtt (double[] .class, "subCost",                   0.0, SUBSTITUTE);
d1183 6
a1188 3
   private static final
   Attribute <Integer>          subIndex =
      newAtt (Integer  .class, "subIndex",           NO_DEFAULT, SUBSTITUTE);
d1190 1
a1190 3
   private static final
   Attribute <double[]>         subVol =
      newAtt (double[] .class, "subVol",                    0.0, SUBSTITUTE);
d1192 6
a1197 3
   private static final
   Attribute <double[]>         supplyVol =
      newAtt (double[] .class, "supplyVol",                 0.0, PART);
d1199 1
a1199 3
   private static final
   Attribute <Boolean>          tieBreakPropRt =
      newAtt (Boolean  .class, "tieBreakPropRt",          false, GLOBAL_ASPECT);
d1201 4
a1204 3
   private static final
   Attribute <String>           title =
      newAtt (String   .class, "title",              "Untitled", GLOBAL_ASPECT);
d1206 1
a1206 3
   private static final
   Attribute <Boolean>          truncOffsets =
      newAtt (Boolean  .class, "truncOffsets",            false, GLOBAL_ASPECT);
d1208 5
a1212 3
   private static final
   Attribute <Boolean>          twoLevelLotSizes =
      newAtt (Boolean  .class, "twoLevelLotSizes",        false, OPERATION);
d1214 1
a1214 3
   private static final
   Attribute <Boolean>          twoWayMultiExec =
      newAtt (Boolean  .class, "twoWayMultiExec",         false, GLOBAL_ASPECT);
d1216 5
a1220 3
   private static final
   Attribute <Boolean>          useFocusHorizons =
      newAtt (Boolean  .class, "useFocusHorizons",         true, GLOBAL_ASPECT);
d1222 1
a1222 7
   private static final
   Attribute <Boolean>          userHeurStart =
      newAtt (Boolean  .class, "userHeurStart",           false, GLOBAL_ASPECT);

   private static final
   Attribute <Double>           wbounds =
      newAtt (Double   .class, "wbounds",               10000.0, GLOBAL_ASPECT);
a1223 3
   private static final
   Attribute <double[]>         yieldRate =
      newAtt (double[] .class, "yieldRate",                 1.0, OPERATION);
@


1.106
log
@AttID to Attribute.
@
text
@d40 2
a41 2
   public static    Attribute <Boolean>               accAfterOptImp      ()
      {   return getAttribute (Boolean  .class, AttID.accAfterOptImp       );
d43 2
a44 2
   public static    Attribute <Boolean>               accAfterSoftLB      ()
      {   return getAttribute (Boolean  .class, AttID.accAfterSoftLB       );
d46 2
a47 2
   public static    Attribute <Boolean>               accelerated         ()
      {   return getAttribute (Boolean  .class, AttID.accelerated          );
d49 2
a50 2
   public static    Attribute <Boolean>               asapPipOrder        ()
      {   return getAttribute (Boolean  .class, AttID.asapPipOrder         );
d52 2
a53 2
   public static    Attribute <Boolean>               autoPriority        ()
      {   return getAttribute (Boolean  .class, AttID.autoPriority         );
d55 2
a56 2
   public static    Attribute <Integer>               bomIndex            ()
      {   return getAttribute (Integer  .class, AttID.bomIndex             );
d58 2
a59 2
   public static    Attribute <Integer>               bopIndex            ()
      {   return getAttribute (Integer  .class, AttID.bopIndex             );
d61 2
a62 2
   public static    Attribute <Double>                boundsValue         ()
      {   return getAttribute (Double   .class, AttID.boundsValue          );
d64 2
a65 2
   public static    Attribute <int[]>                 buildAheadUB        ()
      {   return getAttribute (int[]    .class, AttID.buildAheadUB         );
d67 2
a68 2
   public static    Attribute <Boolean>               buildAsap           ()
      {   return getAttribute (Boolean  .class, AttID.buildAsap            );
d70 2
a71 2
   public static    Attribute <Boolean>               buildNstn           ()
      {   return getAttribute (Boolean  .class, AttID.buildNstn            );
d73 2
a74 2
   public static    Attribute <Boolean>               compPrices          ()
      {   return getAttribute (Boolean  .class, AttID.compPrices           );
d76 2
a77 2
   public static    Attribute <Boolean>               computeCriticalList ()
      {   return getAttribute (Boolean  .class, AttID.computeCriticalList  );
d79 2
a80 2
   public static    Attribute <double[]>              consRate            ()
      {   return getAttribute (double[] .class, AttID.consRate             );
d82 2
a83 2
   public static    Attribute <double[]>              consVol             ()
      {   return getAttribute (double[] .class, AttID.consVol              );
d85 2
a86 2
   public static    Attribute <BoundSet>              cumShipBounds       ()
      {   return getAttribute (BoundSet .class, AttID.cumShipBounds        );
d88 2
a89 2
   public static    Attribute <double[]>              cumShipReward       ()
      {   return getAttribute (double[] .class, AttID.cumShipReward        );
d91 2
a92 2
   public static    Attribute <Integer>               currentScenario     ()
      {   return getAttribute (Integer  .class, AttID.currentScenario      );
d94 2
a95 2
   public static    Attribute <String>                demandName          ()
      {   return getAttribute (String   .class, AttID.demandName           );
d97 2
a98 2
   public static    Attribute <double[]>              demandVol           ()
      {   return getAttribute (double[] .class, AttID.demandVol            );
d100 2
a101 2
   public static    Attribute <Integer>               earliestPeriod      ()
      {   return getAttribute (Integer  .class, AttID.earliestPeriod       );
d103 2
a104 2
   public static    Attribute <Integer>               equitability        ()
      {   return getAttribute (Integer  .class, AttID.equitability         );
d106 2
a107 2
   public static    Attribute <double[]>              excessVol           ()
      {   return getAttribute (double[] .class, AttID.excessVol            );
d109 2
a110 2
   public static    Attribute <BoundSet>              execBounds          ()
      {   return getAttribute (BoundSet .class, AttID.execBounds           );
d112 2
a113 2
   public static    Attribute <double[]>              execCost            ()
      {   return getAttribute (double[] .class, AttID.execCost             );
d115 2
a116 2
   public static    Attribute <Boolean>               execEmptyBom        ()
      {   return getAttribute (Boolean  .class, AttID.execEmptyBom         );
d118 2
a119 2
   public static    Attribute <Double>                execPenalty         ()
      {   return getAttribute (Double   .class, AttID.execPenalty          );
d121 2
a122 2
   public static    Attribute <double[]>              execVol             ()
      {   return getAttribute (double[] .class, AttID.execVol              );
d124 2
a125 2
   public static    Attribute <boolean[]>             executable          ()
      {   return getAttribute (boolean[].class, AttID.executable           );
d127 2
a128 2
   public static    Attribute <Boolean>               expAllowed          ()
      {   return getAttribute (Boolean  .class, AttID.expAllowed           );
d130 2
a131 2
   public static    Attribute <Double>                expAversion         ()
      {   return getAttribute (Double   .class, AttID.expAversion          );
d133 2
a134 2
   public static    Attribute <Double>                expCutoff           ()
      {   return getAttribute (Double   .class, AttID.expCutoff            );
d136 2
a137 2
   public static    Attribute <Double>                expNetAversion      ()
      {   return getAttribute (Double   .class, AttID.expNetAversion       );
d139 2
a140 2
   public static    Attribute <Boolean>               extOptActive        ()
      {   return getAttribute (Boolean  .class, AttID.extOptActive         );
d142 2
a143 2
   public static    Attribute <Double>                falloutRate         ()
      {   return getAttribute (Double   .class, AttID.falloutRate          );
d145 2
a146 2
   public static    Attribute <Boolean>               feasible            ()
      {   return getAttribute (Boolean  .class, AttID.feasible             );
d148 2
a149 2
   public static    Attribute <Integer>               focusHorizon        ()
      {   return getAttribute (Integer  .class, AttID.focusHorizon         );
d151 2
a152 2
   public static    Attribute <double[]>              focusShortageVol    ()
      {   return getAttribute (double[] .class, AttID.focusShortageVol     );
d154 2
a155 2
   public static    Attribute <Boolean>               forcedMultiEq       ()
      {   return getAttribute (Boolean  .class, AttID.forcedMultiEq        );
d157 2
a158 2
   public static    Attribute <double[]>              fssExecVol          ()
      {   return getAttribute (double[] .class, AttID.fssExecVol           );
d160 2
a161 2
   public static    Attribute <double[]>              fssShipVol          ()
      {   return getAttribute (double[] .class, AttID.fssShipVol           );
d163 2
a164 2
   public static    Attribute <double[]>              fssSubVol           ()
      {   return getAttribute (double[] .class, AttID.fssSubVol            );
d166 2
a167 2
   public static    Attribute <Boolean>               heurAllocActive     ()
      {   return getAttribute (Boolean  .class, AttID.heurAllocActive      );
d169 2
a170 2
   public static    Attribute <Boolean>               highPrecisionWD     ()
      {   return getAttribute (Boolean  .class, AttID.highPrecisionWD      );
d172 2
a173 2
   public static    Attribute <int[]>                 impactPeriod        ()
      {   return getAttribute (int[]    .class, AttID.impactPeriod         );
d175 2
a176 2
   public static    Attribute <double[]>              incLotSize          ()
      {   return getAttribute (double[] .class, AttID.incLotSize           );
d178 2
a179 2
   public static    Attribute <double[]>              incLotSize2         ()
      {   return getAttribute (double[] .class, AttID.incLotSize2          );
d181 2
a182 2
   public static    Attribute <Boolean>               independentOffsets  ()
      {   return getAttribute (Boolean  .class, AttID.independentOffsets   );
d184 2
a185 2
   public static    Attribute <Boolean>               intExecVols         ()
      {   return getAttribute (Boolean  .class, AttID.intExecVols          );
d187 2
a188 2
   public static    Attribute <Boolean>               intShipVols         ()
      {   return getAttribute (Boolean  .class, AttID.intShipVols          );
d190 2
a191 2
   public static    Attribute <Boolean>               intSubVols          ()
      {   return getAttribute (Boolean  .class, AttID.intSubVols           );
d193 2
a194 2
   public static    Attribute <Integer>               latestPeriod        ()
      {   return getAttribute (Integer  .class, AttID.latestPeriod         );
d196 2
a197 2
   public static    Attribute <double[]>              lotSize2Thresh      ()
      {   return getAttribute (double[] .class, AttID.lotSize2Thresh       );
d199 2
a200 2
   public static    Attribute <Double>                lotSizeTol          ()
      {   return getAttribute (Double   .class, AttID.lotSizeTol           );
d202 2
a203 2
   public static    Attribute <Boolean>               mandEC              ()
      {   return getAttribute (Boolean  .class, AttID.mandEC               );
d205 2
a206 2
   public static    Attribute <double[]>              minLotSize          ()
      {   return getAttribute (double[] .class, AttID.minLotSize           );
d208 2
a209 2
   public static    Attribute <double[]>              minLotSize2         ()
      {   return getAttribute (double[] .class, AttID.minLotSize2          );
d211 2
a212 2
   public static    Attribute <Boolean>               minimalExcess       ()
      {   return getAttribute (Boolean  .class, AttID.minimalExcess        );
d214 2
a215 2
   public static    Attribute <Boolean>               mipMode             ()
      {   return getAttribute (Boolean  .class, AttID.mipMode              );
d217 2
a218 2
   public static    Attribute <double[]>              mrpConsVol          ()
      {   return getAttribute (double[] .class, AttID.mrpConsVol           );
d220 2
a221 2
   public static    Attribute <double[]>              mrpExcessVol        ()
      {   return getAttribute (double[] .class, AttID.mrpExcessVol         );
d223 2
a224 2
   public static    Attribute <double[]>              mrpExecVol          ()
      {   return getAttribute (double[] .class, AttID.mrpExecVol           );
d226 2
a227 2
   public static    Attribute <Boolean>               mrpNetAllowed       ()
      {   return getAttribute (Boolean  .class, AttID.mrpNetAllowed        );
d229 2
a230 2
   public static    Attribute <double[]>              mrpResidualVol      ()
      {   return getAttribute (double[] .class, AttID.mrpResidualVol       );
d232 2
a233 2
   public static    Attribute <double[]>              mrpSubVol           ()
      {   return getAttribute (double[] .class, AttID.mrpSubVol            );
d235 2
a236 2
   public static    Attribute <Boolean>               multiExec           ()
      {   return getAttribute (Boolean  .class, AttID.multiExec            );
d238 2
a239 2
   public static    Attribute <Boolean>               multiRoute          ()
      {   return getAttribute (Boolean  .class, AttID.multiRoute           );
d241 2
a242 2
   public static    Attribute <Integer>               nPeriods            ()
      {   return getAttribute (Integer  .class, AttID.nPeriods             );
d244 2
a245 2
   public static    Attribute <Integer>               nScenarios          ()
      {   return getAttribute (Integer  .class, AttID.nScenarios           );
d247 2
a248 2
   public static    Attribute <Boolean>               netAllowed          ()
      {   return getAttribute (Boolean  .class, AttID.netAllowed           );
d250 2
a251 2
   public static    Attribute <Boolean>               nstnResidual        ()
      {   return getAttribute (Boolean  .class, AttID.nstnResidual         );
d253 2
a254 2
   public static    Attribute <Double>                objValue            ()
      {   return getAttribute (Double   .class, AttID.objValue             );
d256 2
a257 2
   public static    Attribute <Integer>               objectStage         ()
      {   return getAttribute (Integer  .class, AttID.objectStage          );
d259 2
a260 2
   public static    Attribute <double[]>              offset              ()
      {   return getAttribute (double[] .class, AttID.offset               );
d262 2
a263 2
   public static    Attribute <String>                operationName       ()
      {   return getAttribute (String   .class, AttID.operationName        );
d265 2
a266 2
   public static    Attribute <String>                partName            ()
      {   return getAttribute (String   .class, AttID.partName             );
d268 2
a269 2
   public static    Attribute <Boolean>               penExec             ()
      {   return getAttribute (Boolean  .class, AttID.penExec              );
d271 2
a272 2
   public static    Attribute <Boolean>               perfPegging         ()
      {   return getAttribute (Boolean  .class, AttID.perfPegging          );
d274 2
a275 2
   public static    Attribute <int[]>                 periodStage         ()
      {   return getAttribute (int[]    .class, AttID.periodStage          );
d277 2
a278 2
   public static    Attribute <Boolean>               pgdCritListMode     ()
      {   return getAttribute (Boolean  .class, AttID.pgdCritListMode      );
d280 2
a281 2
   public static    Attribute <Boolean>               pipExists           ()
      {   return getAttribute (Boolean  .class, AttID.pipExists            );
d283 2
a284 2
   public static    Attribute <Boolean>               pipSeqFromHeur      ()
      {   return getAttribute (Boolean  .class, AttID.pipSeqFromHeur       );
d286 2
a287 2
   public static    Attribute <Boolean>               postprocessed       ()
      {   return getAttribute (Boolean  .class, AttID.postprocessed        );
d289 2
a290 2
   public static    Attribute <Boolean>               prefHighStockSLBs   ()
      {   return getAttribute (Boolean  .class, AttID.prefHighStockSLBs    );
d292 2
a293 2
   public static    Attribute <Boolean>               preprocessed        ()
      {   return getAttribute (Boolean  .class, AttID.preprocessed         );
d295 2
a296 2
   public static    Attribute <int[]>                 priority            ()
      {   return getAttribute (int[]    .class, AttID.priority             );
d298 2
a299 2
   public static    Attribute <Double>                probability         ()
      {   return getAttribute (Double   .class, AttID.probability          );
d301 2
a302 2
   public static    Attribute <double[]>              prodVol             ()
      {   return getAttribute (double[] .class, AttID.prodVol              );
d304 2
a305 2
   public static    Attribute <double[]>              productRate         ()
      {   return getAttribute (double[] .class, AttID.productRate          );
d307 2
a308 2
   public static    Attribute <boolean[]>             propRtg             ()
      {   return getAttribute (boolean[].class, AttID.propRtg              );
d310 2
a311 2
   public static    Attribute <double[]>              reqVol              ()
      {   return getAttribute (double[] .class, AttID.reqVol               );
d313 2
a314 2
   public static    Attribute <double[]>              residualVol         ()
      {   return getAttribute (double[] .class, AttID.residualVol          );
d316 2
a317 2
   public static    Attribute <Boolean>               respectStockSLBs    ()
      {   return getAttribute (Boolean  .class, AttID.respectStockSLBs     );
d319 2
a320 2
   public static    Attribute <Boolean>               roundReqVols        ()
      {   return getAttribute (Boolean  .class, AttID.roundReqVols         );
d322 2
a323 2
   public static    Attribute <double[]>              routingShare        ()
      {   return getAttribute (double[] .class, AttID.routingShare         );
d325 2
a326 2
   public static    Attribute <Boolean>               scrapAllowed        ()
      {   return getAttribute (Boolean  .class, AttID.scrapAllowed         );
d328 2
a329 2
   public static    Attribute <double[]>              scrapCost           ()
      {   return getAttribute (double[] .class, AttID.scrapCost            );
d331 2
a332 2
   public static    Attribute <double[]>              scrapVol            ()
      {   return getAttribute (double[] .class, AttID.scrapVol             );
d334 2
a335 2
   public static    Attribute <Double>                searchInc           ()
      {   return getAttribute (Double   .class, AttID.searchInc            );
d337 2
a338 2
   public static    Attribute <Boolean>               selForDel           ()
      {   return getAttribute (Boolean  .class, AttID.selForDel            );
d340 2
a341 2
   public static    Attribute <Boolean>               selSplit            ()
      {   return getAttribute (Boolean  .class, AttID.selSplit             );
d343 2
a344 2
   public static    Attribute <double[]>              shadowPrice         ()
      {   return getAttribute (double[] .class, AttID.shadowPrice          );
d346 2
a347 2
   public static    Attribute <Boolean>               shipLateAllowed     ()
      {   return getAttribute (Boolean  .class, AttID.shipLateAllowed      );
d349 2
a350 2
   public static    Attribute <int[]>                 shipLateUB          ()
      {   return getAttribute (int[]    .class, AttID.shipLateUB           );
d352 2
a353 2
   public static    Attribute <double[]>              shipReward          ()
      {   return getAttribute (double[] .class, AttID.shipReward           );
d355 2
a356 2
   public static    Attribute <double[]>              shipVol             ()
      {   return getAttribute (double[] .class, AttID.shipVol              );
d358 2
a359 2
   public static    Attribute <Boolean>               singleSource        ()
      {   return getAttribute (Boolean  .class, AttID.singleSource         );
d361 2
a362 2
   public static    Attribute <Boolean>               skipFailures        ()
      {   return getAttribute (Boolean  .class, AttID.skipFailures         );
d364 2
a365 2
   public static    Attribute <String>                solverLogFileName   ()
      {   return getAttribute (String   .class, AttID.solverLogFileName    );
d367 2
a368 2
   public static    Attribute <Boolean>               stageByObject       ()
      {   return getAttribute (Boolean  .class, AttID.stageByObject        );
d370 2
a371 2
   public static    Attribute <Boolean>               stochMode           ()
      {   return getAttribute (Boolean  .class, AttID.stochMode            );
d373 2
a374 2
   public static    Attribute <Boolean>               stochSolnMode       ()
      {   return getAttribute (Boolean  .class, AttID.stochSolnMode        );
d376 2
a377 2
   public static    Attribute <BoundSet>              stockBounds         ()
      {   return getAttribute (BoundSet .class, AttID.stockBounds          );
d379 2
a380 2
   public static    Attribute <double[]>              stockCost           ()
      {   return getAttribute (double[] .class, AttID.stockCost            );
d382 2
a383 2
   public static    Attribute <Boolean>               stockReallocation   ()
      {   return getAttribute (Boolean  .class, AttID.stockReallocation    );
d385 2
a386 2
   public static    Attribute <double[]>              stockVol            ()
      {   return getAttribute (double[] .class, AttID.stockVol             );
d388 2
a389 2
   public static    Attribute <double[]>              subCost             ()
      {   return getAttribute (double[] .class, AttID.subCost              );
d391 2
a392 2
   public static    Attribute <Integer>               subIndex            ()
      {   return getAttribute (Integer  .class, AttID.subIndex             );
d394 2
a395 2
   public static    Attribute <double[]>              subVol              ()
      {   return getAttribute (double[] .class, AttID.subVol               );
d397 2
a398 2
   public static    Attribute <double[]>              supplyVol           ()
      {   return getAttribute (double[] .class, AttID.supplyVol            );
d400 2
a401 2
   public static    Attribute <Boolean>               tieBreakPropRt      ()
      {   return getAttribute (Boolean  .class, AttID.tieBreakPropRt       );
d403 2
a404 2
   public static    Attribute <String>                title               ()
      {   return getAttribute (String   .class, AttID.title                );
d406 2
a407 2
   public static    Attribute <Boolean>               truncOffsets        ()
      {   return getAttribute (Boolean  .class, AttID.truncOffsets         );
d409 2
a410 2
   public static    Attribute <Boolean>               twoLevelLotSizes    ()
      {   return getAttribute (Boolean  .class, AttID.twoLevelLotSizes     );
d412 2
a413 2
   public static    Attribute <Boolean>               twoWayMultiExec     ()
      {   return getAttribute (Boolean  .class, AttID.twoWayMultiExec      );
d415 2
a416 2
   public static    Attribute <Boolean>               useFocusHorizons    ()
      {   return getAttribute (Boolean  .class, AttID.useFocusHorizons     );
d418 2
a419 2
   public static    Attribute <Boolean>               userHeurStart       ()
      {   return getAttribute (Boolean  .class, AttID.userHeurStart        );
d421 2
a422 2
   public static    Attribute <Double>                wbounds             ()
      {   return getAttribute (Double   .class, AttID.wbounds              );
d424 2
a425 2
   public static    Attribute <double[]>              yieldRate           ()
      {   return getAttribute (double[] .class, AttID.yieldRate            );
a443 4
         AttID.values ();
            //
            // Causes static initialization of enum AttID.

d680 1
a680 1
// newInstance (theName, theValueType, theDefValue, theCompClassIDs)
d682 2
a683 7
// Creates and returns a new Attribute <V>, where V matches theValueType.
// The Attribute's name will be given by theName.
// Its default value is to be a specific value given by theDefValue.
// If theValueType is an array type, then theDefValue specifies the default
// value as a scalar.
// theCompClassIDs specify the set of Component classes to which the Attribute
// will apply.
d686 1
a686 5
   static Attribute <?> newInstance (
         String         theName,
         Class <?>      theValueType,
         Object         theDefValue,
         CompClassID... theCompClassIDs)
d688 2
a689 1
      assert (theDefValue != null);
d691 5
a695 7
      if (theValueType == Boolean.class)
         return
            new Attribute <Boolean> (
               theName,
               Boolean.class,
               (Boolean) theDefValue,
               theCompClassIDs);
d697 4
a700 7
      if (theValueType == Integer.class)
         return
            new Attribute <Integer> (
               theName,
               Integer.class,
               (Integer) theDefValue,
               theCompClassIDs);
d702 3
a704 7
      if (theValueType == Double.class)
         return
            new Attribute <Double> (
               theName,
               Double.class,
               (Double) theDefValue,
               theCompClassIDs);
d706 4
a709 7
      if (theValueType == String.class)
         return
            new Attribute <String> (
               theName,
               String.class,
               (String) theDefValue,
               theCompClassIDs);
d711 3
a713 3
      if (theValueType == boolean[].class)
         {
         boolean[] theBoolArr;
d715 2
a716 1
         theBoolArr = new boolean[]{(Boolean) theDefValue};
d718 4
a721 7
         return
            new Attribute <boolean[]> (
               theName,
               boolean[].class,
               theBoolArr,
               theCompClassIDs);
         }
d723 6
a728 3
      if (theValueType == int[].class)
         {
         int[] theIntArr;
d730 10
a739 1
         theIntArr = new int[]{(Integer) theDefValue};
d741 1
a741 7
         return
            new Attribute <int[]> (
               theName,
               int[].class,
               theIntArr,
               theCompClassIDs);
         }
d743 1
a743 3
      if (theValueType == double[].class)
         {
         double[] theDblArr;
d745 1
a745 1
         theDblArr = new double[]{(Double) theDefValue};
d747 1
a747 12
         return
            new Attribute <double[]> (
               theName,
               double[].class,
               theDblArr,
               theCompClassIDs);
         }

      internalError (
         "   Attribute.newInstance was invoked with an unexpected value type.");

      return null;
d750 2
a751 2
//------------------------------------------------------------------------------
// newInstance (theName, theValueType, theDefaultCase, theCompClassIDs)
d753 2
a754 7
// Creates and returns a new Attribute <V>, where V matches theValueType.
// The Attribute's name will be given by theName.
// theDefaultCase specifies the DefaultCase for the Attribute, which must not be
// SPECIFIC_VALUE.
// theCompClassIDs specify the set of Component classes to which the Attribute
// will apply.
//------------------------------------------------------------------------------
d756 5
a760 5
   static Attribute <?> newInstance (
         String         theName,
         Class <?>      theValueType,
         DefaultCase    theDefaultCase,
         CompClassID... theCompClassIDs)
d764 4
a767 5
      if (theDefaultCase == LAST_PERIOD)
         {
         assert (   (theValueType == Integer.class)
                 || (theValueType == int[]  .class));
         }
d769 1
a769 2
      if (theDefaultCase == BOUND_SET)
         assert (theValueType == BoundSet.class);
d771 1
a771 63
      if (theValueType == Boolean.class)
         return
            new Attribute <Boolean> (
               theName,
               Boolean.class,
               theDefaultCase,
               theCompClassIDs);

      if (theValueType == Integer.class)
         return
            new Attribute <Integer> (
               theName,
               Integer.class,
               theDefaultCase,
               theCompClassIDs);

      if (theValueType == Double.class)
         return
            new Attribute <Double> (
               theName,
               Double.class,
               theDefaultCase,
               theCompClassIDs);

      if (theValueType == String.class)
         return
            new Attribute <String> (
               theName,
               String.class,
               theDefaultCase,
               theCompClassIDs);

      if (theValueType == boolean[].class)
         return
            new Attribute <boolean[]> (
               theName,
               boolean[].class,
               theDefaultCase,
               theCompClassIDs);

      if (theValueType == int[].class)
         return
            new Attribute <int[]> (
               theName,
               int[].class,
               theDefaultCase,
               theCompClassIDs);

      if (theValueType == double[].class)
         return
            new Attribute <double[]> (
               theName,
               double[].class,
               theDefaultCase,
               theCompClassIDs);

      if (theValueType == BoundSet.class)
         return
            new Attribute <BoundSet> (
               theName,
               BoundSet.class,
               theDefaultCase,
               theCompClassIDs);
d773 1
a773 2
      internalError (
         "   Attribute.newInstance was invoked with an unexpected value type.");
d775 1
a775 1
      return null;
d778 4
d783 1
a783 1
// overrideModifiable ()
d785 7
a791 2
// Sets the the value of the thisIsModifiable field of the Attributes for which
// the correct value is different from the value given in the ctor.
d794 5
a798 1
   static void overrideModifiable ()
d800 6
a805 3
      AttID.demandName   .getAttribute ().thisIsModifiable = true;
      AttID.operationName.getAttribute ().thisIsModifiable = true;
      AttID.partName     .getAttribute ().thisIsModifiable = true;
d809 1
a809 1
// defMaterialPartAtts ()
d811 2
a812 2
// Sets the thisRequiresMaterialPart field to true, for the appropriate
// Attributes.
d815 33
a847 1
   static void defMaterialPartAtts ()
d849 6
a854 7
      AttID.asapPipOrder.getAttribute ().thisRequiresMaterialPart = true;
      AttID.buildAheadUB.getAttribute ().thisRequiresMaterialPart = true;
      AttID.buildAsap   .getAttribute ().thisRequiresMaterialPart = true;
      AttID.buildNstn   .getAttribute ().thisRequiresMaterialPart = true;
      AttID.stockBounds .getAttribute ().thisRequiresMaterialPart = true;
      AttID.stockCost   .getAttribute ().thisRequiresMaterialPart = true;
      AttID.stockVol    .getAttribute ().thisRequiresMaterialPart = true;
d858 1
a858 1
// defStochModeAtts ()
d860 7
a866 1
// Sets the thisRequiresStochMode field to true, for the appropriate Attributes.
d869 5
a873 1
   static void defStochModeAtts ()
d875 6
a880 5
      AttID.currentScenario.getAttribute ().thisRequiresStochMode = true;
      AttID.objectStage    .getAttribute ().thisRequiresStochMode = true;
      AttID.periodStage    .getAttribute ().thisRequiresStochMode = true;
      AttID.probability    .getAttribute ().thisRequiresStochMode = true;
      AttID.stochSolnMode  .getAttribute ().thisRequiresStochMode = true;
d884 1
a884 1
// appliesTo (theCompClassID)
d886 1
a886 2
// Returns true, iff this Attribute applies to the Component class identified by
// theCompClassID.
d889 2
a890 1
   boolean appliesTo (CompClassID theCompClassID)
d892 10
a901 1
      return myApplicableSet.contains (theCompClassID);
d905 1
a905 1
// selfTest ()
d907 1
a907 1
// Does self-test for Attributes.
d910 1
a910 1
   static void selfTest ()
d912 24
a935 1
      checkAlphaOrder ();
d939 4
a942 1
// Accessors
d945 1
a945 1
   DefaultCase getDefaultCase ()
d947 3
a949 1
      return myDefaultCase;
d952 8
a959 1
   V getDefaultValue ()
d961 8
a968 1
      assert (myDefaultCase == SPECIFIC_VALUE);
d970 5
a974 2
      return myDefaultValue;
      }
d976 1
a976 1
   int getIndex ()
d978 5
a982 1
      return myIndex;
d986 1
a986 1
// Package-Internal Fields
d990 82
d1077 2
a1078 2
   static final Attribute
             <Boolean>          accAfterOptImp =
d1081 2
a1082 2
   static final Attribute
             <Boolean>          accAfterSoftLB =
d1085 2
a1086 2
   static final Attribute
             <Boolean>          accelerated =
d1089 2
a1090 2
   static final Attribute
             <Boolean>          asapPipOrder =
d1093 2
a1094 2
   static final Attribute
             <Boolean>          autoPriority =
d1097 2
a1098 2
   static final Attribute
             <Integer>          bomIndex =
d1101 2
a1102 2
   static final Attribute
             <Integer>          bopIndex =
d1105 2
a1106 2
   static final Attribute
             <Double>           boundsValue =
d1109 2
a1110 2
   static final Attribute
             <int[]>            buildAheadUB =
d1113 2
a1114 2
   static final Attribute
             <Boolean>          buildAsap =
d1117 2
a1118 2
   static final Attribute
             <Boolean>          buildNstn =
d1121 2
a1122 2
   static final Attribute
             <Boolean>          compPrices =
d1125 2
a1126 2
   static final Attribute
             <Boolean>          computeCriticalList =
d1129 2
a1130 2
   static final Attribute
             <double[]>         consRate =
d1134 2
a1135 2
   static final Attribute
             <double[]>         consVol =
d1138 2
a1139 2
   static final Attribute
             <BoundSet>         cumShipBounds =
d1142 2
a1143 2
   static final Attribute
             <double[]>         cumShipReward =
d1146 2
a1147 2
   static final Attribute
             <Integer>          currentScenario =
d1150 2
a1151 2
   static final Attribute
             <String>           demandName =
d1154 2
a1155 2
   static final Attribute
             <double[]>         demandVol =
d1158 2
a1159 2
   static final Attribute
             <Integer>          earliestPeriod =
d1164 2
a1165 2
   static final Attribute
             <Integer>          equitability =
d1168 2
a1169 2
   static final Attribute
             <double[]>         excessVol =
d1172 2
a1173 2
   static final Attribute
             <BoundSet>         execBounds =
d1176 2
a1177 2
   static final Attribute
             <double[]>         execCost =
d1180 2
a1181 2
   static final Attribute
             <Boolean>          execEmptyBom =
d1184 2
a1185 2
   static final Attribute
             <Double>           execPenalty =
d1190 2
a1191 2
   static final Attribute
             <double[]>         execVol =
d1194 2
a1195 2
   static final Attribute
             <boolean[]>        executable =
d1198 2
a1199 2
   static final Attribute
             <Boolean>          expAllowed =
d1203 2
a1204 2
   static final Attribute
             <Double>           expAversion =
d1207 2
a1208 2
   static final Attribute
             <Double>           expCutoff =
d1211 2
a1212 2
   static final Attribute
             <Double>           expNetAversion =
d1215 2
a1216 2
   static final Attribute
             <Boolean>          extOptActive =
d1219 2
a1220 2
   static final Attribute
             <Double>           falloutRate =
d1224 2
a1225 2
   static final Attribute
             <Boolean>          feasible =
d1228 2
a1229 2
   static final Attribute
             <Integer>          focusHorizon =
d1232 2
a1233 2
   static final Attribute
             <double[]>         focusShortageVol =
d1236 2
a1237 2
   static final Attribute
             <Boolean>          forcedMultiEq =
d1240 2
a1241 2
   static final Attribute
             <double[]>         fssExecVol =
d1244 2
a1245 2
   static final Attribute
             <double[]>         fssShipVol =
d1248 2
a1249 2
   static final Attribute
             <double[]>         fssSubVol =
d1252 2
a1253 2
   static final Attribute
             <Boolean>          heurAllocActive =
d1256 2
a1257 2
   static final Attribute
             <Boolean>          highPrecisionWD =
d1260 2
a1261 2
   static final Attribute
             <int[]>            impactPeriod =
d1266 2
a1267 2
   static final Attribute
             <double[]>         incLotSize =
d1270 2
a1271 2
   static final Attribute
             <double[]>         incLotSize2 =
d1274 2
a1275 2
   static final Attribute
             <Boolean>          independentOffsets =
d1278 2
a1279 2
   static final Attribute
             <Boolean>          intExecVols =
d1282 2
a1283 2
   static final Attribute
             <Boolean>          intShipVols =
d1286 2
a1287 2
   static final Attribute
             <Boolean>          intSubVols =
d1290 2
a1291 2
   static final Attribute
             <Integer>          latestPeriod =
d1296 2
a1297 2
   static final Attribute
             <double[]>         lotSize2Thresh =
d1300 2
a1301 2
   static final Attribute
             <Double>           lotSizeTol =
d1304 2
a1305 2
   static final Attribute
             <Boolean>          mandEC =
d1308 2
a1309 2
   static final Attribute
             <double[]>         minLotSize =
d1312 2
a1313 2
   static final Attribute
             <double[]>         minLotSize2 =
d1316 2
a1317 2
   static final Attribute
             <Boolean>          minimalExcess =
d1320 2
a1321 2
   static final Attribute
             <Boolean>          mipMode =
d1324 2
a1325 2
   static final Attribute
             <double[]>         mrpConsVol =
d1328 2
a1329 2
   static final Attribute
             <double[]>         mrpExcessVol =
d1332 2
a1333 2
   static final Attribute
             <double[]>         mrpExecVol =
d1336 2
a1337 2
   static final Attribute
             <Boolean>          mrpNetAllowed =
d1340 2
a1341 2
   static final Attribute
             <double[]>         mrpResidualVol =
d1344 2
a1345 2
   static final Attribute
             <double[]>         mrpSubVol =
d1348 2
a1349 2
   static final Attribute
             <Boolean>          multiExec =
d1352 2
a1353 2
   static final Attribute
             <Boolean>          multiRoute =
d1356 2
a1357 2
   static final Attribute
             <Integer>          nPeriods =
d1360 2
a1361 2
   static final Attribute
             <Integer>          nScenarios =
d1364 2
a1365 2
   static final Attribute
             <Boolean>          netAllowed =
d1368 2
a1369 2
   static final Attribute
             <Boolean>          nstnResidual =
d1372 2
a1373 2
   static final Attribute
             <Double>           objValue =
d1376 2
a1377 2
   static final Attribute
             <Integer>          objectStage =
d1381 2
a1382 2
   static final Attribute
             <double[]>         offset =
d1387 2
a1388 2
   static final Attribute
             <String>           operationName =
d1391 2
a1392 2
   static final Attribute
             <String>           partName =
d1395 2
a1396 2
   static final Attribute
             <Boolean>          penExec =
d1399 2
a1400 2
   static final Attribute
             <Boolean>          perfPegging =
d1403 2
a1404 2
   static final Attribute
             <int[]>            periodStage =
d1407 2
a1408 2
   static final Attribute
             <Boolean>          pgdCritListMode =
d1411 2
a1412 2
   static final Attribute
             <Boolean>          pipExists =
d1415 2
a1416 2
   static final Attribute
             <Boolean>          pipSeqFromHeur =
d1419 2
a1420 2
   static final Attribute
             <Boolean>          postprocessed =
d1423 2
a1424 2
   static final Attribute
             <Boolean>          prefHighStockSLBs =
d1427 2
a1428 2
   static final Attribute
             <Boolean>          preprocessed =
d1431 2
a1432 2
   static final Attribute
             <int[]>            priority =
d1435 2
a1436 2
   static final Attribute
             <Double>           probability =
d1439 2
a1440 2
   static final Attribute
             <double[]>         prodVol =
d1443 2
a1444 2
   static final Attribute
             <double[]>         productRate =
d1447 2
a1448 2
   static final Attribute
             <boolean[]>        propRtg =
d1452 2
a1453 2
   static final Attribute
             <double[]>         reqVol =
d1456 2
a1457 2
   static final Attribute
             <double[]>         residualVol =
d1460 2
a1461 2
   static final Attribute
             <Boolean>          respectStockSLBs =
d1464 2
a1465 2
   static final Attribute
             <Boolean>          roundReqVols =
d1468 2
a1469 2
   static final Attribute
             <double[]>         routingShare =
d1474 2
a1475 2
   static final Attribute
             <Boolean>          scrapAllowed =
d1478 2
a1479 2
   static final Attribute
             <double[]>         scrapCost =
d1482 2
a1483 2
   static final Attribute
             <double[]>         scrapVol =
d1486 2
a1487 2
   static final Attribute
             <Double>           searchInc =
d1490 2
a1491 2
   static final Attribute
             <Boolean>          selForDel =
d1499 2
a1500 2
   static final Attribute
             <Boolean>          selSplit =
d1503 2
a1504 2
   static final Attribute
             <double[]>         shadowPrice =
d1507 2
a1508 2
   static final Attribute
             <Boolean>          shipLateAllowed =
d1511 2
a1512 2
   static final Attribute
             <int[]>            shipLateUB =
d1515 2
a1516 2
   static final Attribute
             <double[]>         shipReward =
d1519 2
a1520 2
   static final Attribute
             <double[]>         shipVol =
d1523 2
a1524 2
   static final Attribute
             <Boolean>          singleSource =
d1528 2
a1529 2
   static final Attribute
             <Boolean>          skipFailures =
d1532 2
a1533 2
   static final Attribute
             <String>           solverLogFileName =
d1536 2
a1537 2
   static final Attribute
             <Boolean>          stageByObject =
d1540 2
a1541 2
   static final Attribute
             <Boolean>          stochMode =
d1544 2
a1545 2
   static final Attribute
             <Boolean>          stochSolnMode =
d1548 2
a1549 2
   static final Attribute
             <BoundSet>         stockBounds =
d1552 2
a1553 2
   static final Attribute
             <double[]>         stockCost =
d1556 2
a1557 2
   static final Attribute
             <Boolean>          stockReallocation =
d1560 2
a1561 2
   static final Attribute
             <double[]>         stockVol =
d1564 2
a1565 2
   static final Attribute
             <double[]>         subCost =
d1568 2
a1569 2
   static final Attribute
             <Integer>          subIndex =
d1572 2
a1573 2
   static final Attribute
             <double[]>         subVol =
d1576 2
a1577 2
   static final Attribute
             <double[]>         supplyVol =
d1580 2
a1581 2
   static final Attribute
             <Boolean>          tieBreakPropRt =
d1584 3
a1586 3
   static final Attribute
             <String>           title =
      newAtt (String   .class, "title",               "Untitled", GLOBAL_ASPECT);
d1588 2
a1589 2
   static final Attribute
             <Boolean>          truncOffsets =
d1592 2
a1593 2
   static final Attribute
             <Boolean>          twoLevelLotSizes =
d1596 2
a1597 2
   static final Attribute
             <Boolean>          twoWayMultiExec =
d1600 2
a1601 2
   static final Attribute
             <Boolean>          useFocusHorizons =
d1604 2
a1605 2
   static final Attribute
             <Boolean>          userHeurStart =
d1608 2
a1609 2
   static final Attribute
             <Double>           wbounds =
d1612 2
a1613 2
   static final Attribute
             <double[]>         yieldRate =
d1617 1
a1617 4
// Private Constructor
//
// The default value of the Attribute will be a specific value given by
// theDefValue.
d1620 1
a1620 118
   private Attribute (
         String        theName,
         Class <V>     theValueType,
         V             theDefaultValue,
         CompClassID[] theCompClassIDArr)
      {
      myName           = theName;
      myValueType      = theValueType;
      myDefaultCase    = SPECIFIC_VALUE;
      myDefaultValue   = theDefaultValue;

      myApplicableSet  = newCompClassIDSet (theCompClassIDArr);

      myIndex          = allAttributes.size ();

      thisIsModifiable = true;

      allAttributes.add (this);
      }

//==============================================================================
// Private Constructor
//
// theDefaultCase must not be SPECIFIC_VALUE.
//==============================================================================

   private Attribute (
         String        theName,
         Class <V>     theValueType,
         DefaultCase   theDefaultCase,
         CompClassID[] theCompClassIDArr)
      {
      assert (theDefaultCase != SPECIFIC_VALUE);

      myName           = theName;
      myValueType      = theValueType;
      myDefaultCase    = theDefaultCase;
      myDefaultValue   = null;

      myApplicableSet  = newCompClassIDSet (theCompClassIDArr);

      myIndex          = allAttributes.size ();

      thisIsModifiable = (theDefaultCase != NO_DEFAULT);

      allAttributes.add (this);
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// newAtt (theValueType, theName, theDefaultValue, theCompClassIDs)
//
// Creates and returns a new Attribute <V>:
//    theValueType    identifies the value type, V.
//    theName         will be the name of the Attribute.
//    theDefaultValue will be the default value of the Attribute (a specific
//                    value)
//    theCompClassIDs lists the CompClassIDs of the Component classes to which
//                    theAttribute will apply.
//------------------------------------------------------------------------------

   private static <V> Attribute <V> newAtt (
         Class <V>      theValueType,
         String         theName,
         V              theDefaultValue,
         CompClassID... theCompClassIDs)
      {
      return
         new Attribute <V> (
            theName,
            theValueType,
            theDefaultValue,
            theCompClassIDs);
      }

//------------------------------------------------------------------------------
// newAtt (...)
//
// Same as newAtt above, but for a specific array type, where theDefaultValue is
// a scalar of the array type.
//------------------------------------------------------------------------------

   private static Attribute <boolean[]> newAtt (
         Class <boolean[]> theValueType,
         String            theName,
         boolean           theDefaultValue,
         CompClassID...    theCompClassIDs)
      {
      return
         new Attribute <boolean[]> (
            theName,
            theValueType,
            new boolean[]{theDefaultValue},
            theCompClassIDs);
      }

   private static Attribute <int[]> newAtt (
         Class <int[]>  theValueType,
         String         theName,
         int            theDefaultValue,
         CompClassID... theCompClassIDs)
      {
      return
         new Attribute <int[]> (
            theName,
            theValueType,
            new int[]{theDefaultValue},
            theCompClassIDs);
      }

   private static Attribute <double[]> newAtt (
         Class <double[]> theValueType,
         String           theName,
         double           theDefaultValue,
         CompClassID...   theCompClassIDs)
d1622 1
a1622 19
      return
         new Attribute <double[]> (
            theName,
            theValueType,
            new double[]{theDefaultValue},
            theCompClassIDs);
      }

//------------------------------------------------------------------------------
// newAtt (theValueType, theName, theDefaultCase, theCompClassIDs)
//
// Creates and returns a new Attribute <V>:
//    theValueType    identifies the value type, V.
//    theName         will be the name of the Attribute.
//    theDefaultCase  will be the DefaultCase for the Attribute, which must not
//                    be SPECIFIC_VALUE.
//    theCompClassIDs lists the CompClassIDs of the Component classes to which
//                    theAttribute will apply.
//------------------------------------------------------------------------------
d1624 3
a1626 12
   private static <V> Attribute <V> newAtt (
         Class <V>      theValueType,
         String         theName,
         DefaultCase    theDefaultCase,
         CompClassID... theCompClassIDs)
      {
      return
         new Attribute <V> (
            theName,
            theValueType,
            theDefaultCase,
            theCompClassIDs);
a1628 169
//------------------------------------------------------------------------------
// newCompClassIDSet (theCompClassArr)
//
// Creates and returns an EnumSet whose contents are theCompClassArr.
//------------------------------------------------------------------------------

   private static EnumSet <CompClassID> newCompClassIDSet (
         CompClassID[] theCompClassArr)
      {
      EnumSet <CompClassID> theCompClassIDSet;

      theCompClassIDSet = EnumSet.noneOf (CompClassID.class);

      for (CompClassID theCompClassID: theCompClassArr)
         {
         theCompClassIDSet.add (theCompClassID);
         }

      return theCompClassIDSet;
      }

//------------------------------------------------------------------------------
// getAttribute (theValueType, theAttID)
//
// Returns the Attribute identified by theAttID, safely cast to type
// Attribute <V>, where V corresponds to theValueType.
//------------------------------------------------------------------------------

  @@SuppressWarnings ("unchecked")

   private static <V> Attribute <V> getAttribute (
         Class <V> theValueType,
         AttID     theAttID)
      {
      try
         {
         notAllowedWhenTerminated ("Attribute." + theAttID.getAttribute ());

         assert (theValueType == theAttID.getAttribute ().myValueType);

         return (Attribute <V>) theAttID.getAttribute ();
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// checkAlphaOrder ()
//
// Verifies that the Attributes are listed in alphabetical order.
//------------------------------------------------------------------------------

   private static void checkAlphaOrder ()
      {
      String theAttName;
      String prevAttName = null;

      println (
           "\n"
         + "Verifying that the Attributes are listed in alphabetical order.\n");

      for (Attribute <?> theAtt: allAttributes)
         {
         theAttName = theAtt.myName;

         if (prevAttName != null)
            if (theAttName.compareTo (prevAttName) < 0)
               internalError (
                    "   An Attribute was found whose name is alphabetically\n"
                  + "   earlier than that of the preceding Attribute.\n"
                  + "\n"
                  + "      Preceding Attribute: " + prevAttName + "\n"
                  + "      Current   Attribute: " + theAttName);

         prevAttName = theAttName;
         }

      println ("Verified: The Attributes are listed in alphabetical order.");
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// allAttributes
//
// An ArrayList of all of the Attributes in WIT-J.
//------------------------------------------------------------------------------

   private static final ArrayList <Attribute <?>> allAttributes;

//------------------------------------------------------------------------------
// myName
//
// The name of this Attribute.
//------------------------------------------------------------------------------

   private final String myName;

//------------------------------------------------------------------------------
// myValueType
//
// Indicates the value type of this attribute.
//------------------------------------------------------------------------------

   private final Class <V> myValueType;

//------------------------------------------------------------------------------
// myDefaultCase
//
// Indicates which kind of default value this Attribute has.
//------------------------------------------------------------------------------

   private final DefaultCase myDefaultCase;

//------------------------------------------------------------------------------
// myDefaultValue
//
// If myDefaultCase == SPECIFIC_VALUE, myDefaultValue stores the default value
// for this Attribute. Otherwise myDefaultValue is null.
//------------------------------------------------------------------------------

   private final V myDefaultValue;

//------------------------------------------------------------------------------
// myApplicableSet
//
// The set of CompClassID identifying the set of Component classes to which
// this Attribute applies.
//------------------------------------------------------------------------------

   private final EnumSet <CompClassID> myApplicableSet;

//------------------------------------------------------------------------------
// myIndex
//
// # Attributes constructed before this one.
// Used as the hashCode for this class.
//------------------------------------------------------------------------------

   private final int myIndex;

//------------------------------------------------------------------------------
// True, iff the corresponding setValue method(s) of class Component can validly
// be invoked with this Attribute.
//------------------------------------------------------------------------------

   private boolean thisIsModifiable;

//------------------------------------------------------------------------------
// thisRequiresMaterialPart
//
// true, iff this Attribute applies only to Parts of Category MATERIAL.
//------------------------------------------------------------------------------

   private boolean thisRequiresMaterialPart = false;

//------------------------------------------------------------------------------
// thisRequiresStochMode
//
// true, iff this Attribute is valid only in stochastic mode (stochMode == true)
//------------------------------------------------------------------------------

   private boolean thisRequiresStochMode = false;

@


1.105
log
@AttID to Attribute.
@
text
@d12 1
d973 549
d1581 101
@


1.104
log
@AttID to Attribute.
@
text
@a11 1
//port static com.ibm.witj.AttID.*;
d683 1
a683 1
// newInstance (theName, theValueType, theAttID, theDefValue, theCompClassIDs)
d686 1
a686 2
// The newly created Attribute is to be identified by theAttID.
// Its name will be given by theName.
a696 1
         AttID          theAttID,
a706 1
               theAttID,
a714 1
               theAttID,
a722 1
               theAttID,
a730 1
               theAttID,
a743 1
               theAttID,
a757 1
               theAttID,
a771 1
               theAttID,
d783 1
a783 2
// newInstance (
//    theName, theValueType, theAttID, theDefaultCase, theCompClassIDs)
d786 1
a786 2
// The newly created Attribute is to be identified by theAttID.
// Its name will be given by theName.
a795 1
         AttID          theAttID,
a814 1
               theAttID,
a822 1
               theAttID,
a830 1
               theAttID,
a838 1
               theAttID,
a846 1
               theAttID,
a854 1
               theAttID,
a862 1
               theAttID,
a870 1
               theAttID,
d895 1
a895 1
// defMaterialPartAttIDs ()
d897 2
a898 1
// Sets the thisRequiresMaterialPart field to true, for the appropriate AttIDs.
d901 1
a901 1
   static void defMaterialPartAttIDs ()
d913 1
a913 1
// defStochModeAttIDs ()
d915 1
a915 1
// Sets the thisRequiresStochMode field to true, for the appropriate AttIDs.
d918 1
a918 1
   static void defStochModeAttIDs ()
a953 5
   AttID getAttID ()
      {
      return myAttID;
      }

a980 1
         AttID         theAttID,
a985 1
      myAttID          = theAttID;
a1006 1
         AttID         theAttID,
a1013 1
      myAttID          = theAttID;
a1141 8
// myAttID
//
// The AttID that identifies this Attribute.
//------------------------------------------------------------------------------

   private final AttID myAttID;

//------------------------------------------------------------------------------
@


1.103
log
@AttID to Attribute.
@
text
@d991 5
@


1.102
log
@AttID to Attribute.
@
text
@d649 1
a649 1
         return myAttID.hashCode ();
d1013 2
d1043 2
d1200 9
@


1.101
log
@AttID to Attribute.
@
text
@d670 1
a670 1
         return myAttID.toString ();
d684 1
a684 1
// newInstance (theValueType, theAttID, theDefValue, theCompClassIDs)
d688 1
d697 1
d707 2
a708 1
            newInstSpec (
d716 2
a717 1
            newInstSpec (
d725 2
a726 1
            newInstSpec (
d734 2
a735 1
            newInstSpec (
d748 2
a749 1
            newInstSpec (
d763 2
a764 1
            newInstSpec (
d778 2
a779 1
            newInstSpec (
d793 2
a794 1
// newInstance (theValueType, theAttID, theDefaultCase, theCompClassIDs)
d798 1
d806 1
d825 2
a826 1
            newInstNonSpec (
d834 2
a835 1
            newInstNonSpec (
d843 2
a844 1
            newInstNonSpec (
d852 2
a853 1
            newInstNonSpec (
d861 2
a862 1
            newInstNonSpec (
d870 2
a871 1
            newInstNonSpec (
d879 2
a880 1
            newInstNonSpec (
d886 1
a886 1
      if (theValueType == BoundSet .class)
d888 2
a889 1
            newInstNonSpec (
d993 3
d999 1
a1001 1
         DefaultCase   theDefaultCase,
d1005 1
d1008 1
a1008 1
      myDefaultCase    = theDefaultCase;
d1013 1
a1013 1
      thisIsModifiable = (theDefaultCase != NO_DEFAULT);
d1019 3
a1021 1
// Private Methods
d1024 2
a1025 11
//------------------------------------------------------------------------------
// newInstSpec (theValueType, theAttID, theDefValue, theCompClassIDArr)
//
// Creates and returns a new Attribute <V>, where V matches theValueType.
// The newly created Attribute is to be identified by theAttID.
// Its default value is to be a specific value given by theDefValue.
// theCompClassIDArr specifies the set of Component classes to which the
// Attribute will apply.
//------------------------------------------------------------------------------

   private static <V> Attribute <V> newInstSpec (
d1028 1
a1028 1
         V             theDefValue,
d1031 9
a1039 8
      return
         new Attribute <V> (
            theValueType,
            theAttID,
            SPECIFIC_VALUE,
            theDefValue,
            theCompClassIDArr);
      }
d1041 1
a1041 10
//------------------------------------------------------------------------------
// newInstNonSpec (theValueType, theAttID, theDefaultCase, theCompClassIDArr)
//
// Creates and returns a new Attribute <V>, where V matches theValueType.
// The newly created Attribute is to be identified by theAttID.
// theDefaultCase specifies the DefaultCase for the Attribute, which must not be
// SPECIFIC_VALUE.
// theCompClassIDArr specifies the set of Component classes to which the
// Attribute will apply.
//------------------------------------------------------------------------------
d1043 1
a1043 13
   private static <V> Attribute <V> newInstNonSpec (
         Class <V>     theValueType,
         AttID         theAttID,
         DefaultCase   theDefaultCase,
         CompClassID[] theCompClassIDArr)
      {
      return
         new Attribute <V> (
            theValueType,
            theAttID,
            theDefaultCase,
            null,
            theCompClassIDArr);
d1046 4
d1086 1
a1086 1
         notAllowedWhenTerminated ("Attribute." + theAttID);
d1114 1
a1114 1
      for (AttID theAttID: AttID.values ())
d1116 1
a1116 1
         theAttName = theAttID.toString ();
d1121 2
a1122 2
                    "   An AttID was found whose name is alphabetically\n"
                  + "   earlier than that of the preceding AttID.\n"
d1124 2
a1125 2
                  + "      Preceding AttID: " + prevAttName + "\n"
                  + "      Current   AttID: " + theAttName);
d1146 8
d1156 1
a1156 1
// Indicates the value type of the attribute.
@


1.100
log
@AttID to Attribute.
@
text
@d28 9
d444 3
a446 4
         if (unmodAttributes == null)
            {
            buildUnmodAttributes ();
            }
d448 1
a448 1
         return unmodAttributes;
d990 2
a1098 23
// buildUnmodAttributes ()
//
// Builds unmodAttributes.
//------------------------------------------------------------------------------

   private static void buildUnmodAttributes ()
      {
      AttID[]                   allAttIDs;
      ArrayList <Attribute <?>> allAtts;

      allAttIDs = AttID.values ();

      allAtts   = new ArrayList <Attribute <?>> (allAttIDs.length);

      for (AttID theAttID: allAttIDs)
         {
         allAtts.add (theAttID.getAttribute ());
         }

      unmodAttributes = Collections.unmodifiableList (allAtts);
      }

//------------------------------------------------------------------------------
d1137 8
a1208 8
//------------------------------------------------------------------------------
// unmodAttributes
//
// An unmodifiable List of all of the Attributes in WIT-J.
//------------------------------------------------------------------------------

   private static List <Attribute <?>> unmodAttributes = null;

@


1.99
log
@Moved more responsibility from AttID to Attribute.
@
text
@d932 11
d1111 34
@


1.98
log
@Moaved isModifiable from enum AttID to class Attribute.
@
text
@d540 1
a540 1
         return myAttID.requiresMaterialPart ();
d562 1
a562 1
         return myAttID.requiresStochMode ();
d888 32
d1154 16
@


1.97
log
@Moved appliesTo capability from enum AttID to class Attribute.
@
text
@d477 1
a477 1
   public final boolean appliesTo (Class <? extends Component> theClass)
d513 1
a513 1
   public final boolean isModifiable ()
d519 1
a519 1
         return myAttID.isModifiable ();
d534 1
a534 1
   public final boolean requiresMaterialPart ()
d556 1
a556 1
   public final boolean requiresStochMode ()
d577 1
a577 1
   public final boolean hasDefaultValue ()
d635 1
a635 1
   public final int hashCode ()
d656 1
a656 1
   public final String toString ()
d874 14
d903 1
a903 1
   final AttID getAttID ()
d908 1
a908 1
   final DefaultCase getDefaultCase ()
d913 1
a913 1
   final V getDefaultValue ()
d931 8
a938 5
      myValueType     = theValueType;
      myAttID         = theAttID;
      myDefaultCase   = theDefaultCase;
      myDefaultValue  = theDefaultValue;
      myApplicableSet = newCompClassIDSet (theCompClassIDArr);
d1115 7
@


1.96
log
@Replaced the throwExceptionFor method with getExeceptionToThrow.
@
text
@d12 1
a12 1
import static com.ibm.witj.AttID.*;
d31 2
a32 2
   public static    Attribute <Boolean>         accAfterOptImp      ()
      {   return getAttribute (Boolean  .class, accAfterOptImp       );
d34 2
a35 2
   public static    Attribute <Boolean>         accAfterSoftLB      ()
      {   return getAttribute (Boolean  .class, accAfterSoftLB       );
d37 2
a38 2
   public static    Attribute <Boolean>         accelerated         ()
      {   return getAttribute (Boolean  .class, accelerated          );
d40 2
a41 2
   public static    Attribute <Boolean>         asapPipOrder        ()
      {   return getAttribute (Boolean  .class, asapPipOrder         );
d43 2
a44 2
   public static    Attribute <Boolean>         autoPriority        ()
      {   return getAttribute (Boolean  .class, autoPriority         );
d46 2
a47 2
   public static    Attribute <Integer>         bomIndex            ()
      {   return getAttribute (Integer  .class, bomIndex             );
d49 2
a50 2
   public static    Attribute <Integer>         bopIndex            ()
      {   return getAttribute (Integer  .class, bopIndex             );
d52 2
a53 2
   public static    Attribute <Double>          boundsValue         ()
      {   return getAttribute (Double   .class, boundsValue          );
d55 2
a56 2
   public static    Attribute <int[]>           buildAheadUB        ()
      {   return getAttribute (int[]    .class, buildAheadUB         );
d58 2
a59 2
   public static    Attribute <Boolean>         buildAsap           ()
      {   return getAttribute (Boolean  .class, buildAsap            );
d61 2
a62 2
   public static    Attribute <Boolean>         buildNstn           ()
      {   return getAttribute (Boolean  .class, buildNstn            );
d64 2
a65 2
   public static    Attribute <Boolean>         compPrices          ()
      {   return getAttribute (Boolean  .class, compPrices           );
d67 2
a68 2
   public static    Attribute <Boolean>         computeCriticalList ()
      {   return getAttribute (Boolean  .class, computeCriticalList  );
d70 2
a71 2
   public static    Attribute <double[]>        consRate            ()
      {   return getAttribute (double[] .class, consRate             );
d73 2
a74 2
   public static    Attribute <double[]>        consVol             ()
      {   return getAttribute (double[] .class, consVol              );
d76 2
a77 2
   public static    Attribute <BoundSet>        cumShipBounds       ()
      {   return getAttribute (BoundSet .class, cumShipBounds        );
d79 2
a80 2
   public static    Attribute <double[]>        cumShipReward       ()
      {   return getAttribute (double[] .class, cumShipReward        );
d82 2
a83 2
   public static    Attribute <Integer>         currentScenario     ()
      {   return getAttribute (Integer  .class, currentScenario      );
d85 2
a86 2
   public static    Attribute <String>          demandName          ()
      {   return getAttribute (String   .class, demandName           );
d88 2
a89 2
   public static    Attribute <double[]>        demandVol           ()
      {   return getAttribute (double[] .class, demandVol            );
d91 2
a92 2
   public static    Attribute <Integer>         earliestPeriod      ()
      {   return getAttribute (Integer  .class, earliestPeriod       );
d94 2
a95 2
   public static    Attribute <Integer>         equitability        ()
      {   return getAttribute (Integer  .class, equitability         );
d97 2
a98 2
   public static    Attribute <double[]>        excessVol           ()
      {   return getAttribute (double[] .class, excessVol            );
d100 2
a101 2
   public static    Attribute <BoundSet>        execBounds          ()
      {   return getAttribute (BoundSet .class, execBounds           );
d103 2
a104 2
   public static    Attribute <double[]>        execCost            ()
      {   return getAttribute (double[] .class, execCost             );
d106 2
a107 2
   public static    Attribute <Boolean>         execEmptyBom        ()
      {   return getAttribute (Boolean  .class, execEmptyBom         );
d109 2
a110 2
   public static    Attribute <Double>          execPenalty         ()
      {   return getAttribute (Double   .class, execPenalty          );
d112 2
a113 2
   public static    Attribute <double[]>        execVol             ()
      {   return getAttribute (double[] .class, execVol              );
d115 2
a116 2
   public static    Attribute <boolean[]>       executable          ()
      {   return getAttribute (boolean[].class, executable           );
d118 2
a119 2
   public static    Attribute <Boolean>         expAllowed          ()
      {   return getAttribute (Boolean  .class, expAllowed           );
d121 2
a122 2
   public static    Attribute <Double>          expAversion         ()
      {   return getAttribute (Double   .class, expAversion          );
d124 2
a125 2
   public static    Attribute <Double>          expCutoff           ()
      {   return getAttribute (Double   .class, expCutoff            );
d127 2
a128 2
   public static    Attribute <Double>          expNetAversion      ()
      {   return getAttribute (Double   .class, expNetAversion       );
d130 2
a131 2
   public static    Attribute <Boolean>         extOptActive        ()
      {   return getAttribute (Boolean  .class, extOptActive         );
d133 2
a134 2
   public static    Attribute <Double>          falloutRate         ()
      {   return getAttribute (Double   .class, falloutRate          );
d136 2
a137 2
   public static    Attribute <Boolean>         feasible            ()
      {   return getAttribute (Boolean  .class, feasible             );
d139 2
a140 2
   public static    Attribute <Integer>         focusHorizon        ()
      {   return getAttribute (Integer  .class, focusHorizon         );
d142 2
a143 2
   public static    Attribute <double[]>        focusShortageVol    ()
      {   return getAttribute (double[] .class, focusShortageVol     );
d145 2
a146 2
   public static    Attribute <Boolean>         forcedMultiEq       ()
      {   return getAttribute (Boolean  .class, forcedMultiEq        );
d148 2
a149 2
   public static    Attribute <double[]>        fssExecVol          ()
      {   return getAttribute (double[] .class, fssExecVol           );
d151 2
a152 2
   public static    Attribute <double[]>        fssShipVol          ()
      {   return getAttribute (double[] .class, fssShipVol           );
d154 2
a155 2
   public static    Attribute <double[]>        fssSubVol           ()
      {   return getAttribute (double[] .class, fssSubVol            );
d157 2
a158 2
   public static    Attribute <Boolean>         heurAllocActive     ()
      {   return getAttribute (Boolean  .class, heurAllocActive      );
d160 2
a161 2
   public static    Attribute <Boolean>         highPrecisionWD     ()
      {   return getAttribute (Boolean  .class, highPrecisionWD      );
d163 2
a164 2
   public static    Attribute <int[]>           impactPeriod        ()
      {   return getAttribute (int[]    .class, impactPeriod         );
d166 2
a167 2
   public static    Attribute <double[]>        incLotSize          ()
      {   return getAttribute (double[] .class, incLotSize           );
d169 2
a170 2
   public static    Attribute <double[]>        incLotSize2         ()
      {   return getAttribute (double[] .class, incLotSize2          );
d172 2
a173 2
   public static    Attribute <Boolean>         independentOffsets  ()
      {   return getAttribute (Boolean  .class, independentOffsets   );
d175 2
a176 2
   public static    Attribute <Boolean>         intExecVols         ()
      {   return getAttribute (Boolean  .class, intExecVols          );
d178 2
a179 2
   public static    Attribute <Boolean>         intShipVols         ()
      {   return getAttribute (Boolean  .class, intShipVols          );
d181 2
a182 2
   public static    Attribute <Boolean>         intSubVols          ()
      {   return getAttribute (Boolean  .class, intSubVols           );
d184 2
a185 2
   public static    Attribute <Integer>         latestPeriod        ()
      {   return getAttribute (Integer  .class, latestPeriod         );
d187 2
a188 2
   public static    Attribute <double[]>        lotSize2Thresh      ()
      {   return getAttribute (double[] .class, lotSize2Thresh       );
d190 2
a191 2
   public static    Attribute <Double>          lotSizeTol          ()
      {   return getAttribute (Double   .class, lotSizeTol           );
d193 2
a194 2
   public static    Attribute <Boolean>         mandEC              ()
      {   return getAttribute (Boolean  .class, mandEC               );
d196 2
a197 2
   public static    Attribute <double[]>        minLotSize          ()
      {   return getAttribute (double[] .class, minLotSize           );
d199 2
a200 2
   public static    Attribute <double[]>        minLotSize2         ()
      {   return getAttribute (double[] .class, minLotSize2          );
d202 2
a203 2
   public static    Attribute <Boolean>         minimalExcess       ()
      {   return getAttribute (Boolean  .class, minimalExcess        );
d205 2
a206 2
   public static    Attribute <Boolean>         mipMode             ()
      {   return getAttribute (Boolean  .class, mipMode              );
d208 2
a209 2
   public static    Attribute <double[]>        mrpConsVol          ()
      {   return getAttribute (double[] .class, mrpConsVol           );
d211 2
a212 2
   public static    Attribute <double[]>        mrpExcessVol        ()
      {   return getAttribute (double[] .class, mrpExcessVol         );
d214 2
a215 2
   public static    Attribute <double[]>        mrpExecVol          ()
      {   return getAttribute (double[] .class, mrpExecVol           );
d217 2
a218 2
   public static    Attribute <Boolean>         mrpNetAllowed       ()
      {   return getAttribute (Boolean  .class, mrpNetAllowed        );
d220 2
a221 2
   public static    Attribute <double[]>        mrpResidualVol      ()
      {   return getAttribute (double[] .class, mrpResidualVol       );
d223 2
a224 2
   public static    Attribute <double[]>        mrpSubVol           ()
      {   return getAttribute (double[] .class, mrpSubVol            );
d226 2
a227 2
   public static    Attribute <Boolean>         multiExec           ()
      {   return getAttribute (Boolean  .class, multiExec            );
d229 2
a230 2
   public static    Attribute <Boolean>         multiRoute          ()
      {   return getAttribute (Boolean  .class, multiRoute           );
d232 2
a233 2
   public static    Attribute <Integer>         nPeriods            ()
      {   return getAttribute (Integer  .class, nPeriods             );
d235 2
a236 2
   public static    Attribute <Integer>         nScenarios          ()
      {   return getAttribute (Integer  .class, nScenarios           );
d238 2
a239 2
   public static    Attribute <Boolean>         netAllowed          ()
      {   return getAttribute (Boolean  .class, netAllowed           );
d241 2
a242 2
   public static    Attribute <Boolean>         nstnResidual        ()
      {   return getAttribute (Boolean  .class, nstnResidual         );
d244 2
a245 2
   public static    Attribute <Double>          objValue            ()
      {   return getAttribute (Double   .class, objValue             );
d247 2
a248 2
   public static    Attribute <Integer>         objectStage         ()
      {   return getAttribute (Integer  .class, objectStage          );
d250 2
a251 2
   public static    Attribute <double[]>        offset              ()
      {   return getAttribute (double[] .class, offset               );
d253 2
a254 2
   public static    Attribute <String>          operationName       ()
      {   return getAttribute (String   .class, operationName        );
d256 2
a257 2
   public static    Attribute <String>          partName            ()
      {   return getAttribute (String   .class, partName             );
d259 2
a260 2
   public static    Attribute <Boolean>         penExec             ()
      {   return getAttribute (Boolean  .class, penExec              );
d262 2
a263 2
   public static    Attribute <Boolean>         perfPegging         ()
      {   return getAttribute (Boolean  .class, perfPegging          );
d265 2
a266 2
   public static    Attribute <int[]>           periodStage         ()
      {   return getAttribute (int[]    .class, periodStage          );
d268 2
a269 2
   public static    Attribute <Boolean>         pgdCritListMode     ()
      {   return getAttribute (Boolean  .class, pgdCritListMode      );
d271 2
a272 2
   public static    Attribute <Boolean>         pipExists           ()
      {   return getAttribute (Boolean  .class, pipExists            );
d274 2
a275 2
   public static    Attribute <Boolean>         pipSeqFromHeur      ()
      {   return getAttribute (Boolean  .class, pipSeqFromHeur       );
d277 2
a278 2
   public static    Attribute <Boolean>         postprocessed       ()
      {   return getAttribute (Boolean  .class, postprocessed        );
d280 2
a281 2
   public static    Attribute <Boolean>         prefHighStockSLBs   ()
      {   return getAttribute (Boolean  .class, prefHighStockSLBs    );
d283 2
a284 2
   public static    Attribute <Boolean>         preprocessed        ()
      {   return getAttribute (Boolean  .class, preprocessed         );
d286 2
a287 2
   public static    Attribute <int[]>           priority            ()
      {   return getAttribute (int[]    .class, priority             );
d289 2
a290 2
   public static    Attribute <Double>          probability         ()
      {   return getAttribute (Double   .class, probability          );
d292 2
a293 2
   public static    Attribute <double[]>        prodVol             ()
      {   return getAttribute (double[] .class, prodVol              );
d295 2
a296 2
   public static    Attribute <double[]>        productRate         ()
      {   return getAttribute (double[] .class, productRate          );
d298 2
a299 2
   public static    Attribute <boolean[]>       propRtg             ()
      {   return getAttribute (boolean[].class, propRtg              );
d301 2
a302 2
   public static    Attribute <double[]>        reqVol              ()
      {   return getAttribute (double[] .class, reqVol               );
d304 2
a305 2
   public static    Attribute <double[]>        residualVol         ()
      {   return getAttribute (double[] .class, residualVol          );
d307 2
a308 2
   public static    Attribute <Boolean>         respectStockSLBs    ()
      {   return getAttribute (Boolean  .class, respectStockSLBs     );
d310 2
a311 2
   public static    Attribute <Boolean>         roundReqVols        ()
      {   return getAttribute (Boolean  .class, roundReqVols         );
d313 2
a314 2
   public static    Attribute <double[]>        routingShare        ()
      {   return getAttribute (double[] .class, routingShare         );
d316 2
a317 2
   public static    Attribute <Boolean>         scrapAllowed        ()
      {   return getAttribute (Boolean  .class, scrapAllowed         );
d319 2
a320 2
   public static    Attribute <double[]>        scrapCost           ()
      {   return getAttribute (double[] .class, scrapCost            );
d322 2
a323 2
   public static    Attribute <double[]>        scrapVol            ()
      {   return getAttribute (double[] .class, scrapVol             );
d325 2
a326 2
   public static    Attribute <Double>          searchInc           ()
      {   return getAttribute (Double   .class, searchInc            );
d328 2
a329 2
   public static    Attribute <Boolean>         selForDel           ()
      {   return getAttribute (Boolean  .class, selForDel            );
d331 2
a332 2
   public static    Attribute <Boolean>         selSplit            ()
      {   return getAttribute (Boolean  .class, selSplit             );
d334 2
a335 2
   public static    Attribute <double[]>        shadowPrice         ()
      {   return getAttribute (double[] .class, shadowPrice          );
d337 2
a338 2
   public static    Attribute <Boolean>         shipLateAllowed     ()
      {   return getAttribute (Boolean  .class, shipLateAllowed      );
d340 2
a341 2
   public static    Attribute <int[]>           shipLateUB          ()
      {   return getAttribute (int[]    .class, shipLateUB           );
d343 2
a344 2
   public static    Attribute <double[]>        shipReward          ()
      {   return getAttribute (double[] .class, shipReward           );
d346 2
a347 2
   public static    Attribute <double[]>        shipVol             ()
      {   return getAttribute (double[] .class, shipVol              );
d349 2
a350 2
   public static    Attribute <Boolean>         singleSource        ()
      {   return getAttribute (Boolean  .class, singleSource         );
d352 2
a353 2
   public static    Attribute <Boolean>         skipFailures        ()
      {   return getAttribute (Boolean  .class, skipFailures         );
d355 2
a356 2
   public static    Attribute <String>          solverLogFileName   ()
      {   return getAttribute (String   .class, solverLogFileName    );
d358 2
a359 2
   public static    Attribute <Boolean>         stageByObject       ()
      {   return getAttribute (Boolean  .class, stageByObject        );
d361 2
a362 2
   public static    Attribute <Boolean>         stochMode           ()
      {   return getAttribute (Boolean  .class, stochMode            );
d364 2
a365 2
   public static    Attribute <Boolean>         stochSolnMode       ()
      {   return getAttribute (Boolean  .class, stochSolnMode        );
d367 2
a368 2
   public static    Attribute <BoundSet>        stockBounds         ()
      {   return getAttribute (BoundSet .class, stockBounds          );
d370 2
a371 2
   public static    Attribute <double[]>        stockCost           ()
      {   return getAttribute (double[] .class, stockCost            );
d373 2
a374 2
   public static    Attribute <Boolean>         stockReallocation   ()
      {   return getAttribute (Boolean  .class, stockReallocation    );
d376 2
a377 2
   public static    Attribute <double[]>        stockVol            ()
      {   return getAttribute (double[] .class, stockVol             );
d379 2
a380 2
   public static    Attribute <double[]>        subCost             ()
      {   return getAttribute (double[] .class, subCost              );
d382 2
a383 2
   public static    Attribute <Integer>         subIndex            ()
      {   return getAttribute (Integer  .class, subIndex             );
d385 2
a386 2
   public static    Attribute <double[]>        subVol              ()
      {   return getAttribute (double[] .class, subVol               );
d388 2
a389 2
   public static    Attribute <double[]>        supplyVol           ()
      {   return getAttribute (double[] .class, supplyVol            );
d391 2
a392 2
   public static    Attribute <Boolean>         tieBreakPropRt      ()
      {   return getAttribute (Boolean  .class, tieBreakPropRt       );
d394 2
a395 2
   public static    Attribute <String>          title               ()
      {   return getAttribute (String   .class, title                );
d397 2
a398 2
   public static    Attribute <Boolean>         truncOffsets        ()
      {   return getAttribute (Boolean  .class, truncOffsets         );
d400 2
a401 2
   public static    Attribute <Boolean>         twoLevelLotSizes    ()
      {   return getAttribute (Boolean  .class, twoLevelLotSizes     );
d403 2
a404 2
   public static    Attribute <Boolean>         twoWayMultiExec     ()
      {   return getAttribute (Boolean  .class, twoWayMultiExec      );
d406 2
a407 2
   public static    Attribute <Boolean>         useFocusHorizons    ()
      {   return getAttribute (Boolean  .class, useFocusHorizons     );
d409 2
a410 2
   public static    Attribute <Boolean>         userHeurStart       ()
      {   return getAttribute (Boolean  .class, userHeurStart        );
d412 2
a413 2
   public static    Attribute <Double>          wbounds             ()
      {   return getAttribute (Double   .class, wbounds              );
d415 2
a416 2
   public static    Attribute <double[]>        yieldRate           ()
      {   return getAttribute (double[] .class, yieldRate            );
d497 1
a497 1
         return myAttID.appliesTo (theCompClassID);
d676 1
a676 1
// newInstance (theValueType, theAttID, theDefValue)
d683 2
d688 4
a691 3
         Class <?> theValueType,
         AttID     theAttID,
         Object    theDefValue)
d695 31
a725 11
      if    (theValueType == Boolean.class)
         return newInstSpec (Boolean.class, theAttID, (Boolean) theDefValue);

      if    (theValueType == Integer.class)
         return newInstSpec (Integer.class, theAttID, (Integer) theDefValue);

      if    (theValueType == Double .class)
         return newInstSpec (Double .class, theAttID, (Double)  theDefValue);

      if    (theValueType == String .class)
         return newInstSpec (String .class, theAttID, (String)  theDefValue);
d733 6
a738 1
         return newInstSpec (boolean[].class, theAttID, theBoolArr);
d747 6
a752 1
         return newInstSpec (int[].class, theAttID, theIntArr);
d761 6
a766 1
         return newInstSpec (double[].class, theAttID, theDblArr);
d776 1
a776 1
// newInstance (theValueType, theAttID, theDefaultCase)
d782 2
d787 4
a790 3
         Class <?>   theValueType,
         AttID       theAttID,
         DefaultCase theDefaultCase)
d803 31
a833 2
      if       (theValueType == Boolean  .class)
         return newInstNonSpec (Boolean  .class, theAttID, theDefaultCase);
d835 7
a841 2
      if       (theValueType == Integer  .class)
         return newInstNonSpec (Integer  .class, theAttID, theDefaultCase);
d843 7
a849 2
      if       (theValueType == Double   .class)
         return newInstNonSpec (Double   .class, theAttID, theDefaultCase);
d851 15
a865 14
      if       (theValueType == String   .class)
         return newInstNonSpec (String   .class, theAttID, theDefaultCase);

      if       (theValueType == boolean[].class)
         return newInstNonSpec (boolean[].class, theAttID, theDefaultCase);

      if       (theValueType == int[]    .class)
         return newInstNonSpec (int[]    .class, theAttID, theDefaultCase);

      if       (theValueType == double[] .class)
         return newInstNonSpec (double[] .class, theAttID, theDefaultCase);

      if       (theValueType == BoundSet .class)
         return newInstNonSpec (BoundSet .class, theAttID, theDefaultCase);
d874 12
d911 11
a921 9
         Class <V>   theValueType,
         AttID       theAttID,
         DefaultCase theDefaultCase,
         V           theDefaultValue)
      {
      myValueType    = theValueType;
      myAttID        = theAttID;
      myDefaultCase  = theDefaultCase;
      myDefaultValue = theDefaultValue;
d929 1
a929 1
// newInstSpec (theValueType, theAttID, theDefValue)
d934 2
d939 4
a942 3
         Class <V> theValueType,
         AttID     theAttID,
         V         theDefValue)
d949 2
a950 1
            theDefValue);
d954 1
a954 1
// newInstNonSpec (theValueType, theAttID, theDefaultCase)
d960 2
d965 22
a986 3
         Class <V>   theValueType,
         AttID       theAttID,
         DefaultCase theDefaultCase)
d988 10
a997 1
      return new Attribute <V> (theValueType, theAttID, theDefaultCase, null);
d1089 9
@


1.95
log
@Changed name of Java class WitjException to GeneralException.
@
text
@d443 1
a443 1
      catch (Throwable theThrowable)
d445 1
a445 3
         throwExceptionFor (theThrowable);

         return null;
d464 1
a464 1
      catch (Throwable theThrowable)
d466 1
a466 3
         throwExceptionFor (theThrowable);

         return null;
d500 1
a500 1
      catch (Throwable theThrowable)
d502 1
a502 3
         throwExceptionFor (theThrowable);

         return false;
d522 1
a522 1
      catch (Throwable theThrowable)
d524 1
a524 3
         throwExceptionFor (theThrowable);

         return false;
d543 1
a543 1
      catch (Throwable theThrowable)
d545 1
a545 3
         throwExceptionFor (theThrowable);

         return false;
d565 1
a565 1
      catch (Throwable theThrowable)
d567 1
a567 3
         throwExceptionFor (theThrowable);

         return false;
d586 1
a586 1
      catch (Throwable theThrowable)
d588 1
a588 3
         throwExceptionFor (theThrowable);

         return false;
d623 1
a623 1
      catch (Throwable theThrowable)
d625 1
a625 3
         throwExceptionFor (theThrowable);

         return null;
d644 1
a644 1
      catch (Throwable theThrowable)
d646 1
a646 3
         throwExceptionFor (theThrowable);

         return 0;
d665 1
a665 1
      catch (Throwable theThrowable)
d667 1
a667 3
         throwExceptionFor (theThrowable);

         return null;
d893 1
a893 1
      catch (Throwable theThrowable)
d895 1
a895 3
         throwExceptionFor (theThrowable);

         return null;
@


1.94
log
@Made theAttribute.appliesTo (...) based on data on the Java side.
@
text
@d445 3
a447 1
         throw getWitjExceptionFor (theThrowable);
d468 3
a470 1
         throw getWitjExceptionFor (theThrowable);
d506 3
a508 1
         throw getWitjExceptionFor (theThrowable);
d530 3
a532 1
         throw getWitjExceptionFor (theThrowable);
d553 3
a555 1
         throw getWitjExceptionFor (theThrowable);
d577 3
a579 1
         throw getWitjExceptionFor (theThrowable);
d600 3
a602 1
         throw getWitjExceptionFor (theThrowable);
d639 3
a641 1
         throw getWitjExceptionFor (theThrowable);
d662 3
a664 1
         throw getWitjExceptionFor (theThrowable);
d685 3
a687 1
         throw getWitjExceptionFor (theThrowable);
d915 3
a917 1
         throw getWitjExceptionFor (theThrowable);
@


1.93
log
@Moved the iAmModifiable field to AttID class.
@
text
@a481 1
         AttImp      theAttImp;
d497 1
a497 3
         theAttImp = Coordinator.getStaticInstance ().getAttImpFor (this);

         return theAttImp.appliesTo (theCompClassID);
@


1.92
log
@Changed names of AttRep classes to AttImp.
@
text
@d522 1
a522 5
         return
            Coordinator.
               getStaticInstance ().
                  getAttImpFor (this).
                     isModifiable ();
@


1.91
log
@Replaced Attribute.getAllAttributes () with Attribute.getAttributes (),
which returns an unmodifiable List.
@
text
@d482 1
a482 1
         AttRep      theAttRep;
d498 1
a498 1
         theAttRep = Coordinator.getStaticInstance ().getAttRepFor (this);
d500 1
a500 1
         return theAttRep.appliesTo (theCompClassID);
d525 1
a525 1
                  getAttRepFor (this).
@


1.90
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d424 1
a424 1
// getAllAttributes
d426 1
a426 1
// Returns the set of all Attributes in WIT-J.
d429 1
a429 1
   public static Attribute <?>[] getAllAttributes ()
d433 1
a433 3
         AttID[]         theAttIDs;
         Attribute <?>[] theAttArr;
         int             theIdx;
d435 1
a435 7
         notAllowedWhenTerminated ("Attribute.getAllAttributes");

         theAttIDs = AttID.values ();

         theAttArr = new Attribute <?>[theAttIDs.length];

         for (theIdx = 0; theIdx < theAttIDs.length; theIdx ++)
d437 1
a437 1
            theAttArr[theIdx] = theAttIDs[theIdx].getAttribute ();
d440 1
a440 1
         return theAttArr;
d906 23
d966 8
@


1.89
log
@Coordinator
@
text
@d481 2
a482 2
// Returns true, iff this Attribute applies to the Element class indicated by
// theClass (which must not be class Element).
d485 1
a485 1
   public final boolean appliesTo (Class <? extends Element> theClass)
d489 1
a489 1
         ElemClassID theElemClassID;
d496 1
a496 1
         if (theClass == Element.class)
d500 1
a500 1
                +    "where the Class is Element.class.");
d502 1
a502 1
         theElemClassID = ElemClassID.getInstance (theClass);
d504 1
a504 1
         assert (theElemClassID != null);
d508 1
a508 1
         return theAttRep.appliesTo (theElemClassID);
d520 1
a520 1
// Returns true, iff the corresponding setValue method(s) of class Element can
@


1.88
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d506 1
a506 2
         theAttRep =
            Problem.getStaticInstance ().getCoordinator ().getAttRepFor (this);
d531 1
a531 1
            Problem.
d533 2
a534 3
                  getCoordinator ().
                     getAttRepFor (this).
                        isModifiable ();
@


1.87
log
@Continued implementation of java class ProbMgr.
@
text
@d507 1
a507 1
            Problem.getStaticInstance ().getProbMgr ().getAttRepFor (this);
d534 1
a534 1
                  getProbMgr ().
@


1.86
log
@Java ProbMgr
@
text
@d506 2
a507 1
         theAttRep = ProbMgr.getStaticInstance ().getAttRepFor (this);
d532 5
a536 1
            ProbMgr.getStaticInstance ().getAttRepFor (this).isModifiable ();
@


1.85
log
@ProbMgr classes.
@
text
@d506 1
a506 6
         theAttRep =
            ProbMgr.
               getStaticInstance ().
                  getProblem ().
                     getAttRepMgr ().
                        getAttRepFor (this);
d531 1
a531 6
            ProbMgr.
               getStaticInstance ().
                  getProblem ().
                     getAttRepMgr ().
                        getAttRepFor (this).
                           isModifiable ();
@


1.84
log
@Removed Attribute wit34Compatible.
@
text
@d507 1
a507 1
            Problem.
d509 3
a511 2
                  getAttRepMgr ().
                     getAttRepFor (this);
d536 1
a536 1
            Problem.
d538 4
a541 3
                  getAttRepMgr ().
                     getAttRepFor (this).
                        isModifiable ();
@


1.83
log
@Added Attribute wit34Compatible.
@
text
@a414 3
   public static    Attribute <Boolean>         wit34Compatible     ()
      {   return getAttribute (Boolean  .class, wit34Compatible      );
      }
@


1.82
log
@Changed a Java class name: WitjAbortsException ==> TerminalException
@
text
@d415 3
@


1.81
log
@Changed class name: NonFunctionalException ==> WitjAbortsException
@
text
@d437 1
a437 1
         witjAbortedNotAllowed ("Attribute.getAllAttributes");
d467 1
a467 1
         witjAbortedNotAllowed ("Attribute.getValueType");
d492 1
a492 1
         witjAbortedNotAllowed ("Attribute.appliesTo");
d532 1
a532 1
         witjAbortedNotAllowed ("Attribute.isModifiable");
d558 1
a558 1
         witjAbortedNotAllowed ("Attribute.requiresMaterialPart");
d580 1
a580 1
         witjAbortedNotAllowed ("Attribute.requiresStochMode");
d601 1
a601 1
         witjAbortedNotAllowed ("Attribute.hasDefaultValue");
d625 1
a625 1
         witjAbortedNotAllowed ("Attribute.asAttribute");
d659 1
a659 1
         witjAbortedNotAllowed ("Attribute.hashCode");
d680 1
a680 1
         witjAbortedNotAllowed ("Attribute.toString");
d906 1
a906 1
         witjAbortedNotAllowed ("Attribute." + theAttID);
@


1.80
log
@Added text to the detail message of StatusQuoExceptions.
@
text
@d437 1
a437 1
         witjMustBeFunctional ("Attribute.getAllAttributes");
d467 1
a467 1
         witjMustBeFunctional ("Attribute.getValueType");
d492 1
a492 1
         witjMustBeFunctional ("Attribute.appliesTo");
d532 1
a532 1
         witjMustBeFunctional ("Attribute.isModifiable");
d558 1
a558 1
         witjMustBeFunctional ("Attribute.requiresMaterialPart");
d580 1
a580 1
         witjMustBeFunctional ("Attribute.requiresStochMode");
d601 1
a601 1
         witjMustBeFunctional ("Attribute.hasDefaultValue");
d625 1
a625 1
         witjMustBeFunctional ("Attribute.asAttribute");
d659 1
a659 1
         witjMustBeFunctional ("Attribute.hashCode");
d680 1
a680 1
         witjMustBeFunctional ("Attribute.toString");
d906 1
a906 1
         witjMustBeFunctional ("Attribute." + theAttID);
@


1.79
log
@Changed name of class IntactException to StatusQuoException.
@
text
@d497 4
a500 4
            throw new StatusQuoException (
               "\n\n"
             + "   Attribute.appliesTo (Class) was called "
             +    "where the Class is Element.class.\n");
d628 11
a638 11
            throw new StatusQuoException (
               "\n\n"
             + "   Attribute.asAttribute (theValueType) was called, where\n"
             + "   theValueType does not match the value type of the "
             +    "Attribute.\n"
             + "\n"
             + "      Attribute:            " + this + "\n"
             + "      Attribute Value Type: " + myValueType .getSimpleName ()
             + "\n"
             + "      Requested Value Type: " + theValueType.getSimpleName ()
             + "\n");
@


1.78
log
@Added the uniform try block whereever it was needed.
@
text
@d497 1
a497 1
            throw new IntactException (
d628 1
a628 1
            throw new IntactException (
@


1.77
log
@Added a call to witjMustBeFunctional whereever it was needed.
@
text
@d431 7
a437 3
      AttID[]         theAttIDs;
      Attribute <?>[] theAttArr;
      int             theIdx;
d439 1
a439 1
      witjMustBeFunctional ("Attribute.getAllAttributes");
d441 1
a441 1
      theAttIDs = AttID.values ();
d443 7
a449 1
      theAttArr = new Attribute <?>[theAttIDs.length];
d451 1
a451 1
      for (theIdx = 0; theIdx < theAttIDs.length; theIdx ++)
d453 1
a453 1
         theAttArr[theIdx] = theAttIDs[theIdx].getAttribute ();
a454 2

      return theAttArr;
d465 6
a470 1
      witjMustBeFunctional ("Attribute.getValueType");
d472 4
a475 1
      return myValueType;
d487 4
a490 2
      ElemClassID theElemClassID;
      AttRep      theAttRep;
d492 1
a492 1
      witjMustBeFunctional ("Attribute.appliesTo");
d494 1
a494 1
      mustBeNonNull (theClass, "theClass", "Attribute <?>.appliesTo");
d496 5
a500 5
      if (theClass == Element.class)
         throw new IntactException (
            "\n\n"
          + "   Attribute.appliesTo (Class) was called "
          +    "where the Class is Element.class.\n");
d502 1
a502 1
      theElemClassID = ElemClassID.getInstance (theClass);
d504 1
a504 1
      assert (theElemClassID != null);
d506 5
a510 5
      theAttRep =
         Problem.
            getStaticInstance ().
               getAttRepMgr ().
                  getAttRepFor (this);
d512 7
a518 1
      return theAttRep.appliesTo (theElemClassID);
d530 11
a540 1
      witjMustBeFunctional ("Attribute.isModifiable");
d542 4
a545 6
      return
         Problem.
            getStaticInstance ().
               getAttRepMgr ().
                  getAttRepFor (this).
                     isModifiable ();
d556 6
a561 1
      witjMustBeFunctional ("Attribute.requiresMaterialPart");
d563 4
a566 1
      return myAttID.requiresMaterialPart ();
d578 6
a583 1
      witjMustBeFunctional ("Attribute.requiresStochMode");
d585 4
a588 1
      return myAttID.requiresStochMode ();
d599 3
a601 1
      witjMustBeFunctional ("Attribute.hasDefaultValue");
d603 7
a609 1
      return (myDefaultCase != NO_DEFAULT);
d623 3
a625 1
      witjMustBeFunctional ("Attribute.asAttribute");
d627 15
a641 11
      if (theValueType != myValueType)
         throw new IntactException (
            "\n\n"
          + "   Attribute.asAttribute (theValueType) was called, where\n"
          + "   theValueType does not match the value type of the Attribute.\n"
          + "\n"
          + "      Attribute:            " + this + "\n"
          + "      Attribute Value Type: " + myValueType .getSimpleName ()
          + "\n"
          + "      Requested Value Type: " + theValueType.getSimpleName ()
          + "\n");
d643 4
a646 1
      return (Attribute <V2>) this;
d657 3
a659 1
      witjMustBeFunctional ("Attribute.hashCode");
d661 7
a667 1
      return myAttID.hashCode ();
d678 6
a683 1
      witjMustBeFunctional ("Attribute.toString");
d685 4
a688 1
      return myAttID.toString ();
d904 3
a906 1
      witjMustBeFunctional ("Attribute." + theAttID);
d908 1
a908 1
      assert (theValueType == theAttID.getAttribute ().myValueType);
d910 7
a916 1
      return (Attribute <V>) theAttID.getAttribute ();
@


1.76
log
@Changed class names:
   HarmlessException ==> IntactException
   UnknownException  ==> UnexpectedException
@
text
@d435 2
d457 2
d474 2
d506 2
d524 2
d538 2
d551 2
d567 2
d592 2
d605 2
d813 1
a813 1
// Returns the Attribute identified by theAttID, safely converted to type
d823 2
@


1.75
log
@Replaced standard Exceptions with HarmlessExceptions in throw statements.
@
text
@d473 1
a473 1
         throw new HarmlessException (
d554 1
a554 1
         throw new HarmlessException (
@


1.74
log
@Attributes
@
text
@d473 1
a473 1
         throw new IllegalArgumentException (
d554 1
a554 1
         throw new IllegalArgumentException (
@


1.73
log
@Replaced assert (false) with internalError invocations.
@
text
@d25 1
a25 1
abstract public class Attribute <V>
d543 1
a543 1
// Type conversion methods
d545 2
a546 2
// Each of these methods returns this Attribute, safely converted to the
// parameterized Attribute type given as the return type.
d549 1
a549 3
   public Attribute   <Boolean>          asBoolAtt ()
      {
      conversionError (Boolean.class,   "asBoolAtt");
d551 1
a551 4
      return null;
      }

   public Attribute   <Integer>          asIntAtt ()
d553 11
a563 18
      conversionError (Integer.class,   "asIntAtt");

      return null;
      }

   public Attribute   <Double>           asDblAtt ()
      {
      conversionError (Double.class,    "asDblAtt");

      return null;
      }

   public Attribute   <String>           asStringAtt ()
      {
      conversionError (String.class,    "asStringAtt");

      return null;
      }
d565 1
a565 26
   public Attribute   <boolean[]>        asBoolVecAtt ()
      {
      conversionError (boolean[].class, "asBoolVecAtt");

      return null;
      }

   public Attribute   <int[]>            asIntVecAtt ()
      {
      conversionError (int[].class,     "asIntVecAtt");

      return null;
      }

   public Attribute   <double[]>         asDblVecAtt ()
      {
      conversionError (double[].class,  "asDblVecAtt");

      return null;
      }

   public Attribute   <BoundSet>         asBoundSetAtt ()
      {
      conversionError (BoundSet.class,  "asBoundSetAtt");

      return null;
d611 11
a621 15
      if (theValueType == Boolean.class)
         return
            new BoolAtt     (theAttID, SPECIFIC_VALUE, (Boolean) theDefValue);

      if (theValueType == Integer.class)
         return
            new IntAtt      (theAttID, SPECIFIC_VALUE, (Integer) theDefValue);

      if (theValueType == Double.class)
         return
            new DblAtt      (theAttID, SPECIFIC_VALUE, (Double)  theDefValue);

      if (theValueType == String.class)
         return
            new StringAtt   (theAttID, SPECIFIC_VALUE, (String)  theDefValue);
d629 1
a629 1
         return new BoolVecAtt (theAttID, SPECIFIC_VALUE, theBoolArr);
d638 1
a638 1
         return new IntVecAtt (theAttID, SPECIFIC_VALUE, theIntArr);
d647 1
a647 1
         return new DblVecAtt (theAttID, SPECIFIC_VALUE, theDblArr);
d681 5
d687 2
a688 15
      if (theValueType == Boolean.class)
         return 
            new BoolAtt     (theAttID, theDefaultCase, null);

      if (theValueType == Integer.class)
         return
            new IntAtt      (theAttID, theDefaultCase, null);

      if (theValueType == Double.class)
         return
            new DblAtt      (theAttID, theDefaultCase, null);

      if (theValueType == String.class)
         return
            new StringAtt   (theAttID, theDefaultCase, null);
d690 5
a694 3
      if (theValueType == boolean[].class)
         return
            new BoolVecAtt  (theAttID, theDefaultCase, null);
d696 2
a697 3
      if (theValueType == int[].class)
         return
            new IntVecAtt   (theAttID, theDefaultCase, null);
d699 2
a700 3
      if (theValueType == double[].class)
         return
            new DblVecAtt   (theAttID, theDefaultCase, null);
d702 2
a703 3
      if (theValueType == BoundSet.class)
         return
            new BoundSetAtt (theAttID, theDefaultCase, null);
d753 1
a753 1
// getAttribute (theValueType, theAttID) methods
d755 3
a757 2
// Each of these methods returns the Attribute identified by theAttID, safely
// converted to type Attribute <V>, where V matches theValueType.
d760 4
a763 3
   private static BoolAtt getAttribute (
         Class <Boolean> theValueType,
         AttID           theAttID)
d765 6
a770 1
      return (BoolAtt) (Object) theAttID.getAttribute ();
d773 8
a780 6
   private static IntAtt getAttribute (
         Class <Integer> theValueType,
         AttID           theAttID)
      {
      return (IntAtt) (Object) theAttID.getAttribute ();
      }
d782 4
a785 10
   private static DblAtt getAttribute (
         Class <Double> theValueType,
         AttID          theAttID)
      {
      return (DblAtt) (Object) theAttID.getAttribute ();
      }

   private static StringAtt getAttribute (
         Class <String> theValueType,
         AttID          theAttID)
d787 1
a787 29
      return (StringAtt) (Object) theAttID.getAttribute ();
      }

   private static BoolVecAtt getAttribute (
         Class <boolean[]> theValueType,
         AttID             theAttID)
      {
      return (BoolVecAtt) (Object) theAttID.getAttribute ();
      }

   private static IntVecAtt getAttribute (
         Class <int[]> theValueType,
         AttID         theAttID)
      {
      return (IntVecAtt) (Object) theAttID.getAttribute ();
      }

   private static DblVecAtt getAttribute (
         Class <double[]> theValueType,
         AttID            theAttID)
      {
      return (DblVecAtt) (Object) theAttID.getAttribute ();
      }

   private static BoundSetAtt getAttribute (
         Class <BoundSet> theValueType,
         AttID            theAttID)
      {
      return (BoundSetAtt) (Object) theAttID.getAttribute ();
d791 1
a791 4
// conversionError (theValueType, methName)
//
// Throws an IllegalArgumentException for a call to an Attribute conversion
// method with an Attribute of the wrong value type.
d793 2
a794 2
//    theValueType: The required value type
//    methName:     The name of the method called.
d797 5
a801 1
   private final void conversionError (Class <?> theValueType, String methName)
d803 3
a805 7
      throw new UnsupportedOperationException (
         "\n\n"
       + "   Attribute." + methName + " was called for an Attribute\n"
       + "   whose value type is not " + theValueType.getSimpleName () + ".\n"
       + "\n"
       + "      Attribute:  " + this + "\n"
       + "      Value Type: " + myValueType.getSimpleName () + "\n");
a845 150
// Private Nested Classes
//==============================================================================

//------------------------------------------------------------------------------
// Nested subclasses
//------------------------------------------------------------------------------

   private static final class BoolAtt extends Attribute <Boolean>
   {
      private BoolAtt (
            AttID       theAttID,
            DefaultCase theDefaultCase,
            Boolean     theDefaultValue)
         {
         super (Boolean.class, theAttID, theDefaultCase, theDefaultValue);
         } 

      public final Attribute <Boolean> asBoolAtt ()
         {
         return this;
         }
  }

//..............................................................................

   private static final class IntAtt extends Attribute <Integer>
   {
      private IntAtt (
            AttID       theAttID,
            DefaultCase theDefaultCase,
            Integer     theDefaultValue)
         {
         super (Integer.class, theAttID, theDefaultCase, theDefaultValue);
         } 

      public final Attribute <Integer> asIntAtt ()
         {
         return this;
         }
   }

//..............................................................................

   private static final class DblAtt extends Attribute <Double>
   {
      private DblAtt (
            AttID       theAttID,
            DefaultCase theDefaultCase,
            Double      theDefaultValue)
         {
         super (Double.class, theAttID, theDefaultCase, theDefaultValue);
         } 

      public final Attribute <Double> asDblAtt ()
         {
         return this;
         }
   }

//..............................................................................

   private static final class StringAtt extends Attribute <String>
   {
      private StringAtt (
            AttID       theAttID,
            DefaultCase theDefaultCase,
            String      theDefaultValue)
         {
         super (String.class, theAttID, theDefaultCase, theDefaultValue);
         } 

      public final Attribute <String> asStringAtt ()
         {
         return this;
         }
   }

//..............................................................................

   private static final class BoolVecAtt extends Attribute <boolean[]>
   {
      private BoolVecAtt (
            AttID       theAttID,
            DefaultCase theDefaultCase,
            boolean[]   theDefaultValue)
         {
         super (boolean[].class, theAttID, theDefaultCase, theDefaultValue);
         } 

      public final Attribute <boolean[]> asBoolVecAtt ()
         {
         return this;
         }
   }

//..............................................................................

   private static final class IntVecAtt extends Attribute <int[]>
   {
      private IntVecAtt (
            AttID       theAttID,
            DefaultCase theDefaultCase,
            int[]       theDefaultValue)
         {
         super (int[].class, theAttID, theDefaultCase, theDefaultValue);
         } 

      public final Attribute <int[]> asIntVecAtt ()
         {
         return this;
         }
   }

//..............................................................................

   private static final class DblVecAtt extends Attribute <double[]>
   {
      private DblVecAtt (
            AttID       theAttID,
            DefaultCase theDefaultCase,
            double[]    theDefaultValue)
         {
         super (double[].class, theAttID, theDefaultCase, theDefaultValue);
         } 

      public final Attribute <double[]> asDblVecAtt ()
         {
         return this;
         }
   }

//..............................................................................

   private static final class BoundSetAtt extends Attribute <BoundSet>
   {
      private BoundSetAtt (
            AttID       theAttID,
            DefaultCase theDefaultCase,
            BoundSet    theDefaultValue)
         {
         super (BoundSet.class, theAttID, theDefaultCase, theDefaultValue);
         } 

      public final Attribute <BoundSet> asBoundSetAtt ()
         {
         return this;
         }
   }

//==============================================================================
@


1.72
log
@Exceptions
@
text
@d691 2
a692 1
      assert (false);
d755 2
a756 1
      assert (false);
@


1.71
log
@Exceptions
@
text
@d875 1
a875 1
      throw new IllegalStateException (
@


1.70
log
@Minor update.
@
text
@d875 1
a875 1
      throw new IllegalArgumentException (
@


1.69
log
@Changed name of method Attribute.allowsSetValue to isModifiable.
@
text
@d474 1
a474 2
            "\n"
          + "\n"
d876 1
a876 2
         "\n"
       + "\n"
@


1.68
log
@Exceptions
@
text
@d493 1
a493 1
// allowsSetValue ()
d499 1
a499 1
   public final boolean allowsSetValue ()
d506 1
a506 1
                     allowsSetValue ();
@


1.67
log
@Dismantling class Session.
@
text
@d473 5
a477 3
         abortWmsg (
            "   Attribute.appliesTo (Class) was called "
          +    "where the Class is Element.class.");
d867 3
a869 2
// Aborts with an error message for a call to an Attribute conversion method
// with an Attribute of the wrong value type.
d876 8
a883 4
      abortWmsg (
         "   Attribute." + methName + " was called for an Attribute\n"
       + "   whose value type is not "
       +     theValueType.getSimpleName () + ".");
@


1.66
log
@Session removal.
@
text
@d484 2
a485 3
               getSession ().
                  getAttRepMgr ().
                     getAttRepFor (this);
d502 3
a504 4
               getSession ().
                  getAttRepMgr ().
                     getAttRepFor (this).
                        allowsSetValue ();
@


1.65
log
@Removed Enum AccessStyle.
@
text
@d482 1
a482 1
         Session.
d484 3
a486 2
               getAttRepMgr ().
                  getAttRepFor (this);
d501 1
a501 1
         Session.
d503 4
a506 3
               getAttRepMgr ().
                  getAttRepFor (this).
                     allowsSetValue ();
@


1.64
log
@Replaced theAtt.getIsInputAtt (theProblem) with theAtt.allowsSetValue ().
@
text
@d499 1
a499 3
      AttRep theAttRep;

      theAttRep =
d503 2
a504 3
                  getAttRepFor (this);

      return (theAttRep.getAccessStyle () == AccessStyle.INPUT);
@


1.63
log
@Made enum DefaultCase non-nested.
@
text
@d491 1
a491 1
// getIsInputAtt (theProblem)
d493 2
a494 4
// Returns true,  if the WIT attributes represented by this Attribute are all
//                input attributes:  their values can    be set.
// Returns false, if the WIT attributes represented by this Attribute are all
//                output attributes: their values cannot be set.
d497 1
a497 1
   public final boolean getIsInputAtt (Problem theProblem)
a500 2
      argMustBeActive (theProblem, "theProblem", "Attribute.getIsInputAtt");

d502 4
a505 1
         theProblem.getSession ().getAttRepMgr ().getAttRepFor (this);
@


1.62
log
@Changed method name:
   Attribute.values () ==> Attribute.getAllAttributes ()
@
text
@d11 1
a11 1
import static com.ibm.witj.Attribute.DefaultCase.*;
a783 18
// Package Internal Nested Enums
//==============================================================================

//------------------------------------------------------------------------------
// Nested Enum DefaultCase
//
// Indicates which kind of default value an Attribute has.
//------------------------------------------------------------------------------

   enum DefaultCase
   {
      SPECIFIC_VALUE,
      LAST_PERIOD,
      BOUND_SET,
      NO_DEFAULT,
   }

//==============================================================================
@


1.61
log
@Implemented method theAtt.requiresStochMode ().
@
text
@d424 1
a424 1
// values
d429 1
a429 1
   public static Attribute <?>[] values ()
@


1.60
log
@Added theAtt.requiresMaterialPart ().
@
text
@d523 12
@


1.59
log
@Attributes.
@
text
@d512 11
@


1.58
log
@Attributes.
@
text
@d529 1
a529 1
   public final Attribute <Boolean>        asBoolAtt ()
d531 1
a531 1
      checkForConv (       Boolean.class, "asBoolAtt");
d533 1
a533 1
      return (BoolAtt) (Object) this;
d536 1
a536 1
   public final Attribute <Integer>        asIntAtt ()
d538 1
a538 1
      checkForConv (       Integer.class, "asIntAtt");
d540 1
a540 1
      return (IntAtt) (Object) this;
d543 1
a543 1
   public final Attribute <Double>        asDblAtt ()
d545 1
a545 1
      checkForConv (       Double.class, "asDblAtt");
d547 1
a547 1
      return (DblAtt) (Object) this;
d550 1
a550 1
   public final Attribute <String>        asStringAtt ()
d552 1
a552 1
      checkForConv (       String.class, "asStringAtt");
d554 1
a554 1
      return (StringAtt) (Object) this;
d557 1
a557 1
   public final Attribute <boolean[]>        asBoolVecAtt ()
d559 1
a559 1
      checkForConv (       boolean[].class, "asBoolVecAtt");
d561 1
a561 1
      return (BoolVecAtt) (Object) this;
d564 1
a564 1
   public final Attribute <int[]>        asIntVecAtt ()
d566 1
a566 1
      checkForConv (       int[].class, "asIntVecAtt");
d568 1
a568 1
      return (IntVecAtt) (Object) this;
d571 1
a571 1
   public final Attribute <double[]>        asDblVecAtt ()
d573 1
a573 1
      checkForConv (       double[].class, "asDblVecAtt");
d575 1
a575 1
      return (DblVecAtt) (Object) this;
d578 1
a578 1
   public final Attribute <BoundSet>        asBoundSetAtt ()
d580 1
a580 1
      checkForConv (       BoundSet.class, "asBoundSetAtt");
d582 1
a582 1
      return (BoundSetAtt) (Object) this;
d862 1
a862 1
// checkForConv (theValueType, methName)
d864 4
a867 3
// Verifies that the value type of this Attribute matches theValueType for the
// implementation of the Attribute conversion method whose name is given by
// methName.
d870 1
a870 1
   private final void checkForConv (Class <?> theValueType, String methName)
d872 4
a875 5
      if (myValueType != theValueType)
         abortWmsg (
            "   Attribute." + methName + " was called for an Attribute\n"
          + "   whose value type is not "
          +     theValueType.getSimpleName () + ".");
d932 5
d950 5
d968 5
d986 5
d1004 5
d1022 5
d1040 5
d1058 5
@


1.57
log
@Attributes.
@
text
@d740 1
a740 3
// defaultIsLastPeriod ()
//
// Returns true, iff the default value of this Attribute is nPeriods - 1.
d743 1
a743 1
   final boolean defaultIsLastPeriod ()
d745 1
a745 1
      return (myDefaultCase == LAST_PERIOD);
d748 1
a748 5
//------------------------------------------------------------------------------
// Accessors
//------------------------------------------------------------------------------

   final AttID getAttID ()
d750 1
a750 1
      return myAttID;
@


1.56
log
@Attributes.
@
text
@d612 1
a612 1
// setDefaultValues ()
d614 5
a618 2
// For each Attribute, this method either sets its default value or specifies
// that it has none.
d621 4
a624 1
   static void setDefaultValues ()
d626 19
a644 131
      setDefaultValue   (accAfterOptImp      (),        false);
      setDefaultValue   (accAfterSoftLB      (),        false);
      setDefaultNone    (accelerated         ());
      setDefaultValue   (asapPipOrder        (),        false);
      setDefaultValue   (autoPriority        (),        false);
      setDefaultNone    (bomIndex            ());
      setDefaultNone    (bopIndex            ());
      setDefaultNone    (boundsValue         ());
      setDefaultLastPer (buildAheadUB        ());
      setDefaultValue   (buildAsap           (),        false);
      setDefaultValue   (buildNstn           (),        false);
      setDefaultValue   (compPrices          (),        false);
      setDefaultValue   (computeCriticalList (),        false);
      setDefaultValue   (consRate            (),          1.0);
      setDefaultNone    (consVol             ());
      setDefaultBounds  (cumShipBounds       ());
      setDefaultValue   (cumShipReward       (),          0.0);
      setDefaultValue   (currentScenario     (),            0);
      setDefaultNone    (demandName          ());
      setDefaultValue   (demandVol           (),          0.0);
      setDefaultValue   (earliestPeriod      (),            0);
      setDefaultValue   (equitability        (),            1);
      setDefaultNone    (excessVol           ());
      setDefaultBounds  (execBounds          ());
      setDefaultValue   (execCost            (),          0.0);
      setDefaultValue   (execEmptyBom        (),         true);
      setDefaultValue   (execPenalty         (),          0.0);
      setDefaultValue   (execVol             (),          0.0);
      setDefaultNone    (executable          ());
      setDefaultValue   (expAllowed          (),         true);
      setDefaultValue   (expAversion         (),          0.0);
      setDefaultValue   (expCutoff           (),         0.01);
      setDefaultValue   (expNetAversion      (),          0.0);
      setDefaultNone    (extOptActive        ());
      setDefaultValue   (falloutRate         (),          0.0);
      setDefaultNone    (feasible            ());
      setDefaultValue   (focusHorizon        (),           -1);
      setDefaultNone    (focusShortageVol    ());
      setDefaultValue   (forcedMultiEq       (),        false);
      setDefaultNone    (fssExecVol          ());
      setDefaultValue   (fssShipVol          (),          0.0);
      setDefaultNone    (fssSubVol           ());
      setDefaultNone    (heurAllocActive     ());
      setDefaultValue   (highPrecisionWD     (),        false);
      setDefaultNone    (impactPeriod        ());
      setDefaultValue   (incLotSize          (),          0.0);
      setDefaultValue   (incLotSize2         (),          0.0);
      setDefaultValue   (independentOffsets  (),        false);
      setDefaultValue   (intExecVols         (),        false);
      setDefaultValue   (intShipVols         (),        false);
      setDefaultValue   (intSubVols          (),        false);
      setDefaultLastPer (latestPeriod        ());
      setDefaultValue   (lotSize2Thresh      (),          0.0);
      setDefaultValue   (lotSizeTol          (),      0.00001);
      setDefaultValue   (mandEC              (),        false);
      setDefaultValue   (minLotSize          (),          0.0);
      setDefaultValue   (minLotSize2         (),          0.0);
      setDefaultValue   (minimalExcess       (),        false);
      setDefaultValue   (mipMode             (),        false);
      setDefaultNone    (mrpConsVol          ());
      setDefaultNone    (mrpExcessVol        ());
      setDefaultNone    (mrpExecVol          ());
      setDefaultValue   (mrpNetAllowed       (),        false);
      setDefaultNone    (mrpResidualVol      ());
      setDefaultNone    (mrpSubVol           ());
      setDefaultValue   (multiExec           (),        false);
      setDefaultValue   (multiRoute          (),        false);
      setDefaultValue   (nPeriods            (),           26);
      setDefaultValue   (nScenarios          (),            1);
      setDefaultValue   (netAllowed          (),         true);
      setDefaultValue   (nstnResidual        (),        false);
      setDefaultNone    (objValue            ());
      setDefaultValue   (objectStage         (),            0);
      setDefaultValue   (offset              (),          0.0);
      setDefaultNone    (operationName       ());
      setDefaultNone    (partName            ());
      setDefaultValue   (penExec             (),        false);
      setDefaultValue   (perfPegging         (),        false);
      setDefaultValue   (periodStage         (),            0);
      setDefaultValue   (pgdCritListMode     (),        false);
      setDefaultNone    (pipExists           ());
      setDefaultValue   (pipSeqFromHeur      (),        false);
      setDefaultNone    (postprocessed       ());
      setDefaultValue   (prefHighStockSLBs   (),        false);
      setDefaultNone    (preprocessed        ());
      setDefaultValue   (priority            (),            0);
      setDefaultValue   (probability         (),          1.0);
      setDefaultNone    (prodVol             ());
      setDefaultValue   (productRate         (),          1.0);
      setDefaultValue   (propRtg             (),        false);
      setDefaultNone    (reqVol              ());
      setDefaultNone    (residualVol         ());
      setDefaultValue   (respectStockSLBs    (),        false);
      setDefaultValue   (roundReqVols        (),        false);
      setDefaultValue   (routingShare        (),          1.0);
      setDefaultValue   (scrapAllowed        (),         true);
      setDefaultValue   (scrapCost           (),          0.0);
      setDefaultNone    (scrapVol            ());
      setDefaultValue   (searchInc           (),          1.0);
      setDefaultValue   (selForDel           (),        false);
      setDefaultValue   (selSplit            (),        false);
      setDefaultNone    (shadowPrice         ());
      setDefaultValue   (shipLateAllowed     (),         true);
      setDefaultLastPer (shipLateUB          ());
      setDefaultValue   (shipReward          (),          0.0);
      setDefaultValue   (shipVol             (),          0.0);
      setDefaultValue   (singleSource        (),        false);
      setDefaultValue   (skipFailures        (),         true);
      setDefaultValue   (solverLogFileName   (), "solver.log");
      setDefaultValue   (stageByObject       (),        false);
      setDefaultValue   (stochMode           (),        false);
      setDefaultNone    (stochSolnMode       ());
      setDefaultBounds  (stockBounds         ());
      setDefaultValue   (stockCost           (),          0.0);
      setDefaultValue   (stockReallocation   (),        false);
      setDefaultNone    (stockVol            ());
      setDefaultValue   (subCost             (),          0.0);
      setDefaultNone    (subIndex            ());
      setDefaultValue   (subVol              (),          0.0);
      setDefaultValue   (supplyVol           (),          0.0);
      setDefaultValue   (tieBreakPropRt      (),        false);
      setDefaultValue   (title               (),   "Untitled");
      setDefaultValue   (truncOffsets        (),        false);
      setDefaultValue   (twoLevelLotSizes    (),        false);
      setDefaultValue   (twoWayMultiExec     (),        false);
      setDefaultValue   (useFocusHorizons    (),         true);
      setDefaultValue   (userHeurStart       (),        false);
      setDefaultValue   (wbounds             (),      10000.0);
      setDefaultValue   (yieldRate           (),          1.0);
 
      for (AttID theAttID: AttID.values ())
d646 5
a650 1
         assert (theAttID.getAttribute ().myDefaultCase != null);
d652 85
d767 1
a767 11
// Private Constructor
//==============================================================================

   private Attribute (Class <V> theValueType, AttID theAttID)
      {
      myValueType = theValueType;
      myAttID     = theAttID;
      }

//==============================================================================
// Private Methods
d771 1
a771 1
// newInstance (theValueType, theAttID)
d773 1
a773 2
// Creates and returns a new Attribute <V>, where V matches theValueType.
// The newly created Attribute is to be identified by theAttID.
d776 7
a782 6
   static Attribute <?> newInstance (Class <?> theValueType, AttID theAttID)
      {
      if (theValueType == Boolean.class)
         {
         return new BoolAtt (theAttID);
         }
d784 3
a786 4
      if (theValueType == double[].class)
         {
         return new DblVecAtt (theAttID);
         }
d788 11
a798 4
      if (theValueType == Integer.class)
         {
         return new IntAtt (theAttID);
         }
d800 3
a802 29
      if (theValueType == Double.class)
         {
         return new DblAtt (theAttID);
         }

      if (theValueType == String.class)
         {
         return new StringAtt (theAttID);
         }

      if (theValueType == boolean[].class)
         {
         return new BoolVecAtt (theAttID);
         }

      if (theValueType == int[].class)
         {
         return new IntVecAtt (theAttID);
         }

      if (theValueType == BoundSet.class)
         {
         return new BoundSetAtt (theAttID);
         }

      assert (false);

      return null;
      }
a867 113
// setDefaultValue (theAtt, theValue) methods
//
// Each of these methods sets the default value of theAtt to the specific value
// given by theValue.
//------------------------------------------------------------------------------

   private static void setDefaultValue (
         Attribute <Boolean> theAtt,
         Boolean             theValue)
      {
      theAtt.setDefaultValue (theValue);
      }

   private static void setDefaultValue (
         Attribute <Integer> theAtt,
         Integer             theValue)
      {
      theAtt.setDefaultValue (theValue);
      }

   private static void setDefaultValue (
         Attribute <Double> theAtt,
         Double             theValue)
      {
      theAtt.setDefaultValue (theValue);
      }

   private static void setDefaultValue (
         Attribute <String> theAtt,
         String             theValue)
      {
      theAtt.setDefaultValue (theValue);
      }

   private static void setDefaultValue (
         Attribute <boolean[]> theAtt,
         boolean               theValue)
      {
      theAtt.setDefaultValue (new boolean[]{theValue});
      }

   private static void setDefaultValue (
         Attribute <int[]> theAtt,
         int               theValue)
      {
      theAtt.setDefaultValue (new int[]{theValue});
      }

   private static void setDefaultValue (
         Attribute <double[]> theAtt,
         double               theValue)
      {
      theAtt.setDefaultValue (new double[]{theValue});
      }

//------------------------------------------------------------------------------
// setDefaultValue (theValue)
//
// Sets the default value of this Attribute to the specific value given by
// theValue.
//------------------------------------------------------------------------------

   private final void setDefaultValue (V theValue)
      {
      assert (myDefaultCase == null);

      myDefaultCase  = SPECIFIC_VALUE;
      myDefaultValue = theValue;
      }

//------------------------------------------------------------------------------
// setDefaultLastPer (theAtt)
//
// Specifies that the default value for theAtt is nPeriods - 1.
//------------------------------------------------------------------------------

   private static void setDefaultLastPer (Attribute <?> theAtt)
      {
      assert (theAtt.myDefaultCase == null);

      assert (   (theAtt.getValueType () == Integer.class)
              || (theAtt.getValueType () == int[]  .class));

      theAtt.myDefaultCase = LAST_PERIOD;
      }

//------------------------------------------------------------------------------
// setDefaultBounds (theAtt)
//
// Specifies the default value for a BoundSet Attribute.
//------------------------------------------------------------------------------

   private static void setDefaultBounds (Attribute <BoundSet> theAtt)
      {
      assert (theAtt.myDefaultCase == null);

      theAtt.myDefaultCase = BOUND_SET;
      }

//------------------------------------------------------------------------------
// setDefaultNone (theAtt)
//
// Specifies that theAtt has no default value.
//------------------------------------------------------------------------------

   private static void setDefaultNone (Attribute <?> theAtt)
      {
      assert (theAtt.myDefaultCase == null);

      theAtt.myDefaultCase = NO_DEFAULT;
      }

//------------------------------------------------------------------------------
d910 1
a910 1
   private DefaultCase myDefaultCase = null;
d919 1
a919 1
   private V myDefaultValue = null;
d922 1
a922 1
// Private Nested Classes and Enums
a925 14
// Nested Enum DefaultCase
//
// Indicates which kind of default value an Attribute has.
//------------------------------------------------------------------------------

   public enum DefaultCase
   {
      SPECIFIC_VALUE,
      LAST_PERIOD,
      BOUND_SET,
      NO_DEFAULT,
   }

//------------------------------------------------------------------------------
d931 8
a938 5
      private BoolAtt (AttID theAttID)
         {
         super (Boolean.class, theAttID);
         }
   }
d944 4
a947 1
      private IntAtt (AttID theAttID)
d949 2
a950 2
         super (Integer.class, theAttID);
         }
d957 4
a960 1
      private DblAtt (AttID theAttID)
d962 2
a963 2
         super (Double.class, theAttID);
         }
d970 4
a973 1
      private StringAtt (AttID theAttID)
d975 2
a976 2
         super (String.class, theAttID);
         }
d981 1
a981 1
   private static final class BoundSetAtt extends Attribute <BoundSet>
d983 4
a986 1
      private BoundSetAtt (AttID theAttID)
d988 2
a989 2
         super (BoundSet.class, theAttID);
         }
d994 1
a994 1
   private static final class BoolVecAtt extends Attribute <boolean[]>
d996 4
a999 1
      private BoolVecAtt (AttID theAttID)
d1001 2
a1002 2
         super (boolean[].class, theAttID);
         }
d1007 1
a1007 1
   private static final class IntVecAtt extends Attribute <int[]>
d1009 4
a1012 1
      private IntVecAtt (AttID theAttID)
d1014 2
a1015 2
         super (int[].class, theAttID);
         }
d1020 1
a1020 1
   private static final class DblVecAtt extends Attribute <double[]>
d1022 4
a1025 1
      private DblVecAtt (AttID theAttID)
d1027 2
a1028 2
         super (double[].class, theAttID);
         }
@


1.55
log
@Attributes
@
text
@d12 1
d31 2
a32 3
   public static Attribute <Boolean>               accAfterOptImp ()
      {          
      return  getAttribute (Boolean  .class, AttID.accAfterOptImp);
d34 2
a35 6

//..............................................................................

   public static Attribute <Boolean>               accAfterSoftLB ()
      {          
      return  getAttribute (Boolean  .class, AttID.accAfterSoftLB);
d37 2
a38 7

//..............................................................................


   public static Attribute <Boolean>               accelerated ()
      {          
      return  getAttribute (Boolean  .class, AttID.accelerated);
d40 2
a41 7

//..............................................................................


   public static Attribute <Boolean>               asapPipOrder ()
      {          
      return  getAttribute (Boolean  .class, AttID.asapPipOrder);
d43 2
a44 7

//..............................................................................


   public static Attribute <Boolean>               autoPriority ()
      {          
      return  getAttribute (Boolean  .class, AttID.autoPriority);
d46 2
a47 7

//..............................................................................


   public static Attribute <Integer>               bomIndex ()
      {          
      return  getAttribute (Integer  .class, AttID.bomIndex);
d49 2
a50 7

//..............................................................................


   public static Attribute <Integer>               bopIndex ()
      {          
      return  getAttribute (Integer  .class, AttID.bopIndex);
d52 2
a53 7

//..............................................................................


   public static Attribute <Double>                boundsValue ()
      {          
      return  getAttribute (Double   .class, AttID.boundsValue);
d55 2
a56 7

//..............................................................................


   public static Attribute <int[]>                 buildAheadUB ()
      {          
      return  getAttribute (int[]    .class, AttID.buildAheadUB);
d58 2
a59 7

//..............................................................................


   public static Attribute <Boolean>               buildAsap ()
      {          
      return  getAttribute (Boolean  .class, AttID.buildAsap);
d61 2
a62 7

//..............................................................................


   public static Attribute <Boolean>               buildNstn ()
      {          
      return  getAttribute (Boolean  .class, AttID.buildNstn);
d64 2
a65 7

//..............................................................................


   public static Attribute <Boolean>               compPrices ()
      {          
      return  getAttribute (Boolean  .class, AttID.compPrices);
d67 2
a68 7

//..............................................................................


   public static Attribute <Boolean>               computeCriticalList ()
      {          
      return  getAttribute (Boolean  .class, AttID.computeCriticalList);
d70 2
a71 7

//..............................................................................


   public static Attribute <double[]>              consRate ()
      {          
      return  getAttribute (double[] .class, AttID.consRate);
d73 2
a74 7

//..............................................................................


   public static Attribute <double[]>              consVol ()
      {          
      return  getAttribute (double[] .class, AttID.consVol);
d76 2
a77 7

//..............................................................................


   public static Attribute <BoundSet>              cumShipBounds ()
      {          
      return  getAttribute (BoundSet .class, AttID.cumShipBounds);
d79 2
a80 7

//..............................................................................


   public static Attribute <double[]>              cumShipReward ()
      {          
      return  getAttribute (double[] .class, AttID.cumShipReward);
d82 2
a83 7

//..............................................................................


   public static Attribute <Integer>               currentScenario ()
      {          
      return  getAttribute (Integer  .class, AttID.currentScenario);
d85 2
a86 7

//..............................................................................


   public static Attribute <String>                demandName ()
      {          
      return  getAttribute (String   .class, AttID.demandName);
d88 2
a89 7

//..............................................................................


   public static Attribute <double[]>              demandVol ()
      {          
      return  getAttribute (double[] .class, AttID.demandVol);
d91 2
a92 7

//..............................................................................


   public static Attribute <Integer>               earliestPeriod ()
      {          
      return  getAttribute (Integer  .class, AttID.earliestPeriod);
d94 2
a95 7

//..............................................................................


   public static Attribute <Integer>               equitability ()
      {          
      return  getAttribute (Integer  .class, AttID.equitability);
d97 2
a98 7

//..............................................................................


   public static Attribute <double[]>              excessVol ()
      {          
      return  getAttribute (double[] .class, AttID.excessVol);
d100 2
a101 7

//..............................................................................


   public static Attribute <BoundSet>              execBounds ()
      {          
      return  getAttribute (BoundSet .class, AttID.execBounds);
d103 2
a104 7

//..............................................................................


   public static Attribute <double[]>              execCost ()
      {          
      return  getAttribute (double[] .class, AttID.execCost);
d106 2
a107 7

//..............................................................................


   public static Attribute <Boolean>               execEmptyBom ()
      {          
      return  getAttribute (Boolean  .class, AttID.execEmptyBom);
d109 2
a110 7

//..............................................................................


   public static Attribute <Double>                execPenalty ()
      {          
      return  getAttribute (Double   .class, AttID.execPenalty);
d112 2
a113 7

//..............................................................................


   public static Attribute <double[]>              execVol ()
      {          
      return  getAttribute (double[] .class, AttID.execVol);
d115 2
a116 7

//..............................................................................


   public static Attribute <boolean[]>             executable ()
      {          
      return  getAttribute (boolean[].class, AttID.executable);
d118 2
a119 7

//..............................................................................


   public static Attribute <Boolean>               expAllowed ()
      {          
      return  getAttribute (Boolean  .class, AttID.expAllowed);
d121 2
a122 7

//..............................................................................


   public static Attribute <Double>                expAversion ()
      {          
      return  getAttribute (Double   .class, AttID.expAversion);
d124 2
a125 7

//..............................................................................


   public static Attribute <Double>                expCutoff ()
      {          
      return  getAttribute (Double   .class, AttID.expCutoff);
d127 2
a128 7

//..............................................................................


   public static Attribute <Double>                expNetAversion ()
      {          
      return  getAttribute (Double   .class, AttID.expNetAversion);
d130 2
a131 7

//..............................................................................


   public static Attribute <Boolean>               extOptActive ()
      {          
      return  getAttribute (Boolean  .class, AttID.extOptActive);
d133 2
a134 7

//..............................................................................


   public static Attribute <Double>                falloutRate ()
      {          
      return  getAttribute (Double   .class, AttID.falloutRate);
d136 2
a137 7

//..............................................................................


   public static Attribute <Boolean>               feasible ()
      {          
      return  getAttribute (Boolean  .class, AttID.feasible);
d139 2
a140 7

//..............................................................................


   public static Attribute <Integer>               focusHorizon ()
      {          
      return  getAttribute (Integer  .class, AttID.focusHorizon);
d142 2
a143 7

//..............................................................................


   public static Attribute <double[]>              focusShortageVol ()
      {          
      return  getAttribute (double[] .class, AttID.focusShortageVol);
d145 2
a146 7

//..............................................................................


   public static Attribute <Boolean>               forcedMultiEq ()
      {          
      return  getAttribute (Boolean  .class, AttID.forcedMultiEq);
d148 2
a149 7

//..............................................................................


   public static Attribute <double[]>              fssExecVol ()
      {          
      return  getAttribute (double[] .class, AttID.fssExecVol);
d151 2
a152 7

//..............................................................................


   public static Attribute <double[]>              fssShipVol ()
      {          
      return  getAttribute (double[] .class, AttID.fssShipVol);
d154 2
a155 7

//..............................................................................


   public static Attribute <double[]>              fssSubVol ()
      {          
      return  getAttribute (double[] .class, AttID.fssSubVol);
d157 2
a158 7

//..............................................................................


   public static Attribute <Boolean>               heurAllocActive ()
      {          
      return  getAttribute (Boolean  .class, AttID.heurAllocActive);
d160 2
a161 7

//..............................................................................


   public static Attribute <Boolean>               highPrecisionWD ()
      {          
      return  getAttribute (Boolean  .class, AttID.highPrecisionWD);
d163 2
a164 7

//..............................................................................


   public static Attribute <int[]>                 impactPeriod ()
      {          
      return  getAttribute (int[]    .class, AttID.impactPeriod);
d166 2
a167 7

//..............................................................................


   public static Attribute <double[]>              incLotSize ()
      {          
      return  getAttribute (double[] .class, AttID.incLotSize);
d169 2
a170 7

//..............................................................................


   public static Attribute <double[]>              incLotSize2 ()
      {          
      return  getAttribute (double[] .class, AttID.incLotSize2);
d172 2
a173 7

//..............................................................................


   public static Attribute <Boolean>               independentOffsets ()
      {          
      return  getAttribute (Boolean  .class, AttID.independentOffsets);
d175 2
a176 7

//..............................................................................


   public static Attribute <Boolean>               intExecVols ()
      {          
      return  getAttribute (Boolean  .class, AttID.intExecVols);
d178 2
a179 7

//..............................................................................


   public static Attribute <Boolean>               intShipVols ()
      {          
      return  getAttribute (Boolean  .class, AttID.intShipVols);
d181 2
a182 7

//..............................................................................


   public static Attribute <Boolean>               intSubVols ()
      {          
      return  getAttribute (Boolean  .class, AttID.intSubVols);
d184 2
a185 7

//..............................................................................


   public static Attribute <Integer>               latestPeriod ()
      {          
      return  getAttribute (Integer  .class, AttID.latestPeriod);
d187 2
a188 7

//..............................................................................


   public static Attribute <double[]>              lotSize2Thresh ()
      {          
      return  getAttribute (double[] .class, AttID.lotSize2Thresh);
d190 2
a191 7

//..............................................................................


   public static Attribute <Double>                lotSizeTol ()
      {          
      return  getAttribute (Double   .class, AttID.lotSizeTol);
d193 2
a194 7

//..............................................................................


   public static Attribute <Boolean>               mandEC ()
      {          
      return  getAttribute (Boolean  .class, AttID.mandEC);
d196 2
a197 7

//..............................................................................


   public static Attribute <double[]>              minLotSize ()
      {          
      return  getAttribute (double[] .class, AttID.minLotSize);
d199 2
a200 7

//..............................................................................


   public static Attribute <double[]>              minLotSize2 ()
      {          
      return  getAttribute (double[] .class, AttID.minLotSize2);
d202 2
a203 7

//..............................................................................


   public static Attribute <Boolean>               minimalExcess ()
      {          
      return  getAttribute (Boolean  .class, AttID.minimalExcess);
d205 2
a206 7

//..............................................................................


   public static Attribute <Boolean>               mipMode ()
      {          
      return  getAttribute (Boolean  .class, AttID.mipMode);
d208 2
a209 7

//..............................................................................


   public static Attribute <double[]>              mrpConsVol ()
      {          
      return  getAttribute (double[] .class, AttID.mrpConsVol);
d211 2
a212 7

//..............................................................................


   public static Attribute <double[]>              mrpExcessVol ()
      {          
      return  getAttribute (double[] .class, AttID.mrpExcessVol);
d214 2
a215 7

//..............................................................................


   public static Attribute <double[]>              mrpExecVol ()
      {          
      return  getAttribute (double[] .class, AttID.mrpExecVol);
d217 2
a218 7

//..............................................................................


   public static Attribute <Boolean>               mrpNetAllowed ()
      {          
      return  getAttribute (Boolean  .class, AttID.mrpNetAllowed);
d220 2
a221 7

//..............................................................................


   public static Attribute <double[]>              mrpResidualVol ()
      {          
      return  getAttribute (double[] .class, AttID.mrpResidualVol);
d223 2
a224 7

//..............................................................................


   public static Attribute <double[]>              mrpSubVol ()
      {          
      return  getAttribute (double[] .class, AttID.mrpSubVol);
d226 2
a227 7

//..............................................................................


   public static Attribute <Boolean>               multiExec ()
      {          
      return  getAttribute (Boolean  .class, AttID.multiExec);
d229 2
a230 7

//..............................................................................


   public static Attribute <Boolean>               multiRoute ()
      {          
      return  getAttribute (Boolean  .class, AttID.multiRoute);
d232 2
a233 7

//..............................................................................


   public static Attribute <Integer>               nPeriods ()
      {          
      return  getAttribute (Integer  .class, AttID.nPeriods);
d235 2
a236 7

//..............................................................................


   public static Attribute <Integer>               nScenarios ()
      {          
      return  getAttribute (Integer  .class, AttID.nScenarios);
d238 2
a239 7

//..............................................................................


   public static Attribute <Boolean>               netAllowed ()
      {          
      return  getAttribute (Boolean  .class, AttID.netAllowed);
d241 2
a242 7

//..............................................................................


   public static Attribute <Boolean>               nstnResidual ()
      {          
      return  getAttribute (Boolean  .class, AttID.nstnResidual);
d244 2
a245 7

//..............................................................................


   public static Attribute <Double>                objValue ()
      {          
      return  getAttribute (Double   .class, AttID.objValue);
d247 2
a248 7

//..............................................................................


   public static Attribute <Integer>               objectStage ()
      {          
      return  getAttribute (Integer  .class, AttID.objectStage);
d250 2
a251 7

//..............................................................................


   public static Attribute <double[]>              offset ()
      {          
      return  getAttribute (double[] .class, AttID.offset);
d253 2
a254 7

//..............................................................................


   public static Attribute <String>                operationName ()
      {          
      return  getAttribute (String   .class, AttID.operationName);
d256 2
a257 7

//..............................................................................


   public static Attribute <String>                partName ()
      {          
      return  getAttribute (String   .class, AttID.partName);
d259 2
a260 7

//..............................................................................


   public static Attribute <Boolean>               penExec ()
      {          
      return  getAttribute (Boolean  .class, AttID.penExec);
d262 2
a263 7

//..............................................................................


   public static Attribute <Boolean>               perfPegging ()
      {          
      return  getAttribute (Boolean  .class, AttID.perfPegging);
d265 2
a266 7

//..............................................................................


   public static Attribute <int[]>                 periodStage ()
      {          
      return  getAttribute (int[]    .class, AttID.periodStage);
d268 2
a269 7

//..............................................................................


   public static Attribute <Boolean>               pgdCritListMode ()
      {          
      return  getAttribute (Boolean  .class, AttID.pgdCritListMode);
d271 2
a272 7

//..............................................................................


   public static Attribute <Boolean>               pipExists ()
      {          
      return  getAttribute (Boolean  .class, AttID.pipExists);
d274 2
a275 7

//..............................................................................


   public static Attribute <Boolean>               pipSeqFromHeur ()
      {          
      return  getAttribute (Boolean  .class, AttID.pipSeqFromHeur);
d277 2
a278 7

//..............................................................................


   public static Attribute <Boolean>               postprocessed ()
      {          
      return  getAttribute (Boolean  .class, AttID.postprocessed);
d280 2
a281 7

//..............................................................................


   public static Attribute <Boolean>               prefHighStockSLBs ()
      {          
      return  getAttribute (Boolean  .class, AttID.prefHighStockSLBs);
d283 2
a284 7

//..............................................................................


   public static Attribute <Boolean>               preprocessed ()
      {          
      return  getAttribute (Boolean  .class, AttID.preprocessed);
d286 2
a287 7

//..............................................................................


   public static Attribute <int[]>                 priority ()
      {          
      return  getAttribute (int[]    .class, AttID.priority);
d289 2
a290 7

//..............................................................................


   public static Attribute <Double>                probability ()
      {          
      return  getAttribute (Double   .class, AttID.probability);
d292 2
a293 7

//..............................................................................


   public static Attribute <double[]>              prodVol ()
      {          
      return  getAttribute (double[] .class, AttID.prodVol);
d295 2
a296 7

//..............................................................................


   public static Attribute <double[]>              productRate ()
      {          
      return  getAttribute (double[] .class, AttID.productRate);
d298 2
a299 7

//..............................................................................


   public static Attribute <boolean[]>             propRtg ()
      {          
      return  getAttribute (boolean[].class, AttID.propRtg);
d301 2
a302 7

//..............................................................................


   public static Attribute <double[]>              reqVol ()
      {          
      return  getAttribute (double[] .class, AttID.reqVol);
d304 2
a305 7

//..............................................................................


   public static Attribute <double[]>              residualVol ()
      {          
      return  getAttribute (double[] .class, AttID.residualVol);
d307 2
a308 7

//..............................................................................


   public static Attribute <Boolean>               respectStockSLBs ()
      {          
      return  getAttribute (Boolean  .class, AttID.respectStockSLBs);
d310 2
a311 7

//..............................................................................


   public static Attribute <Boolean>               roundReqVols ()
      {          
      return  getAttribute (Boolean  .class, AttID.roundReqVols);
d313 2
a314 7

//..............................................................................


   public static Attribute <double[]>              routingShare ()
      {          
      return  getAttribute (double[] .class, AttID.routingShare);
d316 2
a317 7

//..............................................................................


   public static Attribute <Boolean>               scrapAllowed ()
      {          
      return  getAttribute (Boolean  .class, AttID.scrapAllowed);
d319 2
a320 7

//..............................................................................


   public static Attribute <double[]>              scrapCost ()
      {          
      return  getAttribute (double[] .class, AttID.scrapCost);
d322 2
a323 7

//..............................................................................


   public static Attribute <double[]>              scrapVol ()
      {          
      return  getAttribute (double[] .class, AttID.scrapVol);
d325 2
a326 7

//..............................................................................


   public static Attribute <Double>                searchInc ()
      {          
      return  getAttribute (Double   .class, AttID.searchInc);
d328 2
a329 7

//..............................................................................


   public static Attribute <Boolean>               selForDel ()
      {          
      return  getAttribute (Boolean  .class, AttID.selForDel);
d331 2
a332 7

//..............................................................................


   public static Attribute <Boolean>               selSplit ()
      {          
      return  getAttribute (Boolean  .class, AttID.selSplit);
d334 2
a335 7

//..............................................................................


   public static Attribute <double[]>              shadowPrice ()
      {          
      return  getAttribute (double[] .class, AttID.shadowPrice);
d337 2
a338 7

//..............................................................................


   public static Attribute <Boolean>               shipLateAllowed ()
      {          
      return  getAttribute (Boolean  .class, AttID.shipLateAllowed);
d340 2
a341 7

//..............................................................................


   public static Attribute <int[]>                 shipLateUB ()
      {          
      return  getAttribute (int[]    .class, AttID.shipLateUB);
d343 2
a344 7

//..............................................................................


   public static Attribute <double[]>              shipReward ()
      {          
      return  getAttribute (double[] .class, AttID.shipReward);
d346 2
a347 7

//..............................................................................


   public static Attribute <double[]>              shipVol ()
      {          
      return  getAttribute (double[] .class, AttID.shipVol);
d349 2
a350 7

//..............................................................................


   public static Attribute <Boolean>               singleSource ()
      {          
      return  getAttribute (Boolean  .class, AttID.singleSource);
d352 2
a353 7

//..............................................................................


   public static Attribute <Boolean>               skipFailures ()
      {          
      return  getAttribute (Boolean  .class, AttID.skipFailures);
d355 2
a356 7

//..............................................................................


   public static Attribute <String>                solverLogFileName ()
      {          
      return  getAttribute (String   .class, AttID.solverLogFileName);
d358 2
a359 7

//..............................................................................


   public static Attribute <Boolean>               stageByObject ()
      {          
      return  getAttribute (Boolean  .class, AttID.stageByObject);
d361 2
a362 7

//..............................................................................


   public static Attribute <Boolean>               stochMode ()
      {          
      return  getAttribute (Boolean  .class, AttID.stochMode);
d364 2
a365 7

//..............................................................................


   public static Attribute <Boolean>               stochSolnMode ()
      {          
      return  getAttribute (Boolean  .class, AttID.stochSolnMode);
d367 2
a368 7

//..............................................................................


   public static Attribute <BoundSet>              stockBounds ()
      {          
      return  getAttribute (BoundSet .class, AttID.stockBounds);
d370 2
a371 7

//..............................................................................


   public static Attribute <double[]>              stockCost ()
      {          
      return  getAttribute (double[] .class, AttID.stockCost);
d373 2
a374 7

//..............................................................................


   public static Attribute <Boolean>               stockReallocation ()
      {          
      return  getAttribute (Boolean  .class, AttID.stockReallocation);
d376 2
a377 7

//..............................................................................


   public static Attribute <double[]>              stockVol ()
      {          
      return  getAttribute (double[] .class, AttID.stockVol);
d379 2
a380 7

//..............................................................................


   public static Attribute <double[]>              subCost ()
      {          
      return  getAttribute (double[] .class, AttID.subCost);
d382 2
a383 7

//..............................................................................


   public static Attribute <Integer>               subIndex ()
      {          
      return  getAttribute (Integer  .class, AttID.subIndex);
d385 2
a386 7

//..............................................................................


   public static Attribute <double[]>              subVol ()
      {          
      return  getAttribute (double[] .class, AttID.subVol);
d388 2
a389 7

//..............................................................................


   public static Attribute <double[]>              supplyVol ()
      {          
      return  getAttribute (double[] .class, AttID.supplyVol);
d391 2
a392 7

//..............................................................................


   public static Attribute <Boolean>               tieBreakPropRt ()
      {          
      return  getAttribute (Boolean  .class, AttID.tieBreakPropRt);
d394 2
a395 7

//..............................................................................


   public static Attribute <String>                title ()
      {          
      return  getAttribute (String   .class, AttID.title);
d397 2
a398 7

//..............................................................................


   public static Attribute <Boolean>               truncOffsets ()
      {          
      return  getAttribute (Boolean  .class, AttID.truncOffsets);
d400 2
a401 7

//..............................................................................


   public static Attribute <Boolean>               twoLevelLotSizes ()
      {          
      return  getAttribute (Boolean  .class, AttID.twoLevelLotSizes);
d403 2
a404 7

//..............................................................................


   public static Attribute <Boolean>               twoWayMultiExec ()
      {          
      return  getAttribute (Boolean  .class, AttID.twoWayMultiExec);
d406 2
a407 7

//..............................................................................


   public static Attribute <Boolean>               useFocusHorizons ()
      {          
      return  getAttribute (Boolean  .class, AttID.useFocusHorizons);
d409 2
a410 7

//..............................................................................


   public static Attribute <Boolean>               userHeurStart ()
      {          
      return  getAttribute (Boolean  .class, AttID.userHeurStart);
d412 2
a413 7

//..............................................................................


   public static Attribute <Double>                wbounds ()
      {          
      return  getAttribute (Double   .class, AttID.wbounds);
d415 2
a416 7

//..............................................................................


   public static Attribute <double[]>              yieldRate ()
      {          
      return  getAttribute (double[] .class, AttID.yieldRate);
a756 11
// selfTest ()
//
// Does self-test for Attributes.
//------------------------------------------------------------------------------

   static void selfTest ()
      {
      checkAlphaOrder ();
      }

//------------------------------------------------------------------------------
a851 34
// checkAlphaOrder ()
//
// Verifies that the Attributes are listed in alphabetical order.
//------------------------------------------------------------------------------

   private static void checkAlphaOrder ()
      {
      String theAttName;
      String prevAttName = null;

      println (
           "\n"
         + "Verifying that the Attributes are listed in alphabetical order.\n");

      for (AttID theAttID: AttID.values ())
         {
         theAttName = theAttID.toString ();

         if (prevAttName != null)
            if (theAttName.compareTo (prevAttName) < 0)
               intAbortWmsg (
                  "   An Attribute was found whose name is alphabetically\n"
                + "   earlier than that of the preceding Attribute.\n"
                + "\n"
                + "      Preceding Attribute: " + prevAttName + "\n"
                + "      Current   Attribute: " + theAttName);

         prevAttName = theAttName;
         }

      println ("Verified: The Attributes are listed in alphabetical order.");
      }

//------------------------------------------------------------------------------
@


1.54
log
@Attributes
@
text
@d1437 1
a1437 1
   private Attribute (AttID theAttID, Class <V> theValueType)
d1439 1
a1440 1
      myValueType = theValueType;
d1448 1
a1448 1
// newInstance (theAttID, theValueType)
d1454 1
a1454 1
   static Attribute <?> newInstance (AttID theAttID, Class <?> theValueType)
d1733 1
a1733 1
// myAttID
d1735 1
a1735 1
// The AttID that identifies this Attribute.
d1738 1
a1738 1
   private final AttID myAttID;
d1741 1
a1741 1
// myValueType
d1743 1
a1743 1
// Indicates the value type of the attribute.
d1746 1
a1746 1
   private final Class <V> myValueType;
d1791 1
a1791 1
         super (theAttID, Boolean.class);
d1801 1
a1801 1
         super (theAttID, Integer.class);
d1811 1
a1811 1
         super (theAttID, Double.class);
d1821 1
a1821 1
         super (theAttID, String.class);
d1831 1
a1831 1
         super (theAttID, BoundSet.class);
d1841 1
a1841 1
         super (theAttID, boolean[].class);
d1851 1
a1851 1
         super (theAttID, int[].class);
d1861 1
a1861 1
         super (theAttID, double[].class);
@


1.53
log
@Attributes
@
text
@a13 1
import       java.lang.reflect.*;
d1251 145
d1437 1
a1437 1
   private Attribute (String theName, Class <V> theValueType)
d1439 1
a1439 2
      myAttID     = AttID.valueOf (theName);

a1440 2

      myAttID.store (this);
d1448 1
a1448 4
// buildInstances ()
//
// Constructs all of the Attributes for WIT-J and assigns them to the
// corresponding static fields of this class.
d1450 2
a1451 2
// e.g., a new Attribute <Boolean> is constructed assigned to the accAfterOptImp
// field.
d1454 1
a1454 1
   private static void buildInstances ()
d1456 4
a1459 5
      Map <Type, Method> theFacMethMap;
      Type               theFieldType;
      Method             theFacMeth;
      String             theAttName;
      Object             theAttObj;
d1461 1
a1461 1
      try
d1463 2
a1464 1
         theFacMethMap = buildFacMethMap ();
d1466 4
a1469 3
         for (Field theField: Attribute.class.getDeclaredFields ())
            {
            theFieldType = theField.getGenericType ();
d1471 4
a1474 1
            theFacMeth   = theFacMethMap.get (theFieldType);
d1476 4
a1479 2
            if (theFacMeth == null)
               continue;
d1481 3
a1483 8
            theAttName = theField.getName ();

            theAttObj  = theFacMeth.invoke (null, theAttName);

            theField.setAccessible (true);

            theField.set (null, theAttObj);
            }
d1486 1
a1486 1
      catch (Exception theExc)
d1488 1
a1488 4
         intAbortWmsg (
            "   An exception was thrown in Attribute.buildInstances ():\n"
          + "\n"
          + "      Exception: " + theExc);
a1489 19
      }

//------------------------------------------------------------------------------
// buildFacMethMap ()
//
// Builds and returns a mapping from the return type of each factory method
// declared in this class to the factory method that has that return type.
//
// e.g. "Attribute <Integer>" is mapped to "factory2".
//
// Makes each factory method accessible from reflection.
//------------------------------------------------------------------------------

   private static Map <Type, Method> buildFacMethMap ()
           throws Exception
      {
      HashMap <Type, Method> theFacMethMap;

      theFacMethMap = new HashMap <Type, Method> (100);
d1491 1
a1491 1
      for (Method theMethod: Attribute.class.getDeclaredMethods ())
d1493 1
a1493 9
         if (theMethod.getName ().length () < 8)
            continue;

         if (! theMethod.getName ().substring (0, 7).equals ("factory"))
            continue;

         theMethod.setAccessible (true);

         theFacMethMap.put (theMethod.getGenericReturnType (), theMethod);
d1496 1
a1496 45
      return theFacMethMap;
      }

//------------------------------------------------------------------------------
// Static factory methods
//
// Methods for constructing each kind of Attribute <V>.
// These methods are used reflexively by buildInstances () and
// buildFacMethMap ().
//------------------------------------------------------------------------------

   private static Attribute <Boolean>       factory1 (String theName)
      {
      return new  BoolAtt                                   (theName);
      }

   private static Attribute <Integer>       factory2 (String theName)
      {
      return new  IntAtt                                    (theName);
      }

   private static Attribute <Double>        factory3 (String theName)
      {
      return new  DblAtt                                    (theName);
      }

   private static Attribute <boolean[]>     factory4 (String theName)
      {
      return new  BoolVecAtt                                (theName);
      }

   private static Attribute <int[]>         factory5 (String theName)
      {
      return new  IntVecAtt                                 (theName);
      }

   private static Attribute <double[]>      factory6 (String theName)
      {
      return new  DblVecAtt                                 (theName);
      }

   private static Attribute <String>        factory7 (String theName)
      {
      return new  StringAtt                                 (theName);
      }
d1498 1
a1498 3
   private static Attribute <BoundSet>      factory9 (String theName)
      {
      return new  BoundSetAtt                               (theName);
a1598 145
// setDefaultValues ()
//
// For each Attribute, this method either sets its default value or specifies
// that it has none.
//------------------------------------------------------------------------------

   private static void setDefaultValues ()
      {
      setDefaultValue   (accAfterOptImp      (),        false);
      setDefaultValue   (accAfterSoftLB      (),        false);
      setDefaultNone    (accelerated         ());
      setDefaultValue   (asapPipOrder        (),        false);
      setDefaultValue   (autoPriority        (),        false);
      setDefaultNone    (bomIndex            ());
      setDefaultNone    (bopIndex            ());
      setDefaultNone    (boundsValue         ());
      setDefaultLastPer (buildAheadUB        ());
      setDefaultValue   (buildAsap           (),        false);
      setDefaultValue   (buildNstn           (),        false);
      setDefaultValue   (compPrices          (),        false);
      setDefaultValue   (computeCriticalList (),        false);
      setDefaultValue   (consRate            (),          1.0);
      setDefaultNone    (consVol             ());
      setDefaultBounds  (cumShipBounds       ());
      setDefaultValue   (cumShipReward       (),          0.0);
      setDefaultValue   (currentScenario     (),            0);
      setDefaultNone    (demandName          ());
      setDefaultValue   (demandVol           (),          0.0);
      setDefaultValue   (earliestPeriod      (),            0);
      setDefaultValue   (equitability        (),            1);
      setDefaultNone    (excessVol           ());
      setDefaultBounds  (execBounds          ());
      setDefaultValue   (execCost            (),          0.0);
      setDefaultValue   (execEmptyBom        (),         true);
      setDefaultValue   (execPenalty         (),          0.0);
      setDefaultValue   (execVol             (),          0.0);
      setDefaultNone    (executable          ());
      setDefaultValue   (expAllowed          (),         true);
      setDefaultValue   (expAversion         (),          0.0);
      setDefaultValue   (expCutoff           (),         0.01);
      setDefaultValue   (expNetAversion      (),          0.0);
      setDefaultNone    (extOptActive        ());
      setDefaultValue   (falloutRate         (),          0.0);
      setDefaultNone    (feasible            ());
      setDefaultValue   (focusHorizon        (),           -1);
      setDefaultNone    (focusShortageVol    ());
      setDefaultValue   (forcedMultiEq       (),        false);
      setDefaultNone    (fssExecVol          ());
      setDefaultValue   (fssShipVol          (),          0.0);
      setDefaultNone    (fssSubVol           ());
      setDefaultNone    (heurAllocActive     ());
      setDefaultValue   (highPrecisionWD     (),        false);
      setDefaultNone    (impactPeriod        ());
      setDefaultValue   (incLotSize          (),          0.0);
      setDefaultValue   (incLotSize2         (),          0.0);
      setDefaultValue   (independentOffsets  (),        false);
      setDefaultValue   (intExecVols         (),        false);
      setDefaultValue   (intShipVols         (),        false);
      setDefaultValue   (intSubVols          (),        false);
      setDefaultLastPer (latestPeriod        ());
      setDefaultValue   (lotSize2Thresh      (),          0.0);
      setDefaultValue   (lotSizeTol          (),      0.00001);
      setDefaultValue   (mandEC              (),        false);
      setDefaultValue   (minLotSize          (),          0.0);
      setDefaultValue   (minLotSize2         (),          0.0);
      setDefaultValue   (minimalExcess       (),        false);
      setDefaultValue   (mipMode             (),        false);
      setDefaultNone    (mrpConsVol          ());
      setDefaultNone    (mrpExcessVol        ());
      setDefaultNone    (mrpExecVol          ());
      setDefaultValue   (mrpNetAllowed       (),        false);
      setDefaultNone    (mrpResidualVol      ());
      setDefaultNone    (mrpSubVol           ());
      setDefaultValue   (multiExec           (),        false);
      setDefaultValue   (multiRoute          (),        false);
      setDefaultValue   (nPeriods            (),           26);
      setDefaultValue   (nScenarios          (),            1);
      setDefaultValue   (netAllowed          (),         true);
      setDefaultValue   (nstnResidual        (),        false);
      setDefaultNone    (objValue            ());
      setDefaultValue   (objectStage         (),            0);
      setDefaultValue   (offset              (),          0.0);
      setDefaultNone    (operationName       ());
      setDefaultNone    (partName            ());
      setDefaultValue   (penExec             (),        false);
      setDefaultValue   (perfPegging         (),        false);
      setDefaultValue   (periodStage         (),            0);
      setDefaultValue   (pgdCritListMode     (),        false);
      setDefaultNone    (pipExists           ());
      setDefaultValue   (pipSeqFromHeur      (),        false);
      setDefaultNone    (postprocessed       ());
      setDefaultValue   (prefHighStockSLBs   (),        false);
      setDefaultNone    (preprocessed        ());
      setDefaultValue   (priority            (),            0);
      setDefaultValue   (probability         (),          1.0);
      setDefaultNone    (prodVol             ());
      setDefaultValue   (productRate         (),          1.0);
      setDefaultValue   (propRtg             (),        false);
      setDefaultNone    (reqVol              ());
      setDefaultNone    (residualVol         ());
      setDefaultValue   (respectStockSLBs    (),        false);
      setDefaultValue   (roundReqVols        (),        false);
      setDefaultValue   (routingShare        (),          1.0);
      setDefaultValue   (scrapAllowed        (),         true);
      setDefaultValue   (scrapCost           (),          0.0);
      setDefaultNone    (scrapVol            ());
      setDefaultValue   (searchInc           (),          1.0);
      setDefaultValue   (selForDel           (),        false);
      setDefaultValue   (selSplit            (),        false);
      setDefaultNone    (shadowPrice         ());
      setDefaultValue   (shipLateAllowed     (),         true);
      setDefaultLastPer (shipLateUB          ());
      setDefaultValue   (shipReward          (),          0.0);
      setDefaultValue   (shipVol             (),          0.0);
      setDefaultValue   (singleSource        (),        false);
      setDefaultValue   (skipFailures        (),         true);
      setDefaultValue   (solverLogFileName   (), "solver.log");
      setDefaultValue   (stageByObject       (),        false);
      setDefaultValue   (stochMode           (),        false);
      setDefaultNone    (stochSolnMode       ());
      setDefaultBounds  (stockBounds         ());
      setDefaultValue   (stockCost           (),          0.0);
      setDefaultValue   (stockReallocation   (),        false);
      setDefaultNone    (stockVol            ());
      setDefaultValue   (subCost             (),          0.0);
      setDefaultNone    (subIndex            ());
      setDefaultValue   (subVol              (),          0.0);
      setDefaultValue   (supplyVol           (),          0.0);
      setDefaultValue   (tieBreakPropRt      (),        false);
      setDefaultValue   (title               (),   "Untitled");
      setDefaultValue   (truncOffsets        (),        false);
      setDefaultValue   (twoLevelLotSizes    (),        false);
      setDefaultValue   (twoWayMultiExec     (),        false);
      setDefaultValue   (useFocusHorizons    (),         true);
      setDefaultValue   (userHeurStart       (),        false);
      setDefaultValue   (wbounds             (),      10000.0);
      setDefaultValue   (yieldRate           (),          1.0);
 
      for (AttID theAttID: AttID.values ())
         {
         assert (theAttID.getAttribute ().myDefaultCase != null);
         }
      }

//------------------------------------------------------------------------------
a1732 136
// Attribute instances.
//
// The following are the only Attributes that are ever created in WIT-J:
//------------------------------------------------------------------------------

   private static Attribute <Boolean>   accAfterOptImp;
   private static Attribute <Boolean>   accAfterSoftLB;
   private static Attribute <Boolean>   accelerated;
   private static Attribute <Boolean>   asapPipOrder;
   private static Attribute <Boolean>   autoPriority;
   private static Attribute <Integer>   bomIndex;
   private static Attribute <Integer>   bopIndex;
   private static Attribute <Double>    boundsValue;
   private static Attribute <int[]>     buildAheadUB;
   private static Attribute <Boolean>   buildAsap;
   private static Attribute <Boolean>   buildNstn;
   private static Attribute <Boolean>   compPrices;
   private static Attribute <Boolean>   computeCriticalList;
   private static Attribute <double[]>  consRate;
   private static Attribute <double[]>  consVol;
   private static Attribute <BoundSet>  cumShipBounds;
   private static Attribute <double[]>  cumShipReward;
   private static Attribute <Integer>   currentScenario;
   private static Attribute <String>    demandName;
   private static Attribute <double[]>  demandVol;
   private static Attribute <Integer>   earliestPeriod;
   private static Attribute <Integer>   equitability;
   private static Attribute <double[]>  excessVol;
   private static Attribute <BoundSet>  execBounds;
   private static Attribute <double[]>  execCost;
   private static Attribute <Boolean>   execEmptyBom;
   private static Attribute <Double>    execPenalty;
   private static Attribute <double[]>  execVol;
   private static Attribute <boolean[]> executable;
   private static Attribute <Boolean>   expAllowed;
   private static Attribute <Double>    expAversion;
   private static Attribute <Double>    expCutoff;
   private static Attribute <Double>    expNetAversion;
   private static Attribute <Boolean>   extOptActive;
   private static Attribute <Double>    falloutRate;
   private static Attribute <Boolean>   feasible;
   private static Attribute <Integer>   focusHorizon;
   private static Attribute <double[]>  focusShortageVol;
   private static Attribute <Boolean>   forcedMultiEq;
   private static Attribute <double[]>  fssExecVol;
   private static Attribute <double[]>  fssShipVol;
   private static Attribute <double[]>  fssSubVol;
   private static Attribute <Boolean>   heurAllocActive;
   private static Attribute <Boolean>   highPrecisionWD;
   private static Attribute <int[]>     impactPeriod;
   private static Attribute <double[]>  incLotSize;
   private static Attribute <double[]>  incLotSize2;
   private static Attribute <Boolean>   independentOffsets;
   private static Attribute <Boolean>   intExecVols;
   private static Attribute <Boolean>   intShipVols;
   private static Attribute <Boolean>   intSubVols;
   private static Attribute <Integer>   latestPeriod;
   private static Attribute <double[]>  lotSize2Thresh;
   private static Attribute <Double>    lotSizeTol;
   private static Attribute <Boolean>   mandEC;
   private static Attribute <double[]>  minLotSize;
   private static Attribute <double[]>  minLotSize2;
   private static Attribute <Boolean>   minimalExcess;
   private static Attribute <Boolean>   mipMode;
   private static Attribute <double[]>  mrpConsVol;
   private static Attribute <double[]>  mrpExcessVol;
   private static Attribute <double[]>  mrpExecVol;
   private static Attribute <Boolean>   mrpNetAllowed;
   private static Attribute <double[]>  mrpResidualVol;
   private static Attribute <double[]>  mrpSubVol;
   private static Attribute <Boolean>   multiExec;
   private static Attribute <Boolean>   multiRoute;
   private static Attribute <Integer>   nPeriods;
   private static Attribute <Integer>   nScenarios;
   private static Attribute <Boolean>   netAllowed;
   private static Attribute <Boolean>   nstnResidual;
   private static Attribute <Double>    objValue;
   private static Attribute <Integer>   objectStage;
   private static Attribute <double[]>  offset;
   private static Attribute <String>    operationName;
   private static Attribute <String>    partName;
   private static Attribute <Boolean>   penExec;
   private static Attribute <Boolean>   perfPegging;
   private static Attribute <int[]>     periodStage;
   private static Attribute <Boolean>   pgdCritListMode;
   private static Attribute <Boolean>   pipExists;
   private static Attribute <Boolean>   pipSeqFromHeur;
   private static Attribute <Boolean>   postprocessed;
   private static Attribute <Boolean>   prefHighStockSLBs;
   private static Attribute <Boolean>   preprocessed;
   private static Attribute <int[]>     priority;
   private static Attribute <Double>    probability;
   private static Attribute <double[]>  prodVol;
   private static Attribute <double[]>  productRate;
   private static Attribute <boolean[]> propRtg;
   private static Attribute <double[]>  reqVol;
   private static Attribute <double[]>  residualVol;
   private static Attribute <Boolean>   respectStockSLBs;
   private static Attribute <Boolean>   roundReqVols;
   private static Attribute <double[]>  routingShare;
   private static Attribute <Boolean>   scrapAllowed;
   private static Attribute <double[]>  scrapCost;
   private static Attribute <double[]>  scrapVol;
   private static Attribute <Double>    searchInc;
   private static Attribute <Boolean>   selForDel;
   private static Attribute <Boolean>   selSplit;
   private static Attribute <double[]>  shadowPrice;
   private static Attribute <Boolean>   shipLateAllowed;
   private static Attribute <int[]>     shipLateUB;
   private static Attribute <double[]>  shipReward;
   private static Attribute <double[]>  shipVol;
   private static Attribute <Boolean>   singleSource;
   private static Attribute <Boolean>   skipFailures;
   private static Attribute <String>    solverLogFileName;
   private static Attribute <Boolean>   stageByObject;
   private static Attribute <Boolean>   stochMode;
   private static Attribute <Boolean>   stochSolnMode;
   private static Attribute <BoundSet>  stockBounds;
   private static Attribute <double[]>  stockCost;
   private static Attribute <Boolean>   stockReallocation;
   private static Attribute <double[]>  stockVol;
   private static Attribute <double[]>  subCost;
   private static Attribute <Integer>   subIndex;
   private static Attribute <double[]>  subVol;
   private static Attribute <double[]>  supplyVol;
   private static Attribute <Boolean>   tieBreakPropRt;
   private static Attribute <String>    title;
   private static Attribute <Boolean>   truncOffsets;
   private static Attribute <Boolean>   twoLevelLotSizes;
   private static Attribute <Boolean>   twoWayMultiExec;
   private static Attribute <Boolean>   useFocusHorizons;
   private static Attribute <Boolean>   userHeurStart;
   private static Attribute <Double>    wbounds;
   private static Attribute <double[]>  yieldRate;

//------------------------------------------------------------------------------
a1765 11
// Static initialization block
//==============================================================================

   static
      {
      buildInstances ();

      setDefaultValues ();
      }

//==============================================================================
d1789 1
a1789 1
      private BoolAtt (String theName)
d1791 1
a1791 1
         super (theName, Boolean.class);
d1795 2
d1799 1
a1799 1
      private IntAtt (String theName)
d1801 1
a1801 1
         super (theName, Integer.class);
d1805 2
d1809 1
a1809 1
      private DblAtt (String theName)
d1811 1
a1811 1
         super (theName, Double.class);
d1815 2
d1819 1
a1819 1
      private StringAtt (String theName)
d1821 1
a1821 1
         super (theName, String.class);
d1825 2
d1829 1
a1829 1
      private BoundSetAtt (String theName)
d1831 1
a1831 1
         super (theName, BoundSet.class);
d1835 2
d1839 1
a1839 1
      private BoolVecAtt (String theName)
d1841 1
a1841 1
         super (theName, boolean[].class);
d1845 2
d1849 1
a1849 1
      private IntVecAtt (String theName)
d1851 1
a1851 1
         super (theName, int[].class);
d1855 2
d1859 1
a1859 1
      private DblVecAtt (String theName)
d1861 1
a1861 1
         super (theName, double[].class);
@


1.52
log
@Replaced Attribute partCategory with thePart.getCategory ().
@
text
@d31 3
a33 2
   public static Attribute <Boolean>   accAfterOptImp ()
      {          return                accAfterOptImp;
d35 6
a40 2
   public static Attribute <Boolean>   accAfterSoftLB ()
      {          return                accAfterSoftLB;
d42 7
a48 2
   public static Attribute <Boolean>   accelerated ()
      {          return                accelerated;
d50 7
a56 2
   public static Attribute <Boolean>   asapPipOrder ()
      {          return                asapPipOrder;
d58 7
a64 2
   public static Attribute <Boolean>   autoPriority ()
      {          return                autoPriority;
d66 7
a72 2
   public static Attribute <Integer>   bomIndex ()
      {          return                bomIndex;
d74 7
a80 2
   public static Attribute <Integer>   bopIndex ()
      {          return                bopIndex;
d82 7
a88 2
   public static Attribute <Double>    boundsValue ()
      {          return                boundsValue;
d90 7
a96 2
   public static Attribute <int[]>     buildAheadUB ()
      {          return                buildAheadUB;
d98 7
a104 2
   public static Attribute <Boolean>   buildAsap ()
      {          return                buildAsap;
d106 7
a112 2
   public static Attribute <Boolean>   buildNstn ()
      {          return                buildNstn;
d114 7
a120 2
   public static Attribute <Boolean>   compPrices ()
      {          return                compPrices;
d122 7
a128 2
   public static Attribute <Boolean>   computeCriticalList ()
      {          return                computeCriticalList;
d130 7
a136 2
   public static Attribute <double[]>  consRate ()
      {          return                consRate;
d138 7
a144 2
   public static Attribute <double[]>  consVol ()
      {          return                consVol;
d146 7
a152 2
   public static Attribute <BoundSet>  cumShipBounds ()
      {          return                cumShipBounds;
d154 7
a160 2
   public static Attribute <double[]>  cumShipReward ()
      {          return                cumShipReward;
d162 7
a168 2
   public static Attribute <Integer>   currentScenario ()
      {          return                currentScenario;
d170 7
a176 2
   public static Attribute <String>    demandName ()
      {          return                demandName;
d178 7
a184 2
   public static Attribute <double[]>  demandVol ()
      {          return                demandVol;
d186 7
a192 2
   public static Attribute <Integer>   earliestPeriod ()
      {          return                earliestPeriod;
d194 7
a200 2
   public static Attribute <Integer>   equitability ()
      {          return                equitability;
d202 7
a208 2
   public static Attribute <double[]>  excessVol ()
      {          return                excessVol;
d210 7
a216 2
   public static Attribute <BoundSet>  execBounds ()
      {          return                execBounds;
d218 7
a224 2
   public static Attribute <double[]>  execCost ()
      {          return                execCost;
d226 7
a232 2
   public static Attribute <Boolean>   execEmptyBom ()
      {          return                execEmptyBom;
d234 7
a240 2
   public static Attribute <Double>    execPenalty ()
      {          return                execPenalty;
d242 7
a248 2
   public static Attribute <double[]>  execVol ()
      {          return                execVol;
d250 7
a256 2
   public static Attribute <boolean[]> executable ()
      {          return                executable;
d258 7
a264 2
   public static Attribute <Boolean>   expAllowed ()
      {          return                expAllowed;
d266 7
a272 2
   public static Attribute <Double>    expAversion ()
      {          return                expAversion;
d274 7
a280 2
   public static Attribute <Double>    expCutoff ()
      {          return                expCutoff;
d282 7
a288 2
   public static Attribute <Double>    expNetAversion ()
      {          return                expNetAversion;
d290 7
a296 2
   public static Attribute <Boolean>   extOptActive ()
      {          return                extOptActive;
d298 7
a304 2
   public static Attribute <Double>    falloutRate ()
      {          return                falloutRate;
d306 7
a312 2
   public static Attribute <Boolean>   feasible ()
      {          return                feasible;
d314 7
a320 2
   public static Attribute <Integer>   focusHorizon ()
      {          return                focusHorizon;
d322 7
a328 2
   public static Attribute <double[]>  focusShortageVol ()
      {          return                focusShortageVol;
d330 7
a336 2
   public static Attribute <Boolean>   forcedMultiEq ()
      {          return                forcedMultiEq;
d338 7
a344 2
   public static Attribute <double[]>  fssExecVol ()
      {          return                fssExecVol;
d346 7
a352 2
   public static Attribute <double[]>  fssShipVol ()
      {          return                fssShipVol;
d354 7
a360 2
   public static Attribute <double[]>  fssSubVol ()
      {          return                fssSubVol;
d362 7
a368 2
   public static Attribute <Boolean>   heurAllocActive ()
      {          return                heurAllocActive;
d370 7
a376 2
   public static Attribute <Boolean>   highPrecisionWD ()
      {          return                highPrecisionWD;
d378 7
a384 2
   public static Attribute <int[]>     impactPeriod ()
      {          return                impactPeriod;
d386 7
a392 2
   public static Attribute <double[]>  incLotSize ()
      {          return                incLotSize;
d394 7
a400 2
   public static Attribute <double[]>  incLotSize2 ()
      {          return                incLotSize2;
d402 7
a408 2
   public static Attribute <Boolean>   independentOffsets ()
      {          return                independentOffsets;
d410 7
a416 2
   public static Attribute <Boolean>   intExecVols ()
      {          return                intExecVols;
d418 7
a424 2
   public static Attribute <Boolean>   intShipVols ()
      {          return                intShipVols;
d426 7
a432 2
   public static Attribute <Boolean>   intSubVols ()
      {          return                intSubVols;
d434 7
a440 2
   public static Attribute <Integer>   latestPeriod ()
      {          return                latestPeriod;
d442 7
a448 2
   public static Attribute <double[]>  lotSize2Thresh ()
      {          return                lotSize2Thresh;
d450 7
a456 2
   public static Attribute <Double>    lotSizeTol ()
      {          return                lotSizeTol;
d458 7
a464 2
   public static Attribute <Boolean>   mandEC ()
      {          return                mandEC;
d466 7
a472 2
   public static Attribute <double[]>  minLotSize ()
      {          return                minLotSize;
d474 7
a480 2
   public static Attribute <double[]>  minLotSize2 ()
      {          return                minLotSize2;
d482 7
a488 2
   public static Attribute <Boolean>   minimalExcess ()
      {          return                minimalExcess;
d490 7
a496 2
   public static Attribute <Boolean>   mipMode ()
      {          return                mipMode;
d498 7
a504 2
   public static Attribute <double[]>  mrpConsVol ()
      {          return                mrpConsVol;
d506 7
a512 2
   public static Attribute <double[]>  mrpExcessVol ()
      {          return                mrpExcessVol;
d514 7
a520 2
   public static Attribute <double[]>  mrpExecVol ()
      {          return                mrpExecVol;
d522 7
a528 2
   public static Attribute <Boolean>   mrpNetAllowed ()
      {          return                mrpNetAllowed;
d530 7
a536 2
   public static Attribute <double[]>  mrpResidualVol ()
      {          return                mrpResidualVol;
d538 7
a544 2
   public static Attribute <double[]>  mrpSubVol ()
      {          return                mrpSubVol;
d546 7
a552 2
   public static Attribute <Boolean>   multiExec ()
      {          return                multiExec;
d554 7
a560 2
   public static Attribute <Boolean>   multiRoute ()
      {          return                multiRoute;
d562 7
a568 2
   public static Attribute <Integer>   nPeriods ()
      {          return                nPeriods;
d570 7
a576 2
   public static Attribute <Integer>   nScenarios ()
      {          return                nScenarios;
d578 7
a584 2
   public static Attribute <Boolean>   netAllowed ()
      {          return                netAllowed;
d586 7
a592 2
   public static Attribute <Boolean>   nstnResidual ()
      {          return                nstnResidual;
d594 7
a600 2
   public static Attribute <Double>    objValue ()
      {          return                objValue;
d602 7
a608 2
   public static Attribute <Integer>   objectStage ()
      {          return                objectStage;
d610 7
a616 2
   public static Attribute <double[]>  offset ()
      {          return                offset;
d618 7
a624 2
   public static Attribute <String>    operationName ()
      {          return                operationName;
d626 7
a632 2
   public static Attribute <String>    partName ()
      {          return                partName;
d634 7
a640 2
   public static Attribute <Boolean>   penExec ()
      {          return                penExec;
d642 7
a648 2
   public static Attribute <Boolean>   perfPegging ()
      {          return                perfPegging;
d650 7
a656 2
   public static Attribute <int[]>     periodStage ()
      {          return                periodStage;
d658 7
a664 2
   public static Attribute <Boolean>   pgdCritListMode ()
      {          return                pgdCritListMode;
d666 7
a672 2
   public static Attribute <Boolean>   pipExists ()
      {          return                pipExists;
d674 7
a680 2
   public static Attribute <Boolean>   pipSeqFromHeur ()
      {          return                pipSeqFromHeur;
d682 7
a688 2
   public static Attribute <Boolean>   postprocessed ()
      {          return                postprocessed;
d690 7
a696 2
   public static Attribute <Boolean>   prefHighStockSLBs ()
      {          return                prefHighStockSLBs;
d698 7
a704 2
   public static Attribute <Boolean>   preprocessed ()
      {          return                preprocessed;
d706 7
a712 2
   public static Attribute <int[]>     priority ()
      {          return                priority;
d714 7
a720 2
   public static Attribute <Double>    probability ()
      {          return                probability;
d722 7
a728 2
   public static Attribute <double[]>  prodVol ()
      {          return                prodVol;
d730 7
a736 2
   public static Attribute <double[]>  productRate ()
      {          return                productRate;
d738 7
a744 2
   public static Attribute <boolean[]> propRtg ()
      {          return                propRtg;
d746 7
a752 2
   public static Attribute <double[]>  reqVol ()
      {          return                reqVol;
d754 7
a760 2
   public static Attribute <double[]>  residualVol ()
      {          return                residualVol;
d762 7
a768 2
   public static Attribute <Boolean>   respectStockSLBs ()
      {          return                respectStockSLBs;
d770 7
a776 2
   public static Attribute <Boolean>   roundReqVols ()
      {          return                roundReqVols;
d778 7
a784 2
   public static Attribute <double[]>  routingShare ()
      {          return                routingShare;
d786 7
a792 2
   public static Attribute <Boolean>   scrapAllowed ()
      {          return                scrapAllowed;
d794 7
a800 2
   public static Attribute <double[]>  scrapCost ()
      {          return                scrapCost;
d802 7
a808 2
   public static Attribute <double[]>  scrapVol ()
      {          return                scrapVol;
d810 7
a816 2
   public static Attribute <Double>    searchInc ()
      {          return                searchInc;
d818 7
a824 2
   public static Attribute <Boolean>   selForDel ()
      {          return                selForDel;
d826 7
a832 2
   public static Attribute <Boolean>   selSplit ()
      {          return                selSplit;
d834 7
a840 2
   public static Attribute <double[]>  shadowPrice ()
      {          return                shadowPrice;
d842 7
a848 2
   public static Attribute <Boolean>   shipLateAllowed ()
      {          return                shipLateAllowed;
d850 7
a856 2
   public static Attribute <int[]>     shipLateUB ()
      {          return                shipLateUB;
d858 7
a864 2
   public static Attribute <double[]>  shipReward ()
      {          return                shipReward;
d866 7
a872 2
   public static Attribute <double[]>  shipVol ()
      {          return                shipVol;
d874 7
a880 2
   public static Attribute <Boolean>   singleSource ()
      {          return                singleSource;
d882 7
a888 2
   public static Attribute <Boolean>   skipFailures ()
      {          return                skipFailures;
d890 7
a896 2
   public static Attribute <String>    solverLogFileName ()
      {          return                solverLogFileName;
d898 7
a904 2
   public static Attribute <Boolean>   stageByObject ()
      {          return                stageByObject;
d906 7
a912 2
   public static Attribute <Boolean>   stochMode ()
      {          return                stochMode;
d914 7
a920 2
   public static Attribute <Boolean>   stochSolnMode ()
      {          return                stochSolnMode;
d922 7
a928 2
   public static Attribute <BoundSet>  stockBounds ()
      {          return                stockBounds;
d930 7
a936 2
   public static Attribute <double[]>  stockCost ()
      {          return                stockCost;
d938 7
a944 2
   public static Attribute <Boolean>   stockReallocation ()
      {          return                stockReallocation;
d946 7
a952 2
   public static Attribute <double[]>  stockVol ()
      {          return                stockVol;
d954 7
a960 2
   public static Attribute <double[]>  subCost ()
      {          return                subCost;
d962 7
a968 2
   public static Attribute <Integer>   subIndex ()
      {          return                subIndex;
d970 7
a976 2
   public static Attribute <double[]>  subVol ()
      {          return                subVol;
d978 7
a984 2
   public static Attribute <double[]>  supplyVol ()
      {          return                supplyVol;
d986 7
a992 2
   public static Attribute <Boolean>   tieBreakPropRt ()
      {          return                tieBreakPropRt;
d994 7
a1000 2
   public static Attribute <String>    title ()
      {          return                title;
d1002 7
a1008 2
   public static Attribute <Boolean>   truncOffsets ()
      {          return                truncOffsets;
d1010 7
a1016 2
   public static Attribute <Boolean>   twoLevelLotSizes ()
      {          return                twoLevelLotSizes;
d1018 7
a1024 2
   public static Attribute <Boolean>   twoWayMultiExec ()
      {          return                twoWayMultiExec;
d1026 7
a1032 2
   public static Attribute <Boolean>   useFocusHorizons ()
      {          return                useFocusHorizons;
d1034 7
a1040 2
   public static Attribute <Boolean>   userHeurStart ()
      {          return                userHeurStart;
d1042 7
a1048 2
   public static Attribute <Double>    wbounds ()
      {          return                wbounds;
d1050 7
a1056 2
   public static Attribute <double[]>  yieldRate ()
      {          return                yieldRate;
d1071 1
d1073 1
d1075 1
a1075 1
      theAttArr = new Attribute <?>[allInstances.size ()];
d1077 6
a1082 1
      allInstances.toArray (theAttArr);
d1233 1
a1233 1
      return myIndex;
d1244 1
a1244 1
      return myName;
d1277 1
a1277 1
   final int getIndex ()
d1279 1
a1279 1
      return myIndex;
d1295 2
a1296 1
      myName      = theName;
a1297 1
      myIndex     = allInstances.size ();
d1299 1
a1299 1
      allInstances.add (this);
d1453 1
a1453 1
      for (Attribute <?> theAtt: allInstances)
d1455 1
a1455 1
         theAttName = theAtt.toString ();
d1473 63
d1544 134
a1677 132
      setDefaultValue   (accAfterOptImp     ,        false);
      setDefaultValue   (accAfterSoftLB     ,        false);
      setDefaultNone    (accelerated);
      setDefaultValue   (asapPipOrder       ,        false);
      setDefaultValue   (autoPriority       ,        false);
      setDefaultNone    (bomIndex);
      setDefaultNone    (bopIndex);
      setDefaultNone    (boundsValue);
      setDefaultLastPer (buildAheadUB);
      setDefaultValue   (buildAsap          ,        false);
      setDefaultValue   (buildNstn          ,        false);
      setDefaultValue   (compPrices         ,        false);
      setDefaultValue   (computeCriticalList,        false);
      setDefaultValue   (consRate           ,          1.0);
      setDefaultNone    (consVol);
      setDefaultBounds  (cumShipBounds);
      setDefaultValue   (cumShipReward      ,          0.0);
      setDefaultValue   (currentScenario    ,            0);
      setDefaultNone    (demandName);
      setDefaultValue   (demandVol          ,          0.0);
      setDefaultValue   (earliestPeriod     ,            0);
      setDefaultValue   (equitability       ,            1);
      setDefaultNone    (excessVol);
      setDefaultBounds  (execBounds);
      setDefaultValue   (execCost           ,          0.0);
      setDefaultValue   (execEmptyBom       ,         true);
      setDefaultValue   (execPenalty        ,          0.0);
      setDefaultValue   (execVol            ,          0.0);
      setDefaultNone    (executable);
      setDefaultValue   (expAllowed         ,         true);
      setDefaultValue   (expAversion        ,          0.0);
      setDefaultValue   (expCutoff          ,         0.01);
      setDefaultValue   (expNetAversion     ,          0.0);
      setDefaultNone    (extOptActive);
      setDefaultValue   (falloutRate        ,          0.0);
      setDefaultNone    (feasible);
      setDefaultValue   (focusHorizon       ,           -1);
      setDefaultNone    (focusShortageVol);
      setDefaultValue   (forcedMultiEq      ,        false);
      setDefaultNone    (fssExecVol);
      setDefaultValue   (fssShipVol         ,          0.0);
      setDefaultNone    (fssSubVol);
      setDefaultNone    (heurAllocActive);
      setDefaultValue   (highPrecisionWD    ,        false);
      setDefaultNone    (impactPeriod);
      setDefaultValue   (incLotSize         ,          0.0);
      setDefaultValue   (incLotSize2        ,          0.0);
      setDefaultValue   (independentOffsets ,        false);
      setDefaultValue   (intExecVols        ,        false);
      setDefaultValue   (intShipVols        ,        false);
      setDefaultValue   (intSubVols         ,        false);
      setDefaultLastPer (latestPeriod);
      setDefaultValue   (lotSize2Thresh     ,          0.0);
      setDefaultValue   (lotSizeTol         ,      0.00001);
      setDefaultValue   (mandEC             ,        false);
      setDefaultValue   (minLotSize         ,          0.0);
      setDefaultValue   (minLotSize2        ,          0.0);
      setDefaultValue   (minimalExcess      ,        false);
      setDefaultValue   (mipMode            ,        false);
      setDefaultNone    (mrpConsVol);
      setDefaultNone    (mrpExcessVol);
      setDefaultNone    (mrpExecVol);
      setDefaultValue   (mrpNetAllowed      ,        false);
      setDefaultNone    (mrpResidualVol);
      setDefaultNone    (mrpSubVol);
      setDefaultValue   (multiExec          ,        false);
      setDefaultValue   (multiRoute         ,        false);
      setDefaultValue   (nPeriods           ,           26);
      setDefaultValue   (nScenarios         ,            1);
      setDefaultValue   (netAllowed         ,         true);
      setDefaultValue   (nstnResidual       ,        false);
      setDefaultNone    (objValue);
      setDefaultValue   (objectStage        ,            0);
      setDefaultValue   (offset             ,          0.0);
      setDefaultNone    (operationName);
      setDefaultNone    (partName);
      setDefaultValue   (penExec            ,        false);
      setDefaultValue   (perfPegging        ,        false);
      setDefaultValue   (periodStage        ,            0);
      setDefaultValue   (pgdCritListMode    ,        false);
      setDefaultNone    (pipExists);
      setDefaultValue   (pipSeqFromHeur     ,        false);
      setDefaultNone    (postprocessed);
      setDefaultValue   (prefHighStockSLBs  ,        false);
      setDefaultNone    (preprocessed);
      setDefaultValue   (priority           ,            0);
      setDefaultValue   (probability        ,          1.0);
      setDefaultNone    (prodVol);
      setDefaultValue   (productRate        ,          1.0);
      setDefaultValue   (propRtg            ,        false);
      setDefaultNone    (reqVol);
      setDefaultNone    (residualVol);
      setDefaultValue   (respectStockSLBs   ,        false);
      setDefaultValue   (roundReqVols       ,        false);
      setDefaultValue   (routingShare       ,          1.0);
      setDefaultValue   (scrapAllowed       ,         true);
      setDefaultValue   (scrapCost          ,          0.0);
      setDefaultNone    (scrapVol);
      setDefaultValue   (searchInc          ,          1.0);
      setDefaultValue   (selForDel          ,        false);
      setDefaultValue   (selSplit           ,        false);
      setDefaultNone    (shadowPrice);
      setDefaultValue   (shipLateAllowed    ,         true);
      setDefaultLastPer (shipLateUB);
      setDefaultValue   (shipReward         ,          0.0);
      setDefaultValue   (shipVol            ,          0.0);
      setDefaultValue   (singleSource       ,        false);
      setDefaultValue   (skipFailures       ,         true);
      setDefaultValue   (solverLogFileName  , "solver.log");
      setDefaultValue   (stageByObject      ,        false);
      setDefaultValue   (stochMode          ,        false);
      setDefaultNone    (stochSolnMode);
      setDefaultBounds  (stockBounds);
      setDefaultValue   (stockCost          ,          0.0);
      setDefaultValue   (stockReallocation  ,        false);
      setDefaultNone    (stockVol);
      setDefaultValue   (subCost            ,          0.0);
      setDefaultNone    (subIndex);
      setDefaultValue   (subVol             ,          0.0);
      setDefaultValue   (supplyVol          ,          0.0);
      setDefaultValue   (tieBreakPropRt     ,        false);
      setDefaultValue   (title              ,   "Untitled");
      setDefaultValue   (truncOffsets       ,        false);
      setDefaultValue   (twoLevelLotSizes   ,        false);
      setDefaultValue   (twoWayMultiExec    ,        false);
      setDefaultValue   (useFocusHorizons   ,         true);
      setDefaultValue   (userHeurStart      ,        false);
      setDefaultValue   (wbounds            ,      10000.0);
      setDefaultValue   (yieldRate          ,          1.0);

      for (Attribute <?> theAtt: allInstances)
         assert (theAtt.myDefaultCase != null);
d1951 1
a1951 1
// myName
d1953 1
a1953 1
// The name of the attribute.
d1956 1
a1956 1
   private final String myName;
a1966 9
// myIndex
//
// A unique index for this Attribute.
// # of Attributes constructed before this one.
//------------------------------------------------------------------------------

   private final int myIndex;

//------------------------------------------------------------------------------
a1982 8
//------------------------------------------------------------------------------
// allInstances
//
// The list of all Attributes.
//------------------------------------------------------------------------------

   private static final List <Attribute <?>> allInstances;

a1988 2
      allInstances = new ArrayList <Attribute <?>> ();

@


1.51
log
@Added code to verify that the Attribute default values in WIT-J match those
in WIT.
@
text
@d31 2
a32 2
   public static Attribute <Boolean>       accAfterOptImp ()
      {          return                    accAfterOptImp;
d34 2
a35 2
   public static Attribute <Boolean>       accAfterSoftLB ()
      {          return                    accAfterSoftLB;
d37 2
a38 2
   public static Attribute <Boolean>       accelerated ()
      {          return                    accelerated;
d40 2
a41 2
   public static Attribute <Boolean>       asapPipOrder ()
      {          return                    asapPipOrder;
d43 2
a44 2
   public static Attribute <Boolean>       autoPriority ()
      {          return                    autoPriority;
d46 2
a47 2
   public static Attribute <Integer>       bomIndex ()
      {          return                    bomIndex;
d49 2
a50 2
   public static Attribute <Integer>       bopIndex ()
      {          return                    bopIndex;
d52 2
a53 2
   public static Attribute <Double>        boundsValue ()
      {          return                    boundsValue;
d55 2
a56 2
   public static Attribute <int[]>         buildAheadUB ()
      {          return                    buildAheadUB;
d58 2
a59 2
   public static Attribute <Boolean>       buildAsap ()
      {          return                    buildAsap;
d61 2
a62 2
   public static Attribute <Boolean>       buildNstn ()
      {          return                    buildNstn;
d64 2
a65 2
   public static Attribute <Boolean>       compPrices ()
      {          return                    compPrices;
d67 2
a68 2
   public static Attribute <Boolean>       computeCriticalList ()
      {          return                    computeCriticalList;
d70 2
a71 2
   public static Attribute <double[]>      consRate ()
      {          return                    consRate;
d73 2
a74 2
   public static Attribute <double[]>      consVol ()
      {          return                    consVol;
d76 2
a77 2
   public static Attribute <BoundSet>      cumShipBounds ()
      {          return                    cumShipBounds;
d79 2
a80 2
   public static Attribute <double[]>      cumShipReward ()
      {          return                    cumShipReward;
d82 2
a83 2
   public static Attribute <Integer>       currentScenario ()
      {          return                    currentScenario;
d85 2
a86 2
   public static Attribute <String>        demandName ()
      {          return                    demandName;
d88 2
a89 2
   public static Attribute <double[]>      demandVol ()
      {          return                    demandVol;
d91 2
a92 2
   public static Attribute <Integer>       earliestPeriod ()
      {          return                    earliestPeriod;
d94 2
a95 2
   public static Attribute <Integer>       equitability ()
      {          return                    equitability;
d97 2
a98 2
   public static Attribute <double[]>      excessVol ()
      {          return                    excessVol;
d100 2
a101 2
   public static Attribute <BoundSet>      execBounds ()
      {          return                    execBounds;
d103 2
a104 2
   public static Attribute <double[]>      execCost ()
      {          return                    execCost;
d106 2
a107 2
   public static Attribute <Boolean>       execEmptyBom ()
      {          return                    execEmptyBom;
d109 2
a110 2
   public static Attribute <Double>        execPenalty ()
      {          return                    execPenalty;
d112 2
a113 2
   public static Attribute <double[]>      execVol ()
      {          return                    execVol;
d115 2
a116 2
   public static Attribute <boolean[]>     executable ()
      {          return                    executable;
d118 2
a119 2
   public static Attribute <Boolean>       expAllowed ()
      {          return                    expAllowed;
d121 2
a122 2
   public static Attribute <Double>        expAversion ()
      {          return                    expAversion;
d124 2
a125 2
   public static Attribute <Double>        expCutoff ()
      {          return                    expCutoff;
d127 2
a128 2
   public static Attribute <Double>        expNetAversion ()
      {          return                    expNetAversion;
d130 2
a131 2
   public static Attribute <Boolean>       extOptActive ()
      {          return                    extOptActive;
d133 2
a134 2
   public static Attribute <Double>        falloutRate ()
      {          return                    falloutRate;
d136 2
a137 2
   public static Attribute <Boolean>       feasible ()
      {          return                    feasible;
d139 2
a140 2
   public static Attribute <Integer>       focusHorizon ()
      {          return                    focusHorizon;
d142 2
a143 2
   public static Attribute <double[]>      focusShortageVol ()
      {          return                    focusShortageVol;
d145 2
a146 2
   public static Attribute <Boolean>       forcedMultiEq ()
      {          return                    forcedMultiEq;
d148 2
a149 2
   public static Attribute <double[]>      fssExecVol ()
      {          return                    fssExecVol;
d151 2
a152 2
   public static Attribute <double[]>      fssShipVol ()
      {          return                    fssShipVol;
d154 2
a155 2
   public static Attribute <double[]>      fssSubVol ()
      {          return                    fssSubVol;
d157 2
a158 2
   public static Attribute <Boolean>       heurAllocActive ()
      {          return                    heurAllocActive;
d160 2
a161 2
   public static Attribute <Boolean>       highPrecisionWD ()
      {          return                    highPrecisionWD;
d163 2
a164 2
   public static Attribute <int[]>         impactPeriod ()
      {          return                    impactPeriod;
d166 2
a167 2
   public static Attribute <double[]>      incLotSize ()
      {          return                    incLotSize;
d169 2
a170 2
   public static Attribute <double[]>      incLotSize2 ()
      {          return                    incLotSize2;
d172 2
a173 2
   public static Attribute <Boolean>       independentOffsets ()
      {          return                    independentOffsets;
d175 2
a176 2
   public static Attribute <Boolean>       intExecVols ()
      {          return                    intExecVols;
d178 2
a179 2
   public static Attribute <Boolean>       intShipVols ()
      {          return                    intShipVols;
d181 2
a182 2
   public static Attribute <Boolean>       intSubVols ()
      {          return                    intSubVols;
d184 2
a185 2
   public static Attribute <Integer>       latestPeriod ()
      {          return                    latestPeriod;
d187 2
a188 2
   public static Attribute <double[]>      lotSize2Thresh ()
      {          return                    lotSize2Thresh;
d190 2
a191 2
   public static Attribute <Double>        lotSizeTol ()
      {          return                    lotSizeTol;
d193 2
a194 2
   public static Attribute <Boolean>       mandEC ()
      {          return                    mandEC;
d196 2
a197 2
   public static Attribute <double[]>      minLotSize ()
      {          return                    minLotSize;
d199 2
a200 2
   public static Attribute <double[]>      minLotSize2 ()
      {          return                    minLotSize2;
d202 2
a203 2
   public static Attribute <Boolean>       minimalExcess ()
      {          return                    minimalExcess;
d205 2
a206 2
   public static Attribute <Boolean>       mipMode ()
      {          return                    mipMode;
d208 2
a209 2
   public static Attribute <double[]>      mrpConsVol ()
      {          return                    mrpConsVol;
d211 2
a212 2
   public static Attribute <double[]>      mrpExcessVol ()
      {          return                    mrpExcessVol;
d214 2
a215 2
   public static Attribute <double[]>      mrpExecVol ()
      {          return                    mrpExecVol;
d217 2
a218 2
   public static Attribute <Boolean>       mrpNetAllowed ()
      {          return                    mrpNetAllowed;
d220 2
a221 2
   public static Attribute <double[]>      mrpResidualVol ()
      {          return                    mrpResidualVol;
d223 2
a224 2
   public static Attribute <double[]>      mrpSubVol ()
      {          return                    mrpSubVol;
d226 2
a227 2
   public static Attribute <Boolean>       multiExec ()
      {          return                    multiExec;
d229 2
a230 2
   public static Attribute <Boolean>       multiRoute ()
      {          return                    multiRoute;
d232 2
a233 2
   public static Attribute <Integer>       nPeriods ()
      {          return                    nPeriods;
d235 2
a236 2
   public static Attribute <Integer>       nScenarios ()
      {          return                    nScenarios;
d238 2
a239 2
   public static Attribute <Boolean>       netAllowed ()
      {          return                    netAllowed;
d241 2
a242 2
   public static Attribute <Boolean>       nstnResidual ()
      {          return                    nstnResidual;
d244 2
a245 2
   public static Attribute <Double>        objValue ()
      {          return                    objValue;
d247 2
a248 2
   public static Attribute <Integer>       objectStage ()
      {          return                    objectStage;
d250 2
a251 2
   public static Attribute <double[]>      offset ()
      {          return                    offset;
d253 2
a254 2
   public static Attribute <String>        operationName ()
      {          return                    operationName;
d256 2
a257 2
   public static Attribute <Part.Category> partCategory ()
      {          return                    partCategory;
d259 2
a260 2
   public static Attribute <String>        partName ()
      {          return                    partName;
d262 2
a263 2
   public static Attribute <Boolean>       penExec ()
      {          return                    penExec;
d265 2
a266 2
   public static Attribute <Boolean>       perfPegging ()
      {          return                    perfPegging;
d268 2
a269 2
   public static Attribute <int[]>         periodStage ()
      {          return                    periodStage;
d271 2
a272 2
   public static Attribute <Boolean>       pgdCritListMode ()
      {          return                    pgdCritListMode;
d274 2
a275 2
   public static Attribute <Boolean>       pipExists ()
      {          return                    pipExists;
d277 2
a278 2
   public static Attribute <Boolean>       pipSeqFromHeur ()
      {          return                    pipSeqFromHeur;
d280 2
a281 2
   public static Attribute <Boolean>       postprocessed ()
      {          return                    postprocessed;
d283 2
a284 2
   public static Attribute <Boolean>       prefHighStockSLBs ()
      {          return                    prefHighStockSLBs;
d286 2
a287 2
   public static Attribute <Boolean>       preprocessed ()
      {          return                    preprocessed;
d289 2
a290 2
   public static Attribute <int[]>         priority ()
      {          return                    priority;
d292 2
a293 2
   public static Attribute <Double>        probability ()
      {          return                    probability;
d295 2
a296 2
   public static Attribute <double[]>      prodVol ()
      {          return                    prodVol;
d298 2
a299 2
   public static Attribute <double[]>      productRate ()
      {          return                    productRate;
d301 2
a302 2
   public static Attribute <boolean[]>     propRtg ()
      {          return                    propRtg;
d304 2
a305 2
   public static Attribute <double[]>      reqVol ()
      {          return                    reqVol;
d307 2
a308 2
   public static Attribute <double[]>      residualVol ()
      {          return                    residualVol;
d310 2
a311 2
   public static Attribute <Boolean>       respectStockSLBs ()
      {          return                    respectStockSLBs;
d313 2
a314 2
   public static Attribute <Boolean>       roundReqVols ()
      {          return                    roundReqVols;
d316 2
a317 2
   public static Attribute <double[]>      routingShare ()
      {          return                    routingShare;
d319 2
a320 2
   public static Attribute <Boolean>       scrapAllowed ()
      {          return                    scrapAllowed;
d322 2
a323 2
   public static Attribute <double[]>      scrapCost ()
      {          return                    scrapCost;
d325 2
a326 2
   public static Attribute <double[]>      scrapVol ()
      {          return                    scrapVol;
d328 2
a329 2
   public static Attribute <Double>        searchInc ()
      {          return                    searchInc;
d331 2
a332 2
   public static Attribute <Boolean>       selForDel ()
      {          return                    selForDel;
d334 2
a335 2
   public static Attribute <Boolean>       selSplit ()
      {          return                    selSplit;
d337 2
a338 2
   public static Attribute <double[]>      shadowPrice ()
      {          return                    shadowPrice;
d340 2
a341 2
   public static Attribute <Boolean>       shipLateAllowed ()
      {          return                    shipLateAllowed;
d343 2
a344 2
   public static Attribute <int[]>         shipLateUB ()
      {          return                    shipLateUB;
d346 2
a347 2
   public static Attribute <double[]>      shipReward ()
      {          return                    shipReward;
d349 2
a350 2
   public static Attribute <double[]>      shipVol ()
      {          return                    shipVol;
d352 2
a353 2
   public static Attribute <Boolean>       singleSource ()
      {          return                    singleSource;
d355 2
a356 2
   public static Attribute <Boolean>       skipFailures ()
      {          return                    skipFailures;
d358 2
a359 2
   public static Attribute <String>        solverLogFileName ()
      {          return                    solverLogFileName;
d361 2
a362 2
   public static Attribute <Boolean>       stageByObject ()
      {          return                    stageByObject;
d364 2
a365 2
   public static Attribute <Boolean>       stochMode ()
      {          return                    stochMode;
d367 2
a368 2
   public static Attribute <Boolean>       stochSolnMode ()
      {          return                    stochSolnMode;
d370 2
a371 2
   public static Attribute <BoundSet>      stockBounds ()
      {          return                    stockBounds;
d373 2
a374 2
   public static Attribute <double[]>      stockCost ()
      {          return                    stockCost;
d376 2
a377 2
   public static Attribute <Boolean>       stockReallocation ()
      {          return                    stockReallocation;
d379 2
a380 2
   public static Attribute <double[]>      stockVol ()
      {          return                    stockVol;
d382 2
a383 2
   public static Attribute <double[]>      subCost ()
      {          return                    subCost;
d385 2
a386 2
   public static Attribute <Integer>       subIndex ()
      {          return                    subIndex;
d388 2
a389 2
   public static Attribute <double[]>      subVol ()
      {          return                    subVol;
d391 2
a392 2
   public static Attribute <double[]>      supplyVol ()
      {          return                    supplyVol;
d394 2
a395 2
   public static Attribute <Boolean>       tieBreakPropRt ()
      {          return                    tieBreakPropRt;
d397 2
a398 2
   public static Attribute <String>        title ()
      {          return                    title;
d400 2
a401 2
   public static Attribute <Boolean>       truncOffsets ()
      {          return                    truncOffsets;
d403 2
a404 2
   public static Attribute <Boolean>       twoLevelLotSizes ()
      {          return                    twoLevelLotSizes;
d406 2
a407 2
   public static Attribute <Boolean>       twoWayMultiExec ()
      {          return                    twoWayMultiExec;
d409 2
a410 2
   public static Attribute <Boolean>       useFocusHorizons ()
      {          return                    useFocusHorizons;
d412 2
a413 2
   public static Attribute <Boolean>       userHeurStart ()
      {          return                    userHeurStart;
d415 2
a416 5
   public static Attribute <Double>        wbounds ()
      {          return                    wbounds;
      }
   public static Attribute <double[]>      yieldRate ()
      {          return                    yieldRate;
a549 7
   public final Attribute <Part.Category>        asPartCategoryAtt ()
      {
      checkForConv (       Part.Category.class, "asPartCategoryAtt");

      return (PartCategoryAtt) (Object) this;
      }

a785 5
   private static Attribute <Part.Category> factory8 (String theName)
      {
      return new  PartCategoryAtt                           (theName);
      }

a908 1
      setDefaultNone    (partCategory);
d1108 129
a1236 130
   private static Attribute <Boolean>       accAfterOptImp;
   private static Attribute <Boolean>       accAfterSoftLB;
   private static Attribute <Boolean>       accelerated;
   private static Attribute <Boolean>       asapPipOrder;
   private static Attribute <Boolean>       autoPriority;
   private static Attribute <Integer>       bomIndex;
   private static Attribute <Integer>       bopIndex;
   private static Attribute <Double>        boundsValue;
   private static Attribute <int[]>         buildAheadUB;
   private static Attribute <Boolean>       buildAsap;
   private static Attribute <Boolean>       buildNstn;
   private static Attribute <Boolean>       compPrices;
   private static Attribute <Boolean>       computeCriticalList;
   private static Attribute <double[]>      consRate;
   private static Attribute <double[]>      consVol;
   private static Attribute <BoundSet>      cumShipBounds;
   private static Attribute <double[]>      cumShipReward;
   private static Attribute <Integer>       currentScenario;
   private static Attribute <String>        demandName;
   private static Attribute <double[]>      demandVol;
   private static Attribute <Integer>       earliestPeriod;
   private static Attribute <Integer>       equitability;
   private static Attribute <double[]>      excessVol;
   private static Attribute <BoundSet>      execBounds;
   private static Attribute <double[]>      execCost;
   private static Attribute <Boolean>       execEmptyBom;
   private static Attribute <Double>        execPenalty;
   private static Attribute <double[]>      execVol;
   private static Attribute <boolean[]>     executable;
   private static Attribute <Boolean>       expAllowed;
   private static Attribute <Double>        expAversion;
   private static Attribute <Double>        expCutoff;
   private static Attribute <Double>        expNetAversion;
   private static Attribute <Boolean>       extOptActive;
   private static Attribute <Double>        falloutRate;
   private static Attribute <Boolean>       feasible;
   private static Attribute <Integer>       focusHorizon;
   private static Attribute <double[]>      focusShortageVol;
   private static Attribute <Boolean>       forcedMultiEq;
   private static Attribute <double[]>      fssExecVol;
   private static Attribute <double[]>      fssShipVol;
   private static Attribute <double[]>      fssSubVol;
   private static Attribute <Boolean>       heurAllocActive;
   private static Attribute <Boolean>       highPrecisionWD;
   private static Attribute <int[]>         impactPeriod;
   private static Attribute <double[]>      incLotSize;
   private static Attribute <double[]>      incLotSize2;
   private static Attribute <Boolean>       independentOffsets;
   private static Attribute <Boolean>       intExecVols;
   private static Attribute <Boolean>       intShipVols;
   private static Attribute <Boolean>       intSubVols;
   private static Attribute <Integer>       latestPeriod;
   private static Attribute <double[]>      lotSize2Thresh;
   private static Attribute <Double>        lotSizeTol;
   private static Attribute <Boolean>       mandEC;
   private static Attribute <double[]>      minLotSize;
   private static Attribute <double[]>      minLotSize2;
   private static Attribute <Boolean>       minimalExcess;
   private static Attribute <Boolean>       mipMode;
   private static Attribute <double[]>      mrpConsVol;
   private static Attribute <double[]>      mrpExcessVol;
   private static Attribute <double[]>      mrpExecVol;
   private static Attribute <Boolean>       mrpNetAllowed;
   private static Attribute <double[]>      mrpResidualVol;
   private static Attribute <double[]>      mrpSubVol;
   private static Attribute <Boolean>       multiExec;
   private static Attribute <Boolean>       multiRoute;
   private static Attribute <Integer>       nPeriods;
   private static Attribute <Integer>       nScenarios;
   private static Attribute <Boolean>       netAllowed;
   private static Attribute <Boolean>       nstnResidual;
   private static Attribute <Double>        objValue;
   private static Attribute <Integer>       objectStage;
   private static Attribute <double[]>      offset;
   private static Attribute <String>        operationName;
   private static Attribute <Part.Category> partCategory;
   private static Attribute <String>        partName;
   private static Attribute <Boolean>       penExec;
   private static Attribute <Boolean>       perfPegging;
   private static Attribute <int[]>         periodStage;
   private static Attribute <Boolean>       pgdCritListMode;
   private static Attribute <Boolean>       pipExists;
   private static Attribute <Boolean>       pipSeqFromHeur;
   private static Attribute <Boolean>       postprocessed;
   private static Attribute <Boolean>       prefHighStockSLBs;
   private static Attribute <Boolean>       preprocessed;
   private static Attribute <int[]>         priority;
   private static Attribute <Double>        probability;
   private static Attribute <double[]>      prodVol;
   private static Attribute <double[]>      productRate;
   private static Attribute <boolean[]>     propRtg;
   private static Attribute <double[]>      reqVol;
   private static Attribute <double[]>      residualVol;
   private static Attribute <Boolean>       respectStockSLBs;
   private static Attribute <Boolean>       roundReqVols;
   private static Attribute <double[]>      routingShare;
   private static Attribute <Boolean>       scrapAllowed;
   private static Attribute <double[]>      scrapCost;
   private static Attribute <double[]>      scrapVol;
   private static Attribute <Double>        searchInc;
   private static Attribute <Boolean>       selForDel;
   private static Attribute <Boolean>       selSplit;
   private static Attribute <double[]>      shadowPrice;
   private static Attribute <Boolean>       shipLateAllowed;
   private static Attribute <int[]>         shipLateUB;
   private static Attribute <double[]>      shipReward;
   private static Attribute <double[]>      shipVol;
   private static Attribute <Boolean>       singleSource;
   private static Attribute <Boolean>       skipFailures;
   private static Attribute <String>        solverLogFileName;
   private static Attribute <Boolean>       stageByObject;
   private static Attribute <Boolean>       stochMode;
   private static Attribute <Boolean>       stochSolnMode;
   private static Attribute <BoundSet>      stockBounds;
   private static Attribute <double[]>      stockCost;
   private static Attribute <Boolean>       stockReallocation;
   private static Attribute <double[]>      stockVol;
   private static Attribute <double[]>      subCost;
   private static Attribute <Integer>       subIndex;
   private static Attribute <double[]>      subVol;
   private static Attribute <double[]>      supplyVol;
   private static Attribute <Boolean>       tieBreakPropRt;
   private static Attribute <String>        title;
   private static Attribute <Boolean>       truncOffsets;
   private static Attribute <Boolean>       twoLevelLotSizes;
   private static Attribute <Boolean>       twoWayMultiExec;
   private static Attribute <Boolean>       useFocusHorizons;
   private static Attribute <Boolean>       userHeurStart;
   private static Attribute <Double>        wbounds;
   private static Attribute <double[]>      yieldRate;
a1354 8
   private static final class PartCategoryAtt extends Attribute <Part.Category>
   {
      private PartCategoryAtt (String theName)
         {
         super (theName, Part.Category.class);
         }
   }

@


1.50
log
@Added Attribute fssShipVol.
@
text
@d880 1
a880 1
      setDefaultValue   (expCutoff          ,          0.0);
@


1.49
log
@Minor revision.
@
text
@d151 3
d889 1
d1164 1
@


1.48
log
@Added type checking to Attribute type conversion methods.
@
text
@d510 1
a510 1
   public boolean hasDefaultValue ()
d628 1
a628 1
   boolean defaultIsLastPeriod ()
d642 1
a642 1
   V getDefaultValue ()
d1043 1
a1043 1
   private void setDefaultValue (V theValue)
a1093 8
// Type conversion methods
//
// Each of these methods returns this Attribute, safely converted to the
// parameterized Attribute type given as the return type.



//------------------------------------------------------------------------------
@


1.47
log
@Attribute type conversion.
@
text
@d522 1
a522 1
   public final Attribute <Boolean>       asBoolAtt ()
d524 3
a526 1
      return              (BoolAtt)         (Attribute) this;
d529 1
a529 1
   public final Attribute <Integer>       asIntAtt ()
d531 3
a533 1
      return              (IntAtt)          (Attribute) this;
d538 3
a540 1
      return              (DblAtt)          (Attribute) this;
d545 3
a547 1
      return              (StringAtt)       (Attribute) this;
d550 1
a550 1
   public final Attribute <Part.Category> asPartCategoryAtt ()
d552 3
a554 1
      return              (PartCategoryAtt) (Attribute) this;
d557 1
a557 1
   public final Attribute <boolean[]>     asBoolVecAtt ()
d559 3
a561 1
      return              (BoolVecAtt)      (Attribute) this;
d564 1
a564 1
   public final Attribute <int[]>         asIntVecAtt ()
d566 3
a568 1
      return              (IntVecAtt)       (Attribute) this;
d571 1
a571 1
   public final Attribute <double[]>      asDblVecAtt ()
d573 3
a575 1
      return              (DblVecAtt)       (Attribute) this;
d578 1
a578 1
   public final Attribute <BoundSet>      asBoundSetAtt ()
d580 3
a582 1
      return              (BoundSetAtt)     (Attribute) this;
d1093 25
@


1.46
log
@Implemented nested subclasses of class Attribute <V>.
@
text
@d516 52
d742 1
a742 1
      return new  BoolAtt                   (theName);
d747 1
a747 1
      return new  IntAtt                    (theName);
d752 1
a752 1
      return new  DblAtt                    (theName);
d757 1
a757 1
      return new  BoolVecAtt                (theName);
d762 1
a762 1
      return new  IntVecAtt                 (theName);
d767 1
a767 1
      return new  DblVecAtt                 (theName);
d772 1
a772 1
      return new  StringAtt                 (theName);
d777 1
a777 1
      return new  PartCatAtt                (theName);
d782 1
a782 1
      return new  BoundSetAtt               (theName);
d1332 1
a1332 1
   private static final class PartCatAtt extends Attribute <Part.Category>
d1334 1
a1334 1
      private PartCatAtt (String theName)
@


1.45
log
@Minor revision.
@
text
@d25 1
a25 1
public final class Attribute <V>
d690 1
a690 1
      return new  Attribute <Boolean>       (theName, Boolean.class);
d695 1
a695 1
      return new  Attribute <Integer>       (theName, Integer.class);
d700 1
a700 1
      return new  Attribute <Double>        (theName, Double.class);
d705 1
a705 1
      return new  Attribute <boolean[]>     (theName, boolean[].class);
d710 1
a710 1
      return new  Attribute <int[]>         (theName, int[].class);
d715 1
a715 1
      return new  Attribute <double[]>      (theName, double[].class);
d720 1
a720 1
      return new  Attribute <String>        (theName, String.class);
d725 1
a725 1
      return new  Attribute <Part.Category> (theName, Part.Category.class);
d730 1
a730 1
      return new  Attribute <BoundSet>      (theName, BoundSet.class);
d1227 1
a1227 1
// Private Nested Enums
d1244 76
@


1.44
log
@Default values.
@
text
@d431 1
a431 1
      Attribute <?>[] theAttributeArr;
d433 1
a433 1
      theAttributeArr = new Attribute <?>[allInstances.size ()];
d435 1
a435 1
      allInstances.toArray (theAttributeArr);
d437 1
a437 1
      return theAttributeArr;
d612 1
a612 1
      Object             theAttributeObj;
d627 1
a627 1
            theAttName    = theField.getName ();
d629 1
a629 1
            theAttributeObj = theFacMeth.invoke (null, theAttName);
d633 1
a633 1
            theField.set (null, theAttributeObj);
d748 1
a748 1
      for (Attribute <?> theAttribute: allInstances)
d750 1
a750 1
         theAttName = theAttribute.toString ();
@


1.43
log
@Default values.
@
text
@d505 11
d553 11
d572 7
@


1.42
log
@Default values.
@
text
@d739 199
d953 1
a953 1
// setDefaultValue (theValue)
d955 1
a955 2
// Sets the default value of this Attribute to the case indicated by
// theDefaultCase, which must not be SPECIFIC_VALUE.
d958 1
a958 1
   private void setDefaultValue (DefaultCase theDefaultCase)
d960 1
a960 3
      assert  (myDefaultCase == null);

      assert (theDefaultCase != SPECIFIC_VALUE);
d962 2
a963 2
      if (theDefaultCase == LAST_PERIOD)
         assert (myValueType == Integer.class);
d965 1
a965 1
      myDefaultCase = theDefaultCase;
d969 1
a969 1
// arrayOf (theValue) methods
d971 1
a971 2
// Each of these methods constructs and returns a new array of length 1 whose
// element is given by theValue.
d974 1
a974 1
   private static boolean[] arrayOf (boolean theValue)
d976 3
a978 1
      return new boolean[]{theValue};
d981 7
a987 1
   private static int[] arrayOf (int theValue)
d989 1
a989 2
      return new int[]{theValue};
      }
d991 1
a991 3
   private static double[] arrayOf (double theValue)
      {
      return new double[]{theValue};
d1193 2
d1211 2
a1212 1
      NONE,
@


1.41
log
@Began implementation of default values.
@
text
@d32 1
a32 2
      {
      return                               accAfterOptImp;
a33 1

d35 1
a35 2
      {
      return                               accAfterSoftLB;
a36 1

d38 1
a38 2
      {
      return                               accelerated;
a39 1

d41 1
a41 2
      {
      return                               asapPipOrder;
a42 1

d44 1
a44 2
      {
      return                               autoPriority;
a45 1

d47 1
a47 2
      {
      return                               bomIndex;
a48 1

d50 1
a50 2
      {
      return                               bopIndex;
a51 1

d53 1
a53 2
      {
      return                               boundsValue;
a54 1

d56 1
a56 2
      {
      return                               buildAheadUB;
a57 1

d59 1
a59 2
      {
      return                               buildAsap;
a60 1

d62 1
a62 2
      {
      return                               buildNstn;
a63 1

d65 1
a65 2
      {
      return                               compPrices;
a66 1

d68 1
a68 2
      {
      return                               computeCriticalList;
a69 1

d71 1
a71 2
      {
      return                               consRate;
a72 1

d74 1
a74 2
      {
      return                               consVol;
a75 1

d77 1
a77 2
      {
      return                               cumShipBounds;
a78 1

d80 1
a80 2
      {
      return                               cumShipReward;
a81 1

d83 1
a83 2
      {
      return                               currentScenario;
a84 1

d86 1
a86 2
      {
      return                               demandName;
a87 1

d89 1
a89 2
      {
      return                               demandVol;
a90 1

d92 1
a92 2
      {
      return                               earliestPeriod;
a93 1

d95 1
a95 2
      {
      return                               equitability;
a96 1

d98 1
a98 2
      {
      return                               excessVol;
a99 1

d101 1
a101 2
      {
      return                               execBounds;
a102 1

d104 1
a104 2
      {
      return                               execCost;
a105 1

d107 1
a107 2
      {
      return                               execEmptyBom;
a108 1

d110 1
a110 2
      {
      return                               execPenalty;
a111 1

d113 1
a113 2
      {
      return                               execVol;
a114 1

d116 1
a116 2
      {
      return                               executable;
a117 1

d119 1
a119 2
      {
      return                               expAllowed;
a120 1

d122 1
a122 2
      {
      return                               expAversion;
a123 1

d125 1
a125 2
      {
      return                               expCutoff;
a126 1

d128 1
a128 2
      {
      return                               expNetAversion;
a129 1

d131 1
a131 2
      {
      return                               extOptActive;
a132 1

d134 1
a134 2
      {
      return                               falloutRate;
a135 1

d137 1
a137 2
      {
      return                               feasible;
a138 1

d140 1
a140 2
      {
      return                               focusHorizon;
a141 1

d143 1
a143 2
      {
      return                               focusShortageVol;
a144 1

d146 1
a146 2
      {
      return                               forcedMultiEq;
a147 1

d149 1
a149 2
      {
      return                               fssExecVol;
a150 1

d152 1
a152 2
      {
      return                               fssSubVol;
a153 1

d155 1
a155 2
      {
      return                               heurAllocActive;
a156 1

d158 1
a158 2
      {
      return                               highPrecisionWD;
a159 1

d161 1
a161 2
      {
      return                               impactPeriod;
a162 1

d164 1
a164 2
      {
      return                               incLotSize;
a165 1

d167 1
a167 2
      {
      return                               incLotSize2;
a168 1

d170 1
a170 2
      {
      return                               independentOffsets;
a171 1

d173 1
a173 2
      {
      return                               intExecVols;
a174 1

d176 1
a176 2
      {
      return                               intShipVols;
a177 1

d179 1
a179 2
      {
      return                               intSubVols;
a180 1

d182 1
a182 2
      {
      return                               latestPeriod;
a183 1

d185 1
a185 2
      {
      return                               lotSize2Thresh;
a186 1

d188 1
a188 2
      {
      return                               lotSizeTol;
a189 1

d191 1
a191 2
      {
      return                               mandEC;
a192 1

d194 1
a194 2
      {
      return                               minLotSize;
a195 1

d197 1
a197 2
      {
      return                               minLotSize2;
a198 1

d200 1
a200 2
      {
      return                               minimalExcess;
a201 1

d203 1
a203 2
      {
      return                               mipMode;
a204 1

d206 1
a206 2
      {
      return                               mrpConsVol;
a207 1

d209 1
a209 2
      {
      return                               mrpExcessVol;
a210 1

d212 1
a212 2
      {
      return                               mrpExecVol;
a213 1

d215 1
a215 2
      {
      return                               mrpNetAllowed;
a216 1

d218 1
a218 2
      {
      return                               mrpResidualVol;
a219 1

d221 1
a221 2
      {
      return                               mrpSubVol;
a222 1

d224 1
a224 2
      {
      return                               multiExec;
a225 1

d227 1
a227 2
      {
      return                               multiRoute;
a228 1

d230 1
a230 2
      {
      return                               nPeriods;
a231 1

d233 1
a233 2
      {
      return                               nScenarios;
a234 1

d236 1
a236 2
      {
      return                               netAllowed;
a237 1

d239 1
a239 2
      {
      return                               nstnResidual;
a240 1

d242 1
a242 2
      {
      return                               objValue;
a243 1

d245 1
a245 2
      {
      return                               objectStage;
a246 1

d248 1
a248 2
      {
      return                               offset;
a249 1

d251 1
a251 2
      {
      return                               operationName;
a252 1

d254 1
a254 2
      {
      return                               partCategory;
a255 1

d257 1
a257 2
      {
      return                               partName;
a258 1

d260 1
a260 2
      {
      return                               penExec;
a261 1

d263 1
a263 2
      {
      return                               perfPegging;
a264 1

d266 1
a266 2
      {
      return                               periodStage;
a267 1

d269 1
a269 2
      {
      return                               pgdCritListMode;
a270 1

d272 1
a272 2
      {
      return                               pipExists;
a273 1

d275 1
a275 2
      {
      return                               pipSeqFromHeur;
a276 1

d278 1
a278 2
      {
      return                               postprocessed;
a279 1

d281 1
a281 2
      {
      return                               prefHighStockSLBs;
a282 1

d284 1
a284 2
      {
      return                               preprocessed;
a285 1

d287 1
a287 2
      {
      return                               priority;
a288 1

d290 1
a290 2
      {
      return                               probability;
a291 1

d293 1
a293 2
      {
      return                               prodVol;
a294 1

d296 1
a296 2
      {
      return                               productRate;
a297 1

d299 1
a299 2
      {
      return                               propRtg;
a300 1

d302 1
a302 2
      {
      return                               reqVol;
a303 1

d305 1
a305 2
      {
      return                               residualVol;
a306 1

d308 1
a308 2
      {
      return                               respectStockSLBs;
a309 1

d311 1
a311 2
      {
      return                               roundReqVols;
a312 1

d314 1
a314 2
      {
      return                               routingShare;
a315 1

d317 1
a317 2
      {
      return                               scrapAllowed;
a318 1

d320 1
a320 2
      {
      return                               scrapCost;
a321 1

d323 1
a323 2
      {
      return                               scrapVol;
a324 1

d326 1
a326 2
      {
      return                               searchInc;
a327 1

d329 1
a329 2
      {
      return                               selForDel;
a330 1

d332 1
a332 2
      {
      return                               selSplit;
a333 1

d335 1
a335 2
      {
      return                               shadowPrice;
a336 1

d338 1
a338 2
      {
      return                               shipLateAllowed;
a339 1

d341 1
a341 2
      {
      return                               shipLateUB;
a342 1

d344 1
a344 2
      {
      return                               shipReward;
a345 1

d347 1
a347 2
      {
      return                               shipVol;
a348 1

d350 1
a350 2
      {
      return                               singleSource;
a351 1

d353 1
a353 2
      {
      return                               skipFailures;
a354 1

d356 1
a356 2
      {
      return                               solverLogFileName;
a357 1

d359 1
a359 2
      {
      return                               stageByObject;
a360 1

d362 1
a362 2
      {
      return                               stochMode;
a363 1

d365 1
a365 2
      {
      return                               stochSolnMode;
a366 1

d368 1
a368 2
      {
      return                               stockBounds;
a369 1

d371 1
a371 2
      {
      return                               stockCost;
a372 1

d374 1
a374 2
      {
      return                               stockReallocation;
a375 1

d377 1
a377 2
      {
      return                               stockVol;
a378 1

d380 1
a380 2
      {
      return                               subCost;
a381 1

d383 1
a383 2
      {
      return                               subIndex;
a384 1

d386 1
a386 2
      {
      return                               subVol;
a387 1

d389 1
a389 2
      {
      return                               supplyVol;
a390 1

d392 1
a392 2
      {
      return                               tieBreakPropRt;
a393 1

d395 1
a395 2
      {
      return                               title;
a396 1

d398 1
a398 2
      {
      return                               truncOffsets;
a399 1

d401 1
a401 2
      {
      return                               twoLevelLotSizes;
a402 1

d404 1
a404 2
      {
      return                               twoWayMultiExec;
a405 1

d407 1
a407 2
      {
      return                               useFocusHorizons;
a408 1

d410 1
a410 2
      {
      return                               userHeurStart;
a411 1

d413 1
a413 2
      {
      return                               wbounds;
a414 1

d416 1
a416 2
      {
      return                               yieldRate;
d738 56
d1007 2
a1009 2
      LAST_PERIOD,
      SPECIFIC_VALUE,
@


1.40
log
@Removed theAttribute.appliesTo (theElement).
@
text
@d11 1
a676 136
// Attribute instances.
//
// The following are the only Attributes that are ever created in WIT-J:
//==============================================================================

   private static Attribute <Boolean>       accAfterOptImp;
   private static Attribute <Boolean>       accAfterSoftLB;
   private static Attribute <Boolean>       accelerated;
   private static Attribute <Boolean>       asapPipOrder;
   private static Attribute <Boolean>       autoPriority;
   private static Attribute <Integer>       bomIndex;
   private static Attribute <Integer>       bopIndex;
   private static Attribute <Double>        boundsValue;
   private static Attribute <int[]>         buildAheadUB;
   private static Attribute <Boolean>       buildAsap;
   private static Attribute <Boolean>       buildNstn;
   private static Attribute <Boolean>       compPrices;
   private static Attribute <Boolean>       computeCriticalList;
   private static Attribute <double[]>      consRate;
   private static Attribute <double[]>      consVol;
   private static Attribute <BoundSet>      cumShipBounds;
   private static Attribute <double[]>      cumShipReward;
   private static Attribute <Integer>       currentScenario;
   private static Attribute <String>        demandName;
   private static Attribute <double[]>      demandVol;
   private static Attribute <Integer>       earliestPeriod;
   private static Attribute <Integer>       equitability;
   private static Attribute <double[]>      excessVol;
   private static Attribute <BoundSet>      execBounds;
   private static Attribute <double[]>      execCost;
   private static Attribute <Boolean>       execEmptyBom;
   private static Attribute <Double>        execPenalty;
   private static Attribute <double[]>      execVol;
   private static Attribute <boolean[]>     executable;
   private static Attribute <Boolean>       expAllowed;
   private static Attribute <Double>        expAversion;
   private static Attribute <Double>        expCutoff;
   private static Attribute <Double>        expNetAversion;
   private static Attribute <Boolean>       extOptActive;
   private static Attribute <Double>        falloutRate;
   private static Attribute <Boolean>       feasible;
   private static Attribute <Integer>       focusHorizon;
   private static Attribute <double[]>      focusShortageVol;
   private static Attribute <Boolean>       forcedMultiEq;
   private static Attribute <double[]>      fssExecVol;
   private static Attribute <double[]>      fssSubVol;
   private static Attribute <Boolean>       heurAllocActive;
   private static Attribute <Boolean>       highPrecisionWD;
   private static Attribute <int[]>         impactPeriod;
   private static Attribute <double[]>      incLotSize;
   private static Attribute <double[]>      incLotSize2;
   private static Attribute <Boolean>       independentOffsets;
   private static Attribute <Boolean>       intExecVols;
   private static Attribute <Boolean>       intShipVols;
   private static Attribute <Boolean>       intSubVols;
   private static Attribute <Integer>       latestPeriod;
   private static Attribute <double[]>      lotSize2Thresh;
   private static Attribute <Double>        lotSizeTol;
   private static Attribute <Boolean>       mandEC;
   private static Attribute <double[]>      minLotSize;
   private static Attribute <double[]>      minLotSize2;
   private static Attribute <Boolean>       minimalExcess;
   private static Attribute <Boolean>       mipMode;
   private static Attribute <double[]>      mrpConsVol;
   private static Attribute <double[]>      mrpExcessVol;
   private static Attribute <double[]>      mrpExecVol;
   private static Attribute <Boolean>       mrpNetAllowed;
   private static Attribute <double[]>      mrpResidualVol;
   private static Attribute <double[]>      mrpSubVol;
   private static Attribute <Boolean>       multiExec;
   private static Attribute <Boolean>       multiRoute;
   private static Attribute <Integer>       nPeriods;
   private static Attribute <Integer>       nScenarios;
   private static Attribute <Boolean>       netAllowed;
   private static Attribute <Boolean>       nstnResidual;
   private static Attribute <Double>        objValue;
   private static Attribute <Integer>       objectStage;
   private static Attribute <double[]>      offset;
   private static Attribute <String>        operationName;
   private static Attribute <Part.Category> partCategory;
   private static Attribute <String>        partName;
   private static Attribute <Boolean>       penExec;
   private static Attribute <Boolean>       perfPegging;
   private static Attribute <int[]>         periodStage;
   private static Attribute <Boolean>       pgdCritListMode;
   private static Attribute <Boolean>       pipExists;
   private static Attribute <Boolean>       pipSeqFromHeur;
   private static Attribute <Boolean>       postprocessed;
   private static Attribute <Boolean>       prefHighStockSLBs;
   private static Attribute <Boolean>       preprocessed;
   private static Attribute <int[]>         priority;
   private static Attribute <Double>        probability;
   private static Attribute <double[]>      prodVol;
   private static Attribute <double[]>      productRate;
   private static Attribute <boolean[]>     propRtg;
   private static Attribute <double[]>      reqVol;
   private static Attribute <double[]>      residualVol;
   private static Attribute <Boolean>       respectStockSLBs;
   private static Attribute <Boolean>       roundReqVols;
   private static Attribute <double[]>      routingShare;
   private static Attribute <Boolean>       scrapAllowed;
   private static Attribute <double[]>      scrapCost;
   private static Attribute <double[]>      scrapVol;
   private static Attribute <Double>        searchInc;
   private static Attribute <Boolean>       selForDel;
   private static Attribute <Boolean>       selSplit;
   private static Attribute <double[]>      shadowPrice;
   private static Attribute <Boolean>       shipLateAllowed;
   private static Attribute <int[]>         shipLateUB;
   private static Attribute <double[]>      shipReward;
   private static Attribute <double[]>      shipVol;
   private static Attribute <Boolean>       singleSource;
   private static Attribute <Boolean>       skipFailures;
   private static Attribute <String>        solverLogFileName;
   private static Attribute <Boolean>       stageByObject;
   private static Attribute <Boolean>       stochMode;
   private static Attribute <Boolean>       stochSolnMode;
   private static Attribute <BoundSet>      stockBounds;
   private static Attribute <double[]>      stockCost;
   private static Attribute <Boolean>       stockReallocation;
   private static Attribute <double[]>      stockVol;
   private static Attribute <double[]>      subCost;
   private static Attribute <Integer>       subIndex;
   private static Attribute <double[]>      subVol;
   private static Attribute <double[]>      supplyVol;
   private static Attribute <Boolean>       tieBreakPropRt;
   private static Attribute <String>        title;
   private static Attribute <Boolean>       truncOffsets;
   private static Attribute <Boolean>       twoLevelLotSizes;
   private static Attribute <Boolean>       twoWayMultiExec;
   private static Attribute <Boolean>       useFocusHorizons;
   private static Attribute <Boolean>       userHeurStart;
   private static Attribute <Double>        wbounds;
   private static Attribute <double[]>      yieldRate;

//==============================================================================
d703 1
a703 1
   public Class <?> getValueType ()
d811 1
a811 1
   private Attribute (String theName, Class <?> theValueType)
d996 1
a996 1
// Private Fields (other than Attribute Instances)
d1000 136
d1149 1
a1149 1
   private final Class <?> myValueType;
d1161 17
d1197 17
@


1.39
log
@Implemented theAttribute.appliesTo (theClass).
@
text
@a875 23
// appliesTo (theElement)
//
// Returns true, iff this Attribute applies to the Element class of which
// theElement is an instance.
//------------------------------------------------------------------------------

   public final boolean appliesTo (Element theElement)
      {
      AttRep theAttRep;

      argMustBeActive (theElement, "theElement", "Attribute.appliesTo");

      theAttRep =
         theElement.
            getProblem ().
               getSession ().
                  getAttRepMgr ().
                     getAttRepFor (this);

      return theAttRep.appliesTo (theElement);
      }

//------------------------------------------------------------------------------
@


1.38
log
@Changed ownership of AttRepMgr from Problem to Session.
@
text
@d844 32
@


1.37
log
@Changed name of generic class AttSpec <V> to Attribute <V>.
@
text
@d856 6
a861 1
      theAttRep = theElement.getProblem ().getAttRepMgr ().getAttRepFor (this);
d881 2
a882 1
      theAttRep = theProblem.getAttRepMgr ().getAttRepFor (this);
@


1.36
log
@Attributes.
@
text
@d5 1
a5 1
// Contains the declaration of class Attribute.
d10 1
a10 1
import static com.ibm.witj.AttID.*;
d16 1
a16 1
// Generic Class Attribute <RefType>
d18 661
a678 29
// Represents the set of all WIT attributes that have a given name.
// Each Attribute corresponds to one AttID, which identifies it.
// Each Attribute has a value type, the type of value that it stores.
// The RefType type parameter is the reference type corresponding to the value
// type: either the value type itself or the wrapper class for the value type,
// it's a primitive type.
//
// Examples:
//
//   AttID          Value Type   RefType
//   -----          ----------   -------
//   supplyVol      double[]     double[]
//   equitability   int          Integer
//
// Class Hierarchy:
//
//    PublicObject
//       Attribute <Boolean>
//          Attribute.BoolAtt
//       Attribute <Integer>
//          Attribute.IntAtt
//       Attribute <Double>
//          Attribute.DblAtt
//       Attribute <boolean[]>
//          Attribute.BoolVecAtt
//       Attribute <int[]>
//          Attribute.IntVecAtt
//       Attribute <double[]>
//          Attribute.DblVecAtt
d681 130
a810 2
public abstract class Attribute <RefType> extends PublicObject
{
d812 1
a812 1
// Public Methods
d816 1
a816 1
// Attribute Accessors
d818 2
a819 586
// Each of these methods returns an Attribute of the indicated subclass that
// represents the set of all WIT attributes whose name matches the name of the
// method.
//------------------------------------------------------------------------------

public static Attribute <Boolean>              accAfterOptImp ()
   {
   return       getAtt ((Boolean)   null,      accAfterOptImp);
   }

public static Attribute <Boolean>              accAfterSoftLB ()
   {
   return       getAtt ((Boolean)   null,      accAfterSoftLB);
   }

public static Attribute <Boolean>                 accelerated ()
   {
   return       getAtt ((Boolean)   null,         accelerated);
   }

public static Attribute <Boolean>                asapPipOrder ()
   {
   return       getAtt ((Boolean)   null,        asapPipOrder);
   }

public static Attribute <Boolean>                autoPriority ()
   {
   return       getAtt ((Boolean)   null,        autoPriority);
   }

public static Attribute <int[]>                  buildAheadUB ()
   {
   return       getAtt ((int[])     null,        buildAheadUB);
   }

public static Attribute <Boolean>                   buildAsap ()
   {
   return       getAtt ((Boolean)   null,           buildAsap);
   }

public static Attribute <Boolean>                   buildNstn ()
   {
   return       getAtt ((Boolean)   null,           buildNstn);
   }

public static Attribute <Boolean>                  compPrices ()
   {
   return       getAtt ((Boolean)   null,          compPrices);
   }

public static Attribute <Boolean>         computeCriticalList ()
   {
   return       getAtt ((Boolean)   null, computeCriticalList);
   }

public static Attribute <double[]>                   consRate ()
   {
   return       getAtt ((double[])  null,            consRate);
   }

public static Attribute <double[]>                    consVol ()
   {
   return       getAtt ((double[])  null,             consVol);
   }

public static Attribute <double[]>              cumShipReward ()
   {
   return       getAtt ((double[])  null,       cumShipReward);
   }

public static Attribute <Integer>             currentScenario ()
   {
   return       getAtt ((Integer)   null,     currentScenario);
   }

public static Attribute <double[]>                 demandVol ()
   {
   return       getAtt ((double[])  null,          demandVol);
   }

public static Attribute <Integer>              earliestPeriod ()
   {
   return       getAtt ((Integer)   null,      earliestPeriod);
   }

public static Attribute <Integer>                equitability ()
   {
   return       getAtt ((Integer)   null,        equitability);
   }

public static Attribute <double[]>                  excessVol ()
   {
   return       getAtt ((double[])  null,           excessVol);
   }

public static Attribute <double[]>                   execCost ()
   {
   return       getAtt ((double[])  null,            execCost);
   }

public static Attribute <Boolean>                execEmptyBom ()
   {
   return       getAtt ((Boolean)   null,        execEmptyBom);
   }

public static Attribute <Double>                  execPenalty ()
   {
   return       getAtt ((Double)    null,         execPenalty);
   }

public static Attribute <double[]>                    execVol ()
   {
   return       getAtt ((double[])  null,             execVol);
   }

public static Attribute <boolean[]>                executable ()
   {
   return       getAtt ((boolean[]) null,          executable);
   }

public static Attribute <Boolean>                  expAllowed ()
   {
   return       getAtt ((Boolean)   null,          expAllowed);
   }

public static Attribute <Double>                  expAversion ()
   {
   return       getAtt ((Double)    null,         expAversion);
   }

public static Attribute <Double>                    expCutoff ()
   {
   return       getAtt ((Double)    null,           expCutoff);
   }

public static Attribute <Double>               expNetAversion ()
   {
   return       getAtt ((Double)    null,      expNetAversion);
   }

public static Attribute <Boolean>                extOptActive ()
   {
   return       getAtt ((Boolean)   null,        extOptActive);
   }

public static Attribute <Double>                  falloutRate ()
   {
   return       getAtt ((Double)    null,         falloutRate);
   }

public static Attribute <Boolean>                    feasible ()
   {
   return       getAtt ((Boolean)   null,            feasible);
   }

public static Attribute <Integer>                focusHorizon ()
   {
   return       getAtt ((Integer)   null,        focusHorizon);
   }

public static Attribute <double[]>           focusShortageVol ()
   {
   return       getAtt ((double[])  null,    focusShortageVol);
   }

public static Attribute <Boolean>               forcedMultiEq ()
   {
   return       getAtt ((Boolean)   null,       forcedMultiEq);
   }

public static Attribute <double[]>                 fssExecVol ()
   {
   return       getAtt ((double[])  null,          fssExecVol);
   }

public static Attribute <double[]>                  fssSubVol ()
   {
   return       getAtt ((double[])  null,           fssSubVol);
   }

public static Attribute <Boolean>             heurAllocActive ()
   {
   return       getAtt ((Boolean)   null,     heurAllocActive);
   }

public static Attribute <Boolean>             highPrecisionWD ()
   {
   return       getAtt ((Boolean)   null,     highPrecisionWD);
   }

public static Attribute <int[]>                  impactPeriod ()
   {
   return       getAtt ((int[])     null,        impactPeriod);
   }

public static Attribute <double[]>                 incLotSize ()
   {
   return       getAtt ((double[])  null,          incLotSize);
   }

public static Attribute <double[]>                incLotSize2 ()
   {
   return       getAtt ((double[])  null,         incLotSize2);
   }

public static Attribute <Boolean>          independentOffsets ()
   {
   return       getAtt ((Boolean)   null,  independentOffsets);
   }

public static Attribute <Boolean>                 intExecVols ()
   {
   return       getAtt ((Boolean)   null,         intExecVols);
   }

public static Attribute <Boolean>                 intShipVols ()
   {
   return       getAtt ((Boolean)   null,         intShipVols);
   }

public static Attribute <Boolean>                  intSubVols ()
   {
   return       getAtt ((Boolean)   null,          intSubVols);
   }

public static Attribute <Integer>                latestPeriod ()
   {
   return       getAtt ((Integer)   null,        latestPeriod);
   }

public static Attribute <double[]>             lotSize2Thresh ()
   {
   return       getAtt ((double[])  null,      lotSize2Thresh);
   }

public static Attribute <Double>                   lotSizeTol ()
   {
   return       getAtt ((Double)    null,          lotSizeTol);
   }

public static Attribute <Boolean>                      mandEC ()
   {
   return       getAtt ((Boolean)   null,              mandEC);
   }

public static Attribute <double[]>                 minLotSize ()
   {
   return       getAtt ((double[])  null,          minLotSize);
   }

public static Attribute <double[]>                minLotSize2 ()
   {
   return       getAtt ((double[])  null,         minLotSize2);
   }

public static Attribute <Boolean>               minimalExcess ()
   {
   return       getAtt ((Boolean)   null,       minimalExcess);
   }

public static Attribute <Boolean>                     mipMode ()
   {
   return       getAtt ((Boolean)   null,             mipMode);
   }

public static Attribute <double[]>                 mrpConsVol ()
   {
   return       getAtt ((double[])  null,          mrpConsVol);
   }

public static Attribute <double[]>               mrpExcessVol ()
   {
   return       getAtt ((double[])  null,        mrpExcessVol);
   }

public static Attribute <double[]>                 mrpExecVol ()
   {
   return       getAtt ((double[])  null,          mrpExecVol);
   }

public static Attribute <Boolean>              mrpNetAllowed ()
   {
   return       getAtt ((Boolean)   null,      mrpNetAllowed);
   }

public static Attribute <double[]>             mrpResidualVol ()
   {
   return       getAtt ((double[])  null,      mrpResidualVol);
   }

public static Attribute <double[]>                  mrpSubVol ()
   {
   return       getAtt ((double[])  null,           mrpSubVol);
   }

public static Attribute <Boolean>                   multiExec ()
   {
   return       getAtt ((Boolean)   null,           multiExec);
   }

public static Attribute <Boolean>                  multiRoute ()
   {
   return       getAtt ((Boolean)   null,          multiRoute);
   }

public static Attribute <Integer>                  nScenarios ()
   {
   return       getAtt ((Integer)   null,          nScenarios);
   }

public static Attribute <Boolean>                  netAllowed ()
   {
   return       getAtt ((Boolean)   null,          netAllowed);
   }

public static Attribute <Boolean>                nstnResidual ()
   {
   return       getAtt ((Boolean)   null,        nstnResidual);
   }

public static Attribute <Integer>                 objectStage ()
   {
   return       getAtt ((Integer)   null,         objectStage);
   }

public static Attribute <double[]>                     offset ()
   {
   return       getAtt ((double[])  null,              offset);
   }

public static Attribute <Boolean>                     penExec ()
   {
   return       getAtt ((Boolean)   null,             penExec);
   }

public static Attribute <Boolean>                 perfPegging ()
   {
   return       getAtt ((Boolean)   null,         perfPegging);
   }

public static Attribute <int[]>                   periodStage ()
   {
   return       getAtt ((int[])     null,         periodStage);
   }

public static Attribute <Boolean>             pgdCritListMode ()
   {
   return       getAtt ((Boolean)   null,     pgdCritListMode);
   }

public static Attribute <Boolean>                   pipExists ()
   {
   return       getAtt ((Boolean)   null,           pipExists);
   }

public static Attribute <Boolean>              pipSeqFromHeur ()
   {
   return       getAtt ((Boolean)   null,      pipSeqFromHeur);
   }

public static Attribute <Boolean>               postprocessed ()
   {
   return       getAtt ((Boolean)   null,       postprocessed);
   }

public static Attribute <Boolean>           prefHighStockSLBs ()
   {
   return       getAtt ((Boolean)   null,   prefHighStockSLBs);
   }

public static Attribute <Boolean>                preprocessed ()
   {
   return       getAtt ((Boolean)   null,        preprocessed);
   }

public static Attribute <int[]>                      priority ()
   {
   return       getAtt ((int[])     null,            priority);
   }

public static Attribute <Double>                  probability ()
   {
   return       getAtt ((Double)    null,         probability);
   }

public static Attribute <double[]>                    prodVol ()
   {
   return       getAtt ((double[])  null,             prodVol);
   }

public static Attribute <double[]>                productRate ()
   {
   return       getAtt ((double[])  null,         productRate);
   }

public static Attribute <boolean[]>                   propRtg ()
   {
   return       getAtt ((boolean[]) null,             propRtg);
   }

public static Attribute <double[]>                     reqVol ()
   {
   return       getAtt ((double[])  null,              reqVol);
   }

public static Attribute <double[]>                residualVol ()
   {
   return       getAtt ((double[])  null,         residualVol);
   }

public static Attribute <Boolean>            respectStockSLBs ()
   {
   return       getAtt ((Boolean)   null,    respectStockSLBs);
   }

public static Attribute <Boolean>                roundReqVols ()
   {
   return       getAtt ((Boolean)   null,        roundReqVols);
   }

public static Attribute <double[]>               routingShare ()
   {
   return       getAtt ((double[])  null,        routingShare);
   }

public static Attribute <Boolean>                scrapAllowed ()
   {
   return       getAtt ((Boolean)   null,        scrapAllowed);
   }

public static Attribute <double[]>                  scrapCost ()
   {
   return       getAtt ((double[])  null,           scrapCost);
   }

public static Attribute <double[]>                   scrapVol ()
   {
   return       getAtt ((double[])  null,            scrapVol);
   }

public static Attribute <Double>                    searchInc ()
   {
   return       getAtt ((Double)    null,           searchInc);
   }

public static Attribute <Boolean>                   selForDel ()
   {
   return       getAtt ((Boolean)   null,           selForDel);
   }

public static Attribute <Boolean>                    selSplit ()
   {
   return       getAtt ((Boolean)   null,            selSplit);
   }

public static Attribute <double[]>                shadowPrice ()
   {
   return       getAtt ((double[])  null,         shadowPrice);
   }

public static Attribute <Boolean>             shipLateAllowed ()
   {
   return       getAtt ((Boolean)   null,     shipLateAllowed);
   }

public static Attribute <int[]>                    shipLateUB ()
   {
   return       getAtt ((int[])     null,          shipLateUB);
   }

public static Attribute <double[]>                 shipReward ()
   {
   return       getAtt ((double[])  null,          shipReward);
   }

public static Attribute <double[]>                    shipVol ()
   {
   return       getAtt ((double[])  null,             shipVol);
   }

public static Attribute <Boolean>                singleSource ()
   {
   return       getAtt ((Boolean)   null,        singleSource);
   }

public static Attribute <Boolean>                skipFailures ()
   {
   return       getAtt ((Boolean)   null,        skipFailures);
   }

public static Attribute <Boolean>               stageByObject ()
   {
   return       getAtt ((Boolean)   null,       stageByObject);
   }

public static Attribute <Boolean>                   stochMode ()
   {
   return       getAtt ((Boolean)   null,           stochMode);
   }

public static Attribute <Boolean>               stochSolnMode ()
   {
   return       getAtt ((Boolean)   null,       stochSolnMode);
   }

public static Attribute <double[]>                  stockCost ()
   {
   return       getAtt ((double[])  null,           stockCost);
   }

public static Attribute <Boolean>           stockReallocation ()
   {
   return       getAtt ((Boolean)   null,   stockReallocation);
   }

public static Attribute <double[]>                   stockVol ()
   {
   return       getAtt ((double[])  null,            stockVol);
   }

public static Attribute <double[]>                    subCost ()
   {
   return       getAtt ((double[])  null,             subCost);
   }

public static Attribute <double[]>                     subVol ()
   {
   return       getAtt ((double[])  null,              subVol);
   }

public static Attribute <double[]>                 supplyVol ()
   {
   return       getAtt ((double[])  null,          supplyVol);
   }

public static Attribute <Boolean>              tieBreakPropRt ()
   {
   return       getAtt ((Boolean)   null,      tieBreakPropRt);
   }

public static Attribute <Boolean>                truncOffsets ()
   {
   return       getAtt ((Boolean)   null,        truncOffsets);
   }

public static Attribute <Boolean>            twoLevelLotSizes ()
   {
   return       getAtt ((Boolean)   null,    twoLevelLotSizes);
   }

public static Attribute <Boolean>             twoWayMultiExec ()
   {
   return       getAtt ((Boolean)   null,     twoWayMultiExec);
   }

public static Attribute <Boolean>            useFocusHorizons ()
   {
   return       getAtt ((Boolean)   null,    useFocusHorizons);
   }

public static Attribute <Boolean>               userHeurStart ()
   {
   return       getAtt ((Boolean)   null,       userHeurStart);
   }

public static Attribute <Double>                      wbounds ()
   {
   return       getAtt ((Double)    null,             wbounds);
   }

public static Attribute <double[]>                  yieldRate ()
   {
   return       getAtt ((double[])  null,           yieldRate);
   }

//------------------------------------------------------------------------------
// values ()
//
// Returns an array listing all of the Attributes in WIT-J.
//------------------------------------------------------------------------------

   public static Attribute[] values ()
      {
      AttID[]     theAttIDs;
      Attribute[] theAtts;
      int         theIdx;
d821 3
a823 1
      theAttIDs = AttID.values ();
d825 1
a825 1
      theAtts   = new Attribute[theAttIDs.length];
d827 1
a827 4
      for (theIdx = 0; theIdx < theAttIDs.length; theIdx ++)
         {
         theAtts[theIdx] = theAttIDs[theIdx].getAtt ();
         }
d829 1
a829 1
      return theAtts;
d838 1
a838 1
   public Class getValueType ()
d844 1
a844 1
// appliesTo (theComp)
d846 2
a847 2
// Returns true, iff this Attribute applies to the Component class of which
// theComp is an instance.
d850 1
a850 1
   public final boolean appliesTo (Component theComp)
d852 1
a852 5
      AttCIMgr    theAttCIMgr;
      CompClassID theCCID;
      AttCI       theAttCI;

      mustBeNonNullActive (theComp, "theComp", "Attribute.appliesTo");
d854 1
a854 3
      theAttCIMgr = theComp.getProbCoord ().getAttCIMgr ();
      
      theCCID     = theComp.getCompClassID ();
d856 1
a856 1
      theAttCI    = theAttCIMgr.getAttCIFor (myAttID, theCCID);
d858 1
a858 1
      return (theAttCI != null);
d862 1
a862 1
// isAnInputAtt (theProblem)
d870 1
a870 1
   public boolean isAnInputAtt (Problem theProblem)
d872 5
a876 1
      mustBeNonNullActive (theProblem, "theProblem", "Attribute.isAnInputAtt");
d878 1
a878 1
      return theProblem.getProbCoord ().getAttCIMgr ().isAnInputAtt (myAttID);
d889 1
a889 1
      return myAttID.hashCode ();
d893 1
a893 1
// toStringActive ()
d895 1
a895 1
// Override from class PublicObject.
d898 1
a898 1
   public final String toStringActive ()
d900 1
a900 1
      return myAttID.toString ();
d903 4
d908 1
a908 1
// shutDown ().
d910 10
a919 2
// Override from class PublicObject.
// Not to be invoked.
d922 1
a922 1
   void shutDown ()
d924 1
a924 1
      assert (false);
d928 14
a941 1
// Package-Internal Methods
d945 1
a945 1
// makeInstance (theAttID)
d947 5
a951 2
// Creates and returns a new Attribute of that is to be owned by theAttID and
// belongs to the appropriate subclass.
d954 1
a954 1
   static Attribute makeInstance (AttID theAttID)
d956 6
d964 1
a964 6
         String      theAttName;
         Method      theAttAccessor;
         Type        theAttType;
         Class       theAttClass;
         Constructor theConstructor;
         Attribute   theAtt;
d966 5
a970 1
         theAttName     = theAttID.toString ();
d972 2
a973 1
         theAttAccessor = Attribute.class.getDeclaredMethod (theAttName);
d975 1
a975 1
         theAttType     = theAttAccessor.getGenericReturnType ();
d977 1
a977 1
         theAttClass    = null;
d979 1
a979 5
         for (Class theClass: Attribute.class.getDeclaredClasses ())
            {
            if (theClass.getGenericSuperclass ().equals (theAttType))
               {
               theAttClass = theClass;
d981 1
a981 2
               break;
               }
a982 8

         assert (theAttClass != null);

         theConstructor = theAttClass.getDeclaredConstructor (AttID.class);

         theAtt         = (Attribute) theConstructor.newInstance (theAttID);

         return theAtt;
d987 4
a990 3
         handleMakeInstExc (theAttID, theExc);

         return null;
d995 4
a998 1
// handleMakeInstExc (theAttID, theExc)
d1000 3
a1002 1
// Handles any exception, theExc, thrown in makeInstance (theAttID).
d1005 2
a1006 1
   private static void handleMakeInstExc (AttID theAttID, Exception theExc)
d1008 5
a1012 1
      try
d1014 7
a1020 2
         throw theExc;
         }
d1022 1
a1022 7
      catch (NoSuchMethodException theExc2)
         {
         InternalObject.intAbortWmsg (
            "   An AttID was found that does not correspond "
          +    "to any Attribute accessor method.\n"
          + "\n"
          + "      AttID: " + theAttID);
d1025 1
a1025 8
      catch (Exception theExc2)
         {
         InternalObject.intAbortWmsg (
            "   An exception was thrown in Attribute.makeInstance (...):\n"
          + "\n"
          + "      AttID:     " + theAttID + "\n"
          + "      Exception: " + theExc2);
         }
d1029 5
a1033 1
// Accessors
d1036 21
a1056 1
   final AttID getAttID ()
d1058 1
a1058 1
      return myAttID;
d1061 19
a1079 3
//==============================================================================
// Private Methods
//==============================================================================
d1082 1
a1082 1
// getAtt (dummyRef, theAttID) methods
d1084 1
a1084 3
// Each of these methods returns the Attribute corresponding to theAttID, cast
// as an Attribute <RefType>, where RefType is the type of the dummyArg
// argument. The dummyArg argument is not otherwise used.
d1087 4
a1090 4
private static Attribute <Boolean>   getAtt (Boolean   dummyArg, AttID theAttID)
   {
   return (BoolAtt)         theAttID.getAtt ();
   }
d1092 3
a1094 4
private static Attribute <Integer>   getAtt (Integer   dummyArg, AttID theAttID)
   {
   return (IntAtt)          theAttID.getAtt ();
   }
d1096 3
a1098 4
private static Attribute <Double>    getAtt (Double    dummyArg, AttID theAttID)
   {
   return (DblAtt)          theAttID.getAtt ();
   }
d1100 8
a1107 4
private static Attribute <boolean[]> getAtt (boolean[] dummyarg, AttID theAttID)
   {
   return (BoolVecAtt)      theAttID.getAtt ();
   }
d1109 2
a1110 13
private static Attribute <int[]>     getAtt (int[]     dummyarg, AttID theAttID)
   {
   return (IntVecAtt)       theAttID.getAtt ();
   }

private static Attribute <double[]>  getAtt (double[]  dummyarg, AttID theAttID)
   {
   return (DblVecAtt)       theAttID.getAtt ();
   }

//==============================================================================
// Private Constructors
//==============================================================================
d1112 1
a1112 4
   private Attribute (AttID theAttID, Class theValueType)
      {
      myAttID     = theAttID;
      myValueType = theValueType;
d1116 1
a1116 1
// Private Fields
d1120 1
a1120 1
// myAttID
d1122 1
a1122 1
// The AttID identifies this Attribute.
d1125 1
a1125 1
   private final AttID myAttID;
d1130 1
a1130 2
// The value type of this Attribute, i.e., the type of value stored by the
// attributes represented by this Attribute.
d1133 1
a1133 5
   private final Class myValueType;

//==============================================================================
// Private Static Nested Classes
//==============================================================================
d1136 4
a1139 2
// Each of these nested classes extends class Attribute and represents WIT
// attributes of a single value type.
d1142 1
a1142 7
   private static final class BoolAtt       extends Attribute <Boolean>
   {
   BoolAtt (AttID theAttID)
      {
      super (theAttID, boolean.class);
      }
   }
d1145 3
a1147 9

   private static final class IntAtt       extends Attribute <Integer>
   {
   IntAtt (AttID theAttID)
      {
      super (theAttID, int.class);
      }
   }

d1150 1
a1150 9
   private static final class DblAtt        extends Attribute <Double>
   {
   DblAtt (AttID theAttID)
      {
      super (theAttID, double.class);
      }
   }

//------------------------------------------------------------------------------
d1152 3
a1154 9
   private static final class BoolVecAtt extends Attribute <boolean[]>
   {
   BoolVecAtt (AttID theAttID)
      {
      super (theAttID, boolean[].class);
      }
   }

//------------------------------------------------------------------------------
d1156 1
a1156 3
   private static final class IntVecAtt extends Attribute <int[]>
   {
   IntVecAtt (AttID theAttID)
d1158 1
a1158 5
      super (theAttID, int[].class);
      }
   }

//------------------------------------------------------------------------------
d1160 1
a1160 5
   private static final class DblVecAtt  extends Attribute <double[]>
   {
   DblVecAtt (AttID theAttID)
      {
      super (theAttID, double[].class);
a1161 1
   }
@


1.35
log
@Attributes.
@
text
@@


1.34
log
@Attributes.
@
text
@d705 1
a705 5
      return
         theProblem.
            getProbCoord ().
               getAttCIMgr ().
                  isAnInputAtt (getAttID ());
d757 6
a762 5
         String    theAttName;
         Method    theAttAccessor;
         Type      theAttType;
         Class     theAttClass;
         Attribute theAtt;
d784 1
a784 1
         theAtt         = (Attribute) theAttClass.newInstance ();
d786 1
a786 1
         theAtt.myAttID = theAttID;
d886 1
a886 1
   private Attribute (Class theValueType)
d888 1
d902 1
a902 1
   private AttID myAttID;
d924 1
a924 1
   BoolAtt ()
d926 1
a926 1
      super (boolean.class);
d934 1
a934 1
   IntAtt ()
d936 1
a936 1
      super (int.class);
d944 1
a944 1
   DblAtt ()
d946 1
a946 1
      super (double.class);
d954 1
a954 1
   BoolVecAtt ()
d956 1
a956 1
      super (boolean[].class);
d964 1
a964 1
   IntVecAtt ()
d966 1
a966 1
      super (int[].class);
d974 1
a974 1
   DblVecAtt ()
d976 1
a976 1
      super (double[].class);
@


1.33
log
@Attributes.
@
text
@d663 4
a666 1
   public abstract Class getValueType ();
d889 1
a889 1
   private Attribute ()
d891 1
d906 9
a921 9
//
//    Nested Class                 Value Type
//    -----------------------      ----------
//    Attribute.BoolAtt         boolean
//    Attribute.IntAtt         int
//    Attribute.DblAtt          double
//    Attribute.BoolVecAtt   boolean[]
//    Attribute.IntVecAtt   int[]
//    Attribute.DblVecAtt    double[]
d928 1
a928 5
      }

   public Class getValueType ()
      {
      return boolean.class;
d938 1
a938 5
      }

   public Class getValueType ()
      {
      return int.class;
d948 1
a948 5
      }

   public Class getValueType ()
      {
      return double.class;
d958 1
a958 5
      }

   public Class getValueType ()
      {
      return boolean[].class;
d968 1
a968 5
      }

   public Class getValueType ()
      {
      return int[].class;
d978 1
a978 5
      }

   public Class getValueType ()
      {
      return double[].class;
@


1.32
log
@Attributes.
@
text
@d790 23
a812 1
      catch (NoSuchMethodException theExc)
d819 1
d821 1
a821 3
         return null;
         }
      catch (Exception theExc)
d824 1
a824 1
            "   Exception thrown in Attribute.makeInstance (...):\n"
d826 2
a827 3
          + "      " + theExc);

         return null;
@


1.31
log
@Attributes.
@
text
@d36 1
a36 1
//          Attribute.BooleanAtt
d38 1
a38 1
//          Attribute.IntegerAtt
d40 1
a40 1
//          Attribute.DoubleAtt
d42 1
a42 1
//          Attribute.BooleanVectorAtt
d44 1
a44 1
//          Attribute.IntegerVectorAtt
d46 1
a46 1
//          Attribute.DoubleVectorAtt
d834 1
a834 1
   return (BooleanAtt)       theAttID.getAtt ();
d839 1
a839 1
   return (IntegerAtt)       theAttID.getAtt ();
d844 1
a844 1
   return (DoubleAtt)        theAttID.getAtt ();
d849 1
a849 1
   return (BooleanVectorAtt) theAttID.getAtt ();
d854 1
a854 1
   return (IntegerVectorAtt) theAttID.getAtt ();
d859 1
a859 1
   return (DoubleVectorAtt)  theAttID.getAtt ();
d892 6
a897 6
//    Attribute.BooleanAtt         boolean
//    Attribute.IntegerAtt         int
//    Attribute.DoubleAtt          double
//    Attribute.BooleanVectorAtt   boolean[]
//    Attribute.IntegerVectorAtt   int[]
//    Attribute.DoubleVectorAtt    double[]
d900 1
a900 1
   private static final class BooleanAtt       extends Attribute <Boolean>
d902 1
a902 1
   BooleanAtt ()
d914 1
a914 1
   private static final class IntegerAtt       extends Attribute <Integer>
d916 1
a916 1
   IntegerAtt ()
d928 1
a928 1
   private static final class DoubleAtt        extends Attribute <Double>
d930 1
a930 1
   DoubleAtt ()
d942 1
a942 1
   private static final class BooleanVectorAtt extends Attribute <boolean[]>
d944 1
a944 1
   BooleanVectorAtt ()
d956 1
a956 1
   private static final class IntegerVectorAtt extends Attribute <int[]>
d958 1
a958 1
   IntegerVectorAtt ()
d970 1
a970 1
   private static final class DoubleVectorAtt  extends Attribute <double[]>
d972 1
a972 1
   DoubleVectorAtt ()
@


1.30
log
@Attributes.
@
text
@d16 1
a16 1
// Class Attribute
d19 12
d35 1
a35 1
//       Attribute
d37 1
d39 1
d41 1
d43 1
d45 1
d49 1
a49 1
public abstract class Attribute extends PublicObject
d63 1
a63 1
public static BooleanAtt             accAfterOptImp ()
d65 1
a65 1
   return    (BooleanAtt)            accAfterOptImp.getAtt ();
d68 1
a68 1
public static BooleanAtt             accAfterSoftLB ()
d70 1
a70 1
   return    (BooleanAtt)            accAfterSoftLB.getAtt ();
d73 1
a73 1
public static BooleanAtt                accelerated ()
d75 1
a75 1
   return    (BooleanAtt)               accelerated.getAtt ();
d78 1
a78 1
public static BooleanAtt               asapPipOrder ()
d80 1
a80 1
   return    (BooleanAtt)              asapPipOrder.getAtt ();
d83 1
a83 1
public static BooleanAtt               autoPriority ()
d85 1
a85 1
   return    (BooleanAtt)              autoPriority.getAtt ();
d88 1
a88 1
public static IntegerVectorAtt         buildAheadUB ()
d90 1
a90 1
   return    (IntegerVectorAtt)        buildAheadUB.getAtt ();
d93 1
a93 1
public static BooleanAtt                  buildAsap ()
d95 1
a95 1
   return    (BooleanAtt)                 buildAsap.getAtt ();
d98 1
a98 1
public static BooleanAtt                  buildNstn ()
d100 1
a100 1
   return    (BooleanAtt)                 buildNstn.getAtt ();
d103 1
a103 1
public static BooleanAtt                 compPrices ()
d105 1
a105 1
   return    (BooleanAtt)                compPrices.getAtt ();
d108 1
a108 1
public static BooleanAtt        computeCriticalList ()
d110 1
a110 1
   return    (BooleanAtt)       computeCriticalList.getAtt ();
d113 1
a113 1
public static DoubleVectorAtt              consRate ()
d115 1
a115 1
   return    (DoubleVectorAtt)             consRate.getAtt ();
d118 1
a118 1
public static DoubleVectorAtt               consVol ()
d120 1
a120 1
   return    (DoubleVectorAtt)              consVol.getAtt ();
d123 1
a123 1
public static DoubleVectorAtt         cumShipReward ()
d125 1
a125 1
   return    (DoubleVectorAtt)        cumShipReward.getAtt ();
d128 1
a128 1
public static IntegerAtt            currentScenario ()
d130 1
a130 1
   return    (IntegerAtt)           currentScenario.getAtt ();
d133 1
a133 1
public static DoubleVectorAtt            demandVol ()
d135 1
a135 1
   return    (DoubleVectorAtt)           demandVol.getAtt ();
d138 1
a138 1
public static IntegerAtt             earliestPeriod ()
d140 1
a140 1
   return    (IntegerAtt)            earliestPeriod.getAtt ();
d143 1
a143 1
public static IntegerAtt               equitability ()
d145 1
a145 1
   return    (IntegerAtt)              equitability.getAtt ();
d148 1
a148 1
public static DoubleVectorAtt             excessVol ()
d150 1
a150 1
   return    (DoubleVectorAtt)            excessVol.getAtt ();
d153 1
a153 1
public static DoubleVectorAtt              execCost ()
d155 1
a155 1
   return    (DoubleVectorAtt)             execCost.getAtt ();
d158 1
a158 1
public static BooleanAtt               execEmptyBom ()
d160 1
a160 1
   return    (BooleanAtt)              execEmptyBom.getAtt ();
d163 1
a163 1
public static DoubleAtt                 execPenalty ()
d165 1
a165 1
   return    (DoubleAtt)                execPenalty.getAtt ();
d168 1
a168 1
public static DoubleVectorAtt               execVol ()
d170 1
a170 1
   return    (DoubleVectorAtt)              execVol.getAtt ();
d173 1
a173 1
public static BooleanVectorAtt           executable ()
d175 1
a175 1
   return    (BooleanVectorAtt)          executable.getAtt ();
d178 1
a178 1
public static BooleanAtt                expAllowed ()
d180 1
a180 1
   return    (BooleanAtt)               expAllowed.getAtt ();
d183 1
a183 1
public static DoubleAtt                 expAversion ()
d185 1
a185 1
   return    (DoubleAtt)                expAversion.getAtt ();
d188 1
a188 1
public static DoubleAtt                   expCutoff ()
d190 1
a190 1
   return    (DoubleAtt)                  expCutoff.getAtt ();
d193 1
a193 1
public static DoubleAtt              expNetAversion ()
d195 1
a195 1
   return    (DoubleAtt)             expNetAversion.getAtt ();
d198 1
a198 1
public static BooleanAtt               extOptActive ()
d200 1
a200 1
   return    (BooleanAtt)              extOptActive.getAtt ();
d203 1
a203 1
public static DoubleAtt                 falloutRate ()
d205 1
a205 1
   return    (DoubleAtt)                falloutRate.getAtt ();
d208 1
a208 1
public static BooleanAtt                   feasible ()
d210 1
a210 1
   return    (BooleanAtt)                  feasible.getAtt ();
d213 1
a213 1
public static IntegerAtt               focusHorizon ()
d215 1
a215 1
   return    (IntegerAtt)              focusHorizon.getAtt ();
d218 1
a218 1
public static DoubleVectorAtt      focusShortageVol ()
d220 1
a220 1
   return    (DoubleVectorAtt)     focusShortageVol.getAtt ();
d223 1
a223 1
public static BooleanAtt              forcedMultiEq ()
d225 1
a225 1
   return    (BooleanAtt)             forcedMultiEq.getAtt ();
d228 1
a228 1
public static DoubleVectorAtt            fssExecVol ()
d230 1
a230 1
   return    (DoubleVectorAtt)           fssExecVol.getAtt ();
d233 1
a233 1
public static DoubleVectorAtt             fssSubVol ()
d235 1
a235 1
   return    (DoubleVectorAtt)            fssSubVol.getAtt ();
d238 1
a238 1
public static BooleanAtt            heurAllocActive ()
d240 1
a240 1
   return    (BooleanAtt)           heurAllocActive.getAtt ();
d243 1
a243 1
public static BooleanAtt            highPrecisionWD ()
d245 1
a245 1
   return    (BooleanAtt)           highPrecisionWD.getAtt ();
d248 1
a248 1
public static IntegerVectorAtt         impactPeriod ()
d250 1
a250 1
   return    (IntegerVectorAtt)        impactPeriod.getAtt ();
d253 1
a253 1
public static DoubleVectorAtt            incLotSize ()
d255 1
a255 1
   return    (DoubleVectorAtt)           incLotSize.getAtt ();
d258 1
a258 1
public static DoubleVectorAtt           incLotSize2 ()
d260 1
a260 1
   return    (DoubleVectorAtt)          incLotSize2.getAtt ();
d263 1
a263 1
public static BooleanAtt         independentOffsets ()
d265 1
a265 1
   return    (BooleanAtt)        independentOffsets.getAtt ();
d268 1
a268 1
public static BooleanAtt                intExecVols ()
d270 1
a270 1
   return    (BooleanAtt)               intExecVols.getAtt ();
d273 1
a273 1
public static BooleanAtt                intShipVols ()
d275 1
a275 1
   return    (BooleanAtt)               intShipVols.getAtt ();
d278 1
a278 1
public static BooleanAtt                 intSubVols ()
d280 1
a280 1
   return    (BooleanAtt)                intSubVols.getAtt ();
d283 1
a283 1
public static IntegerAtt               latestPeriod ()
d285 1
a285 1
   return    (IntegerAtt)              latestPeriod.getAtt ();
d288 1
a288 1
public static DoubleVectorAtt        lotSize2Thresh ()
d290 1
a290 1
   return    (DoubleVectorAtt)       lotSize2Thresh.getAtt ();
d293 1
a293 1
public static DoubleAtt                  lotSizeTol ()
d295 1
a295 1
   return    (DoubleAtt)                 lotSizeTol.getAtt ();
d298 1
a298 1
public static BooleanAtt                     mandEC ()
d300 1
a300 1
   return    (BooleanAtt)                    mandEC.getAtt ();
d303 1
a303 1
public static DoubleVectorAtt            minLotSize ()
d305 1
a305 1
   return    (DoubleVectorAtt)           minLotSize.getAtt ();
d308 1
a308 1
public static DoubleVectorAtt           minLotSize2 ()
d310 1
a310 1
   return    (DoubleVectorAtt)          minLotSize2.getAtt ();
d313 1
a313 1
public static BooleanAtt              minimalExcess ()
d315 1
a315 1
   return    (BooleanAtt)             minimalExcess.getAtt ();
d318 1
a318 1
public static BooleanAtt                    mipMode ()
d320 1
a320 1
   return    (BooleanAtt)                   mipMode.getAtt ();
d323 1
a323 1
public static DoubleVectorAtt            mrpConsVol ()
d325 1
a325 1
   return    (DoubleVectorAtt)           mrpConsVol.getAtt ();
d328 1
a328 1
public static DoubleVectorAtt          mrpExcessVol ()
d330 1
a330 1
   return    (DoubleVectorAtt)         mrpExcessVol.getAtt ();
d333 1
a333 1
public static DoubleVectorAtt            mrpExecVol ()
d335 1
a335 1
   return    (DoubleVectorAtt)           mrpExecVol.getAtt ();
d338 1
a338 1
public static BooleanAtt             mrpNetAllowed ()
d340 1
a340 1
   return    (BooleanAtt)            mrpNetAllowed.getAtt ();
d343 1
a343 1
public static DoubleVectorAtt        mrpResidualVol ()
d345 1
a345 1
   return    (DoubleVectorAtt)       mrpResidualVol.getAtt ();
d348 1
a348 1
public static DoubleVectorAtt             mrpSubVol ()
d350 1
a350 1
   return    (DoubleVectorAtt)            mrpSubVol.getAtt ();
d353 1
a353 1
public static BooleanAtt                  multiExec ()
d355 1
a355 1
   return    (BooleanAtt)                 multiExec.getAtt ();
d358 1
a358 1
public static BooleanAtt                 multiRoute ()
d360 1
a360 1
   return    (BooleanAtt)                multiRoute.getAtt ();
d363 1
a363 1
public static IntegerAtt                 nScenarios ()
d365 1
a365 1
   return    (IntegerAtt)                nScenarios.getAtt ();
d368 1
a368 1
public static BooleanAtt                 netAllowed ()
d370 1
a370 1
   return    (BooleanAtt)                netAllowed.getAtt ();
d373 1
a373 1
public static BooleanAtt               nstnResidual ()
d375 1
a375 1
   return    (BooleanAtt)              nstnResidual.getAtt ();
d378 1
a378 1
public static IntegerAtt                objectStage ()
d380 1
a380 1
   return    (IntegerAtt)               objectStage.getAtt ();
d383 1
a383 1
public static DoubleVectorAtt                offset ()
d385 1
a385 1
   return    (DoubleVectorAtt)               offset.getAtt ();
d388 1
a388 1
public static BooleanAtt                    penExec ()
d390 1
a390 1
   return    (BooleanAtt)                   penExec.getAtt ();
d393 1
a393 1
public static BooleanAtt                perfPegging ()
d395 1
a395 1
   return    (BooleanAtt)               perfPegging.getAtt ();
d398 1
a398 1
public static IntegerVectorAtt          periodStage ()
d400 1
a400 1
   return    (IntegerVectorAtt)         periodStage.getAtt ();
d403 1
a403 1
public static BooleanAtt            pgdCritListMode ()
d405 1
a405 1
   return    (BooleanAtt)           pgdCritListMode.getAtt ();
d408 1
a408 1
public static BooleanAtt                  pipExists ()
d410 1
a410 1
   return    (BooleanAtt)                 pipExists.getAtt ();
d413 1
a413 1
public static BooleanAtt             pipSeqFromHeur ()
d415 1
a415 1
   return    (BooleanAtt)            pipSeqFromHeur.getAtt ();
d418 1
a418 1
public static BooleanAtt              postprocessed ()
d420 1
a420 1
   return    (BooleanAtt)             postprocessed.getAtt ();
d423 1
a423 1
public static BooleanAtt          prefHighStockSLBs ()
d425 1
a425 1
   return    (BooleanAtt)         prefHighStockSLBs.getAtt ();
d428 1
a428 1
public static BooleanAtt               preprocessed ()
d430 1
a430 1
   return    (BooleanAtt)              preprocessed.getAtt ();
d433 1
a433 1
public static IntegerVectorAtt             priority ()
d435 1
a435 1
   return    (IntegerVectorAtt)            priority.getAtt ();
d438 1
a438 1
public static DoubleAtt                 probability ()
d440 1
a440 1
   return    (DoubleAtt)                probability.getAtt ();
d443 1
a443 1
public static DoubleVectorAtt               prodVol ()
d445 1
a445 1
   return    (DoubleVectorAtt)              prodVol.getAtt ();
d448 1
a448 1
public static DoubleVectorAtt           productRate ()
d450 1
a450 1
   return    (DoubleVectorAtt)          productRate.getAtt ();
d453 1
a453 1
public static BooleanVectorAtt              propRtg ()
d455 1
a455 1
   return    (BooleanVectorAtt)             propRtg.getAtt ();
d458 1
a458 1
public static DoubleVectorAtt                reqVol ()
d460 1
a460 1
   return    (DoubleVectorAtt)               reqVol.getAtt ();
d463 1
a463 1
public static DoubleVectorAtt           residualVol ()
d465 1
a465 1
   return    (DoubleVectorAtt)          residualVol.getAtt ();
d468 1
a468 1
public static BooleanAtt           respectStockSLBs ()
d470 1
a470 1
   return    (BooleanAtt)          respectStockSLBs.getAtt ();
d473 1
a473 1
public static BooleanAtt               roundReqVols ()
d475 1
a475 1
   return    (BooleanAtt)              roundReqVols.getAtt ();
d478 1
a478 1
public static DoubleVectorAtt          routingShare ()
d480 1
a480 1
   return    (DoubleVectorAtt)         routingShare.getAtt ();
d483 1
a483 1
public static BooleanAtt               scrapAllowed ()
d485 1
a485 1
   return    (BooleanAtt)              scrapAllowed.getAtt ();
d488 1
a488 1
public static DoubleVectorAtt             scrapCost ()
d490 1
a490 1
   return    (DoubleVectorAtt)            scrapCost.getAtt ();
d493 1
a493 1
public static DoubleVectorAtt             scrapVol ()
d495 1
a495 1
   return    (DoubleVectorAtt)            scrapVol.getAtt ();
d498 1
a498 1
public static DoubleAtt                   searchInc ()
d500 1
a500 1
   return    (DoubleAtt)                  searchInc.getAtt ();
d503 1
a503 1
public static BooleanAtt                  selForDel ()
d505 1
a505 1
   return    (BooleanAtt)                 selForDel.getAtt ();
d508 1
a508 1
public static BooleanAtt                   selSplit ()
d510 1
a510 1
   return    (BooleanAtt)                  selSplit.getAtt ();
d513 1
a513 1
public static DoubleVectorAtt           shadowPrice ()
d515 1
a515 1
   return    (DoubleVectorAtt)          shadowPrice.getAtt ();
d518 1
a518 1
public static BooleanAtt            shipLateAllowed ()
d520 1
a520 1
   return    (BooleanAtt)           shipLateAllowed.getAtt ();
d523 1
a523 1
public static IntegerVectorAtt           shipLateUB ()
d525 1
a525 1
   return    (IntegerVectorAtt)          shipLateUB.getAtt ();
d528 1
a528 1
public static DoubleVectorAtt            shipReward ()
d530 1
a530 1
   return    (DoubleVectorAtt)           shipReward.getAtt ();
d533 1
a533 1
public static DoubleVectorAtt               shipVol ()
d535 1
a535 1
   return    (DoubleVectorAtt)              shipVol.getAtt ();
d538 1
a538 1
public static BooleanAtt               singleSource ()
d540 1
a540 1
   return    (BooleanAtt)              singleSource.getAtt ();
d543 1
a543 1
public static BooleanAtt               skipFailures ()
d545 1
a545 1
   return    (BooleanAtt)              skipFailures.getAtt ();
d548 1
a548 1
public static BooleanAtt              stageByObject ()
d550 1
a550 1
   return    (BooleanAtt)             stageByObject.getAtt ();
d553 1
a553 1
public static BooleanAtt                  stochMode ()
d555 1
a555 1
   return    (BooleanAtt)                 stochMode.getAtt ();
d558 1
a558 1
public static BooleanAtt              stochSolnMode ()
d560 1
a560 1
   return    (BooleanAtt)             stochSolnMode.getAtt ();
d563 1
a563 1
public static DoubleVectorAtt             stockCost ()
d565 1
a565 1
   return    (DoubleVectorAtt)            stockCost.getAtt ();
d568 1
a568 1
public static BooleanAtt          stockReallocation ()
d570 1
a570 1
   return    (BooleanAtt)         stockReallocation.getAtt ();
d573 1
a573 1
public static DoubleVectorAtt              stockVol ()
d575 1
a575 1
   return    (DoubleVectorAtt)             stockVol.getAtt ();
d578 1
a578 1
public static DoubleVectorAtt               subCost ()
d580 1
a580 1
   return    (DoubleVectorAtt)              subCost.getAtt ();
d583 1
a583 1
public static DoubleVectorAtt                subVol ()
d585 1
a585 1
   return    (DoubleVectorAtt)               subVol.getAtt ();
d588 1
a588 1
public static DoubleVectorAtt            supplyVol ()
d590 1
a590 1
   return    (DoubleVectorAtt)           supplyVol.getAtt ();
d593 1
a593 1
public static BooleanAtt             tieBreakPropRt ()
d595 1
a595 1
   return    (BooleanAtt)            tieBreakPropRt.getAtt ();
d598 1
a598 1
public static BooleanAtt               truncOffsets ()
d600 1
a600 1
   return    (BooleanAtt)              truncOffsets.getAtt ();
d603 1
a603 1
public static BooleanAtt           twoLevelLotSizes ()
d605 1
a605 1
   return    (BooleanAtt)          twoLevelLotSizes.getAtt ();
d608 1
a608 1
public static BooleanAtt            twoWayMultiExec ()
d610 1
a610 1
   return    (BooleanAtt)           twoWayMultiExec.getAtt ();
d613 1
a613 1
public static BooleanAtt           useFocusHorizons ()
d615 1
a615 1
   return    (BooleanAtt)          useFocusHorizons.getAtt ();
d618 1
a618 1
public static BooleanAtt              userHeurStart ()
d620 1
a620 1
   return    (BooleanAtt)             userHeurStart.getAtt ();
d623 1
a623 1
public static DoubleAtt                     wbounds ()
d625 1
a625 1
   return    (DoubleAtt)                    wbounds.getAtt ();
d628 1
a628 1
public static DoubleVectorAtt             yieldRate ()
d630 1
a630 1
   return    (DoubleVectorAtt)            yieldRate.getAtt ();
d660 1
a660 2
// Returns the value type of this Attribute: the type used by the "set" and
// "get" methods of class Component that pertain to this Attribute.
d663 1
a663 17
   public final Class getValueType ()
      {
      try
         {
         Method theGetMethod;

         theGetMethod = Component.class.getDeclaredMethod ("get", getClass ());

         return (Class) theGetMethod.getGenericReturnType ();
         }
      catch (Exception theExc)
         {
         assert (false);

         return null;
         }
      }
a743 48
// Public Static Nested Classes
//==============================================================================

//------------------------------------------------------------------------------
// Each of these nested classes extends class Attribute and represents WIT
// attributes of a single value type.
//
//    Nested Class                 Value Type
//    -----------------------      ----------
//    Attribute.BooleanAtt         boolean
//    Attribute.IntegerAtt         int
//    Attribute.DoubleAtt          double
//    Attribute.BooleanVectorAtt   boolean[]
//    Attribute.IntegerVectorAtt   int[]
//    Attribute.DoubleVectorAtt    double[]
//------------------------------------------------------------------------------

   public static final class BooleanAtt       extends Attribute
   {
                             BooleanAtt       () {}
   }

   public static final class IntegerAtt       extends Attribute
   {
                             IntegerAtt       () {}
   }

   public static final class DoubleAtt        extends Attribute
   {
                             DoubleAtt        () {}
   }

   public static final class BooleanVectorAtt extends Attribute
   {
                             BooleanVectorAtt () {}
   }

   public static final class IntegerVectorAtt extends Attribute
   {
                             IntegerVectorAtt () {}
   }

   public static final class DoubleVectorAtt  extends Attribute
   {
                             DoubleVectorAtt  () {}
   }

//==============================================================================
d760 1
d768 15
a782 1
         theAttClass    = (Class) theAttAccessor.getGenericReturnType ();
d802 4
a805 1
         assert (false);
d821 42
a870 4
// Private Methods
//==============================================================================

//==============================================================================
d883 100
@


1.29
log
@Attributes.
@
text
@d46 549
a594 4
   public static DoubleVectorAtt       demandVol ()
      {
      return    (DoubleVectorAtt)      demandVol.getAtt ();
      }
d596 4
a599 4
   public static BooleanAtt           expAllowed ()
      {
      return    (BooleanAtt)          expAllowed.getAtt ();
      }
d601 4
a604 4
   public static BooleanAtt        mrpNetAllowed ()
      {
      return    (BooleanAtt)       mrpNetAllowed.getAtt ();
      }
d606 4
a609 4
   public static DoubleVectorAtt        scrapVol ()
      {
      return    (DoubleVectorAtt)       scrapVol.getAtt ();
      }
d611 4
a614 4
   public static DoubleVectorAtt       supplyVol ()
      {
      return    (DoubleVectorAtt)      supplyVol.getAtt ();
      }
@


1.28
log
@Attributes.
@
text
@d280 6
a296 42
// checkAccessors ()
//
// For each AttID, verifies that there is a corresponding Attriubute accessor
// method.
//------------------------------------------------------------------------------

   static void checkAccessors ()
      {
      Method[]         theMethods;
      HashSet <String> theMethodNames;
      boolean          missingFound;

      System.out.println (
           "\n"
         + "Verifying that each Attribute has an accessor method.\n");

      theMethods     = Attribute.class.getDeclaredMethods ();

      theMethodNames = new HashSet <String> (2 * theMethods.length);

      for (Method theMethod: theMethods)
         theMethodNames.add (theMethod.getName ());

      missingFound = false;

      for (AttID theAttID: AttID.values ())
         {
         if (! theMethodNames.contains (theAttID.toString ()))
            {
            System.out.println (
               "Missing Attribute accessor method: " + theAttID + " ().");

            missingFound = true;
            }
         }

      if (! missingFound)
         System.out.println (
            "Verified: Every Attribute has an accessor method.\n");
      }

//------------------------------------------------------------------------------
@


1.27
log
@Attributes.
@
text
@d291 1
a291 1
// selfTest ()
d293 2
a294 3
// Performs self-test for Attributes:
//   For each AttID, verifies that there is a corresponding Attriubute accessor
//   method.
d297 1
a297 1
   static void selfTest ()
d301 1
d305 1
a305 1
         + "Performing self-test for class Attribute.\n");
d314 2
d322 2
d326 4
@


1.26
log
@Attributes.
@
text
@a279 4
         System.out.println (
              "\n"
            + "Missing Attribute accessor method: " + theAttID + " ().");

d291 34
@


1.25
log
@Attributes.
@
text
@d114 1
a114 1
         InternalObject.intAbortWmsg ("   " + theExc);
d288 1
a288 1
         InternalObject.intAbortWmsg ("   " + theExc);
@


1.24
log
@Attributes.
@
text
@d22 8
a29 7
//    Attribute
//       Attribute.BooleanAtt
//       Attribute.IntegerAtt
//       Attribute.DoubleAtt
//       Attribute.BooleanVectorAtt
//       Attribute.IntegerVectorAtt
//       Attribute.DoubleVectorAtt
d32 1
a32 1
public abstract class Attribute
d133 1
a133 5
      PublicObject.
         mustBeNonNullActive (
             theComp,
            "theComp",
            "Attribute.appliesTo");
d155 1
a155 5
      PublicObject.
         mustBeNonNullActive (
             theProblem,
            "theProblem",
            "Attribute.isAnInputAtt");
d176 1
a176 1
// toString ()
d178 1
a178 1
// Override from class Object.
d181 1
a181 1
   public final String toString ()
d186 12
@


1.23
log
@Attributes.
@
text
@d132 6
d151 1
a151 1
//                input attributes: their values can be set.
d153 1
a153 1
//                output attributes: their values cannot  be set.
d158 6
@


1.22
log
@Attributes.
@
text
@d160 11
@


1.21
log
@Attributes.
@
text
@d23 3
a25 3
//       Attribute.BooleanScalarAtt
//       Attribute.IntegerScalarAtt
//       Attribute.DoubleScalarAtt
d50 1
a50 1
   public static BooleanScalarAtt     expAllowed ()
d52 1
a52 1
      return    (BooleanScalarAtt)    expAllowed.getAtt ();
d55 1
a55 1
   public static BooleanScalarAtt  mrpNetAllowed ()
d57 1
a57 1
      return    (BooleanScalarAtt) mrpNetAllowed.getAtt ();
d180 3
a182 3
//    Attribute.BooleanScalarAtt   boolean
//    Attribute.IntegerScalarAtt   int
//    Attribute.DoubleScalarAtt    double
d188 1
a188 1
   public static final class BooleanScalarAtt extends Attribute
d190 1
a190 1
                             BooleanScalarAtt () {}
d193 1
a193 1
   public static final class IntegerScalarAtt extends Attribute
d195 1
a195 1
                             IntegerScalarAtt () {}
d198 1
a198 1
   public static final class DoubleScalarAtt  extends Attribute
d200 1
a200 1
                             DoubleScalarAtt  () {}
@


1.20
log
@Attributes.
@
text
@d23 6
a28 6
//       Attribute.BooleanScalar
//       Attribute.IntegerScalar
//       Attribute.DoubleScalar
//       Attribute.BooleanVector
//       Attribute.IntegerVector
//       Attribute.DoubleVector
d45 1
a45 1
   public static DoubleVector       demandVol ()
d47 1
a47 1
      return    (DoubleVector)      demandVol.getAtt ();
d50 1
a50 1
   public static BooleanScalar     expAllowed ()
d52 1
a52 1
      return    (BooleanScalar)    expAllowed.getAtt ();
d55 1
a55 1
   public static BooleanScalar  mrpNetAllowed ()
d57 1
a57 1
      return    (BooleanScalar) mrpNetAllowed.getAtt ();
d60 1
a60 1
   public static DoubleVector        scrapVol ()
d62 1
a62 1
      return    (DoubleVector)       scrapVol.getAtt ();
d65 1
a65 1
   public static DoubleVector       supplyVol ()
d67 1
a67 1
      return    (DoubleVector)      supplyVol.getAtt ();
d178 8
a185 8
//    Nested Class              Value Type
//    -----------------------   ----------
//    Attribute.BooleanScalar   boolean
//    Attribute.IntegerScalar   int
//    Attribute.DoubleScalar    double
//    Attribute.BooleanVector   boolean[]
//    Attribute.IntegerVector   int[]
//    Attribute.DoubleVector    double[]
d188 1
a188 1
   public static final class BooleanScalar extends Attribute
d190 1
a190 1
                             BooleanScalar () {}
d193 1
a193 1
   public static final class IntegerScalar extends Attribute
d195 1
a195 1
                             IntegerScalar () {}
d198 1
a198 1
   public static final class DoubleScalar  extends Attribute
d200 1
a200 1
                             DoubleScalar  () {}
d203 1
a203 1
   public static final class BooleanVector extends Attribute
d205 1
a205 1
                             BooleanVector () {}
d208 1
a208 1
   public static final class IntegerVector extends Attribute
d210 1
a210 1
                             IntegerVector () {}
d213 1
a213 1
   public static final class DoubleVector  extends Attribute
d215 1
a215 1
                             DoubleVector  () {}
@


1.19
log
@Attributes.
@
text
@d142 18
@


1.18
log
@Attributes.
@
text
@d95 1
a95 1
// valueType ()
d101 17
a117 1
   public abstract Class valueType ();
d172 1
a172 6
   public Class valueType ()
      {
      return boolean.class;
      }

   BooleanScalar () {}
a174 2
//------------------------------------------------------------------------------

d177 1
a177 6
   public Class valueType ()
      {
      return int.class;
      }

   IntegerScalar () {}
a179 2
//------------------------------------------------------------------------------

d182 1
a182 6
   public Class valueType ()
      {
      return double.class;
      }

   DoubleScalar () {}
a184 2
//------------------------------------------------------------------------------

d187 1
a187 6
   public Class valueType ()
      {
      return boolean[].class;
      }

   BooleanVector () {}
a189 2
//------------------------------------------------------------------------------

d192 1
a192 6
   public Class valueType ()
      {
      return int[].class;
      }

   IntegerVector () {}
a194 2
//------------------------------------------------------------------------------

d197 1
a197 6
   public Class valueType ()
      {
      return double[].class;
      }

   DoubleVector () {}
a212 6
      Class[]   allAttClasses;
      String    theAttName;
      Method    theAttAccessor;
      Class     theAttClass;
      Attribute theAtt;

d215 4
a218 1
         allAttClasses  = Attribute.class.getDeclaredClasses ();
d237 2
d243 2
a245 2

      return null;
@


1.17
log
@Attributes.
@
text
@d34 1
a34 1
// Public static Methods
d94 8
a101 3
//==============================================================================
// Public non-static Methods
//==============================================================================
d141 11
a151 7
// Nested Classes:
//    Attribute.BooleanScalar represents WIT attributes of type Boolean Scalar.
//    Attribute.IntegerScalar                                   Integer Scalar.
//    Attribute.DoubleScalar                                    Double  Scalar.
//    Attribute.BooleanVector                                   Boolean Vector.
//    Attribute.IntegerVector                                   Integer Vector.
//    Attribute.DoubleVector                                    Double  Vector.
d156 5
d164 2
d168 5
d176 2
d180 5
d188 2
d192 5
d200 2
d204 5
d212 2
d216 5
@


1.16
log
@Attributes.
@
text
@d47 1
a47 1
      return    (DoubleVector)      demandVol.getAttribute ();
d52 1
a52 1
      return    (BooleanScalar)    expAllowed.getAttribute ();
d57 1
a57 1
      return    (BooleanScalar) mrpNetAllowed.getAttribute ();
d62 1
a62 1
      return    (DoubleVector)       scrapVol.getAttribute ();
d67 1
a67 1
      return    (DoubleVector)      supplyVol.getAttribute ();
d78 14
a91 1
      return myAttMap.values ().toArray (new Attribute[0]);
d137 6
a142 11
//    Attribute.BooleanScalar
//    Attribute.IntegerScalar
//    Attribute.DoubleScalar
//    Attribute.BooleanVector
//    Attribute.IntegerVector
//    Attribute.DoubleVector
//
// Each of these classes is simply a non-parameterized concrete version of the
// parameterized Attribute class that it extends. This allows a reference to a
// raw Attribute to be cast into its concrete value-type-specific class without
// generating an "unchecked cast" warning.
a179 32
// getInstanceFor (theAttID)
//
// Returns the Attribute identified by theAttID.
//------------------------------------------------------------------------------

   static Attribute getInstanceFor (AttID theAttID)
      {
      return myAttMap.get (theAttID);
      }

//------------------------------------------------------------------------------
// Accessors
//------------------------------------------------------------------------------

   final AttID getAttID ()
      {
      return myAttID;
      }

//==============================================================================
// Private Constructors
//==============================================================================

   private Attribute ()
      {
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
d186 1
a186 1
   private static Attribute makeInstance (AttID theAttID)
d224 9
d234 1
a234 1
// Private Fields
d237 7
a243 5
//------------------------------------------------------------------------------
// myAttMap
//
// myAttMap.get (theAttID) is the Attribute identified by theAttID.
//------------------------------------------------------------------------------
d245 3
a247 1
   private static final EnumMap <AttID, Attribute> myAttMap;
a257 18
// Static initialization block
//==============================================================================

   static
      {
      Attribute theAtt;

      myAttMap = new EnumMap <AttID, Attribute> (AttID.class);

      for (AttID theAttID: AttID.values ())
         {
         theAtt = makeInstance (theAttID);

         myAttMap.put (theAttID, theAtt);
         }
      }

//==============================================================================
@


1.15
log
@Attributes.
@
text
@d5 1
a5 1
// Contains the declaration of generic class Attribute <V>.
d16 1
a16 1
// Class Attribute <V>
d18 1
a18 2
// Represents the set of all WIT attributes that have a given name, where V is
// the value type of the attributes.
d23 6
a28 18
//
//       Attribute <Boolean>
//          Attribute.BoolAtt
//
//       Attribute <Integer>
//          Attribute.IntAtt
//
//       Attribute <Double>
//          Attribute.DblAtt
//
//       Attribute <bool[]>
//          Attribute.BoolVecAtt
//
//       Attribute <int[]>
//          Attribute.IntVecAtt
//
//       Attribute <double[]>
//          Attribute.DblVecAtt
d31 1
a31 1
public abstract class Attribute <V>
d45 1
a45 1
   public static Attribute <double[]> demandVol ()
d47 1
a47 1
      return            getDblVecAtt (demandVol);
d50 1
a50 1
   public static Attribute <Boolean>  expAllowed ()
d52 1
a52 1
      return              getBoolAtt (expAllowed);
d55 1
a55 1
   public static Attribute <Boolean>  mrpNetAllowed ()
d57 1
a57 1
      return              getBoolAtt (mrpNetAllowed);
d60 1
a60 1
   public static Attribute <double[]> scrapVol ()
d62 1
a62 1
      return            getDblVecAtt (scrapVol);
d65 1
a65 1
   public static Attribute <double[]> supplyVol ()
d67 1
a67 1
      return            getDblVecAtt (supplyVol);
d119 49
d172 11
d215 1
a215 1
      Type      theAttType;
d226 1
a226 6
         theAttType     = theAttAccessor.getGenericReturnType ();

         for (Class theAttClass: allAttClasses)
            if (theAttClass.getGenericSuperclass ().equals (theAttType))
               {
               theAtt         = (Attribute) theAttClass.newInstance ();
d228 1
a228 1
               theAtt.myAttID = theAttID;
d230 1
a230 2
               return theAtt;
               }
d232 1
a232 1
         assert (false);
a247 37
//------------------------------------------------------------------------------
// get<ValType>Att methods
//
// Each of these methods returns the Attribute owned by theAttID, cast as an
// Attribute <V> for the indicated value type.
//------------------------------------------------------------------------------

   private static Attribute <Boolean>   getBoolAtt    (AttID theAttID)
      {
      return (BoolAtt)    myAttMap.get (theAttID);
      }

   private static Attribute <Integer>   getIntAtt     (AttID theAttID)
      {
      return (IntAtt)     myAttMap.get (theAttID);
      }

   private static Attribute <Double>    getDblAtt     (AttID theAttID)
      {
      return (DblAtt)     myAttMap.get (theAttID);
      }

   private static Attribute <boolean[]> getBoolVecAtt (AttID theAttID)
      {
      return (BoolVecAtt) myAttMap.get (theAttID);
      }

   private static Attribute <int[]>     getIntVecAtt  (AttID theAttID)
      {
      return (IntVecAtt)  myAttMap.get (theAttID);
      }

   private static Attribute <double[]>  getDblVecAtt  (AttID theAttID)
      {
      return (DblVecAtt)  myAttMap.get (theAttID);
      }

a286 49
// Static Nested Classes
//==============================================================================

//------------------------------------------------------------------------------
// Nested Classes:
//    Attribute.BoolAtt
//    Attribute.IntAtt
//    Attribute.DblAtt
//    Attribute.BoolVecAtt
//    Attribute.IntVecAtt
//    Attribute.DblVecAtt
//
// Each of these classes is simply a non-parameterized concrete version of the
// parameterized Attribute class that it extends. This allows a reference to a
// raw Attribute to be cast into its concrete value-type-specific class without
// generating an "unchecked cast" warning.
//------------------------------------------------------------------------------

   private static final class BoolAtt    extends Attribute <Boolean>
   {
   BoolAtt () {}
   }

   private static final class IntAtt     extends Attribute <Integer>
   {
   IntAtt () {}
   }

   private static final class DblAtt     extends Attribute <Double>
   {
   DblAtt () {}
   }

   private static final class BoolVecAtt extends Attribute <boolean[]>
   {
   BoolVecAtt () {}
   }

   private static final class IntVecAtt  extends Attribute <int[]>
   {
   IntVecAtt () {}
   }

   private static final class DblVecAtt  extends Attribute <double[]>
   {
   DblVecAtt () {}
   }

//==============================================================================
@


1.14
log
@Attributes.
@
text
@d99 22
@


1.13
log
@Attributes.
@
text
@d86 1
a86 1
// Returns a Collection listing all of the Attributes in WIT-J.
d89 1
a89 1
   public static Collection <Attribute> values ()
d91 1
a91 1
      return myAttMap.values ();
@


1.12
log
@Attributes.
@
text
@d47 1
a47 1
// Public Methods
d84 15
@


1.11
log
@Attributes.
@
text
@d23 1
a23 2
//    Attribute <Boolean>
//       Attribute.BoolAtt
d25 2
a26 2
//    Attribute <Integer>
//       Attribute.IntAtt
d28 2
a29 2
//    Attribute <Double>
//       Attribute.DblAtt
d31 2
a32 2
//    Attribute <bool[]>
//       Attribute.BoolVecAtt
d34 2
a35 2
//    Attribute <int[]>
//       Attribute.IntVecAtt
d37 5
a41 2
//    Attribute <double[]>
//       Attribute.DblVecAtt
@


1.10
log
@Attributes.
@
text
@d26 13
a38 1
//    Attribute <double []>
d175 11
a185 1
   private static Attribute <Boolean>    getBoolAtt (AttID theAttID)
d187 1
a187 1
      return   (BoolAtt) myAttMap.get (theAttID);
d190 1
a190 1
   private static Attribute <double[]> getDblVecAtt (AttID theAttID)
d192 11
a202 1
      return (DblVecAtt) myAttMap.get (theAttID);
d250 4
d257 3
a259 9
// parameterized Attribute class that it extends.
//
// Class Hierarchy:
//
//    Attribute <Boolean>
//       Attribute.BoolAtt
//
//    Attribute <double []>
//       Attribute.DblVecAtt
d262 21
a282 1
   private static final class BoolAtt   extends Attribute <Boolean>
d284 1
a284 3
   BoolAtt ()
      {
      }
d287 1
a287 1
   private static final class DblVecAtt extends Attribute <double []>
d289 1
a289 3
   DblVecAtt ()
      {
      }
@


1.9
log
@Attributes.
@
text
@d142 6
@


1.8
log
@Attributes.
@
text
@d44 6
a49 1
   public static Attribute <double[]> supplyVol ()
d51 1
a51 1
      return            getDblVecAtt (supplyVol);
d54 1
a54 1
   public static Attribute <double[]> scrapVol ()
d56 1
a56 1
      return            getDblVecAtt (scrapVol);
d59 1
a59 1
   public static Attribute <double[]> demandVol ()
d61 1
a61 1
      return            getDblVecAtt (demandVol);
d64 1
a64 1
   public static Attribute <Boolean>  mrpNetAllowed ()
d66 1
a66 1
      return              getBoolAtt (mrpNetAllowed);
@


1.7
log
@Attributes.
@
text
@d12 3
d24 1
a24 1
//       AttID.BoolAtt
d27 1
a27 1
//       AttID.DblVecAtt
a75 9
// Package-Internal Constructors
//==============================================================================

   Attribute (AttID theAttID)
      {
      myAttID = theAttID;
      }

//==============================================================================
d89 8
d101 45
d154 1
a154 1
      return theAttID.  getBoolAtt ();
d159 1
a159 1
      return theAttID.getDblVecAtt ();
d166 68
a233 1
   final AttID myAttID;
@


1.6
log
@Attributes.
@
text
@d8 3
a10 1
package com.ibm.witj;
d43 1
a43 1
      return                    AttID.supplyVol    .getDblVecAtt ();
d48 1
a48 1
      return                    AttID.scrapVol     .getDblVecAtt ();
d53 1
a53 1
      return                    AttID.demandVol    .getDblVecAtt ();
d58 1
a58 1
      return                    AttID.mrpNetAllowed.getBoolAtt ();
d95 21
@


1.5
log
@Attributes.
@
text
@d5 1
a5 1
// Contains the declaration of class Attribute.
a9 2
import  java.lang.reflect.*;

d11 1
a11 1
// Class Attribute
d13 2
a14 1
// Represents the set of all WIT attributes that have a given name.
d18 5
a22 3
//    Attribute
//       Attribute.BooleanScalar
//       Attribute.DoubleVector
d25 1
a25 1
public abstract class Attribute
d39 1
a39 1
   public static DoubleVector  supplyVol ()
d41 1
a41 1
      return             AttID.supplyVol    .getDblVecAtt ();
d44 1
a44 1
   public static DoubleVector  scrapVol ()
d46 1
a46 1
      return             AttID.scrapVol     .getDblVecAtt ();
d49 1
a49 1
   public static DoubleVector  demandVol ()
d51 1
a51 1
      return             AttID.demandVol    .getDblVecAtt ();
d54 1
a54 1
   public static BooleanScalar mrpNetAllowed ()
d56 1
a56 1
      return             AttID.mrpNetAllowed.getBoolScalAtt ();
d71 1
a71 1
// Package-Internal Methods
d74 1
a74 9
//------------------------------------------------------------------------------
// makeInstance (theAttID)
//
// Factory Method
// Constructs and returns a new Attribute for theAttID and of the appropriate
// subclass for theAttID.
//------------------------------------------------------------------------------

   static Attribute makeInstance (AttID theAttID)
d76 2
a77 4
      String    theAttName;
      Method    theAttAccessor;
      Class     theAttClass;
      Attribute theAtt;
d79 3
a81 21
      try
         {
         theAttName     = theAttID.toString ();

         theAttAccessor = Attribute.class.getDeclaredMethod (theAttName);

         theAttClass    = (Class) theAttAccessor.getGenericReturnType ();

         theAtt         = (Attribute) theAttClass.newInstance ();

         theAtt.myAttID = theAttID;

         return theAtt;
         }
      catch (Exception theExc)
         {
         InternalObject.intAbortWmsg ("   " + theExc.toString ());

         return null;
         }
      }
a92 8
// Private Constructors
//==============================================================================

   private Attribute ()
      {
      }

//==============================================================================
d96 1
a96 35
   AttID myAttID;

//==============================================================================
// Static Nested Classes and Enums
//==============================================================================

//------------------------------------------------------------------------------
// Nested Class Attribute.BooleanScalar
//
// Represents a set of WIT attributes of type "boolean scalar".
//
// Class Hierarchy:
//
//    Attribute
//       Attribute.BooleanScalar
//------------------------------------------------------------------------------

   static final class BooleanScalar extends Attribute
   {
   }

//------------------------------------------------------------------------------
// Nested Class Attribute.DoubleVector
//
// Represents a set of WIT attributes of type "time-vector of doubles".
//
// Class Hierarchy:
//
//    Attribute
//       Attribute.DoubleVector
//------------------------------------------------------------------------------

   static final class DoubleVector extends Attribute
   {
   }
@


1.4
log
@Attributes.
@
text
@d8 3
a10 1
package       com.ibm.witj;
d69 41
d120 1
a120 1
// Package-Internal Methods
d123 1
a123 5
//------------------------------------------------------------------------------
// Constructor.
//------------------------------------------------------------------------------

   Attribute (AttID theAttID)
a124 1
      myAttID = theAttID;
a127 4
// Private Methods
//==============================================================================

//==============================================================================
d131 1
a131 1
   private final AttID myAttID;
a149 4
      BooleanScalar (AttID theAttID)
         {
         super (theAttID);
         }
a164 4
      DoubleVector (AttID theAttID)
         {
         super (theAttID);
         }
@


1.3
log
@Attributes.
@
text
@d29 1
a29 1
// Attribute Accessors.
d57 1
a57 1
// toString ().
d67 9
@


1.2
log
@Attributes.
@
text
@a1 1

a9 5
import static com.ibm.witj.Attribute.AccessMode.*;
import static com.ibm.witj.CompClassID.*;

import        java.util.*;

d13 1
a13 2
// Represents a WIT attribute, actually all WIT attributes that have a given
// name.
d29 5
a33 1
// Accessors for Attributes.
d36 1
a36 1
   public static DoubleVector supplyVol ()
d38 1
a38 1
      return supplyVol;
d41 1
a41 1
   public static DoubleVector scrapVol ()
d43 1
a43 1
      return scrapVol;
d46 1
a46 1
   public static DoubleVector demandVol ()
d48 1
a48 1
      return demandVol;
d53 1
a53 1
      return mrpNetAllowed;
d64 1
a64 1
      return myName;
d72 1
a72 4
// initialize ()
//
// Does nothing.
// Calling this method forces class Attribute to be initialized.
d75 1
a75 1
   static void initialize ()
d77 1
a77 40
      }

//------------------------------------------------------------------------------
// appliesTo (theCompClassID)
//
// Returns true, iff represented attribute applies to the Component class
// identified by theCompClassID.
//------------------------------------------------------------------------------

   boolean appliesTo (CompClassID theCompClassID)
      {
      return (myAppAttMap.containsKey (theCompClassID));
      }

//------------------------------------------------------------------------------
// getAppAttFor (theCompClassID)
//
// Returns the AppAtt that represents this Attribute as applied to the Component
// class identified by theCompClassID.
// This Attribute must apply to the Component class.
//------------------------------------------------------------------------------

   AppAtt getAppAttFor (CompClassID theCompClassID)
      {
      AppAtt theAppAtt;

      theAppAtt = myAppAttMap.get (theCompClassID);

      assert (theAppAtt != null);

      return theAppAtt;
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   final AccessMode getAccessMode ()
      {
      return myAccessMode;
a83 39
//------------------------------------------------------------------------------
// Static factory methods for subclasses.
//------------------------------------------------------------------------------

   private static BooleanScalar makeBoolScalAtt (
         String      theName,
         AccessMode  theAccessMode,
         CompClassID theCompClassID)
      {
      return new BooleanScalar (theName, theAccessMode, theCompClassID);
      }

   private static DoubleVector makeDblVecAtt (
         String      theName,
         AccessMode  theAccessMode,
         CompClassID theCompClassID)
      {
      return new DoubleVector (theName, theAccessMode, theCompClassID);
      }

//------------------------------------------------------------------------------
// Constructor.
//------------------------------------------------------------------------------

   private Attribute (
         String      theName,
         AccessMode  theAccessMode,
         CompClassID theCompClassID)
      {
      AppAtt theAppAtt;

      myName       = theName;
      myAccessMode = theAccessMode;
      myAppAttMap  = new EnumMap <CompClassID, AppAtt> (CompClassID.class);
      theAppAtt    = new AppAtt (this, theCompClassID);

      myAppAttMap.put (theCompClassID, theAppAtt);
      }

d88 1
a88 47
//------------------------------------------------------------------------------
// The following are the only Attributes that exist in WIT-J.
//------------------------------------------------------------------------------

   private static final DoubleVector  supplyVol;
   private static final DoubleVector  scrapVol;
   private static final DoubleVector  demandVol;
   private static final BooleanScalar mrpNetAllowed;

//------------------------------------------------------------------------------
// myName
//
// The name of this Attribute.
//------------------------------------------------------------------------------

   private final String myName;

//------------------------------------------------------------------------------
// myAccessMode
//
// Indicates the mode of access allowed by the attributes.
//------------------------------------------------------------------------------

   private final AccessMode myAccessMode;

//------------------------------------------------------------------------------
// myAppAttMap
//
// If this Attribute applies to the Component class identified by
// theCompClassID, then myAppAttMap.get (theCompClassID) is the AppAtt that
// represents this Attribute as applied to the Component class.
// Otherwise myAppAttMap.get (theCompClassID) is null.
//------------------------------------------------------------------------------

   private final EnumMap <CompClassID, AppAtt> myAppAttMap;

//==============================================================================
// Static Initialization Block
//==============================================================================

   static
   {
   supplyVol     = makeDblVecAtt   ("supplyVol",     INPUT,  PART);
   scrapVol      = makeDblVecAtt   ("scrapVol",      OUTPUT, PART);
   demandVol     = makeDblVecAtt   ("demandVol",     INPUT,  DEMAND);
   mrpNetAllowed = makeBoolScalAtt ("mrpNetAllowed", INPUT,  SUBSTITUTE);
   }
d95 3
a97 1
// Nested Class BooleanScalar
d99 4
a102 1
// An Attribute of type "boolean scalar".
d107 1
a107 4
      private BooleanScalar (
            String      theName,
            AccessMode  theAccessMode,
            CompClassID theCompClassID)
d109 1
a109 1
         super (theName, theAccessMode, theCompClassID);
d114 5
a118 1
// Nested Class DoubleVector
d120 2
a121 1
// An Attribute for attributes of type "time-vector of doubles".
d126 1
a126 4
      private DoubleVector (
            String      theName,
            AccessMode  theAccessMode,
            CompClassID theCompClassID)
d128 1
a128 1
         super (theName, theAccessMode, theCompClassID);
a131 15
//------------------------------------------------------------------------------
// Nested Enum AccessMode
//
// Indicates the mode of access allowed by an attribute:
//
//    INPUT:  The value of the attribute can be retrieved, and it can    be set.
//    OUTPUT: The value of the attribute can be retrieved, but it cannot be set.
//------------------------------------------------------------------------------

   enum AccessMode
   {
      INPUT,
      OUTPUT,
   }

@


1.1
log
@Changed name of class AttID to Attribute.
@
text
@@

