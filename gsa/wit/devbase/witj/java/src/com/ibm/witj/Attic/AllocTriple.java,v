head	1.22;
access;
symbols;
locks; strict;
comment	@# @;


1.22
date	2011.03.28.15.57.18;	author rjw;	state dead;
branches;
next	1.21;

1.21
date	2011.03.22.22.43.41;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2011.03.22.21.10.06;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.09.30.18.44.11;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.09.29.20.55.32;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.06.30.21.05.29;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.06.16.18.04.00;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.06.05.17.55.44;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.05.26.18.31.44;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.05.12.19.29.50;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.05.12.15.57.57;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.05.05.20.17.05;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.04.17.15.38.24;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.03.13.19.32.20;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.02.18.17.00.43;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.02.17.23.46.02;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.02.17.20.18.42;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.02.17.19.53.01;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.02.14.00.51.30;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.02.11.18.59.29;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.02.10.23.19.30;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.02.09.22.50.20;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Changed name of class AllocTriple to PeggingTriple.
@
text
@
//==============================================================================
// WIT-J Java Source File AllocTriple.java.
//
// Contains the declaration of class AllocTriple.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import       java.util.*;

//==============================================================================
// Generic Class AllocTriple <C extends Component>
//
// "Allocation Triple"
//
// Represents a triple of type (C, int, double).
// Conceptually, an AllocTriple <C> represents a portion of the value of some
// Attribute <double[]> associated with a particular instance of Component class
// C (called the root) in a particular period.
//==============================================================================

public final class AllocTriple <C extends Component>
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// toString
//
// Override from class Object.
//------------------------------------------------------------------------------

   public String toString ()
      {
      try
         {
         notAllowedWhenTerminated ("AllocTriple.toString");

         return "(" + myRoot + ", " + myPeriod + ", " + myVolume + ")";
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getRoot ()
//
// Accessor
//------------------------------------------------------------------------------

   public C getRoot ()
      {
      try
         {
         notAllowedWhenTerminated ("AllocTriple.getRoot");

         return myRoot;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getPeriod ()
//
// Accessor
//------------------------------------------------------------------------------

   public int getPeriod ()
      {
      try
         {
         notAllowedWhenTerminated ("AllocTriple.getPeriod");

         return myPeriod;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getVolume ()
//
// Accessor
//------------------------------------------------------------------------------

   public double getVolume ()
      {
      try
         {
         notAllowedWhenTerminated ("AllocTriple.getVolume");

         return myVolume;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//==============================================================================
// Package-Internal Constructor
//==============================================================================

   AllocTriple (C theRoot, int thePeriod, double theVolume)
      {
      myRoot   = theRoot;
      myPeriod = thePeriod;
      myVolume = theVolume;
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myRoot
//
// The root of this AllocTriple.
//------------------------------------------------------------------------------

   private final C myRoot;

//------------------------------------------------------------------------------
// myPeriod
//
// The period for this AllocTriple.
//------------------------------------------------------------------------------

   private final int myPeriod;

//------------------------------------------------------------------------------
// myVolume
//
// The "volume" for this AllocTriple.
//------------------------------------------------------------------------------

   private final double myVolume;

//==============================================================================
}
@


1.21
log
@Removed AllocTriple.newInstance.
@
text
@@


1.20
log
@Made AllocTriple not extend ThreadedObject.
@
text
@a31 30
// newInstance (theRoot, thePeriod, theVolume)
//
// Factory method: Constructs and returns a new AllocTriple for the arguments.
//------------------------------------------------------------------------------

   public static <C extends Component> AllocTriple <C> newInstance (
         C      theRoot,
         int    thePeriod,
         double theVolume)
      {
      try
         {
         notAllowedWhenTerminated ("AllocTriple.newInstance");

         PreservedObject.
            mustBeActive (
                theRoot,
               "theRoot",
               "AllocTriple.newInstance");

         return new AllocTriple <C> (theRoot, thePeriod, theVolume);
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
d116 1
a116 1
// Private Constructor
d119 1
a119 1
   private AllocTriple (C theRoot, int thePeriod, double theVolume)
@


1.19
log
@Further implementation of class ThreadedObject.
@
text
@a22 5
//
// Class Hierarchy:
//
// ThreadedObject
//    AllocTriple
d25 1
a25 1
public final class AllocTriple <C extends Component> extends ThreadedObject
d92 1
a92 1
         checkThread ("AllocTriple.getRoot");
d113 1
a113 1
         checkThread ("AllocTriple.getPeriod");
d134 1
a134 1
         checkThread ("AllocTriple.getVolume");
@


1.18
log
@Made class AllocTriple extend ThreadedObject.
@
text
@d97 2
d118 2
d139 2
@


1.17
log
@Replaced "SubComponent" with "Root".
@
text
@d23 5
d30 1
a30 1
public final class AllocTriple <C extends Component>
@


1.16
log
@Changed a generic type parameter.
@
text
@d19 2
a20 2
// Represents a triple of type (S, int, double).
// Conceptually, an AllocTriple <S> represents a portion of the value of some
d22 1
a22 1
// S in a particular period.
d25 1
a25 1
public final class AllocTriple <S extends Component>
d32 1
a32 1
// newInstance (theSubComp, thePeriod, theVolume)
d37 2
a38 2
   public static <S extends Component> AllocTriple <S> newInstance (
         S      theSubComp,
d48 2
a49 2
                theSubComp,
               "theSubComp",
d52 1
a52 1
         return new AllocTriple <S> (theSubComp, thePeriod, theVolume);
d73 1
a73 1
         return "(" + mySubComponent + ", " + myPeriod + ", " + myVolume + ")";
d83 1
a83 1
// getSubComponent ()
d88 1
a88 1
   public S getSubComponent ()
d92 1
a92 1
         return mySubComponent;
d143 1
a143 1
   private AllocTriple (S theSubComp, int thePeriod, double theVolume)
d145 3
a147 3
      mySubComponent = theSubComp;
      myPeriod       = thePeriod;
      myVolume       = theVolume;
d155 1
a155 1
// mySubComponent
d157 1
a157 1
// The instance of Component class S for this AllocTriple.
d160 1
a160 1
   private final S mySubComponent;
@


1.15
log
@Changed getCInstance () to getSubComponent ().
@
text
@d19 2
a20 2
// Represents a triple of type (C, int, double).
// Conceptually, an AllocTriple <C> represents a portion of the value of some
d22 1
a22 1
// C in a particular period.
d25 1
a25 1
public final class AllocTriple <C extends Component>
d37 2
a38 2
   public static <C extends Component> AllocTriple <C> newInstance (
         C      theSubComp,
d52 1
a52 1
         return new AllocTriple <C> (theSubComp, thePeriod, theVolume);
d88 1
a88 1
   public C getSubComponent ()
d143 1
a143 1
   private AllocTriple (C theSubComp, int thePeriod, double theVolume)
d157 1
a157 1
// The instance of Component class C for this AllocTriple.
d160 1
a160 1
   private final C mySubComponent;
@


1.14
log
@Changed names of instances of class C in generic class AllocTriple <C>.
@
text
@d32 1
a32 1
// newInstance (theCInstance, thePeriod, theVolume)
d38 1
a38 1
         C      theCInstance,
d48 2
a49 2
                theCInstance,
               "theCInstance",
d52 1
a52 1
         return new AllocTriple <C> (theCInstance, thePeriod, theVolume);
d73 1
a73 1
         return "(" + myCInstance + ", " + myPeriod + ", " + myVolume + ")";
d83 1
a83 1
// getCInstance ()
d88 1
a88 1
   public C getCInstance ()
d92 1
a92 1
         return myCInstance;
d143 1
a143 1
   private AllocTriple (C theCInstance, int thePeriod, double theVolume)
d145 3
a147 3
      myCInstance = theCInstance;
      myPeriod    = thePeriod;
      myVolume    = theVolume;
d155 1
a155 1
// myCInstance
d160 1
a160 1
   private final C myCInstance;
@


1.13
log
@Replaced the throwExceptionFor method with getExeceptionToThrow.
@
text
@d21 2
a22 1
// Attribute <double[]> associated with a particular C in a particular period.
d32 1
a32 1
// newInstance (theC, thePeriod, theVolume)
d38 1
a38 1
         C      theC,
d46 5
a50 1
         PreservedObject.mustBeActive (theC, "theC", "AllocTriple.newInstance");
d52 1
a52 1
         return new AllocTriple <C> (theC, thePeriod, theVolume);
d73 1
a73 1
         return "(" + myC + ", " + myPeriod + ", " + myVolume + ")";
d83 1
a83 1
// getC ()
d88 1
a88 1
   public C getC ()
d92 1
a92 1
         return myC;
d143 1
a143 1
   private AllocTriple (C theC, int thePeriod, double theVolume)
d145 3
a147 3
      myC      = theC;
      myPeriod = thePeriod;
      myVolume = theVolume;
d155 1
a155 1
// myC
d157 1
a157 1
// The C for this AllocTriple.
d160 1
a160 1
   private final C myC;
@


1.12
log
@Changed name of Java class WitjException to GeneralException.
@
text
@d50 1
a50 1
      catch (Throwable theThrowable)
d52 1
a52 3
         throwExceptionFor (theThrowable);

         return null;
d71 1
a71 1
      catch (Throwable theThrowable)
d73 1
a73 3
         throwExceptionFor (theThrowable);

         return null;
d90 1
a90 1
      catch (Throwable theThrowable)
d92 1
a92 3
         throwExceptionFor (theThrowable);

         return null;
d109 1
a109 1
      catch (Throwable theThrowable)
d111 1
a111 3
         throwExceptionFor (theThrowable);

         return 0;
d128 1
a128 1
      catch (Throwable theThrowable)
d130 1
a130 3
         throwExceptionFor (theThrowable);

         return 0.0;
@


1.11
log
@Changed name of Java class RetainedObject to PreservedObject.
@
text
@d52 3
a54 1
         throw getWitjExceptionFor (theThrowable);
d75 3
a77 1
         throw getWitjExceptionFor (theThrowable);
d96 3
a98 1
         throw getWitjExceptionFor (theThrowable);
d117 3
a119 1
         throw getWitjExceptionFor (theThrowable);
d138 3
a140 1
         throw getWitjExceptionFor (theThrowable);
@


1.10
log
@Argument checking.
@
text
@d45 1
a45 1
         RetainedObject.mustBeActive (theC, "theC", "AllocTriple.newInstance");
@


1.9
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d45 1
a45 4
         argMustBeActive (
             theC,
            "theC",
            "AllocTriple.newInstance");
@


1.8
log
@PIP
@
text
@d15 1
a15 1
// Generic Class AllocTriple <E extends Element>
d19 3
a21 3
// Represents a triple of type (E, int, double).
// Conceptually, an AllocTriple <E> represents a portion of the value of some
// Attribute <double[]> associated with a particular E in a particular period.
d24 1
a24 1
public final class AllocTriple <E extends Element>
d31 1
a31 1
// newInstance (theE, thePeriod, theVolume)
d36 2
a37 2
   public static <E extends Element> AllocTriple <E> newInstance (
         E      theE,
d46 2
a47 2
             theE,
            "theE",
d50 1
a50 1
         return new AllocTriple <E> (theE, thePeriod, theVolume);
d71 1
a71 1
         return "(" + myE + ", " + myPeriod + ", " + myVolume + ")";
d81 1
a81 1
// getE ()
d86 1
a86 1
   public E getE ()
d90 1
a90 1
         return myE;
d141 1
a141 1
   private AllocTriple (E theE, int thePeriod, double theVolume)
d143 1
a143 1
      myE      = theE;
d153 1
a153 1
// myE
d155 1
a155 1
// The E for this AllocTriple.
d158 1
a158 1
   private final E myE;
@


1.7
log
@Removed the ShipTriple classes.
@
text
@a137 21
// Package Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// asAllocTripleOf (theElementClass)
//
// Returns this AllocTriple, safely cast as an AllocTriple <E2>, where E2 is
// represented by theElementClass.
//------------------------------------------------------------------------------

  @@SuppressWarnings ("unchecked")

   <E2 extends Element> AllocTriple <E2> asAllocTripleOf (
         Class <E2> theElementClass)
      {
      assert (theElementClass.isInstance (myE));

      return (AllocTriple <E2>) this;
      }

//==============================================================================
@


1.6
log
@Added unit test code for class AllocTriple <E>.
@
text
@a141 34
// newShipTripleCORArr (theTriples)
//
// Creates and returns a new array of ShipTripleCORs corresponding to the
// AllocTriple <Demand> instances in theTriples.
//------------------------------------------------------------------------------

   static ShipTripleCOR[] newShipTripleCORArr (
         ArrayList <AllocTriple <Demand>> theTriples)
      {
      int                  nTriples;
      ShipTripleCOR[]      theTripleCORArr;
      int                  theIdx;
      AllocTriple <Demand> theTriple;


      nTriples        = theTriples.size ();

      theTripleCORArr = new ShipTripleCOR[nTriples];

      for (theIdx = 0; theIdx < nTriples; theIdx ++)
         {
         theTriple = theTriples.get (theIdx);

         theTripleCORArr[theIdx] =
            new ShipTripleCOR (
               theTriple.myE     .getDemandCOR (),
               theTriple.myPeriod,
               theTriple.myVolume);
         }

      return theTripleCORArr;
      }

//------------------------------------------------------------------------------
@


1.5
log
@*** empty log message ***
@
text
@d71 1
a71 1
         return "AllocTriple (" + myE + ", " + myPeriod + ", " + myVolume + ")";
@


1.4
log
@Implemented getPipSeq.
@
text
@d31 1
a31 1
// newInstance (theSubElement, thePeriod, theVolume)
d37 1
a37 1
         E      theSubElement,
d46 2
a47 2
             theSubElement,
            "theSubElement",
d50 1
a50 1
         return new AllocTriple <E> (theSubElement, thePeriod, theVolume);
d71 1
a71 8
         return
            "AllocTriple ("
          + mySubElement
          + ", "
          + myPeriod
          + ", "
          + myVolume
          + ")";
d81 1
a81 1
// getSubElement ()
d86 1
a86 1
   public E getSubElement ()
d90 1
a90 1
         return mySubElement;
d167 1
a167 1
               theTriple.mySubElement.getDemandCOR (),
d187 1
a187 1
      assert (theElementClass.isInstance (mySubElement));
d196 1
a196 1
   private AllocTriple (E theSubElement, int thePeriod, double theVolume)
d198 3
a200 3
      mySubElement = theSubElement;
      myPeriod     = thePeriod;
      myVolume     = theVolume;
d208 1
a208 1
// mySubElement
d213 1
a213 1
   private final E mySubElement;
@


1.3
log
@Implemented buildPip and setPipSeq.
@
text
@d31 1
a31 1
// newInstance (theE, thePeriod, theVolume)
d37 1
a37 1
         E      theE,
d45 4
a48 1
         argMustBeActive (theE, "theE", "AllocTriple.newInstance");
d50 1
a50 1
         return new AllocTriple <E> (theE, thePeriod, theVolume);
d71 8
a78 1
         return "AllocTriple (" + myE + ", " + myPeriod + ", " + myVolume + ")";
d88 1
a88 1
// getE ()
d93 1
a93 1
   public E getE ()
d97 1
a97 1
         return myE;
d174 1
a174 1
               theTriple.myE.getDemandCOR (),
d182 17
d203 1
a203 1
   private AllocTriple (E theE, int thePeriod, double theVolume)
d205 3
a207 3
      myE      = theE;
      myPeriod = thePeriod;
      myVolume = theVolume;
d215 1
a215 1
// myE
d220 1
a220 1
   private final E myE;
@


1.2
log
@Replaced the AllocTarget classes with ShipTriple classes.
@
text
@d12 2
d135 38
@


1.1
log
@Replaced Java class AllocTarget with AllocTriple <Demand>.
@
text
@d166 1
a166 1
// The double for this AllocTriple.
@

