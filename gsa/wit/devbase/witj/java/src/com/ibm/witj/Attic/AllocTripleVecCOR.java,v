head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2011.03.25.22.49.27;	author rjw;	state dead;
branches;
next	1.5;

1.5
date	2011.03.22.22.43.42;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.29.19.09.23;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.25.22.42.42;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.05.15.08.22;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.04.23.04.22;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@ArrayListJOR
@
text
@
//==============================================================================
// WIT-J Java Source File AllocTripleVecCOR.java.
//
// Contains the declaration of class AllocTripleVecCOR.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import       java.util.*;

//==============================================================================
// Class AllocTripleVecCOR
//
// "AllocTripleVec C++ Object Representation"
// A Java representation of a C++ AllocTripleVec.
//
// Class Hierarchy:
//
// PreservedInternal
//    CppObjRep
//       AllocTripleVecCOR
//==============================================================================

final class AllocTripleVecCOR extends CppObjRep
{
//==============================================================================
// Package-Internal Constructor
//==============================================================================

   AllocTripleVecCOR (Coordinator theCoord)
      {
      createCppObject (theCoord.getCoordinatorCOR ());
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// newAllocTripleList (theCompClass)
//
// Creates and returns a new ArrayList <AllocTriple <C>> whose contents
// correspond to the contents of the C++ AllocTripleVec, where theCompClass
// identifies Component class C at run time.
//------------------------------------------------------------------------------

  @@SuppressWarnings ("unchecked")

   <C extends Component> ArrayList <AllocTriple <C>> newAllocTripleList (
         Class <C> theCompClass)
      {
      int                         nTriples;
      ArrayList <AllocTriple <C>> theTripleList;
      int                         theIdx;
      ComponentCOR                theCompCOR;
      int                         thePeriod;
      double                      theVolume;
      Component                   theComp;
      C                           theC;
      AllocTriple <C>             theTriple;

      nTriples      = getNTriples ();

      theTripleList = new ArrayList <AllocTriple <C>> (nTriples);

      for (theIdx = 0; theIdx < nTriples; theIdx ++)
         {
         theCompCOR = getComponentCOR (theIdx);
         thePeriod  = getPeriod       (theIdx);
         theVolume  = getVolume       (theIdx);

         theComp    = theCompCOR.getComponent ();

         assert (theCompClass.isInstance (theComp));

         theC       = (C) theComp;

         theTriple  = new AllocTriple (theC, thePeriod, theVolume);

         theTripleList.add (theTriple);
         }

      return theTripleList;
      }

//==============================================================================
// Private Native Methods
//==============================================================================

//------------------------------------------------------------------------------
// createCppObject (theCoordCOR)
// 
// This method is explained in the comment for class CppObjRep.
//------------------------------------------------------------------------------

   private native void createCppObject (CoordinatorCOR theCoordCOR);

//------------------------------------------------------------------------------
// getNTriples ()
//
// Returns the # triples stored by the C++ AllocTripleVec.
//------------------------------------------------------------------------------

   private native int getNTriples ();

//------------------------------------------------------------------------------
// getComponentCOR (int theIdx)
//
// Returns the ComponentCOR that represents the C++ Component for the triple at
// theIdx.
//------------------------------------------------------------------------------

   private native ComponentCOR getComponentCOR (int theIdx);

//------------------------------------------------------------------------------
// getPeriod (int theIdx)
//
// Returns the period for the triple at theIdx.
//------------------------------------------------------------------------------

   private native int getPeriod (int theIdx);

//------------------------------------------------------------------------------
// getVolume (int theIdx)
//
// Returns the volume for the triple at theIdx.
//------------------------------------------------------------------------------

   private native double getVolume (int theIdx);

//==============================================================================
}
@


1.5
log
@Removed AllocTriple.newInstance.
@
text
@@


1.4
log
@Implemented class PreservedInternal and made several classes extend it
   instead of class PreservedObject.
@
text
@d62 1
a62 1
      C                           theCInstance;
d71 3
a73 3
         theCompCOR   = getComponentCOR (theIdx);
         thePeriod    = getPeriod       (theIdx);
         theVolume    = getVolume       (theIdx);
d75 1
a75 1
         theComp      = theCompCOR.getComponent ();
d79 1
a79 1
         theCInstance = (C) theComp;
d81 1
a81 2
         theTriple    =
            AllocTriple.newInstance (theCInstance, thePeriod, theVolume);
@


1.3
log
@Implemented thePreservedObject.getCoordinator ().
@
text
@d22 1
a22 1
// PreservedObject
a34 2
      super (theCoord);

@


1.2
log
@Changed the name each native method that creates a C++ object to
   createCppObject.
@
text
@d35 2
@


1.1
log
@Changed handling of Lists of AllocTriples to avoid call-backs.
@
text
@d35 1
a35 1
      createMyCppAllocTripleVec (theCoord.getCoordinatorCOR ());
d95 1
a95 1
// createMyCppAllocTripleVec (theCoordCOR)
d97 1
a97 2
// Constructs a new C++ AllocTripleVec for theCoordCOR and takes ownership of
// it.
d100 1
a100 1
   private native void createMyCppAllocTripleVec (CoordinatorCOR theCoordCOR);
@

