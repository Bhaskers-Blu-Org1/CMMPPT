head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.10.07.18.50.26;	author rjw;	state dead;
branches;
next	1.1;

1.1
date	2008.10.06.22.14.05;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Name change.
@
text
@
//==============================================================================
// WIT-J Java Source File Entity.java.
//
// Contains the declaration of class Entity.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

//==============================================================================
// Class Entity
//
// Represents an component of a Problem, i.e., a "data object" such as an
// Operation or a Demand.
//
// Class Hierarchy:
//
//    RetainedObject
//       Entity
//          GlobalEntity
//          Part
//          Demand
//          Operation
//          BomEntry
//          Substitute
//          BopEntry
//==============================================================================

public abstract class Entity extends RetainedObject
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// set (theAttSpec, theValue) methods
//
// Each of these methods sets the value of the WIT attribute represented by
// theAttSpec for this Entity to theValue.
// If the attribute is a vector attribute, theValue must be an array of length
// nPeriods.
// Note that if the value type of the AttSpec is a Wrapper class, the type of
// theValue is the corresponding primitive type.
//------------------------------------------------------------------------------

   public void set (
         AttSpec <Boolean> theAttSpec,
         boolean           theValue)
      {
      checkForSet  (theAttSpec, Boolean.class);

      getAttRepFor (theAttSpec).setBool (this, theValue);
      }

//------------------------------------------------------------------------------

   public void set (
         AttSpec <Integer> theAttSpec,
         int               theValue)
      {
      checkForSet  (theAttSpec, Integer.class);

      getAttRepFor (theAttSpec).setInt (this, theValue);
      }

//------------------------------------------------------------------------------

   public void set (
         AttSpec <Double> theAttSpec,
         double           theValue)
      {
      checkForSet  (theAttSpec, Double.class);

      getAttRepFor (theAttSpec).setDbl (this, theValue);
      }

//------------------------------------------------------------------------------

   public void set (
         AttSpec <boolean[]> theAttSpec,
         boolean[]           theValue)
      {
      checkForSet      (theAttSpec, boolean[].class);

      mustBeNonNull    (theValue, "theValue", "Entity.set");

      checkArrayLength (theAttSpec, "set", theValue.length);

      getAttRepFor     (theAttSpec).setBoolVec (this, theValue);
      }

//------------------------------------------------------------------------------

   public void set (
         AttSpec <int[]> theAttSpec,
         int[]           theValue)
      {
      checkForSet      (theAttSpec, int[].class);

      mustBeNonNull    (theValue, "theValue", "Entity.set");

      checkArrayLength (theAttSpec, "set", theValue.length);

      getAttRepFor     (theAttSpec).setIntVec (this, theValue);
      }

//------------------------------------------------------------------------------

   public void set (
         AttSpec <double[]> theAttSpec,
         double[]           theValue)
      {
      checkForSet      (theAttSpec, double[].class);

      mustBeNonNull    (theValue, "theValue", "Entity.set");

      checkArrayLength (theAttSpec, "set", theValue.length);

      getAttRepFor     (theAttSpec).setDblVec (this, theValue);
      }

//------------------------------------------------------------------------------

   public void set (
         AttSpec <BoundSet> theAttSpec,
         double[]           hardLBArr,
         double[]           softLBArr,
         double[]           hardUBArr)
      {
      checkForSet         (theAttSpec, BoundSet.class);

      if (hardLBArr != null)
         checkArrayLength (theAttSpec, "set", hardLBArr.length);

      if (softLBArr != null)
         checkArrayLength (theAttSpec, "set", softLBArr.length);

      if (hardUBArr != null)
         checkArrayLength (theAttSpec, "set", hardUBArr.length);

      getAttRepFor        (theAttSpec).
         setBoundSet (
            this,
            hardLBArr,
            softLBArr,
            hardUBArr);
      }

//------------------------------------------------------------------------------

   public void set (
         AttSpec <String> theAttSpec,
         String           theValue)
      {
      checkForSet   (theAttSpec, String.class);

      mustBeNonNull (theValue, "theValue", "Entity.set");

      getAttRepFor  (theAttSpec).setString (this, theValue);
      }

//------------------------------------------------------------------------------
// get (theAttSpec) methods
//
// Each of these methods returns the current value of the WIT attribute
// represented by theAttSpec for this Entity.
// Note that if the value type of the AttSpec is a Wrapper class, the return
// type is the corresponding primitive type.
//------------------------------------------------------------------------------

   public boolean get (AttSpec <Boolean> theAttSpec)
      {
      checkForGet         (theAttSpec, Boolean.class);

      return getAttRepFor (theAttSpec).getBool (this);
      }

//------------------------------------------------------------------------------

   public int get (AttSpec <Integer> theAttSpec)
      {
      checkForGet         (theAttSpec, Integer.class);

      return getAttRepFor (theAttSpec).getInt (this);
      }

//------------------------------------------------------------------------------

   public double get (AttSpec <Double> theAttSpec)
      {
      checkForGet         (theAttSpec, Double.class);

      return getAttRepFor (theAttSpec).getDbl (this);
      }

//------------------------------------------------------------------------------

   public boolean[] get (AttSpec <boolean[]> theAttSpec)
      {
      boolean[] theBoolArr;

      theBoolArr = new boolean[getNPeriods ()];

      checkForGet  (theAttSpec, boolean[].class);

      getAttRepFor (theAttSpec).getBoolVec (this, theBoolArr);

      return theBoolArr;
      }

//------------------------------------------------------------------------------

   public int[] get (AttSpec <int[]> theAttSpec)
      {
      int[] theIntArr;

      theIntArr = new int[getNPeriods ()];

      checkForGet  (theAttSpec, int[].class);

      getAttRepFor (theAttSpec).getIntVec (this, theIntArr);

      return theIntArr;
      }

//------------------------------------------------------------------------------

   public double[] get (AttSpec <double[]> theAttSpec)
      {
      double[] theDblArr;

      theDblArr = new double[getNPeriods ()];

      checkForGet  (theAttSpec, double[].class);

      getAttRepFor (theAttSpec).getDblVec (this, theDblArr);

      return theDblArr;
      }

//------------------------------------------------------------------------------

   public String get (AttSpec <String> theAttSpec)
      {
      checkForGet         (theAttSpec, String.class);

      return getAttRepFor (theAttSpec).getString (this);
      }

//------------------------------------------------------------------------------

   public Part.Category get (AttSpec <Part.Category> theAttSpec)
      {
      checkForGet         (theAttSpec, Part.Category.class);

      return getAttRepFor (theAttSpec).getPartCat (this);
      }

//------------------------------------------------------------------------------
// get (theAttSpec, theArray) methods
//
// In each of these methods, theArray must be an array of length nPeriods.
// The current value of the WIT vector attribute represented by theAttSpec for
// this Entity is stored in theArray.
//------------------------------------------------------------------------------

   public void get (
         AttSpec <boolean[]> theAttSpec,
         boolean[]           theArray)
      {
      checkForGet      (theAttSpec, boolean[].class);

      mustBeNonNull    (theArray, "theArray", "Entity.get");

      checkArrayLength (theAttSpec, "get", theArray.length);

      getAttRepFor     (theAttSpec).getBoolVec (this, theArray);
      }

//------------------------------------------------------------------------------

   public void get (
         AttSpec <int[]> theAttSpec,
         int[]           theArray)
      {
      checkForGet      (theAttSpec, int[].class);

      mustBeNonNull    (theArray, "theArray", "Entity.get");

      checkArrayLength (theAttSpec, "get", theArray.length);

      getAttRepFor     (theAttSpec).getIntVec (this, theArray);
      }

//------------------------------------------------------------------------------

   public void get (
         AttSpec <double[]> theAttSpec,
         double[]           theArray)
      {
      checkForGet      (theAttSpec, double[].class);

      mustBeNonNull    (theArray, "theArray", "Entity.get");

      checkArrayLength (theAttSpec, "get", theArray.length);

      getAttRepFor     (theAttSpec).getDblVec (this, theArray);
      }

//------------------------------------------------------------------------------

   public void get (
         AttSpec <BoundSet> theAttSpec,
         double[]           hardLBArr,
         double[]           softLBArr,
         double[]           hardUBArr)
      {
      checkForGet      (theAttSpec, BoundSet.class);

      mustBeNonNull    (hardLBArr, "hardLBArr", "Entity.get");
      mustBeNonNull    (softLBArr, "softLBArr", "Entity.get");
      mustBeNonNull    (hardUBArr, "hardUBArr", "Entity.get");

      checkArrayLength (theAttSpec, "get", hardLBArr.length);
      checkArrayLength (theAttSpec, "get", softLBArr.length);
      checkArrayLength (theAttSpec, "get", hardUBArr.length);

      getAttRepFor     (theAttSpec).
         getBoundSet (
            this,
            hardLBArr,
            softLBArr,
            hardUBArr);
      }

//------------------------------------------------------------------------------
// getProblem ()
//
// Returns the Problem for this Entity.
//------------------------------------------------------------------------------

   public Problem getProblem ()
      {
      mustBeActive ("Problem.getProblem");

      return myEntityMgr.getProblem ();
      }

//==============================================================================
// Package-Internal Constructor
//
// Constructs a Entity that will belong to theEntityMgr.
//==============================================================================

   Entity (EntityMgr theEntityMgr)
      {
      myEntityMgr = theEntityMgr;

      theEntityMgr.record (this);
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// Aborts, if theEntity and this Entity belong to different Problems.
//------------------------------------------------------------------------------

   void argMustBelongToMyProblem (
         Entity theEntity,
         String theArgName,
         String theMethName)
      {
      argMustBeActive (theEntity, theArgName, theMethName);

      if (theEntity.myEntityMgr != myEntityMgr)
         abortWmsg (
            "   A method of was called on a Entity where the Entity and\n"
          + "   one the arguments in the call belong to different Problems.\n"
          + "\n"
          + "      Method:         " + theMethName + "\n"
          + "      Entity:         " + this        + "\n"
          + "      Argument:       " + theArgName  + "\n"
          + "      Argument Value: " + theEntity);
      }

//------------------------------------------------------------------------------
// Casting methods
//------------------------------------------------------------------------------

   final GlobalEntity asGlobalEntity ()
      {
      return (GlobalEntity) this;
      }

   final Part asPart ()
      {
      return (Part) this;
      }

   final Demand asDemand ()
      {
      return (Demand) this;
      }

   final Operation asOperation ()
      {
      return (Operation) this;
      }

//------------------------------------------------------------------------------
// Access wrappers.
//------------------------------------------------------------------------------

   int getNPeriods ()
      {
      return myEntityMgr.getGlobalEntity ().getNPeriods ();
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   EntityMgr getEntityMgr ()
      {
      return myEntityMgr;
      }

//------------------------------------------------------------------------------
// getEntityClassID ()
//
// Returns the EntityClassID for the Entity class to which this Entity belongs.
//------------------------------------------------------------------------------

   abstract EntityClassID getEntityClassID ();

//------------------------------------------------------------------------------
// getEntityCOR ().
//
// Returns the EntityCOR that belongs to this Entity.
//------------------------------------------------------------------------------

   abstract EntityCOR getEntityCOR ();

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// checkForSet (theAttSpec)
//
// Does error checking for a "set" function.
//------------------------------------------------------------------------------

   private void checkForSet (AttSpec <?> theAttSpec, Class <?> theValueType)
      {
      checkForSetGet ("set", theAttSpec, theValueType);

      if (getAttRepFor (theAttSpec).getAccessStyle () == AccessStyle.OUTPUT)
         {
         abortWmsg (
              "   Entity.set (...) was called on an output attribute.\n"
            + "\n"
            + "      Entity:  " + this + "\n"
            + "      AttSpec: " + theAttSpec);
         }
      }

//------------------------------------------------------------------------------
// checkArrayLength (theAttSpec, theLength)
//
// Verifies that theLength == nPeriods for setting a vector attribute.
//------------------------------------------------------------------------------

   private void checkArrayLength (
         AttSpec <?> theAttSpec,
         int         theLength)
      {
      if (theLength != getNPeriods ())
         abortWmsg (
              "   Entity.set (...) was called with an array\n"
            + "   whose length does not match nPeriods for the Problem.\n"
            + "\n"
            + "      Entity:       " + this       + "\n"
            + "      AttSpec:      " + theAttSpec + "\n"
            + "      Array Length: " + theLength  + "\n"
            + "      nPeriods:     " + getNPeriods ());
      }

//------------------------------------------------------------------------------
// checkArrayLength (theAttSpec, methodName, theLength)
//
// Verifies that theLength == nPeriods for setting/getting a vector attribute.
// methodName is the name of the calling method.
//------------------------------------------------------------------------------

   private void checkArrayLength (
         AttSpec <?> theAttSpec,
         String      methodName,
         int         theLength)
      {
      if (theLength != getNPeriods ())
         abortWmsg (
              "   Entity." + methodName + " (...) was called with an array\n"
            + "   whose length does not match nPeriods for the Problem.\n"
            + "\n"
            + "      Entity:       " + this       + "\n"
            + "      AttSpec:      " + theAttSpec + "\n"
            + "      Array Length: " + theLength  + "\n"
            + "      nPeriods:     " + getNPeriods ());
      }

//------------------------------------------------------------------------------
// checkForGet (theAttSpec, theValueType)
//
// Does error checking for a "get" function.
//------------------------------------------------------------------------------

   private void checkForGet (AttSpec <?> theAttSpec, Class <?> theValueType)
      {
      checkForSetGet ("get", theAttSpec, theValueType);
      }

//------------------------------------------------------------------------------
// checkForSetGet (theAttSpec, theValueType)
//
// Does error checking for a "set" or "get" function.
//------------------------------------------------------------------------------

   private void checkForSetGet (
         String      methodName,
         AttSpec <?> theAttSpec,
         Class <?>   theValueType)
      {
      mustBeActive ("Entity." + methodName);

      mustBeNonNull (theAttSpec, "theAttSpec", "Entity." + methodName);

      if (theValueType != theAttSpec.getValueType ())
         {
         String theTypeName;

         theTypeName = theValueType.getSimpleName ();

         abortWmsg (
              "   Entity." + methodName + "(...) was called for an "
            +    "AttSpec <" +  theTypeName + ">\n"
            + "   whose actual value type is not " + theTypeName + ".\n"
            + "   (This can be done with casting.)\n"
            + "\n"
            + "      Entity:     " + this              + "\n"
            + "      AttSpec:    " + theAttSpec        + "\n"
            + "      Value Type: "
            +        theAttSpec.getValueType ().getSimpleName ());
         }

      if (! getAttRepFor (theAttSpec).appliesTo (this))
         abortWmsg (
              "   Entity." + methodName + "(...) "
            +    "was called for an instance of a\n"
            + "   Entity class to which the attribute does not apply.\n"
            + "\n"
            + "      Entity:  " + this + "\n"
            + "      AttSpec: " + theAttSpec);
      }

//------------------------------------------------------------------------------
// getAttRepFor (theAttSpec)
//
// Returns the AttRep corresponding to theAttSpec.
//------------------------------------------------------------------------------

   private AttRep getAttRepFor (AttSpec <?> theAttSpec)
      {
      return getProblem ().getAttRepMgr ().getAttRepFor (theAttSpec);
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myEntityMgr.
//
// The EntityMgr for this Entity.
//------------------------------------------------------------------------------

   private final EntityMgr myEntityMgr;

//==============================================================================
}
@


1.1
log
@Changed name of Component to Entity.
@
text
@@

