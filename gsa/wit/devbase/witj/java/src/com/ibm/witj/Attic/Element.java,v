head	1.43;
access;
symbols;
locks; strict;
comment	@# @;


1.43
date	2009.03.13.19.32.22;	author rjw;	state dead;
branches;
next	1.42;

1.42
date	2009.03.13.16.36.08;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2009.03.12.22.45.20;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2009.03.09.21.09.22;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2009.03.06.15.43.25;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2009.03.05.22.31.32;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2009.03.05.21.31.43;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2009.03.05.17.21.27;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2009.02.27.21.22.40;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2009.02.26.16.51.28;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2009.02.18.17.00.44;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2009.02.14.00.51.31;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2009.01.23.19.32.24;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2009.01.22.23.41.05;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2009.01.22.23.12.42;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2009.01.21.21.43.24;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2009.01.16.23.45.55;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2009.01.06.22.09.41;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.12.15.15.35.33;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.12.11.19.06.23;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.12.11.17.01.29;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.12.11.15.37.40;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.12.10.20.54.09;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.12.10.19.20.40;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.12.09.18.38.18;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.12.04.18.55.08;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.12.03.23.02.21;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.12.03.19.02.12;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.12.03.18.55.08;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.12.03.18.28.50;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.12.03.15.57.59;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.11.25.20.25.12;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.11.21.17.20.32;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.11.21.16.56.12;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.11.20.20.05.50;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.11.12.20.40.32;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.05.23.14.56;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.05.16.52.13;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.27.20.43.48;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.10.22.13.43.30;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.10.14.16.29.41;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.09.21.20.22;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.07.18.50.26;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.43
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@
//==============================================================================
// WIT-J Java Source File Element.java.
//
// Contains the declaration of class Element.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

//==============================================================================
// Class Element
//
// Represents an element of a Problem, i.e., a "data object" such as an
// Operation or a Demand.
//
// Class Hierarchy:
//
// RetainedObject
//    Element
//       GlobalAspect
//       Part
//       Demand
//       Operation
//       BomEntry
//       Substitute
//       BopEntry
//==============================================================================

public abstract class Element extends RetainedObject
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// setValue (theAtt, theValue) methods
//
// Each of these methods sets the value of the WIT attribute represented by
// theAtt for this Element to theValue.
// If the attribute is a vector attribute, theValue must be an array of length
// nPeriods.
// Note that if the value type of the Attribute is a Wrapper class, the type of
// theValue is the corresponding primitive type.
//------------------------------------------------------------------------------

   public void setValue (Attribute <Boolean> theAtt, boolean theValue)
      {
      try
         {
         checkForSetValue (theAtt, Boolean.class);

         getAttRepFor     (theAtt).setBool (this, theValue);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public void setValue (Attribute <Integer> theAtt, int theValue)
      {
      try
         {
         checkForSetValue (theAtt, Integer.class);

         getAttRepFor     (theAtt).setInt (this, theValue);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public void setValue (Attribute <Double> theAtt, double theValue)
      {
      try
         {
         checkForSetValue (theAtt, Double.class);

         getAttRepFor     (theAtt).setDbl (this, theValue);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public void setValue (Attribute <boolean[]> theAtt, boolean[] theValue)
      {
      try
         {
         checkForSetValue (theAtt, boolean[].class);

         mustBeNonNull    (theValue, "theValue", "Element.setValue");

         checkArrayLength (theAtt, "setValue", theValue.length);

         getAttRepFor     (theAtt).setBoolVec (this, theValue);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public void setValue (Attribute <int[]> theAtt, int[] theValue)
      {
      try
         {
         checkForSetValue (theAtt, int[].class);

         mustBeNonNull    (theValue, "theValue", "Element.setValue");

         checkArrayLength (theAtt, "setValue", theValue.length);

         getAttRepFor     (theAtt).setIntVec (this, theValue);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public void setValue (Attribute <double[]> theAtt, double[] theValue)
      {
      try
         {
         checkForSetValue (theAtt, double[].class);

         mustBeNonNull    (theValue, "theValue", "Element.setValue");

         checkArrayLength (theAtt, "setValue", theValue.length);

         getAttRepFor     (theAtt).setDblVec (this, theValue);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public void setValue (
         Attribute <BoundSet> theAtt,
         double[]             hardLBArr,
         double[]             softLBArr,
         double[]             hardUBArr)
      {
      try
         {
         checkForSetValue    (theAtt, BoundSet.class);

         if (hardLBArr != null)
            checkArrayLength (theAtt, "setValue", hardLBArr.length);

         if (softLBArr != null)
            checkArrayLength (theAtt, "setValue", softLBArr.length);

         if (hardUBArr != null)
            checkArrayLength (theAtt, "setValue", hardUBArr.length);

         getAttRepFor        (theAtt).
            setBoundSet (
               this,
               hardLBArr,
               softLBArr,
               hardUBArr);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public void setValue (Attribute <String> theAtt, String theValue)
      {
      try
         {
         checkForSetValue (theAtt, String.class);

         mustBeNonNull    (theValue, "theValue", "Element.setValue");

         getAttRepFor     (theAtt).setString (this, theValue);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getValue (theAtt) methods
//
// Each of these methods returns the current value of the WIT attribute
// represented by theAtt for this Element.
// Note that if the value type of the Attribute is a Wrapper class, the return
// type is the corresponding primitive type.
//------------------------------------------------------------------------------

   public boolean getValue (Attribute <Boolean> theAtt)
      {
      try
         {
         checkForGetValue    (theAtt, Boolean.class);

         return getAttRepFor (theAtt).getBool (this);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public int getValue (Attribute <Integer> theAtt)
      {
      try
         {
         checkForGetValue    (theAtt, Integer.class);

         return getAttRepFor (theAtt).getInt (this);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public double getValue (Attribute <Double> theAtt)
      {
      try
         {
         checkForGetValue    (theAtt, Double.class);

         return getAttRepFor (theAtt).getDbl (this);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public boolean[] getValue (Attribute <boolean[]> theAtt)
      {
      try
         {
         boolean[] theBoolArr;

         checkForGetValue (theAtt, boolean[].class);

         theBoolArr = new boolean[getNPeriods ()];

         getAttRepFor (theAtt).getBoolVec (this, theBoolArr);

         return theBoolArr;
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public int[] getValue (Attribute <int[]> theAtt)
      {
      try
         {
         int[] theIntArr;

         checkForGetValue (theAtt, int[].class);

         theIntArr = new int[getNPeriods ()];

         getAttRepFor (theAtt).getIntVec (this, theIntArr);

         return theIntArr;
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public double[] getValue (Attribute <double[]> theAtt)
      {
      try
         {
         double[] theDblArr;

         checkForGetValue (theAtt, double[].class);

         theDblArr = new double[getNPeriods ()];

         getAttRepFor (theAtt).getDblVec (this, theDblArr);

         return theDblArr;
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public String getValue (Attribute <String> theAtt)
      {
      try
         {
         checkForGetValue    (theAtt, String.class);

         return getAttRepFor (theAtt).getString (this);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getValue (theAtt, theArray) methods
//
// In each of these methods, theArray must be an array of length nPeriods.
// The current value of the WIT vector attribute represented by theAtt for
// this Element is stored in theArray.
//------------------------------------------------------------------------------

   public void getValue (Attribute <boolean[]> theAtt, boolean[] theArray)
      {
      try
         {
         checkForGetValue (theAtt, boolean[].class);

         mustBeNonNull    (theArray, "theArray", "Element.getValue");

         checkArrayLength (theAtt, "getValue", theArray.length);

         getAttRepFor     (theAtt).getBoolVec (this, theArray);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public void getValue (Attribute <int[]> theAtt, int[] theArray)
      {
      try
         {
         checkForGetValue (theAtt, int[].class);

         mustBeNonNull    (theArray, "theArray", "Element.getValue");

         checkArrayLength (theAtt, "getValue", theArray.length);

         getAttRepFor     (theAtt).getIntVec (this, theArray);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public void getValue (Attribute <double[]> theAtt, double[] theArray)
      {
      try
         {
         checkForGetValue (theAtt, double[].class);

         mustBeNonNull    (theArray, "theArray", "Element.getValue");

         checkArrayLength (theAtt, "getValue", theArray.length);

         getAttRepFor     (theAtt).getDblVec (this, theArray);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------

   public void getValue (
         Attribute <BoundSet> theAtt,
         double[]             hardLBArr,
         double[]             softLBArr,
         double[]             hardUBArr)
      {
      try
         {
         checkForGetValue (theAtt, BoundSet.class);

         mustBeNonNull    (hardLBArr, "hardLBArr", "Element.getValue");
         mustBeNonNull    (softLBArr, "softLBArr", "Element.getValue");
         mustBeNonNull    (hardUBArr, "hardUBArr", "Element.getValue");

         checkArrayLength (theAtt, "getValue", hardLBArr.length);
         checkArrayLength (theAtt, "getValue", softLBArr.length);
         checkArrayLength (theAtt, "getValue", hardUBArr.length);

         getAttRepFor     (theAtt).
            getBoundSet (
               this,
               hardLBArr,
               softLBArr,
               hardUBArr);
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getProblem ()
//
// Returns the Problem for this Element.
//------------------------------------------------------------------------------

   public Problem getProblem ()
      {
      try
         {
         mustBeActive ("Element.getProblem");

         return myCoordinator.getProblem ();
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getAppData ()
//
// Accessor
//------------------------------------------------------------------------------

   public Object getAppData ()
      {
      try
         {
         mustBeActive ("Element.getAppData");

         return myAppData;
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// setAppData (theAppData)
//
// Setter
//------------------------------------------------------------------------------

   public void setAppData (Object theAppData)
      {
      try
         {
         mustBeActive ("Element.setAppData");

         myAppData = theAppData;
         }

      catch (Throwable theThrowable)
         {
         throw getWitjExceptionFor (theThrowable);
         }
      }

//==============================================================================
// Package-Internal Constructor
//
// Constructs a Element that will belong to theCoord.
//==============================================================================

   Element (Coordinator theCoord)
      {
      myCoordinator = theCoord;

      myCoordinator.record (this);
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// Throws a StatusQuoException, if theElement and this Element belong to
// different Problems.
//------------------------------------------------------------------------------

   void argMustBelongToMyProblem (
         Element theElement,
         String theArgName,
         String theMethName)
      {
      argMustBeActive (theElement, theArgName, theMethName);

      if (theElement.myCoordinator != myCoordinator)
         throw
            new StatusQuoException (
               "   A method of was called on a Element where the Element and\n"
             + "   one the arguments in the call belong to different Problems."
             + "\n\n"
             + "      Method:         " + theMethName + "\n"
             + "      Element:        " + this        + "\n"
             + "      Argument:       " + theArgName  + "\n"
             + "      Argument Value: " + theElement);
      }

//------------------------------------------------------------------------------
// Throws a StatusQuoException, if theElement1 and this theElement2 belong to
// different Problems.
//------------------------------------------------------------------------------

   static void argProblemsMustMatch (
         Element theElement1,
         String  theArgName1,
         Element theElement2,
         String  theArgName2,
         String  theMethName)
      {
      argMustBeActive (theElement1, theArgName1, theMethName);
      argMustBeActive (theElement2, theArgName2, theMethName);

      if (theElement1.myCoordinator != theElement2.myCoordinator)
         throw
            new StatusQuoException (
               "   A method was called with two Element arguments that belong\n"
             + "   to different Problems where this is not allowed.\n"
             + "\n"
             + "      Method:                  " + theMethName + "\n"
             + "      First  Element Argument: " + theArgName1 + "\n"
             + "      First  Element ID:       " + theElement1 + "\n"
             + "      Second Element Argument: " + theArgName2 + "\n"
             + "      Second Element ID:       " + theElement2);
      }

//------------------------------------------------------------------------------
// restoreAfterPurge ()
//
// Updates the state of this Element as appropriate just after a call to
// witPurgeData.
//------------------------------------------------------------------------------

   void restoreAfterPurge ()
      {
      }

//------------------------------------------------------------------------------
// Casting methods
//------------------------------------------------------------------------------

   final GlobalAspect asGlobalAspect ()
      {
      return (GlobalAspect) this;
      }

   final Part asPart ()
      {
      return (Part) this;
      }

   final Demand asDemand ()
      {
      return (Demand) this;
      }

   final Operation asOperation ()
      {
      return (Operation) this;
      }

   final BomEntry asBomEntry ()
      {
      return (BomEntry) this;
      }

   final Substitute asSubstitute ()
      {
      return (Substitute) this;
      }

   final BopEntry asBopEntry ()
      {
      return (BopEntry) this;
      }

//------------------------------------------------------------------------------
// getElemClassID ()
//
// Returns the ElemClassID for the Element class to which this Element belongs.
//------------------------------------------------------------------------------

   abstract ElemClassID getElemClassID ();

//------------------------------------------------------------------------------
// getElementCOR ().
//
// Returns the ElementCOR that belongs to this Element.
//------------------------------------------------------------------------------

   abstract ElementCOR getElementCOR ();

//------------------------------------------------------------------------------
// Access wrappers.
//------------------------------------------------------------------------------

   int getNPeriods ()
      {
      return myCoordinator.getGlobalAspect ().getNPeriods ();
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   Coordinator getCoordinator ()
      {
      return myCoordinator;
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// checkForSetValue (theAtt)
//
// Does error checking for a "setValue" function.
//------------------------------------------------------------------------------

   private void checkForSetValue (Attribute <?> theAtt, Class <?> theValueType)
      {
      checkForSetGetValue ("setValue", theAtt, theValueType);

      if (! getAttRepFor (theAtt).isModifiable ())
         throw
            new StatusQuoException (
                 "   Element.setValue was called with a non-modifiable "
               +    "Attribute.\n"
               + "\n"
               + "      Element:   " + this   + "\n"
               + "      Attribute: " + theAtt);
      }

//------------------------------------------------------------------------------
// checkArrayLength (theAtt, methodName, theLength)
//
// Verifies that theLength == nPeriods for setting/getting a vector attribute.
// methodName is the name of the calling method.
//------------------------------------------------------------------------------

   private void checkArrayLength (
         Attribute <?> theAtt,
         String        methodName,
         int           theLength)
      {
      if (theLength != getNPeriods ())
         throw
            new StatusQuoException (
               "   Element." + methodName + " was called with an array\n"
             + "   whose length does not match nPeriods for the Problem.\n"
             + "\n"
             + "      Element:      " + this           + "\n"
             + "      Attribute:    " + theAtt         + "\n"
             + "      Array Length: " + theLength      + "\n"
             + "      nPeriods:     " + getNPeriods ());
      }

//------------------------------------------------------------------------------
// checkForGetValue (theAtt, theValueType)
//
// Does error checking for a "getValue" function.
//------------------------------------------------------------------------------

   private void checkForGetValue (Attribute <?> theAtt, Class <?> theValueType)
      {
      checkForSetGetValue ("getValue", theAtt, theValueType);
      }

//------------------------------------------------------------------------------
// checkForSetGetValue (theAtt, theValueType)
//
// Does error checking for a "setValue" or "getValue" function.
//------------------------------------------------------------------------------

   private void checkForSetGetValue (
         String        methodName,
         Attribute <?> theAtt,
         Class <?>     theValueType)
      {
      mustBeActive ("Element." + methodName);

      mustBeNonNull (theAtt, "theAtt", "Element." + methodName);

      if (theValueType != theAtt.getValueType ())
         {
         String realTypeName;
         String castTypeName;

         realTypeName = theAtt.getValueType ().getSimpleName ();
         castTypeName = theValueType          .getSimpleName ();

         throw
            new StatusQuoException (
               "   Element." + methodName + " was called for an "
             +    "Attribute <" + realTypeName + ">\n"
             + "   that has been cast into an "
             +    "Attribute <" + castTypeName + ">.\n"
             + "\n"
             + "      Element:    " + this   + "\n"
             + "      Attribute:  " + theAtt);
         }

      if (! getAttRepFor (theAtt).appliesTo (getElemClassID ()))
         throw
            new StatusQuoException (
               "   Element." + methodName
             +   " was called for an instance of an\n"
             + "   Element class to which the Attribute does not apply.\n"
             + "\n"
             + "      Element:   " + this   + "\n"
             + "      Attribute: " + theAtt);
      }

//------------------------------------------------------------------------------
// getAttRepFor (theAtt)
//
// Returns the AttRep corresponding to theAtt.
//------------------------------------------------------------------------------

   private AttRep getAttRepFor (Attribute <?> theAtt)
      {
      return getCoordinator ().getAttRepFor (theAtt);
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myCoordinator.
//
// The Coordinator for this Element.
//------------------------------------------------------------------------------

   private final Coordinator myCoordinator;

//------------------------------------------------------------------------------
// myAppData
//
// The "application data" for this Element.
// The Object (if any) that the application program has associated with this
// Element.
//------------------------------------------------------------------------------

   private Object myAppData = null;

//==============================================================================
}
@


1.42
log
@Changed name of GlobalComponent classes to GlobalAspect.
@
text
@@


1.41
log
@Changed name of GlobalElement classes to GlobalComponent.
@
text
@d22 1
a22 1
//       GlobalComponent
d608 1
a608 1
   final GlobalComponent asGlobalComponent ()
d610 1
a610 1
      return (GlobalComponent) this;
d665 1
a665 1
      return myCoordinator.getGlobalComponent ().getNPeriods ();
@


1.40
log
@purgeData
@
text
@d22 1
a22 1
//       GlobalElement
d608 1
a608 1
   final GlobalElement asGlobalElement ()
d610 1
a610 1
      return (GlobalElement) this;
d665 1
a665 1
      return myCoordinator.getGlobalElement ().getNPeriods ();
@


1.39
log
@purgeData
@
text
@d600 3
a602 1
   abstract void restoreAfterPurge ();
@


1.38
log
@purgeData
@
text
@d596 2
a597 2
// Updates the state of WIT-J associated with this Element as appropriate just
// after a call to witPurgeData.
d600 1
a600 3
   void restoreAfterPurge ()
      {
      }
@


1.37
log
@purgeData
@
text
@d596 2
a597 2
// Updates the state of this Element as appropriate just after a call to
// witPurgeData.
d600 3
a602 1
   abstract void restoreAfterPurge ();
@


1.36
log
@purgeData
@
text
@d594 1
a594 1
// reconcileForPurge ()
d596 2
a597 1
// Takes action appropriate just after a call to WIT's witPurgeData function.
d600 1
a600 1
   abstract void reconcileForPurge ();
@


1.35
log
@purgeData
@
text
@d594 8
d641 1
a641 1
// setToBeShutDown (theValue)
d643 1
a643 1
// Value setter.
d646 9
a654 4
   void setToBeShutDown (boolean theValue)
      {
      toBeShutDown = theValue;
      }
a673 21
   boolean isToBeShutDown ()
      {
      return toBeShutDown;
      }

//------------------------------------------------------------------------------
// getElemClassID ()
//
// Returns the ElemClassID for the Element class to which this Element belongs.
//------------------------------------------------------------------------------

   abstract ElemClassID getElemClassID ();

//------------------------------------------------------------------------------
// getElementCOR ().
//
// Returns the ElementCOR that belongs to this Element.
//------------------------------------------------------------------------------

   abstract ElementCOR getElementCOR ();

a810 8
//------------------------------------------------------------------------------
// toBeShutDown
//
// True, iff this Element is to be shut down at the end of purgeData.
//------------------------------------------------------------------------------

   private boolean toBeShutDown = false;

@


1.34
log
@PurgeData
@
text
@d822 1
a822 1
// True, iff this Element is targeted to be shut down at the end of purgeData.
@


1.33
log
@PIP
@
text
@d633 11
d661 5
d813 1
a813 1
// The Object (if any) that the application program has attached to this
d819 8
@


1.32
log
@Implemented getPipSeq.
@
text
@a593 19
// newAllocTriple (thePeriod, theVolume)
//
// Creates a new AllocTriple <E>, where E is the run-time type of this Element,
// this Element is the E for the AllocTriple, and thePeriod and theVolume are
// its period and volume.
// Asserts false, if called for an Element class that does not override the
// implementation.
//------------------------------------------------------------------------------

   AllocTriple <? extends Element> newAllocTriple (
         int    thePeriod,
         double theVolume)
      {
      assert (false);

      return null;
      }

//------------------------------------------------------------------------------
@


1.31
log
@Coordinator
@
text
@d594 19
@


1.30
log
@Coordinator
@
text
@d527 1
a527 1
// Constructs a Element that will belong to theCoordinator.
d530 1
a530 1
   Element (Coordinator theCoordinator)
d532 1
a532 1
      myCoordinator = theCoordinator;
@


1.29
log
@Removed java class ElementMgr, moving its responsibilities to class
Coordinator.
@
text
@d778 1
a778 1
      return getProblem ().getCoordinator ().getAttRepFor (theAtt);
@


1.28
log
@Change the names of the ProbMgr classes to Coordinator, etc.
@
text
@d473 1
a473 1
         return myElementMgr.getProblem ();
d527 1
a527 1
// Constructs a Element that will belong to theElementMgr.
d530 1
a530 1
   Element (ElementMgr theElementMgr)
d532 1
a532 1
      myElementMgr = theElementMgr;
d534 1
a534 1
      theElementMgr.record (this);
d553 1
a553 1
      if (theElement.myElementMgr != myElementMgr)
d580 1
a580 1
      if (theElement1.myElementMgr != theElement2.myElementMgr)
d638 1
a638 1
      return myElementMgr.getGlobalElement ().getNPeriods ();
d645 1
a645 1
   ElementMgr getElementMgr ()
d647 1
a647 1
      return myElementMgr;
d786 1
a786 1
// myElementMgr.
d788 1
a788 1
// The ElementMgr for this Element.
d791 1
a791 1
   private final ElementMgr myElementMgr;
@


1.27
log
@Java ProbMgr
@
text
@d778 1
a778 1
      return getProblem ().getProbMgr ().getAttRepFor (theAtt);
@


1.26
log
@Added setAppData and getAppData methods to class Element.
@
text
@d778 1
a778 1
      return getProblem ().getAttRepMgr ().getAttRepFor (theAtt);
@


1.25
log
@Minor revision.
@
text
@d471 1
a471 1
         mustBeActive ("Problem.getProblem");
d482 42
d793 10
@


1.24
log
@Added text to the detail message of StatusQuoExceptions.
@
text
@d20 9
a28 9
//    RetainedObject
//       Element
//          GlobalElement
//          Part
//          Demand
//          Operation
//          BomEntry
//          Substitute
//          BopEntry
@


1.23
log
@Changed name of class IntactException to StatusQuoException.
@
text
@d512 9
a520 9
         throw new StatusQuoException (
            "\n\n"
          + "   A method of was called on a Element where the Element and\n"
          + "   one the arguments in the call belong to different Problems.\n"
          + "\n"
          + "      Method:         " + theMethName + "\n"
          + "      Element:        " + this        + "\n"
          + "      Argument:       " + theArgName  + "\n"
          + "      Argument Value: " + theElement  + "\n");
d539 10
a548 10
         throw new StatusQuoException (
            "\n\n"
          + "   A method was called with two Element arguments that belong\n"
          + "   to different Problems where this is not allowed.\n"
          + "\n"
          + "      Method:                  " + theMethName + "\n"
          + "      First  Element Argument: " + theArgName1 + "\n"
          + "      First  Element ID:       " + theElement1 + "\n"
          + "      Second Element Argument: " + theArgName2 + "\n"
          + "      Second Element ID:       " + theElement2 + "\n");
d639 7
a645 7
         throw new StatusQuoException (
              "\n\n"
            + "   Element.setValue was called with a non-modifiable "
            +    "Attribute.\n"
            + "\n"
            + "      Element:   " + this   + "\n"
            + "      Attribute: " + theAtt + "\n");
d661 9
a669 9
         throw new StatusQuoException (
              "\n\n"
            + "   Element." + methodName + " was called with an array\n"
            + "   whose length does not match nPeriods for the Problem.\n"
            + "\n"
            + "      Element:      " + this           + "\n"
            + "      Attribute:    " + theAtt         + "\n"
            + "      Array Length: " + theLength      + "\n"
            + "      nPeriods:     " + getNPeriods () + "\n");
d706 9
a714 9
         throw new StatusQuoException (
              "\n\n"
            + "   Element." + methodName + " was called for an "
            +    "Attribute <" + realTypeName + ">\n"
            + "   that has been cast into an "
            +    "Attribute <" + castTypeName + ">.\n"
            + "\n"
            + "      Element:    " + this   + "\n"
            + "      Attribute:  " + theAtt + "\n");
d718 8
a725 8
         throw new StatusQuoException (
              "\n\n"
            + "   Element." + methodName
            +   " was called for an instance of an\n"
            + "   Element class to which the Attribute does not apply.\n"
            + "\n"
            + "      Element:   " + this   + "\n"
            + "      Attribute: " + theAtt + "\n");
@


1.22
log
@Added the uniform try block whereever it was needed.
@
text
@d500 1
a500 1
// Throws an IntactException, if theElement and this Element belong to
d512 1
a512 1
         throw new IntactException (
d524 1
a524 1
// Throws an IntactException, if theElement1 and this theElement2 belong to
d539 1
a539 1
         throw new IntactException (
d639 1
a639 1
         throw new IntactException (
d661 1
a661 1
         throw new IntactException (
d706 1
a706 1
         throw new IntactException (
d718 1
a718 1
         throw new IntactException (
@


1.21
log
@Added a call to witjMustBeFunctional whereever it was needed.
@
text
@d50 6
a55 1
      checkForSetValue (theAtt, Boolean.class);
d57 4
a60 1
      getAttRepFor     (theAtt).setBool (this, theValue);
d67 3
a69 1
      checkForSetValue (theAtt, Integer.class);
d71 7
a77 1
      getAttRepFor     (theAtt).setInt (this, theValue);
d84 6
a89 1
      checkForSetValue (theAtt, Double.class);
d91 4
a94 1
      getAttRepFor     (theAtt).setDbl (this, theValue);
d101 3
a103 1
      checkForSetValue (theAtt, boolean[].class);
d105 1
a105 1
      mustBeNonNull    (theValue, "theValue", "Element.setValue");
d107 1
a107 1
      checkArrayLength (theAtt, "setValue", theValue.length);
d109 7
a115 1
      getAttRepFor     (theAtt).setBoolVec (this, theValue);
d122 5
a126 1
      checkForSetValue (theAtt, int[].class);
d128 1
a128 1
      mustBeNonNull    (theValue, "theValue", "Element.setValue");
d130 2
a131 1
      checkArrayLength (theAtt, "setValue", theValue.length);
d133 4
a136 1
      getAttRepFor     (theAtt).setIntVec (this, theValue);
d143 5
a147 1
      checkForSetValue (theAtt, double[].class);
d149 1
a149 1
      mustBeNonNull    (theValue, "theValue", "Element.setValue");
d151 2
a152 1
      checkArrayLength (theAtt, "setValue", theValue.length);
d154 4
a157 1
      getAttRepFor     (theAtt).setDblVec (this, theValue);
d168 3
a170 1
      checkForSetValue    (theAtt, BoundSet.class);
d172 2
a173 2
      if (hardLBArr != null)
         checkArrayLength (theAtt, "setValue", hardLBArr.length);
d175 2
a176 2
      if (softLBArr != null)
         checkArrayLength (theAtt, "setValue", softLBArr.length);
d178 15
a192 9
      if (hardUBArr != null)
         checkArrayLength (theAtt, "setValue", hardUBArr.length);

      getAttRepFor        (theAtt).
         setBoundSet (
            this,
            hardLBArr,
            softLBArr,
            hardUBArr);
d199 5
a203 1
      checkForSetValue (theAtt, String.class);
d205 2
a206 1
      mustBeNonNull    (theValue, "theValue", "Element.setValue");
d208 4
a211 1
      getAttRepFor     (theAtt).setString (this, theValue);
d225 3
a227 1
      checkForGetValue    (theAtt, Boolean.class);
d229 7
a235 1
      return getAttRepFor (theAtt).getBool (this);
d242 6
a247 1
      checkForGetValue    (theAtt, Integer.class);
d249 4
a252 1
      return getAttRepFor (theAtt).getInt (this);
d259 6
a264 1
      checkForGetValue    (theAtt, Double.class);
d266 4
a269 1
      return getAttRepFor (theAtt).getDbl (this);
d276 3
a278 1
      boolean[] theBoolArr;
d280 1
a280 1
      checkForGetValue (theAtt, boolean[].class);
d282 1
a282 1
      theBoolArr = new boolean[getNPeriods ()];
d284 1
a284 1
      getAttRepFor (theAtt).getBoolVec (this, theBoolArr);
d286 7
a292 1
      return theBoolArr;
d299 5
a303 1
      int[] theIntArr;
d305 1
a305 1
      checkForGetValue (theAtt, int[].class);
d307 1
a307 1
      theIntArr = new int[getNPeriods ()];
d309 2
a310 1
      getAttRepFor (theAtt).getIntVec (this, theIntArr);
d312 4
a315 1
      return theIntArr;
d322 3
a324 1
      double[] theDblArr;
d326 1
a326 1
      checkForGetValue (theAtt, double[].class);
d328 1
a328 1
      theDblArr = new double[getNPeriods ()];
d330 1
a330 1
      getAttRepFor (theAtt).getDblVec (this, theDblArr);
d332 7
a338 1
      return theDblArr;
d345 6
a350 1
      checkForGetValue    (theAtt, String.class);
d352 4
a355 1
      return getAttRepFor (theAtt).getString (this);
d368 5
a372 1
      checkForGetValue (theAtt, boolean[].class);
d374 1
a374 1
      mustBeNonNull    (theArray, "theArray", "Element.getValue");
d376 2
a377 1
      checkArrayLength (theAtt, "getValue", theArray.length);
d379 4
a382 1
      getAttRepFor     (theAtt).getBoolVec (this, theArray);
d389 3
a391 1
      checkForGetValue (theAtt, int[].class);
d393 1
a393 1
      mustBeNonNull    (theArray, "theArray", "Element.getValue");
d395 1
a395 1
      checkArrayLength (theAtt, "getValue", theArray.length);
d397 7
a403 1
      getAttRepFor     (theAtt).getIntVec (this, theArray);
d410 5
a414 1
      checkForGetValue (theAtt, double[].class);
d416 1
a416 1
      mustBeNonNull    (theArray, "theArray", "Element.getValue");
d418 2
a419 1
      checkArrayLength (theAtt, "getValue", theArray.length);
d421 4
a424 1
      getAttRepFor     (theAtt).getDblVec (this, theArray);
d435 3
a437 1
      checkForGetValue (theAtt, BoundSet.class);
d439 20
a458 14
      mustBeNonNull    (hardLBArr, "hardLBArr", "Element.getValue");
      mustBeNonNull    (softLBArr, "softLBArr", "Element.getValue");
      mustBeNonNull    (hardUBArr, "hardUBArr", "Element.getValue");

      checkArrayLength (theAtt, "getValue", hardLBArr.length);
      checkArrayLength (theAtt, "getValue", softLBArr.length);
      checkArrayLength (theAtt, "getValue", hardUBArr.length);

      getAttRepFor     (theAtt).
         getBoundSet (
            this,
            hardLBArr,
            softLBArr,
            hardUBArr);
d469 6
a474 1
      mustBeActive ("Problem.getProblem");
d476 4
a479 1
      return myElementMgr.getProblem ();
@


1.20
log
@Changed class names:
   HarmlessException ==> IntactException
   UnknownException  ==> UnexpectedException
@
text
@d190 2
a193 2
      checkForGetValue (theAtt, boolean[].class);

d205 2
a208 2
      checkForGetValue (theAtt, int[].class);

d220 2
a223 2
      checkForGetValue (theAtt, double[].class);

@


1.19
log
@Replaced standard Exceptions with HarmlessExceptions in throw statements.
@
text
@d340 1
a340 1
// Throws a HarmlessException, if theElement and this Element belong to
d352 1
a352 1
         throw new HarmlessException (
d364 1
a364 1
// Throws a HarmlessException, if theElement1 and this theElement2 belong to
d379 1
a379 1
         throw new HarmlessException (
d479 1
a479 1
         throw new HarmlessException (
d501 1
a501 1
         throw new HarmlessException (
d546 1
a546 1
         throw new HarmlessException (
d558 1
a558 1
         throw new HarmlessException (
@


1.18
log
@Exceptions
@
text
@d340 1
a340 1
// Throws an IllegalArgumentException, if theElement and this Element belong to
d352 1
a352 1
         throw new IllegalArgumentException (
d364 2
a365 2
// Throws an IllegalArgumentException, if theElement1 and this theElement2
// belong to different Problems.
d379 1
a379 1
         throw new IllegalArgumentException (
d479 1
a479 1
         throw new UnsupportedOperationException (
d501 1
a501 1
         throw new IllegalArgumentException (
d546 1
a546 1
         throw new IllegalArgumentException (
d558 1
a558 1
         throw new IllegalArgumentException (
@


1.17
log
@Exceptions
@
text
@d479 1
a479 1
         throw new IllegalStateException (
@


1.16
log
@Minor update.
@
text
@d479 1
a479 1
         throw new IllegalArgumentException (
@


1.15
log
@Minor changes.
@
text
@d353 1
a353 2
            "\n"
          + "\n"
d380 1
a380 2
            "\n"
          + "\n"
d480 1
a480 2
              "\n"
            + "\n"
d502 1
a502 2
              "\n"
            + "\n"
d547 1
a547 2
              "\n"
            + "\n"
d559 1
a559 2
              "\n"
            + "\n"
@


1.14
log
@Changed name of method Attribute.allowsSetValue to isModifiable.
@
text
@d484 1
a484 1
            + "   Element.setValue (...) was called with a non-modifiable "
d507 1
a507 1
            + "   Element." + methodName + " (...) was called with an array\n"
d553 1
a553 1
            + "   Element." + methodName + " (...) was called for an "
d566 2
a567 2
            + "   Element." + methodName + " (...) "
            +    "was called for an instance of an\n"
@


1.13
log
@Exceptions
@
text
@d480 1
a480 1
      if (! getAttRepFor (theAtt).allowsSetValue ())
d484 2
a485 2
            + "   Element.setValue (...) was called on an Attribute\n"
            + "   that does not allow setValue.\n"
@


1.12
log
@Dismantling class Session.
@
text
@d79 1
a79 1
      mustBeNonNull    (theValue, "theValue", "Element.set");
d81 1
a81 1
      checkArrayLength (theAtt, "set", theValue.length);
d92 1
a92 1
      mustBeNonNull    (theValue, "theValue", "Element.set");
d94 1
a94 1
      checkArrayLength (theAtt, "set", theValue.length);
d105 1
a105 1
      mustBeNonNull    (theValue, "theValue", "Element.set");
d107 1
a107 1
      checkArrayLength (theAtt, "set", theValue.length);
d123 1
a123 1
         checkArrayLength (theAtt, "set", hardLBArr.length);
d126 1
a126 1
         checkArrayLength (theAtt, "set", softLBArr.length);
d129 1
a129 1
         checkArrayLength (theAtt, "set", hardUBArr.length);
d145 1
a145 1
      mustBeNonNull    (theValue, "theValue", "Element.set");
d250 1
a250 1
      mustBeNonNull    (theArray, "theArray", "Element.get");
d252 1
a252 1
      checkArrayLength (theAtt, "get", theArray.length);
d263 1
a263 1
      mustBeNonNull    (theArray, "theArray", "Element.get");
d265 1
a265 1
      checkArrayLength (theAtt, "get", theArray.length);
d276 1
a276 1
      mustBeNonNull    (theArray, "theArray", "Element.get");
d278 1
a278 1
      checkArrayLength (theAtt, "get", theArray.length);
d293 7
a299 7
      mustBeNonNull    (hardLBArr, "hardLBArr", "Element.get");
      mustBeNonNull    (softLBArr, "softLBArr", "Element.get");
      mustBeNonNull    (hardUBArr, "hardUBArr", "Element.get");

      checkArrayLength (theAtt, "get", hardLBArr.length);
      checkArrayLength (theAtt, "get", softLBArr.length);
      checkArrayLength (theAtt, "get", hardUBArr.length);
d340 2
a341 1
// Aborts, if theElement and this Element belong to different Problems.
d352 4
a355 2
         abortWmsg (
            "   A method of was called on a Element where the Element and\n"
d361 1
a361 1
          + "      Argument Value: " + theElement);
d365 2
a366 1
// Aborts, if theElement1 and this theElement2 belong to different Problems.
d380 5
a384 3
         abortWmsg (
            "   A method was called with two Element arguments that belong\n"
          + "   to two different Problems where this is not allowed.\n"
d390 1
a390 1
          + "      Second Element ID:       " + theElement2);
d473 1
a473 1
// Does error checking for a "set" function.
d478 1
a478 1
      checkForSetGetValue ("set", theAtt, theValueType);
d481 4
a484 3
         {
         abortWmsg (
              "   Element.setValue (...) was called on an attribute\n"
d487 2
a488 3
            + "      Element:   " + this + "\n"
            + "      Attribute: " + theAtt);
         }
d504 4
a507 2
         abortWmsg (
              "   Element." + methodName + " (...) was called with an array\n"
d510 4
a513 4
            + "      Element:      " + this         + "\n"
            + "      Attribute:    " + theAtt       + "\n"
            + "      Array Length: " + theLength    + "\n"
            + "      nPeriods:     " + getNPeriods ());
d519 1
a519 1
// Does error checking for a "get" function.
d524 1
a524 1
      checkForSetGetValue ("get", theAtt, theValueType);
d530 1
a530 1
// Does error checking for a "set" or "get" function.
d544 2
a545 1
         String theTypeName;
d547 2
a548 1
         theTypeName = theValueType.getSimpleName ();
d550 7
a556 5
         abortWmsg (
              "   Element." + methodName + "(...) was called for an "
            +    "Attribute <" +  theTypeName + ">\n"
            + "   whose actual value type is not " + theTypeName + ".\n"
            + "   (This can be done with casting.)\n"
d559 1
a559 3
            + "      Attribute:  " + theAtt + "\n"
            + "      Value Type: "
            +        theAtt.getValueType ().getSimpleName ());
d563 6
a568 4
         abortWmsg (
              "   Element." + methodName + "(...) "
            +    "was called for an instance of a\n"
            + "   Element class to which the attribute does not apply.\n"
d570 2
a571 2
            + "      Element:   " + this + "\n"
            + "      Attribute: " + theAtt);
@


1.11
log
@Attributes.
@
text
@d570 1
a570 5
      return
         getProblem ().
            getSession ().
               getAttRepMgr ().
                  getAttRepFor (theAtt);
@


1.10
log
@Removed Enum AccessStyle.
@
text
@d552 1
a552 1
      if (! getAttRepFor (theAtt).appliesTo (this))
@


1.9
log
@Method name changes:
   theElement.set (...) ==> theElement.setValue (...)
   theElement.get (...) ==> theElement.getValue (...)
@
text
@d474 1
a474 1
      if (getAttRepFor (theAtt).getAccessStyle () == AccessStyle.OUTPUT)
d477 2
a478 1
              "   Element.setValue (...) was called on an output attribute.\n"
@


1.8
log
@Replaced Attribute partCategory with thePart.getCategory ().
@
text
@d38 1
a38 1
// set (theAtt, theValue) methods
d48 1
a48 1
   public void set (Attribute <Boolean> theAtt, boolean theValue)
d50 1
a50 1
      checkForSet  (theAtt, Boolean.class);
d52 1
a52 1
      getAttRepFor (theAtt).setBool (this, theValue);
d57 1
a57 1
   public void set (Attribute <Integer> theAtt, int theValue)
d59 1
a59 1
      checkForSet  (theAtt, Integer.class);
d61 1
a61 1
      getAttRepFor (theAtt).setInt (this, theValue);
d66 1
a66 1
   public void set (Attribute <Double> theAtt, double theValue)
d68 1
a68 1
      checkForSet  (theAtt, Double.class);
d70 1
a70 1
      getAttRepFor (theAtt).setDbl (this, theValue);
d75 1
a75 1
   public void set (Attribute <boolean[]> theAtt, boolean[] theValue)
d77 1
a77 1
      checkForSet      (theAtt, boolean[].class);
d88 1
a88 1
   public void set (Attribute <int[]> theAtt, int[] theValue)
d90 1
a90 1
      checkForSet      (theAtt, int[].class);
d101 1
a101 1
   public void set (Attribute <double[]> theAtt, double[] theValue)
d103 1
a103 1
      checkForSet      (theAtt, double[].class);
d114 1
a114 1
   public void set (
d120 1
a120 1
      checkForSet         (theAtt, BoundSet.class);
d141 1
a141 1
   public void set (Attribute <String> theAtt, String theValue)
d143 1
a143 1
      checkForSet   (theAtt, String.class);
d145 1
a145 1
      mustBeNonNull (theValue, "theValue", "Element.set");
d147 1
a147 1
      getAttRepFor  (theAtt).setString (this, theValue);
d151 1
a151 1
// get (theAtt) methods
d159 1
a159 1
   public boolean get (Attribute <Boolean> theAtt)
d161 1
a161 1
      checkForGet         (theAtt, Boolean.class);
d168 1
a168 1
   public int get (Attribute <Integer> theAtt)
d170 1
a170 1
      checkForGet         (theAtt, Integer.class);
d177 1
a177 1
   public double get (Attribute <Double> theAtt)
d179 1
a179 1
      checkForGet         (theAtt, Double.class);
d186 1
a186 1
   public boolean[] get (Attribute <boolean[]> theAtt)
d192 1
a192 1
      checkForGet  (theAtt, boolean[].class);
d201 1
a201 1
   public int[] get (Attribute <int[]> theAtt)
d207 1
a207 1
      checkForGet  (theAtt, int[].class);
d216 1
a216 1
   public double[] get (Attribute <double[]> theAtt)
d222 1
a222 1
      checkForGet  (theAtt, double[].class);
d231 1
a231 1
   public String get (Attribute <String> theAtt)
d233 1
a233 1
      checkForGet         (theAtt, String.class);
d239 1
a239 1
// get (theAtt, theArray) methods
d246 1
a246 1
   public void get (Attribute <boolean[]> theAtt, boolean[] theArray)
d248 1
a248 1
      checkForGet      (theAtt, boolean[].class);
d259 1
a259 1
   public void get (Attribute <int[]> theAtt, int[] theArray)
d261 1
a261 1
      checkForGet      (theAtt, int[].class);
d272 1
a272 1
   public void get (Attribute <double[]> theAtt, double[] theArray)
d274 1
a274 1
      checkForGet      (theAtt, double[].class);
d285 1
a285 1
   public void get (
d291 1
a291 1
      checkForGet      (theAtt, BoundSet.class);
d465 1
a465 1
// checkForSet (theAtt)
d470 1
a470 1
   private void checkForSet (Attribute <?> theAtt, Class <?> theValueType)
d472 1
a472 1
      checkForSetGet ("set", theAtt, theValueType);
d477 1
a477 1
              "   Element.set (...) was called on an output attribute.\n"
d508 1
a508 1
// checkForGet (theAtt, theValueType)
d513 1
a513 1
   private void checkForGet (Attribute <?> theAtt, Class <?> theValueType)
d515 1
a515 1
      checkForSetGet ("get", theAtt, theValueType);
d519 1
a519 1
// checkForSetGet (theAtt, theValueType)
d524 1
a524 1
   private void checkForSetGet (
@


1.7
log
@Minor revision.
@
text
@a238 9

   public Part.Category get (Attribute <Part.Category> theAtt)
      {
      checkForGet         (theAtt, Part.Category.class);

      return getAttRepFor (theAtt).getPartCat (this);
      }

//------------------------------------------------------------------------------
@


1.6
log
@Default values.
@
text
@d38 1
a38 1
// set (theAttribute, theValue) methods
d41 1
a41 1
// theAttribute for this Element to theValue.
d48 1
a48 3
   public void set (
         Attribute <Boolean> theAttribute,
         boolean             theValue)
d50 1
a50 1
      checkForSet  (theAttribute, Boolean.class);
d52 1
a52 1
      getAttRepFor (theAttribute).setBool (this, theValue);
d57 1
a57 3
   public void set (
         Attribute <Integer> theAttribute,
         int                 theValue)
d59 1
a59 1
      checkForSet  (theAttribute, Integer.class);
d61 1
a61 1
      getAttRepFor (theAttribute).setInt (this, theValue);
d66 1
a66 3
   public void set (
         Attribute <Double> theAttribute,
         double             theValue)
d68 1
a68 1
      checkForSet  (theAttribute, Double.class);
d70 1
a70 1
      getAttRepFor (theAttribute).setDbl (this, theValue);
d75 1
a75 3
   public void set (
         Attribute <boolean[]> theAttribute,
         boolean[]             theValue)
d77 1
a77 1
      checkForSet      (theAttribute, boolean[].class);
d81 1
a81 1
      checkArrayLength (theAttribute, "set", theValue.length);
d83 1
a83 1
      getAttRepFor     (theAttribute).setBoolVec (this, theValue);
d88 1
a88 3
   public void set (
         Attribute <int[]> theAttribute,
         int[]             theValue)
d90 1
a90 1
      checkForSet      (theAttribute, int[].class);
d94 1
a94 1
      checkArrayLength (theAttribute, "set", theValue.length);
d96 1
a96 1
      getAttRepFor     (theAttribute).setIntVec (this, theValue);
d101 1
a101 3
   public void set (
         Attribute <double[]> theAttribute,
         double[]             theValue)
d103 1
a103 1
      checkForSet      (theAttribute, double[].class);
d107 1
a107 1
      checkArrayLength (theAttribute, "set", theValue.length);
d109 1
a109 1
      getAttRepFor     (theAttribute).setDblVec (this, theValue);
d115 1
a115 1
         Attribute <BoundSet> theAttribute,
d120 1
a120 1
      checkForSet         (theAttribute, BoundSet.class);
d123 1
a123 1
         checkArrayLength (theAttribute, "set", hardLBArr.length);
d126 1
a126 1
         checkArrayLength (theAttribute, "set", softLBArr.length);
d129 1
a129 1
         checkArrayLength (theAttribute, "set", hardUBArr.length);
d131 1
a131 1
      getAttRepFor        (theAttribute).
d141 1
a141 3
   public void set (
         Attribute <String> theAttribute,
         String             theValue)
d143 1
a143 1
      checkForSet   (theAttribute, String.class);
d147 1
a147 1
      getAttRepFor  (theAttribute).setString (this, theValue);
d151 1
a151 1
// get (theAttribute) methods
d154 1
a154 1
// represented by theAttribute for this Element.
d159 1
a159 1
   public boolean get (Attribute <Boolean> theAttribute)
d161 1
a161 1
      checkForGet         (theAttribute, Boolean.class);
d163 1
a163 1
      return getAttRepFor (theAttribute).getBool (this);
d168 1
a168 1
   public int get (Attribute <Integer> theAttribute)
d170 1
a170 1
      checkForGet         (theAttribute, Integer.class);
d172 1
a172 1
      return getAttRepFor (theAttribute).getInt (this);
d177 1
a177 1
   public double get (Attribute <Double> theAttribute)
d179 1
a179 1
      checkForGet         (theAttribute, Double.class);
d181 1
a181 1
      return getAttRepFor (theAttribute).getDbl (this);
d186 1
a186 1
   public boolean[] get (Attribute <boolean[]> theAttribute)
d192 1
a192 1
      checkForGet  (theAttribute, boolean[].class);
d194 1
a194 1
      getAttRepFor (theAttribute).getBoolVec (this, theBoolArr);
d201 1
a201 1
   public int[] get (Attribute <int[]> theAttribute)
d207 1
a207 1
      checkForGet  (theAttribute, int[].class);
d209 1
a209 1
      getAttRepFor (theAttribute).getIntVec (this, theIntArr);
d216 1
a216 1
   public double[] get (Attribute <double[]> theAttribute)
d222 1
a222 1
      checkForGet  (theAttribute, double[].class);
d224 1
a224 1
      getAttRepFor (theAttribute).getDblVec (this, theDblArr);
d231 1
a231 1
   public String get (Attribute <String> theAttribute)
d233 1
a233 1
      checkForGet         (theAttribute, String.class);
d235 1
a235 1
      return getAttRepFor (theAttribute).getString (this);
d240 1
a240 1
   public Part.Category get (Attribute <Part.Category> theAttribute)
d242 1
a242 1
      checkForGet         (theAttribute, Part.Category.class);
d244 1
a244 1
      return getAttRepFor (theAttribute).getPartCat (this);
d248 1
a248 1
// get (theAttribute, theArray) methods
d251 1
a251 1
// The current value of the WIT vector attribute represented by theAttribute for
d255 1
a255 3
   public void get (
         Attribute <boolean[]> theAttribute,
         boolean[]             theArray)
d257 1
a257 1
      checkForGet      (theAttribute, boolean[].class);
d261 1
a261 1
      checkArrayLength (theAttribute, "get", theArray.length);
d263 1
a263 1
      getAttRepFor     (theAttribute).getBoolVec (this, theArray);
d268 1
a268 3
   public void get (
         Attribute <int[]> theAttribute,
         int[]             theArray)
d270 1
a270 1
      checkForGet      (theAttribute, int[].class);
d274 1
a274 1
      checkArrayLength (theAttribute, "get", theArray.length);
d276 1
a276 1
      getAttRepFor     (theAttribute).getIntVec (this, theArray);
d281 1
a281 3
   public void get (
         Attribute <double[]> theAttribute,
         double[]             theArray)
d283 1
a283 1
      checkForGet      (theAttribute, double[].class);
d287 1
a287 1
      checkArrayLength (theAttribute, "get", theArray.length);
d289 1
a289 1
      getAttRepFor     (theAttribute).getDblVec (this, theArray);
d295 1
a295 1
         Attribute <BoundSet> theAttribute,
d300 1
a300 1
      checkForGet      (theAttribute, BoundSet.class);
d306 3
a308 3
      checkArrayLength (theAttribute, "get", hardLBArr.length);
      checkArrayLength (theAttribute, "get", softLBArr.length);
      checkArrayLength (theAttribute, "get", hardUBArr.length);
d310 1
a310 1
      getAttRepFor     (theAttribute).
d474 1
a474 1
// checkForSet (theAttribute)
d479 1
a479 1
   private void checkForSet (Attribute <?> theAttribute, Class <?> theValueType)
d481 1
a481 1
      checkForSetGet ("set", theAttribute, theValueType);
d483 1
a483 1
      if (getAttRepFor (theAttribute).getAccessStyle () == AccessStyle.OUTPUT)
d489 1
a489 1
            + "      Attribute: " + theAttribute);
d494 1
a494 1
// checkArrayLength (theAttribute, methodName, theLength)
d501 1
a501 1
         Attribute <?> theAttribute,
d511 1
a511 1
            + "      Attribute:    " + theAttribute + "\n"
d517 1
a517 1
// checkForGet (theAttribute, theValueType)
d522 1
a522 1
   private void checkForGet (Attribute <?> theAttribute, Class <?> theValueType)
d524 1
a524 1
      checkForSetGet ("get", theAttribute, theValueType);
d528 1
a528 1
// checkForSetGet (theAttribute, theValueType)
d535 1
a535 1
         Attribute <?> theAttribute,
d540 1
a540 1
      mustBeNonNull (theAttribute, "theAttribute", "Element." + methodName);
d542 1
a542 1
      if (theValueType != theAttribute.getValueType ())
d554 2
a555 2
            + "      Element:    " + this         + "\n"
            + "      Attribute:  " + theAttribute + "\n"
d557 1
a557 1
            +        theAttribute.getValueType ().getSimpleName ());
d560 1
a560 1
      if (! getAttRepFor (theAttribute).appliesTo (this))
d567 1
a567 1
            + "      Attribute: " + theAttribute);
d571 1
a571 1
// getAttRepFor (theAttribute)
d573 1
a573 1
// Returns the AttRep corresponding to theAttribute.
d576 1
a576 1
   private AttRep getAttRepFor (Attribute <?> theAttribute)
d582 1
a582 1
                  getAttRepFor (theAttribute);
@


1.5
log
@Changed ownership of AttRepMgr from Problem to Session.
@
text
@a513 21
// checkArrayLength (theAttribute, theLength)
//
// Verifies that theLength == nPeriods for setting a vector attribute.
//------------------------------------------------------------------------------

   private void checkArrayLength (
         Attribute <?> theAttribute,
         int           theLength)
      {
      if (theLength != getNPeriods ())
         abortWmsg (
              "   Element.set (...) was called with an array\n"
            + "   whose length does not match nPeriods for the Problem.\n"
            + "\n"
            + "      Element:      " + this         + "\n"
            + "      Attribute:    " + theAttribute + "\n"
            + "      Array Length: " + theLength    + "\n"
            + "      nPeriods:     " + getNPeriods ());
      }

//------------------------------------------------------------------------------
@


1.4
log
@Changed name of generic class AttSpec <V> to Attribute <V>.
@
text
@d619 5
a623 1
      return getProblem ().getAttRepMgr ().getAttRepFor (theAttribute);
@


1.3
log
@Made bomIndex, subIndex, and bopIndex into formal attributes.
@
text
@d38 1
a38 1
// set (theAttSpec, theValue) methods
d41 1
a41 1
// theAttSpec for this Element to theValue.
d44 1
a44 1
// Note that if the value type of the AttSpec is a Wrapper class, the type of
d49 2
a50 2
         AttSpec <Boolean> theAttSpec,
         boolean           theValue)
d52 1
a52 1
      checkForSet  (theAttSpec, Boolean.class);
d54 1
a54 1
      getAttRepFor (theAttSpec).setBool (this, theValue);
d60 2
a61 2
         AttSpec <Integer> theAttSpec,
         int               theValue)
d63 1
a63 1
      checkForSet  (theAttSpec, Integer.class);
d65 1
a65 1
      getAttRepFor (theAttSpec).setInt (this, theValue);
d71 2
a72 2
         AttSpec <Double> theAttSpec,
         double           theValue)
d74 1
a74 1
      checkForSet  (theAttSpec, Double.class);
d76 1
a76 1
      getAttRepFor (theAttSpec).setDbl (this, theValue);
d82 2
a83 2
         AttSpec <boolean[]> theAttSpec,
         boolean[]           theValue)
d85 1
a85 1
      checkForSet      (theAttSpec, boolean[].class);
d89 1
a89 1
      checkArrayLength (theAttSpec, "set", theValue.length);
d91 1
a91 1
      getAttRepFor     (theAttSpec).setBoolVec (this, theValue);
d97 2
a98 2
         AttSpec <int[]> theAttSpec,
         int[]           theValue)
d100 1
a100 1
      checkForSet      (theAttSpec, int[].class);
d104 1
a104 1
      checkArrayLength (theAttSpec, "set", theValue.length);
d106 1
a106 1
      getAttRepFor     (theAttSpec).setIntVec (this, theValue);
d112 2
a113 2
         AttSpec <double[]> theAttSpec,
         double[]           theValue)
d115 1
a115 1
      checkForSet      (theAttSpec, double[].class);
d119 1
a119 1
      checkArrayLength (theAttSpec, "set", theValue.length);
d121 1
a121 1
      getAttRepFor     (theAttSpec).setDblVec (this, theValue);
d127 4
a130 4
         AttSpec <BoundSet> theAttSpec,
         double[]           hardLBArr,
         double[]           softLBArr,
         double[]           hardUBArr)
d132 1
a132 1
      checkForSet         (theAttSpec, BoundSet.class);
d135 1
a135 1
         checkArrayLength (theAttSpec, "set", hardLBArr.length);
d138 1
a138 1
         checkArrayLength (theAttSpec, "set", softLBArr.length);
d141 1
a141 1
         checkArrayLength (theAttSpec, "set", hardUBArr.length);
d143 1
a143 1
      getAttRepFor        (theAttSpec).
d154 2
a155 2
         AttSpec <String> theAttSpec,
         String           theValue)
d157 1
a157 1
      checkForSet   (theAttSpec, String.class);
d161 1
a161 1
      getAttRepFor  (theAttSpec).setString (this, theValue);
d165 1
a165 1
// get (theAttSpec) methods
d168 2
a169 2
// represented by theAttSpec for this Element.
// Note that if the value type of the AttSpec is a Wrapper class, the return
d173 1
a173 1
   public boolean get (AttSpec <Boolean> theAttSpec)
d175 1
a175 1
      checkForGet         (theAttSpec, Boolean.class);
d177 1
a177 1
      return getAttRepFor (theAttSpec).getBool (this);
d182 1
a182 1
   public int get (AttSpec <Integer> theAttSpec)
d184 1
a184 1
      checkForGet         (theAttSpec, Integer.class);
d186 1
a186 1
      return getAttRepFor (theAttSpec).getInt (this);
d191 1
a191 1
   public double get (AttSpec <Double> theAttSpec)
d193 1
a193 1
      checkForGet         (theAttSpec, Double.class);
d195 1
a195 1
      return getAttRepFor (theAttSpec).getDbl (this);
d200 1
a200 1
   public boolean[] get (AttSpec <boolean[]> theAttSpec)
d206 1
a206 1
      checkForGet  (theAttSpec, boolean[].class);
d208 1
a208 1
      getAttRepFor (theAttSpec).getBoolVec (this, theBoolArr);
d215 1
a215 1
   public int[] get (AttSpec <int[]> theAttSpec)
d221 1
a221 1
      checkForGet  (theAttSpec, int[].class);
d223 1
a223 1
      getAttRepFor (theAttSpec).getIntVec (this, theIntArr);
d230 1
a230 1
   public double[] get (AttSpec <double[]> theAttSpec)
d236 1
a236 1
      checkForGet  (theAttSpec, double[].class);
d238 1
a238 1
      getAttRepFor (theAttSpec).getDblVec (this, theDblArr);
d245 1
a245 1
   public String get (AttSpec <String> theAttSpec)
d247 1
a247 1
      checkForGet         (theAttSpec, String.class);
d249 1
a249 1
      return getAttRepFor (theAttSpec).getString (this);
d254 1
a254 1
   public Part.Category get (AttSpec <Part.Category> theAttSpec)
d256 1
a256 1
      checkForGet         (theAttSpec, Part.Category.class);
d258 1
a258 1
      return getAttRepFor (theAttSpec).getPartCat (this);
d262 1
a262 1
// get (theAttSpec, theArray) methods
d265 1
a265 1
// The current value of the WIT vector attribute represented by theAttSpec for
d270 2
a271 2
         AttSpec <boolean[]> theAttSpec,
         boolean[]           theArray)
d273 1
a273 1
      checkForGet      (theAttSpec, boolean[].class);
d277 1
a277 1
      checkArrayLength (theAttSpec, "get", theArray.length);
d279 1
a279 1
      getAttRepFor     (theAttSpec).getBoolVec (this, theArray);
d285 2
a286 2
         AttSpec <int[]> theAttSpec,
         int[]           theArray)
d288 1
a288 1
      checkForGet      (theAttSpec, int[].class);
d292 1
a292 1
      checkArrayLength (theAttSpec, "get", theArray.length);
d294 1
a294 1
      getAttRepFor     (theAttSpec).getIntVec (this, theArray);
d300 2
a301 2
         AttSpec <double[]> theAttSpec,
         double[]           theArray)
d303 1
a303 1
      checkForGet      (theAttSpec, double[].class);
d307 1
a307 1
      checkArrayLength (theAttSpec, "get", theArray.length);
d309 1
a309 1
      getAttRepFor     (theAttSpec).getDblVec (this, theArray);
d315 4
a318 4
         AttSpec <BoundSet> theAttSpec,
         double[]           hardLBArr,
         double[]           softLBArr,
         double[]           hardUBArr)
d320 1
a320 1
      checkForGet      (theAttSpec, BoundSet.class);
d326 3
a328 3
      checkArrayLength (theAttSpec, "get", hardLBArr.length);
      checkArrayLength (theAttSpec, "get", softLBArr.length);
      checkArrayLength (theAttSpec, "get", hardUBArr.length);
d330 1
a330 1
      getAttRepFor     (theAttSpec).
d494 1
a494 1
// checkForSet (theAttSpec)
d499 1
a499 1
   private void checkForSet (AttSpec <?> theAttSpec, Class <?> theValueType)
d501 1
a501 1
      checkForSetGet ("set", theAttSpec, theValueType);
d503 1
a503 1
      if (getAttRepFor (theAttSpec).getAccessStyle () == AccessStyle.OUTPUT)
d508 2
a509 2
            + "      Element: " + this + "\n"
            + "      AttSpec: " + theAttSpec);
d514 1
a514 1
// checkArrayLength (theAttSpec, theLength)
d520 2
a521 2
         AttSpec <?> theAttSpec,
         int         theLength)
d528 3
a530 3
            + "      Element:      " + this       + "\n"
            + "      AttSpec:      " + theAttSpec + "\n"
            + "      Array Length: " + theLength  + "\n"
d535 1
a535 1
// checkArrayLength (theAttSpec, methodName, theLength)
d542 3
a544 3
         AttSpec <?> theAttSpec,
         String      methodName,
         int         theLength)
d551 3
a553 3
            + "      Element:      " + this       + "\n"
            + "      AttSpec:      " + theAttSpec + "\n"
            + "      Array Length: " + theLength  + "\n"
d558 1
a558 1
// checkForGet (theAttSpec, theValueType)
d563 1
a563 1
   private void checkForGet (AttSpec <?> theAttSpec, Class <?> theValueType)
d565 1
a565 1
      checkForSetGet ("get", theAttSpec, theValueType);
d569 1
a569 1
// checkForSetGet (theAttSpec, theValueType)
d575 3
a577 3
         String      methodName,
         AttSpec <?> theAttSpec,
         Class <?>   theValueType)
d581 1
a581 1
      mustBeNonNull (theAttSpec, "theAttSpec", "Element." + methodName);
d583 1
a583 1
      if (theValueType != theAttSpec.getValueType ())
d591 1
a591 1
            +    "AttSpec <" +  theTypeName + ">\n"
d595 2
a596 2
            + "      Element:    " + this              + "\n"
            + "      AttSpec:    " + theAttSpec        + "\n"
d598 1
a598 1
            +        theAttSpec.getValueType ().getSimpleName ());
d601 1
a601 1
      if (! getAttRepFor (theAttSpec).appliesTo (this))
d607 2
a608 2
            + "      Element: " + this + "\n"
            + "      AttSpec: " + theAttSpec);
d612 1
a612 1
// getAttRepFor (theAttSpec)
d614 1
a614 1
// Returns the AttRep corresponding to theAttSpec.
d617 1
a617 1
   private AttRep getAttRepFor (AttSpec <?> theAttSpec)
d619 1
a619 1
      return getProblem ().getAttRepMgr ().getAttRepFor (theAttSpec);
@


1.2
log
@Revised factory methods.
@
text
@d440 15
@


1.1
log
@Name change.
@
text
@d391 26
@

