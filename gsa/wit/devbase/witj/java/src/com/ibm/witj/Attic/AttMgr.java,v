head	1.27;
access;
symbols;
locks; strict;
comment	@# @;


1.27
date	2008.07.09.15.45.39;	author rjw;	state dead;
branches;
next	1.26;

1.26
date	2008.07.08.19.31.02;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.07.07.22.59.33;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.07.07.18.41.50;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.07.03.22.35.49;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.07.03.19.45.27;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.07.03.14.42.44;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.06.30.22.02.10;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.06.27.21.43.24;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.06.27.16.34.07;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.06.26.14.04.57;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.06.25.21.43.50;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.06.25.14.46.35;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.24.18.18.46;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.24.15.39.27;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.19.22.16.55;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.19.18.36.39;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.19.15.05.15;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.19.13.36.44;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.18.21.28.19;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.18.14.06.23;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.17.18.19.49;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.17.16.09.52;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.17.13.38.07;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.16.20.41.00;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.12.21.16.40;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.12.15.37.20;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Attributes.
@
text
@
//==============================================================================
// WIT-J Java Source File AttMgr.java.
//
// Contains the declaration of class AttMgr.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Attribute.*;

import       java.util.*;

//==============================================================================
// Class AttMgr
//
// "Attribute Manager"
// Owns and provides access to the AttCIs  for a problem.
//
// Class Hierarchy:
//
//    InternalObject
//       AttMgr
//==============================================================================

final class AttMgr extends InternalObject
{
//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------

   AttMgr (ProbCoord theProbCoord)
      {
      myProbCoord = theProbCoord;

      buildAttCIs ();
      }

//------------------------------------------------------------------------------
// shutDown ()
//
// Override from class InternalObject.
//------------------------------------------------------------------------------

   void shutDown ()
      {
      shutDownAttCIs ();

      myProbCoord = null;

      super.shutDown ();
      }

//------------------------------------------------------------------------------
// selfTest ()
//
// Verifies internal consistency of the attribute aspects of WIT-J.
//------------------------------------------------------------------------------

   void selfTest ()
      {
      AttCI      theAttCI;
      AccessMode theAccMode;
      String     theClassName;

      for (AppAtt theAppAtt: AppAtt.values ())
         {
         theAttCI = getAttCIFor (theAppAtt);

         if (theAttCI.isAnInputAtt ())
            theAccMode = AccessMode.INPUT;
         else
            theAccMode = AccessMode.OUTPUT;

         assert (theAccMode == theAppAtt.getAttribute ().getAccessMode ());

         theClassName = theAppAtt.getCompClassID ().toString ();

         assert (theAttCI.appliesTo (theClassName));
         }
      }

//------------------------------------------------------------------------------
// getAttCIFor (theAppAtt)
//
// Returns the AttCI that owns the C++ Att corresponding to theAppAtt.
//------------------------------------------------------------------------------

   AttCI getAttCIFor (AppAtt theAppAtt)
      {
      return myAttCIMap.get (theAppAtt);
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// buildAttCIs ()
//
// Creates the AttCIs that will be owned by this AttMgr.
//------------------------------------------------------------------------------

   private void buildAttCIs ()
      {
      AttBldrCI theAttBldrCI;
      AttCI     theAttCI;

      Attribute.initialize ();

      myAttCIMap   = new HashMap <AppAtt, AttCI> (AppAtt.nInstances (), 1.0f);

      theAttBldrCI = new AttBldrCI (myProbCoord.getProbCoordCI ());

      for (AppAtt theAppAtt: AppAtt.values ())
         {
         theAttCI = new AttCI (theAttBldrCI, theAppAtt.toString ());

         myAttCIMap.put (theAppAtt, theAttCI);
         }

      assert (theAttBldrCI.isEmpty ());

      theAttBldrCI.shutDown ();
      }

//------------------------------------------------------------------------------
// shutDownAttCIs ()
//
// Shuts down the AttCIs owned by this AttMgr.
// Removes the references to the AttCIs.
//------------------------------------------------------------------------------

   private void shutDownAttCIs ()
      {
      for (AppAtt theAppAtt: AppAtt.values ())
         {
         myAttCIMap.get (theAppAtt).shutDown ();
         }

      myAttCIMap = null;
      }

//==============================================================================
// Private Fields
//==============================================================================
 
//------------------------------------------------------------------------------
// myProbCoord
//
// The ProbCoord that owns this AttMgr.
//------------------------------------------------------------------------------

   private ProbCoord myProbCoord;

//------------------------------------------------------------------------------
// myAttCIMap
//
// myAttCIMap.get (theAppAtt) is the AttCI that owns the C++ Att corresponding
// to theAppAtt.
//------------------------------------------------------------------------------

   private HashMap <AppAtt, AttCI> myAttCIMap;

//------------------------------------------------------------------------------
}
@


1.26
log
@Changed name of class AttID to Attribute.
@
text
@@


1.25
log
@Attributes.
@
text
@d10 1
a10 1
import static com.ibm.witj.AttID.*;
d79 1
a79 1
         assert (theAccMode == theAppAtt.getAttID ().getAccessMode ());
d113 1
a113 1
      AttID.initialize ();
@


1.24
log
@Implemented and use class AppAtt.
@
text
@a110 2
      String    theAttName;
      String    theClassName;
d121 1
a121 4
         theAttName   = theAppAtt.getAttID      ().toString ();
         theClassName = theAppAtt.getCompClassID().toString ();

         theAttCI     = new AttCI (theAttBldrCI, theAttName, theClassName);
@


1.23
log
@Attributes.
@
text
@d70 8
a77 9
      for (AttID theAttID: AttID.values ())
         for (CompClassID theCompClassID: theAttID.getCompClassIDs ())
            {
            theAttCI = getAttCIFor (theAttID, theCompClassID);

            if (theAttCI.isAnInputAtt ())
               theAccMode = AccessMode.INPUT;
            else
               theAccMode = AccessMode.OUTPUT;
d79 1
a79 1
            assert (theAccMode == theAttID.getAccessMode ());
d81 1
a81 1
            theClassName = theCompClassID.toString ();
d83 2
a84 2
            assert (theAttCI.appliesTo (theClassName));
            }
d88 1
a88 1
// getAttCIFor (theAttID, theCompClassID)
d90 1
a90 2
// Returns the AttCI that owns the C++ Att corresponding to theAttID and
// theCompClassID.
d93 1
a93 3
   AttCI getAttCIFor (
         AttID       theAttID,
         CompClassID theCompClassID)
d95 1
a95 3
      assert (theAttID.appliesTo (theCompClassID));

      return myAttCIMapMap.get (theAttID).get (theCompClassID);
d110 8
a117 11
      AttBldrCI                    theAttBldrCI;
      EnumMap <CompClassID, AttCI> theAttCIMap;
      String                       theAttName;
      String                       theClassName;
      AttCI                        theAttCI;

      myAttCIMapMap =
         new
            HashMap <AttID, EnumMap <CompClassID, AttCI>> (
               AttID.nInstances (),
               1.0f);
d121 1
a121 1
      for (AttID theAttID: AttID.values ())
d123 2
a124 1
         theAttCIMap = new EnumMap <CompClassID, AttCI> (CompClassID.class);
d126 1
a126 1
         myAttCIMapMap.put (theAttID, theAttCIMap);
d128 1
a128 10
         theAttName  = theAttID.getName  ();

         for (CompClassID theCompClassID: theAttID.getCompClassIDs ())
            {
            theClassName = theCompClassID.toString ();

            theAttCI     = new AttCI (theAttBldrCI, theAttName, theClassName);

            theAttCIMap.put (theCompClassID, theAttCI);
            }
d145 4
a148 5
      for (AttID theAttID: AttID.values ())
         for (CompClassID theCompClassID: theAttID.getCompClassIDs ())
            {
            getAttCIFor (theAttID, theCompClassID).shutDown ();
            }
d150 1
a150 1
      myAttCIMapMap = null;
d166 1
a166 1
// myAttCIMapMap
d168 2
a169 2
// myAttCIMapMap.get (theAttID).get (theCompClassID) is the AttCI that owns the
// C++ Att corresponding to theAttID and theCompClassID, if any.
d172 1
a172 1
   private HashMap <AttID, EnumMap <CompClassID, AttCI>> myAttCIMapMap;
@


1.22
log
@Attributes.
@
text
@d66 3
a68 4
      CompClassID theCompClassID;
      AttCI       theAttCI;
      AccessMode  theAccMode;
      String      theClassName;
d71 3
a73 4
         {
         theCompClassID = theAttID.getCompClassID ();

         theAttCI       = getAttCIFor (theAttID, theCompClassID);
d75 4
a78 4
         if (theAttCI.isAnInputAtt ())
            theAccMode = AccessMode.INPUT;
         else
            theAccMode = AccessMode.OUTPUT;
d80 1
a80 1
         assert (theAccMode == theAttID.getAccessMode ());
d82 1
a82 1
         theClassName = theCompClassID.toString ();
d84 2
a85 2
         assert (theAttCI.appliesTo (theClassName));
         }
d99 1
a99 1
      assert (theCompClassID == theAttID.getCompClassID ());
d117 1
a118 1
      CompClassID                  theCompClassID;
a120 1
      EnumMap <CompClassID, AttCI> theAttCIMap;
d132 1
a132 3
         theAttName     = theAttID.getName  ();
         theCompClassID = theAttID.getCompClassID ();
         theClassName   = theCompClassID.toString ();
d134 1
a134 1
         theAttCI       = new AttCI (theAttBldrCI, theAttName, theClassName);
d136 5
a140 1
         theAttCIMap = new EnumMap <CompClassID, AttCI> (CompClassID.class);
d142 1
a142 1
         myAttCIMapMap.put (theAttID,       theAttCIMap);
d144 2
a145 1
         theAttCIMap  .put (theCompClassID, theAttCI);
a161 2
      CompClassID theCompClassID;
      
d163 4
a166 5
         {
         theCompClassID = theAttID.getCompClassID ();

         getAttCIFor (theAttID, theCompClassID).shutDown ();
         }
@


1.21
log
@Atttributes.
@
text
@d8 1
a8 1
package com.ibm.witj;
d10 3
a12 1
import  static com.ibm.witj.AttID.*;
d103 1
a103 1
      return myAttCIArray[theAttID.getIndex ()];
d118 12
a129 7
      AttBldrCI theAttBldrCI;
      String    theAttName;
      String    theClassName;
      int       theIdx;
      AttCI     theAttCI;

      myAttCIArray = new AttCI[AttID.nInstances ()];
d135 7
a141 3
         theAttName   = theAttID.getName  ();
         theClassName = theAttID.getCompClassID ().toString ();
         theIdx       = theAttID.getIndex ();
d143 1
a143 1
         theAttCI     = new AttCI (theAttBldrCI, theAttName, theClassName);
d145 1
a145 1
         myAttCIArray[theIdx] = theAttCI;
d162 3
a164 1
      for (AttCI theAttCI: myAttCIArray)
d166 3
a168 1
         theAttCI.shutDown ();
d171 1
a171 1
      myAttCIArray = null;
d187 1
a187 1
// myAttCIArray
d189 2
a190 2
// myAttCIArray[theIdx] is the AttCI that owns the C++ Att corresponding to the
// AttID whose index == theIdx.
d193 1
a193 1
   private AttCI[] myAttCIArray;
@


1.20
log
@Made accessor names begin with "get".
@
text
@d64 4
a67 3
      AttCI      theAttCI;
      AccessMode theAccMode;
      String     theClassName;
d71 3
a73 1
         theAttCI = getAttCIFor (theAttID);
d82 1
a82 1
         theClassName = theAttID.getCompClassID ().toString ();
d89 1
a89 1
// getAttCIFor (theAttID)
d91 2
a92 1
// Returns the AttCI that owns the C++ Att corresponding to theAttID.
d95 3
a97 1
   AttCI getAttCIFor (AttID theAttID)
d99 2
d117 2
a118 1
      String    theName;
d128 3
a130 2
         theName  = theAttID.getName  ();
         theIdx   = theAttID.getIndex ();
d132 1
a132 1
         theAttCI = new AttCI (theAttBldrCI, theName);
@


1.19
log
@Self-Test.
@
text
@d70 1
a70 1
         theAttCI = myAttCIFor (theAttID);
d77 1
a77 1
         assert (theAccMode == theAttID.myAccessMode ());
d79 1
a79 1
         theClassName = theAttID.myCompClassID ().toString ();
d86 1
a86 1
// myAttCIFor (theAttID)
d91 1
a91 1
   AttCI myAttCIFor (AttID theAttID)
d93 1
a93 1
      return myAttCIArray[theAttID.myIndex ()];
d115 1
a115 1
      theAttBldrCI = new AttBldrCI (myProbCoord.myProbCoordCI ());
d119 2
a120 2
         theName  = theAttID.myName  ();
         theIdx   = theAttID.myIndex ();
@


1.18
log
@Initial implementation of self-test.
@
text
@d64 1
d66 1
d68 1
a68 1
      for (AttID theAttID: AttID.getInstances ())
d70 3
a72 1
         if (myAttCIFor (theAttID).isAnInputAtt ())
d78 4
d117 1
a117 1
      for (AttID theAttID: AttID.getInstances ())
@


1.17
log
@Attributes.
@
text
@d57 21
d119 2
@


1.16
log
@Attributes.
@
text
@d80 2
d88 4
a91 4
      makeAttCI (theAttBldrCI, SUPPLY_VOL);
      makeAttCI (theAttBldrCI, SCRAP_VOL);
      makeAttCI (theAttBldrCI, DEMAND_VOL);
      makeAttCI (theAttBldrCI, MRP_NET_ALLOWED);
d93 1
a93 2
      theAttBldrCI.shutDown ();
      }
d95 2
a96 5
//------------------------------------------------------------------------------
// makeAttCI (theAttBldrCI, theAttID)
//
// Creates and stores an AttCI for theAttID.
//------------------------------------------------------------------------------
d98 1
a98 10
   private void makeAttCI (AttBldrCI theAttBldrCI, AttID theAttID)
      {
      String theName;
      AttCI  theAttCI;

      theName  = theAttID.myName ();

      theAttCI = new AttCI (theAttBldrCI, theName);

      myAttCIArray[theAttID.myIndex ()] = theAttCI;
@


1.15
log
@Attributes
@
text
@d10 1
a10 1
import  java.util.*;
d57 1
a57 1
// myAttCIFor (theName)
d59 1
a59 2
// Returns the AttCI that owns the C++ Att corresponding whose name is given by
// thaName.
d62 1
a62 1
   AttCI myAttCIFor (String theName)
d64 1
a64 10
      return myAttCIMap.get (theName);
      }

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   ProbCoord myProbCoord ()
      {
      return myProbCoord;
d82 1
a82 1
      myAttCIMap   = new HashMap <String, AttCI> (10);
d86 4
a89 4
      makeAttCI (theAttBldrCI, "supplyVol");
      makeAttCI (theAttBldrCI, "scrapVol");
      makeAttCI (theAttBldrCI, "demandVol");
      makeAttCI (theAttBldrCI, "mrpNetAllowed");
d95 1
a95 1
// makeAttCI (theAttBldrCI, theName)
d97 1
a97 1
// Creates and stores an AttCI for theName.
d100 1
a100 1
   private void makeAttCI (AttBldrCI theAttBldrCI, String theName)
d102 4
a105 1
      AttCI theAttCI;
d109 1
a109 1
      myAttCIMap.put (theName, theAttCI);
d121 1
a121 1
      for (AttCI theAttCI: myAttCIMap.values ())
d126 1
a126 1
      myAttCIMap = null;
d142 1
a142 1
// myAttCIMap
d144 2
a145 2
// Maps from the name of each attribute to the AttCI that owns the corresponding
// C++ Att.
d148 1
a148 1
   private HashMap <String, AttCI> myAttCIMap;
@


1.14
log
@Removed enum AttID.
@
text
@d97 1
a97 1
      makeAttCI (theAttBldrCI, "stockVol");
@


1.13
log
@Removed AttAcc classes.
@
text
@d57 1
a57 1
// myAttCIFor (theAttID)
d59 2
a60 1
// Returns the AttCI that owns the C++ Att corresponding to theAttID.
d63 1
a63 1
   AttCI myAttCIFor (AttID theAttID)
d65 1
a65 1
      return myAttCIMap.get (theAttID);
d92 1
a92 1
      myAttCIMap   = new EnumMap <AttID, AttCI> (AttID.class);
d96 13
a108 3
      for (AttID theAttID: AttID.values ())
         {
         theAttCI = new AttCI (theAttBldrCI, theAttID.name ());
d110 3
a112 2
         myAttCIMap.put (theAttID, theAttCI);
         }
d114 1
a114 4
      if (! theAttBldrCI.isEmpty ())
         intAbortWmsg (
              "   One or more of the C++ Atts that were created by\n"
            + "   the C++ AttBldr were not acquired by the Java AttMgr.");
d116 1
a116 1
      theAttBldrCI.shutDown ();
d122 1
a122 1
// Shuts down the AttCIs that will be owned by this AttMgr.
d128 1
a128 3
      AttCI theAttCI;

      for (AttID theAttID: AttID.values ())
a129 4
         theAttCI = myAttCIMap.remove (theAttID);

         assert (theAttCI != null);

d151 2
a152 1
// Maps from each AttID to the AttCI that owns the corresponding C++ Att.
d155 1
a155 1
   private EnumMap <AttID, AttCI> myAttCIMap;
@


1.12
log
@Implemented of class DblVecOutAttAcc.
@
text
@a15 1
// Owns and provides access to the AttAccs for a problem.
d38 1
a38 2
      buildAttCIs  ();
      buildAttAccs ();
d49 1
a49 2
      shutDownAttAccs ();
      shutDownAttCIs  ();
a75 15
   BoolInAttAcc myBoolInAttAcc ()
      {
      return myBoolInAttAcc;
      }

   DblVecInAttAcc myDblVecInAttAcc ()
      {
      return myDblVecInAttAcc;
      }

   DblVecOutAttAcc myDblVecOutAttAcc ()
      {
      return myDblVecOutAttAcc;
      }

a110 13
// buildAttAccs ()
//
// Creates the AttAccs that will be owned by this AttMgr.
//------------------------------------------------------------------------------

   private void buildAttAccs ()
      {
         myBoolInAttAcc = new    BoolInAttAcc (this);
       myDblVecInAttAcc = new  DblVecInAttAcc (this);
      myDblVecOutAttAcc = new DblVecOutAttAcc (this);
      }

//------------------------------------------------------------------------------
a132 18
//------------------------------------------------------------------------------
// shutDownAttAccs ()
//
// Shuts down the AttAccs that will be owned by this AttMgr.
// Removes the references to the AttAccs.
//------------------------------------------------------------------------------

   private void shutDownAttAccs ()
      {
      myDblVecOutAttAcc.shutDown ();
       myDblVecInAttAcc.shutDown ();
         myBoolInAttAcc.shutDown ();

      myDblVecOutAttAcc = null;
       myDblVecInAttAcc = null;
         myBoolInAttAcc = null;
      }

a153 8
// The AttAccs that belong to this AttMgr.
//------------------------------------------------------------------------------

   private    BoolInAttAcc    myBoolInAttAcc;
   private  DblVecInAttAcc  myDblVecInAttAcc;
   private DblVecOutAttAcc myDblVecOutAttAcc;

//------------------------------------------------------------------------------
@


1.11
log
@Attributes.
@
text
@d89 5
d136 3
a138 2
        myBoolInAttAcc = new   BoolInAttAcc (this);
      myDblVecInAttAcc = new DblVecInAttAcc (this);
d173 7
a179 5
      myDblVecInAttAcc.shutDown ();
        myBoolInAttAcc.shutDown ();

      myDblVecInAttAcc = null;
        myBoolInAttAcc = null;
d206 3
a208 2
   private   BoolInAttAcc   myBoolInAttAcc;
   private DblVecInAttAcc myDblVecInAttAcc;
@


1.10
log
@Changed class name DblVecAttAcc to DblVecInAttAcc.
@
text
@d71 1
a71 3
// myProbCoord ()
//
// Accessor.
d79 4
a82 5
//------------------------------------------------------------------------------
// myDblVecInAttAcc ()
//
// Accessor.
//------------------------------------------------------------------------------
d131 1
d168 1
d171 1
d195 1
a195 3
// myDblVecInAttAcc
//
// The DblVecInAttAcc that belongs to this AttMgr.
d198 1
@


1.9
log
@Changed class name       AttI to       AttAcc.
Changed class name DblVecAttI to DblVecAttAcc.
@
text
@d82 1
a82 1
// myDblVecAttAcc ()
d87 1
a87 1
   DblVecAttAcc myDblVecAttAcc ()
d89 1
a89 1
      return myDblVecAttAcc;
d134 1
a134 1
      myDblVecAttAcc = new DblVecAttAcc (this);
d169 1
a169 1
      myDblVecAttAcc.shutDown ();
d171 1
a171 1
      myDblVecAttAcc = null;
d195 1
a195 1
// myDblVecAttAcc
d197 1
a197 1
// The DblVecAttAcc that belongs to this AttMgr.
d200 1
a200 1
   private DblVecAttAcc myDblVecAttAcc;
@


1.8
log
@Attributes.
@
text
@d16 2
a17 2
// Owns and provides access to the AttIs  for a problem.
// Owns and provides access to the AttCIs for a problem.
d39 2
a40 2
      buildAttCIs ();
      buildAttIs  ();
d51 2
a52 2
      shutDownAttIs  ();
      shutDownAttCIs ();
d82 1
a82 1
// myDblVecAttI ()
d87 1
a87 1
   DblVecAttI myDblVecAttI ()
d89 1
a89 1
      return myDblVecAttI;
d127 1
a127 1
// buildAttIs ()
d129 1
a129 1
// Creates the AttIs that will be owned by this AttMgr.
d132 1
a132 1
   private void buildAttIs ()
d134 1
a134 1
      myDblVecAttI = new DblVecAttI (this);
d161 1
a161 1
// shutDownAttIs ()
d163 2
a164 2
// Shuts down the AttIs that will be owned by this AttMgr.
// Removes the references to the AttIs.
d167 1
a167 1
   private void shutDownAttIs ()
d169 1
a169 1
      myDblVecAttI.shutDown ();
d171 1
a171 1
      myDblVecAttI = null;
d195 1
a195 1
// myDblVecAttI
d197 1
a197 1
// The DblVecAttI that belongs to this AttMgr.
d200 1
a200 1
   private DblVecAttI myDblVecAttI;
@


1.7
log
@Changed name of class       AttRep to       AttI.
Changed name of class DblVecAttRep to DblVecAttI.
@
text
@d118 4
a121 1
      assert (theAttBldrCI.isEmpty ());
@


1.6
log
@Attributes.
@
text
@d16 2
a17 2
// Owns and provides access to the AttReps for a problem.
// Owns and provides access to the AttCIs  for a problem.
d39 2
a40 2
      buildAttCIs  ();
      buildAttReps ();
d51 2
a52 2
      shutDownAttReps ();
      shutDownAttCIs  ();
d82 1
a82 1
// myDblVecAttRep ()
d87 1
a87 1
   DblVecAttRep myDblVecAttRep ()
d89 1
a89 1
      return myDblVecAttRep;
d124 1
a124 1
// buildAttReps ()
d126 1
a126 1
// Creates the AttReps that will be owned by this AttMgr.
d129 1
a129 1
   private void buildAttReps ()
d131 1
a131 1
      myDblVecAttRep = new DblVecAttRep (this);
d158 1
a158 1
// shutDownAttReps ()
d160 2
a161 2
// Shuts down the AttReps that will be owned by this AttMgr.
// Removes the references to the AttReps.
d164 1
a164 1
   private void shutDownAttReps ()
d166 1
a166 1
      myDblVecAttRep.shutDown ();
d168 1
a168 1
      myDblVecAttRep = null;
d192 1
a192 1
// myDblVecAttRep
d194 1
a194 1
// The DblVecAttRep that belongs to this AttMgr.
d197 1
a197 1
   private DblVecAttRep myDblVecAttRep;
@


1.5
log
@Attributes.
@
text
@d71 11
d131 1
a131 1
      myDblVecAttRep = new DblVecAttRep ();
@


1.4
log
@Implemented Java class AttRep.
@
text
@d16 2
a17 1
// Owns and provides access to the AttCIs for a problem.
d32 1
a32 1
// Constructor.
d39 2
a40 3
      myAttCIMap  = new EnumMap <AttID, AttCI> (AttID.class);

      buildAttCIs ();
d44 1
a44 1
// shutDown ().
d51 2
a52 1
      AttCI theAttCI;
a55 11
      for (AttID theAttID: AttID.values ())
         {
         theAttCI = myAttCIMap.remove (theAttID);

         assert (theAttCI != null);

         theAttCI.shutDown ();
         }

      myAttCIMap = null;

d71 1
a71 1
// myProbCoord ()
d76 1
a76 1
   ProbCoord myProbCoord ()
d78 1
a78 1
      return myProbCoord;
d96 2
d112 48
d165 1
a165 1
// myProbCoord.
d173 1
a173 1
// myAttCIMap.
d181 8
@


1.3
log
@Created Java class CompMgr.
@
text
@d44 1
a44 1
// shutdown ().
d80 11
@


1.2
log
@Added enum AttID.
@
text
@d116 1
a116 1
// The ProbCoord that owns this Component.
@


1.1
log
@Added Java class AttMgr.
@
text
@d10 2
d38 2
d51 2
d55 3
a57 2
      if (supplyVolCI != null)
         supplyVolCI.shutDown ();
d59 6
a64 1
      supplyVolCI = null;
d70 1
a70 1
// supplyVolCI ()
d72 1
a72 1
// Accessor.
d75 1
a75 1
   AttCI supplyVolCI ()
d77 1
a77 1
      return supplyVolCI;
d93 1
d97 6
a102 1
      supplyVolCI  = new AttCI (theAttBldrCI, "supplyVol");
d122 1
a122 1
// supplyVolCI.
d124 1
a124 1
// The Java interface to the C++ Att representing the supplyVol attribute.
d127 1
a127 1
   private AttCI supplyVolCI;
@

