head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2011.06.03.15.13.37;	author rjw;	state dead;
branches;
next	1.1;

1.1
date	2011.06.02.18.07.14;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Removed Pair and Quadruple.
@
text
@
//==============================================================================
// WIT-J Java Source File Quadruple.java.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import       java.util.*;

//==============================================================================
// Generic Class Quadruple <E1, E2, E3, E4>
//
// Represents a 4-tuple of type (E1, E2, E3, E4).
//==============================================================================

public final class Quadruple <E1, E2, E3, E4>
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// getElement1 ()
//
// Accessor
//------------------------------------------------------------------------------

   public E1 getElement1 ()
      {
      try
         {
         notAllowedWhenTerminated ("Quadruple.getElement1");

         return myElement1;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getElement2 ()
//
// Accessor
//------------------------------------------------------------------------------

   public E2 getElement2 ()
      {
      try
         {
         notAllowedWhenTerminated ("Quadruple.getElement2");

         return myElement2;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getElement3 ()
//
// Accessor
//------------------------------------------------------------------------------

   public E3 getElement3 ()
      {
      try
         {
         notAllowedWhenTerminated ("Quadruple.getElement3");

         return myElement3;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//------------------------------------------------------------------------------
// getElement4 ()
//
// Accessor
//------------------------------------------------------------------------------

   public E4 getElement4 ()
      {
      try
         {
         notAllowedWhenTerminated ("Quadruple.getElement4");

         return myElement4;
         }

      catch (Throwable              theThrowable)
         {
         throw getExceptionToThrow (theThrowable);
         }
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// newArrayList (theE1List, theE2List, theE3List, theE4List)
//
// Constructs and returns a new List of Quadruples whose elements are formed as
// 4-tuples of corresponding elements of theE1List, theE2List, theE3List, and
// theE4List.
//------------------------------------------------------------------------------

   static <E1, E2, E3, E4> List <Quadruple <E1, E2, E3, E4>> newList (
         ArrayList <E1> theE1List,
         ArrayList <E2> theE2List,
         ArrayList <E3> theE3List,
         ArrayList <E4> theE4List)
      {
      ArrayList <Quadruple <E1, E2, E3, E4>> theQuadList;
      int                                    theIdx;
      E1                                     theE1;
      E2                                     theE2;
      E3                                     theE3;
      E4                                     theE4;
      Quadruple <E1, E2, E3, E4>             theQuad;

      assert (theE2List.size () == theE1List.size ());
      assert (theE3List.size () == theE1List.size ());
      assert (theE4List.size () == theE1List.size ());

      theQuadList =
         new ArrayList <Quadruple <E1, E2, E3, E4>> (theE1List.size ());

      for (theIdx = 0; theIdx < theE1List.size (); theIdx ++)
         {
         theE1   = theE1List.get (theIdx);
         theE2   = theE2List.get (theIdx);
         theE3   = theE3List.get (theIdx);
         theE4   = theE4List.get (theIdx);

         theQuad = new Quadruple <E1, E2, E3, E4> (theE1, theE2, theE3, theE4);

         theQuadList.add (theQuad);
         }

      return theQuadList;
      }

//==============================================================================
// Private Constructor
//==============================================================================

   private Quadruple (E1 theE1, E2 theE2, E3 theE3, E4 theE4)
      {
      myElement1 = theE1;
      myElement2 = theE2;
      myElement3 = theE3;
      myElement4 = theE4;
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myElement1
// myElement2
// myElement3
// myElement4
//
// The first  Element in this Pair.
// The second Element in this Pair.
// The third  Element in this Pair.
// The fourth Element in this Pair.
//------------------------------------------------------------------------------

   private final E1 myElement1;
   private final E2 myElement2;
   private final E3 myElement3;
   private final E4 myElement4;

//==============================================================================
}
@


1.1
log
@getPgdCritList
@
text
@@

