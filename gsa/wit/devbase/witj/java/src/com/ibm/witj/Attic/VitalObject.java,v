head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2008.09.05.22.06.52;	author rjw;	state dead;
branches;
next	1.5;

1.5
date	2008.09.05.20.20.52;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.04.20.36.23;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.04.15.08.00;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.03.20.33.12;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.03.20.18.07;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Terminology change.
@
text
@
//==============================================================================
// WIT-J Java Source File VitalObject.java.
//
// Contains the declaration of class VitalObject.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

//==============================================================================
// Class VitalObject
//
// The superclass for any class in WIT-J whose instances must be "active" to be
// used.
//
// At any point in time, a VitalObject is in an "active" state or an "inactive"
// state:
// * Initially, a VitalObject is active (just after construction).
// * When its shutDown method is called, it becomes inactive.
// * After that, it stays inactive for the remainder of its existence.
//
// Most of the public methods of any VitalObject subclass are allowed to be
// called only when the VitalObject is in an active state. The exceptions to
// this rule are the following methods, which may be called regardless of
// whether or not the VitalObject is active:
//
// * getActive ()
// * All methods inherited from class Object
//
// If  any other public method is called when the VitalObject is inactive, the
// program aborts with an application program error message.
// 
// When a VitalObject is inactive, the following conditions hold:
// 
// * It no longer owns any C++ objects.
// * All Java objects that it owns are inactive.
// * There are no references to it from active VitalObjects.
// * There are no static references to it from WIT-J.
//
// The shutDown method is responsible for putting the VitalObject into this
// state.
//
// When a VitalObject is active, WIT-J maintains a static reference to it
// (perhaps indirectly). This prevents the VitalObject from being garbage
// collected while it is active, which, in turn, prevents the C++ objects that
// it owns from becoming memory leaks. The shutDown method removes this static
// reference and deletes all C++ objects that it owns. Thus when a VitalObject
// is inactive and all references to it from the application program are
// removed, it is ready for safe garbage collection.
//
// Class Hierarchy:
//
//    VitalObject
//       Problem
//       Component
//          GlobalComp
//          Part
//          Demand
//          Operation
//          BomEntry
//          Substitute
//          BopEntry
//       ProbCoord
//       CompMgr
//       AttRepMgr
//       AttRep
//          StdAttRep
//          CustAttRep
//             {Anonymous Inner Classes}
//       CppInterface
//          ProblemCI
//          ProbCoordCI
//          ComponentCI
//             GlobalCompCI
//             PartCI
//             DemandCI
//             OperationCI
//             BomEntryCI
//             SubstituteCI
//             BopEntryCI
//          AttBldrCI
//          AttCI
//
//==============================================================================

public abstract class VitalObject
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// Accessors.
//------------------------------------------------------------------------------

   public boolean getActive ()
      {
      return isActive;
      }

//==============================================================================
// Protected Methods
//==============================================================================

//------------------------------------------------------------------------------
// finalize ()
//
// Override from class Object.
//------------------------------------------------------------------------------

   protected void finalize () throws Throwable
      {
      super.finalize ();

      assert (! isActive);
      }

//==============================================================================
// Package-Internal Constructor
//==============================================================================

   VitalObject ()
      {
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// shutDown ().
//
// Puts this VitalObject into an inactive state.
// See the comment at the top of this class declaration.
//------------------------------------------------------------------------------

   void shutDown ()
      {
      assert (isActive);

      isActive = false;
      }

//------------------------------------------------------------------------------
// mustBeActive (theArg, argName)
//
// Verifies that the VitalObject is active.
// Arguments:
//    methName: The name of the method.
//------------------------------------------------------------------------------

   void mustBeActive (String methName)
      {
      if (! isActive)
         abortWmsg (
            "   A public method that requires an active VitalObject\n"
          + "   was called on an inactive VitalObject\n"
          + "\n"
          + "      Method: "
          + methName
          + "\n"
          + "      Object: "
          + this);
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// isActive.
//
// True,  if this VitalObject is currently active.
// False, if this VitalObject is currently inactive.
//------------------------------------------------------------------------------

   private boolean isActive = true;

//==============================================================================
}
@


1.5
log
@Minor change.
@
text
@@


1.4
log
@Added attribute "execBounds".
@
text
@d29 1
a29 1
// * isActive ()
d45 7
a51 4
// If a VitalObject is inactive and all references to it from the
// application program are removed, it is ready for garbage collection.
// Garbage collection of a VitalObject while it is still active results in an
// internal error.
d98 1
a98 1
   public boolean isActive ()
@


1.3
log
@Attributes.
@
text
@d68 1
a68 1
//             [Anonymous inner classes]
@


1.2
log
@Replaced class InternalObject with class VitalObject.
@
text
@d68 1
a68 1
//             [Anonymous inner classes of class CustAttRep]
@


1.1
log
@Replaced class PublicObject with class VitalObject.
@
text
@d62 20
@

