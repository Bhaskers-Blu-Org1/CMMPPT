head	1.46;
access;
symbols;
locks; strict;
comment	@# @;


1.46
date	2008.10.22.13.43.29;	author rjw;	state dead;
branches;
next	1.45;

1.45
date	2008.10.14.22.04.38;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2008.10.14.16.29.39;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2008.10.07.18.50.25;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2008.10.06.22.14.04;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2008.10.06.14.42.39;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2008.10.01.22.55.34;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2008.09.12.16.09.35;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2008.09.09.15.15.30;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.09.05.22.06.50;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.09.04.21.47.41;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2008.09.04.21.24.30;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.09.04.20.56.17;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.09.04.20.36.22;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.09.04.15.31.50;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.09.04.15.08.00;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.09.03.20.18.02;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.09.03.18.03.00;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.09.02.14.37.23;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.08.29.18.36.43;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.08.29.17.19.06;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.08.29.14.22.01;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.08.28.21.13.42;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.08.27.20.21.26;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.08.27.18.13.56;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.08.26.21.40.30;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.08.26.15.39.01;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.08.22.17.53.46;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.08.22.14.39.01;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.08.22.14.06.23;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.08.21.20.53.12;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.08.20.19.47.50;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.08.20.18.49.27;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.08.19.19.20.27;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.08.19.16.28.54;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.08.19.14.32.03;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.08.19.14.11.14;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.08.18.22.16.56;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.08.18.20.25.34;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.08.08.23.02.10;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.08.08.21.26.15;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.08.07.22.15.32;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.08.07.22.06.05;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.07.15.59.34;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.07.15.43.05;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.07.15.25.50;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.46
log
@Changed name of generic class AttSpec <V> to Attribute <V>.
@
text
@
//==============================================================================
// WIT-J Java Source File AttSpec.java.
//
// Contains the declaration of generic class AttSpec <V>.
//==============================================================================

package       com.ibm.witj;

import static com.ibm.witj.Utility.*;

import       java.util.*;
import       java.lang.reflect.*;

//==============================================================================
// Generic Class AttSpec <V>
//
// "Attribute Specification (Value Type)"
//
// Represents the set of all WIT attributes that have a given name.
// Each AttSpec has a value type, the type of value that it stores.
//==============================================================================

public final class AttSpec <V>
{
//==============================================================================
// AttSpec Accessors
//==============================================================================

   public static AttSpec <Boolean>       accAfterOptImp ()
      {   return                         accAfterOptImp;}

   public static AttSpec <Boolean>       accAfterSoftLB ()
      {   return                         accAfterSoftLB;}

   public static AttSpec <Boolean>       accelerated ()
      {   return                         accelerated;}

   public static AttSpec <Boolean>       asapPipOrder ()
      {   return                         asapPipOrder;}

   public static AttSpec <Boolean>       autoPriority ()
      {   return                         autoPriority;}

   public static AttSpec <Integer>       bomIndex ()
      {   return                         bomIndex;}

   public static AttSpec <Integer>       bopIndex ()
      {   return                         bopIndex;}

   public static AttSpec <Double>        boundsValue ()
      {   return                         boundsValue;}

   public static AttSpec <int[]>         buildAheadUB ()
      {   return                         buildAheadUB;}

   public static AttSpec <Boolean>       buildAsap ()
      {   return                         buildAsap;}

   public static AttSpec <Boolean>       buildNstn ()
      {   return                         buildNstn;}

   public static AttSpec <Boolean>       compPrices ()
      {   return                         compPrices;}

   public static AttSpec <Boolean>       computeCriticalList ()
      {   return                         computeCriticalList;}

   public static AttSpec <double[]>      consRate ()
      {   return                         consRate;}

   public static AttSpec <double[]>      consVol ()
      {   return                         consVol;}

   public static AttSpec <BoundSet>      cumShipBounds ()
      {   return                         cumShipBounds;}

   public static AttSpec <double[]>      cumShipReward ()
      {   return                         cumShipReward;}

   public static AttSpec <Integer>       currentScenario ()
      {   return                         currentScenario;}

   public static AttSpec <String>        demandName ()
      {   return                         demandName;}

   public static AttSpec <double[]>      demandVol ()
      {   return                         demandVol;}

   public static AttSpec <Integer>       earliestPeriod ()
      {   return                         earliestPeriod;}

   public static AttSpec <Integer>       equitability ()
      {   return                         equitability;}

   public static AttSpec <double[]>      excessVol ()
      {   return                         excessVol;}

   public static AttSpec <BoundSet>      execBounds ()
      {   return                         execBounds;}

   public static AttSpec <double[]>      execCost ()
      {   return                         execCost;}

   public static AttSpec <Boolean>       execEmptyBom ()
      {   return                         execEmptyBom;}

   public static AttSpec <Double>        execPenalty ()
      {   return                         execPenalty;}

   public static AttSpec <double[]>      execVol ()
      {   return                         execVol;}

   public static AttSpec <boolean[]>     executable ()
      {   return                         executable;}

   public static AttSpec <Boolean>       expAllowed ()
      {   return                         expAllowed;}

   public static AttSpec <Double>        expAversion ()
      {   return                         expAversion;}

   public static AttSpec <Double>        expCutoff ()
      {   return                         expCutoff;}

   public static AttSpec <Double>        expNetAversion ()
      {   return                         expNetAversion;}

   public static AttSpec <Boolean>       extOptActive ()
      {   return                         extOptActive;}

   public static AttSpec <Double>        falloutRate ()
      {   return                         falloutRate;}

   public static AttSpec <Boolean>       feasible ()
      {   return                         feasible;}

   public static AttSpec <Integer>       focusHorizon ()
      {   return                         focusHorizon;}

   public static AttSpec <double[]>      focusShortageVol ()
      {   return                         focusShortageVol;}

   public static AttSpec <Boolean>       forcedMultiEq ()
      {   return                         forcedMultiEq;}

   public static AttSpec <double[]>      fssExecVol ()
      {   return                         fssExecVol;}

   public static AttSpec <double[]>      fssSubVol ()
      {   return                         fssSubVol;}

   public static AttSpec <Boolean>       heurAllocActive ()
      {   return                         heurAllocActive;}

   public static AttSpec <Boolean>       highPrecisionWD ()
      {   return                         highPrecisionWD;}

   public static AttSpec <int[]>         impactPeriod ()
      {   return                         impactPeriod;}

   public static AttSpec <double[]>      incLotSize ()
      {   return                         incLotSize;}

   public static AttSpec <double[]>      incLotSize2 ()
      {   return                         incLotSize2;}

   public static AttSpec <Boolean>       independentOffsets ()
      {   return                         independentOffsets;}

   public static AttSpec <Boolean>       intExecVols ()
      {   return                         intExecVols;}

   public static AttSpec <Boolean>       intShipVols ()
      {   return                         intShipVols;}

   public static AttSpec <Boolean>       intSubVols ()
      {   return                         intSubVols;}

   public static AttSpec <Integer>       latestPeriod ()
      {   return                         latestPeriod;}

   public static AttSpec <double[]>      lotSize2Thresh ()
      {   return                         lotSize2Thresh;}

   public static AttSpec <Double>        lotSizeTol ()
      {   return                         lotSizeTol;}

   public static AttSpec <Boolean>       mandEC ()
      {   return                         mandEC;}

   public static AttSpec <double[]>      minLotSize ()
      {   return                         minLotSize;}

   public static AttSpec <double[]>      minLotSize2 ()
      {   return                         minLotSize2;}

   public static AttSpec <Boolean>       minimalExcess ()
      {   return                         minimalExcess;}

   public static AttSpec <Boolean>       mipMode ()
      {   return                         mipMode;}

   public static AttSpec <double[]>      mrpConsVol ()
      {   return                         mrpConsVol;}

   public static AttSpec <double[]>      mrpExcessVol ()
      {   return                         mrpExcessVol;}

   public static AttSpec <double[]>      mrpExecVol ()
      {   return                         mrpExecVol;}

   public static AttSpec <Boolean>       mrpNetAllowed ()
      {   return                         mrpNetAllowed;}

   public static AttSpec <double[]>      mrpResidualVol ()
      {   return                         mrpResidualVol;}

   public static AttSpec <double[]>      mrpSubVol ()
      {   return                         mrpSubVol;}

   public static AttSpec <Boolean>       multiExec ()
      {   return                         multiExec;}

   public static AttSpec <Boolean>       multiRoute ()
      {   return                         multiRoute;}

   public static AttSpec <Integer>       nPeriods ()
      {   return                         nPeriods;}

   public static AttSpec <Integer>       nScenarios ()
      {   return                         nScenarios;}

   public static AttSpec <Boolean>       netAllowed ()
      {   return                         netAllowed;}

   public static AttSpec <Boolean>       nstnResidual ()
      {   return                         nstnResidual;}

   public static AttSpec <Double>        objValue ()
      {   return                         objValue;}

   public static AttSpec <Integer>       objectStage ()
      {   return                         objectStage;}

   public static AttSpec <double[]>      offset ()
      {   return                         offset;}

   public static AttSpec <String>        operationName ()
      {   return                         operationName;}

   public static AttSpec <Part.Category> partCategory ()
      {   return                         partCategory;}

   public static AttSpec <String>        partName ()
      {   return                         partName;}

   public static AttSpec <Boolean>       penExec ()
      {   return                         penExec;}

   public static AttSpec <Boolean>       perfPegging ()
      {   return                         perfPegging;}

   public static AttSpec <int[]>         periodStage ()
      {   return                         periodStage;}

   public static AttSpec <Boolean>       pgdCritListMode ()
      {   return                         pgdCritListMode;}

   public static AttSpec <Boolean>       pipExists ()
      {   return                         pipExists;}

   public static AttSpec <Boolean>       pipSeqFromHeur ()
      {   return                         pipSeqFromHeur;}

   public static AttSpec <Boolean>       postprocessed ()
      {   return                         postprocessed;}

   public static AttSpec <Boolean>       prefHighStockSLBs ()
      {   return                         prefHighStockSLBs;}

   public static AttSpec <Boolean>       preprocessed ()
      {   return                         preprocessed;}

   public static AttSpec <int[]>         priority ()
      {   return                         priority;}

   public static AttSpec <Double>        probability ()
      {   return                         probability;}

   public static AttSpec <double[]>      prodVol ()
      {   return                         prodVol;}

   public static AttSpec <double[]>      productRate ()
      {   return                         productRate;}

   public static AttSpec <boolean[]>     propRtg ()
      {   return                         propRtg;}

   public static AttSpec <double[]>      reqVol ()
      {   return                         reqVol;}

   public static AttSpec <double[]>      residualVol ()
      {   return                         residualVol;}

   public static AttSpec <Boolean>       respectStockSLBs ()
      {   return                         respectStockSLBs;}

   public static AttSpec <Boolean>       roundReqVols ()
      {   return                         roundReqVols;}

   public static AttSpec <double[]>      routingShare ()
      {   return                         routingShare;}

   public static AttSpec <Boolean>       scrapAllowed ()
      {   return                         scrapAllowed;}

   public static AttSpec <double[]>      scrapCost ()
      {   return                         scrapCost;}

   public static AttSpec <double[]>      scrapVol ()
      {   return                         scrapVol;}

   public static AttSpec <Double>        searchInc ()
      {   return                         searchInc;}

   public static AttSpec <Boolean>       selForDel ()
      {   return                         selForDel;}

   public static AttSpec <Boolean>       selSplit ()
      {   return                         selSplit;}

   public static AttSpec <double[]>      shadowPrice ()
      {   return                         shadowPrice;}

   public static AttSpec <Boolean>       shipLateAllowed ()
      {   return                         shipLateAllowed;}

   public static AttSpec <int[]>         shipLateUB ()
      {   return                         shipLateUB;}

   public static AttSpec <double[]>      shipReward ()
      {   return                         shipReward;}

   public static AttSpec <double[]>      shipVol ()
      {   return                         shipVol;}

   public static AttSpec <Boolean>       singleSource ()
      {   return                         singleSource;}

   public static AttSpec <Boolean>       skipFailures ()
      {   return                         skipFailures;}

   public static AttSpec <String>        solverLogFileName ()
      {   return                         solverLogFileName;}

   public static AttSpec <Boolean>       stageByObject ()
      {   return                         stageByObject;}

   public static AttSpec <Boolean>       stochMode ()
      {   return                         stochMode;}

   public static AttSpec <Boolean>       stochSolnMode ()
      {   return                         stochSolnMode;}

   public static AttSpec <BoundSet>      stockBounds ()
      {   return                         stockBounds;}

   public static AttSpec <double[]>      stockCost ()
      {   return                         stockCost;}

   public static AttSpec <Boolean>       stockReallocation ()
      {   return                         stockReallocation;}

   public static AttSpec <double[]>      stockVol ()
      {   return                         stockVol;}

   public static AttSpec <double[]>      subCost ()
      {   return                         subCost;}

   public static AttSpec <Integer>       subIndex ()
      {   return                         subIndex;}

   public static AttSpec <double[]>      subVol ()
      {   return                         subVol;}

   public static AttSpec <double[]>      supplyVol ()
      {   return                         supplyVol;}

   public static AttSpec <Boolean>       tieBreakPropRt ()
      {   return                         tieBreakPropRt;}

   public static AttSpec <String>        title ()
      {   return                         title;}

   public static AttSpec <Boolean>       truncOffsets ()
      {   return                         truncOffsets;}

   public static AttSpec <Boolean>       twoLevelLotSizes ()
      {   return                         twoLevelLotSizes;}

   public static AttSpec <Boolean>       twoWayMultiExec ()
      {   return                         twoWayMultiExec;}

   public static AttSpec <Boolean>       useFocusHorizons ()
      {   return                         useFocusHorizons;}

   public static AttSpec <Boolean>       userHeurStart ()
      {   return                         userHeurStart;}

   public static AttSpec <Double>        wbounds ()
      {   return                         wbounds;}

   public static AttSpec <double[]>      yieldRate ()
      {   return                         yieldRate;}

//==============================================================================
// AttSpec instances.
//
// The following are the only AttSpecs that are ever created in WIT-J:
//==============================================================================

   private static AttSpec <Boolean>       accAfterOptImp;
   private static AttSpec <Boolean>       accAfterSoftLB;
   private static AttSpec <Boolean>       accelerated;
   private static AttSpec <Boolean>       asapPipOrder;
   private static AttSpec <Boolean>       autoPriority;
   private static AttSpec <Integer>       bomIndex;
   private static AttSpec <Integer>       bopIndex;
   private static AttSpec <Double>        boundsValue;
   private static AttSpec <int[]>         buildAheadUB;
   private static AttSpec <Boolean>       buildAsap;
   private static AttSpec <Boolean>       buildNstn;
   private static AttSpec <Boolean>       compPrices;
   private static AttSpec <Boolean>       computeCriticalList;
   private static AttSpec <double[]>      consRate;
   private static AttSpec <double[]>      consVol;
   private static AttSpec <BoundSet>      cumShipBounds;
   private static AttSpec <double[]>      cumShipReward;
   private static AttSpec <Integer>       currentScenario;
   private static AttSpec <String>        demandName;
   private static AttSpec <double[]>      demandVol;
   private static AttSpec <Integer>       earliestPeriod;
   private static AttSpec <Integer>       equitability;
   private static AttSpec <double[]>      excessVol;
   private static AttSpec <BoundSet>      execBounds;
   private static AttSpec <double[]>      execCost;
   private static AttSpec <Boolean>       execEmptyBom;
   private static AttSpec <Double>        execPenalty;
   private static AttSpec <double[]>      execVol;
   private static AttSpec <boolean[]>     executable;
   private static AttSpec <Boolean>       expAllowed;
   private static AttSpec <Double>        expAversion;
   private static AttSpec <Double>        expCutoff;
   private static AttSpec <Double>        expNetAversion;
   private static AttSpec <Boolean>       extOptActive;
   private static AttSpec <Double>        falloutRate;
   private static AttSpec <Boolean>       feasible;
   private static AttSpec <Integer>       focusHorizon;
   private static AttSpec <double[]>      focusShortageVol;
   private static AttSpec <Boolean>       forcedMultiEq;
   private static AttSpec <double[]>      fssExecVol;
   private static AttSpec <double[]>      fssSubVol;
   private static AttSpec <Boolean>       heurAllocActive;
   private static AttSpec <Boolean>       highPrecisionWD;
   private static AttSpec <int[]>         impactPeriod;
   private static AttSpec <double[]>      incLotSize;
   private static AttSpec <double[]>      incLotSize2;
   private static AttSpec <Boolean>       independentOffsets;
   private static AttSpec <Boolean>       intExecVols;
   private static AttSpec <Boolean>       intShipVols;
   private static AttSpec <Boolean>       intSubVols;
   private static AttSpec <Integer>       latestPeriod;
   private static AttSpec <double[]>      lotSize2Thresh;
   private static AttSpec <Double>        lotSizeTol;
   private static AttSpec <Boolean>       mandEC;
   private static AttSpec <double[]>      minLotSize;
   private static AttSpec <double[]>      minLotSize2;
   private static AttSpec <Boolean>       minimalExcess;
   private static AttSpec <Boolean>       mipMode;
   private static AttSpec <double[]>      mrpConsVol;
   private static AttSpec <double[]>      mrpExcessVol;
   private static AttSpec <double[]>      mrpExecVol;
   private static AttSpec <Boolean>       mrpNetAllowed;
   private static AttSpec <double[]>      mrpResidualVol;
   private static AttSpec <double[]>      mrpSubVol;
   private static AttSpec <Boolean>       multiExec;
   private static AttSpec <Boolean>       multiRoute;
   private static AttSpec <Integer>       nPeriods;
   private static AttSpec <Integer>       nScenarios;
   private static AttSpec <Boolean>       netAllowed;
   private static AttSpec <Boolean>       nstnResidual;
   private static AttSpec <Double>        objValue;
   private static AttSpec <Integer>       objectStage;
   private static AttSpec <double[]>      offset;
   private static AttSpec <String>        operationName;
   private static AttSpec <Part.Category> partCategory;
   private static AttSpec <String>        partName;
   private static AttSpec <Boolean>       penExec;
   private static AttSpec <Boolean>       perfPegging;
   private static AttSpec <int[]>         periodStage;
   private static AttSpec <Boolean>       pgdCritListMode;
   private static AttSpec <Boolean>       pipExists;
   private static AttSpec <Boolean>       pipSeqFromHeur;
   private static AttSpec <Boolean>       postprocessed;
   private static AttSpec <Boolean>       prefHighStockSLBs;
   private static AttSpec <Boolean>       preprocessed;
   private static AttSpec <int[]>         priority;
   private static AttSpec <Double>        probability;
   private static AttSpec <double[]>      prodVol;
   private static AttSpec <double[]>      productRate;
   private static AttSpec <boolean[]>     propRtg;
   private static AttSpec <double[]>      reqVol;
   private static AttSpec <double[]>      residualVol;
   private static AttSpec <Boolean>       respectStockSLBs;
   private static AttSpec <Boolean>       roundReqVols;
   private static AttSpec <double[]>      routingShare;
   private static AttSpec <Boolean>       scrapAllowed;
   private static AttSpec <double[]>      scrapCost;
   private static AttSpec <double[]>      scrapVol;
   private static AttSpec <Double>        searchInc;
   private static AttSpec <Boolean>       selForDel;
   private static AttSpec <Boolean>       selSplit;
   private static AttSpec <double[]>      shadowPrice;
   private static AttSpec <Boolean>       shipLateAllowed;
   private static AttSpec <int[]>         shipLateUB;
   private static AttSpec <double[]>      shipReward;
   private static AttSpec <double[]>      shipVol;
   private static AttSpec <Boolean>       singleSource;
   private static AttSpec <Boolean>       skipFailures;
   private static AttSpec <String>        solverLogFileName;
   private static AttSpec <Boolean>       stageByObject;
   private static AttSpec <Boolean>       stochMode;
   private static AttSpec <Boolean>       stochSolnMode;
   private static AttSpec <BoundSet>      stockBounds;
   private static AttSpec <double[]>      stockCost;
   private static AttSpec <Boolean>       stockReallocation;
   private static AttSpec <double[]>      stockVol;
   private static AttSpec <double[]>      subCost;
   private static AttSpec <Integer>       subIndex;
   private static AttSpec <double[]>      subVol;
   private static AttSpec <double[]>      supplyVol;
   private static AttSpec <Boolean>       tieBreakPropRt;
   private static AttSpec <String>        title;
   private static AttSpec <Boolean>       truncOffsets;
   private static AttSpec <Boolean>       twoLevelLotSizes;
   private static AttSpec <Boolean>       twoWayMultiExec;
   private static AttSpec <Boolean>       useFocusHorizons;
   private static AttSpec <Boolean>       userHeurStart;
   private static AttSpec <Double>        wbounds;
   private static AttSpec <double[]>      yieldRate;

//==============================================================================
// Public Methods (other than AttSpec Accessors)
//==============================================================================

//------------------------------------------------------------------------------
// values
//
// Returns the set of all AttSpecs in WIT-J.
//------------------------------------------------------------------------------

   public static AttSpec <?>[] values ()
      {
      AttSpec <?>[] theAttSpecArr;

      theAttSpecArr = new AttSpec <?>[allInstances.size ()];

      allInstances.toArray (theAttSpecArr);

      return theAttSpecArr;
      }

//------------------------------------------------------------------------------
// getValueType ()
//
// Returns the value type of this AttSpec.
//------------------------------------------------------------------------------

   public Class <?> getValueType ()
      {
      return myValueType;
      }

//------------------------------------------------------------------------------
// appliesTo (theElement)
//
// Returns true, iff this AttSpec applies to the Element class of which
// theElement is an instance.
//------------------------------------------------------------------------------

   public final boolean appliesTo (Element theElement)
      {
      AttRep theAttRep;

      argMustBeActive (theElement, "theElement", "AttSpec.appliesTo");

      theAttRep = theElement.getProblem ().getAttRepMgr ().getAttRepFor (this);

      return theAttRep.appliesTo (theElement);
      }

//------------------------------------------------------------------------------
// getIsInputAtt (theProblem)
//
// Returns true,  if the WIT attributes represented by this AttSpec are all
//                input attributes:  their values can    be set.
// Returns false, if the WIT attributes represented by this AttSpec are all
//                output attributes: their values cannot be set.
//------------------------------------------------------------------------------

   public final boolean getIsInputAtt (Problem theProblem)
      {
      AttRep theAttRep;

      argMustBeActive (theProblem, "theProblem", "AttSpec.getIsInputAtt");

      theAttRep = theProblem.getAttRepMgr ().getAttRepFor (this);

      return (theAttRep.getAccessStyle () == AccessStyle.INPUT);
      }

//------------------------------------------------------------------------------
// hashCode ()
//
// Override from class Object.
//------------------------------------------------------------------------------

   public final int hashCode ()
      {
      return myIndex;
      }

//------------------------------------------------------------------------------
// toString ()
//
// Override from class Object.
//------------------------------------------------------------------------------

   public final String toString ()
      {
      return myName;
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// selfTest ()
//
// Does self-test for AttSpecs.
//------------------------------------------------------------------------------

   static void selfTest ()
      {
      checkAlphaOrder ();
      }

//------------------------------------------------------------------------------
// Accessors
//------------------------------------------------------------------------------

   final int getIndex ()
      {
      return myIndex;
      }

//==============================================================================
// Private Constructor
//==============================================================================

   private AttSpec (String theName, Class <?> theValueType)
      {
      myName      = theName;
      myValueType = theValueType;
      myIndex     = allInstances.size ();

      allInstances.add (this);
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// buildInstances ()
//
// Constructs all of the AttSpecs for WIT-J and assigns them to the
// corresponding static fields of this class.
//
// e.g., a new AttSpec <Boolean> is constructed assigned to the accAfterOptImp
// field.
//------------------------------------------------------------------------------

   private static void buildInstances ()
      {
      Map <Type, Method> theFacMethMap;
      Type               theFieldType;
      Method             theFacMeth;
      String             theAttName;
      Object             theAttSpecObj;

      try
         {
         theFacMethMap = buildFacMethMap ();

         for (Field theField: AttSpec.class.getDeclaredFields ())
            {
            theFieldType = theField.getGenericType ();

            theFacMeth   = theFacMethMap.get (theFieldType);

            if (theFacMeth == null)
               continue;

            theAttName    = theField.getName ();

            theAttSpecObj = theFacMeth.invoke (null, theAttName);

            theField.setAccessible (true);

            theField.set (null, theAttSpecObj);
            }
         }

      catch (Exception theExc)
         {
         intAbortWmsg (
            "   An exception was thrown in AttSpec.buildInstances ():\n"
          + "\n"
          + "      Exception: " + theExc);
         }
      }

//------------------------------------------------------------------------------
// buildFacMethMap ()
//
// Builds and returns a mapping from the return type of each factory method
// declared in this class to the factory method that has that return type.
//
// e.g. "AttSpec <Integer>" is mapped to "factory2".
//
// Makes each factory method accessible from reflection.
//------------------------------------------------------------------------------

   private static Map <Type, Method> buildFacMethMap ()
           throws Exception
      {
      HashMap <Type, Method> theFacMethMap;

      theFacMethMap = new HashMap <Type, Method> (100);

      for (Method theMethod: AttSpec.class.getDeclaredMethods ())
         {
         if (theMethod.getName ().length () < 8)
            continue;

         if (! theMethod.getName ().substring (0, 7).equals ("factory"))
            continue;

         theMethod.setAccessible (true);

         theFacMethMap.put (theMethod.getGenericReturnType (), theMethod);
         }

      return theFacMethMap;
      }

//------------------------------------------------------------------------------
// Static factory methods
//
// Methods for constructing each kind of AttSpec <V>.
// These methods are used reflexively by buildInstances () and
// buildFacMethMap ().
//------------------------------------------------------------------------------

   private static AttSpec <Boolean>       factory1 (String theName)
      {
      return new  AttSpec <Boolean>       (theName, Boolean.class);
      }

   private static AttSpec <Integer>       factory2 (String theName)
      {
      return new  AttSpec <Integer>       (theName, Integer.class);
      }

   private static AttSpec <Double>        factory3 (String theName)
      {
      return new  AttSpec <Double>        (theName, Double.class);
      }

   private static AttSpec <boolean[]>     factory4 (String theName)
      {
      return new  AttSpec <boolean[]>     (theName, boolean[].class);
      }

   private static AttSpec <int[]>         factory5 (String theName)
      {
      return new  AttSpec <int[]>         (theName, int[].class);
      }

   private static AttSpec <double[]>      factory6 (String theName)
      {
      return new  AttSpec <double[]>      (theName, double[].class);
      }

   private static AttSpec <String>        factory7 (String theName)
      {
      return new  AttSpec <String>        (theName, String.class);
      }

   private static AttSpec <Part.Category> factory8 (String theName)
      {
      return new  AttSpec <Part.Category> (theName, Part.Category.class);
      }

   private static AttSpec <BoundSet>      factory9 (String theName)
      {
      return new  AttSpec <BoundSet>      (theName, BoundSet.class);
      }

//------------------------------------------------------------------------------
// checkAlphaOrder ()
//
// Verifies that the AttSpecs are listed in alphabetical order.
//------------------------------------------------------------------------------

   private static void checkAlphaOrder ()
      {
      String theAttName;
      String prevAttName = null;

      println (
           "\n"
         + "Verifying that the AttSpecs are listed in alphabetical order.\n");

      for (AttSpec <?> theAttSpec: allInstances)
         {
         theAttName = theAttSpec.toString ();

         if (prevAttName != null)
            if (theAttName.compareTo (prevAttName) < 0)
               intAbortWmsg (
                  "   An AttSpec was found whose name is alphabetically\n"
                + "   earlier than that of the preceding AttSpec.\n"
                + "\n"
                + "      Preceding AttSpec: " + prevAttName + "\n"
                + "      Current   AttSpec: " + theAttName);

         prevAttName = theAttName;
         }

      println ("Verified: The AttSpecs are listed in alphabetical order.");
      }

//==============================================================================
// Private Fields (other than AttSpec Instances)
//==============================================================================

//------------------------------------------------------------------------------
// myName
//
// The name of the attribute.
//------------------------------------------------------------------------------

   private final String myName;

//------------------------------------------------------------------------------
// myValueType
//
// Indicates the value type of the attribute.
//------------------------------------------------------------------------------

   private final Class <?> myValueType;

//------------------------------------------------------------------------------
// myIndex
//
// A unique index for this AttSpec.
// # of AttSpecs constructed before this one.
//------------------------------------------------------------------------------

   private final int myIndex;

//------------------------------------------------------------------------------
// allInstances
//
// The list of all AttSpecs.
//------------------------------------------------------------------------------

   private static final List <AttSpec <?>> allInstances;

//==============================================================================
// Static initialization block
//==============================================================================

   static
      {
      allInstances = new ArrayList <AttSpec <?>> ();

      buildInstances ();
      }

//==============================================================================
}
@


1.45
log
@Minor Revision.
@
text
@@


1.44
log
@Made bomIndex, subIndex, and bopIndex into formal attributes.
@
text
@d604 1
a604 1
// getInputAccess (theProblem)
d612 1
a612 1
   public final boolean getInputAccess (Problem theProblem)
d616 1
a616 1
      argMustBeActive (theProblem, "theProblem", "AttSpec.getInputAccess");
@


1.43
log
@Name change.
@
text
@d45 6
d381 3
d428 2
d540 1
@


1.42
log
@Changed name of Component to Entity.
@
text
@d574 1
a574 1
// appliesTo (theEntity)
d576 2
a577 2
// Returns true, iff this AttSpec applies to the Entity class of which
// theEntity is an instance.
d580 1
a580 1
   public final boolean appliesTo (Entity theEntity)
d584 1
a584 1
      argMustBeActive (theEntity, "theEntity", "AttSpec.appliesTo");
d586 1
a586 1
      theAttRep = theEntity.getProblem ().getAttRepMgr ().getAttRepFor (this);
d588 1
a588 1
      return theAttRep.appliesTo (theEntity);
@


1.41
log
@Minor revision.
@
text
@d574 1
a574 1
// appliesTo (theComp)
d576 2
a577 2
// Returns true, iff this AttSpec applies to the Component class of which
// theComp is an instance.
d580 1
a580 1
   public final boolean appliesTo (Component theComp)
d584 1
a584 1
      argMustBeActive (theComp, "theComp", "AttSpec.appliesTo");
d586 1
a586 1
      theAttRep = theComp.getProblem ().getAttRepMgr ().getAttRepFor (this);
d588 1
a588 1
      return theAttRep.appliesTo (theComp);
@


1.40
log
@Minor revision.
@
text
@d592 1
a592 1
// getInputMode (theProblem)
d600 1
a600 1
   public final boolean getInputMode (Problem theProblem)
d604 1
a604 1
      argMustBeActive (theProblem, "theProblem", "AttSpec.getInputMode");
@


1.39
log
@Active state / shutDown method.
@
text
@d592 1
a592 1
// isAnInputAtt (theProblem)
d600 1
a600 1
   public final boolean isAnInputAtt (Problem theProblem)
d604 1
a604 1
      argMustBeActive (theProblem, "theProblem", "AttSpec.isAnInputAtt");
@


1.38
log
@Removed Java class ProbCoord.
@
text
@d584 1
a584 1
      argMustBeUnreleased (theComp, "theComp", "AttSpec.appliesTo");
d604 1
a604 1
      argMustBeUnreleased (theProblem, "theProblem", "AttSpec.isAnInputAtt");
@


1.37
log
@Terminology change.
@
text
@d586 1
a586 1
      theAttRep = theComp.getProbCoord ().getAttRepMgr ().getAttRepFor (this);
d606 1
a606 2
      theAttRep =
         theProblem.getProbCoord ().getAttRepMgr ().getAttRepFor (this);
@


1.36
log
@Added attribute cumShipBounds.
@
text
@d584 1
a584 1
      mustBeNonNullActive (theComp, "theComp", "AttSpec.appliesTo");
d604 1
a604 1
      mustBeNonNullActive (theProblem, "theProblem", "AttSpec.isAnInputAtt");
@


1.35
log
@Added attribute "stockBounds".
@
text
@d69 3
d427 1
@


1.34
log
@Attributes.
@
text
@d357 3
d520 1
@


1.33
log
@Added attribute "execBounds".
@
text
@d819 1
a819 1
      for (AttSpec theAttSpec: allInstances)
@


1.32
log
@Attributes.
@
text
@d90 3
d428 1
d799 5
@


1.31
log
@Attributes.
@
text
@d5 1
a5 1
// Contains the declaration of generic class AttSpec <ValueType>.
d16 1
a16 1
// Generic Class AttSpec <ValueType>
d24 1
a24 1
public final class AttSpec <ValueType>
d750 1
a750 1
// Methods for constructing each kind of AttSpec <ValueType>.
@


1.30
log
@Replaced class PublicObject with class VitalObject.
@
text
@d5 1
a5 1
// Contains the declaration of generic class AttSpec <RefType>.
d16 1
a16 1
// Generic Class AttSpec <RefType>
d18 1
a18 1
// "Attribute Specification (Reference Type)"
a21 10
// The RefType type parameter is the reference type corresponding to the value
// type: either the value type itself or the wrapper class for the value type,
// if the value type is a primitive type.
//
// Examples:
//
//   AttSpec        Value Type   RefType
//   -------        ----------   -------
//   supplyVol      double[]     double[]
//   equitability   int          Integer
d24 1
a24 1
public final class AttSpec <RefType>
d750 1
a750 1
// Methods for constructing each kind of AttSpec <RefType>.
d757 1
a757 1
      return new  AttSpec <Boolean>       (theName, boolean.class);
d762 1
a762 1
      return new  AttSpec <Integer>       (theName, int.class);
d767 1
a767 1
      return new  AttSpec <Double>        (theName, double.class);
@


1.29
log
@Replaced toStringActive () with toString ().
@
text
@a31 5
//
// Class Hierarchy:
//
//    PublicObject
//       AttSpec <RefType>
d34 1
a34 1
public final class AttSpec <RefType> extends PublicObject
a647 12
// shutDown ().
//
// Override from class PublicObject.
// Not to be invoked.
//------------------------------------------------------------------------------

   void shutDown ()
      {
      assert (false);
      }

//------------------------------------------------------------------------------
@


1.28
log
@"partCategory" attribute.
@
text
@d627 1
a627 1
// toStringActive ()
d629 1
a629 1
// Override from class PublicObject.
d632 1
a632 1
   public final String toStringActive ()
@


1.27
log
@"demandName" attribute.
@
text
@d45 2
a46 2
   public static AttSpec <Boolean>   accAfterOptImp ()
      {   return                     accAfterOptImp;}
d48 2
a49 2
   public static AttSpec <Boolean>   accAfterSoftLB ()
      {   return                     accAfterSoftLB;}
d51 2
a52 2
   public static AttSpec <Boolean>   accelerated ()
      {   return                     accelerated;}
d54 2
a55 2
   public static AttSpec <Boolean>   asapPipOrder ()
      {   return                     asapPipOrder;}
d57 2
a58 2
   public static AttSpec <Boolean>   autoPriority ()
      {   return                     autoPriority;}
d60 2
a61 2
   public static AttSpec <Double>    boundsValue ()
      {   return                     boundsValue;}
d63 2
a64 2
   public static AttSpec <int[]>     buildAheadUB ()
      {   return                     buildAheadUB;}
d66 2
a67 2
   public static AttSpec <Boolean>   buildAsap ()
      {   return                     buildAsap;}
d69 2
a70 2
   public static AttSpec <Boolean>   buildNstn ()
      {   return                     buildNstn;}
d72 2
a73 2
   public static AttSpec <Boolean>   compPrices ()
      {   return                     compPrices;}
d75 2
a76 2
   public static AttSpec <Boolean>   computeCriticalList ()
      {   return                     computeCriticalList;}
d78 2
a79 2
   public static AttSpec <double[]>  consRate ()
      {   return                     consRate;}
d81 2
a82 2
   public static AttSpec <double[]>  consVol ()
      {   return                     consVol;}
d84 2
a85 2
   public static AttSpec <double[]>  cumShipReward ()
      {   return                     cumShipReward;}
d87 2
a88 2
   public static AttSpec <Integer>   currentScenario ()
      {   return                     currentScenario;}
d90 2
a91 2
   public static AttSpec <String>    demandName ()
      {   return                     demandName;}
d93 2
a94 2
   public static AttSpec <double[]>  demandVol ()
      {   return                     demandVol;}
d96 2
a97 2
   public static AttSpec <Integer>   earliestPeriod ()
      {   return                     earliestPeriod;}
d99 2
a100 2
   public static AttSpec <Integer>   equitability ()
      {   return                     equitability;}
d102 2
a103 2
   public static AttSpec <double[]>  excessVol ()
      {   return                     excessVol;}
d105 2
a106 2
   public static AttSpec <double[]>  execCost ()
      {   return                     execCost;}
d108 2
a109 2
   public static AttSpec <Boolean>   execEmptyBom ()
      {   return                     execEmptyBom;}
d111 2
a112 2
   public static AttSpec <Double>    execPenalty ()
      {   return                     execPenalty;}
d114 2
a115 2
   public static AttSpec <double[]>  execVol ()
      {   return                     execVol;}
d117 2
a118 2
   public static AttSpec <boolean[]> executable ()
      {   return                     executable;}
d120 2
a121 2
   public static AttSpec <Boolean>   expAllowed ()
      {   return                     expAllowed;}
d123 2
a124 2
   public static AttSpec <Double>    expAversion ()
      {   return                     expAversion;}
d126 2
a127 2
   public static AttSpec <Double>    expCutoff ()
      {   return                     expCutoff;}
d129 2
a130 2
   public static AttSpec <Double>    expNetAversion ()
      {   return                     expNetAversion;}
d132 2
a133 2
   public static AttSpec <Boolean>   extOptActive ()
      {   return                     extOptActive;}
d135 2
a136 2
   public static AttSpec <Double>    falloutRate ()
      {   return                     falloutRate;}
d138 2
a139 2
   public static AttSpec <Boolean>   feasible ()
      {   return                     feasible;}
d141 2
a142 2
   public static AttSpec <Integer>   focusHorizon ()
      {   return                     focusHorizon;}
d144 2
a145 2
   public static AttSpec <double[]>  focusShortageVol ()
      {   return                     focusShortageVol;}
d147 2
a148 2
   public static AttSpec <Boolean>   forcedMultiEq ()
      {   return                     forcedMultiEq;}
d150 2
a151 2
   public static AttSpec <double[]>  fssExecVol ()
      {   return                     fssExecVol;}
d153 2
a154 2
   public static AttSpec <double[]>  fssSubVol ()
      {   return                     fssSubVol;}
d156 2
a157 2
   public static AttSpec <Boolean>   heurAllocActive ()
      {   return                     heurAllocActive;}
d159 2
a160 2
   public static AttSpec <Boolean>   highPrecisionWD ()
      {   return                     highPrecisionWD;}
d162 2
a163 2
   public static AttSpec <int[]>     impactPeriod ()
      {   return                     impactPeriod;}
d165 2
a166 2
   public static AttSpec <double[]>  incLotSize ()
      {   return                     incLotSize;}
d168 2
a169 2
   public static AttSpec <double[]>  incLotSize2 ()
      {   return                     incLotSize2;}
d171 2
a172 2
   public static AttSpec <Boolean>   independentOffsets ()
      {   return                     independentOffsets;}
d174 2
a175 2
   public static AttSpec <Boolean>   intExecVols ()
      {   return                     intExecVols;}
d177 2
a178 2
   public static AttSpec <Boolean>   intShipVols ()
      {   return                     intShipVols;}
d180 2
a181 2
   public static AttSpec <Boolean>   intSubVols ()
      {   return                     intSubVols;}
d183 2
a184 2
   public static AttSpec <Integer>   latestPeriod ()
      {   return                     latestPeriod;}
d186 2
a187 2
   public static AttSpec <double[]>  lotSize2Thresh ()
      {   return                     lotSize2Thresh;}
d189 2
a190 2
   public static AttSpec <Double>    lotSizeTol ()
      {   return                     lotSizeTol;}
d192 2
a193 2
   public static AttSpec <Boolean>   mandEC ()
      {   return                     mandEC;}
d195 2
a196 2
   public static AttSpec <double[]>  minLotSize ()
      {   return                     minLotSize;}
d198 2
a199 2
   public static AttSpec <double[]>  minLotSize2 ()
      {   return                     minLotSize2;}
d201 2
a202 2
   public static AttSpec <Boolean>   minimalExcess ()
      {   return                     minimalExcess;}
d204 2
a205 2
   public static AttSpec <Boolean>   mipMode ()
      {   return                     mipMode;}
d207 2
a208 2
   public static AttSpec <double[]>  mrpConsVol ()
      {   return                     mrpConsVol;}
d210 2
a211 2
   public static AttSpec <double[]>  mrpExcessVol ()
      {   return                     mrpExcessVol;}
d213 2
a214 2
   public static AttSpec <double[]>  mrpExecVol ()
      {   return                     mrpExecVol;}
d216 2
a217 2
   public static AttSpec <Boolean>   mrpNetAllowed ()
      {   return                     mrpNetAllowed;}
d219 2
a220 2
   public static AttSpec <double[]>  mrpResidualVol ()
      {   return                     mrpResidualVol;}
d222 2
a223 2
   public static AttSpec <double[]>  mrpSubVol ()
      {   return                     mrpSubVol;}
d225 2
a226 2
   public static AttSpec <Boolean>   multiExec ()
      {   return                     multiExec;}
d228 2
a229 2
   public static AttSpec <Boolean>   multiRoute ()
      {   return                     multiRoute;}
d231 2
a232 2
   public static AttSpec <Integer>   nPeriods ()
      {   return                     nPeriods;}
d234 2
a235 2
   public static AttSpec <Integer>   nScenarios ()
      {   return                     nScenarios;}
d237 2
a238 2
   public static AttSpec <Boolean>   netAllowed ()
      {   return                     netAllowed;}
d240 2
a241 2
   public static AttSpec <Boolean>   nstnResidual ()
      {   return                     nstnResidual;}
d243 2
a244 2
   public static AttSpec <Double>    objValue ()
      {   return                     objValue;}
d246 2
a247 2
   public static AttSpec <Integer>   objectStage ()
      {   return                     objectStage;}
d249 2
a250 2
   public static AttSpec <double[]>  offset ()
      {   return                     offset;}
d252 2
a253 2
   public static AttSpec <String>    operationName ()
      {   return                     operationName;}
d255 2
a256 2
   public static AttSpec <String>    partName ()
      {   return                     partName;}
d258 2
a259 2
   public static AttSpec <Boolean>   penExec ()
      {   return                     penExec;}
d261 2
a262 2
   public static AttSpec <Boolean>   perfPegging ()
      {   return                     perfPegging;}
d264 2
a265 2
   public static AttSpec <int[]>     periodStage ()
      {   return                     periodStage;}
d267 2
a268 2
   public static AttSpec <Boolean>   pgdCritListMode ()
      {   return                     pgdCritListMode;}
d270 2
a271 2
   public static AttSpec <Boolean>   pipExists ()
      {   return                     pipExists;}
d273 2
a274 2
   public static AttSpec <Boolean>   pipSeqFromHeur ()
      {   return                     pipSeqFromHeur;}
d276 2
a277 2
   public static AttSpec <Boolean>   postprocessed ()
      {   return                     postprocessed;}
d279 2
a280 2
   public static AttSpec <Boolean>   prefHighStockSLBs ()
      {   return                     prefHighStockSLBs;}
d282 2
a283 2
   public static AttSpec <Boolean>   preprocessed ()
      {   return                     preprocessed;}
d285 2
a286 2
   public static AttSpec <int[]>     priority ()
      {   return                     priority;}
d288 2
a289 2
   public static AttSpec <Double>    probability ()
      {   return                     probability;}
d291 2
a292 2
   public static AttSpec <double[]>  prodVol ()
      {   return                     prodVol;}
d294 2
a295 2
   public static AttSpec <double[]>  productRate ()
      {   return                     productRate;}
d297 2
a298 2
   public static AttSpec <boolean[]> propRtg ()
      {   return                     propRtg;}
d300 2
a301 2
   public static AttSpec <double[]>  reqVol ()
      {   return                     reqVol;}
d303 2
a304 2
   public static AttSpec <double[]>  residualVol ()
      {   return                     residualVol;}
d306 2
a307 2
   public static AttSpec <Boolean>   respectStockSLBs ()
      {   return                     respectStockSLBs;}
d309 2
a310 2
   public static AttSpec <Boolean>   roundReqVols ()
      {   return                     roundReqVols;}
d312 2
a313 2
   public static AttSpec <double[]>  routingShare ()
      {   return                     routingShare;}
d315 2
a316 2
   public static AttSpec <Boolean>   scrapAllowed ()
      {   return                     scrapAllowed;}
d318 2
a319 2
   public static AttSpec <double[]>  scrapCost ()
      {   return                     scrapCost;}
d321 2
a322 2
   public static AttSpec <double[]>  scrapVol ()
      {   return                     scrapVol;}
d324 2
a325 2
   public static AttSpec <Double>    searchInc ()
      {   return                     searchInc;}
d327 2
a328 2
   public static AttSpec <Boolean>   selForDel ()
      {   return                     selForDel;}
d330 2
a331 2
   public static AttSpec <Boolean>   selSplit ()
      {   return                     selSplit;}
d333 2
a334 2
   public static AttSpec <double[]>  shadowPrice ()
      {   return                     shadowPrice;}
d336 2
a337 2
   public static AttSpec <Boolean>   shipLateAllowed ()
      {   return                     shipLateAllowed;}
d339 2
a340 2
   public static AttSpec <int[]>     shipLateUB ()
      {   return                     shipLateUB;}
d342 2
a343 2
   public static AttSpec <double[]>  shipReward ()
      {   return                     shipReward;}
d345 2
a346 2
   public static AttSpec <double[]>  shipVol ()
      {   return                     shipVol;}
d348 2
a349 2
   public static AttSpec <Boolean>   singleSource ()
      {   return                     singleSource;}
d351 2
a352 2
   public static AttSpec <Boolean>   skipFailures ()
      {   return                     skipFailures;}
d354 2
a355 2
   public static AttSpec <String>    solverLogFileName ()
      {   return                     solverLogFileName;}
d357 2
a358 2
   public static AttSpec <Boolean>   stageByObject ()
      {   return                     stageByObject;}
d360 2
a361 2
   public static AttSpec <Boolean>   stochMode ()
      {   return                     stochMode;}
d363 2
a364 2
   public static AttSpec <Boolean>   stochSolnMode ()
      {   return                     stochSolnMode;}
d366 2
a367 2
   public static AttSpec <double[]>  stockCost ()
      {   return                     stockCost;}
d369 2
a370 2
   public static AttSpec <Boolean>   stockReallocation ()
      {   return                     stockReallocation;}
d372 2
a373 2
   public static AttSpec <double[]>  stockVol ()
      {   return                     stockVol;}
d375 2
a376 2
   public static AttSpec <double[]>  subCost ()
      {   return                     subCost;}
d378 2
a379 2
   public static AttSpec <double[]>  subVol ()
      {   return                     subVol;}
d381 2
a382 2
   public static AttSpec <double[]>  supplyVol ()
      {   return                     supplyVol;}
d384 2
a385 2
   public static AttSpec <Boolean>   tieBreakPropRt ()
      {   return                     tieBreakPropRt;}
d387 2
a388 2
   public static AttSpec <String>    title ()
      {   return                     title;}
d390 2
a391 2
   public static AttSpec <Boolean>   truncOffsets ()
      {   return                     truncOffsets;}
d393 2
a394 2
   public static AttSpec <Boolean>   twoLevelLotSizes ()
      {   return                     twoLevelLotSizes;}
d396 2
a397 2
   public static AttSpec <Boolean>   twoWayMultiExec ()
      {   return                     twoWayMultiExec;}
d399 2
a400 2
   public static AttSpec <Boolean>   useFocusHorizons ()
      {   return                     useFocusHorizons;}
d402 2
a403 2
   public static AttSpec <Boolean>   userHeurStart ()
      {   return                     userHeurStart;}
d405 2
a406 2
   public static AttSpec <Double>    wbounds ()
      {   return                     wbounds;}
d408 5
a412 2
   public static AttSpec <double[]>  yieldRate ()
      {   return                     yieldRate;}
d420 123
a542 122
   private static AttSpec <Boolean>   accAfterOptImp;
   private static AttSpec <Boolean>   accAfterSoftLB;
   private static AttSpec <Boolean>   accelerated;
   private static AttSpec <Boolean>   asapPipOrder;
   private static AttSpec <Boolean>   autoPriority;
   private static AttSpec <Double>    boundsValue;
   private static AttSpec <int[]>     buildAheadUB;
   private static AttSpec <Boolean>   buildAsap;
   private static AttSpec <Boolean>   buildNstn;
   private static AttSpec <Boolean>   compPrices;
   private static AttSpec <Boolean>   computeCriticalList;
   private static AttSpec <double[]>  consRate;
   private static AttSpec <double[]>  consVol;
   private static AttSpec <double[]>  cumShipReward;
   private static AttSpec <Integer>   currentScenario;
   private static AttSpec <String>    demandName;
   private static AttSpec <double[]>  demandVol;
   private static AttSpec <Integer>   earliestPeriod;
   private static AttSpec <Integer>   equitability;
   private static AttSpec <double[]>  excessVol;
   private static AttSpec <double[]>  execCost;
   private static AttSpec <Boolean>   execEmptyBom;
   private static AttSpec <Double>    execPenalty;
   private static AttSpec <double[]>  execVol;
   private static AttSpec <boolean[]> executable;
   private static AttSpec <Boolean>   expAllowed;
   private static AttSpec <Double>    expAversion;
   private static AttSpec <Double>    expCutoff;
   private static AttSpec <Double>    expNetAversion;
   private static AttSpec <Boolean>   extOptActive;
   private static AttSpec <Double>    falloutRate;
   private static AttSpec <Boolean>   feasible;
   private static AttSpec <Integer>   focusHorizon;
   private static AttSpec <double[]>  focusShortageVol;
   private static AttSpec <Boolean>   forcedMultiEq;
   private static AttSpec <double[]>  fssExecVol;
   private static AttSpec <double[]>  fssSubVol;
   private static AttSpec <Boolean>   heurAllocActive;
   private static AttSpec <Boolean>   highPrecisionWD;
   private static AttSpec <int[]>     impactPeriod;
   private static AttSpec <double[]>  incLotSize;
   private static AttSpec <double[]>  incLotSize2;
   private static AttSpec <Boolean>   independentOffsets;
   private static AttSpec <Boolean>   intExecVols;
   private static AttSpec <Boolean>   intShipVols;
   private static AttSpec <Boolean>   intSubVols;
   private static AttSpec <Integer>   latestPeriod;
   private static AttSpec <double[]>  lotSize2Thresh;
   private static AttSpec <Double>    lotSizeTol;
   private static AttSpec <Boolean>   mandEC;
   private static AttSpec <double[]>  minLotSize;
   private static AttSpec <double[]>  minLotSize2;
   private static AttSpec <Boolean>   minimalExcess;
   private static AttSpec <Boolean>   mipMode;
   private static AttSpec <double[]>  mrpConsVol;
   private static AttSpec <double[]>  mrpExcessVol;
   private static AttSpec <double[]>  mrpExecVol;
   private static AttSpec <Boolean>   mrpNetAllowed;
   private static AttSpec <double[]>  mrpResidualVol;
   private static AttSpec <double[]>  mrpSubVol;
   private static AttSpec <Boolean>   multiExec;
   private static AttSpec <Boolean>   multiRoute;
   private static AttSpec <Integer>   nPeriods;
   private static AttSpec <Integer>   nScenarios;
   private static AttSpec <Boolean>   netAllowed;
   private static AttSpec <Boolean>   nstnResidual;
   private static AttSpec <Double>    objValue;
   private static AttSpec <Integer>   objectStage;
   private static AttSpec <double[]>  offset;
   private static AttSpec <String>    operationName;
   private static AttSpec <String>    partName;
   private static AttSpec <Boolean>   penExec;
   private static AttSpec <Boolean>   perfPegging;
   private static AttSpec <int[]>     periodStage;
   private static AttSpec <Boolean>   pgdCritListMode;
   private static AttSpec <Boolean>   pipExists;
   private static AttSpec <Boolean>   pipSeqFromHeur;
   private static AttSpec <Boolean>   postprocessed;
   private static AttSpec <Boolean>   prefHighStockSLBs;
   private static AttSpec <Boolean>   preprocessed;
   private static AttSpec <int[]>     priority;
   private static AttSpec <Double>    probability;
   private static AttSpec <double[]>  prodVol;
   private static AttSpec <double[]>  productRate;
   private static AttSpec <boolean[]> propRtg;
   private static AttSpec <double[]>  reqVol;
   private static AttSpec <double[]>  residualVol;
   private static AttSpec <Boolean>   respectStockSLBs;
   private static AttSpec <Boolean>   roundReqVols;
   private static AttSpec <double[]>  routingShare;
   private static AttSpec <Boolean>   scrapAllowed;
   private static AttSpec <double[]>  scrapCost;
   private static AttSpec <double[]>  scrapVol;
   private static AttSpec <Double>    searchInc;
   private static AttSpec <Boolean>   selForDel;
   private static AttSpec <Boolean>   selSplit;
   private static AttSpec <double[]>  shadowPrice;
   private static AttSpec <Boolean>   shipLateAllowed;
   private static AttSpec <int[]>     shipLateUB;
   private static AttSpec <double[]>  shipReward;
   private static AttSpec <double[]>  shipVol;
   private static AttSpec <Boolean>   singleSource;
   private static AttSpec <Boolean>   skipFailures;
   private static AttSpec <String>    solverLogFileName;
   private static AttSpec <Boolean>   stageByObject;
   private static AttSpec <Boolean>   stochMode;
   private static AttSpec <Boolean>   stochSolnMode;
   private static AttSpec <double[]>  stockCost;
   private static AttSpec <Boolean>   stockReallocation;
   private static AttSpec <double[]>  stockVol;
   private static AttSpec <double[]>  subCost;
   private static AttSpec <double[]>  subVol;
   private static AttSpec <double[]>  supplyVol;
   private static AttSpec <Boolean>   tieBreakPropRt;
   private static AttSpec <String>    title;
   private static AttSpec <Boolean>   truncOffsets;
   private static AttSpec <Boolean>   twoLevelLotSizes;
   private static AttSpec <Boolean>   twoWayMultiExec;
   private static AttSpec <Boolean>   useFocusHorizons;
   private static AttSpec <Boolean>   userHeurStart;
   private static AttSpec <Double>    wbounds;
   private static AttSpec <double[]>  yieldRate;
d782 6
a787 1
   private static AttSpec <Boolean>   factory1 (String theName)
d789 1
a789 1
      return new  AttSpec <Boolean>   (theName, boolean.class);
d792 1
a792 1
   private static AttSpec <Integer>   factory2 (String theName)
d794 1
a794 1
      return new  AttSpec <Integer>   (theName, int.class);
d797 1
a797 1
   private static AttSpec <Double>    factory3 (String theName)
d799 1
a799 1
      return new  AttSpec <Double>    (theName, double.class);
d802 1
a802 1
   private static AttSpec <String>    factory4 (String theName)
d804 1
a804 1
      return new  AttSpec <String>    (theName, String.class);
d807 1
a807 1
   private static AttSpec <boolean[]> factory5 (String theName)
d809 1
a809 1
      return new  AttSpec <boolean[]> (theName, boolean[].class);
d812 1
a812 1
   private static AttSpec <int[]>     factory6 (String theName)
d814 1
a814 1
      return new  AttSpec <int[]>     (theName, int[].class);
d817 1
a817 1
   private static AttSpec <double[]>  factory7 (String theName)
d819 1
a819 1
      return new  AttSpec <double[]>  (theName, double[].class);
@


1.26
log
@"operationName" attribute.
@
text
@d90 3
d432 1
@


1.25
log
@"partName" attribute.
@
text
@d249 3
d482 1
@


1.24
log
@"solverLogFileName" attribute.
@
text
@d249 3
d479 1
@


1.23
log
@Attributes.
@
text
@d345 3
d508 1
@


1.22
log
@Attributes.
@
text
@d401 1
a621 39
// Static factory methods
//------------------------------------------------------------------------------

   static        AttSpec <Boolean>   makeBoolSpec    (String theName)
      {
      return new AttSpec <Boolean>   (theName, boolean.class);
      }

   static        AttSpec <Integer>   makeIntSpec     (String theName)
      {
      return new AttSpec <Integer>   (theName, int.class);
      }

   static        AttSpec <Double>    makeDblSpec     (String theName)
      {
      return new AttSpec <Double>    (theName, double.class);
      }

   static        AttSpec <String>    makeStringSpec  (String theName)
      {
      return new AttSpec <String>    (theName, String.class);
      }

   static        AttSpec <boolean[]> makeBoolVecSpec (String theName)
      {
      return new AttSpec <boolean[]> (theName, boolean[].class);
      }

   static        AttSpec <int[]>     makeIntVecSpec  (String theName)
      {
      return new AttSpec <int[]>     (theName, int[].class);
      }

   static        AttSpec <double[]>  makeDblVecSpec  (String theName)
      {
      return new AttSpec <double[]>  (theName, double[].class);
      }

//------------------------------------------------------------------------------
d672 6
d682 5
a686 4
      Type   theFieldType;
      Method theFacMeth;
      String theAttName;
      Object theObject;
d690 2
d696 1
a696 14
            theFacMeth   = null;

            for (Method theMethod: AttSpec.class.getDeclaredMethods ())
               {
               if (! theMethod.getName ().substring (0, 4).equals ("make"))
                  continue;

               if (theMethod.getGenericReturnType ().equals (theFieldType))
                  {
                  theFacMeth = theMethod;

                  break;
                  }
               }
d701 1
a701 1
            theAttName = theField.getName ();
d703 1
a703 1
            theObject  = theFacMeth.invoke (null, theAttName);
d707 1
a707 1
            theField.set (null, theObject);
d721 77
@


1.21
log
@Added "title" attribute (set only).
@
text
@d24 1
a24 1
// it's a primitive type.
d36 1
a36 12
//       AttSpec <Boolean>
//          AttSpec.BoolSpec
//       AttSpec <Integer>
//          AttSpec.IntSpec
//       AttSpec <Double>
//          AttSpec.DblSpec
//       AttSpec <boolean[]>
//          AttSpec.BoolVecSpec
//       AttSpec <int[]>
//          AttSpec.IntVecSpec
//       AttSpec <double[]>
//          AttSpec.DblVecSpec
d39 1
a39 1
public abstract class AttSpec <RefType> extends PublicObject
d621 39
a709 3
//
// Constructs and all AttSpecs that are to exist in WIT-J and stores a reference
// to each in the appropriate static field.
d714 4
a717 2
      Type      theFieldType;
      Class <?> theSubClass;
d725 1
a725 1
            theSubClass  = null;
d727 1
a727 1
            for (Class <?> theClass: AttSpec.class.getDeclaredClasses ())
d729 4
a732 1
               if (theClass.getGenericSuperclass ().equals (theFieldType))
d734 1
a734 1
                  theSubClass = theClass;
d740 10
a749 2
            if (theSubClass != null)
               buildOneInstance (theField, theSubClass);
a762 34
// buildOneInstance (theField, theSubClass)
//
// Arguments:
//    theField:    Identifies a static field of this class of type
//                 AttSpec <RefType> for some RefType.
//    theSubClass: Identifies the non-generic subclass of AttSpec <RefType>.
//
// Constructs a new instance of the non-generic subclass, and assigns the static
// field to it.
//------------------------------------------------------------------------------

   private static void buildOneInstance (
         Field     theField,
         Class <?> theSubClass)
            throws Exception
      {
      Constructor theCtor;
      String      theAttName;
      AttSpec <?> theAttSpec;

      theCtor    = theSubClass.getDeclaredConstructor (String.class);

      theCtor.setAccessible (true);

      theAttName = theField.getName ();

      theAttSpec = (AttSpec <?>) theCtor.newInstance (theAttName);

      theField.setAccessible (true);

      theField.set (null, theAttSpec);
      }

//------------------------------------------------------------------------------
a844 77
// Private Static Nested Classes
//==============================================================================

//------------------------------------------------------------------------------
// Each of these nested classes extends class AttSpec and represents WIT
// attributes of a single value type.
//------------------------------------------------------------------------------

   private static final class BoolSpec    extends AttSpec <Boolean>
   {
   BoolSpec (String theName)
      {
      super (theName, boolean.class);
      }
   }

//------------------------------------------------------------------------------

   private static final class IntSpec     extends AttSpec <Integer>
   {
   IntSpec (String theName)
      {
      super (theName, int.class);
      }
   }

//------------------------------------------------------------------------------

   private static final class DblSpec     extends AttSpec <Double>
   {
   DblSpec (String theName)
      {
      super (theName, double.class);
      }
   }

//------------------------------------------------------------------------------

   private static final class StringSpec  extends AttSpec <String>
   {
   StringSpec (String theName)
      {
      super (theName, String.class);
      }
   }

//------------------------------------------------------------------------------

   private static final class BoolVecSpec extends AttSpec <boolean[]>
   {
   BoolVecSpec (String theName)
      {
      super (theName, boolean[].class);
      }
   }

//------------------------------------------------------------------------------

   private static final class IntVecSpec  extends AttSpec <int[]>
   {
   IntVecSpec (String theName)
      {
      super (theName, int[].class);
      }
   }

//------------------------------------------------------------------------------

   private static final class DblVecSpec  extends AttSpec <double[]>
   {
   DblVecSpec (String theName)
      {
      super (theName, double[].class);
      }
   }

//==============================================================================
@


1.20
log
@Added attributes:
   objValue
   bpundsValue
@
text
@d386 3
d525 1
d739 1
a739 1
         throws    Exception
d879 10
@


1.19
log
@Removed enum AttID.
@
text
@d71 3
d251 3
d417 1
d477 1
@


1.18
log
@Attributes.
@
text
@d28 2
a29 2
//   AttID          Value Type   RefType
//   -----          ----------   -------
d567 1
a567 2
      theAttRep =
         theComp.getProbCoord ().getAttRepMgr ().getAttRepFor (myAttID);
d588 1
a588 1
         theProblem.getProbCoord ().getAttRepMgr ().getAttRepFor (myAttID);
d612 1
a612 1
      return myAttID.toString ();
d620 11
a645 5
   final AttID getAttID ()
      {
      return myAttID;
      }

a657 1
      myAttID     = AttID.valueOf (theName);
d746 34
a792 8
// myAttID
//
// The AttID for this AttSpec.
//------------------------------------------------------------------------------

   private final AttID myAttID;

//------------------------------------------------------------------------------
a825 2

      AttID.findAttSpecs ();
@


1.17
log
@Attributes.
@
text
@d53 1
a53 1
// Public Methods
a55 4
//------------------------------------------------------------------------------
// AttSpec Accessors
//------------------------------------------------------------------------------

d57 1
a57 3
      {
      return                         accAfterOptImp;
      }
d60 1
a60 3
      {
      return                         accAfterSoftLB;
      }
d63 1
a63 3
      {
      return                         accelerated;
      }
d66 1
a66 3
      {
      return                         asapPipOrder;
      }
d69 1
a69 3
      {
      return                         autoPriority;
      }
d72 1
a72 3
      {
      return                         buildAheadUB;
      }
d75 1
a75 3
      {
      return                         buildAsap;
      }
d78 1
a78 3
      {
      return                         buildNstn;
      }
d81 1
a81 3
      {
      return                         compPrices;
      }
d84 1
a84 3
      {
      return                         computeCriticalList;
      }
d87 1
a87 3
      {
      return                         consRate;
      }
d90 1
a90 3
      {
      return                         consVol;
      }
d93 1
a93 3
      {
      return                         cumShipReward;
      }
d96 1
a96 3
      {
      return                         currentScenario;
      }
d99 1
a99 3
      {
      return                         demandVol;
      }
d102 1
a102 3
      {
      return                         earliestPeriod;
      }
d105 1
a105 3
      {
      return                         equitability;
      }
d108 1
a108 3
      {
      return                         excessVol;
      }
d111 1
a111 3
      {
      return                         execCost;
      }
d114 1
a114 3
      {
      return                         execEmptyBom;
      }
d117 1
a117 3
      {
      return                         execPenalty;
      }
d120 1
a120 3
      {
      return                         execVol;
      }
d123 1
a123 3
      {
      return                         executable;
      }
d126 1
a126 3
      {
      return                         expAllowed;
      }
d129 1
a129 3
      {
      return                         expAversion;
      }
d132 1
a132 3
      {
      return                         expCutoff;
      }
d135 1
a135 3
      {
      return                         expNetAversion;
      }
d138 1
a138 3
      {
      return                         extOptActive;
      }
d141 1
a141 3
      {
      return                         falloutRate;
      }
d144 1
a144 3
      {
      return                         feasible;
      }
d147 1
a147 3
      {
      return                         focusHorizon;
      }
d150 1
a150 3
      {
      return                         focusShortageVol;
      }
d153 1
a153 3
      {
      return                         forcedMultiEq;
      }
d156 1
a156 3
      {
      return                         fssExecVol;
      }
d159 1
a159 3
      {
      return                         fssSubVol;
      }
d162 1
a162 3
      {
      return                         heurAllocActive;
      }
d165 1
a165 3
      {
      return                         highPrecisionWD;
      }
d168 1
a168 3
      {
      return                         impactPeriod;
      }
d171 1
a171 3
      {
      return                         incLotSize;
      }
d174 1
a174 3
      {
      return                         incLotSize2;
      }
d177 1
a177 3
      {
      return                         independentOffsets;
      }
d180 1
a180 3
      {
      return                         intExecVols;
      }
d183 1
a183 3
      {
      return                         intShipVols;
      }
d186 1
a186 3
      {
      return                         intSubVols;
      }
d189 1
a189 3
      {
      return                         latestPeriod;
      }
d192 1
a192 3
      {
      return                         lotSize2Thresh;
      }
d195 1
a195 3
      {
      return                         lotSizeTol;
      }
d198 1
a198 3
      {
      return                         mandEC;
      }
d201 1
a201 3
      {
      return                         minLotSize;
      }
d204 1
a204 3
      {
      return                         minLotSize2;
      }
d207 1
a207 3
      {
      return                         minimalExcess;
      }
d210 1
a210 3
      {
      return                         mipMode;
      }
d213 1
a213 3
      {
      return                         mrpConsVol;
      }
d216 1
a216 3
      {
      return                         mrpExcessVol;
      }
d219 1
a219 3
      {
      return                         mrpExecVol;
      }
d222 1
a222 3
      {
      return                         mrpNetAllowed;
      }
d225 1
a225 3
      {
      return                         mrpResidualVol;
      }
d228 1
a228 3
      {
      return                         mrpSubVol;
      }
d231 1
a231 3
      {
      return                         multiExec;
      }
d234 1
a234 3
      {
      return                         multiRoute;
      }
d237 1
a237 3
      {
      return                         nPeriods;
      }
d240 1
a240 3
      {
      return                         nScenarios;
      }
d243 1
a243 3
      {
      return                         netAllowed;
      }
d246 1
a246 3
      {
      return                         nstnResidual;
      }
d249 1
a249 3
      {
      return                         objectStage;
      }
d252 1
a252 3
      {
      return                         offset;
      }
d255 1
a255 3
      {
      return                         penExec;
      }
d258 1
a258 3
      {
      return                         perfPegging;
      }
d261 1
a261 3
      {
      return                         periodStage;
      }
d264 1
a264 3
      {
      return                         pgdCritListMode;
      }
d267 1
a267 3
      {
      return                         pipExists;
      }
d270 1
a270 3
      {
      return                         pipSeqFromHeur;
      }
d273 1
a273 3
      {
      return                         postprocessed;
      }
d276 1
a276 3
      {
      return                         prefHighStockSLBs;
      }
d279 1
a279 3
      {
      return                         preprocessed;
      }
d282 1
a282 3
      {
      return                         priority;
      }
d285 1
a285 3
      {
      return                         probability;
      }
d288 1
a288 3
      {
      return                         prodVol;
      }
d291 1
a291 3
      {
      return                         productRate;
      }
d294 1
a294 3
      {
      return                         propRtg;
      }
d297 1
a297 3
      {
      return                         reqVol;
      }
d300 1
a300 3
      {
      return                         residualVol;
      }
d303 1
a303 3
      {
      return                         respectStockSLBs;
      }
d306 1
a306 3
      {
      return                         roundReqVols;
      }
d309 1
a309 3
      {
      return                         routingShare;
      }
d312 1
a312 3
      {
      return                         scrapAllowed;
      }
d315 1
a315 3
      {
      return                         scrapCost;
      }
d318 1
a318 3
      {
      return                         scrapVol;
      }
d321 1
a321 3
      {
      return                         searchInc;
      }
d324 1
a324 3
      {
      return                         selForDel;
      }
d327 1
a327 3
      {
      return                         selSplit;
      }
d330 1
a330 3
      {
      return                         shadowPrice;
      }
d333 1
a333 3
      {
      return                         shipLateAllowed;
      }
d336 1
a336 3
      {
      return                         shipLateUB;
      }
d339 1
a339 3
      {
      return                         shipReward;
      }
d342 1
a342 3
      {
      return                         shipVol;
      }
d345 1
a345 3
      {
      return                         singleSource;
      }
d348 1
a348 3
      {
      return                         skipFailures;
      }
d351 1
a351 3
      {
      return                         stageByObject;
      }
d354 1
a354 3
      {
      return                         stochMode;
      }
d357 1
a357 3
      {
      return                         stochSolnMode;
      }
d360 1
a360 3
      {
      return                         stockCost;
      }
d363 1
a363 3
      {
      return                         stockReallocation;
      }
d366 1
a366 3
      {
      return                         stockVol;
      }
d369 1
a369 3
      {
      return                         subCost;
      }
d372 1
a372 3
      {
      return                         subVol;
      }
d375 1
a375 3
      {
      return                         supplyVol;
      }
d378 1
a378 3
      {
      return                         tieBreakPropRt;
      }
d381 1
a381 3
      {
      return                         truncOffsets;
      }
d384 1
a384 3
      {
      return                         twoLevelLotSizes;
      }
d387 1
a387 3
      {
      return                         twoWayMultiExec;
      }
d390 1
a390 3
      {
      return                         useFocusHorizons;
      }
d393 1
a393 3
      {
      return                         userHeurStart;
      }
d396 1
a396 3
      {
      return                         wbounds;
      }
d399 126
a524 3
      {
      return                         yieldRate;
      }
d743 1
a743 1
// Private Fields
a746 121
// AttSpec instances.
// The following are the only AttSpecs that are ever created in WIT-J:
//------------------------------------------------------------------------------

   private static AttSpec <Boolean>   accAfterOptImp;
   private static AttSpec <Boolean>   accAfterSoftLB;
   private static AttSpec <Boolean>   accelerated;
   private static AttSpec <Boolean>   asapPipOrder;
   private static AttSpec <Boolean>   autoPriority;
   private static AttSpec <int[]>     buildAheadUB;
   private static AttSpec <Boolean>   buildAsap;
   private static AttSpec <Boolean>   buildNstn;
   private static AttSpec <Boolean>   compPrices;
   private static AttSpec <Boolean>   computeCriticalList;
   private static AttSpec <double[]>  consRate;
   private static AttSpec <double[]>  consVol;
   private static AttSpec <double[]>  cumShipReward;
   private static AttSpec <Integer>   currentScenario;
   private static AttSpec <double[]>  demandVol;
   private static AttSpec <Integer>   earliestPeriod;
   private static AttSpec <Integer>   equitability;
   private static AttSpec <double[]>  excessVol;
   private static AttSpec <double[]>  execCost;
   private static AttSpec <Boolean>   execEmptyBom;
   private static AttSpec <Double>    execPenalty;
   private static AttSpec <double[]>  execVol;
   private static AttSpec <boolean[]> executable;
   private static AttSpec <Boolean>   expAllowed;
   private static AttSpec <Double>    expAversion;
   private static AttSpec <Double>    expCutoff;
   private static AttSpec <Double>    expNetAversion;
   private static AttSpec <Boolean>   extOptActive;
   private static AttSpec <Double>    falloutRate;
   private static AttSpec <Boolean>   feasible;
   private static AttSpec <Integer>   focusHorizon;
   private static AttSpec <double[]>  focusShortageVol;
   private static AttSpec <Boolean>   forcedMultiEq;
   private static AttSpec <double[]>  fssExecVol;
   private static AttSpec <double[]>  fssSubVol;
   private static AttSpec <Boolean>   heurAllocActive;
   private static AttSpec <Boolean>   highPrecisionWD;
   private static AttSpec <int[]>     impactPeriod;
   private static AttSpec <double[]>  incLotSize;
   private static AttSpec <double[]>  incLotSize2;
   private static AttSpec <Boolean>   independentOffsets;
   private static AttSpec <Boolean>   intExecVols;
   private static AttSpec <Boolean>   intShipVols;
   private static AttSpec <Boolean>   intSubVols;
   private static AttSpec <Integer>   latestPeriod;
   private static AttSpec <double[]>  lotSize2Thresh;
   private static AttSpec <Double>    lotSizeTol;
   private static AttSpec <Boolean>   mandEC;
   private static AttSpec <double[]>  minLotSize;
   private static AttSpec <double[]>  minLotSize2;
   private static AttSpec <Boolean>   minimalExcess;
   private static AttSpec <Boolean>   mipMode;
   private static AttSpec <double[]>  mrpConsVol;
   private static AttSpec <double[]>  mrpExcessVol;
   private static AttSpec <double[]>  mrpExecVol;
   private static AttSpec <Boolean>   mrpNetAllowed;
   private static AttSpec <double[]>  mrpResidualVol;
   private static AttSpec <double[]>  mrpSubVol;
   private static AttSpec <Boolean>   multiExec;
   private static AttSpec <Boolean>   multiRoute;
   private static AttSpec <Integer>   nPeriods;
   private static AttSpec <Integer>   nScenarios;
   private static AttSpec <Boolean>   netAllowed;
   private static AttSpec <Boolean>   nstnResidual;
   private static AttSpec <Integer>   objectStage;
   private static AttSpec <double[]>  offset;
   private static AttSpec <Boolean>   penExec;
   private static AttSpec <Boolean>   perfPegging;
   private static AttSpec <int[]>     periodStage;
   private static AttSpec <Boolean>   pgdCritListMode;
   private static AttSpec <Boolean>   pipExists;
   private static AttSpec <Boolean>   pipSeqFromHeur;
   private static AttSpec <Boolean>   postprocessed;
   private static AttSpec <Boolean>   prefHighStockSLBs;
   private static AttSpec <Boolean>   preprocessed;
   private static AttSpec <int[]>     priority;
   private static AttSpec <Double>    probability;
   private static AttSpec <double[]>  prodVol;
   private static AttSpec <double[]>  productRate;
   private static AttSpec <boolean[]> propRtg;
   private static AttSpec <double[]>  reqVol;
   private static AttSpec <double[]>  residualVol;
   private static AttSpec <Boolean>   respectStockSLBs;
   private static AttSpec <Boolean>   roundReqVols;
   private static AttSpec <double[]>  routingShare;
   private static AttSpec <Boolean>   scrapAllowed;
   private static AttSpec <double[]>  scrapCost;
   private static AttSpec <double[]>  scrapVol;
   private static AttSpec <Double>    searchInc;
   private static AttSpec <Boolean>   selForDel;
   private static AttSpec <Boolean>   selSplit;
   private static AttSpec <double[]>  shadowPrice;
   private static AttSpec <Boolean>   shipLateAllowed;
   private static AttSpec <int[]>     shipLateUB;
   private static AttSpec <double[]>  shipReward;
   private static AttSpec <double[]>  shipVol;
   private static AttSpec <Boolean>   singleSource;
   private static AttSpec <Boolean>   skipFailures;
   private static AttSpec <Boolean>   stageByObject;
   private static AttSpec <Boolean>   stochMode;
   private static AttSpec <Boolean>   stochSolnMode;
   private static AttSpec <double[]>  stockCost;
   private static AttSpec <Boolean>   stockReallocation;
   private static AttSpec <double[]>  stockVol;
   private static AttSpec <double[]>  subCost;
   private static AttSpec <double[]>  subVol;
   private static AttSpec <double[]>  supplyVol;
   private static AttSpec <Boolean>   tieBreakPropRt;
   private static AttSpec <Boolean>   truncOffsets;
   private static AttSpec <Boolean>   twoLevelLotSizes;
   private static AttSpec <Boolean>   twoWayMultiExec;
   private static AttSpec <Boolean>   useFocusHorizons;
   private static AttSpec <Boolean>   userHeurStart;
   private static AttSpec <Double>    wbounds;
   private static AttSpec <double[]>  yieldRate;

//------------------------------------------------------------------------------
@


1.16
log
@Attributes.
@
text
@d636 3
a638 1
// Accessors
d643 7
a649 1
      return values;
d711 1
a711 1
      return myAttID.hashCode ();
d750 5
d759 1
a759 1
   private AttSpec (AttID theAttID, Class <?> theValueType)
d761 2
a762 1
      myAttID     = theAttID;
d764 3
d780 1
a780 1
   private static AttSpec <?>[] buildInstances ()
d782 2
a783 7
      ArrayList <AttSpec <?>> theAttSpecs;
      Type                    theFieldType;
      Class <?>               theSubClass;
      AttSpec <?>             theAttSpec;
      AttSpec <?>[]           theAttSpecAr;

      theAttSpecs = new ArrayList <AttSpec <?>> ();
d803 2
a804 6
            if (theSubClass == null)
               continue;

            theAttSpec = buildOneInstance (theField, theSubClass);

            theAttSpecs.add (theAttSpec);
a814 6

      theAttSpecAr = new AttSpec <?>[theAttSpecs.size ()];

      theAttSpecs.toArray (theAttSpecAr);

      return theAttSpecAr;
d825 2
a826 2
// Constructs a new instance of the non-generic subclass, assigns the static
// field to it, and returns it.
d829 1
a829 1
   private static AttSpec <?> buildOneInstance (
a835 1
      AttID       theAttID;
d838 1
a838 1
      theCtor    = theSubClass.getDeclaredConstructor (AttID.class);
d844 1
a844 3
      theAttID   = AttID.valueOf (theAttName);

      theAttSpec = (AttSpec <?>) theCtor.newInstance (theAttID);
a848 2

      return theAttSpec;
d977 1
a977 1
// values
d979 1
a979 1
// The set of all AttSpecs in WIT-J.
d982 1
a982 1
   private static final AttSpec <?>[] values;
d1000 17
d1023 3
a1025 1
      values = buildInstances ();
d1041 1
a1041 1
   BoolSpec (AttID theAttID)
d1043 1
a1043 1
      super (theAttID, boolean.class);
d1051 1
a1051 1
   IntSpec (AttID theAttID)
d1053 1
a1053 1
      super (theAttID, int.class);
d1061 1
a1061 1
   DblSpec (AttID theAttID)
d1063 1
a1063 1
      super (theAttID, double.class);
d1071 1
a1071 1
   BoolVecSpec (AttID theAttID)
d1073 1
a1073 1
      super (theAttID, boolean[].class);
d1081 1
a1081 1
   IntVecSpec (AttID theAttID)
d1083 1
a1083 1
      super (theAttID, int[].class);
d1091 1
a1091 1
   DblVecSpec (AttID theAttID)
d1093 1
a1093 1
      super (theAttID, double[].class);
@


1.15
log
@Added enum AccessStyle.
@
text
@a10 1
import static com.ibm.witj.AttID.*;
a20 1
// Each AttSpec corresponds to one AttID, which identifies it.
a57 4
//
// Each of these methods returns an AttSpec of the indicated subclass that
// represents the set of all WIT attributes whose name matches the name of the
// method.
d60 1
a60 1
   public static AttSpec <Boolean>     accAfterOptImp                    ()
d62 1
a62 1
      return             (BoolSpec)    accAfterOptImp     .getSpecObject ();
d65 1
a65 1
   public static AttSpec <Boolean>     accAfterSoftLB                    ()
d67 1
a67 1
      return             (BoolSpec)    accAfterSoftLB     .getSpecObject ();
d70 1
a70 1
   public static AttSpec <Boolean>     accelerated                       ()
d72 1
a72 1
      return             (BoolSpec)    accelerated        .getSpecObject ();
d75 1
a75 1
   public static AttSpec <Boolean>     asapPipOrder                      ()
d77 1
a77 1
      return             (BoolSpec)    asapPipOrder       .getSpecObject ();
d80 1
a80 1
   public static AttSpec <Boolean>     autoPriority                      ()
d82 1
a82 1
      return             (BoolSpec)    autoPriority       .getSpecObject ();
d85 1
a85 1
   public static AttSpec <int[]>       buildAheadUB                      ()
d87 1
a87 1
      return             (IntVecSpec)  buildAheadUB       .getSpecObject ();
d90 1
a90 1
   public static AttSpec <Boolean>     buildAsap                         ()
d92 1
a92 1
      return             (BoolSpec)    buildAsap          .getSpecObject ();
d95 1
a95 1
   public static AttSpec <Boolean>     buildNstn                         ()
d97 1
a97 1
      return             (BoolSpec)    buildNstn          .getSpecObject ();
d100 1
a100 1
   public static AttSpec <Boolean>     compPrices                        ()
d102 1
a102 1
      return             (BoolSpec)    compPrices         .getSpecObject ();
d105 1
a105 1
   public static AttSpec <Boolean>     computeCriticalList               ()
d107 1
a107 1
      return             (BoolSpec)    computeCriticalList.getSpecObject ();
d110 1
a110 1
   public static AttSpec <double[]>    consRate                          ()
d112 1
a112 1
      return             (DblVecSpec)  consRate           .getSpecObject ();
d115 1
a115 1
   public static AttSpec <double[]>    consVol                           ()
d117 1
a117 1
      return             (DblVecSpec)  consVol            .getSpecObject ();
d120 1
a120 1
   public static AttSpec <double[]>    cumShipReward                     ()
d122 1
a122 1
      return             (DblVecSpec)  cumShipReward      .getSpecObject ();
d125 1
a125 1
   public static AttSpec <Integer>     currentScenario                   ()
d127 1
a127 1
      return             (IntSpec)     currentScenario    .getSpecObject ();
d130 1
a130 1
   public static AttSpec <double[]>    demandVol                         ()
d132 1
a132 1
      return             (DblVecSpec)  demandVol          .getSpecObject ();
d135 1
a135 1
   public static AttSpec <Integer>     earliestPeriod                    ()
d137 1
a137 1
      return             (IntSpec)     earliestPeriod     .getSpecObject ();
d140 1
a140 1
   public static AttSpec <Integer>     equitability                      ()
d142 1
a142 1
      return             (IntSpec)     equitability       .getSpecObject ();
d145 1
a145 1
   public static AttSpec <double[]>    excessVol                         ()
d147 1
a147 1
      return             (DblVecSpec)  excessVol          .getSpecObject ();
d150 1
a150 1
   public static AttSpec <double[]>    execCost                          ()
d152 1
a152 1
      return             (DblVecSpec)  execCost           .getSpecObject ();
d155 1
a155 1
   public static AttSpec <Boolean>     execEmptyBom                      ()
d157 1
a157 1
      return             (BoolSpec)    execEmptyBom       .getSpecObject ();
d160 1
a160 1
   public static AttSpec <Double>      execPenalty                       ()
d162 1
a162 1
      return             (DblSpec)     execPenalty        .getSpecObject ();
d165 1
a165 1
   public static AttSpec <double[]>    execVol                           ()
d167 1
a167 1
      return             (DblVecSpec)  execVol            .getSpecObject ();
d170 1
a170 1
   public static AttSpec <boolean[]>   executable                        ()
d172 1
a172 1
      return             (BoolVecSpec) executable         .getSpecObject ();
d175 1
a175 1
   public static AttSpec <Boolean>     expAllowed                        ()
d177 1
a177 1
      return             (BoolSpec)    expAllowed         .getSpecObject ();
d180 1
a180 1
   public static AttSpec <Double>      expAversion                       ()
d182 1
a182 1
      return             (DblSpec)     expAversion        .getSpecObject ();
d185 1
a185 1
   public static AttSpec <Double>      expCutoff                         ()
d187 1
a187 1
      return             (DblSpec)     expCutoff          .getSpecObject ();
d190 1
a190 1
   public static AttSpec <Double>      expNetAversion                    ()
d192 1
a192 1
      return             (DblSpec)     expNetAversion     .getSpecObject ();
d195 1
a195 1
   public static AttSpec <Boolean>     extOptActive                      ()
d197 1
a197 1
      return             (BoolSpec)    extOptActive       .getSpecObject ();
d200 1
a200 1
   public static AttSpec <Double>      falloutRate                       ()
d202 1
a202 1
      return             (DblSpec)     falloutRate        .getSpecObject ();
d205 1
a205 1
   public static AttSpec <Boolean>     feasible                          ()
d207 1
a207 1
      return             (BoolSpec)    feasible           .getSpecObject ();
d210 1
a210 1
   public static AttSpec <Integer>     focusHorizon                      ()
d212 1
a212 1
      return             (IntSpec)     focusHorizon       .getSpecObject ();
d215 1
a215 1
   public static AttSpec <double[]>    focusShortageVol                  ()
d217 1
a217 1
      return             (DblVecSpec)  focusShortageVol   .getSpecObject ();
d220 1
a220 1
   public static AttSpec <Boolean>     forcedMultiEq                     ()
d222 1
a222 1
      return             (BoolSpec)    forcedMultiEq      .getSpecObject ();
d225 1
a225 1
   public static AttSpec <double[]>    fssExecVol                        ()
d227 1
a227 1
      return             (DblVecSpec)  fssExecVol         .getSpecObject ();
d230 1
a230 1
   public static AttSpec <double[]>    fssSubVol                         ()
d232 1
a232 1
      return             (DblVecSpec)  fssSubVol          .getSpecObject ();
d235 1
a235 1
   public static AttSpec <Boolean>     heurAllocActive                   ()
d237 1
a237 1
      return             (BoolSpec)    heurAllocActive    .getSpecObject ();
d240 1
a240 1
   public static AttSpec <Boolean>     highPrecisionWD                   ()
d242 1
a242 1
      return             (BoolSpec)    highPrecisionWD    .getSpecObject ();
d245 1
a245 1
   public static AttSpec <int[]>       impactPeriod                      ()
d247 1
a247 1
      return             (IntVecSpec)  impactPeriod       .getSpecObject ();
d250 1
a250 1
   public static AttSpec <double[]>    incLotSize                        ()
d252 1
a252 1
      return             (DblVecSpec)  incLotSize         .getSpecObject ();
d255 1
a255 1
   public static AttSpec <double[]>    incLotSize2                       ()
d257 1
a257 1
      return             (DblVecSpec)  incLotSize2        .getSpecObject ();
d260 1
a260 1
   public static AttSpec <Boolean>     independentOffsets                ()
d262 1
a262 1
      return             (BoolSpec)    independentOffsets .getSpecObject ();
d265 1
a265 1
   public static AttSpec <Boolean>     intExecVols                       ()
d267 1
a267 1
      return             (BoolSpec)    intExecVols        .getSpecObject ();
d270 1
a270 1
   public static AttSpec <Boolean>     intShipVols                       ()
d272 1
a272 1
      return             (BoolSpec)    intShipVols        .getSpecObject ();
d275 1
a275 1
   public static AttSpec <Boolean>     intSubVols                        ()
d277 1
a277 1
      return             (BoolSpec)    intSubVols         .getSpecObject ();
d280 1
a280 1
   public static AttSpec <Integer>     latestPeriod                      ()
d282 1
a282 1
      return             (IntSpec)     latestPeriod       .getSpecObject ();
d285 1
a285 1
   public static AttSpec <double[]>    lotSize2Thresh                    ()
d287 1
a287 1
      return             (DblVecSpec)  lotSize2Thresh     .getSpecObject ();
d290 1
a290 1
   public static AttSpec <Double>      lotSizeTol                        ()
d292 1
a292 1
      return             (DblSpec)     lotSizeTol         .getSpecObject ();
d295 1
a295 1
   public static AttSpec <Boolean>     mandEC                            ()
d297 1
a297 1
      return             (BoolSpec)    mandEC             .getSpecObject ();
d300 1
a300 1
   public static AttSpec <double[]>    minLotSize                        ()
d302 1
a302 1
      return             (DblVecSpec)  minLotSize         .getSpecObject ();
d305 1
a305 1
   public static AttSpec <double[]>    minLotSize2                       ()
d307 1
a307 1
      return             (DblVecSpec)  minLotSize2        .getSpecObject ();
d310 1
a310 1
   public static AttSpec <Boolean>     minimalExcess                     ()
d312 1
a312 1
      return             (BoolSpec)    minimalExcess      .getSpecObject ();
d315 1
a315 1
   public static AttSpec <Boolean>     mipMode                           ()
d317 1
a317 1
      return             (BoolSpec)    mipMode            .getSpecObject ();
d320 1
a320 1
   public static AttSpec <double[]>    mrpConsVol                        ()
d322 1
a322 1
      return             (DblVecSpec)  mrpConsVol         .getSpecObject ();
d325 1
a325 1
   public static AttSpec <double[]>    mrpExcessVol                      ()
d327 1
a327 1
      return             (DblVecSpec)  mrpExcessVol       .getSpecObject ();
d330 1
a330 1
   public static AttSpec <double[]>    mrpExecVol                        ()
d332 1
a332 1
      return             (DblVecSpec)  mrpExecVol         .getSpecObject ();
d335 1
a335 1
   public static AttSpec <Boolean>     mrpNetAllowed                     ()
d337 1
a337 1
      return             (BoolSpec)    mrpNetAllowed      .getSpecObject ();
d340 1
a340 1
   public static AttSpec <double[]>    mrpResidualVol                    ()
d342 1
a342 1
      return             (DblVecSpec)  mrpResidualVol     .getSpecObject ();
d345 1
a345 1
   public static AttSpec <double[]>    mrpSubVol                         ()
d347 1
a347 1
      return             (DblVecSpec)  mrpSubVol          .getSpecObject ();
d350 1
a350 1
   public static AttSpec <Boolean>     multiExec                         ()
d352 1
a352 1
      return             (BoolSpec)    multiExec          .getSpecObject ();
d355 1
a355 1
   public static AttSpec <Boolean>     multiRoute                        ()
d357 1
a357 1
      return             (BoolSpec)    multiRoute         .getSpecObject ();
d360 1
a360 1
   public static AttSpec <Integer>     nPeriods                          ()
d362 1
a362 1
      return             (IntSpec)     nPeriods           .getSpecObject ();
d365 1
a365 1
   public static AttSpec <Integer>     nScenarios                        ()
d367 1
a367 1
      return             (IntSpec)     nScenarios         .getSpecObject ();
d370 1
a370 1
   public static AttSpec <Boolean>     netAllowed                        ()
d372 1
a372 1
      return             (BoolSpec)    netAllowed         .getSpecObject ();
d375 1
a375 1
   public static AttSpec <Boolean>     nstnResidual                      ()
d377 1
a377 1
      return             (BoolSpec)    nstnResidual       .getSpecObject ();
d380 1
a380 1
   public static AttSpec <Integer>     objectStage                       ()
d382 1
a382 1
      return             (IntSpec)     objectStage        .getSpecObject ();
d385 1
a385 1
   public static AttSpec <double[]>    offset                            ()
d387 1
a387 1
      return             (DblVecSpec)  offset             .getSpecObject ();
d390 1
a390 1
   public static AttSpec <Boolean>     penExec                           ()
d392 1
a392 1
      return             (BoolSpec)    penExec            .getSpecObject ();
d395 1
a395 1
   public static AttSpec <Boolean>     perfPegging                       ()
d397 1
a397 1
      return             (BoolSpec)    perfPegging        .getSpecObject ();
d400 1
a400 1
   public static AttSpec <int[]>       periodStage                       ()
d402 1
a402 1
      return             (IntVecSpec)  periodStage        .getSpecObject ();
d405 1
a405 1
   public static AttSpec <Boolean>     pgdCritListMode                   ()
d407 1
a407 1
      return             (BoolSpec)    pgdCritListMode    .getSpecObject ();
d410 1
a410 1
   public static AttSpec <Boolean>     pipExists                         ()
d412 1
a412 1
      return             (BoolSpec)    pipExists          .getSpecObject ();
d415 1
a415 1
   public static AttSpec <Boolean>     pipSeqFromHeur                    ()
d417 1
a417 1
      return             (BoolSpec)    pipSeqFromHeur     .getSpecObject ();
d420 1
a420 1
   public static AttSpec <Boolean>     postprocessed                     ()
d422 1
a422 1
      return             (BoolSpec)    postprocessed      .getSpecObject ();
d425 1
a425 1
   public static AttSpec <Boolean>     prefHighStockSLBs                 ()
d427 1
a427 1
      return             (BoolSpec)    prefHighStockSLBs  .getSpecObject ();
d430 1
a430 1
   public static AttSpec <Boolean>     preprocessed                      ()
d432 1
a432 1
      return             (BoolSpec)    preprocessed       .getSpecObject ();
d435 1
a435 1
   public static AttSpec <int[]>       priority                          ()
d437 1
a437 1
      return             (IntVecSpec)  priority           .getSpecObject ();
d440 1
a440 1
   public static AttSpec <Double>      probability                       ()
d442 1
a442 1
      return             (DblSpec)     probability        .getSpecObject ();
d445 1
a445 1
   public static AttSpec <double[]>    prodVol                           ()
d447 1
a447 1
      return             (DblVecSpec)  prodVol            .getSpecObject ();
d450 1
a450 1
   public static AttSpec <double[]>    productRate                       ()
d452 1
a452 1
      return             (DblVecSpec)  productRate        .getSpecObject ();
d455 1
a455 1
   public static AttSpec <boolean[]>   propRtg                           ()
d457 1
a457 1
      return             (BoolVecSpec) propRtg            .getSpecObject ();
d460 1
a460 1
   public static AttSpec <double[]>    reqVol                            ()
d462 1
a462 1
      return             (DblVecSpec)  reqVol             .getSpecObject ();
d465 1
a465 1
   public static AttSpec <double[]>    residualVol                       ()
d467 1
a467 1
      return             (DblVecSpec)  residualVol        .getSpecObject ();
d470 1
a470 1
   public static AttSpec <Boolean>     respectStockSLBs                  ()
d472 1
a472 1
      return             (BoolSpec)    respectStockSLBs   .getSpecObject ();
d475 1
a475 1
   public static AttSpec <Boolean>     roundReqVols                      ()
d477 1
a477 1
      return             (BoolSpec)    roundReqVols       .getSpecObject ();
d480 1
a480 1
   public static AttSpec <double[]>    routingShare                      ()
d482 1
a482 1
      return             (DblVecSpec)  routingShare       .getSpecObject ();
d485 1
a485 1
   public static AttSpec <Boolean>     scrapAllowed                      ()
d487 1
a487 1
      return             (BoolSpec)    scrapAllowed       .getSpecObject ();
d490 1
a490 1
   public static AttSpec <double[]>    scrapCost                         ()
d492 1
a492 1
      return             (DblVecSpec)  scrapCost          .getSpecObject ();
d495 1
a495 1
   public static AttSpec <double[]>    scrapVol                          ()
d497 1
a497 1
      return             (DblVecSpec)  scrapVol           .getSpecObject ();
d500 1
a500 1
   public static AttSpec <Double>      searchInc                         ()
d502 1
a502 1
      return             (DblSpec)     searchInc          .getSpecObject ();
d505 1
a505 1
   public static AttSpec <Boolean>     selForDel                         ()
d507 1
a507 1
      return             (BoolSpec)    selForDel          .getSpecObject ();
d510 1
a510 1
   public static AttSpec <Boolean>     selSplit                          ()
d512 1
a512 1
      return             (BoolSpec)    selSplit           .getSpecObject ();
d515 1
a515 1
   public static AttSpec <double[]>    shadowPrice                       ()
d517 1
a517 1
      return             (DblVecSpec)  shadowPrice        .getSpecObject ();
d520 1
a520 1
   public static AttSpec <Boolean>     shipLateAllowed                   ()
d522 1
a522 1
      return             (BoolSpec)    shipLateAllowed    .getSpecObject ();
d525 1
a525 1
   public static AttSpec <int[]>       shipLateUB                        ()
d527 1
a527 1
      return             (IntVecSpec)  shipLateUB         .getSpecObject ();
d530 1
a530 1
   public static AttSpec <double[]>    shipReward                        ()
d532 1
a532 1
      return             (DblVecSpec)  shipReward         .getSpecObject ();
d535 1
a535 1
   public static AttSpec <double[]>    shipVol                           ()
d537 1
a537 1
      return             (DblVecSpec)  shipVol            .getSpecObject ();
d540 1
a540 1
   public static AttSpec <Boolean>     singleSource                      ()
d542 1
a542 1
      return             (BoolSpec)    singleSource       .getSpecObject ();
d545 1
a545 1
   public static AttSpec <Boolean>     skipFailures                      ()
d547 1
a547 1
      return             (BoolSpec)    skipFailures       .getSpecObject ();
d550 1
a550 1
   public static AttSpec <Boolean>     stageByObject                     ()
d552 1
a552 1
      return             (BoolSpec)    stageByObject      .getSpecObject ();
d555 1
a555 1
   public static AttSpec <Boolean>     stochMode                         ()
d557 1
a557 1
      return             (BoolSpec)    stochMode          .getSpecObject ();
d560 1
a560 1
   public static AttSpec <Boolean>     stochSolnMode                     ()
d562 1
a562 1
      return             (BoolSpec)    stochSolnMode      .getSpecObject ();
d565 1
a565 1
   public static AttSpec <double[]>    stockCost                         ()
d567 1
a567 1
      return             (DblVecSpec)  stockCost          .getSpecObject ();
d570 1
a570 1
   public static AttSpec <Boolean>     stockReallocation                 ()
d572 1
a572 1
      return             (BoolSpec)    stockReallocation  .getSpecObject ();
d575 1
a575 1
   public static AttSpec <double[]>    stockVol                          ()
d577 1
a577 1
      return             (DblVecSpec)  stockVol           .getSpecObject ();
d580 1
a580 1
   public static AttSpec <double[]>    subCost                           ()
d582 1
a582 1
      return             (DblVecSpec)  subCost            .getSpecObject ();
d585 1
a585 1
   public static AttSpec <double[]>    subVol                            ()
d587 1
a587 1
      return             (DblVecSpec)  subVol             .getSpecObject ();
d590 1
a590 1
   public static AttSpec <double[]>    supplyVol                         ()
d592 1
a592 1
      return             (DblVecSpec)  supplyVol          .getSpecObject ();
d595 1
a595 1
   public static AttSpec <Boolean>     tieBreakPropRt                    ()
d597 1
a597 1
      return             (BoolSpec)    tieBreakPropRt     .getSpecObject ();
d600 1
a600 1
   public static AttSpec <Boolean>     truncOffsets                      ()
d602 1
a602 1
      return             (BoolSpec)    truncOffsets       .getSpecObject ();
d605 1
a605 1
   public static AttSpec <Boolean>     twoLevelLotSizes                  ()
d607 1
a607 1
      return             (BoolSpec)    twoLevelLotSizes   .getSpecObject ();
d610 1
a610 1
   public static AttSpec <Boolean>     twoWayMultiExec                   ()
d612 1
a612 1
      return             (BoolSpec)    twoWayMultiExec    .getSpecObject ();
d615 1
a615 1
   public static AttSpec <Boolean>     useFocusHorizons                  ()
d617 1
a617 1
      return             (BoolSpec)    useFocusHorizons   .getSpecObject ();
d620 1
a620 1
   public static AttSpec <Boolean>     userHeurStart                     ()
d622 1
a622 1
      return             (BoolSpec)    userHeurStart      .getSpecObject ();
d625 1
a625 1
   public static AttSpec <Double>      wbounds                           ()
d627 1
a627 1
      return             (DblSpec)     wbounds            .getSpecObject ();
d630 1
a630 1
   public static AttSpec <double[]>    yieldRate                         ()
d632 1
a632 1
      return             (DblVecSpec)  yieldRate          .getSpecObject ();
d636 1
a636 3
// values ()
//
// Returns an array listing all of the AttSpecs in WIT-J.
d641 1
a641 14
      AttID[]       theAttIDs;
      AttSpec <?>[] theAttSpecs;
      int           theIdx;

      theAttIDs   = AttID.values ();

      theAttSpecs = new AttSpec <?>[theAttIDs.length];

      for (theIdx = 0; theIdx < theAttIDs.length; theIdx ++)
         {
         theAttSpecs[theIdx] = theAttIDs[theIdx].getAttSpec ();
         }

      return theAttSpecs;
d717 4
d733 19
d753 1
a753 1
// Package-Internal Methods
d757 1
a757 1
// makeInstance (theAttID)
d759 2
a760 2
// Creates and returns a new AttSpec of that is to be owned by theAttID and
// belongs to the appropriate subclass.
d763 1
a763 1
   static AttSpec <?> makeInstance (AttID theAttID)
d765 8
d775 3
a777 6
         String      theAttName;
         Method      theAttAccessor;
         Type        theAttType;
         Class <?>   theAttClass;
         Constructor theCtor;
         AttSpec <?> theAttSpec;
d779 1
a779 1
         theAttName     = theAttID.toString ();
d781 1
a781 9
         theAttAccessor = AttSpec.class.getDeclaredMethod (theAttName);

         theAttType     = theAttAccessor.getGenericReturnType ();

         theAttClass    = null;

         for (Class <?> theClass: AttSpec.class.getDeclaredClasses ())
            {
            if (theClass.getGenericSuperclass ().equals (theAttType))
d783 3
a785 1
               theAttClass = theClass;
d787 2
a788 1
               break;
a789 1
            }
d791 2
a792 1
         assert (theAttClass != null);
d794 1
a794 1
         theCtor    = theAttClass.getDeclaredConstructor (AttID.class);
d796 2
a797 3
         theAttSpec = (AttSpec <?>) theCtor.newInstance (theAttID);

         return theAttSpec;
d802 7
a808 1
         handleMakeInstExc (theAttID, theExc);
d810 3
a812 2
         return null;
         }
d816 6
a821 1
// handleMakeInstExc (theAttID, theExc)
d823 2
a824 1
// Handles any exception, theExc, thrown in makeInstance (theAttID).
d827 4
a830 1
   private static void handleMakeInstExc (AttID theAttID, Exception theExc)
d832 8
a839 4
      try
         {
         throw theExc;
         }
d841 1
a841 8
      catch (NoSuchMethodException theExc2)
         {
         intAbortWmsg (
            "   An AttID was found that does not correspond "
          +    "to any AttSpec accessor method.\n"
          + "\n"
          + "      AttID: " + theAttID);
         }
d843 1
a843 9
      catch (Exception theExc2)
         {
         intAbortWmsg (
            "   An exception was thrown in AttSpec.makeInstance (...):\n"
          + "\n"
          + "      AttID:     " + theAttID + "\n"
          + "      Exception: " + theExc2);
         }
      }
d845 1
a845 3
//------------------------------------------------------------------------------
// Accessors
//------------------------------------------------------------------------------
d847 1
a847 4
   final AttID getAttID ()
      {
      return myAttID;
      }
d849 1
a849 3
//==============================================================================
// Private Constructors
//==============================================================================
d851 1
a851 4
   private AttSpec (AttID theAttID, Class <?> theValueType)
      {
      myAttID     = theAttID;
      myValueType = theValueType;
d859 129
d990 1
a990 1
// The AttID identifies this AttSpec.
d998 1
a998 2
// The value type of this AttSpec, i.e., the type of value stored by the
// attributes represented by this AttSpec.
d1004 11
@


1.14
log
@Customized Attributes.
@
text
@d713 1
a713 1
      return theAttRep.isAnInputAtt ();
@


1.13
log
@Attributes.
@
text
@d366 5
@


1.12
log
@Replaced use of raw AttSpec with AttSpec <?>.
@
text
@d66 1
a66 1
   public static AttSpec <Boolean>         accAfterOptImp ()
d68 1
a68 1
      return  getAttSpec (Boolean  .class, accAfterOptImp);
d71 1
a71 1
   public static AttSpec <Boolean>         accAfterSoftLB ()
d73 1
a73 1
      return  getAttSpec (Boolean  .class, accAfterSoftLB);
d76 1
a76 1
   public static AttSpec <Boolean>         accelerated ()
d78 1
a78 1
      return  getAttSpec (Boolean  .class, accelerated);
d81 1
a81 1
   public static AttSpec <Boolean>         asapPipOrder ()
d83 1
a83 1
      return  getAttSpec (Boolean  .class, asapPipOrder);
d86 1
a86 1
   public static AttSpec <Boolean>         autoPriority ()
d88 1
a88 1
      return  getAttSpec (Boolean  .class, autoPriority);
d91 1
a91 1
   public static AttSpec <int[]>           buildAheadUB ()
d93 1
a93 1
      return  getAttSpec (int[]    .class, buildAheadUB);
d96 1
a96 1
   public static AttSpec <Boolean>         buildAsap ()
d98 1
a98 1
      return  getAttSpec (Boolean  .class, buildAsap);
d101 1
a101 1
   public static AttSpec <Boolean>         buildNstn ()
d103 1
a103 1
      return  getAttSpec (Boolean  .class, buildNstn);
d106 1
a106 1
   public static AttSpec <Boolean>         compPrices ()
d108 1
a108 1
      return  getAttSpec (Boolean  .class, compPrices);
d111 1
a111 1
   public static AttSpec <Boolean>         computeCriticalList ()
d113 1
a113 1
      return  getAttSpec (Boolean  .class, computeCriticalList);
d116 1
a116 1
   public static AttSpec <double[]>        consRate ()
d118 1
a118 1
      return  getAttSpec (double[] .class, consRate);
d121 1
a121 1
   public static AttSpec <double[]>        consVol ()
d123 1
a123 1
      return  getAttSpec (double[] .class, consVol);
d126 1
a126 1
   public static AttSpec <double[]>        cumShipReward ()
d128 1
a128 1
      return  getAttSpec (double[] .class, cumShipReward);
d131 1
a131 1
   public static AttSpec <Integer>         currentScenario ()
d133 1
a133 1
      return  getAttSpec (Integer  .class, currentScenario);
d136 1
a136 1
   public static AttSpec <double[]>        demandVol ()
d138 1
a138 1
      return  getAttSpec (double[] .class, demandVol);
d141 1
a141 1
   public static AttSpec <Integer>         earliestPeriod ()
d143 1
a143 1
      return  getAttSpec (Integer  .class, earliestPeriod);
d146 1
a146 1
   public static AttSpec <Integer>         equitability ()
d148 1
a148 1
      return  getAttSpec (Integer  .class, equitability);
d151 1
a151 1
   public static AttSpec <double[]>        excessVol ()
d153 1
a153 1
      return  getAttSpec (double[] .class, excessVol);
d156 1
a156 1
   public static AttSpec <double[]>        execCost ()
d158 1
a158 1
      return  getAttSpec (double[] .class, execCost);
d161 1
a161 1
   public static AttSpec <Boolean>         execEmptyBom ()
d163 1
a163 1
      return  getAttSpec (Boolean  .class, execEmptyBom);
d166 1
a166 1
   public static AttSpec <Double>          execPenalty ()
d168 1
a168 1
      return  getAttSpec (Double   .class, execPenalty);
d171 1
a171 1
   public static AttSpec <double[]>        execVol ()
d173 1
a173 1
      return  getAttSpec (double[] .class, execVol);
d176 1
a176 1
   public static AttSpec <boolean[]>       executable ()
d178 1
a178 1
      return  getAttSpec (boolean[].class, executable);
d181 1
a181 1
   public static AttSpec <Boolean>         expAllowed ()
d183 1
a183 1
      return  getAttSpec (Boolean  .class, expAllowed);
d186 1
a186 1
   public static AttSpec <Double>          expAversion ()
d188 1
a188 1
      return  getAttSpec (Double   .class, expAversion);
d191 1
a191 1
   public static AttSpec <Double>          expCutoff ()
d193 1
a193 1
      return  getAttSpec (Double   .class, expCutoff);
d196 1
a196 1
   public static AttSpec <Double>          expNetAversion ()
d198 1
a198 1
      return  getAttSpec (Double   .class, expNetAversion);
d201 1
a201 1
   public static AttSpec <Boolean>         extOptActive ()
d203 1
a203 1
      return  getAttSpec (Boolean  .class, extOptActive);
d206 1
a206 1
   public static AttSpec <Double>          falloutRate ()
d208 1
a208 1
      return  getAttSpec (Double   .class, falloutRate);
d211 1
a211 1
   public static AttSpec <Boolean>         feasible ()
d213 1
a213 1
      return  getAttSpec (Boolean  .class, feasible);
d216 1
a216 1
   public static AttSpec <Integer>         focusHorizon ()
d218 1
a218 1
      return  getAttSpec (Integer  .class, focusHorizon);
d221 1
a221 1
   public static AttSpec <double[]>        focusShortageVol ()
d223 1
a223 1
      return  getAttSpec (double[] .class, focusShortageVol);
d226 1
a226 1
   public static AttSpec <Boolean>         forcedMultiEq ()
d228 1
a228 1
      return  getAttSpec (Boolean  .class, forcedMultiEq);
d231 1
a231 1
   public static AttSpec <double[]>        fssExecVol ()
d233 1
a233 1
      return  getAttSpec (double[] .class, fssExecVol);
d236 1
a236 1
   public static AttSpec <double[]>        fssSubVol ()
d238 1
a238 1
      return  getAttSpec (double[] .class, fssSubVol);
d241 1
a241 1
   public static AttSpec <Boolean>         heurAllocActive ()
d243 1
a243 1
      return  getAttSpec (Boolean  .class, heurAllocActive);
d246 1
a246 1
   public static AttSpec <Boolean>         highPrecisionWD ()
d248 1
a248 1
      return  getAttSpec (Boolean  .class, highPrecisionWD);
d251 1
a251 1
   public static AttSpec <int[]>           impactPeriod ()
d253 1
a253 1
      return  getAttSpec (int[]    .class, impactPeriod);
d256 1
a256 1
   public static AttSpec <double[]>        incLotSize ()
d258 1
a258 1
      return  getAttSpec (double[] .class, incLotSize);
d261 1
a261 1
   public static AttSpec <double[]>        incLotSize2 ()
d263 1
a263 1
      return  getAttSpec (double[] .class, incLotSize2);
d266 1
a266 1
   public static AttSpec <Boolean>         independentOffsets ()
d268 1
a268 1
      return  getAttSpec (Boolean  .class, independentOffsets);
d271 1
a271 1
   public static AttSpec <Boolean>         intExecVols ()
d273 1
a273 1
      return  getAttSpec (Boolean  .class, intExecVols);
d276 1
a276 1
   public static AttSpec <Boolean>         intShipVols ()
d278 1
a278 1
      return  getAttSpec (Boolean  .class, intShipVols);
d281 1
a281 1
   public static AttSpec <Boolean>         intSubVols ()
d283 1
a283 1
      return  getAttSpec (Boolean  .class, intSubVols);
d286 1
a286 1
   public static AttSpec <Integer>         latestPeriod ()
d288 1
a288 1
      return  getAttSpec (Integer  .class, latestPeriod);
d291 1
a291 1
   public static AttSpec <double[]>        lotSize2Thresh ()
d293 1
a293 1
      return  getAttSpec (double[] .class, lotSize2Thresh);
d296 1
a296 1
   public static AttSpec <Double>          lotSizeTol ()
d298 1
a298 1
      return  getAttSpec (Double   .class, lotSizeTol);
d301 1
a301 1
   public static AttSpec <Boolean>         mandEC ()
d303 1
a303 1
      return  getAttSpec (Boolean  .class, mandEC);
d306 1
a306 1
   public static AttSpec <double[]>        minLotSize ()
d308 1
a308 1
      return  getAttSpec (double[] .class, minLotSize);
d311 1
a311 1
   public static AttSpec <double[]>        minLotSize2 ()
d313 1
a313 1
      return  getAttSpec (double[] .class, minLotSize2);
d316 1
a316 1
   public static AttSpec <Boolean>         minimalExcess ()
d318 1
a318 1
      return  getAttSpec (Boolean  .class, minimalExcess);
d321 1
a321 1
   public static AttSpec <Boolean>         mipMode ()
d323 1
a323 1
      return  getAttSpec (Boolean  .class, mipMode);
d326 1
a326 1
   public static AttSpec <double[]>        mrpConsVol ()
d328 1
a328 1
      return  getAttSpec (double[] .class, mrpConsVol);
d331 1
a331 1
   public static AttSpec <double[]>        mrpExcessVol ()
d333 1
a333 1
      return  getAttSpec (double[] .class, mrpExcessVol);
d336 1
a336 1
   public static AttSpec <double[]>        mrpExecVol ()
d338 1
a338 1
      return  getAttSpec (double[] .class, mrpExecVol);
d341 1
a341 1
   public static AttSpec <Boolean>         mrpNetAllowed ()
d343 1
a343 1
      return  getAttSpec (Boolean  .class, mrpNetAllowed);
d346 1
a346 1
   public static AttSpec <double[]>        mrpResidualVol ()
d348 1
a348 1
      return  getAttSpec (double[] .class, mrpResidualVol);
d351 1
a351 1
   public static AttSpec <double[]>        mrpSubVol ()
d353 1
a353 1
      return  getAttSpec (double[] .class, mrpSubVol);
d356 1
a356 1
   public static AttSpec <Boolean>         multiExec ()
d358 1
a358 1
      return  getAttSpec (Boolean  .class, multiExec);
d361 1
a361 1
   public static AttSpec <Boolean>         multiRoute ()
d363 1
a363 1
      return  getAttSpec (Boolean  .class, multiRoute);
d366 1
a366 1
   public static AttSpec <Integer>         nScenarios ()
d368 1
a368 1
      return  getAttSpec (Integer  .class, nScenarios);
d371 1
a371 1
   public static AttSpec <Boolean>         netAllowed ()
d373 1
a373 1
      return  getAttSpec (Boolean  .class, netAllowed);
d376 1
a376 1
   public static AttSpec <Boolean>         nstnResidual ()
d378 1
a378 1
      return  getAttSpec (Boolean  .class, nstnResidual);
d381 1
a381 1
   public static AttSpec <Integer>         objectStage ()
d383 1
a383 1
      return  getAttSpec (Integer  .class, objectStage);
d386 1
a386 1
   public static AttSpec <double[]>        offset ()
d388 1
a388 1
      return  getAttSpec (double[] .class, offset);
d391 1
a391 1
   public static AttSpec <Boolean>         penExec ()
d393 1
a393 1
      return  getAttSpec (Boolean  .class, penExec);
d396 1
a396 1
   public static AttSpec <Boolean>         perfPegging ()
d398 1
a398 1
      return  getAttSpec (Boolean  .class, perfPegging);
d401 1
a401 1
   public static AttSpec <int[]>           periodStage ()
d403 1
a403 1
      return  getAttSpec (int[]    .class, periodStage);
d406 1
a406 1
   public static AttSpec <Boolean>         pgdCritListMode ()
d408 1
a408 1
      return  getAttSpec (Boolean  .class, pgdCritListMode);
d411 1
a411 1
   public static AttSpec <Boolean>         pipExists ()
d413 1
a413 1
      return  getAttSpec (Boolean  .class, pipExists);
d416 1
a416 1
   public static AttSpec <Boolean>         pipSeqFromHeur ()
d418 1
a418 1
      return  getAttSpec (Boolean  .class, pipSeqFromHeur);
d421 1
a421 1
   public static AttSpec <Boolean>         postprocessed ()
d423 1
a423 1
      return  getAttSpec (Boolean  .class, postprocessed);
d426 1
a426 1
   public static AttSpec <Boolean>         prefHighStockSLBs ()
d428 1
a428 1
      return  getAttSpec (Boolean  .class, prefHighStockSLBs);
d431 1
a431 1
   public static AttSpec <Boolean>         preprocessed ()
d433 1
a433 1
      return  getAttSpec (Boolean  .class, preprocessed);
d436 1
a436 1
   public static AttSpec <int[]>           priority ()
d438 1
a438 1
      return  getAttSpec (int[]    .class, priority);
d441 1
a441 1
   public static AttSpec <Double>          probability ()
d443 1
a443 1
      return  getAttSpec (Double   .class, probability);
d446 1
a446 1
   public static AttSpec <double[]>        prodVol ()
d448 1
a448 1
      return  getAttSpec (double[] .class, prodVol);
d451 1
a451 1
   public static AttSpec <double[]>        productRate ()
d453 1
a453 1
      return  getAttSpec (double[] .class, productRate);
d456 1
a456 1
   public static AttSpec <boolean[]>       propRtg ()
d458 1
a458 1
      return  getAttSpec (boolean[].class, propRtg);
d461 1
a461 1
   public static AttSpec <double[]>        reqVol ()
d463 1
a463 1
      return  getAttSpec (double[] .class, reqVol);
d466 1
a466 1
   public static AttSpec <double[]>        residualVol ()
d468 1
a468 1
      return  getAttSpec (double[] .class, residualVol);
d471 1
a471 1
   public static AttSpec <Boolean>         respectStockSLBs ()
d473 1
a473 1
      return  getAttSpec (Boolean  .class, respectStockSLBs);
d476 1
a476 1
   public static AttSpec <Boolean>         roundReqVols ()
d478 1
a478 1
      return  getAttSpec (Boolean  .class, roundReqVols);
d481 1
a481 1
   public static AttSpec <double[]>        routingShare ()
d483 1
a483 1
      return  getAttSpec (double[] .class, routingShare);
d486 1
a486 1
   public static AttSpec <Boolean>         scrapAllowed ()
d488 1
a488 1
      return  getAttSpec (Boolean  .class, scrapAllowed);
d491 1
a491 1
   public static AttSpec <double[]>        scrapCost ()
d493 1
a493 1
      return  getAttSpec (double[] .class, scrapCost);
d496 1
a496 1
   public static AttSpec <double[]>        scrapVol ()
d498 1
a498 1
      return  getAttSpec (double[] .class, scrapVol);
d501 1
a501 1
   public static AttSpec <Double>          searchInc ()
d503 1
a503 1
      return  getAttSpec (Double   .class, searchInc);
d506 1
a506 1
   public static AttSpec <Boolean>         selForDel ()
d508 1
a508 1
      return  getAttSpec (Boolean  .class, selForDel);
d511 1
a511 1
   public static AttSpec <Boolean>         selSplit ()
d513 1
a513 1
      return  getAttSpec (Boolean  .class, selSplit);
d516 1
a516 1
   public static AttSpec <double[]>        shadowPrice ()
d518 1
a518 1
      return  getAttSpec (double[] .class, shadowPrice);
d521 1
a521 1
   public static AttSpec <Boolean>         shipLateAllowed ()
d523 1
a523 1
      return  getAttSpec (Boolean  .class, shipLateAllowed);
d526 1
a526 1
   public static AttSpec <int[]>           shipLateUB ()
d528 1
a528 1
      return  getAttSpec (int[]    .class, shipLateUB);
d531 1
a531 1
   public static AttSpec <double[]>        shipReward ()
d533 1
a533 1
      return  getAttSpec (double[] .class, shipReward);
d536 1
a536 1
   public static AttSpec <double[]>        shipVol ()
d538 1
a538 1
      return  getAttSpec (double[] .class, shipVol);
d541 1
a541 1
   public static AttSpec <Boolean>         singleSource ()
d543 1
a543 1
      return  getAttSpec (Boolean  .class, singleSource);
d546 1
a546 1
   public static AttSpec <Boolean>         skipFailures ()
d548 1
a548 1
      return  getAttSpec (Boolean  .class, skipFailures);
d551 1
a551 1
   public static AttSpec <Boolean>         stageByObject ()
d553 1
a553 1
      return  getAttSpec (Boolean  .class, stageByObject);
d556 1
a556 1
   public static AttSpec <Boolean>         stochMode ()
d558 1
a558 1
      return  getAttSpec (Boolean  .class, stochMode);
d561 1
a561 1
   public static AttSpec <Boolean>         stochSolnMode ()
d563 1
a563 1
      return  getAttSpec (Boolean  .class, stochSolnMode);
d566 1
a566 1
   public static AttSpec <double[]>        stockCost ()
d568 1
a568 1
      return  getAttSpec (double[] .class, stockCost);
d571 1
a571 1
   public static AttSpec <Boolean>         stockReallocation ()
d573 1
a573 1
      return  getAttSpec (Boolean  .class, stockReallocation);
d576 1
a576 1
   public static AttSpec <double[]>        stockVol ()
d578 1
a578 1
      return  getAttSpec (double[] .class, stockVol);
d581 1
a581 1
   public static AttSpec <double[]>        subCost ()
d583 1
a583 1
      return  getAttSpec (double[] .class, subCost);
d586 1
a586 1
   public static AttSpec <double[]>        subVol ()
d588 1
a588 1
      return  getAttSpec (double[] .class, subVol);
d591 1
a591 1
   public static AttSpec <double[]>        supplyVol ()
d593 1
a593 1
      return  getAttSpec (double[] .class, supplyVol);
d596 1
a596 1
   public static AttSpec <Boolean>         tieBreakPropRt ()
d598 1
a598 1
      return  getAttSpec (Boolean  .class, tieBreakPropRt);
d601 1
a601 1
   public static AttSpec <Boolean>         truncOffsets ()
d603 1
a603 1
      return  getAttSpec (Boolean  .class, truncOffsets);
d606 1
a606 1
   public static AttSpec <Boolean>         twoLevelLotSizes ()
d608 1
a608 1
      return  getAttSpec (Boolean  .class, twoLevelLotSizes);
d611 1
a611 1
   public static AttSpec <Boolean>         twoWayMultiExec ()
d613 1
a613 1
      return  getAttSpec (Boolean  .class, twoWayMultiExec);
d616 1
a616 1
   public static AttSpec <Boolean>         useFocusHorizons ()
d618 1
a618 1
      return  getAttSpec (Boolean  .class, useFocusHorizons);
d621 1
a621 1
   public static AttSpec <Boolean>         userHeurStart ()
d623 1
a623 1
      return  getAttSpec (Boolean  .class, userHeurStart);
d626 1
a626 1
   public static AttSpec <Double>          wbounds ()
d628 1
a628 1
      return  getAttSpec (Double   .class, wbounds);
d631 1
a631 1
   public static AttSpec <double[]>        yieldRate ()
d633 1
a633 1
      return  getAttSpec (double[] .class, yieldRate);
a843 54
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// getAttSpec (theClass, theAttID) methods
//
// Each of these methods returns the AttSpec corresponding to theAttID, cast
// as an instance of a subtype of AttSpec <RefType>, where theClass is of type
// Class <RefType>.
//------------------------------------------------------------------------------

   private static BoolSpec                   getAttSpec (
         Class <Boolean>            theClass,
         AttID                      theAttID)
      {
      return (BoolSpec)    (Object) theAttID.getAttSpec ();
      }

   private static IntSpec                    getAttSpec (
         Class <Integer>            theClass,
         AttID                      theAttID)
      {
      return (IntSpec)     (Object) theAttID.getAttSpec ();
      }

   private static DblSpec                    getAttSpec (
         Class <Double>             theClass,
         AttID                      theAttID)
      {
      return (DblSpec)     (Object) theAttID.getAttSpec ();
      }

   private static BoolVecSpec                getAttSpec (
         Class <boolean[]>          theClass,
         AttID                      theAttID)
      {
      return (BoolVecSpec) (Object) theAttID.getAttSpec ();
      }

   private static IntVecSpec                 getAttSpec (
         Class <int[]>              theClass,
         AttID                      theAttID)
      {
      return (IntVecSpec)  (Object) theAttID.getAttSpec ();
      }

   private static DblVecSpec                 getAttSpec (
         Class <double[]>           theClass,
         AttID                      theAttID)
      {
      return (DblVecSpec)  (Object) theAttID.getAttSpec ();
      }

//==============================================================================
@


1.11
log
@Attributes.
@
text
@d650 1
a650 1
      theAttSpecs = new AttSpec[theAttIDs.length];
d756 1
a756 1
   static AttSpec makeInstance (AttID theAttID)
d765 1
a765 1
         AttSpec     theAttSpec;
d789 1
a789 1
         theAttSpec = (AttSpec) theCtor.newInstance (theAttID);
d855 3
a857 3
   private static BoolSpec          getAttSpec (
         Class <Boolean>   theClass,
         AttID             theAttID)
d859 1
a859 1
      return (BoolSpec)    theAttID.getAttSpec ();
d862 3
a864 3
   private static IntSpec           getAttSpec (
         Class <Integer>   theClass,
         AttID             theAttID)
d866 1
a866 1
      return (IntSpec)     theAttID.getAttSpec ();
d869 3
a871 3
   private static DblSpec           getAttSpec (
         Class <Double>    theClass,
         AttID             theAttID)
d873 1
a873 1
      return (DblSpec)     theAttID.getAttSpec ();
d876 3
a878 3
   private static BoolVecSpec       getAttSpec (
         Class <boolean[]> theClass,
         AttID             theAttID)
d880 1
a880 1
      return (BoolVecSpec) theAttID.getAttSpec ();
d883 3
a885 3
   private static IntVecSpec        getAttSpec (
         Class <int[]>     theClass,
         AttID             theAttID)
d887 1
a887 1
      return (IntVecSpec)  theAttID.getAttSpec ();
d890 3
a892 3
   private static DblVecSpec        getAttSpec (
         Class <double[]>  theClass,
         AttID             theAttID)
d894 1
a894 1
      return (DblVecSpec)  theAttID.getAttSpec ();
@


1.10
log
@Attributes.
@
text
@d642 1
a642 1
   public static AttSpec[] values ()
d644 3
a646 3
      AttID[]   theAttIDs;
      AttSpec[] theAttSpecs;
      int       theIdx;
@


1.9
log
@Implemented Utility class.
@
text
@d66 1
a66 1
   public static AttSpec  <Boolean>         accAfterOptImp ()
d68 1
a68 1
      return  getAttSpec ((Boolean)   null, accAfterOptImp);
d71 1
a71 1
   public static AttSpec  <Boolean>         accAfterSoftLB ()
d73 1
a73 1
      return  getAttSpec ((Boolean)   null, accAfterSoftLB);
d76 1
a76 1
   public static AttSpec  <Boolean>         accelerated ()
d78 1
a78 1
      return  getAttSpec ((Boolean)   null, accelerated);
d81 1
a81 1
   public static AttSpec  <Boolean>         asapPipOrder ()
d83 1
a83 1
      return  getAttSpec ((Boolean)   null, asapPipOrder);
d86 1
a86 1
   public static AttSpec  <Boolean>         autoPriority ()
d88 1
a88 1
      return  getAttSpec ((Boolean)   null, autoPriority);
d91 1
a91 1
   public static AttSpec  <int[]>           buildAheadUB ()
d93 1
a93 1
      return  getAttSpec ((int[])     null, buildAheadUB);
d96 1
a96 1
   public static AttSpec  <Boolean>         buildAsap ()
d98 1
a98 1
      return  getAttSpec ((Boolean)   null, buildAsap);
d101 1
a101 1
   public static AttSpec  <Boolean>         buildNstn ()
d103 1
a103 1
      return  getAttSpec ((Boolean)   null, buildNstn);
d106 1
a106 1
   public static AttSpec  <Boolean>         compPrices ()
d108 1
a108 1
      return  getAttSpec ((Boolean)   null, compPrices);
d111 1
a111 1
   public static AttSpec  <Boolean>         computeCriticalList ()
d113 1
a113 1
      return  getAttSpec ((Boolean)   null, computeCriticalList);
d116 1
a116 1
   public static AttSpec  <double[]>        consRate ()
d118 1
a118 1
      return  getAttSpec ((double[])  null, consRate);
d121 1
a121 1
   public static AttSpec  <double[]>        consVol ()
d123 1
a123 1
      return  getAttSpec ((double[])  null, consVol);
d126 1
a126 1
   public static AttSpec  <double[]>        cumShipReward ()
d128 1
a128 1
      return  getAttSpec ((double[])  null, cumShipReward);
d131 1
a131 1
   public static AttSpec  <Integer>         currentScenario ()
d133 1
a133 1
      return  getAttSpec ((Integer)   null, currentScenario);
d136 1
a136 1
   public static AttSpec  <double[]>        demandVol ()
d138 1
a138 1
      return  getAttSpec ((double[])  null, demandVol);
d141 1
a141 1
   public static AttSpec  <Integer>         earliestPeriod ()
d143 1
a143 1
      return  getAttSpec ((Integer)   null, earliestPeriod);
d146 1
a146 1
   public static AttSpec  <Integer>         equitability ()
d148 1
a148 1
      return  getAttSpec ((Integer)   null, equitability);
d151 1
a151 1
   public static AttSpec  <double[]>        excessVol ()
d153 1
a153 1
      return  getAttSpec ((double[])  null, excessVol);
d156 1
a156 1
   public static AttSpec  <double[]>        execCost ()
d158 1
a158 1
      return  getAttSpec ((double[])  null, execCost);
d161 1
a161 1
   public static AttSpec  <Boolean>         execEmptyBom ()
d163 1
a163 1
      return  getAttSpec ((Boolean)   null, execEmptyBom);
d166 1
a166 1
   public static AttSpec  <Double>          execPenalty ()
d168 1
a168 1
      return  getAttSpec ((Double)    null, execPenalty);
d171 1
a171 1
   public static AttSpec  <double[]>        execVol ()
d173 1
a173 1
      return  getAttSpec ((double[])  null, execVol);
d176 1
a176 1
   public static AttSpec  <boolean[]>       executable ()
d178 1
a178 1
      return  getAttSpec ((boolean[]) null, executable);
d181 1
a181 1
   public static AttSpec  <Boolean>         expAllowed ()
d183 1
a183 1
      return  getAttSpec ((Boolean)   null, expAllowed);
d186 1
a186 1
   public static AttSpec  <Double>          expAversion ()
d188 1
a188 1
      return  getAttSpec ((Double)    null, expAversion);
d191 1
a191 1
   public static AttSpec  <Double>          expCutoff ()
d193 1
a193 1
      return  getAttSpec ((Double)    null, expCutoff);
d196 1
a196 1
   public static AttSpec  <Double>          expNetAversion ()
d198 1
a198 1
      return  getAttSpec ((Double)    null, expNetAversion);
d201 1
a201 1
   public static AttSpec  <Boolean>         extOptActive ()
d203 1
a203 1
      return  getAttSpec ((Boolean)   null, extOptActive);
d206 1
a206 1
   public static AttSpec  <Double>          falloutRate ()
d208 1
a208 1
      return  getAttSpec ((Double)    null, falloutRate);
d211 1
a211 1
   public static AttSpec  <Boolean>         feasible ()
d213 1
a213 1
      return  getAttSpec ((Boolean)   null, feasible);
d216 1
a216 1
   public static AttSpec  <Integer>         focusHorizon ()
d218 1
a218 1
      return  getAttSpec ((Integer)   null, focusHorizon);
d221 1
a221 1
   public static AttSpec  <double[]>        focusShortageVol ()
d223 1
a223 1
      return  getAttSpec ((double[])  null, focusShortageVol);
d226 1
a226 1
   public static AttSpec  <Boolean>         forcedMultiEq ()
d228 1
a228 1
      return  getAttSpec ((Boolean)   null, forcedMultiEq);
d231 1
a231 1
   public static AttSpec  <double[]>        fssExecVol ()
d233 1
a233 1
      return  getAttSpec ((double[])  null, fssExecVol);
d236 1
a236 1
   public static AttSpec  <double[]>        fssSubVol ()
d238 1
a238 1
      return  getAttSpec ((double[])  null, fssSubVol);
d241 1
a241 1
   public static AttSpec  <Boolean>         heurAllocActive ()
d243 1
a243 1
      return  getAttSpec ((Boolean)   null, heurAllocActive);
d246 1
a246 1
   public static AttSpec  <Boolean>         highPrecisionWD ()
d248 1
a248 1
      return  getAttSpec ((Boolean)   null, highPrecisionWD);
d251 1
a251 1
   public static AttSpec  <int[]>           impactPeriod ()
d253 1
a253 1
      return  getAttSpec ((int[])     null, impactPeriod);
d256 1
a256 1
   public static AttSpec  <double[]>        incLotSize ()
d258 1
a258 1
      return  getAttSpec ((double[])  null, incLotSize);
d261 1
a261 1
   public static AttSpec  <double[]>        incLotSize2 ()
d263 1
a263 1
      return  getAttSpec ((double[])  null, incLotSize2);
d266 1
a266 1
   public static AttSpec  <Boolean>         independentOffsets ()
d268 1
a268 1
      return  getAttSpec ((Boolean)   null, independentOffsets);
d271 1
a271 1
   public static AttSpec  <Boolean>         intExecVols ()
d273 1
a273 1
      return  getAttSpec ((Boolean)   null, intExecVols);
d276 1
a276 1
   public static AttSpec  <Boolean>         intShipVols ()
d278 1
a278 1
      return  getAttSpec ((Boolean)   null, intShipVols);
d281 1
a281 1
   public static AttSpec  <Boolean>         intSubVols ()
d283 1
a283 1
      return  getAttSpec ((Boolean)   null, intSubVols);
d286 1
a286 1
   public static AttSpec  <Integer>         latestPeriod ()
d288 1
a288 1
      return  getAttSpec ((Integer)   null, latestPeriod);
d291 1
a291 1
   public static AttSpec  <double[]>        lotSize2Thresh ()
d293 1
a293 1
      return  getAttSpec ((double[])  null, lotSize2Thresh);
d296 1
a296 1
   public static AttSpec  <Double>          lotSizeTol ()
d298 1
a298 1
      return  getAttSpec ((Double)    null, lotSizeTol);
d301 1
a301 1
   public static AttSpec  <Boolean>         mandEC ()
d303 1
a303 1
      return  getAttSpec ((Boolean)   null, mandEC);
d306 1
a306 1
   public static AttSpec  <double[]>        minLotSize ()
d308 1
a308 1
      return  getAttSpec ((double[])  null, minLotSize);
d311 1
a311 1
   public static AttSpec  <double[]>        minLotSize2 ()
d313 1
a313 1
      return  getAttSpec ((double[])  null, minLotSize2);
d316 1
a316 1
   public static AttSpec  <Boolean>         minimalExcess ()
d318 1
a318 1
      return  getAttSpec ((Boolean)   null, minimalExcess);
d321 1
a321 1
   public static AttSpec  <Boolean>         mipMode ()
d323 1
a323 1
      return  getAttSpec ((Boolean)   null, mipMode);
d326 1
a326 1
   public static AttSpec  <double[]>        mrpConsVol ()
d328 1
a328 1
      return  getAttSpec ((double[])  null, mrpConsVol);
d331 1
a331 1
   public static AttSpec  <double[]>        mrpExcessVol ()
d333 1
a333 1
      return  getAttSpec ((double[])  null, mrpExcessVol);
d336 1
a336 1
   public static AttSpec  <double[]>        mrpExecVol ()
d338 1
a338 1
      return  getAttSpec ((double[])  null, mrpExecVol);
d341 1
a341 1
   public static AttSpec  <Boolean>         mrpNetAllowed ()
d343 1
a343 1
      return  getAttSpec ((Boolean)   null, mrpNetAllowed);
d346 1
a346 1
   public static AttSpec  <double[]>        mrpResidualVol ()
d348 1
a348 1
      return  getAttSpec ((double[])  null, mrpResidualVol);
d351 1
a351 1
   public static AttSpec  <double[]>        mrpSubVol ()
d353 1
a353 1
      return  getAttSpec ((double[])  null, mrpSubVol);
d356 1
a356 1
   public static AttSpec  <Boolean>         multiExec ()
d358 1
a358 1
      return  getAttSpec ((Boolean)   null, multiExec);
d361 1
a361 1
   public static AttSpec  <Boolean>         multiRoute ()
d363 1
a363 1
      return  getAttSpec ((Boolean)   null, multiRoute);
d366 1
a366 1
   public static AttSpec  <Integer>         nScenarios ()
d368 1
a368 1
      return  getAttSpec ((Integer)   null, nScenarios);
d371 1
a371 1
   public static AttSpec  <Boolean>         netAllowed ()
d373 1
a373 1
      return  getAttSpec ((Boolean)   null, netAllowed);
d376 1
a376 1
   public static AttSpec  <Boolean>         nstnResidual ()
d378 1
a378 1
      return  getAttSpec ((Boolean)   null, nstnResidual);
d381 1
a381 1
   public static AttSpec  <Integer>         objectStage ()
d383 1
a383 1
      return  getAttSpec ((Integer)   null, objectStage);
d386 1
a386 1
   public static AttSpec  <double[]>        offset ()
d388 1
a388 1
      return  getAttSpec ((double[])  null, offset);
d391 1
a391 1
   public static AttSpec  <Boolean>         penExec ()
d393 1
a393 1
      return  getAttSpec ((Boolean)   null, penExec);
d396 1
a396 1
   public static AttSpec  <Boolean>         perfPegging ()
d398 1
a398 1
      return  getAttSpec ((Boolean)   null, perfPegging);
d401 1
a401 1
   public static AttSpec  <int[]>           periodStage ()
d403 1
a403 1
      return  getAttSpec ((int[])     null, periodStage);
d406 1
a406 1
   public static AttSpec  <Boolean>         pgdCritListMode ()
d408 1
a408 1
      return  getAttSpec ((Boolean)   null, pgdCritListMode);
d411 1
a411 1
   public static AttSpec  <Boolean>         pipExists ()
d413 1
a413 1
      return  getAttSpec ((Boolean)   null, pipExists);
d416 1
a416 1
   public static AttSpec  <Boolean>         pipSeqFromHeur ()
d418 1
a418 1
      return  getAttSpec ((Boolean)   null, pipSeqFromHeur);
d421 1
a421 1
   public static AttSpec  <Boolean>         postprocessed ()
d423 1
a423 1
      return  getAttSpec ((Boolean)   null, postprocessed);
d426 1
a426 1
   public static AttSpec  <Boolean>         prefHighStockSLBs ()
d428 1
a428 1
      return  getAttSpec ((Boolean)   null, prefHighStockSLBs);
d431 1
a431 1
   public static AttSpec  <Boolean>         preprocessed ()
d433 1
a433 1
      return  getAttSpec ((Boolean)   null, preprocessed);
d436 1
a436 1
   public static AttSpec  <int[]>           priority ()
d438 1
a438 1
      return  getAttSpec ((int[])     null, priority);
d441 1
a441 1
   public static AttSpec  <Double>          probability ()
d443 1
a443 1
      return  getAttSpec ((Double)    null, probability);
d446 1
a446 1
   public static AttSpec  <double[]>        prodVol ()
d448 1
a448 1
      return  getAttSpec ((double[])  null, prodVol);
d451 1
a451 1
   public static AttSpec  <double[]>        productRate ()
d453 1
a453 1
      return  getAttSpec ((double[])  null, productRate);
d456 1
a456 1
   public static AttSpec  <boolean[]>       propRtg ()
d458 1
a458 1
      return  getAttSpec ((boolean[]) null, propRtg);
d461 1
a461 1
   public static AttSpec  <double[]>        reqVol ()
d463 1
a463 1
      return  getAttSpec ((double[])  null, reqVol);
d466 1
a466 1
   public static AttSpec  <double[]>        residualVol ()
d468 1
a468 1
      return  getAttSpec ((double[])  null, residualVol);
d471 1
a471 1
   public static AttSpec  <Boolean>         respectStockSLBs ()
d473 1
a473 1
      return  getAttSpec ((Boolean)   null, respectStockSLBs);
d476 1
a476 1
   public static AttSpec  <Boolean>         roundReqVols ()
d478 1
a478 1
      return  getAttSpec ((Boolean)   null, roundReqVols);
d481 1
a481 1
   public static AttSpec  <double[]>        routingShare ()
d483 1
a483 1
      return  getAttSpec ((double[])  null, routingShare);
d486 1
a486 1
   public static AttSpec  <Boolean>         scrapAllowed ()
d488 1
a488 1
      return  getAttSpec ((Boolean)   null, scrapAllowed);
d491 1
a491 1
   public static AttSpec  <double[]>        scrapCost ()
d493 1
a493 1
      return  getAttSpec ((double[])  null, scrapCost);
d496 1
a496 1
   public static AttSpec  <double[]>        scrapVol ()
d498 1
a498 1
      return  getAttSpec ((double[])  null, scrapVol);
d501 1
a501 1
   public static AttSpec  <Double>          searchInc ()
d503 1
a503 1
      return  getAttSpec ((Double)    null, searchInc);
d506 1
a506 1
   public static AttSpec  <Boolean>         selForDel ()
d508 1
a508 1
      return  getAttSpec ((Boolean)   null, selForDel);
d511 1
a511 1
   public static AttSpec  <Boolean>         selSplit ()
d513 1
a513 1
      return  getAttSpec ((Boolean)   null, selSplit);
d516 1
a516 1
   public static AttSpec  <double[]>        shadowPrice ()
d518 1
a518 1
      return  getAttSpec ((double[])  null, shadowPrice);
d521 1
a521 1
   public static AttSpec  <Boolean>         shipLateAllowed ()
d523 1
a523 1
      return  getAttSpec ((Boolean)   null, shipLateAllowed);
d526 1
a526 1
   public static AttSpec  <int[]>           shipLateUB ()
d528 1
a528 1
      return  getAttSpec ((int[])     null, shipLateUB);
d531 1
a531 1
   public static AttSpec  <double[]>        shipReward ()
d533 1
a533 1
      return  getAttSpec ((double[])  null, shipReward);
d536 1
a536 1
   public static AttSpec  <double[]>        shipVol ()
d538 1
a538 1
      return  getAttSpec ((double[])  null, shipVol);
d541 1
a541 1
   public static AttSpec  <Boolean>         singleSource ()
d543 1
a543 1
      return  getAttSpec ((Boolean)   null, singleSource);
d546 1
a546 1
   public static AttSpec  <Boolean>         skipFailures ()
d548 1
a548 1
      return  getAttSpec ((Boolean)   null, skipFailures);
d551 1
a551 1
   public static AttSpec  <Boolean>         stageByObject ()
d553 1
a553 1
      return  getAttSpec ((Boolean)   null, stageByObject);
d556 1
a556 1
   public static AttSpec  <Boolean>         stochMode ()
d558 1
a558 1
      return  getAttSpec ((Boolean)   null, stochMode);
d561 1
a561 1
   public static AttSpec  <Boolean>         stochSolnMode ()
d563 1
a563 1
      return  getAttSpec ((Boolean)   null, stochSolnMode);
d566 1
a566 1
   public static AttSpec  <double[]>        stockCost ()
d568 1
a568 1
      return  getAttSpec ((double[])  null, stockCost);
d571 1
a571 1
   public static AttSpec  <Boolean>         stockReallocation ()
d573 1
a573 1
      return  getAttSpec ((Boolean)   null, stockReallocation);
d576 1
a576 1
   public static AttSpec  <double[]>        stockVol ()
d578 1
a578 1
      return  getAttSpec ((double[])  null, stockVol);
d581 1
a581 1
   public static AttSpec  <double[]>        subCost ()
d583 1
a583 1
      return  getAttSpec ((double[])  null, subCost);
d586 1
a586 1
   public static AttSpec  <double[]>        subVol ()
d588 1
a588 1
      return  getAttSpec ((double[])  null, subVol);
d591 1
a591 1
   public static AttSpec  <double[]>        supplyVol ()
d593 1
a593 1
      return  getAttSpec ((double[])  null, supplyVol);
d596 1
a596 1
   public static AttSpec  <Boolean>         tieBreakPropRt ()
d598 1
a598 1
      return  getAttSpec ((Boolean)   null, tieBreakPropRt);
d601 1
a601 1
   public static AttSpec  <Boolean>         truncOffsets ()
d603 1
a603 1
      return  getAttSpec ((Boolean)   null, truncOffsets);
d606 1
a606 1
   public static AttSpec  <Boolean>         twoLevelLotSizes ()
d608 1
a608 1
      return  getAttSpec ((Boolean)   null, twoLevelLotSizes);
d611 1
a611 1
   public static AttSpec  <Boolean>         twoWayMultiExec ()
d613 1
a613 1
      return  getAttSpec ((Boolean)   null, twoWayMultiExec);
d616 1
a616 1
   public static AttSpec  <Boolean>         useFocusHorizons ()
d618 1
a618 1
      return  getAttSpec ((Boolean)   null, useFocusHorizons);
d621 1
a621 1
   public static AttSpec  <Boolean>         userHeurStart ()
d623 1
a623 1
      return  getAttSpec ((Boolean)   null, userHeurStart);
d626 1
a626 1
   public static AttSpec  <Double>          wbounds ()
d628 1
a628 1
      return  getAttSpec ((Double)    null, wbounds);
d631 1
a631 1
   public static AttSpec  <double[]>        yieldRate ()
d633 1
a633 1
      return  getAttSpec ((double[])  null, yieldRate);
d848 1
a848 1
// getAttSpec (ref, theAttID) methods
d851 2
a852 2
// as an AttSpec <RefType>, where RefType is the type of the ref argument.
// The ref argument is not otherwise used.
d855 3
a857 1
   private static AttSpec <Boolean>   getAttSpec (Boolean   ref, AttID theAttID)
d859 1
a859 1
      return (BoolSpec)      theAttID.getAttSpec ();
d862 3
a864 1
   private static AttSpec <Integer>   getAttSpec (Integer   ref, AttID theAttID)
d866 1
a866 1
      return (IntSpec)       theAttID.getAttSpec ();
d869 3
a871 1
   private static AttSpec <Double>    getAttSpec (Double    ref, AttID theAttID)
d873 1
a873 1
      return (DblSpec)       theAttID.getAttSpec ();
d876 3
a878 1
   private static AttSpec <boolean[]> getAttSpec (boolean[] ref, AttID theAttID)
d880 1
a880 1
      return (BoolVecSpec)   theAttID.getAttSpec ();
d883 3
a885 1
   private static AttSpec <int[]>     getAttSpec (int[]     ref, AttID theAttID)
d887 1
a887 1
      return (IntVecSpec)    theAttID.getAttSpec ();
d890 3
a892 1
   private static AttSpec <double[]>  getAttSpec (double[]  ref, AttID theAttID)
d894 1
a894 1
      return (DblVecSpec)    theAttID.getAttSpec ();
@


1.8
log
@Attributes.
@
text
@d10 1
d817 1
a817 1
         InternalObject.intAbortWmsg (
d826 1
a826 1
         InternalObject.intAbortWmsg (
@


1.7
log
@AttReps.
@
text
@d665 1
a665 1
   public Class getValueType ()
d762 1
a762 1
         Class       theAttClass;
d774 1
a774 1
         for (Class theClass: AttSpec.class.getDeclaredClasses ())
d858 1
a858 1
    
d863 1
a863 1
    
d868 1
a868 1
    
d873 1
a873 1
    
d878 1
a878 1
    
d888 1
a888 1
   private AttSpec (AttID theAttID, Class theValueType)
d913 1
a913 1
   private final Class myValueType;
@


1.6
log
@AttReps.
@
text
@d698 1
a698 1
   public boolean isAnInputAtt (Problem theProblem)
d700 2
d704 4
a707 1
      return theProblem.getProbCoord ().getAttCIMgr ().isAnInputAtt (myAttID);
@


1.5
log
@AttReps.
@
text
@d679 1
a679 3
      AttRepMgr   theAttRepMgr;
      CompClassID theCCID;
      AttRep      theAttRep;
d683 2
a684 3
      theAttRepMgr = theComp.getProbCoord ().getAttRepMgr ();
      
      theCCID      = theComp.getCompClassID ();
d686 1
a686 3
      theAttRep    = theAttRepMgr.getAttRepFor (myAttID, theCCID);

      return (theAttRep != null);
@


1.4
log
@AttReps.
@
text
@d65 4
a68 4
public static AttSpec  <Boolean>         accAfterOptImp ()
   {
   return  getAttSpec ((Boolean)   null, accAfterOptImp);
   }
d70 4
a73 4
public static AttSpec  <Boolean>         accAfterSoftLB ()
   {
   return  getAttSpec ((Boolean)   null, accAfterSoftLB);
   }
d75 4
a78 4
public static AttSpec  <Boolean>         accelerated ()
   {
   return  getAttSpec ((Boolean)   null, accelerated);
   }
d80 4
a83 4
public static AttSpec  <Boolean>         asapPipOrder ()
   {
   return  getAttSpec ((Boolean)   null, asapPipOrder);
   }
d85 4
a88 4
public static AttSpec  <Boolean>         autoPriority ()
   {
   return  getAttSpec ((Boolean)   null, autoPriority);
   }
d90 4
a93 4
public static AttSpec  <int[]>           buildAheadUB ()
   {
   return  getAttSpec ((int[])     null, buildAheadUB);
   }
d95 4
a98 4
public static AttSpec  <Boolean>         buildAsap ()
   {
   return  getAttSpec ((Boolean)   null, buildAsap);
   }
d100 4
a103 4
public static AttSpec  <Boolean>         buildNstn ()
   {
   return  getAttSpec ((Boolean)   null, buildNstn);
   }
d105 4
a108 4
public static AttSpec  <Boolean>         compPrices ()
   {
   return  getAttSpec ((Boolean)   null, compPrices);
   }
d110 4
a113 4
public static AttSpec  <Boolean>         computeCriticalList ()
   {
   return  getAttSpec ((Boolean)   null, computeCriticalList);
   }
d115 4
a118 4
public static AttSpec  <double[]>        consRate ()
   {
   return  getAttSpec ((double[])  null, consRate);
   }
d120 4
a123 4
public static AttSpec  <double[]>        consVol ()
   {
   return  getAttSpec ((double[])  null, consVol);
   }
d125 4
a128 4
public static AttSpec  <double[]>        cumShipReward ()
   {
   return  getAttSpec ((double[])  null, cumShipReward);
   }
d130 4
a133 4
public static AttSpec  <Integer>         currentScenario ()
   {
   return  getAttSpec ((Integer)   null, currentScenario);
   }
d135 4
a138 4
public static AttSpec  <double[]>        demandVol ()
   {
   return  getAttSpec ((double[])  null, demandVol);
   }
d140 4
a143 4
public static AttSpec  <Integer>         earliestPeriod ()
   {
   return  getAttSpec ((Integer)   null, earliestPeriod);
   }
d145 4
a148 4
public static AttSpec  <Integer>         equitability ()
   {
   return  getAttSpec ((Integer)   null, equitability);
   }
d150 4
a153 4
public static AttSpec  <double[]>        excessVol ()
   {
   return  getAttSpec ((double[])  null, excessVol);
   }
d155 4
a158 4
public static AttSpec  <double[]>        execCost ()
   {
   return  getAttSpec ((double[])  null, execCost);
   }
d160 4
a163 4
public static AttSpec  <Boolean>         execEmptyBom ()
   {
   return  getAttSpec ((Boolean)   null, execEmptyBom);
   }
d165 4
a168 4
public static AttSpec  <Double>          execPenalty ()
   {
   return  getAttSpec ((Double)    null, execPenalty);
   }
d170 4
a173 4
public static AttSpec  <double[]>        execVol ()
   {
   return  getAttSpec ((double[])  null, execVol);
   }
d175 4
a178 4
public static AttSpec  <boolean[]>       executable ()
   {
   return  getAttSpec ((boolean[]) null, executable);
   }
d180 4
a183 4
public static AttSpec  <Boolean>         expAllowed ()
   {
   return  getAttSpec ((Boolean)   null, expAllowed);
   }
d185 4
a188 4
public static AttSpec  <Double>          expAversion ()
   {
   return  getAttSpec ((Double)    null, expAversion);
   }
d190 4
a193 4
public static AttSpec  <Double>          expCutoff ()
   {
   return  getAttSpec ((Double)    null, expCutoff);
   }
d195 4
a198 4
public static AttSpec  <Double>          expNetAversion ()
   {
   return  getAttSpec ((Double)    null, expNetAversion);
   }
d200 4
a203 4
public static AttSpec  <Boolean>         extOptActive ()
   {
   return  getAttSpec ((Boolean)   null, extOptActive);
   }
d205 4
a208 4
public static AttSpec  <Double>          falloutRate ()
   {
   return  getAttSpec ((Double)    null, falloutRate);
   }
d210 4
a213 4
public static AttSpec  <Boolean>         feasible ()
   {
   return  getAttSpec ((Boolean)   null, feasible);
   }
d215 4
a218 4
public static AttSpec  <Integer>         focusHorizon ()
   {
   return  getAttSpec ((Integer)   null, focusHorizon);
   }
d220 4
a223 4
public static AttSpec  <double[]>        focusShortageVol ()
   {
   return  getAttSpec ((double[])  null, focusShortageVol);
   }
d225 4
a228 4
public static AttSpec  <Boolean>         forcedMultiEq ()
   {
   return  getAttSpec ((Boolean)   null, forcedMultiEq);
   }
d230 4
a233 4
public static AttSpec  <double[]>        fssExecVol ()
   {
   return  getAttSpec ((double[])  null, fssExecVol);
   }
d235 4
a238 4
public static AttSpec  <double[]>        fssSubVol ()
   {
   return  getAttSpec ((double[])  null, fssSubVol);
   }
d240 4
a243 4
public static AttSpec  <Boolean>         heurAllocActive ()
   {
   return  getAttSpec ((Boolean)   null, heurAllocActive);
   }
d245 4
a248 4
public static AttSpec  <Boolean>         highPrecisionWD ()
   {
   return  getAttSpec ((Boolean)   null, highPrecisionWD);
   }
d250 4
a253 4
public static AttSpec  <int[]>           impactPeriod ()
   {
   return  getAttSpec ((int[])     null, impactPeriod);
   }
d255 4
a258 4
public static AttSpec  <double[]>        incLotSize ()
   {
   return  getAttSpec ((double[])  null, incLotSize);
   }
d260 4
a263 4
public static AttSpec  <double[]>        incLotSize2 ()
   {
   return  getAttSpec ((double[])  null, incLotSize2);
   }
d265 4
a268 4
public static AttSpec  <Boolean>         independentOffsets ()
   {
   return  getAttSpec ((Boolean)   null, independentOffsets);
   }
d270 4
a273 4
public static AttSpec  <Boolean>         intExecVols ()
   {
   return  getAttSpec ((Boolean)   null, intExecVols);
   }
d275 4
a278 4
public static AttSpec  <Boolean>         intShipVols ()
   {
   return  getAttSpec ((Boolean)   null, intShipVols);
   }
d280 4
a283 4
public static AttSpec  <Boolean>         intSubVols ()
   {
   return  getAttSpec ((Boolean)   null, intSubVols);
   }
d285 4
a288 4
public static AttSpec  <Integer>         latestPeriod ()
   {
   return  getAttSpec ((Integer)   null, latestPeriod);
   }
d290 4
a293 4
public static AttSpec  <double[]>        lotSize2Thresh ()
   {
   return  getAttSpec ((double[])  null, lotSize2Thresh);
   }
d295 4
a298 4
public static AttSpec  <Double>          lotSizeTol ()
   {
   return  getAttSpec ((Double)    null, lotSizeTol);
   }
d300 4
a303 4
public static AttSpec  <Boolean>         mandEC ()
   {
   return  getAttSpec ((Boolean)   null, mandEC);
   }
d305 4
a308 4
public static AttSpec  <double[]>        minLotSize ()
   {
   return  getAttSpec ((double[])  null, minLotSize);
   }
d310 4
a313 4
public static AttSpec  <double[]>        minLotSize2 ()
   {
   return  getAttSpec ((double[])  null, minLotSize2);
   }
d315 4
a318 4
public static AttSpec  <Boolean>         minimalExcess ()
   {
   return  getAttSpec ((Boolean)   null, minimalExcess);
   }
d320 4
a323 4
public static AttSpec  <Boolean>         mipMode ()
   {
   return  getAttSpec ((Boolean)   null, mipMode);
   }
d325 4
a328 4
public static AttSpec  <double[]>        mrpConsVol ()
   {
   return  getAttSpec ((double[])  null, mrpConsVol);
   }
d330 4
a333 4
public static AttSpec  <double[]>        mrpExcessVol ()
   {
   return  getAttSpec ((double[])  null, mrpExcessVol);
   }
d335 4
a338 4
public static AttSpec  <double[]>        mrpExecVol ()
   {
   return  getAttSpec ((double[])  null, mrpExecVol);
   }
d340 4
a343 4
public static AttSpec  <Boolean>         mrpNetAllowed ()
   {
   return  getAttSpec ((Boolean)   null, mrpNetAllowed);
   }
d345 4
a348 4
public static AttSpec  <double[]>        mrpResidualVol ()
   {
   return  getAttSpec ((double[])  null, mrpResidualVol);
   }
d350 4
a353 4
public static AttSpec  <double[]>        mrpSubVol ()
   {
   return  getAttSpec ((double[])  null, mrpSubVol);
   }
d355 4
a358 4
public static AttSpec  <Boolean>         multiExec ()
   {
   return  getAttSpec ((Boolean)   null, multiExec);
   }
d360 4
a363 4
public static AttSpec  <Boolean>         multiRoute ()
   {
   return  getAttSpec ((Boolean)   null, multiRoute);
   }
d365 4
a368 4
public static AttSpec  <Integer>         nScenarios ()
   {
   return  getAttSpec ((Integer)   null, nScenarios);
   }
d370 4
a373 4
public static AttSpec  <Boolean>         netAllowed ()
   {
   return  getAttSpec ((Boolean)   null, netAllowed);
   }
d375 4
a378 4
public static AttSpec  <Boolean>         nstnResidual ()
   {
   return  getAttSpec ((Boolean)   null, nstnResidual);
   }
d380 4
a383 4
public static AttSpec  <Integer>         objectStage ()
   {
   return  getAttSpec ((Integer)   null, objectStage);
   }
d385 4
a388 4
public static AttSpec  <double[]>        offset ()
   {
   return  getAttSpec ((double[])  null, offset);
   }
d390 4
a393 4
public static AttSpec  <Boolean>         penExec ()
   {
   return  getAttSpec ((Boolean)   null, penExec);
   }
d395 4
a398 4
public static AttSpec  <Boolean>         perfPegging ()
   {
   return  getAttSpec ((Boolean)   null, perfPegging);
   }
d400 4
a403 4
public static AttSpec  <int[]>           periodStage ()
   {
   return  getAttSpec ((int[])     null, periodStage);
   }
d405 4
a408 4
public static AttSpec  <Boolean>         pgdCritListMode ()
   {
   return  getAttSpec ((Boolean)   null, pgdCritListMode);
   }
d410 4
a413 4
public static AttSpec  <Boolean>         pipExists ()
   {
   return  getAttSpec ((Boolean)   null, pipExists);
   }
d415 4
a418 4
public static AttSpec  <Boolean>         pipSeqFromHeur ()
   {
   return  getAttSpec ((Boolean)   null, pipSeqFromHeur);
   }
d420 4
a423 4
public static AttSpec  <Boolean>         postprocessed ()
   {
   return  getAttSpec ((Boolean)   null, postprocessed);
   }
d425 4
a428 4
public static AttSpec  <Boolean>         prefHighStockSLBs ()
   {
   return  getAttSpec ((Boolean)   null, prefHighStockSLBs);
   }
d430 4
a433 4
public static AttSpec  <Boolean>         preprocessed ()
   {
   return  getAttSpec ((Boolean)   null, preprocessed);
   }
d435 4
a438 4
public static AttSpec  <int[]>           priority ()
   {
   return  getAttSpec ((int[])     null, priority);
   }
d440 4
a443 4
public static AttSpec  <Double>          probability ()
   {
   return  getAttSpec ((Double)    null, probability);
   }
d445 4
a448 4
public static AttSpec  <double[]>        prodVol ()
   {
   return  getAttSpec ((double[])  null, prodVol);
   }
d450 4
a453 4
public static AttSpec  <double[]>        productRate ()
   {
   return  getAttSpec ((double[])  null, productRate);
   }
d455 4
a458 4
public static AttSpec  <boolean[]>       propRtg ()
   {
   return  getAttSpec ((boolean[]) null, propRtg);
   }
d460 4
a463 4
public static AttSpec  <double[]>        reqVol ()
   {
   return  getAttSpec ((double[])  null, reqVol);
   }
d465 4
a468 4
public static AttSpec  <double[]>        residualVol ()
   {
   return  getAttSpec ((double[])  null, residualVol);
   }
d470 4
a473 4
public static AttSpec  <Boolean>         respectStockSLBs ()
   {
   return  getAttSpec ((Boolean)   null, respectStockSLBs);
   }
d475 4
a478 4
public static AttSpec  <Boolean>         roundReqVols ()
   {
   return  getAttSpec ((Boolean)   null, roundReqVols);
   }
d480 4
a483 4
public static AttSpec  <double[]>        routingShare ()
   {
   return  getAttSpec ((double[])  null, routingShare);
   }
d485 4
a488 4
public static AttSpec  <Boolean>         scrapAllowed ()
   {
   return  getAttSpec ((Boolean)   null, scrapAllowed);
   }
d490 4
a493 4
public static AttSpec  <double[]>        scrapCost ()
   {
   return  getAttSpec ((double[])  null, scrapCost);
   }
d495 4
a498 4
public static AttSpec  <double[]>        scrapVol ()
   {
   return  getAttSpec ((double[])  null, scrapVol);
   }
d500 4
a503 4
public static AttSpec  <Double>          searchInc ()
   {
   return  getAttSpec ((Double)    null, searchInc);
   }
d505 4
a508 4
public static AttSpec  <Boolean>         selForDel ()
   {
   return  getAttSpec ((Boolean)   null, selForDel);
   }
d510 4
a513 4
public static AttSpec  <Boolean>         selSplit ()
   {
   return  getAttSpec ((Boolean)   null, selSplit);
   }
d515 4
a518 4
public static AttSpec  <double[]>        shadowPrice ()
   {
   return  getAttSpec ((double[])  null, shadowPrice);
   }
d520 4
a523 4
public static AttSpec  <Boolean>         shipLateAllowed ()
   {
   return  getAttSpec ((Boolean)   null, shipLateAllowed);
   }
d525 4
a528 4
public static AttSpec  <int[]>           shipLateUB ()
   {
   return  getAttSpec ((int[])     null, shipLateUB);
   }
d530 4
a533 4
public static AttSpec  <double[]>        shipReward ()
   {
   return  getAttSpec ((double[])  null, shipReward);
   }
d535 4
a538 4
public static AttSpec  <double[]>        shipVol ()
   {
   return  getAttSpec ((double[])  null, shipVol);
   }
d540 4
a543 4
public static AttSpec  <Boolean>         singleSource ()
   {
   return  getAttSpec ((Boolean)   null, singleSource);
   }
d545 4
a548 4
public static AttSpec  <Boolean>         skipFailures ()
   {
   return  getAttSpec ((Boolean)   null, skipFailures);
   }
d550 4
a553 4
public static AttSpec  <Boolean>         stageByObject ()
   {
   return  getAttSpec ((Boolean)   null, stageByObject);
   }
d555 4
a558 4
public static AttSpec  <Boolean>         stochMode ()
   {
   return  getAttSpec ((Boolean)   null, stochMode);
   }
d560 4
a563 4
public static AttSpec  <Boolean>         stochSolnMode ()
   {
   return  getAttSpec ((Boolean)   null, stochSolnMode);
   }
d565 4
a568 4
public static AttSpec  <double[]>        stockCost ()
   {
   return  getAttSpec ((double[])  null, stockCost);
   }
d570 4
a573 4
public static AttSpec  <Boolean>         stockReallocation ()
   {
   return  getAttSpec ((Boolean)   null, stockReallocation);
   }
d575 4
a578 4
public static AttSpec  <double[]>        stockVol ()
   {
   return  getAttSpec ((double[])  null, stockVol);
   }
d580 4
a583 4
public static AttSpec  <double[]>        subCost ()
   {
   return  getAttSpec ((double[])  null, subCost);
   }
d585 4
a588 4
public static AttSpec  <double[]>        subVol ()
   {
   return  getAttSpec ((double[])  null, subVol);
   }
d590 4
a593 4
public static AttSpec  <double[]>        supplyVol ()
   {
   return  getAttSpec ((double[])  null, supplyVol);
   }
d595 4
a598 4
public static AttSpec  <Boolean>         tieBreakPropRt ()
   {
   return  getAttSpec ((Boolean)   null, tieBreakPropRt);
   }
d600 4
a603 4
public static AttSpec  <Boolean>         truncOffsets ()
   {
   return  getAttSpec ((Boolean)   null, truncOffsets);
   }
d605 4
a608 4
public static AttSpec  <Boolean>         twoLevelLotSizes ()
   {
   return  getAttSpec ((Boolean)   null, twoLevelLotSizes);
   }
d610 4
a613 4
public static AttSpec  <Boolean>         twoWayMultiExec ()
   {
   return  getAttSpec ((Boolean)   null, twoWayMultiExec);
   }
d615 4
a618 4
public static AttSpec  <Boolean>         useFocusHorizons ()
   {
   return  getAttSpec ((Boolean)   null, useFocusHorizons);
   }
d620 4
a623 4
public static AttSpec  <Boolean>         userHeurStart ()
   {
   return  getAttSpec ((Boolean)   null, userHeurStart);
   }
d625 4
a628 4
public static AttSpec  <Double>          wbounds ()
   {
   return  getAttSpec ((Double)    null, wbounds);
   }
d630 4
a633 4
public static AttSpec  <double[]>        yieldRate ()
   {
   return  getAttSpec ((double[])  null, yieldRate);
   }
d847 1
a847 1
// getAttSpec (dummy, theAttID) methods
d850 2
a851 2
// as an AttSpec <RefType>, where RefType is the type of the dummy argument.
// The dummy argument is not otherwise used.
d854 29
a882 29
private static AttSpec <Boolean>   getAttSpec (Boolean   dummy, AttID theAttID)
   {
   return (BoolSpec)      theAttID.getAttSpec ();
   }

private static AttSpec <Integer>   getAttSpec (Integer   dummy, AttID theAttID)
   {
   return (IntSpec)       theAttID.getAttSpec ();
   }

private static AttSpec <Double>    getAttSpec (Double    dummy, AttID theAttID)
   {
   return (DblSpec)       theAttID.getAttSpec ();
   }

private static AttSpec <boolean[]> getAttSpec (boolean[] dummy, AttID theAttID)
   {
   return (BoolVecSpec)   theAttID.getAttSpec ();
   }

private static AttSpec <int[]>     getAttSpec (int[]     dummy, AttID theAttID)
   {
   return (IntVecSpec)    theAttID.getAttSpec ();
   }

private static AttSpec <double[]>  getAttSpec (double[]  dummy, AttID theAttID)
   {
   return (DblVecSpec)    theAttID.getAttSpec ();
   }
@


1.3
log
@Attributes.
@
text
@d679 1
a679 1
      AttCIMgr    theAttCIMgr;
d681 1
a681 1
      AttCI       theAttCI;
d685 1
a685 1
      theAttCIMgr = theComp.getProbCoord ().getAttCIMgr ();
d687 1
a687 1
      theCCID     = theComp.getCompClassID ();
d689 1
a689 1
      theAttCI    = theAttCIMgr.getAttCIFor (myAttID, theCCID);
d691 1
a691 1
      return (theAttCI != null);
@


1.2
log
@Attributes.
@
text
@d38 1
a38 1
//          AttSpec.BoolAtt
d40 1
a40 1
//          AttSpec.IntAtt
d42 1
a42 1
//          AttSpec.DblAtt
d44 1
a44 1
//          AttSpec.BoolVecAtt
d46 1
a46 1
//          AttSpec.IntVecAtt
d48 1
a48 1
//          AttSpec.DblVecAtt
d856 1
a856 1
   return (BoolAtt)       theAttID.getAttSpec ();
d861 1
a861 1
   return (IntAtt)        theAttID.getAttSpec ();
d866 1
a866 1
   return (DblAtt)        theAttID.getAttSpec ();
d871 1
a871 1
   return (BoolVecAtt)    theAttID.getAttSpec ();
d876 1
a876 1
   return (IntVecAtt)     theAttID.getAttSpec ();
d881 1
a881 1
   return (DblVecAtt)     theAttID.getAttSpec ();
d924 1
a924 1
   private static final class BoolAtt       extends AttSpec <Boolean>
d926 1
a926 1
   BoolAtt (AttID theAttID)
d934 1
a934 1
   private static final class IntAtt       extends AttSpec <Integer>
d936 1
a936 1
   IntAtt (AttID theAttID)
d944 1
a944 1
   private static final class DblAtt        extends AttSpec <Double>
d946 1
a946 1
   DblAtt (AttID theAttID)
d954 1
a954 1
   private static final class BoolVecAtt extends AttSpec <boolean[]>
d956 1
a956 1
   BoolVecAtt (AttID theAttID)
d964 1
a964 1
   private static final class IntVecAtt extends AttSpec <int[]>
d966 1
a966 1
   IntVecAtt (AttID theAttID)
d974 1
a974 1
   private static final class DblVecAtt  extends AttSpec <double[]>
d976 1
a976 1
   DblVecAtt (AttID theAttID)
@


1.1
log
@Attributes.
@
text
@d65 1
a65 1
public static AttSpec  <Boolean>              accAfterOptImp ()
d67 1
a67 1
   return  getAttSpec ((Boolean)   null,      accAfterOptImp);
d70 1
a70 1
public static AttSpec  <Boolean>              accAfterSoftLB ()
d72 1
a72 1
   return  getAttSpec ((Boolean)   null,      accAfterSoftLB);
d75 1
a75 1
public static AttSpec  <Boolean>                 accelerated ()
d77 1
a77 1
   return  getAttSpec ((Boolean)   null,         accelerated);
d80 1
a80 1
public static AttSpec  <Boolean>                asapPipOrder ()
d82 1
a82 1
   return  getAttSpec ((Boolean)   null,        asapPipOrder);
d85 1
a85 1
public static AttSpec  <Boolean>                autoPriority ()
d87 1
a87 1
   return  getAttSpec ((Boolean)   null,        autoPriority);
d90 1
a90 1
public static AttSpec  <int[]>                  buildAheadUB ()
d92 1
a92 1
   return  getAttSpec ((int[])     null,        buildAheadUB);
d95 1
a95 1
public static AttSpec  <Boolean>                   buildAsap ()
d97 1
a97 1
   return  getAttSpec ((Boolean)   null,           buildAsap);
d100 1
a100 1
public static AttSpec  <Boolean>                   buildNstn ()
d102 1
a102 1
   return  getAttSpec ((Boolean)   null,           buildNstn);
d105 1
a105 1
public static AttSpec  <Boolean>                  compPrices ()
d107 1
a107 1
   return  getAttSpec ((Boolean)   null,          compPrices);
d115 1
a115 1
public static AttSpec  <double[]>                   consRate ()
d117 1
a117 1
   return  getAttSpec ((double[])  null,            consRate);
d120 1
a120 1
public static AttSpec  <double[]>                    consVol ()
d122 1
a122 1
   return  getAttSpec ((double[])  null,             consVol);
d125 1
a125 1
public static AttSpec  <double[]>              cumShipReward ()
d127 1
a127 1
   return  getAttSpec ((double[])  null,       cumShipReward);
d130 1
a130 1
public static AttSpec  <Integer>             currentScenario ()
d132 1
a132 1
   return  getAttSpec ((Integer)   null,     currentScenario);
d135 1
a135 1
public static AttSpec  <double[]>                 demandVol ()
d137 1
a137 1
   return  getAttSpec ((double[])  null,          demandVol);
d140 1
a140 1
public static AttSpec  <Integer>              earliestPeriod ()
d142 1
a142 1
   return  getAttSpec ((Integer)   null,      earliestPeriod);
d145 1
a145 1
public static AttSpec  <Integer>                equitability ()
d147 1
a147 1
   return  getAttSpec ((Integer)   null,        equitability);
d150 1
a150 1
public static AttSpec  <double[]>                  excessVol ()
d152 1
a152 1
   return  getAttSpec ((double[])  null,           excessVol);
d155 1
a155 1
public static AttSpec  <double[]>                   execCost ()
d157 1
a157 1
   return  getAttSpec ((double[])  null,            execCost);
d160 1
a160 1
public static AttSpec  <Boolean>                execEmptyBom ()
d162 1
a162 1
   return  getAttSpec ((Boolean)   null,        execEmptyBom);
d165 1
a165 1
public static AttSpec  <Double>                  execPenalty ()
d167 1
a167 1
   return  getAttSpec ((Double)    null,         execPenalty);
d170 1
a170 1
public static AttSpec  <double[]>                    execVol ()
d172 1
a172 1
   return  getAttSpec ((double[])  null,             execVol);
d175 1
a175 1
public static AttSpec  <boolean[]>                executable ()
d177 1
a177 1
   return  getAttSpec ((boolean[]) null,          executable);
d180 1
a180 1
public static AttSpec  <Boolean>                  expAllowed ()
d182 1
a182 1
   return  getAttSpec ((Boolean)   null,          expAllowed);
d185 1
a185 1
public static AttSpec  <Double>                  expAversion ()
d187 1
a187 1
   return  getAttSpec ((Double)    null,         expAversion);
d190 1
a190 1
public static AttSpec  <Double>                    expCutoff ()
d192 1
a192 1
   return  getAttSpec ((Double)    null,           expCutoff);
d195 1
a195 1
public static AttSpec  <Double>               expNetAversion ()
d197 1
a197 1
   return  getAttSpec ((Double)    null,      expNetAversion);
d200 1
a200 1
public static AttSpec  <Boolean>                extOptActive ()
d202 1
a202 1
   return  getAttSpec ((Boolean)   null,        extOptActive);
d205 1
a205 1
public static AttSpec  <Double>                  falloutRate ()
d207 1
a207 1
   return  getAttSpec ((Double)    null,         falloutRate);
d210 1
a210 1
public static AttSpec  <Boolean>                    feasible ()
d212 1
a212 1
   return  getAttSpec ((Boolean)   null,            feasible);
d215 1
a215 1
public static AttSpec  <Integer>                focusHorizon ()
d217 1
a217 1
   return  getAttSpec ((Integer)   null,        focusHorizon);
d220 1
a220 1
public static AttSpec  <double[]>           focusShortageVol ()
d222 1
a222 1
   return  getAttSpec ((double[])  null,    focusShortageVol);
d225 1
a225 1
public static AttSpec  <Boolean>               forcedMultiEq ()
d227 1
a227 1
   return  getAttSpec ((Boolean)   null,       forcedMultiEq);
d230 1
a230 1
public static AttSpec  <double[]>                 fssExecVol ()
d232 1
a232 1
   return  getAttSpec ((double[])  null,          fssExecVol);
d235 1
a235 1
public static AttSpec  <double[]>                  fssSubVol ()
d237 1
a237 1
   return  getAttSpec ((double[])  null,           fssSubVol);
d240 1
a240 1
public static AttSpec  <Boolean>             heurAllocActive ()
d242 1
a242 1
   return  getAttSpec ((Boolean)   null,     heurAllocActive);
d245 1
a245 1
public static AttSpec  <Boolean>             highPrecisionWD ()
d247 1
a247 1
   return  getAttSpec ((Boolean)   null,     highPrecisionWD);
d250 1
a250 1
public static AttSpec  <int[]>                  impactPeriod ()
d252 1
a252 1
   return  getAttSpec ((int[])     null,        impactPeriod);
d255 1
a255 1
public static AttSpec  <double[]>                 incLotSize ()
d257 1
a257 1
   return  getAttSpec ((double[])  null,          incLotSize);
d260 1
a260 1
public static AttSpec  <double[]>                incLotSize2 ()
d262 1
a262 1
   return  getAttSpec ((double[])  null,         incLotSize2);
d265 1
a265 1
public static AttSpec  <Boolean>          independentOffsets ()
d267 1
a267 1
   return  getAttSpec ((Boolean)   null,  independentOffsets);
d270 1
a270 1
public static AttSpec  <Boolean>                 intExecVols ()
d272 1
a272 1
   return  getAttSpec ((Boolean)   null,         intExecVols);
d275 1
a275 1
public static AttSpec  <Boolean>                 intShipVols ()
d277 1
a277 1
   return  getAttSpec ((Boolean)   null,         intShipVols);
d280 1
a280 1
public static AttSpec  <Boolean>                  intSubVols ()
d282 1
a282 1
   return  getAttSpec ((Boolean)   null,          intSubVols);
d285 1
a285 1
public static AttSpec  <Integer>                latestPeriod ()
d287 1
a287 1
   return  getAttSpec ((Integer)   null,        latestPeriod);
d290 1
a290 1
public static AttSpec  <double[]>             lotSize2Thresh ()
d292 1
a292 1
   return  getAttSpec ((double[])  null,      lotSize2Thresh);
d295 1
a295 1
public static AttSpec  <Double>                   lotSizeTol ()
d297 1
a297 1
   return  getAttSpec ((Double)    null,          lotSizeTol);
d300 1
a300 1
public static AttSpec  <Boolean>                      mandEC ()
d302 1
a302 1
   return  getAttSpec ((Boolean)   null,              mandEC);
d305 1
a305 1
public static AttSpec  <double[]>                 minLotSize ()
d307 1
a307 1
   return  getAttSpec ((double[])  null,          minLotSize);
d310 1
a310 1
public static AttSpec  <double[]>                minLotSize2 ()
d312 1
a312 1
   return  getAttSpec ((double[])  null,         minLotSize2);
d315 1
a315 1
public static AttSpec  <Boolean>               minimalExcess ()
d317 1
a317 1
   return  getAttSpec ((Boolean)   null,       minimalExcess);
d320 1
a320 1
public static AttSpec  <Boolean>                     mipMode ()
d322 1
a322 1
   return  getAttSpec ((Boolean)   null,             mipMode);
d325 1
a325 1
public static AttSpec  <double[]>                 mrpConsVol ()
d327 1
a327 1
   return  getAttSpec ((double[])  null,          mrpConsVol);
d330 1
a330 1
public static AttSpec  <double[]>               mrpExcessVol ()
d332 1
a332 1
   return  getAttSpec ((double[])  null,        mrpExcessVol);
d335 1
a335 1
public static AttSpec  <double[]>                 mrpExecVol ()
d337 1
a337 1
   return  getAttSpec ((double[])  null,          mrpExecVol);
d340 1
a340 1
public static AttSpec  <Boolean>              mrpNetAllowed ()
d342 1
a342 1
   return  getAttSpec ((Boolean)   null,      mrpNetAllowed);
d345 1
a345 1
public static AttSpec  <double[]>             mrpResidualVol ()
d347 1
a347 1
   return  getAttSpec ((double[])  null,      mrpResidualVol);
d350 1
a350 1
public static AttSpec  <double[]>                  mrpSubVol ()
d352 1
a352 1
   return  getAttSpec ((double[])  null,           mrpSubVol);
d355 1
a355 1
public static AttSpec  <Boolean>                   multiExec ()
d357 1
a357 1
   return  getAttSpec ((Boolean)   null,           multiExec);
d360 1
a360 1
public static AttSpec  <Boolean>                  multiRoute ()
d362 1
a362 1
   return  getAttSpec ((Boolean)   null,          multiRoute);
d365 1
a365 1
public static AttSpec  <Integer>                  nScenarios ()
d367 1
a367 1
   return  getAttSpec ((Integer)   null,          nScenarios);
d370 1
a370 1
public static AttSpec  <Boolean>                  netAllowed ()
d372 1
a372 1
   return  getAttSpec ((Boolean)   null,          netAllowed);
d375 1
a375 1
public static AttSpec  <Boolean>                nstnResidual ()
d377 1
a377 1
   return  getAttSpec ((Boolean)   null,        nstnResidual);
d380 1
a380 1
public static AttSpec  <Integer>                 objectStage ()
d382 1
a382 1
   return  getAttSpec ((Integer)   null,         objectStage);
d385 1
a385 1
public static AttSpec  <double[]>                     offset ()
d387 1
a387 1
   return  getAttSpec ((double[])  null,              offset);
d390 1
a390 1
public static AttSpec  <Boolean>                     penExec ()
d392 1
a392 1
   return  getAttSpec ((Boolean)   null,             penExec);
d395 1
a395 1
public static AttSpec  <Boolean>                 perfPegging ()
d397 1
a397 1
   return  getAttSpec ((Boolean)   null,         perfPegging);
d400 1
a400 1
public static AttSpec  <int[]>                   periodStage ()
d402 1
a402 1
   return  getAttSpec ((int[])     null,         periodStage);
d405 1
a405 1
public static AttSpec  <Boolean>             pgdCritListMode ()
d407 1
a407 1
   return  getAttSpec ((Boolean)   null,     pgdCritListMode);
d410 1
a410 1
public static AttSpec  <Boolean>                   pipExists ()
d412 1
a412 1
   return  getAttSpec ((Boolean)   null,           pipExists);
d415 1
a415 1
public static AttSpec  <Boolean>              pipSeqFromHeur ()
d417 1
a417 1
   return  getAttSpec ((Boolean)   null,      pipSeqFromHeur);
d420 1
a420 1
public static AttSpec  <Boolean>               postprocessed ()
d422 1
a422 1
   return  getAttSpec ((Boolean)   null,       postprocessed);
d425 1
a425 1
public static AttSpec  <Boolean>           prefHighStockSLBs ()
d427 1
a427 1
   return  getAttSpec ((Boolean)   null,   prefHighStockSLBs);
d430 1
a430 1
public static AttSpec  <Boolean>                preprocessed ()
d432 1
a432 1
   return  getAttSpec ((Boolean)   null,        preprocessed);
d435 1
a435 1
public static AttSpec  <int[]>                      priority ()
d437 1
a437 1
   return  getAttSpec ((int[])     null,            priority);
d440 1
a440 1
public static AttSpec  <Double>                  probability ()
d442 1
a442 1
   return  getAttSpec ((Double)    null,         probability);
d445 1
a445 1
public static AttSpec  <double[]>                    prodVol ()
d447 1
a447 1
   return  getAttSpec ((double[])  null,             prodVol);
d450 1
a450 1
public static AttSpec  <double[]>                productRate ()
d452 1
a452 1
   return  getAttSpec ((double[])  null,         productRate);
d455 1
a455 1
public static AttSpec  <boolean[]>                   propRtg ()
d457 1
a457 1
   return  getAttSpec ((boolean[]) null,             propRtg);
d460 1
a460 1
public static AttSpec  <double[]>                     reqVol ()
d462 1
a462 1
   return  getAttSpec ((double[])  null,              reqVol);
d465 1
a465 1
public static AttSpec  <double[]>                residualVol ()
d467 1
a467 1
   return  getAttSpec ((double[])  null,         residualVol);
d470 1
a470 1
public static AttSpec  <Boolean>            respectStockSLBs ()
d472 1
a472 1
   return  getAttSpec ((Boolean)   null,    respectStockSLBs);
d475 1
a475 1
public static AttSpec  <Boolean>                roundReqVols ()
d477 1
a477 1
   return  getAttSpec ((Boolean)   null,        roundReqVols);
d480 1
a480 1
public static AttSpec  <double[]>               routingShare ()
d482 1
a482 1
   return  getAttSpec ((double[])  null,        routingShare);
d485 1
a485 1
public static AttSpec  <Boolean>                scrapAllowed ()
d487 1
a487 1
   return  getAttSpec ((Boolean)   null,        scrapAllowed);
d490 1
a490 1
public static AttSpec  <double[]>                  scrapCost ()
d492 1
a492 1
   return  getAttSpec ((double[])  null,           scrapCost);
d495 1
a495 1
public static AttSpec  <double[]>                   scrapVol ()
d497 1
a497 1
   return  getAttSpec ((double[])  null,            scrapVol);
d500 1
a500 1
public static AttSpec  <Double>                    searchInc ()
d502 1
a502 1
   return  getAttSpec ((Double)    null,           searchInc);
d505 1
a505 1
public static AttSpec  <Boolean>                   selForDel ()
d507 1
a507 1
   return  getAttSpec ((Boolean)   null,           selForDel);
d510 1
a510 1
public static AttSpec  <Boolean>                    selSplit ()
d512 1
a512 1
   return  getAttSpec ((Boolean)   null,            selSplit);
d515 1
a515 1
public static AttSpec  <double[]>                shadowPrice ()
d517 1
a517 1
   return  getAttSpec ((double[])  null,         shadowPrice);
d520 1
a520 1
public static AttSpec  <Boolean>             shipLateAllowed ()
d522 1
a522 1
   return  getAttSpec ((Boolean)   null,     shipLateAllowed);
d525 1
a525 1
public static AttSpec  <int[]>                    shipLateUB ()
d527 1
a527 1
   return  getAttSpec ((int[])     null,          shipLateUB);
d530 1
a530 1
public static AttSpec  <double[]>                 shipReward ()
d532 1
a532 1
   return  getAttSpec ((double[])  null,          shipReward);
d535 1
a535 1
public static AttSpec  <double[]>                    shipVol ()
d537 1
a537 1
   return  getAttSpec ((double[])  null,             shipVol);
d540 1
a540 1
public static AttSpec  <Boolean>                singleSource ()
d542 1
a542 1
   return  getAttSpec ((Boolean)   null,        singleSource);
d545 1
a545 1
public static AttSpec  <Boolean>                skipFailures ()
d547 1
a547 1
   return  getAttSpec ((Boolean)   null,        skipFailures);
d550 1
a550 1
public static AttSpec  <Boolean>               stageByObject ()
d552 1
a552 1
   return  getAttSpec ((Boolean)   null,       stageByObject);
d555 1
a555 1
public static AttSpec  <Boolean>                   stochMode ()
d557 1
a557 1
   return  getAttSpec ((Boolean)   null,           stochMode);
d560 1
a560 1
public static AttSpec  <Boolean>               stochSolnMode ()
d562 1
a562 1
   return  getAttSpec ((Boolean)   null,       stochSolnMode);
d565 1
a565 1
public static AttSpec  <double[]>                  stockCost ()
d567 1
a567 1
   return  getAttSpec ((double[])  null,           stockCost);
d570 1
a570 1
public static AttSpec  <Boolean>           stockReallocation ()
d572 1
a572 1
   return  getAttSpec ((Boolean)   null,   stockReallocation);
d575 1
a575 1
public static AttSpec  <double[]>                   stockVol ()
d577 1
a577 1
   return  getAttSpec ((double[])  null,            stockVol);
d580 1
a580 1
public static AttSpec  <double[]>                    subCost ()
d582 1
a582 1
   return  getAttSpec ((double[])  null,             subCost);
d585 1
a585 1
public static AttSpec  <double[]>                     subVol ()
d587 1
a587 1
   return  getAttSpec ((double[])  null,              subVol);
d590 1
a590 1
public static AttSpec  <double[]>                 supplyVol ()
d592 1
a592 1
   return  getAttSpec ((double[])  null,          supplyVol);
d595 1
a595 1
public static AttSpec  <Boolean>              tieBreakPropRt ()
d597 1
a597 1
   return  getAttSpec ((Boolean)   null,      tieBreakPropRt);
d600 1
a600 1
public static AttSpec  <Boolean>                truncOffsets ()
d602 1
a602 1
   return  getAttSpec ((Boolean)   null,        truncOffsets);
d605 1
a605 1
public static AttSpec  <Boolean>            twoLevelLotSizes ()
d607 1
a607 1
   return  getAttSpec ((Boolean)   null,    twoLevelLotSizes);
d610 1
a610 1
public static AttSpec  <Boolean>             twoWayMultiExec ()
d612 1
a612 1
   return  getAttSpec ((Boolean)   null,     twoWayMultiExec);
d615 1
a615 1
public static AttSpec  <Boolean>            useFocusHorizons ()
d617 1
a617 1
   return  getAttSpec ((Boolean)   null,    useFocusHorizons);
d620 1
a620 1
public static AttSpec  <Boolean>               userHeurStart ()
d622 1
a622 1
   return  getAttSpec ((Boolean)   null,       userHeurStart);
d625 1
a625 1
public static AttSpec  <Double>                      wbounds ()
d627 1
a627 1
   return  getAttSpec ((Double)    null,             wbounds);
d630 1
a630 1
public static AttSpec  <double[]>                  yieldRate ()
d632 1
a632 1
   return  getAttSpec ((double[])  null,           yieldRate);
@

