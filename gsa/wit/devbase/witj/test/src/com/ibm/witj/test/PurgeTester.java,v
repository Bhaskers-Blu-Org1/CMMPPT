head	1.24;
access;
symbols;
locks; strict;
comment	@# @;


1.24
date	2011.05.04.22.15.53;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.05.02.18.32.43;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2009.10.28.21.47.37;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2009.06.15.15.54.13;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.05.08.22.13.13;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.04.24.17.42.53;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.04.20.18.24.10;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.04.20.16.09.13;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.03.13.22.30.59;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.03.13.21.09.00;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.13.19.32.24;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.03.12.19.05.27;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.03.10.21.30.41;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.03.10.21.08.01;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.03.10.16.24.10;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.03.10.15.54.31;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.03.09.22.02.36;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.03.09.21.56.33;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.03.09.21.51.22;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.03.06.23.43.49;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.03.06.23.23.06;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.03.06.17.17.08;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.03.05.23.02.44;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.03.04.15.21.55;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.24
log
@setValue ==> set
getValue ==> get
@
text
@
//==============================================================================
// WIT-J/Test Source File PurgeTester.java.
//==============================================================================

package       com.ibm.witj.test;

import        com.ibm.witj.*;
import static com.ibm.witj.Attribute.*;
import static com.ibm.witj.Part.Category.*;

import       java.util.*;

//==============================================================================
// Class PurgeTester
//
// Responsible for performing a test of the purgeData method of class Problem.
//==============================================================================

final class PurgeTester
{
//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// performTest ().
//
// Performs a test of theProblem.purgeData ().
//------------------------------------------------------------------------------

   static void performTest ()
      {
      PurgeTester thePurgeTester;

      thePurgeTester = new PurgeTester ();

      thePurgeTester.perfTest ();
      }

//==============================================================================
// Private Constructor
//==============================================================================

   private PurgeTester ()
      {
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// perfTest ().
//
// Internal implementation of performTest ().
//------------------------------------------------------------------------------

   private void perfTest ()
      {
      List <Component> prePurgeComponents;

      setUpProblem ();

      buildComponents ();

      setSelForDels ();

      prePurgeComponents =
         new ArrayList <Component> (myProblem.getComponents ());

      println (
         "\n"
       + "All Components before purgeData ():\n");

      for (Component theComp: prePurgeComponents)
         println (theComp);

      myProblem.purgeData ();

      println (
         "\n"
       + "All Components after purgeData ():\n");

      for (Component theComp: prePurgeComponents)
         println (theComp);

      println (
         "\n"
       + "Listed Components after purgeData ():\n");

      for (Component theComp: myProblem.getComponents ())
         println (theComp);

      println ("");
      println ("Part C:      " + myProblem.getPart      ("C"));
      println ("Part D:      " + myProblem.getPart      ("D"));
      println ("Operation I: " + myProblem.getOperation ("I"));
      println ("Operation J: " + myProblem.getOperation ("J"));

      printPartComponents     ();
      printOpnComponents      ();
      printBomEntryComponents ();

      myProblem.deactivate ();
      }

//------------------------------------------------------------------------------
// setUpProblem ()
//
// Creates and sets up myProblem.
//------------------------------------------------------------------------------

   private void setUpProblem ()
      {
      myProblem = Problem.newInstance ();

      myProblem.getMessageMgr ().setMesgFileAccessMode ("a");
      myProblem.getMessageMgr ().setMesgFileName       ("UnitTester.output");
      }

//------------------------------------------------------------------------------
// buildComponents ()
//
// Builds the Components;
//------------------------------------------------------------------------------

   private void buildComponents ()
      {
      myPartA    = Part      .newInstance (myProblem,  "A", CAPACITY);
      myPartB    = Part      .newInstance (myProblem,  "B", CAPACITY);
      myPartC    = Part      .newInstance (myProblem,  "C", MATERIAL);
      myPartD    = Part      .newInstance (myProblem,  "D", MATERIAL);
      myPartE    = Part      .newInstance (myProblem,  "E", MATERIAL);

      myDemandCF = Demand    .newInstance (myPartC,    "F");
      myDemandEG = Demand    .newInstance (myPartE,    "G");
      myDemandEH = Demand    .newInstance (myPartE,    "H");

      myOpnI     = Operation .newInstance (myProblem,  "I");
      myOpnJ     = Operation .newInstance (myProblem,  "J");
      myOpnK     = Operation .newInstance (myProblem,  "K");

      myBomEntIA = BomEntry  .newInstance (myOpnI,     myPartA);
      myBomEntJB = BomEntry  .newInstance (myOpnJ,     myPartB);
      myBomEntKB = BomEntry  .newInstance (myOpnK,     myPartB);
      myBomEntKC = BomEntry  .newInstance (myOpnK,     myPartC);
      myBomEntKD = BomEntry  .newInstance (myOpnK,     myPartD);
   
      mySubIAA   = Substitute.newInstance (myBomEntIA, myPartA);
      mySubIAB   = Substitute.newInstance (myBomEntIA, myPartB);
      mySubJBA   = Substitute.newInstance (myBomEntJB, myPartA);
      mySubKCD   = Substitute.newInstance (myBomEntKC, myPartD);
      mySubKDC   = Substitute.newInstance (myBomEntKD, myPartC);

      myBopEntIE = BopEntry  .newInstance (myOpnI,     myPartE);
      myBopEntIC = BopEntry  .newInstance (myOpnI,     myPartC);
      myBopEntID = BopEntry  .newInstance (myOpnI,     myPartD);
      myBopEntJD = BopEntry  .newInstance (myOpnJ,     myPartD);
      myBopEntKE = BopEntry  .newInstance (myOpnK,     myPartE);
      }

//------------------------------------------------------------------------------
// setSelForDels ()
//
// Sets the selForDel Attribute as appropriate.
//------------------------------------------------------------------------------

   private void setSelForDels ()
      {
      myOpnI    .set (selForDel, true);

      myPartC   .set (selForDel, true);
      myDemandEG.set (selForDel, true);
      myOpnJ    .set (selForDel, true);
      myBomEntKB.set (selForDel, true);
      mySubIAA  .set (selForDel, true);
      myBopEntIE.set (selForDel, true);

      myOpnI    .set (selForDel, false);
      }

//------------------------------------------------------------------------------
// printPartComponents ()
//
// Prints the Components associated with each Part.
//------------------------------------------------------------------------------

   private void printPartComponents ()
      {
      Part thePart;

      for (Component theComp: myProblem.getComponents ())
         {
         if (! (theComp instanceof Part))
            continue;

         thePart = (Part) theComp;

         println ("\n" + thePart + ":");

         printObjects ("Demands",     thePart.getDemands     ());
         printObjects ("BomEntries",  thePart.getBomEntries  ());
         printObjects ("Substitutes", thePart.getSubstitutes ());
         printObjects ("BopEntries",  thePart.getBopEntries  ());
         }
      }

//------------------------------------------------------------------------------
// printOpnComponents ()
//
// Prints the Components associated with each Operation.
//------------------------------------------------------------------------------

   private void printOpnComponents ()
      {
      Operation theOpn;

      for (Component theComp: myProblem.getComponents ())
         {
         if (! (theComp instanceof Operation))
            continue;

         theOpn = (Operation) theComp;

         println ("\n" + theOpn + ":");

         printObjects ("BomEntries",  theOpn.getBomEntries ());
         printObjects ("BopEntries",  theOpn.getBopEntries ());
         }
      }

//------------------------------------------------------------------------------
// printBomEntryComponents ()
//
// Prints the Components associated with each BomEntry.
//------------------------------------------------------------------------------

   private void printBomEntryComponents ()
      {
      BomEntry theBomEnt;

      for (Component theComp: myProblem.getComponents ())
         {
         if (! (theComp instanceof BomEntry))
            continue;

         theBomEnt = (BomEntry) theComp;

         println ("\n" + theBomEnt + ":");

         printObjects ("Substitutes", theBomEnt.getSubstitutes ());
         }
      }

//------------------------------------------------------------------------------
// printObjects (theClassName, theObjects)
//
// Prints the Objects in theObjects.
// Uses theClassName in the heading.
//------------------------------------------------------------------------------

   private void printObjects (String theClassName, List <?> theObjects)
      {
      println ("   " + theClassName + ":");

      for (Object theObject: theObjects)
         println ("      " + theObject);
      }

//------------------------------------------------------------------------------
// println (Object theObject)
//------------------------------------------------------------------------------

   private void println (Object theObject)
      {
      System.out.println (theObject);
      }

//==============================================================================
// Private Fields
//==============================================================================

   Problem    myProblem  = null;

   Part       myPartA    = null;
   Part       myPartB    = null;
   Part       myPartC    = null;
   Part       myPartD    = null;
   Part       myPartE    = null;

   Demand     myDemandCF = null;
   Demand     myDemandEG = null;
   Demand     myDemandEH = null;

   Operation  myOpnI     = null;
   Operation  myOpnJ     = null;
   Operation  myOpnK     = null;

   BomEntry   myBomEntIA = null;
   BomEntry   myBomEntJB = null;
   BomEntry   myBomEntKB = null;
   BomEntry   myBomEntKC = null;
   BomEntry   myBomEntKD = null;

   Substitute mySubIAA   = null;
   Substitute mySubIAB   = null;
   Substitute mySubJBA   = null;
   Substitute mySubKCD   = null;
   Substitute mySubKDC   = null;

   BopEntry   myBopEntIE = null;
   BopEntry   myBopEntIC = null;
   BopEntry   myBopEntID = null;
   BopEntry   myBopEntJD = null;
   BopEntry   myBopEntKE = null;

//------------------------------------------------------------------------------
}
@


1.23
log
@Reduced heading comments.
@
text
@d171 1
a171 1
      myOpnI    .setValue (selForDel, true);
d173 6
a178 6
      myPartC   .setValue (selForDel, true);
      myDemandEG.setValue (selForDel, true);
      myOpnJ    .setValue (selForDel, true);
      myBomEntKB.setValue (selForDel, true);
      mySubIAA  .setValue (selForDel, true);
      myBopEntIE.setValue (selForDel, true);
d180 1
a180 1
      myOpnI    .setValue (selForDel, false);
@


1.22
log
@Changed the extensions of test output files from out to output.
@
text
@a3 2
//
// Contains the declaration of class PurgeTester.
@


1.21
log
@Replaced public accessor methods for the Attributes with piublic fields.
@
text
@d121 1
a121 1
      myProblem.getMessageMgr ().setMesgFileName       ("UnitTester.out");
@


1.20
log
@Removed the "enabled" concept from WIT-J.
@
text
@d173 1
a173 1
      myOpnI    .setValue (selForDel (), true);
d175 6
a180 6
      myPartC   .setValue (selForDel (), true);
      myDemandEG.setValue (selForDel (), true);
      myOpnJ    .setValue (selForDel (), true);
      myBomEntKB.setValue (selForDel (), true);
      mySubIAA  .setValue (selForDel (), true);
      myBopEntIE.setValue (selForDel (), true);
d182 1
a182 1
      myOpnI    .setValue (selForDel (), false);
@


1.19
log
@Timing test.
@
text
@a119 1
      myProblem.getMessageMgr ().setQuiet              (true);
a121 2

      myProblem.enable ();
@


1.18
log
@Made some public methods package internal.
@
text
@d29 1
a29 1
// performPurgeTest ().
d34 1
a34 1
   static void performPurgeTest ()
d40 1
a40 1
      thePurgeTester.performTest ();
d56 1
a56 1
// performTest ().
d58 1
a58 1
// Performs a test of theProblem.purgeData ().
d61 1
a61 1
   private void performTest ()
@


1.17
log
@Changed the name of class NewsVender to NewsVendor.
Further implementation of class NewsVendor.
@
text
@d34 1
a34 1
   public static void performPurgeTest ()
@


1.16
log
@Changed the following methods to return an unmodifiable List:

   thePart     .getDemands     ()
   thePart     .getBomEntries  ()
   thePart     .getSubstitutes ()
   thePart     .getBopEntries  ()
   theOperation.getBomEntries  ()
   theOperation.getBopEntries  ()
   theBomEntry .getSubstitutes ()
@
text
@d289 1
a289 1
      Problem    myProblem  = null;
d291 31
a321 31
      Part       myPartA    = null;
      Part       myPartB    = null;
      Part       myPartC    = null;
      Part       myPartD    = null;
      Part       myPartE    = null;

      Demand     myDemandCF = null;
      Demand     myDemandEG = null;
      Demand     myDemandEH = null;

      Operation  myOpnI     = null;
      Operation  myOpnJ     = null;
      Operation  myOpnK     = null;

      BomEntry   myBomEntIA = null;
      BomEntry   myBomEntJB = null;
      BomEntry   myBomEntKB = null;
      BomEntry   myBomEntKC = null;
      BomEntry   myBomEntKD = null;

      Substitute mySubIAA   = null;
      Substitute mySubIAB   = null;
      Substitute mySubJBA   = null;
      Substitute mySubKCD   = null;
      Substitute mySubKDC   = null;

      BopEntry   myBopEntIE = null;
      BopEntry   myBopEntIC = null;
      BopEntry   myBopEntID = null;
      BopEntry   myBopEntJD = null;
      BopEntry   myBopEntKE = null;
@


1.15
log
@Changed theProblem.getComponents () to return an unmodifiable view.
@
text
@d268 1
a268 1
   private void printObjects (String theClassName, Object[] theObjects)
@


1.14
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d63 1
a63 1
      Component[] prePurgeComponents;
d71 2
a72 1
      prePurgeComponents = myProblem.getComponents ();
@


1.13
log
@Added deactivation to the purge test.
@
text
@d63 1
a63 1
      Element[] prePurgeElements;
d67 1
a67 1
      buildElements ();
d71 1
a71 1
      prePurgeElements = myProblem.getElements ();
d75 1
a75 1
       + "All Elements before purgeData ():\n");
d77 2
a78 2
      for (Element theElement: prePurgeElements)
         println (theElement);
d84 1
a84 1
       + "All Elements after purgeData ():\n");
d86 2
a87 2
      for (Element theElement: prePurgeElements)
         println (theElement);
d91 1
a91 1
       + "Listed Elements after purgeData ():\n");
d93 2
a94 2
      for (Element theElement: myProblem.getElements ())
         println (theElement);
d102 3
a104 3
      printPartElements     ();
      printOpnElements      ();
      printBomEntryElements ();
d127 1
a127 1
// buildElements ()
d129 1
a129 1
// Builds the Elements;
d132 1
a132 1
   private void buildElements ()
d188 1
a188 1
// printPartElements ()
d190 1
a190 1
// Prints the Elements associated with each Part.
d193 1
a193 1
   private void printPartElements ()
d197 1
a197 1
      for (Element theElement: myProblem.getElements ())
d199 1
a199 1
         if (! (theElement instanceof Part))
d202 1
a202 1
         thePart = (Part) theElement;
d214 1
a214 1
// printOpnElements ()
d216 1
a216 1
// Prints the Elements associated with each Operation.
d219 1
a219 1
   private void printOpnElements ()
d223 1
a223 1
      for (Element theElement: myProblem.getElements ())
d225 1
a225 1
         if (! (theElement instanceof Operation))
d228 1
a228 1
         theOpn = (Operation) theElement;
d238 1
a238 1
// printBomEntryElements ()
d240 1
a240 1
// Prints the Elements associated with each BomEntry.
d243 1
a243 1
   private void printBomEntryElements ()
d247 1
a247 1
      for (Element theElement: myProblem.getElements ())
d249 1
a249 1
         if (! (theElement instanceof BomEntry))
d252 1
a252 1
         theBomEnt = (BomEntry) theElement;
@


1.12
log
@purgeData
@
text
@d105 2
@


1.11
log
@purgeData
@
text
@d96 6
@


1.10
log
@purgeData
@
text
@d75 1
a75 1
       + "Elements before purgeData ():\n");
d84 1
a84 1
       + "Elements after purgeData ():\n");
d89 7
@


1.9
log
@purgeData
@
text
@d63 2
d71 2
d77 2
a78 1
      printElements ();
d86 2
a87 1
      printElements ();
a172 41
// printElements ()
//
// Prints each Element of myProblem.
//------------------------------------------------------------------------------

   private void printElements ()
      {
      println (myPartA);
      println (myPartB);
      println (myPartC);
      println (myPartD);
      println (myPartE);

      println (myDemandCF);
      println (myDemandEG);
      println (myDemandEH);

      println (myOpnI);
      println (myOpnJ);
      println (myOpnK);

      println (myBomEntIA);
      println (myBomEntJB);
      println (myBomEntKB);
      println (myBomEntKC);
      println (myBomEntKD);

      println (mySubIAA);
      println (mySubIAB);
      println (mySubJBA);
      println (mySubKCD);
      println (mySubKDC);

      println (myBopEntIE);
      println (myBopEntIC);
      println (myBopEntID);
      println (myBopEntJD);
      println (myBopEntKE);
      }

//------------------------------------------------------------------------------
@


1.8
log
@purgeData
@
text
@d14 2
d226 4
a229 19
         println ("   Demands:");

         for (Demand theDemand: thePart.getDemands ())
            println ("      " + theDemand);

         println ("   BomEntries:");

         for (BomEntry theBomEnt: thePart.getBomEntries ())
            println ("      " + theBomEnt);

         println ("   Substitutes:");

         for (Substitute theSub: thePart.getSubstitutes ())
            println ("      " + theSub);

         println ("   BopEntries:");

         for (BopEntry theBopEnt: thePart.getBopEntries ())
            println ("      " + theBopEnt);
d252 2
a253 9
         println ("   BomEntries:");

         for (BomEntry theBomEnt: theOpn.getBomEntries ())
            println ("      " + theBomEnt);

         println ("   BopEntries:");

         for (BopEntry theBopEnt: theOpn.getBopEntries ())
            println ("      " + theBopEnt);
d276 14
a289 1
         println ("   Substitutes:");
d291 2
a292 3
         for (Substitute theSub: theBomEnt.getSubstitutes ())
            println ("      " + theSub);
         }
@


1.7
log
@purgeData
@
text
@d81 3
a83 2
      printPartElements ();
      printOpnElements  ();
d278 26
@


1.6
log
@purgeData
@
text
@d82 1
d246 31
@


1.5
log
@purgeData
@
text
@d80 2
d204 41
@


1.4
log
@purgeData
@
text
@d67 6
d75 5
a79 1
      displayElements ();
d161 1
a161 1
// displayElements ()
d166 1
a166 1
   private void displayElements ()
a167 4
      println (
         "\n\n"
       + "Results for test of purgeData ():\n");

@


1.3
log
@purgeData
@
text
@d153 1
a153 1
// Prints each Element of myProblem and indicates whether or not it is active.
d158 1
a158 1
      System.out.println (
d162 31
a192 31
      display (myPartA);
      display (myPartB);
      display (myPartC);
      display (myPartD);
      display (myPartE);

      display (myDemandCF);
      display (myDemandEG);
      display (myDemandEH);

      display (myOpnI);
      display (myOpnJ);
      display (myOpnK);

      display (myBomEntIA);
      display (myBomEntJB);
      display (myBomEntKB);
      display (myBomEntKC);
      display (myBomEntKD);

      display (mySubIAA);
      display (mySubIAB);
      display (mySubJBA);
      display (mySubKCD);
      display (mySubKDC);

      display (myBopEntIE);
      display (myBopEntIC);
      display (myBopEntID);
      display (myBopEntJD);
      display (myBopEntKE);
d196 1
a196 1
// display (Element theElement)
d199 1
a199 1
   private void display (Element theElement)
d201 1
a201 3
      System.out.println (
         (theElement.isActive ()? "Active:   ": "Inactive: ")
       + theElement);
@


1.2
log
@purgeData
@
text
@d61 1
a61 1
      buildProblem ();
d68 2
d73 1
a73 1
// buildProblem ()
d78 1
a78 1
   private void buildProblem ()
d150 56
@


1.1
log
@Added class PurgeTester.
@
text
@d80 3
a82 2
      myProblem.getMessageMgr ().setQuiet        (true);
      myProblem.getMessageMgr ().setMesgFileName ("ErrTester.out");
@

