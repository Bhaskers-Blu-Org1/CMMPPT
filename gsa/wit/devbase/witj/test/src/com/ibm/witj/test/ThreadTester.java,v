head	1.11;
access;
symbols;
locks; strict;
comment	@# @;


1.11
date	2011.05.04.22.15.55;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.05.02.18.32.45;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.13.16.59.56;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.07.23.48.09;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.10.07.22.43.39;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.10.06.20.15.52;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.10.06.18.21.26;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.01.23.00.55;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.01.19.50.34;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.01.16.14.23;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.30.22.47.15;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.11
log
@setValue ==> set
getValue ==> get
@
text
@
//==============================================================================
// WIT-J/Test Source File ThreadTester.java.
//==============================================================================

package       com.ibm.witj.test;

import        com.ibm.witj.*;
import static com.ibm.witj.Attribute.*;
import static com.ibm.witj.MessageGroup.*;

//==============================================================================
// Class ThreadTester
//
// Responsible for performing a test of WIT-J's thread safety capabilities.
//==============================================================================

final class ThreadTester implements Runnable
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// run ().
//
// Override from interface Runnable.
// This is the run method used by secondThread.
//------------------------------------------------------------------------------

   public void run ()
      {
      continueCase ();
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// performTest ().
//
// Performs a complete WIT-J thread safety test.
//------------------------------------------------------------------------------

   static void performTest ()
      {
      int theCaseIdx;

      for (theCaseIdx = 1; theCaseIdx <= 4; theCaseIdx ++)
         {
         new ThreadTester (theCaseIdx).performCase ();
         }
      }

//==============================================================================
// Private Constructor
//==============================================================================

   private ThreadTester (int theCaseIdx)
      {
      myCaseIndex  = theCaseIdx;

      secondThread = new Thread (this);
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// performCase ().
//
// Performs the selected thread safety test case.
//------------------------------------------------------------------------------

   private void performCase ()
      {
      switch (myCaseIndex)
         {
         case 1:
            {
            performCase1 ();
            break;
            }

         case 2:
            {
            performCase2 ();
            break;
            }

         case 3:
            {
            performCase3 ();
            break;
            }

         case 4:
            {
            performCase4 ();
            break;
            }

         default:
            {
            throw new AssertionError ();
            }
         }
      }

//------------------------------------------------------------------------------
// continueCase ()
//
// Performs those aspects of the selected thread safety test case to be done in
// a second Thread.
//------------------------------------------------------------------------------

   private void continueCase ()
      {
      switch (myCaseIndex)
         {
         case 1:
            {
            continueCase1 ();
            break;
            }

         case 2:
            {
            continueCase2 ();
            break;
            }

         case 3:
            {
            continueCase3 ();
            break;
            }

         case 4:
            {
            continueCase4 ();
            break;
            }

         default:
            {
            throw new AssertionError ();
            }
         }
      }

//------------------------------------------------------------------------------
// performCase1 ().
//
// Performs thread safety test case 1.
//------------------------------------------------------------------------------

   private void performCase1 ()
      {
      printHeading (
         "   Invokes a method of a ThreadedObject from outside the\n"
       + "   ThreadedObject's associated Thread.");

      myProblem   = Problem  .newInstance ();
      myOperation = Operation.newInstance (myProblem, "A");

      myProblem.getMessageMgr ().flushFile ();

      System.out.printf ("\n\n");

      secondThread.start ();

      joinSecondThread ();

      myProblem.deactivate ();

      printClosing ();
      }

//------------------------------------------------------------------------------
// continueCase1 ().
//
// Performs those aspects of thread safety test case 1 to be done in a second
// Thread.
//------------------------------------------------------------------------------

   private void continueCase1 ()
      {
      try
         {
         myOperation.get (execVol);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }
      }

//------------------------------------------------------------------------------
// performCase2 ().
//
// Performs thread safety test case 2.
//------------------------------------------------------------------------------

   private void performCase2 ()
      {
      printHeading (
         "   Passes a ThreadedObject as an argument to a method from outside\n"
       + "   the ThreadedObject's associated Thread.");

      myProblem = Problem.newInstance ();

      System.out.printf ("\n");

      secondThread.start ();

      joinSecondThread ();

      myProblem.deactivate ();

      printClosing ();
      }

//------------------------------------------------------------------------------
// continueCase2 ().
//
// Performs those aspects of thread safety test case 2 to be done in a second
// Thread.
//------------------------------------------------------------------------------

   private void continueCase2 ()
      {
      try
         {
         Operation.newInstance (myProblem, "A");

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }
      }

//------------------------------------------------------------------------------
// performCase3 ().
//
// Performs thread safety test case 3.
//------------------------------------------------------------------------------

   private void performCase3 ()
      {
      Problem theProblem;

      printHeading (
         "   Invokes readData in two threads at the same time.");

      theProblem = Problem.newInstance ();

      secondThread.start ();

      synchronized (this)
         {
         while (! t2IsReady)
            waitForNotify ();
         }

      theProblem.readData ("thread1.data");

      theProblem.getMessageMgr ().flushFile ();

      theProblem.deactivate ();

      joinSecondThread ();

      printClosing ();
      }

//------------------------------------------------------------------------------
// continueCase3 ().
//
// Performs those aspects of thread safety test case 3 to be done in a second
// Thread.
//------------------------------------------------------------------------------

   private void continueCase3 ()
      {
      Problem theProblem;

      theProblem = Problem.newInstance ();

      synchronized (this)
         {
         t2IsReady = true;

         notifyAll ();
         }

      theProblem.readData ("thread2.data");

      theProblem.getMessageMgr ().flushFile ();

      theProblem.deactivate ();
      }

//------------------------------------------------------------------------------
// performCase4 ().
//
// Performs thread safety test case 4.
//------------------------------------------------------------------------------

   private void performCase4 ()
      {
      Problem theProblem;

      printHeading (
         "   Runs optimizing implosion in two threads at the same time.");

      secondThread.start ();

      theProblem = Problem.newInstance ();

      theProblem.getMessageMgr ().setMesgTimesPrint (INFORMATIONAL, 0);

      theProblem.readData ("diner-utf8.data");

      theProblem.getMessageMgr ().setMesgTimesPrint (INFORMATIONAL, -1);

      synchronized (this)
         {
         t1IsReady = true;

         notifyAll ();

         while (! t2IsReady)
            waitForNotify ();
         }

      theProblem.optImplode ();

      theProblem.deactivate  ();

      joinSecondThread ();

      printClosing ();
      }

//------------------------------------------------------------------------------
// continueCase4 ().
//
// Performs those aspects of thread safety test case 4 to be done in a second
// Thread.
//------------------------------------------------------------------------------

   private void continueCase4 ()
      {
      Problem theProblem;

      theProblem = Problem.newInstance ();

      theProblem.getMessageMgr ().setMesgTimesPrint (INFORMATIONAL, 0);

      theProblem.readData ("diner-utf8.data");

      theProblem.getMessageMgr ().setMesgTimesPrint (INFORMATIONAL, -1);

      synchronized (this)
         {
         t2IsReady = true;

         notifyAll ();

         while (! t1IsReady)
            waitForNotify ();
         }

      theProblem.optImplode ();

      theProblem.deactivate ();
      }

//------------------------------------------------------------------------------
// joinSecondThread ()
//
// Waits for the second Thread to complete.
//------------------------------------------------------------------------------

   private void joinSecondThread ()
      {
      try
         {
         secondThread.join ();
         }

      catch (InterruptedException theExc)
         {
         theExc.printStackTrace ();

         throw new AssertionError ();
         }
      }

//------------------------------------------------------------------------------
// waitForNotify ()
// 
// Calls wait () in the required try block.
//------------------------------------------------------------------------------

   private void waitForNotify ()
      {
      try
         {
         wait ();
         }

      catch (InterruptedException theExc)
         {
         throw new AssertionError ();
         }
      }

//------------------------------------------------------------------------------
// printHeading (text)
//
// Prints a heading for the selected thread safety test case, where text
// describes the case.
//------------------------------------------------------------------------------

   private void printHeading (String text)
      {
      System.out.printf (
         "\n"
       + "----------------------------------------"
       + "----------------------------------------\n"
       + "WIT-J Thread safety Test Case %d:\n"
       + "%s\n"
       + "----------------------------------------"
       + "----------------------------------------\n",
         myCaseIndex,
         text);
      }

//------------------------------------------------------------------------------
// printClosing ()
//
// Prints a closing for the selected thread safety test case.
//------------------------------------------------------------------------------

   private void printClosing ()
      {
      System.out.printf (
         "\n"
       + "Successful completion of Thread safety Test Case %d.\n",
         myCaseIndex);
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myCaseIndex
//
// The index of the test case to be perfomed.
//------------------------------------------------------------------------------

   private final int myCaseIndex;

//------------------------------------------------------------------------------
// secondThread
//
// The second Thread to be used in any test case.
// Uses this ThreadTester as its Runnable.
//------------------------------------------------------------------------------

   private final Thread secondThread;

//------------------------------------------------------------------------------
// t1IsReady
// t2IsReady
//
// Conditions used for wait/notify.
//------------------------------------------------------------------------------

   private boolean t1IsReady = false;
   private boolean t2IsReady = false;

//------------------------------------------------------------------------------
// Data used by various test cases.
//------------------------------------------------------------------------------

   private Problem   myProblem   = null;
   private Operation myOperation = null;

//==============================================================================
}
@


1.10
log
@Reduced heading comments.
@
text
@d193 1
a193 1
         myOperation.getValue (execVol);
@


1.9
log
@Changed thread safety test case 4 to do optimizing implosion.
Changed "thread-safety" to "thread safety".
@
text
@a3 2
//
// Contains the declaration of class ThreadTester.
@


1.8
log
@Revised thread-test case 4 to do 2 calls to heuristic implosion at the same
time.
@
text
@d45 1
a45 1
// Performs a complete WIT-J thread-safety test.
d76 1
a76 1
// Performs the selected thread-safety test case.
d117 1
a117 1
// Performs those aspects of the selected thread-safety test case to be done in
d159 1
a159 1
// Performs thread-safety test case 1.
d187 1
a187 1
// Performs those aspects of thread-safety test case 1 to be done in a second
d209 1
a209 1
// Performs thread-safety test case 2.
d234 1
a234 1
// Performs those aspects of thread-safety test case 2 to be done in a second
d256 1
a256 1
// Performs thread-safety test case 3.
d290 1
a290 1
// Performs those aspects of thread-safety test case 3 to be done in a second
d317 1
a317 1
// Performs thread-safety test case 4.
d325 1
a325 1
         "   Runs heuristic implosion in two threads at the same time.");
d347 1
a347 1
      theProblem.heurImplode ();
d359 1
a359 1
// Performs those aspects of thread-safety test case 4 to be done in a second
d385 1
a385 1
      theProblem.heurImplode ();
d433 1
a433 1
// Prints a heading for the selected thread-safety test case, where text
d443 1
a443 1
       + "WIT-J Thread-Safety Test Case %d:\n"
d454 1
a454 1
// Prints a closing for the selected thread-safety test case.
d461 1
a461 1
       + "Successful completion of Thread-Safety Test Case %d.\n",
@


1.7
log
@Removed synchronization of CoordinatorCOR ctor.
@
text
@d270 1
a270 1
      try
d272 2
a273 10
         synchronized (this)
            {
            while (! ready)
               wait ();
            }
         }

      catch (InterruptedException theExc)
         {
         throw new AssertionError ();
d302 1
a302 1
         ready = true;
d324 2
a325 1
      printHeading ("   Creates two Problems simultaneously.");
d331 19
a349 1
      theProblem.deactivate ();
d369 18
d412 19
d487 2
a488 1
// ready
d490 1
a490 1
// Condition used for wait/notify.
d493 2
a494 1
   private boolean ready = false;
@


1.6
log
@Implemented thread test case 4.
@
text
@a333 7
      theProblem = Problem.newInstance ();
         //
         // Potentially the first (and therefore synchronous) call to
         // Problem.newInstance ().

      theProblem.deactivate ();

@


1.5
log
@Used the recommended loop structure for wait/notify.
@
text
@d12 1
d52 1
a52 1
      for (theCaseIdx = 1; theCaseIdx <= 3; theCaseIdx ++)
d101 6
d143 6
d323 46
@


1.4
log
@Fixed bug: The WIT multiThread attribute is now set to true.
Implemented the test for calls to readData from two Threads.
@
text
@d261 2
a262 1
            wait ();
d297 2
d387 8
@


1.3
log
@Implemented thread-safety test cases 1 & 2.
@
text
@d51 1
a51 1
      for (theCaseIdx = 1; theCaseIdx <= 2; theCaseIdx ++)
d94 6
d130 6
d241 66
@


1.2
log
@Restructured the thread test.
@
text
@d8 1
a8 1
package com.ibm.witj.test;
d10 2
a11 1
import  com.ibm.witj.*;
d29 1
d51 1
a51 1
      for (theCaseIdx = 1; theCaseIdx <= 1; theCaseIdx ++)
d63 3
a65 1
      myCaseIndex = theCaseIdx;
d88 6
d118 6
d139 18
d168 114
d296 16
@


1.1
log
@Initial implementation of class ThreadTester.
@
text
@d32 1
a32 1
      continueCurrentCase ();
d47 1
a47 4
      int          theCaseIdx;
      ThreadTester theThreadTester;

      theThreadTester = new ThreadTester ();
d51 1
a51 1
         theThreadTester.perfTestCase (theCaseIdx);
d59 1
a59 1
   private ThreadTester ()
d61 1
d69 1
a69 1
// perfTestCase (theCaseIdx).
d71 1
a71 1
// Performs thread-safety test, case #theCaseIdx.
d74 1
a74 1
   private void perfTestCase (int theCaseIdx)
d76 1
a76 3
      currentCaseIndex = theCaseIdx;

      switch (currentCaseIndex)
a88 2

      currentCaseIndex = 0;
d92 1
a92 1
// continueCurrentCase ()
d94 2
a95 2
// Performs those aspects of the current thread-safety test case to be done in a
// second Thread.
d98 1
a98 1
   private void continueCurrentCase ()
d100 1
a100 1
      switch (currentCaseIndex)
d141 1
a141 1
// currentCaseIndex
d143 1
a143 1
// The index of the test case currently to be perfomed.
d146 1
a146 1
   private int currentCaseIndex = 0;
@

