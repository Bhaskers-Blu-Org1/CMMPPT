head	1.25;
access;
symbols;
locks; strict;
comment	@# @;


1.25
date	2011.05.04.22.15.53;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2011.05.02.18.32.44;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.04.08.20.56.51;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.03.22.22.24.25;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2011.03.19.00.26.31;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2011.02.25.16.07.25;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.10.28.21.47.37;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.09.30.21.26.18;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.09.30.20.45.02;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.09.30.20.22.50;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.09.17.21.46.47;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.06.29.19.56.33;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.06.15.15.54.13;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.06.02.21.57.31;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.05.29.23.42.02;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.05.20.18.47.33;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.05.08.22.13.13;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.05.05.20.17.08;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.04.24.17.42.53;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.04.20.18.24.10;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.04.17.19.52.00;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.04.17.15.38.26;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.04.16.21.08.40;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.16.16.11.45;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.09.19.50.15;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.25
log
@setValue ==> set
getValue ==> get
@
text
@
//==============================================================================
// WIT-J/Test Source File StatusQuoTester.java.
//==============================================================================

package       com.ibm.witj.test;

import        com.ibm.witj.*;
import static com.ibm.witj.Attribute.*;
import static com.ibm.witj.Part.Category.*;
import static com.ibm.witj.MessageGroup.*;

import                java.util.*;

//==============================================================================
// Class StatusQuoTester
//
// Responsible for performing a series of tests on WIT-J each of which
// generates an error condition that that causes a StatusQuoException to be
// thrown. (or a java.lang exception)
//==============================================================================

final class StatusQuoTester
{
//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// performTest ().
//
// Performs a status quo test.
//------------------------------------------------------------------------------

   static void performTest ()
      {
      StatusQuoTester theStatusQuoTester;

      theStatusQuoTester = new StatusQuoTester ();

      theStatusQuoTester.perfTest ();
      }

//==============================================================================
// Private Constructor
//==============================================================================

   private StatusQuoTester ()
      {
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// perfTest ().
//
// Internal implementation of performTest ().
//------------------------------------------------------------------------------

   private void perfTest ()
      {
      testCase1  ();
      testCase2  ();
      testCase3  ();
      testCase4  ();
      testCase5  ();
      testCase6  ();
      testCase7  ();
      testCase8  ();
      testCase9  ();
      testCase10 ();
      testCase11 ();
      testCase12 ();
      testCase13 ();
      testCase14 ();
      testCase15 ();
      testCase16 ();
      testCase17 ();
      testCase18 ();
      testCase19 ();
      testCase20 ();
      testCase21 ();
      testCase22 ();
      testCase23 ();
      testCase24 ();
      testCase25 ();
      testCase26 ();

      System.out.println (
         "\n"
       + "Normal termination of status quo test.");
      }

//------------------------------------------------------------------------------
// testCase1 ().
//
// Performs status quo test case 1.
//------------------------------------------------------------------------------

   private void testCase1 ()
      {
      Problem theProblem;

      printHeading (
         1,
         "Call to an active method on an inactive PreservedObject.");

      theProblem = newProblem ();

      theProblem.deactivate ();

      try
         {
         theProblem.displayData ("error.txt");

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      printClosing (1);
      }

//------------------------------------------------------------------------------
// testCase2 ().
//
// Performs status quo test case 2.
//------------------------------------------------------------------------------

   private void testCase2 ()
      {
      Class <? extends Component> theClass;

      printHeading (
         2,
         "Passing a null reference as the Class argument to "
       + "theAttribute.appliesTo.");

      theClass = null;

      try
         {
         nPeriods.appliesTo (theClass);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      printClosing (2);
      }

//------------------------------------------------------------------------------
// testCase3 ().
//
// Performs status quo test case 3.
//------------------------------------------------------------------------------

   private void testCase3 ()
      {
      Problem  theProblem;
      Part     thePartA;
      double[] supplyVolVal;

      printHeading (
         3,
         "Call to Component.set with an array whose length != nPeriods.");

      theProblem   = newProblem ();

      thePartA     = Part.newInstance (theProblem, "A", MATERIAL);

      supplyVolVal = new double[]{1, 2, 3, 4};
      
      try
         {
         thePartA.set (supplyVol, supplyVolVal);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (3);
      }

//------------------------------------------------------------------------------
// testCase4 ().
//
// Performs status quo test case 4.
//------------------------------------------------------------------------------

   private void testCase4 ()
      {
      Problem theProblem;

      printHeading (
         4,
         "Call to set (nPeriods, ...) in a Problem that has an Operation.");

      theProblem = newProblem ();

      Operation.newInstance (theProblem, "Test Opn 4");

      try
         {
         theProblem.set (nPeriods, 7);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (4);
      }

//------------------------------------------------------------------------------
// testCase5 ().
//
// Performs status quo test case 5.
//------------------------------------------------------------------------------

   private void testCase5 ()
      {
      printHeading (
         5,
         "Call to Attribute.appliesTo with Component as the Class.");

      try
         {
         nPeriods.appliesTo (Component.class);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      printClosing (5);
      }

//------------------------------------------------------------------------------
// testCase6 ().
//
// Performs status quo test case 6.
//------------------------------------------------------------------------------

   private void testCase6 ()
      {
      Problem theProblem;
      Part    thePartA;

      printHeading (
         6,
         "Call to Component.setVectorToScalar with a non-modifiable Attribute."
         );

      theProblem = newProblem ();

      thePartA   = Part.newInstance (theProblem, "A", MATERIAL);

      try
         {
         thePartA.setVectorToScalar (scrapVol, 17);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (6);
      }

//------------------------------------------------------------------------------
// testCase7 ().
//
// Performs status quo test case 7.
//------------------------------------------------------------------------------

   private void testCase7 ()
      {
      Problem theProblem;
      Part    thePartA;

      printHeading (
         7,
         "Call to Component.set for an Component class\n"
       + "to which the Attribute does not apply.");

      theProblem = newProblem ();

      thePartA   = Part.newInstance (theProblem, "A", MATERIAL);

      try
         {
         thePartA.setVectorToScalar (demandVol, 12);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (7);
      }

//------------------------------------------------------------------------------
// testCase8 ().
//
// Performs status quo test case 8.
//------------------------------------------------------------------------------

   private void testCase8 ()
      {
      Problem  theProblem;
      Part     thePartA;
      Demand   theDemandB;
      double[] demandVolVal;

      printHeading (
         8,
         "Call to Component.get with an array whose length != nPeriods.");

      theProblem   = newProblem ();

      thePartA     = Part  .newInstance (theProblem, "A", MATERIAL);
      theDemandB   = Demand.newInstance (thePartA,   "B");

      demandVolVal = new double[4];

      try
         {
         theDemandB.get (demandVol, demandVolVal);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (8);
      }

//------------------------------------------------------------------------------
// testCase9 ().
//
// Performs status quo test case 9.
//------------------------------------------------------------------------------

   private void testCase9 ()
      {
      Problem              theProblem;
      Part                 thePartA;
      Attribute <double[]> theAtt;

      printHeading (
         9,
         "Passing a null reference as the Attribute argument to "
       + "Component.get.");

      theProblem = newProblem ();

      thePartA   = Part.newInstance (theProblem, "A", MATERIAL);

      theAtt     = null;

      try
         {
         thePartA.get (theAtt);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (9);
      }

//------------------------------------------------------------------------------
// testCase10 ().
//
// Performs status quo test case 10.
//------------------------------------------------------------------------------

   private void testCase10 ()
      {
      Problem theProblem;
      Part    thePartA;

      printHeading (
         10,
         "Passing a null reference as the value argument to Component.set.");

      theProblem = newProblem ();

      thePartA   = Part.newInstance (theProblem, "A", MATERIAL);

      try
         {
         thePartA.set (supplyVol, null);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (10);
      }

//------------------------------------------------------------------------------
// testCase11 ().
//
// Performs status quo test case 11.
//------------------------------------------------------------------------------

   private void testCase11 ()
      {
      Problem    theProblemA;
      Operation  theOpnA;
      MessageMgr theMessageMgrB;
      Problem    theProblemB;
      Part       thePartB;

      printHeading (
         11,
         "Constructing a BomEntry whose Operation "
       + "and Part belong to different Problems.");

      theProblemA    = newProblem                    ();
      theOpnA        = Operation  .newInstance       (theProblemA,   "A");

      theProblemB    = Problem    .newInstance       ();
      theMessageMgrB = theProblemB.getMessageMgr     ();
      theMessageMgrB              .setMesgTimesPrint (INFORMATIONAL, 0);
      thePartB       = Part       .newInstance       (theProblemB,   "B",
                                                                     MATERIAL);
      
      try
         {
         BomEntry                 .newInstance       (theOpnA, thePartB);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblemB.deactivate ();
      theProblemA.deactivate ();

      printClosing (11);
      }

//------------------------------------------------------------------------------
// testCase12 ().
//
// Performs status quo test case 12.
//------------------------------------------------------------------------------

   private void testCase12 ()
      {
      Problem theProblem;

      printHeading (
         12,
         "Call to Problem.readData on a Problem that has a Part.");

      theProblem = newProblem ();

      Part.newInstance (theProblem, "A", MATERIAL);

      try
         {
         theProblem.readData ("test.data");

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (12);
      }

//------------------------------------------------------------------------------
// testCase13 ().
//
// Performs status quo test case 13.
//------------------------------------------------------------------------------

   private void testCase13 ()
      {
      Problem theProblem;

      printHeading (
         13,
         "Call to theProblem.getDefaultValue "
       + "with an Attribute that has no default value.");

      theProblem = newProblem ();

      try
         {
         theProblem.getDefaultValue (accelerated);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (13);
      }

//------------------------------------------------------------------------------
// testCase14 ().
//
// Performs status quo test case 14.
//------------------------------------------------------------------------------

   private void testCase14 ()
      {
      Problem  theProblem;
      double[] theDblArr;

      printHeading (
         14,
         "Call to theProblem.getDefaultValue "
       + "with an array whose length is not nPeriods.");

      theProblem = newProblem ();

      theDblArr = new double[14];

      try
         {
         theProblem.getDefaultValue (supplyVol, theDblArr);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (14);
      }

//------------------------------------------------------------------------------
// testCase15 ().
//
// Performs status quo test case 15.
//------------------------------------------------------------------------------

   private void testCase15 ()
      {
      printHeading (
         15,
         "Call to Attribute.asAttribute (Boolean.class) with an Attribute\n"
       + "whose value type is not Boolean.");

      try
         {
         getAttributes ().get (5).asAttribute (Boolean.class);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      printClosing (15);
      }

//------------------------------------------------------------------------------
// testCase16 ().
//
// Performs status quo test case 16.
//------------------------------------------------------------------------------

   private void testCase16 ()
      {
      Problem theProblem;

      printHeading (
         16,
         "Passing an inactive PreservedObject to a method\n"
       + "that requires an active PreservedObject.");

      theProblem = newProblem ();

      theProblem.deactivate ();

      try
         {
         Part.newInstance (theProblem, "A", MATERIAL);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      printClosing (16);
      }

//------------------------------------------------------------------------------
// testCase17 ().
//
// Performs status quo test case 17.
//------------------------------------------------------------------------------

  @@SuppressWarnings ("unchecked")

   private void testCase17 ()
      {
      Problem             theProblem;
      Attribute <Boolean> nPeriodsBool;

      printHeading (
         17,
         "Call to Component.get with an Attribute\n"
       + "that has been cast to a different value type.");

      theProblem   = newProblem ();

      nPeriodsBool = (Attribute <Boolean>) (Object) nPeriods;

      try
         {
         theProblem.get (nPeriodsBool);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (17);
      }

//------------------------------------------------------------------------------
// testCase18 ().
//
// Performs status quo test case 18.
//------------------------------------------------------------------------------

   private void testCase18 ()
      {
      Problem theProblem;

      printHeading (
         18,
         "Call to Problem.performAction with an invalid command.");

      theProblem = newProblem ();

      try
         {
         theProblem.performAction ("Bogus Command");

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (18);
      }

//------------------------------------------------------------------------------
// testCase19 ().
//
// Performs status quo test case 19.
//------------------------------------------------------------------------------

   private void testCase19 ()
      {
      Problem          theProblem;
      List <Component> theCompList;

      printHeading (
         19,
         "Call to a modifying method on an unmodifiable List returned by a "
       + "WIT-J method.");

      theProblem  = newProblem ();

      theCompList = theProblem.getComponents ();

      try
         {
         theCompList.clear ();

         throw new AssertionError ();
         }

      catch (UnsupportedOperationException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (19);
      }

//------------------------------------------------------------------------------
// testCase20 ().
//
// Performs status quo test case 20.
//------------------------------------------------------------------------------

   private void testCase20 ()
      {
      Problem   theProblem;
      Part      thePart;
      Operation theOpn;

      printHeading (
         20,
         "Call to theOpn.getUniqueBomEntryTo (thePart) when theOpn and\n"
       + "thePart are connected by more than one BomEntry.");

      theProblem  = newProblem ();

      thePart     = Part     .newInstance (theProblem, "A", CAPACITY);
      theOpn      = Operation.newInstance (theProblem, "B");

      BomEntry.newInstance (theOpn, thePart);
      BomEntry.newInstance (theOpn, thePart);

      try
         {
         theOpn.getUniqueBomEntryTo (thePart);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (20);
      }

//------------------------------------------------------------------------------
// testCase21 ().
//
// Performs status quo test case 21.
//------------------------------------------------------------------------------

   private void testCase21 ()
      {
      Problem             theProblem;
      Part                thePart;
      Demand              theDemand;
      ArrayList <Demand>  theDemandList;
      ArrayList <Integer> shipPeriodList;
      ArrayList <Double>  desIncVolList;
      ArrayList <Double>  incVolList;

      printHeading (
         21,
         "Call to Problem.eqHeurAlloc "
       + "with a null reference in desIncVolList.");

      theProblem     = newProblem ();

      thePart        = Part  .newInstance (theProblem,  "A", CAPACITY);
      theDemand      = Demand.newInstance (thePart,     "B");

      theDemandList  = new ArrayList <Demand>  (3);
      shipPeriodList = new ArrayList <Integer> (3);
      desIncVolList  = new ArrayList <Double>  (3);
      incVolList     = new ArrayList <Double>  (3);

      theDemandList .add (theDemand);
      shipPeriodList.add (2);
      desIncVolList .add (10.0);

      theDemandList .add (theDemand);
      shipPeriodList.add (8);
      desIncVolList .add (19.0);

      theDemandList .add (theDemand);
      shipPeriodList.add (5);
      desIncVolList .add (null);

      theProblem.startHeurAlloc ();

      try
         {
         theProblem.
            eqHeurAlloc (
               theDemandList,
               shipPeriodList,
               desIncVolList,
               incVolList);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (21);
      }

//------------------------------------------------------------------------------
// testCase22 ().
//
// Performs status quo test case 22.
//------------------------------------------------------------------------------

   private void testCase22 ()
      {
      Problem             theProblem;
      Part                thePart;
      Demand              theDemandB;
      Demand              theDemandC;
      ArrayList <Demand>  theDemandList;
      ArrayList <Integer> shipPeriodList;
      ArrayList <Double>  desIncVolList;
      ArrayList <Double>  incVolList;

      printHeading (
         22,
         "Call to Problem.eqHeurAlloc "
       + "with an inactive Demand in the Demand List.");

      theProblem     = newProblem ();

      thePart        = Part  .newInstance (theProblem,  "A", CAPACITY);
      theDemandB     = Demand.newInstance (thePart,     "B");
      theDemandC     = Demand.newInstance (thePart,     "C");

      theDemandList  = new ArrayList <Demand>  (3);
      shipPeriodList = new ArrayList <Integer> (3);
      desIncVolList  = new ArrayList <Double>  (3);
      incVolList     = new ArrayList <Double>  (3);

      theDemandList .add (theDemandB);
      shipPeriodList.add (2);
      desIncVolList .add (10.0);

      theDemandList .add (theDemandB);
      shipPeriodList.add (8);
      desIncVolList .add (19.0);

      theDemandList .add (theDemandC);
      shipPeriodList.add (5);
      desIncVolList .add (12.0);

      theDemandC.set (selForDel, true);

      theProblem.purgeData ();

      theProblem.startHeurAlloc ();

      try
         {
         theProblem.
            eqHeurAlloc (
               theDemandList,
               shipPeriodList,
               desIncVolList,
               incVolList);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (22);
      }

//------------------------------------------------------------------------------
// testCase23 ().
//
// Performs status quo test case 23.
//------------------------------------------------------------------------------

   private void testCase23 ()
      {
      Problem             theProblem1;
      Part                thePartA;
      Demand              theDemandB;
      Problem             theProblem2;
      Part                thePartC;
      Demand              theDemandD;
      ArrayList <Demand>  theDemandList;
      ArrayList <Integer> shipPeriodList;
      ArrayList <Double>  desIncVolList;
      ArrayList <Double>  incVolList;

      printHeading (
         23,
         "Call to Problem.eqHeurAlloc with a Demand in the Demand List\n"
       + "that does not belong to the Problem.");

      theProblem1    = newProblem ();

      thePartA       = Part  .newInstance (theProblem1, "A", CAPACITY);
      theDemandB     = Demand.newInstance (thePartA,    "B");

      theProblem2    = newProblem ();

      thePartC       = Part  .newInstance (theProblem2, "C", CAPACITY);
      theDemandD     = Demand.newInstance (thePartC,    "D");

      theDemandList  = new ArrayList <Demand>  (3);
      shipPeriodList = new ArrayList <Integer> (3);
      desIncVolList  = new ArrayList <Double>  (3);
      incVolList     = new ArrayList <Double>  (3);

      theDemandList .add (theDemandB);
      shipPeriodList.add (2);
      desIncVolList .add (10.0);

      theDemandList .add (theDemandB);
      shipPeriodList.add (8);
      desIncVolList .add (19.0);

      theDemandList .add (theDemandD);
      shipPeriodList.add (5);
      desIncVolList .add (12.0);

      theProblem1.startHeurAlloc ();

      try
         {
         theProblem1.
            eqHeurAlloc (
               theDemandList,
               shipPeriodList,
               desIncVolList,
               incVolList);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem2.deactivate ();
      theProblem1.deactivate ();

      printClosing (23);
      }

//------------------------------------------------------------------------------
// testCase24 ().
//
// Performs status quo test case 24.
//------------------------------------------------------------------------------

   private void testCase24 ()
      {
      Problem             theProblem;
      Part                thePart;
      Demand              theDemand;
      ArrayList <Demand>  theDemandList;
      ArrayList <Integer> shipPeriodList;
      ArrayList <Double>  desIncVolList;
      ArrayList <Double>  incVolList;

      printHeading (
         24,
         "Call to Problem.eqHeurAlloc with ArrayLists of non-matching size.");

      theProblem     = newProblem ();

      thePart        = Part  .newInstance (theProblem,  "A", CAPACITY);
      theDemand      = Demand.newInstance (thePart,     "B");

      theDemandList  = new ArrayList <Demand>  (3);
      shipPeriodList = new ArrayList <Integer> (3);
      desIncVolList  = new ArrayList <Double>  (3);
      incVolList     = new ArrayList <Double>  (3);

      theDemandList .add (theDemand);
      shipPeriodList.add (2);
      desIncVolList .add (10.0);

      theDemandList .add (theDemand);
      shipPeriodList.add (8);
      desIncVolList .add (19.0);

      theDemandList .add (theDemand);
      shipPeriodList.add (5);

      theProblem.startHeurAlloc ();

      try
         {
         theProblem.
            eqHeurAlloc (
               theDemandList,
               shipPeriodList,
               desIncVolList,
               incVolList);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (24);
      }

//------------------------------------------------------------------------------
// testCase25 ().
//
// Performs status quo test case 25.
//------------------------------------------------------------------------------

   private void testCase25 ()
      {
      Problem theProblem1;
      Problem theProblem2;

      printHeading (
         25,
         "Call to Component.copyComponentData for an instance of class "
       + "Problem.");

      theProblem1 = newProblem ();
      theProblem2 = newProblem ();

      try
         {
         theProblem2.copyComponentData (theProblem1);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem1.deactivate ();
      theProblem2.deactivate ();

      printClosing (25);
      }

//------------------------------------------------------------------------------
// testCase26 ().
//
// Performs status quo test case 26.
//------------------------------------------------------------------------------

   private void testCase26 ()
      {
      Problem   theProblem;
      Part      thePart;
      Operation theOpn;

      printHeading (
         26,
         "Call to Component.copyComponentData with Components of different "
       + "classes.");

      theProblem = newProblem ();

      thePart    = Part     .newInstance (theProblem, "A", MATERIAL);
      theOpn     = Operation.newInstance (theProblem, "B");

      try
         {
         thePart.copyComponentData (theOpn);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (26);
      }

//------------------------------------------------------------------------------
// newProblem ()
//
// Creates and returns a new Problem set up for status quo testing.
//------------------------------------------------------------------------------

   private Problem newProblem ()
      {
      Problem theProblem;

      theProblem = Problem.newInstance ();

      theProblem.getMessageMgr ().setMesgFileAccessMode ("a");

      theProblem.getMessageMgr ().setMesgFileName ("StatusQuoTester.output");

      return theProblem;
      }

//------------------------------------------------------------------------------
// printHeading (theCaseIdx, text)
//
// Prints a heading for the status quo test case of theCaseIdx, where text
// describes status quo test case.
//------------------------------------------------------------------------------

   private void printHeading (int theCaseIdx, String text)
      {
      System.out.printf (
         "\n"
       + "----------------------------------------"
       + "----------------------------------------\n"
       + "WIT-J Status Quo Test Case %d:\n"
       + "%s\n"
       + "----------------------------------------"
       + "----------------------------------------\n"
       + "\n",
         theCaseIdx,
         text);
      }

//------------------------------------------------------------------------------
// printClosing (theCaseIdx)
//
// Prints a closing for the status quo test case of theCaseIdx.
//------------------------------------------------------------------------------

   private void printClosing (int theCaseIdx)
      {
      System.out.printf (
         "\n"
       + "Successful completion of Status Quo Test Case %d.\n",
         theCaseIdx);
      }

//==============================================================================
}
@


1.24
log
@Reduced heading comments.
@
text
@d175 1
a175 1
         "Call to Component.setValue with an array whose length != nPeriods.");
d185 1
a185 1
         thePartA.setValue (supplyVol, supplyVolVal);
d212 1
a212 2
         "Call to setValue (nPeriods, ...) in a Problem "
       + "that has an Operation.");
d220 1
a220 1
         theProblem.setValue (nPeriods, 7);
d312 1
a312 1
         "Call to Component.setValue for an Component class\n"
d351 1
a351 1
         "Call to Component.getValue with an array whose length != nPeriods.");
d362 1
a362 1
         theDemandB.getValue (demandVol, demandVolVal);
d392 1
a392 1
       + "Component.getValue.");
d402 1
a402 1
         thePartA.getValue (theAtt);
d430 1
a430 2
         "Passing a null reference as the value argument to "
       + "Component.setValue.");
d438 1
a438 1
         thePartA.setValue (supplyVol, null);
d682 1
a682 1
         "Call to Component.getValue with an Attribute\n"
d691 1
a691 1
         theProblem.getValue (nPeriodsBool);
d930 1
a930 1
      theDemandC.setValue (selForDel, true);
@


1.23
log
@copyComponentData
@
text
@a3 2
//
// Contains the declaration of class StatusQuoTester.
@


1.22
log
@Replaced setPipSeq with clearPipSeq and appendToPipSeq.
@
text
@d90 2
d1104 76
@


1.21
log
@Revised the arguments to eqHeurAlloc.
@
text
@a89 3
      testCase25 ();
      testCase26 ();
      testCase27 ();
a748 98
      Problem                          theProblem1;
      Problem                          theProblem2;
      Part                             thePart;
      Demand                           theDemand;
      AllocTriple <Demand>             theTriple;
      ArrayList <AllocTriple <Demand>> theTripleList;

      printHeading (
         19,
         "Call to Problem.setPipSeq with a Demand that belongs to\n"
       + "a different Problem.");

      theProblem1   = newProblem ();
      theProblem2   = newProblem ();

      thePart       = Part       .newInstance (theProblem1, "A", CAPACITY);
      theDemand     = Demand     .newInstance (thePart,     "B");
      theTriple     = AllocTriple.newInstance (theDemand, 0, 10);

      theTripleList = new ArrayList <AllocTriple <Demand>> (1);

      theTripleList.add (theTriple);

      try
         {
         theProblem2.setPipSeq (theTripleList);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem2.deactivate ();
      theProblem1.deactivate ();

      printClosing (19);
      }

//------------------------------------------------------------------------------
// testCase20 ().
//
// Performs status quo test case 20.
//------------------------------------------------------------------------------

   private void testCase20 ()
      {
      Problem                          theProblem1;
      Problem                          theProblem2;
      Part                             thePart;
      Demand                           theDemand;
      AllocTriple <Demand>             theTriple;
      ArrayList <AllocTriple <Demand>> theTripleList;

      printHeading (
         20,
         "Call to Problem.setPipSeq with an inactive Demand.");

      theProblem1   = newProblem ();
      theProblem2   = newProblem ();

      thePart       = Part       .newInstance (theProblem1, "A", CAPACITY);
      theDemand     = Demand     .newInstance (thePart,     "B");
      theTriple     = AllocTriple.newInstance (theDemand, 0, 10);

      theTripleList = new ArrayList <AllocTriple <Demand>> (1);

      theTripleList.add (theTriple);

      theProblem1.deactivate ();

      try
         {
         theProblem2.setPipSeq (theTripleList);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem2.deactivate ();

      printClosing (20);
      }

//------------------------------------------------------------------------------
// testCase21 ().
//
// Performs status quo test case 21.
//------------------------------------------------------------------------------

   private void testCase21 ()
      {
d753 1
a753 1
         21,
d775 1
a775 1
      printClosing (21);
d779 1
a779 1
// testCase22 ().
d781 1
a781 1
// Performs status quo test case 22.
d784 1
a784 1
   private void testCase22 ()
d791 1
a791 1
         22,
d817 1
a817 1
      printClosing (22);
d821 1
a821 1
// testCase23 ().
d823 1
a823 1
// Performs status quo test case 23.
d826 1
a826 48
   private void testCase23 ()
      {
      Problem                          theProblem;
      Part                             thePart;
      Demand                           theDemand;
      AllocTriple <Demand>             theTriple;
      ArrayList <AllocTriple <Demand>> theTripleList;

      printHeading (
         23,
         "Call to Problem.setPipSeq with a null reference in the Triple List.");

      theProblem    = newProblem ();

      thePart       = Part       .newInstance (theProblem,  "A", CAPACITY);
      theDemand     = Demand     .newInstance (thePart,     "B");
      theTriple     = AllocTriple.newInstance (theDemand, 0, 10);

      theTripleList = new ArrayList <AllocTriple <Demand>> (3);

      theTripleList.add (theTriple);
      theTripleList.add (null);
      theTripleList.add (theTriple);

      try
         {
         theProblem.setPipSeq (theTripleList);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (23);
      }

//------------------------------------------------------------------------------
// testCase24 ().
//
// Performs status quo test case 24.
//------------------------------------------------------------------------------

   private void testCase24 ()
d837 1
a837 1
         24,
d884 1
a884 1
      printClosing (24);
d888 1
a888 1
// testCase25 ().
d890 1
a890 1
// Performs status quo test case 25.
d893 1
a893 1
   private void testCase25 ()
d905 1
a905 1
         25,
d957 1
a957 1
      printClosing (25);
d961 1
a961 1
// testCase26 ().
d963 1
a963 1
// Performs status quo test case 26.
d966 1
a966 1
   private void testCase26 ()
d980 1
a980 1
         26,
d1033 1
a1033 1
      printClosing (26);
d1037 1
a1037 1
// testCase27 ().
d1039 1
a1039 1
// Performs status quo test case 27.
d1042 1
a1042 1
   private void testCase27 ()
d1053 1
a1053 1
         27,
d1098 1
a1098 1
      printClosing (27);
@


1.20
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@d88 5
d773 1
a773 1
      theTripleList.add (0, theTriple);
d821 1
a821 1
      theTripleList.add (0, theTriple);
d922 328
@


1.19
log
@Changed the extensions of test output files from out to output.
@
text
@d219 1
a219 1
         theProblem.getGlobalAspect ().setValue (nPeriods, 7);
d691 1
a691 1
         theProblem.getGlobalAspect ().getValue (nPeriodsBool);
d756 1
a756 1
         "Call to GlobalAspect.setPipSeq with a Demand that belongs to\n"
d772 1
a772 1
         theProblem2.getGlobalAspect ().setPipSeq (theTripleList);
d805 1
a805 1
         "Call to GlobalAspect.setPipSeq with an inactive Demand.");
d822 1
a822 1
         theProblem2.getGlobalAspect ().setPipSeq (theTripleList);
@


1.18
log
@Removed curCaseIdx.
@
text
@d930 1
a930 1
      theProblem.getMessageMgr ().setMesgFileName ("StatusQuoTester.out");
@


1.17
log
@Removed restriction forbidding WIT-J to be called from more than one Thread.
@
text
@d25 1
a25 1
final class StatusQuoTester implements Runnable
a27 23
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// run ()
//
// Override from interface Runnable.
//------------------------------------------------------------------------------

   public void run ()
      {
      switch (curCaseIdx)
         {
         case 26:
            testCase26T2 ();
            break;

         default:
            throw new AssertionError ();
         }
      }

//==============================================================================
d76 1
d82 2
a87 3
      testCase23 ();
      testCase24 ();
      testCase25 ();
d124 1
a124 1
      printClosing ();
d156 1
a156 1
      printClosing ();
d195 1
a195 1
      printClosing ();
d231 1
a231 1
      printClosing ();
d258 1
a258 1
      printClosing ();
d295 1
a295 1
      printClosing ();
d332 1
a332 1
      printClosing ();
d373 1
a373 1
      printClosing ();
d413 1
a413 1
      printClosing ();
d450 1
a450 1
      printClosing ();
d454 1
a454 1
// testCase12 ().
d456 1
a456 1
// Performs status quo test case 12.
d459 1
a459 1
   private void testCase12 ()
d468 1
a468 1
         12,
d496 1
a496 1
      printClosing ();
d500 1
a500 1
// testCase13 ().
d502 1
a502 1
// Performs status quo test case 13.
d505 1
a505 1
   private void testCase13 ()
d510 1
a510 1
         13,
d531 1
a531 1
      printClosing ();
d535 1
a535 1
// testCase14 ().
d537 1
a537 1
// Performs status quo test case 14.
d540 1
a540 1
   private void testCase14 ()
d545 1
a545 1
         14,
d565 1
a565 1
      printClosing ();
d569 1
a569 1
// testCase15 ().
d571 1
a571 1
// Performs status quo test case 15.
d574 1
a574 1
   private void testCase15 ()
d580 1
a580 1
         15,
d602 1
a602 1
      printClosing ();
d606 1
a606 1
// testCase16 ().
d608 1
a608 1
// Performs status quo test case 16.
d611 1
a611 1
   private void testCase16 ()
d614 1
a614 1
         16,
d630 1
a630 1
      printClosing ();
d634 1
a634 1
// testCase19 ().
d636 1
a636 1
// Performs status quo test case 19.
d639 1
a639 1
   private void testCase19 ()
d644 1
a644 1
         19,
d664 1
a664 1
      printClosing ();
d668 1
a668 1
// testCase20 ().
d670 1
a670 1
// Performs status quo test case 20.
d675 1
a675 1
   private void testCase20 ()
d681 1
a681 1
         20,
d703 1
a703 1
      printClosing ();
d707 1
a707 1
// testCase21 ().
d709 1
a709 1
// Performs status quo test case 21.
d712 1
a712 1
   private void testCase21 ()
d717 1
a717 1
         21,
d736 1
a736 1
      printClosing ();
d740 1
a740 1
// testCase22 ().
d742 1
a742 1
// Performs status quo test case 22.
d745 1
a745 1
   private void testCase22 ()
d755 1
a755 1
         22,
d785 1
a785 1
      printClosing ();
d789 1
a789 1
// testCase23 ().
d791 1
a791 1
// Performs status quo test case 23.
d794 1
a794 1
   private void testCase23 ()
d804 1
a804 1
         23,
d834 1
a834 1
      printClosing ();
d838 1
a838 1
// testCase24 ().
d840 1
a840 1
// Performs status quo test case 24.
d843 1
a843 1
   private void testCase24 ()
d849 1
a849 1
         24,
d871 1
a871 1
      printClosing ();
d875 1
a875 1
// testCase25 ().
d877 1
a877 1
// Performs status quo test case 25.
d880 1
a880 1
   private void testCase25 ()
d887 1
a887 1
         25,
d913 1
a913 58
      printClosing ();
      }

//------------------------------------------------------------------------------
// testCase26 ().
//
// Performs error test case 26.
//------------------------------------------------------------------------------

   private void testCase26 ()
      {
      Thread theThread;

      printHeading (
         26,
         "Calls WIT-J from a second Thread.");

      nPeriods.getValueType ();

      theThread = new Thread (this);

      theThread.start ();

      try
         {
         theThread.join ();
         }

      catch (InterruptedException theExc)
         {
         theExc.printStackTrace ();

         throw new AssertionError ();
         }

      printClosing ();
      }

//------------------------------------------------------------------------------
// testCase26T2 ()
//
// Performs the aspects of test case 26 that are to be done in the second
// Thread.
//------------------------------------------------------------------------------

   private void testCase26T2 ()
      {
      try
         {
         supplyVol.isModifiable ();

//       throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }
a954 2

      curCaseIdx = theCaseIdx;
d958 1
a958 1
// printClosing ()
d960 1
a960 1
// Prints a closing for the current status quo test case.
d963 1
a963 1
   private void printClosing ()
d968 1
a968 1
         curCaseIdx);
a971 12
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// curCaseIdx
//
// The index of the current test case.
//------------------------------------------------------------------------------

   private int curCaseIdx = 0;

//==============================================================================
@


1.16
log
@Made case 26 use Runnable.
@
text
@a110 1
      testCase26 ();
d987 1
a987 1
         throw new AssertionError ();
@


1.15
log
@Implemented minimal thread safety:
   All calls to WIT-J must be from the same Thread or a StatusQuoException
   will be thrown.
@
text
@d25 1
a25 1
final class StatusQuoTester
d28 23
d948 1
a948 1
      SecondThread theSecondThread;
d956 1
a956 1
      theSecondThread = new SecondThread (this);
d958 1
a958 1
      theSecondThread.start ();
d962 1
a962 1
         theSecondThread.join ();
a975 19
// performThread2Tasks ()
//
// Performs the aspects of the test that are to be done in the second Thread.
//------------------------------------------------------------------------------

   private void performThread2Tasks ()
      {
      switch (curCaseIdx)
         {
         case 26:
            testCase26T2 ();
            break;

         default:
            throw new AssertionError ();
         }
      }

//------------------------------------------------------------------------------
a1066 42
// Package-Internal Static Nested Class StatusQuoTester.SecondThread
//
// A Thread to be launched from a StatusQuoTester.
//
// Class Hierarchy:
//
// Thread
//    StatusQuoTester.SecondThread
//==============================================================================

   static class SecondThread extends Thread
   {
   //---------------------------------------------------------------------------
   // run ()
   //
   // Override from class Thread.
   //---------------------------------------------------------------------------

      public void run ()
         {
         myStatusQuoTester.performThread2Tasks ();
         }

   //---------------------------------------------------------------------------
   // Private constructor
   //---------------------------------------------------------------------------

      private SecondThread (StatusQuoTester theStatusQuoTester)
         {
         myStatusQuoTester = theStatusQuoTester;
         }

   //---------------------------------------------------------------------------
   // myStatusQuoTester
   //
   // The StatusQuoTester from which this SecondThread was launched.
   //---------------------------------------------------------------------------

      private final StatusQuoTester myStatusQuoTester;
   }

//==============================================================================
@


1.14
log
@Removed the "place element request" capability.
@
text
@d88 1
d125 1
a125 1
      printClosing (1);
d157 1
a157 1
      printClosing (2);
d196 1
a196 1
      printClosing (3);
d232 1
a232 1
      printClosing (4);
d259 1
a259 1
      printClosing (5);
d296 1
a296 1
      printClosing (6);
d333 1
a333 1
      printClosing (7);
d374 1
a374 1
      printClosing (8);
d414 1
a414 1
      printClosing (9);
d451 1
a451 1
      printClosing (10);
d497 1
a497 1
      printClosing (12);
d532 1
a532 1
      printClosing (13);
d566 1
a566 1
      printClosing (14);
d603 1
a603 1
      printClosing (15);
d631 1
a631 1
      printClosing (16);
d665 1
a665 1
      printClosing (19);
d704 1
a704 1
      printClosing (20);
d737 1
a737 1
      printClosing (21);
d786 1
a786 1
      printClosing (22);
d835 1
a835 1
      printClosing (23);
d872 1
a872 1
      printClosing (24);
d914 77
a990 1
      printClosing (25);
d1032 2
d1037 1
a1037 1
// printClosing (theCaseIdx)
d1039 1
a1039 1
// Prints a closing for the status quo test case of theCaseIdx.
d1042 1
a1042 1
   private void printClosing (int theCaseIdx)
d1047 1
a1047 1
         theCaseIdx);
d1050 4
d1055 50
@


1.13
log
@Replaced public accessor methods for the Attributes with piublic fields.
@
text
@a87 2
      testCase26 ();
      testCase27 ();
a916 74
// testCase26 ().
//
// Performs status quo test case 26.
//------------------------------------------------------------------------------

   private void testCase26 ()
      {
      Problem theProblem;
      Part    thePart;

      printHeading (
         26,
         "Call to theComp.placeVectorElementRequest (...) with an out-of-range "
       + "period argument.");

      theProblem = newProblem ();

      thePart    = Part.newInstance (theProblem, "A", CAPACITY);

      try
         {
         thePart.placeVectorElementRequest (supplyVol, -1, 10);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (26);
      }

//------------------------------------------------------------------------------
// testCase27 ().
//
// Performs status quo test case 27.
//------------------------------------------------------------------------------

   private void testCase27 ()
      {
      Problem   theProblem;
      Operation theOpn;

      printHeading (
         27,
         "Call to theComp.placeHardLBElementRequest (...) with an out-of-range "
       + "period argument.");

      theProblem = newProblem ();

      theOpn     = Operation.newInstance (theProblem, "A");

      try
         {
         theOpn.placeHardLBElementRequest (execBounds, 26, 20);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (27);
      }

//------------------------------------------------------------------------------
@


1.12
log
@Made pegging retrieval methods not use enum PeggingAtt.
@
text
@d148 1
a148 1
         nPeriods ().appliesTo (theClass);
d185 1
a185 1
         thePartA.setValue (supplyVol (), supplyVolVal);
d212 1
a212 1
         "Call to setValue (nPeriods (), ...) in a Problem "
d221 1
a221 1
         theProblem.getGlobalAspect ().setValue (nPeriods (), 7);
d250 1
a250 1
         nPeriods ().appliesTo (Component.class);
d285 1
a285 1
         thePartA.setVectorToScalar (scrapVol (), 17);
d322 1
a322 1
         thePartA.setVectorToScalar (demandVol (), 12);
d363 1
a363 1
         theDemandB.getValue (demandVol (), demandVolVal);
d440 1
a440 1
         thePartA.setValue (supplyVol (), null);
d555 1
a555 1
         theProblem.getDefaultValue (accelerated ());
d592 1
a592 1
         theProblem.getDefaultValue (supplyVol (), theDblArr);
d689 1
a689 1
      nPeriodsBool = (Attribute <Boolean>) (Object) nPeriods ();
d940 1
a940 1
         thePart.placeVectorElementRequest (supplyVol (), -1, 10);
d977 1
a977 1
         theOpn.placeHardLBElementRequest (execBounds (), 26, 20);
@


1.11
log
@Revised pegging to use PeggingAtt in the public interface.
@
text
@a75 1
      testCase11 ();
a455 45
// testCase11 ().
//
// Performs status quo test case 11.
//------------------------------------------------------------------------------

   private void testCase11 ()
      {
      Problem                        theProblem;
      Part                           thePartA;
      Demand                         theDemandB;
      ArrayList <AllocTriple <Part>> theTripleList;

      printHeading (
         11,
         "   Call to Demand.getPegging with a Component class\n"
       + "   argument that does not match the Component class of\n"
       + "   the PeggingAtt argument.");

      theProblem    = newProblem ();

      thePartA      = Part.newInstance   (theProblem, "A", MATERIAL);

      theDemandB    = Demand.newInstance (thePartA, "B");

      theTripleList = new ArrayList <AllocTriple <Part>> (0);

      try
         {
         theDemandB.
            getPegging (PeggingAtt.EXEC_VOL_PIP, 7, theTripleList, Part.class);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (11);
      }

//------------------------------------------------------------------------------
@


1.10
log
@Changed terminology:
   "Queueing element values" was replaced by
   "Placing element requests".
@
text
@d76 1
d457 45
@


1.9
log
@Removed the "enabled" concept from WIT-J.
@
text
@d931 1
a931 1
         "Call to theComp.queueVectorElement (...) with an out-of-range "
d940 1
a940 1
         thePart.queueVectorElement (supplyVol (), -1, 10);
d968 1
a968 1
         "Call to theComp.queueVectorElement (...) with an out-of-range "
d977 1
a977 1
         theOpn.queueHardLBElement (execBounds (), 26, 20);
@


1.8
log
@Changed name of Java class RetainedObject to PreservedObject.
@
text
@a75 1
      testCase11 ();
a80 2
      testCase17 ();
      testCase18 ();
d110 1
a110 1
      theProblem = newEnabledProblem ();
d177 1
a177 1
      theProblem   = newEnabledProblem ();
d215 1
a215 1
      theProblem = newEnabledProblem ();
d279 1
a279 1
      theProblem = newEnabledProblem ();
d316 1
a316 1
      theProblem = newEnabledProblem ();
d354 1
a354 1
      theProblem   = newEnabledProblem ();
d395 1
a395 1
      theProblem = newEnabledProblem ();
d434 1
a434 1
      theProblem = newEnabledProblem ();
a455 33
// testCase11 ().
//
// Performs status quo test case 11.
//------------------------------------------------------------------------------

   private void testCase11 ()
      {
      Problem theProblem;

      printHeading (
         11,
         "Call to Problem.enable with a Problem that's already enabled.");

      theProblem = newEnabledProblem ();

      try
         {
         theProblem.enable ();

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (11);
      }

//------------------------------------------------------------------------------
d474 1
a474 1
      theProblemA    = newEnabledProblem             ();
a478 1
      theMessageMgrB              .setQuiet          (true);
a479 1
      theProblemB                 .enable            ();
d515 1
a515 1
      theProblem = newEnabledProblem ();
d551 1
a551 1
      theProblem = newEnabledProblem ();
d586 1
a586 1
      theProblem = newEnabledProblem ();
a635 78
// testCase17 ().
//
// Performs status quo test case 17.
//------------------------------------------------------------------------------

   private void testCase17 ()
      {
      Problem theProblem;

      printHeading (
         17,
         "Call to Problem.getGlobalAspect () "
       + "with a Problem that has not been enabled.");

      theProblem = Problem.newInstance ();

      theProblem.getMessageMgr ().setQuiet              (true);
      theProblem.getMessageMgr ().setMesgFileAccessMode ("a");

      theProblem.getMessageMgr ().setMesgFileName ("StatusQuoTester.out");

      try
         {
         theProblem.getGlobalAspect ();

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (17);
      }

//------------------------------------------------------------------------------
// testCase18 ().
//
// Performs status quo test case 18.
//------------------------------------------------------------------------------

   private void testCase18 ()
      {
      Problem theProblem;

      printHeading (
         18,
         "Call to Operation.newInstance "
       + "with a Problem that has not been enabled.");

      theProblem = Problem.newInstance ();

      theProblem.getMessageMgr ().setQuiet              (true);
      theProblem.getMessageMgr ().setMesgFileAccessMode ("a");

      theProblem.getMessageMgr ().setMesgFileName ("StatusQuoTester.out");

      try
         {
         Operation.newInstance (theProblem, "A");

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (18);
      }

//------------------------------------------------------------------------------
d650 1
a650 1
      theProblem = newEnabledProblem ();
d687 1
a687 1
      theProblem   = newEnabledProblem ();
d722 1
a722 1
      theProblem = newEnabledProblem ();
d761 2
a762 2
      theProblem1   = newEnabledProblem ();
      theProblem2   = newEnabledProblem ();
d809 2
a810 2
      theProblem1   = newEnabledProblem ();
      theProblem2   = newEnabledProblem ();
d855 1
a855 1
      theProblem  = newEnabledProblem ();
d893 1
a893 1
      theProblem  = newEnabledProblem ();
d934 1
a934 1
      theProblem = newEnabledProblem ();
d971 1
a971 1
      theProblem = newEnabledProblem ();
d993 1
a993 1
// newEnabledProblem ()
d995 1
a995 1
// Creates, enables, and returns a new Problem set up for status quo testing.
d998 1
a998 1
   private Problem newEnabledProblem ()
a1003 1
      theProblem.getMessageMgr ().setQuiet              (true);
a1007 2
      theProblem.enable ();

@


1.7
log
@Timing test.
@
text
@d111 1
a111 1
         "Call to an active method on an inactive RetainedObject.");
d763 2
a764 2
         "Passing an inactive RetainedObject to a method\n"
       + "that requires an active RetainedObject.");
@


1.6
log
@Made some public methods package internal.
@
text
@d32 1
a32 1
// performStatusQuoTest ().
d37 1
a37 1
   static void performStatusQuoTest ()
d43 1
a43 1
      theStatusQuoTester.performTest ();
d59 1
a59 1
// performTest ().
d61 1
a61 1
// Performs a status quo test.
d64 1
a64 1
   private void performTest ()
@


1.5
log
@theProblem.copyData (...).
@
text
@d37 1
a37 1
   public static void performStatusQuoTest ()
@


1.4
log
@Argument checking.
@
text
@a92 1
      testCase28 ();
a1108 36
// testCase28 ().
//
// Performs status quo test case 28.
//------------------------------------------------------------------------------

   private void testCase28 ()
      {
      Problem theProblem1;
      Problem theProblem2;

      printHeading (
         28,
         "Call to theProblem1.copyData (theProblem2).");

      theProblem1 = newEnabledProblem ();
      theProblem2 = newEnabledProblem ();

      try
         {
         theProblem1.copyData (theProblem2);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem2.deactivate ();
      theProblem1.deactivate ();

      printClosing (28);
      }

//------------------------------------------------------------------------------
@


1.3
log
@theProblem.clear ().
@
text
@d93 1
d1110 36
@


1.2
log
@Began implementation of theProblem.clear ().
@
text
@a92 1
      testCase28 ();
a1108 34
// testCase28 ().
//
// Performs status quo test case 28.
//------------------------------------------------------------------------------

   private void testCase28 ()
      {
      Problem   theProblem;
      Operation theOpn;

      printHeading (
         28,
         "Call to theProblem.clear ().");

      theProblem = newEnabledProblem ();

      try
         {
         theProblem.clear ();

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      printClosing (28);
      }

//------------------------------------------------------------------------------
@


1.1
log
@Renamed recovering test to status quo test.
@
text
@d34 1
a34 1
// Performs a recovering test.
d61 1
a61 1
// Performs a recovering test.
d93 1
d103 1
a103 1
// Performs recovering test case 1.
d130 1
a130 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 1.");
d136 1
a136 1
// Performs recovering test case 2.
d162 1
a162 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 2.");
d168 1
a168 1
// Performs recovering test case 3.
d201 1
a201 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 3.");
d207 1
a207 1
// Performs recovering test case 4.
d237 1
a237 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 4.");
d243 1
a243 1
// Performs recovering test case 5.
d264 1
a264 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 5.");
d270 1
a270 1
// Performs recovering test case 6.
d301 1
a301 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 6.");
d307 1
a307 1
// Performs recovering test case 7.
d338 1
a338 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 7.");
d344 1
a344 1
// Performs recovering test case 8.
d379 1
a379 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 8.");
d385 1
a385 1
// Performs recovering test case 9.
d419 1
a419 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 9.");
d425 1
a425 1
// Performs recovering test case 10.
d456 1
a456 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 10.");
d462 1
a462 1
// Performs recovering test case 11.
d489 1
a489 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 11.");
d495 1
a495 1
// Performs recovering test case 12.
d537 1
a537 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 12.");
d543 1
a543 1
// Performs recovering test case 13.
d572 1
a572 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 13.");
d578 1
a578 1
// Performs recovering test case 14.
d606 1
a606 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 14.");
d612 1
a612 1
// Performs recovering test case 15.
d643 1
a643 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 15.");
d649 1
a649 1
// Performs recovering test case 16.
d671 1
a671 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 16.");
d677 1
a677 1
// Performs recovering test case 17.
d710 1
a710 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 17.");
d716 1
a716 1
// Performs recovering test case 18.
d749 1
a749 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 18.");
d755 1
a755 1
// Performs recovering test case 19.
d783 1
a783 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 19.");
d789 1
a789 1
// Performs recovering test case 20.
d822 1
a822 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 20.");
d828 1
a828 1
// Performs recovering test case 21.
d855 1
a855 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 21.");
d861 1
a861 1
// Performs recovering test case 22.
d904 1
a904 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 22.");
d910 1
a910 1
// Performs recovering test case 23.
d953 1
a953 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 23.");
d959 1
a959 1
// Performs recovering test case 24.
d990 1
a990 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 24.");
d996 1
a996 1
// Performs recovering test case 25.
d1032 1
a1032 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 25.");
d1038 1
a1038 1
// Performs recovering test case 26.
d1069 1
a1069 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 26.");
d1075 1
a1075 1
// Performs recovering test case 27.
d1106 35
a1140 3
      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 27.");
d1146 1
a1146 1
// Creates, enables, and returns a new Problem set up for recovering testing.
d1168 2
a1169 2
// Prints a heading for the recovering test case of theCaseIdx, where text
// describes recovering test case.
d1178 1
a1178 1
       + "WIT-J Recovering Test Case %d:\n"
d1188 14
@

