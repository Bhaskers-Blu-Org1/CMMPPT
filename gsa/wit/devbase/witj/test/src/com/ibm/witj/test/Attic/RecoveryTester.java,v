head	1.21;
access;
symbols;
locks; strict;
comment	@# @;


1.21
date	2009.04.02.17.49.29;	author rjw;	state dead;
branches;
next	1.20;

1.20
date	2009.03.25.14.44.28;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.03.23.21.51.40;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.03.20.19.47.01;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.03.20.15.10.55;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.03.16.20.05.00;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.03.16.19.35.45;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.13.19.32.24;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.03.13.16.36.10;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.03.12.22.45.21;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.03.12.19.02.43;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.02.20.17.18.45;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.02.19.19.51.48;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.02.11.18.59.30;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.02.09.22.50.20;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.02.06.22.41.00;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.05.16.53.12;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.22.21.27.18;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.22.20.21.40;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.12.18.22.00.09;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.18.19.48.26;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Changed name of recovery test to recovering test.
@
text
@
//==============================================================================
// WIT-J/Test Source File RecoveryTester.java.
//
// Contains the declaration of class RecoveryTester.
//==============================================================================

package       com.ibm.witj.test;

import        com.ibm.witj.*;
import static com.ibm.witj.Attribute.*;
import static com.ibm.witj.Part.Category.*;
import static com.ibm.witj.MessageGroup.*;

import                java.util.*;

//==============================================================================
// Class RecoveryTester
//
// Responsible for performing a series of tests on WIT-J each of which
// generates an error condition that that causes a StatusQuoException to be
// thrown, thus allowing the program to recover from the error and continue
// accessing WIT-J.
//==============================================================================

final class RecoveryTester
{
//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// performRecoveryTest ().
//
// Performs a recovery test.
//------------------------------------------------------------------------------

   public static void performRecoveryTest ()
      {
      RecoveryTester theRecoveryTester;

      theRecoveryTester = new RecoveryTester ();

      theRecoveryTester.performTest ();
      }

//==============================================================================
// Private Constructor
//==============================================================================

   private RecoveryTester ()
      {
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// performTest ().
//
// Performs a recovery test.
//------------------------------------------------------------------------------

   private void performTest ()
      {
      testCase1  ();
      testCase2  ();
      testCase3  ();
      testCase4  ();
      testCase5  ();
      testCase6  ();
      testCase7  ();
      testCase8  ();
      testCase9  ();
      testCase10 ();
      testCase11 ();
      testCase12 ();
      testCase13 ();
      testCase14 ();
      testCase15 ();
      testCase16 ();
      testCase17 ();
      testCase18 ();
      testCase19 ();
      testCase20 ();
      testCase21 ();
      testCase22 ();
      testCase23 ();
      testCase24 ();
      testCase25 ();

      System.out.println (
         "\n"
       + "Normal termination of recovery test.");
      }

//------------------------------------------------------------------------------
// testCase1 ().
//
// Performs recovery test case 1.
//------------------------------------------------------------------------------

   private void testCase1 ()
      {
      Problem theProblem;

      printHeading (
         1,
         "Call to an active method on an inactive RetainedObject.");

      theProblem = newEnabledProblem ();

      theProblem.deactivate ();

      try
         {
         theProblem.displayData ("error.txt");

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 1.");
      }

//------------------------------------------------------------------------------
// testCase2 ().
//
// Performs recovery test case 2.
//------------------------------------------------------------------------------

   private void testCase2 ()
      {
      Class <? extends Component> theClass;

      printHeading (
         2,
         "Passing a null reference as the Class argument to "
       + "theAttribute.appliesTo.");

      theClass = null;

      try
         {
         nPeriods ().appliesTo (theClass);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 2.");
      }

//------------------------------------------------------------------------------
// testCase3 ().
//
// Performs recovery test case 3.
//------------------------------------------------------------------------------

   private void testCase3 ()
      {
      Problem  theProblem;
      Part     thePartA;
      double[] supplyVolVal;

      printHeading (
         3,
         "Call to Component.setValue with an array whose length != nPeriods.");

      theProblem   = newEnabledProblem ();

      thePartA     = Part.newInstance (theProblem, "A", MATERIAL);

      supplyVolVal = new double[]{1, 2, 3, 4};
      
      try
         {
         thePartA.setValue (supplyVol (), supplyVolVal);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 3.");
      }

//------------------------------------------------------------------------------
// testCase4 ().
//
// Performs recovery test case 4.
//------------------------------------------------------------------------------

   private void testCase4 ()
      {
      Problem theProblem;

      printHeading (
         4,
         "Call to setValue (nPeriods (), ...) in a Problem "
       + "that has an Operation.");

      theProblem = newEnabledProblem ();

      Operation.newInstance (theProblem, "Test Opn 4");

      try
         {
         theProblem.getGlobalAspect ().setValue (nPeriods (), 7);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 4.");
      }

//------------------------------------------------------------------------------
// testCase5 ().
//
// Performs recovery test case 5.
//------------------------------------------------------------------------------

   private void testCase5 ()
      {
      printHeading (
         5,
         "Call to Attribute.appliesTo with Component as the Class.");

      try
         {
         nPeriods ().appliesTo (Component.class);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 5.");
      }

//------------------------------------------------------------------------------
// testCase6 ().
//
// Performs recovery test case 6.
//------------------------------------------------------------------------------

   private void testCase6 ()
      {
      Problem theProblem;
      Part    thePartA;

      printHeading (
         6,
         "Call to Component.setVectorToScalar with a non-modifiable Attribute."
         );

      theProblem = newEnabledProblem ();

      thePartA   = Part.newInstance (theProblem, "A", MATERIAL);

      try
         {
         thePartA.setVectorToScalar (scrapVol (), 17);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 6.");
      }

//------------------------------------------------------------------------------
// testCase7 ().
//
// Performs recovery test case 7.
//------------------------------------------------------------------------------

   private void testCase7 ()
      {
      Problem theProblem;
      Part    thePartA;

      printHeading (
         7,
         "Call to Component.setValue for an Component class\n"
       + "to which the Attribute does not apply.");

      theProblem = newEnabledProblem ();

      thePartA   = Part.newInstance (theProblem, "A", MATERIAL);

      try
         {
         thePartA.setVectorToScalar (demandVol (), 12);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 7.");
      }

//------------------------------------------------------------------------------
// testCase8 ().
//
// Performs recovery test case 8.
//------------------------------------------------------------------------------

   private void testCase8 ()
      {
      Problem  theProblem;
      Part     thePartA;
      Demand   theDemandB;
      double[] demandVolVal;

      printHeading (
         8,
         "Call to Component.getValue with an array whose length != nPeriods.");

      theProblem   = newEnabledProblem ();

      thePartA     = Part  .newInstance (theProblem, "A", MATERIAL);
      theDemandB   = Demand.newInstance (thePartA,   "B");

      demandVolVal = new double[4];

      try
         {
         theDemandB.getValue (demandVol (), demandVolVal);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 8.");
      }

//------------------------------------------------------------------------------
// testCase9 ().
//
// Performs recovery test case 9.
//------------------------------------------------------------------------------

   private void testCase9 ()
      {
      Problem              theProblem;
      Part                 thePartA;
      Attribute <double[]> theAtt;

      printHeading (
         9,
         "Passing a null reference as the Attribute argument to "
       + "Component.getValue.");

      theProblem = newEnabledProblem ();

      thePartA   = Part.newInstance (theProblem, "A", MATERIAL);

      theAtt     = null;

      try
         {
         thePartA.getValue (theAtt);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 9.");
      }

//------------------------------------------------------------------------------
// testCase10 ().
//
// Performs recovery test case 10.
//------------------------------------------------------------------------------

   private void testCase10 ()
      {
      Problem theProblem;
      Part    thePartA;

      printHeading (
         10,
         "Passing a null reference as the value argument to "
       + "Component.setValue.");

      theProblem = newEnabledProblem ();

      thePartA   = Part.newInstance (theProblem, "A", MATERIAL);

      try
         {
         thePartA.setValue (supplyVol (), null);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 10.");
      }

//------------------------------------------------------------------------------
// testCase11 ().
//
// Performs recovery test case 11.
//------------------------------------------------------------------------------

   private void testCase11 ()
      {
      Problem theProblem;

      printHeading (
         11,
         "Call to Problem.enable with a Problem that's already enabled.");

      theProblem = newEnabledProblem ();

      try
         {
         theProblem.enable ();

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 11.");
      }

//------------------------------------------------------------------------------
// testCase12 ().
//
// Performs recovery test case 12.
//------------------------------------------------------------------------------

   private void testCase12 ()
      {
      Problem    theProblemA;
      Operation  theOpnA;
      MessageMgr theMessageMgrB;
      Problem    theProblemB;
      Part       thePartB;

      printHeading (
         12,
         "Constructing a BomEntry whose Operation "
       + "and Part belong to different Problems.");

      theProblemA    = newEnabledProblem             ();
      theOpnA        = Operation  .newInstance       (theProblemA,   "A");

      theProblemB    = Problem    .newInstance       ();
      theMessageMgrB = theProblemB.getMessageMgr     ();
      theMessageMgrB              .setQuiet          (true);
      theMessageMgrB              .setMesgTimesPrint (INFORMATIONAL, 0);
      theProblemB                 .enable            ();
      thePartB       = Part       .newInstance       (theProblemB,   "B",
                                                                     MATERIAL);
      
      try
         {
         BomEntry                 .newInstance       (theOpnA, thePartB);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblemB.deactivate ();
      theProblemA.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 12.");
      }

//------------------------------------------------------------------------------
// testCase13 ().
//
// Performs recovery test case 13.
//------------------------------------------------------------------------------

   private void testCase13 ()
      {
      Problem theProblem;

      printHeading (
         13,
         "Call to Problem.readData on a Problem that has a Part.");

      theProblem = newEnabledProblem ();

      Part.newInstance (theProblem, "A", MATERIAL);

      try
         {
         theProblem.readData ("test.data");

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 13.");
      }

//------------------------------------------------------------------------------
// testCase14 ().
//
// Performs recovery test case 14.
//------------------------------------------------------------------------------

   private void testCase14 ()
      {
      Problem theProblem;

      printHeading (
         14,
         "Call to theProblem.getDefaultValue "
       + "with an Attribute that has no default value.");

      theProblem = newEnabledProblem ();

      try
         {
         theProblem.getDefaultValue (accelerated ());

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 14.");
      }

//------------------------------------------------------------------------------
// testCase15 ().
//
// Performs recovery test case 15.
//------------------------------------------------------------------------------

   private void testCase15 ()
      {
      Problem  theProblem;
      double[] theDblArr;

      printHeading (
         15,
         "Call to theProblem.getDefaultValue "
       + "with an array whose length is not nPeriods.");

      theProblem = newEnabledProblem ();

      theDblArr = new double[14];

      try
         {
         theProblem.getDefaultValue (supplyVol (), theDblArr);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 15.");
      }

//------------------------------------------------------------------------------
// testCase16 ().
//
// Performs recovery test case 16.
//------------------------------------------------------------------------------

   private void testCase16 ()
      {
      printHeading (
         16,
         "Call to Attribute.asAttribute (Boolean.class) with an Attribute\n"
       + "whose value type is not Boolean.");

      try
         {
         getAttributes ().get (5).asAttribute (Boolean.class);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 16.");
      }

//------------------------------------------------------------------------------
// testCase17 ().
//
// Performs recovery test case 17.
//------------------------------------------------------------------------------

   private void testCase17 ()
      {
      Problem theProblem;

      printHeading (
         17,
         "Call to Problem.getGlobalAspect () "
       + "with a Problem that has not been enabled.");

      theProblem = Problem.newInstance ();

      theProblem.getMessageMgr ().setQuiet              (true);
      theProblem.getMessageMgr ().setMesgFileAccessMode ("a");
      theProblem.getMessageMgr ().setMesgFileName       ("RecoveryTester.out");

      try
         {
         theProblem.getGlobalAspect ();

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 17.");
      }

//------------------------------------------------------------------------------
// testCase18 ().
//
// Performs recovery test case 18.
//------------------------------------------------------------------------------

   private void testCase18 ()
      {
      Problem theProblem;

      printHeading (
         18,
         "Call to Operation.newInstance "
       + "with a Problem that has not been enabled.");

      theProblem = Problem.newInstance ();

      theProblem.getMessageMgr ().setQuiet              (true);
      theProblem.getMessageMgr ().setMesgFileAccessMode ("a");
      theProblem.getMessageMgr ().setMesgFileName       ("RecoveryTester.out");

      try
         {
         Operation.newInstance (theProblem, "A");

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 18.");
      }

//------------------------------------------------------------------------------
// testCase19 ().
//
// Performs recovery test case 19.
//------------------------------------------------------------------------------

   private void testCase19 ()
      {
      Problem theProblem;

      printHeading (
         19,
         "Passing an inactive RetainedObject to a method\n"
       + "that requires an active RetainedObject.");

      theProblem = newEnabledProblem ();

      theProblem.deactivate ();

      try
         {
         Part.newInstance (theProblem, "A", MATERIAL);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 19.");
      }

//------------------------------------------------------------------------------
// testCase20 ().
//
// Performs recovery test case 20.
//------------------------------------------------------------------------------

  @@SuppressWarnings ("unchecked")

   private void testCase20 ()
      {
      Problem             theProblem;
      Attribute <Boolean> nPeriodsBool;

      printHeading (
         20,
         "Call to Component.getValue with an Attribute\n"
       + "that has been cast to a different value type.");

      theProblem   = newEnabledProblem ();

      nPeriodsBool = (Attribute <Boolean>) (Object) nPeriods ();

      try
         {
         theProblem.getGlobalAspect ().getValue (nPeriodsBool);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 20.");
      }

//------------------------------------------------------------------------------
// testCase21 ().
//
// Performs recovery test case 21.
//------------------------------------------------------------------------------

   private void testCase21 ()
      {
      Problem theProblem;

      printHeading (
         21,
         "Call to Problem.performAction with an invalid command.");

      theProblem = newEnabledProblem ();

      try
         {
         theProblem.performAction ("Bogus Command");

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 21.");
      }

//------------------------------------------------------------------------------
// testCase22 ().
//
// Performs recovery test case 22.
//------------------------------------------------------------------------------

   private void testCase22 ()
      {
      Problem                          theProblem1;
      Problem                          theProblem2;
      Part                             thePart;
      Demand                           theDemand;
      AllocTriple <Demand>             theTriple;
      ArrayList <AllocTriple <Demand>> theTripleList;

      printHeading (
         22,
         "Call to GlobalAspect.setPipSeq with a Demand that belongs to\n"
       + "a different Problem.");

      theProblem1   = newEnabledProblem ();
      theProblem2   = newEnabledProblem ();

      thePart       = Part       .newInstance (theProblem1, "A", CAPACITY);
      theDemand     = Demand     .newInstance (thePart,     "B");
      theTriple     = AllocTriple.newInstance (theDemand, 0, 10);

      theTripleList = new ArrayList <AllocTriple <Demand>> (1);

      theTripleList.add (0, theTriple);

      try
         {
         theProblem2.getGlobalAspect ().setPipSeq (theTripleList);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem2.deactivate ();
      theProblem1.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 22.");
      }

//------------------------------------------------------------------------------
// testCase23 ().
//
// Performs recovery test case 23.
//------------------------------------------------------------------------------

   private void testCase23 ()
      {
      Problem                          theProblem1;
      Problem                          theProblem2;
      Part                             thePart;
      Demand                           theDemand;
      AllocTriple <Demand>             theTriple;
      ArrayList <AllocTriple <Demand>> theTripleList;

      printHeading (
         23,
         "Call to GlobalAspect.setPipSeq with an inactive Demand.");

      theProblem1   = newEnabledProblem ();
      theProblem2   = newEnabledProblem ();

      thePart       = Part       .newInstance (theProblem1, "A", CAPACITY);
      theDemand     = Demand     .newInstance (thePart,     "B");
      theTriple     = AllocTriple.newInstance (theDemand, 0, 10);

      theTripleList = new ArrayList <AllocTriple <Demand>> (1);

      theTripleList.add (0, theTriple);

      theProblem1.deactivate ();

      try
         {
         theProblem2.getGlobalAspect ().setPipSeq (theTripleList);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem2.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 23.");
      }

//------------------------------------------------------------------------------
// testCase24 ().
//
// Performs recovery test case 24.
//------------------------------------------------------------------------------

   private void testCase24 ()
      {
      Problem          theProblem;
      List <Component> theCompList;

      printHeading (
         24,
         "Call to a modifying method on an unmodifiable List returned by a "
       + "WIT-J method.");

      theProblem  = newEnabledProblem ();

      theCompList = theProblem.getComponents ();

      try
         {
         theCompList.clear ();

         throw new AssertionError ();
         }

      catch (UnsupportedOperationException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 24.");
      }

//------------------------------------------------------------------------------
// testCase25 ().
//
// Performs recovery test case 25.
//------------------------------------------------------------------------------

   private void testCase25 ()
      {
      Problem   theProblem;
      Part      thePart;
      Operation theOpn;

      printHeading (
         25,
         "Call to theOpn.getUniqueBomEntryTo (thePart) when theOpn and\n"
       + "thePart are connected by more than one BomEntry.");

      theProblem  = newEnabledProblem ();

      thePart     = Part     .newInstance (theProblem, "A", CAPACITY);
      theOpn      = Operation.newInstance (theProblem, "B");

      BomEntry.newInstance (theOpn, thePart);
      BomEntry.newInstance (theOpn, thePart);

      try
         {
         theOpn.getUniqueBomEntryTo (thePart);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 25.");
      }

//------------------------------------------------------------------------------
// newEnabledProblem ()
//
// Creates, enables, and returns a new Problem set up for recovery testing.
//------------------------------------------------------------------------------

   private Problem newEnabledProblem ()
      {
      Problem theProblem;

      theProblem = Problem.newInstance ();

      theProblem.getMessageMgr ().setQuiet              (true);
      theProblem.getMessageMgr ().setMesgFileAccessMode ("a");
      theProblem.getMessageMgr ().setMesgFileName       ("RecoveryTester.out");

      theProblem.enable ();

      return theProblem;
      }

//------------------------------------------------------------------------------
// printHeading (theCaseIdx, text)
//
// Prints a heading for the recovery test case of theCaseIdx, where text
// describes recovery test case.
//------------------------------------------------------------------------------

   private void printHeading (int theCaseIdx, String text)
      {
      System.out.printf (
         "\n"
       + "----------------------------------------"
       + "----------------------------------------\n"
       + "WIT-J Recovery Test Case %d:\n"
       + "%s\n"
       + "----------------------------------------"
       + "----------------------------------------\n"
       + "\n",
         theCaseIdx,
         text);
      }

//------------------------------------------------------------------------------
}
@


1.20
log
@Changed name of method setValueToScalar to setVectorToScalar.
@
text
@@


1.19
log
@Added theComp.setValueToScalar (...) methods.
@
text
@d288 2
a289 1
         "Call to Component.setValueToScalar with a non-modifiable Attribute.");
d297 1
a297 1
         thePartA.setValueToScalar (scrapVol (), 17);
d336 1
a336 1
         thePartA.setValueToScalar (demandVol (), 12);
@


1.18
log
@Added:
   theOpn     .getUniqueBomEntryTo   (thePart)
   theOpn     .getUniqueBopEntryTo   (thePart)
   theBomEntry.getUniqueSubstituteTo (thePart)
@
text
@d288 1
a288 1
         "Call to Component.setValue with a non-modifiable Attribute.");
d296 1
a296 1
         thePartA.setValue (scrapVol (), new double[26]);
d335 1
a335 1
         thePartA.setValue (demandVol (), new double[26]);
@


1.17
log
@Added a test for calling a modifying method on an unmodifiable List from
WIT-J.
@
text
@d91 1
d1033 42
@


1.16
log
@Removed:
   theOpn     .getBomEntry   (theIdx)
   theOpn     .getBopEntry   (theIdx)
   theBomEntry.getSubstitute (theIdx)
@
text
@d90 1
d995 37
@


1.15
log
@Replaced Attribute.getAllAttributes () with Attribute.getAttributes (),
which returns an unmodifiable List.
@
text
@a89 3
      testCase24 ();
      testCase25 ();
      testCase26 ();
d567 1
a567 3
      Problem   theProblem;
      Part      thePartA;
      Operation theOpnB;
d571 1
a571 2
         "Call to Operation.getBomEntry "
       + "with a BOM index that's out of range.");
d575 1
a575 5
      thePartA   = Part     .newInstance (theProblem, "A", MATERIAL);
      theOpnB    = Operation.newInstance (theProblem, "B");

      BomEntry              .newInstance (theOpnB,     thePartA);
      BomEntry              .newInstance (theOpnB,     thePartA);
d579 1
a579 1
         theOpnB.getBomEntry (2);
d608 2
a609 1
         "Call to Problem.readData on a Problem that has a Part.");
a612 2
      Part.newInstance (theProblem, "A", MATERIAL);

d615 1
a615 1
         theProblem.readData ("test.data");
d640 2
a641 1
      Problem theProblem;
d646 1
a646 1
       + "with an Attribute that has no default value.");
d650 2
d654 1
a654 1
         theProblem.getDefaultValue (accelerated ());
a678 3
      Problem  theProblem;
      double[] theDblArr;

d681 2
a682 6
         "Call to theProblem.getDefaultValue "
       + "with an array whose length is not nPeriods.");

      theProblem = newEnabledProblem ();

      theDblArr = new double[14];
d686 1
a686 1
         theProblem.getDefaultValue (supplyVol (), theDblArr);
a695 2
      theProblem.deactivate ();

a708 30
      printHeading (
         17,
         "Call to Attribute.asAttribute (Boolean.class) with an Attribute\n"
       + "whose value type is not Boolean.");

      try
         {
         getAttributes ().get (5).asAttribute (Boolean.class);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 17.");
      }

//------------------------------------------------------------------------------
// testCase18 ().
//
// Performs recovery test case 18.
//------------------------------------------------------------------------------

   private void testCase18 ()
      {
d712 1
a712 1
         18,
d738 1
a738 1
         + "Successful completion of Recovery Test Case 18.");
d742 1
a742 1
// testCase19 ().
d744 1
a744 1
// Performs recovery test case 19.
d747 1
a747 1
   private void testCase19 ()
d752 1
a752 1
         19,
d778 1
a778 1
         + "Successful completion of Recovery Test Case 19.");
d782 1
a782 1
// testCase20 ().
d784 1
a784 1
// Performs recovery test case 20.
d787 1
a787 89
   private void testCase20 ()
      {
      Problem   theProblem;
      Part      thePartA;
      Operation theOpnB;

      printHeading (
         20,
         "Call to Operation.getBopEntry "
       + "with a BOP index that's out of range.");

      theProblem = newEnabledProblem ();

      thePartA   = Part     .newInstance (theProblem, "A", MATERIAL);
      theOpnB    = Operation.newInstance (theProblem, "B");

      BopEntry              .newInstance (theOpnB,     thePartA);

      try
         {
         theOpnB.getBopEntry (-1);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 20.");
      }

//------------------------------------------------------------------------------
// testCase21 ().
//
// Performs recovery test case 21.
//------------------------------------------------------------------------------

   private void testCase21 ()
      {
      Problem   theProblem;
      Part      thePartA;
      Operation theOpnB;
      BomEntry  theBomEntBA;

      printHeading (
         21,
         "Call to BomEntry.getSubstitute "
       + "with a Substitute index that's out of range.");

      theProblem = newEnabledProblem ();

      thePartA    = Part     .newInstance (theProblem,  "A", MATERIAL);
      theOpnB     = Operation.newInstance (theProblem,  "B");
      theBomEntBA = BomEntry .newInstance (theOpnB,     thePartA);

      Substitute             .newInstance (theBomEntBA, thePartA);

      try
         {
         theBomEntBA.getSubstitute (1);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovery Test Case 21.");
      }

//------------------------------------------------------------------------------
// testCase22 ().
//
// Performs recovery test case 22.
//------------------------------------------------------------------------------

   private void testCase22 ()
d792 1
a792 1
         22,
d814 1
a814 1
         + "Successful completion of Recovery Test Case 22.");
d818 1
a818 1
// testCase23 ().
d820 1
a820 1
// Performs recovery test case 23.
d825 1
a825 1
   private void testCase23 ()
d831 1
a831 1
         23,
d855 1
a855 1
         + "Successful completion of Recovery Test Case 23.");
d859 1
a859 1
// testCase24 ().
d861 1
a861 1
// Performs recovery test case 24.
d864 1
a864 1
   private void testCase24 ()
d869 1
a869 1
         24,
d888 1
a888 1
         + "Successful completion of Recovery Test Case 24.");
d892 1
a892 1
// testCase25 ().
d894 1
a894 1
// Performs recovery test case 25.
d897 1
a897 1
   private void testCase25 ()
d907 1
a907 1
         25,
d939 1
a939 1
         + "Successful completion of Recovery Test Case 25.");
d943 1
a943 1
// testCase26 ().
d945 1
a945 1
// Performs recovery test case 26.
d948 1
a948 1
   private void testCase26 ()
d958 1
a958 1
         26,
d990 1
a990 1
         + "Successful completion of Recovery Test Case 26.");
@


1.14
log
@Changed name of Element classes in Java and C++ to Component.
@
text
@d733 1
a733 1
         getAllAttributes ()[5].asAttribute (Boolean.class);
@


1.13
log
@Changed name of GlobalComponent classes to GlobalAspect.
@
text
@d142 1
a142 1
      Class <? extends Element> theClass;
d182 1
a182 1
         "Call to Element.setValue with an array whose length != nPeriods.");
d257 1
a257 1
         "Call to Attribute.appliesTo with Element as the Class.");
d261 1
a261 1
         nPeriods ().appliesTo (Element.class);
d289 1
a289 1
         "Call to Element.setValue with a non-modifiable Attribute.");
d327 1
a327 1
         "Call to Element.setValue for an Element class\n"
d368 1
a368 1
         "Call to Element.getValue with an array whose length != nPeriods.");
d411 1
a411 1
       + "Element.getValue.");
d451 2
a452 1
         "Passing a null reference as the value argument to Element.setValue.");
d967 1
a967 1
         "Call to Element.getValue with an Attribute\n"
@


1.12
log
@Changed name of GlobalElement classes to GlobalComponent.
@
text
@d230 1
a230 1
         theProblem.getGlobalComponent ().setValue (nPeriods (), 7);
d759 1
a759 1
         "Call to Problem.getGlobalComponent () "
d770 1
a770 1
         theProblem.getGlobalComponent ();
d975 1
a975 1
         theProblem.getGlobalComponent ().getValue (nPeriodsBool);
d1042 1
a1042 1
         "Call to GlobalComponent.setPipSeq with a Demand that belongs to\n"
d1058 1
a1058 1
         theProblem2.getGlobalComponent ().setPipSeq (theTripleList);
d1093 1
a1093 1
         "Call to GlobalComponent.setPipSeq with an inactive Demand.");
d1110 1
a1110 1
         theProblem2.getGlobalComponent ().setPipSeq (theTripleList);
@


1.11
log
@Changed name of Problem method shutDown to deactivate.
@
text
@d230 1
a230 1
         theProblem.getGlobalElement ().setValue (nPeriods (), 7);
d759 1
a759 1
         "Call to Problem.getGlobalElement () "
d770 1
a770 1
         theProblem.getGlobalElement ();
d975 1
a975 1
         theProblem.getGlobalElement ().getValue (nPeriodsBool);
d1042 1
a1042 1
         "Call to GlobalElement.setPipSeq with a Demand that belongs to\n"
d1058 1
a1058 1
         theProblem2.getGlobalElement ().setPipSeq (theTripleList);
d1093 1
a1093 1
         "Call to GlobalElement.setPipSeq with an inactive Demand.");
d1110 1
a1110 1
         theProblem2.getGlobalElement ().setPipSeq (theTripleList);
@


1.10
log
@Added the AllocTripleList classes.
@
text
@d115 1
a115 1
      theProblem.shutDown ();
d202 1
a202 1
      theProblem.shutDown ();
d240 1
a240 1
      theProblem.shutDown ();
d307 1
a307 1
      theProblem.shutDown ();
d346 1
a346 1
      theProblem.shutDown ();
d389 1
a389 1
      theProblem.shutDown ();
d431 1
a431 1
      theProblem.shutDown ();
d469 1
a469 1
      theProblem.shutDown ();
d504 1
a504 1
      theProblem.shutDown ();
d553 2
a554 2
      theProblemB.shutDown ();
      theProblemA.shutDown ();
d598 1
a598 1
      theProblem.shutDown ();
d635 1
a635 1
      theProblem.shutDown ();
d671 1
a671 1
      theProblem.shutDown ();
d710 1
a710 1
      theProblem.shutDown ();
d780 1
a780 1
      theProblem.shutDown ();
d820 1
a820 1
      theProblem.shutDown ();
d863 1
a863 1
      theProblem.shutDown ();
d908 1
a908 1
      theProblem.shutDown ();
d932 1
a932 1
      theProblem.shutDown ();
d985 1
a985 1
      theProblem.shutDown ();
d1068 2
a1069 2
      theProblem2.shutDown ();
      theProblem1.shutDown ();
d1106 1
a1106 1
      theProblem1.shutDown ();
d1120 1
a1120 1
      theProblem2.shutDown ();
@


1.9
log
@Moved set/get-PipSeq from class Problem to class GlobalElement.
@
text
@d1038 1
a1038 1
      ArrayList <AllocTriple <Demand>> theTriples;
d1045 2
a1046 2
      theProblem1 = newEnabledProblem ();
      theProblem2 = newEnabledProblem ();
d1048 3
a1050 3
      thePart     = Part       .newInstance (theProblem1, "A", CAPACITY);
      theDemand   = Demand     .newInstance (thePart,     "B");
      theTriple   = AllocTriple.newInstance (theDemand, 0, 10);
d1052 1
a1052 1
      theTriples  = new ArrayList <AllocTriple <Demand>> (1);
d1054 1
a1054 1
      theTriples.add (0, theTriple);
d1058 1
a1058 1
         theProblem2.getGlobalElement ().setPipSeq (theTriples);
d1089 1
a1089 1
      ArrayList <AllocTriple <Demand>> theTriples;
d1095 2
a1096 2
      theProblem1 = newEnabledProblem ();
      theProblem2 = newEnabledProblem ();
d1098 3
a1100 3
      thePart     = Part       .newInstance (theProblem1, "A", CAPACITY);
      theDemand   = Demand     .newInstance (thePart,     "B");
      theTriple   = AllocTriple.newInstance (theDemand, 0, 10);
d1102 1
a1102 1
      theTriples  = new ArrayList <AllocTriple <Demand>> (1);
d1104 1
a1104 1
      theTriples.add (0, theTriple);
d1110 1
a1110 1
         theProblem2.getGlobalElement ().setPipSeq (theTriples);
@


1.8
log
@Implemented buildPip and setPipSeq.
@
text
@d1042 2
a1043 2
         "Call to Problem.setPipSeq with a Demand that belongs to a "
       + "different Problem.");
d1058 1
a1058 1
         theProblem2.setPipSeq (theTriples);
d1093 1
a1093 1
         "Call to Problem.setPipSeq with an inactive Demand.");
d1110 1
a1110 1
         theProblem2.setPipSeq (theTriples);
@


1.7
log
@Replaced Java class AllocTarget with AllocTriple <Demand>.
@
text
@d102 1
a102 1
// Performs error test case 1.
d137 1
a137 1
// Performs error test case 2.
d171 1
a171 1
// Performs error test case 3.
d212 1
a212 1
// Performs error test case 4.
d250 1
a250 1
// Performs error test case 5.
d279 1
a279 1
// Performs error test case 6.
d317 1
a317 1
// Performs error test case 7.
d356 1
a356 1
// Performs error test case 8.
d399 1
a399 1
// Performs error test case 9.
d441 1
a441 1
// Performs error test case 10.
d479 1
a479 1
// Performs error test case 11.
d514 1
a514 1
// Performs error test case 12.
d564 1
a564 1
// Performs error test case 13.
d608 1
a608 1
// Performs error test case 14.
d645 1
a645 1
// Performs error test case 15.
d681 1
a681 1
// Performs error test case 16.
d720 1
a720 1
// Performs error test case 17.
d750 1
a750 1
// Performs error test case 18.
d790 1
a790 1
// Performs error test case 19.
d830 1
a830 1
// Performs error test case 20.
d873 1
a873 1
// Performs error test case 21.
d918 1
a918 1
// Performs error test case 22.
d954 1
a954 1
// Performs error test case 23.
d995 1
a995 1
// Performs error test case 24.
d1028 1
a1028 1
// Performs error test case 25.
d1042 1
a1042 1
         "Call to Problem.eqHeurAlloc with a Demand that belongs to a "
d1058 1
a1058 1
         theProblem2.eqHeurAlloc (theTriples);
d1079 1
a1079 1
// Performs error test case 26.
d1093 1
a1093 1
         "Call to Problem.eqHeurAlloc with an inactive Demand.");
d1110 1
a1110 1
         theProblem2.eqHeurAlloc (theTriples);
@


1.6
log
@Problem.eqHeurAlloc.
@
text
@d15 2
d1033 6
a1038 6
      Problem       theProblem1;
      Problem       theProblem2;
      Part          thePart;
      Demand        theDemand;
      AllocTarget   theTarget;
      AllocTarget[] theTargetArr;
d1045 6
a1050 2
      theProblem1  = newEnabledProblem ();
      theProblem2  = newEnabledProblem ();
d1052 1
a1052 3
      thePart      = Part       .newInstance (theProblem1, "A", CAPACITY);
      theDemand    = Demand     .newInstance (thePart,     "B");
      theTarget    = AllocTarget.newInstance (theDemand, 0, 10);
d1054 1
a1054 1
      theTargetArr = new AllocTarget[] {theTarget};
d1058 1
a1058 1
         theProblem2.eqHeurAlloc (theTargetArr);
d1084 6
a1089 6
      Problem       theProblem1;
      Problem       theProblem2;
      Part          thePart;
      Demand        theDemand;
      AllocTarget   theTarget;
      AllocTarget[] theTargetArr;
d1095 6
a1100 2
      theProblem1  = newEnabledProblem ();
      theProblem2  = newEnabledProblem ();
d1102 1
a1102 3
      thePart      = Part       .newInstance (theProblem1, "A", CAPACITY);
      theDemand    = Demand     .newInstance (thePart,     "B");
      theTarget    = AllocTarget.newInstance (theDemand, 0, 10);
d1104 1
a1104 1
      theTargetArr = new AllocTarget[] {theTarget};
d1110 1
a1110 1
         theProblem2.eqHeurAlloc (theTargetArr);
@


1.5
log
@Added printHeading methods.
@
text
@d89 2
d1024 98
@


1.4
log
@Minor revisions.
@
text
@d105 3
a107 8
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 1:\n"
         + "Call to an active method on an inactive RetainedObject.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d140 4
a143 9
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 2:\n"
         + "Passing a null reference as the Class argument to "
         + "theAttribute.appliesTo.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d176 3
a178 8
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 3:\n"
         + "Call to Element.setValue with an array whose length != nPeriods.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d215 4
a218 9
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 4:\n"
         + "Call to setValue (nPeriods (), ...) in a Problem "
         + "that has an Operation.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d251 3
a253 8
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 5:\n"
         + "Call to Attribute.appliesTo with Element as the Class.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d283 3
a285 8
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 6:\n"
         + "Call to Element.setValue with a non-modifiable Attribute.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d321 4
a324 9
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 7:\n"
         + "Call to Element.setValue for an Element class\n"
         + "to which the Attribute does not apply.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d362 3
a364 8
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 8:\n"
         + "Call to Element.getValue with an array whose length != nPeriods.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d404 4
a407 9
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 9:\n"
         + "Passing a null reference as the Attribute argument to "
         + "Element.getValue.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d445 3
a447 9
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 10:\n"
         + "Passing a null reference as the value argument to "
         + "Element.setValue.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d482 3
a484 8
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 11:\n"
         + "Call to Problem.enable with a Problem that's already enabled.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d521 4
a524 9
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 12:\n"
         + "Constructing a BomEntry whose Operation "
         + "and Part belong to different Problems.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d569 4
a572 9
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 13:\n"
         + "Call to Operation.getBomEntry "
         + "with a BOM index that's out of range.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d611 3
a613 8
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 14:\n"
         + "Call to Problem.readData on a Problem that has a Part.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d648 4
a651 9
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 15:\n"
         + "Call to theProblem.getDefaultValue "
         + "with an Attribute that has no default value.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d685 4
a688 9
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 16:\n"
         + "Call to theProblem.getDefaultValue "
         + "with an array whose length is not nPeriods.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d721 4
a724 9
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 17:\n"
         + "Call to Attribute.asAttribute (Boolean.class) with an Attribute\n"
         + "whose value type is not Boolean.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d753 4
a756 9
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 18:\n"
         + "Call to Problem.getGlobalElement () "
         + "with a Problem that has not been enabled.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d793 4
a796 9
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 19:\n"
         + "Call to Operation.newInstance "
         + "with a Problem that has not been enabled.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d835 4
a838 9
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 20:\n"
         + "Call to Operation.getBopEntry "
         + "with a BOP index that's out of range.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d879 4
a882 9
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 21:\n"
         + "Call to BomEntry.getSubstitute "
         + "with a Substitute index that's out of range.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d921 4
a924 9
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 22:\n"
         + "Passing an inactive RetainedObject to a method\n"
         + "that requires an active RetainedObject.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d960 4
a963 9
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 23:\n"
         + "Call to Element.getValue with an Attribute\n"
         + "that has been cast to a different value type.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d998 3
a1000 8
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Recovery Test Case 24:\n"
         + "Call to Problem.performAction with an invalid command.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d1043 22
@


1.3
log
@Split unrecoverable error testing from the rest of the tests.
@
text
@a64 2
      newEnabledProblem ();

@


1.2
log
@theProblem.performAction (theCommand)
@
text
@d853 3
a855 2
      theProblem.getMessageMgr ().setQuiet        (true);
      theProblem.getMessageMgr ().setMesgFileName ("ErrTester.out");
d898 3
a900 2
      theProblem.getMessageMgr ().setQuiet        (true);
      theProblem.getMessageMgr ().setMesgFileName ("ErrTester.out");
d1156 3
a1158 2
      theProblem.getMessageMgr ().setQuiet        (true);
      theProblem.getMessageMgr ().setMesgFileName ("RecoveryTester.out");
@


1.1
log
@Implemented the recovery test.
@
text
@d1119 1
a1119 1
         + "Call to Problem.performActionInJava with an invalid command.\n"
d1127 1
a1127 1
         theProblem.performActionInJava ("Bogus Command");
@

