head	1.121;
access;
symbols;
locks; strict;
comment	@# @;


1.121
date	2011.05.04.22.15.52;	author rjw;	state Exp;
branches;
next	1.120;

1.120
date	2011.05.02.18.32.42;	author rjw;	state Exp;
branches;
next	1.119;

1.119
date	2011.04.22.20.00.43;	author rjw;	state Exp;
branches;
next	1.118;

1.118
date	2011.02.25.16.07.24;	author rjw;	state Exp;
branches;
next	1.117;

1.117
date	2010.06.11.15.29.00;	author rjw;	state Exp;
branches;
next	1.116;

1.116
date	2009.10.28.21.47.36;	author rjw;	state Exp;
branches;
next	1.115;

1.115
date	2009.09.17.21.46.47;	author rjw;	state Exp;
branches;
next	1.114;

1.114
date	2009.08.06.14.40.10;	author rjw;	state Exp;
branches;
next	1.113;

1.113
date	2009.07.23.18.26.42;	author rjw;	state Exp;
branches;
next	1.112;

1.112
date	2009.07.23.17.47.23;	author rjw;	state Exp;
branches;
next	1.111;

1.111
date	2009.07.22.21.49.49;	author rjw;	state Exp;
branches;
next	1.110;

1.110
date	2009.07.21.22.33.03;	author rjw;	state Exp;
branches;
next	1.109;

1.109
date	2009.07.21.19.09.17;	author rjw;	state Exp;
branches;
next	1.108;

1.108
date	2009.06.24.18.22.12;	author rjw;	state Exp;
branches;
next	1.107;

1.107
date	2009.06.15.15.54.12;	author rjw;	state Exp;
branches;
next	1.106;

1.106
date	2009.05.08.22.13.13;	author rjw;	state Exp;
branches;
next	1.105;

1.105
date	2009.04.24.17.42.52;	author rjw;	state Exp;
branches;
next	1.104;

1.104
date	2009.04.15.16.29.29;	author rjw;	state Exp;
branches;
next	1.103;

1.103
date	2009.04.14.16.30.19;	author rjw;	state Exp;
branches;
next	1.102;

1.102
date	2009.04.13.22.52.30;	author rjw;	state Exp;
branches;
next	1.101;

1.101
date	2009.04.10.23.51.15;	author rjw;	state Exp;
branches;
next	1.100;

1.100
date	2009.03.13.16.36.10;	author rjw;	state Exp;
branches;
next	1.99;

1.99
date	2009.03.12.22.45.21;	author rjw;	state Exp;
branches;
next	1.98;

1.98
date	2009.03.05.23.02.44;	author rjw;	state Exp;
branches;
next	1.97;

1.97
date	2009.03.03.23.16.25;	author rjw;	state Exp;
branches;
next	1.96;

1.96
date	2009.03.03.21.47.49;	author rjw;	state Exp;
branches;
next	1.95;

1.95
date	2009.02.26.16.51.29;	author rjw;	state Exp;
branches;
next	1.94;

1.94
date	2009.01.30.16.24.37;	author rjw;	state Exp;
branches;
next	1.93;

1.93
date	2009.01.05.20.21.35;	author rjw;	state Exp;
branches;
next	1.92;

1.92
date	2009.01.05.19.06.02;	author rjw;	state Exp;
branches;
next	1.91;

1.91
date	2009.01.05.17.28.58;	author rjw;	state Exp;
branches;
next	1.90;

1.90
date	2009.01.05.16.53.12;	author rjw;	state Exp;
branches;
next	1.89;

1.89
date	2009.01.02.23.44.20;	author rjw;	state Exp;
branches;
next	1.88;

1.88
date	2008.12.24.22.59.46;	author rjw;	state Exp;
branches;
next	1.87;

1.87
date	2008.12.24.21.34.00;	author rjw;	state Exp;
branches;
next	1.86;

1.86
date	2008.12.24.20.34.23;	author rjw;	state Exp;
branches;
next	1.85;

1.85
date	2008.12.24.00.18.57;	author rjw;	state Exp;
branches;
next	1.84;

1.84
date	2008.12.23.15.30.37;	author rjw;	state Exp;
branches;
next	1.83;

1.83
date	2008.12.22.23.19.57;	author rjw;	state Exp;
branches;
next	1.82;

1.82
date	2008.12.22.23.15.52;	author rjw;	state Exp;
branches;
next	1.81;

1.81
date	2008.12.22.22.26.43;	author rjw;	state Exp;
branches;
next	1.80;

1.80
date	2008.12.22.20.21.40;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2008.12.22.17.12.10;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2008.12.18.22.12.35;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2008.12.18.22.00.09;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2008.12.18.20.39.35;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2008.12.18.20.06.54;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2008.12.18.19.48.26;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2008.12.18.17.02.12;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2008.12.16.23.43.05;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2008.12.16.23.00.57;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2008.12.16.16.13.32;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2008.12.15.22.31.42;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2008.12.15.21.40.52;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2008.12.12.22.53.07;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2008.12.11.23.39.52;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2008.12.11.22.21.53;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2008.12.11.21.37.17;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2008.12.11.17.01.29;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2008.12.10.19.20.42;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2008.12.09.19.09.06;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2008.12.09.18.38.19;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2008.12.08.23.15.50;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2008.12.08.17.03.41;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2008.12.04.18.55.08;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2008.12.04.16.56.34;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2008.12.03.23.02.22;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2008.12.03.18.40.01;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2008.12.03.18.28.50;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2008.12.03.15.58.00;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2008.11.26.20.11.00;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2008.11.25.15.28.49;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2008.11.20.20.05.51;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2008.11.20.19.27.13;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2008.11.13.23.29.55;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2008.11.07.16.26.39;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2008.11.05.23.14.57;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2008.11.05.17.12.29;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2008.11.04.22.22.25;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2008.11.04.21.25.38;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2008.10.29.20.27.20;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2008.10.22.13.43.31;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2008.10.20.20.54.38;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2008.10.15.21.14.07;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.10.09.21.20.23;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.10.08.17.58.52;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2008.10.07.22.16.19;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.10.07.21.13.01;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.10.07.18.50.28;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.10.06.22.43.10;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.10.06.22.14.07;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.09.19.21.59.27;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.09.18.20.22.14;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.09.12.16.09.37;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.09.11.20.16.28;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.09.11.20.05.53;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.09.11.19.10.26;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.09.11.15.20.54;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.09.08.19.45.37;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.09.05.22.06.52;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.09.05.15.53.04;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.08.28.18.30.39;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.08.20.18.49.28;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.08.19.22.19.12;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.08.19.22.14.33;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.08.07.15.25.50;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.08.06.18.48.23;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.07.10.21.20.10;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.07.09.20.41.34;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.07.09.15.45.40;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.07.08.19.31.02;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.07.08.18.26.01;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.07.01.21.18.08;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.30.22.02.12;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.27.15.13.20;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.26.19.18.08;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.24.14.29.08;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.17.19.46.03;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.13.18.09.32;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.13.15.57.10;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.27.18.45.56;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.121
log
@setValue ==> set
getValue ==> get
@
text
@
//==============================================================================
// WIT-J/Test Source File ErrTester.java.
//==============================================================================

package       com.ibm.witj.test;

import        com.ibm.witj.*;
import static com.ibm.witj.Attribute.*;

//==============================================================================
// Class ErrTester
//
// Responsible for performing tests on WIT-J that involve terminal errors.
//==============================================================================

final class ErrTester
{
//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// performTest ().
//
// Performs an error test.
//------------------------------------------------------------------------------

   static void performTest (String[] theArgs)
      {
      ErrTester theErrTester;

      theErrTester = new ErrTester ();

      theErrTester.perfTest (theArgs);
      }

//==============================================================================
// Private Constructor
//==============================================================================

   private ErrTester ()
      {
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// perfTest ().
//
// Internal implementation of performTest ().
//------------------------------------------------------------------------------

   private void perfTest (String[] theArgs)
      {
      int theCaseIdx;

      theCaseIdx = compCaseIndex (theArgs);

      switch (theCaseIdx)
         {
         case 1:
            testCase1 ();
            break;

         case 2:
            testCase2 ();
            break;

         case 3:
            testCase3 ();
            break;

         case 4:
            testCase4 ();
            break;

         case 5:
            testCase5 ();
            break;

         case 6:
            testCase6 ();
            break;

         case 7:
            testCase7 ();
            break;

         case 8:
            testCase8 ();
            break;

         case 9:
            testCase9 ();
            break;

         case 10:
            testCase10 ();
            break;

         case 11:
            testCase11 ();
            break;

         case 12:
            testCase12 ();
            break;

         case 13:
            testCase13 ();
            break;

         case 14:
            testCase14 ();
            break;

         case 15:
            testCase15 ();
            break;

         case 16:
            testCase16 ();
            break;

         case 17:
            testCase17 ();
            break;

         default:
            System.out.println (
                 "\n"
               + "ERROR:\n"
               + "   When error testing is requested, the second argument\n"
               + "   to the WIT-J tester must be an integer from 1 to 17.\n");

            System.exit (3);
         }
      }

//------------------------------------------------------------------------------
// compCaseIndex (String[] theArgs)
//
// Computes and returns the error case index from the command line arguments.
//------------------------------------------------------------------------------

   private int compCaseIndex (String[] theArgs)
      {
      if (theArgs.length < 2)
         {
         Tester.abortWmsg (
              "   The WIT-J Tester requires at least 2 command line arguments\n"
            + "   in the \"e\" case.");
         }

      try
         {
         return Integer.parseInt (theArgs[1]);
         }

      catch (NumberFormatException theExc)
         {
         System.out.println (
              "\n"
            + "ERROR:\n"
            + "   When error testing is requested, the second argument"
            + "   to the WIT-J tester must be an integer.\n");

         System.exit (3);

         return -1;
         }
      }

//------------------------------------------------------------------------------
// testCase1 ().
//
// Performs error test case 1.
//------------------------------------------------------------------------------

   private void testCase1 ()
      {
      Problem theProblem;

      printHeading (
         1,
         "Throws an instance of an unexpected Java Throwable class.");

      theProblem = newProblem ();

      assert (! TerminalException.witjHasTerminated ());

      try
         {
         theProblem.performAction ("throw-unexpected-java-throwable");

         throw new AssertionError ();
         }

      catch (InternalErrorException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println ("");

      assert (TerminalException.witjHasTerminated ());

      try
         {
         Problem.newInstance ();

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Error Test Case 1.");
      }

//------------------------------------------------------------------------------
// testCase2 ().
//
// Performs error test case 2.
//------------------------------------------------------------------------------

   private void testCase2 ()
      {
      Problem theProblem;

      printHeading (
         2,
         "Fails a Java assertion.");

      theProblem = newProblem ();

      try
         {
         theProblem.performAction ("fail-java-assert");

         throw new AssertionError ();
         }

      catch (InternalErrorException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Error Test Case 2.");
      }

//------------------------------------------------------------------------------
// testCase3 ().
//
// Performs error test case 3.
//------------------------------------------------------------------------------

   private void testCase3 ()
      {
      Problem theProblem;

      printHeading (
         3,
         "Throws a C++ exception of an unexpected type.\n"
       + "The native method returns a value.");

      theProblem = newProblem ();

      try
         {
         theProblem.performAction ("throw-unexpected-c++-exception");

         throw new AssertionError ();
         }

      catch (InternalErrorException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Error Test Case 3.");
      }

//------------------------------------------------------------------------------
// testCase4 ().
//
// Performs error test case 4.
//------------------------------------------------------------------------------

   private void testCase4 ()
      {
      Problem theProblem;

      printHeading (
         4,
         "Fails a C++ EXCEPTION_ASSERT.");

      theProblem = newProblem ();

      try
         {
         theProblem.performAction ("fail-c++-exception-assert");

         throw new AssertionError ();
         }

      catch (InternalErrorException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Error Test Case 4.");
      }

//------------------------------------------------------------------------------
// testCase5 ().
//
// Performs error test case 5.
//------------------------------------------------------------------------------

   private void testCase5 ()
      {
      Problem theProblem;

      printHeading (
         5,
         "Fails a C++ ABORTING_ASSERT.");

      theProblem = newProblem ();

      theProblem.performAction ("fail-c++-aborting-assert");

      throw new AssertionError ();
      }

//------------------------------------------------------------------------------
// testCase6 ().
//
// Performs error test case 6.
//------------------------------------------------------------------------------

   private void testCase6 ()
      {
      Problem theProblem;

      printHeading (
         6,
         "Exhausts memory in the WIT-J/Java code.");

      theProblem = newProblem ();

      try
         {
         theProblem.performAction ("exhaust-memory-in-witj-java");

         throw new AssertionError ();
         }

      catch (OutOfMemoryException theExc)
         {
         System.out.println ();

         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Error Test Case 6.");
      }

//------------------------------------------------------------------------------
// testCase7 ().
//
// Performs error test case 7.
//------------------------------------------------------------------------------

   private void testCase7 ()
      {
      Problem theProblem;

      printHeading (
         7,
         "Exhausts memory in the WIT-J/C++ code.");

      theProblem = newProblem ();

      try
         {
         theProblem.performAction ("exhaust-memory-in-witj-c++");

         throw new AssertionError ();
         }

      catch (OutOfMemoryException theExc)
         {
         System.out.println ();

         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Error Test Case 7.");
      }

//------------------------------------------------------------------------------
// testCase8 ().
//
// Performs error test case 8.
//------------------------------------------------------------------------------

   private void testCase8 ()
      {
      Problem theProblem;

      printHeading (
         8,
         "Triggers a JNI Exception.");

      theProblem = newProblem ();

      try
         {
         theProblem.performAction ("trigger-jni-exception");

         throw new AssertionError ();
         }

      catch (InternalErrorException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Error Test Case 8.");
      }

//------------------------------------------------------------------------------
// testCase9 ().
//
// Performs error test case 9.
//------------------------------------------------------------------------------

   private void testCase9 ()
      {
      Problem theProblem;

      printHeading (
         9,
         "Exhausts memory in JNI.");

      theProblem = newProblem ();

      try
         {
         theProblem.performAction ("exhaust-memory-in-jni");

         throw new AssertionError ();
         }

      catch (OutOfMemoryException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Error Test Case 9.");
      }

//------------------------------------------------------------------------------
// testCase10 ().
//
// Performs error test case 10.
//------------------------------------------------------------------------------

   private void testCase10 ()
      {
      Problem theProblem;

      printHeading (
         10,
         "Attempts to set nPeriods to a negative number.");

      theProblem = newProblem ();

      try
         {
         theProblem.set (nPeriods, -3);

         throw new AssertionError ();
         }

      catch (TerminalAppException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Error Test Case 10.");
      }

//------------------------------------------------------------------------------
// testCase11 ().
//
// Performs error test case 11.
//------------------------------------------------------------------------------

   private void testCase11 ()
      {
      Problem theProblem;

      printHeading (
         11,
         "Causes WIT to issue a fatal message.");

      theProblem = newProblem ();

      try
         {
         theProblem.performAction ("trigger-wit-fatal-message");

         throw new AssertionError ();
         }

      catch (InternalErrorException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Error Test Case 11.");
      }

//------------------------------------------------------------------------------
// testCase12 ().
//
// Performs error test case 12.
//------------------------------------------------------------------------------

   private void testCase12 ()
      {
      Problem theProblem;

      printHeading (
         12,
         "Exhausts memory in WIT.");

      theProblem = newProblem ();

      try
         {
         theProblem.performAction ("exhaust-memory-in-wit");

         throw new AssertionError ();
         }

      catch (OutOfMemoryException theExc)
         {
         System.out.println ();

         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Error Test Case 12.");
      }

//------------------------------------------------------------------------------
// testCase13 ().
//
// Performs error test case 13.
//------------------------------------------------------------------------------

   private void testCase13 ()
      {
      Problem theProblem;

      printHeading (
         13,
         "Invokes readData on a file that does not exist.");

      theProblem = newProblem ();

      try
         {
         theProblem.readData ("no-file.data");

         throw new AssertionError ();
         }

      catch (ReadDataException theExc)
         {
         System.out.println ();

         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Error Test Case 13.");
      }

//------------------------------------------------------------------------------
// testCase14 ().
//
// Performs error test case 14.
//------------------------------------------------------------------------------

   private void testCase14 ()
      {
      Problem theProblem;

      printHeading (
         14,
         "Invokes readData on a file that sets wit34Compatible to TRUE.");

      theProblem = newProblem ();

      try
         {
         theProblem.readData ("wit34.data");

         throw new AssertionError ();
         }

      catch (ReadDataException theExc)
         {
         System.out.println ();

         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Error Test Case 14.");
      }

//------------------------------------------------------------------------------
// testCase15 ().
//
// Performs error test case 15.
//------------------------------------------------------------------------------

   private void testCase15 ()
      {
      Problem theProblem;

      printHeading (
         15,
         "Invokes readData on a file that contains a character in Latin-1.");

      theProblem = newProblem ();

      try
         {
         theProblem.readData ("latin1.data");

         throw new AssertionError ();
         }

      catch (BadCharacterException theExc)
         {
         theExc.printStackTrace ();

         Tester.printlnUTF8 (
              "\n"
            + "The offending String given in the BadCharacterException was: "
            + theExc.getOffendingString ());
         }

      System.out.println (
           "\n"
         + "Successful completion of Error Test Case 15.");
      }

//------------------------------------------------------------------------------
// testCase16 ().
//
// Performs error test case 16.
// This case is designed to be invoked with the native library path set to an
// invalid directory.
//------------------------------------------------------------------------------

   private void testCase16 ()
      {
      printHeading (
         16,
         "Invokes WIT-J with a bad native library path.");

      try
         {
         newProblem ();

         throw new AssertionError ();
         }

      catch (TerminalAppException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Error Test Case 16.");
      }

//------------------------------------------------------------------------------
// testCase17 ().
//
// Performs error test case 17.
//------------------------------------------------------------------------------

   private void testCase17 ()
      {
      Problem theProblem;

      printHeading (
         17,
         "Calls an unimplemented native method.");

      theProblem = newProblem ();

      try
         {
         theProblem.performAction ("call-unimplemented-native-method");

         throw new AssertionError ();
         }

      catch (TerminalAppException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Error Test Case 17.");
      }

//------------------------------------------------------------------------------
// newProblem ()
//
// Creates and returns a new Problem set up for error testing.
//------------------------------------------------------------------------------

   private Problem newProblem ()
      {
      Problem theProblem;

      theProblem = Problem.newInstance ();

      theProblem.getMessageMgr ().setMesgFileName ("ErrTester.output");

      return theProblem;
      }

//------------------------------------------------------------------------------
// printHeading (theCaseIdx, text)
//
// Prints a heading for the error test case of theCaseIdx, where text describes
// error test case.
//------------------------------------------------------------------------------

   private void printHeading (int theCaseIdx, String text)
      {
      System.out.printf (
         "\n"
       + "----------------------------------------"
       + "----------------------------------------\n"
       + "WIT-J Error Test Case %d:\n"
       + "%s\n"
       + "----------------------------------------"
       + "----------------------------------------\n"
       + "\n",
         theCaseIdx,
         text);
      }

//==============================================================================
}
@


1.120
log
@Reduced heading comments.
@
text
@d503 1
a503 1
         theProblem.setValue (nPeriods, -3);
@


1.119
log
@Cleared up some of the code that was flagged with warnings by Eclipse.
@
text
@a3 2
//
// Contains the declaration of class ErrTester.
@


1.118
log
@Moved GlobalAspect responsibilities to class Problem.
Removed class GlobalAspect.
@
text
@a11 2
import static com.ibm.witj.Part.Category.*;
import static com.ibm.witj.MessageGroup.*;
a705 2
      Problem theProblem;

d712 1
a712 1
         theProblem = newProblem ();
@


1.117
log
@Modified error test case 16 to work correctly on Cygwin.
@
text
@d507 1
a507 1
         theProblem.getGlobalAspect ().setValue (nPeriods, -3);
@


1.116
log
@Changed the extensions of test output files from out to output.
@
text
@d702 2
a713 2
      System.setProperty ("java.library.path", "bogus-path");

@


1.115
log
@Implemented minimal thread safety:
   All calls to WIT-J must be from the same Thread or a StatusQuoException
   will be thrown.
@
text
@d776 1
a776 1
      theProblem.getMessageMgr ().setMesgFileName ("ErrTester.out");
@


1.114
log
@Moved the UTF-8 logic to a special print method and re-used it.
@
text
@d803 1
a803 1
//------------------------------------------------------------------------------
@


1.113
log
@Changed name of class TerminalAppErrorException to TerminalAppException.
@
text
@d687 1
a687 1
         System.out.println (
@


1.112
log
@Switched two exceptions from class InternalErrorException to
   TerminalAppErrorException.
@
text
@d512 1
a512 1
      catch (TerminalAppErrorException theExc)
d721 1
a721 1
      catch (TerminalAppErrorException theExc)
d754 1
a754 1
      catch (TerminalAppErrorException theExc)
@


1.111
log
@Made WIT-J throw an InternalErrorException instead of a
   TerminalAppErrorException when the native library fails to load.
@
text
@a684 2
         System.out.println ();

d721 1
a721 1
      catch (InternalErrorException theExc)
a722 2
         System.out.println ();

d754 1
a754 1
      catch (InternalErrorException theExc)
a755 2
         System.out.println ();

@


1.110
log
@Made WIT-J throw a TerminalAppErrorException when the C++ library could not
be loaded.
@
text
@d132 4
d141 1
a141 1
               + "   to the WIT-J tester must be an integer from 1 to 16.\n");
d712 1
a712 1
         "Invokes WIT-J with a bad library path.");
d736 35
@


1.109
log
@Replaced class WitSevereErrorException with class TerminalAppErrorException.
@
text
@d128 4
d137 1
a137 1
               + "   to the WIT-J tester must be an integer from 1 to 15.\n");
d697 35
@


1.108
log
@Revised the documented procedure for setting up WIT-J on Linux.
@
text
@d504 1
a504 1
      catch (WitSevereErrorException theExc)
@


1.107
log
@Replaced public accessor methods for the Attributes with piublic fields.
@
text
@d18 1
a18 1
// Responsible for performing tests on WIT-J that involve errors.
@


1.106
log
@Removed the "enabled" concept from WIT-J.
@
text
@d499 1
a499 1
         theProblem.getGlobalAspect ().setValue (nPeriods (), -3);
@


1.105
log
@Timing test.
@
text
@d187 1
a187 1
      theProblem = newEnabledProblem ();
d238 1
a238 1
      theProblem = newEnabledProblem ();
d272 1
a272 1
      theProblem = newEnabledProblem ();
d305 1
a305 1
      theProblem = newEnabledProblem ();
d338 1
a338 1
      theProblem = newEnabledProblem ();
d359 1
a359 1
      theProblem = newEnabledProblem ();
d394 1
a394 1
      theProblem = newEnabledProblem ();
d429 1
a429 1
      theProblem = newEnabledProblem ();
d462 1
a462 1
      theProblem = newEnabledProblem ();
d495 1
a495 1
      theProblem = newEnabledProblem ();
d528 1
a528 1
      theProblem = newEnabledProblem ();
d561 1
a561 1
      theProblem = newEnabledProblem ();
d596 1
a596 1
      theProblem = newEnabledProblem ();
d631 1
a631 1
      theProblem = newEnabledProblem ();
d666 1
a666 1
      theProblem = newEnabledProblem ();
d693 1
a693 1
// newEnabledProblem ()
d695 1
a695 1
// Creates, enables, and returns a new Problem set up for error testing.
d698 1
a698 1
   private Problem newEnabledProblem ()
a703 1
      theProblem.getMessageMgr ().setQuiet        (true);
a705 2
      theProblem.enable ();

@


1.104
log
@Changed the name of Java class NonUTF8DataFileException to
   BadCharacterException.
@
text
@d28 1
a28 1
// performErrorTest ().
d33 1
a33 1
   public static void performErrorTest (String[] theArgs)
d39 1
a39 1
      theErrTester.performTest (theArgs);
d55 1
a55 1
// performTest ().
d57 1
a57 1
// Performs an error test.
d60 1
a60 1
   private void performTest (String[] theArgs)
@


1.103
log
@Non-UTF-8 string detection.
@
text
@d675 1
a675 1
      catch (NonUTF8DataFileException theExc)
d683 2
a684 2
            + "   The offending String given in the NonUTF8DataFileException "
            +    "was: " + theExc.getOffendingString ());
@


1.102
log
@Checking for non-UTF-8 characters.
@
text
@d680 5
@


1.101
log
@Bad data file character detection.
@
text
@d675 1
a675 1
      catch (InternalErrorException theExc)
@


1.100
log
@Changed name of GlobalComponent classes to GlobalAspect.
@
text
@d660 2
d664 14
a677 1
         "Invokes purgeData.");
d679 2
a680 1
      PurgeTester.performPurgeTest ();
@


1.99
log
@Changed name of GlobalElement classes to GlobalComponent.
@
text
@d499 1
a499 1
         theProblem.getGlobalComponent ().setValue (nPeriods (), -3);
@


1.98
log
@purgeData
@
text
@d499 1
a499 1
         theProblem.getGlobalElement ().setValue (nPeriods (), -3);
@


1.97
log
@purgeData
@
text
@d664 1
a664 13
      try
         {
         PurgeTester.performPurgeTest ();

         throw new AssertionError ();
         }

      catch (InternalErrorException theExc)
         {
         System.out.println ();

         theExc.printStackTrace ();
         }
@


1.96
log
@purgeData ()
@
text
@d666 1
a666 1
         purgeDataTest ();
a683 105
// purgeDataTest ()
//
// Performs the main content of the test of purgeData ().
//------------------------------------------------------------------------------

   private void purgeDataTest ()
      {
      Problem theProblem;

      theProblem = newPurgeTestProblem ();

      theProblem.purgeData ();
      }

//------------------------------------------------------------------------------
// newPurgeTestProblem ()
//
// Builds and returns a Problem for testing purgeData.
//------------------------------------------------------------------------------

   private Problem newPurgeTestProblem ()
      {
      Problem    theProblem;

      Part       thePartA;
      Part       thePartB;
      Part       thePartC;
      Part       thePartD;
      Part       thePartE;

      Demand     theDemandCF;
      Demand     theDemandEG;
      Demand     theDemandEH;

      Operation  theOpnI;
      Operation  theOpnJ;
      Operation  theOpnK;

      BomEntry   theBomEntIA;
      BomEntry   theBomEntJB;
      BomEntry   theBomEntKB;
      BomEntry   theBomEntKC;
      BomEntry   theBomEntKD;

      Substitute theSubIAA;
      Substitute theSubIAB;
      Substitute theSubJBA;
      Substitute theSubKCD;
      Substitute theSubKDC;

      BopEntry   theBopEntIE;
      BopEntry   theBopEntIC;
      BopEntry   theBopEntID;
      BopEntry   theBopEntJD;
      BopEntry   theBopEntKE;

      theProblem  = newEnabledProblem ();

      thePartA    = Part      .newInstance (theProblem,  "A", CAPACITY);
      thePartB    = Part      .newInstance (theProblem,  "B", CAPACITY);
      thePartC    = Part      .newInstance (theProblem,  "C", MATERIAL);
      thePartD    = Part      .newInstance (theProblem,  "D", MATERIAL);
      thePartE    = Part      .newInstance (theProblem,  "E", MATERIAL);

      theDemandCF = Demand    .newInstance (thePartC,    "F");
      theDemandEG = Demand    .newInstance (thePartE,    "G");
      theDemandEH = Demand    .newInstance (thePartE,    "H");

      theOpnI     = Operation .newInstance (theProblem,  "I");
      theOpnJ     = Operation .newInstance (theProblem,  "J");
      theOpnK     = Operation .newInstance (theProblem,  "K");

      theBomEntIA = BomEntry  .newInstance (theOpnI,     thePartA);
      theBomEntJB = BomEntry  .newInstance (theOpnJ,     thePartB);
      theBomEntKB = BomEntry  .newInstance (theOpnK,     thePartB);
      theBomEntKC = BomEntry  .newInstance (theOpnK,     thePartC);
      theBomEntKD = BomEntry  .newInstance (theOpnK,     thePartD);
   
      theSubIAA   = Substitute.newInstance (theBomEntIA, thePartA);
      theSubIAB   = Substitute.newInstance (theBomEntIA, thePartB);
      theSubJBA   = Substitute.newInstance (theBomEntJB, thePartA);
      theSubKCD   = Substitute.newInstance (theBomEntKC, thePartD);
      theSubKDC   = Substitute.newInstance (theBomEntKD, thePartC);

      theBopEntIE = BopEntry  .newInstance (theOpnI,     thePartE);
      theBopEntIC = BopEntry  .newInstance (theOpnI,     thePartC);
      theBopEntID = BopEntry  .newInstance (theOpnI,     thePartD);
      theBopEntJD = BopEntry  .newInstance (theOpnJ,     thePartD);
      theBopEntKE = BopEntry  .newInstance (theOpnK,     thePartE);

      theOpnI    .setValue (selForDel (), true);

      thePartC   .setValue (selForDel (), true);
      theDemandEG.setValue (selForDel (), true);
      theOpnJ    .setValue (selForDel (), true);
      theBomEntKB.setValue (selForDel (), true);
      theSubIAA  .setValue (selForDel (), true);
      theBopEntIE.setValue (selForDel (), true);

      theOpnI    .setValue (selForDel (), false);

      return theProblem;
      }

//------------------------------------------------------------------------------
@


1.95
log
@PurgeData
@
text
@d691 3
a693 32
      Problem       theProblem;
      GlobalElement theGlobalElement;
      Part          thePartA;
      Part          thePartB;
      Part          thePartC;
      Part          thePartG;
      Demand        theDemandD;
      Demand        theDemandE;
      Demand        theDemandH;
      Operation     theOpnF;
      BomEntry      theBomEntFA;
      BomEntry      theBomEntFB;
      Substitute    theSubEAB;
      BopEntry      theBopEntFC;
      BopEntry      theBopEntFG;

      theProblem       = newEnabledProblem ();
      theGlobalElement = theProblem.getGlobalElement ();

      thePartA         = Part      .newInstance (theProblem,  "A", CAPACITY);
      thePartB         = Part      .newInstance (theProblem,  "B", CAPACITY);
      thePartC         = Part      .newInstance (theProblem,  "C", MATERIAL);
      thePartG         = Part      .newInstance (theProblem,  "G", MATERIAL);
      theDemandD       = Demand    .newInstance (thePartC,    "D");
      theDemandE       = Demand    .newInstance (thePartB,    "E");
      theDemandH       = Demand    .newInstance (thePartG,    "H");
      theOpnF          = Operation .newInstance (theProblem,  "F");
      theBomEntFA      = BomEntry  .newInstance (theOpnF,     thePartA);
      theBomEntFB      = BomEntry  .newInstance (theOpnF,     thePartB);
      theSubEAB        = Substitute.newInstance (theBomEntFA, thePartB);
      theBopEntFC      = BopEntry  .newInstance (theOpnF,     thePartC);
      theBopEntFG      = BopEntry  .newInstance (theOpnF,     thePartG);
d699 90
@


1.94
log
@Setting wit34Allowed to false.
@
text
@d124 4
d133 1
a133 1
               + "   to the WIT-J tester must be an integer from 1 to 14.\n");
d653 75
@


1.93
log
@Added code to handle errors in the execution of readData.
@
text
@d120 4
d129 1
a129 1
               + "   to the WIT-J tester must be an integer from 1 to 13.\n");
d614 35
@


1.92
log
@Added code to handle running out of memory in WIT.
@
text
@d116 4
d125 1
a125 1
               + "   to the WIT-J tester must be an integer from 1 to 12.\n");
d575 35
@


1.91
log
@Implemented the handling of fatal errors from WIT.
@
text
@d112 4
d121 1
a121 1
               + "   to the WIT-J tester must be an integer from 1 to 11.\n");
d536 35
@


1.90
log
@Added printHeading methods.
@
text
@d108 4
d117 1
a117 1
               + "   to the WIT-J tester must be an integer from 1 to 10.\n");
d499 33
@


1.89
log
@Collapsed the subclasses of InternalErrorException into InternalErrorException.
@
text
@d163 3
a165 8
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 1:\n"
         + "Throws an instance of an unexpected Java Throwable class.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d214 3
a216 8
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 2:\n"
         + "Fails a Java assertion.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d247 4
a250 9
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 3:\n"
         + "Throws a C++ exception of an unexpected type.\n"
         + "The native method returns a value.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d281 3
a283 8
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 4:\n"
         + "Fails a C++ EXCEPTION_ASSERT.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d314 3
a316 8
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 5:\n"
         + "Fails a C++ ABORTING_ASSERT.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d335 3
a337 8
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 6:\n"
         + "Exhausts memory in the WIT-J/Java code.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d370 3
a372 8
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 7:\n"
         + "Exhausts memory in the WIT-J/C++ code.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d405 3
a407 8
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 8:\n"
         + "Triggers a JNI Exception.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d438 3
a440 8
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 9:\n"
         + "Exhausts memory in JNI.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d471 3
a473 8
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 10:\n"
         + "Attempts to set nPeriods to a negative number.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");
d515 22
@


1.88
log
@Added code to handle severe errors from WIT.
@
text
@d183 1
a183 1
      catch (UnexpJavaThrowableException theExc)
d237 1
a237 1
      catch (JavaAssertionException theExc)
d276 1
a276 1
      catch (UnexpCppExcException theExc)
d314 1
a314 1
      catch (CppAssertionException theExc)
d458 1
a458 1
      catch (JniExcException theExc)
@


1.87
log
@Added a test for a severe error from WIT.
@
text
@d521 1
a521 1
         + "Sets nPeriods to a negative number.\n"
d534 1
a534 1
      catch (UnexpCppExcException theExc)
@


1.86
log
@Added code to handle memory errors in makeJString.
@
text
@d104 4
d113 1
a113 1
               + "   to the WIT-J tester must be an integer from 1 to 9.\n");
d507 38
@


1.85
log
@Added code to handle Java exceptions raised during the execution of JNI
   functions.
@
text
@d100 4
d109 1
a109 1
               + "   to the WIT-J tester must be an integer from 1 to 8.\n");
d465 38
@


1.84
log
@Added code to handle a memory overflow in the C++ side of WIT-J.
@
text
@d96 4
d105 1
a105 1
               + "   to the WIT-J tester must be an integer from 1 to 7.\n");
d423 38
@


1.83
log
@Minor revision.
@
text
@d92 4
d101 1
a101 1
               + "   to the WIT-J tester must be an integer from 1 to 6.\n");
d220 1
a220 1
         theProblem.performAction ("incur-java-assertion-error");
d379 40
@


1.82
log
@Changed some Java Exception class names.
@
text
@d208 1
a208 1
         + "Incurs an assertion error in Java.\n"
d329 1
a329 11
      try
         {
         theProblem.performAction ("fail-c++-aborting-assert");

         throw new AssertionError ();
         }

      catch (CppAssertionException theExc)
         {
         theExc.printStackTrace ();
         }
d331 1
a331 3
      System.out.println (
           "\n"
         + "Successful completion of Error Test Case 5.");
@


1.81
log
@Implemented Java class OutOfMemoryException.
@
text
@d167 1
a167 1
      catch (UnexpectedThrowableException theExc)
d221 1
a221 1
      catch (AssertionErrorException theExc)
d260 1
a260 1
      catch (UnexpectedCppExcException theExc)
d298 1
a298 1
      catch (CppAssertFailureException theExc)
d336 1
a336 1
      catch (CppAssertFailureException theExc)
@


1.80
log
@Split unrecoverable error testing from the rest of the tests.
@
text
@d374 1
a374 1
      catch (UnexpectedThrowableException theExc)
d376 2
@


1.79
log
@Added a test for ABORTING_ASSERT.
@
text
@d88 4
d97 1
a97 1
               + "   to the WIT-J tester must be an integer from 1 to 5.\n");
d152 1
a152 1
         + "Throws an instance of an unexpected Throwable class.\n"
d162 1
a162 1
         theProblem.performAction ("throw-unexpected-Throwable");
d216 1
a216 1
         theProblem.performAction ("incur-assertion-error");
d347 38
@


1.78
log
@Removed an unneeded test case.
@
text
@d84 4
d93 1
a93 1
               + "   to the WIT-J tester must be an integer from 1 to 4.\n");
d281 1
a281 1
         + "Incurs an assertion failure in C++.\n"
d289 1
a289 1
         theProblem.performAction ("incur-c++-assertion-failure");
d305 38
@


1.77
log
@theProblem.performAction (theCommand)
@
text
@a83 4
         case 5:
            testCase5 ();
            break;

d89 1
a89 1
               + "   to the WIT-J tester must be an integer from 1 to 5.\n");
d239 1
a239 1
         + "The native method does not return a value.\n"
a276 39
         + "Throws a C++ exception of an unexpected type.\n"
         + "The native method returns a value.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem = newEnabledProblem ();

      try
         {
         theProblem.performAction ("throw-unexpected-c++-exception-value");

         throw new AssertionError ();
         }

      catch (UnexpectedCppExcException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Error Test Case 4.");
      }

//------------------------------------------------------------------------------
// testCase5 ().
//
// Performs error test case 5.
//------------------------------------------------------------------------------

   private void testCase5 ()
      {
      Problem theProblem;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 5:\n"
d297 1
a297 1
         + "Successful completion of Error Test Case 5.");
@


1.76
log
@theProblem.performAction (theCommand)
@
text
@d148 1
a148 1
         + "Call to UnexpectedThrowableException.selfTest.\n"
d158 1
a158 1
         theProblem.performActionInJava ("throw-unexpected-Throwable");
d204 1
a204 1
         + "Call to AssertionErrorException.selfTest.\n"
d212 1
a212 1
         theProblem.performActionInJava ("incur-assertion-error");
d242 2
a243 1
         + "Call to Problem.throwUnexpCppException.\n"
d251 1
a251 1
         theProblem.throwUnexpCppException ();
d281 2
a282 1
         + "Call to Problem.throwUnexpCppExceptionBool.\n"
d290 1
a290 1
         theProblem.throwUnexpCppExceptionBool ();
d320 1
a320 1
         + "Call to Problem.incurCppAssertFailure.\n"
d328 1
a328 1
         theProblem.incurCppAssertFailure ();
@


1.75
log
@Partial implementation of Problem.performActionIJava (...).
@
text
@d197 2
d208 2
d212 1
a212 1
         AssertionErrorException.selfTest ();
@


1.74
log
@Implemented the recovery test.
@
text
@d141 2
d152 2
d158 1
a158 1
         UnexpectedThrowableException.selfTest ();
@


1.73
log
@Added test for an invalid command to performActionInJava.
@
text
@d69 1
a69 1
            errorTestCase1 ();
d73 1
a73 1
            errorTestCase2 ();
d77 1
a77 1
            errorTestCase3 ();
d81 1
a81 1
            errorTestCase4 ();
d85 1
a85 97
            errorTestCase5 ();
            break;

         case 6:
            errorTestCase6 ();
            break;

         case 7:
            errorTestCase7 ();
            break;

         case 8:
            errorTestCase8 ();
            break;

         case 9:
            errorTestCase9 ();
            break;

         case 10:
            errorTestCase10 ();
            break;

         case 11:
            errorTestCase11 ();
            break;

         case 12:
            errorTestCase12 ();
            break;

         case 13:
            errorTestCase13 ();
            break;

         case 14:
            errorTestCase14 ();
            break;

         case 15:
            errorTestCase15 ();
            break;

         case 16:
            errorTestCase16 ();
            break;

         case 17:
            errorTestCase17 ();
            break;

         case 18:
            errorTestCase18 ();
            break;

         case 19:
            errorTestCase19 ();
            break;

         case 20:
            errorTestCase20 ();
            break;

         case 21:
            errorTestCase21 ();
            break;

         case 22:
            errorTestCase22 ();
            break;

         case 23:
            errorTestCase23 ();
            break;

         case 24:
            errorTestCase24 ();
            break;

         case 25:
            errorTestCase25 ();
            break;

         case 26:
            errorTestCase26 ();
            break;

         case 27:
            errorTestCase27 ();
            break;

         case 28:
            errorTestCase28 ();
            break;

         case 29:
            errorTestCase29 ();
d93 1
a93 1
               + "   to the WIT-J tester must be an integer from 1 to 29.\n");
d134 1
a134 1
// errorTestCase1 ().
d139 1
a139 1
   private void errorTestCase1 ()
a140 2
      Problem theProblem;

d146 1
a146 1
         + "Call to an active method on an inactive RetainedObject.\n"
d150 1
a150 3
      theProblem = newEnabledProblem ();

      theProblem.shutDown ();
d154 1
a154 1
         theProblem.displayData ("error.txt");
d159 1
a159 1
      catch (StatusQuoException theExc)
d164 1
a164 4
      System.out.println (
           "\n"
         + "Successful completion of Case 1.");
      }
d166 1
a166 21
//------------------------------------------------------------------------------
// errorTestCase2 ().
//
// Performs error test case 2.
//------------------------------------------------------------------------------

   private void errorTestCase2 ()
      {
      Class <? extends Element> theClass;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 2:\n"
         + "Passing a null reference as the Class argument to "
         + "theAttribute.appliesTo.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theClass = null;
d170 1
a170 1
         nPeriods ().appliesTo (theClass);
d182 1
a182 1
         + "Successful completion of Case 2.");
d186 1
a186 1
// errorTestCase3 ().
d188 1
a188 1
// Performs error test case 3.
d191 1
a191 1
   private void errorTestCase3 ()
a192 4
      Problem  theProblem;
      Part     thePartA;
      double[] supplyVolVal;

d197 2
a198 2
         + "WIT-J Error Test Case 3:\n"
         + "Call to Element.setValue with an array whose length != nPeriods.\n"
a201 6
      theProblem   = newEnabledProblem ();

      thePartA     = Part.newInstance (theProblem, "A", MATERIAL);

      supplyVolVal = new double[]{1, 2, 3, 4};
      
d204 1
a204 1
         thePartA.setValue (supplyVol (), supplyVolVal);
d209 1
a209 1
      catch (StatusQuoException theExc)
a213 2
      theProblem.shutDown ();

d216 1
a216 1
         + "Successful completion of Case 3.");
d220 1
a220 1
// errorTestCase4 ().
d222 1
a222 1
// Performs error test case 4.
d225 1
a225 1
   private void errorTestCase4 ()
d233 2
a234 3
         + "WIT-J Error Test Case 4:\n"
         + "Call to setValue (nPeriods (), ...) in a Problem "
         + "that has an Operation.\n"
a239 2
      Operation.newInstance (theProblem, "Test Opn 4");

d242 1
a242 1
         theProblem.getGlobalElement ().setValue (nPeriods (), 7);
d247 1
a247 1
      catch (StatusQuoException theExc)
a251 2
      theProblem.shutDown ();

d254 1
a254 1
         + "Successful completion of Case 4.");
d258 1
a258 1
// errorTestCase5 ().
d260 1
a260 35
// Performs error test case 5.
//------------------------------------------------------------------------------

   private void errorTestCase5 ()
      {
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 5:\n"
         + "Call to Attribute.appliesTo with Element as the Class.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      try
         {
         nPeriods ().appliesTo (Element.class);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Case 5.");
      }

//------------------------------------------------------------------------------
// errorTestCase6 ().
//
// Performs error test case 6.
d263 1
a263 1
   private void errorTestCase6 ()
a265 1
      Part    thePartA;
d271 2
a272 2
         + "WIT-J Error Test Case 6:\n"
         + "Call to Element.setValue with a non-modifiable Attribute.\n"
a277 2
      thePartA   = Part.newInstance (theProblem, "A", MATERIAL);

d280 1
a280 1
         thePartA.setValue (scrapVol (), new double[26]);
d285 1
a285 1
      catch (StatusQuoException theExc)
a289 2
      theProblem.shutDown ();

d292 1
a292 1
         + "Successful completion of Case 6.");
d296 1
a296 1
// errorTestCase7 ().
d298 1
a298 1
// Performs error test case 7.
d301 1
a301 1
   private void errorTestCase7 ()
a303 1
      Part    thePartA;
d309 2
a310 3
         + "WIT-J Error Test Case 7:\n"
         + "Call to Element.setValue for an Element class\n"
         + "to which the Attribute does not apply.\n"
a315 2
      thePartA   = Part.newInstance (theProblem, "A", MATERIAL);

d318 1
a318 1
         thePartA.setValue (demandVol (), new double[26]);
d323 1
a323 957
      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.shutDown ();

      System.out.println (
           "\n"
         + "Successful completion of Case 7.");
      }

//------------------------------------------------------------------------------
// errorTestCase8 ().
//
// Performs error test case 8.
//------------------------------------------------------------------------------

   private void errorTestCase8 ()
      {
      Problem  theProblem;
      Part     thePartA;
      Demand   theDemandB;
      double[] demandVolVal;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 8:\n"
         + "Call to Element.getValue with an array whose length != nPeriods.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem   = newEnabledProblem ();

      thePartA     = Part  .newInstance (theProblem, "A", MATERIAL);
      theDemandB   = Demand.newInstance (thePartA,   "B");

      demandVolVal = new double[4];

      try
         {
         theDemandB.getValue (demandVol (), demandVolVal);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.shutDown ();

      System.out.println (
           "\n"
         + "Successful completion of Case 8.");
      }

//------------------------------------------------------------------------------
// errorTestCase9 ().
//
// Performs error test case 9.
//------------------------------------------------------------------------------

   private void errorTestCase9 ()
      {
      Problem              theProblem;
      Part                 thePartA;
      Attribute <double[]> theAtt;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 9:\n"
         + "Passing a null reference as the Attribute argument to "
         + "Element.getValue.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem = newEnabledProblem ();

      thePartA   = Part.newInstance (theProblem, "A", MATERIAL);

      theAtt     = null;

      try
         {
         thePartA.getValue (theAtt);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.shutDown ();

      System.out.println (
           "\n"
         + "Successful completion of Case 9.");
      }

//------------------------------------------------------------------------------
// errorTestCase10 ().
//
// Performs error test case 10.
//------------------------------------------------------------------------------

   private void errorTestCase10 ()
      {
      Problem theProblem;
      Part    thePartA;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 10:\n"
         + "Passing a null reference as the value argument to "
         + "Element.setValue.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem = newEnabledProblem ();

      thePartA   = Part.newInstance (theProblem, "A", MATERIAL);

      try
         {
         thePartA.setValue (supplyVol (), null);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.shutDown ();

      System.out.println (
           "\n"
         + "Successful completion of Case 10.");
      }

//------------------------------------------------------------------------------
// errorTestCase11 ().
//
// Performs error test case 11.
//------------------------------------------------------------------------------

   private void errorTestCase11 ()
      {
      Problem theProblem;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 11:\n"
         + "Call to Problem.enable with a Problem that's already enabled.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem = newEnabledProblem ();

      try
         {
         theProblem.enable ();

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.shutDown ();

      System.out.println (
           "\n"
         + "Successful completion of Case 11.");
      }

//------------------------------------------------------------------------------
// errorTestCase12 ().
//
// Performs error test case 12.
//------------------------------------------------------------------------------

   private void errorTestCase12 ()
      {
      Problem    theProblemA;
      Operation  theOpnA;
      MessageMgr theMessageMgrB;
      Problem    theProblemB;
      Part       thePartB;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 12:\n"
         + "Constructing a BomEntry whose Operation "
         + "and Part belong to different Problems.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblemA    = newEnabledProblem             ();
      theOpnA        = Operation  .newInstance       (theProblemA,   "A");

      theProblemB    = Problem    .newInstance       ();
      theMessageMgrB = theProblemB.getMessageMgr     ();
      theMessageMgrB              .setQuiet          (true);
      theMessageMgrB              .setMesgTimesPrint (INFORMATIONAL, 0);
      theProblemB                 .enable            ();
      thePartB       = Part       .newInstance       (theProblemB,   "B",
                                                                     MATERIAL);
      
      try
         {
         BomEntry                 .newInstance       (theOpnA, thePartB);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblemB.shutDown ();
      theProblemA.shutDown ();

      System.out.println (
           "\n"
         + "Successful completion of Case 12.");
      }

//------------------------------------------------------------------------------
// errorTestCase13 ().
//
// Performs error test case 13.
//------------------------------------------------------------------------------

   private void errorTestCase13 ()
      {
      Problem   theProblem;
      Part      thePartA;
      Operation theOpnB;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 13:\n"
         + "Call to Operation.getBomEntry "
         + "with a BOM index that's out of range.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem = newEnabledProblem ();

      thePartA   = Part     .newInstance (theProblem, "A", MATERIAL);
      theOpnB    = Operation.newInstance (theProblem, "B");

      BomEntry              .newInstance (theOpnB,     thePartA);
      BomEntry              .newInstance (theOpnB,     thePartA);

      try
         {
         theOpnB.getBomEntry (2);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.shutDown ();

      System.out.println (
           "\n"
         + "Successful completion of Case 13.");
      }

//------------------------------------------------------------------------------
// errorTestCase14 ().
//
// Performs error test case 14.
//------------------------------------------------------------------------------

   private void errorTestCase14 ()
      {
      Problem theProblem;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 14:\n"
         + "Call to Problem.readData on a Problem that has a Part.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem = newEnabledProblem ();

      Part.newInstance (theProblem, "A", MATERIAL);

      try
         {
         theProblem.readData ("test.data");

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.shutDown ();

      System.out.println (
           "\n"
         + "Successful completion of Case 14.");
      }

//------------------------------------------------------------------------------
// errorTestCase15 ().
//
// Performs error test case 15.
//------------------------------------------------------------------------------

   private void errorTestCase15 ()
      {
      Problem theProblem;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 15:\n"
         + "Call to theProblem.getDefaultValue "
         + "with an Attribute that has no default value.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem = newEnabledProblem ();

      try
         {
         theProblem.getDefaultValue (accelerated ());

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.shutDown ();

      System.out.println (
           "\n"
         + "Successful completion of Case 15.");
      }

//------------------------------------------------------------------------------
// errorTestCase16 ().
//
// Performs error test case 16.
//------------------------------------------------------------------------------

   private void errorTestCase16 ()
      {
      Problem  theProblem;
      double[] theDblArr;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 16:\n"
         + "Call to theProblem.getDefaultValue "
         + "with an array whose length is not nPeriods.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem = newEnabledProblem ();

      theDblArr = new double[14];

      try
         {
         theProblem.getDefaultValue (supplyVol (), theDblArr);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.shutDown ();

      System.out.println (
           "\n"
         + "Successful completion of Case 16.");
      }

//------------------------------------------------------------------------------
// errorTestCase17 ().
//
// Performs error test case 17.
//------------------------------------------------------------------------------

   private void errorTestCase17 ()
      {
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 17:\n"
         + "Call to Attribute.asAttribute (Boolean.class) with an Attribute\n"
         + "whose value type is not Boolean.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      try
         {
         getAllAttributes ()[5].asAttribute (Boolean.class);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Case 17.");
      }

//------------------------------------------------------------------------------
// errorTestCase18 ().
//
// Performs error test case 18.
//------------------------------------------------------------------------------

   private void errorTestCase18 ()
      {
      Problem theProblem;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 18:\n"
         + "Call to Problem.getGlobalElement () "
         + "with a Problem that has not been enabled.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem = Problem.newInstance ();

      theProblem.getMessageMgr ().setQuiet        (true);
      theProblem.getMessageMgr ().setMesgFileName ("ErrTester.out");

      try
         {
         theProblem.getGlobalElement ();

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.shutDown ();

      System.out.println (
           "\n"
         + "Successful completion of Case 18.");
      }

//------------------------------------------------------------------------------
// errorTestCase19 ().
//
// Performs error test case 19.
//------------------------------------------------------------------------------

   private void errorTestCase19 ()
      {
      Problem theProblem;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 19:\n"
         + "Call to Operation.newInstance "
         + "with a Problem that has not been enabled.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem = Problem.newInstance ();

      theProblem.getMessageMgr ().setQuiet        (true);
      theProblem.getMessageMgr ().setMesgFileName ("ErrTester.out");

      try
         {
         Operation.newInstance (theProblem, "A");

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.shutDown ();

      System.out.println (
           "\n"
         + "Successful completion of Case 19.");
      }

//------------------------------------------------------------------------------
// errorTestCase20 ().
//
// Performs error test case 20.
//------------------------------------------------------------------------------

   private void errorTestCase20 ()
      {
      Problem   theProblem;
      Part      thePartA;
      Operation theOpnB;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 20:\n"
         + "Call to Operation.getBopEntry "
         + "with a BOP index that's out of range.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem = newEnabledProblem ();

      thePartA   = Part     .newInstance (theProblem, "A", MATERIAL);
      theOpnB    = Operation.newInstance (theProblem, "B");

      BopEntry              .newInstance (theOpnB,     thePartA);

      try
         {
         theOpnB.getBopEntry (-1);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.shutDown ();

      System.out.println (
           "\n"
         + "Successful completion of Case 20.");
      }

//------------------------------------------------------------------------------
// errorTestCase21 ().
//
// Performs error test case 21.
//------------------------------------------------------------------------------

   private void errorTestCase21 ()
      {
      Problem   theProblem;
      Part      thePartA;
      Operation theOpnB;
      BomEntry  theBomEntBA;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 21:\n"
         + "Call to BomEntry.getSubstitute "
         + "with a Substitute index that's out of range.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem = newEnabledProblem ();

      thePartA    = Part     .newInstance (theProblem,  "A", MATERIAL);
      theOpnB     = Operation.newInstance (theProblem,  "B");
      theBomEntBA = BomEntry .newInstance (theOpnB,     thePartA);

      Substitute             .newInstance (theBomEntBA, thePartA);

      try
         {
         theBomEntBA.getSubstitute (1);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.shutDown ();

      System.out.println (
           "\n"
         + "Successful completion of Case 21.");
      }

//------------------------------------------------------------------------------
// errorTestCase22 ().
//
// Performs error test case 22.
//------------------------------------------------------------------------------

   private void errorTestCase22 ()
      {
      Problem theProblem;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 22:\n"
         + "Passing an inactive RetainedObject to a method\n"
         + "that requires an active RetainedObject.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem = newEnabledProblem ();

      theProblem.shutDown ();

      try
         {
         Part.newInstance (theProblem, "A", MATERIAL);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Case 22.");
      }

//------------------------------------------------------------------------------
// errorTestCase23 ().
//
// Performs error test case 23.
//------------------------------------------------------------------------------

  @@SuppressWarnings ("unchecked")

   private void errorTestCase23 ()
      {
      Problem             theProblem;
      Attribute <Boolean> nPeriodsBool;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 23:\n"
         + "Call to Element.getValue with an Attribute\n"
         + "that has been cast to a different value type.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem   = newEnabledProblem ();

      nPeriodsBool = (Attribute <Boolean>) (Object) nPeriods ();

      try
         {
         theProblem.getGlobalElement ().getValue (nPeriodsBool);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Case 23.");
      }

//------------------------------------------------------------------------------
// errorTestCase24 ().
//
// Performs error test case 24.
//------------------------------------------------------------------------------

   private void errorTestCase24 ()
      {
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 24:\n"
         + "Call to UnexpectedThrowableException.selfTest.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      assert (! TerminalException.witjHasTerminated ());

      try
         {
         UnexpectedThrowableException.selfTest ();

         throw new AssertionError ();
         }

      catch (UnexpectedThrowableException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println ("");

      assert (TerminalException.witjHasTerminated ());

      try
         {
         Problem.newInstance ();

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Case 24.");
      }

//------------------------------------------------------------------------------
// errorTestCase25 ().
//
// Performs error test case 25.
//------------------------------------------------------------------------------

   private void errorTestCase25 ()
      {
      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 25:\n"
         + "Call to AssertionErrorException.selfTest.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      try
         {
         AssertionErrorException.selfTest ();

         throw new AssertionError ();
         }

      catch (AssertionErrorException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Case 25.");
      }

//------------------------------------------------------------------------------
// errorTestCase26 ().
//
// Performs error test case 26.
//------------------------------------------------------------------------------

   private void errorTestCase26 ()
      {
      Problem theProblem;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 26:\n"
         + "Call to Problem.throwUnexpCppException.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem = newEnabledProblem ();

      try
         {
         theProblem.throwUnexpCppException ();

         throw new AssertionError ();
         }

      catch (UnexpectedCppExcException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Case 26.");
      }

//------------------------------------------------------------------------------
// errorTestCase27 ().
//
// Performs error test case 27.
//------------------------------------------------------------------------------

   private void errorTestCase27 ()
      {
      Problem theProblem;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 27:\n"
         + "Call to Problem.throwUnexpCppExceptionBool.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem = newEnabledProblem ();

      try
         {
         theProblem.throwUnexpCppExceptionBool ();

         throw new AssertionError ();
         }

      catch (UnexpectedCppExcException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Case 27.");
      }

//------------------------------------------------------------------------------
// errorTestCase28 ().
//
// Performs error test case 28.
//------------------------------------------------------------------------------

   private void errorTestCase28 ()
      {
      Problem theProblem;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 28:\n"
         + "Call to Problem.incurCppAssertFailure.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem = newEnabledProblem ();

      try
         {
         theProblem.incurCppAssertFailure ();

         throw new AssertionError ();
         }

      catch (CppAssertFailureException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Case 28.");
      }

//------------------------------------------------------------------------------
// errorTestCase29 ().
//
// Performs error test case 29.
//------------------------------------------------------------------------------

   private void errorTestCase29 ()
      {
      Problem theProblem;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 29:\n"
         + "Call to Problem.performActionInJava with an invalid command.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem = newEnabledProblem ();

      try
         {
         theProblem.performActionInJava ("Bogus Command");

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
d330 1
a330 1
         + "Successful completion of Case 29.");
@


1.72
log
@Changed a Java class name: WitjAbortsException ==> TerminalException
@
text
@d180 4
d189 1
a189 1
               + "   to the WIT-J tester must be an integer from 1 to 28.\n");
d1435 38
@


1.71
log
@C++ assertion exceptions.
@
text
@d1247 1
a1247 1
      assert (! WitjAbortsException.witjHasAborted ());
d1263 1
a1263 1
      assert (WitjAbortsException.witjHasAborted ());
@


1.70
log
@Changed class name: NonFunctionalException ==> WitjAbortsException
@
text
@d1420 1
a1420 1
      catch (UnexpectedCppExcException theExc)
@


1.69
log
@Added test of C++ assertion failure.
@
text
@d1247 1
a1247 1
      assert (NonFunctionalException.witjIsFunctional ());
d1263 1
a1263 1
      assert (! NonFunctionalException.witjIsFunctional ());
@


1.68
log
@Implemented Java class UnexpectedCppExcException.
@
text
@d176 4
d185 1
a185 1
               + "   to the WIT-J tester must be an integer from 1 to 27.\n");
d1393 38
@


1.67
log
@Implemented the C++ canonical try block macros.
@
text
@d1333 15
a1347 1
      theProblem.throwUnexpCppException ();
d1371 15
a1385 1
      theProblem.throwUnexpCppExceptionBool ();
@


1.66
log
@Implementated class AssertionErrorException.
@
text
@d168 8
d181 1
a181 1
               + "   to the WIT-J tester must be an integer from 1 to 25.\n");
a1233 2
      Problem theProblem;

a1242 2
      theProblem = newEnabledProblem ();

d1263 1
a1263 1
         theProblem.newInstance ();
a1285 2
      Problem theProblem;

a1294 4
      theProblem = newEnabledProblem ();

      assert (NonFunctionalException.witjIsFunctional ());

d1307 23
a1329 1
      System.out.println ("");
d1331 1
a1331 1
      assert (! NonFunctionalException.witjIsFunctional ());
d1333 2
a1334 3
      try
         {
         theProblem.newInstance ();
d1336 5
a1340 2
         throw new AssertionError ();
         }
d1342 3
a1344 4
      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }
d1348 10
a1357 1
         + "Successful completion of Case 25.");
@


1.65
log
@Moved more responsibility into class NonFunctionalException.
@
text
@d164 4
d173 1
a173 1
               + "   to the WIT-J tester must be an integer from 1 to 24.\n");
d1233 1
a1233 2
         + "Call to Problem.throwUnexpectedThrowable method, that causes\n"
         + "an instance of an unexpected Throwable class to be thrown.\n"
d1243 1
a1243 1
         theProblem.throwUnexpectedThrowable ();
d1275 56
@


1.64
log
@Added code to test WIT-J's response to catching an instance of an
unexpected Throwable class.
@
text
@d1236 1
a1236 1
      assert (Problem.witjIsFunctional ());
d1252 1
a1252 1
      assert (! Problem.witjIsFunctional ());
@


1.63
log
@Changed name of class IntactException to StatusQuoException.
@
text
@d160 4
d169 1
a169 1
               + "   to the WIT-J tester must be an integer from 1 to 23.\n");
d1215 57
@


1.62
log
@Changed class names:
   HarmlessException ==> IntactException
   UnknownException  ==> UnexpectedException
@
text
@d235 1
a235 1
      catch (IntactException theExc)
d274 1
a274 1
      catch (IntactException theExc)
d318 1
a318 1
      catch (IntactException theExc)
d361 1
a361 1
      catch (IntactException theExc)
d397 1
a397 1
      catch (IntactException theExc)
d438 1
a438 1
      catch (IntactException theExc)
d482 1
a482 1
      catch (IntactException theExc)
d530 1
a530 1
      catch (IntactException theExc)
d577 1
a577 1
      catch (IntactException theExc)
d621 1
a621 1
      catch (IntactException theExc)
d661 1
a661 1
      catch (IntactException theExc)
d715 1
a715 1
      catch (IntactException theExc)
d765 1
a765 1
      catch (IntactException theExc)
d807 1
a807 1
      catch (IntactException theExc)
d848 1
a848 1
      catch (IntactException theExc)
d892 1
a892 1
      catch (IntactException theExc)
d929 1
a929 1
      catch (IntactException theExc)
d971 1
a971 1
      catch (IntactException theExc)
d1015 1
a1015 1
      catch (IntactException theExc)
d1063 1
a1063 1
      catch (IntactException theExc)
d1113 1
a1113 1
      catch (IntactException theExc)
d1156 1
a1156 1
      catch (IntactException theExc)
d1200 1
a1200 1
      catch (IntactException theExc)
@


1.61
log
@Replaced "assert (false)" with "throw new AssertionError ()"
@
text
@d235 1
a235 1
      catch (HarmlessException theExc)
d274 1
a274 1
      catch (HarmlessException theExc)
d318 1
a318 1
      catch (HarmlessException theExc)
d361 1
a361 1
      catch (HarmlessException theExc)
d397 1
a397 1
      catch (HarmlessException theExc)
d438 1
a438 1
      catch (HarmlessException theExc)
d482 1
a482 1
      catch (HarmlessException theExc)
d530 1
a530 1
      catch (HarmlessException theExc)
d577 1
a577 1
      catch (HarmlessException theExc)
d621 1
a621 1
      catch (HarmlessException theExc)
d661 1
a661 1
      catch (HarmlessException theExc)
d715 1
a715 1
      catch (HarmlessException theExc)
d765 1
a765 1
      catch (HarmlessException theExc)
d807 1
a807 1
      catch (HarmlessException theExc)
d848 1
a848 1
      catch (HarmlessException theExc)
d892 1
a892 1
      catch (HarmlessException theExc)
d929 1
a929 1
      catch (HarmlessException theExc)
d971 1
a971 1
      catch (HarmlessException theExc)
d1015 1
a1015 1
      catch (HarmlessException theExc)
d1063 1
a1063 1
      catch (HarmlessException theExc)
d1113 1
a1113 1
      catch (HarmlessException theExc)
d1156 1
a1156 1
      catch (HarmlessException theExc)
d1200 1
a1200 1
      catch (HarmlessException theExc)
@


1.60
log
@Replaced standard Exceptions with HarmlessExceptions in throw statements.
@
text
@d232 1
a232 1
         assert (false);
d271 1
a271 1
         assert (false);
d315 1
a315 1
         assert (false);
d358 1
a358 1
         assert (false);
d394 1
a394 1
         assert (false);
d435 1
a435 1
         assert (false);
d479 1
a479 1
         assert (false);
d527 1
a527 1
         assert (false);
d574 1
a574 1
         assert (false);
d618 1
a618 1
         assert (false);
d658 1
a658 1
         assert (false);
d712 1
a712 1
         assert (false);
d762 1
a762 1
         assert (false);
d804 1
a804 1
         assert (false);
d845 1
a845 1
         assert (false);
d889 1
a889 1
         assert (false);
d926 1
a926 1
         assert (false);
d968 1
a968 1
         assert (false);
d1012 1
a1012 1
         assert (false);
d1060 1
a1060 1
         assert (false);
d1110 1
a1110 1
         assert (false);
d1153 1
a1153 1
         assert (false);
d1197 1
a1197 1
         assert (false);
@


1.59
log
@Attributes
@
text
@d235 1
a235 1
      catch (IllegalStateException theExc)
d274 1
a274 1
      catch (NullPointerException theExc)
d318 1
a318 1
      catch (IllegalArgumentException theExc)
d361 1
a361 1
      catch (IllegalStateException theExc)
d397 1
a397 1
      catch (IllegalArgumentException theExc)
d438 1
a438 1
      catch (UnsupportedOperationException theExc)
d482 1
a482 1
      catch (IllegalArgumentException theExc)
d530 1
a530 1
      catch (IllegalArgumentException theExc)
d577 1
a577 1
      catch (NullPointerException theExc)
d621 1
a621 1
      catch (NullPointerException theExc)
d661 1
a661 1
      catch (IllegalStateException theExc)
d715 1
a715 1
      catch (IllegalArgumentException theExc)
d765 1
a765 1
      catch (IndexOutOfBoundsException theExc)
d807 1
a807 1
      catch (IllegalStateException theExc)
d848 1
a848 1
      catch (UnsupportedOperationException theExc)
d892 1
a892 1
      catch (IllegalArgumentException theExc)
d929 1
a929 1
      catch (IllegalArgumentException theExc)
d971 1
a971 1
      catch (IllegalStateException theExc)
d1015 1
a1015 1
      catch (IllegalArgumentException theExc)
d1063 1
a1063 1
      catch (IndexOutOfBoundsException theExc)
d1113 1
a1113 1
      catch (IndexOutOfBoundsException theExc)
d1156 1
a1156 1
      catch (IllegalArgumentException theExc)
d1193 15
a1207 1
      theProblem.getGlobalElement ().getValue (nPeriodsBool);
@


1.58
log
@Added an error test for casting Attribute to a different value type.
@
text
@d234 1
d273 1
d317 1
d360 1
d396 1
d437 1
d481 1
d529 1
d576 1
d620 1
d660 1
d714 1
d764 1
d806 1
d847 1
d891 1
d917 1
a917 1
         + "Call to Attribute.asBoolAtt with an Attribute "
d924 1
a924 1
         getAllAttributes ()[5].asBoolAtt ();
d928 2
a929 1
      catch (UnsupportedOperationException theExc)
d970 1
d1014 1
d1062 1
d1112 1
d1155 1
d1172 2
a1173 1
      @@SuppressWarnings ("unchecked")
@


1.57
log
@Exceptions
@
text
@d156 4
d165 1
a165 1
               + "   to the WIT-J tester must be an integer from 1 to 22.\n");
a205 35
// errorTestCase0 ().
//
// Performs error test case 0.
//
// This method is normally commented out in order to avoid the compiler warning
// about the unsafe cast that it does.
//------------------------------------------------------------------------------

/*

   private void errorTestCase0 ()
      {
      Problem             theProblem;
      Attribute <Boolean> nPeriodsBool;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case 0:\n"
         + "Call to Element.getValue with an Attribute\n"
         + "that has been cast to a different value type.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theProblem   = newEnabledProblem ();

      nPeriodsBool = (Attribute <Boolean>) (Object) nPeriods ();

      theProblem.getGlobalElement ().getValue (nPeriodsBool);
      }

*/

//------------------------------------------------------------------------------
d1145 29
@


1.56
log
@Exceptions
@
text
@d463 1
a463 1
      catch (IllegalStateException theExc)
d864 1
a864 1
      catch (IllegalStateException theExc)
d943 1
a943 1
      catch (IllegalStateException theExc)
@


1.55
log
@Exceptions
@
text
@d152 4
d161 1
a161 1
               + "   to the WIT-J tester must be an integer from 1 to 21.\n");
d290 2
a291 2
         + "Call to theAttribute.appliesTo (theClass) "
         + "with a null reference for theClass.\n"
d297 14
a310 1
      nPeriods ().appliesTo (theClass);
d582 2
a583 1
         + "Call to Element.getValue with a null reference for the Attribute.\n"
d593 16
a608 1
      thePartA.getValue (theAtt);
d627 2
a628 2
         + "Call to Element.setValue with a null reference "
         + "for the value argument.\n"
d636 16
a651 1
      thePartA.setValue (supplyVol (), null);
d1011 1
a1011 1
         + "Call to Operation.newInstance (theProblem)\n"
d1021 16
a1036 1
      Operation.newInstance (theProblem, "A");
d1136 40
@


1.54
log
@Minor updates.
@
text
@d144 8
d157 1
a157 1
               + "   to the WIT-J tester must be an integer from 1 to 19.\n");
d174 2
a175 2
            "   The WIT-J Tester requires at least 2 command line arguments\n"
          + "   in the \"e\" case.");
d218 2
a219 2
         + "   Call to Element.getValue with an Attribute\n"
         + "   that has been cast to a different value type.\n"
d247 1
a247 1
         + "   Call to an active method on an inactive RetainedObject.\n"
d251 3
a253 1
      theProblem = Problem.newInstance ();
d255 3
a257 1
      theProblem.enable ();
d259 6
a264 1
      theProblem.shutDown ();
d266 3
a268 1
      theProblem.displayData ("error.txt");
d286 2
a287 2
         + "   Call to theAttribute.appliesTo (theClass) "
         +    "with a null reference for theClass.\n"
d313 1
a313 2
         + "   Call to Element.setValue with an array whose "
         +    "length != nPeriods.\n"
d356 2
a357 2
         + "   Call to setValue (nPeriods (), ...) in a Problem "
         +    "that has an Operation.\n"
d365 16
a380 1
      theProblem.getGlobalElement ().setValue (nPeriods (), 7);
d396 1
a396 1
         + "   Call to theAttribute.appliesTo (Element.Class).\n"
d432 1
a432 1
         + "   Call to Element.setValue with a non-modifiable Attribute.\n"
d446 1
a446 1
      catch (IllegalArgumentException theExc)
d474 2
a475 2
         + "   Call to Element.setValue for an Element class\n"
         + "   to which the Attribute does not apply.\n"
d519 1
a519 2
         + "   Call to Element.getValue with an array "
         +    "whose length != nPeriods.\n"
d565 1
a565 2
         + "   Call to Element.getValue with a null "
         +    "reference for the Attribute.\n"
d594 2
a595 2
         + "   Call to Element.setValue with a null reference "
         +    "for the value argument.\n"
d621 1
a621 2
         + "   Call to Problem.enable () "
         +    "with a Problem that is already enabled.\n"
d627 16
a642 1
      theProblem.enable ();
d716 2
a717 2
         + "Call to theOpn.getBomEntry (theBomIndex) "
         + "where theBomIndex is too high.\n"
d726 15
a740 2
      BomEntry.newInstance (theOpnB, thePartA);
      BomEntry.newInstance (theOpnB, thePartA);
d742 3
a744 1
      theOpnB.getBomEntry (2);
d770 16
a785 1
      theProblem.readData ("test.data");
d803 1
a803 1
         + "Call to theProblem.getDefaultValue\n"
d810 16
a825 1
      theProblem.getDefaultValue (accelerated ());
d844 1
a844 1
         + "Call to theProblem.getDefaultValue\n"
d853 16
a868 1
      theProblem.getDefaultValue (supplyVol (), theDblArr);
d884 1
a884 1
         + "Call to theAtt.asBoolAtt () with an Attribute "
d895 1
a895 1
      catch (IllegalArgumentException theExc)
d920 2
a921 2
         + "   Call to Problem.getGlobalElement () "
         +    "with a Problem that has not been enabled.\n"
d930 16
a945 1
      theProblem.getGlobalElement ();
d963 2
a964 2
         + "   Call to Operation.newInstance (theProblem)\n"
         + "   with a Problem that has not been enabled.\n"
d977 96
@


1.53
log
@Changed name of method Attribute.allowsSetValue to isModifiable.
@
text
@d210 1
a210 1
         + "   Call to Element.getValue (theAtt) with an Attribute\n"
d239 1
a239 1
         + "   Calling an active method on an inactive RetainedObject.\n"
d294 2
a295 2
         + "   Element.setValue (...) "
         +    "with an array whose length != nPeriods.\n"
d338 1
a338 1
         + "   setValue (nPeriods (), ...) in a Problem "
d399 1
a399 1
         + "   Element.setValue (...) on a non-modifiable Attribute.\n"
d441 2
a442 2
         + "   Element.setValue (...) for an Element class\n"
         + "   to which the attribute does not apply.\n"
d486 2
a487 2
         + "   Element.getValue (...) "
         +    "with an array whose length != nPeriods.\n"
d533 1
a533 1
         + "   Element.getValue (...) with a null "
d563 1
a563 1
         + "   Element.setValue (...) with a null reference "
d702 1
a702 2
         + "Call to theProblem.readData (...), when "
         + "theProblem has a Part.\n"
d728 1
a728 1
         + "Call to theProblem.getDefaultValue (...)\n"
d754 1
a754 1
         + "Call to theProblem.getDefaultValue (...)\n"
@


1.52
log
@Exceptions
@
text
@d399 1
a399 2
         + "   Element.setValue (...) on an attribute "
         +    "that does not allow setValue.\n"
@


1.51
log
@Changed the default value of quite mode from false to true.
Changed MessageMgr method names:
   setQuietMode ==> setQuiet
   getQuietMode ==> isQuiet
@
text
@d190 35
d227 1
a227 1
// Performs error test case #1.
d238 1
a238 1
         + "WIT-J Error Test Case #1:\n"
d255 1
a255 1
// Performs error test case #2.
d266 1
a266 1
         + "WIT-J Error Test Case #2:\n"
d280 1
a280 1
// Performs error test case #3.
d293 1
a293 1
         + "WIT-J Error Test Case #3:\n"
d299 1
a299 1
      theProblem   = newProblem ();
d304 11
d316 5
a320 1
      thePartA.setValue (supplyVol (), supplyVolVal);
d326 1
a326 1
// Performs error test case #4.
d337 1
a337 1
         + "WIT-J Error Test Case #4:\n"
d343 1
a343 1
      theProblem = newProblem ();
d345 1
a345 1
      Operation.newInstance (theProblem, "Test Opn #4");
d353 1
a353 1
// Performs error test case #5.
d362 1
a362 1
         + "WIT-J Error Test Case #5:\n"
d367 14
a380 1
      nPeriods ().appliesTo (Element.class);
d386 1
a386 1
// Performs error test case #6.
d398 1
a398 1
         + "WIT-J Error Test Case #6:\n"
d404 1
a404 1
      theProblem = newProblem ();
d408 16
a423 1
      thePartA.setValue (scrapVol (), new double[26]);
d429 1
a429 1
// Performs error test case #7.
d441 1
a441 1
         + "WIT-J Error Test Case #7:\n"
d447 1
a447 1
      theProblem = newProblem ();
d451 16
a466 1
      thePartA.setValue (demandVol (), new double[26]);
d472 1
a472 1
// Performs error test case #8.
d486 1
a486 1
         + "WIT-J Error Test Case #8:\n"
d492 1
a492 1
      theProblem   = newProblem ();
d499 16
a514 1
      theDemandB.getValue (demandVol (), demandVolVal);
d520 1
a520 1
// Performs error test case #9.
d533 1
a533 1
         + "WIT-J Error Test Case #9:\n"
d539 1
a539 1
      theProblem = newProblem ();
d551 1
a551 1
// Performs error test case #10.
d563 1
a563 1
         + "WIT-J Error Test Case #10:\n"
d569 1
a569 1
      theProblem = newProblem ();
d579 1
a579 1
// Performs error test case #11.
d590 1
a590 1
         + "WIT-J Error Test Case #11:\n"
d596 1
a596 1
      theProblem = newProblem ();
d604 1
a604 1
// Performs error test case #12.
d619 1
a619 1
         + "WIT-J Error Test Case #12:\n"
d625 1
a625 1
      theProblemA    = newProblem                    ();
d635 14
d650 3
a652 1
      BomEntry                    .newInstance       (theOpnA, thePartB);
d658 1
a658 1
// Performs error test case #13.
d671 1
a671 1
         + "WIT-J Error Test Case #13:\n"
d677 1
a677 1
      theProblem = newProblem ();
d691 1
a691 1
// Performs error test case #14.
d702 1
a702 1
         + "WIT-J Error Test Case #14:\n"
d708 1
a708 1
      theProblem = newProblem ();
d718 1
a718 1
// Performs error test case #15.
d729 1
a729 1
         + "WIT-J Error Test Case #15:\n"
d735 1
a735 1
      theProblem = newProblem ();
d743 1
a743 1
// Performs error test case #16.
d755 1
a755 1
         + "WIT-J Error Test Case #16:\n"
d761 1
a761 1
      theProblem = newProblem ();
d771 1
a771 1
// Performs error test case #17.
d780 1
a780 1
         + "WIT-J Error Test Case #17:\n"
d786 14
a799 1
      getAllAttributes ()[5].asBoolAtt ();
d805 1
a805 1
// Performs error test case #18.
d816 1
a816 1
         + "WIT-J Error Test Case #18:\n"
d833 1
a833 1
// Performs error test case #19.
d844 1
a844 1
         + "WIT-J Error Test Case #19:\n"
d859 1
a859 1
// newProblem ()
d861 1
a861 1
// Creates and returns a new Problem set up for error testing.
d864 1
a864 1
   private Problem newProblem ()
@


1.50
log
@Removed class Session from the public interface.
@
text
@d522 1
a522 1
      theMessageMgrB              .setQuietMode      (true);
d687 1
a687 1
      theProblem.getMessageMgr ().setQuietMode    (true);
d715 1
a715 1
      theProblem.getMessageMgr ().setQuietMode    (true);
d733 1
a733 1
      theProblem.getMessageMgr ().setQuietMode    (true);
@


1.49
log
@Method name changes:
   theElement.set (...) ==> theElement.setValue (...)
   theElement.get (...) ==> theElement.getValue (...)
@
text
@d136 8
d149 1
a149 1
               + "   to the WIT-J tester must be an integer from 1 to 17.\n");
a196 1
      Session theSession;
d204 1
a204 1
         + "   Calling an active method on an inactive PublicObject.\n"
d208 3
a210 2
      theSession = newSession ();
      theProblem = Problem.newInstance (theSession);
d212 1
a212 1
      theSession.shutDown ();
a249 1
      Session  theSession;
d264 3
a266 3
      theSession   = newSession ();
      theProblem   = Problem.newInstance (theSession);
      thePartA     = Part   .newInstance (theProblem, "A", MATERIAL);
a280 1
      Session theSession;
d293 1
a293 2
      theSession = newSession          ();
      theProblem = Problem.newInstance (theSession);
a327 1
      Session theSession;
d336 2
a337 1
         + "   Element.setValue (...) on an output attribute.\n"
d341 3
a343 3
      theSession = newSession ();
      theProblem = Problem.newInstance (theSession);
      thePartA   = Part   .newInstance (theProblem, "A", MATERIAL);
a355 1
      Session theSession;
d364 1
a364 1
         + "   Element.setValue (...) for a Element class\n"
d369 3
a371 3
      theSession = newSession ();
      theProblem = Problem.newInstance (theSession);
      thePartA   = Part   .newInstance (theProblem, "A", MATERIAL);
a383 1
      Session  theSession;
d399 4
a402 4
      theSession   = newSession          ();
      theProblem   = Problem.newInstance (theSession);
      thePartA     = Part   .newInstance (theProblem, "A", MATERIAL);
      theDemandB   = Demand .newInstance (thePartA,   "B");
a416 1
      Session              theSession;
d431 3
a433 3
      theSession = newSession ();
      theProblem = Problem.newInstance (theSession);
      thePartA   = Part   .newInstance (theProblem, "A", MATERIAL);
a447 1
      Session theSession;
d461 3
a463 3
      theSession = newSession ();
      theProblem = Problem.newInstance (theSession);
      thePartA   = Part   .newInstance (theProblem, "A", MATERIAL);
d476 1
a476 1
      Session theSession;
d483 2
a484 2
         + "   Call to Problem.newInstance (Session)\n"
         + "   with a Session that already has a Problem.\n"
d488 1
a488 1
      theSession = newSession ();
d490 1
a490 2
      Problem.newInstance (theSession);
      Problem.newInstance (theSession);
a500 1
      Session    theSessionA;
a502 1
      Session    theSessionB;
d517 1
a517 2
      theSessionA    = newSession                    ();
      theProblemA    = Problem    .newInstance       (theSessionA);
d520 2
a521 2
      theSessionB    = Session    .newInstance       ();
      theMessageMgrB = theSessionB.getMessageMgr     ();
d524 1
a524 1
      theProblemB    = Problem    .newInstance       (theSessionB);
a538 1
      Session   theSession;
d553 2
a554 2
      theSession = newSession            ();
      theProblem = Problem  .newInstance (theSession);
a571 1
      Session theSession;
d584 1
a584 2
      theSession = newSession ();
      theProblem = Problem.newInstance (theSession);
a598 1
      Session theSession;
d611 1
a611 2
      theSession = newSession ();
      theProblem = Problem.newInstance (theSession);
a623 1
      Session  theSession;
d637 1
a637 2
      theSession = newSession ();
      theProblem = Problem.newInstance (theSession);
d666 57
a722 1
// newSession ()
d724 1
a724 1
// Creates and returns a new Session set up for error testing.
d727 1
a727 1
   private Session newSession ()
d729 3
a731 1
      Session theSession;
d733 2
a734 1
      theSession = Session.newInstance ();
d736 1
a736 2
      theSession.getMessageMgr ().setQuietMode    (true);
      theSession.getMessageMgr ().setMesgFileName ("ErrTester.out");
d738 1
a738 1
      return theSession;
@


1.48
log
@Changed method name:
   Attribute.values () ==> Attribute.getAllAttributes ()
@
text
@d252 1
a252 1
         + "   Element.set (...) "
d263 1
a263 1
      thePartA.set (supplyVol (), supplyVolVal);
d282 2
a283 1
         + "   set (nPeriods (), ...) in a Problem that has an Operation.\n"
d292 1
a292 1
      theProblem.getGlobalElement ().set (nPeriods (), 7);
d332 1
a332 1
         + "   Element.set (...) on an output attribute.\n"
d340 1
a340 1
      thePartA.set (scrapVol (), new double[26]);
d360 1
a360 1
         + "   Element.set (...) for a Element class\n"
d369 1
a369 1
      thePartA.set (demandVol (), new double[26]);
d391 1
a391 1
         + "   Element.get (...) "
d403 1
a403 1
      theDemandB.get (demandVol (), demandVolVal);
d424 2
a425 1
         + "   Element.get (...) with a null reference for the Attribute.\n"
d435 1
a435 1
      thePartA.get (theAtt);
d455 1
a455 1
         + "   Element.set (...) with a null reference "
d464 1
a464 1
      thePartA.set (supplyVol (), null);
@


1.47
log
@Attributes.
@
text
@d670 1
a670 1
      Attribute.values ()[5].asBoolAtt ();
@


1.46
log
@Added type checking to Attribute type conversion methods.
@
text
@a135 8
/*

         case -1:
            printDefaults ();
            break;

*/

a690 302
/*

//------------------------------------------------------------------------------
// printDefaults ().
//
// Prints source code for Attribute default values.
// (Not an actual error test.)
//------------------------------------------------------------------------------

   private void printDefaults ()
      {
      Session   theSession;
      Element[] theElements;
      Element   theElemForAtt;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "Default Values:\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      theSession  = newSessionForDefaults ();

      theElements = theSession.getProblem ().getElements ();

      for (Attribute <?> theAtt: Attribute.values ())
         {
         theElemForAtt = null;

         for (Element theElem: theElements)
            if (theAtt.appliesTo (theElem.getClass ()))
               theElemForAtt = theElem;

         assert (theElemForAtt != null);

         printDef (theAtt, theElemForAtt);
         }

      theSession.shutDown ();
      }

//------------------------------------------------------------------------------
// newSessionForDefaults ()
//
// Creates and returns a Session for the printing of Attribute default values.
//------------------------------------------------------------------------------

   private Session newSessionForDefaults ()
      {
      Session   theSession;
      Problem   theProblem;
      Part      thePart;
      Operation theOpn;
      BomEntry  theBomEnt;

      theSession = Session.newInstance ();

      theSession.getMessageMgr ().setQuietMode      (true);

      theSession.getMessageMgr ().setMesgTimesPrint (INFORMATIONAL, 0);

      theProblem = Problem  .newInstance (theSession);
      thePart    = Part     .newInstance (theProblem, "A", MATERIAL);
      theOpn     = Operation.newInstance (theProblem, "B");
      theBomEnt  = BomEntry .newInstance (theOpn,      thePart);

      Demand    .newInstance (thePart,   "C");
      Substitute.newInstance (theBomEnt, thePart);
      BopEntry  .newInstance (theOpn,    thePart);

      return theSession;
      }

//------------------------------------------------------------------------------
// printDef (theAtt, theElem)
//
// Prints the default value for theAtt, where theElem is an Element to which
// theAtt applies.
//------------------------------------------------------------------------------

   private void printDef (Attribute <?> theAtt, Element theElem)
      {
      Class <?>             theValueType;
      boolean               printed;
      Attribute <Boolean>   theBoolAtt;
      Attribute <Integer>   theIntAtt;
      Attribute <Double>    theDblAtt;
      Attribute <String>    theStrAtt;
      Attribute <boolean[]> theBoolVecAtt;
      Attribute <int[]>     theIntVecAtt;
      Attribute <double[]>  theDblVecAtt;

      theValueType = theAtt.getValueType ();

      printed      = printNoDef (theAtt, theElem.getProblem ());

      if (printed)
         return;

      printed = printLastPerDef (theAtt);

      if (printed)
         return;

      if (theValueType == BoundSet.class)
         {
         System.out.printf (
            "      setDefaultBounds  (%s);%n",
            theAtt);

         return;
         }

      System.out.printf (
         "      setDefaultValue   (%-19s, ",
         theAtt);

      printed = printSpecDef (theAtt);

      if (printed)
         return;

      if (theValueType == Boolean.class)
         {
         theBoolAtt = (Attribute <Boolean>) theAtt;

         System.out.printf ("%12s);%n", theElem.get (theBoolAtt));

         return;
         }

      if (theValueType == Integer.class)
         {
         theIntAtt = (Attribute <Integer>) theAtt;

         System.out.printf ("%12d);%n", theElem.get (theIntAtt));

         return;
         }

      if (theValueType == Double.class)
         {
         theDblAtt = (Attribute <Double>) theAtt;

         System.out.printf ("%10.0f.0);%n", theElem.get (theDblAtt));

         return;
         }

      if (theValueType == boolean[].class)
         {
         theBoolVecAtt = (Attribute <boolean[]>) theAtt;

         System.out.printf (
            "%12s);%n",
            theElem.get (theBoolVecAtt)[0]);

         return;
         }

      if (theValueType == int[].class)
         {
         theIntVecAtt = (Attribute <int[]>) theAtt;

         System.out.printf (
            "%12d);%n",
            theElem.get (theIntVecAtt)[0]);

         return;
         }

      if (theValueType == double[].class)
         {
         theDblVecAtt = (Attribute <double[]>) theAtt;

         System.out.printf (
            "%10.0f.0);%n",
            theElem.get (theDblVecAtt)[0]);

         return;
         }
      }

//------------------------------------------------------------------------------
// printNoDef (theAtt, theProblem)
//
// Prints the default value for theAtt, if it is the non-default case.
// Returns true, iff the print was done.
//------------------------------------------------------------------------------

   private boolean printNoDef (Attribute <?> theAtt, Problem theProblem)
      {
      boolean toPrint;

      toPrint =
            ((! theAtt.getIsInputAtt (theProblem)))
         ||    (theAtt == demandName    ())
         ||    (theAtt == operationName ())
         ||    (theAtt == partName      ());

      if (! toPrint)
         return false;

      System.out.printf (
         "      setDefaultNone    (%s);%n",
         theAtt);

      return true;
      }

//------------------------------------------------------------------------------
// printLastPerDef (theAtt)
//
// Prints the default value for theAtt, if it is the last period case.
// Returns true, iff the print was done.
//------------------------------------------------------------------------------

   private boolean printLastPerDef (Attribute <?> theAtt)
      {
      boolean toPrint;

      toPrint =
         (   (theAtt == latestPeriod ())
          || (theAtt == buildAheadUB ())
          || (theAtt == shipLateUB   ()));

      if (! toPrint)
         return false;

      System.out.printf (
         "      setDefaultLastPer (%s);%n",
         theAtt);

      return true;
      }

//------------------------------------------------------------------------------
// printSpecDef (theAtt, theElem)
//
// Prints the default value for theAtt, if theAtt needs to be printed in a
// manner specific to theAtt.
// Returns true, iff the print was done.
//------------------------------------------------------------------------------

   private boolean printSpecDef (Attribute <?> theAtt)
      {
      if (theAtt == currentScenario ())
         {
         System.out.printf ("           0);%n");

         return true;
         }

      if (theAtt == lotSizeTol ())
         {
         System.out.printf ("     0.00001);%n");

         return true;
         }

      if (theAtt == objectStage ())
         {
         System.out.printf ("           0);%n");

         return true;
         }

      if (theAtt == periodStage ())
         {
         System.out.printf ("           0);%n");

         return true;
         }

      if (theAtt == probability ())
         {
         System.out.printf ("         1.0);%n");

         return true;
         }

      if (theAtt == solverLogFileName ())
         {
         System.out.printf ("\"solver.log\");%n");

         return true;
         }

      if (theAtt == title ())
         {
         System.out.printf ("  \"Untitled\");%n");

         return true;
         }

      return false;
      }

*/

@


1.45
log
@Minor revision.
@
text
@d132 4
d149 1
a149 1
               + "   to the WIT-J tester must be an integer from 1 to 16.\n");
d661 21
@


1.44
log
@Default values.
@
text
@d420 1
a420 1
      Attribute <double[]> theAttribute;
d431 3
a433 3
      theSession   = newSession ();
      theProblem   = Problem.newInstance (theSession);
      thePartA     = Part   .newInstance (theProblem, "A", MATERIAL);
d435 1
a435 1
      theAttribute = null;
d437 1
a437 1
      thePartA.get (theAttribute);
@


1.43
log
@Default values.
@
text
@d128 4
d145 1
a145 1
               + "   to the WIT-J tester must be an integer from 1 to 15.\n");
d627 30
@


1.42
log
@Default values.
@
text
@d124 4
d141 1
a141 1
               + "   to the WIT-J tester must be an integer from 1 to 14.\n");
d596 27
@


1.41
log
@Implemented theAttribute.appliesTo (theClass).
@
text
@d124 8
d609 302
@


1.40
log
@Changed name of generic class AttSpec <V> to Attribute <V>.
@
text
@d205 2
d212 2
a213 2
         + "   Call to theAttribute.appliesTo (theElement)\n"
         + "   with a null reference for theElement.\n"
d217 3
a219 1
      nPeriods ().appliesTo (null);
a289 4
      Session       theSession;
      Problem       theProblem;
      GlobalElement theGlobalElement;

d295 1
a295 2
         + "   Call to theAttribute.appliesTo (theElement) "
         +    "with an inactive Element.\n"
d299 1
a299 8
      theSession       = newSession          ();
      theProblem       = Problem.newInstance (theSession);

      theGlobalElement = theProblem.getGlobalElement ();

      theSession.shutDown ();

      nPeriods ().appliesTo (theGlobalElement);
@


1.39
log
@Made ErrTester display WIT output after WIT-J output.
@
text
@d11 1
a11 1
import static com.ibm.witj.AttSpec.*;
d210 1
a210 1
         + "   Call to theAttSpec.appliesTo (theElement)\n"
d295 1
a295 1
         + "   Call to theAttSpec.appliesTo (theElement) "
d409 4
a412 4
      Session            theSession;
      Problem            theProblem;
      Part               thePartA;
      AttSpec <double[]> theAttSpec;
d419 1
a419 1
         + "   Element.get (...) with a null reference for the AttSpec.\n"
d423 3
a425 3
      theSession = newSession ();
      theProblem = Problem.newInstance (theSession);
      thePartA   = Part   .newInstance (theProblem, "A", MATERIAL);
d427 1
a427 1
      theAttSpec = null;
d429 1
a429 1
      thePartA.get (theAttSpec);
@


1.38
log
@Minor bug fix.
@
text
@d13 1
d189 1
a189 1
      theSession = Session.newInstance ();
d210 2
a211 2
         + "   Call to theAttSpec.appliesTo (theElement) "
         +    "with a null reference for theElement.\n"
d241 1
a241 1
      theSession   = Session.newInstance ();
d270 2
a271 2
      theSession = Session   .newInstance ();
      theProblem = Problem   .newInstance (theSession);
d300 2
a301 2
      theSession       = Session   .newInstance ();
      theProblem       = Problem   .newInstance (theSession);
d331 1
a331 1
      theSession = Session.newInstance ();
d360 1
a360 1
      theSession = Session.newInstance ();
d391 4
a394 4
      theSession   = Session .newInstance ();
      theProblem   = Problem .newInstance (theSession);
      thePartA     = Part    .newInstance (theProblem, "A", MATERIAL);
      theDemandB   = Demand  .newInstance (thePartA,   "B");
d423 1
a423 1
      theSession = Session.newInstance ();
d454 1
a454 1
      theSession = Session.newInstance ();
d481 1
a481 1
      theSession = Session.newInstance ();
d495 7
a501 6
      Session   theSessionA;
      Problem   theProblemA;
      Operation theOpnA;
      Session   theSessionB;
      Problem   theProblemB;
      Part      thePartB;
d513 11
a523 7
      theSessionA = Session  .newInstance ();
      theProblemA = Problem  .newInstance (theSessionA);
      theOpnA     = Operation.newInstance (theProblemA, "A");

      theSessionB = Session  .newInstance ();
      theProblemB = Problem  .newInstance (theSessionB);
      thePartB    = Part     .newInstance (theProblemB, "B", MATERIAL);
d525 1
a525 1
      BomEntry               .newInstance (theOpnA, thePartB);
d551 1
a551 1
      theSession = Session  .newInstance ();
d583 1
a583 1
      theSession = Session.newInstance ();
d592 18
@


1.37
log
@Revised factory methods.
@
text
@d127 1
a127 1
               + "   When error testing is requested, the second argument"
@


1.36
log
@Added the "l" option to the Tester.
@
text
@d188 2
a189 2
      theSession = Session   .newSession ();
      theProblem = theSession.newProblem ();
d225 1
d240 3
a242 2
      theProblem   = Problem   .newProblem ();
      thePartA     = theProblem.newPart    ("A", MATERIAL);
d257 1
d269 2
a270 1
      theProblem = Problem.newProblem ();
d272 1
a272 1
      theProblem.newOperation ("Test Opn #4");
d299 2
a300 3
      theSession       = Session   .newSession ();

      theProblem       = theSession.newProblem ();
d317 1
d330 3
a332 2
      theProblem = Problem   .newProblem ();
      thePartA   = theProblem.newPart    ("A", MATERIAL);
d345 1
d359 3
a361 2
      theProblem = Problem   .newProblem ();
      thePartA   = theProblem.newPart    ("A", MATERIAL);
d374 1
d390 4
a393 3
      theProblem   = Problem   .newProblem ();
      thePartA     = theProblem.newPart    ("A", MATERIAL);
      theDemandB   = thePartA  .newDemand  ("B");
d408 1
d422 3
a424 2
      theProblem = Problem   .newProblem ();
      thePartA   = theProblem.newPart    ("A", MATERIAL);
d439 1
d453 3
a455 2
      theProblem = Problem   .newProblem ();
      thePartA   = theProblem.newPart    ("A", MATERIAL);
d475 2
a476 2
         + "   Call to theSession.newProblem () "
         +    "with a Session that already has a Problem.\n"
d480 1
a480 1
      theSession = Session.newSession ();
d482 2
a483 2
      theSession.newProblem ();
      theSession.newProblem ();
d494 6
a499 6
      Problem   theProblem1;
      Operation theOpn1A;
      Part      thePart1B;
      Problem   theProblem2;
      Part      thePart2B;
      BomEntry  theBomEnt1A2B;
d511 7
a517 6
      theProblem1   = Problem    .newProblem   ();
      theOpn1A      = theProblem1.newOperation ("A");
      thePart1B     = theProblem1.newPart      ("B", MATERIAL);

      theProblem2   = Problem    .newProblem   ();
      thePart2B     = theProblem2.newPart      ("B", MATERIAL);
d519 1
a519 1
      theBomEnt1A2B = theOpn1A   .newBomEntry  (thePart2B);
d530 1
d545 4
a548 3
      theProblem = Problem   .newProblem   ();
      thePartA   = theProblem.newPart      ("A", MATERIAL);
      theOpnB    = theProblem.newOperation ("B");
d550 2
a551 2
      theOpnB.newBomEntry (thePartA);
      theOpnB.newBomEntry (thePartA);
d564 1
d577 4
a580 1
      theProblem = Problem.newProblem ();
a581 1
      theProblem.newPart  ("A", MATERIAL);
@


1.35
log
@Improved argument checking.
@
text
@d32 1
a32 1
   public static void performErrorTest (String arg1)
d38 9
a46 1
      theErrTester.performTest (arg1);
d54 3
a56 1
// Constructor.
d59 1
a59 1
   private ErrTester ()
d61 71
d135 1
a135 1
// performTest ().
d137 1
a137 1
// Performs an error test.
d140 1
a140 1
   private void performTest (String arg)
d142 6
a147 1
      int caseIdx = -1;
d151 1
a151 1
         caseIdx = Integer.parseInt (arg);
a162 1
         }
d164 1
a164 51
      if      (caseIdx == 1)
         errorTestCase1 ();

      else if (caseIdx == 2)
         errorTestCase2 ();

      else if (caseIdx == 3)
         errorTestCase3 ();

      else if (caseIdx == 4)
         errorTestCase4 ();

      else if (caseIdx == 5)
         errorTestCase5 ();

      else if (caseIdx == 6)
         errorTestCase6 ();

      else if (caseIdx == 7)
         errorTestCase7 ();

      else if (caseIdx == 8)
         errorTestCase8 ();

      else if (caseIdx == 9)
         errorTestCase9 ();

      else if (caseIdx == 10)
         errorTestCase10 ();

      else if (caseIdx == 11)
         errorTestCase11 ();

      else if (caseIdx == 12)
         errorTestCase12 ();

      else if (caseIdx == 13)
         errorTestCase13 ();

      else if (caseIdx == 14)
         errorTestCase14 ();

      else
         {
         System.out.println (
              "\n"
            + "ERROR:\n"
            + "   The argument to the WIT-J tester must be an integer "
            +    "from 1 to 14.\n");

         System.exit (3);
@


1.34
log
@Moved unit test to class UnitTester.
@
text
@d73 2
a74 1
            + "   The argument to the WIT-J tester must be an integer.\n");
@


1.33
log
@Name change.
@
text
@d2 6
@


1.32
log
@Minor revision.
@
text
@d167 2
a168 2
         + "   Call to theAttSpec.appliesTo (theEntity) "
         +    "with a null reference for theEntity.\n"
d192 1
a192 1
         + "   Entity.set (...) "
d228 1
a228 1
      theProblem.getGlobalEntity ().set (nPeriods (), 7);
d239 3
a241 3
      Session      theSession;
      Problem      theProblem;
      GlobalEntity theGlobalEntity;
d248 2
a249 2
         + "   Call to theAttSpec.appliesTo (theEntity) "
         +    "with an inactive Entity.\n"
d253 1
a253 1
      theSession      = Session   .newSession ();
d255 1
a255 1
      theProblem      = theSession.newProblem ();
d257 1
a257 1
      theGlobalEntity = theProblem.getGlobalEntity ();
d261 1
a261 1
      nPeriods ().appliesTo (theGlobalEntity);
d280 1
a280 1
         + "   Entity.set (...) on an output attribute.\n"
d306 1
a306 1
         + "   Entity.set (...) for a Entity class\n"
d335 1
a335 1
         + "   Entity.get (...) "
d366 1
a366 1
         + "   Entity.get (...) with a null reference for the AttSpec.\n"
d394 1
a394 1
         + "   Entity.set (...) with a null reference "
@


1.31
log
@Changed name of Component to Entity.
@
text
@d149 1
a149 1
      theSession.shutDownAll ();
d259 1
a259 1
      theSession.shutDownAll ();
@


1.30
log
@Began implementation of Problem.readData (...).
@
text
@d167 2
a168 2
         + "   Call to theAttSpec.appliesTo (theComp) "
         +    "with a null reference for theComp.\n"
d192 1
a192 1
         + "   Component.set (...) "
d228 1
a228 1
      theProblem.getGlobalComp ().set (nPeriods (), 7);
d239 3
a241 3
      Session    theSession;
      Problem    theProblem;
      GlobalComp theGlobalComp;
d248 2
a249 2
         + "   Call to theAttSpec.appliesTo (theComp) "
         +    "with an inactive Component.\n"
d253 1
a253 2
      theSession    = Session   .newSession ();
      theProblem    = theSession.newProblem ();
d255 3
a257 1
      theGlobalComp = theProblem.getGlobalComp ();
d261 1
a261 1
      nPeriods ().appliesTo (theGlobalComp);
d280 1
a280 1
         + "   Component.set (...) on an output attribute.\n"
d306 1
a306 1
         + "   Component.set (...) for a Component class\n"
d335 1
a335 1
         + "   Component.get (...) "
d366 1
a366 1
         + "   Component.get (...) with a null reference for the AttSpec.\n"
d394 1
a394 1
         + "   Component.set (...) with a null reference "
@


1.29
log
@Implemented theOpn.getBomEntry (theBomIndex).
@
text
@d111 3
d120 1
a120 1
            +    "from 1 to 13.\n");
d498 26
@


1.28
log
@Active state / shutDown method.
@
text
@d108 3
d117 1
a117 1
            +    "from 1 to 12.\n");
d463 32
@


1.27
log
@Added Problem.newProblem ().
@
text
@d143 1
a143 1
      theSession.releaseAll ();
d243 1
a243 1
         +    "with a released Component.\n"
d252 1
a252 1
      theSession.releaseAll ();
@


1.26
log
@Added verification that arguments belong to the same Problem.
@
text
@d128 1
d140 2
a141 1
      theProblem = Session.newSession ().newProblem ();
d143 1
a143 1
      theProblem.getSession ().releaseAll ();
d191 2
a192 3
      theProblem   = Session   .newSession ().newProblem ();

      thePartA     = theProblem.newPart ("A", MATERIAL);
d218 1
a218 1
      theProblem = Session.newSession ().newProblem ();
a247 1

d277 2
a278 3
      theProblem = Session.newSession ().newProblem ();

      thePartA   = theProblem.newPart ("A", MATERIAL);
d304 2
a305 3
      theProblem = Session.newSession ().newProblem ();

      thePartA   = theProblem.newPart ("A", MATERIAL);
d333 3
a335 3
      theProblem   = Session.newSession ().newProblem ();
      thePartA     = theProblem           .newPart    ("A", MATERIAL);
      theDemandB   = thePartA             .newDemand  ("B");
d363 2
a364 3
      theProblem = Session.newSession ().newProblem ();

      thePartA   = theProblem.newPart ("A", MATERIAL);
d392 2
a393 3
      theProblem = Session.newSession ().newProblem ();

      thePartA   = theProblem.newPart ("A", MATERIAL);
d449 3
a451 3
      theProblem1   = Session.newSession ().newProblem   ();
      theOpn1A      = theProblem1          .newOperation ("A");
      thePart1B     = theProblem1          .newPart      ("B", MATERIAL);
d453 2
a454 2
      theProblem2   = Session.newSession ().newProblem   ();
      thePart2B     = theProblem2          .newPart      ("B", MATERIAL);
d456 1
a456 1
      theBomEnt1A2B = theOpn1A             .newBomEntry  (thePart2B);
@


1.25
log
@Revised the factory methods.
@
text
@d105 3
d114 1
a114 1
            +    "from 1 to 11.\n");
d429 35
@


1.24
log
@Disallowed creating a Problem for a Session that already has one.
@
text
@d136 1
a136 1
      theProblem = Problem.makeInstance ();
d156 2
a157 1
         + "   Passing null to the Operation ctor.\n"
d161 1
a161 1
      Operation.makeInstance (null, "Null Operation");
d186 3
a188 2
      theProblem   = Problem .makeInstance ();
      thePartA     = Part    .makeInstance (theProblem, "A", MATERIAL);
d214 1
a214 1
      theProblem = Problem.makeInstance ();
d216 1
a216 1
      Operation.makeInstance (theProblem, "Test Opn #4");
d229 3
a231 1
      Problem theProblem;
d238 2
a239 1
         + "   Part.makeInstance (...) with an inactive Problem.\n"
d243 3
a245 1
      theProblem = Problem.makeInstance ();
d247 3
a249 1
      theProblem.getSession ().releaseAll ();
d251 1
a251 1
      Part.makeInstance (theProblem, "Test Part #5", CAPACITY);
d274 3
a276 2
      theProblem = Problem.makeInstance ();
      thePartA   = Part   .makeInstance (theProblem, "A", MATERIAL);
d302 3
a304 2
      theProblem = Problem.makeInstance ();
      thePartA   = Part   .makeInstance (theProblem, "A", MATERIAL);
d332 3
a334 3
      theProblem   = Problem.makeInstance ();
      thePartA     = Part   .makeInstance (theProblem, "A", MATERIAL);
      theDemandB   = Demand .makeInstance (thePartA,   "B");
d362 3
a364 2
      theProblem = Problem.makeInstance ();
      thePartA   = Part   .makeInstance (theProblem, "A", MATERIAL);
d392 3
a394 2
      theProblem = Problem.makeInstance ();
      thePartA   = Part   .makeInstance (theProblem, "A", MATERIAL);
d414 2
a415 2
         + "   Call to Problem.makeInstance (theSession)\n"
         + "   with a Session that already has a Problem.\n"
d419 1
a419 1
      theSession = Session.makeInstance ();
d421 2
a422 2
      Problem.makeInstance (theSession);
      Problem.makeInstance (theSession);
@


1.23
log
@Initial implementation of the Session classes.
@
text
@d102 3
d111 1
a111 1
            +    "from 1 to 10.\n");
d387 26
@


1.22
log
@Terminology change.
@
text
@d135 1
a135 1
      theProblem.release ();
d237 1
a237 1
      theProblem.release ();
@


1.21
log
@Added checking for null arguments.
@
text
@d135 1
a135 1
      theProblem.shutDown ();
d237 1
a237 1
      theProblem.shutDown ();
@


1.20
log
@Name change: Global --> GlobalComp.
@
text
@d96 6
d108 1
a108 1
            +    "from 1 to 8.\n");
d328 56
@


1.19
log
@Customized Attributes.
@
text
@d207 1
a207 1
      theProblem.getGlobal ().set (nPeriods (), 7);
@


1.18
log
@Changed error test numbers.
@
text
@d199 1
a199 1
         + "   setNPeriods(...) in a Problem that has an Operation.\n"
d207 1
a207 1
      theProblem.getGlobal ().setNPeriods (7);
@


1.17
log
@Revised the shut-down model.
@
text
@d72 4
a75 1
      if      (caseIdx == 2)
a95 3
      else if (caseIdx == 9)
         errorTestCase9 ();

d102 1
a102 1
            +    "from 2 to 9.\n");
d109 1
a109 1
// errorTestCase2 ().
d111 1
a111 1
// Performs error test case #2.
d114 1
a114 1
   private void errorTestCase2 ()
d122 1
a122 1
         + "WIT-J Error Test Case #2:\n"
d135 1
a135 1
// errorTestCase3 ().
d137 1
a137 1
// Performs error test case #3.
d140 1
a140 1
   private void errorTestCase3 ()
d146 1
a146 1
         + "WIT-J Error Test Case #3:\n"
d155 1
a155 1
// errorTestCase4 ().
d157 1
a157 1
// Performs error test case #4.
d160 1
a160 1
   private void errorTestCase4 ()
d170 1
a170 1
         + "WIT-J Error Test Case #4:\n"
d185 1
a185 1
// errorTestCase5 ().
d187 1
a187 1
// Performs error test case #5.
d190 1
a190 1
   private void errorTestCase5 ()
d198 1
a198 1
         + "WIT-J Error Test Case #5:\n"
d205 1
a205 1
      Operation.makeInstance (theProblem, "Test Opn #5");
d211 1
a211 1
// errorTestCase6 ().
d213 1
a213 1
// Performs error test case #6.
d216 1
a216 1
   private void errorTestCase6 ()
d224 1
a224 1
         + "WIT-J Error Test Case #6:\n"
d233 1
a233 1
      Part.makeInstance (theProblem, "Test Part #6", CAPACITY);
d237 1
a237 1
// errorTestCase7 ().
d239 1
a239 1
// Performs error test case #7.
d242 1
a242 1
   private void errorTestCase7 ()
d251 1
a251 1
         + "WIT-J Error Test Case #7:\n"
d263 1
a263 1
// errorTestCase8 ().
d265 1
a265 1
// Performs error test case #8.
d268 1
a268 1
   private void errorTestCase8 ()
d277 1
a277 1
         + "WIT-J Error Test Case #8:\n"
d290 1
a290 1
// errorTestCase9 ().
d292 1
a292 1
// Performs error test case #9.
d295 1
a295 1
   private void errorTestCase9 ()
d306 1
a306 1
         + "WIT-J Error Test Case #9:\n"
@


1.16
log
@Attributes.
@
text
@d72 1
a72 4
      if      (caseIdx == 1)
         errorTestCase1 ();

      else if (caseIdx == 2)
d102 1
a102 1
            +    "from 1 to 9.\n");
a108 25
// errorTestCase1 ().
//
// Performs error test case #1.
//------------------------------------------------------------------------------

   private void errorTestCase1 ()
      {
      Problem theProblem;

      System.out.println (
           "\n"
         + "----------------------------------------"
         + "----------------------------------------\n"
         + "WIT-J Error Test Case #1:\n"
         + "   Garbage collection of an active Problem.\n"
         + "----------------------------------------"
         + "----------------------------------------\n");

      Problem.makeInstance ();

      System.runFinalization ();
      System.gc              ();
      }

//------------------------------------------------------------------------------
@


1.15
log
@Classes Global and GlobalCI.
@
text
@d5 1
a5 1
import static com.ibm.witj.Attribute.*;
@


1.14
log
@Attributes.
@
text
@d235 1
a235 1
      theProblem.getGlobalComp ().setNPeriods (7);
@


1.13
log
@Attributes.
@
text
@d5 1
d209 1
a209 1
      thePartA.set (AttribOld.supplyVol (), supplyVolVal);
d287 1
a287 1
      thePartA.set (AttribOld.scrapVol (), new double[26]);
d314 1
a314 1
      thePartA.set (AttribOld.demandVol (), new double[26]);
d346 1
a346 1
      theDemandB.get (AttribOld.demandVol (), demandVolVal);
@


1.12
log
@Attributes.
@
text
@a4 1
import static com.ibm.witj.AttribOld.*;
d208 1
a208 1
      thePartA.set (supplyVol (), supplyVolVal);
d286 1
a286 1
      thePartA.set (scrapVol (), new double[26]);
d313 1
a313 1
      thePartA.set (demandVol (), new double[26]);
d345 1
a345 1
      theDemandB.get (demandVol (), demandVolVal);
@


1.11
log
@Changed name of class AttID to Attribute.
@
text
@d5 1
a5 1
import static com.ibm.witj.Attribute.*;
@


1.10
log
@Attributes.
@
text
@d5 1
a5 1
import static com.ibm.witj.AttID.*;
@


1.9
log
@Replaced classes Material and Capacity with an enum.
@
text
@d209 1
a209 1
      thePartA.set (SUPPLY_VOL, supplyVolVal);
d287 1
a287 1
      thePartA.set (SCRAP_VOL, new double[26]);
d314 1
a314 1
      thePartA.set (DEMAND_VOL, new double[26]);
d346 1
a346 1
      theDemandB.get (DEMAND_VOL, demandVolVal);
@


1.8
log
@Made accessor names begin with "get".
@
text
@d2 1
a2 1
package        com.ibm.witj.test;
d4 3
a6 2
import         com.ibm.witj.*;
import  static com.ibm.witj.AttID.*;
d191 1
a191 1
      Material theMatA;
d205 1
a205 1
      theMatA      = Material.makeInstance (theProblem, "A");
d209 1
a209 1
      theMatA.set (SUPPLY_VOL, supplyVolVal);
d253 1
a253 1
         + "   Capacity.makeInstance (...) with an inactive Problem.\n"
d261 1
a261 1
      Capacity.makeInstance (theProblem, "Test Cap #2");
d272 2
a273 2
      Problem  theProblem;
      Material theMatA;
d284 2
a285 2
      theProblem = Problem .makeInstance ();
      theMatA    = Material.makeInstance (theProblem, "A");
d287 1
a287 1
      theMatA.set (SCRAP_VOL, new double[26]);
d298 2
a299 2
      Problem  theProblem;
      Material theMatA;
d311 2
a312 2
      theProblem = Problem .makeInstance ();
      theMatA    = Material.makeInstance (theProblem, "A");
d314 1
a314 1
      theMatA.set (DEMAND_VOL, new double[26]);
d326 1
a326 1
      Material theMatA;
d340 3
a342 3
      theProblem   = Problem .makeInstance ();
      theMatA      = Material.makeInstance (theProblem, "A");
      theDemandB   = Demand  .makeInstance (theMatA,    "B");
@


1.7
log
@Attributes.
@
text
@d234 1
a234 1
      theProblem.myGlobalComp ().setNPeriods (7);
@


1.6
log
@Attributes.
@
text
@d95 3
d104 1
a104 1
            +    "from 1 to 8.\n");
d317 32
@


1.5
log
@Attributes.
@
text
@d2 1
a2 1
package com.ibm.witj.test;
d4 2
a5 1
import  com.ibm.witj.*;
d89 6
d101 1
a101 1
            +    "from 1 to 6.\n");
d195 1
a195 1
         + "   DblVecAttRep.setValue (...) "
d205 1
a205 1
      theMatA.setSupplyVol (supplyVolVal);
d261 53
@


1.4
log
@Attributes.
@
text
@d198 1
a198 1
      theMatA.supplyVol ().setValue (supplyVolVal);
@


1.3
log
@Removed class LTPubObject.
@
text
@d70 1
a70 1
      if (caseIdx == 1)
d179 3
a181 3
      Problem   theProblem;
      Operation theOpnA;
      double[]  execCostVal;
d188 1
a188 1
         + "   Operation.setexecCost (...) "
d193 2
a194 1
      theProblem  = Problem.makeInstance ();
d196 1
a196 1
      theOpnA     = Operation.makeInstance (theProblem, "A");
d198 1
a198 3
      execCostVal = new double[]{1, 2, 3, 4};

      theOpnA.setExecCost (execCostVal);
@


1.2
log
@Added Java class LTPubObject.
@
text
@d121 2
a122 1
      System.gc ();
@


1.1
log
@Moved error testing to its own class.
@
text
@d115 1
a115 1
         + "   Garbage collection of an active InterfaceObject.\n"
d119 1
a119 1
      theProblem = Problem.makeInstance ();
d121 1
a121 1
      Operation.makeInstance (theProblem, "Test Opn #2");
d139 1
a139 1
         + "   Calling an active method on an inactive InterfaceObject.\n"
@

