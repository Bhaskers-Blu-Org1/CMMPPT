head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2009.04.09.19.50.15;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2009.04.09.19.26.42;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.04.07.22.13.30;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.02.19.18.21;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.02.17.49.29;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Renamed recovering test to status quo test.
@
text
@
//==============================================================================
// WIT-J/Test Source File RecoveringTester.java.
//
// Contains the declaration of class RecoveringTester.
//==============================================================================

package       com.ibm.witj.test;

import        com.ibm.witj.*;
import static com.ibm.witj.Attribute.*;
import static com.ibm.witj.Part.Category.*;
import static com.ibm.witj.MessageGroup.*;

import                java.util.*;

//==============================================================================
// Class RecoveringTester
//
// Responsible for performing a series of tests on WIT-J each of which
// generates an error condition that that causes a StatusQuoException to be
// thrown, thus allowing the program to recover from the error and continue
// accessing WIT-J.
//==============================================================================

final class RecoveringTester
{
//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// performRecoveringTest ().
//
// Performs a recovering test.
//------------------------------------------------------------------------------

   public static void performRecoveringTest ()
      {
      RecoveringTester theRecoveringTester;

      theRecoveringTester = new RecoveringTester ();

      theRecoveringTester.performTest ();
      }

//==============================================================================
// Private Constructor
//==============================================================================

   private RecoveringTester ()
      {
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// performTest ().
//
// Performs a recovering test.
//------------------------------------------------------------------------------

   private void performTest ()
      {
      testCase1  ();
      testCase2  ();
      testCase3  ();
      testCase4  ();
      testCase5  ();
      testCase6  ();
      testCase7  ();
      testCase8  ();
      testCase9  ();
      testCase10 ();
      testCase11 ();
      testCase12 ();
      testCase13 ();
      testCase14 ();
      testCase15 ();
      testCase16 ();
      testCase17 ();
      testCase18 ();
      testCase19 ();
      testCase20 ();
      testCase21 ();
      testCase22 ();
      testCase23 ();
      testCase24 ();
      testCase25 ();
      testCase26 ();
      testCase27 ();

      System.out.println (
         "\n"
       + "Normal termination of recovering test.");
      }

//------------------------------------------------------------------------------
// testCase1 ().
//
// Performs recovering test case 1.
//------------------------------------------------------------------------------

   private void testCase1 ()
      {
      Problem theProblem;

      printHeading (
         1,
         "Call to an active method on an inactive RetainedObject.");

      theProblem = newEnabledProblem ();

      theProblem.deactivate ();

      try
         {
         theProblem.displayData ("error.txt");

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 1.");
      }

//------------------------------------------------------------------------------
// testCase2 ().
//
// Performs recovering test case 2.
//------------------------------------------------------------------------------

   private void testCase2 ()
      {
      Class <? extends Component> theClass;

      printHeading (
         2,
         "Passing a null reference as the Class argument to "
       + "theAttribute.appliesTo.");

      theClass = null;

      try
         {
         nPeriods ().appliesTo (theClass);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 2.");
      }

//------------------------------------------------------------------------------
// testCase3 ().
//
// Performs recovering test case 3.
//------------------------------------------------------------------------------

   private void testCase3 ()
      {
      Problem  theProblem;
      Part     thePartA;
      double[] supplyVolVal;

      printHeading (
         3,
         "Call to Component.setValue with an array whose length != nPeriods.");

      theProblem   = newEnabledProblem ();

      thePartA     = Part.newInstance (theProblem, "A", MATERIAL);

      supplyVolVal = new double[]{1, 2, 3, 4};
      
      try
         {
         thePartA.setValue (supplyVol (), supplyVolVal);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 3.");
      }

//------------------------------------------------------------------------------
// testCase4 ().
//
// Performs recovering test case 4.
//------------------------------------------------------------------------------

   private void testCase4 ()
      {
      Problem theProblem;

      printHeading (
         4,
         "Call to setValue (nPeriods (), ...) in a Problem "
       + "that has an Operation.");

      theProblem = newEnabledProblem ();

      Operation.newInstance (theProblem, "Test Opn 4");

      try
         {
         theProblem.getGlobalAspect ().setValue (nPeriods (), 7);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 4.");
      }

//------------------------------------------------------------------------------
// testCase5 ().
//
// Performs recovering test case 5.
//------------------------------------------------------------------------------

   private void testCase5 ()
      {
      printHeading (
         5,
         "Call to Attribute.appliesTo with Component as the Class.");

      try
         {
         nPeriods ().appliesTo (Component.class);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 5.");
      }

//------------------------------------------------------------------------------
// testCase6 ().
//
// Performs recovering test case 6.
//------------------------------------------------------------------------------

   private void testCase6 ()
      {
      Problem theProblem;
      Part    thePartA;

      printHeading (
         6,
         "Call to Component.setVectorToScalar with a non-modifiable Attribute."
         );

      theProblem = newEnabledProblem ();

      thePartA   = Part.newInstance (theProblem, "A", MATERIAL);

      try
         {
         thePartA.setVectorToScalar (scrapVol (), 17);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 6.");
      }

//------------------------------------------------------------------------------
// testCase7 ().
//
// Performs recovering test case 7.
//------------------------------------------------------------------------------

   private void testCase7 ()
      {
      Problem theProblem;
      Part    thePartA;

      printHeading (
         7,
         "Call to Component.setValue for an Component class\n"
       + "to which the Attribute does not apply.");

      theProblem = newEnabledProblem ();

      thePartA   = Part.newInstance (theProblem, "A", MATERIAL);

      try
         {
         thePartA.setVectorToScalar (demandVol (), 12);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 7.");
      }

//------------------------------------------------------------------------------
// testCase8 ().
//
// Performs recovering test case 8.
//------------------------------------------------------------------------------

   private void testCase8 ()
      {
      Problem  theProblem;
      Part     thePartA;
      Demand   theDemandB;
      double[] demandVolVal;

      printHeading (
         8,
         "Call to Component.getValue with an array whose length != nPeriods.");

      theProblem   = newEnabledProblem ();

      thePartA     = Part  .newInstance (theProblem, "A", MATERIAL);
      theDemandB   = Demand.newInstance (thePartA,   "B");

      demandVolVal = new double[4];

      try
         {
         theDemandB.getValue (demandVol (), demandVolVal);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 8.");
      }

//------------------------------------------------------------------------------
// testCase9 ().
//
// Performs recovering test case 9.
//------------------------------------------------------------------------------

   private void testCase9 ()
      {
      Problem              theProblem;
      Part                 thePartA;
      Attribute <double[]> theAtt;

      printHeading (
         9,
         "Passing a null reference as the Attribute argument to "
       + "Component.getValue.");

      theProblem = newEnabledProblem ();

      thePartA   = Part.newInstance (theProblem, "A", MATERIAL);

      theAtt     = null;

      try
         {
         thePartA.getValue (theAtt);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 9.");
      }

//------------------------------------------------------------------------------
// testCase10 ().
//
// Performs recovering test case 10.
//------------------------------------------------------------------------------

   private void testCase10 ()
      {
      Problem theProblem;
      Part    thePartA;

      printHeading (
         10,
         "Passing a null reference as the value argument to "
       + "Component.setValue.");

      theProblem = newEnabledProblem ();

      thePartA   = Part.newInstance (theProblem, "A", MATERIAL);

      try
         {
         thePartA.setValue (supplyVol (), null);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 10.");
      }

//------------------------------------------------------------------------------
// testCase11 ().
//
// Performs recovering test case 11.
//------------------------------------------------------------------------------

   private void testCase11 ()
      {
      Problem theProblem;

      printHeading (
         11,
         "Call to Problem.enable with a Problem that's already enabled.");

      theProblem = newEnabledProblem ();

      try
         {
         theProblem.enable ();

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 11.");
      }

//------------------------------------------------------------------------------
// testCase12 ().
//
// Performs recovering test case 12.
//------------------------------------------------------------------------------

   private void testCase12 ()
      {
      Problem    theProblemA;
      Operation  theOpnA;
      MessageMgr theMessageMgrB;
      Problem    theProblemB;
      Part       thePartB;

      printHeading (
         12,
         "Constructing a BomEntry whose Operation "
       + "and Part belong to different Problems.");

      theProblemA    = newEnabledProblem             ();
      theOpnA        = Operation  .newInstance       (theProblemA,   "A");

      theProblemB    = Problem    .newInstance       ();
      theMessageMgrB = theProblemB.getMessageMgr     ();
      theMessageMgrB              .setQuiet          (true);
      theMessageMgrB              .setMesgTimesPrint (INFORMATIONAL, 0);
      theProblemB                 .enable            ();
      thePartB       = Part       .newInstance       (theProblemB,   "B",
                                                                     MATERIAL);
      
      try
         {
         BomEntry                 .newInstance       (theOpnA, thePartB);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblemB.deactivate ();
      theProblemA.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 12.");
      }

//------------------------------------------------------------------------------
// testCase13 ().
//
// Performs recovering test case 13.
//------------------------------------------------------------------------------

   private void testCase13 ()
      {
      Problem theProblem;

      printHeading (
         13,
         "Call to Problem.readData on a Problem that has a Part.");

      theProblem = newEnabledProblem ();

      Part.newInstance (theProblem, "A", MATERIAL);

      try
         {
         theProblem.readData ("test.data");

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 13.");
      }

//------------------------------------------------------------------------------
// testCase14 ().
//
// Performs recovering test case 14.
//------------------------------------------------------------------------------

   private void testCase14 ()
      {
      Problem theProblem;

      printHeading (
         14,
         "Call to theProblem.getDefaultValue "
       + "with an Attribute that has no default value.");

      theProblem = newEnabledProblem ();

      try
         {
         theProblem.getDefaultValue (accelerated ());

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 14.");
      }

//------------------------------------------------------------------------------
// testCase15 ().
//
// Performs recovering test case 15.
//------------------------------------------------------------------------------

   private void testCase15 ()
      {
      Problem  theProblem;
      double[] theDblArr;

      printHeading (
         15,
         "Call to theProblem.getDefaultValue "
       + "with an array whose length is not nPeriods.");

      theProblem = newEnabledProblem ();

      theDblArr = new double[14];

      try
         {
         theProblem.getDefaultValue (supplyVol (), theDblArr);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 15.");
      }

//------------------------------------------------------------------------------
// testCase16 ().
//
// Performs recovering test case 16.
//------------------------------------------------------------------------------

   private void testCase16 ()
      {
      printHeading (
         16,
         "Call to Attribute.asAttribute (Boolean.class) with an Attribute\n"
       + "whose value type is not Boolean.");

      try
         {
         getAttributes ().get (5).asAttribute (Boolean.class);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 16.");
      }

//------------------------------------------------------------------------------
// testCase17 ().
//
// Performs recovering test case 17.
//------------------------------------------------------------------------------

   private void testCase17 ()
      {
      Problem theProblem;

      printHeading (
         17,
         "Call to Problem.getGlobalAspect () "
       + "with a Problem that has not been enabled.");

      theProblem = Problem.newInstance ();

      theProblem.getMessageMgr ().setQuiet              (true);
      theProblem.getMessageMgr ().setMesgFileAccessMode ("a");

      theProblem.getMessageMgr ().setMesgFileName ("RecoveringTester.out");

      try
         {
         theProblem.getGlobalAspect ();

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 17.");
      }

//------------------------------------------------------------------------------
// testCase18 ().
//
// Performs recovering test case 18.
//------------------------------------------------------------------------------

   private void testCase18 ()
      {
      Problem theProblem;

      printHeading (
         18,
         "Call to Operation.newInstance "
       + "with a Problem that has not been enabled.");

      theProblem = Problem.newInstance ();

      theProblem.getMessageMgr ().setQuiet              (true);
      theProblem.getMessageMgr ().setMesgFileAccessMode ("a");

      theProblem.getMessageMgr ().setMesgFileName ("RecoveringTester.out");

      try
         {
         Operation.newInstance (theProblem, "A");

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 18.");
      }

//------------------------------------------------------------------------------
// testCase19 ().
//
// Performs recovering test case 19.
//------------------------------------------------------------------------------

   private void testCase19 ()
      {
      Problem theProblem;

      printHeading (
         19,
         "Passing an inactive RetainedObject to a method\n"
       + "that requires an active RetainedObject.");

      theProblem = newEnabledProblem ();

      theProblem.deactivate ();

      try
         {
         Part.newInstance (theProblem, "A", MATERIAL);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 19.");
      }

//------------------------------------------------------------------------------
// testCase20 ().
//
// Performs recovering test case 20.
//------------------------------------------------------------------------------

  @@SuppressWarnings ("unchecked")

   private void testCase20 ()
      {
      Problem             theProblem;
      Attribute <Boolean> nPeriodsBool;

      printHeading (
         20,
         "Call to Component.getValue with an Attribute\n"
       + "that has been cast to a different value type.");

      theProblem   = newEnabledProblem ();

      nPeriodsBool = (Attribute <Boolean>) (Object) nPeriods ();

      try
         {
         theProblem.getGlobalAspect ().getValue (nPeriodsBool);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 20.");
      }

//------------------------------------------------------------------------------
// testCase21 ().
//
// Performs recovering test case 21.
//------------------------------------------------------------------------------

   private void testCase21 ()
      {
      Problem theProblem;

      printHeading (
         21,
         "Call to Problem.performAction with an invalid command.");

      theProblem = newEnabledProblem ();

      try
         {
         theProblem.performAction ("Bogus Command");

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 21.");
      }

//------------------------------------------------------------------------------
// testCase22 ().
//
// Performs recovering test case 22.
//------------------------------------------------------------------------------

   private void testCase22 ()
      {
      Problem                          theProblem1;
      Problem                          theProblem2;
      Part                             thePart;
      Demand                           theDemand;
      AllocTriple <Demand>             theTriple;
      ArrayList <AllocTriple <Demand>> theTripleList;

      printHeading (
         22,
         "Call to GlobalAspect.setPipSeq with a Demand that belongs to\n"
       + "a different Problem.");

      theProblem1   = newEnabledProblem ();
      theProblem2   = newEnabledProblem ();

      thePart       = Part       .newInstance (theProblem1, "A", CAPACITY);
      theDemand     = Demand     .newInstance (thePart,     "B");
      theTriple     = AllocTriple.newInstance (theDemand, 0, 10);

      theTripleList = new ArrayList <AllocTriple <Demand>> (1);

      theTripleList.add (0, theTriple);

      try
         {
         theProblem2.getGlobalAspect ().setPipSeq (theTripleList);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem2.deactivate ();
      theProblem1.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 22.");
      }

//------------------------------------------------------------------------------
// testCase23 ().
//
// Performs recovering test case 23.
//------------------------------------------------------------------------------

   private void testCase23 ()
      {
      Problem                          theProblem1;
      Problem                          theProblem2;
      Part                             thePart;
      Demand                           theDemand;
      AllocTriple <Demand>             theTriple;
      ArrayList <AllocTriple <Demand>> theTripleList;

      printHeading (
         23,
         "Call to GlobalAspect.setPipSeq with an inactive Demand.");

      theProblem1   = newEnabledProblem ();
      theProblem2   = newEnabledProblem ();

      thePart       = Part       .newInstance (theProblem1, "A", CAPACITY);
      theDemand     = Demand     .newInstance (thePart,     "B");
      theTriple     = AllocTriple.newInstance (theDemand, 0, 10);

      theTripleList = new ArrayList <AllocTriple <Demand>> (1);

      theTripleList.add (0, theTriple);

      theProblem1.deactivate ();

      try
         {
         theProblem2.getGlobalAspect ().setPipSeq (theTripleList);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem2.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 23.");
      }

//------------------------------------------------------------------------------
// testCase24 ().
//
// Performs recovering test case 24.
//------------------------------------------------------------------------------

   private void testCase24 ()
      {
      Problem          theProblem;
      List <Component> theCompList;

      printHeading (
         24,
         "Call to a modifying method on an unmodifiable List returned by a "
       + "WIT-J method.");

      theProblem  = newEnabledProblem ();

      theCompList = theProblem.getComponents ();

      try
         {
         theCompList.clear ();

         throw new AssertionError ();
         }

      catch (UnsupportedOperationException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 24.");
      }

//------------------------------------------------------------------------------
// testCase25 ().
//
// Performs recovering test case 25.
//------------------------------------------------------------------------------

   private void testCase25 ()
      {
      Problem   theProblem;
      Part      thePart;
      Operation theOpn;

      printHeading (
         25,
         "Call to theOpn.getUniqueBomEntryTo (thePart) when theOpn and\n"
       + "thePart are connected by more than one BomEntry.");

      theProblem  = newEnabledProblem ();

      thePart     = Part     .newInstance (theProblem, "A", CAPACITY);
      theOpn      = Operation.newInstance (theProblem, "B");

      BomEntry.newInstance (theOpn, thePart);
      BomEntry.newInstance (theOpn, thePart);

      try
         {
         theOpn.getUniqueBomEntryTo (thePart);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 25.");
      }

//------------------------------------------------------------------------------
// testCase26 ().
//
// Performs recovering test case 26.
//------------------------------------------------------------------------------

   private void testCase26 ()
      {
      Problem theProblem;
      Part    thePart;

      printHeading (
         26,
         "Call to theComp.queueVectorElement (...) with an out-of-range "
       + "period argument.");

      theProblem = newEnabledProblem ();

      thePart    = Part.newInstance (theProblem, "A", CAPACITY);

      try
         {
         thePart.queueVectorElement (supplyVol (), -1, 10);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 26.");
      }

//------------------------------------------------------------------------------
// testCase27 ().
//
// Performs recovering test case 27.
//------------------------------------------------------------------------------

   private void testCase27 ()
      {
      Problem   theProblem;
      Operation theOpn;

      printHeading (
         27,
         "Call to theComp.queueVectorElement (...) with an out-of-range "
       + "period argument.");

      theProblem = newEnabledProblem ();

      theOpn     = Operation.newInstance (theProblem, "A");

      try
         {
         theOpn.queueHardLBElement (execBounds (), 26, 20);

         throw new AssertionError ();
         }

      catch (StatusQuoException theExc)
         {
         theExc.printStackTrace ();
         }

      theProblem.deactivate ();

      System.out.println (
           "\n"
         + "Successful completion of Recovering Test Case 27.");
      }

//------------------------------------------------------------------------------
// newEnabledProblem ()
//
// Creates, enables, and returns a new Problem set up for recovering testing.
//------------------------------------------------------------------------------

   private Problem newEnabledProblem ()
      {
      Problem theProblem;

      theProblem = Problem.newInstance ();

      theProblem.getMessageMgr ().setQuiet              (true);
      theProblem.getMessageMgr ().setMesgFileAccessMode ("a");

      theProblem.getMessageMgr ().setMesgFileName ("RecoveringTester.out");

      theProblem.enable ();

      return theProblem;
      }

//------------------------------------------------------------------------------
// printHeading (theCaseIdx, text)
//
// Prints a heading for the recovering test case of theCaseIdx, where text
// describes recovering test case.
//------------------------------------------------------------------------------

   private void printHeading (int theCaseIdx, String text)
      {
      System.out.printf (
         "\n"
       + "----------------------------------------"
       + "----------------------------------------\n"
       + "WIT-J Recovering Test Case %d:\n"
       + "%s\n"
       + "----------------------------------------"
       + "----------------------------------------\n"
       + "\n",
         theCaseIdx,
         text);
      }

//------------------------------------------------------------------------------
}
@


1.4
log
@Fixed bug: The C++ Coordinator new deletes the CTVecSupply when it needs to.
@
text
@@


1.3
log
@Setting BoundSet Attributes elements from a queue.
@
text
@d893 2
d1034 2
d1078 2
d1117 2
d1156 2
@


1.2
log
@Added test for call to theComp.queueElementValue (...) with an out-of-range
   period argument.
@
text
@d93 1
d1092 1
a1092 1
         "Call to theComp.queueElementValue (...) with an out-of-range "
d1101 1
a1101 1
         thePart.queueElementValue (supplyVol (), 26, 10);
d1117 37
@


1.1
log
@Changed name of recovery test to recovering test.
@
text
@d92 1
d1079 37
@

