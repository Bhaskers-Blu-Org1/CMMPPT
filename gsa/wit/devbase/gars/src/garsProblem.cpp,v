head	1.5;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@// @;


1.5
date	2001.09.26.18.50.26;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.11.02.00.04;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.08.16.27.40;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.10.17.04.59;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.22.16.46.43;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.02.22.16.46.43;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to write out some problem size metrics
@
text
@#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#endif

#include <assert.h>
#include <iostream.h>
#include <float.h>

#include <wit.h>



#include "OsiFloatEqual.h"
#include "garsProblem.h"
#include "demand.h"
#include "supply.h"
#include "mtm.h"
#include "bom.h"
#include "loosep.h"
#include "partRevenue.h"
#include "appData.h"
#include "solnDemand.h"

const std::string GARSproblem::mtmDemandName_ = "MachineDemand";
const std::string GARSproblem::noSourceDemandName_ = "NoSource";
const std::string GARSproblem::internalType1DemandName_ = "InternalType1";
const std::string GARSproblem::internalType4DemandName_ = "InternalType4";
const std::string GARSproblem::internalType1Or4DemandName_ = "InternalType1Or4";
const std::string GARSproblem::externalDemandName_ = "External";
const std::string GARSproblem::disassembleMtmOpPrefix_ = "disassemble_";
const std::string GARSproblem::acquireMtmOpPrefix_ = "acquire_";
const std::string GARSproblem::acquirableMtmPartPrefix_ = "acquirable_";

const std::string GARSproblem::type1PartPrefix_ = "type1_";
const std::string GARSproblem::type4PartPrefix_ = "type4_";
const std::string GARSproblem::typeAfsPartPrefix_ = "typeAfs_";
const std::string GARSproblem::type1Or4PartPrefix_ = "type1Or4_";
const std::string GARSproblem::typeAfsOr1PartPrefix_ = "typeAfsOr1_";
const std::string GARSproblem::combineType1And4PartsOpPrefix_ = "combine1And4_";
const std::string GARSproblem::combineTypeAfsAnd1PartsOpPrefix_ = "combineAfsAnd1_";

const std::string & GARSproblem::mtmDemandName(){ return mtmDemandName_; }
const std::string & GARSproblem::noSourceDemandName(){ return noSourceDemandName_; }
const std::string & GARSproblem::internalType1DemandName(){ return internalType1DemandName_; }
const std::string & GARSproblem::internalType4DemandName(){ return internalType4DemandName_; }
const std::string & GARSproblem::internalType1Or4DemandName(){ return internalType1Or4DemandName_; }
const std::string & GARSproblem::externalDemandName(){ return externalDemandName_; }
const std::string & GARSproblem::disassembleMtmOpPrefix(){ return disassembleMtmOpPrefix_; }
const std::string & GARSproblem::acquireMtmOpPrefix(){ return acquireMtmOpPrefix_; }
const std::string & GARSproblem::acquirableMtmPartPrefix(){ return acquirableMtmPartPrefix_; }

const std::string & GARSproblem::type1PartPrefix(){ return type1PartPrefix_; }
const std::string & GARSproblem::type4PartPrefix(){ return type4PartPrefix_; }
const std::string & GARSproblem::typeAfsPartPrefix(){ return typeAfsPartPrefix_; }
const std::string & GARSproblem::type1Or4PartPrefix(){ return type1Or4PartPrefix_; }
const std::string & GARSproblem::typeAfsOr1PartPrefix(){ return typeAfsOr1PartPrefix_; }
const std::string & GARSproblem::combineType1And4PartsOpPrefix(){ return combineType1And4PartsOpPrefix_; }
const std::string & GARSproblem::combineTypeAfsAnd1PartsOpPrefix(){ return combineTypeAfsAnd1PartsOpPrefix_; }

WitRun * GARSproblem::mutableWitRun() const { return wr_; }
WitRun * GARSproblem::witRun() { return wr_; }

void GARSproblem::compareSolutions(std::string directory)
{
   
  assert( nPeriods()==1 );
  int np = 1;

  // set all shipVol, ExecVols subVols to zero
  {
  }
  std::string inputDirectory=directory;
  std::string solnDemandFileName = inputDirectory + "/solnDemand.csv";
 
  // read demand file
  {
    GARSsolnDemandFile solnDemandFile(solnDemandFileName);
    GARSsolnDemandFileIterator solnDemandFileIter(solnDemandFile);
    
    // Read each record of supply file
    for ( ; solnDemandFileIter()!=NULL; ) {
      std::string pn = solnDemandFileIter.partName();

      // Get DemandVols
      std::vector<float> dv1 = internalType1DemandQuantity( pn );
      std::vector<float> dv4 = internalType4DemandQuantity( pn );
      std::vector<float> dv1or4 = internalType1Or4DemandQuantity( pn );
      std::vector<float> dvE = externalDemandQuantity( pn );
      std::vector<float> dvN = noSourceDemandQuantity( pn );
      assert( dvN[0]==0.0f );

      float sv1[1],sv4[1],sv1or4[1],svE[1],svN[1];
      sv1[0] = solnDemandFileIter.internal1ShipQtyAsFloat();
      sv4[0] = solnDemandFileIter.internal4ShipQtyAsFloat();
      svE[0] = solnDemandFileIter.externalShipQtyAsFloat();
      svN[0] = solnDemandFileIter.noSourceShipQtyAsFloat();
      assert( svN[0] == 0.0 );

      sv1or4[0] = 0.0f;
      if ( sv1[0] > dv1[0] ) {
        sv1or4[0] += sv1[0] - dv1[0];
        sv1[0] = dv1[0];
      }
      if ( sv4[0] > dv4[0] ) {
        sv1or4[0] += sv4[0] - dv4[0];
        sv4[0] = dv4[0];
      }
      assert( sv1or4[0] >= 0.0f );
      assert( sv1or4[0] <= dv1or4[0] );

    }
 
  }
      
}

void GARSproblem::economicScenario1()
{
  //setPartForVirtualForecast();
  clearPartForVirtualForecast();

  //setMtmRev();
  clearMtmRev();

  setMtmAcquisitionCost();
  //clearMtmAcquisitionCost();

  //setMtmAcquireAll();
  clearMtmAcquireAll();

  //witSetAccAfterOptImp(witRun(),WitTRUE);
  witOptImplode( witRun() );

  setFocusToDemandVol();
}
void GARSproblem::economicScenario2()
{
  //setPartForVirtualForecast();
  clearPartForVirtualForecast();
  
  setMtmRev();
  //clearMtmRev();

  setMtmAcquisitionCost();
  //clearMtmAcquisitionCost();

  setMtmAcquireAll();
  //clearMtmAcquireAll();

  //witSetAccAfterOptImp(witRun(),WitTRUE);
  witOptImplode( witRun() );

  setFocusToDemandVol();
}
void GARSproblem::nonEconomic()
{
  //setPartForVirtualForecast();
  clearPartForVirtualForecast();
  
  //setMtmRev();
  clearMtmRev();
  
  //setMtmAcquisitionCost();
  clearMtmAcquisitionCost();
  
  //setMtmAcquireAll();
  clearMtmAcquireAll();
  
  //witSetAccAfterOptImp(witRun(),WitTRUE);
  witOptImplode( witRun() );

  setFocusToDemandVol();
}
void GARSproblem::virtualForecast()
{
  setPartForVirtualForecast();
  //clearPartForVirtualForecast();

  //setMtmRev();
  clearMtmRev();
  
  //setMtmAcquisitionCost();
  clearMtmAcquisitionCost();
  
  //setMtmAcquireAll();
  clearMtmAcquireAll();
  
  //witSetAccAfterOptImp(witRun(),WitTRUE);
  witOptImplode( witRun() );

  setFocusToDemandVol();
}
void GARSproblem::setPartForVirtualForecast()
{
  if ( partForVirtualForecast_ ) return;
  partForVirtualForecast_ = true;
  
  int np = nPeriods();
  
  float * infDemTimeVec = new float[np];
  float * zeroTimeVec = new float[np];
  float * obj1ShipReward = new float[np];
  int t;
  for ( t=0; t<np; t++ ) {
    infDemTimeVec[t]=FLT_MAX/(2*np);
    zeroTimeVec[t]=0.0f;
  }
  timeValueOfMoney(np,100.0,obj1ShipReward);
  // loop over each part
  const std::vector<std::string> & pns = pnNames();
  int pnsSize = pns.size(); 
  for ( int p=0; p<pnsSize; ++p ) {
    
    // Set internal 1 0r 4 demand vol to zero
    witSetDemandDemandVol( witRun(), 
      (type1Or4PartPrefix()+pns[p]).c_str(), 
      internalType1Or4DemandName().c_str(), 
      zeroTimeVec );
    
    // Set no src demand vol to zero
    witSetDemandDemandVol( witRun(), 
      (type1Or4PartPrefix()+pns[p]).c_str(), 
      noSourceDemandName().c_str(), 
      zeroTimeVec );
    witSetDemandCumShipBounds( witRun(), 
      (type1Or4PartPrefix()+pns[p]).c_str(), noSourceDemandName().c_str(), 
      NULL, zeroTimeVec, NULL );
    
    // Set internal type 1 demand to infinite and ship cost to nonzero
    witSetDemandDemandVol( witRun(), 
      (type1PartPrefix()+pns[p]).c_str(), 
      internalType1DemandName().c_str(), 
      infDemTimeVec );
    witSetDemandObj1ShipReward( witRun(), 
      (type1PartPrefix()+pns[p]).c_str(), 
      internalType1DemandName().c_str(), 
      obj1ShipReward );
    
    // Set internal type 4 demand to infinite and ship cost to nonzero
    witSetDemandDemandVol( witRun(), 
      (type4PartPrefix()+pns[p]).c_str(), 
      internalType4DemandName().c_str(), 
      infDemTimeVec );
    witSetDemandObj1ShipReward( witRun(), 
      (type4PartPrefix()+pns[p]).c_str(), 
      internalType4DemandName().c_str(), 
      obj1ShipReward );
    
    // Set external demand to infinite, ship cost to nonzero,
    // and turn off substitute arc.
    // The external demand can be statisfied from Type Afs or
    // Type 1 parts. For the AFS Virtual forecast we must make
    // sure that the external demand is not being satified by Type 1
    // parts.
    witSetDemandDemandVol( witRun(), 
      (typeAfsOr1PartPrefix()+pns[p]).c_str(), 
      externalDemandName().c_str(), 
      infDemTimeVec );
    witSetDemandObj1ShipReward( witRun(), 
      (typeAfsOr1PartPrefix()+pns[p]).c_str(), 
      externalDemandName().c_str(), 
      obj1ShipReward ); 
    witSetSubsBomEntryEarliestPeriod ( witRun(), 
      (combineTypeAfsAnd1PartsOpPrefix()+pns[p]).c_str(),0,0,
      np);
    
  }
  delete [] obj1ShipReward;
  delete [] infDemTimeVec;
  delete [] zeroTimeVec;
}
void GARSproblem::setFocusToDemandVol()
{
  // loop over each part
  const std::vector<std::string> & pns = pnNames();
  int pnsSize = pns.size(); 
  float * dVol;
  for ( int p=0; p<pnsSize; ++p ) {
    
    // Set internal 1 0r 4 fssShipVol to demandVol
    witGetDemandDemandVol( witRun(), 
      (type1Or4PartPrefix()+pns[p]).c_str(), 
      internalType1Or4DemandName().c_str(), 
      &dVol );
    witSetDemandFssShipVol( witRun(), 
      (type1Or4PartPrefix()+pns[p]).c_str(), 
      internalType1Or4DemandName().c_str(), 
      dVol );
    witFree( dVol );
    
    // Set no src fssShipVol to demandVol
    witGetDemandDemandVol( witRun(), 
      (type1Or4PartPrefix()+pns[p]).c_str(), 
      noSourceDemandName().c_str(), 
      &dVol );
    witSetDemandFssShipVol( witRun(), 
      (type1Or4PartPrefix()+pns[p]).c_str(), 
      noSourceDemandName().c_str(), 
      dVol );
    witFree( dVol );
    
    // Set internal type 1 fssShipVol to demandVol
    witGetDemandDemandVol( witRun(), 
      (type1PartPrefix()+pns[p]).c_str(), 
      internalType1DemandName().c_str(), 
      &dVol );
    witSetDemandFssShipVol( witRun(), 
      (type1PartPrefix()+pns[p]).c_str(), 
      internalType1DemandName().c_str(), 
      dVol );
    witFree( dVol );
    
    // Set internal type 4 fssShipVol to demandVol
    witGetDemandDemandVol( witRun(), 
      (type4PartPrefix()+pns[p]).c_str(), 
      internalType4DemandName().c_str(), 
      &dVol );
    witSetDemandFssShipVol( witRun(), 
      (type4PartPrefix()+pns[p]).c_str(), 
      internalType4DemandName().c_str(), 
      dVol );
    witFree( dVol );
 
    // Set external fssShipVol to demandVol
    witGetDemandDemandVol( witRun(), 
      (typeAfsOr1PartPrefix()+pns[p]).c_str(), 
      externalDemandName().c_str(), 
      &dVol );
    witSetDemandFssShipVol( witRun(), 
      (typeAfsOr1PartPrefix()+pns[p]).c_str(), 
      externalDemandName().c_str(), 
      dVol );
    witFree( dVol );
    
  }
}
void GARSproblem::clearPartForVirtualForecast()
{
  if ( !partForVirtualForecast_ ) return;
  partForVirtualForecast_ = false;
  
  int t,p;
  int np = nPeriods();
  
  float * shipRev = new float[np];
  float * demVol = new float[np];
  float * cumShipLB = new float[np];
  
  // loop over each part
  const std::vector<std::string> & pns = pnNames();
  int pnsSize = pns.size(); 
  for ( p=0; p<pnsSize; ++p ) {
    
    // Set internal 1 0r 4 demand vol
    {
      const std::vector<float> & demVolStl = internalType1Or4DemandVol(pns[p]);
      for( int t=0; t<np; ++t ) demVol[t] = demVolStl[t];
      witSetDemandDemandVol( witRun(), 
        (type1Or4PartPrefix()+pns[p]).c_str(), 
        internalType1Or4DemandName().c_str(), 
        demVol );
      const std::vector<float> & shipRevStl = type1ShipReward(pns[p]);
      for( t=0; t<np; ++t ) shipRev[t] = shipRevStl[t];
      witSetDemandObj1ShipReward( witRun(), 
        (type1Or4PartPrefix()+pns[p]).c_str(), 
        internalType1Or4DemandName().c_str(), 
        shipRev );
    }
    

    // Set No source demand vol   
    {
      const std::vector<float> & demVolStl = noSourceDemandVol(pns[p]);
      for( t=0; t<np; ++t ) demVol[t] = demVolStl[t];
      witSetDemandDemandVol( witRun(), 
        (type1Or4PartPrefix()+pns[p]).c_str(), 
        noSourceDemandName().c_str(), 
        demVol );

      // Lowerbound to ensure shipping to no source demand
      cumShipLB[0] = demVol[0];
      for ( t = 1; t<np; ++t ) {
        cumShipLB[t] = cumShipLB[t-1] + demVol[t];
      }      
      witSetDemandCumShipBounds( witRun(), 
        (type1Or4PartPrefix()+pns[p]).c_str(), noSourceDemandName().c_str(), 
         NULL, cumShipLB, NULL );
    }
    
    // Set internal type 1 demand vol and ship reward  
    {
      const std::vector<float> &demVolStl = internalType1DemandVol(pns[p]);
      for( int t=0; t<np; ++t ) demVol[t] = demVolStl[t];
      witSetDemandDemandVol( witRun(), 
        (type1PartPrefix()+pns[p]).c_str(), 
        internalType1DemandName().c_str(), 
        demVol );
      const std::vector<float> & shipRevStl = type1ShipReward(pns[p]);
      for( t=0; t<np; ++t ) shipRev[t] = shipRevStl[t];
      witSetDemandObj1ShipReward( witRun(), 
        (type1PartPrefix()+pns[p]).c_str(), 
        internalType1DemandName().c_str(), 
        shipRev );
    }
    
    // Set internal type 4 demand vol and ship rev
    {
      const std::vector<float> &demVolStl = internalType4DemandVol(pns[p]);
      for( int t=0; t<np; ++t ) demVol[t] = demVolStl[t];
      witSetDemandDemandVol( witRun(), 
        (type4PartPrefix()+pns[p]).c_str(), 
        internalType4DemandName().c_str(), 
        demVol );
      const std::vector<float> & shipRevStl = type4ShipReward(pns[p]);
      for( t=0; t<np; ++t ) shipRev[t] = shipRevStl[t];
      witSetDemandObj1ShipReward( witRun(), 
        (type4PartPrefix()+pns[p]).c_str(), 
        internalType4DemandName().c_str(), 
        shipRev );
    }
    
    // Set external demand vol and, ship cost
    // and turn on substitute arc.
    {
      const std::vector<float> &demVolStl = externalDemandVol(pns[p]);
      for( int t=0; t<np; ++t ) demVol[t] = demVolStl[t];
      witSetDemandDemandVol( witRun(), 
        (typeAfsOr1PartPrefix()+pns[p]).c_str(), 
        externalDemandName().c_str(), 
        demVol );
      
      const std::vector<float> & shipRevStl = externalShipReward(pns[p]);
      for( t=0; t<np; ++t ) shipRev[t] = shipRevStl[t];
      witSetDemandObj1ShipReward( witRun(), 
        (typeAfsOr1PartPrefix()+pns[p]).c_str(), 
        externalDemandName().c_str(), 
        shipRev ); 
      witSetSubsBomEntryEarliestPeriod ( witRun(), 
        (combineTypeAfsAnd1PartsOpPrefix()+pns[p]).c_str(),0,0,
        0);
    }
    
  }
  delete [] shipRev;
  delete [] demVol;

}
void GARSproblem::setMtmRev()
{ 
  if ( mtmRev_ ) return;
  mtmRev_ = true;
  
  int t,m;
  int np = nPeriods();
  
  float * shipRev = new float[np];
  
  const std::vector<std::string> & mtms = mtmNames();
  int nMtms=mtms.size();
  for ( m=0; m<nMtms; ++m ) {
    
    const std::vector<float> & shipRevStl = mtmSalePrice(mtms[m]);
    for( t=0; t<np; ++t ) shipRev[t] = shipRevStl[t];
    witSetDemandObj1ShipReward( witRun(), 
      mtms[m].c_str(), 
      mtmDemandName().c_str(), 
      shipRev ); 
    
    float * supVol;
    witGetPartSupplyVol( mutableWitRun(), (acquirableMtmPartPrefix()+mtms[m]).c_str(), &supVol );
    witSetDemandDemandVol( witRun(), mtms[m].c_str(), mtmDemandName().c_str(), supVol );
    witFree(supVol);
  }
  delete [] shipRev;
}

void GARSproblem::clearMtmRev()
{ 
  if ( !mtmRev_ ) return;
  mtmRev_ = false;

  int t,m;
  int np = nPeriods();
  
  float * zeroTimeVec = new float[np];
  for ( t=0; t<np; t++ ) {
   zeroTimeVec[t]=0.0f;
  }
    
  const std::vector<std::string> & mtms = mtmNames();
  int nMtms=mtms.size();
  for ( m=0; m<nMtms; ++m ) {
    
    witSetDemandObj1ShipReward( witRun(), 
      mtms[m].c_str(), 
      mtmDemandName().c_str(), 
      zeroTimeVec ); 
    witSetDemandDemandVol( witRun(), 
      mtms[m].c_str(), 
      mtmDemandName().c_str(), 
      zeroTimeVec ); 
  }
  delete [] zeroTimeVec;
}
void GARSproblem::setMtmAcquisitionCost()
{ 
  if ( mtmAcquisitionCost_ ) return;
  mtmAcquisitionCost_ = true;

  int t,m;
  int np = nPeriods();
  
  float * execCost = new float[np];
  
  const std::vector<std::string> & mtms = mtmNames();
  int nMtms=mtms.size();
  for ( m=0; m<nMtms; ++m ) {
    
    const std::vector<float> & execCostStl = mtmNibPrice(mtms[m]);
    for( t=0; t<np; ++t ) execCost[t] = execCostStl[t];
    witSetOperationObj1ExecCost( witRun(), 
      (acquireMtmOpPrefix()+mtms[m]).c_str(), 
      execCost ); 
  }
  delete [] execCost;
}
void GARSproblem::clearMtmAcquisitionCost()
{
  if ( !mtmAcquisitionCost_ ) return;
  mtmAcquisitionCost_ = false;
  int t,m;
  int np = nPeriods();
    
  float * zeroTimeVec = new float[np];
  for ( t=0; t<np; t++ ) {
   zeroTimeVec[t]=0.0f;
  }  
  const std::vector<std::string> & mtms = mtmNames();
  int nMtms=mtms.size();
  for ( m=0; m<nMtms; ++m ) {
    witSetOperationObj1ExecCost( witRun(), 
      (acquireMtmOpPrefix()+mtms[m]).c_str(), 
      zeroTimeVec ); 
  }
  delete [] zeroTimeVec;
}
void GARSproblem::setMtmAcquireAll()
{ 
  if ( mtmAcquireAll_ ) return;
  mtmAcquireAll_ = true;
  int m;
  int np = nPeriods();  
  const std::vector<std::string> & mtms = mtmNames();
  int nMtms=mtms.size();
  for ( m=0; m<nMtms; ++m ) {     
    float * supplyVol;
    witGetPartSupplyVol( witRun(),
      (acquirableMtmPartPrefix()+mtms[m]).c_str(), &supplyVol);
    
    witSetOperationExecBounds( witRun(),
      (acquireMtmOpPrefix()+mtms[m]).c_str(), supplyVol, supplyVol, NULL );
    
    witFree( supplyVol );
  }

}
void GARSproblem::clearMtmAcquireAll()
{
  if ( !mtmAcquireAll_ ) return;
  mtmAcquireAll_ = false;
  int t,m;
  int np = nPeriods();
     
  float * zeroTimeVec = new float[np];
  for ( t=0; t<np; t++ ) {
   zeroTimeVec[t]=0.0f;
  } 

  const std::vector<std::string> & mtms = mtmNames();
  int nMtms=mtms.size();
  for ( m=0; m<nMtms; ++m ) { 
    
    witSetOperationExecBounds( witRun(),
      (acquireMtmOpPrefix()+mtms[m]).c_str(), zeroTimeVec, zeroTimeVec, NULL );
  }
  
  delete [] zeroTimeVec;
}

//---------------
// Get vector of all parts produced from an MTM
std::vector<std::string> GARSproblem::partsProducedFromMtm(std::string mtm) const
{
  std::vector<std::string> retVal;
  int nBops;
  witGetOperationNBopEntries(
    mutableWitRun(),(disassembleMtmOpPrefix()+mtm).c_str(), &nBops);

  for ( int b=0; b<nBops; b++ ) {
    char * producedPartName;    
    witGetBopEntryProducedPart (
      mutableWitRun(),(disassembleMtmOpPrefix()+mtm).c_str(), b, &producedPartName );
    
    int found = strncmp(
      producedPartName,
      type1PartPrefix().c_str(),
      type1PartPrefix().size());
    
    if ( found==0 ){
      
      retVal.push_back(&(producedPartName[type1PartPrefix().size()]));
    }
    witFree(producedPartName);
  }

  return retVal;
}
//-------------

std::vector<std::string> GARSproblem::mtmsProducingPart(const std::string & part) const
{
  std::vector<std::string> retVal;
  int nP = nPeriods();
  std::string partPrefixes[3];
  partPrefixes[0]=type1PartPrefix();
  partPrefixes[1]=type4PartPrefix();
  partPrefixes[2]=typeAfsPartPrefix();

  // loop once for each part prefix
  for ( int pp=0; pp<3; ++pp ) {
    int nProducingBops;
    witGetPartNProducingBopEntries(
      mutableWitRun(),(partPrefixes[pp]+part).c_str(), &nProducingBops);
    
    for ( int b=0; b<nProducingBops; b++ ) {
      char * producingOperationName; 
      int bopEntryIndex;
      witGetPartProducingBopEntry (
        mutableWitRun(),(partPrefixes[pp]+part).c_str(), b, 
        &producingOperationName, &bopEntryIndex );
           
      // Check for non zero productRate (yield)
      float * prodRate;
      bool nonZeroYield=false;
      witGetBopEntryProductRate( mutableWitRun(), producingOperationName, bopEntryIndex, &prodRate);
      for (int t=0; t<nP; ++t) {
        if ( prodRate[t]>0.0 ) {
          nonZeroYield=true;
          break;
        }
      }
      witFree(prodRate);
      
      
      if ( nonZeroYield ) {
        retVal.push_back(&(producingOperationName[disassembleMtmOpPrefix().size()]));
        witFree(producingOperationName);
        continue;
      }
      witFree(producingOperationName);
    }
  }
  
  return retVal;
}


//-------------
#if 0
const std::vector<std::string> & GARSproblem::partNames() const 
{
  return pnNames_;
}
const std::vector<std::string> & GARSproblem::machineTypeModelNames() const 
{
  return mtmNames_;
}
#endif
//--------------------
float  GARSproblem::objectiveFunctionValue() const
{
  float retVal,boundsVal;
  witGetObjValues( mutableWitRun(), &retVal, &boundsVal );
  return retVal;
}
float  GARSproblem::boundObjectiveFunctionValue() const
{
  float retVal,boundsVal;
  witGetObjValues( mutableWitRun(), &retVal, &boundsVal );
  return boundsVal;
}

std::vector<float> GARSproblem::type1Rev( const std::string & pn ) const
{
  float * shipReward;
  witGetDemandObj1ShipReward( mutableWitRun(), 
    (type1PartPrefix()+pn).c_str(), internalType1DemandName().c_str(),&shipReward );
  std::vector<float> retVal = witFloatStarToStlVec(shipReward);
  witFree(shipReward);
  return retVal;
}
std::vector<float> GARSproblem::type4Rev( const std::string & pn ) const
{
  float * shipReward;
  witGetDemandObj1ShipReward( mutableWitRun(), 
    (type4PartPrefix()+pn).c_str(), internalType4DemandName().c_str(),&shipReward );
  std::vector<float> retVal = witFloatStarToStlVec(shipReward);
  witFree(shipReward);
  return retVal;
}
std::vector<float> GARSproblem::externalRev( const std::string & pn ) const
{
  float * shipReward;
  witGetDemandObj1ShipReward( mutableWitRun(), 
    (typeAfsOr1PartPrefix()+pn).c_str(), externalDemandName().c_str(),&shipReward );
  std::vector<float> retVal = witFloatStarToStlVec(shipReward);
  witFree(shipReward);
  return retVal;
}

std::vector<float> GARSproblem::internalType1Coverage( const std::string & pn ) const
{
  float * shipVol;
  witGetDemandShipVol( mutableWitRun(), 
    (type1PartPrefix()+pn).c_str(), internalType1DemandName().c_str(),&shipVol );
  std::vector<float> retVal = witFloatStarToStlVec(shipVol);
  witFree(shipVol);
  return retVal;
}
std::vector<float> GARSproblem::internalType4Coverage( const std::string & pn ) const
{
  float * shipVol;
  witGetDemandShipVol( mutableWitRun(), 
    (type4PartPrefix()+pn).c_str(), internalType4DemandName().c_str(),&shipVol );
  std::vector<float> retVal = witFloatStarToStlVec(shipVol);
  witFree(shipVol);
  return retVal;
}
std::vector<float> GARSproblem::internalType1Or4Coverage( const std::string & pn ) const
{
  float * shipVol;
  witGetDemandShipVol( mutableWitRun(), 
    (type1Or4PartPrefix()+pn).c_str(), internalType1Or4DemandName().c_str(),&shipVol );
  std::vector<float> retVal = witFloatStarToStlVec(shipVol);
  witFree(shipVol);
  return retVal;
}
std::vector<float> GARSproblem::externalCoverage( const std::string & pn ) const
{
  float * shipVol;
  witGetDemandShipVol( mutableWitRun(), 
    (typeAfsOr1PartPrefix()+pn).c_str(), externalDemandName().c_str(),&shipVol );
  std::vector<float> retVal = witFloatStarToStlVec(shipVol);
  witFree(shipVol);
  return retVal;
}
std::vector<float> GARSproblem::noSourceCoverage( const std::string & pn ) const
{
  float * shipVol;
  witGetDemandShipVol( mutableWitRun(), 
    (type1Or4PartPrefix()+pn).c_str(), noSourceDemandName().c_str(),&shipVol );
  std::vector<float> retVal = witFloatStarToStlVec(shipVol);
  witFree(shipVol);
  return retVal;
}
//----------------------
std::vector<float>  GARSproblem::internalType1DemandQuantity( const std::string & pn ) const
{
  float * demVol;
  witGetDemandDemandVol( mutableWitRun(), 
    (type1PartPrefix()+pn).c_str(), internalType1DemandName().c_str(),&demVol );
  std::vector<float> retVal = witFloatStarToStlVec(demVol);
  witFree(demVol);
  return retVal;
}
std::vector<float>  GARSproblem::internalType4DemandQuantity( const std::string & pn ) const
{
  float * demVol;
  witGetDemandDemandVol( mutableWitRun(), 
    (type4PartPrefix()+pn).c_str(), internalType4DemandName().c_str(),&demVol );
  std::vector<float> retVal = witFloatStarToStlVec(demVol);
  witFree(demVol);
  return retVal;
}
std::vector<float>  GARSproblem::internalType1Or4DemandQuantity( const std::string & pn ) const
{
  float * demVol;
  witGetDemandDemandVol( mutableWitRun(), 
    (type1Or4PartPrefix()+pn).c_str(), internalType1Or4DemandName().c_str(),&demVol );
  std::vector<float> retVal = witFloatStarToStlVec(demVol);
  witFree(demVol);
  return retVal;
}
std::vector<float>  GARSproblem::externalDemandQuantity( const std::string & pn ) const
{
  float * demVol;
  witGetDemandDemandVol( mutableWitRun(), 
    (typeAfsOr1PartPrefix()+pn).c_str(), externalDemandName().c_str(),&demVol );
  std::vector<float> retVal = witFloatStarToStlVec(demVol);
  witFree(demVol);
  return retVal;
}
std::vector<float>  GARSproblem::noSourceDemandQuantity( const std::string & pn ) const
{
  float * demVol;
  witGetDemandDemandVol( mutableWitRun(), 
    (type1Or4PartPrefix()+pn).c_str(), noSourceDemandName().c_str(),&demVol );
  std::vector<float> retVal = witFloatStarToStlVec(demVol);
  witFree(demVol);
  return retVal;
}

//---------------------------

std::vector<float>  GARSproblem::type4SubstitutingForType1Vol( const std::string & pn ) const
{
  float * subVol;
  witGetSubsBomEntrySubVol( mutableWitRun(), 
     (combineType1And4PartsOpPrefix()+pn).c_str(), 0, 0,
     &subVol );
  std::vector<float> retVal = witFloatStarToStlVec(subVol);
  witFree(subVol);
  return retVal;
}
std::vector<float> GARSproblem::type1SubstitutingForTypeAfsVol( const std::string & pn ) const
{
  float * subVol;
  witGetSubsBomEntrySubVol( mutableWitRun(), 
     (combineTypeAfsAnd1PartsOpPrefix()+pn).c_str(), 0, 0,
     &subVol );
  std::vector<float> retVal = witFloatStarToStlVec(subVol);
  witFree(subVol);
  return retVal;

}

std::vector<float> GARSproblem::type4SubstitutingForType1Cost( const std::string & pn ) const
{
  float * subCost;
  witGetSubsBomEntryObj1SubCost( mutableWitRun(), 
     (combineType1And4PartsOpPrefix()+pn).c_str(), 0, 0,
     &subCost );
  std::vector<float> retVal = witFloatStarToStlVec(subCost);
  witFree(subCost);
  return retVal;

}
std::vector<float> GARSproblem::type1SubstitutingForTypeAfsCost( const std::string & pn ) const
{
  float * subCost;
  witGetSubsBomEntryObj1SubCost( mutableWitRun(), 
     (combineTypeAfsAnd1PartsOpPrefix()+pn).c_str(), 0, 0,
     &subCost );
  std::vector<float> retVal = witFloatStarToStlVec(subCost);
  witFree(subCost);
  return retVal;

}

std::vector<float> GARSproblem::stockVolType1( const std::string & pn ) const
{
  float * stockVol;
  witGetPartStockVol( mutableWitRun(), (type1PartPrefix()+pn).c_str(), &stockVol );
  std::vector<float> retVal = witFloatStarToStlVec(stockVol);
  witFree(stockVol);
  return retVal;
}

std::vector<float> GARSproblem::stockVolType4( const std::string & pn ) const
{
  float * stockVol;
  witGetPartStockVol( mutableWitRun(), (type4PartPrefix()+pn).c_str(), &stockVol );
  std::vector<float> retVal = witFloatStarToStlVec(stockVol);
  witFree(stockVol);
  return retVal;
}
std::vector<float> GARSproblem::stockVolTypeAfs( const std::string & pn ) const
{
  float * stockVol;
  witGetPartStockVol( mutableWitRun(), (typeAfsPartPrefix()+pn).c_str(), &stockVol );
  std::vector<float> retVal = witFloatStarToStlVec(stockVol);
  witFree(stockVol);
  return retVal;
}
std::vector<float> GARSproblem::stockVolType1Or4( const std::string & pn ) const
{
  float * stockVol;
  witGetPartStockVol( mutableWitRun(), (type1Or4PartPrefix()+pn).c_str(), &stockVol );
  std::vector<float> retVal = witFloatStarToStlVec(stockVol);
  witFree(stockVol);
  return retVal;
}
std::vector<float> GARSproblem::stockVolTypeAfsOr1( const std::string & pn ) const
{
  float * stockVol;
  witGetPartStockVol( mutableWitRun(), (typeAfsOr1PartPrefix()+pn).c_str(), &stockVol );
  std::vector<float> retVal = witFloatStarToStlVec(stockVol);
  witFree(stockVol);
  return retVal;
}


// Get production volumen for a particular part from specified mtm 
std::vector<float> GARSproblem::productionVol( 
    const std::string & mtm, 
    const std::string & pn,
    const std::string & partTypePrefix  ) const
{
    
  std::vector<float> retVal;
  int nBops;
  witGetOperationNBopEntries(
    mutableWitRun(),(disassembleMtmOpPrefix()+mtm).c_str(), &nBops);

  for ( int b=0; b<nBops; b++ ) {
    char * producedPartName;    
    witGetBopEntryProducedPart (
      mutableWitRun(),(disassembleMtmOpPrefix()+mtm).c_str(), b, &producedPartName );
    if ( partTypePrefix+pn == producedPartName ) {

      // Found the bop that matches mtm and pn
      std::vector<float> mdq = mtmDismantleQuantity(mtm);

      float * prodRate;
      witGetBopEntryProductRate( 
        mutableWitRun(),(disassembleMtmOpPrefix()+mtm).c_str(), b,
        &prodRate );

      float * offset;
      witGetBopEntryOffset( 
        mutableWitRun(),(disassembleMtmOpPrefix()+mtm).c_str(), b,
        &offset );

      float * opYield;
      witGetOperationYieldRate(
        mutableWitRun(),(disassembleMtmOpPrefix()+mtm).c_str(), 
        &opYield );

      for ( int t=0; t<mdq.size(); t++ ) {

        assert( offset[t] == 0.0 );
        assert( opYield[t] == 1.0 );

        float prodQty = prodRate[t]*mdq[t];
        retVal.push_back(prodQty);
      }

      witFree(opYield);
      witFree(offset);
      witFree(prodRate);

    }
    witFree(producedPartName);
  }

  return retVal;

}
//-----------
std::vector<float> GARSproblem::productionVolType1( 
                const std::string & mtm, 
                const std::string & pn ) const
{
  return productionVol(mtm,pn,type1PartPrefix());
}

//-----------
std::vector<float> GARSproblem::productionVolType4( 
                const std::string & mtm, 
                const std::string & pn ) const
{
  return productionVol(mtm,pn,type4PartPrefix());
}


//-----------
std::vector<float> GARSproblem::productionVolTypeAfs( 
                const std::string & mtm, 
                const std::string & pn ) const
{
  return productionVol(mtm,pn,typeAfsPartPrefix());
}

//-----------
std::vector<float>  GARSproblem::mtmAcquireExecCost( const std::string & mtm ) const
{
  float * execCost;
  witGetOperationObj1ExecCost( mutableWitRun(), (acquireMtmOpPrefix()+mtm).c_str(), &execCost );
  std::vector<float> retVal = witFloatStarToStlVec(execCost);
  witFree(execCost);
  return retVal;
}

std::vector<float>  GARSproblem::mtmAcquireQuantity( const std::string & mtm ) const
{
  float * execVol;
  witGetOperationExecVol( mutableWitRun(), (acquireMtmOpPrefix()+mtm).c_str(), &execVol );
  std::vector<float> retVal = witFloatStarToStlVec(execVol);
  witFree(execVol);
  return retVal;
}

std::vector<float>  GARSproblem::mtmDismantleQuantity( const std::string & mtm ) const
{
  float * execVol;
  witGetOperationExecVol( mutableWitRun(), (disassembleMtmOpPrefix()+mtm).c_str(), &execVol );
  std::vector<float> retVal = witFloatStarToStlVec(execVol);
  witFree(execVol);
  return retVal;
}

std::vector<float>  GARSproblem::mtmSellWholeQuantity( const std::string & mtm ) const
{
  float * demVol;
  witGetDemandShipVol( mutableWitRun(), mtm.c_str(), mtmDemandName().c_str(), &demVol );
  std::vector<float> retVal = witFloatStarToStlVec(demVol);
  witFree(demVol);
  return retVal;
}
//----------Underconstruction, Remove when finished
std::vector<float> GARSproblem::mtmAdditionalRequiredToMeetAllDemand( const std::string & mtm ) const
{
  float * additionalVol;
  witGetPartFocusShortageVol( mutableWitRun(), (acquirableMtmPartPrefix()+mtm).c_str(), &additionalVol );
  std::vector<float> retVal = witFloatStarToStlVec(additionalVol);
  witFree(additionalVol);
  return retVal;
}
const std::vector<float> &  GARSproblem::internalType1DemandVol( const std::string & pn ) const
{
  const GARSdemandAppData * dad;
  witGetDemandAppData( mutableWitRun(), 
    (type1PartPrefix()+pn).c_str(), internalType1DemandName().c_str(), (void**)&dad );
  const std::vector<float> & retVal = dad->demQty();
  return retVal;
}
const std::vector<float> &  GARSproblem::internalType4DemandVol( const std::string & pn ) const
{
  const GARSdemandAppData * dad;
  witGetDemandAppData( mutableWitRun(), 
    (type4PartPrefix()+pn).c_str(), internalType4DemandName().c_str(), (void**)&dad );
  const std::vector<float> & retVal = dad->demQty();
  return retVal;
}
const std::vector<float> &  GARSproblem::internalType1Or4DemandVol( const std::string & pn ) const
{
  const GARSdemandAppData * dad;
  witGetDemandAppData( mutableWitRun(), 
    (type1Or4PartPrefix()+pn).c_str(), internalType1Or4DemandName().c_str(), (void**)&dad );
  const std::vector<float> & retVal = dad->demQty();
  return retVal;
}
const std::vector<float> &  GARSproblem::externalDemandVol( const std::string & pn ) const
{
  const GARSdemandAppData * dad;
  witGetDemandAppData( mutableWitRun(), 
    (typeAfsOr1PartPrefix()+pn).c_str(), externalDemandName().c_str(), (void**)&dad );
  const std::vector<float> & retVal = dad->demQty();
  return retVal;
}
const std::vector<float> &  GARSproblem::noSourceDemandVol( const std::string & pn ) const
{
  const GARSdemandAppData * dad;
  witGetDemandAppData( mutableWitRun(), 
    (type1Or4PartPrefix()+pn).c_str(), noSourceDemandName().c_str(), (void**)&dad );
  const std::vector<float> & retVal = dad->demQty();
  return retVal;
}


std::vector<float> GARSproblem::mtmSalePrice( const std::string & mtm ) const
{
  const GARSmtmAppData * mad;
  witGetPartAppData( mutableWitRun(), mtm.c_str(), (void**)&mad );
  double msp = mad->mtmSalePrice();

  int np = nPeriods();
  float * mspVec = new float[nPeriods()];
  timeValueOfMoney(np,msp,mspVec);

  std::vector<float> retVal;
  for( int i=0; i<np; i++ )
    retVal.push_back(mspVec[i]);
  
  delete mspVec;
  return retVal;
}

std::vector<float> GARSproblem::mtmNibPrice( const std::string & mtm ) const
{
  const GARSmtmAppData * mad;
  witGetPartAppData( mutableWitRun(), mtm.c_str(), (void**)&mad );
  double mnp = mad->mtmNibPrice();

  int np = nPeriods();
  float * mnpVec = new float[nPeriods()];
  timeValueOfMoney(np,mnp,mnpVec);

  std::vector<float> retVal;
  for( int i=0; i<np; i++ )
    retVal.push_back(mnpVec[i]);
  
  delete mnpVec;
  return retVal;
}

std::vector<float> GARSproblem::mtmSupplyQuantity( const std::string & mtm ) const
{
  std::vector<float> retVal;
  float * sv;
  witGetPartSupplyVol( mutableWitRun(), (acquirableMtmPartPrefix()+mtm).c_str(), &sv );
  int nP = nPeriods();
  for ( int t=0; t<nP; ++t ) {
    retVal.push_back(sv[t]);
  }
  witFree(sv);
  return retVal;
}

std::vector<float> GARSproblem::loosePartQuantityType1( const std::string & pn ) const
{
  std::vector<float> retVal;
  float * sv;
  witGetPartSupplyVol( mutableWitRun(), (type1PartPrefix()+pn).c_str(), &sv );
  int nP = nPeriods();
  for ( int t=0; t<nP; ++t ) {
    retVal.push_back(sv[t]);
  }
  witFree(sv);
  return retVal;
}
std::vector<float> GARSproblem::loosePartQuantityType4( const std::string & pn ) const
{
  std::vector<float> retVal;
  float * sv;
  witGetPartSupplyVol( mutableWitRun(), (type4PartPrefix()+pn).c_str(), &sv );
  int nP = nPeriods();
  for ( int t=0; t<nP; ++t ) {
    retVal.push_back(sv[t]);
  }
  witFree(sv);
  return retVal;
}
std::vector<float> GARSproblem::loosePartQuantityTypeAfs( const std::string & pn ) const
{
  std::vector<float> retVal;
  float * sv;
  witGetPartSupplyVol( mutableWitRun(), (typeAfsPartPrefix()+pn).c_str(), &sv );
  int nP = nPeriods();
  for ( int t=0; t<nP; ++t ) {
    retVal.push_back(sv[t]);
  }
  witFree(sv);
  return retVal;
}

int GARSproblem::nPeriods() const
{
  int retVal;
  witGetNPeriods( mutableWitRun(), &retVal );
  return retVal;
}

double GARSproblem::internalType1DemandCostFactor() const
{
  return intType1DemCostFac_;
}
void GARSproblem::internalType1DemandCostFactor(double cf) 
{
  intType1DemCostFac_=cf;
}

double GARSproblem::internalType4DemandCostFactor() const
{
  return intType4DemCostFac_;
}
void GARSproblem::internalType4DemandCostFactor(double cf) 
{
  intType4DemCostFac_=cf;
}

double GARSproblem::externalDemandCostFactor() const
{
  return extDemCostFac_;
}
void GARSproblem::externalDemandCostFactor(double cf) 
{
  extDemCostFac_=cf;
}

double GARSproblem::discountRate() const
{
  return discountRate_;
}
double GARSproblem::periodsPerYear() const
{
  return periodsPerYear_;
}
// Return true if demand exist
bool GARSproblem::demandExists(const std::string & pn, const std::string & dn )const
{
  bool retVal = false;
  
  witBoolean partExists;
  witGetPartExists( mutableWitRun(), pn.c_str(), &partExists );
  if ( !partExists ) return retVal;   
  
  int nPartDemands;
  char ** demandList;
  witGetPartDemands( mutableWitRun(), pn.c_str(), &nPartDemands, &demandList);
  for ( int d=0; d<nPartDemands; ++d ) {
    if ( demandList[d] == dn ) {
      retVal = true;
    }    
    witFree(demandList[d]);
  }
  witFree(demandList);
  return retVal;
}



std::vector<float> GARSproblem::type1ShipReward(const  std::string &  pn ) const
{
  std::map<std::string, PnData>::const_iterator it = pnData_.find(pn);
  assert( it != pnData_.end() );
  const PnData & pnd = (*it).second;
  double t1r = pnd.type1Rev();

  int np = nPeriods();
  float * t1rVec = new float[nPeriods()];
  timeValueOfMoney(np,t1r*internalType1DemandCostFactor(),t1rVec);

  std::vector<float> retVal;
  for( int i=0; i<np; i++ )
    retVal.push_back(t1rVec[i]);
  
  delete t1rVec;
  return retVal;
}
void GARSproblem::type1Rev( const std::string & pn, double rev )
{
  std::map<std::string, PnData>::iterator it = pnData_.find(pn);
  assert( it != pnData_.end() );
  PnData & pnd = (*it).second;
  pnd.type1Rev(rev);
}
std::vector<float> GARSproblem::type4ShipReward(const std::string & pn ) const
{
  std::map<std::string, PnData>::const_iterator it = pnData_.find(pn);
  assert( it != pnData_.end() );
  const PnData & pnd = (*it).second;
  double t4r = pnd.type4Rev();

  int np = nPeriods();
  float * t4rVec = new float[nPeriods()];
  timeValueOfMoney(np,t4r*internalType4DemandCostFactor(),t4rVec);

  std::vector<float> retVal;
  for( int i=0; i<np; i++ )
    retVal.push_back(t4rVec[i]);
  
  delete t4rVec;
  return retVal;
}
void GARSproblem::type4Rev( const std::string & pn, double rev )
{
  std::map<std::string, PnData>::iterator it = pnData_.find(pn);
  assert( it != pnData_.end() );
  PnData & pnd = (*it).second;
  pnd.type4Rev(rev);
}

std::vector<float> GARSproblem::externalShipReward( const std::string & pn ) const
{
  std::map<std::string, PnData>::const_iterator it = pnData_.find(pn);
  assert( it != pnData_.end() );
  const PnData & pnd = (*it).second;
  double er = pnd.externalRev();

  int np = nPeriods();
  float * erVec = new float[nPeriods()];
  timeValueOfMoney(np,er*externalDemandCostFactor(),erVec);

  std::vector<float> retVal;
  for( int i=0; i<np; i++ )
    retVal.push_back(erVec[i]);
  
  delete erVec;
  return retVal;
}
void GARSproblem::externalRev( const std::string & pn, double rev )
{
  std::map<std::string, PnData>::iterator it = pnData_.find(pn);
  assert( it != pnData_.end() );
  PnData & pnd = (*it).second;
  pnd.externalRev(rev);
}

void GARSproblem::timeValueOfMoney( int np, float amountTime0, float *& resultVec ) const
{
  resultVec[0]=amountTime0;
  for ( int i=1; i<np; ++i ) {
    resultVec[i] = resultVec[i-1] * (1.f-discountRate()/periodsPerYear());
  }
}

void GARSproblem::addMtm( std::string mtm)
{
  witBoolean exist;
  witGetPartExists( mutableWitRun(), mtm.c_str(), &exist );
  assert( !exist );

  // Tell WIT about MTM
  witAddPart( witRun(), mtm.c_str(), WitMATERIAL );
  
  // Add mtm App Data
  GARSmtmAppData * mad = new GARSmtmAppData;
  witSetPartAppData( witRun(), mtm.c_str(), (void *) mad );
  
  // Save mtm part names
  mtmNames_.push_back(mtm);
  
  // Add disassmbly operation and connect to machine
  witAddOperation( witRun(), (disassembleMtmOpPrefix()+mtm).c_str() );
  witAddBomEntry(  witRun(), (disassembleMtmOpPrefix()+mtm).c_str(), mtm.c_str() ); 
  
  // Add add acquistion operation
  witAddOperation( witRun(), (acquireMtmOpPrefix()+mtm).c_str() );
  witAddBopEntry(  witRun(), (acquireMtmOpPrefix()+mtm).c_str(), mtm.c_str() ); 
  
  // Add add acquirable mtm parts
  witAddPart( witRun(), (acquirableMtmPartPrefix()+mtm).c_str(), WitMATERIAL );
  witAddBomEntry(  witRun(), 
    (acquireMtmOpPrefix()+mtm).c_str(), 
    (acquirableMtmPartPrefix()+mtm).c_str() );
  
  // Add demand for MTM equal to the supply
  witAddDemand( witRun(), mtm.c_str(), mtmDemandName().c_str() );
  
  // Add Demand App Data
  GARSdemandAppData * dad = new GARSdemandAppData(nPeriods());
  witSetDemandAppData( witRun(), mtm.c_str(), mtmDemandName().c_str(), (void *) dad );
}

void GARSproblem::setMtmSupply( std::string mtm, float sv[12] )
{
  witBoolean exist;
  witGetPartExists( mutableWitRun(), (acquirableMtmPartPrefix()+mtm).c_str(), &exist );
  assert( exist );
  witSetPartSupplyVol( witRun(), (acquirableMtmPartPrefix()+mtm).c_str(), sv );
}

void GARSproblem::setMtmNibPrice( std::string mtm, float nibPrice )
{
  witBoolean exist;
  witGetPartExists( mutableWitRun(), mtm.c_str(), &exist );
  assert( exist );
  
  GARSmtmAppData * mad;
  witGetPartAppData(witRun(), mtm.c_str(), (void**)&mad );
  assert( mad != NULL );
  mad->mtmNibPrice(nibPrice);
  
}
void GARSproblem::setMtmSellPrice( std::string mtm, float sellPrice )
{
  witBoolean exist;
  witGetPartExists( mutableWitRun(), mtm.c_str(), &exist );
  assert( exist );
  
  GARSmtmAppData * mad;
  witGetPartAppData(witRun(), mtm.c_str(), (void**)&mad );
  assert( mad != NULL );
  mad->mtmSalePrice(sellPrice);
  
}

void GARSproblem::readFiles(int nPeriods, std::string directory)
{
  
  std::string inputDirectory=directory;
  
  std::string demandFileName = inputDirectory + "/demand";
  std::string supplyFileName = inputDirectory + "/supply";
  std::string mtmFileName = inputDirectory + "/mtm";
  std::string bomFileName = inputDirectory + "/bom";
  std::string loosepFileName = inputDirectory + "/loosep";
  std::string partRevenueFileName = inputDirectory + "/PN_rev";
  
  // Initialize Wit
  {    
    std::string title = "ESO: " + inputDirectory;
    witSetTitle( witRun(), title.c_str() );
    witSetNPeriods( witRun(), nPeriods );
    witSetObjChoice( witRun(), 1 );
    witSetUseFocusHorizons( witRun(), WitFALSE );
  }
  
  // read supply file
  {
    GARSsupplyFile supplyFile(supplyFileName);
    GARSsupplyFileIterator supplyFileIter(supplyFile);
    
    // Read each record of supply file
    for ( ; supplyFileIter()!=NULL; ) {
      
      // Create mtm name
      std::string type = supplyFileIter.type();
      std::string model = supplyFileIter.model();
      std::string mtm = type + model;

      addMtm( mtm );

      float sv[12];
      sv[ 0] = supplyFileIter.mo0AsFloat();
      sv[ 1] = supplyFileIter.mo1AsFloat();
      sv[ 2] = supplyFileIter.mo2AsFloat();
      sv[ 3] = supplyFileIter.mo3AsFloat();
      sv[ 4] = supplyFileIter.mo4AsFloat();
      sv[ 5] = supplyFileIter.mo5AsFloat();
      sv[ 6] = supplyFileIter.mo6AsFloat();
      sv[ 7] = supplyFileIter.mo7AsFloat();
      sv[ 8] = supplyFileIter.mo8AsFloat();
      sv[ 9] = supplyFileIter.mo9AsFloat();
      sv[10] = supplyFileIter.mo10AsFloat();
      sv[11] = supplyFileIter.mo11AsFloat();
      setMtmSupply( mtm, sv );
      
    }
  }
  
  
  // read mtmsale file
  {
    GARSmtmFile mtmFile(mtmFileName);
    GARSmtmFileIterator mtmFileIter(mtmFile);
    
    // Read each record of mtmsale file
    for ( ; mtmFileIter()!=NULL; ) {
      
      // Create mtm name
      std::string mtm = mtmFileIter.type()+mtmFileIter.model();
      
      // If the demand does not exist then there isn't any supply for it
      if ( !demandExists( mtm.c_str(), mtmDemandName().c_str() ) ) {        
        cout 
          <<"-------------------------------------------------------"  <<endl
          <<"Warning: mtm file contains an MTM that is  not defined "  <<endl
          <<"   in the supply file."                                   <<endl
          <<"   mtm filename: " <<mtmFile.filename().c_str()           <<endl
          <<"   line number: " <<mtmFileIter.recNum()                  <<endl
          <<"   type: " <<mtmFileIter.type().c_str()                   <<endl
          <<"   model: " <<mtmFileIter.model().c_str()                 <<endl
          <<"   mtm: " <<mtm.c_str()                                   <<endl
          <<"   supply filename: " <<supplyFileName.c_str()            <<endl
          <<"   Input record is being ignored"                         <<endl
          <<"-------------------------------------------------------"  <<endl;
        continue;
      }

      double mtmNibPrice = mtmFileIter.mtmNibPriceAsFloat();
      setMtmNibPrice(mtm,mtmNibPrice);
      double mtmRevenueFromSale = mtmFileIter.mtmSalePriceAsFloat();
      setMtmSellPrice(mtm,mtmRevenueFromSale);
            
    }
    
  }
  
  // Check to insure that MTM's in the supply file also appear in the MTM file
  {
    const std::vector<std::string> & mtms = mtmNames();
    int numMtms = mtms.size();
    for ( int m=0; m<numMtms; ++m ) {
      float salePrice = mtmSalePrice(mtms[m])[0];
      if ( salePrice == 0 ) {        
        cout 
          <<"-------------------------------------------------------"  <<endl
          <<"Warning: An MTM has a sale price of 0.0"                  <<endl
          <<"   mtm filename: " <<mtmFileName.c_str()                  <<endl
          <<"   mtm: " <<mtms[m].c_str()                               <<endl
          <<"   supply filename: " <<supplyFileName.c_str()            <<endl
          <<"-------------------------------------------------------"  <<endl;
      }
      float nibPrice = mtmNibPrice(mtms[m])[0];
      if ( nibPrice == 0 ) {        
        cout 
          <<"-------------------------------------------------------"  <<endl
          <<"Warning: An MTM has a nib price of 0.0"                   <<endl
          <<"   mtm filename: " <<mtmFileName.c_str()                  <<endl
          <<"   mtm: " <<mtms[m].c_str()                               <<endl
          <<"   supply filename: " <<supplyFileName.c_str()            <<endl
          <<"-------------------------------------------------------"  <<endl;
      }
    }
  }
  

  // read demand file
  {
    GARSdemandFile demandFile(demandFileName);
    GARSdemandFileIterator demandFileIter(demandFile);
    GARSloosepFile loosepFile(loosepFileName);
    
    // Read each record of demand file
    for ( ; demandFileIter()!=NULL; ) {
      
      // Get partname
      std::string pn = demandFileIter.partName();
      
      // if wit does not know about this part and its
      // assoicated objects, then create them
      witBoolean partExists;
      witGetPartExists( witRun(), (type1PartPrefix()+pn).c_str(), &partExists );
      if ( !partExists ) {

        // for each record in the demand file there are 5 parts.
        // Create them now
        {
          witAddPart( witRun(), (type1PartPrefix()+pn).c_str(), WitMATERIAL );
          witAddPart( witRun(), (type4PartPrefix()+pn).c_str(), WitMATERIAL );
          witAddPart( witRun(), (typeAfsPartPrefix()+pn).c_str(), WitMATERIAL );
          witAddPart( witRun(), (type1Or4PartPrefix()+pn).c_str(), WitMATERIAL );
          witAddPart( witRun(), (typeAfsOr1PartPrefix()+pn).c_str(), WitMATERIAL );
        }
        
        // Add operation for creating a type 1 or 4 part, along with bop, bom, & subBom
        {
          witAddOperation( witRun(), (combineType1And4PartsOpPrefix()+pn).c_str() );
          //GARScombinePartsOpAppData * oad = new GARScombinePartsOpAppData(nPeriods);
          //witSetOperationAppData( witRun(), (combineType1And4PartsOpPrefix()+pn).c_str(), (void *) oad );
          witAddBopEntry( witRun(), 
            (combineType1And4PartsOpPrefix()+pn).c_str(),
            (type1Or4PartPrefix()+pn).c_str() );
          witAddBomEntry( witRun(), 
            (combineType1And4PartsOpPrefix()+pn).c_str(),
            (type1PartPrefix()+pn).c_str() );
          witAddSubsBomEntry( witRun(), 
            (combineType1And4PartsOpPrefix()+pn).c_str(),
            0,
            (type4PartPrefix()+pn).c_str() );
        }        
        // Add operation for creating a type Afs or 1 part, along with bop, bom, & subBom
        {
          witAddOperation( witRun(), (combineTypeAfsAnd1PartsOpPrefix()+pn).c_str() );
          //GARScombinePartsOpAppData * oad = new GARScombinePartsOpAppData(nPeriods);
          //witSetOperationAppData( witRun(), (combineTypeAfsAnd1PartsOpPrefix()+pn).c_str(), (void *) oad );
          witAddBopEntry( witRun(), 
            (combineTypeAfsAnd1PartsOpPrefix()+pn).c_str(),
            (typeAfsOr1PartPrefix()+pn).c_str() );
          witAddBomEntry( witRun(), 
            (combineTypeAfsAnd1PartsOpPrefix()+pn).c_str(),
            (typeAfsPartPrefix()+pn).c_str() );
          witAddSubsBomEntry( witRun(), 
            (combineTypeAfsAnd1PartsOpPrefix()+pn).c_str(),
            0,
            (type1PartPrefix()+pn).c_str() );
        }

        // Demands on part
        witAddDemand( witRun(), (type1PartPrefix()+pn).c_str(),      internalType1DemandName().c_str() );
        witAddDemand( witRun(), (type4PartPrefix()+pn).c_str(),      internalType4DemandName().c_str() );
        witAddDemand( witRun(), (type1Or4PartPrefix()+pn).c_str(),   internalType1Or4DemandName().c_str() );
        witAddDemand( witRun(), (typeAfsOr1PartPrefix()+pn).c_str(), externalDemandName().c_str() );
        witAddDemand( witRun(), (type1Or4PartPrefix()+pn).c_str(),   noSourceDemandName().c_str() );
        
        // Add Demand App Data
        GARSdemandAppData * dad;
        dad = new GARSdemandAppData(nPeriods);
        witSetDemandAppData( witRun(), (type1PartPrefix()+pn).c_str(),      internalType1DemandName().c_str(), (void *) dad );
        dad = new GARSdemandAppData(nPeriods);
        witSetDemandAppData( witRun(), (type4PartPrefix()+pn).c_str(),      internalType4DemandName().c_str(), (void *) dad );
        dad = new GARSdemandAppData(nPeriods);
        witSetDemandAppData( witRun(), (type1Or4PartPrefix()+pn).c_str(),   internalType1Or4DemandName().c_str(), (void *) dad );
        dad = new GARSdemandAppData(nPeriods);
        witSetDemandAppData( witRun(), (typeAfsOr1PartPrefix()+pn).c_str(), externalDemandName().c_str(), (void *) dad );
        dad = new GARSdemandAppData(nPeriods);
        witSetDemandAppData( witRun(), (type1Or4PartPrefix()+pn).c_str(),   noSourceDemandName().c_str(), (void *) dad );
        
        // Save demanded part names and initialize map
        // which will contain Gars partname data
        {
          pnNames_.push_back(pn);
          PnData pnData;
          std::pair<std::map<std::string, PnData>::iterator, bool> 
            retVal =pnData_.insert (
            std::map<std::string, PnData>::value_type(pn,pnData) );
          // make sure part pn was not already in the map
          assert( retVal.second );
        }

        
        // Now add initial inventory (loose part inventory)
        if ( loosepFile.keyExists(pn) ) {
          float *sv;
          {
            witGetPartSupplyVol( witRun(), (type1PartPrefix()+pn).c_str(), &sv );
            sv[0] = loosepFile.quantity1AsFloat(pn);
            witSetPartSupplyVol( witRun(), (type1PartPrefix()+pn).c_str(), sv );
            witFree(sv);
          }
          {
            witGetPartSupplyVol( witRun(), (type4PartPrefix()+pn).c_str(), &sv );
            sv[0] = loosepFile.quantity4AsFloat(pn);
            witSetPartSupplyVol( witRun(), (type4PartPrefix()+pn).c_str(), sv );
            witFree(sv);
          }
          {
            witGetPartSupplyVol( witRun(), (typeAfsPartPrefix()+pn).c_str(), &sv );
            sv[0] = loosepFile.quantityAfsAsFloat(pn);
            witSetPartSupplyVol( witRun(), (typeAfsPartPrefix()+pn).c_str(), sv );
            witFree(sv);
          }
        }
        else {
          cout 
            <<"-------------------------------------------------------"  <<endl
            <<"Warning: Part in demand file does not appear in loose  "  <<endl
            <<"         part inventory file."                            <<endl
            <<"   Demand filename: " <<demandFile.filename().c_str()     <<endl
            <<"   Demand Line Number: " <<demandFileIter.recNum()        <<endl 
            <<"   Loosep filename: " <<loosepFile.filename().c_str()     <<endl
            <<"   Part name: " <<pn.c_str()                              <<endl
            <<"   0.0 will be used as the loose part inventory."         <<endl
            <<"-------------------------------------------------------"  <<endl;
        }
        
      }
      
      int period = demandFileIter.periodAsInt();
      
      // If bogus period, then just skip record.
      if ( period-1 >= nPeriods || period-1 < 0        ) {        
        cout 
          <<"-------------------------------------------------------"  <<endl
          <<"Warning: Specified period is out range"                   <<endl
          <<"   Filename: " <<demandFile.filename().c_str()            <<endl
          <<"   Line Number: " <<demandFileIter.recNum()               <<endl
          <<"   Part name: " <<demandFileIter.partName().c_str()       <<endl
          <<"   period: " <<period                                     <<endl
          <<"   Valid range: 1<= periods <=" <<nPeriods                <<endl
          <<"   Input record is being ignored"                         <<endl
          <<"-------------------------------------------------------"  <<endl;
        continue;
      }
      
      // Set internal type 1 demand volume
      { GARSdemandAppData * intType1Dad;
        witGetDemandAppData(witRun(), (type1PartPrefix()+pn).c_str(), internalType1DemandName().c_str(), (void**)&intType1Dad );
        assert( intType1Dad != NULL );
        intType1Dad->setDemQtyElem(period-1,demandFileIter.internal1DemQtyAsFloat());
      }
      
      // Set internal type 4 demand volume
      {
        GARSdemandAppData * intType4Dad;
        witGetDemandAppData(witRun(), (type4PartPrefix()+pn).c_str(), internalType4DemandName().c_str(), (void**)&intType4Dad );
        assert( intType4Dad != NULL );
        intType4Dad->setDemQtyElem(period-1,demandFileIter.internal4DemQtyAsFloat());
      }
      
      // Set internal type 1 or 4 demand volume
      {
        GARSdemandAppData * intType1Or4Dad;
        witGetDemandAppData(witRun(), (type1Or4PartPrefix()+pn).c_str(), internalType1Or4DemandName().c_str(), (void**)&intType1Or4Dad );
        assert( intType1Or4Dad != NULL );
        intType1Or4Dad->setDemQtyElem(period-1,demandFileIter.internal1Or4DemQtyAsFloat());
      }
      
      
      // Set external demand volume
      {
        GARSdemandAppData * extDad;
        witGetDemandAppData(witRun(), (typeAfsOr1PartPrefix()+pn).c_str(), externalDemandName().c_str(), (void**)&extDad );
        assert( extDad != NULL );
        extDad->setDemQtyElem(period-1,demandFileIter.externalDemQtyAsFloat());
      }
      
      // Set No Source Demand volume
      {
        GARSdemandAppData * noSrcDad;
        witGetDemandAppData(witRun(), (type1Or4PartPrefix()+pn).c_str(), noSourceDemandName().c_str(), (void**)&noSrcDad );
        assert( noSrcDad != NULL );
        noSrcDad->setDemQtyElem(period-1,demandFileIter.noSourceDemQtyAsFloat());
      }
    }
  }
  
  
  // read bom file
  {
    GARSbomFile bomFile(bomFileName);
    GARSbomFileIterator bomFileIter(bomFile);
    
    //float * obj1ShipRewardInternal = new float[nPeriods];
    //float * obj1ShipRewardExternal = new float[nPeriods];
    float * prodRateV              = new float[nPeriods];
    
    // Read each record of bom file
    for ( ; bomFileIter()!=NULL; ) {
      
      // Get mtm & partname
      std::string mtm = bomFileIter.type() + bomFileIter.model();
      std::string pn = bomFileIter.partName();
      std::string operation = disassembleMtmOpPrefix()+mtm;  //Disassemble mtm
      
      // If the part doesn't exist then there isn't any demand for it
      witBoolean partExists;
      witGetPartExists( witRun(), (type1PartPrefix()+pn).c_str(), &partExists );
      if ( !partExists ) {        
        cout 
          <<"-------------------------------------------------------"  <<endl
          <<"Warning: bom file contains a part without any demand."    <<endl
          <<"   Filename: " <<bomFile.filename().c_str()               <<endl
          <<"   Line Number: " <<bomFileIter.recNum()                  <<endl
          <<"   Part name: " <<pn.c_str()                              <<endl
          <<"   Input record is being ignored"                         <<endl
          <<"-------------------------------------------------------"  <<endl;
        continue;
      }
      
      // If disassembly operation doesn't exist, then write warning and skip it
      witBoolean operationExists;
      witGetOperationExists( witRun(), operation.c_str(), &operationExists );
      if ( !operationExists ) {        
        cout 
          <<"-------------------------------------------------------"  <<endl
          <<"Warning: bom file contains an mtm without any supply."    <<endl
          <<"   Filename: " <<bomFile.filename().c_str()               <<endl
          <<"   Line Number: " <<bomFileIter.recNum()                  <<endl
          <<"   MTM: " <<mtm.c_str()                                   <<endl
          <<"   Input record is being ignored"                         <<endl
          <<"-------------------------------------------------------"  <<endl;
        continue;
      }
      
      // connect part (type 1,4 and Afs) to disassebly operation
      {
        {
          witAddBopEntry( witRun(), operation.c_str(), (type1PartPrefix()+pn).c_str() );
          int nBopEntries;
          witGetOperationNBopEntries( witRun(), operation.c_str(), &nBopEntries );
          float prodRate = bomFileIter.yieldType1AsFloat();
          for( int p=0; p<nPeriods; ++p ) prodRateV[p] = prodRate;
          witSetBopEntryProductRate( witRun(), operation.c_str(), nBopEntries-1, prodRateV );
        }
        {
          witAddBopEntry( witRun(), operation.c_str(), (type4PartPrefix()+pn).c_str() );
          int nBopEntries;
          witGetOperationNBopEntries( witRun(), operation.c_str(), &nBopEntries );
          float prodRate = bomFileIter.yieldType4AsFloat();
          for( int p=0; p<nPeriods; ++p ) prodRateV[p] = prodRate;
          witSetBopEntryProductRate( witRun(), operation.c_str(), nBopEntries-1, prodRateV );
        }
        {
          witAddBopEntry( witRun(), operation.c_str(), (typeAfsPartPrefix()+pn).c_str() );
          int nBopEntries;
          witGetOperationNBopEntries( witRun(), operation.c_str(), &nBopEntries );
          float prodRate = bomFileIter.yieldTypeAfsAsFloat();
          for( int p=0; p<nPeriods; ++p ) prodRateV[p] = prodRate;
          witSetBopEntryProductRate( witRun(), operation.c_str(), nBopEntries-1, prodRateV );
        }
      }
    }
    delete []prodRateV;
  }
  
  
  // read revenue file
  {
    GARSpartRevenueFile         partRevFile(partRevenueFileName);
    GARSpartRevenueFileIterator partRevFileIter(partRevFile);
    
    float * shipReward = new float[nPeriods];
    float * subCost = new float[nPeriods];
    float * stockCost = new float[nPeriods];
    
    // Read each record of bom file
    for ( ; partRevFileIter()!=NULL; ) {
      
      // Get partname
      std::string pn = partRevFileIter.partName();
      
      // If the part doesn't exist then write warning message
      witBoolean partExists;
      witGetPartExists( witRun(), (type1PartPrefix()+pn).c_str(), &partExists );
      if ( !partExists ) {        
        cout 
          <<"-------------------------------------------------------"  <<endl
          <<"Warning: PN_rev file contains a part without any demand." <<endl
          <<"   Filename: " <<partRevFile.filename().c_str()           <<endl
          <<"   Line Number: " <<partRevFileIter.recNum()              <<endl
          <<"   Part name: " <<pn.c_str()                              <<endl
          <<"   Input record is being ignored"                         <<endl
          <<"-------------------------------------------------------"  <<endl;
        continue;
      }
      
      // Save revenue read from file
      {
        type1Rev(pn, partRevFileIter.revenueType1AsFloat() );
        type4Rev(pn, partRevFileIter.revenueType4AsFloat() );
        externalRev(pn, partRevFileIter.revenueTypeExternalAsFloat() );
      }

      
      // Set up reward for shipping to internal type 1 or 4 demand,
      // along with penalty for using type 4.
      {
        double rev1 =partRevFileIter.revenueType1AsFloat();
        double rev4 = partRevFileIter.revenueType4AsFloat();
        double cf1 = internalType1DemandCostFactor();
        double cf4 = internalType4DemandCostFactor();
        double revFac1 = cf1 * rev1;
        double revFac4 = cf4 * rev4;

        if ( (revFac1-revFac4)<0 ) {       
        cout 
          <<"-------------------------------------------------------"  <<endl
          <<"Warning: When satisfying internalType1Or4 demand, the  "  <<endl
          <<"         the cost of using a type 4 part is less than  "  <<endl
          <<"         the cost of using a type 1 part.  This means  "  <<endl
          <<"         that the type 4 part is favored.              "  <<endl
          <<"   Part name: " <<pn.c_str()                              <<endl
          <<"   Part's type 1 revenue: " <<rev1                        <<endl
          <<"   Part's type 4 revenue: " <<rev4                        <<endl
          <<"   Internal type 1 cost factor: " <<cf1                   <<endl 
          <<"   Internal type 4 cost factor: " <<cf4                   <<endl
          <<"   Type 1 rev * cost factor: " <<revFac1                  <<endl
          <<"   Type 4 rev * cost factor: " <<revFac4                  <<endl
          <<"-------------------------------------------------------"  <<endl;
        }
        timeValueOfMoney(nPeriods,revFac1-revFac4,subCost);
        witSetSubsBomEntryObj1SubCost( witRun(), 
          (combineType1And4PartsOpPrefix()+pn).c_str(), 0, 0,
          subCost );   

        // Make sure nothing gets stocked in 1or4 parts
        timeValueOfMoney(nPeriods,(10.0*revFac1+revFac4),stockCost);
        witSetPartObj1StockCost( witRun(),
          (type1Or4PartPrefix()+pn).c_str(), stockCost );
      }
      
      // Set up reward for shipping to external demand
      // along with penalty for using type 1 part
      {
        double rev = partRevFileIter.revenueTypeExternalAsFloat();
        timeValueOfMoney(nPeriods,
          subType1ForTypeAfsCostFactor() * externalDemandCostFactor() * rev,
          subCost );
        witSetSubsBomEntryObj1SubCost( witRun(), 
          (combineTypeAfsAnd1PartsOpPrefix()+pn).c_str(), 0, 0,
          subCost );     
        
        // Make sure nothing gets stocked in Afs or 1 parts
        //assert ( 10.*externalDemandCostFactor()* rev > 0.0 );
        double stockCostPer0 = 10.*externalDemandCostFactor()* rev;
        if ( stockCostPer0 <= 0.0 ) stockCostPer0 = 100.;
        timeValueOfMoney( nPeriods, stockCostPer0, stockCost );
        witSetPartObj1StockCost( witRun(),
          (typeAfsOr1PartPrefix()+pn).c_str(), stockCost );
      }

    }  
    delete []subCost;
    delete []shipReward;
    delete []stockCost;
  }

  
  // Set initial conditions
  partForVirtualForecast_=true;
  clearPartForVirtualForecast();

  mtmRev_=true;
  clearMtmRev();

  mtmAcquisitionCost_=true;
  clearMtmAcquisitionCost();

  mtmAcquireAll_=true;
  clearMtmAcquireAll();
  
  // Finally all the data is in place.
}

  
  

// default constructor
GARSproblem::GARSproblem()
:
wr_(NULL),
pnNames_(),
pnData_(),
mtmNames_(),
intType1DemCostFac_(0.5),
intType4DemCostFac_(0.3),
extDemCostFac_(0.8),
discountRate_(0.05),
periodsPerYear_(26.0),
partForVirtualForecast_(false),
mtmRev_(false),
mtmAcquisitionCost_(false),
mtmAcquireAll_(false)
{
  witNewRun( &wr_ );
  witInitialize( witRun() );
  
  // Turn off WIT informational messages
  witSetMesgTimesPrint( witRun(), WitTRUE, WitINFORMATIONAL_MESSAGES, 0);
  // Turn off warning msg about long names.
  witSetMesgTimesPrint( witRun(), WitTRUE, 338, 0);
  /* Turn off warning msg:
  WIT0749W One or more BOP entries have been rejected for possible explosion,
         because they had positive effective production rates (= yieldRate *
         productRate) that were below the value of expCutoff. The largest
         effective production rate that was rejected and the corresponding BOP
         entry and execution period are given below:

            expCutoff:             0.01
            Largest Rejected Rate: 0.008
            Operation:             "disassemble_26353AU"
            BOP Entry Index:       4
            Exec. Period:          0
  */
  witSetMesgTimesPrint( witRun(), WitTRUE, 749, 0);
}

// destructor
GARSproblem::~GARSproblem()
{
  gutsOfDestructor();
}



// copy constructor
GARSproblem::GARSproblem( const GARSproblem& source ):
wr_(NULL)
{
  gutsOfCopy(source);
}

// assignment operator
GARSproblem&
GARSproblem::operator=(const GARSproblem& rhs)
{  
  if (this != &rhs) { 
    if ( wr_ != NULL ) gutsOfDestructor();
    wr_ = NULL;
    gutsOfCopy(rhs);
  }
  return *this;
}

// copy object
void GARSproblem::gutsOfCopy( const GARSproblem& source )
{
  // Copy Wit Run
  assert(wr_==NULL);
  witNewRun( &wr_ );
  
  // Turn off WIT informational messages
  witSetMesgTimesPrint( wr_, WitTRUE, WitINFORMATIONAL_MESSAGES, 0);
  // Turn off warning msg about long names.
  witSetMesgTimesPrint( wr_, WitTRUE, 338, 0);
  
  witCopyData(wr_,source.wr_);
  
  // Copy AppData operation appData
  {
    int nOperations;
    char ** operationList;
    witGetOperations ( witRun(), &nOperations, &operationList );
    for ( int nop=0; nop<nOperations; ++nop ) { 
      //GARSdismantleOpAppData * srcOad;
      //witGetOperationAppData( source.wr_, operationList[nop], (void**)&srcOad );
      //if (srcOad!=NULL) {
        //GARSdismantleOpAppData * oad = new GARSdismantleOpAppData(*srcOad);
        //witSetOperationAppData( wr_, operationList[nop], oad );
      //}
      witFree(operationList[nop]);
    }
    witFree(operationList);
  }
  
  // Copy part and demand appData
  {
    int nParts;
    char ** partList;
    int nPeriods;
    witGetNPeriods( witRun(), &nPeriods );
    witGetParts ( witRun(), &nParts, &partList );
    for ( int p=0; p<nParts; ++p ) {
      
      GARSappData * srcPad;
      witGetPartAppData( source.wr_, partList[p], (void**)&srcPad );
      if ( srcPad != NULL ) {
        GARSappData * ad = srcPad->clone();
        witSetPartAppData( wr_, partList[p], ad );
      }
      
      int nPartDemands;
      char ** demandList;
      witGetPartDemands( witRun(), partList[p], &nPartDemands, &demandList);
      for ( int d=0; d<nPartDemands; ++d ) {      
        GARSdemandAppData * srcDad;
        witGetDemandAppData( source.wr_, partList[p], demandList[d], (void**)&srcDad );
        assert( srcDad != NULL );
        GARSdemandAppData * dad = new GARSdemandAppData(*srcDad);
        witSetDemandAppData( wr_, partList[p], demandList[d], dad );
        witFree(demandList[d]);
      }
      
      witFree(demandList);
      witFree(partList[p]);
    }
    witFree(partList);
  }
  
  pnNames_  = source.pnNames_;
  pnData_  = source.pnData_;
  mtmNames_ = source.mtmNames_;
  intType1DemCostFac_ = source.intType1DemCostFac_;
  intType4DemCostFac_ = source.intType4DemCostFac_;
  extDemCostFac_ = source.extDemCostFac_;
  discountRate_ = source.discountRate_;
  periodsPerYear_ = source.periodsPerYear_;
  partForVirtualForecast_ = source.partForVirtualForecast_;
  mtmRev_ = source.mtmRev_; 
  mtmAcquisitionCost_ = source.mtmAcquisitionCost_; 
  mtmAcquireAll_ = source.mtmAcquireAll_; 
  
}

// destructor
void GARSproblem::gutsOfDestructor()
{
  // delete operation appData
  {
    int nOperations;
    char ** operationList;
    witGetOperations ( witRun(), &nOperations, &operationList );
    for ( int nop=0; nop<nOperations; ++nop ) { 
      //GARSdismantleOpAppData * oad;
      //witGetOperationAppData( witRun(), operationList[nop], (void**)&oad );
      //delete oad;   
      //oad = NULL;
      //witSetOperationAppData( witRun(), operationList[nop], (void**)oad );
      witFree(operationList[nop]);
    }
    witFree(operationList);
  }
  
  // delete part and demand appData
  {
    int nParts;
    char ** partList;
    int nPeriods;
    witGetNPeriods( witRun(), &nPeriods );
    witGetParts ( witRun(), &nParts, &partList );
    for ( int p=0; p<nParts; ++p ) {
      
      GARSappData * ad;
      witGetPartAppData( witRun(), partList[p], (void**)&ad );
      delete ad;
      ad = NULL;
      witSetPartAppData( witRun(), partList[p], (void**)ad );
      
      int nPartDemands;
      char ** demandList;
      witGetPartDemands( witRun(), partList[p], &nPartDemands, &demandList);
      for ( int d=0; d<nPartDemands; ++d ) {      
        GARSdemandAppData * dad;
        witGetDemandAppData( witRun(), partList[p], demandList[d], (void**)&dad );
        assert( dad!=NULL );
        delete dad;
        dad=NULL;
        witSetDemandAppData( witRun(), partList[p], demandList[d], (void**)dad );
        witFree(demandList[d]);
      }
      
      witFree(demandList);
      witFree(partList[p]);
    }
    witFree(partList);
  }
  
  // delete the witRun
  witDeleteRun(witRun());
  
}



#ifdef NDEBUG
#undef NDEBUG
#endif
//------------------------------------------------------------------------------
// Test function
//------------------------------------------------------------------------------
void
GARSproblem::test()
{
  OsiRelFltEq eq(1e-05);
  GARSproblem gp;
#if defined(_MSC_VER)
  gp.readFiles(1,"..\\..\\data\\01Mar26");
#else
  gp.readFiles(1,"../data/01Mar26");
#endif
#if 0
  gp.solve();
  
  // Test mtm app data
  {
    GARSproblem gpCopy(gp);
    GARSproblem gpAssign=gp;
    GARSmtmFile mtmFile("../data/original2000/mtm");
    GARSmtmFileIterator mtmFileIter(mtmFile);
    
    // Read each record of mtmsale file
    for ( ; mtmFileIter()!=NULL; ) {
      
      // Create mtm name
      std::string mtm = mtmFileIter.type()+mtmFileIter.model();
      double ms = mtmFileIter.mtmSalePriceAsFloat();
      assert( eq(ms,      gp.mtmSalePrice(mtm.c_str()) ) );
      assert( eq(ms,  gpCopy.mtmSalePrice(mtm.c_str()) ) );
      assert( eq(ms,gpAssign.mtmSalePrice(mtm.c_str()) ) );
    }
  }
  
  
  gp.solve();
  
  int nP = gp.nPeriods();
  assert( nP == 1 );
  const std::vector<std::string> & pns = gp.partNames();
  
  assert( eq(9.950000,gp.virtualForecastQuantity("085G6701")[0]) );
  assert( eq(9.450000,gp.virtualForecastQuantity("029H9228")[0]) );
  assert( eq(9.435324,gp.internalEconomicCoverage("042H2769")[0]) );
  assert( eq(9.160000,gp.virtualForecastQuantity("092G7294")[0]) );
  assert( eq(9.000000,gp.internalNonEconomicCoverage("082H8897")[0]) );
  assert( eq(9.000000,gp.internalEconomicCoverage("082H8897")[0]) );
  assert( eq(9.000000,gp.internalDemandQuantity("082H8897")[0]) );
  assert( eq(95.169998,gp.virtualForecastQuantity("006H4003")[0]) );
  assert( eq(90.440002,gp.virtualForecastQuantity("011J9626")[0]) );
  assert( eq(90.440002,gp.virtualForecastQuantity("010H4056")[0]) );
  assert( eq(8.760000,gp.virtualForecastQuantity("006H9064")[0]) );
  assert( eq(8.700000,gp.virtualForecastQuantity("042H2817")[0]) );
  assert( eq(8.137693,gp.internalEconomicCoverage("093H4690")[0]) );
  assert( eq(8.000000,gp.externalNonEconomicCoverage("002K7007")[0]) );
  assert( eq(8.000000,gp.externalEconomicCoverage("002K7007")[0]) );
  assert( eq(8.000000,gp.externalDemandQuantity("002K7007")[0]) );
  assert( eq(896.289978,gp.virtualForecastQuantity("029H9220")[0]) );
  assert( eq(88.339996,gp.newCost("042H2817")) );
  assert( eq(870.690002,gp.virtualForecastQuantity("005K9398")[0]) );
  assert( eq(85.405998,gp.newCost("029H9205")) );
  assert( eq(856.700012,gp.virtualForecastQuantity("010L2158")[0]) );
  assert( eq(84.070000,gp.virtualForecastQuantity("083H7126")[0]) );
  assert( eq(83.251999,gp.newCost("012J0115")) );
  assert( eq(81.279999,gp.virtualForecastQuantity("088G4270")[0]) );
  assert( eq(803.929993,gp.virtualForecastQuantity("005K8874")[0]) );
  assert( eq(7.800000,gp.virtualForecastQuantity("073H9946")[0]) );
  assert( eq(7.720000,gp.internalNonEconomicCoverage("073H6427")[0]) );
  assert( eq(7.590000,gp.newCost("073H9946")) );
  assert( eq(7.150000,gp.externalEconomicCoverage("002K4785")[0]) );
  assert( eq(7.000000,gp.internalNonEconomicCoverage("046H5768")[0]) );
  assert( eq(7.000000,gp.internalNonEconomicCoverage("010L1721")[0]) );
  assert( eq(7.000000,gp.internalEconomicCoverage("010L1721")[0]) );
  assert( eq(7.000000,gp.internalDemandQuantity("046H5768")[0]) );
  assert( eq(7.000000,gp.internalDemandQuantity("010L1721")[0]) );
  assert( eq(7.000000,gp.externalNonEconomicCoverage("000K7907")[0]) );
  assert( eq(7.000000,gp.externalDemandQuantity("000K7907")[0]) );
  assert( eq(77.776001,gp.newCost("042H2779")) );
  assert( eq(76.549995,gp.virtualForecastQuantity("093H5966")[0]) );
  assert( eq(75.870003,gp.newCost("039H6228")) );
  assert( eq(749.619995,gp.newCost("046H5735")) );
  assert( eq(7253.000000,gp.virtualForecastQuantity("029H9221")[0]) );
  assert( eq(71.623001,gp.newCost("005K3469")) );
  assert( eq(711.013977,gp.newCost("010L1721")) );
  assert( eq(707.369995,gp.virtualForecastQuantity("029H9232")[0]) );
  assert( eq(6.650000,gp.virtualForecastQuantity("005K3132")[0]) );
  assert( eq(6.600000,gp.virtualForecastQuantity("005K3174")[0]) );
  assert( eq(6.000000,gp.internalNonEconomicCoverage("046H5776")[0]) );
  assert( eq(6.000000,gp.internalEconomicCoverage("046H5776")[0]) );
  assert( eq(6.000000,gp.internalDemandQuantity("046H5776")[0]) );
  assert( eq(69.889999,gp.newCost("006H7654")) );
  assert( eq(69.774002,gp.newCost("005K9267")) );
  assert( eq(69.598999,gp.newCost("002K6539")) );
  assert( eq(69.000000,gp.newCost("029H9220")) );
  assert( eq(67.317001,gp.newCost("046H5768")) );
  assert( eq(67.000000,gp.externalNonEconomicCoverage("083H5378")[0]) );
  assert( eq(67.000000,gp.externalEconomicCoverage("083H5378")[0]) );
  assert( eq(67.000000,gp.externalDemandQuantity("083H5378")[0]) );
  assert( eq(678.010010,gp.virtualForecastQuantity("097H3388")[0]) );
  assert( eq(667.728027,gp.newCost("030L2898")) );
  assert( eq(64.943001,gp.newCost("083H7126")) );
  assert( eq(627.299988,gp.virtualForecastQuantity("046H5768")[0]) );
  assert( eq(620.619995,gp.virtualForecastQuantity("029H9230")[0]) );
  assert( eq(5.760000,gp.internalNonEconomicCoverage("006H9064")[0]) );
  assert( eq(5.760000,gp.internalEconomicCoverage("006H9064")[0]) );
  assert( eq(5.320000,gp.virtualForecastQuantity("005K3597")[0]) );
  assert( eq(5.000000,gp.internalNonEconomicCoverage("088G4270")[0]) );
  assert( eq(5.000000,gp.internalEconomicCoverage("088G4270")[0]) );
  assert( eq(5.000000,gp.internalDemandQuantity("088G4270")[0]) );
  assert( eq(5.000000,gp.externalNonEconomicCoverage("088G4270")[0]) );
  assert( eq(5.000000,gp.externalEconomicCoverage("088G4270")[0]) );
  assert( eq(5.000000,gp.externalDemandQuantity("088G4270")[0]) );
  assert( eq(59.641998,gp.newCost("010L2158")) );
  assert( eq(59.369999,gp.virtualForecastQuantity("000K7907")[0]) );
  assert( eq(59.100002,gp.virtualForecastQuantity("082H8897")[0]) );
  assert( eq(595.982971,gp.newCost("005K3597")) );
  assert( eq(58.750000,gp.newCost("042H2769")) );
  assert( eq(57.000000,gp.externalDemandQuantity("076H4609")[0]) );
  assert( eq(56.837788,gp.externalEconomicCoverage("093F2361")[0]) );
  assert( eq(56.257000,gp.newCost("042H2767")) );
  assert( eq(55.209999,gp.virtualForecastQuantity("010L1719")[0]) );
  assert( eq(54.600002,gp.virtualForecastQuantity("002K4785")[0]) );
  assert( eq(544.781982,gp.newCost("029H9226")) );
  assert( eq(541.442993,gp.newCost("011J9623")) );
  assert( eq(53.070999,gp.newCost("097H3388")) );
  assert( eq(52.840000,gp.virtualForecastQuantity("030L2898")[0]) );
  assert( eq(52.778000,gp.newCost("092G7245")) );
  assert( eq(522.119995,gp.newCost("000K7907")) );
  assert( eq(513.663025,gp.newCost("005K3174")) );
  assert( eq(50.799999,gp.virtualForecastQuantity("011J9992")[0]) );
  assert( eq(4.783847,gp.internalEconomicCoverage("007H1150")[0]) );
  assert( eq(4.300000,gp.virtualForecastQuantity("097H5504")[0]) );
  assert( eq(4.300000,gp.virtualForecastQuantity("029H9367")[0]) );
  assert( eq(4.300000,gp.internalNonEconomicCoverage("097H5504")[0]) );
  assert( eq(4.290000,gp.internalEconomicCoverage("010L2047")[0]) );
  assert( eq(4.000000,gp.internalNonEconomicCoverage("029H9205")[0]) );
  assert( eq(4.000000,gp.internalNonEconomicCoverage("012J0138")[0]) );
  assert( eq(4.000000,gp.internalNonEconomicCoverage("002K7007")[0]) );
  assert( eq(4.000000,gp.internalEconomicCoverage("097H5504")[0]) );
  assert( eq(4.000000,gp.internalEconomicCoverage("029H9205")[0]) );
  assert( eq(4.000000,gp.internalEconomicCoverage("002K7007")[0]) );
  assert( eq(4.000000,gp.internalDemandQuantity("029H9205")[0]) );
  assert( eq(4.000000,gp.internalDemandQuantity("012J0138")[0]) );
  assert( eq(4.000000,gp.internalDemandQuantity("011H9623")[0]) );
  assert( eq(4.000000,gp.internalDemandQuantity("002K7007")[0]) );
  assert( eq(4.000000,gp.externalNonEconomicCoverage("006H8825")[0]) );
  assert( eq(4.000000,gp.externalEconomicCoverage("006H8825")[0]) );
  assert( eq(4.000000,gp.externalDemandQuantity("006H8825")[0]) );
  assert( eq(49.000000,gp.virtualForecastQuantity("006H9063")[0]) );
  assert( eq(494.335999,gp.newCost("005K3172")) );
  assert( eq(491.808990,gp.newCost("005K9398")) );
  assert( eq(48.337002,gp.newCost("073H9951")) );
  assert( eq(48.049000,gp.newCost("046H5775")) );
  assert( eq(464.839996,gp.newCost("082H8897")) );
  assert( eq(464.700012,gp.virtualForecastQuantity("005K3117")[0]) );
  assert( eq(462.250000,gp.virtualForecastQuantity("083H5378")[0]) );
  assert( eq(45.228001,gp.newCost("075H9601")) );
  assert( eq(4543.910156,gp.virtualForecastQuantity("005K3469")[0]) );
  assert( eq(453.424988,gp.newCost("005K3176")) );
  assert( eq(44.715000,gp.newCost("092G7294")) );
  assert( eq(44.410000,gp.virtualForecastQuantity("073H6430")[0]) );
  assert( eq(44.037998,gp.newCost("006H4003")) );
  assert( eq(43.660000,gp.virtualForecastQuantity("012J1446")[0]) );
  assert( eq(43.000000,gp.virtualForecastQuantity("042H2767")[0]) );
  assert( eq(4363.490234,gp.virtualForecastQuantity("005K3468")[0]) );
  assert( eq(42.933998,gp.newCost("029H9230")) );
  assert( eq(42.868999,gp.newCost("083H5375")) );
  assert( eq(42.771999,gp.newCost("046H5750")) );
  assert( eq(428.218994,gp.newCost("046H5725")) );
  assert( eq(420.059998,gp.virtualForecastQuantity("012J0115")[0]) );
  assert( eq(41.601002,gp.newCost("083H5378")) );
  assert( eq(41.351002,gp.newCost("046H5776")) );
  assert( eq(415.819000,gp.newCost("082H8496")) );
  assert( eq(40.000000,gp.externalNonEconomicCoverage("010L2158")[0]) );
  assert( eq(40.000000,gp.externalEconomicCoverage("010L2158")[0]) );
  assert( eq(40.000000,gp.externalDemandQuantity("010L2158")[0]) );
  assert( eq(408.539001,gp.newCost("010L1668")) );
  assert( eq(400.795013,gp.newCost("011J9626")) );
  assert( eq(400.000000,gp.internalDemandQuantity("012J4569")[0]) );
  assert( eq(3.850000,gp.virtualForecastQuantity("005K3172")[0]) );
  assert( eq(3.440000,gp.virtualForecastQuantity("012J4569")[0]) );
  assert( eq(3.440000,gp.internalNonEconomicCoverage("012J4569")[0]) );
  assert( eq(3.360000,gp.virtualForecastQuantity("007H0383")[0]) );
  assert( eq(3.104477,gp.externalEconomicCoverage("000K7907")[0]) );
  assert( eq(3.000000,gp.internalNonEconomicCoverage("093H5966")[0]) );
  assert( eq(3.000000,gp.internalNonEconomicCoverage("046H5775")[0]) );
  assert( eq(3.000000,gp.internalNonEconomicCoverage("000K7907")[0]) );
  assert( eq(3.000000,gp.internalEconomicCoverage("046H5775")[0]) );
  assert( eq(3.000000,gp.internalDemandQuantity("093H5966")[0]) );
  assert( eq(3.000000,gp.internalDemandQuantity("092G7321")[0]) );
  assert( eq(3.000000,gp.internalDemandQuantity("046H5775")[0]) );
  assert( eq(3.000000,gp.internalDemandQuantity("000K7907")[0]) );
  assert( eq(3.000000,gp.externalNonEconomicCoverage("083H7126")[0]) );
  assert( eq(3.000000,gp.externalNonEconomicCoverage("046H5776")[0]) );
  assert( eq(3.000000,gp.externalNonEconomicCoverage("010L1700")[0]) );
  assert( eq(3.000000,gp.externalNonEconomicCoverage("006H9064")[0]) );
  assert( eq(3.000000,gp.externalEconomicCoverage("083H7126")[0]) );
  assert( eq(3.000000,gp.externalEconomicCoverage("046H5776")[0]) );
  assert( eq(3.000000,gp.externalEconomicCoverage("010L1700")[0]) );
  assert( eq(3.000000,gp.externalEconomicCoverage("006H9064")[0]) );
  assert( eq(3.000000,gp.externalDemandQuantity("083H7126")[0]) );
  assert( eq(3.000000,gp.externalDemandQuantity("060H9453")[0]) );
  assert( eq(3.000000,gp.externalDemandQuantity("046H5776")[0]) );
  assert( eq(3.000000,gp.externalDemandQuantity("010L1700")[0]) );
  assert( eq(3.000000,gp.externalDemandQuantity("006H9064")[0]) );
  assert( eq(395.690002,gp.virtualForecastQuantity("093F2361")[0]) );
  assert( eq(395.000000,gp.newCost("088G4270")) );
  assert( eq(38.592999,gp.newCost("005K3132")) );
  assert( eq(38.410000,gp.virtualForecastQuantity("005K4826")[0]) );
  assert( eq(382.529999,gp.virtualForecastQuantity("082H8489")[0]) );
  assert( eq(37.799999,gp.virtualForecastQuantity("082H8877")[0]) );
  assert( eq(37.470001,gp.newCost("005K8874")) );
  assert( eq(378.450012,gp.virtualForecastQuantity("042H2768")[0]) );
  assert( eq(36.850002,gp.virtualForecastQuantity("082H8496")[0]) );
  assert( eq(36.377998,gp.newCost("092G7323")) );
  assert( eq(35.757999,gp.newCost("085G6701")) );
  assert( eq(3587.600098,gp.virtualForecastQuantity("005K4830")[0]) );
  assert( eq(345.372009,gp.newCost("005K3148")) );
  assert( eq(33.362000,gp.newCost("006H2968")) );
  assert( eq(33.134998,gp.newCost("010H4056")) );
  assert( eq(33.000000,gp.internalNonEconomicCoverage("093H4690")[0]) );
  assert( eq(33.000000,gp.internalDemandQuantity("093H4690")[0]) );
  assert( eq(334.000000,gp.newCost("082H8877")) );
  assert( eq(332.571014,gp.newCost("076H4609")) );
  assert( eq(32.959000,gp.newCost("066G5069")) );
  assert( eq(32.389999,gp.newCost("006H8825")) );
  assert( eq(32.310001,gp.virtualForecastQuantity("012J0138")[0]) );
  assert( eq(326.549988,gp.virtualForecastQuantity("039H6228")[0]) );
  assert( eq(323.666992,gp.newCost("073H6430")) );
  assert( eq(320.600006,gp.virtualForecastQuantity("046H5751")[0]) );
  assert( eq(31.684000,gp.newCost("042H2768")) );
  assert( eq(31.355000,gp.newCost("029H9221")) );
  assert( eq(31.000000,gp.externalNonEconomicCoverage("082H8877")[0]) );
  assert( eq(31.000000,gp.externalEconomicCoverage("082H8877")[0]) );
  assert( eq(31.000000,gp.externalDemandQuantity("082H8877")[0]) );
  assert( eq(30.357000,gp.newCost("006H3862")) );
  assert( eq(30.000000,gp.internalNonEconomicCoverage("011J9626")[0]) );
  assert( eq(30.000000,gp.internalNonEconomicCoverage("002K4785")[0]) );
  assert( eq(30.000000,gp.internalDemandQuantity("011J9626")[0]) );
  assert( eq(30.000000,gp.internalDemandQuantity("002K4785")[0]) );
  assert( eq(2.900000,gp.virtualForecastQuantity("002K0490")[0]) );
  assert( eq(2.080000,gp.virtualForecastQuantity("073H9933")[0]) );
  assert( eq(2.080000,gp.internalNonEconomicCoverage("073H9933")[0]) );
  assert( eq(2.000000,gp.virtualForecastQuantity("092G7321")[0]) );
  assert( eq(2.000000,gp.internalNonEconomicCoverage("083H5378")[0]) );
  assert( eq(2.000000,gp.internalNonEconomicCoverage("073H9946")[0]) );
  assert( eq(2.000000,gp.internalNonEconomicCoverage("012J1497")[0]) );
  assert( eq(2.000000,gp.internalNonEconomicCoverage("010H4056")[0]) );
  assert( eq(2.000000,gp.internalNonEconomicCoverage("005K3469")[0]) );
  assert( eq(2.000000,gp.internalEconomicCoverage("083H5378")[0]) );
  assert( eq(2.000000,gp.internalEconomicCoverage("012J1497")[0]) );
  assert( eq(2.000000,gp.internalEconomicCoverage("010H4056")[0]) );
  assert( eq(2.000000,gp.internalEconomicCoverage("005K3469")[0]) );
  assert( eq(2.000000,gp.internalDemandQuantity("083H5378")[0]) );
  assert( eq(2.000000,gp.internalDemandQuantity("073H9946")[0]) );
  assert( eq(2.000000,gp.internalDemandQuantity("012J1497")[0]) );
  assert( eq(2.000000,gp.internalDemandQuantity("010H4056")[0]) );
  assert( eq(2.000000,gp.internalDemandQuantity("005K3469")[0]) );
  assert( eq(2.000000,gp.externalNonEconomicCoverage("092G7321")[0]) );
  assert( eq(2.000000,gp.externalNonEconomicCoverage("083H5375")[0]) );
  assert( eq(2.000000,gp.externalNonEconomicCoverage("073H9951")[0]) );
  assert( eq(2.000000,gp.externalNonEconomicCoverage("010L1721")[0]) );
  assert( eq(2.000000,gp.externalEconomicCoverage("092G7321")[0]) );
  assert( eq(2.000000,gp.externalEconomicCoverage("083H5375")[0]) );
  assert( eq(2.000000,gp.externalEconomicCoverage("010L1721")[0]) );
  assert( eq(2.000000,gp.externalDemandQuantity("083H5375")[0]) );
  assert( eq(2.000000,gp.externalDemandQuantity("073H9951")[0]) );
  assert( eq(2.000000,gp.externalDemandQuantity("010L1721")[0]) );
  assert( eq(28.524000,gp.newCost("012J1497")) );
  assert( eq(288.812012,gp.newCost("010L1700")) );
  assert( eq(27.830000,gp.virtualForecastQuantity("075H9601")[0]) );
  assert( eq(279.000000,gp.newCost("011J8912")) );
  assert( eq(274.674988,gp.newCost("096G3573")) );
  assert( eq(270.000000,gp.internalDemandQuantity("093F2361")[0]) );
  assert( eq(2707.409912,gp.virtualForecastQuantity("046H5750")[0]) );
  assert( eq(265.000000,gp.externalNonEconomicCoverage("093F2361")[0]) );
  assert( eq(265.000000,gp.externalDemandQuantity("093F2361")[0]) );
  assert( eq(25.976000,gp.newCost("011J9992")) );
  assert( eq(25.858000,gp.newCost("012J1446")) );
  assert( eq(256.410004,gp.virtualForecastQuantity("046H5725")[0]) );
  assert( eq(250.000000,gp.internalDemandQuantity("010L2047")[0]) );
  assert( eq(23.000000,gp.externalNonEconomicCoverage("073H6430")[0]) );
  assert( eq(23.000000,gp.externalDemandQuantity("073H6430")[0]) );
  assert( eq(235.869995,gp.newCost("082H8489")) );
  assert( eq(22.989000,gp.newCost("002K4785")) );
  assert( eq(22.736000,gp.newCost("093F2361")) );
  assert( eq(22.000000,gp.internalNonEconomicCoverage("046H5771")[0]) );
  assert( eq(22.000000,gp.internalEconomicCoverage("046H5771")[0]) );
  assert( eq(22.000000,gp.internalDemandQuantity("046H5771")[0]) );
  assert( eq(22.000000,gp.externalNonEconomicCoverage("046H5750")[0]) );
  assert( eq(22.000000,gp.externalEconomicCoverage("046H5750")[0]) );
  assert( eq(22.000000,gp.externalDemandQuantity("046H5750")[0]) );
  assert( eq(228.447006,gp.newCost("005K3117")) );
  assert( eq(224.729996,gp.virtualForecastQuantity("006H3862")[0]) );
  assert( eq(223.737000,gp.newCost("011H9623")) );
  assert( eq(221.565994,gp.newCost("012J0138")) );
  assert( eq(221.380005,gp.virtualForecastQuantity("007H1150")[0]) );
  assert( eq(21.000000,gp.internalNonEconomicCoverage("097H3388")[0]) );
  assert( eq(21.000000,gp.internalEconomicCoverage("097H3388")[0]) );
  assert( eq(21.000000,gp.internalDemandQuantity("097H3388")[0]) );
  assert( eq(219.171005,gp.newCost("029H9367")) );
  assert( eq(216.847000,gp.newCost("029H9228")) );
  assert( eq(20.719999,gp.virtualForecastQuantity("073H6427")[0]) );
  assert( eq(20.410000,gp.virtualForecastQuantity("011J9623")[0]) );
  assert( eq(20.158001,gp.newCost("002K7007")) );
  assert( eq(20.072001,gp.newCost("002K7011")) );
  assert( eq(20.000000,gp.internalNonEconomicCoverage("039H6228")[0]) );
  assert( eq(20.000000,gp.internalNonEconomicCoverage("012J0115")[0]) );
  assert( eq(20.000000,gp.internalNonEconomicCoverage("011J8912")[0]) );
  assert( eq(20.000000,gp.internalNonEconomicCoverage("007H1150")[0]) );
  assert( eq(20.000000,gp.internalNonEconomicCoverage("006H8825")[0]) );
  assert( eq(20.000000,gp.internalNonEconomicCoverage("005K3468")[0]) );
  assert( eq(20.000000,gp.internalEconomicCoverage("039H6228")[0]) );
  assert( eq(20.000000,gp.internalEconomicCoverage("012J0115")[0]) );
  assert( eq(20.000000,gp.internalEconomicCoverage("011J8912")[0]) );
  assert( eq(20.000000,gp.internalEconomicCoverage("005K3468")[0]) );
  assert( eq(20.000000,gp.internalDemandQuantity("039H6228")[0]) );
  assert( eq(20.000000,gp.internalDemandQuantity("012J0115")[0]) );
  assert( eq(20.000000,gp.internalDemandQuantity("011J8912")[0]) );
  assert( eq(20.000000,gp.internalDemandQuantity("007H1150")[0]) );
  assert( eq(20.000000,gp.internalDemandQuantity("006H8825")[0]) );
  assert( eq(20.000000,gp.internalDemandQuantity("005K3468")[0]) );
  assert( eq(20.000000,gp.externalNonEconomicCoverage("045H8791")[0]) );
  assert( eq(20.000000,gp.externalNonEconomicCoverage("029H9220")[0]) );
  assert( eq(20.000000,gp.externalNonEconomicCoverage("005K3117")[0]) );
  assert( eq(20.000000,gp.externalEconomicCoverage("029H9220")[0]) );
  assert( eq(20.000000,gp.externalEconomicCoverage("005K3117")[0]) );
  assert( eq(20.000000,gp.externalDemandQuantity("045H8791")[0]) );
  assert( eq(20.000000,gp.externalDemandQuantity("029H9220")[0]) );
  assert( eq(20.000000,gp.externalDemandQuantity("005K3117")[0]) );
  assert( eq(206.667007,gp.newCost("012J4569")) );
  assert( eq(202.990005,gp.newCost("045H8791")) );
  assert( eq(202.033997,gp.newCost("082H8875")) );
  assert( eq(201.720001,gp.virtualForecastQuantity("045H8791")[0]) );
  assert( eq(200.000000,gp.internalDemandQuantity("097H5504")[0]) );
  assert( eq(2007.750000,gp.virtualForecastQuantity("006H2968")[0]) );
  assert( eq(1.950000,gp.virtualForecastQuantity("096G3573")[0]) );
  assert( eq(1.950000,gp.internalNonEconomicCoverage("096G3573")[0]) );
  assert( eq(1.950000,gp.internalEconomicCoverage("096G3573")[0]) );
  assert( eq(1.700000,gp.virtualForecastQuantity("092G7245")[0]) );
  assert( eq(1.520000,gp.virtualForecastQuantity("060H9453")[0]) );
  assert( eq(1.520000,gp.externalNonEconomicCoverage("060H9453")[0]) );
  assert( eq(1.520000,gp.externalEconomicCoverage("060H9453")[0]) );
  assert( eq(1.394615,gp.internalEconomicCoverage("093H5966")[0]) );
  assert( eq(1.300000,gp.virtualForecastQuantity("029H9226")[0]) );
  assert( eq(1.160000,gp.virtualForecastQuantity("075H7497")[0]) );
  assert( eq(1.000000,gp.noSourceNonEconomicCoverage("005K3597")[0]) );
  assert( eq(1.000000,gp.noSourceNonEconomicCoverage("002K6539")[0]) );
  assert( eq(1.000000,gp.noSourceEconomicCoverage("005K3597")[0]) );
  assert( eq(1.000000,gp.noSourceEconomicCoverage("002K6539")[0]) );
  assert( eq(1.000000,gp.noSourceDemandQuantity("005K3597")[0]) );
  assert( eq(1.000000,gp.noSourceDemandQuantity("002K6539")[0]) );
  assert( eq(1.000000,gp.internalNonEconomicCoverage("092G7245")[0]) );
  assert( eq(1.000000,gp.internalNonEconomicCoverage("082H8875")[0]) );
  assert( eq(1.000000,gp.internalNonEconomicCoverage("012J5554")[0]) );
  assert( eq(1.000000,gp.internalNonEconomicCoverage("011J9623")[0]) );
  assert( eq(1.000000,gp.internalNonEconomicCoverage("010L1719")[0]) );
  assert( eq(1.000000,gp.internalNonEconomicCoverage("007H0383")[0]) );
  assert( eq(1.000000,gp.internalNonEconomicCoverage("006H9063")[0]) );
  assert( eq(1.000000,gp.internalNonEconomicCoverage("005K3174")[0]) );
  assert( eq(1.000000,gp.internalNonEconomicCoverage("002K0490")[0]) );
  assert( eq(1.000000,gp.internalEconomicCoverage("092G7245")[0]) );
  assert( eq(1.000000,gp.internalEconomicCoverage("082H8875")[0]) );
  assert( eq(1.000000,gp.internalEconomicCoverage("012J5554")[0]) );
  assert( eq(1.000000,gp.internalEconomicCoverage("010L1719")[0]) );
  assert( eq(1.000000,gp.internalEconomicCoverage("007H0383")[0]) );
  assert( eq(1.000000,gp.internalEconomicCoverage("006H9063")[0]) );
  assert( eq(1.000000,gp.internalEconomicCoverage("005K3174")[0]) );
  assert( eq(1.000000,gp.internalDemandQuantity("092G7245")[0]) );
  assert( eq(1.000000,gp.internalDemandQuantity("082H8875")[0]) );
  assert( eq(1.000000,gp.internalDemandQuantity("066G5069")[0]) );
  assert( eq(1.000000,gp.internalDemandQuantity("012J5554")[0]) );
  assert( eq(1.000000,gp.internalDemandQuantity("011J9623")[0]) );
  assert( eq(1.000000,gp.internalDemandQuantity("010L1719")[0]) );
  assert( eq(1.000000,gp.internalDemandQuantity("010L1668")[0]) );
  assert( eq(1.000000,gp.internalDemandQuantity("007H0383")[0]) );
  assert( eq(1.000000,gp.internalDemandQuantity("007H0017")[0]) );
  assert( eq(1.000000,gp.internalDemandQuantity("006H9063")[0]) );
  assert( eq(1.000000,gp.internalDemandQuantity("006H8419")[0]) );
  assert( eq(1.000000,gp.internalDemandQuantity("005K3174")[0]) );
  assert( eq(1.000000,gp.internalDemandQuantity("002K0490")[0]) );
  assert( eq(1.000000,gp.externalNonEconomicCoverage("029H9367")[0]) );
  assert( eq(1.000000,gp.externalNonEconomicCoverage("010H4056")[0]) );
  assert( eq(1.000000,gp.externalNonEconomicCoverage("005K3469")[0]) );
  assert( eq(1.000000,gp.externalNonEconomicCoverage("005K3176")[0]) );
  assert( eq(1.000000,gp.externalEconomicCoverage("010H4056")[0]) );
  assert( eq(1.000000,gp.externalEconomicCoverage("005K3469")[0]) );
  assert( eq(1.000000,gp.externalDemandQuantity("029H9367")[0]) );
  assert( eq(1.000000,gp.externalDemandQuantity("010H4056")[0]) );
  assert( eq(1.000000,gp.externalDemandQuantity("005K3469")[0]) );
  assert( eq(1.000000,gp.externalDemandQuantity("005K3176")[0]) );
  assert( eq(19.000000,gp.internalDemandQuantity("096G3576")[0]) );
  assert( eq(197.464005,gp.newCost("046H5771")) );
  assert( eq(18.983000,gp.newCost("012J5554")) );
  assert( eq(18.000000,gp.newCost("092G7321")) );
  assert( eq(184.960007,gp.virtualForecastQuantity("012J1497")[0]) );
  assert( eq(182.363007,gp.newCost("093H4690")) );
  assert( eq(180.790009,gp.virtualForecastQuantity("092G7323")[0]) );
  assert( eq(17.400000,gp.virtualForecastQuantity("005K3176")[0]) );
  assert( eq(17.000000,gp.internalEconomicCoverage("011J9626")[0]) );
  assert( eq(179.584000,gp.newCost("060H9453")) );
  assert( eq(177.750000,gp.virtualForecastQuantity("046H5735")[0]) );
  assert( eq(1760.000000,gp.virtualForecastQuantity("029H9205")[0]) );
  assert( eq(172.679993,gp.virtualForecastQuantity("042H2779")[0]) );
  assert( eq(170.000000,gp.newCost("073H6427")) );
  assert( eq(16.798000,gp.newCost("005K3468")) );
  assert( eq(16.636999,gp.newCost("092G7319")) );
  assert( eq(16.000000,gp.externalDemandQuantity("092G7321")[0]) );
  assert( eq(169.929993,gp.virtualForecastQuantity("006H8825")[0]) );
  assert( eq(168.727997,gp.newCost("096G3576")) );
  assert( eq(164.565002,gp.newCost("093H5966")) );
  assert( eq(15.997000,gp.newCost("010L2047")) );
  assert( eq(15.600000,gp.virtualForecastQuantity("076H4609")[0]) );
  assert( eq(15.600000,gp.externalNonEconomicCoverage("076H4609")[0]) );
  assert( eq(15.090000,gp.newCost("010L1719")) );
  assert( eq(15.000000,gp.internalNonEconomicCoverage("029H9221")[0]) );
  assert( eq(15.000000,gp.internalEconomicCoverage("029H9221")[0]) );
  assert( eq(15.000000,gp.internalDemandQuantity("029H9221")[0]) );
  assert( eq(15.000000,gp.externalNonEconomicCoverage("046H5725")[0]) );
  assert( eq(15.000000,gp.externalDemandQuantity("046H5725")[0]) );
  assert( eq(157.875000,gp.newCost("007H0017")) );
  assert( eq(14.000000,gp.externalNonEconomicCoverage("029H9230")[0]) );
  assert( eq(14.000000,gp.externalEconomicCoverage("029H9230")[0]) );
  assert( eq(14.000000,gp.externalDemandQuantity("029H9230")[0]) );
  assert( eq(1471.500000,gp.virtualForecastQuantity("083H5375")[0]) );
  assert( eq(146.231003,gp.newCost("097H5504")) );
  assert( eq(1450.949951,gp.virtualForecastQuantity("046H5771")[0]) );
  assert( eq(141.130005,gp.virtualForecastQuantity("010L1700")[0]) );
  assert( eq(13.960000,gp.newCost("005K4830")) );
  assert( eq(13.780000,gp.virtualForecastQuantity("010L2047")[0]) );
  assert( eq(13.780000,gp.internalNonEconomicCoverage("010L2047")[0]) );
  assert( eq(13.000000,gp.internalNonEconomicCoverage("083H5375")[0]) );
  assert( eq(13.000000,gp.internalNonEconomicCoverage("082H8496")[0]) );
  assert( eq(13.000000,gp.internalEconomicCoverage("083H5375")[0]) );
  assert( eq(13.000000,gp.internalEconomicCoverage("082H8496")[0]) );
  assert( eq(13.000000,gp.internalDemandQuantity("096G3573")[0]) );
  assert( eq(13.000000,gp.internalDemandQuantity("083H5375")[0]) );
  assert( eq(13.000000,gp.internalDemandQuantity("082H8496")[0]) );
  assert( eq(13.000000,gp.internalDemandQuantity("076H4609")[0]) );
  assert( eq(13.000000,gp.internalDemandQuantity("073H6427")[0]) );
  assert( eq(13.000000,gp.externalNonEconomicCoverage("092G7323")[0]) );
  assert( eq(13.000000,gp.externalNonEconomicCoverage("073H6427")[0]) );
  assert( eq(13.000000,gp.externalNonEconomicCoverage("046H5771")[0]) );
  assert( eq(13.000000,gp.externalEconomicCoverage("092G7323")[0]) );
  assert( eq(13.000000,gp.externalEconomicCoverage("046H5771")[0]) );
  assert( eq(13.000000,gp.externalDemandQuantity("092G7323")[0]) );
  assert( eq(13.000000,gp.externalDemandQuantity("073H6427")[0]) );
  assert( eq(13.000000,gp.externalDemandQuantity("046H5771")[0]) );
  assert( eq(136.901993,gp.newCost("006H9063")) );
  assert( eq(1327.050049,gp.virtualForecastQuantity("082H8875")[0]) );
  assert( eq(1321.160034,gp.virtualForecastQuantity("010L1721")[0]) );
  assert( eq(130.690002,gp.internalNonEconomicCoverage("093F2361")[0]) );
  assert( eq(12.000000,gp.internalNonEconomicCoverage("042H2779")[0]) );
  assert( eq(12.000000,gp.internalNonEconomicCoverage("042H2769")[0]) );
  assert( eq(12.000000,gp.internalNonEconomicCoverage("042H2768")[0]) );
  assert( eq(12.000000,gp.internalEconomicCoverage("042H2779")[0]) );
  assert( eq(12.000000,gp.internalEconomicCoverage("042H2768")[0]) );
  assert( eq(12.000000,gp.internalDemandQuantity("042H2779")[0]) );
  assert( eq(12.000000,gp.internalDemandQuantity("042H2769")[0]) );
  assert( eq(12.000000,gp.internalDemandQuantity("042H2768")[0]) );
  assert( eq(12.000000,gp.internalDemandQuantity("006H9064")[0]) );
  assert( eq(12.000000,gp.externalNonEconomicCoverage("093H4690")[0]) );
  assert( eq(12.000000,gp.externalNonEconomicCoverage("029H9232")[0]) );
  assert( eq(12.000000,gp.externalEconomicCoverage("093H4690")[0]) );
  assert( eq(12.000000,gp.externalEconomicCoverage("029H9232")[0]) );
  assert( eq(12.000000,gp.externalDemandQuantity("093H4690")[0]) );
  assert( eq(12.000000,gp.externalDemandQuantity("029H9232")[0]) );
  assert( eq(125.360001,gp.virtualForecastQuantity("042H2769")[0]) );
  assert( eq(125.000000,gp.virtualForecastQuantity("002K7007")[0]) );
  assert( eq(124.150002,gp.virtualForecastQuantity("002K7011")[0]) );
  assert( eq(11.020000,gp.virtualForecastQuantity("012J5554")[0]) );
  assert( eq(11.000000,gp.internalNonEconomicCoverage("082H8489")[0]) );
  assert( eq(11.000000,gp.internalEconomicCoverage("082H8489")[0]) );
  assert( eq(11.000000,gp.internalDemandQuantity("082H8489")[0]) );
  assert( eq(119.699997,gp.virtualForecastQuantity("011J8912")[0]) );
  assert( eq(117.769997,gp.virtualForecastQuantity("005K3148")[0]) );
  assert( eq(1177.949951,gp.virtualForecastQuantity("046H5776")[0]) );
  assert( eq(112.540001,gp.virtualForecastQuantity("093H4690")[0]) );
  assert( eq(111.038002,gp.newCost("075H7497")) );
  assert( eq(1104.869995,gp.virtualForecastQuantity("046H5775")[0]) );
  assert( eq(10.951000,gp.newCost("007H1150")) );
  assert( eq(10.920000,gp.virtualForecastQuantity("005K9267")[0]) );
  assert( eq(10.576000,gp.newCost("046H5751")) );
  assert( eq(10.355385,gp.internalEconomicCoverage("006H8825")[0]) );
  assert( eq(10.310000,gp.virtualForecastQuantity("002K6539")[0]) );
  assert( eq(10.000000,gp.internalNonEconomicCoverage("005K3148")[0]) );
  assert( eq(10.000000,gp.internalEconomicCoverage("005K3148")[0]) );
  assert( eq(10.000000,gp.internalDemandQuantity("005K3148")[0]) );
  assert( eq(10.000000,gp.externalNonEconomicCoverage("007H1150")[0]) );
  assert( eq(10.000000,gp.externalNonEconomicCoverage("005K3468")[0]) );
  assert( eq(10.000000,gp.externalNonEconomicCoverage("002K4785")[0]) );
  assert( eq(10.000000,gp.externalEconomicCoverage("007H1150")[0]) );
  assert( eq(10.000000,gp.externalEconomicCoverage("005K3468")[0]) );
  assert( eq(10.000000,gp.externalDemandQuantity("007H1150")[0]) );
  assert( eq(10.000000,gp.externalDemandQuantity("005K3468")[0]) );
  assert( eq(10.000000,gp.externalDemandQuantity("002K4785")[0]) );
  assert( eq(109.250000,gp.virtualForecastQuantity("073H9951")[0]) );
  assert( eq(108.905998,gp.newCost("002K0490")) );
  assert( eq(108.896004,gp.newCost("007H0383")) );
  assert( eq(106.347000,gp.newCost("006H8419")) );
  assert( eq(105.977997,gp.newCost("006H9064")) );
  assert( eq(103.079002,gp.newCost("029H9232")) );
  assert( eq(101.740997,gp.newCost("005K4826")) );
  assert( eq(101.413002,gp.newCost("073H9933")) );
  assert( eq(1000.000000,gp.internalNonEconomicCoverage("046H5750")[0]) );
  assert( eq(1000.000000,gp.internalEconomicCoverage("046H5750")[0]) );
  assert( eq(1000.000000,gp.internalDemandQuantity("073H9933")[0]) );
  assert( eq(1000.000000,gp.internalDemandQuantity("046H5750")[0]) );
  assert( eq(0.920000,gp.virtualForecastQuantity("010L1668")[0]) );
  assert( eq(0.920000,gp.internalNonEconomicCoverage("010L1668")[0]) );
  assert( eq(0.560000,gp.virtualForecastQuantity("006H7654")[0]) );
  assert( eq(0.388060,gp.externalEconomicCoverage("029H9367")[0]) );
  assert( eq(0.369048,gp.externalEconomicCoverage("045H8791")[0]) );
  assert( eq(0.360000,gp.virtualForecastQuantity("007H0017")[0]) );
  assert( eq(0.360000,gp.internalNonEconomicCoverage("007H0017")[0]) );
  assert( eq(0.360000,gp.internalEconomicCoverage("007H0017")[0]) );
  assert( eq(0.300000,gp.virtualForecastQuantity("066G5069")[0]) );
  assert( eq(0.300000,gp.internalNonEconomicCoverage("066G5069")[0]) );
  assert( eq(0.080000,gp.virtualForecastQuantity("092G7319")[0]) );
  assert( eq(0.050000,gp.virtualForecastQuantity("006H8419")[0]) );
  assert( eq(0.050000,gp.internalNonEconomicCoverage("006H8419")[0]) );
  assert( eq(0.050000,gp.internalEconomicCoverage("006H8419")[0]) );
  assert( eq(0.000000,gp.virtualForecastQuantity("096G3576")[0]) );
  assert( eq(0.000000,gp.virtualForecastQuantity("011H9623")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("097H5504")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("097H3388")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("096G3576")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("096G3573")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("093H5966")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("093H4690")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("093F2361")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("092G7323")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("092G7321")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("092G7319")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("092G7294")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("092G7245")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("088G4270")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("085G6701")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("083H7126")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("083H5378")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("083H5375")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("082H8897")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("082H8877")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("082H8875")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("082H8496")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("082H8489")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("076H4609")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("075H9601")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("075H7497")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("073H9951")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("073H9946")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("073H9933")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("073H6430")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("073H6427")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("066G5069")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("060H9453")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("046H5776")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("046H5775")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("046H5771")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("046H5768")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("046H5751")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("046H5750")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("046H5735")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("046H5725")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("045H8791")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("042H2817")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("042H2779")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("042H2769")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("042H2768")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("042H2767")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("039H6228")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("030L2898")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("029H9367")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("029H9232")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("029H9230")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("029H9228")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("029H9226")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("029H9221")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("029H9220")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("029H9205")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("012J5554")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("012J4569")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("012J1497")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("012J1446")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("012J0138")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("012J0115")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("011J9992")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("011J9626")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("011J9623")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("011J8912")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("011H9623")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("010L2158")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("010L2047")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("010L1721")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("010L1719")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("010L1700")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("010L1668")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("010H4056")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("007H1150")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("007H0383")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("007H0017")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("006H9064")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("006H9063")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("006H8825")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("006H8419")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("006H7654")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("006H4003")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("006H3862")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("006H2968")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K9398")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K9267")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K8874")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K4830")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K4826")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K3469")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K3468")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K3176")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K3174")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K3172")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K3148")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K3132")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K3117")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("002K7011")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("002K7007")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("002K4785")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("002K0490")[0]) );
  assert( eq(0.000000,gp.noSourceNonEconomicCoverage("000K7907")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("097H5504")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("097H3388")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("096G3576")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("096G3573")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("093H5966")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("093H4690")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("093F2361")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("092G7323")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("092G7321")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("092G7319")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("092G7294")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("092G7245")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("088G4270")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("085G6701")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("083H7126")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("083H5378")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("083H5375")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("082H8897")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("082H8877")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("082H8875")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("082H8496")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("082H8489")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("076H4609")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("075H9601")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("075H7497")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("073H9951")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("073H9946")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("073H9933")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("073H6430")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("073H6427")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("066G5069")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("060H9453")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("046H5776")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("046H5775")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("046H5771")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("046H5768")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("046H5751")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("046H5750")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("046H5735")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("046H5725")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("045H8791")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("042H2817")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("042H2779")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("042H2769")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("042H2768")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("042H2767")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("039H6228")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("030L2898")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("029H9367")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("029H9232")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("029H9230")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("029H9228")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("029H9226")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("029H9221")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("029H9220")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("029H9205")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("012J5554")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("012J4569")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("012J1497")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("012J1446")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("012J0138")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("012J0115")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("011J9992")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("011J9626")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("011J9623")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("011J8912")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("011H9623")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("010L2158")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("010L2047")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("010L1721")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("010L1719")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("010L1700")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("010L1668")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("010H4056")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("007H1150")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("007H0383")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("007H0017")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("006H9064")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("006H9063")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("006H8825")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("006H8419")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("006H7654")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("006H4003")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("006H3862")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("006H2968")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("005K9398")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("005K9267")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("005K8874")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("005K4830")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("005K4826")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("005K3469")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("005K3468")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("005K3176")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("005K3174")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("005K3172")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("005K3148")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("005K3132")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("005K3117")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("002K7011")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("002K7007")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("002K4785")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("002K0490")[0]) );
  assert( eq(0.000000,gp.noSourceEconomicCoverage("000K7907")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("097H5504")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("097H3388")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("096G3576")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("096G3573")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("093H5966")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("093H4690")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("093F2361")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("092G7323")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("092G7321")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("092G7319")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("092G7294")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("092G7245")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("088G4270")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("085G6701")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("083H7126")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("083H5378")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("083H5375")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("082H8897")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("082H8877")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("082H8875")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("082H8496")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("082H8489")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("076H4609")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("075H9601")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("075H7497")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("073H9951")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("073H9946")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("073H9933")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("073H6430")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("073H6427")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("066G5069")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("060H9453")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("046H5776")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("046H5775")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("046H5771")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("046H5768")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("046H5751")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("046H5750")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("046H5735")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("046H5725")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("045H8791")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("042H2817")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("042H2779")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("042H2769")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("042H2768")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("042H2767")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("039H6228")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("030L2898")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("029H9367")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("029H9232")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("029H9230")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("029H9228")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("029H9226")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("029H9221")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("029H9220")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("029H9205")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("012J5554")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("012J4569")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("012J1497")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("012J1446")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("012J0138")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("012J0115")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("011J9992")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("011J9626")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("011J9623")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("011J8912")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("011H9623")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("010L2158")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("010L2047")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("010L1721")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("010L1719")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("010L1700")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("010L1668")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("010H4056")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("007H1150")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("007H0383")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("007H0017")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("006H9064")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("006H9063")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("006H8825")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("006H8419")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("006H7654")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("006H4003")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("006H3862")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("006H2968")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("005K9398")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("005K9267")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("005K8874")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("005K4830")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("005K4826")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("005K3469")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("005K3468")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("005K3176")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("005K3174")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("005K3172")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("005K3148")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("005K3132")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("005K3117")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("002K7011")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("002K7007")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("002K4785")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("002K0490")[0]) );
  assert( eq(0.000000,gp.noSourceDemandQuantity("000K7907")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("096G3576")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("092G7323")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("092G7321")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("092G7319")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("092G7294")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("085G6701")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("083H7126")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("082H8877")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("076H4609")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("075H9601")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("075H7497")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("073H9951")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("073H6430")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("060H9453")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("046H5751")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("046H5735")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("046H5725")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("045H8791")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("042H2817")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("042H2767")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("030L2898")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("029H9367")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("029H9232")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("029H9230")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("029H9228")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("029H9226")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("029H9220")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("012J1446")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("011J9992")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("011H9623")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("010L2158")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("010L1700")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("006H7654")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("006H4003")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("006H3862")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("006H2968")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("005K9398")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("005K9267")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("005K8874")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("005K4830")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("005K4826")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("005K3597")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("005K3176")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("005K3172")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("005K3132")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("005K3117")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("002K7011")[0]) );
  assert( eq(0.000000,gp.internalNonEconomicCoverage("002K6539")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("096G3576")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("093F2361")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("092G7323")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("092G7321")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("092G7319")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("092G7294")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("085G6701")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("083H7126")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("082H8877")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("076H4609")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("075H9601")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("075H7497")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("073H9951")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("073H9946")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("073H9933")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("073H6430")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("073H6427")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("066G5069")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("060H9453")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("046H5768")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("046H5751")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("046H5735")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("046H5725")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("045H8791")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("042H2817")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("042H2767")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("030L2898")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("029H9367")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("029H9232")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("029H9230")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("029H9228")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("029H9226")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("029H9220")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("012J4569")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("012J1446")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("012J0138")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("011J9992")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("011J9623")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("011H9623")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("010L2158")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("010L1700")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("010L1668")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("006H7654")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("006H4003")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("006H3862")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("006H2968")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("005K9398")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("005K9267")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("005K8874")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("005K4830")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("005K4826")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("005K3597")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("005K3176")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("005K3172")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("005K3132")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("005K3117")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("002K7011")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("002K6539")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("002K4785")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("002K0490")[0]) );
  assert( eq(0.000000,gp.internalEconomicCoverage("000K7907")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("092G7323")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("092G7319")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("092G7294")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("085G6701")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("083H7126")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("082H8877")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("075H9601")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("075H7497")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("073H9951")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("073H6430")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("060H9453")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("046H5751")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("046H5735")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("046H5725")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("045H8791")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("042H2817")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("042H2767")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("030L2898")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("029H9367")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("029H9232")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("029H9230")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("029H9228")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("029H9226")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("029H9220")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("012J1446")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("011J9992")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("010L2158")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("010L1700")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("006H7654")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("006H4003")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("006H3862")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("006H2968")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("005K9398")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("005K9267")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("005K8874")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("005K4830")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("005K4826")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("005K3597")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("005K3176")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("005K3172")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("005K3132")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("005K3117")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("002K7011")[0]) );
  assert( eq(0.000000,gp.internalDemandQuantity("002K6539")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("097H5504")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("097H3388")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("096G3576")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("096G3573")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("093H5966")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("092G7319")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("092G7294")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("092G7245")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("085G6701")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("082H8897")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("082H8875")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("082H8496")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("082H8489")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("075H9601")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("075H7497")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("073H9946")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("073H9933")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("066G5069")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("046H5775")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("046H5768")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("046H5751")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("046H5735")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("042H2817")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("042H2779")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("042H2769")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("042H2768")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("042H2767")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("039H6228")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("030L2898")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("029H9228")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("029H9226")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("029H9221")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("029H9205")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("012J5554")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("012J4569")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("012J1497")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("012J1446")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("012J0138")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("012J0115")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("011J9992")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("011J9626")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("011J9623")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("011J8912")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("011H9623")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("010L2047")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("010L1719")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("010L1668")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("007H0383")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("007H0017")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("006H9063")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("006H8419")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("006H7654")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("006H4003")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("006H3862")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("006H2968")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("005K9398")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("005K9267")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("005K8874")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("005K4830")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("005K4826")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("005K3597")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("005K3174")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("005K3172")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("005K3148")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("005K3132")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("002K7011")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("002K6539")[0]) );
  assert( eq(0.000000,gp.externalNonEconomicCoverage("002K0490")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("097H5504")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("097H3388")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("096G3576")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("096G3573")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("093H5966")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("092G7319")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("092G7294")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("092G7245")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("085G6701")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("082H8897")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("082H8875")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("082H8496")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("082H8489")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("076H4609")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("075H9601")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("075H7497")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("073H9951")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("073H9946")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("073H9933")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("073H6430")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("073H6427")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("066G5069")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("046H5775")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("046H5768")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("046H5751")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("046H5735")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("046H5725")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("042H2817")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("042H2779")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("042H2769")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("042H2768")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("042H2767")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("039H6228")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("030L2898")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("029H9228")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("029H9226")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("029H9221")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("029H9205")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("012J5554")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("012J4569")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("012J1497")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("012J1446")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("012J0138")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("012J0115")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("011J9992")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("011J9626")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("011J9623")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("011J8912")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("011H9623")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("010L2047")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("010L1719")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("010L1668")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("007H0383")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("007H0017")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("006H9063")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("006H8419")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("006H7654")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("006H4003")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("006H3862")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("006H2968")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("005K9398")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("005K9267")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("005K8874")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("005K4830")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("005K4826")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("005K3597")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("005K3176")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("005K3174")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("005K3172")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("005K3148")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("005K3132")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("002K7011")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("002K6539")[0]) );
  assert( eq(0.000000,gp.externalEconomicCoverage("002K0490")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("097H5504")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("097H3388")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("096G3576")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("096G3573")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("093H5966")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("092G7319")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("092G7294")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("092G7245")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("085G6701")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("082H8897")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("082H8875")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("082H8496")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("082H8489")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("075H9601")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("075H7497")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("073H9946")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("073H9933")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("066G5069")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("046H5775")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("046H5768")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("046H5751")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("046H5735")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("042H2817")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("042H2779")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("042H2769")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("042H2768")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("042H2767")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("039H6228")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("030L2898")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("029H9228")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("029H9226")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("029H9221")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("029H9205")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("012J5554")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("012J4569")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("012J1497")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("012J1446")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("012J0138")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("012J0115")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("011J9992")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("011J9626")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("011J9623")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("011J8912")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("011H9623")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("010L2047")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("010L1719")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("010L1668")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("007H0383")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("007H0017")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("006H9063")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("006H8419")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("006H7654")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("006H4003")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("006H3862")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("006H2968")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("005K9398")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("005K9267")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("005K8874")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("005K4830")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("005K4826")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("005K3597")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("005K3174")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("005K3172")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("005K3148")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("005K3132")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("002K7011")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("002K6539")[0]) );
  assert( eq(0.000000,gp.externalDemandQuantity("002K0490")[0]) );
    
#endif
    
}


@


1.4
log
@Changed directory for running on windows
@
text
@d621 50
d679 1
a1429 52
#if 0
      
      // Tell WIT about MTM
      witAddPart( witRun(), mtm.c_str(), WitMATERIAL );
      
      // Add mtm App Data
      GARSmtmAppData * mad = new GARSmtmAppData;
      witSetPartAppData( witRun(), mtm.c_str(), (void *) mad );
      
      // Save mtm part names
      mtmNames_.push_back(mtm);
      
      // Add disassmbly operation and connect to machine
      witAddOperation( witRun(), (disassembleMtmOpPrefix()+mtm).c_str() );
      witAddBomEntry(  witRun(), (disassembleMtmOpPrefix()+mtm).c_str(), mtm.c_str() ); 
      

      // Add add acquistion operation
      witAddOperation( witRun(), (acquireMtmOpPrefix()+mtm).c_str() );
      witAddBopEntry(  witRun(), (acquireMtmOpPrefix()+mtm).c_str(), mtm.c_str() ); 
      

      // Add add acquirable mtm parts
      witAddPart( witRun(), (acquirableMtmPartPrefix()+mtm).c_str(), WitMATERIAL );
      witAddBomEntry(  witRun(), 
        (acquireMtmOpPrefix()+mtm).c_str(), 
        (acquirableMtmPartPrefix()+mtm).c_str() );

      
      float sv[12];
      sv[ 0] = supplyFileIter.mo0AsFloat();
      sv[ 1] = supplyFileIter.mo1AsFloat();
      sv[ 2] = supplyFileIter.mo2AsFloat();
      sv[ 3] = supplyFileIter.mo3AsFloat();
      sv[ 4] = supplyFileIter.mo4AsFloat();
      sv[ 5] = supplyFileIter.mo5AsFloat();
      sv[ 6] = supplyFileIter.mo6AsFloat();
      sv[ 7] = supplyFileIter.mo7AsFloat();
      sv[ 8] = supplyFileIter.mo8AsFloat();
      sv[ 9] = supplyFileIter.mo9AsFloat();
      sv[10] = supplyFileIter.mo10AsFloat();
      sv[11] = supplyFileIter.mo11AsFloat();
      
      witSetPartSupplyVol( witRun(), (acquirableMtmPartPrefix()+mtm).c_str(), sv );
      
      // Add demand for MTM equal to the supply
      witAddDemand( witRun(), mtm.c_str(), mtmDemandName().c_str() );
      
      // Add Demand App Data
      GARSdemandAppData * dad = new GARSdemandAppData(nPeriods);
      witSetDemandAppData( witRun(), mtm.c_str(), mtmDemandName().c_str(), (void *) dad );
#endif
d1467 1
a1467 12
      
#if 0
      // Save MTM Sales in MTM app data
      GARSmtmAppData * mad;
      witGetPartAppData(witRun(), mtm.c_str(), (void**)&mad );
      assert( mad != NULL );
      double mtmRevenueFromSale = mtmFileIter.mtmSalePriceAsFloat();
      double mtmNibPrice = mtmFileIter.mtmNibPriceAsFloat();
      mad->mtmSalePrice(mtmRevenueFromSale);
      mad->mtmNibPrice(mtmNibPrice);
#endif
      
d1858 4
a1861 2
        timeValueOfMoney(nPeriods, 10.*externalDemandCostFactor()* rev,
          stockCost );
@


1.3
log
@updated files
@
text
@d2120 3
d2124 1
@


1.2
log
@Updated with code from windows platform
@
text
@d12 2
d23 1
d43 1
a43 1
const std::string & GARSproblem::mtmDemandName() { return mtmDemandName_; }
d64 47
d112 5
d132 1
d134 2
d151 1
d153 2
d170 1
d172 2
d189 1
d191 2
a193 1

d273 65
d371 1
a448 1

d477 1
d591 29
d852 83
d961 1
d970 9
a978 2


d1258 71
d1347 1
d1362 18
d1430 1
d1463 5
d1469 1
d1478 1
d1745 1
a1745 1
          <<"   MTM: " <<operation.c_str()                             <<endl
d1790 1
d1851 3
d1855 1
a1855 1
          (type1Or4PartPrefix()+pn).c_str(), subCost );
d1863 1
a1863 1
          subType1ForTypeAfsCostFactor() * externalDemandCostFactor() * partRevFileIter.revenueTypeExternalAsFloat(),
d1867 5
a1871 1
          subCost );          
d1873 1
a1873 1
          (typeAfsOr1PartPrefix()+pn).c_str(), subCost );
d1879 1
@


1.1
log
@Initial revision
@
text
@d19 1
d24 3
a26 1
const std::string GARSproblem::internalDemandName_ = "Internal";
d28 11
d42 3
a44 1
const std::string & GARSproblem::internalDemandName(){ return internalDemandName_; }
d46 11
d62 398
d468 13
d482 93
a574 1
const std::vector<float> &  GARSproblem::internalEconomicCoverage( const std::string & pn ) const
d576 88
a663 3
  const GARSdemandAppData * dad;
  witGetDemandAppData( mutableWitRun(), pn.c_str(), internalDemandName().c_str(), (void**)&dad );
  const std::vector<float> & retVal = dad->econCovQty();
d666 1
a666 1
const std::vector<float> &  GARSproblem::externalEconomicCoverage( const std::string & pn ) const
d668 4
a671 3
  const GARSdemandAppData * dad;
  witGetDemandAppData( mutableWitRun(), pn.c_str(), externalDemandName().c_str(), (void**)&dad );
  const std::vector<float> & retVal = dad->econCovQty();
d674 1
a674 1
const std::vector<float> &  GARSproblem::noSourceEconomicCoverage( const std::string & pn ) const
d676 4
a679 3
  const GARSdemandAppData * dad;
  witGetDemandAppData( mutableWitRun(), pn.c_str(), noSourceDemandName().c_str(), (void**)&dad );
  const std::vector<float> & retVal = dad->econCovQty();
d682 1
a682 1
const std::vector<float> &  GARSproblem::internalNonEconomicCoverage( const std::string & pn ) const
d684 4
a687 3
  const GARSdemandAppData * dad;
  witGetDemandAppData( mutableWitRun(), pn.c_str(), internalDemandName().c_str(), (void**)&dad );
  const std::vector<float> & retVal = dad->nonEconCovQty();
d690 2
a691 1
const std::vector<float> &  GARSproblem::externalNonEconomicCoverage( const std::string & pn ) const
d693 4
a696 3
  const GARSdemandAppData * dad;
  witGetDemandAppData( mutableWitRun(), pn.c_str(), externalDemandName().c_str(), (void**)&dad );
  const std::vector<float> & retVal = dad->nonEconCovQty();
d699 2
a700 1
const std::vector<float> &  GARSproblem::noSourceNonEconomicCoverage( const std::string & pn ) const
d702 4
a705 3
  const GARSdemandAppData * dad;
  witGetDemandAppData( mutableWitRun(), pn.c_str(), noSourceDemandName().c_str(), (void**)&dad );
  const std::vector<float> & retVal = dad->nonEconCovQty();
d708 2
a709 1
const std::vector<float> &  GARSproblem::virtualForecastQuantity( const std::string & pn ) const
d711 4
a714 3
  const GARSpartAppData * pad;
  witGetPartAppData( mutableWitRun(), pn.c_str(), (void**)&pad );
  const std::vector<float> & retVal = pad->fcstQty();
d717 1
a717 1
const std::vector<float> &  GARSproblem::mtmDemandQuantity( const std::string & mtm ) const
d719 4
a722 3
  const GARSoperationAppData * oad;
  witGetOperationAppData( mutableWitRun(), mtm.c_str(), (void**)&oad );
  const std::vector<float> & retVal = oad->demanQty();
d727 9
a735 1
const std::vector<float> &  GARSproblem::internalDemandQuantity( const std::string & pn ) const
d738 2
a739 1
  witGetDemandAppData( mutableWitRun(), pn.c_str(), internalDemandName().c_str(), (void**)&dad );
d743 1
a743 1
const std::vector<float> &  GARSproblem::externalDemandQuantity( const std::string & pn ) const
d746 2
a747 1
  witGetDemandAppData( mutableWitRun(), pn.c_str(), externalDemandName().c_str(), (void**)&dad );
d751 1
a751 1
const std::vector<float> &  GARSproblem::noSourceDemandQuantity( const std::string & pn ) const
d754 10
a763 1
  witGetDemandAppData( mutableWitRun(), pn.c_str(), noSourceDemandName().c_str(), (void**)&dad );
d768 2
a769 1
double GARSproblem::newCost( const std::string & pn ) const
d771 31
a801 3
  const GARSpartAppData * pad;
  witGetPartAppData( mutableWitRun(), pn.c_str(), (void**)&pad );
  double retVal = pad->newCost();
d809 38
a846 1
  witGetPartSupplyVol( mutableWitRun(), mtm.c_str(), &sv );
d862 35
d919 51
a969 38
// Save CoverParts in Demand AppData.
// Covered parts is the wit ShipVol Attribute.
// This method is used twice (econCov and nonEcon Covered parts).
// non-econ assumes all mtm's are disassembled.
void GARSproblem::saveCoveredPartsQty(
                                      void (GARSdemandAppData::*appDataSetMethod)( int, const float * ) )
{
  int nParts;
  char ** partList;
  int nPeriods;
  witGetNPeriods( witRun(), &nPeriods );
  witGetParts ( witRun(), &nParts, &partList );
  for ( int p=0; p<nParts; ++p ) {
    
    int nPartDemands;
    char ** demandList;
    witGetPartDemands( witRun(), partList[p], &nPartDemands, &demandList);
    for ( int d=0; d<nPartDemands; ++d ) {
      
      // Do not save MTM demand shipment information
      if (demandList[d]==mtmDemandName()) continue;
      
      // Get ShipVol
      float * shipVol;
      witGetDemandShipVol( witRun(), partList[p], demandList[d], &shipVol );
      
      GARSdemandAppData * dad;
      witGetDemandAppData( witRun(), partList[p], demandList[d], (void**)&dad );
      (dad->*appDataSetMethod)(nPeriods,shipVol);
      
      witFree(shipVol);
      witFree(demandList[d]);
    }
    
    witFree(demandList);
    witFree(partList[p]);
  }
  witFree(partList);
d972 25
d998 5
a1002 49
#if 0
void GARSproblem::writePartDemandPeriodDemandvolShipvolRev( 
                                                           std::string fileName,
                                                           std::string fileHeadings,
                                                           const std::vector<float> & (GARSdemandAppData::*getCovQty)()const,
                                                           const std::vector<float> & (GARSdemandAppData::*getDemQty)()const )
                                                           const
{
  FILE * filePtr = fopen(fileName.c_str(),"w");
  fprintf(filePtr,"%s\n",fileHeadings.c_str() );
  int nParts;
  char ** partList;
  int nPeriods;
  witGetNPeriods( mutableWitRun(), &nPeriods );
  witGetParts ( mutableWitRun(), &nParts, &partList );
  for ( int p=0; p<nParts; ++p ) {
    
    int nPartDemands;
    char ** demandList;
    witGetPartDemands( mutableWitRun(), partList[p], &nPartDemands, &demandList);
    
    GARSpartAppData * pad;
    witGetPartAppData( mutableWitRun(), partList[p], (void**)&pad );
    assert( pad!=NULL );
    double nc=pad->newCost();
    
    for ( int d=0; d<nPartDemands; ++d ) {
      
      // Do not write MTM demand shipment information
      if (demandList[d]==mtmDemandName()) continue;
      
      // Get DemandVol and CoveredVol
      GARSdemandAppData * dad;
      witGetDemandAppData( mutableWitRun(), partList[p], demandList[d], (void**)&dad );
      
      const std::vector<float> & covQty = (dad->*getCovQty)();
      const std::vector<float> & demQty = (dad->*getDemQty)();
      
      for ( int i=0; i<nPeriods; ++i ) {
        if ( demQty[i]==0 && covQty[i]==0 ) continue;
        float rev = covQty[i] * nc;
        fprintf(filePtr,"\"%s\",\"%s\",%d,%f,%f,%f\n",
          partList[p], demandList[d], i+1, demQty[i], covQty[i], rev );
      }
      witFree(demandList[d]);
    }
    
    witFree(demandList);
    witFree(partList[p]);
a1003 2
  witFree(partList);
  fclose(filePtr);
a1004 1
#endif
d1016 1
a1018 2
  const int periodsPerYear = 12;
  const float discountRate = 0.05f;
d1026 1
a1026 1
  // Setup supply file
d1042 3
a1044 3
      // Add Part App Data
      GARSpartAppData * pad = new GARSpartAppData;
      witSetPartAppData( witRun(), mtm.c_str(), (void *) pad );
d1047 1
a1047 1
      mtmNames().push_back(mtm);
d1050 2
a1051 2
      witAddOperation( witRun(), mtm.c_str() );
      witAddBomEntry(  witRun(), mtm.c_str(), mtm.c_str() );
d1053 12
a1064 3
      // Set operation appData
      GARSoperationAppData * oad = new GARSoperationAppData(nPeriods);
      witSetOperationAppData( witRun(), mtm.c_str(), (void *) oad );
d1080 1
a1080 1
      witSetPartSupplyVol( witRun(), mtm.c_str(), sv );
a1088 2
      witSetDemandDemandVol( witRun(), mtm.c_str(), mtmDemandName().c_str(), sv );
      
d1093 1
a1093 1
  // Setup mtmsale file
d1121 8
a1128 4
      // Set up reward of shipping to MTM demand.
      // Consider the time value of money
      float obj1ShipReward[12];
      obj1ShipReward[0] = mtmFileIter.mtmsalesAsFloat();
d1130 28
a1157 2
      for ( int i=1; i<nPeriods; ++i ) {
        obj1ShipReward[i] = obj1ShipReward[i-1] * (1.f-discountRate/periodsPerYear);
a1158 2
      
      witSetDemandObj1ShipReward( witRun(), mtm.c_str(), mtmDemandName().c_str(), obj1ShipReward );
d1162 2
a1163 3
  
  
  // Setup demand file
d1175 2
a1176 1
      // if wit does not know about this part, then create it
d1178 1
a1178 1
      witGetPartExists( witRun(), pn.c_str(), &partExists );
d1180 10
a1189 3
        witAddPart( witRun(), pn.c_str(), WitMATERIAL );
        GARSpartAppData * pad = new GARSpartAppData;
        witSetPartAppData( witRun(), pn.c_str(), (void *) pad );
d1191 33
d1225 5
a1229 3
        witAddDemand( witRun(), pn.c_str(), internalDemandName().c_str() );
        witAddDemand( witRun(), pn.c_str(), externalDemandName().c_str() );
        witAddDemand( witRun(), pn.c_str(), noSourceDemandName().c_str() );
d1234 3
a1236 1
        witSetDemandAppData( witRun(), pn.c_str(), internalDemandName().c_str(), (void *) dad );
d1238 1
a1238 1
        witSetDemandAppData( witRun(), pn.c_str(), externalDemandName().c_str(), (void *) dad );
d1240 3
a1242 1
        witSetDemandAppData( witRun(), pn.c_str(), noSourceDemandName().c_str(), (void *) dad );
d1244 12
a1255 2
        // Save demanded part names
        pnNames().push_back(pn);
d1260 18
a1277 4
          witGetPartSupplyVol( witRun(), pn.c_str(), &sv );
          sv[0] = loosepFile.quantityAsFloat(pn);
          witSetPartSupplyVol( witRun(), pn.c_str(), sv );
          witFree(sv);
d1311 6
a1316 33
      // Set internal demand
      float * intDemV;
      witGetDemandDemandVol( witRun(), pn.c_str(), internalDemandName().c_str(), &intDemV );
      intDemV[period-1] = demandFileIter.internalDemQtyAsFloat();
      witSetDemandDemandVol( witRun(), pn.c_str(), internalDemandName().c_str(), intDemV );
      GARSdemandAppData * intDad;
      witGetDemandAppData(witRun(), pn.c_str(), internalDemandName().c_str(), (void**)&intDad );
      assert( intDad != NULL );
      intDad->demQty(nPeriods,intDemV);
      witFree( intDemV );
      
      
      // Set external demand
      float * extDemV;
      witGetDemandDemandVol( witRun(), pn.c_str(), externalDemandName().c_str(), &extDemV );
      extDemV[period-1] = demandFileIter.externalDemQtyAsFloat();
      witSetDemandDemandVol( witRun(), pn.c_str(), externalDemandName().c_str(), extDemV );
      GARSdemandAppData * extDad;
      witGetDemandAppData(witRun(), pn.c_str(), externalDemandName().c_str(), (void**)&extDad );
      assert( extDad != NULL );
      extDad->demQty(nPeriods,extDemV);
      witFree( extDemV );
      
      // Set No Source Demand
      float * noSrcDemV;
      witGetDemandDemandVol( witRun(), pn.c_str(), noSourceDemandName().c_str(), &noSrcDemV );
      noSrcDemV[period-1] = demandFileIter.noSourceDemQtyAsFloat();
      witSetDemandDemandVol( witRun(), pn.c_str(), noSourceDemandName().c_str(), noSrcDemV );
      GARSdemandAppData * noSrcDad;
      witGetDemandAppData(witRun(), pn.c_str(), noSourceDemandName().c_str(), (void**)&noSrcDad );
      assert( noSrcDad != NULL );
      noSrcDad->demQty(nPeriods,noSrcDemV);
      witFree( noSrcDemV );
d1318 31
a1348 9
      // Lowerbound to ensure shipping to no source demand
      float * noSrcCumShipBndsHlb;
      float * noSrcCumShipBndsSlb;
      float * noSrcCumShipBndsHub;
      witGetDemandCumShipBounds( witRun(), pn.c_str(), "NoSource", 
        &noSrcCumShipBndsHlb, &noSrcCumShipBndsSlb, &noSrcCumShipBndsHub );
      float noSrcDem = demandFileIter.noSourceDemQtyAsFloat();
      for ( int p = period-1; p<nPeriods; ++p ) {
        noSrcCumShipBndsSlb[p] += noSrcDem;
a1349 5
      witSetDemandCumShipBounds( witRun(), pn.c_str(), "NoSource", 
        noSrcCumShipBndsHlb, noSrcCumShipBndsSlb, noSrcCumShipBndsHub );
      witFree( noSrcCumShipBndsHlb );
      witFree( noSrcCumShipBndsSlb );
      witFree( noSrcCumShipBndsHub );
d1354 1
a1354 1
  // Setup bom file
d1359 2
a1360 2
    float * obj1ShipRewardInternal = new float[nPeriods];
    float * obj1ShipRewardExternal = new float[nPeriods];
d1369 1
a1369 1
      std::string operation = mtm;  //Disassemble mtm
d1373 1
a1373 1
      witGetPartExists( witRun(), pn.c_str(), &partExists );
d1386 1
a1386 2
      // If disassembly operation does exist, then create it
#ifdef NDEBUG
d1389 10
a1398 7
      assert( operationExists );
#endif
#if 0
      if ( !operationExists ) {
        // Add disassmbly operation and connect to machine
        witAddOperation( witRun(), operation.c_str() );
        witAddBomEntry( witRun(), operation.c_str(), mtm.c_str() );
a1399 1
#endif
d1401 26
a1426 17
      // connect part to disassebly operation
      witAddBopEntry( witRun(), operation.c_str(), pn.c_str() );
      int nBopEntries;
      witGetOperationNBopEntries( witRun(), operation.c_str(), &nBopEntries );
      float prodRate = bomFileIter.yieldAsFloat();
      for( int p=0; p<nPeriods; ++p ) prodRateV[p] = prodRate;
      witSetBopEntryProductRate( witRun(), operation.c_str(), nBopEntries-1, prodRateV );
      
      // Set up reward for shipping to internal
      // Consider the time value of money
      float newBuy = bomFileIter.newBuyAsFloat();
      obj1ShipRewardInternal[0] = newBuy * 0.5f;
      obj1ShipRewardExternal[0] = newBuy * 0.8f;
      
      for ( int i=1; i<nPeriods; ++i ) {
        obj1ShipRewardInternal[i] = obj1ShipRewardInternal[i-1] * (1.f-discountRate/periodsPerYear);
        obj1ShipRewardExternal[i] = obj1ShipRewardExternal[i-1] * (1.f-discountRate/periodsPerYear);
a1427 10
      
      witSetDemandObj1ShipReward( witRun(), pn.c_str(), "Internal", obj1ShipRewardInternal );
      witSetDemandObj1ShipReward( witRun(), pn.c_str(), "External", obj1ShipRewardExternal );
      
      // Save new part cost   
      GARSpartAppData * pad;
      witGetPartAppData( witRun(), pn.c_str(), (void**)&pad );
      assert( pad!= NULL);
      pad->newCost( newBuy );
      
a1428 1
    
a1429 2
    delete []obj1ShipRewardInternal;
    delete []obj1ShipRewardExternal;
a1431 2
  // Finally all the data is in place.
  }
d1433 1
a1433 4
  
 
  //------------------------------------------------------
  void  GARSproblem::solve() 
d1435 2
a1436 2
    int nPeriods;
    witGetNPeriods(mutableWitRun(), &nPeriods);
d1438 2
a1439 3
    // Now solve problem
    witSetAccAfterOptImp (witRun(), WitTRUE);
    witOptImplode( witRun() );
d1441 26
a1466 24
    saveCoveredPartsQty( &GARSdemandAppData::econCovQty);
    
    // Save MTM disassembly information
    {
      int nOperations;
      char ** operationList;
      witGetOperations ( witRun(), &nOperations, &operationList );
      for ( int nop=0; nop<nOperations; ++nop ) {
        
        // Get operation execution volume
        float * execVol;
        witGetOperationExecVol( witRun(), operationList[nop], &execVol );
        
#if 0
        GARSoperationAppData * oad = new GARSoperationAppData(nPeriods);
        witSetOperationAppData( witRun(), operationList[nop], (void *) oad );
#else
        GARSoperationAppData * oad;
        witGetOperationAppData( witRun(), operationList[nop], (void **) &oad );
#endif
        oad->demanQty(nPeriods,execVol);
        
        witFree(execVol);
        witFree(operationList[nop]);
d1468 27
a1494 29
      witFree(operationList);
    }
    
    
    
    
    // Now solve 2nd problem where there is no MTM demand.
    // That is MTM's are disassembled to satisfy demand.
    // This can be accomplished by setting demandVol to 0 and/or 
    // obj1ShipReward to 0.
    // Write number of parts shipped to each demand
    {
      assert( nPeriods<12 );
      float zeroTimeVec[12];
      for ( int t=0; t<=nPeriods; t++ ) zeroTimeVec[t]=0.0f;
      int nParts;
      char ** partList;
      witGetParts ( witRun(), &nParts, &partList );
      for ( int p=0; p<nParts; ++p ) {
        
        int nPartDemands;
        char ** demandList;
        witGetPartDemands( witRun(), partList[p], &nPartDemands, &demandList);
        for ( int d=0; d<nPartDemands; ++d ) {        
          if ( demandList[d]==mtmDemandName() ) {
            // Set ship reward to zero
            witSetDemandObj1ShipReward( witRun(), partList[p], demandList[d], zeroTimeVec );
            witFree(demandList[d]);
          }
d1496 6
a1501 3
        
        witFree(demandList);
        witFree(partList[p]);
d1503 13
a1515 19
      witFree(partList);
    }
    
    
    //Solve problem again
    witOptImplode( witRun() );
    
    
    saveCoveredPartsQty( &GARSdemandAppData::nonEconCovQty);
    
    
    // Now set part demand to be infinite to see parts that could be obtained by disassembling all MTMs
    {
      assert( nPeriods<12 );
      float infDemTimeVec[12];
      float zeroTimeVec[12];
      for ( int t=0; t<=nPeriods; t++ ) {
        infDemTimeVec[t]=FLT_MAX/(2*nPeriods);
        zeroTimeVec[t]=0.0f;
d1517 4
a1520 70
      int nParts;
      char ** partList;
      witGetParts ( witRun(), &nParts, &partList );
      for ( int p=0; p<nParts; ++p ) {
        
        int nPartDemands;
        char ** demandList;
        witGetPartDemands( witRun(), partList[p], &nPartDemands, &demandList);
        for ( int d=0; d<nPartDemands; ++d ) {
          // If MTM demand, then skip
          if ( demandList[d]==mtmDemandName() ) {
            continue;
          }
          // If nosource demand, then set demand to zero
          else if ( demandList[d]==noSourceDemandName() ) {
            witSetDemandDemandVol( witRun(), partList[p], demandList[d], zeroTimeVec );
          }
          // If Internal demand, then set demand to zero
          else if ( demandList[d]==internalDemandName() ) {
            witSetDemandDemandVol( witRun(), partList[p], demandList[d], zeroTimeVec );
          } else {
            // If external demand, then set demand to infinite
            assert( demandList[d]==externalDemandName() ); 
            witSetDemandDemandVol( witRun(), partList[p], demandList[d], infDemTimeVec );
          }
          witFree(demandList[d]);
        }  
        
        witFree(demandList);
        witFree(partList[p]);
      }
      witFree(partList);
    }
    
    //Solve problem again to get fcstQty
    witOptImplode( witRun() );
    
    // save fcstQty in part app data
    {
      int nParts;
      char ** partList;
      int nPeriods;
      witGetNPeriods( witRun(), &nPeriods );
      witGetParts ( witRun(), &nParts, &partList );
      for ( int p=0; p<nParts; ++p ) {
        
        int nPartDemands;
        char ** demandList;
        witGetPartDemands( witRun(), partList[p], &nPartDemands, &demandList);
        for ( int d=0; d<nPartDemands; ++d ) {
          
          // Since infinite demand was added to external demand,
          // and all other demand was set to zero, only process externalDemand
          if ( demandList[d] != externalDemandName() ) continue;
          float * shipVol;
          witGetDemandShipVol( witRun(), partList[p], demandList[d], &shipVol );
          
          GARSpartAppData * pad;
          witGetPartAppData( witRun(), partList[p], (void**)&pad );
          pad->fcstQty(nPeriods,shipVol);
          
          witFree(shipVol);
          witFree(demandList[d]);
        }
        
        witFree(demandList);
        witFree(partList[p]);
      }
      witFree(partList);
    }
d1522 1
d1524 16
d1542 20
a1561 15
  // default constructor
  GARSproblem::GARSproblem()
    :
  wr_(NULL),
    pnNames_(),
    mtmNames_()
  {
    witNewRun( &wr_ );
    witInitialize( witRun() );
    
    // Turn off WIT informational messages
    witSetMesgTimesPrint( witRun(), WitTRUE, WitINFORMATIONAL_MESSAGES, 0);
    // Turn off warning msg about long names.
    witSetMesgTimesPrint( witRun(), WitTRUE, 338, 0);
  }
d1563 43
a1605 4
  // destructor
  GARSproblem::~GARSproblem()
  {
    gutsOfDestructor();
d1607 14
d1622 1
d1624 1
a1624 4
  
  // copy constructor
  GARSproblem::GARSproblem( const GARSproblem& source ):
  wr_(NULL)
d1626 11
a1636 11
    gutsOfCopy(source);
  }
  
  // assignment operator
  GARSproblem&
    GARSproblem::operator=(const GARSproblem& rhs)
  {  
    if (this != &rhs) { 
      if ( wr_ != NULL ) gutsOfDestructor();
      wr_ = NULL;
      gutsOfCopy(rhs);
d1638 1
a1638 1
    return *this;
d1641 1
a1641 2
  // copy object
  void GARSproblem::gutsOfCopy( const GARSproblem& source )
d1643 12
a1654 16
    // Copy Wit Run
    witCopyData(wr_,source.wr_);
    
    // Copy AppData operation appData
    {
      int nOperations;
      char ** operationList;
      witGetOperations ( witRun(), &nOperations, &operationList );
      for ( int nop=0; nop<nOperations; ++nop ) { 
        GARSoperationAppData * srcOad;
        witGetOperationAppData( source.wr_, operationList[nop], (void**)&srcOad );
        if (srcOad!=NULL) {
          GARSoperationAppData * oad = new GARSoperationAppData(*srcOad);
          witSetOperationAppData( wr_, operationList[nop], oad );
        }
        witFree(operationList[nop]);
d1656 11
a1666 34
      witFree(operationList);
    }
    
    // Copy part and demand appData
    {
      int nParts;
      char ** partList;
      int nPeriods;
      witGetNPeriods( witRun(), &nPeriods );
      witGetParts ( witRun(), &nParts, &partList );
      for ( int p=0; p<nParts; ++p ) {
        
        GARSpartAppData * srcPad;
        witGetPartAppData( source.wr_, partList[p], (void**)&srcPad );
        if ( srcPad != NULL ) {
          GARSpartAppData * pad = new GARSpartAppData(*srcPad);
          witSetPartAppData( wr_, partList[p], pad );
        }
        
        int nPartDemands;
        char ** demandList;
        witGetPartDemands( witRun(), partList[p], &nPartDemands, &demandList);
        for ( int d=0; d<nPartDemands; ++d ) {      
          GARSdemandAppData * srcDad;
          witGetDemandAppData( source.wr_, partList[p], demandList[d], (void**)&srcDad );
          if ( srcDad != NULL ) {
            GARSdemandAppData * dad = new GARSdemandAppData(*srcDad);
            witSetDemandAppData( wr_, partList[p], demandList[d], (void**)&dad );
          }
          witFree(demandList[d]);
        }
        
        witFree(demandList);
        witFree(partList[p]);
d1668 3
a1670 1
      witFree(partList);
d1672 1
a1672 4
    
    pnNames_  = source.pnNames_;
    mtmNames_ = source.mtmNames_;
    
d1675 19
a1693 2
  // destructor
  void GARSproblem::gutsOfDestructor()
d1695 10
a1704 12
    // delete operation appData
    {
      int nOperations;
      char ** operationList;
      witGetOperations ( witRun(), &nOperations, &operationList );
      for ( int nop=0; nop<nOperations; ++nop ) { 
        GARSoperationAppData * oad;
        witGetOperationAppData( witRun(), operationList[nop], (void**)&oad );
        delete oad;   
        witFree(operationList[nop]);
      }
      witFree(operationList);
d1706 29
a1734 26
    
    // delete part and demand appData
    {
      int nParts;
      char ** partList;
      int nPeriods;
      witGetNPeriods( witRun(), &nPeriods );
      witGetParts ( witRun(), &nParts, &partList );
      for ( int p=0; p<nParts; ++p ) {
        
        GARSpartAppData * pad;
        witGetPartAppData( witRun(), partList[p], (void**)&pad );
        delete pad;
        
        int nPartDemands;
        char ** demandList;
        witGetPartDemands( witRun(), partList[p], &nPartDemands, &demandList);
        for ( int d=0; d<nPartDemands; ++d ) {      
          GARSdemandAppData * dad;
          witGetDemandAppData( witRun(), partList[p], demandList[d], (void**)&dad );
          delete dad;
          witFree(demandList[d]);
        }
        
        witFree(demandList);
        witFree(partList[p]);
d1736 3
a1738 1
      witFree(partList);
d1740 1
a1740 4
    
    // delete the witRun
    witDeleteRun(witRun());
    
d1743 2
d1746 4
a1749 1
  
d1753 13
a1765 5
  //------------------------------------------------------------------------------
  // Test function
  //------------------------------------------------------------------------------
  void
    GARSproblem::test()
d1767 18
a1784 3
    OsiRelFltEq eq(1e-05);
      GARSproblem gp;
  gp.readFiles(1,"../data/original2000");
d1786 1162
a2948 1162
    int nP = gp.nPeriods();
    assert( nP == 1 );
    const std::vector<std::string> & pns = gp.partNames();

    assert( eq(9.950000,gp.virtualForecastQuantity("085G6701")[0]) );
assert( eq(9.450000,gp.virtualForecastQuantity("029H9228")[0]) );
assert( eq(9.435324,gp.internalEconomicCoverage("042H2769")[0]) );
assert( eq(9.160000,gp.virtualForecastQuantity("092G7294")[0]) );
assert( eq(9.000000,gp.internalNonEconomicCoverage("082H8897")[0]) );
assert( eq(9.000000,gp.internalEconomicCoverage("082H8897")[0]) );
assert( eq(9.000000,gp.internalDemandQuantity("082H8897")[0]) );
assert( eq(95.169998,gp.virtualForecastQuantity("006H4003")[0]) );
assert( eq(90.440002,gp.virtualForecastQuantity("011J9626")[0]) );
assert( eq(90.440002,gp.virtualForecastQuantity("010H4056")[0]) );
assert( eq(8.760000,gp.virtualForecastQuantity("006H9064")[0]) );
assert( eq(8.700000,gp.virtualForecastQuantity("042H2817")[0]) );
assert( eq(8.137693,gp.internalEconomicCoverage("093H4690")[0]) );
assert( eq(8.000000,gp.externalNonEconomicCoverage("002K7007")[0]) );
assert( eq(8.000000,gp.externalEconomicCoverage("002K7007")[0]) );
assert( eq(8.000000,gp.externalDemandQuantity("002K7007")[0]) );
assert( eq(896.289978,gp.virtualForecastQuantity("029H9220")[0]) );
assert( eq(88.339996,gp.newCost("042H2817")) );
assert( eq(870.690002,gp.virtualForecastQuantity("005K9398")[0]) );
assert( eq(85.405998,gp.newCost("029H9205")) );
assert( eq(856.700012,gp.virtualForecastQuantity("010L2158")[0]) );
assert( eq(84.070000,gp.virtualForecastQuantity("083H7126")[0]) );
assert( eq(83.251999,gp.newCost("012J0115")) );
assert( eq(81.279999,gp.virtualForecastQuantity("088G4270")[0]) );
assert( eq(803.929993,gp.virtualForecastQuantity("005K8874")[0]) );
assert( eq(7.800000,gp.virtualForecastQuantity("073H9946")[0]) );
assert( eq(7.720000,gp.internalNonEconomicCoverage("073H6427")[0]) );
assert( eq(7.590000,gp.newCost("073H9946")) );
assert( eq(7.150000,gp.externalEconomicCoverage("002K4785")[0]) );
assert( eq(7.000000,gp.internalNonEconomicCoverage("046H5768")[0]) );
assert( eq(7.000000,gp.internalNonEconomicCoverage("010L1721")[0]) );
assert( eq(7.000000,gp.internalEconomicCoverage("010L1721")[0]) );
assert( eq(7.000000,gp.internalDemandQuantity("046H5768")[0]) );
assert( eq(7.000000,gp.internalDemandQuantity("010L1721")[0]) );
assert( eq(7.000000,gp.externalNonEconomicCoverage("000K7907")[0]) );
assert( eq(7.000000,gp.externalDemandQuantity("000K7907")[0]) );
assert( eq(77.776001,gp.newCost("042H2779")) );
assert( eq(76.549995,gp.virtualForecastQuantity("093H5966")[0]) );
assert( eq(75.870003,gp.newCost("039H6228")) );
assert( eq(749.619995,gp.newCost("046H5735")) );
assert( eq(7253.000000,gp.virtualForecastQuantity("029H9221")[0]) );
assert( eq(71.623001,gp.newCost("005K3469")) );
assert( eq(711.013977,gp.newCost("010L1721")) );
assert( eq(707.369995,gp.virtualForecastQuantity("029H9232")[0]) );
assert( eq(6.650000,gp.virtualForecastQuantity("005K3132")[0]) );
assert( eq(6.600000,gp.virtualForecastQuantity("005K3174")[0]) );
assert( eq(6.000000,gp.internalNonEconomicCoverage("046H5776")[0]) );
assert( eq(6.000000,gp.internalEconomicCoverage("046H5776")[0]) );
assert( eq(6.000000,gp.internalDemandQuantity("046H5776")[0]) );
assert( eq(69.889999,gp.newCost("006H7654")) );
assert( eq(69.774002,gp.newCost("005K9267")) );
assert( eq(69.598999,gp.newCost("002K6539")) );
assert( eq(69.000000,gp.newCost("029H9220")) );
assert( eq(67.317001,gp.newCost("046H5768")) );
assert( eq(67.000000,gp.externalNonEconomicCoverage("083H5378")[0]) );
assert( eq(67.000000,gp.externalEconomicCoverage("083H5378")[0]) );
assert( eq(67.000000,gp.externalDemandQuantity("083H5378")[0]) );
assert( eq(678.010010,gp.virtualForecastQuantity("097H3388")[0]) );
assert( eq(667.728027,gp.newCost("030L2898")) );
assert( eq(64.943001,gp.newCost("083H7126")) );
assert( eq(627.299988,gp.virtualForecastQuantity("046H5768")[0]) );
assert( eq(620.619995,gp.virtualForecastQuantity("029H9230")[0]) );
assert( eq(5.760000,gp.internalNonEconomicCoverage("006H9064")[0]) );
assert( eq(5.760000,gp.internalEconomicCoverage("006H9064")[0]) );
assert( eq(5.320000,gp.virtualForecastQuantity("005K3597")[0]) );
assert( eq(5.000000,gp.internalNonEconomicCoverage("088G4270")[0]) );
assert( eq(5.000000,gp.internalEconomicCoverage("088G4270")[0]) );
assert( eq(5.000000,gp.internalDemandQuantity("088G4270")[0]) );
assert( eq(5.000000,gp.externalNonEconomicCoverage("088G4270")[0]) );
assert( eq(5.000000,gp.externalEconomicCoverage("088G4270")[0]) );
assert( eq(5.000000,gp.externalDemandQuantity("088G4270")[0]) );
assert( eq(59.641998,gp.newCost("010L2158")) );
assert( eq(59.369999,gp.virtualForecastQuantity("000K7907")[0]) );
assert( eq(59.100002,gp.virtualForecastQuantity("082H8897")[0]) );
assert( eq(595.982971,gp.newCost("005K3597")) );
assert( eq(58.750000,gp.newCost("042H2769")) );
assert( eq(57.000000,gp.externalDemandQuantity("076H4609")[0]) );
assert( eq(56.837788,gp.externalEconomicCoverage("093F2361")[0]) );
assert( eq(56.257000,gp.newCost("042H2767")) );
assert( eq(55.209999,gp.virtualForecastQuantity("010L1719")[0]) );
assert( eq(54.600002,gp.virtualForecastQuantity("002K4785")[0]) );
assert( eq(544.781982,gp.newCost("029H9226")) );
assert( eq(541.442993,gp.newCost("011J9623")) );
assert( eq(53.070999,gp.newCost("097H3388")) );
assert( eq(52.840000,gp.virtualForecastQuantity("030L2898")[0]) );
assert( eq(52.778000,gp.newCost("092G7245")) );
assert( eq(522.119995,gp.newCost("000K7907")) );
assert( eq(513.663025,gp.newCost("005K3174")) );
assert( eq(50.799999,gp.virtualForecastQuantity("011J9992")[0]) );
assert( eq(4.783847,gp.internalEconomicCoverage("007H1150")[0]) );
assert( eq(4.300000,gp.virtualForecastQuantity("097H5504")[0]) );
assert( eq(4.300000,gp.virtualForecastQuantity("029H9367")[0]) );
assert( eq(4.300000,gp.internalNonEconomicCoverage("097H5504")[0]) );
assert( eq(4.290000,gp.internalEconomicCoverage("010L2047")[0]) );
assert( eq(4.000000,gp.internalNonEconomicCoverage("029H9205")[0]) );
assert( eq(4.000000,gp.internalNonEconomicCoverage("012J0138")[0]) );
assert( eq(4.000000,gp.internalNonEconomicCoverage("002K7007")[0]) );
assert( eq(4.000000,gp.internalEconomicCoverage("097H5504")[0]) );
assert( eq(4.000000,gp.internalEconomicCoverage("029H9205")[0]) );
assert( eq(4.000000,gp.internalEconomicCoverage("002K7007")[0]) );
assert( eq(4.000000,gp.internalDemandQuantity("029H9205")[0]) );
assert( eq(4.000000,gp.internalDemandQuantity("012J0138")[0]) );
assert( eq(4.000000,gp.internalDemandQuantity("011H9623")[0]) );
assert( eq(4.000000,gp.internalDemandQuantity("002K7007")[0]) );
assert( eq(4.000000,gp.externalNonEconomicCoverage("006H8825")[0]) );
assert( eq(4.000000,gp.externalEconomicCoverage("006H8825")[0]) );
assert( eq(4.000000,gp.externalDemandQuantity("006H8825")[0]) );
assert( eq(49.000000,gp.virtualForecastQuantity("006H9063")[0]) );
assert( eq(494.335999,gp.newCost("005K3172")) );
assert( eq(491.808990,gp.newCost("005K9398")) );
assert( eq(48.337002,gp.newCost("073H9951")) );
assert( eq(48.049000,gp.newCost("046H5775")) );
assert( eq(464.839996,gp.newCost("082H8897")) );
assert( eq(464.700012,gp.virtualForecastQuantity("005K3117")[0]) );
assert( eq(462.250000,gp.virtualForecastQuantity("083H5378")[0]) );
assert( eq(45.228001,gp.newCost("075H9601")) );
assert( eq(4543.910156,gp.virtualForecastQuantity("005K3469")[0]) );
assert( eq(453.424988,gp.newCost("005K3176")) );
assert( eq(44.715000,gp.newCost("092G7294")) );
assert( eq(44.410000,gp.virtualForecastQuantity("073H6430")[0]) );
assert( eq(44.037998,gp.newCost("006H4003")) );
assert( eq(43.660000,gp.virtualForecastQuantity("012J1446")[0]) );
assert( eq(43.000000,gp.virtualForecastQuantity("042H2767")[0]) );
assert( eq(4363.490234,gp.virtualForecastQuantity("005K3468")[0]) );
assert( eq(42.933998,gp.newCost("029H9230")) );
assert( eq(42.868999,gp.newCost("083H5375")) );
assert( eq(42.771999,gp.newCost("046H5750")) );
assert( eq(428.218994,gp.newCost("046H5725")) );
assert( eq(420.059998,gp.virtualForecastQuantity("012J0115")[0]) );
assert( eq(41.601002,gp.newCost("083H5378")) );
assert( eq(41.351002,gp.newCost("046H5776")) );
assert( eq(415.819000,gp.newCost("082H8496")) );
assert( eq(40.000000,gp.externalNonEconomicCoverage("010L2158")[0]) );
assert( eq(40.000000,gp.externalEconomicCoverage("010L2158")[0]) );
assert( eq(40.000000,gp.externalDemandQuantity("010L2158")[0]) );
assert( eq(408.539001,gp.newCost("010L1668")) );
assert( eq(400.795013,gp.newCost("011J9626")) );
assert( eq(400.000000,gp.internalDemandQuantity("012J4569")[0]) );
assert( eq(3.850000,gp.virtualForecastQuantity("005K3172")[0]) );
assert( eq(3.440000,gp.virtualForecastQuantity("012J4569")[0]) );
assert( eq(3.440000,gp.internalNonEconomicCoverage("012J4569")[0]) );
assert( eq(3.360000,gp.virtualForecastQuantity("007H0383")[0]) );
assert( eq(3.104477,gp.externalEconomicCoverage("000K7907")[0]) );
assert( eq(3.000000,gp.internalNonEconomicCoverage("093H5966")[0]) );
assert( eq(3.000000,gp.internalNonEconomicCoverage("046H5775")[0]) );
assert( eq(3.000000,gp.internalNonEconomicCoverage("000K7907")[0]) );
assert( eq(3.000000,gp.internalEconomicCoverage("046H5775")[0]) );
assert( eq(3.000000,gp.internalDemandQuantity("093H5966")[0]) );
assert( eq(3.000000,gp.internalDemandQuantity("092G7321")[0]) );
assert( eq(3.000000,gp.internalDemandQuantity("046H5775")[0]) );
assert( eq(3.000000,gp.internalDemandQuantity("000K7907")[0]) );
assert( eq(3.000000,gp.externalNonEconomicCoverage("083H7126")[0]) );
assert( eq(3.000000,gp.externalNonEconomicCoverage("046H5776")[0]) );
assert( eq(3.000000,gp.externalNonEconomicCoverage("010L1700")[0]) );
assert( eq(3.000000,gp.externalNonEconomicCoverage("006H9064")[0]) );
assert( eq(3.000000,gp.externalEconomicCoverage("083H7126")[0]) );
assert( eq(3.000000,gp.externalEconomicCoverage("046H5776")[0]) );
assert( eq(3.000000,gp.externalEconomicCoverage("010L1700")[0]) );
assert( eq(3.000000,gp.externalEconomicCoverage("006H9064")[0]) );
assert( eq(3.000000,gp.externalDemandQuantity("083H7126")[0]) );
assert( eq(3.000000,gp.externalDemandQuantity("060H9453")[0]) );
assert( eq(3.000000,gp.externalDemandQuantity("046H5776")[0]) );
assert( eq(3.000000,gp.externalDemandQuantity("010L1700")[0]) );
assert( eq(3.000000,gp.externalDemandQuantity("006H9064")[0]) );
assert( eq(395.690002,gp.virtualForecastQuantity("093F2361")[0]) );
assert( eq(395.000000,gp.newCost("088G4270")) );
assert( eq(38.592999,gp.newCost("005K3132")) );
assert( eq(38.410000,gp.virtualForecastQuantity("005K4826")[0]) );
assert( eq(382.529999,gp.virtualForecastQuantity("082H8489")[0]) );
assert( eq(37.799999,gp.virtualForecastQuantity("082H8877")[0]) );
assert( eq(37.470001,gp.newCost("005K8874")) );
assert( eq(378.450012,gp.virtualForecastQuantity("042H2768")[0]) );
assert( eq(36.850002,gp.virtualForecastQuantity("082H8496")[0]) );
assert( eq(36.377998,gp.newCost("092G7323")) );
assert( eq(35.757999,gp.newCost("085G6701")) );
assert( eq(3587.600098,gp.virtualForecastQuantity("005K4830")[0]) );
assert( eq(345.372009,gp.newCost("005K3148")) );
assert( eq(33.362000,gp.newCost("006H2968")) );
assert( eq(33.134998,gp.newCost("010H4056")) );
assert( eq(33.000000,gp.internalNonEconomicCoverage("093H4690")[0]) );
assert( eq(33.000000,gp.internalDemandQuantity("093H4690")[0]) );
assert( eq(334.000000,gp.newCost("082H8877")) );
assert( eq(332.571014,gp.newCost("076H4609")) );
assert( eq(32.959000,gp.newCost("066G5069")) );
assert( eq(32.389999,gp.newCost("006H8825")) );
assert( eq(32.310001,gp.virtualForecastQuantity("012J0138")[0]) );
assert( eq(326.549988,gp.virtualForecastQuantity("039H6228")[0]) );
assert( eq(323.666992,gp.newCost("073H6430")) );
assert( eq(320.600006,gp.virtualForecastQuantity("046H5751")[0]) );
assert( eq(31.684000,gp.newCost("042H2768")) );
assert( eq(31.355000,gp.newCost("029H9221")) );
assert( eq(31.000000,gp.externalNonEconomicCoverage("082H8877")[0]) );
assert( eq(31.000000,gp.externalEconomicCoverage("082H8877")[0]) );
assert( eq(31.000000,gp.externalDemandQuantity("082H8877")[0]) );
assert( eq(30.357000,gp.newCost("006H3862")) );
assert( eq(30.000000,gp.internalNonEconomicCoverage("011J9626")[0]) );
assert( eq(30.000000,gp.internalNonEconomicCoverage("002K4785")[0]) );
assert( eq(30.000000,gp.internalDemandQuantity("011J9626")[0]) );
assert( eq(30.000000,gp.internalDemandQuantity("002K4785")[0]) );
assert( eq(2.900000,gp.virtualForecastQuantity("002K0490")[0]) );
assert( eq(2.080000,gp.virtualForecastQuantity("073H9933")[0]) );
assert( eq(2.080000,gp.internalNonEconomicCoverage("073H9933")[0]) );
assert( eq(2.000000,gp.virtualForecastQuantity("092G7321")[0]) );
assert( eq(2.000000,gp.internalNonEconomicCoverage("083H5378")[0]) );
assert( eq(2.000000,gp.internalNonEconomicCoverage("073H9946")[0]) );
assert( eq(2.000000,gp.internalNonEconomicCoverage("012J1497")[0]) );
assert( eq(2.000000,gp.internalNonEconomicCoverage("010H4056")[0]) );
assert( eq(2.000000,gp.internalNonEconomicCoverage("005K3469")[0]) );
assert( eq(2.000000,gp.internalEconomicCoverage("083H5378")[0]) );
assert( eq(2.000000,gp.internalEconomicCoverage("012J1497")[0]) );
assert( eq(2.000000,gp.internalEconomicCoverage("010H4056")[0]) );
assert( eq(2.000000,gp.internalEconomicCoverage("005K3469")[0]) );
assert( eq(2.000000,gp.internalDemandQuantity("083H5378")[0]) );
assert( eq(2.000000,gp.internalDemandQuantity("073H9946")[0]) );
assert( eq(2.000000,gp.internalDemandQuantity("012J1497")[0]) );
assert( eq(2.000000,gp.internalDemandQuantity("010H4056")[0]) );
assert( eq(2.000000,gp.internalDemandQuantity("005K3469")[0]) );
assert( eq(2.000000,gp.externalNonEconomicCoverage("092G7321")[0]) );
assert( eq(2.000000,gp.externalNonEconomicCoverage("083H5375")[0]) );
assert( eq(2.000000,gp.externalNonEconomicCoverage("073H9951")[0]) );
assert( eq(2.000000,gp.externalNonEconomicCoverage("010L1721")[0]) );
assert( eq(2.000000,gp.externalEconomicCoverage("092G7321")[0]) );
assert( eq(2.000000,gp.externalEconomicCoverage("083H5375")[0]) );
assert( eq(2.000000,gp.externalEconomicCoverage("010L1721")[0]) );
assert( eq(2.000000,gp.externalDemandQuantity("083H5375")[0]) );
assert( eq(2.000000,gp.externalDemandQuantity("073H9951")[0]) );
assert( eq(2.000000,gp.externalDemandQuantity("010L1721")[0]) );
assert( eq(28.524000,gp.newCost("012J1497")) );
assert( eq(288.812012,gp.newCost("010L1700")) );
assert( eq(27.830000,gp.virtualForecastQuantity("075H9601")[0]) );
assert( eq(279.000000,gp.newCost("011J8912")) );
assert( eq(274.674988,gp.newCost("096G3573")) );
assert( eq(270.000000,gp.internalDemandQuantity("093F2361")[0]) );
assert( eq(2707.409912,gp.virtualForecastQuantity("046H5750")[0]) );
assert( eq(265.000000,gp.externalNonEconomicCoverage("093F2361")[0]) );
assert( eq(265.000000,gp.externalDemandQuantity("093F2361")[0]) );
assert( eq(25.976000,gp.newCost("011J9992")) );
assert( eq(25.858000,gp.newCost("012J1446")) );
assert( eq(256.410004,gp.virtualForecastQuantity("046H5725")[0]) );
assert( eq(250.000000,gp.internalDemandQuantity("010L2047")[0]) );
assert( eq(23.000000,gp.externalNonEconomicCoverage("073H6430")[0]) );
assert( eq(23.000000,gp.externalDemandQuantity("073H6430")[0]) );
assert( eq(235.869995,gp.newCost("082H8489")) );
assert( eq(22.989000,gp.newCost("002K4785")) );
assert( eq(22.736000,gp.newCost("093F2361")) );
assert( eq(22.000000,gp.internalNonEconomicCoverage("046H5771")[0]) );
assert( eq(22.000000,gp.internalEconomicCoverage("046H5771")[0]) );
assert( eq(22.000000,gp.internalDemandQuantity("046H5771")[0]) );
assert( eq(22.000000,gp.externalNonEconomicCoverage("046H5750")[0]) );
assert( eq(22.000000,gp.externalEconomicCoverage("046H5750")[0]) );
assert( eq(22.000000,gp.externalDemandQuantity("046H5750")[0]) );
assert( eq(228.447006,gp.newCost("005K3117")) );
assert( eq(224.729996,gp.virtualForecastQuantity("006H3862")[0]) );
assert( eq(223.737000,gp.newCost("011H9623")) );
assert( eq(221.565994,gp.newCost("012J0138")) );
assert( eq(221.380005,gp.virtualForecastQuantity("007H1150")[0]) );
assert( eq(21.000000,gp.internalNonEconomicCoverage("097H3388")[0]) );
assert( eq(21.000000,gp.internalEconomicCoverage("097H3388")[0]) );
assert( eq(21.000000,gp.internalDemandQuantity("097H3388")[0]) );
assert( eq(219.171005,gp.newCost("029H9367")) );
assert( eq(216.847000,gp.newCost("029H9228")) );
assert( eq(20.719999,gp.virtualForecastQuantity("073H6427")[0]) );
assert( eq(20.410000,gp.virtualForecastQuantity("011J9623")[0]) );
assert( eq(20.158001,gp.newCost("002K7007")) );
assert( eq(20.072001,gp.newCost("002K7011")) );
assert( eq(20.000000,gp.internalNonEconomicCoverage("039H6228")[0]) );
assert( eq(20.000000,gp.internalNonEconomicCoverage("012J0115")[0]) );
assert( eq(20.000000,gp.internalNonEconomicCoverage("011J8912")[0]) );
assert( eq(20.000000,gp.internalNonEconomicCoverage("007H1150")[0]) );
assert( eq(20.000000,gp.internalNonEconomicCoverage("006H8825")[0]) );
assert( eq(20.000000,gp.internalNonEconomicCoverage("005K3468")[0]) );
assert( eq(20.000000,gp.internalEconomicCoverage("039H6228")[0]) );
assert( eq(20.000000,gp.internalEconomicCoverage("012J0115")[0]) );
assert( eq(20.000000,gp.internalEconomicCoverage("011J8912")[0]) );
assert( eq(20.000000,gp.internalEconomicCoverage("005K3468")[0]) );
assert( eq(20.000000,gp.internalDemandQuantity("039H6228")[0]) );
assert( eq(20.000000,gp.internalDemandQuantity("012J0115")[0]) );
assert( eq(20.000000,gp.internalDemandQuantity("011J8912")[0]) );
assert( eq(20.000000,gp.internalDemandQuantity("007H1150")[0]) );
assert( eq(20.000000,gp.internalDemandQuantity("006H8825")[0]) );
assert( eq(20.000000,gp.internalDemandQuantity("005K3468")[0]) );
assert( eq(20.000000,gp.externalNonEconomicCoverage("045H8791")[0]) );
assert( eq(20.000000,gp.externalNonEconomicCoverage("029H9220")[0]) );
assert( eq(20.000000,gp.externalNonEconomicCoverage("005K3117")[0]) );
assert( eq(20.000000,gp.externalEconomicCoverage("029H9220")[0]) );
assert( eq(20.000000,gp.externalEconomicCoverage("005K3117")[0]) );
assert( eq(20.000000,gp.externalDemandQuantity("045H8791")[0]) );
assert( eq(20.000000,gp.externalDemandQuantity("029H9220")[0]) );
assert( eq(20.000000,gp.externalDemandQuantity("005K3117")[0]) );
assert( eq(206.667007,gp.newCost("012J4569")) );
assert( eq(202.990005,gp.newCost("045H8791")) );
assert( eq(202.033997,gp.newCost("082H8875")) );
assert( eq(201.720001,gp.virtualForecastQuantity("045H8791")[0]) );
assert( eq(200.000000,gp.internalDemandQuantity("097H5504")[0]) );
assert( eq(2007.750000,gp.virtualForecastQuantity("006H2968")[0]) );
assert( eq(1.950000,gp.virtualForecastQuantity("096G3573")[0]) );
assert( eq(1.950000,gp.internalNonEconomicCoverage("096G3573")[0]) );
assert( eq(1.950000,gp.internalEconomicCoverage("096G3573")[0]) );
assert( eq(1.700000,gp.virtualForecastQuantity("092G7245")[0]) );
assert( eq(1.520000,gp.virtualForecastQuantity("060H9453")[0]) );
assert( eq(1.520000,gp.externalNonEconomicCoverage("060H9453")[0]) );
assert( eq(1.520000,gp.externalEconomicCoverage("060H9453")[0]) );
assert( eq(1.394615,gp.internalEconomicCoverage("093H5966")[0]) );
assert( eq(1.300000,gp.virtualForecastQuantity("029H9226")[0]) );
assert( eq(1.160000,gp.virtualForecastQuantity("075H7497")[0]) );
assert( eq(1.000000,gp.noSourceNonEconomicCoverage("005K3597")[0]) );
assert( eq(1.000000,gp.noSourceNonEconomicCoverage("002K6539")[0]) );
assert( eq(1.000000,gp.noSourceEconomicCoverage("005K3597")[0]) );
assert( eq(1.000000,gp.noSourceEconomicCoverage("002K6539")[0]) );
assert( eq(1.000000,gp.noSourceDemandQuantity("005K3597")[0]) );
assert( eq(1.000000,gp.noSourceDemandQuantity("002K6539")[0]) );
assert( eq(1.000000,gp.internalNonEconomicCoverage("092G7245")[0]) );
assert( eq(1.000000,gp.internalNonEconomicCoverage("082H8875")[0]) );
assert( eq(1.000000,gp.internalNonEconomicCoverage("012J5554")[0]) );
assert( eq(1.000000,gp.internalNonEconomicCoverage("011J9623")[0]) );
assert( eq(1.000000,gp.internalNonEconomicCoverage("010L1719")[0]) );
assert( eq(1.000000,gp.internalNonEconomicCoverage("007H0383")[0]) );
assert( eq(1.000000,gp.internalNonEconomicCoverage("006H9063")[0]) );
assert( eq(1.000000,gp.internalNonEconomicCoverage("005K3174")[0]) );
assert( eq(1.000000,gp.internalNonEconomicCoverage("002K0490")[0]) );
assert( eq(1.000000,gp.internalEconomicCoverage("092G7245")[0]) );
assert( eq(1.000000,gp.internalEconomicCoverage("082H8875")[0]) );
assert( eq(1.000000,gp.internalEconomicCoverage("012J5554")[0]) );
assert( eq(1.000000,gp.internalEconomicCoverage("010L1719")[0]) );
assert( eq(1.000000,gp.internalEconomicCoverage("007H0383")[0]) );
assert( eq(1.000000,gp.internalEconomicCoverage("006H9063")[0]) );
assert( eq(1.000000,gp.internalEconomicCoverage("005K3174")[0]) );
assert( eq(1.000000,gp.internalDemandQuantity("092G7245")[0]) );
assert( eq(1.000000,gp.internalDemandQuantity("082H8875")[0]) );
assert( eq(1.000000,gp.internalDemandQuantity("066G5069")[0]) );
assert( eq(1.000000,gp.internalDemandQuantity("012J5554")[0]) );
assert( eq(1.000000,gp.internalDemandQuantity("011J9623")[0]) );
assert( eq(1.000000,gp.internalDemandQuantity("010L1719")[0]) );
assert( eq(1.000000,gp.internalDemandQuantity("010L1668")[0]) );
assert( eq(1.000000,gp.internalDemandQuantity("007H0383")[0]) );
assert( eq(1.000000,gp.internalDemandQuantity("007H0017")[0]) );
assert( eq(1.000000,gp.internalDemandQuantity("006H9063")[0]) );
assert( eq(1.000000,gp.internalDemandQuantity("006H8419")[0]) );
assert( eq(1.000000,gp.internalDemandQuantity("005K3174")[0]) );
assert( eq(1.000000,gp.internalDemandQuantity("002K0490")[0]) );
assert( eq(1.000000,gp.externalNonEconomicCoverage("029H9367")[0]) );
assert( eq(1.000000,gp.externalNonEconomicCoverage("010H4056")[0]) );
assert( eq(1.000000,gp.externalNonEconomicCoverage("005K3469")[0]) );
assert( eq(1.000000,gp.externalNonEconomicCoverage("005K3176")[0]) );
assert( eq(1.000000,gp.externalEconomicCoverage("010H4056")[0]) );
assert( eq(1.000000,gp.externalEconomicCoverage("005K3469")[0]) );
assert( eq(1.000000,gp.externalDemandQuantity("029H9367")[0]) );
assert( eq(1.000000,gp.externalDemandQuantity("010H4056")[0]) );
assert( eq(1.000000,gp.externalDemandQuantity("005K3469")[0]) );
assert( eq(1.000000,gp.externalDemandQuantity("005K3176")[0]) );
assert( eq(19.000000,gp.internalDemandQuantity("096G3576")[0]) );
assert( eq(197.464005,gp.newCost("046H5771")) );
assert( eq(18.983000,gp.newCost("012J5554")) );
assert( eq(18.000000,gp.newCost("092G7321")) );
assert( eq(184.960007,gp.virtualForecastQuantity("012J1497")[0]) );
assert( eq(182.363007,gp.newCost("093H4690")) );
assert( eq(180.790009,gp.virtualForecastQuantity("092G7323")[0]) );
assert( eq(17.400000,gp.virtualForecastQuantity("005K3176")[0]) );
assert( eq(17.000000,gp.internalEconomicCoverage("011J9626")[0]) );
assert( eq(179.584000,gp.newCost("060H9453")) );
assert( eq(177.750000,gp.virtualForecastQuantity("046H5735")[0]) );
assert( eq(1760.000000,gp.virtualForecastQuantity("029H9205")[0]) );
assert( eq(172.679993,gp.virtualForecastQuantity("042H2779")[0]) );
assert( eq(170.000000,gp.newCost("073H6427")) );
assert( eq(16.798000,gp.newCost("005K3468")) );
assert( eq(16.636999,gp.newCost("092G7319")) );
assert( eq(16.000000,gp.externalDemandQuantity("092G7321")[0]) );
assert( eq(169.929993,gp.virtualForecastQuantity("006H8825")[0]) );
assert( eq(168.727997,gp.newCost("096G3576")) );
assert( eq(164.565002,gp.newCost("093H5966")) );
assert( eq(15.997000,gp.newCost("010L2047")) );
assert( eq(15.600000,gp.virtualForecastQuantity("076H4609")[0]) );
assert( eq(15.600000,gp.externalNonEconomicCoverage("076H4609")[0]) );
assert( eq(15.090000,gp.newCost("010L1719")) );
assert( eq(15.000000,gp.internalNonEconomicCoverage("029H9221")[0]) );
assert( eq(15.000000,gp.internalEconomicCoverage("029H9221")[0]) );
assert( eq(15.000000,gp.internalDemandQuantity("029H9221")[0]) );
assert( eq(15.000000,gp.externalNonEconomicCoverage("046H5725")[0]) );
assert( eq(15.000000,gp.externalDemandQuantity("046H5725")[0]) );
assert( eq(157.875000,gp.newCost("007H0017")) );
assert( eq(14.000000,gp.externalNonEconomicCoverage("029H9230")[0]) );
assert( eq(14.000000,gp.externalEconomicCoverage("029H9230")[0]) );
assert( eq(14.000000,gp.externalDemandQuantity("029H9230")[0]) );
assert( eq(1471.500000,gp.virtualForecastQuantity("083H5375")[0]) );
assert( eq(146.231003,gp.newCost("097H5504")) );
assert( eq(1450.949951,gp.virtualForecastQuantity("046H5771")[0]) );
assert( eq(141.130005,gp.virtualForecastQuantity("010L1700")[0]) );
assert( eq(13.960000,gp.newCost("005K4830")) );
assert( eq(13.780000,gp.virtualForecastQuantity("010L2047")[0]) );
assert( eq(13.780000,gp.internalNonEconomicCoverage("010L2047")[0]) );
assert( eq(13.000000,gp.internalNonEconomicCoverage("083H5375")[0]) );
assert( eq(13.000000,gp.internalNonEconomicCoverage("082H8496")[0]) );
assert( eq(13.000000,gp.internalEconomicCoverage("083H5375")[0]) );
assert( eq(13.000000,gp.internalEconomicCoverage("082H8496")[0]) );
assert( eq(13.000000,gp.internalDemandQuantity("096G3573")[0]) );
assert( eq(13.000000,gp.internalDemandQuantity("083H5375")[0]) );
assert( eq(13.000000,gp.internalDemandQuantity("082H8496")[0]) );
assert( eq(13.000000,gp.internalDemandQuantity("076H4609")[0]) );
assert( eq(13.000000,gp.internalDemandQuantity("073H6427")[0]) );
assert( eq(13.000000,gp.externalNonEconomicCoverage("092G7323")[0]) );
assert( eq(13.000000,gp.externalNonEconomicCoverage("073H6427")[0]) );
assert( eq(13.000000,gp.externalNonEconomicCoverage("046H5771")[0]) );
assert( eq(13.000000,gp.externalEconomicCoverage("092G7323")[0]) );
assert( eq(13.000000,gp.externalEconomicCoverage("046H5771")[0]) );
assert( eq(13.000000,gp.externalDemandQuantity("092G7323")[0]) );
assert( eq(13.000000,gp.externalDemandQuantity("073H6427")[0]) );
assert( eq(13.000000,gp.externalDemandQuantity("046H5771")[0]) );
assert( eq(136.901993,gp.newCost("006H9063")) );
assert( eq(1327.050049,gp.virtualForecastQuantity("082H8875")[0]) );
assert( eq(1321.160034,gp.virtualForecastQuantity("010L1721")[0]) );
assert( eq(130.690002,gp.internalNonEconomicCoverage("093F2361")[0]) );
assert( eq(12.000000,gp.internalNonEconomicCoverage("042H2779")[0]) );
assert( eq(12.000000,gp.internalNonEconomicCoverage("042H2769")[0]) );
assert( eq(12.000000,gp.internalNonEconomicCoverage("042H2768")[0]) );
assert( eq(12.000000,gp.internalEconomicCoverage("042H2779")[0]) );
assert( eq(12.000000,gp.internalEconomicCoverage("042H2768")[0]) );
assert( eq(12.000000,gp.internalDemandQuantity("042H2779")[0]) );
assert( eq(12.000000,gp.internalDemandQuantity("042H2769")[0]) );
assert( eq(12.000000,gp.internalDemandQuantity("042H2768")[0]) );
assert( eq(12.000000,gp.internalDemandQuantity("006H9064")[0]) );
assert( eq(12.000000,gp.externalNonEconomicCoverage("093H4690")[0]) );
assert( eq(12.000000,gp.externalNonEconomicCoverage("029H9232")[0]) );
assert( eq(12.000000,gp.externalEconomicCoverage("093H4690")[0]) );
assert( eq(12.000000,gp.externalEconomicCoverage("029H9232")[0]) );
assert( eq(12.000000,gp.externalDemandQuantity("093H4690")[0]) );
assert( eq(12.000000,gp.externalDemandQuantity("029H9232")[0]) );
assert( eq(125.360001,gp.virtualForecastQuantity("042H2769")[0]) );
assert( eq(125.000000,gp.virtualForecastQuantity("002K7007")[0]) );
assert( eq(124.150002,gp.virtualForecastQuantity("002K7011")[0]) );
assert( eq(11.020000,gp.virtualForecastQuantity("012J5554")[0]) );
assert( eq(11.000000,gp.internalNonEconomicCoverage("082H8489")[0]) );
assert( eq(11.000000,gp.internalEconomicCoverage("082H8489")[0]) );
assert( eq(11.000000,gp.internalDemandQuantity("082H8489")[0]) );
assert( eq(119.699997,gp.virtualForecastQuantity("011J8912")[0]) );
assert( eq(117.769997,gp.virtualForecastQuantity("005K3148")[0]) );
assert( eq(1177.949951,gp.virtualForecastQuantity("046H5776")[0]) );
assert( eq(112.540001,gp.virtualForecastQuantity("093H4690")[0]) );
assert( eq(111.038002,gp.newCost("075H7497")) );
assert( eq(1104.869995,gp.virtualForecastQuantity("046H5775")[0]) );
assert( eq(10.951000,gp.newCost("007H1150")) );
assert( eq(10.920000,gp.virtualForecastQuantity("005K9267")[0]) );
assert( eq(10.576000,gp.newCost("046H5751")) );
assert( eq(10.355385,gp.internalEconomicCoverage("006H8825")[0]) );
assert( eq(10.310000,gp.virtualForecastQuantity("002K6539")[0]) );
assert( eq(10.000000,gp.internalNonEconomicCoverage("005K3148")[0]) );
assert( eq(10.000000,gp.internalEconomicCoverage("005K3148")[0]) );
assert( eq(10.000000,gp.internalDemandQuantity("005K3148")[0]) );
assert( eq(10.000000,gp.externalNonEconomicCoverage("007H1150")[0]) );
assert( eq(10.000000,gp.externalNonEconomicCoverage("005K3468")[0]) );
assert( eq(10.000000,gp.externalNonEconomicCoverage("002K4785")[0]) );
assert( eq(10.000000,gp.externalEconomicCoverage("007H1150")[0]) );
assert( eq(10.000000,gp.externalEconomicCoverage("005K3468")[0]) );
assert( eq(10.000000,gp.externalDemandQuantity("007H1150")[0]) );
assert( eq(10.000000,gp.externalDemandQuantity("005K3468")[0]) );
assert( eq(10.000000,gp.externalDemandQuantity("002K4785")[0]) );
assert( eq(109.250000,gp.virtualForecastQuantity("073H9951")[0]) );
assert( eq(108.905998,gp.newCost("002K0490")) );
assert( eq(108.896004,gp.newCost("007H0383")) );
assert( eq(106.347000,gp.newCost("006H8419")) );
assert( eq(105.977997,gp.newCost("006H9064")) );
assert( eq(103.079002,gp.newCost("029H9232")) );
assert( eq(101.740997,gp.newCost("005K4826")) );
assert( eq(101.413002,gp.newCost("073H9933")) );
assert( eq(1000.000000,gp.internalNonEconomicCoverage("046H5750")[0]) );
assert( eq(1000.000000,gp.internalEconomicCoverage("046H5750")[0]) );
assert( eq(1000.000000,gp.internalDemandQuantity("073H9933")[0]) );
assert( eq(1000.000000,gp.internalDemandQuantity("046H5750")[0]) );
assert( eq(0.920000,gp.virtualForecastQuantity("010L1668")[0]) );
assert( eq(0.920000,gp.internalNonEconomicCoverage("010L1668")[0]) );
assert( eq(0.560000,gp.virtualForecastQuantity("006H7654")[0]) );
assert( eq(0.388060,gp.externalEconomicCoverage("029H9367")[0]) );
assert( eq(0.369048,gp.externalEconomicCoverage("045H8791")[0]) );
assert( eq(0.360000,gp.virtualForecastQuantity("007H0017")[0]) );
assert( eq(0.360000,gp.internalNonEconomicCoverage("007H0017")[0]) );
assert( eq(0.360000,gp.internalEconomicCoverage("007H0017")[0]) );
assert( eq(0.300000,gp.virtualForecastQuantity("066G5069")[0]) );
assert( eq(0.300000,gp.internalNonEconomicCoverage("066G5069")[0]) );
assert( eq(0.080000,gp.virtualForecastQuantity("092G7319")[0]) );
assert( eq(0.050000,gp.virtualForecastQuantity("006H8419")[0]) );
assert( eq(0.050000,gp.internalNonEconomicCoverage("006H8419")[0]) );
assert( eq(0.050000,gp.internalEconomicCoverage("006H8419")[0]) );
assert( eq(0.000000,gp.virtualForecastQuantity("096G3576")[0]) );
assert( eq(0.000000,gp.virtualForecastQuantity("011H9623")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("097H5504")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("097H3388")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("096G3576")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("096G3573")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("093H5966")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("093H4690")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("093F2361")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("092G7323")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("092G7321")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("092G7319")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("092G7294")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("092G7245")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("088G4270")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("085G6701")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("083H7126")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("083H5378")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("083H5375")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("082H8897")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("082H8877")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("082H8875")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("082H8496")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("082H8489")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("076H4609")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("075H9601")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("075H7497")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("073H9951")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("073H9946")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("073H9933")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("073H6430")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("073H6427")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("066G5069")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("060H9453")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("046H5776")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("046H5775")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("046H5771")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("046H5768")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("046H5751")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("046H5750")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("046H5735")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("046H5725")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("045H8791")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("042H2817")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("042H2779")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("042H2769")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("042H2768")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("042H2767")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("039H6228")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("030L2898")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("029H9367")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("029H9232")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("029H9230")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("029H9228")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("029H9226")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("029H9221")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("029H9220")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("029H9205")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("012J5554")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("012J4569")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("012J1497")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("012J1446")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("012J0138")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("012J0115")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("011J9992")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("011J9626")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("011J9623")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("011J8912")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("011H9623")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("010L2158")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("010L2047")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("010L1721")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("010L1719")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("010L1700")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("010L1668")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("010H4056")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("007H1150")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("007H0383")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("007H0017")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("006H9064")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("006H9063")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("006H8825")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("006H8419")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("006H7654")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("006H4003")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("006H3862")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("006H2968")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K9398")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K9267")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K8874")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K4830")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K4826")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K3469")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K3468")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K3176")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K3174")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K3172")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K3148")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K3132")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("005K3117")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("002K7011")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("002K7007")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("002K4785")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("002K0490")[0]) );
assert( eq(0.000000,gp.noSourceNonEconomicCoverage("000K7907")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("097H5504")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("097H3388")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("096G3576")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("096G3573")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("093H5966")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("093H4690")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("093F2361")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("092G7323")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("092G7321")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("092G7319")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("092G7294")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("092G7245")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("088G4270")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("085G6701")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("083H7126")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("083H5378")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("083H5375")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("082H8897")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("082H8877")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("082H8875")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("082H8496")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("082H8489")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("076H4609")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("075H9601")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("075H7497")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("073H9951")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("073H9946")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("073H9933")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("073H6430")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("073H6427")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("066G5069")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("060H9453")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("046H5776")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("046H5775")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("046H5771")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("046H5768")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("046H5751")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("046H5750")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("046H5735")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("046H5725")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("045H8791")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("042H2817")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("042H2779")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("042H2769")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("042H2768")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("042H2767")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("039H6228")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("030L2898")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("029H9367")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("029H9232")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("029H9230")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("029H9228")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("029H9226")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("029H9221")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("029H9220")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("029H9205")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("012J5554")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("012J4569")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("012J1497")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("012J1446")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("012J0138")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("012J0115")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("011J9992")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("011J9626")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("011J9623")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("011J8912")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("011H9623")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("010L2158")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("010L2047")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("010L1721")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("010L1719")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("010L1700")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("010L1668")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("010H4056")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("007H1150")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("007H0383")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("007H0017")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("006H9064")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("006H9063")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("006H8825")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("006H8419")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("006H7654")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("006H4003")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("006H3862")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("006H2968")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("005K9398")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("005K9267")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("005K8874")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("005K4830")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("005K4826")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("005K3469")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("005K3468")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("005K3176")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("005K3174")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("005K3172")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("005K3148")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("005K3132")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("005K3117")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("002K7011")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("002K7007")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("002K4785")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("002K0490")[0]) );
assert( eq(0.000000,gp.noSourceEconomicCoverage("000K7907")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("097H5504")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("097H3388")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("096G3576")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("096G3573")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("093H5966")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("093H4690")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("093F2361")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("092G7323")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("092G7321")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("092G7319")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("092G7294")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("092G7245")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("088G4270")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("085G6701")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("083H7126")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("083H5378")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("083H5375")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("082H8897")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("082H8877")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("082H8875")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("082H8496")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("082H8489")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("076H4609")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("075H9601")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("075H7497")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("073H9951")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("073H9946")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("073H9933")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("073H6430")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("073H6427")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("066G5069")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("060H9453")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("046H5776")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("046H5775")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("046H5771")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("046H5768")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("046H5751")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("046H5750")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("046H5735")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("046H5725")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("045H8791")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("042H2817")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("042H2779")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("042H2769")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("042H2768")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("042H2767")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("039H6228")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("030L2898")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("029H9367")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("029H9232")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("029H9230")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("029H9228")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("029H9226")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("029H9221")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("029H9220")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("029H9205")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("012J5554")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("012J4569")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("012J1497")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("012J1446")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("012J0138")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("012J0115")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("011J9992")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("011J9626")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("011J9623")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("011J8912")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("011H9623")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("010L2158")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("010L2047")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("010L1721")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("010L1719")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("010L1700")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("010L1668")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("010H4056")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("007H1150")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("007H0383")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("007H0017")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("006H9064")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("006H9063")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("006H8825")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("006H8419")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("006H7654")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("006H4003")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("006H3862")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("006H2968")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("005K9398")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("005K9267")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("005K8874")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("005K4830")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("005K4826")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("005K3469")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("005K3468")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("005K3176")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("005K3174")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("005K3172")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("005K3148")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("005K3132")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("005K3117")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("002K7011")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("002K7007")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("002K4785")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("002K0490")[0]) );
assert( eq(0.000000,gp.noSourceDemandQuantity("000K7907")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("096G3576")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("092G7323")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("092G7321")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("092G7319")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("092G7294")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("085G6701")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("083H7126")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("082H8877")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("076H4609")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("075H9601")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("075H7497")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("073H9951")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("073H6430")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("060H9453")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("046H5751")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("046H5735")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("046H5725")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("045H8791")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("042H2817")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("042H2767")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("030L2898")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("029H9367")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("029H9232")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("029H9230")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("029H9228")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("029H9226")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("029H9220")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("012J1446")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("011J9992")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("011H9623")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("010L2158")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("010L1700")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("006H7654")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("006H4003")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("006H3862")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("006H2968")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("005K9398")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("005K9267")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("005K8874")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("005K4830")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("005K4826")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("005K3597")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("005K3176")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("005K3172")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("005K3132")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("005K3117")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("002K7011")[0]) );
assert( eq(0.000000,gp.internalNonEconomicCoverage("002K6539")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("096G3576")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("093F2361")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("092G7323")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("092G7321")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("092G7319")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("092G7294")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("085G6701")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("083H7126")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("082H8877")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("076H4609")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("075H9601")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("075H7497")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("073H9951")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("073H9946")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("073H9933")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("073H6430")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("073H6427")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("066G5069")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("060H9453")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("046H5768")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("046H5751")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("046H5735")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("046H5725")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("045H8791")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("042H2817")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("042H2767")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("030L2898")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("029H9367")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("029H9232")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("029H9230")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("029H9228")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("029H9226")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("029H9220")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("012J4569")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("012J1446")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("012J0138")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("011J9992")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("011J9623")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("011H9623")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("010L2158")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("010L1700")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("010L1668")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("006H7654")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("006H4003")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("006H3862")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("006H2968")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("005K9398")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("005K9267")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("005K8874")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("005K4830")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("005K4826")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("005K3597")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("005K3176")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("005K3172")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("005K3132")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("005K3117")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("002K7011")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("002K6539")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("002K4785")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("002K0490")[0]) );
assert( eq(0.000000,gp.internalEconomicCoverage("000K7907")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("092G7323")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("092G7319")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("092G7294")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("085G6701")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("083H7126")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("082H8877")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("075H9601")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("075H7497")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("073H9951")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("073H6430")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("060H9453")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("046H5751")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("046H5735")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("046H5725")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("045H8791")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("042H2817")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("042H2767")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("030L2898")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("029H9367")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("029H9232")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("029H9230")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("029H9228")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("029H9226")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("029H9220")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("012J1446")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("011J9992")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("010L2158")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("010L1700")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("006H7654")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("006H4003")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("006H3862")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("006H2968")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("005K9398")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("005K9267")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("005K8874")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("005K4830")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("005K4826")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("005K3597")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("005K3176")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("005K3172")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("005K3132")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("005K3117")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("002K7011")[0]) );
assert( eq(0.000000,gp.internalDemandQuantity("002K6539")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("097H5504")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("097H3388")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("096G3576")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("096G3573")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("093H5966")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("092G7319")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("092G7294")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("092G7245")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("085G6701")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("082H8897")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("082H8875")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("082H8496")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("082H8489")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("075H9601")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("075H7497")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("073H9946")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("073H9933")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("066G5069")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("046H5775")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("046H5768")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("046H5751")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("046H5735")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("042H2817")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("042H2779")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("042H2769")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("042H2768")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("042H2767")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("039H6228")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("030L2898")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("029H9228")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("029H9226")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("029H9221")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("029H9205")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("012J5554")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("012J4569")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("012J1497")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("012J1446")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("012J0138")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("012J0115")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("011J9992")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("011J9626")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("011J9623")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("011J8912")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("011H9623")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("010L2047")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("010L1719")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("010L1668")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("007H0383")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("007H0017")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("006H9063")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("006H8419")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("006H7654")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("006H4003")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("006H3862")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("006H2968")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("005K9398")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("005K9267")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("005K8874")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("005K4830")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("005K4826")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("005K3597")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("005K3174")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("005K3172")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("005K3148")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("005K3132")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("002K7011")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("002K6539")[0]) );
assert( eq(0.000000,gp.externalNonEconomicCoverage("002K0490")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("097H5504")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("097H3388")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("096G3576")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("096G3573")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("093H5966")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("092G7319")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("092G7294")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("092G7245")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("085G6701")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("082H8897")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("082H8875")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("082H8496")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("082H8489")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("076H4609")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("075H9601")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("075H7497")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("073H9951")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("073H9946")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("073H9933")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("073H6430")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("073H6427")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("066G5069")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("046H5775")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("046H5768")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("046H5751")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("046H5735")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("046H5725")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("042H2817")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("042H2779")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("042H2769")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("042H2768")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("042H2767")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("039H6228")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("030L2898")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("029H9228")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("029H9226")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("029H9221")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("029H9205")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("012J5554")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("012J4569")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("012J1497")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("012J1446")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("012J0138")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("012J0115")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("011J9992")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("011J9626")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("011J9623")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("011J8912")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("011H9623")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("010L2047")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("010L1719")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("010L1668")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("007H0383")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("007H0017")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("006H9063")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("006H8419")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("006H7654")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("006H4003")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("006H3862")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("006H2968")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("005K9398")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("005K9267")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("005K8874")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("005K4830")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("005K4826")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("005K3597")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("005K3176")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("005K3174")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("005K3172")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("005K3148")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("005K3132")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("002K7011")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("002K6539")[0]) );
assert( eq(0.000000,gp.externalEconomicCoverage("002K0490")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("097H5504")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("097H3388")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("096G3576")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("096G3573")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("093H5966")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("092G7319")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("092G7294")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("092G7245")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("085G6701")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("082H8897")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("082H8875")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("082H8496")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("082H8489")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("075H9601")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("075H7497")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("073H9946")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("073H9933")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("066G5069")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("046H5775")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("046H5768")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("046H5751")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("046H5735")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("042H2817")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("042H2779")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("042H2769")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("042H2768")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("042H2767")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("039H6228")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("030L2898")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("029H9228")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("029H9226")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("029H9221")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("029H9205")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("012J5554")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("012J4569")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("012J1497")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("012J1446")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("012J0138")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("012J0115")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("011J9992")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("011J9626")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("011J9623")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("011J8912")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("011H9623")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("010L2047")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("010L1719")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("010L1668")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("007H0383")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("007H0017")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("006H9063")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("006H8419")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("006H7654")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("006H4003")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("006H3862")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("006H2968")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("005K9398")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("005K9267")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("005K8874")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("005K4830")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("005K4826")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("005K3597")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("005K3174")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("005K3172")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("005K3148")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("005K3132")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("002K7011")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("002K6539")[0]) );
assert( eq(0.000000,gp.externalDemandQuantity("002K0490")[0]) );



@


1.1.1.1
log
@Gars
@
text
@@
