head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2001.04.10.17.05.00;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Updated with code from windows platform
@
text
@#ifndef PART_REVENUE_h
#define PART_REVENUE_h

#include "scoFile.h"


class GARSpartRevenueFile : public SCOcsvFormatFile {
public:

  // fields
  std::string partName( unsigned int recNum ) const;
  std::string revenueType1( unsigned int recNum ) const;
  std::string revenueType4( unsigned int recNum ) const;
  std::string revenueTypeExternal( unsigned int recNum ) const;

  std::string partName( std::string key ) const;
  std::string revenueType1( std::string key ) const;
  std::string revenueType4( std::string key ) const;
  std::string revenueTypeExternal( std::string key ) const;

  float revenueType1AsFloat( unsigned int recNum ) const;
  float revenueType1AsFloat( std::string key ) const;

  float revenueType4AsFloat( unsigned int recNum ) const;
  float revenueType4AsFloat( std::string key ) const;

  float revenueTypeExternalAsFloat( unsigned int recNum ) const;
  float revenueTypeExternalAsFloat( std::string key ) const;
  
  // preferred constructor
  GARSpartRevenueFile(std::string filename);
  
  // destructor
  ~GARSpartRevenueFile();
  
  // Self-test
  static void test();
  
protected:
  
  // compute key for storing record in dictionary
  virtual
    std::string
      key( unsigned int ) const;

private:
  
  
  // default constructor -- don't use!
  GARSpartRevenueFile();
  
  // copy constructor  -- don't use!
  GARSpartRevenueFile( const GARSpartRevenueFile& source );
  
  // assignment operator -- don't use!
  GARSpartRevenueFile&
  operator=(const GARSpartRevenueFile& rhs);

  
};



class GARSpartRevenueFileIterator : public SCOfileIterator {
public:
  
  // fields
  
  std::string partName() const;
  std::string revenueType1() const;
  std::string revenueType4() const;
  std::string revenueTypeExternal() const;

  float revenueType1AsFloat() const;
  float revenueType4AsFloat() const;
  float revenueTypeExternalAsFloat() const;

  // preferred constructor
  GARSpartRevenueFileIterator(const GARSpartRevenueFile &);
  
  // destructor
  ~GARSpartRevenueFileIterator();
  
  // Self-test
  static void test();

private:
  
  
  // default constructor -- don't use!
  GARSpartRevenueFileIterator();
  
  // copy constructor  -- don't use!
  GARSpartRevenueFileIterator( const GARSpartRevenueFileIterator& source );
  
  // assignment operator -- don't use!
  GARSpartRevenueFileIterator&
  operator=(const GARSpartRevenueFileIterator& rhs);

  
};
#endif@
