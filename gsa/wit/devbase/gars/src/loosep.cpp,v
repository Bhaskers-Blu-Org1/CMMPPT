head	1.2;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2001.04.10.17.04.59;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.22.16.46.43;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.02.22.16.46.43;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Updated with code from windows platform
@
text
@#if defined(_MSC_VER)
  #pragma warning(disable:4786)
  #pragma warning(disable:4503)
#endif

#include <assert.h>
#include <stdlib.h>


#include "OsiFloatEqual.h"
#include "loosep.h"


// Use macro to define body of get methods
getFieldFileWithIterator(GARSloosepFile, partName);
getFloatFieldFileWithIterator(GARSloosepFile, quantity1);
getFloatFieldFileWithIterator(GARSloosepFile, quantity4);
getFloatFieldFileWithIterator(GARSloosepFile, quantityAfs);



//------------------------------------------------------------------------------
std::string
  GARSloosepFile::key( unsigned int recNum )
const
{
  std::string retVal = partName(recNum);
  return retVal;
}



//------------------------------------------------------------------------------
// preferred constructor
//------------------------------------------------------------------------------
GARSloosepFile::GARSloosepFile (
  std::string filename
    ) 
    : SCOcsvFormatFile(filename)
{  
  insertField("partName");  
  insertField("quantity1"); 
  insertField("quantity4"); 
  insertField("quantityAfs");
  strip(true);
  fieldSeperator(' ');
}
 
  
//------------------------------------------------------------------------------
// destructor
//------------------------------------------------------------------------------
GARSloosepFile::~GARSloosepFile()
{
 // Nothing to do here
}

//------------------------------------------------------------------------------
// Iterator Methods
//------------------------------------------------------------------------------

GARSloosepFileIterator::GARSloosepFileIterator (
  const GARSloosepFile  & file )
  :
  SCOfileIterator(file)
{  
  // Nothing to do here
}
  
GARSloosepFileIterator::~GARSloosepFileIterator()
{
  // nothing to do here
}

#ifdef NDEBUG
#undef NDEBUG
#endif

//------------------------------------------------------------------------------
// Test function
//------------------------------------------------------------------------------
void
GARSloosepFile::test()
{

  
  OsiRelFltEq eq(1.e-06);

  // test constructor and numRecords methods
  GARSloosepFile file("../data/01Mar23/loosep");
  int nr = file.numRecords();
  assert( nr == 223 );

  assert( file.partName(2)== "002K3418" );
  float e=file.quantity1AsFloat("002K3418");
  assert( eq(e,1.));
  assert( eq(file.quantity1AsFloat(2),1.) );
  assert( eq(file.quantity1AsFloat("004H8347"),596.) );
  assert( eq(file.quantity4AsFloat("004H8347"),119.) );
  assert( eq(file.quantityAfsAsFloat("004H8347"),238.) );

} 
@


1.1
log
@Initial revision
@
text
@d10 1
d16 3
a18 1
getFloatFieldFileWithIterator(GARSloosepFile, quantity);
d42 3
a44 1
  insertField("quantity");
d86 2
a87 1
  float flt_eps = 0.000001f;
d90 1
a90 1
  GARSloosepFile file("../data/original2000/loosep");
d95 6
a100 4
  float e=file.quantityAsFloat("002K3418");
  assert( e==1.);
  assert( file.quantityAsFloat(2)==1.);
  assert( file.quantityAsFloat("097H3388")==503.);
@


1.1.1.1
log
@Gars
@
text
@@
