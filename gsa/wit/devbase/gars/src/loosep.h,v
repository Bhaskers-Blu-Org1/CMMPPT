head	1.2;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2001.04.10.17.05.00;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.22.16.46.43;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.02.22.16.46.43;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Updated with code from windows platform
@
text
@#ifndef LOOSEP_h
#define LOOSEP_h

#include "scoFile.h"


class GARSloosepFile : public SCOcsvFormatFile {
public:

  // fields
  std::string partName( unsigned int recNum ) const;
  std::string quantity1( unsigned int recNum ) const;
  std::string quantity4( unsigned int recNum ) const;
  std::string quantityAfs( unsigned int recNum ) const;

  std::string partName( std::string key ) const;
  std::string quantity1( std::string key ) const;
  std::string quantity4( std::string key ) const;
  std::string quantityAfs( std::string key ) const;

  float quantity1AsFloat( unsigned int recNum ) const;
  float quantity1AsFloat( std::string key ) const;

  float quantity4AsFloat( unsigned int recNum ) const;
  float quantity4AsFloat( std::string key ) const;

  float quantityAfsAsFloat( unsigned int recNum ) const;
  float quantityAfsAsFloat( std::string key ) const;
  
  // preferred constructor
  GARSloosepFile(std::string filename);
  
  // destructor
  ~GARSloosepFile();
  
  // Self-test
  static void test();
  
protected:
  
  // compute key for storing record in dictionary
  virtual
    std::string
      key( unsigned int ) const;

private:
  
  
  // default constructor -- don't use!
  GARSloosepFile();
  
  // copy constructor  -- don't use!
  GARSloosepFile( const GARSloosepFile& source );
  
  // assignment operator -- don't use!
  GARSloosepFile&
  operator=(const GARSloosepFile& rhs);

  
};



class GARSloosepFileIterator : public SCOfileIterator {
public:
  
  // fields
  
  std::string partName() const;
  std::string quantity1() const;
  std::string quantity4() const;
  std::string quantityAfs() const;

  float quantity1AsFloat() const;
  float quantity4AsFloat() const;
  float quantityAfsAsFloat() const;

  // preferred constructor
  GARSloosepFileIterator(const GARSloosepFile &);
  
  // destructor
  ~GARSloosepFileIterator();
  
  // Self-test
  static void test();

private:
  
  
  // default constructor -- don't use!
  GARSloosepFileIterator();
  
  // copy constructor  -- don't use!
  GARSloosepFileIterator( const GARSloosepFileIterator& source );
  
  // assignment operator -- don't use!
  GARSloosepFileIterator&
  operator=(const GARSloosepFileIterator& rhs);

  
};
#endif@


1.1
log
@Initial revision
@
text
@d12 3
a14 1
  std::string quantity( unsigned int recNum ) const;
d17 3
a19 1
  std::string quantity( std::string key ) const;
d21 8
a28 2
  float quantityAsFloat( unsigned int recNum ) const;
  float quantityAsFloat( std::string key ) const;
d70 7
a76 3
  std::string quantity() const;

  float quantityAsFloat() const;
@


1.1.1.1
log
@Gars
@
text
@@
