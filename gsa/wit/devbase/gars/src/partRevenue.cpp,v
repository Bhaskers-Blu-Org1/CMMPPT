head	1.1;
access;
symbols;
locks; strict;
comment	@// @;


1.1
date	2001.04.10.17.05.00;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Updated with code from windows platform
@
text
@#if defined(_MSC_VER)
  #pragma warning(disable:4786)
  #pragma warning(disable:4503)
#endif

#include <assert.h>
#include <stdlib.h>


#include "OsiFloatEqual.h"
#include "partRevenue.h"


// Use macro to define body of get methods
getFieldFileWithIterator(GARSpartRevenueFile, partName);
getFloatFieldFileWithIterator(GARSpartRevenueFile, revenueType1);
getFloatFieldFileWithIterator(GARSpartRevenueFile, revenueType4);
getFloatFieldFileWithIterator(GARSpartRevenueFile, revenueTypeExternal);



//------------------------------------------------------------------------------
std::string
  GARSpartRevenueFile::key( unsigned int recNum )
const
{
  std::string retVal = partName(recNum);
  return retVal;
}



//------------------------------------------------------------------------------
// preferred constructor
//------------------------------------------------------------------------------
GARSpartRevenueFile::GARSpartRevenueFile (
  std::string filename
    ) 
    : SCOcsvFormatFile(filename)
{  
  insertField("partName");  
  insertField("revenueType1"); 
  insertField("revenueType4"); 
  insertField("revenueTypeExternal");
  strip(true);
  fieldSeperator(' ');
}
 
  
//------------------------------------------------------------------------------
// destructor
//------------------------------------------------------------------------------
GARSpartRevenueFile::~GARSpartRevenueFile()
{
 // Nothing to do here
}

//------------------------------------------------------------------------------
// Iterator Methods
//------------------------------------------------------------------------------

GARSpartRevenueFileIterator::GARSpartRevenueFileIterator (
  const GARSpartRevenueFile  & file )
  :
  SCOfileIterator(file)
{  
  // Nothing to do here
}
  
GARSpartRevenueFileIterator::~GARSpartRevenueFileIterator()
{
  // nothing to do here
}

#ifdef NDEBUG
#undef NDEBUG
#endif

//------------------------------------------------------------------------------
// Test function
//------------------------------------------------------------------------------
void
GARSpartRevenueFile::test()
{

  
  OsiRelFltEq eq(1.e-06);

  // test constructor and numRecords methods
  GARSpartRevenueFile file("../data/01Mar23/PN_Rev");
  int nr = file.numRecords();
  assert( nr == 490 );

  assert( file.partName(2)== "097H5502" );
  float e=file.revenueType1AsFloat("097H5502");
  assert( eq(e,141.82));
  assert( eq(file.revenueType1AsFloat(2),141.82) );
  assert( eq(file.revenueType1AsFloat("097H5502"),141.82) );
  assert( eq(file.revenueType4AsFloat("097H5502"),106.365) );
  assert( eq(file.revenueTypeExternalAsFloat("097H5502"),63.819) );

} 
@
