head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 IBM:1.1.1;
locks    ; strict;
comment  @// @;


1.1
date     2001.02.22.16.46.43;  author fasano;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2001.02.22.16.46.43;  author fasano;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@#if defined(_MSC_VER)
  #pragma warning(disable:4786)
  #pragma warning(disable:4503)
#endif

#include <assert.h>
#include <stdlib.h>


#include "supply.h"
//#include <russell/src/utilities.h>


// Use macro to define body of get methods
getFieldFileWithIterator(GARSsupplyFile, type);
getFieldFileWithIterator(GARSsupplyFile, model);
getFloatFieldFileWithIterator(GARSsupplyFile, mo0);
getFloatFieldFileWithIterator(GARSsupplyFile, mo1);
getFloatFieldFileWithIterator(GARSsupplyFile, mo2);
getFloatFieldFileWithIterator(GARSsupplyFile, mo3);
getFloatFieldFileWithIterator(GARSsupplyFile, mo4);
getFloatFieldFileWithIterator(GARSsupplyFile, mo5);
getFloatFieldFileWithIterator(GARSsupplyFile, mo6);
getFloatFieldFileWithIterator(GARSsupplyFile, mo7);
getFloatFieldFileWithIterator(GARSsupplyFile, mo8);
getFloatFieldFileWithIterator(GARSsupplyFile, mo9);
getFloatFieldFileWithIterator(GARSsupplyFile, mo10);
getFloatFieldFileWithIterator(GARSsupplyFile, mo11);



//------------------------------------------------------------------------------
std::string
  GARSsupplyFile::key( unsigned int recNum )
const
{
  std::string retVal = type(recNum)+model(recNum);
  return retVal;
}



//------------------------------------------------------------------------------
// preferred constructor
//------------------------------------------------------------------------------
GARSsupplyFile::GARSsupplyFile (
  std::string filename
    ) 
    : SCOcsvFormatFile(filename)
{  
  fieldSeperator( ' ' );
  insertField("type");  
  insertField("model");
  insertField("mo0");  
  insertField("mo1");  
  insertField("mo2");  
  insertField("mo3");  
  insertField("mo4");  
  insertField("mo5");  
  insertField("mo6");   
  insertField("mo7");   
  insertField("mo8");   
  insertField("mo9");   
  insertField("mo10");   
  insertField("mo11"); 
  strip(true);
}
 
  
//------------------------------------------------------------------------------
// destructor
//------------------------------------------------------------------------------
GARSsupplyFile::~GARSsupplyFile()
{
 // Nothing to do here
}

//------------------------------------------------------------------------------
// Iterator Methods
//------------------------------------------------------------------------------

GARSsupplyFileIterator::GARSsupplyFileIterator (
  const GARSsupplyFile  & file )
  :
  SCOfileIterator(file)
{  
  // Nothing to do here
}
  
GARSsupplyFileIterator::~GARSsupplyFileIterator()
{
  // nothing to do here
}

#ifdef NDEBUG
#undef NDEBUG
#endif

//------------------------------------------------------------------------------
// Test function
//------------------------------------------------------------------------------
void
GARSsupplyFile::test()
{

  float flt_eps = 0.000001f;

  // test constructor and numRecords methods
  GARSsupplyFile file("../data/original2000/supply");
  assert( file.numRecords() == 20 );
  assert( file.mo2AsFloat("65877AT")==10.);
  assert( file.mo0AsFloat("65877AT")==3.);

  assert( file.type(2)== "2635" );
  assert( file.model(2)== "6AU" );

  assert( file.mo1AsFloat("65877AT")==1.);
  assert( file.mo3AsFloat("65877AT")==2.);
  assert( file.mo4AsFloat("65877AT")==0.);
  assert( file.mo5AsFloat("65877AT")==0.);
  assert( file.mo6AsFloat("65877AT")==1.);
  assert( file.mo7AsFloat("65877AT")==1435.);
  assert( file.mo8AsFloat("65877AT")==16.);
  assert( file.mo9AsFloat("65877AT")==42.);
  assert( file.mo10AsFloat("65877AT")==11.);
  assert( file.mo11AsFloat("65877AT")==32.);

} 
@


1.1.1.1
log
@Gars
@
text
@@
