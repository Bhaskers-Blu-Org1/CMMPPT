head	1.2;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2001.04.10.17.04.59;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.22.16.46.43;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.02.22.16.46.43;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Updated with code from windows platform
@
text
@#if defined(_MSC_VER)
  #pragma warning(disable:4786)
  #pragma warning(disable:4503)
#endif

#include <assert.h>
#include <stdlib.h>

#include "OsiFloatEqual.h"
#include "bom.h"


// Use macro to define body of get methods
getFieldFileWithIterator(GARSbomFile, type);
getFieldFileWithIterator(GARSbomFile, model);
getFieldFileWithIterator(GARSbomFile, partName);
getFloatFieldFileWithIterator(GARSbomFile, yieldType1);
getFloatFieldFileWithIterator(GARSbomFile, yieldType4);
getFloatFieldFileWithIterator(GARSbomFile, yieldTypeAfs);


//------------------------------------------------------------------------------
std::string
  GARSbomFile::key( unsigned int recNum )
const
{
  std::string retVal = type(recNum)+model(recNum)+partName(recNum);
  return retVal;
}



//------------------------------------------------------------------------------
// preferred constructor
//------------------------------------------------------------------------------
GARSbomFile::GARSbomFile (
  std::string filename
    ) 
    : SCOcsvFormatFile(filename)
{  
  insertField("type");  
  insertField("model");
  insertField("partName"); 
  insertField("yieldType1"); 
  insertField("yieldType4"); 
  insertField("yieldTypeAfs");
  strip(true);
  fieldSeperator(' ');
}
 
  
//------------------------------------------------------------------------------
// destructor
//------------------------------------------------------------------------------
GARSbomFile::~GARSbomFile()
{
 // Nothing to do here
}

//------------------------------------------------------------------------------
// Iterator Methods
//------------------------------------------------------------------------------

GARSbomFileIterator::GARSbomFileIterator (
  const GARSbomFile  & file )
  :
  SCOfileIterator(file)
{  
  // Nothing to do here
}
  
GARSbomFileIterator::~GARSbomFileIterator()
{
  // nothing to do here
}

#ifdef NDEBUG
#undef NDEBUG
#endif

//------------------------------------------------------------------------------
// Test function
//------------------------------------------------------------------------------
void
GARSbomFile::test()
{

  OsiRelFltEq eq(1.e-06);

  // test constructor and numRecords methods
  GARSbomFile file("../data/01Mar23/bom");
  assert( file.numRecords() == 4091 );

  assert( file.type(2)== "2620" );
  assert( file.model(2)== "00F" );
  assert( file.partName(2)== "084G2144" );

  double yield1 = file.yieldType1AsFloat("262000F084G2144");
  assert( eq(yield1,0.14) );

  double yield4 = file.yieldType4AsFloat("262000F066G5068");
  assert( eq(yield4,0.285) );

  double yieldAfs = file.yieldTypeAfsAsFloat("262000F066G5068");
  assert( eq(yieldAfs,0.1425) );


} 
@


1.1
log
@Initial revision
@
text
@a7 1
#include <math.h>
d9 1
d17 3
a19 2
getFloatFieldFileWithIterator(GARSbomFile, yield);
getFloatFieldFileWithIterator(GARSbomFile, newBuy);
d44 3
a46 2
  insertField("yield");  
  insertField("newBuy"); 
d88 1
a88 1
  float flt_eps = 0.01f;
d91 2
a92 2
  GARSbomFile file("../data/original2000/bom");
  assert( file.numRecords() == 1465 );
d94 3
a96 3
  assert( file.type(2)== "2635" );
  assert( file.model(2)== "3AU" );
  assert( file.partName(2)== "002K4333" );
d98 8
a105 2
  double yield = file.yieldAsFloat("26353AU002K4333");
  assert( fabs(yield-0.0f) < flt_eps );
a106 2
  double newBuy = file.newBuyAsFloat("26353AU002K4333");
  assert( fabs(newBuy-78.f) < flt_eps );
@


1.1.1.1
log
@Gars
@
text
@@
