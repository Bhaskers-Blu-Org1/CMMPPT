head	1.2;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2001.04.10.17.05.00;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.22.16.46.43;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.02.22.16.46.43;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Updated with code from windows platform
@
text
@#ifndef mtm_h
#define mtm_h

#include "scoFile.h"


class GARSmtmFile : public SCOcsvFormatFile {
public:

  // fields
  std::string type( unsigned int recNum ) const;
  std::string model( unsigned int recNum ) const;
  std::string mtmSalePrice( unsigned int recNum ) const;
  std::string mtmNibPrice( unsigned int recNum ) const;

  std::string type( std::string key ) const;
  std::string model( std::string key ) const;
  std::string mtmSalePrice( std::string key ) const;
  std::string mtmNibPrice( std::string key ) const;

  float mtmSalePriceAsFloat( unsigned int recNum ) const;
  float mtmSalePriceAsFloat( std::string key ) const;

  float mtmNibPriceAsFloat( unsigned int recNum ) const;
  float mtmNibPriceAsFloat( std::string key ) const;
  
  // preferred constructor
  GARSmtmFile(std::string filename);
  
  // destructor
  ~GARSmtmFile();
  
  // Self-test
  static void test();
  
protected:
  
  // compute key for storing record in dictionary
  virtual
    std::string
      key( unsigned int ) const;

private:
  
  
  // default constructor -- don't use!
  GARSmtmFile();
  
  // copy constructor  -- don't use!
  GARSmtmFile( const GARSmtmFile& source );
  
  // assignment operator -- don't use!
  GARSmtmFile&
  operator=(const GARSmtmFile& rhs);

  
};



class GARSmtmFileIterator : public SCOfileIterator {
public:
  
  // fields
  std::string type() const;
  std::string model() const;
  std::string mtmSalePrice() const;
  std::string mtmNibPrice() const;
  
  float mtmSalePriceAsFloat() const;
  float mtmNibPriceAsFloat() const;

  // preferred constructor
  GARSmtmFileIterator(const GARSmtmFile &);
  
  // destructor
  ~GARSmtmFileIterator();
  
  // Self-test
  static void test();

private:
  
  
  // default constructor -- don't use!
  GARSmtmFileIterator();
  
  // copy constructor  -- don't use!
  GARSmtmFileIterator( const GARSmtmFileIterator& source );
  
  // assignment operator -- don't use!
  GARSmtmFileIterator&
  operator=(const GARSmtmFileIterator& rhs);

  
};
#endif@


1.1
log
@Initial revision
@
text
@d13 2
a14 1
  std::string mtmsales( unsigned int recNum ) const;
d18 2
a19 1
  std::string mtmsales( std::string key ) const;
d21 2
d24 2
a25 2
  float mtmsalesAsFloat( unsigned int recNum ) const;
  float mtmsalesAsFloat( std::string key ) const;
d67 2
a68 1
  std::string mtmsales() const;
d70 2
a71 1
  float mtmsalesAsFloat() const;
@


1.1.1.1
log
@Gars
@
text
@@
