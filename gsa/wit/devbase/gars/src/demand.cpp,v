head	1.2;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2001.04.10.17.04.59;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.22.16.46.43;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.02.22.16.46.43;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Updated with code from windows platform
@
text
@#if defined(_MSC_VER)
  #pragma warning(disable:4786)
  #pragma warning(disable:4503)
#endif

#include <assert.h>
#include <stdlib.h>


#include "OsiFloatEqual.h"
#include "demand.h"


// Use macro to define body of get methods
getFieldFileWithIterator(GARSdemandFile, partName);
getFloatFieldFileWithIterator(GARSdemandFile, internal1DemQty);
getFloatFieldFileWithIterator(GARSdemandFile, internal4DemQty);
getFloatFieldFileWithIterator(GARSdemandFile, internal1Or4DemQty);
getFloatFieldFileWithIterator(GARSdemandFile, externalDemQty);
getFloatFieldFileWithIterator(GARSdemandFile, noSourceDemQty);
getIntFieldFileWithIterator(GARSdemandFile, period);



//------------------------------------------------------------------------------
std::string
  GARSdemandFile::key( unsigned int recNum )
const
{
  std::string retVal = partName(recNum) + period(recNum);
  return retVal;
}



//------------------------------------------------------------------------------
// preferred constructor
//------------------------------------------------------------------------------
GARSdemandFile::GARSdemandFile (
  std::string filename
    ) 
    : SCOcsvFormatFile(filename)
{  
  insertField("partName");  
  insertField("internal1DemQty");
  insertField("internal4DemQty");
  insertField("internal1Or4DemQty");
  insertField("externalDemQty");  
  insertField("noSourceDemQty");
  insertField("period");
  strip(true);
  fieldSeperator(' ');
}
 
  
//------------------------------------------------------------------------------
// destructor
//------------------------------------------------------------------------------
GARSdemandFile::~GARSdemandFile()
{
 // Nothing to do here
}

//------------------------------------------------------------------------------
// Iterator Methods
//------------------------------------------------------------------------------

GARSdemandFileIterator::GARSdemandFileIterator (
  const GARSdemandFile  & file )
  :
  SCOfileIterator(file)
{  
  // Nothing to do here
}
  
GARSdemandFileIterator::~GARSdemandFileIterator()
{
  // nothing to do here
}

#ifdef NDEBUG
#undef NDEBUG
#endif

//------------------------------------------------------------------------------
// Test function
//------------------------------------------------------------------------------
void
GARSdemandFile::test()
{

  OsiRelFltEq eq(1.e-06);

  // test constructor and numRecords methods
  GARSdemandFile file("../data/01Mar23/demand");
  assert( file.numRecords() == 9519 );

  assert( file.partName(4)== "000G2380" );
  float e=file.externalDemQtyAsFloat("000G23802");
  assert( eq(e,3.0) );
  assert( eq(file.internal1DemQtyAsFloat("099006792"),141.) );
  assert( eq(file.internal4DemQtyAsFloat("099006792"),14.) );
  assert( eq(file.internal1Or4DemQtyAsFloat("099006792"),35.) );
  assert( eq(file.noSourceDemQtyAsFloat("099006792"),0.) );
  assert( file.periodAsInt("099006792")==2);

} 
@


1.1
log
@Initial revision
@
text
@d10 1
d16 3
a18 1
getFloatFieldFileWithIterator(GARSdemandFile, internalDemQty);
d45 3
a47 1
  insertField("internalDemQty");
d92 1
a92 1
  float flt_eps = 0.000001f;
d95 2
a96 2
  GARSdemandFile file("../data/original2000/demand");
  assert( file.numRecords() == 105 );
d98 8
a105 6
  assert( file.partName(2)== "002K4785" );
  float e=file.externalDemQtyAsFloat("002K47851");
  assert( e==10.);
  assert( file.internalDemQtyAsFloat("002K47851")==30.);
  assert( file.noSourceDemQtyAsFloat("002K47851")==0.);
  assert( file.periodAsInt("002K47851")==1);
@


1.1.1.1
log
@Gars
@
text
@@
