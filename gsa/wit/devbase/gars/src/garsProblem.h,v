head	1.4;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2001.09.26.18.50.25;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.08.16.27.40;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.10.17.04.59;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.22.16.46.43;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.02.22.16.46.43;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Updated to write out some problem size metrics
@
text
@#ifndef garsProblem_h
#define garsProblem_h

#include <string>
#include <map>
#include "appData.h"

class WitRun;

class GARSproblem  {
public:

  void addMtm( std::string );
  void setMtmSupply( std::string, float supply[12] );
  void setMtmNibPrice( std::string mtm, float nibPrice );
  void setMtmSellPrice( std::string mtm, float sellPrice );

  const std::vector<std::string> & pnNames() const {return pnNames_;};
  const std::vector<std::string> & mtmNames() const {return mtmNames_;};

  void economicScenario1();
  void economicScenario2();
  void nonEconomic();
  void virtualForecast();


  float objectiveFunctionValue() const;
  float boundObjectiveFunctionValue() const;

  // Get and set internal and external demand cost factor.
  // This factor is the multiplier that is applied to the part revenue 
  // for determining revenue associated with satisfying one unit of demand
  double internalType1DemandCostFactor() const;
  void   internalType1DemandCostFactor(double cf);
  double internalType4DemandCostFactor() const;
  void   internalType4DemandCostFactor(double cf);
  double externalDemandCostFactor() const;
  void   externalDemandCostFactor(double cf);

  void readFiles(int nPeriods, std::string directory);
  void compareSolutions(std::string directory);

#if 0
  // Get vector of all part names
  const std::vector<std::string> & partNames() const;

  // Get vector of all mtm names
  const std::vector<std::string> & machineTypeModelNames() const;
#endif

  // Get vector of all parts produced from an MTM.
  // If the yield when disassembling the mtm is 0, the name of the part is 
  // still returned.
  std::vector<std::string> partsProducedFromMtm(std::string mtm) const;

  // Get vector of mtms which produce the part.
  // If the yield when disasembling the mtm is 0, then the mtm name is 
  // not returned.
  std::vector<std::string> mtmsProducingPart(const std::string & part) const;

  //----------------------------------------------------------------------
  // Wit computed attributes
  //
  // Get quantity of covered parts in each period.
  std::vector<float> internalType1Coverage( const std::string & pn ) const; 
  std::vector<float> internalType4Coverage( const std::string & pn ) const; 
  std::vector<float> internalType1Or4Coverage( const std::string & pn ) const; 
  std::vector<float> externalCoverage( const std::string & pn ) const;  
  std::vector<float> noSourceCoverage( const std::string & pn ) const; 
  std::vector<float> stockVolType1( const std::string & pn ) const;     
  std::vector<float> stockVolType4( const std::string & pn ) const;     
  std::vector<float> stockVolTypeAfs( const std::string & pn ) const;     
  std::vector<float> stockVolType1Or4( const std::string & pn ) const;     
  std::vector<float> stockVolTypeAfsOr1( const std::string & pn ) const; 

  // Get mtm disassemble quantity in each period
  std::vector<float> mtmDismantleQuantity( const std::string & mtm ) const;
  
  // Get mtm acquire quantity
  std::vector<float> mtmAcquireQuantity( const std::string & mtm ) const;
 
  // Get mtm acquire unit cost
  std::vector<float> mtmAcquireExecCost( const std::string & mtm ) const;

  // Get quantity of MTM's which will be economically sold as whole machines
  std::vector<float> mtmSellWholeQuantity( const std::string & mtm ) const;

  // Get quantity of additional MTM's needed to meet all demand
  std::vector<float> mtmAdditionalRequiredToMeetAllDemand( const std::string & mtm ) const;

  // Get quantity of type 4 parts used instead of type 1 
  std::vector<float> type4SubstitutingForType1Vol( const std::string & pn ) const;

  // Get quantity of type 1 parts used instead of type Afs
  std::vector<float> type1SubstitutingForTypeAfsVol( const std::string & pn ) const;

  // For given part and mtm, return quantity of part produced from disassembling
  // the mtm
  std::vector<float> productionVolType1( const std::string & mtm, const std::string & pn ) const;
  std::vector<float> productionVolType4( const std::string & mtm, const std::string & pn ) const;
  std::vector<float> productionVolTypeAfs( const std::string & mtm, const std::string & pn ) const;
  




  //----------------------------------------------------------------------
  
  //----------------------------------------------------------------------
  // Input attributes
  //
  // Get demand quantity of parts in each period.
  std::vector<float> internalType1DemandQuantity( const std::string & pn ) const;
  std::vector<float> internalType4DemandQuantity( const std::string & pn ) const;
  std::vector<float> internalType1Or4DemandQuantity( const std::string & pn ) const; 
  std::vector<float> externalDemandQuantity( const std::string & pn ) const;  
  std::vector<float> noSourceDemandQuantity( const std::string & pn ) const; 

  // Get revenue associated with a pn in each period
  std::vector<float> type1Rev( const std::string & pn ) const;
  std::vector<float> type4Rev( const std::string & pn ) const;
  std::vector<float> externalRev( const std::string & pn ) const;

  // Get mtm Sale revenue for each period
  std::vector<float> mtmSalePrice( const std::string & mtm  ) const;

  // Get mtm nib cost for each period
  std::vector<float> mtmNibPrice( const std::string & mtm  ) const;

  // Get supply of MTM
  std::vector<float> mtmSupplyQuantity( const std::string & mtm ) const;

  // Get loose part supply
  std::vector<float> loosePartQuantityType1( const std::string & pn ) const;
  std::vector<float> loosePartQuantityType4( const std::string & pn ) const;
  std::vector<float> loosePartQuantityTypeAfs( const std::string & pn ) const;

  // Get number of periods in problem
  int nPeriods() const;

  std::vector<float> type4SubstitutingForType1Cost( const std::string & pn ) const;
  std::vector<float> type1SubstitutingForTypeAfsCost( const std::string & pn ) const;

  //----------------------------------------------------------------------

  // default constructor
  GARSproblem();
  
  // copy constructor
  GARSproblem( const GARSproblem& source );
  
  // assignment operator
  GARSproblem&
  operator=(const GARSproblem& rhs);
  
  // destructor
  ~GARSproblem();
  

  // Self-test
  static void test();

 

private:

  void setPartForVirtualForecast();
  void clearPartForVirtualForecast();
  void setMtmRev();
  void clearMtmRev();
  void setMtmAcquisitionCost();
  void clearMtmAcquisitionCost();
  void setMtmAcquireAll();
  void clearMtmAcquireAll();
  void setFocusToDemandVol();
  
  std::vector<float> productionVol( 
    const std::string & mtm, 
    const std::string & pn,
    const std::string & partTypePrefix ) const;

  inline std::vector<float> witFloatStarToStlVec(const float * inputVec ) const
  {
    std::vector<float>  retVal;
    int np = nPeriods();
    int i;
    for ( i=0; i<np; ++i ) retVal.push_back(inputVec[i]);
    return retVal;
  };

  
  // Get demand quantity of parts in each period as specified in input data files
  const std::vector<float> & internalType1DemandVol( const std::string & pn ) const;
  const std::vector<float> & internalType4DemandVol( const std::string & pn ) const;
  const std::vector<float> & internalType1Or4DemandVol( const std::string & pn ) const; 
  const std::vector<float> & externalDemandVol( const std::string & pn ) const;  
  const std::vector<float> & noSourceDemandVol( const std::string & pn ) const;

  // Get ship reward as specified in input files
  std::vector<float> type1ShipReward( const std::string & pn ) const;
  std::vector<float> type4ShipReward( const std::string & pn ) const;
  std::vector<float> externalShipReward( const std::string & pn ) const;


  double discountRate() const;
  double periodsPerYear() const;
  void timeValueOfMoney( int np, float amountTime0, float *& resultVec ) const;

  // Return true if demand exist
  bool demandExists(const std::string & pn, const std::string & dn )const;

#if 0
  // Save CoverParts in Demand AppData.
  // Covered parts is the wit ShipVol Attribute.
  // This method is used twice (econCov and nonEconCov parts).
  // non-econ assumes all mtm's are disassembled.
  void saveCoveredPartsQty(
   void (GARSdemandAppData::*appDataShipVolSetMethod)( int, const float * ),
   void (GARScombinePartsOpAppData::*appDataCombineOpSetMethod)( int, const float * ));
#endif

  void type1Rev( const std::string & pn, double rev );
  void type4Rev( const std::string & pn, double rev );
  void externalRev( const std::string & pn, double rev );

  double subType4ForType1CostFactor()   const { return .01; };
  double subType1ForTypeAfsCostFactor() const { return .01; };

#if 0
  void virtualForecastQuantity( const std::string & pn, int numPeriods, const float * vfq ); 
#endif

 
  
  static const std::string & mtmDemandName();
  static const std::string & noSourceDemandName();
  static const std::string & internalType1DemandName();
  static const std::string & internalType4DemandName();
  static const std::string & internalType1Or4DemandName();
  static const std::string & externalDemandName();

  static const std::string & disassembleMtmOpPrefix();
  static const std::string & acquireMtmOpPrefix();
  static const std::string & acquirableMtmPartPrefix();

  static const std::string & type1PartPrefix();
  static const std::string & type4PartPrefix();
  static const std::string & typeAfsPartPrefix();
  static const std::string & type1Or4PartPrefix();
  static const std::string & typeAfsOr1PartPrefix();

  static const std::string & combineType1And4PartsOpPrefix();
  static const std::string & combineTypeAfsAnd1PartsOpPrefix();

  static const std::string mtmDemandName_;
  static const std::string noSourceDemandName_;
  static const std::string internalType1DemandName_;
  static const std::string internalType4DemandName_;
  static const std::string internalType1Or4DemandName_;
  static const std::string externalDemandName_;

  static const std::string disassembleMtmOpPrefix_;
  static const std::string acquireMtmOpPrefix_;
  static const std::string acquirableMtmPartPrefix_;

  static const std::string type1PartPrefix_;
  static const std::string type4PartPrefix_;
  static const std::string typeAfsPartPrefix_;
  static const std::string type1Or4PartPrefix_;
  static const std::string typeAfsOr1PartPrefix_;

  static const std::string combineType1And4PartsOpPrefix_;
  static const std::string combineTypeAfsAnd1PartsOpPrefix_;

  WitRun * mutableWitRun() const;
  WitRun * witRun();

  void gutsOfCopy( const GARSproblem& source );
  void gutsOfDestructor();

  mutable WitRun * wr_;

  class PnData {
  public:
    double type1Rev() const { return type1Rev_; }
    void type1Rev(double r) { type1Rev_=r; }
    double type4Rev() const { return type4Rev_; }
    void type4Rev(double r) { type4Rev_=r; }
    double externalRev() const { return externalRev_; }
    void externalRev(double r) { externalRev_=r; }  
 
    // default constructor
    PnData():type1Rev_(0.0),type4Rev_(0.0),externalRev_(0.0){}
    
    // copy constructor
    PnData( const PnData& source )
      :type1Rev_(source.type1Rev_),
      type4Rev_(source.type1Rev_),
      externalRev_(source.type1Rev_)
    {}
    
    // assignment operator
    PnData&
      operator=(const PnData& rhs)
    {  
      if (this != &rhs) {
        type1Rev_ = rhs.type1Rev_;
        type4Rev_ = rhs.type4Rev_;
        externalRev_ = rhs.externalRev_;
      }
      return *this;
    }
    
    // destructor
    ~PnData(){};
    
  private:
    double type1Rev_;
    double type4Rev_;
    double externalRev_;
  };

  std::vector<std::string> pnNames_;  
  std::map<std::string,PnData> pnData_;
  std::vector<std::string> mtmNames_;

  double intType1DemCostFac_;
  double intType4DemCostFac_;
  double extDemCostFac_;
  double discountRate_;
  double periodsPerYear_;
  bool partForVirtualForecast_;
  bool mtmRev_;
  bool mtmAcquisitionCost_;
  bool mtmAcquireAll_;

  
  
};


#endif
@


1.3
log
@updated files
@
text
@d43 1
d49 1
d51 3
a53 1
  // Get vector of all parts produced from an MTM
d55 5
@


1.2
log
@Updated with code from windows platform
@
text
@d13 5
d26 1
d38 1
a38 1
  void externalDemandCostFactor(double cf);
d41 1
d49 3
d79 3
d88 10
d166 6
@


1.1
log
@Initial revision
@
text
@d5 1
d13 21
a34 4
  void solve();
#if 0
  void writeResults(std::string directory) const;
#endif
d46 29
a74 11
  const std::vector<float> & internalEconomicCoverage( const std::string & pn ) const; 
  const std::vector<float> & externalEconomicCoverage( const std::string & pn ) const;  
  const std::vector<float> & noSourceEconomicCoverage( const std::string & pn ) const; 
  const std::vector<float> & internalNonEconomicCoverage( const std::string & pn ) const; 
  const std::vector<float> & externalNonEconomicCoverage( const std::string & pn ) const;  
  const std::vector<float> & noSourceNonEconomicCoverage( const std::string & pn ) const;   
  const std::vector<float> & virtualForecastQuantity( const std::string & pn ) const; 

  // Get mtm demand quantity.
  // This is the number of MTM's to be disassembled to satisfy economic demands
  const std::vector<float> & mtmDemandQuantity( const std::string & mtm ) const; 
d81 13
a93 3
  const std::vector<float> & internalDemandQuantity( const std::string & pn ) const; 
  const std::vector<float> & externalDemandQuantity( const std::string & pn ) const;  
  const std::vector<float> & noSourceDemandQuantity( const std::string & pn ) const; 
d95 2
a96 2
  // Get new cost of part
  double newCost( const std::string & pn  ) const;
d101 5
d108 4
d135 36
d174 1
d180 10
a189 1
    void (GARSdemandAppData::*appDataSetMethod)( int, const float * ) );
d192 1
a192 6
  void writePartDemandPeriodDemandvolShipvolRev( 
    std::string fileName,
    std::string fileHeadings,
    const std::vector<float> & (GARSdemandAppData::*getCovQty)()const,
    const std::vector<float> & (GARSdemandAppData::*getDemQty)()const )
    const;
d195 1
a195 2
  std::vector<std::string> & pnNames()  {return pnNames_;};
  std::vector<std::string> & mtmNames() {return mtmNames_;};
d199 3
a201 1
  static const std::string & internalDemandName();
d204 13
d219 3
a221 1
  static const std::string internalDemandName_;
d224 13
d245 42
a286 1
  std::vector<std::string> pnNames_;
d288 12
@


1.1.1.1
log
@Gars
@
text
@@
