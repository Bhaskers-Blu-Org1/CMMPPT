head	1.2;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2001.04.10.17.04.58;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.22.16.46.42;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.02.22.16.46.42;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Updated with code from windows platform
@
text
@#ifndef AppData_h
#define AppData_h

#include <vector>

class GARSappData  {
public:
  virtual GARSappData * clone() const = 0;

  // destructor
  virtual ~GARSappData(){};

protected:
  
  // constructor
  GARSappData(){};
  
  // copy constructor
  GARSappData( const GARSappData& source ){};
  
  // assignment operator
  GARSappData & operator=(const GARSappData& rhs)
  {  
    if (this != &rhs) {        
    // nothing to do here
    }
    return *this;
  }
  
  // Self-test
  //static void test();

  void setVector(int len, const float * inputVec, std::vector<float> & outputVec )
  {
    int i;
    for ( i=0; outputVec.size()<len; ++i ) outputVec.push_back(0.0);
    for ( i=0; i<len; ++i ) outputVec[i] = inputVec[i];
  };
};


// Note: This is a GARS part not a WIT part.
// The GARS model has parts and MTM's which both map to WIT parts.
// Gars parts and mtm's have different appData structures.
#if 0
class GARSpartAppData : public GARSappData {
public:
  

  const std::vector<float> & fcstQty() const { return fcstQty_; };
  void fcstQty(int len, const float * fcstQty ) { setVector( len, fcstQty, fcstQty_ ); }; 
  
  const std::vector<float> & excessVol() const { return excessVol_; };
  void excessVol(int len, const float * excessVol ) { setVector( len, excessVol, excessVol_ ); };
 
  const std::vector<float> & stockVol() const { return stockVol_; };
  void stockVol(int len, const float * stockVol ) { setVector( len, stockVol, stockVol_ ); };
  
  // default constructor
  GARSpartAppData()
    :
    fcstQty_(),excessVol_(),stockVol_(){};
  
  // destructor
  virtual ~GARSpartAppData(){};
  
  // copy constructor
  GARSpartAppData( const GARSpartAppData& source ):
  GARSappData(source),
    fcstQty_(source.fcstQty_),
    excessVol_(source.excessVol_),
    stockVol_(source.stockVol_)
  {};
  
  // assignment operator
  GARSpartAppData&
    operator=(const GARSpartAppData& rhs)
  {  
    if (this != &rhs) {        
      GARSappData::operator=(rhs);
      fcstQty_ = rhs.fcstQty_;
      excessVol_ = rhs.excessVol_;
      stockVol_ = rhs.stockVol_;
    }
    return *this;
  }

  virtual GARSappData * clone() const
  { return (new GARSpartAppData(*this));}
  
  // Self-test
  //static void test();
private:
  
  std::vector<float> fcstQty_; 
  std::vector<float> excessVol_; 
  std::vector<float> stockVol_; 
  
};
#endif

class GARSmtmAppData : public GARSappData {
public:
  
  double mtmSalePrice() const { return mtmSalePrice_; };
  void mtmSalePrice(float sc) { mtmSalePrice_ = sc; };

  double mtmNibPrice() const { return mtmNibPrice_; };
  void mtmNibPrice(float sc) { mtmNibPrice_ = sc; };
  
  // default constructor
  GARSmtmAppData()
    :mtmSalePrice_(0.0),
    mtmNibPrice_(0.0)
  {};
  
  // destructor
  virtual ~GARSmtmAppData(){};
  
  // copy constructor
  GARSmtmAppData( const GARSmtmAppData& source ):
  GARSappData(source),
    mtmSalePrice_(source.mtmSalePrice_),
    mtmNibPrice_(source.mtmNibPrice_)
  {};
  
  // assignment operator
  GARSmtmAppData&
    operator=(const GARSmtmAppData& rhs)
  {  
    if (this != &rhs) {        
      GARSappData::operator=(rhs);
      mtmSalePrice_ = rhs.mtmSalePrice_;
      mtmNibPrice_ = rhs.mtmNibPrice_;
    }
    return *this;
  }

  virtual GARSappData * clone() const
  { return (new GARSmtmAppData(*this));}
  
  // Self-test
  //static void test();
private:
  
  float mtmSalePrice_;
  float mtmNibPrice_;
  
};

class GARSdemandAppData : public GARSappData {
public:

  const std::vector<float> & demQty() const { return demQty_; };
  void demQty(int len, const float * demQty) 
  { setVector(len, demQty, demQty_); };

  void setDemQtyElem(int i,float v) { demQty_[i] = v; };
  
  // constructor
  GARSdemandAppData(int nPeriods):
  GARSappData(),
  demQty_()
  //econCovQty_(),
  //nonEconCovQty_()
  {
    for ( int i=0; i<nPeriods; ++i ) {
      demQty_.push_back(0.0f);
      //econCovQty_.push_back(0.0f);
      //nonEconCovQty_.push_back(0.0f);
    }
  };
  
  // destructor
  virtual ~GARSdemandAppData(){};
  
  // copy constructor
  GARSdemandAppData( const GARSdemandAppData& source ):
  GARSappData(source),
  demQty_(source.demQty_)
  //econCovQty_(source.econCovQty_),
  //nonEconCovQty_(source.nonEconCovQty_)
  {};
  
  // assignment operator
  GARSdemandAppData&
    operator=(const GARSdemandAppData& rhs)
  {  
    if (this != &rhs) {        
      GARSappData::operator=(rhs);
      demQty_ = rhs.demQty_;
      //econCovQty_ = rhs.econCovQty_;
      //nonEconCovQty_ = rhs.nonEconCovQty_;
    }
    return *this;
  }

  virtual GARSappData * clone() const
  { return (new GARSdemandAppData(*this));}
  
  // Self-test
  //static void test();
private:
    
  // default constructor - not to be used
  GARSdemandAppData():
  GARSappData(),
  demQty_()
  //econCovQty_(),
  //nonEconCovQty_()
  {};
  
  std::vector<float> demQty_; 
  //std::vector<float> econCovQty_;
  //std::vector<float> nonEconCovQty_;
  
  
};

#if 0
class GARSdismantleOpAppData : public GARSappData {
public:

  const std::vector<float> & dismantleQtyEcon() const { return dismantleQtyEcon_; };
  void dismantleQtyEcon(int len, const float * dismantleQty) 
  { setVector(len, dismantleQty, dismantleQtyEcon_); };

  const std::vector<float> & dismantleQtyNonEcon() const { return dismantleQtyNonEcon_; };
  void dismantleQtyNonEcon(int len, const float * dismantleQty) 
  { setVector(len, dismantleQty, dismantleQtyNonEcon_); };

  // constructor
  GARSdismantleOpAppData(int nPeriods):
  GARSappData(),
  dismantleQtyEcon_(),
  dismantleQtyNonEcon_()
  {
    for ( int i=0; i<nPeriods; ++i ) {
      dismantleQtyEcon_.push_back(0.0f);
      dismantleQtyNonEcon_.push_back(0.0f);
    }
  };
  
  // destructor
  virtual ~GARSdismantleOpAppData(){};
  
  // copy constructor
  GARSdismantleOpAppData( const GARSdismantleOpAppData& source ):
  GARSappData(source),
  dismantleQtyEcon_(source.dismantleQtyEcon_),
  dismantleQtyNonEcon_(source.dismantleQtyNonEcon_)
  {};
  
  // assignment operator
  GARSdismantleOpAppData&
    operator=(const GARSdismantleOpAppData& rhs)
  {  
    if (this != &rhs) {        
      GARSappData::operator=(rhs);
      dismantleQtyEcon_ = rhs.dismantleQtyEcon_;
      dismantleQtyNonEcon_ = rhs.dismantleQtyNonEcon_;
    }
    return *this;
  }

  virtual GARSappData * clone() const
  { return (new GARSdismantleOpAppData(*this));}
  
  // Self-test
  //static void test();
private:
    
  // default constructor - not to be used
  GARSdismantleOpAppData():
  GARSappData(),
  dismantleQtyEcon_(),
  dismantleQtyNonEcon_()
  {};
  
  std::vector<float> dismantleQtyEcon_;  // This is equivalent to WIT's execVol
  std::vector<float> dismantleQtyNonEcon_; 
  
};


class GARSacquireMtmOpAppData : public GARSappData {
public:

  const std::vector<float> & acquireQtyEcon() const { return acquireQtyEcon_; };
  void acquireQtyEcon(int len, const float * acquireQty) 
  { setVector(len, acquireQty, acquireQtyEcon_); };

  const std::vector<float> & acquireQtyNonEcon() const { return acquireQtyNonEcon_; };
  void acquireQtyNonEcon(int len, const float * acquireQty) 
  { setVector(len, acquireQty, acquireQtyNonEcon_); };

  // constructor
  GARSacquireMtmOpAppData(int nPeriods):
  GARSappData(),
  acquireQtyEcon_(),
  acquireQtyNonEcon_()
  {
    for ( int i=0; i<nPeriods; ++i ) {
      acquireQtyEcon_.push_back(0.0f);
      acquireQtyNonEcon_.push_back(0.0f);
    }
  };
  
  // destructor
  virtual ~GARSacquireMtmOpAppData(){};
  
  // copy constructor
  GARSacquireMtmOpAppData( const GARSacquireMtmOpAppData& source ):
  GARSappData(source),
  acquireQtyEcon_(source.acquireQtyEcon_),
  acquireQtyNonEcon_(source.acquireQtyNonEcon_)
  {};
  
  // assignment operator
  GARSacquireMtmOpAppData&
    operator=(const GARSacquireMtmOpAppData& rhs)
  {  
    if (this != &rhs) {        
      GARSappData::operator=(rhs);
      acquireQtyEcon_ = rhs.acquireQtyEcon_;
      acquireQtyNonEcon_ = rhs.acquireQtyNonEcon_;
    }
    return *this;
  }

  virtual GARSappData * clone() const
  { return (new GARSacquireMtmOpAppData(*this));}
  
  // Self-test
  //static void test();
private:
    
  // default constructor - not to be used
  GARSacquireMtmOpAppData():
  GARSappData(),
  acquireQtyEcon_(),
  acquireQtyNonEcon_()
  {};
  
  std::vector<float> acquireQtyEcon_;  // This is equivalent to WIT's execVol
  std::vector<float> acquireQtyNonEcon_;  // This is equivalent to WIT's execVol
  
};
#endif

#if 0
class GARScombinePartsOpAppData : public GARSappData {
public:

  const std::vector<float> & subsUsageQtyEcon() const { return subsUsageQtyEcon_; };
  void subsUsageQtyEcon(int len, const float * subsUsageQty) 
  { setVector(len, subsUsageQty, subsUsageQtyEcon_); };

  const std::vector<float> & subsUsageQtyNonEcon() const { return subsUsageQtyNonEcon_; };
  void subsUsageQtyNonEcon(int len, const float * subsUsageQty) 
  { setVector(len, subsUsageQty, subsUsageQtyNonEcon_); };

  // constructor
  GARScombinePartsOpAppData(int nPeriods):
  GARSappData(),
  subsUsageQtyEcon_(),
  subsUsageQtyNonEcon_()
  {
    for ( int i=0; i<nPeriods; ++i ) {
      subsUsageQtyEcon_.push_back(0.0f);
      subsUsageQtyNonEcon_.push_back(0.0f);
    }
  };
  
  // destructor
  virtual ~GARScombinePartsOpAppData(){};
  
  // copy constructor
  GARScombinePartsOpAppData( const GARScombinePartsOpAppData& source ):
  GARSappData(source),
  subsUsageQtyEcon_(source.subsUsageQtyEcon_),
  subsUsageQtyNonEcon_(source.subsUsageQtyNonEcon_)
  {};
  
  // assignment operator
  GARScombinePartsOpAppData&
    operator=(const GARScombinePartsOpAppData& rhs)
  {  
    if (this != &rhs) {        
      GARSappData::operator=(rhs);
      subsUsageQtyEcon_ = rhs.subsUsageQtyEcon_;
      subsUsageQtyNonEcon_ = rhs.subsUsageQtyNonEcon_;
    }
    return *this;
  }

  virtual GARSappData * clone() const
  { return (new GARScombinePartsOpAppData(*this));}
  
  // Self-test
  //static void test();
private:
    
  // default constructor - not to be used
  GARScombinePartsOpAppData():
  GARSappData(),
  subsUsageQtyEcon_(),
  subsUsageQtyNonEcon_()
  {};
  
  std::vector<float> subsUsageQtyEcon_;  // This is equivalent to WIT's execVol
  std::vector<float> subsUsageQtyNonEcon_;  
};
#endif
#endif
@


1.1
log
@Initial revision
@
text
@d7 6
a17 3
  // destructor
  virtual ~GARSappData(){};
  
d42 4
a45 1

d49 3
a51 2
  double newCost() const { return newCost_; };
  void newCost(float nc) { newCost_ = nc; };
d53 5
a57 2
  const std::vector<float> & fcstQty() const { return fcstQty_; };
  void fcstQty(int len, const float * fcstQty ) { setVector( len, fcstQty, fcstQty_ ); };
d60 3
a62 1
  GARSpartAppData():newCost_(0),fcstQty_(){};
d65 1
a65 1
  ~GARSpartAppData(){};
d70 3
a72 2
    newCost_(source.newCost_),
    fcstQty_(source.fcstQty_)
a80 1
      newCost_ = rhs.newCost_;
d82 2
d87 3
a94 1
  float newCost_;
d96 52
d158 1
a158 10
  const std::vector<float> & econCovQty() const { return econCovQty_; };
  void econCovQty(int len, const float * econCovQty) 
  { 
    assert( demQty_.size() != 0 );
    setVector(len, econCovQty, econCovQty_); 
  };

  const std::vector<float> & nonEconCovQty() const { return nonEconCovQty_; };
  void nonEconCovQty(int len, const float * nonEconCovQty) 
  { setVector(len, nonEconCovQty, nonEconCovQty_); };
d163 3
a165 3
  demQty_(),
  econCovQty_(),
  nonEconCovQty_()
d169 2
a170 2
      econCovQty_.push_back(0.0f);
      nonEconCovQty_.push_back(0.0f);
d180 3
a182 3
  demQty_(source.demQty_),
  econCovQty_(source.econCovQty_),
  nonEconCovQty_(source.nonEconCovQty_)
d192 2
a193 2
      econCovQty_ = rhs.econCovQty_;
      nonEconCovQty_ = rhs.nonEconCovQty_;
d197 3
d208 3
a210 3
  demQty_(),
  econCovQty_(),
  nonEconCovQty_()
d214 2
a215 2
  std::vector<float> econCovQty_;
  std::vector<float> nonEconCovQty_;
d220 11
d232 55
a286 1
class GARSoperationAppData : public GARSappData {
d289 7
a295 3
  const std::vector<float> & demanQty() const { return demanQty_; };
  void demanQty(int len, const float * demanQty) 
  { setVector(len, demanQty, demanQty_); };
d298 1
a298 1
  GARSoperationAppData(int nPeriods):
d300 2
a301 1
  demanQty_()
d304 2
a305 1
      demanQty_.push_back(0.0f);
d310 1
a310 1
  virtual ~GARSoperationAppData(){};
d313 1
a313 1
  GARSoperationAppData( const GARSoperationAppData& source ):
d315 2
a316 1
  demanQty_(source.demanQty_)
d320 2
a321 2
  GARSoperationAppData&
    operator=(const GARSoperationAppData& rhs)
d325 2
a326 1
      demanQty_ = rhs.demanQty_;
d330 3
d339 26
a364 1
  GARSoperationAppData():
d366 17
a382 1
  demanQty_()
d385 25
a409 1
  std::vector<float> demanQty_;  // This is equivalent to WIT's execVol
d411 2
d414 1
@


1.1.1.1
log
@Gars
@
text
@@
