head	1.1;
access;
symbols;
locks; strict;
comment	@// @;


1.1
date	2001.06.08.16.27.40;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.1
log
@updated files
@
text
@#if defined(_MSC_VER)
  #pragma warning(disable:4786)
  #pragma warning(disable:4503)
#endif

#include <assert.h>
#include <stdlib.h>


#include "OsiFloatEqual.h"
#include "solnDemand.h"


// Use macro to define body of get methods
getFieldFileWithIterator(GARSsolnDemandFile, partName);
getFloatFieldFileWithIterator(GARSsolnDemandFile, internal1ShipQty);
getFloatFieldFileWithIterator(GARSsolnDemandFile, internal4ShipQty);
getFloatFieldFileWithIterator(GARSsolnDemandFile, externalShipQty);
getFloatFieldFileWithIterator(GARSsolnDemandFile, noSourceShipQty);



//------------------------------------------------------------------------------
std::string
  GARSsolnDemandFile::key( unsigned int recNum )
const
{
  std::string retVal = partName(recNum) /*+ period(recNum)*/;
  return retVal;
}



//------------------------------------------------------------------------------
// preferred constructor
//------------------------------------------------------------------------------
GARSsolnDemandFile::GARSsolnDemandFile (
  std::string filename
    ) 
    : SCOcsvFormatFile(filename)
{  
  insertField("partName");  
  insertField("internal1ShipQty");
  insertField("internal4ShipQty");
  insertField("externalShipQty");  
  insertField("noSourceShipQty");
  strip(true);
  fieldSeperator(',');
}
 
  
//------------------------------------------------------------------------------
// destructor
//------------------------------------------------------------------------------
GARSsolnDemandFile::~GARSsolnDemandFile()
{
 // Nothing to do here
}

//------------------------------------------------------------------------------
// Iterator Methods
//------------------------------------------------------------------------------

GARSsolnDemandFileIterator::GARSsolnDemandFileIterator (
  const GARSsolnDemandFile  & file )
  :
  SCOfileIterator(file)
{  
  // Nothing to do here
}
  
GARSsolnDemandFileIterator::~GARSsolnDemandFileIterator()
{
  // nothing to do here
}

#ifdef NDEBUG
#undef NDEBUG
#endif

//------------------------------------------------------------------------------
// Test function
//------------------------------------------------------------------------------
void
GARSsolnDemandFile::test()
{

  OsiRelFltEq eq(1.e-06);

  // test constructor and numRecords methods
  GARSsolnDemandFile file("../data/01Mar23/demand");
  assert( file.numRecords() == 9519 );

  assert( file.partName(4)== "000G2380" );
  float e=file.externalShipQtyAsFloat("000G23802");
  assert( eq(e,3.0) );
  assert( eq(file.internal1ShipQtyAsFloat("099006792"),141.) );
  assert( eq(file.internal4ShipQtyAsFloat("099006792"),14.) );
  //assert( eq(file.internal1Or4DemQtyAsFloat("099006792"),35.) );
  assert( eq(file.noSourceShipQtyAsFloat("099006792"),0.) );

} 
@
