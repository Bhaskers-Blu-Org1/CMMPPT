head	1.1;
branch	1.1.1;
access;
symbols
	sce_5_01_20080919:1.1.1.1
	latest_sce_4_20_20060523:1.1.1.1.0.20
	sce_4_20_20060523:1.1.1.1
	latest_sce4_20_OSL:1.1.1.1.0.18
	sce_4_20_OSL:1.1.1.1
	sce_4_10_30050426:1.1.1.1
	sce_4_05_20040511:1.1.1.1
	sce_4_00_20040201:1.1.1.1
	nextGenBranch:1.1.1.1.0.16
	nextGenRoot:1.1.1.1
	sce_3_30_20030627:1.1.1.1
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@% @;


1.1
date	2000.02.25.18.36.48;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.48;	author wit;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@\documentstyle[11pt]{article}
%\topmargin -.50in
%\headheight 0.250in
%\headsep 0.250in
%\textwidth 7.5in
%\oddsidemargin -0.5in
%\evensidemargin -0.5in
%\textheight 9in

\newcount\hh
\newcount\mm

% TIME OF DAY
\mm=\time
\hh=\time
\divide\hh by 60
\divide\mm by 60
\multiply\mm by 60
\mm=-\mm
\advance\mm by \time
\def\hhmm{\number\hh:\ifnum\mm<10{}0\fi\number\mm}

\begin{document}
\title{User Guide for Release 2.1 Supply Capability Engine (SCE)}
\author{Tom Ervolina (ERVOLINA at YKTVMV)
\\Robin Lougee-Heimer (RLH at YKTVMV) \\ Dan Connors  (DPC at YKTVMV)}
\date{October 31, 1997\footnote{This document was 
formatted on \today\ at \hhmm.}}
\maketitle
\begin{abstract}
The Supply Capability Engine (SCE) is a decision support tool for
supply/demand planning.  SCE uses implosion technology to determine
the allocation of constrained material and capacity resources to
``best'' meet the demand.  SCE extends traditional implosion
technology capability to include multisite-level planning, sourcing,
aggregation of parts, and features, both optional and selective.  This
Guide describes how to use SCE to solve supply/demand planning
problems.
\end{abstract}

\section{Introduction}
Traditional planning methodologies based on Material Requirements
Planning (MRP) systems ``explode'' the demands through the
Bill-of-Manufacturing (BOM) to determine the requirements, both in
quantity and in time, for material and capacity resources.  (For more
details on MRP, \cite{orlicky} provides a good overview of the
subject.)  MRP systems are uncapacitated and assume an unlimited
supply of material and capacity is available.  The MRP methodology has
been widely adopted and successfully deployed throughout many
industries.  However, MRP systems are unable to address many
fundamental questions:
\begin{itemize}
\item Given a constrained supply of material and capacity resources, what
demands can be met?
\item What is the resulting feasible production plan?
\item What are the requirements for the feasible production plan?
\item For a demand that is not met on time, what is needed to make the 
demand on time?
\item How can substitute parts be effectively used?
\end{itemize}
These questions along with other shortcomings of the MRP methodolgy
has led to the development of capacitated planning tools for
constrained resource management and production planning.  One such
tool, the Production Resource Manager (PRM)\cite{PRM1}, incorporates
IBM's patented ``implosion'' technology for solving constrained
resource planning problems.  The term implosion is used to suggest a
reverse procedure of the MRP explosion, namely, determining what
demands can be met given the constrained supply of materials and
capacities.

\subsection{The PRM Implosion Engine}
PRM is a set of software tools that allow developers to create
decision support applications on top of the implosion engine.  The
basic inputs to the engine are standard MRP data on parts, demands,
supplies, BOM's and a description of the allocation objectives.  PRM
can also incorporate substitute parts and Bill-of-Capacity (BOC) and
other advanced MRP data.  PRM uses various techniques, including
mathematical programming and heuristic algorithms, for solving the
implosion problem.  For certain objectives, the implosion problem can
be formulated as a mathematical optimization program.  Given
appropriate cost data, PRM's optimization based implosion engine can
allocate constrained resources in order to maximize profit or revenue
or to minimize inventory.  For other objectives, such as priority
based allocation, PRM's priority based implosion engine can be used

The basic outputs of the PRM implosion engine are the production
volumes of all parts and the shipment volumes to the demands.  PRM can
also report on the stock volumes, scrap volumes, and substitute part
usage volumes.  When PRM is used in an optimization mode, it can
report the value of the objective function.

\subsection{The Supply Capability Engine}
The Supply Capability Engine (SCE) is an application of the Production
Resource Manager.  SCE extends the basic functionality of PRM to
handle a multiple site implosion.  SCE also introduces additional
modeling capability to PRM to handle aggregation of parts and planning
for features and options.  SCE is data driven and can handle problems
ranging from planning for a single line to planning for a global,
complex supply chain.

SCE was designed to meet the needs of the reengineered IBM
supply/demand planning process.  SCE is being used to support the 20
Day Supply/Demand Calendar process.  It is also being used at sites to
support the local execution of plans.

\subsection{Overview of the Guide}
This Guide describes SCE modelling concepts, the data required to run
SCE and the outputs generated by SCE.  In the next section, some of
the basic modeling concepts of SCE are discussed.  In the following
section, a description of the input data is given.  Then a description
of the output data is given.  Finally, a description of how to run SCE
is provided.  The detailed data model for SCE and a guide to the error
messages are provided in separate documents.

\section{The SCE Model}
This section describes the SCE model, the data required to run SCE and
the outputs generated by SCE. SCE 2.1 is a stand-alone executable that
reads input data from flat files and writes results to flat files.
This guide will not attempt to address the issue of how to generate
the input flat files from the actual sources of data, nor will it
address the issue of how to take the output data and integrate it to
the execution systems.  Those issues are all implementation dependent
and are left to the reader.

\subsection{The Scope of the Problem}
SCE is a flexible system allowing one to solve capacitated planning
problems for an environment as simple as a single manufacturing line to an
environment as complex as IBM's global enterprise supply chain.  SCE's
flexibility comes from the fact that the problem SCE is solving is
defined by the input data and parameters.  When preparing input data
for SCE, we must understand the scope of the problem.  We must be able
to identify the boundaries of the ``enterprise.'' being modelled.
Within the scope of the problem being modeled, SCE clearly separates
the demand or marketing view of the problem from the manufacturing
view of the problem.  In subsequent sections, more detail will be
provided about these two views.

As in many engineering modeling exercises, we must also determine the
level of detail at which we want to run the model.  SCE can handle
very large problems, with tens of thousands of part numbers.  This
comes at a cost --- the time it takes to solve the problem and the
size of the machine needed to solve the problem.  (There are other
costs --- preparing the input data for such a large problem and
analyzing the output data for a large problem.)  Judicious pruning of
complex BOMs can help reduce the size of the problem SCE faces.

\subsection{The Calendar}
SCE works with a time-bucketed model.  Through the input data, we
specify the number of buckets or periods in the planning horizon.  We
also provide a calendar file, which gives the starting date of each
bucket and the number of working days within each bucket.  We
recommend that you use buckets of equal time duration.  Certain data
for an SCE model is ``dated'', for example effectivity dates on BOM
records.  For these fields we enter actual calendar dates as data.
Within the SCE program, there is internal logic which handles the
mapping between calendar dates and the appropriate period or bucket.
We can set the format of the calendar dates by specifying the {\tt
calendarFormat} parameter in the SCE parameter's file.  We allow for
three calendar formats:

         \begin{tabular}[t]{lcl}
                              U& $=$& US Format, mm/dd/yyyy \\
                              E& $=$& European Format, dd/mm/yyyy \\
                              G& $=$& General Format, yyyymmdd 
         \end{tabular} \\

Data such as manufacturing cycle times, BOM offsets and interplant
shipment times are expressed in days.  Logic within PRM handles the
appropriate rounding and mapping of this data into SCE's time-bucketed
view.

\section{The Demand View of SCE}
The scope of the problem being modeled sets the boundaries for what
SCE views as demand.  Demands are requirements that are placed from
outside of the manufacturing network.  SCE has adopted the following
convention.  A demand consists of a planner part number, the
``geographic'' source of the demand, and a multiple period
volume statement.  This convention allows the planners who are
responsible for preparing the demand statement to use their own part
naming convention for specifying the demand.  The planner can be quite
flexible when specifying the geographic source of the demand.  The
geographic source could be a specific customer, such as ``ACME'', a
geographic region, such as ``EMEA'' or ``Region 10'', or the worldwide
demand.

For example, if the scope of the SCE problem is a single IBM ECAT line
like Charlotte, demands could consist of the requirements coming from
upstream box ``customers'' like Poughkeepsie S390, Austin RS6000 and
Rochester AS400, requirements coming from Mechanicsburg, and possibly
requirements from OEM customers.  Note that the OEM customers, and the
IBM customers Poughkeepsie, Austin, Rochester and Mechanicsburg are
all outside of the manufacturing network of the Charlotte ECAT line.

SCE was designed to support the reengineered IBM's enterprise
supply/demand planning process.  For IBM's enterprise planning
problem, the scope of the SCE problem is the entire IBM manufacturing
network.  In this process, the demand planners are responsible for
providing statements of demand at geographic levels.  For this large
problem, we see demands coming from EMEA, LA, AP, NA and other
geographic sources.  We also see demands from Mechanicsburg and
Amsterdam for service parts.  Finally, there is demand from our OEM
businesses.

\subsection{Demand Volume}
Demand volume, specified for each planner part number in a geographic
source, is represented as a vector and should contain an entry for
each time period specified in the SCE calendar file.  Multiple demand
records for the same planner part number and geography are permitted;
SCE adds the demand volumes together.   Multiple demand records for 
the same planner part number and geography are
permitted;  SCE adds the demand volumes together for multiple records.


\subsection{Priorities}
There are two basic allocation algorithms within SCE -- priority based
and mathematical optimization based.  When running SCE with the
priority based allocation scheme, the demand planners are also
responsible for setting the priority of the demands.  The priority
allocation scheme works as follows.  Within a time period or bucket,
the demands are sorted from highest priority to lowest priority (the
larger the priority number, the higher the priority).  The allocation
scheme attempts to satisfy these demands by working on the highest
priority demand first, then the next highest and so on.  Demands which
cannot be satisfied fall into backlog and SCE has two schemes for
handling backlog, which will be discussed below.  After all of the
demands within a time period have been worked on, the algorithm moves
to the next period and begins allocating to those demands.

The SCE parameter {\tt defaultPriority} can be used to set the
default priority for demands.  Demands which have not had their
priority explicitly set will assume this default priority.

\subsection{Equitability}
One of the first questions users of SCE pose after learning about
priorities is: How does SCE break ties?  In the default behavior,
({\tt equitability} $=$ 1), SCE sorts the demands by priority.
Demands of equal priority will be assigned a position in the sorted
list among their peers of other equal priority demands.  The algorithm
then proceeds as described above.  The order in which equal priority
demands enter the sorted list is controlled by the internal PRM code
and is, for all practical purposes, not controllable by the user.
 
For users who want a more equitable sharing of constrained resources
among demands of equal priority, they may want to set the {\tt
equitability} factor to an integer larger than one.  The allocation
logic breaks up demands of equal priority into ``equal'' pieces of
demand, with the number of pieces given by the {\tt equitability}
factor.  For example, if there is a demand for 100 and the {\tt
equitability} factor is 5, then this demand is broken into 5 pieces,
each having a demand of 20.  These smaller demands are than interwoven
with other demands of equal priority and the allocation logic
described above is applied to these demands.

The {\tt equitability} factor is a global parameter for all demands in
the problem.

\subsection{Minimum Demand}
Although the user can shape the solution of the allocation by
assigning priorities to demands, the user may also want to ensure that
some demands are satisfied at a minimum level.  For example, when
allocating supplies to geographies or customers, we can assign higher
priorities to the more important customers, but we can also specify
that the less important geographies or customers get a specified
minimum volume.  If using the priority based allocation algorithms,
the algorithms will first attempt to satisfy the minimum demands and
then will use the standard priority based allocation algorithms for
the remaining demands.  The minimum demands may not be feasible, in
which case the algorithms will meet as much
of the minimum demand as possible.  

\subsection{Handling Backlogs}
SCE's priority based allocation algorithms can handle backlogs in two
distinct manners: backlog priority and rollover priority.  In the
backlog priority scheme, demands which are not satisfied on time
(partial or full) carry into the next period and take on highest
priority in the next period.  In the rollover priority scheme, demands
which are not met on time roll into the next period, add to the
demands of the next period and assume the priority of the demands in
the next period.  If you use the rollover priority scheme, you should
provide priorities for a demand for all periods, even if there isn't a
demand in that period.  Otherwise, SCE would use a default priority
for demands that roll forward into a period in which you haven't given
a priority.  SCE's optimization based allocation scheme handles
backlogs based on the rewards and penalties of satisfying demands.
Users specify the allocation {\tt engine}: {\tt optimization}, {\tt
heuristic} (backlog priority), or {\tt rollover} (rollover priority).

\subsection{Demand Perishability}
We can model the loss of unmet demands in two ways: a ship late limit,
and a demand perishability.  If using one of SCE's priority based
allocation engines, you can set the global {\tt defaultShipLateLimit}
parameter.  This parameter sets the number of periods, after which an
unsatisfied demand is lost.  For example, if you set the parameter to
2, then any demand which is not met by at most two periods after it is
due is lost.

Demand perishability applies to individual demands and defines how
much of unmet demand in a period will carry over into the next period.
Demand perishability factors are time vectors that are specified for
individual demands.  You can have some demands with larger
perishability factors than other demands.

\subsection{Demand Revenue and Profit}
SCE's optimization allocation algorithm can be set to maximize revenue
or profit.  The user must set the {\tt engine} to {\tt optimization},
and then set the {\tt objectiveType} for revenue or profit based
optimization.  If you choose revenue based optimization, you must
provide demand revenue data for each demand (planner part number,
geography/customer).  If you choose profit based optimization, you
must provide demand profit data for each demand.  Note that in either
cases, the demand or profit can be different for different customers
for the same planner part number.

\section{The Manufacturing View of SCE}
This section describes the data necessary for defining the
manufacturing view of SCE.  This data includes manufacturing bills of
material and capacity, cycle times, yields, lot sizing, supply of
parts, interplant relationships and operations.

\subsection{Part Definition}
Every part which will be used in the manufacturing data must be
defined in the part definition file.  A part's definition includes its
part number, and the name of the production facility (PDF) at which it is
a valid part. If the same part number
is used at two or more plants, it must be defined at each of the
plants.

\subsection{Critical Part}
Critical parts are those parts which are at the lowest level of the
BOM structures, that have a constrained supply.  Critical parts are
listed in the parts conditioning file.  The list consists of the part
numbers and the PDFs at which the parts are constrained.  Parts which
are at the lowest level of a BOM which are not in the parts
conditioning file are considered to be unconstrained.  During the
execution of SCE's allocation algorithms, if there isn't enough supply
of an unconstrained part, SCE will create enough supply of that part
in order to not constrain the meeting of a demand (outside of any
cycle time for the part).  However, SCE will
not create supply for constrained parts; it will only use the supply
of the part provided in the supply file.

The parts conditioning file can help the user manage the low dollar,
non-critical parts (eg. nuts and bolts, packaging material) which
shouldn't be gating the demands.  By excluding these parts from the
parts conditioning file, we will not gate demands due to the supply of
these parts.  In fact, we can set their supply to zero and let SCE
tell us how much supply of those parts are needed to support the
production schedules.

For a part in the parts conditioning file, we can set the {\tt
constraintEndDate} for the part.  Then SCE will treat the part as
constrained up until this end date, after which the part is considered
to be unconstrained.

\subsection{Manufacturing Bill of Material}
SCE's bill of material record describes a parent/child relationship
at the PDF at which the relationship is valid.  The user can also
specify additional MRP-like BOM data such as the usage rate (quantity
per), usage time (offset), effectivity dates, fallout percentages, and
advanced flags for mandatory EC's, phantom bills and remove bills.
Note that if a parent part is built in two or more production
facilities, it must have SCE BOM records defined at each PDF.

\subsection{Manufacturing Substitute Bill of Material} 
SCE allows for manufacturing substitute BOM records.  The record
consists of the parent part number, the child part number, the
substitute part number and the PDF at which the manufacturing (and
substitution) takes place.  There are additional advanced MRP-like
parameters which are given in the SCE data model.  Note that the
substitute BOM record is valid for a specific parent/child/pdf
relationship.

\subsection{Manufacturing Cycle Time}
For any manufacturing part which has been defined in the parts
definition file, you can specify the cycle time, the number of days in
takes to build the part (the time to assemble the single level bill).
The cycle time record consists of the manufacturing part number, the
PDF, the cycle time, and effective dates.  The same part can be manufactured in
different locations with different cycle times.

\subsection{Manufacturing Yield}
For any manufactured part which has been defined in the parts
definition file, you can specify the yield of the assembly process.
The yield record consists of the manufacturing part number, the PDF,
the yield, and effective dates.  The same part can be manufactured in different
locations with different yields.

\subsection{Manufacturing Lot Size}
If you are using one of SCE's priority based engines, you can set a
lot size for any manufactured part.  The lot size record consists of a
manufacturing part number, the PDF, the minimum lot size, the
incremental lot size, and effective dates.

\subsection{Part Aggregation}
For advanced modeling, SCE has the ability to aggregate parts.
Aggregate parts can be used to represent a a set of parts.
 The part aggregation record consists of a
manufacturing part number and PDF where it is valid and an aggregate
part number and PDF where it is valid.  This record would mean that
the manufacturing part number comes from the aggregate part.  For
example, a supplier who supplies us with resistors may be able to give
us a volume commitment at a family of parts level.  If we know the
parts that belong to this family, we can set up aggregate records to
indicate that the supply of real resistor part numbers comes from the
supply of the aggregate part.

\subsection{Part Supply Availability}
The supply availability data tells SCE how much of a part will be
available from outside of the manufacturing network.  This could
include the initial on-hand inventory, WIP, or supply we get from
sources outside of the network we have modeled.  A supply record
consists of a manufacturing part number, the PDF at which the supply
is available, the supply volume vector.  Note that supply can appear
at any level in the BOM, from the lowest level to the final
manufactured part.  This permits us to model some make/buy situations.
Remember that supply is what is coming from outside of the
manufacturing network we have modeled.  Do not include in the supply
statement those lower level parts which we have already captured in
the network.  Multiple supply records for the same part number and PDF are
permitted;  SCE adds the supply volumes together for multiple records.

\subsection{Capacity Definition}
SCE can also model capacity resources.  In order to consider capacity
resources in the SCE model, you must first define the capacity
resources.  For every capacity that will be used in the manufacturing
data, you must define it and the PDF at which it is valid.  You may
want to model detailed capacities such as specific testers or other
equipment, or model higher level capacities such as line or daily
going rate capacities.  Capacities differ from parts in that if you
don't use a capacity within the period it is available, the unused
portion is lost; it doesn't roll into the next period.

\subsection{Manufacturing Bill of Capacity}
Like a BOM, a bill of capacity (BOC), defines parent/child
relationships in which the parent is a manufactured part, and the
child is a capacity resource.  You must also provide the PDF at which
the record is valid.  You can also give the usage rate of the capacity
(the default is one unit), the usage time and effectivity dates.  The
usage rate must be in units consistent with how the capacity supply
has been specified.

\subsection{Capacity Supply Availability}
The capacity availability data tells SCE how much of a capacity
resource part will be available at a specified PDF.  As noted above,
the supply must be in units consistent with the usage rate given in
the BOCs.  Suppose your bill of manufacturing (BOM and BOC) for CardA
at Charlotte requires using a tester named Tester1 for 30 minutes, the
tester is available for two 8 hour shifts (16 hours), your calendar is
set up to handle daily buckets, and your problem is a single period
problem.  Then your supply record would include the name of the tester
capacity resource, Tester1, the PDF, Charlotte, and the supply, 16.
The BOC record would contain data for the parent, CardA, the child
capacity resource, Tester1, the PDF, Charlotte, and the usage rate,
0.5 (half an hour).

\subsection{Production Bounds}
For any manufactured part in your model, you can specify both upper
and lower bounds for the production schedules of that part.  This
allows you to control how much of a part gets produced within the
manufacturing network.  If you are using a priority based engine, SCE
will only respect the production upper bounds, if it is feasible.  If you are
using the optimization based engine, then both upper and lower 
bounds will be respected (if it is feasible).

\subsection{Operation Definition}
For advanced modeling, SCE has incorporated PRM's notion of
operations.  Operations are generalizations of BOMs.  They describe
how parts and capacities come together to produce other parts and
capacities.  Recall that a BOM describes how parts and capacities come
together to form the parent part.  Operations are needed to model the
complexities arising from co-product generation, rework, speed sorting
and other manufacturing scenarios in which more than one part or
capacity is produced.  Like parts and capacities, operations which
will appear in the manufacturing data must be defined at a PDF.  We
use the term ``execute'' to describe when an operation gets
carried out.

\subsection{Operation Bill of Material}
The operation bill of material gives parent child relationships, where
the parent is a valid operation and the child is a part or capacity
resource.  You must also provide the PDF where this relationship is
valid.  You can also specify usage rates, offsets, effectivity dates
and fallout factors for an operation BOM.

\subsection{Operation Bill of Production}
The operation bill of production (BOP) describes which parts or
capacities are produced due to the execution of an operation.  An
operation BOP consists of the part or capacity produced by the
execution of the operation, the operation name, and the PDF.  You can
also specify the production rate for the part being produced, offsets,
effectivity dates, and other advanced parameters.
 
\subsection{Operation Yield}
For any operation which has been defined in the operations definition
file, you can specify the yield of the operation.  The yield record
consists of the operation name, the PDF, and the yield.  The same
operation can be executed in different locations with different
yields.

\subsection{Operation Lot Size}
If you are using one of SCE's priority based engines, you can set a
lot size for any operation.  The lot size record consists of an
operation name, the PDF, the minimum lot size and the incremental lot
size.

\subsection{Operation Bounds}
For any operation in your model, you can specify both upper and lower
bounds for the execution schedules of that operation.  This allows you
to control how many times an operation gets executed within the
manufacturing network. 
If you are using a priority based engine, SCE
will only respect the operation upper bounds, if it is feasible.  If you are
using the optimization based engine, then both upper and lower 
bounds will be respected (if it is feasible).

\subsection{Interplant}
The interplant file describes how parts flow among the multiple plants
in the manufacturing network.  You specify the sourcing of parts
within the network.  An interplant record consists of the destination
PDF part number, the destination PDF, the source PDF part number, and
the source PDF.  You can also include the transit time, in days, to go
from the source to destination PDF (``stock to stock''), effectivity 
dates lot sizes, and
the preference or cost of choosing this source.  If you have more than
one source for a part, you can use this last parameter to give
preference to a priority based allocation engine, or cost to the
optimization based engine, for using this choice for source.

\section{Building Blocks/Selective Features and Optional Features}
SCE has the ability to consider both building blocks, also known as
selective features, and optional features, when allocating constrained
resources to the demands.  We have attempted to capture different
types of features.  In selective features, or building blocks, the
customer chooses from among a set of parts, the desired feature.  For
example, when purchasing a computer system, the customer selects a
language publication package from a set of publications in different
languages.  When a customer purchases a Risc System 6000, the
customer selects the hard disk from a set of hard disks, for example,
4Gb, 8Gb, or 12Gb.  SCE's selective features attempts to model this
aspect of the customer choosing one, or perhaps more, items from a
set.  Optional features are as the word implies -- optional.  When
purchasing a computer system, the customer may select to buy a token
ring card; it's optional.  Some customers will purchase the option and
others won't.

SCE requires that the selective features or optional features be
considered as children of top-level parts.  We don't allow you to
model selective features or optional features for parts which are
themselves subassemblies.  In fact, selective features and optional
features are actually coupled to demands as described below.

\subsection{Building Block Category}
To use building blocks or selective features, you must define
categories for your selective parts.  A category is a unique
identifier for a demand (planner part number and geography) which
calls out the usage of selective features.  For example, the EMEA
demand for a AS400 Model ABC may call out for a category
``LangPubs\_EMEA\_AS400ABC'', which will represent the set of language
publications available for EMEA demand for the AS400 Model ABC.  You
also need to provide an upper limit on the number of selective
features within a set that can be included into the top-level build
when satisfying the demand.  If you set this limit to one, this is
equivalent to choosing exactly one feature within the selective set.
You may set this limit greater than one to model building block
categories for which the customer may choose more than one feature
from the selective set.  The format of a record in the top-level build to
building block category definition file is a demand (planner part number and
geography), the category name, and the upper limit, whose default value is one.

\subsection{Building Block Ratio}
Once you have defined the categories, you then must list the features
that belong to a category and the ratio at which that feature is
selected when a customer purchases the demanded part.  In our example
on language publications, the selective features belonging to the
``LangPubs\_EMEA\_AS400ABC'' category could be ``PubEngUS'',
``PubEngUK'', ``PubFR'', ``PubGR'' and ``PubSP'', representing the
publication packages for US English, UK English, French, German and
Spanish.  There feature ratios could be 0.2, 0.1, 0.3, 0.3, and 0.1,
indicating we expect 20\% of the demand for AS400 Model ABC from EMEA
to request the US English publication package, 10\% to request the UK
English publication package, and so on.  The record in the top-level
build to building block category ratio file consists of a demand
(planner part number and geography), a building block category, a part
number belonging to that category, the usage rate of the part when it
is called out, and the feature ratio of the part.  The feature ratio
is a time vector.  In the implosion solution, the feature ratio is
multiplied by the total demand and this represents the maximum amount
of the demand that can be produced with the part.  In our example, if
the demand for AS400 Model ABC from EMEA is 100, then the maximum
number of AS 400 Model ABC's with the German language publications
that we would plan to ship to EMEA is 30.  Observe that if only have
25 German publication packages, that will prevent meeting the EMEA
demand.

\subsection{Building Block Revenue and Profit}
In this version of SCE, you must use either revenue or profit
optimization if you are using SCE's building block modeling
capability.  You must provide either revenue or profit data for the
additional revenue or profit associated with supplying the feature
part with the demanded part (planner part number and geography).  Make
sure you aren't counting the revenue or profit twice.  The format of
these files is a demand (planner part number and geography), the
feature part, and a vector of revenue or profit for supplying the
feature to the demand.  You can assign different revenue or profit
rewards for different geographies and SCE will allocate the features
to the demands that maximize your economic objectives.  Note that
parts which belong to building block categories can also appear as
mandatory BOM entries in other assemblies.

\subsection{Optional Feature Ratio}
To use optional features, for every part which can be optional for a
demanded part (planner part number and geography), you must provide
the option ratio for this part on the demanded part.  In the implosion
logic, this ratio multiplied by the shipment quantity of the demanded
part represents the maximum amount of the feature that can be shipped
with the demanded part.  We attempt to maintain the feature ratio in
the shipment quantity.  We typically do not want to gate the shipment
of a demand due to a shortage in an optional part.  However, SCE has
the ability to gate the shipment of demand because of a constraining
optional part.  For an optional feature and the demand there is a
parameter which can limit the maximum amount of the demand we want to
ship without the feature.  We call this parameter {\tt
max\_ship\_without}.  The default value of this parameter is 1,
meaning that the feature is purely optional and will not gate demand.
If you set the value of the parameter to 0, then the feature is
mandatory.  The product of the option ratio and the total demand is
the upper limit on how much demand we will satisfy without the
feature.  The format of a record in the top-level build to optional
option ratio file is a demand (planner part number, geography),
optional part, usage rate, a vector of option ratios, and a vector of
ratios for the {\tt max\_ship\_without} parameter.

\subsection{Optional Feature Revenue and Profit}
You can use either the heuristic implosion engine or the revenue or
profit optimization engines when running SCE.  If you select an
economic based optimization engine and you are modeling optional
features, you will need to provide an optional feature revenue or
profit file.  The revenue or profit data represents the additional
revenue or profit you will receive if you ship an optional feature to
a demand.  The format of a record in the optional feature revenue or
profit files consists of a demand (planner part number and geography),
optional feature, and a vector for the additional revenue or profit.
You can assign different revenue or profit rewards for different
geographies and SCE will allocate the optional features to the demands
that maximize your economic objectives. Note that parts which belong
to categories can also appear as mandatory BOM entries in other
assemblies.

\section{Linking the Demand View to the Manufacturing View}
We have presented the Demand and Manufacturing views of SCE.  These
views are linked by the Demand Geography To Pdf Source File.  This
data defines how demand (a planner part number and geography
(customer)) is sourced.  A record for this data consists of the
planner part number, the geography, the manufacturing part number and
the manufacturing PDF.  You can also provide effectivity dates and
transit times from the PDF to the geography.  Only one source may be
in effect at any time for a specific demand.  (If you want to model
the demand sourcing decision, introduce a ``fulfillment center.''
Source the demand to the fulfillment center, and then use the
preference/cost data on an interplant record to source the supply to
the fulfillment centers from the possible manufacturing PDFs.)

\section{SCE Parameters}
There are many parameters which govern how SCE runs, where it looks
for input data, and what reports it generates.  These parameters are
given in the parameters file.  The name of the parameters file must be
passed to the SCE executable from the command line when you invoke
SCE.  Look at the Parameters File section of the SCE Data Model for a
complete listing of SCE parameters.  The table gives the name of the
parameter, the type of parameter (boolean, string, character, etc.),
whether the parameter is mandatory, and a comment about the parameter.
 
\section{Outputs of the Demand View}
The results of SCE's allocation of constrained resources are reported
in various output files.  The output results are partioned into a
demand view and a manufacturing view, as is the input data.

\subsection{Supply Response}
The supply response file reports how SCE has allocated the constrained
resources to best meet the demand.  In this file you will find for
each demand specified in the input data a corresponding supply
response.  The supply response consists of the planner part number,
the geography (customer), and the supply volume vector, where entries
in the vector tell us how much of the demand is met in the
corresponding period.

\subsection{Backlog Response}
The backlog response tells us how much behind schedule a demand will
be.  The backlog in period $t$ is the cumulative demand through period
$t$ minus the cumulative supply response through period $t$.
(Perishable demand will appear as backlog.)

\section{Outputs of the Manufacturing View}
SCE reports manufacturing results in several output files.  SCE
computes the build schedule for every manufactured part, the usage of
every part, the substitute usage of every substitute part, and many
other MRP and implosion related data.

\subsection{Manufacturing Build Schedule}
For every manufactured part, SCE reports the recommended in house build
schedule for that part.  A record in the manufacturing build schedule
consists of the manufacturing part number, the PDF at which the
manufacturing takes place, and a build volume vector.  The volumes
reported are with respect to the completion date of the manufacturing.

For lowest level parts in the BOM which are not in the parts
conditioning file, SCE will report here the volume of the part that
SCE had to create in order to not constrain the demand.


\subsection{Manufacturing Substitute Part Usage}
For each parent/child/substitute/PDF relationship defined in the
manufacturing substitute BOM input file, SCE reports how much of the
parent is produced at the PDF using the substitute part in place of
the child part. This is based on the implosion solution.

\subsection{Manufacturing MRP Substitute Part Usage}
For each parent/child/substitute/PDF relationship defined in the
manufacturing substitute BOM input file, SCE reports how much of the
parent is produced at the PDF using the substitute part in place of
the child part.  This is based on the MRP solution.

\subsection{Manufacturing Part Database Dump}
The manufacturing part database dump file is a large collection of MRP
and implosion data for each manufacturing part in the model.  A record
in this file consists of a manufacturing part number, PDF, a keyword
and a vector of data for that keyword.  If the vector of data contains
all zeros, the record is excluded from the report.  Here are
descriptions of the keywords:
\begin{description}

\item[bldVol] 
The amount produced, as determined by implosion, from building the
part in house (from the build schedule file).

\item[consVol] 
The total volume consumed (used) by parent assemblies or
shipped directly to meet an external demand.  This can also be 
thought of as the usage of the part.

\item[cycletime]
The cycletime, in periods, as used by SCE.  Parts in the parts
conditioning file get assigned a cycletime of $-1$.

\item[deAggVol] 
The amount produced, as determined by implosion, from deaggregation.

\item[excessVol] 
The amount that supplyVol could be reduced while still 
achieving the same production and shipment schedule as determined by
implosion.

\item[intPlVol]
The amount arriving, as determined by implosion, from interplant
shipments (from the interplant orders file).

\item[mrpBldVol] 
The amount produced, as determined by MRP, from building the part in
house.

\item[mrpConsVol]  
The total demand on the part.  
total demand $=$ dependent $+$ independent demand.  (Note: this
differs from PRM where mrpConsVol is only the dependent demand on the
part.)

\item[mrpDeAggVol] 
The amount produced, as determined by MRP, from deaggregation.

\item[mrpExcessVol] 
The amount that supplyVol could be reduced while still 
achieving the same MRP requirements schedule, reqVol. 

\item[mrpIntPlVol] 
The amount arriving, as determined by MRP, from interplant shipments
(from the interplant demand file).

\item[mrpProdVol] 
The total MRP production volume for each time period as 
determined by SCE's MRP. The MRP production volume is the sum of the
MRP amount produced by building the part in house, the MRP 
amount produced by deaggregration, the MRP amount arriving
through interplant shipments (from the interplant orders file), and
the MRP amount produced from user defined operations.  

\item[mrpRequirements] 
This is (reqVol - mrpExcessVol).  In MRP terms,
the reqVol would be the recommended planned orders, and the
mrpExcessVol would be the recommended cancel orders. When you add them
together to get "mrpRequirements", you get one line that shows it all.
We don't go the extra step and do order move recommendations.

\item[mrpResidualVol]
The amount that the supplyVol and mrpProdVol could be reduced while
still achieving the same MRP requirements, reqVol.  This term includes
the mrpExcessVol and any excess due to co-product generation, negative
usage rates, and lot sizing.

\item[mrpUserOpVol] 
The amount produced, as determined by MRP, from user defined
operations.

\item[prodVol] 
The total production volume for each time period as 
determined by implosion. The production volume is the sum of the
amount produced by building the part in house (from the build schedule
file), the amount produced by deaggregration, the amount arriving
through interplant shipments (from the interplant orders file), and
the amount produced from user defined operations.  This is given in
terms of completion period rather than release period in order to be
consistent with the input format, which specifies all time-dependent
data in terms of completion period.

\item[reqVol]  
The net-required quantity (MRP calculation)
for each time period as computed by SCE's MRP engine.

\item[residualVol] 
The amount that the supplyVol and prodVol could be reduced
while still achieving the same production and shipment schedule as
determined by implosion.  This term includes the excessVol and any
excess due to co-product generation, negative usage rates, and lot
sizing.

\item[scrapVol]
The quantity of the part scrapped, as determined by the implosion solution.

\item[stockVol] 
Projected stock (inventory) level for each period with respect
to the SCE generated implosion solution.

\item[supplyVol]  
The total supply that the was entered through the Supply Availability
File.  In SCE, you can have multiple supply records for a given part
at a PDF.  This total reported here is the sum of the supply records.
 
\item[userOpVol] 
The amount produced, as determined by implosion, from user defined
operations.

\end{description}

\subsection{Manufacturing Part Total Demand}
The manufacturing part total demand reports the total demand,
independent $+$ dependent, for a manufacturing part.  A record in this
file consists of the manufacturing part number, the PDF, and the total
demand vector.

\subsection{Manufacturing Capacity Database Dump}
The manufacturing capacity database dump file is a large collection of
MRP and implosion data for each capacity defined in the model.  A
record in this file consists of a capacity name, PDF, a keyword and a
vector of data for that keyword.  If the vector of data contains all
zeros, the record is excluded from the report.  If you don't define
capacities in your input model, SCE will not create this report.  Here
are descriptions of the keywords:
\begin{description}
\item[consVol]
The total volume consumed (used) by parent assemblies.  

\item[excessVol]
The amount that supplyVol could be reduced while still 
achieving the same production and shipment schedule as determined by
implosion.
 
\item[mrpConsVol]
The total demand on the capacity.
 
\item[mrpExcessVol]
The amount that supplyVol could be reduced while still 
achieving the same MRP requirements schedule, reqVol. 
 
\item[mrpRequirements]
This is (reqVol - mrpExcessVol).  
 
\item[mrpUserOpVol]
The amount of the capacity produced, as determined by MRP, from user
defined operations.
 
\item[reqVol]
The net-required capacity (MRP calculation)
for each time period as computed by SCE's MRP engine.
 
\item[scrapVol]
The quantity of the capacity not used (scrapped), as determined by the
implosion solution.
 
\item[supplyVol]
The total supply of capacity that the was entered through the Capacity
Supply Availability File.  In SCE, you can have multiple supply
records for a given capacity at a PDF.  This total reported here is the sum
of the supply records.
 
\item[userOpVol]
The amount of the capacity produced, as determined by implosion, from
user defined operations.
\end{description}

\subsection{Interplant Orders File}
The interplant orders file reports the volume of flow of a part
between plants.  For each input interplant record (destination part
number, destination PDF, source part number, source PDF), this file
reports the volume of the flow, based on SCE's constrained implosion
solution, of the source part from the source PDF to the destination
PDF and destination part number.  The data given represents the
quantity recieved at the destination Pdf in each period (ie, the
``customer's view'').
If you don't define interplant
relationships in your input model, SCE will not create this report.

\subsection{Interplant Demand File}
The interplant demand file reports the volume of flow of a part
between plants in an unconstrained environment (MRP solution).  For
each input interplant record (destination part number, destination
PDF, source part number, source PDF), this file reports the volume of
the flow, based on an MRP unconstrained solution, of the source part
from the source PDF to the destination PDF and destination part
number.   The data given represents the
quantity recieved at the destination Pdf in each period (ie, the
``customer's view'').
 If you don't define interplant relationships in your input
model, SCE will not create this report.

\subsection{Operation Execution Schedule}
The operation execution schedule reports the execution volume for
every operation you have defined.  A record in this file consists of
the operation name, the PDF, and a execution volume vector.

\subsection{Operation Substitute Usage Execution Schedule}
The operation substitute usage execution schedule reports the
execution volume for every operation for which a substitute part in
the operation's BOM was used. A record in this file consists of the
operation name, the primary part number, the substitute part number,
the PDF, and a substitute execution volume vector.  This is based on the
implosion solution.

\subsection{MRP Operation Substitute Usage Execution Schedule}
The MRP operation substitute usage execution schedule reports the
execution volume for every operation for which a substitute part in
the operation's BOM was used. A record in this file consists of the
operation name, the primary part number, the substitute part number,
the PDF, and a substitute execution volume vector.  This is based on the
MRP solution.

\subsection{Operation Database Dump}
The operation database dump file is a large collection of
MRP and implosion data for each user defined operation in the model.  A
record in this file consists of a operation name, PDF, a keyword and a
vector of data for that keyword.  If the vector of data contains all
zeros, the record is excluded from the report.  If you don't define
operations in your input model, SCE will not create this report.  Here
are descriptions of the keywords:

\begin{description}
\item[execFlag]
A boolean indicating if the operation is executable in the period.

\item[execVol]
The execution volume of the operation, as determined by
the implosion solution.

\item[mrpExecVol]
The execution volume of the operation, as determined by
the MRP solution.

\item[yieldRate]
The yield rate of the operation (from the operation yield file).

\end{description}

\subsection{Critical Parts}
The critical parts list gives us an ordered ranking of manufacturing
parts which were short in supply.  A record in this file consists of a
manufacturing part number, the PDF and the period in which the part
was needed and not available.  In the priority allocation mode, this
ordered ranking is generated by listing the short parts as the
allocation algorithm is run.  In the optimization allocation mode, the
ordered ranking is based on the linear programming shadow prices of
the parts.

\section{Focussed Shortage Schedule}
Focussed shortage schedules (FSS) are reports we can use to help us
identify what parts are needed in order to meet demands on time.  When
we run SCE we can view the supply response to see which demands are
met and which aren't.  However, this supply response solution doesn't
indicate why a demand was unsatisfied.  To answer this question, we
must use SCE's focussed shortage schedule capability.  The FSS will
report which constrained parts, that is, parts belonging to the parts
conditioning file, are gating the demands.  There are three ways to
run SCE's FSS: the singleton scheme and the general set scheme and the
machine scheme.  For each of these three ways to invoke SCE's FSS you
can also set the method in which the engine treats excess supply in
the calculation of the FSS coverage.  The two methods include {\tt
conservative} and {\tt liberal}.  When you set the method to be
conservative, SCE's FSS does not excess supply when computing the
coverage. When you set the method to be liberal, SCE's FSS uses excess
supply when computing the coverage.  You choose the method by setting
{\tt fssSingletonMethod}, {\tt fssGeneralSetMethod} or {\tt
fssMachineMethod} to {\tt conservative} or {\tt liberal}.

\subsection{Singleton Scheme}
In the singleton scheme, SCE focusses on every unsatisfied demand, one
at a time, and determines which parts are needed, in what quantity and
which time period, in order to satisfy that specific demand, while
preserving the rest of the implosion solution.  To run the singleton
FSS scheme, you must set the {\tt doFssSingleton} parameter in the
parameters file to {\tt 1}.

A record in the FSS singleton scheme report consists of a demand
(planner part number and geography), and a manufacturing part number
that gated the demand, the PDF where the manufacturing part number is
consumed, an FSS keyword and the vector value for the keyword.  The
keywords include FSSReq, FSSCoverage and FSSDelta.  The FSSReq is the
gross requirement for the manufacturing part to meet the demand of the
focus.  The FSSCoverage is the amount of the manufacturing part
available to be used to meet the demand of the focus.  The FSSDelta is
the difference between the FSSReq and the FSSCoverage.

There may be more than one manufacturing part gating a demand.  You
may see more than one record in the FSS report for a specific demand.

The FSS singleton reports are not, in general, additive.  Do not take
the results of the FSS for Demand1 and add it to the results of the
FSS for Demand2 to determine the parts needed to clear both demands,
Demand1 and Demand2, simultaneously.

\subsection{General Set Scheme}
If you want to determine the set of parts needed to meet all the
demands within a set, you need to run SCE's general set scheme.  Set
the {\tt doFssGeneralSet} parameter to {\tt 1} to run the general set FSS
scheme.  You must also define the sets.  This is another input file,
which will be described here.  A record in the FSS general set scheme
input file consists of a set identification name, and a demand
(planner part number and geography) you want to belong to the set.
Keep records that belong to the same set identification name in a
contiguous block.  Note that you must declare your sets as input data,
before you run SCE.  This requirement can be troublesome, because we
often don't know what we want to focus on until after we have run SCE
and viewed the results.  (Unfortunately, we cannot consider all
subsets of demands, since that is too large for realistic sized SCE
models.)



A record in the FSS general set scheme output file consists of the set
identification name, a manufacturing part number that gated demand in
the set, the PDF at which the part is consumed, a FSS keyword and the
vector value for the keyword.  The keywords and their meanings are the
same as for the singleton FSS scheme described above.

\subsection{Machine Scheme}
The machine scheme is identical to the general set scheme.  You may
want to use the machine scheme if you have sets of demands for which
you want to run some with in the conservative mode and some in the
liberal mode.

\section{Supply Response by Manufacturing Production Facility}
There is an output file which links the demand and manufacturing views
of output.  The supply response by PDF file tells us how much of a
demand (planner part and geography) is met by a specific PDF.  A
record in this file consists of the planner part number, the
geography, the manufacturing part number at the supplying
manufacturing PDF, the supplying PDF, and the supply volume vector.

\section{Outputs for Building Block/Selective and Optional Features}
We report shipment schedules for selective features and optional features if
you have included them in your model.  You have the choice of reporting 
either ratios for the shipment quantities or absolute quantities.  You
specify this choice by setting the {\tt featureFileOutputFormat} parameter to
either absolute or percentage.  The format of the feasible selective feature ratio
output record consists of the demand (planner part number and geography), the
category, the selective feature and the ratio or absolute shipment quantity.
The format of the feasible optional feature ration ratio
output record consists of the demand (planner part number and geography), 
the optional feature and the ratio or absolute shipment quantity.

\section{Running SCE}
SCE is designed to run as a batch file.  Assuming that SCE has been
properly installed on your machine the appropriate paths have been
enabled, you run SCE by entering on the command line {\tt scemain
<paramsFileName>} where {\tt paramsFileName} is the name of the SCE
parameters file for your problem.  We recommend that you keep all of the
SCE input files for a specific run in the same directory.

\subsection{Input/Output Logging}
When SCE runs it reports for each input file the number of records
read, the number of records accepted, the number of records rejected,
and the number of blank lines or comments read.  The number of records
read should equal the sum of the number of records accepted, rejected,
and commented or blank.  This report can be found in {\tt
sceInput.log}, the SCE input log file. (You can change the default
name of the input log file by setting the {\tt inputLogFileName} in
the parameters file.)  At the bottom of this report, there will be a
message indicating if SCE has rejected any of the input records.  You
should review this report after each run of SCE to determine if SCE
encountered any errors in processing the input data.

When SCE runs it also reports for each output file the number of records
written to that file.  Many of the output files are in one-to-one 
correspondence with an input file.  The number of records written to the
output file should equal the number of good input records in the 
corresponding input file.  For example, the supply response file is in 
one-to-one correspondence with the demand file.  For every good record
in the demand file, there should be a corresponding record in the
supply response file.  There are some output file correspondences which
are more complicated.  The build schedule output file has a record for
every part that is in the part definition file, except those parts which
are in the parts conditioning file.  (Constrained parts cannot be built.)
The number of records in the build schedule output file is the number of
good records in the parts definition file minus the number of good records
in the parts conditioning file.  The sce output log file, whose default name
is {\tt sceOutput.log}, shows the arithmetic to validate the correspondences
between output files and input files.

\subsection{Error Messages}
All SCE ``error'' messages get reported in the error message log, whose
default name is {\tt sceERROR.log}.  There are various levels of messages
reported in this log -- informational, warning, error, severe and fatal.
An SCE error message consists of a message identifier and a message.
An SCE message identifier begins with the prefix ``SCE'' followed by a 
four digit number followed by a single character code, `I', `W', `E', `S',
and `F', which indicates the level of the error.  The message will provide
a brief description of the error, and if possible, the line number and 
the name of the file which SCE believes is causing the error.


\begin{thebibliography}{99}
\bibitem{orlicky} Material Requirements Planning, Joseph Orlicky, McGraw Hill,
1975.
\bibitem{PRM1} IBM Production Resource Manager, Release 4: User's Guide
and Reference Manual.
\end{thebibliography}

\end{document} 
@


1.1.1.1
log
@Import sce
@
text
@@
