head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_20_20051222:1.2
	sce_4_10_30050426:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.55;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.18.36.51;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.51;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.43.15;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@
// RW2STL - inserted:
#include <string>
// End of RW2STL - inserted includes.
#include <sce/src/ipOrdersDB.h>
#include <sce/src/dbLink.h>
#include <sce/src/dbProfile.h>
#include <iostream.h>
#include <string.h>
#include <ctype.h>

int SceIPOrdersDB::fDelete_ = 0;

SceIPOrdersDB::SceIPOrdersDB() : SceDBObj()
{
}
void SceIPOrdersDB::insert(const SceDBLink& ipOrders)
{
  int i = 0; // Pulled out of the for below by RW2STL
  for (i=1; i<ipOrders.size() + 1; i++)
    {
      groupInsert(ipOrders.nPeriods(),
                  (const char*)(SceStringArg&)ipOrders[i][1],
                  (const char*)(SceStringArg&)ipOrders[i][2],
                  (const char*)(SceStringArg&)ipOrders[i][3],
                  (const char*)(SceStringArg&)ipOrders[i][4],
                  (float*)(SceFloatVectorArg&)ipOrders[i][5]);
    }
}

void SceIPOrdersDB::groupInsert(
                                int            nPeriods,
                                const char *   part1, 
                                const char *   pdf1,
                                const char *   part2,
                                const char *   pdf2,
                                float *        ipDemandVol)
{
  SQLRETURN       rc;
  SQLUINTEGER     pirow = 0;
  int             period;
  float           demandVol;
  char *          thePart1 = (char*) part1;
  char *          thePdf1 = (char*) pdf1;
  char *          thePart2 = (char*) part2;
  char *          thePdf2 = (char*) pdf2;
  std::string       insert;
 
 {
   std::string inst = SceDBProfile::getDbInstance();
   std::string tbl = (inst.empty() ? "IPORDERS "
                    : (const char*)(inst+".IPORDERS "));
   insert = "INSERT INTO " + tbl;
   insert = insert + "VALUES (?, ?, ?, ?, ?, ?) ";
 }

 // Prepare the statement
 
 rc = SQLPrepare(sqlhstmt_, (SQLCHAR*)insert.c_str(), SQL_NTS);
 CHECK_STMT(sqlhstmt_, rc);

 rc = SQLBindParameter(sqlhstmt_, 1, SQL_PARAM_INPUT, SQL_C_CHAR, SQL_VARCHAR,
                       LEN, 0, thePart1, LEN, 0);
 CHECK_STMT(sqlhstmt_, rc);
 
 rc = SQLBindParameter(sqlhstmt_, 2, SQL_PARAM_INPUT, SQL_C_CHAR, SQL_VARCHAR,
                     LEN, 0, thePdf1, LEN, 0);
 CHECK_STMT(sqlhstmt_, rc);
 
 rc = SQLBindParameter(sqlhstmt_, 3, SQL_PARAM_INPUT, SQL_C_CHAR, SQL_VARCHAR,
                       LEN, 0, thePart2, LEN, 0);
 CHECK_STMT(sqlhstmt_, rc);
    
 rc = SQLBindParameter(sqlhstmt_, 4, SQL_PARAM_INPUT, SQL_C_CHAR, SQL_CHAR,
                       LEN, 0, thePdf2, LEN, 0);
 CHECK_STMT(sqlhstmt_, rc);

 rc = SQLBindParameter(sqlhstmt_, 5, SQL_PARAM_INPUT, SQL_C_SLONG, SQL_INTEGER,
                       0, 0, &period, 0, 0);
 CHECK_STMT(sqlhstmt_, rc);
 
 rc = SQLBindParameter(sqlhstmt_, 6, SQL_PARAM_INPUT, SQL_C_FLOAT, SQL_DOUBLE,
                       10, 2, &demandVol, 0, 0);
 CHECK_STMT(sqlhstmt_, rc);


 // prepare a record and execute insert 

 int i = 0; // Pulled out of the for below by RW2STL
 for (i=0; i< nPeriods; i++)
   {
     demandVol = ipDemandVol[i];
     period = i;
     rc = SQLExecute(sqlhstmt_);
     CHECK_STMT(sqlhstmt_, rc);
   }
}

void SceIPOrdersDB::deleteTbl()
{
  int rc;
  std::string       deleteTbl;
 {
   std::string inst = SceDBProfile::getDbInstance();
   std::string tbl = (inst.empty() ? "IPORDERS "
                    : (const char*)(inst+".IPORDERS "));
   deleteTbl = "DELETE FROM " + tbl;
 }

  if ((rc=SQLExecDirect(sqlhstmt_, (SQLCHAR *) deleteTbl.c_str(), SQL_NTS))
     != SQL_SUCCESS && rc != SQL_SUCCESS_WITH_INFO)
       {
         // CHECK_STMT(sqlhstmt_, rc);
       }
  else
    /* EXEC SQL COMMIT WORK;                                     */
    SQLTransact(sqlhenv_, sqlhdbc_, SQL_COMMIT);  /* commit delete table */
  fDelete_ = 1;
}


@


1.1
log
@Initial revision
@
text
@d1 4
d19 2
a20 1
  for (int i=1; i<ipOrders.entries() + 1; i++)
d47 1
a47 1
  RWCString       insert;
d50 2
a51 2
   RWCString inst = SceDBProfile::getDbInstance();
   RWCString tbl = (inst.isNull() ? "IPORDERS "
d59 1
a59 1
 rc = SQLPrepare(sqlhstmt_, (SQLCHAR*)insert.data(), SQL_NTS);
d63 1
a63 1
                       LEN, 0, thePart1, LEN, NULL);
d67 1
a67 1
                     LEN, 0, thePdf1, LEN, NULL);
d71 1
a71 1
                       LEN, 0, thePart2, LEN, NULL);
d75 1
a75 1
                       LEN, 0, thePdf2, LEN, NULL);
d79 1
a79 1
                       0, 0, &period, 0, NULL);
d83 1
a83 1
                       10, 2, &demandVol, 0, NULL);
d89 2
a90 1
 for (int i=0; i< nPeriods; i++)
d102 1
a102 1
  RWCString       deleteTbl;
d104 2
a105 2
   RWCString inst = SceDBProfile::getDbInstance();
   RWCString tbl = (inst.isNull() ? "IPORDERS "
d110 1
a110 1
  if ((rc=SQLExecDirect(sqlhstmt_, (SQLCHAR *) deleteTbl.data(), SQL_NTS))
@


1.1.1.1
log
@Import sce
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 4

// RW2STL - inserted:
#include <string>
// End of RW2STL - inserted includes.
d15 1
a15 2
  int i = 0; // Pulled out of the for below by RW2STL
  for (i=1; i<ipOrders.size() + 1; i++)
d42 1
a42 1
  std::string       insert;
d45 2
a46 2
   std::string inst = SceDBProfile::getDbInstance();
   std::string tbl = (inst.empty() ? "IPORDERS "
d54 1
a54 1
 rc = SQLPrepare(sqlhstmt_, (SQLCHAR*)insert.c_str(), SQL_NTS);
d58 1
a58 1
                       LEN, 0, thePart1, LEN, 0);
d62 1
a62 1
                     LEN, 0, thePdf1, LEN, 0);
d66 1
a66 1
                       LEN, 0, thePart2, LEN, 0);
d70 1
a70 1
                       LEN, 0, thePdf2, LEN, 0);
d74 1
a74 1
                       0, 0, &period, 0, 0);
d78 1
a78 1
                       10, 2, &demandVol, 0, 0);
d84 1
a84 2
 int i = 0; // Pulled out of the for below by RW2STL
 for (i=0; i< nPeriods; i++)
d96 1
a96 1
  std::string       deleteTbl;
d98 2
a99 2
   std::string inst = SceDBProfile::getDbInstance();
   std::string tbl = (inst.empty() ? "IPORDERS "
d104 1
a104 1
  if ((rc=SQLExecDirect(sqlhstmt_, (SQLCHAR *) deleteTbl.c_str(), SQL_NTS))
@

