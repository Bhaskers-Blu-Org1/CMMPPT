head	1.9;
access;
symbols
	sce_5_01_20080919:1.9
	latest_sce_4_20_20060523:1.9.0.4
	sce_4_20_20060523:1.9
	latest_sce4_20_OSL:1.9.0.2
	sce_4_20_OSL:1.9
	sce_4_20_20051222:1.9
	sce_4_10_30050426:1.9
	sce_4_05_20040511:1.9
	sce_4_00_20040201:1.8
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.2.0.2
	Root-of-EndRw:1.2
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2004.04.07.19.58.33;	author ervolina;	state Exp;
branches;
next	1.8;

1.8
date	2004.01.22.02.47.48;	author ervolina;	state Exp;
branches;
next	1.7;

1.7
date	2004.01.12.22.52.41;	author ervolina;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.20.19.53.33;	author ervolina;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.03.02.24.31;	author ervolina;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.04.20.53.31;	author dpc;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.15.19.36.58;	author rwToStl;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.26.14.25.33;	author fasano;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2000.02.25.18.36.54;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.54;	author wit;	state Exp;
branches;
next	;

1.2.2.1
date	2003.01.08.17.43.18;	author rwToStl;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2003.01.09.13.14.30;	author rwToStl;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2003.01.13.13.02.26;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.9
log
@added ProdVol from ProdVol Peg files
@
text
@
// RW2STL - inserted:
#include <string>
#include <ostream>
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL - inserted includes.
// file: sceParam.C
// author: tom

#include <stdlib.h>
#include <assert.h>
#include <mcl/src/mcl.h>
#include <sce/src/sceParam.h>
#include <fstream>


#ifndef ELIMINATE_OLD_MAIN

// RW2STL - implement (RWGVector, LgFrSceParameter)

// RW2STL - implement (RWGOrderedVector, LgFrSceParameter)



  // Set Parameter
int
LgFrSceParameter::setStringVal(const std::string & stringVal,
			       whichVal whichOne=DEFAULT_VAL)
{
  if (whichOne == DEFAULT_VAL) {
    defStringVal_ = stringVal;
  }
  else {
    actStringVal_ = stringVal;
  }

  if (type_ == stringP)     return 0;
  else                      return 1;
}
  
int
LgFrSceParameter::setIntVal(int intVal,
			    whichVal whichOne=DEFAULT_VAL)
{  
  if (whichOne == DEFAULT_VAL) {
    defIntVal_ = intVal;
  }
  else {
    actIntVal_ = intVal;
  }

  if (type_ == intP)     return 0;
  else                   return 1;
}

int
LgFrSceParameter::setFloatVal(float floatVal,
			      whichVal whichOne=DEFAULT_VAL)
{  
  if (whichOne == DEFAULT_VAL) {
    defFloatVal_ = floatVal;
  }
  else {
    actFloatVal_ = floatVal;
  }

  if (type_ == floatP)     return 0;
  else                   return 1;
}

int
LgFrSceParameter::setBoolVal(bool boolVal,
			     whichVal whichOne=DEFAULT_VAL)
{  
  if (whichOne == DEFAULT_VAL) {
    defBoolVal_ = boolVal;
  }
  else {
    actBoolVal_ = boolVal;
  }

  if (type_ == boolP)     return 0;
  else                   return 1;
}

void
LgFrSceParameter::setMandatory(bool isMandatory)
{
  mandatory_ = isMandatory;
}
  
// Get Parameter

std::string
LgFrSceParameter::getStringVal(whichVal whichOne=ACTUAL_VAL) const
{
  if (whichOne == ACTUAL_VAL)
    return actStringVal_;
  else
    return defStringVal_;
}

int
LgFrSceParameter::getIntVal(whichVal whichOne=ACTUAL_VAL) const
{
  if (whichOne == ACTUAL_VAL)
    return actIntVal_;
  else
    return defIntVal_;
}

float
LgFrSceParameter::getFloatVal(whichVal whichOne=ACTUAL_VAL) const
{
  if (whichOne == ACTUAL_VAL)
    return actFloatVal_;
  else
    return defFloatVal_;
}

bool
LgFrSceParameter::getBoolVal(whichVal whichOne=ACTUAL_VAL) const
{
  if (whichOne == ACTUAL_VAL)
    return actBoolVal_;
  else
    return defBoolVal_;
}

bool
LgFrSceParameter::getMandatory() const
{
  return mandatory_;
}

  // Set/Get Current TYPE of parameter
void
LgFrSceParameter::setType(paramType type)
{ type_ = type;}

LgFrSceParameter::paramType
LgFrSceParameter::getType() const
{ return type_; }

std::string
LgFrSceParameter::getName()
const
{ return name_; }

int
LgFrSceParameter::getMethodSet()
const
{ return methodSet_; }



// -- constructors:  Use the type-explicit constructors
// string param  constructor
LgFrSceParameter::LgFrSceParameter(const std::string & name,
                                   const std::string & stringVal,
                                   paramType         type,
				   unsigned int methodSet,
				   bool isMandatory) // default = false
  : name_(name),
    defStringVal_(stringVal),
    actStringVal_(stringVal),
    defFloatVal_(0.0),
    actFloatVal_(0.0),
    defIntVal_(0),
    actIntVal_(0),
    defBoolVal_(true),
    actBoolVal_(true),
    type_(type),
    methodSet_(methodSet),
    mandatory_(isMandatory)
{
  assert(type == stringP);
}

  // float param  constructor
LgFrSceParameter::LgFrSceParameter(const std::string & name,
				   float             floatVal,
				   paramType         type,
				   unsigned int methodSet,
				   bool isMandatory) // default = false
  : name_(name),
    defStringVal_(""),
    actStringVal_(""),
    defFloatVal_(floatVal),
    actFloatVal_(floatVal),
    defIntVal_(0),
    actIntVal_(0),
    defBoolVal_(true),
    actBoolVal_(true),
    type_(type),
    methodSet_(methodSet),
    mandatory_(isMandatory)
{
  assert(type == floatP);
}

  // int param  constructor
LgFrSceParameter::LgFrSceParameter(const std::string & name,
				   int               intVal,
				   paramType         type,
				   unsigned int methodSet,
				   bool isMandatory) // default = false
  : name_(name),
    defStringVal_(""),
    actStringVal_(""),
    defFloatVal_(0.0),
    actFloatVal_(0.0),
    defIntVal_(0),
    actIntVal_(0),
    defBoolVal_(true),
    actBoolVal_(true),
    type_(type),
    methodSet_(methodSet),
    mandatory_(isMandatory)
{
  assert((type == intP) || (type == boolP));
  if (type_ == intP) {
    defIntVal_ = actIntVal_ = intVal;
  }
  else {
      defBoolVal_ = actBoolVal_ = intVal == 0 ? false : true;
  }
}


// fairly general constructor
LgFrSceParameter::LgFrSceParameter(const std::string & name)
  : name_(name),
    defStringVal_(""),
    actStringVal_(""),
    defFloatVal_(0.0),
    actFloatVal_(0.0),
    defIntVal_(0),
    actIntVal_(0),
    defBoolVal_(true),
    actBoolVal_(true),
    type_(boolP),
    methodSet_(0),
    mandatory_(false)
{
    // all the work is done in initializer
}

// default constructor:
LgFrSceParameter::LgFrSceParameter()
  : name_(""),
    defStringVal_(""),
    actStringVal_(""),
    defFloatVal_(0.0),
    actFloatVal_(0.0),
    defIntVal_(0),
    actIntVal_(0),
    defBoolVal_(true),
    actBoolVal_(true),
    type_(boolP),
    methodSet_(0),
    mandatory_(false)
{
    // all the work is done in initializer
}



 // copy constructor
LgFrSceParameter::LgFrSceParameter(const LgFrSceParameter& source)
  : name_(source.name_),
    defStringVal_(source.defStringVal_),
    actStringVal_(source.actStringVal_),
    defFloatVal_(source.defFloatVal_),
    actFloatVal_(source.actFloatVal_),
    defIntVal_(source.defIntVal_),
    actIntVal_(source.actIntVal_),
    defBoolVal_(source.defBoolVal_),
    actBoolVal_(source.actBoolVal_),
    type_(source.type_),
    methodSet_(source.methodSet_),  // for now, have this reflect original
    mandatory_(source.mandatory_)
{
  // nothing to do
}

  // == operator
bool
operator==(const LgFrSceParameter& lhs, const LgFrSceParameter& rhs)
{
    return sce::compareStringsCaseIns( lhs.getName(), rhs.getName() ) == 0;
}

// assignment operator
LgFrSceParameter&
LgFrSceParameter::operator=(const LgFrSceParameter& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
    name_         = rhs.name_;
    defStringVal_ = rhs.defStringVal_;
    actStringVal_ = rhs.actStringVal_;
    defFloatVal_  = rhs.defFloatVal_;
    actFloatVal_  = rhs.actFloatVal_;
    defIntVal_    = rhs.defIntVal_;
    actIntVal_   = rhs.actIntVal_;
    defBoolVal_   = rhs.defBoolVal_;
    actBoolVal_   = rhs.actBoolVal_;
    type_      = rhs.type_;
    methodSet_ = rhs.methodSet_; // for now, just reflect original
    mandatory_ = rhs.mandatory_;
  }
  return *this;
}

// destructor
LgFrSceParameter::~LgFrSceParameter()
{
  // nothing to do
}


// ============== SET OF PARAMETERS CLASS =====================
  
// copy constructor
LgFrSceSetOfParameters::LgFrSceSetOfParameters(const LgFrSceSetOfParameters& source)
  : paramVec_(source.paramVec_),
  sceErrFacility_(source.sceErrFacility_)
{
  // nothing to do
}

// assignment operator
LgFrSceSetOfParameters&
LgFrSceSetOfParameters::operator=(const LgFrSceSetOfParameters& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
    paramVec_  = rhs.paramVec_;
    sceErrFacility_ = rhs.sceErrFacility_;
  }
  return *this;
}

// destructor
LgFrSceSetOfParameters::~LgFrSceSetOfParameters()
  {
    printParamLog(getString("parameterLogFileName"));
  }

  // default constructor
LgFrSceSetOfParameters::LgFrSceSetOfParameters()
  : paramVec_(),
    sceErrFacility_(0)
{
  // There were some problems with RW's 'auto'-resizing of this GOrderedVector
  // we're using this as a temporary fix ... if the number of parameters ever
  // exceeds 256... it's currently well under 200, in the 150's
  paramVec_.reserve(512);

  // Another fix, though this may be a less desirable solution, is to undefine
  // and re-define the macro DEFAULT_VECTOR_CAPACITY to a larger value. This will
  // however effect other ordered vectors used in SCE and require much more
  // overhead for their use.
}


// For sharing error facility for messaging purposes
void
LgFrSceSetOfParameters::setErrFacility(MclFacility * existingFacility)
{
  sceErrFacility_ = existingFacility;
}

MclFacility*
LgFrSceSetOfParameters::getErrFacility()
{
  return sceErrFacility_;
}


// allows for explicit indexing of parameters in SOP given an int index
LgFrSceParameter&
LgFrSceSetOfParameters::operator()(size_t index)
{
  return paramVec_[index];
}

// returns the number of parameters currently in set of parameters
size_t
LgFrSceSetOfParameters::numParameters()
const
{
  return paramVec_.size();
}




static size_t findInVector( const LgFrSceParameter& p, const std::vector<LgFrSceParameter>& v )
{
    std::vector<LgFrSceParameter>::const_iterator it;
    size_t i = 0;
    for( it = v.begin(); it != v.end(); it++, i++ )
         {
            if( *it == p )
                return i;
         }
    return sce::badIndex;
}

// returns: -1=doesn't exist; (int)paramType otherwise {0,1,2,3}
int
LgFrSceSetOfParameters::exists(const std::string name)
const
{
  // temporary param
  LgFrSceParameter param(name);
  
  size_t index = findInVector( param, paramVec_ );
  if (index == sce::badIndex) // doesn't exist
    return -1;
  else
    return (int)(paramVec_[index].getType());
}




// Set Parameter: One for each type.
// Return 0 if added a new one, 1 if changed an existing param
int
LgFrSceSetOfParameters::setString(std::string name,
                                  std::string stringVal,
				  unsigned int methodSet,
				  bool isMandatory)
{
  // create a paramter with the desired properties
  LgFrSceParameter param(name,stringVal,LgFrSceParameter::stringP,methodSet,isMandatory);

  // see if that parameter already exists in the list
  size_t index = findInVector( param, paramVec_ );
  // if the param doesn't already exist in list
  // then add it to the list.  (this is how we manage uniqueness)
  if (index == sce::badIndex) {
    paramVec_.push_back(param);
  }
  // otherwise, a param already exists so we change it
  else {
    // get the one in the list
    LgFrSceParameter existingParam = paramVec_[index];
    // You're not allowed to change the type of a parameter!!
    assert(existingParam.getType() == LgFrSceParameter::stringP);

    // check if this is supposed to replace old default value
    if (!(methodSet == 0)) { // if not, then we must keep default value!
      // FIRST, set default string val of new param to that of old param!
      param.setStringVal(existingParam.getStringVal(DEFAULT_VAL),DEFAULT_VAL);
    }

    // remove the copy in the list and add the new one
    paramVec_.erase(paramVec_.begin() + index);
    paramVec_.push_back(param);
  }

  return (index == sce::badIndex) ? 0 : 1;
}

int
LgFrSceSetOfParameters::setInt(std::string name,
                               int intVal,
			       unsigned int methodSet,
			       bool isMandatory)
{
  // create a paramter with the desired properties
  LgFrSceParameter param(name,intVal,LgFrSceParameter::intP,methodSet,isMandatory);

  // see if that parameter already exists in the list
  size_t index = findInVector( param, paramVec_ );
  // if the param doesn't already exist in list
  // then add it to the list.  (this is how we manage uniqueness)
  if (index == sce::badIndex) {
    paramVec_.push_back(param);
  }
  // otherwise, a param already exists so we change it
  else {
    // get the one in the list
    LgFrSceParameter existingParam = paramVec_[index];
    // You're not allowed to change the type of a parameter!!
    assert(existingParam.getType() == LgFrSceParameter::intP);

    // check if this is supposed to replace old default value
    if (!(methodSet == 0)) { // if not, then we must keep default value!
      // FIRST, set default string val of new param to that of old param!
      param.setIntVal(existingParam.getIntVal(DEFAULT_VAL),DEFAULT_VAL);
    }

    // remove the copy in the list and add the new one
    paramVec_.erase(paramVec_.begin() + index);
    paramVec_.push_back(param);
  }

  return (index == sce::badIndex) ? 0 : 1;

}

int
LgFrSceSetOfParameters::setFloat(std::string name,
                                 float floatVal,
				 unsigned int methodSet,
				 bool isMandatory)
{
  // create a paramter with the desired properties
  LgFrSceParameter param(name,floatVal,LgFrSceParameter::floatP,methodSet,isMandatory);

  // see if that parameter already exists in the list
  size_t index = findInVector( param, paramVec_ );
  // if the param doesn't already exist in list
  // then add it to the list.  (this is how we manage uniqueness)
  if (index == sce::badIndex) {
    paramVec_.push_back(param);
  }
  // otherwise, a param already exists so we change it
  else {
    // get the one in the list
    LgFrSceParameter existingParam = paramVec_[index];
    // You're not allowed to change the type of a parameter!!
    assert(existingParam.getType() == LgFrSceParameter::floatP);

    // check if this is supposed to replace old default value
    if (!(methodSet == 0)) { // if not, then we must keep default value!
      // FIRST, set default string val of new param to that of old param!
      param.setFloatVal(existingParam.getFloatVal(DEFAULT_VAL),DEFAULT_VAL);
    }

    // remove the copy in the list and add the new one
    paramVec_.erase(paramVec_.begin() + index);
    paramVec_.push_back(param);
  }

  return (index == sce::badIndex) ? 0 : 1;

}


int
LgFrSceSetOfParameters::setBool(std::string name,
                                bool boolVal,
				unsigned int methodSet,
				bool isMandatory)
{
  // create a paramter with the desired properties
  LgFrSceParameter param(name,(int)boolVal,LgFrSceParameter::boolP,methodSet,isMandatory);

  // see if that parameter already exists in the list
  size_t index = findInVector( param, paramVec_ );
  // if the param doesn't already exist in list
  // then add it to the list.  (this is how we manage uniqueness)
  if (index == sce::badIndex) {
    paramVec_.push_back(param);
  }
  // otherwise, a param already exists so we change it
  else {
    // get the one in the list
    LgFrSceParameter existingParam = paramVec_[index];
    // You're not allowed to change the type of a parameter!!
    assert(existingParam.getType() == LgFrSceParameter::boolP);

    // check if this is supposed to replace old default value
    if (!(methodSet == 0)) { // if not, then we must keep default value!
      // FIRST, set default string val of new param to that of old param!
      param.setBoolVal(existingParam.getBoolVal(DEFAULT_VAL),DEFAULT_VAL);
    }

    // remove the copy in the list and add the new one
    paramVec_.erase(paramVec_.begin() + index);
    paramVec_.push_back(param);
  }

  return (index == sce::badIndex) ? 0 : 1;

}

  
// Get Parameter

std::string
LgFrSceSetOfParameters::getString(std::string  name)
const
{
  // create a paramter with the desired properties
  LgFrSceParameter param(name);

  // see if that parameter  exists in the list
  size_t index = findInVector( param, paramVec_ );
  // if the param doesn't already exist in list
  // then its a system error
  // NEVER try to access a parameter that has not been added to the list
  // -- or a parameter whose value is a null string.
  if (index == sce::badIndex ||
      (paramVec_[index].getStringVal().empty()))
    {
    // there is a special case here for output filenames that are constructed
    // internally...if these are not specified in the parameter file, they 
    // will not be constructed, but we can guess a default name as follows:
    size_t nameLength = name.length();
    if (nameLength < 8)
        return std::string("");
    size_t quoteFileNameIndex = sce::find( name, "FileName" );
    if ( quoteFileNameIndex == nameLength - 8 ) 
    {
      name.resize(quoteFileNameIndex+4);  // cut "Name" from "..FileName"
      if (exists("outputFilePrefix") != -1) // if output file prefix exists
      {
        if (exists(name+"Extension") != -1) // "..FileExtension" ?
          return (getString("outputFilePrefix") + getString(name+"Extension"));
	    // Note of Caution: if the following clause is revised, keep in mind
	    // that the remove method actually *removes* part of the original
	    // string...so below, 'name' is actually altered by this call.
	    else
        {
          name.resize(quoteFileNameIndex);  // cut "FileName"
          if (exists(name+"Extension") != -1)
	        return (getString("outputFilePrefix") + getString(name+"Extension"));
        }
      }
    }

    // This warning message is gone for now...
    // (*sceErrFacility_)("MissingParameterRequested",MclArgList() << name);
    //** some calls expect this to return a null string .. so don't exit;

    return std::string(""); // null string
  }
  // otherwise, get the param and return its value
  param = paramVec_[index];
  assert(param.getType() == LgFrSceParameter::stringP);
  return param.getStringVal();
}


int
LgFrSceSetOfParameters::getInt(std::string name)
const
{
  // create a paramter with the desired properties
  LgFrSceParameter param(name);

  // see if that parameter  exists in the list
  size_t index = findInVector( param, paramVec_ );

  // if the param doesn't already exist in list
  // then its a system error
  // NEVER try to access a parameter that has not been added to the list
  if (index == sce::badIndex) {
    (*sceErrFacility_)("MissingParameter",MclArgList() << name);
  }
  // otherwise, get the param and return its value
  param = paramVec_[index];
  assert(param.getType() == LgFrSceParameter::intP);
  return param.getIntVal();
}

float
LgFrSceSetOfParameters::getFloat(std::string name)
const
{
  // create a paramter with the desired properties
  LgFrSceParameter param(name);

  // see if that parameter  exists in the list
  size_t index = findInVector( param, paramVec_ );

  // if the param doesn't already exist in list
  // then its a system error
  // NEVER try to access a parameter that has not been added to the list
  if (index == sce::badIndex) {
    (*sceErrFacility_)("MissingParameter",MclArgList() << name);
  }
  // otherwise, get the param and return its value
  param = paramVec_[index];
  assert(param.getType() == LgFrSceParameter::floatP);
  return param.getFloatVal();
}


bool
LgFrSceSetOfParameters::getBool(std::string name)
const
{
  // create a paramter with the desired properties
  LgFrSceParameter param(name);

  // see if that parameter  exists in the list
  size_t index = findInVector( param, paramVec_ );

  // if the param doesn't already exist in list
  // then its a system error
  // NEVER try to access a parameter that has not been added to the list
  if (index == sce::badIndex) {
    (*sceErrFacility_)("MissingParameter",MclArgList() << name);
  }
  // otherwise, get the param and return its value
  param = paramVec_[index];
  assert(param.getType() == LgFrSceParameter::boolP);
  return param.getBoolVal();
}


void
LgFrSceSetOfParameters::printParamLog(std::string logFileName)
const
{
  size_t numEntries = numParameters();

  long numUserDefined = 0;
  long numDefaultDefined = 0;

  // create buffer to write log into -- default name = param.log
  std::ofstream outFile(logFileName.c_str());//, ios::out);
  std::left( outFile );



  outFile << "sce::badIndex is ... [" << sce::badIndex << "]\n\n";


  outFile << "In the parameter file: " << getString("parameterFileName")
	  << ", the end state of the parameters were as follows:\n";

  outFile << "NOTE: Names exceeding 40 chars and Values exceeding 25 chars will be cut short.\n\n";

  outFile.width(40);
  outFile << "Parameter Name";
  outFile.width(25); 
  outFile << "Default Value";
  outFile.width(25);
  outFile << "Actual/Used Value";
  outFile.width(10);
  outFile << "Method Set\n\n";

  std::left( outFile );

  int i = 0; // Pulled out of the for below by RW2STL
  for (i=0; i<numEntries; i++) {
    LgFrSceParameter currParam = paramVec_[i];

    // NAME
    outFile.width(40);
    outFile << currParam.getName();

    // DEFAULT and ACTUAL values
    switch(currParam.getType()) {
    case LgFrSceParameter::intP: 
      outFile.width(25);
      outFile << currParam.getIntVal(DEFAULT_VAL);
      outFile.width(25);
      outFile << currParam.getIntVal(ACTUAL_VAL);
      break;
    case LgFrSceParameter::floatP: 
      outFile.width(25);
      outFile << currParam.getFloatVal(DEFAULT_VAL);
      outFile.width(25);
      outFile << currParam.getFloatVal(ACTUAL_VAL);
      break;
    case LgFrSceParameter::stringP: 
      outFile.width(25);
      outFile << "\"" + currParam.getStringVal(DEFAULT_VAL) + "\"";
      outFile.width(25);
      outFile << "\"" + currParam.getStringVal(ACTUAL_VAL) + "\"";
      break;
    case LgFrSceParameter::boolP: 
      outFile.width(25);
      outFile << currParam.getBoolVal(DEFAULT_VAL);
      outFile.width(25);
      outFile << currParam.getBoolVal(ACTUAL_VAL);
      break;
    default: 
      outFile.width(25);
      outFile << "<UNKNOWN TYPE>";
      outFile.width(25);
      outFile << "<UNKNOWN TYPE>";
      break;
    }

    // SET FLAG
    outFile.width(5);
    if (currParam.getMethodSet() == 1) {
      outFile << "USER-DEFINED\n";
      numUserDefined++;
    }
    else {
      outFile << "DEFAULT\n";
      numDefaultDefined++;
    }
  }

  outFile << "\nNumber of User-Defined Parameters: " << numUserDefined;
  outFile << "\nNumber of Default Parameters: " << numDefaultDefined;
  outFile << "\nTotal Number of Parameters: " << numUserDefined+numDefaultDefined << "\n";

  outFile.close();
}



void
LgFrSceSetOfParameters::printScrubbedParamFile(std::string scrubParamFileName)
const
{
  size_t numEntries = numParameters();

  long numUserDefined = 0;
  long numDefaultDefined = 0;

  std::ofstream outFile(scrubParamFileName.c_str());
  std::showpoint( outFile );

  int i = 0; 
  for (i=0; i<numEntries; i++) {
    LgFrSceParameter currParam = paramVec_[i];

    // NAME
    std::string paramName = currParam.getName();


    // skip string  parameters that have null values 
    if (currParam.getType() == LgFrSceParameter::stringP) {
      if (this->getString(currParam.getName()).empty())
	continue;
    }

    // skip some parameters that are internal
    if (paramName == "parameterFileName")
      continue;
    if (paramName == "outputLogFileName")
      continue;
    if (paramName == "inputLogFileName")
      continue;
    if (paramName == "nStandaloneFeatureArcs")
      continue;
    if (paramName == "parameterLogFileName")
      continue;
 


    outFile << paramName << ",";
    //    outFile << "\"" << paramName << "\",";

    switch(currParam.getType()) {
    case LgFrSceParameter::intP: 
      outFile << currParam.getIntVal() << "\n";
      break;
    case LgFrSceParameter::floatP: 
      outFile << currParam.getFloatVal() << "\n";
      break;
    case LgFrSceParameter::stringP: 
      if (! (this->getString(currParam.getName()).empty()))
	outFile << this->getString(currParam.getName()) << "\n";
      break;
    case LgFrSceParameter::boolP: 
      outFile << currParam.getBoolVal() << "\n";
      break;
    default: 
      outFile << "<UNKNOWN TYPE>\n";
      break;
    }

  }


  outFile.close();
}



int
LgFrSceSetOfParameters::getMethodSet(const std::string name) const
{
  // create a paramter with the desired properties
  LgFrSceParameter param(name);

  // see if that parameter already exists in the list
  // if the param doesn't exist, return -1
  size_t index = findInVector( param, paramVec_ );
  if (index == sce::badIndex) {
    return -1;
  }
  // otherwise, a param already exists so we get the method used to set it
  else {
  return (paramVec_[index].getMethodSet());
  }
}




#ifdef NDEBUG
#undef NDEBUG
#endif

  // self-test
void
LgFrSceSetOfParameters::test()
{
  
}


// self-test
void
LgFrSceParameter::test()
{
  
 }

#endif
@


1.8
log
@permanently replaced Concurrent Pegging with Post Implosion pegging.
Parameters stay the same though.
@
text
@d357 1
a357 1
  paramVec_.reserve(256);
@


1.7
log
@fixed Scrubbing so that scrubbed param file would retain original
settings before usePipForPeg swapped them around
@
text
@a326 1
  backUpParamVec_(source.backUpParamVec_),
a337 1
    backUpParamVec_  = rhs.backUpParamVec_;
a351 1
    backUpParamVec_(),
a357 1
  backUpParamVec_.reserve(256);
a394 8
// returns the number of backUp parameters currently in set of parameters
size_t
LgFrSceSetOfParameters::numBackUpParameters()
const
{
  return backUpParamVec_.size();
}

a803 16
void
LgFrSceSetOfParameters::backUp()
{

  //  backUpParamVec_ = paramVec;

  size_t numEntries = numParameters();
  int i = 0; 
  for (i=0; i<numEntries; i++) {
    LgFrSceParameter currParam = paramVec_[i];
    LgFrSceParameter duplicateParam(currParam);
    backUpParamVec_.push_back(duplicateParam);
  }
}


d819 1
a819 2
    //    LgFrSceParameter currParam = paramVec_[i];
    LgFrSceParameter currParam = backUpParamVec_[i];
@


1.6
log
@changed findInVector to return size_t
@
text
@d327 2
a328 1
    sceErrFacility_(source.sceErrFacility_)
d339 1
d354 1
d361 1
d399 11
d815 18
d842 1
a842 2
  // create buffer to write log into -- default name = param.log
  std::ofstream outFile(scrubParamFileName.c_str());//, ios::out);
d845 1
a845 1
  int i = 0; // Pulled out of the for below by RW2STL
d847 2
a848 1
    LgFrSceParameter currParam = paramVec_[i];
@


1.5
log
@backout the negative demandVols that are applied to supplyVol when scrubbing.
And size_t initialize to large number.
@
text
@d415 1
a415 1
  int index = findInVector( param, paramVec_ );
d437 1
a437 1
  int index = findInVector( param, paramVec_ );
d474 1
a474 1
  int index = findInVector( param, paramVec_ );
d512 1
a512 1
  int index = findInVector( param, paramVec_ );
d551 1
a551 1
  int index = findInVector( param, paramVec_ );
d590 1
a590 1
  int index = findInVector( param, paramVec_ );
d645 1
a645 1
  int index = findInVector( param, paramVec_ );
d667 1
a667 1
  int index = findInVector( param, paramVec_ );
d690 1
a690 1
  int index = findInVector( param, paramVec_ );
d879 1
a879 1
  int index = findInVector( param, paramVec_ );
@


1.4
log
@Changed several
size_t index
to
int index
because there was code that was returning -1 for the error case.
@
text
@d718 5
@


1.3
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@d150 1
a150 1
unsigned int
d415 1
a415 1
  size_t index = findInVector( param, paramVec_ );
d437 1
a437 1
  size_t index = findInVector( param, paramVec_ );
d474 1
a474 1
  size_t index = findInVector( param, paramVec_ );
d512 1
a512 1
  size_t index = findInVector( param, paramVec_ );
d551 1
a551 1
  size_t index = findInVector( param, paramVec_ );
d590 1
a590 1
  size_t index = findInVector( param, paramVec_ );
d645 1
a645 1
  size_t index = findInVector( param, paramVec_ );
d667 1
a667 1
  size_t index = findInVector( param, paramVec_ );
d690 1
a690 1
  size_t index = findInVector( param, paramVec_ );
d866 1
a866 1
unsigned int
d874 1
a874 1
  size_t index = findInVector( param, paramVec_ );
@


1.2
log
@Added include of mcl/src/mcl.h near top of include list to avoid
compile time problems on AIX which did not occur on Windows.

added
  implement(RWGVector, float)
  implement(RWGVector, int)
to ipSce.C to avoid unresolved symbols at link time
@
text
@d1 6
a12 2
#include <rw/rstream.h>
#include <rw/regexp.h>
d14 1
a14 1
#include <fstream.h>
d19 4
a22 2
implement (RWGVector, LgFrSceParameter)
implement (RWGOrderedVector, LgFrSceParameter)
d27 1
a27 1
LgFrSceParameter::setStringVal(const RWCString & stringVal,
d72 1
a72 1
LgFrSceParameter::setBoolVal(RWBoolean boolVal,
d87 1
a87 1
LgFrSceParameter::setMandatory(RWBoolean isMandatory)
d94 2
a95 2
RWCString
LgFrSceParameter::getStringVal(whichVal whichOne=ACTUAL_VAL)
d104 1
a104 1
LgFrSceParameter::getIntVal(whichVal whichOne=ACTUAL_VAL)
d113 1
a113 1
LgFrSceParameter::getFloatVal(whichVal whichOne=ACTUAL_VAL)
d121 2
a122 2
RWBoolean
LgFrSceParameter::getBoolVal(whichVal whichOne=ACTUAL_VAL)
d130 2
a131 2
RWBoolean
LgFrSceParameter::getMandatory()
d142 1
a142 1
LgFrSceParameter::getType()
d145 1
a145 1
RWCString
d159 2
a160 2
LgFrSceParameter::LgFrSceParameter(const RWCString & name,
                                   const RWCString & stringVal,
d163 1
a163 1
				   RWBoolean isMandatory) // default = FALSE
d171 2
a172 2
    defBoolVal_(TRUE),
    actBoolVal_(TRUE),
d181 1
a181 1
LgFrSceParameter::LgFrSceParameter(const RWCString & name,
d185 1
a185 1
				   RWBoolean isMandatory) // default = FALSE
d193 2
a194 2
    defBoolVal_(TRUE),
    actBoolVal_(TRUE),
d203 1
a203 1
LgFrSceParameter::LgFrSceParameter(const RWCString & name,
d207 1
a207 1
				   RWBoolean isMandatory) // default = FALSE
d215 2
a216 2
    defBoolVal_(TRUE),
    actBoolVal_(TRUE),
d226 1
a226 1
    defBoolVal_ = actBoolVal_ = (RWBoolean) intVal;
d232 1
a232 1
LgFrSceParameter::LgFrSceParameter(const RWCString & name)
d240 2
a241 2
    defBoolVal_(TRUE),
    actBoolVal_(TRUE),
d244 1
a244 1
    mandatory_(FALSE)
d258 2
a259 2
    defBoolVal_(TRUE),
    actBoolVal_(TRUE),
d262 1
a262 1
    mandatory_(FALSE)
d288 1
a288 1
int
d291 1
a291 1
  return lhs.getName().compareTo(rhs.getName(),RWCString::ignoreCase) == 0;
d352 1
a352 1
    sceErrFacility_(NULL)
d357 1
a357 1
  paramVec_.resize(256);
d360 1
a360 1
  // and re-define the macro RWDEFAULT_CAPACITY to a larger value. This will
d384 1
a384 1
  return paramVec_(index);
d392 13
a404 1
  return paramVec_.entries();
d409 1
a409 1
LgFrSceSetOfParameters::exists(const RWCString name)
d415 2
a416 2
  size_t index = paramVec_.index(param);
  if (index == RW_NPOS) // doesn't exist
d428 2
a429 2
LgFrSceSetOfParameters::setString(RWCString name,
                                  RWCString stringVal,
d431 1
a431 1
				  RWBoolean isMandatory)
d437 1
a437 1
  size_t index = paramVec_.index(param);
d440 2
a441 2
  if (index == RW_NPOS) {
    paramVec_.insert(param);
d457 2
a458 2
    paramVec_.removeAt(index);
    paramVec_.insert(param);
d461 1
a461 1
  return (index == RW_NPOS) ? 0 : 1;
d465 1
a465 1
LgFrSceSetOfParameters::setInt(RWCString name,
d468 1
a468 1
			       RWBoolean isMandatory)
d474 1
a474 1
  size_t index = paramVec_.index(param);
d477 2
a478 2
  if (index == RW_NPOS) {
    paramVec_.insert(param);
d494 2
a495 2
    paramVec_.removeAt(index);
    paramVec_.insert(param);
d498 1
a498 1
  return (index == RW_NPOS) ? 0 : 1;
d503 1
a503 1
LgFrSceSetOfParameters::setFloat(RWCString name,
d506 1
a506 1
				 RWBoolean isMandatory)
d512 1
a512 1
  size_t index = paramVec_.index(param);
d515 2
a516 2
  if (index == RW_NPOS) {
    paramVec_.insert(param);
d532 2
a533 2
    paramVec_.removeAt(index);
    paramVec_.insert(param);
d536 1
a536 1
  return (index == RW_NPOS) ? 0 : 1;
d542 2
a543 2
LgFrSceSetOfParameters::setBool(RWCString name,
                                RWBoolean boolVal,
d545 1
a545 1
				RWBoolean isMandatory)
d551 1
a551 1
  size_t index = paramVec_.index(param);
d554 2
a555 2
  if (index == RW_NPOS) {
    paramVec_.insert(param);
d571 2
a572 2
    paramVec_.removeAt(index);
    paramVec_.insert(param);
d575 1
a575 1
  return (index == RW_NPOS) ? 0 : 1;
d582 2
a583 2
RWCString
LgFrSceSetOfParameters::getString(RWCString  name)
d590 1
a590 2
  size_t index = paramVec_.index(param);

d595 2
a596 2
  if ((index == RW_NPOS) ||
      (paramVec_[index].getStringVal().isNull()))
d601 1
a601 2
    size_t nameLength, foundIt;
    nameLength = name.length();
d603 5
a607 4
        return RWCString("");
    foundIt = name.index("FileName", nameLength - 8, RWCString::exact);
    if (foundIt != RW_NPOS){
      name.remove(foundIt+4);  // cut "Name" from "..FileName"
d610 11
a620 9
	if (exists(name+"Extension") != -1) // "..FileExtension" ?
	  return (getString("outputFilePrefix") +
		  getString(name+"Extension"));
	// Note of Caution: if the following clause is revised, keep in mind
	// that the remove method actually *removes* part of the original
	// string...so below, 'name' is actually altered by this call.
	else if (exists(name.remove(foundIt)+"Extension") != -1)
	  return (getString("outputFilePrefix") +
		  getString(name+"Extension"));
d628 1
a628 1
    return RWCString(""); // null string
d638 1
a638 1
LgFrSceSetOfParameters::getInt(RWCString name)
d645 1
a645 1
  size_t index = paramVec_.index(param);
d650 1
a650 1
  if (index == RW_NPOS) {
d660 1
a660 1
LgFrSceSetOfParameters::getFloat(RWCString name)
d667 1
a667 1
  size_t index = paramVec_.index(param);
d672 1
a672 1
  if (index == RW_NPOS) {
d682 2
a683 2
RWBoolean
LgFrSceSetOfParameters::getBool(RWCString name)
d690 1
a690 1
  size_t index = paramVec_.index(param);
d695 1
a695 1
  if (index == RW_NPOS) {
d706 1
a706 1
LgFrSceSetOfParameters::printParamLog(RWCString logFileName)
d715 2
a716 2
  ofstream outFile(logFileName, ios::out);
  outFile.setf(ios::left, ios::adjustfield);
d732 1
a732 1
  outFile.setf(ios::left, ios::adjustfield);
d734 3
a736 2
  for (int i=0; i<numEntries; i++) {
    LgFrSceParameter currParam = paramVec_(i);
d796 1
a796 1
LgFrSceSetOfParameters::printScrubbedParamFile(RWCString scrubParamFileName)
d805 2
a806 2
  ofstream outFile(scrubParamFileName, ios::out);
  outFile.setf(ios::showpoint);
d808 3
a810 2
  for (int i=0; i<numEntries; i++) {
    LgFrSceParameter currParam = paramVec_(i);
d813 1
a813 1
    RWCString paramName = currParam.getName();
d818 1
a818 1
      if (this->getString(currParam.getName()).isNull())
d847 1
a847 1
      if (! (this->getString(currParam.getName()).isNull()))
d867 1
a867 1
LgFrSceSetOfParameters::getMethodSet(const RWCString name) const
d874 2
a875 2
  size_t index = paramVec_.index(param);
  if (index == RW_NPOS) {
d880 1
a880 1
  return (paramVec_(index).getMethodSet());
@


1.2.2.1
log
@Roguewave is gone
@
text
@a0 6

// RW2STL - inserted:
#include <string>
#include <ostream.h>
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL - inserted includes.
d7 2
d10 1
a10 1
#include <fstream>
d15 2
a16 4
// RW2STL - implement (RWGVector, LgFrSceParameter)

// RW2STL - implement (RWGOrderedVector, LgFrSceParameter)

d21 1
a21 1
LgFrSceParameter::setStringVal(const std::string & stringVal,
d66 1
a66 1
LgFrSceParameter::setBoolVal(bool boolVal,
d81 1
a81 1
LgFrSceParameter::setMandatory(bool isMandatory)
d88 2
a89 2
std::string
LgFrSceParameter::getStringVal(whichVal whichOne=ACTUAL_VAL) const
d98 1
a98 1
LgFrSceParameter::getIntVal(whichVal whichOne=ACTUAL_VAL) const
d107 1
a107 1
LgFrSceParameter::getFloatVal(whichVal whichOne=ACTUAL_VAL) const
d115 2
a116 2
bool
LgFrSceParameter::getBoolVal(whichVal whichOne=ACTUAL_VAL) const
d124 2
a125 2
bool
LgFrSceParameter::getMandatory() const
d136 1
a136 1
LgFrSceParameter::getType() const
d139 1
a139 1
std::string
d153 2
a154 2
LgFrSceParameter::LgFrSceParameter(const std::string & name,
                                   const std::string & stringVal,
d157 1
a157 1
				   bool isMandatory) // default = false
d165 2
a166 2
    defBoolVal_(true),
    actBoolVal_(true),
d175 1
a175 1
LgFrSceParameter::LgFrSceParameter(const std::string & name,
d179 1
a179 1
				   bool isMandatory) // default = false
d187 2
a188 2
    defBoolVal_(true),
    actBoolVal_(true),
d197 1
a197 1
LgFrSceParameter::LgFrSceParameter(const std::string & name,
d201 1
a201 1
				   bool isMandatory) // default = false
d209 2
a210 2
    defBoolVal_(true),
    actBoolVal_(true),
d220 1
a220 1
      defBoolVal_ = actBoolVal_ = intVal == 0 ? false : true;
d226 1
a226 1
LgFrSceParameter::LgFrSceParameter(const std::string & name)
d234 2
a235 2
    defBoolVal_(true),
    actBoolVal_(true),
d238 1
a238 1
    mandatory_(false)
d252 2
a253 2
    defBoolVal_(true),
    actBoolVal_(true),
d256 1
a256 1
    mandatory_(false)
d282 1
a282 1
bool
d285 1
a285 1
    return sce::compareStringsCaseIns( lhs.getName(), rhs.getName() ) == 0;
d346 1
a346 1
    sceErrFacility_(0)
d354 1
a354 1
  // and re-define the macro DEFAULT_VECTOR_CAPACITY to a larger value. This will
d378 1
a378 1
  return paramVec_[index];
d386 1
a386 13
  return paramVec_.size();
}

static size_t findInVector( const LgFrSceParameter& p, const std::vector<LgFrSceParameter>& v )
{
    std::vector<LgFrSceParameter>::const_iterator it;
    size_t i = 0;
    for( it = v.begin(); it != v.end(); it++, i++ )
         {
            if( *it == p )
                return i;
         }
    return sce::badIndex;
d391 1
a391 1
LgFrSceSetOfParameters::exists(const std::string name)
d397 2
a398 2
  size_t index = findInVector( param, paramVec_ );
  if (index == sce::badIndex) // doesn't exist
d410 2
a411 2
LgFrSceSetOfParameters::setString(std::string name,
                                  std::string stringVal,
d413 1
a413 1
				  bool isMandatory)
d419 1
a419 1
  size_t index = findInVector( param, paramVec_ );
d422 2
a423 2
  if (index == sce::badIndex) {
    paramVec_.push_back(param);
d439 2
a440 2
    paramVec_.erase(paramVec_.begin() + index);
    paramVec_.push_back(param);
d443 1
a443 1
  return (index == sce::badIndex) ? 0 : 1;
d447 1
a447 1
LgFrSceSetOfParameters::setInt(std::string name,
d450 1
a450 1
			       bool isMandatory)
d456 1
a456 1
  size_t index = findInVector( param, paramVec_ );
d459 2
a460 2
  if (index == sce::badIndex) {
    paramVec_.push_back(param);
d476 2
a477 2
    paramVec_.erase(paramVec_.begin() + index);
    paramVec_.push_back(param);
d480 1
a480 1
  return (index == sce::badIndex) ? 0 : 1;
d485 1
a485 1
LgFrSceSetOfParameters::setFloat(std::string name,
d488 1
a488 1
				 bool isMandatory)
d494 1
a494 1
  size_t index = findInVector( param, paramVec_ );
d497 2
a498 2
  if (index == sce::badIndex) {
    paramVec_.push_back(param);
d514 2
a515 2
    paramVec_.erase(paramVec_.begin() + index);
    paramVec_.push_back(param);
d518 1
a518 1
  return (index == sce::badIndex) ? 0 : 1;
d524 2
a525 2
LgFrSceSetOfParameters::setBool(std::string name,
                                bool boolVal,
d527 1
a527 1
				bool isMandatory)
d533 1
a533 1
  size_t index = findInVector( param, paramVec_ );
d536 2
a537 2
  if (index == sce::badIndex) {
    paramVec_.push_back(param);
d553 2
a554 2
    paramVec_.erase(paramVec_.begin() + index);
    paramVec_.push_back(param);
d557 1
a557 1
  return (index == sce::badIndex) ? 0 : 1;
d564 2
a565 2
std::string
LgFrSceSetOfParameters::getString(std::string  name)
d572 2
a573 1
  size_t index = findInVector( param, paramVec_ );
d578 2
a579 2
  if (index == sce::badIndex ||
      (paramVec_[index].getStringVal().empty()))
d584 2
a585 1
    size_t nameLength = name.length();
d587 4
a590 5
        return std::string("");
    size_t quoteFileNameIndex = sce::find( name, "FileName" );
    if ( quoteFileNameIndex == nameLength - 8 ) 
    {
      name.resize(quoteFileNameIndex+4);  // cut "Name" from "..FileName"
d593 9
a601 11
        if (exists(name+"Extension") != -1) // "..FileExtension" ?
          return (getString("outputFilePrefix") + getString(name+"Extension"));
	    // Note of Caution: if the following clause is revised, keep in mind
	    // that the remove method actually *removes* part of the original
	    // string...so below, 'name' is actually altered by this call.
	    else
        {
          name.resize(quoteFileNameIndex);  // cut "FileName"
          if (exists(name+"Extension") != -1)
	        return (getString("outputFilePrefix") + getString(name+"Extension"));
        }
d609 1
a609 1
    return std::string(""); // null string
d619 1
a619 1
LgFrSceSetOfParameters::getInt(std::string name)
d626 1
a626 1
  size_t index = findInVector( param, paramVec_ );
d631 1
a631 1
  if (index == sce::badIndex) {
d641 1
a641 1
LgFrSceSetOfParameters::getFloat(std::string name)
d648 1
a648 1
  size_t index = findInVector( param, paramVec_ );
d653 1
a653 1
  if (index == sce::badIndex) {
d663 2
a664 2
bool
LgFrSceSetOfParameters::getBool(std::string name)
d671 1
a671 1
  size_t index = findInVector( param, paramVec_ );
d676 1
a676 1
  if (index == sce::badIndex) {
d687 1
a687 1
LgFrSceSetOfParameters::printParamLog(std::string logFileName)
d696 1
a696 1
  std::ofstream outFile(logFileName.c_str());//, ios::out);
d715 2
a716 3
  int i = 0; // Pulled out of the for below by RW2STL
  for (i=0; i<numEntries; i++) {
    LgFrSceParameter currParam = paramVec_[i];
d776 1
a776 1
LgFrSceSetOfParameters::printScrubbedParamFile(std::string scrubParamFileName)
d785 1
a785 1
  std::ofstream outFile(scrubParamFileName.c_str());//, ios::out);
d788 2
a789 3
  int i = 0; // Pulled out of the for below by RW2STL
  for (i=0; i<numEntries; i++) {
    LgFrSceParameter currParam = paramVec_[i];
d792 1
a792 1
    std::string paramName = currParam.getName();
d797 1
a797 1
      if (this->getString(currParam.getName()).empty())
d826 1
a826 1
      if (! (this->getString(currParam.getName()).empty()))
d846 1
a846 1
LgFrSceSetOfParameters::getMethodSet(const std::string name) const
d853 2
a854 2
  size_t index = findInVector( param, paramVec_ );
  if (index == sce::badIndex) {
d859 1
a859 1
  return (paramVec_[index].getMethodSet());
@


1.2.2.2
log
@Went all the way to std::cout
@
text
@d4 1
a4 1
#include <ostream>
d716 1
a716 1
  std::left( outFile );
d732 1
a732 1
  std::left( outFile );
d806 1
a806 1
  std::showpoint( outFile );
@


1.2.2.3
log
@Fixed bobo: LgFrSceSetOfParameters was using
std::vector resize() instead of reserve(), so 256
empty-default-invalid parameters were appearing
in params.log
@
text
@d357 1
a357 1
  paramVec_.reserve(256);
@


1.1
log
@Initial revision
@
text
@d6 1
@


1.1.1.1
log
@Import sce
@
text
@@
