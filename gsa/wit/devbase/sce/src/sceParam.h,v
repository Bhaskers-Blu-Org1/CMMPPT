head	1.5;
access;
symbols
	sce_5_01_20080919:1.5
	latest_sce_4_20_20060523:1.5.0.4
	sce_4_20_20060523:1.5
	latest_sce4_20_OSL:1.5.0.2
	sce_4_20_OSL:1.5
	sce_4_20_20051222:1.5
	sce_4_10_30050426:1.5
	sce_4_05_20040511:1.5
	sce_4_00_20040201:1.5
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2004.01.22.02.47.48;	author ervolina;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.12.22.52.41;	author ervolina;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.04.20.53.31;	author dpc;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.15.19.36.58;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.18.36.54;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.54;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.43.18;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.5
log
@permanently replaced Concurrent Pegging with Post Implosion pegging.
Parameters stay the same though.
@
text
@// file: sceParam.h
// author: tom

#ifndef  LGFRSCESETOFPARAMETERS_H
#define  LGFRSCESETOFPARAMETERS_H

// RW2STL - inserted:
#include <vector>
#include <string>
// End of RW2STL - inserted includes.

#include <sce/src/sceDefin.h>
#include <mcl/src/mcl.h>


enum whichVal {DEFAULT_VAL, ACTUAL_VAL};


//  SCE parameter class 
class LgFrSceParameter {
  // friend class LgFrSceSetOfParameters;

public:

enum paramType {intP, floatP, stringP, boolP};  

  // self-test
static void test();

// string param  constructor
LgFrSceParameter(const std::string & name,
                 const std::string & stringVal,
                 paramType         type,
		 unsigned int methodSet = 0,
		 bool isMandatory = false);

  // float param  constructor
LgFrSceParameter(const std::string & name,
                 float             floatVal,
                 paramType         type,
		 unsigned int methodSet = 0,
		 bool isMandatory = false);  

  // int param  constructor
LgFrSceParameter(const std::string & name,
                 int               intVal ,
                 paramType         type,
		 unsigned int methodSet = 0,
		 bool isMandatory = false);  


  // preferred constructor
LgFrSceParameter(const std::string & name);


  // Set Parameter Value
  //** the whichOne arg refers to either DEFAULT_VAL or ACTUAL_VAL
  //   Note: the default for the set methods is DEFAULT_VAL 
int setStringVal(const std::string & stringVal, whichVal whichOne);
int setIntVal(int intVal, whichVal whichOne);
int setFloatVal(float floatVal, whichVal whichOne);
int setBoolVal(bool boolVal, whichVal whichOne);
void setMandatory(bool isMandatory); // only one

  // Get Parameter Value
  //** the whichOne arg refers to either DEFAULT_VAL or ACTUAL_VAL
  //   the default for the get methods is ACTUAL_VAL
std::string getStringVal(whichVal whichOne) const;
int       getIntVal(whichVal whichOne) const;
float     getFloatVal(whichVal whichOne) const;
bool      getBoolVal(whichVal whichOne) const;
bool      getMandatory() const;  // only one

  // Set/Get Current TYPE of parameter
void  setType(paramType);
paramType getType() const;

  // Get MethodSet_ flag value; Note: there is not explicit "SET" method
  //  intentionally, because the only time this should be set is when a
  //  parameter is created.
int getMethodSet() const;

  // get the parameter Name (used for operator ==)
std::string getName() const;


  
// copy constructor
LgFrSceParameter(const LgFrSceParameter& source);

// assignment operator
LgFrSceParameter&
operator=(const LgFrSceParameter& rhs);

// destructor
virtual
~LgFrSceParameter();

  // default constructor
LgFrSceParameter();

private:
  
  std::string      name_;
  // note: these are the default values
  std::string      defStringVal_;
  float          defFloatVal_;
  int            defIntVal_;
  bool      defBoolVal_;
  // note: these are the user-defined/used values
  std::string      actStringVal_;
  float          actFloatVal_;
  int            actIntVal_;
  bool      actBoolVal_;

  paramType      type_;
  // adding flag for method set {0=default;1=fromParamFile;maybe others}
  unsigned int   methodSet_;

  // another flag to indicate whether or not mandatory {true=Mandatory Param}
  bool      mandatory_;
};


// == operator
// IMPORTANT!! Two parameters are considered "==" if 
// lhs.name_.compareTo(rhs.name_, std::string::ignoreCase) == 0
bool
operator==(const LgFrSceParameter& lhs, const LgFrSceParameter& rhs);  




// RW2STL - declare (RWGVector, LgFrSceParameter)

// RW2STL - declare (RWGOrderedVector, LgFrSceParameter)

typedef std::vector<LgFrSceParameter> LgFrOrderedVectorParameter; // RW2STL - typedef RWGOrderedVector(LgFrSceParameter) LgFrOrderedVectorParameter;




// SCE Set of Parameters Class
class LgFrSceSetOfParameters {
public:

  // self-test
static void test();
  
// copy constructor
LgFrSceSetOfParameters(const LgFrSceSetOfParameters& source);

// assignment operator
LgFrSceSetOfParameters&
operator=(const LgFrSceSetOfParameters& rhs);

// destructor
virtual
~LgFrSceSetOfParameters();

  // default constructor
LgFrSceSetOfParameters();

// indexing operator
LgFrSceParameter&
operator()(size_t index);

// returns number of parameters in SOP
size_t
numParameters() const;


// Set Parameter
int
setString(std::string name,
          std::string stringVal,
	  unsigned int methodSet = 0,
	  bool isMandatory = false);

int
setInt(std::string name,
       int intVal,
       unsigned int methodSet = 0,
       bool isMandatory = false);

int
setFloat(std::string name,
         float floatVal,
	 unsigned int methodSet = 0,
	 bool isMandatory = false);

int
setBool(std::string name,
        bool boolVal,
	unsigned int methodSet = 0,
	bool isMandatory = false);
  
// Get Parameter
std::string
getString(std::string  name) const;

int
getInt(std::string name) const;

float
getFloat(std::string name) const;

bool 
getBool(std::string name) const;


// necessary for sharing error facility for messaging purposes
void
setErrFacility(MclFacility * existingFacility);

MclFacility*
getErrFacility();

// returns -1 if parameter of this type does not exist...
// otherwise returns int cast paramType {0,1,2,3}
int
exists(const std::string name) const;

// prints out status of all parameters -- param.log is default name
void printParamLog(std::string logFileName) const;


  // prints out a scrubbed param file
void
printScrubbedParamFile(std::string scrubParamFileName) const;


int getMethodSet(const std::string name) const;

private:
  LgFrOrderedVectorParameter    paramVec_;

  // necessary for error messaging by parameter class methods
  MclFacility * sceErrFacility_;
};


#endif
@


1.4
log
@fixed Scrubbing so that scrubbed param file would retain original
settings before usePipForPeg swapped them around
@
text
@a171 3
size_t
numBackUpParameters() const;

a227 3
void
backUp();

a236 2

  LgFrOrderedVectorParameter    backUpParamVec_;
@


1.3
log
@Changed several
size_t index
to
int index
because there was code that was returning -1 for the error case.
@
text
@d172 4
d231 3
d243 2
@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@d81 1
a81 1
unsigned int getMethodSet() const;
d232 1
a232 1
unsigned int getMethodSet(const std::string name) const;
@


1.1
log
@Initial revision
@
text
@d7 5
a11 2
#include <rw/cstring.h>
#include <rw/gordvec.h>
d31 2
a32 2
LgFrSceParameter(const RWCString & name,
                 const RWCString & stringVal,
d35 1
a35 1
		 RWBoolean isMandatory = FALSE);
d38 1
a38 1
LgFrSceParameter(const RWCString & name,
d42 1
a42 1
		 RWBoolean isMandatory = FALSE);  
d45 1
a45 1
LgFrSceParameter(const RWCString & name,
d49 1
a49 1
		 RWBoolean isMandatory = FALSE);  
d53 1
a53 1
LgFrSceParameter(const RWCString & name);
d59 1
a59 1
int setStringVal(const RWCString & stringVal, whichVal whichOne);
d62 2
a63 2
int setBoolVal(RWBoolean boolVal, whichVal whichOne);
void setMandatory(RWBoolean isMandatory); // only one
d68 5
a72 5
RWCString getStringVal(whichVal whichOne);
int       getIntVal(whichVal whichOne);
float     getFloatVal(whichVal whichOne);
int       getBoolVal(whichVal whichOne);
RWBoolean getMandatory();  // only one
d76 1
a76 1
paramType getType();
d84 1
a84 1
RWCString getName() const;
d104 1
a104 1
  RWCString      name_;
d106 1
a106 1
  RWCString      defStringVal_;
d109 1
a109 1
  RWBoolean      defBoolVal_;
d111 1
a111 1
  RWCString      actStringVal_;
d114 1
a114 1
  RWBoolean      actBoolVal_;
d120 2
a121 2
  // another flag to indicate whether or not mandatory {TRUE=Mandatory Param}
  RWBoolean      mandatory_;
d127 2
a128 2
// lhs.name_.compareTo(rhs.name_, RWCString::ignoreCase) == 0
int
d134 6
a139 3
declare (RWGVector, LgFrSceParameter)
declare (RWGOrderedVector, LgFrSceParameter)
typedef RWGOrderedVector(LgFrSceParameter) LgFrOrderedVectorParameter;
d174 2
a175 2
setString(RWCString name,
          RWCString stringVal,
d177 1
a177 1
	  RWBoolean isMandatory = FALSE);
d180 1
a180 1
setInt(RWCString name,
d183 1
a183 1
       RWBoolean isMandatory = FALSE);
d186 1
a186 1
setFloat(RWCString name,
d189 1
a189 1
	 RWBoolean isMandatory = FALSE);
d192 2
a193 2
setBool(RWCString name,
        RWBoolean boolVal,
d195 1
a195 1
	RWBoolean isMandatory = FALSE);
d198 2
a199 2
RWCString
getString(RWCString  name) const;
d202 1
a202 1
getInt(RWCString name) const;
d205 1
a205 1
getFloat(RWCString name) const;
d207 2
a208 2
RWBoolean 
getBool(RWCString name) const;
d221 1
a221 1
exists(const RWCString name) const;
d224 1
a224 1
void printParamLog(RWCString logFileName) const;
d229 1
a229 1
printScrubbedParamFile(RWCString scrubParamFileName) const;
d232 1
a232 1
unsigned int getMethodSet(const RWCString name) const;
@


1.1.1.1
log
@Import sce
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d7 2
a8 5
// RW2STL - inserted:
#include <vector>
#include <string>
// End of RW2STL - inserted includes.

d28 2
a29 2
LgFrSceParameter(const std::string & name,
                 const std::string & stringVal,
d32 1
a32 1
		 bool isMandatory = false);
d35 1
a35 1
LgFrSceParameter(const std::string & name,
d39 1
a39 1
		 bool isMandatory = false);  
d42 1
a42 1
LgFrSceParameter(const std::string & name,
d46 1
a46 1
		 bool isMandatory = false);  
d50 1
a50 1
LgFrSceParameter(const std::string & name);
d56 1
a56 1
int setStringVal(const std::string & stringVal, whichVal whichOne);
d59 2
a60 2
int setBoolVal(bool boolVal, whichVal whichOne);
void setMandatory(bool isMandatory); // only one
d65 5
a69 5
std::string getStringVal(whichVal whichOne) const;
int       getIntVal(whichVal whichOne) const;
float     getFloatVal(whichVal whichOne) const;
bool      getBoolVal(whichVal whichOne) const;
bool      getMandatory() const;  // only one
d73 1
a73 1
paramType getType() const;
d81 1
a81 1
std::string getName() const;
d101 1
a101 1
  std::string      name_;
d103 1
a103 1
  std::string      defStringVal_;
d106 1
a106 1
  bool      defBoolVal_;
d108 1
a108 1
  std::string      actStringVal_;
d111 1
a111 1
  bool      actBoolVal_;
d117 2
a118 2
  // another flag to indicate whether or not mandatory {true=Mandatory Param}
  bool      mandatory_;
d124 2
a125 2
// lhs.name_.compareTo(rhs.name_, std::string::ignoreCase) == 0
bool
d131 3
a133 6
// RW2STL - declare (RWGVector, LgFrSceParameter)

// RW2STL - declare (RWGOrderedVector, LgFrSceParameter)

typedef std::vector<LgFrSceParameter> LgFrOrderedVectorParameter; // RW2STL - typedef RWGOrderedVector(LgFrSceParameter) LgFrOrderedVectorParameter;

d168 2
a169 2
setString(std::string name,
          std::string stringVal,
d171 1
a171 1
	  bool isMandatory = false);
d174 1
a174 1
setInt(std::string name,
d177 1
a177 1
       bool isMandatory = false);
d180 1
a180 1
setFloat(std::string name,
d183 1
a183 1
	 bool isMandatory = false);
d186 2
a187 2
setBool(std::string name,
        bool boolVal,
d189 1
a189 1
	bool isMandatory = false);
d192 2
a193 2
std::string
getString(std::string  name) const;
d196 1
a196 1
getInt(std::string name) const;
d199 1
a199 1
getFloat(std::string name) const;
d201 2
a202 2
bool 
getBool(std::string name) const;
d215 1
a215 1
exists(const std::string name) const;
d218 1
a218 1
void printParamLog(std::string logFileName) const;
d223 1
a223 1
printScrubbedParamFile(std::string scrubParamFileName) const;
d226 1
a226 1
unsigned int getMethodSet(const std::string name) const;
@

