head	1.3;
access;
symbols
	sce_5_01_20080919:1.3
	latest_sce_4_20_20060523:1.2.0.12
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.10
	sce_4_20_OSL:1.2
	sce_4_20_20051222:1.2
	sce_4_10_30050426:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.8
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.2.0.6
	Root-of-EndRw:1.2
	EndWitRw-branch:1.2.0.4
	Root-of-EndWitRw:1.2
	RwToStl-branch:1.2.0.2
	Root-of-RwToStl:1.2
	latest_sce_3_10_20010924:1.1.0.4
	sce_3_10_20010924:1.1
	latest_sce_3_00_20010601:1.1.0.2
	sce_3_00_20010601:1.1;
locks; strict;
comment	@ * @;


1.3
date	2008.04.24.14.04.43;	author ervolina;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.17.22.04.43;	author ervolina;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.01.16.53.54;	author ervolina;	state Exp;
branches;
next	;


desc
@@


1.3
log
@sce5 beta with prioriity manager, multiattribute demand, and dated records
@
text
@// file: sortStrt.h
// author:  tom

#ifndef  LGFRSCESORTSTRAGETY_H
#define  LGFRSCESORTSTRAGETY_H

#include <stdlib.h>

// ==================================================================
// ====== Client Instructions: ======================================
// ====== New a LgFrSceSortStrategy by constructing with one of these 
// ====== unique sort ID's.
#define LgFrSceSortId_PDS 0
#define LgFrSceSortId_PSD 1
#define LgFrSceSortId_DPS 2
#define LgFrSceSortId_DSP 3
#define LgFrSceSortId_SDP 4
#define LgFrSceSortId_SPD 5

// You MUST increment this  Maximum if you add another sort 
//      ====================
#define LgFrSceSortID_Maximum 5
//      ====================







class LgFrSceAllocLet;
  

// ========================================================
// ===============  LgFrSceSortStrategy ======================
// ========================================================
typedef int(*LgFrSceCompareVoidFnPtr)(const void*,const void*);

class LgFrSceSortStrategy {
public:



  /*
  int compareVoid_PDS(const void * aa, const void * bb);
  int compareVoid_PSD(const void *aa, const void *bb);
  int compareVoid_DPS(const void *aa, const void *bb);
  int compareVoid_DSP(const void *aa, const void *bb);
  int compareVoid_SDP(const void *aa, const void *bb);
  int compareVoid_SPD(const void *aa, const void *bb);
  */



  // use this call to get the right compare function for void *
  virtual LgFrSceCompareVoidFnPtr
  compareVoidFunc();


  // preferred constructor
  LgFrSceSortStrategy(int sortId);
  


  // destructor
  virtual
  ~LgFrSceSortStrategy();


  // copy constructor
  LgFrSceSortStrategy(const LgFrSceSortStrategy& source);
  
  // assignment operator
  LgFrSceSortStrategy&
  operator=(const LgFrSceSortStrategy& rhs);
  
  // default constructor
  LgFrSceSortStrategy();


  // get the sortID
  int 
  sortId();



private:
  int sortId_;


};


#endif
















@


1.2
log
@premiminary coomit for release 3.11
@
text
@d44 11
d56 1
a56 2
virtual
LgFrSceCompareVoidFnPtr
d62 1
a62 1

@


1.1
log
@new files for release 3.00
@
text
@a36 1
typedef int(*LgFrSceCompareAllocLetFnPtr)(const LgFrSceAllocLet*,const LgFrSceAllocLet*);
a42 4
  // use this call to get the right compare function for AllocLets
virtual
LgFrSceCompareAllocLetFnPtr
  compareAllocFunc();
d71 3
@

