head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_20_20051222:1.2
	sce_4_10_30050426:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.57;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.18.36.52;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.52;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.43.17;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LGFRSCEPARAMETERMANAGER_H
#define LGFRSCEPARAMETERMANAGER_H

// RW2STL - inserted:
#include <string>
// End of RW2STL - inserted includes.


#include <sce/src/sceDefin.h>
#include <mcl/src/mcl.h>
#include <sce/src/sceIOLog.h>

// forward references
class LgFrSceSetOfParameters;

class LgFrSceParameterManager
{

public:

void 
initializeSetOfParameters(const std::string & parameterFileName,
                          LgFrSceSetOfParameters & setOfParameters);

// this is a new method which will be implemented in initializeSetOfParameters
//  -- it will be responsible for reading through the parameter file and
//     over-riding the default parameters if necessary with user defined vals
//  ** returns 1 if no problems; 0 otherwise
int
processParameterFile(const std::string & parameterFileName,
		     LgFrSceSetOfParameters & setOfParameters);


// These are neccessary for error messaging by parameter manager
void
setErrFacility(MclFacility * existingFacility);

MclFacility*
getErrFacility();


void
setIOLogMgr(LgFrSceIOLogMgr * existingMgr);

LgFrSceIOLogMgr*
getIOLogMgr();



  // Assignment operator.
  LgFrSceParameterManager&
    operator=(
              const LgFrSceParameterManager& rhs);

  // Destructor
  ~LgFrSceParameterManager();


  // Copy constructor
  LgFrSceParameterManager(
               const LgFrSceParameterManager& source);

  // Default Constructor
  LgFrSceParameterManager();
  

private:


void 
initializeParameterDefaults(const std::string & paramFile,
                            LgFrSceSetOfParameters & defaultSet)
const;
  
  
const
std::string
searchParamFile(
    bool & doesParameterExist,                    
    const std::string & parameterFile,
    const std::string & targetParameter,
    const int mandatory = PURELY_OPTIONAL)
const;

const
float
searchParamFileFloat(bool & doesParameterExist,
                     const std::string & parameterFile,
                     const std::string & targetParameter,
                     const int mandatory = PURELY_OPTIONAL)
const;


const
int 
searchParamFileInt(
    bool & exists,
    const std::string & parameterFile,
    const std::string & targetParameter,
    const int mandatory = PURELY_OPTIONAL,
    const int defaultVal = 0)
const;

const
bool
searchParamFileBoolean(
    bool & exists,
    const std::string & parameterFile,
    const std::string & targetParameter,
    const int mandatory = PURELY_OPTIONAL)
const;
  

bool
doesInputFileExist(
                   const std::string & targetFile);

//--Member Data -- (pointers to useful objects)

// This is necessary for error messaging by parameter manager!
MclFacility * sceErrFacility_;
// This is used pretty much just for the purpose of printing to the iolog files
LgFrSceIOLogMgr * sceIOLogMgr_;

//--More Member Data -- these are to keep track of data for SCE input file log
std::string parameterFileName_;
long goodCount_;
long badCount_;
long commentCount_;
long totalCount_;

// Self-test
static void test();

};

#endif
@


1.1
log
@Initial revision
@
text
@d4 4
a10 2
// #include <rw/sortvec.h> // this is for vector of all valid parameters 
#include <rw/regexp.h>
d22 1
a22 1
initializeSetOfParameters(const RWCString & parameterFileName,
d30 1
a30 1
processParameterFile(const RWCString & parameterFileName,
d71 1
a71 1
initializeParameterDefaults(const RWCString & paramFile,
d77 1
a77 1
RWCString
d79 3
a81 3
    RWBoolean & doesParameterExist,                    
    const RWCString & parameterFile,
    const RWCString & targetParameter,
d87 3
a89 3
searchParamFileFloat(RWBoolean & doesParameterExist,
                     const RWCString & parameterFile,
                     const RWCString & targetParameter,
d97 3
a99 3
    RWBoolean & exists,
    const RWCString & parameterFile,
    const RWCString & targetParameter,
d105 1
a105 1
RWBoolean
d107 3
a109 3
    RWBoolean & exists,
    const RWCString & parameterFile,
    const RWCString & targetParameter,
d114 1
a114 1
RWBoolean
d116 1
a116 1
                   const RWCString & targetFile);
d126 1
a126 1
RWCString parameterFileName_;
@


1.1.1.1
log
@Import sce
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a3 4
// RW2STL - inserted:
#include <string>
// End of RW2STL - inserted includes.

d7 2
d20 1
a20 1
initializeSetOfParameters(const std::string & parameterFileName,
d28 1
a28 1
processParameterFile(const std::string & parameterFileName,
d69 1
a69 1
initializeParameterDefaults(const std::string & paramFile,
d75 1
a75 1
std::string
d77 3
a79 3
    bool & doesParameterExist,                    
    const std::string & parameterFile,
    const std::string & targetParameter,
d85 3
a87 3
searchParamFileFloat(bool & doesParameterExist,
                     const std::string & parameterFile,
                     const std::string & targetParameter,
d95 3
a97 3
    bool & exists,
    const std::string & parameterFile,
    const std::string & targetParameter,
d103 1
a103 1
bool
d105 3
a107 3
    bool & exists,
    const std::string & parameterFile,
    const std::string & targetParameter,
d112 1
a112 1
bool
d114 1
a114 1
                   const std::string & targetFile);
d124 1
a124 1
std::string parameterFileName_;
@

