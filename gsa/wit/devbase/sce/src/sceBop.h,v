head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_20_20051222:1.2
	sce_4_10_30050426:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.57;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.18.36.53;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.53;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.43.17;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// file: sceBop.h
// author: tom & robin

#ifndef  LGFRSCEBOP_H
#define  LGFRSCEBOP_H

// RW2STL - inserted:
#include <vector>
#include <string>
// End of RW2STL - inserted includes.

// #include <stdlib.h>
#include <wit/src/wit.h>
#include <assert.h>



class LgFrSceBop
{
public:
  // default constructor. Don't use.
  LgFrSceBop (); 

  // better constructor
  LgFrSceBop (float defaultPreference,
              int defaultEarly,
              int defaultLate,
              std::string & defaultOpName,
              int defaultBopIndex );

  // get "preference"
  const
  float
  preference () const ;
  
  // set "preference"
  void
  preference (const float pref);
  // get "early"
  const
  int
  early () const ;
  
  // set "early"
  void
  early (const int earliestPeriod);

  // get "late"
  const
  int
  late () const ;
  
  // set "late"
  void
  late (const int latestPeriod);

  // get "opName"
  const
  std::string&
  opName () const ;
  
  // set "opName"
  void
  opName (const std::string & operationName);

  // get "bopIndex"
  const
  int
  bopIndex () const ;
  
  // set "bopIndex"
  void
  bopIndex (const int bopIndexNumber);

  // split bop
  // Split the specified bop at the given date.
  // The specified bop becomes the early "half" and 
  // the later "half" is returned as a new bop.
  // The bop is split both in WIT and in the object.
  LgFrSceBop 
  splitBop ( WitRun * const theWitRun,
             int endingDateOfFirstHalf );
  
  // copy constructor
  LgFrSceBop(const LgFrSceBop& source);

  // assignment operator
  LgFrSceBop&
  operator=(const LgFrSceBop& rhs);

  // destructor
  virtual
  ~LgFrSceBop();

  // == operator
  // Note: two  bops are EQUAL if their bopIndex's are equal
  //      ????  (this is used by OrderedVector to find a "match"
  //      not sure we'll even use it
  int
  operator==(const LgFrSceBop& rhs);
  
  
private:
  float  preference_ ;
  int    early_ ;
  int    late_ ;
  std::string opName_ ;
  int    bopIndex_ ;
};

// Here's the declaration for the compare function
 int bopCompare(const LgFrSceBop * a, const LgFrSceBop * b);







// ============================
// SCE Part Set of Bops
// ============================

// This object is a simple wrapper around RWOrderedVector(LgFrSceBop)
// It is convenient because it'll make the client code MUCH cleaner.

// It only really provides two functions:
//  1) construction:  You pass in the witRun and the partName, and it
//     creates a sorted vector of sceBop objects for that part.
//  2) indexing operator.  This gives a reference to the i'th
//     LgFrSceBop item which you can modify, since its a reference.
//
//  Note: if you need more function, we can easily implement whatever
//  is available via RWOrderedVector(val).  Some of the key ones are ...
//  insertAt, and removeAt.  However, if I understand, the size of the
//  SetOfBops stays fixed with the original number of bops in Wit.
//  In other words, once its created, you never need to modify the
//  sorted vector itself -- only the objects within it.

// here's the necessary RW setups for a typical "generic.h" Class

// RW2STL - declare (RWGVector, LgFrSceBop)

// RW2STL - declare (RWGOrderedVector, LgFrSceBop)

typedef std::vector<LgFrSceBop> LgFrOrderedVectorSceBop; // RW2STL - typedef RWGOrderedVector(LgFrSceBop) LgFrOrderedVectorSceBop;


class LgFrScePartSetOfBops {
public:

// preferred  constructor
// This constructor automatically populates the setOfBops for
// the given partname and Puts them into Sorted Order.
LgFrScePartSetOfBops(WitRun * const theWitRun, std::string & partName);
  
// Here's how you get access to one of the Bops se as a reference!
// from here you can modify at your leisure via SplitBop or whatever
LgFrSceBop &
operator[](size_t i);

  
// copy constructor
LgFrScePartSetOfBops(const LgFrScePartSetOfBops& source);


// destructor
virtual
~LgFrScePartSetOfBops();

// default constructor -- DON'T USE
LgFrScePartSetOfBops();

// assignment operator
LgFrScePartSetOfBops&
operator=(const LgFrScePartSetOfBops& rhs);

// test method
// RLH: Ask about "static-ness" of the test
// and the use of "this" pointer  with static.
void test();

private:
  LgFrOrderedVectorSceBop    setOfBops_;
};


#endif
@


1.1
log
@Initial revision
@
text
@d7 5
a12 1
#include <rw/cstring.h>
a14 1
#include <rw/gordvec.h>
d28 1
a28 1
              RWCString & defaultOpName,
d59 1
a59 1
  RWCString&
d64 1
a64 1
  opName (const RWCString & operationName);
d107 1
a107 1
  RWCString opName_ ;
d142 6
a147 3
declare (RWGVector, LgFrSceBop)
declare (RWGOrderedVector, LgFrSceBop)
typedef RWGOrderedVector(LgFrSceBop) LgFrOrderedVectorSceBop;
d155 1
a155 1
LgFrScePartSetOfBops(WitRun * const theWitRun, RWCString & partName);
@


1.1.1.1
log
@Import sce
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a6 5
// RW2STL - inserted:
#include <vector>
#include <string>
// End of RW2STL - inserted includes.

d8 1
d11 1
d25 1
a25 1
              std::string & defaultOpName,
d56 1
a56 1
  std::string&
d61 1
a61 1
  opName (const std::string & operationName);
d104 1
a104 1
  std::string opName_ ;
d139 3
a141 6
// RW2STL - declare (RWGVector, LgFrSceBop)

// RW2STL - declare (RWGOrderedVector, LgFrSceBop)

typedef std::vector<LgFrSceBop> LgFrOrderedVectorSceBop; // RW2STL - typedef RWGOrderedVector(LgFrSceBop) LgFrOrderedVectorSceBop;

d149 1
a149 1
LgFrScePartSetOfBops(WitRun * const theWitRun, std::string & partName);
@

