head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_20_20051222:1.2
	sce_4_10_30050426:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.54;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.18.36.48;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.48;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.43.13;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.14.34;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@
// RW2STL - inserted:
#include <ostream>
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL - inserted includes.
//-----------------------------------------------------------------------------
// File arg.C
//
// Contains the declaration and implementation of the following classes:
//
// ArgPtrVector
// 
// Contains the implementation of the following classes:
//
// Arg
//    IntArg
//    FloatArg
//    StringArg
//    VectorArg
//       IntVectorArg
//       FloatVectorArg
//
// ArgList
//-----------------------------------------------------------------------------

#include <assert.h>
#include <iostream>
#include <sce/src/arg.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

//---------------------------------------------------------------------------
// Rogue Wave Declarations and Implementations
//---------------------------------------------------------------------------

// RW2STL - declare   (RWGVector,        SceArgPtr)

// RW2STL - declare   (RWGOrderedVector, SceArgPtr)


// RW2STL - implement (RWGVector,        SceArgPtr)

// RW2STL - implement (RWGOrderedVector, SceArgPtr)


//-----------------------------------------------------------------------------
// class ArgPtrVector.
//
// Wrapper (by inheritance) for RWGOrderedVector(SceArgPtr).
// The purpose of this class is to avoid the need to #include rw/gordvec.h in
// arg.h. It allows ArgList to use a forward reference to this class, rather
// than a forward reference to class RWGOrderedVector(SceArgPtr), which would
// not be possible, because it is a generic class.
// All Implementation is inline.
//-----------------------------------------------------------------------------

/*
class SceArgPtrVector: public RWGOrderedVector(SceArgPtr)
   {
   public:

      inline SceArgPtrVector (size_t capac):
            RWGOrderedVector(SceArgPtr) (capac)
         {
         }

   private:

      SceArgPtrVector             (const SceArgPtrVector &);
 
         //
         // Copy ctor is declared private and not implemented
         // so as to prevent inadvertant copying and assignment.
   };
*/
//-----------------------------------------------------------------------------
//
// SceArg Implementation
//
//-----------------------------------------------------------------------------


SceArg::~SceArg ()
   {
   }


SceArg::SceArg (const SceArg & theArg) : type_(theArg.type_)
   {
   }

SceArg::SceArg (ArgType t) : type_(t)
{
}

SceArg &  SceArg::operator = (const SceArg& arg)
{
  assert(type_ == arg.type_);
  if (this == &arg)
    return *this;

  switch (type_)
    {
    case SceArg::ARG_INT:
      (SceIntArg&) *this = (SceIntArg&) arg;
      break;
    case SceArg::ARG_FLOAT:
      (SceFloatArg&) *this = (SceFloatArg&) arg;
      break;
    case SceArg::ARG_CHARSTAR:
      (SceStringArg&) *this = (SceStringArg&) arg;
      break;
    case SceArg::ARG_FLOATSTAR:
      (SceFloatVectorArg&) *this = (SceFloatVectorArg&) arg;
      break;
    case SceArg::ARG_INTSTAR:
      (SceIntVectorArg&) *this = (SceIntVectorArg&) arg;
      break;
    }
  return *this;
}

int SceArg::operator == (const SceArg& arg)
{
  assert(type_ == arg.type_);
  if (this != &arg)
    return 0;

  switch (type_)
    {
    case SceArg::ARG_INT:
      return (SceIntArg&) *this == (SceIntArg&) arg;
    case SceArg::ARG_FLOAT:
      (SceFloatArg&) *this == (SceFloatArg&) arg;
    case SceArg::ARG_CHARSTAR:
      (SceStringArg&) *this == (SceStringArg&) arg;
    case SceArg::ARG_FLOATSTAR:
      (SceFloatVectorArg&) *this == (SceFloatVectorArg&) arg;
    case SceArg::ARG_INTSTAR:
      (SceIntVectorArg&) *this == (SceIntVectorArg&) arg;
    default:
      assert(0);
    }
  return 0;
}

//-----------------------------------------------------------------------------
//
// SceIntArg Implementation
//
//-----------------------------------------------------------------------------

SceIntArg::SceIntArg(void):
  SceArg(ARG_INT),
  i_    (0)
{
}

SceIntArg::SceIntArg(int i):
  SceArg(ARG_INT),
  i_    (i)
{
}

SceIntArg::SceIntArg(const SceIntArg&  i):
  SceArg(i),
  i_    (i.i_)
{
}

SceIntArg & SceIntArg::operator = (const SceIntArg& i)
{
  assert(type_ == i.type_);
  i_ = i.i_;
  return *this;
}

int SceIntArg::operator == (const SceIntArg& i)
{
  assert(type_ == i.type_);
  return (i_ == i.i_) ? 1 : 0;
}

//-----------------------------------------------------------------------------
//
// SceFloatArg Implementation
//
//-----------------------------------------------------------------------------

SceFloatArg::SceFloatArg():
  SceArg(ARG_FLOAT),
  f_    (0.0)
{
}


SceFloatArg::SceFloatArg(float f):
  SceArg(ARG_FLOAT),
  f_    (f)
{
}

SceFloatArg::SceFloatArg(const SceFloatArg& f):
  SceArg(f),
  f_ (f.f_)
{
}

SceFloatArg & SceFloatArg::operator = (const SceFloatArg& f)
{
  assert(type_ == f.type_);
  f_ = f.f_;
  return *this;
}

int SceFloatArg::operator == (const SceFloatArg& f)
{
  assert(type_ == f.type_);
  return (f_ == f.f_) ? 1 : 0;
}
//-----------------------------------------------------------------------------
//
// SceStringArg Implementation
//
//-----------------------------------------------------------------------------

SceStringArg::SceStringArg(void):
  SceArg(ARG_CHARSTAR)
{
 s_ = new char[1];
 s_[0] = '\0';
 
}

SceStringArg::SceStringArg(const char * s):
  SceArg(ARG_CHARSTAR)
{
  assert(s);
  free();
  copy((char*)s);
 
}

SceArg* SceStringArg::clone()const
{
  return new SceStringArg(*this);
}

SceStringArg::~SceStringArg()
{
  free();
}

SceStringArg::SceStringArg(const SceStringArg & source)
  :SceArg(source)
{
  free();
  copy(source.s_);
  
}

void SceStringArg::copy(char * s)
{
  if (s)
    {
      free();
      s_ = new char[strlen(s) + 1];
      assert(s_);
      if (s_)
        strcpy(s_,s);
    }
}

void SceStringArg::free()
{
  if (s_)
    delete [] s_;
  s_ = 0;
}

SceStringArg&  SceStringArg::operator=(const SceStringArg& s)
{
  assert(type_ == s.type_);
  free();
  copy(s.s_);
  return *this;
}

int  SceStringArg::operator==(const SceStringArg& s)
{
  assert(type_ == s.type_);
  return (strcmp(s_, s.s_) == 0 ? 1 : 0);
}


//-----------------------------------------------------------------------------
//
// SceVectorArg Implementation
//
//-----------------------------------------------------------------------------

SceVectorArg::SceVectorArg (int l):
   SceArg (),
   length_(l)
{
  // do nothing
}

SceVectorArg::~SceVectorArg()
{
}

SceVectorArg::SceVectorArg(const SceVectorArg& v):
   SceArg(v),
   length_(v.length_)
{
  // do nothing
}


//-----------------------------------------------------------------------------
//
// SceIntVectorArg Implementation
//
//-----------------------------------------------------------------------------

SceIntVectorArg::SceIntVectorArg():
  SceVectorArg(0),
  iv_(0)
{
  type_ = ARG_INTSTAR;
}

SceIntVectorArg::SceIntVectorArg(const int* v, int l):
   SceVectorArg(l)
{
  assert(v);
  type_ = ARG_INTSTAR;
  free();
  copy(v);
}

SceIntVectorArg::~SceIntVectorArg()
{
  free();
}


SceArg * SceIntVectorArg::clone() const
{
  SceArg * newInst = new SceIntVectorArg(*this);
  return newInst;
}

SceIntVectorArg::SceIntVectorArg(const SceIntVectorArg& iv):
   SceVectorArg (iv)
{
 
   type_ = ARG_INTSTAR; 
   free();
   copy(iv_);
}

SceIntVectorArg &  SceIntVectorArg::operator= (const SceIntVectorArg & iv)
{
  assert(type_ == iv.type_);
  free();
  copy(iv.iv_);
  return *this;
}

int  SceIntVectorArg::operator== (const SceIntVectorArg & iv)
{
  assert(iv_ && iv.iv_);
  assert(type_ == iv.type_);
   int i = 0; // Pulled out of the for below by RW2STL
   for (i = 0; i < length_; i++)
     {
       if (iv_[i] != iv.iv_[i])
         return 0;
     }
   return 1;
}

void SceIntVectorArg::copy(const int* iv)
{
  if (iv)
    {
      free();
      iv_ = new int[length_];
      assert(iv_);
      int i = 0; // Pulled out of the for below by RW2STL
      for (i=0; i < length_; i++)
        {
          iv_[i] = iv[i];
        }
    }
 
}

void SceIntVectorArg::free()
{
  if (iv_)
    delete [] iv_;
  iv_ = 0;
}

//-----------------------------------------------------------------------------
//
// SceFloatVectorArg Implementation
//
//-----------------------------------------------------------------------------

SceFloatVectorArg::SceFloatVectorArg():
   SceVectorArg(0),
   fv_(0)
{
  type_ = ARG_FLOATSTAR;
}


SceFloatVectorArg::SceFloatVectorArg(const float* v, int l):
   SceVectorArg(l)
{
  assert(v);
  type_ = ARG_FLOATSTAR;
  free();
  copy(v);
}

SceFloatVectorArg::~SceFloatVectorArg()
{
  free();
}


SceArg * SceFloatVectorArg::clone() const
{
  SceArg * newInst = new SceFloatVectorArg(*this);
  return newInst;
}

SceFloatVectorArg::SceFloatVectorArg(const SceFloatVectorArg& fv):
   SceVectorArg (fv)
{
   type_ = ARG_FLOATSTAR;
   free();
   copy(fv.fv_);
}

SceFloatVectorArg &  SceFloatVectorArg::operator= (const SceFloatVectorArg & fv)
{
  assert(type_ == fv.type_);
  free();
  copy(fv.fv_);
  return *this;
}

int  SceFloatVectorArg::operator== (const SceFloatVectorArg & fv)
{
  assert(fv_ && fv.fv_);
  assert(type_ == fv.type_);
   int i = 0; // Pulled out of the for below by RW2STL
   for (i = 0; i < length_; i++)
     {
       if (fv_[i] != fv.fv_[i])
         return 0;
     }
   return 1;
}

void SceFloatVectorArg::copy(const float* fv)
{
  if (fv)
    {
      free();
      fv_ = new float[length_];
      assert(fv_);
      int i = 0; // Pulled out of the for below by RW2STL
      for (i=0; i < length_; i++)
        {
          fv_[i] = fv[i];
        }
    }
}

void SceFloatVectorArg::free()
{
  if (fv_)
    delete [] fv_;
  fv_ = 0;
}


//---------------------------------------------------------------------------
// Implementation of SceMakeVec functions.
//---------------------------------------------------------------------------

SceIntVectorArg SceMakeVec (const int * theIntVector, int length)
   {
   return SceIntVectorArg (theIntVector, length);
   }

SceFloatVectorArg SceMakeVec (const float * theFloatVector, int length)
   {
   return SceFloatVectorArg (theFloatVector, length);
   }


//---------------------------------------------------------------------------
//
// SceArgList Implementation
//
//---------------------------------------------------------------------------

// Default constructor
SceArgList::SceArgList():
   list_ (* new SceArgPtrVector (10))
{
  assert(&list_);
}

SceArgList::SceArgList(const SceArgList& al):list_ (* new SceArgPtrVector (10))
{
  copy(al.list_);
}


// Destructor
SceArgList::~SceArgList()
{
  free();
}


// operator[]
const SceArg &
SceArgList::operator[]( size_t i )
const
{
  return * (list_[i-1]);
}

size_t SceArgList::length () const
   {
   return list_.size ();
   }

// operator<<

SceArgList& SceArgList::operator<<(const SceArg & arg)
{
  SceArg * a = arg.clone();
  assert(a);
  list_.push_back(a);
  return *this;
}

SceArgList& SceArgList::operator<<(int i)
{
  return (*this) << SceIntArg(i);
}

SceArgList& SceArgList::operator<<(float f)
{
  return (*this) << SceFloatArg(f);
}

SceArgList& SceArgList::operator<<(const char * string)
{
  return (*this) << SceStringArg(string);
  
}

SceArgList & SceArgList::operator= (const SceArgList & al)
{
  free();
  list_ = * new SceArgPtrVector(10);
  copy(al.list_);
  return *this;
}

int SceArgList::operator == (const SceArgList& al)
{
  if (this && &al)
    {
      if (length() == al.length())
        {
          int i = 0; // Pulled out of the for below by RW2STL
          for (i = 0; i < length(); i++)
            {
              if (list_[i] == al.list_[i])
                continue;
              else
                return 0;            
            }
          return 1;
        }
    }
  return 0;
}

void SceArgList::copy(SceArgPtrVector& av)
{   

  assert(&list_);
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<av.size(); i++ )
    {
      SceArg* pa = av[i] -> clone();
      assert(pa);
      list_.push_back(pa);
    }
}

void SceArgList::free()

{
  if (&list_)
   {
      size_t i = 0; // Pulled out of the for below by RW2STL
      for ( i=0; i<list_.size(); i++ )
        {
          if (list_[i] != 0)
            delete list_[i];
        }

      delete &list_;
   }
}


@


1.1
log
@Initial revision
@
text
@d1 5
d27 1
a27 3
#include <rw/cstring.h>
#include <rw/gordvec.h>
#include <iostream.h>
d37 4
a40 1
typedef SceArg * SceArgPtr;
d42 3
a44 2
declare   (RWGVector,        SceArgPtr)
declare   (RWGOrderedVector, SceArgPtr)
a45 2
implement (RWGVector,        SceArgPtr)
implement (RWGOrderedVector, SceArgPtr)
d58 1
d76 1
a76 1

d279 1
a279 1
  s_ = NULL;
d330 1
a330 1
  iv_(NULL)
d377 2
a378 1
   for (int i = 0; i < length_; i++)
d393 2
a394 1
      for (int i=0; i < length_; i++)
d406 1
a406 1
  iv_ = NULL;
d417 1
a417 1
   fv_(NULL)
d464 2
a465 1
   for (int i = 0; i < length_; i++)
d480 2
a481 1
      for (int i=0; i < length_; i++)
d492 1
a492 1
  fv_ = NULL;
d547 1
a547 1
   return list_.entries ();
d556 1
a556 1
  list_.insert(a);
d590 2
a591 1
          for (int i = 0; i < length(); i++)
d608 2
a609 1
  for ( size_t i=0; i<av.entries(); i++ )
d613 1
a613 1
      list_.insert(pa);
d622 2
a623 1
      for ( size_t i=0; i<list_.entries(); i++ )
d625 1
a625 1
          if (list_[i] != NULL)
@


1.1.1.1
log
@Import sce
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 5

// RW2STL - inserted:
#include <ostream.h>
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL - inserted includes.
d22 2
d34 1
a34 4
// RW2STL - declare   (RWGVector,        SceArgPtr)

// RW2STL - declare   (RWGOrderedVector, SceArgPtr)

d36 2
a37 3
// RW2STL - implement (RWGVector,        SceArgPtr)

// RW2STL - implement (RWGOrderedVector, SceArgPtr)
d39 2
a52 1
/*
d70 1
a70 1
*/
d273 1
a273 1
  s_ = 0;
d324 1
a324 1
  iv_(0)
d371 1
a371 2
   int i = 0; // Pulled out of the for below by RW2STL
   for (i = 0; i < length_; i++)
d386 1
a386 2
      int i = 0; // Pulled out of the for below by RW2STL
      for (i=0; i < length_; i++)
d398 1
a398 1
  iv_ = 0;
d409 1
a409 1
   fv_(0)
d456 1
a456 2
   int i = 0; // Pulled out of the for below by RW2STL
   for (i = 0; i < length_; i++)
d471 1
a471 2
      int i = 0; // Pulled out of the for below by RW2STL
      for (i=0; i < length_; i++)
d482 1
a482 1
  fv_ = 0;
d537 1
a537 1
   return list_.size ();
d546 1
a546 1
  list_.push_back(a);
d580 1
a580 2
          int i = 0; // Pulled out of the for below by RW2STL
          for (i = 0; i < length(); i++)
d597 1
a597 2
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<av.size(); i++ )
d601 1
a601 1
      list_.push_back(pa);
d610 1
a610 2
      size_t i = 0; // Pulled out of the for below by RW2STL
      for ( i=0; i<list_.size(); i++ )
d612 1
a612 1
          if (list_[i] != 0)
@


1.1.1.1.14.2
log
@Went all the way to std::cout
@
text
@d3 1
a3 1
#include <ostream>
d27 1
a27 1
#include <iostream>
@


