head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_20_20051222:1.2
	sce_4_10_30050426:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.58;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.18.36.54;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.54;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.43.19;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef ScheduleFactoryForSce_H
#define ScheduleFactoryForSce_H

#include <scenario/src/schFctry.h>

class LgFrScheduleFactoryForSce: public LgFrScheduleFactory
{
public:

  // Create a new sorting part schedule
  virtual LgFrSortingPartScheduleFloatSmartPointer
    newPartScheduleFromScratch(const LgFrScheduleDescriptor& desc,
		      const bool deepCopy = true,
		      const bool toPopulate = true
		      ) const;

  // Create a new sorting demand schedule
  virtual LgFrSortingDemandScheduleFloatSmartPointer
    newDemandScheduleFromScratch(const LgFrScheduleDescriptor& desc,
		      const bool deepCopy = true,
		      const bool toPopulate = true
		      ) const;

  // Create a copy of the *this on the heap and return a pointer to it.
  virtual
    LgFrScheduleFactory*
      clone (LgFrScenarioSmartPointer)
       const;
  
  // Constructor
  LgFrScheduleFactoryForSce(LgFrScenarioSmartPointer);
   
  // Destructor
  virtual
    ~LgFrScheduleFactoryForSce ();

  // test this class
  static void test();
  static void contextTest(const LgFrScheduleFactory & f);
  

// ---------------------------------------------------------------------
//  PROTECTED MEMBERS
// --------------------------------------------------------------------- 
protected:
  // Return the schedule type: INPUT or OUTPUT 
  virtual schdType
    scheduleType(const LgFrScheduleDescriptor& desc,
		 const LgFrAttributeScheduleStrategy & ass) const;

// ---------------------------------------------------------------------
//  PRIVATE MEMBERS
// --------------------------------------------------------------------- 
private:

  // Assignment operator (not allowed, use clone(LgFrScenarioSmartPointer) instead)
  LgFrScheduleFactoryForSce &
    operator=(const LgFrScheduleFactoryForSce& rhs);

  // Copy constructor (not allowed, use clone(LgFrScenarioSmartPointer) instead)
  LgFrScheduleFactoryForSce (const LgFrScheduleFactoryForSce &);

};
#endif


@


1.1
log
@Initial revision
@
text
@a3 1
#include <rw/cstring.h>
d13 2
a14 2
		      const RWBoolean deepCopy = TRUE,
		      const RWBoolean toPopulate = TRUE
d20 2
a21 2
		      const RWBoolean deepCopy = TRUE,
		      const RWBoolean toPopulate = TRUE
a36 5
  // hash table initializer
  virtual
  void
  initHashTable ();
  
@


1.1.1.1
log
@Import sce
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d4 1
d14 2
a15 2
		      const bool deepCopy = true,
		      const bool toPopulate = true
d21 2
a22 2
		      const bool deepCopy = true,
		      const bool toPopulate = true
d38 5
@

