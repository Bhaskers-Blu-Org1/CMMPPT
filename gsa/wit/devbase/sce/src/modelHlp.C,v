head	1.5;
access;
symbols
	sce_5_01_20080919:1.5
	latest_sce_4_20_20060523:1.4.0.4
	sce_4_20_20060523:1.4
	latest_sce4_20_OSL:1.4.0.2
	sce_4_20_OSL:1.4
	sce_4_20_20051222:1.4
	sce_4_10_30050426:1.3
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.3
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.2.0.2
	Root-of-EndRw:1.2
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2006.08.09.16.32.17;	author ervolina;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.09.18.32.47;	author ervolina;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.15.19.36.56;	author rwToStl;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.26.14.25.32;	author fasano;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2000.02.25.18.36.52;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.52;	author wit;	state Exp;
branches;
next	;

1.2.2.1
date	2003.01.08.17.43.16;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.5
log
@initial changes for sce4.40
@
text
@ // file: modelHlp.C  (model helper)
// author: robin

#include <stdlib.h>
#include <assert.h>
#include <mcl/src/mcl.h>
#include <scenario/src/machdep.h>
#include <sce/src/sceDefin.h>
#include <sce/src/modelHlp.h>

#ifndef ELIMINATE_OLD_MAIN

// default constructor:
LgFrSceHeurModelHelper::LgFrSceHeurModelHelper()
// JP suggests a more elegant way to do this is to make
// the default constructor "private".
{
  // don't use the default constructor
  assert (1 == 0);
}


// fairly general constructor:
LgFrSceHeurModelHelper::LgFrSceHeurModelHelper( LgFrSceSetOfParameters & setOfParameters )
 :
  defaultPriority_(setOfParameters.getInt("defaultPriority")),
  defaultExplicitBopPreference_(setOfParameters.getFloat("defaultExplicitBopPreference")),
  defaultInterPlantBopPreference_(setOfParameters.getFloat("defaultInterPlantBopPreference")),
  defaultAggregateBopPreference_(setOfParameters.getFloat("defaultAggregateBopPreference")),
  defaultDefaultBopPreference_(setOfParameters.getFloat("defaultDefaultBopPreference")),
  defaultShipLateLimit_(setOfParameters.getInt("defaultShipLateLimit"))
{
    // all the work is done in initializer
}

// get the default priority
const
int
LgFrSceHeurModelHelper::defaultPriority () const
{
  return defaultPriority_;
}


// get default explicit Bop preference
const
float
LgFrSceHeurModelHelper::defaultExplicitBopPreference () const
{
  return defaultExplicitBopPreference_;
}

// get default aggregate Bop preference
const
float
LgFrSceHeurModelHelper::defaultAggregateBopPreference () const
{
  return defaultAggregateBopPreference_;
}


// get default interplant Bop preference
const
float
LgFrSceHeurModelHelper::defaultInterPlantBopPreference () const
{
  return defaultInterPlantBopPreference_;
}


// get default Default Bop preference
const
float
LgFrSceHeurModelHelper::defaultDefaultBopPreference () const
{
  return defaultDefaultBopPreference_;
}

// get default ship late limit
const
int
LgFrSceHeurModelHelper::defaultShipLateLimit () const
{
  return defaultShipLateLimit_;
}

// Return a copy in the heap
LgFrSceHeurModelHelper*
LgFrSceHeurModelHelper::clone()
     const
{
  return new LgFrSceHeurModelHelper(*this);
}



 // copy constructor
LgFrSceHeurModelHelper::LgFrSceHeurModelHelper(const LgFrSceHeurModelHelper& source)
  :
  defaultPriority_(source.defaultPriority_),
  defaultExplicitBopPreference_(source.defaultExplicitBopPreference_),
  defaultInterPlantBopPreference_(source.defaultInterPlantBopPreference_),
  defaultAggregateBopPreference_(source.defaultAggregateBopPreference_),
  defaultDefaultBopPreference_(source.defaultDefaultBopPreference_),
  defaultShipLateLimit_(source.defaultShipLateLimit_)
{
  // nothing to do
}

// assignment operator
LgFrSceHeurModelHelper&
LgFrSceHeurModelHelper::operator=(const LgFrSceHeurModelHelper& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
    defaultPriority_ = rhs.defaultPriority_;
    defaultExplicitBopPreference_ = rhs.defaultExplicitBopPreference_;
    defaultInterPlantBopPreference_ = rhs.defaultInterPlantBopPreference_;
    defaultAggregateBopPreference_ = rhs.defaultAggregateBopPreference_;
    defaultDefaultBopPreference_= rhs.defaultDefaultBopPreference_;
    defaultShipLateLimit_= rhs.defaultShipLateLimit_;
    
  }
  return *this;
}

// destructor
LgFrSceHeurModelHelper::~LgFrSceHeurModelHelper()
{
  // nothing to do
}


#ifdef NDEBUG
#undef NDEBUG
#endif



// self-test
void
LgFrSceHeurModelHelper::test()
{
  // do nothing, for now 
 }

// ----------------------------------------------------------------------

// default constructor:
LgFrSceLpModelHelper::LgFrSceLpModelHelper()

{
  // don't use the default constructor
  assert (1 == 0); 
}


// fairly general constructor:
LgFrSceLpModelHelper::LgFrSceLpModelHelper( LgFrSceSetOfParameters & setOfParameters)
:
  defaultObj1ShipReward_(setOfParameters.getFloat("defaultObj1ShipReward")),
  periodicInterestRate_(setOfParameters.getFloat("periodicInterestRate")), 
  obj1DefaultStockCostRealParts_(setOfParameters.getFloat("obj1DefaultStockCostRealParts")), 
  defaultObj1ProdCostRealParts_(setOfParameters.getFloat("defaultObj1ProdCostRealParts")), 
  obj1ProdCostDiscRateRealParts_(setOfParameters.getFloat("obj1ProdCostDiscRateRealParts")), 
  defaultObj1ExecCostRealOperations_(setOfParameters.getFloat("defaultObj1ExecCostRealOperations")), 
  obj1ExecCostDiscRateRealOperations_(setOfParameters.getFloat("obj1ExecCostDiscRateRealOperations")),
  optionRatioSupplyStockPenalty_(setOfParameters.getFloat("optionRatioSupplyStockPenalty")),
  defaultOptionShipReward_(setOfParameters.getFloat("defaultOptionShipReward")), 
  featureSetStockPenalty_(setOfParameters.getFloat("featureSetStockPenalty")), 
  featureSetScrapPenalty_(setOfParameters.getFloat("featureSetScrapPenalty")), 
  defaultSubPenalty_(setOfParameters.getFloat("defaultSubPenalty"))
{
    // all the work is done in initializer
}


// get default obj1 ship reward
const
float
LgFrSceLpModelHelper::defaultObj1ShipReward () const
{
  return defaultObj1ShipReward_;
}


// get default period interest rate 
const
float
LgFrSceLpModelHelper::periodicInterestRate () const
{
  return periodicInterestRate_;
}

// get default stock cost real parts 
const
float
LgFrSceLpModelHelper::obj1DefaultStockCostRealParts () const
{
  return obj1DefaultStockCostRealParts_;
}

// get default obj1 prod cost for real parts
const
float
LgFrSceLpModelHelper::defaultObj1ProdCostRealParts () const
{
  return defaultObj1ProdCostRealParts_;
}


// get default obj1 prod cost discount rate for real parts
const
float
LgFrSceLpModelHelper::obj1ProdCostDiscRateRealParts () const
{
  return obj1ProdCostDiscRateRealParts_;
}

// get default obj1 execution cost 
// for "real" operations
const
float
LgFrSceLpModelHelper::defaultObj1ExecCostRealOperations () const
{
  return defaultObj1ExecCostRealOperations_;
}

// get default obj1 execution cost discount rate
// for "real" operations
const
float
LgFrSceLpModelHelper::obj1ExecCostDiscRateRealOperations () const
{
  return obj1ExecCostDiscRateRealOperations_;
}

// get default option ratio supply stock penalty
const
float
LgFrSceLpModelHelper::optionRatioSupplyStockPenalty () const
{
  return optionRatioSupplyStockPenalty_;
}

// get default option ship reward
const
float
LgFrSceLpModelHelper::defaultOptionShipReward() const
{
  return defaultOptionShipReward_;
}

// get default feature set stock penalty
const
float
LgFrSceLpModelHelper::featureSetStockPenalty() const
{
  return featureSetStockPenalty_;
}

// get default feature set scrap penalty
const
float
LgFrSceLpModelHelper::featureSetScrapPenalty() const
{
  return featureSetScrapPenalty_;
}

// get default sub penalty set scrap penalty
const
float
LgFrSceLpModelHelper::defaultSubPenalty() const
{
  return defaultSubPenalty_;
}


// Return a copy in the heap
LgFrSceLpModelHelper*
LgFrSceLpModelHelper::clone()
     const
{
  return new LgFrSceLpModelHelper(*this);
}

// copy constructor
LgFrSceLpModelHelper::LgFrSceLpModelHelper(const LgFrSceLpModelHelper& source)
:
  defaultObj1ShipReward_(source.defaultObj1ShipReward_),
  periodicInterestRate_(source.periodicInterestRate_), 
  obj1DefaultStockCostRealParts_(source.obj1DefaultStockCostRealParts_), 
  defaultObj1ProdCostRealParts_(source.defaultObj1ProdCostRealParts_), 
  obj1ProdCostDiscRateRealParts_(source.obj1ProdCostDiscRateRealParts_), 
  defaultObj1ExecCostRealOperations_(source.defaultObj1ExecCostRealOperations_), 
  obj1ExecCostDiscRateRealOperations_(source.obj1ExecCostDiscRateRealOperations_),
  optionRatioSupplyStockPenalty_(source.optionRatioSupplyStockPenalty_),
  defaultOptionShipReward_(source.defaultOptionShipReward_), 
  featureSetStockPenalty_(source.featureSetStockPenalty_), 
  featureSetScrapPenalty_(source.featureSetScrapPenalty_), 
  defaultSubPenalty_(source.defaultSubPenalty_)

{
  // nothing to do
}

// assignment operator
LgFrSceLpModelHelper&
LgFrSceLpModelHelper::operator=(const LgFrSceLpModelHelper& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
    defaultObj1ShipReward_ = rhs.defaultObj1ShipReward_;
    periodicInterestRate_ = rhs.periodicInterestRate_;
    obj1DefaultStockCostRealParts_ = rhs.obj1DefaultStockCostRealParts_;
    defaultObj1ProdCostRealParts_ = rhs.defaultObj1ProdCostRealParts_;
    obj1ProdCostDiscRateRealParts_ = rhs.obj1ProdCostDiscRateRealParts_;
    defaultObj1ExecCostRealOperations_= rhs.defaultObj1ExecCostRealOperations_;
    obj1ExecCostDiscRateRealOperations_= rhs.obj1ExecCostDiscRateRealOperations_;
    optionRatioSupplyStockPenalty_ = rhs.optionRatioSupplyStockPenalty_;
    defaultOptionShipReward_ = rhs.defaultOptionShipReward_;
    featureSetStockPenalty_ = rhs.featureSetStockPenalty_;
    featureSetScrapPenalty_ = rhs.featureSetScrapPenalty_; 
    defaultSubPenalty_ = rhs.defaultSubPenalty_;
  }
  return *this;
}

// destructor
LgFrSceLpModelHelper::~LgFrSceLpModelHelper()
{
  // nothing to do
}


#ifdef NDEBUG
#undef NDEBUG
#endif



// self-test
void
LgFrSceLpModelHelper::test()
{
  // do nothing, for now 
 }



#endif

@


1.4
log
@removed the "binning" stuff which is now obsolete
@
text
@d162 1
d194 7
d291 1
d313 1
@


1.3
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@a28 3
#ifdef BINNING_OPERATION_TEMP_SOLUTION
  defaultBinBopPreference_(setOfParameters.getFloat("defaultBinBopPreference")),
#endif
a69 10
#ifdef BINNING_OPERATION_TEMP_SOLUTION
// get default bin Bop preference
const
float
LgFrSceHeurModelHelper::defaultBinBopPreference () const
{
  return defaultBinBopPreference_;
}
#endif

a102 3
#ifdef BINNING_OPERATION_TEMP_SOLUTION
  defaultBinBopPreference_(source.defaultBinBopPreference_),
#endif
a117 3
#ifdef BINNING_OPERATION_TEMP_SOLUTION
    defaultBinBopPreference_ = rhs.defaultBinBopPreference_;
#endif
@


1.2
log
@Added include of mcl/src/mcl.h near top of include list to avoid
compile time problems on AIX which did not occur on Windows.

added
  implement(RWGVector, float)
  implement(RWGVector, int)
to ipSce.C to avoid unresolved symbols at link time
@
text
@a8 3
#include <rw/rstream.h>
#include <rw/cstring.h>
#include <rw/ctoken.h>
@


1.2.2.1
log
@Roguewave is gone
@
text
@d9 3
@


1.1
log
@Initial revision
@
text
@d6 1
@


1.1.1.1
log
@Import sce
@
text
@@
