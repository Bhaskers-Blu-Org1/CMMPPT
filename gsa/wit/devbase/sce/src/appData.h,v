head	1.10;
access;
symbols
	sce_5_01_20080919:1.8
	latest_sce_4_20_20060523:1.7.0.4
	sce_4_20_20060523:1.7
	latest_sce4_20_OSL:1.7.0.2
	sce_4_20_OSL:1.7
	sce_4_20_20051222:1.7
	sce_4_10_30050426:1.4
	sce_4_05_20040511:1.4
	sce_4_00_20040201:1.3
	nextGenBranch:1.3.0.8
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.3.0.6
	Root-of-EndRw:1.3
	EndWitRw-branch:1.3.0.4
	Root-of-EndWitRw:1.3
	RwToStl-branch:1.3.0.2
	Root-of-RwToStl:1.3
	latest_sce_3_10_20010924:1.2.0.4
	sce_3_10_20010924:1.2
	latest_sce_3_00_20010601:1.2.0.2
	sce_3_00_20010601:1.2
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2009.12.08.13.58.34;	author ervolina;	state Exp;
branches;
next	1.9;

1.9
date	2009.09.09.15.41.56;	author ervolina;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.26.15.23.30;	author ervolina;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.09.18.32.46;	author ervolina;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.02.18.40.00;	author ervolina;	state Exp;
branches;
next	1.5;

1.5
date	2005.08.10.22.44.52;	author ervolina;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.02.04.22.50;	author ervolina;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.08.17.37.43;	author ervolina;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.12.15.07.28;	author ervolina;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.18.36.48;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.48;	author wit;	state Exp;
branches
	1.1.1.1.4.1;
next	;

1.1.1.1.4.1
date	2001.03.12.16.36.16;	author scelib;	state Exp;
branches;
next	;


desc
@@


1.10
log
@more fixes for 6.1
@
text
@// file: appData.h
// author: tom

// appData objects for:
//    parts
//    subBomEntries


#ifndef  LGFRSCEAPPDATA_H
#define  LGFRSCEAPPDATA_H

#include <stdlib.h>
#include <sce/src/sceDefin.h>
#include <scenario/src/timeVecs.h>
#include <sce/src/baseAppData.h>
#include <assert.h>

class LgFrScePartAppData  :
    public LgFrSceAppData
{
public:

virtual
LgFrSceAppData *
clone()
  const;




// get isPartPcf
int
isPartPcf() const;

// set Part as Pcf
void
isPartPcf(int isPartPcf);

#ifdef MARK_BOGONS
// get isPartBogon
int
isPartBogon () const;

// set Part as Bogon
void
isPartBogon (int isPartBogon);
#endif


// get unConstrainedStartPeriod
size_t
unConstrainedStartPeriod() const;


// set unConstrainedStartPeriod
void
unConstrainedStartPeriod(size_t unConstrainedStartPeriod);

// nInterplantOps (number of UNIQUE interplant operations that produce this part)
// get
int
nInterplantOps();
  


// set
void
nInterplantOps(int nOps);

// nAlternatePartOps (number of UNIQUE alternatePart operations that produce this part)
// get
int
nAlternatePartOps();



// set
void
nAlternatePartOps(int nOps);


// nUserDefinedOps (number of UNIQUE user-defined operations that produce this part)
// get
int
nUserDefinedOps();
  
// set
void
nUserDefinedOps(int nOps);

// nAggregationOps (number of UNIQUE aggregation operations that produce this part)
// get
int
nAggregationOps();
  
// set
void
nAggregationOps(int nOps);

// index for index'ing into witGetParts partList
void
index(int index);

int
index();
  
// get maxWithout (only meaningful for special Feature parts)
const
LgFrTimeVecFloat &
maxWithout() const;

// set maxWithout (only meaningful for special Feature parts)
void
maxWithout(const LgFrTimeVecFloat &  maxWithout);



// get doesPartHaveNegativeDemands
int
doesPartHaveNegativeDemands() const;

// set doesPartHaveNegativeDemands
void
doesPartHaveNegativeDemands(int doesPartHaveNegativeDemands);

// get vac
const
LgFrTimeVecFloat &
vac() const;

// set vac
void
vac(const LgFrTimeVecFloat &  vac);


// get compCost
const
LgFrTimeVecFloat &
compCost() const;

// set compCost
void
compCost(const LgFrTimeVecFloat &  compCost);


// get sourceCode
const 
std::string & 
sourceCode() const;

// set sourceCode
void
sourceCode(const std::string &  sourceCode);


// get cycleTimeDays 
const
LgFrTimeVecFloat &
cycleTimeDays() const;

// set cycleTimeDays
void
cycleTimeDays(const LgFrTimeVecFloat &  cycleTimeDays);

// get cycleTime
const
LgFrTimeVecFloat &
cycleTime() const;

// set cycleTime
void
cycleTime(const LgFrTimeVecFloat &  cycleTime);

  
// default constructor.
LgFrScePartAppData(); 


// best constructor
  LgFrScePartAppData(int isPartPcf, size_t unConstrainedStartPeriod, int nPeriods);


// copy constructor
LgFrScePartAppData(const LgFrScePartAppData& source);

// assignment operator
LgFrScePartAppData&
operator=(const LgFrScePartAppData& rhs);

// destructor
virtual
~LgFrScePartAppData();

// self-test
static void test();
  
  
private:


// better constructor
LgFrScePartAppData(int isPartPcf, size_t unConstrainedStartPeriod);




  int isPartPcf_;
#ifdef MARK_BOGONS
  int isPartBogon_;
#endif
  size_t unConstrainedStartPeriod_;
  int nInterplantOps_;
  int nAlternatePartOps_;
  int nUserDefinedOps_;
  int nAggregationOps_;
  int index_;
  LgFrTimeVecFloat maxWithout_;
  int doesPartHaveNegativeDemands_;
  LgFrTimeVecFloat vac_;  
  LgFrTimeVecFloat compCost_;  
  std::string sourceCode_; 
  LgFrTimeVecFloat cycleTimeDays_;
  LgFrTimeVecFloat cycleTime_;
};




// ------------------------------------------------------------------
class LgFrSceCCOperationAppData  :
    public LgFrSceAppData
{
public:

virtual
LgFrSceAppData *
clone()
  const;



// index for index'ing into witGetOperations opList
void
index(int index);

int
index();
  

  
  
// default constructor.
LgFrSceCCOperationAppData(); 

// better constructor
LgFrSceCCOperationAppData(int index);


// copy constructor
LgFrSceCCOperationAppData(const LgFrSceCCOperationAppData& source);

// assignment operator
LgFrSceCCOperationAppData&
operator=(const LgFrSceCCOperationAppData& rhs);

// destructor
virtual
~LgFrSceCCOperationAppData();

// self-test
static void test();
  
  
private:
  int index_;
};





//--------------------------------------------------------------------
class LgFrSceSubBomAppData :
    public LgFrSceAppData
{
public:

  virtual
  LgFrSceAppData *
  clone()
    const;

  // default constructor. Don't use.
  LgFrSceSubBomAppData (); 

  // better constructor
  LgFrSceSubBomAppData (float defaultPreference, int isOptExplodableFlag);

  // get "preference"
  const
  float
  preference () const ;
  
  // set "preference"
  void
  preference (const float pref);

  // get "isOptExplodableFlag"
  const
  int
  isObjectInEffectForOptExplosion () const ;
  
  // set "isOptExplodableFlag"
  void
  isObjectInEffectForOptExplosion (const int isOptExplodableFlag);

  
  // copy constructor
  LgFrSceSubBomAppData(const LgFrSceSubBomAppData& source);

  // assignment operator
  LgFrSceSubBomAppData&
  operator=(const LgFrSceSubBomAppData& rhs);

  // destructor
  virtual
  ~LgFrSceSubBomAppData();

  // self-test
  static void test();
  
private:
  // The preference on the sub-bom is used to determine
  // which sub-bom entry to explode in witMrp and the hueristic.
 
  // The sub-bom entry corresponding to the
  // "regular" build has preference 0.0
  // The lower the preferences (negatives are ok), the more important. 
  // With the lp, the "preference" is interpreted as a cost.
  // Default = 0.0
  float preference_ ;
  int isObjectInEffectForOptExplosion_;
};

// --------------------------------------------------------------------
//--------------------------------------------------------------------
class LgFrSceCustChoiceBomAppData :
    public LgFrSceAppData
{
public:

  virtual
  LgFrSceAppData *
  clone()
    const;

  // default constructor. Don't use.
  LgFrSceCustChoiceBomAppData (); 

  // even better constructor
  LgFrSceCustChoiceBomAppData (LgFrTimeVecFloat & featRatio);


  // get the feature ratio
  const
  LgFrTimeVecFloat&
  featRatio() const;

  // set  the feature ratio
  void
  featRatio (const LgFrTimeVecFloat & featRatio);

  // get the dummySupplyVolForMrpAdjustment
  const
  LgFrTimeVecFloat&
  dummySupplyVolForMrpAdjustment() const;

  // set  the dummySupplyVolForMrpAdjustment
  void
  dummySupplyVolForMrpAdjustment(const LgFrTimeVecFloat & dummySupplyVolForMrpAdjustment);


  // copy constructor
  LgFrSceCustChoiceBomAppData(const LgFrSceCustChoiceBomAppData& source);

  // assignment operator
  LgFrSceCustChoiceBomAppData&
  operator=(const LgFrSceCustChoiceBomAppData& rhs);

  // destructor
  virtual
  ~LgFrSceCustChoiceBomAppData();
  
private:
  LgFrTimeVecFloat featRatio_;
  LgFrTimeVecFloat dummySupplyVolForMrpAdjustment_;
};


//--------------------------------------------------------------------
class LgFrSceInterplantOpAppData :
    public LgFrSceAppData

{
public:

  virtual
    LgFrSceAppData *
    clone()
    const;

  // default constructor. Don't use.
  LgFrSceInterplantOpAppData (); 

  // even better constructor
  LgFrSceInterplantOpAppData (LgFrTimeVecFloat mrpExecVol);


  // get "mrp jumper arc adjusted exec vols"
  const
  LgFrTimeVecFloat&
  mrpExecVol () const ;

  // get "jumper arc adjusted exec vols"
  const
  LgFrTimeVecFloat&
  execVol () const ;
  
  
  // set  "mrp jumper arc adjusted exec vols"
  void
  mrpExecVol (const LgFrTimeVecFloat & mrpExecVol);

  // set  " jumper arc adjusted exec vols"
  void
  execVol (const LgFrTimeVecFloat & execVol);

  // copy constructor
  LgFrSceInterplantOpAppData(const LgFrSceInterplantOpAppData& source);

  // assignment operator
  LgFrSceInterplantOpAppData&
  operator=(const LgFrSceInterplantOpAppData& rhs);

  // destructor
  virtual
  ~LgFrSceInterplantOpAppData();
  
private:
  LgFrTimeVecFloat mrpExecVol_ ;
  LgFrTimeVecFloat execVol_ ;
  
};




#endif





@


1.9
log
@intermediate commit towards implementation of Partial Periods and removal of wit34Compatible needs.  This code set is work in progress.
@
text
@d178 3
a180 2
// better constructor
LgFrScePartAppData(int isPartPcf, size_t unConstrainedStartPeriod);
d199 8
@


1.8
log
@Preliminary commit for SCE 5.00
@
text
@d155 19
d213 2
@


1.7
log
@removed the "binning" stuff which is now obsolete
@
text
@d145 10
a154 1
  
d193 1
@


1.6
log
@First pass at sce 4.20 function.
@
text
@a99 13
#ifdef BINNING_OPERATION_TEMP_SOLUTION
// nBinOps (number of UNIQUE bin operations that produce this part)
// get
int
nBinOps();
  
// set
void
nBinOps(int nOps);

#endif
  

a178 3
#ifdef BINNING_OPERATION_TEMP_SOLUTION
  int nBinOps_;
#endif
a415 55
#ifdef BINNING_OPERATION_TEMP_SOLUTION
//--------------------------------------------------------------------
class LgFrSceBinOpAppData :
    public LgFrSceAppData
{
public:

  virtual
  LgFrSceAppData *
  clone()
    const;

  // default constructor. Don't use.
  LgFrSceBinOpAppData (); 

  // even better constructor
  LgFrSceBinOpAppData (LgFrTimeVecFloat mrpExecVol);


  // get "mrp jumper arc adjusted exec vols"
  const
  LgFrTimeVecFloat&
  mrpExecVol () const ;

  // get "jumper arc adjusted exec vols"
  const
  LgFrTimeVecFloat&
  execVol () const ;
  
  
  // set  "mrp jumper arc adjusted exec vols"
  void
  mrpExecVol (const LgFrTimeVecFloat & mrpExecVol);

  // set  " jumper arc adjusted exec vols"
  void
  execVol (const LgFrTimeVecFloat & execVol);

  // copy constructor
  LgFrSceBinOpAppData(const LgFrSceBinOpAppData& source);

  // assignment operator
  LgFrSceBinOpAppData&
  operator=(const LgFrSceBinOpAppData& rhs);

  // destructor
  virtual
  ~LgFrSceBinOpAppData();
  
private:
  LgFrTimeVecFloat mrpExecVol_ ;
  LgFrTimeVecFloat execVol_ ;
  
};
#endif 
@


1.5
log
@4.20 commit: global subs, prioritized explode
@
text
@d15 1
d18 2
a19 1
class LgFrScePartAppData
d23 8
d206 2
a207 1
class LgFrSceCCOperationAppData
d211 6
d259 2
a260 1
class LgFrSceSubBomAppData
d263 6
d323 2
a324 1
class LgFrSceCustChoiceBomAppData
d327 6
d377 3
a379 1
class LgFrSceInterplantOpAppData
d382 6
d434 2
a435 1
class LgFrSceBinOpAppData
d438 6
@


1.4
log
@added vac calculation
@
text
@d54 2
d60 12
d179 1
@


1.3
log
@bogon output, and minor changes
@
text
@d105 2
d115 19
d173 2
a174 1
  
@


1.2
log
@Fixed memory bug in Customer Choice Feature logic
@
text
@d29 10
d139 3
@


1.1
log
@Initial revision
@
text
@d142 49
@


1.1.1.1
log
@Import sce
@
text
@@


1.1.1.1.4.1
log
@Customer Choice bug fix and memory leak patch.
@
text
@a141 49



// ------------------------------------------------------------------
class LgFrSceCCOperationAppData
{
public:


// index for index'ing into witGetOperations opList
void
index(int index);

int
index();
  

  
  
// default constructor.
LgFrSceCCOperationAppData(); 

// better constructor
LgFrSceCCOperationAppData(int index);


// copy constructor
LgFrSceCCOperationAppData(const LgFrSceCCOperationAppData& source);

// assignment operator
LgFrSceCCOperationAppData&
operator=(const LgFrSceCCOperationAppData& rhs);

// destructor
virtual
~LgFrSceCCOperationAppData();

// self-test
static void test();
  
  
private:
  int index_;
};





@

