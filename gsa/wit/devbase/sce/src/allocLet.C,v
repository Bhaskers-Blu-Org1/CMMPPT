head	1.6;
access;
symbols
	sce_5_01_20080919:1.6
	latest_sce_4_20_20060523:1.4.0.4
	sce_4_20_20060523:1.4
	latest_sce4_20_OSL:1.4.0.2
	sce_4_20_OSL:1.4
	sce_4_20_20051222:1.4
	sce_4_10_30050426:1.4
	sce_4_05_20040511:1.4
	sce_4_00_20040201:1.3
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.2.0.2
	Root-of-EndRw:1.2
	EndWitRw-branch:1.1.0.8
	Root-of-EndWitRw:1.1
	RwToStl-branch:1.1.0.6
	Root-of-RwToStl:1.1
	latest_sce_3_10_20010924:1.1.0.4
	sce_3_10_20010924:1.1
	latest_sce_3_00_20010601:1.1.0.2
	sce_3_00_20010601:1.1;
locks; strict;
comment	@ * @;


1.6
date	2008.04.24.14.04.41;	author ervolina;	state Exp;
branches;
next	1.5;

1.5
date	2008.03.14.20.19.39;	author ervolina;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.09.14.37.30;	author ervolina;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.15.19.36.54;	author rwToStl;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.26.14.25.29;	author fasano;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2001.06.01.16.53.54;	author ervolina;	state Exp;
branches;
next	;

1.2.2.1
date	2003.01.08.17.43.13;	author rwToStl;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2003.01.09.13.14.34;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.6
log
@sce5 beta with prioriity manager, multiattribute demand, and dated records
@
text
@
// RW2STL - inserted:
#include <string>
#include <iostream>
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL - inserted includes.
#include <stdio.h>
#include <mcl/src/mcl.h>
#include <stdlib.h>
#include <assert.h>
#include <sce/src/allocLet.h>
#include <sce/src/mPlantH.h>
#include <wit/src/wit.h>



  // set/get  qtyDemand Amount
void LgFrSceAllocLet::qtyDemand(const float qty)  { qtyDemand_ = qty; }
float LgFrSceAllocLet::qtyDemand() const { return qtyDemand_; }


  // set/get  qtyShip Amount 
void LgFrSceAllocLet::qtyShip(const float qty) { qtyShip_ = qty; }
float LgFrSceAllocLet::qtyShip() const { return qtyShip_; }


  // set/get the  demandPd 
void LgFrSceAllocLet::demandPd(const int reqPd) { demandPd_ = reqPd; }
int LgFrSceAllocLet::demandPd() const { return demandPd_; }

  // set/get the  shipPd 
void LgFrSceAllocLet::shipPd(const int shipPd) { shipPd_ = shipPd; }
int LgFrSceAllocLet::shipPd() const { return shipPd_; }

  // set/get the priority 
void LgFrSceAllocLet::priority(const int prio) { priority_ = prio; }
int LgFrSceAllocLet::priority() const { return priority_; }

  // set/get the allocated flag
void LgFrSceAllocLet::allocated(int allocFlag) { allocated_ = allocFlag; }
int LgFrSceAllocLet::allocated() const { return allocated_; }


  // get partName and demandName as RWCStrings
std::string LgFrSceAllocLet::demandName() const { return demandName_; }
std::string LgFrSceAllocLet::partName() const { return partName_; }

  // set partName and DemandName (as char *)
void LgFrSceAllocLet::demandName(char * dName) { demandName_ = dName; }
void LgFrSceAllocLet::partName(char * pName) { partName_ = pName; }


  // set/get the dependent 
void LgFrSceAllocLet::backlogDependent(LgFrSceAllocLet * dependent) {backlogDependent_ = dependent;}
LgFrSceAllocLet * LgFrSceAllocLet::backlogDependent() {return backlogDependent_;}



// print the allocLet
void
LgFrSceAllocLet::print()
{
   std::cout << "\"" << partName_ << "\","
        << "\"" << demandName_ << "\","
        <<  priority_ << ","
        <<  demandPd_ << ","
        <<  shipPd_ << ","
        <<  qtyDemand_ << ","
        <<  qtyShip_ << ","
        <<  allocated_ << ","
        <<  shipLateLimit_ << "\n";
}

  // create a TRACE STRING
std::string
LgFrSceAllocLet::traceString()
{
  std::string ts;
  ts = "\"" 
    + partName_ + "\",\""
    + demandName_ + "\","
    + sce::stringFrom((long) priority_) + ","
    +  sce::stringFrom((long) demandPd_) + ","
    +  sce::stringFrom((long) shipPd_) + ","
    +  sce::stringFrom((float) qtyDemand_) + ","
    +  sce::stringFrom((float) qtyShip_) + ","
    +  sce::stringFrom((long) shipLateLimit_) + ","
    +  sce::stringFrom((long) allocated_) + "\n";

  return ts;
}


  // create a Human Readable TRACE STRING
std::string
LgFrSceAllocLet::hrTraceString(WitRun * const theWitRun, 
			       LgFrMultiPlantHelper * mpHelper, 
			       int equitCount)
{
  std::string ts;
  std::string p, g, f, pdf;
  std::string printPartName, printDemandName;
  
  if (mpHelper->isPartSpecialGeoPlannerDemandPart(theWitRun, partName_, p, g)) {
    printPartName = p;
    printDemandName = g;
  }
  else if (mpHelper->isPartSpecialCustChoiceFeature(theWitRun, partName_, g, p, pdf, f))   {
    printPartName = f + "->" + p ;
    printDemandName = g;
  }
  else if (mpHelper->isPartSpecialStandaloneFeature(theWitRun, partName_, g, p, pdf, f))   {
    printPartName = f + "->" + p ;
    printDemandName = g;
  }
  // in this case it's a normal part with normal demand (ie, direct independent demand)
  else {
    printPartName = partName_;
    printDemandName = demandName_;
  }
	   
    
    

  ts = sce::stringFrom((long) equitCount) + ",\""
    + printPartName + "\",\""
    + printDemandName + "\","
    + sce::stringFrom((long) (1000000000 - priority_)) + ","
    +  sce::stringFrom((long) demandPd_) + ","
    +  sce::stringFrom((long) shipPd_) + ","
    +  sce::stringFrom((double) qtyDemand_) + ","
    +  sce::stringFrom((double) qtyShip_) + ","
    +  sce::stringFrom((long) shipLateLimit_) + ","
    +  sce::stringFrom((long) allocated_) + "\n";
  
  return ts;
}



  // preferred constructor 
LgFrSceAllocLet::LgFrSceAllocLet(std::string & partName, 
			   std::string & demandName,
                           int    priority,
                           int    demandPd,
                           int    shipPd,       
                           float  qtyDemand,
	                   int    shipLateLimit)
: 
  partName_(partName),
  demandName_(demandName),
  priority_(priority),
  demandPd_(demandPd),
  shipPd_(shipPd),
  qtyDemand_(qtyDemand),
  qtyShip_(0.0),
  shipLateLimit_(shipLateLimit),
  allocated_(0),
  backlogDependent_(0)
  {
// FINISH_ME
  }


  // Construct from a Trace String
LgFrSceAllocLet::LgFrSceAllocLet(std::string & traceString)
:
  partName_(),
  demandName_(),
  priority_(0),
  demandPd_(0),
  shipPd_(0),
  qtyDemand_(0.0),
  qtyShip_(0.0),
  shipLateLimit_(0),
  allocated_(0),
  backlogDependent_(0)
{
  // FINISH_ME: determine format
  //            maybe use an XML format

  // parse traceString into components

}






  // default constructor
LgFrSceAllocLet::LgFrSceAllocLet()
:
  partName_(),
  demandName_(),
  priority_(0),
  demandPd_(0),
  shipPd_(0),
  qtyDemand_(0.0),
  qtyShip_(0.0),
  shipLateLimit_(0),
  allocated_(0),
  backlogDependent_(0)
  {
    // nothing else to do
  }


  // destructor
LgFrSceAllocLet::~LgFrSceAllocLet()
{
	// do nothing
}


// assignment operator
LgFrSceAllocLet&
LgFrSceAllocLet::operator=(const LgFrSceAllocLet& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
    partName_ = rhs.partName_;
    demandName_ = rhs.demandName_;
    priority_ = rhs.priority_;
    demandPd_ = rhs.demandPd_;
    shipPd_ = rhs.shipPd_;
    qtyDemand_ = rhs.qtyDemand_;
    qtyShip_ = rhs.qtyShip_;
    shipLateLimit_ = rhs.shipLateLimit_;
    allocated_ = rhs.allocated_;
    backlogDependent_ = rhs.backlogDependent_;
  }
  return *this;
}

// copy constructor 
LgFrSceAllocLet::LgFrSceAllocLet(const LgFrSceAllocLet& source)
  : partName_(source.partName_),
  demandName_(source.demandName_),
  priority_(source.priority_),
  demandPd_(source.demandPd_),
  shipPd_(source.shipPd_),
  qtyDemand_(source.qtyDemand_),
  qtyShip_(source.qtyShip_),
  shipLateLimit_(source.shipLateLimit_),
  allocated_(source.allocated_),
  backlogDependent_(source.backlogDependent_)
{
  // nothing to do
}




@


1.5
log
@Version 5.  initial commit
@
text
@d126 1
a126 1
    + printPartName + "\","
@


1.4
log
@tweaking to get pipPriority settings to work
@
text
@d80 1
a80 1
    + partName_ + "\","
@


1.3
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@d128 1
a128 1
    + sce::stringFrom((long) (INT_MAX - priority_)) + ","
@


1.2
log
@Added include of mcl/src/mcl.h near top of include list to avoid
compile time problems on AIX which did not occur on Windows.

added
  implement(RWGVector, float)
  implement(RWGVector, int)
to ipSce.C to avoid unresolved symbols at link time
@
text
@d1 6
a8 2
// #include <rw/ctoken.h>
#include <rw/cstring.h>
a10 1
#include <rw/locale.h>
d45 2
a46 2
RWCString LgFrSceAllocLet::demandName() const { return demandName_; }
RWCString LgFrSceAllocLet::partName() const { return partName_; }
d63 1
a63 1
   cout << "\"" << partName_ << "\","
d75 1
a75 1
RWCString
d78 1
a78 1
  RWCString ts;
d82 7
a88 7
    + RWLocale::global().asString((long) priority_) + ","
    +  RWLocale::global().asString((long) demandPd_) + ","
    +  RWLocale::global().asString((long) shipPd_) + ","
    +  RWLocale::global().asString((double) qtyDemand_) + ","
    +  RWLocale::global().asString((double) qtyShip_) + ","
    +  RWLocale::global().asString((long) shipLateLimit_) + ","
    +  RWLocale::global().asString((long) allocated_) + "\n";
d95 1
a95 1
RWCString
d100 3
a102 3
  RWCString ts;
  RWCString p, g, f, pdf;
  RWCString printPartName, printDemandName;
d125 1
a125 1
  ts = RWLocale::global().asString((long) equitCount) + ",\""
d128 7
a134 7
    + RWLocale::global().asString((long) (INT_MAX - priority_)) + ","
    +  RWLocale::global().asString((long) demandPd_) + ","
    +  RWLocale::global().asString((long) shipPd_) + ","
    +  RWLocale::global().asString((double) qtyDemand_) + ","
    +  RWLocale::global().asString((double) qtyShip_) + ","
    +  RWLocale::global().asString((long) shipLateLimit_) + ","
    +  RWLocale::global().asString((long) allocated_) + "\n";
d142 2
a143 2
LgFrSceAllocLet::LgFrSceAllocLet(RWCString & partName, 
			   RWCString & demandName,
d159 1
a159 1
  backlogDependent_(NULL)
d166 1
a166 1
LgFrSceAllocLet::LgFrSceAllocLet(RWCString & traceString)
d177 1
a177 1
  backlogDependent_(NULL)
d203 1
a203 1
  backlogDependent_(NULL)
@


1.2.2.1
log
@Roguewave is gone
@
text
@a0 6

// RW2STL - inserted:
#include <string>
#include <ostream.h>
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL - inserted includes.
d3 2
d7 1
d42 2
a43 2
std::string LgFrSceAllocLet::demandName() const { return demandName_; }
std::string LgFrSceAllocLet::partName() const { return partName_; }
d72 1
a72 1
std::string
d75 1
a75 1
  std::string ts;
d79 7
a85 7
    + sce::stringFrom((long) priority_) + ","
    +  sce::stringFrom((long) demandPd_) + ","
    +  sce::stringFrom((long) shipPd_) + ","
    +  sce::stringFrom((float) qtyDemand_) + ","
    +  sce::stringFrom((float) qtyShip_) + ","
    +  sce::stringFrom((long) shipLateLimit_) + ","
    +  sce::stringFrom((long) allocated_) + "\n";
d92 1
a92 1
std::string
d97 3
a99 3
  std::string ts;
  std::string p, g, f, pdf;
  std::string printPartName, printDemandName;
d122 1
a122 1
  ts = sce::stringFrom((long) equitCount) + ",\""
d125 7
a131 7
    + sce::stringFrom((long) (INT_MAX - priority_)) + ","
    +  sce::stringFrom((long) demandPd_) + ","
    +  sce::stringFrom((long) shipPd_) + ","
    +  sce::stringFrom((double) qtyDemand_) + ","
    +  sce::stringFrom((double) qtyShip_) + ","
    +  sce::stringFrom((long) shipLateLimit_) + ","
    +  sce::stringFrom((long) allocated_) + "\n";
d139 2
a140 2
LgFrSceAllocLet::LgFrSceAllocLet(std::string & partName, 
			   std::string & demandName,
d156 1
a156 1
  backlogDependent_(0)
d163 1
a163 1
LgFrSceAllocLet::LgFrSceAllocLet(std::string & traceString)
d174 1
a174 1
  backlogDependent_(0)
d200 1
a200 1
  backlogDependent_(0)
@


1.2.2.2
log
@Went all the way to std::cout
@
text
@d4 1
a4 1
#include <iostream>
d63 1
a63 1
   std::cout << "\"" << partName_ << "\","
@


1.1
log
@new files for release 3.00
@
text
@d2 1
@

