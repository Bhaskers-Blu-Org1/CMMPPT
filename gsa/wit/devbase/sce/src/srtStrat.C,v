head	1.4;
access;
symbols
	sce_5_01_20080919:1.4
	latest_sce_4_20_20060523:1.4.0.6
	sce_4_20_20060523:1.4
	latest_sce4_20_OSL:1.4.0.4
	sce_4_20_OSL:1.4
	sce_4_20_20051222:1.4
	sce_4_10_30050426:1.4
	sce_4_05_20040511:1.4
	sce_4_00_20040201:1.4
	nextGenBranch:1.4.0.2
	nextGenRoot:1.4
	sce_3_30_20030627:1.4
	EndRw-branch:1.3.0.6
	Root-of-EndRw:1.3
	EndWitRw-branch:1.3.0.4
	Root-of-EndWitRw:1.3
	RwToStl-branch:1.3.0.2
	Root-of-RwToStl:1.3
	latest_sce_3_10_20010924:1.1.0.4
	sce_3_10_20010924:1.1
	latest_sce_3_00_20010601:1.1.0.2
	sce_3_00_20010601:1.1;
locks; strict;
comment	@ * @;


1.4
date	2003.01.15.19.36.58;	author rwToStl;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.20.22.13.12;	author ervolina;	state Exp;
branches
	1.3.6.1;
next	1.2;

1.2
date	2001.10.17.22.04.43;	author ervolina;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.01.16.53.54;	author ervolina;	state Exp;
branches;
next	;

1.3.6.1
date	2003.01.08.17.43.19;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.4
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
// #include <witutil/src/machdep.h> 
#include <sce/src/srtStrat.h>
#include <sce/src/allocLet.h>
#include <sce/src/sceDefin.h>







  // Preferred Constructor
LgFrSceSortStrategy::LgFrSceSortStrategy(int sortId)
  :  sortId_(sortId)
{
  assert(sortId <= LgFrSceSortID_Maximum);
  assert(sortId >= 0);
}



  // get the sortID
int 
LgFrSceSortStrategy::sortId()
{ 
  return sortId_; 
}





// Compare Function f(Void): PDS 
int
compareVoid_PDS(const void * aa, const void * bb)
{     
  int rc;

  LgFrSceAllocLet ** aaa = (LgFrSceAllocLet **) aa;
  LgFrSceAllocLet ** bbb = (LgFrSceAllocLet **) bb;

  LgFrSceAllocLet * b =  *bbb;
  LgFrSceAllocLet * a =  *aaa;

  // allocated
  rc = b->allocated() - a->allocated();
  if (rc != 0) return rc;
  // priority(P)
  rc = a->priority() - b->priority();
  if (rc != 0) return rc;
  // demand period(D)
  rc = a->demandPd() - b->demandPd();
  if( rc != 0 ) return rc;
  // ship period (S)
  rc = a->shipPd() - b->shipPd();
  if( rc != 0 ) return rc;
  // lexicographic Part
  rc = a->partName().compare(b->partName());
  if( rc != 0 ) return rc;
  else {
    rc = a->demandName().compare(b->demandName());
    if( rc != 0 ) return rc;
  }

  return 0;
}







int 
compareVoid_PSD(const void *aa, const void *bb)
{
  int rc;

  LgFrSceAllocLet ** aaa = (LgFrSceAllocLet **) aa;
  LgFrSceAllocLet ** bbb = (LgFrSceAllocLet **) bb;

  LgFrSceAllocLet * b =  *bbb;
  LgFrSceAllocLet * a =  *aaa;

  // allocated
  rc = b->allocated() - a->allocated();
  if (rc != 0) return rc;
  // priority(P)
  rc = a->priority() - b->priority();
  if (rc != 0) return rc;
  // ship period (S)
  rc = a->shipPd() - b->shipPd();
  if( rc != 0 ) return rc;
  // demand period(D)
  rc = a->demandPd() - b->demandPd();
  if( rc != 0 ) return rc;
  // lexicographic Part
  rc = a->partName().compare(b->partName());
  if( rc != 0 ) return rc;
  else {
    rc = a->demandName().compare(b->demandName());
    if( rc != 0 ) return rc;
  }
  return 0;
}


int 
compareVoid_DPS(const void *aa, const void *bb)
{
  int rc;


  LgFrSceAllocLet ** aaa = (LgFrSceAllocLet **) aa;
  LgFrSceAllocLet ** bbb = (LgFrSceAllocLet **) bb;

  LgFrSceAllocLet * b =  *bbb;
  LgFrSceAllocLet * a =  *aaa;


  // allocated
  rc = b->allocated() - a->allocated();
  if (rc != 0) return rc;
  // demand period(D)
  rc = a->demandPd() - b->demandPd();
  if( rc != 0 ) return rc;
  // priority(P)
  rc = a->priority() - b->priority();
  if (rc != 0) return rc;
  // ship period (S)
  rc = a->shipPd() - b->shipPd();
  if( rc != 0 ) return rc;
  // lexicographic Part
  rc = a->partName().compare(b->partName());
  if( rc != 0 ) return rc;
  else {
    rc = a->demandName().compare(b->demandName());
    if( rc != 0 ) return rc;
  }
  return 0;
}

int 
compareVoid_DSP(const void *aa, const void *bb)
{
  int rc;

  LgFrSceAllocLet ** aaa = (LgFrSceAllocLet **) aa;
  LgFrSceAllocLet ** bbb = (LgFrSceAllocLet **) bb;

  LgFrSceAllocLet * b =  *bbb;
  LgFrSceAllocLet * a =  *aaa;

  // allocated
  rc = b->allocated() - a->allocated();
  if (rc != 0) return rc;
  // demand period(D)
  rc = a->demandPd() - b->demandPd();
  if( rc != 0 ) return rc;
  // ship period (S)
  rc = a->shipPd() - b->shipPd();
  if( rc != 0 ) return rc;
  // priority(P)
  rc = a->priority() - b->priority();
  if (rc != 0) return rc;
  // lexicographic Part
  rc = a->demandName().compare(b->demandName());
  if( rc != 0 ) return rc;
  else {
    rc = a->partName().compare(b->partName());
    if( rc != 0 ) return rc;
  }
  return 0;
}


int 
compareVoid_SDP(const void *aa, const void *bb)
{
  int rc;


  LgFrSceAllocLet ** aaa = (LgFrSceAllocLet **) aa;
  LgFrSceAllocLet ** bbb = (LgFrSceAllocLet **) bb;

  LgFrSceAllocLet * b =  *bbb;
  LgFrSceAllocLet * a =  *aaa;

  // allocated
  rc = b->allocated() - a->allocated();
  if (rc != 0) return rc;
  // ship period (S)
  rc = a->shipPd() - b->shipPd();
  if( rc != 0 ) return rc;
  // demand period(D)
  rc = a->demandPd() - b->demandPd();
  if( rc != 0 ) return rc;
  // priority(P)
  rc = a->priority() - b->priority();
  if (rc != 0) return rc;
  // lexicographic Part
  rc = a->demandName().compare(b->demandName());
  if( rc != 0 ) return rc;
  else {
    rc = a->partName().compare(b->partName());
    if( rc != 0 ) return rc;
  }
  return 0;
}

int 
compareVoid_SPD(const void *aa, const void *bb)
{
  int rc;



  LgFrSceAllocLet ** aaa = (LgFrSceAllocLet **) aa;
  LgFrSceAllocLet ** bbb = (LgFrSceAllocLet **) bb;

  LgFrSceAllocLet * b =  *bbb;
  LgFrSceAllocLet * a =  *aaa;



  // allocated
  rc = b->allocated() - a->allocated();
  if (rc != 0) return rc;
  // ship period (S)
  rc = a->shipPd() - b->shipPd();
  if( rc != 0 ) return rc;
  // priority(P)
  rc = a->priority() - b->priority();
  if (rc != 0) return rc;
  // demand period(D)
  rc = a->demandPd() - b->demandPd();
  if( rc != 0 ) return rc;
  // lexicographic Part
  rc = a->partName().compare(b->partName());
  if( rc != 0 ) return rc;
  else {
    rc = a->demandName().compare(b->demandName());
    if( rc != 0 ) return rc;
  }
  return 0;
}




LgFrSceCompareVoidFnPtr
LgFrSceSortStrategy::compareVoidFunc()
{
  switch (sortId_) 
    {
    case LgFrSceSortId_PDS:
      return compareVoid_PDS;
      break;
    case LgFrSceSortId_PSD:
      return compareVoid_PSD;
      break;
    case LgFrSceSortId_DPS:
      return compareVoid_DPS;
      break;
    case LgFrSceSortId_DSP:
      return compareVoid_DSP;
      break;
    case LgFrSceSortId_SDP:
      return compareVoid_SDP;
      break;
    case LgFrSceSortId_SPD:
      return compareVoid_SPD;
      break;
    default:
      break;
    }
  return compareVoid_PDS;
}


#if 0
LgFrSceCompareAllocLetFnPtr
LgFrSceSortStrategy::compareAllocFunc()
{
  return compareAllocLet_PDS;
}
#endif





  // default constructor
LgFrSceSortStrategy::LgFrSceSortStrategy()
:
  sortId_(0)
  {
    // nothing else to do
  }


  // destructor
LgFrSceSortStrategy::~LgFrSceSortStrategy()
{
	// do nothing
}


// assignment operator
LgFrSceSortStrategy&
LgFrSceSortStrategy::operator=(const LgFrSceSortStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
    sortId_ = rhs.sortId_;
  }
  return *this;
}

// copy constructor 
LgFrSceSortStrategy::LgFrSceSortStrategy(const LgFrSceSortStrategy& source)
  : sortId_(source.sortId_)
{
  // nothing to do
}



@


1.3
log
@commit for 3.103
@
text
@a1 1
#include <rw/ctoken.h>
d61 1
a61 1
  rc = a->partName().compareTo(b->partName());
d64 1
a64 1
    rc = a->demandName().compareTo(b->demandName());
d101 1
a101 1
  rc = a->partName().compareTo(b->partName());
d104 1
a104 1
    rc = a->demandName().compareTo(b->demandName());
d137 1
a137 1
  rc = a->partName().compareTo(b->partName());
d140 1
a140 1
    rc = a->demandName().compareTo(b->demandName());
d170 1
a170 1
  rc = a->demandName().compareTo(b->demandName());
d173 1
a173 1
    rc = a->partName().compareTo(b->partName());
d205 1
a205 1
  rc = a->demandName().compareTo(b->demandName());
d208 1
a208 1
    rc = a->partName().compareTo(b->partName());
d242 1
a242 1
  rc = a->partName().compareTo(b->partName());
d245 1
a245 1
    rc = a->demandName().compareTo(b->demandName());
@


1.3.6.1
log
@Roguewave is gone
@
text
@d2 1
d62 1
a62 1
  rc = a->partName().compare(b->partName());
d65 1
a65 1
    rc = a->demandName().compare(b->demandName());
d102 1
a102 1
  rc = a->partName().compare(b->partName());
d105 1
a105 1
    rc = a->demandName().compare(b->demandName());
d138 1
a138 1
  rc = a->partName().compare(b->partName());
d141 1
a141 1
    rc = a->demandName().compare(b->demandName());
d171 1
a171 1
  rc = a->demandName().compare(b->demandName());
d174 1
a174 1
    rc = a->partName().compare(b->partName());
d206 1
a206 1
  rc = a->demandName().compare(b->demandName());
d209 1
a209 1
    rc = a->partName().compare(b->partName());
d243 1
a243 1
  rc = a->partName().compare(b->partName());
d246 1
a246 1
    rc = a->demandName().compare(b->demandName());
@


1.2
log
@premiminary coomit for release 3.11
@
text
@d171 1
a171 1
  rc = a->partName().compareTo(b->partName());
d174 1
a174 1
    rc = a->demandName().compareTo(b->demandName());
d206 1
a206 1
  rc = a->partName().compareTo(b->partName());
d209 1
a209 1
    rc = a->demandName().compareTo(b->demandName());
@


1.1
log
@new files for release 3.00
@
text
@d26 6
a75 35
// Compare Function f(LgFrSce): PDS 
int
compareAllocLet_PDS(const LgFrSceAllocLet * a, const LgFrSceAllocLet * b)
{     
  int rc;


  // allocated
  rc = b->allocated() - a->allocated();
  if (rc != 0) return rc;
  // priority(P)
  rc = a->priority() - b->priority();
  if (rc != 0) return rc;
  // demand period(D)
  rc = a->demandPd() - b->demandPd();
  if( rc != 0 ) return rc;
  // ship (ship) period (S)
  rc = a->shipPd() - b->shipPd();
  if( rc != 0 ) return rc;
  // lexicographic Part
  rc = a->partName().compareTo(b->partName());
  if( rc != 0 ) return rc;
  else {
    rc = a->demandName().compareTo(b->demandName());
    if( rc != 0 ) return rc;
  }

  return 0;
}






d83 5
a87 2
  LgFrSceAllocLet * a = (LgFrSceAllocLet *) aa;
  LgFrSceAllocLet * b = (LgFrSceAllocLet *) bb;
d117 7
a123 2
  LgFrSceAllocLet * a = (LgFrSceAllocLet *) aa;
  LgFrSceAllocLet * b = (LgFrSceAllocLet *) bb;
d152 5
a156 2
  LgFrSceAllocLet * a = (LgFrSceAllocLet *) aa;
  LgFrSceAllocLet * b = (LgFrSceAllocLet *) bb;
d186 6
a191 2
  LgFrSceAllocLet * a = (LgFrSceAllocLet *) aa;
  LgFrSceAllocLet * b = (LgFrSceAllocLet *) bb;
d220 9
a228 2
  LgFrSceAllocLet * a = (LgFrSceAllocLet *) aa;
  LgFrSceAllocLet * b = (LgFrSceAllocLet *) bb;
d285 1
a285 1

d291 1
a291 1

@

