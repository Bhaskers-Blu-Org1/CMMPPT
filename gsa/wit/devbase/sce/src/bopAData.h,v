head	1.3;
access;
symbols
	sce_5_01_20080919:1.3
	latest_sce_4_20_20060523:1.3.0.4
	sce_4_20_20060523:1.3
	latest_sce4_20_OSL:1.3.0.2
	sce_4_20_OSL:1.3
	sce_4_20_20051222:1.3
	sce_4_10_30050426:1.1.1.1
	sce_4_05_20040511:1.1.1.1
	sce_4_00_20040201:1.1.1.1
	nextGenBranch:1.1.1.1.0.16
	nextGenRoot:1.1.1.1
	sce_3_30_20030627:1.1.1.1
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2005.11.09.18.32.46;	author ervolina;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.02.18.40.00;	author ervolina;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.18.36.49;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.49;	author wit;	state Exp;
branches;
next	;


desc
@@


1.3
log
@removed the "binning" stuff which is now obsolete
@
text
@// file: bopAData.h
// author: robin

#ifndef  LGFRSCEBOPAPPDATA_H
#define  LGFRSCEBOPAPPDATA_H

#include <stdlib.h>
#include <sce/src/sceDefin.h>
#include <scenario/src/timeVecs.h>
#include <sce/src/baseAppData.h>
#include <assert.h>

class LgFrSceBopAppData   :
    public LgFrSceAppData

{
public:

  virtual
  LgFrSceAppData *
  clone()
    const;


  // default constructor. Don't use.
  LgFrSceBopAppData (); 

  // better constructor
  LgFrSceBopAppData (float defaultPreference, 
		     int isObjectInEffectForOptExplosionFlag,
		     int expAllowed);

  // get "preference"
  const
  float
  preference () const ;
  
  // set "preference"
  void
  preference (const float pref);

  // get "in affect for opt explosion" flag
  const
  int
  isObjectInEffectForOptExplosion () const ;

  // set "in affect for opt explosion" flag
  void
  isObjectInEffectForOptExplosion(const int isObjectInEffectForOptExplosionFlag);


  // get "expAllowed" flag
  const
  int
  expAllowed () const;

  // set "expAllowed" flag
  void
  expAllowed(const int expAllowed);

  
  // copy constructor
  LgFrSceBopAppData(const LgFrSceBopAppData& source);

  // assignment operator
  LgFrSceBopAppData&
  operator=(const LgFrSceBopAppData& rhs);

  // destructor
  virtual
  ~LgFrSceBopAppData();
  
private:
  // The preference on the bop is used to determine
  // which bop entry to explode in witMrp and the hueristic.
 
  // The bop entry corresponding to the
  // "regular" build has preference 0.0
  // The lower the preferences (negatives are ok), the more important. 
  // With the lp, the "preference" is interpreted as a cost.
  // Default = 0.0
  float preference_ ;
  int isObjectInEffectForOptExplosion_;  
  int expAllowed_;  
};
 
#endif
@


1.2
log
@First pass at sce 4.20 function.
@
text
@d31 1
a31 1
		     int isInterplantExplodeableAsSubstitute);
a50 10
#ifdef BINNING_OPERATION_TEMP_SOLUTION
  // get "isBinExplodeableAsSubstitute" flag
  const
  int
  isBinExplodeableAsSubstitute () const;

  // set "isBinExplodeableAsSubstitute" flag
  void
  isBinExplodeableAsSubstitute(const int isBinExplodeableAsSubstitute);
#endif
d52 1
a52 1
  // get "isInterplantExplodeableAsSubstitute" flag
d55 1
a55 1
  isInterplantExplodeableAsSubstitute () const;
d57 1
a57 1
  // set "isInterplantExplodeableAsSubstitute" flag
d59 1
a59 1
  isInterplantExplodeableAsSubstitute(const int isInterplantExplodeableAsSubstitute);
d84 1
a84 4
#ifdef BINNING_OPERATION_TEMP_SOLUTION
  int isBinExplodeableAsSubstitute_;
#endif
  int isInterplantExplodeableAsSubstitute_;  
@


1.1
log
@Initial revision
@
text
@d10 1
d13 3
a15 1
class LgFrSceBopAppData
d18 7
@


1.1.1.1
log
@Import sce
@
text
@@
