head	1.3;
access;
symbols
	sce_5_01_20080919:1.3
	latest_sce_4_20_20060523:1.3.0.6
	sce_4_20_20060523:1.3
	latest_sce4_20_OSL:1.3.0.4
	sce_4_20_OSL:1.3
	sce_4_20_20051222:1.3
	sce_4_10_30050426:1.3
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.3
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.2.0.2
	Root-of-EndRw:1.2
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.01.15.19.36.57;	author rwToStl;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.26.14.25.32;	author fasano;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2000.02.25.18.36.53;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.53;	author wit;	state Exp;
branches;
next	;

1.2.2.1
date	2003.01.08.17.43.17;	author rwToStl;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2003.01.09.13.14.31;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.3
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@
// RW2STL - inserted:
#include <string>
#include <ostream>
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL - inserted includes.
// file: sceAlMrp.C
// author:  dan/tom

#include <mcl/src/mcl.h>
#include <stdio.h>
#include <stdlib.h>
#include <fstream>
#include <assert.h>
#include <scenario/src/machdep.h>
#include <scenario/src/timeVecs.h>
#include <sce/src/sceDefin.h>
#include <sce/src/mPlantH.h>
#include <sce/src/sceParam.h>
#include <sce/src/fFileMgr.h>
#include <sce/src/sceAlMrp.h>
#include <wit/src/wit.h>

// default constructor
LgFrSceAllocatedMrp::LgFrSceAllocatedMrp()
  :   WUtlAllocatedMrp(0, 0),
      mpHelper_(0),
      setOfParameters_(0)
{
  assert("Cant do this:" ==  "INVOKE the default constructor");
}


// fairly general constructor:
LgFrSceAllocatedMrp::LgFrSceAllocatedMrp(WitRun * const theWitRun, 
					 LgFrMultiPlantHelper * mpHelper,
					 const char aMrpSeparatorChar,
					 LgFrSceSetOfParameters * setOfParameters)
  :   WUtlAllocatedMrp(theWitRun, aMrpSeparatorChar),
      mpHelper_(mpHelper),
      setOfParameters_(setOfParameters)
{
  // NOTE: the construction must not be done till the original witRun is
  // all loaded up and ready to go

  // nothing to do, really. the base class initialization will do everything
  std::string pdfSeparator = setOfParameters_->getString("pdfSeparator");
  assert(pdfSeparator.c_str()[0] != aMrpSeparatorChar);
}




int
LgFrSceAllocatedMrp::scePrint(std::string& fileName, std::string& fileNameInd)
{
   assert(state() == 1);

      std::ofstream outFileIndDmd;
  
   if (!(fileNameInd.empty())) {
      outFileIndDmd.open(fileNameInd.c_str(), std::ofstream::out );//, 0666);
      if (outFileIndDmd.fail()) {
      std::cerr << "SCE0999E: Could not open output file: " << fileNameInd << std::endl
	   << "while printing allocated MRP results\n"
	   << "terminating the program\n";
      return 8;
      }
   }

   std::ofstream outFile(fileName.c_str());//, ios::out, 0666);
   if (outFile.fail()) {
   std::cerr << "SCE0999E: Could not open output file: " << fileName << std::endl
	 << "while printing allocated MRP results\n"
	 << "terminating the program\n";
   return 8;
   }

   std::string pdfSeparatorString = setOfParameters_->getString("pdfSeparator");
   std::string separatorString(1,separatorChar());

   long numRecords = 0;  // keep track of number of records

   int nPeriods_ = nPeriods();
   int version_ = version();
   WitRun *localWitRun_ = localWitRun();

   char **operationList;
   char *producedPartName, *consumingOperationName;
   int listLen, i, k, l, n, t;
   int nBomEntries, nBopEntries, nConsumingBomEntries, nSubsBomEntries;
   int bomEntryIndex;
   float *execVol, *MRPCoverage, *subVol, *MRPAllocReq, *MRPDelta;

   MRPCoverage = (float *) calloc(nPeriods_, sizeof(float));
   // TRE: only allocate MRPAllocReq for version==2
   if (version_ == 2) {
     MRPAllocReq = (float *) calloc(nPeriods_, sizeof(float));
   }
   MRPDelta = (float *) calloc(nPeriods_, sizeof(float));

   std::string geoDemandIndicator(pdfSeparatorString + "specialGeoPlannerDemand");

   witGetOperations(localWitRun_, &listLen, &operationList);
   for(i=0; i<listLen; i++){
      witGetOperationNBomEntries(localWitRun_, operationList[i], &nBomEntries);
      if (nBomEntries == 0){


	   std::string witName(operationList[i]);
	   SCETokenizer next(witName);
	   std::string geo = next(separatorString.c_str());
	   std::string temp1 = next(separatorString.c_str());
	   std::string witLowLevelPartName = next(separatorString.c_str());
	   
	   SCETokenizer next1(temp1);
	   std::string geo2 = next1(pdfSeparatorString);
	   std::string plannerPartName = next1(pdfSeparatorString);
	   
	   SCETokenizer next2(witLowLevelPartName);
	   std::string lowLevelpdf = next2(pdfSeparatorString);
	   std::string lowLevelPartName = next2(pdfSeparatorString);
 
        // if witLowLevelPartName is not a PCF part in the 
        // SCE witRun then continue        
          if (!(mpHelper_->isPartPcf(witRun(), witLowLevelPartName.c_str())))
             continue;

	 if (version_ == 1){
	    witGetOperationExecVol(localWitRun_, operationList[i], &execVol);
	    witGetOperationMrpExecVol(localWitRun_, operationList[i], 
	       &MRPAllocReq);
	    for(t=0; t<nPeriods_; t++){
	       MRPCoverage[t] = MRPAllocReq[t] - execVol[t];
	       MRPDelta[t] = execVol[t];
	    }
	 }
	 
	 if (version_ == 2){
	    for(t=0; t<nPeriods_; t++){
	       MRPCoverage[t] = 0;
	       MRPAllocReq[t] = 0;
	    }
	    witGetOperationNBopEntries(localWitRun_, operationList[i], 
	       &nBopEntries);         
	    assert(nBopEntries == 1);
	    witGetBopEntryProducedPart(localWitRun_, operationList[i], 0, 
	       &producedPartName);
	    witGetPartNConsumingBomEntries(localWitRun_, producedPartName, 
	       &nConsumingBomEntries);
	    for(k=0; k<nConsumingBomEntries; k++){
	       witGetPartConsumingBomEntry(localWitRun_, producedPartName, k,
		  &consumingOperationName, &bomEntryIndex);
	       witGetBomEntryNSubsBomEntries(localWitRun_, 
		  consumingOperationName, bomEntryIndex, &nSubsBomEntries);
	       assert(nSubsBomEntries == nPeriods_);
	       for(l=0; l<nSubsBomEntries; l++){
		  witGetSubsBomEntrySubVol(localWitRun_, consumingOperationName,
		     bomEntryIndex, l, &subVol); 
		  for(n=0; n<nPeriods_; n++){
		     MRPAllocReq[n] += subVol[n];
		     if(n >= l)
			MRPCoverage[n] += subVol[n-l];
		  }
		  portableFree(subVol);
	       }
	       portableFree(consumingOperationName);
	    }
	    portableFree(producedPartName);
	    witGetOperationExecVol(localWitRun_, operationList[i], &execVol);
	    for(t=0; t<nPeriods_; t++)
	       MRPAllocReq[t] += execVol[t];
	    for(t=0; t<nPeriods_; t++)
	       MRPDelta[t] = MRPAllocReq[t] - MRPCoverage[t];
	}


	 // TRE:  Only print if there's a positive mrpDelta
	 LgFrTimeVecFloat mrpDeltaTV((size_t) nPeriods_, MRPDelta);
	 if (mrpDeltaTV.max() > 0.001) {

        // See if part is a specialGeoPlanner part
         if (sce::find(witName, geoDemandIndicator) != std::string::npos) {
	   outFile << "\"" 
		   << plannerPartName << "\",\"" 
		   << geo << "\",\""
		   << lowLevelPartName << "\",\"" 
		   << lowLevelpdf << "\",\""
		   << "AMRPReq\"";
	   for(t=0; t<nPeriods_; t++)
	     outFile << "," <<  MRPAllocReq[t];
	   outFile << "\n";
	   numRecords ++;

	   outFile << "\"" 
		   << plannerPartName << "\",\"" 
		   << geo << "\",\""
		   << lowLevelPartName << "\",\"" 
		   << lowLevelpdf << "\",\""
		   << "AMRPCov\"";
	   for(t=0; t<nPeriods_; t++)
	     outFile << "," <<  MRPCoverage[t];
	   outFile << "\n";
	   numRecords ++;
	   
	   outFile << "\"" 
		   << plannerPartName << "\",\"" 
		   << geo << "\",\""
		   << lowLevelPartName << "\",\"" 
		   << lowLevelpdf << "\",\""
		   << "AMRPDelta\"";
	   for(t=0; t<nPeriods_; t++)
	     outFile << "," <<  MRPDelta[t];
	   outFile << "\n";
	   numRecords ++;
	 }
         else {
               outFileIndDmd << "\"" 
		   << plannerPartName << "\",\"" 
		   << geo2 << "\",\""
		   << geo  << "\",\""
		   << lowLevelPartName << "\",\"" 
		   << lowLevelpdf << "\",\""
		   << "AMRPReq\"";
	   for(t=0; t<nPeriods_; t++)
	     outFileIndDmd << "," <<  MRPAllocReq[t];
	   outFileIndDmd << "\n";
	   numRecords ++;

	   outFileIndDmd << "\"" 
		   << plannerPartName << "\",\"" 
		   << geo2 << "\",\""
		   << geo << "\",\""
		   << lowLevelPartName << "\",\"" 
		   << lowLevelpdf << "\",\""
		   << "AMRPCov\"";
	   for(t=0; t<nPeriods_; t++)
	     outFileIndDmd << "," <<  MRPCoverage[t];
	   outFileIndDmd << "\n";
	   numRecords ++;
	   
	   outFileIndDmd << "\"" 
		   << plannerPartName << "\",\"" 
		   << geo2 << "\",\""
		   << geo << "\",\""
		   << lowLevelPartName << "\",\"" 
		   << lowLevelpdf << "\",\""
		   << "AMRPDelta\"";
	   for(t=0; t<nPeriods_; t++)
	     outFileIndDmd << "," <<  MRPDelta[t];
	   outFileIndDmd << "\n";
	   numRecords ++;
         }
         }
	 
	 // TRE: moved execVolfree into appropriate loop
	 portableFree(execVol);
	 // TRE: 
	 if (version_ == 1)
	   portableFree(MRPAllocReq);
      }
   }   

   outFile.close();
   if (!(fileNameInd.empty()))
      outFileIndDmd.close();

   portableFree(MRPCoverage);
   portableFree(MRPDelta);
   // TRE: 
   if (version_ == 2)
     portableFree(MRPAllocReq);
   for(i=0; i<listLen; i++) 
      portableFree(operationList[i]);
   portableFree(operationList);

  // if successful, return 0
  // if warnings,   return 4
  // if error,      return 8
  return 0;
}


// This method is NOT IMPLEMENTED.  Do not use it.  It is a private method!!
// use print() instead.
// print the allocated MRP
// this would be the preferred implementation of print().  It assumes
// that the base class has get methods for the solution.  However, 
// since no get method exists, the method is not completely implemented.
int
LgFrSceAllocatedMrp::printWithoutAccessToAMrpGuts(std::string fileName, 
						  MclFacility * theErrFacil,
						  LgFrSceFlatFileMgr * fFileMgr)
{
  assert(this->state() == 1);

  std::ofstream outFile(fileName.c_str());//, ios::out , 0666);
  if (outFile.fail()) {
    (*theErrFacil)("CannotOpenFileForWrite",MclArgList() 
		       << "allocated MRP" 
		       << fileName);
  }

  long numRecords = 0;  // keep track of number of records


  int nPeriods;
  int nParts;
  char ** partList;

  witGetNPeriods(this->witRun(), &nPeriods);
  witGetParts(this->localWitRun(), &nParts, &partList);

  std::string plannerPartName, geo;

  // loop through all the parts and pick up the GPD parts only
  int i = 0; // Pulled out of the for below by RW2STL
  for (i=0; i<nParts; i++) {
    // only work on geo planner demand parts
    if (! mpHelper_->isPartSpecialGeoPlannerDemandPart(this->witRun(), partList[i], plannerPartName, geo))
      continue;
  
    // somehow, you need to loop over the PCF parts
    // For each PCF part ...
    while (1) {
      // need to define the interface for get methods ... FINISH_ME:
      char * thePcfFullWitPartName = 0;
      float * theReqCovOrDeltaDataLine = 0;
      
      // ok, print a record
      std::string partname = mpHelper_->partname(thePcfFullWitPartName);
      std::string pdf = mpHelper_->pdf(thePcfFullWitPartName);
      outFile << "\"" 
	      << plannerPartName << "\",\"" 
	      << geo << "\",\""
	      << partname << "\",\"" 
	      << pdf << "\",\""
	      << "AMRPReq, or AMRPCov, or AMRPDelta\",";
      fFileMgr->writeCsvFloatVector(outFile, nPeriods, theReqCovOrDeltaDataLine, 0, 15);
      numRecords++;
    }
  }
  outFile.close();

  // if successful, return 0
  // if warnings,   return 4
  // if error,      return 8
  return 0;

}
 
  

// copy constructor 
LgFrSceAllocatedMrp::LgFrSceAllocatedMrp(const LgFrSceAllocatedMrp& source)
  :   WUtlAllocatedMrp(0, 0),
      mpHelper_(source.mpHelper_),
      setOfParameters_(source.setOfParameters_)
{
  assert("Cant call this" == "the copy constructor for LgFrSceAllocatedMrp");
}

// assignment operator
LgFrSceAllocatedMrp&
LgFrSceAllocatedMrp::operator=(const LgFrSceAllocatedMrp& rhs)
{

  assert("Cant call this" == " the assignment operator for LgFrSceAllocatedMrp");
  if (this != &rhs) {           // Check for assignment to self
    (this->LgFrSceAllocatedMrp::operator= ) (rhs);    
    mpHelper_ = rhs.mpHelper_;
    setOfParameters_ = rhs.setOfParameters_;
  }
  return *this;
}

// destructor
LgFrSceAllocatedMrp::~LgFrSceAllocatedMrp()
{
  // do nothing
}

@


1.2
log
@Added include of mcl/src/mcl.h near top of include list to avoid
compile time problems on AIX which did not occur on Windows.

added
  implement(RWGVector, float)
  implement(RWGVector, int)
to ipSce.C to avoid unresolved symbols at link time
@
text
@d1 6
a10 1
#include <rw/ctoken.h>
d13 1
a13 1
#include <fstream.h>
a22 1
#include <rw/cstring.h>
d26 3
a28 3
  :   WUtlAllocatedMrp(NULL, NULL),
      mpHelper_(NULL),
      setOfParameters_(NULL)
d47 2
a48 2
  RWCString pdfSeparator = setOfParameters_->getString("pdfSeparator");
  assert(pdfSeparator.data()[0] != aMrpSeparatorChar);
d55 1
a55 1
LgFrSceAllocatedMrp::scePrint(RWCString& fileName, RWCString& fileNameInd)
d59 1
a59 1
      ofstream outFileIndDmd;
d61 2
a62 2
   if (!(fileNameInd.isNull())) {
      outFileIndDmd.open(fileNameInd, ios::out, 0666);
d64 1
a64 1
      cerr << "SCE0999E: Could not open output file: " << fileNameInd << endl
d71 1
a71 1
   ofstream outFile(fileName, ios::out, 0666);
d73 1
a73 1
   cerr << "SCE0999E: Could not open output file: " << fileName << endl
d79 2
a80 2
   RWCString pdfSeparatorString = setOfParameters_->getString("pdfSeparator");
   RWCString separatorString(separatorChar());
d90 1
a90 1
   int listLen, i, j, k, l, n, t;
d102 1
a102 1
   RWCString geoDemandIndicator(pdfSeparatorString + "specialGeoPlannerDemand");
d110 5
a114 5
	   RWCString witName(operationList[i]);
	   RWCTokenizer next(witName);
	   RWCString geo = next(separatorString.data());
	   RWCString temp1 = next(separatorString.data());
	   RWCString witLowLevelPartName = next(separatorString.data());
d116 3
a118 3
	   RWCTokenizer next1(temp1);
	   RWCString geo2 = next1(pdfSeparatorString);
	   RWCString plannerPartName = next1(pdfSeparatorString);
d120 3
a122 3
	   RWCTokenizer next2(witLowLevelPartName);
	   RWCString lowLevelpdf = next2(pdfSeparatorString);
	   RWCString lowLevelPartName = next2(pdfSeparatorString);
d126 1
a126 1
          if (!(mpHelper_->isPartPcf(witRun(), witLowLevelPartName)))
d183 1
a183 1
           if (witName.contains(geoDemandIndicator)) {
d265 1
a265 1
   if (!(fileNameInd.isNull()))
d291 1
a291 1
LgFrSceAllocatedMrp::printWithoutAccessToAMrpGuts(RWCString fileName, 
d297 1
a297 1
  ofstream outFile(fileName, ios::out, 0666);
d314 1
a314 1
  RWCString plannerPartName, geo;
d317 2
a318 1
  for (int i=0; i<nParts; i++) {
d327 2
a328 2
      char * thePcfFullWitPartName = NULL;
      float * theReqCovOrDeltaDataLine = NULL;
d331 2
a332 2
      RWCString partname = mpHelper_->partname(thePcfFullWitPartName);
      RWCString pdf = mpHelper_->pdf(thePcfFullWitPartName);
d356 1
a356 1
  :   WUtlAllocatedMrp(NULL, NULL),
@


1.2.2.1
log
@Roguewave is gone
@
text
@a0 6

// RW2STL - inserted:
#include <string>
#include <ostream.h>
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL - inserted includes.
d5 1
d8 1
a8 1
#include <fstream>
d18 1
d22 3
a24 3
  :   WUtlAllocatedMrp(0, 0),
      mpHelper_(0),
      setOfParameters_(0)
d43 2
a44 2
  std::string pdfSeparator = setOfParameters_->getString("pdfSeparator");
  assert(pdfSeparator.c_str()[0] != aMrpSeparatorChar);
d51 1
a51 1
LgFrSceAllocatedMrp::scePrint(std::string& fileName, std::string& fileNameInd)
d55 1
a55 1
      std::ofstream outFileIndDmd;
d57 2
a58 2
   if (!(fileNameInd.empty())) {
      outFileIndDmd.open(fileNameInd.c_str(), std::ofstream::out );//, 0666);
d67 1
a67 1
   std::ofstream outFile(fileName.c_str());//, ios::out, 0666);
d75 2
a76 2
   std::string pdfSeparatorString = setOfParameters_->getString("pdfSeparator");
   std::string separatorString(1,separatorChar());
d86 1
a86 1
   int listLen, i, k, l, n, t;
d98 1
a98 1
   std::string geoDemandIndicator(pdfSeparatorString + "specialGeoPlannerDemand");
d106 5
a110 5
	   std::string witName(operationList[i]);
	   SCETokenizer next(witName);
	   std::string geo = next(separatorString.c_str());
	   std::string temp1 = next(separatorString.c_str());
	   std::string witLowLevelPartName = next(separatorString.c_str());
d112 3
a114 3
	   SCETokenizer next1(temp1);
	   std::string geo2 = next1(pdfSeparatorString);
	   std::string plannerPartName = next1(pdfSeparatorString);
d116 3
a118 3
	   SCETokenizer next2(witLowLevelPartName);
	   std::string lowLevelpdf = next2(pdfSeparatorString);
	   std::string lowLevelPartName = next2(pdfSeparatorString);
d122 1
a122 1
          if (!(mpHelper_->isPartPcf(witRun(), witLowLevelPartName.c_str())))
d179 1
a179 1
         if (sce::find(witName, geoDemandIndicator) != std::string::npos) {
d261 1
a261 1
   if (!(fileNameInd.empty()))
d287 1
a287 1
LgFrSceAllocatedMrp::printWithoutAccessToAMrpGuts(std::string fileName, 
d293 1
a293 1
  std::ofstream outFile(fileName.c_str());//, ios::out , 0666);
d310 1
a310 1
  std::string plannerPartName, geo;
d313 1
a313 2
  int i = 0; // Pulled out of the for below by RW2STL
  for (i=0; i<nParts; i++) {
d322 2
a323 2
      char * thePcfFullWitPartName = 0;
      float * theReqCovOrDeltaDataLine = 0;
d326 2
a327 2
      std::string partname = mpHelper_->partname(thePcfFullWitPartName);
      std::string pdf = mpHelper_->pdf(thePcfFullWitPartName);
d351 1
a351 1
  :   WUtlAllocatedMrp(0, 0),
@


1.2.2.2
log
@Went all the way to std::cout
@
text
@d4 1
a4 1
#include <ostream>
d64 1
a64 1
      std::cerr << "SCE0999E: Could not open output file: " << fileNameInd << std::endl
d73 1
a73 1
   std::cerr << "SCE0999E: Could not open output file: " << fileName << std::endl
@


1.1
log
@Initial revision
@
text
@d4 1
@


1.1.1.1
log
@Import sce
@
text
@@
