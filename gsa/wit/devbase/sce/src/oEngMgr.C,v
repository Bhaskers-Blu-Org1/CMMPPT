head	1.13;
access;
symbols
	sce_5_01_20080919:1.10
	latest_sce_4_20_20060523:1.9.0.4
	sce_4_20_20060523:1.9
	latest_sce4_20_OSL:1.9.0.2
	sce_4_20_OSL:1.9
	sce_4_20_20051222:1.9
	sce_4_10_30050426:1.9
	sce_4_05_20040511:1.9
	sce_4_00_20040201:1.6
	nextGenBranch:1.5.0.2
	nextGenRoot:1.5
	sce_3_30_20030627:1.5
	EndRw-branch:1.4.0.2
	Root-of-EndRw:1.4
	EndWitRw-branch:1.3.0.4
	Root-of-EndWitRw:1.3
	RwToStl-branch:1.3.0.2
	Root-of-RwToStl:1.3
	latest_sce_3_10_20010924:1.2.0.8
	sce_3_10_20010924:1.2
	latest_sce_3_00_20010601:1.2.0.6
	sce_3_00_20010601:1.2
	latest_sce_2_31_20010308:1.2.0.4
	sce_2_31_20010308:1.2
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2011.03.24.02.10.18;	author ervolina;	state Exp;
branches;
next	1.12;
deltatype	text;
permissions	644;
commitid	1ec4d8aa79a62d9;
kopt	kv;
filename	@oEngMgr.C@;

1.12
date	2011.03.10.15.32.03;	author ervolina;	state Exp;
branches;
next	1.11;
deltatype	text;
permissions	644;
commitid	14cc4d78ede700a2;
kopt	kv;
filename	@oEngMgr.C@;

1.11
date	2010.12.15.23.53.23;	author ervolina;	state Exp;
branches;
next	1.10;
deltatype	text;

1.10
date	2008.06.25.00.39.06;	author ervolina;	state Exp;
branches;
next	1.9;
deltatype	text;

1.9
date	2004.02.09.16.05.52;	author ervolina;	state Exp;
branches;
next	1.8;
deltatype	text;

1.8
date	2004.02.09.14.37.30;	author ervolina;	state Exp;
branches;
next	1.7;
deltatype	text;

1.7
date	2004.02.06.21.53.47;	author ervolina;	state Exp;
branches;
next	1.6;
deltatype	text;

1.6
date	2003.08.04.20.49.54;	author dpc;	state Exp;
branches;
next	1.5;
deltatype	text;

1.5
date	2003.01.15.19.36.57;	author rwToStl;	state Exp;
branches;
next	1.4;
deltatype	text;

1.4
date	2002.11.26.14.25.32;	author fasano;	state Exp;
branches
	1.4.2.1;
next	1.3;
deltatype	text;

1.3
date	2002.07.31.20.39.53;	author ervolina;	state Exp;
branches;
next	1.2;
deltatype	text;

1.2
date	2000.10.04.15.48.39;	author ervolina;	state Exp;
branches;
next	1.1;
deltatype	text;

1.1
date	2000.02.25.18.36.52;	author wit;	state Exp;
branches
	1.1.1.1;
next	;
deltatype	text;

1.1.1.1
date	2000.02.25.18.36.52;	author wit;	state Exp;
branches;
next	;
deltatype	text;

1.4.2.1
date	2003.01.08.17.43.16;	author rwToStl;	state Exp;
branches;
next	1.4.2.2;
deltatype	text;

1.4.2.2
date	2003.01.09.13.14.31;	author rwToStl;	state Exp;
branches;
next	;
deltatype	text;


desc
@@


1.13
log
@minor changes to banners
@
text
@
// RW2STL - inserted:
#include <string>
#include <ostream>
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL - inserted includes.
// file: oEngMgr.C
// author: robin and tom

#include <stdlib.h>

#include <mcl/src/mcl.h>
#include <scenario/src/machdep.h>
#include <sce/src/sceDefin.h>
#include <sce/src/oEngMgr.h>
#include <wit/src/wit.h>
#include <sce/src/ipSce.h>
#include <sce/src/scenSce.h>
#include <sce/src/mPlantH.h>
#include <scenario/src/calendar.h>
#include <sce/src/sceCrtLs.h>
#include <sce/src/sceParam.h>
#include <sce/src/dmApData.h>

#include <assert.h>


#ifndef ELIMINATE_OLD_MAIN  


// default constructor:
LgFrSceOptEngineMgr::LgFrSceOptEngineMgr()
  :   theWitRun_ (0),
      theCal_(0),
      mpHelper_(0),
      sceScenSP_(0)
{
    // all the work is done in initializer
}


// fairly general constructor:
LgFrSceOptEngineMgr::LgFrSceOptEngineMgr(WitRun * const theWitRun, 
                                         LgFrCalendar * theCal,
                                         LgFrMultiPlantHelper * mpHelper,
                                         LgFrScenarioForSceSmartPointer sceScenSP )

  :   theWitRun_ (theWitRun),
      theCal_(theCal),
      mpHelper_(mpHelper),
      sceScenSP_ (sceScenSP)
{
    // all the work is done in initializer
}

// run the optimization, using the hueristic solution as a starting solution
void
LgFrSceOptEngineMgr::implode(LgFrSceCritList & theCritList)
{


#ifndef SCE_OPT_IMPLODE
  (*(sceScenSP_->getErrFacility()))("OptEngineNotSupported");

  std::cerr << "This version of SCE does not support the Optimization Engine.\n";
  exit(1);
#else
    
  LgFrSceSetOfParameters & setOfParameters =  sceScenSP_->setOfParameters();   
  assert(sceScenSP_->getEngine() == "optimization");

  bool optInitFromZero = setOfParameters.getBool("optInitFromZero");
  int printCriticalListFile = setOfParameters.getBool("printCriticalListFile");

  if (optInitFromZero) {
    std::cout << "Initializing Optimization with Zero solution ..." << std::endl;    
  }
  else {
    // =================================================
    // === Run the Heuristic engine to hot start  ======
    // =================================================
    std::cout << "Initializing optimization with heuristic implosion solution  ..." << std::endl;
    witHeurImplode(theWitRun_);
    if (printCriticalListFile)
      theCritList.merge( theWitRun_);
  }

   
  // ===================================
  // === Run the Optimization engine ===
  // ===================================
  
  std::cout << "Preparing for optimization engine ..." << std::endl;
    
  // change some stuff to make it right for optimization
  this->reStructureForOptimization();
  
  // tell wit to run off the existing ship and prod schedules
  // (ie, don't let it run the heuristic again)
#ifdef SCE_OPT_IMPLODE  
  witSetOptInitMethod(theWitRun_, WitSCHED_OPT_INIT_METHOD);
#endif  

  // sce 6.2 ... turn on the cplex, baby
  bool useCplexSolver = setOfParameters.getBool("useCplexSolver");
  if (useCplexSolver)
    witSetCplexSelected(theWitRun_, WitTRUE);
  else 
    witSetCoinSelected(theWitRun_, WitTRUE);



  witPreprocess(theWitRun_);
    
  // Print the optimization form of the echo file
  if (setOfParameters.getBool("printOptEchoFile"))  {
    std::string echoFileName = setOfParameters.getString("optEchoFileName");
    sceScenSP_->setWitInformationalMessaging(theWitRun_, SCE_WIT_MESSAGING_ON);
    witDisplayData( theWitRun_, echoFileName.c_str());
    if (! setOfParameters.getBool("printWitMsgFile"))   {
      sceScenSP_->setWitInformationalMessaging(theWitRun_, SCE_WIT_MESSAGING_OFF);          
    }
  }
  // Dump the optimization version of the wit.data file
  if (setOfParameters.getBool("printOptWitDataFile"))  {
    std::string witDataFileName = setOfParameters.getString("optWitDataFileName");
    sceScenSP_->setWitInformationalMessaging(theWitRun_, SCE_WIT_MESSAGING_ON);
    witWriteData(theWitRun_, witDataFileName.c_str());
    if (! setOfParameters.getBool("printWitMsgFile"))   {
      sceScenSP_->setWitInformationalMessaging(theWitRun_, SCE_WIT_MESSAGING_OFF);          
    }
  }

  std::string usingSolver;
  if (useCplexSolver) 
    usingSolver = "CPLEX solver";
  else
    usingSolver = "COIN solver";
  std::cout << "Executing (optimization) implosion engine using " << usingSolver << std::endl;
  witOptImplode(theWitRun_);
  std::cout << "......... (optimization) implosion engine completed" << std::endl;
  if (printCriticalListFile)
      theCritList.merge( theWitRun_);

  // ======================================================
  bool doPegging = setOfParameters.getBool("doPegging");    
  if (doPegging) {
    std::cout << "Starting Post Implosion Pegging ... " << std::endl;
    int nPeriods;
    int nParts, nDemands;  
    char ** partList, ** demList; 
    int i, j, t;            
    
    // develop the pip sequence
    WitRun * seqWitRun;
    witNewRun(&seqWitRun);
    sceScenSP_->setWitInformationalMessaging(seqWitRun, SCE_WIT_MESSAGING_OFF);          
    witInitialize(seqWitRun);
    witGetNPeriods(theWitRun_, &nPeriods);
    witSetNPeriods(seqWitRun, nPeriods);
    int equit;
    witGetEquitability(theWitRun_, &equit);
    witSetEquitability(seqWitRun, equit);
    witSetForcedMultiEq(seqWitRun, WitTRUE);

    witGetParts( theWitRun_, &nParts, &partList );

    // Loop thru every part, looking for special cases to fix
    for (i=0; i<nParts; i++)  { 
      witGetPartDemands(theWitRun_, partList[i], &nDemands, &demList);
      if (nDemands > 0) {
	witAddPartWithOperation(seqWitRun, partList[i]);
	for (j=0; j<nDemands; j++) {
	  witAddDemand(seqWitRun, partList[i], demList[j]);
	  float * shipVol;
	  witGetDemandShipVol(theWitRun_, partList[i], demList[j], &shipVol);
	  witSetDemandDemandVol(seqWitRun, partList[i], demList[j], shipVol);
	  int * priority;
	  witGetDemandPriority(theWitRun_, partList[i], demList[j], &priority);

	  // get it From AppData !!
	  LgFrTimeVecFloat pipPriority(nPeriods, 0.0);
	  int t;
	  for (t=0; t<nPeriods; t++)
	    pipPriority[t] = priority[t];
	  witFree(priority);

	  LgFrSceDemandAppData * demandAppDataPtr;
	  witGetDemandAppData(theWitRun_,
			      partList[i], 
			      demList[j],

			      (void **) &demandAppDataPtr);
	  //	  std::cout << "loading pip prioriity for demand: [" << partList[i] << "," << demList[j] << "] =";
	  // If the demandAppDataPtr has been set, see if the pipPriority has been set.
	  // If it hasn't (i.e. the backlogYield is 0), then set it. Otherwise, do nothing.
	  if (demandAppDataPtr != 0)  {
	    pipPriority = demandAppDataPtr->pipPriority();
	    //	    std::cout << (int) pipPriority[2] << " (found in app data)" << std::endl;
	  }
	  //	  else {
	  //	    std::cout << (int)  pipPriority[2] << " (NOT found in app data)" << std::endl;
	  //	  }
	    
	  witSetDemandPriority(seqWitRun, partList[i], demList[j], pipPriority.intData());
	  witFree(shipVol);
	  witFree(demList[j]);
	}
      }
      witFree(partList[i]);
      witFree(demList);
    }
    witFree(partList);

    witClearPipSeq(seqWitRun);
    witSetPipSeqFromHeur(seqWitRun, WitTRUE);

    witHeurImplode(seqWitRun);

    witPostprocess(seqWitRun);
    witBuildPip(seqWitRun);

#if 0
    sceScenSP_->setWitInformationalMessaging(seqWitRun, SCE_WIT_MESSAGING_ON);
    witWriteData(seqWitRun,"wit.data.seqWitRun");
    sceScenSP_->setWitInformationalMessaging(seqWitRun, SCE_WIT_MESSAGING_OFF);
#endif

    int seqLenList;
    char ** seqPartList;
    char ** seqDemandList;
    int * seqShipPerList;
    float * seqShipVolList;

    witGetPipSeq(seqWitRun, 
		 &seqLenList,
		 &seqPartList, 
		 &seqDemandList,
		 &seqShipPerList,
		 &seqShipVolList);

    for (i=0; i<seqLenList; i++) {
      witAppendToPipSeq(theWitRun_,
			seqPartList[i], 
			seqDemandList[i],
			seqShipPerList[i],
			seqShipVolList[i]);
      witFree(seqPartList[i]);
      witFree(seqDemandList[i]);
    }
    witFree(seqPartList);
    witFree(seqDemandList);
    witFree(seqShipPerList);
    witFree(seqShipVolList);
    
    witDeleteRun(seqWitRun);
    
    witBuildPip(theWitRun_);
    std::cout << "........WIT Post Implosion Pegging available  ... " << std::endl;
    sceScenSP_->loadPIPDataIntoAppData(theWitRun_);
    std::cout << "Pegging of Optimization Implosion solution is COMPLETE" << std::endl;
  }  
#endif
}
  
  

// copy constructor 
LgFrSceOptEngineMgr::LgFrSceOptEngineMgr(const LgFrSceOptEngineMgr& source)
  :   theWitRun_ (source.theWitRun_),
      theCal_(source.theCal_),
      mpHelper_(source.mpHelper_),
      sceScenSP_ (source.sceScenSP_)
  
{
  // nothing to do
}

// assignment operator
LgFrSceOptEngineMgr&
LgFrSceOptEngineMgr::operator=(const LgFrSceOptEngineMgr& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
    theWitRun_ = rhs.theWitRun_;
    theCal_ = rhs.theCal_;
    mpHelper_ = rhs.mpHelper_;
    sceScenSP_ = rhs.sceScenSP_ ;
  }
  return *this;
}

// destructor
LgFrSceOptEngineMgr::~LgFrSceOptEngineMgr()
{
  // nothing to do, 
}


// the original model was setup so that it would work for
// mrp and heuristic.  To run the model in optimization mode,
// we must change the structure back.
void   
LgFrSceOptEngineMgr::reStructureForOptimization()
{
  int nPeriods;
  int nParts;  
  char ** partList; 
  int i, t;            

  witGetParts( theWitRun_, &nParts, &partList );
  nPeriods = theCal_->nPeriods();

  std::string plannerTopLevelPart;
  std::string geo;
  std::string bbCategory;
  std::string mfgOptionPart;


  // Loop thru every part, looking for special cases to fix
  for (i=0; i<nParts; i++)  { 
    std::string fullWitPartname(partList[i]);

    // This is what you do for special LT and GT capacity nodes:
    //      the supplyVol must be set back to zero
    if (mpHelper_->isPartSpecialLTbbCapacity(theWitRun_, fullWitPartname,
                                           plannerTopLevelPart, geo, bbCategory)
        ||
        mpHelper_->isPartSpecialGTbbCapacity(theWitRun_, fullWitPartname,
                                           plannerTopLevelPart, geo, bbCategory))   {

      float * zeroVec = new float[nPeriods];
      for (t=0; t<nPeriods; t++)
        zeroVec[t] = 0.0;

      witSetPartSupplyVol(theWitRun_, fullWitPartname.c_str(), zeroVec);
      delete [] zeroVec;
    }


#ifndef BUILDING_BLOCKS_VIA_MULTI_BOPS
    // This is what you do for special BB category parts:
    //     1) For every BOM entry to a special Option Dummy, the
    //        usage rate must be set to 0.0.
          
    if (mpHelper_->isPartSpecialBbCategory(theWitRun_, fullWitPartname, plannerTopLevelPart,
                                         geo, bbCategory)) {

      // loop through the bom entries 
      int nBom;
      witGetOperationNBomEntries(theWitRun_, fullWitPartname.c_str(), &nBom);

      std::string pp, g, bb, mfo;
      char * child;
      int j = 0; // Pulled out of the for below by RW2STL
      for (j=0; j<nBom; j++) {
        witGetBomEntryConsumedPart(theWitRun_, fullWitPartname.c_str(), j, &child);

        // if the child is SOD, then set usageRate to 0.0
        if (mpHelper_->isPartSpecialOptionDummy(theWitRun_, child, pp, g, bb, mfo)) {
          witSetBomEntryUsageRate(theWitRun_, fullWitPartname.c_str(), j, 0.0);              
        }

        witFree(child);
      }
    }
#endif
  }

#ifdef BUILDING_BLOCKS_VIA_MULTI_BOPS
  // 2.40: FINISH_ME: this implementation
#endif


  // Cleanup memory
  for ( i=0; i<nParts; i++) 
    witFree(partList[i]);
  witFree( partList );

}









#ifdef NDEBUG
#undef NDEBUG
#endif



// self-test : can I self test ??
void
LgFrSceOptEngineMgr::test()
{
  
 }

#endif
@


1.12
log
@cplex, and some cleanup
@
text
@d133 7
a139 2
  
  std::cout << "Executing (optimization) implosion engine ..." << std::endl;
@


1.11
log
@6.2 latest commits to old repository
@
text
@d104 9
@


1.10
log
@remove portableFree and switch to witFree
@
text
@d336 1
a336 1
      witGetPartNBomEntries(theWitRun_, fullWitPartname.c_str(), &nBom);
@


1.9
log
@trying to keep numerical stability with  pipPriority
@
text
@d172 1
a172 1
	  portableFree(priority);
d192 2
a193 2
	  portableFree(shipVol);
	  portableFree(demList[j]);
d196 2
a197 2
      portableFree(partList[i]);
      portableFree(demList);
d199 1
a199 1
    portableFree(partList);
d234 2
a235 2
      portableFree(seqPartList[i]);
      portableFree(seqDemandList[i]);
d237 4
a240 4
    portableFree(seqPartList);
    portableFree(seqDemandList);
    portableFree(seqShipPerList);
    portableFree(seqShipVolList);
d349 1
a349 1
        portableFree(child);
d362 2
a363 2
    portableFree(partList[i]);
  portableFree( partList );
@


1.8
log
@tweaking to get pipPriority settings to work
@
text
@d180 1
a180 1
	  std::cout << "loading pip prioriity for demand: [" << partList[i] << "," << demList[j] << "] =";
d185 1
a185 4
	    std::cout << (int) pipPriority[2] << " (found in app data)" << std::endl;
	  }
	  else {
	    std::cout << (int)  pipPriority[2] << " (NOT found in app data)" << std::endl;
d187 3
d209 1
a209 1
#if 1
@


1.7
log
@pip for LP engine
@
text
@d164 2
d168 5
a172 1
	  LgFrTimeVecFloat pipPriority(nPeriods, 47.0);
d178 1
d180 1
a180 1
	  
d185 4
d190 1
d209 1
a209 1
#if 0
@


1.6
log
@Changed
cerr
to
std::cerr
for the gcc compiler
@
text
@d23 1
a29 15
#if 0
// set ipPtr variable pointer
void
LgFrSceOptEngineMgr::setIpPtr(LgFrInitialProblemForSce * myIpPtr)
{
  ipPtr_ = myIpPtr;
}

// Get ipPtr variable pointer
LgFrInitialProblemForSce *
LgFrSceOptEngineMgr::getIpPtr()
{
  return ipPtr_;
}
#endif
d127 1
d130 107
a236 1
  
@


1.5
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@d79 1
a79 1
  cerr << "This version of SCE does not support the Optimization Engine.\n";
@


1.4
log
@Added include of mcl/src/mcl.h near top of include list to avoid
compile time problems on AIX which did not occur on Windows.

added
  implement(RWGVector, float)
  implement(RWGVector, int)
to ipSce.C to avoid unresolved symbols at link time
@
text
@d1 6
a23 1
#include <rw/rstream.h>
d47 4
a50 4
  :   theWitRun_ (NULL),
      theCal_(NULL),
      mpHelper_(NULL),
      sceScenSP_(NULL)
d86 1
a86 1
  RWBoolean optInitFromZero = setOfParameters.getBool("optInitFromZero");
d90 1
a90 1
    cout << "Initializing Optimization with Zero solution ..." << endl;    
d96 1
a96 1
    cout << "Initializing optimization with heuristic implosion solution  ..." << endl;
d107 1
a107 1
  cout << "Preparing for optimization engine ..." << endl;
d122 1
a122 1
    RWCString echoFileName = setOfParameters.getString("optEchoFileName");
d124 1
a124 1
    witDisplayData( theWitRun_, echoFileName);
d131 1
a131 1
    RWCString witDataFileName = setOfParameters.getString("optWitDataFileName");
d133 1
a133 1
    witWriteData(theWitRun_, witDataFileName);
d139 1
a139 1
  cout << "Executing (optimization) implosion engine ..." << endl;
d194 4
a197 4
  RWCString plannerTopLevelPart;
  RWCString geo;
  RWCString bbCategory;
  RWCString mfgOptionPart;
d202 1
a202 1
    RWCString fullWitPartname(partList[i]);
d216 1
a216 1
      witSetPartSupplyVol(theWitRun_, fullWitPartname, zeroVec);
d231 1
a231 1
      witGetPartNBomEntries(theWitRun_, fullWitPartname, &nBom);
d233 1
a233 1
      RWCString pp, g, bb, mfo;
d235 3
a237 2
      for (int j=0; j<nBom; j++) {
        witGetBomEntryConsumedPart(theWitRun_, fullWitPartname, j, &child);
d241 1
a241 1
          witSetBomEntryUsageRate(theWitRun_, fullWitPartname, j, 0.0);              
@


1.4.2.1
log
@Roguewave is gone
@
text
@a0 6

// RW2STL - inserted:
#include <string>
#include <ostream.h>
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL - inserted includes.
d18 1
d42 4
a45 4
  :   theWitRun_ (0),
      theCal_(0),
      mpHelper_(0),
      sceScenSP_(0)
d81 1
a81 1
  bool optInitFromZero = setOfParameters.getBool("optInitFromZero");
d117 1
a117 1
    std::string echoFileName = setOfParameters.getString("optEchoFileName");
d119 1
a119 1
    witDisplayData( theWitRun_, echoFileName.c_str());
d126 1
a126 1
    std::string witDataFileName = setOfParameters.getString("optWitDataFileName");
d128 1
a128 1
    witWriteData(theWitRun_, witDataFileName.c_str());
d189 4
a192 4
  std::string plannerTopLevelPart;
  std::string geo;
  std::string bbCategory;
  std::string mfgOptionPart;
d197 1
a197 1
    std::string fullWitPartname(partList[i]);
d211 1
a211 1
      witSetPartSupplyVol(theWitRun_, fullWitPartname.c_str(), zeroVec);
d226 1
a226 1
      witGetPartNBomEntries(theWitRun_, fullWitPartname.c_str(), &nBom);
d228 1
a228 1
      std::string pp, g, bb, mfo;
d230 2
a231 3
      int j = 0; // Pulled out of the for below by RW2STL
      for (j=0; j<nBom; j++) {
        witGetBomEntryConsumedPart(theWitRun_, fullWitPartname.c_str(), j, &child);
d235 1
a235 1
          witSetBomEntryUsageRate(theWitRun_, fullWitPartname.c_str(), j, 0.0);              
@


1.4.2.2
log
@Went all the way to std::cout
@
text
@d4 1
a4 1
#include <ostream>
d90 1
a90 1
    std::cout << "Initializing Optimization with Zero solution ..." << std::endl;    
d96 1
a96 1
    std::cout << "Initializing optimization with heuristic implosion solution  ..." << std::endl;
d107 1
a107 1
  std::cout << "Preparing for optimization engine ..." << std::endl;
d139 1
a139 1
  std::cout << "Executing (optimization) implosion engine ..." << std::endl;
@


1.3
log
@added param optInitFromZero which bypasses the heuristic solution start of optimplode
@
text
@d6 1
@


1.2
log
@modifications for sce 2.31
@
text
@a68 3
  // =================================================
  // === Run the Heuristic engine to hot start  ======
  // =================================================
d79 2
a80 2
  cout << "Executing (heuristic) implosion engine ..." << endl;
  witHeurImplode(theWitRun_);
d82 13
a94 2
  if (printCriticalListFile)
    theCritList.merge( theWitRun_);
@


1.1
log
@Initial revision
@
text
@d236 1
a236 1
  // 2.40: FINISH this implementation
@


1.1.1.1
log
@Import sce
@
text
@@
