head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_20_20051222:1.2
	sce_4_10_30050426:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.57;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.18.36.53;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.53;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.43.18;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// file: sceFssMg.h
// author: robin and tom

#ifndef  LGFRSCEFSSMANAGER_H
#define  LGFRSCEFSSMANAGER_H

// RW2STL - inserted:
#include <string>
// End of RW2STL - inserted includes.


#include <fstream>
#include <scenario/src/generVc.h>
#include <sce/src/scenSceP.h>
#include <sce/src/scenSce.h>

#ifdef SCE_ODBC

#include <sce/src/db.h>

#endif
// forward references
class LgFrMultiPlantHelper;
class WitRun;
class LgFrCalendar;
class LgFrSceFssableExploderDecorator;

class LgFrSceFssMgr {
  
public:

  
  // default constructor
  LgFrSceFssMgr();
  
  // general constructor
  LgFrSceFssMgr(WitRun * const theWitRun, 
                LgFrCalendar * theCal,
                LgFrMultiPlantHelper * mpHelper,
                LgFrScenarioForSce * scenScePtr
                );

  void
  runFss(std::string & fssType,
	 std::string & fssMethod,
	 std::string & fssFeatureMethod,
	 int         fssHorizon,
	 std::string & fssOutputFileName,
	 std::string & fssInputSetFileName);
    


  // run FSS singleton
  void
  singletonFss();
  
  // run FSS general set
  void
  generalSetFss();

  // run FSS general ECA set
  void
  machineFss();
  
  void
  getNextFssSet(LgFrStringVector & focusPartNameList,
                WitRun *  theWitRun,                
                std::string & theFssSetName,
                std::string & fssSetNameReadFromLastTime,
                std::string & partReadFromlastTime,
                std::string & FSSFile,
                std::ifstream & fssInFile,
                std::ofstream & scrubOutFile,
		long & totalRec,  // counters for sce i/o log reporting
		long & goodRec,
		long & numDistinctSetIDs,
		long & badRec,
		long & commentRec);
  
  void
  getNextSingletonFssSet(LgFrStringVector & focusPartNameList,
                         WitRun *    theWitRun,
                         int    &    singletonPartIndex,
                         std::string & theFssSetName,
                         int         nParts,
                         char **     partList);
  
  
  

  // copy constructor
  LgFrSceFssMgr(const LgFrSceFssMgr& source);
  
  // assignment operator
  LgFrSceFssMgr&
  operator=(const LgFrSceFssMgr& rhs);
  
  // destructor
  virtual
  ~LgFrSceFssMgr();


void
fssAnalysisBlue(
    LgFrSceFssableExploderDecorator * myExploder,
    std::string & fssMethod,    
    LgFrStringVector & focusPartNameList,
    int         nStandaloneFeatureArcs,
    std::string & fssFeatureScheme,
    int       nParts,
    char   ** partList,
    float  ** forwardRollableStockVols,        
    float *** FSSReqPtr,
    float *** FSSCovPtr);

  

void getDemandLists(
    WitRun   * theWitRun,
    int        nParts, 
    char    ** partList, 
    int     ** nDemandsPtr,
    char  **** demandListPtr);


int getSupplyVols(
    WitRun  * theWitRun,
    int       nParts, 
    char   ** partList, 
    float *** supplyVolsPtr);


int getForwardRollableStockSchedule(
    WitRun  * theWitRun,
    int       nParts, 
    char   ** partList, 
    float *** forwardRollableStockVolsPtr);
  
void getDemandVols(
    WitRun   * theWitRun,
    int        nParts, 
    char    ** partList, 
    int      * nDemands,
    char   *** dList,
    float **** demandVolsPtr);

void getShipVols(
    WitRun   * theWitRun, 
    int        nParts, 
    char    ** partList, 
    int      * nDemands,
    char   *** dList,
    float **** shipVolsPtr);



  // ================================================================ 
  // ================================================================
  

int
isFssSetSatisfiedWithinHorizon(WitRun *  theWitRun,
                               LgFrStringVector & focusPartNameList,
                               int fssHorizon);

// now returns the number of records printed
long  
printFssGeneralFile(WitRun * theWitRun,
                    int      nParts,
                    char  ** partList,
                    std::string & setID,
                    float ** FSSReq,
                    float ** FSSCov,
                    std::ofstream & fssOutFile);

// also returns the number of records printed
long
printModifiedFssFile(WitRun * theWitRun,
                     int      nParts,
                     char  ** partList,
                     std::string & setID,
                     float ** FSSReq,
                     float ** FSSCov,
                     std::ofstream & fssOutFile);
  


void 
adjustFssCovSupplyForFeatures(WitRun * localWitRun,
                              WitRun * originalWitRun,
                              const char  * focusPart,
                              const char  * focusDemand,
                              float * focusShipVol);
  
void 
adjustFssCovDemandForFeatures(WitRun * localWitRun,
                              WitRun * originalWitRun,
                              const char  * focusPart,
                              const char  * focusDemand,
                              float * focusShipVol);

void 
adjustFssReqSupplyForFeatures(WitRun * localWitRun,
                              WitRun * originalWitRun,
                              const char  * focusPart,
                              const char  * focusDemand,
                              float * focusDemandVol);
void 
adjustFssReqDemandForFeaturesToZero(WitRun * localWitRun,
                                    WitRun * originalWitRun,
                                    const char  * focusPart,
                                    const char  * focusDemand,
                                    float * zeroVec);
  
void 
adjustFssReqSupplyForFeaturesToZero(WitRun * localWitRun,
                                    WitRun * originalWitRun,
                                    const char  * focusPart,
                                    const char  * focusDemand,
                                    float * zeroVec);
  
  
#ifdef SCE_ODBC

void
insertFssSingleSchemeDB(WitRun * theWitRun,
                        int      nParts,
                        char  ** partList,
                        std::string & setID,
                        float ** FSSReq,
                        float ** FSSCov);


#endif
  
  // self-test
  static void test();

  
private:
  WitRun * theWitRun_;
  LgFrCalendar * theCal_;
  LgFrMultiPlantHelper * mpHelper_;
  LgFrScenarioForSce* scenScePtr_;
  
};
#endif
@


1.1
log
@Initial revision
@
text
@d7 3
d11 2
a12 2
#include <rw/cstring.h>
#include <fstream.h>
d44 3
a46 3
  runFss(RWCString & fssType,
	 RWCString & fssMethod,
	 RWCString & fssFeatureMethod,
d48 2
a49 2
	 RWCString & fssOutputFileName,
	 RWCString & fssInputSetFileName);
d66 1
a66 1
  getNextFssSet(LgFrOrderedVectorRWCString & focusPartNameList,
d68 6
a73 6
                RWCString & theFssSetName,
                RWCString & fssSetNameReadFromLastTime,
                RWCString & partReadFromlastTime,
                RWCString & FSSFile,
                ifstream & fssInFile,
                ofstream & scrubOutFile,
d81 1
a81 1
  getNextSingletonFssSet(LgFrOrderedVectorRWCString & focusPartNameList,
d84 1
a84 1
                         RWCString & theFssSetName,
d106 2
a107 2
    RWCString & fssMethod,    
    LgFrOrderedVectorRWCString & focusPartNameList,
d109 1
a109 1
    RWCString & fssFeatureScheme,
d163 1
a163 1
                               LgFrOrderedVectorRWCString & focusPartNameList,
d171 1
a171 1
                    RWCString & setID,
d174 1
a174 1
                    ofstream & fssOutFile);
d181 1
a181 1
                     RWCString & setID,
d184 1
a184 1
                     ofstream & fssOutFile);
d229 1
a229 1
                        RWCString & setID,
@


1.1.1.1
log
@Import sce
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a6 3
// RW2STL - inserted:
#include <string>
// End of RW2STL - inserted includes.
d8 2
a9 2

#include <fstream>
d41 3
a43 3
  runFss(std::string & fssType,
	 std::string & fssMethod,
	 std::string & fssFeatureMethod,
d45 2
a46 2
	 std::string & fssOutputFileName,
	 std::string & fssInputSetFileName);
d63 1
a63 1
  getNextFssSet(LgFrStringVector & focusPartNameList,
d65 6
a70 6
                std::string & theFssSetName,
                std::string & fssSetNameReadFromLastTime,
                std::string & partReadFromlastTime,
                std::string & FSSFile,
                std::ifstream & fssInFile,
                std::ofstream & scrubOutFile,
d78 1
a78 1
  getNextSingletonFssSet(LgFrStringVector & focusPartNameList,
d81 1
a81 1
                         std::string & theFssSetName,
d103 2
a104 2
    std::string & fssMethod,    
    LgFrStringVector & focusPartNameList,
d106 1
a106 1
    std::string & fssFeatureScheme,
d160 1
a160 1
                               LgFrStringVector & focusPartNameList,
d168 1
a168 1
                    std::string & setID,
d171 1
a171 1
                    std::ofstream & fssOutFile);
d178 1
a178 1
                     std::string & setID,
d181 1
a181 1
                     std::ofstream & fssOutFile);
d226 1
a226 1
                        std::string & setID,
@

