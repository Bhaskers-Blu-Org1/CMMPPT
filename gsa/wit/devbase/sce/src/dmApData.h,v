head	1.12;
access;
symbols
	sce_5_01_20080919:1.11
	latest_sce_4_20_20060523:1.10.0.4
	sce_4_20_20060523:1.10
	latest_sce4_20_OSL:1.10.0.2
	sce_4_20_OSL:1.10
	sce_4_20_20051222:1.10
	sce_4_10_30050426:1.9
	sce_4_05_20040511:1.8
	sce_4_00_20040201:1.6
	nextGenBranch:1.4.0.8
	nextGenRoot:1.4
	sce_3_30_20030627:1.4
	EndRw-branch:1.4.0.6
	Root-of-EndRw:1.4
	EndWitRw-branch:1.4.0.4
	Root-of-EndWitRw:1.4
	RwToStl-branch:1.4.0.2
	Root-of-RwToStl:1.4
	latest_sce_3_10_20010924:1.3.0.2
	sce_3_10_20010924:1.3
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2010.03.13.18.53.04;	author ervolina;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.29.20.03.32;	author ervolina;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.02.18.40.00;	author ervolina;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.15.20.45.00;	author ervolina;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.07.19.58.32;	author ervolina;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.06.21.53.47;	author ervolina;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.22.02.47.47;	author ervolina;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.10.17.56.10;	author ervolina;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.18.16.58.12;	author ervolina;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.24.16.38.13;	author ervolina;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.14.21.00.59;	author ervolina;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.18.36.50;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.50;	author wit;	state Exp;
branches;
next	;


desc
@@


1.12
log
@6.1 prep commit ... many things in here
@
text
@// file: dmApData.h
// author: robin

#ifndef  LGFRSCEDEMANDAPPDATA_H
#define  LGFRSCEDEMANDAPPDATA_H

#include <stdlib.h>
#include <scenario/src/timeVecs.h>
#include <sce/src/baseAppData.h>

#include <scenario/src/partSchd.h>


#include <assert.h>

class LgFrSceDemandAppData :
    public LgFrSceAppData
{
public:
  virtual
  LgFrSceAppData *
  clone()
    const;



  // default constructor. Don't use.
  LgFrSceDemandAppData (); 

  // always use this constructor
  LgFrSceDemandAppData(int hasDemandVolBeenSet,
                       int hasMinDemandVolBeenSet,
		       size_t nPeriods, 
		       float backlogYieldDefault);


  // better constructor
  LgFrSceDemandAppData (size_t nPeriods, float defaultBacklogYield);

  // get "doesDemandHaveNegativeValues"
  int
  doesDemandHaveNegativeValues() const;
  
  // set "doesDemandHaveNegativeValues"
  void
  doesDemandHaveNegativeValues(int doesDemandHaveNegativeValues);

  // get "hasDemandVolBeenSet"
  int
  hasDemandVolBeenSet() const;

  // set "hasDemandVolBeenSet"
  void
  hasDemandVolBeenSet(int hasDemandVolBeenSet);

  // get "hasMinDemandVolBeenSet"
  int
  hasMinDemandVolBeenSet() const;

  // set "hasMinDemandVolBeenSet"
  void
  hasMinDemandVolBeenSet(int hasMinDemandVolBeenSet);


  // get "above minimum demand" vols
  const
  LgFrTimeVecFloat&
  aboveMinDemandVol () const ;
  
  
  // set "above minimum demand" vols
  void
  aboveMinDemandVol (const LgFrTimeVecFloat & amDemand);

  // get backlog yield                     
  const
  LgFrTimeVecFloat&  
  backlogYield () const ;

  // set backlog yield
  void
  backlogYield (const LgFrTimeVecFloat & bklgYld) ;

  // get demandVol (potentially negative)
  const
  LgFrTimeVecFloat&  
  demandVol () const ;

  // set demandVol (potentially negative)
  void
  demandVol (const LgFrTimeVecFloat & demandVol) ;

  // get allocVol (potentially negative)
  const
  LgFrTimeVecFloat&  
  allocVol () const ;

  // set allocVol (potentially negative)
  void
  allocVol (const LgFrTimeVecFloat & allocVol) ;

  // get pipPriority
  const
  LgFrTimeVecFloat&  
  pipPriority () const ;

  // set pipPriority
  void
  pipPriority (const LgFrTimeVecFloat & pipPriority) ;


  // get requestDate
  const
  std::string &
  requestDate () const ;

  // set requestDate
  void
  requestDate (const std::string & requestDate) ;


  // get a PIP Sched
  LgFrSortingPartScheduleFloat &  
  PIPSched(int pegType);

  // get PIPConsVol schedule
  LgFrSortingPartScheduleFloat &
  PIPConsVolSched();

  // get PIPConsVol schedule
  LgFrSortingPartScheduleFloat &
  PIPSupplyVolSched();


  // get PIPExecVol schedule
  LgFrSortingPartScheduleFloat &
  PIPExecVolSched();

  // get PIPInterplantVol schedule
  LgFrSortingPartScheduleFloat &
  PIPInterplantVolSched();


  // get PIPProdVol schedule
  LgFrSortingPartScheduleFloat &
  PIPProdVolSched();

  // get PIPSideVol schedule
  LgFrSortingPartScheduleFloat &
  PIPSideVolSched();


  // copy constructor
  LgFrSceDemandAppData(const LgFrSceDemandAppData& source);

  // assignment operator
  LgFrSceDemandAppData&
  operator=(const LgFrSceDemandAppData& rhs);

  // destructor
  virtual
  ~LgFrSceDemandAppData();
  
private:
  LgFrTimeVecFloat aboveMinDemandVol_ ;
  LgFrTimeVecFloat backlogYield_ ;
  LgFrTimeVecFloat demandVol_ ;
  LgFrTimeVecFloat allocVol_ ;
  LgFrTimeVecFloat pipPriority_ ;
  int hasDemandVolBeenSet_;
  int hasMinDemandVolBeenSet_;
  int doesDemandHaveNegativeValues_;
  std::string requestDate_;
  LgFrSortingPartScheduleFloat PIPConsVolSched_;  
  LgFrSortingPartScheduleFloat PIPSupplyVolSched_;  
  LgFrSortingPartScheduleFloat PIPExecVolSched_;  
  LgFrSortingPartScheduleFloat PIPInterplantVolSched_;  
  LgFrSortingPartScheduleFloat PIPProdVolSched_;  
  LgFrSortingPartScheduleFloat PIPSideVolSched_;  
};
 
#endif
@


1.11
log
@added function to report interplantPeg from perspective of supplier location.   basically, this shifts the interplant peg earlier to accomodate interplant lead-times
@
text
@d112 13
d173 1
@


1.10
log
@First pass at sce 4.20 function.
@
text
@d126 5
d163 1
@


1.9
log
@preping for release 4.1
@
text
@d9 1
a9 1

d16 2
a17 1
class LgFrSceDemandAppData
d20 7
@


1.8
log
@added ProdVol from ProdVol Peg files
@
text
@d122 3
d151 1
@


1.7
log
@pip for LP engine
@
text
@d118 3
d147 1
@


1.6
log
@permanently replaced Concurrent Pegging with Post Implosion pegging.
Parameters stay the same though.
@
text
@d94 11
d137 1
@


1.5
log
@first level of PIP
@
text
@a93 8
  // get peggingConsVol schedule
  LgFrSortingPartScheduleFloat &
  peggingConsVolSched();

  // get peggingExecVol schedule
  LgFrSortingPartScheduleFloat &
  peggingExecVolSched();

a128 2
  LgFrSortingPartScheduleFloat peggingConsVolSched_;  
  LgFrSortingPartScheduleFloat peggingExecVolSched_;  
@


1.4
log
@execVol pegging
@
text
@d102 12
d139 3
@


1.3
log
@3.10 pegging capability
@
text
@d94 1
a94 1

d98 3
d126 1
@


1.2
log
@Preliminary Commit for release 3.10 ... still in development!!!!
@
text
@d9 5
d94 9
d122 1
a122 1
  
@


1.1
log
@Initial revision
@
text
@d80 8
d104 1
@


1.1.1.1
log
@Import sce
@
text
@@
