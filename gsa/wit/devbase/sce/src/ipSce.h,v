head	1.35;
access;
symbols
	sce_5_01_20080919:1.28
	latest_sce_4_20_20060523:1.21.0.4
	sce_4_20_20060523:1.21
	latest_sce4_20_OSL:1.21.0.2
	sce_4_20_OSL:1.21
	sce_4_20_20051222:1.21
	sce_4_10_30050426:1.17
	sce_4_05_20040511:1.15
	sce_4_00_20040201:1.13
	nextGenBranch:1.10.0.2
	nextGenRoot:1.10
	sce_3_30_20030627:1.10
	EndRw-branch:1.8.0.2
	Root-of-EndRw:1.8
	EndWitRw-branch:1.7.0.4
	Root-of-EndWitRw:1.7
	RwToStl-branch:1.7.0.2
	Root-of-RwToStl:1.7
	latest_sce_3_10_20010924:1.3.0.4
	sce_3_10_20010924:1.3
	latest_sce_3_00_20010601:1.3.0.2
	sce_3_00_20010601:1.3
	latest_sce_2_31_20010308:1.2.0.4
	sce_2_31_20010308:1.2
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.35
date	2011.03.10.15.31.28;	author ervolina;	state Exp;
branches;
next	1.34;
deltatype	text;
permissions	644;
commitid	14cc4d78ede700a2;
kopt	kv;
filename	@ipSce.h@;

1.34
date	2010.04.20.14.26.56;	author ervolina;	state Exp;
branches;
next	1.33;
deltatype	text;

1.33
date	2010.04.12.21.27.03;	author ervolina;	state Exp;
branches;
next	1.32;
deltatype	text;

1.32
date	2010.04.07.16.18.27;	author ervolina;	state Exp;
branches;
next	1.31;
deltatype	text;

1.31
date	2010.03.13.18.53.05;	author ervolina;	state Exp;
branches;
next	1.30;
deltatype	text;

1.30
date	2009.12.08.13.58.35;	author ervolina;	state Exp;
branches;
next	1.29;
deltatype	text;

1.29
date	2009.09.09.15.41.57;	author ervolina;	state Exp;
branches;
next	1.28;
deltatype	text;

1.28
date	2008.03.20.14.52.48;	author ervolina;	state Exp;
branches;
next	1.27;
deltatype	text;

1.27
date	2008.03.14.20.19.40;	author ervolina;	state Exp;
branches;
next	1.26;
deltatype	text;

1.26
date	2007.05.29.20.03.33;	author ervolina;	state Exp;
branches;
next	1.25;
deltatype	text;

1.25
date	2007.03.21.18.03.29;	author ervolina;	state Exp;
branches;
next	1.24;
deltatype	text;

1.24
date	2006.08.17.17.46.56;	author ervolina;	state Exp;
branches;
next	1.23;
deltatype	text;

1.23
date	2006.08.09.16.32.17;	author ervolina;	state Exp;
branches;
next	1.22;
deltatype	text;

1.22
date	2006.06.26.15.23.30;	author ervolina;	state Exp;
branches;
next	1.21;
deltatype	text;

1.21
date	2005.12.22.22.34.31;	author ervolina;	state Exp;
branches;
next	1.20;
deltatype	text;

1.20
date	2005.11.09.18.32.47;	author ervolina;	state Exp;
branches;
next	1.19;
deltatype	text;

1.19
date	2005.09.09.15.30.10;	author ervolina;	state Exp;
branches;
next	1.18;
deltatype	text;

1.18
date	2005.08.10.22.44.53;	author ervolina;	state Exp;
branches;
next	1.17;
deltatype	text;

1.17
date	2005.02.15.20.45.00;	author ervolina;	state Exp;
branches;
next	1.16;
deltatype	text;

1.16
date	2004.10.08.13.03.43;	author ervolina;	state Exp;
branches;
next	1.15;
deltatype	text;

1.15
date	2004.02.06.22.18.15;	author ervolina;	state Exp;
branches;
next	1.14;
deltatype	text;

1.14
date	2004.02.06.21.53.47;	author ervolina;	state Exp;
branches;
next	1.13;
deltatype	text;

1.13
date	2004.01.29.05.08.05;	author ervolina;	state Exp;
branches;
next	1.12;
deltatype	text;

1.12
date	2004.01.23.02.59.16;	author ervolina;	state Exp;
branches;
next	1.11;
deltatype	text;

1.11
date	2003.08.04.20.48.54;	author dpc;	state Exp;
branches;
next	1.10;
deltatype	text;

1.10
date	2003.01.17.00.53.22;	author ervolina;	state Exp;
branches;
next	1.9;
deltatype	text;

1.9
date	2003.01.15.19.36.56;	author rwToStl;	state Exp;
branches;
next	1.8;
deltatype	text;

1.8
date	2003.01.06.22.12.10;	author ervolina;	state Exp;
branches
	1.8.2.1;
next	1.7;
deltatype	text;

1.7
date	2002.08.08.17.37.43;	author ervolina;	state Exp;
branches;
next	1.6;
deltatype	text;

1.6
date	2002.03.28.21.49.43;	author ervolina;	state Exp;
branches;
next	1.5;
deltatype	text;

1.5
date	2001.12.03.13.38.51;	author ervolina;	state Exp;
branches;
next	1.4;
deltatype	text;

1.4
date	2001.10.11.19.59.21;	author ervolina;	state Exp;
branches;
next	1.3;
deltatype	text;

1.3
date	2001.06.01.16.52.05;	author ervolina;	state Exp;
branches;
next	1.2;
deltatype	text;

1.2
date	2000.10.04.15.48.39;	author ervolina;	state Exp;
branches;
next	1.1;
deltatype	text;

1.1
date	2000.02.25.18.36.51;	author wit;	state Exp;
branches
	1.1.1.1;
next	;
deltatype	text;

1.1.1.1
date	2000.02.25.18.36.51;	author wit;	state Exp;
branches;
next	;
deltatype	text;

1.8.2.1
date	2003.01.08.17.43.16;	author rwToStl;	state Exp;
branches;
next	1.8.2.2;
deltatype	text;

1.8.2.2
date	2003.01.09.13.14.32;	author rwToStl;	state Exp;
branches;
next	;
deltatype	text;


desc
@@


1.35
log
@cplex, and some cleanup
@
text
@// File:   ipSce.h

#ifndef LGFRINITIALPROBLEMFORSCE_H
#define LGFRINITIALPROBLEMFORSCE_H

// RW2STL - inserted:
#include <string>
#include <fstream>
// End of RW2STL - inserted includes.

// Initial problem for the Supply Chain Engine


#include <scenario/src/machdep.h>
#include <sce/src/sceDefin.h>

#include <scenario/src/initProb.h>
#include <scenario/src/scenP.h>
#include <sce/src/scenSceP.h>
#include <sce/src/modelHlp.h>

#include <stdlib.h>
#include <stdio.h>
#include <string.h>




#include <iostream>
#include <fstream>
#include <limits.h>
#include <float.h>


// forward references
class WitRun;
class SCETokenizer;
class LgFrSceCritList;
class LgFrCalendar;
class LgFrMultiPlantHelper;
class LgFrSetOfParts;
class LgFrSetOfDemands;
class LgFrDataInterface;
class LgFrDataInterfaceEssencials;
class LgFrSceScrubber;
// class LgFrTestDataInterface;
// class LgFrDataInterfaceFromThinAir;
// class LgFrDataInterfaceFromThinAir2;
// class LgFrDataInterfaceFromCmrpFiles;


class LgFrInitialProblemForSce: public LgFrInitialProblemAndParameters {

public:


void
process61TopLevelToOptionalFeatureFile(
    WitRun * const theWitRun,   
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);


  // Populates the LgFrWitRunVeneer's data structures using the data
  // from a dataInterface object.  It also populates any CMRP-specific
  // setOfParts.
virtual
void
feedInto(LgFrLastProblemSolved & lps);

  // Returns a description of the problem that is suitable for
  // use as a window heading. This can not be used to set the
  // title; only to query it.
virtual
std::string
title(const LgFrDataInterfaceEssentials* difEssenPtr = 0)
       const;

// we're going to give out the actual pointer.  Be careful!!  
virtual  
LgFrScenarioForSceSmartPointer
sceScenario()
  const;
  
  // Create a copy of the *this on the heap and return a pointer to it
  // Even thought this returns a LgFrInitialProblemAndParameters*, the pointer
  // must point to a LgFrInitialProblemForSce.
virtual
LgFrInitialProblemAndParameters*
clone()
       const;

  // Make a clone copy of this object with new Scenario
virtual
LgFrInitialProblemAndParameters*
clone ( LgFrScenarioSmartPointer )
        const;

// the preferred constructor
LgFrInitialProblemForSce(LgFrScenarioSmartPointer);

  // Destructor
~LgFrInitialProblemForSce();

  // Assignment operator.
LgFrInitialProblemForSce&
operator=(
          const LgFrInitialProblemForSce& rhs);


  // Copy constructor
LgFrInitialProblemForSce(
              const LgFrInitialProblemForSce& source);

  // Default Constructor
LgFrInitialProblemForSce();


void
completeTheInitialization(
    std::string & parameterFilename,
    LgFrCalendar & theCal,
    WitRun * theWitRun);

int
setTheCalendar(
    LgFrCalendar & theCal);

void
buildTheWitModelForSce(
    WitRun * const theWitRun,
    LgFrCalendar & theCal,
    LgFrMultiPlantHelper & mpHelper);

void 
openInputFileAndScrubOutputFile(
    const std::string & fileName,
    std::string fileDescription,
    std::ifstream & inFile,
    std::ofstream & outFile,
    LgFrSceScrubber * myScrubber,
    MclFacility * theErrFacil);


void
processPartDefinitionFile(
    
    WitRun * const theWitRun,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);


void
processCapacityDefinitionFile(
    
    WitRun * const theWitRun,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void 
processSourceDefFile(
    WitRun * const theWitRun,   
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);


void  
processOperationDefinitionFile(
    
    WitRun * const theWitRun,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);
  
void
processProdVolLBFile(
    
    WitRun * const theWitRun,   //
    const int nPeriods,         //
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void
processProdVolUBFile(
    
    WitRun * const theWitRun,   //
    const int nPeriods,         //
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

//
void
processOperationLBFile(
    
    WitRun * const theWitRun,   //
    const int nPeriods,         //
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void
processOperationUBFile(
    
    WitRun * const theWitRun,   //
    const int nPeriods,         //
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void
processSupplyFile(
    WitRun * const theWitRun,   //
    const LgFrCalendar & theCal,
    const int nPeriods,         //
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);


void 
processSupplyFile61(
    WitRun * const theWitRun,   
    const LgFrCalendar & theCal,
    const int nPeriods,         
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void
processCapacitySupplyFile61(
    WitRun * const theWitRun,   
    const LgFrCalendar & theCal,    
    const int nPeriods,         
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);


void
processCapacitySupplyFile(
    
    WitRun * const theWitRun,
    const int nPeriods,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);



void
processPartsConditionFile(
    
    WitRun * const theWitRun,   //
    const LgFrCalendar & theCal,    
    const int nPeriods,         //
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);


void 
scrubPartsConditionFile(
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,    
    const int nPeriods,         
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void 
scrubSupplyAvailabilityFile(
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,    
    const int nPeriods,         
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void 
scrubDemandVolumeFile(
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,    
    const int nPeriods,         
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);
 
void 
scrubMinDemandVolumeFile(
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,    
    const int nPeriods,         
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void 
processMinIndepDemandVolFile(
    WitRun * const theWitRun,  
    const int nPeriods,        
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);


void 
deleteUnnecessaryDemandAppData(
    WitRun * const theWitRun,
    const int nPeriods,         
    LgFrMultiPlantHelper & mpHelper);

void
processStandardBomFile(
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void
processBillOfCapacitiesFile(
    
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void
processOperationBomFile(
    
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void
processOperationBopFile(
    
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);


  
void
processAggregationFile(
    
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);


void processInterPlantFile(
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);


void processOperationSubBomFile(
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);



void processStandardBomSubFile(
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void processTopLevelToFeatureSetFile(
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void processTopLevelToFeatureSetFile61(
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);


void processFeatureSetToOptionRatioFile(
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);


void processFeatureSetToOptionRatioFile61(
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void processTopLevelToOptionalFeatureFile(
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void
processMachineFeatureOffsetFile(
    WitRun * const theWitRun,   
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void
processMachineFeatureSupplyFile(
    WitRun * const theWitRun,   
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);


int
preProcessNegativeDemands (
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper );



void processOptionRevenueFile(
    
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper,
    const float defaultOptionShipReward,
    const float periodicInterestRate);


  // SCE 6.1
void 
processDemandFile(
		  WitRun * const theWitRun,   
		  const LgFrCalendar & theCal,
		  const int nPeriods,         
		  const std::string & fileName,
		  LgFrMultiPlantHelper & mpHelper);

  // SCE 6.1
int
addGeoSourceAndDemandVolFromTINP(
				 WitRun * const theWitRun,
				 const std::string &  dataLine,
				 const std::string & plannerPartName,
				 const std::string & geo,
				 const std::string & pdf,
				 const std::string & requestDate,
				 float demandQty,
				 const std::string & fileName,
				 const long  lineNo,
				 const LgFrCalendar & theCal,
				 LgFrMultiPlantHelper & mpHelper);

// SCE 6.1
int 
addDemandVolFromINDP(WitRun * const theWitRun,
		     const std::string &  dataLine,
		     const int nPeriods,
		     const std::string &  partNumber,
		     const std::string &  demandName,
		     const std::string &  sourceLoc,
		     const std::string & requestDate,
		     float demandQty,
		     const std::string & fileName,
		     const long  lineNo,
		     const LgFrCalendar & theCal,
		     LgFrMultiPlantHelper & mpHelper);


void
processGeoSourceFile(
    
    WitRun * const theWitRun,
    const std::string & geoSourceFile,
    const LgFrCalendar & theCal,
    LgFrMultiPlantHelper & mpHelper);


void 
processIndependentDemandFile(
    WitRun * const theWitRun,   
    const LgFrCalendar & theCal,
    const int nPeriods,         
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);
  
void 
processIndepDemandObjectiveFile(
    WitRun * const theWitRun,   // 
    const int nPeriods,         //
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper,
    const float periodicInterestRate);


void
processDemandVolumeFile(
    WitRun * const theWitRun,
    const int nPeriods,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);



void
processMinDemandVolFile(
    WitRun * const theWitRun,   //
    const int nPeriods,         //
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void
processBacklogYieldFile(
    WitRun * const theWitRun,   //
    const int nPeriods,         //
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void
processGreedySearchIncFile(
    WitRun * const theWitRun,   //
    const int nPeriods,         //
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void 
processIndpGreedySearchIncFile(
    WitRun * const theWitRun,   // 
    const int nPeriods,         //
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);


// --------------------------------------------------------------------- 
void 
processBuildAheadFile(
    WitRun * const theWitRun,   
    const int nPeriods,         
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

// --------------------------------------------------------------------- 
void 
processScrapCostFile(
    WitRun * const theWitRun,   
    const int nPeriods,         
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

// --------------------------------------------------------------------- 
void 
processStockCostFile(
    WitRun * const theWitRun,   
    const int nPeriods,         
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void
processCycleTimeFile(
    
    WitRun * const theWitRun,
    const int nPeriods,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void
processYieldFile(
    
    WitRun * const theWitRun,
    const int nPeriods,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

void
processOperationYieldFile(
    
    WitRun * const theWitRun,
    const int nPeriods,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);
  
void
processLotSizeFile(
    
    WitRun * const theWitRun,
    const int nPeriods,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);


void 
processOperationExecCostFile(
    WitRun * const theWitRun,   
    const int nPeriods,         
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);



void 
processOperationIntegerExecFile(
    WitRun * const theWitRun,  
    const int nPeriods,         
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);


void 
processOperationExecPenaltyFile(
    WitRun * const theWitRun,   
    const int nPeriods,         
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);



void
processOperationLotSizeFile(
    WitRun * const theWitRun,
    const int nPeriods,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);
  

void
processInterPlantLotSizeFile(
    WitRun * const theWitRun,
    const int nPeriods,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);

  
void
processDemandObjectiveFile(
    WitRun * const theWitRun,
    const int nPeriods,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper,
    const float interestRate);

void 
processPipPriorityFile(
		       WitRun * const theWitRun,  
		       const int nPeriods,        
		       const std::string & fileName,
		       LgFrMultiPlantHelper & mpHelper);

void 
processPipIndpPriorityFile(
			   WitRun * const theWitRun,   // 
			   const int nPeriods,         //
			   const std::string & fileName,
			   LgFrMultiPlantHelper & mpHelper);


void 
shutOffAllLotSizing(
    WitRun * const theWitRun,
    const int nPeriods);


int
readCsvDemandFloatVector(
    WitRun * const theWitRun,            // WIT environment
    const int nPeriods,                  // Number of periods
    std::string & partName,                // partName to be returned
    std::string & demandName,              // demandName to be returned
    float *  floatVec,                   // floatVector to be returned
    std::ifstream & inFile,                    // An open stream
    const std::string & fileName,          // for messaging
    std::string & dataLine,
    long & lineNo,
    LgFrMultiPlantHelper & mpHelper,
    bool Mandatory,           // Are all elements mandatory?
    float lowerLimit=0.0,          // data lower limits
    float upperLimit=FLT_MAX,      // data upper limits
    bool addIfFound = (bool) false); // Add demand stream to WIT if not there

int
readCsvDemandFloatScalar(
    WitRun * const theWitRun,            // WIT environment
    const int nPeriods,                  // Number of periods
    std::string & partName,                // partName to be returned
    std::string & demandName,              // demandName to be returned
    float theValue,                   // floatVector to be returned
    std::ifstream & inFile,                    // An open stream
    const std::string & fileName,          // for messaging
    std::string & dataLine,
    long & lineNo,
    LgFrMultiPlantHelper & mpHelper,
    bool Mandatory,           // Are all elements mandatory?
    float lowerLimit=0.0,          // data lower limits
    float upperLimit=FLT_MAX,      // data upper limits
    bool addIfFound = (bool) false); // Add demand stream to WIT if not there

void
setSubsNetAllowed(bool subNetAllowed, 
		  LgFrMultiPlantHelper & mpHelper,
		  WitRun * const theWitRun  );
  

  void
setEngine(const std::string & engine);

std::string
getEngine();

bool
doesInputFileExist(
    const std::string & targetFile);

int
doesDemandExist(
    WitRun * const theWitRun,
    const std::string &  partName,
    const std::string &  demandName);




// Add part with default attributes to wit for NORMAL parts
// Return --->  0  if succesful
//             -1  if un-succesful with warning
//             >0  if Severe error
int
sceAddNormalPart(
    WitRun * const theWitRun,
    const std::string & part,
    const std::string & pdf,
    const bool buildNstn,
    const int * buildAheadUB,
    LgFrMultiPlantHelper & mpHelper,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);

int  
sceAddNormalCapacityPart(
    WitRun * const theWitRun,
    const std::string & capacity,
    const std::string & pdf,
    const int & mandatoryCapacityFlag,
    LgFrMultiPlantHelper & mpHelper,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);

int
sceAddNormalOperation(
    WitRun * const theWitRun,
    const std::string & operationName,
    const std::string & pdf,
    LgFrMultiPlantHelper & mpHelper,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);

// Add BOP entries and any default attributes
// to wit for NORMAL BOPs
// Return --->  0  if succesful
//             -1  if un-succesful with warning
//             +1  if un-sucessful & input record should be ignored
int
sceAddNormalBopStructure(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper,
    const std::string & producedPart,
    const std::string & producedPartPdf,
    const std::string & operation,
    const std::string & operationPdf,
    float prodRate,
    float offset,
    int early,
    int late,
    float preference,
    int isObjectInEffectForOptExplosion,
    int isBuildable,
    float pipShare,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);

// Add Operatoin BOM entries and any default attributes
// to wit for NORMAL Operation BOMs
// Return --->  0  if succesful
//             -1  if un-succesful with warning
//             +1  if un-sucessful & input record should be ignored
int
sceAddNormalOperationBomStructure(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper,
    const std::string & operation,
    const std::string & operationPdf,
    const std::string & consumedPart,
    const std::string & consumedPartPdf,
    float usageRate,
    float offset,
    int early,
    int late,
    int fallout,
    int mec,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);


// Add part(s) and any structure to wit for special aggregate part
// REturn --->  0  if succesful
//             -1  if un-succesful with warning
//             >0  if Severe error
int
sceAddAggregatePart(
    WitRun * const theWitRun,
    const std::string & part,
    const std::string & pdf,
    LgFrMultiPlantHelper & mpHelper,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);



// Add part(s) and any structure to wit for BB Category parts (BB/feature set)
// REturn --->  0  if succesful
//             -1  if un-succesful with warning
//             >0  if Severe error
int
sceAddBbCategoryPartAndStructureViaProportionalRoute(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper,
    const std::string & plannerTopLevelPart,
    const std::string & geo,
    const std::string & bbCategory,
    const float * gammaMaxVector,
    float gammaMin,
    int early,
    int late,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);

// Add part(s) and any structure to wit for BB Category parts (BB/feature set)
// REturn --->  0  if succesful
//             -1  if un-succesful with warning
//             >0  if Severe error
int
sceAddBbCategoryPartAndStructureViaProportionalRoute61(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper,
    const std::string & plannerTopLevelPart,
    const std::string & geo,
    const std::string & bbCategory,
    const float gammaMax,
    float gammaMin,
    int earlyPeriod,
    int latePeriod,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);


int
sceAddBbCategoryPartAndStructure(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper,
    const std::string & plannerTopLevelPart,
    const std::string & geo,
    const std::string & bbCategory,
    float gammaMax,
    float gammaMin,
    int early,
    int late,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);


int
sceAddPartToRepresentDemand(
    WitRun * const theWitRun,
    const std::string & fullPartname,
    LgFrMultiPlantHelper & mpHelper,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);


int
sceAddPartToRepresentDemandUpperBound(
    WitRun * const theWitRun,
    const std::string & fullPartname,
    LgFrMultiPlantHelper & mpHelper,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);


// Add a substitute BOM record
int
sceAddSubstitute(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper,
    bool isParentAnOperation,
    const std::string & mfgParentPartName,
    const std::string & parentPdf,
    const std::string & mfgChildPartName,
    const std::string & childPdf,
    const std::string & mfgSubPartName,
    const std::string & subPdf,
    float usageRate,
    int  early,
    int late,
    int fallout,
    float subCost,
    int  isObjectInEffectForOptExplosionFlag,
    int isSubstituteBuildable,
    bool subNetAllowed,
    float groupSharingExecPenaltyThresh,
    float offsetDelta,
    float prpRtg_Share,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);

// Add  Alternate Part Operation and structure
int
sceAddAlternatePartStructure(
    WitRun * const theWitRun, 
    LgFrMultiPlantHelper & mpHelper,
    int nPeriods,
    const std::string & mfgChildPartName, 
    const std::string & childPdf, 
    const std::string & mfgSubPartName,
    const std::string & subPdf,
    float usageRate,
    int  early, 
    int late,
    int fallout,
    float subCost,
    int isObjectInEffectForOptExplosionFlag,
    int isSubstituteBuildable,
    bool subNetAllowed,
    float groupSharingExecPenaltyThresh,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);


int
sceSetSourcingStructure(
    WitRun * const theWitRun, 
    LgFrMultiPlantHelper & mpHelper,
    const std::string & part, 
    const std::string & pdf,
    const std::string & source_code, 
    float pref_cost,
    int early,
    int late,
    int nPeriods,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);






// Normal BOM entry (mandatory)
int
sceAddNormalBomStructure(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper,
    const LgFrCalendar & theCal,
    const std::string & parent,
    const std::string & parentPdf,
    const std::string & child,
    const std::string & childPdf,
    float usageRate,
    float usageTime,
    int early,
    int late,
    int fallout,
    int mec,
    int phantomFlag,
    int removeBillFlag,
    int propRtg_flag,
    float propRtg_share,
    int nPeriods,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);

// Normal BOC entry (mandatory)
int
sceAddNormalBocStructure(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper,
    const LgFrCalendar & theCal,
    const std::string & parent,
    const std::string & parentPdf,
    const std::string & child,
    const std::string & childPdf,
    float usageRate,
    float usageTime,
    int early,
    int late,
    bool capacityOffsetToZero,
    const LgFrTimeVecFloat & zeroVec,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);


// Add aggregation part and structure
int
sceAddAggregateBomStructure(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper,
    const std::string & mfgPart,
    const std::string & mfgPdf,
    const std::string & aggregatePart,
    const std::string & aggregatePdf,
    float usageRate,
    float offset,
    float preference,
    int isObjectInEffectForOptExplosionFlag,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);


int
addInterPlantBomStructure(WitRun * const theWitRun, 
                          LgFrMultiPlantHelper & mpHelper,
                          const LgFrCalendar & theCal,
                          const std::string & destinationPart,
                          const std::string & destinationPdf,
                          const std::string & sourcePart, 
                          const std::string & sourcePdf,
                          float transitTime,
                          int early,
                          int late,
                          float minLotSize,
                          float incLotSize,
                          float usageRate,
                          float preference,
                          int isObjectInEffectForOptExplosionFlag,
                          int expAllowed,
			  float routingShare,
                          const std::string & fileName,
                          const std::string & dataLine,
                          long lineNo);

//  SCE 6.1
int
sceAddBBtoOptionBomStructureViaProportionalRoute61(
    WitRun * const theWitRun, 
    LgFrMultiPlantHelper & mpHelper,
    const LgFrCalendar & theCal,
    const std::string  & plannerTopLevelPart, 
    const std::string  & geo,
    const std::string  & bbCategory, 
    const std::string  & mfgOptionPart, 
    float                usageRate,
    float                attachRate,
    float                mfOffsetVal,
    int                  mfoPhantomFlag,
    float                mfSupplyVal,
    int                  earlyPeriod,
    int                  latePeriod,
    int                  requestPeriod,
    const std::string  & fileName,
    const std::string  & dataLine,
    long                 lineNo);

int
sceAddBBtoOptionBomStructureViaProportionalRoute(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper,
    const LgFrCalendar & theCal,
    const std::string & plannerTopLevelPart,
    const std::string & geo,
    const std::string & bbCategory,
    const std::string & mfgOptionPart,
    float usageRate,
    float * featureRatio,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);
int
sceAddBBtoOptionBomStructure(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper,
    const LgFrCalendar & theCal,
    const std::string & plannerTopLevelPart,
    const std::string & geo,
    const std::string & bbCategory,
    const std::string & mfgOptionPart,
    float usageRate,
    const float * featureRatio,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);

// This routine looks through all the parts in the WIT model
// and for any part with (1) multiple bop entries and 
// (2) a childless default operation, it
// "turns off" the effectivity of the default operation.
int
scePreProcessDefaultOperations(
    WitRun * const theWitRun,
    const int nPeriods );


  // copy over the priorities from the GPD to all the specialFeatureDemands
  // associated with this gpd.  
int 
sceSetPrioritiesForSpecialFeatureDemands(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper);
  

// This routine looks through all the parts in the WIT model
// and for any part with multiple bop entries "turns on" the lowest
// preference bop in the appropriate effectivity period and
// "turns off" all the other bops.
int
scePreProcessMultiBopEntries(
    WitRun * const theWitRun,
    bool useMultiRouteImplosion);


// preprocess multiple interplant entries
//
// This routine looks through all the parts in the WIT model
// for those produced from multiple interplant operations.
// If multiple interplant operations exist, then the
// supplier part at alternative
// interplant locations are made substitutes for the 
// supplier part at the preferred interplant location.
//
// Note: the 2.0 implementation of this method makes
// some strong assumptions about the input 
// data into SCE.
// (1) that interplant operations are effective over
// the entire planning horizon (valid for ECA; this 
// simplifies the implementation b/c effectivity
// dates and the corresponding multiple bop/boms they produce
// can be ignored. This assumption is for June6th SCEv2.0
// expediency and should be relaxed in the future).
// (2) that the transit time for alternative interplants is equal
// to the transit time of the preferred interplant (not valid for ECA
// but currently offsets on subBomEntries are not available in WIT).

int
scePreProcessMultiInterPlantEntries (
                              WitRun * const theWitRun,
                              LgFrMultiPlantHelper & mpHelper );


#ifdef BUILDING_BLOCKS_VIA_MULTI_BOPS  
// This routine uses MRP to explode the demand vols down to
// the featureSetPart
int
scePreProcessViaMrpViaMultiRoute(
    WitRun * const theWitRun,
    int nPeriods,
    const LgFrCalendar & theCal,
    LgFrMultiPlantHelper & mpHelper);
#else
// This routine uses MRP to explode the demand vols down to
// the featureSetPart
int
scePreProcessViaMrp(
    WitRun * const theWitRun,
    int nPeriods,
    const LgFrCalendar & theCal,
    LgFrMultiPlantHelper & mpHelper);
#endif


int 
checkAndFixIllegalSubNetAllowedCases(
				     WitRun * const theWitRun, 
				     LgFrMultiPlantHelper & mpHelper);




#ifdef BUILDING_BLOCKS_VIA_MULTI_BOPS
int
sceSetOptionRevenueViaMultiRoute(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper,
    const std::string & plannerTopLevelPart,
    const std::string & geo,
    const std::string & mfgOptionPart,
    float * featureRev,
    float periodicInterestRate,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);
#else
int
sceSetOptionRevenue(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper,
    const std::string & plannerTopLevelPart,
    const std::string & geo,
    const std::string & mfgOptionPart,
    float * featureRev,
    float periodicInterestRate,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);
#endif

int
sceAddStdAloneOptionBomStructure(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper,
    const std::string & plannerTopLevelPart,
    const std::string & geo,
    const std::string & mfgOptionPart,
    float usageRate,
    float * featureRatio,
    float * maxWithout,
    float * defaultGatingOptionSubPenalty,
    int   featureType,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);


  // SCE 5.X
int
sceAddCustChoiceFeatureStructure(
    WitRun * const theWitRun, 
    LgFrMultiPlantHelper & mpHelper,
    const LgFrCalendar & theCal,
    const std::string & plannerTopLevelPart, 
    const std::string & geo,
    const std::string & mfgOptionPart, 
    float usageRate,
    float * featureRatio,
    float * defaultGatingOptionSubPenalty,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);

  // SCE 6.1
int
sceAddCustChoiceFeatureStructure61(
    WitRun * const theWitRun, 
    LgFrMultiPlantHelper & mpHelper,
    const LgFrCalendar   & theCal,
    const std::string    & plannerTopLevelPart, 
    const std::string    & geo,
    const std::string    & featurePart, 
    float                  usageRate,
    float                  attachRate,
    float                  mfOffsetVal,
    int                    mfoPhantomFlag,
    float                  mfSupplyVol,
    int                    earlyPeriod,
    int                    latePeriod,
    float                * defaultGatingOptionSubPenalty,
    const std::string    & fileName,
    const std::string    & dataLine,
    long                   lineNo);

int
sceAddStdAloneOptionBomStructure61(
    WitRun * const theWitRun, 
    LgFrMultiPlantHelper & mpHelper,
    const LgFrCalendar   & theCal,
    const std::string    & plannerTopLevelPart, 
    const std::string    & geo,
    const std::string    & mfgOptionPart, 
    float                  usageRate,
    float                  attachRate,
    float                  maxWithout,
    float                  mfOffsetVal,
    int                    mfoPhantomFlag,
    float                  mfSupplyVal,
    float                * defaultGatingOptionSubPenalty,
    int                    earlyPeriod,
    int                    latePeriod,
    int                    featureType,
    const std::string    & fileName,
    const std::string    & dataLine,
    long                   lineNo);


int
sceAddMachineFeatureSupplyVol(
    WitRun * const theWitRun, 
    LgFrMultiPlantHelper & mpHelper,
    const std::string & plannerTopLevelPart, 
    const std::string & geo,
    const std::string & mfgOptionPart, 
    float *  supplyVol,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);



int
sceSetMachineFeatureOffset(
    WitRun * const theWitRun, 
    LgFrMultiPlantHelper & mpHelper,
    const LgFrCalendar & theCal,
    const std::string & plannerTopLevelPart, 
    const std::string & geo,
    const std::string & mfgOptionPart, 
    float offsetVal,
    int featurePhantomFlag,
    int start,
    int end,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);

void
removeGpdBopOffsets(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper);


  // Add BOM entry for a DemandPart --> to a Real Part
int
sceAddDemandBomStructure(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper,
    const LgFrCalendar & theCal,
    const std::string & fullParentPartname,
    const std::string & fullChildPartName,
    int early,
    int late,
    float transitTime,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);


  // Add BOM entry for a DemandPart --> to a Demand UpperBound Part
int
sceAddDemandUbBomStructure(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper,
    const std::string & fullParentPartname,
    const std::string & fullChildPartname,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);


  
  
void
printOverallHeuristicValues(
    WitRun * const theWitRun,   // WIT environment
    const int nPeriods,         // Number of periods
    const int nParts,           // Number of parts
    char ** partList,           // List of part names
    std::string fileName);


// ---------------------------------------------------------------
void 
printImpactPeriodFile(
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,    
    const int nPeriods,         
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);



//  Utility to determine if a floatVec is non-zero
bool
isFloatVecNonZero(
    float * theVector,       // the vector itself
    const int vLength);      // length of vector



void
setWitInformationalMessaging(WitRun * const theWitRun,
                             int onOrOff);



private:
  bool implementSmartFeatures_;
  LgFrSceHeurModelHelper * heurModelHelper_;
  LgFrSceLpModelHelper * lpModelHelper_;
  bool groupSharingViaExecPenalties_;
};

#endif

@


1.34
log
@convert capacity datamodel to dated intervals
@
text
@d604 11
a616 1
    
a626 1
    
a635 1
    
a644 1
    
@


1.33
log
@selective Sets is working under 6.1
@
text
@d217 1
a217 1
#ifdef DATED_SUPPLY_FILE
d219 1
a219 1
processDatedSupplyFile(
d225 9
a233 1
#endif
@


1.32
log
@mfo is folded into featratio file
@
text
@d357 6
a362 1
    
a369 1
    
d376 6
a382 1
    
d837 20
d1050 21
d1096 1
a1096 1
    float * featureRatio,
@


1.31
log
@6.1 prep commit ... many things in here
@
text
@d1180 2
d1197 43
@


1.30
log
@more fixes for 6.1
@
text
@d56 9
d410 41
@


1.29
log
@intermediate commit towards implementation of Partial Periods and removal of wit34Compatible needs.  This code set is work in progress.
@
text
@d142 1
a142 2
    LgFrMultiPlantHelper & mpHelper,
    const int fileFormat = SCE_STANDARD_FILE_FORMAT);
d407 1
a407 2
    LgFrMultiPlantHelper & mpHelper,
    bool createMfgPart = false);
d499 1
a499 2
    LgFrMultiPlantHelper & mpHelper,
    const int fileFormat = SCE_STANDARD_FILE_FORMAT);
d508 1
a508 2
    LgFrMultiPlantHelper & mpHelper,
    const int fileFormat = SCE_STANDARD_FILE_FORMAT);
d526 1
a526 2
    LgFrMultiPlantHelper & mpHelper,
    const int fileFormat = SCE_STANDARD_FILE_FORMAT);
d565 1
a565 2
    LgFrMultiPlantHelper & mpHelper,
    const int fileFormat = SCE_STANDARD_FILE_FORMAT);
a631 12


void
makeDemandFileForEpps(
    
    WitRun * const theWitRun,
    const std::string & demandVolumeFile,
    const std::string & demandSourceFile,
    const LgFrCalendar & theCal,
    LgFrMultiPlantHelper & mpHelper);


a637 1

d915 1
@


1.28
log
@Dated demands and multiAttributeDemand for indep DemandsVol and commits,
also for partDB
@
text
@d909 1
d994 1
d1008 1
d1152 1
d1205 1
@


1.27
log
@Version 5.  initial commit
@
text
@a202 1
    
d204 1
d414 3
a416 2
    WitRun * const theWitRun,   // 
    const int nPeriods,         //
@


1.26
log
@added function to report interplantPeg from perspective of supplier location.   basically, this shifts the interplant peg earlier to accomodate interplant lead-times
@
text
@a429 1
    
a438 1
    
a445 1
    
d451 14
d620 19
d854 1
d920 2
@


1.25
log
@sce 4.60, scrapCost, stockCost, greedySearchIncrement,pegging in heuristic, removal of optWithLotSizes
@
text
@d725 1
d823 1
@


1.24
log
@added function to print WIT impact period
@
text
@d464 8
d473 8
@


1.23
log
@initial changes for sce4.40
@
text
@d1182 10
@


1.22
log
@Preliminary commit for SCE 5.00
@
text
@d455 11
@


1.21
log
@put in check for forcing netAllowed=FALSE when illegal penalized exectuion situations
@
text
@d153 8
d823 19
d920 1
@


1.20
log
@removed the "binning" stuff which is now obsolete
@
text
@a771 1
    bool relaxedSubbingRulesAllowed,
a796 1
    bool relaxedSubbingRulesAllowed,
d1001 9
@


1.19
log
@got rid of witAddXXXVa
@
text
@a324 7
#ifdef BINNING_OPERATION_TEMP_SOLUTION
void processBinFile(
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,
    const std::string & fileName,
    LgFrMultiPlantHelper & mpHelper);
#endif
d894 1
a894 1
                          int isInterplantExplodeableAsSubstitute,
a898 23
#ifdef BINNING_OPERATION_TEMP_SOLUTION
int
addBinBomStructure(WitRun * const theWitRun, 
                          LgFrMultiPlantHelper & mpHelper,
                          const LgFrCalendar & theCal,
                          const std::string & destinationPart,
                          const std::string & destinationPdf,
                          const std::string & sourcePart, 
                          const std::string & sourcePdf,
                          float transitTime,
                          int early,
                          int late,
                          float minLotSize,
                          float incLotSize,
                          float usageRate,
                          float preference,
                          int isObjectInEffectForOptExplosionFlag,
                          int isBinExplodeableAsSubstitute,
                          const std::string & fileName,
                          const std::string & dataLine,
                          long lineNo);
#endif

a981 6
#ifdef BINNING_OPERATION_TEMP_SOLUTION
int
scePreProcessMultiBinEntries (
                              WitRun * const theWitRun,
                              LgFrMultiPlantHelper & mpHelper );
#endif
@


1.18
log
@4.20 commit: global subs, prioritized explode
@
text
@d842 1
a1133 21
// Pure options (NOT part of a SET)
int
sceAddPureOptionAsFixedBomStructure(
    WitRun * const theWitRun,
    LgFrMultiPlantHelper & mpHelper,
    const std::string & parent,
    const std::string & parentPdf,
    const std::string & child,
    const std::string & childPdf,
    float usageRate,
    float usageTime,
    int early,
    int late,
    int fallout,
    float featureRatio,
    float maxWithoutRatio,
    const std::string & fileName,
    const std::string & dataLine,
    long lineNo);


@


1.17
log
@preping for release 4.1
@
text
@d799 25
@


1.16
log
@feature sets logic automatically uses proportional routing when engine is NOT optimization.   for optimization, it uses the OLD BBCat modelling trick.
@
text
@d674 1
@


1.15
log
@pipIndpPriority for indpDemands LP engine
@
text
@a720 1
#ifdef FEATURE_SETS_VIA_PROPORTIONAL_ROUTING
d735 1
a735 1
#else
d750 1
a750 1
#endif
d902 1
a902 1
#ifdef FEATURE_SETS_VIA_PROPORTIONAL_ROUTING
a915 1
#else
a928 1
#endif
@


1.14
log
@pip for LP engine
@
text
@d550 7
@


1.13
log
@mand/opt capacity, new selective sets
@
text
@d543 7
@


1.12
log
@First cut at Selective Features using proportional routing
@
text
@d612 2
d624 1
d715 1
a715 1
    float gammaMax,
d820 2
@


1.11
log
@Needed to add
int
to several method calls (for the gcc compiler)
@
text
@d704 1
a704 1
#ifdef BUILDING_BLOCKS_VIA_MULTI_BOPS
d706 1
a706 1
sceAddBbCategoryPartAndStructureViaMultiRoute(
d884 1
a884 1
#ifdef BUILDING_BLOCKS_VIA_MULTI_BOPS
d886 1
a886 1
sceAddBBtoOptionBomStructureViaMultiRoute(
@


1.10
log
@parameter and logic to set Exec Penalties on subBoms so that Group Sharing Logic will sub before share
@
text
@d617 1
a617 1
  
d899 1
@


1.9
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@d777 1
@


1.8
log
@latest SCE updates for group sharing
@
text
@d6 5
a25 1
#include <rw/cstring.h>
d29 2
a30 2
#include <iostream.h>
#include <fstream.h>
d37 1
a37 1
class RWCTokenizer;
d67 2
a68 2
RWCString
title(const LgFrDataInterfaceEssentials* difEssenPtr = NULL)
d113 1
a113 1
    RWCString & parameterFilename,
d129 4
a132 4
    const RWCString & fileName,
    RWCString fileDescription,
    ifstream & inFile,
    ofstream & outFile,
d141 1
a141 1
    const RWCString & fileName,
d150 1
a150 1
    const RWCString & fileName,
d157 1
a157 1
    const RWCString & fileName,
d165 1
a165 1
    const RWCString & fileName,
d173 1
a173 1
    const RWCString & fileName,
d182 1
a182 1
    const RWCString & fileName,
d190 1
a190 1
    const RWCString & fileName,
d198 1
a198 1
    const RWCString & fileName,
d207 1
a207 1
    const RWCString & fileName,
d216 1
a216 1
    const RWCString & fileName,
d227 1
a227 1
    const RWCString & fileName,
d236 1
a236 1
    const RWCString & fileName,
d244 1
a244 1
    const RWCString & fileName,
d252 1
a252 1
    const RWCString & fileName,
d260 1
a260 1
    const RWCString & fileName,
d267 1
a267 1
    const RWCString & fileName,
d281 1
a281 1
    const RWCString & fileName,
d289 1
a289 1
    const RWCString & fileName,
d297 1
a297 1
    const RWCString & fileName,
d305 1
a305 1
    const RWCString & fileName,
d315 1
a315 1
    const RWCString & fileName,
d322 1
a322 1
    const RWCString & fileName,
d329 1
a329 1
    const RWCString & fileName,
d336 1
a336 1
    const RWCString & fileName,
d344 1
a344 1
    const RWCString & fileName,
d351 1
a351 1
    const RWCString & fileName,
d359 1
a359 1
    const RWCString & fileName,
d367 1
a367 1
    const RWCString & fileName,
d374 1
a374 1
    const RWCString & fileName,
d381 1
a381 1
    const RWCString & fileName,
d396 1
a396 1
    const RWCString & fileName,
d405 1
a405 1
    const RWCString & geoSourceFile,
d408 1
a408 1
    RWBoolean createMfgPart = FALSE);
d415 1
a415 1
    const RWCString & fileName,
d422 1
a422 1
    const RWCString & fileName,
d432 1
a432 1
    const RWCString & fileName,
d442 1
a442 1
    const RWCString & fileName,
d450 1
a450 1
    const RWCString & fileName,
d460 1
a460 1
    const RWCString & fileName,
d470 1
a470 1
    const RWCString & fileName,
d480 1
a480 1
    const RWCString & fileName,
d489 1
a489 1
    const RWCString & fileName,
d499 1
a499 1
    const RWCString & fileName,
d508 1
a508 1
    const RWCString & fileName,
d519 1
a519 1
    const RWCString & fileName,
d529 1
a529 1
    const RWCString & fileName,
d539 1
a539 1
    const RWCString & fileName,
d554 2
a555 2
    RWCString & partName,                // partName to be returned
    RWCString & demandName,              // demandName to be returned
d557 3
a559 3
    istream & inFile,                    // An open stream
    const RWCString & fileName,          // for messaging
    RWCString & dataLine,
d562 1
a562 1
    RWBoolean Mandatory,           // Are all elements mandatory?
d565 1
a565 1
    RWBoolean addIfFound = (RWBoolean) FALSE); // Add demand stream to WIT if not there
d571 2
a572 2
    const RWCString & demandVolumeFile,
    const RWCString & demandSourceFile,
d578 1
a578 1
setSubsNetAllowed(RWBoolean subNetAllowed, 
d585 1
a585 1
setEngine(const RWCString & engine);
d587 1
a587 1
RWCString
d590 1
a590 1
RWBoolean
d592 1
a592 1
    const RWCString & targetFile);
d597 2
a598 2
    const RWCString &  partName,
    const RWCString &  demandName);
d610 2
a611 2
    const RWCString & part,
    const RWCString & pdf,
d613 2
a614 2
    const RWCString & fileName,
    const RWCString & dataLine,
d620 2
a621 2
    const RWCString & capacity,
    const RWCString & pdf,
d623 2
a624 2
    const RWCString & fileName,
    const RWCString & dataLine,
d630 2
a631 2
    const RWCString & operationName,
    const RWCString & pdf,
d633 2
a634 2
    const RWCString & fileName,
    const RWCString & dataLine,
d646 4
a649 4
    const RWCString & producedPart,
    const RWCString & producedPartPdf,
    const RWCString & operation,
    const RWCString & operationPdf,
d657 2
a658 2
    const RWCString & fileName,
    const RWCString & dataLine,
d670 4
a673 4
    const RWCString & operation,
    const RWCString & operationPdf,
    const RWCString & consumedPart,
    const RWCString & consumedPartPdf,
d679 2
a680 2
    const RWCString & fileName,
    const RWCString & dataLine,
d691 2
a692 2
    const RWCString & part,
    const RWCString & pdf,
d694 2
a695 2
    const RWCString & fileName,
    const RWCString & dataLine,
d709 3
a711 3
    const RWCString & plannerTopLevelPart,
    const RWCString & geo,
    const RWCString & bbCategory,
d716 2
a717 2
    const RWCString & fileName,
    const RWCString & dataLine,
d724 3
a726 3
    const RWCString & plannerTopLevelPart,
    const RWCString & geo,
    const RWCString & bbCategory,
d731 2
a732 2
    const RWCString & fileName,
    const RWCString & dataLine,
d739 1
a739 1
    const RWCString & fullPartname,
d741 2
a742 2
    const RWCString & fileName,
    const RWCString & dataLine,
d749 1
a749 1
    const RWCString & fullPartname,
d751 2
a752 2
    const RWCString & fileName,
    const RWCString & dataLine,
d761 8
a768 8
    RWBoolean isParentAnOperation,
    RWBoolean relaxedSubbingRulesAllowed,
    const RWCString & mfgParentPartName,
    const RWCString & parentPdf,
    const RWCString & mfgChildPartName,
    const RWCString & childPdf,
    const RWCString & mfgSubPartName,
    const RWCString & subPdf,
d776 3
a778 3
    RWBoolean subNetAllowed,
    const RWCString & fileName,
    const RWCString & dataLine,
d787 4
a790 4
    const RWCString & parent,
    const RWCString & parentPdf,
    const RWCString & child,
    const RWCString & childPdf,
d799 2
a800 2
    const RWCString & fileName,
    const RWCString & dataLine,
d808 4
a811 4
    const RWCString & parent,
    const RWCString & parentPdf,
    const RWCString & child,
    const RWCString & childPdf,
d816 2
a817 2
    const RWCString & fileName,
    const RWCString & dataLine,
d826 4
a829 4
    const RWCString & mfgPart,
    const RWCString & mfgPdf,
    const RWCString & aggregatePart,
    const RWCString & aggregatePdf,
d834 2
a835 2
    const RWCString & fileName,
    const RWCString & dataLine,
d843 4
a846 4
                          const RWCString & destinationPart,
                          const RWCString & destinationPdf,
                          const RWCString & sourcePart, 
                          const RWCString & sourcePdf,
d856 2
a857 2
                          const RWCString & fileName,
                          const RWCString & dataLine,
d865 4
a868 4
                          const RWCString & destinationPart,
                          const RWCString & destinationPdf,
                          const RWCString & sourcePart, 
                          const RWCString & sourcePdf,
d878 2
a879 2
                          const RWCString & fileName,
                          const RWCString & dataLine,
d888 4
a891 4
    const RWCString & plannerTopLevelPart,
    const RWCString & geo,
    const RWCString & bbCategory,
    const RWCString & mfgOptionPart,
d894 2
a895 2
    const RWCString & fileName,
    const RWCString & dataLine,
d901 4
a904 4
    const RWCString & plannerTopLevelPart,
    const RWCString & geo,
    const RWCString & bbCategory,
    const RWCString & mfgOptionPart,
d907 2
a908 2
    const RWCString & fileName,
    const RWCString & dataLine,
d937 1
a937 1
    RWBoolean useMultiRouteImplosion);
d999 3
a1001 3
    const RWCString & plannerTopLevelPart,
    const RWCString & geo,
    const RWCString & mfgOptionPart,
d1004 2
a1005 2
    const RWCString & fileName,
    const RWCString & dataLine,
d1012 3
a1014 3
    const RWCString & plannerTopLevelPart,
    const RWCString & geo,
    const RWCString & mfgOptionPart,
d1017 2
a1018 2
    const RWCString & fileName,
    const RWCString & dataLine,
d1026 3
a1028 3
    const RWCString & plannerTopLevelPart,
    const RWCString & geo,
    const RWCString & mfgOptionPart,
d1034 2
a1035 2
    const RWCString & fileName,
    const RWCString & dataLine,
d1042 3
a1044 3
    const RWCString & plannerTopLevelPart, 
    const RWCString & geo,
    const RWCString & mfgOptionPart, 
d1048 2
a1049 2
    const RWCString & fileName,
    const RWCString & dataLine,
d1057 3
a1059 3
    const RWCString & plannerTopLevelPart, 
    const RWCString & geo,
    const RWCString & mfgOptionPart, 
d1061 2
a1062 2
    const RWCString & fileName,
    const RWCString & dataLine,
d1072 3
a1074 3
    const RWCString & plannerTopLevelPart, 
    const RWCString & geo,
    const RWCString & mfgOptionPart, 
d1079 2
a1080 2
    const RWCString & fileName,
    const RWCString & dataLine,
d1094 4
a1097 4
    const RWCString & parent,
    const RWCString & parentPdf,
    const RWCString & child,
    const RWCString & childPdf,
d1105 2
a1106 2
    const RWCString & fileName,
    const RWCString & dataLine,
d1115 2
a1116 2
    const RWCString & fullParentPartname,
    const RWCString & fullChildPartName,
d1120 2
a1121 2
    const RWCString & fileName,
    const RWCString & dataLine,
d1130 4
a1133 4
    const RWCString & fullParentPartname,
    const RWCString & fullChildPartname,
    const RWCString & fileName,
    const RWCString & dataLine,
d1145 1
a1145 1
    RWCString fileName);
d1150 1
a1150 1
RWBoolean
d1164 1
a1164 1
  RWBoolean implementSmartFeatures_;
d1167 1
a1167 1
  RWBoolean groupSharingViaExecPenalties_;
@


1.8.2.1
log
@Roguewave is gone
@
text
@a5 5
// RW2STL - inserted:
#include <string>
#include <fstream>
// End of RW2STL - inserted includes.

d21 1
d26 1
a26 1
#include <fstream>
d33 1
a33 1
class SCETokenizer;
d63 2
a64 2
std::string
title(const LgFrDataInterfaceEssentials* difEssenPtr = 0)
d109 1
a109 1
    std::string & parameterFilename,
d125 4
a128 4
    const std::string & fileName,
    std::string fileDescription,
    std::ifstream & inFile,
    std::ofstream & outFile,
d137 1
a137 1
    const std::string & fileName,
d146 1
a146 1
    const std::string & fileName,
d153 1
a153 1
    const std::string & fileName,
d161 1
a161 1
    const std::string & fileName,
d169 1
a169 1
    const std::string & fileName,
d178 1
a178 1
    const std::string & fileName,
d186 1
a186 1
    const std::string & fileName,
d194 1
a194 1
    const std::string & fileName,
d203 1
a203 1
    const std::string & fileName,
d212 1
a212 1
    const std::string & fileName,
d223 1
a223 1
    const std::string & fileName,
d232 1
a232 1
    const std::string & fileName,
d240 1
a240 1
    const std::string & fileName,
d248 1
a248 1
    const std::string & fileName,
d256 1
a256 1
    const std::string & fileName,
d263 1
a263 1
    const std::string & fileName,
d277 1
a277 1
    const std::string & fileName,
d285 1
a285 1
    const std::string & fileName,
d293 1
a293 1
    const std::string & fileName,
d301 1
a301 1
    const std::string & fileName,
d311 1
a311 1
    const std::string & fileName,
d318 1
a318 1
    const std::string & fileName,
d325 1
a325 1
    const std::string & fileName,
d332 1
a332 1
    const std::string & fileName,
d340 1
a340 1
    const std::string & fileName,
d347 1
a347 1
    const std::string & fileName,
d355 1
a355 1
    const std::string & fileName,
d363 1
a363 1
    const std::string & fileName,
d370 1
a370 1
    const std::string & fileName,
d377 1
a377 1
    const std::string & fileName,
d392 1
a392 1
    const std::string & fileName,
d401 1
a401 1
    const std::string & geoSourceFile,
d404 1
a404 1
    bool createMfgPart = false);
d411 1
a411 1
    const std::string & fileName,
d418 1
a418 1
    const std::string & fileName,
d428 1
a428 1
    const std::string & fileName,
d438 1
a438 1
    const std::string & fileName,
d446 1
a446 1
    const std::string & fileName,
d456 1
a456 1
    const std::string & fileName,
d466 1
a466 1
    const std::string & fileName,
d476 1
a476 1
    const std::string & fileName,
d485 1
a485 1
    const std::string & fileName,
d495 1
a495 1
    const std::string & fileName,
d504 1
a504 1
    const std::string & fileName,
d515 1
a515 1
    const std::string & fileName,
d525 1
a525 1
    const std::string & fileName,
d535 1
a535 1
    const std::string & fileName,
d550 2
a551 2
    std::string & partName,                // partName to be returned
    std::string & demandName,              // demandName to be returned
d553 3
a555 3
    std::ifstream & inFile,                    // An open stream
    const std::string & fileName,          // for messaging
    std::string & dataLine,
d558 1
a558 1
    bool Mandatory,           // Are all elements mandatory?
d561 1
a561 1
    bool addIfFound = (bool) false); // Add demand stream to WIT if not there
d567 2
a568 2
    const std::string & demandVolumeFile,
    const std::string & demandSourceFile,
d574 1
a574 1
setSubsNetAllowed(bool subNetAllowed, 
d581 1
a581 1
setEngine(const std::string & engine);
d583 1
a583 1
std::string
d586 1
a586 1
bool
d588 1
a588 1
    const std::string & targetFile);
d593 2
a594 2
    const std::string &  partName,
    const std::string &  demandName);
d606 2
a607 2
    const std::string & part,
    const std::string & pdf,
d609 2
a610 2
    const std::string & fileName,
    const std::string & dataLine,
d616 2
a617 2
    const std::string & capacity,
    const std::string & pdf,
d619 2
a620 2
    const std::string & fileName,
    const std::string & dataLine,
d626 2
a627 2
    const std::string & operationName,
    const std::string & pdf,
d629 2
a630 2
    const std::string & fileName,
    const std::string & dataLine,
d642 4
a645 4
    const std::string & producedPart,
    const std::string & producedPartPdf,
    const std::string & operation,
    const std::string & operationPdf,
d653 2
a654 2
    const std::string & fileName,
    const std::string & dataLine,
d666 4
a669 4
    const std::string & operation,
    const std::string & operationPdf,
    const std::string & consumedPart,
    const std::string & consumedPartPdf,
d675 2
a676 2
    const std::string & fileName,
    const std::string & dataLine,
d687 2
a688 2
    const std::string & part,
    const std::string & pdf,
d690 2
a691 2
    const std::string & fileName,
    const std::string & dataLine,
d705 3
a707 3
    const std::string & plannerTopLevelPart,
    const std::string & geo,
    const std::string & bbCategory,
d712 2
a713 2
    const std::string & fileName,
    const std::string & dataLine,
d720 3
a722 3
    const std::string & plannerTopLevelPart,
    const std::string & geo,
    const std::string & bbCategory,
d727 2
a728 2
    const std::string & fileName,
    const std::string & dataLine,
d735 1
a735 1
    const std::string & fullPartname,
d737 2
a738 2
    const std::string & fileName,
    const std::string & dataLine,
d745 1
a745 1
    const std::string & fullPartname,
d747 2
a748 2
    const std::string & fileName,
    const std::string & dataLine,
d757 8
a764 8
    bool isParentAnOperation,
    bool relaxedSubbingRulesAllowed,
    const std::string & mfgParentPartName,
    const std::string & parentPdf,
    const std::string & mfgChildPartName,
    const std::string & childPdf,
    const std::string & mfgSubPartName,
    const std::string & subPdf,
d772 3
a774 3
    bool subNetAllowed,
    const std::string & fileName,
    const std::string & dataLine,
d783 4
a786 4
    const std::string & parent,
    const std::string & parentPdf,
    const std::string & child,
    const std::string & childPdf,
d795 2
a796 2
    const std::string & fileName,
    const std::string & dataLine,
d804 4
a807 4
    const std::string & parent,
    const std::string & parentPdf,
    const std::string & child,
    const std::string & childPdf,
d812 2
a813 2
    const std::string & fileName,
    const std::string & dataLine,
d822 4
a825 4
    const std::string & mfgPart,
    const std::string & mfgPdf,
    const std::string & aggregatePart,
    const std::string & aggregatePdf,
d830 2
a831 2
    const std::string & fileName,
    const std::string & dataLine,
d839 4
a842 4
                          const std::string & destinationPart,
                          const std::string & destinationPdf,
                          const std::string & sourcePart, 
                          const std::string & sourcePdf,
d852 2
a853 2
                          const std::string & fileName,
                          const std::string & dataLine,
d861 4
a864 4
                          const std::string & destinationPart,
                          const std::string & destinationPdf,
                          const std::string & sourcePart, 
                          const std::string & sourcePdf,
d874 2
a875 2
                          const std::string & fileName,
                          const std::string & dataLine,
d884 4
a887 4
    const std::string & plannerTopLevelPart,
    const std::string & geo,
    const std::string & bbCategory,
    const std::string & mfgOptionPart,
d890 2
a891 2
    const std::string & fileName,
    const std::string & dataLine,
d897 4
a900 4
    const std::string & plannerTopLevelPart,
    const std::string & geo,
    const std::string & bbCategory,
    const std::string & mfgOptionPart,
d903 2
a904 2
    const std::string & fileName,
    const std::string & dataLine,
d933 1
a933 1
    bool useMultiRouteImplosion);
d995 3
a997 3
    const std::string & plannerTopLevelPart,
    const std::string & geo,
    const std::string & mfgOptionPart,
d1000 2
a1001 2
    const std::string & fileName,
    const std::string & dataLine,
d1008 3
a1010 3
    const std::string & plannerTopLevelPart,
    const std::string & geo,
    const std::string & mfgOptionPart,
d1013 2
a1014 2
    const std::string & fileName,
    const std::string & dataLine,
d1022 3
a1024 3
    const std::string & plannerTopLevelPart,
    const std::string & geo,
    const std::string & mfgOptionPart,
d1030 2
a1031 2
    const std::string & fileName,
    const std::string & dataLine,
d1038 3
a1040 3
    const std::string & plannerTopLevelPart, 
    const std::string & geo,
    const std::string & mfgOptionPart, 
d1044 2
a1045 2
    const std::string & fileName,
    const std::string & dataLine,
d1053 3
a1055 3
    const std::string & plannerTopLevelPart, 
    const std::string & geo,
    const std::string & mfgOptionPart, 
d1057 2
a1058 2
    const std::string & fileName,
    const std::string & dataLine,
d1068 3
a1070 3
    const std::string & plannerTopLevelPart, 
    const std::string & geo,
    const std::string & mfgOptionPart, 
d1075 2
a1076 2
    const std::string & fileName,
    const std::string & dataLine,
d1090 4
a1093 4
    const std::string & parent,
    const std::string & parentPdf,
    const std::string & child,
    const std::string & childPdf,
d1101 2
a1102 2
    const std::string & fileName,
    const std::string & dataLine,
d1111 2
a1112 2
    const std::string & fullParentPartname,
    const std::string & fullChildPartName,
d1116 2
a1117 2
    const std::string & fileName,
    const std::string & dataLine,
d1126 4
a1129 4
    const std::string & fullParentPartname,
    const std::string & fullChildPartname,
    const std::string & fileName,
    const std::string & dataLine,
d1141 1
a1141 1
    std::string fileName);
d1146 1
a1146 1
bool
d1160 1
a1160 1
  bool implementSmartFeatures_;
d1163 1
a1163 1
  bool groupSharingViaExecPenalties_;
@


1.8.2.2
log
@Went all the way to std::cout
@
text
@d29 1
a29 1
#include <iostream>
@


1.7
log
@bogon output, and minor changes
@
text
@d772 1
d1163 1
@


1.6
log
@3.11 commit
@
text
@a106 14


// ============================================================
// ============================================================
// ============================================================
// ============================================================
// Here's all the SCE stuff that's been crammed into
// ipSCE


// ============================================================
// ============================================================
// =========(this is sceInit.h ================================

d108 1
a108 1
oldMain (
d118 1
a118 1
initializeTheWitRunForSCE(
d489 1
a489 1
#ifdef EXEC_COSTS
a496 1
#endif
@


1.5
log
@yet another fix for setPureOptionBuild.
New parameter: shutOffAllLotSizing ... which does just that
@
text
@d211 9
a219 3



d272 8
@


1.4
log
@added access to BOP explodable flag for user defined operations
also added message for JP
@
text
@d541 6
@


1.3
log
@changes for Release 3.00
@
text
@d647 1
@


1.2
log
@modifications for sce 2.31
@
text
@d489 9
@


1.1
log
@Initial revision
@
text
@d135 1
a135 3
    LgFrMultiPlantHelper & mpHelper,
    const RWBoolean makeDemandFileForEppsFlag = FALSE);

a273 9
processEPPSBomFile(
    
    WitRun * const theWitRun,
    const LgFrCalendar & theCal,
    const RWCString & fileName,
    LgFrMultiPlantHelper & mpHelper);


void
d547 1
a547 1
    RWBoolean addIfFound = FALSE); // Add demand stream to WIT if not there
@


1.1.1.1
log
@Import sce
@
text
@@
