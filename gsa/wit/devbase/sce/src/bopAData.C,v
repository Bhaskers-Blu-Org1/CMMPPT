head	1.3;
access;
symbols
	sce_5_01_20080919:1.3
	latest_sce_4_20_20060523:1.3.0.4
	sce_4_20_20060523:1.3
	latest_sce4_20_OSL:1.3.0.2
	sce_4_20_OSL:1.3
	sce_4_20_20051222:1.3
	sce_4_10_30050426:1.1.1.1
	sce_4_05_20040511:1.1.1.1
	sce_4_00_20040201:1.1.1.1
	nextGenBranch:1.1.1.1.0.16
	nextGenRoot:1.1.1.1
	sce_3_30_20030627:1.1.1.1
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2005.11.09.18.32.46;	author ervolina;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.02.18.40.00;	author ervolina;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.18.36.49;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.49;	author wit;	state Exp;
branches;
next	;


desc
@@


1.3
log
@removed the "binning" stuff which is now obsolete
@
text
@// file: bopAData.C
// author: robin

#include <sce/src/bopAData.h>
#include <assert.h>



LgFrSceAppData *
LgFrSceBopAppData::clone()
const
{
  LgFrSceBopAppData * temp = new LgFrSceBopAppData(*this);

  // nothing to deep copy

  return temp;
}



// a better constructor 
LgFrSceBopAppData::LgFrSceBopAppData(float defaultPreference,
                                     int isObjectInEffectForOptExplosionFlag,
				     int expAllowed)
  :   preference_ (defaultPreference),
      isObjectInEffectForOptExplosion_ (isObjectInEffectForOptExplosionFlag),
      expAllowed_ (expAllowed)
{
  // all the work is done in initializer
}

// default constructor 
LgFrSceBopAppData::LgFrSceBopAppData()
  :   preference_ (0.0),
      isObjectInEffectForOptExplosion_ (1),
      expAllowed_ (0)
{
  assert (1 == 0); // don't use this constructor
}

// get "preference" 
const
float
LgFrSceBopAppData::preference () const
{
  return preference_;
}

// set "preference"
void
LgFrSceBopAppData::preference (const float pref)
{                                                  
  preference_ = pref ;
}

// get "in affect for opt explosion" flag
const
int
LgFrSceBopAppData::isObjectInEffectForOptExplosion () const
{
  return isObjectInEffectForOptExplosion_;
}

// set "in affect for opt explosion" flag
void
LgFrSceBopAppData::isObjectInEffectForOptExplosion(
                const int isObjectInEffectForOptExplosion)
{
  isObjectInEffectForOptExplosion_ = isObjectInEffectForOptExplosion;
}


// get "expAllowed" flag
const
int
LgFrSceBopAppData::expAllowed () const
{
  return expAllowed_;
}

// set "expAllowed" flag
void
LgFrSceBopAppData::expAllowed(
                const int expAllowed)
{
  expAllowed_ = expAllowed;
}



// assignment operator
LgFrSceBopAppData&
LgFrSceBopAppData::operator=(const LgFrSceBopAppData& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
    preference_ = rhs.preference_ ;
    isObjectInEffectForOptExplosion_ = rhs.isObjectInEffectForOptExplosion_;
    expAllowed_ = rhs.expAllowed_;
  }
  return *this;
}

// copy constructor 
LgFrSceBopAppData::LgFrSceBopAppData(const LgFrSceBopAppData& source)
  :   preference_ (source.preference_),
      isObjectInEffectForOptExplosion_ (source.isObjectInEffectForOptExplosion_),
      expAllowed_ (source.expAllowed_)
{
  // nothing to do
}

// destructor
LgFrSceBopAppData::~LgFrSceBopAppData()
{
  // nothing to do, 
}
@


1.2
log
@First pass at sce 4.20 function.
@
text
@d25 1
a25 1
				     int isInterplantExplodeableAsSubstitute)
d28 1
a28 4
#ifdef BINNING_OPERATION_TEMP_SOLUTION
      isBinExplodeableAsSubstitute_ (0),
#endif
      isInterplantExplodeableAsSubstitute_ (isInterplantExplodeableAsSubstitute)
d37 1
a37 4
#ifdef BINNING_OPERATION_TEMP_SOLUTION
      isBinExplodeableAsSubstitute_ (0),
#endif
      isInterplantExplodeableAsSubstitute_ (0)
d74 1
a74 2
#ifdef BINNING_OPERATION_TEMP_SOLUTION
// get "isBinExplodeableAsSubstitute" flag
d77 1
a77 1
LgFrSceBopAppData::isBinExplodeableAsSubstitute () const
d79 1
a79 1
  return isBinExplodeableAsSubstitute_;
d82 1
a82 1
// set "isBinExplodeableAsSubstitute" flag
d84 2
a85 2
LgFrSceBopAppData::isBinExplodeableAsSubstitute(
                const int isBinExplodeableAsSubstitute)
d87 1
a87 22
  isBinExplodeableAsSubstitute_ = isBinExplodeableAsSubstitute;
}


#endif



// get "isInterplantExplodeableAsSubstitute" flag
const
int
LgFrSceBopAppData::isInterplantExplodeableAsSubstitute () const
{
  return isInterplantExplodeableAsSubstitute_;
}

// set "isInterplantExplodeableAsSubstitute" flag
void
LgFrSceBopAppData::isInterplantExplodeableAsSubstitute(
                const int isInterplantExplodeableAsSubstitute)
{
  isInterplantExplodeableAsSubstitute_ = isInterplantExplodeableAsSubstitute;
d99 1
a99 4
#ifdef BINNING_OPERATION_TEMP_SOLUTION
    isBinExplodeableAsSubstitute_ = rhs.isBinExplodeableAsSubstitute_;
#endif
    isInterplantExplodeableAsSubstitute_ = rhs.isInterplantExplodeableAsSubstitute_;
d108 1
a108 4
#ifdef BINNING_OPERATION_TEMP_SOLUTION
      isBinExplodeableAsSubstitute_ (source.isBinExplodeableAsSubstitute_),
#endif
      isInterplantExplodeableAsSubstitute_ (source.isInterplantExplodeableAsSubstitute_)
@


1.1
log
@Initial revision
@
text
@d7 15
@


1.1.1.1
log
@Import sce
@
text
@@
