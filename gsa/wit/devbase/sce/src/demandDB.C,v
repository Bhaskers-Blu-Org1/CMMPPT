head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_20_20051222:1.2
	sce_4_10_30050426:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.54;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.18.36.49;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.49;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.43.14;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@
// RW2STL - inserted:
#include <string>
// End of RW2STL - inserted includes.
#include <sce/src/demandDB.h>
#include <sce/src/dbLink.h>
#include <sce/src/dbProf.h>
#include <iostream.h>
#include <string.h>
#include <ctype.h>

SceDemandDB::SceDemandDB() : SceDBObj()
{
}
void SceDemandDB::update(const char* field, const SceDBLink& demand)
{
  int i = 0; // Pulled out of the for below by RW2STL
  for (i=1; i<demand.size() + 1; i++)
    {
      groupUpdate(field,demand.nPeriods(),(const char*)(SceStringArg&)demand[i][1],
                  (const char*)(SceStringArg&)demand[i][2],
                  (float*)(SceFloatVectorArg&)demand[i][3]);
    }
}

void SceDemandDB::groupUpdate(                 
                   const char *   field,
                   int            nPeriods,
                   const char*    part,
                   const char *   geo,
                   float *        timeVec)
{
  SQLRETURN       rc;
  SQLUINTEGER     pirow = 0;
  float           value;
  int             period;
  char *          thePart = (char*) part;
  char *          theGeo = (char*) geo;
  std::string       update;
 
 {
   std::string inst = SceDBProfile::getDbInstance();
   std::string tbl = (inst.empty() ? "DEMAND " : (const char*)(inst+".DEMAND "));
   update = "UPDATE " + tbl;
   update = update + "SET ";
   update = update + field;
   update = update + " = ? where Partnumber = ? and geography = ? and periodnum = ?";
 
 }

 // Prepare the statement
 
 rc = SQLPrepare(sqlhstmt_, (SQLCHAR*) update.c_str(), SQL_NTS);
 CHECK_STMT(sqlhstmt_, rc);

 rc = SQLBindParameter(sqlhstmt_, 1, SQL_PARAM_INPUT, SQL_C_FLOAT, SQL_DOUBLE,
                       10, 2, &value, 0, 0);
 CHECK_STMT(sqlhstmt_, rc);
 
 rc = SQLBindParameter(sqlhstmt_, 2, SQL_PARAM_INPUT, SQL_C_CHAR, SQL_VARCHAR,
                       LEN, 0, thePart, LEN, 0);
 CHECK_STMT(sqlhstmt_, rc);
 
 rc = SQLBindParameter(sqlhstmt_, 3, SQL_PARAM_INPUT, SQL_C_CHAR, SQL_CHAR,
                       LEN, 0, theGeo, LEN, 0);
 CHECK_STMT(sqlhstmt_, rc);

 rc = SQLBindParameter(sqlhstmt_, 4, SQL_PARAM_INPUT, SQL_C_SLONG, SQL_INTEGER,
                       0, 0, &period, 0, 0);

 CHECK_STMT(sqlhstmt_, rc);
 

 // prepare a record and execute update 

 int i = 0; // Pulled out of the for below by RW2STL
 for (i=0; i< nPeriods; i++)
   {
     value = timeVec[i];
     period = i;
     rc = SQLExecute(sqlhstmt_);
     CHECK_STMT(sqlhstmt_, rc);
   }

 //return pirow;
}




@


1.1
log
@Initial revision
@
text
@d1 4
d17 2
a18 1
  for (int i=1; i<demand.entries() + 1; i++)
d39 1
a39 1
  RWCString       update;
d42 2
a43 2
   RWCString inst = SceDBProfile::getDbInstance();
   RWCString tbl = (inst.isNull() ? "DEMAND " : (const char*)(inst+".DEMAND "));
d53 1
a53 1
 rc = SQLPrepare(sqlhstmt_, (SQLCHAR*) update.data(), SQL_NTS);
d57 1
a57 1
                       10, 2, &value, 0, NULL);
d61 1
a61 1
                       LEN, 0, thePart, LEN, NULL);
d65 1
a65 1
                       LEN, 0, theGeo, LEN, NULL);
d69 1
a69 1
                       0, 0, &period, 0, NULL);
d76 2
a77 1
 for (int i=0; i< nPeriods; i++)
@


1.1.1.1
log
@Import sce
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 4

// RW2STL - inserted:
#include <string>
// End of RW2STL - inserted includes.
d13 1
a13 2
  int i = 0; // Pulled out of the for below by RW2STL
  for (i=1; i<demand.size() + 1; i++)
d34 1
a34 1
  std::string       update;
d37 2
a38 2
   std::string inst = SceDBProfile::getDbInstance();
   std::string tbl = (inst.empty() ? "DEMAND " : (const char*)(inst+".DEMAND "));
d48 1
a48 1
 rc = SQLPrepare(sqlhstmt_, (SQLCHAR*) update.c_str(), SQL_NTS);
d52 1
a52 1
                       10, 2, &value, 0, 0);
d56 1
a56 1
                       LEN, 0, thePart, LEN, 0);
d60 1
a60 1
                       LEN, 0, theGeo, LEN, 0);
d64 1
a64 1
                       0, 0, &period, 0, 0);
d71 1
a71 2
 int i = 0; // Pulled out of the for below by RW2STL
 for (i=0; i< nPeriods; i++)
@

