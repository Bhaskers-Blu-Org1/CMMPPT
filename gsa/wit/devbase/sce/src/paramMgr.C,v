head	1.63;
access;
symbols
	sce_5_01_20080919:1.54
	latest_sce_4_20_20060523:1.43.0.4
	sce_4_20_20060523:1.43
	latest_sce4_20_OSL:1.43.0.2
	sce_4_20_OSL:1.43
	sce_4_20_20051222:1.43
	sce_4_10_30050426:1.38
	sce_4_05_20040511:1.37
	sce_4_00_20040201:1.30
	nextGenBranch:1.21.0.2
	nextGenRoot:1.21
	sce_3_30_20030627:1.21
	EndRw-branch:1.17.0.2
	Root-of-EndRw:1.17
	EndWitRw-branch:1.15.0.4
	Root-of-EndWitRw:1.15
	RwToStl-branch:1.15.0.2
	Root-of-RwToStl:1.15
	latest_sce_3_10_20010924:1.3.0.2
	sce_3_10_20010924:1.3
	latest_sce_3_00_20010601:1.2.0.2
	sce_3_00_20010601:1.2
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.63
date	2011.04.15.01.23.33;	author yktdev;	state Exp;
branches;
next	1.62;
commitid	13e64da79e0e4567;

1.62
date	2011.03.24.02.10.28;	author ervolina;	state Exp;
branches;
next	1.61;
deltatype	text;
permissions	644;
commitid	1ec4d8aa79a62d9;
kopt	kv;
filename	@paramMgr.C@;

1.61
date	2011.03.10.15.32.12;	author ervolina;	state Exp;
branches;
next	1.60;
deltatype	text;
permissions	644;
commitid	14cc4d78ede700a2;
kopt	kv;
filename	@paramMgr.C@;

1.60
date	2010.04.20.14.26.56;	author ervolina;	state Exp;
branches;
next	1.59;
deltatype	text;

1.59
date	2010.03.26.19.48.24;	author ervolina;	state Exp;
branches;
next	1.58;
deltatype	text;

1.58
date	2010.03.13.18.53.05;	author ervolina;	state Exp;
branches;
next	1.57;
deltatype	text;

1.57
date	2010.02.04.15.58.24;	author ervolina;	state Exp;
branches;
next	1.56;
deltatype	text;

1.56
date	2009.12.08.13.58.35;	author ervolina;	state Exp;
branches;
next	1.55;
deltatype	text;

1.55
date	2009.01.28.14.22.31;	author ervolina;	state Exp;
branches;
next	1.54;
deltatype	text;

1.54
date	2008.06.04.16.08.23;	author ervolina;	state Exp;
branches;
next	1.53;
deltatype	text;

1.53
date	2008.04.24.14.04.42;	author ervolina;	state Exp;
branches;
next	1.52;
deltatype	text;

1.52
date	2008.03.20.14.52.48;	author ervolina;	state Exp;
branches;
next	1.51;
deltatype	text;

1.51
date	2008.03.14.20.19.40;	author ervolina;	state Exp;
branches;
next	1.50;
deltatype	text;

1.50
date	2007.05.29.20.03.33;	author ervolina;	state Exp;
branches;
next	1.49;
deltatype	text;

1.49
date	2007.03.21.18.03.29;	author ervolina;	state Exp;
branches;
next	1.48;
deltatype	text;

1.48
date	2006.08.17.17.46.56;	author ervolina;	state Exp;
branches;
next	1.47;
deltatype	text;

1.47
date	2006.08.11.19.28.15;	author ervolina;	state Exp;
branches;
next	1.46;
deltatype	text;

1.46
date	2006.08.09.16.32.18;	author ervolina;	state Exp;
branches;
next	1.45;
deltatype	text;

1.45
date	2006.06.26.15.23.31;	author ervolina;	state Exp;
branches;
next	1.44;
deltatype	text;

1.44
date	2006.06.15.17.45.43;	author ervolina;	state Exp;
branches;
next	1.43;
deltatype	text;

1.43
date	2005.11.10.13.28.41;	author ervolina;	state Exp;
branches
	1.43.4.1;
next	1.42;
deltatype	text;

1.42
date	2005.11.09.18.32.47;	author ervolina;	state Exp;
branches;
next	1.41;
deltatype	text;

1.41
date	2005.11.02.18.40.01;	author ervolina;	state Exp;
branches;
next	1.40;
deltatype	text;

1.40
date	2005.09.09.15.30.10;	author ervolina;	state Exp;
branches;
next	1.39;
deltatype	text;

1.39
date	2005.08.10.22.44.53;	author ervolina;	state Exp;
branches;
next	1.38;
deltatype	text;

1.38
date	2005.02.15.20.45.01;	author ervolina;	state Exp;
branches;
next	1.37;
deltatype	text;

1.37
date	2004.04.07.19.58.33;	author ervolina;	state Exp;
branches;
next	1.36;
deltatype	text;

1.36
date	2004.04.05.19.47.25;	author ervolina;	state Exp;
branches;
next	1.35;
deltatype	text;

1.35
date	2004.03.04.14.19.29;	author ervolina;	state Exp;
branches;
next	1.34;
deltatype	text;

1.34
date	2004.03.02.04.22.50;	author ervolina;	state Exp;
branches;
next	1.33;
deltatype	text;

1.33
date	2004.02.09.14.37.30;	author ervolina;	state Exp;
branches;
next	1.32;
deltatype	text;

1.32
date	2004.02.06.21.53.47;	author ervolina;	state Exp;
branches;
next	1.31;
deltatype	text;

1.31
date	2004.02.05.17.57.13;	author ervolina;	state Exp;
branches;
next	1.30;
deltatype	text;

1.30
date	2004.01.31.03.58.42;	author ervolina;	state Exp;
branches;
next	1.29;
deltatype	text;

1.29
date	2004.01.29.05.08.05;	author ervolina;	state Exp;
branches;
next	1.28;
deltatype	text;

1.28
date	2004.01.23.02.59.16;	author ervolina;	state Exp;
branches;
next	1.27;
deltatype	text;

1.27
date	2004.01.22.02.47.48;	author ervolina;	state Exp;
branches;
next	1.26;
deltatype	text;

1.26
date	2004.01.12.22.52.41;	author ervolina;	state Exp;
branches;
next	1.25;
deltatype	text;

1.25
date	2004.01.12.21.04.23;	author ervolina;	state Exp;
branches;
next	1.24;
deltatype	text;

1.24
date	2004.01.12.01.51.32;	author ervolina;	state Exp;
branches;
next	1.23;
deltatype	text;

1.23
date	2004.01.10.17.56.11;	author ervolina;	state Exp;
branches;
next	1.22;
deltatype	text;

1.22
date	2003.11.24.19.59.46;	author ervolina;	state Exp;
branches;
next	1.21;
deltatype	text;

1.21
date	2003.06.26.23.09.38;	author ervolina;	state Exp;
branches;
next	1.20;
deltatype	text;

1.20
date	2003.04.08.01.58.50;	author ervolina;	state Exp;
branches;
next	1.19;
deltatype	text;

1.19
date	2003.01.17.00.53.22;	author ervolina;	state Exp;
branches;
next	1.18;
deltatype	text;

1.18
date	2003.01.15.19.36.57;	author rwToStl;	state Exp;
branches;
next	1.17;
deltatype	text;

1.17
date	2003.01.06.22.12.10;	author ervolina;	state Exp;
branches
	1.17.2.1;
next	1.16;
deltatype	text;

1.16
date	2002.11.26.14.25.32;	author fasano;	state Exp;
branches;
next	1.15;
deltatype	text;

1.15
date	2002.09.06.13.33.08;	author ervolina;	state Exp;
branches;
next	1.14;
deltatype	text;

1.14
date	2002.08.08.17.37.44;	author ervolina;	state Exp;
branches;
next	1.13;
deltatype	text;

1.13
date	2002.08.06.18.08.18;	author ervolina;	state Exp;
branches;
next	1.12;
deltatype	text;

1.12
date	2002.07.31.20.39.54;	author ervolina;	state Exp;
branches;
next	1.11;
deltatype	text;

1.11
date	2002.07.02.20.34.16;	author ervolina;	state Exp;
branches;
next	1.10;
deltatype	text;

1.10
date	2002.07.02.20.20.07;	author ervolina;	state Exp;
branches;
next	1.9;
deltatype	text;

1.9
date	2002.06.26.20.38.45;	author ervolina;	state Exp;
branches;
next	1.8;
deltatype	text;

1.8
date	2002.03.28.21.49.43;	author ervolina;	state Exp;
branches;
next	1.7;
deltatype	text;

1.7
date	2001.12.21.20.10.32;	author ervolina;	state Exp;
branches;
next	1.6;
deltatype	text;

1.6
date	2001.12.18.16.58.12;	author ervolina;	state Exp;
branches;
next	1.5;
deltatype	text;

1.5
date	2001.12.03.13.38.51;	author ervolina;	state Exp;
branches;
next	1.4;
deltatype	text;

1.4
date	2001.10.17.22.04.42;	author ervolina;	state Exp;
branches;
next	1.3;
deltatype	text;

1.3
date	2001.09.24.16.38.14;	author ervolina;	state Exp;
branches;
next	1.2;
deltatype	text;

1.2
date	2001.06.01.16.52.06;	author ervolina;	state Exp;
branches;
next	1.1;
deltatype	text;

1.1
date	2000.02.25.18.36.52;	author wit;	state Exp;
branches
	1.1.1.1;
next	;
deltatype	text;

1.1.1.1
date	2000.02.25.18.36.52;	author wit;	state Exp;
branches;
next	;
deltatype	text;

1.17.2.1
date	2003.01.08.17.43.16;	author rwToStl;	state Exp;
branches;
next	1.17.2.2;
deltatype	text;

1.17.2.2
date	2003.01.09.13.14.31;	author rwToStl;	state Exp;
branches;
next	;
deltatype	text;

1.43.4.1
date	2006.06.07.12.34.02;	author ervolina;	state Exp;
branches;
next	;
deltatype	text;


desc
@@


1.63
log
@changed param defaults. ServerGroup reverse D2O was failing
@
text
@
// RW2STL - inserted:
#include <string>
#include <ostream>
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL - inserted includes.
#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <mcl/src/mcl.h>
#include <sce/src/paramMgr.h>
#include <sce/src/sceDefin.h>
#include <sce/src/sceParam.h>

// this will map all pegging attributes to use pip
#define PEGGING_AS_PIP

// if we are using the new parameter processing method then...
#define NEW_PROCESS
// if we are not using the advanced parameters
#define ADV_PARAM_OUT


void
LgFrSceParameterManager::setErrFacility(MclFacility * existingFacility)
{
  // assign facility pointer to this pre-existing facility
  sceErrFacility_ = existingFacility;
}

MclFacility *
LgFrSceParameterManager::getErrFacility()
{
  return sceErrFacility_;
}

void
LgFrSceParameterManager::setIOLogMgr(LgFrSceIOLogMgr * existingMgr)
{
  sceIOLogMgr_ = existingMgr;
}

LgFrSceIOLogMgr*
LgFrSceParameterManager::getIOLogMgr()
{
  return sceIOLogMgr_;
}

void
LgFrSceParameterManager::initializeParameterDefaults(const std::string & paramFile,
                                                     LgFrSceSetOfParameters & defaultSet)
const
{
  // this seems sorta silly, but it's acutally handy to know what the name
  // of the original parameter file was
  defaultSet.setString("parameterFileName", paramFile, 0, false);
  // these are the default names for certain log files
  defaultSet.setString("parameterLogFileName", "param.log", 0, false);
  defaultSet.setString("inputLogFileName", "sceInput.log", 0, false);
#ifdef DOS_FILE_NAMES
  defaultSet.setString("outputLogFileName", "sceOut.log", 0, false);
#else
  defaultSet.setString("outputLogFileName", "sceOutput.log", 0, false);
#endif



  // format of setString(string paramName, string defaultValue, 0 ,bool mandatoryFlag);
  //
  //
  // 6.20
  // CPLEX, MIP
  defaultSet.setBool("useCplexSolver",true,0,false); 
  defaultSet.setBool("mipMode",false,0,false); 
  defaultSet.setString("opIntExecFile","",0,false); 



  // 6.10
  defaultSet.setString("priorityRulesFile","",0,false); 
  defaultSet.setBool("useDailyCapAvailMethod",true,0,false); 
  defaultSet.setBool("useDatedDemands", false,0,false);
  defaultSet.setBool("useMultiAttributeDemand", false,0,false);
  defaultSet.setInt("numDemandAttributes", 4,0,false);
  defaultSet.setInt("demandTypeKeyFieldNum", 3,0,false);
  defaultSet.setString("multiAttributeDemandSeparator", "%",0,false);
  defaultSet.setBool("useDemand2OrderINDP", false,0,false);
  defaultSet.setBool("truncOffsetToEol", false,0,false);
  
#ifdef MULTI_SITE_BOM
  defaultSet.setString("multiSiteBomFile","",0,false);
#endif

  defaultSet.setBool("printMrpSubUsageFile", true, 0,false);
  defaultSet.setBool("printMrpOpSubUsageFile", true, 0,false);
  defaultSet.setBool("printSubUsageFile", true, 0,false);
  defaultSet.setBool("printOpSubUsageFile", true, 0,false);
  defaultSet.setBool("printObjectiveSummaryFile", false, 0,false);
  defaultSet.setBool("printProblemStatsFile", true, 0,false);

  defaultSet.setBool("printBacklogResponseFile", true,0,false);
  defaultSet.setBool("printBuildSchedFile", true, 0,false);


  defaultSet.setBool("printIndpSupplyResponseFile", true, 0,false);
  defaultSet.setBool("printSupplyResponseFile", true, 0,false);
  defaultSet.setBool("printInterplantOrdersFile", false, 0,false);
  defaultSet.setBool("printOperationOrdersFile", false, 0,false);

  // 5.00
  defaultSet.setBool("maxImpliedCommitsForAtp", false,0,false);
  defaultSet.setBool("supplierPerspectiveInterplantPeg", false,0,false);
  defaultSet.setString("greedySearchIncFile","",0,false); 
  defaultSet.setString("indpGreedySearchIncFile","",0,false); 
  defaultSet.setString("greedySearchIncrementMethod","default",0,false);   
  defaultSet.setFloat("searchIncScaleFactor", 0.01,0,false);
  defaultSet.setFloat("searchIncAbsValue", 1.0,0,false);

  defaultSet.setString("scrapCostFile","",0,false); 
  defaultSet.setString("stockCostFile","",0,false); 



  defaultSet.setString("sourceDefFile","",0,false); 
  defaultSet.setString("buildAheadFile","",0,false); 
  defaultSet.setBool("printImpactPeriodDiagnosticFile", false,0,false);
  defaultSet.setBool("printMrpImpactPeriodDiagnosticFile", false,0,false);
  defaultSet.setString("impactPeriodDiagFileExtension",        ".impactPd",0,false);
  defaultSet.setString("mrpImpactPeriodDiagFileExtension",        ".mrpImpactPd",0,false);

  defaultSet.setBool("printOperationExecFile", false,0,false);
  defaultSet.setString("operationExecFileExtension",        ".execVolDump",0,false);




  // 4.20: change these defaults for final build
  //  defaultSet.setString("smartExplodeEngine","heuristic",0,false);
  //  defaultSet.setString("smartExplodeEngine","heurAlloc",0,false);
  //  defaultSet.setBool("usePrioritizedExplodeUtility", true,0,false);
  defaultSet.setBool("usePrioritizedExplodeUtility", false,0,false);
  defaultSet.setBool("useStockReallocationInPrioExplode", false,0,false);

  defaultSet.setString("heurAllocExplodeTraceFileExtension", ".traceExp",0,false);
  defaultSet.setBool("printHeurAllocExplodeTrace", true,0,false);

  defaultSet.setString("globalSubParentIndString", "ALL",0,false);



  // Value Add Cost calculation services
  defaultSet.setBool("calculateVac", false, 0, false);
  defaultSet.setString("vacFileExtension", ".vac",0,false);
  defaultSet.setString("compCostExtension",".compCost",0,false);
  defaultSet.setBool("printVacFile", false,0,false);
  defaultSet.setBool("printCompCostFile", false,0,false);

  defaultSet.setBool("printSubDbFile", false,0,false);
  defaultSet.setString("subDbFileExtension", ".subDB",0,false);

  defaultSet.setBool("printPeggedCritListFile", false,0,false);
  defaultSet.setString("peggedCritListFileExtension", ".pegCrit",0,false);
  defaultSet.setString("iPeggedCritListFileExtension", ".iPegCrit",0,false);

  defaultSet.setBool("printAltDbFile", false,0,false);
  defaultSet.setString("altDbFileExtension", ".altDB",0,false);



  // PIP parameters
  // usePipForPeg is a swaperoo that tells sce to use the PIP function and
  // to populate any pegging outputs requested.  When TRUE, pegging will be shut off
  // in sce and pip is turned on.  And all the Peg extensions and printPeg params are
  // mapped to pip extensions and printPip params.
  //  defaultSet.setBool("usePipForPeg", false,0,false);
  defaultSet.setString("mrpIndpExecVolPegFileExtension",    ".iMrpExecVolPeg",0,false);
  defaultSet.setString(   "indpExecVolPegFileExtension",    ".iExecVolPeg",0,false);
  defaultSet.setString("mrpExecVolPegFileExtension",        ".mrpExecVolPeg",0,false);
  defaultSet.setString(   "execVolPegFileExtension",        ".execVolPeg",0,false);
  defaultSet.setString("mrpIndpInterplantPegFileExtension", ".iMrpInterplantPeg",0,false);
  defaultSet.setString(   "indpInterplantPegFileExtension", ".iInterplantPeg",0,false);
  defaultSet.setString("mrpInterplantPegFileExtension",     ".mrpInterplantPeg",0,false);
  defaultSet.setString(   "interplantPegFileExtension",     ".interplantPeg",0,false);
  defaultSet.setString("mrpIndpDemandConsPegFileExtension", ".iMrpDemConsPeg",0,false);
  defaultSet.setString(   "indpDemandConsPegFileExtension", ".iDemConsPeg",0,false);
  defaultSet.setString("mrpDemandConsPegFileExtension",     ".mrpDemConsPeg",0,false);
  defaultSet.setString(   "demandConsPegFileExtension",     ".demConsPeg",0,false);
  defaultSet.setString("mrpIndpSupplyPegFileExtension", ".iMrpSupplyPeg",0,false);
  defaultSet.setString(   "indpSupplyPegFileExtension", ".iSupplyPeg",0,false);
  defaultSet.setString("mrpSupplyPegFileExtension",     ".mrpSupplyPeg",0,false);
  defaultSet.setString(   "supplyPegFileExtension",     ".supplyPeg",0,false);
  defaultSet.setString("mrpProdVolPegFileExtension",        ".mrpProdVolPeg",0,false);
  defaultSet.setString(   "prodVolPegFileExtension",        ".prodVolPeg",0,false);
  defaultSet.setString("mrpIndpProdVolPegFileExtension",        ".iMrpProdVolPeg",0,false);
  defaultSet.setString(   "indpProdVolPegFileExtension",        ".iProdVolPeg",0,false);
  defaultSet.setString("mrpPfProdVolPegFileExtension",        ".mrpPfProdVolPeg",0,false);
  defaultSet.setString(   "pfProdVolPegFileExtension",        ".pfProdVolPeg",0,false);
  defaultSet.setString("mrpIndpPfProdVolPegFileExtension",        ".iMrpPfProdVolPeg",0,false);
  defaultSet.setString(   "indpPfProdVolPegFileExtension",        ".iPfProdVolPeg",0,false);
  defaultSet.setString("mrpSideVolPegFileExtension",        ".mrpSideVolPeg",0,false);
  defaultSet.setString(   "sideVolPegFileExtension",        ".sideVolPeg",0,false);
  defaultSet.setString("mrpIndpSideVolPegFileExtension",        ".iMrpSideVolPeg",0,false);
  defaultSet.setString(   "indpSideVolPegFileExtension",        ".iSideVolPeg",0,false);

  defaultSet.setBool("printMrpIndpExecVolPegFile", false,0,false);
  defaultSet.setBool("printMrpExecVolPegFile", false,0,false);
  defaultSet.setBool("printIndpExecVolPegFile", false,0,false);
  defaultSet.setBool("printExecVolPegFile", false,0,false);
  defaultSet.setBool("printMrpIndpInterplantPegFile", false,0,false);
  defaultSet.setBool("printMrpInterplantPegFile", false,0,false);
  defaultSet.setBool("printIndpInterplantPegFile", false,0,false);
  defaultSet.setBool("printInterplantPegFile", false,0,false);
  defaultSet.setBool("printMrpIndpDemandConsPegFile", false,0,false);
  defaultSet.setBool("printMrpDemandConsPegFile", false,0,false);
  defaultSet.setBool("printIndpDemandConsPegFile", false,0,false);
  defaultSet.setBool("printDemandConsPegFile", false,0,false);
  defaultSet.setBool("printMrpIndpSupplyPegFile", false,0,false);
  defaultSet.setBool("printMrpSupplyPegFile", false,0,false);
  defaultSet.setBool("printIndpSupplyPegFile", false,0,false);
  defaultSet.setBool("printSupplyPegFile", false,0,false);
  defaultSet.setBool("printMrpProdVolPegFile", false,0,false);
  defaultSet.setBool("printProdVolPegFile", false,0,false);
  defaultSet.setBool("printMrpIndpProdVolPegFile", false,0,false);
  defaultSet.setBool("printIndpProdVolPegFile", false,0,false);
  defaultSet.setBool("printMrpPfProdVolPegFile", false,0,false);
  defaultSet.setBool("printPfProdVolPegFile", false,0,false);
  defaultSet.setBool("printMrpIndpPfProdVolPegFile", false,0,false);
  defaultSet.setBool("printIndpPfProdVolPegFile", false,0,false);
  defaultSet.setBool("printMrpSideVolPegFile", false,0,false);
  defaultSet.setBool("printSideVolPegFile", false,0,false);
  defaultSet.setBool("printMrpIndpSideVolPegFile", false,0,false);
  defaultSet.setBool("printIndpSideVolPegFile", false,0,false);

  defaultSet.setBool("doPegging", false,0,false);
  defaultSet.setBool("PegSubUsageToPrimary", false,0,false);
  // END PIP

  defaultSet.setString("pipPriorityFile","",0,false);
  defaultSet.setString("pipIndpPriorityFile","",0,false);
  defaultSet.setBool("printCapacityUsageFile", false,0,false);
  defaultSet.setBool("printMrpCapacityUsageFile", false,0,false);
  defaultSet.setString("capacityUsageFileExtension", ".capUsage",0,false);
  defaultSet.setString("mrpCapacityUsageFileExtension", ".mrpCapUs",0,false);


  // begin: SCE 3.30 parameters
  // run MIP
  // as of SCE 4.50, this function no longer availabe in WIT, so we remove from SCE
  //  defaultSet.setBool("optWithLotSizes", FALSE,0,FALSE);
  defaultSet.setBool("capacityOffsetToZero", FALSE,0,FALSE);
  defaultSet.setBool("combineCapacityIntoPartDB", false,0,false);


  // begin: SCE 3.20 parameters
  defaultSet.setString("subUsageReportMode","parentProd",0,FALSE);
  defaultSet.setBool("globalSubNetAllowed", true,0,false);
  defaultSet.setBool("groupSharingViaExecPenalties", FALSE,0,FALSE);
  defaultSet.setFloat("groupSharingExecPenaltyThresh", 0.0,0,FALSE);


  // begin: SCE 3.11 rev04 parameters
  defaultSet.setBool("optInitFromZero", false,0,false);
#ifdef FORCE_BOGONS
  defaultSet.setBool("forcePcfBogons", false,0,false);
#endif
  defaultSet.setString("indepRevenueFile","",0,false);
  defaultSet.setBool("aggregateSupplyInScrub", false,0,false);
  defaultSet.setBool("printLowestLevelNonPcfFile", false,0,false);
  defaultSet.setString("lowestLevelNonPcfFileExtension",".llNonPcf",0,false);
  defaultSet.setBool("printPcfBogonsFile", false,0,false);
  defaultSet.setString("pcfBogonsFileExtension",".bogons",0,false);
  // end: SCE 3.11 rev04 parameters

  // begin: SCE 3.11 parameters
  defaultSet.setString("shadowPricesFileExtension",".shadowPrices",0,false);
  defaultSet.setBool("printShadowPricesFile", false,0,false);
  // end: SCE 3.11 parameters


  // begin: SCE 3.10 parameters
  defaultSet.setBool("shutOffAllLotSizing", false,0,false);
  defaultSet.setBool("disableInterplantJumperArcs", false,0,false);
  defaultSet.setBool("disableSplitBop", false,0,false);
  // end: SCE 3.10 parameters



  // begin: SCE 3.0
  defaultSet.setString("heurAllocTraceFileExtension", ".trace",0,false);
  defaultSet.setBool("printHeurAllocTrace", false,0,false);
  defaultSet.setString("heurAllocSortStrategy", "truePriority",0,false);
  defaultSet.setString("heurAllocMinsSortStrategy", "truePriority",0,false);
  defaultSet.setString("heurAllocFeatSortStrategy", "truePriority",0,false);
  defaultSet.setString("heurAllocBacklogPriority",  "memorylessRoll",0,false);

  defaultSet.setBool("useStockReallocation", false,0,false);
  // end: 3.0

  defaultSet.setBool("useFullExplodeUtility", true,0,false);
  defaultSet.setString("calendarFormat", "G",0,true);
  defaultSet.setString("defaultPdf", "XXX",0,false);
  defaultSet.setString("featureFileOutputFormat", "absolute",0,false);
  defaultSet.setString("pdfSeparator", "_",0,false);

  // filename things
  defaultSet.setString("fssSingletonFileExtension", ".fssSingletonReport",0,false);
  defaultSet.setString("fssGeneralSetFileExtension", ".fssGeneralSetReport",0,false);
  defaultSet.setString("fssMachineFileExtension", ".fssMachineReport",0,false);
  defaultSet.setString("backlogResponseFileExtension", ".backlog",0,false);
  defaultSet.setString("buildSchedFileExtension", ".buildSched",0,false);
  defaultSet.setString("capacityDBFileExtension", ".capacityDB",0,false);
  defaultSet.setString("criticalListFileExtension", ".critList",0,false);
  defaultSet.setString("debugFileExtension", ".sce.debug",0,false);
  defaultSet.setString("demandDriversFileExtension", ".demandDrivers",0,false);
  defaultSet.setString("explodeEchoFileExtension", ".witExplode.echo",0,false);
  defaultSet.setString("explodeWitDataFileExtension", ".witExplode.data",0,false);
  defaultSet.setString("formattedSupplyReportFileExtension", ".supplyReport",0,false);
  defaultSet.setString("geoSourceDebugFileExtension", ".geoSourceDebug",0,false);
  defaultSet.setString("geoSupplyByPdfFileExtension", ".geoSupplyByPdf",0,false);
  defaultSet.setString("heurEchoFileExtension", ".witHeur.echo",0,false);
  defaultSet.setString("heurWitDataFileExtension", ".witHeur.data",0,false);
  defaultSet.setString("indepSupplyResponseFileExtension", ".indSupResp",0,false);

  defaultSet.setString("operationDemandFileExtension", ".operationDemand",0,false);
  defaultSet.setString("operationOrdersFileExtension", ".operation",0,false);

  defaultSet.setString("interplantDemandFileExtension", ".interplantDemand",0,false);
  defaultSet.setString("interplantOrdersFileExtension", ".interplant",0,false);

  defaultSet.setString("mrpDemandOrdersFileExtension", ".mrpDemOrd",0,false);
  defaultSet.setString("mrpSupplyOrdersFileExtension", ".mrpSupOrd",0,false);
  defaultSet.setString("mrpSubUsageFileExtension", ".mrpSubUs",0,false);
  defaultSet.setString("mrpOpSubUsageFileExtension", ".mrpOpSubUs",0,false);
  defaultSet.setString("objectiveSummaryFileExtension", ".optResults",0,false);

  defaultSet.setString("opExecutionVolumeFileExtension", ".opExecVol",0,false);

  defaultSet.setString("operationDBFileExtension", ".operationDB",0,false);
  defaultSet.setString("opSubUsageFileExtension", ".opSubUsage",0,false);
  defaultSet.setString("optEchoFileExtension", ".witOpt.echo",0,false);
  defaultSet.setString("optWitDataFileExtension", ".witOpt.data",0,false);
  defaultSet.setString("optionalFeatRatioFileExtension", ".optionRatio",0,false);
  defaultSet.setString("outputFilePrefix", "./output",0,false);
  defaultSet.setString("partDBFileExtension", ".partDB",0,false);
  defaultSet.setString("problemStatisticsFileExtension", ".probStats",0,false);
  defaultSet.setString("selFeatBBratioFileExtension", ".bbRatio",0,false);
  defaultSet.setString("subUsageFileExtension", ".subUsage",0,false);
  defaultSet.setString("supplyResponseFileExtension", ".supplyResp",0,false);
  defaultSet.setString("totalDemandReportFileExtension", ".totalDemand",0,false);
  defaultSet.setString("witExplodeMsgFileExtension", ".witExplode.msg",0,false);
  defaultSet.setString("witMsgFileExtension", ".wit.msg",0,false);


  // some random extensions not included before
  defaultSet.setString("witRolloverMsgFileExtension", ".wit.rollover.msg",0,false);

  // Note: put all internal use only or un-documented parameters down here
  defaultSet.setBool("printModifiedFssMachReport", false,0,false);
  defaultSet.setString("FSSModifiedMachReportExtension", "FSSModMachReport",0,false);
  defaultSet.setString("featureRatioPegMethod", "pegToMachineShipPeriod",0,false); //
  defaultSet.setString("siteCustomization", "default",0,false);


  // NEW SCE 2.00 parameters
  defaultSet.setBool("doImplode", true,0,false);
  defaultSet.setBool("heurForceEquit", false,0,false);
  defaultSet.setBool("smartExplodeForceEquit", true,0,false);
  defaultSet.setBool("useLocalBuildAhead", false,0,false);
  defaultSet.setInt("buildAheadLimit", 0, 0,false);
  defaultSet.setBool("useSmartExplodeUtility", false,0,false);
  defaultSet.setInt("smartExplodeEquit", 10,0,false);

  defaultSet.setBool("demandDriversRespectsSubs", false,0,false);

  // NEW SCE 2.30 parameters
  defaultSet.setBool("useMultiRouteImplosion", true,0,false);
  defaultSet.setFloat("expCutoffTolerance", 0.01,0,false);
  defaultSet.setString("minsEngine", "heuristic",0,false);
  defaultSet.setBool("heurSkipFailures", true,0,false);

  //----------------------------------------------------------------------
  // Most other parameters - Mandatory or not
  // *default vals for type...
  // -string -> ""
  // -int    -> 0
  // -float  -> 0.0
  // -bool   -> false=0
  //----------------------------------------------------------------------

  // fss parameters
  defaultSet.setBool("fssFlag", false,0,false);

  defaultSet.setBool("doFssSingleton", 0,0,false);
  defaultSet.setBool("doFssGeneralSet", 0,0,false);
  defaultSet.setBool("doFssMachine", 0,0,false);

  defaultSet.setString("fssSingletonMethod", "liberal",0,false);    // liberal or conservative
  defaultSet.setString("fssGeneralSetMethod", "liberal",0,false);   // liberal or conservative
  defaultSet.setString("fssMachineMethod", "conservative",0,false); // liberal or conservative

  defaultSet.setString("fssFeatureSingletonMethod", "maximal",0,false);  //  minimal or maximal
  defaultSet.setString("fssFeatureGeneralSetMethod", "maximal",0,false); //  minimal or maximal
  defaultSet.setString("fssFeatureMachineMethod", "maximal",0,false);    //  minimal or maximal

  defaultSet.setInt("fssSingletonHorizon",0,0,false);
  defaultSet.setInt("fssGeneralSetHorizon",0,0,false);
  defaultSet.setInt("fssMachineHorizon",0,0,false);


  // non-mandatory other stuff
  defaultSet.setInt("defaultShipLateLimit",0,0,false);
  defaultSet.setInt("nStandaloneFeatureArcs",0,0,false);


  // mandatory other stuff
  defaultSet.setInt("numPeriods",0,0,true);
  defaultSet.setInt("objectiveType",0,0,true); // this value valid as {1,2,3} only
  defaultSet.setString("calendarFile","",0,true);
  defaultSet.setString("defaultPDF","",0,true);


  // mandatory input files

  defaultSet.setString("bomFile","",0,true);
  defaultSet.setString("demandVolFile","",0,false);
  defaultSet.setString("partCondFile","",0,false);
  defaultSet.setString("partFile","",0,true);
  defaultSet.setString("supplyFile","",0,true);


  // fss input files (sometimes mandatory)
  defaultSet.setString("fssGeneralSetFile","",0,false);  // this is sometimes mandatory
  defaultSet.setString("fssMachineFile","",0,false);  // this is sometimes mandatory


  // sometimes mandatory files
  defaultSet.setString("profitFile","",0,false);  // mandatory when objectiveType = 2
  defaultSet.setString("revenueFile","",0,false);  // mandatory when objectiveType = 2


  // non-mandatory input files
  defaultSet.setString("aggregationFile","",0,false);
  defaultSet.setString("backlogYieldFile","",0,false);
  defaultSet.setString("bocFile","",0,false);
  defaultSet.setString("capFile","",0,false);
  defaultSet.setString("capSupplyFile","",0,false);
  defaultSet.setString("cycleTimeFile","",0,false);
  defaultSet.setString("featProfitFile","",0,false);
  defaultSet.setString("featRevFile","",0,false);
  defaultSet.setString("geoSourceFile","",0,false);
  defaultSet.setString("interPlantFile","",0,false);
  defaultSet.setString("independentDemandFile","",0,false);
  defaultSet.setString("indepPriorityFile","",0,false);
  defaultSet.setString("lotSizeFile","",0,false);
  defaultSet.setString("minDemandVolFile","",0,false);
  defaultSet.setString("minIndepDemandVolFile","",0,false);
  defaultSet.setString("machineFeatureOffsetFile","",0,false);
  defaultSet.setString("machineFeatureSupplyFile","",0,false);
  defaultSet.setString("opBomFile","",0,false);
  defaultSet.setString("opBopFile","",0,false);
  defaultSet.setString("opFile","",0,false);
  defaultSet.setString("opLotSizeFile","",0,false);
  defaultSet.setString("opExecPenaltyFile","",0,false);
  defaultSet.setString("opExecCostFile","",0,false);
  defaultSet.setString("opLowerFile","",0,false);
  defaultSet.setString("opSubBomFile","",0,false);
  defaultSet.setString("opUpperFile","",0,false);
  defaultSet.setString("opYieldFile","",0,false);
  defaultSet.setString("optionProfitFile","",0,false);
  defaultSet.setString("optionRevFile","",0,false);
  defaultSet.setString("priorityFile","",0,false);
  defaultSet.setString("prodVolLBFile","",0,false);
  defaultSet.setString("prodVolUBFile","",0,false);
  defaultSet.setString("subBomFile","",0,false);
  defaultSet.setString("topLevelToBBdefFile","",0,false);
  defaultSet.setString("topLevelToBBratioFile","",0,false);
  defaultSet.setString("topLevelToOptionFile","",0,false);
  defaultSet.setString("yieldFile","",0,false);


  // print flags : non-mandatory
  defaultSet.setBool("printCapacityDBFile",0,0,false);
  defaultSet.setBool("printCriticalListFile",0,0,false);
  defaultSet.setBool("printMrpCriticalListFile",0,0,false);
  defaultSet.setBool("printDebugFile",0,0,false);
  defaultSet.setBool("printDemandDriversFile",0,0,false);
  defaultSet.setBool("printExplodeEchoFile",0,0,false);
  defaultSet.setBool("printExplodeWitDataFile",0,0,false);
  defaultSet.setBool("printFormattedSupplyReportFile",0,0,false);
  defaultSet.setBool("printGeoSourceDebugFile",0,0,false);
  defaultSet.setBool("printGeoSupplyByPdfFile",0,0,false);
  defaultSet.setBool("printHeurEchoFile",0,0,false);
  defaultSet.setBool("printHeurWitDataFile",0,0,false);
  defaultSet.setBool("printOperationDemandFile", false,0,false);
  defaultSet.setBool("printInterplantDemandFile", false,0,false);
  defaultSet.setBool("printMrpSupplyOrdersFile", false,0,false);
  defaultSet.setBool("printMrpDemandOrdersFile", false,0,false);
  defaultSet.setBool("printOperationDBFile",0,0,false);
  defaultSet.setBool("printOptEchoFile",0,0,false);
  defaultSet.setBool("printOptWitDataFile",0,0,false);
  defaultSet.setBool("printPartDBFile",0,0,false);
  defaultSet.setBool("printTotalDemandReport",0,0,false);
  defaultSet.setBool("printWitExplodeMsgFile",0,0,false);
  defaultSet.setBool("printWitMsgFile",0,0,false);
  defaultSet.setBool("printWitRolloverMsgFile",0,0,false);

  // IMPLOSION MODEL  parameters

  defaultSet.setString("engine","heuristic",0,false);

  // heuristic
  defaultSet.setInt("equitability", 1,0,false);
  defaultSet.setInt("defaultPriority",1000,0,false);
  defaultSet.setInt("defaultIndependentDemandPriority",2000,0,false);
  defaultSet.setFloat("defaultAggregateBopPreference", 0.0,0,false);
  defaultSet.setFloat("defaultDefaultBopPreference", 0.0,0,false);
  defaultSet.setFloat("defaultExplicitBopPreference", 0.0,0,false);
  defaultSet.setFloat("defaultInterPlantBopPreference", 0.0,0,false);

  // LP basic coeff's
  defaultSet.setFloat("defaultObj1ShipReward",             1000.0   ,0,false);
  defaultSet.setFloat("periodicInterestRate",                 0.013 ,0,false);
  defaultSet.setFloat("defaultObj1ExecCostRealOperations",    0.1   ,0,false);
  defaultSet.setFloat("obj1ExecCostDiscRateRealOperations",   0.001 ,0,false);
  defaultSet.setFloat("defaultObj1ProdCostRealParts",         0.1   ,0,false);
  defaultSet.setFloat("obj1ProdCostDiscRateRealParts",        0.001 ,0,false);
  defaultSet.setFloat("obj1DefaultStockCostRealParts",        0.0   ,0,false);
  defaultSet.setFloat("defaultSubPenalty",                   10.0   ,0,false);
  // LP features/bb coeff's
  defaultSet.setFloat("defaultOptionShipReward",              5.0   ,0,false);
  defaultSet.setFloat("featureSetScrapPenalty",           99999.9   ,0,false);
  defaultSet.setFloat("featureSetStockPenalty",           99999.9   ,0,false);
  defaultSet.setFloat("optionRatioSupplyStockPenalty",       10.0   ,0,false);

  // What are these?  are they obsolete?
  //  defaultSet.setInt("featureRatioFlag",0,0,false);



  // TEST do we need these!!!   They are coming out in the param.log and the
  // scrubbed param file.   The latter can cause problems.
}




void
LgFrSceParameterManager::initializeSetOfParameters(const std::string & paramFile,
                                                   LgFrSceSetOfParameters & setOfParameters)
{
  std::string name;
  std::string stringVal;
  int       intVal;
  float     floatVal;
  bool boolVal;

  bool exists;


  // we no longer store default values in a default set of parameters,
  // we will be keeping all values in a single set of parameters and then
  // override the ones that are in the parameter file.
  //
  // a couple of important notes:
  // 1) if you want to set a parameter later on, then make sure you pass
  //    the method a value = 1 for the 'MethodSet' argument....otherwise
  //    you will replace the old default value with a new one and the new
  //    default will not hold the original default value....if you do a
  //    user defined 'set' then it will hold the original default value
  //    regardless of how many times you reset the actual value being used
  // 2) if the user does not have a "mandatory" parameter in the parameter
  //    file, SCE will exit and give an error message that indicates that
  //    the user must explicitly define a value in the parameter file.
  //

  this->initializeParameterDefaults(paramFile, setOfParameters);

  processParameterFile(paramFile,setOfParameters);

}


//----------------------------------------------------------------------------
// new processParameterFile(..) method
//----------------------------------------------------------------------------

int
LgFrSceParameterManager::processParameterFile(const std::string & parameterFileName,
                                              LgFrSceSetOfParameters & setOfParameters)
{
    std::ifstream inFile;
    std::string parameter;  // Note: initialized to a 0 string
    std::string dataLine;
    std::string paramName;
    std::string paramValue;

    long goodCount=0;
    long badCount=0;
    long commentCount=0;
    long totalCount=0;

    inFile.open(parameterFileName.c_str());
    if (! inFile)  {
      (*sceErrFacility_)("SevereCannotOpenFile",MclArgList()
                         << "parameter"
                         << parameterFileName
                         << "");
    }


    // read till end of file
    while(inFile.peek() != EOF) {
      // read next line of parameter file
        std::getline( inFile, dataLine );
      totalCount++;

      // set up a tokenizer
      SCETokenizer next(dataLine);

#ifdef ALLOW_QUOTED_STRING_PARAMS
      bool areThereQuotes = dataLine.find_first_of('"') == std::string::npos ? false : true;
#endif

      // get the parameter Keyword
      paramName = next(" \t\n,");

      //  skip blanks or comments *
      if ((paramName.empty()) || (paramName.c_str()[0] == '*')) {
        commentCount++;
        continue;
      }
      else {
        // currParamType = {0=int; 1=float; 2=string; 3=bool}
        //      "        = -1 means ERROR
        int currParamType = setOfParameters.exists(paramName);

        if (currParamType != -1) {  // -1 means invalid param name!

#ifdef ALLOW_QUOTED_STRING_PARAMS
          if (areThereQuotes) {
            // pick up to end of line
            std::string restOfLine = next("\n");
            paramValue = sce::extractQuotedPart( restOfLine );

            //RWCRegexp quotedStringREGEXP("\".*\"");
            //std::string quotedParamValue = restOfLine(quotedStringREGEXP);
            //paramValue = sce::strip(quotedParamValue,  '\"');
          }
          else
            paramValue = next(" ,\t\n");
#else
          // try to grab the actual value
          paramValue = next(" ,\t\n");
#endif


          if (paramValue.empty()) {
            (*sceErrFacility_)("UsingDefaultParameter",MclArgList() << parameterFileName << (int)totalCount << paramName << dataLine);
            // this is just a warning... we will take default val ... user may
            // not want this
            badCount++;   // missing a parameter value!!! -- error message?
            continue;     // go to next line in param file
          }



          // flags for seeing if the parameter value read in can fit the
          // appropriate type (ie it *could* be of the type it should be)
          unsigned int isInt = 1;
          unsigned int isFloat = 1;
          unsigned int isString = 1;
          unsigned int isBool = 1;



      // Conditions for a float:
      // contains a point.
      // non-points must be digits.
      // must be at least 2 characters long.
      size_t firstPointOffset = paramValue.find_first_of( '.' );
      size_t secondPointOffset = paramValue.find_first_of( '.', firstPointOffset + 1 );
      bool containsOnePoint = ( firstPointOffset != std::string::npos &&
                                secondPointOffset == std::string::npos );
      bool allDigits = true;
      for( size_t i = 0; i < paramValue.size(); i++ )
        if( !isdigit( paramValue[i] ) && paramValue[i] != '.' )
          {
            allDigits = false;
            break;
          }
      if( !containsOnePoint || !allDigits || paramValue.size() < 2 )
        isFloat = 0;

      // Conditions for an int: must only digits, and at least one.
      if( containsOnePoint || !allDigits )
        isInt = 0;

      if ((currParamType == 0) && isInt) { // type = int
        long temp;
        sce::fromString(paramValue,temp);
        setOfParameters.setInt(paramName,temp,1,false);
        goodCount++;
        continue;
      }
      else if ((currParamType == 1) && isFloat) { // type = float
        double temp;
        sce::fromString(paramValue,temp);
        setOfParameters.setFloat(paramName,temp,1,false);
        goodCount++;
            continue;
      }
      else if (currParamType == 3) { // should be a bool
        if (isInt) { // it is a number
          long temp;
          sce::fromString(paramValue,temp);
          if (temp == 0)
            setOfParameters.setBool(paramName,false,1,false);
          else
            setOfParameters.setBool(paramName,true,1,false);
          goodCount++;
          continue;
        }
      }
      else if (currParamType == 2) {  // string parameter
#ifdef ALLOW_QUOTED_STRING_PARAMS
        if (0) {
          //RWCRegexp quotedStringREGEXP("^\".*\"");
          //std::string quotedParamValue = paramValue(quotedStringREGEXP);
          paramValue = sce::extractQuotedPart( paramValue );
          paramValue = sce::strip( paramValue, "\"");
        }
        setOfParameters.setString(paramName,paramValue,1,false);
#else
        setOfParameters.setString(paramName,paramValue,1,false);
#endif
        goodCount++;
        continue;
      }
      else {
        (*sceErrFacility_)("IllegalParameterEntry",MclArgList() << paramName << parameterFileName << (int)totalCount << dataLine);
        badCount++;
      }

        }
        else {
          (*sceErrFacility_)("PossibleInvalidParameter",MclArgList() << paramName << parameterFileName << (int)totalCount << dataLine);
          badCount++;
        }

      }

    }

    inFile.close();



    //-------------------------------------------------------------------------
    // ** These are the parameters whose default values depended on other
    //    parameters read in from parameter file
    //-------------------------------------------------------------------------
    int numPeriods = setOfParameters.getInt("numPeriods");

    // Fix the FSS horizon parameters (default is numPeriods-1)
    int tempParamValue;
    int tempMethodSet;








    // fssSingletonHorizon
    tempParamValue = setOfParameters.getInt("fssSingletonHorizon");
    if (tempParamValue >= numPeriods)
      (*sceErrFacility_)("ParamOutOfRange",MclArgList()
                         << "fssSingletonHorizon"
                         << parameterFileName
                         << "Must be less than numPeriods");
    tempMethodSet = setOfParameters.getMethodSet("fssSingletonHorizon");
    setOfParameters.setInt("fssSingletonHorizon", numPeriods-1, 0, false);
    if(tempMethodSet == 1)
       setOfParameters.setInt("fssSingletonHorizon", tempParamValue, 1, false);

    // fssGeneralSetHorizon
    tempParamValue = setOfParameters.getInt("fssGeneralSetHorizon");
    if (tempParamValue >= numPeriods)
      (*sceErrFacility_)("ParamOutOfRange",MclArgList()
                         << "fssGeneralSetHorizon"
                         << parameterFileName
                         << "Must be less than numPeriods");
    tempMethodSet = setOfParameters.getMethodSet("fssGeneralSetHorizon");
    setOfParameters.setInt("fssGeneralSetHorizon", numPeriods-1, 0, false);
    if(tempMethodSet == 1)
       setOfParameters.setInt("fssGeneralSetHorizon", tempParamValue, 1, false);

    // fssMachineHorizon
    tempParamValue = setOfParameters.getInt("fssMachineHorizon");
    if (tempParamValue >= numPeriods)
      (*sceErrFacility_)("ParamOutOfRange",MclArgList()
                         << "fssMachineHorizon"
                         << parameterFileName
                         << "Must be less than numPeriods");
    tempMethodSet = setOfParameters.getMethodSet("fssMachineHorizon");
    setOfParameters.setInt("fssMachineHorizon", numPeriods-1, 0, false);
    if(tempMethodSet == 1)
       setOfParameters.setInt("fssMachineHorizon", tempParamValue, 1, false);

    // buildAheadLimit
    tempParamValue = setOfParameters.getInt("buildAheadLimit");
    if (tempParamValue >= numPeriods)
      (*sceErrFacility_)("ParamOutOfRange",MclArgList()
                         << "buildAheadLimit"
                         << parameterFileName
                         << "Must be less than numPeriods");
    tempMethodSet = setOfParameters.getMethodSet("buildAheadLimit");
    setOfParameters.setInt("buildAheadLimit", numPeriods-1, 0, false);
    if(tempMethodSet == 1)
       setOfParameters.setInt("buildAheadLimit", tempParamValue, 1, false);





    tempParamValue = setOfParameters.getInt("defaultShipLateLimit");
    if (tempParamValue >= numPeriods){
      (*sceErrFacility_)("ParamOutOfRange",MclArgList()
                         << "defaultShipLateLimit"
                         << parameterFileName
                         << "Must be less than numPeriods");
    }
    tempMethodSet = setOfParameters.getMethodSet("defaultShipLateLimit");

    // default value from this param = numPeriods - 1
    setOfParameters.setInt("defaultShipLateLimit",
                           numPeriods - 1,
                           0, false);
    if(tempMethodSet == 1)
       setOfParameters.setInt("defaultShipLateLimit", tempParamValue, 1, false);

    //-------------------------------------------------------------------------


    //-------------------------------------------------------------------------
    // ** These are the parameters whose values must be within a valid range
    //    or in a certain domain... make sure these are valid!!
    //-------------------------------------------------------------------------
    std::string tempStringValue;
    int tempIntValue;

    // calendarFormat : {U,E,G}
    // 2.11 19980407 rev05 FIX:
    // we are doing away with this parameter.
    tempStringValue = setOfParameters.getString("calendarFormat");
    if (! (tempStringValue == "G")) {
      (*sceErrFacility_)("ParamOutOfRange",MclArgList()
                         << "calendarFormat"
                         << parameterFileName
                         << "Must be: {G} -- NOTE: Case-Sensitive.");
    }

    // objectiveType : {1,2,3}
    tempIntValue = setOfParameters.getInt("objectiveType");
    if (!(tempIntValue == 1 || tempIntValue == 2 || tempIntValue == 3)) {
      (*sceErrFacility_)("ParamOutOfRange",MclArgList()
                         << "objectiveType"
                         << parameterFileName
                         << "Must be one of the following: {1,2,3}");
    }


    // objectiveType : subUsageReportMode
    tempStringValue = setOfParameters.getString("subUsageReportMode");
    if (!(tempStringValue == "parentProd" || tempStringValue == "primaryCoverage" || tempStringValue == "subUsage")) {
      (*sceErrFacility_)("ParamOutOfRange",MclArgList()
                         << "subUsageReportMode"
                         << parameterFileName
                         << "Must be one of the following: {parentProd, primaryCoverage, subUsage)");
    }

    //-------------------------------------------------------------------------

    // one check before we are done to see if any of the mandatory
    // parameters still have the methodSet flag indicating default-defined
    // which we do NOT want.  if this is the case, we will provide a
    // fatal error message
    size_t numEntries = setOfParameters.numParameters(); // how many params?

    // loop thru all parameters in sop
    int q = 0; // Pulled out of the for below by RW2STL
    for (q=0; q<numEntries; q++) {
      LgFrSceParameter temp = setOfParameters(q);  // temp handle of a param
      if (temp.getMandatory() && (temp.getMethodSet() == 0)) {
        // we DO NOT want this! ie. it is supposed to be user-defined but
        // is not.
        (*sceErrFacility_)("MandatoryParameterMissing",MclArgList() << parameterFileName << temp.getName());
      }
    }

    // this is for producing a SCE i/o log entry later
    parameterFileName_ = parameterFileName;
    goodCount_ = goodCount;
    badCount_ = badCount;
    commentCount_ = commentCount;
    totalCount_ = totalCount;

    // choose proper return value
    if (badCount > 0) {
      return 0;
    }
    else {
      return 1;
    }
}



//----------------------------------------------------------------------------
// old search methods -- used to search through param file -- no longer used
//----------------------------------------------------------------------------

const
float
LgFrSceParameterManager::searchParamFileFloat(
    bool & exists,
    const std::string & parameterFile,
    const std::string & targetParameter,
    const int mandatory)
const
{
  double theValD = 0.0;
  std::string paramAsString = searchParamFile(exists,
                                            parameterFile,
                                            targetParameter,
                                            mandatory);
  if (! paramAsString.empty()) {
    if (! sce::fromString(paramAsString, theValD))  {
      (*sceErrFacility_)("IllegalParameterEntry",MclArgList() << targetParameter << parameterFile << 0);
    }
  }

  float theVal = (float) theValD;

  return theVal;
}




const
std::string
LgFrSceParameterManager::searchParamFile(
    bool & exists,
    const std::string & parameterFile,
    const std::string & targetParameter,
    const int mandatory)
const
{
    std::ifstream inFile;
    std::string parameter;  // Note: initialized to a 0 string
    std::string dataLine;
    std::string paramKeyword;

    inFile.open(parameterFile.c_str());


    if (! inFile)  {
      (*sceErrFacility_)("SevereCannotOpenFile",MclArgList() << "parameter" << parameterFile << "");
    }

    // initialize doesParamterExist to false
    exists = false;

    while(inFile.peek() != EOF) {

      // read next line of parameter file
      std::getline( inFile, dataLine );

      // set up a tokenizer
      SCETokenizer next(dataLine);

      // get the parameter Keyword
      paramKeyword = next(" \t\n,");

      //  skip blanks or comments *
      if ((paramKeyword.empty()) || paramKeyword == "*")
        continue;

      // did we find the match?
      if (sce::compareStringsCaseIns( paramKeyword, targetParameter ) == 0)  {
        parameter = next(" \t\n,");
        // if we found the match, then test to see if there's a parameter
        if (parameter.empty())  {
          (*sceErrFacility_)("MandatoryParameterMissing",MclArgList() << parameterFile << targetParameter);
        }
        exists = true;
        break;
      }
    }


    // if its a mandatory parameter, make sure its found
    if (mandatory==MANDATORY && parameter.empty())   {
          (*sceErrFacility_)("MandatoryParameterMissing",MclArgList() << parameterFile << targetParameter);
    }

    inFile.close();

    return parameter;

}

// ---------------------------------------------------------------
const
int
LgFrSceParameterManager::searchParamFileInt(
    bool & exists,
    const std::string & parameterFile,
    const std::string & targetParameter,
    const int mandatory,
    const int defaultVal)
const
{

  long theValL = (long) defaultVal;

  std::string paramAsString = searchParamFile(exists,
                                            parameterFile,
                                            targetParameter,
                                            mandatory);

  if (! paramAsString.empty()) {

    if (! sce::fromString(paramAsString, theValL))  {
      (*sceErrFacility_)("IllegalParameterEntry",MclArgList() << targetParameter << parameterFile << 0);
    }
  }

  int theVal = (int) theValL;

  return theVal;
}


// ---------------------------------------------------------------
const
bool
LgFrSceParameterManager::searchParamFileBoolean(
    bool & exists,
    const std::string & parameterFile,
    const std::string & targetParameter,
    const int mandatory)
const
{

    std::string paramAsString = searchParamFile(exists,
                                              parameterFile,
                                              targetParameter,
                                              mandatory);

    if (paramAsString == "1")
        return 1;

    return 0;
}







bool
LgFrSceParameterManager::doesInputFileExist(
    const std::string & targetFile)
{
    std::ifstream inFile;

    inFile.open(targetFile.c_str());

    if (inFile)  {
        inFile.close();
        return true;
    }

    return false;
}


// Destructor
LgFrSceParameterManager::~LgFrSceParameterManager()
{
  // putting this here because, this cannot go in the processParameterFile
  // method due to a sort of circular dependence in ipSce.C
  // ...quick explanation: we need to have already processed the param file
  // in order for the IOLogMgr to know the names of the IO log files it creates,
  // but we need to have already reset these log files before we print anything
  // to them, including the input log entry for the parameter file which is
  // what we are printing here.
  sceIOLogMgr_->printInputLog(parameterFileName_,
                              totalCount_,
                              goodCount_,
                              badCount_,
                              commentCount_,
                              goodCount_);
}


// Assignment operator.
LgFrSceParameterManager&
LgFrSceParameterManager::operator=(
   const LgFrSceParameterManager& rhs)
{

   if (this != &rhs) {           // Check for assignment to self
     sceErrFacility_ = rhs.sceErrFacility_;
     sceIOLogMgr_ = rhs.sceIOLogMgr_;
     parameterFileName_ = rhs.parameterFileName_;
     goodCount_ = rhs.goodCount_;
     badCount_ = rhs.badCount_;
     commentCount_ = rhs.commentCount_;
     totalCount_ = rhs.totalCount_;
   }

   return *this;
}


//  copy constructor
LgFrSceParameterManager::LgFrSceParameterManager(
   const LgFrSceParameterManager& source )
  : sceIOLogMgr_(source.sceIOLogMgr_),
    sceErrFacility_(source.sceErrFacility_)
{
  // Nothing to do here
}

// Default constructor
LgFrSceParameterManager::LgFrSceParameterManager()
  : sceIOLogMgr_(0),
    sceErrFacility_(0)
{
  // Nothing to do here
}


#if 0

#ifdef NDEBUG
#undef NDEBUG
#endif

void
LgFrSceParameterManager::test()
{




}
#endif
@


1.62
log
@minor changes to banners
@
text
@d101 2
a102 2
  defaultSet.setBool("printBacklogResponseFile", false,0,false);
  defaultSet.setBool("printBuildSchedFile", false, 0,false);
@


1.61
log
@cplex, and some cleanup
@
text
@d73 1
a73 1
  defaultSet.setBool("useCplexSolver",false,0,false); 
@


1.60
log
@convert capacity datamodel to dated intervals
@
text
@d71 7
@


1.59
log
@more dated fixes
@
text
@d74 1
d82 1
a82 1

d94 2
a95 2
  defaultSet.setBool("printBacklogResponseFile", true,0,false);
  defaultSet.setBool("printBuildSchedFile", true, 0,false);
d100 2
a101 2
  defaultSet.setBool("printInterplantOrdersFile", true, 0,false);
  defaultSet.setBool("printOperationOrdersFile", true, 0,false);
a440 3
#ifdef DATED_SUPPLY_FILE
  defaultSet.setString("datedSupplyFile","",0,false);
#endif
@


1.58
log
@6.1 prep commit ... many things in here
@
text
@d479 1
@


1.57
log
@committing latest development of sce 6.1
@
text
@a72 4
  defaultSet.setBool("truncOffsetToEol", false,0,false);


  // 6.00
d77 1
d79 2
a535 49
#if 0
  //----------------------------------------------------------------------
  // composite param names
  //----------------------------------------------------------------------
  defaultSet.setString("heurAllocTraceFileName","",0,false);
  defaultSet.setString("allocatedMrpFileName","",0,false);
  defaultSet.setString("allocatedIndepMrpFileName","",0,false);
  defaultSet.setString("backlogResponseFileName","",0,false);
  defaultSet.setString("buildSchedFileName","",0,false);
  defaultSet.setString("capacityDBFileName","",0,false);
  defaultSet.setString("criticalListFileName","",0,false);
  defaultSet.setString("debugFileName","",0,false);
  defaultSet.setString("demandDriversFileName","",0,false);
  defaultSet.setString("explodeEchoFileName","",0,false);
  defaultSet.setString("explodeWitDataFileName","",0,false);
  defaultSet.setString("formattedSupplyReportFileName","",0,false);
  defaultSet.setString("fssGeneralSetFileName","",0,false);
  defaultSet.setString("fssMachineFileName","",0,false);
  defaultSet.setString("fssSingletonFileName","",0,false);
  defaultSet.setString("geoSourceDebugFileName","",0,false);
  defaultSet.setString("geoSupplyByPdfFileName","",0,false);
  defaultSet.setString("heurEchoFileName","",0,false);
  defaultSet.setString("heurWitDataFileName","",0,false);

  defaultSet.setString("operationDemandFileName","",0,false);
  defaultSet.setString("operationOrdersFileName","",0,false);
  defaultSet.setString("interplantDemandFileName","",0,false);
  defaultSet.setString("interplantOrdersFileName","",0,false);
  defaultSet.setString("mrpDemandOrdersFileName","",0,false);
  defaultSet.setString("mrpOpSubUsageFileName","",0,false);
  defaultSet.setString("mrpSubUsageFileName","",0,false);
  defaultSet.setString("mrpSupplyOrdersFileName","",0,false);
  defaultSet.setString("objectiveSummaryFileName","",0,false);
  defaultSet.setString("opExecutionVolumeFileName","",0,false);
  defaultSet.setString("opSubUsageFileName","",0,false);
  defaultSet.setString("operationDBFileName","",0,false);
  defaultSet.setString("optEchoFileName","",0,false);
  defaultSet.setString("optWitDataFileName","",0,false);
  defaultSet.setString("optionalFeatRatioFileName","",0,false);
  defaultSet.setString("partDBFileName","",0,false);
  defaultSet.setString("problemStatisticsFileName","",0,false);
  defaultSet.setString("selFeatBBratioFileName","",0,false);
  defaultSet.setString("subUsageFileName","",0,false);
  defaultSet.setString("supplyResponseFileName","",0,false);
  defaultSet.setString("totalDemandReportFileName","",0,false);
  defaultSet.setString("witExplodeMsgFileName","",0,false);
  defaultSet.setString("witMsgFileName","",0,false);
  defaultSet.setString("witRolloverMsgFileName","",0,false);
#endif
@


1.56
log
@more fixes for 6.1
@
text
@d72 4
@


1.55
log
@some SCE 6 enhancements for 1/23 Beta release
@
text
@a291 1
  defaultSet.setString("fileFormatType", "STANDARD",0,false);
a294 2
  defaultSet.setString("allocatedMrpFileExtension", ".allocMRP",0,false);
  defaultSet.setString("allocatedIndepMrpFileExtension", ".allocIndMRP",0,false);
a361 3
  defaultSet.setBool("doAllocatedMrp", false,0,false);
  defaultSet.setInt("allocatedMrpVersion", 1,0,false);

a399 1
  defaultSet.setBool("prepForEPPS",0,0,false);
a922 11

    // fileFormatType : {Standard}
    tempStringValue = setOfParameters.getString("fileFormatType");
    if (!(tempStringValue == "Standard" || tempStringValue == "STANDARD")) {
      (*sceErrFacility_)("ParamOutOfRange",MclArgList()
                         << "fileFormatType"
                         << parameterFileName
                         << "Must be one of the following: {Standard, STANDARD} -- NOTE: Case-Sensitive.");
    }


@


1.54
log
@first pass at maxImpliedCommitForATP
@
text
@a66 2
  // 5.00
  defaultSet.setString("priorityRulesFile","",0,false); 
d68 3
d72 2
a73 1
  defaultSet.setBool("maxImpliedCommitsForAtp", false,0,false);
d79 22
a101 1

d104 3
a111 4
  defaultSet.setString("greedySearchIncrementMethod","default",0,false);   
  defaultSet.setFloat("searchIncScaleFactor", 0.01,0,false);
  defaultSet.setFloat("searchIncAbsValue", 1.0,0,false);

a124 3
#ifdef MULTI_SITE_BOM
  defaultSet.setString("multiSiteBomFile","",0,false);
#endif
@


1.53
log
@sce5 beta with prioriity manager, multiattribute demand, and dated records
@
text
@d71 1
a71 1

@


1.52
log
@Dated demands and multiAttributeDemand for indep DemandsVol and commits,
also for partDB
@
text
@d68 4
@


1.51
log
@Version 5.  initial commit
@
text
@d67 6
d81 1
a81 1
  // 5.00
@


1.50
log
@added function to report interplantPeg from perspective of supplier location.   basically, this shifts the interplant peg earlier to accomodate interplant lead-times
@
text
@d67 4
a70 1
  defaultSet.setBool("supplierPerspectiveInterplantPeg", true,0,false);
d83 2
a84 2
  defaultSet.setBool("printImpactPeriodDiagnosticFile", true,0,false);
  defaultSet.setBool("printMrpImpactPeriodDiagnosticFile", true,0,false);
@


1.49
log
@sce 4.60, scrapCost, stockCost, greedySearchIncrement,pegging in heuristic, removal of optWithLotSizes
@
text
@d67 2
d80 2
a81 2
  defaultSet.setBool("printImpactPeriodDiagnosticFile", false,0,false);
  defaultSet.setBool("printMrpImpactPeriodDiagnosticFile", false,0,false);
@


1.48
log
@added function to print WIT impact period
@
text
@d67 7
a75 1
  // 5.00
d83 2
d203 2
a204 1
  defaultSet.setBool("optWithLotSizes", FALSE,0,FALSE);
a205 2
  defaultSet.setBool("useLocalBuildAhead", false,0,false);
  defaultSet.setInt("buildAheadLimit", 0, 0,false);
@


1.47
log
@enabled buildAheadFile function
@
text
@d72 6
@


1.46
log
@initial changes for sce4.40
@
text
@d71 2
@


1.45
log
@Preliminary commit for SCE 5.00
@
text
@d81 1
d102 1
d476 1
@


1.44
log
@comitting changes made on production branch that were merged in ... woohooo
@
text
@d67 9
d102 4
@


1.43
log
@removed the obsolete pathCounting parameter
@
text
@d49 1
a49 1
void 
d51 1
a51 1
						     LgFrSceSetOfParameters & defaultSet)
d95 1
a95 1
  // usePipForPeg is a swaperoo that tells sce to use the PIP function and 
d97 1
a97 1
  // in sce and pip is turned on.  And all the Peg extensions and printPeg params are 
d170 1
a170 1
  // begin: SCE 3.30 parameters 
d179 1
a179 1
  // begin: SCE 3.20 parameters 
d186 1
a186 1
  // begin: SCE 3.11 rev04 parameters 
d197 1
a197 1
  // end: SCE 3.11 rev04 parameters 
d199 1
a199 1
  // begin: SCE 3.11 parameters 
d202 1
a202 1
  // end: SCE 3.11 parameters 
d205 1
a205 1
  // begin: SCE 3.10 parameters 
d209 1
a209 1
  // end: SCE 3.10 parameters 
d230 1
a230 1
  
d236 1
a236 1
  defaultSet.setString("fssMachineFileExtension", ".fssMachineReport",0,false);  
d243 2
a244 2
  defaultSet.setString("explodeEchoFileExtension", ".witExplode.echo",0,false);  
  defaultSet.setString("explodeWitDataFileExtension", ".witExplode.data",0,false);  
d248 2
a249 2
  defaultSet.setString("heurEchoFileExtension", ".witHeur.echo",0,false);  
  defaultSet.setString("heurWitDataFileExtension", ".witHeur.data",0,false);  
d260 2
a261 2
  defaultSet.setString("mrpSubUsageFileExtension", ".mrpSubUs",0,false);  
  defaultSet.setString("mrpOpSubUsageFileExtension", ".mrpOpSubUs",0,false);  
d267 1
a267 1
  defaultSet.setString("opSubUsageFileExtension", ".opSubUsage",0,false);  
d269 1
a269 1
  defaultSet.setString("optWitDataFileExtension", ".witOpt.data",0,false);  
d271 1
a271 1
  defaultSet.setString("outputFilePrefix", "./output",0,false);          
d289 2
a290 2
  defaultSet.setString("siteCustomization", "default",0,false);  
  
d292 1
a292 1
  // NEW SCE 2.00 parameters 
d295 1
a295 1
  defaultSet.setBool("smartExplodeForceEquit", true,0,false);    
d306 2
a307 2
  // NEW SCE 2.30 parameters 
  defaultSet.setBool("useMultiRouteImplosion", false,0,false);
d346 1
a346 1
  
d352 1
a352 1
  
a413 1
  
d415 2
a416 1
  // print flags : non-mandatory 
d450 2
a451 2
  defaultSet.setFloat("defaultDefaultBopPreference", 0.0,0,false);  
  defaultSet.setFloat("defaultExplicitBopPreference", 0.0,0,false);  
d473 1
a473 1
  // TEST do we need these!!!   They are coming out in the param.log and the 
d524 1
a524 1
}  
d529 1
a529 1
void 
d531 1
a531 1
						   LgFrSceSetOfParameters & setOfParameters)
d571 1
a571 1
					      LgFrSceSetOfParameters & setOfParameters)
d586 4
a589 4
      (*sceErrFacility_)("SevereCannotOpenFile",MclArgList() 
			 << "parameter" 
			 << parameterFileName 
			 << "");
d598 1
a598 1
    
d611 2
a612 2
	commentCount++;
	continue;
d615 3
a617 3
	// currParamType = {0=int; 1=float; 2=string; 3=bool}
	//      "        = -1 means ERROR
	int currParamType = setOfParameters.exists(paramName);
d619 1
a619 1
	if (currParamType != -1) {  // -1 means invalid param name!
d622 11
a632 11
	  if (areThereQuotes) {
	    // pick up to end of line
	    std::string restOfLine = next("\n");
   	    paramValue = sce::extractQuotedPart( restOfLine );

	    //RWCRegexp quotedStringREGEXP("\".*\"");  
	    //std::string quotedParamValue = restOfLine(quotedStringREGEXP);
	    //paramValue = sce::strip(quotedParamValue,  '\"');
	  }
	  else 
	    paramValue = next(" ,\t\n");
d634 2
a635 2
	  // try to grab the actual value
	  paramValue = next(" ,\t\n");
d639 7
a645 7
	  if (paramValue.empty()) {
	    (*sceErrFacility_)("UsingDefaultParameter",MclArgList() << parameterFileName << (int)totalCount << paramName << dataLine);
	    // this is just a warning... we will take default val ... user may
	    // not want this
	    badCount++;   // missing a parameter value!!! -- error message?
	    continue;     // go to next line in param file
	  }
d649 6
a654 6
	  // flags for seeing if the parameter value read in can fit the
	  // appropriate type (ie it *could* be of the type it should be)
	  unsigned int isInt = 1;
	  unsigned int isFloat = 1;
	  unsigned int isString = 1;
	  unsigned int isBool = 1;
d658 1
a658 1
      // Conditions for a float: 
d664 1
a664 1
      bool containsOnePoint = ( firstPointOffset != std::string::npos && 
d668 1
a668 1
	if( !isdigit( paramValue[i] ) && paramValue[i] != '.' )
d670 2
a671 2
	    allDigits = false;
	    break;
d674 2
a675 2
	isFloat = 0;
      
d678 2
a679 2
	isInt = 0;
      
d681 1
a681 1
	long temp;
d683 3
a685 3
	setOfParameters.setInt(paramName,temp,1,false);
	goodCount++;
	continue;
d688 1
a688 1
	double temp;
d690 3
a692 3
	setOfParameters.setFloat(paramName,temp,1,false);
	goodCount++;
	    continue;
d695 10
a704 10
	if (isInt) { // it is a number
	  long temp;
	  sce::fromString(paramValue,temp);
	  if (temp == 0)
	    setOfParameters.setBool(paramName,false,1,false);
	  else
	    setOfParameters.setBool(paramName,true,1,false);
	  goodCount++;
	  continue;
	}
d708 3
a710 3
	if (0) {
	  //RWCRegexp quotedStringREGEXP("^\".*\"");  
	  //std::string quotedParamValue = paramValue(quotedStringREGEXP);
d713 2
a714 2
	}
	setOfParameters.setString(paramName,paramValue,1,false);
d716 1
a716 1
	setOfParameters.setString(paramName,paramValue,1,false);
d718 2
a719 2
	goodCount++;
	continue;
d722 2
a723 2
	(*sceErrFacility_)("IllegalParameterEntry",MclArgList() << paramName << parameterFileName << (int)totalCount << dataLine);
	badCount++;
d725 7
a731 7
      
	}
	else {
	  (*sceErrFacility_)("PossibleInvalidParameter",MclArgList() << paramName << parameterFileName << (int)totalCount << dataLine);
	  badCount++;
	}
	
d733 1
a733 1
      
d735 1
a735 1
    
d737 3
a739 3
    
    
    
d760 4
a763 4
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() 
			 << "fssSingletonHorizon" 
			 << parameterFileName 
			 << "Must be less than numPeriods");
d772 4
a775 4
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() 
			 << "fssGeneralSetHorizon" 
			 << parameterFileName 
			 << "Must be less than numPeriods");
d784 4
a787 4
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() 
			 << "fssMachineHorizon" 
			 << parameterFileName 
			 << "Must be less than numPeriods");
d796 4
a799 4
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() 
			 << "buildAheadLimit" 
			 << parameterFileName 
			 << "Must be less than numPeriods");
d811 5
a815 5
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() 
			 << "defaultShipLateLimit" 
			 << parameterFileName 
			 << "Must be less than numPeriods");
    }     
d820 2
a821 2
			   numPeriods - 1,
			   0, false);
d840 6
a845 6
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() 
			 << "calendarFormat" 
			 << parameterFileName 
			 << "Must be: {G} -- NOTE: Case-Sensitive.");
    } 
    
d849 4
a852 4
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() 
			 << "objectiveType" 
			 << parameterFileName 
			 << "Must be one of the following: {1,2,3}");
d859 4
a862 4
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() 
			 << "subUsageReportMode" 
			 << parameterFileName 
			 << "Must be one of the following: {parentProd, primaryCoverage, subUsage)");
d869 4
a872 4
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() 
			 << "fileFormatType" 
			 << parameterFileName 
			 << "Must be one of the following: {Standard, STANDARD} -- NOTE: Case-Sensitive.");
d889 3
a891 3
	// we DO NOT want this! ie. it is supposed to be user-defined but
	// is not.
	(*sceErrFacility_)("MandatoryParameterMissing",MclArgList() << parameterFileName << temp.getName());
d918 1
a918 1
float 
d920 1
a920 1
    bool & exists,                                             
d928 3
a930 3
					    parameterFile,
					    targetParameter,
					    mandatory);
d952 1
a952 1
const 
d961 1
a961 1
    
d968 1
a968 1
    
d973 1
a973 1
    
d982 1
a982 1
	continue;
d986 7
a992 7
	parameter = next(" \t\n,");
	// if we found the match, then test to see if there's a parameter
	if (parameter.empty())  {
	  (*sceErrFacility_)("MandatoryParameterMissing",MclArgList() << parameterFile << targetParameter);
	}
	exists = true;
	break;
d999 1
a999 1
	  (*sceErrFacility_)("MandatoryParameterMissing",MclArgList() << parameterFile << targetParameter);
d1010 1
a1010 1
int 
d1019 1
a1019 1
    
d1023 3
a1025 3
					    parameterFile,
					    targetParameter,
					    mandatory);
d1028 1
a1028 1
      
d1052 3
a1054 3
					      parameterFile,
					      targetParameter,
					      mandatory);
d1057 1
a1057 1
	return 1;
d1077 2
a1078 2
	inFile.close();
	return true;
d1085 1
a1085 1
// Destructor 
d1093 1
a1093 1
  // to them, including the input log entry for the parameter file which is 
d1096 5
a1100 5
			      totalCount_,
			      goodCount_,
			      badCount_,
			      commentCount_,
			      goodCount_);
a1152 1
  
d1154 2
a1155 1
} 
@


1.43.4.1
log
@Rev 06 changes ... on production branch
@
text
@d49 1
a49 1
void
d51 1
a51 1
                                                     LgFrSceSetOfParameters & defaultSet)
d95 1
a95 1
  // usePipForPeg is a swaperoo that tells sce to use the PIP function and
d97 1
a97 1
  // in sce and pip is turned on.  And all the Peg extensions and printPeg params are
d170 1
a170 1
  // begin: SCE 3.30 parameters
d179 1
a179 1
  // begin: SCE 3.20 parameters
d186 1
a186 1
  // begin: SCE 3.11 rev04 parameters
d197 1
a197 1
  // end: SCE 3.11 rev04 parameters
d199 1
a199 1
  // begin: SCE 3.11 parameters
d202 1
a202 1
  // end: SCE 3.11 parameters
d205 1
a205 1
  // begin: SCE 3.10 parameters
d209 1
a209 1
  // end: SCE 3.10 parameters
d230 1
a230 1

d236 1
a236 1
  defaultSet.setString("fssMachineFileExtension", ".fssMachineReport",0,false);
d243 2
a244 2
  defaultSet.setString("explodeEchoFileExtension", ".witExplode.echo",0,false);
  defaultSet.setString("explodeWitDataFileExtension", ".witExplode.data",0,false);
d248 2
a249 2
  defaultSet.setString("heurEchoFileExtension", ".witHeur.echo",0,false);
  defaultSet.setString("heurWitDataFileExtension", ".witHeur.data",0,false);
d260 2
a261 2
  defaultSet.setString("mrpSubUsageFileExtension", ".mrpSubUs",0,false);
  defaultSet.setString("mrpOpSubUsageFileExtension", ".mrpOpSubUs",0,false);
d267 1
a267 1
  defaultSet.setString("opSubUsageFileExtension", ".opSubUsage",0,false);
d269 1
a269 1
  defaultSet.setString("optWitDataFileExtension", ".witOpt.data",0,false);
d271 1
a271 1
  defaultSet.setString("outputFilePrefix", "./output",0,false);
d289 2
a290 2
  defaultSet.setString("siteCustomization", "default",0,false);

d292 1
a292 1
  // NEW SCE 2.00 parameters
d295 1
a295 1
  defaultSet.setBool("smartExplodeForceEquit", true,0,false);
d306 2
a307 2
  // NEW SCE 2.30 parameters
  defaultSet.setBool("useMultiRouteImplosion", true,0,false);
d346 1
a346 1

d352 1
a352 1

d414 1
d416 1
a416 2

  // print flags : non-mandatory
d450 2
a451 2
  defaultSet.setFloat("defaultDefaultBopPreference", 0.0,0,false);
  defaultSet.setFloat("defaultExplicitBopPreference", 0.0,0,false);
d473 1
a473 1
  // TEST do we need these!!!   They are coming out in the param.log and the
d524 1
a524 1
}
d529 1
a529 1
void
d531 1
a531 1
                                                   LgFrSceSetOfParameters & setOfParameters)
d571 1
a571 1
                                              LgFrSceSetOfParameters & setOfParameters)
d586 4
a589 4
      (*sceErrFacility_)("SevereCannotOpenFile",MclArgList()
                         << "parameter"
                         << parameterFileName
                         << "");
d598 1
a598 1

d611 2
a612 2
        commentCount++;
        continue;
d615 3
a617 3
        // currParamType = {0=int; 1=float; 2=string; 3=bool}
        //      "        = -1 means ERROR
        int currParamType = setOfParameters.exists(paramName);
d619 1
a619 1
        if (currParamType != -1) {  // -1 means invalid param name!
d622 11
a632 11
          if (areThereQuotes) {
            // pick up to end of line
            std::string restOfLine = next("\n");
            paramValue = sce::extractQuotedPart( restOfLine );

            //RWCRegexp quotedStringREGEXP("\".*\"");
            //std::string quotedParamValue = restOfLine(quotedStringREGEXP);
            //paramValue = sce::strip(quotedParamValue,  '\"');
          }
          else
            paramValue = next(" ,\t\n");
d634 2
a635 2
          // try to grab the actual value
          paramValue = next(" ,\t\n");
d639 7
a645 7
          if (paramValue.empty()) {
            (*sceErrFacility_)("UsingDefaultParameter",MclArgList() << parameterFileName << (int)totalCount << paramName << dataLine);
            // this is just a warning... we will take default val ... user may
            // not want this
            badCount++;   // missing a parameter value!!! -- error message?
            continue;     // go to next line in param file
          }
d649 6
a654 6
          // flags for seeing if the parameter value read in can fit the
          // appropriate type (ie it *could* be of the type it should be)
          unsigned int isInt = 1;
          unsigned int isFloat = 1;
          unsigned int isString = 1;
          unsigned int isBool = 1;
d658 1
a658 1
      // Conditions for a float:
d664 1
a664 1
      bool containsOnePoint = ( firstPointOffset != std::string::npos &&
d668 1
a668 1
        if( !isdigit( paramValue[i] ) && paramValue[i] != '.' )
d670 2
a671 2
            allDigits = false;
            break;
d674 2
a675 2
        isFloat = 0;

d678 2
a679 2
        isInt = 0;

d681 1
a681 1
        long temp;
d683 3
a685 3
        setOfParameters.setInt(paramName,temp,1,false);
        goodCount++;
        continue;
d688 1
a688 1
        double temp;
d690 3
a692 3
        setOfParameters.setFloat(paramName,temp,1,false);
        goodCount++;
            continue;
d695 10
a704 10
        if (isInt) { // it is a number
          long temp;
          sce::fromString(paramValue,temp);
          if (temp == 0)
            setOfParameters.setBool(paramName,false,1,false);
          else
            setOfParameters.setBool(paramName,true,1,false);
          goodCount++;
          continue;
        }
d708 3
a710 3
        if (0) {
          //RWCRegexp quotedStringREGEXP("^\".*\"");
          //std::string quotedParamValue = paramValue(quotedStringREGEXP);
d713 2
a714 2
        }
        setOfParameters.setString(paramName,paramValue,1,false);
d716 1
a716 1
        setOfParameters.setString(paramName,paramValue,1,false);
d718 2
a719 2
        goodCount++;
        continue;
d722 2
a723 2
        (*sceErrFacility_)("IllegalParameterEntry",MclArgList() << paramName << parameterFileName << (int)totalCount << dataLine);
        badCount++;
d725 7
a731 7

        }
        else {
          (*sceErrFacility_)("PossibleInvalidParameter",MclArgList() << paramName << parameterFileName << (int)totalCount << dataLine);
          badCount++;
        }

d733 1
a733 1

d735 1
a735 1

d737 3
a739 3



d760 4
a763 4
      (*sceErrFacility_)("ParamOutOfRange",MclArgList()
                         << "fssSingletonHorizon"
                         << parameterFileName
                         << "Must be less than numPeriods");
d772 4
a775 4
      (*sceErrFacility_)("ParamOutOfRange",MclArgList()
                         << "fssGeneralSetHorizon"
                         << parameterFileName
                         << "Must be less than numPeriods");
d784 4
a787 4
      (*sceErrFacility_)("ParamOutOfRange",MclArgList()
                         << "fssMachineHorizon"
                         << parameterFileName
                         << "Must be less than numPeriods");
d796 4
a799 4
      (*sceErrFacility_)("ParamOutOfRange",MclArgList()
                         << "buildAheadLimit"
                         << parameterFileName
                         << "Must be less than numPeriods");
d811 5
a815 5
      (*sceErrFacility_)("ParamOutOfRange",MclArgList()
                         << "defaultShipLateLimit"
                         << parameterFileName
                         << "Must be less than numPeriods");
    }
d820 2
a821 2
                           numPeriods - 1,
                           0, false);
d840 6
a845 6
      (*sceErrFacility_)("ParamOutOfRange",MclArgList()
                         << "calendarFormat"
                         << parameterFileName
                         << "Must be: {G} -- NOTE: Case-Sensitive.");
    }

d849 4
a852 4
      (*sceErrFacility_)("ParamOutOfRange",MclArgList()
                         << "objectiveType"
                         << parameterFileName
                         << "Must be one of the following: {1,2,3}");
d859 4
a862 4
      (*sceErrFacility_)("ParamOutOfRange",MclArgList()
                         << "subUsageReportMode"
                         << parameterFileName
                         << "Must be one of the following: {parentProd, primaryCoverage, subUsage)");
d869 4
a872 4
      (*sceErrFacility_)("ParamOutOfRange",MclArgList()
                         << "fileFormatType"
                         << parameterFileName
                         << "Must be one of the following: {Standard, STANDARD} -- NOTE: Case-Sensitive.");
d889 3
a891 3
        // we DO NOT want this! ie. it is supposed to be user-defined but
        // is not.
        (*sceErrFacility_)("MandatoryParameterMissing",MclArgList() << parameterFileName << temp.getName());
d918 1
a918 1
float
d920 1
a920 1
    bool & exists,
d928 3
a930 3
                                            parameterFile,
                                            targetParameter,
                                            mandatory);
d952 1
a952 1
const
d961 1
a961 1

d968 1
a968 1

d973 1
a973 1

d982 1
a982 1
        continue;
d986 7
a992 7
        parameter = next(" \t\n,");
        // if we found the match, then test to see if there's a parameter
        if (parameter.empty())  {
          (*sceErrFacility_)("MandatoryParameterMissing",MclArgList() << parameterFile << targetParameter);
        }
        exists = true;
        break;
d999 1
a999 1
          (*sceErrFacility_)("MandatoryParameterMissing",MclArgList() << parameterFile << targetParameter);
d1010 1
a1010 1
int
d1019 1
a1019 1

d1023 3
a1025 3
                                            parameterFile,
                                            targetParameter,
                                            mandatory);
d1028 1
a1028 1

d1052 3
a1054 3
                                              parameterFile,
                                              targetParameter,
                                              mandatory);
d1057 1
a1057 1
        return 1;
d1077 2
a1078 2
        inFile.close();
        return true;
d1085 1
a1085 1
// Destructor
d1093 1
a1093 1
  // to them, including the input log entry for the parameter file which is
d1096 5
a1100 5
                              totalCount_,
                              goodCount_,
                              badCount_,
                              commentCount_,
                              goodCount_);
d1153 1
d1155 1
a1155 2

}
@


1.42
log
@removed the "binning" stuff which is now obsolete
@
text
@a307 1
  defaultSet.setBool("pathCounting", false,0,false);
@


1.41
log
@First pass at sce 4.20 function.
@
text
@a256 4
#ifdef BINNING_OPERATION_TEMP_SOLUTION
  defaultSet.setString("binDemandFileExtension", ".binDemand",0,false);
  defaultSet.setString("binOrdersFileExtension", ".bin",0,false);
#endif
a387 3
#ifdef BINNING_OPERATION_TEMP_SOLUTION
  defaultSet.setString("binFile","",0,false);
#endif  
a430 3
#ifdef BINNING_OPERATION_TEMP_SOLUTION
  defaultSet.setBool("printBinDemandFile", false,0,false);
#endif  
a453 3
#ifdef BINNING_OPERATION_TEMP_SOLUTION
  defaultSet.setFloat("defaultBinBopPreference", 0.0,0,false);
#endif
a503 4
#ifdef BINNING_OPERATION_TEMP_SOLUTION
  defaultSet.setString("binDemandFileName","",0,false);
  defaultSet.setString("binOrdersFileName","",0,false);
#endif  
@


1.40
log
@got rid of witAddXXXVa
@
text
@d68 1
a68 1
  defaultSet.setString("smartExplodeEngine","heuristic",0,false);
d70 2
@


1.39
log
@4.20 commit: global subs, prioritized explode
@
text
@d68 1
a69 1
  defaultSet.setString("smartExplodeEngine","heurAlloc",0,false);
@


1.38
log
@preping for release 4.1
@
text
@d67 11
@


1.37
log
@added ProdVol from ProdVol Peg files
@
text
@d77 2
d106 1
a106 1
  defaultSet.setString(   "IndpProdVolPegFileExtension",        ".iProdVolPeg",0,false);
d110 5
a114 1
  defaultSet.setString(   "IndpPfProdVolPegFileExtension",        ".iPfProdVolPeg",0,false);
d140 4
@


1.36
log
@made demandVol file optional
@
text
@d103 6
d128 6
@


1.35
log
@added subDB output file
@
text
@d327 1
a327 1
  defaultSet.setString("demandVolFile","",0,true);
@


1.34
log
@added vac calculation
@
text
@d74 2
@


1.33
log
@tweaking to get pipPriority settings to work
@
text
@d67 9
@


1.32
log
@pip for LP engine
@
text
@d117 1
@


1.31
log
@default of pegSubUsageto Primary should be 0
@
text
@d116 1
a116 1

@


1.30
log
@capacityUsage and mrpCapacityUsage
@
text
@d113 1
a113 1
  defaultSet.setBool("PegSubUsageToPrimary", true,0,false);
@


1.29
log
@mand/opt capacity, new selective sets
@
text
@d117 6
@


1.28
log
@First cut at Selective Features using proportional routing
@
text
@d114 1
a116 2
  // END PIP

d120 4
d248 1
d757 14
@


1.27
log
@permanently replaced Concurrent Pegging with Post Implosion pegging.
Parameters stay the same though.
@
text
@d112 1
a112 1
  defaultSet.setBool("doPeg", false,0,false);
d125 1
a125 1
  defaultSet.setBool("globalSubNetAllowed", FALSE,0,FALSE);
@


1.26
log
@fixed Scrubbing so that scrubbed param file would retain original
settings before usePipForPeg swapped them around
@
text
@d73 41
a113 40
  defaultSet.setBool("usePipForPeg", false,0,false);
  defaultSet.setString("mrpIndpExecVolPIPFileExtension",    ".iMrpExecVolPIP",0,false);
  defaultSet.setString(   "indpExecVolPIPFileExtension",    ".iExecVolPIP",0,false);
  defaultSet.setString("mrpExecVolPIPFileExtension",        ".mrpExecVolPIP",0,false);
  defaultSet.setString(   "execVolPIPFileExtension",        ".execVolPIP",0,false);
  defaultSet.setString("mrpIndpInterplantPIPFileExtension", ".iMrpInterplantPIP",0,false);
  defaultSet.setString(   "indpInterplantPIPFileExtension", ".iInterplantPIP",0,false);
  defaultSet.setString("mrpInterplantPIPFileExtension",     ".mrpInterplantPIP",0,false);
  defaultSet.setString(   "interplantPIPFileExtension",     ".interplantPIP",0,false);
  defaultSet.setString("mrpIndpDemandConsPIPFileExtension", ".iMrpDemConsPIP",0,false);
  defaultSet.setString(   "indpDemandConsPIPFileExtension", ".iDemConsPIP",0,false);
  defaultSet.setString("mrpDemandConsPIPFileExtension",     ".mrpDemConsPIP",0,false);
  defaultSet.setString(   "demandConsPIPFileExtension",     ".demConsPIP",0,false);
  defaultSet.setString("mrpIndpSupplyPIPFileExtension", ".iMrpSupplyPIP",0,false);
  defaultSet.setString(   "indpSupplyPIPFileExtension", ".iSupplyPIP",0,false);
  defaultSet.setString("mrpSupplyPIPFileExtension",     ".mrpSupplyPIP",0,false);
  defaultSet.setString(   "supplyPIPFileExtension",     ".supplyPIP",0,false);
  defaultSet.setBool("printMrpIndpExecVolPIPFile", false,0,false);
  defaultSet.setBool("printMrpExecVolPIPFile", false,0,false);
  defaultSet.setBool("printIndpExecVolPIPFile", false,0,false);
  defaultSet.setBool("printExecVolPIPFile", false,0,false);
  defaultSet.setBool("printMrpIndpInterplantPIPFile", false,0,false);
  defaultSet.setBool("printMrpInterplantPIPFile", false,0,false);
  defaultSet.setBool("printIndpInterplantPIPFile", false,0,false);
  defaultSet.setBool("printInterplantPIPFile", false,0,false);
  defaultSet.setBool("printMrpIndpDemandConsPIPFile", false,0,false);
  defaultSet.setBool("printMrpDemandConsPIPFile", false,0,false);
  defaultSet.setBool("printIndpDemandConsPIPFile", false,0,false);
  defaultSet.setBool("printDemandConsPIPFile", false,0,false);
  defaultSet.setBool("printMrpIndpSupplyPIPFile", false,0,false);
  defaultSet.setBool("printMrpSupplyPIPFile", false,0,false);
  defaultSet.setBool("printIndpSupplyPIPFile", false,0,false);
  defaultSet.setBool("printSupplyPIPFile", false,0,false);

  defaultSet.setBool("doPIP", false,0,false);
  defaultSet.setString("mrpProdVolPIPFileExtension",        ".mrpProdVolPIP",0,false);
  defaultSet.setString(   "prodVolPIPFileExtension",        ".prodVolPIP",0,false);
  defaultSet.setBool("printMrpProdVolPIPFile", false,0,false);
  defaultSet.setBool("printProdVolPIPFile", false,0,false);
  defaultSet.setBool("PIPSubUsageToPrimary", true,0,false);
a123 1
  defaultSet.setBool("pegSubUsageToPrimary", FALSE,0,FALSE);
a130 7

  defaultSet.setBool("printProdVolPegFile", true,0,false);
  defaultSet.setBool("printMrpProdVolPegFile", true,0,false);
  defaultSet.setString(   "prodVolPegFileExtension",        ".prodVolPeg",0,false);
  defaultSet.setString("mrpProdVolPegFileExtension",        ".mrpProdVolPeg",0,false);


a152 26
  defaultSet.setBool("doPegging", true,0,false);
  defaultSet.setBool("printDemandConsPegFile", true,0,false);
  defaultSet.setBool("printIndpDemandConsPegFile", true,0,false);
  defaultSet.setBool("printMrpDemandConsPegFile", true,0,false);
  defaultSet.setBool("printMrpIndpDemandConsPegFile", true,0,false);
  defaultSet.setBool("printInterplantPegFile", true,0,false);
  defaultSet.setBool("printIndpInterplantPegFile", true,0,false);
  defaultSet.setBool("printMrpInterplantPegFile", true,0,false);
  defaultSet.setBool("printMrpIndpInterplantPegFile", true,0,false);
  defaultSet.setBool("printExecVolPegFile", true,0,false);
  defaultSet.setBool("printIndpExecVolPegFile", true,0,false);
  defaultSet.setBool("printMrpExecVolPegFile", true,0,false);
  defaultSet.setBool("printMrpIndpExecVolPegFile", true,0,false);
  defaultSet.setString(   "demandConsPegFileExtension",     ".demConsPeg",0,false);
  defaultSet.setString("mrpDemandConsPegFileExtension",     ".mrpDemConsPeg",0,false);
  defaultSet.setString(   "indpDemandConsPegFileExtension", ".iDemConsPeg",0,false);
  defaultSet.setString("mrpIndpDemandConsPegFileExtension", ".iMrpDemConsPeg",0,false);
  defaultSet.setString(   "interplantPegFileExtension",     ".interplantPeg",0,false);
  defaultSet.setString("mrpInterplantPegFileExtension",     ".mrpInterplantPeg",0,false);
  defaultSet.setString(   "indpInterplantPegFileExtension", ".iInterplantPeg",0,false);
  defaultSet.setString("mrpIndpInterplantPegFileExtension", ".iMrpInterplantPeg",0,false);
  defaultSet.setString(   "execVolPegFileExtension",        ".execVolPeg",0,false);
  defaultSet.setString("mrpExecVolPegFileExtension",        ".mrpExecVolPeg",0,false);
  defaultSet.setString(   "indpExecVolPegFileExtension",    ".iExecVolPeg",0,false);
  defaultSet.setString("mrpIndpExecVolPegFileExtension",    ".iMrpExecVolPeg",0,false);

a820 241



    setOfParameters.backUp();

    if (setOfParameters.getBool("usePipForPeg")) {
      std::string pegStringValue;
      std::string nonpegStringValue;
      int pegMethodSet;
      
      int pegBoolValue;
      int nonpegBoolValue = false;
      
      pegStringValue = setOfParameters.getString("mrpIndpExecVolPegFileExtension");
      nonpegStringValue = pegStringValue + ".not";
      pegMethodSet = setOfParameters.getMethodSet("mrpIndpExecVolPegFileExtension");
      setOfParameters.setString("mrpIndpExecVolPIPFileExtension",pegStringValue,pegMethodSet,false);
      setOfParameters.setString("mrpIndpExecVolPegFileExtension",nonpegStringValue,pegMethodSet,false);
      
      
      pegStringValue = setOfParameters.getString("indpExecVolPegFileExtension");
      nonpegStringValue = pegStringValue + ".not";
      pegMethodSet = setOfParameters.getMethodSet("indpExecVolPegFileExtension");
      setOfParameters.setString("indpExecVolPIPFileExtension",pegStringValue,pegMethodSet,false);
      setOfParameters.setString("indpExecVolPegFileExtension",nonpegStringValue,pegMethodSet,false);
      
      
      pegStringValue = setOfParameters.getString("mrpExecVolPegFileExtension");
      nonpegStringValue = pegStringValue + ".not";
      pegMethodSet = setOfParameters.getMethodSet("mrpExecVolPegFileExtension");
      setOfParameters.setString("mrpExecVolPIPFileExtension",pegStringValue,pegMethodSet,false);
      setOfParameters.setString("mrpExecVolPegFileExtension",nonpegStringValue,pegMethodSet,false);
      
      
      pegStringValue = setOfParameters.getString("execVolPegFileExtension");
      nonpegStringValue = pegStringValue + ".not";
      pegMethodSet = setOfParameters.getMethodSet("execVolPegFileExtension");
      setOfParameters.setString("execVolPIPFileExtension",pegStringValue,pegMethodSet,false);
      setOfParameters.setString("execVolPegFileExtension",nonpegStringValue,pegMethodSet,false);
      
      
      pegStringValue = setOfParameters.getString("mrpIndpInterplantPegFileExtension");
      nonpegStringValue = pegStringValue + ".not";
      pegMethodSet = setOfParameters.getMethodSet("mrpIndpInterplantPegFileExtension");
      setOfParameters.setString("mrpIndpInterplantPIPFileExtension",pegStringValue,pegMethodSet,false);
      setOfParameters.setString("mrpIndpInterplantPegFileExtension",nonpegStringValue,pegMethodSet,false);
      
      
      pegStringValue = setOfParameters.getString("indpInterplantPegFileExtension");
      nonpegStringValue = pegStringValue + ".not";
      pegMethodSet = setOfParameters.getMethodSet("indpInterplantPegFileExtension");
      setOfParameters.setString("indpInterplantPIPFileExtension",pegStringValue,pegMethodSet,false);
      setOfParameters.setString("indpInterplantPegFileExtension",nonpegStringValue,pegMethodSet,false);
      
      
      pegStringValue = setOfParameters.getString("mrpInterplantPegFileExtension");
      nonpegStringValue = pegStringValue + ".not";
      pegMethodSet = setOfParameters.getMethodSet("mrpInterplantPegFileExtension");
      setOfParameters.setString("mrpInterplantPIPFileExtension",pegStringValue,pegMethodSet,false);
      setOfParameters.setString("mrpInterplantPegFileExtension",nonpegStringValue,pegMethodSet,false);
      
      
      pegStringValue = setOfParameters.getString("interplantPegFileExtension");
      nonpegStringValue = pegStringValue + ".not";
      pegMethodSet = setOfParameters.getMethodSet("interplantPegFileExtension");
      setOfParameters.setString("interplantPIPFileExtension",pegStringValue,pegMethodSet,false);
      setOfParameters.setString("interplantPegFileExtension",nonpegStringValue,pegMethodSet,false);

      
      pegStringValue = setOfParameters.getString("mrpIndpDemandConsPegFileExtension");
      nonpegStringValue = pegStringValue + ".not";
      pegMethodSet = setOfParameters.getMethodSet("mrpIndpDemandConsPegFileExtension");
      setOfParameters.setString("mrpIndpDemandConsPIPFileExtension",pegStringValue,pegMethodSet,false);
      setOfParameters.setString("mrpIndpDemandConsPegFileExtension",nonpegStringValue,pegMethodSet,false);
      
      
      pegStringValue = setOfParameters.getString("indpDemandConsPegFileExtension");
      nonpegStringValue = pegStringValue + ".not";
      pegMethodSet = setOfParameters.getMethodSet("indpDemandConsPegFileExtension");
      setOfParameters.setString("indpDemandConsPIPFileExtension",pegStringValue,pegMethodSet,false);
      setOfParameters.setString("indpDemandConsPegFileExtension",nonpegStringValue,pegMethodSet,false);
      
      
      pegStringValue = setOfParameters.getString("mrpDemandConsPegFileExtension");
      nonpegStringValue = pegStringValue + ".not";
      pegMethodSet = setOfParameters.getMethodSet("mrpDemandConsPegFileExtension");
      setOfParameters.setString("mrpDemandConsPIPFileExtension",pegStringValue,pegMethodSet,false);
      setOfParameters.setString("mrpDemandConsPegFileExtension",nonpegStringValue,pegMethodSet,false);
      
      
      pegStringValue = setOfParameters.getString("demandConsPegFileExtension");
      nonpegStringValue = pegStringValue + ".not";
      pegMethodSet = setOfParameters.getMethodSet("demandConsPegFileExtension");
      setOfParameters.setString("demandConsPIPFileExtension",pegStringValue,pegMethodSet,false);
      setOfParameters.setString("demandConsPegFileExtension",nonpegStringValue,pegMethodSet,false);
      
      
      pegStringValue = setOfParameters.getString("mrpIndpSupplyPegFileExtension");
      nonpegStringValue = pegStringValue + ".not";
      pegMethodSet = setOfParameters.getMethodSet("mrpIndpSupplyPegFileExtension");
      setOfParameters.setString("mrpIndpSupplyPIPFileExtension",pegStringValue,pegMethodSet,false);
      setOfParameters.setString("mrpIndpSupplyPegFileExtension",nonpegStringValue,pegMethodSet,false);
      
      
      pegStringValue = setOfParameters.getString("indpSupplyPegFileExtension");
      nonpegStringValue = pegStringValue + ".not";
      pegMethodSet = setOfParameters.getMethodSet("indpSupplyPegFileExtension");
      setOfParameters.setString("indpSupplyPIPFileExtension",pegStringValue,pegMethodSet,false);
      setOfParameters.setString("indpSupplyPegFileExtension",nonpegStringValue,pegMethodSet,false);
      
      
      pegStringValue = setOfParameters.getString("mrpSupplyPegFileExtension");
      nonpegStringValue = pegStringValue + ".not";
      pegMethodSet = setOfParameters.getMethodSet("mrpSupplyPegFileExtension");
      setOfParameters.setString("mrpSupplyPIPFileExtension",pegStringValue,pegMethodSet,false);
      setOfParameters.setString("mrpSupplyPegFileExtension",nonpegStringValue,pegMethodSet,false);
      
      
      pegStringValue = setOfParameters.getString("supplyPegFileExtension");
      nonpegStringValue = pegStringValue + ".not";
      pegMethodSet = setOfParameters.getMethodSet("supplyPegFileExtension");
      setOfParameters.setString("supplyPIPFileExtension",pegStringValue,pegMethodSet,false);
      setOfParameters.setString("supplyPegFileExtension",nonpegStringValue,pegMethodSet,false);
      
      
      pegStringValue = setOfParameters.getString("mrpProdVolPegFileExtension");
      nonpegStringValue = pegStringValue + ".not";
      pegMethodSet = setOfParameters.getMethodSet("mrpProdVolPegFileExtension");
      setOfParameters.setString("mrpProdVolPIPFileExtension",pegStringValue,pegMethodSet,false);
      setOfParameters.setString("mrpProdVolPegFileExtension",nonpegStringValue,pegMethodSet,false);
      
      
      pegStringValue = setOfParameters.getString("prodVolPegFileExtension");
      nonpegStringValue = pegStringValue + ".not";
      pegMethodSet = setOfParameters.getMethodSet("prodVolPegFileExtension");
      setOfParameters.setString("prodVolPIPFileExtension",pegStringValue,pegMethodSet,false);
      setOfParameters.setString("prodVolPegFileExtension",nonpegStringValue,pegMethodSet,false);
      
      // start here
      
      pegBoolValue = setOfParameters.getBool("printMrpIndpExecVolPegFile");
      pegMethodSet = setOfParameters.getMethodSet("printMrpIndpExecVolPegFile");
      setOfParameters.setBool("printMrpIndpExecVolPIPFile",pegBoolValue,pegMethodSet,false);
      setOfParameters.setBool("printMrpIndpExecVolPegFile",nonpegBoolValue,pegMethodSet,false);
      
      
      pegBoolValue = setOfParameters.getBool("printMrpExecVolPegFile");
      pegMethodSet = setOfParameters.getMethodSet("printMrpExecVolPegFile");
      setOfParameters.setBool("printMrpExecVolPIPFile",pegBoolValue,pegMethodSet,false);
      setOfParameters.setBool("printMrpExecVolPegFile",nonpegBoolValue,pegMethodSet,false);
      
      
      pegBoolValue = setOfParameters.getBool("printIndpExecVolPegFile");
      pegMethodSet = setOfParameters.getMethodSet("printIndpExecVolPegFile");
      setOfParameters.setBool("printIndpExecVolPIPFile",pegBoolValue,pegMethodSet,false);
      setOfParameters.setBool("printIndpExecVolPegFile",nonpegBoolValue,pegMethodSet,false);
      
      
      pegBoolValue = setOfParameters.getBool("printExecVolPegFile");
      pegMethodSet = setOfParameters.getMethodSet("printExecVolPegFile");
      setOfParameters.setBool("printExecVolPIPFile",pegBoolValue,pegMethodSet,false);
      setOfParameters.setBool("printExecVolPegFile",nonpegBoolValue,pegMethodSet,false);
      
      
      pegBoolValue = setOfParameters.getBool("printMrpIndpInterplantPegFile");
      pegMethodSet = setOfParameters.getMethodSet("printMrpIndpInterplantPegFile");
      setOfParameters.setBool("printMrpIndpInterplantPIPFile",pegBoolValue,pegMethodSet,false);
      setOfParameters.setBool("printMrpIndpInterplantPegFile",nonpegBoolValue,pegMethodSet,false);
      
      
      pegBoolValue = setOfParameters.getBool("printMrpInterplantPegFile");
      pegMethodSet = setOfParameters.getMethodSet("printMrpInterplantPegFile");
      setOfParameters.setBool("printMrpInterplantPIPFile",pegBoolValue,pegMethodSet,false);
      setOfParameters.setBool("printMrpInterplantPegFile",nonpegBoolValue,pegMethodSet,false);
      
      
      pegBoolValue = setOfParameters.getBool("printIndpInterplantPegFile");
      pegMethodSet = setOfParameters.getMethodSet("printIndpInterplantPegFile");
      setOfParameters.setBool("printIndpInterplantPIPFile",pegBoolValue,pegMethodSet,false);
      setOfParameters.setBool("printIndpInterplantPegFile",nonpegBoolValue,pegMethodSet,false);
      
      
      pegBoolValue = setOfParameters.getBool("printInterplantPegFile");
      pegMethodSet = setOfParameters.getMethodSet("printInterplantPegFile");
      setOfParameters.setBool("printInterplantPIPFile",pegBoolValue,pegMethodSet,false);
      setOfParameters.setBool("printInterplantPegFile",nonpegBoolValue,pegMethodSet,false);
      
      
      pegBoolValue = setOfParameters.getBool("printMrpIndpDemandConsPegFile");
      pegMethodSet = setOfParameters.getMethodSet("printMrpIndpDemandConsPegFile");
      setOfParameters.setBool("printMrpIndpDemandConsPIPFile",pegBoolValue,pegMethodSet,false);
      setOfParameters.setBool("printMrpIndpDemandConsPegFile",nonpegBoolValue,pegMethodSet,false);
      
      
      pegBoolValue = setOfParameters.getBool("printMrpDemandConsPegFile");
      pegMethodSet = setOfParameters.getMethodSet("printMrpDemandConsPegFile");
      setOfParameters.setBool("printMrpDemandConsPIPFile",pegBoolValue,pegMethodSet,false);
      setOfParameters.setBool("printMrpDemandConsPegFile",nonpegBoolValue,pegMethodSet,false);
      
      
      pegBoolValue = setOfParameters.getBool("printIndpDemandConsPegFile");
      pegMethodSet = setOfParameters.getMethodSet("printIndpDemandConsPegFile");
      setOfParameters.setBool("printIndpDemandConsPIPFile",pegBoolValue,pegMethodSet,false);
      setOfParameters.setBool("printIndpDemandConsPegFile",nonpegBoolValue,pegMethodSet,false);
      
      
      pegBoolValue = setOfParameters.getBool("printDemandConsPegFile");
      pegMethodSet = setOfParameters.getMethodSet("printDemandConsPegFile");
      setOfParameters.setBool("printDemandConsPIPFile",pegBoolValue,pegMethodSet,false);
      setOfParameters.setBool("printDemandConsPegFile",nonpegBoolValue,pegMethodSet,false);
      
      pegBoolValue = setOfParameters.getBool("printMrpProdVolPegFile");
      pegMethodSet = setOfParameters.getMethodSet("printMrpProdVolPegFile");
      setOfParameters.setBool("printMrpProdVolPIPFile",pegBoolValue,pegMethodSet,false);
      setOfParameters.setBool("printMrpProdVolPegFile",nonpegBoolValue,pegMethodSet,false);
      
      
      pegBoolValue = setOfParameters.getBool("printProdVolPegFile");
      pegMethodSet = setOfParameters.getMethodSet("printProdVolPegFile");
      setOfParameters.setBool("printProdVolPIPFile",pegBoolValue,pegMethodSet,false);
      setOfParameters.setBool("printProdVolPegFile",nonpegBoolValue,pegMethodSet,false);
      
      
      pegBoolValue = setOfParameters.getBool("PegSubUsageToPrimary");
      pegMethodSet = setOfParameters.getMethodSet("PegSubUsageToPrimary");
      setOfParameters.setBool("PIPSubUsageToPrimary",pegBoolValue,pegMethodSet,false);
      setOfParameters.setBool("PegSubUsageToPrimary",nonpegBoolValue,pegMethodSet,false);
      
      
      pegBoolValue = setOfParameters.getBool("doPegging");
      pegMethodSet = setOfParameters.getMethodSet("doPegging");
      setOfParameters.setBool("doPIP",pegBoolValue,pegMethodSet,false);
      setOfParameters.setBool("doPegging",nonpegBoolValue,pegMethodSet,false);
    }

    





@


1.25
log
@new param usePipForPeg enabled in paramMgr.  This swaps
around params so that SCE Pegging uses PIP
@
text
@d745 114
d1089 1
a1094 103
    // fssSingletonHorizon
    tempParamValue = setOfParameters.getInt("fssSingletonHorizon");
    if (tempParamValue >= numPeriods)
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() 
			 << "fssSingletonHorizon" 
			 << parameterFileName 
			 << "Must be less than numPeriods");
    tempMethodSet = setOfParameters.getMethodSet("fssSingletonHorizon");
    setOfParameters.setInt("fssSingletonHorizon", numPeriods-1, 0, false);
    if(tempMethodSet == 1)
       setOfParameters.setInt("fssSingletonHorizon", tempParamValue, 1, false);

    // fssGeneralSetHorizon
    tempParamValue = setOfParameters.getInt("fssGeneralSetHorizon");
    if (tempParamValue >= numPeriods)
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() 
			 << "fssGeneralSetHorizon" 
			 << parameterFileName 
			 << "Must be less than numPeriods");
    tempMethodSet = setOfParameters.getMethodSet("fssGeneralSetHorizon");
    setOfParameters.setInt("fssGeneralSetHorizon", numPeriods-1, 0, false);
    if(tempMethodSet == 1)
       setOfParameters.setInt("fssGeneralSetHorizon", tempParamValue, 1, false);

    // fssMachineHorizon
    tempParamValue = setOfParameters.getInt("fssMachineHorizon");
    if (tempParamValue >= numPeriods)
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() 
			 << "fssMachineHorizon" 
			 << parameterFileName 
			 << "Must be less than numPeriods");
    tempMethodSet = setOfParameters.getMethodSet("fssMachineHorizon");
    setOfParameters.setInt("fssMachineHorizon", numPeriods-1, 0, false);
    if(tempMethodSet == 1)
       setOfParameters.setInt("fssMachineHorizon", tempParamValue, 1, false);



    tempParamValue = setOfParameters.getInt("defaultShipLateLimit");
    if (tempParamValue >= numPeriods){
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() 
			 << "defaultShipLateLimit" 
			 << parameterFileName 
			 << "Must be less than numPeriods");
    }     
    tempMethodSet = setOfParameters.getMethodSet("defaultShipLateLimit");

    // default value from this param = numPeriods - 1
    setOfParameters.setInt("defaultShipLateLimit",
			   numPeriods - 1,
			   0, false);
    if(tempMethodSet == 1)
       setOfParameters.setInt("defaultShipLateLimit", tempParamValue, 1, false);

    //-------------------------------------------------------------------------


    //-------------------------------------------------------------------------
    // ** These are the parameters whose values must be within a valid range
    //    or in a certain domain... make sure these are valid!!
    //-------------------------------------------------------------------------
    std::string tempStringValue;
    int tempIntValue;

    // calendarFormat : {U,E,G}
    // 2.11 19980407 rev05 FIX:
    // we are doing away with this parameter.
    tempStringValue = setOfParameters.getString("calendarFormat");
    if (! (tempStringValue == "G")) {
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() 
			 << "calendarFormat" 
			 << parameterFileName 
			 << "Must be: {G} -- NOTE: Case-Sensitive.");
    } 
    
    // objectiveType : {1,2,3}
    tempIntValue = setOfParameters.getInt("objectiveType");
    if (!(tempIntValue == 1 || tempIntValue == 2 || tempIntValue == 3)) {
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() 
			 << "objectiveType" 
			 << parameterFileName 
			 << "Must be one of the following: {1,2,3}");
    }


    // objectiveType : subUsageReportMode
    tempStringValue = setOfParameters.getString("subUsageReportMode");
    if (!(tempStringValue == "parentProd" || tempStringValue == "primaryCoverage" || tempStringValue == "subUsage")) {
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() 
			 << "subUsageReportMode" 
			 << parameterFileName 
			 << "Must be one of the following: {parentProd, primaryCoverage, subUsage)");
    }


    // fileFormatType : {Standard}
    tempStringValue = setOfParameters.getString("fileFormatType");
    if (!(tempStringValue == "Standard" || tempStringValue == "STANDARD")) {
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() 
			 << "fileFormatType" 
			 << parameterFileName 
			 << "Must be one of the following: {Standard, STANDARD} -- NOTE: Case-Sensitive.");
    }
@


1.24
log
@added witBuildPip
@
text
@d15 2
d69 5
a650 30
#if 0 
	  // keep the old RegExp code as reference
	  // create a regexp object for checking if float
	  // possibly {float} -- not {string,int,bool}
	  // must contain a decimal and have some digits
	  // RWCRegexp floatExp("^[0-9]*\\.[0-9]*$");
	  RWCRegexp floatExp_R("^[0-9]+\\.[0-9]*$");  // allows for : 999. = 999.0
	  RWCRegexp floatExp_L("^[0-9]*\\.[0-9]+$");  // allows for : .999 = 0.999
	  // note: they overlap in the domain they will accept, but it doesn't matter
	  // if either are true, than it is an acceptable float value

	  // for checking if int
	  // must be only digits
	  // possibly {int,bool,(maybe float if we want to be flexible)}
	  // -- not {string}
	  RWCRegexp intExp("^[0-9]+$");

	  // also allow for negative numbers?
	  RWCRegexp negExp("^-[0-9]*\\.*[0-9]*");

	  // otherwise, if non-null, then at least a string, maybe bool {t,f}
	  // don't check here

	  if (paramValue(floatExp_R).empty() &&
	      paramValue(floatExp_L).empty())    //not float?
	    isFloat = 0; // cannot be a float

	  if (paramValue(intExp).empty())  // not int?
	    isInt = 0;
#else // new code that does the same as the above RegExp code - JG
d662 1
a662 1
          if( !isdigit( paramValue[i] ) && paramValue[i] != '.' )
d664 2
a665 2
              allDigits = false;
              break;
d668 2
a669 2
          isFloat = 0;

d672 4
a675 10
          isInt = 0;

#endif

	  //** NOTE: may want to use this RWLocale methods exclusively rather
	  //         than the above pattern matching... see RW documentation
	  // This does work though.

	  if ((currParamType == 0) && isInt) { // type = int
	    long temp;
d677 6
a682 6
	    setOfParameters.setInt(paramName,temp,1,false);
	    goodCount++;
	    continue;
	  }
	  else if ((currParamType == 1) && isFloat) { // type = float
	    double temp;
d684 2
a685 2
	    setOfParameters.setFloat(paramName,temp,1,false);
	    goodCount++;
d687 14
a700 14
	  }
	  else if (currParamType == 3) { // should be a bool
	    if (isInt) { // it is a number
	      long temp;
	      sce::fromString(paramValue,temp);
	      if (temp == 0)
		setOfParameters.setBool(paramName,false,1,false);
	      else
		setOfParameters.setBool(paramName,true,1,false);
	      goodCount++;
	      continue;
	    }
	  }
	  else if (currParamType == 2) {  // string parameter
d702 3
a704 3
	    if (0) {
	      //RWCRegexp quotedStringREGEXP("^\".*\"");  
	      //std::string quotedParamValue = paramValue(quotedStringREGEXP);
d707 2
a708 2
	    }
	    setOfParameters.setString(paramName,paramValue,1,false);
d710 1
a710 1
	    setOfParameters.setString(paramName,paramValue,1,false);
d712 8
a719 8
	    goodCount++;
	    continue;
	  }
	  else {
	    (*sceErrFacility_)("IllegalParameterEntry",MclArgList() << paramName << parameterFileName << (int)totalCount << dataLine);
	    badCount++;
	  }

d725 1
a725 1

d729 1
a729 1

d731 3
a733 3



d743 236
@


1.23
log
@first level of PIP
@
text
@d83 16
a98 16
  defaultSet.setBool("printMrpIndpExecVolPIPFile", true,0,false);
  defaultSet.setBool("printMrpExecVolPIPFile", true,0,false);
  defaultSet.setBool("printIndpExecVolPIPFile", true,0,false);
  defaultSet.setBool("printExecVolPIPFile", true,0,false);
  defaultSet.setBool("printMrpIndpInterplantPIPFile", true,0,false);
  defaultSet.setBool("printMrpInterplantPIPFile", true,0,false);
  defaultSet.setBool("printIndpInterplantPIPFile", true,0,false);
  defaultSet.setBool("printInterplantPIPFile", true,0,false);
  defaultSet.setBool("printMrpIndpDemandConsPIPFile", true,0,false);
  defaultSet.setBool("printMrpDemandConsPIPFile", true,0,false);
  defaultSet.setBool("printIndpDemandConsPIPFile", true,0,false);
  defaultSet.setBool("printDemandConsPIPFile", true,0,false);
  defaultSet.setBool("printMrpIndpSupplyPIPFile", true,0,false);
  defaultSet.setBool("printMrpSupplyPIPFile", true,0,false);
  defaultSet.setBool("printIndpSupplyPIPFile", true,0,false);
  defaultSet.setBool("printSupplyPIPFile", true,0,false);
d100 1
a100 1
  defaultSet.setBool("doPIP", true,0,false);
d103 2
a104 2
  defaultSet.setBool("printMrpProdVolPIPFile", true,0,false);
  defaultSet.setBool("printProdVolPIPFile", true,0,false);
@


1.22
log
@make InternalError1 an ok condition when reading prioirty file
@
text
@d65 45
d125 2
a126 3
#ifdef PRODVOLPEGGING
  defaultSet.setBool("printProdVolPegFile", false,0,false);
  defaultSet.setBool("printMrpProdVolPegFile", false,0,false);
a128 1
#endif
d153 13
a165 13
  defaultSet.setBool("doPegging", false,0,false);
  defaultSet.setBool("printDemandConsPegFile", false,0,false);
  defaultSet.setBool("printIndpDemandConsPegFile", false,0,false);
  defaultSet.setBool("printMrpDemandConsPegFile", false,0,false);
  defaultSet.setBool("printMrpIndpDemandConsPegFile", false,0,false);
  defaultSet.setBool("printInterplantPegFile", false,0,false);
  defaultSet.setBool("printIndpInterplantPegFile", false,0,false);
  defaultSet.setBool("printMrpInterplantPegFile", false,0,false);
  defaultSet.setBool("printMrpIndpInterplantPegFile", false,0,false);
  defaultSet.setBool("printExecVolPegFile", false,0,false);
  defaultSet.setBool("printIndpExecVolPegFile", false,0,false);
  defaultSet.setBool("printMrpExecVolPegFile", false,0,false);
  defaultSet.setBool("printMrpIndpExecVolPegFile", false,0,false);
d262 1
a262 1
  defaultSet.setString("featureRatioPegMethod", "pegToMachineShipPeriod",0,false); //pegToMachineDemandPeriod
d320 1
a320 1

@


1.21
log
@minor updates for SCE
@
text
@d601 2
a602 1
#if 0 // keep the old RegExp code as reference
@


1.20
log
@optWithLotSizes allows MIP and fix of machineFeatureOffsets to enable for CustomerChoice
@
text
@d65 1
a65 1
  // begin: SCE 3.21 parameters 
d289 1
a289 1
  defaultSet.setString("partCondFile","",0,true);
@


1.19
log
@parameter and logic to set Exec Penalties on subBoms so that Group Sharing Logic will sub before share
@
text
@d65 5
@


1.18
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@d70 1
a70 1

@


1.17
log
@latest SCE updates for group sharing
@
text
@d1 6
d8 2
a9 2
#include <iostream.h>
#include <fstream.h>
a10 2
#include <rw/ctoken.h>
#include <rw/locale.h>
d48 1
a48 1
LgFrSceParameterManager::initializeParameterDefaults(const RWCString & paramFile,
d54 1
a54 1
  defaultSet.setString("parameterFileName", paramFile, 0, FALSE);
d56 2
a57 2
  defaultSet.setString("parameterLogFileName", "param.log", 0, FALSE);
  defaultSet.setString("inputLogFileName", "sceInput.log", 0, FALSE);
d59 1
a59 1
  defaultSet.setString("outputLogFileName", "sceOut.log", 0, FALSE);
d61 1
a61 1
  defaultSet.setString("outputLogFileName", "sceOutput.log", 0, FALSE);
d76 4
a79 4
  defaultSet.setBool("printProdVolPegFile", FALSE,0,FALSE);
  defaultSet.setBool("printMrpProdVolPegFile", FALSE,0,FALSE);
  defaultSet.setString(   "prodVolPegFileExtension",        ".prodVolPeg",0,FALSE);
  defaultSet.setString("mrpProdVolPegFileExtension",        ".mrpProdVolPeg",0,FALSE);
d83 1
a83 1
  defaultSet.setBool("optInitFromZero", FALSE,0,FALSE);
d85 1
a85 1
  defaultSet.setBool("forcePcfBogons", FALSE,0,FALSE);
d87 6
a92 6
  defaultSet.setString("indepRevenueFile","",0,FALSE);
  defaultSet.setBool("aggregateSupplyInScrub", FALSE,0,FALSE);
  defaultSet.setBool("printLowestLevelNonPcfFile", FALSE,0,FALSE);
  defaultSet.setString("lowestLevelNonPcfFileExtension",".llNonPcf",0,FALSE);
  defaultSet.setBool("printPcfBogonsFile", FALSE,0,FALSE);
  defaultSet.setString("pcfBogonsFileExtension",".bogons",0,FALSE);
d96 2
a97 2
  defaultSet.setString("shadowPricesFileExtension",".shadowPrices",0,FALSE);
  defaultSet.setBool("printShadowPricesFile", FALSE,0,FALSE);
d102 28
a129 28
  defaultSet.setBool("shutOffAllLotSizing", FALSE,0,FALSE);
  defaultSet.setBool("disableInterplantJumperArcs", FALSE,0,FALSE);
  defaultSet.setBool("disableSplitBop", FALSE,0,FALSE);
  defaultSet.setBool("doPegging", FALSE,0,FALSE);
  defaultSet.setBool("printDemandConsPegFile", FALSE,0,FALSE);
  defaultSet.setBool("printIndpDemandConsPegFile", FALSE,0,FALSE);
  defaultSet.setBool("printMrpDemandConsPegFile", FALSE,0,FALSE);
  defaultSet.setBool("printMrpIndpDemandConsPegFile", FALSE,0,FALSE);
  defaultSet.setBool("printInterplantPegFile", FALSE,0,FALSE);
  defaultSet.setBool("printIndpInterplantPegFile", FALSE,0,FALSE);
  defaultSet.setBool("printMrpInterplantPegFile", FALSE,0,FALSE);
  defaultSet.setBool("printMrpIndpInterplantPegFile", FALSE,0,FALSE);
  defaultSet.setBool("printExecVolPegFile", FALSE,0,FALSE);
  defaultSet.setBool("printIndpExecVolPegFile", FALSE,0,FALSE);
  defaultSet.setBool("printMrpExecVolPegFile", FALSE,0,FALSE);
  defaultSet.setBool("printMrpIndpExecVolPegFile", FALSE,0,FALSE);
  defaultSet.setString(   "demandConsPegFileExtension",     ".demConsPeg",0,FALSE);
  defaultSet.setString("mrpDemandConsPegFileExtension",     ".mrpDemConsPeg",0,FALSE);
  defaultSet.setString(   "indpDemandConsPegFileExtension", ".iDemConsPeg",0,FALSE);
  defaultSet.setString("mrpIndpDemandConsPegFileExtension", ".iMrpDemConsPeg",0,FALSE);
  defaultSet.setString(   "interplantPegFileExtension",     ".interplantPeg",0,FALSE);
  defaultSet.setString("mrpInterplantPegFileExtension",     ".mrpInterplantPeg",0,FALSE);
  defaultSet.setString(   "indpInterplantPegFileExtension", ".iInterplantPeg",0,FALSE);
  defaultSet.setString("mrpIndpInterplantPegFileExtension", ".iMrpInterplantPeg",0,FALSE);
  defaultSet.setString(   "execVolPegFileExtension",        ".execVolPeg",0,FALSE);
  defaultSet.setString("mrpExecVolPegFileExtension",        ".mrpExecVolPeg",0,FALSE);
  defaultSet.setString(   "indpExecVolPegFileExtension",    ".iExecVolPeg",0,FALSE);
  defaultSet.setString("mrpIndpExecVolPegFileExtension",    ".iMrpExecVolPeg",0,FALSE);
d136 6
a141 6
  defaultSet.setString("heurAllocTraceFileExtension", ".trace",0,FALSE);
  defaultSet.setBool("printHeurAllocTrace", FALSE,0,FALSE);
  defaultSet.setString("heurAllocSortStrategy", "truePriority",0,FALSE);
  defaultSet.setString("heurAllocMinsSortStrategy", "truePriority",0,FALSE);
  defaultSet.setString("heurAllocFeatSortStrategy", "truePriority",0,FALSE);
  defaultSet.setString("heurAllocBacklogPriority",  "memorylessRoll",0,FALSE);
d143 1
a143 1
  defaultSet.setBool("useStockReallocation", FALSE,0,FALSE);
d146 6
a151 6
  defaultSet.setBool("useFullExplodeUtility", TRUE,0,FALSE);
  defaultSet.setString("calendarFormat", "G",0,TRUE);
  defaultSet.setString("defaultPdf", "XXX",0,FALSE);
  defaultSet.setString("featureFileOutputFormat", "absolute",0,FALSE);
  defaultSet.setString("fileFormatType", "STANDARD",0,FALSE);
  defaultSet.setString("pdfSeparator", "_",0,FALSE);
d154 19
a172 19
  defaultSet.setString("allocatedMrpFileExtension", ".allocMRP",0,FALSE);
  defaultSet.setString("allocatedIndepMrpFileExtension", ".allocIndMRP",0,FALSE);
  defaultSet.setString("fssSingletonFileExtension", ".fssSingletonReport",0,FALSE);
  defaultSet.setString("fssGeneralSetFileExtension", ".fssGeneralSetReport",0,FALSE);
  defaultSet.setString("fssMachineFileExtension", ".fssMachineReport",0,FALSE);  
  defaultSet.setString("backlogResponseFileExtension", ".backlog",0,FALSE);
  defaultSet.setString("buildSchedFileExtension", ".buildSched",0,FALSE);
  defaultSet.setString("capacityDBFileExtension", ".capacityDB",0,FALSE);
  defaultSet.setString("criticalListFileExtension", ".critList",0,FALSE);
  defaultSet.setString("debugFileExtension", ".sce.debug",0,FALSE);
  defaultSet.setString("demandDriversFileExtension", ".demandDrivers",0,FALSE);
  defaultSet.setString("explodeEchoFileExtension", ".witExplode.echo",0,FALSE);  
  defaultSet.setString("explodeWitDataFileExtension", ".witExplode.data",0,FALSE);  
  defaultSet.setString("formattedSupplyReportFileExtension", ".supplyReport",0,FALSE);
  defaultSet.setString("geoSourceDebugFileExtension", ".geoSourceDebug",0,FALSE);
  defaultSet.setString("geoSupplyByPdfFileExtension", ".geoSupplyByPdf",0,FALSE);
  defaultSet.setString("heurEchoFileExtension", ".witHeur.echo",0,FALSE);  
  defaultSet.setString("heurWitDataFileExtension", ".witHeur.data",0,FALSE);  
  defaultSet.setString("indepSupplyResponseFileExtension", ".indSupResp",0,FALSE);
d174 2
a175 2
  defaultSet.setString("operationDemandFileExtension", ".operationDemand",0,FALSE);
  defaultSet.setString("operationOrdersFileExtension", ".operation",0,FALSE);
d177 2
a178 2
  defaultSet.setString("interplantDemandFileExtension", ".interplantDemand",0,FALSE);
  defaultSet.setString("interplantOrdersFileExtension", ".interplant",0,FALSE);
d180 2
a181 2
  defaultSet.setString("binDemandFileExtension", ".binDemand",0,FALSE);
  defaultSet.setString("binOrdersFileExtension", ".bin",0,FALSE);
d184 22
a205 22
  defaultSet.setString("mrpDemandOrdersFileExtension", ".mrpDemOrd",0,FALSE);
  defaultSet.setString("mrpSupplyOrdersFileExtension", ".mrpSupOrd",0,FALSE);
  defaultSet.setString("mrpSubUsageFileExtension", ".mrpSubUs",0,FALSE);  
  defaultSet.setString("mrpOpSubUsageFileExtension", ".mrpOpSubUs",0,FALSE);  
  defaultSet.setString("objectiveSummaryFileExtension", ".optResults",0,FALSE);

  defaultSet.setString("opExecutionVolumeFileExtension", ".opExecVol",0,FALSE);

  defaultSet.setString("operationDBFileExtension", ".operationDB",0,FALSE);
  defaultSet.setString("opSubUsageFileExtension", ".opSubUsage",0,FALSE);  
  defaultSet.setString("optEchoFileExtension", ".witOpt.echo",0,FALSE);
  defaultSet.setString("optWitDataFileExtension", ".witOpt.data",0,FALSE);  
  defaultSet.setString("optionalFeatRatioFileExtension", ".optionRatio",0,FALSE);
  defaultSet.setString("outputFilePrefix", "./output",0,FALSE);          
  defaultSet.setString("partDBFileExtension", ".partDB",0,FALSE);
  defaultSet.setString("problemStatisticsFileExtension", ".probStats",0,FALSE);
  defaultSet.setString("selFeatBBratioFileExtension", ".bbRatio",0,FALSE);
  defaultSet.setString("subUsageFileExtension", ".subUsage",0,FALSE);
  defaultSet.setString("supplyResponseFileExtension", ".supplyResp",0,FALSE);
  defaultSet.setString("totalDemandReportFileExtension", ".totalDemand",0,FALSE);
  defaultSet.setString("witExplodeMsgFileExtension", ".witExplode.msg",0,FALSE);
  defaultSet.setString("witMsgFileExtension", ".wit.msg",0,FALSE);
d209 1
a209 1
  defaultSet.setString("witRolloverMsgFileExtension", ".wit.rollover.msg",0,FALSE);
d212 4
a215 4
  defaultSet.setBool("printModifiedFssMachReport", FALSE,0,FALSE);
  defaultSet.setString("FSSModifiedMachReportExtension", "FSSModMachReport",0,FALSE);
  defaultSet.setString("featureRatioPegMethod", "pegToMachineShipPeriod",0,FALSE); //pegToMachineDemandPeriod
  defaultSet.setString("siteCustomization", "default",0,FALSE);  
d219 6
a224 6
  defaultSet.setBool("doImplode", TRUE,0,FALSE);
  defaultSet.setBool("heurForceEquit", FALSE,0,FALSE);
  defaultSet.setBool("smartExplodeForceEquit", TRUE,0,FALSE);    
  defaultSet.setBool("useLocalBuildAhead", FALSE,0,FALSE);
  defaultSet.setBool("useSmartExplodeUtility", FALSE,0,FALSE);
  defaultSet.setInt("smartExplodeEquit", 10,0,FALSE);
d226 2
a227 2
  defaultSet.setBool("doAllocatedMrp", FALSE,0,FALSE);
  defaultSet.setInt("allocatedMrpVersion", 1,0,FALSE);
d229 1
a229 1
  defaultSet.setBool("demandDriversRespectsSubs", FALSE,0,FALSE);
d232 5
a236 5
  defaultSet.setBool("useMultiRouteImplosion", FALSE,0,FALSE);
  defaultSet.setBool("pathCounting", FALSE,0,FALSE);
  defaultSet.setFloat("expCutoffTolerance", 0.01,0,FALSE);
  defaultSet.setString("minsEngine", "heuristic",0,FALSE);
  defaultSet.setBool("heurSkipFailures", TRUE,0,FALSE);
d244 1
a244 1
  // -bool   -> FALSE=0
d248 1
a248 1
  defaultSet.setBool("fssFlag", FALSE,0,FALSE);
d250 15
a264 15
  defaultSet.setBool("doFssSingleton", 0,0,FALSE);
  defaultSet.setBool("doFssGeneralSet", 0,0,FALSE);
  defaultSet.setBool("doFssMachine", 0,0,FALSE);

  defaultSet.setString("fssSingletonMethod", "liberal",0,FALSE);    // liberal or conservative
  defaultSet.setString("fssGeneralSetMethod", "liberal",0,FALSE);   // liberal or conservative
  defaultSet.setString("fssMachineMethod", "conservative",0,FALSE); // liberal or conservative

  defaultSet.setString("fssFeatureSingletonMethod", "maximal",0,FALSE);  //  minimal or maximal
  defaultSet.setString("fssFeatureGeneralSetMethod", "maximal",0,FALSE); //  minimal or maximal
  defaultSet.setString("fssFeatureMachineMethod", "maximal",0,FALSE);    //  minimal or maximal

  defaultSet.setInt("fssSingletonHorizon",0,0,FALSE);
  defaultSet.setInt("fssGeneralSetHorizon",0,0,FALSE);
  defaultSet.setInt("fssMachineHorizon",0,0,FALSE);
d268 3
a270 3
  defaultSet.setBool("prepForEPPS",0,0,FALSE);
  defaultSet.setInt("defaultShipLateLimit",0,0,FALSE);
  defaultSet.setInt("nStandaloneFeatureArcs",0,0,FALSE);
d274 4
a277 4
  defaultSet.setInt("numPeriods",0,0,TRUE);
  defaultSet.setInt("objectiveType",0,0,TRUE); // this value valid as {1,2,3} only
  defaultSet.setString("calendarFile","",0,TRUE);
  defaultSet.setString("defaultPDF","",0,TRUE);
d282 5
a286 5
  defaultSet.setString("bomFile","",0,TRUE);
  defaultSet.setString("demandVolFile","",0,TRUE);
  defaultSet.setString("partCondFile","",0,TRUE);
  defaultSet.setString("partFile","",0,TRUE);
  defaultSet.setString("supplyFile","",0,TRUE);
d290 2
a291 2
  defaultSet.setString("fssGeneralSetFile","",0,FALSE);  // this is sometimes mandatory
  defaultSet.setString("fssMachineFile","",0,FALSE);  // this is sometimes mandatory
d295 2
a296 2
  defaultSet.setString("profitFile","",0,FALSE);  // mandatory when objectiveType = 2
  defaultSet.setString("revenueFile","",0,FALSE);  // mandatory when objectiveType = 2
d300 6
a305 6
  defaultSet.setString("aggregationFile","",0,FALSE);
  defaultSet.setString("backlogYieldFile","",0,FALSE);
  defaultSet.setString("bocFile","",0,FALSE);
  defaultSet.setString("capFile","",0,FALSE);
  defaultSet.setString("capSupplyFile","",0,FALSE);
  defaultSet.setString("cycleTimeFile","",0,FALSE);
d307 1
a307 1
  defaultSet.setString("datedSupplyFile","",0,FALSE);
d309 4
a312 4
  defaultSet.setString("featProfitFile","",0,FALSE);
  defaultSet.setString("featRevFile","",0,FALSE);
  defaultSet.setString("geoSourceFile","",0,FALSE);
  defaultSet.setString("interPlantFile","",0,FALSE);
d314 1
a314 1
  defaultSet.setString("binFile","",0,FALSE);
d316 27
a342 27
  defaultSet.setString("independentDemandFile","",0,FALSE);
  defaultSet.setString("indepPriorityFile","",0,FALSE);
  defaultSet.setString("lotSizeFile","",0,FALSE);
  defaultSet.setString("minDemandVolFile","",0,FALSE);
  defaultSet.setString("minIndepDemandVolFile","",0,FALSE);
  defaultSet.setString("machineFeatureOffsetFile","",0,FALSE);
  defaultSet.setString("machineFeatureSupplyFile","",0,FALSE);
  defaultSet.setString("opBomFile","",0,FALSE);
  defaultSet.setString("opBopFile","",0,FALSE);
  defaultSet.setString("opFile","",0,FALSE);
  defaultSet.setString("opLotSizeFile","",0,FALSE);
  defaultSet.setString("opExecPenaltyFile","",0,FALSE);
  defaultSet.setString("opExecCostFile","",0,FALSE);
  defaultSet.setString("opLowerFile","",0,FALSE);
  defaultSet.setString("opSubBomFile","",0,FALSE);
  defaultSet.setString("opUpperFile","",0,FALSE);
  defaultSet.setString("opYieldFile","",0,FALSE);
  defaultSet.setString("optionProfitFile","",0,FALSE);
  defaultSet.setString("optionRevFile","",0,FALSE);
  defaultSet.setString("priorityFile","",0,FALSE);
  defaultSet.setString("prodVolLBFile","",0,FALSE);
  defaultSet.setString("prodVolUBFile","",0,FALSE);
  defaultSet.setString("subBomFile","",0,FALSE);
  defaultSet.setString("topLevelToBBdefFile","",0,FALSE);
  defaultSet.setString("topLevelToBBratioFile","",0,FALSE);
  defaultSet.setString("topLevelToOptionFile","",0,FALSE);
  defaultSet.setString("yieldFile","",0,FALSE);
d346 13
a358 13
  defaultSet.setBool("printCapacityDBFile",0,0,FALSE);
  defaultSet.setBool("printCriticalListFile",0,0,FALSE);
  defaultSet.setBool("printDebugFile",0,0,FALSE);
  defaultSet.setBool("printDemandDriversFile",0,0,FALSE);
  defaultSet.setBool("printExplodeEchoFile",0,0,FALSE);
  defaultSet.setBool("printExplodeWitDataFile",0,0,FALSE);
  defaultSet.setBool("printFormattedSupplyReportFile",0,0,FALSE);
  defaultSet.setBool("printGeoSourceDebugFile",0,0,FALSE);
  defaultSet.setBool("printGeoSupplyByPdfFile",0,0,FALSE);
  defaultSet.setBool("printHeurEchoFile",0,0,FALSE);
  defaultSet.setBool("printHeurWitDataFile",0,0,FALSE);
  defaultSet.setBool("printOperationDemandFile", FALSE,0,FALSE);
  defaultSet.setBool("printInterplantDemandFile", FALSE,0,FALSE);
d360 1
a360 1
  defaultSet.setBool("printBinDemandFile", FALSE,0,FALSE);
d362 10
a371 10
  defaultSet.setBool("printMrpSupplyOrdersFile", FALSE,0,FALSE);
  defaultSet.setBool("printMrpDemandOrdersFile", FALSE,0,FALSE);
  defaultSet.setBool("printOperationDBFile",0,0,FALSE);
  defaultSet.setBool("printOptEchoFile",0,0,FALSE);
  defaultSet.setBool("printOptWitDataFile",0,0,FALSE);
  defaultSet.setBool("printPartDBFile",0,0,FALSE);
  defaultSet.setBool("printTotalDemandReport",0,0,FALSE);
  defaultSet.setBool("printWitExplodeMsgFile",0,0,FALSE);
  defaultSet.setBool("printWitMsgFile",0,0,FALSE);
  defaultSet.setBool("printWitRolloverMsgFile",0,0,FALSE);
d375 1
a375 1
  defaultSet.setString("engine","heuristic",0,FALSE);
d378 7
a384 7
  defaultSet.setInt("equitability", 1,0,FALSE);
  defaultSet.setInt("defaultPriority",1000,0,FALSE);
  defaultSet.setInt("defaultIndependentDemandPriority",2000,0,FALSE);
  defaultSet.setFloat("defaultAggregateBopPreference", 0.0,0,FALSE);
  defaultSet.setFloat("defaultDefaultBopPreference", 0.0,0,FALSE);  
  defaultSet.setFloat("defaultExplicitBopPreference", 0.0,0,FALSE);  
  defaultSet.setFloat("defaultInterPlantBopPreference", 0.0,0,FALSE);
d386 1
a386 1
  defaultSet.setFloat("defaultBinBopPreference", 0.0,0,FALSE);
d390 7
a396 7
  defaultSet.setFloat("defaultObj1ShipReward",             1000.0   ,0,FALSE);
  defaultSet.setFloat("periodicInterestRate",                 0.013 ,0,FALSE);
  defaultSet.setFloat("defaultObj1ExecCostRealOperations",    0.1   ,0,FALSE);
  defaultSet.setFloat("obj1ExecCostDiscRateRealOperations",   0.001 ,0,FALSE);
  defaultSet.setFloat("defaultObj1ProdCostRealParts",         0.1   ,0,FALSE);
  defaultSet.setFloat("obj1ProdCostDiscRateRealParts",        0.001 ,0,FALSE);
  defaultSet.setFloat("defaultSubPenalty",                   10.0   ,0,FALSE);
d398 4
a401 4
  defaultSet.setFloat("defaultOptionShipReward",              5.0   ,0,FALSE);
  defaultSet.setFloat("featureSetScrapPenalty",           99999.9   ,0,FALSE);
  defaultSet.setFloat("featureSetStockPenalty",           99999.9   ,0,FALSE);
  defaultSet.setFloat("optionRatioSupplyStockPenalty",       10.0   ,0,FALSE);
d404 1
a404 1
  //  defaultSet.setInt("featureRatioFlag",0,0,FALSE);
d414 24
a437 24
  defaultSet.setString("heurAllocTraceFileName","",0,FALSE);
  defaultSet.setString("allocatedMrpFileName","",0,FALSE);
  defaultSet.setString("allocatedIndepMrpFileName","",0,FALSE);
  defaultSet.setString("backlogResponseFileName","",0,FALSE);
  defaultSet.setString("buildSchedFileName","",0,FALSE);
  defaultSet.setString("capacityDBFileName","",0,FALSE);
  defaultSet.setString("criticalListFileName","",0,FALSE);
  defaultSet.setString("debugFileName","",0,FALSE);
  defaultSet.setString("demandDriversFileName","",0,FALSE);
  defaultSet.setString("explodeEchoFileName","",0,FALSE);
  defaultSet.setString("explodeWitDataFileName","",0,FALSE);
  defaultSet.setString("formattedSupplyReportFileName","",0,FALSE);
  defaultSet.setString("fssGeneralSetFileName","",0,FALSE);
  defaultSet.setString("fssMachineFileName","",0,FALSE);
  defaultSet.setString("fssSingletonFileName","",0,FALSE);
  defaultSet.setString("geoSourceDebugFileName","",0,FALSE);
  defaultSet.setString("geoSupplyByPdfFileName","",0,FALSE);
  defaultSet.setString("heurEchoFileName","",0,FALSE);
  defaultSet.setString("heurWitDataFileName","",0,FALSE);

  defaultSet.setString("operationDemandFileName","",0,FALSE);
  defaultSet.setString("operationOrdersFileName","",0,FALSE);
  defaultSet.setString("interplantDemandFileName","",0,FALSE);
  defaultSet.setString("interplantOrdersFileName","",0,FALSE);
d439 2
a440 2
  defaultSet.setString("binDemandFileName","",0,FALSE);
  defaultSet.setString("binOrdersFileName","",0,FALSE);
d442 20
a461 20
  defaultSet.setString("mrpDemandOrdersFileName","",0,FALSE);
  defaultSet.setString("mrpOpSubUsageFileName","",0,FALSE);
  defaultSet.setString("mrpSubUsageFileName","",0,FALSE);
  defaultSet.setString("mrpSupplyOrdersFileName","",0,FALSE);
  defaultSet.setString("objectiveSummaryFileName","",0,FALSE);
  defaultSet.setString("opExecutionVolumeFileName","",0,FALSE);
  defaultSet.setString("opSubUsageFileName","",0,FALSE);
  defaultSet.setString("operationDBFileName","",0,FALSE);
  defaultSet.setString("optEchoFileName","",0,FALSE);
  defaultSet.setString("optWitDataFileName","",0,FALSE);
  defaultSet.setString("optionalFeatRatioFileName","",0,FALSE);
  defaultSet.setString("partDBFileName","",0,FALSE);
  defaultSet.setString("problemStatisticsFileName","",0,FALSE);
  defaultSet.setString("selFeatBBratioFileName","",0,FALSE);
  defaultSet.setString("subUsageFileName","",0,FALSE);
  defaultSet.setString("supplyResponseFileName","",0,FALSE);
  defaultSet.setString("totalDemandReportFileName","",0,FALSE);
  defaultSet.setString("witExplodeMsgFileName","",0,FALSE);
  defaultSet.setString("witMsgFileName","",0,FALSE);
  defaultSet.setString("witRolloverMsgFileName","",0,FALSE);
d469 1
a469 1
LgFrSceParameterManager::initializeSetOfParameters(const RWCString & paramFile,
d472 2
a473 2
  RWCString name;
  RWCString stringVal;
d476 1
a476 1
  RWBoolean boolVal;
d478 1
a478 1
  RWBoolean exists;
d509 1
a509 1
LgFrSceParameterManager::processParameterFile(const RWCString & parameterFileName,
d512 5
a516 5
    ifstream inFile;
    RWCString parameter;  // Note: initialized to a NULL string
    RWCString dataLine;
    RWCString paramName;
    RWCString paramValue;
d523 1
a523 1
    inFile.open(parameterFileName, ios::in);
d535 1
a535 1
      dataLine.readToDelim(inFile);
d539 1
a539 1
      RWCTokenizer next(dataLine);
d542 1
a542 1
      RWBoolean areThereQuotes = dataLine.contains("\"");
d549 1
a549 1
      if ((paramName.isNull()) || (paramName.data()[0] == '*')) {
d563 6
a568 4
	    RWCString restOfLine = next("\n");
	    RWCRegexp quotedStringREGEXP("\".*\"");  
	    RWCString quotedParamValue = restOfLine(quotedStringREGEXP);
	    paramValue = quotedParamValue.strip(RWCString::both, '\"');
d578 1
a578 1
	  if (paramValue.isNull()) {
d586 2
d595 2
d618 2
a619 2
	  if (paramValue(floatExp_R).isNull() &&
	      paramValue(floatExp_L).isNull())    //not float?
d622 1
a622 1
	  if (paramValue(intExp).isNull())  // not int?
d624 25
d656 2
a657 2
	    RWLocale::global().stringToNum(paramValue,&temp);
	    setOfParameters.setInt(paramName,temp,1,FALSE);
d663 2
a664 2
	    RWLocale::global().stringToNum(paramValue,&temp);
	    setOfParameters.setFloat(paramName,temp,1,FALSE);
d671 1
a671 1
	      RWLocale::global().stringToNum(paramValue,&temp);
d673 1
a673 1
		setOfParameters.setBool(paramName,FALSE,1,FALSE);
d675 1
a675 1
		setOfParameters.setBool(paramName,TRUE,1,FALSE);
d683 4
a686 3
	      RWCRegexp quotedStringREGEXP("^\".*\"");  
	      RWCString quotedParamValue = paramValue(quotedStringREGEXP);
	      paramValue = quotedParamValue.strip(RWCString::both, '\"');
d688 1
a688 1
	    setOfParameters.setString(paramName,paramValue,1,FALSE);
d690 1
a690 1
	    setOfParameters.setString(paramName,paramValue,1,FALSE);
d713 1
d732 1
a732 1
    setOfParameters.setInt("fssSingletonHorizon", numPeriods-1, 0, FALSE);
d734 1
a734 1
       setOfParameters.setInt("fssSingletonHorizon", tempParamValue, 1, FALSE);
d744 1
a744 1
    setOfParameters.setInt("fssGeneralSetHorizon", numPeriods-1, 0, FALSE);
d746 1
a746 1
       setOfParameters.setInt("fssGeneralSetHorizon", tempParamValue, 1, FALSE);
d756 1
a756 1
    setOfParameters.setInt("fssMachineHorizon", numPeriods-1, 0, FALSE);
d758 1
a758 1
       setOfParameters.setInt("fssMachineHorizon", tempParamValue, 1, FALSE);
d774 1
a774 1
			   0, FALSE);
d776 1
a776 1
       setOfParameters.setInt("defaultShipLateLimit", tempParamValue, 1, FALSE);
d785 1
a785 1
    RWCString tempStringValue;
d838 2
a839 1
    for (int q=0; q<numEntries; q++) {
d873 3
a875 3
    RWBoolean & exists,                                             
    const RWCString & parameterFile,
    const RWCString & targetParameter,
d880 1
a880 1
  RWCString paramAsString = searchParamFile(exists,
d884 2
a885 2
  if (! paramAsString.isNull()) {
    if (! RWLocale::global().stringToNum(paramAsString, &theValD))  {
d899 1
a899 1
RWCString
d901 3
a903 3
    RWBoolean & exists,
    const RWCString & parameterFile,
    const RWCString & targetParameter,
d907 4
a910 4
    ifstream inFile;
    RWCString parameter;  // Note: initialized to a NULL string
    RWCString dataLine;
    RWCString paramKeyword;
d912 1
a912 1
    inFile.open(parameterFile, ios::in);
d919 2
a920 2
    // initialize doesParamterExist to FALSE
    exists = FALSE;
d925 1
a925 1
      dataLine.readToDelim(inFile);
d928 1
a928 1
      RWCTokenizer next(dataLine);
d934 1
a934 1
      if ((paramKeyword.isNull()) || paramKeyword == "*")
d938 1
a938 1
      if (paramKeyword.compareTo(targetParameter, RWCString::ignoreCase) == 0)  {
d941 1
a941 1
	if (parameter.isNull())  {
d944 1
a944 1
	exists = TRUE;
d951 1
a951 1
    if (mandatory==MANDATORY && parameter.isNull())   {
d965 3
a967 3
    RWBoolean & exists,
    const RWCString & parameterFile,
    const RWCString & targetParameter,
d975 1
a975 1
  RWCString paramAsString = searchParamFile(exists,
d980 1
a980 1
  if (! paramAsString.isNull()) {
d982 1
a982 1
    if (! RWLocale::global().stringToNum(paramAsString, &theValL))  {
d995 1
a995 1
RWBoolean
d997 3
a999 3
    RWBoolean & exists,
    const RWCString & parameterFile,
    const RWCString & targetParameter,
d1004 1
a1004 1
    RWCString paramAsString = searchParamFile(exists,
d1021 1
a1021 1
RWBoolean
d1023 1
a1023 1
    const RWCString & targetFile)
d1025 1
a1025 1
    ifstream inFile;
d1027 1
a1027 1
    inFile.open(targetFile, ios::in);
d1031 1
a1031 1
	return TRUE;
d1034 1
a1034 1
    return FALSE;
d1088 2
a1089 2
  : sceIOLogMgr_(NULL),
    sceErrFacility_(NULL)
@


1.17.2.1
log
@Roguewave is gone
@
text
@a0 6

// RW2STL - inserted:
#include <string>
#include <ostream.h>
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL - inserted includes.
d3 1
a3 1
#include <fstream>
d5 2
d44 1
a44 1
LgFrSceParameterManager::initializeParameterDefaults(const std::string & paramFile,
d50 1
a50 1
  defaultSet.setString("parameterFileName", paramFile, 0, false);
d52 2
a53 2
  defaultSet.setString("parameterLogFileName", "param.log", 0, false);
  defaultSet.setString("inputLogFileName", "sceInput.log", 0, false);
d55 1
a55 1
  defaultSet.setString("outputLogFileName", "sceOut.log", 0, false);
d57 1
a57 1
  defaultSet.setString("outputLogFileName", "sceOutput.log", 0, false);
d72 4
a75 4
  defaultSet.setBool("printProdVolPegFile", false,0,false);
  defaultSet.setBool("printMrpProdVolPegFile", false,0,false);
  defaultSet.setString(   "prodVolPegFileExtension",        ".prodVolPeg",0,false);
  defaultSet.setString("mrpProdVolPegFileExtension",        ".mrpProdVolPeg",0,false);
d79 1
a79 1
  defaultSet.setBool("optInitFromZero", false,0,false);
d81 1
a81 1
  defaultSet.setBool("forcePcfBogons", false,0,false);
d83 6
a88 6
  defaultSet.setString("indepRevenueFile","",0,false);
  defaultSet.setBool("aggregateSupplyInScrub", false,0,false);
  defaultSet.setBool("printLowestLevelNonPcfFile", false,0,false);
  defaultSet.setString("lowestLevelNonPcfFileExtension",".llNonPcf",0,false);
  defaultSet.setBool("printPcfBogonsFile", false,0,false);
  defaultSet.setString("pcfBogonsFileExtension",".bogons",0,false);
d92 2
a93 2
  defaultSet.setString("shadowPricesFileExtension",".shadowPrices",0,false);
  defaultSet.setBool("printShadowPricesFile", false,0,false);
d98 28
a125 28
  defaultSet.setBool("shutOffAllLotSizing", false,0,false);
  defaultSet.setBool("disableInterplantJumperArcs", false,0,false);
  defaultSet.setBool("disableSplitBop", false,0,false);
  defaultSet.setBool("doPegging", false,0,false);
  defaultSet.setBool("printDemandConsPegFile", false,0,false);
  defaultSet.setBool("printIndpDemandConsPegFile", false,0,false);
  defaultSet.setBool("printMrpDemandConsPegFile", false,0,false);
  defaultSet.setBool("printMrpIndpDemandConsPegFile", false,0,false);
  defaultSet.setBool("printInterplantPegFile", false,0,false);
  defaultSet.setBool("printIndpInterplantPegFile", false,0,false);
  defaultSet.setBool("printMrpInterplantPegFile", false,0,false);
  defaultSet.setBool("printMrpIndpInterplantPegFile", false,0,false);
  defaultSet.setBool("printExecVolPegFile", false,0,false);
  defaultSet.setBool("printIndpExecVolPegFile", false,0,false);
  defaultSet.setBool("printMrpExecVolPegFile", false,0,false);
  defaultSet.setBool("printMrpIndpExecVolPegFile", false,0,false);
  defaultSet.setString(   "demandConsPegFileExtension",     ".demConsPeg",0,false);
  defaultSet.setString("mrpDemandConsPegFileExtension",     ".mrpDemConsPeg",0,false);
  defaultSet.setString(   "indpDemandConsPegFileExtension", ".iDemConsPeg",0,false);
  defaultSet.setString("mrpIndpDemandConsPegFileExtension", ".iMrpDemConsPeg",0,false);
  defaultSet.setString(   "interplantPegFileExtension",     ".interplantPeg",0,false);
  defaultSet.setString("mrpInterplantPegFileExtension",     ".mrpInterplantPeg",0,false);
  defaultSet.setString(   "indpInterplantPegFileExtension", ".iInterplantPeg",0,false);
  defaultSet.setString("mrpIndpInterplantPegFileExtension", ".iMrpInterplantPeg",0,false);
  defaultSet.setString(   "execVolPegFileExtension",        ".execVolPeg",0,false);
  defaultSet.setString("mrpExecVolPegFileExtension",        ".mrpExecVolPeg",0,false);
  defaultSet.setString(   "indpExecVolPegFileExtension",    ".iExecVolPeg",0,false);
  defaultSet.setString("mrpIndpExecVolPegFileExtension",    ".iMrpExecVolPeg",0,false);
d132 6
a137 6
  defaultSet.setString("heurAllocTraceFileExtension", ".trace",0,false);
  defaultSet.setBool("printHeurAllocTrace", false,0,false);
  defaultSet.setString("heurAllocSortStrategy", "truePriority",0,false);
  defaultSet.setString("heurAllocMinsSortStrategy", "truePriority",0,false);
  defaultSet.setString("heurAllocFeatSortStrategy", "truePriority",0,false);
  defaultSet.setString("heurAllocBacklogPriority",  "memorylessRoll",0,false);
d139 1
a139 1
  defaultSet.setBool("useStockReallocation", false,0,false);
d142 6
a147 6
  defaultSet.setBool("useFullExplodeUtility", true,0,false);
  defaultSet.setString("calendarFormat", "G",0,true);
  defaultSet.setString("defaultPdf", "XXX",0,false);
  defaultSet.setString("featureFileOutputFormat", "absolute",0,false);
  defaultSet.setString("fileFormatType", "STANDARD",0,false);
  defaultSet.setString("pdfSeparator", "_",0,false);
d150 19
a168 19
  defaultSet.setString("allocatedMrpFileExtension", ".allocMRP",0,false);
  defaultSet.setString("allocatedIndepMrpFileExtension", ".allocIndMRP",0,false);
  defaultSet.setString("fssSingletonFileExtension", ".fssSingletonReport",0,false);
  defaultSet.setString("fssGeneralSetFileExtension", ".fssGeneralSetReport",0,false);
  defaultSet.setString("fssMachineFileExtension", ".fssMachineReport",0,false);  
  defaultSet.setString("backlogResponseFileExtension", ".backlog",0,false);
  defaultSet.setString("buildSchedFileExtension", ".buildSched",0,false);
  defaultSet.setString("capacityDBFileExtension", ".capacityDB",0,false);
  defaultSet.setString("criticalListFileExtension", ".critList",0,false);
  defaultSet.setString("debugFileExtension", ".sce.debug",0,false);
  defaultSet.setString("demandDriversFileExtension", ".demandDrivers",0,false);
  defaultSet.setString("explodeEchoFileExtension", ".witExplode.echo",0,false);  
  defaultSet.setString("explodeWitDataFileExtension", ".witExplode.data",0,false);  
  defaultSet.setString("formattedSupplyReportFileExtension", ".supplyReport",0,false);
  defaultSet.setString("geoSourceDebugFileExtension", ".geoSourceDebug",0,false);
  defaultSet.setString("geoSupplyByPdfFileExtension", ".geoSupplyByPdf",0,false);
  defaultSet.setString("heurEchoFileExtension", ".witHeur.echo",0,false);  
  defaultSet.setString("heurWitDataFileExtension", ".witHeur.data",0,false);  
  defaultSet.setString("indepSupplyResponseFileExtension", ".indSupResp",0,false);
d170 2
a171 2
  defaultSet.setString("operationDemandFileExtension", ".operationDemand",0,false);
  defaultSet.setString("operationOrdersFileExtension", ".operation",0,false);
d173 2
a174 2
  defaultSet.setString("interplantDemandFileExtension", ".interplantDemand",0,false);
  defaultSet.setString("interplantOrdersFileExtension", ".interplant",0,false);
d176 2
a177 2
  defaultSet.setString("binDemandFileExtension", ".binDemand",0,false);
  defaultSet.setString("binOrdersFileExtension", ".bin",0,false);
d180 22
a201 22
  defaultSet.setString("mrpDemandOrdersFileExtension", ".mrpDemOrd",0,false);
  defaultSet.setString("mrpSupplyOrdersFileExtension", ".mrpSupOrd",0,false);
  defaultSet.setString("mrpSubUsageFileExtension", ".mrpSubUs",0,false);  
  defaultSet.setString("mrpOpSubUsageFileExtension", ".mrpOpSubUs",0,false);  
  defaultSet.setString("objectiveSummaryFileExtension", ".optResults",0,false);

  defaultSet.setString("opExecutionVolumeFileExtension", ".opExecVol",0,false);

  defaultSet.setString("operationDBFileExtension", ".operationDB",0,false);
  defaultSet.setString("opSubUsageFileExtension", ".opSubUsage",0,false);  
  defaultSet.setString("optEchoFileExtension", ".witOpt.echo",0,false);
  defaultSet.setString("optWitDataFileExtension", ".witOpt.data",0,false);  
  defaultSet.setString("optionalFeatRatioFileExtension", ".optionRatio",0,false);
  defaultSet.setString("outputFilePrefix", "./output",0,false);          
  defaultSet.setString("partDBFileExtension", ".partDB",0,false);
  defaultSet.setString("problemStatisticsFileExtension", ".probStats",0,false);
  defaultSet.setString("selFeatBBratioFileExtension", ".bbRatio",0,false);
  defaultSet.setString("subUsageFileExtension", ".subUsage",0,false);
  defaultSet.setString("supplyResponseFileExtension", ".supplyResp",0,false);
  defaultSet.setString("totalDemandReportFileExtension", ".totalDemand",0,false);
  defaultSet.setString("witExplodeMsgFileExtension", ".witExplode.msg",0,false);
  defaultSet.setString("witMsgFileExtension", ".wit.msg",0,false);
d205 1
a205 1
  defaultSet.setString("witRolloverMsgFileExtension", ".wit.rollover.msg",0,false);
d208 4
a211 4
  defaultSet.setBool("printModifiedFssMachReport", false,0,false);
  defaultSet.setString("FSSModifiedMachReportExtension", "FSSModMachReport",0,false);
  defaultSet.setString("featureRatioPegMethod", "pegToMachineShipPeriod",0,false); //pegToMachineDemandPeriod
  defaultSet.setString("siteCustomization", "default",0,false);  
d215 6
a220 6
  defaultSet.setBool("doImplode", true,0,false);
  defaultSet.setBool("heurForceEquit", false,0,false);
  defaultSet.setBool("smartExplodeForceEquit", true,0,false);    
  defaultSet.setBool("useLocalBuildAhead", false,0,false);
  defaultSet.setBool("useSmartExplodeUtility", false,0,false);
  defaultSet.setInt("smartExplodeEquit", 10,0,false);
d222 2
a223 2
  defaultSet.setBool("doAllocatedMrp", false,0,false);
  defaultSet.setInt("allocatedMrpVersion", 1,0,false);
d225 1
a225 1
  defaultSet.setBool("demandDriversRespectsSubs", false,0,false);
d228 5
a232 5
  defaultSet.setBool("useMultiRouteImplosion", false,0,false);
  defaultSet.setBool("pathCounting", false,0,false);
  defaultSet.setFloat("expCutoffTolerance", 0.01,0,false);
  defaultSet.setString("minsEngine", "heuristic",0,false);
  defaultSet.setBool("heurSkipFailures", true,0,false);
d240 1
a240 1
  // -bool   -> false=0
d244 1
a244 1
  defaultSet.setBool("fssFlag", false,0,false);
d246 15
a260 15
  defaultSet.setBool("doFssSingleton", 0,0,false);
  defaultSet.setBool("doFssGeneralSet", 0,0,false);
  defaultSet.setBool("doFssMachine", 0,0,false);

  defaultSet.setString("fssSingletonMethod", "liberal",0,false);    // liberal or conservative
  defaultSet.setString("fssGeneralSetMethod", "liberal",0,false);   // liberal or conservative
  defaultSet.setString("fssMachineMethod", "conservative",0,false); // liberal or conservative

  defaultSet.setString("fssFeatureSingletonMethod", "maximal",0,false);  //  minimal or maximal
  defaultSet.setString("fssFeatureGeneralSetMethod", "maximal",0,false); //  minimal or maximal
  defaultSet.setString("fssFeatureMachineMethod", "maximal",0,false);    //  minimal or maximal

  defaultSet.setInt("fssSingletonHorizon",0,0,false);
  defaultSet.setInt("fssGeneralSetHorizon",0,0,false);
  defaultSet.setInt("fssMachineHorizon",0,0,false);
d264 3
a266 3
  defaultSet.setBool("prepForEPPS",0,0,false);
  defaultSet.setInt("defaultShipLateLimit",0,0,false);
  defaultSet.setInt("nStandaloneFeatureArcs",0,0,false);
d270 4
a273 4
  defaultSet.setInt("numPeriods",0,0,true);
  defaultSet.setInt("objectiveType",0,0,true); // this value valid as {1,2,3} only
  defaultSet.setString("calendarFile","",0,true);
  defaultSet.setString("defaultPDF","",0,true);
d278 5
a282 5
  defaultSet.setString("bomFile","",0,true);
  defaultSet.setString("demandVolFile","",0,true);
  defaultSet.setString("partCondFile","",0,true);
  defaultSet.setString("partFile","",0,true);
  defaultSet.setString("supplyFile","",0,true);
d286 2
a287 2
  defaultSet.setString("fssGeneralSetFile","",0,false);  // this is sometimes mandatory
  defaultSet.setString("fssMachineFile","",0,false);  // this is sometimes mandatory
d291 2
a292 2
  defaultSet.setString("profitFile","",0,false);  // mandatory when objectiveType = 2
  defaultSet.setString("revenueFile","",0,false);  // mandatory when objectiveType = 2
d296 6
a301 6
  defaultSet.setString("aggregationFile","",0,false);
  defaultSet.setString("backlogYieldFile","",0,false);
  defaultSet.setString("bocFile","",0,false);
  defaultSet.setString("capFile","",0,false);
  defaultSet.setString("capSupplyFile","",0,false);
  defaultSet.setString("cycleTimeFile","",0,false);
d303 1
a303 1
  defaultSet.setString("datedSupplyFile","",0,false);
d305 4
a308 4
  defaultSet.setString("featProfitFile","",0,false);
  defaultSet.setString("featRevFile","",0,false);
  defaultSet.setString("geoSourceFile","",0,false);
  defaultSet.setString("interPlantFile","",0,false);
d310 1
a310 1
  defaultSet.setString("binFile","",0,false);
d312 27
a338 27
  defaultSet.setString("independentDemandFile","",0,false);
  defaultSet.setString("indepPriorityFile","",0,false);
  defaultSet.setString("lotSizeFile","",0,false);
  defaultSet.setString("minDemandVolFile","",0,false);
  defaultSet.setString("minIndepDemandVolFile","",0,false);
  defaultSet.setString("machineFeatureOffsetFile","",0,false);
  defaultSet.setString("machineFeatureSupplyFile","",0,false);
  defaultSet.setString("opBomFile","",0,false);
  defaultSet.setString("opBopFile","",0,false);
  defaultSet.setString("opFile","",0,false);
  defaultSet.setString("opLotSizeFile","",0,false);
  defaultSet.setString("opExecPenaltyFile","",0,false);
  defaultSet.setString("opExecCostFile","",0,false);
  defaultSet.setString("opLowerFile","",0,false);
  defaultSet.setString("opSubBomFile","",0,false);
  defaultSet.setString("opUpperFile","",0,false);
  defaultSet.setString("opYieldFile","",0,false);
  defaultSet.setString("optionProfitFile","",0,false);
  defaultSet.setString("optionRevFile","",0,false);
  defaultSet.setString("priorityFile","",0,false);
  defaultSet.setString("prodVolLBFile","",0,false);
  defaultSet.setString("prodVolUBFile","",0,false);
  defaultSet.setString("subBomFile","",0,false);
  defaultSet.setString("topLevelToBBdefFile","",0,false);
  defaultSet.setString("topLevelToBBratioFile","",0,false);
  defaultSet.setString("topLevelToOptionFile","",0,false);
  defaultSet.setString("yieldFile","",0,false);
d342 13
a354 13
  defaultSet.setBool("printCapacityDBFile",0,0,false);
  defaultSet.setBool("printCriticalListFile",0,0,false);
  defaultSet.setBool("printDebugFile",0,0,false);
  defaultSet.setBool("printDemandDriversFile",0,0,false);
  defaultSet.setBool("printExplodeEchoFile",0,0,false);
  defaultSet.setBool("printExplodeWitDataFile",0,0,false);
  defaultSet.setBool("printFormattedSupplyReportFile",0,0,false);
  defaultSet.setBool("printGeoSourceDebugFile",0,0,false);
  defaultSet.setBool("printGeoSupplyByPdfFile",0,0,false);
  defaultSet.setBool("printHeurEchoFile",0,0,false);
  defaultSet.setBool("printHeurWitDataFile",0,0,false);
  defaultSet.setBool("printOperationDemandFile", false,0,false);
  defaultSet.setBool("printInterplantDemandFile", false,0,false);
d356 1
a356 1
  defaultSet.setBool("printBinDemandFile", false,0,false);
d358 10
a367 10
  defaultSet.setBool("printMrpSupplyOrdersFile", false,0,false);
  defaultSet.setBool("printMrpDemandOrdersFile", false,0,false);
  defaultSet.setBool("printOperationDBFile",0,0,false);
  defaultSet.setBool("printOptEchoFile",0,0,false);
  defaultSet.setBool("printOptWitDataFile",0,0,false);
  defaultSet.setBool("printPartDBFile",0,0,false);
  defaultSet.setBool("printTotalDemandReport",0,0,false);
  defaultSet.setBool("printWitExplodeMsgFile",0,0,false);
  defaultSet.setBool("printWitMsgFile",0,0,false);
  defaultSet.setBool("printWitRolloverMsgFile",0,0,false);
d371 1
a371 1
  defaultSet.setString("engine","heuristic",0,false);
d374 7
a380 7
  defaultSet.setInt("equitability", 1,0,false);
  defaultSet.setInt("defaultPriority",1000,0,false);
  defaultSet.setInt("defaultIndependentDemandPriority",2000,0,false);
  defaultSet.setFloat("defaultAggregateBopPreference", 0.0,0,false);
  defaultSet.setFloat("defaultDefaultBopPreference", 0.0,0,false);  
  defaultSet.setFloat("defaultExplicitBopPreference", 0.0,0,false);  
  defaultSet.setFloat("defaultInterPlantBopPreference", 0.0,0,false);
d382 1
a382 1
  defaultSet.setFloat("defaultBinBopPreference", 0.0,0,false);
d386 7
a392 7
  defaultSet.setFloat("defaultObj1ShipReward",             1000.0   ,0,false);
  defaultSet.setFloat("periodicInterestRate",                 0.013 ,0,false);
  defaultSet.setFloat("defaultObj1ExecCostRealOperations",    0.1   ,0,false);
  defaultSet.setFloat("obj1ExecCostDiscRateRealOperations",   0.001 ,0,false);
  defaultSet.setFloat("defaultObj1ProdCostRealParts",         0.1   ,0,false);
  defaultSet.setFloat("obj1ProdCostDiscRateRealParts",        0.001 ,0,false);
  defaultSet.setFloat("defaultSubPenalty",                   10.0   ,0,false);
d394 4
a397 4
  defaultSet.setFloat("defaultOptionShipReward",              5.0   ,0,false);
  defaultSet.setFloat("featureSetScrapPenalty",           99999.9   ,0,false);
  defaultSet.setFloat("featureSetStockPenalty",           99999.9   ,0,false);
  defaultSet.setFloat("optionRatioSupplyStockPenalty",       10.0   ,0,false);
d400 1
a400 1
  //  defaultSet.setInt("featureRatioFlag",0,0,false);
d410 24
a433 24
  defaultSet.setString("heurAllocTraceFileName","",0,false);
  defaultSet.setString("allocatedMrpFileName","",0,false);
  defaultSet.setString("allocatedIndepMrpFileName","",0,false);
  defaultSet.setString("backlogResponseFileName","",0,false);
  defaultSet.setString("buildSchedFileName","",0,false);
  defaultSet.setString("capacityDBFileName","",0,false);
  defaultSet.setString("criticalListFileName","",0,false);
  defaultSet.setString("debugFileName","",0,false);
  defaultSet.setString("demandDriversFileName","",0,false);
  defaultSet.setString("explodeEchoFileName","",0,false);
  defaultSet.setString("explodeWitDataFileName","",0,false);
  defaultSet.setString("formattedSupplyReportFileName","",0,false);
  defaultSet.setString("fssGeneralSetFileName","",0,false);
  defaultSet.setString("fssMachineFileName","",0,false);
  defaultSet.setString("fssSingletonFileName","",0,false);
  defaultSet.setString("geoSourceDebugFileName","",0,false);
  defaultSet.setString("geoSupplyByPdfFileName","",0,false);
  defaultSet.setString("heurEchoFileName","",0,false);
  defaultSet.setString("heurWitDataFileName","",0,false);

  defaultSet.setString("operationDemandFileName","",0,false);
  defaultSet.setString("operationOrdersFileName","",0,false);
  defaultSet.setString("interplantDemandFileName","",0,false);
  defaultSet.setString("interplantOrdersFileName","",0,false);
d435 2
a436 2
  defaultSet.setString("binDemandFileName","",0,false);
  defaultSet.setString("binOrdersFileName","",0,false);
d438 20
a457 20
  defaultSet.setString("mrpDemandOrdersFileName","",0,false);
  defaultSet.setString("mrpOpSubUsageFileName","",0,false);
  defaultSet.setString("mrpSubUsageFileName","",0,false);
  defaultSet.setString("mrpSupplyOrdersFileName","",0,false);
  defaultSet.setString("objectiveSummaryFileName","",0,false);
  defaultSet.setString("opExecutionVolumeFileName","",0,false);
  defaultSet.setString("opSubUsageFileName","",0,false);
  defaultSet.setString("operationDBFileName","",0,false);
  defaultSet.setString("optEchoFileName","",0,false);
  defaultSet.setString("optWitDataFileName","",0,false);
  defaultSet.setString("optionalFeatRatioFileName","",0,false);
  defaultSet.setString("partDBFileName","",0,false);
  defaultSet.setString("problemStatisticsFileName","",0,false);
  defaultSet.setString("selFeatBBratioFileName","",0,false);
  defaultSet.setString("subUsageFileName","",0,false);
  defaultSet.setString("supplyResponseFileName","",0,false);
  defaultSet.setString("totalDemandReportFileName","",0,false);
  defaultSet.setString("witExplodeMsgFileName","",0,false);
  defaultSet.setString("witMsgFileName","",0,false);
  defaultSet.setString("witRolloverMsgFileName","",0,false);
d465 1
a465 1
LgFrSceParameterManager::initializeSetOfParameters(const std::string & paramFile,
d468 2
a469 2
  std::string name;
  std::string stringVal;
d472 1
a472 1
  bool boolVal;
d474 1
a474 1
  bool exists;
d505 1
a505 1
LgFrSceParameterManager::processParameterFile(const std::string & parameterFileName,
d508 5
a512 5
    std::ifstream inFile;
    std::string parameter;  // Note: initialized to a 0 string
    std::string dataLine;
    std::string paramName;
    std::string paramValue;
d519 1
a519 1
    inFile.open(parameterFileName.c_str());
d531 1
a531 1
        std::getline( inFile, dataLine );
d535 1
a535 1
      SCETokenizer next(dataLine);
d538 1
a538 1
      bool areThereQuotes = dataLine.find_first_of('"') == std::string::npos ? false : true;
d545 1
a545 1
      if ((paramName.empty()) || (paramName.c_str()[0] == '*')) {
d559 4
a562 6
	    std::string restOfLine = next("\n");
   	    paramValue = sce::extractQuotedPart( restOfLine );

	    //RWCRegexp quotedStringREGEXP("\".*\"");  
	    //std::string quotedParamValue = restOfLine(quotedStringREGEXP);
	    //paramValue = sce::strip(quotedParamValue,  '\"');
d572 1
a572 1
	  if (paramValue.empty()) {
a579 2


a586 2

#if 0 // keep the old RegExp code as reference
d608 2
a609 2
	  if (paramValue(floatExp_R).empty() &&
	      paramValue(floatExp_L).empty())    //not float?
d612 1
a612 1
	  if (paramValue(intExp).empty())  // not int?
a613 25
#else // new code that does the same as the above RegExp code - JG

      // Conditions for a float: 
      // contains a point.
      // non-points must be digits.
      // must be at least 2 characters long.
      size_t firstPointOffset = paramValue.find_first_of( '.' );
      size_t secondPointOffset = paramValue.find_first_of( '.', firstPointOffset + 1 );
      bool containsOnePoint = ( firstPointOffset != std::string::npos && 
                                secondPointOffset == std::string::npos );
      bool allDigits = true;
      for( size_t i = 0; i < paramValue.size(); i++ )
          if( !isdigit( paramValue[i] ) && paramValue[i] != '.' )
          {
              allDigits = false;
              break;
          }
      if( !containsOnePoint || !allDigits || paramValue.size() < 2 )
          isFloat = 0;

      // Conditions for an int: must only digits, and at least one.
      if( containsOnePoint || !allDigits )
          isInt = 0;

#endif
d621 2
a622 2
        sce::fromString(paramValue,temp);
	    setOfParameters.setInt(paramName,temp,1,false);
d628 2
a629 2
        sce::fromString(paramValue,temp);
	    setOfParameters.setFloat(paramName,temp,1,false);
d636 1
a636 1
	      sce::fromString(paramValue,temp);
d638 1
a638 1
		setOfParameters.setBool(paramName,false,1,false);
d640 1
a640 1
		setOfParameters.setBool(paramName,true,1,false);
d648 3
a650 4
	      //RWCRegexp quotedStringREGEXP("^\".*\"");  
	      //std::string quotedParamValue = paramValue(quotedStringREGEXP);
          paramValue = sce::extractQuotedPart( paramValue );
          paramValue = sce::strip( paramValue, "\"");
d652 1
a652 1
	    setOfParameters.setString(paramName,paramValue,1,false);
d654 1
a654 1
	    setOfParameters.setString(paramName,paramValue,1,false);
a676 1

d695 1
a695 1
    setOfParameters.setInt("fssSingletonHorizon", numPeriods-1, 0, false);
d697 1
a697 1
       setOfParameters.setInt("fssSingletonHorizon", tempParamValue, 1, false);
d707 1
a707 1
    setOfParameters.setInt("fssGeneralSetHorizon", numPeriods-1, 0, false);
d709 1
a709 1
       setOfParameters.setInt("fssGeneralSetHorizon", tempParamValue, 1, false);
d719 1
a719 1
    setOfParameters.setInt("fssMachineHorizon", numPeriods-1, 0, false);
d721 1
a721 1
       setOfParameters.setInt("fssMachineHorizon", tempParamValue, 1, false);
d737 1
a737 1
			   0, false);
d739 1
a739 1
       setOfParameters.setInt("defaultShipLateLimit", tempParamValue, 1, false);
d748 1
a748 1
    std::string tempStringValue;
d801 1
a801 2
    int q = 0; // Pulled out of the for below by RW2STL
    for (q=0; q<numEntries; q++) {
d835 3
a837 3
    bool & exists,                                             
    const std::string & parameterFile,
    const std::string & targetParameter,
d842 1
a842 1
  std::string paramAsString = searchParamFile(exists,
d846 2
a847 2
  if (! paramAsString.empty()) {
    if (! sce::fromString(paramAsString, theValD))  {
d861 1
a861 1
std::string
d863 3
a865 3
    bool & exists,
    const std::string & parameterFile,
    const std::string & targetParameter,
d869 4
a872 4
    std::ifstream inFile;
    std::string parameter;  // Note: initialized to a 0 string
    std::string dataLine;
    std::string paramKeyword;
d874 1
a874 1
    inFile.open(parameterFile.c_str());
d881 2
a882 2
    // initialize doesParamterExist to false
    exists = false;
d887 1
a887 1
      std::getline( inFile, dataLine );
d890 1
a890 1
      SCETokenizer next(dataLine);
d896 1
a896 1
      if ((paramKeyword.empty()) || paramKeyword == "*")
d900 1
a900 1
      if (sce::compareStringsCaseIns( paramKeyword, targetParameter ) == 0)  {
d903 1
a903 1
	if (parameter.empty())  {
d906 1
a906 1
	exists = true;
d913 1
a913 1
    if (mandatory==MANDATORY && parameter.empty())   {
d927 3
a929 3
    bool & exists,
    const std::string & parameterFile,
    const std::string & targetParameter,
d937 1
a937 1
  std::string paramAsString = searchParamFile(exists,
d942 1
a942 1
  if (! paramAsString.empty()) {
d944 1
a944 1
    if (! sce::fromString(paramAsString, theValL))  {
d957 1
a957 1
bool
d959 3
a961 3
    bool & exists,
    const std::string & parameterFile,
    const std::string & targetParameter,
d966 1
a966 1
    std::string paramAsString = searchParamFile(exists,
d983 1
a983 1
bool
d985 1
a985 1
    const std::string & targetFile)
d987 1
a987 1
    std::ifstream inFile;
d989 1
a989 1
    inFile.open(targetFile.c_str());
d993 1
a993 1
	return true;
d996 1
a996 1
    return false;
d1050 2
a1051 2
  : sceIOLogMgr_(0),
    sceErrFacility_(0)
@


1.17.2.2
log
@Went all the way to std::cout
@
text
@d4 1
a4 1
#include <ostream>
d8 1
a8 1
#include <iostream>
@


1.16
log
@Added include of mcl/src/mcl.h near top of include list to avoid
compile time problems on AIX which did not occur on Windows.

added
  implement(RWGVector, float)
  implement(RWGVector, int)
to ipSce.C to avoid unresolved symbols at link time
@
text
@d60 9
d765 14
a778 1
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() << "objectiveType" << parameterFileName << "Must be one of the following: {1,2,3}");
d781 1
d785 4
a788 1
      (*sceErrFacility_)("ParamOutOfRange",MclArgList() << "fileFormatType" << parameterFileName << "Must be one of the following: {Standard, STANDARD} -- NOTE: Case-Sensitive.");
@


1.15
log
@added prodVolPegging for ats and forcePcfBogons (experimental)
@
text
@d4 1
@


1.14
log
@bogon output, and minor changes
@
text
@d60 9
d70 3
d116 1
@


1.13
log
@added indepDemandRevenueFile
@
text
@a61 2

  // begin: SCE 3.11 rev04 parameters 
d65 2
@


1.12
log
@added param optInitFromZero which bypasses the heuristic solution start of optimplode
@
text
@d61 1
@


1.11
log
@print lowest level non-pcf files ... ooops
@
text
@d60 3
@


1.10
log
@print lowest level non-pcf files
@
text
@d61 1
a61 1
  defaultSet.setBool("printLowestLevelNonPcfParts", FALSE,0,FALSE);
@


1.9
log
@new param ... aggregateSupplyInScrub needed by ATS
@
text
@d59 1
a59 1
  // begin: SCE 3.12 parameters 
d61 3
a63 1
  // end: SCE 3.12 parameters 
@


1.8
log
@3.11 commit
@
text
@d59 3
@


1.7
log
@file cleaning ... more pegging ... parameters ...
@
text
@d61 2
a62 3
  defaultSet.setBool("shutOffAllLotSizing", FALSE,0,FALSE);
  defaultSet.setBool("disableInterplantJumperArcs", FALSE,0,FALSE);
  defaultSet.setBool("disableSplitBop", FALSE,0,FALSE);
d67 3
a82 14
#ifdef DOS_FILE_NAMES
  defaultSet.setString(   "demandConsPegFileExtension",     ".dcp",0,FALSE);
  defaultSet.setString("mrpDemandConsPegFileExtension",     ".mdp",0,FALSE);
  defaultSet.setString(   "indpDemandConsPegFileExtension", ".icp",0,FALSE);
  defaultSet.setString("mrpIndpDemandConsPegFileExtension", ".imc",0,FALSE);
  defaultSet.setString(   "interplantPegFileExtension",     ".ipp",0,FALSE);
  defaultSet.setString("mrpInterplantPegFileExtension",     ".mpi",0,FALSE);
  defaultSet.setString(   "indpInterplantPegFileExtension", ".iip",0,FALSE);
  defaultSet.setString("mrpIndpInterplantPegFileExtension", ".mii",0,FALSE);
  defaultSet.setString(   "execVolPegFileExtension",        ".evp",0,FALSE);
  defaultSet.setString("mrpExecVolPegFileExtension",        ".mep",0,FALSE);
  defaultSet.setString(   "indpExecVolPegFileExtension",    ".iep",0,FALSE);
  defaultSet.setString("mrpIndpExecVolPegFileExtension",    ".mie",0,FALSE);
#else
a94 2
#endif

a99 3
#ifdef DOS_FILE_NAMES
  defaultSet.setString("heurAllocTraceFileExtension", ".trc",0,FALSE);
#else
a100 1
#endif
a117 50
#ifdef DOS_FILE_NAMES
  defaultSet.setString("allocatedMrpFileExtension", ".amr",0,FALSE);
  defaultSet.setString("allocatedIndepMrpFileExtension", ".aim",0,FALSE);
  defaultSet.setString("fssSingletonFileExtension", ".fss",0,FALSE);
  defaultSet.setString("fssGeneralSetFileExtension", ".fgr",0,FALSE);
  defaultSet.setString("fssMachineFileExtension", ".fmr",0,FALSE);  
  defaultSet.setString("backlogResponseFileExtension", ".brf",0,FALSE);
  defaultSet.setString("buildSchedFileExtension", ".bsf",0,FALSE);
  defaultSet.setString("capacityDBFileExtension", ".cdb",0,FALSE);
  defaultSet.setString("criticalListFileExtension", ".clf",0,FALSE);
  defaultSet.setString("debugFileExtension", ".dfe",0,FALSE);
  defaultSet.setString("demandDriversFileExtension", ".ddr",0,FALSE);
  defaultSet.setString("explodeEchoFileExtension", ".eef",0,FALSE);  
  defaultSet.setString("explodeWitDataFileExtension", ".ewd",0,FALSE);  
  defaultSet.setString("formattedSupplyReportFileExtension", ".fsr",0,FALSE);
  defaultSet.setString("geoSourceDebugFileExtension", ".gsd",0,FALSE);
  defaultSet.setString("geoSupplyByPdfFileExtension", ".gsp",0,FALSE);
  defaultSet.setString("heurEchoFileExtension", ".hef",0,FALSE);  
  defaultSet.setString("heurWitDataFileExtension", ".hwd",0,FALSE);  
  defaultSet.setString("indepSupplyResponseFileExtension", ".isr",0,FALSE);
  defaultSet.setString("operationDemandFileExtension", ".odf",0,FALSE);
  defaultSet.setString("operationOrdersFileExtension", ".oof",0,FALSE);
  defaultSet.setString("interplantDemandFileExtension", ".idf",0,FALSE);
  defaultSet.setString("interplantOrdersFileExtension", ".iof",0,FALSE);
#ifdef BINNING_OPERATION_TEMP_SOLUTION
  defaultSet.setString("binDemandFileExtension", ".bdf",0,FALSE);
  defaultSet.setString("binOrdersFileExtension", ".bof",0,FALSE);
#endif
  defaultSet.setString("mrpDemandOrdersFileExtension", ".mdo",0,FALSE);
  defaultSet.setString("mrpSupplyOrdersFileExtension", ".mso",0,FALSE);
  defaultSet.setString("mrpSubUsageFileExtension", ".msu",0,FALSE);  
  defaultSet.setString("mrpOpSubUsageFileExtension", ".mos",0,FALSE);  
  defaultSet.setString("objectiveSummaryFileExtension", ".osf",0,FALSE);
  //   the opExecVol file s renamed to the operationOrdersFile
  //   defaultSet.setString("opExecutionVolumeFileExtension", ".oev",0,FALSE);
  defaultSet.setString("operationDBFileExtension", ".odb",0,FALSE);
  defaultSet.setString("opSubUsageFileExtension", ".osu",0,FALSE);  
  defaultSet.setString("optEchoFileExtension", ".oef",0,FALSE);
  defaultSet.setString("optWitDataFileExtension", ".owd",0,FALSE);  
  defaultSet.setString("optionalFeatRatioFileExtension", ".ofr",0,FALSE);
  defaultSet.setString("outputFilePrefix", ".\\output",0,FALSE);          
  defaultSet.setString("partDBFileExtension", ".pdb",0,FALSE);
  defaultSet.setString("problemStatisticsFileExtension", ".psf",0,FALSE);
  defaultSet.setString("selFeatBBratioFileExtension", ".sfb",0,FALSE);
  defaultSet.setString("subUsageFileExtension", ".suf",0,FALSE);
  defaultSet.setString("supplyResponseFileExtension", ".srf",0,FALSE);
  defaultSet.setString("totalDemandReportFileExtension", ".tdr",0,FALSE);
  defaultSet.setString("witExplodeMsgFileExtension", ".wem",0,FALSE);
  defaultSet.setString("witMsgFileExtension", ".wmf",0,FALSE);
#else
d170 1
a170 1
#endif
a172 3
#ifdef DOS_FILE_NAMES
  defaultSet.setString("witRolloverMsgFileExtension", ".wrm",0,FALSE);
#else
d174 1
a174 1
#endif
d252 1
d270 3
d284 1
@


1.6
log
@execVol pegging
@
text
@d62 2
d82 7
a88 7
  defaultSet.setString("demandConsPegFileExtension", ".dcp",0,FALSE);
  defaultSet.setString("indpDemandConsPegFileExtension", ".icp",0,FALSE);
  defaultSet.setString("mrpDemandConsPegFileExtension", ".mdp",0,FALSE);
  defaultSet.setString("mrpIndpDemandConsPegFileExtension", ".mip",0,FALSE);
  defaultSet.setString("interplantPegFileExtension", ".ipp",0,FALSE);
  defaultSet.setString("indpInterplantPegFileExtension", ".iip",0,FALSE);
  defaultSet.setString("mrpInterplantPegFileExtension", ".mpi",0,FALSE);
d90 4
a93 4
  defaultSet.setString("execVolPegFileExtension", ".evp",0,FALSE);
  defaultSet.setString("indpExecVolPegFileExtension", ".iep",0,FALSE);
  defaultSet.setString("mrpExecVolPegFileExtension", ".mep",0,FALSE);
  defaultSet.setString("mrpIndpExecVolPegFileExtension", ".mie",0,FALSE);
d95 3
a97 3
  defaultSet.setString("demandConsPegFileExtension", ".demConsPeg",0,FALSE);
  defaultSet.setString("indpDemandConsPegFileExtension", ".iDemConsPeg",0,FALSE);
  defaultSet.setString("mrpDemandConsPegFileExtension", ".mrpDemConsPeg",0,FALSE);
d99 8
a106 8
  defaultSet.setString("interplantPegFile", ".interplantPeg",0,FALSE);
  defaultSet.setString("indpInterplantPegFileExtension", ".iInterplantPeg",0,FALSE);
  defaultSet.setString("mrpInterplantPegFileExtension", ".mrpInterplantPeg",0,FALSE);
  defaultSet.setString("mrpIndpExecVolPegFileExtension", ".iMrpInterplantPeg",0,FALSE);
  defaultSet.setString("execVolPegFile", ".execVolPeg",0,FALSE);
  defaultSet.setString("indpExecVolPegFileExtension", ".iExecVolPeg",0,FALSE);
  defaultSet.setString("mrpExecVolPegFileExtension", ".mrpExecVolPeg",0,FALSE);
  defaultSet.setString("mrpIndpExecVolPegFileExtension", ".iMrpExecVolPeg",0,FALSE);
@


1.5
log
@yet another fix for setPureOptionBuild.
New parameter: shutOffAllLotSizing ... which does just that
@
text
@d71 8
d84 8
d97 8
@


1.4
log
@premiminary coomit for release 3.11
@
text
@d59 6
@


1.3
log
@3.10 pegging capability
@
text
@d63 2
d68 2
d73 2
d406 3
d460 1
a460 1

@


1.2
log
@changes for Release 3.00
@
text
@d59 14
d519 1
@


1.1
log
@Initial revision
@
text
@a59 3
  //----------------------------------------------------------------------
  //  output file extensions -- non-mandatory
  //----------------------------------------------------------------------
d61 14
d306 1
d389 1
@


1.1.1.1
log
@Import sce
@
text
@@
