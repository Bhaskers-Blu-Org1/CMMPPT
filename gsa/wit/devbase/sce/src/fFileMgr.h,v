head	1.11;
access;
symbols
	sce_5_01_20080919:1.5
	latest_sce_4_20_20060523:1.3.0.6
	sce_4_20_20060523:1.3
	latest_sce4_20_OSL:1.3.0.4
	sce_4_20_OSL:1.3
	sce_4_20_20051222:1.3
	sce_4_10_30050426:1.3
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.3
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2011.03.17.17.59.01;	author ervolina;	state Exp;
branches;
next	1.10;
deltatype	text;
permissions	644;
commitid	25bc4d824b6d15ef;
kopt	kv;
filename	@fFileMgr.h@;

1.10
date	2010.04.20.14.26.56;	author ervolina;	state Exp;
branches;
next	1.9;
deltatype	text;

1.9
date	2010.03.29.11.54.39;	author ervolina;	state Exp;
branches;
next	1.8;
deltatype	text;

1.8
date	2010.03.13.18.53.04;	author ervolina;	state Exp;
branches;
next	1.7;
deltatype	text;

1.7
date	2009.12.08.13.58.35;	author ervolina;	state Exp;
branches;
next	1.6;
deltatype	text;

1.6
date	2009.01.28.14.22.30;	author ervolina;	state Exp;
branches;
next	1.5;
deltatype	text;

1.5
date	2008.04.24.14.04.41;	author ervolina;	state Exp;
branches;
next	1.4;
deltatype	text;

1.4
date	2008.03.20.14.52.47;	author ervolina;	state Exp;
branches;
next	1.3;
deltatype	text;

1.3
date	2003.06.26.23.09.37;	author ervolina;	state Exp;
branches;
next	1.2;
deltatype	text;

1.2
date	2003.01.15.19.36.55;	author rwToStl;	state Exp;
branches;
next	1.1;
deltatype	text;

1.1
date	2000.02.25.18.36.50;	author wit;	state Exp;
branches
	1.1.1.1;
next	;
deltatype	text;

1.1.1.1
date	2000.02.25.18.36.50;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;
deltatype	text;

1.1.1.1.14.1
date	2003.01.08.17.43.14;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;
deltatype	text;

1.1.1.1.14.2
date	2003.01.14.19.06.03;	author rwToStl;	state Exp;
branches;
next	;
deltatype	text;


desc
@@


1.11
log
@fix for backward compat to sce5
@
text
@#ifndef LGFRSCEFLATFILEMGR_H
#define LGFRSCEFLATFILEMGR_H

// RW2STL - inserted:
#include <string>
// End of RW2STL - inserted includes.


#include <sce/src/sceDefin.h>
#include <stdlib.h>
//#include <iostream.h>
#include <scenario/src/generVc.h>
#include <scenario/src/calendar.h>
#include <wit/src/wit.h>
#include <sce/src/mPlantH.h>
#include <mcl/src/mcl.h>
#include <sce/src/sceIOLog.h>
#include <float.h>
#include <fstream>

// forward declarations

class LgFrSceFlatFileMgr {
  
public:


int 
demandType(const std::string & demandName);


  
void 
writeFloatVecToStream(
		      const LgFrCalendar & theCal,
		      std::ofstream & theStream,    // output stream (already opened)
		      int    vLength,               // length of the vector (usually nPeriods)
		      const int    printIfZero,     // printRecordIfZero: for vectored will cause a vector of zeros to print
                                 	            //                    for dated will cause a zero record to write
		      std::string & leadingString,  // leading string 
		      const float * theVector);     // the vector itself



  
void 
writeFloatVecToStreamDoubleDated(
				 const LgFrCalendar & theCal,
				 std::ofstream & theStream,    // output stream (already opened)
				 int    vLength,               // length of the vector (usually nPeriods)
				 const int    printIfZero,     // printRecordIfZero: for vectored will cause a vector of zeros to print
	                               			 //                    for dated will cause a zero record to write
				 std::string & leadingString,  // leading string 
				 const float * theVector);     // the vector itself
  

// reads:
//   part, pdf, 
// used by:
//    processCapacitySupplyFile61()
int  
readPartPdfAndCheckExistence(
    WitRun * const theWitRun,  
    const int errorAction,  
    std::string & pdf_PartName,    // pdf_PartName to be returned
    std::ifstream & inFile,             // An open stream
    const std::string & fileName,  // For error messaging
    std::string & dataLine,
    long & lineNo,
    const LgFrMultiPlantHelper & mpHelper);

int  
readCsvPartFloatDatedRecord(
           WitRun * const theWitRun,   // WIT environment    
           const int nPeriods,         // Number of periods  
           std::string & pdf_PartName,   // pdf_PartName to be returned
           const LgFrCalendar & theCal,
           float & theVal,
           int & start,
           int & end,
           std::ifstream & inFile,             // An open stream
           const std::string & fileName,  // For error messaging
           std::string& dataLine,
           long & lineNo,
           const LgFrMultiPlantHelper & mpHelper);


int  
readCsvOperationFloatRecord(
			    WitRun * const theWitRun,   // WIT environment    
			    const int nPeriods,         // Number of periods  
			    std::string & pdf_OperationName,   // pdf_PartName to be returned
			    const LgFrCalendar & theCal,
			    float & theVal,
			    std::ifstream & inFile,             // An open stream
			    const std::string & fileName,  // For error messaging
			    std::string & dataLine,
			    long & lineNo,
			    const LgFrMultiPlantHelper & mpHelper);


int  
readCsvOperationFloatDatedRecord(
           WitRun * const theWitRun,   // WIT environment    
           const int nPeriods,         // Number of periods  
           std::string & pdf_OperationName,   // pdf_PartName to be returned
           const LgFrCalendar & theCal,
           float & theVal,
           int & start,
           int & end,
           std::ifstream & inFile,             // An open stream
           const std::string & fileName,  // For error messaging
           std::string & dataLine,
           long & lineNo,
           const LgFrMultiPlantHelper & mpHelper);

int  
readCsvPart2FloatsDatedRecord(
           WitRun * const theWitRun,   // WIT environment    
           const int nPeriods,         // Number of periods  
           std::string & pdf_PartName,   // pdf_PartName to be returned
           const LgFrCalendar & theCal,
           float & theVal,
           float & theVal2,
           int & start,
           int & end,
           std::ifstream & inFile,             // An open stream
           const std::string & fileName,  // For error messaging
           std::string & dataLine,
           long & lineNo,
           const LgFrMultiPlantHelper & mpHelper);

int  
readCsvOperation2FloatsDatedRecord(
         WitRun * const theWitRun,   // WIT environment    
         const int nPeriods,         // Number of periods  
         std::string & pdf_OperationName,   // pdf_OperationName to be returned
         const LgFrCalendar & theCal,
         float & theVal,
         float & theVal2,
         int & start,
         int & end,
         std::ifstream & inFile,             // An open stream
         const std::string & fileName,  // For error messaging
         std::string & dataLine,
         long & lineNo,
         const LgFrMultiPlantHelper & mpHelper);

int  
readCsvPartFloatVector(
         WitRun * const theWitRun,            // WIT environment    
         const int nPeriods,                  // Number of periods  
         std::string & pdf_PartName,            // pdf_PartName to be returned
         float *  floatVec,                   // floatVector to be returned
         std::ifstream & inFile,                    // An open stream
         const std::string & fileName,          // for messaging
         std::string& dataLine,
         long & lineNo,                       // for messaging
         const LgFrMultiPlantHelper & mpHelper,
         const int doYouNeedIt,               // Use one of MANDATORY, 
                                              // PURELY_OPTIONAL
                                              // or OPTIONAL_WITH_MESSAGE
         const float lowerLimit = 0.0,        // data lower limits
         const float upperLimit = FLT_MAX);   // data upper limits

int  
readCsvOperationFloatVector(
         WitRun * const theWitRun,            // WIT environment    
         const int nPeriods,                  // Number of periods  
         std::string & pdf_OperationName,       // pdf_OperationName to be returned
         float *  floatVec,                   // floatVector to be returned
         std::ifstream & inFile,                    // An open stream
         const std::string & fileName,          // for messaging
         std::string& dataLine,
         long & lineNo,                       // for messaging
         const LgFrMultiPlantHelper & mpHelper,
         const int doYouNeedIt,               // Use one of MANDATORY, 
                                              // PURELY_OPTIONAL
                                              // or OPTIONAL_WITH_MESSAGE
         const float lowerLimit = 0.0,        // data lower limits
         const float upperLimit = FLT_MAX);   // data upper limits
  

// Returns --  -1 if data element is missing
//              0 if OK
// If mandatory and something is wrong, then program terminates
// with Nasty messages  
int 
nextInt(
        int & theValue,
        SCETokenizer & next,
        const std::string & fileName,
        const std::string & dataLine,
        const long & lineNo,
        const bool Mandatory,
        const int lowerLimit,
        const int upperLimit);


// Returns --  -1 if data element is missing
//              0 if OK
// If mandatory and something is wrong, then program terminates
// with Nasty messages
int 
nextFloat(
          float & theValue,
          SCETokenizer & next,
          const std::string & fileName,
          const std::string & dataLine,
          const long & lineNo,
          const bool Mandatory = true,
          const float lowerLimit = 0.0,
          const float upperLimit = FLT_MAX);
  

int  
readDatedDemandFloatRecord(
			   float & theVal,
			   std::string & requestDate,
			   const bool Mandatory,
			   const float lowerLimit,
			   const float upperLimit,
			   SCETokenizer & next,
			   const std::string & fileName,   
			   const std::string & dataLine,
			   const long & lineNo,
			   const LgFrMultiPlantHelper & mpHelper,
			   const LgFrCalendar & theCal);

  
bool
isFloatVecNonZero(
                  const float * theVector,    // the vector itself
                  const int vLength) ;  // output stream (already opened)

void 
writeFloatVector(
                 std::ofstream & theStream,   // output stream (already opened)
                 int    vLength,         // lenght of the vector (nPeriods?)
                 float * theVector,      // the vector itself
                 int precision,          // number of digits to
                                         //the right of the decimal
                 int totalSpace);


// returns --- -1 if value is missing (not an error)
//              0 if OK
int
nextStartEndDates(
    int & start,
    int & end,
    SCETokenizer & next,
    const std::string & fileName,
    long & lineNo,
    const std::string & dataLine,
    const LgFrCalendar & theCal);

void
writeCsvBoolVector(
                   std::ofstream & theStream,    // output stream (already opened)
                   int    vLength,          // lenght of the vector (nPeriods?)
                   const witBoolean * theVector); // the vector itself


//  -------------------------------------------------------------------------------------
// **** writePartPdfRecord Vector or Dated_Demands ... Or  multi_attribute_demand_class  ... automatically!!
//  -------------------------------------------------------------------------------------
int
writePartPdfRecord(
    LgFrCalendar & theCal,
    std::string & partname, 
    std::string & pdf, 
    const float *  theVector,
    std::ofstream & theStream,   // output stream (already opened)
    int nPeriods, 
    int printIfZero);


//  -------------------------------------------------------------------------------------
// **** writeDbDump Vector or Dated_Demands ... Or  multi_attribute_demand_class  ... automatically!!
//  -------------------------------------------------------------------------------------
int
writeDbDumpRecord(
    LgFrCalendar & theCal,
    std::string & partname, 
    std::string & pdf, 
    const char * attributeKeyword,
    const float *  theVector,
    std::ofstream & outFile,   // output stream (already opened)
    int nPeriods, 
    int printIfZero);


  // SCE5

//  -------------------------------------------------------------------------------------
// **** writeDemandVector
// Print to either multi_attribute_demand_class OR Dated_Demands format ... automatically
//  -------------------------------------------------------------------------------------
void 
writeDemandRecord(
    std::ofstream & theStream,   // output stream (already opened)
    LgFrMultiPlantHelper & mpHelper,
    LgFrCalendar & theCal,
    const std::string & partname,
    const std::string & pdf,
    const std::string & demandName,
    int    vLength,         // lenght of the vector (nPeriods?)
    const float * theVector,      // the vector itself
    bool printIfZero,
    int precision,          // number of digits to the right of the decimal
    int totalSpace);         // total length of the 'formatted' field


void 
writeGpdDemandRecord(
		     std::ofstream & theStream,    // output stream (already opened)
		     LgFrMultiPlantHelper & mpHelper,
		     LgFrCalendar & theCal,
		     const std::string & partname,
		     const std::string & demandName,
		     int    vLength,               // length of the vector (nPeriods?)
		     const float * theVector,      // the vector itself
		     bool printIfZero,
		     int precision,                // number of digits to the right of the decimal
		     int totalSpace);               // total length of the 'formatted' field
  


  // SCE 6.1: Needed for Demand2Order
void 
writeDemandRecordINDP(std::ofstream & theStream,   // output stream (already opened)
		      LgFrMultiPlantHelper & mpHelper,
		      LgFrCalendar & theCal,
		      const std::string & partname,
		      const std::string & pdf,
		      const std::string & demandName,
		      int    vLength,         // lenght of the vector (nPeriods?)
		      const float * theVector,      // the vector itself
		      bool printIfZero,
		      int precision,          // number of digits to the right of the decimal
		      int totalSpace);         // total length of the 'formatted' field


//  -------------------------------------------------------------------------------------
// **** writePegCritlistRecord
// Print to either multi_attribute_demand_class OR Dated_Demands format ... automatically
//  -------------------------------------------------------------------------------------
void 
writePegCritListRecord(
    std::ofstream & theStream,   // output stream (already opened)
    LgFrMultiPlantHelper & mpHelper,
    LgFrCalendar & theCal,
    const std::string & partname,
    const std::string & pdf,
    const std::string & demandName,
    const std::string & critpartname,
    const std::string & critpdf,
    int    demandPd, 
    int    critPd, 
    int    theRank);      // the rank in pegged 


//  -------------------------------------------------------------------------------------
// **** writeGpdPegRecord
// Print to either multi_attribute_demand_class OR Dated_Demands format ... automatically
//  -------------------------------------------------------------------------------------
void writeGpdPegRecord(LgFrCalendar & theCal,
		       LgFrMultiPlantHelper & mpHelper,
		       const std::string & plannerPart, 
		       const std::string & geo, 
		       const std::string & peggedPart,
		       const std::string & peggedPdf, 
		       const float * theVector,
		       std::ofstream & theStream,   // output stream (already opened)
		       int nPeriods,
		       int printIfZero);


//  -------------------------------------------------------------------------------------
// **** writeIndpPegRecord
// Print to either multi_attribute_demand_class OR Dated_Demands format ... automatically
//  -------------------------------------------------------------------------------------
void writeIndpPegRecord(LgFrCalendar & theCal,
		   LgFrMultiPlantHelper & mpHelper,
		   const std::string & demandedPart, 
		   const std::string & demandedPdf, 
		   const std::string & demandId, 
		   const std::string & peggedPart,
		   const std::string & peggedPdf, 
		   const float * theVector,
		   std::ofstream & theStream,   // output stream (already opened)
		   int nPeriods,
		   int printIfZero);


//  -------------------------------------------------------------------------------------
// **** writeIndpInterplantPegRecord
// Print to either multi_attribute_demand_class OR Dated_Demands format ... automatically
//  -------------------------------------------------------------------------------------
void 
writeIndpInterplantPegRecord(LgFrCalendar & theCal,
			     LgFrMultiPlantHelper & mpHelper,
			     const std::string & demandedPart, 
			     const std::string & sourceLoc, 
			     const std::string & demandId, 
			     const std::string & pn1,
			     const std::string & pdf1, 
			     const std::string & pn2,
			     const std::string & pdf2, 
			     const float * theVector,
			     std::ofstream & theStream, 
			     int nPeriods,
			     int printIfZero);
  



//  -------------------------------------------------------------------------------------
// **** writeGpdInterplantPegRecord
// Print to either multi_attribute_demand_class OR Dated_Demands format ... automatically
//  -------------------------------------------------------------------------------------
void 
writeGpdInterplantPegRecord(LgFrCalendar & theCal,
			    LgFrMultiPlantHelper & mpHelper,
			    const std::string & plannerPart, 
			    const std::string & geo, 
			    const std::string & peggedOrderingPart,
			    const std::string & peggedOrderingPdf, 
			    const std::string & peggedSupplyingPart,
			    const std::string & peggedSupplyingPdf, 
			    const float * theVector,
			    std::ofstream & theStream,   // output stream (already opened)
			    int nPeriods,
			    int printIfZero);




void 
writeCsvFloatVector(
                    std::ofstream & theStream,   // output stream (already opened)
                    int    vLength,         // lenght of the vector (nPeriods?)
                    const float * theVector,      // the vector itself
                    int precision,          // number of digits to the right
                                            // of the decimal
                    int totalSpace);
  
// For PURELY_OPTIONAL and OPTIONAL_WITH_MESSAGE:
//     returns -1 if data is missing
// For MANDATORY:
//     program terminates if data is missing
std::string
nextQuotedString(
                 SCETokenizer & next,
                 int & result,
                 const std::string & fileName,
                 const std::string & dataLine,
                 long lineNo,
                 const int doYouNeedIt);

  // multi_attribute_demand_class
std::string
nextQuotedDemandString(
		       SCETokenizer & next,
		       int & result,
		       const std::string & fileName,
		       const std::string & dataLine,
		       long lineNo,
		       const int doYouNeedIt);
  


// append an given illegal character to the set
void
appendToTheSetOfIllegalCharacters( const std::string newIllegalChar );

// return the number entries (counting duplicates)
// in the set of illegal characters
int
sizeOfTheSetOfIllegalCharacters ();
  
// screen a string for any illegal characters
// 1 = an illegal character was found (contains = true)
// 0 = no illegal characters were found (contains = false)
int
containsIllegalCharacters (const std::string theString);
  
void
setGlobalCalendarFormat(const std::string & calendarFormat);

std::string
getGlobalCalendarFormat();

  // sets for private data
void useDatedDemands(bool useDatedDemands);
void useMultiAttributeDemand(bool useMultiAttributeDemand);
void numDemandAttributes(int numDemandAttributes);
void demandTypeKeyFieldNum(int demandTypeKeyFieldNum);
void multiAttributeDemandSeparator(const std::string & multiAttributeDemandSeparator);


LgFrDatetime
parseDateString(
    const std::string & dateString,
    const LgFrCalendar & theCal);

// return a reference to the i/o log manager
LgFrSceIOLogMgr&
sceIOLogManager();


// These are necessary for borrowing scenario's error facility for error
//  messaging originating from the flat file manager.
void
setErrFacility(MclFacility * existingFacility);

MclFacility *
getErrFacility();



// Assignment operator.
LgFrSceFlatFileMgr&
operator=(
          const LgFrSceFlatFileMgr& rhs);


// Destructor
~LgFrSceFlatFileMgr();


// Copy constructor
LgFrSceFlatFileMgr(
               const LgFrSceFlatFileMgr& source);

// Default Constructor
LgFrSceFlatFileMgr();


// Self-test
static void test();

private:
  //  illegal set of characters
  LgFrStringVector setOfIllegalCharacters_ ;

  // parseDateString relies on this member data.
  // The ip invokes a fFileMgr public method to
  // set this data, based on the value in the setOfParameters
  std::string globalCalendarFormat_;  

  // multi_attribute_demand_class
  bool useDatedDemands_;
  bool useMultiAttributeDemand_;
  int numDemandAttributes_;
  int demandTypeKeyFieldNum_;
  std::string multiAttributeDemandSeparator_;


  // Used for producing i/o log files
  LgFrSceIOLogMgr sceIOLogMgr_;

  // Necessary for error messaging by flat file manager!!
  MclFacility * sceErrFacility_;
};

#endif


@


1.10
log
@convert capacity datamodel to dated intervals
@
text
@d293 3
@


1.9
log
@fixed array bounds checks
@
text
@d57 14
@


1.8
log
@6.1 prep commit ... many things in here
@
text
@d367 1
a367 2
void 
writeIndpPegRecord(LgFrCalendar & theCal,
@


1.7
log
@more fixes for 6.1
@
text
@d26 19
d46 12
d205 1
a205 1
			   int & thePeriod,
d298 29
d483 1
d541 1
@


1.6
log
@some SCE 6 enhancements for 1/23 Beta release
@
text
@d40 1
a40 2
           const LgFrMultiPlantHelper & mpHelper,
           const int fileFormatType = SCE_STANDARD_FILE_FORMAT);
d86 1
a86 2
           const LgFrMultiPlantHelper & mpHelper,
           const int fileFormatType = SCE_STANDARD_FILE_FORMAT);
@


1.5
log
@sce5 beta with prioriity manager, multiattribute demand, and dated records
@
text
@d221 15
d271 19
d322 23
@


1.4
log
@Dated demands and multiAttributeDemand for indep DemandsVol and commits,
also for partDB
@
text
@d254 55
@


1.3
log
@minor updates for SCE
@
text
@d172 15
d221 33
d276 1
d278 8
a285 8
nextQuotedCustomerString(
			 SCETokenizer & next,
			 int & result,
			 const std::string & fileName,
			 const std::string & dataLine,
			 long lineNo,
			 const int doYouNeedIt);

d309 7
a315 1
  
d366 7
@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@d228 11
@


1.1
log
@Initial revision
@
text
@d4 4
d11 1
a11 2
#include <iostream.h>
#include <rw/ctoken.h>
d19 1
a19 1

a21 1
class ofstream;
d31 1
a31 1
           RWCString & pdf_PartName,   // pdf_PartName to be returned
d36 3
a38 3
           istream & inFile,             // An open stream
           const RWCString & fileName,  // For error messaging
           RWCString& dataLine,
d48 1
a48 1
			    RWCString & pdf_OperationName,   // pdf_PartName to be returned
d51 3
a53 3
			    istream & inFile,             // An open stream
			    const RWCString & fileName,  // For error messaging
			    RWCString & dataLine,
d62 1
a62 1
           RWCString & pdf_OperationName,   // pdf_PartName to be returned
d67 3
a69 3
           istream & inFile,             // An open stream
           const RWCString & fileName,  // For error messaging
           RWCString & dataLine,
d77 1
a77 1
           RWCString & pdf_PartName,   // pdf_PartName to be returned
d83 3
a85 3
           istream & inFile,             // An open stream
           const RWCString & fileName,  // For error messaging
           RWCString & dataLine,
d94 1
a94 1
         RWCString & pdf_OperationName,   // pdf_OperationName to be returned
d100 3
a102 3
         istream & inFile,             // An open stream
         const RWCString & fileName,  // For error messaging
         RWCString & dataLine,
d110 1
a110 1
         RWCString & pdf_PartName,            // pdf_PartName to be returned
d112 3
a114 3
         istream & inFile,                    // An open stream
         const RWCString & fileName,          // for messaging
         RWCString& dataLine,
d127 1
a127 1
         RWCString & pdf_OperationName,       // pdf_OperationName to be returned
d129 3
a131 3
         istream & inFile,                    // An open stream
         const RWCString & fileName,          // for messaging
         RWCString& dataLine,
d148 3
a150 3
        RWCTokenizer & next,
        const RWCString & fileName,
        const RWCString & dataLine,
d152 1
a152 1
        const RWBoolean Mandatory,
d164 3
a166 3
          RWCTokenizer & next,
          const RWCString & fileName,
          const RWCString & dataLine,
d168 1
a168 1
          const RWBoolean Mandatory = TRUE,
d173 1
a173 1
RWBoolean
d180 1
a180 1
                 ofstream & theStream,   // output stream (already opened)
d194 2
a195 2
    RWCTokenizer & next,
    const RWCString & fileName,
d197 1
a197 1
    const RWCString & dataLine,
d202 1
a202 1
                   ofstream & theStream,    // output stream (already opened)
d208 1
a208 1
                    ofstream & theStream,   // output stream (already opened)
d219 1
a219 1
RWCString
d221 1
a221 1
                 RWCTokenizer & next,
d223 2
a224 2
                 const RWCString & fileName,
                 const RWCString & dataLine,
d230 1
a230 1
appendToTheSetOfIllegalCharacters( const RWCString newIllegalChar );
d238 2
a239 2
// 1 = an illegal character was found (contains = TRUE)
// 0 = no illegal characters were found (contains = FALSE)
d241 1
a241 1
containsIllegalCharacters (const RWCString theString);
d244 1
a244 1
setGlobalCalendarFormat(const RWCString & calendarFormat);
d246 1
a246 1
RWCString
d250 1
a250 1
RWDate
d252 1
a252 1
    const RWCString & dateString,
d293 1
a293 1
  LgFrOrderedVectorRWCString setOfIllegalCharacters_ ;
d298 1
a298 1
  RWCString globalCalendarFormat_;  
@


1.1.1.1
log
@Import sce
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a3 4
// RW2STL - inserted:
#include <string>
// End of RW2STL - inserted includes.

d7 2
a8 1
//#include <iostream.h>
d16 1
a16 1
#include <fstream>
d19 1
d29 1
a29 1
           std::string & pdf_PartName,   // pdf_PartName to be returned
d34 3
a36 3
           std::ifstream & inFile,             // An open stream
           const std::string & fileName,  // For error messaging
           std::string& dataLine,
d46 1
a46 1
			    std::string & pdf_OperationName,   // pdf_PartName to be returned
d49 3
a51 3
			    std::ifstream & inFile,             // An open stream
			    const std::string & fileName,  // For error messaging
			    std::string & dataLine,
d60 1
a60 1
           std::string & pdf_OperationName,   // pdf_PartName to be returned
d65 3
a67 3
           std::ifstream & inFile,             // An open stream
           const std::string & fileName,  // For error messaging
           std::string & dataLine,
d75 1
a75 1
           std::string & pdf_PartName,   // pdf_PartName to be returned
d81 3
a83 3
           std::ifstream & inFile,             // An open stream
           const std::string & fileName,  // For error messaging
           std::string & dataLine,
d92 1
a92 1
         std::string & pdf_OperationName,   // pdf_OperationName to be returned
d98 3
a100 3
         std::ifstream & inFile,             // An open stream
         const std::string & fileName,  // For error messaging
         std::string & dataLine,
d108 1
a108 1
         std::string & pdf_PartName,            // pdf_PartName to be returned
d110 3
a112 3
         std::ifstream & inFile,                    // An open stream
         const std::string & fileName,          // for messaging
         std::string& dataLine,
d125 1
a125 1
         std::string & pdf_OperationName,       // pdf_OperationName to be returned
d127 3
a129 3
         std::ifstream & inFile,                    // An open stream
         const std::string & fileName,          // for messaging
         std::string& dataLine,
d146 3
a148 3
        SCETokenizer & next,
        const std::string & fileName,
        const std::string & dataLine,
d150 1
a150 1
        const bool Mandatory,
d162 3
a164 3
          SCETokenizer & next,
          const std::string & fileName,
          const std::string & dataLine,
d166 1
a166 1
          const bool Mandatory = true,
d171 1
a171 1
bool
d178 1
a178 1
                 std::ofstream & theStream,   // output stream (already opened)
d192 2
a193 2
    SCETokenizer & next,
    const std::string & fileName,
d195 1
a195 1
    const std::string & dataLine,
d200 1
a200 1
                   std::ofstream & theStream,    // output stream (already opened)
d206 1
a206 1
                    std::ofstream & theStream,   // output stream (already opened)
d217 1
a217 1
std::string
d219 1
a219 1
                 SCETokenizer & next,
d221 2
a222 2
                 const std::string & fileName,
                 const std::string & dataLine,
d228 1
a228 1
appendToTheSetOfIllegalCharacters( const std::string newIllegalChar );
d236 2
a237 2
// 1 = an illegal character was found (contains = true)
// 0 = no illegal characters were found (contains = false)
d239 1
a239 1
containsIllegalCharacters (const std::string theString);
d242 1
a242 1
setGlobalCalendarFormat(const std::string & calendarFormat);
d244 1
a244 1
std::string
d248 1
a248 1
SCEDate
d250 1
a250 1
    const std::string & dateString,
d291 1
a291 1
  LgFrStringVector setOfIllegalCharacters_ ;
d296 1
a296 1
  std::string globalCalendarFormat_;  
@


1.1.1.1.14.2
log
@New LgFrDatetime class
@
text
@d250 1
a250 1
LgFrDatetime
@


