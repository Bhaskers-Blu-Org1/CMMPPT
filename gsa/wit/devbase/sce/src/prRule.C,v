head	1.4;
access;
symbols
	sce_5_01_20080919:1.2;
locks; strict;
comment	@ * @;


1.4
date	2010.03.16.17.56.23;	author ervolina;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.28.14.22.31;	author ervolina;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.24.15.17.53;	author ervolina;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.24.14.04.43;	author ervolina;	state Exp;
branches;
next	;


desc
@@


1.4
log
@pegging and sub enablement for 6.1
@
text
@
// RW2STL - inserted:
#include <string>
#include <iostream>
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL - inserted includes.
#include <stdio.h>
#include <mcl/src/mcl.h>
#include <stdlib.h>
#include <assert.h>
#include <sce/src/prRule.h>
// #include <sce/src/mPlantH.h>
// #include <wit/src/wit.h>




// set/gets 
void LgFrScePriorityRule::partName(const std::string & partName) {partName_ = partName;}
std::string LgFrScePriorityRule::partName() const {return partName_;}

void LgFrScePriorityRule::sourceLoc(const std::string & sourceLoc) {sourceLoc_ = sourceLoc;}
std::string LgFrScePriorityRule::sourceLoc() const {return sourceLoc_;}

void LgFrScePriorityRule::customerLoc(const std::string & customerLoc) {customerLoc_ = customerLoc;}
std::string LgFrScePriorityRule::customerLoc() const {return customerLoc_;}

void LgFrScePriorityRule::demandClass(const std::string & demandClass) {demandClass_ = demandClass;}
std::string LgFrScePriorityRule::demandClass() const {return demandClass_;}

void LgFrScePriorityRule::demandLevel(const std::string & demandLevel) {demandLevel_ = demandLevel;}
std::string LgFrScePriorityRule::demandLevel() const {return demandLevel_;}

void LgFrScePriorityRule::partClass(const std::string & partClass) {partClass_ = partClass;}
std::string LgFrScePriorityRule::partClass() const {return partClass_;}

void LgFrScePriorityRule::effect_start(const std::string & effect_start) {effect_start_ = effect_start;}
std::string LgFrScePriorityRule::effect_start() const {return effect_start_;}

void LgFrScePriorityRule::effect_end(const std::string & effect_end) {effect_end_ = effect_end;}
std::string LgFrScePriorityRule::effect_end() const {return effect_end_;}

void LgFrScePriorityRule::priority(int priority) {priority_ = priority;}
int LgFrScePriorityRule::priority() const {return priority_;}

void LgFrScePriorityRule::startPeriod(int startPeriod) {startPeriod_ = startPeriod;}
int LgFrScePriorityRule::startPeriod() const {return startPeriod_;}

void LgFrScePriorityRule::endPeriod(int endPeriod) {endPeriod_ = endPeriod;}
int LgFrScePriorityRule::endPeriod() const {return endPeriod_;}

void LgFrScePriorityRule::isPartAll(bool isPartAll) {isPartAll_ = isPartAll;}
bool LgFrScePriorityRule::isPartAll() const {return isPartAll_;}

void LgFrScePriorityRule::isSourceLocAll(bool isSourceLocAll) {isSourceLocAll_ = isSourceLocAll;}
bool LgFrScePriorityRule::isSourceLocAll() const {return isSourceLocAll_;}

void LgFrScePriorityRule::isCustomerLocAll(bool isCustomerLocAll) {isCustomerLocAll_ = isCustomerLocAll;}
bool LgFrScePriorityRule::isCustomerLocAll() const {return isCustomerLocAll_;}

void LgFrScePriorityRule::isDemandClassAll(bool isDemandClassAll) {isDemandClassAll_ = isDemandClassAll;}
bool LgFrScePriorityRule::isDemandClassAll() const {return isDemandClassAll_;}

void LgFrScePriorityRule::isDemandLevelAll(bool isDemandLevelAll) {isDemandLevelAll_ = isDemandLevelAll;}
bool LgFrScePriorityRule::isDemandLevelAll() const {return isDemandLevelAll_;}

void LgFrScePriorityRule::isPartClassAll(bool isPartClassAll) {isPartClassAll_ = isPartClassAll;}
bool LgFrScePriorityRule::isPartClassAll() const {return isPartClassAll_;}


// FINISH_ME:
//     Should paramaterize these fields
//



  // print the allocLet
  void
    LgFrScePriorityRule::print()
  {
    std::cout << this->traceString();
  }
  
  // create a TRACE STRING
  std::string
    LgFrScePriorityRule::traceString()
    {
      std::string ts;
      ts = "\"" 
	+ partName_ + "\",\""
	+ sourceLoc_ + "\",\""
	+ customerLoc_ + "\",\""
	+ demandClass_ + "\",\""
	+ demandLevel_ + "\",\""
	+ partClass_ + "\",\""
	+ effect_start_ + "\",\""
	+ effect_end_ + "\","
	+ sce::stringFrom((long) priority_) + ",\""
	+ sce::stringFrom((long) startPeriod_) + "," 
	+ sce::stringFrom((long) endPeriod_) + "\n";
      
      return ts;
    }

 
 

  // preferred constructor 
  LgFrScePriorityRule::LgFrScePriorityRule(
				   std::string & partName,
				   std::string & sourceLoc,
				   std::string & customerLoc,
				   std::string & demandClass,
				   std::string & demandLevel,
				   std::string & partClass,
				   std::string & effect_start,
				   std::string & effect_end,
				   int           priority,
				   int           startPeriod,
				   int           endPeriod,
				   bool isPartAll,
				   bool isSourceLocAll,
				   bool isCustomerLocAll,
				   bool isDemandClassAll,
				   bool isDemandLevelAll,
				   bool isPartClassAll)
    : 
  partName_(partName),
    sourceLoc_(sourceLoc),
    customerLoc_(customerLoc),
    demandClass_(demandClass),
    demandLevel_(demandLevel),
    partClass_(partClass),
    effect_start_(effect_start),
    effect_end_(effect_end),
    priority_(priority),
    startPeriod_(startPeriod),
    endPeriod_(endPeriod),
    isPartAll_(isPartAll),
    isSourceLocAll_(isSourceLocAll),
    isCustomerLocAll_(isCustomerLocAll),
    isDemandClassAll_(isDemandClassAll),
    isDemandLevelAll_(isDemandLevelAll),
    isPartClassAll_(isPartClassAll)
    {
      // nothing to do
    }
 
 
 
 
  // default constructor
  LgFrScePriorityRule::LgFrScePriorityRule()
    :
  partName_(),
    sourceLoc_(),
    customerLoc_(),
    demandClass_(),
    demandLevel_(),
    partClass_(),
    effect_start_(),
    effect_end_(),
    priority_(0),
    startPeriod_(0),
    endPeriod_(0),
    isPartAll_(1),
    isSourceLocAll_(1),
    isCustomerLocAll_(1),
    isDemandClassAll_(1),
    isDemandLevelAll_(1),
    isPartClassAll_(1)
      {
	// nothing else to do
      }
 
 
  // destructor
  LgFrScePriorityRule::~LgFrScePriorityRule()
    {
      // do nothing
    }
 
 
  // assignment operator
  LgFrScePriorityRule&
    LgFrScePriorityRule::operator=(const LgFrScePriorityRule& rhs)
    {
      if (this != &rhs) {		// Check for assignment to self
	partName_ = rhs.partName_;
	sourceLoc_ = rhs.sourceLoc_;
	customerLoc_ = rhs.customerLoc_;
	demandClass_ = rhs.demandClass_;
	demandLevel_ = rhs.demandLevel_;
	partClass_ = rhs.partClass_;
	effect_start_ = rhs.effect_start_;
	effect_end_ = rhs.effect_end_;
	priority_ = rhs.priority_;
	startPeriod_ = rhs.startPeriod_;
	endPeriod_ = rhs.endPeriod_;
	isPartAll_ = rhs.isPartAll_;
	isSourceLocAll_ = rhs.isSourceLocAll_;
	isCustomerLocAll_ = rhs.isCustomerLocAll_;
	isDemandClassAll_ = rhs.isDemandClassAll_;
	isDemandLevelAll_ = rhs.isDemandLevelAll_;
	isPartClassAll_ = rhs.isPartClassAll_;
      }
      return *this;
    }
 
  // copy constructor 
  LgFrScePriorityRule::LgFrScePriorityRule(const LgFrScePriorityRule& source)  
    : 
  partName_(source.partName_),
    sourceLoc_(source.sourceLoc_),
    customerLoc_(source.customerLoc_),
    demandClass_(source.demandClass_),
    demandLevel_(source.demandLevel_),
    partClass_(source.partClass_),
    effect_start_(source.effect_start_),
    effect_end_(source.effect_end_),
    priority_(source.priority_),
    startPeriod_(source.startPeriod_),
    endPeriod_(source.endPeriod_),
    isPartAll_(source.isPartAll_),
    isSourceLocAll_(source.isSourceLocAll_),
    isCustomerLocAll_(source.isCustomerLocAll_),
    isDemandClassAll_(source.isDemandClassAll_),
    isDemandLevelAll_(source.isDemandLevelAll_),
    isPartClassAll_(source.isPartClassAll_)
{
  // nothing to do
}
 
    
    

@


1.3
log
@some SCE 6 enhancements for 1/23 Beta release
@
text
@d52 24
d120 7
a126 1
				   int           endPeriod)
d138 7
a144 1
    endPeriod_(endPeriod)
d165 7
a171 1
    endPeriod_(0)
d200 6
d223 7
a229 1
    endPeriod_(source.endPeriod_)
@


1.2
log
@fixed some minor compiler warnings
@
text
@d1 1
a1 1
\
d18 10
a27 7
  // set/gets 
  void LgFrScePriorityRule::partName(const std::string & partName) {partName_ = partName;}
  std::string LgFrScePriorityRule::partName() const {return partName_;}
  void LgFrScePriorityRule::sourceLoc(const std::string & sourceLoc) {sourceLoc_ = sourceLoc;}
  std::string LgFrScePriorityRule::sourceLoc() const {return sourceLoc_;}
  void LgFrScePriorityRule::customerLoc(const std::string & customerLoc) {customerLoc_ = customerLoc;}
  std::string LgFrScePriorityRule::customerLoc() const {return customerLoc_;}
d30 1
d32 19
a50 13
  std::string LgFrScePriorityRule::demandLevel() const {return demandLevel_;}
  void LgFrScePriorityRule::partClass(const std::string & partClass) {partClass_ = partClass;}
  std::string LgFrScePriorityRule::partClass() const {return partClass_;}
  void LgFrScePriorityRule::effect_start(const std::string & effect_start) {effect_start_ = effect_start;}
  std::string LgFrScePriorityRule::effect_start() const {return effect_start_;}
  void LgFrScePriorityRule::effect_end(const std::string & effect_end) {effect_end_ = effect_end;}
  std::string LgFrScePriorityRule::effect_end() const {return effect_end_;}
  void LgFrScePriorityRule::priority(int priority) {priority_ = priority;}
  int LgFrScePriorityRule::priority() const {return priority_;}
  void LgFrScePriorityRule::startPeriod(int startPeriod) {startPeriod_ = startPeriod;}
  int LgFrScePriorityRule::startPeriod() const {return startPeriod_;}
  void LgFrScePriorityRule::endPeriod(int endPeriod) {endPeriod_ = endPeriod;}
  int LgFrScePriorityRule::endPeriod() const {return endPeriod_;}
@


1.1
log
@sce5 beta with prioriity manager, multiattribute demand, and dated records
@
text
@d37 1
a37 1
  void LgFrScePriorityRule::startPeriod(int priority) {startPeriod_ = startPeriod;}
d39 1
a39 1
  void LgFrScePriorityRule::endPeriod(int priority) {endPeriod_ = endPeriod;}
@

