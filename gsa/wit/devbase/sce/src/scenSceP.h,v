head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_20_20051222:1.2
	sce_4_10_30050426:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.58;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.18.36.54;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.54;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.43.19;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LgFrScenarioForSceSMARTPTRH
#define LgFrScenarioForSceSMARTPTRH

#include <scenario/src/refCount.h>

// forward declaration
class LgFrScenarioSmartPointerToConst;
class LgFrScenarioSmartPointer;
class LgFrScenarioForSce;


class LgFrScenarioForSceSmartPointerToConst
{

public:
    LgFrScenarioForSceSmartPointerToConst();
    LgFrScenarioForSceSmartPointerToConst(LgFrScenarioForSce*);
    LgFrScenarioForSceSmartPointerToConst(LgFrScenarioForSce*, LgFrReferenceCount&);
    LgFrScenarioForSceSmartPointerToConst(LgFrScenarioSmartPointerToConst);
    virtual ~LgFrScenarioForSceSmartPointerToConst();
    LgFrScenarioForSceSmartPointerToConst(const LgFrScenarioForSceSmartPointerToConst&);
    LgFrScenarioForSceSmartPointerToConst deepCopy() const;
    LgFrScenarioForSceSmartPointerToConst& operator=(const LgFrScenarioForSceSmartPointerToConst&);
    bool operator==(const LgFrScenarioForSceSmartPointerToConst&) const;
    bool operator!=(const LgFrScenarioForSceSmartPointerToConst&) const;
    const LgFrScenarioForSce& operator*() const;
    const LgFrScenarioForSce * const operator->() const;
    operator LgFrScenarioSmartPointerToConst () const;

    bool unique() const;
    bool null() const;
    static void test();

protected:
    LgFrScenarioForSce* pointer_; // should make this const but I want to use
                            //  it for the LgFrScenarioForSceSmartPointer class
			    //  (the non-const class) to inherit this member.
			    //  The way it's been set up only const stuff
                            //  is being returned so we're OK.
    LgFrReferenceCount count_;

};


class LgFrScenarioForSceSmartPointer : public LgFrScenarioForSceSmartPointerToConst
{

public:
    LgFrScenarioForSceSmartPointer();
    LgFrScenarioForSceSmartPointer(LgFrScenarioForSce*);
    LgFrScenarioForSceSmartPointer(LgFrScenarioForSce*, LgFrReferenceCount&);
    LgFrScenarioForSceSmartPointer(LgFrScenarioSmartPointerToConst);
    ~LgFrScenarioForSceSmartPointer();
    LgFrScenarioForSceSmartPointer(const LgFrScenarioForSceSmartPointer&);
    LgFrScenarioForSceSmartPointer(LgFrScenarioForSceSmartPointerToConst);
    LgFrScenarioForSceSmartPointer deepCopy();
    LgFrScenarioForSceSmartPointer& operator=(const LgFrScenarioForSceSmartPointer&);
    LgFrScenarioForSceSmartPointer& operator=(LgFrScenarioForSceSmartPointerToConst);
    bool operator==(const LgFrScenarioForSceSmartPointer&) const;
    bool operator!=(const LgFrScenarioForSceSmartPointer&) const;

    // these are really dangerous as they circumvent the notion
    //  of using smart pointers anyways.  you had better be using
    //  these just to call another method
    LgFrScenarioForSce& operator*();
    const LgFrScenarioForSce& operator*() const;
    LgFrScenarioForSce* const operator->();
    const LgFrScenarioForSce* const operator->() const;
    operator LgFrScenarioSmartPointerToConst () const;
    operator LgFrScenarioSmartPointer ();

    bool unique() const;
    bool null() const;
    static void test();
};

#endif

@


1.1
log
@Initial revision
@
text
@a3 1
#include <rw/defs.h>
d24 2
a25 2
    RWBoolean operator==(const LgFrScenarioForSceSmartPointerToConst&) const;
    RWBoolean operator!=(const LgFrScenarioForSceSmartPointerToConst&) const;
d30 2
a31 2
    RWBoolean unique() const;
    RWBoolean null() const;
d59 2
a60 2
    RWBoolean operator==(const LgFrScenarioForSceSmartPointer&) const;
    RWBoolean operator!=(const LgFrScenarioForSceSmartPointer&) const;
d72 2
a73 2
    RWBoolean unique() const;
    RWBoolean null() const;
@


1.1.1.1
log
@Import sce
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d4 1
d25 2
a26 2
    bool operator==(const LgFrScenarioForSceSmartPointerToConst&) const;
    bool operator!=(const LgFrScenarioForSceSmartPointerToConst&) const;
d31 2
a32 2
    bool unique() const;
    bool null() const;
d60 2
a61 2
    bool operator==(const LgFrScenarioForSceSmartPointer&) const;
    bool operator!=(const LgFrScenarioForSceSmartPointer&) const;
d73 2
a74 2
    bool unique() const;
    bool null() const;
@

