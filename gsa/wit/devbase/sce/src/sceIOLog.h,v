head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_20_20051222:1.2
	sce_4_10_30050426:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.57;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.18.36.54;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.54;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.43.18;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.14.31;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <sce/src/sceParam.h>

//----------------------------------------------------------------------------
//  Class: LgFrSceIOLogMgr
//
//  What is it: It is simply a class that is responsible for creating the
//              input and output logs for sce. It reports the number of lines
//              that are read in from each input flat file and whether each
//              line is good,bad,or comment/blank. It reports the number of
//              lines written into each output file, and also for certain
//              output files, whether or not there may be an error after 
//              doing a simple check against a corresponding input file or 
//              set of input files.
//
//  This could have easily been implemented as part of another class, but
//  for the sake of readability and to make debugging easier, it seemed more
//  logical to make another class.
//
//  For the time being, this IOLogManager is part of the FlatFileManager, but
//  the only important issue is that there should be an IOLogManager for each
//  scenario.
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
#ifndef LGFRSCEIOLOGMGR_H
#define LGFRSCEIOLOGMGR_H

// RW2STL - inserted:
#include <string>
// End of RW2STL - inserted includes.

struct fileNode {
  std::string fileName;
  std::string parameterName;
  long count;
  long good;
  long bad;
  long comm;
  long tot;
  struct fileNode * next;
};

enum whichName {IN_FILE, OUT_FILE, IN_PARAM, OUT_PARAM};
// there are times when we want to search through different sets of names
// ...these are just flags used by the 'getNode' method

//----------------------------------------------------------------------------



// class that takes care of IO Log printing for SCE
class LgFrSceIOLogMgr {

public:

  fileNode* getNode(const std::string theName, whichName typeName) const;
  void addNode(const std::string theName, whichName typeName);

  void resetInputLog();
  void resetOutputLog();

  void updateNode(const std::string fileName,
		  long checkRec,
		  long goodRec,
		  long badRec,
		  long commRec,
		  long totRec,
		  whichName typeName);
  void clearAll();

  // should return the number of good input records read by sce
  // corresponding to the output file of the given name
  // ...it also prints into the output log file
  long totalInCount(const std::string fileOut, std::ofstream& outBuffer);

  void copySetOfParams(LgFrSceSetOfParameters & theSetOfParams);

  int
  printInputLog(  const std::string filein,    //records FROM "filein"
		  long totRec,      //total number of records
		  long goodRec,     //number of "good" records
		  long badRec,      //number of "bad" records
		  long commRec,     //number of comment/blank records
		  long checkRec);   //used for checking against output
  int
  printOutputLog(const std::string fileout,    //records going TO "fileout"
		 long totRec,             //total number of records written
		 long zeroRec,            //number of ommitted zero Vector recs
		 long checkRec);          //used for checking against input


  LgFrSceIOLogMgr();  // Default Constructor
		   
  LgFrSceIOLogMgr(const std::string inputLogName, const std::string outputLogName);
  
  ~LgFrSceIOLogMgr();

  // Assignment operator
  LgFrSceIOLogMgr& operator=(const LgFrSceIOLogMgr& rhs);

private:

  std::string InputLogName_;
  std::string OutputLogName_;

  // this holds number of rejected records from input files
  long numBadRecords_;

  LgFrSceSetOfParameters setOfParameters_;

  fileNode* inFileHead_;
  fileNode* outFileHead_;

  // going to use as a look-up table -- these will hold *parameter* names
  // of files we may want to know about
  static std::string inFileArray_[];
  static std::string outFileArray_[];
};


#endif
@


1.1
log
@Initial revision
@
text
@d2 2
a3 2
#include <iostream.h>
#include <fstream.h>
a4 1
#include <rw/cstring.h>
d31 4
d36 2
a37 2
  RWCString fileName;
  RWCString parameterName;
d59 2
a60 2
  fileNode* getNode(const RWCString theName, whichName typeName) const;
  void addNode(const RWCString theName, whichName typeName);
d65 1
a65 1
  void updateNode(const RWCString fileName,
d77 1
a77 1
  long totalInCount(const RWCString fileOut, ofstream& outBuffer);
d82 1
a82 1
  printInputLog(  const RWCString filein,    //records FROM "filein"
d89 1
a89 1
  printOutputLog(const RWCString fileout,    //records going TO "fileout"
d97 1
a97 1
  LgFrSceIOLogMgr(const RWCString inputLogName, const RWCString outputLogName);
d106 2
a107 2
  RWCString InputLogName_;
  RWCString OutputLogName_;
d119 2
a120 2
  static RWCString inFileArray_[];
  static RWCString outFileArray_[];
@


1.1.1.1
log
@Import sce
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d3 1
a3 1
#include <fstream>
d5 1
a31 4
// RW2STL - inserted:
#include <string>
// End of RW2STL - inserted includes.

d33 2
a34 2
  std::string fileName;
  std::string parameterName;
d56 2
a57 2
  fileNode* getNode(const std::string theName, whichName typeName) const;
  void addNode(const std::string theName, whichName typeName);
d62 1
a62 1
  void updateNode(const std::string fileName,
d74 1
a74 1
  long totalInCount(const std::string fileOut, std::ofstream& outBuffer);
d79 1
a79 1
  printInputLog(  const std::string filein,    //records FROM "filein"
d86 1
a86 1
  printOutputLog(const std::string fileout,    //records going TO "fileout"
d94 1
a94 1
  LgFrSceIOLogMgr(const std::string inputLogName, const std::string outputLogName);
d103 2
a104 2
  std::string InputLogName_;
  std::string OutputLogName_;
d116 2
a117 2
  static std::string inFileArray_[];
  static std::string outFileArray_[];
@


1.1.1.1.14.2
log
@Went all the way to std::cout
@
text
@d2 1
a2 1
#include <iostream>
@


