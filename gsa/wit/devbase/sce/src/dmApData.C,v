head	1.14;
access;
symbols
	sce_5_01_20080919:1.12
	latest_sce_4_20_20060523:1.10.0.4
	sce_4_20_20060523:1.10
	latest_sce4_20_OSL:1.10.0.2
	sce_4_20_OSL:1.10
	sce_4_20_20051222:1.10
	sce_4_10_30050426:1.9
	sce_4_05_20040511:1.8
	sce_4_00_20040201:1.6
	nextGenBranch:1.4.0.8
	nextGenRoot:1.4
	sce_3_30_20030627:1.4
	EndRw-branch:1.4.0.6
	Root-of-EndRw:1.4
	EndWitRw-branch:1.4.0.4
	Root-of-EndWitRw:1.4
	RwToStl-branch:1.4.0.2
	Root-of-RwToStl:1.4
	latest_sce_3_10_20010924:1.3.0.2
	sce_3_10_20010924:1.3
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2010.03.13.18.53.04;	author ervolina;	state Exp;
branches;
next	1.13;

1.13
date	2009.12.08.13.58.34;	author ervolina;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.23.19.07.11;	author ervolina;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.29.20.03.32;	author ervolina;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.02.18.40.00;	author ervolina;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.15.20.45.00;	author ervolina;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.07.19.58.32;	author ervolina;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.06.21.53.47;	author ervolina;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.22.02.47.47;	author ervolina;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.10.17.56.10;	author ervolina;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.18.16.58.12;	author ervolina;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.24.16.38.13;	author ervolina;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.14.21.00.59;	author ervolina;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.18.36.49;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.18.36.49;	author wit;	state Exp;
branches;
next	;


desc
@@


1.14
log
@6.1 prep commit ... many things in here
@
text
@\
// file: dmApData.C
// author: robin

#include <sce/src/dmApData.h>
#include <assert.h>



LgFrSceAppData *
LgFrSceDemandAppData::clone()
const
{
  LgFrSceDemandAppData * temp = new LgFrSceDemandAppData(*this);

  // nothing to deep copy

  return temp;
}



// always use this constructor
LgFrSceDemandAppData::LgFrSceDemandAppData(int hasDemandVolBeenSet,
					   int hasMinDemandVolBeenSet,
                                           size_t nPeriods, 
					   float backlogYieldDefault)
  :   aboveMinDemandVol_ (nPeriods, 0.0),
  backlogYield_ (nPeriods, backlogYieldDefault),
  demandVol_ (nPeriods, 0.0),
  allocVol_ (nPeriods, 0.0),
  pipPriority_ (nPeriods, 0.0),
  hasDemandVolBeenSet_(hasDemandVolBeenSet),
  hasMinDemandVolBeenSet_(hasMinDemandVolBeenSet),
  doesDemandHaveNegativeValues_(0),
  requestDate_(""),
  PIPConsVolSched_(),
  PIPSupplyVolSched_(),
  PIPExecVolSched_(),
  PIPInterplantVolSched_(),
  PIPProdVolSched_(),
  PIPSideVolSched_()
  
{
  // all the work is done in initializer
}


// a better constructor 
LgFrSceDemandAppData::LgFrSceDemandAppData(size_t nPeriods, float backlogYieldDefault)
  :   aboveMinDemandVol_ (nPeriods, 0.0),
  backlogYield_ (nPeriods, backlogYieldDefault),
  demandVol_ (nPeriods, 0.0),
  allocVol_ (nPeriods, 0.0),
  pipPriority_ (nPeriods, 0.0),
  hasDemandVolBeenSet_(0),
  hasMinDemandVolBeenSet_(0),
  doesDemandHaveNegativeValues_(0),
  requestDate_(""),
  PIPConsVolSched_(),
  PIPSupplyVolSched_(),
  PIPExecVolSched_(),
  PIPInterplantVolSched_(),
  PIPProdVolSched_(),
  PIPSideVolSched_()

{
  // all the work is done in initializer
}

// default constructor 
LgFrSceDemandAppData::LgFrSceDemandAppData()
  :   aboveMinDemandVol_ (),
  backlogYield_ (),
  demandVol_ (),
  allocVol_ (),
  pipPriority_ (),
  hasDemandVolBeenSet_(0),
  hasMinDemandVolBeenSet_(0),
  doesDemandHaveNegativeValues_(0),
  requestDate_(""),
  PIPConsVolSched_(),
  PIPSupplyVolSched_(),
  PIPExecVolSched_(),
  PIPInterplantVolSched_(),
  PIPProdVolSched_(),
  PIPSideVolSched_()

{
  assert (1 == 0); // don't use this constructor
}


// get "doesDemandHaveNegativeValues"
int
LgFrSceDemandAppData::doesDemandHaveNegativeValues() const
{
  return doesDemandHaveNegativeValues_;
}

// set "doesDemandHaveNegativeValues"
void
LgFrSceDemandAppData::doesDemandHaveNegativeValues(int doesDemandHaveNegativeValues)
{
  doesDemandHaveNegativeValues_ = doesDemandHaveNegativeValues;
}


// get "hasDemandVolBeenSet"
int
LgFrSceDemandAppData::hasDemandVolBeenSet() const
{
  return hasDemandVolBeenSet_;
}

// set "hasDemandVolBeenSet"
void
LgFrSceDemandAppData::hasDemandVolBeenSet(int hasDemandVolBeenSet)
{
  hasDemandVolBeenSet_ = hasDemandVolBeenSet;
}

// get "hasMinDemandVolBeenSet"
int
LgFrSceDemandAppData::hasMinDemandVolBeenSet() const
{
  return hasMinDemandVolBeenSet_;
}

// set "hasMinDemandVolBeenSet"
void
LgFrSceDemandAppData::hasMinDemandVolBeenSet(int hasMinDemandVolBeenSet)
{
  hasMinDemandVolBeenSet_ = hasMinDemandVolBeenSet;
}




// get "above minimum demand" vols
const
LgFrTimeVecFloat&
LgFrSceDemandAppData::aboveMinDemandVol () const
{
  return aboveMinDemandVol_;
}

// set "above minimum demand" vols
void
LgFrSceDemandAppData::aboveMinDemandVol (const LgFrTimeVecFloat & amDemand)
{                                                  
  aboveMinDemandVol_ = amDemand ;
}

// get backlog yield
const
LgFrTimeVecFloat&  
LgFrSceDemandAppData::backlogYield () const
{
  return backlogYield_ ;
}

// set backlog yield
void
LgFrSceDemandAppData::backlogYield (const LgFrTimeVecFloat & bklgYld)
{
  backlogYield_ = bklgYld ;
}

// get demandVol
const
LgFrTimeVecFloat&  
LgFrSceDemandAppData::demandVol () const
{
  return demandVol_ ;
}

// set demandVol
void
LgFrSceDemandAppData::demandVol (const LgFrTimeVecFloat & dVol)
{
  demandVol_ = dVol ;
}

// get allocVol
const
LgFrTimeVecFloat&  
LgFrSceDemandAppData::allocVol () const
{
  return allocVol_ ;
}

// set allocVol
void
LgFrSceDemandAppData::allocVol (const LgFrTimeVecFloat & dVol)
{
  allocVol_ = dVol ;
}

// get pipPriority
const
LgFrTimeVecFloat&  
LgFrSceDemandAppData::pipPriority () const
{
  return pipPriority_ ;
}

// set pipPriority
void
LgFrSceDemandAppData::pipPriority (const LgFrTimeVecFloat & pP)
{
  pipPriority_ = pP ;
}


// get requestDate
const
std::string&  
LgFrSceDemandAppData::requestDate () const
{
  return requestDate_ ;
}

// set requestDate
void
LgFrSceDemandAppData::requestDate (const std::string & requestDate)
{
  requestDate_ = requestDate ;
}


// get 
LgFrSortingPartScheduleFloat &  
LgFrSceDemandAppData::PIPSched(int pegType)
{
  switch (pegType)
    {
    case PEG_TYPE_SUPPLY:
      return PIPSupplyVolSched_;
    case PEG_TYPE_CONSVOL:
      return PIPConsVolSched_;
    case PEG_TYPE_EXECVOL:
      return PIPExecVolSched_;
    case PEG_TYPE_INTERPLANT:
      return PIPInterplantVolSched_;
    case PEG_TYPE_PRODVOL:
      return PIPProdVolSched_;
    case PEG_TYPE_SIDEVOL:
      return PIPSideVolSched_;
    }
  
}




// get 
LgFrSortingPartScheduleFloat &  
LgFrSceDemandAppData::PIPConsVolSched()
{
  return PIPConsVolSched_;
}


// get 
LgFrSortingPartScheduleFloat &  
LgFrSceDemandAppData::PIPSupplyVolSched()
{
  return PIPSupplyVolSched_;
}



// get 
LgFrSortingPartScheduleFloat &  
LgFrSceDemandAppData::PIPExecVolSched()
{
  return PIPExecVolSched_;
}

// get 
LgFrSortingPartScheduleFloat &  
LgFrSceDemandAppData::  PIPInterplantVolSched()
{
  return PIPInterplantVolSched_;
}


// get 
LgFrSortingPartScheduleFloat &  
LgFrSceDemandAppData::PIPProdVolSched()
{
  return PIPProdVolSched_;
}

// get 
LgFrSortingPartScheduleFloat &  
LgFrSceDemandAppData::PIPSideVolSched()
{
  return PIPSideVolSched_;
}



// assignment operator
LgFrSceDemandAppData&
LgFrSceDemandAppData::operator=(const LgFrSceDemandAppData& rhs)

{
  if (this != &rhs) {		// Check for assignment to self
    aboveMinDemandVol_ = rhs.aboveMinDemandVol_;
    backlogYield_ = rhs.backlogYield_;
    demandVol_ = rhs.demandVol_;
    allocVol_ = rhs.allocVol_;
    pipPriority_ = rhs.pipPriority_;
    hasDemandVolBeenSet_ = rhs.hasDemandVolBeenSet_;
    hasMinDemandVolBeenSet_ = rhs.hasMinDemandVolBeenSet_;
    requestDate_ = rhs.requestDate_;
    PIPConsVolSched_ = rhs.PIPConsVolSched_;
    PIPSupplyVolSched_ = rhs.PIPSupplyVolSched_;
    PIPExecVolSched_ = rhs.PIPExecVolSched_;
    PIPInterplantVolSched_ = rhs.PIPInterplantVolSched_;
    PIPProdVolSched_ = rhs.PIPProdVolSched_;
    PIPSideVolSched_ = rhs.PIPSideVolSched_;

  }
  return *this;
}

// copy constructor 
LgFrSceDemandAppData::LgFrSceDemandAppData(const LgFrSceDemandAppData& source)
  :   aboveMinDemandVol_ (source.aboveMinDemandVol_),
  backlogYield_ (source.backlogYield_),
  demandVol_ (source.demandVol_),
  allocVol_ (source.allocVol_),
  pipPriority_ (source.pipPriority_),
  hasDemandVolBeenSet_ (source.hasDemandVolBeenSet_),
  hasMinDemandVolBeenSet_ (source.hasMinDemandVolBeenSet_),
  requestDate_ (source.requestDate_),
  PIPConsVolSched_ (source.PIPConsVolSched_),
  PIPSupplyVolSched_ (source.PIPSupplyVolSched_),
  PIPExecVolSched_ (source.PIPExecVolSched_),
  PIPInterplantVolSched_ (source.PIPInterplantVolSched_),
  PIPProdVolSched_ (source.PIPProdVolSched_),
  PIPSideVolSched_ (source.PIPSideVolSched_)

{
  // nothing to do
}

// destructor
LgFrSceDemandAppData::~LgFrSceDemandAppData()
{
  
}
@


1.13
log
@more fixes for 6.1
@
text
@d36 1
d59 1
d81 1
d216 40
d264 1
d318 1
d339 1
@


1.12
log
@Last commit for maxForAtp
@
text
@d308 1
a308 1
  // nothing to do, 
@


1.11
log
@added function to report interplantPeg from perspective of supplier location.   basically, this shifts the interplant peg earlier to accomodate interplant lead-times
@
text
@d1 1
a1 1

@


1.10
log
@First pass at sce 4.20 function.
@
text
@d39 1
d61 1
d82 1
d239 8
d277 1
d297 1
@


1.9
log
@preping for release 4.1
@
text
@d8 15
@


1.8
log
@added ProdVol from ProdVol Peg files
@
text
@d24 2
a25 1
  PIPProdVolSched_()
d45 2
a46 1
  PIPProdVolSched_()
d65 2
a66 1
  PIPProdVolSched_()
d226 6
d252 1
d270 2
a271 1
  PIPProdVolSched_ (source.PIPProdVolSched_)
@


1.7
log
@pip for LP engine
@
text
@d23 2
a24 1
  PIPExecVolSched_()
d43 2
a44 1
  PIPExecVolSched_()
d62 2
a63 1
  PIPExecVolSched_()
d216 6
d242 1
d259 2
a260 1
  PIPExecVolSched_ (source.PIPExecVolSched_)
@


1.6
log
@permanently replaced Concurrent Pegging with Post Implosion pegging.
Parameters stay the same though.
@
text
@d17 1
d36 1
d54 1
d173 14
d227 1
d244 1
@


1.5
log
@first level of PIP
@
text
@a19 2
  peggingConsVolSched_(),
  peggingExecVolSched_(),
a37 2
  peggingConsVolSched_(),
  peggingExecVolSched_(),
a54 2
  peggingConsVolSched_(),
  peggingExecVolSched_(),
a171 13
// get 
LgFrSortingPartScheduleFloat &  
LgFrSceDemandAppData::peggingConsVolSched()
{
  return peggingConsVolSched_;
}

// get 
LgFrSortingPartScheduleFloat &  
LgFrSceDemandAppData::peggingExecVolSched()
{
  return peggingExecVolSched_;
}
a211 2
    peggingConsVolSched_ = rhs.peggingConsVolSched_;
    peggingExecVolSched_ = rhs.peggingExecVolSched_;
a227 2
  peggingConsVolSched_ (source.peggingConsVolSched_),
  peggingExecVolSched_ (source.peggingExecVolSched_),
a240 2


@


1.4
log
@execVol pegging
@
text
@d21 4
a24 1
  peggingExecVolSched_()
d41 4
a44 1
  peggingExecVolSched_()
d60 5
a64 1
  peggingExecVolSched_()
d192 26
d233 4
d250 5
a254 1
  peggingExecVolSched_ (source.peggingExecVolSched_)
d264 2
@


1.3
log
@3.10 pegging capability
@
text
@d14 9
a22 7
      backlogYield_ (nPeriods, backlogYieldDefault),
      demandVol_ (nPeriods, 0.0),
      allocVol_ (nPeriods, 0.0),
      hasDemandVolBeenSet_(hasDemandVolBeenSet),
      hasMinDemandVolBeenSet_(hasMinDemandVolBeenSet),
      doesDemandHaveNegativeValues_(0),
      peggingConsVolSched_()
d31 9
a39 7
      backlogYield_ (nPeriods, backlogYieldDefault),
      demandVol_ (nPeriods, 0.0),
      allocVol_ (nPeriods, 0.0),
      hasDemandVolBeenSet_(0),
      hasMinDemandVolBeenSet_(0),
      doesDemandHaveNegativeValues_(0),
      peggingConsVolSched_()
d47 8
a54 7
      backlogYield_ (),
      demandVol_ (),
      allocVol_ (),
      hasDemandVolBeenSet_(0),
      hasMinDemandVolBeenSet_(0),
      doesDemandHaveNegativeValues_(0),
      peggingConsVolSched_()
d175 6
d196 1
d204 7
a210 6
      backlogYield_ (source.backlogYield_),
      demandVol_ (source.demandVol_),
      allocVol_ (source.allocVol_),
      hasDemandVolBeenSet_ (source.hasDemandVolBeenSet_),
      hasMinDemandVolBeenSet_ (source.hasMinDemandVolBeenSet_),
      peggingConsVolSched_ (source.peggingConsVolSched_)
@


1.2
log
@Preliminary Commit for release 3.10 ... still in development!!!!
@
text
@d19 2
a20 1
      doesDemandHaveNegativeValues_(0)
d34 2
a35 1
      doesDemandHaveNegativeValues_(0)
d48 2
a49 1
      doesDemandHaveNegativeValues_(0)
d162 10
d184 1
d196 2
a197 1
      hasMinDemandVolBeenSet_ (source.hasMinDemandVolBeenSet_)
@


1.1
log
@Initial revision
@
text
@d1 1
d16 1
d30 1
d43 1
d143 15
d168 1
d180 1
@


1.1.1.1
log
@Import sce
@
text
@@
