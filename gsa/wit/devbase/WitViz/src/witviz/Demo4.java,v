head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2008.11.19.16.07.40;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial checkin
@
text
@/*
 * Created on Nov 4, 2004
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package witviz;

import org.eclipse.draw2d.ChopboxAnchor;
import org.eclipse.draw2d.ColorConstants;
import org.eclipse.draw2d.Figure;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Label;
import org.eclipse.draw2d.LightweightSystem;
import org.eclipse.draw2d.LineBorder;
import org.eclipse.draw2d.MidpointLocator;
import org.eclipse.draw2d.MouseEvent;
import org.eclipse.draw2d.MouseListener;
import org.eclipse.draw2d.MouseMotionListener;
import org.eclipse.draw2d.PolygonDecoration;
import org.eclipse.draw2d.PolylineConnection;
import org.eclipse.draw2d.RectangleFigure;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;

public class Demo4 {

public static void main(String args[]){
      Shell shell = new Shell();
      shell.setSize(350,350);
      shell.open();
      shell.setText("Demo 4");
      LightweightSystem lws = new LightweightSystem(shell);
      IFigure panel = new Figure();
      lws.setContents(panel);
      RectangleFigure
            node1 = new RectangleFigure(),
            node2 = new RectangleFigure();
      node1.setBackgroundColor(ColorConstants.red);
      node2.setBackgroundColor(ColorConstants.blue);
      node2.setLocation(new Point(100,100));

      PolylineConnection conn = new PolylineConnection();
      conn.setSourceAnchor(new ChopboxAnchor(node1));
      conn.setTargetAnchor(new ChopboxAnchor(node2));
      conn.setTargetDecoration(new PolygonDecoration());

      Label label = new Label("Midpoint");
      label.setOpaque(true);
      label.setBackgroundColor(ColorConstants.buttonLightest);
      label.setBorder(new LineBorder());
      conn.add(label, new MidpointLocator(conn, 0));

      panel.add(node1);
      panel.add(node2);
      panel.add(conn);
      new Dragger(node1);
      new Dragger(node2);
      Display display = Display.getDefault();
      while (!shell.isDisposed()) {
            if (!display.readAndDispatch())
                  display.sleep ();
}

}
static class Dragger extends MouseMotionListener.Stub implements MouseListener {
      public Dragger(IFigure figure){
            figure.addMouseMotionListener(this);
            figure.addMouseListener(this);
      }
      Point last;
      public void mouseReleased(MouseEvent e){}
      public void mouseClicked(MouseEvent e){}
      public void mouseDoubleClicked(MouseEvent e){}
      public void mousePressed(MouseEvent e){
            last = e.getLocation();
      }
      public void mouseDragged(MouseEvent e){
            Point p = e.getLocation();
            Dimension delta = p.getDifference(last);
            last = p;
            Figure f = ((Figure)e.getSource());
            f.setBounds(f.getBounds().getTranslated(delta.width, delta.height));
      }
};

}@
