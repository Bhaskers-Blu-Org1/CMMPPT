head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2008.11.19.16.07.39;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial checkin
@
text
@/*
 * Created on Jan 7, 2005
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package witviz;
//import opaltools.*;
//import com.ibm.opal.*;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.awt.SWT_AWT;
import org.eclipse.swt.custom.*;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.widgets.Dialog;
import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.widgets.Shell;


/**
 * @@author gresh
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
public class OpalPictureDialog extends Dialog {
    final Shell shell;
	Color colorGreen = new Color(Display.getDefault(), 0, 250, 0);

    SimpleTree parentApp;
    Shell parent;
    org.eclipse.swt.widgets.Composite OpalAggComposite, OpalHistComposite, OpalCategoryComposite;
    CustomPicture aggPicture, histPicture, categoryPicture;
    String[][] aggList, histList,categoryList;

	/**
	 * @@param parent
	 */
	public OpalPictureDialog(Shell parent, SimpleTree p) {
		super(parent);
		parentApp=p;
	    shell= new Shell(parent, SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MODELESS);
		// TODO Auto-generated constructor stub
		initializeShell();
	}

	/**
	 * @@param parent
	 * @@param style
	 */
	
   
	public void initializeShell() {
		parent = getParent();
		shell.setText("Part Attributes");
	    
	    shell.setLayout(new FormLayout());
		

		
	    
	    CTabFolder tabFolder = new CTabFolder(shell,SWT.TOP | SWT.BORDER);
		tabFolder.setSimple(false);
        FormData fd = new FormData();
        fd.left=new FormAttachment(0,5);
        fd.top =new FormAttachment(0,5);
        fd.bottom=new FormAttachment(100,-5);
        fd.right=new FormAttachment(100,-5);
        tabFolder.setLayoutData(fd);
		
		CTabItem tabItemAgg = new CTabItem(tabFolder,SWT.NULL	);
		org.eclipse.swt.widgets.Composite AggComposite = new org.eclipse.swt.widgets.Composite(tabFolder,SWT.NONE);	
		AggComposite.setLayout(new FormLayout());
		tabItemAgg.setText("Proportions");
		
		org.eclipse.swt.widgets.Composite buttonBar = new org.eclipse.swt.widgets.Composite(AggComposite, SWT.BORDER);
		FormData bbF = new FormData();
		bbF.left=new FormAttachment(0,5);
		bbF.top = new FormAttachment(0,5);
		bbF.right = new FormAttachment(100,-5);
		buttonBar.setLayoutData(bbF);
		FormData acF = new FormData();

		buttonBar.setLayout(new RowLayout());
		Button uncolor = new Button(buttonBar,SWT.PUSH);
		Button showAll = new Button(buttonBar,SWT.PUSH);
		Button showColored = new Button(buttonBar,SWT.PUSH);
		uncolor.setText("Uncolor");
		showAll.setText("Show All");
		showColored.setText("Show Colored");
		uncolor.addListener (SWT.Selection, new Listener () {
			public void handleEvent (Event e) {
				DataSource ds = aggPicture.Source(); //doesn't matter which one
				ds.Unfeature(Base.FEATUREBITScolor);

			}
		});
		showColored.addListener (SWT.Selection, new Listener () {
			public void handleEvent (Event e) {
				int[] exclude=new int[0];
				exclude = Base.Ints(exclude,Base.FEATUREBITnone);
				aggPicture.Excluded(exclude);

			}
		});
		showAll.addListener (SWT.Selection, new Listener () {
			public void handleEvent (Event e) {
				aggPicture.Exclude();

			}
		});
		OpalAggComposite = new org.eclipse.swt.widgets.Composite(AggComposite,SWT.EMBEDDED);
		acF.top=new FormAttachment(buttonBar,5);
		acF.left = new FormAttachment(0,5);
		acF.right = new FormAttachment(100,-5);
		acF.bottom = new FormAttachment(100,-5);
		OpalAggComposite.setLayoutData(acF);
		tabItemAgg.setControl(AggComposite);
		
		CTabItem tabItemHist = new CTabItem(tabFolder,SWT.NULL	);
		org.eclipse.swt.widgets.Composite HistComposite = new org.eclipse.swt.widgets.Composite(tabFolder,SWT.NONE);	
		HistComposite.setLayout(new FormLayout());
		tabItemHist.setText("Histogram");
		
		org.eclipse.swt.widgets.Composite buttonBar1 = new org.eclipse.swt.widgets.Composite(HistComposite, SWT.BORDER);
		FormData bbF1 = new FormData();
		bbF1.left=new FormAttachment(0,5);
		bbF1.top = new FormAttachment(0,5);
		bbF1.right = new FormAttachment(100,-5);
		buttonBar1.setLayoutData(bbF1);

		buttonBar1.setLayout(new RowLayout());
		Button uncolor1 = new Button(buttonBar1,SWT.PUSH);
		Button showAll1 = new Button(buttonBar1,SWT.PUSH);
		Button showColored1 = new Button(buttonBar1,SWT.PUSH);
		uncolor1.setText("Uncolor");
		showAll1.setText("Show All");
		showColored1.setText("Show Colored");
		uncolor1.addListener (SWT.Selection, new Listener () {
			public void handleEvent (Event e) {
				DataSource ds = aggPicture.Source(); //doesn't matter which one
				ds.Unfeature(Base.FEATUREBITScolor);

			}
		});
		showColored1.addListener (SWT.Selection, new Listener () {
			public void handleEvent (Event e) {
				int[] exclude=new int[0];
				exclude = Base.Ints(exclude,Base.FEATUREBITnone);
				histPicture.Excluded(exclude);

			}
		});
		showAll1.addListener (SWT.Selection, new Listener () {
			public void handleEvent (Event e) {
				histPicture.Exclude();

			}
		});
		OpalHistComposite = new org.eclipse.swt.widgets.Composite(HistComposite,SWT.EMBEDDED);
		FormData acF1 =new FormData();
		acF1.top=new FormAttachment(buttonBar1	,5);
		acF1.left = new FormAttachment(0,5);
		acF1.right = new FormAttachment(100,-5);
		acF1.bottom = new FormAttachment(100,-5);
		OpalHistComposite.setLayoutData(acF1);
		tabItemHist.setControl(HistComposite);
		
		
		CTabItem tabItemCategory = new CTabItem(tabFolder,SWT.NULL	);
		org.eclipse.swt.widgets.Composite CategoryComposite = new org.eclipse.swt.widgets.Composite(tabFolder,SWT.NONE);	
		CategoryComposite.setLayout(new FormLayout());
		tabItemCategory.setText("List");
		
		org.eclipse.swt.widgets.Composite buttonBar2 = new org.eclipse.swt.widgets.Composite(CategoryComposite, SWT.BORDER);
		FormData bbF2 = new FormData();
		bbF2.left=new FormAttachment(0,5);
		bbF2.top = new FormAttachment(0,5);
		bbF2.right = new FormAttachment(100,-5);
		buttonBar2.setLayoutData(bbF2);
		FormData acF2 = new FormData();

		buttonBar2.setLayout(new RowLayout());
		Button uncolor2 = new Button(buttonBar2,SWT.PUSH);
		Button showAll2 = new Button(buttonBar2,SWT.PUSH);
		Button showColored2 = new Button(buttonBar2,SWT.PUSH);
		uncolor2.setText("Uncolor");
		showAll2.setText("Show All");
		showColored2.setText("Show Colored");
		uncolor2.addListener (SWT.Selection, new Listener () {
			public void handleEvent (Event e) {
				DataSource ds = aggPicture.Source(); //doesn't matter which one
				ds.Unfeature(Base.FEATUREBITScolor);

			}
		});
		showColored2.addListener (SWT.Selection, new Listener () {
			public void handleEvent (Event e) {
				int[] exclude=new int[0];
				exclude = Base.Ints(exclude,Base.FEATUREBITnone);
				categoryPicture.Excluded(exclude);

			}
		});
		showAll2.addListener (SWT.Selection, new Listener () {
			public void handleEvent (Event e) {
				categoryPicture.Exclude();

			}
		});
		OpalCategoryComposite = new org.eclipse.swt.widgets.Composite(CategoryComposite,SWT.EMBEDDED);
		acF2.top=new FormAttachment(buttonBar2,5);
		acF2.left = new FormAttachment(0,5);
		acF2.right = new FormAttachment(100,-5);
		acF2.bottom = new FormAttachment(100,-5);
		OpalCategoryComposite.setLayoutData(acF2);
		tabItemCategory.setControl(CategoryComposite);

		
		ToolBar toolbar=  new ToolBar(tabFolder,SWT.HORIZONTAL| SWT.FLAT); 
		
		final ToolItem showcolored = new ToolItem(toolbar,SWT.PUSH);
		Image showColoredIcon = new Image(null, "searchres.gif");
		showcolored.setImage(showColoredIcon);
		//focus.setText("Focus");
		showcolored.setToolTipText("Identify Colored Points");
		showcolored.addSelectionListener(new SelectionListener() {
			public void widgetSelected(SelectionEvent event) {
				IdentifyColoredPoints();
			}
			public void widgetDefaultSelected(SelectionEvent event) {
				
			}
		});	
		tabFolder.setTabHeight(Math.max(toolbar.computeSize(SWT.DEFAULT, 
					SWT.DEFAULT).y, tabFolder.getTabHeight()));
			
	    tabFolder.setTopRight(toolbar);
		tabFolder.setSelection(0);
			
		Image WitImage = new Image(null, "witmodel.gif");
		shell.setImage(WitImage);
		
		
		shell.addListener(SWT.Close, new Listener(){
			   public void handleEvent(Event event) {
			       event.doit=false;
			       close();
			       //your code here

			    }
			   });	   
		shell.pack ();
		shell.setVisible(false);
		shell.setSize(400,400);
	}
	public void open () {
		shell.setVisible(true);

		Display display = parent.getDisplay();

		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) display.sleep();
		}

	}
public void setAggPicture(CustomPicture op, String[][] list) {
    aggPicture = op;
    aggList = list;
	java.awt.Frame frame = SWT_AWT.new_Frame(OpalAggComposite);
	frame.setLayout(new java.awt.BorderLayout());
	frame.add(op,java.awt.BorderLayout.CENTER);
}
public void setCategoryPicture(CustomPicture op, String[][] list) {
	categoryPicture = op;
	categoryList = list;
	java.awt.Frame frame = SWT_AWT.new_Frame(OpalCategoryComposite)	;
	frame.setLayout(new java.awt.BorderLayout());
	frame.add(op,java.awt.BorderLayout.CENTER);
}
public void setHistPicture(CustomPicture op, String[][] list) {
    histPicture = op;
    histList = list;
	java.awt.Frame frame = SWT_AWT.new_Frame(OpalHistComposite);
	frame.setLayout(new java.awt.BorderLayout());
	frame.add(op,java.awt.BorderLayout.CENTER);
}
public void IdentifyColoredPoints() {
   int[] samples;
   DataSource ds = aggPicture.Source(); //doesn't matter which one
   if (parentApp.fulltree) {
   parentApp.mainContents.ResetToWhite();
   samples = ds.SamplesWith(Picturing.FEATUREBITgreen, false);
   for (int i=0; i<samples.length; i++) {
	   //want to get the name of the part
   	  String part = aggList[0][samples[i]];
   	  parentApp.mainContents.ColorPart(part,colorGreen);
   }
   }
}

public void close() {
	//just make invisible
	shell.setVisible(false);
}
}
@
