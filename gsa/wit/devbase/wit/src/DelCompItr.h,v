head	1.9;
access;
symbols
	sce_5_01_20080919:1.6
	latest_sce_4_20_20060523:1.6.0.2
	sce_4_20_20060523:1.6
	latest_sce4_20_OSL:1.5.0.4
	sce_4_20_OSL:1.5
	sce_410_withVa:1.5
	sce_4_05_20040511:1.5
	sce_4_00_20040201:1.5
	nextGenBranch:1.5.0.2
	nextGenRoot:1.5
	sce_3_30_20030627:1.5
	EndRw-branch:1.4.0.4
	Root-of-EndRw:1.4
	rwToStl:1.4.0.2;
locks; strict;
comment	@ * @;


1.9
date	2011.09.28.23.49.14;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.09.24.00.27.31;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.08.30.20.17.24;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.02.17.33.57;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.02.22.18.23;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.09.20.49.48;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.25.19.14.49;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.24.18.26.06;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.22.14.32.06;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef DelCompItrH
#define DelCompItrH

//------------------------------------------------------------------------------
// Header file: "DelCompItr.h"
//
// Contains the declaration of class DelCompItr.
//------------------------------------------------------------------------------

#include <ObjStack.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class DelCompItr
//
// Responsible for iterating thru the DelComps of a Problem at the request of
// the application program.
//------------------------------------------------------------------------------

class WitDelCompItr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDelCompItr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitDelCompItr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void reset ();
         //
         // Resets DelComp iteration.

      void advance ();
         //
         // * If this DelCompItr is currently in its reset state, it is advanced
         //   to the the first DelComp.
         // * If this DelCompItr is currently at any but the last DelComp, it is
         //   advanced to the next DelComp.
         // * If this DelCompItr is currently at any the last DelComp, it is
         //   reset.

      WitAttr apiObjItrState ();
         //
         // Returns the API objItrState attribute value corresponding to the
         // current state of this DelCompItr.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessNonNull (WitDelComp *, curDelComp)

      inline bool active ()
         {
         return (curDelComp_ != NULL);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void setup ();
         //
         // Sets up DelComp iteration.

      noCopyCtorAssign (WitDelCompItr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitObjStack <WitDelComp> myDelCompStack_;
         //
         // In active mode, myDelCompStack_ is the Stack of DelComps being
         // iterated.
         // In reset mode, myDelCompStack_ is empty.

      WitObjStItr <WitDelComp> myStItr_;
         //
         // Itr for myDelCompStack_.

      WitDelComp * curDelComp_;
         //
         // The DelComp currently referenced by this DelCompItr, or NULL, if
         // this DelCompItr is in its reset state.
   };


#endif
@


1.8
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.7
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d30 2
a31 40
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitDelCompItr (WitProblem *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitDelCompItr ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void reset ();
//
// Resets DelComp iteration.

void advance ();
//
// * If this DelCompItr is currently in its reset state, it is advanced
//   to the the first DelComp.
// * If this DelCompItr is currently at any but the last DelComp, it is
//   advanced to the next DelComp.
// * If this DelCompItr is currently at any the last DelComp, it is
//   reset.

WitAttr apiObjItrState ();
//
// Returns the API objItrState attribute value corresponding to the
// current state of this DelCompItr.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d33 76
a108 38
accessNonNull (WitDelComp *, curDelComp)

inline bool active ()
{
return (curDelComp_ != NULL);
}

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void setup ();
//
// Sets up DelComp iteration.

noCopyCtorAssign (WitDelCompItr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitObjStack <WitDelComp> myDelCompStack_;
//
// In active mode, myDelCompStack_ is the Stack of DelComps being
// iterated.
// In reset mode, myDelCompStack_ is empty.

WitObjStItr <WitDelComp> myStItr_;
//
// Itr for myDelCompStack_.

WitDelComp * curDelComp_;
//
// The DelComp currently referenced by this DelCompItr, or NULL, if
// this DelCompItr is in its reset state.
};
@


1.6
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d30 40
a69 2
   {
   public:
d71 38
a108 76
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDelCompItr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitDelCompItr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void reset ();
         //
         // Resets DelComp iteration.

      void advance ();
         //
         // * If this DelCompItr is currently in its reset state, it is advanced
         //   to the the first DelComp.
         // * If this DelCompItr is currently at any but the last DelComp, it is
         //   advanced to the next DelComp.
         // * If this DelCompItr is currently at any the last DelComp, it is
         //   reset.

      WitAttr apiObjItrState ();
         //
         // Returns the API objItrState attribute value corresponding to the
         // current state of this DelCompItr.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessNonNull (WitDelComp *, curDelComp)

      inline bool active ()
         {
         return (curDelComp_ != NULL);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void setup ();
         //
         // Sets up DelComp iteration.

      noCopyCtorAssign (WitDelCompItr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitObjStack <WitDelComp> myDelCompStack_;
         //
         // In active mode, myDelCompStack_ is the Stack of DelComps being
         // iterated.
         // In reset mode, myDelCompStack_ is empty.

      WitObjStItr <WitDelComp> myStItr_;
         //
         // Itr for myDelCompStack_.

      WitDelComp * curDelComp_;
         //
         // The DelComp currently referenced by this DelCompItr, or NULL, if
         // this DelCompItr is in its reset state.
   };
@


1.5
log
@Internal changes.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.4
log
@Continued implementation of Single-Source.
@
text
@d73 1
a73 1
      inline WitBoolean active ()
@


1.3
log
@Continued implementation of object iteration.
@
text
@d19 1
d94 1
a94 1
      WitObjStack <WitDelComp> & myDelCompStack_;
d100 1
a100 1
      WitObjStItr <WitDelComp> & myStItr_;
@


1.2
log
@Continued implementation of object iteration.
@
text
@d61 1
a61 1
      WitAttr curApiItrState ();
d63 2
a64 2
         // Returns the API attribute indicating the current iteration state of
         // this DelCompItr.
@


1.1
log
@Continued implementation of object iteration.
@
text
@d61 5
a69 4
      void setup ();
         //
         // Sets up DelComp iteration.

d82 4
@

