head	1.6;
access;
symbols
	sce_5_01_20080919:1.3
	latest_sce_4_20_20060523:1.3.0.2
	sce_4_20_20060523:1.3
	latest_sce4_20_OSL:1.2.0.2
	sce_4_20_OSL:1.2
	sce_410_withVa:1.2;
locks; strict;
comment	@ * @;


1.6
date	2011.09.28.23.49.50;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.24.00.28.11;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.08.30.20.17.52;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.02.17.34.07;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.07.13.21.18.46;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.07.18.18.10;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ParserH
#define ParserH

//------------------------------------------------------------------------------
// Header file: "Parser.h"
//------------------------------------------------------------------------------

#include <Parlex.h>
#include <SymTable.h>

#include <string>

extern "C" int yyparse();

//------------------------------------------------------------------------------
// class Parser
//------------------------------------------------------------------------------

class WitParser: public WitParlex {
  friend int yyparse();

public:

  // Types
  // The parseState type encodes the state of the yacc parser so that better
  // error messages can be produced, and for use in situations where context-
  // sensitive behavior is required.

  enum PS {
    PS_initial, PS_add, PS_set, PS_read, PS_release, PS_part,	
      PS_operation, PS_bomEntry, PS_subEntry, PS_bopEntry, PS_demand,
      PS_partOperation, PS_nextArg, PS_attr, PS_single, PS_dense, PS_sparse,
      PS_singleParen, PS_denseParen, PS_sparseParen, PS_singleValue,
      PS_denseValue, PS_sparseValue, PS_nextAttr, PS_nextCommand, 
      PS_commandEnd, PS_period, PS_periodColon, PS_nextBound, PS_boundType,
      PS_endBounds, PS_setProblem
  };

  // Operations

  static void parse (WitProblem * theProblem, const char *, FILE *);
     //
     // Creates a unique instance of this class, uses it to parse the input,
     // and then destroys the instance.

  void prtSyntaxError(WitSymTabEntry *entryPtr, PS state, const char * token)
       const;

  void setDataFileName   () const;
  void setDataFileLineNo () const;
     //
     // Wrappers for InputID functions.

  // Accessors
  PS           parseState() const;
  void         setParseState(PS);
  WitEntity    *currentEntity() const;
  WitAttribute *currentAttr() const;

  inline static WitParser * instance ()
     {
     witAssert (instance_ != NULL);

     return instance_;
     }

  WitMsgFacility & myMsgFac () const;

  accessFunc (WitProblem *, myProblem)

private:

  // Constructor and destructor
  WitParser();
  ~WitParser();

  int  parseIt(WitProblem * theProblem, const char*, FILE*);

  WitSymTable  *theSymTable_;   // a collection of symbol table entries
  std::string   currentRule_;     // rule corresponding to the command being parsed
  std::string   previousRule_;    
  WitEntity    *currentEntity_; // the current Wit entity object
  WitAttribute *currentAttr_;   // the current Wit attribute object
  PS           parseState_;     // the state of the parser/lexer

  WitProblem * myProblem_;
     //
     // The Problem for this Parser.

  static       WitParser * instance_;
     //
     // The unique instance of this class, if any.
};

#endif
@


1.5
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.4
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d29 1
a29 1
friend int yyparse();
d33 39
a71 39
// Types
// The parseState type encodes the state of the yacc parser so that better
// error messages can be produced, and for use in situations where context-
// sensitive behavior is required.

enum PS {
PS_initial, PS_add, PS_set, PS_read, PS_release, PS_part,
PS_operation, PS_bomEntry, PS_subEntry, PS_bopEntry, PS_demand,
PS_partOperation, PS_nextArg, PS_attr, PS_single, PS_dense, PS_sparse,
PS_singleParen, PS_denseParen, PS_sparseParen, PS_singleValue,
PS_denseValue, PS_sparseValue, PS_nextAttr, PS_nextCommand,
PS_commandEnd, PS_period, PS_periodColon, PS_nextBound, PS_boundType,
PS_endBounds, PS_setProblem
};

// Operations

static void parse (WitProblem * theProblem, const char *, FILE *);
//
// Creates a unique instance of this class, uses it to parse the input,
// and then destroys the instance.

void prtSyntaxError(WitSymTabEntry *entryPtr, PS state, const char * token)
const;

void setDataFileName   () const;
void setDataFileLineNo () const;
//
// Wrappers for InputID functions.

// Accessors
PS           parseState() const;
void         setParseState(PS);
WitEntity    *currentEntity() const;
WitAttribute *currentAttr() const;

inline static WitParser * instance ()
{
witAssert (instance_ != NULL);
d73 2
a74 2
return instance_;
}
d76 1
a76 1
WitMsgFacility & myMsgFac () const;
d78 1
a78 1
accessFunc (WitProblem *, myProblem)
d82 20
a101 20
// Constructor and destructor
WitParser();
~WitParser();

int  parseIt(WitProblem * theProblem, const char*, FILE*);

WitSymTable  *theSymTable_;   // a collection of symbol table entries
std::string   currentRule_;     // rule corresponding to the command being parsed
std::string   previousRule_;
WitEntity    *currentEntity_; // the current Wit entity object
WitAttribute *currentAttr_;   // the current Wit attribute object
PS           parseState_;     // the state of the parser/lexer

WitProblem * myProblem_;
//
// The Problem for this Parser.

static       WitParser * instance_;
//
// The unique instance of this class, if any.
@


1.3
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d29 1
a29 1
  friend int yyparse();
d33 39
a71 39
  // Types
  // The parseState type encodes the state of the yacc parser so that better
  // error messages can be produced, and for use in situations where context-
  // sensitive behavior is required.

  enum PS {
    PS_initial, PS_add, PS_set, PS_read, PS_release, PS_part,	
      PS_operation, PS_bomEntry, PS_subEntry, PS_bopEntry, PS_demand,
      PS_partOperation, PS_nextArg, PS_attr, PS_single, PS_dense, PS_sparse,
      PS_singleParen, PS_denseParen, PS_sparseParen, PS_singleValue,
      PS_denseValue, PS_sparseValue, PS_nextAttr, PS_nextCommand, 
      PS_commandEnd, PS_period, PS_periodColon, PS_nextBound, PS_boundType,
      PS_endBounds, PS_setProblem
  };

  // Operations

  static void parse (WitProblem * theProblem, const char *, FILE *);
     //
     // Creates a unique instance of this class, uses it to parse the input,
     // and then destroys the instance.

  void prtSyntaxError(WitSymTabEntry *entryPtr, PS state, const char * token)
       const;

  void setDataFileName   () const;
  void setDataFileLineNo () const;
     //
     // Wrappers for InputID functions.

  // Accessors
  PS           parseState() const;
  void         setParseState(PS);
  WitEntity    *currentEntity() const;
  WitAttribute *currentAttr() const;

  inline static WitParser * instance ()
     {
     witAssert (instance_ != NULL);
d73 2
a74 2
     return instance_;
     }
d76 1
a76 1
  WitMsgFacility & myMsgFac () const;
d78 1
a78 1
  accessFunc (WitProblem *, myProblem)
d82 20
a101 20
  // Constructor and destructor
  WitParser();
  ~WitParser();

  int  parseIt(WitProblem * theProblem, const char*, FILE*);

  WitSymTable  *theSymTable_;   // a collection of symbol table entries
  std::string   currentRule_;     // rule corresponding to the command being parsed
  std::string   previousRule_;    
  WitEntity    *currentEntity_; // the current Wit entity object
  WitAttribute *currentAttr_;   // the current Wit attribute object
  PS           parseState_;     // the state of the parser/lexer

  WitProblem * myProblem_;
     //
     // The Problem for this Parser.

  static       WitParser * instance_;
     //
     // The unique instance of this class, if any.
@


1.2
log
@[exceptions]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.1
log
@[exceptions]
@
text
@d17 2
a18 1
#include <Util.h>
d61 1
a61 1
     // Wrappers for InputId functions.
@

