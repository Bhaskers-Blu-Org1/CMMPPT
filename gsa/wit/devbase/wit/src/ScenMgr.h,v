head	1.28;
access;
symbols
	sce_5_01_20080919:1.25;
locks; strict;
comment	@ * @;


1.28
date	2011.09.28.23.50.08;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.09.24.00.28.34;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.08.30.20.18.08;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.01.25.00.19.22;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.01.04.20.25.28;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.12.04.00.07.15;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.11.28.20.34.28;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.10.08.18.56.36;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.09.28.22.08.26;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.09.26.22.52.52;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.09.25.21.03.04;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.09.21.23.06.08;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.09.14.21.13.58;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.08.29.16.24.23;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.08.28.17.38.35;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.08.24.21.12.38;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.08.17.22.32.24;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.06.21.18.49.18;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.06.20.23.02.37;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.20.22.10.26;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.20.19.38.51;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.08.22.47.01;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.23.21.42.06;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.22.15.46.52;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.21.15.31.46;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.18.23.16.08;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.18.21.51.42;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.18.21.20.49;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ScenMgrH
#define ScenMgrH

//------------------------------------------------------------------------------
// Header file: "ScenMgr.h"
//
// Contains the declaration of class ScenMgr.
//------------------------------------------------------------------------------

#include <StochAssoc.h>
#include <List.h>
#include <PtrVec.h>

//------------------------------------------------------------------------------
// Class ScenMgr
//
// "Scenario Manager"
// Owns and maintains the Scenarios for stochastic implosion.
//
// Class hierarchy:
//
//    ProbAssoc
//       StochAssoc
//          ScenMgr
//
// Implemented in Scenario.C.
//------------------------------------------------------------------------------

class WitScenMgr: public WitStochAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitScenMgr (WitStochModeMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitScenMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void copyAttrsFrom (WitScenMgr * theScenMgr);
         //
         // Copies the input attributes of theScenMgr into this ScenMgr.

      void writeUndiffData ();
         //
         // Writes the section of the input data file for the undifferentiated
         // scenario-specific attributes.

      void writeDiffData ();
         //
         // Writes the section of the input data file for the differentiated
         // scenario-specific attributes.

      void displayGlobalData ();
         //
         // Displays the global input and preprocessing data for this ScenMgr.

      void displayData ();
         //
         // Does displayData for each Scenario.

      void validateData ();
         //
         // Verifies that the Scenarios are valid for a stochastic implosion.
         // Specifically, verifies that the of the Scenario probabilities is 0.

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setCurScenario (WitScenario *);
         //
         // Sets the current Scenario to the arguement.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitList <WitScenario> &, myScenarios)
      accessFunc (WitScenario *,                 curScenario)
      accessFunc (bool,                          isWritingData)

      inline WitScenario * myScenarioFor (int theIdx)
         {
         return myScenarioFor_[theIdx];
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitScenMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitStochModeMgr * const myStochModeMgr_;
         //
         // The StochModeMgr that owns this ScenMgr.

      const int nScenarios_;
         //
         // The number of Scenarios owned by this ScenMgr.

      WitList <WitScenario> myScenarios_;
         //
         // This List of all Scenarios owned by this ScenMgr.

      WitPtrVec <WitScenario> myScenarioFor_;
         //
         // myScenarioFor_[theIdx] is the Scenario owned by this ScenMgr
         // whose index is theIdx.

      WitScenario * curScenario_;
         //
         // The current Scenario.

      bool isWritingData_;
         //
         // True, iff this ScenMgr is currently writing input data.
   };

#endif
@


1.27
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.26
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d39 2
a40 27
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitScenMgr (WitStochModeMgr *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitScenMgr ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void copyAttrsFrom (WitScenMgr * theScenMgr);
//
// Copies the input attributes of theScenMgr into this ScenMgr.

void writeUndiffData ();
//
// Writes the section of the input data file for the undifferentiated
// scenario-specific attributes.
d42 101
a142 76
void writeDiffData ();
//
// Writes the section of the input data file for the differentiated
// scenario-specific attributes.

void displayGlobalData ();
//
// Displays the global input and preprocessing data for this ScenMgr.

void displayData ();
//
// Does displayData for each Scenario.

void validateData ();
//
// Verifies that the Scenarios are valid for a stochastic implosion.
// Specifically, verifies that the of the Scenario probabilities is 0.

//------------------------------------------------------------------------
// "Set" functions.
//------------------------------------------------------------------------

void setCurScenario (WitScenario *);
//
// Sets the current Scenario to the arguement.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (const WitList <WitScenario> &, myScenarios)
accessFunc (WitScenario *,                 curScenario)
accessFunc (bool,                          isWritingData)

inline WitScenario * myScenarioFor (int theIdx)
{
return myScenarioFor_[theIdx];
}

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitScenMgr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitStochModeMgr * const myStochModeMgr_;
//
// The StochModeMgr that owns this ScenMgr.

const int nScenarios_;
//
// The number of Scenarios owned by this ScenMgr.

WitList <WitScenario> myScenarios_;
//
// This List of all Scenarios owned by this ScenMgr.

WitPtrVec <WitScenario> myScenarioFor_;
//
// myScenarioFor_[theIdx] is the Scenario owned by this ScenMgr
// whose index is theIdx.

WitScenario * curScenario_;
//
// The current Scenario.

bool isWritingData_;
//
// True, iff this ScenMgr is currently writing input data.
};
@


1.25
log
@Stochastic Implosion
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d39 27
a65 2
   {
   public:
d67 76
a142 101
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitScenMgr (WitStochModeMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitScenMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void copyAttrsFrom (WitScenMgr * theScenMgr);
         //
         // Copies the input attributes of theScenMgr into this ScenMgr.

      void writeUndiffData ();
         //
         // Writes the section of the input data file for the undifferentiated
         // scenario-specific attributes.

      void writeDiffData ();
         //
         // Writes the section of the input data file for the differentiated
         // scenario-specific attributes.

      void displayGlobalData ();
         //
         // Displays the global input and preprocessing data for this ScenMgr.

      void displayData ();
         //
         // Does displayData for each Scenario.

      void validateData ();
         //
         // Verifies that the Scenarios are valid for a stochastic implosion.
         // Specifically, verifies that the of the Scenario probabilities is 0.

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setCurScenario (WitScenario *);
         //
         // Sets the current Scenario to the arguement.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitList <WitScenario> &, myScenarios)
      accessFunc (WitScenario *,                 curScenario)
      accessFunc (bool,                          isWritingData)

      inline WitScenario * myScenarioFor (int theIdx)
         {
         return myScenarioFor_[theIdx];
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitScenMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitStochModeMgr * const myStochModeMgr_;
         //
         // The StochModeMgr that owns this ScenMgr.

      const int nScenarios_;
         //
         // The number of Scenarios owned by this ScenMgr.

      WitList <WitScenario> myScenarios_;
         //
         // This List of all Scenarios owned by this ScenMgr.

      WitPtrVec <WitScenario> myScenarioFor_;
         //
         // myScenarioFor_[theIdx] is the Scenario owned by this ScenMgr
         // whose index is theIdx.

      WitScenario * curScenario_;
         //
         // The current Scenario.

      bool isWritingData_;
         //
         // True, iff this ScenMgr is currently writing input data.
   };
@


1.24
log
@Stochastic Implosion
@
text
@d19 1
a19 1
#include <Assoc.h>
d29 6
d38 1
a38 1
class WitScenMgr: public WitProbAssoc
a96 1
      accessFunc (WitStochModeMgr *,             myStochModeMgr)
@


1.23
log
@Stochastic Implosion
@
text
@d77 1
@


1.22
log
@Stochastic Implosion
@
text
@d56 1
a56 1
      void writeStage0Data ();
d58 2
a59 2
         // Writes the section of the input data file for the scenario-specific
         // attributes in stage 0.
d61 1
a61 1
      void writeStage1Data ();
d63 2
a64 2
         // Writes the section of the input data file for the Scenarios owned by
         // this ScenMgr for stage 1 (and stage independent data).
@


1.21
log
@Stochastic Implosion
@
text
@d56 6
a61 1
      void writeData ();
d64 1
a64 1
         // this ScenMgr.
d135 1
a135 1
         // True, iff writeData () is currently being executed.
@


1.20
log
@Stochastic Implosion
@
text
@d85 4
a88 8
      accessFunc (WitStochModeMgr *,                myStochModeMgr)
      accessFunc (const WitList <WitScenario> &,    myScenarios)
      accessFunc (WitScenario *,                    curScenario)
      accessFunc (bool,                             isWritingData)
      accessFunc (const WitList   <WitMaterial>  &, allMats)
      accessFunc (const WitList   <WitDemand>    &, allDemands)
      accessFunc (const WitList   <WitSubEntry>  &, allSubs)
      accessFunc (const WitList   <WitBoundSet>  &, allBoundSets)
a100 8
      void listOwners ();
         //
         // Builds each of the Lists of Owner objects.

      void checkProbabilities ();
         //
         // Verifies that the probabilities sum to 1.

a130 10

      //------------------------------------------------------------------------
      // Lists of all instances of various classes that will function as Owners
      // for the ScenAtts.
      //------------------------------------------------------------------------

      WitList <WitMaterial> allMats_;
      WitList <WitDemand>   allDemands_;
      WitList <WitSubEntry> allSubs_;
      WitList <WitBoundSet> allBoundSets_;
@


1.19
log
@Stochastic Implosion
@
text
@d92 1
d152 1
@


1.18
log
@Stochastic Implosion
@
text
@d88 1
d139 4
@


1.17
log
@Stochastic Implosion
@
text
@d71 1
a71 2
         // Verifies that the Scenarios are valid value for a stochastic
         // implosion.
d85 6
a90 3
      accessFunc (WitStochModeMgr *,             myStochModeMgr)
      accessFunc (const WitList <WitScenario> &, myScenarios)
      accessFunc (WitScenario *,                 curScenario)
d103 4
a110 2
      WitScenAttMgr * myScenAttMgr ();

d137 9
@


1.16
log
@Stochastic Implosion
@
text
@a104 5
      void checkAttsInStage0 ();
         //
         // Verifies that all scenario-specific attributes of stage 0 objects
         // match between all Scenarios.

@


1.15
log
@Stochastic Implosion
@
text
@d110 2
@


1.14
log
@Stochastic Implosion
@
text
@d105 1
a105 1
      void checkNonRecAtts ();
d107 2
a108 2
         // Verifies that all scenario-specific attributes of non-recourse
         // objects match between all Scenarios.
@


1.13
log
@Stochastic Implosion
@
text
@d78 1
a78 1
      void setScenarioIndex (int theIdx);
d80 1
a80 1
         // Sets the current Scenario to the one that matches theIdx.
d90 5
d128 1
a128 1
      WitPtrVec <WitScenario> myScenByIdx_;
d130 1
a130 1
         // myScenByIdx_[theIdx] is the Scenario owned by this ScenMgr
@


1.12
log
@Stochastic Implosion
@
text
@d96 1
a96 1
      void checkScenarioProbs ();
d98 1
a98 1
         // Verifies that the scenarioProbs sum to 1.
@


1.11
log
@Stochastic Implosion
@
text
@a81 4
      void setScenarioForImplode (WitScenario * theScenario);
         //
         // Sets the current Scenario to theScenario for purposes of implosion.

@


1.10
log
@Stochastic Implosion
@
text
@d106 2
a107 2
         // Verifies that all stochastic attributes of non-recourse objects
         // match between all Scenarios.
@


1.9
log
@Stochastic Implosion
@
text
@d61 4
a68 4
      void displayGlobalData ();
         //
         // Displays the global input and preprocessing data for this ScenMgr.

@


1.8
log
@Stochastic Implosion
@
text
@d61 1
a61 1
      void display ();
d63 5
a67 1
         // Displays the input and preprocessing data for this ScenMgr.
@


1.7
log
@Stochastic Implosion
@
text
@d29 1
a29 1
// Implemented in StochMode.C.
@


1.6
log
@Stochastic Implosion
@
text
@d29 1
a29 1
// Implemented in StochImp.C.
@


1.5
log
@Stochastic Implosion
@
text
@d96 9
@


1.4
log
@Stochastic Implosion
@
text
@a95 5
      void restoreInputAttrs ();
         //
         // Restores the values of all stochastic input attributes saved in the
         // current Scenario.

@


1.3
log
@Stochastic Implosion
@
text
@d40 1
a40 1
      WitScenMgr (WitStochDataMgr *);
d86 1
a86 1
      accessFunc (WitStochDataMgr *,             myStochDataMgr)
d107 1
a107 1
      WitStochDataMgr * const myStochDataMgr_;
d109 1
a109 1
         // The StochDataMgr that owns this ScenMgr.
@


1.2
log
@Stochastic Implosion
@
text
@d65 5
@


1.1
log
@Stochastic Implosion
@
text
@d81 1
@

