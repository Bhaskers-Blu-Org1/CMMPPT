head	1.32;
access;
symbols
	sce_5_01_20080919:1.28
	latest_sce_4_20_20060523:1.27.0.2
	sce_4_20_20060523:1.27
	latest_sce4_20_OSL:1.26.0.2
	sce_4_20_OSL:1.26
	sce_410_withVa:1.18
	sce_4_05_20040511:1.18
	sce_4_00_20040201:1.17
	nextGenBranch:1.16.0.2
	nextGenRoot:1.16
	sce_3_30_20030627:1.16
	EndRw-branch:1.13.0.4
	Root-of-EndRw:1.13
	rwToStl:1.13.0.2
	latest_sce_3_10_20010924:1.11.0.2
	sce_3_10_20010924:1.11
	latest_sce_3_00_20010601:1.6.0.2
	sce_3_00_20010601:1.6
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4;
locks; strict;
comment	@ * @;


1.32
date	2011.09.28.23.50.01;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.09.24.00.28.25;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.08.30.20.18.03;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2010.01.25.19.45.19;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2007.05.11.15.56.46;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2006.05.02.17.34.10;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2006.02.21.15.44.14;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2006.02.18.00.38.48;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2006.02.17.20.53.14;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2006.02.17.17.07.18;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2006.02.16.16.24.46;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2005.11.15.21.45.26;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2005.11.15.21.27.23;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2005.09.22.14.59.51;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2004.04.13.21.50.14;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.12.01.21.05.05;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.01.22.19.32.13;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.01.15.21.01.24;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.01.13.22.22.12;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.08.21.58.58;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.05.02.20.53.15;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2001.07.06.23.36.02;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.06.22.29.06;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.21.18.24.33;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.18.18.42.23;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.15.20.53.37;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.25.14.53.26;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.08.21.35.44;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.20.00.44.21;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.28.22.13.38;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.20.20.08.37;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.06.19.58.41;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PtrVecH
#define PtrVecH

//------------------------------------------------------------------------------
// Header file: "PtrVec.h"
//
// Contains the declaration of class template PtrVec <Elem>.
// Contains the declaration of class template PtrVecItr <Elem>.
//------------------------------------------------------------------------------

#include <Vector.h>

//------------------------------------------------------------------------------
// Class template PtrVec <Elem>
//
// A vector of pointers to Elem.
// This template is implemented as a typed wrapper for class Vector <void *>.
// See class Vector <void *> for comments on the member functions.
//
// All implementation is inline.
//------------------------------------------------------------------------------

template <typename Elem> 
      class WitPtrVec
   {
      friend class WitAbsPVecCompFtor <Elem>;

   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitPtrVec ():
            myVector_ ()
         {
         }

      inline WitPtrVec (int nElems):
            myVector_ (nElems, NULL)
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitPtrVec ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void resize (int nElems)
         {
         myVector_.resize (nElems, NULL);
         }

      inline void clear ()
         {
         myVector_.clear ();
         }

      inline void operator = (const WitPtrVec & thePtrVec)
         {
         myVector_ = thePtrVec.myVector_;
         }

      inline int length () const
         {
         return myVector_.length ();
         }

      inline Elem & myElemAt (int theIndex) const
         {
         witAssert ((* this)[theIndex] != NULL);

         return   * (* this)[theIndex];
         }

      inline Elem * operator [] (int theIndex) const
         {
         return reinterpret_cast <Elem *> (myVector_[theIndex]) ;
         }

      inline Elem * & operator [] (int theIndex)
         {
         return reinterpret_cast <Elem * &> (myVector_[theIndex]) ;
         }

      inline void attachItr (WitPtrVecItr <Elem> & theItr) const;
         //
         // Attaches theItr to this PtrVec.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtor (WitPtrVec);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitVector <void *> myVector_;
         //
         // The Vector that stores the data for this PtrVec.
   };

//------------------------------------------------------------------------------
// Class template PtrVecItr <Elem>
//
// Responsible for iterating through the elements of a PtrVec <Elem>.
//
// All implementation is inline.
//------------------------------------------------------------------------------

template <typename Elem> 
      class WitPtrVecItr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitPtrVecItr ():

            myPtrVecPtr_ (NULL),
            myIdx_       (-1)
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitPtrVecItr ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void attachTo (const WitPtrVec <Elem> & thePtrVec);
         //
         // Attaches this PtrVecItr to thePtrVec.

      inline bool advance (Elem * & theElem);
         //
         // Advances this PtrVecItr.
         // If, after the advance, this PtrVecItr still refers to a valid Elem
         // in myPtrVecPtr_, theElem is set to it and the function returns true.
         // Otherwise, this PtrVecItr is detached from myPtrVecPtr_ and the
         // function returns false.

      accessFunc (int, myIdx);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPtrVecItr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitPtrVec <Elem> * myPtrVecPtr_;
         //
         // Pointer to the PtrVec through which this PtrVecItr iterates.

      int myIdx_;
         //
         // The current index into * myPtrVecPtr_.
   };

//------------------------------------------------------------------------------
// Inline implementations.
//------------------------------------------------------------------------------

template <typename Elem> 
      inline void WitPtrVec <Elem>::attachItr (
         WitPtrVecItr <Elem> & theItr)
         const
   {
   theItr.attachTo (* this);
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      inline void WitPtrVecItr <Elem>::attachTo (
         const WitPtrVec <Elem> & thePtrVec)
   {
   myPtrVecPtr_ = & thePtrVec;

   myIdx_       = -1;
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      inline bool WitPtrVecItr <Elem>::advance (Elem * & theElem)
   {
   witAssert (myPtrVecPtr_ != NULL);

   myIdx_ ++;

   if (myIdx_ < myPtrVecPtr_->length ())
      {
      theElem = (* myPtrVecPtr_)[myIdx_];

      return true;
      }
   else
      {
      myPtrVecPtr_ = NULL;
      myIdx_       = -1;

      return false;
      }
   }

#endif
@


1.31
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.30
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d32 90
a121 90
template <typename Elem>
class WitPtrVec
{
friend class WitAbsPVecCompFtor <Elem>;

public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

inline WitPtrVec ():
myVector_ ()
{
}

inline WitPtrVec (int nElems):
myVector_ (nElems, NULL)
{
}

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

inline ~WitPtrVec ()
{
}

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

inline void resize (int nElems)
{
myVector_.resize (nElems, NULL);
}

inline void clear ()
{
myVector_.clear ();
}

inline void operator = (const WitPtrVec & thePtrVec)
{
myVector_ = thePtrVec.myVector_;
}

inline int length () const
{
return myVector_.length ();
}

inline Elem & myElemAt (int theIndex) const
{
witAssert ((* this)[theIndex] != NULL);

return   * (* this)[theIndex];
}

inline Elem * operator [] (int theIndex) const
{
return reinterpret_cast <Elem *> (myVector_[theIndex]) ;
}

inline Elem * & operator [] (int theIndex)
{
return reinterpret_cast <Elem * &> (myVector_[theIndex]) ;
}

inline void attachItr (WitPtrVecItr <Elem> & theItr) const;
//
// Attaches theItr to this PtrVec.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtor (WitPtrVec);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitVector <void *> myVector_;
//
// The Vector that stores the data for this PtrVec.
};
d131 62
a192 62
template <typename Elem>
class WitPtrVecItr
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

inline WitPtrVecItr ():

myPtrVecPtr_ (NULL),
myIdx_       (-1)
{
}

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

inline ~WitPtrVecItr ()
{
}

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

inline void attachTo (const WitPtrVec <Elem> & thePtrVec);
//
// Attaches this PtrVecItr to thePtrVec.

inline bool advance (Elem * & theElem);
//
// Advances this PtrVecItr.
// If, after the advance, this PtrVecItr still refers to a valid Elem
// in myPtrVecPtr_, theElem is set to it and the function returns true.
// Otherwise, this PtrVecItr is detached from myPtrVecPtr_ and the
// function returns false.

accessFunc (int, myIdx);

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitPtrVecItr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

const WitPtrVec <Elem> * myPtrVecPtr_;
//
// Pointer to the PtrVec through which this PtrVecItr iterates.

int myIdx_;
//
// The current index into * myPtrVecPtr_.
};
d198 7
a204 7
template <typename Elem>
inline void WitPtrVec <Elem>::attachItr (
WitPtrVecItr <Elem> & theItr)
const
{
theItr.attachTo (* this);
}
d208 5
a212 5
template <typename Elem>
inline void WitPtrVecItr <Elem>::attachTo (
const WitPtrVec <Elem> & thePtrVec)
{
myPtrVecPtr_ = & thePtrVec;
d214 2
a215 2
myIdx_       = -1;
}
d219 4
a222 4
template <typename Elem>
inline bool WitPtrVecItr <Elem>::advance (Elem * & theElem)
{
witAssert (myPtrVecPtr_ != NULL);
d224 1
a224 1
myIdx_ ++;
d226 3
a228 3
if (myIdx_ < myPtrVecPtr_->length ())
{
theElem = (* myPtrVecPtr_)[myIdx_];
d230 6
a235 6
return true;
}
else
{
myPtrVecPtr_ = NULL;
myIdx_       = -1;
d237 3
a239 3
return false;
}
}
@


1.29
log
@Multi-objective mode
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d32 90
a121 90
template <typename Elem> 
      class WitPtrVec
   {
      friend class WitAbsPVecCompFtor <Elem>;

   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitPtrVec ():
            myVector_ ()
         {
         }

      inline WitPtrVec (int nElems):
            myVector_ (nElems, NULL)
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitPtrVec ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void resize (int nElems)
         {
         myVector_.resize (nElems, NULL);
         }

      inline void clear ()
         {
         myVector_.clear ();
         }

      inline void operator = (const WitPtrVec & thePtrVec)
         {
         myVector_ = thePtrVec.myVector_;
         }

      inline int length () const
         {
         return myVector_.length ();
         }

      inline Elem & myElemAt (int theIndex) const
         {
         witAssert ((* this)[theIndex] != NULL);

         return   * (* this)[theIndex];
         }

      inline Elem * operator [] (int theIndex) const
         {
         return reinterpret_cast <Elem *> (myVector_[theIndex]) ;
         }

      inline Elem * & operator [] (int theIndex)
         {
         return reinterpret_cast <Elem * &> (myVector_[theIndex]) ;
         }

      inline void attachItr (WitPtrVecItr <Elem> & theItr) const;
         //
         // Attaches theItr to this PtrVec.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtor (WitPtrVec);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitVector <void *> myVector_;
         //
         // The Vector that stores the data for this PtrVec.
   };
d131 62
a192 62
template <typename Elem> 
      class WitPtrVecItr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitPtrVecItr ():

            myPtrVecPtr_ (NULL),
            myIdx_       (-1)
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitPtrVecItr ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void attachTo (const WitPtrVec <Elem> & thePtrVec);
         //
         // Attaches this PtrVecItr to thePtrVec.

      inline bool advance (Elem * & theElem);
         //
         // Advances this PtrVecItr.
         // If, after the advance, this PtrVecItr still refers to a valid Elem
         // in myPtrVecPtr_, theElem is set to it and the function returns true.
         // Otherwise, this PtrVecItr is detached from myPtrVecPtr_ and the
         // function returns false.

      accessFunc (int, myIdx);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPtrVecItr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitPtrVec <Elem> * myPtrVecPtr_;
         //
         // Pointer to the PtrVec through which this PtrVecItr iterates.

      int myIdx_;
         //
         // The current index into * myPtrVecPtr_.
   };
d198 7
a204 7
template <typename Elem> 
      inline void WitPtrVec <Elem>::attachItr (
         WitPtrVecItr <Elem> & theItr)
         const
   {
   theItr.attachTo (* this);
   }
d208 5
a212 5
template <typename Elem> 
      inline void WitPtrVecItr <Elem>::attachTo (
         const WitPtrVec <Elem> & thePtrVec)
   {
   myPtrVecPtr_ = & thePtrVec;
d214 2
a215 2
   myIdx_       = -1;
   }
d219 4
a222 4
template <typename Elem> 
      inline bool WitPtrVecItr <Elem>::advance (Elem * & theElem)
   {
   witAssert (myPtrVecPtr_ != NULL);
d224 1
a224 1
   myIdx_ ++;
d226 3
a228 3
   if (myIdx_ < myPtrVecPtr_->length ())
      {
      theElem = (* myPtrVecPtr_)[myIdx_];
d230 6
a235 6
      return true;
      }
   else
      {
      myPtrVecPtr_ = NULL;
      myIdx_       = -1;
d237 3
a239 3
      return false;
      }
   }
@


1.28
log
@Stochastic Implosion
@
text
@d48 1
a48 1
      WitPtrVec (int nElems):
@


1.27
log
@Updated the copyright date on all source files.
@
text
@d85 1
a85 1
      inline Elem & operator () (int theIndex) const
@


1.26
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.25
log
@[shared-resource pegging]
@
text
@d48 1
a48 1
      WitPtrVec (WitSiz nElems):
d65 1
a65 1
      inline void resize (WitSiz nElems)
d80 1
a80 1
      inline WitSiz length () const
@


1.24
log
@[shared-resource pegging]
@
text
@d17 1
d102 4
d123 118
@


1.23
log
@[shared-resource pegging]
@
text
@d34 1
a34 1
      friend class WitAbsPVecSorter <Elem>;
@


1.22
log
@[shared-resource pegging]
@
text
@d47 1
a47 1
      WitPtrVec (size_t nElems):
d64 1
a64 1
      inline void resize (size_t nElems)
d79 1
a79 1
      inline size_t length () const
@


1.21
log
@[shared-resource pegging]
@
text
@d34 2
@


1.20
log
@[shared-resource pegging]
@
text
@d25 2
a26 2
// This template is implemented as a typed wrapper for class Vector (TlPtr).
// See class Vector (TlPtr) for comments on the member functions.
@


1.19
log
@[multi-thread]
@
text
@a19 1
#include <TlObj.h>
d91 1
a91 1
         return fromTlObj_cast <Elem> (myVector_[theIndex]) ;
d96 1
a96 1
         return fromTlObjRef_cast <Elem> (myVector_[theIndex]) ;
d111 1
a111 1
      WitVector <WitTlObj *> myVector_;
@


1.18
log
@Double Precision.
@
text
@d16 1
a16 1
// Contains the declaration of class template PtrVec <TheType>.
d23 1
a23 1
// Class template PtrVec <TheType>
d25 1
a25 1
// A vector of pointers to TheType.
d32 1
a32 1
template <typename TheType> 
d83 1
a83 1
      inline TheType & operator () (int theIndex) const
d90 1
a90 1
      inline TheType * operator [] (int theIndex) const
d92 1
a92 1
         return fromTlObj_cast <TheType> (myVector_[theIndex]) ;
d95 1
a95 1
      inline TheType * & operator [] (int theIndex)
d97 1
a97 1
         return fromTlObjRef_cast <TheType> (myVector_[theIndex]) ;
@


1.17
log
@Continued implementation of PIP.
@
text
@d73 1
a73 1
      inline void copy (const WitPtrVec & thePtrVec)
d75 1
a75 1
         myVector_.copy (thePtrVec.myVector_);
d106 1
a106 1
      noCopyCtorAssign (WitPtrVec);
@


1.16
log
@Replaced some C-style casts with C++ style casts.
@
text
@d33 1
a33 1
      class WitPtrVec: public WitUtil
@


1.15
log
@Various internal changes.
@
text
@d20 1
d92 1
a92 1
         return (TheType *)   myVector_[theIndex];
d97 1
a97 1
         return (TheType * &) myVector_[theIndex];
@


1.14
log
@Various internal changes.
@
text
@d72 1
a72 1
      inline void copy (const WitPtrVec <TheType> & thePtrVec)
d105 1
a105 1
      noCopyCtorAssignTemp (WitPtrVec, TheType);
@


1.13
log
@Preliminary work on single source.
@
text
@d31 1
a31 1
template <class TheType> 
@


1.12
log
@Preliminary work on single source.
@
text
@d72 1
a72 1
      inline void operator = (const WitPtrVec <TheType> & thePtrVec)
d105 1
a105 3
      WitPtrVec (const WitPtrVec <TheType> &);
         //
         // See noCopyCtor in macs.h.
d111 1
a111 1
      WitVector <WitTlObjPtr> myVector_;
@


1.11
log
@Replaced Mapping (*, WitTlObjPtr) with PtrMap <*, *>.
@
text
@d74 1
a74 1
         myVector_ = thePtrVec.myVector_;
d113 1
a113 1
      WitVector (WitTlObjPtr) myVector_;
@


1.10
log
@Implemented class template PtrMap.
@
text
@a76 5
      inline void operator = (TheType * theObject)
         {
         myVector_ = (WitTlObj *) theObject;
         }

@


1.9
log
@More templates.
@
text
@d77 5
@


1.8
log
@Replaced use of CandIndex with CmrCand in Consumption Multi-Route subsystem.
@
text
@d16 1
a16 1
// Contains the declaration of generic class PtrVec.
d22 1
a22 1
// Generic class PtrVec (TheType)
d25 1
a25 1
// This class is implemented as a typed wrapper for class Vector (TlPtr).
d31 86
a116 104
//------------------------------------------------------------------------------
// Generic class declaration macro.
//------------------------------------------------------------------------------

#define WitPtrVecdeclare(TheType)                                              \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitPtrVec (TheType): public WitUtil                                      \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline WitPtrVec (TheType) ():                                           \
            myVector_ ()                                                       \
         {                                                                     \
         }                                                                     \
                                                                               \
      WitPtrVec (TheType) (size_t nElems):                                     \
            myVector_ (nElems, NULL)                                           \
         {                                                                     \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline ~WitPtrVec (TheType) ()                                           \
         {                                                                     \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline void resize (size_t nElems)                                       \
         {                                                                     \
         myVector_.resize (nElems, NULL);                                      \
         }                                                                     \
                                                                               \
      inline void clear ()                                                     \
         {                                                                     \
         myVector_.clear ();                                                   \
         }                                                                     \
                                                                               \
      inline void operator = (const WitPtrVec (TheType) & thePtrVec)           \
         {                                                                     \
         myVector_ = thePtrVec.myVector_;                                      \
         }                                                                     \
                                                                               \
      inline size_t length () const                                            \
         {                                                                     \
         return myVector_.length ();                                           \
         }                                                                     \
                                                                               \
      inline TheType & operator () (int theIndex) const                        \
         {                                                                     \
         witAssert ((* this)[theIndex] != NULL);                               \
                                                                               \
         return   * (* this)[theIndex];                                        \
         }                                                                     \
                                                                               \
      inline TheType * operator [] (int theIndex) const                        \
         {                                                                     \
         return (TheType *)   myVector_[theIndex];                             \
         }                                                                     \
                                                                               \
      inline TheType * & operator [] (int theIndex)                            \
         {                                                                     \
         return (TheType * &) myVector_[theIndex];                             \
         }                                                                     \
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtor (WitPtrVec (TheType));                                        \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member data.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitVector (WitTlObjPtr) myVector_;                                       \
         /*                                                                  */\
         /* The Vector that stores the data for this PtrVec.                 */\
   };                                                                          \

//------------------------------------------------------------------------------
// Declarations of all specific cases of the generic classes declared in this
// file.
//------------------------------------------------------------------------------

declare (WitPtrVec, WitBoundPair)
declare (WitPtrVec, WitCoeff)
declare (WitPtrVec, WitComponent)
declare (WitPtrVec, WitList (WitNode))
declare (WitPtrVec, WitMsg)
declare (WitPtrVec, WitString)
declare (WitPtrVec, WitTlObjPtrTVec)
@


1.7
log
@Removed indexes from production multi-route.
Other refactoring.
@
text
@a128 1
declare (WitPtrVec, WitCmrCand)
@


1.6
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@a127 1
declare (WitPtrVec, WitBopEntry)
d129 1
a131 1
declare (WitPtrVec, WitConsEntry)
@


1.5
log
@Removed class MeAltPt.
Changed name of class MeSelPt to MeAltPt.
Implemented de-selection of colliding MeAltPts.
@
text
@d118 1
a118 1
      WitVector (WitTlPtr) myVector_;                                          \
d136 1
a136 1
declare (WitPtrVec, WitTlPtrTVec)
@


1.4
log
@Implemented and used class SelMgr.
@
text
@a133 1
declare (WitPtrVec, WitMeAltPt)
@


1.3
log
@Completed a limited implementation of coarse selection splitting for BOP
entries.
@
text
@d19 1
a19 1
#include <RWClient.h>
@


1.2
log
@Further development of coarse selection splitting.
@
text
@d124 2
a125 2
// Declarations of all specific cases of the generic classes and functions
// declared in this file.
@


1.1
log
@Some minor changes.
@
text
@d25 2
a26 2
// This class is implemented as a typed wrapper for class Vector (TypelessPtr).
// See class Vector (TypelessPtr) for comments on the member functions.
d118 1
a118 1
      WitVector (WitTypelessPtr) myVector_;                                    \
d137 1
@

