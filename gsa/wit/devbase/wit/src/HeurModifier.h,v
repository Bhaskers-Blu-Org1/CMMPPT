head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2011.09.28.23.49.26;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.09.24.00.27.46;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.08.30.20.17.34;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2010.10.01.18.59.12;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2010.09.30.19.54.05;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2010.09.29.22.21.22;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2010.09.29.22.07.52;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2010.09.29.20.57.00;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2010.09.29.17.53.12;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.28.22.38.18;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.28.21.54.07;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.24.22.57.30;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.24.19.42.26;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.24.18.17.21;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef HeurModifierH
#define HeurModifierH

//------------------------------------------------------------------------------
// Header file: "HeurModifier.h"
//
// Contains the declaration of class HeurModifier.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PerSglStack.h>
#include <ObjStack.h>
#include <Mapping.h>

//------------------------------------------------------------------------------
// Class HeurModifier
//
// "Heuristic Modifier"
// Responsible for implementing the modifiable heuristic allocation capability.
//------------------------------------------------------------------------------

class WitHeurModifier: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitHeurModifier (WitAvailSched *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitHeurModifier ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void modifyForExecVol (
            WitOperation *       theOpn,
            const WitIVRealArg & theVec);
         //
         // Modifies the state of heuristic allocation for setting
         // theOpn->execVol () to theVec.

      void modifyForSubVol (
            WitSubEntry *        theSub,
            const WitIVRealArg & theVec);
         //
         // Modifies the state of heuristic allocation for setting
         // theSub->subVol () to theVec.

      void modifyForShipVol (
            WitDemand *          theDemand,
            const WitIVRealArg & theVec);
         //
         // Modifies the state of heuristic allocation for setting
         // theDemand->shipVol () to theVec.

      void checkFeasibility ();
         //
         // Performs feasibility checking.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void checkPreconditions ();
         //
         // Verifies that the required preconditions for modifiable heuristic
         // allocation are satisfied.

      //------------------------------------------------------------------------

      void recNeedsForExecVol (
            WitOperation *       theOpn,
            const WitIVRealArg & theVec);
         //
         // Records all necessary feasibility checking for setting
         // theOpn->execVol () to theVec.

      void recNeedsForSubVol (
            WitSubEntry *        theSub,
            const WitIVRealArg & theVec);
         //
         // Records all necessary feasibility checking for setting
         // theSub->subVol () to theVec.

      void recNeedsForShipVol (
            WitDemand *          theDemand,
            const WitIVRealArg & theVec);
         //
         // Records all necessary feasibility checking for setting
         // theDemand->shipVol () to theVec.

      //------------------------------------------------------------------------

      void recPartPairNeed (WitPart * thePart, WitPeriod thePer);
         //
         // Records that feasibility checking is needed for thePart in thePer.

      //------------------------------------------------------------------------

      void modAvailForExecVol (
            WitOperation *       theOpn,
            const WitIVRealArg & theVec);
         //
         // Modifies the availability schedule for setting theOpn->execVol () to
         // theVec.

      void modAvailForSubVol (
            WitSubEntry *        theSub,
            const WitIVRealArg & theVec);
         //
         // Modifies the availability schedule for setting theSub->subVol () to
         // theVec.

      void modAvailForShipVol (
            WitDemand *          theDemand,
            const WitIVRealArg & theVec);
         //
         // Modifies the availability schedule for setting theDemand->shipVol ()
         // to theVec.

      //------------------------------------------------------------------------

      void checkCapPairs ();
         //
         // Performs feasibility checking on all needed (Operation, Period)
         // pairs.

      void checkMats ();
         //
         // Performs feasibility checking on all needed Materials.

      void checkOpnPairs ();
         //
         // Performs feasibility checking on all needed (Operation, Period)
         // pairs.

      void checkBomEntPairs ();
         //
         // Performs feasibility checking on all needed (BomEntry, Period)
         // pairs.

      void checkDemands ();
         //
         // Performs feasibility checking on all needed Demands.

      //------------------------------------------------------------------------

      void checkScrapCon (WitCapacity * theCap, WitPeriod thePer);
         //
         // Checks the scrapVol constraint for theCap in thePer.

      void checkScrapCon (WitMaterial * theMat);
         //
         // Checks the scrapVol constraint for theMat in all periods.

      void checkNonExecCon (WitOperation * theOpn, WitPeriod execPer);
         //
         // Checks the non-executable constraint for theOpn in execPer.

      void checkExecHUBCon (WitOperation * theOpn, WitPeriod execPer);
         //
         // Checks the hard upper bound constraint for theOpn in execPer.

      void checkLotSizeCon (WitOperation * theOpn, WitPeriod execPer);
         //
         // Checks the lot size constraint for theOpn in execPer.

      void checkSubCon (WitBomEntry * theBomEnt, WitPeriod execPer);
         //
         // Checks the substitution constraint for theBomEnt in execPer.

      void checkCumShipCon (WitDemand * theDemand);
         //
         // Checks the cumulative shipment constraint for theDemand in all
         // periods.

      //------------------------------------------------------------------------

      noCopyCtorAssign (WitHeurModifier);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitAvailSched * const myAvailSched_;
         //
         // The AvailSched for this HeurModifier.

      WitPerSglStack <WitPart>      toChkCapPairs_;
      WitPerSglStack <WitOperation> toChkOpnPairs_;
      WitPerSglStack <WitBomEntry>  toChkBomEntPairs_;
         //
         // toChkCapPairs_ is the set of pairs (theCap, thePer) for which
         // feasibility checking is needed. The Capacities are stored as Parts.
         //
         // toChkOpnPairs_ is the set of pairs (theOpn, execPer) for which
         // feasibility checking is needed.
         //
         // toChkBomEntPairs_ is the set of pairs (theBomEnt, execPer) for which
         // feasibility checking is needed.

      WitObjStack <WitMaterial> toChkMats_;
      WitObjStack <WitDemand>   toChkDemands_;
         //
         // toChkMats_ is the set of Materials for which 
         // feasibility checking is needed.
         //
         // toChkDemands_ is the set of Demands for which 
         // feasibility checking is needed.

      WitMapping <WitMaterial, bool> chkNeededMat_;
      WitMapping <WitDemand,   bool> chkNeededDemand_;
         //
         // chkNeededMat_ (theMat) is true, iff feasibility checking is
         // needed for theMat.
         //
         // chkNeededDemand_ (theDemand) is true, iff feasibility checking is
         // needed for theDemand.
   };

#endif
@


1.13
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.12
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d32 2
a33 113
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitHeurModifier (WitAvailSched *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitHeurModifier ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void modifyForExecVol (
WitOperation *       theOpn,
const WitIVRealArg & theVec);
//
// Modifies the state of heuristic allocation for setting
// theOpn->execVol () to theVec.

void modifyForSubVol (
WitSubEntry *        theSub,
const WitIVRealArg & theVec);
//
// Modifies the state of heuristic allocation for setting
// theSub->subVol () to theVec.

void modifyForShipVol (
WitDemand *          theDemand,
const WitIVRealArg & theVec);
//
// Modifies the state of heuristic allocation for setting
// theDemand->shipVol () to theVec.

void checkFeasibility ();
//
// Performs feasibility checking.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void checkPreconditions ();
//
// Verifies that the required preconditions for modifiable heuristic
// allocation are satisfied.

//------------------------------------------------------------------------

void recNeedsForExecVol (
WitOperation *       theOpn,
const WitIVRealArg & theVec);
//
// Records all necessary feasibility checking for setting
// theOpn->execVol () to theVec.

void recNeedsForSubVol (
WitSubEntry *        theSub,
const WitIVRealArg & theVec);
//
// Records all necessary feasibility checking for setting
// theSub->subVol () to theVec.

void recNeedsForShipVol (
WitDemand *          theDemand,
const WitIVRealArg & theVec);
//
// Records all necessary feasibility checking for setting
// theDemand->shipVol () to theVec.

//------------------------------------------------------------------------

void recPartPairNeed (WitPart * thePart, WitPeriod thePer);
//
// Records that feasibility checking is needed for thePart in thePer.

//------------------------------------------------------------------------

void modAvailForExecVol (
WitOperation *       theOpn,
const WitIVRealArg & theVec);
//
// Modifies the availability schedule for setting theOpn->execVol () to
// theVec.

void modAvailForSubVol (
WitSubEntry *        theSub,
const WitIVRealArg & theVec);
//
// Modifies the availability schedule for setting theSub->subVol () to
// theVec.

void modAvailForShipVol (
WitDemand *          theDemand,
const WitIVRealArg & theVec);
//
// Modifies the availability schedule for setting theDemand->shipVol ()
// to theVec.

//------------------------------------------------------------------------

void checkCapPairs ();
//
// Performs feasibility checking on all needed (Operation, Period)
// pairs.
d35 203
a237 92
void checkMats ();
//
// Performs feasibility checking on all needed Materials.

void checkOpnPairs ();
//
// Performs feasibility checking on all needed (Operation, Period)
// pairs.

void checkBomEntPairs ();
//
// Performs feasibility checking on all needed (BomEntry, Period)
// pairs.

void checkDemands ();
//
// Performs feasibility checking on all needed Demands.

//------------------------------------------------------------------------

void checkScrapCon (WitCapacity * theCap, WitPeriod thePer);
//
// Checks the scrapVol constraint for theCap in thePer.

void checkScrapCon (WitMaterial * theMat);
//
// Checks the scrapVol constraint for theMat in all periods.

void checkNonExecCon (WitOperation * theOpn, WitPeriod execPer);
//
// Checks the non-executable constraint for theOpn in execPer.

void checkExecHUBCon (WitOperation * theOpn, WitPeriod execPer);
//
// Checks the hard upper bound constraint for theOpn in execPer.

void checkLotSizeCon (WitOperation * theOpn, WitPeriod execPer);
//
// Checks the lot size constraint for theOpn in execPer.

void checkSubCon (WitBomEntry * theBomEnt, WitPeriod execPer);
//
// Checks the substitution constraint for theBomEnt in execPer.

void checkCumShipCon (WitDemand * theDemand);
//
// Checks the cumulative shipment constraint for theDemand in all
// periods.

//------------------------------------------------------------------------

noCopyCtorAssign (WitHeurModifier);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitAvailSched * const myAvailSched_;
//
// The AvailSched for this HeurModifier.

WitPerSglStack <WitPart>      toChkCapPairs_;
WitPerSglStack <WitOperation> toChkOpnPairs_;
WitPerSglStack <WitBomEntry>  toChkBomEntPairs_;
//
// toChkCapPairs_ is the set of pairs (theCap, thePer) for which
// feasibility checking is needed. The Capacities are stored as Parts.
//
// toChkOpnPairs_ is the set of pairs (theOpn, execPer) for which
// feasibility checking is needed.
//
// toChkBomEntPairs_ is the set of pairs (theBomEnt, execPer) for which
// feasibility checking is needed.

WitObjStack <WitMaterial> toChkMats_;
WitObjStack <WitDemand>   toChkDemands_;
//
// toChkMats_ is the set of Materials for which
// feasibility checking is needed.
//
// toChkDemands_ is the set of Demands for which
// feasibility checking is needed.

WitMapping <WitMaterial, bool> chkNeededMat_;
WitMapping <WitDemand,   bool> chkNeededDemand_;
//
// chkNeededMat_ (theMat) is true, iff feasibility checking is
// needed for theMat.
//
// chkNeededDemand_ (theDemand) is true, iff feasibility checking is
// needed for theDemand.
};
@


1.11
log
@Modifiable Heuristic Allocation
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d32 113
a144 2
   {
   public:
d146 92
a237 203
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitHeurModifier (WitAvailSched *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitHeurModifier ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void modifyForExecVol (
            WitOperation *       theOpn,
            const WitIVRealArg & theVec);
         //
         // Modifies the state of heuristic allocation for setting
         // theOpn->execVol () to theVec.

      void modifyForSubVol (
            WitSubEntry *        theSub,
            const WitIVRealArg & theVec);
         //
         // Modifies the state of heuristic allocation for setting
         // theSub->subVol () to theVec.

      void modifyForShipVol (
            WitDemand *          theDemand,
            const WitIVRealArg & theVec);
         //
         // Modifies the state of heuristic allocation for setting
         // theDemand->shipVol () to theVec.

      void checkFeasibility ();
         //
         // Performs feasibility checking.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void checkPreconditions ();
         //
         // Verifies that the required preconditions for modifiable heuristic
         // allocation are satisfied.

      //------------------------------------------------------------------------

      void recNeedsForExecVol (
            WitOperation *       theOpn,
            const WitIVRealArg & theVec);
         //
         // Records all necessary feasibility checking for setting
         // theOpn->execVol () to theVec.

      void recNeedsForSubVol (
            WitSubEntry *        theSub,
            const WitIVRealArg & theVec);
         //
         // Records all necessary feasibility checking for setting
         // theSub->subVol () to theVec.

      void recNeedsForShipVol (
            WitDemand *          theDemand,
            const WitIVRealArg & theVec);
         //
         // Records all necessary feasibility checking for setting
         // theDemand->shipVol () to theVec.

      //------------------------------------------------------------------------

      void recPartPairNeed (WitPart * thePart, WitPeriod thePer);
         //
         // Records that feasibility checking is needed for thePart in thePer.

      //------------------------------------------------------------------------

      void modAvailForExecVol (
            WitOperation *       theOpn,
            const WitIVRealArg & theVec);
         //
         // Modifies the availability schedule for setting theOpn->execVol () to
         // theVec.

      void modAvailForSubVol (
            WitSubEntry *        theSub,
            const WitIVRealArg & theVec);
         //
         // Modifies the availability schedule for setting theSub->subVol () to
         // theVec.

      void modAvailForShipVol (
            WitDemand *          theDemand,
            const WitIVRealArg & theVec);
         //
         // Modifies the availability schedule for setting theDemand->shipVol ()
         // to theVec.

      //------------------------------------------------------------------------

      void checkCapPairs ();
         //
         // Performs feasibility checking on all needed (Operation, Period)
         // pairs.

      void checkMats ();
         //
         // Performs feasibility checking on all needed Materials.

      void checkOpnPairs ();
         //
         // Performs feasibility checking on all needed (Operation, Period)
         // pairs.

      void checkBomEntPairs ();
         //
         // Performs feasibility checking on all needed (BomEntry, Period)
         // pairs.

      void checkDemands ();
         //
         // Performs feasibility checking on all needed Demands.

      //------------------------------------------------------------------------

      void checkScrapCon (WitCapacity * theCap, WitPeriod thePer);
         //
         // Checks the scrapVol constraint for theCap in thePer.

      void checkScrapCon (WitMaterial * theMat);
         //
         // Checks the scrapVol constraint for theMat in all periods.

      void checkNonExecCon (WitOperation * theOpn, WitPeriod execPer);
         //
         // Checks the non-executable constraint for theOpn in execPer.

      void checkExecHUBCon (WitOperation * theOpn, WitPeriod execPer);
         //
         // Checks the hard upper bound constraint for theOpn in execPer.

      void checkLotSizeCon (WitOperation * theOpn, WitPeriod execPer);
         //
         // Checks the lot size constraint for theOpn in execPer.

      void checkSubCon (WitBomEntry * theBomEnt, WitPeriod execPer);
         //
         // Checks the substitution constraint for theBomEnt in execPer.

      void checkCumShipCon (WitDemand * theDemand);
         //
         // Checks the cumulative shipment constraint for theDemand in all
         // periods.

      //------------------------------------------------------------------------

      noCopyCtorAssign (WitHeurModifier);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitAvailSched * const myAvailSched_;
         //
         // The AvailSched for this HeurModifier.

      WitPerSglStack <WitPart>      toChkCapPairs_;
      WitPerSglStack <WitOperation> toChkOpnPairs_;
      WitPerSglStack <WitBomEntry>  toChkBomEntPairs_;
         //
         // toChkCapPairs_ is the set of pairs (theCap, thePer) for which
         // feasibility checking is needed. The Capacities are stored as Parts.
         //
         // toChkOpnPairs_ is the set of pairs (theOpn, execPer) for which
         // feasibility checking is needed.
         //
         // toChkBomEntPairs_ is the set of pairs (theBomEnt, execPer) for which
         // feasibility checking is needed.

      WitObjStack <WitMaterial> toChkMats_;
      WitObjStack <WitDemand>   toChkDemands_;
         //
         // toChkMats_ is the set of Materials for which 
         // feasibility checking is needed.
         //
         // toChkDemands_ is the set of Demands for which 
         // feasibility checking is needed.

      WitMapping <WitMaterial, bool> chkNeededMat_;
      WitMapping <WitDemand,   bool> chkNeededDemand_;
         //
         // chkNeededMat_ (theMat) is true, iff feasibility checking is
         // needed for theMat.
         //
         // chkNeededDemand_ (theDemand) is true, iff feasibility checking is
         // needed for theDemand.
   };
@


1.10
log
@Modifiable Heuristic Allocation
@
text
@d166 1
a166 1
      void checkAvailCon (WitCapacity * theCap, WitPeriod thePer);
d168 1
a168 1
         // Checks the net availability constraint for theCap in thePer.
d170 1
a170 1
      void checkAvailCon (WitMaterial * theMat);
d172 1
a172 1
         // Checks the net availability constraint for theMat in all periods.
@


1.9
log
@Modifiable Heuristic Allocation
@
text
@d146 4
d168 5
a172 1
         // Checks the non-executable constraint for theCap in thePer.
d192 2
a193 1
         // Checks the cumulative shipment constraint for theDemand in execPer.
d207 1
a207 1
      WitPerSglStack <WitPart>      toChkPartPairs_;
d211 2
a212 2
         // toChkPartPairs_ is the set of pairs (thePart, thePer) for which
         // feasibility checking is needed. The Parts are al Capacities.
d220 5
a224 1
      WitObjStack <WitDemand> toChkDemands_;
d229 5
a233 1
      WitMapping <WitDemand, bool> chkNeededDemand_;
@


1.8
log
@Modifiable Heuristic Allocation
@
text
@d89 1
a89 1
      void identifyForExecVol (
d93 1
a93 1
         // Identifies all necessary feasibility checking for setting
d96 1
a96 1
      void identifyForSubVol (
d100 1
a100 1
         // Identifies all necessary feasibility checking for setting
d103 1
a103 1
      void identifyForShipVol (
d107 1
a107 1
         // Identifies all necessary feasibility checking for setting
d112 1
a112 1
      void identifyPartPair (WitPart * thePart, WitPeriod thePer);
d114 1
a114 2
         // Identifies that feasibility checking is needed for thePart in
         // thePer.
@


1.7
log
@Modifiable Heuristic Allocation
@
text
@d89 3
a91 1
      void identForExecVol (WitOperation * theOpn, const WitIVRealArg & theVec);
d96 3
a98 1
      void identForSubVol (WitSubEntry * theSub, const WitIVRealArg & theVec);
d103 3
a105 1
      void identForShipVol (WitDemand * theDemand, const WitIVRealArg & theVec);
d112 1
a112 1
      void identPartPair (WitPart * thePart, WitPeriod thePer);
@


1.6
log
@Modifiable Heuristic Allocation
@
text
@d87 2
d104 9
d134 7
d146 15
d163 1
a163 1
         // Checks the non-executable constraint theOpn in execPer.
d167 1
a167 1
         // Checks the hard upper bound constraint theOpn in execPer.
d171 1
a171 1
         // Checks the lot size constraint theOpn in execPer.
d173 1
a173 1
      void checkBomEntPairs ();
d175 1
a175 2
         // Performs feasibility checking on all needed (BomEntry, Period)
         // pairs.
d177 1
a177 1
      void checkDemands ();
d179 3
a181 1
         // Performs feasibility checking on all needed Demands.
d193 1
d197 3
@


1.5
log
@Modifiable Heuristic Allocation
@
text
@d87 1
a87 1
      void indForExecVol (WitOperation * theOpn, const WitIVRealArg & theVec);
d89 1
a89 1
         // Indicates all necessary feasibility checking for setting
d92 1
a92 1
      void indForSubVol (WitSubEntry * theSub, const WitIVRealArg & theVec);
d94 1
a94 1
         // Indicates all necessary feasibility checking for setting
d97 1
a97 1
      void indForShipVol (WitDemand * theDemand);
d99 2
a100 2
         // Indicates all necessary feasibility checking for setting
         // theDemand->shipVol ().
@


1.4
log
@Modifiable Heuristic Allocation
@
text
@d21 2
d72 1
a72 1
      void delayedFeasCheck ();
d74 1
a74 1
         // Performs delayed feasibility checking.
a86 5
      void checkForShipVol (WitDemand * theDemand, const WitIVRealArg & theVec);
         //
         // Does immediate feasibility checking for setting
         // theDemand->shipVol () to theVec.

d89 2
a90 2
         // Indicates all necessary delayed feasibility checking for setting
         // setting theOpn->execVol () to theVec.
d94 1
a94 1
         // Indicates all necessary delayed feasibility checking for setting
d97 5
d125 2
a126 2
         // Performs delayed feasibility checking on all needed
         // (Operation, Period) pairs.
d142 6
a147 2
         // Performs delayed feasibility checking on all needed
         // (BomEntry, Period) pairs.
d159 5
a163 2
      WitPerSglStack <WitOperation> myOpnPairs_;
      WitPerSglStack <WitBomEntry>  myBomEntPairs_;
d165 1
a165 1
         // myOpnPairs_ is the set of pairs (theOpn, execPer) for which delayed
d167 7
d175 2
a176 2
         // myBomEntPairs_ is the set of pairs (theBomEnt, execPer) for which
         // delayed feasibility checking is needed.
@


1.3
log
@Modifiable Heuristic Allocation
@
text
@d20 1
a20 2
#include <Schedule.h>
#include <PairStack.h>
a99 10
      template <typename ConcComp>
               void pushUnique (
            WitPairStack <ConcComp, WitPeriod> & thePairs,
            WitSchedule  <ConcComp, bool> &      theSched,
            ConcComp *                           theConcComp,
            WitPeriod                            thePer);
         //
         // Pushes (theConcComp, thePer) onto thePairs, unless it's already in
         // thePairs, as indicated by theSched.

d153 2
a154 2
      WitPairStack <WitOperation, WitPeriod> myOpnPairs_;
      WitPairStack <WitBomEntry,  WitPeriod> myBomEntPairs_;
a160 9

      WitSchedule <WitOperation, bool> inOpnPairs_;
      WitSchedule <WitBomEntry,  bool> inBomEntPairs_;
         //
         // inOpnPairs_ (theOpn)[execPer] is true, iff
         // (theOpn, execPer) is in myOpnPairs_.
         //
         // inBomEntPairs_ (theBomEnt)[execPer] is true, iff
         // (theBomEnt, execPer) is in myBomEntPairs_.
@


1.2
log
@Modifiable Heuristic Allocation
@
text
@a85 5
      void checkForExecVol (WitOperation * theOpn, const WitIVRealArg & theVec);
         //
         // Does immediate feasibility checking for setting theOpn->execVol ()
         // to theVec.

a90 24
      void checkNonExecCon (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         theValue);
         //
         // Checks the non-executable constraint for setting
         // theOpn->execVol ()[execPer] to theValue.

      void checkExecHUBCon (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         theValue);
         //
         // Checks the hard upper bound constraint for setting
         // theOpn->execVol ()[execPer] to theValue.

      void checkLotSizeCon (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         theValue);
         //
         // Checks the lot size constraint for setting
         // theOpn->execVol ()[execPer] to theValue.

d132 6
a137 1
      void checkSubCons ();
d139 14
a152 1
         // Checks the substitution constraints that need to checked.
d164 5
a168 1
      WitPairStack <WitBomEntry, WitPeriod> pairsToSubCheck_;
d170 2
a171 2
         // The set of pairs (theBomEnt, execPer) for which the substitution
         // constraint on theBomEnt in execPer needs to be checked.
d173 5
a177 1
      WitSchedule <WitBomEntry, bool> toSubCheck_;
d179 2
a180 2
         // toSubCheck_ (theBomEnt)[execPer] is true, iff (theBomEnt, execPer)
         // is in pairsToSubCheck_.
@


1.1
log
@Modifiable heuristic allocation
@
text
@d120 1
a120 1
      void planForExecVol (WitOperation * theOpn, const WitIVRealArg & theVec);
d122 2
a123 2
         // Plans for delayed feasibility checking for setting
         // theOpn->execVol () to theVec.
d125 1
a125 1
      void planForSubVol (WitSubEntry * theSub, const WitIVRealArg & theVec);
d127 2
a128 2
         // Plans for delayed feasibility checking for setting theSub->subVol ()
         // to theVec.
d130 6
a135 1
      void planToSubCheck (WitBomEntry * theBomEnt, WitPeriod execPer);
d137 2
a138 1
         // Plans to check the substitution constraint on theBomEnt in execPer.
d140 1
a140 1
      void reviseForExecVol (
d144 1
a144 1
         // Revises the availability schedule for setting theOpn->execVol () to
d147 1
a147 1
      void reviseForSubVol (
d151 1
a151 1
         // Revises the availability schedule for setting theSub->subVol () to
d154 1
a154 1
      void reviseForShipVol (
d158 1
a158 1
         // Revises the availability schedule for setting theDemand->shipVol ()
@

