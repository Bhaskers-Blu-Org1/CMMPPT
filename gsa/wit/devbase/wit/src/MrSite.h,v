head	1.13;
access;
symbols
	sce_5_01_20080919:1.10
	latest_sce_4_20_20060523:1.10.0.2
	sce_4_20_20060523:1.10
	latest_sce4_20_OSL:1.9.0.2
	sce_4_20_OSL:1.9
	sce_410_withVa:1.9
	sce_4_05_20040511:1.8
	sce_4_00_20040201:1.8
	nextGenBranch:1.8.0.2
	nextGenRoot:1.8
	sce_3_30_20030627:1.8
	EndRw-branch:1.1.0.4
	Root-of-EndRw:1.1
	rwToStl:1.1.0.2;
locks; strict;
comment	@ * @;


1.13
date	2011.09.28.23.49.34;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.09.24.00.27.54;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.08.30.20.17.39;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.02.17.34.02;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.09.19.22.50;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.03.28.23.05.31;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.21.21.35.29;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.03.20.19.03.57;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.19.16.48.20;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.07.21.34.17;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.02.22.18.33;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.26.23.28.48;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.26.19.05.27;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef MrSiteH
#define MrSiteH

//------------------------------------------------------------------------------
// Header file: "MrSite.h"
//
// Contains the declaration of class MrSite.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PtrTVec.h>

//------------------------------------------------------------------------------
// Class MrSite
//
// "Multi-Route Site"
// Represents a location in the BOM structure at which multi-route selection is
// to be performed.
//
// Implemented in MultiRoute.C.
//------------------------------------------------------------------------------

class WitMrSite: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrSite (WitRtSite *, WitMrCoord *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMrSite ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      WitRtCand * selRtCand (WitPeriod thePer);
         //
         // Returns the RtCand selected to be used at this MrSite in
         // thePer. Invalid, if this MrSite is not explodeable in thePer.

      void printHasAlt ();
         //
         // Prints those MrPts for which hasAlt () is true.

      inline WitMrPt * myMrPtWithAlt (WitPeriod thePer)
            //
            // Returns the MrPt for this MrSite in thePer, if it has an
            // alternative to the current selection; otherwise NULL.
            //
         {
         return
            multiChoice_?
               multiChoiceMrPtWithAlt (thePer):
               NULL;
         }

      WitSelMgr * mySelMgr ();
         //
         // Returns the SelMgr for this MrSite.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitRtSite *,                  myRtSite)
      accessFunc (WitMrCoord *,                 myMrCoord)
      accessFunc (const WitPtrTVec <WitMrPt> &, myMrPt)
      accessFunc (bool,                         multiChoice)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      bool compMultiChoice ();
         //
         // Computes and returns the value to which multiChoice_ should be set.

      void buildMrPts ();
         //
         // Creates the MrPts for this MrSite.

      WitMrPt * multiChoiceMrPtWithAlt (WitPeriod thePer);
            //
            // Returns the MrPt for this MrSite in thePer, if it has an
            // alternative to the current selection; otherwise NULL.
            // multiChoice_ must be true.

      noCopyCtorAssign (WitMrSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRtSite * const myRtSite_;
         //
         // The RtSite for this MrSite.

      WitMrCoord * const myMrCoord_;
         //
         // the MrCoord for this MrSite.

      WitPtrTVec <WitMrPt> myMrPt_;
         //
         // myMrPt_[thePer] is the MrPt owned by this MrSite corresponding to
         // thePer.
         // Allocated only if multiChoice_ is true.

      bool multiChoice_;
         //
         // true, iff there are at least two directions in which the routing
         // could potentially proceed downward from this MrSite.
   };

#endif
@


1.12
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.11
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d33 2
a34 52
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitMrSite (WitRtSite *, WitMrCoord *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitMrSite ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

WitRtCand * selRtCand (WitPeriod thePer);
//
// Returns the RtCand selected to be used at this MrSite in
// thePer. Invalid, if this MrSite is not explodeable in thePer.

void printHasAlt ();
//
// Prints those MrPts for which hasAlt () is true.

inline WitMrPt * myMrPtWithAlt (WitPeriod thePer)
//
// Returns the MrPt for this MrSite in thePer, if it has an
// alternative to the current selection; otherwise NULL.
//
{
return
multiChoice_?
multiChoiceMrPtWithAlt (thePer):
NULL;
}

WitSelMgr * mySelMgr ();
//
// Returns the SelMgr for this MrSite.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitRtSite *,                  myRtSite)
accessFunc (WitMrCoord *,                 myMrCoord)
accessFunc (const WitPtrTVec <WitMrPt> &, myMrPt)
accessFunc (bool,                         multiChoice)
d36 95
a130 45
private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

bool compMultiChoice ();
//
// Computes and returns the value to which multiChoice_ should be set.

void buildMrPts ();
//
// Creates the MrPts for this MrSite.

WitMrPt * multiChoiceMrPtWithAlt (WitPeriod thePer);
//
// Returns the MrPt for this MrSite in thePer, if it has an
// alternative to the current selection; otherwise NULL.
// multiChoice_ must be true.

noCopyCtorAssign (WitMrSite);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitRtSite * const myRtSite_;
//
// The RtSite for this MrSite.

WitMrCoord * const myMrCoord_;
//
// the MrCoord for this MrSite.

WitPtrTVec <WitMrPt> myMrPt_;
//
// myMrPt_[thePer] is the MrPt owned by this MrSite corresponding to
// thePer.
// Allocated only if multiChoice_ is true.

bool multiChoice_;
//
// true, iff there are at least two directions in which the routing
// could potentially proceed downward from this MrSite.
};
@


1.10
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d33 52
a84 2
   {
   public:
d86 45
a130 95
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrSite (WitRtSite *, WitMrCoord *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMrSite ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      WitRtCand * selRtCand (WitPeriod thePer);
         //
         // Returns the RtCand selected to be used at this MrSite in
         // thePer. Invalid, if this MrSite is not explodeable in thePer.

      void printHasAlt ();
         //
         // Prints those MrPts for which hasAlt () is true.

      inline WitMrPt * myMrPtWithAlt (WitPeriod thePer)
            //
            // Returns the MrPt for this MrSite in thePer, if it has an
            // alternative to the current selection; otherwise NULL.
            //
         {
         return
            multiChoice_?
               multiChoiceMrPtWithAlt (thePer):
               NULL;
         }

      WitSelMgr * mySelMgr ();
         //
         // Returns the SelMgr for this MrSite.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitRtSite *,                  myRtSite)
      accessFunc (WitMrCoord *,                 myMrCoord)
      accessFunc (const WitPtrTVec <WitMrPt> &, myMrPt)
      accessFunc (bool,                         multiChoice)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      bool compMultiChoice ();
         //
         // Computes and returns the value to which multiChoice_ should be set.

      void buildMrPts ();
         //
         // Creates the MrPts for this MrSite.

      WitMrPt * multiChoiceMrPtWithAlt (WitPeriod thePer);
            //
            // Returns the MrPt for this MrSite in thePer, if it has an
            // alternative to the current selection; otherwise NULL.
            // multiChoice_ must be true.

      noCopyCtorAssign (WitMrSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRtSite * const myRtSite_;
         //
         // The RtSite for this MrSite.

      WitMrCoord * const myMrCoord_;
         //
         // the MrCoord for this MrSite.

      WitPtrTVec <WitMrPt> myMrPt_;
         //
         // myMrPt_[thePer] is the MrPt owned by this MrSite corresponding to
         // thePer.
         // Allocated only if multiChoice_ is true.

      bool multiChoice_;
         //
         // true, iff there are at least two directions in which the routing
         // could potentially proceed downward from this MrSite.
   };
@


1.9
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.8
log
@Continued implementation of proportionate routing.
@
text
@a20 1
#include <ObjStack.h>
d52 1
a52 1
      WitMrCand * defaultMrCand (WitPeriod thePer);
d54 1
a54 6
         // Returns the MrCand to be used in thePer, when no other is found,
         // if any, else NULL.

      WitMrCand * selMrCand (WitPeriod thePer);
         //
         // Returns the MrCand selected to be used at this MrSite in
d81 4
a84 5
      accessFunc (WitRtSite *,                     myRtSite)
      accessFunc (WitMrCoord *,                    myMrCoord)
      accessFunc (const WitObjStack <WitMrCand> &, myMrCands)
      accessFunc (const WitPtrTVec <WitMrPt>    &, myMrPt)
      accessFunc (bool,                            multiChoice)
d92 1
a92 1
      void buildMrCands ();
d94 1
a94 1
         // Constructs the MrCands owned by this MrSite.
a119 6
      WitObjStack <WitMrCand> myMrCands_;
         //
         // The ordered list of MrCands owned by this MrSite.
         // These MrCands represent the BopEntries or ConsEntries that can be
         // selected from the Part or BomEntry for this MrSite.

@


1.7
log
@Continued implementation of proportionate routing.
@
text
@a62 5
      void findExpRtCands (WitPeriod thePer, WitRtCandStack & theRtCands);
         //
         // Sets theRtCands to be the set of RtCands currently under
         // consideration for explosion from this MrSite in thePer.

@


1.6
log
@Continued implementation of proportionate routing.
@
text
@d63 1
a63 3
      void findExpMrCands (
            WitPeriod                 thePer,
            WitObjStack <WitMrCand> & theMrCands);
d65 1
a65 1
         // Sets theMrCands to be the set of MrCands currently under
a66 1
         // The list is in reverse order.
@


1.5
log
@Continued implementation of proportionate routing.
@
text
@d63 3
a65 1
      void findMrCands (WitPeriod thePer, WitObjStack <WitMrCand> & theMrCands);
d68 1
a68 1
         // consideration for selection from this MrSite in thePer.
@


1.4
log
@Continued implementation of proportionate routing.
@
text
@d16 1
a16 5
// Contains the declaration of the following classes:
//
//    MrSite
//    PmrSite
//    CmrSite
a29 7
// Class Hierarchy:
//
// ProbAssoc
//    MrSite
//       PmrSite
//       CmrSite
//
d38 6
d53 1
a53 5
      void setUp ();
         //
         // Sets up this MrSite.

      virtual WitMrCand * defaultMrCand (WitPeriod thePer) = 0;
a72 27
      virtual void prtID (WitPeriod thePer) = 0;
         //
         // Prints info identifying this MrSite in thePer.

      virtual void printID (WitPeriod thePer) = 0;
         //
         // Prints a string identifying this MrSite in thePer.

      virtual WitPart * sortPart () = 0;
         //
         // Returns the Part and Period associated with this SelPt, for SSPE
         // sorting.

      virtual bool sglSrcMode () = 0;
         //
         // Returns true, iff this MrSite is currently in sgl-src mode.

      virtual WitPart * myPmrPart () = 0;
         //
         // If this MrSite is an instance of class PmrSite, this
         // function returns the corrsponding Part. Otherwise returns NULL.

      virtual WitBomEntry * myCmrBomEnt () = 0;
         //
         // If this MrSite is an instance of class CmrSite, this
         // function returns the corrsponding BomEntry. Otherwise returns NULL.

d85 4
d93 2
a94 1
      accessFunc (WitMrMgr *,                      myMrMgr)
a98 12
   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrSite (WitMrMgr *);

d105 1
a105 1
      virtual void buildMrCands (WitObjStack <WitMrCand> & theMrCands) = 0;
d107 1
a107 6
         // Constructs the MrCands owned by this MrSite and stores them
         // in theMrCands.

      void storeMrCands ();
         //
         // Stores the MrCands owned by this MrSite into myMrMgr_.
d125 5
a129 1
      WitMrMgr * const myMrMgr_;
d131 1
a131 1
         // The MrMgr that owns this MrSite.
a148 128
   };

//------------------------------------------------------------------------------
// Class PmrSite
//
// "Production Multi-Route Site"
// Represents a Part at which production multi-route selection is to be
// performed.
//
// Class Hierarchy:
//
// ProbAssoc
//    MrSite
//       PmrSite
//
// Implemented in MultiRoute.C.
//------------------------------------------------------------------------------

class WitPmrSite: public WitMrSite
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPmrSite (WitPart *, WitSpecMrMgr <WitPart, WitBopEntry> *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPmrSite ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual WitMrCand *   defaultMrCand (WitPeriod);
      virtual void          prtID         (WitPeriod);
      virtual void          printID       (WitPeriod);
      virtual WitPart *     sortPart      ();
      virtual bool          sglSrcMode    ();
      virtual WitPart *     myPmrPart     ();
      virtual WitBomEntry * myCmrBomEnt   ();
      virtual void          buildMrCands  (WitObjStack <WitMrCand> &);
         //
         // Overrides from class MrSite.

      noCopyCtorAssign (WitPmrSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPart * const myPart_;
         //
         // The Part at which the selection is to be made.
   };

//------------------------------------------------------------------------------
// Class CmrSite
//
// "Consumption Multi-Route Site"
// Represents a BomEntry at which consumption multi-route selection is to be
// performed.
//
// Class Hierarchy:
//
// ProbAssoc
//    MrSite
//       CmrSite
//
// Implemented in MultiRoute.C.
//------------------------------------------------------------------------------

class WitCmrSite: public WitMrSite
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitCmrSite (WitBomEntry *, WitSpecMrMgr <WitBomEntry, WitConsEntry> *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitCmrSite ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual WitMrCand *   defaultMrCand (WitPeriod);
      virtual void          prtID         (WitPeriod);
      virtual void          printID       (WitPeriod);
      virtual WitPart *     sortPart      ();
      virtual bool          sglSrcMode    ();
      virtual WitPart *     myPmrPart     ();
      virtual WitBomEntry * myCmrBomEnt   ();
      virtual void          buildMrCands  (WitObjStack <WitMrCand> &);
         //
         // Overrides from class MrSite.

      noCopyCtorAssign (WitCmrSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBomEntry * const myBomEnt_;
         //
         // The BomEntry at which the selection is to be made.
@


1.3
log
@Internal changes.
@
text
@a89 5
      virtual const char * candCompText () = 0;
         //
         // Returns a string indicating the class of a candidate component for
         // this MrSite.

a239 1
      virtual const char *  candCompText  ();
a303 1
      virtual const char *  candCompText  ();
@


1.2
log
@Continued implementation of single-source by the new algorithm.
@
text
@d80 1
a80 1
         // Prints those MrPts for which hasAlt () is TRUE.
d100 1
a100 1
      virtual WitBoolean sglSrcMode () = 0;
d102 1
a102 1
         // Returns TRUE, iff this MrSite is currently in sgl-src mode.
d133 1
a133 1
      accessFunc (WitBoolean,                      multiChoice)
d170 1
a170 1
            // multiChoice_ must be TRUE.
d192 1
a192 1
         // Allocated only if multiChoice_ is TRUE.
d194 1
a194 1
      WitBoolean multiChoice_;
d196 1
a196 1
         // TRUE, iff there are at least two directions in which the routing
d247 1
a247 1
      virtual WitBoolean    sglSrcMode    ();
d312 1
a312 1
      virtual WitBoolean    sglSrcMode    ();
@


1.1
log
@Began implementation of multi-level lot sizes.
@
text
@d100 4
d242 9
a250 8
      virtual WitMrCand *    defaultMrCand (WitPeriod);
      virtual void           prtID         (WitPeriod);
      virtual void           printID       (WitPeriod);
      virtual const char *   candCompText  ();
      virtual WitPart *      sortPart      ();
      virtual WitPart *      myPmrPart     ();
      virtual WitBomEntry *  myCmrBomEnt   ();
      virtual void           buildMrCands  (WitObjStack <WitMrCand> &);
d312 1
@

