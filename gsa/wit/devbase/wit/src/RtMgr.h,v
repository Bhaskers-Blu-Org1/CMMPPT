head	1.23;
access;
symbols
	sce_5_01_20080919:1.20
	latest_sce_4_20_20060523:1.20.0.2
	sce_4_20_20060523:1.20
	latest_sce4_20_OSL:1.19.0.2
	sce_4_20_OSL:1.19
	sce_410_withVa:1.19
	sce_4_05_20040511:1.14
	sce_4_00_20040201:1.14
	nextGenBranch:1.14.0.2
	nextGenRoot:1.14
	sce_3_30_20030627:1.14;
locks; strict;
comment	@ * @;


1.23
date	2011.09.28.23.50.05;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.09.24.00.28.29;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2011.08.30.20.18.06;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2006.05.02.17.34.11;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2005.03.24.19.18.29;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2005.03.22.21.45.54;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2005.03.22.19.09.34;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2005.01.27.21.03.28;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.01.26.23.50.33;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.03.07.23.46.16;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.06.20.28.21;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.03.04.19.08.03;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.28.20.47.39;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.26.23.51.33;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.26.21.42.56;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.25.22.17.10;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.24.23.44.32;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.21.18.56.27;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.19.21.47.33;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.18.23.19.17;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.18.20.11.00;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.13.23.06.33;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.11.18.21.19;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef RtMgrH
#define RtMgrH

//------------------------------------------------------------------------------
// Header file: "RtMgr.h"
//
// Contains the declaration of class RtMgr.
//------------------------------------------------------------------------------

#include <List.h>
#include <PtrMap.h>
#include <Part.h>
#include <BomEntry.h>

//------------------------------------------------------------------------------
// Class RtMgr
//
// "Routing Element Manager"
// Manager of the Routing Element Subsystem.
//
// Class Hierarchy:
//
// ProbAssoc
//    RtMgr
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitRtMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitRtMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitRtMgr ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitList <WitRtSite> &, myRtSites)
      accessFunc (const WitList <WitRtCand> &, myRtCands)
      accessFunc (WitSelector *,               mySelector)

      inline WitRtSite * myRtSiteFor (WitPart * thePart)
         {
         return myRtSiteForPart_ (thePart);
         }

      inline WitRtSite * myRtSiteFor (WitBomEntry * theBomEnt)
         {
         return myRtSiteForBomEnt_ (theBomEnt);
         }

      inline WitRtCand * myRtCandFor (WitBillEntry * theBillEnt)
         {
         return myRtCandFor_ (theBillEnt);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildRtSites ();
         //
         // Builds the RtSites for this RtMgr.

      void buildRtCands ();
         //
         // Builds the RtCands for this RtMgr.

      void print ();
         //
         // Prints the Routing Element Subsystem.

      noCopyCtorAssign (WitRtMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitList <WitRtSite> myRtSites_;
      WitList <WitRtCand> myRtCands_;
         //
         // The RtSites and RtCands owned by this RtMgr.

      WitPtrMap <WitPart,     WitRtSite> myRtSiteForPart_;
      WitPtrMap <WitBomEntry, WitRtSite> myRtSiteForBomEnt_;
         //
         // Mappings from Parts and BomEnts to the RtSites that represent them.

      WitPtrMap <WitBillEntry, WitRtCand> myRtCandFor_;
         //
         // Mappings from BillEnts to the RtCands that represent them.

      WitSelector * const mySelector_;
         //
         // The Selector that owns this RtMgr.
   };

#endif
@


1.22
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.21
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d39 2
a40 47
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitRtMgr (WitSelector *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitRtMgr ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (const WitList <WitRtSite> &, myRtSites)
accessFunc (const WitList <WitRtCand> &, myRtCands)
accessFunc (WitSelector *,               mySelector)

inline WitRtSite * myRtSiteFor (WitPart * thePart)
{
return myRtSiteForPart_ (thePart);
}

inline WitRtSite * myRtSiteFor (WitBomEntry * theBomEnt)
{
return myRtSiteForBomEnt_ (theBomEnt);
}

inline WitRtCand * myRtCandFor (WitBillEntry * theBillEnt)
{
return myRtCandFor_ (theBillEnt);
}

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void buildRtSites ();
//
// Builds the RtSites for this RtMgr.
d42 77
a118 32
void buildRtCands ();
//
// Builds the RtCands for this RtMgr.

void print ();
//
// Prints the Routing Element Subsystem.

noCopyCtorAssign (WitRtMgr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitList <WitRtSite> myRtSites_;
WitList <WitRtCand> myRtCands_;
//
// The RtSites and RtCands owned by this RtMgr.

WitPtrMap <WitPart,     WitRtSite> myRtSiteForPart_;
WitPtrMap <WitBomEntry, WitRtSite> myRtSiteForBomEnt_;
//
// Mappings from Parts and BomEnts to the RtSites that represent them.

WitPtrMap <WitBillEntry, WitRtCand> myRtCandFor_;
//
// Mappings from BillEnts to the RtCands that represent them.

WitSelector * const mySelector_;
//
// The Selector that owns this RtMgr.
};
@


1.20
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d39 47
a85 2
   {
   public:
d87 32
a118 77
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitRtMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitRtMgr ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitList <WitRtSite> &, myRtSites)
      accessFunc (const WitList <WitRtCand> &, myRtCands)
      accessFunc (WitSelector *,               mySelector)

      inline WitRtSite * myRtSiteFor (WitPart * thePart)
         {
         return myRtSiteForPart_ (thePart);
         }

      inline WitRtSite * myRtSiteFor (WitBomEntry * theBomEnt)
         {
         return myRtSiteForBomEnt_ (theBomEnt);
         }

      inline WitRtCand * myRtCandFor (WitBillEntry * theBillEnt)
         {
         return myRtCandFor_ (theBillEnt);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildRtSites ();
         //
         // Builds the RtSites for this RtMgr.

      void buildRtCands ();
         //
         // Builds the RtCands for this RtMgr.

      void print ();
         //
         // Prints the Routing Element Subsystem.

      noCopyCtorAssign (WitRtMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitList <WitRtSite> myRtSites_;
      WitList <WitRtCand> myRtCands_;
         //
         // The RtSites and RtCands owned by this RtMgr.

      WitPtrMap <WitPart,     WitRtSite> myRtSiteForPart_;
      WitPtrMap <WitBomEntry, WitRtSite> myRtSiteForBomEnt_;
         //
         // Mappings from Parts and BomEnts to the RtSites that represent them.

      WitPtrMap <WitBillEntry, WitRtCand> myRtCandFor_;
         //
         // Mappings from BillEnts to the RtCands that represent them.

      WitSelector * const mySelector_;
         //
         // The Selector that owns this RtMgr.
   };
@


1.19
log
@mappingIndex revision.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.18
log
@Second attempt to correct a problem with header file inclusion on
g++ 3.3.3.
@
text
@d21 2
a22 1
#include <Assoc.h>
@


1.17
log
@An attempt to correct a problem with header file inclusion on g++ 3.3.3.
@
text
@a18 2
#include <Part.h>
#include <BomEntry.h>
d21 1
@


1.16
log
@Pegged critical list.
@
text
@d19 2
a20 1
#include <Assoc.h>
@


1.15
log
@Pegged critical list.
@
text
@d71 5
d110 4
@


1.14
log
@Continued implementation of proportionate routing.
@
text
@d21 1
d59 1
d61 9
a69 1
      accessFunc (WitSelector *,               mySelector)
d100 5
@


1.13
log
@Continued implementation of proportionate routing.
@
text
@a52 30
      // Other public member functions.
      //------------------------------------------------------------------------

      template <typename RangeEl>
            inline void allocate (
               WitPtrMap <WitRtSite, RangeEl> & thePtrMap)
         {
         thePtrMap.allocate (myRtSites_.nElements ());
         }

      template <typename RangeEl>
            inline void allocate1D (
               WitPtrSched <WitRtSite, RangeEl> & thePtrSched)
         {
         thePtrSched.allocate1D (myRtSites_.nElements ());
         }
         //
         // Similar to PtrSched::allocate1D (Problem *), but uses this RtMgr to
         // determine # instances.

      template <typename RangeEl>
            inline void allocate1D (
               WitPtrSched <WitRtCand, RangeEl> & thePtrSched)
         {
         thePtrSched.allocate1D (myRtCands_.nElements ());
         }
         //
         // Similar to above, but for RtCands.

      //------------------------------------------------------------------------
@


1.12
log
@Continued implementation of proportionate routing.
@
text
@d44 1
a44 1
      WitRtMgr (WitProblem *);
d57 7
d89 2
d119 4
@


1.11
log
@Continued implementation of proportionate routing.
@
text
@d20 1
a20 1
#include <ObjStack.h>
d60 1
a60 1
         thePtrSched.allocate1D (nRtSites_);
d70 1
a70 1
         thePtrSched.allocate1D (nRtCands_);
d79 2
a80 5
      accessFunc (int,                             nRtSites)
      accessFunc (int,                             nRtCands)

      accessFunc (const WitObjStack <WitRtSite> &, myRtSites)
      accessFunc (const WitObjStack <WitRtCand> &, myRtCands)
d106 2
a107 7
      int nRtSites_;
      int nRtCands_;
         //
         // # RtSites and RtCands owned by the RtMgr.

      WitObjStack <WitRtSite> myRtSites_;
      WitObjStack <WitRtCand> myRtCands_;
@


1.10
log
@Continued implementation of proportionate routing.
@
text
@d28 5
@


1.9
log
@Continued implementation of proportionate routing.
@
text
@d48 23
d74 3
d104 2
a105 1
      WitObjStack <WitRtSite> myRtSites_;
d107 1
a107 1
         // The RtSites owned by this RtMgr.
d109 1
d112 1
a112 1
         // The RtCands owned by this RtMgr.
@


1.8
log
@Continued implementation of proportionate routing.
@
text
@d15 2
d18 68
@


1.7
log
@Continued implementation of proportionate routing.
@
text
@a14 6
//
// Contains the declaration of the following classes:
//
//    RtMgr.
//    ProdRtMgr.
//    ConsRtMgr.
a15 290

#include <Assoc.h>
#include <PtrMap.h>
#include <ObjStack.h>

//------------------------------------------------------------------------------
// Class RtMgr
//
// "Routing Element Manager"
// Abstract manager of a section of the Routing Element Subsystem.
//
// Class Hierarchy:
//
// RtMgr
//    ProdRtMgr
//    ConsRtMgr
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitRtMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints this RtMgr.

      template <typename RangeEl>
            inline void allocate1D (
               WitPtrSched <WitRtSite, RangeEl> & thePtrSched)
         {
         thePtrSched.allocate1D (nRtSites_);
         }
         //
         // Similar to PtrSched::allocate1D (Problem *), but uses this RtMgr to
         // determine # instances.

      template <typename RangeEl>
            inline void allocate1D (
               WitPtrSched <WitRtCand, RangeEl> & thePtrSched)
         {
         thePtrSched.allocate1D (nRtCands_);
         }
         //
         // Similar to above, but for RtCands.

      virtual const char * sectionName () = 0;
         //
         // Returns the name of the section of the Routing Element Subsystem
         // to which this RtMgr is the interface.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (int, nRtSites)
      accessFunc (int, nRtCands)

      accessFunc (const WitObjStack <WitRtSite> &, myRtSites)
      accessFunc (const WitObjStack <WitRtCand> &, myRtCands)

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitRtMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitRtMgr ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void setUp ();
         //
         // Builds the Routing Element Subsystem for this RtMgr.

      void store (WitRtSite * theRtSite);
      void store (WitRtCand * theRtCand);
         //
         // These functions store theRtSite and theRtCand in this RtMgr.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual void buildRtSites () = 0;
      virtual void buildRtCands () = 0;
         //
         // These functions build the RtSites and RtCands for this RtMgr.

      noCopyCtorAssign (WitRtMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      int nRtSites_;
      int nRtCands_;
         //
         // # RtSites and RtCands owned by this RtMgr.

      WitObjStack <WitRtSite> myRtSites_;
      WitObjStack <WitRtCand> myRtCands_;
         //
         // The RtSites and RtCands owned by this RtMgr.
   };

//------------------------------------------------------------------------------
// Class ProdRtMgr
//
// "Production Routing Element Manager"
// Manager of the production section of the Routing Element Subsystem.
//
// Class Hierarchy:
//
// RtMgr
//    ProdRtMgr
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitProdRtMgr: public WitRtMgr
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      static WitProdRtMgr * newInstance (WitProblem * theProblem);
         //
         // Heap-constructs a ProdRtMgr for theProblem and returns it.
         // To be used instead of the ctor.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitProdRtMgr ();

      //------------------------------------------------------------------------
      // Overrides from class RtMgr.
      //------------------------------------------------------------------------

      virtual const char * sectionName  ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      WitRtSite * myRtSiteFor (WitPart *);
      WitRtCand * myRtCandFor (WitBopEntry *);
         //
         // These functions return the RtSite or RtCand owned by this ProdRtMgr
         // for the argument.

   private:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitProdRtMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Overrides from class RtMgr.
      //------------------------------------------------------------------------

      virtual void buildRtSites ();
      virtual void buildRtCands ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitProdRtMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrMap <WitPart, WitRtSite> myRtSiteFor_;
         //
         // myRtSiteFor_ (thePart) is the RtSite for thePart owned by this
         // ProdRtMgr.

      WitPtrMap <WitBopEntry, WitRtCand> myRtCandFor_;
         //
         // myRtCandFor_ (theBopEnt) is the RtCand for theBopEnt owned by this
         // ProdRtMgr.
   };

//------------------------------------------------------------------------------
// Class ConsRtMgr
//
// "Consumption Routing Element Manager"
// Manager of the consumption section of the Routing Element Subsystem.
//
// Class Hierarchy:
//
// RtMgr
//    ConsRtMgr
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitConsRtMgr: public WitRtMgr
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      static WitConsRtMgr * newInstance (WitProblem * theProblem);
         //
         // Heap-constructs a ConsRtMgr for theProblem and returns it.
         // To be used instead of the ctor.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitConsRtMgr ();

      //------------------------------------------------------------------------
      // Overrides from class RtMgr.
      //------------------------------------------------------------------------

      virtual const char * sectionName  ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      WitRtSite * myRtSiteFor (WitBomEntry *);
      WitRtCand * myRtCandFor (WitConsEntry *);
         //
         // These functions return the RtSite or RtCand owned by this ConsRtMgr
         // for the argument.

   private:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitConsRtMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Overrides from class RtMgr.
      //------------------------------------------------------------------------

      virtual void buildRtSites ();
      virtual void buildRtCands ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitConsRtMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrMap <WitBomEntry, WitRtSite> myRtSiteFor_;
         //
         // myRtSiteFor_ (theBomEnt) is the RtSite for theBomEnt owned by this
         // ConsRtMgr.

      WitPtrMap <WitConsEntry, WitRtCand> myRtCandFor_;
         //
         // myRtCandFor_ (theConsEnt) is the RtCand for theConsEnt owned by this
         // ConsRtMgr.
   };
@


1.6
log
@Continued implementation of proportionate routing.
@
text
@d31 1
a31 1
// Abstract interface to a section of the Routing Element Subsystem.
d73 5
a125 5
      virtual const char * sectionName () = 0;
         //
         // Returns the name of the section of the Routing Element Subsystem
         // to which this RtMgr is the interface.

d147 1
a147 1
// Interface to the production section of the Routing Element Subsystem.
d177 6
d204 2
a205 3
      virtual void         buildRtSites ();
      virtual void         buildRtCands ();
      virtual const char * sectionName  ();
d232 1
a232 1
// Interface to the consumption section of the Routing Element Subsystem.
d262 6
d289 2
a290 3
      virtual void         buildRtSites ();
      virtual void         buildRtCands ();
      virtual const char * sectionName  ();
@


1.5
log
@Continued implementation of proportionate routing.
@
text
@d31 1
a31 1
// Abstract Interface to a section of the Routing Element Subsystem.
@


1.4
log
@Continued implementation of proportionate routing.
@
text
@d31 1
a31 1
// Base class for the interfaces to the Routing Element Subsystem.
d47 27
d77 3
d105 5
d116 2
a117 1
      virtual void buildRtSites (WitObjStack <WitRtSite> & theRtSites) = 0;
d119 1
a119 1
         // Builds theRtSites for this RtMgr and stores them in theRtSites.
d121 1
a121 1
      virtual void buildRtCands (WitObjStack <WitRtCand> & theRtCands) = 0;
d123 2
a124 1
         // Builds theRtCands for this RtMgr and stores them in theRtCands.
d132 2
a133 1
      WitObjStack <WitRtSite> myRtSites_;
d135 1
a135 1
         // The RtSites owned by this RtMgr.
d137 1
d140 1
a140 1
         // The RtCands owned by this RtMgr.
d147 1
a147 1
// Interface to the production portion of the Routing Element Subsystem.
d198 3
a200 2
      virtual void buildRtSites (WitObjStack <WitRtSite> &);
      virtual void buildRtCands (WitObjStack <WitRtCand> &);
d227 1
a227 1
// Interface to the consumption portion of the Routing Element Subsystem.
d278 3
a280 2
      virtual void buildRtSites (WitObjStack <WitRtSite> &);
      virtual void buildRtCands (WitObjStack <WitRtCand> &);
@


1.3
log
@Continued implementation of proportionate routing.
@
text
@d20 1
d31 1
a31 1
// Base class for an Interface to the Routing Element Subsystem.
d37 1
d108 1
a108 1
// Production Interface to the Routing Element Subsystem.
a141 1
      WitRtSite * myRtSiteFor (WitBomEntry *);
a142 1
      WitRtCand * myRtCandFor (WitConsEntry *);
d172 1
a172 1
      WitPtrMap <WitPart, WitRtSite> myRtSiteForPart_;
d174 1
a174 1
         // myRtSiteForPart_ (thePart) is the RtSite for thePart owned by this
d177 1
a177 1
      WitPtrMap <WitBomEntry, WitRtSite> myRtSiteForBomEnt_;
d179 71
a249 2
         // myRtSiteForBomEnt_ (theBomEnt) is the RtSite for theBomEnt owned by
         // this ProdRtMgr.
d251 1
a251 1
      WitPtrMap <WitBopEntry, WitRtCand> myRtCandForBopEnt_;
d253 2
a254 2
         // myRtCandForBopEnt_ (theBopEnt) is the RtCand for theBopEnt owned by
         // this ProdRtMgr.
d256 1
a256 1
      WitPtrMap <WitConsEntry, WitRtCand> myRtCandForConsEnt_;
d258 2
a259 2
         // myRtCandForConsEnt_ (theConsEnt) is the RtCand for theConsEnt owned
         // by this ProdRtMgr.
@


1.2
log
@Continued implementation of proportionate routing.
@
text
@d16 4
a19 1
// Contains the declaration of class RtMgr.
d30 6
a35 1
// Interface to the Routing Element Subsystem.
d45 9
d66 70
d144 2
a145 2
         // These functions return the RtSite or RtCand owned by this RtMgr for
         // the argument.
d147 5
a151 2
      accessFunc (const WitObjStack <WitRtSite> &, myRtSites)
      accessFunc (const WitObjStack <WitRtCand> &, myRtCands)
d153 1
a153 1
   private:
d156 1
a156 1
      // Private member functions.
d159 6
a164 3
      void buildRtSites ();
      void buildRtCands ();
      void setUpRtSites ();
d166 1
a166 1
      noCopyCtorAssign (WitRtMgr);
d175 1
a175 1
         // RtMgr.
d180 1
a180 1
         // this RtMgr.
d185 1
a185 1
         // this RtMgr.
d190 1
a190 9
         // by this RtMgr.

      WitObjStack <WitRtSite> myRtSites_;
         //
         // The RtSites owned by this RtMgr.

      WitObjStack <WitRtCand> myRtCands_;
         //
         // The RtCands owned by this RtMgr.
@


1.1
log
@Continued implementation of proportionate routing.
@
text
@d21 1
d26 2
a27 2
// "Routing Adapter Manager"
// Interface to the Routing Adapter Subsystem.
d60 3
d69 4
d79 11
a89 1
      WitPtrMap <WitPart, WitRtSite> myRtSitesForParts_;
d91 2
a92 1
         // The RtSites for Parts owned by this RtMgr.
d94 1
a94 1
      WitPtrMap <WitBomEntry, WitRtSite> myRtSitesForBomEnts_;
d96 2
a97 1
         // The RtSites for BomEnts owned by this RtMgr.
d99 1
a99 1
      WitPtrMap <WitBopEntry, WitRtCand> myRtCandsForBopEnts_;
d101 1
a101 1
         // The RtCands for BopEntries owned by this RtMgr.
d103 1
a103 1
      WitPtrMap <WitConsEntry, WitRtCand> myRtCandsForConsEnts_;
d105 1
a105 1
         // The RtCands for ConsEntries owned by this RtMgr.
@

