head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2011.09.28.23.49.08;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.09.24.00.27.26;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.08.30.20.17.20;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.10.22.10.37;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.09.20.20.32;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "Component.C"
//
// Contains the implementation of the following classes:
//
//    Component
//    DelComp
//    Node
//------------------------------------------------------------------------------

#include <Node.h>
#include <DelCompItr.h>
#include <OptComp.h>
#include <Part.h>
#include <Demand.h>
#include <Operation.h>
#include <BomEntry.h>
#include <SubEntry.h>
#include <BopEntry.h>
#include <DataWrit.h>
#include <Pre.h>
#include <HeurAllMgr.h>
#include <OptStarter.h>
#include <Post.h>
#include <FSS.h>
#include <BoundSet.h>
#include <OrigMrp.h>
#include <StochImpMgr.h>
#include <IVRealArg.h>
#include <MsgFrag.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------
// Implementation of class Component.
//------------------------------------------------------------------------------

WitComponent::~WitComponent ()
   {
   witAssert (myCompMgr ()->isDeleting (this));
   }

//------------------------------------------------------------------------------

void WitComponent::setAppData (void * theData)
   {
   if (myStochImpMgr ()->stochMode ())
       myStochImpMgr ()->prepSetStochModeAttr ("appData");

   appData_ = theData;
   }

//------------------------------------------------------------------------------

void WitComponent::writeData ()
   {
   writeDataID ();

   writeDataAttrs ();

   myDataWriter ()->writeEndCommand ();
   }

//------------------------------------------------------------------------------

void WitComponent::writeMultiObjVecs (WitObjective *)
   {
   }

//------------------------------------------------------------------------------

void WitComponent::writeSolnData ()
   {
   }

//------------------------------------------------------------------------------

void WitComponent::purgeCompLists ()
   {
   witAssert (myCompMgr ()->purging ());

   purgeCompListsSpec ();
   }

//------------------------------------------------------------------------------

void WitComponent::reindexBoundSet ()
   {
   witAssert (myBoundSet () != NULL);

   myBoundSet ()->reindex ();
   }

//------------------------------------------------------------------------------

WitComponent::WitComponent (WitCompMgr * theCompMgr):

      WitProbAssoc (theCompMgr->myProblem ()),
      appData_     (NULL)
   {
   myPreprocessor ()->unpreprocess ();
   }

//------------------------------------------------------------------------------

void WitComponent::prepSetUnpreAttr ()
   {
   myProblem ()->prepSetUnpreAttr ();
   }

//------------------------------------------------------------------------------

void WitComponent::prepSetUnpostAttr ()
   {
   myProblem ()->prepSetUnpostAttr ();
   }

//------------------------------------------------------------------------------

void WitComponent::prepSetNonUnpostAttr ()
   {
   myProblem ()->prepSetNonUnpostAttr ();
   }

//------------------------------------------------------------------------------

void WitComponent::clearDepLists ()
   {
   witAssert (myCompMgr ()->clearingDepLists ());

   clearDepListsSpec ();
   }

//------------------------------------------------------------------------------

WitBoundSet * WitComponent::myBoundSet ()
   {
   return NULL;
   }

//------------------------------------------------------------------------------

void WitComponent::unpreprocess ()
   {
   }

//------------------------------------------------------------------------------

void WitComponent::clearOptSoln ()
   {
   }

//------------------------------------------------------------------------------

void WitComponent::clearStochSoln ()
   {
   witAssert (myStochImpMgr ()->clearingSoln ());
   }

//------------------------------------------------------------------------------

WitDelComp * WitComponent::thisDelComp ()
   {
   return NULL;
   }

//------------------------------------------------------------------------------

WitNode * WitComponent::thisNode ()
   {
   return NULL;
   }

//------------------------------------------------------------------------------

WitPart * WitComponent::thisPart ()
   {
   return NULL;
   }

//------------------------------------------------------------------------------

WitMaterial * WitComponent::thisMat ()
   {
   return NULL;
   }

//------------------------------------------------------------------------------

WitCapacity * WitComponent::thisCap ()
   {
   return NULL;
   }

//------------------------------------------------------------------------------

WitOperation * WitComponent::thisOpn ()
   {
   return NULL;
   }

//------------------------------------------------------------------------------

WitConsEntry * WitComponent::thisConsEnt ()
   {
   return NULL;
   }

//------------------------------------------------------------------------------

WitBomEntry * WitComponent::thisBomEnt ()
   {
   return NULL;
   }

//------------------------------------------------------------------------------

WitSubEntry * WitComponent::thisSub ()
   {
   return NULL;
   }

//------------------------------------------------------------------------------

WitBopEntry * WitComponent::thisBopEnt ()
   {
   return NULL;
   }

//------------------------------------------------------------------------------

WitDemand * WitComponent::thisDemand ()
   {
   return NULL;
   }

//------------------------------------------------------------------------------

void WitComponent::writeDataAttrs ()
   {
   }

//------------------------------------------------------------------------------

void WitComponent::copyAttrsFrom (WitComponent * theComp)
   {
   witAssert (this != theComp);
   }

//------------------------------------------------------------------------------

void WitComponent::purgeCompListsSpec ()
   {
   }

//------------------------------------------------------------------------------

void WitComponent::clearDepListsSpec ()
   {
   }

//------------------------------------------------------------------------------
// Implementation of class DelComp.
//------------------------------------------------------------------------------

WitDelComp::~WitDelComp ()
   {
   }

//------------------------------------------------------------------------------

void WitDelComp::setSelForDel (bool theValue)
   {
   prepSetNonUnpostAttr ();

   selForDel_ = theValue;
   }

//------------------------------------------------------------------------------

void WitDelComp::identifyOrAutoSel ()
   {
   WitDelComp * prereq1;
   WitDelComp * prereq2;

   witAssert (myCompMgr ()->purging ());

   if (selForDel ())
      {
      if (myMsgFac ().mayIssue ("userSelForDelMsg"))
         myMsgFac () ("userSelForDelMsg");

      identify ();

      myMsgFac ().divide ();
      }
   else
      {
      findPrereqs   (prereq1, prereq2);
      autoSelForDel (prereq1);
      autoSelForDel (prereq2);
      }
   }

//------------------------------------------------------------------------------

void WitDelComp::identify ()
   {
   if (myMsgFac ().mayIssue ("objectTypeMsg"))
      myMsgFac () ("objectTypeMsg", objTypeMsgFrag ());

   identifyInstance ();
   }

//------------------------------------------------------------------------------

WitDelComp * WitDelComp::thisDelComp ()
   {
   return this;
   }

//------------------------------------------------------------------------------

void WitDelComp::display ()
   {
   if (selForDel ())
      if (myMsgFac ().mayIssue ("selForDelDdMsg"))
         myMsgFac () ("selForDelDdMsg");
   }

//------------------------------------------------------------------------------

void WitDelComp::prepSetScenSpecAttr (const char * theAttName)
   {
   if (myStochImpMgr ()->stochMode ())
      myStochImpMgr ()->prepSetScenSpecAttr (theAttName, this);

   myProblem ()->resetSoln ();
   }

//------------------------------------------------------------------------------
// Macro implementPurgeSelComps (CompClass)
//
// Implements DelComp::purgeSelComps (List <CompClass> &).
//
// CompClass must be derived from DelComp.
//------------------------------------------------------------------------------

#define implementPurgeSelComps(CompClass)                                      \
                                                                               \
void WitDelComp::purgeSelComps (WitList <CompClass> & theList)                 \
   {                                                                           \
   CompClass * theDerComp;                                                     \
   bool        selCompFound;                                                   \
                                                                               \
   selCompFound = false;                                                       \
                                                                               \
   forEachEl (theDerComp, theList)                                             \
      if (theDerComp->selForDel ())                                            \
         selCompFound = true;                                                  \
                                                                               \
   if (not selCompFound)                                                       \
      return;                                                                  \
                                                                               \
   WitList <CompClass> purgedList;                                             \
                                                                               \
   while (not theList.isEmpty ())                                              \
      {                                                                        \
      theDerComp = theList.get ();                                             \
                                                                               \
      if (not theDerComp->selForDel ())                                        \
         purgedList.append (theDerComp);                                       \
      }                                                                        \
                                                                               \
   theList = purgedList;                                                       \
   }                                                                           \

//------------------------------------------------------------------------------

implementPurgeSelComps (WitPart)
implementPurgeSelComps (WitDemand)
implementPurgeSelComps (WitOperation)
implementPurgeSelComps (WitBomEntry)
implementPurgeSelComps (WitSubEntry)
implementPurgeSelComps (WitBopEntry)

//------------------------------------------------------------------------------

WitDelComp::WitDelComp (WitCompMgr * theCompMgr):

      WitComponent (theCompMgr),

      selForDel_   (defSelForDel ())
   {
   if (myCompMgr ()->myDelCompItr ()->active ())
      myMsgFac () ("createWhileItrActSmsg");
   }

//------------------------------------------------------------------------------

void WitDelComp::writeDataAttrs ()
   {
   WitComponent::writeDataAttrs ();

   myDataWriter ()->writeBool (
        "selForDel",
         selForDel (),
      defSelForDel ());
   }

//------------------------------------------------------------------------------

void WitDelComp::copyAttrsFrom (WitDelComp * theDelComp)
   {
   WitComponent::copyAttrsFrom (theDelComp);

   selForDel_ = theDelComp->selForDel ();
   }

//------------------------------------------------------------------------------

void WitDelComp::findPrereqs (WitDelComp * & prereq1, WitDelComp * & prereq2)
   {
   prereq1 = NULL;
   prereq2 = NULL;
   }

//------------------------------------------------------------------------------

void WitDelComp::autoSelForDel (WitDelComp * prereq)
   {
   if (prereq != NULL)
      if (prereq->selForDel ())
         if (not selForDel ())
            {
            selForDel_ = true;

            if (myMsgFac ().mayIssue ("autoSelForDelMsg"))
               myMsgFac () ("autoSelForDelMsg");

            identify ();

            if (myMsgFac ().mayIssue ("selPrereqMsg"))
               myMsgFac () ("selPrereqMsg");

            prereq->identify ();

            myMsgFac ().divide ();
            }
   }

//------------------------------------------------------------------------------
// Implementation of class Node.
//------------------------------------------------------------------------------

WitNode::~WitNode ()
   {
   }

//------------------------------------------------------------------------------

int WitNode::nInstances (WitProblem * theProblem)
   {
   return theProblem->myCompMgr ()->nNodes ();
   }

//------------------------------------------------------------------------------

void WitNode::storeCompMgrNodeName (const char * theName)
   {
   witAssert (myCompMgr ()->settingNodeName ());

   nodeName_ = theName;
   }

//------------------------------------------------------------------------------

WitNode * WitNode::thisNode ()
   {
   return this;
   }

//------------------------------------------------------------------------------

const WitString & WitNode::nodeName (const WitNode * theNode)
   {
   return theNode->nodeName ();
   }

//------------------------------------------------------------------------------

WitNode::WitNode (const char * theName, WitCompMgr * theCompMgr):

      WitDelComp (theCompMgr),

      nodeName_  (theName)
   {
   witAssert (not isNullCstring (theName));

   myProblem ()->allocTVecs ();
   }

//------------------------------------------------------------------------------

void WitNode::writeDataAttrs ()
   {
   WitDelComp::writeDataAttrs ();
   }

//------------------------------------------------------------------------------

void WitNode::copyAttrsFrom (WitNode * theNode)
   {
   WitDelComp::copyAttrsFrom (theNode);
   }
@


1.4
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.3
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d47 3
a49 3
{
witAssert (myCompMgr ()->isDeleting (this));
}
d54 3
a56 3
{
if (myStochImpMgr ()->stochMode ())
myStochImpMgr ()->prepSetStochModeAttr ("appData");
d58 2
a59 2
appData_ = theData;
}
d64 2
a65 2
{
writeDataID ();
d67 1
a67 1
writeDataAttrs ();
d69 2
a70 2
myDataWriter ()->writeEndCommand ();
}
d75 2
a76 2
{
}
d81 2
a82 2
{
}
d87 2
a88 2
{
witAssert (myCompMgr ()->purging ());
d90 2
a91 2
purgeCompListsSpec ();
}
d96 2
a97 2
{
witAssert (myBoundSet () != NULL);
d99 2
a100 2
myBoundSet ()->reindex ();
}
d106 5
a110 5
WitProbAssoc (theCompMgr->myProblem ()),
appData_     (NULL)
{
myPreprocessor ()->unpreprocess ();
}
d115 3
a117 3
{
myProblem ()->prepSetUnpreAttr ();
}
d122 3
a124 3
{
myProblem ()->prepSetUnpostAttr ();
}
d129 3
a131 3
{
myProblem ()->prepSetNonUnpostAttr ();
}
d136 2
a137 2
{
witAssert (myCompMgr ()->clearingDepLists ());
d139 2
a140 2
clearDepListsSpec ();
}
d145 3
a147 3
{
return NULL;
}
d152 2
a153 2
{
}
d158 2
a159 2
{
}
d164 3
a166 3
{
witAssert (myStochImpMgr ()->clearingSoln ());
}
d171 3
a173 3
{
return NULL;
}
d178 3
a180 3
{
return NULL;
}
d185 3
a187 3
{
return NULL;
}
d192 3
a194 3
{
return NULL;
}
d199 3
a201 3
{
return NULL;
}
d206 3
a208 3
{
return NULL;
}
d213 3
a215 3
{
return NULL;
}
d220 3
a222 3
{
return NULL;
}
d227 3
a229 3
{
return NULL;
}
d234 3
a236 3
{
return NULL;
}
d241 3
a243 3
{
return NULL;
}
d248 2
a249 2
{
}
d254 3
a256 3
{
witAssert (this != theComp);
}
d261 2
a262 2
{
}
d267 2
a268 2
{
}
d275 2
a276 2
{
}
d281 2
a282 2
{
prepSetNonUnpostAttr ();
d284 2
a285 2
selForDel_ = theValue;
}
d290 22
a311 22
{
WitDelComp * prereq1;
WitDelComp * prereq2;

witAssert (myCompMgr ()->purging ());

if (selForDel ())
{
if (myMsgFac ().mayIssue ("userSelForDelMsg"))
myMsgFac () ("userSelForDelMsg");

identify ();

myMsgFac ().divide ();
}
else
{
findPrereqs   (prereq1, prereq2);
autoSelForDel (prereq1);
autoSelForDel (prereq2);
}
}
d316 3
a318 3
{
if (myMsgFac ().mayIssue ("objectTypeMsg"))
myMsgFac () ("objectTypeMsg", objTypeMsgFrag ());
d320 2
a321 2
identifyInstance ();
}
d326 3
a328 3
{
return this;
}
d333 5
a337 5
{
if (selForDel ())
if (myMsgFac ().mayIssue ("selForDelDdMsg"))
myMsgFac () ("selForDelDdMsg");
}
d342 3
a344 3
{
if (myStochImpMgr ()->stochMode ())
myStochImpMgr ()->prepSetScenSpecAttr (theAttName, this);
d346 2
a347 2
myProblem ()->resetSoln ();
}
d358 1
a358 1
\
d360 25
a384 25
{                                                                           \
CompClass * theDerComp;                                                     \
bool        selCompFound;                                                   \
\
selCompFound = false;                                                       \
\
forEachEl (theDerComp, theList)                                             \
if (theDerComp->selForDel ())                                            \
selCompFound = true;                                                  \
\
if (not selCompFound)                                                       \
return;                                                                  \
\
WitList <CompClass> purgedList;                                             \
\
while (not theList.isEmpty ())                                              \
{                                                                        \
theDerComp = theList.get ();                                             \
\
if (not theDerComp->selForDel ())                                        \
purgedList.append (theDerComp);                                       \
}                                                                        \
\
theList = purgedList;                                                       \
}                                                                           \
d399 1
a399 1
WitComponent (theCompMgr),
d401 5
a405 5
selForDel_   (defSelForDel ())
{
if (myCompMgr ()->myDelCompItr ()->active ())
myMsgFac () ("createWhileItrActSmsg");
}
d410 2
a411 2
{
WitComponent::writeDataAttrs ();
d413 5
a417 5
myDataWriter ()->writeBool (
"selForDel",
selForDel (),
defSelForDel ());
}
d422 2
a423 2
{
WitComponent::copyAttrsFrom (theDelComp);
d425 2
a426 2
selForDel_ = theDelComp->selForDel ();
}
d431 4
a434 4
{
prereq1 = NULL;
prereq2 = NULL;
}
d439 20
a458 20
{
if (prereq != NULL)
if (prereq->selForDel ())
if (not selForDel ())
{
selForDel_ = true;

if (myMsgFac ().mayIssue ("autoSelForDelMsg"))
myMsgFac () ("autoSelForDelMsg");

identify ();

if (myMsgFac ().mayIssue ("selPrereqMsg"))
myMsgFac () ("selPrereqMsg");

prereq->identify ();

myMsgFac ().divide ();
}
}
d465 2
a466 2
{
}
d471 3
a473 3
{
return theProblem->myCompMgr ()->nNodes ();
}
d478 2
a479 2
{
witAssert (myCompMgr ()->settingNodeName ());
d481 2
a482 2
nodeName_ = theName;
}
d487 3
a489 3
{
return this;
}
d494 3
a496 3
{
return theNode->nodeName ();
}
d502 1
a502 1
WitDelComp (theCompMgr),
d504 3
a506 3
nodeName_  (theName)
{
witAssert (not isNullCstring (theName));
d508 2
a509 2
myProblem ()->allocTVecs ();
}
d514 3
a516 3
{
WitDelComp::writeDataAttrs ();
}
d521 3
a523 3
{
WitDelComp::copyAttrsFrom (theNode);
}
@


1.2
log
@Heuristic Adjustment
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d47 3
a49 3
   {
   witAssert (myCompMgr ()->isDeleting (this));
   }
d54 3
a56 3
   {
   if (myStochImpMgr ()->stochMode ())
       myStochImpMgr ()->prepSetStochModeAttr ("appData");
d58 2
a59 2
   appData_ = theData;
   }
d64 2
a65 2
   {
   writeDataID ();
d67 1
a67 1
   writeDataAttrs ();
d69 2
a70 2
   myDataWriter ()->writeEndCommand ();
   }
d75 2
a76 2
   {
   }
d81 2
a82 2
   {
   }
d87 2
a88 2
   {
   witAssert (myCompMgr ()->purging ());
d90 2
a91 2
   purgeCompListsSpec ();
   }
d96 2
a97 2
   {
   witAssert (myBoundSet () != NULL);
d99 2
a100 2
   myBoundSet ()->reindex ();
   }
d106 5
a110 5
      WitProbAssoc (theCompMgr->myProblem ()),
      appData_     (NULL)
   {
   myPreprocessor ()->unpreprocess ();
   }
d115 3
a117 3
   {
   myProblem ()->prepSetUnpreAttr ();
   }
d122 3
a124 3
   {
   myProblem ()->prepSetUnpostAttr ();
   }
d129 3
a131 3
   {
   myProblem ()->prepSetNonUnpostAttr ();
   }
d136 2
a137 2
   {
   witAssert (myCompMgr ()->clearingDepLists ());
d139 2
a140 2
   clearDepListsSpec ();
   }
d145 3
a147 3
   {
   return NULL;
   }
d152 2
a153 2
   {
   }
d158 2
a159 2
   {
   }
d164 3
a166 3
   {
   witAssert (myStochImpMgr ()->clearingSoln ());
   }
d171 3
a173 3
   {
   return NULL;
   }
d178 3
a180 3
   {
   return NULL;
   }
d185 3
a187 3
   {
   return NULL;
   }
d192 3
a194 3
   {
   return NULL;
   }
d199 3
a201 3
   {
   return NULL;
   }
d206 3
a208 3
   {
   return NULL;
   }
d213 3
a215 3
   {
   return NULL;
   }
d220 3
a222 3
   {
   return NULL;
   }
d227 3
a229 3
   {
   return NULL;
   }
d234 3
a236 3
   {
   return NULL;
   }
d241 3
a243 3
   {
   return NULL;
   }
d248 2
a249 2
   {
   }
d254 3
a256 3
   {
   witAssert (this != theComp);
   }
d261 2
a262 2
   {
   }
d267 2
a268 2
   {
   }
d275 2
a276 2
   {
   }
d281 2
a282 2
   {
   prepSetNonUnpostAttr ();
d284 2
a285 2
   selForDel_ = theValue;
   }
d290 22
a311 22
   {
   WitDelComp * prereq1;
   WitDelComp * prereq2;

   witAssert (myCompMgr ()->purging ());

   if (selForDel ())
      {
      if (myMsgFac ().mayIssue ("userSelForDelMsg"))
         myMsgFac () ("userSelForDelMsg");

      identify ();

      myMsgFac ().divide ();
      }
   else
      {
      findPrereqs   (prereq1, prereq2);
      autoSelForDel (prereq1);
      autoSelForDel (prereq2);
      }
   }
d316 3
a318 3
   {
   if (myMsgFac ().mayIssue ("objectTypeMsg"))
      myMsgFac () ("objectTypeMsg", objTypeMsgFrag ());
d320 2
a321 2
   identifyInstance ();
   }
d326 3
a328 3
   {
   return this;
   }
d333 5
a337 5
   {
   if (selForDel ())
      if (myMsgFac ().mayIssue ("selForDelDdMsg"))
         myMsgFac () ("selForDelDdMsg");
   }
d342 3
a344 3
   {
   if (myStochImpMgr ()->stochMode ())
      myStochImpMgr ()->prepSetScenSpecAttr (theAttName, this);
d346 2
a347 2
   myProblem ()->resetSoln ();
   }
d358 1
a358 1
                                                                               \
d360 25
a384 25
   {                                                                           \
   CompClass * theDerComp;                                                     \
   bool        selCompFound;                                                   \
                                                                               \
   selCompFound = false;                                                       \
                                                                               \
   forEachEl (theDerComp, theList)                                             \
      if (theDerComp->selForDel ())                                            \
         selCompFound = true;                                                  \
                                                                               \
   if (not selCompFound)                                                       \
      return;                                                                  \
                                                                               \
   WitList <CompClass> purgedList;                                             \
                                                                               \
   while (not theList.isEmpty ())                                              \
      {                                                                        \
      theDerComp = theList.get ();                                             \
                                                                               \
      if (not theDerComp->selForDel ())                                        \
         purgedList.append (theDerComp);                                       \
      }                                                                        \
                                                                               \
   theList = purgedList;                                                       \
   }                                                                           \
d399 1
a399 1
      WitComponent (theCompMgr),
d401 5
a405 5
      selForDel_   (defSelForDel ())
   {
   if (myCompMgr ()->myDelCompItr ()->active ())
      myMsgFac () ("createWhileItrActSmsg");
   }
d410 2
a411 2
   {
   WitComponent::writeDataAttrs ();
d413 5
a417 5
   myDataWriter ()->writeBool (
        "selForDel",
         selForDel (),
      defSelForDel ());
   }
d422 2
a423 2
   {
   WitComponent::copyAttrsFrom (theDelComp);
d425 2
a426 2
   selForDel_ = theDelComp->selForDel ();
   }
d431 4
a434 4
   {
   prereq1 = NULL;
   prereq2 = NULL;
   }
d439 20
a458 20
   {
   if (prereq != NULL)
      if (prereq->selForDel ())
         if (not selForDel ())
            {
            selForDel_ = true;

            if (myMsgFac ().mayIssue ("autoSelForDelMsg"))
               myMsgFac () ("autoSelForDelMsg");

            identify ();

            if (myMsgFac ().mayIssue ("selPrereqMsg"))
               myMsgFac () ("selPrereqMsg");

            prereq->identify ();

            myMsgFac ().divide ();
            }
   }
d465 2
a466 2
   {
   }
d471 3
a473 3
   {
   return theProblem->myCompMgr ()->nNodes ();
   }
d478 2
a479 2
   {
   witAssert (myCompMgr ()->settingNodeName ());
d481 2
a482 2
   nodeName_ = theName;
   }
d487 3
a489 3
   {
   return this;
   }
d494 3
a496 3
   {
   return theNode->nodeName ();
   }
d502 1
a502 1
      WitDelComp (theCompMgr),
d504 3
a506 3
      nodeName_  (theName)
   {
   witAssert (not isNullCstring (theName));
d508 2
a509 2
   myProblem ()->allocTVecs ();
   }
d514 3
a516 3
   {
   WitDelComp::writeDataAttrs ();
   }
d521 3
a523 3
   {
   WitDelComp::copyAttrsFrom (theNode);
   }
@


1.1
log
@Heuristic Adjustment
@
text
@d25 1
a25 1
#include <Opn.h>
@

