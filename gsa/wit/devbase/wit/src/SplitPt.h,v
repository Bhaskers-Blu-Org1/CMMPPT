head	1.24;
access;
symbols
	sce_5_01_20080919:1.20
	latest_sce_4_20_20060523:1.20.0.2
	sce_4_20_20060523:1.20
	latest_sce4_20_OSL:1.19.0.2
	sce_4_20_OSL:1.19
	sce_410_withVa:1.19
	sce_4_05_20040511:1.17
	sce_4_00_20040201:1.16
	nextGenBranch:1.16.0.2
	nextGenRoot:1.16
	sce_3_30_20030627:1.16
	EndRw-branch:1.13.0.4
	Root-of-EndRw:1.13
	rwToStl:1.13.0.2
	latest_sce_3_10_20010924:1.8.0.2
	sce_3_10_20010924:1.8
	latest_sce_3_00_20010601:1.2.0.2
	sce_3_00_20010601:1.2;
locks; strict;
comment	@ * @;


1.24
date	2011.09.28.23.50.26;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.09.24.00.28.42;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.08.30.20.18.13;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2010.06.29.23.25.15;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2006.05.02.17.34.13;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2004.12.31.18.28.29;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.14.22.37.11;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2004.03.10.22.53.21;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.04.18.20.30.59;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.04.11.19.08.30;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.01.02.22.18.51;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.04.12.21.02.05;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.04.11.15.36.32;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.07.16.57.29;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.10.22.06.59;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.17.16.25.43;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.27.21.12.14;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.24.22.03.23;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.23.21.13.55;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.03.20.07.31;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.20.20.07.06;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.01.19.23.36;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.30.21.16.50;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.14.53.28;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef SplitPtH
#define SplitPtH

//------------------------------------------------------------------------------
// Header file: "SplitPt.h"
//
// Contains the declaration of class SplitPt.
//------------------------------------------------------------------------------

#include <PairStack.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class SplitPt
//
// "Split Point"
// Represents a point in the problem at which a selection is currently split.
// 
// Implemented in SelSplit.C.
//------------------------------------------------------------------------------

class WitSplitPt: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSplitPt (WitSplitter *, WitSelPt *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSplitPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool isLowerThan (WitSplitPt * theSplitPt);
         //
         // Returns true, iff this SplitPt is considered to be lower than
         // theSplitPt.

      void setNetSearchVol (double theVal);
         //
         // Sets netSearchVol_ to theVal.
         // netSearchVol_ must be in a cleared state.

      void clearNetSearchVol ();
         //
         // Clears netSearchVol_.

      void initNetSplitList ();
         //
         // Sets the net split list for this SplitPt to its split list.

      void splitSelAsNeeded ();
         //
         // Splits the selection for this SplitPt, if appropriate.

      void defineSplit (
            double               totFlowVol,
            WitSelCandDblStack & theSplitPairs,
            double &             unbddVol);
         //
         // Sets theSplitPairs to be the split pairs for a split explosion of
         // totFlowVol units at this SplitPt. The pairs are stored in reverse
         // order. Sets unbddVol to the splitVol of the unbounded split
         // explosion, if any; otherwise 0.

      void activateTotFlowVol ();
         //
         // Activates totFlowVol_.

      void incTotFlowVol (double incFlowVol);
         //
         // If totFlowVol_ is active, it is incremented by incFlowVol.

      void deactivateTotFlowVol ();
         //
         // Deactivates totFlowVol_.

      bool hasSplits ();
         //
         // Returns true, iff this SplitPt has any splits

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitSelPt *, mySelPt)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void prtSplitting (WitSelCand * theSelCand, double splitBound);
         //
         // Prints the splitting of the selection at this SplitPt.

      void addNextPair (
            double &             netFlowVol,
            WitSelCandDblStack & theSplitPairs);
         //
         // In the context of defineSplit, this function adds the next split
         // pair to the front of theSplitPairs, netting from netFlowVol.

      double compUnbddVol (double netFlowVol);
         //
         // In the context of defineSplit, computes and returns the final
         // unbounded splitVol, if any; otherwise returns 0.

      void prtUnbddSplitExp (double unbddVol);
         //
         // Prints data for an unbounded split explosion.

      void prtSplitExp (
            WitSelCand * theSelCand, 
            double       splitVol, 
            double       splitBound,
            bool         boundedSplit);
         //
         // Prints data for a split explosion.

      noCopyCtorAssign (WitSplitPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSplitter * const mySplitter_;
         //
         // The Splitter that owns this SplitPt.

      WitSelPt * const mySelPt_;
         //
         // The SelPt associated with this SplitPt.

      double netSearchVol_;
         //
         // During a call to tempCommForSearch, this is the searchVol that was
         // passed, netted against any flow; otherwise -1.

      WitPairStack <WitSelCand, double> revSplitList_;
         //
         // The list of (SelCand, splitBound) pairs that define the split
         // selection at mySelPt_. Stored in reverse order.

      WitPairStack <WitSelCand, double> netSplitList_;
         //
         // The list of (SelCand, splitBound) pairs that define the portion of
         // the split selection at mySelPt_ that has not yet been used during
         // the current commit. Stored in forward order.

      double totFlowVol_;
         //
         // The total flowVol thru this SplitPt, when that is being measured;
         // otherwise -1.0.
   };

#endif
@


1.23
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.22
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d27 1
a27 1
//
d32 2
a33 66
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitSplitPt (WitSplitter *, WitSelPt *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitSplitPt ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

bool isLowerThan (WitSplitPt * theSplitPt);
//
// Returns true, iff this SplitPt is considered to be lower than
// theSplitPt.

void setNetSearchVol (double theVal);
//
// Sets netSearchVol_ to theVal.
// netSearchVol_ must be in a cleared state.

void clearNetSearchVol ();
//
// Clears netSearchVol_.

void initNetSplitList ();
//
// Sets the net split list for this SplitPt to its split list.

void splitSelAsNeeded ();
//
// Splits the selection for this SplitPt, if appropriate.

void defineSplit (
double               totFlowVol,
WitSelCandDblStack & theSplitPairs,
double &             unbddVol);
//
// Sets theSplitPairs to be the split pairs for a split explosion of
// totFlowVol units at this SplitPt. The pairs are stored in reverse
// order. Sets unbddVol to the splitVol of the unbounded split
// explosion, if any; otherwise 0.

void activateTotFlowVol ();
//
// Activates totFlowVol_.

void incTotFlowVol (double incFlowVol);
//
// If totFlowVol_ is active, it is incremented by incFlowVol.

void deactivateTotFlowVol ();
//
// Deactivates totFlowVol_.

bool hasSplits ();
//
// Returns true, iff this SplitPt has any splits
d35 139
a173 75
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitSelPt *, mySelPt)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void prtSplitting (WitSelCand * theSelCand, double splitBound);
//
// Prints the splitting of the selection at this SplitPt.

void addNextPair (
double &             netFlowVol,
WitSelCandDblStack & theSplitPairs);
//
// In the context of defineSplit, this function adds the next split
// pair to the front of theSplitPairs, netting from netFlowVol.

double compUnbddVol (double netFlowVol);
//
// In the context of defineSplit, computes and returns the final
// unbounded splitVol, if any; otherwise returns 0.

void prtUnbddSplitExp (double unbddVol);
//
// Prints data for an unbounded split explosion.

void prtSplitExp (
WitSelCand * theSelCand,
double       splitVol,
double       splitBound,
bool         boundedSplit);
//
// Prints data for a split explosion.

noCopyCtorAssign (WitSplitPt);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitSplitter * const mySplitter_;
//
// The Splitter that owns this SplitPt.

WitSelPt * const mySelPt_;
//
// The SelPt associated with this SplitPt.

double netSearchVol_;
//
// During a call to tempCommForSearch, this is the searchVol that was
// passed, netted against any flow; otherwise -1.

WitPairStack <WitSelCand, double> revSplitList_;
//
// The list of (SelCand, splitBound) pairs that define the split
// selection at mySelPt_. Stored in reverse order.

WitPairStack <WitSelCand, double> netSplitList_;
//
// The list of (SelCand, splitBound) pairs that define the portion of
// the split selection at mySelPt_ that has not yet been used during
// the current commit. Stored in forward order.

double totFlowVol_;
//
// The total flowVol thru this SplitPt, when that is being measured;
// otherwise -1.0.
};
@


1.21
log
@Selection reuse.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d27 1
a27 1
// 
d32 66
a97 2
   {
   public:
d99 75
a173 139
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSplitPt (WitSplitter *, WitSelPt *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSplitPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool isLowerThan (WitSplitPt * theSplitPt);
         //
         // Returns true, iff this SplitPt is considered to be lower than
         // theSplitPt.

      void setNetSearchVol (double theVal);
         //
         // Sets netSearchVol_ to theVal.
         // netSearchVol_ must be in a cleared state.

      void clearNetSearchVol ();
         //
         // Clears netSearchVol_.

      void initNetSplitList ();
         //
         // Sets the net split list for this SplitPt to its split list.

      void splitSelAsNeeded ();
         //
         // Splits the selection for this SplitPt, if appropriate.

      void defineSplit (
            double               totFlowVol,
            WitSelCandDblStack & theSplitPairs,
            double &             unbddVol);
         //
         // Sets theSplitPairs to be the split pairs for a split explosion of
         // totFlowVol units at this SplitPt. The pairs are stored in reverse
         // order. Sets unbddVol to the splitVol of the unbounded split
         // explosion, if any; otherwise 0.

      void activateTotFlowVol ();
         //
         // Activates totFlowVol_.

      void incTotFlowVol (double incFlowVol);
         //
         // If totFlowVol_ is active, it is incremented by incFlowVol.

      void deactivateTotFlowVol ();
         //
         // Deactivates totFlowVol_.

      bool hasSplits ();
         //
         // Returns true, iff this SplitPt has any splits

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitSelPt *, mySelPt)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void prtSplitting (WitSelCand * theSelCand, double splitBound);
         //
         // Prints the splitting of the selection at this SplitPt.

      void addNextPair (
            double &             netFlowVol,
            WitSelCandDblStack & theSplitPairs);
         //
         // In the context of defineSplit, this function adds the next split
         // pair to the front of theSplitPairs, netting from netFlowVol.

      double compUnbddVol (double netFlowVol);
         //
         // In the context of defineSplit, computes and returns the final
         // unbounded splitVol, if any; otherwise returns 0.

      void prtUnbddSplitExp (double unbddVol);
         //
         // Prints data for an unbounded split explosion.

      void prtSplitExp (
            WitSelCand * theSelCand, 
            double       splitVol, 
            double       splitBound,
            bool         boundedSplit);
         //
         // Prints data for a split explosion.

      noCopyCtorAssign (WitSplitPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSplitter * const mySplitter_;
         //
         // The Splitter that owns this SplitPt.

      WitSelPt * const mySelPt_;
         //
         // The SelPt associated with this SplitPt.

      double netSearchVol_;
         //
         // During a call to tempCommForSearch, this is the searchVol that was
         // passed, netted against any flow; otherwise -1.

      WitPairStack <WitSelCand, double> revSplitList_;
         //
         // The list of (SelCand, splitBound) pairs that define the split
         // selection at mySelPt_. Stored in reverse order.

      WitPairStack <WitSelCand, double> netSplitList_;
         //
         // The list of (SelCand, splitBound) pairs that define the portion of
         // the split selection at mySelPt_ that has not yet been used during
         // the current commit. Stored in forward order.

      double totFlowVol_;
         //
         // The total flowVol thru this SplitPt, when that is being measured;
         // otherwise -1.0.
   };
@


1.20
log
@Updated the copyright date on all source files.
@
text
@d111 1
a111 1
      void prtSplittingIA (WitSelCand * theSelCand, double splitBound);
d113 1
a113 2
         // Prints the splitting of the selection at this SplitPt, if 
         // appropriate.
d127 1
a127 1
      void prtUnbddSplitExpIA (double unbddVol);
d129 1
a129 1
         // Prints data for an unbounded split explosion, if appropriate.
d131 1
a131 1
      void prtSplitExpIA (
d137 1
a137 1
         // Prints data for a split explosion, if appropriate.
@


1.19
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.18
log
@Low-Pri Prop-Rt.
@
text
@d76 1
a76 1
            bool &               lastUnbdd);
d79 3
a81 3
         // totFlowVol units at this SplitPt. Sets lastUnbdd to be true, iff
         // the last pair is for an unbounded split explosion.
         // The pairs are stored in reverse order.
d123 1
a123 4
      void defUnbddSplit (
            double               netFlowVol,
            WitSelCandDblStack & theSplitPairs,
            bool &               lastUnbdd);
d125 6
a130 2
         // In the context of defineSplit, this function defines the final
         // unbounded split, as appropriate.
a173 5

      WitSelCand * unbddCand_;
         //
         // The SelCand owned by this Split pointed to be used to define
         // bounded splits.
@


1.17
log
@Double Precision.
@
text
@d111 1
a111 1
      void prtSplittingIA (double splitBound);
d173 5
@


1.16
log
@Continued implementation of proportionate routing.
@
text
@d169 1
a169 1
      float totFlowVol_;
@


1.15
log
@Continued implementation of proportionate routing.
@
text
@a72 15
      void startSplitExp (double toSplitVol);
         // 
         // Initiates a split explosion at this SplitPt.

      bool findNextSplit (
            WitSelCand * & theSelCand,
            double &       splitVol,
            bool &         boundedSplit);
         //
         // If there is another split to be done on the current split explosion,
         // the function sets theSelCand, splitVol and boundedSplit accordingly
         // and returns true; otherwise, leaves theSelCand and splitVol
         // undefined, sets boundedSplit to false, and returns false.
         // Valid only during a split explosion at this SplitPt.

a115 5
      bool defUnboundedSplit (WitSelCand * & theSelCand, double & splitVol);
         //
         // Sets args and member data for an unbounded split.
         // Returns true, iff a positive splitVol was found.

a167 5

      double netToSplitVol_;
         //
         // The amount that remains to be split by the current split explosion.
         // Undefined, if there is no current split explosion.
@


1.14
log
@Internal changes.
@
text
@d77 4
a80 1
      bool findNextSplit (WitSelCand * & theSelCand, double & splitVol);
d83 3
a85 3
         // theSelCand and splitVol are set accordingly and true is returned;
         // otherwise, theSelCand and splitVol are undefined and false is
         // returned.
d88 9
a96 3
      void finishSplitExp ();
         //
         // Concludes a split explosion at this SplitPt.
a118 1
      accessFunc (bool,       boundedSplit)
d136 15
d154 2
a155 1
            double       splitBound);
a192 5

      bool boundedSplit_;
         //
         // true, iff there is currently a split explosion at this SplitPt and
         // it's a bounded split.
@


1.13
log
@Continued implementation of sel-split for pen-exec.
@
text
@d51 1
a51 1
      WitBoolean isLowerThan (WitSplitPt * theSplitPt);
d53 1
a53 1
         // Returns TRUE, iff this SplitPt is considered to be lower than
d77 1
a77 1
      WitBoolean findNextSplit (WitSelCand * & theSelCand, double & splitVol);
d80 2
a81 2
         // theSelCand and splitVol are set accordingly and TRUE is returned;
         // otherwise, theSelCand and splitVol are undefined and FALSE is
d101 1
a101 1
      WitBoolean hasSplits ();
d103 1
a103 1
         // Returns TRUE, iff this SplitPt has any splits
d110 1
a110 1
      accessFunc (WitBoolean, boundedSplit)
d123 1
a123 3
      WitBoolean defUnboundedSplit (
            WitSelCand * & theSelCand, 
            double &       splitVol);
d126 1
a126 1
         // Returns TRUE, iff a positive splitVol was found.
d170 1
a170 1
      WitBoolean boundedSplit_;
d172 1
a172 1
         // TRUE, iff there is currently a split explosion at this SplitPt and
@


1.12
log
@Continued implementation of sel-split for pen-exec.
@
text
@a32 2
      friend WitSplitMgr;

d39 1
a39 1
      WitSplitPt (WitSelector *, WitSelPt *);
d51 14
d69 1
a69 6
      WitBoolean tempCommForSearch (double searchVol);
         //
         // Does a temp-commit if 1 unit of top level vol for splitting the
         // selection at this SplitPt, applying searchVol.

      void splitSelection (double splitBound);
d71 1
a71 1
         // Splits the selection for this SplitPt, applying splitBound.
d89 16
d109 1
d143 1
a143 1
      WitSelector * const mySelector_;
d145 1
a145 1
         // The Selector associated with this SplitPt.
d179 2
a180 2
         // The total flowVol thru this SplitPt, when that is being measured by
         // SSPE; otherwise -1.0.
@


1.11
log
@Continued implementation of sel-split for pen-exec.
@
text
@d33 1
a33 1
      friend WitSsPeMgr;
@


1.10
log
@Implemented initial prototype of sel-split for pen-exec.
@
text
@d152 5
@


1.9
log
@Implementing Selection Splitting for Stock Reallocation.
@
text
@d33 1
a33 1
   friend WitSplitter;
@


1.8
log
@Fixed a latent bug.
@
text
@d60 1
a60 1
         // selection at this SplitPt, applying searchVol at theSplitPt.
@


1.7
log
@Refactoring for constrained stock reallocation.
@
text
@d53 1
a53 1
      void preCommit ();
d55 1
a55 2
         // Performs the actions to be taken by this SplitPt, just before a
         // commit.
d93 5
@


1.6
log
@Refactoring for constrained stock reallocation.
@
text
@d53 5
d74 3
a76 2
         // sets theSelCand and splitVol accordingly and returns TRUE;
         // otherwise returns false.
d128 1
a128 1
      WitPairStack <WitSelCand, double> splitList_;
d130 2
a131 2
         // The ordered list of (SelCand, splitBound) pairs that define the
         // split selection at mySelPt_.
d133 1
a133 1
      WitPairStItr <WitSelCand, double> splitListItr_;
d135 3
a137 2
         // An iterator for splitList_ during a split explosion.
         // Undefined, if there is no current split explosion.
@


1.5
log
@Moved Stack template implementations to header files.
@
text
@d66 1
a66 1
      WitBoolean findNextSplit (WitTlObj * & splitObj, double & splitVol);
d69 1
a69 1
         // sets splitObj and splitVol accordingly and returns TRUE;
d89 3
a91 1
      WitBoolean defUnboundedSplit (WitTlObj * & splitObj, double & splitVol);
d97 3
a99 3
            WitTlObj * splitObj, 
            double     splitVol, 
            double     splitBound);
d122 1
a122 1
      WitTlDblStack splitList_;
d124 1
a124 1
         // The ordered list of (splitObj, splitBound) pairs that define the
d127 1
a127 1
      WitPairStItr <WitTlObj, double> splitListItr_;
@


1.4
log
@Converted several generic classes into class templates.
@
text
@d19 1
a19 1
#include <PairSt.h>
@


1.3
log
@Continued development of selection splitting for multi=exec.
@
text
@d125 1
a125 1
      WitPairStItr (WitTlObj, double) splitListItr_;
@


1.2
log
@Refactoring for sel-split for multi-exec.
@
text
@d41 1
a41 1
      WitSplitPt (WitSplitter *, WitSelPt *);
d89 1
a89 1
      void defUnboundedSplit (WitTlObj * & splitObj, double & splitVol);
a90 1
         // If there is another split to be done on the current split explosion,
d92 1
d107 1
a107 1
      WitSplitter * const mySplitter_;
d109 1
a109 1
         // The Splitter that owns this SplitPt.
@


1.1
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d33 2
d41 1
a41 1
      WitSplitPt (WitProblem *, WitSelPt *);
d53 5
d62 15
d81 1
a81 2
      accessFunc (WitSelPt *,            mySelPt)
      accessFunc (const WitTlDblStack &, splitList)
d89 12
d107 4
d115 5
d124 15
@

