head	1.65;
access;
symbols
	sce_5_01_20080919:1.49;
locks; strict;
comment	@ * @;


1.65
date	2011.09.28.23.50.48;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2011.09.24.00.29.04;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2011.08.30.20.18.28;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2011.02.08.23.46.14;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2010.10.12.22.02.22;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2010.05.28.14.40.37;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2010.05.20.23.39.50;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2010.05.20.23.18.45;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2010.05.19.20.34.11;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2010.05.18.23.37.18;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2010.05.14.21.20.56;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2010.05.12.18.38.08;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2010.05.11.22.36.48;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2010.05.11.22.26.29;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2010.03.26.22.22.54;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2009.12.11.22.03.13;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2008.03.03.21.41.15;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2008.02.09.00.11.58;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2008.02.07.18.41.41;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2008.01.30.21.07.16;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2008.01.21.21.47.19;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2008.01.18.22.41.01;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2008.01.14.21.44.02;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2008.01.14.19.21.17;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2008.01.11.21.47.43;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2007.10.22.19.20.39;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2007.10.22.18.54.00;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2007.10.02.22.23.18;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2007.08.28.17.38.38;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2007.08.24.21.12.40;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2007.06.18.21.53.32;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2007.06.18.20.43.39;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2007.06.15.17.44.36;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2007.06.14.21.38.32;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2007.05.21.15.20.12;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2007.05.17.17.59.19;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.05.03.22.05.30;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2007.05.03.19.36.18;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2007.04.30.21.52.10;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.04.30.20.10.32;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.04.30.19.52.04;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.04.30.19.32.32;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.04.25.23.30.30;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.04.25.20.39.59;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.04.24.21.18.14;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.04.23.22.46.03;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.04.23.21.54.54;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.04.23.21.03.22;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.04.23.20.20.01;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.04.20.23.31.47;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.04.20.20.51.15;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.04.20.19.44.49;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.04.19.21.38.45;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.04.19.14.52.49;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.04.18.23.09.41;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.04.16.21.32.59;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.04.16.17.53.22;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.04.16.17.41.29;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.04.12.21.20.40;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.04.11.23.03.40;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.04.11.22.45.24;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.04.11.16.05.41;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.10.20.49.29;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.04.10.20.10.15;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.04.10.19.33.15;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.65
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "stochApi.C"
//
// Inner API functions relating to stochastic implosion.
//------------------------------------------------------------------------------

#include <WitRun.h>
#include <ApiMgr.h>
#include <InputID.h>
#include <ApiCall.h>
#include <StochImpMgr.h>
#include <OptComp.h>
#include <ISRealArg.h>
#include <OSRealArg.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------

void WitRun::witClearStochSoln ()
   {
   WitStochApiCall theCall (this);

   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("funcNeedsStochModeSmsg", "witClearStochSoln");

   if (not myStochImpMgr ()->stochSolnMode ())
      myMsgFac () ("funcWoStochSolnSmsg", "witClearStochSoln");

   myStochImpMgr ()->clearSoln ();
   }

//------------------------------------------------------------------------------

void WitRun::witGetCurrentScenario (int * currentScenario)
   {
   WitStochApiCall theCall (this);

   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("globNeedsStochModeSmsg", "currentScenario");

   apiGet (
                                currentScenario,
                               "currentScenario",
      theCall.myStochImpMgr ()->currentScenario ());

   issueGetAttrMsg ("currentScenario");
   }

//------------------------------------------------------------------------------

void WitRun::witGetNScenarios (int * nScenarios)
   {
   WitStochApiCall theCall (this);

   apiGet (             nScenarios, 
                       "nScenarios", 
      myStochImpMgr ()->nScenarios ());

   issueGetAttrMsg ("nScenarios");
   }

//------------------------------------------------------------------------------

void WitRun::witGetPeriodStage (int * * periodStage)
   {
   WitStochApiCall theCall (this);
   WitPeriod       thePer;

   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("globNeedsStochModeSmsg", "periodStage");

   if (myStochImpMgr ()->stageByObject ())
      myMsgFac () ("periodStageWStageByObjectSmsg");

   forbidNullArg (periodStage, "periodStage");

   apiAlloc (periodStage, myProblem ()->nPeriods ());

   forEachPeriod (thePer, myProblem ())
      (* periodStage)[thePer] = myStochImpMgr ()->periodStageIdx (thePer);

   issueGetAttrMsg ("periodStage");
   }

//------------------------------------------------------------------------------

void WitRun::witGetProbability (const WitOSRealArg & probability)
   {
   WitStochApiCall theCall (this);

   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("globNeedsStochModeSmsg", "probability");

   apiGet (                     probability,
                               "probability",
      theCall.myStochImpMgr ()->probability ());

   issueGetAttrMsg ("probability");
   }

//------------------------------------------------------------------------------

void WitRun::witGetStageByObject (WitBoolean * stageByObject)
   {
   WitStochApiCall theCall (this);

   apiGet (             stageByObject, 
                       "stageByObject", 
      myStochImpMgr ()->stageByObject ());

   issueGetAttrMsg ("stageByObject");
   }

//------------------------------------------------------------------------------

void WitRun::witGetStochMode (WitBoolean * stochMode)
   {
   WitStochApiCall theCall (this);

   apiGet (             stochMode, 
                       "stochMode", 
      myStochImpMgr ()->stochMode ());

   issueGetAttrMsg ("stochMode");
   }

//------------------------------------------------------------------------------

void WitRun::witGetStochSolnMode (WitBoolean * stochSolnMode)
   {
   WitStochApiCall theCall (this);

   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("globNeedsStochModeSmsg", "stochSolnMode");

   apiGet (             stochSolnMode, 
                       "stochSolnMode", 
      myStochImpMgr ()->stochSolnMode ());

   issueGetAttrMsg ("stochSolnMode");
   }

//------------------------------------------------------------------------------

void WitRun::witSetCurrentScenario (int currentScenario)
   {
   WitStochApiCall theCall (this);

   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("globNeedsStochModeSmsg", "currentScenario");

   theCall.prepImmRangedInt (
                               "currentScenario",
      theCall.myStochImpMgr ()->currentScenario (),
                                currentScenario,
      0,
      myStochImpMgr ()->nScenarios () - 1);

   if (theCall.argsOK ())
      theCall.myStochImpMgr ()->setCurrentScenario (currentScenario);
   }

//------------------------------------------------------------------------------

void WitRun::witSetNScenarios (int nScenarios)
   {
   WitStochApiCall theCall (this);

   theCall.prepImmPosInt (
                       "nScenarios", 
      myStochImpMgr ()->nScenarios (), 
                        nScenarios);

   if (theCall.argsOK ())
      myStochImpMgr ()->setNScenarios (nScenarios);
   }

//------------------------------------------------------------------------------

void WitRun::witSetPeriodStage (const int * periodStage)
   {
   WitStochApiCall theCall (this);

   theCall.setPeriodStage (periodStage);
   }

//------------------------------------------------------------------------------

void WitRun::witSetProbability (const WitISRealArg & probability)
   {
   WitStochApiCall theCall (this);

   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("globNeedsStochModeSmsg", "probability");

   theCall.prepNonNegUBDouble (
                               "probability",
      theCall.myStochImpMgr ()->probability (),
                                probability,
                                1. + FEAS_TOL,
                                1.);

   if (theCall.argsOK ())
      theCall.myStochImpMgr ()->setProbability (probability);
   }

//------------------------------------------------------------------------------

void WitRun::witSetStageByObject (WitBoolean boolval)
   {
   WitStochApiCall theCall (this);

   theCall.prepBool (
                       "stageByObject", 
      myStochImpMgr ()->stageByObject (), 
      boolval);

   if (theCall.argsOK ())
      myStochImpMgr ()->setStageByObject (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetStochMode (WitBoolean boolval)
   {
   WitStochApiCall theCall (this);

   if (boolval)
      if (theCall.myOptComp ()->multiObjMode ())
         myMsgFac () ("stochModeInMultiObjSmsg");

   theCall.prepBool (  
                       "stochMode", 
      myStochImpMgr ()->stochMode (), 
      boolval);

   if (theCall.argsOK ())
      myStochImpMgr ()->setStochMode (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witStochImplode ()
   {
   WitStochApiCall theCall (this);

   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("funcNeedsStochModeSmsg", "witStochImplode");

   if (myStochImpMgr ()->stochSolnMode ())
      myMsgFac () ("funcWStochSolnSmsg", "witStochImplode");

   myStochImpMgr ()->implode ();
   }
@


1.64
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.63
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d29 2
a30 2
{
WitStochApiCall theCall (this);
d32 2
a33 2
if (not myStochImpMgr ()->stochMode ())
myMsgFac () ("funcNeedsStochModeSmsg", "witClearStochSoln");
d35 2
a36 2
if (not myStochImpMgr ()->stochSolnMode ())
myMsgFac () ("funcWoStochSolnSmsg", "witClearStochSoln");
d38 2
a39 2
myStochImpMgr ()->clearSoln ();
}
d44 2
a45 2
{
WitStochApiCall theCall (this);
d47 2
a48 2
if (not myStochImpMgr ()->stochMode ())
myMsgFac () ("globNeedsStochModeSmsg", "currentScenario");
d50 4
a53 4
apiGet (
currentScenario,
"currentScenario",
theCall.myStochImpMgr ()->currentScenario ());
d55 2
a56 2
issueGetAttrMsg ("currentScenario");
}
d61 2
a62 2
{
WitStochApiCall theCall (this);
d64 3
a66 3
apiGet (             nScenarios,
"nScenarios",
myStochImpMgr ()->nScenarios ());
d68 2
a69 2
issueGetAttrMsg ("nScenarios");
}
d74 3
a76 3
{
WitStochApiCall theCall (this);
WitPeriod       thePer;
d78 2
a79 2
if (not myStochImpMgr ()->stochMode ())
myMsgFac () ("globNeedsStochModeSmsg", "periodStage");
d81 2
a82 2
if (myStochImpMgr ()->stageByObject ())
myMsgFac () ("periodStageWStageByObjectSmsg");
d84 1
a84 1
forbidNullArg (periodStage, "periodStage");
d86 1
a86 1
apiAlloc (periodStage, myProblem ()->nPeriods ());
d88 2
a89 2
forEachPeriod (thePer, myProblem ())
(* periodStage)[thePer] = myStochImpMgr ()->periodStageIdx (thePer);
d91 2
a92 2
issueGetAttrMsg ("periodStage");
}
d97 2
a98 2
{
WitStochApiCall theCall (this);
d100 2
a101 2
if (not myStochImpMgr ()->stochMode ())
myMsgFac () ("globNeedsStochModeSmsg", "probability");
d103 3
a105 3
apiGet (                     probability,
"probability",
theCall.myStochImpMgr ()->probability ());
d107 2
a108 2
issueGetAttrMsg ("probability");
}
d113 2
a114 2
{
WitStochApiCall theCall (this);
d116 3
a118 3
apiGet (             stageByObject,
"stageByObject",
myStochImpMgr ()->stageByObject ());
d120 2
a121 2
issueGetAttrMsg ("stageByObject");
}
d126 2
a127 2
{
WitStochApiCall theCall (this);
d129 3
a131 3
apiGet (             stochMode,
"stochMode",
myStochImpMgr ()->stochMode ());
d133 2
a134 2
issueGetAttrMsg ("stochMode");
}
d139 2
a140 2
{
WitStochApiCall theCall (this);
d142 2
a143 2
if (not myStochImpMgr ()->stochMode ())
myMsgFac () ("globNeedsStochModeSmsg", "stochSolnMode");
d145 3
a147 3
apiGet (             stochSolnMode,
"stochSolnMode",
myStochImpMgr ()->stochSolnMode ());
d149 2
a150 2
issueGetAttrMsg ("stochSolnMode");
}
d155 2
a156 2
{
WitStochApiCall theCall (this);
d158 2
a159 2
if (not myStochImpMgr ()->stochMode ())
myMsgFac () ("globNeedsStochModeSmsg", "currentScenario");
d161 10
a170 10
theCall.prepImmRangedInt (
"currentScenario",
theCall.myStochImpMgr ()->currentScenario (),
currentScenario,
0,
myStochImpMgr ()->nScenarios () - 1);

if (theCall.argsOK ())
theCall.myStochImpMgr ()->setCurrentScenario (currentScenario);
}
d175 2
a176 2
{
WitStochApiCall theCall (this);
d178 8
a185 8
theCall.prepImmPosInt (
"nScenarios",
myStochImpMgr ()->nScenarios (),
nScenarios);

if (theCall.argsOK ())
myStochImpMgr ()->setNScenarios (nScenarios);
}
d190 2
a191 2
{
WitStochApiCall theCall (this);
d193 2
a194 2
theCall.setPeriodStage (periodStage);
}
d199 2
a200 2
{
WitStochApiCall theCall (this);
d202 2
a203 2
if (not myStochImpMgr ()->stochMode ())
myMsgFac () ("globNeedsStochModeSmsg", "probability");
d205 10
a214 10
theCall.prepNonNegUBDouble (
"probability",
theCall.myStochImpMgr ()->probability (),
probability,
1. + FEAS_TOL,
1.);

if (theCall.argsOK ())
theCall.myStochImpMgr ()->setProbability (probability);
}
d219 2
a220 2
{
WitStochApiCall theCall (this);
d222 8
a229 8
theCall.prepBool (
"stageByObject",
myStochImpMgr ()->stageByObject (),
boolval);

if (theCall.argsOK ())
myStochImpMgr ()->setStageByObject (asaBool (boolval));
}
d234 2
a235 2
{
WitStochApiCall theCall (this);
d237 12
a248 12
if (boolval)
if (theCall.myOptComp ()->multiObjMode ())
myMsgFac () ("stochModeInMultiObjSmsg");

theCall.prepBool (
"stochMode",
myStochImpMgr ()->stochMode (),
boolval);

if (theCall.argsOK ())
myStochImpMgr ()->setStochMode (asaBool (boolval));
}
d253 2
a254 2
{
WitStochApiCall theCall (this);
d256 2
a257 2
if (not myStochImpMgr ()->stochMode ())
myMsgFac () ("funcNeedsStochModeSmsg", "witStochImplode");
d259 2
a260 2
if (myStochImpMgr ()->stochSolnMode ())
myMsgFac () ("funcWStochSolnSmsg", "witStochImplode");
d262 2
a263 2
myStochImpMgr ()->implode ();
}
@


1.62
log
@CPLEX
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d29 2
a30 2
   {
   WitStochApiCall theCall (this);
d32 2
a33 2
   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("funcNeedsStochModeSmsg", "witClearStochSoln");
d35 2
a36 2
   if (not myStochImpMgr ()->stochSolnMode ())
      myMsgFac () ("funcWoStochSolnSmsg", "witClearStochSoln");
d38 2
a39 2
   myStochImpMgr ()->clearSoln ();
   }
d44 2
a45 2
   {
   WitStochApiCall theCall (this);
d47 2
a48 2
   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("globNeedsStochModeSmsg", "currentScenario");
d50 4
a53 4
   apiGet (
                                currentScenario,
                               "currentScenario",
      theCall.myStochImpMgr ()->currentScenario ());
d55 2
a56 2
   issueGetAttrMsg ("currentScenario");
   }
d61 2
a62 2
   {
   WitStochApiCall theCall (this);
d64 3
a66 3
   apiGet (             nScenarios, 
                       "nScenarios", 
      myStochImpMgr ()->nScenarios ());
d68 2
a69 2
   issueGetAttrMsg ("nScenarios");
   }
d74 3
a76 3
   {
   WitStochApiCall theCall (this);
   WitPeriod       thePer;
d78 2
a79 2
   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("globNeedsStochModeSmsg", "periodStage");
d81 2
a82 2
   if (myStochImpMgr ()->stageByObject ())
      myMsgFac () ("periodStageWStageByObjectSmsg");
d84 1
a84 1
   forbidNullArg (periodStage, "periodStage");
d86 1
a86 1
   apiAlloc (periodStage, myProblem ()->nPeriods ());
d88 2
a89 2
   forEachPeriod (thePer, myProblem ())
      (* periodStage)[thePer] = myStochImpMgr ()->periodStageIdx (thePer);
d91 2
a92 2
   issueGetAttrMsg ("periodStage");
   }
d97 2
a98 2
   {
   WitStochApiCall theCall (this);
d100 2
a101 2
   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("globNeedsStochModeSmsg", "probability");
d103 3
a105 3
   apiGet (                     probability,
                               "probability",
      theCall.myStochImpMgr ()->probability ());
d107 2
a108 2
   issueGetAttrMsg ("probability");
   }
d113 2
a114 2
   {
   WitStochApiCall theCall (this);
d116 3
a118 3
   apiGet (             stageByObject, 
                       "stageByObject", 
      myStochImpMgr ()->stageByObject ());
d120 2
a121 2
   issueGetAttrMsg ("stageByObject");
   }
d126 2
a127 2
   {
   WitStochApiCall theCall (this);
d129 3
a131 3
   apiGet (             stochMode, 
                       "stochMode", 
      myStochImpMgr ()->stochMode ());
d133 2
a134 2
   issueGetAttrMsg ("stochMode");
   }
d139 2
a140 2
   {
   WitStochApiCall theCall (this);
d142 2
a143 2
   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("globNeedsStochModeSmsg", "stochSolnMode");
d145 3
a147 3
   apiGet (             stochSolnMode, 
                       "stochSolnMode", 
      myStochImpMgr ()->stochSolnMode ());
d149 2
a150 2
   issueGetAttrMsg ("stochSolnMode");
   }
d155 2
a156 2
   {
   WitStochApiCall theCall (this);
d158 2
a159 2
   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("globNeedsStochModeSmsg", "currentScenario");
d161 10
a170 10
   theCall.prepImmRangedInt (
                               "currentScenario",
      theCall.myStochImpMgr ()->currentScenario (),
                                currentScenario,
      0,
      myStochImpMgr ()->nScenarios () - 1);

   if (theCall.argsOK ())
      theCall.myStochImpMgr ()->setCurrentScenario (currentScenario);
   }
d175 2
a176 2
   {
   WitStochApiCall theCall (this);
d178 8
a185 8
   theCall.prepImmPosInt (
                       "nScenarios", 
      myStochImpMgr ()->nScenarios (), 
                        nScenarios);

   if (theCall.argsOK ())
      myStochImpMgr ()->setNScenarios (nScenarios);
   }
d190 2
a191 2
   {
   WitStochApiCall theCall (this);
d193 2
a194 2
   theCall.setPeriodStage (periodStage);
   }
d199 2
a200 2
   {
   WitStochApiCall theCall (this);
d202 2
a203 2
   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("globNeedsStochModeSmsg", "probability");
d205 10
a214 10
   theCall.prepNonNegUBDouble (
                               "probability",
      theCall.myStochImpMgr ()->probability (),
                                probability,
                                1. + FEAS_TOL,
                                1.);

   if (theCall.argsOK ())
      theCall.myStochImpMgr ()->setProbability (probability);
   }
d219 2
a220 2
   {
   WitStochApiCall theCall (this);
d222 8
a229 8
   theCall.prepBool (
                       "stageByObject", 
      myStochImpMgr ()->stageByObject (), 
      boolval);

   if (theCall.argsOK ())
      myStochImpMgr ()->setStageByObject (asaBool (boolval));
   }
d234 2
a235 2
   {
   WitStochApiCall theCall (this);
d237 12
a248 12
   if (boolval)
      if (theCall.myOptComp ()->multiObjMode ())
         myMsgFac () ("stochModeInMultiObjSmsg");

   theCall.prepBool (  
                       "stochMode", 
      myStochImpMgr ()->stochMode (), 
      boolval);

   if (theCall.argsOK ())
      myStochImpMgr ()->setStochMode (asaBool (boolval));
   }
d253 2
a254 2
   {
   WitStochApiCall theCall (this);
d256 2
a257 2
   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("funcNeedsStochModeSmsg", "witStochImplode");
d259 2
a260 2
   if (myStochImpMgr ()->stochSolnMode ())
      myMsgFac () ("funcWStochSolnSmsg", "witStochImplode");
d262 2
a263 2
   myStochImpMgr ()->implode ();
   }
@


1.61
log
@CPLEX
@
text
@d55 1
a55 1
   issueGetAttrMsg ("currentScenario", currentScenario);
d68 1
a68 1
   issueGetAttrMsg ("nScenarios", nScenarios);
d107 1
a107 1
   issueGetAttrMsg ("probability", probability);
@


1.60
log
@CPLEX
@
text
@a255 3
   if (not solverEmbedded ())
      myMsgFac () ("invalidWoSolverSmsg", "witStochImplode");

@


1.59
log
@CPLEX
@
text
@d256 1
a256 1
   if (not WitOptComp::solverEmbedded ())
@


1.58
log
@CPLEX
@
text
@a258 4
   if (not WitOptComp::coinEmbedded ())
      if (WitOptComp::cplexEmbedded ())
         myMsgFac () ("optWCplexWoCoinSmsg");

@


1.57
log
@Preparing for embedded CPLEX.
@
text
@d259 4
@


1.56
log
@Fixed a msg bug.
@
text
@d256 1
a256 1
   if (not SOLVER_EMBEDDED)
@


1.55
log
@Revising the build procedure.
@
text
@d257 1
a257 1
      myMsgFac () ("invalidWoCoinSmsg", "witStochImplode");
@


1.54
log
@Revising the build procedure.
@
text
@d256 1
a256 1
   if (not COIN_EMBEDDED)
@


1.53
log
@Revising the build procedure.
@
text
@d256 1
a256 1
   if (not WIT_EMBEDS_COIN)
@


1.52
log
@Revising the build process.
@
text
@d257 1
a257 1
      myMsgFac () ("invalidForNonOptImpModeSmsg", "witStochImplode");
@


1.51
log
@Multi-Obj Mode
@
text
@d256 1
a256 1
   if (not WitOptComp::optImpAllowed ())
@


1.50
log
@*** empty log message ***
@
text
@d205 2
a206 7
   if (probability.asaDbl () < 0.0)
      myMsgFac () ("dblLowEqUpEqImmSmsg", probability, 0.0, 1.0);

   if (probability.asaDbl () > 1.0 + FEAS_TOL)
      myMsgFac () ("dblLowEqUpEqImmSmsg", probability, 0.0, 1.0);

   theCall.prepDouble (        "probability",
d208 3
a210 1
                                probability);
@


1.49
log
@Stochastic Implosion
@
text
@d240 5
a244 1
   theCall.prepBool (
@


1.48
log
@Stochastic Implosion
@
text
@a191 1
   WitPeriod       thePer;
d193 1
a193 34
   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("globNeedsStochModeSmsg", "periodStage");

   if (myStochImpMgr ()->stageByObject ())
      myMsgFac () ("periodStageWStageByObjectSmsg");

   theCall.prepIntVec ("periodStage", periodStage);

   forEachPeriod (thePer, myProblem ())
      if    (periodStage[thePer] != 0)
         if (periodStage[thePer] != 1)
            {
            myInputID ()->setErrorPeriod (thePer);

            myMsgFac () ("intLowEqUpEqImmSmsg", periodStage[thePer], 0, 1);
            }

   for (thePer = 1; thePer < nPeriods (); thePer ++)
      if    (periodStage[thePer - 1] == 1)
         if (periodStage[thePer    ] == 0)
            myMsgFac () ("perStageConflictSmsg", thePer - 1, thePer);

   if (theCall.argsOK ())
      {
      if (myMsgFac ().mayIssue ("setVecIntAttrMsg"))
         {
         WitMsgArg theMsgArg (periodStage, nPeriods ());

         myMsgFac () ("setVecIntAttrMsg", "periodStage", theMsgArg);
         }

      forEachPeriod (thePer, myProblem ())
         myStochImpMgr ()->setPeriodStageIdx (thePer, periodStage[thePer]);
      }
@


1.47
log
@Stochastic Implosion
@
text
@d225 2
a226 1
      myStochImpMgr ()->setPeriodStageIdx (periodStage);
@


1.46
log
@Stochastic Implosion
@
text
@d89 1
a89 1
      (* periodStage)[thePer] = myStochImpMgr ()->periodStage (thePer);
d225 1
a225 1
      myStochImpMgr ()->setPeriodStage (periodStage);
@


1.45
log
@Stochastic Implosion
@
text
@d76 1
d84 6
a89 3
   apiGet (             periodStage, 
                       "periodStage", 
      myStochImpMgr ()->periodStage ());
@


1.44
log
@Stochastic Implosion
@
text
@d43 1
a43 1
void WitRun::witGetCurScenarioIndex (int * curScenarioIndex)
d48 1
a48 1
      myMsgFac () ("globNeedsStochModeSmsg", "curScenarioIndex");
d51 3
a53 3
                                curScenarioIndex,
                               "curScenarioIndex",
      theCall.myStochImpMgr ()->curScenarioIndex ());
d55 1
a55 1
   issueGetAttrMsg ("curScenarioIndex", curScenarioIndex);
d150 1
a150 1
void WitRun::witSetCurScenarioIndex (int curScenarioIndex)
d155 1
a155 1
      myMsgFac () ("globNeedsStochModeSmsg", "curScenarioIndex");
d158 3
a160 3
                               "curScenarioIndex",
      theCall.myStochImpMgr ()->curScenarioIndex (),
                                curScenarioIndex,
d165 1
a165 1
      theCall.myStochImpMgr ()->setCurScenarioIndex (curScenarioIndex);
@


1.43
log
@Stochastic Implosion
@
text
@d73 1
a73 1
void WitRun::witGetPerStageIndex (int * * perStageIndex)
d78 1
a78 1
      myMsgFac () ("globNeedsStochModeSmsg", "perStageIndex");
d81 1
a81 1
      myMsgFac () ("perStageIndexWStageByObjectSmsg");
d83 3
a85 3
   apiGet (             perStageIndex, 
                       "perStageIndex", 
      myStochImpMgr ()->perStageIndex ());
d87 1
a87 1
   issueGetAttrMsg ("perStageIndex");
d185 1
a185 1
void WitRun::witSetPerStageIndex (const int * perStageIndex)
d191 1
a191 1
      myMsgFac () ("globNeedsStochModeSmsg", "perStageIndex");
d194 1
a194 1
      myMsgFac () ("perStageIndexWStageByObjectSmsg");
d196 1
a196 1
   theCall.prepIntVec ("perStageIndex", perStageIndex);
d199 2
a200 2
      if    (perStageIndex[thePer] != 0)
         if (perStageIndex[thePer] != 1)
d204 1
a204 1
            myMsgFac () ("intLowEqUpEqImmSmsg", perStageIndex[thePer], 0, 1);
d208 2
a209 2
      if    (perStageIndex[thePer - 1] == 1)
         if (perStageIndex[thePer    ] == 0)
d216 1
a216 1
         WitMsgArg theMsgArg (perStageIndex, nPeriods ());
d218 1
a218 1
         myMsgFac () ("setVecIntAttrMsg", "perStageIndex", theMsgArg);
d221 1
a221 1
      myStochImpMgr ()->setPerStageIndex (perStageIndex);
@


1.42
log
@Stochastic Implosion
@
text
@d210 1
a210 1
            myMsgFac () ("globalStageMisMatchSmsg", thePer - 1, thePer);
@


1.41
log
@Stochastic Implosion
@
text
@d73 19
a120 19
void WitRun::witGetStageIndex (int * * stageIndex)
   {
   WitStochApiCall theCall (this);

   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("globNeedsStochModeSmsg", "stageIndex");

   if (myStochImpMgr ()->stageByObject ())
      myMsgFac () ("stageIndexWStageByObjectSmsg");

   apiGet (             stageIndex, 
                       "stageIndex", 
      myStochImpMgr ()->stageIndex ());

   issueGetAttrMsg ("stageIndex");
   }

//------------------------------------------------------------------------------

d185 42
a264 42
void WitRun::witSetStageIndex (const int * stageIndex)
   {
   WitStochApiCall theCall (this);
   WitPeriod       thePer;

   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("globNeedsStochModeSmsg", "stageIndex");

   if (myStochImpMgr ()->stageByObject ())
      myMsgFac () ("stageIndexWStageByObjectSmsg");

   theCall.prepIntVec ("stageIndex", stageIndex);

   forEachPeriod (thePer, myProblem ())
      if    (stageIndex[thePer] != 0)
         if (stageIndex[thePer] != 1)
            {
            myInputID ()->setErrorPeriod (thePer);

            myMsgFac () ("intLowEqUpEqImmSmsg", stageIndex[thePer], 0, 1);
            }

   for (thePer = 1; thePer < nPeriods (); thePer ++)
      if    (stageIndex[thePer - 1] == 1)
         if (stageIndex[thePer    ] == 0)
            myMsgFac () ("globalStageMisMatchSmsg", thePer - 1, thePer);

   if (theCall.argsOK ())
      {
      if (myMsgFac ().mayIssue ("setVecIntAttrMsg"))
         {
         WitMsgArg theMsgArg (stageIndex, nPeriods ());

         myMsgFac () ("setVecIntAttrMsg", "stageIndex", theMsgArg);
         }

      myStochImpMgr ()->setStageIndex (stageIndex);
      }
   }

//------------------------------------------------------------------------------

@


1.40
log
@Stochastic Implosion
@
text
@d18 1
d102 19
d223 42
@


1.39
log
@Stochastic Implosion
@
text
@d42 1
a42 1
void WitRun::witGetCurScenarioNo (int * curScenarioNo)
d47 1
a47 1
      myMsgFac () ("globNeedsStochModeSmsg", "curScenarioNo");
d50 3
a52 3
                                curScenarioNo,
                               "curScenarioNo",
      theCall.myStochImpMgr ()->curScenarioNo ());
d54 1
a54 1
   issueGetAttrMsg ("curScenarioNo", curScenarioNo);
d130 1
a130 1
void WitRun::witSetCurScenarioNo (int curScenarioNo)
d135 1
a135 1
      myMsgFac () ("globNeedsStochModeSmsg", "curScenarioNo");
d138 3
a140 3
                               "curScenarioNo",
      theCall.myStochImpMgr ()->curScenarioNo (),
                                curScenarioNo,
d145 1
a145 1
      theCall.myStochImpMgr ()->setCurScenarioNo (curScenarioNo);
@


1.38
log
@Stochastic Implosion
@
text
@d27 1
a27 1
void WitRun::witDiscardStochSoln ()
d32 1
a32 1
      myMsgFac () ("funcNeedsStochModeSmsg", "witDiscardStochSoln");
d35 1
a35 1
      myMsgFac () ("funcWoStochSolnSmsg", "witDiscardStochSoln");
d37 1
a37 1
   myStochImpMgr ()->discardSoln ();
@


1.37
log
@Stochastic Implosion
@
text
@a30 3
   if (not myStochImpMgr ()->stochImpAllowed ())
      myMsgFac () ("funcNYASmsg", "witDiscardStochSoln");

a45 3
   if (not myStochImpMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "curScenarioNo");

a62 3
   if (not myStochImpMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "nScenarios");

a75 3
   if (not myStochImpMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "probability");

a91 3
   if (not myStochImpMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "stageByObject");

a104 3
   if (not myStochImpMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "stochMode");

a117 3
   if (not myStochImpMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "stochSolnMode");

a133 3
   if (not myStochImpMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "curScenarioNo");

a153 3
   if (not myStochImpMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "nScenarios");

a168 3
   if (not myStochImpMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "probability");

a191 3
   if (not myStochImpMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "stageByObject");

a206 3
   if (not myStochImpMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "stochMode");

a221 3
   if (not myStochImpMgr ()->stochImpAllowed ())
      myMsgFac () ("funcNYASmsg", "witStochImplode");

@


1.36
log
@Stochastic Implosion
@
text
@d45 20
a99 20
void WitRun::witGetScenarioIndex (int * scenarioIndex)
   {
   WitStochApiCall theCall (this);

   if (not myStochImpMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "scenarioIndex");

   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("globNeedsStochModeSmsg", "scenarioIndex");

   apiGet (
                                scenarioIndex,
                               "scenarioIndex",
      theCall.myStochImpMgr ()->scenarioIndex ());

   issueGetAttrMsg ("scenarioIndex", scenarioIndex);
   }

//------------------------------------------------------------------------------

d151 23
a217 23
void WitRun::witSetScenarioIndex (int scenarioIndex)
   {
   WitStochApiCall theCall (this);

   if (not myStochImpMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "scenarioIndex");

   if (not myStochImpMgr ()->stochMode ())
      myMsgFac () ("globNeedsStochModeSmsg", "scenarioIndex");

   theCall.prepImmRangedInt (
                               "scenarioIndex",
      theCall.myStochImpMgr ()->scenarioIndex (),
                                scenarioIndex,
      0,
      myStochImpMgr ()->nScenarios () - 1);

   if (theCall.argsOK ())
      theCall.myStochImpMgr ()->setScenarioIndex (scenarioIndex);
   }

//------------------------------------------------------------------------------

@


1.35
log
@Stochastic Implosion
@
text
@d61 1
a61 1
void WitRun::witGetScenarioIndex (int * scenarioIndex)
d66 1
a66 1
      myMsgFac () ("attNYASmsg", "scenarioIndex");
d69 1
a69 1
      myMsgFac () ("globNeedsStochModeSmsg", "scenarioIndex");
d71 3
a73 4
   apiGet (
                                scenarioIndex,
                               "scenarioIndex",
      theCall.myStochImpMgr ()->scenarioIndex ());
d75 1
a75 1
   issueGetAttrMsg ("scenarioIndex", scenarioIndex);
d80 1
a80 1
void WitRun::witGetScenarioProb (const WitOSRealArg & scenarioProb)
d85 1
a85 1
      myMsgFac () ("attNYASmsg", "scenarioProb");
d88 1
a88 1
      myMsgFac () ("globNeedsStochModeSmsg", "scenarioProb");
d90 4
a93 3
   apiGet (                     scenarioProb,
                               "scenarioProb",
      theCall.myStochImpMgr ()->scenarioProb ());
d95 1
a95 1
   issueGetAttrMsg ("scenarioProb", scenarioProb);
d169 1
a169 1
void WitRun::witSetScenarioIndex (int scenarioIndex)
d174 1
a174 1
      myMsgFac () ("attNYASmsg", "scenarioIndex");
d177 7
a183 1
      myMsgFac () ("globNeedsStochModeSmsg", "scenarioIndex");
d185 3
a187 6
   theCall.prepImmRangedInt (
                               "scenarioIndex",
      theCall.myStochImpMgr ()->scenarioIndex (),
                                scenarioIndex,
      0,
      myStochImpMgr ()->nScenarios () - 1);
d190 1
a190 1
      theCall.myStochImpMgr ()->setScenarioIndex (scenarioIndex);
d195 1
a195 1
void WitRun::witSetScenarioProb (const WitISRealArg & scenarioProb)
d200 1
a200 1
      myMsgFac () ("attNYASmsg", "scenarioProb");
d203 1
a203 1
      myMsgFac () ("globNeedsStochModeSmsg", "scenarioProb");
d205 6
a210 9
   if (scenarioProb.asaDbl () < 0.0)
      myMsgFac () ("dblLowEqUpEqImmSmsg", scenarioProb, 0.0, 1.0);

   if (scenarioProb.asaDbl () > 1.0 + FEAS_TOL)
      myMsgFac () ("dblLowEqUpEqImmSmsg", scenarioProb, 0.0, 1.0);

   theCall.prepDouble (        "scenarioProb",
      theCall.myStochImpMgr ()->scenarioProb (),
                                scenarioProb);
d213 1
a213 1
      theCall.myStochImpMgr ()->setScenarioProb (scenarioProb);
@


1.34
log
@Stochastic Implosion
@
text
@a178 2
   theCall.prepStochSolnModeAttr ();

a242 2
   theCall.prepStochSolnModeAttr ();

@


1.33
log
@Stochastic Implosion
@
text
@d31 1
a31 1
   if (not myProblem ()->myStochImpMgr ()->stochImpAllowed ())
d34 1
a34 1
   if (not myProblem ()->myStochImpMgr ()->stochMode ())
d37 1
a37 1
   if (not myProblem ()->myStochImpMgr ()->stochSolnMode ())
d40 1
a40 1
   myProblem ()->myStochImpMgr ()->discardSoln ();
d49 1
a49 1
   if (not myProblem ()->myStochImpMgr ()->stochImpAllowed ())
d52 3
a54 3
   apiGet (                           nScenarios, 
                                     "nScenarios", 
      myProblem ()->myStochImpMgr ()->nScenarios ());
d65 1
a65 1
   if (not myProblem ()->myStochImpMgr ()->stochImpAllowed ())
d68 1
a68 1
   if (not myProblem ()->myStochImpMgr ()->stochMode ())
d85 1
a85 1
   if (not myProblem ()->myStochImpMgr ()->stochImpAllowed ())
d88 1
a88 1
   if (not myProblem ()->myStochImpMgr ()->stochMode ())
d104 1
a104 1
   if (not myProblem ()->myStochImpMgr ()->stochImpAllowed ())
d107 3
a109 3
   apiGet (                           stageByObject, 
                                     "stageByObject", 
      myProblem ()->myStochImpMgr ()->stageByObject ());
d120 1
a120 1
   if (not myProblem ()->myStochImpMgr ()->stochImpAllowed ())
d123 3
a125 3
   apiGet (                           stochMode, 
                                     "stochMode", 
      myProblem ()->myStochImpMgr ()->stochMode ());
d136 1
a136 1
   if (not myProblem ()->myStochImpMgr ()->stochImpAllowed ())
d139 1
a139 1
   if (not myProblem ()->myStochImpMgr ()->stochMode ())
d142 3
a144 3
   apiGet (                           stochSolnMode, 
                                     "stochSolnMode", 
      myProblem ()->myStochImpMgr ()->stochSolnMode ());
d155 1
a155 1
   if (not myProblem ()->myStochImpMgr ()->stochImpAllowed ())
d159 3
a161 3
      "nScenarios", 
      myProblem ()->myStochImpMgr ()->nScenarios (), 
      nScenarios);
d164 1
a164 1
      myProblem ()->myStochImpMgr ()->setNScenarios (nScenarios);
d173 1
a173 1
   if (not myProblem ()->myStochImpMgr ()->stochImpAllowed ())
d176 1
a176 1
   if (not myProblem ()->myStochImpMgr ()->stochMode ())
d186 1
a186 1
      myProblem ()->myStochImpMgr ()->nScenarios () - 1);
d198 1
a198 1
   if (not myProblem ()->myStochImpMgr ()->stochImpAllowed ())
d201 1
a201 1
   if (not myProblem ()->myStochImpMgr ()->stochMode ())
d224 1
a224 1
   if (not myProblem ()->myStochImpMgr ()->stochImpAllowed ())
d228 2
a229 2
      "stageByObject", 
      myProblem ()->myStochImpMgr ()->stageByObject (), 
d233 1
a233 1
      myProblem ()->myStochImpMgr ()->setStageByObject (asaBool (boolval));
d242 1
a242 1
   if (not myProblem ()->myStochImpMgr ()->stochImpAllowed ())
d248 2
a249 2
      "stochMode", 
      myProblem ()->myStochImpMgr ()->stochMode (), 
d253 1
a253 1
      myProblem ()->myStochImpMgr ()->setStochMode (asaBool (boolval));
d262 1
a262 1
   if (not myProblem ()->myStochImpMgr ()->stochImpAllowed ())
d268 1
a268 1
   if (not myProblem ()->myStochImpMgr ()->stochMode ())
d271 1
a271 1
   if (myProblem ()->myStochImpMgr ()->stochSolnMode ())
d274 1
a274 1
   myProblem ()->myStochImpMgr ()->implode ();
@


1.32
log
@Stochastic Implosion
@
text
@a90 2
   theCall.prepGetStochAttr ();

@


1.31
log
@Stochastic Implosion
@
text
@a211 2
   theCall.prepStochModeAttr ();

@


1.30
log
@Stochastic Implosion
@
text
@d34 1
a34 1
   if (not myProblem ()->myStochImpMgr ()->stochDataMode ())
d68 1
a68 1
   if (not myProblem ()->myStochImpMgr ()->stochDataMode ())
d88 1
a88 1
   if (not myProblem ()->myStochImpMgr ()->stochDataMode ())
d118 1
a118 1
void WitRun::witGetStochDataMode (WitBoolean * stochDataMode)
d123 1
a123 1
      myMsgFac () ("attNYASmsg", "stochDataMode");
d125 3
a127 3
   apiGet (                           stochDataMode, 
                                     "stochDataMode", 
      myProblem ()->myStochImpMgr ()->stochDataMode ());
d129 1
a129 1
   issueGetAttrMsg ("stochDataMode");
d141 1
a141 1
   if (not myProblem ()->myStochImpMgr ()->stochDataMode ())
d178 1
a178 1
   if (not myProblem ()->myStochImpMgr ()->stochDataMode ())
d203 1
a203 1
   if (not myProblem ()->myStochImpMgr ()->stochDataMode ())
d212 1
a212 1
   theCall.prepStochDataModeAttr ();
d242 1
a242 1
void WitRun::witSetStochDataMode (WitBoolean boolval)
d247 1
a247 1
      myMsgFac () ("attNYASmsg", "stochDataMode");
d252 2
a253 2
      "stochDataMode", 
      myProblem ()->myStochImpMgr ()->stochDataMode (), 
d257 1
a257 1
      myProblem ()->myStochImpMgr ()->setStochDataMode (asaBool (boolval));
d272 1
a272 1
   if (not myProblem ()->myStochImpMgr ()->stochDataMode ())
@


1.29
log
@Stochastic Implosion.
@
text
@d61 1
a61 1
void WitRun::witGetProbability (const WitOSRealArg & probability)
d66 1
a66 1
      myMsgFac () ("attNYASmsg", "probability");
d69 1
a69 1
      myMsgFac () ("globNeedsStochModeSmsg", "probability");
d71 4
a74 1
   theCall.prepGetStochAttr ();
d76 1
a76 5
   apiGet (                     probability,
                               "probability",
      theCall.myStochImpMgr ()->probability ());

   issueGetAttrMsg ("probability", probability);
d81 1
a81 1
void WitRun::witGetScenarioIndex (int * scenarioIndex)
d86 1
a86 1
      myMsgFac () ("attNYASmsg", "scenarioIndex");
d89 3
a91 1
      myMsgFac () ("globNeedsStochModeSmsg", "scenarioIndex");
d93 3
a95 4
   apiGet (
                                scenarioIndex,
                               "scenarioIndex",
      theCall.myStochImpMgr ()->scenarioIndex ());
d97 1
a97 1
   issueGetAttrMsg ("scenarioIndex", scenarioIndex);
d171 1
a171 1
void WitRun::witSetProbability (const WitISRealArg & probability)
d176 1
a176 1
      myMsgFac () ("attNYASmsg", "probability");
d179 1
a179 1
      myMsgFac () ("globNeedsStochModeSmsg", "probability");
d181 1
a181 2
   if (probability.asaDbl () < 0.0)
      myMsgFac () ("dblLowEqUpEqImmSmsg", probability, 0.0, 1.0);
d183 6
a188 8
   if (probability.asaDbl () > 1.0 + FEAS_TOL)
      myMsgFac () ("dblLowEqUpEqImmSmsg", probability, 0.0, 1.0);

   theCall.prepStochDataModeAttr ();

   theCall.prepDouble (        "probability",
      theCall.myStochImpMgr ()->probability (),
                                probability);
d191 1
a191 1
      theCall.myStochImpMgr ()->setProbability (probability);
d196 1
a196 1
void WitRun::witSetScenarioIndex (int scenarioIndex)
d201 1
a201 1
      myMsgFac () ("attNYASmsg", "scenarioIndex");
d204 7
a210 1
      myMsgFac () ("globNeedsStochModeSmsg", "scenarioIndex");
d212 1
a212 1
   theCall.prepStochSolnModeAttr ();
d214 3
a216 6
   theCall.prepImmRangedInt (
                               "scenarioIndex",
      theCall.myStochImpMgr ()->scenarioIndex (),
                                scenarioIndex,
      0,
      myProblem ()->myStochImpMgr ()->nScenarios () - 1);
d219 1
a219 1
      theCall.myStochImpMgr ()->setScenarioIndex (scenarioIndex);
@


1.28
log
@Stochastic Implosion
@
text
@d71 2
a76 2
   theCall.issueScenMsg ();

@


1.27
log
@Stochastic Implosion
@
text
@d187 1
a187 1
   theCall.prepStochAttr ();
@


1.26
log
@Stochastic Implosion
@
text
@d19 1
a19 1
#include <StochMgr.h>
d31 1
a31 1
   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
d34 1
a34 1
   if (not myProblem ()->myStochMgr ()->stochDataMode ())
d37 1
a37 1
   if (not myProblem ()->myStochMgr ()->stochSolnMode ())
d40 1
a40 1
   myProblem ()->myStochMgr ()->discardSoln ();
d49 1
a49 1
   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
d52 3
a54 3
   apiGet (                        nScenarios, 
                                  "nScenarios", 
      myProblem ()->myStochMgr ()->nScenarios ());
d65 1
a65 1
   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
d68 1
a68 1
   if (not myProblem ()->myStochMgr ()->stochDataMode ())
d71 3
a73 3
   apiGet (                  probability,
                            "probability",
      theCall.myStochMgr ()->probability ());
d86 1
a86 1
   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
d89 1
a89 1
   if (not myProblem ()->myStochMgr ()->stochDataMode ())
d93 3
a95 3
                             scenarioIndex,
                            "scenarioIndex",
      theCall.myStochMgr ()->scenarioIndex ());
d106 1
a106 1
   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
d109 3
a111 3
   apiGet (                        stageByObject, 
                                  "stageByObject", 
      myProblem ()->myStochMgr ()->stageByObject ());
d122 1
a122 1
   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
d125 3
a127 3
   apiGet (                        stochDataMode, 
                                  "stochDataMode", 
      myProblem ()->myStochMgr ()->stochDataMode ());
d138 1
a138 1
   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
d141 1
a141 1
   if (not myProblem ()->myStochMgr ()->stochDataMode ())
d144 3
a146 3
   apiGet (                        stochSolnMode, 
                                  "stochSolnMode", 
      myProblem ()->myStochMgr ()->stochSolnMode ());
d157 1
a157 1
   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
d162 1
a162 1
      myProblem ()->myStochMgr ()->nScenarios (), 
d166 1
a166 1
      myProblem ()->myStochMgr ()->setNScenarios (nScenarios);
d175 1
a175 1
   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
d178 1
a178 1
   if (not myProblem ()->myStochMgr ()->stochDataMode ())
d189 3
a191 3
   theCall.prepDouble (     "probability",
      theCall.myStochMgr ()->probability (),
                             probability);
d194 1
a194 1
      theCall.myStochMgr ()->setProbability (probability);
d203 1
a203 1
   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
d206 1
a206 1
   if (not myProblem ()->myStochMgr ()->stochDataMode ())
d212 3
a214 3
                            "scenarioIndex",
      theCall.myStochMgr ()->scenarioIndex (),
                             scenarioIndex,
d216 1
a216 1
      myProblem ()->myStochMgr ()->nScenarios () - 1);
d219 1
a219 1
      theCall.myStochMgr ()->setScenarioIndex (scenarioIndex);
d228 1
a228 1
   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
d233 1
a233 1
      myProblem ()->myStochMgr ()->stageByObject (), 
d237 1
a237 1
      myProblem ()->myStochMgr ()->setStageByObject (asaBool (boolval));
d246 1
a246 1
   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
d253 1
a253 1
      myProblem ()->myStochMgr ()->stochDataMode (), 
d257 1
a257 1
      myProblem ()->myStochMgr ()->setStochDataMode (asaBool (boolval));
d266 1
a266 1
   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
d272 1
a272 1
   if (not myProblem ()->myStochMgr ()->stochDataMode ())
d275 1
a275 1
   if (myProblem ()->myStochMgr ()->stochSolnMode ())
d278 1
a278 1
   myProblem ()->myStochMgr ()->implode ();
@


1.25
log
@Stochastic Implosion
@
text
@d249 1
a249 1
   theCall.prepStochDataModeAttr ();
@


1.24
log
@Stochastic Implosion
@
text
@d209 1
a209 1
   theCall.prepStochDataModeAttr ();
@


1.23
log
@Stochastic Implosion
@
text
@d37 1
a37 1
   if (not myProblem ()->myStochMgr ()->stochSolnExists ())
d134 1
a134 1
void WitRun::witGetStochSolnExists (WitBoolean * stochSolnExists)
d139 1
a139 1
      myMsgFac () ("attNYASmsg", "stochSolnExists");
d142 1
a142 1
      myMsgFac () ("globNeedsStochModeSmsg", "stochSolnExists");
d144 3
a146 3
   apiGet (                        stochSolnExists, 
                                  "stochSolnExists", 
      myProblem ()->myStochMgr ()->stochSolnExists ());
d148 1
a148 1
   issueGetAttrMsg ("stochSolnExists");
d275 1
a275 1
   if (myProblem ()->myStochMgr ()->stochSolnExists ())
@


1.22
log
@Stochastic Implosion
@
text
@d75 2
a77 2

   theCall.issueScenMsg ();
d187 1
a187 1
   theCall.prepSetStochDataModeAttr ();
a192 2
   theCall.issueScenMsg ();

d209 1
a209 1
   theCall.prepSetStochDataModeAttr ();
d249 1
a249 1
   theCall.prepSetStochDataModeAttr ();
@


1.21
log
@Stochastic Implosion
@
text
@d187 1
a187 1
   theCall.setsStochModeAttr ();
d211 1
a211 1
   theCall.setsStochModeAttr ();
d251 1
a251 1
   theCall.setsStochModeAttr ();
@


1.20
log
@Stochastic Implosion
@
text
@d61 1
a61 1
void WitRun::witGetScenarioIndex (int * scenarioIndex)
d66 1
a66 1
      myMsgFac () ("attNYASmsg", "scenarioIndex");
d69 5
a73 1
      myMsgFac () ("globNeedsStochModeSmsg", "scenarioIndex");
d75 1
a75 4
   apiGet (
                             scenarioIndex,
                            "scenarioIndex",
      theCall.myStochMgr ()->scenarioIndex ());
d77 1
a77 1
   issueGetAttrMsg ("scenarioIndex", scenarioIndex);
d82 1
a82 1
void WitRun::witGetScenarioProb (const WitOSRealArg & scenarioProb)
d87 1
a87 1
      myMsgFac () ("attNYASmsg", "scenarioProb");
d90 1
a90 1
      myMsgFac () ("globNeedsStochModeSmsg", "scenarioProb");
d92 4
a95 3
   apiGet (                  scenarioProb,
                            "scenarioProb",
      theCall.myStochMgr ()->scenarioProb ());
d97 1
a97 3
   issueGetAttrMsg ("scenarioProb", scenarioProb);

   theCall.issueScenMsg ();
d171 1
a171 1
void WitRun::witSetScenarioIndex (int scenarioIndex)
d176 1
a176 1
      myMsgFac () ("attNYASmsg", "scenarioIndex");
d179 7
a185 1
      myMsgFac () ("globNeedsStochModeSmsg", "scenarioIndex");
d189 5
a193 6
   theCall.prepImmRangedInt (
                            "scenarioIndex",
      theCall.myStochMgr ()->scenarioIndex (),
                             scenarioIndex,
      0,
      myProblem ()->myStochMgr ()->nScenarios () - 1);
d196 1
a196 1
      theCall.myStochMgr ()->setScenarioIndex (scenarioIndex);
d201 1
a201 1
void WitRun::witSetScenarioProb (const WitISRealArg & scenarioProb)
d206 1
a206 1
      myMsgFac () ("attNYASmsg", "scenarioProb");
d209 1
a209 7
      myMsgFac () ("globNeedsStochModeSmsg", "scenarioProb");

   if (scenarioProb.asaDbl () < 0.0)
      myMsgFac () ("dblLowEqUpEqImmSmsg", scenarioProb, 0.0, 1.0);

   if (scenarioProb.asaDbl () > 1.0 + FEAS_TOL)
      myMsgFac () ("dblLowEqUpEqImmSmsg", scenarioProb, 0.0, 1.0);
d213 6
a218 5
   theCall.prepDouble (     "scenarioProb",
      theCall.myStochMgr ()->scenarioProb (),
                             scenarioProb);

   theCall.issueScenMsg ();
d221 1
a221 1
      theCall.myStochMgr ()->setScenarioProb (scenarioProb);
@


1.19
log
@Stochastic Implosion
@
text
@a180 3
   if (myProblem ()->myStochMgr ()->stochSolnExists ())
      myMsgFac () ("setGlobStochSolnSmsg", "scenarioIndex");

@


1.18
log
@Stochastic Implosion
@
text
@d181 3
@


1.17
log
@Stochastic Implosion
@
text
@d34 1
a34 1
   if (not myProblem ()->myStochMgr ()->stochasticMode ())
d68 1
a68 1
   if (not myProblem ()->myStochMgr ()->stochasticMode ())
d88 1
a88 1
   if (not myProblem ()->myStochMgr ()->stochasticMode ())
d118 1
a118 1
void WitRun::witGetStochSolnExists (WitBoolean * stochSolnExists)
d123 1
a123 4
      myMsgFac () ("attNYASmsg", "stochSolnExists");

   if (not myProblem ()->myStochMgr ()->stochasticMode ())
      myMsgFac () ("globNeedsStochModeSmsg", "stochSolnExists");
d125 3
a127 3
   apiGet (                        stochSolnExists, 
                                  "stochSolnExists", 
      myProblem ()->myStochMgr ()->stochSolnExists ());
d129 1
a129 1
   issueGetAttrMsg ("stochSolnExists");
d134 1
a134 1
void WitRun::witGetStochasticMode (WitBoolean * stochasticMode)
d139 4
a142 1
      myMsgFac () ("attNYASmsg", "stochasticMode");
d144 3
a146 3
   apiGet (                        stochasticMode, 
                                  "stochasticMode", 
      myProblem ()->myStochMgr ()->stochasticMode ());
d148 1
a148 1
   issueGetAttrMsg ("stochasticMode");
d178 1
a178 1
   if (not myProblem ()->myStochMgr ()->stochasticMode ())
d203 1
a203 1
   if (not myProblem ()->myStochMgr ()->stochasticMode ())
d244 1
a244 1
void WitRun::witSetStochasticMode (WitBoolean boolval)
d249 1
a249 1
      myMsgFac () ("attNYASmsg", "stochasticMode");
d254 2
a255 2
      "stochasticMode", 
      myProblem ()->myStochMgr ()->stochasticMode (), 
d259 1
a259 1
      myProblem ()->myStochMgr ()->setStochasticMode (asaBool (boolval));
d274 1
a274 1
   if (not myProblem ()->myStochMgr ()->stochasticMode ())
@


1.16
log
@Stochastic Implosion
@
text
@d27 18
d118 1
a118 1
void WitRun::witGetStochSolnAvail (WitBoolean * stochSolnAvail)
d123 1
a123 1
      myMsgFac () ("attNYASmsg", "stochSolnAvail");
d126 1
a126 1
      myMsgFac () ("globNeedsStochModeSmsg", "stochSolnAvail");
d128 3
a130 3
   apiGet (                        stochSolnAvail, 
                                  "stochSolnAvail", 
      myProblem ()->myStochMgr ()->stochSolnAvail ());
d132 1
a132 1
   issueGetAttrMsg ("stochSolnAvail");
d277 3
@


1.15
log
@Stochastic Implosion
@
text
@d100 19
@


1.14
log
@Stochastic Implosion
@
text
@d50 2
a51 2
   if (not myProblem ()->myStochMgr ()->stochImpMode ())
      myMsgFac () ("globNonStochModeSmsg", "scenarioIndex");
d70 2
a71 2
   if (not myProblem ()->myStochMgr ()->stochImpMode ())
      myMsgFac () ("globNonStochModeSmsg", "scenarioProb");
d100 1
a100 1
void WitRun::witGetStochImpMode (WitBoolean * stochImpMode)
d105 1
a105 1
      myMsgFac () ("attNYASmsg", "stochImpMode");
d107 3
a109 3
   apiGet (                        stochImpMode, 
                                  "stochImpMode", 
      myProblem ()->myStochMgr ()->stochImpMode ());
d111 1
a111 1
   issueGetAttrMsg ("stochImpMode");
d141 2
a142 2
   if (not myProblem ()->myStochMgr ()->stochImpMode ())
      myMsgFac () ("globNonStochModeSmsg", "scenarioIndex");
d166 2
a167 2
   if (not myProblem ()->myStochMgr ()->stochImpMode ())
      myMsgFac () ("globNonStochModeSmsg", "scenarioProb");
d207 1
a207 1
void WitRun::witSetStochImpMode (WitBoolean boolval)
d212 1
a212 1
      myMsgFac () ("attNYASmsg", "stochImpMode");
d217 2
a218 2
      "stochImpMode", 
      myProblem ()->myStochMgr ()->stochImpMode (), 
d222 1
a222 1
      myProblem ()->myStochMgr ()->setStochImpMode (asaBool (boolval));
d237 1
a237 1
   if (not myProblem ()->myStochMgr ()->stochImpMode ())
@


1.13
log
@Stochastic Implosion
@
text
@d20 1
d234 3
@


1.12
log
@Stochastic Implosion
@
text
@a159 2
   double scenProbDbl;

d168 2
a169 1
   scenProbDbl = scenarioProb;
d171 2
a172 2
   if ((scenProbDbl < 0.0) or (scenProbDbl > 1.0 + FEAS_TOL))
      myMsgFac () ("dblLowEqUpEqImmSmsg", scenProbDbl, 0.0, 1.0);
d178 1
a178 1
                                 scenProbDbl);
d223 15
@


1.11
log
@Stochastic Implosion
@
text
@a19 1
#include <StochMode.h>
a135 1
   WitScenario *   theScenario;
d153 1
a153 5
      {
      theScenario = theCall.myStochModeMgr ()->myScenario (scenarioIndex);

      theCall.myStochModeMgr ()->setCurScenario (theScenario);
      }
@


1.10
log
@Stochastic Implosion
@
text
@a20 1
#include <Scenario.h>
d54 3
a56 3
       scenarioIndex,
      "scenarioIndex",
      theCall.myStochModeMgr ()->curScenario ()->myIndex ());
d73 3
a75 3
   apiGet (                                      scenarioProb,
                                                "scenarioProb",
      theCall.myStochModeMgr ()->curScenario ()->scenarioProb ());
d148 3
a150 3
      "scenarioIndex",
      theCall.myStochModeMgr ()->curScenario ()->myIndex (),
      scenarioIndex,
d183 3
a185 3
   theCall.prepDouble (                         "scenarioProb",
      theCall.myStochModeMgr ()->curScenario ()->scenarioProb (),
                                                 scenProbDbl);
d190 1
a190 1
      theCall.myStochModeMgr ()->curScenario ()->setScenarioProb (scenarioProb);
@


1.9
log
@Stochastic Implosion
@
text
@d20 1
a20 1
#include <StochProb.h>
d57 1
a57 1
      theCall.myStochProb ()->curScenario ()->myIndex ());
d74 3
a76 3
   apiGet (                                   scenarioProb,
                                             "scenarioProb",
      theCall.myStochProb ()->curScenario ()->scenarioProb ());
d150 1
a150 1
      theCall.myStochProb ()->curScenario ()->myIndex (),
d157 1
a157 1
      theScenario = theCall.myStochProb ()->myScenario (scenarioIndex);
d159 1
a159 1
      theCall.myStochProb ()->setCurScenario (theScenario);
d184 3
a186 3
   theCall.prepDouble (                      "scenarioProb",
      theCall.myStochProb ()->curScenario ()->scenarioProb (),
                                              scenProbDbl);
d191 1
a191 1
      theCall.myStochProb ()->curScenario ()->setScenarioProb (scenarioProb);
@


1.8
log
@Stochastic Implosion
@
text
@d146 1
a146 1
   theCall.setsStochAttr ();
d182 1
a182 1
   theCall.setsStochAttr ();
d221 1
a221 1
   theCall.setsStochAttr ();
@


1.7
log
@Stochastic Implosion
@
text
@d79 2
d188 2
@


1.6
log
@Stochastic Implosion
@
text
@d74 3
a76 3
   apiGet (                   scenarioProb,
                             "scenarioProb",
      theCall.myStochProb ()->scenarioProb ());
d182 3
a184 3
   theCall.prepDouble (      "scenarioProb",
      theCall.myStochProb ()->scenarioProb (),
                              scenProbDbl);
d187 1
a187 1
      theCall.myStochProb ()->setScenarioProb (scenarioProb);
@


1.5
log
@Stochastic Implosion
@
text
@d44 1
a44 1
void WitRun::witGetProbability (const WitOSRealArg & probability)
d49 1
a49 1
      myMsgFac () ("attNYASmsg", "probability");
d52 1
a52 1
      myMsgFac () ("globNonStochModeSmsg", "probability");
d54 4
a57 3
   apiGet (                   probability,
                             "probability",
      theCall.myStochProb ()->probability ());
d59 1
a59 1
   issueGetAttrMsg ("probability", probability);
d64 1
a64 1
void WitRun::witGetScenarioIndex (int * scenarioIndex)
d69 1
a69 1
      myMsgFac () ("attNYASmsg", "scenarioIndex");
d72 1
a72 1
      myMsgFac () ("globNonStochModeSmsg", "scenarioIndex");
d74 3
a76 4
   apiGet (
       scenarioIndex,
      "scenarioIndex",
      theCall.myStochProb ()->curScenario ()->myIndex ());
d78 1
a78 1
   issueGetAttrMsg ("scenarioIndex", scenarioIndex);
d133 1
a133 1
void WitRun::witSetProbability (const WitISRealArg & probability)
a134 2
   double scenProbDbl;

d136 1
d139 1
a139 1
      myMsgFac () ("attNYASmsg", "probability");
d142 1
a142 6
      myMsgFac () ("globNonStochModeSmsg", "probability");

   scenProbDbl = probability;

   if ((scenProbDbl < 0.0) or (scenProbDbl > 1.0 + FEAS_TOL))
      myMsgFac () ("dblLowEqUpEqImmSmsg", scenProbDbl, 0.0, 1.0);
d146 6
a151 3
   theCall.prepDouble (      "probability",
      theCall.myStochProb ()->probability (),
                              scenProbDbl);
d154 5
a158 1
      theCall.myStochProb ()->setProbability (probability);
d163 1
a163 1
void WitRun::witSetScenarioIndex (int scenarioIndex)
d165 2
a167 1
   WitScenario *   theScenario;
d170 1
a170 1
      myMsgFac () ("attNYASmsg", "scenarioIndex");
d173 6
a178 1
      myMsgFac () ("globNonStochModeSmsg", "scenarioIndex");
d182 3
a184 6
   theCall.prepImmRangedInt (
      "scenarioIndex",
      theCall.myStochProb ()->curScenario ()->myIndex (),
      scenarioIndex,
      0,
      myProblem ()->myStochMgr ()->nScenarios () - 1);
d187 1
a187 5
      {
      theScenario = theCall.myStochProb ()->myScenario (scenarioIndex);

      theCall.myStochProb ()->setCurScenario (theScenario);
      }
@


1.4
log
@Stochastic Implosion
@
text
@d39 1
a39 1
   issueGetAttrMsg ("nScenarios");
@


1.3
log
@Stochastic Implosion
@
text
@d22 2
d44 19
d133 29
@


1.2
log
@Stochastic Implosion
@
text
@d20 1
a20 1
#include <SIP.h>
d55 1
a55 1
      theCall.mySIP ()->curScenario ()->myIndex ());
d127 1
a127 1
      theCall.mySIP ()->curScenario ()->myIndex (),
d134 1
a134 1
      theScenario = theCall.mySIP ()->myScenario (scenarioIndex);
d136 1
a136 1
      theCall.mySIP ()->setCurScenario (theScenario);
@


1.1
log
@Stochastic Implosion
@
text
@d28 1
a28 1
   WitGlobalCompApiCall theCall (this);
d44 1
a44 1
   WitGlobalCompApiCall theCall (this);
d55 1
a55 1
      myProblem ()->myStochMgr ()->mySIP ()->curScenario ()->myIndex ());
d64 1
a64 1
   WitGlobalCompApiCall theCall (this);
d80 1
a80 1
   WitGlobalCompApiCall theCall (this);
d96 1
a96 1
   WitGlobalCompApiCall theCall (this);
d114 2
a115 2
   WitGlobalCompApiCall theCall (this);
   WitScenario *        theScenario;
d127 1
a127 1
      myProblem ()->myStochMgr ()->mySIP ()->curScenario ()->myIndex (),
d134 1
a134 2
      theScenario =
         myProblem ()->myStochMgr ()->mySIP ()->myScenario (scenarioIndex);
d136 1
a136 1
      myProblem ()->myStochMgr ()->mySIP ()->setCurScenario (theScenario);
d144 1
a144 1
   WitGlobalCompApiCall theCall (this);
d162 1
a162 1
   WitGlobalCompApiCall theCall (this);
@

