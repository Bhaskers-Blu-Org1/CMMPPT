head	1.17;
access;
symbols
	sce_5_01_20080919:1.13;
locks; strict;
comment	@ * @;


1.17
date	2011.09.28.23.50.31;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.09.24.00.28.46;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.08.30.20.18.16;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.01.07.20.19.35;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.01.25.00.19.23;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.12.05.22.13.09;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.12.03.19.41.34;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.11.29.19.18.03;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.11.26.23.15.18;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.09.27.19.57.41;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.27.18.25.10;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.19.21.45.50;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.24.21.57.10;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2007.05.24.18.52.22;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.23.22.32.29;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.22.20.44.26;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.22.15.46.53;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef StochAttMgrH
#define StochAttMgrH

//------------------------------------------------------------------------------
// Header file: "StochAttMgr.h"
//
// Contains the declaration of class StochAttMgr.
//------------------------------------------------------------------------------

#include <CstringLT.h>
#include <StochAssoc.h>

#include <map>

//------------------------------------------------------------------------------

typedef std::map <const char *, WitStochAtt *, WitCstringLT> WitStochAttMap;

//------------------------------------------------------------------------------
// Class StochAttMgr
//
// "Stochastic Attribute Manager"
// Owns and provides access to the StochAtts of the stochastic implosion
// subsystem.
//
// Class hierarchy:
//
//    ProbAssoc
//       StochAssoc
//          StochAttMgr
//------------------------------------------------------------------------------

class WitStochAttMgr: public WitStochAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStochAttMgr (WitStochModeMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitStochAttMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void makeScenInputStochAtt (
            const char *         theName,
            WitAbsScenInputAtt * theAbsScenInputAtt);
         //
         // Builds a StochAtt whose name is given by theName and that
         // corresponds to a theScenInputAtt.

      void makeScenSolnStochAtt (const char * theName);
         //
         // Builds a StochAtt corresponding to a ScenSolnAtt whose name is
         // given by theName.

      bool valueOf (
            bool (WitStochAtt::* theAccFunc) () const, 
            const char *         theAttName);
         //
         // Returns the value of theAccFunc for the StochAtt whose name is given
         // by theName.

      void prepSetStochModeAttr (const char * theAttName);
         //
         // Takes action appropriate just before the value of the attribute
         // whose name is given by theName is to be set.
         // The attribute is allowed to be set in stochastic mode.
         // The attribute must not be a scenario-specific attribute associated
         // with either a DelComp or a BoundSet.

      void prepSetScenSpecAttr (
            const char * theAttName,
            WitDelComp * theDelComp);
         //
         // Takes action appropriate just before the value of the
         // scenario-specific attribute whose name is given by theName is to be
         // set for theDelComp.

      void prepSetBoundSet (WitBoundSet * theBoundSet);
         //
         // Takes action appropriate just before the value of theBoundSet is to
         // be set.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void prepSetBoundSetAttr (
            const char *  theAttName,
            WitBoundSet * theBoundSet);
         //
         // Takes action appropriate just before the value of the attribute
         // whose name is given by theName is to be set for theBoundSet.
         // The attribute is allowed to be set in stochastic mode.

      void makeStochAtts ();
         //
         // Creates and stores all the StochAtts owned by this StochAttMgr.

      void makeStochAtt (const char * theName);
         //
         // Creates and stores a new StochAtt whose name is given by theName.

      void makeStochAtt (
            const char *         theName,
            WitAbsScenInputAtt * theAbsScenInputAtt);
         //
         // Creates and stores a new StochAtt whose name is given by theName
         // and that corresponds to a theScenInputAtt, if non-NULL.

      WitStochAtt * findStochAtt (const char * theName);
         //
         // Returns the StochAtt owned by this StochAttMgr whose name matches
         // theName, if any; otherwise returns NULL.

      noCopyCtorAssign (WitStochAttMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitStochAttMap myStochAttMap_;
         //
         // Maps the name of each stochastic attribute to the corresponding
         // StochAtt owned by this StochAttMgr.

      WitStochAtt * cachedStochAtt_;
         //
         // The StochAtt most recently looked up by findStochAtt (), if any;
         // otherwise NULL.
   };

#endif
@


1.16
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.15
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d43 2
a44 58
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitStochAttMgr (WitStochModeMgr *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitStochAttMgr ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void makeScenInputStochAtt (
const char *         theName,
WitAbsScenInputAtt * theAbsScenInputAtt);
//
// Builds a StochAtt whose name is given by theName and that
// corresponds to a theScenInputAtt.

void makeScenSolnStochAtt (const char * theName);
//
// Builds a StochAtt corresponding to a ScenSolnAtt whose name is
// given by theName.

bool valueOf (
bool (WitStochAtt::* theAccFunc) () const,
const char *         theAttName);
//
// Returns the value of theAccFunc for the StochAtt whose name is given
// by theName.

void prepSetStochModeAttr (const char * theAttName);
//
// Takes action appropriate just before the value of the attribute
// whose name is given by theName is to be set.
// The attribute is allowed to be set in stochastic mode.
// The attribute must not be a scenario-specific attribute associated
// with either a DelComp or a BoundSet.

void prepSetScenSpecAttr (
const char * theAttName,
WitDelComp * theDelComp);
//
// Takes action appropriate just before the value of the
// scenario-specific attribute whose name is given by theName is to be
// set for theDelComp.

void prepSetBoundSet (WitBoundSet * theBoundSet);
//
// Takes action appropriate just before the value of theBoundSet is to
// be set.
d46 106
a151 50
private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void prepSetBoundSetAttr (
const char *  theAttName,
WitBoundSet * theBoundSet);
//
// Takes action appropriate just before the value of the attribute
// whose name is given by theName is to be set for theBoundSet.
// The attribute is allowed to be set in stochastic mode.

void makeStochAtts ();
//
// Creates and stores all the StochAtts owned by this StochAttMgr.

void makeStochAtt (const char * theName);
//
// Creates and stores a new StochAtt whose name is given by theName.

void makeStochAtt (
const char *         theName,
WitAbsScenInputAtt * theAbsScenInputAtt);
//
// Creates and stores a new StochAtt whose name is given by theName
// and that corresponds to a theScenInputAtt, if non-NULL.

WitStochAtt * findStochAtt (const char * theName);
//
// Returns the StochAtt owned by this StochAttMgr whose name matches
// theName, if any; otherwise returns NULL.

noCopyCtorAssign (WitStochAttMgr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitStochAttMap myStochAttMap_;
//
// Maps the name of each stochastic attribute to the corresponding
// StochAtt owned by this StochAttMgr.

WitStochAtt * cachedStochAtt_;
//
// The StochAtt most recently looked up by findStochAtt (), if any;
// otherwise NULL.
};
@


1.14
log
@Minor correction.
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d43 58
a100 2
   {
   public:
d102 50
a151 106
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStochAttMgr (WitStochModeMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitStochAttMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void makeScenInputStochAtt (
            const char *         theName,
            WitAbsScenInputAtt * theAbsScenInputAtt);
         //
         // Builds a StochAtt whose name is given by theName and that
         // corresponds to a theScenInputAtt.

      void makeScenSolnStochAtt (const char * theName);
         //
         // Builds a StochAtt corresponding to a ScenSolnAtt whose name is
         // given by theName.

      bool valueOf (
            bool (WitStochAtt::* theAccFunc) () const, 
            const char *         theAttName);
         //
         // Returns the value of theAccFunc for the StochAtt whose name is given
         // by theName.

      void prepSetStochModeAttr (const char * theAttName);
         //
         // Takes action appropriate just before the value of the attribute
         // whose name is given by theName is to be set.
         // The attribute is allowed to be set in stochastic mode.
         // The attribute must not be a scenario-specific attribute associated
         // with either a DelComp or a BoundSet.

      void prepSetScenSpecAttr (
            const char * theAttName,
            WitDelComp * theDelComp);
         //
         // Takes action appropriate just before the value of the
         // scenario-specific attribute whose name is given by theName is to be
         // set for theDelComp.

      void prepSetBoundSet (WitBoundSet * theBoundSet);
         //
         // Takes action appropriate just before the value of theBoundSet is to
         // be set.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void prepSetBoundSetAttr (
            const char *  theAttName,
            WitBoundSet * theBoundSet);
         //
         // Takes action appropriate just before the value of the attribute
         // whose name is given by theName is to be set for theBoundSet.
         // The attribute is allowed to be set in stochastic mode.

      void makeStochAtts ();
         //
         // Creates and stores all the StochAtts owned by this StochAttMgr.

      void makeStochAtt (const char * theName);
         //
         // Creates and stores a new StochAtt whose name is given by theName.

      void makeStochAtt (
            const char *         theName,
            WitAbsScenInputAtt * theAbsScenInputAtt);
         //
         // Creates and stores a new StochAtt whose name is given by theName
         // and that corresponds to a theScenInputAtt, if non-NULL.

      WitStochAtt * findStochAtt (const char * theName);
         //
         // Returns the StochAtt owned by this StochAttMgr whose name matches
         // theName, if any; otherwise returns NULL.

      noCopyCtorAssign (WitStochAttMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitStochAttMap myStochAttMap_;
         //
         // Maps the name of each stochastic attribute to the corresponding
         // StochAtt owned by this StochAttMgr.

      WitStochAtt * cachedStochAtt_;
         //
         // The StochAtt most recently looked up by findStochAtt (), if any;
         // otherwise NULL.
   };
@


1.13
log
@Stochastic Implosion
@
text
@d124 7
@


1.12
log
@Stochastic Implosion
@
text
@d20 1
d34 6
d42 1
a42 1
class WitStochAttMgr
a134 4
      WitStochModeMgr * const myStochModeMgr_;
         //
         // The StochModeMgr that owns this StochAttMgr.

@


1.11
log
@Stochastic Implosion
@
text
@d78 16
d101 8
@


1.10
log
@Stochastic Implosion
@
text
@d43 1
a43 1
      WitStochAttMgr ();
d74 5
d104 4
@


1.9
log
@Stochastic Implosion
@
text
@d67 6
a72 4
      inline const WitStochAtt * findStochAtt (const char * theName)
         {
         return findStochAttInt (theName);
         }
d88 1
a88 1
      WitStochAtt * findStochAttInt (const char * theName);
d106 1
a106 1
         // The StochAtt most recently looked up by findStochAttInt (), if any;
@


1.8
log
@Stochastic Implosion
@
text
@d55 3
a57 1
      void makeScenInputStochAtt (const char * theName);
d59 2
a60 2
         // Builds a StochAtt corresponding to a ScenInputAtt whose name is
         // given by theName.
@


1.7
log
@Stochastic Implosion
@
text
@a83 5
      void configureStochAtts ();
         //
         // Sets the meta-attributes of the StochAtts owned by this StochAttMgr
         // to the approporiate values.

@


1.6
log
@Stochastic Implosion
@
text
@d55 10
@


1.5
log
@Stochastic Implosion
@
text
@d19 7
a25 2
#include <Assoc.h>
#include <RefMap.h>
d31 2
a32 3
// Owns and works with references to all of the stochastic attributes.
//
// Implemented in StochImp.C.
d35 1
a35 1
class WitStochAttMgr: public WitProbAssoc
d43 1
a43 1
      WitStochAttMgr (WitStochModeMgr *);
d55 10
a64 4
      void acquireData ();
         //
         // Causes all Components to pass their stochastic data to this
         // StochAttMgr.
d66 1
a66 1
      void restoreInput ();
d68 1
a68 2
         // Restores the values of all stochastic input attributes to the values
         // saved in the current Scenario.
d70 1
a70 1
      void clearSoln ();
d72 1
a72 1
         // Clears the stochastic solution data.
d74 1
a74 1
      void restoreSoln ();
d76 2
a77 2
         // Restores the values of all stochastic solution attributes to the
         // values saved in the current Scenario.
d79 1
a79 3
      void setObjValues (
            double objValueVal,
            double boundsValueVal);
d81 2
a82 26
         // Sets the objective function values to the arguments.

      //------------------------------------------------------------------------
      // Reference receiving functions.
      // Each of these functions stores its arguments on the assumption that
      // they are references to the similarly named data members of the
      // Component for which passStochRefs () is currently being called.
      //------------------------------------------------------------------------

      void receivePartRefs      (WitDblFlexVec &    scrapVolArg);
      void receiveMaterialRefs  (WitDblFlexVec &    stockVolArg);
      void receiveDemandRefs    (WitDblFlexVec &   demandVolArg,
                                 WitDblFlexVec &     shipVolArg,
                                 WitDblFlexVec &  cumShipVolArg);
      void receiveOperationRefs (WitDblFlexVec &     execVolArg);
      void receiveSubEntryRefs  (WitDblFlexVec &      subVolArg);
      void receiveOptImpData    (double        &    objValueArg,
                                 double        & boundsValueArg);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      accessNonNull (WitComponent *, passRefsComp)
d90 1
a90 1
      WitStochModeMgr * myStochModeMgr_;
d92 2
a93 1
         // The StochModeMgr that owns this StochAttMgr.
d95 1
a95 1
      WitComponent * passRefsComp_;
d97 2
a98 26
         // The Component for which passStochRefs is currently being called, if
         // any; otherwise NULL.

      //------------------------------------------------------------------------
      // References to stochastic input attributes.
      //------------------------------------------------------------------------

      WitRefMap <WitDemand,    WitDblFlexVec> demandVol_;

      //------------------------------------------------------------------------
      // References to stochastic solution attributes.
      //------------------------------------------------------------------------

      WitRefMap <WitPart,      WitDblFlexVec> scrapVol_;
      WitRefMap <WitMaterial,  WitDblFlexVec> stockVol_;
      WitRefMap <WitDemand,    WitDblFlexVec> shipVol_;
      WitRefMap <WitDemand,    WitDblFlexVec> cumShipVol_;
      WitRefMap <WitOperation, WitDblFlexVec> execVol_;
      WitRefMap <WitSubEntry,  WitDblFlexVec> subVol_;

      //------------------------------------------------------------------------
      // Pointers to stochastic solution attributes.
      //------------------------------------------------------------------------

      double * objValuePtr_;
      double * boundsValuePtr_;
@


1.4
log
@Stochastic Implosion
@
text
@@


1.3
log
@Stochastic Implosion
@
text
@d77 15
a91 28
      // Data receiving functions.
      // Each of these functions stores its reference arguments on the
      // assumption that they are references to the similarly named data members
      // of the Component argument.
      // Valid only when this StochAttMgr is calling
      // Component::passStochData ().
      //------------------------------------------------------------------------

      void receivePartData (
            WitDblFlexVec & scrapVolArg);

      void receiveMaterialData (
            WitDblFlexVec & stockVolArg);

      void receiveDemandData (
            WitDblFlexVec & demandVolArg,
            WitDblFlexVec & shipVolArg,
            WitDblFlexVec & cumShipVolArg);

      void receiveOperationData (
            WitDblFlexVec & execVolArg);

      void receiveSubEntryData (
            WitDblFlexVec & subVolArg);

      void receiveOptImpData (
            double & objValueArg,
            double & boundsValueArg);
d99 1
a99 1
      accessNonNull (WitComponent *, passDataComp)
d111 1
a111 1
      WitComponent * passDataComp_;
d113 1
a113 1
         // The Component for which passStochData is currently being called, if
@


1.2
log
@Stochastic Implosion
@
text
@d70 6
d102 4
d145 7
@


1.1
log
@Stochastic Implosion
@
text
@d51 1
a51 1
      void acquireStochData ();
@

