head	1.152;
access;
symbols
	sce_5_01_20080919:1.120
	latest_sce_4_20_20060523:1.75.0.2
	sce_4_20_20060523:1.75
	latest_sce4_20_OSL:1.72.0.2
	sce_4_20_OSL:1.72
	sce_410_withVa:1.70
	sce_4_05_20040511:1.57
	sce_4_00_20040201:1.51
	nextGenBranch:1.42.0.2
	nextGenRoot:1.42
	sce_3_30_20030627:1.42
	EndRw-branch:1.31.0.4
	Root-of-EndRw:1.31
	rwToStl:1.31.0.2
	latest_sce_3_10_20010924:1.18.0.2
	sce_3_10_20010924:1.18
	latest_sce_3_00_20010601:1.10.0.2
	sce_3_00_20010601:1.10
	latest_sce_2_31_20010308:1.6.0.2
	sce_2_31_20010308:1.6
	latest_sce_2_31_20001003:1.5.0.2
	sce_2_31_20001003:1.5
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.152
date	2011.09.28.23.50.36;	author rjw;	state Exp;
branches;
next	1.151;

1.151
date	2011.09.24.00.28.51;	author rjw;	state Exp;
branches;
next	1.150;

1.150
date	2011.08.30.20.18.20;	author rjw;	state Exp;
branches;
next	1.149;

1.149
date	2011.08.25.23.27.09;	author rjw;	state Exp;
branches;
next	1.148;

1.148
date	2011.02.07.15.46.03;	author rjw;	state Exp;
branches;
next	1.147;

1.147
date	2011.02.02.00.37.13;	author rjw;	state Exp;
branches;
next	1.146;

1.146
date	2011.01.14.00.35.23;	author rjw;	state Exp;
branches;
next	1.145;

1.145
date	2011.01.13.00.38.48;	author rjw;	state Exp;
branches;
next	1.144;

1.144
date	2011.01.12.23.09.34;	author rjw;	state Exp;
branches;
next	1.143;

1.143
date	2011.01.11.22.08.32;	author rjw;	state Exp;
branches;
next	1.142;

1.142
date	2010.10.12.19.48.28;	author rjw;	state Exp;
branches;
next	1.141;

1.141
date	2010.09.24.18.17.23;	author rjw;	state Exp;
branches;
next	1.140;

1.140
date	2010.09.22.20.21.53;	author rjw;	state Exp;
branches;
next	1.139;

1.139
date	2010.07.01.22.41.22;	author rjw;	state Exp;
branches;
next	1.138;

1.138
date	2010.06.18.18.03.49;	author rjw;	state Exp;
branches;
next	1.137;

1.137
date	2010.06.17.16.17.14;	author rjw;	state Exp;
branches;
next	1.136;

1.136
date	2010.06.16.20.56.29;	author rjw;	state Exp;
branches;
next	1.135;

1.135
date	2010.06.16.18.33.38;	author rjw;	state Exp;
branches;
next	1.134;

1.134
date	2010.06.14.21.15.15;	author rjw;	state Exp;
branches;
next	1.133;

1.133
date	2010.05.21.18.17.57;	author rjw;	state Exp;
branches;
next	1.132;

1.132
date	2010.05.14.23.49.06;	author rjw;	state Exp;
branches;
next	1.131;

1.131
date	2010.03.29.21.34.23;	author rjw;	state Exp;
branches;
next	1.130;

1.130
date	2010.03.26.22.22.53;	author rjw;	state Exp;
branches;
next	1.129;

1.129
date	2010.01.29.23.22.52;	author rjw;	state Exp;
branches;
next	1.128;

1.128
date	2010.01.28.23.16.58;	author rjw;	state Exp;
branches;
next	1.127;

1.127
date	2009.12.14.21.34.55;	author rjw;	state Exp;
branches;
next	1.126;

1.126
date	2009.12.09.21.19.31;	author rjw;	state Exp;
branches;
next	1.125;

1.125
date	2009.12.04.23.30.53;	author rjw;	state Exp;
branches;
next	1.124;

1.124
date	2009.11.26.00.24.09;	author rjw;	state Exp;
branches;
next	1.123;

1.123
date	2009.11.17.19.31.38;	author rjw;	state Exp;
branches;
next	1.122;

1.122
date	2009.11.13.19.01.26;	author rjw;	state Exp;
branches;
next	1.121;

1.121
date	2009.11.12.17.36.36;	author rjw;	state Exp;
branches;
next	1.120;

1.120
date	2008.07.01.19.48.36;	author rjw;	state Exp;
branches;
next	1.119;

1.119
date	2008.01.21.21.47.18;	author rjw;	state Exp;
branches;
next	1.118;

1.118
date	2008.01.18.22.41.00;	author rjw;	state Exp;
branches;
next	1.117;

1.117
date	2008.01.14.19.21.15;	author rjw;	state Exp;
branches;
next	1.116;

1.116
date	2008.01.11.21.47.42;	author rjw;	state Exp;
branches;
next	1.115;

1.115
date	2007.10.22.19.58.53;	author rjw;	state Exp;
branches;
next	1.114;

1.114
date	2007.10.22.19.20.38;	author rjw;	state Exp;
branches;
next	1.113;

1.113
date	2007.08.29.16.24.24;	author rjw;	state Exp;
branches;
next	1.112;

1.112
date	2007.08.28.17.38.36;	author rjw;	state Exp;
branches;
next	1.111;

1.111
date	2007.08.24.21.12.39;	author rjw;	state Exp;
branches;
next	1.110;

1.110
date	2007.07.16.20.15.00;	author rjw;	state Exp;
branches;
next	1.109;

1.109
date	2007.07.16.18.12.33;	author rjw;	state Exp;
branches;
next	1.108;

1.108
date	2007.05.21.15.20.10;	author rjw;	state Exp;
branches;
next	1.107;

1.107
date	2007.05.17.17.59.18;	author rjw;	state Exp;
branches;
next	1.106;

1.106
date	2007.05.16.22.16.46;	author rjw;	state Exp;
branches;
next	1.105;

1.105
date	2007.04.24.21.18.13;	author rjw;	state Exp;
branches;
next	1.104;

1.104
date	2007.04.23.21.03.20;	author rjw;	state Exp;
branches;
next	1.103;

1.103
date	2007.04.20.20.51.14;	author rjw;	state Exp;
branches;
next	1.102;

1.102
date	2007.04.11.23.03.39;	author rjw;	state Exp;
branches;
next	1.101;

1.101
date	2007.04.11.16.05.41;	author rjw;	state Exp;
branches;
next	1.100;

1.100
date	2007.04.10.16.33.22;	author rjw;	state Exp;
branches;
next	1.99;

1.99
date	2007.04.09.16.05.08;	author rjw;	state Exp;
branches;
next	1.98;

1.98
date	2007.03.30.22.33.03;	author rjw;	state Exp;
branches;
next	1.97;

1.97
date	2007.03.29.21.16.48;	author rjw;	state Exp;
branches;
next	1.96;

1.96
date	2007.03.28.22.14.32;	author rjw;	state Exp;
branches;
next	1.95;

1.95
date	2007.03.08.22.47.18;	author rjw;	state Exp;
branches;
next	1.94;

1.94
date	2007.03.08.17.02.55;	author rjw;	state Exp;
branches;
next	1.93;

1.93
date	2007.03.02.22.11.02;	author rjw;	state Exp;
branches;
next	1.92;

1.92
date	2007.02.28.22.15.48;	author rjw;	state Exp;
branches;
next	1.91;

1.91
date	2007.01.29.23.12.42;	author rjw;	state Exp;
branches;
next	1.90;

1.90
date	2007.01.29.22.34.13;	author rjw;	state Exp;
branches;
next	1.89;

1.89
date	2007.01.29.21.52.04;	author rjw;	state Exp;
branches;
next	1.88;

1.88
date	2006.12.06.19.52.47;	author rjw;	state Exp;
branches;
next	1.87;

1.87
date	2006.12.01.21.36.36;	author rjw;	state Exp;
branches;
next	1.86;

1.86
date	2006.12.01.19.55.18;	author rjw;	state Exp;
branches;
next	1.85;

1.85
date	2006.10.12.20.48.11;	author rjw;	state Exp;
branches;
next	1.84;

1.84
date	2006.09.27.20.10.17;	author rjw;	state Exp;
branches;
next	1.83;

1.83
date	2006.09.21.20.31.52;	author rjw;	state Exp;
branches;
next	1.82;

1.82
date	2006.09.08.16.16.01;	author rjw;	state Exp;
branches;
next	1.81;

1.81
date	2006.08.30.16.37.35;	author rjw;	state Exp;
branches;
next	1.80;

1.80
date	2006.08.17.22.50.38;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2006.08.17.19.36.40;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2006.08.16.15.49.18;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2006.08.02.18.06.00;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2006.08.02.17.27.31;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2006.05.16.22.01.07;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2006.05.08.19.51.24;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2006.05.02.17.34.14;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2006.03.10.23.23.31;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2005.11.10.20.33.08;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2005.07.07.15.16.24;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2005.06.13.16.48.48;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2005.05.17.17.30.44;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2005.03.02.22.34.37;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2005.02.25.21.26.10;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2005.02.10.18.38.30;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2005.02.03.21.31.36;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2005.02.02.17.26.53;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2005.01.31.23.59.30;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2005.01.21.23.01.52;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2004.11.09.23.08.00;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2004.11.04.20.42.27;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2004.10.12.21.29.50;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2004.04.30.15.57.19;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2004.04.16.17.42.49;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2004.04.12.22.48.05;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2004.03.11.16.36.18;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2004.02.27.21.00.30;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2004.02.05.16.39.43;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2004.01.19.23.26.51;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2004.01.16.18.48.26;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2004.01.05.23.37.34;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2003.12.23.16.18.47;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2003.12.01.21.05.05;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2003.10.31.15.37.55;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2003.09.22.23.13.52;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2003.09.22.20.27.02;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2003.09.04.19.32.47;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2003.05.07.18.06.17;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2003.03.24.20.40.21;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2003.02.21.18.56.29;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2003.02.14.20.13.03;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2003.01.31.21.28.59;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2003.01.27.21.17.20;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2002.12.30.21.57.27;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2002.12.30.20.37.29;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2002.12.23.20.44.48;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2002.12.19.17.15.23;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2002.11.25.15.15.23;	author rwToStl;	state Exp;
branches;
next	1.31;

1.31
date	2002.10.18.22.23.58;	author rjw;	state Exp;
branches
	1.31.2.1;
next	1.30;

1.30
date	2002.10.16.22.30.22;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2002.10.10.19.21.18;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2002.09.30.21.36.40;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2002.08.22.14.01.49;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2002.06.24.22.02.26;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2002.05.17.21.45.06;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2001.12.19.16.17.13;	author bobw;	state Exp;
branches;
next	1.23;

1.23
date	2001.11.09.21.42.28;	author bobw;	state Exp;
branches;
next	1.22;

1.22
date	2001.10.05.20.53.59;	author bobw;	state Exp;
branches;
next	1.21;

1.21
date	2001.10.05.18.55.29;	author bobw;	state Exp;
branches;
next	1.20;

1.20
date	2001.10.03.18.55.12;	author bobw;	state Exp;
branches;
next	1.19;

1.19
date	2001.09.28.20.50.28;	author bobw;	state Exp;
branches;
next	1.18;

1.18
date	2001.09.16.21.42.33;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2001.08.30.23.00.35;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.08.29.21.37.21;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.08.06.17.31.08;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.03.18.40.43;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.07.30.15.12.11;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.07.28.00.48.36;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.07.25.16.08.20;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.29.22.11.29;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.17.15.11.18;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.04.06.19.22.11;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.08.16.37.08;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.13.21.03.55;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.07.25.20.12.36;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.05.08.21.56.15;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.27;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.57.02;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.31;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.31.2.1
date	2002.11.08.16.11.34;	author rwToStl;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.24.13.53.31;	author wit;	state Exp;
branches;
next	;


desc
@@


1.152
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef SymTableH
#define SymTableH

//------------------------------------------------------------------------------
//
//     Source file: SymTable.h
//     Definition of classes SymTabEntry and SymTable.
//
//------------------------------------------------------------------------------

#include <string>
#include <map>

#include <Util.h>

/*------------------------------------------------------------------------------
 *
 *     Definition of class SymTabEntry.  Each object of type SymTabEntry
 *     represents a symbol table entry.  For each rule there is a corresponding
 *     symbol table entry.  The collection of all symbol table entries is the
 *     symbol table, which is used by the parser to verify the number and types
 *     of arguments associated with attributes and to invoke the appropriate
 *     WIT API function.
 *
 *------------------------------------------------------------------------------
 */

class WitSymTabEntry 
{
public:

typedef WitParseRC (* functionP)();

typedef struct witSymbolDef {
  const char *       rule;           // rule recognized by the parser
  int                nparms;         // number of parameters
  functionP          func;           // pointer to local function wrapper
  WitDRParmType::Tag parmTypes[10];  // types of parameters
} witSymbolDef;

public:

  // Constructor and destructor
  WitSymTabEntry();
  WitSymTabEntry(int, functionP, WitDRParmType::Tag *p);
  ~WitSymTabEntry();

  // Accessors
  int        nparms() const;
  functionP  func() const;
  WitDRParmType::Tag *parmTypes() const;  // a pointer to an array of type indicators

private:

  int        nparms_;             // number of parameters for the function
  functionP  func_;               // pointer to local attribute function
  WitDRParmType::Tag *parmTypes_; // datatype of function parameters
};

//------------------------------------------------------------------------------
//
//     Definition of class SymTable -- this class encapsulates the
//     symbol table structure which associates WIT data-format rules
//     with Wit API functions.
//
//------------------------------------------------------------------------------

#define  HASH_SIZE   120

class WitSymTable
{

  // Iterator for class SymTable.  Definition follows below.
  friend class WitSymTableIterator;

public:

   typedef std::map<std::string,WitSymTabEntry*> WitSymTableDict;

  // Constructors and destructors
  WitSymTable(WitRun *theRun);
  ~WitSymTable();

  // Operations
  int registerRules();

  // Accessors
  const WitSymTableDict&  theDictionary();
  static WitRun     *myWitRun();

  //---------------------------------------------------------------------------
  // API Wrapper functions
  //--------------------------------------------------------------------------

  static WitParseRC  witAddBomEntry();
  static WitParseRC  witAddBopEntry();
  static WitParseRC  witAddDemand();
  static WitParseRC  witAddPart();
  static WitParseRC  witAddPartWithOperation();
  static WitParseRC  witAddOperation();
  static WitParseRC  witAddSubEntry();

  static WitParseRC  witSetAccAfterOptImp();
  static WitParseRC  witSetAccAfterSoftLB();
  static WitParseRC  witSetAutoPriority();
  static WitParseRC  witSetCompPrices();
  static WitParseRC  witSetComputeCriticalList();
  static WitParseRC  witSetCplexParSpecDblVal();
  static WitParseRC  witSetCplexParSpecIntVal();
  static WitParseRC  witSetCplexParSpecName();
  static WitParseRC  witSetCurrentObjective();
  static WitParseRC  witSetCurrentScenario();
  static WitParseRC  witSetEquitability();
  static WitParseRC  witSetExecEmptyBom();
  static WitParseRC  witSetExpCutoff();
  static WitParseRC  witSetForcedMultiEq();
  static WitParseRC  witSetHashTableSize();
  static WitParseRC  witSetHighPrecisionWD();
  static WitParseRC  witSetIndependentOffsets();
  static WitParseRC  witSetLocalBuildAhead();
  static WitParseRC  witSetLocalMultiExec();
  static WitParseRC  witSetLotSizeTol();
  static WitParseRC  witSetMinimalExcess();
  static WitParseRC  witSetMipMode();
  static WitParseRC  witSetModHeurAlloc();
  static WitParseRC  witSetMultiExec();
  static WitParseRC  witSetMultiObjMode();
  static WitParseRC  witSetMultiObjTol();
  static WitParseRC  witSetMultiRoute();
  static WitParseRC  witSetNPeriods();
  static WitParseRC  witSetNScenarios();
  static WitParseRC  witSetNewPipPggOrder();
  static WitParseRC  witSetNonMrSelSplit();
  static WitParseRC  witSetNstnResidual();
  static WitParseRC  witSetObjChoice();
  static WitParseRC  witSetObjectiveListSpec();
  static WitParseRC  witSetObjectiveRank();
  static WitParseRC  witSetOutputPrecision();
  static WitParseRC  witSetPenExec();
  static WitParseRC  witSetPeriodStage();
  static WitParseRC  witSetPerfPegging();
  static WitParseRC  witSetPeriodsPerYear();
  static WitParseRC  witSetPgdCritListMode();
  static WitParseRC  witSetPipSeqClearsNow();
  static WitParseRC  witSetPipSeqFromHeur();
  static WitParseRC  witSetPrefHighStockSLBs();
  static WitParseRC  witSetProbability();
  static WitParseRC  witSetRespectStockSLBs();
  static WitParseRC  witSetRoundReqVols();
  static WitParseRC  witSetSelSplit();
  static WitParseRC  witSetSelectionRecovery();
  static WitParseRC  witSetShipPerability();
  static WitParseRC  witSetSkipFailures();
  static WitParseRC  witSetSolverLogFileName();
  static WitParseRC  witSetStageByObject();
  static WitParseRC  witSetStochMode();
  static WitParseRC  witSetStockRealloc();
  static WitParseRC  witSetStockReallocation();
  static WitParseRC  witSetSrSelSplit();
  static WitParseRC  witSetTieBreakPropRt();
  static WitParseRC  witSetTitle();
  static WitParseRC  witSetTruncOffsets();
  static WitParseRC  witSetTwoWayMultiExec();
  static WitParseRC  witSetUseFocusHorizons();
  static WitParseRC  witSetUserHeurStart();
  static WitParseRC  witSetWbounds();
  static WitParseRC  witSetWit34Compatible();

  static WitParseRC  witSetPartAsapPipOrder();
  static WitParseRC  witSetPartBaSelSplit();
  static WitParseRC  witSetPartBoundedLeadTimes();
  static WitParseRC  witSetPartBuildAheadUB();
  static WitParseRC  witSetPartBuildAheadLimit();
  static WitParseRC  witSetPartBuildAsap();
  static WitParseRC  witSetPartBuildNstn();
  static WitParseRC  witSetPartObj1ScrapCost();
  static WitParseRC  witSetPartObj1StockCost();
  static WitParseRC  witSetPartObjectStage();
  static WitParseRC  witSetPartPropRouting();
  static WitParseRC  witSetPartPropRtg();
  static WitParseRC  witSetPartScrapAllowed();
  static WitParseRC  witSetPartScrapCost();
  static WitParseRC  witSetPartSingleSource();
  static WitParseRC  witSetPartStockBounds();
  static WitParseRC  witSetPartStockCost();
  static WitParseRC  witSetPartSupplyVol();
  static WitParseRC  witSetPartSelForDel();
  static WitParseRC  witSetPartUnitCost();

  static WitParseRC  witSetDemandBuildAheadLimit();
  static WitParseRC  witSetDemandBuildAheadUB();
  static WitParseRC  witSetDemandCumShipBounds();
  static WitParseRC  witSetDemandCumShipReward();
  static WitParseRC  witSetDemandDemandVol();
  static WitParseRC  witSetDemandFocusHorizon();
  static WitParseRC  witSetDemandGrossRev();
  static WitParseRC  witSetDemandIntShipVols();
  static WitParseRC  witSetDemandLeadTimeUB();
  static WitParseRC  witSetDemandObj1CumShipReward();
  static WitParseRC  witSetDemandObj1ShipReward();
  static WitParseRC  witSetDemandPipSeqIncShipVol();
  static WitParseRC  witSetDemandPipSeqShipPeriod();
  static WitParseRC  witSetDemandPrefBuildAhead();
  static WitParseRC  witSetDemandPriority();
  static WitParseRC  witSetDemandSearchInc();
  static WitParseRC  witSetDemandSelForDel();
  static WitParseRC  witSetDemandShipLateAllowed();
  static WitParseRC  witSetDemandShipLateLimit();
  static WitParseRC  witSetDemandShipLateUB();
  static WitParseRC  witSetDemandShipReward();
  static WitParseRC  witSetDemandShipVol();

  static WitParseRC  witSetOperationExecBounds();
  static WitParseRC  witSetOperationExecCost();
  static WitParseRC  witSetOperationExecPenalty();
  static WitParseRC  witSetOperationIncLotSize();
  static WitParseRC  witSetOperationIncLotSize2();
  static WitParseRC  witSetOperationIntExecVols();
  static WitParseRC  witSetOperationLotSize2Thresh();
  static WitParseRC  witSetOperationMinLotSize();
  static WitParseRC  witSetOperationMinLotSize2();
  static WitParseRC  witSetOperationObj1ExecCost();
  static WitParseRC  witSetOperationObjectStage();
  static WitParseRC  witSetOperationSelForDel();
  static WitParseRC  witSetOperationTwoLevelLotSizes();
  static WitParseRC  witSetOperationYield();
  static WitParseRC  witSetOperationYieldRate();
  static WitParseRC  witSetOperationCycleTime34();
  static WitParseRC  witSetOperationExecVol();

  static WitParseRC  witSetBomEntry();
  static WitParseRC  witSetBomEntryConsRate();
  static WitParseRC  witSetBomEntryEarliestPeriod();
  static WitParseRC  witSetBomEntryExecPenalty();
  static WitParseRC  witSetBomEntryFallout();
  static WitParseRC  witSetBomEntryFalloutRate();
  static WitParseRC  witSetBomEntryLatestPeriod();
  static WitParseRC  witSetBomEntryMandEC();
  static WitParseRC  witSetBomEntryOffset();
  static WitParseRC  witSetBomEntryPropRouting();
  static WitParseRC  witSetBomEntryPropRtg();
  static WitParseRC  witSetBomEntryRoutingShare();
  static WitParseRC  witSetBomEntrySelForDel();
  static WitParseRC  witSetBomEntrySingleSource();
  static WitParseRC  witSetBomEntryUsageRate();

  static WitParseRC  witSetSubEntry();
  static WitParseRC  witSetSubEntryConsRate();
  static WitParseRC  witSetSubEntryEarliestPeriod();
  static WitParseRC  witSetSubEntryExecPenalty();
  static WitParseRC  witSetSubEntryExpAllowed();
  static WitParseRC  witSetSubEntryExpNetAversion();
  static WitParseRC  witSetSubEntryFallout();
  static WitParseRC  witSetSubEntryFalloutRate();
  static WitParseRC  witSetSubEntryIntSubVols();
  static WitParseRC  witSetSubEntryLatestPeriod();
  static WitParseRC  witSetSubEntryMrpNetAllowed();
  static WitParseRC  witSetSubEntryNetAllowed();
  static WitParseRC  witSetSubEntryUsageRate();
  static WitParseRC  witSetSubEntryObj1SubCost();
  static WitParseRC  witSetSubEntryOffset();
  static WitParseRC  witSetSubEntryRoutingShare();
  static WitParseRC  witSetSubEntrySelForDel();
  static WitParseRC  witSetSubEntrySubCost();
  static WitParseRC  witSetSubEntrySubVol();

  static WitParseRC  witSetBopEntryByProduct();
  static WitParseRC  witSetBopEntryEarliestPeriod();
  static WitParseRC  witSetBopEntryExpAllowed();
  static WitParseRC  witSetBopEntryExpAversion();
  static WitParseRC  witSetBopEntryLatestPeriod();
  static WitParseRC  witSetBopEntryMeSelSplit();
  static WitParseRC  witSetBopEntryOffset();
  static WitParseRC  witSetBopEntryProdRate();
  static WitParseRC  witSetBopEntryProductRate();
  static WitParseRC  witSetBopEntryRoutingShare();
  static WitParseRC  witSetBopEntrySelForDel();

private:

  static WitSymTabEntry::witSymbolDef symbolTable_[];
  static WitRun *                     myWitRun_;

  WitSymTableDict                     theDictionary_;
};


// Iterator for SymTable class
class WitSymTableIterator
{

public:

  // Constructor and destructor
  WitSymTableIterator(WitSymTable *s);
  ~WitSymTableIterator();

  // Operations

  // Advance to next symbol table entry
  WitSymTabEntry::witSymbolDef  *operator ()();

private:

  WitSymTable * pst_;
  int           index_;
};

#endif     // SymTableH
@


1.151
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 14
a19 9
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished);
//     OCO Source Modules
//     IBM Confidential
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//
@


1.150
log
@Revised the copyright date.
@
text
@d6 1
a6 1
//     (c) Copyright IBM Corp. 2011.
d26 10
a35 10
*
*     Definition of class SymTabEntry.  Each object of type SymTabEntry
*     represents a symbol table entry.  For each rule there is a corresponding
*     symbol table entry.  The collection of all symbol table entries is the
*     symbol table, which is used by the parser to verify the number and types
*     of arguments associated with attributes and to invoke the appropriate
*     WIT API function.
*
*------------------------------------------------------------------------------
*/
d37 1
a37 1
class WitSymTabEntry
d44 4
a47 4
const char *       rule;           // rule recognized by the parser
int                nparms;         // number of parameters
functionP          func;           // pointer to local function wrapper
WitDRParmType::Tag parmTypes[10];  // types of parameters
d52 9
a60 9
// Constructor and destructor
WitSymTabEntry();
WitSymTabEntry(int, functionP, WitDRParmType::Tag *p);
~WitSymTabEntry();

// Accessors
int        nparms() const;
functionP  func() const;
WitDRParmType::Tag *parmTypes() const;  // a pointer to an array of type indicators
d64 3
a66 3
int        nparms_;             // number of parameters for the function
functionP  func_;               // pointer to local attribute function
WitDRParmType::Tag *parmTypes_; // datatype of function parameters
d82 2
a83 2
// Iterator for class SymTable.  Definition follows below.
friend class WitSymTableIterator;
d87 1
a87 1
typedef std::map<std::string,WitSymTabEntry*> WitSymTableDict;
d89 198
a286 198
// Constructors and destructors
WitSymTable(WitRun *theRun);
~WitSymTable();

// Operations
int registerRules();

// Accessors
const WitSymTableDict&  theDictionary();
static WitRun     *myWitRun();

//---------------------------------------------------------------------------
// API Wrapper functions
//--------------------------------------------------------------------------

static WitParseRC  witAddBomEntry();
static WitParseRC  witAddBopEntry();
static WitParseRC  witAddDemand();
static WitParseRC  witAddPart();
static WitParseRC  witAddPartWithOperation();
static WitParseRC  witAddOperation();
static WitParseRC  witAddSubEntry();

static WitParseRC  witSetAccAfterOptImp();
static WitParseRC  witSetAccAfterSoftLB();
static WitParseRC  witSetAutoPriority();
static WitParseRC  witSetCompPrices();
static WitParseRC  witSetComputeCriticalList();
static WitParseRC  witSetCplexParSpecDblVal();
static WitParseRC  witSetCplexParSpecIntVal();
static WitParseRC  witSetCplexParSpecName();
static WitParseRC  witSetCurrentObjective();
static WitParseRC  witSetCurrentScenario();
static WitParseRC  witSetEquitability();
static WitParseRC  witSetExecEmptyBom();
static WitParseRC  witSetExpCutoff();
static WitParseRC  witSetForcedMultiEq();
static WitParseRC  witSetHashTableSize();
static WitParseRC  witSetHighPrecisionWD();
static WitParseRC  witSetIndependentOffsets();
static WitParseRC  witSetLocalBuildAhead();
static WitParseRC  witSetLocalMultiExec();
static WitParseRC  witSetLotSizeTol();
static WitParseRC  witSetMinimalExcess();
static WitParseRC  witSetMipMode();
static WitParseRC  witSetModHeurAlloc();
static WitParseRC  witSetMultiExec();
static WitParseRC  witSetMultiObjMode();
static WitParseRC  witSetMultiObjTol();
static WitParseRC  witSetMultiRoute();
static WitParseRC  witSetNPeriods();
static WitParseRC  witSetNScenarios();
static WitParseRC  witSetNewPipPggOrder();
static WitParseRC  witSetNonMrSelSplit();
static WitParseRC  witSetNstnResidual();
static WitParseRC  witSetObjChoice();
static WitParseRC  witSetObjectiveListSpec();
static WitParseRC  witSetObjectiveRank();
static WitParseRC  witSetOutputPrecision();
static WitParseRC  witSetPenExec();
static WitParseRC  witSetPeriodStage();
static WitParseRC  witSetPerfPegging();
static WitParseRC  witSetPeriodsPerYear();
static WitParseRC  witSetPgdCritListMode();
static WitParseRC  witSetPipSeqClearsNow();
static WitParseRC  witSetPipSeqFromHeur();
static WitParseRC  witSetPrefHighStockSLBs();
static WitParseRC  witSetProbability();
static WitParseRC  witSetRespectStockSLBs();
static WitParseRC  witSetRoundReqVols();
static WitParseRC  witSetSelSplit();
static WitParseRC  witSetSelectionRecovery();
static WitParseRC  witSetShipPerability();
static WitParseRC  witSetSkipFailures();
static WitParseRC  witSetSolverLogFileName();
static WitParseRC  witSetStageByObject();
static WitParseRC  witSetStochMode();
static WitParseRC  witSetStockRealloc();
static WitParseRC  witSetStockReallocation();
static WitParseRC  witSetSrSelSplit();
static WitParseRC  witSetTieBreakPropRt();
static WitParseRC  witSetTitle();
static WitParseRC  witSetTruncOffsets();
static WitParseRC  witSetTwoWayMultiExec();
static WitParseRC  witSetUseFocusHorizons();
static WitParseRC  witSetUserHeurStart();
static WitParseRC  witSetWbounds();
static WitParseRC  witSetWit34Compatible();

static WitParseRC  witSetPartAsapPipOrder();
static WitParseRC  witSetPartBaSelSplit();
static WitParseRC  witSetPartBoundedLeadTimes();
static WitParseRC  witSetPartBuildAheadUB();
static WitParseRC  witSetPartBuildAheadLimit();
static WitParseRC  witSetPartBuildAsap();
static WitParseRC  witSetPartBuildNstn();
static WitParseRC  witSetPartObj1ScrapCost();
static WitParseRC  witSetPartObj1StockCost();
static WitParseRC  witSetPartObjectStage();
static WitParseRC  witSetPartPropRouting();
static WitParseRC  witSetPartPropRtg();
static WitParseRC  witSetPartScrapAllowed();
static WitParseRC  witSetPartScrapCost();
static WitParseRC  witSetPartSingleSource();
static WitParseRC  witSetPartStockBounds();
static WitParseRC  witSetPartStockCost();
static WitParseRC  witSetPartSupplyVol();
static WitParseRC  witSetPartSelForDel();
static WitParseRC  witSetPartUnitCost();

static WitParseRC  witSetDemandBuildAheadLimit();
static WitParseRC  witSetDemandBuildAheadUB();
static WitParseRC  witSetDemandCumShipBounds();
static WitParseRC  witSetDemandCumShipReward();
static WitParseRC  witSetDemandDemandVol();
static WitParseRC  witSetDemandFocusHorizon();
static WitParseRC  witSetDemandGrossRev();
static WitParseRC  witSetDemandIntShipVols();
static WitParseRC  witSetDemandLeadTimeUB();
static WitParseRC  witSetDemandObj1CumShipReward();
static WitParseRC  witSetDemandObj1ShipReward();
static WitParseRC  witSetDemandPipSeqIncShipVol();
static WitParseRC  witSetDemandPipSeqShipPeriod();
static WitParseRC  witSetDemandPrefBuildAhead();
static WitParseRC  witSetDemandPriority();
static WitParseRC  witSetDemandSearchInc();
static WitParseRC  witSetDemandSelForDel();
static WitParseRC  witSetDemandShipLateAllowed();
static WitParseRC  witSetDemandShipLateLimit();
static WitParseRC  witSetDemandShipLateUB();
static WitParseRC  witSetDemandShipReward();
static WitParseRC  witSetDemandShipVol();

static WitParseRC  witSetOperationExecBounds();
static WitParseRC  witSetOperationExecCost();
static WitParseRC  witSetOperationExecPenalty();
static WitParseRC  witSetOperationIncLotSize();
static WitParseRC  witSetOperationIncLotSize2();
static WitParseRC  witSetOperationIntExecVols();
static WitParseRC  witSetOperationLotSize2Thresh();
static WitParseRC  witSetOperationMinLotSize();
static WitParseRC  witSetOperationMinLotSize2();
static WitParseRC  witSetOperationObj1ExecCost();
static WitParseRC  witSetOperationObjectStage();
static WitParseRC  witSetOperationSelForDel();
static WitParseRC  witSetOperationTwoLevelLotSizes();
static WitParseRC  witSetOperationYield();
static WitParseRC  witSetOperationYieldRate();
static WitParseRC  witSetOperationCycleTime34();
static WitParseRC  witSetOperationExecVol();

static WitParseRC  witSetBomEntry();
static WitParseRC  witSetBomEntryConsRate();
static WitParseRC  witSetBomEntryEarliestPeriod();
static WitParseRC  witSetBomEntryExecPenalty();
static WitParseRC  witSetBomEntryFallout();
static WitParseRC  witSetBomEntryFalloutRate();
static WitParseRC  witSetBomEntryLatestPeriod();
static WitParseRC  witSetBomEntryMandEC();
static WitParseRC  witSetBomEntryOffset();
static WitParseRC  witSetBomEntryPropRouting();
static WitParseRC  witSetBomEntryPropRtg();
static WitParseRC  witSetBomEntryRoutingShare();
static WitParseRC  witSetBomEntrySelForDel();
static WitParseRC  witSetBomEntrySingleSource();
static WitParseRC  witSetBomEntryUsageRate();

static WitParseRC  witSetSubEntry();
static WitParseRC  witSetSubEntryConsRate();
static WitParseRC  witSetSubEntryEarliestPeriod();
static WitParseRC  witSetSubEntryExecPenalty();
static WitParseRC  witSetSubEntryExpAllowed();
static WitParseRC  witSetSubEntryExpNetAversion();
static WitParseRC  witSetSubEntryFallout();
static WitParseRC  witSetSubEntryFalloutRate();
static WitParseRC  witSetSubEntryIntSubVols();
static WitParseRC  witSetSubEntryLatestPeriod();
static WitParseRC  witSetSubEntryMrpNetAllowed();
static WitParseRC  witSetSubEntryNetAllowed();
static WitParseRC  witSetSubEntryUsageRate();
static WitParseRC  witSetSubEntryObj1SubCost();
static WitParseRC  witSetSubEntryOffset();
static WitParseRC  witSetSubEntryRoutingShare();
static WitParseRC  witSetSubEntrySelForDel();
static WitParseRC  witSetSubEntrySubCost();
static WitParseRC  witSetSubEntrySubVol();

static WitParseRC  witSetBopEntryByProduct();
static WitParseRC  witSetBopEntryEarliestPeriod();
static WitParseRC  witSetBopEntryExpAllowed();
static WitParseRC  witSetBopEntryExpAversion();
static WitParseRC  witSetBopEntryLatestPeriod();
static WitParseRC  witSetBopEntryMeSelSplit();
static WitParseRC  witSetBopEntryOffset();
static WitParseRC  witSetBopEntryProdRate();
static WitParseRC  witSetBopEntryProductRate();
static WitParseRC  witSetBopEntryRoutingShare();
static WitParseRC  witSetBopEntrySelForDel();
d290 2
a291 2
static WitSymTabEntry::witSymbolDef symbolTable_[];
static WitRun *                     myWitRun_;
d293 1
a293 1
WitSymTableDict                     theDictionary_;
d303 3
a305 3
// Constructor and destructor
WitSymTableIterator(WitSymTable *s);
~WitSymTableIterator();
d307 1
a307 1
// Operations
d309 2
a310 2
// Advance to next symbol table entry
WitSymTabEntry::witSymbolDef  *operator ()();
d314 2
a315 2
WitSymTable * pst_;
int           index_;
@


1.149
log
@Removed COIN from WIT.
@
text
@d6 1
a6 1
//     (c) Copyright IBM Corp. 2006.
d26 10
a35 10
 *
 *     Definition of class SymTabEntry.  Each object of type SymTabEntry
 *     represents a symbol table entry.  For each rule there is a corresponding
 *     symbol table entry.  The collection of all symbol table entries is the
 *     symbol table, which is used by the parser to verify the number and types
 *     of arguments associated with attributes and to invoke the appropriate
 *     WIT API function.
 *
 *------------------------------------------------------------------------------
 */
d37 1
a37 1
class WitSymTabEntry 
d44 4
a47 4
  const char *       rule;           // rule recognized by the parser
  int                nparms;         // number of parameters
  functionP          func;           // pointer to local function wrapper
  WitDRParmType::Tag parmTypes[10];  // types of parameters
d52 9
a60 9
  // Constructor and destructor
  WitSymTabEntry();
  WitSymTabEntry(int, functionP, WitDRParmType::Tag *p);
  ~WitSymTabEntry();

  // Accessors
  int        nparms() const;
  functionP  func() const;
  WitDRParmType::Tag *parmTypes() const;  // a pointer to an array of type indicators
d64 3
a66 3
  int        nparms_;             // number of parameters for the function
  functionP  func_;               // pointer to local attribute function
  WitDRParmType::Tag *parmTypes_; // datatype of function parameters
d82 2
a83 2
  // Iterator for class SymTable.  Definition follows below.
  friend class WitSymTableIterator;
d87 1
a87 1
   typedef std::map<std::string,WitSymTabEntry*> WitSymTableDict;
d89 198
a286 198
  // Constructors and destructors
  WitSymTable(WitRun *theRun);
  ~WitSymTable();

  // Operations
  int registerRules();

  // Accessors
  const WitSymTableDict&  theDictionary();
  static WitRun     *myWitRun();

  //---------------------------------------------------------------------------
  // API Wrapper functions
  //--------------------------------------------------------------------------

  static WitParseRC  witAddBomEntry();
  static WitParseRC  witAddBopEntry();
  static WitParseRC  witAddDemand();
  static WitParseRC  witAddPart();
  static WitParseRC  witAddPartWithOperation();
  static WitParseRC  witAddOperation();
  static WitParseRC  witAddSubEntry();

  static WitParseRC  witSetAccAfterOptImp();
  static WitParseRC  witSetAccAfterSoftLB();
  static WitParseRC  witSetAutoPriority();
  static WitParseRC  witSetCompPrices();
  static WitParseRC  witSetComputeCriticalList();
  static WitParseRC  witSetCplexParSpecDblVal();
  static WitParseRC  witSetCplexParSpecIntVal();
  static WitParseRC  witSetCplexParSpecName();
  static WitParseRC  witSetCurrentObjective();
  static WitParseRC  witSetCurrentScenario();
  static WitParseRC  witSetEquitability();
  static WitParseRC  witSetExecEmptyBom();
  static WitParseRC  witSetExpCutoff();
  static WitParseRC  witSetForcedMultiEq();
  static WitParseRC  witSetHashTableSize();
  static WitParseRC  witSetHighPrecisionWD();
  static WitParseRC  witSetIndependentOffsets();
  static WitParseRC  witSetLocalBuildAhead();
  static WitParseRC  witSetLocalMultiExec();
  static WitParseRC  witSetLotSizeTol();
  static WitParseRC  witSetMinimalExcess();
  static WitParseRC  witSetMipMode();
  static WitParseRC  witSetModHeurAlloc();
  static WitParseRC  witSetMultiExec();
  static WitParseRC  witSetMultiObjMode();
  static WitParseRC  witSetMultiObjTol();
  static WitParseRC  witSetMultiRoute();
  static WitParseRC  witSetNPeriods();
  static WitParseRC  witSetNScenarios();
  static WitParseRC  witSetNewPipPggOrder();
  static WitParseRC  witSetNonMrSelSplit();
  static WitParseRC  witSetNstnResidual();
  static WitParseRC  witSetObjChoice();
  static WitParseRC  witSetObjectiveListSpec();
  static WitParseRC  witSetObjectiveRank();
  static WitParseRC  witSetOutputPrecision();
  static WitParseRC  witSetPenExec();
  static WitParseRC  witSetPeriodStage();
  static WitParseRC  witSetPerfPegging();
  static WitParseRC  witSetPeriodsPerYear();
  static WitParseRC  witSetPgdCritListMode();
  static WitParseRC  witSetPipSeqClearsNow();
  static WitParseRC  witSetPipSeqFromHeur();
  static WitParseRC  witSetPrefHighStockSLBs();
  static WitParseRC  witSetProbability();
  static WitParseRC  witSetRespectStockSLBs();
  static WitParseRC  witSetRoundReqVols();
  static WitParseRC  witSetSelSplit();
  static WitParseRC  witSetSelectionRecovery();
  static WitParseRC  witSetShipPerability();
  static WitParseRC  witSetSkipFailures();
  static WitParseRC  witSetSolverLogFileName();
  static WitParseRC  witSetStageByObject();
  static WitParseRC  witSetStochMode();
  static WitParseRC  witSetStockRealloc();
  static WitParseRC  witSetStockReallocation();
  static WitParseRC  witSetSrSelSplit();
  static WitParseRC  witSetTieBreakPropRt();
  static WitParseRC  witSetTitle();
  static WitParseRC  witSetTruncOffsets();
  static WitParseRC  witSetTwoWayMultiExec();
  static WitParseRC  witSetUseFocusHorizons();
  static WitParseRC  witSetUserHeurStart();
  static WitParseRC  witSetWbounds();
  static WitParseRC  witSetWit34Compatible();

  static WitParseRC  witSetPartAsapPipOrder();
  static WitParseRC  witSetPartBaSelSplit();
  static WitParseRC  witSetPartBoundedLeadTimes();
  static WitParseRC  witSetPartBuildAheadUB();
  static WitParseRC  witSetPartBuildAheadLimit();
  static WitParseRC  witSetPartBuildAsap();
  static WitParseRC  witSetPartBuildNstn();
  static WitParseRC  witSetPartObj1ScrapCost();
  static WitParseRC  witSetPartObj1StockCost();
  static WitParseRC  witSetPartObjectStage();
  static WitParseRC  witSetPartPropRouting();
  static WitParseRC  witSetPartPropRtg();
  static WitParseRC  witSetPartScrapAllowed();
  static WitParseRC  witSetPartScrapCost();
  static WitParseRC  witSetPartSingleSource();
  static WitParseRC  witSetPartStockBounds();
  static WitParseRC  witSetPartStockCost();
  static WitParseRC  witSetPartSupplyVol();
  static WitParseRC  witSetPartSelForDel();
  static WitParseRC  witSetPartUnitCost();

  static WitParseRC  witSetDemandBuildAheadLimit();
  static WitParseRC  witSetDemandBuildAheadUB();
  static WitParseRC  witSetDemandCumShipBounds();
  static WitParseRC  witSetDemandCumShipReward();
  static WitParseRC  witSetDemandDemandVol();
  static WitParseRC  witSetDemandFocusHorizon();
  static WitParseRC  witSetDemandGrossRev();
  static WitParseRC  witSetDemandIntShipVols();
  static WitParseRC  witSetDemandLeadTimeUB();
  static WitParseRC  witSetDemandObj1CumShipReward();
  static WitParseRC  witSetDemandObj1ShipReward();
  static WitParseRC  witSetDemandPipSeqIncShipVol();
  static WitParseRC  witSetDemandPipSeqShipPeriod();
  static WitParseRC  witSetDemandPrefBuildAhead();
  static WitParseRC  witSetDemandPriority();
  static WitParseRC  witSetDemandSearchInc();
  static WitParseRC  witSetDemandSelForDel();
  static WitParseRC  witSetDemandShipLateAllowed();
  static WitParseRC  witSetDemandShipLateLimit();
  static WitParseRC  witSetDemandShipLateUB();
  static WitParseRC  witSetDemandShipReward();
  static WitParseRC  witSetDemandShipVol();

  static WitParseRC  witSetOperationExecBounds();
  static WitParseRC  witSetOperationExecCost();
  static WitParseRC  witSetOperationExecPenalty();
  static WitParseRC  witSetOperationIncLotSize();
  static WitParseRC  witSetOperationIncLotSize2();
  static WitParseRC  witSetOperationIntExecVols();
  static WitParseRC  witSetOperationLotSize2Thresh();
  static WitParseRC  witSetOperationMinLotSize();
  static WitParseRC  witSetOperationMinLotSize2();
  static WitParseRC  witSetOperationObj1ExecCost();
  static WitParseRC  witSetOperationObjectStage();
  static WitParseRC  witSetOperationSelForDel();
  static WitParseRC  witSetOperationTwoLevelLotSizes();
  static WitParseRC  witSetOperationYield();
  static WitParseRC  witSetOperationYieldRate();
  static WitParseRC  witSetOperationCycleTime34();
  static WitParseRC  witSetOperationExecVol();

  static WitParseRC  witSetBomEntry();
  static WitParseRC  witSetBomEntryConsRate();
  static WitParseRC  witSetBomEntryEarliestPeriod();
  static WitParseRC  witSetBomEntryExecPenalty();
  static WitParseRC  witSetBomEntryFallout();
  static WitParseRC  witSetBomEntryFalloutRate();
  static WitParseRC  witSetBomEntryLatestPeriod();
  static WitParseRC  witSetBomEntryMandEC();
  static WitParseRC  witSetBomEntryOffset();
  static WitParseRC  witSetBomEntryPropRouting();
  static WitParseRC  witSetBomEntryPropRtg();
  static WitParseRC  witSetBomEntryRoutingShare();
  static WitParseRC  witSetBomEntrySelForDel();
  static WitParseRC  witSetBomEntrySingleSource();
  static WitParseRC  witSetBomEntryUsageRate();

  static WitParseRC  witSetSubEntry();
  static WitParseRC  witSetSubEntryConsRate();
  static WitParseRC  witSetSubEntryEarliestPeriod();
  static WitParseRC  witSetSubEntryExecPenalty();
  static WitParseRC  witSetSubEntryExpAllowed();
  static WitParseRC  witSetSubEntryExpNetAversion();
  static WitParseRC  witSetSubEntryFallout();
  static WitParseRC  witSetSubEntryFalloutRate();
  static WitParseRC  witSetSubEntryIntSubVols();
  static WitParseRC  witSetSubEntryLatestPeriod();
  static WitParseRC  witSetSubEntryMrpNetAllowed();
  static WitParseRC  witSetSubEntryNetAllowed();
  static WitParseRC  witSetSubEntryUsageRate();
  static WitParseRC  witSetSubEntryObj1SubCost();
  static WitParseRC  witSetSubEntryOffset();
  static WitParseRC  witSetSubEntryRoutingShare();
  static WitParseRC  witSetSubEntrySelForDel();
  static WitParseRC  witSetSubEntrySubCost();
  static WitParseRC  witSetSubEntrySubVol();

  static WitParseRC  witSetBopEntryByProduct();
  static WitParseRC  witSetBopEntryEarliestPeriod();
  static WitParseRC  witSetBopEntryExpAllowed();
  static WitParseRC  witSetBopEntryExpAversion();
  static WitParseRC  witSetBopEntryLatestPeriod();
  static WitParseRC  witSetBopEntryMeSelSplit();
  static WitParseRC  witSetBopEntryOffset();
  static WitParseRC  witSetBopEntryProdRate();
  static WitParseRC  witSetBopEntryProductRate();
  static WitParseRC  witSetBopEntryRoutingShare();
  static WitParseRC  witSetBopEntrySelForDel();
d290 2
a291 2
  static WitSymTabEntry::witSymbolDef symbolTable_[];
  static WitRun *                     myWitRun_;
d293 1
a293 1
  WitSymTableDict                     theDictionary_;
d303 3
a305 3
  // Constructor and destructor
  WitSymTableIterator(WitSymTable *s);
  ~WitSymTableIterator();
d307 1
a307 1
  // Operations
d309 2
a310 2
  // Advance to next symbol table entry
  WitSymTabEntry::witSymbolDef  *operator ()();
d314 2
a315 2
  WitSymTable * pst_;
  int           index_;
@


1.148
log
@CPLEX Parameters
@
text
@a114 1
  static WitParseRC  witSetCoinSelected();
a119 1
  static WitParseRC  witSetCplexSelected();
@


1.147
log
@CPLEX Parameters
@
text
@d118 3
a121 3
  static WitParseRC  witSetCpxParSpecDblVal();
  static WitParseRC  witSetCpxParSpecIntVal();
  static WitParseRC  witSetCpxParSpecName();
@


1.146
log
@CPLEX Param Specs
@
text
@d119 3
a165 3
  static WitParseRC  witSetSpecCpxParDblVal();
  static WitParseRC  witSetSpecCpxParIntVal();
  static WitParseRC  witSetSpecCpxParName();
@


1.145
log
@CPLEX Param Specs.
@
text
@d163 1
@


1.144
log
@CPX Param Specs
@
text
@d163 1
@


1.143
log
@CPX Params
@
text
@a139 1
  static WitParseRC  witSetNameForCpxParam();
d163 1
@


1.142
log
@CPLEX
@
text
@d140 1
@


1.141
log
@Modifiable heuristic allocation
@
text
@d115 1
d118 1
a161 2
  static WitParseRC  witSetSolverIsCoin();
  static WitParseRC  witSetSolverIsCplex();
@


1.140
log
@Heuristic Adjustment
@
text
@a123 1
  static WitParseRC  witSetHeurAdjustEnabled();
d131 1
@


1.139
log
@Name change: "selection reuse" has becomne "selection recovery".
@
text
@d124 1
@


1.138
log
@Lead Time Bounds.
@
text
@d156 1
a156 1
  static WitParseRC  witSetSelectionReuse();
@


1.137
log
@Bounded Lead Times
@
text
@d178 1
a178 1
  static WitParseRC  witSetPartBoundedLeadTime();
@


1.136
log
@Bounded Lead Times
@
text
@d178 1
a178 1
  static WitParseRC  witSetPartBoundedLeadTimes();
@


1.135
log
@Bounded Lead Times
@
text
@d205 1
@


1.134
log
@Selection Reuse.
@
text
@d178 1
@


1.133
log
@CPLEX
@
text
@d156 1
@


1.132
log
@Preparing for CPLEX.
@
text
@d159 1
@


1.131
log
@Multi-Obj Mode
@
text
@d158 1
@


1.130
log
@Multi-Obj Mode
@
text
@d142 1
a142 1
  static WitParseRC  witSetObjectiveSeqNo();
@


1.129
log
@Multi-objective mode
@
text
@d133 1
@


1.128
log
@Multi-objective mode
@
text
@a133 1
  static WitParseRC  witSetNObjectives();
a140 1
  static WitParseRC  witSetObjectiveName();
@


1.127
log
@Multi-Objective Mode.
@
text
@d141 1
@


1.126
log
@Multi-objective mode.
@
text
@d142 1
@


1.125
log
@Multi-obj mode.
@
text
@d141 1
@


1.124
log
@Multi-objective mode.
@
text
@d117 1
@


1.123
log
@Removing objective #2.
@
text
@d133 1
@


1.122
log
@Removing objective #2.
@
text
@d187 1
d195 1
d280 3
a282 2
  static WitRun     *myWitRun_;
  WitSymTableDict    theDictionary_;
@


1.121
log
@Multi-obj mode.
@
text
@a114 1
  static WitParseRC  witSetCapCost();
a124 1
  static WitParseRC  witSetInvCost();
a138 4
  static WitParseRC  witSetObj2Winv();
  static WitParseRC  witSetObj2Wrev();
  static WitParseRC  witSetObj2Wserv();
  static WitParseRC  witSetObj2Wsub();
a186 1
  static WitParseRC  witSetPartUnitCost();
a193 1
  static WitParseRC  witSetDemandGrossRev();
a218 1
  static WitParseRC  witSetOperationObj2AuxCost();
a256 1
  static WitParseRC  witSetSubEntryObj2SubPenalty();
@


1.120
log
@Removed many instances of converting a string constant to a char *.
@
text
@d133 1
@


1.119
log
@Stochastic Implosion
@
text
@d44 1
a44 1
  char               *rule;          // rule recognized by the parser
@


1.118
log
@Stochastic Implosion
@
text
@d118 1
a118 1
  static WitParseRC  witSetCurScenarioIndex();
@


1.117
log
@Stochastic Implosion
@
text
@d146 1
a146 1
  static WitParseRC  witSetPerStageIndex();
d182 1
a187 1
  static WitParseRC  witSetPartStageIndex();
d227 1
a228 1
  static WitParseRC  witSetOperationStageIndex();
@


1.116
log
@Stochastic Implosion
@
text
@d146 1
a160 1
  static WitParseRC  witSetStageIndex();
@


1.115
log
@Stochastic Implosion
@
text
@d160 1
@


1.114
log
@Stochastic Implosion
@
text
@d186 1
a186 1
  static WitParseRC  witSetPartStageNo();
d227 1
a227 1
  static WitParseRC  witSetOperationStageNo();
@


1.113
log
@Stochastic Implosion
@
text
@d118 1
a118 1
  static WitParseRC  witSetCurScenarioNo();
@


1.112
log
@Stochastic Implosion
@
text
@a182 1
  static WitParseRC  witSetPartRecourseStage();
d186 1
a225 1
  static WitParseRC  witSetOperationRecourseStage();
d227 1
@


1.111
log
@Stochastic Implosion
@
text
@d118 1
a154 1
  static WitParseRC  witSetScenarioIndex();
@


1.110
log
@ASAP Pegging Order
@
text
@d151 1
a154 1
  static WitParseRC  witSetScenarioProb();
@


1.109
log
@ASAP Pegging Order
@
text
@d173 1
a173 1
  static WitParseRC  witSetPartAsapPip();
@


1.108
log
@Stochastic Implosion
@
text
@d173 1
@


1.107
log
@Stochastic Implosion
@
text
@d160 1
a160 1
  static WitParseRC  witSetStochDataMode();
@


1.106
log
@Stochastic Implosion
@
text
@a150 1
  static WitParseRC  witSetProbability();
d154 1
@


1.105
log
@Stochastic Implosion
@
text
@d182 1
d225 1
@


1.104
log
@Stochastic Implosion
@
text
@d151 1
a154 1
  static WitParseRC  witSetScenarioProb();
@


1.103
log
@Stochastic Implosion
@
text
@d160 1
a160 1
  static WitParseRC  witSetStochasticMode();
@


1.102
log
@Stochastic Implosion
@
text
@d160 1
a160 1
  static WitParseRC  witSetStochImpMode();
@


1.101
log
@Stochastic Implosion
@
text
@a150 1
  static WitParseRC  witSetProbability();
d154 1
@


1.100
log
@Stochastic Implosion
@
text
@d151 1
@


1.99
log
@Stochastic implosion.
@
text
@d153 1
@


1.98
log
@Stochastic Implosion.
@
text
@d158 1
a158 1
  static WitParseRC  witSetStochImpActive();
@


1.97
log
@Stochastic implosion.
@
text
@d158 1
@


1.96
log
@Stochastic implosion.
@
text
@d134 1
@


1.95
log
@[disallowing scrap]
@
text
@d156 1
@


1.94
log
@[disallowed backlog]
@
text
@d177 1
@


1.93
log
@[disallowed backlog]
@
text
@a184 1
  static WitParseRC  witSetDemandBacklogAllowed();
d201 1
@


1.92
log
@[disallowed backlog]
@
text
@d185 1
a190 1
  static WitParseRC  witSetDemandDisallowBacklog();
@


1.91
log
@[backlog avoidance]
@
text
@a184 1
  static WitParseRC  witSetDemandBacklogAllowed();
d190 1
@


1.90
log
@[backlog avoidance]
@
text
@d185 1
@


1.89
log
@[backlog avoidance]
@
text
@a114 1
  static WitParseRC  witSetBacklogAllowed();
@


1.88
log
@External opt implosion.
@
text
@d115 1
@


1.87
log
@External opt implosion.
@
text
@a113 1
  static WitParseRC  witSetAllowIntCons();
d130 1
@


1.86
log
@External opt implosion.
@
text
@d114 1
a118 1
  static WitParseRC  witSetEnforceIntCons();
@


1.85
log
@External opt implosion.
@
text
@d118 1
@


1.84
log
@Heuristic search increment.
@
text
@d191 1
a191 1
  static WitParseRC  witSetDemandIntConShipVols();
d210 1
a210 1
  static WitParseRC  witSetOperationIntConExecVols();
d247 1
a247 1
  static WitParseRC  witSetSubEntryIntConSubVols();
@


1.83
log
@Heuristic search increment.
@
text
@a122 1
  static WitParseRC  witSetHeurSearchInc();
d198 1
@


1.82
log
@NSTN residualVol.
@
text
@d123 1
@


1.81
log
@NSTN residualVols.
@
text
@d129 1
@


1.80
log
@Integrality constraints.
@
text
@d134 1
@


1.79
log
@Removed optimizing implosion with lot sizes.
@
text
@d189 1
a189 1
  static WitParseRC  witSetDemandIntShipVols();
d207 1
a207 1
  static WitParseRC  witSetOperationIntExecVols();
d244 1
a244 1
  static WitParseRC  witSetSubEntryIntSubVols();
@


1.78
log
@Opt implosion with integrality constraints.
@
text
@a138 1
  static WitParseRC  witSetOptWithLotSizes();
@


1.77
log
@GPIP migration.
@
text
@d190 1
d208 1
d245 1
@


1.76
log
@GPIP migration
@
text
@a261 1
  static WitParseRC  witSetBopEntryPipShare();
@


1.75
log
@Removed the postSolveRecovery attribute.
@
text
@a121 1
  static WitParseRC  witSetGroupPipMode();
@


1.74
log
@New PIP pegging order.
@
text
@a147 1
  static WitParseRC  witSetPostSolveRecovery();
@


1.73
log
@Updated the copyright date on all source files.
@
text
@d133 1
@


1.72
log
@GPIP
@
text
@d6 1
a6 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.71
log
@Began [shared-resource pegging]
@
text
@d122 1
a154 1
  static WitParseRC  witSetSrpMode();
@


1.70
log
@[exceptions]
@
text
@d154 1
@


1.69
log
@Changed names of obj1 attributes, e.g., obj1ScrapCost to scrapCost.
@
text
@d270 1
a270 1
  static WitSymTabEntry::witSymbolDef symbolTable[];
d293 2
a294 2
  WitSymTable *pst;
  int         index;
@


1.68
log
@Made opt implosion use COIN unconditionally when COIN_BUILD is defined.
@
text
@d175 1
d178 1
d186 1
d199 1
d203 1
d252 1
@


1.67
log
@Vector PropRtg.
@
text
@a152 1
  static WitParseRC  witSetSolverIsCoin();
@


1.66
log
@Vector PropRt.
@
text
@d175 1
a175 1
  static WitParseRC  witSetPartPropRt();
d225 1
a225 1
  static WitParseRC  witSetBomEntryPropRt();
@


1.65
log
@Vector propRt.
@
text
@d225 1
@


1.64
log
@Pegged Critical List.
@
text
@d175 1
@


1.63
log
@Pegged Critical List
@
text
@d143 1
a143 1
  static WitParseRC  witSetPgdCritListNeeded();
@


1.62
log
@Pegged Critical List.
@
text
@a115 1
  static WitParseRC  witSetCompPgdCritList();
d143 1
@


1.61
log
@Changed terminology from "low priority proportionate routing" to
"tie breaking proportionate routing".
@
text
@d116 1
@


1.60
log
@Continued implmentation of low priority proportionate routing.
@
text
@a128 1
  static WitParseRC  witSetLowPriPropRt();
d157 1
@


1.59
log
@Began work on [propRouting as penExec tie-breaker].
@
text
@d129 1
a141 1
  static WitParseRC  witSetPenExecOverPropRt();
@


1.58
log
@Added "solverIsCoin" attribute.
@
text
@d141 1
@


1.57
log
@Continued implementation of PIP.
@
text
@d152 1
@


1.56
log
@Double Precision.
@
text
@d252 1
@


1.55
log
@Double Precision.
@
text
@d123 1
@


1.54
log
@Double Precision.
@
text
@d44 4
a47 4
  char        *rule;          // rule recognized by the parser
  int         nparms;         // number of parameters
  functionP   func;           // pointer to local function wrapper
  pType       parmTypes[10];  // types of parameters
d54 1
a54 1
  WitSymTabEntry(int, functionP, pType *p);
d60 1
a60 1
  pType      *parmTypes() const;  // a pointer to an array of type indicators
d66 1
a66 1
  pType      *parmTypes_;         // datatype of function parameters
@


1.53
log
@Double Precision.
@
text
@a117 1
  static WitParseRC  witSetDoubleMode();
@


1.52
log
@Removed the "pip" attribute.
@
text
@d118 1
a123 1
  static WitParseRC  witSetPipSeqFromHeur();
d144 1
@


1.51
log
@Continued implementation of PIP.
@
text
@a142 1
  static WitParseRC  witSetPip();
@


1.50
log
@Continued implementation of PIP.
@
text
@d123 1
a123 1
  static WitParseRC  witSetHeurPipSeq();
@


1.49
log
@Continued implementation of PIP.
@
text
@a143 1
  static WitParseRC  witSetPipSeqAppendsNow();
a144 4
  static WitParseRC  witSetPipSeqDemandName();
  static WitParseRC  witSetPipSeqPartName();
  static WitParseRC  witSetPipSeqShipPeriod ();
  static WitParseRC  witSetPipSeqIncShipVol();
d178 1
a178 5
  static WitParseRC  witSetDemandGrossRev();
  static WitParseRC  witSetDemandDemandVol();
  static WitParseRC  witSetDemandShipVol();
  static WitParseRC  witSetDemandObj1ShipReward();
  static WitParseRC  witSetDemandPriority();
a179 1
  static WitParseRC  witSetDemandBuildAheadLimit();
d181 1
d183 1
d185 3
d189 3
d193 1
a193 2
  static WitParseRC  witSetDemandShipLateLimit();
  static WitParseRC  witSetDemandSelForDel();
@


1.48
log
@Continued implementation of PIP.
@
text
@d144 6
d155 1
@


1.47
log
@Continued implementation of PIP.
@
text
@d123 1
@


1.46
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d79 1
a79 1
class WitSymTable: public WitUtil
d261 1
a261 1
class WitSymTableIterator: public WitUtil
@


1.45
log
@Continued implementation of post-implosion pegging.
@
text
@a139 1
  static WitParseRC  witSetPerfPIPegging();
d142 1
@


1.44
log
@Began implementation of post-implosion pegging.
@
text
@d140 1
a141 1
  static WitParseRC  witSetPiPegging();
@


1.43
log
@Continued implementation of opt with COIN.
@
text
@d141 1
@


1.42
log
@Continued implementation of proportionate routing.
@
text
@d148 1
@


1.41
log
@Implemented OSL postSolve error recovery.
@
text
@a207 1
  static WitParseRC  witSetBomEntryExpShare();
d214 1
a224 1
  static WitParseRC  witSetSubEntryExpShare();
d234 2
a236 1
  static WitParseRC  witSetSubEntrySelForDel();
a241 1
  static WitParseRC  witSetBopEntryExpShare();
d247 1
@


1.40
log
@Continued implementation of proportionate routing.
@
text
@d142 1
@


1.39
log
@Continued implementation of proportionate routing.
@
text
@d207 1
d213 1
d224 1
@


1.38
log
@Continued implementation of proportionate routing.
@
text
@a142 1
  static WitParseRC  witSetPropRouting();
d165 1
@


1.37
log
@Began implementation of Proportionate Routing.
@
text
@d143 1
d238 1
a238 1
  static WitParseRC  witSetBopEntryExpFactor();
@


1.36
log
@Continued implementation of execPenalties on BOM entries and subs.
@
text
@d237 1
@


1.35
log
@Added penalties on BOM entries and substitutes to pen-exec.
@
text
@d205 1
a213 1
  static WitParseRC  witSetBomEntryUsePenalty();
d218 1
a231 1
  static WitParseRC  witSetSubEntryUsePenalty();
@


1.34
log
@Continued implementation of user-specified heuristic starting solution.
@
text
@d213 1
d231 1
@


1.33
log
@Continued implementation of heuristic initial solution.
@
text
@a122 1
  static WitParseRC  witSetHeurInitSoln();
d154 1
@


1.32
log
@modications to change rogueWave tools.h++ to STL
@
text
@d123 1
a124 1
  static WitParseRC  witSetInitHeurSoln();
@


1.31
log
@Continued implementation of heuristic implosion from an initial solution.
Added some debugging code to Single-Source.
@
text
@d20 2
a21 3
#include <rw/collstr.h>
#include <rw/cstring.h>
#include <rw/hashdict.h>
d37 1
a37 1
class WitSymTabEntry: public RWCollectable
d39 1
a39 1
  RWDECLARE_COLLECTABLE(WitSymTabEntry)
d87 2
d97 1
a97 1
  RWHashDictionary  *theDictionary();
d246 1
a246 1
  RWHashDictionary  *theDictionary_;
@


1.31.2.1
log
@Migration from Roguewave tools.h++ to STL
@
text
@d20 3
a22 2
#include <string>
#include <map>
d38 1
a38 1
class WitSymTabEntry 
d40 1
a40 1
public:
a87 2
   typedef std::map<std::string,WitSymTabEntry*> WitSymTableDict;

d96 1
a96 1
  const WitSymTableDict&  theDictionary();
d245 1
a245 1
  WitSymTableDict    theDictionary_;
@


1.30
log
@Began implementation of heuristic implosion from an initial solution.
@
text
@a121 1
  static WitParseRC  witSetHeurInitSoln();
d123 1
@


1.29
log
@Continued implementation of two-level lot sizes.
@
text
@d122 1
@


1.28
log
@Continued implementation of two-level lot sizes.
@
text
@d194 1
@


1.27
log
@Began implementation of opt implosion with lot sizes.
@
text
@d187 2
d190 1
@


1.26
log
@Continued implementation of Single-Source.
@
text
@d136 1
@


1.25
log
@Continued implementation of single-source.
@
text
@d204 1
@


1.24
log
@Initial implementation of selection splitting for multi-route.
@
text
@d162 1
@


1.23
log
@Began implementation of selection splitting for stock reallocation.
@
text
@d130 1
d143 1
@


1.22
log
@Changed selStockRe attribute to stockReallocation (fullSR, internally).
@
text
@d145 1
@


1.21
log
@Replaced uncondStockRe attribute with the old stockRealloc attribute.
@
text
@a141 1
  static WitParseRC  witSetSelStockRe();
d144 1
@


1.20
log
@Renamed mandatory stock reallocation to unconditional stock reallocation.
@
text
@a147 1
  static WitParseRC  witSetUncondStockRe();
@


1.19
log
@Changed attribute stockRealloc to mandStockRe.
@
text
@a126 1
  static WitParseRC  witSetMandStockRe();
d148 1
@


1.18
log
@Continued implementation of selective stock reallocation.
@
text
@d127 1
@


1.17
log
@Added selStockRealloc attribute.
@
text
@d142 1
a142 1
  static WitParseRC  witSetSelStockRealloc();
@


1.16
log
@Added shadowPrice and compPrices attributes.
@
text
@d142 1
@


1.15
log
@Minor change.
@
text
@d115 1
@


1.14
log
@Continued implementation of pegging.
@
text
@d136 1
a136 1
  static WitParseRC  witSetPeggingNeeded();
@


1.13
log
@Continued implementation of pegging.
@
text
@d136 1
a136 1
  static WitParseRC  witSetPegging();
@


1.12
log
@Continued implementation of pegging.
@
text
@d136 1
a136 1
  static WitParseRC  witSetPerfPegging();
@


1.11
log
@Initial implementation of pegging.
@
text
@a115 1
  static WitParseRC  witSetDoPegging();
d136 1
@


1.10
log
@Added meSelSplitOK development parameter.
Added meSelSplit attribute.
Refactoring for sel-split for multi-exec.
@
text
@d116 1
@


1.9
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@d221 1
@


1.8
log
@Re-worked the controls for selection splitting.
@
text
@d149 1
@


1.7
log
@Removed the coarse selection splitting code that's not needed for the new
design of selection splitting.
@
text
@a148 1
  static WitParseRC  witSetPartBaSplitRes();
@


1.6
log
@Implemented respectStockSLBs and prefHighStockSLBs global attributes.
@
text
@d149 1
@


1.5
log
@Replaced some scalar attributes with vector attributes:

   BOM entry  usageRate ==> consRate
   substitute usageRate ==> consRate
   BOP entry  prodRate  ==> productRate
@
text
@d137 3
a141 1
  static WitParseRC  witSetRoundReqVols();
@


1.4
log
@Finished implementing stock reallocation.
@
text
@d186 1
d197 1
d220 1
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d138 1
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d24 1
a24 1
#include <typedefs.h>
d80 2
a81 1
class WitSymTable {
d228 2
a229 1
class WitSymTableIterator {
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
