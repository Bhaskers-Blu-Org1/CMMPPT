head	1.6;
access;
symbols
	sce_5_01_20080919:1.3
	latest_sce_4_20_20060523:1.3.0.2
	sce_4_20_20060523:1.3
	latest_sce4_20_OSL:1.2.0.2
	sce_4_20_OSL:1.2
	sce_410_withVa:1.2;
locks; strict;
comment	@ * @;


1.6
date	2011.09.28.23.49.27;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.24.00.27.46;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.08.30.20.17.34;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.02.17.34.00;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.11.17.20.36;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.24.23.23.56;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ISRealArgH
#define ISRealArgH

//------------------------------------------------------------------------------
// Header file: "ISRealArg.h"
//
// Contains the declaration of class ISRealArg.
//------------------------------------------------------------------------------

#include <RealArg.h>

//------------------------------------------------------------------------------
// Class ISRealArg
//
// "Input Scalar Real Argument"
//
// Provides a uniform interface to a certain kind of argument to an API
// function. The underlying argument is a scalar real-valued variable passed in
// by value from the application program. Specifically, the underlying argument
// is of one of the following types:
//
//    const float
//    const double
//
// Thus:
//    Some of the inner API functions (in WitRun.h) will have arguments of type
//       const ISRealArg &.
//    The corresponding outer API functions (in wit.h) will have arguments of
//       type const float and const double. These are the "underlying 
//       arguments".
//
//
// Class Hierarchy:
//
// RealArg
//    ISRealArg
//
// Implemented in RealArg.C.
//------------------------------------------------------------------------------

class WitISRealArg: public WitRealArg
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitISRealArg (float);
         //
         // Conversion from a float underlying argument.

      WitISRealArg (double);
         //
         // Conversion from a double underlying argument.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitISRealArg ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline double asaDbl () const
         {
         return
            floatCase ()?
               dblFromFlt (myFlt_):
               myDbl_;
         }

      inline operator double () const
         {
         return asaDbl ();
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitISRealArg);

      inline operator float () const;
         //
         // Not implemented.
         // Prevents unintended conversion to float.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const float myFlt_;
         //
         // The underlying argument, if it is a float.
         // Otherwise 0.

      const double myDbl_;
         //
         // The underlying argument, if it is a double.
         // Otherwise 0.
   };

#endif
@


1.5
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.4
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d38 1
a38 1
//       type const float and const double. These are the "underlying
d51 2
a52 36
{
public:

//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitISRealArg (float);
//
// Conversion from a float underlying argument.

WitISRealArg (double);
//
// Conversion from a double underlying argument.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitISRealArg ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

inline double asaDbl () const
{
return
floatCase ()?
dblFromFlt (myFlt_):
myDbl_;
}
d54 66
a119 32
inline operator double () const
{
return asaDbl ();
}

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitISRealArg);

inline operator float () const;
//
// Not implemented.
// Prevents unintended conversion to float.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

const float myFlt_;
//
// The underlying argument, if it is a float.
// Otherwise 0.

const double myDbl_;
//
// The underlying argument, if it is a double.
// Otherwise 0.
};
@


1.3
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d38 1
a38 1
//       type const float and const double. These are the "underlying 
d51 36
a86 2
   {
   public:
d88 32
a119 66
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitISRealArg (float);
         //
         // Conversion from a float underlying argument.

      WitISRealArg (double);
         //
         // Conversion from a double underlying argument.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitISRealArg ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline double asaDbl () const
         {
         return
            floatCase ()?
               dblFromFlt (myFlt_):
               myDbl_;
         }

      inline operator double () const
         {
         return asaDbl ();
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitISRealArg);

      inline operator float () const;
         //
         // Not implemented.
         // Prevents unintended conversion to float.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const float myFlt_;
         //
         // The underlying argument, if it is a float.
         // Otherwise 0.

      const double myDbl_;
         //
         // The underlying argument, if it is a double.
         // Otherwise 0.
   };
@


1.2
log
@Vector PropRtg.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.1
log
@Vector PropRt.
@
text
@d26 4
a29 4
// Provides a uniform interface to certain kind of argument to an API function.
// The underlying argument is a scalar real-valued variable passed in by value
// from the application program. Specifically, the underlying argument is of one
// of the following types:
a40 3
// A copy of the underlying argument for an instance of this class is stored by
// the instance as a double.
//
d80 1
a80 1
      inline operator double () const
d82 4
a85 1
         return myUnderArg_;
d88 1
a88 1
      inline double asaDbl () const
d90 1
a90 1
         return myUnderArg_;
d110 6
a115 1
      const double myUnderArg_;
d117 2
a118 2
         // The value of the underlying argument, converted (if necessary) to a
         // double.
@

