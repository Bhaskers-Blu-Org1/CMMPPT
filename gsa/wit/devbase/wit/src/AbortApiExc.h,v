head	1.7;
access;
symbols
	sce_5_01_20080919:1.4
	latest_sce_4_20_20060523:1.3.0.2
	sce_4_20_20060523:1.3
	latest_sce4_20_OSL:1.2.0.2
	sce_4_20_OSL:1.2;
locks; strict;
comment	@ * @;


1.7
date	2011.09.28.23.48.59;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.09.24.00.27.17;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.08.30.20.17.13;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.11.22.53.24;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.02.17.33.53;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.21.22.23.34;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.15.19.47.10;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef AbortApiExcH
#define AbortApiExcH

#include <typedefs.h>

//------------------------------------------------------------------------------
// Header file: "AbortApiExc.h"
//
// Contains the declaration of class AbortApiExc.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Class AbortApiExc
//
// "Abort API Exception"
// Exceptions of this type are caught at the end of the outer API function that
// was called by the application program and cause it to either:
//   Terminate execution of the program, or
//   Throw a WitException, or
//   Return execution to the application program.
//
// Implemented in ApiMgr.C.
//------------------------------------------------------------------------------

class WitAbortApiExc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAbortApiExc (WitMsg *);

      WitAbortApiExc (const WitAbortApiExc &);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitAbortApiExc ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      int myMsgNum ();
         //
         // The number of the message that caused this exception to be thrown.

      bool stopRunning ();
         //
         // Returns true, iff program process is to be terminated when this
         // exception has been thrown.

      bool throwErrorExc ();
         //
         // Returns true, iff WIT is to throw an ErrorExc when this exception
         // has been thrown.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      WitMsgArg & operator = (const WitMsgArg &);
         //
         // Not implemented.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMsg * const myMsg_;
         //
         // The message that caused this exception to be thrown.
   };

#endif
@


1.6
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.5
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d35 2
a36 2
{
public:
d38 3
a40 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d42 1
a42 1
WitAbortApiExc (WitMsg *);
d44 1
a44 1
WitAbortApiExc (const WitAbortApiExc &);
d46 3
a48 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d50 1
a50 1
~WitAbortApiExc ();
d52 3
a54 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d56 3
a58 3
int myMsgNum ();
//
// The number of the message that caused this exception to be thrown.
d60 4
a63 4
bool stopRunning ();
//
// Returns true, iff program process is to be terminated when this
// exception has been thrown.
d65 4
a68 4
bool throwErrorExc ();
//
// Returns true, iff WIT is to throw an ErrorExc when this exception
// has been thrown.
d70 1
a70 1
private:
d72 3
a74 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d76 3
a78 3
WitMsgArg & operator = (const WitMsgArg &);
//
// Not implemented.
d80 3
a82 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d84 4
a87 4
WitMsg * const myMsg_;
//
// The message that caused this exception to be thrown.
};
@


1.4
log
@witCopy<Object>Data
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d35 2
a36 2
   {
   public:
d38 3
a40 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d42 1
a42 1
      WitAbortApiExc (WitMsg *);
d44 1
a44 1
      WitAbortApiExc (const WitAbortApiExc &);
d46 3
a48 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d50 1
a50 1
      ~WitAbortApiExc ();
d52 3
a54 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d56 3
a58 3
      int myMsgNum ();
         //
         // The number of the message that caused this exception to be thrown.
d60 4
a63 4
      bool stopRunning ();
         //
         // Returns true, iff program process is to be terminated when this
         // exception has been thrown.
d65 4
a68 4
      bool throwErrorExc ();
         //
         // Returns true, iff WIT is to throw an ErrorExc when this exception
         // has been thrown.
d70 1
a70 1
   private:
d72 3
a74 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d76 3
a78 3
      WitMsgArg & operator = (const WitMsgArg &);
         //
         // Not implemented.
d80 3
a82 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d84 4
a87 4
      WitMsg * const myMsg_;
         //
         // The message that caused this exception to be thrown.
   };
@


1.3
log
@Updated the copyright date on all source files.
@
text
@d42 1
a42 1
      WitAbortApiExc (int);
d56 13
a68 1
      accessFunc (int, myMsgNum)
d84 1
a84 1
      const int myMsgNum_;
d86 1
a86 1
         // The number of the message that caused this exception to be thrown.
@


1.2
log
@[error recovery]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.1
log
@[multi-thread]
@
text
@d26 4
a29 2
// was called by the application program and cause it either to return execution
// to the application program or throw a WitException.
@

