head	1.11;
access;
symbols
	sce_5_01_20080919:1.7
	latest_sce_4_20_20060523:1.7.0.2
	sce_4_20_20060523:1.7
	latest_sce4_20_OSL:1.6.0.2
	sce_4_20_OSL:1.6
	sce_410_withVa:1.5
	sce_4_05_20040511:1.4
	sce_4_00_20040201:1.4
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.2.0.4
	Root-of-EndRw:1.2
	rwToStl:1.2.0.2;
locks; strict;
comment	@ * @;


1.11
date	2011.09.28.23.49.46;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.09.24.00.28.07;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.08.30.20.17.48;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.11.18.19.00.02;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.02.17.34.06;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.09.26.18.47.56;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.30.20.23.32;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.01.21.05.04;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.02.22.18.40;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.11.18.53.12;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.23.18.09.14;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef OptStarterH
#define OptStarterH

//------------------------------------------------------------------------------
// Header file: "OptStarter.h"
//
// Contains the declaration of class OptStarter.
//------------------------------------------------------------------------------

#include <Str.h>

//------------------------------------------------------------------------------
// class OptStarter
//
// Responsible for determining the means by which an initial solution for opt
// implosion is to be generated.
//
// Implemented in Misc.C.
//------------------------------------------------------------------------------

class WitOptStarter
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOptStarter (
            WitOptComp * theOptComp,
            const char * theParamValue,
            WitAttr      theApiAttr,
            WitMsgID     theMsgID,
            bool         externalVal);
         //
         // paramValue     <-- theParamValue.
         // myApiAttr_     <-- theApiAttr.
         // myMsgID_       <-- theMsgID.
         // external_      <-- externalVal.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOptStarter ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitOptComp *,      myOptComp)
      accessFunc (const WitString &, paramValue)
      accessFunc (WitAttr,           myApiAttr)
      accessFunc (bool,              external)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void beChosen ();
         //
         // Sets myProblem ()->myOptComp ()->optInitMethod_ to this
         // OptStarter.

      bool isChosen ();
         //
         // Returns true, iff
         // this == myProblem ()->myOptComp ()->optInitMethod_ ().

      static const WitString & paramValue (const WitOptStarter * theOptStarter);
         //
         // Returns theOptStarter->paramValue ();

      void display ();
         //
         // Issues myMsgID_.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitOptStarter);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitOptComp * const myOptComp_;
         //
         // The OptComp that owns this OptStarter.

      const WitString paramValue_;
         //
         // String identifying this OptStarter as a stand-alone control
         // parameter value.

      const WitAttr myApiAttr_;
         //
         // The API attribute for this OptStarter.

      WitMsgID const myMsgID_;
         //
         // The Msg ID of the informational message identifying this OptStarter.
         // This Msg will be issued at the beginning of opt implosion.

      const bool external_;
         //
         // true, iff the initial solution for opt implosion is to generated
         // externally (i.e. from implosion schedules).
   };

#endif
@


1.10
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.9
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d31 2
a32 57
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitOptStarter (
WitOptComp * theOptComp,
const char * theParamValue,
WitAttr      theApiAttr,
WitMsgID     theMsgID,
bool         externalVal);
//
// paramValue     <-- theParamValue.
// myApiAttr_     <-- theApiAttr.
// myMsgID_       <-- theMsgID.
// external_      <-- externalVal.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitOptStarter ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitOptComp *,      myOptComp)
accessFunc (const WitString &, paramValue)
accessFunc (WitAttr,           myApiAttr)
accessFunc (bool,              external)

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void beChosen ();
//
// Sets myProblem ()->myOptComp ()->optInitMethod_ to this
// OptStarter.

bool isChosen ();
//
// Returns true, iff
// this == myProblem ()->myOptComp ()->optInitMethod_ ().

static const WitString & paramValue (const WitOptStarter * theOptStarter);
//
// Returns theOptStarter->paramValue ();

void display ();
//
// Issues myMsgID_.

private:
d34 88
a121 33
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitOptStarter);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitOptComp * const myOptComp_;
//
// The OptComp that owns this OptStarter.

const WitString paramValue_;
//
// String identifying this OptStarter as a stand-alone control
// parameter value.

const WitAttr myApiAttr_;
//
// The API attribute for this OptStarter.

WitMsgID const myMsgID_;
//
// The Msg ID of the informational message identifying this OptStarter.
// This Msg will be issued at the beginning of opt implosion.

const bool external_;
//
// true, iff the initial solution for opt implosion is to generated
// externally (i.e. from implosion schedules).
};
@


1.8
log
@Removing objective #2.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d31 57
a87 2
   {
   public:
d89 33
a121 88
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOptStarter (
            WitOptComp * theOptComp,
            const char * theParamValue,
            WitAttr      theApiAttr,
            WitMsgID     theMsgID,
            bool         externalVal);
         //
         // paramValue     <-- theParamValue.
         // myApiAttr_     <-- theApiAttr.
         // myMsgID_       <-- theMsgID.
         // external_      <-- externalVal.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOptStarter ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitOptComp *,      myOptComp)
      accessFunc (const WitString &, paramValue)
      accessFunc (WitAttr,           myApiAttr)
      accessFunc (bool,              external)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void beChosen ();
         //
         // Sets myProblem ()->myOptComp ()->optInitMethod_ to this
         // OptStarter.

      bool isChosen ();
         //
         // Returns true, iff
         // this == myProblem ()->myOptComp ()->optInitMethod_ ().

      static const WitString & paramValue (const WitOptStarter * theOptStarter);
         //
         // Returns theOptStarter->paramValue ();

      void display ();
         //
         // Issues myMsgID_.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitOptStarter);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitOptComp * const myOptComp_;
         //
         // The OptComp that owns this OptStarter.

      const WitString paramValue_;
         //
         // String identifying this OptStarter as a stand-alone control
         // parameter value.

      const WitAttr myApiAttr_;
         //
         // The API attribute for this OptStarter.

      WitMsgID const myMsgID_;
         //
         // The Msg ID of the informational message identifying this OptStarter.
         // This Msg will be issued at the beginning of opt implosion.

      const bool external_;
         //
         // true, iff the initial solution for opt implosion is to generated
         // externally (i.e. from implosion schedules).
   };
@


1.7
log
@Updated the copyright date on all source files.
@
text
@d27 1
a27 1
// Implemented in ObjFunc.C.
@


1.6
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.5
log
@Modified the behavior of setting optInitMethod:
   Setting it to "accelerated" is now a severe error.
   Setting it takes WIT out of an accelerated state.
@
text
@d74 1
a74 1
      bool isChosen () const;
d83 1
a83 1
      void display () const;
@


1.4
log
@Continued implementation of PIP.
@
text
@a86 5
      bool accConflict () const;
         //
         // Returns true, iff this OptStarter needs accelerated mode, which is
         // not currently in effect.

@


1.3
log
@Internal changes.
@
text
@d30 1
a30 1
class WitOptStarter: public WitUtil
@


1.2
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d43 1
a43 1
            WitBoolean   externalVal);
d63 1
a63 1
      accessFunc (WitBoolean,        external)
d74 1
a74 1
      WitBoolean isChosen () const;
d76 1
a76 1
         // Returns TRUE, iff
d87 1
a87 1
      WitBoolean accConflict () const;
d89 1
a89 1
         // Returns TRUE, iff this OptStarter needs accelerated mode, which is
d122 1
a122 1
      const WitBoolean external_;
d124 1
a124 1
         // TRUE, iff the initial solution for opt implosion is to generated
@


1.1
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d27 1
a27 1
// Implemented in OptImp.C.
@

