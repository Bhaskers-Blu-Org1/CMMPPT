head	1.73;
access;
symbols
	sce_5_01_20080919:1.61
	latest_sce_4_20_20060523:1.61.0.2
	sce_4_20_20060523:1.61
	latest_sce4_20_OSL:1.60.0.2
	sce_4_20_OSL:1.60
	sce_410_withVa:1.60
	sce_4_05_20040511:1.50
	sce_4_00_20040201:1.50
	nextGenBranch:1.50.0.2
	nextGenRoot:1.50
	sce_3_30_20030627:1.50
	EndRw-branch:1.44.0.4
	Root-of-EndRw:1.44
	rwToStl:1.44.0.2
	latest_sce_3_10_20010924:1.42.0.2
	sce_3_10_20010924:1.42
	latest_sce_3_00_20010601:1.29.0.2
	sce_3_00_20010601:1.29
	latest_sce_2_31_20010308:1.15.0.2
	sce_2_31_20010308:1.15
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.73
date	2011.09.28.23.49.30;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2011.09.24.00.27.52;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2011.08.30.20.17.37;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2010.09.28.19.25.15;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2010.07.30.20.20.13;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2010.07.27.22.25.17;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2010.07.27.22.15.44;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2010.07.27.20.57.56;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2010.07.26.17.48.44;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2010.07.21.18.50.14;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2010.07.16.22.26.40;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2010.06.18.23.11.14;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2006.05.02.17.34.02;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2005.01.13.17.24.20;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2004.12.31.20.38.13;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2004.12.28.19.21.18;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2004.12.21.22.13.48;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2004.12.17.21.53.00;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2004.12.15.16.39.25;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2004.12.14.22.37.09;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2004.12.13.18.58.22;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2004.12.10.22.09.03;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2004.12.10.16.49.43;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2003.04.14.23.31.39;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2003.04.11.19.08.26;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2003.04.01.20.34.26;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2003.02.07.23.29.09;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2003.01.29.19.16.46;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2003.01.02.22.18.32;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2002.05.24.23.00.04;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2002.03.22.21.23.22;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2001.09.04.15.44.38;	author bobw;	state Exp;
branches;
next	1.41;

1.41
date	2001.08.30.20.29.23;	author bobw;	state Exp;
branches;
next	1.40;

1.40
date	2001.08.24.22.03.20;	author bobw;	state Exp;
branches;
next	1.39;

1.39
date	2001.08.23.21.13.53;	author bobw;	state Exp;
branches;
next	1.38;

1.38
date	2001.08.21.17.31.45;	author bobw;	state Exp;
branches;
next	1.37;

1.37
date	2001.07.25.16.08.16;	author bobw;	state Exp;
branches;
next	1.36;

1.36
date	2001.07.18.21.44.44;	author bobw;	state Exp;
branches;
next	1.35;

1.35
date	2001.07.12.17.57.01;	author bobw;	state Exp;
branches;
next	1.34;

1.34
date	2001.06.21.18.24.31;	author bobw;	state Exp;
branches;
next	1.33;

1.33
date	2001.06.15.20.53.36;	author bobw;	state Exp;
branches;
next	1.32;

1.32
date	2001.06.13.15.02.50;	author bobw;	state Exp;
branches;
next	1.31;

1.31
date	2001.06.11.19.29.11;	author bobw;	state Exp;
branches;
next	1.30;

1.30
date	2001.06.01.19.23.33;	author bobw;	state Exp;
branches;
next	1.29;

1.29
date	2001.05.30.21.16.49;	author bobw;	state Exp;
branches;
next	1.28;

1.28
date	2001.05.29.22.11.26;	author bobw;	state Exp;
branches;
next	1.27;

1.27
date	2001.05.25.22.59.13;	author bobw;	state Exp;
branches;
next	1.26;

1.26
date	2001.05.25.14.53.25;	author bobw;	state Exp;
branches;
next	1.25;

1.25
date	2001.05.17.15.11.15;	author bobw;	state Exp;
branches;
next	1.24;

1.24
date	2001.05.10.22.31.12;	author bobw;	state Exp;
branches;
next	1.23;

1.23
date	2001.05.10.17.58.18;	author bobw;	state Exp;
branches;
next	1.22;

1.22
date	2001.05.08.21.35.44;	author bobw;	state Exp;
branches;
next	1.21;

1.21
date	2001.05.03.15.28.38;	author bobw;	state Exp;
branches;
next	1.20;

1.20
date	2001.04.30.21.29.41;	author bobw;	state Exp;
branches;
next	1.19;

1.19
date	2001.04.03.19.23.04;	author bobw;	state Exp;
branches;
next	1.18;

1.18
date	2001.03.21.21.55.46;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2001.03.12.19.48.07;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.03.08.16.37.05;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.02.01.16.24.43;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.01.31.23.17.45;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.01.27.00.24.38;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.01.26.21.46.01;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.01.24.20.05.56;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.01.20.00.44.18;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.04.22.27.51;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2000.12.28.22.13.37;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.20.20.08.36;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.06.19.58.38;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.04.22.07.37;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.42;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.14.20.27.31;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.10;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.24;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.24;	author wit;	state Exp;
branches;
next	;


desc
@@


1.73
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef MeMgrH
#define MeMgrH

//------------------------------------------------------------------------------
// Header file: "MeMgr.h"
//
// Contains the declaration of class MeMgr.
//------------------------------------------------------------------------------

#include <SelMgr.h>
#include <PtrSched.h>
#include <PerSglStack.h>

//------------------------------------------------------------------------------
// Class MeMgr
//
// Responsible for owning and coordinating the objects that implement
// multi-exec.
//
// Class Hierarchy:
//
// ProbAssoc
//    SelMgr
//       MeMgr
//
// Implemented in MultiEx.C.
//------------------------------------------------------------------------------

class WitMeMgr: public WitSelMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMeMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMeMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static bool instNeededFor (WitProblem * theProblem);
         //
         // Returns TRUE, iff an MeMgr is needed for theProblem.

      void setInitDirIsAsap (bool theValue);
         //
         // Sets initDirIsAsap.

      WitPeriod selExecPer (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Returns the currently selected execution period to be used when
         // exploding through theBopEnt in period expPer.

      void print ();
         //
         // Prints the multi-exec subsystem.

      void saveExecPer (WitPeriod execPer);
         //
         // Saves the value of execPer to be retrieved later.

      void retrieveExecPer (WitPeriod & execPer);
         //
         // Sets execPer to the value saved by saveExecPer.

      void storeRecoveryPair (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Stores (theBopEnt, expPer) as a pair at which the multi-exec
         // configuration is to be restored to its initial state.

      void recoverInitState ();
         //
         // Restores the multi-exec configuration to its initial state.

      //------------------------------------------------------------------------
      // Selection Splitting functions.
      //------------------------------------------------------------------------

      virtual bool selSplitNeeded ();
         //
         // Override from class SelMgr.

      bool selIsSplit (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Returns true, iff there is a split selection for exploding
         // thru theBopEnt in expPer. Valid only in sel-split mode.

      void defineSplit (
            WitBopEntry *    theBopEnt,
            WitPeriod        expPer,
            double           expVol,
            WitPerDblStack & theSplitPairs,
            double &         unbddVol);
         //
         // Sets theSplitPairs to be the split pairs for a split explosion of
         // expVol units thru theBopEnt in expPer. Sets unbddVol to the splitVol
         // of the unbounded split explosion, if any; otherwise 0.

      void recBopEntExecPerSS (
            WitBopEntry * theBopEnt, 
            WitPeriod     execPer, 
            double        expVol);
         //
         // Records the fact expVol units were exploded thru theBopEnt in
         // execPer.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitMeDir *, myMeDirForNstn)
      accessFunc (WitMeDir *, myMeDirForAsap)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual WitAltPt *   myAltPtFor         (WitBopEntry *,
                                               WitConsEntry *,
                                               WitPeriod,
                                               WitPeriod);
      virtual bool         validForNetting    ();
      virtual bool         validForExecBounds ();
      virtual bool         validForLTBounds   ();
      virtual const char * selCaseName        ();
         //
         // Overrides from class SelMgr.

      void buildMeSitePts ();
         //
         // Builds the MeSitePts to be owned by this MeMgr.

      WitMePt * myMePtWithSel (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Returns the MePt to be used when exploding through theBopEnt in
         // period expPer, or NULL, if none exists, or it has no selection.

      WitMePt * myMePt (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Returns the MePt to be used when exploding through theBopEnt in
         // period expPer, or NULL, if none exists.

      WitMeDir * chooseMeDir (WitPart * thePart);
         //
         // Returns the MeDir appropriate for exploding thePart.

      bool findNextMeSitePt (
            WitBopEntry *   theBopEnt,
            WitPeriod &     expPer,
            WitMeSitePt * & theMeSitePt);
         //
         // Sets expPer to the next next explosion period after the current
         // value of expPer for which theBopEnt has a MeSitePt, if any, and in
         // that case, sets theMeSitePt to that MeSitePt. 
         // Returns true, iff another MeSitePt was found.

      inline bool hasMeSitePts (WitBopEntry * theBopEnt);
         //
         // Returns true, iff this MeMgr owns any MeSitePts for theBopEnt.

      noCopyCtorAssign (WitMeMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMeDir * myMeDirForNstn_;
      WitMeDir * myMeDirForAsap_;
         //
         // The MeDirs owned by this MeMgr for NSTN and ASAP multi-exec.

      WitPtrSched <WitBopEntry, WitMeSitePt> myMeSitePts_;
         //
         // myMeSitePts_.myPtrAt (theBopEnt, expPer) is the MeSitePt
         // owned by this MeMgr corresponding to theBopEnt and expPer.

      bool initDirIsAsap_;
         //
         // true, iff the intial multi-exec direction is ASAP.

      WitPeriod savedExecPer_;
         //
         // The execPer saved and retrieved by saveExecPer () and
         // retrieveExecPer ().

      WitPerSglStack <WitBopEntry> myRecoveryPairs_;
         //
         // In selection recovery mode, myRecoveryPairs_ is the set of all pairs
         // (BopEntry, Period) at which the multi-exec configuration is to be
         // restored to its initial state.
   };

#endif
@


1.72
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.71
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d39 2
a40 35
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitMeMgr (WitSelector *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitMeMgr ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

static bool instNeededFor (WitProblem * theProblem);
//
// Returns TRUE, iff an MeMgr is needed for theProblem.

void setInitDirIsAsap (bool theValue);
//
// Sets initDirIsAsap.

WitPeriod selExecPer (WitBopEntry * theBopEnt, WitPeriod expPer);
//
// Returns the currently selected execution period to be used when
// exploding through theBopEnt in period expPer.

void print ();
//
// Prints the multi-exec subsystem.
d42 169
a210 136
void saveExecPer (WitPeriod execPer);
//
// Saves the value of execPer to be retrieved later.

void retrieveExecPer (WitPeriod & execPer);
//
// Sets execPer to the value saved by saveExecPer.

void storeRecoveryPair (WitBopEntry * theBopEnt, WitPeriod expPer);
//
// Stores (theBopEnt, expPer) as a pair at which the multi-exec
// configuration is to be restored to its initial state.

void recoverInitState ();
//
// Restores the multi-exec configuration to its initial state.

//------------------------------------------------------------------------
// Selection Splitting functions.
//------------------------------------------------------------------------

virtual bool selSplitNeeded ();
//
// Override from class SelMgr.

bool selIsSplit (WitBopEntry * theBopEnt, WitPeriod expPer);
//
// Returns true, iff there is a split selection for exploding
// thru theBopEnt in expPer. Valid only in sel-split mode.

void defineSplit (
WitBopEntry *    theBopEnt,
WitPeriod        expPer,
double           expVol,
WitPerDblStack & theSplitPairs,
double &         unbddVol);
//
// Sets theSplitPairs to be the split pairs for a split explosion of
// expVol units thru theBopEnt in expPer. Sets unbddVol to the splitVol
// of the unbounded split explosion, if any; otherwise 0.

void recBopEntExecPerSS (
WitBopEntry * theBopEnt,
WitPeriod     execPer,
double        expVol);
//
// Records the fact expVol units were exploded thru theBopEnt in
// execPer.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitMeDir *, myMeDirForNstn)
accessFunc (WitMeDir *, myMeDirForAsap)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

virtual WitAltPt *   myAltPtFor         (WitBopEntry *,
WitConsEntry *,
WitPeriod,
WitPeriod);
virtual bool         validForNetting    ();
virtual bool         validForExecBounds ();
virtual bool         validForLTBounds   ();
virtual const char * selCaseName        ();
//
// Overrides from class SelMgr.

void buildMeSitePts ();
//
// Builds the MeSitePts to be owned by this MeMgr.

WitMePt * myMePtWithSel (WitBopEntry * theBopEnt, WitPeriod expPer);
//
// Returns the MePt to be used when exploding through theBopEnt in
// period expPer, or NULL, if none exists, or it has no selection.

WitMePt * myMePt (WitBopEntry * theBopEnt, WitPeriod expPer);
//
// Returns the MePt to be used when exploding through theBopEnt in
// period expPer, or NULL, if none exists.

WitMeDir * chooseMeDir (WitPart * thePart);
//
// Returns the MeDir appropriate for exploding thePart.

bool findNextMeSitePt (
WitBopEntry *   theBopEnt,
WitPeriod &     expPer,
WitMeSitePt * & theMeSitePt);
//
// Sets expPer to the next next explosion period after the current
// value of expPer for which theBopEnt has a MeSitePt, if any, and in
// that case, sets theMeSitePt to that MeSitePt.
// Returns true, iff another MeSitePt was found.

inline bool hasMeSitePts (WitBopEntry * theBopEnt);
//
// Returns true, iff this MeMgr owns any MeSitePts for theBopEnt.

noCopyCtorAssign (WitMeMgr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitMeDir * myMeDirForNstn_;
WitMeDir * myMeDirForAsap_;
//
// The MeDirs owned by this MeMgr for NSTN and ASAP multi-exec.

WitPtrSched <WitBopEntry, WitMeSitePt> myMeSitePts_;
//
// myMeSitePts_.myPtrAt (theBopEnt, expPer) is the MeSitePt
// owned by this MeMgr corresponding to theBopEnt and expPer.

bool initDirIsAsap_;
//
// true, iff the intial multi-exec direction is ASAP.

WitPeriod savedExecPer_;
//
// The execPer saved and retrieved by saveExecPer () and
// retrieveExecPer ().

WitPerSglStack <WitBopEntry> myRecoveryPairs_;
//
// In selection recovery mode, myRecoveryPairs_ is the set of all pairs
// (BopEntry, Period) at which the multi-exec configuration is to be
// restored to its initial state.
};
@


1.70
log
@Modifiable Heuristic Allocation
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d39 35
a73 2
   {
   public:
d75 136
a210 169
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMeMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMeMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static bool instNeededFor (WitProblem * theProblem);
         //
         // Returns TRUE, iff an MeMgr is needed for theProblem.

      void setInitDirIsAsap (bool theValue);
         //
         // Sets initDirIsAsap.

      WitPeriod selExecPer (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Returns the currently selected execution period to be used when
         // exploding through theBopEnt in period expPer.

      void print ();
         //
         // Prints the multi-exec subsystem.

      void saveExecPer (WitPeriod execPer);
         //
         // Saves the value of execPer to be retrieved later.

      void retrieveExecPer (WitPeriod & execPer);
         //
         // Sets execPer to the value saved by saveExecPer.

      void storeRecoveryPair (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Stores (theBopEnt, expPer) as a pair at which the multi-exec
         // configuration is to be restored to its initial state.

      void recoverInitState ();
         //
         // Restores the multi-exec configuration to its initial state.

      //------------------------------------------------------------------------
      // Selection Splitting functions.
      //------------------------------------------------------------------------

      virtual bool selSplitNeeded ();
         //
         // Override from class SelMgr.

      bool selIsSplit (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Returns true, iff there is a split selection for exploding
         // thru theBopEnt in expPer. Valid only in sel-split mode.

      void defineSplit (
            WitBopEntry *    theBopEnt,
            WitPeriod        expPer,
            double           expVol,
            WitPerDblStack & theSplitPairs,
            double &         unbddVol);
         //
         // Sets theSplitPairs to be the split pairs for a split explosion of
         // expVol units thru theBopEnt in expPer. Sets unbddVol to the splitVol
         // of the unbounded split explosion, if any; otherwise 0.

      void recBopEntExecPerSS (
            WitBopEntry * theBopEnt, 
            WitPeriod     execPer, 
            double        expVol);
         //
         // Records the fact expVol units were exploded thru theBopEnt in
         // execPer.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitMeDir *, myMeDirForNstn)
      accessFunc (WitMeDir *, myMeDirForAsap)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual WitAltPt *   myAltPtFor         (WitBopEntry *,
                                               WitConsEntry *,
                                               WitPeriod,
                                               WitPeriod);
      virtual bool         validForNetting    ();
      virtual bool         validForExecBounds ();
      virtual bool         validForLTBounds   ();
      virtual const char * selCaseName        ();
         //
         // Overrides from class SelMgr.

      void buildMeSitePts ();
         //
         // Builds the MeSitePts to be owned by this MeMgr.

      WitMePt * myMePtWithSel (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Returns the MePt to be used when exploding through theBopEnt in
         // period expPer, or NULL, if none exists, or it has no selection.

      WitMePt * myMePt (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Returns the MePt to be used when exploding through theBopEnt in
         // period expPer, or NULL, if none exists.

      WitMeDir * chooseMeDir (WitPart * thePart);
         //
         // Returns the MeDir appropriate for exploding thePart.

      bool findNextMeSitePt (
            WitBopEntry *   theBopEnt,
            WitPeriod &     expPer,
            WitMeSitePt * & theMeSitePt);
         //
         // Sets expPer to the next next explosion period after the current
         // value of expPer for which theBopEnt has a MeSitePt, if any, and in
         // that case, sets theMeSitePt to that MeSitePt. 
         // Returns true, iff another MeSitePt was found.

      inline bool hasMeSitePts (WitBopEntry * theBopEnt);
         //
         // Returns true, iff this MeMgr owns any MeSitePts for theBopEnt.

      noCopyCtorAssign (WitMeMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMeDir * myMeDirForNstn_;
      WitMeDir * myMeDirForAsap_;
         //
         // The MeDirs owned by this MeMgr for NSTN and ASAP multi-exec.

      WitPtrSched <WitBopEntry, WitMeSitePt> myMeSitePts_;
         //
         // myMeSitePts_.myPtrAt (theBopEnt, expPer) is the MeSitePt
         // owned by this MeMgr corresponding to theBopEnt and expPer.

      bool initDirIsAsap_;
         //
         // true, iff the intial multi-exec direction is ASAP.

      WitPeriod savedExecPer_;
         //
         // The execPer saved and retrieved by saveExecPer () and
         // retrieveExecPer ().

      WitPerSglStack <WitBopEntry> myRecoveryPairs_;
         //
         // In selection recovery mode, myRecoveryPairs_ is the set of all pairs
         // (BopEntry, Period) at which the multi-exec configuration is to be
         // restored to its initial state.
   };
@


1.69
log
@Selection Recovery
@
text
@d21 1
d83 1
a83 1
      void recoverInitState (WitBopEntry * theBopEnt, WitPeriod thePer);
d85 6
a90 2
         // Restores the multi-exec selection configuration at theBopEnt and
         // thePer to its original state.
d128 2
a129 3
      accessFunc  (WitMeDir *,                               myMeDirForNstn)
      accessFunc  (WitMeDir *,                               myMeDirForAsap)
      accessFunc2 (WitRecoverySet <WitMeMgr, WitBopEntry> *, myRecoverySet)
d205 1
a205 1
      WitRecoverySet <WitMeMgr, WitBopEntry> * myRecoverySet_;
d207 3
a209 2
         // The RecoverySet for the Multi-Exec configuration.
         // NULL, if not in selection recovery mode.
@


1.68
log
@Selection Recovery
@
text
@d82 1
a82 1
      void recoverInitSel (WitBopEntry * theBopEnt, WitPeriod thePer);
d123 3
a125 3
      accessFunc  (WitMeDir *,                          myMeDirForNstn)
      accessFunc  (WitMeDir *,                          myMeDirForAsap)
      accessFunc2 (WitAltSet <WitMeMgr, WitBopEntry> *, myAltSet)
d201 1
a201 1
      WitAltSet <WitMeMgr, WitBopEntry> * myAltSet_;
d203 1
a203 2
         // In selection recovery mode, this is the AltSet for alterations to
         // the multi-exec configuration.
@


1.67
log
@Selection Recovery
@
text
@a20 2
#include <Schedule.h>
#include <ObjStack.h>
@


1.66
log
@Selection Recovery
@
text
@d125 3
a127 7
      accessFunc (WitMeDir *, myMeDirForNstn)
      accessFunc (WitMeDir *, myMeDirForAsap)

      inline WitAltSet <WitMeMgr, WitBopEntry> * myAltSet ()
         {
         return myAltSet_;
         }
@


1.65
log
@Selection Recovery.
@
text
@d84 1
a84 1
      void recordAlteration (WitMeSitePt * theMeSitePt);
d86 2
a87 9
         // Records the fact that the multi-exec configuration is being altered
         // at theMeSitePt.
         // Valid only in selection recovery mode:

      void recoverSelections ();
         //
         // Restores the multi-exec selection configuration to its original
         // state, recovering all discarded selection candidates.
         // Valid only in selection recovery mode.
d128 5
d207 1
a207 1
      WitObjStack <WitMeSitePt> alteredMeSitePts_;
d209 3
a211 10
         // Valid only in selection recovery mode.
         // The set of MeSitePts at which the multi-exec configuration was
         // altered in the current incHeurAlloc.

      WitSchedule <WitBopEntry, bool> meAlteredAt_;
         //
         // Valid only in selection recovery mode.
         // meAlteredAt_ (theBopEnt)[execPer] is true, iff the multi-exec
         // configuration was altered in the current incHeurAlloc at the
         // MeSitePt whose BopEntry and firstExecPer are theBopEnt and execPer.
@


1.64
log
@Selection Recovery.
@
text
@d90 6
a148 1
      virtual void         recoverSelections  ();
@


1.63
log
@Selection Recovery
@
text
@d21 2
d84 6
d203 13
@


1.62
log
@Lead Time Bounds
@
text
@d135 1
@


1.61
log
@Updated the copyright date on all source files.
@
text
@d133 1
@


1.60
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.59
log
@Low-Pri Prop-Rt.
@
text
@d74 8
d188 5
@


1.58
log
@Low-Pri Prop-Rt.
@
text
@d92 1
a92 1
            bool &           lastUnbdd);
d95 2
a96 2
         // expVol units thru theBopEnt in expPer. Sets lastUnbdd to be true
         // iff the last pair is for an unbounded split explosion.
@


1.57
log
@Low-Pri Prop-Rt.
@
text
@d119 1
a119 1
      virtual WitSelAlt *  mySelAltFor        (WitBopEntry *,
@


1.56
log
@Low-Pri Prop-Rt.
@
text
@d119 1
a119 1
      virtual WitSelPt *   mySelPtForAlt      (WitBopEntry *,
@


1.55
log
@Low-Pri Prop-Rt.
@
text
@a125 1
      virtual WitSelCand * newSelCand         ();
@


1.54
log
@Low-Pri Prop-Rt.
@
text
@d130 1
a130 1
      void buildMeCoordPts ();
d132 1
a132 1
         // Builds the MeCoordPts to be owned by this MeMgr.
d148 4
a151 4
      bool findNextMeCoordPt (
            WitBopEntry *    theBopEnt,
            WitPeriod &      expPer,
            WitMeCoordPt * & theMeCoordPt);
d154 3
a156 3
         // value of expPer for which theBopEnt has a MeCoordPt, if any, and in
         // that case, sets theMeCoordPt to that MeCoordPt. 
         // Returns true, iff another MeCoordPt was found.
d158 1
a158 1
      inline bool hasMeCoordPts (WitBopEntry * theBopEnt);
d160 1
a160 1
         // Returns true, iff this MeMgr owns any MeCoordPts for theBopEnt.
d173 1
a173 1
      WitPtrSched <WitBopEntry, WitMeCoordPt> myMeCoordPts_;
d175 1
a175 1
         // myMeCoordPts_.myPtrAt (theBopEnt, expPer) is the MeCoordPt
@


1.53
log
@
Low-Pri Prop-Rt.
@
text
@d110 2
a111 3
      accessFunc (const WitPtrTVec <WitMeCand> &, myMeCandFor)
      accessFunc (WitMeDir *,                     myMeDirForNstn)
      accessFunc (WitMeDir *,                     myMeDirForAsap)
d126 1
a167 5
      WitPtrTVec <WitMeCand> myMeCandFor_;
         //
         // myMeCandFor_[execPer] is the MeCand owned by this MeMgr whose
         // execution period is execPer.

@


1.52
log
@Low-Pri Prop-Rt.
@
text
@a19 1
#include <ObjStack.h>
d110 3
a112 2
      accessFunc (WitMeDir *, myMeDirForNstn)
      accessFunc (WitMeDir *, myMeDirForAsap)
d168 1
a168 1
      WitObjStack <WitMeCand> myMeCands_;
d170 2
a171 1
         // The MeCands owned by this MeMgr, in order of increasing execPer.
@


1.51
log
@Low-Pri Prop-Rt.
@
text
@d34 2
@


1.50
log
@Continued implementation of proportionate routing.
@
text
@a68 16
      //------------------------------------------------------------------------
      // Overrides from class SelMgr.
      //------------------------------------------------------------------------

      virtual WitSelPt *   mySelPtForAlt      (WitBopEntry *,
                                               WitConsEntry *,
                                               WitPeriod,
                                               WitPeriod);
      virtual bool         validForNetting    ();
      virtual bool         validForExecBounds ();
      virtual const char * selCaseName        ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

d118 9
a126 1
      noCopyCtorAssign (WitMeMgr);
d160 2
@


1.49
log
@Continued implementation of proportionate routing.
@
text
@d102 6
a107 4
      void startSplitExp (
            WitBopEntry * theBopEnt,
            WitPeriod     expPer,
            double        expVol);
d109 3
a111 5
         // See SelMgr.

      bool findNextSplit (WitPeriod & execPer, double & splitExpVol);
         //
         // See SelMgr.
@


1.48
log
@Continued implementation of proportionate routing.
@
text
@d97 5
a107 5

      bool selIsSplit (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Returns true, iff there is a split selection for exploding
         // thru theBopEnt in expPer. Valid only in sel-split mode.
@


1.47
log
@Continued implementation of proportionate routing.
@
text
@a96 5
      bool selIsSplit (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Returns true, iff there is a split selection for exploding
         // thru theBopEnt in expPer. Valid only in sel-split mode.

d103 5
@


1.46
log
@Continued implementation of Proportionate Routing.
@
text
@d73 1
a73 1
      virtual WitSelPt *   mySelPt            (WitBopEntry *,
@


1.45
log
@Internal changes.
@
text
@d56 4
@


1.44
log
@Continued implementation of single-source.
@
text
@d56 1
a56 1
      void setInitDirIsAsap (WitBoolean theValue);
d73 2
a74 2
      virtual WitBoolean   validForNetting    ();
      virtual WitBoolean   validForExecBounds ();
d89 1
a89 1
      virtual WitBoolean selSplitNeeded ();
d93 1
a93 1
      WitBoolean selIsSplit (WitBopEntry * theBopEnt, WitPeriod expPer);
d95 1
a95 1
         // Returns TRUE, iff there is a split selection for exploding
d105 1
a105 1
      WitBoolean findNextSplit (WitPeriod & execPer, double & splitExpVol);
d150 1
a150 1
      WitBoolean findNextMeCoordPt (
d158 1
a158 1
         // Returns TRUE, iff another MeCoordPt was found.
d160 1
a160 1
      inline WitBoolean hasMeCoordPts (WitBopEntry * theBopEnt);
d162 1
a162 1
         // Returns TRUE, iff this MeMgr owns any MeCoordPts for theBopEnt.
d182 1
a182 1
      WitBoolean initDirIsAsap_;
d184 1
a184 1
         // TRUE, iff the intial multi-exec direction is ASAP.
@


1.43
log
@Continued implementation of sel-split for pen-exec.
@
text
@d72 1
a72 2
                                               WitPeriod,
                                               WitBoolean &);
@


1.42
log
@Continuing implementation of selective stock reallocation.
@
text
@d74 1
@


1.41
log
@Refactoring for constrained stock reallocation.
@
text
@d31 3
a33 2
// SelMgr
//    MeMgr
a115 4

      virtual void postSplitCommit ();
         //
         // Override from class SelMgr.
@


1.40
log
@Refactoring for constrained stock reallocation.
@
text
@d139 1
a139 1
      WitMeSelPt * myMeSelPtWithSel (WitBopEntry * theBopEnt, WitPeriod expPer);
d141 1
a141 1
         // Returns the MeSelPt to be used when exploding through theBopEnt in
d144 1
a144 1
      WitMeSelPt * myMeSelPt (WitBopEntry * theBopEnt, WitPeriod expPer);
d146 1
a146 1
         // Returns the MeSelPt to be used when exploding through theBopEnt in
@


1.39
log
@Refactoring for constrained stock reallocation.
@
text
@a20 1
#include <DblSpSch.h>
a107 8
      void adjustSplitBound (
            WitBopEntry * theBopEnt, 
            WitPeriod     execPer, 
            double &      splitBound);
         //
         // Adjusts splitBound as appropriate when performing a multi-exec split
         // explosion through theBopEnt in execPer.

a115 4
      virtual void postCommitSS ();
         //
         // Override from class SelMgr.

a166 4
      virtual void setUpDerivedSS ();
         //
         // Override from class SelMgr.

a187 12

      //------------------------------------------------------------------------
      // Selection splitting data.
      //------------------------------------------------------------------------

      WitDblSpSched (WitBopEntry) totExpVol_;
         //
         // Valid only in sel-split mode.
         // totExpVol_ (theBopEnt, execPer) is the total expVol that has been 
         // exploded thru theBopEnt in execPer during the current commit. 
         // totExpVol_ (theBopEnt) is only valid if hasMeCoordPts (theBopEnt) is
         // TRUE.
@


1.38
log
@Refactoring for constrained stock reallocation.
@
text
@a21 1
#include <FixedPer.h>
d66 1
a66 1
      // Overrides from class SelPt.
a75 1
      virtual void         prtSelCandID       (WitTlObj *);
@


1.37
log
@Initial implementation of pegging.
@
text
@d20 1
a20 1
#include <PtrTVec.h>
d178 3
a180 4
      inline WitBoolean hasMeCoordPts (WitBopEntry * theBopEnt)
         {
         return myMeCoordPts_.myPtrTVecAt (theBopEnt).isAllocated ();
         }
d190 1
a190 1
      WitPtrTVec <WitMeCand> myMeCand_;
d192 1
a192 2
         // myMeCand_[execPer] is the MeCand owned by this MeMgr that represents
         // execPer.
d202 1
a202 1
         // corresponding to theBopEnt and expPer owned by this MeMgr.
@


1.36
log
@Implemented class template PtrSched <*, *>.
@
text
@d180 1
a180 1
         return myMeCoordPtSched_.vecAt (theBopEnt).isAllocated ();
d201 1
a201 1
      WitPtrSched <WitBopEntry, WitMeCoordPt> myMeCoordPtSched_;
d203 1
a203 1
         // myMeCoordPtSched_.ptrAt (theBopEnt, expPer) is the MeCoordPt
@


1.35
log
@Templatized consumption multi-route.
@
text
@d23 1
a177 10
      inline WitMeCoordPt * & myMeCoordPt (
            WitBopEntry * theBopEnt,
            WitPeriod     expPer)
         {
         return (WitMeCoordPt * &) myMeCoordPtTl_ (theBopEnt, expPer);
         }
         //
         // myMeCoordPt (theBopEnt, expPer) is the MeCoordPt corresponding to
         // theBopEnt and expPer owned by this MeMgr.

d180 1
a180 1
         return myMeCoordPtTl_ (theBopEnt).isAllocated ();
d201 1
a201 1
      WitSchedule (WitBopEntry, WitTlObjPtr) myMeCoordPtTl_;
d203 2
a204 1
         // Data for myMeCoordPt (WitBopEntry *, Period).
@


1.34
log
@More templates.
@
text
@d50 1
a50 1
      ~WitMeMgr ();
@


1.33
log
@Removed indexes from production multi-route.
Other refactoring.
@
text
@d200 1
a200 1
      WitPtrTVec (WitMeCand) myMeCand_;
@


1.32
log
@Refactoring of Multi-Exec: Removed alt-indices.
@
text
@d200 5
@


1.31
log
@Refactoring.
@
text
@d149 1
a149 4
      void buildMeCoordPts (
            WitOperation *                       theOpn,
            WitTVec (int) &                      nExecPers,
            WitPtrTVec (WitVector (WitPeriod)) & expExecPer);
d151 1
a151 16
         // Builds the MeCoordPts associated with theOpn.

      WitBoolean findExecPers (
            WitBopEntry *                        theBopEnt,
            WitTVec (int) &                      nExecPers,
            WitPtrTVec (WitVector (WitPeriod)) & expExecPer);
         //
         // (Called by the ctor.)
         // On return:
         //    For expPer = 0, ..., nPeriods - 1:
         //       expExecPer (expPer)[theIdx] 
         //          for theIdx = 0, ..., nExecPers[expPer] - 1,
         //       is the set of all execution periods which are to be considered
         //       for explosions through theBopEnt in explosion period expPer.
         // Returns TRUE, iff more than one execution period was found for at
         // least one explosion period.
@


1.30
log
@Continued development of selection splitting for multi=exec.
@
text
@d60 1
a60 1
      WitPeriod selExecPeriod (WitBopEntry * theBopEnt, WitPeriod expPer);
@


1.29
log
@Refactoring for sel-split for multi-exec.
@
text
@d65 3
a67 8
      virtual WitSelPt * mySelPt (
            WitBopEntry *,
            WitConsEntry *,
            WitPeriod,
            WitPeriod,
            WitBoolean &);
         //
         // Override from class SelMgr.
d69 12
a80 3
      virtual WitBoolean validForExecBounds ();
         //
         // Override from class SelMgr.
@


1.28
log
@Added meSelSplitOK development parameter.
Added meSelSplit attribute.
Refactoring for sel-split for multi-exec.
@
text
@a205 4
      //------------------------------------------------------------------------
      // Selection Splitting functions.
      //------------------------------------------------------------------------

a208 10

      inline static WitPeriod asaPer (WitTlObj * theTlObj)
         {
         return ((WitFixedPer *) theTlObj)->myPeriod ();
         }

      inline WitTlObj * asaTlObj (WitPeriod thePer)
         {
         return (WitTlObj *) myProblem ()->myFixedPer ()[thePer];
         }
@


1.27
log
@Various refactorings for sel-split for multi-exec.
@
text
@d106 8
d206 4
a213 4
      virtual void adjustSplitBound (WitTlObj *, double &);
         //
         // Override from class SelMgr.

a251 5

      WitBopEntry * splitBopEntry_;
         //
         // The BopEntry for the currently active split explosion.
         // Undefined, if split explosion is not currently active.
@


1.26
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@a205 4
      virtual void prtSplitExp (WitTlObj *);
         //
         // Override from class SelMgr.

@


1.25
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@d164 5
d202 1
a202 1
      virtual void adjustSplitBound (WitTl *, double &);
d206 1
a206 1
      virtual void prtSelSplit (WitTl *);
d210 1
a210 1
      inline static WitPeriod asaPer (WitTl * theTlObj)
d215 1
a215 1
      inline WitTl * asaTlObj (WitPeriod thePer)
d217 1
a217 1
         return (WitTl *) myProblem ()->myFixedPer ()[thePer];
d229 1
a229 1
      WitSchedule (WitBopEntry, WitTlPtr) myMeCoordPtTl_;
a247 9

      WitStackSpSched (WitBopEntry) splitSched_;
         //
         // Valid only in sel-split mode.
         // splitSched_ (theBopEntry, expPer) is the ordered list of
         // (execPerPtr, splitBound) pairs to be used when exploding through
         // theBopEntry in expPer. 
         // splitSched_ (theBopEntry, expPer) is only valid if
         // hasMeCoordPts (theBopEnt) is TRUE.
@


1.24
log
@Renamed AltPt classes to SelPt classes.
@
text
@d86 4
a158 4
      void setupSelSplit ();
         //
         // Sets up data for selection splitting.

d193 4
d244 1
a244 1
      WitStackSpSched (WitBopEntry, WitTl) splitSched_;
@


1.23
log
@Removed class MePrinter.
@
text
@d65 1
a65 1
      virtual WitAltPt * myAltPt (
d159 1
a159 1
      WitMeAltPt * myMeAltPtWithSel (WitBopEntry * theBopEnt, WitPeriod expPer);
d161 1
a161 1
         // Returns the MeAltPt to be used when exploding through theBopEnt in
@


1.22
log
@Removed class MeAltPt.
Changed name of class MeSelPt to MeAltPt.
Implemented de-selection of colliding MeAltPts.
@
text
@d78 1
a78 4
      WitBoolean findNextMeCoordPt (
            WitBopEntry *    theBopEnt,
            WitPeriod &      expPer,
            WitMeCoordPt * & theMeCoordPt);
d80 1
a80 4
         // Sets expPer to the next next explosion period after the current
         // value of expPer for which theBopEnt has a MeCoordPt, if any, and in
         // that case, sets theMeCoordPt to that MeCoordPt. 
         // Returns TRUE, iff another MeCoordPt was found.
d122 2
a123 19
      inline WitBoolean hasMeCoordPts (WitBopEntry * theBopEnt)
         {
         return myMeCoordPtTl_ (theBopEnt).isAllocated ();
         }

      inline WitMeCoordPt * myMeCoordPt (
            WitBopEntry * theBopEnt,
            WitPeriod     expPer)
         {
         return myMeCoordPtForUpdate (theBopEnt, expPer);
         }
         //
         // myMeCoordPt (theBopEnt, expPer) is the MeCoordPt corresponding to
         // theBopEnt and expPer owned by this MeMgr.


      accessFunc    (WitMeDir *,     myMeDirForNstn)
      accessFunc    (WitMeDir *,     myMeDirForAsap)
      accessNonNull (WitMePrinter *, myMePrinter)
d168 1
a168 1
      inline WitMeCoordPt * & myMeCoordPtForUpdate (
d170 11
a180 1
            WitPeriod        expPer)
d185 7
a191 1
         // Updateable version of myMeCoordPt (WitBopEntry *, WitPeriod).
a226 4

      WitMePrinter * myMePrinter_;
         //
         // The MePrinter owned by this MeMgr, if any, else NULL.
@


1.21
log
@Fixed a bug on multi-exec.
@
text
@a87 8
      void preReject (WitMeAltPt * theMeAltPt);
         //
         // Notes that theMeAltPt is to be rejected from furhther use.

      void finishAlteration ();
         //
         // Takes action appropriate at the end of selection alteration.

d144 3
a146 5
      accessFunc    (const WitPtrTVec (WitMeAltPt) &, curMeAltPt)
      accessFunc    (WitMeDir *,                      myMeDirForNstn)
      accessFunc    (WitMeDir *,                      myMeDirForAsap)

      accessNonNull (WitMePrinter *,                  myMePrinter)
d156 1
a156 1
      void buildMeAltCandPts (
d161 1
a161 1
         // Builds the MeAltPts and MeCoordPts associated with theOpn.
a177 11
      void buildMeAltPts (
            int                           nExecPers, 
            const WitVector (WitPeriod) & execPerByIdx);
         //
         // (Called by the ctor.)
         // Builds those MeAltPts needed for the current BopEntry in the current
         // explosion period, that have not already been built. nExecPers and
         // execPerByIdx indicate the execution periods under consideration,
         // similar to the args to findExecPers, but for a specific explosion
         // period. 

d182 1
a182 1
      WitMeSelPt * myMeSelPt (WitBopEntry * theBopEnt, WitPeriod expPer);
d184 2
a185 2
         // Returns the MeSelPt to be used when exploding through theBopEnt in
         // period expPer, or NULL, if none exists.
a226 4
      WitList (WitMeAltPt) myMeAltPts_;
         //
         // The MeAltPts owned by this MeMgr.

a229 10

      WitPtrTVec (WitMeAltPt) curMeAltPt_;
         //
         // curMeAltPt_[execPer] is the MeAltPt corresponding to execPer and
         // the Operation currently being considered by this MeMgr.
         // Valid only during the construction of this MeMgr.

      WitObjStack (WitMeAltPt) toReject_;
         //
         // A list of MeAltPts to be rejected from further use.
@


1.20
log
@Fixed uninitialized memory bugs.
Refactoring for selection splitting.
@
text
@d88 8
d203 4
a206 8
      WitMeAltPt * selMeAltPt (
            WitBopEntry *  theBopEnt, 
            WitPeriod      expPer,
            WitMeSelPt * & theMeSelPt);
         //
         // Returns the currently selected MeAltPt to be used when exploding 
         // through theBopEnt in period expPer, or NULL, if none exists.  In
         // the non-NULL case, theMeSelPt is set to the corresponding MeSelPt.
d261 4
@


1.19
log
@Continued implementation of selection splitting.
@
text
@d225 1
a225 1
      inline static WitPeriod itsPer (WitTl * theTlObj)
d230 1
a230 1
      inline WitTl * itsTlPtr (WitPeriod thePer)
@


1.18
log
@Continued implementation of selection splitting with the new design.
@
text
@d120 1
a120 1
      virtual void clearSplitSched ();
@


1.17
log
@Added the attribute ID to the error msg for calling an API function for a
   material part attribute and giving it a capacity part.
Began implementation of the new selection splitting design.
@
text
@d120 4
d144 3
a146 3
      accessFunc (const WitPtrTVec (WitMeAltPt) &, curMeAltPt)
      accessFunc (WitMeDir *,                      myMeDirForNstn)
      accessFunc (WitMeDir *,                      myMeDirForAsap)
d148 1
a148 6
      inline WitMePrinter * myMePrinter ()
         {
         witAssert (myMePrinter_ != NULL);

         return myMePrinter_;
         }
@


1.16
log
@Removed the coarse selection splitting code that's not needed for the new
design of selection splitting.
@
text
@a275 2
         // During selection alteration, its values reflect
         // the most recent successful temp commit, if any, else 0.
@


1.15
log
@Further implementation of coarse selection splitting.
@
text
@d44 1
a44 1
      WitMeMgr (WitHeurAllPerf *);
d116 1
a116 1
      virtual void postCommitSS (WitBoolean);
a118 16

      virtual void preAltAttSS ();
         //
         // Override from class SelMgr.

      virtual void postAltAttSS ();
         //
         // Override from class SelMgr.

      virtual void postPermCommitSS ();
         //
         // Override from class SelMgr.

      void splitSel (WitBopEntry * theBopEnt, WitPeriod execPer);
         //
         // Records a split selection thru theBopEnt in execPer.
@


1.14
log
@Further implementation of coarse selection splitting.
@
text
@d300 1
a300 1
         // splitSched_ (theBopEntry, expPer) is the list of
d302 1
a302 1
         // theBopEntry in expPer. The pairs are stored in reverse order.
@


1.13
log
@Further implementation of coarse selection splitting.
@
text
@d234 1
a234 1
      virtual void adjustSplitVol (WitTl *, double &);
d301 1
a301 1
         // (execPerPtr, splitVol) pairs to be used when exploding through
@


1.12
log
@Implemented coarse selection splitting for multiple exec periods.
@
text
@d22 1
d244 1
a244 1
         return * (const WitPeriod *) theTlObj;
d249 1
a249 1
         return (WitTl *) myProblem ()->samePerPtr (thePer);
@


1.11
log
@Further development of coarse selection splitting.
@
text
@d21 1
a21 1
#include <Schedule.h>
d91 24
d131 4
d207 4
d241 10
d281 28
@


1.10
log
@Implemented and used class SelMgr.
@
text
@d201 8
@


1.9
log
@Coarse selection splitting.
@
text
@d19 1
d28 5
d35 1
a35 1
class WitMeMgr: public WitProbAssoc
d43 1
a43 3
      WitMeMgr (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.
d64 12
a75 9
      WitAltPt * myAltPt (
            WitBopEntry * theBopEnt, 
            WitPeriod     expPer, 
            WitBoolean &  resFound);
         //             
         // Returns the AltPt representing the selection of an execution period
         // when exploding through theBopEnt in explosion period expPer, or
         // NULL, if there is none. On return, resFound indicates whether or not
         // a resolving alteration was found.
d86 20
@


1.8
log
@Completed a limited implementation of coarse selection splitting for BOP
entries.
@
text
@d185 1
a185 1
         // The MeAltPts owned by this MrMgr.
@


1.7
log
@Further development of coarse selection splitting.
@
text
@d55 1
a55 4
      WitPeriod selExecPeriod (
            WitBopEntry * theBopEnt, 
            WitPeriod     expPer,
            WitPeriod     fillPer);
d58 1
a58 2
         // exploding through theBopEnt in period expPer, to fill requirements
         // in fillPer.
a62 1
            WitPeriod     fillPer,
d66 3
a68 4
         // when exploding through theBopEnt in explosion period expPer, 
         // to fill requirements in fillPer, or NULL, if there is none. On
         // return, resFound indicates whether or not a resolving alteration
         // was found.
a154 1
            WitPeriod      fillPer,
d158 2
a159 3
         // through theBopEnt in period expPer, to fill requirements in fillPer,
         // or NULL, if none exists.  In the non-NULL case, theMeSelPt is set 
         // to the corresponding MeSelPt.
@


1.6
log
@Some minor changes.
@
text
@d195 1
a195 1
      WitSchedule (WitBopEntry, WitTypelessPtr) myMeCoordPtTl_;
@


1.5
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@d19 1
d126 3
a128 3
            WitOperation *                         theOpn,
            WitTVec (int) &                        nExecPers,
            WitRefVector (WitVector (WitPeriod)) & expExecPer);
d133 3
a135 3
            WitBopEntry *                          theBopEnt,
            WitTVec (int) &                        nExecPers,
            WitRefVector (WitVector (WitPeriod)) & expExecPer);
d140 1
a140 1
         //       expExecPer[expPer][theIdx] 
@


1.4
log
@Refactoring for selection splitting.
@
text
@d202 1
a202 1
         // Only valid during the construction of this MeMgr.
@


1.3
log
@Outer API: Merged all no-longer-documented functions into one section.
Outer API: Moved build-ahead by demand functions into the no-longer-documented
   section.
Simplified the rules for two-way multiple execution periods.
@
text
@a103 7
      inline WitMeAltPt * curMeAltPt (WitPeriod execPer)
         {
         return curMeAltPtForUpdate (execPer);
         }
         // curMeAltPt (execPer) is the MeAltPt corresponding to execPer and the
         // Operation currently being considered by this MeMgr.
         // Only valid during the construction of this MeMgr.
d105 3
a107 2
      accessFunc (WitMeDir *, myMeDirForNstn)
      accessFunc (WitMeDir *, myMeDirForAsap)
d122 1
a122 3
      copyCtorAndAssignment (WitMeMgr);
         //
         // Prevents unintentional copying and assignment.
a180 6
      inline WitMeAltPt * & curMeAltPtForUpdate (WitPeriod execPer)
         {
         return (WitMeAltPt * &) curMeAltPtTl_[execPer];
         }
         // Updateable version of curMeAltPt (execPer).

d198 1
a198 1
      WitTVec (WitTypelessPtr) curMeAltPtTl_;
d200 3
a202 1
         // Data for curMeAltPt (WitPeriod).
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d50 4
d112 2
a113 1
      accessFunc (WitMeDirMgr *, myMeDirMgr)
d176 4
d199 2
a200 1
      WitMeDirMgr * myMeDirMgr_;
d202 1
a202 1
         // The MeDirMgr owned by this MeMgr.
d215 4
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
