head	1.28;
access;
symbols
	sce_5_01_20080919:1.25;
locks; strict;
comment	@ * @;


1.28
date	2011.09.28.23.50.07;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.09.24.00.28.32;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.08.30.20.18.07;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.01.25.00.19.21;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.12.06.22.01.21;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.12.05.22.13.08;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.12.03.19.41.34;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.11.15.19.57.35;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.10.08.18.56.35;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.10.02.18.32.43;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.09.28.22.08.26;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.09.26.16.06.38;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.09.25.21.03.03;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.09.21.23.06.08;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.09.21.19.12.26;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.09.21.18.45.20;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.09.21.17.47.13;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.09.18.18.43.13;	author rjw;	state dead;
branches;
next	1.10;

1.10
date	2007.09.17.21.46.32;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.09.17.18.31.59;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.09.17.14.37.38;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.14.22.38.32;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.09.14.21.13.58;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.09.14.15.44.41;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.13.15.23.18;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.12.23.55.00;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.09.12.23.09.00;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.09.12.21.55.00;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ScenAttH
#define ScenAttH

//------------------------------------------------------------------------------
// Header file: "ScenAtt.h"
//
// Contains the declaration of class template ScenAtt <Owner>.
//------------------------------------------------------------------------------

#include <StochAssoc.h>
#include <PtrMap.h>

//------------------------------------------------------------------------------
// Class Template ScenAtt <Owner>
//
// "Scenario-Specific Attribute"
// Stores and manages data for the stochastic version of an attribute that
// exists in deterministic mode, but becomes Scenario-specific in stochastic
// mode.
//
// Template argument:
//    Owner: The class whose instances own the deterministic version of the
//           attribute.
//
// Class hierarchy:
//
//    ProbAssoc
//       StochAssoc
//          ScenAtt <Owner>
//------------------------------------------------------------------------------

template <typename Owner>
      class WitScenAtt: public WitStochAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitScenAtt (WitScenAttMgr * theScenAttMgr);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitScenAtt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      const WitList <Owner> & allOwners ();
         //
         // Returns the List of all Owner instances.
         // Implemented using template specialization.

      void allocateFor (Owner * theOwner);
         //
         // Allocates storage for this ScenAtt for theOwner in all Scenarios.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline WitDblFlexVec & myValueFor (
            Owner *       theOwner,
            WitScenario * theScenario)
         {
         return myValue_.myElemAt (theOwner).myElemAt (theScenario);
         }

      inline bool isAllocatedFor (Owner * theOwner)
         {
         return (myValue_ (theOwner) != NULL);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitScenAtt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitScenAttMgr * const myScenAttMgr_;
         //
         // The ScenAttMgr for this ScenAtt.

      WitPtrMap <Owner, WitPtrMap <WitScenario, WitDblFlexVec> > myValue_;
         //
         // myValue_.myElemAt (theOwner).myElemAt (theScenario) is the value of
         // the attribute stored by this ScenAtt for theOwner in theScenario.
   };

#endif
@


1.27
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.26
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d42 66
a107 66
class WitScenAtt: public WitStochAssoc
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitScenAtt (WitScenAttMgr * theScenAttMgr);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitScenAtt ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

const WitList <Owner> & allOwners ();
//
// Returns the List of all Owner instances.
// Implemented using template specialization.

void allocateFor (Owner * theOwner);
//
// Allocates storage for this ScenAtt for theOwner in all Scenarios.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

inline WitDblFlexVec & myValueFor (
Owner *       theOwner,
WitScenario * theScenario)
{
return myValue_.myElemAt (theOwner).myElemAt (theScenario);
}

inline bool isAllocatedFor (Owner * theOwner)
{
return (myValue_ (theOwner) != NULL);
}

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitScenAtt);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitScenAttMgr * const myScenAttMgr_;
//
// The ScenAttMgr for this ScenAtt.

WitPtrMap <Owner, WitPtrMap <WitScenario, WitDblFlexVec> > myValue_;
//
// myValue_.myElemAt (theOwner).myElemAt (theScenario) is the value of
// the attribute stored by this ScenAtt for theOwner in theScenario.
};
@


1.25
log
@Stochastic Implosion
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d42 66
a107 66
      class WitScenAtt: public WitStochAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitScenAtt (WitScenAttMgr * theScenAttMgr);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitScenAtt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      const WitList <Owner> & allOwners ();
         //
         // Returns the List of all Owner instances.
         // Implemented using template specialization.

      void allocateFor (Owner * theOwner);
         //
         // Allocates storage for this ScenAtt for theOwner in all Scenarios.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline WitDblFlexVec & myValueFor (
            Owner *       theOwner,
            WitScenario * theScenario)
         {
         return myValue_.myElemAt (theOwner).myElemAt (theScenario);
         }

      inline bool isAllocatedFor (Owner * theOwner)
         {
         return (myValue_ (theOwner) != NULL);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitScenAtt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitScenAttMgr * const myScenAttMgr_;
         //
         // The ScenAttMgr for this ScenAtt.

      WitPtrMap <Owner, WitPtrMap <WitScenario, WitDblFlexVec> > myValue_;
         //
         // myValue_.myElemAt (theOwner).myElemAt (theScenario) is the value of
         // the attribute stored by this ScenAtt for theOwner in theScenario.
   };
@


1.24
log
@Stochastic Implosion
@
text
@d19 1
a19 1
#include <Assoc.h>
d34 5
a38 1
// Implemented in Scenario.C
d42 1
a42 1
      class WitScenAtt: public WitProbAssoc
@


1.23
log
@Stochastic Implosion
@
text
@a62 4
      void allocate ();
         //
         // Allocates storage for this ScenAtt for all Owners in all Scenarios.

@


1.22
log
@Stochastic Implosion
@
text
@d58 5
d65 1
a65 1
         // Allocates storage for this ScenAtt.
d67 1
a67 1
      const WitList <Owner> & allOwners ();
d69 1
a69 2
         // Returns the List of all Owner instances.
         // Implemented using template specialization.
d82 5
a106 4

      bool isAllocated_;
         //
         // True, iff this ScenAtt is currently allocated.
@


1.21
log
@Stochastic Implosion
@
text
@d58 4
d98 4
@


1.20
log
@Stochastic Implosion
@
text
@d20 1
a20 1
#include <RefMap.h>
d71 1
a71 1
         return myValue_ (theOwner) (theScenario);
d90 1
a90 1
      WitRefMap <Owner, WitRefMap <WitScenario, WitDblFlexVec> > myValue_;
d92 2
a93 2
         // myValue_ (theOwner) (theScenario) is the value of the
         // attribute stored by this ScenAtt for theOwner in theScenario.
@


1.19
log
@Stochastic Implosion
@
text
@d20 1
a20 1
#include <PtrMap.h>
d31 1
a31 1
//    Owner: The class whose instances own the deterinistic version of the
d33 2
d46 1
a46 1
      WitScenAtt (WitScenMgr * theScenMgr);
d67 3
a69 1
      inline WitDblFlexVec & myValueFor (Owner * theOwner)
d71 1
a71 1
         return * myValue_ (theOwner);
d86 1
a86 1
      WitScenMgr * const myScenMgr_;
d88 1
a88 1
         // The ScenMgr for this ScenAtt.
d90 1
a90 1
      WitPtrMap <Owner, WitDblFlexVec> myValue_;
d92 2
a93 2
         // * myValue_ (theOwner) is the value of the attribute stored by this
         // ScenAtt for theOwner.
@


1.18
log
@Stochastic Implosion
@
text
@d20 1
a20 1
#include <Schedule.h>
d65 1
a65 1
      inline WitTVec <double> & myValueFor (Owner * theOwner)
d67 1
a67 1
         return myValue_ (theOwner);
d86 1
a86 1
      WitSchedule <Owner, double> myValue_;
d88 2
a89 2
         // myValue_ (theOwner) [thePer] is the value of the attribute stored by
         // this ScenAtt for theOwner in thePer.
@


1.17
log
@Stochastic Implosion
@
text
@d44 1
a44 3
      WitScenAtt (
         WitScenario *  theScenario,
         void (Owner::* theStoreFunc) (const WitTVec <double> &));
a55 7
      void uploadData ();
         //
         // Uploads the value of the represented attribute to each of the owners
         // from this ScenAtt.
         // Valid only when the stochastic implosion subsystem is uploading
         // data.

a89 8

      void (Owner::* const myStoreFunc_) (const WitTVec <double> &);
         //
         // The member function of the Owner class that sets the value of the
         // Owner's version of the attribute represented by this ScenAtt to the
         // value of the argument.
         // The function is expected to be valid only when the stochastic
         // implosion subsystem is uploading data.
@


1.16
log
@Stochastic Implosion
@
text
@d44 3
a46 1
      WitScenAtt (WitScenario *);
d58 1
a58 1
      void allocate ();
d60 2
a61 15
         // Allocates the attribute vectors of this ScenAtt.

      void clear ();
         //
         // Deallocates the attribute vectors of this ScenAtt.

      void downloadData (const WitDblFlexVec & (Owner::* theAccFunc) () const);
         //
         // Downloads (via theAccFunc) the attribute value from each of the
         // owners into this ScenAtt.

      void uploadData (void (Owner::* theStoreFunc) (const WitTVec <double> &));
         //
         // Uploads (via theStoreFunc) the value of the represented attribute to
         // each of the owners from this ScenAtt.
d65 1
a65 1
      void copyDataFrom (WitScenAtt * thatScenAtt);
d67 2
a68 15
         // Copies the data of thatScenAtt into this ScenAtt.
         // It is assumed that theScenAtt and this ScenAtt belong to
         // WitRuns whose Component set and # Periods match.

      void checkValsInStage0 (
            WitScenAtt * thatScenAtt,
            const char * theAttName);
         //
         // Verifies that the attribute values of all stage 0 Owners match
         // between this ScenAtt and thatScenAtt.
         // Uses theAttName as the attribute name.

      void storeValueFor (Owner * theOwner, WitPeriod thePer, double theValue);
         //
         // Sets the value of the attribute for theOwner in thePer to theValue.
d74 1
a74 1
      inline const WitTVec <double> & myValueFor (Owner * theOwner)
a84 11
      const WitList <Owner> & allOwners ();
         //
         // Returns the List of all Owner instances.
         // Implemented using template specialization.

      void issueMisMatchOwnerMsg (Owner * theOwner);
         //
         // Issues a msg identifying theOwner for a stage 0 attribute mismatch
         // situation.
         // Implemented using template specialization.

d91 1
a91 1
      WitScenario * const myScenario_;
d93 1
a93 1
         // The Scenario for this ScenAtt.
d99 8
@


1.15
log
@Stochastic Implosion
@
text
@d16 1
a16 1
// Contains the declaration of the following class template ScenAtt <Owner>.
d20 1
a20 2
#include <RefMap.h>
#include <List.h>
a32 2
//
// Implemented in ScenAtt.C
d44 1
a44 1
      WitScenAtt (WitScenAttMgr *);
d62 1
a62 1
         // deallocates the attribute vectors of this ScenAtt.
d64 1
a64 3
      void downloadDataTo (
            WitScenario *                   theScenario,
            const WitDblFlexVec & (Owner::* theAccFunc) () const);
d67 1
a67 1
         // owners into theScenario's portion of this AbsScenInputAtt.
d69 1
a69 3
      void uploadDataFrom (
            WitScenario *  theScenario,
            void (Owner::* theStoreFunc) (const WitTVec <double> &));
d72 1
a72 2
         // each of the owners from the portion of this ScenAtt that
         // represents theScenario.
d76 1
a76 1
      void copyContentsFrom (WitScenAtt * theScenAtt);
d78 7
a84 5
         // Copies into this AbsScenInputAtt the contents of theScenAtt.
         // It is assumed that theScenAttMgr and this AbsScenInputAtt belong to
         // WitRuns whose Component set, # Scenarios, and # Periods match.

      void checkValsInStage0 (const char * theAttName);
d87 1
a87 1
         // between all Scenarios.
d90 1
a90 5
      void storeValue (
            Owner *       theOwner,
            WitScenario * theScenario,
            WitPeriod     thePer,
            double        theValue);
d92 1
a92 2
         // Sets the value of the attribute for theOwner in theScenario in
         // thePer to theValue.
d98 1
a98 3
      inline const WitTVec <double> & myValue (
            Owner *       theOwner,
            WitScenario * theScenario)
d100 1
a100 1
         return myValue_ (theOwner) (theScenario);
a113 13
      void issueStage0AttMisMatchMsg (
            const char *  theAttName,
            Owner *       theOwner,
            WitPeriod     thePer,
            WitScenario * theScenarioA,
            WitScenario * theScenarioB);
         //
         // Issues a severe error msg indicating that the value of the attribute
         // for theOwner in theScenarioA in thePer is not equal to the value of
         // the attribute for theOwner in theScenarioB in thePer, when theOwner
         // is in stage #0.
         // Implemented using template specialization.

d126 1
a126 1
      WitScenAttMgr * const myScenAttMgr_;
d128 1
a128 1
         // The ScenAttMgr for this ScenAtt.
d130 1
a130 1
      WitRefMap <Owner, WitSchedule <WitScenario, double> > myValue_;
d132 2
a133 3
         // myValue_ (theOwner) (theScenario)[thePer] is the value of the
         // attribute stored by this ScenAtt for theOwner in theScenario in
         // thePer.
@


1.14
log
@Stochastic Implosion
@
text
@a40 2
      friend class WitScenario;

d90 6
d127 19
@


1.13
log
@Stochastic Implosion
@
text
@d118 1
a118 2
      static const WitList <Owner> & allOwnersFor (
            WitScenAttMgr * theScenAttMgr);
d120 1
a120 1
         // Returns the List of all Owners for theScenAttMgr.
d129 4
a137 4

      const WitList <Owner> & allOwners_;
         //
         // The List of all instances of the Owner class in myProblem ().
@


1.12
log
@Stochastic Implosion
@
text
@a42 18
      //------------------------------------------------------------------------
      // Local typedefs.
      //------------------------------------------------------------------------

      typedef const WitDblFlexVec & (Owner::* AccFunc) () const;
         //
         // An AccFunc is a member function of the Owner class that provides
         // read-only access to the Owner's version of attribute represented by
         // this InputAttTable.

      typedef void (Owner::* StoreFunc) (const WitTVec <double> & theValue);
         //
         // A StoreFunc is a member function of the Owner class that
         // sets the value of the Owner's version of the attribute represented
         // by this ScenAtt to the value of the argument.
         // The function is expected to be valid only when the stochastic
         // implosion subsystem is uploading data.

d49 1
a49 1
      WitScenAtt (WitScenAttMgr *, StoreFunc);
d69 3
a71 1
      void downloadDataTo (WitScenario * theScenario, AccFunc theAccFunc);
d76 3
a78 1
      void uploadDataFrom (WitScenario * theScenario, StoreFunc theStoreFunc);
d86 1
a86 1
      void copyContentsFrom (WitScenAtt <Owner> * theScenAtt);
a138 8

      const StoreFunc myStoreFunc_;
         //
         // The member function of the Owner class that sets the value of the
         // Owner's version of the attribute represented by this ScenAtt to
         // the value of the argument.
         // The function is expected to be valid only when the stochastic
         // implosion subsystem is uploading data.
@


1.11
log
@Stochastic Implosion
@
text
@d44 1
a44 1
      // Local typedef.
d47 6
d55 1
a55 1
         // A StoreFunc is an member function of the Owner class that
d79 14
a92 1
      void uploadDataFromCurScen ();
d94 3
a96 3
         // Uploads the value of the represented attribute to each of the
         // owners from the portion of this ScenAtt that represents the
         // current Scenario.
d100 15
d119 1
a119 4
      accessFunc (WitScenMgr *,            myScenMgr)
      accessFunc (const WitList <Owner> &, allOwners)

      inline WitTVec <double> & myValue (
d136 1
a136 1
         // Implemented non-parametrically.
a143 4
      WitScenMgr * const myScenMgr_;
         //
         // The ScenMgr for this ScenAtt.

@


1.10
log
@Stochastic Implosion
@
text
@@


1.9
log
@Stochastic Implosion
@
text
@d82 1
a82 1
      // Access functions.
d85 1
d125 1
a125 2
         // The List of all Owners in the Problem to which this OwnerScenTmp
         // belongs.
@


1.8
log
@Stochastic Implosion
@
text
@d16 1
a16 1
// Contains the declaration of class ScenAtt.
d20 2
d24 1
a24 1
// Class ScenAtt
d28 1
a28 1
// exists in deterministic mode, but becomes in Scenario-specific stochastic
d31 3
a33 1
// Class hierarchy:
d35 1
a35 7
//    ProbAssoc
//       ScenAtt
//          ConcScenAtt     <Owner>
//             InputScenAtt <Owner>
//             SolnScenAtt  <Owner>
//
// Implemented in Scenario.C
d38 2
a39 1
class WitScenAtt: public WitProbAssoc
d41 14
d58 6
d67 1
a67 1
      virtual ~WitScenAtt ();
d73 1
a73 17
      virtual void downloadInputToCurScen ();
         //
         // If this ScenAtt is for an input attribute, this function downloads
         // the attribute value from each of the owners into the portion of
         // this ScenAtt that represents the current Scenario;
         // otherwise, this function does nothing.

      virtual void uploadInputFromCurScen ();
         //
         // If this ScenAtt is for an input attribute, this function uploads
         // the attribute value to each of the owners from the portion of
         // this ScenAtt that represents the current Scenario;
         // otherwise, this function does nothing.
         // Valid only when the stochastic implosion subsystem is uploading
         // data.

      virtual void uploadSolnFromCurScen ();
d75 3
a77 4
         // If this ScenAtt is for a solution attribute, this function uploads
         // the attribute value to each of the owners from the portion of
         // this ScenAtt that represents the current Scenario;
         // otherwise, this function does nothing.
a80 2
   protected:

d82 1
a82 1
      // Constructor functions.
d85 1
a85 5
      WitScenAtt (WitScenAttMgr *);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d87 6
a92 1
      accessFunc (WitScenMgr *, myScenMgr)
d100 6
d109 1
a109 1
      // Private member functions.
d115 19
@


1.7
log
@Stochastic Implosion
@
text
@d57 21
a77 3
         // the attribute value from each of the owners into this ScenAtt,
         // associating the value with the current Scenario;
         // otherwise this function does nothing.
@


1.6
log
@Stochastic Implosion
@
text
@d16 1
a16 6
// Contains the declaration of the following classes and templates:
//
//    ScenAtt
//    OwnedScenAtt <Owner>
//    ScenInputAtt <Owner>
//    ScenSolnAtt  <Owner>
a19 2
#include <RefMap.h>
#include <List.h>
d33 3
a35 3
//          OwnedScenAtt    <Owner>
//             ScenInputAtt <Owner>
//             ScenSolnAtt  <Owner>
a91 209
//------------------------------------------------------------------------------
// Class Template OwnedScenAtt <Owner>
//
// "Owned Scenario-Specific Attribute"
// Stores and manages data for the stochastic version of an attribute that
// exists in deterministic mode, but becomes in Scenario-specific stochastic
// mode.
//
// Template argument:
//    Owner: The class whose instances own the deterinistic version of the
//           attribute.
//
// Class hierarchy:
//
//    ProbAssoc
//       ScenAtt
//          OwnedScenAtt    <Owner>
//             ScenInputAtt <Owner>
//             ScenSolnAtt  <Owner>
//
// Implemented in Scenario.C
//------------------------------------------------------------------------------

template <typename Owner>
      class WitOwnedScenAtt: public WitScenAtt
   {
   friend class WitScenario;

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOwnedScenAtt (WitScenAttMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitOwnedScenAtt ();

      //------------------------------------------------------------------------
      // Protected access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitList <Owner> &, allOwners)

      inline WitTVec <double> & myValue (
            Owner *       theOwner,
            WitScenario * theScenario)
         {
         return myValue_ (theOwner) (theScenario);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      static const WitList <Owner> & allOwnersFor (
            WitScenAttMgr * theScenAttMgr);
         //
         // Returns the List of all Owners for theScenAttMgr.
         // Implemented non-parametrically.

      noCopyCtorAssign (WitOwnedScenAtt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRefMap <Owner, WitSchedule <WitScenario, double> > myValue_;
         //
         // myValue_ (theOwner) (theScenario)[thePer] is the value of the
         // attribute stored by this OwnedScenAtt for theOwner in theScenario in
         // thePer.

      const WitList <Owner> & allOwners_;
         //
         // The List of all Owners in the Problem to which this OwnerScenAtt
         // belongs.
   };

//------------------------------------------------------------------------------
// Class Template ScenInputAtt <Owner>
//
// "Scenario-Specific Input Attribute"
// Stores and manages data for the stochastic version of an input attribute that
// exists in deterministic mode, but becomes in Scenario-specific stochastic
// mode.
//
// Template argument:
//    Owner: The class whose instances own the deterinistic version of the
//           attribute.
//
// Class hierarchy:
//
//    ProbAssoc
//       ScenAtt
//          OwnedScenAtt    <Owner>
//             ScenInputAtt <Owner>
//
// Implemented in Scenario.C
//------------------------------------------------------------------------------

template <typename Owner>
      class WitScenInputAtt: public WitOwnedScenAtt <Owner>
   {
      //------------------------------------------------------------------------
      // Local typedef.
      //------------------------------------------------------------------------

      typedef const WitDblFlexVec & (Owner::* AccFunc) () const;
         //
         // An AccFunc is an member function of the Owner class that provides
         // read-only access to the attribute.

   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitScenInputAtt (WitScenAttMgr *, AccFunc);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitScenInputAtt ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual void downloadInputToCurScen ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void downloadInputTo (WitScenario * theScenario);
         //
         // Downloads the attribute value from each of the owners into this
         // ScenAtt, associating the value with theScenario.

      noCopyCtorAssign (WitScenInputAtt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const AccFunc myAccFunc_;
         //
         // The access function for the attribute.
   };

//------------------------------------------------------------------------------
// Class Template ScenSolnAtt <Owner>
//
// "Scenario-Specific Solution Attribute"
// Stores and manages data for the stochastic version of an input attribute that
// exists in deterministic mode, but becomes in Scenario-specific stochastic
// mode.
//
// Template argument:
//    Owner: The class whose instances own the deterinistic version of the
//           attribute.
//
// Class hierarchy:
//
//    ProbAssoc
//       ScenAtt
//          OwnedScenAtt   <Owner>
//             ScenSolnAtt <Owner>
//
// Implemented in Scenario.C
//------------------------------------------------------------------------------

template <typename Owner>
      class WitScenSolnAtt: public WitOwnedScenAtt <Owner>
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitScenSolnAtt (WitScenAttMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitScenSolnAtt ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitScenSolnAtt);
   };

@


1.5
log
@Stochastic Implosion
@
text
@d61 7
d74 7
a80 1
      WitScenAtt (WitProblem *);
d89 8
d133 1
a133 1
      WitOwnedScenAtt (WitScenAttMgr * theScenAttMgr);
d141 13
d209 9
d224 1
a224 1
      WitScenInputAtt (WitScenAttMgr * theScenAttMgr);
d232 6
d244 5
d250 8
d291 1
a291 1
      WitScenSolnAtt (WitScenAttMgr * theScenAttMgr);
@


1.4
log
@Stochastic Implosion
@
text
@d40 1
a40 1
//          OwnedScenAtt <Owner>
d94 1
a94 1
//          OwnedScenAtt <Owner>
d104 2
d166 1
a166 1
//          OwnedScenAtt <Owner>
d214 1
a214 1
//          OwnedScenAtt <Owner>
@


1.3
log
@Stochastic Implosion
@
text
@d110 1
a110 1
      WitOwnedScenAtt (const WitList <Owner> &, WitProblem *);
d124 6
d179 1
a179 1
      WitScenInputAtt (const WitList <Owner> &, WitProblem *);
d227 1
a227 1
      WitScenSolnAtt (const WitList <Owner> &, WitProblem *);
@


1.2
log
@Stochastic Implosion
@
text
@d110 1
a110 1
      WitOwnedScenAtt (WitProblem *);
a123 5
      void findAllOwners ();
         //
         // Builds the allOwners_ List.
         // This function is implemented non-parametrically.

d136 1
a136 1
      WitList <Owner> allOwners_;
d173 1
a173 1
      WitScenInputAtt (WitProblem *);
d221 1
a221 1
      WitScenSolnAtt (WitProblem *);
@


1.1
log
@Stochastic Implosion
@
text
@d25 2
d124 5
d130 15
@

