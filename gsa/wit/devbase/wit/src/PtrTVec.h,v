head	1.32;
access;
symbols
	sce_5_01_20080919:1.29
	latest_sce_4_20_20060523:1.28.0.2
	sce_4_20_20060523:1.28
	latest_sce4_20_OSL:1.27.0.2
	sce_4_20_OSL:1.27
	sce_410_withVa:1.24
	sce_4_05_20040511:1.24
	sce_4_00_20040201:1.23
	nextGenBranch:1.19.0.2
	nextGenRoot:1.19
	sce_3_30_20030627:1.19
	EndRw-branch:1.15.0.4
	Root-of-EndRw:1.15
	rwToStl:1.15.0.2
	latest_sce_3_10_20010924:1.12.0.2
	sce_3_10_20010924:1.12
	latest_sce_3_00_20010601:1.9.0.2
	sce_3_00_20010601:1.9
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5;
locks; strict;
comment	@ * @;


1.32
date	2011.09.28.23.50.01;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.09.24.00.28.25;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.08.30.20.18.03;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.11.15.17.15.35;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2006.05.02.17.34.10;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2005.11.15.21.45.26;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2005.11.15.21.27.23;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2005.09.22.14.59.51;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2004.04.14.21.16.18;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2003.12.13.00.17.51;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2003.12.11.18.37.26;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.12.09.22.44.06;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.12.01.21.05.05;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.01.22.19.32.13;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.01.15.21.01.24;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.01.13.22.22.12;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.01.02.22.18.45;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.05.08.21.58.58;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.08.19.21.56;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.03.23.16.42;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.21.17.31.46;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.21.18.24.33;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.15.20.53.37;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.25.14.53.26;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.10.22.31.14;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.08.21.35.44;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.04.26.21.25.45;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.27.00.24.39;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.11.16.35.10;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.28.22.13.38;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.20.20.08.37;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.06.19.58.41;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PtrTVecH
#define PtrTVecH

//------------------------------------------------------------------------------
// Header file: "PtrTVec.h"
//
// Contains the declaration of class template PtrTVec <Elem>.
//------------------------------------------------------------------------------

#include <TVec.h>

//------------------------------------------------------------------------------
// Class template PtrTVec <Elem>
//
// A time vector of pointers to Elem.
// This class is implemented as a typed wrapper for class TVec <void *>.
// See class TVec <void *> for comments on the member functions.
//
// All implementation is inline.
//------------------------------------------------------------------------------

template <typename Elem> 
      class WitPtrTVec
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitPtrTVec ():
            myTVec_ ()
         {
         }

      inline WitPtrTVec (WitProblem * theProblem):
            myTVec_ (theProblem, NULL)
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitPtrTVec ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void allocate (WitProblem * theProblem)
         {
         myTVec_.allocate (theProblem, NULL);
         }

      inline void clear ()
         {
         myTVec_.clear ();
         }

      inline bool isAllocated () const
         {
         return myTVec_.isAllocated ();
         }

      inline void setToNull ()
         {
         myTVec_ = static_cast <void *> (NULL);
         }

      inline void operator = (const WitPtrTVec & thePtrTVec)
         {
         myTVec_ = thePtrTVec.myTVec_;
         }

      inline Elem & operator () (int theIndex) const
         {
         witAssert ((* this)[theIndex] != NULL);

         return   * (* this)[theIndex];
         }

      inline Elem * operator [] (int theIndex) const
         {
         return reinterpret_cast <Elem *> (myTVec_[theIndex]);
         }

      inline Elem * & operator [] (int theIndex)
         {
         return reinterpret_cast <Elem * &> (myTVec_[theIndex]);
         }

      inline int length () const
         {
         return myTVec_.length ();
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtor (WitPtrTVec);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitTVec <void *> myTVec_;
         //
         // The TVec that stores the data for this PtrTVec.
   };

//------------------------------------------------------------------------------
// Global function template deleteContents.
//
// Deletes all of the objects stored by thePtrTVec and clears thePtrTVec.
//
// Note: This function template needs to be global (rather than being a class
// member or belonging to an explicit namespace) in order to compile on Windows.
//------------------------------------------------------------------------------

template <typename Elem> 
      void deleteContents (WitPtrTVec <Elem> & thePtrTVec)
   {
   WitPeriod theIdx;

   for (theIdx = 0; theIdx < thePtrTVec.length (); theIdx ++)
      delete thePtrTVec[theIdx];

   thePtrTVec.clear ();
   }

#endif
@


1.31
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.30
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d31 94
a124 94
template <typename Elem>
class WitPtrTVec
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

inline WitPtrTVec ():
myTVec_ ()
{
}

inline WitPtrTVec (WitProblem * theProblem):
myTVec_ (theProblem, NULL)
{
}

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

inline ~WitPtrTVec ()
{
}

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

inline void allocate (WitProblem * theProblem)
{
myTVec_.allocate (theProblem, NULL);
}

inline void clear ()
{
myTVec_.clear ();
}

inline bool isAllocated () const
{
return myTVec_.isAllocated ();
}

inline void setToNull ()
{
myTVec_ = static_cast <void *> (NULL);
}

inline void operator = (const WitPtrTVec & thePtrTVec)
{
myTVec_ = thePtrTVec.myTVec_;
}

inline Elem & operator () (int theIndex) const
{
witAssert ((* this)[theIndex] != NULL);

return   * (* this)[theIndex];
}

inline Elem * operator [] (int theIndex) const
{
return reinterpret_cast <Elem *> (myTVec_[theIndex]);
}

inline Elem * & operator [] (int theIndex)
{
return reinterpret_cast <Elem * &> (myTVec_[theIndex]);
}

inline int length () const
{
return myTVec_.length ();
}

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtor (WitPtrTVec);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitTVec <void *> myTVec_;
//
// The TVec that stores the data for this PtrTVec.
};
d135 4
a138 4
template <typename Elem>
void deleteContents (WitPtrTVec <Elem> & thePtrTVec)
{
WitPeriod theIdx;
d140 2
a141 2
for (theIdx = 0; theIdx < thePtrTVec.length (); theIdx ++)
delete thePtrTVec[theIdx];
d143 2
a144 2
thePtrTVec.clear ();
}
@


1.29
log
@Stochastic Implosion
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d31 94
a124 94
template <typename Elem> 
      class WitPtrTVec
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitPtrTVec ():
            myTVec_ ()
         {
         }

      inline WitPtrTVec (WitProblem * theProblem):
            myTVec_ (theProblem, NULL)
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitPtrTVec ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void allocate (WitProblem * theProblem)
         {
         myTVec_.allocate (theProblem, NULL);
         }

      inline void clear ()
         {
         myTVec_.clear ();
         }

      inline bool isAllocated () const
         {
         return myTVec_.isAllocated ();
         }

      inline void setToNull ()
         {
         myTVec_ = static_cast <void *> (NULL);
         }

      inline void operator = (const WitPtrTVec & thePtrTVec)
         {
         myTVec_ = thePtrTVec.myTVec_;
         }

      inline Elem & operator () (int theIndex) const
         {
         witAssert ((* this)[theIndex] != NULL);

         return   * (* this)[theIndex];
         }

      inline Elem * operator [] (int theIndex) const
         {
         return reinterpret_cast <Elem *> (myTVec_[theIndex]);
         }

      inline Elem * & operator [] (int theIndex)
         {
         return reinterpret_cast <Elem * &> (myTVec_[theIndex]);
         }

      inline int length () const
         {
         return myTVec_.length ();
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtor (WitPtrTVec);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitTVec <void *> myTVec_;
         //
         // The TVec that stores the data for this PtrTVec.
   };
d135 4
a138 4
template <typename Elem> 
      void deleteContents (WitPtrTVec <Elem> & thePtrTVec)
   {
   WitPeriod theIdx;
d140 2
a141 2
   for (theIdx = 0; theIdx < thePtrTVec.length (); theIdx ++)
      delete thePtrTVec[theIdx];
d143 2
a144 2
   thePtrTVec.clear ();
   }
@


1.28
log
@Updated the copyright date on all source files.
@
text
@d82 5
d115 1
a115 1
      noCopyCtorAssign (WitPtrTVec);
@


1.27
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.26
log
@[shared-resource pegging]
@
text
@d25 2
a26 2
// This class is implemented as a typed wrapper for class TVec (TlPtr).
// See class TVec (TlPtr) for comments on the member functions.
@


1.25
log
@[multi-thread]
@
text
@a19 1
#include <TlObj.h>
d79 1
a79 1
         myTVec_ = static_cast <WitTlObj *> (NULL);
d91 1
a91 1
         return fromTlObj_cast <Elem> (myTVec_[theIndex]);
d96 1
a96 1
         return fromTlObjRef_cast <Elem> (myTVec_[theIndex]);
d116 1
a116 1
      WitTVec <WitTlObj *> myTVec_;
@


1.24
log
@Double Precision.
@
text
@d16 1
a16 1
// Contains the declaration of class template PtrTVec <TheType>.
d23 1
a23 1
// Class template PtrTVec <TheType>
d25 1
a25 1
// A time vector of pointers to TheType.
d32 1
a32 1
template <typename TheType> 
d83 1
a83 1
      inline TheType & operator () (int theIndex) const
d90 1
a90 1
      inline TheType * operator [] (int theIndex) const
d92 1
a92 1
         return fromTlObj_cast <TheType> (myTVec_[theIndex]);
d95 1
a95 1
      inline TheType * & operator [] (int theIndex)
d97 1
a97 1
         return fromTlObjRef_cast <TheType> (myTVec_[theIndex]);
d131 2
a132 2
template <typename TheType> 
      void deleteContents (WitPtrTVec <TheType> & thePtrTVec)
@


1.23
log
@An attempt to fix more syntax errors from on Windows.
@
text
@d80 1
a80 1
         myTVec_.setToScalar (NULL);
@


1.22
log
@Continued implementation of PIP.
@
text
@d123 1
a123 1
// NonClass function template deleteContents.
d126 3
a128 13
//------------------------------------------------------------------------------

namespace WitNonClass
{

template <typename TheType> 
   void deleteContents (WitPtrTVec <TheType> & thePtrTVec);

// Leaving namespace NonClass.
}

//------------------------------------------------------------------------------
// Implementation of NonClass function template deleteContents.
d132 1
a132 1
      void WitNonClass::deleteContents (WitPtrTVec <TheType> & thePtrTVec)
@


1.21
log
@Continued implementation of PIP.
@
text
@d129 7
a135 4
   {
   template <typename TheType> 
      void deleteContents (WitPtrTVec <TheType> & thePtrTVec);
   }
@


1.20
log
@Continued implementation of PIP.
@
text
@d123 1
a123 1
// Global function deleteContents.
d128 10
d139 1
a139 1
      void deleteContents (WitPtrTVec <TheType> & thePtrTVec)
@


1.19
log
@Replaced some C-style casts with C++ style casts.
@
text
@d33 1
a33 1
      class WitPtrTVec: public WitUtil
@


1.18
log
@Various internal changes.
@
text
@d20 1
d92 1
a92 1
         return (TheType *)   myTVec_[theIndex];
d97 1
a97 1
         return (TheType * &) myTVec_[theIndex];
@


1.17
log
@Various internal changes.
@
text
@d110 1
a110 1
      noCopyCtorAssignTemp (WitPtrTVec, TheType);
@


1.16
log
@Internal changes.
@
text
@d31 1
a31 1
template <class TheType> 
d127 1
a127 1
template <class TheType> 
@


1.15
log
@Preliminary work on single source.
@
text
@d72 1
a72 1
      inline WitBoolean isAllocated () const
@


1.14
log
@Preliminary work on single source.
@
text
@d77 1
a77 1
      inline void operator = (TheType * theObject)
d79 1
a79 1
         myTVec_.setToScalar ((WitTlObj *) theObject);
d110 1
a110 3
      WitPtrTVec (const WitPtrTVec <TheType> &);
         //
         // See noCopyCtor in macs.h.
d116 1
a116 1
      WitTVec <WitTlObjPtr> myTVec_;
@


1.13
log
@Continued preliminary work on single source.
@
text
@d79 1
a79 1
         myTVec_.setTo ((WitTlObj *) theObject);
@


1.12
log
@Refactoring for constrained stock reallocation.
@
text
@d79 1
a79 1
         myTVec_ = (WitTlObj *) theObject;
d118 1
a118 1
      WitTVec (WitTlObjPtr) myTVec_;
@


1.11
log
@More templates.
@
text
@d99 5
d122 17
@


1.10
log
@Removed indexes from production multi-route.
Other refactoring.
@
text
@d16 1
a16 1
// Contains the declaration of generic class PtrTVec.
d22 1
a22 1
// Generic class PtrTVec (TheType)
d31 86
a116 106
//------------------------------------------------------------------------------
// Generic class declaration macro.
//------------------------------------------------------------------------------

#define WitPtrTVecdeclare(TheType)                                             \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitPtrTVec (TheType): public WitUtil                                     \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitPtrTVec (TheType) ():                                                 \
            myTVec_ ()                                                         \
         {                                                                     \
         }                                                                     \
                                                                               \
      WitPtrTVec (TheType) (WitProblem * theProblem):                          \
            myTVec_ (theProblem, NULL)                                         \
         {                                                                     \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline ~WitPtrTVec (TheType) ()                                          \
         {                                                                     \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline void allocate (WitProblem * theProblem)                           \
         {                                                                     \
         myTVec_.allocate (theProblem, NULL);                                  \
         }                                                                     \
                                                                               \
      inline void clear ()                                                     \
         {                                                                     \
         myTVec_.clear ();                                                     \
         }                                                                     \
                                                                               \
      inline WitBoolean isAllocated () const                                   \
         {                                                                     \
         return myTVec_.isAllocated ();                                        \
         }                                                                     \
                                                                               \
      inline void operator = (TheType * theObject)                             \
         {                                                                     \
         myTVec_ = (WitTlObj *) theObject;                                     \
         }                                                                     \
                                                                               \
      inline TheType & operator () (int theIndex) const                        \
         {                                                                     \
         witAssert ((* this)[theIndex] != NULL);                               \
                                                                               \
         return   * (* this)[theIndex];                                        \
         }                                                                     \
                                                                               \
      inline TheType * operator [] (int theIndex) const                        \
         {                                                                     \
         return (TheType *)   myTVec_[theIndex];                               \
         }                                                                     \
                                                                               \
      inline TheType * & operator [] (int theIndex)                            \
         {                                                                     \
         return (TheType * &) myTVec_[theIndex];                               \
         }                                                                     \
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtorAssign (WitPtrTVec (TheType));                                 \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member data.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitTVec (WitTlObjPtr) myTVec_;                                           \
         /*                                                                  */\
         /* The TVec that stores the data for this PtrTVec.                  */\
   };                                                                          \

//------------------------------------------------------------------------------
// Declarations of all specific cases of the generic classes declared in this
// file.
//------------------------------------------------------------------------------

declare (WitPtrTVec, WitBaCand)
declare (WitPtrTVec, WitBaSelPt)
declare (WitPtrTVec, WitBopEntry)
declare (WitPtrTVec, WitCmrSelPt)
declare (WitPtrTVec, WitFixedPer)
declare (WitPtrTVec, WitMeCand)
declare (WitPtrTVec, WitPmrSelPt)
declare (WitPtrTVec, WitTlObj)
declare (WitPtrTVec, WitVector (WitPeriod))
@


1.9
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d128 1
d133 1
@


1.8
log
@Renamed AltPt classes to SelPt classes.
@
text
@d86 1
a86 1
         myTVec_ = (WitTl *) theObject;                                        \
d118 1
a118 1
      WitTVec (WitTlPtr) myTVec_;                                              \
d133 1
a133 1
declare (WitPtrTVec, WitTl)
@


1.7
log
@Removed class MeAltPt.
Changed name of class MeSelPt to MeAltPt.
Implemented de-selection of colliding MeAltPts.
@
text
@d128 1
a128 1
declare (WitPtrTVec, WitBaAltPt)
d130 1
d132 1
a132 2
declare (WitPtrTVec, WitPmrAltPt)
declare (WitPtrTVec, WitCmrAltPt)
@


1.6
log
@Refactoring for selection splitting.
@
text
@a130 1
declare (WitPtrTVec, WitMeAltPt)
@


1.5
log
@Further implementation of coarse selection splitting.
@
text
@d132 2
a133 1
declare (WitPtrTVec, WitMrAltPt)
a135 1

@


1.4
log
@Initial implementation of coarse selection splitting for build-ahead.
@
text
@d130 1
a132 1
declare (WitPtrTVec, WitPeriod)
@


1.3
log
@Completed a limited implementation of coarse selection splitting for BOP
entries.
@
text
@d132 1
d135 1
@


1.2
log
@Further development of coarse selection splitting.
@
text
@d124 2
a125 2
// Declarations of all specific cases of the generic classes and functions
// declared in this file.
@


1.1
log
@Some minor changes.
@
text
@d25 2
a26 2
// This class is implemented as a typed wrapper for class TVec (TypelessPtr).
// See class TVec (TypelessPtr) for comments on the member functions.
d86 1
a86 1
         myTVec_ = (WitTypelessPtr) theObject;                                 \
d118 1
a118 1
      WitTVec (WitTypelessPtr) myTVec_;                                        \
a129 1
declare (WitPtrTVec, WitConsEntDblStack)
d132 1
@

