head	1.20;
access;
symbols
	sce_5_01_20080919:1.17
	latest_sce_4_20_20060523:1.15.0.2
	sce_4_20_20060523:1.15
	latest_sce4_20_OSL:1.14.0.2
	sce_4_20_OSL:1.14
	sce_410_withVa:1.14
	sce_4_05_20040511:1.14
	sce_4_00_20040201:1.11
	nextGenBranch:1.11.0.2
	nextGenRoot:1.11
	sce_3_30_20030627:1.10
	EndRw-branch:1.9.0.4
	Root-of-EndRw:1.9
	rwToStl:1.9.0.2
	latest_sce_3_10_20010924:1.4.0.6
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.4.0.4
	sce_3_00_20010601:1.4
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2011.09.28.23.49.35;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.09.24.00.27.56;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.08.30.20.17.40;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.11.13.21.18.30;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.05.11.20.43.56;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.02.17.34.03;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2004.03.24.22.21.32;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.03.23.19.14.24;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.03.05.22.19.58;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.07.10.22.58.16;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.02.22.18.34;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.05.19.31.34;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.03.16.01.49;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.29.14.32.40;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.07.20.14.59;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.02.20.53.13;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.43;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.25.19.17.45;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.18;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.25;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.25;	author wit;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef MrpExpH
#define MrpExpH

//------------------------------------------------------------------------------
// Header file: "MrpExp.h"
//
// Contains the declaration of class MrpExp.
//------------------------------------------------------------------------------

#include <Schedule.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// class MrpExp.
//
// Responsible for performing MRP explosion.
//
// This class participates in an instance of the "template method" design
// pattern. Class MrpExp is the AbstractCLass, classes OrigMrpExp and
// FssMrpExp are the ConcreteClasses and mrp is the TemplateMethod. The
// basic MRP explosion algorithm is the same in both cases and is defined in
// class MrpExp. What varies is means by which the MRP problem is defined
// and the solution is stored and these aspects are defined in the
// ConcreteClasses
//
// Class Hierarchy:
//
// ProbAssoc
//    MrpExp.
//       OrigMrpExp.
//       FssMrpExp.
//------------------------------------------------------------------------------

class WitMrpExp: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrpExp (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMrpExp ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void mrp ();
         //
         // Performs MRP.

    protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc  (bool,                                  netSubsMode)
      accessFunc2 (const WitSchedule <WitPart, double> &, netSupplyVol)
      accessFunc2 (const WitSchedule <WitPart, double> &, myReqVol)

      //------------------------------------------------------------------------

      virtual void initDerived ();
         //
         // Initializes the derived class aspects of mrp.
         // Default: no-op.

      virtual double supplyVol (WitPart * thePart, WitPeriod thePer) = 0;
         //
         // Returns the client's supplyVol for thePart in period t for Mrp
         // purposes.

      virtual double demandVol (WitPart * thePart, WitPeriod thePer) = 0;
         //
         // Returns the client's demandVol for thePart in period t for Mrp
         // purposes.

      virtual double & execVol (WitOperation * theOpn, WitPeriod thePer) = 0;
         //
         // Returns the client's execVol vector for MRP purposes for theOpn in
         // thePer.

      virtual double & subVol (WitSubEntry * theSub, WitPeriod thePer) = 0;
         //
         // Returns the client's subVol vector for MRP purposes for theSub in
         // thePer.

      virtual void finishDerived () = 0;
         //
         // Concludes the derived aspects of mrp.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMrpExp);

      void init ();
         //
         // Initializes mrp.

      void explodeAllParts ();
         //
         // Explodes the requirements through all the Parts in downward order.

      bool explode (WitPart * thePart, WitPeriod fillPer);
         //
         // Explodes requirements for thePart that are in fillPer.
         // May choose an earlier period for the explosion.

      void explodeBomEntry (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            double        qty);
         //
         // Explodes qty execVol units thru theBomEnt in execution Period
         // execPer.

      void netConsEntries (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            double &      qty);
         //
         // Nets theBomEnt and its SubEntries in execution period exevPer
         // prior to explosion, if appropriate.
         // Updates qty, the execution quantity.

      void netConsEntry (
            WitConsEntry * theConsEnt,
            WitPeriod      execPer,
            double &       qty);
         //
         // Nets theConsEnt in execution period execPer, if appropriate.
         // Updates qty, the execution quantity.

      void explodeBopEntry (
            WitBopEntry * theBopEnt,
            WitPeriod     execPer,
            double        qty);
         //
         // Explodes qty execVol units upward thru theBopEnt in execution
         // Period execPer.

      bool & hasSubsToNet (WitBomEntry * theBomEnt);
         //
         // hasSubsToNet (theBomEnt) is true, iff theBomEnt has at least
         // one SubEntry with mrpNetAllowed () true.

      void finish ();
         //
         // Concludes mrp.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSchedule <WitPart, double> netSupplyVol_;
         //
         // Net supply schedule.

      WitSchedule <WitPart, double> myReqVol_;
         //
         // MRP requirement schedule.

      bool netSubsMode_;
         //
         // true, iff theSub->mrpNetAllowed () is true for at least one
         // SubEntry.

      WitVector <bool> hasSubsToNetVec_;
         //
         // Data for hasSubsToNet ().
   };

#endif
@


1.19
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.18
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d44 2
a45 71
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitMrpExp (WitProblem * theProblem);
//
// ProbAssoc <<< theProblem.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitMrpExp ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void mrp ();
//
// Performs MRP.

protected:

//------------------------------------------------------------------------
// Protected member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc  (bool,                                  netSubsMode)
accessFunc2 (const WitSchedule <WitPart, double> &, netSupplyVol)
accessFunc2 (const WitSchedule <WitPart, double> &, myReqVol)

//------------------------------------------------------------------------

virtual void initDerived ();
//
// Initializes the derived class aspects of mrp.
// Default: no-op.

virtual double supplyVol (WitPart * thePart, WitPeriod thePer) = 0;
//
// Returns the client's supplyVol for thePart in period t for Mrp
// purposes.

virtual double demandVol (WitPart * thePart, WitPeriod thePer) = 0;
//
// Returns the client's demandVol for thePart in period t for Mrp
// purposes.

virtual double & execVol (WitOperation * theOpn, WitPeriod thePer) = 0;
//
// Returns the client's execVol vector for MRP purposes for theOpn in
// thePer.

virtual double & subVol (WitSubEntry * theSub, WitPeriod thePer) = 0;
//
// Returns the client's subVol vector for MRP purposes for theSub in
// thePer.

virtual void finishDerived () = 0;
//
// Concludes the derived aspects of mrp.

private:
d47 151
a197 82
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitMrpExp);

void init ();
//
// Initializes mrp.

void explodeAllParts ();
//
// Explodes the requirements through all the Parts in downward order.

bool explode (WitPart * thePart, WitPeriod fillPer);
//
// Explodes requirements for thePart that are in fillPer.
// May choose an earlier period for the explosion.

void explodeBomEntry (
WitBomEntry * theBomEnt,
WitPeriod     execPer,
double        qty);
//
// Explodes qty execVol units thru theBomEnt in execution Period
// execPer.

void netConsEntries (
WitBomEntry * theBomEnt,
WitPeriod     execPer,
double &      qty);
//
// Nets theBomEnt and its SubEntries in execution period exevPer
// prior to explosion, if appropriate.
// Updates qty, the execution quantity.

void netConsEntry (
WitConsEntry * theConsEnt,
WitPeriod      execPer,
double &       qty);
//
// Nets theConsEnt in execution period execPer, if appropriate.
// Updates qty, the execution quantity.

void explodeBopEntry (
WitBopEntry * theBopEnt,
WitPeriod     execPer,
double        qty);
//
// Explodes qty execVol units upward thru theBopEnt in execution
// Period execPer.

bool & hasSubsToNet (WitBomEntry * theBomEnt);
//
// hasSubsToNet (theBomEnt) is true, iff theBomEnt has at least
// one SubEntry with mrpNetAllowed () true.

void finish ();
//
// Concludes mrp.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitSchedule <WitPart, double> netSupplyVol_;
//
// Net supply schedule.

WitSchedule <WitPart, double> myReqVol_;
//
// MRP requirement schedule.

bool netSubsMode_;
//
// true, iff theSub->mrpNetAllowed () is true for at least one
// SubEntry.

WitVector <bool> hasSubsToNetVec_;
//
// Data for hasSubsToNet ().
};
@


1.17
log
@Fixed bug:
   witMrp gave incorrect results when called a second time.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d44 71
a114 2
   {
   public:
d116 82
a197 151
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrpExp (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMrpExp ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void mrp ();
         //
         // Performs MRP.

    protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc  (bool,                                  netSubsMode)
      accessFunc2 (const WitSchedule <WitPart, double> &, netSupplyVol)
      accessFunc2 (const WitSchedule <WitPart, double> &, myReqVol)

      //------------------------------------------------------------------------

      virtual void initDerived ();
         //
         // Initializes the derived class aspects of mrp.
         // Default: no-op.

      virtual double supplyVol (WitPart * thePart, WitPeriod thePer) = 0;
         //
         // Returns the client's supplyVol for thePart in period t for Mrp
         // purposes.

      virtual double demandVol (WitPart * thePart, WitPeriod thePer) = 0;
         //
         // Returns the client's demandVol for thePart in period t for Mrp
         // purposes.

      virtual double & execVol (WitOperation * theOpn, WitPeriod thePer) = 0;
         //
         // Returns the client's execVol vector for MRP purposes for theOpn in
         // thePer.

      virtual double & subVol (WitSubEntry * theSub, WitPeriod thePer) = 0;
         //
         // Returns the client's subVol vector for MRP purposes for theSub in
         // thePer.

      virtual void finishDerived () = 0;
         //
         // Concludes the derived aspects of mrp.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMrpExp);

      void init ();
         //
         // Initializes mrp.

      void explodeAllParts ();
         //
         // Explodes the requirements through all the Parts in downward order.

      bool explode (WitPart * thePart, WitPeriod fillPer);
         //
         // Explodes requirements for thePart that are in fillPer.
         // May choose an earlier period for the explosion.

      void explodeBomEntry (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            double        qty);
         //
         // Explodes qty execVol units thru theBomEnt in execution Period
         // execPer.

      void netConsEntries (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            double &      qty);
         //
         // Nets theBomEnt and its SubEntries in execution period exevPer
         // prior to explosion, if appropriate.
         // Updates qty, the execution quantity.

      void netConsEntry (
            WitConsEntry * theConsEnt,
            WitPeriod      execPer,
            double &       qty);
         //
         // Nets theConsEnt in execution period execPer, if appropriate.
         // Updates qty, the execution quantity.

      void explodeBopEntry (
            WitBopEntry * theBopEnt,
            WitPeriod     execPer,
            double        qty);
         //
         // Explodes qty execVol units upward thru theBopEnt in execution
         // Period execPer.

      bool & hasSubsToNet (WitBomEntry * theBomEnt);
         //
         // hasSubsToNet (theBomEnt) is true, iff theBomEnt has at least
         // one SubEntry with mrpNetAllowed () true.

      void finish ();
         //
         // Concludes mrp.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSchedule <WitPart, double> netSupplyVol_;
         //
         // Net supply schedule.

      WitSchedule <WitPart, double> myReqVol_;
         //
         // MRP requirement schedule.

      bool netSubsMode_;
         //
         // true, iff theSub->mrpNetAllowed () is true for at least one
         // SubEntry.

      WitVector <bool> hasSubsToNetVec_;
         //
         // Data for hasSubsToNet ().
   };
@


1.16
log
@Stochastic Implosion
@
text
@d79 3
a81 11
      accessFunc (bool, netSubsMode)

      inline const WitSchedule <WitPart, double> & netSupplyVol ()
         {
         return netSupplyVol_;
         }

      inline const WitSchedule <WitPart, double> & myReqVol ()
         {
         return myReqVol_;
         }
@


1.15
log
@Updated the copyright date on all source files.
@
text
@d108 1
a108 1
      virtual WitDblFlexVec & execVol (WitOperation * theOpn) = 0;
d110 2
a111 1
         // Returns the client's execVol vector for MRP purposes for theOpn.
d113 1
a113 1
      virtual WitDblFlexVec & subVol (WitSubEntry * theSub) = 0;
d115 2
a116 1
         // Returns the client's subVol vector for MRP purposes for theSub.
d120 1
a120 1
         // Concludes thr derived aspects of mrp.
@


1.14
log
@Double Precision.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.13
log
@Double Precision.
@
text
@d108 1
a108 1
      virtual WitFlexVec <double> & execVol (WitOperation * theOpn) = 0;
d112 1
a112 1
      virtual WitFlexVec <double> & subVol (WitSubEntry * theSub) = 0;
@


1.12
log
@Double Precision.
@
text
@d108 1
a108 1
      virtual WitRealVec & execVol (WitOperation * theOpn) = 0;
d112 1
a112 1
      virtual WitRealVec & subVol (WitSubEntry * theSub) = 0;
@


1.11
log
@Added some optional warnings on Linux.
@
text
@d108 1
a108 1
      virtual float & execVol (WitOperation * theOpn, WitPeriod execPer)= 0;
d110 1
a110 1
         // Returns the client's execVol for MRP purposes for theOpn in execPer.
d112 1
a112 1
      virtual float & subVol (WitSubEntry * theSub, WitPeriod execPer) = 0;
d114 1
a114 1
         // Returns the client's subVol for MRP purposes for theSub in execPer.
@


1.10
log
@Internal changes.
@
text
@d59 1
a59 1
      ~WitMrpExp ();
@


1.9
log
@Continued implementation of single-source.
@
text
@d79 1
a79 1
      accessFunc (WitBoolean, netSubsMode)
d136 1
a136 1
      WitBoolean explode (WitPart * thePart, WitPeriod fillPer);
d174 1
a174 1
      WitBoolean & hasSubsToNet (WitBomEntry * theBomEnt);
d176 2
a177 2
         // hasSubsToNet (theBomEnt) is TRUE, iff theBomEnt has at least
         // one SubEntry with mrpNetAllowed () TRUE.
d195 1
a195 1
      WitBoolean netSubsMode_;
d197 1
a197 1
         // TRUE, iff theSub->mrpNetAllowed () is TRUE for at least one
d200 1
a200 1
      WitVector <WitBoolean> hasSubsToNetVec_;
@


1.8
log
@Continued implementation of single-source.
@
text
@a20 1
#include <AccFlag.h>
@


1.7
log
@Continued implementation of single-source.
@
text
@a69 9
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline const WitSchedule <WitPart, double> & myReqVol ()
         {
         return myReqVol_;
         }

d87 5
d94 1
a94 1
      virtual void initDerived () = 0;
d97 1
@


1.6
log
@Continued preliminary work on single source.
@
text
@d70 9
a95 5
      inline const WitSchedule <WitPart, double> & myReqVol ()
         {
         return myReqVol_;
         }

d98 1
a98 1
      virtual void initDerived ();
a100 1
         // Default: no-op.
@


1.5
log
@Preliminary work on single source.
@
text
@d20 1
d80 11
a90 3
      accessFunc (const WitSchedule (WitPart, double) &, netSupplyVol)
      accessFunc (const WitSchedule (WitPart, double) &, myReqVol)
      accessFunc (WitBoolean,                            netSubsMode)
d175 1
a175 4
      inline WitBoolean & hasSubsToNet (WitBomEntry * theBomEnt)
         {
         return hasSubsToNetVec_[theBomEnt->mappingIndex ()];
         }
d188 1
a188 1
      WitSchedule (WitPart, double) netSupplyVol_;
d192 1
a192 1
      WitSchedule (WitPart, double) myReqVol_;
@


1.4
log
@Refactoring for selection splitting.
@
text
@d195 1
a195 1
      WitVector (WitBoolean) hasSubsToNetVec_;
@


1.3
log
@Changed some more of the FSS and MRP stuff from float to double to fix a
   numerical problem.
@
text
@d118 1
a118 3
      copyCtorAndAssignment (WitMrpExp);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d90 1
a90 1
      virtual float supplyVol (WitPart * thePart, WitPeriod thePer) = 0;
d95 1
a95 1
      virtual float demandVol (WitPart * thePart, WitPeriod thePer) = 0;
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
