head	1.21;
access;
symbols
	sce_5_01_20080919:1.18
	latest_sce_4_20_20060523:1.18.0.2
	sce_4_20_20060523:1.18
	latest_sce4_20_OSL:1.17.0.2
	sce_4_20_OSL:1.17
	sce_410_withVa:1.14
	sce_4_05_20040511:1.11
	sce_4_00_20040201:1.10
	nextGenBranch:1.10.0.2
	nextGenRoot:1.10
	sce_3_30_20030627:1.10;
locks; strict;
comment	@ * @;


1.21
date	2011.09.28.23.49.28;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2011.09.24.00.27.48;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.08.30.20.17.36;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2006.05.02.17.34.01;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2006.02.21.15.44.14;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.02.17.17.07.17;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.11.15.21.27.23;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.09.06.20.43.26;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.07.07.15.16.23;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2005.02.08.21.00.39;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.12.15.09.23;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.07.08.18.41.20;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.27.23.26.12;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.27.21.34.05;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.27.21.17.17;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.23.21.23.10;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.22.19.32.11;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.08.19.22.37;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.02.23.40.42;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.02.22.18.30;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.26.23.56.33;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "List.C"
//
// Contains the implementation the following classes:
//
//    WitAbsList
//    WitListItr
//------------------------------------------------------------------------------

#include <Str.h>
#include <List.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------
// Implementation of class WitAbsList.
//------------------------------------------------------------------------------

void WitAbsList::clear ()
   {
   myListData_.clear ();

   nElements_ = 0;
   }

//------------------------------------------------------------------------------

WitAbsList::WitAbsList ():

      myListData_ (),
      nElements_  (0)
   {
   }

//------------------------------------------------------------------------------

WitAbsList::~WitAbsList ()
   {
   }

//------------------------------------------------------------------------------

void WitAbsList::copyAbs (const WitAbsList & theAbsList)
   {
   myListData_ = theAbsList.myListData_;
   nElements_  = theAbsList.nElements_;
   }

//------------------------------------------------------------------------------

void WitAbsList::appendAbs (void * theObject)
   {
   myListData_.push_back (theObject);

   nElements_ ++;
   }

//------------------------------------------------------------------------------

void * WitAbsList::firstAbs () const
   {
   return myListData_.front ();
   }

//------------------------------------------------------------------------------

void * WitAbsList::getAbs ()
   {
   void * theObjByVP;

   theObjByVP = myListData_.front ();

   myListData_.pop_front ();

   if (nElements_ > 0)
      nElements_ --;

   return theObjByVP;
   }

//------------------------------------------------------------------------------

void * WitAbsList::lastAbs () const
   {
   return myListData_.back ();
   }

//------------------------------------------------------------------------------

void WitAbsList::prependAbs (void * theObjByVP)
   {
   witAssert (theObjByVP != NULL);

   myListData_.push_front (theObjByVP);

   nElements_ ++;
   }

//------------------------------------------------------------------------------

void * WitAbsList::atAbs (int theIndex) const
   {
   std::list <void *>::const_iterator theItr = myListData_.begin ();

   while (theIndex -- and theItr != myListData_.end ())
      theItr ++;

   return
      (theItr != myListData_.end ())?
         * theItr:
         NULL;
   }

//------------------------------------------------------------------------------

void * WitAbsList::findAbs (
      WitAbsListKeyFunc theFunc,
      const char *      theCstring)
      const
   {
   WitListItr theItr (* this);
   void *     theElement;

   while (theItr.advance (theElement, * this))
      if (theFunc (theElement) == theCstring)
         return theElement;

   return NULL;
   }

//------------------------------------------------------------------------------

void WitAbsList::appendUniquelyAbs (void * theObject)
   {
   witAssert (not containsAbs (theObject));

   appendAbs (theObject);
   }

//------------------------------------------------------------------------------

bool WitAbsList::containsAbs (void * theObject) const
   {
   std::list<void*>::const_iterator theItr = myListData_.begin ();

   while (theItr != myListData_.end ())
      {
      if (* theItr == theObject)
         return true;

      ++ theItr;
      } 

   return false;
   }

//------------------------------------------------------------------------------
// Implementation of class ListItr.
//------------------------------------------------------------------------------

WitListItr::WitListItr (const WitAbsList & theAbsList):
      myAbsList_ (theAbsList),
      iterating_ (false)
   {
   myListIterator_ = myAbsList_.myListData_.begin ();
   }

//------------------------------------------------------------------------------

WitListItr::~WitListItr ()
   {
   }

//------------------------------------------------------------------------------

void * WitListItr::key ()
   {
   return * myListIterator_;
   }

//------------------------------------------------------------------------------

bool WitListItr::advance ()
   {
   if (iterating_)
      myListIterator_++;
   else
      iterating_ = true;

   return (myListIterator_ != myAbsList_.myListData_.end ());
   }

//------------------------------------------------------------------------------

bool WitListItr::advance (
      void * &           theElement,
      const WitAbsList & theAbsList)
   {
   witAssert (& myAbsList_.myListData_ == & theAbsList.myListData_);
      //
      // Require that this Itr is attached to theAbsList.

   bool gotOne = advance ();

   if (gotOne)
      theElement = * myListIterator_;

   return gotOne;
   }
@


1.20
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.19
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d28 2
a29 2
{
myListData_.clear ();
d31 2
a32 2
nElements_ = 0;
}
d38 4
a41 4
myListData_ (),
nElements_  (0)
{
}
d46 2
a47 2
{
}
d52 4
a55 4
{
myListData_ = theAbsList.myListData_;
nElements_  = theAbsList.nElements_;
}
d60 2
a61 2
{
myListData_.push_back (theObject);
d63 2
a64 2
nElements_ ++;
}
d69 3
a71 3
{
return myListData_.front ();
}
d76 2
a77 2
{
void * theObjByVP;
d79 1
a79 1
theObjByVP = myListData_.front ();
d81 1
a81 1
myListData_.pop_front ();
d83 2
a84 2
if (nElements_ > 0)
nElements_ --;
d86 2
a87 2
return theObjByVP;
}
d92 3
a94 3
{
return myListData_.back ();
}
d99 2
a100 2
{
witAssert (theObjByVP != NULL);
d102 1
a102 1
myListData_.push_front (theObjByVP);
d104 2
a105 2
nElements_ ++;
}
d110 2
a111 2
{
std::list <void *>::const_iterator theItr = myListData_.begin ();
d113 2
a114 2
while (theIndex -- and theItr != myListData_.end ())
theItr ++;
d116 5
a120 5
return
(theItr != myListData_.end ())?
* theItr:
NULL;
}
d125 10
a134 10
WitAbsListKeyFunc theFunc,
const char *      theCstring)
const
{
WitListItr theItr (* this);
void *     theElement;

while (theItr.advance (theElement, * this))
if (theFunc (theElement) == theCstring)
return theElement;
d136 2
a137 2
return NULL;
}
d142 2
a143 2
{
witAssert (not containsAbs (theObject));
d145 2
a146 2
appendAbs (theObject);
}
d151 2
a152 2
{
std::list<void*>::const_iterator theItr = myListData_.begin ();
d154 4
a157 4
while (theItr != myListData_.end ())
{
if (* theItr == theObject)
return true;
d159 2
a160 2
++ theItr;
}
d162 2
a163 2
return false;
}
d170 5
a174 5
myAbsList_ (theAbsList),
iterating_ (false)
{
myListIterator_ = myAbsList_.myListData_.begin ();
}
d179 2
a180 2
{
}
d185 3
a187 3
{
return * myListIterator_;
}
d192 5
a196 5
{
if (iterating_)
myListIterator_++;
else
iterating_ = true;
d198 2
a199 2
return (myListIterator_ != myAbsList_.myListData_.end ());
}
d204 6
a209 6
void * &           theElement,
const WitAbsList & theAbsList)
{
witAssert (& myAbsList_.myListData_ == & theAbsList.myListData_);
//
// Require that this Itr is attached to theAbsList.
d211 1
a211 1
bool gotOne = advance ();
d213 2
a214 2
if (gotOne)
theElement = * myListIterator_;
d216 2
a217 2
return gotOne;
}
@


1.18
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d28 2
a29 2
   {
   myListData_.clear ();
d31 2
a32 2
   nElements_ = 0;
   }
d38 4
a41 4
      myListData_ (),
      nElements_  (0)
   {
   }
d46 2
a47 2
   {
   }
d52 4
a55 4
   {
   myListData_ = theAbsList.myListData_;
   nElements_  = theAbsList.nElements_;
   }
d60 2
a61 2
   {
   myListData_.push_back (theObject);
d63 2
a64 2
   nElements_ ++;
   }
d69 3
a71 3
   {
   return myListData_.front ();
   }
d76 2
a77 2
   {
   void * theObjByVP;
d79 1
a79 1
   theObjByVP = myListData_.front ();
d81 1
a81 1
   myListData_.pop_front ();
d83 2
a84 2
   if (nElements_ > 0)
      nElements_ --;
d86 2
a87 2
   return theObjByVP;
   }
d92 3
a94 3
   {
   return myListData_.back ();
   }
d99 2
a100 2
   {
   witAssert (theObjByVP != NULL);
d102 1
a102 1
   myListData_.push_front (theObjByVP);
d104 2
a105 2
   nElements_ ++;
   }
d110 2
a111 2
   {
   std::list <void *>::const_iterator theItr = myListData_.begin ();
d113 2
a114 2
   while (theIndex -- and theItr != myListData_.end ())
      theItr ++;
d116 5
a120 5
   return
      (theItr != myListData_.end ())?
         * theItr:
         NULL;
   }
d125 10
a134 10
      WitAbsListKeyFunc theFunc,
      const char *      theCstring)
      const
   {
   WitListItr theItr (* this);
   void *     theElement;

   while (theItr.advance (theElement, * this))
      if (theFunc (theElement) == theCstring)
         return theElement;
d136 2
a137 2
   return NULL;
   }
d142 2
a143 2
   {
   witAssert (not containsAbs (theObject));
d145 2
a146 2
   appendAbs (theObject);
   }
d151 2
a152 2
   {
   std::list<void*>::const_iterator theItr = myListData_.begin ();
d154 4
a157 4
   while (theItr != myListData_.end ())
      {
      if (* theItr == theObject)
         return true;
d159 2
a160 2
      ++ theItr;
      } 
d162 2
a163 2
   return false;
   }
d170 5
a174 5
      myAbsList_ (theAbsList),
      iterating_ (false)
   {
   myListIterator_ = myAbsList_.myListData_.begin ();
   }
d179 2
a180 2
   {
   }
d185 3
a187 3
   {
   return * myListIterator_;
   }
d192 5
a196 5
   {
   if (iterating_)
      myListIterator_++;
   else
      iterating_ = true;
d198 2
a199 2
   return (myListIterator_ != myAbsList_.myListData_.end ());
   }
d204 6
a209 6
      void * &           theElement,
      const WitAbsList & theAbsList)
   {
   witAssert (& myAbsList_.myListData_ == & theAbsList.myListData_);
      //
      // Require that this Itr is attached to theAbsList.
d211 1
a211 1
   bool gotOne = advance ();
d213 2
a214 2
   if (gotOne)
      theElement = * myListIterator_;
d216 2
a217 2
   return gotOne;
   }
@


1.17
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.16
log
@[shared-resource pegging]
@
text
@d109 1
a109 1
void * WitAbsList::atAbs (WitSiz theIndex) const
@


1.15
log
@[shared-resource pegging]
@
text
@d109 1
a109 1
void * WitAbsList::atAbs (size_t theIndex) const
@


1.14
log
@[multi-thread]
@
text
@d59 1
a59 1
void WitAbsList::appendAbs (WitTlObj * theObject)
d68 1
a68 1
WitTlObj * WitAbsList::firstAbs () const
d75 1
a75 1
WitTlObj * WitAbsList::getAbs ()
d77 1
a77 1
   WitTlObj * theTlObj;
d79 1
a79 1
   theTlObj = myListData_.front ();
d86 1
a86 1
   return theTlObj;
d91 1
a91 1
WitTlObj * WitAbsList::lastAbs () const
d98 1
a98 1
void WitAbsList::prependAbs (WitTlObj * theTlObj)
d100 1
a100 1
   witAssert (theTlObj != NULL);
d102 1
a102 1
   myListData_.push_front (theTlObj);
d109 1
a109 1
WitTlObj * WitAbsList::atAbs (size_t theIndex) const
d111 1
a111 1
   std::list <WitTlObj *>::const_iterator theItr = myListData_.begin ();
d124 1
a124 1
WitTlObj * WitAbsList::findAbs (
d130 1
a130 1
   WitTlObj * theElement;
d141 1
a141 1
void WitAbsList::appendUniquelyAbs (WitTlObj * theObject)
d150 1
a150 1
bool WitAbsList::containsAbs (WitTlObj * theObject) const
d152 1
a152 1
   std::list<WitTlObj*>::const_iterator theItr = myListData_.begin ();
d184 1
a184 1
WitTlObj * WitListItr::key ()
d204 1
a204 1
      WitTlObj * &       theElement,
@


1.13
log
@[exceptions]
@
text
@d100 1
a100 2
   if (theTlObj == NULL)
      curMsgFac () ("memoryErrorSmsg");
@


1.12
log
@Pegged Critical List.
@
text
@d101 1
a101 1
      curMsgFac () ("memoryErrorMsg");
@


1.11
log
@Double Precision.
@
text
@a72 1

@


1.10
log
@Made List::elements run in constant time.
@
text
@d102 1
a102 1
      WitMsgFacility::current () ("memoryErrorMsg");
@


1.9
log
@Removed all const_casts from WIT.
@
text
@d30 2
d37 3
a39 1
      myListData_ ()
d54 1
d62 2
d84 3
d105 2
@


1.8
log
@Eliminated a const_cast.
@
text
@a113 7
void WitAbsList::removeReferenceAbs (const WitTlObj * theElement)
   {
   myListData_.remove (toTlObj_cast (theElement));
   }

//------------------------------------------------------------------------------

d140 1
a140 1
bool WitAbsList::containsAbs (const WitTlObj * theObject) const
@


1.7
log
@Began implementation of Proportionate Routing.
@
text
@d167 1
a167 1
      myAbsList_ (const_cast <WitAbsList &> (theAbsList)),
@


1.6
log
@Minor changes.
@
text
@d167 1
a167 1
      theList_   (const_cast <WitAbsList &> (theAbsList)),
d170 1
a170 1
   myListIterator_ = theList_.myListData_.begin ();
d195 1
a195 1
   return (myListIterator_ != theList_.myListData_.end ());
d204 1
a204 1
   witAssert (& theList_.myListData_ == & theAbsList.myListData_);
@


1.5
log
@Replaced some C-style casts with C++ style casts.
@
text
@d71 4
a74 1
   WitTlObj * p = myListData_.front();
d76 2
a77 1
   return p;
d89 1
a89 1
void WitAbsList::prependAbs (WitTlObj * theObject)
d91 1
a91 1
   if (theObject == NULL)
d94 1
a94 1
   myListData_.push_front( theObject );
d101 9
a109 4
      std::list<WitTlObj*>::const_iterator it = myListData_.begin();
      while( theIndex-- and it != myListData_.end() )
         it++;
      return it != myListData_.end() ? *it : NULL;
d149 3
a151 1
   if( myListData_.size() )
d153 6
a158 7
         std::list<WitTlObj*>::const_iterator it = myListData_.begin();
         do
         {
            if( *it == theObject )
               return true;
         } while( ++it != myListData_.end() );
      }
d166 3
a168 2
WitListItr::WitListItr (const WitAbsList& theAbsList) :
      theList_ (const_cast<WitAbsList&>(theAbsList)), iterating_(false)
d170 1
a170 1
      myListIterator_ = theList_.myListData_.begin();
d183 1
a183 1
   return *myListIterator_;
d190 4
a193 5
      if( iterating_ ) // we must not increment the iterator the first time
                       // around
         myListIterator_++;
      else
         iterating_ = true;
d195 1
a195 1
   return ( myListIterator_ != theList_.myListData_.end() );
d204 8
a211 7
   witAssert ( &theList_.myListData_ == &theAbsList.myListData_ );
         //
         // Require that this Itr is attached to theAbsList.

   bool gotOne = advance();
   if( gotOne )
      theElement = *myListIterator_;
@


1.4
log
@Fixed the "twoLevelLotSizes" bug that was discovered on windows.
@
text
@d107 1
a107 1
      myListData_.remove( (WitTlObj*)theElement );
@


1.3
log
@Internal changes.
@
text
@a157 2
                 //
                 // un-consting cast
@


1.2
log
@Internal changes.
@
text
@d98 1
a98 1
      while( theIndex-- && it != myListData_.end() )
d131 1
a131 1
   witAssert (! containsAbs (theObject));
@


1.1
log
@Moved content of RWClient.C to another file.
@
text
@d138 1
a138 1
WitBoolean WitAbsList::containsAbs (const WitTlObj * theObject) const
d146 1
a146 1
               return witTRUE;
d149 1
a149 1
   return witFALSE;
d179 1
a179 1
WitBoolean WitListItr::advance ()
d181 2
a182 1
      if( iterating_ ) // we must not increment the iterator the first time around
d192 1
a192 1
WitBoolean WitListItr::advance (
@

