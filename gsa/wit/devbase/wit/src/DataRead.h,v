head	1.22;
access;
symbols
	sce_5_01_20080919:1.19
	latest_sce_4_20_20060523:1.19.0.2
	sce_4_20_20060523:1.19
	latest_sce4_20_OSL:1.18.0.2
	sce_4_20_OSL:1.18
	sce_410_withVa:1.10
	sce_4_05_20040511:1.9
	sce_4_00_20040201:1.9
	nextGenBranch:1.8.0.2
	nextGenRoot:1.8
	sce_3_30_20030627:1.8
	EndRw-branch:1.7.0.8
	Root-of-EndRw:1.7
	rwToStl:1.7.0.6
	latest_sce_3_10_20010924:1.7.0.4
	sce_3_10_20010924:1.7
	latest_sce_3_00_20010601:1.7.0.2
	sce_3_00_20010601:1.7
	latest_sce_2_31_20010308:1.6.0.2
	sce_2_31_20010308:1.6
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2011.09.28.23.49.13;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2011.09.24.00.27.30;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2011.08.30.20.17.23;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2006.05.02.17.33.56;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.03.22.09.12;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2005.11.01.17.06.16;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.28.22.28.08;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.28.21.03.05;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.28.20.29.10;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.21.22.23.34;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.07.21.42.47;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2005.09.13.19.31.56;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2005.07.05.22.04.25;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.12.01.21.05.03;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.02.22.18.22;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.17.15.11.13;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.02.19.24.06;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.06.19.58.36;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.38;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.19;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.31;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.20;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.20;	author wit;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef DataReadH
#define DataReadH

//------------------------------------------------------------------------------
// Header file: "DataRead.h"
//
// Contains the declaration of class DataReader.
//------------------------------------------------------------------------------

#include <Str.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// class DataReader
//
// Responsible for reading the input data file.
//------------------------------------------------------------------------------

class WitDataReader: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDataReader (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitDataReader ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void readData (const char * fileName);
         //
         // Reads an input data file for myProblem ().
         // fileName is the name of the file to be written.

      bool active ();
         //
         // Returns true, iff this DataReader is currently running readData ().

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void protectedReadData (const char * fileName);
         //
         // Performs the aspects of readData () that are to be protected by a
         // try block.

      noCopyCtorAssign (WitDataReader);

      //------------------------------------------------------------------------
      // Static private member data.
      //------------------------------------------------------------------------

      static WitDataReader * activeInstance_;
         //
         // The DataReader which is currently running readData (), if any;
         // otherwise NULL.

      static bool errorHasOccurred_;
         //
         // True, iff an error has occurred during readData for any instance of
         // this class during the program process.

      //------------------------------------------------------------------------
      // Non-static private member data.
      //------------------------------------------------------------------------

      WitString inputFileName_;
         //
         // The name of inputFile_.

      FILE * inputFile_;
         //
         // The input data file being read.
   };

#endif
@


1.21
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.20
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d29 2
a30 2
{
public:
d32 3
a34 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d36 1
a36 1
WitDataReader (WitProblem *);
d38 3
a40 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d42 1
a42 1
~WitDataReader ();
d44 3
a46 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d48 4
a51 4
void readData (const char * fileName);
//
// Reads an input data file for myProblem ().
// fileName is the name of the file to be written.
d53 3
a55 3
bool active ();
//
// Returns true, iff this DataReader is currently running readData ().
d57 1
a57 1
private:
d59 3
a61 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d63 4
a66 4
void protectedReadData (const char * fileName);
//
// Performs the aspects of readData () that are to be protected by a
// try block.
d68 1
a68 1
noCopyCtorAssign (WitDataReader);
d70 3
a72 3
//------------------------------------------------------------------------
// Static private member data.
//------------------------------------------------------------------------
d74 4
a77 4
static WitDataReader * activeInstance_;
//
// The DataReader which is currently running readData (), if any;
// otherwise NULL.
d79 4
a82 4
static bool errorHasOccurred_;
//
// True, iff an error has occurred during readData for any instance of
// this class during the program process.
d84 3
a86 3
//------------------------------------------------------------------------
// Non-static private member data.
//------------------------------------------------------------------------
d88 3
a90 3
WitString inputFileName_;
//
// The name of inputFile_.
d92 4
a95 4
FILE * inputFile_;
//
// The input data file being read.
};
@


1.19
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d29 2
a30 2
   {
   public:
d32 3
a34 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d36 1
a36 1
      WitDataReader (WitProblem *);
d38 3
a40 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d42 1
a42 1
      ~WitDataReader ();
d44 3
a46 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d48 4
a51 4
      void readData (const char * fileName);
         //
         // Reads an input data file for myProblem ().
         // fileName is the name of the file to be written.
d53 3
a55 3
      bool active ();
         //
         // Returns true, iff this DataReader is currently running readData ().
d57 1
a57 1
   private:
d59 3
a61 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d63 4
a66 4
      void protectedReadData (const char * fileName);
         //
         // Performs the aspects of readData () that are to be protected by a
         // try block.
d68 1
a68 1
      noCopyCtorAssign (WitDataReader);
d70 3
a72 3
      //------------------------------------------------------------------------
      // Static private member data.
      //------------------------------------------------------------------------
d74 4
a77 4
      static WitDataReader * activeInstance_;
         //
         // The DataReader which is currently running readData (), if any;
         // otherwise NULL.
d79 4
a82 4
      static bool errorHasOccurred_;
         //
         // True, iff an error has occurred during readData for any instance of
         // this class during the program process.
d84 3
a86 3
      //------------------------------------------------------------------------
      // Non-static private member data.
      //------------------------------------------------------------------------
d88 3
a90 3
      WitString inputFileName_;
         //
         // The name of inputFile_.
d92 4
a95 4
      FILE * inputFile_;
         //
         // The input data file being read.
   };
@


1.18
log
@[error recovery]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.17
log
@Minor update.
@
text
@d65 2
a66 1
         // Performs the aspects of readData that are protected by a try block.
@


1.16
log
@[error recovery]
@
text
@d63 1
a63 1
      void innerReadData (const char * fileName);
d65 1
a65 1
         // Performs the main action of readData.
@


1.15
log
@[error recovery]
@
text
@a52 5
      void recordError ();
         //
         // Records the fact that the current API function is being aborted for
         // a severe or fatal error.

d63 4
@


1.14
log
@Experiment for MS trouble with WitErrorExc.
@
text
@a44 6
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, thisReadDataActive)

      //------------------------------------------------------------------------
d58 4
a77 6
         // (Not yet implemented)

      static bool anyReadDataActive_;
         //
         // True, iff a call to readData for any DataReader is currently in
         // progress.
a87 5
      bool thisReadDataActive_;
         //
         // True, iff a call to readData for this DataReader is currently in
         // progress.

@


1.13
log
@[error recovery]
@
text
@d76 6
@


1.12
log
@[multi-thread]
@
text
@d48 1
a48 1
      accessFunc (bool, readingData)
d59 5
d73 1
a73 1
      // Private member data.
d78 1
a78 1
         // true, iff a call to readData for any DataReader is currently in
d81 10
a90 1
      bool readingData_;
d92 1
a92 1
         // true, iff a call to readData for this DataReader is currently in
@


1.11
log
@[multi-thread]
@
text
@d71 5
d78 2
a79 1
         // true, iff readData is currently being invoked.
@


1.10
log
@[exceptions]
@
text
@d20 1
d28 1
a28 1
class WitDataReader
d36 1
a36 3
      WitDataReader (WitProblem * theProblem);
         //
         // myProblem_ <-- theProblem.
d48 1
a48 2
      accessFunc (WitMsgFacility &, myMsgFac)
      accessFunc (bool,             readingData)
d56 1
a56 1
         // Reads an input data file for myProblem_.
a70 12
      WitProblem * const myProblem_;
         //
         // The Problem that owns this DataReader.

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFacility for this DataReader.

      WitApiMgr * myApiMgr_;
         //
         // The ApiMgr for this DataReader.

@


1.9
log
@Continued implementation of PIP.
@
text
@a68 8
      void setUpEnv () const;
         //
         // Sets up the WIT environment for data reading.

      void restoreEnv () const;
         //
         // Restores the WIT environment after data reading.

@


1.8
log
@Internal changes.
@
text
@d27 1
a27 1
class WitDataReader: public WitUtil
@


1.7
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@d50 1
a50 1
      accessFunc (WitBoolean,       readingData)
d93 1
a93 1
      WitBoolean readingData_;
d95 1
a95 1
         // TRUE, iff readData is currently being invoked.
@


1.6
log
@Changed name of String.h to be Str.h to avoid windows build problems
@
text
@d69 1
a69 1
      void setupEnv () const;
@


1.5
log
@Some minor changes.
@
text
@d19 1
a19 1
#include <String.h>
@


1.4
log
@Refactoring for selection splitting.
@
text
@d19 1
a19 1
#include <Vector.h>
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d67 1
a67 3
      copyCtorAndAssignment (WitDataReader);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d27 1
a27 1
class WitDataReader
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
