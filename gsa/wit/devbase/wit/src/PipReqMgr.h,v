head	1.9;
access;
symbols
	sce_5_01_20080919:1.6;
locks; strict;
comment	@ * @;


1.9
date	2011.09.28.23.49.55;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.09.24.00.28.18;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.08.30.20.17.56;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.07.11.19.29.59;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.07.09.23.01.15;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.07.05.21.51.37;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.29.21.57.51;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.08.03.18.59.32;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.03.17.38.33;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PipReqMgrH
#define PipReqMgrH

//------------------------------------------------------------------------------
// Header file: "PipReqMgr.h"
//
// Contains the declaration of class PipReqMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PtrSched.h>
#include <ObjStack.h>
#include <PairStack.h>

//------------------------------------------------------------------------------
// Class PipReqMgr
//
// "Post-Implosion Pegging Requirement Manager"
//
// Responsible for managing the requirements in PIP.
//
// Implemented in PipReq.C.
//------------------------------------------------------------------------------

class WitPipReqMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipReqMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPipReqMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool hasReqsFor (WitOperation * theOpn, WitPeriod execPer);
         //
         // Returns true, iff there is at least one requirement for theOpn in
         // execPer.

      WitPipReqSrc * newReqSrcForSeqNo (int theSeqNo);
         //
         // Constructs and returns a new SrcReqSrc for theSeqNo.

      void addReq (
            WitPart *      thePart,
            WitPeriod      fillPer,
            WitPipReqSrc * theReqSrc,
            double         incReqVol);
         //
         // Adds (theReqSrc, incReqVol) to the list of requirements for thePart
         // in fillPer.

      void addReq (
            WitBopEntry *  theBopEnt,
            WitPeriod      execPer,
            WitPipReqSrc * theReqSrc,
            double         incExecVol);
         //
         // Adds (theReqSrc, incExecVol) to the list of requirements for
         // theBopEnt in execPer.

      void getCurReqList (WitPipReqList & theReqList);
         //
         // Transfers the requirements in the current requirement list to
         // theReqList.

      void loadCurReqList (WitPart * thePart, WitPeriod fillPer);
         //
         // Transfers the requirements for thePart in fillPer to the current
         // requirement list. Sorts and consolidates the list, as well.

      void loadCurReqList (WitOperation * theOpn, WitPeriod execPer);
         //
         // Determines the requirements for theOpn in execPer and loads them
         // into the current requirement list.

      void clearCurReqList ();
         //
         // Clears curReqList_.

      void initReqListItr ();
         //
         // Initializes requirement list iteration.

      void advanceReqListItr (
            double &         netReqVol,
            WitPipReqSrc * & theReqSrc,
            double &         incReqVol);
         //
         // Advances requirement list iteration by no more than netReqVol units,
         // sets theReqSrc and incReqVol to the current PipReqSrc and
         // incremental requirement volume, and decrements netReqVol by
         // incReqVol.

      void advanceReqListItr (
            WitPipReqSrc * & theReqSrc,
            double &         incReqVol);
         //
         // Advances requirement list iteration and sets theReqSrc and incReqVol
         // to the current PipReqSrc and incremental requirement volume.

      bool finishedReqListItr ();
         //
         // Returns true, iff requirement list iteration is finished.

      void prtSizes ();
         //
         // Prints the maximum size and capacity of myReqSpecVec_.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildSeqEls ();
         //
         // Builds the PipSeqEls owned by this PipReqMgr.

      void loadReqsFromOne (WitOperation * theOpn, WitPeriod execPer);
         //
         // Assuming theOpn has exactly one BopEntry eligible for explosion at
         // execPer, this function loads the requirements from that BopEntry at
         // execPer into the current requirement list.

      void mergeReqs (WitOperation * theOpn, WitPeriod execPer);
         //
         // Merges the requirements in execPer for each of the BopEntries for
         // theOpn and loads them into the current requirement list.

      double minIncReqVol (WitOperation * theOpn, WitPeriod execPer);
         //
         // Returns the minimum incReqVol for the first PipReqSpec for each
         // BopEntry for theOpn in execPer.
         // Returns -1, if there are no more PipReqSpecs for the BopEntries for
         // theOpn in execPer.
 
      void extractReqSrcs ( 
            WitOperation *      theOpn,
            WitPeriod           execPer,
            double              deltaIncReqVol,
            WitPipReqSrcStack & theReqSrcs);
         //
         // Sets theReqSrcs to consist of the PipReqSrc for the first
         // PipReqSpec for each BopEntry for theOpn in execPer.
         // Removes deltaIncReqVol units of incReqVol from the beginning of the
         // ReqList for each BopEntry for theOpn in execPer.

      void sortReqList ();
         //
         // Sorts and consolidates curReqList_.

      void loadReqSpecVec ();
         //
         // Converts the ReqPairs in curReqList_ into PipReqSpecs and stores
         // them in myReqSpecVec_.

      void expandReqSpecVec ();
         //
         // Expands myReqSpecVec_ as needed.

      bool compareReqSpecs (
            WitPipReqSpec * theReqSpec1,
            WitPipReqSpec * theReqSpec2);
         //
         // Returns true, iff theReqSpec1 belongs ahead of theReqSpec2 in
         // myReqSpecVec_.

      void unloadReqSpecVec ();
         //
         // Converts the PipReqSpecs in myReqSpecVec_ to ReqPairs,
         // consolidates them, and stores them in curReqList_.

      bool hasMultiExp (WitOperation * theOpn, WitPeriod execPer);
         //
         // Returns true, iff theOpn has more than one BopEntry eligible for
         // explosion at execution period execPer.

      bool expEligible (WitBopEntry * theBopEnt, WitPeriod execPer);
         //
         // Returns true, iff theBopEnt is eligible for explosion at execution
         // period execPer.

      void prtCurReqListBeforeSort ();
         //
         // Prints curReqList_ before sorting.

      void prtCurReqListAfterSort ();
         //
         // Prints curReqList_ after sorting.

      void prtCurReqList (WitOperation * theOpn, WitPeriod execPer);
         //
         // Prints curReqList_ after loading from theOpn in execPer.

      void prtBopEntReqs (WitOperation * theOpn, WitPeriod execPer);
         //
         // Prints the requirements in execPer at each BopEntry for theOpn.

      void prtReqList (const WitPipReqList & theReqList);
         //
         // Prints theReqList.

      noCopyCtorAssign (WitPipReqMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrVec <WitPipSeqEl> mySeqElVec_;
         //
         // mySeqElVec_[theSeqNo] is the PipSeqEl owned by this PipReqMgr
         // whose sequence number is theSeqNo.

      WitPipReqSrcStack myReqSrcs_;
         //
         // The PipReqSrcs owned by this PipReqMgr.

      WitPipReqSrc * myVacReqSrc_;
         //
         // The PipReqSrc owned by this PipReqMgr whose PipSeqEl is the
         // vacuous PipSeqEl.

      WitPtrSched <WitPart, WitPipReqList> myPartReqs_;
         //
         // myPartReqs_.myElemAt (thePart, fillPer) is the list of requirement
         // pairs for thePart in fillPer.

      WitPtrSched <WitBopEntry, WitPipReqList> myBopEntReqs_;
         //
         // myBopEntReqs_.myElemAt (theBopEnt, execPer) is the list of
         // requirement pairs for theBopEnt in execPer.

      WitPtrVec <WitPipReqSpec> myReqSpecVec_;
         //
         // The set of active PipReqSpecs owned by the PipReqMgr.
         // They are stored in this vector, so that they can be sorted.

      int nActReqSpecs_;
         //
         // The number of PipReqSpecs currently active.

      int maxActReqSpecs_;
         //
         // Maximim number of PipReqSpecs ever active.

      WitPipReqList curReqList_;
         //
         // The current requirement list for this PipReqMgr.
         // The list of pairs, (theReqSrc, incReqVol), indicating that incReqVol
         // units of requirement for the current Part and Period are pegged to
         // theReqSrc.

      WitPipReqListItr myReqListItr_;
         //
         // The iterator that implements requirement list iteration.

      WitPipReqSrc * curReqSrc_;
         //
         // The current PipReqSrc for requirement list iteration.

      double incReqVolCur_;
         //
         // The current incremental requirement volume for requirement list
         // iteration.
   };

#endif
@


1.8
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.7
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d35 2
a36 141
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPipReqMgr (WitProblem *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitPipReqMgr ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

bool hasReqsFor (WitOperation * theOpn, WitPeriod execPer);
//
// Returns true, iff there is at least one requirement for theOpn in
// execPer.

WitPipReqSrc * newReqSrcForSeqNo (int theSeqNo);
//
// Constructs and returns a new SrcReqSrc for theSeqNo.

void addReq (
WitPart *      thePart,
WitPeriod      fillPer,
WitPipReqSrc * theReqSrc,
double         incReqVol);
//
// Adds (theReqSrc, incReqVol) to the list of requirements for thePart
// in fillPer.

void addReq (
WitBopEntry *  theBopEnt,
WitPeriod      execPer,
WitPipReqSrc * theReqSrc,
double         incExecVol);
//
// Adds (theReqSrc, incExecVol) to the list of requirements for
// theBopEnt in execPer.

void getCurReqList (WitPipReqList & theReqList);
//
// Transfers the requirements in the current requirement list to
// theReqList.

void loadCurReqList (WitPart * thePart, WitPeriod fillPer);
//
// Transfers the requirements for thePart in fillPer to the current
// requirement list. Sorts and consolidates the list, as well.

void loadCurReqList (WitOperation * theOpn, WitPeriod execPer);
//
// Determines the requirements for theOpn in execPer and loads them
// into the current requirement list.

void clearCurReqList ();
//
// Clears curReqList_.

void initReqListItr ();
//
// Initializes requirement list iteration.

void advanceReqListItr (
double &         netReqVol,
WitPipReqSrc * & theReqSrc,
double &         incReqVol);
//
// Advances requirement list iteration by no more than netReqVol units,
// sets theReqSrc and incReqVol to the current PipReqSrc and
// incremental requirement volume, and decrements netReqVol by
// incReqVol.

void advanceReqListItr (
WitPipReqSrc * & theReqSrc,
double &         incReqVol);
//
// Advances requirement list iteration and sets theReqSrc and incReqVol
// to the current PipReqSrc and incremental requirement volume.

bool finishedReqListItr ();
//
// Returns true, iff requirement list iteration is finished.

void prtSizes ();
//
// Prints the maximum size and capacity of myReqSpecVec_.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void buildSeqEls ();
//
// Builds the PipSeqEls owned by this PipReqMgr.

void loadReqsFromOne (WitOperation * theOpn, WitPeriod execPer);
//
// Assuming theOpn has exactly one BopEntry eligible for explosion at
// execPer, this function loads the requirements from that BopEntry at
// execPer into the current requirement list.

void mergeReqs (WitOperation * theOpn, WitPeriod execPer);
//
// Merges the requirements in execPer for each of the BopEntries for
// theOpn and loads them into the current requirement list.

double minIncReqVol (WitOperation * theOpn, WitPeriod execPer);
//
// Returns the minimum incReqVol for the first PipReqSpec for each
// BopEntry for theOpn in execPer.
// Returns -1, if there are no more PipReqSpecs for the BopEntries for
// theOpn in execPer.

void extractReqSrcs (
WitOperation *      theOpn,
WitPeriod           execPer,
double              deltaIncReqVol,
WitPipReqSrcStack & theReqSrcs);
//
// Sets theReqSrcs to consist of the PipReqSrc for the first
// PipReqSpec for each BopEntry for theOpn in execPer.
// Removes deltaIncReqVol units of incReqVol from the beginning of the
// ReqList for each BopEntry for theOpn in execPer.

void sortReqList ();
//
// Sorts and consolidates curReqList_.

void loadReqSpecVec ();
//
// Converts the ReqPairs in curReqList_ into PipReqSpecs and stores
// them in myReqSpecVec_.
d38 248
a285 109
void expandReqSpecVec ();
//
// Expands myReqSpecVec_ as needed.

bool compareReqSpecs (
WitPipReqSpec * theReqSpec1,
WitPipReqSpec * theReqSpec2);
//
// Returns true, iff theReqSpec1 belongs ahead of theReqSpec2 in
// myReqSpecVec_.

void unloadReqSpecVec ();
//
// Converts the PipReqSpecs in myReqSpecVec_ to ReqPairs,
// consolidates them, and stores them in curReqList_.

bool hasMultiExp (WitOperation * theOpn, WitPeriod execPer);
//
// Returns true, iff theOpn has more than one BopEntry eligible for
// explosion at execution period execPer.

bool expEligible (WitBopEntry * theBopEnt, WitPeriod execPer);
//
// Returns true, iff theBopEnt is eligible for explosion at execution
// period execPer.

void prtCurReqListBeforeSort ();
//
// Prints curReqList_ before sorting.

void prtCurReqListAfterSort ();
//
// Prints curReqList_ after sorting.

void prtCurReqList (WitOperation * theOpn, WitPeriod execPer);
//
// Prints curReqList_ after loading from theOpn in execPer.

void prtBopEntReqs (WitOperation * theOpn, WitPeriod execPer);
//
// Prints the requirements in execPer at each BopEntry for theOpn.

void prtReqList (const WitPipReqList & theReqList);
//
// Prints theReqList.

noCopyCtorAssign (WitPipReqMgr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitPtrVec <WitPipSeqEl> mySeqElVec_;
//
// mySeqElVec_[theSeqNo] is the PipSeqEl owned by this PipReqMgr
// whose sequence number is theSeqNo.

WitPipReqSrcStack myReqSrcs_;
//
// The PipReqSrcs owned by this PipReqMgr.

WitPipReqSrc * myVacReqSrc_;
//
// The PipReqSrc owned by this PipReqMgr whose PipSeqEl is the
// vacuous PipSeqEl.

WitPtrSched <WitPart, WitPipReqList> myPartReqs_;
//
// myPartReqs_.myElemAt (thePart, fillPer) is the list of requirement
// pairs for thePart in fillPer.

WitPtrSched <WitBopEntry, WitPipReqList> myBopEntReqs_;
//
// myBopEntReqs_.myElemAt (theBopEnt, execPer) is the list of
// requirement pairs for theBopEnt in execPer.

WitPtrVec <WitPipReqSpec> myReqSpecVec_;
//
// The set of active PipReqSpecs owned by the PipReqMgr.
// They are stored in this vector, so that they can be sorted.

int nActReqSpecs_;
//
// The number of PipReqSpecs currently active.

int maxActReqSpecs_;
//
// Maximim number of PipReqSpecs ever active.

WitPipReqList curReqList_;
//
// The current requirement list for this PipReqMgr.
// The list of pairs, (theReqSrc, incReqVol), indicating that incReqVol
// units of requirement for the current Part and Period are pegged to
// theReqSrc.

WitPipReqListItr myReqListItr_;
//
// The iterator that implements requirement list iteration.

WitPipReqSrc * curReqSrc_;
//
// The current PipReqSrc for requirement list iteration.

double incReqVolCur_;
//
// The current incremental requirement volume for requirement list
// iteration.
};
@


1.6
log
@ASAP Pegging Order
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d35 141
a175 2
   {
   public:
d177 109
a285 248
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipReqMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPipReqMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool hasReqsFor (WitOperation * theOpn, WitPeriod execPer);
         //
         // Returns true, iff there is at least one requirement for theOpn in
         // execPer.

      WitPipReqSrc * newReqSrcForSeqNo (int theSeqNo);
         //
         // Constructs and returns a new SrcReqSrc for theSeqNo.

      void addReq (
            WitPart *      thePart,
            WitPeriod      fillPer,
            WitPipReqSrc * theReqSrc,
            double         incReqVol);
         //
         // Adds (theReqSrc, incReqVol) to the list of requirements for thePart
         // in fillPer.

      void addReq (
            WitBopEntry *  theBopEnt,
            WitPeriod      execPer,
            WitPipReqSrc * theReqSrc,
            double         incExecVol);
         //
         // Adds (theReqSrc, incExecVol) to the list of requirements for
         // theBopEnt in execPer.

      void getCurReqList (WitPipReqList & theReqList);
         //
         // Transfers the requirements in the current requirement list to
         // theReqList.

      void loadCurReqList (WitPart * thePart, WitPeriod fillPer);
         //
         // Transfers the requirements for thePart in fillPer to the current
         // requirement list. Sorts and consolidates the list, as well.

      void loadCurReqList (WitOperation * theOpn, WitPeriod execPer);
         //
         // Determines the requirements for theOpn in execPer and loads them
         // into the current requirement list.

      void clearCurReqList ();
         //
         // Clears curReqList_.

      void initReqListItr ();
         //
         // Initializes requirement list iteration.

      void advanceReqListItr (
            double &         netReqVol,
            WitPipReqSrc * & theReqSrc,
            double &         incReqVol);
         //
         // Advances requirement list iteration by no more than netReqVol units,
         // sets theReqSrc and incReqVol to the current PipReqSrc and
         // incremental requirement volume, and decrements netReqVol by
         // incReqVol.

      void advanceReqListItr (
            WitPipReqSrc * & theReqSrc,
            double &         incReqVol);
         //
         // Advances requirement list iteration and sets theReqSrc and incReqVol
         // to the current PipReqSrc and incremental requirement volume.

      bool finishedReqListItr ();
         //
         // Returns true, iff requirement list iteration is finished.

      void prtSizes ();
         //
         // Prints the maximum size and capacity of myReqSpecVec_.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildSeqEls ();
         //
         // Builds the PipSeqEls owned by this PipReqMgr.

      void loadReqsFromOne (WitOperation * theOpn, WitPeriod execPer);
         //
         // Assuming theOpn has exactly one BopEntry eligible for explosion at
         // execPer, this function loads the requirements from that BopEntry at
         // execPer into the current requirement list.

      void mergeReqs (WitOperation * theOpn, WitPeriod execPer);
         //
         // Merges the requirements in execPer for each of the BopEntries for
         // theOpn and loads them into the current requirement list.

      double minIncReqVol (WitOperation * theOpn, WitPeriod execPer);
         //
         // Returns the minimum incReqVol for the first PipReqSpec for each
         // BopEntry for theOpn in execPer.
         // Returns -1, if there are no more PipReqSpecs for the BopEntries for
         // theOpn in execPer.
 
      void extractReqSrcs ( 
            WitOperation *      theOpn,
            WitPeriod           execPer,
            double              deltaIncReqVol,
            WitPipReqSrcStack & theReqSrcs);
         //
         // Sets theReqSrcs to consist of the PipReqSrc for the first
         // PipReqSpec for each BopEntry for theOpn in execPer.
         // Removes deltaIncReqVol units of incReqVol from the beginning of the
         // ReqList for each BopEntry for theOpn in execPer.

      void sortReqList ();
         //
         // Sorts and consolidates curReqList_.

      void loadReqSpecVec ();
         //
         // Converts the ReqPairs in curReqList_ into PipReqSpecs and stores
         // them in myReqSpecVec_.

      void expandReqSpecVec ();
         //
         // Expands myReqSpecVec_ as needed.

      bool compareReqSpecs (
            WitPipReqSpec * theReqSpec1,
            WitPipReqSpec * theReqSpec2);
         //
         // Returns true, iff theReqSpec1 belongs ahead of theReqSpec2 in
         // myReqSpecVec_.

      void unloadReqSpecVec ();
         //
         // Converts the PipReqSpecs in myReqSpecVec_ to ReqPairs,
         // consolidates them, and stores them in curReqList_.

      bool hasMultiExp (WitOperation * theOpn, WitPeriod execPer);
         //
         // Returns true, iff theOpn has more than one BopEntry eligible for
         // explosion at execution period execPer.

      bool expEligible (WitBopEntry * theBopEnt, WitPeriod execPer);
         //
         // Returns true, iff theBopEnt is eligible for explosion at execution
         // period execPer.

      void prtCurReqListBeforeSort ();
         //
         // Prints curReqList_ before sorting.

      void prtCurReqListAfterSort ();
         //
         // Prints curReqList_ after sorting.

      void prtCurReqList (WitOperation * theOpn, WitPeriod execPer);
         //
         // Prints curReqList_ after loading from theOpn in execPer.

      void prtBopEntReqs (WitOperation * theOpn, WitPeriod execPer);
         //
         // Prints the requirements in execPer at each BopEntry for theOpn.

      void prtReqList (const WitPipReqList & theReqList);
         //
         // Prints theReqList.

      noCopyCtorAssign (WitPipReqMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrVec <WitPipSeqEl> mySeqElVec_;
         //
         // mySeqElVec_[theSeqNo] is the PipSeqEl owned by this PipReqMgr
         // whose sequence number is theSeqNo.

      WitPipReqSrcStack myReqSrcs_;
         //
         // The PipReqSrcs owned by this PipReqMgr.

      WitPipReqSrc * myVacReqSrc_;
         //
         // The PipReqSrc owned by this PipReqMgr whose PipSeqEl is the
         // vacuous PipSeqEl.

      WitPtrSched <WitPart, WitPipReqList> myPartReqs_;
         //
         // myPartReqs_.myElemAt (thePart, fillPer) is the list of requirement
         // pairs for thePart in fillPer.

      WitPtrSched <WitBopEntry, WitPipReqList> myBopEntReqs_;
         //
         // myBopEntReqs_.myElemAt (theBopEnt, execPer) is the list of
         // requirement pairs for theBopEnt in execPer.

      WitPtrVec <WitPipReqSpec> myReqSpecVec_;
         //
         // The set of active PipReqSpecs owned by the PipReqMgr.
         // They are stored in this vector, so that they can be sorted.

      int nActReqSpecs_;
         //
         // The number of PipReqSpecs currently active.

      int maxActReqSpecs_;
         //
         // Maximim number of PipReqSpecs ever active.

      WitPipReqList curReqList_;
         //
         // The current requirement list for this PipReqMgr.
         // The list of pairs, (theReqSrc, incReqVol), indicating that incReqVol
         // units of requirement for the current Part and Period are pegged to
         // theReqSrc.

      WitPipReqListItr myReqListItr_;
         //
         // The iterator that implements requirement list iteration.

      WitPipReqSrc * curReqSrc_;
         //
         // The current PipReqSrc for requirement list iteration.

      double incReqVolCur_;
         //
         // The current incremental requirement volume for requirement list
         // iteration.
   };
@


1.5
log
@ASAP Pegging Order
@
text
@a53 5
      bool hasReqsFor (WitPart * thePart, WitPeriod fillPer);
         //
         // Returns true, iff there is at least one requirement for thePart in
         // fillPer.

@


1.4
log
@ASAP Pegging Order
@
text
@a35 2
   friend class WitPipMatPgr;

d86 5
@


1.3
log
@ASAP Pegging Order.
@
text
@a22 1
#include <PtrVec.h>
a130 48
      //------------------------------------------------------------------------
      // Public member functions for NPO mode.
      //------------------------------------------------------------------------

      void npoSortReqLists (WitMaterial * theMat);
         //
         // Sorts the requirement lists for theMat in all periods.

      void prepPegMatPerNpo (
            WitMaterial * theMat,
            WitPeriod     pegPer,
            double        theStockVol);
         //
         // Prepares the requirements for pegging for theMat in pegPer to a
         // single attribute in NPO mode.
         // theStockVol is the relevant stock volume on theMat in pegPer.

      void postPegMatPerNpo ();
         //
         // Takes action appropriate just after pegging a single attribute of a
         // Material in a period in NPO mode.

      void postPegMatNpo (
            WitMaterial *      theMat,
            WitTVec <double> & netStockVol,
            double &           unmatchVol);
         //
         // Takes action appropriate just after pegging a single attribute of
         // theMat in all periods in NPO mode.
         // Updates netStockVol, the vector of net stockVols.
         // Sets unmatchVol to the unmatched pegging volume.

      void recPegMatPerNpo (
            WitPeriod      pegPer,
            double         pegVol,
            WitPipReqSrc * theReqSrc);
         //
         // Records the fact that pegVol units were pegged to theReqSrc in
         // pegPer in NPO mode.

      void npoClearReqs (
            WitMaterial * theMat,
            WitPeriod     reqPer,
            double &      totReqVol);
         //
         // Clears the requirements for theMat in reqPer.
         // Sets totReqVol to the total requirement volume.

a227 55
      // Private member functions for NPO mode.
      //------------------------------------------------------------------------

      void npoTruncReqList (
            WitPipReqList & theReqList,
            double &        netBound,
            double &        truncVol);
         //
         // Truncates theReqList so that the total incReqVol is no more than
         // netBound. Sets truncVol to the amount by which theReqList was
         // reduced. Reduces netBound by the total requirement volume in
         // theReqList after truncation.

      void npoMergeReqLists (
                  WitPipReqList & theReqList1,
            const WitPipReqList & theReqList2);
         //
         // Merges copies of the pairs in theReqList2 into theReqList1.

      void npoMatchReqs (
            WitPipReqList & theReqList1,
            WitPipReqList & theReqList2);
         //
         // Finds the requirements that are common to theReqList1 and
         // theReqList2 and removes them from both lists.

      void npoPopOrNull (
            WitPipReqSrc * & theReqSrc,
            double &         incReqVol,
            WitPipReqList &  theReqList);
         //
         // Pops theReqSrc and incReqVol from theReqList, or sets them to NULL
         // and 0.0, if theReqList is empty.

      void npoAdvOrNull (
            WitPipReqSrc * &   theReqSrc,
            double &           incReqVol,
            WitPipReqListItr & theItr);
         //
         // Advances theItr and sets theReqSrc and incReqVol to the result, or
         // to NULL and 0.0, if the advance was unsuccessful.

      double npoTotReqVol (WitPipReqList & theReqList);
         //
         // Computes and returns the total requirement volume in theReqList.
         // Clears theReqList.

      void npoPrtUnmatchedList (
            WitMaterial *         theMat,
            WitPeriod             reqPer,
            const WitPipReqList & unmatchedList);
         //
         // Prints unmatchedList for theMat in reqPer.

      //------------------------------------------------------------------------
a286 10

      WitPipReqList npoReqList_;
         //
         // The working requirement list used in NPO mode.

      WitPtrTVec <WitPipReqList> npoCurPegList_;
         //
         // In NPO mode, npoCurPegList_[pegPer] is the list of requirements on
         // the current Part that were pegged to the current attribute in
         // pegPer.
@


1.2
log
@GPIP migration.
@
text
@d37 2
@


1.1
log
@GPIP migration.
@
text
@d32 1
a32 1
// Implemented in GpipReq.C.
d268 1
a268 1
      void prtReqList (const WitGpipReqList & theReqList);
d279 3
a281 3
            WitGpipReqList & theReqList,
            double &         netBound,
            double &         truncVol);
d289 2
a290 2
                  WitGpipReqList & theReqList1,
            const WitGpipReqList & theReqList2);
d295 2
a296 2
            WitGpipReqList & theReqList1,
            WitGpipReqList & theReqList2);
d304 1
a304 1
            WitGpipReqList & theReqList);
d310 3
a312 3
            WitPipReqSrc * &    theReqSrc,
            double &            incReqVol,
            WitGpipReqListItr & theItr);
d317 1
a317 1
      double npoTotReqVol (WitGpipReqList & theReqList);
d323 3
a325 3
            WitMaterial *          theMat,
            WitPeriod              reqPer,
            const WitGpipReqList & unmatchedList);
d347 1
a347 1
      WitPtrSched <WitPart, WitGpipReqList> myPartReqs_;
d352 1
a352 1
      WitPtrSched <WitBopEntry, WitGpipReqList> myBopEntReqs_;
d370 1
a370 1
      WitGpipReqList curReqList_;
d377 1
a377 1
      WitGpipReqListItr myReqListItr_;
d390 1
a390 1
      WitGpipReqList npoReqList_;
d394 1
a394 1
      WitPtrTVec <WitGpipReqList> npoCurPegList_;
@

