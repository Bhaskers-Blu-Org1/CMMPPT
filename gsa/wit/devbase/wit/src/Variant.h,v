head	1.15;
access;
symbols
	sce_5_01_20080919:1.12
	latest_sce_4_20_20060523:1.9.0.2
	sce_4_20_20060523:1.9
	latest_sce4_20_OSL:1.8.0.2
	sce_4_20_OSL:1.8
	sce_410_withVa:1.8
	sce_4_05_20040511:1.8
	sce_4_00_20040201:1.8
	nextGenBranch:1.6.0.2
	nextGenRoot:1.6
	sce_3_30_20030627:1.6
	EndRw-branch:1.5.0.4
	Root-of-EndRw:1.5
	rwToStl:1.5.0.2
	latest_sce_3_10_20010924:1.4.0.6
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.4.0.4
	sce_3_00_20010601:1.4
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2011.09.28.23.50.38;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.09.24.00.28.54;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.08.30.20.18.21;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.03.02.20.56.22;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.11.22.17.24.35;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.08.17.19.36.40;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.02.17.34.15;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.01.21.05.06;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.24.23.08.18;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.02.22.18.54;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.29.17.57.52;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.50;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.28;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.57.06;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.31;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.31;	author wit;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef VariantH
#define VariantH

//------------------------------------------------------------------------------
// Header file: "Variant.h"
//
// Contains the declaration of class Variant.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class Variant.
//
// Responsible for identifying which variant of the implosion problem is
// under consideration and determining the behavior that depends on this.
// Implemented in Misc.C.
//------------------------------------------------------------------------------

class WitVariant
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitVariant (WitProblem * theProblem);
         //
         // theProblem is the Problem to which this Variant belongs.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitVariant ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitProblem *, myProblem)
      accessFunc (WitMsgFragID, myFragID)
      accessFunc (bool,         internalSoln)
      accessFunc (bool,         compsSecScheds)
      accessFunc (bool,         respectsLotSizes)
      accessFunc (bool,         respectsOptCons)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void configure ();
         //
         // Sets the data members according to which of myProblem's Variants
         // this one is.

      void becomesCurrent ();
         //
         // Sets myProblem ()->currentVariant () to this Variant.

      bool isCurrent ();
         //
         // Returns true, iff this Variant is myProblem ()->currentVariant ().

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitVariant);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitProblem * const myProblem_;
         //
         // The Problem to which this Variant belongs.

      WitMsgFragID myFragID_;
         //
         // The ID for the Msg Frag that identifies this Variant.

      bool internalSoln_;
         //
         // true, iff the implosion solution for this Variant is computed by WIT

      bool compsSecScheds_;
         //
         // true, iff the implosion solution for this Variant is computed by a
         // method that computes secondary schedules: scrapVol, stockVol,
         // cumShipVol.

      bool respectsLotSizes_;
         //
         // true, iff this Variant considers lot sizes.

      bool respectsOptCons_;
         //
         // true, iff this Variant respects all of the contraints for optimizing
         // implosion.
   };

#endif
@


1.14
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.13
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d30 2
a31 50
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitVariant (WitProblem * theProblem);
//
// theProblem is the Problem to which this Variant belongs.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitVariant ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitProblem *, myProblem)
accessFunc (WitMsgFragID, myFragID)
accessFunc (bool,         internalSoln)
accessFunc (bool,         compsSecScheds)
accessFunc (bool,         respectsLotSizes)
accessFunc (bool,         respectsOptCons)

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void configure ();
//
// Sets the data members according to which of myProblem's Variants
// this one is.

void becomesCurrent ();
//
// Sets myProblem ()->currentVariant () to this Variant.

bool isCurrent ();
//
// Returns true, iff this Variant is myProblem ()->currentVariant ().

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d33 81
a113 33
noCopyCtorAssign (WitVariant);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitProblem * const myProblem_;
//
// The Problem to which this Variant belongs.

WitMsgFragID myFragID_;
//
// The ID for the Msg Frag that identifies this Variant.

bool internalSoln_;
//
// true, iff the implosion solution for this Variant is computed by WIT

bool compsSecScheds_;
//
// true, iff the implosion solution for this Variant is computed by a
// method that computes secondary schedules: scrapVol, stockVol,
// cumShipVol.

bool respectsLotSizes_;
//
// true, iff this Variant considers lot sizes.

bool respectsOptCons_;
//
// true, iff this Variant respects all of the contraints for optimizing
// implosion.
};
@


1.12
log
@[disallowed backlog]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d30 50
a79 2
   {
   public:
d81 33
a113 81
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitVariant (WitProblem * theProblem);
         //
         // theProblem is the Problem to which this Variant belongs.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitVariant ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitProblem *, myProblem)
      accessFunc (WitMsgFragID, myFragID)
      accessFunc (bool,         internalSoln)
      accessFunc (bool,         compsSecScheds)
      accessFunc (bool,         respectsLotSizes)
      accessFunc (bool,         respectsOptCons)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void configure ();
         //
         // Sets the data members according to which of myProblem's Variants
         // this one is.

      void becomesCurrent ();
         //
         // Sets myProblem ()->currentVariant () to this Variant.

      bool isCurrent ();
         //
         // Returns true, iff this Variant is myProblem ()->currentVariant ().

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitVariant);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitProblem * const myProblem_;
         //
         // The Problem to which this Variant belongs.

      WitMsgFragID myFragID_;
         //
         // The ID for the Msg Frag that identifies this Variant.

      bool internalSoln_;
         //
         // true, iff the implosion solution for this Variant is computed by WIT

      bool compsSecScheds_;
         //
         // true, iff the implosion solution for this Variant is computed by a
         // method that computes secondary schedules: scrapVol, stockVol,
         // cumShipVol.

      bool respectsLotSizes_;
         //
         // true, iff this Variant considers lot sizes.

      bool respectsOptCons_;
         //
         // true, iff this Variant respects all of the contraints for optimizing
         // implosion.
   };
@


1.11
log
@External optimizing implosion.
@
text
@a54 1
      accessFunc (bool,         respectsAllBounds)
d56 1
a56 1
      accessFunc (bool,         respectsIntegrality)
a104 5
      bool respectsAllBounds_;
         //
         // true, iff this Variant considers all of the bounds in the problem
         // and not just a proper subset.

d109 1
a109 1
      bool respectsIntegrality_;
d111 2
a112 1
         // true, iff this Variant respects integrality contraints.
@


1.10
log
@Removed optimizing implosion with lot sizes.
@
text
@d57 1
d114 4
@


1.9
log
@Updated the copyright date on all source files.
@
text
@a74 5
      void checkOptWithLotSizes ();
         //
         // Updates this Variant for a change in the value of the
         // optWithLotSizes attribute. Valid only for OptVariant.

@


1.8
log
@Continued implementation of PIP.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.7
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d29 1
a29 1
class WitVariant: public WitUtil
@


1.6
log
@Internal changes.
@
text
@d71 4
@


1.5
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d53 4
a56 4
      accessFunc (WitBoolean,   internalSoln)
      accessFunc (WitBoolean,   compsSecScheds)
      accessFunc (WitBoolean,   respectsAllBounds)
      accessFunc (WitBoolean,   respectsLotSizes)
d96 1
a96 1
      WitBoolean internalSoln_;
d98 1
a98 1
         // TRUE, iff the implosion solution for this Variant is computed by WIT
d100 1
a100 1
      WitBoolean compsSecScheds_;
d102 1
a102 1
         // TRUE, iff the implosion solution for this Variant is computed by a
d106 1
a106 1
      WitBoolean respectsAllBounds_;
d108 1
a108 1
         // TRUE, iff this Variant considers all of the bounds in the problem
d111 1
a111 1
      WitBoolean respectsLotSizes_;
d113 1
a113 1
         // TRUE, iff this Variant considers lot sizes.
@


1.4
log
@Refactoring for selection splitting.
@
text
@d71 5
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d77 1
a77 3
      copyCtorAndAssignment (WitVariant);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d19 1
a19 1
#include <typedefs.h>
d29 1
a29 1
class WitVariant
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
