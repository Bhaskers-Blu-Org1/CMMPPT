head	1.46;
access;
symbols
	sce_5_01_20080919:1.40;
locks; strict;
comment	@ * @;


1.46
date	2011.09.28.23.50.34;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2011.09.24.00.28.49;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2011.08.30.20.18.18;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2010.08.19.18.00.15;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2010.03.24.21.31.04;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2010.03.23.22.45.21;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2008.03.03.22.35.44;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2008.02.29.23.24.30;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2008.02.28.00.00.43;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.02.27.23.19.12;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.02.27.22.49.18;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2007.10.08.18.56.37;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2007.09.25.21.03.06;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2007.09.19.17.41.36;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2007.09.07.20.25.12;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2007.09.07.20.10.23;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2007.09.07.15.19.30;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.09.06.18.59.14;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2007.09.05.22.23.58;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2007.09.04.23.01.56;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.09.04.22.20.12;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.08.24.22.14.02;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.08.24.20.17.25;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.08.24.15.48.08;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.08.22.22.45.30;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.08.22.22.16.16;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.08.16.21.27.42;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.08.15.22.10.56;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.08.15.21.36.43;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.08.14.15.03.01;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.08.09.20.45.06;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.08.09.20.17.43;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.08.09.19.30.37;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.08.08.23.27.44;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.08.07.19.17.44;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.08.07.17.35.36;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.08.03.19.07.03;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.08.02.19.39.47;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.07.27.18.58.04;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.07.27.16.33.32;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.07.26.19.23.36;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.07.25.23.18.23;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.07.23.23.08.23;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.07.23.21.19.55;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.06.25.23.12.24;	author rjw;	state dead;
branches;
next	1.1;

1.1
date	2007.06.25.22.30.03;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.46
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef StochVarH
#define StochVarH

//------------------------------------------------------------------------------
// Header file: "StochVar.h"
//
// Contains the declaration of class StochVar.
//------------------------------------------------------------------------------

#include <OptVar.h>
#include <StochLoc.h>
#include <ScenGroup.h>

//------------------------------------------------------------------------------
// class StochVar
//
// An OptVar in a stochastic implosion optimization problem.
//
// Class hierarchy:
//
//    OptVC
//       OptVar
//          StochVar
//             StScrapVar
//             StNonSubVar
//             StSubVar
//             StShipVar
//             StBddVar
//                StExecVar
//                StStockVar
//                StCumShipVar
//             StSlbvVar
//
// Implemented in StochOpt.C.
//------------------------------------------------------------------------------

class WitStochVar: public WitOptVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitStochVar (WitStochLoc *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitStochVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual WitOptProblem * myOptProblem ();
      virtual WitStochVar *   mandStochVar ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void genStSlbvVarIfNeeded ();
         //
         // Generates an StSlbvVar for this StochVar, if it needs one.

      virtual void genStSlbConIfNeeded ();
         //
         // Generates an StSlbCon  for this StochVar, if it needs one.

      virtual double stBoundsCoeffVal ();
         //
         // Computes and returns the value of the Coeff of this StochVar in the
         // stochastic bounds objective.

      virtual void uploadSolnTo (WitScenario * theScenario) = 0;
         //
         // Uploads the primal solution value of this StochVar to theScenario.

      virtual bool isStSlbvVar ();
         //
         // Returns true, iff this StochVar is an StSlbvVar.

      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc    (WitStochLoc *,   myStochLoc)
      accessWrapper (WitScenGroup *,  myScenGroup,  myStochLoc_)
      accessWrapper (double,          totalProb,    myScenGroup ())

   protected:

      //-----------------------------------------------------------------------
      // Protected member functions.
      //-----------------------------------------------------------------------

      accessWrapper (WitPeriod,       myPer,         myStochLoc_)
      accessWrapper (WitStochImpOP *, myStochImpOP,  myStochLoc_)
      accessWrapper (WitScenAttMgr *, myScenAttMgr,  myStochLoc_)
      accessWrapper (const WitList <WitScenario> &, 
                                      myScenarios,   myScenGroup ())
      accessWrapper (WitScenario *,   firstScenario, myScenGroup ())

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual void printSource ();

      //-----------------------------------------------------------------------
      // Private pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual void printItem () = 0;
         //
         // Prints to the optProbFile text identifying the non-StochLoc data
         // from which this StochVar was generated.

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitStochVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitStochLoc * const myStochLoc_;
         //
         // The StochLoc for this StochVar.
   };

#endif
@


1.45
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.44
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d47 2
a48 2
{
public:
d50 3
a52 3
//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------
d54 1
a54 1
WitStochVar (WitStochLoc *);
d56 3
a58 3
//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------
d60 1
a60 1
virtual ~WitStochVar ();
d62 3
a64 3
//-----------------------------------------------------------------------
// Overriding public virtual member functions.
//-----------------------------------------------------------------------
d66 2
a67 2
virtual WitOptProblem * myOptProblem ();
virtual WitStochVar *   mandStochVar ();
d69 3
a71 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d73 3
a75 3
virtual void genStSlbvVarIfNeeded ();
//
// Generates an StSlbvVar for this StochVar, if it needs one.
d77 3
a79 3
virtual void genStSlbConIfNeeded ();
//
// Generates an StSlbCon  for this StochVar, if it needs one.
d81 4
a84 4
virtual double stBoundsCoeffVal ();
//
// Computes and returns the value of the Coeff of this StochVar in the
// stochastic bounds objective.
d86 3
a88 3
virtual void uploadSolnTo (WitScenario * theScenario) = 0;
//
// Uploads the primal solution value of this StochVar to theScenario.
d90 3
a92 3
virtual bool isStSlbvVar ();
//
// Returns true, iff this StochVar is an StSlbvVar.
d94 3
a96 3
//-----------------------------------------------------------------------
// Data access functions.
//-----------------------------------------------------------------------
d98 3
a100 3
accessFunc    (WitStochLoc *,   myStochLoc)
accessWrapper (WitScenGroup *,  myScenGroup,  myStochLoc_)
accessWrapper (double,          totalProb,    myScenGroup ())
d102 1
a102 1
protected:
d104 3
a106 3
//-----------------------------------------------------------------------
// Protected member functions.
//-----------------------------------------------------------------------
d108 6
a113 6
accessWrapper (WitPeriod,       myPer,         myStochLoc_)
accessWrapper (WitStochImpOP *, myStochImpOP,  myStochLoc_)
accessWrapper (WitScenAttMgr *, myScenAttMgr,  myStochLoc_)
accessWrapper (const WitList <WitScenario> &,
myScenarios,   myScenGroup ())
accessWrapper (WitScenario *,   firstScenario, myScenGroup ())
d115 1
a115 1
private:
d117 3
a119 3
//-----------------------------------------------------------------------
// Private member functions.
//-----------------------------------------------------------------------
d121 3
a123 3
//-----------------------------------------------------------------------
// Overriding private virtual member functions.
//-----------------------------------------------------------------------
d125 1
a125 1
virtual void printSource ();
d127 3
a129 3
//-----------------------------------------------------------------------
// Private pure virtual member functions.
//-----------------------------------------------------------------------
d131 4
a134 4
virtual void printItem () = 0;
//
// Prints to the optProbFile text identifying the non-StochLoc data
// from which this StochVar was generated.
d136 3
a138 3
//-----------------------------------------------------------------------
// Other private member functions.
//-----------------------------------------------------------------------
d140 1
a140 1
noCopyCtorAssign (WitStochVar);
d142 3
a144 3
//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------
d146 4
a149 4
WitStochLoc * const myStochLoc_;
//
// The StochLoc for this StochVar.
};
@


1.43
log
@CPLEX
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d47 2
a48 2
   {
   public:
d50 3
a52 3
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------
d54 1
a54 1
      WitStochVar (WitStochLoc *);
d56 3
a58 3
      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------
d60 1
a60 1
      virtual ~WitStochVar ();
d62 3
a64 3
      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------
d66 2
a67 2
      virtual WitOptProblem * myOptProblem ();
      virtual WitStochVar *   mandStochVar ();
d69 3
a71 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d73 3
a75 3
      virtual void genStSlbvVarIfNeeded ();
         //
         // Generates an StSlbvVar for this StochVar, if it needs one.
d77 3
a79 3
      virtual void genStSlbConIfNeeded ();
         //
         // Generates an StSlbCon  for this StochVar, if it needs one.
d81 4
a84 4
      virtual double stBoundsCoeffVal ();
         //
         // Computes and returns the value of the Coeff of this StochVar in the
         // stochastic bounds objective.
d86 3
a88 3
      virtual void uploadSolnTo (WitScenario * theScenario) = 0;
         //
         // Uploads the primal solution value of this StochVar to theScenario.
d90 3
a92 3
      virtual bool isStSlbvVar ();
         //
         // Returns true, iff this StochVar is an StSlbvVar.
d94 3
a96 3
      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------
d98 3
a100 3
      accessFunc    (WitStochLoc *,   myStochLoc)
      accessWrapper (WitScenGroup *,  myScenGroup,  myStochLoc_)
      accessWrapper (double,          totalProb,    myScenGroup ())
d102 1
a102 1
   protected:
d104 3
a106 3
      //-----------------------------------------------------------------------
      // Protected member functions.
      //-----------------------------------------------------------------------
d108 6
a113 6
      accessWrapper (WitPeriod,       myPer,         myStochLoc_)
      accessWrapper (WitStochImpOP *, myStochImpOP,  myStochLoc_)
      accessWrapper (WitScenAttMgr *, myScenAttMgr,  myStochLoc_)
      accessWrapper (const WitList <WitScenario> &, 
                                      myScenarios,   myScenGroup ())
      accessWrapper (WitScenario *,   firstScenario, myScenGroup ())
d115 1
a115 1
   private:
d117 3
a119 3
      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------
d121 3
a123 3
      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------
d125 1
a125 1
      virtual void printSource ();
d127 3
a129 3
      //-----------------------------------------------------------------------
      // Private pure virtual member functions.
      //-----------------------------------------------------------------------
d131 4
a134 4
      virtual void printItem () = 0;
         //
         // Prints to the optProbFile text identifying the non-StochLoc data
         // from which this StochVar was generated.
d136 3
a138 3
      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------
d140 1
a140 1
      noCopyCtorAssign (WitStochVar);
d142 3
a144 3
      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------
d146 4
a149 4
      WitStochLoc * const myStochLoc_;
         //
         // The StochLoc for this StochVar.
   };
@


1.42
log
@Removed OptObj classes.
@
text
@d26 1
a26 1
// An OptVar in a stochastic implosion optimization model.
d66 2
a67 2
      virtual WitOptModel * myOptModel   ();
      virtual WitStochVar * mandStochVar ();
d109 1
a109 1
      accessWrapper (WitStochImpOM *, myStochImpOM,  myStochLoc_)
d133 1
a133 1
         // Prints to the modelFile text identifying the non-StochLoc data
@


1.41
log
@Removed class StBoundsObj.
@
text
@a80 5
      virtual double stochCoeffVal () = 0;
         //
         // Computes and returns the value of the Coeff of this StochVar in the
         // stochastic objective.

@


1.40
log
@Stochastic Implosion
@
text
@d95 4
d105 1
a115 1
      accessWrapper (double,          totalProb,     myScenGroup ())
@


1.39
log
@Stochastic Implosion
@
text
@d26 1
a26 1
// An OptVar in a stochastic implosion optimization problem.
@


1.38
log
@Stochastic Implosion
@
text
@d134 1
a134 1
         // Prints to the optProbFile text identifying the non-StochLoc data
@


1.37
log
@Stochastic Implosion
@
text
@d109 1
a109 1
      accessWrapper (WitStochImpOP *, myStochImpOP,  myStochLoc_)
@


1.36
log
@Stochastic Implosion
@
text
@d66 1
a66 1
      virtual WitOptProb *  myOptProb    ();
@


1.35
log
@Stochastic Implosion
@
text
@d30 1
a30 1
//    OptProbEl
@


1.34
log
@Stochastic Implosion
@
text
@d110 1
@


1.33
log
@Stochastic Implosion
@
text
@d91 1
a91 1
      virtual void uploadSoln () = 0;
d93 1
a93 2
         // Uploads the primal solution value of this StochVar to the object
         // that owns the corresponding aspect of the solution.
d99 2
a100 1
      accessFunc (WitStochLoc *, myStochLoc)
d108 6
a113 8
      accessWrapper (WitPeriod,       myPer,        myStochLoc_)
      accessWrapper (WitScenGroup *,  myScenGroup,  myStochLoc_)
      accessWrapper (WitStochImpOP *, myStochImpOP, myStochLoc_)
      accessWrapper (double,          totalProb,    myScenGroup ())

      accessWrapper (const WitList <WitScenario> &, myScenarios, myScenGroup ())

      WitScenAttMgr * myScenAttMgr ();
@


1.32
log
@Stochastic Implosion
@
text
@d110 1
a110 1
      accessWrapper (WitStochImpOP *, myStochImpOP, myScenGroup ())
d113 4
@


1.31
log
@Stochastic Implosion
@
text
@a85 5
      virtual double stPrimaryCoeffVal () = 0;
         //
         // Computes and returns the value of the Coeff of this StochVar in the
         // stochastic primary objective.

@


1.30
log
@Stochastic Implosion
@
text
@d81 5
@


1.29
log
@Stochastic Implosion
@
text
@d81 1
a81 1
      virtual double stochCoeffVal () = 0;
d84 6
a89 1
         // stochastic objective, excluding the scenario probability.
d111 1
@


1.28
log
@Stochastic Implosion
@
text
@d73 8
@


1.27
log
@Stochastic Implosion
@
text
@d41 1
@


1.26
log
@Stochastic Implosion
@
text
@d37 4
a40 3
//             StExecVar
//             StStockVar
//             StCumShipVar
@


1.25
log
@Stochastic Implosion
@
text
@d34 4
a38 1
//             StShipVar
a39 3
//             StExecVar
//             StNonSubVar
//             StSubVar
@


1.24
log
@Stochastic Implosion
@
text
@d21 1
a21 1
#include <ScenSet.h>
d94 2
a95 2
      accessWrapper (WitScenSet *,    myScenSet,    myStochLoc_)
      accessWrapper (WitStochImpOP *, myStochImpOP, myScenSet ())
@


1.23
log
@Stochastic Implosion
@
text
@d21 1
d93 3
a95 1
      accessWrapper (WitPeriod, myPer, myStochLoc_)
@


1.22
log
@Stochastic Implosion
@
text
@d20 1
a20 1
#include <ScenPer.h>
d51 1
a51 1
      WitStochVar (WitScenPer *);
d84 9
a92 5
      accessFunc    (WitScenPer *,    myScenPer)
      accessFunc    (WitStochLoc *,   myStochLoc)
      accessWrapper (WitStochImpOP *, myStochImpOP, myScenPer_)
      accessWrapper (WitScenario *,   myScenario,   myScenPer_)
      accessWrapper (WitPeriod,       myPer,        myScenPer_)
d112 2
a113 2
         // Prints to the optProbFile text identifying the non-ScenPer
         // data from which this StochVar was generated.
a118 4
      static WitStochLoc * theStochLocFor (WitScenPer * theScenPer);
         //
         // Returns the StochLoc for theScenPer.

a124 4
      WitScenPer * const myScenPer_;
         //
         // The ScenPer for this StochVar.

@


1.21
log
@Stochastic Implosion
@
text
@d85 1
a85 1
      accessFunc    (WitScenSetPer *, myScenSetPer)
d115 1
a115 1
      static WitScenSetPer * theScenSetPerFor (WitScenPer * theScenPer);
d117 1
a117 1
         // Returns the ScenSetPer for theScenPer.
d129 1
a129 1
      WitScenSetPer * const myScenSetPer_;
d131 1
a131 1
         // The ScenSetPer for this StochVar.
@


1.20
log
@Stochastic Implosion
@
text
@d85 1
d115 4
d128 4
@


1.19
log
@Stochastic Implosion
@
text
@a33 1
//             StExecVar
d36 3
@


1.18
log
@Stochastic Implosion
@
text
@d71 1
a71 1
         // stochastic objective.
@


1.17
log
@Stochastic Implosion
@
text
@d33 1
@


1.16
log
@Stochastic Implosion
@
text
@d34 2
@


1.15
log
@Stochastic Implosion
@
text
@d62 1
a62 1
      // Other pubinc member functions.
d70 5
@


1.14
log
@Stochastic Implosion
@
text
@d65 1
a65 1
      virtual double stochCoeffVal () const = 0;
d95 1
a95 1
      virtual void printItem () const = 0;
@


1.13
log
@Stochastic Implosion
@
text
@d58 2
a59 2
      virtual       WitOptProb *   myOptProb    () const;
      virtual const WitStochVar *  mandStochVar () const;
d89 1
a89 1
      virtual void printSource () const;
@


1.12
log
@Stochastic Implosion
@
text
@d58 11
a68 1
      virtual WitOptProb * myOptProb () const;
@


1.11
log
@Stochastic Implosion
@
text
@d35 1
a35 1
// Implemented in StOptMisc.C.
@


1.10
log
@Stochastic Implosion
@
text
@d35 1
a35 1
// Implemented in StochVars.C.
@


1.9
log
@Stochastic Implosion
@
text
@d64 4
a67 3
      accessFunc    (WitScenPer *,  myScenPer)
      accessWrapper (WitScenario *, myScenario, myScenPer_)
      accessWrapper (WitPeriod,     myPer,      myScenPer_)
d82 9
@


1.8
log
@Stochastic Implosion
@
text
@d20 1
d64 3
a66 1
      accessFunc (WitScenPer *, myScenPer)
@


1.7
log
@Stochastic Implosion
@
text
@a70 2
      noCopyCtorAssign (WitStochVar);

d78 6
@


1.6
log
@Stochastic Implosion
@
text
@d31 1
@


1.5
log
@Stochastic Implosion
@
text
@d44 1
a44 1
      WitStochVar (WitScenario *, WitPeriod);
d62 1
a62 2
      accessFunc (WitScenario *, myScenario)
      accessFunc (WitPeriod,     myPer)
a71 4
      static WitStochImpOP * theStochImpOPFor (WitScenario * theScenario);
         //
         // Returns the StochImpOP for theScenario.

d82 1
a82 5
      WitScenario * const myScenario_;
         //
         // The Scenario for this StochVar.

      const WitPeriod myPer_;
d84 1
a84 1
         // The Period for this StochVar.
@


1.4
log
@Stochastic Implosion
@
text
@a58 4
      // Other public member functions.
      //-----------------------------------------------------------------------

      //-----------------------------------------------------------------------
@


1.3
log
@Stochastic Implosion
@
text
@d66 2
a67 1
      accessFunc (WitPeriod, myPer)
@


1.2
log
@Stochastic Implosion
@
text
@d16 1
a16 3
// Contains the declaration the following classes:
//
//    StochVar
d31 3
d53 1
a53 1
      // Data access functions.
d56 1
a56 1
      accessFunc (WitPeriod, myPer)
d62 6
d76 4
@


1.1
log
@Stochastic Implosion
@
text
@@

