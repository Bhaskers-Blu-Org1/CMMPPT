head	1.26;
access;
symbols
	sce_5_01_20080919:1.21
	latest_sce_4_20_20060523:1.15.0.2
	sce_4_20_20060523:1.15
	latest_sce4_20_OSL:1.14.0.2
	sce_4_20_OSL:1.14
	sce_410_withVa:1.11
	sce_4_05_20040511:1.11
	sce_4_00_20040201:1.9
	nextGenBranch:1.8.0.2
	nextGenRoot:1.8
	sce_3_30_20030627:1.8
	EndRw-branch:1.6.0.4
	Root-of-EndRw:1.6
	rwToStl:1.6.0.2
	latest_sce_3_10_20010924:1.5.0.6
	sce_3_10_20010924:1.5
	latest_sce_3_00_20010601:1.5.0.4
	sce_3_00_20010601:1.5
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2011.09.28.23.49.01;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.09.24.00.27.19;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2011.08.30.20.17.15;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2010.06.29.22.32.30;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2009.11.17.23.45.47;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.08.01.22.41.55;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.08.01.21.28.03;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.04.30.21.52.08;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.04.02.21.21.19;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2006.09.21.15.42.25;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.09.19.17.50.54;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.02.17.33.54;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.11.01.18.29.12;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.18.20.56.21;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2005.09.13.19.31.56;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.10.22.53.18;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.03.02.19.17.52;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.12.01.21.05.03;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.14.20.12.54;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.02.22.18.18;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.22.14.32.02;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.20.00.44.14;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.36;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.18;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.18;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.18;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.18;	author wit;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef AssocH
#define AssocH

//------------------------------------------------------------------------------
// Header file: "Assoc.h"
//
// Contains the declaration of class ProbAssoc.
//------------------------------------------------------------------------------

#include <Problem.h>

//------------------------------------------------------------------------------
// Class ProbAssoc
//
// "Problem Associate"
// A ProbAssoc is simply an object that's associated with a particular Problem.
// This class provides a number of convenient wrappers around Problem functions.
//
// Implemented in Misc.C.
//
// Class Hierarchy:
//
// ProbAssoc
//    <Many Derived Classes>
//------------------------------------------------------------------------------

class WitProbAssoc
   {
   public:

      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitProblem *, myProblem)

      //------------------------------------------------------------------------
      // Wrappers for class Problem.
      //------------------------------------------------------------------------

      accessWrapper (WitCompMgr *,       myCompMgr,       myProblem_)
      accessWrapper (WitGlobalComp *,    myGlobalComp,    myProblem_)
      accessWrapper (WitOptComp *,       myOptComp,       myProblem_)
      accessWrapper (WitRun *,           myWitRun,        myProblem_)
      accessWrapper (WitApiMgr *,        myApiMgr,        myProblem_)
      accessWrapper (WitMsgFacility &,   myMsgFac,        myProblem_)
      accessWrapper (WitPreprocessor *,  myPreprocessor,  myProblem_)
      accessWrapper (WitPostprocessor *, myPostprocessor, myProblem_)
      accessWrapper (WitDetOptImpMgr *,  myDetOptImpMgr,  myProblem_)
      accessWrapper (WitHeurAllMgr *,    myHeurAllMgr,    myProblem_)
      accessWrapper (WitStochImpMgr *,   myStochImpMgr,   myProblem_)
      accessWrapper (WitOrigMrpExp *,    myOrigMrpExp,    myProblem_)
      accessWrapper (WitFSS *,           myFSS,           myProblem_)
      accessWrapper (WitDataWriter *,    myDataWriter,    myProblem_)
      accessWrapper (FILE *,             solnFile,        myProblem_)
      accessWrapper (int,                nPeriods,        myProblem_)
      accessWrapper (WitPeriod,          lastPeriod,      myProblem_)
      accessWrapper (bool,               wit34Compatible, myProblem_)

      inline void writeSolnValue (double val) const
         {
         myProblem_->writeSolnValue (val);
         }

      //-----------------------------------------------------------------------
      // Other wrappers.
      //-----------------------------------------------------------------------

      FILE * msgFile () const;
         //
         // Wrapper for myMsgFac ().

      bool tempParIsSet (int);
         //
         // Wrapper for myGlobalComp ().

      FILE * openFile (const char * fileName, const char * mode);
         //
         // Wrapper for myProblem_->mySession ().

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      bool fssComputed () const;
         //
         // Returns true, iff the FSS has been computed.

      bool selPrintLevelAt (int theLevel);
         //
         // Returns true, iff myGlobalComp ()->selPrintLevel () >= theLevel.

   protected:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitProbAssoc (WitProblem *);

      WitProbAssoc (const WitProbAssoc *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      ~WitProbAssoc ();

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitProbAssoc);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitProblem * myProblem_;
         //
         // The Problem with which this ProbAssoc is associated.
   };

#endif
@


1.25
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.24
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d37 2
a38 78
{
public:

//-----------------------------------------------------------------------
// Data access functions.
//-----------------------------------------------------------------------

accessFunc (WitProblem *, myProblem)

//------------------------------------------------------------------------
// Wrappers for class Problem.
//------------------------------------------------------------------------

accessWrapper (WitCompMgr *,       myCompMgr,       myProblem_)
accessWrapper (WitGlobalComp *,    myGlobalComp,    myProblem_)
accessWrapper (WitOptComp *,       myOptComp,       myProblem_)
accessWrapper (WitRun *,           myWitRun,        myProblem_)
accessWrapper (WitApiMgr *,        myApiMgr,        myProblem_)
accessWrapper (WitMsgFacility &,   myMsgFac,        myProblem_)
accessWrapper (WitPreprocessor *,  myPreprocessor,  myProblem_)
accessWrapper (WitPostprocessor *, myPostprocessor, myProblem_)
accessWrapper (WitDetOptImpMgr *,  myDetOptImpMgr,  myProblem_)
accessWrapper (WitHeurAllMgr *,    myHeurAllMgr,    myProblem_)
accessWrapper (WitStochImpMgr *,   myStochImpMgr,   myProblem_)
accessWrapper (WitOrigMrpExp *,    myOrigMrpExp,    myProblem_)
accessWrapper (WitFSS *,           myFSS,           myProblem_)
accessWrapper (WitDataWriter *,    myDataWriter,    myProblem_)
accessWrapper (FILE *,             solnFile,        myProblem_)
accessWrapper (int,                nPeriods,        myProblem_)
accessWrapper (WitPeriod,          lastPeriod,      myProblem_)
accessWrapper (bool,               wit34Compatible, myProblem_)

inline void writeSolnValue (double val) const
{
myProblem_->writeSolnValue (val);
}

//-----------------------------------------------------------------------
// Other wrappers.
//-----------------------------------------------------------------------

FILE * msgFile () const;
//
// Wrapper for myMsgFac ().

bool tempParIsSet (int);
//
// Wrapper for myGlobalComp ().

FILE * openFile (const char * fileName, const char * mode);
//
// Wrapper for myProblem_->mySession ().

//-----------------------------------------------------------------------
// Other public member functions.
//-----------------------------------------------------------------------

bool fssComputed () const;
//
// Returns true, iff the FSS has been computed.

bool selPrintLevelAt (int theLevel);
//
// Returns true, iff myGlobalComp ()->selPrintLevel () >= theLevel.

protected:

//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------

WitProbAssoc (WitProblem *);

WitProbAssoc (const WitProbAssoc *);

//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------
d40 94
a133 18
~WitProbAssoc ();

private:

//-----------------------------------------------------------------------
// Private member functions.
//-----------------------------------------------------------------------

noCopyCtorAssign (WitProbAssoc);

//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------

WitProblem * myProblem_;
//
// The Problem with which this ProbAssoc is associated.
};
@


1.23
log
@Selection reuse.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d37 78
a114 2
   {
   public:
d116 18
a133 94
      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitProblem *, myProblem)

      //------------------------------------------------------------------------
      // Wrappers for class Problem.
      //------------------------------------------------------------------------

      accessWrapper (WitCompMgr *,       myCompMgr,       myProblem_)
      accessWrapper (WitGlobalComp *,    myGlobalComp,    myProblem_)
      accessWrapper (WitOptComp *,       myOptComp,       myProblem_)
      accessWrapper (WitRun *,           myWitRun,        myProblem_)
      accessWrapper (WitApiMgr *,        myApiMgr,        myProblem_)
      accessWrapper (WitMsgFacility &,   myMsgFac,        myProblem_)
      accessWrapper (WitPreprocessor *,  myPreprocessor,  myProblem_)
      accessWrapper (WitPostprocessor *, myPostprocessor, myProblem_)
      accessWrapper (WitDetOptImpMgr *,  myDetOptImpMgr,  myProblem_)
      accessWrapper (WitHeurAllMgr *,    myHeurAllMgr,    myProblem_)
      accessWrapper (WitStochImpMgr *,   myStochImpMgr,   myProblem_)
      accessWrapper (WitOrigMrpExp *,    myOrigMrpExp,    myProblem_)
      accessWrapper (WitFSS *,           myFSS,           myProblem_)
      accessWrapper (WitDataWriter *,    myDataWriter,    myProblem_)
      accessWrapper (FILE *,             solnFile,        myProblem_)
      accessWrapper (int,                nPeriods,        myProblem_)
      accessWrapper (WitPeriod,          lastPeriod,      myProblem_)
      accessWrapper (bool,               wit34Compatible, myProblem_)

      inline void writeSolnValue (double val) const
         {
         myProblem_->writeSolnValue (val);
         }

      //-----------------------------------------------------------------------
      // Other wrappers.
      //-----------------------------------------------------------------------

      FILE * msgFile () const;
         //
         // Wrapper for myMsgFac ().

      bool tempParIsSet (int);
         //
         // Wrapper for myGlobalComp ().

      FILE * openFile (const char * fileName, const char * mode);
         //
         // Wrapper for myProblem_->mySession ().

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      bool fssComputed () const;
         //
         // Returns true, iff the FSS has been computed.

      bool selPrintLevelAt (int theLevel);
         //
         // Returns true, iff myGlobalComp ()->selPrintLevel () >= theLevel.

   protected:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitProbAssoc (WitProblem *);

      WitProbAssoc (const WitProbAssoc *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      ~WitProbAssoc ();

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitProbAssoc);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitProblem * myProblem_;
         //
         // The Problem with which this ProbAssoc is associated.
   };
@


1.22
log
@Removing objective #2.
@
text
@d98 4
@


1.21
log
@Stochastic Implosion
@
text
@a81 2
      WitObjFunc * objChoice () const;

@


1.20
log
@Stochastic Implosion
@
text
@d58 1
a58 1
      accessWrapper (WitOptImploder *,   myOptImploder,   myProblem_)
@


1.19
log
@Stochastic Implosion
@
text
@d25 3
a27 3
// An instance of class ProbAssoc is simply an object that's associated with
// a particular Problem. This class provides a number of convenient wrappers
// around Problem functions.
a40 12
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitProbAssoc (WitProblem *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      ~WitProbAssoc ();

      //-----------------------------------------------------------------------
d100 16
@


1.18
log
@Stochastic implosion.
@
text
@d72 1
a72 1
      accessWrapper (WitStochMgr *,      myStochMgr,      myProblem_)
@


1.17
log
@App controlled opt implosion.
@
text
@d72 1
@


1.16
log
@App controlled opt implosion.
@
text
@a78 3
      accessWrapper (WitDataAlt *,       noOpAlt,         myProblem_)
      accessWrapper (WitDataAlt *,       postprocAlt,     myProblem_)
      accessWrapper (WitDataAlt *,       preprocAlt,      myProblem_)
@


1.15
log
@Updated the copyright date on all source files.
@
text
@d62 20
a81 15
      accessWrapper (WitCompMgr *,     myCompMgr,       myProblem_)
      accessWrapper (WitGlobalComp *,  myGlobalComp,    myProblem_)
      accessWrapper (WitOptComp *,     myOptComp,       myProblem_)
      accessWrapper (WitRun *,         myWitRun,        myProblem_)
      accessWrapper (WitApiMgr *,      myApiMgr,        myProblem_)
      accessWrapper (WitMsgFacility &, myMsgFac,        myProblem_)
      accessWrapper (WitOptImploder *, myOptImploder,   myProblem_)
      accessWrapper (WitDataWriter *,  myDataWriter,    myProblem_)
      accessWrapper (FILE *,           solnFile,        myProblem_)
      accessWrapper (int,              nPeriods,        myProblem_)
      accessWrapper (WitPeriod,        lastPeriod,      myProblem_)
      accessWrapper (bool,             wit34Compatible, myProblem_)
      accessWrapper (WitDataAlt *,     noOpAlt,         myProblem_)
      accessWrapper (WitDataAlt *,     postprocAlt,     myProblem_)
      accessWrapper (WitDataAlt *,     preprocAlt,      myProblem_)
@


1.14
log
@Corrected a declaration.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.13
log
@Made WIT's use of errno relatively thread-safe.
@
text
@d97 1
a97 1
      FILE * openFile (const char * fileName, const WitString & mode);
@


1.12
log
@[multi-thread]
@
text
@d97 1
a97 1
      FILE * openFile (const WitString & fileName, const WitString & mode);
@


1.11
log
@Double Precision.
@
text
@d62 15
a76 15
      accessWrapper (WitCompMgr *,     myCompMgr,       myProblem ())
      accessWrapper (WitGlobalComp *,  myGlobalComp,    myProblem ())
      accessWrapper (WitOptComp *,     myOptComp,       myProblem ())
      accessWrapper (WitRun *,         myWitRun,        myProblem ())
      accessWrapper (WitApiMgr *,      myApiMgr,        myProblem ())
      accessWrapper (WitMsgFacility &, myMsgFac,        myProblem ())
      accessWrapper (WitOptImploder *, myOptImploder,   myProblem ())
      accessWrapper (WitDataWriter *,  myDataWriter,    myProblem ())
      accessWrapper (FILE *,           solnFile,        myProblem ())
      accessWrapper (int,              nPeriods,        myProblem ())
      accessWrapper (WitPeriod,        lastPeriod,      myProblem ())
      accessWrapper (bool,             wit34Compatible, myProblem ())
      accessWrapper (WitDataAlt *,     noOpAlt,         myProblem ())
      accessWrapper (WitDataAlt *,     postprocAlt,     myProblem ())
      accessWrapper (WitDataAlt *,     preprocAlt,      myProblem ())
d80 1
a80 1
         myProblem ()->writeSolnValue (val);
d97 4
@


1.10
log
@Double Precision.
@
text
@a77 5
      inline void writeSolnValue (float val) const
         {
         myProblem ()->writeSolnValue (val);
         }

@


1.9
log
@Continued implementation of PIP.
@
text
@d83 5
@


1.8
log
@Continued implementation of proportionate routing.
@
text
@d36 1
a36 1
class WitProbAssoc: public WitUtil
@


1.7
log
@Internal changes.
@
text
@d44 1
a44 9
      WitProbAssoc (WitProblem * theProblem);
         //
         // myProblem_ <-- theProblem.
         // theProblem must not be NULL.

      WitProbAssoc (const WitProbAssoc * theAssoc);
         //
         // myProblem_ <-- theAssoc->myProblem ().
         // theAssoc must not be NULL.
d119 1
a119 1
         // The Problem with which this ProbAssoc is assocaited.
@


1.6
log
@Continued implementation of object iteration.
@
text
@d81 1
a81 1
      accessWrapper (WitBoolean,       wit34Compatible, myProblem ())
d101 1
a101 1
      WitBoolean tempParIsSet (int);
d109 1
a109 1
      WitBoolean fssComputed () const;
d111 1
a111 1
         // Returns TRUE, iff the FSS has been computed.
@


1.5
log
@Implemented and used class SelMgr.
@
text
@d82 1
a82 1
      accessWrapper (WitDataAlt *,     noopAlt,         myProblem ())
@


1.4
log
@Refactoring for selection splitting.
@
text
@d49 1
a49 1
      WitProbAssoc (WitProbAssoc * theAssoc);
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d119 1
a119 3
      copyCtorAndAssignment (WitProbAssoc);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d36 1
a36 1
class WitProbAssoc
d80 1
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
