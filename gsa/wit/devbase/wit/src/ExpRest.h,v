head	1.38;
access;
symbols
	sce_5_01_20080919:1.32
	latest_sce_4_20_20060523:1.32.0.2
	sce_4_20_20060523:1.32
	latest_sce4_20_OSL:1.31.0.2
	sce_4_20_OSL:1.31
	sce_410_withVa:1.31
	sce_4_05_20040511:1.30
	sce_4_00_20040201:1.30
	nextGenBranch:1.30.0.2
	nextGenRoot:1.30
	sce_3_30_20030627:1.30
	EndRw-branch:1.27.0.4
	Root-of-EndRw:1.27
	rwToStl:1.27.0.2
	latest_sce_3_10_20010924:1.11.0.2
	sce_3_10_20010924:1.11
	latest_sce_3_00_20010601:1.9.0.2
	sce_3_00_20010601:1.9
	latest_sce_2_31_20010308:1.8.0.2
	sce_2_31_20010308:1.8
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.38
date	2011.09.28.23.49.20;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2011.09.24.00.27.38;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2011.08.30.20.17.29;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2010.06.29.23.25.14;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2010.06.29.22.32.31;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2010.03.16.22.42.24;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2006.05.02.17.33.58;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2005.01.19.23.50.57;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2003.01.02.22.18.25;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2002.12.30.21.57.24;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2002.12.30.20.37.25;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2002.07.09.19.52.31;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2002.06.06.18.53.36;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2002.05.10.18.02.10;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2002.05.07.20.14.55;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2002.05.03.23.16.37;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2002.04.18.14.02.32;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2002.04.12.21.01.58;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2002.04.11.15.36.28;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2002.02.28.00.08.12;	author bobw;	state Exp;
branches;
next	1.18;

1.18
date	2002.02.20.22.28.06;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2002.02.07.16.57.28;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2002.01.21.21.55.16;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2002.01.14.23.56.08;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.10.22.06.53;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.12.28.18.09.15;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.12.27.23.15.38;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.07.25.16.08.14;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.03.20.07.29;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.26.20.28.07;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.20.00.44.16;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.22.16.18.25;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.05.19.05.29;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.04.22.07.36;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.40;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.21.20.03.22;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.46;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.21;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.21;	author wit;	state Exp;
branches;
next	;


desc
@@


1.38
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ExpRestH
#define ExpRestH

//------------------------------------------------------------------------------
// Header file: "ExpRest.h"
//
// Contains the declaration of class ExpRest.
//------------------------------------------------------------------------------

#include <Part.h>
#include <GlobalComp.h>
#include <Schedule.h>
#include <Mapping.h>
#include <PairStack.h>

//------------------------------------------------------------------------------
// Class ExpRest
//
// "Explosion Restrictor"
// Responsible for the explosion restrictions of penalized execution.
//
// Implemented in PenExec.C.
//------------------------------------------------------------------------------

class WitExpRest: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitExpRest (WitHeurAtor *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitExpRest ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void placeReqs (
            WitPart * srcPart,
            WitPeriod srcPer,
            WitPart * reqPart,
            WitPeriod reqPer);
         //
         // To be called when requirements are being placed on reqPart in
         // reqPer, whose source is srcPart in srcPer.

      void recExpBeyondNet (
            WitPart * thePart, 
            WitPeriod thePer, 
            bool      netForConsEnt);
         //
         // Records the fact that restricted explosion needs to continue after
         // netting supply of thePart in fillPer. netForConsEnt should be true,
         // iff the netting was ConsEntry netting.

      void postExpBomEnt ();
         //
         // To be called just after HeurAtor::explodeBomEntry.

      bool restExpAllowed (WitBopEntry * theBopEnt, WitPeriod fillPer);
         //
         // Returns true, iff restricted explosion thru theBopEnt to fill reqs
         // in fillPer is currently allowed.

      inline bool hasPseudoSup (WitPart * thePart, WitPeriod thePer)
         {
         WitTVec <bool> & theVec = hasPseudoSup_ (thePart);

         return
            theVec.isAllocated ()?
               theVec[thePer]:
               false;
         }
         //
         // Returns true, iff thePart is considered to have pseudo-supply in 
         // thePer.

      void recordFundShortage ();
         //
         // To be called whenever a fundamental shortage occurs.

      void reqPsSupRep (WitPart * thePart, WitPeriod thePer);
         //
         // Requests replenishment of pseudo-supply of thePart in thePer.

      void postTempCommit (bool success);
         //
         // To be called at the end of each temp commit, with success indicating
         // its result.

      void updatePsSup ();
         //
         // Makes updates to pseudo-supply that were requested in the most
         // recent failing temp-commit.

      void startTempMode ();
         //
         // Puts this ExpRest into temp mode.

      void finishTempMode ();
         //
         // Takes this ExpRest out of temp mode.

      void replenishPsSups ();
         //
         // Replenishes pseudo-supplies where this was requested.

      void print ();
         //
         // Prints this ExpRest.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, failRestShortOnly)
      accessFunc (bool, tempMode)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitExpRest);

      void findPosPenalties ();
         //
         // Sets hasPosPenalty_.

      void init (WitPart * thePart);
         //
         // Initializes the pseudo-supply of thePart.

      void exhaustOtherPers (WitMaterial * theMat, WitPeriod fillPer);
         //
         // Sets hasPseudoSup to false, in the appropriate other periods, 
         // given that it's being set to false in fillPer.

      void exhaustPsSup (WitPart * thePart, WitPeriod thePer);
         //
         // Sets hasPseudoSup_ (thePart, thePer) to false.
         // In temp mode, this is done on a temp basis.

      void setUnanReqs (WitPart * thePart, WitPeriod thePer);
         //
         // Sets unanReqs_ (thePart, thePer) to true.

      void printExhRep (
            WitPart * thePart, 
            WitPeriod thePer, 
            bool      firstPer);
         //
         // Prints indicating that the pseudo-supply of thePart in thePer is
         // being exhausted or replenished. firstPer is to be true, iff thePer
         // is the first period considered by the state change.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitHeurAtor * const myHeurAtor_;
         //
         // The HeurAtor to which this ExpRest applies.

      WitMapping <WitOperation, bool> hasPosPenalty_;
         //
         // hasPosPenalty_ (theOpn) is true, iff theOperation or any of its
         // ConsEntries has a positive execPenalty.

      WitSchedule <WitPart, bool> hasPseudoSup_;
         //
         // Data for hasPseudoSup (*, *).

      WitPartPerStack curExhaustReqs_;
         //
         // The set of all (Part, fill period)s for which pseudo-supply 
         // exhaustion has been requested and not yet performed, for the current
         // temp commit.

      WitPartPerStack failExhaustReqs_;
         //
         // Same as curExhaustReqs_, but for the most recent failing temp commit

      bool curFundShort_;
         //
         // true, iff a fundamental shortage was found in the current temp 
         // commit.

      bool failRestShortOnly_;
         //
         // true, iff a restriction shortage was found in the most recent 
         // failing temp commit, but no fundamental shortage.

      WitPartPerStack repReqs_;
         //
         // The set of all (Part, fill period)s for which pseudo-supply 
         // replenishment has been requested and not yet performed.

      WitSchedule <WitPart, bool> unanReqs_;
         //
         // unanReqs_ (thePart, thePer) is true, iff some of the reqs for
         // thePart in thePer came through unanalyzed routings.

      WitPartPerStack unanReqsPairs_;
         //
         // The set of pairs (thePart, thePer) such that
         // unanReqs_ (thePart, thePer) is true.

      bool unanByConsEntNet_;
         //
         // true, iff the heuristic is currently netting / exploding a BomEntry
         // whose requirements have been made unanalyzed by ConsEntry netting.

      bool tempMode_;
         //
         // true, iff this ExpRest is being updated in temp mode.
         // (This is distinct from HeurAtor's temp mode.)

      WitDataRepos * psSupRepos_;
         //
         // DataRepos for cells of hasPseudoSup_ that have been altered during
         // temp mode.
   };

#endif
@


1.37
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.36
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d35 2
a36 45
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitExpRest (WitHeurAtor *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitExpRest ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void placeReqs (
WitPart * srcPart,
WitPeriod srcPer,
WitPart * reqPart,
WitPeriod reqPer);
//
// To be called when requirements are being placed on reqPart in
// reqPer, whose source is srcPart in srcPer.

void recExpBeyondNet (
WitPart * thePart,
WitPeriod thePer,
bool      netForConsEnt);
//
// Records the fact that restricted explosion needs to continue after
// netting supply of thePart in fillPer. netForConsEnt should be true,
// iff the netting was ConsEntry netting.

void postExpBomEnt ();
//
// To be called just after HeurAtor::explodeBomEntry.

bool restExpAllowed (WitBopEntry * theBopEnt, WitPeriod fillPer);
//
// Returns true, iff restricted explosion thru theBopEnt to fill reqs
// in fillPer is currently allowed.
d38 203
a240 160
inline bool hasPseudoSup (WitPart * thePart, WitPeriod thePer)
{
WitTVec <bool> & theVec = hasPseudoSup_ (thePart);

return
theVec.isAllocated ()?
theVec[thePer]:
false;
}
//
// Returns true, iff thePart is considered to have pseudo-supply in
// thePer.

void recordFundShortage ();
//
// To be called whenever a fundamental shortage occurs.

void reqPsSupRep (WitPart * thePart, WitPeriod thePer);
//
// Requests replenishment of pseudo-supply of thePart in thePer.

void postTempCommit (bool success);
//
// To be called at the end of each temp commit, with success indicating
// its result.

void updatePsSup ();
//
// Makes updates to pseudo-supply that were requested in the most
// recent failing temp-commit.

void startTempMode ();
//
// Puts this ExpRest into temp mode.

void finishTempMode ();
//
// Takes this ExpRest out of temp mode.

void replenishPsSups ();
//
// Replenishes pseudo-supplies where this was requested.

void print ();
//
// Prints this ExpRest.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (bool, failRestShortOnly)
accessFunc (bool, tempMode)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitExpRest);

void findPosPenalties ();
//
// Sets hasPosPenalty_.

void init (WitPart * thePart);
//
// Initializes the pseudo-supply of thePart.

void exhaustOtherPers (WitMaterial * theMat, WitPeriod fillPer);
//
// Sets hasPseudoSup to false, in the appropriate other periods,
// given that it's being set to false in fillPer.

void exhaustPsSup (WitPart * thePart, WitPeriod thePer);
//
// Sets hasPseudoSup_ (thePart, thePer) to false.
// In temp mode, this is done on a temp basis.

void setUnanReqs (WitPart * thePart, WitPeriod thePer);
//
// Sets unanReqs_ (thePart, thePer) to true.

void printExhRep (
WitPart * thePart,
WitPeriod thePer,
bool      firstPer);
//
// Prints indicating that the pseudo-supply of thePart in thePer is
// being exhausted or replenished. firstPer is to be true, iff thePer
// is the first period considered by the state change.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitHeurAtor * const myHeurAtor_;
//
// The HeurAtor to which this ExpRest applies.

WitMapping <WitOperation, bool> hasPosPenalty_;
//
// hasPosPenalty_ (theOpn) is true, iff theOperation or any of its
// ConsEntries has a positive execPenalty.

WitSchedule <WitPart, bool> hasPseudoSup_;
//
// Data for hasPseudoSup (*, *).

WitPartPerStack curExhaustReqs_;
//
// The set of all (Part, fill period)s for which pseudo-supply
// exhaustion has been requested and not yet performed, for the current
// temp commit.

WitPartPerStack failExhaustReqs_;
//
// Same as curExhaustReqs_, but for the most recent failing temp commit

bool curFundShort_;
//
// true, iff a fundamental shortage was found in the current temp
// commit.

bool failRestShortOnly_;
//
// true, iff a restriction shortage was found in the most recent
// failing temp commit, but no fundamental shortage.

WitPartPerStack repReqs_;
//
// The set of all (Part, fill period)s for which pseudo-supply
// replenishment has been requested and not yet performed.

WitSchedule <WitPart, bool> unanReqs_;
//
// unanReqs_ (thePart, thePer) is true, iff some of the reqs for
// thePart in thePer came through unanalyzed routings.

WitPartPerStack unanReqsPairs_;
//
// The set of pairs (thePart, thePer) such that
// unanReqs_ (thePart, thePer) is true.

bool unanByConsEntNet_;
//
// true, iff the heuristic is currently netting / exploding a BomEntry
// whose requirements have been made unanalyzed by ConsEntry netting.

bool tempMode_;
//
// true, iff this ExpRest is being updated in temp mode.
// (This is distinct from HeurAtor's temp mode.)

WitDataRepos * psSupRepos_;
//
// DataRepos for cells of hasPseudoSup_ that have been altered during
// temp mode.
};
@


1.35
log
@Selection reuse.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d35 45
a79 2
   {
   public:
d81 160
a240 203
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitExpRest (WitHeurAtor *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitExpRest ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void placeReqs (
            WitPart * srcPart,
            WitPeriod srcPer,
            WitPart * reqPart,
            WitPeriod reqPer);
         //
         // To be called when requirements are being placed on reqPart in
         // reqPer, whose source is srcPart in srcPer.

      void recExpBeyondNet (
            WitPart * thePart, 
            WitPeriod thePer, 
            bool      netForConsEnt);
         //
         // Records the fact that restricted explosion needs to continue after
         // netting supply of thePart in fillPer. netForConsEnt should be true,
         // iff the netting was ConsEntry netting.

      void postExpBomEnt ();
         //
         // To be called just after HeurAtor::explodeBomEntry.

      bool restExpAllowed (WitBopEntry * theBopEnt, WitPeriod fillPer);
         //
         // Returns true, iff restricted explosion thru theBopEnt to fill reqs
         // in fillPer is currently allowed.

      inline bool hasPseudoSup (WitPart * thePart, WitPeriod thePer)
         {
         WitTVec <bool> & theVec = hasPseudoSup_ (thePart);

         return
            theVec.isAllocated ()?
               theVec[thePer]:
               false;
         }
         //
         // Returns true, iff thePart is considered to have pseudo-supply in 
         // thePer.

      void recordFundShortage ();
         //
         // To be called whenever a fundamental shortage occurs.

      void reqPsSupRep (WitPart * thePart, WitPeriod thePer);
         //
         // Requests replenishment of pseudo-supply of thePart in thePer.

      void postTempCommit (bool success);
         //
         // To be called at the end of each temp commit, with success indicating
         // its result.

      void updatePsSup ();
         //
         // Makes updates to pseudo-supply that were requested in the most
         // recent failing temp-commit.

      void startTempMode ();
         //
         // Puts this ExpRest into temp mode.

      void finishTempMode ();
         //
         // Takes this ExpRest out of temp mode.

      void replenishPsSups ();
         //
         // Replenishes pseudo-supplies where this was requested.

      void print ();
         //
         // Prints this ExpRest.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, failRestShortOnly)
      accessFunc (bool, tempMode)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitExpRest);

      void findPosPenalties ();
         //
         // Sets hasPosPenalty_.

      void init (WitPart * thePart);
         //
         // Initializes the pseudo-supply of thePart.

      void exhaustOtherPers (WitMaterial * theMat, WitPeriod fillPer);
         //
         // Sets hasPseudoSup to false, in the appropriate other periods, 
         // given that it's being set to false in fillPer.

      void exhaustPsSup (WitPart * thePart, WitPeriod thePer);
         //
         // Sets hasPseudoSup_ (thePart, thePer) to false.
         // In temp mode, this is done on a temp basis.

      void setUnanReqs (WitPart * thePart, WitPeriod thePer);
         //
         // Sets unanReqs_ (thePart, thePer) to true.

      void printExhRep (
            WitPart * thePart, 
            WitPeriod thePer, 
            bool      firstPer);
         //
         // Prints indicating that the pseudo-supply of thePart in thePer is
         // being exhausted or replenished. firstPer is to be true, iff thePer
         // is the first period considered by the state change.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitHeurAtor * const myHeurAtor_;
         //
         // The HeurAtor to which this ExpRest applies.

      WitMapping <WitOperation, bool> hasPosPenalty_;
         //
         // hasPosPenalty_ (theOpn) is true, iff theOperation or any of its
         // ConsEntries has a positive execPenalty.

      WitSchedule <WitPart, bool> hasPseudoSup_;
         //
         // Data for hasPseudoSup (*, *).

      WitPartPerStack curExhaustReqs_;
         //
         // The set of all (Part, fill period)s for which pseudo-supply 
         // exhaustion has been requested and not yet performed, for the current
         // temp commit.

      WitPartPerStack failExhaustReqs_;
         //
         // Same as curExhaustReqs_, but for the most recent failing temp commit

      bool curFundShort_;
         //
         // true, iff a fundamental shortage was found in the current temp 
         // commit.

      bool failRestShortOnly_;
         //
         // true, iff a restriction shortage was found in the most recent 
         // failing temp commit, but no fundamental shortage.

      WitPartPerStack repReqs_;
         //
         // The set of all (Part, fill period)s for which pseudo-supply 
         // replenishment has been requested and not yet performed.

      WitSchedule <WitPart, bool> unanReqs_;
         //
         // unanReqs_ (thePart, thePer) is true, iff some of the reqs for
         // thePart in thePer came through unanalyzed routings.

      WitPartPerStack unanReqsPairs_;
         //
         // The set of pairs (thePart, thePer) such that
         // unanReqs_ (thePart, thePer) is true.

      bool unanByConsEntNet_;
         //
         // true, iff the heuristic is currently netting / exploding a BomEntry
         // whose requirements have been made unanalyzed by ConsEntry netting.

      bool tempMode_;
         //
         // true, iff this ExpRest is being updated in temp mode.
         // (This is distinct from HeurAtor's temp mode.)

      WitDataRepos * psSupRepos_;
         //
         // DataRepos for cells of hasPseudoSup_ that have been altered during
         // temp mode.
   };
@


1.34
log
@Selection reuse.
@
text
@a164 9
      inline void printExhRepAsNeeded (
            WitPart * thePart, 
            WitPeriod fillPer,
            bool      firstPer)
         {
         if (selPrintLevelAt (3))
            printExhRep (thePart, fillPer, firstPer);
         }

@


1.33
log
@Changed source file names:
   Global.h ==> GlobalComp.h
   Global.C ==> GlobalComp.C
@
text
@d170 1
a170 1
         if (myGlobalComp ()->selPrintLevel () >= 3)
@


1.32
log
@Updated the copyright date on all source files.
@
text
@d20 1
a20 1
#include <Global.h>
@


1.31
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.30
log
@Internal changes.
@
text
@a50 7
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, failRestShortOnly)
      accessFunc (bool, tempMode)

      //------------------------------------------------------------------------
d128 7
@


1.29
log
@Continued implementation of execPenalties on BOM entries and subs.
@
text
@d54 2
a55 2
      accessFunc (WitBoolean, failRestShortOnly)
      accessFunc (WitBoolean, tempMode)
d71 3
a73 3
            WitPart *  thePart, 
            WitPeriod  thePer, 
            WitBoolean netForConsEnt);
d76 1
a76 1
         // netting supply of thePart in fillPer. netForConsEnt should be TRUE,
d83 1
a83 1
      WitBoolean restExpAllowed (WitBopEntry * theBopEnt, WitPeriod fillPer);
d85 1
a85 1
         // Returns TRUE, iff restricted explosion thru theBopEnt to fill reqs
d88 1
a88 1
      inline WitBoolean hasPseudoSup (WitPart * thePart, WitPeriod thePer)
d90 1
a90 1
         WitTVec <WitBoolean> & theVec = hasPseudoSup_ (thePart);
d95 1
a95 1
               witFALSE;
d98 1
a98 1
         // Returns TRUE, iff thePart is considered to have pseudo-supply in 
d109 1
a109 1
      void postTempCommit (WitBoolean success);
d153 2
a154 2
         // Sets hasPseudoSup to FALSE, in the appropriate other periods, 
         // given that it's being set to FALSE in fillPer.
d158 1
a158 1
         // Sets hasPseudoSup_ (thePart, thePer) to FALSE.
d163 1
a163 1
         // Sets unanReqs_ (thePart, thePer) to TRUE.
d166 3
a168 3
            WitPart *  thePart, 
            WitPeriod  fillPer,
            WitBoolean firstPer)
d175 3
a177 3
            WitPart *  thePart, 
            WitPeriod  thePer, 
            WitBoolean firstPer);
d180 1
a180 1
         // being exhausted or replenished. firstPer is to be TRUE, iff thePer
d191 1
a191 1
      WitMapping <WitOperation, WitBoolean> hasPosPenalty_;
d193 1
a193 1
         // hasPosPenalty_ (theOpn) is TRUE, iff theOperation or any of its
d196 1
a196 1
      WitSchedule <WitPart, WitBoolean> hasPseudoSup_;
d210 1
a210 1
      WitBoolean curFundShort_;
d212 1
a212 1
         // TRUE, iff a fundamental shortage was found in the current temp 
d215 1
a215 1
      WitBoolean failRestShortOnly_;
d217 1
a217 1
         // TRUE, iff a restriction shortage was found in the most recent 
d225 1
a225 1
      WitSchedule <WitPart, WitBoolean> unanReqs_;
d227 1
a227 1
         // unanReqs_ (thePart, thePer) is TRUE, iff some of the reqs for
d233 1
a233 1
         // unanReqs_ (thePart, thePer) is TRUE.
d235 1
a235 1
      WitBoolean unanByConsEntNet_;
d237 1
a237 1
         // TRUE, iff the heuristic is currently netting / exploding a BomEntry
d240 1
a240 1
      WitBoolean tempMode_;
d242 1
a242 1
         // TRUE, iff this ExpRest is being updated in temp mode.
@


1.28
log
@Added penalties on BOM entries and substitutes to pen-exec.
@
text
@d193 2
a194 2
         // hasPosPenalty_ (theOpn) is TRUE, iff theOperation has a positive
         // execPenalty or any of its ConsEntries has a positive usePenalty.
@


1.27
log
@Continued implementation of single-source.
@
text
@d22 1
d143 4
d190 5
@


1.26
log
@Continued implementation of Single-Source.
@
text
@d235 1
a235 1
      WitDataRepos & psSupRepos_;
@


1.25
log
@Continued implementation of single source.
@
text
@d20 1
a21 1
#include <Global.h>
@


1.24
log
@Continued preliminary work on single source.
@
text
@d233 1
a233 1
         // (This distinct from HeurAtor's temp mode.)
d235 1
a235 1
      WitArchive <WitBoolean> * psSupArch_;
d237 1
a237 1
         // Archive for cells of hasPseudoSup_ that have been altered during
@


1.23
log
@Continued preliminary work on single source.
@
text
@d19 1
d186 1
a186 1
      WitSchedule (WitPart, WitBoolean) hasPseudoSup_;
d215 1
a215 1
      WitSchedule (WitPart, WitBoolean) unanReqs_;
@


1.22
log
@Began implementation of object iteration.
@
text
@d88 1
a88 1
         WitTVec (WitBoolean) & theVec = hasPseudoSup_ (thePart);
@


1.21
log
@Continued implementation of sel-split for pen-exec.
@
text
@d20 1
@


1.20
log
@Continued implementation of sel-split for pen-exec.
@
text
@a32 2
      friend WitSplitMgr;

@


1.19
log
@Continued implementation of sel-split for pen-exec.
@
text
@d33 1
a33 1
      friend WitSsPeMgr;
@


1.18
log
@Continued implementation of sel-split for pen-exec.
@
text
@a117 4
      void updatePsSup (const WitPartPerStack & theExhPts);
         //
         // Makes updates to pseudo-supply that are requested in theExhPts.

@


1.17
log
@Continued implementation of sel-split for pen-exec.
@
text
@d33 2
d117 4
@


1.16
log
@Continued implementation of pen-exec for sel-split.
@
text
@d111 1
a111 1
      void updatePsSup (WitBoolean forFailCom);
d113 2
a114 5
         // Makes all requested updates to pseudo-supply.
         // If forFailCom is TRUE, this will be done with respect to the
         // requests made in the most recent failing temp-commit;
         // otherwise, it will be done with respect to the requests made in the
         // current temp-commit.
@


1.15
log
@Continued implementation of sel-split for pen-exec.
@
text
@d52 1
@


1.14
log
@Implemented initial prototype of sel-split for pen-exec.
@
text
@d110 1
a110 1
      void updatePsSup ();
d112 5
a116 2
         // Makes updates to pseudo-supply as appropriate just after a call to 
         // commitMaxQtySel.
@


1.13
log
@More improvements to pen-exec.
@
text
@d110 1
a110 1
      WitBoolean updatePsSup ();
d113 9
a121 2
         // commitMaxQtySel. Returns TRUE, iff a restriction shortage was found
         // in the last failing temp commit, but no fundamental shortage.
d148 5
d226 10
@


1.12
log
@Added allowSSPE dev param.
Switched pen-exec to single-shortage logic.
Made pen-exec exploit sparse penalties.
@
text
@d66 4
a69 4
      void recRestExp (
            WitPart *    thePart, 
            WitPeriod    fillPer, 
            WitBoolean & restExpOK);
d72 2
a73 2
         // netting supply of thePart in fillPer. restExpOK is set to TRUE or
         // FALSE: TRUE, iff the continued restricted explosion is permitted.
d75 1
a75 1
      void recRestNet (WitPart * thePart, WitPeriod fillPer);
d77 1
d79 1
a79 1
      void expBomEnt ();
d81 2
a82 1
         // To be called just after HeurAtor::netConsEntries.
a123 5
      inline WitBoolean unanReqs (WitPart * thePart, WitPeriod thePer)
         {
         return unanReqs_ (thePart, thePer);
         }

d210 1
a210 1
      WitBoolean unanNetting_;
@


1.11
log
@Initial implementation of pegging.
@
text
@a50 1
      accessFunc (WitBoolean, curShort)
d57 9
d75 7
d95 1
a95 1
      void recordFundShortage (WitBoolean & first);
a97 2
         // On return, first is TRUE, iff this is the first 
         // fundamental shortage to be recorded.
d122 5
d144 4
a187 4
      WitBoolean curShort_;
         //
         // TRUE, iff a shortage was found in the current temp commit.

d202 15
@


1.10
log
@Moved Stack template implementations to header files.
@
text
@d39 1
a39 1
      WitExpRest (WitHeurAllPerf *);
d148 1
a148 1
      WitHeurAllPerf * const myHeurAllPerf_;
d150 1
a150 1
         // The HeurAllPerf to which this ExpRest applies.
@


1.9
log
@Continued implementation of selection splitting.
@
text
@d20 1
a20 1
#include <PairSt.h>
@


1.8
log
@Implemented and used class SelMgr.
@
text
@d95 1
a95 1
      void update (WitBoolean & restShortOnly);
d98 2
a99 3
         // commitMaxQtySel. On return, restShortOnly will be TRUE, iff a 
         // restriction shortage was found in the last failing temp commit, but
         // no fundamental shortage.
@


1.7
log
@Further development of coarse selection splitting.
@
text
@d39 1
a39 3
      WitExpRest (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.
d102 1
a102 1
      void replenishPsSups (WitAllocMode * theAllocMode);
a104 1
         // Uses theAllocMode to determine net supply.
d148 4
@


1.6
log
@Some minor modifications.
@
text
@d20 1
a20 1
#include <Stack.h>
@


1.5
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@d20 1
a20 1
#include <DynStack.h>
@


1.4
log
@Refactoring for selection splitting.
@
text
@d156 1
a156 1
      WitPartPerDynStack curExhaustReqs_;
d162 1
a162 1
      WitPartPerDynStack failExhaustReqs_;
d180 1
a180 1
      WitPartPerDynStack repReqs_;
@


1.3
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d119 1
a119 3
      copyCtorAndAssignment (WitExpRest);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d20 1
a20 1
#include <DynPer.h>
d158 1
a158 1
      WitDynPerStack (WitPart) curExhaustReqs_;
d164 1
a164 1
      WitDynPerStack (WitPart) failExhaustReqs_;
d182 1
a182 1
      WitDynPerStack (WitPart) repReqs_;
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
