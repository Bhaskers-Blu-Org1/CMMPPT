head	1.20;
access;
symbols;
locks; strict;
comment	@ * @;


1.20
date	2011.09.28.23.49.43;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.09.24.00.28.04;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.08.30.20.17.46;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2010.03.29.21.34.22;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2010.02.05.20.41.53;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2010.01.29.23.53.01;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2010.01.29.23.22.52;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2010.01.25.19.45.18;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2010.01.16.00.09.08;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.12.30.23.08.00;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.12.24.22.58.55;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.12.14.21.34.54;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.12.11.23.06.41;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.12.10.23.48.07;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.12.10.23.15.12;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.12.10.22.38.29;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.09.23.23.17;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.12.09.00.15.33;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.02.20.06.07;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.11.26.00.24.09;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ObjectiveH
#define ObjectiveH

//------------------------------------------------------------------------------
// Header file: "Objective.h"
//
// Contains the declaration of class Objective.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <Str.h>

//------------------------------------------------------------------------------
// Class Objective
//
// Represents on objective function for multiple objectives mode.
// An instance of this class only contains the global information about the
// represented objective function.
//
// Implemented in MultiObj.C.
//------------------------------------------------------------------------------

class WitObjective: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitObjective (WitMultiObjMgr *, const char * theObjName);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitObjective ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void copyAttrsFrom (WitObjective * theObjective);
         //
         // Copies the input attributes of theObjective into this Objective.

      void writeDataAttrs ();
         //
         // Writes the attributes of this Objective to an input data file.

      void writeObjNameAsCurrent ();
         //
         // Writes myObjName_ (to an input data file) as the current Objective.

      void display ();
         //
         // Displays the input and preprocessing data for this Objective.

      static bool containsVBar (const char * theCstring);
         //
         // Returns true, iff theCstring contains a vertical bar character.

      void storeOptObjValue (double);
         //
         // Sets objValue for this Objective to the argument.
         // Valid only when the optimizing implosion subsystem is uploading the
         // solution.

      bool hasNegativeCosts ();
         //
         // Returns true, iff there is at least one cost coefficient in this
         // Objective that's < 0.

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitObjective)

      static int nInstances (WitProblem *);

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      int defObjectiveRank ();

      //------------------------------------------------------------------------
      // "Set" functions
      //------------------------------------------------------------------------

      void setObjectiveRank (int theRank);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitString &, myObjName)
      accessFunc (int,               objectiveRank)
      accessFunc (double,            objValue)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitObjective);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMultiObjMgr * const myMultiObjMgr_;
         //
         // The MultiObjMgr that owns this Objective.

      int mappingIndex_;
         //
         // Mapping index: see Mapping.h.
         // == # Objectives constructed before this Objective.

      const WitString myObjName_;
         //
         // The name of this Objective.

      int objectiveRank_;
         //
         // The rank ordering number for this objective.

      double objValue_;
         //
         // The objective function value of this Objective.
   };

#endif
@


1.19
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.18
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d33 2
a34 2
{
public:
d36 3
a38 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d40 1
a40 1
WitObjective (WitMultiObjMgr *, const char * theObjName);
d42 3
a44 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d46 1
a46 1
~WitObjective ();
d48 3
a50 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d52 3
a54 3
void copyAttrsFrom (WitObjective * theObjective);
//
// Copies the input attributes of theObjective into this Objective.
d56 3
a58 3
void writeDataAttrs ();
//
// Writes the attributes of this Objective to an input data file.
d60 3
a62 3
void writeObjNameAsCurrent ();
//
// Writes myObjName_ (to an input data file) as the current Objective.
d64 3
a66 3
void display ();
//
// Displays the input and preprocessing data for this Objective.
d68 3
a70 3
static bool containsVBar (const char * theCstring);
//
// Returns true, iff theCstring contains a vertical bar character.
d72 5
a76 5
void storeOptObjValue (double);
//
// Sets objValue for this Objective to the argument.
// Valid only when the optimizing implosion subsystem is uploading the
// solution.
d78 4
a81 4
bool hasNegativeCosts ();
//
// Returns true, iff there is at least one cost coefficient in this
// Objective that's < 0.
d83 3
a85 3
//------------------------------------------------------------------------
// Mapping functions
//------------------------------------------------------------------------
d87 1
a87 1
decMappingIndex (WitObjective)
d89 1
a89 1
static int nInstances (WitProblem *);
d91 3
a93 3
//------------------------------------------------------------------------
// Default value functions.
//------------------------------------------------------------------------
d95 1
a95 1
int defObjectiveRank ();
d97 3
a99 3
//------------------------------------------------------------------------
// "Set" functions
//------------------------------------------------------------------------
d101 1
a101 1
void setObjectiveRank (int theRank);
d103 3
a105 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d107 3
a109 3
accessFunc (const WitString &, myObjName)
accessFunc (int,               objectiveRank)
accessFunc (double,            objValue)
d111 1
a111 1
private:
d113 3
a115 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d117 1
a117 1
noCopyCtorAssign (WitObjective);
d119 3
a121 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d123 3
a125 3
WitMultiObjMgr * const myMultiObjMgr_;
//
// The MultiObjMgr that owns this Objective.
d127 4
a130 4
int mappingIndex_;
//
// Mapping index: see Mapping.h.
// == # Objectives constructed before this Objective.
d132 3
a134 3
const WitString myObjName_;
//
// The name of this Objective.
d136 3
a138 3
int objectiveRank_;
//
// The rank ordering number for this objective.
d140 4
a143 4
double objValue_;
//
// The objective function value of this Objective.
};
@


1.17
log
@Multi-Obj Mode
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d33 2
a34 2
   {
   public:
d36 3
a38 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d40 1
a40 1
      WitObjective (WitMultiObjMgr *, const char * theObjName);
d42 3
a44 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d46 1
a46 1
      ~WitObjective ();
d48 3
a50 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d52 3
a54 3
      void copyAttrsFrom (WitObjective * theObjective);
         //
         // Copies the input attributes of theObjective into this Objective.
d56 3
a58 3
      void writeDataAttrs ();
         //
         // Writes the attributes of this Objective to an input data file.
d60 3
a62 3
      void writeObjNameAsCurrent ();
         //
         // Writes myObjName_ (to an input data file) as the current Objective.
d64 3
a66 3
      void display ();
         //
         // Displays the input and preprocessing data for this Objective.
d68 3
a70 3
      static bool containsVBar (const char * theCstring);
         //
         // Returns true, iff theCstring contains a vertical bar character.
d72 5
a76 5
      void storeOptObjValue (double);
         //
         // Sets objValue for this Objective to the argument.
         // Valid only when the optimizing implosion subsystem is uploading the
         // solution.
d78 4
a81 4
      bool hasNegativeCosts ();
         //
         // Returns true, iff there is at least one cost coefficient in this
         // Objective that's < 0.
d83 3
a85 3
      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------
d87 1
a87 1
      decMappingIndex (WitObjective)
d89 1
a89 1
      static int nInstances (WitProblem *);
d91 3
a93 3
      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------
d95 1
a95 1
      int defObjectiveRank ();
d97 3
a99 3
      //------------------------------------------------------------------------
      // "Set" functions
      //------------------------------------------------------------------------
d101 1
a101 1
      void setObjectiveRank (int theRank);
d103 3
a105 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d107 3
a109 3
      accessFunc (const WitString &, myObjName)
      accessFunc (int,               objectiveRank)
      accessFunc (double,            objValue)
d111 1
a111 1
   private:
d113 3
a115 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d117 1
a117 1
      noCopyCtorAssign (WitObjective);
d119 3
a121 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d123 3
a125 3
      WitMultiObjMgr * const myMultiObjMgr_;
         //
         // The MultiObjMgr that owns this Objective.
d127 4
a130 4
      int mappingIndex_;
         //
         // Mapping index: see Mapping.h.
         // == # Objectives constructed before this Objective.
d132 3
a134 3
      const WitString myObjName_;
         //
         // The name of this Objective.
d136 3
a138 3
      int objectiveRank_;
         //
         // The rank ordering number for this objective.
d140 4
a143 4
      double objValue_;
         //
         // The objective function value of this Objective.
   };
@


1.16
log
@multi-obj mode
@
text
@d95 1
a95 1
      int defObjectiveSeqNo ();
d101 1
a101 1
      void setObjectiveSeqNo (int theSeqNo);
d108 1
a108 1
      accessFunc (int,               objectiveSeqNo)
d136 1
a136 1
      int objectiveSeqNo_;
d138 1
a138 1
         // The sequence number for this objective.
@


1.15
log
@Multi-objective mode
@
text
@d25 1
a25 1
// Represents on objective function for multi-objective mode.
@


1.14
log
@Multi-objective mode
@
text
@d62 1
a62 2
         // Writes (to an input data file) the objectiveName of this Objective
         // as the current Objective.
a67 4
      static bool allDigits (const char * theCstring);
         //
         // Returns true, iff theCstring is all digits.

d107 1
a107 1
      accessFunc (const WitString &, objectiveName)
d132 1
a132 1
      const WitString objectiveName_;
@


1.13
log
@Multi-objective mode
@
text
@d40 1
a40 1
      WitObjective (WitMultiObjMgr *);
d106 1
a106 2
      void setObjectiveName  (const char * theObjName);
      void setObjectiveSeqNo (int          theSeqNo);
d137 1
a137 5
      WitString defaultName_;
         //
         // The default value for objectiveName_;

      WitString objectiveName_;
@


1.12
log
@Multi-objective mode
@
text
@d69 1
a69 1
      static bool validObjName (const WitString & theObjName);
d71 5
a75 3
         // Returns true, iff theObjName is a valid value for the objectiveName
         // of an Objective.
         // It's considered to be valid iff it is not all digits.
d106 2
a107 2
      void setObjectiveName  (const WitString & theObjName);
      void setObjectiveSeqNo (int               theSeqNo);
@


1.11
log
@Multi-Objective Mode
@
text
@d81 5
@


1.10
log
@Multi-Objective Mode
@
text
@d75 6
d108 1
d142 4
@


1.9
log
@Multi-Objective Mode.
@
text
@d60 5
@


1.8
log
@Multi-Objective Mode.
@
text
@d88 2
a89 1
      void setObjectiveName (const WitString & theObjName);
@


1.7
log
@Multi-Objective Mode
@
text
@d79 7
a85 1
      // Setter functions
d95 1
d125 4
@


1.6
log
@Multi-Objective Mode
@
text
@d68 1
a68 1
         // It's considered to be valid iff it is not # followed by all digits.
@


1.5
log
@Multi-Objective Mode
@
text
@d56 4
a105 4
      WitString objectiveName_;
         //
         // The name of this Objective.

d110 8
@


1.4
log
@Multi-Objective Mode
@
text
@d60 6
@


1.3
log
@Multi-objective mode.
@
text
@d40 1
a40 1
      WitObjective (WitMultiObjMgr *, int theSeqNo);
d61 8
d100 4
@


1.2
log
@Multi-Obj mode.
@
text
@d40 1
a40 1
      WitObjective (WitProblem *, int theSeqNo);
d61 6
d84 4
@


1.1
log
@Multi-objective mode.
@
text
@d20 1
d40 1
a40 1
      WitObjective (WitProblem *);
d56 4
d64 2
d77 5
@

