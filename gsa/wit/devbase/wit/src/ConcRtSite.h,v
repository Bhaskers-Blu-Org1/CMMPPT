head	1.19;
access;
symbols
	sce_5_01_20080919:1.16
	latest_sce_4_20_20060523:1.16.0.2
	sce_4_20_20060523:1.16
	latest_sce4_20_OSL:1.15.0.2
	sce_4_20_OSL:1.15
	sce_410_withVa:1.15
	sce_4_05_20040511:1.10
	sce_4_00_20040201:1.10
	nextGenBranch:1.10.0.2
	nextGenRoot:1.10
	sce_3_30_20030627:1.10;
locks; strict;
comment	@ * @;


1.19
date	2011.09.28.23.49.09;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.09.24.00.27.27;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.08.30.20.17.21;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.02.17.33.56;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.03.02.22.34.35;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.03.02.22.02.00;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.03.02.21.59.45;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2005.01.19.18.31.03;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.11.11.21.25.08;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.03.20.19.03.55;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.03.19.16.48.15;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.03.06.20.28.18;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.04.19.08.01;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.28.20.47.33;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.27.19.20.17;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.26.23.51.31;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.26.21.42.52;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.25.22.17.06;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.24.23.44.30;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ConcRtSiteH
#define ConcRtSiteH

//------------------------------------------------------------------------------
// Header file: "ConcRtSite.h"
//
// Contains the declaration of the following classes:
//
//    ProdRtSite.
//    ConsRtSite.
//
// These are the "concrete" RtSite classes.
//------------------------------------------------------------------------------

#include <RtSite.h>

//------------------------------------------------------------------------------
// Class ProdRtSite
//
// "Production Routing Site"
// Represents a Part in its role as a site at which a production routing
// decision must be made.
//
// Class Hierarchy:
//
// ProbAssoc
//    RtSite
//       ProdRtSite
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitProdRtSite: public WitRtSite
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitProdRtSite (WitPart *, WitRtMgr *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitProdRtSite ();

      //------------------------------------------------------------------------
      // Overrides from class RtSite.
      //------------------------------------------------------------------------

      virtual bool                      isForProd       ();
      virtual void                      printID         (int, int);
      virtual const char *              perCaseID       ();
      virtual bool                      explodeable     (WitPeriod);
      virtual const WitFlexVec <bool> & propRtg         ();
      virtual bool                      singleSource    ();
      virtual WitPart *                 mrSortPart      ();
      virtual WitRtCand *               mrDefaultRtCand (WitPeriod);
      virtual int                       heightIdx       ();
      virtual void                      findRtCands     (WitList <WitRtCand> &);

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitProdRtSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPart * const myPart_;
         //
         // The Part represented by this ProdRtSite.
   };

//------------------------------------------------------------------------------
// Class ConsRtSite
//
// "Consumption Routing Site"
// Represents a BomEntry in its role as a site at which a consumption routing
// decision must be made.
//
// Class Hierarchy:
//
// ProbAssoc
//    RtSite
//       ConsRtSite
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitConsRtSite: public WitRtSite
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitConsRtSite (WitBomEntry *, WitRtMgr *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitConsRtSite ();

      //------------------------------------------------------------------------
      // Overrides from class RtSite.
      //------------------------------------------------------------------------

      virtual bool                      isForProd       ();
      virtual void                      printID         (int, int);
      virtual const char *              perCaseID       ();
      virtual bool                      explodeable     (WitPeriod);
      virtual const WitFlexVec <bool> & propRtg         ();
      virtual bool                      singleSource    ();
      virtual WitPart *                 mrSortPart      ();
      virtual WitRtCand *               mrDefaultRtCand (WitPeriod);
      virtual int                       heightIdx       ();
      virtual void                      findRtCands     (WitList <WitRtCand> &);

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitConsRtSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBomEntry * const myBomEnt_;
         //
         // The BomEntry represented by this ConsRtSite.
   };

#endif
@


1.18
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.17
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d43 2
a44 16
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitProdRtSite (WitPart *, WitRtMgr *);

private:

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitProdRtSite ();
d46 43
a88 29
//------------------------------------------------------------------------
// Overrides from class RtSite.
//------------------------------------------------------------------------

virtual bool                      isForProd       ();
virtual void                      printID         (int, int);
virtual const char *              perCaseID       ();
virtual bool                      explodeable     (WitPeriod);
virtual const WitFlexVec <bool> & propRtg         ();
virtual bool                      singleSource    ();
virtual WitPart *                 mrSortPart      ();
virtual WitRtCand *               mrDefaultRtCand (WitPeriod);
virtual int                       heightIdx       ();
virtual void                      findRtCands     (WitList <WitRtCand> &);

//------------------------------------------------------------------------
// Other private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitProdRtSite);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitPart * const myPart_;
//
// The Part represented by this ProdRtSite.
};
d107 2
a108 2
{
public:
d110 43
a152 43
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitConsRtSite (WitBomEntry *, WitRtMgr *);

private:

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitConsRtSite ();

//------------------------------------------------------------------------
// Overrides from class RtSite.
//------------------------------------------------------------------------

virtual bool                      isForProd       ();
virtual void                      printID         (int, int);
virtual const char *              perCaseID       ();
virtual bool                      explodeable     (WitPeriod);
virtual const WitFlexVec <bool> & propRtg         ();
virtual bool                      singleSource    ();
virtual WitPart *                 mrSortPart      ();
virtual WitRtCand *               mrDefaultRtCand (WitPeriod);
virtual int                       heightIdx       ();
virtual void                      findRtCands     (WitList <WitRtCand> &);

//------------------------------------------------------------------------
// Other private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitConsRtSite);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitBomEntry * const myBomEnt_;
//
// The BomEntry represented by this ConsRtSite.
};
@


1.16
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d43 16
a58 2
   {
   public:
d60 29
a88 43
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitProdRtSite (WitPart *, WitRtMgr *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitProdRtSite ();

      //------------------------------------------------------------------------
      // Overrides from class RtSite.
      //------------------------------------------------------------------------

      virtual bool                      isForProd       ();
      virtual void                      printID         (int, int);
      virtual const char *              perCaseID       ();
      virtual bool                      explodeable     (WitPeriod);
      virtual const WitFlexVec <bool> & propRtg         ();
      virtual bool                      singleSource    ();
      virtual WitPart *                 mrSortPart      ();
      virtual WitRtCand *               mrDefaultRtCand (WitPeriod);
      virtual int                       heightIdx       ();
      virtual void                      findRtCands     (WitList <WitRtCand> &);

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitProdRtSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPart * const myPart_;
         //
         // The Part represented by this ProdRtSite.
   };
d107 2
a108 2
   {
   public:
d110 43
a152 43
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitConsRtSite (WitBomEntry *, WitRtMgr *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitConsRtSite ();

      //------------------------------------------------------------------------
      // Overrides from class RtSite.
      //------------------------------------------------------------------------

      virtual bool                      isForProd       ();
      virtual void                      printID         (int, int);
      virtual const char *              perCaseID       ();
      virtual bool                      explodeable     (WitPeriod);
      virtual const WitFlexVec <bool> & propRtg         ();
      virtual bool                      singleSource    ();
      virtual WitPart *                 mrSortPart      ();
      virtual WitRtCand *               mrDefaultRtCand (WitPeriod);
      virtual int                       heightIdx       ();
      virtual void                      findRtCands     (WitList <WitRtCand> &);

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitConsRtSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBomEntry * const myBomEnt_;
         //
         // The BomEntry represented by this ConsRtSite.
   };
@


1.15
log
@Vector PropRtg.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.14
log
@Vector PropRtg.
@
text
@d68 1
a68 1
      virtual const WitFlexVec <bool> & propRt          ();
d132 1
a132 1
      virtual const WitFlexVec <bool> & propRt          ();
@


1.13
log
@Vector Prop-Rtg.
@
text
@a67 1
      virtual bool                      propRouting     ();
a131 1
      virtual bool                      propRouting     ();
@


1.12
log
@Low-Pri Prop-Rt.
@
text
@d64 11
a74 10
      virtual bool         isForProd       ();
      virtual void         printID         (int, int);
      virtual const char * perCaseID       ();
      virtual bool         explodeable     (WitPeriod);
      virtual bool         propRouting     ();
      virtual bool         singleSource    ();
      virtual WitPart *    mrSortPart      ();
      virtual WitRtCand *  mrDefaultRtCand (WitPeriod);
      virtual int          heightIdx       ();
      virtual void         findRtCands     (WitList <WitRtCand> &);
d129 11
a139 10
      virtual bool         isForProd       ();
      virtual void         printID         (int, int);
      virtual const char * perCaseID       ();
      virtual bool         explodeable     (WitPeriod);
      virtual bool         propRouting     ();
      virtual bool         singleSource    ();
      virtual WitPart *    mrSortPart      ();
      virtual WitRtCand *  mrDefaultRtCand (WitPeriod);
      virtual int          heightIdx       ();
      virtual void         findRtCands     (WitList <WitRtCand> &);
@


1.11
log
@Low-Pri Prop-Rt.
@
text
@d64 1
d128 1
@


1.10
log
@Continued implementation of proportionate routing.
@
text
@d64 1
a64 1
      virtual void         printID         (int);
d127 1
a127 1
      virtual void         printID         (int);
@


1.9
log
@Continued implementation of proportionate routing.
@
text
@d65 1
a72 1
      virtual const char * perCaseID       ();
d128 1
a135 1
      virtual const char * perCaseID       ();
@


1.8
log
@Continued implementation of proportionate routing.
@
text
@d64 9
a72 10
      virtual void         printID       (int);
      virtual const char * perCaseID     ();
      virtual bool         explodeable   (WitPeriod);
      virtual bool         propRouting   ();
      virtual bool         singleSource  ();
      virtual bool         mrMultiChoice ();
      virtual WitRtCand *  selMrRtCand   (WitPeriod);
      virtual void         getMrRtCands  (WitObjStack <WitRtCand> &);
      virtual int          heightIdx     ();
      virtual void         findRtCands   (WitList <WitRtCand> &);
d127 9
a135 10
      virtual void         printID       (int);
      virtual const char * perCaseID     ();
      virtual bool         explodeable   (WitPeriod);
      virtual bool         propRouting   ();
      virtual bool         singleSource  ();
      virtual bool         mrMultiChoice ();
      virtual WitRtCand *  selMrRtCand   (WitPeriod);
      virtual void         getMrRtCands  (WitObjStack <WitRtCand> &);
      virtual int          heightIdx     ();
      virtual void         findRtCands   (WitList <WitRtCand> &);
@


1.7
log
@Continued implementation of proportionate routing.
@
text
@d64 10
a73 4
      virtual bool explodeable (WitPeriod);
      virtual bool propRouting ();
      virtual void prtPrBrPtID (WitPeriod);
      virtual void findRtCands (WitList <WitRtCand> &);
d128 10
a137 4
      virtual bool explodeable (WitPeriod);
      virtual bool propRouting ();
      virtual void prtPrBrPtID (WitPeriod);
      virtual void findRtCands (WitList <WitRtCand> &);
@


1.6
log
@Continued implementation of proportionate routing.
@
text
@d67 1
a67 1
      virtual void findRtCands (WitObjStack <WitRtCand> &);
d125 1
a125 1
      virtual void findRtCands (WitObjStack <WitRtCand> &);
@


1.5
log
@Continued implementation of proportionate routing.
@
text
@d35 3
a37 2
// RtSite
//    ProdRtSite
d66 1
d93 3
a95 2
// RtSite
//    ConsRtSite
d124 1
@


1.4
log
@Continued implementation of proportionate routing.
@
text
@a64 1
      virtual void prtPrBrPtID (WitPeriod);
a120 1
      virtual void prtPrBrPtID (WitPeriod);
@


1.3
log
@Continued implementation of proportionate routing.
@
text
@d49 1
a49 1
      WitProdRtSite (WitPart *);
d106 1
a106 1
      WitConsRtSite (WitBomEntry *);
a127 4

      static int mappingIndex (WitBomEntry * theBomEnt);
         //
         // Returns the mappingIndex for a ConsRtSite that represents theBomEnt.
@


1.2
log
@Continued implementation of proportionate routing.
@
text
@d15 7
d23 120
@


1.1
log
@Continued implementation of proportionate routing.
@
text
@a14 7
//
// Contains the declaration of the following classes:
//
//    ProdRtSite.
//    ConsRtSite.
//
// These are the "concrete" RtSite classes.
a15 124

#include <RtSite.h>

//------------------------------------------------------------------------------
// Class ProdRtSite
//
// "Production Routing Site"
// Represents a Part in its role as a site at which a production routing
// decision must be made.
//
// Class Hierarchy:
//
// RtSite
//    ProdRtSite
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitProdRtSite: public WitRtSite
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitProdRtSite (WitPart *, WitProdRtMgr *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitProdRtSite ();

      //------------------------------------------------------------------------
      // Overrides from class RtSite.
      //------------------------------------------------------------------------

      virtual bool explodeable (WitPeriod);
      virtual bool propRouting ();
      virtual void prtPrBrPtID (WitPeriod);
      virtual void findRtCands (WitObjStack <WitRtCand> &);

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitProdRtSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPart * const myPart_;
         //
         // The Part represented by this ProdRtSite.

      WitProdRtMgr * const myProdRtMgr_;
         //
         // The ProdRtMgr that owns this ProdRtSite.
   };

//------------------------------------------------------------------------------
// Class ConsRtSite
//
// "Consumption Routing Site"
// Represents a BomEntry in its role as a site at which a consumption routing
// decision must be made.
//
// Class Hierarchy:
//
// RtSite
//    ConsRtSite
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitConsRtSite: public WitRtSite
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitConsRtSite (WitBomEntry *, WitConsRtMgr *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitConsRtSite ();

      //------------------------------------------------------------------------
      // Overrides from class RtSite.
      //------------------------------------------------------------------------

      virtual bool explodeable (WitPeriod);
      virtual bool propRouting ();
      virtual void prtPrBrPtID (WitPeriod);
      virtual void findRtCands (WitObjStack <WitRtCand> &);

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitConsRtSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBomEntry * const myBomEnt_;
         //
         // The BomEntry represented by this ConsRtSite.

      WitConsRtMgr * const myConsRtMgr_;
         //
         // The ConsRtMgr that owns this ConsRtSite.
   };
@

