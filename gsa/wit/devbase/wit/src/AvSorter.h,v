head	1.14;
access;
symbols
	sce_5_01_20080919:1.11
	latest_sce_4_20_20060523:1.9.0.2
	sce_4_20_20060523:1.9
	latest_sce4_20_OSL:1.8.0.2
	sce_4_20_OSL:1.8
	sce_410_withVa:1.4
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.1;
locks; strict;
comment	@ * @;


1.14
date	2011.09.28.23.49.02;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.09.24.00.27.19;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.08.30.20.17.15;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.06.05.21.05.59;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.30.16.01.17;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.02.17.33.54;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.02.17.34.56;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.09.27.20.31.00;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.09.27.17.56.33;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.26.18.47.56;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.04.00.02.47;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.14.20.02.34;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.30.23.07.51;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.13.00.17.51;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef AvSorterH
#define AvSorterH

//------------------------------------------------------------------------------
// Header file: "AvSorter.h"
//
// Contains the declaration of class template AvSorter.
//------------------------------------------------------------------------------

#include <PtrVec.h>

//------------------------------------------------------------------------------
// Class template AvSorter <SortEntry>
//
// Responsible for sorting instances of the SortEntry class (either BopEntry or
// SubEntry) by their aversion.
//
// Implemented in PreHelp.C.
//------------------------------------------------------------------------------

template <typename SortEntry> 
      class WitAvSorter
   {
   public:

      //-----------------------------------------------------------------------
      // Public member functions.
      //-----------------------------------------------------------------------

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitAvSorter (int nEntries);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      ~WitAvSorter ();

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      void sort (WitList <SortEntry> & theList);
         //
         // Sorts the elements of theList according to the aversion function.

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      bool inOrder (const WitList <SortEntry> & theList);
         //
         // Returns true, iff the elements of theList are ordered consistently
         // with the aversion function.

      bool compareAversions (SortEntry *, SortEntry *);
         //
         // Sort compare function based on aversion.

      double aversion (SortEntry *);
         //
         // Returns the appropriate aversion.

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitPtrVec <SortEntry> workingVec_;
         //
         // Working PtrVec.
   };

#endif
@


1.13
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.12
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d30 56
a85 56
template <typename SortEntry>
class WitAvSorter
{
public:

//-----------------------------------------------------------------------
// Public member functions.
//-----------------------------------------------------------------------

//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------

WitAvSorter (int nEntries);

//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------

~WitAvSorter ();

//-----------------------------------------------------------------------
// Other public member functions.
//-----------------------------------------------------------------------

void sort (WitList <SortEntry> & theList);
//
// Sorts the elements of theList according to the aversion function.

private:

//-----------------------------------------------------------------------
// Private member functions.
//-----------------------------------------------------------------------

bool inOrder (const WitList <SortEntry> & theList);
//
// Returns true, iff the elements of theList are ordered consistently
// with the aversion function.

bool compareAversions (SortEntry *, SortEntry *);
//
// Sort compare function based on aversion.

double aversion (SortEntry *);
//
// Returns the appropriate aversion.

//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------

WitPtrVec <SortEntry> workingVec_;
//
// Working PtrVec.
};
@


1.11
log
@Stochastic Implosion
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d30 56
a85 56
template <typename SortEntry> 
      class WitAvSorter
   {
   public:

      //-----------------------------------------------------------------------
      // Public member functions.
      //-----------------------------------------------------------------------

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitAvSorter (int nEntries);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      ~WitAvSorter ();

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      void sort (WitList <SortEntry> & theList);
         //
         // Sorts the elements of theList according to the aversion function.

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      bool inOrder (const WitList <SortEntry> & theList);
         //
         // Returns true, iff the elements of theList are ordered consistently
         // with the aversion function.

      bool compareAversions (SortEntry *, SortEntry *);
         //
         // Sort compare function based on aversion.

      double aversion (SortEntry *);
         //
         // Returns the appropriate aversion.

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitPtrVec <SortEntry> workingVec_;
         //
         // Working PtrVec.
   };
@


1.10
log
@Stochastic Implosion
@
text
@d43 1
a43 1
      WitAvSorter (WitPreData *, int nEntries);
a81 4
      WitPreData * const myPreData_;
         //
         // The PreData for this AvSorter.

@


1.9
log
@Updated the copyright date on all source files.
@
text
@d43 1
a43 1
      WitAvSorter (int nEntries);
d82 4
@


1.8
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.7
log
@[multi-thread]
@
text
@d19 1
a19 1
#include <Dense.h>
d70 1
a70 1
      static int compare (SortEntry *, SortEntry *, void *);
d74 1
a74 1
      static double aversion (SortEntry *);
d82 1
a82 1
      WitDenseList <SortEntry> workDenseList_;
d84 1
a84 1
         // Working DenseList.
@


1.6
log
@[multi-thread]
@
text
@d70 1
a70 1
      static int compare (SortEntry *, SortEntry *, WitAvSorter <SortEntry> *);
@


1.5
log
@[multi-thread]
@
text
@d70 1
a70 1
      int compare (SortEntry *, SortEntry *);
d74 1
a74 1
      double aversion (SortEntry *);
@


1.4
log
@Low-Pri Prop-Rt.
@
text
@d70 1
a70 1
      static int compare (SortEntry *, SortEntry *);
d74 1
a74 1
      static double aversion (SortEntry *);
@


1.3
log
@Fixed a bug in the sorting of BOP entries that produce each part.
@
text
@a77 4
      static int nEntriesBefore (SortEntry * theSortEntry);
         //
         // Returns # SortEntries before theSortEntry in the List beging sorted.

@


1.2
log
@Continued double precision.
@
text
@d78 4
@


1.1
log
@An attempt to fix more syntax errors from on Windows.
@
text
@d74 1
a74 1
      static float aversion (SortEntry *);
@

