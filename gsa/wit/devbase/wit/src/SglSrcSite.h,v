head	1.39;
access;
symbols
	sce_5_01_20080919:1.35
	latest_sce_4_20_20060523:1.35.0.2
	sce_4_20_20060523:1.35
	latest_sce4_20_OSL:1.34.0.4
	sce_4_20_OSL:1.34
	sce_410_withVa:1.34
	sce_4_05_20040511:1.34
	sce_4_00_20040201:1.34
	nextGenBranch:1.34.0.2
	nextGenRoot:1.34
	sce_3_30_20030627:1.34
	EndRw-branch:1.23.0.2
	Root-of-EndRw:1.23
	rwToStl:1.20.0.2;
locks; strict;
comment	@ * @;


1.39
date	2011.09.28.23.50.13;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2011.09.24.00.28.40;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2011.08.30.20.18.12;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2010.07.30.23.39.29;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2006.05.02.17.34.13;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2003.03.28.23.05.34;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2003.03.21.21.35.33;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2003.03.06.20.28.24;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2003.01.02.22.18.50;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2002.12.14.00.55.49;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2002.12.13.00.07.58;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2002.12.06.20.38.26;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2002.12.04.23.37.55;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2002.12.04.19.17.59;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2002.12.03.00.43.30;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2002.11.26.23.28.51;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2002.11.22.21.18.01;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2002.11.21.22.54.00;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2002.11.15.20.27.14;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2002.10.30.23.47.33;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2002.10.18.22.23.57;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2002.07.24.18.38.11;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2002.07.08.18.15.39;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2002.07.02.19.21.00;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.07.01.20.15.34;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.28.19.40.17;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.06.21.21.52.21;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.21.18.13.44;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.19.22.41.16;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.19.18.53.28;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.18.21.42.06;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.18.17.54.45;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.17.22.08.18;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.17.17.29.28;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.13.21.50.14;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.10.21.55.16;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.07.23.45.12;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.24.23.00.08;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.21.19.10.28;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.39
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef SglSrcSiteH
#define SglSrcSiteH

//------------------------------------------------------------------------------
// Header file: "SglSrcSite.h"
//
// Contains the declaration of class SglSrcSite.
//------------------------------------------------------------------------------

#include <ObjStack.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class SglSrcSite
//
// "Single-Source Site"
//
// Represents an RtSite for which the single-source technique has been
// requested.
//------------------------------------------------------------------------------

class WitSglSrcSite: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSglSrcSite (WitRtSite *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSglSrcSite ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool isPreferredTo (WitSglSrcSite * othSite);
         //
         // Returns true, iff this SglSrcSite is preferred to othSite for
         // sgl-src consideration.

      bool nextCandIsSglSrc ();
         //
         // Returns true, iff incumbUniqueRtCand_ exists and the next RtCand
         // for sgl-src matches it.

      void selectNext ();
         //
         // Selects the next RtCand for sgl-src.

      void applySel ();
         //
         // Applies the current sgl-src selection, if any, to the multi-route
         // subsystem.

      void resumeMS ();
         //
         // Puts this SglSrcSite back into multi-source mode.

      void initCmqFixed ();
         //
         // Takes actions appropriate at the beginning for SglSrcMgr::cmqFixed.

      void recordVisit (WitRtCand * theRtCand, int thePcIdx);
         //
         // Records the fact that this SglSrcSite is being visited, using
         // theRtCand as its selection, with thePcIdx as the current 
         // perm-commit index. If theRtCand == NULL, this indicates that
         // a candidate ineligible for sgl-src was used as the selection.

      void resetIncumb ();
         //
         // Resets data data associated with the incumbent cmqFixed.

      void saveCurAsIncumb ();
         //
         // Saves data associated with the current cmqFixed as data associated
         // with the incumbent cmqFixed.

      bool expProhibited (WitPeriod thePer);
         //
         // Returns true, iff explosion thru this SglSrcSite is prohibited in
         // thePer.

      void reset ();
         //
         // Puts this SglSrcSite into its initial state.

      void prtSel (const char * text);
         //
         // Does printing for some aspect of attempting a selection at this
         // SglSrcSite, as indicated by text.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline bool sglSrcMode ()
         {
         return (selRtCand_ != NULL);
         }
         //
         // true  --> this SglSrcSite is sgl-src   mode.
         // false --> this SglSrcSite is multi-src mode.

      inline bool hasUntried ()
         {
         return (nextRtCand_ != NULL);
         }

      accessFunc (bool, altered)
      accessFunc (int,  curPcIdx)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitSglSrcSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRtSite * const myRtSite_;
         //
         // The RtSite represented by this SglSrcSite.

      WitSelector * const mySelector_;
         //
         // The Selector associated with this SglSrcSite.

      WitObjStack <WitRtCand> myRtCands_;
         //
         // The ordered list of RtCands considered by this SglSrcSite.

      WitRtCand * selRtCand_;
         //
         // The RtCand currently selected for sgl-src routing from this
         // SglSrcSite, if any; otherwise NULL.

      WitRtCand * nextRtCand_;
         //
         // The next RtCand to consider for sgl-src routing from this
         // SglSrcSite, if any; otherwise NULL.

      WitObjStItr <WitRtCand> nextRtCandItr_;
         //
         // The Itr corresponding to nextRtCand_.

      bool altered_;
         //
         // true, iff the selection for this SglSrcSite has been altered since
         // the most recent reset.

      int curPcIdx_;
         //
         // The perm-commit index of the last time this SglSrcSite was visited
         // during the current cmqFixed, or -1, if it was not visited during
         // the current cmqFixed.

      int incumbPcIdx_;
         //
         // Same as curPcIdx_, but for the incumbent cmqFixed.

      bool curVisited_;
         //
         // true, iff this SglSrcSite has been visited during the current
         // cmqFixed in perm or temp mode,

      WitRtCand * curUniqueRtCand_;
         //
         // If this SglSrcSite was visited during the current cmqFixed with flow
         // to only one RtCand in perm or temp mode, curUniqueRtCand_ is that
         // RtCand; otherwise NULL.

      WitRtCand * incumbUniqueRtCand_;
         //
         // Same as curUniqueRtCand_, but for the incumbent cmqFixed.
   };

#endif
@


1.38
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.37
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d32 2
a33 41
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitSglSrcSite (WitRtSite *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitSglSrcSite ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

bool isPreferredTo (WitSglSrcSite * othSite);
//
// Returns true, iff this SglSrcSite is preferred to othSite for
// sgl-src consideration.

bool nextCandIsSglSrc ();
//
// Returns true, iff incumbUniqueRtCand_ exists and the next RtCand
// for sgl-src matches it.

void selectNext ();
//
// Selects the next RtCand for sgl-src.

void applySel ();
//
// Applies the current sgl-src selection, if any, to the multi-route
// subsystem.

void resumeMS ();
//
// Puts this SglSrcSite back into multi-source mode.
d35 161
a195 122
void initCmqFixed ();
//
// Takes actions appropriate at the beginning for SglSrcMgr::cmqFixed.

void recordVisit (WitRtCand * theRtCand, int thePcIdx);
//
// Records the fact that this SglSrcSite is being visited, using
// theRtCand as its selection, with thePcIdx as the current
// perm-commit index. If theRtCand == NULL, this indicates that
// a candidate ineligible for sgl-src was used as the selection.

void resetIncumb ();
//
// Resets data data associated with the incumbent cmqFixed.

void saveCurAsIncumb ();
//
// Saves data associated with the current cmqFixed as data associated
// with the incumbent cmqFixed.

bool expProhibited (WitPeriod thePer);
//
// Returns true, iff explosion thru this SglSrcSite is prohibited in
// thePer.

void reset ();
//
// Puts this SglSrcSite into its initial state.

void prtSel (const char * text);
//
// Does printing for some aspect of attempting a selection at this
// SglSrcSite, as indicated by text.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

inline bool sglSrcMode ()
{
return (selRtCand_ != NULL);
}
//
// true  --> this SglSrcSite is sgl-src   mode.
// false --> this SglSrcSite is multi-src mode.

inline bool hasUntried ()
{
return (nextRtCand_ != NULL);
}

accessFunc (bool, altered)
accessFunc (int,  curPcIdx)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitSglSrcSite);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitRtSite * const myRtSite_;
//
// The RtSite represented by this SglSrcSite.

WitSelector * const mySelector_;
//
// The Selector associated with this SglSrcSite.

WitObjStack <WitRtCand> myRtCands_;
//
// The ordered list of RtCands considered by this SglSrcSite.

WitRtCand * selRtCand_;
//
// The RtCand currently selected for sgl-src routing from this
// SglSrcSite, if any; otherwise NULL.

WitRtCand * nextRtCand_;
//
// The next RtCand to consider for sgl-src routing from this
// SglSrcSite, if any; otherwise NULL.

WitObjStItr <WitRtCand> nextRtCandItr_;
//
// The Itr corresponding to nextRtCand_.

bool altered_;
//
// true, iff the selection for this SglSrcSite has been altered since
// the most recent reset.

int curPcIdx_;
//
// The perm-commit index of the last time this SglSrcSite was visited
// during the current cmqFixed, or -1, if it was not visited during
// the current cmqFixed.

int incumbPcIdx_;
//
// Same as curPcIdx_, but for the incumbent cmqFixed.

bool curVisited_;
//
// true, iff this SglSrcSite has been visited during the current
// cmqFixed in perm or temp mode,

WitRtCand * curUniqueRtCand_;
//
// If this SglSrcSite was visited during the current cmqFixed with flow
// to only one RtCand in perm or temp mode, curUniqueRtCand_ is that
// RtCand; otherwise NULL.

WitRtCand * incumbUniqueRtCand_;
//
// Same as curUniqueRtCand_, but for the incumbent cmqFixed.
};
@


1.36
log
@Selection Recovery
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d32 41
a72 2
   {
   public:
d74 122
a195 161
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSglSrcSite (WitRtSite *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSglSrcSite ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool isPreferredTo (WitSglSrcSite * othSite);
         //
         // Returns true, iff this SglSrcSite is preferred to othSite for
         // sgl-src consideration.

      bool nextCandIsSglSrc ();
         //
         // Returns true, iff incumbUniqueRtCand_ exists and the next RtCand
         // for sgl-src matches it.

      void selectNext ();
         //
         // Selects the next RtCand for sgl-src.

      void applySel ();
         //
         // Applies the current sgl-src selection, if any, to the multi-route
         // subsystem.

      void resumeMS ();
         //
         // Puts this SglSrcSite back into multi-source mode.

      void initCmqFixed ();
         //
         // Takes actions appropriate at the beginning for SglSrcMgr::cmqFixed.

      void recordVisit (WitRtCand * theRtCand, int thePcIdx);
         //
         // Records the fact that this SglSrcSite is being visited, using
         // theRtCand as its selection, with thePcIdx as the current 
         // perm-commit index. If theRtCand == NULL, this indicates that
         // a candidate ineligible for sgl-src was used as the selection.

      void resetIncumb ();
         //
         // Resets data data associated with the incumbent cmqFixed.

      void saveCurAsIncumb ();
         //
         // Saves data associated with the current cmqFixed as data associated
         // with the incumbent cmqFixed.

      bool expProhibited (WitPeriod thePer);
         //
         // Returns true, iff explosion thru this SglSrcSite is prohibited in
         // thePer.

      void reset ();
         //
         // Puts this SglSrcSite into its initial state.

      void prtSel (const char * text);
         //
         // Does printing for some aspect of attempting a selection at this
         // SglSrcSite, as indicated by text.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline bool sglSrcMode ()
         {
         return (selRtCand_ != NULL);
         }
         //
         // true  --> this SglSrcSite is sgl-src   mode.
         // false --> this SglSrcSite is multi-src mode.

      inline bool hasUntried ()
         {
         return (nextRtCand_ != NULL);
         }

      accessFunc (bool, altered)
      accessFunc (int,  curPcIdx)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitSglSrcSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRtSite * const myRtSite_;
         //
         // The RtSite represented by this SglSrcSite.

      WitSelector * const mySelector_;
         //
         // The Selector associated with this SglSrcSite.

      WitObjStack <WitRtCand> myRtCands_;
         //
         // The ordered list of RtCands considered by this SglSrcSite.

      WitRtCand * selRtCand_;
         //
         // The RtCand currently selected for sgl-src routing from this
         // SglSrcSite, if any; otherwise NULL.

      WitRtCand * nextRtCand_;
         //
         // The next RtCand to consider for sgl-src routing from this
         // SglSrcSite, if any; otherwise NULL.

      WitObjStItr <WitRtCand> nextRtCandItr_;
         //
         // The Itr corresponding to nextRtCand_.

      bool altered_;
         //
         // true, iff the selection for this SglSrcSite has been altered since
         // the most recent reset.

      int curPcIdx_;
         //
         // The perm-commit index of the last time this SglSrcSite was visited
         // during the current cmqFixed, or -1, if it was not visited during
         // the current cmqFixed.

      int incumbPcIdx_;
         //
         // Same as curPcIdx_, but for the incumbent cmqFixed.

      bool curVisited_;
         //
         // true, iff this SglSrcSite has been visited during the current
         // cmqFixed in perm or temp mode,

      WitRtCand * curUniqueRtCand_;
         //
         // If this SglSrcSite was visited during the current cmqFixed with flow
         // to only one RtCand in perm or temp mode, curUniqueRtCand_ is that
         // RtCand; otherwise NULL.

      WitRtCand * incumbUniqueRtCand_;
         //
         // Same as curUniqueRtCand_, but for the incumbent cmqFixed.
   };
@


1.35
log
@Updated the copyright date on all source files.
@
text
@d150 1
a150 1
         // The ordered list of RtCands owned by this SglSrcSite.
@


1.34
log
@Continued implementation of proportionate routing.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.33
log
@Continued implementation of proportionate routing.
@
text
@d148 1
a148 1
      WitRtCandStack myRtCands_;
@


1.32
log
@Continued implementation of proportionate routing.
@
text
@d148 1
a148 1
      WitObjStack <WitRtCand> myRtCands_;
@


1.31
log
@Internal changes.
@
text
@d16 1
a16 5
// Contains the declaration of the following classes:
//
//    SglSrcSite.
//    PmrSsSite.
//    CmrSsSite.
d27 2
a28 15
// Represents either a Part or BomEntry for which the single-source technique
// has been requested. In comments, the Part or BomEntry associated with this
// SglSrcSite is called "myComp".
//
// Currently, only the Part case is implemented.
//
// This class is part of the implementation of the new single-source algorithm.
//
// Class Hierarchy:
//
// SglSrcSite
//    PmrSsSite
//    CmrSsSite
//
// Implemented in SglSrc.C.
d36 6
d51 5
d58 1
a58 1
         // Returns true, iff incumbUniqueCand_ exists and the next SglSrcCand
d63 1
a63 1
         // Selects the next SglSrcCand for sgl-src.
d78 1
a78 1
      void recordVisit (WitBillEntry * theBillEnt, int thePcIdx);
d81 2
a82 2
         // theBillEnt as its selection, with thePcIdx as the current 
         // perm-commit index. If theBillEnt == NULL, this indicates that
a102 4
      virtual int heightIdx () = 0;
         //
         // An index indicating the height of myComp in the BOM structure.

d114 1
a114 1
         return (selCand_ != NULL);
d122 1
a122 1
         return (nextCand_ != NULL);
a126 15
      accessFunc (int,  incumbPcIdx)

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSglSrcSite (WitSelector *);

      void setup ();
         //
         // Sets up this SglSrcSite.

      accessFunc (WitSelector *, mySelector)
a133 14
      virtual void buildCands (WitObjStack <WitSglSrcCand> & theCands) = 0;
         //
         // Creates the SglSrcCands for this SglSrcSite, storing them in order
         // in theCands.

      virtual void prtID () = 0;
         //
         // Prints data identifying this SglSrcSite.

      WitSglSrcCand * myCandFor (WitBillEntry * theBillEnt);
         //
         // Returns the SglSrcCand for this SglSrcSite that matches theBillEnt.
         // Requires that one exists.

d140 4
d148 1
a148 1
      WitObjStack <WitSglSrcCand> myCands_;
d150 1
a150 1
         // The ordered list of SglSrcCands owned by this SglSrcSite.
d152 1
a152 1
      WitSglSrcCand * selCand_;
d154 2
a155 2
         // The SglSrcCand currently selected for sgl-src routing from
         // this SglSrcSite, if any; otherwise NULL.
d157 1
a157 1
      WitSglSrcCand * nextCand_;
d159 2
a160 2
         // The next SglSrcCand to consider for sgl-src routing from
         // this SglSrcSite, if any; otherwise NULL.
d162 1
a162 1
      WitObjStItr <WitSglSrcCand> nextCandItr_;
d164 1
a164 1
         // The Itr corresponding to nextCand_.
d186 1
a186 1
      WitSglSrcCand * curUniqueCand_;
d189 2
a190 137
         // to only one SglSrcCand in perm or temp mode, curUniqueCand_ is that
         // SglSrcCand; otherwise NULL.

      WitSglSrcCand * incumbUniqueCand_;
         //
         // Same as curUniqueCand_, but for the incumbent cmqFixed.
   };

//------------------------------------------------------------------------------
// Class PmrSsSite
//
// "Production Multi-Route Single-Source Site"
//
// Represents a Part for which the single-source technique has been requested.
//
// This class is part of the implementation of the new single-source algorithm.
//
// Class Hierarchy:
//
// SglSrcSite
//    PmrSsSite
//
// Implemented in SglSrc.C.
//------------------------------------------------------------------------------

class WitPmrSsSite: public WitSglSrcSite
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPmrSsSite (WitPart *, WitSelector *);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual int heightIdx ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPmrSsSite ();

      //------------------------------------------------------------------------
      // Overrides from class SglSrcSite.
      //------------------------------------------------------------------------

      virtual void buildCands (WitObjStack <WitSglSrcCand> &);
      virtual void prtID      ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPmrSsSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPart * const myPart_;
         //
         // The Part associated with this PmrSsSite.
   };

//------------------------------------------------------------------------------
// Class CmrSsSite
//
// "Consumption Multi-Route Single-Source Site"
//
// Represents a BomEntry for which the single-source technique has been
// requested.
//
// This class is part of the implementation of the new single-source algorithm.
//
// Class Hierarchy:
//
// SglSrcSite
//    CmrSsSite
//
// Implemented in SglSrc.C.
//------------------------------------------------------------------------------

class WitCmrSsSite: public WitSglSrcSite
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitCmrSsSite (WitBomEntry *, WitSelector *);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual int heightIdx ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitCmrSsSite ();

      //------------------------------------------------------------------------
      // Overrides from class SglSrcSite.
      //------------------------------------------------------------------------

      virtual void buildCands (WitObjStack <WitSglSrcCand> &);
      virtual void prtID      ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitCmrSsSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d192 1
a192 1
      WitBomEntry * const myBomEnt_;
d194 1
a194 1
         // The BomEntry associated with this CmrSsSite.
@


1.30
log
@Continued implementation of single-source by the new algorithm.
@
text
@d62 1
a62 1
      WitBoolean nextCandIsSglSrc ();
d64 1
a64 1
         // Returns TRUE, iff incumbUniqueCand_ exists and the next SglSrcCand
d100 1
a100 1
      WitBoolean expProhibited (WitPeriod thePer);
d102 1
a102 1
         // Returns TRUE, iff explosion thru this SglSrcSite is prohibited in
d122 1
a122 1
      inline WitBoolean sglSrcMode ()
d127 2
a128 2
         // TRUE  --> this SglSrcSite is sgl-src   mode.
         // FALSE --> this SglSrcSite is multi-src mode.
d130 1
a130 1
      inline WitBoolean hasUntried ()
d135 3
a137 3
      accessFunc (WitBoolean, altered)
      accessFunc (int,        curPcIdx)
      accessFunc (int,        incumbPcIdx)
d201 1
a201 1
      WitBoolean altered_;
d203 1
a203 1
         // TRUE, iff the selection for this SglSrcSite has been altered since
d216 1
a216 1
      WitBoolean curVisited_;
d218 1
a218 1
         // TRUE, iff this SglSrcSite has been visited during the current
@


1.29
log
@Continued implementation of single-source by the new algorithm.
@
text
@d73 2
a74 1
         // Applies the current sgl-src selection to the multi-route subsystem.
@


1.28
log
@Continued implementation of single-source by the new algorithm.
@
text
@d62 1
a62 1
      void selectUniqueCand ();
d64 2
a65 1
         // Selects incumbUniqueCand_ for sgl-src.
a133 5
      inline WitBoolean incumbFlowIsSglSrc ()
         {
         return (incumbUniqueCand_ != NULL);
         }

d144 1
a144 1
      WitSglSrcSite (WitProblem *);
d146 1
a146 1
      void setup (WitSelector * theSelector);
d148 3
a150 1
         // Sets up this SglSrcSite, using theSelector.
d158 1
a158 3
      virtual void buildCands (
            WitObjStack <WitSglSrcCand> & theCands,
            WitSelector *                 theSelector) = 0;
d161 1
a161 1
         // in theCands, and using theSelector.
d178 4
d213 6
a218 3
         // The perm-commit index of the last time this SglSrcSite was visited
         // during the incumbent cmqFixed, or -1, if it was not visited during
         // the incumbent cmqFixed.
d223 2
a224 2
         // to only selected one SglSrcCand, curUniqueCand_ is that SglSrcCand;
         // otherwise NULL.
d228 1
a228 3
         // If this SglSrcSite was visited during the incumbent cmqFixed with
         // flow to only selected one SglSrcCand, curUniqueCand_ is that
         // SglSrcCand; otherwise NULL.
d280 1
a280 1
      virtual void buildCands (WitObjStack <WitSglSrcCand> &, WitSelector *);
d348 1
a348 1
      virtual void buildCands (WitObjStack <WitSglSrcCand> &, WitSelector *);
@


1.27
log
@Continued implementation of single-source with the new algorithm.
@
text
@d62 1
a62 1
      void selectUniqueSel ();
d64 1
a64 1
         // Selects incumbUniqueSel_ for sgl-src.
d93 1
a93 1
      void saveAsIncumbent ();
d135 1
a135 1
         return (incumbUniqueSel_ != NULL);
d217 1
a217 1
      WitSglSrcCand * curUniqueSel_;
d219 3
a221 3
         // If this SglSrcSite was visited during the current cmqFixed and only
         // selected one SglSrcCand, curUniqueSel_ is that SglSrcCand; otherwise
         // NULL.
d223 1
a223 1
      WitSglSrcCand * incumbUniqueSel_;
d225 3
a227 3
         // If this SglSrcSite was visited during the incumbent cmqFixed and 
         // only selected one SglSrcCand, incumbUniqueSel_ is that SglSrcCand;
         // otherwise NULL.
@


1.26
log
@Continued implementation of single-source with the new algorithm.
@
text
@d138 3
a140 2
      accessFunc (int, curPcIdx)
      accessFunc (int, incumbPcIdx)
d199 5
@


1.25
log
@Continued implementation of single-source by the new algorithm.
@
text
@d62 4
d78 5
a82 1
      void setCurPcIdx (int);
d84 4
a87 1
         // Sets curPcIdx_.
d89 1
a89 1
      void resetIncumbPcIdx ();
d91 1
a91 1
         // Resets incumbPcIdx_.
d95 2
a96 1
         // Saves curPcIdx_ as incumbPcIdx_.
d133 5
d170 5
d183 1
a183 1
         // The ordered list of SglSrcCands for this SglSrcSite.
d210 12
@


1.24
log
@Continued implementation of single-source by the new algorithm.
@
text
@d74 12
d95 4
d121 3
d176 12
d217 6
d284 6
@


1.23
log
@Continued implementation of single-source with the new algorithm.
Fixed a null pointer bug in single-source with the old algorithm.
@
text
@d20 1
d31 3
a33 3
// Represents a Part or BomEntry for which the single-source technique has been
// requested. In comments, the Part or BomEntry associated with this SglSrcSite
// is called "myComp".
d43 1
d74 1
a74 1
      WitBoolean flowProhibited (WitPeriod thePer);
d76 2
a77 1
         // Returns TRUE, iff flow thru this SglSrcSite is prohibited in thePer.
d218 62
@


1.22
log
@Continued implementation of single-source with the new algorithm.
@
text
@d64 1
a64 1
      void applySsSel ();
d72 4
d78 1
a78 1
         // Puts this ScgSrcSite into its initial state.
@


1.21
log
@Began implementation of the new single-source algorithm.
@
text
@d17 3
d21 193
@


1.20
log
@Fixed the "interference bug" in Single-Source.
@
text
@a16 4
//
//    SglSrcSite.
//    PmrSsSite.
//    CmrSsSite.
a17 266

#include <ObjStack.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class SglSrcSite
//
// "Single-Source Site"
//
// Represents a Part or BomEntry for which the single-source technique has been
// requested. In comments, the Part or BomEntry associated with this SglSrcSite
// is called "myComp".
//
// Class Hierarchy:
//
// SglSrcSite
//    PmrSsSite
//    CmrSsSite
//
// Implemented in SglSrc.C.
//------------------------------------------------------------------------------

class WitSglSrcSite: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSglSrcSite ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void init (WitBoolean forReinit);
         //
         // Puts this SglSrcSite into its initial state.
         // forReinit is TRUE, iff this is for re-initialization.

      void alterSel ();
         //
         // Advances the selection to the next candidate or switches this
         // SglSrcSite into multi-source mode, as appropriate.

      void switchToMS ();
         //
         // Switches this SglSrcSite to multi-source mode.

      void applySsSel ();
         //
         // Applies the single-source selection for this SglSrcSite to
         // Multi-Route.

      WitBoolean hasMisMatch (WitPeriod thePer);
         //
         // Returns TRUE, iff the current multi-route selection at myComp in
         // thePer differs from selSsCand_.

      WitBoolean altered ();
         //
         // Returns TRUE, iff the selection of this SglSrcSite has been altered.
                                                   
      virtual void prtID () = 0;
         //
         // Prints info identifying this SglSrcSite.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitTVec <WitBoolean> &, nonMS)

      inline WitBoolean sglSrcMode ()
         {
         return (selSsCand_ != NULL);
         }
         //
         // TRUE  --> this SglSrcSite is single-source mode.
         // FALSE --> this SglSrcSite is  multi-source mode.

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSglSrcSite (WitProblem *);

      void setup (WitSelector * theSelector);
         //
         // Sets up this SglSrcSite, using theSelector.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void printInit (WitBoolean forReinit);
         //
         // Does printing for initializing the single-source selection.
         // forReinit is TRUE, iff this is for re-initialization.

      void prtAlter ();
         //
         // Does printing for altering the single-source selection.

      virtual void buildSsCands (
            WitObjStack <WitSglSrcCand> & theSsCands,
            WitSelector *                 theSelector) = 0;
         //
         // Creates the SglSrcCands for this SglSrcSite, storing them in order
         // in theSsCands, and using theSelector.

      noCopyCtorAssign (WitSglSrcSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitObjStack <WitSglSrcCand> mySsCands_;
         //
         // The ordered list of SglSrcCands for this SglSrcSite.

      WitObjStItr <WitSglSrcCand> selSsCandItr_;
         //
         // The Itr corresponding to selSsCand_.

      WitSglSrcCand * selSsCand_;
         //
         // The SglSrcCand currently selected for single-source routing from
         // this SglSrcSite, if any; otherwise NULL.

      WitTVec <WitBoolean> nonMS_;
         //
         // nonMS_[thePer] is TRUE, iff the selection used by CMQ at
         // myComp in thePer is different from the multi-source selection at
         // myComp in thePer.
   };

//------------------------------------------------------------------------------
// Class PmrSsSite
//
// "Production Multi-Route Single-Source Site"
//
// Represents a Part for which the single-source technique has been requested.
//
// Class Hierarchy:
//
// SglSrcSite
//    PmrSsSite
//
// Implemented in SglSrc.C.
//------------------------------------------------------------------------------

class WitPmrSsSite: public WitSglSrcSite
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPmrSsSite (WitPart *, WitSelector *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPmrSsSite ();

      //------------------------------------------------------------------------
      // Overrides from class SglSrcSite.
      //------------------------------------------------------------------------

      virtual void prtID ();

      virtual void buildSsCands (WitObjStack <WitSglSrcCand> &, WitSelector *);

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPmrSsSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPart * const myPart_;
         //
         // The Part associated with this PmrSsSite.
   };

//------------------------------------------------------------------------------
// Class CmrSsSite
//
// "Production Multi-Route Single-Source Site"
//
// Represents a BomEntry for which the single-source technique has been
// requested.
//
// Class Hierarchy:
//
// SglSrcSite
//    CmrSsSite
//
// Implemented in SglSrc.C.
//------------------------------------------------------------------------------

class WitCmrSsSite: public WitSglSrcSite
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitCmrSsSite (WitBomEntry *);

      WitCmrSsSite (WitBomEntry *, WitSelector * theSelector);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitCmrSsSite ();

      //------------------------------------------------------------------------
      // Overrides from class SglSrcSite.
      //------------------------------------------------------------------------

      virtual void prtID ();

      virtual void buildSsCands (WitObjStack <WitSglSrcCand> &, WitSelector *);

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitCmrSsSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBomEntry * const myBomEnt_;
         //
         // The BomEntry associated with this CmrSsSite.
   };

#endif
@


1.19
log
@Continued implementation of heuristic implosion from an initial solution.
Added some debugging code to Single-Source.
@
text
@a23 1
#include <PerStack.h>
a57 4
      void setup (WitSelector * theSelector);
         //
         // Sets up this SglSrcSite, using theSelector.

d63 1
a63 1
      void advance ();
d68 1
a68 1
      void reset ();
d70 1
a70 1
         // Resets this SglSrcSite.
d77 1
a77 10
      void clearReqsPlaced ();
         //
         // Sets reqsPlacedIn_ to all FALSE.

      void placeReqs (WitPeriod thePer);
         //
         // Records the fact that requirements were placed by exploding thru
         // myComp in thePer.

      void activateAsNeeded (WitTVec <WitBoolean> & workVec);
d79 2
a80 11
         // Adds the periods that were used for myComp in
         // commitMaxQty to the active set. In that case, if selSsCand_ is not
         // valid for that period, the selection is advanced.
         // workVec is used as a working vector; it should be all FALSE
         // when calling the function and is restored to all FALSE upon return.

      WitBoolean hasMisMatch ();
         //          
         // Returns TRUE, iff the current multi-route selection at myComp
         // differs from selSsCand_ in any period that was used for myComp in
         // commitMaxQty.
d82 1
a82 1
      WitBoolean placedSSreqs ();
d84 1
a84 4
         // Returns TRUE, iff reqs were placed at myComp in some period in which
         // the SS selection didn't match the MS selection.

      void setCurrent (WitBoolean);
d94 1
a94 1
      accessFunc (WitBoolean, current)
d112 4
a121 10
      WitBoolean hasActiveMisMatch ();
         //          
         // Returns TRUE, iff the current multi-route selection at myComp
         // differs from selSsCand_ in any active period.

      WitBoolean selIsValid ();
         //
         // Returns TRUE, iff selSsCand_ is a valid selection for all periods
         // in activePers_.

d127 1
a127 1
      void printAdvance ();
d129 1
a129 5
         // Does printing for advancing the single-source selection.

      void printActivated ();
         //
         // Does printing for adding to the set of active periods.
d157 1
a157 6
      WitBoolean current_;
         //
         // TRUE, iff this SglSrcSite is being used by the current call to
         // SglSrcMgr::commitMaxQty.

      WitPerStack activePers_;
d159 1
a159 5
         // The set of periods in which curSel currently applies.

      WitPerStack nonMSPers_;
         //
         // The set of periods, thePer, for which the selection used by CMQ at
a161 10

      WitTVec <WitBoolean> reqsPlacedIn_;
         //
         // reqsPlaced[thePer] is TRUE, iff this SglSrcSite is in single-source 
         // mode and requirements were placed by exploding thru myComp in thePer
         // during the most recent call to Selector::commitMaxQty.

      WitPerStack reqsPlacedPers_;
         //
         // The set of periods, thePer, for which reqsPlacedIn_[thePer] is TRUE.
d187 1
a187 1
      WitPmrSsSite (WitPart *);
d249 2
@


1.18
log
@Continued implementation of Single-Source.
@
text
@d112 4
a172 4

      virtual void prtID () = 0;
         //
         // Prints info identifying this SglSrcSite.
@


1.17
log
@Continued implementation of Single-Source.
@
text
@d91 1
a91 1
      void activateAsNeeded (WitTVec <WitBoolean> & theBoolTVec);
d96 1
a96 1
         // theBoolTVec is used as a working vector; it should be all FALSE
d139 5
@


1.16
log
@Continued implementation of Single-Source.
@
text
@d59 1
a59 1
      void buildSsCands (WitSelector * theSelector);
d61 1
a61 1
         // Creates the SglSrcCands for this SglSrcSite, using theSelector.
d63 1
a63 1
      void init ();
d66 1
d77 1
a77 1
      void prepCMQ ();
d79 6
a84 1
         // Prepares for a call to Selector::commitMaxQty.
d109 2
d116 2
d145 1
a145 5
      void clearReqsPlaced ();
         //
         // Sets reqsPlaced_ to all FALSE.

      void printInit ();
d148 1
d188 5
d203 1
a203 1
      WitTVec <WitBoolean> reqsPlaced_;
d205 3
a207 3
         // reqsPlaced[thePer] is TRUE, iff requirements were placed by
         // exploding thru myComp in thePer during the 
         // most recent call to Selector::commitMaxQty.
d211 1
a211 1
         // The set of periods, thePer, for which reqsPlaced_[thePer] is TRUE.
@


1.15
log
@Continued implementation of Single-Source.
@
text
@d20 1
d32 3
a34 2
// Represents a Part for which the single-source technique has been requested.
// In comments, the Part associated with this SglSrcSite is called "myPart".
d40 1
d83 1
a83 1
         // myPart in thePer.
d87 1
a87 1
         // Adds the periods that were used for myPart in
d95 2
a96 2
         // Returns TRUE, iff the current multi-route selection at myPart
         // differs from selSsCand_ in any period that was used for myPart in
d101 1
a101 1
         // Returns TRUE, iff reqs were placed at myPart in some period in which
d188 2
a189 2
         // myPart in thePer is different from the multi-source selection at
         // myPart in thePer.
d194 1
a194 1
         // exploding thru myPart in thePer during the 
d260 61
@


1.14
log
@Continued implementation of Single-Source.
@
text
@d56 4
d119 1
a119 7
      WitSglSrcSite (WitSglSrcMgr *);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitSglSrcMgr *, mySglSrcMgr)
d148 3
a150 1
      virtual void getSsCands (WitObjStack <WitSglSrcCand> & theSsCands) = 0;
d152 2
a153 2
         // Sets theSsCands to be the ordered list of SglSrcCands for this
         // SglSrcSite.
d165 1
a165 1
      WitSglSrcMgr * const mySglSrcMgr_;
d167 1
a167 1
         // The SglSrcMgr that owns this SglSrcSite.
d169 1
a169 1
      WitObjStack <WitSglSrcCand> mySsCands_;
d171 1
a171 2
         // The ordered list of SglSrcCands for this SglSrcSite that have not
         // yet been selected.
d222 1
a222 1
      WitPmrSsSite (WitPart *, WitSglSrcMgr *);
d240 3
a242 2
      virtual void getSsCands (WitObjStack <WitSglSrcCand> &);
      virtual void prtID      ();
a256 4

      WitPmrMgr * const myPmrMgr_;
         //
         // The PmrMgr associated with this PmrSsSite.
@


1.13
log
@Continued implementation of Single-Source.
@
text
@d16 4
a19 1
// Contains the declaration of class SglSrcSite.
d29 2
d32 8
a46 6
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSglSrcSite (WitPart *, WitSelector *);

      //------------------------------------------------------------------------
d50 1
a50 1
      ~WitSglSrcSite ();
d76 1
a76 1
         // myPart_ in thePer.
d80 3
a82 3
         // Adds the periods that were used for myPart_ in commitMaxQty to the
         // active set. In that case, if selBopEntry_ is not valid for that
         // period, the selection is advanced.
d88 2
a89 2
         // Returns TRUE, iff the current multi-route selection at myPart_ 
         // differs from selBopEntry_ in any period that was used for myPart_ in
d94 2
a95 2
         // Returns TRUE, iff reqs were placed at myPart_ in some period in
         // which the SS selection didn't match the MS selection.
d103 1
a103 1
         return (selBopEntry_ != NULL);
d109 14
d131 1
a131 1
         // Returns TRUE, iff selBopEntry_ is a valid selection for all periods
d150 8
a157 1
      inline WitPmrMgr * myPmrMgr ();
d165 1
a165 5
      WitPart * const myPart_;
         //
         // The Part associated with this SglSrcSite.

      WitSelector * const mySelector_;
d167 1
a167 1
         // The Selector for this SglSrcSite.
d169 1
a169 1
      WitBopEntry * selBopEntry_;
d171 2
a172 2
         // The BopEntry currently selected for single-source routing from
         // myPart_, if any; otherwise NULL.
d174 1
a174 1
      WitBopEntStack candBopEnts_;
d176 2
a177 2
         // The ordered list of candidate BopEntries not yet selected for this
         // SglSrcSite.
d186 2
a187 2
         // myPart_ in thePer is different from the multi-source selection at
         // myPart_ in thePer.
d192 2
a193 2
         // exploding thru myPart_ in thePer during the most recent call to
         // Selector::commitMaxQty.
d198 63
@


1.12
log
@Continued implementation of Single-Source.
@
text
@d20 1
a20 1
#include <PairStack.h>
d155 1
a155 1
      WitPairStack <WitTlObj, WitPeriod> activePers_;
d157 1
a157 2
         // The first element of each pair is ignored.
         // The set of periods, thePer, in which curSel currently applies.
d159 1
a159 1
      WitPairStack <WitTlObj, WitPeriod> nonMSPers_;
a160 1
         // The first element of each pair is ignored.
d171 1
a171 1
      WitPairStack <WitTlObj, WitPeriod> reqsPlacedPers_;
a172 1
         // The first element of each pair is ignored.
@


1.11
log
@Continued implementation of Single-Source.
@
text
@d19 2
d71 1
a71 1
      void activateAsNeeded ();
d76 2
d108 9
d141 4
d155 1
a155 1
      WitSelector * const mySelector_;
d157 2
a158 1
         // The Selector for this SglSrcSite.
d160 1
a160 1
      WitTVec <WitBoolean> active_;
d162 4
a165 6
         // active_[thePer] is TRUE, iff curSel currently applies in thePer.

      WitTVec <WitBoolean> initMisMatch_;
         //
         // initMisMatch_[thePer] is TRUE, iff the selection at myPart_ in
         // thePer did not match curSel_ before it was applied.
d172 5
@


1.10
log
@Continued implementation of Single-Source.
@
text
@d80 5
d145 5
@


1.9
log
@Continued implementation of Single-Source.
@
text
@d69 1
a69 1
      void activateAsNeeded (WitBoolean & misMatch);
d72 8
a79 4
         // active set. If the current multi-route selection at myPart_ in any
         // such period differs from selBopEntry_, misMatch is set to TRUE.
         // In that case, if selBopEntry_ is not valid for that period, the
         // selection is advanced.
@


1.8
log
@Continued implementation of Single-Source.
@
text
@d69 1
a69 1
      WitBoolean hasMisMatch ();
d71 6
a76 10
         // Returns TRUE, iff there is a mis-match between the current selection
         // at this SglSrcSite and that at myPart_ in any period in which
         // requires were placed during Selector::commitMaxQty.

      void activatePersUsed ();
         //
         // Adds periods that were used for myPart_ in commitMaxQty to the
         // active set and verifies that their current selection matches that of
         // this SglSrcSite.

d97 1
a97 1
         // Does printing advance for altering the single-source selection.
d101 5
a105 1
         // Does printing advance for altering the single-source selection.
@


1.7
log
@Continued implementation of Single-Source.
@
text
@d56 4
d123 5
@


1.6
log
@Continued implementation of Single-Source.
@
text
@d65 6
@


1.5
log
@Continued implementation of Single-Source.
@
text
@d56 1
a56 1
      void applySelection ();
d58 12
a69 1
         // Applies selBopEntry_ to the corresponding SelPt, if appropriate.
d117 10
@


1.4
log
@Continued implementation of Single-Source.
@
text
@d47 4
a59 4
      void reset ();
         //
         // Restores this SglSrcSite to its default state.

d64 1
a64 3
      accessFunc (WitBoolean, sglSrcMode)

      inline WitBoolean hasSel ()
d68 3
d78 1
a78 1
      void printAlt ();
d80 1
a80 1
         // Does printing appropriate for altering the single-source selection.
d82 1
a82 1
      void printSwitchToMulti ();
d84 1
a84 1
         // Does printing appropriate for switching to multi-source mode.
a96 9

      WitBoolean sglSrcMode_;
         //
         // TRUE  --> this SglSrcSite is single-source mode.
         // FALSE --> this SglSrcSite is  multi-source mode.

      WitBopEntStack & candBopEnts_;
         //
         // Ordered list of candidate BopEntries.
@


1.3
log
@Continued implementation of single-source.
@
text
@d49 2
a50 2
         // Advances the selection to the next candidate or put this SglSrcSite
         // into multi-source mode, as appropriate.
@


1.2
log
@Continued implementation of single-source.
@
text
@d47 1
a47 1
      void alterSelection ();
d49 2
a50 1
         // Updates selBopEntry_ to the next valid candidate BopEntry.
d52 1
a52 1
      void resetSelection ();
d54 1
a54 1
         // Sets selBopEntry_ to NULL.
d56 1
a56 1
      void applySelection ();
d58 1
a58 1
         // Applies selBopEntry_ to the corresponding SelPt.
d64 3
a66 1
      inline WitBoolean active ()
d77 5
a81 1
      void printPreAltIA ();
d83 3
a85 1
         // Does printing appropriate just prior to altering the selection.
d96 9
@


1.1
log
@Continued implementation of single-source.
@
text
@d35 1
a35 1
      WitSglSrcSite (WitPart *);
d47 12
d63 5
d74 4
d87 9
@

