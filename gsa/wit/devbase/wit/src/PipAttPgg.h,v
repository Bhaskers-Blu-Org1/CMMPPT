head	1.16;
access;
symbols
	sce_5_01_20080919:1.13
	latest_sce_4_20_20060523:1.11.0.2
	sce_4_20_20060523:1.11
	latest_sce4_20_OSL:1.9.0.2
	sce_4_20_OSL:1.9;
locks; strict;
comment	@ * @;


1.16
date	2011.09.28.23.49.53;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.09.24.00.28.15;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.08.30.20.17.54;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.09.12.21.55.00;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.08.04.16.21.17;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.10.23.05.02;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.02.17.34.08;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.20.21.54.31;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.17.17.27.50;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.15.23.13.56;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.14.21.10.13;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.09.22.01.27;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.09.19.58.23;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.09.18.25.10;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.09.17.23.13;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.08.23.57.11;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PipAttPggH
#define PipAttPggH

//------------------------------------------------------------------------------
// Header file: "PipAttPgg.h"
//
// Contains the declaration of template class PipAttPgg <SrcComp>.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PtrSched.h>
#include <Str.h>

//------------------------------------------------------------------------------
// Class template PipAttPgg <SrcComp>
//
// "Post-Implosion Pegging Attribute Pegging"
// Stores the pegging of an attribute belonging to the SrcComp class for the
// Post-Implosion Pegging Subsystem.
//------------------------------------------------------------------------------

template <typename SrcComp> 
      class WitPipAttPgg: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipAttPgg (const char * theAttName, WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPipAttPgg ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void multiAppend (
            WitDemPerStack &                  theDemPers,
            SrcComp *                         theSrcComp,
            WitPeriod                         pegPer,
            WitSchedule <WitDemand, double> & pegVolSched);
         //
         // For each pair (theDemand, shipPer) in theDemPers, appends 
         // (theSrcComp, pegPer, pegVolSched (theDemand)[shipPer]) to the
         // pegging list for theDemand in shipPer, setting
         // pegVolSched (theDemand)[shipPer] to 0. Clears theDemPers.

      void consolidate ();
         //
         // For each Demand and shipment period, merges each set of PegTrips
         // that share the same SrcComp and pegPer into a single PegTrip.

      void getPegTrips (
            WitDemand *              theDemand,
            WitPeriod                shipPer,
            WitTripStack <SrcComp> & thePegTrips);
         //
         // Sets thePegTrips to the pegging list for theDemand in shipPer in
         // forward order.

      void print ();
         //
         // Prints the attribute pegging stored by this PipAttPgg.

      double pegVolFor (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            SrcComp *   theSrcComp,
            WitPeriod   pegPer);
         //
         // Returns the amount of the pegged attribute for theSrcComp in pegPer
         // that's pegged to theDemand in shipPer.
         // Note that this function is inefficient and is only used for
         // debugging output purposes.

      int totTrips ();
         //
         // Counts and returns the total # of pegging triples owned by this
         // PipAttPgg.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void prtInner ();
         //
         // Prints the attribute pegging stored by this PipAttPgg.
         // Inner implementation.

      void prtSrcCompPgg (
            SrcComp * theSrcComp,
            WitPeriod thePer,
            bool &    pegVolPrinted);
         //
         // Prints the attribute pegging stored by this PipAttPgg for theSrcComp
         // in thePer. On return, pegVolPrinted will be true, iff at least one
         // pegVol was printed.

      void prtSrcComp (SrcComp * theSrcComp);
         //
         // Prints theSrcComp, or blank, if it's NULL.

      noCopyCtorAssign (WitPipAttPgg);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrSched <WitDemand, WitTripStack <SrcComp> > myPegTrips_;
         //
         // myPegTrips_.myPtrAt (theDemand, shipPer) is a ptr to the list of
         // pegging triples for theDemand in shipPer for the pegged attribute,
         // or NULL, if there is none.

      const WitString myAttName_;
         //
         // The name of the pegged attribute.
   };

#endif
@


1.15
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.14
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d31 105
a135 105
template <typename SrcComp>
class WitPipAttPgg: public WitProbAssoc
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPipAttPgg (const char * theAttName, WitProblem *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitPipAttPgg ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void multiAppend (
WitDemPerStack &                  theDemPers,
SrcComp *                         theSrcComp,
WitPeriod                         pegPer,
WitSchedule <WitDemand, double> & pegVolSched);
//
// For each pair (theDemand, shipPer) in theDemPers, appends
// (theSrcComp, pegPer, pegVolSched (theDemand)[shipPer]) to the
// pegging list for theDemand in shipPer, setting
// pegVolSched (theDemand)[shipPer] to 0. Clears theDemPers.

void consolidate ();
//
// For each Demand and shipment period, merges each set of PegTrips
// that share the same SrcComp and pegPer into a single PegTrip.

void getPegTrips (
WitDemand *              theDemand,
WitPeriod                shipPer,
WitTripStack <SrcComp> & thePegTrips);
//
// Sets thePegTrips to the pegging list for theDemand in shipPer in
// forward order.

void print ();
//
// Prints the attribute pegging stored by this PipAttPgg.

double pegVolFor (
WitDemand * theDemand,
WitPeriod   shipPer,
SrcComp *   theSrcComp,
WitPeriod   pegPer);
//
// Returns the amount of the pegged attribute for theSrcComp in pegPer
// that's pegged to theDemand in shipPer.
// Note that this function is inefficient and is only used for
// debugging output purposes.

int totTrips ();
//
// Counts and returns the total # of pegging triples owned by this
// PipAttPgg.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void prtInner ();
//
// Prints the attribute pegging stored by this PipAttPgg.
// Inner implementation.

void prtSrcCompPgg (
SrcComp * theSrcComp,
WitPeriod thePer,
bool &    pegVolPrinted);
//
// Prints the attribute pegging stored by this PipAttPgg for theSrcComp
// in thePer. On return, pegVolPrinted will be true, iff at least one
// pegVol was printed.

void prtSrcComp (SrcComp * theSrcComp);
//
// Prints theSrcComp, or blank, if it's NULL.

noCopyCtorAssign (WitPipAttPgg);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitPtrSched <WitDemand, WitTripStack <SrcComp> > myPegTrips_;
//
// myPegTrips_.myPtrAt (theDemand, shipPer) is a ptr to the list of
// pegging triples for theDemand in shipPer for the pegged attribute,
// or NULL, if there is none.

const WitString myAttName_;
//
// The name of the pegged attribute.
};
@


1.13
log
@Stochastic Implosion
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d31 105
a135 105
template <typename SrcComp> 
      class WitPipAttPgg: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipAttPgg (const char * theAttName, WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPipAttPgg ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void multiAppend (
            WitDemPerStack &                  theDemPers,
            SrcComp *                         theSrcComp,
            WitPeriod                         pegPer,
            WitSchedule <WitDemand, double> & pegVolSched);
         //
         // For each pair (theDemand, shipPer) in theDemPers, appends 
         // (theSrcComp, pegPer, pegVolSched (theDemand)[shipPer]) to the
         // pegging list for theDemand in shipPer, setting
         // pegVolSched (theDemand)[shipPer] to 0. Clears theDemPers.

      void consolidate ();
         //
         // For each Demand and shipment period, merges each set of PegTrips
         // that share the same SrcComp and pegPer into a single PegTrip.

      void getPegTrips (
            WitDemand *              theDemand,
            WitPeriod                shipPer,
            WitTripStack <SrcComp> & thePegTrips);
         //
         // Sets thePegTrips to the pegging list for theDemand in shipPer in
         // forward order.

      void print ();
         //
         // Prints the attribute pegging stored by this PipAttPgg.

      double pegVolFor (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            SrcComp *   theSrcComp,
            WitPeriod   pegPer);
         //
         // Returns the amount of the pegged attribute for theSrcComp in pegPer
         // that's pegged to theDemand in shipPer.
         // Note that this function is inefficient and is only used for
         // debugging output purposes.

      int totTrips ();
         //
         // Counts and returns the total # of pegging triples owned by this
         // PipAttPgg.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void prtInner ();
         //
         // Prints the attribute pegging stored by this PipAttPgg.
         // Inner implementation.

      void prtSrcCompPgg (
            SrcComp * theSrcComp,
            WitPeriod thePer,
            bool &    pegVolPrinted);
         //
         // Prints the attribute pegging stored by this PipAttPgg for theSrcComp
         // in thePer. On return, pegVolPrinted will be true, iff at least one
         // pegVol was printed.

      void prtSrcComp (SrcComp * theSrcComp);
         //
         // Prints theSrcComp, or blank, if it's NULL.

      noCopyCtorAssign (WitPipAttPgg);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrSched <WitDemand, WitTripStack <SrcComp> > myPegTrips_;
         //
         // myPegTrips_.myPtrAt (theDemand, shipPer) is a ptr to the list of
         // pegging triples for theDemand in shipPer for the pegged attribute,
         // or NULL, if there is none.

      const WitString myAttName_;
         //
         // The name of the pegged attribute.
   };
@


1.12
log
@Minor update.
@
text
@d16 1
a16 3
// Contains the declaration of the following templates:
//
//    PipAttPgg <SrcComp>
@


1.11
log
@New PIP pegging order.
@
text
@d23 1
a53 10
      void append (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            SrcComp *   theSrcComp,
            WitPeriod   pegPer,
            double      pegVol);
         //
         // Appends (theSrcComp, pegPer, pegVol) to the pegging list for
         // theDemand in shipPer.

d134 1
a134 1
      const char * myAttName_;
@


1.10
log
@Updated the copyright date on all source files.
@
text
@d102 5
@


1.9
log
@GPIP
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.8
log
@GPIP
@
text
@d91 11
a125 11
      double pegVolFor (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            SrcComp *   theSrcComp,
            WitPeriod   pegPer);
         //
         // Returns the amount of the pegged attribute for theSrcComp in pegPer
         // that's pegged to theDemand in shipPer.
         // Note that this function is inefficient and is only used for
         // debugging output purposes.

@


1.7
log
@GPIP
@
text
@d97 1
a97 1
      void prtHeading ();
d99 2
a100 1
         // Prints a heading for the printing of the pegging.
d102 1
a102 1
      void prtPegTrip (
d104 2
a105 2
            WitPeriod pegPer,
            double    pegVol);
d107 3
a109 1
         // Print the pegging triple.
d111 1
a111 1
      void prtDivider ();
d113 12
a124 1
         // Prints a divider for the printing of the pegging.
@


1.6
log
@GPIP
@
text
@d64 9
a72 7
            SrcComp *         theSrcComp,
            WitPeriod         pegPer,
            WitDemTripStack & theDemTrips);
         //
         // For each triple (theDemand, shipPer, pegVol) in theDemTrips,
         // appends (theSrcComp, pegPer, pegVol) to the pegging list for
         // theDemand in shipPer. Clears theDemTrips.
@


1.5
log
@[shared-resource pegging]
@
text
@d57 1
a57 1
            WitPeriod   thePer,
d60 1
a60 1
         // Appends (theSrcComp, thePer, pegVol) to the pegging list for
d63 9
@


1.4
log
@[shared-resource pegging]
@
text
@d16 1
a16 1
// Contains the declaration of the following classes and templates:
d18 1
a18 2
//    PipAbsAttPgg
//    PipAttPgg
a24 39
// Class PipAbsAttPgg
//
//
// "Post-Implosion Pegging Abstract Attribute Pegging"
// Abstract base class for class template PipAttPgg <SrcComp>.
//
// Class Hierarchy:
//
// ProbAssoc
//    PipAbsAttPgg
//       PipAttPgg <SrcComp>
//------------------------------------------------------------------------------

class WitPipAbsAttPgg: public WitProbAssoc
   {
   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipAbsAttPgg (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPipAbsAttPgg ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPipAbsAttPgg);
   };

//------------------------------------------------------------------------------
a29 6
//
// Class Hierarchy:
//
// ProbAssoc
//    PipAbsAttPgg
//       PipAttPgg <SrcComp>
d33 1
a33 1
      class WitPipAttPgg: public WitPipAbsAttPgg
@


1.3
log
@[shared-resource pegging]
@
text
@d132 15
a152 5
      void prtSpecial ();
         //
         // Prints the attribute pegging stored by this PipAttPgg.
         // Uses specialized implementations.

@


1.2
log
@[shared-resource pegging]
@
text
@a131 5
      void printInner ();
         //
         // Prints the attribute pegging stored by this PipAttPgg.
         // Inner version: implemented non-paramterically.

d138 5
@


1.1
log
@[shared-resource pegging]
@
text
@d87 1
a87 1
      WitPipAttPgg (WitProblem *);
d122 4
d132 5
d146 6
a151 2
         // pegging triples for theDemand in shipPer for the attribute
         // corresponding to this PipAttPgg, or NULL, if there is none.
@

