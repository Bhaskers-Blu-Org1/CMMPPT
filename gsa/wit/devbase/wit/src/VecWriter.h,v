head	1.10;
access;
symbols
	sce_5_01_20080919:1.7
	latest_sce_4_20_20060523:1.4.0.2
	sce_4_20_20060523:1.4
	latest_sce4_20_OSL:1.3.0.2
	sce_4_20_OSL:1.3
	sce_410_withVa:1.3
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.1;
locks; strict;
comment	@ * @;


1.10
date	2011.09.28.23.50.39;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.09.24.00.28.55;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.08.30.20.18.22;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.04.18.21.18.21;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.04.17.21.27.10;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.04.17.20.19.01;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.02.17.34.15;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.16.18.25.02;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.16.17.42.50;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.16.43.23;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef VecWriterH
#define VecWriterH

//------------------------------------------------------------------------------
// Header file: "VecWriter.h"
//
// Contains the declaration of class template VecWriter <ArgVec, ArgScal>.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class template VecWriter <ArgVec, ArgScal>
//
// Responsible for writing vectors of some type into the input data file.
//
// Template arguments:
//    ArgVec:  The type of vector to be written
//    ArgScal: The underlying scalar type for ArgVec.
//
// Class Hierarchy:
//
// ProbAssoc
//    VecWriter <*, *>
//------------------------------------------------------------------------------

template <typename ArgVec, typename ArgScal>
      class WitVecWriter: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitVecWriter (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitVecWriter ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void writeDblVector (
            const char *   attrName,
            const ArgVec & theArgVec,
            ArgScal        defaultVal);
         //
         // Same as below, but uses MsgIDs specific to data of type double and
         // distinguishes between the the high and low precision cases.

      void writeVector (
            const char *   attrName,
            const ArgVec & theArgVec,
            ArgScal        defaultVal,
            WitMsgID       singleMsgID,
            WitMsgID       sparseMsgID,
            WitMsgID       denseMsgID);
         //
         // Writes the value of theArgVec to the input data
         // output file, or no-op, if the attribute is at its default value.
         // attrName is the name of the attribute.
         // defaultVal is the default value of the attribute.
         // The last 3 args indicate which Msgs are to be issued.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void writeSingle (
            const ArgVec & theArgVec,
            WitMsgID       theMsgID,
            bool &         vecWritten);
         //
         // Writes the value of theVector to the input data output file, if it
         // is a single replicated value, using theMsgID, else no-op.
         // On return, vecWritten is true, iff the write happened.

      void writeSparse (
            const ArgVec & theArgVec,
            ArgScal        defaultVal,
            WitMsgID       theMsgID,
            bool &         vecWritten);
         //
         // Writes the value of theVector to the input data output file, if it
         // is sparse relative to defaultVal, using theMsgID, else no-op.
         // On return, vecWritten is true, iff the write happened.

      void writeDense (const ArgVec & theArgVec, WitMsgID theMsgID);
         //
         // Writes the value of theVector to the input data output file, in
         // dense format, using theMsgID.

      noCopyCtorAssign (WitVecWriter);
   };

#endif
@


1.9
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.8
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d37 71
a107 71
class WitVecWriter: public WitProbAssoc
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitVecWriter (WitProblem *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitVecWriter ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void writeDblVector (
const char *   attrName,
const ArgVec & theArgVec,
ArgScal        defaultVal);
//
// Same as below, but uses MsgIDs specific to data of type double and
// distinguishes between the the high and low precision cases.

void writeVector (
const char *   attrName,
const ArgVec & theArgVec,
ArgScal        defaultVal,
WitMsgID       singleMsgID,
WitMsgID       sparseMsgID,
WitMsgID       denseMsgID);
//
// Writes the value of theArgVec to the input data
// output file, or no-op, if the attribute is at its default value.
// attrName is the name of the attribute.
// defaultVal is the default value of the attribute.
// The last 3 args indicate which Msgs are to be issued.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void writeSingle (
const ArgVec & theArgVec,
WitMsgID       theMsgID,
bool &         vecWritten);
//
// Writes the value of theVector to the input data output file, if it
// is a single replicated value, using theMsgID, else no-op.
// On return, vecWritten is true, iff the write happened.

void writeSparse (
const ArgVec & theArgVec,
ArgScal        defaultVal,
WitMsgID       theMsgID,
bool &         vecWritten);
//
// Writes the value of theVector to the input data output file, if it
// is sparse relative to defaultVal, using theMsgID, else no-op.
// On return, vecWritten is true, iff the write happened.

void writeDense (const ArgVec & theArgVec, WitMsgID theMsgID);
//
// Writes the value of theVector to the input data output file, in
// dense format, using theMsgID.
d109 2
a110 2
noCopyCtorAssign (WitVecWriter);
};
@


1.7
log
@Stochastic Implosion
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d37 71
a107 71
      class WitVecWriter: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitVecWriter (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitVecWriter ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void writeDblVector (
            const char *   attrName,
            const ArgVec & theArgVec,
            ArgScal        defaultVal);
         //
         // Same as below, but uses MsgIDs specific to data of type double and
         // distinguishes between the the high and low precision cases.

      void writeVector (
            const char *   attrName,
            const ArgVec & theArgVec,
            ArgScal        defaultVal,
            WitMsgID       singleMsgID,
            WitMsgID       sparseMsgID,
            WitMsgID       denseMsgID);
         //
         // Writes the value of theArgVec to the input data
         // output file, or no-op, if the attribute is at its default value.
         // attrName is the name of the attribute.
         // defaultVal is the default value of the attribute.
         // The last 3 args indicate which Msgs are to be issued.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void writeSingle (
            const ArgVec & theArgVec,
            WitMsgID       theMsgID,
            bool &         vecWritten);
         //
         // Writes the value of theVector to the input data output file, if it
         // is a single replicated value, using theMsgID, else no-op.
         // On return, vecWritten is true, iff the write happened.

      void writeSparse (
            const ArgVec & theArgVec,
            ArgScal        defaultVal,
            WitMsgID       theMsgID,
            bool &         vecWritten);
         //
         // Writes the value of theVector to the input data output file, if it
         // is sparse relative to defaultVal, using theMsgID, else no-op.
         // On return, vecWritten is true, iff the write happened.

      void writeDense (const ArgVec & theArgVec, WitMsgID theMsgID);
         //
         // Writes the value of theVector to the input data output file, in
         // dense format, using theMsgID.
d109 2
a110 2
      noCopyCtorAssign (WitVecWriter);
   };
@


1.6
log
@Stochastic Implosion
@
text
@d85 4
a88 1
      bool writeSingle (const ArgVec & theArgVec, WitMsgID theMsgID);
d92 1
a92 1
         // Returns true, iff the write happened.
d94 1
a94 1
      bool writeSparse (
d97 2
a98 1
            WitMsgID       theMsgID);
d102 1
a102 1
         // Returns true, iff the write happened.
@


1.5
log
@Stochastic Implosion
@
text
@d57 8
@


1.4
log
@Updated the copyright date on all source files.
@
text
@a70 11
      void writeVectorUnCond (
            const char *   attrName,
            const ArgVec & theArgVec,
            ArgScal        defaultVal,
            WitMsgID       singleMsgID,
            WitMsgID       sparseMsgID,
            WitMsgID       denseMsgID);
         //
         // Same as writeVector, except that the vector is written
         // unconditionally.

@


1.3
log
@Vector Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.2
log
@Double Precision.
@
text
@d45 1
a45 1
      WitVecWriter (WitProblem *, bool intMsgsArg);
d61 3
a63 1
            bool           uncond = false);
d69 12
a80 1
         // If uncond is true, the vector is written unconditionally.
d88 1
a88 1
      bool writeSingle (const ArgVec & theArgVec);
d91 1
a91 1
         // is a single replicated value, else no-op.
d94 4
a97 1
      bool writeSparse (const ArgVec & theArgVec, ArgScal defaultVal);
d100 1
a100 1
         // is sparse relative to defaultVal, else no-op.
d103 1
a103 1
      void writeDense (const ArgVec & theArgVec);
d106 1
a106 1
         // dense format.
a108 9

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const bool intMsgs_;
         //
         // If true,  Msgs for ints    will be used.
         // If false, Msgs for doubles will be used;
@


1.1
log
@Continued implementation of PIP.
@
text
@d45 1
a45 1
      WitVecWriter (WitProblem *, bool floatMsgsArg);
d98 1
a98 1
      const bool floatMsgs_;
d100 2
a101 2
         // If true,  Msgs for floats will be used;
         // If false, Msgs for ints   will be used.
@

