head	1.33;
access;
symbols
	sce_5_01_20080919:1.30
	latest_sce_4_20_20060523:1.30.0.2
	sce_4_20_20060523:1.30
	latest_sce4_20_OSL:1.29.0.2
	sce_4_20_OSL:1.29
	sce_410_withVa:1.21
	sce_4_05_20040511:1.21
	sce_4_00_20040201:1.21
	nextGenBranch:1.18.0.2
	nextGenRoot:1.18
	sce_3_30_20030627:1.18
	EndRw-branch:1.15.0.4
	Root-of-EndRw:1.15
	rwToStl:1.15.0.2
	latest_sce_3_10_20010924:1.13.0.2
	sce_3_10_20010924:1.13
	latest_sce_3_00_20010601:1.7.0.2
	sce_3_00_20010601:1.7
	latest_sce_2_31_20010308:1.6.0.2
	sce_2_31_20010308:1.6;
locks; strict;
comment	@ * @;


1.33
date	2011.09.28.23.49.28;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.09.24.00.27.48;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.08.30.20.17.35;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2006.05.02.17.34.01;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2006.01.09.20.02.30;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2005.11.22.22.20.27;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2005.11.16.23.24.49;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2005.11.16.16.52.56;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2005.11.15.21.27.23;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2005.11.15.19.55.21;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2005.11.15.19.18.50;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2005.11.15.19.13.57;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.12.24.20.12.34;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.12.24.16.23.23;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.12.01.21.05.03;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.01.22.19.32.11;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.01.15.21.01.20;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.01.13.22.22.09;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.06.26.18.42.51;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.21.21.52.19;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2001.07.09.22.09.44;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.07.03.20.07.30;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.27.21.45.10;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.21.18.24.31;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.20.20.07.04;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.18.21.38.38;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.25.14.53.23;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.11.16.35.08;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.22.16.18.25;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.20.20.22.26;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.20.20.08.35;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.13.19.57.25;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.05.19.05.29;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.33
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef LinkH
#define LinkH

//------------------------------------------------------------------------------
// Header file: "Link.h"
//
// Contains the declaration of the following classes and templates:
//
//    AbsLink
//    ObjLink
//    PairLink <ObjByVal>
//    TripLink
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class AbsLink
//
// A link in an dynamic stack.
//
// Class Hierarchy:
//
// AbsLink
//    ObjLink
//    PairLink <ObjByVal>
//    TripLink
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

class WitAbsLink
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      void linkTo (WitAbsLink * theAbsLink);
         //
         // Sets this AbsLink to link to theAbsLink, while leaving the object
         // link unaltered.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitAbsLink *, nextAbsLink)

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAbsLink ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitAbsLink ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitAbsLink);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitAbsLink * nextAbsLink_;
         //
         // The next AbsLink after this AbsLink in the Stack.
   };

//------------------------------------------------------------------------------
// Class ObjLink
//
// A link in a dynamic stack of individual objects.
//
// Class Hierarchy:
//
// AbsLink
//    ObjLink
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

class WitObjLink: public WitAbsLink
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitObjLink ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitObjLink ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (void *, myObjByVP)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void setDataTo (void *);
         //
         // Sets the data for this ObjLink to the arguments.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitObjLink);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      void * myObjByVP_;
         //
         // The object associated with this ObjLink.
   };

//------------------------------------------------------------------------------
// Class Template PairLink <ObjByVal>
//
// A link in a dynamic stack of pairs, (Object, ObjByVal).
//
// Class Hierarchy:
//
// AbsLink
//    PairLink <ObjByVal>
//
// Implemented in Stack.C.
//------------------------------------------------------------------------------

template <typename ObjByVal> 
      class WitPairLink: public WitAbsLink
   {                                                                           
   public:                                                                     
                                                                               
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
                                                                               
      WitPairLink ();                                                
                                                                               
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
                                                                               
      ~WitPairLink ();                                               
                                                                               
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
                                                                               
      accessFunc (void *,   myObjByVP)                                         
      accessFunc (ObjByVal, myObjByVal)
                                                                               
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
                                                                               
      void setDataTo (void *, ObjByVal);                                    
         //
         // Sets the data for this PairLink to the arguments.
                                                                               
   private:                                                                    
                                                                               
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPairLink);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
                                                                               
      void * myObjByVP_;
         //
         // The object associated with this PairLink.
                                                                               
      ObjByVal myObjByVal_;
         //
         // The value associated with this PairLink.
   };                                                                          

//------------------------------------------------------------------------------
// Class TripLink
//
// A link in a dynamic stack of triples, (Object, Period, Double).
//
// Class Hierarchy:
//
// AbsLink
//    TripLink
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

class WitTripLink: public WitAbsLink
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitTripLink ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitTripLink ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void setDataTo (void *, WitPeriod, double);
         //
         // Sets the data for this TripLink to the arguments.

      void getData (void * &, WitPeriod &, double &) const;
         //
         // Sets the args to the data for this TripLink.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitTripLink);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      void * myObjByVP_;
         //
         // The object associated with this TripLink.

      WitPeriod myPer_;
         //
         // The period associated with this TripLink.

      double myDbl_;
         //
         // The double associated with this TripLink.
   };

#endif
@


1.32
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.31
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d42 2
a43 2
{
public:
d45 3
a47 3
//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------
d49 4
a52 4
void linkTo (WitAbsLink * theAbsLink);
//
// Sets this AbsLink to link to theAbsLink, while leaving the object
// link unaltered.
d54 3
a56 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d58 1
a58 1
accessFunc (WitAbsLink *, nextAbsLink)
d60 1
a60 1
protected:
d62 3
a64 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d66 1
a66 1
WitAbsLink ();
d68 3
a70 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d72 1
a72 1
~WitAbsLink ();
d74 1
a74 1
private:
d76 3
a78 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d80 1
a80 1
noCopyCtorAssign (WitAbsLink);
d82 3
a84 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d86 4
a89 4
WitAbsLink * nextAbsLink_;
//
// The next AbsLink after this AbsLink in the Stack.
};
d105 2
a106 2
{
public:
d108 3
a110 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d112 1
a112 1
WitObjLink ();
d114 3
a116 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d118 1
a118 1
~WitObjLink ();
d120 3
a122 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d124 1
a124 1
accessFunc (void *, myObjByVP)
d126 3
a128 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d130 3
a132 3
void setDataTo (void *);
//
// Sets the data for this ObjLink to the arguments.
d134 1
a134 1
private:
d136 3
a138 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d140 1
a140 1
noCopyCtorAssign (WitObjLink);
d142 3
a144 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d146 4
a149 4
void * myObjByVP_;
//
// The object associated with this ObjLink.
};
d164 52
a215 52
template <typename ObjByVal>
class WitPairLink: public WitAbsLink
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPairLink ();

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitPairLink ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (void *,   myObjByVP)
accessFunc (ObjByVal, myObjByVal)

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void setDataTo (void *, ObjByVal);
//
// Sets the data for this PairLink to the arguments.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitPairLink);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

void * myObjByVP_;
//
// The object associated with this PairLink.

ObjByVal myObjByVal_;
//
// The value associated with this PairLink.
};
d231 2
a232 2
{
public:
d234 3
a236 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d238 1
a238 1
WitTripLink ();
d240 3
a242 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d244 1
a244 1
~WitTripLink ();
d246 3
a248 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d250 3
a252 3
void setDataTo (void *, WitPeriod, double);
//
// Sets the data for this TripLink to the arguments.
d254 3
a256 3
void getData (void * &, WitPeriod &, double &) const;
//
// Sets the args to the data for this TripLink.
d258 1
a258 1
private:
d260 3
a262 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d264 1
a264 1
noCopyCtorAssign (WitTripLink);
d266 3
a268 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d270 3
a272 3
void * myObjByVP_;
//
// The object associated with this TripLink.
d274 3
a276 3
WitPeriod myPer_;
//
// The period associated with this TripLink.
d278 4
a281 4
double myDbl_;
//
// The double associated with this TripLink.
};
@


1.30
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d42 2
a43 2
   {
   public:
d45 3
a47 3
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------
d49 4
a52 4
      void linkTo (WitAbsLink * theAbsLink);
         //
         // Sets this AbsLink to link to theAbsLink, while leaving the object
         // link unaltered.
d54 3
a56 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d58 1
a58 1
      accessFunc (WitAbsLink *, nextAbsLink)
d60 1
a60 1
   protected:
d62 3
a64 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d66 1
a66 1
      WitAbsLink ();
d68 3
a70 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d72 1
a72 1
      ~WitAbsLink ();
d74 1
a74 1
   private:
d76 3
a78 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d80 1
a80 1
      noCopyCtorAssign (WitAbsLink);
d82 3
a84 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d86 4
a89 4
      WitAbsLink * nextAbsLink_;
         //
         // The next AbsLink after this AbsLink in the Stack.
   };
d105 2
a106 2
   {
   public:
d108 3
a110 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d112 1
a112 1
      WitObjLink ();
d114 3
a116 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d118 1
a118 1
      ~WitObjLink ();
d120 3
a122 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d124 1
a124 1
      accessFunc (void *, myObjByVP)
d126 3
a128 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d130 3
a132 3
      void setDataTo (void *);
         //
         // Sets the data for this ObjLink to the arguments.
d134 1
a134 1
   private:
d136 3
a138 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d140 1
a140 1
      noCopyCtorAssign (WitObjLink);
d142 3
a144 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d146 4
a149 4
      void * myObjByVP_;
         //
         // The object associated with this ObjLink.
   };
d164 52
a215 52
template <typename ObjByVal> 
      class WitPairLink: public WitAbsLink
   {                                                                           
   public:                                                                     
                                                                               
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
                                                                               
      WitPairLink ();                                                
                                                                               
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
                                                                               
      ~WitPairLink ();                                               
                                                                               
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
                                                                               
      accessFunc (void *,   myObjByVP)                                         
      accessFunc (ObjByVal, myObjByVal)
                                                                               
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
                                                                               
      void setDataTo (void *, ObjByVal);                                    
         //
         // Sets the data for this PairLink to the arguments.
                                                                               
   private:                                                                    
                                                                               
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPairLink);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
                                                                               
      void * myObjByVP_;
         //
         // The object associated with this PairLink.
                                                                               
      ObjByVal myObjByVal_;
         //
         // The value associated with this PairLink.
   };                                                                          
d231 2
a232 2
   {
   public:
d234 3
a236 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d238 1
a238 1
      WitTripLink ();
d240 3
a242 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d244 1
a244 1
      ~WitTripLink ();
d246 3
a248 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d250 3
a252 3
      void setDataTo (void *, WitPeriod, double);
         //
         // Sets the data for this TripLink to the arguments.
d254 3
a256 3
      void getData (void * &, WitPeriod &, double &) const;
         //
         // Sets the args to the data for this TripLink.
d258 1
a258 1
   private:
d260 3
a262 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d264 1
a264 1
      noCopyCtorAssign (WitTripLink);
d266 3
a268 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d270 3
a272 3
      void * myObjByVP_;
         //
         // The object associated with this TripLink.
d274 3
a276 3
      WitPeriod myPer_;
         //
         // The period associated with this TripLink.
d278 4
a281 4
      double myDbl_;
         //
         // The double associated with this TripLink.
   };
@


1.29
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.28
log
@[shared-resource pegging]
@
text
@a19 1
//    DblDblLink
a34 1
//    DblDblLink
a151 59
// Class DblDblLink
//
// A link in a dynamic stack of pairs of doubles.
//
// Class Hierarchy:
//
// AbsLink
//    DblDblLink
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

class WitDblDblLink: public WitAbsLink
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDblDblLink ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitDblDblLink ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void setDataTo (double, double);
         //
         // Sets the data for this DblDblLink to the arguments.

      void getData (double &, double &) const;
         //
         // Sets the arguments to the data for this DblDblLink.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDblDblLink);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      double myDbl1_;
      double myDbl2_;
         //
         // The two doubles stored by this DblDblLink.
   };

//------------------------------------------------------------------------------
@


1.27
log
@[shared-resource pegging]
@
text
@d190 1
a190 1
      void getDataAs (double &, double &);
d315 1
a315 1
      void getData (void * &, WitPeriod &, double &);
@


1.26
log
@[shared-resource pegging]
Update to error exceptions.
@
text
@a182 7
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (double, myDbl1)
      accessFunc (double, myDbl2)

      //------------------------------------------------------------------------
d190 4
@


1.25
log
@[shared-resource pegging]
@
text
@d20 1
d36 1
d154 62
@


1.24
log
@[shared-resource pegging]
@
text
@a24 1
#include <TlObj.h>
d124 1
a124 1
      accessFunc (WitTlObj *, myTlObj)
d130 1
a130 1
      void setDataTo (WitTlObj *);
d146 1
a146 1
      WitTlObj * myTlObj_;
d185 2
a186 2
      accessFunc (WitTlObj *, myTlObj)                                         
      accessFunc (ObjByVal,   myObjByVal)
d192 1
a192 1
      void setDataTo (WitTlObj *, ObjByVal);                                    
d208 1
a208 1
      WitTlObj * myTlObj_;
d250 1
a250 1
      void setDataTo (WitTlObj *, WitPeriod, double);
d254 1
a254 1
      void getData (WitTlObj * &, WitPeriod &, double &);
d270 1
a270 1
      WitTlObj * myTlObj_;
@


1.23
log
@[shared-resource pegging]
@
text
@d20 1
a20 1
//    PairLink <ValType>
d36 1
a36 1
//    PairLink <ValType>
d153 1
a153 1
// Class Template PairLink <ValType>
d155 1
a155 1
// A link in a dynamic stack of pairs, (Object, ValType).
d160 1
a160 1
//    PairLink <ValType>
d165 1
a165 1
template <typename ValType> 
d187 1
a187 1
      accessFunc (ValType,    myValue)                                         
d193 1
a193 1
      void setDataTo (WitTlObj *, ValType);                                    
d209 1
a209 1
      WitTlObj * myTlObj_;                                                     
d213 1
a213 1
      ValType myValue_;                                                        
@


1.22
log
@[shared-resource pegging]
@
text
@d20 1
a20 1
//    PairLink <ObjType>
d36 1
a36 1
//    PairLink <ObjType>
d153 1
a153 1
// Class Template PairLink <ObjType>
d155 1
a155 1
// A link in a dynamic stack of pairs, (Object, ObjType).
d160 1
a160 1
//    PairLink <ObjType>
d165 1
a165 1
template <typename ObjType> 
d187 1
a187 1
      accessFunc (ObjType,   myValue)                                         
d193 1
a193 1
      void setDataTo (WitTlObj *, ObjType);                                    
d213 1
a213 1
      ObjType myValue_;                                                        
@


1.21
log
@Continued implementation of PIP.
@
text
@d20 1
a20 1
//    PairLink <ValType>
d36 1
a36 1
//    PairLink <ValType>
d153 1
a153 1
// Class Template PairLink <ValType>
d155 1
a155 1
// A link in a dynamic stack of pairs, (Object, Value).
d160 1
a160 1
//    PairLink <ValType>
d165 1
a165 1
template <typename ValType> 
d187 1
a187 1
      accessFunc (ValType,    myValue)                                         
d193 1
a193 1
      void setDataTo (WitTlObj *, ValType);                                    
d213 1
a213 1
      ValType myValue_;                                                        
@


1.20
log
@Continued implementation of PIP.
@
text
@d21 1
d37 1
d215 1
a215 1
         // The period associated with this PairLink.
d217 66
@


1.19
log
@Continued implementation of PIP.
@
text
@a20 4
//
// Contains the implementation of the following templates:
//
//    PairLink <ValType>
d160 1
a160 1
// Implemented in this file.
a214 31

//------------------------------------------------------------------------------
// Implementation of class template PairLink <ValType>.
//------------------------------------------------------------------------------

template <typename ValType> 
      WitPairLink <ValType>::WitPairLink ():
         WitAbsLink (),

         myTlObj_   (NULL),
         myValue_   ()
   {
   }

//------------------------------------------------------------------------------

template <typename ValType> 
      WitPairLink <ValType>::~WitPairLink ()
   {
   }

//------------------------------------------------------------------------------

template <typename ValType> 
      void WitPairLink <ValType>::setDataTo (
         WitTlObj * theTlObj,
         ValType    theVal)
   {
   myTlObj_ = theTlObj;
   myValue_ = theVal;
   }
@


1.18
log
@Replaced some C-style casts with C++ style casts.
@
text
@d44 1
a44 1
class WitAbsLink: public WitUtil
@


1.17
log
@Various internal changes.
@
text
@d28 1
@


1.16
log
@Various internal changes.
@
text
@d204 1
a204 1
      noCopyCtorAssignTemp (WitPairLink, ValType);
@


1.15
log
@Continued implementation of Single-Source.
@
text
@d166 1
a166 1
template <class ValType> 
d223 1
a223 1
template <class ValType> 
d234 1
a234 1
template <class ValType> 
d241 1
a241 1
template <class ValType> 
@


1.14
log
@Continued implementation of Single-Source.
@
text
@a19 1
//    PerLink
a37 1
//    PerLink
a150 60
   };

//------------------------------------------------------------------------------
// Class PerLink
//
// A link in a dynamic stack of periods.
//
// Class Hierarchy:
//
// AbsLink
//    PerLink
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

class WitPerLink: public WitAbsLink
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPerLink ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPerLink ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPeriod, myPer)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void setDataTo (WitPeriod);
         //
         // Sets the data for this PerLink to the arguments.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPerLink);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPeriod myPer_;
         //
         // The object associated with this PerLink.
@


1.13
log
@Removed class template AbsPairStack <*,*>.
@
text
@d20 1
d39 1
d153 60
@


1.12
log
@Moved Stack template implementations to header files.
@
text
@d163 1
a163 1
// Implemented in Stack.C
@


1.11
log
@Initial implementation of multi-route class templates.
@
text
@d21 4
d218 31
@


1.10
log
@More templates.
@
text
@d200 1
a200 4
      WitPairLink                        (const WitPairLink <ValType> &);
      WitPairLink <ValType> & operator = (const WitPairLink <ValType> &);
         //
         // See noCopyCtorAssign in macs.h. 
@


1.9
log
@Converted several generic classes into class templates.
@
text
@d203 1
a203 1
         // See noCopyCtorAssign in mac.h. 
@


1.8
log
@Replaced generic class PairLink (ValType)
   with class template PairLink <ValType>.
@
text
@d16 1
a16 1
// Contains the declaration of the following classes:
a19 1
//    OldPLink (ValType)
a33 1
//    OldPLink (ValType)
a149 73
// Generic Class OldPLink (ValType)
//
// A link in a dynamic stack of (Object, Value)s.
//
// Class Hierarchy:
//
// AbsLink
//    OldPLink (ValType)
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Generic class declaration macro.
//------------------------------------------------------------------------------

#define WitOldPLinkdeclare(ValType)                                            \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitOldPLink (ValType): public WitAbsLink                                 \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitOldPLink (ValType) ();                                                \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      ~WitOldPLink (ValType) ();                                               \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Data access functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      accessFunc (WitTlObj *, myTlObj)                                         \
      accessFunc (ValType,    myValue)                                         \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      void setDataTo (WitTlObj *, ValType);                                    \
         /*                                                                  */\
         /* Sets the data for this OldPLink to the arguments.                */\
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtorAssign (WitOldPLink (ValType));                                \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member data.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitTlObj * myTlObj_;                                                     \
         /*                                                                  */\
         /* The object associated with this OldPLink.                        */\
                                                                               \
      ValType myValue_;                                                        \
         /*                                                                  */\
         /* The period associated with this OldPLink.                        */\
   };                                                                          \

//------------------------------------------------------------------------------
d162 2
a163 1
template <class ValType> class WitPairLink: public WitAbsLink
d203 1
a203 1
         // See noCopyCtorAssign in macs.h.
a216 8

//------------------------------------------------------------------------------
// Declarations of all specific cases of the generic classes declared in this
// file.
//------------------------------------------------------------------------------

//clare (WitOldPLink, double)
//clare (WitOldPLink, WitPeriod)
@


1.7
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d20 2
a21 1
//    PairLink (ValType)
d35 2
a36 1
//    PairLink (ValType)
d152 1
a152 1
// Generic Class PairLink (ValType)
d159 1
a159 1
//    PairLink (ValType)
d168 1
a168 1
#define WitPairLinkdeclare(ValType)                                            \
d172 1
a172 1
class WitPairLink (ValType): public WitAbsLink                                 \
d180 1
a180 1
      WitPairLink (ValType) ();                                                \
d186 1
a186 1
      ~WitPairLink (ValType) ();                                               \
d201 1
a201 1
         /* Sets the data for this PairLink to the arguments.                */\
d209 1
a209 1
      noCopyCtorAssign (WitPairLink (ValType));                                \
d217 1
a217 1
         /* The object associated with this PairLink.                        */\
d221 1
a221 1
         /* The period associated with this PairLink.                        */\
d225 68
d297 2
a298 2
declare (WitPairLink, double)
declare (WitPairLink, WitPeriod)
@


1.6
log
@Initial implementation of coarse selection splitting for build-ahead.
@
text
@d122 1
a122 1
      accessFunc (WitTl *, myTlObj)
d128 1
a128 1
      void setDataTo (WitTl *);
d144 1
a144 1
      WitTl * myTlObj_;
d190 2
a191 2
      accessFunc (WitTl *, myTlObj)                                            \
      accessFunc (ValType, myValue)                                            \
d197 1
a197 1
      void setDataTo (WitTl *, ValType);                                       \
d213 1
a213 1
      WitTl * myTlObj_;                                                        \
@


1.5
log
@Further development of coarse selection splitting.
@
text
@d41 2
d44 1
a44 1
      // Friends.
d47 4
a50 3
      friend WitAbsLinkMgr;

   public:
a71 9
      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void linkToAbsLink (WitAbsLink * theAbsLink);
         //
         // Sets this AbsLink to link to theAbsLink, while leaving the object
         // link unaltered.

a121 5
      inline WitObjLink * nextObjLink () const
         {
         return (WitObjLink *) nextAbsLink ();
         }

a127 5
      inline void linkToObjLink (WitObjLink * theObjLink)
         {
         linkToAbsLink (theObjLink);
         }

a189 5
      inline WitPairLink (ValType) * nextPairLink () const                     \
         {                                                                     \
         return (WitPairLink (ValType) *) nextAbsLink ();                      \
         }                                                                     \
                                                                               \
a195 5
                                                                               \
      inline void linkToPairLink (WitPairLink (ValType) * thePairLink)         \
         {                                                                     \
         linkToAbsLink (thePairLink);                                          \
         }                                                                     \
@


1.4
log
@Minor correction.
@
text
@d18 1
a18 1
//    Link
d26 1
a26 1
// Class Link
d32 1
a32 1
// Link
d35 2
d39 1
a39 1
class WitLink: public WitUtil
a40 2
   public:

d42 1
a42 1
      // Public member functions.
d45 3
a47 4
      void linkTo (WitLink * theLink);
         //
         // Sets this Link to link to theLink, while leaving the object
         // link unaltered.
d53 1
a53 1
      accessFunc (WitLink *, next)
d58 1
a58 1
      // Protected member functions.
d61 2
d64 1
a64 1
      // Constructor functions.
d67 1
a67 1
      WitLink ();
d70 1
a70 1
      // Destructor function.
d73 4
a76 1
      ~WitLink ();
d84 1
a84 1
      noCopyCtorAssign (WitLink);
d90 1
a90 1
      WitLink * next_;
d92 1
a92 1
         // The next Link after this Link in the Stack.
d102 1
a102 1
// Link
d104 2
d108 1
a108 1
class WitObjLink: public WitLink
d128 6
a133 1
      accessFunc (WitTl *, myObject)
d139 5
d146 1
a146 1
         // Sets the data for this Link to the arguments.
d160 1
a160 1
      WitTl * myObject_;
d172 1
a172 1
// Link
d174 2
d186 1
a186 1
class WitPairLink (ValType): public WitLink                                    \
d206 6
a211 1
      accessFunc (WitTl *, myObject)                                           \
d218 5
d239 1
a239 1
      WitTl * myObject_;                                                       \
@


1.3
log
@Further development of coarse selection splitting.
@
text
@a20 1
//    ObjPerDblLink
a34 1
//    ObjPerDblLink
a218 68

//------------------------------------------------------------------------------
// Class ObjPerDblLink
//
// A link in a dynamic stack of individual objects.
//
// Class Hierarchy:
//
// Link
//    ObjPerDblLink
//------------------------------------------------------------------------------

class WitObjPerDblLink: public WitLink
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitObjPerDblLink ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitObjPerDblLink ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void copyDataFrom (WitObjPerDblLink * theObjPerDblLink);
         //
         // Copies the data from theObjPerDblLink into this ObjPerDblLink.

      void setDataTo (WitTl *, WitPeriod, double);
         //
         // Sets the data for this Link to the arguments.

      void getData (WitTl * &, WitPeriod &, double &);
         //
         // Sets the arguments to the data for this Link.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitObjPerDblLink);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitTl * myObject_;
         //
         // The object associated with this ObjPerDblLink.

      WitPeriod myPeriod_;
         //
         // The period associated with this ObjPerDblLink.

      double myDouble_;
         //
         // The double associated with this ObjPerDblLink.
   };
@


1.2
log
@Further development of selection splitting for multi-route on substitutes.
@
text
@d124 1
a124 1
      accessFunc (WitTypelessPtr, myObject)
d130 1
a130 1
      void setDataTo (WitTypelessPtr);
d146 1
a146 1
      WitTypelessPtr myObject_;
d190 2
a191 2
      accessFunc (WitTypelessPtr, myObject)                                    \
      accessFunc (ValType,        myValue)                                     \
d197 1
a197 1
      void setDataTo (WitTypelessPtr, ValType);                                \
d213 1
a213 1
      WitTypelessPtr myObject_;                                                \
d257 1
a257 1
      void setDataTo (WitTypelessPtr, WitPeriod, double);
d261 1
a261 1
      void getData (WitTypelessPtr &, WitPeriod &, double &);
d277 1
a277 1
      WitTypelessPtr myObject_;
@


1.1
log
@Some minor modifications.
@
text
@d10 2
a11 2
#ifndef StackLinkH
#define StackLinkH
d14 1
a14 1
// Header file: "StackLink.h"
d18 4
a21 3
//    StackLink
//    ObjStackLink
//    PairStackLink (ValType)
d27 1
a27 1
// Class StackLink
d33 4
a36 3
// StackLink
//    ObjStackLink
//    PairStackLink (ValType)
d39 1
a39 1
class WitStackLink: public WitUtil
d47 1
a47 1
      void linkTo (WitStackLink * theLink);
d49 1
a49 1
         // Sets this StackLink to link to theLink, while leaving the object
d56 1
a56 1
      accessFunc (WitStackLink *, next)
d68 1
a68 1
      WitStackLink ();
d74 1
a74 1
      ~WitStackLink ();
d82 1
a82 1
      noCopyCtorAssign (WitStackLink);
d88 1
a88 1
      WitStackLink * next_;
d90 1
a90 1
         // The next StackLink after this StackLink in the Stack.
d94 1
a94 1
// Class ObjStackLink
d100 2
a101 2
// StackLink
//    ObjStackLink
d104 1
a104 1
class WitObjStackLink: public WitStackLink
d112 1
a112 1
      WitObjStackLink ();
d118 1
a118 1
      ~WitObjStackLink ();
d132 1
a132 1
         // Sets the data for this StackLink to the arguments.
d140 1
a140 1
      noCopyCtorAssign (WitObjStackLink);
d148 1
a148 1
         // The object associated with this ObjStackLink.
d152 1
a152 1
// Class PairStackLink (ValType)
d158 2
a159 2
// StackLink
//    PairStackLink (ValType)
d166 1
a166 1
#define WitPairStackLinkdeclare(ValType)                                       \
d170 1
a170 1
class WitPairStackLink (ValType): public WitStackLink                          \
d178 1
a178 1
      WitPairStackLink (ValType) ();                                           \
d184 1
a184 1
      ~WitPairStackLink (ValType) ();                                          \
d199 1
a199 1
         /* Sets the data for this PairStackLink to the arguments.           */\
d207 1
a207 1
      noCopyCtorAssign (WitPairStackLink (ValType));                           \
d215 1
a215 1
         /* The object associated with this PairStackLink.                   */\
d219 1
a219 1
         /* The period associated with this PairStackLink.                   */\
d223 68
d295 2
a296 2
declare (WitPairStackLink, WitPeriod)
declare (WitPairStackLink, double)
@

