head	1.29;
access;
symbols
	sce_5_01_20080919:1.23
	latest_sce_4_20_20060523:1.6.0.2
	sce_4_20_20060523:1.6
	latest_sce4_20_OSL:1.5.0.4
	sce_4_20_OSL:1.5
	sce_410_withVa:1.5
	sce_4_05_20040511:1.5
	sce_4_00_20040201:1.5
	nextGenBranch:1.5.0.2
	nextGenRoot:1.5
	sce_3_30_20030627:1.5
	EndRw-branch:1.3.0.4
	Root-of-EndRw:1.3
	rwToStl:1.3.0.2;
locks; strict;
comment	@ * @;


1.29
date	2011.09.28.23.49.45;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2011.09.24.00.28.06;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.08.30.20.17.48;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2010.08.19.18.00.13;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2010.03.13.00.35.50;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2010.01.06.00.27.30;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.03.03.22.35.42;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.02.29.23.24.29;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.02.27.23.19.10;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.02.27.22.49.17;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.09.06.18.59.13;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.09.04.22.20.12;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.08.16.21.27.40;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.08.14.15.03.00;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.08.09.19.30.36;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.08.01.20.38.22;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.07.27.19.53.37;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.07.27.18.58.03;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.06.26.19.06.21;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.10.03.15.08.59;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.08.18.19.32.52;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.08.18.18.43.38;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.08.17.19.36.39;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.02.17.34.05;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.23.18.12.36;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.02.22.18.39;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.11.18.53.11;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.06.19.56.08;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.29.23.06.26;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef OptConH
#define OptConH

//------------------------------------------------------------------------------
// Header file: "OptCon.h"
//
// Contains the declaration of class OptCon.
//------------------------------------------------------------------------------

#include <OptVC.h>

//------------------------------------------------------------------------------
// class OptCon
//
// A constraint in an optimization problem.
//
// Class hierarchy:
//
//    OptVC
//       OptCon
//          DetCon
//             ResourceCon
//             SubCon
//             ShipCon
//             SlbCon
//             MultiObjCon
//             TbvCon
//          StochCon
//             StResCon
//             StSubCon
//             StShipCon
//             StSlbCon
//
// Implemented in OptMisc.C.
//------------------------------------------------------------------------------

class WitOptCon: public WitOptVC
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitOptCon (WitOptProblem * theOptProblem);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitOptCon ();

      //-----------------------------------------------------------------------
      // Public pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual void generateCoeffs () = 0;
         //
         // Generates the Coeffs of this OptCon.

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double solnValue ();
         //
         // Returns dualValue ().

      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (double, dualValue)

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      bool screenable ();
         //
         // Returns true, iff this OptCon can be screened.

      void print ();
         //
         // Prints this OptCon to the optProbFile.

      void setDualValue (double);

   protected:

      //-----------------------------------------------------------------------
      // Overriding protected virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * kindText ();

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitOptCon);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      double dualValue_;
         //
         // Dual solution value.
         // Valid only if needDual is true.
   };

#endif
@


1.28
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.27
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d47 2
a48 2
{
public:
d50 3
a52 3
//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------
d54 1
a54 1
WitOptCon (WitOptProblem * theOptProblem);
d56 3
a58 3
//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------
d60 1
a60 1
virtual ~WitOptCon ();
d62 3
a64 3
//-----------------------------------------------------------------------
// Public pure virtual member functions.
//-----------------------------------------------------------------------
d66 3
a68 3
virtual void generateCoeffs () = 0;
//
// Generates the Coeffs of this OptCon.
d70 3
a72 3
//-----------------------------------------------------------------------
// Overriding public virtual member functions.
//-----------------------------------------------------------------------
d74 3
a76 3
virtual double solnValue ();
//
// Returns dualValue ().
d78 3
a80 3
//-----------------------------------------------------------------------
// Data access functions.
//-----------------------------------------------------------------------
d82 1
a82 1
accessFunc (double, dualValue)
d84 3
a86 3
//-----------------------------------------------------------------------
// Other public member functions.
//-----------------------------------------------------------------------
d88 3
a90 3
bool screenable ();
//
// Returns true, iff this OptCon can be screened.
d92 3
a94 3
void print ();
//
// Prints this OptCon to the optProbFile.
d96 1
a96 1
void setDualValue (double);
d98 1
a98 1
protected:
d100 3
a102 3
//-----------------------------------------------------------------------
// Overriding protected virtual member functions.
//-----------------------------------------------------------------------
d104 1
a104 1
virtual const char * kindText ();
d106 1
a106 1
private:
d108 3
a110 3
//-----------------------------------------------------------------------
// Private member functions.
//-----------------------------------------------------------------------
d112 1
a112 1
noCopyCtorAssign (WitOptCon);
d114 3
a116 3
//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------
d118 5
a122 5
double dualValue_;
//
// Dual solution value.
// Valid only if needDual is true.
};
@


1.26
log
@CPLEX
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d47 2
a48 2
   {
   public:
d50 3
a52 3
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------
d54 1
a54 1
      WitOptCon (WitOptProblem * theOptProblem);
d56 3
a58 3
      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------
d60 1
a60 1
      virtual ~WitOptCon ();
d62 3
a64 3
      //-----------------------------------------------------------------------
      // Public pure virtual member functions.
      //-----------------------------------------------------------------------
d66 3
a68 3
      virtual void generateCoeffs () = 0;
         //
         // Generates the Coeffs of this OptCon.
d70 3
a72 3
      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------
d74 3
a76 3
      virtual double solnValue ();
         //
         // Returns dualValue ().
d78 3
a80 3
      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------
d82 1
a82 1
      accessFunc (double, dualValue)
d84 3
a86 3
      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------
d88 3
a90 3
      bool screenable ();
         //
         // Returns true, iff this OptCon can be screened.
d92 3
a94 3
      void print ();
         //
         // Prints this OptCon to the optProbFile.
d96 1
a96 1
      void setDualValue (double);
d98 1
a98 1
   protected:
d100 3
a102 3
      //-----------------------------------------------------------------------
      // Overriding protected virtual member functions.
      //-----------------------------------------------------------------------
d104 1
a104 1
      virtual const char * kindText ();
d106 1
a106 1
   private:
d108 3
a110 3
      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------
d112 1
a112 1
      noCopyCtorAssign (WitOptCon);
d114 3
a116 3
      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------
d118 5
a122 5
      double dualValue_;
         //
         // Dual solution value.
         // Valid only if needDual is true.
   };
@


1.25
log
@Multi-Obj Mode
@
text
@d24 1
a24 1
// A constraint in an optimization model.
d54 1
a54 1
      WitOptCon (WitOptModel * theOptModel);
d94 1
a94 1
         // Prints this OptCon to the modelFile.
@


1.24
log
@Multi-objective mode
@
text
@d36 1
@


1.23
log
@Stochastic Implosion
@
text
@d35 1
@


1.22
log
@Stochastic Implosion
@
text
@d24 1
a24 1
// A constraint in an optimization problem.
@


1.21
log
@Stochastic Implosion
@
text
@d92 1
a92 1
         // Prints this OptCon to the optProbFile.
@


1.20
log
@Stochastic Implosion
@
text
@d52 1
a52 1
      WitOptCon (WitOptProb * theOptProb);
@


1.19
log
@Stochastic Implosion
@
text
@d19 1
a19 1
#include <OptProbEl.h>
d28 1
a28 1
//    OptProbEl
d44 1
a44 1
class WitOptCon: public WitOptProbEl
@


1.18
log
@Stochastic Implosion
@
text
@d39 1
@


1.17
log
@Stochastic Implosion
@
text
@d37 1
a38 1
//             StSubCon
@


1.16
log
@Stochastic Implosion
@
text
@d38 1
@


1.15
log
@Stochastic Implosion
@
text
@d37 1
@


1.14
log
@Stochastic Implosion
@
text
@d69 1
a69 1
      virtual double solnValue () const;
d83 1
a83 1
      bool screenable () const;
d87 1
a87 1
      void print () const;
d99 1
a99 1
      virtual const char * kindText () const;
@


1.13
log
@Stochastic Implosion
@
text
@d38 1
a38 1
// Implemented in OptProbEl.C.
@


1.12
log
@Stochastic Implosion
@
text
@d36 1
@


1.11
log
@Stochastic Implosion
@
text
@d35 1
@


1.10
log
@App controlled opt implosion.
@
text
@d30 1
a30 1
//          PeriodCon
@


1.9
log
@App controlled opt implode.
@
text
@d87 1
a87 1
         // Prints this OptCon to the modelFile.
@


1.8
log
@App controlled opt implosion.
@
text
@d23 2
a24 1
// A constraint in the optimization model.
d35 2
@


1.7
log
@Removed optimizing implosion with lot sizes.
@
text
@d19 1
a19 1
#include <ModelEl.h>
d27 1
a27 1
//    ModelEl
d36 1
a36 1
class WitOptCon: public WitModelEl
d44 1
a44 1
      WitOptCon (WitOptModel * theOptModel);
@


1.6
log
@Updated the copyright date on all source files.
@
text
@a33 2
//             LotSizeCon
//             MlsCon
@


1.5
log
@Continued implementation of opt with COIN.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.4
log
@Internal changes.
@
text
@a76 9
      // Non-const access functions.
      //-----------------------------------------------------------------------

      inline double & dualValue ()
         {
         return dualValue_;
         }

      //-----------------------------------------------------------------------
d87 2
@


1.3
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d89 1
a89 1
      WitBoolean screenable () const;
d91 1
a91 1
         // Returns TRUE, iff this OptCon can be screened.
d120 1
a120 1
         // Valid only if needDual is TRUE.
@


1.2
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d34 2
a35 1
//             IncLotSizeCon
@


1.1
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d24 11
@

