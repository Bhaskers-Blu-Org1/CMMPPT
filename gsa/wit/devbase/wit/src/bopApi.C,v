head	1.63;
access;
symbols
	sce_5_01_20080919:1.58
	latest_sce_4_20_20060523:1.47.0.2
	sce_4_20_20060523:1.47
	latest_sce4_20_OSL:1.46.0.2
	sce_4_20_OSL:1.46
	sce_410_withVa:1.46
	sce_4_05_20040511:1.41
	sce_4_00_20040201:1.19
	nextGenBranch:1.17.0.2
	nextGenRoot:1.17
	sce_3_30_20030627:1.17
	EndRw-branch:1.11.0.4
	Root-of-EndRw:1.11
	rwToStl:1.11.0.2
	latest_sce_3_10_20010924:1.6.0.2
	sce_3_10_20010924:1.6
	latest_sce_3_00_20010601:1.4.0.2
	sce_3_00_20010601:1.4
	latest_sce_2_31_20010308:1.3.0.4
	sce_2_31_20010308:1.3
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.63
date	2011.09.28.23.50.44;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2011.09.24.00.28.59;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2011.08.30.20.18.26;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2010.09.10.22.10.42;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2008.11.12.19.52.26;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2007.04.04.22.08.19;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2007.04.02.23.01.16;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2007.04.02.21.21.20;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2007.01.26.21.03.16;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2007.01.19.23.47.08;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2007.01.16.16.53.45;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2006.11.02.23.07.14;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2006.09.19.17.50.56;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2006.08.24.20.50.27;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2006.08.22.21.26.55;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2006.08.02.18.06.01;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2006.05.02.17.34.16;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2005.08.19.21.38.04;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2005.07.13.21.18.47;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2005.03.04.00.00.29;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2005.02.24.23.23.58;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2004.05.12.19.43.31;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2004.05.07.22.15.15;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2004.05.05.15.43.59;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2004.04.30.15.57.20;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2004.04.14.21.16.18;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2004.04.09.19.37.58;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2004.04.02.20.54.17;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2004.04.01.21.05.13;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2004.03.29.23.21.28;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2004.03.25.22.00.37;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2004.03.25.21.21.59;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2004.03.25.20.35.02;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2004.03.25.19.59.38;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2004.03.03.22.36.22;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2004.02.26.18.59.43;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2004.02.24.19.37.23;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2004.02.19.21.21.28;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2004.02.18.00.05.25;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2004.02.14.00.45.35;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2004.02.12.19.13.41;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.02.05.21.24.56;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.02.04.22.31.27;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2004.01.30.23.07.51;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.11.11.18.29.15;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.08.05.20.18.24;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.05.07.18.06.19;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.03.19.16.48.30;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.01.31.21.29.01;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.01.27.21.17.22;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.02.23.40.54;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.02.22.18.57;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.08.19.21.58;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.03.23.16.44;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.25.19.14.55;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.24.18.26.12;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.18.14.02.48;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.31.00.26.26;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.02.02.11.28;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.29.22.11.30;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.25.20.12.37;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.57.17;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.33;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.33;	author wit;	state Exp;
branches;
next	;


desc
@@


1.63
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "bopApi.C"
//
// Inner API functions relating to BopEntries.
//------------------------------------------------------------------------------

#include <WitRun.h>
#include <ApiMgr.h>
#include <InputID.h>
#include <ApiCall.h>
#include <Pre.h>
#include <CompMgr.h>
#include <Operation.h>
#include <BopEntry.h>
#include <ISRealArg.h>
#include <OSRealArg.h>
#include <IVRealArg.h>
#include <OVRealArg.h>
#include <MsgFrag.h>
#include <MsgFac.h>

#include <stdlib.h>

//------------------------------------------------------------------------------
// setGetBopEntryInit
// Initilization of wit[GS]etBopEntry* functions.
//------------------------------------------------------------------------------

WitBopEntry * WitRun::setGetBopEntryInit (
      const char * producingOperationName,
      int          bopEntryIndex)
   {
   forbidNullArg (producingOperationName, "producingOperationName");

   if (myMsgFac ().mayIssue ("operationNameMsg"))
      myMsgFac () ("operationNameMsg", producingOperationName);

   if (myMsgFac ().mayIssue ("bopEntryIndexMsg"))
      myMsgFac () ("bopEntryIndexMsg", bopEntryIndex);

   return getBopEntryP (producingOperationName, bopEntryIndex);
   }

//------------------------------------------------------------------------------

void WitRun::witAddBopEntry (
      const char * producingOperationName,
      const char * producedPartName)
   {
   WitOperation * operationP;
   WitPart *      partP;

   myApiMgr_->startInnerFunc ();

   forbidNullArg (producingOperationName, "producingOperationName");
   forbidNullArg (producedPartName,       "producedPartName");

   if (myMsgFac ().mayIssue ("bopAddMsg"))
      myMsgFac () ("bopAddMsg", producedPartName,producingOperationName);

   operationP = myCompMgr ()->findOperation (producingOperationName);

   if (operationP == NULL)
      myMsgFac () ("undefinedOperationMsg", producingOperationName);

   myInputID ()->setMyOperation (operationP);

   partP = myCompMgr ()->findPart (producedPartName);

   if (partP == NULL)
      myMsgFac () ("undefinedPartMsg", producedPartName);

   addingDelComp ("bopEntryFrag");

   new WitBopEntry (operationP , partP);

   myInputID ()->setMyOperation (NULL);
   }

//------------------------------------------------------------------------------

void WitRun::witCopyBopEntryData (
      const char * dupOperationName,
      int          dupBopEntryIndex,
      WitRun *     origWitRun,
      const char * origOperationName,
      int          origBopEntryIndex)
   {
   startCopyObjData (origWitRun);

   myMsgFac ()  ("dupObjectMsg", myMsgFac ().myFrag ("bopEntryFrag"));

   WitBopEntryApiCall dupCall  (
      this,
      dupOperationName,
      dupBopEntryIndex);

   myMsgFac () ("origObjectMsg", myMsgFac ().myFrag ("bopEntryFrag"));

   WitBopEntryApiCall origCall  (
      origWitRun,
      origOperationName,
      origBopEntryIndex);

   if (dupCall.myBopEnt () == origCall.myBopEnt ())
      myMsgFac () ("copyObjectToSelfSmsg",
         myMsgFac ().myFrag ("bopEntryFrag"));

   dupCall.myBopEnt ()->copyAttrsFrom (origCall.myBopEnt ());
   }

//------------------------------------------------------------------------------

void WitRun::witGetObjItrBopEntry (
      char * * producingOperationName,
      int *    bopEntryIndex)
   {
   WitBopEntry * theBopEnt;

   myApiMgr_->startInnerFunc ();

   theBopEnt =
      curItrDelCompForGet (WitAT_BOP_ENTRY, "bopEntryFrag")->
         thisBopEnt ();

   stronglyAssert (theBopEnt != NULL);

   apiGet (
      producingOperationName, 
      "producingOperationName", 
      theBopEnt->myOperationName ());

   apiGet (bopEntryIndex, "bopEntryIndex", theBopEnt->localIndex ());
   }

//------------------------------------------------------------------------------

void WitRun::witGetBopEntryAppData (
      const char * producingOperationName,
      int          bopEntryIndex,
      void * *     appData)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);

   apiGet (appData, "appData", theCall.myBopEnt ()->appData ());
   }

//------------------------------------------------------------------------------

void WitRun::witGetBopEntryByProduct (
      const char * producingOperationName,
      int          bopEntryIndex,
      WitBoolean * byProduct)
   {
   WitBoolean expAllowedVal;

   myApiMgr_->startInnerFunc ();

   myMsgFac () (
      "getPre50AttrMsg",
      apiFuncName (),
      "bopEntry",
      "byProduct",
      "expAllowed");

   witGetBopEntryExpAllowed (
      producingOperationName,
      bopEntryIndex,
      & expAllowedVal);

   apiGet (byProduct, "byProduct", not expAllowedVal);
   }

//------------------------------------------------------------------------------

void WitRun::witGetBopEntryEarliestPeriod (
      const char * producingOperationName,
      int          bopEntryIndex,
      int *        earliestPeriod)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);

   apiGet (                earliestPeriod, 
                          "earliestPeriod", 
      theCall.myBopEnt ()->earliestPeriod ());
   }

//------------------------------------------------------------------------------

void WitRun::witGetBopEntryExpAllowed (
      const char * producingOperationName,
      int          bopEntryIndex,
      WitBoolean * expAllowed)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   apiGet (expAllowed, "expAllowed", theCall.myBopEnt ()->expAllowed ());
   }

//------------------------------------------------------------------------------

void WitRun::witGetBopEntryExpAversion (
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitOSRealArg & expAversion)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   apiGet (
      expAversion,
      "expAversion",
      theCall.myBopEnt ()->expAversion ());
   }

//------------------------------------------------------------------------------

void WitRun::witGetBopEntryImpactPeriod (
      const char * producingOperationName,
      int          bopEntryIndex,
      int * *      impactPeriod)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   myProblem ()->myPreprocessor ()->preprocess ();

   apiGet (impactPeriod, "impactPeriod", theCall.myBopEnt ()->impactPeriod ());
   }

//------------------------------------------------------------------------------

void WitRun::witGetBopEntryLatestPeriod (
      const char * producingOperationName,
      int          bopEntryIndex,
      int *        latestPeriod)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   apiGet (latestPeriod, "latestPeriod", theCall.myBopEnt ()->latestPeriod ());
   }

//------------------------------------------------------------------------------

void WitRun::witGetBopEntryMeSelSplit (
      const char * producingOperationName,
      int          bopEntryIndex,
      WitBoolean * meSelSplit)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   apiGet (meSelSplit, "meSelSplit", theCall.myBopEnt ()->meSelSplit ());
   }

//------------------------------------------------------------------------------

void WitRun::witGetBopEntryOffset (
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitOVRealArg & offset)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   apiGet (offset, "offset", theCall.myBopEnt ()->offset ());
   }

//------------------------------------------------------------------------------

void WitRun::witGetBopEntryProdRate (
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitOSRealArg & prodRate)
   {
   double * productRateCVec;

   myApiMgr_->startInnerFunc ();

   if (myMsgFac ().mayIssue ("getVecAttrAsScalMsg"))
      myMsgFac () (
         "getVecAttrAsScalMsg",
         apiFuncName (),
         "BOP entry",
         "prodRate",
         "productRate");

   witGetBopEntryProductRate (
      producingOperationName, 
      bopEntryIndex, 
      & productRateCVec);

   forbidNullArg (prodRate, "prodRate");

   prodRate = productRateCVec[0];

   free (productRateCVec);
   }

//------------------------------------------------------------------------------

void WitRun::witGetBopEntryProductRate (
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitOVRealArg & productRate)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   apiGet (productRate, "productRate", theCall.myBopEnt ()->productRate ());
   }

//------------------------------------------------------------------------------

void WitRun::witGetBopEntryProducedPart (
     const char * producingOperationName,
     int          bopEntryIndex,
     char * *     producedPartName)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   apiGet (
       producedPartName, 
      "producedPartName", 
      theCall.myBopEnt ()->myPartName ());
   }

//------------------------------------------------------------------------------

void WitRun::witGetBopEntryRoutingShare (
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitOVRealArg & routingShare)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   apiGet (routingShare, "routingShare", theCall.myBopEnt ()->routingShare ());
   }

//------------------------------------------------------------------------------

void WitRun::witGetBopEntrySelForDel (
      const char * producingOperationName,
      int          bopEntryIndex,
      WitBoolean * selForDel)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   apiGet (selForDel, "selForDel", theCall.myBopEnt ()->selForDel ());
   }

//------------------------------------------------------------------------------

void WitRun::witSetBopEntryAppData (
      const char * producingOperationName,
      int          bopEntryIndex,
      void *       appData)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   theCall.setAppData (appData);
   }

//------------------------------------------------------------------------------

void WitRun::witSetBopEntryByProduct (
      const char * producingOperationName,
      int          bopEntryIndex,
      int          byProduct)
   {
   myApiMgr_->startInnerFunc ();

   myMsgFac () (
      "setPre50AttrMsg",
      apiFuncName (),
      "bopEntry",
      "byProduct",
      "expAllowed");

   witSetBopEntryExpAllowed (
      producingOperationName,
      bopEntryIndex,
      not byProduct);
   }

//------------------------------------------------------------------------------

void WitRun::witSetBopEntryEarliestPeriod (
      const char * producingOperationName,
      int          bopEntryIndex,
      int earliestPeriod)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   theCall.setEarliestPeriod (earliestPeriod);
   }

//------------------------------------------------------------------------------

void WitRun::witSetBopEntryExpAllowed (
      const char * producingOperationName,
      int          bopEntryIndex,
      int          expAllowed)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   theCall.prepBool (
                          "expAllowed", 
      theCall.myBopEnt ()->expAllowed (), 
                           expAllowed);

   if (theCall.argsOK ())
      theCall.myBopEnt ()->setExpAllowed (asaBool (expAllowed));
   }

//------------------------------------------------------------------------------

void WitRun::witSetBopEntryExpAversion (
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitISRealArg & expAversion)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   theCall.prepDouble (
      "expAversion", 
      theCall.myBopEnt ()->expAversion (),
      expAversion);

   if (theCall.argsOK ())
      theCall.myBopEnt ()->setExpAversion (expAversion);
   }

//------------------------------------------------------------------------------

void WitRun::witSetBopEntryLatestPeriod (
      const char * producingOperationName,
      int          bopEntryIndex,
      int latestPeriod)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   theCall.setLatestPeriod (latestPeriod);
   }

//------------------------------------------------------------------------------

void WitRun::witSetBopEntryMeSelSplit (
      const char * producingOperationName,
      int          bopEntryIndex,
      int          meSelSplit)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   theCall.prepBool (
                          "meSelSplit", 
      theCall.myBopEnt ()->meSelSplit (), 
                           meSelSplit);

   if (theCall.argsOK ())
      theCall.myBopEnt ()->setMeSelSplit (asaBool (meSelSplit));
   }

//------------------------------------------------------------------------------

void WitRun::witSetBopEntryOffset (
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitIVRealArg & offset)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   theCall.setOffset (offset);
   }

//------------------------------------------------------------------------------

void WitRun::witSetBopEntryProdRate (
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitISRealArg & prodRate)
   {
   WitTVec <double> & productRateVec = myApiMgr ()->reserveTempDblVec ();

   myApiMgr_->startInnerFunc ();

   if (myMsgFac ().mayIssue ("setVecAttrToScalMsg"))
      myMsgFac () (
         "setVecAttrToScalMsg",
         apiFuncName (),
         "BOP entry",
         "prodRate",
         "productRate");

   productRateVec = prodRate;

   witSetBopEntryProductRate (
      producingOperationName,
      bopEntryIndex,
      productRateVec.myCVec ());

   myApiMgr ()->releaseTempVecs ();
   }

//------------------------------------------------------------------------------

void WitRun::witSetBopEntryProductRate (
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitIVRealArg & productRate)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   theCall.prepNonNegDblVec ("productRate", productRate);

   if (theCall.argsOK ())
      theCall.myBopEnt ()->setProductRate (productRate);
   }

//------------------------------------------------------------------------------

void WitRun::witSetBopEntryRoutingShare (
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitIVRealArg & routingShare)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   theCall.setRoutingShare (routingShare);
   }

//------------------------------------------------------------------------------

void WitRun::witSetBopEntrySelForDel (
      const char * producingOperationName,
      int          bopEntryIndex,
      int          selForDel)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   theCall.setSelForDel (selForDel);
   }

//------------------------------------------------------------------------------
// getBopEntryP
// Get pointer to BopEntry.
//------------------------------------------------------------------------------

WitBopEntry * WitRun::getBopEntryP (
      const char *  producingOperationName,
      int           bopEntryIndex)
   {
   WitBopEntry *  retVal;
   WitOperation * operationP ;

   operationP  = getOperationP(producingOperationName);

   myInputID ()->setMyOperation (operationP);

   if (operationP ->bop ().isEmpty ())
      myMsgFac () ("emptyBopSmsg");

   if (bopEntryIndex < 0 or bopEntryIndex >= operationP->bop ().nElements())
      myMsgFac () ("bopEntryIndexRangeSmsg",
         bopEntryIndex,
         0,
         operationP ->bop ().nElements());

   retVal = myCompMgr ()->findBopEntry (operationP, bopEntryIndex);

   witAssert (retVal != NULL);

   myInputID ()->setMyBopEntry (retVal);

   return retVal;
   }
@


1.62
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.61
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d39 4
a42 4
const char * producingOperationName,
int          bopEntryIndex)
{
forbidNullArg (producingOperationName, "producingOperationName");
d44 2
a45 2
if (myMsgFac ().mayIssue ("operationNameMsg"))
myMsgFac () ("operationNameMsg", producingOperationName);
d47 2
a48 2
if (myMsgFac ().mayIssue ("bopEntryIndexMsg"))
myMsgFac () ("bopEntryIndexMsg", bopEntryIndex);
d50 2
a51 2
return getBopEntryP (producingOperationName, bopEntryIndex);
}
d56 5
a60 5
const char * producingOperationName,
const char * producedPartName)
{
WitOperation * operationP;
WitPart *      partP;
d62 1
a62 1
myApiMgr_->startInnerFunc ();
d64 2
a65 2
forbidNullArg (producingOperationName, "producingOperationName");
forbidNullArg (producedPartName,       "producedPartName");
d67 2
a68 2
if (myMsgFac ().mayIssue ("bopAddMsg"))
myMsgFac () ("bopAddMsg", producedPartName,producingOperationName);
d70 1
a70 1
operationP = myCompMgr ()->findOperation (producingOperationName);
d72 2
a73 2
if (operationP == NULL)
myMsgFac () ("undefinedOperationMsg", producingOperationName);
d75 1
a75 1
myInputID ()->setMyOperation (operationP);
d77 1
a77 1
partP = myCompMgr ()->findPart (producedPartName);
d79 2
a80 2
if (partP == NULL)
myMsgFac () ("undefinedPartMsg", producedPartName);
d82 1
a82 1
addingDelComp ("bopEntryFrag");
d84 1
a84 1
new WitBopEntry (operationP , partP);
d86 2
a87 2
myInputID ()->setMyOperation (NULL);
}
d92 25
a116 25
const char * dupOperationName,
int          dupBopEntryIndex,
WitRun *     origWitRun,
const char * origOperationName,
int          origBopEntryIndex)
{
startCopyObjData (origWitRun);

myMsgFac ()  ("dupObjectMsg", myMsgFac ().myFrag ("bopEntryFrag"));

WitBopEntryApiCall dupCall  (
this,
dupOperationName,
dupBopEntryIndex);

myMsgFac () ("origObjectMsg", myMsgFac ().myFrag ("bopEntryFrag"));

WitBopEntryApiCall origCall  (
origWitRun,
origOperationName,
origBopEntryIndex);

if (dupCall.myBopEnt () == origCall.myBopEnt ())
myMsgFac () ("copyObjectToSelfSmsg",
myMsgFac ().myFrag ("bopEntryFrag"));
d118 2
a119 2
dupCall.myBopEnt ()->copyAttrsFrom (origCall.myBopEnt ());
}
d124 17
a140 17
char * * producingOperationName,
int *    bopEntryIndex)
{
WitBopEntry * theBopEnt;

myApiMgr_->startInnerFunc ();

theBopEnt =
curItrDelCompForGet (WitAT_BOP_ENTRY, "bopEntryFrag")->
thisBopEnt ();

stronglyAssert (theBopEnt != NULL);

apiGet (
producingOperationName,
"producingOperationName",
theBopEnt->myOperationName ());
d142 2
a143 2
apiGet (bopEntryIndex, "bopEntryIndex", theBopEnt->localIndex ());
}
d148 5
a152 5
const char * producingOperationName,
int          bopEntryIndex,
void * *     appData)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d154 2
a155 2
apiGet (appData, "appData", theCall.myBopEnt ()->appData ());
}
d160 19
a178 19
const char * producingOperationName,
int          bopEntryIndex,
WitBoolean * byProduct)
{
WitBoolean expAllowedVal;

myApiMgr_->startInnerFunc ();

myMsgFac () (
"getPre50AttrMsg",
apiFuncName (),
"bopEntry",
"byProduct",
"expAllowed");

witGetBopEntryExpAllowed (
producingOperationName,
bopEntryIndex,
& expAllowedVal);
d180 2
a181 2
apiGet (byProduct, "byProduct", not expAllowedVal);
}
d186 10
a195 10
const char * producingOperationName,
int          bopEntryIndex,
int *        earliestPeriod)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);

apiGet (                earliestPeriod,
"earliestPeriod",
theCall.myBopEnt ()->earliestPeriod ());
}
d200 5
a204 5
const char * producingOperationName,
int          bopEntryIndex,
WitBoolean * expAllowed)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d206 2
a207 2
apiGet (expAllowed, "expAllowed", theCall.myBopEnt ()->expAllowed ());
}
d212 11
a222 11
const char *         producingOperationName,
int                  bopEntryIndex,
const WitOSRealArg & expAversion)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

apiGet (
expAversion,
"expAversion",
theCall.myBopEnt ()->expAversion ());
}
d227 5
a231 5
const char * producingOperationName,
int          bopEntryIndex,
int * *      impactPeriod)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d233 1
a233 1
myProblem ()->myPreprocessor ()->preprocess ();
d235 2
a236 2
apiGet (impactPeriod, "impactPeriod", theCall.myBopEnt ()->impactPeriod ());
}
d241 5
a245 5
const char * producingOperationName,
int          bopEntryIndex,
int *        latestPeriod)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d247 2
a248 2
apiGet (latestPeriod, "latestPeriod", theCall.myBopEnt ()->latestPeriod ());
}
d253 5
a257 5
const char * producingOperationName,
int          bopEntryIndex,
WitBoolean * meSelSplit)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d259 2
a260 2
apiGet (meSelSplit, "meSelSplit", theCall.myBopEnt ()->meSelSplit ());
}
d265 5
a269 5
const char *         producingOperationName,
int                  bopEntryIndex,
const WitOVRealArg & offset)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d271 2
a272 2
apiGet (offset, "offset", theCall.myBopEnt ()->offset ());
}
d277 20
a296 20
const char *         producingOperationName,
int                  bopEntryIndex,
const WitOSRealArg & prodRate)
{
double * productRateCVec;

myApiMgr_->startInnerFunc ();

if (myMsgFac ().mayIssue ("getVecAttrAsScalMsg"))
myMsgFac () (
"getVecAttrAsScalMsg",
apiFuncName (),
"BOP entry",
"prodRate",
"productRate");

witGetBopEntryProductRate (
producingOperationName,
bopEntryIndex,
& productRateCVec);
d298 1
a298 1
forbidNullArg (prodRate, "prodRate");
d300 1
a300 1
prodRate = productRateCVec[0];
d302 2
a303 2
free (productRateCVec);
}
d308 5
a312 5
const char *         producingOperationName,
int                  bopEntryIndex,
const WitOVRealArg & productRate)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d314 2
a315 2
apiGet (productRate, "productRate", theCall.myBopEnt ()->productRate ());
}
d320 11
a330 11
const char * producingOperationName,
int          bopEntryIndex,
char * *     producedPartName)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

apiGet (
producedPartName,
"producedPartName",
theCall.myBopEnt ()->myPartName ());
}
d335 5
a339 5
const char *         producingOperationName,
int                  bopEntryIndex,
const WitOVRealArg & routingShare)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d341 2
a342 2
apiGet (routingShare, "routingShare", theCall.myBopEnt ()->routingShare ());
}
d347 5
a351 5
const char * producingOperationName,
int          bopEntryIndex,
WitBoolean * selForDel)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d353 2
a354 2
apiGet (selForDel, "selForDel", theCall.myBopEnt ()->selForDel ());
}
d359 5
a363 5
const char * producingOperationName,
int          bopEntryIndex,
void *       appData)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d365 2
a366 2
theCall.setAppData (appData);
}
d371 18
a388 18
const char * producingOperationName,
int          bopEntryIndex,
int          byProduct)
{
myApiMgr_->startInnerFunc ();

myMsgFac () (
"setPre50AttrMsg",
apiFuncName (),
"bopEntry",
"byProduct",
"expAllowed");

witSetBopEntryExpAllowed (
producingOperationName,
bopEntryIndex,
not byProduct);
}
d393 5
a397 5
const char * producingOperationName,
int          bopEntryIndex,
int earliestPeriod)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d399 2
a400 2
theCall.setEarliestPeriod (earliestPeriod);
}
d405 14
a418 14
const char * producingOperationName,
int          bopEntryIndex,
int          expAllowed)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

theCall.prepBool (
"expAllowed",
theCall.myBopEnt ()->expAllowed (),
expAllowed);

if (theCall.argsOK ())
theCall.myBopEnt ()->setExpAllowed (asaBool (expAllowed));
}
d423 14
a436 14
const char *         producingOperationName,
int                  bopEntryIndex,
const WitISRealArg & expAversion)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

theCall.prepDouble (
"expAversion",
theCall.myBopEnt ()->expAversion (),
expAversion);

if (theCall.argsOK ())
theCall.myBopEnt ()->setExpAversion (expAversion);
}
d441 5
a445 5
const char * producingOperationName,
int          bopEntryIndex,
int latestPeriod)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d447 2
a448 2
theCall.setLatestPeriod (latestPeriod);
}
d453 14
a466 14
const char * producingOperationName,
int          bopEntryIndex,
int          meSelSplit)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

theCall.prepBool (
"meSelSplit",
theCall.myBopEnt ()->meSelSplit (),
meSelSplit);

if (theCall.argsOK ())
theCall.myBopEnt ()->setMeSelSplit (asaBool (meSelSplit));
}
d471 5
a475 5
const char *         producingOperationName,
int                  bopEntryIndex,
const WitIVRealArg & offset)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d477 2
a478 2
theCall.setOffset (offset);
}
d483 22
a504 22
const char *         producingOperationName,
int                  bopEntryIndex,
const WitISRealArg & prodRate)
{
WitTVec <double> & productRateVec = myApiMgr ()->reserveTempDblVec ();

myApiMgr_->startInnerFunc ();

if (myMsgFac ().mayIssue ("setVecAttrToScalMsg"))
myMsgFac () (
"setVecAttrToScalMsg",
apiFuncName (),
"BOP entry",
"prodRate",
"productRate");

productRateVec = prodRate;

witSetBopEntryProductRate (
producingOperationName,
bopEntryIndex,
productRateVec.myCVec ());
d506 2
a507 2
myApiMgr ()->releaseTempVecs ();
}
d512 11
a522 11
const char *         producingOperationName,
int                  bopEntryIndex,
const WitIVRealArg & productRate)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

theCall.prepNonNegDblVec ("productRate", productRate);

if (theCall.argsOK ())
theCall.myBopEnt ()->setProductRate (productRate);
}
d527 5
a531 5
const char *         producingOperationName,
int                  bopEntryIndex,
const WitIVRealArg & routingShare)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d533 2
a534 2
theCall.setRoutingShare (routingShare);
}
d539 5
a543 5
const char * producingOperationName,
int          bopEntryIndex,
int          selForDel)
{
WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d545 2
a546 2
theCall.setSelForDel (selForDel);
}
d554 5
a558 5
const char *  producingOperationName,
int           bopEntryIndex)
{
WitBopEntry *  retVal;
WitOperation * operationP ;
d560 1
a560 1
operationP  = getOperationP(producingOperationName);
d562 1
a562 1
myInputID ()->setMyOperation (operationP);
d564 2
a565 2
if (operationP ->bop ().isEmpty ())
myMsgFac () ("emptyBopSmsg");
d567 5
a571 5
if (bopEntryIndex < 0 or bopEntryIndex >= operationP->bop ().nElements())
myMsgFac () ("bopEntryIndexRangeSmsg",
bopEntryIndex,
0,
operationP ->bop ().nElements());
d573 1
a573 1
retVal = myCompMgr ()->findBopEntry (operationP, bopEntryIndex);
d575 1
a575 1
witAssert (retVal != NULL);
d577 1
a577 1
myInputID ()->setMyBopEntry (retVal);
d579 2
a580 2
return retVal;
}
@


1.60
log
@Heuristic Adjustment
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d39 4
a42 4
      const char * producingOperationName,
      int          bopEntryIndex)
   {
   forbidNullArg (producingOperationName, "producingOperationName");
d44 2
a45 2
   if (myMsgFac ().mayIssue ("operationNameMsg"))
      myMsgFac () ("operationNameMsg", producingOperationName);
d47 2
a48 2
   if (myMsgFac ().mayIssue ("bopEntryIndexMsg"))
      myMsgFac () ("bopEntryIndexMsg", bopEntryIndex);
d50 2
a51 2
   return getBopEntryP (producingOperationName, bopEntryIndex);
   }
d56 5
a60 5
      const char * producingOperationName,
      const char * producedPartName)
   {
   WitOperation * operationP;
   WitPart *      partP;
d62 1
a62 1
   myApiMgr_->startInnerFunc ();
d64 2
a65 2
   forbidNullArg (producingOperationName, "producingOperationName");
   forbidNullArg (producedPartName,       "producedPartName");
d67 2
a68 2
   if (myMsgFac ().mayIssue ("bopAddMsg"))
      myMsgFac () ("bopAddMsg", producedPartName,producingOperationName);
d70 1
a70 1
   operationP = myCompMgr ()->findOperation (producingOperationName);
d72 2
a73 2
   if (operationP == NULL)
      myMsgFac () ("undefinedOperationMsg", producingOperationName);
d75 1
a75 1
   myInputID ()->setMyOperation (operationP);
d77 1
a77 1
   partP = myCompMgr ()->findPart (producedPartName);
d79 2
a80 2
   if (partP == NULL)
      myMsgFac () ("undefinedPartMsg", producedPartName);
d82 1
a82 1
   addingDelComp ("bopEntryFrag");
d84 1
a84 1
   new WitBopEntry (operationP , partP);
d86 2
a87 2
   myInputID ()->setMyOperation (NULL);
   }
d92 25
a116 25
      const char * dupOperationName,
      int          dupBopEntryIndex,
      WitRun *     origWitRun,
      const char * origOperationName,
      int          origBopEntryIndex)
   {
   startCopyObjData (origWitRun);

   myMsgFac ()  ("dupObjectMsg", myMsgFac ().myFrag ("bopEntryFrag"));

   WitBopEntryApiCall dupCall  (
      this,
      dupOperationName,
      dupBopEntryIndex);

   myMsgFac () ("origObjectMsg", myMsgFac ().myFrag ("bopEntryFrag"));

   WitBopEntryApiCall origCall  (
      origWitRun,
      origOperationName,
      origBopEntryIndex);

   if (dupCall.myBopEnt () == origCall.myBopEnt ())
      myMsgFac () ("copyObjectToSelfSmsg",
         myMsgFac ().myFrag ("bopEntryFrag"));
d118 2
a119 2
   dupCall.myBopEnt ()->copyAttrsFrom (origCall.myBopEnt ());
   }
d124 17
a140 17
      char * * producingOperationName,
      int *    bopEntryIndex)
   {
   WitBopEntry * theBopEnt;

   myApiMgr_->startInnerFunc ();

   theBopEnt =
      curItrDelCompForGet (WitAT_BOP_ENTRY, "bopEntryFrag")->
         thisBopEnt ();

   stronglyAssert (theBopEnt != NULL);

   apiGet (
      producingOperationName, 
      "producingOperationName", 
      theBopEnt->myOperationName ());
d142 2
a143 2
   apiGet (bopEntryIndex, "bopEntryIndex", theBopEnt->localIndex ());
   }
d148 5
a152 5
      const char * producingOperationName,
      int          bopEntryIndex,
      void * *     appData)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d154 2
a155 2
   apiGet (appData, "appData", theCall.myBopEnt ()->appData ());
   }
d160 19
a178 19
      const char * producingOperationName,
      int          bopEntryIndex,
      WitBoolean * byProduct)
   {
   WitBoolean expAllowedVal;

   myApiMgr_->startInnerFunc ();

   myMsgFac () (
      "getPre50AttrMsg",
      apiFuncName (),
      "bopEntry",
      "byProduct",
      "expAllowed");

   witGetBopEntryExpAllowed (
      producingOperationName,
      bopEntryIndex,
      & expAllowedVal);
d180 2
a181 2
   apiGet (byProduct, "byProduct", not expAllowedVal);
   }
d186 10
a195 10
      const char * producingOperationName,
      int          bopEntryIndex,
      int *        earliestPeriod)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);

   apiGet (                earliestPeriod, 
                          "earliestPeriod", 
      theCall.myBopEnt ()->earliestPeriod ());
   }
d200 5
a204 5
      const char * producingOperationName,
      int          bopEntryIndex,
      WitBoolean * expAllowed)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d206 2
a207 2
   apiGet (expAllowed, "expAllowed", theCall.myBopEnt ()->expAllowed ());
   }
d212 11
a222 11
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitOSRealArg & expAversion)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   apiGet (
      expAversion,
      "expAversion",
      theCall.myBopEnt ()->expAversion ());
   }
d227 5
a231 5
      const char * producingOperationName,
      int          bopEntryIndex,
      int * *      impactPeriod)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d233 1
a233 1
   myProblem ()->myPreprocessor ()->preprocess ();
d235 2
a236 2
   apiGet (impactPeriod, "impactPeriod", theCall.myBopEnt ()->impactPeriod ());
   }
d241 5
a245 5
      const char * producingOperationName,
      int          bopEntryIndex,
      int *        latestPeriod)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d247 2
a248 2
   apiGet (latestPeriod, "latestPeriod", theCall.myBopEnt ()->latestPeriod ());
   }
d253 5
a257 5
      const char * producingOperationName,
      int          bopEntryIndex,
      WitBoolean * meSelSplit)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d259 2
a260 2
   apiGet (meSelSplit, "meSelSplit", theCall.myBopEnt ()->meSelSplit ());
   }
d265 5
a269 5
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitOVRealArg & offset)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d271 2
a272 2
   apiGet (offset, "offset", theCall.myBopEnt ()->offset ());
   }
d277 20
a296 20
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitOSRealArg & prodRate)
   {
   double * productRateCVec;

   myApiMgr_->startInnerFunc ();

   if (myMsgFac ().mayIssue ("getVecAttrAsScalMsg"))
      myMsgFac () (
         "getVecAttrAsScalMsg",
         apiFuncName (),
         "BOP entry",
         "prodRate",
         "productRate");

   witGetBopEntryProductRate (
      producingOperationName, 
      bopEntryIndex, 
      & productRateCVec);
d298 1
a298 1
   forbidNullArg (prodRate, "prodRate");
d300 1
a300 1
   prodRate = productRateCVec[0];
d302 2
a303 2
   free (productRateCVec);
   }
d308 5
a312 5
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitOVRealArg & productRate)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d314 2
a315 2
   apiGet (productRate, "productRate", theCall.myBopEnt ()->productRate ());
   }
d320 11
a330 11
     const char * producingOperationName,
     int          bopEntryIndex,
     char * *     producedPartName)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   apiGet (
       producedPartName, 
      "producedPartName", 
      theCall.myBopEnt ()->myPartName ());
   }
d335 5
a339 5
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitOVRealArg & routingShare)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d341 2
a342 2
   apiGet (routingShare, "routingShare", theCall.myBopEnt ()->routingShare ());
   }
d347 5
a351 5
      const char * producingOperationName,
      int          bopEntryIndex,
      WitBoolean * selForDel)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d353 2
a354 2
   apiGet (selForDel, "selForDel", theCall.myBopEnt ()->selForDel ());
   }
d359 5
a363 5
      const char * producingOperationName,
      int          bopEntryIndex,
      void *       appData)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d365 2
a366 2
   theCall.setAppData (appData);
   }
d371 18
a388 18
      const char * producingOperationName,
      int          bopEntryIndex,
      int          byProduct)
   {
   myApiMgr_->startInnerFunc ();

   myMsgFac () (
      "setPre50AttrMsg",
      apiFuncName (),
      "bopEntry",
      "byProduct",
      "expAllowed");

   witSetBopEntryExpAllowed (
      producingOperationName,
      bopEntryIndex,
      not byProduct);
   }
d393 5
a397 5
      const char * producingOperationName,
      int          bopEntryIndex,
      int earliestPeriod)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d399 2
a400 2
   theCall.setEarliestPeriod (earliestPeriod);
   }
d405 14
a418 14
      const char * producingOperationName,
      int          bopEntryIndex,
      int          expAllowed)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   theCall.prepBool (
                          "expAllowed", 
      theCall.myBopEnt ()->expAllowed (), 
                           expAllowed);

   if (theCall.argsOK ())
      theCall.myBopEnt ()->setExpAllowed (asaBool (expAllowed));
   }
d423 14
a436 14
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitISRealArg & expAversion)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   theCall.prepDouble (
      "expAversion", 
      theCall.myBopEnt ()->expAversion (),
      expAversion);

   if (theCall.argsOK ())
      theCall.myBopEnt ()->setExpAversion (expAversion);
   }
d441 5
a445 5
      const char * producingOperationName,
      int          bopEntryIndex,
      int latestPeriod)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d447 2
a448 2
   theCall.setLatestPeriod (latestPeriod);
   }
d453 14
a466 14
      const char * producingOperationName,
      int          bopEntryIndex,
      int          meSelSplit)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   theCall.prepBool (
                          "meSelSplit", 
      theCall.myBopEnt ()->meSelSplit (), 
                           meSelSplit);

   if (theCall.argsOK ())
      theCall.myBopEnt ()->setMeSelSplit (asaBool (meSelSplit));
   }
d471 5
a475 5
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitIVRealArg & offset)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d477 2
a478 2
   theCall.setOffset (offset);
   }
d483 22
a504 22
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitISRealArg & prodRate)
   {
   WitTVec <double> & productRateVec = myApiMgr ()->reserveTempDblVec ();

   myApiMgr_->startInnerFunc ();

   if (myMsgFac ().mayIssue ("setVecAttrToScalMsg"))
      myMsgFac () (
         "setVecAttrToScalMsg",
         apiFuncName (),
         "BOP entry",
         "prodRate",
         "productRate");

   productRateVec = prodRate;

   witSetBopEntryProductRate (
      producingOperationName,
      bopEntryIndex,
      productRateVec.myCVec ());
d506 2
a507 2
   myApiMgr ()->releaseTempVecs ();
   }
d512 11
a522 11
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitIVRealArg & productRate)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;

   theCall.prepNonNegDblVec ("productRate", productRate);

   if (theCall.argsOK ())
      theCall.myBopEnt ()->setProductRate (productRate);
   }
d527 5
a531 5
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitIVRealArg & routingShare)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d533 2
a534 2
   theCall.setRoutingShare (routingShare);
   }
d539 5
a543 5
      const char * producingOperationName,
      int          bopEntryIndex,
      int          selForDel)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);;
d545 2
a546 2
   theCall.setSelForDel (selForDel);
   }
d554 5
a558 5
      const char *  producingOperationName,
      int           bopEntryIndex)
   {
   WitBopEntry *  retVal;
   WitOperation * operationP ;
d560 1
a560 1
   operationP  = getOperationP(producingOperationName);
d562 1
a562 1
   myInputID ()->setMyOperation (operationP);
d564 2
a565 2
   if (operationP ->bop ().isEmpty ())
      myMsgFac () ("emptyBopSmsg");
d567 5
a571 5
   if (bopEntryIndex < 0 or bopEntryIndex >= operationP->bop ().nElements())
      myMsgFac () ("bopEntryIndexRangeSmsg",
         bopEntryIndex,
         0,
         operationP ->bop ().nElements());
d573 1
a573 1
   retVal = myCompMgr ()->findBopEntry (operationP, bopEntryIndex);
d575 1
a575 1
   witAssert (retVal != NULL);
d577 1
a577 1
   myInputID ()->setMyBopEntry (retVal);
d579 2
a580 2
   return retVal;
   }
@


1.59
log
@Alterations to allow compilation with the GCC 4.3.2 compiler.
@
text
@d22 1
a22 1
#include <Opn.h>
@


1.58
log
@Stochastic Implosion.
@
text
@d31 2
@


1.57
log
@Stochastic implosion.
@
text
@d80 2
@


1.56
log
@Stochastic implosion.
@
text
@a79 2
   forbidAddStochAct ("bopEntryFrag");

@


1.55
log
@witCopy<Object>Data
@
text
@d80 2
@


1.54
log
@witCopy<Object>Data
@
text
@d88 1
a88 1
      const char * dupProducingOperationName,
d91 1
a91 1
      const char * origProducingOperationName,
d100 1
a100 1
      dupProducingOperationName,
d107 1
a107 1
      origProducingOperationName,
@


1.53
log
@witCopy<Object>Data
@
text
@d106 1
a106 1
      this,
@


1.52
log
@External opt implosion.
@
text
@d28 1
d87 32
@


1.51
log
@App controlled opt implosion.
@
text
@d59 2
d92 2
d95 2
a96 1
      curItrDelCompForGet (WitAT_BOP_ENTRY, "bopEntryFrag")->thisBopEnt ();
d129 2
d167 1
a167 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d179 1
a179 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d194 1
a194 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d208 1
a208 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d220 1
a220 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d232 1
a232 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d246 2
d275 1
a275 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d287 1
a287 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d302 1
a302 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d314 1
a314 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d326 1
a326 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d338 2
d360 1
a360 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d372 1
a372 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d390 1
a390 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d408 1
a408 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d420 1
a420 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d438 1
a438 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d452 2
d479 1
a479 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d494 1
a494 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
d506 1
a506 1
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);
@


1.50
log
@App controlled opt implosion.
@
text
@d20 1
d189 1
a189 1
   myProblem ()->preprocess ();
@


1.49
log
@App controlled opt implosion.
@
text
@a54 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a86 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a108 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a120 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a144 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a158 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a170 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a185 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a199 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a211 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a223 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a235 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a264 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a276 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a291 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a303 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a315 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a327 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a347 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a359 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a377 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a395 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a407 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a425 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a437 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a464 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a479 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a491 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

@


1.48
log
@GPIP migration.
@
text
@d55 4
d91 4
d117 4
d133 4
d161 4
d179 4
d195 4
d214 4
d232 4
d248 4
d264 4
d280 4
d313 4
d329 4
d348 4
d364 4
d380 4
d396 4
d420 4
d436 4
d458 4
d480 4
d496 4
d518 4
d534 4
d565 4
d584 4
d600 4
@


1.47
log
@Updated the copyright date on all source files.
@
text
@a230 12
void WitRun::witGetBopEntryPipShare (
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitOVRealArg & pipShare)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);

   apiGet (pipShare, "pipShare", theCall.myBopEnt ()->pipShare ());
   }

//------------------------------------------------------------------------------

a432 15
void WitRun::witSetBopEntryPipShare (
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitIVRealArg & pipShare)
   {
   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);

   theCall.prepNonNegDblVec ("pipShare", pipShare);

   if (theCall.argsOK ())
      theCall.myBopEnt ()->setPipShare (pipShare);
   }

//------------------------------------------------------------------------------

@


1.46
log
@[multi-thread]:
   Moved PROLOG/EPILOG responsibility from the inner layer of the API
   to the outer layer.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.45
log
@[exceptions]
@
text
@a16 1
#include <ProEpilog.h>
d51 1
a51 1
WitReturnCode WitRun::witAddBopEntry (
a57 2
   PROLOG ("witAddBopEntry");

a78 2

   EPILOG;
d83 1
a83 1
WitReturnCode WitRun::witGetObjItrBopEntry (
a88 2
   PROLOG ("witGetObjItrBopEntry");

a99 2

   EPILOG;
d104 1
a104 1
WitReturnCode WitRun::witGetBopEntryAppData (
a108 2
   PROLOG ("witGetBopEntryAppData");

a111 2

   EPILOG;
d116 1
a116 1
WitReturnCode WitRun::witGetBopEntryByProduct (
a120 2
   PROLOG ("witGetBopEntryByProduct");

a135 2

   EPILOG;
d140 1
a140 1
WitReturnCode WitRun::witGetBopEntryEarliestPeriod (
a144 2
   PROLOG ("witGetBopEntryEarliestPeriod");

a149 2

   EPILOG;
d154 1
a154 1
WitReturnCode WitRun::witGetBopEntryExpAllowed (
a158 2
   PROLOG ("witGetBopEntryExpAllowed");

a161 2

   EPILOG;
d166 1
a166 1
WitReturnCode WitRun::witGetBopEntryExpAversion (
a170 2
   PROLOG ("witGetBopEntryExpAversion");

a176 2

   EPILOG;
d181 1
a181 1
WitReturnCode WitRun::witGetBopEntryImpactPeriod (
a185 2
   PROLOG ("witGetBopEntryImpactPeriod");

a190 2

   EPILOG;
d195 1
a195 1
WitReturnCode WitRun::witGetBopEntryLatestPeriod (
a199 2
   PROLOG ("witGetBopEntryLatestPeriod");

a202 2

   EPILOG;
d207 1
a207 1
WitReturnCode WitRun::witGetBopEntryMeSelSplit (
a211 2
   PROLOG ("witGetBopEntryMeSelSplit");

a214 2

   EPILOG;
d219 1
a219 1
WitReturnCode WitRun::witGetBopEntryOffset (
a223 2
   PROLOG ("witGetBopEntryOffset");

a226 2

   EPILOG;
d231 1
a231 1
WitReturnCode WitRun::witGetBopEntryPipShare (
a235 2
   PROLOG ("witGetBopEntryPipShare");

a238 2

   EPILOG;
d243 1
a243 1
WitReturnCode WitRun::witGetBopEntryProdRate (
a247 2
   PROLOG ("witGetBopEntryProdRate");

a267 2

   EPILOG;
d272 1
a272 1
WitReturnCode WitRun::witGetBopEntryProductRate (
a276 2
   PROLOG ("witGetBopEntryProductRate");

a279 2

   EPILOG;
d284 1
a284 1
WitReturnCode WitRun::witGetBopEntryProducedPart (
a288 2
   PROLOG ("witGetBopEntryProducedPart");

a294 2

   EPILOG;
d299 1
a299 1
WitReturnCode WitRun::witGetBopEntryRoutingShare (
a303 2
   PROLOG ("witGetBopEntryRoutingShare");

a306 2

   EPILOG;
d311 1
a311 1
WitReturnCode WitRun::witGetBopEntrySelForDel (
a315 2
   PROLOG ("witGetBopEntrySelForDel");

a318 2

   EPILOG;
d323 1
a323 1
WitReturnCode WitRun::witSetBopEntryAppData (
a327 2
   PROLOG ("witSetBopEntryAppData");

a330 2

   EPILOG;
d335 1
a335 1
WitReturnCode WitRun::witSetBopEntryByProduct (
a339 2
   PROLOG ("witSetBopEntryByProduct");

a350 2

   EPILOG;
d355 1
a355 1
WitReturnCode WitRun::witSetBopEntryEarliestPeriod (
a359 2
   PROLOG ("witSetBopEntryEarliestPeriod");

a362 2

   EPILOG;
d367 1
a367 1
WitReturnCode WitRun::witSetBopEntryExpAllowed (
a371 2
   PROLOG ("witSetBopEntryExpAllowed");

a380 2

   EPILOG;
d385 1
a385 1
WitReturnCode WitRun::witSetBopEntryExpAversion (
a389 2
   PROLOG ("witSetBopEntryExpAversion");

a398 2

   EPILOG;
d403 1
a403 1
WitReturnCode WitRun::witSetBopEntryLatestPeriod (
a407 2
   PROLOG ("witSetBopEntryLatestPeriod");

a410 2

   EPILOG;
d415 1
a415 1
WitReturnCode WitRun::witSetBopEntryMeSelSplit (
a419 2
   PROLOG ("witSetBopEntryMeSelSplit");

a428 2

   EPILOG;
d433 1
a433 1
WitReturnCode WitRun::witSetBopEntryOffset (
a437 2
   PROLOG ("witSetBopEntryOffset");

a440 2

   EPILOG;
d445 1
a445 1
WitReturnCode WitRun::witSetBopEntryPipShare (
a449 2
   PROLOG ("witSetBopEntryPipShare");

a455 2

   EPILOG;
d460 1
a460 1
WitReturnCode WitRun::witSetBopEntryProdRate (
a464 2
   PROLOG ("witSetBopEntryProdRate");

a482 2

   EPILOG;
d487 1
a487 1
WitReturnCode WitRun::witSetBopEntryProductRate (
a491 2
   PROLOG ("witSetBopEntryProductRate");

a497 2

   EPILOG;
d502 1
a502 1
WitReturnCode WitRun::witSetBopEntryRoutingShare (
a506 2
   PROLOG ("witSetBopEntryRoutingShare");

a509 2

   EPILOG;
d514 1
a514 1
WitReturnCode WitRun::witSetBopEntrySelForDel (
a518 2
   PROLOG ("witSetBopEntrySelForDel");

a521 2

   EPILOG;
@


1.44
log
@Vector PropRtg.
@
text
@d17 1
d19 1
d72 1
a72 1
   myInputId ()->setMyOperation (operationP);
d81 1
a81 1
   myInputId ()->setMyOperation (NULL);
d659 1
a659 1
   myInputId ()->setMyOperation (operationP);
d674 1
a674 1
   myInputId ()->setMyBopEntry (retVal);
@


1.43
log
@Vector PropRt.
@
text
@d297 1
a297 1
   double * productRateVal;
d310 1
a310 1
      & productRateVal);
d314 1
a314 1
   prodRate = productRateVal[0];
d316 1
a316 1
   free (productRateVal);
d570 1
a570 1
   WitTVec <double> & productRateVal = myApiMgr ()->reserveTempDblVec ();
d580 1
a580 1
   productRateVal = prodRate;
d585 1
a585 1
      productRateVal.myCVec ());
@


1.42
log
@Minor change.
@
text
@d22 4
a25 4
#include <InScalRA.h>
#include <OutScalRA.h>
#include <InVecRA.h>
#include <OutVecRA.h>
d192 1
a192 1
      const WitOutScalRA & expAversion)
d259 3
a261 3
      const char *        producingOperationName,
      int                 bopEntryIndex,
      const WitOutVecRA & offset)
d275 3
a277 3
      const char *        producingOperationName,
      int                 bopEntryIndex,
      const WitOutVecRA & pipShare)
d293 1
a293 1
      const WitOutScalRA & prodRate)
d324 3
a326 3
      const char *        producingOperationName,
      int                 bopEntryIndex,
      const WitOutVecRA & productRate)
d359 3
a361 3
      const char *        producingOperationName,
      int                 bopEntryIndex,
      const WitOutVecRA & routingShare)
d469 3
a471 3
      const char *        producingOperationName,
      int                 bopEntryIndex,
      const WitInScalRA & expAversion)
d529 3
a531 3
      const char *       producingOperationName,
      int                bopEntryIndex,
      const WitInVecRA & offset)
d545 3
a547 3
      const char *       producingOperationName,
      int                bopEntryIndex,
      const WitInVecRA & pipShare)
d564 3
a566 3
      const char *        producingOperationName,
      int                 bopEntryIndex,
      const WitInScalRA & prodRate)
d595 3
a597 3
      const char *       producingOperationName,
      int                bopEntryIndex,
      const WitInVecRA & productRate)
d614 3
a616 3
      const char *       producingOperationName,
      int                bopEntryIndex,
      const WitInVecRA & routingShare)
@


1.41
log
@PIP.
@
text
@a25 1
#include <wit.h>
@


1.40
log
@Removed portableFree.
@
text
@d276 3
a278 3
      const char *         producingOperationName,
      int                  bopEntryIndex,
      const WitOutScalRA & pipShare)
d284 1
a284 4
   apiGet (
      pipShare,
      "pipShare",
      theCall.myBopEnt ()->pipShare ());
d546 3
a548 3
      const char *        producingOperationName,
      int                 bopEntryIndex,
      const WitInScalRA & pipShare)
d554 1
a554 4
   theCall.prepDouble (
      "pipShare", 
      theCall.myBopEnt ()->pipShare (),
      pipShare);
@


1.39
log
@Continued implementation of PIP.
@
text
@d320 1
a320 1
   portableFree (productRateVal);
@


1.38
log
@Double Precision.
@
text
@d275 19
d542 22
@


1.37
log
@Double Precision.
@
text
@d299 1
a299 1
   prodRate.setTo (productRateVal[0]);
d546 1
a546 1
   productRateVal.setToScalar (prodRate);
@


1.36
log
@Double Precision.
@
text
@d276 3
a278 3
      const char * producingOperationName,
      int          bopEntryIndex,
      float *      prodRate)
d282 1
a282 1
   float * productRateVal;
d299 1
a299 1
   * prodRate = productRateVal[0];
d530 3
a532 3
      const char * producingOperationName,
      int          bopEntryIndex,
      float        prodRate)
d536 1
a536 1
   WitTVec <float> & productRateVal = myApiMgr ()->reserveTempFloatVec ();
@


1.35
log
@Double Precision.
@
text
@d25 1
d260 3
a262 3
      const char * producingOperationName,
      int          bopEntryIndex,
      float * *    offset)
d309 3
a311 3
      const char * producingOperationName,
      int          bopEntryIndex,
      float * *    productRate)
d344 3
a346 3
      const char * producingOperationName,
      int          bopEntryIndex,
      float * *    routingShare)
@


1.34
log
@Double Precision.
@
text
@d24 1
d513 3
a515 3
      const char * producingOperationName,
      int          bopEntryIndex,
      const float * offset)
d560 3
a562 3
      const char *   producingOperationName,
      int            bopEntryIndex,
      const float * productRate)
d579 3
a581 3
      const char *  producingOperationName,
      int           bopEntryIndex,
      const float * routingShare)
@


1.33
log
@Double Precision.
@
text
@d567 1
a567 1
   theCall.prepNonNegFloatVec ("productRate", productRate);
@


1.32
log
@Double Precision.
@
text
@d189 3
a191 3
      const char * producingOperationName,
      int          bopEntryIndex,
      WitOutScalRA expAversion)
@


1.31
log
@Double Precision.
@
text
@d452 3
a454 3
      const char * producingOperationName,
      int          bopEntryIndex,
      WitInScalRA  expAversion)
@


1.30
log
@Double Precision.
@
text
@d444 1
a444 1
      theCall.myBopEnt ()->setExpAllowed (expAllowed);
d504 1
a504 1
      theCall.myBopEnt ()->setMeSelSplit (meSelSplit);
@


1.29
log
@Double Precision.
@
text
@d129 1
a129 1
      witBoolean * byProduct)
d133 1
a133 1
   witBoolean expAllowedVal;
d175 1
a175 1
      witBoolean * expAllowed)
d244 1
a244 1
      witBoolean * meSelSplit)
d360 1
a360 1
      witBoolean * selForDel)
@


1.28
log
@Double Precision.
@
text
@d549 1
a549 1
      productRateVal.myCvector ());
@


1.27
log
@Continued double precision.
@
text
@d191 1
a191 1
      OutScalRA    expAversion)
d454 1
a454 1
      InScalRA     expAversion)
@


1.26
log
@Continued double precision.
@
text
@d22 2
a23 2
#include <RealSInArg.h>
#include <RealSOutArg.h>
d191 1
a191 1
      RealSOutArg  expAversion)
d454 1
a454 1
      RealSInArg   expAversion)
@


1.25
log
@Continued double precision.
@
text
@d22 1
d454 1
a454 1
      float        expAversion)
d466 1
a466 1
      theCall.myBopEnt ()->setExpAversion (static_cast <double> (expAversion));
@


1.24
log
@Continued double precision.
@
text
@d22 1
a22 1
#include <RealOutArg.h>
d190 1
a190 1
      RealOutArg   expAversion)
@


1.23
log
@Continued double precision.
@
text
@d22 1
d190 1
a190 1
      float *      expAversion)
@


1.22
log
@Continued double precision.
@
text
@d458 1
a458 1
   theCall.prepStrDbl (
d464 1
a464 1
      theCall.myBopEnt ()->setExpAversion (StrDbl::convFloat (expAversion));
@


1.21
log
@Continued double precision.
@
text
@d464 1
a464 1
      theCall.myBopEnt ()->setExpAversion (floatToStrDbl (expAversion));
@


1.20
log
@Continued double precision.
@
text
@d458 1
a458 1
   theCall.prepDouble (
d464 1
a464 1
      theCall.myBopEnt ()->setExpAversion (floatToDouble (expAversion));
@


1.19
log
@Removed a bad function overload.
@
text
@d195 4
a198 1
   apiGet (expAversion, "expAversion", theCall.myBopEnt ()->expAversion ());
d452 1
a452 1
      float expAversion)
d458 4
a461 4
   theCall.prepFloat (
                          "expAversion", 
      theCall.myBopEnt ()->expAversion (), 
                           expAversion);
d464 1
a464 1
      theCall.myBopEnt ()->setExpAversion (expAversion);
@


1.18
log
@Changed the routingShare attributes from scalars to vectors.
@
text
@d92 1
a92 1
      curItrDelCompForGet (WitAT_BOP_ENTRY, "bopEntryFrag")->myBopEnt ();
@


1.17
log
@Continued implementation of proportionate routing.
@
text
@d339 1
a339 1
      float *      routingShare)
d573 3
a575 3
      const char * producingOperationName,
      int          bopEntryIndex,
      float        routingShare)
@


1.16
log
@Continued implementation of proportionate routing.
@
text
@a201 16
WitReturnCode WitRun::witGetBopEntryExpShare (
      const char * producingOperationName,
      int          bopEntryIndex,
      float *      expShare)
   {
   PROLOG ("witGetBopEntryExpShare");

   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);

   apiGet (expShare, "expShare", theCall.myBopEnt ()->expShare ());

   EPILOG;
   }

//------------------------------------------------------------------------------

d336 16
a467 16
WitReturnCode WitRun::witSetBopEntryExpShare (
      const char * producingOperationName,
      int          bopEntryIndex,
      float        expShare)
   {
   PROLOG ("witSetBopEntryExpShare");

   WitBopEntryApiCall theCall (this, producingOperationName, bopEntryIndex);

   theCall.setExpShare (expShare);

   EPILOG;
   }

//------------------------------------------------------------------------------

d566 16
@


1.15
log
@Continued implementation of proportionate routing.
@
text
@d91 2
a92 2
   curItrDelCompForGet (WitAT_BOP_ENTRY, "bopEntryFrag")->
      getBopEntry (theBopEnt);
@


1.14
log
@Began implementation of Proportionate Routing.
@
text
@d202 1
a202 1
WitReturnCode WitRun::witGetBopEntryExpFactor (
d205 1
a205 1
      float *      expFactor)
d207 1
a207 1
   PROLOG ("witGetBopEntryExpFactor");
d211 1
a211 1
   apiGet (expFactor, "expFactor", theCall.myBopEnt ()->expFactor ());
d468 1
a468 1
WitReturnCode WitRun::witSetBopEntryExpFactor (
d471 1
a471 1
      float        expFactor)
d473 1
a473 1
   PROLOG ("witSetBopEntryExpFactor");
d477 1
a477 1
   theCall.setExpFactor (expFactor);
@


1.13
log
@Internal changes.
@
text
@d202 16
d462 16
@


1.12
log
@Internal changes.
@
text
@d145 1
a145 1
   apiGet (byProduct, "byProduct", ! expAllowedVal);
d385 1
a385 1
      ! byProduct);
d589 1
a589 1
   if (bopEntryIndex < 0 || bopEntryIndex >= operationP->bop ().nElements())
@


1.11
log
@Preliminary work on single source.
@
text
@d127 1
a127 1
      WitBoolean * byProduct)
d131 1
a131 1
   WitBoolean expAllowedVal;
d173 1
a173 1
      WitBoolean * expAllowed)
d239 1
a239 1
      WitBoolean * meSelSplit)
d339 1
a339 1
      WitBoolean * selForDel)
d417 1
a417 1
   theCall.prepBoolean (
d477 1
a477 1
   theCall.prepBoolean (
@


1.10
log
@Continued preliminary work on single source.
@
text
@d523 1
a523 1
   productRateVal.setTo (prodRate);
@


1.9
log
@Continued implementation of object iteration.
@
text
@d513 1
a513 1
   WitTVec (float) & productRateVal = myApiMgr ()->reserveTempFloatVec ();
d523 1
a523 1
   productRateVal = prodRate;
@


1.8
log
@Continued implementation of object iteration.
@
text
@d83 1
a83 1
WitReturnCode WitRun::witGetItrBopEntry (
d89 1
a89 1
   PROLOG ("witGetItrBopEntry");
@


1.7
log
@Began implementation of object iteration.
@
text
@d22 1
d77 25
@


1.6
log
@Refactoring for constrained stock reallocation.
@
text
@d11 1
a11 1
// Source file: "bopApi.c"
d18 1
d20 3
a22 1
#include <ApiCall.h>
@


1.5
log
@Continued development of selection splitting for multi-exec.
@
text
@d88 1
a88 1
   apiGet (appData, "appData", theCall ()->appData ());
d132 3
a134 1
   apiGet (earliestPeriod, "earliestPeriod", theCall ()->earliestPeriod ());
d150 1
a150 1
   apiGet (expAllowed, "expAllowed", theCall ()->expAllowed ());
d166 1
a166 1
   apiGet (expAversion, "expAversion", theCall ()->expAversion ());
d184 1
a184 1
   apiGet (impactPeriod, "impactPeriod", theCall ()->impactPeriod ());
d200 1
a200 1
   apiGet (latestPeriod, "latestPeriod", theCall ()->latestPeriod ());
d216 1
a216 1
   apiGet (meSelSplit, "meSelSplit", theCall ()->meSelSplit ());
d232 1
a232 1
   apiGet (offset, "offset", theCall ()->offset ());
d281 1
a281 1
   apiGet (productRate, "productRate", theCall ()->productRate ());
d297 4
a300 1
   apiGet (producedPartName, "producedPartName", theCall ()->myPartName ());
d316 1
a316 1
   apiGet (selForDel, "selForDel", theCall ()->selForDel ());
d388 4
a391 1
   theCall.prepBoolean ("expAllowed", theCall ()->expAllowed (), expAllowed);
d394 1
a394 1
      theCall ()->setExpAllowed (expAllowed);
d410 4
a413 1
   theCall.prepFloat ("expAversion", theCall ()->expAversion (), expAversion);
d416 1
a416 1
      theCall ()->setExpAversion (expAversion);
d448 4
a451 1
   theCall.prepBoolean ("meSelSplit", theCall ()->meSelSplit (), meSelSplit);
d454 1
a454 1
      theCall ()->setMeSelSplit (meSelSplit);
d520 1
a520 1
      theCall ()->setProductRate (productRate);
@


1.4
log
@Added meSelSplitOK development parameter.
Added meSelSplit attribute.
Refactoring for sel-split for multi-exec.
@
text
@a436 3
   if (! myGlobalComp ()->meSelSplitOK ())
      myMsgFac () ("meSelSplitNotOKSmsg");

@


1.3
log
@Replaced some scalar attributes with vector attributes:

   BOM entry  usageRate ==> consRate
   substitute usageRate ==> consRate
   BOP entry  prodRate  ==> productRate
@
text
@d205 16
d422 22
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d228 33
d263 1
a263 1
   apiGet (prodRate, "prodRate", theCall ()->prodRate ());
d435 31
d468 1
a468 1
   theCall.prepNonNegFloat ("prodRate", theCall ()->prodRate (), prodRate);
d471 1
a471 1
      theCall ()->setProdRate (prodRate);
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
