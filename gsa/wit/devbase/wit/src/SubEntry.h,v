head	1.74;
access;
symbols
	sce_5_01_20080919:1.61
	latest_sce_4_20_20060523:1.30.0.2
	sce_4_20_20060523:1.30
	latest_sce4_20_OSL:1.29.0.2
	sce_4_20_OSL:1.29
	sce_410_withVa:1.28
	sce_4_05_20040511:1.26
	sce_4_00_20040201:1.18
	nextGenBranch:1.17.0.2
	nextGenRoot:1.17
	sce_3_30_20030627:1.17
	EndRw-branch:1.14.0.4
	Root-of-EndRw:1.14
	rwToStl:1.14.0.2
	latest_sce_3_10_20010924:1.6.0.2
	sce_3_10_20010924:1.6
	latest_sce_3_00_20010601:1.5.0.4
	sce_3_00_20010601:1.5
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.74
date	2011.09.28.23.50.35;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2011.09.24.00.28.50;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2011.08.30.20.18.19;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2010.01.06.20.42.41;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2010.01.06.20.10.32;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2009.12.30.20.02.28;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2009.12.30.18.46.37;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2009.12.30.18.30.37;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2009.12.29.22.53.17;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2009.12.29.21.59.14;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2009.12.25.00.10.48;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2009.12.21.20.35.47;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2009.11.13.19.01.26;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2008.02.25.19.37.57;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2007.12.11.22.00.29;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2007.11.14.17.18.55;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2007.11.13.23.02.17;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2007.11.13.20.17.40;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2007.11.12.20.27.37;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2007.11.09.00.40.48;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2007.10.15.21.50.36;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2007.10.02.18.32.44;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2007.09.11.18.55.20;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2007.09.11.18.09.18;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2007.06.08.18.09.41;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2007.05.25.18.39.11;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2007.05.24.18.52.22;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2007.05.22.15.46.53;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2007.05.14.19.05.40;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2007.05.14.16.18.39;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2007.05.11.20.43.56;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2007.05.10.21.58.11;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2007.05.10.21.14.42;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2007.05.10.17.22.15;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2007.05.04.23.27.12;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2007.04.26.21.32.27;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2007.04.03.22.04.05;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2007.02.28.20.04.59;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2007.02.27.19.59.33;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2007.02.10.00.08.15;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2007.01.15.22.25.30;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2006.10.12.20.48.11;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2006.08.17.22.50.38;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2006.08.16.15.49.18;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2006.05.02.17.34.14;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2005.09.30.21.57.57;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2005.06.13.16.48.47;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2005.02.24.23.23.57;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2004.04.01.21.05.12;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2004.03.31.22.56.08;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2004.03.24.22.21.33;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2004.03.23.19.14.26;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.03.10.22.53.22;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.03.05.22.19.59;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2004.02.12.19.13.40;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2004.02.06.00.17.33;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.11.11.18.29.15;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.03.19.16.48.29;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.02.13.23.06.34;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.01.02.22.18.53;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.05.19.31.37;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.06.03.22.35.22;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.03.16.01.52;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.29.14.32.42;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.28.19.44.59;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.08.19.21.56;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.25.19.14.53;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.22.14.32.14;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.01.19.23.36;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.22.23.11.49;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.21.20.03.28;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.29.21.22.47;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.57.00;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.30;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.30;	author wit;	state Exp;
branches;
next	;


desc
@@


1.74
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef SubEntryH
#define SubEntryH

//------------------------------------------------------------------------------
// Header file: "SubEntry.h"
//
// Contains the declaration of the class SubEntry
//------------------------------------------------------------------------------

#include <BomEntry.h>
#include <ObjVec.h>

//------------------------------------------------------------------------------
// class SubEntry: "Substitute Bill-Of-Manufacturing Entry"
// An BillEntry representing the consumption of a Part in the execution of a
// Operation, as a substitute for the "normal" Part consumed. Each SubEntry
// theSub for BomEntry theSub->myBomEnt () represents the option to consume a
// different part, theSub->myPart (), in place of the "normal" part
// consumed theSub->myBomEnt ()->myPart (), in the execution of
// Operation theSub->myBomEnt ()->myOperation (). Typically, most BomEntries
// will have no SubEntries.
//
// Class Hierarchy:
//
// ProbAssoc
//    Component
//       DelComp
//          BillEntry
//             ConsEntry
//                SubEntry
//------------------------------------------------------------------------------

class WitSubEntry: public WitConsEntry
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSubEntry (WitBomEntry * theBomEnt, WitPart * thePart);
         //
         // myBomEnt_ <-- theBomEnt.
         // ConsEntry <<< thePart.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSubEntry ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitBomEntry *,         myBomEnt)
      accessFunc (bool,                  intSubVols)
      accessFunc (bool,                  expAllowed)
      accessFunc (bool,                  netAllowed)
      accessFunc (bool,                  mrpNetAllowed)
      accessFunc (double,                expNetAversion)
      accessFunc (const WitDblFlexVec &, subVol)
      accessFunc (const WitDblFlexVec &, mrpSubVol)
      accessFunc (const WitDblFlexVec &, fssSubVol)

      inline const WitDblFlexVec & subCost () const
         {
         return subCost_.curDblFlexVec ();
         }

      inline WitOperation * myOperation ()
         {
         return myBomEnt ()->myOperation ();
         }

      inline int myBomEntIndex ()
         {
         return myBomEnt ()->localIndex ();
         }

      virtual const WitDblFlexVec & offset ();
         //
         // Override from class BillEntry.

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitSubEntry)

      static int nInstances (WitProblem *);

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (double defSubCost,        0.0)
      defaultValue (bool   defIntSubVols,     false)
      defaultValue (bool   defExpAllowed,     true)
      defaultValue (bool   defNetAllowed,     true)
      defaultValue (bool   defMrpNetAllowed,  false)
      defaultValue (double defExpNetAversion, 0.0)
      defaultValue (double defSubVol,         0.0)

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setSubCost        (const WitIVRealArg &);
      void setIntSubVols     (bool);
      void setExpAllowed     (bool);
      void setNetAllowed     (bool);
      void setMrpNetAllowed  (bool);
      void setExpNetAversion (double);
      void setSubVol         (const WitIVRealArg &);

      //------------------------------------------------------------------------
      // store<Activity><Attr> functions.
      // Each of these functions sets the value of indicated attribute to the
      // value of the argument.
      // Each function is only valid when the indicated activity is being
      // performed.
      //------------------------------------------------------------------------

      void storeHeurSubVol (WitPeriod, double);
         //
         // Valid only when heuristic allocation is updating the solution.

      void storeOptSubVol (WitPeriod, double);
         //
         // Valid only when the optimizing implosion subsystem is uploading the
         // solution.

      void storeStochSubCost (const WitDblFlexVec &);
      void storeStochSubVol  (const WitDblFlexVec &);
         //
         // Valid only when the stochastic implosion subsystem is uploading
         // data.

      void storeMrpMrpSubVol (const WitTVec <double> &);
         //
         // Valid only when the MRP subsystem is uploading the MRP solution.

      void storeFssFssSubVol (const WitTVec <double> &);
         //
         // Valid only when the FSS subsystem is uploading the FSS solution.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual bool          inserted          ();
      virtual void          writeMultiObjVecs (WitObjective *);
      virtual void          identifyInstance  ();
      virtual void          writeSetClause    ();
      virtual void          copySelfInto      (WitCompMgr *);
      virtual void          recount           ();
      virtual void          clearOptSoln      ();
      virtual void          clearStochSoln    ();
      virtual WitSubEntry * thisSub           ();
         //
         // Override from class Component.

      virtual WitMsgFrag objTypeMsgFrag ();
      virtual WitAttr    apiObjItrState ();
         //
         // Overrides from class DelComp.

      virtual bool storesOffset ();
         //
         // Override from class BillEntry.

      virtual void writeSolnData ();
         //
         // Override from class Component.
         // Writes the section of the solution data file for this SubEntry.

      void copyAttrsFrom (WitSubEntry * theSub);
         //
         // Copies the input attributes of theSub into this SubEntry.

      void display ();
         //
         // Displays the input and preprocessing data for this SubEntry.

      void clearSubVolForHeur ();
         //
         // Clears subVol_.
         // Valid only when heuristic allocation is updating the solution.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitSubEntry);

      virtual WitOperation * derivedOperation ();
         //
         // Override from class BillEntry.

      virtual WitBomEntry * derivedBomEntry ();
         //
         // Override from class ConsEntry.

      virtual void writeDataID ();
         //
         // Override from class Component.

      virtual void writeDataAttrs ();
         //
         // Override from class Component.

      virtual void findPrereqs (WitDelComp * & prereq1, WitDelComp * & prereq2);
         //
         // Override from class DelComp.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Data set by the constructor.
      //------------------------------------------------------------------------

      int mappingIndex_;
         //
         // Mapping index: see Mapping.h.
         // == # SubEntries constructed before this one.

      WitBomEntry * const myBomEnt_;
         //
         // The BomEntry for which this SubEntry is substituting.

      //------------------------------------------------------------------------
      // Input data.
      //------------------------------------------------------------------------

      WitObjVec subCost_;
         //
         // Stores the cost coefficients of the substitution variables for this
         // Substitute.
         // Range: (-inf, +inf).

      bool intSubVols_;
         //
         // If true, then in optimizing implosion, subVol_ will be constrained
         // to take on integer values in all periods.

      bool expAllowed_;
         //
         // This SubEntry is allowed to be used for explosion by multi-route
         // implosion/allocation, iff expAllowed_ is true.

      bool netAllowed_;
         //
         // This SubEntry is allowed to be used for netting by
         // implosion/allocation, iff netAllowed_ is true.

      bool mrpNetAllowed_;
         //
         // Same as netAllowed_, but for MRP and FSS.

      double expNetAversion_;
         //
         // "Explosion / Netting Aversion":
         // SubEntries with lower expNetAversion are preferred for explosion and
         // netting over those with higher expNetAversion.

      WitDblFlexVec subVol_;
         //
         // subVol[thePer] is the amount of myOperation that was executed
         // in period thePer, using this SubEntry.
         // Normally, this is set by implosion, but it can also be set as
         // input.
         // Range: [0.0, +inf),

      //------------------------------------------------------------------------
      // Data set by MRP.
      //------------------------------------------------------------------------

      WitDblFlexVec mrpSubVol_;
         //
         // subVol for MRP.

      //------------------------------------------------------------------------
      // Data set by FSS.
      //------------------------------------------------------------------------

      WitDblFlexVec fssSubVol_;
         //
         // subVol for FSS.
   };

#endif
@


1.73
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.72
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d43 2
a44 168
{
public:

//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitSubEntry (WitBomEntry * theBomEnt, WitPart * thePart);
//
// myBomEnt_ <-- theBomEnt.
// ConsEntry <<< thePart.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitSubEntry ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitBomEntry *,         myBomEnt)
accessFunc (bool,                  intSubVols)
accessFunc (bool,                  expAllowed)
accessFunc (bool,                  netAllowed)
accessFunc (bool,                  mrpNetAllowed)
accessFunc (double,                expNetAversion)
accessFunc (const WitDblFlexVec &, subVol)
accessFunc (const WitDblFlexVec &, mrpSubVol)
accessFunc (const WitDblFlexVec &, fssSubVol)

inline const WitDblFlexVec & subCost () const
{
return subCost_.curDblFlexVec ();
}

inline WitOperation * myOperation ()
{
return myBomEnt ()->myOperation ();
}

inline int myBomEntIndex ()
{
return myBomEnt ()->localIndex ();
}

virtual const WitDblFlexVec & offset ();
//
// Override from class BillEntry.

//------------------------------------------------------------------------
// Mapping functions
//------------------------------------------------------------------------

decMappingIndex (WitSubEntry)

static int nInstances (WitProblem *);

//------------------------------------------------------------------------
// Default value functions.
//------------------------------------------------------------------------

defaultValue (double defSubCost,        0.0)
defaultValue (bool   defIntSubVols,     false)
defaultValue (bool   defExpAllowed,     true)
defaultValue (bool   defNetAllowed,     true)
defaultValue (bool   defMrpNetAllowed,  false)
defaultValue (double defExpNetAversion, 0.0)
defaultValue (double defSubVol,         0.0)

//------------------------------------------------------------------------
// "Set" functions.
//------------------------------------------------------------------------

void setSubCost        (const WitIVRealArg &);
void setIntSubVols     (bool);
void setExpAllowed     (bool);
void setNetAllowed     (bool);
void setMrpNetAllowed  (bool);
void setExpNetAversion (double);
void setSubVol         (const WitIVRealArg &);

//------------------------------------------------------------------------
// store<Activity><Attr> functions.
// Each of these functions sets the value of indicated attribute to the
// value of the argument.
// Each function is only valid when the indicated activity is being
// performed.
//------------------------------------------------------------------------

void storeHeurSubVol (WitPeriod, double);
//
// Valid only when heuristic allocation is updating the solution.

void storeOptSubVol (WitPeriod, double);
//
// Valid only when the optimizing implosion subsystem is uploading the
// solution.

void storeStochSubCost (const WitDblFlexVec &);
void storeStochSubVol  (const WitDblFlexVec &);
//
// Valid only when the stochastic implosion subsystem is uploading
// data.

void storeMrpMrpSubVol (const WitTVec <double> &);
//
// Valid only when the MRP subsystem is uploading the MRP solution.

void storeFssFssSubVol (const WitTVec <double> &);
//
// Valid only when the FSS subsystem is uploading the FSS solution.

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

virtual bool          inserted          ();
virtual void          writeMultiObjVecs (WitObjective *);
virtual void          identifyInstance  ();
virtual void          writeSetClause    ();
virtual void          copySelfInto      (WitCompMgr *);
virtual void          recount           ();
virtual void          clearOptSoln      ();
virtual void          clearStochSoln    ();
virtual WitSubEntry * thisSub           ();
//
// Override from class Component.

virtual WitMsgFrag objTypeMsgFrag ();
virtual WitAttr    apiObjItrState ();
//
// Overrides from class DelComp.

virtual bool storesOffset ();
//
// Override from class BillEntry.

virtual void writeSolnData ();
//
// Override from class Component.
// Writes the section of the solution data file for this SubEntry.

void copyAttrsFrom (WitSubEntry * theSub);
//
// Copies the input attributes of theSub into this SubEntry.

void display ();
//
// Displays the input and preprocessing data for this SubEntry.

void clearSubVolForHeur ();
//
// Clears subVol_.
// Valid only when heuristic allocation is updating the solution.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitSubEntry);
d46 262
a307 96
virtual WitOperation * derivedOperation ();
//
// Override from class BillEntry.

virtual WitBomEntry * derivedBomEntry ();
//
// Override from class ConsEntry.

virtual void writeDataID ();
//
// Override from class Component.

virtual void writeDataAttrs ();
//
// Override from class Component.

virtual void findPrereqs (WitDelComp * & prereq1, WitDelComp * & prereq2);
//
// Override from class DelComp.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Data set by the constructor.
//------------------------------------------------------------------------

int mappingIndex_;
//
// Mapping index: see Mapping.h.
// == # SubEntries constructed before this one.

WitBomEntry * const myBomEnt_;
//
// The BomEntry for which this SubEntry is substituting.

//------------------------------------------------------------------------
// Input data.
//------------------------------------------------------------------------

WitObjVec subCost_;
//
// Stores the cost coefficients of the substitution variables for this
// Substitute.
// Range: (-inf, +inf).

bool intSubVols_;
//
// If true, then in optimizing implosion, subVol_ will be constrained
// to take on integer values in all periods.

bool expAllowed_;
//
// This SubEntry is allowed to be used for explosion by multi-route
// implosion/allocation, iff expAllowed_ is true.

bool netAllowed_;
//
// This SubEntry is allowed to be used for netting by
// implosion/allocation, iff netAllowed_ is true.

bool mrpNetAllowed_;
//
// Same as netAllowed_, but for MRP and FSS.

double expNetAversion_;
//
// "Explosion / Netting Aversion":
// SubEntries with lower expNetAversion are preferred for explosion and
// netting over those with higher expNetAversion.

WitDblFlexVec subVol_;
//
// subVol[thePer] is the amount of myOperation that was executed
// in period thePer, using this SubEntry.
// Normally, this is set by implosion, but it can also be set as
// input.
// Range: [0.0, +inf),

//------------------------------------------------------------------------
// Data set by MRP.
//------------------------------------------------------------------------

WitDblFlexVec mrpSubVol_;
//
// subVol for MRP.

//------------------------------------------------------------------------
// Data set by FSS.
//------------------------------------------------------------------------

WitDblFlexVec fssSubVol_;
//
// subVol for FSS.
};
@


1.71
log
@Multi-objective mode
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d43 168
a210 2
   {
   public:
d212 96
a307 262
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSubEntry (WitBomEntry * theBomEnt, WitPart * thePart);
         //
         // myBomEnt_ <-- theBomEnt.
         // ConsEntry <<< thePart.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSubEntry ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitBomEntry *,         myBomEnt)
      accessFunc (bool,                  intSubVols)
      accessFunc (bool,                  expAllowed)
      accessFunc (bool,                  netAllowed)
      accessFunc (bool,                  mrpNetAllowed)
      accessFunc (double,                expNetAversion)
      accessFunc (const WitDblFlexVec &, subVol)
      accessFunc (const WitDblFlexVec &, mrpSubVol)
      accessFunc (const WitDblFlexVec &, fssSubVol)

      inline const WitDblFlexVec & subCost () const
         {
         return subCost_.curDblFlexVec ();
         }

      inline WitOperation * myOperation ()
         {
         return myBomEnt ()->myOperation ();
         }

      inline int myBomEntIndex ()
         {
         return myBomEnt ()->localIndex ();
         }

      virtual const WitDblFlexVec & offset ();
         //
         // Override from class BillEntry.

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitSubEntry)

      static int nInstances (WitProblem *);

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (double defSubCost,        0.0)
      defaultValue (bool   defIntSubVols,     false)
      defaultValue (bool   defExpAllowed,     true)
      defaultValue (bool   defNetAllowed,     true)
      defaultValue (bool   defMrpNetAllowed,  false)
      defaultValue (double defExpNetAversion, 0.0)
      defaultValue (double defSubVol,         0.0)

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setSubCost        (const WitIVRealArg &);
      void setIntSubVols     (bool);
      void setExpAllowed     (bool);
      void setNetAllowed     (bool);
      void setMrpNetAllowed  (bool);
      void setExpNetAversion (double);
      void setSubVol         (const WitIVRealArg &);

      //------------------------------------------------------------------------
      // store<Activity><Attr> functions.
      // Each of these functions sets the value of indicated attribute to the
      // value of the argument.
      // Each function is only valid when the indicated activity is being
      // performed.
      //------------------------------------------------------------------------

      void storeHeurSubVol (WitPeriod, double);
         //
         // Valid only when heuristic allocation is updating the solution.

      void storeOptSubVol (WitPeriod, double);
         //
         // Valid only when the optimizing implosion subsystem is uploading the
         // solution.

      void storeStochSubCost (const WitDblFlexVec &);
      void storeStochSubVol  (const WitDblFlexVec &);
         //
         // Valid only when the stochastic implosion subsystem is uploading
         // data.

      void storeMrpMrpSubVol (const WitTVec <double> &);
         //
         // Valid only when the MRP subsystem is uploading the MRP solution.

      void storeFssFssSubVol (const WitTVec <double> &);
         //
         // Valid only when the FSS subsystem is uploading the FSS solution.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual bool          inserted          ();
      virtual void          writeMultiObjVecs (WitObjective *);
      virtual void          identifyInstance  ();
      virtual void          writeSetClause    ();
      virtual void          copySelfInto      (WitCompMgr *);
      virtual void          recount           ();
      virtual void          clearOptSoln      ();
      virtual void          clearStochSoln    ();
      virtual WitSubEntry * thisSub           ();
         //
         // Override from class Component.

      virtual WitMsgFrag objTypeMsgFrag ();
      virtual WitAttr    apiObjItrState ();
         //
         // Overrides from class DelComp.

      virtual bool storesOffset ();
         //
         // Override from class BillEntry.

      virtual void writeSolnData ();
         //
         // Override from class Component.
         // Writes the section of the solution data file for this SubEntry.

      void copyAttrsFrom (WitSubEntry * theSub);
         //
         // Copies the input attributes of theSub into this SubEntry.

      void display ();
         //
         // Displays the input and preprocessing data for this SubEntry.

      void clearSubVolForHeur ();
         //
         // Clears subVol_.
         // Valid only when heuristic allocation is updating the solution.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitSubEntry);

      virtual WitOperation * derivedOperation ();
         //
         // Override from class BillEntry.

      virtual WitBomEntry * derivedBomEntry ();
         //
         // Override from class ConsEntry.

      virtual void writeDataID ();
         //
         // Override from class Component.

      virtual void writeDataAttrs ();
         //
         // Override from class Component.

      virtual void findPrereqs (WitDelComp * & prereq1, WitDelComp * & prereq2);
         //
         // Override from class DelComp.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Data set by the constructor.
      //------------------------------------------------------------------------

      int mappingIndex_;
         //
         // Mapping index: see Mapping.h.
         // == # SubEntries constructed before this one.

      WitBomEntry * const myBomEnt_;
         //
         // The BomEntry for which this SubEntry is substituting.

      //------------------------------------------------------------------------
      // Input data.
      //------------------------------------------------------------------------

      WitObjVec subCost_;
         //
         // Stores the cost coefficients of the substitution variables for this
         // Substitute.
         // Range: (-inf, +inf).

      bool intSubVols_;
         //
         // If true, then in optimizing implosion, subVol_ will be constrained
         // to take on integer values in all periods.

      bool expAllowed_;
         //
         // This SubEntry is allowed to be used for explosion by multi-route
         // implosion/allocation, iff expAllowed_ is true.

      bool netAllowed_;
         //
         // This SubEntry is allowed to be used for netting by
         // implosion/allocation, iff netAllowed_ is true.

      bool mrpNetAllowed_;
         //
         // Same as netAllowed_, but for MRP and FSS.

      double expNetAversion_;
         //
         // "Explosion / Netting Aversion":
         // SubEntries with lower expNetAversion are preferred for explosion and
         // netting over those with higher expNetAversion.

      WitDblFlexVec subVol_;
         //
         // subVol[thePer] is the amount of myOperation that was executed
         // in period thePer, using this SubEntry.
         // Normally, this is set by implosion, but it can also be set as
         // input.
         // Range: [0.0, +inf),

      //------------------------------------------------------------------------
      // Data set by MRP.
      //------------------------------------------------------------------------

      WitDblFlexVec mrpSubVol_;
         //
         // subVol for MRP.

      //------------------------------------------------------------------------
      // Data set by FSS.
      //------------------------------------------------------------------------

      WitDblFlexVec fssSubVol_;
         //
         // subVol for FSS.
   };
@


1.70
log
@Multi-objective mode
@
text
@d81 1
a81 1
         return subCostObjVec_.curDblFlexVec ();
d253 1
a253 1
      WitObjVec subCostObjVec_;
@


1.69
log
@Multi-Objective Mode
@
text
@a69 1
      accessFunc (const WitObjVec &,     subCostObjVec)
@


1.68
log
@Multi-Objective Mode
@
text
@d70 1
@


1.67
log
@Multi-Objective Mode
@
text
@d255 1
a255 1
         // Stores the cost coefficients for the substitution variables for this
@


1.66
log
@Multi-Objective Mode
@
text
@d81 1
a81 1
         return subCost_.curDblFlexVec ();
d253 1
a253 1
      WitObjVec subCost_;
d255 2
a256 3
         // subCost ()[thePer] is the user-specified cost coef. on the
         // substitute variable for this Substitute for the current objective
         // in thePer.
@


1.65
log
@Multi-Objective Mode
@
text
@a69 1
      accessFunc (const WitDblFlexVec &, subCost)
d79 5
@


1.64
log
@Multi-Objective Mode
@
text
@d20 1
d161 9
a169 8
      virtual bool          inserted         ();
      virtual void          identifyInstance ();
      virtual void          writeSetClause   ();
      virtual void          copySelfInto     (WitCompMgr *);
      virtual void          recount          ();
      virtual void          clearOptSoln     ();
      virtual void          clearStochSoln   ();
      virtual WitSubEntry * thisSub          ();
d249 1
a249 1
      WitDblFlexVec subCost_;
d251 3
a253 2
         // subCost_[thePer] is the user-specified cost coef. on the substitute
         // variable for this Substitute in thePer.
@


1.63
log
@Removed some references to objective #1.
@
text
@d162 1
@


1.62
log
@Removing objective #2.
@
text
@d248 2
a249 3
         // If objective #1 is being used, then theSub->subCost_[thePer]
         // is the user-specified cost coef. on the substitute variable for
         // theSub in thePer.
@


1.61
log
@Object name change.
@
text
@a68 1
      accessFunc (double,                obj2SubPenalty)
a104 1
      defaultValue (double defObj2SubPenalty, 0.0)
a116 1
      void setObj2SubPenalty (double);
a245 6
      double obj2SubPenalty_;
         //
         // If objective #2 is being used, then this is the
         // penalty on the use of this SubEntry.
         // Range: [0.0, +inf).

@


1.60
log
@Stochastic Implosion
@
text
@a207 9
      static WitPart * preconstruct (
            WitBomEntry * theBomEnt,
            WitPart *     thePart);
         //
         // The args are the same of those of the ctor.
         // Performs the follow actions at the beginning of construction:
         // * Validates the args.
         // * Returns thePart.

@


1.59
log
@Stochastic Implosion
@
text
@d145 2
a146 1
      void storeStochSubVol (const WitDblFlexVec &);
@


1.58
log
@Stochastic Implosion
@
text
@d154 4
a166 1
      virtual void          passFssRefs      ();
@


1.57
log
@Stochastic Implosion
@
text
@d150 4
a162 1
      virtual void          passMrpRefs      ();
@


1.56
log
@Stochastic Implosion
@
text
@d140 5
d158 1
a158 1
      virtual void          importOptSoln    ();
@


1.55
log
@Stochastic Implosion
@
text
@a42 2
      friend class WitHeurAccess;

@


1.54
log
@Stochastic Implosion
@
text
@d131 1
a131 1
      // storeStoch<Attr> functions.
d134 2
a135 1
      // Valid only when the stochastic implosion subsystem is uploading data.
d138 4
d143 3
d185 5
@


1.53
log
@Stochastic Implosion
@
text
@d150 1
@


1.52
log
@Stochastic Implosion
@
text
@d137 1
a137 1
      void storeStochSubVol (const WitTVec <double> &);
@


1.51
log
@Stochastic Implosion
@
text
@d131 1
a131 1
      // loadInStoch<Attr> functions.
d137 1
a137 1
      void loadInStochSubVol (const WitTVec <double> &);
@


1.50
log
@Stochastic Implosion
@
text
@d131 9
a147 1
      virtual void          importStochSoln  ();
@


1.49
log
@Stochastic Implosion
@
text
@d138 2
a139 1
      virtual void          acquireOptSoln   ();
a141 1
      virtual void          passStochRefs    ();
@


1.48
log
@Stochastic Implosion
@
text
@d138 1
a138 1
      virtual void          importOptImpSoln (WitPeriod);
@


1.47
log
@Stochastic Implosion
@
text
@d139 3
a141 3
      virtual void          passMrpData      ();
      virtual void          passFssData      ();
      virtual void          passStochData    ();
@


1.46
log
@Stochastic Implosion
@
text
@d141 1
a141 2
      virtual void          clearStochSoln   ();
      virtual void          restoreStochSoln ();
@


1.45
log
@Stochastic Implosion
@
text
@d139 1
a140 1
      virtual void          importMrpSoln    ();
@


1.44
log
@Stochastic Implosion
@
text
@a43 1
      friend class WitFssAccess;
d139 1
@


1.43
log
@Stochastic Implosion
@
text
@a43 1
      friend class WitMrpAccess;
d140 1
@


1.42
log
@Stochastic Implosion
@
text
@d136 2
a137 16
      virtual bool inserted ();
         //
         // Override from class Component.

      virtual void identifyInstance ();
         //
         // Override from class Component.

      virtual WitMsgFrag objTypeMsgFrag ();
         //
         // Override from class DelComp.

      virtual WitAttr apiObjItrState ();
         //
         // Override from class DelComp.

d147 5
@


1.41
log
@Stochastic Implosion
@
text
@a43 1
      friend class WitOptAccess;
@


1.40
log
@Stochastic Implosion
@
text
@d155 1
@


1.39
log
@Stochastic Implosion
@
text
@a44 1
      friend class WitStochAccess;
d153 5
a157 3
      virtual void          copySelfInto (WitCompMgr *);
      virtual void          recount      ();
      virtual WitSubEntry * thisSub      ();
@


1.38
log
@Stochastic Implosion.
@
text
@d45 1
@


1.37
log
@[disallowed backlog]
@
text
@d141 1
a141 1
      virtual WitMsgFragID classFragID ();
d145 1
a145 1
      virtual void identifyInstance ();
d147 1
a147 1
         // Override from class Component.
@


1.36
log
@Rescinded all changed made since 1/31/07.
@
text
@d43 5
a175 4
      static void transmitDMPs ();
         //
         // See comment on transmitAllDMPs in CompMgr.h.

@


1.35
log
@[disallowed backlog]
@
text
@a67 4
      accessFunc (const WitDblFlexVec &, subVol)
      accessFunc (const WitDblFlexVec &, mrpSubVol)
      accessFunc (const WitDblFlexVec &, fssSubVol)

d76 3
d171 1
a171 17
      //------------------------------------------------------------------------
      // Restricted public member data.
      //------------------------------------------------------------------------

      WitImpRestricted <WitDblFlexVec> subVol_;
         //
         // subVol_[thePer] is the amount of myOperation that was executed
         // in period thePer, using this SubEntry.
         // Normally, this is set by implosion, but it can also be set as
         // input.
         // Range: [0.0, +inf),

      WitMrpRestricted <WitDblFlexVec> mrpSubVol_;
         //
         // subVol for MRP.

      WitFssRestricted <WitDblFlexVec> fssSubVol_;
d173 1
a173 1
         // subVol for FSS.
d270 24
@


1.34
log
@witCopy<Object>Data
@
text
@d68 4
a79 3
      accessFunc (const WitDblFlexVec &, subVol)
      accessFunc (const WitDblFlexVec &, mrpSubVol)
      accessFunc (const WitDblFlexVec &, fssSubVol)
d172 17
a188 1
      static void transmitDMPs ();
d190 1
a190 1
         // See comment on transmitAllDMPs in CompMgr.h.
a286 24

      WitDblFlexVec subVol_;
         //
         // subVol[thePer] is the amount of myOperation that was executed
         // in period thePer, using this SubEntry.
         // Normally, this is set by implosion, but it can also be set as
         // input.
         // Range: [0.0, +inf),

      //------------------------------------------------------------------------
      // Data set by MRP.
      //------------------------------------------------------------------------

      WitDblFlexVec mrpSubVol_;
         //
         // subVol for MRP.

      //------------------------------------------------------------------------
      // Data set by FSS.
      //------------------------------------------------------------------------

      WitDblFlexVec fssSubVol_;
         //
         // subVol for FSS.
@


1.33
log
@External opt implosion.
@
text
@d163 4
a207 4
      void copyAttrsFrom (WitSubEntry * theSub);
         //
         // Copies the input attributes of theSub into this SubEntry.

@


1.32
log
@Integrality constraints.
@
text
@d71 1
a71 1
      accessFunc (bool,                  intConSubVols)
d108 1
a108 1
      defaultValue (bool   defIntConSubVols,  false)
d121 1
a121 1
      void setIntConSubVols  (bool);
d246 1
a246 1
      bool intConSubVols_;
@


1.31
log
@Opt implosion with integrality constraints.
@
text
@d71 1
a71 1
      accessFunc (bool,                  intSubVols)
d108 1
a108 1
      defaultValue (bool   defIntSubVols,     false)
d121 1
a121 1
      void setIntSubVols     (bool);
d246 1
a246 1
      bool intSubVols_;
@


1.30
log
@Updated the copyright date on all source files.
@
text
@d71 1
d108 1
d121 1
d246 5
@


1.29
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.28
log
@Changed names of obj1 attributes, e.g., obj1ScrapCost to scrapCost.
@
text
@a147 4
      virtual void          loadMrp      ();
      virtual void          loadFss      ();
      virtual void          loadHeur     ();
      virtual void          loadOpt      ();
d164 4
@


1.27
log
@Vector PropRt.
@
text
@d70 1
a70 1
      accessFunc (const WitDblFlexVec &, obj1SubCost)
d106 1
a106 1
      defaultValue (double defObj1SubCost,    0.0)
d118 1
a118 1
      void setObj1SubCost    (const WitIVRealArg &);
d236 1
a236 1
      WitDblFlexVec obj1SubCost_;
d238 1
a238 1
         // If objective #1 is being used, then theSub->obj1SubCost ()[thePer]
@


1.26
log
@Double Precision.
@
text
@d118 1
a118 1
      void setObj1SubCost    (const WitInVecRA &);
d123 1
a123 1
      void setSubVol         (const WitInVecRA &);
@


1.25
log
@Double Precision.
@
text
@a117 1
      void setObj1SubCost    (const float *);
a122 1
      void setSubVol         (const float *);
@


1.24
log
@Double Precision.
@
text
@d119 1
d125 1
@


1.23
log
@Double Precision.
@
text
@d68 10
a77 10
      accessFunc (WitBomEntry *,               myBomEnt)
      accessFunc (double,                      obj2SubPenalty)
      accessFunc (const WitFlexVec <double> &, obj1SubCost)
      accessFunc (bool,                        expAllowed)
      accessFunc (bool,                        netAllowed)
      accessFunc (bool,                        mrpNetAllowed)
      accessFunc (double,                      expNetAversion)
      accessFunc (const WitFlexVec <double> &, subVol)
      accessFunc (const WitFlexVec <double> &, mrpSubVol)
      accessFunc (const WitFlexVec <double> &, fssSubVol)
d89 1
a89 1
      virtual const WitFlexVec <double> & offset ();
d236 1
a236 1
      WitFlexVec <double> obj1SubCost_;
d263 1
a263 1
      WitFlexVec <double> subVol_;
d275 1
a275 1
      WitFlexVec <double> mrpSubVol_;
d283 1
a283 1
      WitFlexVec <double> fssSubVol_;
@


1.22
log
@Double Precision.
@
text
@d70 1
a70 1
      accessFunc (const WitRealVec &,          obj1SubCost)
d76 2
a77 2
      accessFunc (const WitRealVec &,          mrpSubVol)
      accessFunc (const WitRealVec &,          fssSubVol)
d89 1
a89 1
      virtual const WitRealVec & offset ();
d236 1
a236 1
      WitRealVec obj1SubCost_;
d275 1
a275 1
      WitRealVec mrpSubVol_;
d283 1
a283 1
      WitRealVec fssSubVol_;
@


1.21
log
@Double Precision.
@
text
@d106 1
a106 1
      defaultValue (float  defObj1SubCost,    0.0)
d111 1
a111 1
      defaultValue (float  defSubVol,         0.0)
@


1.20
log
@Continued double precision.
@
text
@d70 1
a70 1
      accessFunc (const WitFlexVec <float> &,  obj1SubCost)
d76 2
a77 2
      accessFunc (const WitFlexVec <float> &,  mrpSubVol)
      accessFunc (const WitFlexVec <float> &,  fssSubVol)
d89 1
a89 1
      virtual const WitFlexVec <float> & offset ();
d236 1
a236 1
      WitFlexVec <float> obj1SubCost_;
d238 3
a240 3
         // If objective #1 is being used, then theSub->obj1SubCost ()[t] is
         // the user-specified cost coef. on the substitute variable for
         // theSub in period t.
d275 1
a275 1
      WitFlexVec <float> mrpSubVol_;
d283 1
a283 1
      WitFlexVec <float> fssSubVol_;
@


1.19
log
@Continued double precision.
@
text
@d69 1
a69 1
      accessFunc (StrDbl,                      obj2SubPenalty)
d74 1
a74 1
      accessFunc (StrDbl,                      expNetAversion)
d105 1
a105 1
      defaultValue (StrDbl defObj2SubPenalty, 0.0)
d110 1
a110 1
      defaultValue (StrDbl defExpNetAversion, 0.0)
d117 1
a117 1
      void setObj2SubPenalty (StrDbl);
d122 1
a122 1
      void setExpNetAversion (StrDbl);
d230 1
a230 1
      StrDbl obj2SubPenalty_;
d257 1
a257 1
      StrDbl expNetAversion_;
@


1.18
log
@Removed a bad function overload.
@
text
@d69 1
a69 1
      accessFunc (float,                       obj2SubPenalty)
d74 1
a74 1
      accessFunc (float,                       expNetAversion)
d105 7
a111 7
      defaultValue (float defObj2SubPenalty, 0.0)
      defaultValue (float defObj1SubCost,    0.0)
      defaultValue (bool  defExpAllowed,     true)
      defaultValue (bool  defNetAllowed,     true)
      defaultValue (bool  defMrpNetAllowed,  false)
      defaultValue (float defExpNetAversion, 0.0)
      defaultValue (float defSubVol,         0.0)
d117 1
a117 1
      void setObj2SubPenalty (float);
d122 1
a122 1
      void setExpNetAversion (float);
d230 1
a230 1
      float obj2SubPenalty_;
d257 1
a257 1
      float expNetAversion_;
@


1.17
log
@Continued implementation of proportionate routing.
@
text
@d147 1
a147 1
      virtual WitSubEntry * mySub        ();
@


1.16
log
@Continued implementation of proportionate routing.
@
text
@d145 7
a151 16
      virtual void copySelfInto (WitCompMgr * theCompMgr);
         //
         // Override from class Component.

      virtual void recount ();
         //
         // Override from class Component.

      virtual void getSubEntry (WitSubEntry * &);
         //
         // Override from class Component.

      virtual void loadMrp  ();
      virtual void loadFss  ();
      virtual void loadHeur ();
      virtual void loadOpt  ();
@


1.15
log
@Internal changes.
@
text
@a78 2
      decMappingIndex (WitSubEntry)

d92 8
@


1.14
log
@Continued implementation of single-source.
@
text
@d71 3
a73 3
      accessFunc (WitBoolean,                  expAllowed)
      accessFunc (WitBoolean,                  netAllowed)
      accessFunc (WitBoolean,                  mrpNetAllowed)
d99 7
a105 7
      defaultValue (float      defObj2SubPenalty, 0.0)
      defaultValue (float      defObj1SubCost,    0.0)
      defaultValue (WitBoolean defExpAllowed,     witTRUE)
      defaultValue (WitBoolean defNetAllowed,     witTRUE)
      defaultValue (WitBoolean defMrpNetAllowed,  witFALSE)
      defaultValue (float      defExpNetAversion, 0.0)
      defaultValue (float      defSubVol,         0.0)
d113 3
a115 3
      void setExpAllowed     (WitBoolean);
      void setNetAllowed     (WitBoolean);
      void setMrpNetAllowed  (WitBoolean);
d123 1
a123 1
      virtual WitBoolean inserted ();
d158 1
a158 1
      virtual WitBoolean storesOffset ();
d246 1
a246 1
      WitBoolean expAllowed_;
d249 1
a249 1
         // implosion/allocation, iff expAllowed_ is TRUE.
d251 1
a251 1
      WitBoolean netAllowed_;
d254 1
a254 1
         // implosion/allocation, iff netAllowed_ is TRUE.
d256 1
a256 1
      WitBoolean mrpNetAllowed_;
@


1.13
log
@Continued implementation of single-source.
@
text
@a119 7
      // Conditional reference access functions.
      //------------------------------------------------------------------------

      conditionalRef (WitFlexVec <double>, subVol, heurAllAcc () ||
                                                   optImpAcc ())

      //------------------------------------------------------------------------
d151 4
a154 2
      virtual void loadMrp ();
      virtual void loadFss ();
@


1.12
log
@Continued implementation of single-source.
@
text
@d123 2
a124 4
      conditionalRef (WitFlexVec <double>, subVol,    heurAllAcc () ||
                                                      optImpAcc ())
      conditionalRef (WitFlexVec <float>,  mrpSubVol, mrpAcc ())
      conditionalRef (WitFlexVec <float>,  fssSubVol, fssAcc ())
d155 5
@


1.11
log
@Continued implementation of single-source.
@
text
@d125 2
a156 5
         //
         // Override from class Component.

      virtual void importMrpResults ();
      virtual void importFssResults ();
@


1.10
log
@Continued implementation of single-source.
@
text
@a124 1
      conditionalRef (WitFlexVec <float>,  fssSubVol, fssAcc ())
d159 1
@


1.9
log
@Preliminary work on single source.
@
text
@a124 1
      conditionalRef (WitFlexVec <float>,  mrpSubVol, mrpAcc ())
d156 4
@


1.8
log
@Continued implementation of object iteration.
@
text
@d70 1
a70 1
      accessFunc (const WitFlexVec (float) &,  obj1SubCost)
d75 3
a77 3
      accessFunc (const WitFlexVec (double) &, subVol)
      accessFunc (const WitFlexVec (float) &,  mrpSubVol)
      accessFunc (const WitFlexVec (float) &,  fssSubVol)
d91 1
a91 1
      virtual const WitFlexVec (float) & offset ();
d123 1
a123 1
      conditionalRef (WitFlexVec (double), subVol,    heurAllAcc () ||
d125 2
a126 2
      conditionalRef (WitFlexVec (float),  mrpSubVol, mrpAcc ())
      conditionalRef (WitFlexVec (float),  fssSubVol, fssAcc ())
d241 1
a241 1
      WitFlexVec (float) obj1SubCost_;
d268 1
a268 1
      WitFlexVec (double) subVol_;
d280 1
a280 1
      WitFlexVec (float) mrpSubVol_;
d288 1
a288 1
      WitFlexVec (float) fssSubVol_;
@


1.7
log
@Continued implementation of object iteration.
@
text
@d144 1
a144 1
      virtual WitAttr apiItrState ();
@


1.6
log
@Continued development of selection splitting for multi=exec.
@
text
@d144 4
d156 4
a162 4

      virtual WitBoolean isaSubEntry ();
         //
         // Override from class ConsEntry.
@


1.5
log
@Refactoring for selection splitting.
@
text
@d25 1
a25 1
// theSub for BomEntry theSub->myBomEntry () represents the option to consume a
d27 2
a28 2
// consumed theSub->myBomEntry ()->myPart (), in the execution of
// Operation theSub->myBomEntry ()->myOperation (). Typically, most BomEntries
d55 2
a56 2
         // myBomEntry_ <-- theBomEnt.
         // ConsEntry   <<< thePart.
d68 1
a68 1
      accessFunc (WitBomEntry *,               myBomEntry)
d83 1
a83 1
         return myBomEntry ()->myOperation ();
d86 1
a86 1
      inline int myBomEntryIndex ()
d88 1
a88 1
         return myBomEntry ()->localIndex ();
d223 1
a223 1
      WitBomEntry * const myBomEntry_;
@


1.4
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d175 1
a175 3
      copyCtorAndAssignment (WitSubEntry);
         //
         // Prevents unintentional copying and assignment.
@


1.3
log
@Fixed bug: MCL Client Error on emptyBom msg.
@
text
@d144 1
a144 1
      virtual void copyInto (WitCompMgr * theCompMgr);
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d68 10
a77 10
      accessFunc (WitBomEntry *,              myBomEntry)
      accessFunc (float,                      obj2SubPenalty)
      accessFunc (const WitFlexVec (float) &, obj1SubCost)
      accessFunc (WitBoolean,                 expAllowed)
      accessFunc (WitBoolean,                 netAllowed)
      accessFunc (WitBoolean,                 mrpNetAllowed)
      accessFunc (float,                      expNetAversion)
      accessFunc (const WitTVec (float) &,    subVol)
      accessFunc (const WitFlexVec (float) &, mrpSubVol)
      accessFunc (const WitFlexVec (float) &, fssSubVol)
d123 4
a126 4
      conditionalRef (WitTVec (float), subVol,   heurAllAcc () ||
                                                  optImpAcc ())
      conditionalRef (WitFlexVec (float), mrpSubVol, mrpAcc ())
      conditionalRef (WitFlexVec (float), fssSubVol, fssAcc ())
d266 1
a266 1
      WitTVec (float) subVol_;
d268 2
a269 2
         // subVol[t] is the amount of myOperation that was executed
         // in period t, using this SubEntry.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
