head	1.17;
access;
symbols;
locks; strict;
comment	@ * @;


1.17
date	2011.09.28.23.49.17;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.09.24.00.27.33;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.08.30.20.17.26;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2010.11.12.22.03.05;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2010.08.27.21.06.49;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2010.08.24.22.06.44;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2010.08.19.18.00.12;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.02.27.23.43.41;	author rjw;	state dead;
branches;
next	1.9;

1.9
date	2008.02.27.23.19.09;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.02.27.22.49.16;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.10.21.01.34;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.08.09.20.17.42;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.08.09.19.30.35;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.08.03.19.07.02;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.08.02.22.06.27;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.31.20.39.45;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.06.22.19.04.03;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef DetImpOPH
#define DetImpOPH

//------------------------------------------------------------------------------
// Header file: "DetImpOP.h"
//
// Contains the declaration of class DetImpOP.
//------------------------------------------------------------------------------

#include <OptProblem.h>
#include <PtrSched.h>
#include <PtrMap.h>

//------------------------------------------------------------------------------
// class DetImpOP
//
// "Deterministic Implosion Optimization Problem"
//
// Class hierarchy:
//
//    ProbAssoc
//       OptProblem
//          DetImpOP
//------------------------------------------------------------------------------

class WitDetImpOP: public WitOptProblem
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitDetImpOP (WitProblem *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitDetImpOP ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual bool needDual    ();
      virtual bool reSolveMode ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc    (const WitList <WitBoundedVar> &,  myBoundedVars)
      accessFunc    (WitNtbvVar *,                     myNtbvVar)
      accessFunc    (FILE *,                           solnFile)
      accessNonNull (WitExecPerSched <WitBillEntry> *, myExecPerSched)

      //-----------------------------------------------------------------------
      // Derived OptVC storing functions.
      // Each of these functions store its argument (a newly constructed
      // instance of a derived class of OptVC) in the approriate place in
      // this DetImpOP.
      //-----------------------------------------------------------------------

      void storeDerived (WitScrapVar *);
      void storeDerived (WitNonSubVar *);
      void storeDerived (WitSubVar *);
      void storeDerived (WitShipVar *);
      void storeDerived (WitSlbvVar *);
      void storeDerived (WitExecVar *);
      void storeDerived (WitStockVar *);
      void storeDerived (WitCumShipVar *);
      void storeDerived (WitMultiObjVar *);
      void storeDerived (WitNtbvVar *);
      void storeDerived (WitResourceCon *);
      void storeDerived (WitSubCon *);
      void storeDerived (WitShipCon *);
      void storeDerived (WitSlbCon *);
      void storeDerived (WitMultiObjCon *);
      void storeDerived (WitTbvCon *);

      //-----------------------------------------------------------------------
      // OptVC look-up functions.
      //
      // Each of these functions returns the OptVC in this DetImpOP
      // corresponding to its arguments, if one exists; otherwise NULL.
      //-----------------------------------------------------------------------

      WitScrapVar *    myScrapVar    (WitPart *,      WitPeriod);
      WitNonSubVar *   myNonSubVar   (WitBomEntry *,  WitPeriod);
      WitSubVar *      mySubVar      (WitSubEntry *,  WitPeriod);
      WitShipVar *     myShipVar     (WitDemand *,    WitPeriod);
      WitExecVar *     myExecVar     (WitOperation *, WitPeriod);
      WitStockVar *    myStockVar    (WitMaterial *,  WitPeriod);
      WitCumShipVar *  myCumShipVar  (WitDemand *,    WitPeriod);

      WitResourceCon * myResourceCon (WitPart *,      WitPeriod);
      WitSubCon *      mySubCon      (WitBomEntry *,  WitPeriod);
      WitShipCon *     myShipCon     (WitDemand *,    WitPeriod);

      WitSlbvVar *     mySlbvVar     (WitBoundedVar *);
      WitSlbCon *      mySlbCon      (WitBoundedVar *);

      WitMultiObjVar * myMultiObjVar (WitObjective *);

      //-----------------------------------------------------------------------
      // OptVC item printing functions.
      //
      // Each of these functions prints its argument to optProbFile ().
      //-----------------------------------------------------------------------

      void printItem (WitNode *);
      void printItem (WitBomEntry *);
      void printItem (WitSubEntry *);
      void printItem (WitDemand *);
      void printItem (WitBoundedVar *);
      void printItem (WitObjective *);
      void printItem ();

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      void storeBoundedVar (WitBoundedVar * theBoundedVar);
         //
         // Stores theBoundedVar.

      bool slbvVarsExist ();
         //
         // Returns true iff there are any slbvVars in this DetImpOP.

      void printPeriod (WitPeriod thePer);
         //
         // Prints thePer to optProbFile ().

      void printNonPeriod ();
         //
         // Prints blank space to optProbFile () in place of a Period.

      void writeSoln (const char * fName);
         //
         // Prints out the primal solution from WIT data structures.
         // Writes to a file whose name is given by fName.

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      virtual void generateVariables    ();
      virtual void generateConstraints  ();
      virtual void generateLexOptVarSeq (WitPtrVec <WitOptVar> &);
      virtual void postGenFixed         ();
      virtual void postGenFlexible      ();
      virtual void printOptVCHeading    ();
      virtual void displayDerived       ();
      virtual void printDerived         ();
      virtual void initDepVars          ();
      virtual void doScreening          ();
         //
         // Overrides from class OptProblem

      //-----------------------------------------------------------------------
      // Private member functions relating to output of the solution to the
      // optimization problem.
      //-----------------------------------------------------------------------

      void writePeSoln (WitOptVC * theOptVC);
         //
         // Writes the solution value of theOptVC, or blank if it is NULL,
         // or the value is nearly zero.
         // If the OptVC is a variable, the primal solution value is written;
         // if it is a constraint, the dual value is written.

      void writePartSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // parts. Optionally prints the dual solution for material balance
         // constraints.

      void writeOperationSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // Operations.

      void writeSubEntrySoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // SubEntries.

      void writeDemandSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // demands.

      void writeBoundedVarSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // BoundedVars.

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitDetImpOP);

         // The following are formats used in printing an OptVC.
         //
      inline static const char * itemFormat     ();
      inline static const char * itemLongFormat ();
      inline static const char * periodDFormat  ();
      inline static const char * periodSFormat  ();

      template <typename Item, typename DerOptVC>
            void insertInto (
               WitPtrSched <Item, DerOptVC> & thePtrSched,
               const Item *                   theItem,
               DerOptVC *                     theDerOptVC);
         //
         // Inserts theDerOptVC into thePtrSched at theItem and
         // theDerOptVC->myPeriod (), allocating as necessary.

      template <typename Item, typename DerOptVC>
            DerOptVC * lookUp (
               WitPtrSched <Item, DerOptVC> & thePtrSched,
               const Item *                   theItem,
               WitPeriod                      thePer);
         //
         // Returns the DerOptVC in thePtrSched for theItem in thePer,
         // if any, else NULL.

      void initSlbvVars ();
         //
         // Initializes the SlbvVars.

      void initMultiObjVars ();
         //
         // Initializes the MultiObjVars.

      void initNtbvVar ();
         //
         // Initializes myNtbvVar_.

      void screenImpCons ();
         //
         // Performs generic screening of the constraints of this DetImpOP.
         // Constraints are considered in an order that facilitates
         // cascading of screening, i.e., we try to screen in an order such
         // that if screening constraint A permits constraint B to be screened,
         // then A is screened before B.

      void relaxCumShipNonNeg ();
         //
         // Relaxes redundant nonnegativity bounds on cumulative shipment
         // variables.

      void screenSlbOptVCs ();
         //
         // Screens out the variables and constraints for soft lower bounds
         // that are not soft.

      bool positiveHardLBsExist ();
         //
         // Returns true iff myProblem  () has at least one BoundSet with a
         // positive hardLB.

      bool disallowedScrapExists ();
         //
         // Returns true iff myProblem  () has at least one Part with
         // scrapAllowed == false.

      void printBoundedVars ();
         //
         // Prints information about the BoundedVars of this DetImpOP to
         // optProbFile ().

      bool             multiObjMode  ();
      WitMultiObjMgr * myMultiObjMgr ();
         //
         // Pass-thru to myOptComp ().

      //-----------------------------------------------------------------------
      // Static constant private member data.
      //-----------------------------------------------------------------------

      static const double solnEpsilon;
         //
         // Values must exceed this amount in order to appear in the solution
         // output.

      //-----------------------------------------------------------------------
      // The OptVC Schedules for this DetImpOP.
      //-----------------------------------------------------------------------

      WitPtrSched <WitPart,      WitScrapVar   > myScrapVar_;
      WitPtrSched <WitBomEntry,  WitNonSubVar  > myNonSubVar_;
      WitPtrSched <WitSubEntry,  WitSubVar     > mySubVar_;
      WitPtrSched <WitDemand,    WitShipVar    > myShipVar_;
      WitPtrSched <WitBoundSet,  WitSlbvVar    > mySlbvVar_;
      WitPtrSched <WitOperation, WitExecVar    > myExecVar_;
      WitPtrSched <WitMaterial,  WitStockVar   > myStockVar_;
      WitPtrSched <WitDemand,    WitCumShipVar > myCumShipVar_;

      WitPtrSched <WitPart,      WitResourceCon> myResourceCon_;
      WitPtrSched <WitBomEntry,  WitSubCon     > mySubCon_;
      WitPtrSched <WitDemand,    WitShipCon    > myShipCon_;
      WitPtrSched <WitBoundSet,  WitSlbCon     > mySlbCon_;

      //-----------------------------------------------------------------------
      // Other private member data.
      //-----------------------------------------------------------------------

      WitPtrMap <WitObjective, WitMultiObjVar> myMultiObjVar_;
         //
         // In multiple objectives mode:
         //    myMultiObjVar_ (theObj) is the MultiObjVar owned by this DetImpOP
         //    for theObj.
         // In single objective mode:
         //    myMultiObjVar_ is empty.

      WitPtrMap <WitObjective, WitMultiObjCon> myMultiObjCon_;
         //
         // Same as myMultiObjVar_, but for MultiObjCons.

      WitList <WitBoundedVar> myBoundedVars_;
         //
         // The list of all BoundedVars in this DetImpOP.

      WitNtbvVar * myNtbvVar_;
      WitTbvCon  * myTbvCon_;
         //
         // In multiple objectives mode,
         //    If there are soft lower bounds:
         //       myNtbvVar_ is the NtbvVar owned by this DetImpOP.
         //       myTbvCon_  is the TbvCon  owned by this DetImpOP.
         // Otherwise:
         //    myNtbvVar_ is NULL.
         //    myTbvCon_  is NULL.

      int nSlbvVars_;
         //
         // # soft lower bound violation variables.

      FILE * solnFile_;
         //
         // Solution output file.

      WitExecPerSched <WitBillEntry> * myExecPerSched_;
         //
         // The ExecPerSched owned by this DetImpOP, if any; otherwise NULL.
   };

#endif
@


1.16
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.15
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d36 2
a37 196
{
public:

//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------

WitDetImpOP (WitProblem *);

//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------

virtual ~WitDetImpOP ();

//-----------------------------------------------------------------------
// Overriding public virtual member functions.
//-----------------------------------------------------------------------

virtual bool needDual    ();
virtual bool reSolveMode ();

//-----------------------------------------------------------------------
// Access functions.
//-----------------------------------------------------------------------

accessFunc    (const WitList <WitBoundedVar> &,  myBoundedVars)
accessFunc    (WitNtbvVar *,                     myNtbvVar)
accessFunc    (FILE *,                           solnFile)
accessNonNull (WitExecPerSched <WitBillEntry> *, myExecPerSched)

//-----------------------------------------------------------------------
// Derived OptVC storing functions.
// Each of these functions store its argument (a newly constructed
// instance of a derived class of OptVC) in the approriate place in
// this DetImpOP.
//-----------------------------------------------------------------------

void storeDerived (WitScrapVar *);
void storeDerived (WitNonSubVar *);
void storeDerived (WitSubVar *);
void storeDerived (WitShipVar *);
void storeDerived (WitSlbvVar *);
void storeDerived (WitExecVar *);
void storeDerived (WitStockVar *);
void storeDerived (WitCumShipVar *);
void storeDerived (WitMultiObjVar *);
void storeDerived (WitNtbvVar *);
void storeDerived (WitResourceCon *);
void storeDerived (WitSubCon *);
void storeDerived (WitShipCon *);
void storeDerived (WitSlbCon *);
void storeDerived (WitMultiObjCon *);
void storeDerived (WitTbvCon *);

//-----------------------------------------------------------------------
// OptVC look-up functions.
//
// Each of these functions returns the OptVC in this DetImpOP
// corresponding to its arguments, if one exists; otherwise NULL.
//-----------------------------------------------------------------------

WitScrapVar *    myScrapVar    (WitPart *,      WitPeriod);
WitNonSubVar *   myNonSubVar   (WitBomEntry *,  WitPeriod);
WitSubVar *      mySubVar      (WitSubEntry *,  WitPeriod);
WitShipVar *     myShipVar     (WitDemand *,    WitPeriod);
WitExecVar *     myExecVar     (WitOperation *, WitPeriod);
WitStockVar *    myStockVar    (WitMaterial *,  WitPeriod);
WitCumShipVar *  myCumShipVar  (WitDemand *,    WitPeriod);

WitResourceCon * myResourceCon (WitPart *,      WitPeriod);
WitSubCon *      mySubCon      (WitBomEntry *,  WitPeriod);
WitShipCon *     myShipCon     (WitDemand *,    WitPeriod);

WitSlbvVar *     mySlbvVar     (WitBoundedVar *);
WitSlbCon *      mySlbCon      (WitBoundedVar *);

WitMultiObjVar * myMultiObjVar (WitObjective *);

//-----------------------------------------------------------------------
// OptVC item printing functions.
//
// Each of these functions prints its argument to optProbFile ().
//-----------------------------------------------------------------------

void printItem (WitNode *);
void printItem (WitBomEntry *);
void printItem (WitSubEntry *);
void printItem (WitDemand *);
void printItem (WitBoundedVar *);
void printItem (WitObjective *);
void printItem ();

//-----------------------------------------------------------------------
// Other public member functions.
//-----------------------------------------------------------------------

void storeBoundedVar (WitBoundedVar * theBoundedVar);
//
// Stores theBoundedVar.

bool slbvVarsExist ();
//
// Returns true iff there are any slbvVars in this DetImpOP.

void printPeriod (WitPeriod thePer);
//
// Prints thePer to optProbFile ().

void printNonPeriod ();
//
// Prints blank space to optProbFile () in place of a Period.

void writeSoln (const char * fName);
//
// Prints out the primal solution from WIT data structures.
// Writes to a file whose name is given by fName.

private:

//-----------------------------------------------------------------------
// Private member functions.
//-----------------------------------------------------------------------

virtual void generateVariables    ();
virtual void generateConstraints  ();
virtual void generateLexOptVarSeq (WitPtrVec <WitOptVar> &);
virtual void postGenFixed         ();
virtual void postGenFlexible      ();
virtual void printOptVCHeading    ();
virtual void displayDerived       ();
virtual void printDerived         ();
virtual void initDepVars          ();
virtual void doScreening          ();
//
// Overrides from class OptProblem

//-----------------------------------------------------------------------
// Private member functions relating to output of the solution to the
// optimization problem.
//-----------------------------------------------------------------------

void writePeSoln (WitOptVC * theOptVC);
//
// Writes the solution value of theOptVC, or blank if it is NULL,
// or the value is nearly zero.
// If the OptVC is a variable, the primal solution value is written;
// if it is a constraint, the dual value is written.

void writePartSoln ();
//
// Prints out the aspects of the primal solution associated with
// parts. Optionally prints the dual solution for material balance
// constraints.

void writeOperationSoln ();
//
// Prints out the aspects of the primal solution associated with
// Operations.

void writeSubEntrySoln ();
//
// Prints out the aspects of the primal solution associated with
// SubEntries.

void writeDemandSoln ();
//
// Prints out the aspects of the primal solution associated with
// demands.

void writeBoundedVarSoln ();
//
// Prints out the aspects of the primal solution associated with
// BoundedVars.

//-----------------------------------------------------------------------
// Other private member functions.
//-----------------------------------------------------------------------

noCopyCtorAssign (WitDetImpOP);

// The following are formats used in printing an OptVC.
//
inline static const char * itemFormat     ();
inline static const char * itemLongFormat ();
inline static const char * periodDFormat  ();
inline static const char * periodSFormat  ();

template <typename Item, typename DerOptVC>
void insertInto (
WitPtrSched <Item, DerOptVC> & thePtrSched,
const Item *                   theItem,
DerOptVC *                     theDerOptVC);
//
// Inserts theDerOptVC into thePtrSched at theItem and
// theDerOptVC->myPeriod (), allocating as necessary.
d39 323
a361 129
template <typename Item, typename DerOptVC>
DerOptVC * lookUp (
WitPtrSched <Item, DerOptVC> & thePtrSched,
const Item *                   theItem,
WitPeriod                      thePer);
//
// Returns the DerOptVC in thePtrSched for theItem in thePer,
// if any, else NULL.

void initSlbvVars ();
//
// Initializes the SlbvVars.

void initMultiObjVars ();
//
// Initializes the MultiObjVars.

void initNtbvVar ();
//
// Initializes myNtbvVar_.

void screenImpCons ();
//
// Performs generic screening of the constraints of this DetImpOP.
// Constraints are considered in an order that facilitates
// cascading of screening, i.e., we try to screen in an order such
// that if screening constraint A permits constraint B to be screened,
// then A is screened before B.

void relaxCumShipNonNeg ();
//
// Relaxes redundant nonnegativity bounds on cumulative shipment
// variables.

void screenSlbOptVCs ();
//
// Screens out the variables and constraints for soft lower bounds
// that are not soft.

bool positiveHardLBsExist ();
//
// Returns true iff myProblem  () has at least one BoundSet with a
// positive hardLB.

bool disallowedScrapExists ();
//
// Returns true iff myProblem  () has at least one Part with
// scrapAllowed == false.

void printBoundedVars ();
//
// Prints information about the BoundedVars of this DetImpOP to
// optProbFile ().

bool             multiObjMode  ();
WitMultiObjMgr * myMultiObjMgr ();
//
// Pass-thru to myOptComp ().

//-----------------------------------------------------------------------
// Static constant private member data.
//-----------------------------------------------------------------------

static const double solnEpsilon;
//
// Values must exceed this amount in order to appear in the solution
// output.

//-----------------------------------------------------------------------
// The OptVC Schedules for this DetImpOP.
//-----------------------------------------------------------------------

WitPtrSched <WitPart,      WitScrapVar   > myScrapVar_;
WitPtrSched <WitBomEntry,  WitNonSubVar  > myNonSubVar_;
WitPtrSched <WitSubEntry,  WitSubVar     > mySubVar_;
WitPtrSched <WitDemand,    WitShipVar    > myShipVar_;
WitPtrSched <WitBoundSet,  WitSlbvVar    > mySlbvVar_;
WitPtrSched <WitOperation, WitExecVar    > myExecVar_;
WitPtrSched <WitMaterial,  WitStockVar   > myStockVar_;
WitPtrSched <WitDemand,    WitCumShipVar > myCumShipVar_;

WitPtrSched <WitPart,      WitResourceCon> myResourceCon_;
WitPtrSched <WitBomEntry,  WitSubCon     > mySubCon_;
WitPtrSched <WitDemand,    WitShipCon    > myShipCon_;
WitPtrSched <WitBoundSet,  WitSlbCon     > mySlbCon_;

//-----------------------------------------------------------------------
// Other private member data.
//-----------------------------------------------------------------------

WitPtrMap <WitObjective, WitMultiObjVar> myMultiObjVar_;
//
// In multiple objectives mode:
//    myMultiObjVar_ (theObj) is the MultiObjVar owned by this DetImpOP
//    for theObj.
// In single objective mode:
//    myMultiObjVar_ is empty.

WitPtrMap <WitObjective, WitMultiObjCon> myMultiObjCon_;
//
// Same as myMultiObjVar_, but for MultiObjCons.

WitList <WitBoundedVar> myBoundedVars_;
//
// The list of all BoundedVars in this DetImpOP.

WitNtbvVar * myNtbvVar_;
WitTbvCon  * myTbvCon_;
//
// In multiple objectives mode,
//    If there are soft lower bounds:
//       myNtbvVar_ is the NtbvVar owned by this DetImpOP.
//       myTbvCon_  is the TbvCon  owned by this DetImpOP.
// Otherwise:
//    myNtbvVar_ is NULL.
//    myTbvCon_  is NULL.

int nSlbvVars_;
//
// # soft lower bound violation variables.

FILE * solnFile_;
//
// Solution output file.

WitExecPerSched <WitBillEntry> * myExecPerSched_;
//
// The ExecPerSched owned by this DetImpOP, if any; otherwise NULL.
};
@


1.14
log
@CPLEX
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d36 196
a231 2
   {
   public:
d233 129
a361 323
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitDetImpOP (WitProblem *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitDetImpOP ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual bool needDual    ();
      virtual bool reSolveMode ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc    (const WitList <WitBoundedVar> &,  myBoundedVars)
      accessFunc    (WitNtbvVar *,                     myNtbvVar)
      accessFunc    (FILE *,                           solnFile)
      accessNonNull (WitExecPerSched <WitBillEntry> *, myExecPerSched)

      //-----------------------------------------------------------------------
      // Derived OptVC storing functions.
      // Each of these functions store its argument (a newly constructed
      // instance of a derived class of OptVC) in the approriate place in
      // this DetImpOP.
      //-----------------------------------------------------------------------

      void storeDerived (WitScrapVar *);
      void storeDerived (WitNonSubVar *);
      void storeDerived (WitSubVar *);
      void storeDerived (WitShipVar *);
      void storeDerived (WitSlbvVar *);
      void storeDerived (WitExecVar *);
      void storeDerived (WitStockVar *);
      void storeDerived (WitCumShipVar *);
      void storeDerived (WitMultiObjVar *);
      void storeDerived (WitNtbvVar *);
      void storeDerived (WitResourceCon *);
      void storeDerived (WitSubCon *);
      void storeDerived (WitShipCon *);
      void storeDerived (WitSlbCon *);
      void storeDerived (WitMultiObjCon *);
      void storeDerived (WitTbvCon *);

      //-----------------------------------------------------------------------
      // OptVC look-up functions.
      //
      // Each of these functions returns the OptVC in this DetImpOP
      // corresponding to its arguments, if one exists; otherwise NULL.
      //-----------------------------------------------------------------------

      WitScrapVar *    myScrapVar    (WitPart *,      WitPeriod);
      WitNonSubVar *   myNonSubVar   (WitBomEntry *,  WitPeriod);
      WitSubVar *      mySubVar      (WitSubEntry *,  WitPeriod);
      WitShipVar *     myShipVar     (WitDemand *,    WitPeriod);
      WitExecVar *     myExecVar     (WitOperation *, WitPeriod);
      WitStockVar *    myStockVar    (WitMaterial *,  WitPeriod);
      WitCumShipVar *  myCumShipVar  (WitDemand *,    WitPeriod);

      WitResourceCon * myResourceCon (WitPart *,      WitPeriod);
      WitSubCon *      mySubCon      (WitBomEntry *,  WitPeriod);
      WitShipCon *     myShipCon     (WitDemand *,    WitPeriod);

      WitSlbvVar *     mySlbvVar     (WitBoundedVar *);
      WitSlbCon *      mySlbCon      (WitBoundedVar *);

      WitMultiObjVar * myMultiObjVar (WitObjective *);

      //-----------------------------------------------------------------------
      // OptVC item printing functions.
      //
      // Each of these functions prints its argument to optProbFile ().
      //-----------------------------------------------------------------------

      void printItem (WitNode *);
      void printItem (WitBomEntry *);
      void printItem (WitSubEntry *);
      void printItem (WitDemand *);
      void printItem (WitBoundedVar *);
      void printItem (WitObjective *);
      void printItem ();

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      void storeBoundedVar (WitBoundedVar * theBoundedVar);
         //
         // Stores theBoundedVar.

      bool slbvVarsExist ();
         //
         // Returns true iff there are any slbvVars in this DetImpOP.

      void printPeriod (WitPeriod thePer);
         //
         // Prints thePer to optProbFile ().

      void printNonPeriod ();
         //
         // Prints blank space to optProbFile () in place of a Period.

      void writeSoln (const char * fName);
         //
         // Prints out the primal solution from WIT data structures.
         // Writes to a file whose name is given by fName.

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      virtual void generateVariables    ();
      virtual void generateConstraints  ();
      virtual void generateLexOptVarSeq (WitPtrVec <WitOptVar> &);
      virtual void postGenFixed         ();
      virtual void postGenFlexible      ();
      virtual void printOptVCHeading    ();
      virtual void displayDerived       ();
      virtual void printDerived         ();
      virtual void initDepVars          ();
      virtual void doScreening          ();
         //
         // Overrides from class OptProblem

      //-----------------------------------------------------------------------
      // Private member functions relating to output of the solution to the
      // optimization problem.
      //-----------------------------------------------------------------------

      void writePeSoln (WitOptVC * theOptVC);
         //
         // Writes the solution value of theOptVC, or blank if it is NULL,
         // or the value is nearly zero.
         // If the OptVC is a variable, the primal solution value is written;
         // if it is a constraint, the dual value is written.

      void writePartSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // parts. Optionally prints the dual solution for material balance
         // constraints.

      void writeOperationSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // Operations.

      void writeSubEntrySoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // SubEntries.

      void writeDemandSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // demands.

      void writeBoundedVarSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // BoundedVars.

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitDetImpOP);

         // The following are formats used in printing an OptVC.
         //
      inline static const char * itemFormat     ();
      inline static const char * itemLongFormat ();
      inline static const char * periodDFormat  ();
      inline static const char * periodSFormat  ();

      template <typename Item, typename DerOptVC>
            void insertInto (
               WitPtrSched <Item, DerOptVC> & thePtrSched,
               const Item *                   theItem,
               DerOptVC *                     theDerOptVC);
         //
         // Inserts theDerOptVC into thePtrSched at theItem and
         // theDerOptVC->myPeriod (), allocating as necessary.

      template <typename Item, typename DerOptVC>
            DerOptVC * lookUp (
               WitPtrSched <Item, DerOptVC> & thePtrSched,
               const Item *                   theItem,
               WitPeriod                      thePer);
         //
         // Returns the DerOptVC in thePtrSched for theItem in thePer,
         // if any, else NULL.

      void initSlbvVars ();
         //
         // Initializes the SlbvVars.

      void initMultiObjVars ();
         //
         // Initializes the MultiObjVars.

      void initNtbvVar ();
         //
         // Initializes myNtbvVar_.

      void screenImpCons ();
         //
         // Performs generic screening of the constraints of this DetImpOP.
         // Constraints are considered in an order that facilitates
         // cascading of screening, i.e., we try to screen in an order such
         // that if screening constraint A permits constraint B to be screened,
         // then A is screened before B.

      void relaxCumShipNonNeg ();
         //
         // Relaxes redundant nonnegativity bounds on cumulative shipment
         // variables.

      void screenSlbOptVCs ();
         //
         // Screens out the variables and constraints for soft lower bounds
         // that are not soft.

      bool positiveHardLBsExist ();
         //
         // Returns true iff myProblem  () has at least one BoundSet with a
         // positive hardLB.

      bool disallowedScrapExists ();
         //
         // Returns true iff myProblem  () has at least one Part with
         // scrapAllowed == false.

      void printBoundedVars ();
         //
         // Prints information about the BoundedVars of this DetImpOP to
         // optProbFile ().

      bool             multiObjMode  ();
      WitMultiObjMgr * myMultiObjMgr ();
         //
         // Pass-thru to myOptComp ().

      //-----------------------------------------------------------------------
      // Static constant private member data.
      //-----------------------------------------------------------------------

      static const double solnEpsilon;
         //
         // Values must exceed this amount in order to appear in the solution
         // output.

      //-----------------------------------------------------------------------
      // The OptVC Schedules for this DetImpOP.
      //-----------------------------------------------------------------------

      WitPtrSched <WitPart,      WitScrapVar   > myScrapVar_;
      WitPtrSched <WitBomEntry,  WitNonSubVar  > myNonSubVar_;
      WitPtrSched <WitSubEntry,  WitSubVar     > mySubVar_;
      WitPtrSched <WitDemand,    WitShipVar    > myShipVar_;
      WitPtrSched <WitBoundSet,  WitSlbvVar    > mySlbvVar_;
      WitPtrSched <WitOperation, WitExecVar    > myExecVar_;
      WitPtrSched <WitMaterial,  WitStockVar   > myStockVar_;
      WitPtrSched <WitDemand,    WitCumShipVar > myCumShipVar_;

      WitPtrSched <WitPart,      WitResourceCon> myResourceCon_;
      WitPtrSched <WitBomEntry,  WitSubCon     > mySubCon_;
      WitPtrSched <WitDemand,    WitShipCon    > myShipCon_;
      WitPtrSched <WitBoundSet,  WitSlbCon     > mySlbCon_;

      //-----------------------------------------------------------------------
      // Other private member data.
      //-----------------------------------------------------------------------

      WitPtrMap <WitObjective, WitMultiObjVar> myMultiObjVar_;
         //
         // In multiple objectives mode:
         //    myMultiObjVar_ (theObj) is the MultiObjVar owned by this DetImpOP
         //    for theObj.
         // In single objective mode:
         //    myMultiObjVar_ is empty.

      WitPtrMap <WitObjective, WitMultiObjCon> myMultiObjCon_;
         //
         // Same as myMultiObjVar_, but for MultiObjCons.

      WitList <WitBoundedVar> myBoundedVars_;
         //
         // The list of all BoundedVars in this DetImpOP.

      WitNtbvVar * myNtbvVar_;
      WitTbvCon  * myTbvCon_;
         //
         // In multiple objectives mode,
         //    If there are soft lower bounds:
         //       myNtbvVar_ is the NtbvVar owned by this DetImpOP.
         //       myTbvCon_  is the TbvCon  owned by this DetImpOP.
         // Otherwise:
         //    myNtbvVar_ is NULL.
         //    myTbvCon_  is NULL.

      int nSlbvVars_;
         //
         // # soft lower bound violation variables.

      FILE * solnFile_;
         //
         // Solution output file.

      WitExecPerSched <WitBillEntry> * myExecPerSched_;
         //
         // The ExecPerSched owned by this DetImpOP, if any; otherwise NULL.
   };
@


1.13
log
@CPLEX
@
text
@d55 2
a56 1
      virtual bool needDual ();
@


1.12
log
@CPLEX
@
text
@d55 1
a55 4
      virtual bool needDual         ();
      virtual void reportInfeasible ();
      virtual void reportUnbounded  ();
      virtual void reportInfOrUnbdd ();
@


1.11
log
@CPLEX
@
text
@d58 1
@


1.10
log
@Stochastic Implosion
@
text
@d19 1
a19 1
#include <OptModel.h>
d21 1
d31 1
a31 1
//       OptModel
d35 1
a35 1
class WitDetImpOP: public WitOptModel
d63 3
a65 11
      accessFunc    (WitBoundsObj  *, myBoundsObj)
      accessFunc    (WitPrimaryObj *, myPrimaryObj)
      accessFunc    (WitObj1Obj *,    myObj1Obj)
      accessFunc    (WitRevObj *,     myRevObj)
      accessFunc    (WitInvObj *,     myInvObj)
      accessFunc    (WitServObj *,    myServObj)
      accessFunc    (WitSubObj *,     mySubObj)
      accessFunc    (WitObj2Obj *,    myObj2Obj)

      accessFunc    (FILE *,          solnFile)

d83 2
a84 1

d89 2
d114 2
d127 2
d142 1
a142 1
      void printPeriod (WitPeriod t);
d144 1
a144 1
         // Prints t to optProbFile ().
d146 5
a150 1
      void writeSoln (const WitString & fName);
d158 1
a158 1
      // Overriding private virtual member functions.
d161 10
a170 25
      virtual void generateVariables ();
         //
         // Generates all OptVars for this DetImpOP.

      virtual void generateConstraints ();
         //
         // Generates all OptCons for this DetImpOP.

      virtual WitOptObj * generateObjectives ();
         //
         // Generates all OptObjs for this DetImpOP.

      virtual void postGenFixed ();

      virtual void postGenFlexible ();

      virtual void printOptVCHeading ();

      virtual void displayDerived ();
         //
         // Writes out the bounds counts.

      virtual void printDerived ();

      virtual void initDepVars ();
d172 1
a172 4
         // Initializes the dependent variables, i.e., those variables whose
         // initial value depends on the initial value of other variables.

      virtual void doScreening ();
d220 4
a223 3
      inline static const char * itemFormat    ();
      inline static const char * periodDFormat ();
      inline static const char * periodSFormat ();
d243 12
d288 5
d321 1
a321 1
      // The OptObjs for this DetImpOP.
d324 7
a330 8
      WitBoundsObj  *  myBoundsObj_;
      WitPrimaryObj * myPrimaryObj_;
      WitObj1Obj    *    myObj1Obj_;
      WitRevObj     *     myRevObj_;
      WitInvObj     *     myInvObj_;
      WitServObj    *    myServObj_;
      WitSubObj     *     mySubObj_;
      WitObj2Obj    *    myObj2Obj_;
d332 3
a334 3
      //-----------------------------------------------------------------------
      // Other private member data.
      //-----------------------------------------------------------------------
d340 11
@


1.9
log
@Stochastic Implosion
@
text
@@


1.8
log
@Stochastic Implosion
@
text
@d19 1
a19 1
#include <OptProb.h>
d30 1
a30 1
//       OptProb
d34 1
a34 1
class WitDetImpOP: public WitOptProb
@


1.7
log
@Stochastic Implosion
@
text
@d76 1
a76 1
      // Derived OptProbEl storing functions.
d78 1
a78 1
      // instance of a derived class of OptProbEl) in the approriate place in
d97 1
a97 1
      // OptProbEl look-up functions.
d99 1
a99 1
      // Each of these functions returns the OptProbEl in this DetImpOP
d119 1
a119 1
      // OptProbEl item printing functions.
d173 1
a173 1
      virtual void printOptProbElHeading ();
d193 1
a193 1
      void writePeSoln (WitOptProbEl * theOptProbEl);
d195 1
a195 1
         // Writes the solution value of theOptProbEl, or blank if it is NULL,
d197 2
a198 2
         // If the OptProbEl is a variable, the primal solution value is
         // written; if it is a constraint, the dual value is written.
d232 1
a232 1
         // The following are formats used in printing an OptProbEl.
d238 1
a238 1
      template <typename Item, typename DerOptProbEl>
d240 12
a251 12
               WitPtrSched <Item, DerOptProbEl> & thePtrSched,
               const Item *                       theItem,
               DerOptProbEl *                     theDerOptProbEl);
         //
         // Inserts theDerOptProbEl into thePtrSched at theItem and
         // theDerOptProbEl->myPeriod (), allocating as necessary.

      template <typename Item, typename DerOptProbEl>
            DerOptProbEl * lookUp (
               WitPtrSched <Item, DerOptProbEl> & thePtrSched,
               const Item *                       theItem,
               WitPeriod                          thePer);
d253 1
a253 1
         // Returns the DerOptProbEl in thePtrSched for theItem in thePer,
d269 1
a269 1
      void screenSlbOptProbEls ();
d299 1
a299 1
      // The OptProbEl Schedules for this DetImpOP.
@


1.6
log
@Stochastic Implosion
@
text
@d171 2
@


1.5
log
@Stochastic Implosion
@
text
@d115 2
a116 2
      WitSlbvVar *     mySlbvVar     (const WitBoundedVar *);
      WitSlbCon *      mySlbCon      (const WitBoundedVar *);
d128 1
a128 2

      void printItem (const WitBoundedVar *);
@


1.4
log
@Stochastic Implosion
@
text
@d192 1
a192 1
      void writePeSoln (const WitOptProbEl * theOptProbEl);
@


1.3
log
@Stochastic Implosion
@
text
@a74 2
      accessWrapper (WitCompMgr *,    myCompMgr, myProblem ())

@


1.2
log
@Stochastic Implosion
@
text
@d233 1
a233 1
         // The following are formats used in printing a OptProbEl.
d235 3
a237 14
      inline static const char * itemFormat ()
         {
         return " %-12s %-12s %-12s";
         }

      inline static const char * periodDFormat ()
         {
         return " %4d";
         }

      inline static const char * periodSFormat ()
         {
         return " %4s";
         }
@


1.1
log
@Stochastic Implosion
@
text
@d73 1
a73 1
      accessNonNull (WitExecPerMgr *, myExecPerMgr)
d357 1
a357 1
      WitExecPerMgr * myExecPerMgr_;
d359 1
a359 1
         // The ExecPerMgr owned by this DetImpOP, if any; otherwise NULL.
@

