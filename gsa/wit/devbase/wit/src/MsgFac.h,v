head	1.26;
access;
symbols
	sce_5_01_20080919:1.22
	latest_sce_4_20_20060523:1.22.0.2
	sce_4_20_20060523:1.22
	latest_sce4_20_OSL:1.21.0.2
	sce_4_20_OSL:1.21
	sce_410_withVa:1.15
	sce_4_05_20040511:1.13
	sce_4_00_20040201:1.11
	nextGenBranch:1.10.0.2
	nextGenRoot:1.10
	sce_3_30_20030627:1.10
	EndRw-branch:1.9.0.4
	Root-of-EndRw:1.9
	rwToStl:1.9.0.2
	latest_sce_3_10_20010924:1.7.0.2
	sce_3_10_20010924:1.7
	latest_sce_3_00_20010601:1.6.0.4
	sce_3_00_20010601:1.6
	latest_sce_2_31_20010308:1.6.0.2
	sce_2_31_20010308:1.6
	latest_sce_2_31_20001003:1.4.0.2
	sce_2_31_20001003:1.4
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2011.09.28.23.49.37;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.09.24.00.27.58;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2011.08.30.20.17.41;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2010.04.08.21.07.40;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2006.05.02.17.34.03;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2005.11.04.19.30.22;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2005.10.03.15.55.52;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2005.09.20.20.02.20;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2005.09.19.14.49.33;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2005.09.15.16.10.42;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2005.09.14.21.54.45;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.07.14.18.16.50;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.07.11.22.53.49;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.03.12.15.09.23;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.30.23.07.51;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.01.21.05.04;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.02.22.18.35;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.09.19.52.33;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.02.20.53.13;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.25.16.08.17;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.22.23.11.44;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.13.21.03.55;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.28.19.23.04;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.24;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.23;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.26;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.26;	author wit;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef MsgFacH
#define MsgFacH

//------------------------------------------------------------------------------
// Header file: "MsgFac.h"
//
// Contains the declaration of class MsgFacility.
//------------------------------------------------------------------------------

#include <MsgArg.h>

//------------------------------------------------------------------------------
// class MsgFacility
//
// Responsible for managing and issuing messages.
// This is the interface to the Message Subsystem, which is implemented using
// MCL.
//------------------------------------------------------------------------------

class WitMsgFacility
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMsgFacility (WitSession * theSession);
         //
         // mySession_ <-- theSession.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMsgFacility ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitSession *, mySession)

      FILE *            myFile     ();
      const WitString & fileName   ();
      const WitString & accessMode ();
      int               lineLength ();

      const char * boolText (bool theValue);
         //
         // Returns the text representing theValue.

      inline static bool stopRunningWasSet ()
         {
         return stopRunningWasSet_;
         }

      //------------------------------------------------------------------------
      // Access functions for Msgs.
      // Each of these functions returns the value of the indicated attribute
      // of the Msg whose external number is given by the arg.
      //------------------------------------------------------------------------

      bool displayExternalNumber (int);
      bool stopRunning           (int);
      bool throwErrorExc         (int);
      int  maxTimesIssued        (int);

      //------------------------------------------------------------------------
      // Set functions.
      //------------------------------------------------------------------------

      void setAccessMode (const char *);
      void setLineLength (int);

      void setMyFile (FILE * theFile, const char * theName);
         //
         // myFile   <-- theFile.
         // fileName <-- theName.

      void setBoolMsgFrags (
            WitMsgFrag theTrueFrag,
            WitMsgFrag theFalseFrag);
         //
         // Sets the MsgFrags for true and false to the arguments.

      //------------------------------------------------------------------------
      // Set functions for Msgs.
      // Each of these functions sets the indicated attribute of the Msg whose
      // external number is given by the first arg to the value of the second
      // arg.
      //------------------------------------------------------------------------

      void setDisplayExternalNumber (int, bool);
      void setStopRunning           (int, bool);
      void setThrowErrorExc         (int, bool);
      void setMaxTimesIssued        (int, int);

      //------------------------------------------------------------------------
      // Set functions for Severity Levels.
      // Each of these functions sets the indicated attribute of the Msg whose
      // Severity Level has an external number is given by the first arg to
      // the value of the second arg.
      //------------------------------------------------------------------------

      void setDisplayExternalNumberByLevel (int, bool);
      void setStopRunningByLevel           (int, bool);
      void setThrowErrorExcByLevel         (int, bool);
      void setMaxTimesIssuedByLevel        (int, int);

      //------------------------------------------------------------------------
      // Message issuing functions.
      // Each of the following functions issues the Msg with the given msgID
      // and the given MsgArgs.
      //------------------------------------------------------------------------

      void operator () (
           WitMsgID theMsgID
         );

      void operator () (
           WitMsgID theMsgID
         , const WitMsgArg &
         );

      void operator () (
           WitMsgID theMsgID
         , const WitMsgArg &
         , const WitMsgArg &
         );

      void operator () (
           WitMsgID theMsgID
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &
         );

      void operator () (
           WitMsgID theMsgID
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &
         );

      void operator () (
           WitMsgID theMsgID
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &
         );


      void operator () (
           WitMsgID theMsgID
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &

         , const WitMsgArg & theMsgArg7  = emptyArg ()
         , const WitMsgArg & theMsgArg8  = emptyArg ()
         , const WitMsgArg & theMsgArg9  = emptyArg ()
         , const WitMsgArg & theMsgArg10 = emptyArg ()
         , const WitMsgArg & theMsgArg11 = emptyArg ()
         , const WitMsgArg & theMsgArg12 = emptyArg ()
         , const WitMsgArg & theMsgArg13 = emptyArg ()
         , const WitMsgArg & theMsgArg14 = emptyArg ()
         , const WitMsgArg & theMsgArg15 = emptyArg ()
         );
         //
         // Handles 6-15 Args; expand as needed.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static void issueByException (
            WitMsgID          theMsgID,
            const WitMsgArg & theMsgArg1 = emptyArg (),
            const WitMsgArg & theMsgArg2 = emptyArg (),
            const WitMsgArg & theMsgArg3 = emptyArg ());
         //
         // Throws an exception that is caught by the current API function,
         // which then issues the Msg with the given msgID and the given
         // MsgArgs. This Msg must be an aborting Msg.

      void abortIfErrors ();
         //
         // Aborts, if any Msgs of Level >= error has been issued.

      WitMsgFrag myFrag (WitMsgFragID theFragID);
         //
         // Creates and returns a MsgFrag for the MclMsgFrag whose id_ matches
         // theFragID. Issues a fatal error if no such MclMsgFrag exists.

      const char * fragText (WitMsgFragID theFragID);
         //
         // Returns the message fragment text identified by theFragID.

      bool mayIssue (WitMsgID theMsgID);
         //
         // Returns true, iff the indicated Msg is currently eligible for being
         // issued. More presicely, if it is possible that the Msg would be
         // issued, the function certainly returns true; if it is not possible,
         // the function probably returns false, but there may be cases in which
         // it returns true anyway. This function allows client code to filter
         // out unneeded Msg issuing, to improve run-time speed.

      void setMaxTimesIssued (WitMsgID theMsgID, int theValue);
         //
         // Sets maxTimesIssued if the Msg whose ID is theMsgID to theValue.

      bool isExtNumOfMsg (int theExtNum);
         //
         // Returns true, iff theExtNum is the extNum of a Msg.

      bool isExtNumOfLevel (int theExtNum);
         //
         // Returns true, iff theExtNum is the extNum of an MclLevel.

      void listUnissuedMsgs ();
         //
         // Displays a list of a testable Msgs that have not been issued.

      bool displayStateChange (
            WitMsgID theMsgID,
            bool     currentMode,
            bool     newMode);
         //
         // To be called when the state of the WitRun is being changed.
         // currentMode is the current value of the attribute.
         // newMode     is the new     value of the attribute.
         // If the values are different, the indicated Msg is issued.
         // Returns the new state attribute value.

      void setCrashOnFatal (bool theValue);
         //
         // myMsgMsg->crashOnFatal_ <-- theValue

      void divide ();
         //
         // Issues a divider Msg of the appropriate length.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMsgFacility);

      inline MclFacility & myMclFacility ();
         //
         // Returns myMsgMgr_->myMclFacility ()

      inline WitOutputDisplayer & myDisp ();
         //
         // Returns myMsgMgr_->myDisp ()

      WitMsg * extNumMsg (int theExtNum);
         //
         // Returns is the Msg whose externalNumber is theExtNum.
         // Asserts that one exists.

      const MclLevel & extNumLevel (int theExtNum);
         //
         // Returns the MclLevel matching theExtNum, which is require to exist.

      const MclLevel * extNumLevelPtr (int theExtNum);
         //
         // Returns a ptr to the MclLevel matching theExtNum, if any, else NULL.

      inline WitMsgFacility & myMsgFac ()
         {
         return * this;
         }
         //
         // Allows this MsgFacility to use itself in a manner identical to its
         // clients.

      inline static const WitMsgArg & emptyArg ()
         {
         return * emptyArgPtr_;
         }
         //
         // Returns a MsgArg that contains no actual argument.
         // Used as a default value for optional arguments.

      //------------------------------------------------------------------------
      // Static private member data.
      //------------------------------------------------------------------------

      static const WitMsgArg * emptyArgPtr_;
         //
         // Ptr to a MsgArg that contains no actual argument.
         // Used as a default value for optional arguments.

      static bool stopRunningWasSet_;
         //
         // True, iff the stopRunning attribute of any Msg has been set.

      //------------------------------------------------------------------------
      // Non-static private member data.
      //------------------------------------------------------------------------

      WitSession * const mySession_;
         //
         // The Session that owns this MsgFacility.

      WitMsgMgr * myMsgMgr_;
         //
         // The MsgMgr owned by this MsgFacility.

      bool usingTempFile_;
         //
         // true, iff this MsgFacility is currently using a temp file.

      FILE * nonTempFile_;
         //
         // The non-temporary file, when a temporary one is being used;
         // otherwise NULL.
   };

#endif
@


1.25
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.24
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d30 2
a31 209
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitMsgFacility (WitSession * theSession);
//
// mySession_ <-- theSession.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitMsgFacility ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitSession *, mySession)

FILE *            myFile     ();
const WitString & fileName   ();
const WitString & accessMode ();
int               lineLength ();

const char * boolText (bool theValue);
//
// Returns the text representing theValue.

inline static bool stopRunningWasSet ()
{
return stopRunningWasSet_;
}

//------------------------------------------------------------------------
// Access functions for Msgs.
// Each of these functions returns the value of the indicated attribute
// of the Msg whose external number is given by the arg.
//------------------------------------------------------------------------

bool displayExternalNumber (int);
bool stopRunning           (int);
bool throwErrorExc         (int);
int  maxTimesIssued        (int);

//------------------------------------------------------------------------
// Set functions.
//------------------------------------------------------------------------

void setAccessMode (const char *);
void setLineLength (int);

void setMyFile (FILE * theFile, const char * theName);
//
// myFile   <-- theFile.
// fileName <-- theName.

void setBoolMsgFrags (
WitMsgFrag theTrueFrag,
WitMsgFrag theFalseFrag);
//
// Sets the MsgFrags for true and false to the arguments.

//------------------------------------------------------------------------
// Set functions for Msgs.
// Each of these functions sets the indicated attribute of the Msg whose
// external number is given by the first arg to the value of the second
// arg.
//------------------------------------------------------------------------

void setDisplayExternalNumber (int, bool);
void setStopRunning           (int, bool);
void setThrowErrorExc         (int, bool);
void setMaxTimesIssued        (int, int);

//------------------------------------------------------------------------
// Set functions for Severity Levels.
// Each of these functions sets the indicated attribute of the Msg whose
// Severity Level has an external number is given by the first arg to
// the value of the second arg.
//------------------------------------------------------------------------

void setDisplayExternalNumberByLevel (int, bool);
void setStopRunningByLevel           (int, bool);
void setThrowErrorExcByLevel         (int, bool);
void setMaxTimesIssuedByLevel        (int, int);

//------------------------------------------------------------------------
// Message issuing functions.
// Each of the following functions issues the Msg with the given msgID
// and the given MsgArgs.
//------------------------------------------------------------------------

void operator () (
WitMsgID theMsgID
);

void operator () (
WitMsgID theMsgID
, const WitMsgArg &
);

void operator () (
WitMsgID theMsgID
, const WitMsgArg &
, const WitMsgArg &
);

void operator () (
WitMsgID theMsgID
, const WitMsgArg &
, const WitMsgArg &
, const WitMsgArg &
);

void operator () (
WitMsgID theMsgID
, const WitMsgArg &
, const WitMsgArg &
, const WitMsgArg &
, const WitMsgArg &
);

void operator () (
WitMsgID theMsgID
, const WitMsgArg &
, const WitMsgArg &
, const WitMsgArg &
, const WitMsgArg &
, const WitMsgArg &
);


void operator () (
WitMsgID theMsgID
, const WitMsgArg &
, const WitMsgArg &
, const WitMsgArg &
, const WitMsgArg &
, const WitMsgArg &
, const WitMsgArg &

, const WitMsgArg & theMsgArg7  = emptyArg ()
, const WitMsgArg & theMsgArg8  = emptyArg ()
, const WitMsgArg & theMsgArg9  = emptyArg ()
, const WitMsgArg & theMsgArg10 = emptyArg ()
, const WitMsgArg & theMsgArg11 = emptyArg ()
, const WitMsgArg & theMsgArg12 = emptyArg ()
, const WitMsgArg & theMsgArg13 = emptyArg ()
, const WitMsgArg & theMsgArg14 = emptyArg ()
, const WitMsgArg & theMsgArg15 = emptyArg ()
);
//
// Handles 6-15 Args; expand as needed.

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

static void issueByException (
WitMsgID          theMsgID,
const WitMsgArg & theMsgArg1 = emptyArg (),
const WitMsgArg & theMsgArg2 = emptyArg (),
const WitMsgArg & theMsgArg3 = emptyArg ());
//
// Throws an exception that is caught by the current API function,
// which then issues the Msg with the given msgID and the given
// MsgArgs. This Msg must be an aborting Msg.

void abortIfErrors ();
//
// Aborts, if any Msgs of Level >= error has been issued.

WitMsgFrag myFrag (WitMsgFragID theFragID);
//
// Creates and returns a MsgFrag for the MclMsgFrag whose id_ matches
// theFragID. Issues a fatal error if no such MclMsgFrag exists.

const char * fragText (WitMsgFragID theFragID);
//
// Returns the message fragment text identified by theFragID.

bool mayIssue (WitMsgID theMsgID);
//
// Returns true, iff the indicated Msg is currently eligible for being
// issued. More presicely, if it is possible that the Msg would be
// issued, the function certainly returns true; if it is not possible,
// the function probably returns false, but there may be cases in which
// it returns true anyway. This function allows client code to filter
// out unneeded Msg issuing, to improve run-time speed.

void setMaxTimesIssued (WitMsgID theMsgID, int theValue);
//
// Sets maxTimesIssued if the Msg whose ID is theMsgID to theValue.

bool isExtNumOfMsg (int theExtNum);
//
// Returns true, iff theExtNum is the extNum of a Msg.

bool isExtNumOfLevel (int theExtNum);
//
// Returns true, iff theExtNum is the extNum of an MclLevel.

void listUnissuedMsgs ();
//
// Displays a list of a testable Msgs that have not been issued.
d33 305
a337 98
bool displayStateChange (
WitMsgID theMsgID,
bool     currentMode,
bool     newMode);
//
// To be called when the state of the WitRun is being changed.
// currentMode is the current value of the attribute.
// newMode     is the new     value of the attribute.
// If the values are different, the indicated Msg is issued.
// Returns the new state attribute value.

void setCrashOnFatal (bool theValue);
//
// myMsgMsg->crashOnFatal_ <-- theValue

void divide ();
//
// Issues a divider Msg of the appropriate length.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitMsgFacility);

inline MclFacility & myMclFacility ();
//
// Returns myMsgMgr_->myMclFacility ()

inline WitOutputDisplayer & myDisp ();
//
// Returns myMsgMgr_->myDisp ()

WitMsg * extNumMsg (int theExtNum);
//
// Returns is the Msg whose externalNumber is theExtNum.
// Asserts that one exists.

const MclLevel & extNumLevel (int theExtNum);
//
// Returns the MclLevel matching theExtNum, which is require to exist.

const MclLevel * extNumLevelPtr (int theExtNum);
//
// Returns a ptr to the MclLevel matching theExtNum, if any, else NULL.

inline WitMsgFacility & myMsgFac ()
{
return * this;
}
//
// Allows this MsgFacility to use itself in a manner identical to its
// clients.

inline static const WitMsgArg & emptyArg ()
{
return * emptyArgPtr_;
}
//
// Returns a MsgArg that contains no actual argument.
// Used as a default value for optional arguments.

//------------------------------------------------------------------------
// Static private member data.
//------------------------------------------------------------------------

static const WitMsgArg * emptyArgPtr_;
//
// Ptr to a MsgArg that contains no actual argument.
// Used as a default value for optional arguments.

static bool stopRunningWasSet_;
//
// True, iff the stopRunning attribute of any Msg has been set.

//------------------------------------------------------------------------
// Non-static private member data.
//------------------------------------------------------------------------

WitSession * const mySession_;
//
// The Session that owns this MsgFacility.

WitMsgMgr * myMsgMgr_;
//
// The MsgMgr owned by this MsgFacility.

bool usingTempFile_;
//
// true, iff this MsgFacility is currently using a temp file.

FILE * nonTempFile_;
//
// The non-temporary file, when a temporary one is being used;
// otherwise NULL.
};
@


1.23
log
@Fixed a bug:
   witWriteData was using upper case for true and false.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d30 209
a238 2
   {
   public:
d240 98
a337 305
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMsgFacility (WitSession * theSession);
         //
         // mySession_ <-- theSession.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMsgFacility ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitSession *, mySession)

      FILE *            myFile     ();
      const WitString & fileName   ();
      const WitString & accessMode ();
      int               lineLength ();

      const char * boolText (bool theValue);
         //
         // Returns the text representing theValue.

      inline static bool stopRunningWasSet ()
         {
         return stopRunningWasSet_;
         }

      //------------------------------------------------------------------------
      // Access functions for Msgs.
      // Each of these functions returns the value of the indicated attribute
      // of the Msg whose external number is given by the arg.
      //------------------------------------------------------------------------

      bool displayExternalNumber (int);
      bool stopRunning           (int);
      bool throwErrorExc         (int);
      int  maxTimesIssued        (int);

      //------------------------------------------------------------------------
      // Set functions.
      //------------------------------------------------------------------------

      void setAccessMode (const char *);
      void setLineLength (int);

      void setMyFile (FILE * theFile, const char * theName);
         //
         // myFile   <-- theFile.
         // fileName <-- theName.

      void setBoolMsgFrags (
            WitMsgFrag theTrueFrag,
            WitMsgFrag theFalseFrag);
         //
         // Sets the MsgFrags for true and false to the arguments.

      //------------------------------------------------------------------------
      // Set functions for Msgs.
      // Each of these functions sets the indicated attribute of the Msg whose
      // external number is given by the first arg to the value of the second
      // arg.
      //------------------------------------------------------------------------

      void setDisplayExternalNumber (int, bool);
      void setStopRunning           (int, bool);
      void setThrowErrorExc         (int, bool);
      void setMaxTimesIssued        (int, int);

      //------------------------------------------------------------------------
      // Set functions for Severity Levels.
      // Each of these functions sets the indicated attribute of the Msg whose
      // Severity Level has an external number is given by the first arg to
      // the value of the second arg.
      //------------------------------------------------------------------------

      void setDisplayExternalNumberByLevel (int, bool);
      void setStopRunningByLevel           (int, bool);
      void setThrowErrorExcByLevel         (int, bool);
      void setMaxTimesIssuedByLevel        (int, int);

      //------------------------------------------------------------------------
      // Message issuing functions.
      // Each of the following functions issues the Msg with the given msgID
      // and the given MsgArgs.
      //------------------------------------------------------------------------

      void operator () (
           WitMsgID theMsgID
         );

      void operator () (
           WitMsgID theMsgID
         , const WitMsgArg &
         );

      void operator () (
           WitMsgID theMsgID
         , const WitMsgArg &
         , const WitMsgArg &
         );

      void operator () (
           WitMsgID theMsgID
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &
         );

      void operator () (
           WitMsgID theMsgID
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &
         );

      void operator () (
           WitMsgID theMsgID
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &
         );


      void operator () (
           WitMsgID theMsgID
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &
         , const WitMsgArg &

         , const WitMsgArg & theMsgArg7  = emptyArg ()
         , const WitMsgArg & theMsgArg8  = emptyArg ()
         , const WitMsgArg & theMsgArg9  = emptyArg ()
         , const WitMsgArg & theMsgArg10 = emptyArg ()
         , const WitMsgArg & theMsgArg11 = emptyArg ()
         , const WitMsgArg & theMsgArg12 = emptyArg ()
         , const WitMsgArg & theMsgArg13 = emptyArg ()
         , const WitMsgArg & theMsgArg14 = emptyArg ()
         , const WitMsgArg & theMsgArg15 = emptyArg ()
         );
         //
         // Handles 6-15 Args; expand as needed.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static void issueByException (
            WitMsgID          theMsgID,
            const WitMsgArg & theMsgArg1 = emptyArg (),
            const WitMsgArg & theMsgArg2 = emptyArg (),
            const WitMsgArg & theMsgArg3 = emptyArg ());
         //
         // Throws an exception that is caught by the current API function,
         // which then issues the Msg with the given msgID and the given
         // MsgArgs. This Msg must be an aborting Msg.

      void abortIfErrors ();
         //
         // Aborts, if any Msgs of Level >= error has been issued.

      WitMsgFrag myFrag (WitMsgFragID theFragID);
         //
         // Creates and returns a MsgFrag for the MclMsgFrag whose id_ matches
         // theFragID. Issues a fatal error if no such MclMsgFrag exists.

      const char * fragText (WitMsgFragID theFragID);
         //
         // Returns the message fragment text identified by theFragID.

      bool mayIssue (WitMsgID theMsgID);
         //
         // Returns true, iff the indicated Msg is currently eligible for being
         // issued. More presicely, if it is possible that the Msg would be
         // issued, the function certainly returns true; if it is not possible,
         // the function probably returns false, but there may be cases in which
         // it returns true anyway. This function allows client code to filter
         // out unneeded Msg issuing, to improve run-time speed.

      void setMaxTimesIssued (WitMsgID theMsgID, int theValue);
         //
         // Sets maxTimesIssued if the Msg whose ID is theMsgID to theValue.

      bool isExtNumOfMsg (int theExtNum);
         //
         // Returns true, iff theExtNum is the extNum of a Msg.

      bool isExtNumOfLevel (int theExtNum);
         //
         // Returns true, iff theExtNum is the extNum of an MclLevel.

      void listUnissuedMsgs ();
         //
         // Displays a list of a testable Msgs that have not been issued.

      bool displayStateChange (
            WitMsgID theMsgID,
            bool     currentMode,
            bool     newMode);
         //
         // To be called when the state of the WitRun is being changed.
         // currentMode is the current value of the attribute.
         // newMode     is the new     value of the attribute.
         // If the values are different, the indicated Msg is issued.
         // Returns the new state attribute value.

      void setCrashOnFatal (bool theValue);
         //
         // myMsgMsg->crashOnFatal_ <-- theValue

      void divide ();
         //
         // Issues a divider Msg of the appropriate length.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMsgFacility);

      inline MclFacility & myMclFacility ();
         //
         // Returns myMsgMgr_->myMclFacility ()

      inline WitOutputDisplayer & myDisp ();
         //
         // Returns myMsgMgr_->myDisp ()

      WitMsg * extNumMsg (int theExtNum);
         //
         // Returns is the Msg whose externalNumber is theExtNum.
         // Asserts that one exists.

      const MclLevel & extNumLevel (int theExtNum);
         //
         // Returns the MclLevel matching theExtNum, which is require to exist.

      const MclLevel * extNumLevelPtr (int theExtNum);
         //
         // Returns a ptr to the MclLevel matching theExtNum, if any, else NULL.

      inline WitMsgFacility & myMsgFac ()
         {
         return * this;
         }
         //
         // Allows this MsgFacility to use itself in a manner identical to its
         // clients.

      inline static const WitMsgArg & emptyArg ()
         {
         return * emptyArgPtr_;
         }
         //
         // Returns a MsgArg that contains no actual argument.
         // Used as a default value for optional arguments.

      //------------------------------------------------------------------------
      // Static private member data.
      //------------------------------------------------------------------------

      static const WitMsgArg * emptyArgPtr_;
         //
         // Ptr to a MsgArg that contains no actual argument.
         // Used as a default value for optional arguments.

      static bool stopRunningWasSet_;
         //
         // True, iff the stopRunning attribute of any Msg has been set.

      //------------------------------------------------------------------------
      // Non-static private member data.
      //------------------------------------------------------------------------

      WitSession * const mySession_;
         //
         // The Session that owns this MsgFacility.

      WitMsgMgr * myMsgMgr_;
         //
         // The MsgMgr owned by this MsgFacility.

      bool usingTempFile_;
         //
         // true, iff this MsgFacility is currently using a temp file.

      FILE * nonTempFile_;
         //
         // The non-temporary file, when a temporary one is being used;
         // otherwise NULL.
   };
@


1.22
log
@Updated the copyright date on all source files.
@
text
@d90 6
@


1.21
log
@[error recovery]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.20
log
@[multi-thread]
@
text
@d62 5
d299 14
a312 1
      // Private member data.
a330 5

      static const WitMsgArg * emptyArgPtr_;
         //
         // Ptr to a MsgArg that contains no actual argument.
         // Used as a default value for optional arguments.
@


1.19
log
@[multi-thread]
@
text
@d25 2
a26 1
// This is the facade to the Message Subsystem, which is implemented using MCL.
d164 9
a172 9
         , const WitMsgArg & theMsgArg7  = emptyArg_
         , const WitMsgArg & theMsgArg8  = emptyArg_
         , const WitMsgArg & theMsgArg9  = emptyArg_
         , const WitMsgArg & theMsgArg10 = emptyArg_
         , const WitMsgArg & theMsgArg11 = emptyArg_
         , const WitMsgArg & theMsgArg12 = emptyArg_
         , const WitMsgArg & theMsgArg13 = emptyArg_
         , const WitMsgArg & theMsgArg14 = emptyArg_
         , const WitMsgArg & theMsgArg15 = emptyArg_
d183 3
a185 3
            const WitMsgArg & theMsgArg1 = emptyArg_,
            const WitMsgArg & theMsgArg2 = emptyArg_,
            const WitMsgArg & theMsgArg3 = emptyArg_);
d285 8
d314 1
a314 1
      static const WitMsgArg emptyArg_;
d316 1
a316 1
         // A MsgArg that contains no actual argument.
@


1.18
log
@Updated WIT's exception throwing capability.
@
text
@d163 9
a171 9
         , const WitMsgArg & theMsgArg7  = * emptyArgPtr_
         , const WitMsgArg & theMsgArg8  = * emptyArgPtr_
         , const WitMsgArg & theMsgArg9  = * emptyArgPtr_
         , const WitMsgArg & theMsgArg10 = * emptyArgPtr_
         , const WitMsgArg & theMsgArg11 = * emptyArgPtr_
         , const WitMsgArg & theMsgArg12 = * emptyArgPtr_
         , const WitMsgArg & theMsgArg13 = * emptyArgPtr_
         , const WitMsgArg & theMsgArg14 = * emptyArgPtr_
         , const WitMsgArg & theMsgArg15 = * emptyArgPtr_
d182 3
a184 3
            const WitMsgArg & theMsgArg1 = * emptyArgPtr_,
            const WitMsgArg & theMsgArg2 = * emptyArgPtr_,
            const WitMsgArg & theMsgArg3 = * emptyArgPtr_);
d305 1
a305 1
      static const WitMsgArg * emptyArgPtr_;
d307 1
a307 1
         // Ptr to a MsgArg that contains no actual argument.
@


1.17
log
@[multi-thread]
@
text
@d69 1
a69 1
      bool throwException        (int);
d93 1
a93 1
      void setThrowException        (int, bool);
d105 1
a105 1
      void setThrowExceptionByLevel        (int, bool);
@


1.16
log
@[multi-thread]
@
text
@d188 1
a188 1
         // MsgArgs.
@


1.15
log
@[exceptions]
@
text
@d180 10
@


1.14
log
@[exceptions]
@
text
@d68 1
a68 1
      bool stopOnAbort           (int);
d92 1
a92 1
      void setStopOnAbort           (int, bool);
d104 1
a104 1
      void setStopOnAbortByLevel           (int, bool);
@


1.13
log
@Double Precision.
@
text
@d69 1
d93 1
d105 1
@


1.12
log
@Continued double precision.
@
text
@a60 5
      static WitMsgFacility & current ();
         //
         // Returns * currentPtr_.
         // Issues a fatal error, if currentPtr_ is NULL.

a82 9
      static void setCurrentPtr (WitMsgFacility * theMsgFacPtr);
         //
         // Sets currentPtr_ to theMsgFacPtr, which may be NULL.

      WitMsgFacility * becomesCurrent ();
         //
         // Sets currentPtr_ to this MsgFacility.
         // Returns the old value of currentPtr_

a281 4

      static WitMsgFacility * currentPtr_;
         //
         // Pointer to the Msgfacility currently in use, if any, else NULL.
@


1.11
log
@Continued implementation of PIP.
@
text
@d172 1
a173 1
         , const WitMsgArg &
@


1.10
log
@Internal changes.
@
text
@d28 1
a28 1
class WitMsgFacility: public WitUtil
@


1.9
log
@Continued implementation of single-source.
@
text
@d57 1
a57 1
      const char * booleanText (WitBoolean theValue);
d72 3
a74 3
      WitBoolean displayExternalNumber (int);
      WitBoolean stopOnAbort           (int);
      int        maxTimesIssued        (int);
d104 2
a105 2
      void setDisplayExternalNumber (int, WitBoolean);
      void setStopOnAbort           (int, WitBoolean);
d115 2
a116 2
      void setDisplayExternalNumberByLevel (int, WitBoolean);
      void setStopOnAbortByLevel           (int, WitBoolean);
d204 1
a204 1
      WitBoolean mayIssue (WitMsgID theMsgID);
d206 1
a206 1
         // Returns TRUE, iff the indicated Msg is currently eligible for being
d208 3
a210 3
         // issued, the function certainly returns TRUE; if it is not possible,
         // the function probably returns FALSE, but there may be cases in which
         // it returns TRUE anyway. This function allows client code to filter
d217 1
a217 1
      WitBoolean isExtNumOfMsg (int theExtNum);
d219 1
a219 1
         // Returns TRUE, iff theExtNum is the extNum of a Msg.
d221 1
a221 1
      WitBoolean isExtNumOfLevel (int theExtNum);
d223 1
a223 1
         // Returns TRUE, iff theExtNum is the extNum of an MclLevel.
d229 4
a232 4
      WitBoolean displayStateChange (
            WitMsgID   theMsgID,
            WitBoolean currentMode,
            WitBoolean newMode);
d240 1
a240 1
      void setCrashOnFatal (WitBoolean theValue);
d301 1
a301 1
      WitBoolean usingTempFile_;
d303 1
a303 1
         // TRUE, iff this MsgFacility is currently using a temp file.
@


1.8
log
@Preliminary work on single source.
@
text
@d16 1
a16 93
// Contains the declaration of the following classes:
//
//    MsgFrag.
//    MsgArg.
//    MsgFacility.
//    TempMsgFile.
//
// These classes form WIT's interface to its Message Subsystem.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------

class MclArg;
class MclFacility;
class MclLevel;
class MclMsgFrag;

//------------------------------------------------------------------------------

class WitMsgArg;
class WitMsgFacility;
class WitOutputDisplayer;
class WitMsgMgr;
class WitMsg;

//------------------------------------------------------------------------------
// Class MsgFrag
//
// Wrapper for an MclMsgArg.
//
// Implemented inline.
//------------------------------------------------------------------------------

class WitMsgFrag: public WitUtil
   {
      //------------------------------------------------------------------------
      // Friends.
      //------------------------------------------------------------------------

      friend WitMsgArg;
      friend WitMsgFacility;

   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitMsgFrag (MclMsgFrag * theMclMsgFrag):
            myMclMsgFrag_ (theMclMsgFrag)
         {
         }

      inline WitMsgFrag (const WitMsgFrag & theMsgFrag):
            myMclMsgFrag_ (theMsgFrag.myMclMsgFrag_)
         {
         }
            //
            // Copy ctor.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitMsgFrag ()
         {
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      WitMsgFrag & operator = (const WitMsgFrag &);
         //
         // Not implemented; prevents unintentional assignment.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      MclMsgFrag * const myMclMsgFrag_;
         //
         // The MclMsgFrag for which this MsgFrag is a wrapper.
   };

//------------------------------------------------------------------------------
// Class MsgArg
//
// Wrapper for class MclArg.
d19 1
a19 65
class WitMsgArg: public WitUtil
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMsgArg ();
      WitMsgArg (int                       rawArg);
      WitMsgArg (size_t                    rawArg);
      WitMsgArg (long                      rawArg);
      WitMsgArg (float                     rawArg);
      WitMsgArg (double                    rawArg);
      WitMsgArg (const char *              rawArg);
      WitMsgArg (const WitString &         rawArg);
      WitMsgArg (const WitMsgFrag &        rawArg);
      WitMsgArg (const int *               rawArg, int length = 1);
      WitMsgArg (const float *             rawArg, int length = 1);
      WitMsgArg (const WitVector <int> &   rawArg);
      WitMsgArg (const WitVector <float> & rawArg);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMsgArg ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline const MclArg & myMclArg () const
         {
         witAssert (hasArg ());

         return * myMclArgPtr_;
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline WitBoolean hasArg () const
         {
         return (myMclArgPtr_ != NULL);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMsgArg);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      MclArg * const myMclArgPtr_;
         //
         // Pointer to the MclArg wrapped by this MsgArg, if any;
         // otherwise NULL.
   };
d195 1
a195 1
      WitMsgFrag operator [] (WitMsgFragID theFragID);
a313 73
   };

//------------------------------------------------------------------------------
// class TempMsgFile.
// Implements a temporary assignment of the message file to a different file.
// An instance of this class fulfils the following responsibility:
//    * When it is constructed, it assigns the message file to a specified
//      temporary file.
//    * When it is destructed, it restores the message file back to the
//      file to which it was assigned just prior to construction of the
//      WitTempMsgFile.
//
// An instance of this class is intended to be constructed (on the stack) near
// the beginning of any function that has an output file name parameter, where
// the output file is to be written to using the message facility. At the end
// of the function, the instance will be automatically destructed, thereby
// restoring the message file.
//------------------------------------------------------------------------------

class WitTempMsgFile: public WitUtil
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitTempMsgFile (WitMsgFacility & theMsgFac, const char * theFileName);
         //
         // myMsgFac_ <-- theMsgFac
         // fileName is the name of the file to which the message file is to
         // be temporarily assigned.
         // The body of this ctor performs the temporary assignment of the
         // message file.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitTempMsgFile ();
         //
         // The body of this dtor restores the message file and closes the
         // temporary file.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitTempMsgFile);

      accessFunc (WitMsgFacility &, myMsgFac)

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFacility for this TempMsgFile.

      WitBoolean active_;
         //
         // TRUE, iff a temporary file was actually used.

      FILE * prevFile_;
         //
         // myMsgFac ().myFile () before the temp file was used.

      WitString & prevFileName_;
         //
         // myMsgFac ().fileName () before the temp file was used.
@


1.7
log
@Initial implementation of pegging.
@
text
@d130 2
a131 2
      WitMsgArg (const WitVector (int) &   rawArg);
      WitMsgArg (const WitVector (float) & rawArg);
@


1.6
log
@Refactoring for selection splitting.
@
text
@d338 1
d341 1
a341 1
         // Handles 6-14 Args; expand as needed.
@


1.5
log
@Implemented respectStockSLBs and prefHighStockSLBs global attributes.
@
text
@d165 1
a165 1
      copyCtorAndAssignment (WitMsgArg);
d409 1
a409 3
      copyCtorAndAssignment (WitMsgFacility);
         //
         // Prevents unintentional copying and assignment.
d519 1
a519 3
      copyCtorAndAssignment (WitTempMsgFile);
         //
         // Prevents unintentional copying and assignment.
@


1.4
log
@Minor change to class MsgFacility.
@
text
@d336 2
d340 1
a340 1
         // Handles 6-12 Args; expand as needed.
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d208 4
a211 4
      FILE *            myFile     () const;
      const WitString & fileName   () const;
      const WitString & accessMode () const;
      int               lineLength () const;
d213 1
a213 1
      const char * booleanText (WitBoolean theValue) const;
d228 3
a230 3
      WitBoolean displayExternalNumber (int) const;
      WitBoolean stopOnAbort           (int) const;
      int        maxTimesIssued        (int) const;
d348 1
a348 1
      WitMsgFrag operator [] (WitMsgFragID theFragID) const;
d353 1
a353 1
      const char * fragText (WitMsgFragID theFragID) const;
d357 1
a357 1
      WitBoolean mayIssue (WitMsgID theMsgID) const;
d370 1
a370 1
      WitBoolean isExtNumOfMsg (int theExtNum) const;
d374 1
a374 1
      WitBoolean isExtNumOfLevel (int theExtNum) const;
d378 1
a378 1
      void listUnissuedMsgs () const;
d397 1
a397 1
      void divide () const;
d411 1
a411 1
      inline MclFacility & myMclFacility () const;
d415 1
a415 1
      inline WitOutputDisplayer & myDisp () const;
d419 1
a419 1
      WitMsg * extNumMsg (int theExtNum) const;
d424 1
a424 1
      const MclLevel & extNumLevel (int theExtNum) const;
d428 1
a428 1
      const MclLevel * extNumLevelPtr (int theExtNum) const;
d432 4
a435 1
      accessFunc (WitMsgFacility &, myMsgFac)
a450 5

      WitMsgFacility & myMsgFac_;
         //
         // This MsgFacility, non-const.
         // Enables const functions to issue messages.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d51 1
a51 1
class WitMsgFrag
d111 1
a111 1
class WitMsgArg
d184 1
a184 1
class WitMsgFacility
d490 1
a490 1
class WitTempMsgFile
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
