head	1.11;
access;
symbols
	sce_5_01_20080919:1.6;
locks; strict;
comment	@ * @;


1.11
date	2011.09.28.23.49.20;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.09.24.00.27.38;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.08.30.20.17.29;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2010.08.19.18.00.12;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2010.03.24.21.31.02;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.02.27.23.43.42;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.02.27.22.49.17;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.08.01.21.28.04;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.26.19.06.21;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.06.22.19.04.03;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.10.14.23.39;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "ExtOptMgr.C"
//
// Contains the implementation of class ExtOptMgr.
//------------------------------------------------------------------------------

#include <ExtOptMgr.h>
#include <DetImpOP.h>
#include <DetVars.h>
#include <DetCons.h>
#include <IVRealArg.h>
#include <Timing.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------
// Implementation of class ExtOptMgr.
//------------------------------------------------------------------------------

WitExtOptMgr::WitExtOptMgr (WitDetImpOP * theDetImpOP):

      WitProbAssoc  (theDetImpOP),
      myDetImpOP_   (theDetImpOP),
      solnProvided_ (false)
   {
   }

//------------------------------------------------------------------------------

WitExtOptMgr::~WitExtOptMgr ()
   {
   }

//------------------------------------------------------------------------------

void WitExtOptMgr::getLpProb (
      WitVector <int> &    start,
      WitVector <int> &    index,
      WitVector <double> & value,
      WitVector <double> & collb,
      WitVector <double> & colub,
      WitVector <double> & obj,
      WitVector <double> & rowlb,
      WitVector <double> & rowub)
   {
   WitTimer::enterSection ("opt-prob");

   myDetImpOP_->getMatrixByCols (start, index, value);

   getColData (collb, colub, obj);
   getRowData (rowlb, rowub);

   WitTimer::leaveSection ("opt-prob");
   }

//------------------------------------------------------------------------------

void WitExtOptMgr::getIntVarIndices (WitVector <int> & indices)
   {
   WitOptVar * theOptVar;
   int         nIntVars;
   int         vecIdx;

   WitTimer::enterSection ("opt-prob");

   nIntVars = 0;

   forEachEl (theOptVar, myDetImpOP_->myOptVars ())
      if (theOptVar->isAnIntVar ())
         nIntVars ++;

   indices.resize (nIntVars);

   vecIdx = -1;

   forEachEl (theOptVar, myDetImpOP_->myOptVars ())
      if (theOptVar->isAnIntVar ())
         {
         vecIdx ++;

         indices[vecIdx] = theOptVar->index ();
         }

   WitTimer::leaveSection ("opt-prob");
   }

//------------------------------------------------------------------------------

void WitExtOptMgr::setSoln (const WitIVRealArg & theVector)
   {
   WitOptVar * theOptVar;
   int         theIdx;

   WitTimer::enterSection ("opt-prob");

   forEachEl (theOptVar, myDetImpOP_->myOptVars ())
      {
      theIdx = theOptVar->index ();

      theOptVar->setPrimalValue (theVector[theIdx]);
      }

   solnProvided_ = true;

   WitTimer::leaveSection ("opt-prob");
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::scrapVarIndex (WitPart * thePart, WitPeriod thePer)
   {
   return indexOf (myDetImpOP_->myScrapVar (thePart, thePer));
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::nonSubVarIndex (WitBomEntry * theBomEnt, WitPeriod thePer)
   {
   return indexOf (myDetImpOP_->myNonSubVar (theBomEnt, thePer));
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::subVarIndex (WitSubEntry * theSub, WitPeriod thePer)
   {
   return indexOf (myDetImpOP_->mySubVar (theSub, thePer));
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::shipVarIndex (WitDemand * theDemand, WitPeriod thePer)
   {
   return indexOf (myDetImpOP_->myShipVar (theDemand, thePer));
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::execVarIndex (WitOperation * theOpn, WitPeriod thePer)
   {
   return indexOf (myDetImpOP_->myExecVar (theOpn, thePer));
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::stockVarIndex (WitMaterial * theMat, WitPeriod thePer)
   {
   return indexOf (myDetImpOP_->myStockVar (theMat, thePer));
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::cumShipVarIndex (WitDemand * theDemand, WitPeriod thePer)
   {
   return indexOf (myDetImpOP_->myCumShipVar (theDemand, thePer));
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::execSlbvVarIndex (WitOperation * theOpn, WitPeriod thePer)
   {
   return slbvVarIndexOf (myDetImpOP_->myExecVar (theOpn, thePer));
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::stockSlbvVarIndex (WitMaterial * theMat, WitPeriod thePer)
   {
   return slbvVarIndexOf (myDetImpOP_->myStockVar (theMat, thePer));
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::cumShipSlbvVarIndex (
      WitDemand * theDemand,
      WitPeriod   thePer)
   {
   return slbvVarIndexOf (myDetImpOP_->myCumShipVar (theDemand, thePer));
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::resourceConIndex (WitPart * thePart, WitPeriod thePer)
   {
   return indexOf (myDetImpOP_->myResourceCon (thePart, thePer));
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::subConIndex (WitBomEntry * theBomEnt, WitPeriod thePer)
   {
   return indexOf (myDetImpOP_->mySubCon (theBomEnt, thePer));
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::shipConIndex (WitDemand * theDemand, WitPeriod thePer)
   {
   return indexOf (myDetImpOP_->myShipCon (theDemand, thePer));
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::execSlbConIndex (WitOperation * theOpn, WitPeriod thePer)
   {
   return slbConIndexOf (myDetImpOP_->myExecVar (theOpn, thePer));
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::stockSlbConIndex (WitMaterial * theMat, WitPeriod thePer)
   {
   return slbConIndexOf (myDetImpOP_->myStockVar (theMat, thePer));
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::cumShipSlbConIndex (
      WitDemand * theDemand,
      WitPeriod   thePer)
   {
   return slbConIndexOf (myDetImpOP_->myCumShipVar (theDemand, thePer));
   }

//------------------------------------------------------------------------------

void WitExtOptMgr::getColData (
      WitVector <double> & collb,
      WitVector <double> & colub,
      WitVector <double> & obj)
   {
   WitOptVar * theOptVar;
   int         theIdx;

   collb.resize (myDetImpOP_->nOptVars ());
   colub.resize (myDetImpOP_->nOptVars ());
   obj  .resize (myDetImpOP_->nOptVars ());

   forEachEl (theOptVar, myDetImpOP_->myOptVars ())
      {
      theIdx        = theOptVar->index ();

      collb[theIdx] = theOptVar->bounds ().lower ();
      colub[theIdx] = theOptVar->bounds ().upper ();

      obj  [theIdx] = theOptVar->objCoeff ();
      }
   }

//------------------------------------------------------------------------------

void WitExtOptMgr::getRowData (
      WitVector <double> & rowlb,
      WitVector <double> & rowub)
   {
   WitOptCon * theOptCon;
   int         theIdx;

   rowlb.resize (myDetImpOP_->nOptCons ());
   rowub.resize (myDetImpOP_->nOptCons ());

   forEachEl (theOptCon, myDetImpOP_->myOptCons ())
      {
      theIdx        = theOptCon->index ();

      rowlb[theIdx] = theOptCon->bounds ().lower ();
      rowub[theIdx] = theOptCon->bounds ().upper ();
      }
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::slbvVarIndexOf (WitBoundedVar * theBoundedVar)
   {
   WitSlbvVar * theSlbvVar;

   if (theBoundedVar == NULL)
      return -1;

   theSlbvVar = myDetImpOP_->mySlbvVar (theBoundedVar);

   return indexOf (theSlbvVar);
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::slbConIndexOf (WitBoundedVar * theBoundedVar)
   {
   WitSlbCon * theSlbCon;

   if (theBoundedVar == NULL)
      return -1;

   theSlbCon = myDetImpOP_->mySlbCon (theBoundedVar);

   return indexOf (theSlbCon);
   }

//------------------------------------------------------------------------------

int WitExtOptMgr::indexOf (WitOptVC * theOptVC)
   {
   if (theOptVC == NULL)
      return -1;

   return theOptVC->index ();
   }
@


1.10
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.9
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d30 5
a34 5
WitProbAssoc  (theDetImpOP),
myDetImpOP_   (theDetImpOP),
solnProvided_ (false)
{
}
d39 2
a40 2
{
}
d45 10
a54 10
WitVector <int> &    start,
WitVector <int> &    index,
WitVector <double> & value,
WitVector <double> & collb,
WitVector <double> & colub,
WitVector <double> & obj,
WitVector <double> & rowlb,
WitVector <double> & rowub)
{
WitTimer::enterSection ("opt-prob");
d56 1
a56 1
myDetImpOP_->getMatrixByCols (start, index, value);
d58 2
a59 2
getColData (collb, colub, obj);
getRowData (rowlb, rowub);
d61 2
a62 2
WitTimer::leaveSection ("opt-prob");
}
d67 4
a70 4
{
WitOptVar * theOptVar;
int         nIntVars;
int         vecIdx;
d72 1
a72 1
WitTimer::enterSection ("opt-prob");
d74 1
a74 1
nIntVars = 0;
d76 3
a78 3
forEachEl (theOptVar, myDetImpOP_->myOptVars ())
if (theOptVar->isAnIntVar ())
nIntVars ++;
d80 1
a80 1
indices.resize (nIntVars);
d82 1
a82 1
vecIdx = -1;
d84 4
a87 4
forEachEl (theOptVar, myDetImpOP_->myOptVars ())
if (theOptVar->isAnIntVar ())
{
vecIdx ++;
d89 2
a90 2
indices[vecIdx] = theOptVar->index ();
}
d92 2
a93 2
WitTimer::leaveSection ("opt-prob");
}
d98 3
a100 3
{
WitOptVar * theOptVar;
int         theIdx;
d102 1
a102 1
WitTimer::enterSection ("opt-prob");
d104 3
a106 3
forEachEl (theOptVar, myDetImpOP_->myOptVars ())
{
theIdx = theOptVar->index ();
d108 2
a109 2
theOptVar->setPrimalValue (theVector[theIdx]);
}
d111 1
a111 1
solnProvided_ = true;
d113 2
a114 2
WitTimer::leaveSection ("opt-prob");
}
d119 3
a121 3
{
return indexOf (myDetImpOP_->myScrapVar (thePart, thePer));
}
d126 3
a128 3
{
return indexOf (myDetImpOP_->myNonSubVar (theBomEnt, thePer));
}
d133 3
a135 3
{
return indexOf (myDetImpOP_->mySubVar (theSub, thePer));
}
d140 3
a142 3
{
return indexOf (myDetImpOP_->myShipVar (theDemand, thePer));
}
d147 3
a149 3
{
return indexOf (myDetImpOP_->myExecVar (theOpn, thePer));
}
d154 3
a156 3
{
return indexOf (myDetImpOP_->myStockVar (theMat, thePer));
}
d161 3
a163 3
{
return indexOf (myDetImpOP_->myCumShipVar (theDemand, thePer));
}
d168 3
a170 3
{
return slbvVarIndexOf (myDetImpOP_->myExecVar (theOpn, thePer));
}
d175 3
a177 3
{
return slbvVarIndexOf (myDetImpOP_->myStockVar (theMat, thePer));
}
d182 5
a186 5
WitDemand * theDemand,
WitPeriod   thePer)
{
return slbvVarIndexOf (myDetImpOP_->myCumShipVar (theDemand, thePer));
}
d191 3
a193 3
{
return indexOf (myDetImpOP_->myResourceCon (thePart, thePer));
}
d198 3
a200 3
{
return indexOf (myDetImpOP_->mySubCon (theBomEnt, thePer));
}
d205 3
a207 3
{
return indexOf (myDetImpOP_->myShipCon (theDemand, thePer));
}
d212 3
a214 3
{
return slbConIndexOf (myDetImpOP_->myExecVar (theOpn, thePer));
}
d219 3
a221 3
{
return slbConIndexOf (myDetImpOP_->myStockVar (theMat, thePer));
}
d226 5
a230 5
WitDemand * theDemand,
WitPeriod   thePer)
{
return slbConIndexOf (myDetImpOP_->myCumShipVar (theDemand, thePer));
}
d235 21
a255 21
WitVector <double> & collb,
WitVector <double> & colub,
WitVector <double> & obj)
{
WitOptVar * theOptVar;
int         theIdx;

collb.resize (myDetImpOP_->nOptVars ());
colub.resize (myDetImpOP_->nOptVars ());
obj  .resize (myDetImpOP_->nOptVars ());

forEachEl (theOptVar, myDetImpOP_->myOptVars ())
{
theIdx        = theOptVar->index ();

collb[theIdx] = theOptVar->bounds ().lower ();
colub[theIdx] = theOptVar->bounds ().upper ();

obj  [theIdx] = theOptVar->objCoeff ();
}
}
d260 17
a276 17
WitVector <double> & rowlb,
WitVector <double> & rowub)
{
WitOptCon * theOptCon;
int         theIdx;

rowlb.resize (myDetImpOP_->nOptCons ());
rowub.resize (myDetImpOP_->nOptCons ());

forEachEl (theOptCon, myDetImpOP_->myOptCons ())
{
theIdx        = theOptCon->index ();

rowlb[theIdx] = theOptCon->bounds ().lower ();
rowub[theIdx] = theOptCon->bounds ().upper ();
}
}
d281 2
a282 2
{
WitSlbvVar * theSlbvVar;
d284 2
a285 2
if (theBoundedVar == NULL)
return -1;
d287 1
a287 1
theSlbvVar = myDetImpOP_->mySlbvVar (theBoundedVar);
d289 2
a290 2
return indexOf (theSlbvVar);
}
d295 2
a296 2
{
WitSlbCon * theSlbCon;
d298 2
a299 2
if (theBoundedVar == NULL)
return -1;
d301 1
a301 1
theSlbCon = myDetImpOP_->mySlbCon (theBoundedVar);
d303 2
a304 2
return indexOf (theSlbCon);
}
d309 3
a311 3
{
if (theOptVC == NULL)
return -1;
d313 2
a314 2
return theOptVC->index ();
}
@


1.8
log
@CPLEX
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d30 5
a34 5
      WitProbAssoc  (theDetImpOP),
      myDetImpOP_   (theDetImpOP),
      solnProvided_ (false)
   {
   }
d39 2
a40 2
   {
   }
d45 10
a54 10
      WitVector <int> &    start,
      WitVector <int> &    index,
      WitVector <double> & value,
      WitVector <double> & collb,
      WitVector <double> & colub,
      WitVector <double> & obj,
      WitVector <double> & rowlb,
      WitVector <double> & rowub)
   {
   WitTimer::enterSection ("opt-prob");
d56 1
a56 1
   myDetImpOP_->getMatrixByCols (start, index, value);
d58 2
a59 2
   getColData (collb, colub, obj);
   getRowData (rowlb, rowub);
d61 2
a62 2
   WitTimer::leaveSection ("opt-prob");
   }
d67 4
a70 4
   {
   WitOptVar * theOptVar;
   int         nIntVars;
   int         vecIdx;
d72 1
a72 1
   WitTimer::enterSection ("opt-prob");
d74 1
a74 1
   nIntVars = 0;
d76 3
a78 3
   forEachEl (theOptVar, myDetImpOP_->myOptVars ())
      if (theOptVar->isAnIntVar ())
         nIntVars ++;
d80 1
a80 1
   indices.resize (nIntVars);
d82 1
a82 1
   vecIdx = -1;
d84 4
a87 4
   forEachEl (theOptVar, myDetImpOP_->myOptVars ())
      if (theOptVar->isAnIntVar ())
         {
         vecIdx ++;
d89 2
a90 2
         indices[vecIdx] = theOptVar->index ();
         }
d92 2
a93 2
   WitTimer::leaveSection ("opt-prob");
   }
d98 3
a100 3
   {
   WitOptVar * theOptVar;
   int         theIdx;
d102 1
a102 1
   WitTimer::enterSection ("opt-prob");
d104 3
a106 3
   forEachEl (theOptVar, myDetImpOP_->myOptVars ())
      {
      theIdx = theOptVar->index ();
d108 2
a109 2
      theOptVar->setPrimalValue (theVector[theIdx]);
      }
d111 1
a111 1
   solnProvided_ = true;
d113 2
a114 2
   WitTimer::leaveSection ("opt-prob");
   }
d119 3
a121 3
   {
   return indexOf (myDetImpOP_->myScrapVar (thePart, thePer));
   }
d126 3
a128 3
   {
   return indexOf (myDetImpOP_->myNonSubVar (theBomEnt, thePer));
   }
d133 3
a135 3
   {
   return indexOf (myDetImpOP_->mySubVar (theSub, thePer));
   }
d140 3
a142 3
   {
   return indexOf (myDetImpOP_->myShipVar (theDemand, thePer));
   }
d147 3
a149 3
   {
   return indexOf (myDetImpOP_->myExecVar (theOpn, thePer));
   }
d154 3
a156 3
   {
   return indexOf (myDetImpOP_->myStockVar (theMat, thePer));
   }
d161 3
a163 3
   {
   return indexOf (myDetImpOP_->myCumShipVar (theDemand, thePer));
   }
d168 3
a170 3
   {
   return slbvVarIndexOf (myDetImpOP_->myExecVar (theOpn, thePer));
   }
d175 3
a177 3
   {
   return slbvVarIndexOf (myDetImpOP_->myStockVar (theMat, thePer));
   }
d182 5
a186 5
      WitDemand * theDemand,
      WitPeriod   thePer)
   {
   return slbvVarIndexOf (myDetImpOP_->myCumShipVar (theDemand, thePer));
   }
d191 3
a193 3
   {
   return indexOf (myDetImpOP_->myResourceCon (thePart, thePer));
   }
d198 3
a200 3
   {
   return indexOf (myDetImpOP_->mySubCon (theBomEnt, thePer));
   }
d205 3
a207 3
   {
   return indexOf (myDetImpOP_->myShipCon (theDemand, thePer));
   }
d212 3
a214 3
   {
   return slbConIndexOf (myDetImpOP_->myExecVar (theOpn, thePer));
   }
d219 3
a221 3
   {
   return slbConIndexOf (myDetImpOP_->myStockVar (theMat, thePer));
   }
d226 5
a230 5
      WitDemand * theDemand,
      WitPeriod   thePer)
   {
   return slbConIndexOf (myDetImpOP_->myCumShipVar (theDemand, thePer));
   }
d235 21
a255 21
      WitVector <double> & collb,
      WitVector <double> & colub,
      WitVector <double> & obj)
   {
   WitOptVar * theOptVar;
   int         theIdx;

   collb.resize (myDetImpOP_->nOptVars ());
   colub.resize (myDetImpOP_->nOptVars ());
   obj  .resize (myDetImpOP_->nOptVars ());

   forEachEl (theOptVar, myDetImpOP_->myOptVars ())
      {
      theIdx        = theOptVar->index ();

      collb[theIdx] = theOptVar->bounds ().lower ();
      colub[theIdx] = theOptVar->bounds ().upper ();

      obj  [theIdx] = theOptVar->objCoeff ();
      }
   }
d260 17
a276 17
      WitVector <double> & rowlb,
      WitVector <double> & rowub)
   {
   WitOptCon * theOptCon;
   int         theIdx;

   rowlb.resize (myDetImpOP_->nOptCons ());
   rowub.resize (myDetImpOP_->nOptCons ());

   forEachEl (theOptCon, myDetImpOP_->myOptCons ())
      {
      theIdx        = theOptCon->index ();

      rowlb[theIdx] = theOptCon->bounds ().lower ();
      rowub[theIdx] = theOptCon->bounds ().upper ();
      }
   }
d281 2
a282 2
   {
   WitSlbvVar * theSlbvVar;
d284 2
a285 2
   if (theBoundedVar == NULL)
      return -1;
d287 1
a287 1
   theSlbvVar = myDetImpOP_->mySlbvVar (theBoundedVar);
d289 2
a290 2
   return indexOf (theSlbvVar);
   }
d295 2
a296 2
   {
   WitSlbCon * theSlbCon;
d298 2
a299 2
   if (theBoundedVar == NULL)
      return -1;
d301 1
a301 1
   theSlbCon = myDetImpOP_->mySlbCon (theBoundedVar);
d303 2
a304 2
   return indexOf (theSlbCon);
   }
d309 3
a311 3
   {
   if (theOptVC == NULL)
      return -1;
d313 2
a314 2
   return theOptVC->index ();
   }
@


1.7
log
@Removed OptObj classes.
@
text
@d17 1
a17 1
#include <DetImpOM.h>
d28 1
a28 1
WitExtOptMgr::WitExtOptMgr (WitDetImpOM * theDetImpOM):
d30 2
a31 2
      WitProbAssoc  (theDetImpOM),
      myDetImpOM_   (theDetImpOM),
d56 1
a56 1
   myDetImpOM_->getMatrixByCols (start, index, value);
d76 1
a76 1
   forEachEl (theOptVar, myDetImpOM_->myOptVars ())
d84 1
a84 1
   forEachEl (theOptVar, myDetImpOM_->myOptVars ())
d104 1
a104 1
   forEachEl (theOptVar, myDetImpOM_->myOptVars ())
d120 1
a120 1
   return indexOf (myDetImpOM_->myScrapVar (thePart, thePer));
d127 1
a127 1
   return indexOf (myDetImpOM_->myNonSubVar (theBomEnt, thePer));
d134 1
a134 1
   return indexOf (myDetImpOM_->mySubVar (theSub, thePer));
d141 1
a141 1
   return indexOf (myDetImpOM_->myShipVar (theDemand, thePer));
d148 1
a148 1
   return indexOf (myDetImpOM_->myExecVar (theOpn, thePer));
d155 1
a155 1
   return indexOf (myDetImpOM_->myStockVar (theMat, thePer));
d162 1
a162 1
   return indexOf (myDetImpOM_->myCumShipVar (theDemand, thePer));
d169 1
a169 1
   return slbvVarIndexOf (myDetImpOM_->myExecVar (theOpn, thePer));
d176 1
a176 1
   return slbvVarIndexOf (myDetImpOM_->myStockVar (theMat, thePer));
d185 1
a185 1
   return slbvVarIndexOf (myDetImpOM_->myCumShipVar (theDemand, thePer));
d192 1
a192 1
   return indexOf (myDetImpOM_->myResourceCon (thePart, thePer));
d199 1
a199 1
   return indexOf (myDetImpOM_->mySubCon (theBomEnt, thePer));
d206 1
a206 1
   return indexOf (myDetImpOM_->myShipCon (theDemand, thePer));
d213 1
a213 1
   return slbConIndexOf (myDetImpOM_->myExecVar (theOpn, thePer));
d220 1
a220 1
   return slbConIndexOf (myDetImpOM_->myStockVar (theMat, thePer));
d229 1
a229 1
   return slbConIndexOf (myDetImpOM_->myCumShipVar (theDemand, thePer));
d242 3
a244 3
   collb.resize (myDetImpOM_->nOptVars ());
   colub.resize (myDetImpOM_->nOptVars ());
   obj  .resize (myDetImpOM_->nOptVars ());
d246 1
a246 1
   forEachEl (theOptVar, myDetImpOM_->myOptVars ())
d266 2
a267 2
   rowlb.resize (myDetImpOM_->nOptCons ());
   rowub.resize (myDetImpOM_->nOptCons ());
d269 1
a269 1
   forEachEl (theOptCon, myDetImpOM_->myOptCons ())
d287 1
a287 1
   theSlbvVar = myDetImpOM_->mySlbvVar (theBoundedVar);
d301 1
a301 1
   theSlbCon = myDetImpOM_->mySlbCon (theBoundedVar);
@


1.6
log
@Stochastic Implosion
@
text
@d253 1
a253 1
      obj  [theIdx] = theOptVar->mainObjCoeffVal ();
@


1.5
log
@Stochastic Implosion
@
text
@d17 1
a17 1
#include <DetImpOP.h>
d28 1
a28 1
WitExtOptMgr::WitExtOptMgr (WitDetImpOP * theDetImpOP):
d30 2
a31 2
      WitProbAssoc  (theDetImpOP),
      myDetImpOP_   (theDetImpOP),
d56 1
a56 1
   myDetImpOP_->getMatrixByCols (start, index, value);
d76 1
a76 1
   forEachEl (theOptVar, myDetImpOP_->myOptVars ())
d84 1
a84 1
   forEachEl (theOptVar, myDetImpOP_->myOptVars ())
d104 1
a104 1
   forEachEl (theOptVar, myDetImpOP_->myOptVars ())
d120 1
a120 1
   return indexOf (myDetImpOP_->myScrapVar (thePart, thePer));
d127 1
a127 1
   return indexOf (myDetImpOP_->myNonSubVar (theBomEnt, thePer));
d134 1
a134 1
   return indexOf (myDetImpOP_->mySubVar (theSub, thePer));
d141 1
a141 1
   return indexOf (myDetImpOP_->myShipVar (theDemand, thePer));
d148 1
a148 1
   return indexOf (myDetImpOP_->myExecVar (theOpn, thePer));
d155 1
a155 1
   return indexOf (myDetImpOP_->myStockVar (theMat, thePer));
d162 1
a162 1
   return indexOf (myDetImpOP_->myCumShipVar (theDemand, thePer));
d169 1
a169 1
   return slbvVarIndexOf (myDetImpOP_->myExecVar (theOpn, thePer));
d176 1
a176 1
   return slbvVarIndexOf (myDetImpOP_->myStockVar (theMat, thePer));
d185 1
a185 1
   return slbvVarIndexOf (myDetImpOP_->myCumShipVar (theDemand, thePer));
d192 1
a192 1
   return indexOf (myDetImpOP_->myResourceCon (thePart, thePer));
d199 1
a199 1
   return indexOf (myDetImpOP_->mySubCon (theBomEnt, thePer));
d206 1
a206 1
   return indexOf (myDetImpOP_->myShipCon (theDemand, thePer));
d213 1
a213 1
   return slbConIndexOf (myDetImpOP_->myExecVar (theOpn, thePer));
d220 1
a220 1
   return slbConIndexOf (myDetImpOP_->myStockVar (theMat, thePer));
d229 1
a229 1
   return slbConIndexOf (myDetImpOP_->myCumShipVar (theDemand, thePer));
d242 3
a244 3
   collb.resize (myDetImpOP_->nOptVars ());
   colub.resize (myDetImpOP_->nOptVars ());
   obj  .resize (myDetImpOP_->nOptVars ());
d246 1
a246 1
   forEachEl (theOptVar, myDetImpOP_->myOptVars ())
d266 2
a267 2
   rowlb.resize (myDetImpOP_->nOptCons ());
   rowub.resize (myDetImpOP_->nOptCons ());
d269 1
a269 1
   forEachEl (theOptCon, myDetImpOP_->myOptCons ())
d287 1
a287 1
   theSlbvVar = myDetImpOP_->mySlbvVar (theBoundedVar);
d301 1
a301 1
   theSlbCon = myDetImpOP_->mySlbCon (theBoundedVar);
@


1.4
log
@Stochastic Implosion
@
text
@d308 1
a308 1
int WitExtOptMgr::indexOf (WitOptProbEl * theOptProbEl)
d310 1
a310 1
   if (theOptProbEl == NULL)
d313 1
a313 1
   return theOptProbEl->index ();
@


1.3
log
@Stochastic Implosion
@
text
@d30 1
a30 2
      WitProbAssoc  (theDetImpOP->myProblem ()),

@


1.2
log
@Stochastic Implosion
@
text
@d18 2
a19 2
#include <PerVar.h>
#include <PerCon.h>
@


1.1
log
@Stochastic Implosion
@
text
@d17 1
a17 1
#include <ImpOptProb.h>
d28 1
a28 1
WitExtOptMgr::WitExtOptMgr (WitImpOptProb * theImpOptProb):
d30 1
a30 1
      WitProbAssoc  (theImpOptProb->myProblem ()),
d32 1
a32 1
      myImpOptProb_ (theImpOptProb),
d57 1
a57 2
   myImpOptProb_->
      getMatrixByCols (start, index, value);
d77 1
a77 1
   forEachEl (theOptVar, myImpOptProb_->myOptVars ())
d85 1
a85 1
   forEachEl (theOptVar, myImpOptProb_->myOptVars ())
d105 1
a105 1
   forEachEl (theOptVar, myImpOptProb_->myOptVars ())
d121 1
a121 1
   return indexOf (myImpOptProb_->myScrapVar (thePart, thePer));
d128 1
a128 1
   return indexOf (myImpOptProb_->myNonSubVar (theBomEnt, thePer));
d135 1
a135 1
   return indexOf (myImpOptProb_->mySubVar (theSub, thePer));
d142 1
a142 1
   return indexOf (myImpOptProb_->myShipVar (theDemand, thePer));
d149 1
a149 1
   return indexOf (myImpOptProb_->myExecVar (theOpn, thePer));
d156 1
a156 1
   return indexOf (myImpOptProb_->myStockVar (theMat, thePer));
d163 1
a163 1
   return indexOf (myImpOptProb_->myCumShipVar (theDemand, thePer));
d170 1
a170 1
   return slbvVarIndexOf (myImpOptProb_->myExecVar (theOpn, thePer));
d177 1
a177 1
   return slbvVarIndexOf (myImpOptProb_->myStockVar (theMat, thePer));
d186 1
a186 1
   return slbvVarIndexOf (myImpOptProb_->myCumShipVar (theDemand, thePer));
d193 1
a193 1
   return indexOf (myImpOptProb_->myResourceCon (thePart, thePer));
d200 1
a200 1
   return indexOf (myImpOptProb_->mySubCon (theBomEnt, thePer));
d207 1
a207 1
   return indexOf (myImpOptProb_->myShipCon (theDemand, thePer));
d214 1
a214 1
   return slbConIndexOf (myImpOptProb_->myExecVar (theOpn, thePer));
d221 1
a221 1
   return slbConIndexOf (myImpOptProb_->myStockVar (theMat, thePer));
d230 1
a230 1
   return slbConIndexOf (myImpOptProb_->myCumShipVar (theDemand, thePer));
d243 3
a245 3
   collb.resize (myImpOptProb_->nOptVars ());
   colub.resize (myImpOptProb_->nOptVars ());
   obj  .resize (myImpOptProb_->nOptVars ());
d247 1
a247 1
   forEachEl (theOptVar, myImpOptProb_->myOptVars ())
d267 2
a268 2
   rowlb.resize (myImpOptProb_->nOptCons ());
   rowub.resize (myImpOptProb_->nOptCons ());
d270 1
a270 1
   forEachEl (theOptCon, myImpOptProb_->myOptCons ())
d288 1
a288 1
   theSlbvVar = myImpOptProb_->mySlbvVar (theBoundedVar);
d302 1
a302 1
   theSlbCon = myImpOptProb_->mySlbCon (theBoundedVar);
@

