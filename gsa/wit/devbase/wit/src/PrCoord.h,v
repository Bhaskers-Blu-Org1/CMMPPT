head	1.72;
access;
symbols
	sce_5_01_20080919:1.63
	latest_sce_4_20_20060523:1.63.0.2
	sce_4_20_20060523:1.63
	latest_sce4_20_OSL:1.62.0.2
	sce_4_20_OSL:1.62
	sce_410_withVa:1.62
	sce_4_05_20040511:1.28
	sce_4_00_20040201:1.28
	nextGenBranch:1.27.0.2
	nextGenRoot:1.27
	sce_3_30_20030627:1.27;
locks; strict;
comment	@ * @;


1.72
date	2011.09.28.23.49.57;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2011.09.24.00.28.20;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2011.08.30.20.17.58;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2010.09.28.19.25.16;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2010.07.30.20.20.14;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2010.07.28.21.40.40;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2010.07.16.20.21.21;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2010.07.13.17.41.29;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2010.06.29.23.25.14;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2006.05.02.17.34.09;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2005.03.04.21.45.35;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2005.03.02.22.56.28;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2005.01.19.18.31.04;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2005.01.18.22.45.42;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2005.01.18.20.03.28;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2005.01.15.00.20.08;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2005.01.14.00.01.17;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2005.01.12.15.42.09;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2005.01.11.19.37.35;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2005.01.10.22.34.48;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2005.01.10.19.02.25;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2005.01.07.23.40.56;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2004.12.29.16.50.05;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2004.12.28.23.41.15;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2004.12.28.22.34.27;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2004.12.28.19.21.19;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2004.12.28.16.13.33;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2004.12.27.22.33.17;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2004.12.27.19.23.37;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2004.12.27.16.57.14;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2004.12.24.00.02.27;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2004.12.23.20.09.36;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2004.12.10.16.49.44;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2004.12.06.22.38.16;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2004.12.04.00.02.47;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2004.11.30.20.24.49;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2004.11.29.21.26.23;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2004.11.24.22.45.29;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2004.11.23.20.50.07;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2004.11.16.21.46.04;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2004.11.11.16.30.21;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2004.11.10.20.41.42;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2004.11.09.23.08.00;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2004.11.06.00.30.34;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2003.08.05.20.18.23;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2003.05.07.18.06.16;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2003.05.07.17.25.13;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2003.05.06.20.22.43;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2003.05.01.22.42.31;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2003.04.30.21.07.48;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2003.04.29.14.27.48;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.04.21.17.11.08;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.04.15.20.50.12;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.04.11.19.08.28;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.04.01.22.39.33;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.04.01.20.34.28;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.03.21.23.36.53;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.19.16.48.23;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.03.07.23.46.15;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.03.21.07.31;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.03.01.01.17.31;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.28.20.47.37;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.27.19.20.22;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.25.22.17.08;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.25.19.16.55;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.19.22.41.38;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.18.20.10.59;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.16.23.58.11;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.13.23.06.31;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.07.23.29.10;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.07.20.20.50;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.04.18.45.53;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.72
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PrCoordH
#define PrCoordH

//------------------------------------------------------------------------------
// Header file: "PrCoord.h"
//
// Contains the declaration of class PrCoord.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PtrSched.h>
#include <PerSglStack.h>

//------------------------------------------------------------------------------
// Class PrCoord
//
// "Proportionate Routing Coordinator"
//
// Internal Coordinator of the Proportionate Routing Subsystem.
//
// Class Hierarchy:
//
// ProbAssoc
//    PrCoord
//
// Implemented in PropRtg.C.
//------------------------------------------------------------------------------

class WitPrCoord: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrCoord (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPrCoord ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints the proportionate routing subsystem.

      void definePropExp (
            WitRtSite *         theRtSite, 
            WitPeriod           thePer,
            double              expVol,
            WitRtCandDblStack & theExpPairs);
         //
         // Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
         // that define a proportionate explosion of expVol units at theRtSite
         // in thePer.

      bool active (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns true, iff theRtCand is currently active for proportionate
         // explosions in thePer.

      void setActive (WitRtCand * theRtCand, WitPeriod thePer, bool theValue);
         //
         // Sets the "active for prop-rt status" of theRtCand in thePer to
         // theValue.

      bool allowed (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Each returns true, iff proportionate routing is currently allowed
         // for theRtCand in thePer.

      void storeRecoveryPair (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Stores (theRtCand, thePer) as a pair at which the prop-rtg
         // configuration is to be restored to its initial state.

      void recoverInitState ();
         //
         // Restores the prop-rtg selection configuration to its initial state.

      WitSelPt * mySelPtFor (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns the prop-rt SelPt for theRtSite and thePer, if any;
         // otherwise NULL.

      WitAltPt * myAltPtFor (WitRtCand * theRtCand, WitPeriod thePer); 
         //
         // Returns the AltPt for explosion thru theRtCand in thePer.

      WitPrAltPt * myPrAltPtFor (WitRtCand * theRtCand, WitPeriod thePer); 
         //
         // Returns the PrAltPt owned by this PrCoord for theRtCand in thePer.

      //------------------------------------------------------------------------
      // Selection splitting functions.
      //------------------------------------------------------------------------

      bool selIsSplit (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns true, iff the proportionate routing thru theRtSite in thePer
         // is split. Valid only in sel-split mode.

      void defineSplit (
            WitRtSite *         theRtSite, 
            WitPeriod           thePer,
            double              expVol,
            WitRtCandDblStack & theExpPairs,
            double &            unbddVol);
         //
         // Defines a split proportionate explosion of expVol units at theRtSite
         // in thePer, by setting the following arguments:
         //
         // theExpPairs: The explosion pairs for the bounded portion of the
         //              split.
         // unbddVol:    The splitVol for the unbounded portion of the split.

      void recordFlowSS (
            WitRtSite * theRtSite,
            WitPeriod   thePer,
            double      incFlowVol);
         //
         // Records the fact that incFlowVol additional units are being flowed
         // through theRtSite in thePer, for sel-split purposes.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void printPropExp (
            WitRtSite *               theRtSite, 
            WitPeriod                 thePer,
            double                    expVol,
            const WitRtCandDblStack & theExpPairs,
            bool                      bddSplit);
         //
         // Prints the data for a proportionate explosion of
         // expVol units at theRtSite in thePer, as specified by theExpPairs.
         // bdd is true, iff the proportionate explosion is for a bounded split.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc  (WitSelector *, mySelector)
      accessFunc  (WitPrSelMgr *, myPrSelMgrForProd)
      accessFunc  (WitPrSelMgr *, myPrSelMgrForCons)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildPrSelPts ();
         //
         // Creates the PrSelPts owned by this PrCoord.

      void buildPrAltPts ();
         //
         // Creates the PrAltPts owned by this PrCoord.

      void findActiveRtCands (
            WitRtSite *      theRtSite,
            WitPeriod        thePer,
            WitRtCandStack & theRtCands);
         //
         // Sets theRtCands to be the set of all active RtCands for theRtSite 
         // in thePer.

      void defineExpPairs (
            const WitRtCandStack & theRtCands,
            WitPeriod              thePer,
            double                 expVol,
            WitRtCandDblStack &    theExpPairs);
         //
         // Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
         // that define a proportionate explosion of expVol units at theRtCands
         // in thePer.

      WitPrSelPt * myPrSelPtFor (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns the PrSelPt for theRtSite and thePer, if any;
         // otherwise NULL.

      noCopyCtorAssign (WitPrCoord);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSelector * const mySelector_;
         //
         // The Selector for this PrCoord.

      WitRtMgr * const myRtMgr_;
         //
         // The RtMgr for this PrCoord.

      WitPrSelMgr * myPrSelMgrForProd_;
      WitPrSelMgr * myPrSelMgrForCons_;
         //
         // The PrSelMgrs for the production and consumption cases of
         // proportionate routing owned by this PrCoord.

      WitPtrSched <WitRtSite, WitPrSelPt> myPrSelPts_;
         //
         // myPrSelPts_.myPtrAt (theRtSite, thePer) is the PrSelPt owned by this
         // PrCoord that represents theRtSite and thePer, if any;
         // otherwise NULL.

      WitPtrSched <WitRtCand, WitPrAltPt> myPrAltPts_;
         //
         // myPrAltPts_.myPtrAt (theRtCand, thePer) is the PrAltPt owned by this
         // PrCoord that represents deactivation of theRtCand and thePer, if
         // any; otherwise NULL.

      WitPerSglStack <WitRtCand> myRecoveryPairs_;
         //
         // In selection recovery mode, myRecoveryPairs_ is the set of all pairs
         // (RtCand, Period) at which the prop-rtg configuration is to be
         // restored to its initial state.
   };

#endif
@


1.71
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.70
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d39 2
a40 92
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPrCoord (WitSelector *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitPrCoord ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void print ();
//
// Prints the proportionate routing subsystem.

void definePropExp (
WitRtSite *         theRtSite,
WitPeriod           thePer,
double              expVol,
WitRtCandDblStack & theExpPairs);
//
// Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
// that define a proportionate explosion of expVol units at theRtSite
// in thePer.

bool active (WitRtCand * theRtCand, WitPeriod thePer);
//
// Returns true, iff theRtCand is currently active for proportionate
// explosions in thePer.

void setActive (WitRtCand * theRtCand, WitPeriod thePer, bool theValue);
//
// Sets the "active for prop-rt status" of theRtCand in thePer to
// theValue.

bool allowed (WitRtCand * theRtCand, WitPeriod thePer);
//
// Each returns true, iff proportionate routing is currently allowed
// for theRtCand in thePer.

void storeRecoveryPair (WitRtCand * theRtCand, WitPeriod thePer);
//
// Stores (theRtCand, thePer) as a pair at which the prop-rtg
// configuration is to be restored to its initial state.

void recoverInitState ();
//
// Restores the prop-rtg selection configuration to its initial state.

WitSelPt * mySelPtFor (WitRtSite * theRtSite, WitPeriod thePer);
//
// Returns the prop-rt SelPt for theRtSite and thePer, if any;
// otherwise NULL.

WitAltPt * myAltPtFor (WitRtCand * theRtCand, WitPeriod thePer);
//
// Returns the AltPt for explosion thru theRtCand in thePer.

WitPrAltPt * myPrAltPtFor (WitRtCand * theRtCand, WitPeriod thePer);
//
// Returns the PrAltPt owned by this PrCoord for theRtCand in thePer.

//------------------------------------------------------------------------
// Selection splitting functions.
//------------------------------------------------------------------------

bool selIsSplit (WitRtSite * theRtSite, WitPeriod thePer);
//
// Returns true, iff the proportionate routing thru theRtSite in thePer
// is split. Valid only in sel-split mode.

void defineSplit (
WitRtSite *         theRtSite,
WitPeriod           thePer,
double              expVol,
WitRtCandDblStack & theExpPairs,
double &            unbddVol);
//
// Defines a split proportionate explosion of expVol units at theRtSite
// in thePer, by setting the following arguments:
//
// theExpPairs: The explosion pairs for the bounded portion of the
//              split.
// unbddVol:    The splitVol for the unbounded portion of the split.
d42 196
a237 106
void recordFlowSS (
WitRtSite * theRtSite,
WitPeriod   thePer,
double      incFlowVol);
//
// Records the fact that incFlowVol additional units are being flowed
// through theRtSite in thePer, for sel-split purposes.

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void printPropExp (
WitRtSite *               theRtSite,
WitPeriod                 thePer,
double                    expVol,
const WitRtCandDblStack & theExpPairs,
bool                      bddSplit);
//
// Prints the data for a proportionate explosion of
// expVol units at theRtSite in thePer, as specified by theExpPairs.
// bdd is true, iff the proportionate explosion is for a bounded split.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc  (WitSelector *, mySelector)
accessFunc  (WitPrSelMgr *, myPrSelMgrForProd)
accessFunc  (WitPrSelMgr *, myPrSelMgrForCons)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void buildPrSelPts ();
//
// Creates the PrSelPts owned by this PrCoord.

void buildPrAltPts ();
//
// Creates the PrAltPts owned by this PrCoord.

void findActiveRtCands (
WitRtSite *      theRtSite,
WitPeriod        thePer,
WitRtCandStack & theRtCands);
//
// Sets theRtCands to be the set of all active RtCands for theRtSite
// in thePer.

void defineExpPairs (
const WitRtCandStack & theRtCands,
WitPeriod              thePer,
double                 expVol,
WitRtCandDblStack &    theExpPairs);
//
// Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
// that define a proportionate explosion of expVol units at theRtCands
// in thePer.

WitPrSelPt * myPrSelPtFor (WitRtSite * theRtSite, WitPeriod thePer);
//
// Returns the PrSelPt for theRtSite and thePer, if any;
// otherwise NULL.

noCopyCtorAssign (WitPrCoord);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitSelector * const mySelector_;
//
// The Selector for this PrCoord.

WitRtMgr * const myRtMgr_;
//
// The RtMgr for this PrCoord.

WitPrSelMgr * myPrSelMgrForProd_;
WitPrSelMgr * myPrSelMgrForCons_;
//
// The PrSelMgrs for the production and consumption cases of
// proportionate routing owned by this PrCoord.

WitPtrSched <WitRtSite, WitPrSelPt> myPrSelPts_;
//
// myPrSelPts_.myPtrAt (theRtSite, thePer) is the PrSelPt owned by this
// PrCoord that represents theRtSite and thePer, if any;
// otherwise NULL.

WitPtrSched <WitRtCand, WitPrAltPt> myPrAltPts_;
//
// myPrAltPts_.myPtrAt (theRtCand, thePer) is the PrAltPt owned by this
// PrCoord that represents deactivation of theRtCand and thePer, if
// any; otherwise NULL.

WitPerSglStack <WitRtCand> myRecoveryPairs_;
//
// In selection recovery mode, myRecoveryPairs_ is the set of all pairs
// (RtCand, Period) at which the prop-rtg configuration is to be
// restored to its initial state.
};
@


1.69
log
@Modifiable Heuristic Allocation
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d39 92
a130 2
   {
   public:
d132 106
a237 196
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrCoord (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPrCoord ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints the proportionate routing subsystem.

      void definePropExp (
            WitRtSite *         theRtSite, 
            WitPeriod           thePer,
            double              expVol,
            WitRtCandDblStack & theExpPairs);
         //
         // Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
         // that define a proportionate explosion of expVol units at theRtSite
         // in thePer.

      bool active (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns true, iff theRtCand is currently active for proportionate
         // explosions in thePer.

      void setActive (WitRtCand * theRtCand, WitPeriod thePer, bool theValue);
         //
         // Sets the "active for prop-rt status" of theRtCand in thePer to
         // theValue.

      bool allowed (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Each returns true, iff proportionate routing is currently allowed
         // for theRtCand in thePer.

      void storeRecoveryPair (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Stores (theRtCand, thePer) as a pair at which the prop-rtg
         // configuration is to be restored to its initial state.

      void recoverInitState ();
         //
         // Restores the prop-rtg selection configuration to its initial state.

      WitSelPt * mySelPtFor (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns the prop-rt SelPt for theRtSite and thePer, if any;
         // otherwise NULL.

      WitAltPt * myAltPtFor (WitRtCand * theRtCand, WitPeriod thePer); 
         //
         // Returns the AltPt for explosion thru theRtCand in thePer.

      WitPrAltPt * myPrAltPtFor (WitRtCand * theRtCand, WitPeriod thePer); 
         //
         // Returns the PrAltPt owned by this PrCoord for theRtCand in thePer.

      //------------------------------------------------------------------------
      // Selection splitting functions.
      //------------------------------------------------------------------------

      bool selIsSplit (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns true, iff the proportionate routing thru theRtSite in thePer
         // is split. Valid only in sel-split mode.

      void defineSplit (
            WitRtSite *         theRtSite, 
            WitPeriod           thePer,
            double              expVol,
            WitRtCandDblStack & theExpPairs,
            double &            unbddVol);
         //
         // Defines a split proportionate explosion of expVol units at theRtSite
         // in thePer, by setting the following arguments:
         //
         // theExpPairs: The explosion pairs for the bounded portion of the
         //              split.
         // unbddVol:    The splitVol for the unbounded portion of the split.

      void recordFlowSS (
            WitRtSite * theRtSite,
            WitPeriod   thePer,
            double      incFlowVol);
         //
         // Records the fact that incFlowVol additional units are being flowed
         // through theRtSite in thePer, for sel-split purposes.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void printPropExp (
            WitRtSite *               theRtSite, 
            WitPeriod                 thePer,
            double                    expVol,
            const WitRtCandDblStack & theExpPairs,
            bool                      bddSplit);
         //
         // Prints the data for a proportionate explosion of
         // expVol units at theRtSite in thePer, as specified by theExpPairs.
         // bdd is true, iff the proportionate explosion is for a bounded split.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc  (WitSelector *, mySelector)
      accessFunc  (WitPrSelMgr *, myPrSelMgrForProd)
      accessFunc  (WitPrSelMgr *, myPrSelMgrForCons)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildPrSelPts ();
         //
         // Creates the PrSelPts owned by this PrCoord.

      void buildPrAltPts ();
         //
         // Creates the PrAltPts owned by this PrCoord.

      void findActiveRtCands (
            WitRtSite *      theRtSite,
            WitPeriod        thePer,
            WitRtCandStack & theRtCands);
         //
         // Sets theRtCands to be the set of all active RtCands for theRtSite 
         // in thePer.

      void defineExpPairs (
            const WitRtCandStack & theRtCands,
            WitPeriod              thePer,
            double                 expVol,
            WitRtCandDblStack &    theExpPairs);
         //
         // Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
         // that define a proportionate explosion of expVol units at theRtCands
         // in thePer.

      WitPrSelPt * myPrSelPtFor (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns the PrSelPt for theRtSite and thePer, if any;
         // otherwise NULL.

      noCopyCtorAssign (WitPrCoord);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSelector * const mySelector_;
         //
         // The Selector for this PrCoord.

      WitRtMgr * const myRtMgr_;
         //
         // The RtMgr for this PrCoord.

      WitPrSelMgr * myPrSelMgrForProd_;
      WitPrSelMgr * myPrSelMgrForCons_;
         //
         // The PrSelMgrs for the production and consumption cases of
         // proportionate routing owned by this PrCoord.

      WitPtrSched <WitRtSite, WitPrSelPt> myPrSelPts_;
         //
         // myPrSelPts_.myPtrAt (theRtSite, thePer) is the PrSelPt owned by this
         // PrCoord that represents theRtSite and thePer, if any;
         // otherwise NULL.

      WitPtrSched <WitRtCand, WitPrAltPt> myPrAltPts_;
         //
         // myPrAltPts_.myPtrAt (theRtCand, thePer) is the PrAltPt owned by this
         // PrCoord that represents deactivation of theRtCand and thePer, if
         // any; otherwise NULL.

      WitPerSglStack <WitRtCand> myRecoveryPairs_;
         //
         // In selection recovery mode, myRecoveryPairs_ is the set of all pairs
         // (RtCand, Period) at which the prop-rtg configuration is to be
         // restored to its initial state.
   };
@


1.68
log
@Selection Recovery
@
text
@d19 1
d21 1
a21 1
#include <Assoc.h>
d87 6
a92 1
      void recoverInitState (WitRtCand * theRtCand, WitPeriod thePer);
d94 1
a94 2
         // Restores the prop-rtg selection configuration at theRtCand and 
         // thePer to its original state.
d159 3
a161 4
      accessFunc  (WitSelector *,                            mySelector)
      accessFunc  (WitPrSelMgr *,                            myPrSelMgrForProd)
      accessFunc  (WitPrSelMgr *,                            myPrSelMgrForCons)
      accessFunc2 (WitRecoverySet <WitPrCoord, WitRtCand> *, myRecoverySet)
d232 1
a232 1
      WitRecoverySet <WitPrCoord, WitRtCand> * myRecoverySet_;
d234 3
a236 2
         // The RecoverySet for the Prop-Rtg configuration.
         // NULL, if not in selection recovery mode.
@


1.67
log
@Selection Recovery
@
text
@d86 1
a86 1
      void recoverInitSel (WitRtCand * theRtCand, WitPeriod thePer);
d154 4
a157 4
      accessFunc  (WitSelector *,                       mySelector)
      accessFunc  (WitPrSelMgr *,                       myPrSelMgrForProd)
      accessFunc  (WitPrSelMgr *,                       myPrSelMgrForCons)
      accessFunc2 (WitAltSet <WitPrCoord, WitRtCand> *, myAltSet)
d228 1
a228 1
      WitAltSet <WitPrCoord, WitRtCand> * myAltSet_;
d230 1
a230 2
         // In selection recovery mode, this is the AltSet for alterations to
         // the prop-rtg configuration.
@


1.66
log
@Selection Recovery
@
text
@d86 5
d154 4
a157 3
      accessFunc (WitSelector *, mySelector)
      accessFunc (WitPrSelMgr *, myPrSelMgrForProd)
      accessFunc (WitPrSelMgr *, myPrSelMgrForCons)
d227 6
@


1.65
log
@Selection Recovery.
@
text
@d159 1
a159 1
      void buildPrPts ();
d161 1
a161 1
         // Creates the PrPts owned by this PrCoord.
d185 1
a185 1
      WitPrPt * myPrPtFor (WitRtSite * theRtSite, WitPeriod thePer);
d187 2
a188 1
         // Returns the PrPt for theRtSite and thePer, if any; otherwise NULL.
d210 1
a210 1
      WitPtrSched <WitRtSite, WitPrPt> myPrPts_;
d212 1
a212 1
         // myPrPts_.myPtrAt (theRtSite, thePer) is the PrPt owned by this
@


1.64
log
@Selection reuse.
@
text
@d86 5
d95 1
a95 1
      WitSelPt * mySelPtFor (WitRtSite * theRtSite, WitPeriod thePer);
d97 1
a97 2
         // Returns the prop-rt SelPt for theRtSite and thePer, if any;
         // otherwise NULL.
a144 5
      void printAllowedRtCands (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Prints the RtCands for theRtSite that are currently allowed for
         // prop-rt in thePer.

@


1.63
log
@Updated the copyright date on all source files.
@
text
@d130 1
a130 1
      void printPropExpIA (
d137 1
a137 1
         // If appropriate, prints the data for a proportionate explosion of
@


1.62
log
@Vector PropRtg.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.61
log
@Vector PropRtg.
@
text
@d92 2
a93 1
         // Returns the prop-rt SelPt for theRtSite and thePer.
d186 1
a186 1
      bool hasPrPtsFor (WitRtSite * theRtSite);
d188 1
a188 1
         // Returns true iff the vector of PrPts for theRtSite is allocated.
@


1.60
log
@Low-Pri Prop-Rt.
@
text
@d34 1
a34 1
// Implemented in PropRt.C.
@


1.59
log
@Low-Pri Prop-Rt.
@
text
@a18 1
#include <RtCase.h>
@


1.58
log
@Low-Pri Prop-Rt.
@
text
@a149 2
      WitPrSelMgr * myPrSelMgrFor (WitRtCase theRtCase);

d151 2
@


1.57
log
@Low-Pri Prop-Rt.
@
text
@a28 1
// New Version
@


1.56
log
@Low-Pri Prop-Rt.
@
text
@a95 5
      void printRtShares (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Prints routing share data for the active RtCands of theRtSite in
         // thePer.

d142 5
a186 6
      double totRoutingShare (
            const WitRtCandStack & theRtCands,
            WitPeriod              thePer);
         //
         // Returns the total routingShare for theRtCands in thePer.

@


1.55
log
@Low-Pri Prop-Rt.
@
text
@d90 5
a94 1
         // myAltPtFor for explosion thru theRtCand in thePer.
@


1.54
log
@Low-Pri Prop-Rt.
@
text
@a96 9
      void printPropExpIA (
            WitRtSite *               theRtSite, 
            WitPeriod                 thePer,
            double                    expVol,
            const WitRtCandDblStack & theExpPairs);
         //
         // If appropriate, prints the data for a proportionate explosion of
         // expVol units at theRtSite in thePer, as specified by theExpPairs.

d129 15
@


1.53
log
@Low-Pri Prop-Rt.
@
text
@d97 9
@


1.52
log
@Low-Pri Prop-Rt.
@
text
@d144 1
a144 1
         // Creates the PrPts owned by this PoCoord.
d148 1
a148 1
         // Creates the PrAltPts owned by this PoCoord.
@


1.51
log
@Low-Pri Prop-Rt.
@
text
@d73 1
a73 1
      bool lpprAct (WitRtCand * theRtCand, WitPeriod thePer);
d78 1
a78 1
      void setLpprAct (WitRtCand * theRtCand, WitPeriod thePer, bool theValue);
d83 1
a83 1
      bool active (WitRtCand * theRtCand, WitPeriod thePer);
d85 2
a86 2
         // Returns true, iff proportionate routing thru theRtCand in thePer has
         // not been permanently ruled out.
d155 2
a156 2
         // Sets theRtCands to be the set of all active RtCands for theRtSite in
         // thePer.
@


1.50
log
@Low-Pri Prop-Rt.
@
text
@d73 1
a73 1
      bool active (WitRtCand * theRtCand, WitPeriod thePer);
d78 1
a78 1
      void setActive (WitRtCand * theRtCand, WitPeriod thePer, bool theValue);
d83 1
a83 1
      bool potActive (WitRtCand * theRtCand, WitPeriod thePer);
a86 2
         // Note that funcActive () and active () return the same value, except
         // in low-pri prop-rt mode.
@


1.49
log
@Low-Pri Prop-Rt.
@
text
@d94 5
a151 5
      void printRtShares (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Prints routing share data for the active RtCands of theRtSite in
         // thePer.

@


1.48
log
@Low-Pri Prop-Rt.
@
text
@d147 5
@


1.47
log
@Low-Pri Prop-Rt.
@
text
@a19 1
#include <Schedule.h>
a146 4
      void setUpActive ();
         //
         // Sets up the active_ schedule.

d171 4
a205 5

      WitSchedule <WitRtCand, bool> active_;
         //
         // active_ (theRtCand)[thePer] is true, iff theRtCand is active for
         // proportionate routing in thePer.
@


1.46
log
@Low-Pri Prop-Rt.
@
text
@d91 1
a91 1
      WitSelAlt * mySelAltFor (WitRtCand * theRtCand, WitPeriod thePer); 
d93 1
a93 1
         // mySelAltFor for explosion thru theRtCand in thePer.
d144 1
a144 1
      void buildPrAlts ();
d146 1
a146 1
         // Creates the PrAlts owned by this PoCoord.
d202 1
a202 1
      WitPtrSched <WitRtCand, WitPrAlt> myPrAlts_;
d204 1
a204 1
         // myPrAlts_.myPtrAt (theRtCand, thePer) is the PrAlt owned by this
@


1.45
log
@Low-Pri Prop-Rt.
@
text
@a73 5
      bool singleton (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns true, iff there is exactly one RtCand for theRtSite
         // currently active for proportionate explosions in thePer.

@


1.44
log
@Low-Pri Prop-Rt.
@
text
@d74 5
d149 4
d207 6
@


1.43
log
@Low-Pri Prop-Rt.
@
text
@d156 16
@


1.42
log
@Low-Pri Prop-Rt.
@
text
@d148 8
@


1.41
log
@Low-Pri Prop-Rt.
@
text
@d20 2
d91 4
d130 4
d140 8
d153 25
@


1.40
log
@Low-Pri Prop-Rt.
@
text
@d15 2
d19 118
@


1.39
log
@Low-Pri Prop-Rt.
@
text
@d10 2
a11 2
#ifndef SkeletonH
#define SkeletonH
d14 1
a14 1
// Header file: "Skeleton.h"
@


1.38
log
@Low-Pri Prop-Rt.
@
text
@d10 2
a11 2
#ifndef PrCoordH
#define PrCoordH
d14 1
a14 3
// Header file: "PrCoord.h"
//
// Contains the declaration of class PrCoord.
a16 212
#include <RtCase.h>
#include <Assoc.h>
#include <PtrSched.h>

//------------------------------------------------------------------------------
// Class PrCoord
//
// "Proportionate Routing Coordinator"
//
// Internal Coordinator of the Proportionate Routing Subsystem.
//
// Class Hierarchy:
//
// ProbAssoc
//    PrCoord
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitPrCoord: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrCoord (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPrCoord ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void definePropExp (
            WitRtSite *         theRtSite, 
            WitPeriod           thePer,
            double              expVol,
            WitRtCandDblStack & theExpPairs);
         //
         // Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
         // that define a proportionate explosion of expVol units at theRtSite
         // in thePer.

      bool active (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns true, iff theRtCand is currently active for proportionate
         // explosions in thePer.

      void setActive (WitRtCand * theRtCand, WitPeriod thePer, bool theValue);
         //
         // Sets the "active for prop-rt status" of theRtCand in thePer to
         // theValue.

      bool potActive (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns true, iff proportionate routing thru theRtCand in thePer has
         // not been permanently ruled out.
         // Note that funcActive () and active () return the same value, except
         // in low-pri prop-rt mode.

      WitSelPt * mySelPtForAlt (WitRtCand * theRtCand, WitPeriod thePer); 
         //
         // mySelPtForAlt for explosion thru theRtCand in thePer.

      void print ();
         //
         // Prints the proportionate routing subsystem.

      double totRoutingShare (
            const WitRtCandStack & theRtCands,
            WitPeriod              thePer);
         //
         // Returns the total routingShare for theRtCands in thePer.

      //------------------------------------------------------------------------
      // Selection splitting functions.
      //------------------------------------------------------------------------

      bool selIsSplit (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns true, iff the proportionate routing thru theRtSite in thePer
         // is split. Valid only in sel-split mode.

      void defineSplit (
            WitRtSite *         theRtSite, 
            WitPeriod           thePer,
            double              expVol,
            WitRtCandDblStack & theExpPairs,
            double &            unbddVol);
         //
         // Defines a split proportionate explosion of expVol units at theRtSite
         // in thePer, by setting the following arguments:
         //
         // theExpPairs: The explosion pairs for the bounded portion of the
         //              split.
         // unbddVol:    The splitVol for the unbounded portion of the split.

      void recordFlowSS (
            WitRtSite * theRtSite,
            WitPeriod   thePer,
            double      incFlowVol);
         //
         // Records the fact that incFlowVol additional units are being flowed
         // through theRtSite in thePer, for sel-split purposes.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPrCand *,   actCand)
      accessFunc (WitPrCand *,   provInactCand)
      accessFunc (WitPrCand *,   fundInactCand)
      accessFunc (WitSelector *, mySelector)
      accessFunc (WitRtMgr *,    myRtMgr)

      WitPrPt * myPrPtFor (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns the PrPt for theRtCand and thePer owned by this PrCoord, if
         // any; otherwise NULL.

      WitPrSelMgr * myPrSelMgr (WitRtCase theRtCase);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildPrBrPts ();
         //
         // Creates the PrBrPts owned by this PrCoord.

      void buildPrPts ();
         //
         // Creates the PrPts owned by this PrCoord.

      void definePropExp (
            const WitRtCandStack & theRtCands,
            WitPeriod              thePer,
            double                 expVol,
            WitRtCandDblStack &    theExpPairs);
         //
         // Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
         // that define a proportionate explosion of expVol units at theRtCands
         // in thePer.

      void findSplitVols (
            WitPrPt * thePrPt,
            double    expVol,
            double &  splitVol,
            double &  unbddVol);
         //
         // Sets the following arguments for a split proportionate explosion of
         // expVol units at thePrPt:
         // splitVol: The split volume for the   bounded portion of the split.
         // unbddVol: The split volume for the unbounded portion of the split.

      bool hasPrBrPtsFor (WitRtSite * theRtSite);
         //
         // Returns true iff the vector of PrBrPts for theRtSite is allocated.

      noCopyCtorAssign (WitPrCoord);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPrSelMgr * myPrSelMgrForProd_;
      WitPrSelMgr * myPrSelMgrForCons_;
         //
         // The PrSelMgrs for the production and consumption cases of
         // proportionate routing owned by this PrCoord.

      WitPrCand * actCand_;
      WitPrCand * provInactCand_;
      WitPrCand * fundInactCand_;
         //
         // PrCands owned by this PrCoord:
         //
         //    PrCand           Status                    Active?   PotActive?
         //    ------           ------                    -------   ----------
         //    actCand_         Active                    true      true
         //    provInactCand_   Provisionally Inactive    false     true
         //    fundInactCand_   Fundamentally Inactive    false     false
         //
         // Note that provInactCand_ is only used in low-pri prop-rt mode.

      WitPtrSched <WitRtSite, WitPrBrPt> myPrBrPts_;
         //
         // myPrBrPts_.myPtrAt (theRtSite, thePer) is the PrBrPt owned by this
         // PrCoord that represents theRtSite and thePer, if any; else NULL.

      WitPtrSched <WitRtCand, WitPrPt> myPrPts_;
         //
         // myPrPts_.myPtrAt (theRtCand, thePer) is the PrPt owned by this
         // PrCoord that represents theRtCand and thePer, if any; else NULL.

      WitSelector * const mySelector_;
         //
         // The Selector for this PrCoord.

      WitRtMgr * const myRtMgr_;
         //
         // The RtMgr for this PrCoord.
   };

@


1.37
log
@Low-Pri Prop-Rt.
@
text
@d136 1
a136 1
      accessFunc (WitPrCand *,   permInactCand)
d200 1
a200 1
      WitPrCand * permInactCand_;
d204 5
a208 5
         //    PrCand          Status                    Active?   PotActive?
         //    ------          ------                    -------   ----------
         //    actCand         Active                    true      true
         //    provInactCand   Provisionally Inactive    false     true
         //    permInactCand   Permanently   Inactive    false     false
@


1.36
log
@Low-Pri Prop-Rt.
@
text
@d81 1
a81 1
         // not been ruled out by a fundamental shortage.
d136 1
a136 1
      accessFunc (WitPrCand *,   fundInactCand)
d200 1
a200 1
      WitPrCand * fundInactCand_;
d208 1
a208 1
         //    fundInactCand   Fundamentally Inactive    false     false
@


1.35
log
@Low-Pri Prop-Rt.
@
text
@d78 1
a78 1
      bool fundActive (WitRtCand * theRtCand, WitPeriod thePer);
d134 3
a136 2
      accessFunc (WitPrCand *,   activeCand)
      accessFunc (WitPrCand *,   inactiveCand)
d198 11
a208 2
      WitPrCand * activeCand_;
      WitPrCand * inactiveCand_;
d210 1
a210 4
         // The PrCands owned by this PrCoord.
         //
         //    activeCand_  ->active () == true
         //    inactiveCand_->active () == false
@


1.34
log
@Low-Pri Prop-Rt.
@
text
@d78 7
@


1.33
log
@Low-Pri Prop-Rt.
@
text
@d73 6
a78 1
      WitSelPt * mySelPtForAlt (WitRtCand * theRtCand, WitPeriod thePer);
a91 4
      bool lowPriMode ();
         //
         // Returns true, iff porportionate routing is in low-priority mode.

@


1.32
log
@Low-pri prop-rt.
@
text
@d126 4
a129 3
      accessFunc (WitPrCand *, activeCand)
      accessFunc (WitPrCand *, inactiveCand)
      accessFunc (WitRtMgr *,  myRtMgr)
d207 4
@


1.31
log
@Low-pri prop-rt.
@
text
@d87 1
a87 1
      bool allowedByPe (WitRtCand * theRtCand, WitPeriod thePer);
d89 1
a89 2
         // Returns true, iff pen-exec currently allows routing thru
         // theRtCand in thePer for prop-rt.
@


1.30
log
@Continued implmentation of low priority proportionate routing.
@
text
@d87 1
a87 1
      bool excludedByPe (WitRtCand * theRtCand, WitPeriod thePer);
d89 1
a89 1
         // Returns true, iff pen-exec currently excludes routing thru
@


1.29
log
@Continued implementation of pen-exec override of prop-rt.
@
text
@d87 1
a87 1
      bool prohibitedByPe (WitRtCand * theRtCand, WitPeriod thePer);
d89 1
a89 1
         // Returns true, iff pen-exec currently prohibits routing thru
@


1.28
log
@Changed the routingShare attributes from scalars to vectors.
@
text
@d87 5
@


1.27
log
@Continued implementation of proportionate routing.
@
text
@d81 3
a83 1
      double totRoutingShare (const WitRtCandStack & theRtCands);
d85 1
a85 1
         // Returns the total routingShare for theRtCands.
d149 1
d154 2
a155 1
         // that define a proportionate explosion of expVol units at theRtCands.
@


1.26
log
@Continued implementation of proportionate routing.
@
text
@d81 1
a81 1
      double totExpShare (const WitRtCandStack & theRtCands);
d83 1
a83 1
         // Returns the total expShare for theRtCands.
@


1.25
log
@Continued implementation of proportionate routing.
@
text
@d81 4
@


1.24
log
@Continued implementation of proportionate routing.
@
text
@d141 4
a144 1
      void setUpPrBrPts ();
d146 2
a147 1
         // Sets up the PrBrPts.
a159 14
      void addExpPairs (
            WitPrPt *           thePrPt,
            double              splitVol,
            WitRtCandDblStack & theExpPairs);
         //
         // Finds the explosion pairs for a split proportionate explosion of
         // splitVol units at thePrPt and adds them to the front of theExpPairs.

      void setActive (const WitPrPtStack & thePrPts, bool theBool);
         //
         // For each PrPt in thePrPts:
         //    Verifies that active != theBool
         //    Sets active to theBool.

d186 1
a186 1
         // mlPrBrPts_.myPtrAt (theRtSite, thePer) is the PrBrPt owned by this
@


1.23
log
@Continued implementation of proportionate routing.
@
text
@d94 1
a94 1
            WitRtCandDblStack & theSplitPairs,
d100 3
a102 12
         // theSplitPairs: The split pairs for the bounded portion of the split.
         // unbddVol:      The splitVol  for the unbounded portion of the split.

      void defineSplitPropExp (
            WitRtCand *         theRtCand,
            WitPeriod           thePer,
            double              splitVol,
            WitRtCandDblStack & theExpPairs);
         //
         // Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
         // that define a theRtCand's portion of a split proportionate explosion
         // of splitVol units at the RtSite for theRtCand in thePer.
d155 8
@


1.22
log
@Continued implementation of proportionate routing.
@
text
@a20 1
#include <Mapping.h>
d94 1
a94 1
            WitRtCandDblStack & theExpPairs,
d100 12
a111 2
         // theExpPairs: The exp pairs for the bounded   portion of the split.
         // unbddVol:    The splitVol  for the unbounded portion of the split.
a153 11
      void findSplitPairs (
            WitPrBrPt *       thePrBrPt,
            double            expVol,
            WitPrPtDblStack & theSplitPairs,
            double &          unbddVol);
         //
         // Sets the following arguments for a split proportionate explosion of
         // expVol units at thePrBrPt:
         // theSplitPairs: The split pairs for the bounded portion of the split.
         // unbddVol:      The splitVol for the  unbounded portion of the split.

a164 7
      void compSplitExpVols (
            WitPrBrPt *       thePrBrPt,
            WitPrPtDblStack & theSplitPairs);
         //
         // Computes splitExpVol_ for each RtCand for a split proportionate
         // explosion at thePrBrPt with theSplitPairs.

a170 7
      void findExpPairs (
            WitRtSite *         theRtSite,
            WitRtCandDblStack & theExpPairs);
         //
         // Computes theExpPairs from splitExpVol_ for the RtCands theRtSite,
         // while resetting splitExpVol_.

a207 6

      WitMapping <WitRtCand, double> splitExpVol_;
         //
         // splitExpVol_ (theRtCand) is the current proportionate explosion
         // volume for theRtCand for the bounded split, if any; otherwise 0.
         // Only allocated in sel-split mode.
@


1.21
log
@Continued implementation of proportionate routing.
@
text
@d21 1
a58 10
      bool active (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns true, iff theRtCand is currently active for proportionate
         // explosions in thePer.

      double normExpShare (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns the normalized explosion share for theRtCand in thePer.
         // Valid only if active (theRtCand, thePer) is true.

d69 5
d86 26
d145 42
d224 6
@


1.20
log
@Continued implementation of proportionate routing.
@
text
@d68 10
d85 4
@


1.19
log
@Continued implementation of proportionate routing.
@
text
@d19 1
a75 9
#if 0

      bool selIsSplit (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns true, iff proportionate routing is split for exploding
         // thru theRtSite in thePer. Valid only in sel-split mode.

#endif

d80 3
a82 5
      accessFunc (WitPrSelMgr *, myPrSelMgrForProd)
      accessFunc (WitPrSelMgr *, myPrSelMgrForCons)
      accessFunc (WitPrCand *,   activeCand)
      accessFunc (WitPrCand *,   inactiveCand)
      accessFunc (WitRtMgr *,    myRtMgr)
d88 2
@


1.18
log
@Continued implementation of proportionate routing.
@
text
@d75 9
@


1.17
log
@Continued implementation of proportionate routing.
@
text
@a84 5
      bool propRouting (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns true, iff proportionate routing is to be used at theRtSite
         // in thePer.

@


1.16
log
@Continued implementation of propotionate routing.
@
text
@d79 5
a83 5
      accessFunc (WitPprMgr *, myPprMgr)
      accessFunc (WitCprMgr *, myCprMgr)
      accessFunc (WitPrCand *, activeCand)
      accessFunc (WitPrCand *, inactiveCand)
      accessFunc (WitRtMgr *,  myRtMgr)
d123 2
a124 2
      WitPprMgr * myPprMgr_;
      WitCprMgr * myCprMgr_;
d126 1
a126 1
         // The SelMgrs for the production and consumption cases of
@


1.15
log
@Continued implementation of proportionate routing.
@
text
@d79 5
a83 5
      accessFunc (WitPprSelMgr *, myPprSelMgr)
      accessFunc (WitCprSelMgr *, myCprSelMgr)
      accessFunc (WitPrCand *,    activeCand)
      accessFunc (WitPrCand *,    inactiveCand)
      accessFunc (WitRtMgr *,     myRtMgr)
d123 2
a124 2
      WitPprSelMgr * myPprSelMgr_;
      WitCprSelMgr * myCprSelMgr_;
@


1.14
log
@Continued implementation of proportionate routing.
@
text
@d27 1
a27 1
// Coordinates the objects of the proportionate routing subsystem.
d57 14
d79 5
a83 4
      accessFunc (WitSelMgr *, mySelMgrForProd)
      accessFunc (WitSelMgr *, mySelMgrForCons)
      accessFunc (WitPrCand *, activeCand)
      accessFunc (WitPrCand *, inactiveCand)
d123 2
a124 2
      WitSelMgr * mySelMgrForProd_;
      WitSelMgr * mySelMgrForCons_;
@


1.13
log
@Continued implementation of proportionate routing.
@
text
@d70 4
a73 4
      inline const WitPtrSched <WitRtSite, WitPrBrPt> & myPrBrPts ()
         {
         return myPrBrPts_;
         }
d97 4
@


1.12
log
@Continued implementation of proportionate routing.
@
text
@a60 5
      WitSelPt * mySelPtForAlt (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns the proportionate routing value for SelMgr::mySelPtForAlt
         // given the arguments.

d69 5
@


1.11
log
@Continued implementation of proportionate routing.
@
text
@d45 1
a45 1
      WitPrCoord (WitRtMgr *, WitPrMgr *);
d61 5
d70 2
a73 1
      accessFunc (WitPrMgr *,  myPrMgr)
d104 6
a130 4

      WitPrMgr * const myPrMgr_;
         //
         // The PrMgr that owns this PrCoord.
@


1.10
log
@Continued implementation of proportionate routing.
@
text
@d15 2
d18 106
@


1.9
log
@Continued implementation of proportionate routing.
@
text
@a14 2
//
// Contains the declaration of class PrCoord.
a15 104

#include <Assoc.h>
#include <PtrSched.h>

//------------------------------------------------------------------------------
// Class PrCoord
//
// "Proportionate Routing Coordinator"
//
// Coordinates the objects of the proportionate routing subsystem.
//------------------------------------------------------------------------------

class WitPrCoord: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrCoord (WitOrMgr *, WitPrMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPrCoord ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool propRouting (WitOrSite * theOrSite, WitPeriod thePer);
         //
         // Returns true, iff proportionate routing is to be used at theOrSite
         // in thePer.

      void print ();
         //
         // Prints the proportionate routing subsystem.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPrCand *,   activeCand)
      accessFunc (WitPrCand *, inactiveCand)
      accessFunc (WitPrMgr *,  myPrMgr)

      WitPrPt * myPrPtFor (WitOrCand * theOrCand, WitPeriod thePer);
         //
         // Returns the PrPt for theOrCand and thePer owned by this PrCoord, if
         // any; otherwise NULL.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildPrBrPts ();
         //
         // Creates the PrBrPts owned by this PrCoord.

      void buildPrPts ();
         //
         // Creates the PrPts owned by this PrCoord.

      void setUpPrBrPts ();
         //
         // Sets up the PrBrPts.

      noCopyCtorAssign (WitPrCoord);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPrCand *   activeCand_;
      WitPrCand * inactiveCand_;
         //
         // The PrCands owned by this PrCoord.
         //
         //      activeCand_->active () == true
         //    inactiveCand_->active () == false

      WitPtrSched <WitOrSite, WitPrBrPt> myPrBrPts_;
         //
         // mlPrBrPts_.myPtrAt (theOrSite, thePer) is the PrBrPt owned by this
         // PrCoord that represents theOrSite and thePer, if any; else NULL.

      WitPtrSched <WitOrCand, WitPrPt> myPrPts_;
         //
         // myPrPts_.myPtrAt (theOrCand, thePer) is the PrPt owned by this
         // PrCoord that represents theOrCand and thePer, if any; else NULL.

      WitOrMgr * const myOrMgr_;
         //
         // The OrMgr for this PrCoord.

      WitPrMgr * const myPrMgr_;
         //
         // The PrMgr that owns this PrCoord.
   };
@


1.8
log
@Continued implementation of proportionate routing.
@
text
@d38 1
a38 1
      WitPrCoord (WitRtMgr *, WitPrMgr *);
d50 1
a50 1
      bool propRouting (WitRtSite * theRtSite, WitPeriod thePer);
d52 1
a52 1
         // Returns true, iff proportionate routing is to be used at theRtSite
d67 1
a67 1
      WitPrPt * myPrPtFor (WitRtCand * theRtCand, WitPeriod thePer);
d69 1
a69 1
         // Returns the PrPt for theRtCand and thePer owned by this PrCoord, if
d104 1
a104 1
      WitPtrSched <WitRtSite, WitPrBrPt> myPrBrPts_;
d106 2
a107 2
         // mlPrBrPts_.myPtrAt (theRtSite, thePer) is the PrBrPt owned by this
         // PrCoord that represents theRtSite and thePer, if any; else NULL.
d109 1
a109 1
      WitPtrSched <WitRtCand, WitPrPt> myPrPts_;
d111 2
a112 2
         // myPrPts_.myPtrAt (theRtCand, thePer) is the PrPt owned by this
         // PrCoord that represents theRtCand and thePer, if any; else NULL.
d114 1
a114 1
      WitRtMgr * const myRtMgr_;
d116 1
a116 1
         // The RtMgr for this PrCoord.
@


1.7
log
@Continued implementation of proportionate routing.
@
text
@d63 2
a64 2
      accessFunc (WitPrCand *, includedCand)
      accessFunc (WitPrCand *, excludedCand)
d96 2
a97 2
      WitPrCand * includedCand_;
      WitPrCand * excludedCand_;
d101 2
a102 2
         //    includedCand_->included () == true
         //    excludedCand_->included () == false
@


1.6
log
@Continued implementation of proportionate routing.
@
text
@d38 1
a38 1
      WitPrCoord (WitPrMgr *);
d114 1
a114 1
      WitProdRtMgr * const myProdRtMgr_;
d116 1
a116 1
         // The ProdRtMgr for this PrCoord.
@


1.5
log
@Continued implementation of proportionate routing.
@
text
@d114 1
a114 1
      WitRtMgr * const myRtMgr_;
d116 1
a116 1
         // The RtMgr for this PrCoord.
@


1.4
log
@Continued implementation of proportionate routing.
@
text
@d38 1
a38 1
      WitPrCoord (WitPrMgr *, WitRtMgr *);
d80 1
a80 1
         // Creates the PrBrPts owned by this PrMgr.
d84 1
a84 1
         // Creates the PrPts owned by this PrMgr.
d114 4
a120 4

      WitRtMgr * const myRtMgr_;
         //
         // The RtMgr for this PrCoord.
@


1.3
log
@Continued implementation of proportionate routing.
@
text
@d38 1
a38 1
      WitPrCoord (WitPrMgr *);
d50 9
d67 1
a67 1
      WitPrBrPt * myPrBrPtFor (WitPart * thePart, WitPeriod expPer);
d69 1
a69 6
         // Returns the PrBrPt for thePart and expPer owned by this PrCoord, if
         // any; otherwise NULL.

      WitPrPt * myPrPtFor (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Returns the PrPt for theBopEnt and expPer owned by this PrCoord, if
d104 1
a104 1
      WitPtrSched  <WitPart, WitPrBrPt> myPrBrPts_;
d106 2
a107 2
         // myPrPts_.myPtrAt (theBopEnt, expPer) is the PrPt owned by this
         // PrCoord that represents theBopEnt and expPer, if any; else NULL.
d109 1
a109 1
      WitPtrSched <WitBopEntry, WitPrPt> myPrPts_;
d111 2
a112 2
         // myPrPts_.myPtrAt (theBopEnt, expPer) is the PrPt owned by this
         // PrCoord that represents theBopEnt and expPer, if any; else NULL.
d117 4
@


1.2
log
@Continued implementation of proportionate routing.
@
text
@d60 2
a61 1
         // Returns the PrBrPt for thePart and expPer owned by this PrCoord.
d65 2
a66 1
         // Returns the PrPt for theBopEnt and expPer owned by this PrCoord.
@


1.1
log
@Continued implementation of proportionate routing.
@
text
@a19 1
#include <PtrMap.h>
d58 7
a64 9
      inline const WitPtrMap <WitPart, WitPrSite> & myPrSiteFor ()
         {
         return myPrSiteFor_;
         }

      inline const WitPtrSched <WitBopEntry, WitPrPt> & myPrPts ()
         {
         return myPrPts_;
         }
d72 1
a72 1
      void buildPrSites ();
d74 1
a74 1
         // Creates the PrSites owned by this PrMgr.
d80 1
a80 1
      void initTotInclShare ();
d82 1
a82 1
         // Initializes totInclShare_ for each PrSite.
d98 1
a98 1
      WitPtrMap <WitPart, WitPrSite> myPrSiteFor_;
d100 2
a101 2
         // myPrSiteFor_ (thePart) is the PrSite owned by this PrCoord that
         // represents thePart.
@

