head	1.17;
access;
symbols
	sce_5_01_20080919:1.14
	latest_sce_4_20_20060523:1.13.0.2
	sce_4_20_20060523:1.13
	latest_sce4_20_OSL:1.12.0.2
	sce_4_20_OSL:1.12
	sce_410_withVa:1.12
	sce_4_05_20040511:1.12
	sce_4_00_20040201:1.11
	nextGenBranch:1.10.0.2
	nextGenRoot:1.10
	sce_3_30_20030627:1.10
	EndRw-branch:1.9.0.4
	Root-of-EndRw:1.9
	rwToStl:1.9.0.2
	latest_sce_3_10_20010924:1.6.0.2
	sce_3_10_20010924:1.6
	latest_sce_3_00_20010601:1.5.0.4
	sce_3_00_20010601:1.5
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2011.09.28.23.49.19;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.09.24.00.27.37;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.08.30.20.17.28;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2006.08.11.22.53.41;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2006.05.02.17.33.58;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.03.10.22.53.19;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.15.23.22.31;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.02.22.18.25;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.06.18.53.36;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.07.20.14.55;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.18.14.02.31;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.25.16.08.14;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.04.22.07.36;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.40;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.21.20.03.22;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.44;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.21;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.21;	author wit;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef EqAllH
#define EqAllH

//------------------------------------------------------------------------------
// Header file: "EqAll.h"
//
// Contains the declaration of class EqAllocator.
//------------------------------------------------------------------------------

#include <Schedule.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// class EqAllocator
//
// This class provides the interface between equitable allocation and the rest
// of WIT. An instance of this class exists of long as the Problem that owns it
// exists.
//------------------------------------------------------------------------------

class WitEqAllocator: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitEqAllocator (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitEqAllocator ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void activate ();
         //
         // Puts this EqAllocator into an active state.
         // Heurstic allocation must be active.

      void heurAllocIsReset ();
         //
         // Responds to the fact that heuristic allocation is being reset:
         // Specifically, puts this EqAllocator into an inactive state.

      void setAsapMultiExec (
            WitDemand * theDemand, 
            WitPeriod   shipPer,
            bool        theValue);

      bool containsDup (
            const WitDemPerStack & theDemPers,
            int &                  firstDupIndex,
            int &                  secondDupIndex);
         //
         // Returns true, iff theDemPers contains the same (Demand, Period)
         // more than once. In this case, firstDupIndex and secondDupIndex are
         // set to the first two indices of the first duplicated pair.

      void eqAlloc (const WitDemPerStack & theDemPers);
         //
         // Performs equitable allocation on theDemPers.
         // Resets the desIncVol of the (Demand, Period)s in theDemPers.
         // Prerequisites:
         //    This EqAllocator must be active.
         //    theDemPers must be non-empty.
         //    theDemPers must contain no duplicates.

      void print (const WitDemPerStack & theDemPers);
         //
         // Prints theDemPers.

      void setDesIncVol (
            WitDemand * theDemand, 
            WitPeriod   shipPer, 
            double      theValue);
         //
         // Sets desIncVol_ (theDemand)[shipPer] to theValue.

      double incVol (WitDemand * theDemand, WitPeriod shipPer);
         //
         // Data access.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitEqAllocator);

      void deactivate ();
         //
         // Puts this EqAllocator into an inactive state.

      bool multiSigDDs (const WitDemPerStack & theDemPers);
         //
         // Returns true, iff theDemPers contains at least 2 "significant"
         // (Demand, Period)s, i.e., those with positive desIncVol.

      void eqAllocMulti (const WitDemPerStack & theDemPers);
         //
         // Performs equitable allocation on theDemPers, which is assumed
         // to have at least 2 elements.

      bool asapMultiExec (WitDemand * theDemand, WitPeriod shipPer);
         //
         // Returns the asapMultiExec argument value to be passed to 
         // HeurAllMgr::inc for theDemand and shipPer.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      bool active_;
         //
         // true, equitable allocation is active.
         // Equitable allocation can only be active when heuristic allocation
         // is active.

      WitSchedule <WitDemand, double> desIncVol_;
         //
         // The Schedule of desired incremental allocation volumes.

      WitSchedule <WitDemand, double> incVol_;
         //
         // The Schedule of incremental allocation volumes.

      WitSchedule <WitDemand, double> prevDesVol_;
         //
         // The Schedule of previous desired incremental allocation volumes.

      WitSchedule <WitDemand, int> firstIndex_;
         //
         // Used by containsDup.
         // firstIndex_ (theDemand)[thePer] the first index in theDemPers of the
         // (Demand, Period) that matches theDemand and thePer, or -1, if no
         // such pair exists. For this purpose, the elements of theDemPers are
         // considered to have index 0, 1, ...

      WitSchedule <WitDemand, bool> asapMultiExec_;
         //
         // The Schedule of asapMultiExec argument values to be passed to 
         // HeurAllMgr::inc.
         // Only allocated in two-way multi-exec mode.
   };

#endif
@


1.16
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 6
a6 1
//------------------------------------------------------------------------------
d8 1
a8 4
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential
d10 4
a13 1
//------------------------------------------------------------------------------
@


1.15
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d31 2
a32 2
{
public:
d34 129
a162 129
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitEqAllocator (WitProblem * theProblem);
//
// ProbAssoc <<< theProblem.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitEqAllocator ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void activate ();
//
// Puts this EqAllocator into an active state.
// Heurstic allocation must be active.

void heurAllocIsReset ();
//
// Responds to the fact that heuristic allocation is being reset:
// Specifically, puts this EqAllocator into an inactive state.

void setAsapMultiExec (
WitDemand * theDemand,
WitPeriod   shipPer,
bool        theValue);

bool containsDup (
const WitDemPerStack & theDemPers,
int &                  firstDupIndex,
int &                  secondDupIndex);
//
// Returns true, iff theDemPers contains the same (Demand, Period)
// more than once. In this case, firstDupIndex and secondDupIndex are
// set to the first two indices of the first duplicated pair.

void eqAlloc (const WitDemPerStack & theDemPers);
//
// Performs equitable allocation on theDemPers.
// Resets the desIncVol of the (Demand, Period)s in theDemPers.
// Prerequisites:
//    This EqAllocator must be active.
//    theDemPers must be non-empty.
//    theDemPers must contain no duplicates.

void print (const WitDemPerStack & theDemPers);
//
// Prints theDemPers.

void setDesIncVol (
WitDemand * theDemand,
WitPeriod   shipPer,
double      theValue);
//
// Sets desIncVol_ (theDemand)[shipPer] to theValue.

double incVol (WitDemand * theDemand, WitPeriod shipPer);
//
// Data access.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitEqAllocator);

void deactivate ();
//
// Puts this EqAllocator into an inactive state.

bool multiSigDDs (const WitDemPerStack & theDemPers);
//
// Returns true, iff theDemPers contains at least 2 "significant"
// (Demand, Period)s, i.e., those with positive desIncVol.

void eqAllocMulti (const WitDemPerStack & theDemPers);
//
// Performs equitable allocation on theDemPers, which is assumed
// to have at least 2 elements.

bool asapMultiExec (WitDemand * theDemand, WitPeriod shipPer);
//
// Returns the asapMultiExec argument value to be passed to
// HeurAllMgr::inc for theDemand and shipPer.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

bool active_;
//
// true, equitable allocation is active.
// Equitable allocation can only be active when heuristic allocation
// is active.

WitSchedule <WitDemand, double> desIncVol_;
//
// The Schedule of desired incremental allocation volumes.

WitSchedule <WitDemand, double> incVol_;
//
// The Schedule of incremental allocation volumes.

WitSchedule <WitDemand, double> prevDesVol_;
//
// The Schedule of previous desired incremental allocation volumes.

WitSchedule <WitDemand, int> firstIndex_;
//
// Used by containsDup.
// firstIndex_ (theDemand)[thePer] the first index in theDemPers of the
// (Demand, Period) that matches theDemand and thePer, or -1, if no
// such pair exists. For this purpose, the elements of theDemPers are
// considered to have index 0, 1, ...

WitSchedule <WitDemand, bool> asapMultiExec_;
//
// The Schedule of asapMultiExec argument values to be passed to
// HeurAllMgr::inc.
// Only allocated in two-way multi-exec mode.
};
@


1.14
log
@Minor improvement to equitable allocation.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d31 2
a32 2
   {
   public:
d34 129
a162 129
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitEqAllocator (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitEqAllocator ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void activate ();
         //
         // Puts this EqAllocator into an active state.
         // Heurstic allocation must be active.

      void heurAllocIsReset ();
         //
         // Responds to the fact that heuristic allocation is being reset:
         // Specifically, puts this EqAllocator into an inactive state.

      void setAsapMultiExec (
            WitDemand * theDemand, 
            WitPeriod   shipPer,
            bool        theValue);

      bool containsDup (
            const WitDemPerStack & theDemPers,
            int &                  firstDupIndex,
            int &                  secondDupIndex);
         //
         // Returns true, iff theDemPers contains the same (Demand, Period)
         // more than once. In this case, firstDupIndex and secondDupIndex are
         // set to the first two indices of the first duplicated pair.

      void eqAlloc (const WitDemPerStack & theDemPers);
         //
         // Performs equitable allocation on theDemPers.
         // Resets the desIncVol of the (Demand, Period)s in theDemPers.
         // Prerequisites:
         //    This EqAllocator must be active.
         //    theDemPers must be non-empty.
         //    theDemPers must contain no duplicates.

      void print (const WitDemPerStack & theDemPers);
         //
         // Prints theDemPers.

      void setDesIncVol (
            WitDemand * theDemand, 
            WitPeriod   shipPer, 
            double      theValue);
         //
         // Sets desIncVol_ (theDemand)[shipPer] to theValue.

      double incVol (WitDemand * theDemand, WitPeriod shipPer);
         //
         // Data access.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitEqAllocator);

      void deactivate ();
         //
         // Puts this EqAllocator into an inactive state.

      bool multiSigDDs (const WitDemPerStack & theDemPers);
         //
         // Returns true, iff theDemPers contains at least 2 "significant"
         // (Demand, Period)s, i.e., those with positive desIncVol.

      void eqAllocMulti (const WitDemPerStack & theDemPers);
         //
         // Performs equitable allocation on theDemPers, which is assumed
         // to have at least 2 elements.

      bool asapMultiExec (WitDemand * theDemand, WitPeriod shipPer);
         //
         // Returns the asapMultiExec argument value to be passed to 
         // HeurAllMgr::inc for theDemand and shipPer.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      bool active_;
         //
         // true, equitable allocation is active.
         // Equitable allocation can only be active when heuristic allocation
         // is active.

      WitSchedule <WitDemand, double> desIncVol_;
         //
         // The Schedule of desired incremental allocation volumes.

      WitSchedule <WitDemand, double> incVol_;
         //
         // The Schedule of incremental allocation volumes.

      WitSchedule <WitDemand, double> prevDesVol_;
         //
         // The Schedule of previous desired incremental allocation volumes.

      WitSchedule <WitDemand, int> firstIndex_;
         //
         // Used by containsDup.
         // firstIndex_ (theDemand)[thePer] the first index in theDemPers of the
         // (Demand, Period) that matches theDemand and thePer, or -1, if no
         // such pair exists. For this purpose, the elements of theDemPers are
         // considered to have index 0, 1, ...

      WitSchedule <WitDemand, bool> asapMultiExec_;
         //
         // The Schedule of asapMultiExec argument values to be passed to 
         // HeurAllMgr::inc.
         // Only allocated in two-way multi-exec mode.
   };
@


1.13
log
@Updated the copyright date on all source files.
@
text
@d145 4
@


1.12
log
@Double Precision.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.11
log
@Continued implementation of PIP.
@
text
@d92 1
a92 1
            float       theValue);
d137 1
a137 1
      WitSchedule <WitDemand, float> desIncVol_;
@


1.10
log
@Internal changes.
@
text
@a20 1
#include <Dated.h>
@


1.9
log
@Continued implementation of Single-Source.
@
text
@d66 1
a66 1
            WitBoolean  theValue);
d68 1
a68 1
      WitBoolean containsDup (
d73 1
a73 1
         // Returns TRUE, iff theDemPers contains the same (Demand, Period)
d113 1
a113 1
      WitBoolean multiSigDDs (const WitDemPerStack & theDemPers);
d115 1
a115 1
         // Returns TRUE, iff theDemPers contains at least 2 "significant"
d123 1
a123 1
      WitBoolean asapMultiExec (WitDemand * theDemand, WitPeriod shipPer);
d132 1
a132 1
      WitBoolean active_;
d134 1
a134 1
         // TRUE, equitable allocation is active.
d154 1
a154 1
      WitSchedule <WitDemand, WitBoolean> asapMultiExec_;
@


1.8
log
@Continued preliminary work on single source.
@
text
@a49 9
      // Data access functions.
      //------------------------------------------------------------------------

      inline double incVol (WitDemand * theDemand, WitPeriod shipPer)
         {
         return incVol_ (theDemand)[shipPer];
         }

      //------------------------------------------------------------------------
a62 10
      inline void setDesIncVol (
            WitDemand * theDemand, 
            WitPeriod   shipPer, 
            float       theValue)
         {
         witAssert (theValue >= 0.0);

         desIncVol_ (theDemand)[shipPer] = theValue;
         }

d89 11
@


1.7
log
@Began implementation of object iteration.
@
text
@d20 1
d146 1
a146 1
      WitSchedule (WitDemand, float) desIncVol_;
d150 1
a150 1
      WitSchedule (WitDemand, double) incVol_;
d154 1
a154 1
      WitSchedule (WitDemand, int) firstIndex_;
d162 1
a162 1
      WitSchedule (WitDemand, WitBoolean) asapMultiExec_;
@


1.6
log
@Initial implementation of pegging.
@
text
@d81 1
a81 1
      inline void setAsapMultiExec (
d84 1
a84 6
            WitBoolean  theValue)
         {
         witAssert (myGlobalComp ()->twoWayMultiExec ());

         asapMultiExec_ (theDemand, shipPer) = theValue;
         }
@


1.5
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@d138 1
a138 1
         // HeurAllocator::inc for theDemand and shipPer.
d169 1
a169 1
         // HeurAllocator::inc.
@


1.4
log
@Refactoring for selection splitting.
@
text
@d92 3
a94 3
            const WitDemPerDynStack & theDemPers,
            int &                     firstDupIndex,
            int &                     secondDupIndex);
d100 1
a100 1
      void eqAlloc (const WitDemPerDynStack & theDemPers);
d109 1
a109 1
      void print (const WitDemPerDynStack & theDemPers);
d125 1
a125 1
      WitBoolean multiSigDDs (const WitDemPerDynStack & theDemPers);
d130 1
a130 1
      void eqAllocMulti (const WitDemPerDynStack & theDemPers);
@


1.3
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d119 1
a119 3
      copyCtorAndAssignment (WitEqAllocator);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d92 3
a94 3
            const WitDemPerStack & theDemPers,
            int &                  firstDupIndex,
            int &                  secondDupIndex);
d100 1
a100 1
      void eqAlloc (const WitDemPerStack & theDemPers);
d109 1
a109 1
      void print (const WitDemPerStack & theDemPers);
d127 1
a127 1
      WitBoolean multiSigDDs (const WitDemPerStack & theDemPers);
d132 1
a132 1
      void eqAllocMulti (const WitDemPerStack & theDemPers);
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
