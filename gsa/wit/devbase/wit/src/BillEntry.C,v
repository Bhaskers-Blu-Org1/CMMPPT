head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2011.09.28.23.49.04;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.09.24.00.27.22;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.08.30.20.17.17;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.10.22.45.33;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "BillEntry.C"
//
// Contains the implementation of the following classes:
//
//    BillEntry
//    ConsEntry
//------------------------------------------------------------------------------

#include <StochImpMgr.h>
#include <CompMgr.h>
#include <Part.h>
#include <Operation.h>
#include <SubEntry.h>
#include <BopEntry.h>
#include <DataWrit.h>
#include <Pre.h>
#include <ObjStack.h>
#include <IVRealArg.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------
// Implementation of class BillEntry.
//------------------------------------------------------------------------------

WitBillEntry::~WitBillEntry ()
   {
   }

//------------------------------------------------------------------------------

const WitString & WitBillEntry::myPartName ()
   {
   return myPart ()->partName ();
   }

//------------------------------------------------------------------------------

const WitString & WitBillEntry::myOperationName ()
   {
   return myOperation ()->operationName ();
   }

//------------------------------------------------------------------------------

const WitDblFlexVec & WitBillEntry::offset ()
   {
   return offset_;
   }

//------------------------------------------------------------------------------

int WitBillEntry::nInstances (WitProblem * theProblem)
   {
   return theProblem->myCompMgr ()->nBillEntries ();
   }

//------------------------------------------------------------------------------

WitPeriod WitBillEntry::defLatestPeriod (WitProblem * theProblem)
   {
   return theProblem->lastPeriod ();
   }

//------------------------------------------------------------------------------

void WitBillEntry::storePreImpactPeriod (WitPeriod thePer, WitPeriod theValue)
   {
   witAssert (myPreprocessor ()->preprocessing ());

   impactPeriod_[thePer] = theValue;
   }

//------------------------------------------------------------------------------

void WitBillEntry::unpreprocess ()
   {
   impactPeriod_ = -1;

   firstEPIndex_.clear ();
   execPeriod_  .clear ();
   }

//------------------------------------------------------------------------------

bool WitBillEntry::storesOffset ()
   {
   return true;
   }

//------------------------------------------------------------------------------

bool WitBillEntry::withinInterval (WitPeriod thePer)
   {
   return (thePer >= earliestPeriod ()) and (thePer <= latestPeriod ());
   }

//------------------------------------------------------------------------------

WitBillEntry::WitBillEntry (WitPart * thePart, int theLocalIndex):

      WitDelComp      (thePart->myCompMgr ()),

      mappingIndex_   (myCompMgr ()->nBillEntries ()),
      myPart_         (thePart),
      localIndex_     (theLocalIndex),

      offset_         (myProblem (), defOffset ()),
      earliestPeriod_ (defEarliestPeriod ()),
      latestPeriod_   (defLatestPeriod (myProblem ())),
      routingShare_   (myProblem (), defRoutingShare ()),

      impactPeriod_   (myProblem (), -1),

      firstEPIndex_   (),
      execPeriod_     ()
   {
   }

//------------------------------------------------------------------------------

void WitBillEntry::writeOffset ()
   {
   myDataWriter ()->writeVector (
      "offset",
      offset (),
      defOffset ());
   }

//------------------------------------------------------------------------------

void WitBillEntry::preConstruct (WitOperation * theOpn, WitPart * thePart)
   {
   witAssert (theOpn  != NULL);
   witAssert (thePart != NULL);

   witAssert (theOpn->myProblem () == thePart->myProblem ());
   }

//------------------------------------------------------------------------------

void WitBillEntry::recountBillEntry ()
   {
   mappingIndex_ = myCompMgr ()->nBillEntries ();
   }

//------------------------------------------------------------------------------
// "Set" functions.
//------------------------------------------------------------------------------

void WitBillEntry::setEarliestPeriod (int theValue)
   {
   witAssert (theValue >= 0);
   witAssert (theValue <= nPeriods ());

   prepSetUnpreAttr ();

   earliestPeriod_ = theValue;
   }

//------------------------------------------------------------------------------

void WitBillEntry::setLatestPeriod (int theValue)
   {
   witAssert (theValue >= 0);
   witAssert (theValue <= lastPeriod ());

   prepSetUnpreAttr ();

   latestPeriod_ = theValue;
   }

//------------------------------------------------------------------------------

void WitBillEntry::setRoutingShare (const WitIVRealArg & theValue)
   {
   WitPeriod thePer;

   witAssert (theValue != NULL);

   if (DEBUG_MODE)
      forEachPeriod (thePer, myProblem ())
         witAssert (theValue[thePer] >= 1.0 - FLOAT_EPSILON);

   prepSetUnpostAttr ();

   routingShare_ = theValue;
   }

//------------------------------------------------------------------------------

void WitBillEntry::setOffset (const WitIVRealArg & theValue)
   {
   witAssert (theValue != NULL);

   witAssert (storesOffset ());

   prepSetUnpreAttr ();

   offset_ = theValue;
   }

//------------------------------------------------------------------------------
// Other functions.
//------------------------------------------------------------------------------

void WitBillEntry::getAllInstances (
      WitProblem *                 theProblem,
      WitObjStack <WitBillEntry> & theBillEntries)
   {
   WitBomEntry * theBomEnt;
   WitSubEntry * theSub;
   WitBopEntry * theBopEnt;

   theBillEntries.clear ();

   forEachBomEntry (theBomEnt, theProblem)
      theBillEntries.push (theBomEnt);
      
   forEachSubEntry (theSub, theProblem)
      theBillEntries.push (theSub);
      
   forEachBopEntry (theBopEnt, theProblem)
      theBillEntries.push (theBopEnt);

   theBillEntries.reverse ();
   }

//------------------------------------------------------------------------------

void WitBillEntry::reLocalIndex (WitProblem * theProblem)
   {
   WitOperation * theOpn;
   WitBomEntry  * theBomEnt;

   forEachOperation (theOpn, theProblem)
      {
      reLocalIndex (theOpn->bom ());
      reLocalIndex (theOpn->bop ());

      forEachEl (theBomEnt, theOpn->bom ())
         reLocalIndex (theBomEnt->mySubEntries ());
      }
   }

//------------------------------------------------------------------------------

void WitBillEntry::displayMandEC ()
   {
   }

//------------------------------------------------------------------------------

void WitBillEntry::writeDataAttrs ()
   {
   WitDelComp::writeDataAttrs ();

   myDataWriter ()->writeInt (
      "earliestPeriod",
      earliestPeriod (),
      defEarliestPeriod ());

   myDataWriter ()->writeInt (
      "latestPeriod",
      latestPeriod (),
      defLatestPeriod (myProblem ()));

   myDataWriter ()->writeVector (
      "routingShare",
      routingShare_,
      defRoutingShare ());
   }

//------------------------------------------------------------------------------

void WitBillEntry::copyAttrsFrom (WitBillEntry * theBillEnt)
   {
   WitDelComp::copyAttrsFrom (theBillEnt);

   if (storesOffset ())
      offset_      = theBillEnt->offset_;
   earliestPeriod_ = theBillEnt->earliestPeriod_;
   latestPeriod_   = theBillEnt->latestPeriod_;
   routingShare_   = theBillEnt->routingShare_;

   }

//------------------------------------------------------------------------------

void WitBillEntry::display ()
   {
   myMsgFac () ("billEntryDdMsg",
      mappingIndex_,
      earliestPeriod (),
      latestPeriod ());

   myProblem ()->display ("routingShareDdMsg", routingShare ());

   myProblem ()->display ("offsetDdMsg", offset ());

   displayMandEC ();

   if (myPreprocessor ()->preprocessed ())
      myMsgFac () ("impactPeriodDdMsg", impactPeriod ());

   WitDelComp::display ();
   }

//------------------------------------------------------------------------------
// Macro implementReLocalIndex (BillEntryClass)
//
// Implements WitBillEntry::reLocalIndex (const WitList <BillEntryClass> &)
// BillEntryClass must be derived from BillEntry.
//------------------------------------------------------------------------------

#define implementReLocalIndex(BillEntryClass)                                  \
                                                                               \
void WitBillEntry::reLocalIndex (const WitList <BillEntryClass> & theList)     \
   {                                                                           \
   BillEntryClass * theDerBillEntry;                                           \
   WitBillEntry *   theBillEnt;                                                \
   int              theIndex;                                                  \
                                                                               \
   if (theList.isEmpty ())                                                     \
      return;                                                                  \
                                                                               \
   if (theList.last ()->localIndex () == theList.nElements () - 1)             \
      return;                                                                  \
                                                                               \
   theIndex = 0;                                                               \
                                                                               \
   forEachEl (theDerBillEntry, theList)                                        \
      {                                                                        \
      theBillEnt              = theDerBillEntry;                               \
      theBillEnt->localIndex_ = theIndex ++;                                   \
      }                                                                        \
   }                                                                           \

//------------------------------------------------------------------------------

implementReLocalIndex (WitBomEntry)
implementReLocalIndex (WitSubEntry)
implementReLocalIndex (WitBopEntry)

//------------------------------------------------------------------------------
// Implementation of class ConsEntry.
//------------------------------------------------------------------------------

WitConsEntry::~WitConsEntry ()
   {
   }

//------------------------------------------------------------------------------

int WitConsEntry::nInstances (WitProblem * theProblem)
   {
   return theProblem->myCompMgr ()->nConsEntries ();
   }

//------------------------------------------------------------------------------
// "Set" functions.
//------------------------------------------------------------------------------

void WitConsEntry::setConsRate (const WitIVRealArg & theValue)
   {
   witAssert (theValue != NULL);

   prepSetUnpreAttr ();

   consRate_ = theValue;
   }

//------------------------------------------------------------------------------

void WitConsEntry::setFalloutRate (double theValue)
   {
   witAssert (theValue >= 0.0);
   witAssert (theValue <= 0.99 + FLOAT_EPSILON);

   prepSetUnpreAttr ();

   falloutRate_ = theValue;
   }

//------------------------------------------------------------------------------

void WitConsEntry::setExecPenalty (double theValue)
   {
   witAssert (theValue >= 0.0);

   prepSetUnpostAttr ();

   execPenalty_ = theValue;
   }

//------------------------------------------------------------------------------
// Other functions.
//------------------------------------------------------------------------------

void WitConsEntry::storePreEffConsRate (const WitTVec <double> & theTVec)
   {
   witAssert (myPreprocessor ()->preprocessing ());

   effConsRate_ = theTVec;
   }

//------------------------------------------------------------------------------

void WitConsEntry::storePreEffConsRate (double theValue)
   {
   witAssert (myPreprocessor ()->preprocessing ());

   effConsRate_ = theValue;
   }

//------------------------------------------------------------------------------

void WitConsEntry::unpreprocess ()
   {
   effConsRate_ = 0.0;

   WitBillEntry::unpreprocess ();
   }

//------------------------------------------------------------------------------

WitConsEntry * WitConsEntry::thisConsEnt ()
   {
   return this;
   }

//------------------------------------------------------------------------------

void WitConsEntry::incConsVol (
            WitTVec <double> & consVolArg,
      const WitTVec <double> & execVolArg)
   {
   WitPeriod thePer;

   forEachPeriod (thePer, myProblem ())
      if (inEffect (thePer))
         consVolArg[impactPeriod ()[thePer]] += 
            effConsRate ()[thePer] * execVolArg[thePer];
   }

//------------------------------------------------------------------------------

double WitConsEntry::effCost (WitPeriod thePer)
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

WitConsEntry::WitConsEntry (WitPart * thePart, int theLocalIndex):

      WitBillEntry  (thePart, theLocalIndex),

      mappingIndex_ (myCompMgr ()->nConsEntries ()),
      consRate_     (myProblem (), defConsRate ()),
      falloutRate_  (defFalloutRate ()),
      execPenalty_  (defExecPenalty ()),
      effConsRate_  (myProblem (), 0.0)
   {
   }

//------------------------------------------------------------------------------

void WitConsEntry::recountConsEntry ()
   {
   recountBillEntry ();

   mappingIndex_ = myCompMgr ()->nConsEntries ();
   }

//------------------------------------------------------------------------------

void WitConsEntry::writeDataAttrs ()
   {
   WitBillEntry::writeDataAttrs ();

   myDataWriter ()->writeVector (
      "consRate",
      consRate_,
      defConsRate ());

   myDataWriter ()->writeDouble (
      "falloutRate",
      falloutRate_,
      defFalloutRate ());

   myDataWriter ()->writeDouble (
      "execPenalty",
      execPenalty_,
      defExecPenalty ());
   }

//------------------------------------------------------------------------------

void WitConsEntry::copyAttrsFrom (WitConsEntry * theConsEnt)
   {
   WitBillEntry::copyAttrsFrom (theConsEnt);

   consRate_    = theConsEnt->consRate_;
   falloutRate_ = theConsEnt->falloutRate_;
   execPenalty_ = theConsEnt->execPenalty_;
   }

//------------------------------------------------------------------------------

void WitConsEntry::display ()
   {
   myMsgFac () ("consEntryDdMsg", 
      mappingIndex_,
      falloutRate_,
      execPenalty_);

   myProblem ()->display ("consRateDdMsg", consRate_);

   if (myPreprocessor ()->preprocessed ())
      myProblem ()->display ("effConsRateDdMsg", effConsRate_);

   WitBillEntry::display ();
   }
@


1.3
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 6
a6 1
//------------------------------------------------------------------------------
d8 1
a8 4
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential
d10 4
a13 1
//------------------------------------------------------------------------------
@


1.2
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d36 2
a37 2
{
}
d42 3
a44 3
{
return myPart ()->partName ();
}
d49 3
a51 3
{
return myOperation ()->operationName ();
}
d56 3
a58 3
{
return offset_;
}
d63 3
a65 3
{
return theProblem->myCompMgr ()->nBillEntries ();
}
d70 3
a72 3
{
return theProblem->lastPeriod ();
}
d77 2
a78 2
{
witAssert (myPreprocessor ()->preprocessing ());
d80 2
a81 2
impactPeriod_[thePer] = theValue;
}
d86 2
a87 2
{
impactPeriod_ = -1;
d89 3
a91 3
firstEPIndex_.clear ();
execPeriod_  .clear ();
}
d96 3
a98 3
{
return true;
}
d103 3
a105 3
{
return (thePer >= earliestPeriod ()) and (thePer <= latestPeriod ());
}
d111 1
a111 1
WitDelComp      (thePart->myCompMgr ()),
d113 15
a127 15
mappingIndex_   (myCompMgr ()->nBillEntries ()),
myPart_         (thePart),
localIndex_     (theLocalIndex),

offset_         (myProblem (), defOffset ()),
earliestPeriod_ (defEarliestPeriod ()),
latestPeriod_   (defLatestPeriod (myProblem ())),
routingShare_   (myProblem (), defRoutingShare ()),

impactPeriod_   (myProblem (), -1),

firstEPIndex_   (),
execPeriod_     ()
{
}
d132 6
a137 6
{
myDataWriter ()->writeVector (
"offset",
offset (),
defOffset ());
}
d142 3
a144 3
{
witAssert (theOpn  != NULL);
witAssert (thePart != NULL);
d146 2
a147 2
witAssert (theOpn->myProblem () == thePart->myProblem ());
}
d152 3
a154 3
{
mappingIndex_ = myCompMgr ()->nBillEntries ();
}
d161 3
a163 3
{
witAssert (theValue >= 0);
witAssert (theValue <= nPeriods ());
d165 1
a165 1
prepSetUnpreAttr ();
d167 2
a168 2
earliestPeriod_ = theValue;
}
d173 3
a175 3
{
witAssert (theValue >= 0);
witAssert (theValue <= lastPeriod ());
d177 1
a177 1
prepSetUnpreAttr ();
d179 2
a180 2
latestPeriod_ = theValue;
}
d185 2
a186 2
{
WitPeriod thePer;
d188 1
a188 1
witAssert (theValue != NULL);
d190 3
a192 3
if (DEBUG_MODE)
forEachPeriod (thePer, myProblem ())
witAssert (theValue[thePer] >= 1.0 - FLOAT_EPSILON);
d194 1
a194 1
prepSetUnpostAttr ();
d196 2
a197 2
routingShare_ = theValue;
}
d202 2
a203 2
{
witAssert (theValue != NULL);
d205 1
a205 1
witAssert (storesOffset ());
d207 1
a207 1
prepSetUnpreAttr ();
d209 2
a210 2
offset_ = theValue;
}
d217 17
a233 11
WitProblem *                 theProblem,
WitObjStack <WitBillEntry> & theBillEntries)
{
WitBomEntry * theBomEnt;
WitSubEntry * theSub;
WitBopEntry * theBopEnt;

theBillEntries.clear ();

forEachBomEntry (theBomEnt, theProblem)
theBillEntries.push (theBomEnt);
d235 2
a236 8
forEachSubEntry (theSub, theProblem)
theBillEntries.push (theSub);

forEachBopEntry (theBopEnt, theProblem)
theBillEntries.push (theBopEnt);

theBillEntries.reverse ();
}
d241 13
a253 13
{
WitOperation * theOpn;
WitBomEntry  * theBomEnt;

forEachOperation (theOpn, theProblem)
{
reLocalIndex (theOpn->bom ());
reLocalIndex (theOpn->bop ());

forEachEl (theBomEnt, theOpn->bom ())
reLocalIndex (theBomEnt->mySubEntries ());
}
}
d258 2
a259 2
{
}
d264 2
a265 2
{
WitDelComp::writeDataAttrs ();
d267 15
a281 15
myDataWriter ()->writeInt (
"earliestPeriod",
earliestPeriod (),
defEarliestPeriod ());

myDataWriter ()->writeInt (
"latestPeriod",
latestPeriod (),
defLatestPeriod (myProblem ()));

myDataWriter ()->writeVector (
"routingShare",
routingShare_,
defRoutingShare ());
}
d286 2
a287 2
{
WitDelComp::copyAttrsFrom (theBillEnt);
d289 5
a293 5
if (storesOffset ())
offset_      = theBillEnt->offset_;
earliestPeriod_ = theBillEnt->earliestPeriod_;
latestPeriod_   = theBillEnt->latestPeriod_;
routingShare_   = theBillEnt->routingShare_;
d295 1
a295 1
}
d300 5
a304 5
{
myMsgFac () ("billEntryDdMsg",
mappingIndex_,
earliestPeriod (),
latestPeriod ());
d306 1
a306 1
myProblem ()->display ("routingShareDdMsg", routingShare ());
d308 1
a308 1
myProblem ()->display ("offsetDdMsg", offset ());
d310 1
a310 1
displayMandEC ();
d312 2
a313 2
if (myPreprocessor ()->preprocessed ())
myMsgFac () ("impactPeriodDdMsg", impactPeriod ());
d315 2
a316 2
WitDelComp::display ();
}
d326 1
a326 1
\
d328 19
a346 19
{                                                                           \
BillEntryClass * theDerBillEntry;                                           \
WitBillEntry *   theBillEnt;                                                \
int              theIndex;                                                  \
\
if (theList.isEmpty ())                                                     \
return;                                                                  \
\
if (theList.last ()->localIndex () == theList.nElements () - 1)             \
return;                                                                  \
\
theIndex = 0;                                                               \
\
forEachEl (theDerBillEntry, theList)                                        \
{                                                                        \
theBillEnt              = theDerBillEntry;                               \
theBillEnt->localIndex_ = theIndex ++;                                   \
}                                                                        \
}                                                                           \
d359 2
a360 2
{
}
d365 3
a367 3
{
return theProblem->myCompMgr ()->nConsEntries ();
}
d374 2
a375 2
{
witAssert (theValue != NULL);
d377 1
a377 1
prepSetUnpreAttr ();
d379 2
a380 2
consRate_ = theValue;
}
d385 3
a387 3
{
witAssert (theValue >= 0.0);
witAssert (theValue <= 0.99 + FLOAT_EPSILON);
d389 1
a389 1
prepSetUnpreAttr ();
d391 2
a392 2
falloutRate_ = theValue;
}
d397 2
a398 2
{
witAssert (theValue >= 0.0);
d400 1
a400 1
prepSetUnpostAttr ();
d402 2
a403 2
execPenalty_ = theValue;
}
d410 2
a411 2
{
witAssert (myPreprocessor ()->preprocessing ());
d413 2
a414 2
effConsRate_ = theTVec;
}
d419 2
a420 2
{
witAssert (myPreprocessor ()->preprocessing ());
d422 2
a423 2
effConsRate_ = theValue;
}
d428 2
a429 2
{
effConsRate_ = 0.0;
d431 2
a432 2
WitBillEntry::unpreprocess ();
}
d437 3
a439 3
{
return this;
}
d444 10
a453 10
WitTVec <double> & consVolArg,
const WitTVec <double> & execVolArg)
{
WitPeriod thePer;

forEachPeriod (thePer, myProblem ())
if (inEffect (thePer))
consVolArg[impactPeriod ()[thePer]] +=
effConsRate ()[thePer] * execVolArg[thePer];
}
d458 3
a460 3
{
return 0.0;
}
d466 1
a466 1
WitBillEntry  (thePart, theLocalIndex),
d468 7
a474 7
mappingIndex_ (myCompMgr ()->nConsEntries ()),
consRate_     (myProblem (), defConsRate ()),
falloutRate_  (defFalloutRate ()),
execPenalty_  (defExecPenalty ()),
effConsRate_  (myProblem (), 0.0)
{
}
d479 2
a480 2
{
recountBillEntry ();
d482 2
a483 2
mappingIndex_ = myCompMgr ()->nConsEntries ();
}
d488 2
a489 2
{
WitBillEntry::writeDataAttrs ();
d491 15
a505 15
myDataWriter ()->writeVector (
"consRate",
consRate_,
defConsRate ());

myDataWriter ()->writeDouble (
"falloutRate",
falloutRate_,
defFalloutRate ());

myDataWriter ()->writeDouble (
"execPenalty",
execPenalty_,
defExecPenalty ());
}
d510 2
a511 2
{
WitBillEntry::copyAttrsFrom (theConsEnt);
d513 4
a516 4
consRate_    = theConsEnt->consRate_;
falloutRate_ = theConsEnt->falloutRate_;
execPenalty_ = theConsEnt->execPenalty_;
}
d521 5
a525 5
{
myMsgFac () ("consEntryDdMsg",
mappingIndex_,
falloutRate_,
execPenalty_);
d527 1
a527 1
myProblem ()->display ("consRateDdMsg", consRate_);
d529 2
a530 2
if (myPreprocessor ()->preprocessed ())
myProblem ()->display ("effConsRateDdMsg", effConsRate_);
d532 2
a533 2
WitBillEntry::display ();
}
@


1.1
log
@Heuristic Adjustment
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d36 2
a37 2
   {
   }
d42 3
a44 3
   {
   return myPart ()->partName ();
   }
d49 3
a51 3
   {
   return myOperation ()->operationName ();
   }
d56 3
a58 3
   {
   return offset_;
   }
d63 3
a65 3
   {
   return theProblem->myCompMgr ()->nBillEntries ();
   }
d70 3
a72 3
   {
   return theProblem->lastPeriod ();
   }
d77 2
a78 2
   {
   witAssert (myPreprocessor ()->preprocessing ());
d80 2
a81 2
   impactPeriod_[thePer] = theValue;
   }
d86 2
a87 2
   {
   impactPeriod_ = -1;
d89 3
a91 3
   firstEPIndex_.clear ();
   execPeriod_  .clear ();
   }
d96 3
a98 3
   {
   return true;
   }
d103 3
a105 3
   {
   return (thePer >= earliestPeriod ()) and (thePer <= latestPeriod ());
   }
d111 1
a111 1
      WitDelComp      (thePart->myCompMgr ()),
d113 15
a127 15
      mappingIndex_   (myCompMgr ()->nBillEntries ()),
      myPart_         (thePart),
      localIndex_     (theLocalIndex),

      offset_         (myProblem (), defOffset ()),
      earliestPeriod_ (defEarliestPeriod ()),
      latestPeriod_   (defLatestPeriod (myProblem ())),
      routingShare_   (myProblem (), defRoutingShare ()),

      impactPeriod_   (myProblem (), -1),

      firstEPIndex_   (),
      execPeriod_     ()
   {
   }
d132 6
a137 6
   {
   myDataWriter ()->writeVector (
      "offset",
      offset (),
      defOffset ());
   }
d142 3
a144 3
   {
   witAssert (theOpn  != NULL);
   witAssert (thePart != NULL);
d146 2
a147 2
   witAssert (theOpn->myProblem () == thePart->myProblem ());
   }
d152 3
a154 3
   {
   mappingIndex_ = myCompMgr ()->nBillEntries ();
   }
d161 3
a163 3
   {
   witAssert (theValue >= 0);
   witAssert (theValue <= nPeriods ());
d165 1
a165 1
   prepSetUnpreAttr ();
d167 2
a168 2
   earliestPeriod_ = theValue;
   }
d173 3
a175 3
   {
   witAssert (theValue >= 0);
   witAssert (theValue <= lastPeriod ());
d177 1
a177 1
   prepSetUnpreAttr ();
d179 2
a180 2
   latestPeriod_ = theValue;
   }
d185 2
a186 2
   {
   WitPeriod thePer;
d188 1
a188 1
   witAssert (theValue != NULL);
d190 3
a192 3
   if (DEBUG_MODE)
      forEachPeriod (thePer, myProblem ())
         witAssert (theValue[thePer] >= 1.0 - FLOAT_EPSILON);
d194 1
a194 1
   prepSetUnpostAttr ();
d196 2
a197 2
   routingShare_ = theValue;
   }
d202 2
a203 2
   {
   witAssert (theValue != NULL);
d205 1
a205 1
   witAssert (storesOffset ());
d207 1
a207 1
   prepSetUnpreAttr ();
d209 2
a210 2
   offset_ = theValue;
   }
d217 11
a227 17
      WitProblem *                 theProblem,
      WitObjStack <WitBillEntry> & theBillEntries)
   {
   WitBomEntry * theBomEnt;
   WitSubEntry * theSub;
   WitBopEntry * theBopEnt;

   theBillEntries.clear ();

   forEachBomEntry (theBomEnt, theProblem)
      theBillEntries.push (theBomEnt);
      
   forEachSubEntry (theSub, theProblem)
      theBillEntries.push (theSub);
      
   forEachBopEntry (theBopEnt, theProblem)
      theBillEntries.push (theBopEnt);
d229 8
a236 2
   theBillEntries.reverse ();
   }
d241 13
a253 13
   {
   WitOperation * theOpn;
   WitBomEntry  * theBomEnt;

   forEachOperation (theOpn, theProblem)
      {
      reLocalIndex (theOpn->bom ());
      reLocalIndex (theOpn->bop ());

      forEachEl (theBomEnt, theOpn->bom ())
         reLocalIndex (theBomEnt->mySubEntries ());
      }
   }
d258 2
a259 2
   {
   }
d264 2
a265 2
   {
   WitDelComp::writeDataAttrs ();
d267 15
a281 15
   myDataWriter ()->writeInt (
      "earliestPeriod",
      earliestPeriod (),
      defEarliestPeriod ());

   myDataWriter ()->writeInt (
      "latestPeriod",
      latestPeriod (),
      defLatestPeriod (myProblem ()));

   myDataWriter ()->writeVector (
      "routingShare",
      routingShare_,
      defRoutingShare ());
   }
d286 2
a287 2
   {
   WitDelComp::copyAttrsFrom (theBillEnt);
d289 5
a293 5
   if (storesOffset ())
      offset_      = theBillEnt->offset_;
   earliestPeriod_ = theBillEnt->earliestPeriod_;
   latestPeriod_   = theBillEnt->latestPeriod_;
   routingShare_   = theBillEnt->routingShare_;
d295 1
a295 1
   }
d300 5
a304 5
   {
   myMsgFac () ("billEntryDdMsg",
      mappingIndex_,
      earliestPeriod (),
      latestPeriod ());
d306 1
a306 1
   myProblem ()->display ("routingShareDdMsg", routingShare ());
d308 1
a308 1
   myProblem ()->display ("offsetDdMsg", offset ());
d310 1
a310 1
   displayMandEC ();
d312 2
a313 2
   if (myPreprocessor ()->preprocessed ())
      myMsgFac () ("impactPeriodDdMsg", impactPeriod ());
d315 2
a316 2
   WitDelComp::display ();
   }
d326 1
a326 1
                                                                               \
d328 19
a346 19
   {                                                                           \
   BillEntryClass * theDerBillEntry;                                           \
   WitBillEntry *   theBillEnt;                                                \
   int              theIndex;                                                  \
                                                                               \
   if (theList.isEmpty ())                                                     \
      return;                                                                  \
                                                                               \
   if (theList.last ()->localIndex () == theList.nElements () - 1)             \
      return;                                                                  \
                                                                               \
   theIndex = 0;                                                               \
                                                                               \
   forEachEl (theDerBillEntry, theList)                                        \
      {                                                                        \
      theBillEnt              = theDerBillEntry;                               \
      theBillEnt->localIndex_ = theIndex ++;                                   \
      }                                                                        \
   }                                                                           \
d359 2
a360 2
   {
   }
d365 3
a367 3
   {
   return theProblem->myCompMgr ()->nConsEntries ();
   }
d374 2
a375 2
   {
   witAssert (theValue != NULL);
d377 1
a377 1
   prepSetUnpreAttr ();
d379 2
a380 2
   consRate_ = theValue;
   }
d385 3
a387 3
   {
   witAssert (theValue >= 0.0);
   witAssert (theValue <= 0.99 + FLOAT_EPSILON);
d389 1
a389 1
   prepSetUnpreAttr ();
d391 2
a392 2
   falloutRate_ = theValue;
   }
d397 2
a398 2
   {
   witAssert (theValue >= 0.0);
d400 1
a400 1
   prepSetUnpostAttr ();
d402 2
a403 2
   execPenalty_ = theValue;
   }
d410 2
a411 2
   {
   witAssert (myPreprocessor ()->preprocessing ());
d413 2
a414 2
   effConsRate_ = theTVec;
   }
d419 2
a420 2
   {
   witAssert (myPreprocessor ()->preprocessing ());
d422 2
a423 2
   effConsRate_ = theValue;
   }
d428 2
a429 2
   {
   effConsRate_ = 0.0;
d431 2
a432 2
   WitBillEntry::unpreprocess ();
   }
d437 3
a439 3
   {
   return this;
   }
d444 10
a453 10
            WitTVec <double> & consVolArg,
      const WitTVec <double> & execVolArg)
   {
   WitPeriod thePer;

   forEachPeriod (thePer, myProblem ())
      if (inEffect (thePer))
         consVolArg[impactPeriod ()[thePer]] += 
            effConsRate ()[thePer] * execVolArg[thePer];
   }
d458 3
a460 3
   {
   return 0.0;
   }
d466 1
a466 1
      WitBillEntry  (thePart, theLocalIndex),
d468 7
a474 7
      mappingIndex_ (myCompMgr ()->nConsEntries ()),
      consRate_     (myProblem (), defConsRate ()),
      falloutRate_  (defFalloutRate ()),
      execPenalty_  (defExecPenalty ()),
      effConsRate_  (myProblem (), 0.0)
   {
   }
d479 2
a480 2
   {
   recountBillEntry ();
d482 2
a483 2
   mappingIndex_ = myCompMgr ()->nConsEntries ();
   }
d488 2
a489 2
   {
   WitBillEntry::writeDataAttrs ();
d491 15
a505 15
   myDataWriter ()->writeVector (
      "consRate",
      consRate_,
      defConsRate ());

   myDataWriter ()->writeDouble (
      "falloutRate",
      falloutRate_,
      defFalloutRate ());

   myDataWriter ()->writeDouble (
      "execPenalty",
      execPenalty_,
      defExecPenalty ());
   }
d510 2
a511 2
   {
   WitBillEntry::copyAttrsFrom (theConsEnt);
d513 4
a516 4
   consRate_    = theConsEnt->consRate_;
   falloutRate_ = theConsEnt->falloutRate_;
   execPenalty_ = theConsEnt->execPenalty_;
   }
d521 5
a525 5
   {
   myMsgFac () ("consEntryDdMsg", 
      mappingIndex_,
      falloutRate_,
      execPenalty_);
d527 1
a527 1
   myProblem ()->display ("consRateDdMsg", consRate_);
d529 2
a530 2
   if (myPreprocessor ()->preprocessed ())
      myProblem ()->display ("effConsRateDdMsg", effConsRate_);
d532 2
a533 2
   WitBillEntry::display ();
   }
@

