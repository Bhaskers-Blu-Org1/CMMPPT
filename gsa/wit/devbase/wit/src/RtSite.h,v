head	1.31;
access;
symbols
	sce_5_01_20080919:1.28
	latest_sce_4_20_20060523:1.28.0.2
	sce_4_20_20060523:1.28
	latest_sce4_20_OSL:1.27.0.2
	sce_4_20_OSL:1.27
	sce_410_withVa:1.27
	sce_4_05_20040511:1.21
	sce_4_00_20040201:1.21
	nextGenBranch:1.21.0.2
	nextGenRoot:1.21
	sce_3_30_20030627:1.21;
locks; strict;
comment	@ * @;


1.31
date	2011.09.28.23.50.06;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.09.24.00.28.30;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2011.08.30.20.18.06;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2006.05.02.17.34.11;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2005.03.02.22.34.37;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2005.03.02.22.02.00;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2005.03.02.21.59.46;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2005.01.27.21.03.28;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2005.01.19.18.31.04;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.11.11.21.25.09;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.04.15.20.50.14;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.03.20.19.03.59;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.03.19.16.48.26;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.03.07.23.46.16;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.03.06.20.28.21;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.03.04.19.08.04;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.03.21.07.33;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.28.20.47.39;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.02.27.19.20.23;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.27.17.21.25;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.26.23.51.33;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.26.21.42.56;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.25.22.17.10;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.24.23.44.33;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.21.20.31.07;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.19.21.47.34;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.18.23.19.18;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.18.20.11.00;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.14.20.13.00;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.13.23.06.33;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.11.18.21.20;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef RtSiteH
#define RtSiteH

//------------------------------------------------------------------------------
// Header file: "RtSite.h"
//
// Contains the declaration of class RtSite.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <List.h>

//------------------------------------------------------------------------------
// Class RtSite
//
// "Routing Site"
//
// Represents either a Part or a BomEntry in its role as a "site" at which a
// routing decision must be made. 
//
// In comments, the Part or BomEntry represented by this RtSite will be referred
// to as "the represented site".
//
// Class Hierarchy:
//
// ProbAssoc
//    RtSite
//       ProdRtSite
//       ConsRtSite
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitRtSite: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitRtSite ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void findRtCands ();
         //
         // Builds myRtCands_.

      void clearRtCands ();
         //
         // Clears myRtCands_.

      void printPer (WitPeriod thePer, int labelCol, int dataCol);
         //
         // Prints thePer.
         // The label will be printed in column labelCol.
         // If dataCol > 0, the data will be printed in that column, if
         // possible.

      virtual bool isForProd () = 0;
         //
         // Returns true,  if this RtSite is for production,  i.e. it represents
         //    a Part.
         // Returns false, if this RtSite is for consumption, i.e. it represents
         //    a BomEntry.

      virtual void printID (int labelCol, int dataCol) = 0;
         //
         // Prints info identifying the represented site.
         // The label will be printed in column labelCol.
         // If dataCol > 0, the data will be printed in that column, if
         // possible.

      virtual bool explodeable (WitPeriod thePer) = 0;
         //
         // Returns true, iff the represented site is eligible for explosion in
         // thePer.

      virtual const WitFlexVec <bool> & propRtg () = 0;
         //
         // Returns propRtg () for the represented site.

      virtual bool singleSource () = 0;
         //
         // Returns the value of the singleSource attribute for the represented
         // site.

      virtual WitPart * mrSortPart () = 0;
         //
         // Returns the Part associated an MrSite associated with this RtSite, 
         // for SSPE sorting.

      virtual WitRtCand * mrDefaultRtCand (WitPeriod thePer) = 0;
         //
         // Returns the RtCand corresponding to the default MrCand to be used by
         // the MrSite corresponding to this RtCand in thePer, if any,
         // otherwise NULL.

      virtual int heightIdx () = 0;
         //
         // Returns an index indicating the height of the represented site in
         // the BOM structure.

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitRtSite)

      static int nInstances (WitProblem *);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitList <WitRtCand> &, myRtCands)
      accessFunc (WitRtMgr *,                  myRtMgr)

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitRtSite (WitRtMgr *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual void findRtCands (WitList <WitRtCand> & theRtCands) = 0;
         //
         // Sets theRtCands to be the set of RtCands for this RtSite.

      virtual const char * perCaseID () = 0;
         //
         // Returns a string indicating which kind of period is associated with
         // this RtSite.

      noCopyCtorAssign (WitRtSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const int mappingIndex_;
         //
         // Mapping index.

      WitList <WitRtCand> myRtCands_;
         //
         // The RtCands for this RtSite.

      WitRtMgr * const myRtMgr_;
         //
         // The RtMgr that owns this RtSite.
   };

#endif
@


1.30
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.29
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d28 1
a28 1
// routing decision must be made.
d44 2
a45 66
{
public:

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitRtSite ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void findRtCands ();
//
// Builds myRtCands_.

void clearRtCands ();
//
// Clears myRtCands_.

void printPer (WitPeriod thePer, int labelCol, int dataCol);
//
// Prints thePer.
// The label will be printed in column labelCol.
// If dataCol > 0, the data will be printed in that column, if
// possible.

virtual bool isForProd () = 0;
//
// Returns true,  if this RtSite is for production,  i.e. it represents
//    a Part.
// Returns false, if this RtSite is for consumption, i.e. it represents
//    a BomEntry.

virtual void printID (int labelCol, int dataCol) = 0;
//
// Prints info identifying the represented site.
// The label will be printed in column labelCol.
// If dataCol > 0, the data will be printed in that column, if
// possible.

virtual bool explodeable (WitPeriod thePer) = 0;
//
// Returns true, iff the represented site is eligible for explosion in
// thePer.

virtual const WitFlexVec <bool> & propRtg () = 0;
//
// Returns propRtg () for the represented site.

virtual bool singleSource () = 0;
//
// Returns the value of the singleSource attribute for the represented
// site.

virtual WitPart * mrSortPart () = 0;
//
// Returns the Part associated an MrSite associated with this RtSite,
// for SSPE sorting.

virtual WitRtCand * mrDefaultRtCand (WitPeriod thePer) = 0;
//
// Returns the RtCand corresponding to the default MrCand to be used by
// the MrSite corresponding to this RtCand in thePer, if any,
// otherwise NULL.
d47 125
a171 61
virtual int heightIdx () = 0;
//
// Returns an index indicating the height of the represented site in
// the BOM structure.

//------------------------------------------------------------------------
// Mapping functions
//------------------------------------------------------------------------

decMappingIndex (WitRtSite)

static int nInstances (WitProblem *);

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (const WitList <WitRtCand> &, myRtCands)
accessFunc (WitRtMgr *,                  myRtMgr)

protected:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitRtSite (WitRtMgr *);

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

virtual void findRtCands (WitList <WitRtCand> & theRtCands) = 0;
//
// Sets theRtCands to be the set of RtCands for this RtSite.

virtual const char * perCaseID () = 0;
//
// Returns a string indicating which kind of period is associated with
// this RtSite.

noCopyCtorAssign (WitRtSite);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

const int mappingIndex_;
//
// Mapping index.

WitList <WitRtCand> myRtCands_;
//
// The RtCands for this RtSite.

WitRtMgr * const myRtMgr_;
//
// The RtMgr that owns this RtSite.
};
@


1.28
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d28 1
a28 1
// routing decision must be made. 
d44 66
a109 2
   {
   public:
d111 61
a171 125
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitRtSite ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void findRtCands ();
         //
         // Builds myRtCands_.

      void clearRtCands ();
         //
         // Clears myRtCands_.

      void printPer (WitPeriod thePer, int labelCol, int dataCol);
         //
         // Prints thePer.
         // The label will be printed in column labelCol.
         // If dataCol > 0, the data will be printed in that column, if
         // possible.

      virtual bool isForProd () = 0;
         //
         // Returns true,  if this RtSite is for production,  i.e. it represents
         //    a Part.
         // Returns false, if this RtSite is for consumption, i.e. it represents
         //    a BomEntry.

      virtual void printID (int labelCol, int dataCol) = 0;
         //
         // Prints info identifying the represented site.
         // The label will be printed in column labelCol.
         // If dataCol > 0, the data will be printed in that column, if
         // possible.

      virtual bool explodeable (WitPeriod thePer) = 0;
         //
         // Returns true, iff the represented site is eligible for explosion in
         // thePer.

      virtual const WitFlexVec <bool> & propRtg () = 0;
         //
         // Returns propRtg () for the represented site.

      virtual bool singleSource () = 0;
         //
         // Returns the value of the singleSource attribute for the represented
         // site.

      virtual WitPart * mrSortPart () = 0;
         //
         // Returns the Part associated an MrSite associated with this RtSite, 
         // for SSPE sorting.

      virtual WitRtCand * mrDefaultRtCand (WitPeriod thePer) = 0;
         //
         // Returns the RtCand corresponding to the default MrCand to be used by
         // the MrSite corresponding to this RtCand in thePer, if any,
         // otherwise NULL.

      virtual int heightIdx () = 0;
         //
         // Returns an index indicating the height of the represented site in
         // the BOM structure.

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitRtSite)

      static int nInstances (WitProblem *);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitList <WitRtCand> &, myRtCands)
      accessFunc (WitRtMgr *,                  myRtMgr)

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitRtSite (WitRtMgr *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual void findRtCands (WitList <WitRtCand> & theRtCands) = 0;
         //
         // Sets theRtCands to be the set of RtCands for this RtSite.

      virtual const char * perCaseID () = 0;
         //
         // Returns a string indicating which kind of period is associated with
         // this RtSite.

      noCopyCtorAssign (WitRtSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const int mappingIndex_;
         //
         // Mapping index.

      WitList <WitRtCand> myRtCands_;
         //
         // The RtCands for this RtSite.

      WitRtMgr * const myRtMgr_;
         //
         // The RtMgr that owns this RtSite.
   };
@


1.27
log
@Vector PropRtg.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.26
log
@Vector PropRtg.
@
text
@d91 1
a91 1
      virtual const WitFlexVec <bool> & propRt () = 0;
d93 1
a93 1
         // Returns propRt () for the represented site.
@


1.25
log
@Vector Prop-Rtg.
@
text
@a90 5
      virtual bool propRouting () = 0;
         //
         // Returns the value of the propRouting attribute of the represented
         // site.

@


1.24
log
@Pegged critical list.
@
text
@d96 4
@


1.23
log
@Low-Pri Prop-Rt.
@
text
@d130 1
a130 1
      accessFunc (WitSelector *,               mySelector)
d169 1
a169 1
      WitSelector * const mySelector_;
d171 1
a171 1
         // TheSelector for this RtSite.
@


1.22
log
@Low-Pri Prop-Rt.
@
text
@a18 1
#include <RtCase.h>
d72 7
a129 1
      accessFunc (WitRtCase,                   myRtCase)
d138 1
a138 1
      WitRtSite (WitRtCase, WitRtMgr *);
a168 4
      const WitRtCase myRtCase_;
         //
         // The RtCase for this RtSite.

@


1.21
log
@Continued implementation of proportionate routing.
@
text
@d66 1
a66 1
      void printPer (WitPeriod thePer, int dataCol);
d69 1
d73 1
a73 1
      virtual void printID (int dataCol) = 0;
d76 1
@


1.20
log
@Continued implementation of proportionate routing.
@
text
@d19 1
d122 1
a122 1
      accessFunc (bool,                        forProd)
d131 1
a131 1
      WitRtSite (bool forProdVal, WitRtMgr *);
d162 1
a162 1
      const bool forProd_;
d164 1
a164 2
         // If true,  this RtSite is for production  routing.
         // If false, this RtSite is for consumption routing.
@


1.19
log
@Continued implementation of proportionate routing.
@
text
@d65 1
a65 1
      void printIDPer (WitPeriod thePer, int dataCol);
d67 1
a67 2
         //
         // Prints info identifying the represented site and thePer.
@


1.18
log
@Continued implementation of proportionate routing.
@
text
@d65 7
a77 5
      virtual const char * perCaseID () = 0;
         //
         // Returns a string indicating which kind of period is associated with
         // this RtSite.

d93 1
a93 1
      virtual bool mrMultiChoice () = 0;
d95 2
a96 2
         // Returns the value of multiChoice the represented site, as determined
         // by multi-route.
d98 1
a98 1
      virtual WitRtCand * selMrRtCand (WitPeriod thePer) = 0;
d100 3
a102 7
         // Returns the RtCand that represents the multi-route selection for the
         // represented site.

      virtual void getMrRtCands (WitObjStack <WitRtCand> & theRtCands) = 0;
         //
         // Sets theRtCands to be the ordered list of RtCands for multi-route
         // for the represented site.
d122 1
d131 1
a131 1
      WitRtSite (WitRtMgr *);
d143 5
d161 5
@


1.17
log
@Continued implementation of proportionate routing.
@
text
@a117 2
         //
         // Not to be called; needed by the compiler for the PtrSched template.
@


1.16
log
@Continued implementation of proportionate routing.
@
text
@d26 1
d28 4
a31 1
// routing decision must be made.
d65 11
d78 2
a79 1
         // Returns true, iff this RtSite is eligible for explosion in thePer.
d83 7
a89 2
         // Returns the value of the propRouting attribute for the Part or
         // BomEntry represented by this RtSite.
d91 1
a91 1
      virtual void prtPrBrPtID (WitPeriod thePer) = 0;
d93 17
a109 1
         // Prints the ID for a PrBrPt for this RtSite and thePer.
d126 1
d159 4
@


1.15
log
@Continued implementation of proportionate routing.
@
text
@a19 1
#include <ObjStack.h>
d88 1
a88 1
      accessFunc (const WitObjStack <WitRtCand> &, myRtCands)
d104 1
a104 1
      virtual void findRtCands (WitObjStack <WitRtCand> & theRtCands) = 0;
d118 1
a118 1
      WitObjStack <WitRtCand> myRtCands_;
@


1.14
log
@Continued implementation of proportionate routing.
@
text
@d69 1
a69 1
         // BomEntry.
@


1.13
log
@Continued implementation of proportionate routing.
@
text
@d32 4
a35 3
// RtSite
//    ProdRtSite
//    ConsRtSite
d71 4
d88 2
@


1.12
log
@Continued implementation of proportionate routing.
@
text
@a69 4
      virtual void prtPrBrPtID (WitPeriod thePer) = 0;
         //
         // Prints the ID for a PrBrPt for this RtSite and thePer.

@


1.11
log
@Continued implementation of proportionate routing.
@
text
@d21 1
@


1.10
log
@Continued implementation of proportionate routing.
@
text
@d80 2
d93 1
a93 3
      WitRtSite (int theIdx, WitProblem *);
         //
         // mappingIndex_ <-- theIdx.
@


1.9
log
@Continued implementation of proportionate routing.
@
text
@d15 2
d18 101
@


1.8
log
@Continued implementation of proportionate routing.
@
text
@a14 2
//
// Contains the declaration of class RtSite.
a15 103

#include <Assoc.h>
#include <ObjStack.h>

//------------------------------------------------------------------------------
// Class RtSite
//
// "Routing Site"
// Represents either a Part or a BomEntry in its role as a "site" at which a
// routing decision must be made.
//
// Class Hierarchy:
//
// RtSite
//    ProdRtSite
//    ConsRtSite
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitRtSite: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitRtSite ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void findRtCands ();
         //
         // Builds myRtCands_.

      void clearRtCands ();
         //
         // Clears myRtCands_.

      virtual bool explodeable (WitPeriod thePer) = 0;
         //
         // Returns true, iff this RtSite is eligible for explosion in thePer.

      virtual bool propRouting () = 0;
         //
         // Returns the value of the propRouting attribute for the Part or
         // BomEntry.

      virtual void prtPrBrPtID (WitPeriod thePer) = 0;
         //
         // Prints the ID for a PrBrPt for this RtSite and thePer.

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitRtSite)

      static int nInstances (WitProblem *);
         //
         // Not to be called; needed by the compiler for the PtrSched template.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitObjStack <WitRtCand> &, myRtCands)

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitRtSite (WitRtMgr *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual void findRtCands (WitObjStack <WitRtCand> & theRtCands) = 0;
         //
         // Sets theRtCands to be the set of RtCands for this RtSite.

      noCopyCtorAssign (WitRtSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const int mappingIndex_;
         //
         // Mapping index.

      WitObjStack <WitRtCand> myRtCands_;
         //
         // The RtCands for this RtSite.
   };
@


1.7
log
@Continued implementation of proportionate routing.
@
text
@d16 1
a16 5
// Contains the declaration of the following classes:
//
//    RtSite.
//    ProdRtSite.
//    ConsRtSite.
d19 1
d38 1
a38 1
class WitRtSite: public WitUtil
a119 123
   };

//------------------------------------------------------------------------------
// Class ProdRtSite
//
// "Production Routing Site"
// "Routing Part"
// Represents a Part in its role as a site at which a production routing
// decision must be made.
//
// Class Hierarchy:
//
// RtSite
//    ProdRtSite
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitProdRtSite: public WitRtSite
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitProdRtSite (WitPart *, WitProdRtMgr *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitProdRtSite ();

      //------------------------------------------------------------------------
      // Overrides from class RtSite.
      //------------------------------------------------------------------------

      virtual bool explodeable (WitPeriod);
      virtual bool propRouting ();
      virtual void prtPrBrPtID (WitPeriod);
      virtual void findRtCands (WitObjStack <WitRtCand> &);

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitProdRtSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPart * const myPart_;
         //
         // The Part represented by this ProdRtSite.

      WitProdRtMgr * const myProdRtMgr_;
         //
         // The ProdRtMgr that owns this ProdRtSite.
   };

//------------------------------------------------------------------------------
// Class ConsRtSite
//
// "Consumption Routing Site"
// Represents a BomEntry in its role as a site at which a consumption routing
// decision must be made.
//
// Class Hierarchy:
//
// RtSite
//    ConsRtSite
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitConsRtSite: public WitRtSite
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitConsRtSite (WitBomEntry *, WitConsRtMgr *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitConsRtSite ();

      //------------------------------------------------------------------------
      // Overrides from class RtSite.
      //------------------------------------------------------------------------

      virtual bool explodeable (WitPeriod);
      virtual bool propRouting ();
      virtual void prtPrBrPtID (WitPeriod);
      virtual void findRtCands (WitObjStack <WitRtCand> &);

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitConsRtSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBomEntry * const myBomEnt_;
         //
         // The BomEntry represented by this ConsRtSite.

      WitConsRtMgr * const myConsRtMgr_;
         //
         // The ConsRtMgr that owns this ConsRtSite.
@


1.6
log
@Continued implementation of proportionate routing.
@
text
@d19 2
a20 2
//    RtPart.
//    RtBomEnt.
d29 2
a30 2
// Represents a "Site" (either a Part or a BomEntry) at which a routing decision
// must be made.
d35 2
a36 2
//    RtPart
//    RtBomEnt
d126 1
a126 1
// Class RtPart
d128 1
d130 2
a131 1
// Represents a Part at which a routing decision must be made.
d136 1
a136 1
//    RtPart
d141 1
a141 1
class WitRtPart: public WitRtSite
d149 1
a149 1
      WitRtPart (WitPart *, WitProdRtMgr *);
d157 1
a157 1
      virtual ~WitRtPart ();
d172 1
a172 1
      noCopyCtorAssign (WitRtPart);
d180 1
a180 1
         // The Part represented by this RtPart.
d184 1
a184 1
         // The ProdRtMgr that owns this RtPart.
d188 1
a188 1
// Class RtBomEnt
d190 3
a192 2
// "Routing BomEntry"
// Represents a BomEntry at which a routing decision must be made.
d197 1
a197 1
//    RtBomEnt
d202 1
a202 1
class WitRtBomEnt: public WitRtSite
d210 1
a210 1
      WitRtBomEnt (WitBomEntry *, WitConsRtMgr *);
d218 1
a218 1
      virtual ~WitRtBomEnt ();
d233 1
a233 1
      noCopyCtorAssign (WitRtBomEnt);
d241 1
a241 1
         // The BomEntry represented by this RtBomEnt.
d245 1
a245 1
         // The ConsRtMgr that owns this RtBomEnt.
@


1.5
log
@Continued implementation of proportionate routing.
@
text
@d83 2
d98 1
a98 1
      WitRtSite (int theIdx, WitProblem *);
a228 4

      static int mappingIndex (WitBomEntry * theBomEnt);
         //
         // Computes and returns the mappingIndex for the RtSite for theBomEnt.
@


1.4
log
@Continued implementation of proportionate routing.
@
text
@d205 1
a205 1
      WitRtBomEnt (WitBomEntry *, WitProdRtMgr *);
d242 1
a242 1
      WitProdRtMgr * const myProdRtMgr_;
d244 1
a244 1
         // The ProdRtMgr that owns this RtBomEnt.
@


1.3
log
@Continued implementation of proportionate routing.
@
text
@d29 2
a30 1
// Represents a Part or a BomEntry for routing purposes.
d55 1
a55 1
      void findRtCands (WitRtMgr * theRtMgr);
d57 5
a61 1
         // Sets myRtCands_, by finding the RtCands in theRtMgr.
d104 1
a104 3
      virtual void findRtCands (
            WitObjStack <WitRtCand> & theRtCands,
            WitRtMgr *                theRtMgr) = 0;
a106 1
         // The RtCands are to be found in theRtMgr.
d127 1
a127 1
// Represents a Part for routing purposes.
d145 1
a145 1
      WitRtPart (WitPart *);
d162 1
a162 1
      virtual void findRtCands (WitObjStack <WitRtCand> &, WitRtMgr *);
d175 6
d187 1
a187 1
// Represents a BomEntry for routing purposes.
d205 1
a205 1
      WitRtBomEnt (WitBomEntry *);
d222 1
a222 1
      virtual void findRtCands (WitObjStack <WitRtCand> &, WitRtMgr *);
d239 6
@


1.2
log
@Continued implementation of proportionate routing.
@
text
@d58 9
d157 2
d211 2
@


1.1
log
@Continued implementation of proportionate routing.
@
text
@d23 1
a23 1
#include <Util.h>
d54 22
d82 1
a82 1
      WitRtSite ();
d90 7
d98 12
d136 2
d139 1
a139 1
      // Other public member functions.
d142 1
a142 1
   private:
d145 1
a145 1
      // Destructor function.
d148 2
a149 1
      virtual ~WitRtPart ();
d188 2
d191 1
a191 1
      // Other public member functions.
d194 1
a194 1
   private:
d197 1
a197 1
      // Destructor function.
d200 2
a201 1
      virtual ~WitRtBomEnt ();
d206 4
@

