head	1.10;
access;
symbols
	sce_5_01_20080919:1.7
	latest_sce_4_20_20060523:1.7.0.2
	sce_4_20_20060523:1.7
	latest_sce4_20_OSL:1.6.0.4
	sce_4_20_OSL:1.6
	sce_410_withVa:1.6
	sce_4_05_20040511:1.6
	sce_4_00_20040201:1.6
	nextGenBranch:1.6.0.2
	nextGenRoot:1.6
	sce_3_30_20030627:1.6
	EndRw-branch:1.5.0.4
	Root-of-EndRw:1.5
	rwToStl:1.5.0.2
	latest_sce_3_10_20010924:1.1.0.2
	sce_3_10_20010924:1.1;
locks; strict;
comment	@ * @;


1.10
date	2011.09.28.23.50.26;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.09.24.00.28.41;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.08.30.20.18.12;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.02.17.34.13;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.02.22.18.50;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.15.21.21.39;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.12.21.02.04;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.02.19.20.38;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2001.12.17.16.25.43;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.28.19.19.01;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef SplitCntrH
#define SplitCntrH

//------------------------------------------------------------------------------
// Header file: "SplitCntr.h"
//
// Contains the declaration of class SplitCntr.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class SplitCntr
//
// "Split Counter"
// Responsible for maintaining and displaying count information for selection
// splitting.
// 
// Implemented in SelSplit.C.
//------------------------------------------------------------------------------

class WitSplitCntr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSplitCntr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSplitCntr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void initCurSplits  ();
      void countCurSplits ();
      void countSplits    (bool tempCommOK);
      void countBS        (bool bsDone);
      void countBatch     ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints splitting count info.

      noCopyCtorAssign (WitSplitCntr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSelector * const mySelector_;
         //
         // The Selector for this SplitCntr.

      int nCurSplits_;
         //
         // # of splits defined in current call to splitCommit.

      int nSplitsDone_;
         //
         // # of splits actually committed.

      int nSplitsDiscarded_;
         //
         // # of splits defined but never used.

      int nSplitSplitComs_;
         //
         // # of calls to splitCommit in which at least one split was done.

      int nUnsplitSplitComs_;
         //
         // # of calls to splitCommit in which no split was done.

      int nBSsDone_;
      int nBSsSkipped_;
         //
         // # binary searches done and skipped, respectively.

      int nBatches_;
         //
         // # split batches.
   };

#endif
@


1.9
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.8
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d27 1
a27 1
//
d32 2
a33 2
{
public:
d35 3
a37 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d39 1
a39 1
WitSplitCntr (WitSelector *);
d41 3
a43 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d45 1
a45 1
~WitSplitCntr ();
d47 3
a49 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d51 5
a55 5
void initCurSplits  ();
void countCurSplits ();
void countSplits    (bool tempCommOK);
void countBS        (bool bsDone);
void countBatch     ();
d57 1
a57 1
private:
d59 3
a61 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d63 3
a65 3
void print ();
//
// Prints splitting count info.
d67 1
a67 1
noCopyCtorAssign (WitSplitCntr);
d69 3
a71 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d73 3
a75 3
WitSelector * const mySelector_;
//
// The Selector for this SplitCntr.
d77 3
a79 3
int nCurSplits_;
//
// # of splits defined in current call to splitCommit.
d81 3
a83 3
int nSplitsDone_;
//
// # of splits actually committed.
d85 3
a87 3
int nSplitsDiscarded_;
//
// # of splits defined but never used.
d89 3
a91 3
int nSplitSplitComs_;
//
// # of calls to splitCommit in which at least one split was done.
d93 3
a95 3
int nUnsplitSplitComs_;
//
// # of calls to splitCommit in which no split was done.
d97 4
a100 4
int nBSsDone_;
int nBSsSkipped_;
//
// # binary searches done and skipped, respectively.
d102 4
a105 4
int nBatches_;
//
// # split batches.
};
@


1.7
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d27 1
a27 1
// 
d32 2
a33 2
   {
   public:
d35 3
a37 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d39 1
a39 1
      WitSplitCntr (WitSelector *);
d41 3
a43 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d45 1
a45 1
      ~WitSplitCntr ();
d47 3
a49 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d51 5
a55 5
      void initCurSplits  ();
      void countCurSplits ();
      void countSplits    (bool tempCommOK);
      void countBS        (bool bsDone);
      void countBatch     ();
d57 1
a57 1
   private:
d59 3
a61 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d63 3
a65 3
      void print ();
         //
         // Prints splitting count info.
d67 1
a67 1
      noCopyCtorAssign (WitSplitCntr);
d69 3
a71 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d73 3
a75 3
      WitSelector * const mySelector_;
         //
         // The Selector for this SplitCntr.
d77 3
a79 3
      int nCurSplits_;
         //
         // # of splits defined in current call to splitCommit.
d81 3
a83 3
      int nSplitsDone_;
         //
         // # of splits actually committed.
d85 3
a87 3
      int nSplitsDiscarded_;
         //
         // # of splits defined but never used.
d89 3
a91 3
      int nSplitSplitComs_;
         //
         // # of calls to splitCommit in which at least one split was done.
d93 3
a95 3
      int nUnsplitSplitComs_;
         //
         // # of calls to splitCommit in which no split was done.
d97 4
a100 4
      int nBSsDone_;
      int nBSsSkipped_;
         //
         // # binary searches done and skipped, respectively.
d102 4
a105 4
      int nBatches_;
         //
         // # split batches.
   };
@


1.6
log
@Internal changes.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.5
log
@Continued implementation of sel-split for pen-exec.
@
text
@d53 2
a54 2
      void countSplits    (WitBoolean tempCommOK);
      void countBS        (WitBoolean bsDone);
@


1.4
log
@Continued implementation of sel-split for pen-exec.
@
text
@d27 2
@


1.3
log
@Continued implementation of sel-split for pen-exec.
@
text
@a50 1
      void countUnsplits  ();
d52 2
d94 9
@


1.2
log
@Implementing Selection Splitting for Stock Reallocation.
@
text
@d49 1
a49 1
      void initCurSplits ();
d51 2
a52 5

      void countSplits1 ();
      void countSplits2 (WitBoolean tempCommOK);
         //
         // Does counting of split info for debugging purposes, cases 1 & 2.
@


1.1
log
@Refactoring for constrained stock reallocation.
@
text
@d24 1
d52 1
a52 5
      void countCaseA ();
      void countCaseD ();
      void countCaseE ();

      void countSplits1 (WitBoolean tempCommOK);
a87 8

      int nUnsplitCaseA_;
      int nUnsplitCaseB_;
      int nUnsplitCaseC_;
      int nUnsplitCaseD_;
      int nUnsplitCaseE_;
         //
         // # of unsplit resolving alterations, cases A through G.
@

