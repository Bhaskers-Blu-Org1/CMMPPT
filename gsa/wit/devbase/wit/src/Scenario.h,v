head	1.74;
access;
symbols
	sce_5_01_20080919:1.71;
locks; strict;
comment	@ * @;


1.74
date	2011.09.28.23.50.09;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2011.09.24.00.28.35;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2011.08.30.20.18.08;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2008.01.25.00.19.22;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2007.10.08.18.56.36;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2007.09.28.22.08.27;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2007.09.26.20.54.40;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2007.09.26.14.36.17;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2007.09.25.21.03.04;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2007.09.21.23.06.08;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2007.09.20.22.17.57;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2007.09.20.20.58.26;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2007.09.20.18.46.16;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2007.09.19.22.57.49;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2007.09.19.21.35.41;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2007.09.19.17.41.35;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2007.09.17.14.37.38;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2007.09.14.21.13.58;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2007.09.14.15.44.41;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2007.09.12.21.55.01;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2007.09.11.18.55.19;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2007.09.11.18.09.18;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2007.09.10.21.01.35;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2007.08.28.17.38.35;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2007.08.24.21.12.38;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2007.08.17.22.32.24;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2007.08.16.21.27.41;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2007.08.15.21.36.42;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2007.08.14.21.20.19;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2007.08.14.15.03.01;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2007.08.08.20.18.12;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2007.07.24.22.17.32;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2007.06.25.22.30.03;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2007.06.21.18.49.19;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2007.06.21.18.25.43;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2007.06.20.22.10.27;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2007.06.20.19.38.51;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2007.06.13.23.12.32;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2007.06.08.22.47.01;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2007.05.23.21.42.06;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2007.05.22.16.06.27;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2007.05.21.18.18.45;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2007.05.21.15.31.46;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2007.05.18.21.51.42;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2007.05.17.22.11.46;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.05.17.18.45.37;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2007.05.17.18.37.04;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2007.05.17.17.59.17;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.05.04.23.27.11;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.05.02.23.11.05;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.04.30.21.34.58;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.04.27.19.32.46;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.04.26.22.35.18;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.04.26.21.32.27;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.04.26.20.45.30;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.04.25.23.30.30;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.04.24.22.40.57;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.04.24.21.18.13;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.04.19.20.22.30;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.04.19.14.52.49;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.04.18.22.27.02;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.04.18.21.18.20;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.04.17.21.27.10;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.04.16.22.21.42;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.04.16.21.32.58;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.04.16.20.12.55;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.04.13.20.24.22;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.04.13.20.07.58;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.04.13.18.36.06;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.04.12.22.05.19;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.04.12.21.20.40;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.11.23.03.38;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.04.11.18.41.52;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.04.10.16.33.21;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.74
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ScenarioH
#define ScenarioH

//------------------------------------------------------------------------------
// Header file: "Scenario.h"
//
// Contains the declaration of class Scenario.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class Scenario
//
// Represents a scenario for stochastic implosion.
//------------------------------------------------------------------------------

class WitScenario: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitScenario (WitProblem *, int theIdx);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitScenario ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void copyAttrsFrom (WitScenario * thatScenario);
         //
         // Copies the input attributes stored by thatScenario into this
         // Scenario.

      void writeData ();
         //
         // Writes the section of the input data file for this Scenario.

      void writeMyIndex ();
         //
         // writeData for myIndex_.

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      double defProbability ();

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setProbability (double);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (int,    myIndex)
      accessFunc (double, probability)

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      inline int mappingIndex () const
         {
         return myIndex_;
         }
         //
         // Mapping index: See Mapping.h.

      inline static void verifyMappingIndex (WitScenario * &)
         {
         }
         //
         // See decMappingIndex in macs.h.

      static int nInstances (WitProblem *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void writeProbability ();
         //
         // writeData for probability_.

      noCopyCtorAssign (WitScenario);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const int myIndex_;
         //
         // The index of this Scenario_;

      double probability_;
         //
         // The probability of this Scenario.
   };

#endif
@


1.73
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.72
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d28 2
a29 2
{
public:
d31 3
a33 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d35 1
a35 1
WitScenario (WitProblem *, int theIdx);
d37 3
a39 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d41 1
a41 1
~WitScenario ();
d43 3
a45 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d47 4
a50 4
void copyAttrsFrom (WitScenario * thatScenario);
//
// Copies the input attributes stored by thatScenario into this
// Scenario.
d52 3
a54 3
void writeData ();
//
// Writes the section of the input data file for this Scenario.
d56 3
a58 3
void writeMyIndex ();
//
// writeData for myIndex_.
d60 3
a62 3
//------------------------------------------------------------------------
// Default value functions.
//------------------------------------------------------------------------
d64 1
a64 1
double defProbability ();
d66 3
a68 3
//------------------------------------------------------------------------
// "Set" functions.
//------------------------------------------------------------------------
d70 1
a70 1
void setProbability (double);
d72 3
a74 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d76 2
a77 2
accessFunc (int,    myIndex)
accessFunc (double, probability)
d79 3
a81 3
//------------------------------------------------------------------------
// Mapping functions
//------------------------------------------------------------------------
d83 6
a88 6
inline int mappingIndex () const
{
return myIndex_;
}
//
// Mapping index: See Mapping.h.
d90 5
a94 5
inline static void verifyMappingIndex (WitScenario * &)
{
}
//
// See decMappingIndex in macs.h.
d96 1
a96 1
static int nInstances (WitProblem *);
d98 1
a98 1
private:
d100 3
a102 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d104 3
a106 3
void writeProbability ();
//
// writeData for probability_.
d108 1
a108 1
noCopyCtorAssign (WitScenario);
d110 3
a112 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d114 3
a116 3
const int myIndex_;
//
// The index of this Scenario_;
d118 4
a121 4
double probability_;
//
// The probability of this Scenario.
};
@


1.71
log
@Stochastic Implosion
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d28 2
a29 2
   {
   public:
d31 3
a33 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d35 1
a35 1
      WitScenario (WitProblem *, int theIdx);
d37 3
a39 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d41 1
a41 1
      ~WitScenario ();
d43 3
a45 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d47 4
a50 4
      void copyAttrsFrom (WitScenario * thatScenario);
         //
         // Copies the input attributes stored by thatScenario into this
         // Scenario.
d52 3
a54 3
      void writeData ();
         //
         // Writes the section of the input data file for this Scenario.
d56 3
a58 3
      void writeMyIndex ();
         //
         // writeData for myIndex_.
d60 3
a62 3
      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------
d64 1
a64 1
      double defProbability ();
d66 3
a68 3
      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------
d70 1
a70 1
      void setProbability (double);
d72 3
a74 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d76 2
a77 2
      accessFunc (int,    myIndex)
      accessFunc (double, probability)
d79 3
a81 3
      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------
d83 6
a88 6
      inline int mappingIndex () const
         {
         return myIndex_;
         }
         //
         // Mapping index: See Mapping.h.
d90 5
a94 5
      inline static void verifyMappingIndex (WitScenario * &)
         {
         }
         //
         // See decMappingIndex in macs.h.
d96 1
a96 1
      static int nInstances (WitProblem *);
d98 1
a98 1
   private:
d100 3
a102 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d104 3
a106 3
      void writeProbability ();
         //
         // writeData for probability_.
d108 1
a108 1
      noCopyCtorAssign (WitScenario);
d110 3
a112 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d114 3
a116 3
      const int myIndex_;
         //
         // The index of this Scenario_;
d118 4
a121 4
      double probability_;
         //
         // The probability of this Scenario.
   };
@


1.70
log
@Stochastic Implosion
@
text
@d35 1
a35 1
      WitScenario (WitScenMgr *, int theIdx);
d76 2
a77 3
      accessFunc (WitScenMgr *, myScenMgr)
      accessFunc (int,          myIndex)
      accessFunc (double,       probability)
a113 4
      WitScenMgr * const myScenMgr_;
         //
         // The ScenMgr that owns this Scenario.

@


1.69
log
@Stochastic Implosion
@
text
@a19 1
#include <List.h>
a46 23
      void store (WitAbsScenInputAtt * theInputAtt);
         //
         // Stores theInputAtt in this Scenario.
         // Valid only when this Scenario is building its ScenInputAtts.

      void store (WitAbsScenSolnAtt * theSolnAtt);
         //
         // Stores theSolnAtt in this Scenario.
         // Valid only when this Scenario is building its ScenSolnAtts.

      void downloadInput ();
         //
         // For each scenario-specific input attribute, this function downloads
         // the value of the attribute from each of the owners into this
         // Scenario.

      void uploadInput ();
         //
         // For each scenario-specific input attribute, this function uploads
         // the value of the attribute from this Scenario to each of the owners.
         // Valid only when the stochastic implosion subsystem is uploading
         // data.

a51 11
      void uploadSoln ();
         //
         // For each scenario-specific solution attribute, this function uploads
         // the value of the attribute from this Scenario to each of the owners.
         // Valid only when the stochastic implosion subsystem is uploading
         // data.

      void clearSoln ();
         //
         // Frees the storage space used by the vectors of all ScenSolnAtts.

a59 5
      void checkInputsInStage0 (WitScenario * thatScenario);
         //
         // Verifies that the values of all scenario-specific input attributes
         // of all stage 0 Owners match between this Scenario and thatScenario.

d70 1
a70 1
      void setProbability                    (double);
d76 3
a78 14
      accessFunc (WitScenMgr *,                     myScenMgr)
      accessFunc (int,                              myIndex)
      accessFunc (double,                           probability)
      accessFunc (WitScenInputAtt <WitPart>      *, supplyVol)
      accessFunc (WitScenInputAtt <WitDemand>    *, demandVol)
      accessFunc (WitScenInputAtt <WitBoundSet>  *, hardLB)
      accessFunc (WitScenInputAtt <WitBoundSet>  *, softLB)
      accessFunc (WitScenInputAtt <WitBoundSet>  *, hardUB)
      accessFunc (WitScenSolnAtt  <WitPart>      *, scrapVol)
      accessFunc (WitScenSolnAtt  <WitMaterial>  *, stockVol)
      accessFunc (WitScenSolnAtt  <WitDemand>    *, shipVol)
      accessFunc (WitScenSolnAtt  <WitDemand>    *, cumShipVol)
      accessFunc (WitScenSolnAtt  <WitOperation> *, execVol)
      accessFunc (WitScenSolnAtt  <WitSubEntry>  *, subVol)
a104 8
      void buildScenInputAtts ();
         //
         // Builds the ScenInputAtts owned by this Scenario.

      void buildScenSolnAtts ();
         //
         // Builds the ScenSolnAtts owned by this Scenario.

a125 33

      WitList <WitAbsScenInputAtt> myAbsScenInputAtts_;
      WitList <WitAbsScenSolnAtt>  myAbsScenSolnAtts_;
         //
         // The List of all AbsScenInputAtts owned by this Scenario.
         // The List of all AbsScenSolnAtts  owned by this Scenario.

      bool buildingInputAtts_;
      bool buildingSolnAtts_;
         //
         // True, iff this Scenario is currently building its ScenInputAtts.
         // True, iff this Scenario is currently building its ScenSolnAtts.

      //------------------------------------------------------------------------
      // The ScenInputAtts owned by this Scenario.
      //------------------------------------------------------------------------

      WitScenInputAtt <WitPart>     * supplyVol_;
      WitScenInputAtt <WitDemand>   * demandVol_;
      WitScenInputAtt <WitBoundSet> * hardLB_;
      WitScenInputAtt <WitBoundSet> * softLB_;
      WitScenInputAtt <WitBoundSet> * hardUB_;

      //------------------------------------------------------------------------
      // The ScenSolnAtts owned by this Scenario.
      //------------------------------------------------------------------------

      WitScenSolnAtt <WitPart>      * scrapVol_;
      WitScenSolnAtt <WitMaterial>  * stockVol_;
      WitScenSolnAtt <WitDemand>    * shipVol_;
      WitScenSolnAtt <WitDemand>    * cumShipVol_;
      WitScenSolnAtt <WitOperation> * execVol_;
      WitScenSolnAtt <WitSubEntry>  * subVol_;
@


1.68
log
@Stochastic Implosion
@
text
@a94 9
      void writeVector (
            const char *             theAttName,
            const WitTVec <double> & theVector,
            double                   theDefaultVal);
         //
         // Writes the value of theVector to the input data output file.
         // theAttName is the name of the attribute.
         // theDefaultVal is the default value of the attribute.

d121 3
d202 5
a206 2
      WitScenInputAtt <WitPart>   * supplyVol_;
      WitScenInputAtt <WitDemand> * demandVol_;
@


1.67
log
@Stochastic Implosion
@
text
@d48 1
a48 1
      void store (WitAbsScenInputAtt * theAbsScenInputAtt);
d50 1
a50 1
         // Stores theAbsScenInputAtt in this Scenario.
d53 1
a53 1
      void store (WitAbsScenSolnAtt * theAbsScenSolnAtt);
d55 1
a55 1
         // Stores theAbsScenSolnAtt in this Scenario.
d95 9
a173 13
      void writePartData   ();
      void writeDemandData ();
         //
         // writeData for all Parts, etc.

      void startWriteCompData (WitComponent * theComp);
         //
         // Begins writeData for theComp.

      void finishWriteCompData ();
         //
         // Concludes writeData for a Component.

@


1.66
log
@Stochastic Implosion
@
text
@d116 11
a126 21
      accessFunc (WitScenMgr *, myScenMgr)
      accessFunc (int,          myIndex)
      accessFunc (double,       probability)

      //------------------------------------------------------------------------
      // Scenario-specific input attribute value functions.
      //------------------------------------------------------------------------

      double supplyVol (WitPart *,   WitPeriod);
      double demandVol (WitDemand *, WitPeriod);

      //------------------------------------------------------------------------
      // Scenario-specific solution attribute value storing functions.
      //------------------------------------------------------------------------

      void storeScrapVol   (WitPart      *, WitPeriod, double);
      void storeStockVol   (WitMaterial  *, WitPeriod, double);
      void storeShipVol    (WitDemand    *, WitPeriod, double);
      void storeCumShipVol (WitDemand    *, WitPeriod, double);
      void storeExecVol    (WitOperation *, WitPeriod, double);
      void storeSubVol     (WitSubEntry  *, WitPeriod, double);
a177 9
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitScenInputAtt <WitPart>   *, supplyVol)
      accessFunc (WitScenInputAtt <WitDemand> *, demandVol)

      //------------------------------------------------------------------------

@


1.65
log
@Stochastic Implosion
@
text
@d20 1
d48 1
a48 1
      void copyAttrsFrom (WitScenario * theScenario);
d50 24
a73 1
         // Copies the input attributes stored by theScenario into this
d76 11
d95 5
d110 1
a110 1
      void setProbability (double);
d116 21
a136 3
      accessFunc  (WitScenMgr *, myScenMgr)
      accessFunc  (int,          myIndex)
      accessFunc  (double,       probability)
d163 8
d189 1
a189 1
      // Temporary stochastic attribute functions.
d192 2
a193 2
      const WitTVec <double> & supplyVol (WitPart *   thePart);
      const WitTVec <double> & demandVol (WitDemand * theDemand);
d214 30
@


1.64
log
@Stochastic Implosion
@
text
@a60 11
      // checkAttsMatch functions.
      // Each of these functions assume that the Component argument is
      // non-recourse. The function verifies that all scenario-specific
      // attributes of the Component match between this Scenario and
      // thatScenario.
      //------------------------------------------------------------------------

      void checkAttsMatch (WitPart *,   WitScenario * thatScenario);
      void checkAttsMatch (WitDemand *, WitScenario * thatScenario);

      //------------------------------------------------------------------------
d126 2
a127 2
      WitTVec <double> & supplyVol (WitPart *   thePart);
      WitTVec <double> & demandVol (WitDemand * theDemand);
@


1.63
log
@Stochastic Implosion.
@
text
@a90 3
      const WitTVec <double> & supplyVolAcc (WitPart *   thePart);
      const WitTVec <double> & demandVolAcc (WitDemand * theDemand);

@


1.62
log
@Stochastic Implosion
@
text
@d49 2
a50 1
         // Copies the input attributes of theScenario into this Scenario.
@


1.61
log
@Stochastic Implosion
@
text
@a46 5
      void allocSoln ();
         //
         // Allocates storage for the solution attributes.
         // Valid only when the stochastic implosion solution is being uploaded.

@


1.60
log
@Stochastic Implosion
@
text
@d144 2
a145 8
      WitTVec <double> & supplyVol  (WitPart *      thePart);
      WitTVec <double> & demandVol  (WitDemand *    theDemand);
      WitTVec <double> & scrapVol   (WitPart *      thePart);
      WitTVec <double> & stockVol   (WitMaterial *  theMat);
      WitTVec <double> & shipVol    (WitDemand *    theDemand);
      WitTVec <double> & cumShipVol (WitDemand *    theDemand);
      WitTVec <double> & execVol    (WitOperation * theOpn);
      WitTVec <double> & subVol     (WitSubEntry *  theSub);
@


1.59
log
@Stochastic Implosion
@
text
@a51 4
      void clearSoln ();
         //
         // Deallocates storage for the solution attributes.

@


1.58
log
@Stochastic Implosion
@
text
@a91 15
      // store<SolnAttr> functions.
      // Each of these functions sets the value of indicated stochastic solution
      // attribute to the indicated value.
      // Valid only when the stochastic implosion solution is being uploaded
      // from the StochOptMgr.
      //------------------------------------------------------------------------

      void storeScrapVol   (WitPart *,      WitPeriod, double);
      void storeStockVol   (WitMaterial *,  WitPeriod, double);
      void storeShipVol    (WitDemand *,    WitPeriod, double);
      void storeCumShipVol (WitDemand *,    WitPeriod, double);
      void storeExecVol    (WitOperation *, WitPeriod, double);
      void storeSubVol     (WitSubEntry *,  WitPeriod, double);

      //------------------------------------------------------------------------
a126 8
      void storeSolnAttr (
            WitTVec <double> & theAttr, 
            WitPeriod          thePer,
            double             theValue);
         //
         // Sets theAttr in thePer to theValue.
         // Valid only when the stochastic implosion solution is being uploaded.

@


1.57
log
@Stochastic Implosion
@
text
@a46 10
      void uploadInput ();
         //
         // Uploads the values of the stochastic input attributes from this
         // Scenario to the owning Components.

      void uploadSoln ();
         //
         // Uploads the values of the stochastic solution attributes from this
         // Scenario to the owning Components.

@


1.56
log
@Stochastic Implosion
@
text
@a46 5
      void downloadInputAttrs ();
         //
         // Downloads the current values of all stochastic non-solution
         // attributes into this Scenario.

@


1.55
log
@Stochastic Implosion
@
text
@a19 1
#include <Schedule.h>
d49 2
a50 3
         // Saves the current values of all stochastic input attributes to this
         // Scenario.
         // Valid only when this Scenario is the current Scenario.
d125 6
a130 5
      accessFunc  (WitScenMgr *,                            myScenMgr)
      accessFunc  (int,                                     myIndex)
      accessFunc  (double,                                  probability)
      accessFunc2 (const WitSchedule <WitPart,   double> &, supplyVol)
      accessFunc2 (const WitSchedule <WitDemand, double> &, demandVol)
a156 5
      void downloadInputAttrsInt ();
         //
         // Downloads the current values of all stochastic non-solution
         // attributes into this Scenario.

d182 15
a213 18

      //------------------------------------------------------------------------
      // Scenario versions of stochastic input attributes.
      //------------------------------------------------------------------------

      WitSchedule <WitPart,      double> supplyVol_;
      WitSchedule <WitDemand,    double> demandVol_;

      //------------------------------------------------------------------------
      // Scenario versions of stochastic solution attributes.
      //------------------------------------------------------------------------

      WitSchedule <WitPart,      double> scrapVol_;
      WitSchedule <WitMaterial,  double> stockVol_;
      WitSchedule <WitDemand,    double> shipVol_;
      WitSchedule <WitDemand,    double> cumShipVol_;
      WitSchedule <WitOperation, double> execVol_;
      WitSchedule <WitSubEntry,  double> subVol_;
@


1.54
log
@Stochastic Implosion
@
text
@d48 1
a48 1
      void saveInputAttrs ();
d158 1
a158 1
      void saveInputAttrsInt ();
d160 2
a161 2
         // Saves the current values of all stochastic non-solution attributes
         // to this Scenario.
@


1.53
log
@Stochastic Implosion
@
text
@d109 1
a109 1
      // loadIn<SolnAttr> functions.
d116 6
a121 6
      void loadInScrapVol   (WitPart *,      WitPeriod, double);
      void loadInStockVol   (WitMaterial *,  WitPeriod, double);
      void loadInShipVol    (WitDemand *,    WitPeriod, double);
      void loadInCumShipVol (WitDemand *,    WitPeriod, double);
      void loadInExecVol    (WitOperation *, WitPeriod, double);
      void loadInSubVol     (WitSubEntry *,  WitPeriod, double);
d163 1
a163 1
      void loadInSolnAttr (
@


1.52
log
@Stochastic Implosion
@
text
@d59 5
d112 2
a113 1
      // Valid only when the stochastic implosion solution is being uploaded.
d127 5
a131 11
      accessFunc  (WitScenMgr *,                               myScenMgr)
      accessFunc  (int,                                        myIndex)
      accessFunc  (double,                                     probability)
      accessFunc2 (const WitSchedule <WitPart,      double> &, supplyVol)
      accessFunc2 (const WitSchedule <WitDemand,    double> &, demandVol)
      accessFunc2 (const WitSchedule <WitPart,      double> &, scrapVol)
      accessFunc2 (const WitSchedule <WitMaterial,  double> &, stockVol)
      accessFunc2 (const WitSchedule <WitDemand,    double> &, shipVol)
      accessFunc2 (const WitSchedule <WitDemand,    double> &, cumShipVol)
      accessFunc2 (const WitSchedule <WitOperation, double> &, execVol)
      accessFunc2 (const WitSchedule <WitSubEntry,  double> &, subVol)
@


1.51
log
@Stochastic Implosion
@
text
@d54 5
a125 1
      accessFunc2 (const WitSchedule <WitDemand,    double> &, cumDemandVol)
a211 1
      WitSchedule <WitDemand,    double> cumDemandVol_;
@


1.50
log
@Stochastic Implosion
@
text
@d71 1
a71 1
      void writeScenarioIndex ();
d73 1
a73 1
         // writeData for scenarioIndex_.
@


1.49
log
@Stochastic Implosion
@
text
@d90 1
a90 1
      double defScenarioProb ();
d96 1
a96 1
      void setScenarioProb (double);
d118 1
a118 1
      accessFunc  (double,                                     scenarioProb)
d167 1
a167 1
      void writeScenarioProb ();
d169 1
a169 1
         // writeData for scenarioProb_.
d198 1
a198 1
      double scenarioProb_;
@


1.48
log
@Stochastic Implosion
@
text
@a53 6
      void saveSolnAttrs ();
         //
         // Saves the current values of all solution attributes to this
         // Scenario.
         // Valid only when this Scenario is the current Scenario.

@


1.47
log
@Stochastic Implosion
@
text
@d105 1
a105 1
      // set<SolnAttr> functions.
d111 6
a116 5
      void setScrapVol   (WitPart *,      WitPeriod, double);
      void setStockVol   (WitMaterial *,  WitPeriod, double);
      void setExecVol    (WitOperation *, WitPeriod, double);
      void setShipVol    (WitDemand *,    WitPeriod, double);
      void setCumShipVol (WitDemand *,    WitPeriod, double);
d165 1
a165 1
      void setSolnAttr (
@


1.46
log
@Stochastic Implosion
@
text
@d112 1
@


1.45
log
@Stochastic Implosion
@
text
@d125 1
d212 1
@


1.44
log
@Stochastic Implosion
@
text
@d111 4
a114 2
      void setScrapVol (WitPart *,      WitPeriod, double);
      void setExecVol  (WitOperation *, WitPeriod, double);
@


1.43
log
@Stochastic Implosion
@
text
@d60 5
d105 10
d160 8
d177 8
@


1.42
log
@Stochastic Implosion
@
text
@d115 19
@


1.41
log
@Stochastic Implosion
@
text
@d103 1
@


1.40
log
@Stochastic Implosion
@
text
@d77 1
a77 1
      // checkStochAttsMatch functions.
d79 3
a81 2
      // non-recourse. The function verifies that all stochastic attributes of
      // the Component match between this Scenario and thatScenario.
d84 2
a85 2
      void checkStochAttsMatch (WitPart *,   WitScenario * thatScenario);
      void checkStochAttsMatch (WitDemand *, WitScenario * thatScenario);
@


1.39
log
@Stochastic Implosion
@
text
@d76 9
a84 4
      void checkNonRecAtts (WitScenario * otherScenario);
         //
         // Verifies that all stochastic attributes of non-recourse objects
         // match between this Scenario and otherScenario.
a132 6
      void checkNonRecPartAtts   (WitScenario * otherScenario);
      void checkNonRecDemandAtts (WitScenario * otherScenario);
         //
         // Verifies that all stochastic attributes of non-recourse Parts, etc.
         // match between this Scenario and otherScenario.

@


1.38
log
@Stochastic Implosion
@
text
@a75 4
      void display ();
         //
         // Displays the input data for this Scenario.

a127 5
      void displayPartData   ();
      void displayDemandData ();
         //
         // Displays the Part, etc. input data for this Scenario.

@


1.37
log
@Stochastic Implosion
@
text
@a25 2
//
// Implemented in StochMode.C.
@


1.36
log
@Stochastic Implosion
@
text
@d105 1
d129 1
d132 1
a132 1
         // writeData for all Demands.
d134 1
d137 7
a143 1
         // Displays the Demand input data for this Scenario.
d167 1
@


1.35
log
@Stochastic Implosion
@
text
@d27 1
a27 1
// Implemented in StochImp.C.
@


1.34
log
@Stochastic Implosion
@
text
@d82 5
@


1.33
log
@Stochastic Implosion
@
text
@a140 4
      WitStochModeMgr * const myStochModeMgr_;
         //
         // The StochModeMgr for this Scenario.

@


1.32
log
@Stochastic Implosion
@
text
@a22 16
// Macro schedAccessFunc
//
// Declares and implements an access function for a data member is of type
// Schedule <DomEl, RangeEl> and whose name is given by funcName with _
// appended. The function's name is given by funcName. The function takes a
// DomEl argument and returns the corresponding row of the Schedule.
//------------------------------------------------------------------------------

#define schedAccessFunc(RangeEl, funcName, DomEl)                              \
                                                                               \
   inline const WitTVec <RangeEl> & funcName (DomEl * theDomEl)                \
      {                                                                        \
      return funcName ## _ (theDomEl);                                         \
      }                                                                        \

//------------------------------------------------------------------------------
d98 9
a106 10
      accessFunc      (int,    myIndex)
      accessFunc      (double, scenarioProb)

      schedAccessFunc (double, demandVol,  WitDemand)
      schedAccessFunc (double, scrapVol,   WitPart)
      schedAccessFunc (double, stockVol,   WitMaterial)
      schedAccessFunc (double, shipVol,    WitDemand)
      schedAccessFunc (double, cumShipVol, WitDemand)
      schedAccessFunc (double, execVol,    WitOperation)
      schedAccessFunc (double, subVol,     WitSubEntry)
a163 1

a164 1

a166 1

a167 1

@


1.31
log
@Stochastic Implosion
@
text
@d158 1
a158 1
      WitStochDataMgr * const myStochDataMgr_;
d160 1
a160 1
         // The StochDataMgr for this Scenario.
@


1.30
log
@Stochastic Implosion
@
text
@d54 1
a54 1
      WitScenario (WitStochDataMgr *, int theIdx);
d154 4
d160 1
a160 1
         // The StochDataMgr that owns this Scenario.
@


1.29
log
@Stochastic Implosion
@
text
@d43 1
a43 4
// Class Hierarchy:
//
// ProbAssoc
//    Scenario
@


1.28
log
@Stochastic Implosion
@
text
@d139 1
a139 1
      void writeStochDataMgrData ();
d141 1
a141 1
         // writeData for myStochDataMgr_.
@


1.27
log
@Stochastic Implosion
@
text
@d102 12
d165 4
a172 2
      double                             scenarioProb_;

@


1.26
log
@Stochastic Implosion
@
text
@d106 1
a106 1
      accessFunc      (double, probability)
d157 1
a157 1
      double                             probability_;
@


1.25
log
@Stochastic Implosion
@
text
@d23 16
a80 12
      void restoreInputAttrs ();
         //
         // Restores the values of all stochastic input attributes saved in this
         // Scenario.
         // Valid only when this Scenario is the current Scenario.

      void restoreSolnAttrs ();
         //
         // Restores the values of all stochastic solution attributes saved in
         // this Scenario.
         // Valid only when this Scenario is the current Scenario.

d105 10
a114 1
      accessFunc (int, myIndex)
a174 1

@


1.24
log
@Stochastic Implosion
@
text
@d77 4
@


1.23
log
@Stochastic Implosion
@
text
@d41 1
a41 1
      WitScenario (WitStochImploder *, int theIdx);
d110 1
a110 1
      void writeStochImploderData ();
d112 1
a112 1
         // writeData for myStochImploder_.
d128 1
a128 1
      WitStochImploder * const myStochImploder_;
d130 1
a130 1
         // The StochImploder that owns this Scenario.
@


1.22
log
@Stochastic Implosion
@
text
@d53 1
a53 1
      void saveStochAttrs ();
d55 1
a55 1
         // Saves the current values of all stochastic attributes to this
d59 1
a59 1
      void restoreStochAttrs ();
d61 1
a61 1
         // Restores the values of all stochastic attributes saved in this
d65 12
d105 1
a105 1
      void saveStochAttrsInt ();
d107 2
a108 2
         // Saves the current values of all stochastic attributes to this
         // Scenario.
d137 1
a137 1
      // Scenario versions of stochastic attributes.
d142 6
a151 1
      WitSchedule <WitDemand,    double> demandVol_;
d158 1
@


1.21
log
@Stochastic Implosion
@
text
@d129 5
d136 2
d139 1
@


1.20
log
@Stochastic Implosion
@
text
@d132 1
@


1.19
log
@Stochastic Implosion
@
text
@d128 4
a131 3
      double                          probability_;
      WitSchedule <WitDemand, double> demandVol_;
      WitSchedule <WitDemand, double> shipVol_;
@


1.18
log
@Stochastic Implosion
@
text
@d125 1
a125 1
      // Scenario copies of stochastic attributes.
d130 1
@


1.17
log
@Stochastic Implosion
@
text
@a81 12
      // Default value functions.
      //------------------------------------------------------------------------

      double defProbability ();

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setProbability (double);

      //------------------------------------------------------------------------
d85 1
a85 2
      accessFunc (int,    myIndex)
      accessFunc (double, probability)
d98 1
a98 1
      void writeProbability ();
d100 1
a100 1
         // writeData for probability_.
d125 1
a125 1
      // Stochastic attributes.
d128 1
a128 4
      double probability_;
         //
         // The probability of this Scenario.

@


1.16
log
@Stochastic Implosion
@
text
@d85 1
a85 1
      double defScenarioProb ();
d91 1
a91 1
      void setScenarioProb (double);
d98 1
a98 1
      accessFunc (double, scenarioProb)
d111 1
a111 1
      void writeScenarioProb ();
d113 1
a113 1
         // writeData for scenarioProb_.
d141 1
a141 1
      double scenarioProb_;
d143 1
a143 1
         // The scenarioProb of this Scenario.
@


1.15
log
@Stochastic Implosion
@
text
@d41 1
a41 1
      WitScenario (WitStochModeMgr *, int theIdx);
d129 1
a129 1
      WitStochModeMgr * const myStochModeMgr_;
d131 1
a131 1
         // The StochModeMgr that owns this Scenario.
@


1.14
log
@Stochastic Implosion
@
text
@d16 1
a16 3
// Contains the declaration of the following class:
//
//    Scenario
@


1.13
log
@Stochastic Implosion
@
text
@d55 1
a55 1
      void storeStochAttrs ();
d57 7
a63 1
         // Stores the current values of all stochastic attributes into this
a101 5
      inline const WitSchedule <WitDemand, double> & demandVol ()
         {
         return demandVol_;
         }

d108 1
a108 1
      void storeStochAttrsInt ();
d110 1
a110 1
         // Stores the current values of all stochastic attributes into this
a112 5
      void storeStochAttrs (WitDemand * theDemand);
         //
         // Stores the current values of the stochastic attributes of theDemand
         // into this Scenario.

@


1.12
log
@Stochastic Implosion
@
text
@d135 4
@


1.11
log
@Stochastic Implosion
@
text
@d121 4
@


1.10
log
@Stochastic Implosion
@
text
@d75 1
a75 1
         // Displays the input and preprocessing data for this Scenario.
d121 4
@


1.9
log
@Stochastic implosion
@
text
@d43 1
a43 1
      WitScenario (WitStochProb *, int theIdx);
@


1.8
log
@Stochastic Implosion
@
text
@d22 1
d55 6
d96 5
d107 10
d131 4
d138 2
@


1.7
log
@Stochastic Implosion
@
text
@d54 4
@


1.6
log
@Stochastic Implosion
@
text
@d62 4
@


1.5
log
@Stochastic Implosion.
@
text
@d58 4
d87 4
@


1.4
log
@Stochastic Implosion
@
text
@d54 4
@


1.3
log
@Stochastic Implosion
@
text
@d54 11
a64 4
      void storeStochAttrs ();
         //
         // Copies the current values of all stochastic attributes into this
         // Scenario.
@


1.2
log
@Stochastic Implosion.
@
text
@d64 1
a64 1
      accessFunc (double, probability)
d82 1
a82 1
      double probability_;
d84 1
a84 1
         // The probability of this Scenario.
@


1.1
log
@Stochastic Implosion
@
text
@d42 1
a42 1
      WitScenario (WitProblem *, int theIdx);
d54 5
d63 2
a64 1
      accessFunc (int, myIndex)
d81 4
@

