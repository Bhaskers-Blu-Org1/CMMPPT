head	1.31;
access;
symbols
	sce_5_01_20080919:1.22
	latest_sce_4_20_20060523:1.22.0.2
	sce_4_20_20060523:1.22
	latest_sce4_20_OSL:1.21.0.2
	sce_4_20_OSL:1.21
	sce_410_withVa:1.21
	sce_4_05_20040511:1.16
	sce_4_00_20040201:1.16
	nextGenBranch:1.16.0.2
	nextGenRoot:1.16
	sce_3_30_20030627:1.16
	EndRw-branch:1.11.0.4
	Root-of-EndRw:1.11
	rwToStl:1.11.0.2
	latest_sce_3_10_20010924:1.4.0.2
	sce_3_10_20010924:1.4;
locks; strict;
comment	@ * @;


1.31
date	2011.09.28.23.50.27;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.09.24.00.28.42;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2011.08.30.20.18.13;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2010.09.28.19.25.17;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2010.07.30.20.20.15;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2010.07.27.23.07.07;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2010.07.26.17.48.44;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2010.07.16.22.26.42;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2010.06.18.23.11.16;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2006.05.02.17.34.13;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.12.28.19.21.20;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2004.12.21.22.13.50;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2004.12.17.21.53.01;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.14.22.37.11;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2004.12.10.16.49.45;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.04.17.23.34.21;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.07.23.29.13;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.01.31.21.28.58;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.29.19.16.50;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.02.22.18.51;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.24.23.00.08;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.17.21.45.06;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.12.21.02.06;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.22.21.23.24;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.20.00.00.19;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.17.16.25.43;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.17.16.12.48;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.21.16.53.31;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.19.18.51.00;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.16.21.42.32;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.04.15.44.40;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef SsrMgrH
#define SsrMgrH

//------------------------------------------------------------------------------
// Header file: "SsrMgr.h"
//
// Contains the declaration of class SsrMgr.
//------------------------------------------------------------------------------

#include <SelMgr.h>
#include <PtrSched.h>
#include <ObjStack.h>
#include <PerSglStack.h>

//------------------------------------------------------------------------------
// Class SsrMgr
//
// "Selective Stock Reallocation Manager"
// Manager of the selective stock reallocation subsystem.
// The selective stock reallocation subsystem is responsible for maintaining the
// selections for selective stock reallocation.
//
// Class Hierarchy:
//
// ProbAssoc
//    SelMgr
//       SsrMgr
//
// Implemented in SelStRe.C.
//------------------------------------------------------------------------------

class WitSsrMgr: public WitSelMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSsrMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSsrMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static bool instNeededFor (WitHeurAtor * theHeurAtor);
         //
         // Returns TRUE, iff an SsrMgr is needed for theHeurAtor.

      bool srAllowedFrom (WitMaterial * theMat, WitPeriod thePer);
         //
         // Returns true, iff stock reallocation of theMat from thePer is
         // currently allowed.

      void recordSR (WitMaterial * theMat, WitPeriod thePer, double srVol);
         //
         // Records the fact that srVol units of stock reallocation of theMat
         // from thePer is currently being performed.

      void postTempCommit ();
         //
         // Performs the actions to be taken for SSR, selection, just after a 
         // temp-commit.

      void print (WitMaterial * theMat);
         //
         // Prints the SsrPts for theMat.

      void storeRecoveryPair (WitMaterial * theMat, WitPeriod fromPer);
         //
         // Stores (theMat, fromPer) as a pair at which the SSR
         // configuration is to be restored to its initial state.

      void recoverInitState ();
         //
         // Restores the SSR configuration to its initial state.

      //------------------------------------------------------------------------
      // Selection Splitting functions.
      //------------------------------------------------------------------------

      virtual bool selSplitNeeded ();
         //
         // Override from class SelMgr.

      void adjReqAndRollForSS (
            WitMaterial * theMat,
            WitPeriod     rollPer,
            double &      theReqVol,
            double &      rollVol,
            bool &        bddSplit);
         //
         // Adjusts rollVol and theReqVol as neccessary for a split stock
         // reallocation selection at theMat in rollPer.
         // If the rollVol is for a bounded split, sets bddSplit to true.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc  (bool, srSelSplit)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual WitAltPt *   myAltPtFor         (WitBopEntry *,
                                               WitConsEntry *,
                                               WitPeriod,
                                               WitPeriod);
      virtual WitAltPt *   myAltPtFor         (WitPart *, WitPeriod);
      virtual bool         validForNetting    ();
      virtual bool         validForExecBounds ();
      virtual bool         validForLTBounds   ();
      virtual const char * selCaseName        ();
         //
         // Overrides from class SelMgr.

      bool hasanSsrPtFor (WitMaterial * theMat, WitPeriod fromPer);
         //
         // Returns true, iff this SsrMgr owns an SsrPt for theMat and fromPer.

      noCopyCtorAssign (WitSsrMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrSched <WitMaterial, WitSsrPt> mySsrPts_;
         //
         // mySsrPts_.myPtrAt (theMat, fromPer) is the SsrPt owned by this
         // SsrMgr that selects whether or not stock reallocation of theMat is
         // to be allowed from fromPer, if any; else NULL.

      WitObjStack <WitSsrPt> srWasDonePts_;
         //
         // The set of SsrPts owned by this SsrMgr for which srWasDone_ is true.

      bool srSelSplit_;
         //
         // true, iff selection splitting for selection stock reallocation has
         // been requested.

      WitPerSglStack <WitMaterial> myRecoveryPairs_;
         //
         // In selection recovery mode, myRecoveryPairs_ is the set of all pairs
         // (Material, Period) at which the SSR configuration is to be restored
         // to its initial state.
   };

#endif
@


1.30
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.29
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d42 2
a43 27
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitSsrMgr (WitSelector *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitSsrMgr ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

static bool instNeededFor (WitHeurAtor * theHeurAtor);
//
// Returns TRUE, iff an SsrMgr is needed for theHeurAtor.

bool srAllowedFrom (WitMaterial * theMat, WitPeriod thePer);
//
// Returns true, iff stock reallocation of theMat from thePer is
// currently allowed.
d45 122
a166 97
void recordSR (WitMaterial * theMat, WitPeriod thePer, double srVol);
//
// Records the fact that srVol units of stock reallocation of theMat
// from thePer is currently being performed.

void postTempCommit ();
//
// Performs the actions to be taken for SSR, selection, just after a
// temp-commit.

void print (WitMaterial * theMat);
//
// Prints the SsrPts for theMat.

void storeRecoveryPair (WitMaterial * theMat, WitPeriod fromPer);
//
// Stores (theMat, fromPer) as a pair at which the SSR
// configuration is to be restored to its initial state.

void recoverInitState ();
//
// Restores the SSR configuration to its initial state.

//------------------------------------------------------------------------
// Selection Splitting functions.
//------------------------------------------------------------------------

virtual bool selSplitNeeded ();
//
// Override from class SelMgr.

void adjReqAndRollForSS (
WitMaterial * theMat,
WitPeriod     rollPer,
double &      theReqVol,
double &      rollVol,
bool &        bddSplit);
//
// Adjusts rollVol and theReqVol as neccessary for a split stock
// reallocation selection at theMat in rollPer.
// If the rollVol is for a bounded split, sets bddSplit to true.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc  (bool, srSelSplit)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

virtual WitAltPt *   myAltPtFor         (WitBopEntry *,
WitConsEntry *,
WitPeriod,
WitPeriod);
virtual WitAltPt *   myAltPtFor         (WitPart *, WitPeriod);
virtual bool         validForNetting    ();
virtual bool         validForExecBounds ();
virtual bool         validForLTBounds   ();
virtual const char * selCaseName        ();
//
// Overrides from class SelMgr.

bool hasanSsrPtFor (WitMaterial * theMat, WitPeriod fromPer);
//
// Returns true, iff this SsrMgr owns an SsrPt for theMat and fromPer.

noCopyCtorAssign (WitSsrMgr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitPtrSched <WitMaterial, WitSsrPt> mySsrPts_;
//
// mySsrPts_.myPtrAt (theMat, fromPer) is the SsrPt owned by this
// SsrMgr that selects whether or not stock reallocation of theMat is
// to be allowed from fromPer, if any; else NULL.

WitObjStack <WitSsrPt> srWasDonePts_;
//
// The set of SsrPts owned by this SsrMgr for which srWasDone_ is true.

bool srSelSplit_;
//
// true, iff selection splitting for selection stock reallocation has
// been requested.

WitPerSglStack <WitMaterial> myRecoveryPairs_;
//
// In selection recovery mode, myRecoveryPairs_ is the set of all pairs
// (Material, Period) at which the SSR configuration is to be restored
// to its initial state.
};
@


1.28
log
@Modifiable Heuristic Allocation
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d42 27
a68 2
   {
   public:
d70 97
a166 122
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSsrMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSsrMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static bool instNeededFor (WitHeurAtor * theHeurAtor);
         //
         // Returns TRUE, iff an SsrMgr is needed for theHeurAtor.

      bool srAllowedFrom (WitMaterial * theMat, WitPeriod thePer);
         //
         // Returns true, iff stock reallocation of theMat from thePer is
         // currently allowed.

      void recordSR (WitMaterial * theMat, WitPeriod thePer, double srVol);
         //
         // Records the fact that srVol units of stock reallocation of theMat
         // from thePer is currently being performed.

      void postTempCommit ();
         //
         // Performs the actions to be taken for SSR, selection, just after a 
         // temp-commit.

      void print (WitMaterial * theMat);
         //
         // Prints the SsrPts for theMat.

      void storeRecoveryPair (WitMaterial * theMat, WitPeriod fromPer);
         //
         // Stores (theMat, fromPer) as a pair at which the SSR
         // configuration is to be restored to its initial state.

      void recoverInitState ();
         //
         // Restores the SSR configuration to its initial state.

      //------------------------------------------------------------------------
      // Selection Splitting functions.
      //------------------------------------------------------------------------

      virtual bool selSplitNeeded ();
         //
         // Override from class SelMgr.

      void adjReqAndRollForSS (
            WitMaterial * theMat,
            WitPeriod     rollPer,
            double &      theReqVol,
            double &      rollVol,
            bool &        bddSplit);
         //
         // Adjusts rollVol and theReqVol as neccessary for a split stock
         // reallocation selection at theMat in rollPer.
         // If the rollVol is for a bounded split, sets bddSplit to true.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc  (bool, srSelSplit)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual WitAltPt *   myAltPtFor         (WitBopEntry *,
                                               WitConsEntry *,
                                               WitPeriod,
                                               WitPeriod);
      virtual WitAltPt *   myAltPtFor         (WitPart *, WitPeriod);
      virtual bool         validForNetting    ();
      virtual bool         validForExecBounds ();
      virtual bool         validForLTBounds   ();
      virtual const char * selCaseName        ();
         //
         // Overrides from class SelMgr.

      bool hasanSsrPtFor (WitMaterial * theMat, WitPeriod fromPer);
         //
         // Returns true, iff this SsrMgr owns an SsrPt for theMat and fromPer.

      noCopyCtorAssign (WitSsrMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrSched <WitMaterial, WitSsrPt> mySsrPts_;
         //
         // mySsrPts_.myPtrAt (theMat, fromPer) is the SsrPt owned by this
         // SsrMgr that selects whether or not stock reallocation of theMat is
         // to be allowed from fromPer, if any; else NULL.

      WitObjStack <WitSsrPt> srWasDonePts_;
         //
         // The set of SsrPts owned by this SsrMgr for which srWasDone_ is true.

      bool srSelSplit_;
         //
         // true, iff selection splitting for selection stock reallocation has
         // been requested.

      WitPerSglStack <WitMaterial> myRecoveryPairs_;
         //
         // In selection recovery mode, myRecoveryPairs_ is the set of all pairs
         // (Material, Period) at which the SSR configuration is to be restored
         // to its initial state.
   };
@


1.27
log
@Selection Recovery
@
text
@d22 1
d84 1
a84 1
      void recoverInitState (WitMaterial * theMat, WitPeriod thePer);
d86 6
a91 2
         // Restores the SSR selection configuration at theMat and thePer to its
         // original state.
d116 1
a116 2
      accessFunc  (bool,                                      srSelSplit)
      accessFunc2 (WitRecoverySet <WitSsrMgr, WitMaterial> *, myRecoverySet)
d161 1
a161 1
      WitRecoverySet <WitSsrMgr, WitMaterial> * myRecoverySet_;
d163 3
a165 2
         // The RecoverySet for the SSR configuration.
         // NULL, if not in selection recovery mode.
@


1.26
log
@Selection Recovery
@
text
@d83 1
a83 1
      void recoverInitSel (WitMaterial * theMat, WitPeriod thePer);
d111 2
a112 2
      accessFunc  (bool,                                 srSelSplit)
      accessFunc2 (WitAltSet <WitSsrMgr, WitMaterial> *, myAltSet)
d157 1
a157 1
      WitAltSet <WitSsrMgr, WitMaterial> * myAltSet_;
d159 1
a159 2
         // In selection recovery mode, this is the AltSet for alterations to
         // the SSR configuration.
@


1.25
log
@Selection Recovery.
@
text
@d83 5
d111 2
a112 1
      accessFunc (bool, srSelSplit)
d156 6
@


1.24
log
@Selection Recovery
@
text
@a122 1
      virtual void         recoverSelections  ();
@


1.23
log
@Lead Time Bounds
@
text
@d123 1
@


1.22
log
@Updated the copyright date on all source files.
@
text
@d118 1
d121 1
@


1.21
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.20
log
@Low-Pri Prop-Rt.
@
text
@d114 1
a114 1
      virtual WitSelAlt *  mySelAltFor        (WitBopEntry *,
@


1.19
log
@Low-Pri Prop-Rt.
@
text
@d114 1
a114 1
      virtual WitSelPt *   mySelPtForAlt      (WitBopEntry *,
@


1.18
log
@Low-Pri Prop-Rt.
@
text
@a120 1
      virtual WitSelCand * newSelCand         ();
@


1.17
log
@Low-Pri Prop-Rt.
@
text
@d106 1
a106 3
      accessFunc (WitSsrCand *, mySsrCandForSR)
      accessFunc (WitSsrCand *, mySsrCandForNonSR)
      accessFunc (bool,         srSelSplit)
d121 1
a134 6
      WitSsrCand * mySsrCandForSR_;
      WitSsrCand * mySsrCandForNonSR_;
         //
         // The SsrCands owned by this SsrMgr representing stock reallocation
         // being allowed or disallowed, respectively.

@


1.16
log
@Continued implementation of proportionate routing.
Fixed a bug in selection splitting for selective stock reallocation.
@
text
@a56 12
      // Overrides from class SelMgr.
      //------------------------------------------------------------------------

      virtual WitSelPt *   mySelPtForAlt      (WitBopEntry *,
                                               WitConsEntry *,
                                               WitPeriod,
                                               WitPeriod);
      virtual bool         validForNetting    ();
      virtual bool         validForExecBounds ();
      virtual const char * selCaseName        ();

      //------------------------------------------------------------------------
d116 10
@


1.15
log
@Continued implementation of proportionate routing.
@
text
@d107 2
a108 1
            double &      rollVol);
d112 1
@


1.14
log
@Continued implementation of proportionate routing.
@
text
@d60 1
a60 1
      virtual WitSelPt *   mySelPt            (WitBopEntry *,
@


1.13
log
@Continued implementation of Proportionate Routing.
@
text
@d27 1
a27 1
// Interface to the selective stock reallocation subsystem.
@


1.12
log
@Internal changes.
@
text
@d72 1
a72 1
      static bool ssrNeeded (WitHeurAtor * theHeurAtor);
d74 1
a74 2
         // Returns true, iff selective stock reallocation is needed for
         // theHeurAtor.
@


1.11
log
@Continued implementation of single-source.
@
text
@d64 2
a65 2
      virtual WitBoolean   validForNetting    ();
      virtual WitBoolean   validForExecBounds ();
d72 1
a72 1
      static WitBoolean ssrNeeded (WitHeurAtor * theHeurAtor);
d74 1
a74 1
         // Returns TRUE, iff selective stock reallocation is needed for
d77 1
a77 1
      WitBoolean srAllowedFrom (WitMaterial * theMat, WitPeriod thePer);
d79 1
a79 1
         // Returns TRUE, iff stock reallocation of theMat from thePer is
d100 1
a100 1
      virtual WitBoolean selSplitNeeded ();
d119 1
a119 1
      accessFunc (WitBoolean,   srSelSplit)
d127 1
a127 1
      WitBoolean hasanSsrPtFor (WitMaterial * theMat, WitPeriod fromPer);
d129 1
a129 1
         // Returns TRUE, iff this SsrMgr owns an SsrPt for theMat and fromPer.
d151 1
a151 1
         // The set of SsrPts owned by this SsrMgr for which srWasDone_ is TRUE.
d153 1
a153 1
      WitBoolean srSelSplit_;
d155 1
a155 1
         // TRUE, iff selection splitting for selection stock reallocation has
@


1.10
log
@Continued implementation of single-source.
@
text
@d63 1
a63 2
                                               WitPeriod,
                                               WitBoolean &);
@


1.9
log
@Continued implementation of sel-split for pen-exec.
@
text
@d73 5
@


1.8
log
@Continued implementation of sel-split for pen-exec.
@
text
@d21 1
@


1.7
log
@Fixed bug regarding booleans for sel-split for stock reallocation.
@
text
@d64 1
@


1.6
log
@Implementing Selection Splitting for Stock Reallocation.
@
text
@d113 1
d146 5
@


1.5
log
@Fixed a NULL pointer bug.
@
text
@d76 1
a76 1
      void recordSrFrom (WitMaterial * theMat, WitPeriod thePer);
d78 2
a79 2
         // Records the fact that stock reallocation of theMat from thePer is
         // currently being performed.
d97 9
@


1.4
log
@Fixed bug:
   Selective Stock Reallocation was doing unrequested build-ahead.
@
text
@d25 1
@


1.3
log
@Continued implementation of selective stock reallocation.
@
text
@a74 5
      WitBoolean srAllowedTo (WitMaterial * theMat, WitPeriod thePer);
         //
         // Returns TRUE, iff stock reallocation of theMat to thePer is
         // currently allowed.

@


1.2
log
@Continued implementation of selective stock reallocation.
@
text
@d70 1
a70 1
      WitBoolean srAllowed (WitPart * thePart, WitPeriod fromPer);
d72 1
a72 1
         // Returns TRUE, iff stock reallocation of thePart from fromPer is
d75 19
d136 4
@


1.1
log
@Continuing implementation of selective stock reallocation.
@
text
@d20 1
d67 9
d87 3
d96 4
d105 12
@

