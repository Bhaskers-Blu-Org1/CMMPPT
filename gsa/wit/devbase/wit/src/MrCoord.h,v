head	1.29;
access;
symbols
	sce_5_01_20080919:1.17
	latest_sce_4_20_20060523:1.17.0.2
	sce_4_20_20060523:1.17
	latest_sce4_20_OSL:1.16.0.2
	sce_4_20_OSL:1.16
	sce_410_withVa:1.16
	sce_4_05_20040511:1.5
	sce_4_00_20040201:1.5
	nextGenBranch:1.5.0.2
	nextGenRoot:1.5
	sce_3_30_20030627:1.5;
locks; strict;
comment	@ * @;


1.29
date	2011.09.28.23.49.33;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2011.09.24.00.27.53;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.08.30.20.17.38;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2010.09.28.19.25.15;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2010.07.30.23.39.28;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2010.07.30.20.20.13;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2010.07.27.22.25.18;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2010.07.27.22.15.44;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2010.07.26.21.47.11;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2010.07.02.18.53.10;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2010.07.01.22.41.21;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2010.07.01.20.51.32;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2006.05.02.17.34.02;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2005.03.24.19.18.29;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.01.26.23.50.32;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.01.19.18.31.03;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.01.18.22.45.41;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2005.01.13.17.24.20;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.28.19.21.18;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.21.22.13.48;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.14.22.37.10;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.13.23.35.47;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.09.21.34.11;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.09.19.22.50;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.15.20.50.10;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.11.19.08.26;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.01.20.34.26;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.21.23.36.51;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.19.16.48.19;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef MrCoordH
#define MrCoordH

//------------------------------------------------------------------------------
// Header file: "MrCoord.h"
//
// Contains the declaration of class MrCoord.
//------------------------------------------------------------------------------

#include <RtSite.h>
#include <RtCand.h>
#include <PtrMap.h>
#include <Schedule.h>
#include <PerSglStack.h>

//------------------------------------------------------------------------------
// Class MrCoord
//
// "Multi-Route Coordinator"
//
// Internal Coordinator of the Multi-Route Subsystem.
//
// Class Hierarchy:
//
// ProbAssoc
//    MrCoord
//
// Implemented in MultiRoute.C.
//------------------------------------------------------------------------------

class WitMrCoord: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrCoord (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMrCoord ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      WitRtCand * selRtCand (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns the currently selected RtCand to be used when exploding thru
         // theRtSite in thePer.

      WitAltPt * myAltPtFor (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // myAltPtFor for explosion thru theRtCand in thePer.

      bool selIsSplit (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns true, iff there is a split routing selection for exploding
         // thru theRtSite in thePer. Valid only in sel-split mode.

      void defineSplit (
            WitRtSite *         theRtSite, 
            WitPeriod           thePer,
            double              expVol,
            WitRtCandDblStack & theSplitPairs,
            double &            unbddVol);
         //
         // Sets theSplitPairs to be the split pairs for a split explosion of
         // expVol units at theRtSite in thePer. Sets unbddVol to the splitVol
         // of the unbounded split explosion, if any; otherwise 0.

      void setPrevSel (WitRtCand * theRtCand, WitPeriod thePer, bool theVal);
         //
         // Sets prevSel_ (theRtCand)[thePer] to theVal.

      void saveRtCand (WitRtCand * theRtCand);
         //
         // Saves the value of theRtCand to be retrieved later.

      void retrieveRtCand (WitRtCand * & theRtCand);
         //
         // Sets theRtCand to the value saved by saveRtCand.

      void storeRecoveryPair (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Stores (theRtSite, thePer) as a pair at which the multi-route
         // configuration is to be restored to its initial state.

      void recoverInitState ();
         //
         // Restores the multi-route selection configuration to its initial
         // state.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitSelector *, mySelector)
      accessFunc (WitMrSelMgr *, myMrSelMgrForProd)
      accessFunc (WitMrSelMgr *, myMrSelMgrForCons)

      inline WitMrSite * myMrSiteFor (WitRtSite * theRtSite)
         {
         return myMrSiteFor_ (theRtSite);
         }

      inline bool prevSel (WitRtCand * theRtCand, WitPeriod thePer)
         {
         return
            prevSel_ (theRtCand).isAllocated ()?
               prevSel_ (theRtCand)[thePer]:
               false;
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void prtRecover (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Prints for the recovery of theRtCand in thePer.
         // (Used in selection recovery.)

      noCopyCtorAssign (WitMrCoord);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMrSelMgr * myMrSelMgrForProd_;
      WitMrSelMgr * myMrSelMgrForCons_;
         //
         // The MrSelMgrs owned by this MrCoord.

      WitPtrMap <WitRtSite, WitMrSite> myMrSiteFor_;
         //
         // myMrSiteFor_ (theRtSite) is this MrCoord's MrSite for theRtSite.

      WitSelector * const mySelector_;
         //
         // The Selector for this MrCoord.

      WitSchedule <WitRtCand, bool> prevSel_;
         //
         // If prevSel_ (theRtCand) is allocated:
         //    prevSel_ (theRtCand)[thePer] is true, iff theRtCand has been
         //    previously selected in thePer.
         //
         // Otherwise:
         //    theRtCand has not been previously selected in any period.

      WitRtCand * savedRtCand_;
         //
         // The RtCand saved and retrieved by saveRtCand () and
         // retrieveRtCand ().

      WitPerSglStack <WitRtSite> myRtSiteRecPairs_;
      WitPerSglStack <WitRtCand> myRtCandRecPairs_;
         //
         // In selection recovery mode:
         //    myRtSiteRecPairs_ is the set of all pairs (RtSite, Period) at
         //    which the multi-route configuration is to be restored to its
         //    initial state.
         //    myRtCandRecPairs_ is the set of all pairs (RtCand, Period) at
         //    which the multi-route configuration is to be restored to its
         //    initial state.
   };

#endif
@


1.28
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.27
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d41 2
a42 88
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitMrCoord (WitSelector *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitMrCoord ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

WitRtCand * selRtCand (WitRtSite * theRtSite, WitPeriod thePer);
//
// Returns the currently selected RtCand to be used when exploding thru
// theRtSite in thePer.

WitAltPt * myAltPtFor (WitRtCand * theRtCand, WitPeriod thePer);
//
// myAltPtFor for explosion thru theRtCand in thePer.

bool selIsSplit (WitRtSite * theRtSite, WitPeriod thePer);
//
// Returns true, iff there is a split routing selection for exploding
// thru theRtSite in thePer. Valid only in sel-split mode.

void defineSplit (
WitRtSite *         theRtSite,
WitPeriod           thePer,
double              expVol,
WitRtCandDblStack & theSplitPairs,
double &            unbddVol);
//
// Sets theSplitPairs to be the split pairs for a split explosion of
// expVol units at theRtSite in thePer. Sets unbddVol to the splitVol
// of the unbounded split explosion, if any; otherwise 0.

void setPrevSel (WitRtCand * theRtCand, WitPeriod thePer, bool theVal);
//
// Sets prevSel_ (theRtCand)[thePer] to theVal.

void saveRtCand (WitRtCand * theRtCand);
//
// Saves the value of theRtCand to be retrieved later.

void retrieveRtCand (WitRtCand * & theRtCand);
//
// Sets theRtCand to the value saved by saveRtCand.

void storeRecoveryPair (WitRtSite * theRtSite, WitPeriod thePer);
//
// Stores (theRtSite, thePer) as a pair at which the multi-route
// configuration is to be restored to its initial state.

void recoverInitState ();
//
// Restores the multi-route selection configuration to its initial
// state.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitSelector *, mySelector)
accessFunc (WitMrSelMgr *, myMrSelMgrForProd)
accessFunc (WitMrSelMgr *, myMrSelMgrForCons)

inline WitMrSite * myMrSiteFor (WitRtSite * theRtSite)
{
return myMrSiteFor_ (theRtSite);
}

inline bool prevSel (WitRtCand * theRtCand, WitPeriod thePer)
{
return
prevSel_ (theRtCand).isAllocated ()?
prevSel_ (theRtCand)[thePer]:
false;
}

private:
d44 139
a182 53
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void prtRecover (WitRtCand * theRtCand, WitPeriod thePer);
//
// Prints for the recovery of theRtCand in thePer.
// (Used in selection recovery.)

noCopyCtorAssign (WitMrCoord);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitMrSelMgr * myMrSelMgrForProd_;
WitMrSelMgr * myMrSelMgrForCons_;
//
// The MrSelMgrs owned by this MrCoord.

WitPtrMap <WitRtSite, WitMrSite> myMrSiteFor_;
//
// myMrSiteFor_ (theRtSite) is this MrCoord's MrSite for theRtSite.

WitSelector * const mySelector_;
//
// The Selector for this MrCoord.

WitSchedule <WitRtCand, bool> prevSel_;
//
// If prevSel_ (theRtCand) is allocated:
//    prevSel_ (theRtCand)[thePer] is true, iff theRtCand has been
//    previously selected in thePer.
//
// Otherwise:
//    theRtCand has not been previously selected in any period.

WitRtCand * savedRtCand_;
//
// The RtCand saved and retrieved by saveRtCand () and
// retrieveRtCand ().

WitPerSglStack <WitRtSite> myRtSiteRecPairs_;
WitPerSglStack <WitRtCand> myRtCandRecPairs_;
//
// In selection recovery mode:
//    myRtSiteRecPairs_ is the set of all pairs (RtSite, Period) at
//    which the multi-route configuration is to be restored to its
//    initial state.
//    myRtCandRecPairs_ is the set of all pairs (RtCand, Period) at
//    which the multi-route configuration is to be restored to its
//    initial state.
};
@


1.26
log
@Modifiable Heuristic Allocation
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d41 88
a128 2
   {
   public:
d130 53
a182 139
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrCoord (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMrCoord ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      WitRtCand * selRtCand (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns the currently selected RtCand to be used when exploding thru
         // theRtSite in thePer.

      WitAltPt * myAltPtFor (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // myAltPtFor for explosion thru theRtCand in thePer.

      bool selIsSplit (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns true, iff there is a split routing selection for exploding
         // thru theRtSite in thePer. Valid only in sel-split mode.

      void defineSplit (
            WitRtSite *         theRtSite, 
            WitPeriod           thePer,
            double              expVol,
            WitRtCandDblStack & theSplitPairs,
            double &            unbddVol);
         //
         // Sets theSplitPairs to be the split pairs for a split explosion of
         // expVol units at theRtSite in thePer. Sets unbddVol to the splitVol
         // of the unbounded split explosion, if any; otherwise 0.

      void setPrevSel (WitRtCand * theRtCand, WitPeriod thePer, bool theVal);
         //
         // Sets prevSel_ (theRtCand)[thePer] to theVal.

      void saveRtCand (WitRtCand * theRtCand);
         //
         // Saves the value of theRtCand to be retrieved later.

      void retrieveRtCand (WitRtCand * & theRtCand);
         //
         // Sets theRtCand to the value saved by saveRtCand.

      void storeRecoveryPair (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Stores (theRtSite, thePer) as a pair at which the multi-route
         // configuration is to be restored to its initial state.

      void recoverInitState ();
         //
         // Restores the multi-route selection configuration to its initial
         // state.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitSelector *, mySelector)
      accessFunc (WitMrSelMgr *, myMrSelMgrForProd)
      accessFunc (WitMrSelMgr *, myMrSelMgrForCons)

      inline WitMrSite * myMrSiteFor (WitRtSite * theRtSite)
         {
         return myMrSiteFor_ (theRtSite);
         }

      inline bool prevSel (WitRtCand * theRtCand, WitPeriod thePer)
         {
         return
            prevSel_ (theRtCand).isAllocated ()?
               prevSel_ (theRtCand)[thePer]:
               false;
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void prtRecover (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Prints for the recovery of theRtCand in thePer.
         // (Used in selection recovery.)

      noCopyCtorAssign (WitMrCoord);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMrSelMgr * myMrSelMgrForProd_;
      WitMrSelMgr * myMrSelMgrForCons_;
         //
         // The MrSelMgrs owned by this MrCoord.

      WitPtrMap <WitRtSite, WitMrSite> myMrSiteFor_;
         //
         // myMrSiteFor_ (theRtSite) is this MrCoord's MrSite for theRtSite.

      WitSelector * const mySelector_;
         //
         // The Selector for this MrCoord.

      WitSchedule <WitRtCand, bool> prevSel_;
         //
         // If prevSel_ (theRtCand) is allocated:
         //    prevSel_ (theRtCand)[thePer] is true, iff theRtCand has been
         //    previously selected in thePer.
         //
         // Otherwise:
         //    theRtCand has not been previously selected in any period.

      WitRtCand * savedRtCand_;
         //
         // The RtCand saved and retrieved by saveRtCand () and
         // retrieveRtCand ().

      WitPerSglStack <WitRtSite> myRtSiteRecPairs_;
      WitPerSglStack <WitRtCand> myRtCandRecPairs_;
         //
         // In selection recovery mode:
         //    myRtSiteRecPairs_ is the set of all pairs (RtSite, Period) at
         //    which the multi-route configuration is to be restored to its
         //    initial state.
         //    myRtCandRecPairs_ is the set of all pairs (RtCand, Period) at
         //    which the multi-route configuration is to be restored to its
         //    initial state.
   };
@


1.25
log
@Selection Recovery
@
text
@d23 1
d97 5
a106 9
      void recoverInitState (WitRtSite * theRtSite, WitPeriod thePer);
      void recoverInitState (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Restores the multi-route selection configuration at theRtSite and
         // thePer to its original state.
         //
         // Restores the multi-route selection configuration at theRtCand and
         // thePer to its original state.

d111 3
a113 4
      accessFunc  (WitSelector *,                            mySelector)
      accessFunc  (WitMrSelMgr *,                            myMrSelMgrForProd)
      accessFunc  (WitMrSelMgr *,                            myMrSelMgrForCons)
      accessFunc2 (WitRecoverySet <WitMrCoord, WitRtSite> *, myRtSiteRecSet)
d172 2
a173 2
      WitRecoverySet <WitMrCoord, WitRtSite> * myRtSiteRecSet_;
      WitRecoverySet <WitMrCoord, WitRtCand> * myRtCandRecSet_;
d175 7
a181 3
         // The RecoverySet for the Multi-Route configuration at RtSites.
         // The RecoverySet for the Multi-Route configuration at RtCands.
         // NULL, if not in selection recovery mode.
@


1.24
log
@Selection Recovery
@
text
@a22 1
#include <PairStack.h>
d102 1
d106 3
d117 1
a117 1
      accessFunc2 (WitRecoverySet <WitMrCoord, WitRtSite> *, myRecoverySet)
d176 2
a177 1
      WitRecoverySet <WitMrCoord, WitRtSite> * myRecoverySet_;
d179 2
a180 1
         // The RecoverySet for the Multi-Route configuration.
a181 6

      WitPairStack <WitRtCand, WitPeriod> prevSelPairs_;
         //
         // Valid only in selection recovery mode.
         // The set of pairs (theRtCand, thePer) for which
         // prevSel_ (theRtCand)[thePer] is true.
@


1.23
log
@Selection Recovery
@
text
@d97 1
a97 1
      void recoverSelections ();
d99 1
a99 1
         // Restores the multi-route selection configuration to its original
a100 1
         // Valid only in selection recovery mode.
d102 1
a102 1
      void recoverInitSel (WitRtSite * theRtSite, WitPeriod thePer);
d111 4
a114 4
      accessFunc  (WitSelector *,                       mySelector)
      accessFunc  (WitMrSelMgr *,                       myMrSelMgrForProd)
      accessFunc  (WitMrSelMgr *,                       myMrSelMgrForCons)
      accessFunc2 (WitAltSet <WitMrCoord, WitRtSite> *, myAltSet)
d173 1
a173 1
      WitAltSet <WitMrCoord, WitRtSite> * myAltSet_;
d175 1
a175 2
         // In selection recovery mode, this is the AltSet for alterations to
         // the multi-route configuration.
@


1.22
log
@Selection Recovery
@
text
@d19 2
a22 3
#include <RtSite.h>
#include <RtCand.h>
#include <ObjStack.h>
@


1.21
log
@Selection Recovery
@
text
@a97 6
      void recordAlteration (WitMrPt * theMrPt);
         //
         // Records the fact that the multi-route configuration is being altered
         // at theMrPt.
         // Valid only in selection recovery mode:

d101 1
a101 1
         // state, recovering all discarded selection candidates.
d104 5
d113 4
a116 3
      accessFunc (WitSelector *, mySelector)
      accessFunc (WitMrSelMgr *, myMrSelMgrForProd)
      accessFunc (WitMrSelMgr *, myMrSelMgrForCons)
d175 1
a175 1
      WitObjStack <WitMrPt> alteredMrPts_;
d177 3
a179 10
         // Valid only in selection recovery mode.
         // The set of MrPts at which the multi-route configuration was altered
         // in the current incHeurAlloc.

      WitSchedule <WitRtSite, bool> mrAlteredAt_;
         //
         // Valid only in selection recovery mode.
         // mrAlteredAt_ (theRtSite)[thePer] is true, iff the multi-route
         // configuration was altered in the current incHeurAlloc at theRtSite
         // in thePer.
@


1.20
log
@Selection recovery.
@
text
@d23 1
d98 1
a98 1
      void mrSelRecovery ();
d100 8
a107 2
         // Performs aspects of selection recovery that are specific to
         // Multi-Route.
d170 18
a192 5

      WitRtCand * savedRtCand_;
         //
         // The RtCand saved and retrieved by saveRtCand () and
         // retrieveRtCand ().
@


1.19
log
@Name change: "selection reuse" has becomne "selection recovery".
@
text
@d97 1
a97 1
      void restoreSpecConfig ();
d99 2
a100 2
         // Restores the aspects of the selection configuration that are
         // specific to Multi-Route.
d130 1
a130 1
      void prtRestore (WitRtCand * theRtCand, WitPeriod thePer);
d132 1
a132 1
         // Prints for the restoration of theRtCand in thePer.
@


1.18
log
@Selection Reuse
@
text
@d101 1
a101 1
         // Valid only in selection reuse mode.
d133 1
a133 1
         // (Used in selection reuse.)
d165 1
a165 1
         // Valid only in selection reuse mode.
@


1.17
log
@Updated the copyright date on all source files.
@
text
@d23 1
d97 6
d130 5
d163 6
@


1.16
log
@mappingIndex revision.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.15
log
@Pegged critical list.
@
text
@a18 1
#include <Assoc.h>
d21 2
@


1.14
log
@Low-Pri Prop-Rt.
@
text
@d72 11
@


1.13
log
@Low-Pri Prop-Rt.
@
text
@a18 1
#include <RtCase.h>
@


1.12
log
@Low-Pri Prop-Rt.
@
text
@d90 2
a97 2
      WitMrSelMgr * myMrSelMgrFor (WitRtCase theRtCase);

@


1.11
log
@Low-Pri Prop-Rt.
@
text
@d77 8
d139 5
@


1.10
log
@Low-Pri Prop-Rt.
@
text
@d64 1
a64 1
      WitSelAlt * mySelAltFor (WitRtCand * theRtCand, WitPeriod thePer);
d66 1
a66 1
         // mySelAltFor for explosion thru theRtCand in thePer.
@


1.9
log
@Low-Pri Prop-Rt.
@
text
@d64 1
a64 1
      WitSelPt * mySelPtForAlt (WitRtCand * theRtCand, WitPeriod thePer);
d66 1
a66 1
         // mySelPtForAlt for explosion thru theRtCand in thePer.
@


1.8
log
@Low-Pri Prop-Rt.
@
text
@a67 5
      WitMrCand * myMrCandFor (WitRtCand * theRtCand);
         //
         // Returns this MrCoord's MrCand for theRtCand, creating it, if
         // necesary.

a118 4
      WitPtrMap <WitRtCand, WitMrCand> myMrCandFor_;
         //
         // myMrCandFor_ (theRtCand) is this MrCoord's MrCand for theRtCand.

@


1.7
log
@Low-Pri Prop-Rt.
@
text
@d93 1
a93 1
      WitMrSelMgr * myMrSelMgr (WitRtCase theRtCase);
@


1.6
log
@Low-Pri Prop-Rt.
@
text
@d68 5
a92 5
      inline WitMrCand * myMrCandFor (WitRtCand * theRtCand)
         {
         return myMrCandFor_ (theRtCand);
         }

@


1.5
log
@Continued implementation of proportionate routing.
@
text
@d22 1
d36 1
a36 1
// Implemented in MrMgr.C.
a58 4
      void store (WitMrCand * theMrCand);
         //
         // Stores theMrCand in myMrCandFor_.

d73 4
d95 8
d131 9
@


1.4
log
@Continued implementation of proportionate routing.
@
text
@d19 1
a79 2
      accessFunc (WitMrSelMgr *, myMrSelMgrForProd)
      accessFunc (WitMrSelMgr *, myMrSelMgrForCons)
d91 2
@


1.3
log
@Continued implementation of proportionate routing.
@
text
@a69 4
      //------------------------------------------------------------------------
      // Selection splitting functions.
      //------------------------------------------------------------------------

@


1.2
log
@Continued implementation of propotionate routing.
@
text
@d83 2
a84 2
      accessFunc (WitPmrMgr *,   myPmrMgr)
      accessFunc (WitCmrMgr *,   myCmrMgr)
d109 2
a110 2
      WitPmrMgr * myPmrMgr_;
      WitCmrMgr * myCmrMgr_;
d112 1
a112 1
         // The PmrMgr and CmrMgr owned by this MrCoord.
@


1.1
log
@Continued implementation of proportionate routing.
@
text
@d83 3
a85 3
      accessFunc (WitPmrSelMgr *, myPmrSelMgr)
      accessFunc (WitCmrSelMgr *, myCmrSelMgr)
      accessFunc (WitSelector *,  mySelector)
d109 2
a110 2
      WitPmrSelMgr * myPmrSelMgr_;
      WitCmrSelMgr * myCmrSelMgr_;
d112 1
a112 1
         // The PmrSelMgr and CmrSelMgr owned by this MrCoord.
@

