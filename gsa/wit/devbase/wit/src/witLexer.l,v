head	1.24;
access;
symbols
	sce_5_01_20080919:1.21
	latest_sce_4_20_20060523:1.19.0.2
	sce_4_20_20060523:1.19
	latest_sce4_20_OSL:1.18.0.2
	sce_4_20_OSL:1.18
	sce_410_withVa:1.17
	sce_4_05_20040511:1.15
	sce_4_00_20040201:1.12
	nextGenBranch:1.11.0.2
	nextGenRoot:1.11
	sce_3_30_20030627:1.9
	EndRw-branch:1.4.0.4
	Root-of-EndRw:1.4
	rwToStl:1.4.0.2
	latest_sce_3_10_20010924:1.2.0.8
	sce_3_10_20010924:1.2
	latest_sce_3_00_20010601:1.2.0.6
	sce_3_00_20010601:1.2
	latest_sce_2_31_20010308:1.2.0.4
	sce_2_31_20010308:1.2
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.24
date	2011.09.28.23.50.50;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.09.24.00.29.05;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.08.30.20.18.30;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.07.01.14.57.33;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2006.06.08.14.45.50;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2006.05.02.17.34.18;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.21.22.05.39;	author dpc;	state Exp;
branches;
next	1.17;

1.17
date	2005.07.07.18.18.11;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2005.07.07.16.00.59;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2004.05.05.15.43.59;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2004.04.13.18.59.01;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.12.20.59.07;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.01.21.05.06;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.07.11.15.01.45;	author dpc;	state Exp;
branches;
next	1.10;

1.10
date	2003.07.09.19.57.43;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.04.29.14.27.51;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.28.17.46.32;	author dpc;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.23.20.47.22;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.23.19.13.25;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.02.22.19.00;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.08.19.48.32;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.18.14.02.50;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.57.29;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.35;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.35;	author wit;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Revised the source code proprietary statement.
@
text
@%{
//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

/*------------------------------------------------------------------------------
 *
 *     Source file:    witLexer.l
 *
 *     Lexer for WIT 4.0 Input Data File Format
 *
 *     To create an executable lexer file:
 *
 *             lex witLexer.l                (creates lex.yy.c)
 *             mv -f lex.yy.c witLexer.C
 *             mv y.tab.h ytab.h
 *             xlC witLexer.C -o filename -ll  
 *
 *     Notes:  ytab.h is the token name definition file created by yacc.
 *             -ll causes the lex library to be included.
 *
 *------------------------------------------------------------------------------
 */

#define  LINESIZE 128

//#if defined (__GNUC__)
#define YY_SKIP_YYWRAP
//#endif
#define YY_NEVER_INTERACTIVE 1

#include <ytab.h>                     /* token name definition file */
#include <Parlex.h>
#include <SymTable.h>
#include <VecBS.h>
#include <Entity.h>
#include <Parser.h>
#include <iostream>
#include <ApiMgr.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------
// The following code permits input lines of length <= 1000.
//------------------------------------------------------------------------------

#undef  YYLMAX
#define YYLMAX 1002

//------------------------------------------------------------------------------

int    newstr = 1;                     /* new-string state       */
int    extraquote = 0;                 
char   *strbuf;                        /* current-string buffer  */         
int    bufsize = 0;                    /* allocated size of string buffer */

char   *yytext_;                       /* local copy of yytext   */
int    yyleng_;                        /* local copy of yyleng   */

static void  yyerror(const char *);
char*  stradd(const char *s);          /* adds a string to the str buffer */


/* yywrap() is redefined as a macro in order to compile on the sun4 platform */
/* note: yywrap is defined using the -D option in appl.mk                    */
/* #define  yywrap() 1 */
#undef yywrap

int yywrap()
{
  WitParseRC retcode;

  retcode = WitParlex::restoreFile();
  if (retcode == 1) return 1;

//printf("Lexer is now reading from file %s\n", WitParlex::fileName());

  WitParser::instance ()->setDataFileName   ();
  WitParser::instance ()->setDataFileLineNo ();

  return 0;
}

%}

%array

%%

release           { return RELEASE; }
add               { return ADD; }
set               { return SET; }
read              { return READ; }
problem           { yylval.strval =
                       strdup(reinterpret_cast <const char *> (&yytext[0]));
                    return PROBLEM; }
part              { yylval.strval =
                       strdup(reinterpret_cast <const char *> (&yytext[0])); 
                    return PART; }
operation         { yylval.strval =
                       strdup(reinterpret_cast <const char *> (&yytext[0]));
                    return OPERATION; }
bomEntry          { yylval.strval =
                       strdup(reinterpret_cast <const char *> (&yytext[0])); 
                    return BOM_ENTRY; }
subEntry          { yylval.strval =
                       strdup(reinterpret_cast <const char *> (&yytext[0])); 
                    return SUB_ENTRY; }
bopEntry          { yylval.strval =
                       strdup(reinterpret_cast <const char *> (&yytext[0])); 
                    return BOP_ENTRY; }
demand            { yylval.strval =
                       strdup(reinterpret_cast <const char *> (&yytext[0])); 
                    return DEMAND; }
partWithOperation { yylval.strval =
                       strdup(reinterpret_cast <const char *> (&yytext[0]));
                    return PART_WITH_OPERATION; }      
single            { return SINGLE; }
sparse            { return SPARSE; }
dense             { return DENSE; }
execBounds        { yylval.strval =
                       strdup(reinterpret_cast <const char *> (&yytext[0]));
                    return EXEC_BOUNDS; }
stockBounds       { yylval.strval =
                       strdup(reinterpret_cast <const char *> (&yytext[0]));
                    return STOCK_BOUNDS; }
cumShipBounds     { yylval.strval =
                       strdup(reinterpret_cast <const char *> (&yytext[0]));
                    return CUM_SHIP_BOUNDS; }
endBounds         { return END_BOUNDS; }
hardLB            { return HARDLB; }
softLB            { return SOFTLB; }
hardUB            { return HARDUB; }
capacity          { yylval.cval = static_cast <int> (WitDRPartCat::capacity);
                    return CATEGORY; }
material          { yylval.cval = static_cast <int> (WitDRPartCat::material);
                    return CATEGORY; }

[();:]            { return yytext[0]; }

-?[0-9]+          { yylval.intval =
                       atoi(reinterpret_cast <const char *> (&yytext[0])); 
                    return INTEGER; }

-?[0-9]*"."[0-9]+([eE][-+]?[0-9]+)? |
-?[0-9]+"."([eE][-+]?[0-9]+)? |
-?[0-9]+[eE][-+]?[0-9]+ {
                    yylval.doubleval =
                       atof(reinterpret_cast <const char *> (&yytext[0]));
                    return DOUBLE; }

true              { yylval.boolval = true;
                    return BOOLEAN; }

false             { yylval.boolval = false;
                    return BOOLEAN; }

\"[^\"\n\\]*[\"\\] { yytext_ = static_cast <char *> (yytext);
                    yyleng_ = yyleng;
                    if (newstr) {
                      strbuf = static_cast <char *> (malloc(LINESIZE + 1));
                      bufsize = LINESIZE + 1;
                      strbuf[0] = '\0';
                      newstr = 0;
                    };
            
                    char c1 = yytext[yyleng-1];  /* last character read */
//#if defined (__GNUC__)
                    char c2 = yyinput();           /*(for GNU) peek at next char */  
//#else
//                    char c2 = input();           /* peek at next char   */  
//#endif
                    unput(c2); 

                    if (extraquote) {
                      yytext_++;                 /* get rid of extra quote */
                      yyleng_--;
                      extraquote = 0;
                    };
  
                    if (c1 == '\\') {
                      if (c2 == '\"') {
                        stradd(yytext_);         /* get rid of extra \ */
                        strbuf[strlen(strbuf)-1] = '\0';
                      }  
                      else
                      if (c2 == '\\') {
                        stradd(yytext_);
//#if defined (__GNUC__)
                        yyinput();           /* (for GNU) get rid of extra \  */  
//#else
//                        input();             /* get rid of extra \  */  
//#endif
                        unput('\"');             /* and fake a "       */
                        extraquote = 1;          /* then continue scan */
                      }
                      else
                         {
                         char msgString[2] = " ";

                         msgString[0] = c2;

                         WitParser::instance ()->myMsgFac () (
                            "invalidStringSmsg",
                            msgString);

                         WitParser::instance ()->myMsgFac () (
                            "lineNumberMsg",
                            yytext, 
                            WitParlex::lineno(), 
                            WitParlex::fileName());

                         WitParser::instance ()->myMsgFac () (
                            "parsingStopsMsg");
                         }
                    }  
                     
                    else 
                    {
                      yylval.strval = stradd(yytext_);
                      bufsize = 0;
                      newstr = 1;                /* return string and     */
                      return STRING;             /* get ready for another */
                    }
                  }

\"[^\"\n\\]*$     { yytext_ = static_cast <char *> (yytext);
                    yyleng_ = yyleng; 
                    if (newstr) {
                      strbuf = static_cast <char *> (malloc(LINESIZE + 1));
                      bufsize = LINESIZE + 1;
                      strbuf[0] = '\0';
                      newstr = 0;
                    };

                    if (extraquote) {
                      yytext_++;                 /* get rid of extra quote */
                      yyleng_--;
                      extraquote = 0;
                    };

                    WitParser::instance ()->myMsgFac () (
                       "unterminatedStringMsg");
                    stradd(yytext_);
                    WitParser::instance ()->myMsgFac () ("lineNumberMsg",
                      strbuf, WitParlex::lineno(), WitParlex::fileName());
                    stradd("\"");
                    yylval.strval = strbuf;
                    bufsize = 0;
                    newstr = 1;
                    return STRING; 
                  } 

[A-Za-z][A-Za-z0-9_]* {
                    yylval.strval =
                       strdup(reinterpret_cast <const char *> (&yytext[0]));
                    return IDENTIFIER; }

\n                { WitParlex::setLineno(WitParlex::lineno()+1);
                    WitParser::instance ()->setDataFileLineNo ();
                             /* set lineno for API functions */
                  }

[ \t\r]+          ;                      /* white space */

"//".*            ;                      /* comments */

.                 { WitParser::instance ()->myMsgFac () ("invalidCharacterMsg");
                    WitParser::instance ()->myMsgFac () ("lineNumberMsg",
                      yytext, WitParlex::lineno(), WitParlex::fileName());
                  }                      /* anything else */

%%

void yyerror(const char *s)
{
  printf("%s (%c) at line number %-d in file \n%s\n",
    s, yytext[0], WitParlex::lineno(), WitParlex::fileName());
}

char * stradd (const char * s)	
{
  char  *newbuf;
 
  // reallocate the string buffer if necessary
  if (strlen(strbuf) + strlen(s) + 1 > bufsize) {
    newbuf = static_cast <char *> (malloc(strlen(strbuf) + strlen(s) + 1));
    strcpy(newbuf, strbuf);
    strcat(newbuf, s);
    bufsize = strlen(newbuf) + 1;
    free (strbuf);
    strbuf = newbuf;
  }
  else
    strcat(strbuf, s);
  return (strbuf);
}
@


1.23
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d2 14
a17 9
 *     (c) Copyright IBM Corp. 2006.
 *     (Unpublished)
 *     OCO Source Modules
 *     IBM Confidential
 *
 *------------------------------------------------------------------------------

 *------------------------------------------------------------------------------
 *
@


1.22
log
@Revised the copyright date.
@
text
@d3 26
a28 26
*
*     (c) Copyright IBM Corp. 2011.
*     (Unpublished)
*     OCO Source Modules
*     IBM Confidential
*
*------------------------------------------------------------------------------

*------------------------------------------------------------------------------
*
*     Source file:    witLexer.l
*
*     Lexer for WIT 4.0 Input Data File Format
*
*     To create an executable lexer file:
*
*             lex witLexer.l                (creates lex.yy.c)
*             mv -f lex.yy.c witLexer.C
*             mv y.tab.h ytab.h
*             xlC witLexer.C -o filename -ll
*
*     Notes:  ytab.h is the token name definition file created by yacc.
*             -ll causes the lex library to be included.
*
*------------------------------------------------------------------------------
*/
d57 2
a58 2
int    extraquote = 0;
char   *strbuf;                        /* current-string buffer  */
d75 1
a75 1
WitParseRC retcode;
d77 2
a78 2
retcode = WitParlex::restoreFile();
if (retcode == 1) return 1;
d82 2
a83 2
WitParser::instance ()->setDataFileName   ();
WitParser::instance ()->setDataFileLineNo ();
d85 1
a85 1
return 0;
d99 2
a100 2
strdup(reinterpret_cast <const char *> (&yytext[0]));
return PROBLEM; }
d102 2
a103 2
strdup(reinterpret_cast <const char *> (&yytext[0]));
return PART; }
d105 2
a106 2
strdup(reinterpret_cast <const char *> (&yytext[0]));
return OPERATION; }
d108 2
a109 2
strdup(reinterpret_cast <const char *> (&yytext[0]));
return BOM_ENTRY; }
d111 2
a112 2
strdup(reinterpret_cast <const char *> (&yytext[0]));
return SUB_ENTRY; }
d114 2
a115 2
strdup(reinterpret_cast <const char *> (&yytext[0]));
return BOP_ENTRY; }
d117 2
a118 2
strdup(reinterpret_cast <const char *> (&yytext[0]));
return DEMAND; }
d120 2
a121 2
strdup(reinterpret_cast <const char *> (&yytext[0]));
return PART_WITH_OPERATION; }
d126 2
a127 2
strdup(reinterpret_cast <const char *> (&yytext[0]));
return EXEC_BOUNDS; }
d129 2
a130 2
strdup(reinterpret_cast <const char *> (&yytext[0]));
return STOCK_BOUNDS; }
d132 2
a133 2
strdup(reinterpret_cast <const char *> (&yytext[0]));
return CUM_SHIP_BOUNDS; }
d139 1
a139 1
return CATEGORY; }
d141 1
a141 1
return CATEGORY; }
d146 2
a147 2
atoi(reinterpret_cast <const char *> (&yytext[0]));
return INTEGER; }
d152 3
a154 3
yylval.doubleval =
atof(reinterpret_cast <const char *> (&yytext[0]));
return DOUBLE; }
d157 1
a157 1
return BOOLEAN; }
d160 1
a160 1
return BOOLEAN; }
d163 9
a171 9
yyleng_ = yyleng;
if (newstr) {
strbuf = static_cast <char *> (malloc(LINESIZE + 1));
bufsize = LINESIZE + 1;
strbuf[0] = '\0';
newstr = 0;
};

char c1 = yytext[yyleng-1];  /* last character read */
d173 1
a173 1
char c2 = yyinput();           /*(for GNU) peek at next char */
d175 1
a175 1
//                    char c2 = input();           /* peek at next char   */
d177 1
a177 1
unput(c2);
d179 14
a192 14
if (extraquote) {
yytext_++;                 /* get rid of extra quote */
yyleng_--;
extraquote = 0;
};

if (c1 == '\\') {
if (c2 == '\"') {
stradd(yytext_);         /* get rid of extra \ */
strbuf[strlen(strbuf)-1] = '\0';
}
else
if (c2 == '\\') {
stradd(yytext_);
d194 1
a194 1
yyinput();           /* (for GNU) get rid of extra \  */
d196 1
a196 1
//                        input();             /* get rid of extra \  */
d198 32
a229 32
unput('\"');             /* and fake a "       */
extraquote = 1;          /* then continue scan */
}
else
{
char msgString[2] = " ";

msgString[0] = c2;

WitParser::instance ()->myMsgFac () (
"invalidStringSmsg",
msgString);

WitParser::instance ()->myMsgFac () (
"lineNumberMsg",
yytext,
WitParlex::lineno(),
WitParlex::fileName());

WitParser::instance ()->myMsgFac () (
"parsingStopsMsg");
}
}

else
{
yylval.strval = stradd(yytext_);
bufsize = 0;
newstr = 1;                /* return string and     */
return STRING;             /* get ready for another */
}
}
d232 25
a256 25
yyleng_ = yyleng;
if (newstr) {
strbuf = static_cast <char *> (malloc(LINESIZE + 1));
bufsize = LINESIZE + 1;
strbuf[0] = '\0';
newstr = 0;
};

if (extraquote) {
yytext_++;                 /* get rid of extra quote */
yyleng_--;
extraquote = 0;
};

WitParser::instance ()->myMsgFac () (
"unterminatedStringMsg");
stradd(yytext_);
WitParser::instance ()->myMsgFac () ("lineNumberMsg",
strbuf, WitParlex::lineno(), WitParlex::fileName());
stradd("\"");
yylval.strval = strbuf;
bufsize = 0;
newstr = 1;
return STRING;
}
d259 3
a261 3
yylval.strval =
strdup(reinterpret_cast <const char *> (&yytext[0]));
return IDENTIFIER; }
d264 3
a266 3
WitParser::instance ()->setDataFileLineNo ();
/* set lineno for API functions */
}
d273 3
a275 3
WitParser::instance ()->myMsgFac () ("lineNumberMsg",
yytext, WitParlex::lineno(), WitParlex::fileName());
}                      /* anything else */
d281 2
a282 2
printf("%s (%c) at line number %-d in file \n%s\n",
s, yytext[0], WitParlex::lineno(), WitParlex::fileName());
d285 1
a285 1
char * stradd (const char * s)
d287 14
a300 14
char  *newbuf;

// reallocate the string buffer if necessary
if (strlen(strbuf) + strlen(s) + 1 > bufsize) {
newbuf = static_cast <char *> (malloc(strlen(strbuf) + strlen(s) + 1));
strcpy(newbuf, strbuf);
strcat(newbuf, s);
bufsize = strlen(newbuf) + 1;
free (strbuf);
strbuf = newbuf;
}
else
strcat(strbuf, s);
return (strbuf);
@


1.21
log
@Changed the argument to stradd (...) from char * to const char *.
@
text
@d3 26
a28 26
 *
 *     (c) Copyright IBM Corp. 2006.
 *     (Unpublished)
 *     OCO Source Modules
 *     IBM Confidential
 *
 *------------------------------------------------------------------------------

 *------------------------------------------------------------------------------
 *
 *     Source file:    witLexer.l
 *
 *     Lexer for WIT 4.0 Input Data File Format
 *
 *     To create an executable lexer file:
 *
 *             lex witLexer.l                (creates lex.yy.c)
 *             mv -f lex.yy.c witLexer.C
 *             mv y.tab.h ytab.h
 *             xlC witLexer.C -o filename -ll  
 *
 *     Notes:  ytab.h is the token name definition file created by yacc.
 *             -ll causes the lex library to be included.
 *
 *------------------------------------------------------------------------------
 */
d57 2
a58 2
int    extraquote = 0;                 
char   *strbuf;                        /* current-string buffer  */         
d75 1
a75 1
  WitParseRC retcode;
d77 2
a78 2
  retcode = WitParlex::restoreFile();
  if (retcode == 1) return 1;
d82 2
a83 2
  WitParser::instance ()->setDataFileName   ();
  WitParser::instance ()->setDataFileLineNo ();
d85 1
a85 1
  return 0;
d99 2
a100 2
                       strdup(reinterpret_cast <const char *> (&yytext[0]));
                    return PROBLEM; }
d102 2
a103 2
                       strdup(reinterpret_cast <const char *> (&yytext[0])); 
                    return PART; }
d105 2
a106 2
                       strdup(reinterpret_cast <const char *> (&yytext[0]));
                    return OPERATION; }
d108 2
a109 2
                       strdup(reinterpret_cast <const char *> (&yytext[0])); 
                    return BOM_ENTRY; }
d111 2
a112 2
                       strdup(reinterpret_cast <const char *> (&yytext[0])); 
                    return SUB_ENTRY; }
d114 2
a115 2
                       strdup(reinterpret_cast <const char *> (&yytext[0])); 
                    return BOP_ENTRY; }
d117 2
a118 2
                       strdup(reinterpret_cast <const char *> (&yytext[0])); 
                    return DEMAND; }
d120 2
a121 2
                       strdup(reinterpret_cast <const char *> (&yytext[0]));
                    return PART_WITH_OPERATION; }      
d126 2
a127 2
                       strdup(reinterpret_cast <const char *> (&yytext[0]));
                    return EXEC_BOUNDS; }
d129 2
a130 2
                       strdup(reinterpret_cast <const char *> (&yytext[0]));
                    return STOCK_BOUNDS; }
d132 2
a133 2
                       strdup(reinterpret_cast <const char *> (&yytext[0]));
                    return CUM_SHIP_BOUNDS; }
d139 1
a139 1
                    return CATEGORY; }
d141 1
a141 1
                    return CATEGORY; }
d146 2
a147 2
                       atoi(reinterpret_cast <const char *> (&yytext[0])); 
                    return INTEGER; }
d152 3
a154 3
                    yylval.doubleval =
                       atof(reinterpret_cast <const char *> (&yytext[0]));
                    return DOUBLE; }
d157 1
a157 1
                    return BOOLEAN; }
d160 1
a160 1
                    return BOOLEAN; }
d163 9
a171 9
                    yyleng_ = yyleng;
                    if (newstr) {
                      strbuf = static_cast <char *> (malloc(LINESIZE + 1));
                      bufsize = LINESIZE + 1;
                      strbuf[0] = '\0';
                      newstr = 0;
                    };
            
                    char c1 = yytext[yyleng-1];  /* last character read */
d173 1
a173 1
                    char c2 = yyinput();           /*(for GNU) peek at next char */  
d175 1
a175 1
//                    char c2 = input();           /* peek at next char   */  
d177 1
a177 1
                    unput(c2); 
d179 14
a192 14
                    if (extraquote) {
                      yytext_++;                 /* get rid of extra quote */
                      yyleng_--;
                      extraquote = 0;
                    };
  
                    if (c1 == '\\') {
                      if (c2 == '\"') {
                        stradd(yytext_);         /* get rid of extra \ */
                        strbuf[strlen(strbuf)-1] = '\0';
                      }  
                      else
                      if (c2 == '\\') {
                        stradd(yytext_);
d194 1
a194 1
                        yyinput();           /* (for GNU) get rid of extra \  */  
d196 1
a196 1
//                        input();             /* get rid of extra \  */  
d198 32
a229 32
                        unput('\"');             /* and fake a "       */
                        extraquote = 1;          /* then continue scan */
                      }
                      else
                         {
                         char msgString[2] = " ";

                         msgString[0] = c2;

                         WitParser::instance ()->myMsgFac () (
                            "invalidStringSmsg",
                            msgString);

                         WitParser::instance ()->myMsgFac () (
                            "lineNumberMsg",
                            yytext, 
                            WitParlex::lineno(), 
                            WitParlex::fileName());

                         WitParser::instance ()->myMsgFac () (
                            "parsingStopsMsg");
                         }
                    }  
                     
                    else 
                    {
                      yylval.strval = stradd(yytext_);
                      bufsize = 0;
                      newstr = 1;                /* return string and     */
                      return STRING;             /* get ready for another */
                    }
                  }
d232 25
a256 25
                    yyleng_ = yyleng; 
                    if (newstr) {
                      strbuf = static_cast <char *> (malloc(LINESIZE + 1));
                      bufsize = LINESIZE + 1;
                      strbuf[0] = '\0';
                      newstr = 0;
                    };

                    if (extraquote) {
                      yytext_++;                 /* get rid of extra quote */
                      yyleng_--;
                      extraquote = 0;
                    };

                    WitParser::instance ()->myMsgFac () (
                       "unterminatedStringMsg");
                    stradd(yytext_);
                    WitParser::instance ()->myMsgFac () ("lineNumberMsg",
                      strbuf, WitParlex::lineno(), WitParlex::fileName());
                    stradd("\"");
                    yylval.strval = strbuf;
                    bufsize = 0;
                    newstr = 1;
                    return STRING; 
                  } 
d259 3
a261 3
                    yylval.strval =
                       strdup(reinterpret_cast <const char *> (&yytext[0]));
                    return IDENTIFIER; }
d264 3
a266 3
                    WitParser::instance ()->setDataFileLineNo ();
                             /* set lineno for API functions */
                  }
d273 3
a275 3
                    WitParser::instance ()->myMsgFac () ("lineNumberMsg",
                      yytext, WitParlex::lineno(), WitParlex::fileName());
                  }                      /* anything else */
d281 2
a282 2
  printf("%s (%c) at line number %-d in file \n%s\n",
    s, yytext[0], WitParlex::lineno(), WitParlex::fileName());
d285 1
a285 1
char * stradd (const char * s)	
d287 14
a300 14
  char  *newbuf;
 
  // reallocate the string buffer if necessary
  if (strlen(strbuf) + strlen(s) + 1 > bufsize) {
    newbuf = static_cast <char *> (malloc(strlen(strbuf) + strlen(s) + 1));
    strcpy(newbuf, strbuf);
    strcat(newbuf, s);
    bufsize = strlen(newbuf) + 1;
    free (strbuf);
    strbuf = newbuf;
  }
  else
    strcat(strbuf, s);
  return (strbuf);
@


1.20
log
@Changed some #includes.
@
text
@d65 1
a65 1
char*  stradd(char *s);                /* adds a string to the str buffer */
d285 1
a285 1
char*  stradd(char *s)	
@


1.19
log
@Updated the copyright date on all source files.
@
text
@d38 1
a38 1
#include <wit/src/Parlex.h>
@


1.18
log
@Adding witLexer.C, witParse.C and ytab.h to the src code.  Also modified
witLexer.l and witParse.y to remove gnu and win32 dependencies.
@
text
@d4 1
a4 1
 *     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.17
log
@[exceptions]
@
text
@d32 1
a32 1
#if defined (__GNUC__)
d34 2
a35 1
#endif
d172 1
a172 1
#if defined (__GNUC__)
d174 3
a176 3
#else
                    char c2 = input();           /* peek at next char   */  
#endif
d193 1
a193 1
#if defined (__GNUC__)
d195 3
a197 3
#else
                        input();             /* get rid of extra \  */  
#endif
@


1.16
log
@[exceptions]
@
text
@d41 1
a41 1
#include <witParse.h>
@


1.15
log
@Removed portableFree.
@
text
@a37 1
#include <wit/src/witLexer.h>
d76 1
a76 1
  retcode = WitLexer::restoreFile();
a277 10
// Constructor and destructor

WitLexer::WitLexer()
{
}

WitLexer::~WitLexer()
{
}

@


1.14
log
@Double Precision.
@
text
@d305 1
a305 1
    portableFree(strbuf);
@


1.13
log
@Double Precision.
@
text
@d138 1
a138 1
capacity          { yylval.cval = WitDRPartCat::capacity;
d140 1
a140 1
material          { yylval.cval = WitDRPartCat::material;
d152 1
a152 1
                    yylval.floatval =
d154 1
a154 1
                    return FLOAT; }
@


1.12
log
@Continued implementation of PIP.
@
text
@d138 1
a138 1
capacity          { yylval.cval = capacity;
d140 1
a140 1
material          { yylval.cval = material;
@


1.11
log
@Removed reference to lex compatibility flag, which is no longer needed.
@
text
@d305 1
a305 1
    WitUtil::portableFree(strbuf);
@


1.10
log
@Made changes to eliminate some of the compiler warnings on Linux.
@
text
@d90 2
@


1.9
log
@Continued implementation of proportionate routing.
@
text
@d43 1
a43 1
#include <iostream.h>
@


1.8
log
@modified to work with gnu lex
@
text
@d20 1
a20 1
 *             mv -f lex.yy.c lex.yy.C
d22 1
a22 1
 *             xlC lex.yy.C -o filename -ll  
@


1.7
log
@Changed some C style casts to C++ style.
@
text
@d32 4
d170 3
d174 1
d191 5
a195 1
                        input();                 /* get rid of extra \ */
@


1.6
log
@Replaced some C style casts with C++ style casts.
@
text
@d156 1
a156 1
\"[^\"\n\\]*[\"\\] { yytext_ = (char*) yytext;
d217 1
a217 1
\"[^\"\n\\]*$     { yytext_ = (char*) yytext;
@


1.5
log
@Internal changes.
@
text
@d92 2
a93 1
problem           { yylval.strval = strdup((const char *) &yytext[0]);
d95 2
a96 1
part              { yylval.strval = strdup((const char *) &yytext[0]); 
d98 2
a99 1
operation         { yylval.strval = strdup((const char *) &yytext[0]);
d101 2
a102 1
bomEntry          { yylval.strval = strdup((const char *) &yytext[0]); 
d104 2
a105 1
subEntry          { yylval.strval = strdup((const char *) &yytext[0]); 
d107 2
a108 1
bopEntry          { yylval.strval = strdup((const char *) &yytext[0]); 
d110 2
a111 1
demand            { yylval.strval = strdup((const char *) &yytext[0]); 
d113 2
a114 1
partWithOperation { yylval.strval = strdup((const char *) &yytext[0]);
d119 2
a120 1
execBounds        { yylval.strval = strdup((const char *) &yytext[0]);
d122 2
a123 1
stockBounds       { yylval.strval = strdup((const char *) &yytext[0]);
d125 2
a126 1
cumShipBounds     { yylval.strval = strdup((const char *) &yytext[0]);
d139 2
a140 1
-?[0-9]+          { yylval.intval = atoi((const char *) &yytext[0]); 
d146 2
a147 1
                    yylval.floatval = atof((const char *) &yytext[0]);
d159 1
a159 1
                      strbuf = (char *) malloc(LINESIZE + 1);
d182 1
a182 1
                        stradd((char *) yytext_);
d210 1
a210 1
                      yylval.strval = stradd((char *) yytext_);
d220 1
a220 1
                      strbuf = (char *) malloc(LINESIZE + 1);
d245 2
a246 1
                    yylval.strval = strdup((const char *) &yytext[0]);
d287 1
a287 1
    newbuf = (char *) malloc(strlen(strbuf) + strlen(s) + 1);
@


1.4
log
@Fixed a bug in the DataReader Subsystem's use of MCL.
@
text
@d137 1
a137 1
true              { yylval.boolval = witTRUE;
d140 1
a140 1
false             { yylval.boolval = witFALSE;
@


1.3
log
@Began implementation of object iteration.
@
text
@d174 19
a192 7
                      else {
                        WitParser::instance ()->myMsgFac () ("invalidStringMsg",
                           c2);
                        WitParser::instance ()->myMsgFac () ("lineNumberMsg",
                          yytext, WitParlex::lineno(), WitParlex::fileName());
                        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
                      }
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d41 1
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
 *     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
