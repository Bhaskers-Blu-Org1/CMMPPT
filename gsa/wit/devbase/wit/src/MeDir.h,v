head	1.19;
access;
symbols
	sce_5_01_20080919:1.16
	latest_sce_4_20_20060523:1.16.0.2
	sce_4_20_20060523:1.16
	latest_sce4_20_OSL:1.15.0.2
	sce_4_20_OSL:1.15
	sce_410_withVa:1.15
	sce_4_05_20040511:1.12
	sce_4_00_20040201:1.12
	nextGenBranch:1.12.0.8
	nextGenRoot:1.12
	sce_3_30_20030627:1.12
	EndRw-branch:1.12.0.6
	Root-of-EndRw:1.12
	rwToStl:1.12.0.4
	latest_sce_3_10_20010924:1.12.0.2
	sce_3_10_20010924:1.12
	latest_sce_3_00_20010601:1.7.0.2
	sce_3_00_20010601:1.7
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5
	latest_sce_2_31_20001003:1.4.0.2
	sce_2_31_20001003:1.4
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2011.09.28.23.49.30;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.09.24.00.27.52;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.08.30.20.17.37;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.02.17.34.02;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2004.12.21.22.13.48;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2004.12.15.16.39.25;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.12.13.18.58.22;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.30.20.29.23;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.21.17.31.44;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.13.20.30.23;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.13.15.02.50;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.01.19.23.33;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.10.22.31.12;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.08.21.35.43;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.22.23.11.42;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.14.20.27.30;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.23;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.08;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.24;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.24;	author wit;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef MeDirH
#define MeDirH

//------------------------------------------------------------------------------
// Header file: "MeDir.h"
//
// Contains the declaration of the following classes:
//
//    MeDir.
//    NstnMeDir.
//    AsapMeDir.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class MeDir
//
// "Multi-Exec Direction"
// Responsible for the behavior that distinguishes between NSTN Multi-Exec and
// ASAP Multi-Exec.
//
// Class Hierarchy:
//
// MeDir
//    NstnMeDir
//    AsapMeDir
//
// Implemented in MultiEx.C.
//------------------------------------------------------------------------------

class WitMeDir: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMeDir ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual WitMeDir * oppMeDir () = 0;
         //
         // Returns the MeDir owned by myMeMgr_ that represents the multi-exec
         // direction opposite from this MeDir.

      virtual WitMePt * myMePt (WitMeSitePt * theMeSitePt) = 0;
         //
         // Returns the MePt owned by theMeSitePt and associated with this
         // MeDir.

      virtual WitPeriod initSelExecPer (WitMeSitePt * theMeSitePt) = 0;
         //
         // Returns the initial execution period to be selected for theMeSitePt
         // in the direction modeled by this MeDir.

      virtual WitPeriod nextExecPer (
            WitPeriod     execPer,
            WitMeSitePt * theMeSitePt) = 0;
         //
         // Returns the next execution period for theMeSitePt after execPer,
         // if any; otherwise -1.

      virtual const char * myID () = 0;
         //
         // Returns a string identifying this MeDir.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitMeMgr *, myMeMgr)

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMeDir (WitMeMgr *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMeDir);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMeMgr * const myMeMgr_;
         //
         // The MeMgr that owns this MrDir.
   };

//------------------------------------------------------------------------------
// Class NstnMeDir
//
// "NSTN Multi-Exec Direction"
// Responsible for the behavior of NSTN Multi-Exec that distinguishes it from
// ASAP Multi-Exec.
//
// Class Hierarchy:
//
// MeDir
//    NstnMeDir
//
// Implemented in MultiEx.C.
//------------------------------------------------------------------------------

class WitNstnMeDir: public WitMeDir
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitNstnMeDir (WitMeMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitNstnMeDir ();

      //------------------------------------------------------------------------
      // Overrides from class MeDir.
      //------------------------------------------------------------------------

      virtual WitMeDir *   oppMeDir       ();
      virtual WitMePt *    myMePt         (WitMeSitePt *);
      virtual WitPeriod    initSelExecPer (WitMeSitePt *);
      virtual WitPeriod    nextExecPer    (WitPeriod, WitMeSitePt *);
      virtual const char * myID           ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitNstnMeDir);
   };

//------------------------------------------------------------------------------
// Class AsapMeDir
//
// "ASAP Multi-Exec Direction"
// Responsible for the behavior of ASAP Multi-Exec that distinguishes it from
// NSTN Multi-Exec.
//
// Class Hierarchy:
//
// MeDir
//    AsapMeDir
//
// Implemented in MultiEx.C.
//------------------------------------------------------------------------------

class WitAsapMeDir: public WitMeDir
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAsapMeDir (WitMeMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitAsapMeDir ();

      //------------------------------------------------------------------------
      // Overrides from class MeDir.
      //------------------------------------------------------------------------

      virtual WitMeDir *   oppMeDir       ();
      virtual WitMePt *    myMePt         (WitMeSitePt *);
      virtual WitPeriod    initSelExecPer (WitMeSitePt *);
      virtual WitPeriod    nextExecPer    (WitPeriod, WitMeSitePt *);
      virtual const char * myID           ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitAsapMeDir);
   };

#endif
@


1.18
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.17
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d42 2
a43 2
{
public:
d45 3
a47 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d49 1
a49 1
virtual ~WitMeDir ();
d51 3
a53 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d55 4
a58 4
virtual WitMeDir * oppMeDir () = 0;
//
// Returns the MeDir owned by myMeMgr_ that represents the multi-exec
// direction opposite from this MeDir.
d60 4
a63 4
virtual WitMePt * myMePt (WitMeSitePt * theMeSitePt) = 0;
//
// Returns the MePt owned by theMeSitePt and associated with this
// MeDir.
d65 4
a68 4
virtual WitPeriod initSelExecPer (WitMeSitePt * theMeSitePt) = 0;
//
// Returns the initial execution period to be selected for theMeSitePt
// in the direction modeled by this MeDir.
d70 6
a75 6
virtual WitPeriod nextExecPer (
WitPeriod     execPer,
WitMeSitePt * theMeSitePt) = 0;
//
// Returns the next execution period for theMeSitePt after execPer,
// if any; otherwise -1.
d77 3
a79 3
virtual const char * myID () = 0;
//
// Returns a string identifying this MeDir.
d81 3
a83 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d85 1
a85 1
accessFunc (WitMeMgr *, myMeMgr)
d87 1
a87 1
protected:
d89 3
a91 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d93 1
a93 1
WitMeDir (WitMeMgr *);
d95 1
a95 1
private:
d97 3
a99 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d101 1
a101 1
noCopyCtorAssign (WitMeDir);
d103 3
a105 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d107 4
a110 4
WitMeMgr * const myMeMgr_;
//
// The MeMgr that owns this MrDir.
};
d128 2
a129 2
{
public:
d131 3
a133 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d135 1
a135 1
WitNstnMeDir (WitMeMgr *);
d137 3
a139 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d141 1
a141 1
~WitNstnMeDir ();
d143 3
a145 3
//------------------------------------------------------------------------
// Overrides from class MeDir.
//------------------------------------------------------------------------
d147 5
a151 5
virtual WitMeDir *   oppMeDir       ();
virtual WitMePt *    myMePt         (WitMeSitePt *);
virtual WitPeriod    initSelExecPer (WitMeSitePt *);
virtual WitPeriod    nextExecPer    (WitPeriod, WitMeSitePt *);
virtual const char * myID           ();
d153 1
a153 1
private:
d155 3
a157 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d159 2
a160 2
noCopyCtorAssign (WitNstnMeDir);
};
d178 2
a179 2
{
public:
d181 3
a183 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d185 1
a185 1
WitAsapMeDir (WitMeMgr *);
d187 3
a189 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d191 1
a191 1
~WitAsapMeDir ();
d193 3
a195 3
//------------------------------------------------------------------------
// Overrides from class MeDir.
//------------------------------------------------------------------------
d197 5
a201 5
virtual WitMeDir *   oppMeDir       ();
virtual WitMePt *    myMePt         (WitMeSitePt *);
virtual WitPeriod    initSelExecPer (WitMeSitePt *);
virtual WitPeriod    nextExecPer    (WitPeriod, WitMeSitePt *);
virtual const char * myID           ();
d203 1
a203 1
private:
d205 3
a207 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d209 2
a210 2
noCopyCtorAssign (WitAsapMeDir);
};
@


1.16
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d42 2
a43 2
   {
   public:
d45 3
a47 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d49 1
a49 1
      virtual ~WitMeDir ();
d51 3
a53 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d55 4
a58 4
      virtual WitMeDir * oppMeDir () = 0;
         //
         // Returns the MeDir owned by myMeMgr_ that represents the multi-exec
         // direction opposite from this MeDir.
d60 4
a63 4
      virtual WitMePt * myMePt (WitMeSitePt * theMeSitePt) = 0;
         //
         // Returns the MePt owned by theMeSitePt and associated with this
         // MeDir.
d65 4
a68 4
      virtual WitPeriod initSelExecPer (WitMeSitePt * theMeSitePt) = 0;
         //
         // Returns the initial execution period to be selected for theMeSitePt
         // in the direction modeled by this MeDir.
d70 6
a75 6
      virtual WitPeriod nextExecPer (
            WitPeriod     execPer,
            WitMeSitePt * theMeSitePt) = 0;
         //
         // Returns the next execution period for theMeSitePt after execPer,
         // if any; otherwise -1.
d77 3
a79 3
      virtual const char * myID () = 0;
         //
         // Returns a string identifying this MeDir.
d81 3
a83 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d85 1
a85 1
      accessFunc (WitMeMgr *, myMeMgr)
d87 1
a87 1
   protected:
d89 3
a91 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d93 1
a93 1
      WitMeDir (WitMeMgr *);
d95 1
a95 1
   private:
d97 3
a99 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d101 1
a101 1
      noCopyCtorAssign (WitMeDir);
d103 3
a105 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d107 4
a110 4
      WitMeMgr * const myMeMgr_;
         //
         // The MeMgr that owns this MrDir.
   };
d128 2
a129 2
   {
   public:
d131 3
a133 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d135 1
a135 1
      WitNstnMeDir (WitMeMgr *);
d137 3
a139 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d141 1
a141 1
      ~WitNstnMeDir ();
d143 3
a145 3
      //------------------------------------------------------------------------
      // Overrides from class MeDir.
      //------------------------------------------------------------------------
d147 5
a151 5
      virtual WitMeDir *   oppMeDir       ();
      virtual WitMePt *    myMePt         (WitMeSitePt *);
      virtual WitPeriod    initSelExecPer (WitMeSitePt *);
      virtual WitPeriod    nextExecPer    (WitPeriod, WitMeSitePt *);
      virtual const char * myID           ();
d153 1
a153 1
   private:
d155 3
a157 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d159 2
a160 2
      noCopyCtorAssign (WitNstnMeDir);
   };
d178 2
a179 2
   {
   public:
d181 3
a183 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d185 1
a185 1
      WitAsapMeDir (WitMeMgr *);
d187 3
a189 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d191 1
a191 1
      ~WitAsapMeDir ();
d193 3
a195 3
      //------------------------------------------------------------------------
      // Overrides from class MeDir.
      //------------------------------------------------------------------------
d197 5
a201 5
      virtual WitMeDir *   oppMeDir       ();
      virtual WitMePt *    myMePt         (WitMeSitePt *);
      virtual WitPeriod    initSelExecPer (WitMeSitePt *);
      virtual WitPeriod    nextExecPer    (WitPeriod, WitMeSitePt *);
      virtual const char * myID           ();
d203 1
a203 1
   private:
d205 3
a207 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d209 2
a210 2
      noCopyCtorAssign (WitAsapMeDir);
   };
@


1.15
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.14
log
@Low-Pri Prop-Rt.
@
text
@d72 1
a72 2
            WitMeSitePt * theMeSitePt)
            = 0;
@


1.13
log
@
Low-Pri Prop-Rt.
@
text
@d60 1
a60 1
      virtual WitMePt * myMePt (WitMeCoordPt * theMeCoordPt) = 0;
d62 1
a62 1
         // Returns the MePt owned by theMeCoordPt and associated with this
d65 1
a65 1
      virtual WitPeriod initSelExecPer (WitMeCoordPt * theMeCoordPt) = 0;
d67 1
a67 1
         // Returns the initial execution period to be selected for theMeCoordPt
d71 2
a72 2
            WitPeriod      execPer,
            WitMeCoordPt * theMeCoordPt)
d75 1
a75 1
         // Returns the next execution period for theMeCoordPt after execPer,
d149 3
a151 3
      virtual WitMePt *    myMePt         (WitMeCoordPt *);
      virtual WitPeriod    initSelExecPer (WitMeCoordPt *);
      virtual WitPeriod    nextExecPer    (WitPeriod, WitMeCoordPt *);
d199 3
a201 3
      virtual WitMePt *    myMePt         (WitMeCoordPt *);
      virtual WitPeriod    initSelExecPer (WitMeCoordPt *);
      virtual WitPeriod    nextExecPer    (WitPeriod, WitMeCoordPt *);
@


1.12
log
@Refactoring for constrained stock reallocation.
@
text
@d65 1
a65 1
      virtual WitMeCand * initSelMeCand (WitMeCoordPt * theMeCoordPt) = 0;
d67 2
a68 2
         // Returns the initial MeCand to be selected for theMeCoordPt in the
         // direction modeled by this MeDir.
d70 2
a71 2
      virtual WitMeCand * nextMeCand (
            WitMeCand *    theMeCand,
d75 2
a76 2
         // Returns the next MeCand for theMeCoordPt after theMeCand, if any,
         // else NULL;
d148 5
a152 5
      virtual WitMeDir *   oppMeDir      ();
      virtual WitMePt *    myMePt        (WitMeCoordPt *);
      virtual WitMeCand *  initSelMeCand (WitMeCoordPt *);
      virtual WitMeCand *  nextMeCand    (WitMeCand *,    WitMeCoordPt *);
      virtual const char * myID          ();
d198 5
a202 5
      virtual WitMeDir *   oppMeDir      ();
      virtual WitMePt *    myMePt        (WitMeCoordPt *);
      virtual WitMeCand *  initSelMeCand (WitMeCoordPt *);
      virtual WitMeCand *  nextMeCand    (WitMeCand *,    WitMeCoordPt *);
      virtual const char * myID          ();
@


1.11
log
@Refactoring for constrained stock reallocation.
@
text
@d60 1
a60 1
      virtual WitMeSelPt * myMeSelPt (WitMeCoordPt * theMeCoordPt) = 0;
d62 1
a62 1
         // Returns the MeSelPt owned by theMeCoordPt and associated with this
d149 1
a149 1
      virtual WitMeSelPt * myMeSelPt     (WitMeCoordPt *);
d199 1
a199 1
      virtual WitMeSelPt * myMeSelPt     (WitMeCoordPt *);
@


1.10
log
@Fixed bug in two-way multi-exec:
   NSTN and ASAP multi-exec collisions were not being adequately detected.
@
text
@d65 1
a65 1
      virtual int initSelExecPer (WitMeCoordPt * theMeCoordPt) = 0;
d67 2
a68 2
         // Returns the initial exec period to be selected for theMeCoordPt in
         // the direction modeled by this MeDir.
d70 3
a72 3
      virtual void findNextExecPer (
            WitMeCoordPt * theMeCoordPt, 
            WitPeriod &    execPer)
d75 2
a76 2
         // Sets execPer to its next potential value for theMeCoorPt, if any,
         // else -1.
d148 5
a152 5
      virtual WitMeDir *   oppMeDir        ();
      virtual WitMeSelPt * myMeSelPt       (WitMeCoordPt *);
      virtual int          initSelExecPer  (WitMeCoordPt *);
      virtual void         findNextExecPer (WitMeCoordPt *, WitPeriod &);
      virtual const char * myID            ();
d198 5
a202 5
      virtual WitMeDir *   oppMeDir        ();
      virtual WitMeSelPt * myMeSelPt       (WitMeCoordPt *);
      virtual int          initSelExecPer  (WitMeCoordPt *);
      virtual void         findNextExecPer (WitMeCoordPt *, WitPeriod &);
      virtual const char * myID            ();
@


1.9
log
@Refactoring of Multi-Exec: Removed alt-indices.
@
text
@d23 1
a23 1
#include <Util.h>
d41 1
a41 1
class WitMeDir: public WitUtil
d55 5
d82 6
d94 1
a94 1
      WitMeDir ();
d103 8
d136 1
a136 1
      WitNstnMeDir ();
d148 1
d186 1
a186 1
      WitAsapMeDir ();
d198 1
@


1.8
log
@Continued development of selection splitting for multi=exec.
@
text
@d60 1
a60 1
      virtual int initSelAltIdx (WitMeCoordPt * theMeCoordPt) = 0;
d62 2
a63 2
         // Returns the index in theMeCoordPt of the initial exec period to be
         // selected in the direction modeled by this MeDir.
d65 1
a65 1
      virtual WitBoolean findNextAltIdx (
d67 1
a67 1
            int &          theIdx) 
d70 2
a71 3
         // Sets theIdx to its next value for indexing the exec periods in 
         // theMeCoordPt in the direction modeled by this MeDir.
         // Returns TRUE, iff the resulting index is within range.
d129 4
a132 4
      virtual WitMeSelPt * myMeSelPt      (WitMeCoordPt *);
      virtual int          initSelAltIdx  (WitMeCoordPt *);
      virtual WitBoolean   findNextAltIdx (WitMeCoordPt *, int &);
      virtual const char * myID           ();
d178 4
a181 4
      virtual WitMeSelPt * myMeSelPt      (WitMeCoordPt *);
      virtual int          initSelAltIdx  (WitMeCoordPt *);
      virtual WitBoolean   findNextAltIdx (WitMeCoordPt *, int &);
      virtual const char * myID           ();
@


1.7
log
@Renamed AltPt classes to SelPt classes.
@
text
@a45 8
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMeDir (const char * theName);
         //
         // myName_ <-- theName.

      //------------------------------------------------------------------------
d74 6
d81 1
a81 1
      // Data access functions.
d84 1
a84 1
      accessFunc (const char *, myName)
a92 8

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const char * const myName_;
         //
         // A name for printing this MeDir.
d133 1
d182 1
@


1.6
log
@Removed class MeAltPt.
Changed name of class MeSelPt to MeAltPt.
Implemented de-selection of colliding MeAltPts.
@
text
@d63 1
a63 1
      virtual WitMeAltPt * myMeAltPt (WitMeCoordPt * theMeCoordPt) = 0;
d65 1
a65 1
         // Returns the MeAltPt owned by theMeCoordPt and associated with this
d140 1
a140 1
      virtual WitMeAltPt * myMeAltPt      (WitMeCoordPt *);
d188 1
a188 1
      virtual WitMeAltPt * myMeAltPt      (WitMeCoordPt *);
@


1.5
log
@Refactoring for selection splitting.
@
text
@d63 1
a63 1
      virtual WitMeSelPt * myMeSelPt (WitMeCoordPt * theMeCoordPt) = 0;
d65 1
a65 1
         // Returns the MeSelPt owned by theMeCoordPt and associated with this
d70 1
a70 1
         // Returns the index in theMeCoordPt of the initial MeAltPt to be
d78 1
a78 1
         // Sets theIdx to its next value for indexing the MeAltPts in 
d140 1
a140 1
      virtual WitMeSelPt * myMeSelPt      (WitMeCoordPt *);
d188 1
a188 1
      virtual WitMeSelPt * myMeSelPt      (WitMeCoordPt *);
@


1.4
log
@Outer API: Merged all no-longer-documented functions into one section.
Outer API: Moved build-ahead by demand functions into the no-longer-documented
   section.
Simplified the rules for two-way multiple execution periods.
@
text
@d94 1
a94 3
      copyCtorAndAssignment (WitMeDir);
         //
         // Prevents unintentional copying and assignment.
d150 1
a150 3
      copyCtorAndAssignment (WitNstnMeDir);
         //
         // Prevents unintentional copying and assignment.
d198 1
a198 3
      copyCtorAndAssignment (WitAsapMeDir);
         //
         // Prevents unintentional copying and assignment.
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d139 1
a139 1
      // Overrides from class MeMeDir.
d189 1
a189 1
      // Overrides from class MeMeDir.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d23 1
a23 1
#include <typedefs.h>
d41 1
a41 1
class WitMeDir
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
