head	1.28;
access;
symbols
	sce_5_01_20080919:1.22
	latest_sce_4_20_20060523:1.22.0.2
	sce_4_20_20060523:1.22
	latest_sce4_20_OSL:1.21.0.2
	sce_4_20_OSL:1.21
	sce_410_withVa:1.21
	sce_4_05_20040511:1.19
	sce_4_00_20040201:1.19
	nextGenBranch:1.18.0.2
	nextGenRoot:1.18
	sce_3_30_20030627:1.18
	EndRw-branch:1.16.0.4
	Root-of-EndRw:1.16
	rwToStl:1.16.0.2
	latest_sce_3_10_20010924:1.13.0.2
	sce_3_10_20010924:1.13
	latest_sce_3_00_20010601:1.12.0.2
	sce_3_00_20010601:1.12
	latest_sce_2_31_20010308:1.9.0.2
	sce_2_31_20010308:1.9
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.28
date	2011.09.28.23.50.03;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.09.24.00.28.27;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.08.30.20.18.04;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2010.06.29.19.56.42;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2010.06.18.20.42.53;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2010.06.18.20.04.12;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2006.05.02.17.34.11;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.12.28.19.21.19;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2004.12.21.22.13.49;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.12.01.21.05.05;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.04.17.23.34.20;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.01.02.22.18.46;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2002.05.24.23.00.06;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.26.15.10.32;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2001.12.01.00.25.40;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.20.20.07.06;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.05.10.22.31.14;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.04.10.21.59.34;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.08.16.37.07;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.09.22.55.48;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2000.12.22.16.18.27;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.05.19.05.31;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.04.22.07.38;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.22.23.11.47;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.21.20.03.27;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.27;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.51;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.29;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.29;	author wit;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ReqPtH
#define ReqPtH

//------------------------------------------------------------------------------
// Header file: "ReqPt.h"
//
// Contains the declaration of class ReqPt.
//------------------------------------------------------------------------------

#include <ObjStack.h>

//------------------------------------------------------------------------------
// Class ReqPt
//
// "Requirement Point"
// Represents a Part and period at which requirements may be placed.
//
// Implemented in Selection.C.
//------------------------------------------------------------------------------

class WitReqPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitReqPt (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitReqPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void set (WitPart *, WitPeriod);
         //
         // Sets myPart_ and myPer_.

      bool hasAlt ();
         //
         // Returns true, iff this ReqPt is associated with one or more
         // potential alterations to the configuration.

      void setSource (WitReqPt * theSource);
         //
         // source_ <-- theSource, if appropriate.

      void putDirectAlt (WitAltPt * theAltPt);
         //
         // Puts theAltPt into the list of direct alterations for this ReqPt,
         // if appropriate.

      void copyStateOf (WitReqPt * theReqPt);
         //
         // Copies the state of theReqPt into this ReqPt.

      void reset ();
         //
         // Puts this ReqPt in its initial state.

      bool getDirectAlt (WitAltPt * & theAltPt);
         //
         // If this ReqPt has any direct alts, one of them is
         // removed, theAltPt is set to it, and true is returned;
         // otherwise false is returned.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitReqPt *, source)
      accessFunc (bool,       hasResAlt)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitReqPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPart * myPart_;
         //
         // The Part represented by this ReqPt.
         // Used only for debugging.

      WitPeriod myPer_;
         //
         // The Period represented by this ReqPt.
         // Used only for debugging.

      WitObjStack <WitAltPt> directAlts_;
         //
         // The AltPts at which the configuration would be altered as a
         // direct result of failure to meet requirements at this ReqPt.

      WitReqPt * source_;
         //
         // One of the of sources of requirements for this ReqPt, or NULL.

      bool hasResAlt_;
         //
         // true, iff this ReqPt has a resolving alteration.
   };

#endif
@


1.27
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.26
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d31 2
a32 44
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitReqPt (WitProblem *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitReqPt ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void set (WitPart *, WitPeriod);
//
// Sets myPart_ and myPer_.

bool hasAlt ();
//
// Returns true, iff this ReqPt is associated with one or more
// potential alterations to the configuration.

void setSource (WitReqPt * theSource);
//
// source_ <-- theSource, if appropriate.

void putDirectAlt (WitAltPt * theAltPt);
//
// Puts theAltPt into the list of direct alterations for this ReqPt,
// if appropriate.

void copyStateOf (WitReqPt * theReqPt);
//
// Copies the state of theReqPt into this ReqPt.

void reset ();
//
// Puts this ReqPt in its initial state.
d34 90
a123 48
bool getDirectAlt (WitAltPt * & theAltPt);
//
// If this ReqPt has any direct alts, one of them is
// removed, theAltPt is set to it, and true is returned;
// otherwise false is returned.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitReqPt *, source)
accessFunc (bool,       hasResAlt)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitReqPt);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitPart * myPart_;
//
// The Part represented by this ReqPt.
// Used only for debugging.

WitPeriod myPer_;
//
// The Period represented by this ReqPt.
// Used only for debugging.

WitObjStack <WitAltPt> directAlts_;
//
// The AltPts at which the configuration would be altered as a
// direct result of failure to meet requirements at this ReqPt.

WitReqPt * source_;
//
// One of the of sources of requirements for this ReqPt, or NULL.

bool hasResAlt_;
//
// true, iff this ReqPt has a resolving alteration.
};
@


1.25
log
@Selection Reuse.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d31 44
a74 2
   {
   public:
d76 48
a123 90
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitReqPt (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitReqPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void set (WitPart *, WitPeriod);
         //
         // Sets myPart_ and myPer_.

      bool hasAlt ();
         //
         // Returns true, iff this ReqPt is associated with one or more
         // potential alterations to the configuration.

      void setSource (WitReqPt * theSource);
         //
         // source_ <-- theSource, if appropriate.

      void putDirectAlt (WitAltPt * theAltPt);
         //
         // Puts theAltPt into the list of direct alterations for this ReqPt,
         // if appropriate.

      void copyStateOf (WitReqPt * theReqPt);
         //
         // Copies the state of theReqPt into this ReqPt.

      void reset ();
         //
         // Puts this ReqPt in its initial state.

      bool getDirectAlt (WitAltPt * & theAltPt);
         //
         // If this ReqPt has any direct alts, one of them is
         // removed, theAltPt is set to it, and true is returned;
         // otherwise false is returned.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitReqPt *, source)
      accessFunc (bool,       hasResAlt)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitReqPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPart * myPart_;
         //
         // The Part represented by this ReqPt.
         // Used only for debugging.

      WitPeriod myPer_;
         //
         // The Period represented by this ReqPt.
         // Used only for debugging.

      WitObjStack <WitAltPt> directAlts_;
         //
         // The AltPts at which the configuration would be altered as a
         // direct result of failure to meet requirements at this ReqPt.

      WitReqPt * source_;
         //
         // One of the of sources of requirements for this ReqPt, or NULL.

      bool hasResAlt_;
         //
         // true, iff this ReqPt has a resolving alteration.
   };
@


1.24
log
@Lead Time Bounds
@
text
@d27 1
a27 1
// Implemented in MultiSel.C.
@


1.23
log
@Lead Time Bounds
@
text
@d59 1
a59 1
      void setSource (WitReqPt * theSource, bool & priorAlt);
@


1.22
log
@Updated the copyright date on all source files.
@
text
@d63 1
a63 1
      void putDirectAlt (WitAltPt * theAltPt, bool & priorAlt);
d66 1
a66 6
         // if appropriate, updating priorAlt as needed.

      void putDirectAltExecBounds (WitAltPt * theAltPt);
         //
         // Puts theAltPt into the list of direct points for this ReqPt,
         // if appropriate, for the execBounds case.
@


1.21
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.20
log
@Low-Pri Prop-Rt.
@
text
@d63 1
a63 1
      void putDirectAlt (WitSelAlt * theSelAlt, bool & priorAlt);
d65 1
a65 1
         // Puts theSelAlt into the list of direct alterations for this ReqPt,
d68 1
a68 1
      void putDirectAltExecBounds (WitSelAlt * theSelAlt);
d70 1
a70 1
         // Puts theSelAlt into the list of direct points for this ReqPt,
d81 1
a81 1
      bool getDirectAlt (WitSelAlt * & theSelAlt);
d84 1
a84 1
         // removed, theSelAlt is set to it, and true is returned;
d116 1
a116 1
      WitObjStack <WitSelAlt> directAlts_;
d118 1
a118 1
         // The SelAlts with which the configuration would be altered as a
@


1.19
log
@Continued implementation of PIP.
@
text
@d63 1
a63 1
      void putDirectPoint (WitSelPt * theSelPt, bool & priorAlt);
d65 1
a65 1
         // Puts theSelPt into the list of direct points for this ReqPt,
d68 1
a68 1
      void putDirectPointExecBounds (WitSelPt * theSelPt);
d70 2
a71 2
         // Puts theSelPt into the list of direct points for this ReqPt,
         // if appropriate, for execBounds case.
d81 1
a81 1
      bool getDirectPoint (WitSelPt * & theSelPt);
d83 2
a84 2
         // If this ReqPt has any direct points, one of them is
         // removed, theSelPt is set to it, and true is returned;
d116 1
a116 1
      WitObjStack <WitSelPt> directPts_;
d118 2
a119 2
         // The SelPts at which the configuration would be altered as a direct
         // result of failure to meet requirements at this ReqPt.
@


1.18
log
@Continued implementation of proportionate routing.
Fixed a bug in selection splitting for selective stock reallocation.
@
text
@d30 1
a30 1
class WitReqPt: public WitUtil
@


1.17
log
@Internal changes.
@
text
@d38 1
a38 3
      WitReqPt (WitProblem * theProblem);
         //
         // directPts_ <<< theProblem.
d50 4
d105 10
@


1.16
log
@Continued implementation of single-source.
@
text
@d52 1
a52 1
      WitBoolean hasAlt ();
d54 1
a54 1
         // Returns TRUE, iff this ReqPt is associated with one or more
d57 1
a57 1
      void setSource (WitReqPt * theSource, WitBoolean & priorAlt);
d61 1
a61 1
      void putDirectPoint (WitSelPt * theSelPt, WitBoolean & priorAlt);
d79 1
a79 1
      WitBoolean getDirectPoint (WitSelPt * & theSelPt);
d82 2
a83 2
         // removed, theSelPt is set to it, and TRUE is returned;
         // otherwise FALSE is returned.
d90 1
a90 1
      accessFunc (WitBoolean, hasResAlt)
d113 1
a113 1
      WitBoolean hasResAlt_;
d115 1
a115 1
         // TRUE, iff this ReqPt has a resolving alteration.
@


1.15
log
@Continued implementation sel-split for pen-exec.
@
text
@d61 1
a61 4
      void putDirectPoint (
            WitSelPt *   theSelPt,
            WitBoolean   resFound,
            WitBoolean & priorAlt);
d66 1
a66 1
      void putDirectPointExecBounds (WitSelPt * theSelPt, WitBoolean resFound);
@


1.14
log
@Changed some comments.
@
text
@d74 4
@


1.13
log
@Converted several generic classes into class templates.
@
text
@d55 1
a55 1
         // potential alterations to the selection scheme.
d105 2
a106 2
         // The SelPts at which the selection scheme would be altered as a
         // direct result of failure to meet requirements at this ReqPt.
@


1.12
log
@Renamed AltPt classes to SelPt classes.
@
text
@d103 1
a103 1
      WitObjStack (WitSelPt) directPts_;
@


1.11
log
@Continuing development of selection splitting.
@
text
@d62 1
a62 1
            WitAltPt *   theAltPt,
d66 1
a66 1
         // Puts theAltPt into the list of direct points for this ReqPt,
d69 1
a69 1
      void putDirectPointExecBounds (WitAltPt * theAltPt, WitBoolean resFound);
d71 1
a71 1
         // Puts theAltPt into the list of direct points for this ReqPt,
d78 1
a78 1
      WitBoolean getDirectPoint (WitAltPt * & theAltPt);
d81 1
a81 1
         // removed, theAltPt is set to it, and TRUE is returned;
d103 1
a103 1
      WitObjStack (WitAltPt) directPts_;
d105 1
a105 1
         // The AltPts at which the selection scheme would be altered as a
@


1.10
log
@Removed the coarse selection splitting code that's not needed for the new
design of selection splitting.
@
text
@d27 1
a27 1
// Implemented in Selector.C.
@


1.9
log
@Fixed a particularly difficult bug in coarse selection splitting.
@
text
@a98 4
      inline WitBoolean selSplit ();
         //
         // See GlobalComp.

@


1.8
log
@Further development of coarse selection splitting.
@
text
@a98 7
      WitBoolean updateOK (WitBoolean resFound, WitBoolean & priorAlt);
         //
         // resFound is TRUE, iff a new resolving alteration has been found.
         // priorAlt is TRUE, iff this ReqPt has a previous alteration.
         // Returns TRUE, iff it's appropriate to add a new alteration to this
         // ReqPt, and if so, prepares to add it and updates priorAlt.

@


1.7
log
@Some minor modifications.
@
text
@d19 1
a19 1
#include <Stack.h>
@


1.6
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@d19 1
a19 1
#include <DynStack.h>
d114 1
a114 1
      WitObjDynStack (WitAltPt) directPts_;
@


1.5
log
@Refactoring for selection splitting.
@
text
@a48 7
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitReqPt *, source)
      accessFunc (WitBoolean, hasResAlt)

      //------------------------------------------------------------------------
d52 1
a52 1
      inline WitBoolean hasAlt ();
d84 7
d106 4
a126 9

//------------------------------------------------------------------------------
// Inlines.
//------------------------------------------------------------------------------

inline WitBoolean WitReqPt::hasAlt ()
   {
   return (source_ != NULL) || (! directPts_.isEmpty ());
   }
@


1.4
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d97 1
a97 3
      copyCtorAndAssignment (WitReqPt);
         //
         // Prevents unintentional copying and assignment.
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d112 1
a112 1
      WitDynStack (WitAltPt) directPts_;
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d30 1
a30 1
class WitReqPt
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
