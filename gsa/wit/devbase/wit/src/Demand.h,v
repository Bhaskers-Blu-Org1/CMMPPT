head	1.111;
access;
symbols
	sce_5_01_20080919:1.96
	latest_sce_4_20_20060523:1.50.0.2
	sce_4_20_20060523:1.50
	latest_sce4_20_OSL:1.49.0.2
	sce_4_20_OSL:1.49
	sce_410_withVa:1.47
	sce_4_05_20040511:1.44
	sce_4_00_20040201:1.32
	nextGenBranch:1.31.0.2
	nextGenRoot:1.31
	sce_3_30_20030627:1.31
	EndRw-branch:1.25.0.4
	Root-of-EndRw:1.25
	rwToStl:1.25.0.2
	latest_sce_3_10_20010924:1.12.0.2
	sce_3_10_20010924:1.12
	latest_sce_3_00_20010601:1.5.0.4
	sce_3_00_20010601:1.5
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.111
date	2011.09.28.23.49.15;	author rjw;	state Exp;
branches;
next	1.110;

1.110
date	2011.09.24.00.27.32;	author rjw;	state Exp;
branches;
next	1.109;

1.109
date	2011.08.30.20.17.25;	author rjw;	state Exp;
branches;
next	1.108;

1.108
date	2010.06.18.18.03.49;	author rjw;	state Exp;
branches;
next	1.107;

1.107
date	2010.06.17.16.17.13;	author rjw;	state Exp;
branches;
next	1.106;

1.106
date	2010.06.16.20.56.28;	author rjw;	state Exp;
branches;
next	1.105;

1.105
date	2010.01.06.20.42.40;	author rjw;	state Exp;
branches;
next	1.104;

1.104
date	2010.01.06.20.10.31;	author rjw;	state Exp;
branches;
next	1.103;

1.103
date	2009.12.30.20.02.27;	author rjw;	state Exp;
branches;
next	1.102;

1.102
date	2009.12.30.19.04.05;	author rjw;	state Exp;
branches;
next	1.101;

1.101
date	2009.12.30.18.46.36;	author rjw;	state Exp;
branches;
next	1.100;

1.100
date	2009.12.25.00.10.47;	author rjw;	state Exp;
branches;
next	1.99;

1.99
date	2009.12.21.20.35.46;	author rjw;	state Exp;
branches;
next	1.98;

1.98
date	2009.11.13.19.01.24;	author rjw;	state Exp;
branches;
next	1.97;

1.97
date	2008.10.31.15.25.15;	author rjw;	state Exp;
branches;
next	1.96;

1.96
date	2008.02.25.22.35.10;	author rjw;	state Exp;
branches;
next	1.95;

1.95
date	2008.02.25.19.37.57;	author rjw;	state Exp;
branches;
next	1.94;

1.94
date	2008.01.07.23.51.49;	author rjw;	state Exp;
branches;
next	1.93;

1.93
date	2007.12.11.22.00.27;	author rjw;	state Exp;
branches;
next	1.92;

1.92
date	2007.11.29.16.24.42;	author rjw;	state Exp;
branches;
next	1.91;

1.91
date	2007.11.28.20.40.32;	author rjw;	state Exp;
branches;
next	1.90;

1.90
date	2007.11.13.20.17.38;	author rjw;	state Exp;
branches;
next	1.89;

1.89
date	2007.11.12.20.27.36;	author rjw;	state Exp;
branches;
next	1.88;

1.88
date	2007.11.08.19.16.39;	author rjw;	state Exp;
branches;
next	1.87;

1.87
date	2007.11.07.21.50.11;	author rjw;	state Exp;
branches;
next	1.86;

1.86
date	2007.10.22.19.58.52;	author rjw;	state Exp;
branches;
next	1.85;

1.85
date	2007.10.18.23.14.44;	author rjw;	state Exp;
branches;
next	1.84;

1.84
date	2007.10.15.21.50.34;	author rjw;	state Exp;
branches;
next	1.83;

1.83
date	2007.10.02.18.32.42;	author rjw;	state Exp;
branches;
next	1.82;

1.82
date	2007.09.28.22.08.25;	author rjw;	state Exp;
branches;
next	1.81;

1.81
date	2007.09.26.22.52.51;	author rjw;	state Exp;
branches;
next	1.80;

1.80
date	2007.09.11.18.55.18;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2007.09.11.18.09.16;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2007.09.10.21.01.34;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2007.06.08.18.26.08;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2007.06.08.18.09.39;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2007.05.25.18.39.10;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2007.05.24.18.52.21;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2007.05.22.15.46.52;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2007.05.14.16.18.38;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2007.05.10.21.58.10;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2007.05.10.21.14.41;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2007.05.10.17.22.14;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2007.05.04.23.27.10;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2007.04.27.21.53.44;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2007.04.18.22.27.01;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2007.04.18.21.18.20;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2007.04.16.20.12.55;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2007.04.03.22.04.03;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2007.03.08.17.02.54;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2007.03.02.22.11.01;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2007.02.28.22.15.47;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2007.02.28.20.04.55;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2007.02.27.19.59.30;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2007.02.08.22.47.33;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2007.01.29.23.12.42;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2007.01.15.22.25.29;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2006.10.12.20.48.10;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2006.09.27.20.10.16;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2006.08.17.22.50.37;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2006.08.16.15.49.17;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2006.05.02.17.33.57;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2005.09.30.22.49.59;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2005.09.30.21.57.54;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2005.09.07.19.29.52;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2005.06.13.16.48.46;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2005.02.24.23.23.55;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2004.04.01.21.05.12;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2004.03.31.22.56.07;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2004.03.24.22.21.29;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2004.03.23.19.14.23;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2004.03.22.16.37.18;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2004.03.12.17.21.54;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2004.03.10.22.53.18;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2004.03.05.00.06.54;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2004.03.03.22.13.05;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2004.02.12.19.13.39;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2004.02.06.23.27.09;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2004.02.06.00.17.32;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2003.11.11.18.29.12;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2003.04.11.19.08.25;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2003.03.19.16.48.15;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2003.02.13.23.06.27;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2003.01.27.23.26.11;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2003.01.16.16.34.30;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2003.01.02.22.18.23;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2002.07.12.20.09.37;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2002.07.11.22.48.26;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2002.06.05.19.31.30;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2002.06.03.22.35.17;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2002.06.03.16.01.47;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2002.05.30.20.08.58;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2002.05.29.21.35.44;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2002.05.29.14.32.39;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2002.05.08.19.21.49;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2002.05.03.23.16.36;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.04.25.19.14.50;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.04.22.14.32.06;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.04.18.14.02.30;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.06.17.31.06;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.03.18.40.40;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.01.14.55.29;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.30.15.12.09;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.28.00.48.32;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.27.21.28.38;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.25.16.08.13;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.22.23.11.38;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.21.20.03.21;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.29.21.22.42;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.35;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.20;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.20;	author wit;	state Exp;
branches;
next	;


desc
@@


1.111
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef DemandH
#define DemandH

//------------------------------------------------------------------------------
// Header file: "Demand.h"
//
// Contains the declaration of class Demand.
//------------------------------------------------------------------------------

#include <DelComp.h>
#include <Str.h>
#include <FlexVec.h>
#include <ObjVec.h>
#include <PtrTVec.h>

//------------------------------------------------------------------------------
// Class Demand.
//
// "Demand Stream".
// Represents a source of demand for a part.
//
// Class Hierarchy:
//
// ProbAssoc
//    Component
//       DelComp
//          Demand
//------------------------------------------------------------------------------

class WitDemand: public WitDelComp
   {
   public:

      //------------------------------------------------------------------------
      // Private constructor functions.
      //------------------------------------------------------------------------

      WitDemand (const char * theName, WitPart * thePart);
         //
         // demandName_   <-- theName
         // demandedPart_ <-- thePart.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitDemand ();

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (double    defDemandVol,       0.0)
      defaultValue (int       defPriority,        0)
      defaultValue (double    defSearchInc,       1.0)
      defaultValue (int       defBuildAheadUB,    0)
      defaultValue (bool      defShipLateAllowed, true)
      defaultValue (bool      defPrefBuildAhead,  false)
      defaultValue (bool      defIntShipVols,     false)
      defaultValue (double    defShipReward,      0.0)
      defaultValue (double    defCumShipReward,   0.0)
      defaultValue (double    defShipVol,         0.0)
      defaultValue (WitPeriod defFocusHorizon,    -1)

      static int defLeadTimeUB (WitProblem * theProblem);
      static int defShipLateUB (WitProblem * theProblem);
         //
         // These default value function are implemented explicitly, because the
         // values depend on theProblem.

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setDemandName      (const char *);
      void setDemandVol       (const WitIVRealArg &);
      void setPriority        (const int *);
      void setSearchInc       (double);
      void setBuildAheadUB    (const int *);
      void setLeadTimeUB      (const int *);
      void setShipLateUB      (const int *);
      void setShipLateAllowed (bool);
      void setPrefBuildAhead  (bool);
      void setIntShipVols     (bool);
      void setShipReward      (const WitIVRealArg &);
      void setCumShipReward   (const WitIVRealArg &);
      void setShipVol         (const WitIVRealArg &);
      void setFocusHorizon    (int);
      void setFssShipVol      (const WitIVRealArg &);

      //------------------------------------------------------------------------
      // store<Activity><Attr> functions.
      // Each of these functions sets the value of indicated attribute to the
      // value of the argument.
      // Each function is only valid when the indicated activity is being
      // performed.
      //------------------------------------------------------------------------

      void storePostCumShipVol (const WitTVec <double> &);
         //
         // Valid only when postprocessing is being performed.

      void storeOptShipVol    (WitPeriod, double);
      void storeOptCumShipVol (WitPeriod, double);
         //
         // Valid only when the optimizing implosion subsystem is uploading the
         // solution.

      void storeStochDemandVol     (const WitDblFlexVec &);
      void storeStochShipReward    (const WitDblFlexVec &);
      void storeStochCumShipReward (const WitDblFlexVec &);
      void storeStochShipVol       (const WitDblFlexVec &);
      void storeStochCumShipVol    (const WitDblFlexVec &);
         //
         // Valid only when the stochastic implosion subsystem is uploading
         // data.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual bool        inserted          ();
      virtual void        writeMultiObjVecs (WitObjective *);
      virtual void        identifyInstance  ();
      virtual void        writeSetClause    ();
      virtual void        copySelfInto      (WitCompMgr *);
      virtual void        recount           ();
      virtual void        clearOptSoln      ();
      virtual void        clearStochSoln    ();
      virtual WitDemand * thisDemand        ();
         //
         // Overrides from class Component.

      virtual WitMsgFrag objTypeMsgFrag ();
      virtual WitAttr    apiObjItrState ();
         //
         // Overrides from class DelComp.

      void copyAttrsFrom (WitDemand * theDemand);
         //
         // Copies the input attributes of theDemand into this Demand.

      static const WitString & demandName (const WitDemand * theDemand);
         //
         // Returns theDemand->demandName ().

      void setUpPegging ();
         //
         // Takes action appropriate for when myGlobalComp ()->perfPegging_
         // has just been set to true.

      void shutDownPegging ();
         //
         // Takes action appropriate for when myGlobalComp ()->perfPegging_
         // has just been set to false.

      void extractPegEls (
            WitPeriod                shipPer,
            WitObjStack <WitPegEl> & thePegElStack);
         //
         // Extracts the PegEls for shipPer owned by this Demand and puts them
         // into thePegElStack, which must be empty.
         // Valid only when heuristic allocation is updating the solution.

      void receivePegEls (
            WitPeriod                shipPer,
            WitObjStack <WitPegEl> & thePegElStack);
         //
         // Moves the PegEls from thePegElStack into the list of PegEls owned by
         // this Demand for shipPer, which must be empty.
         // Valid only when heuristic allocation is updating the solution.

      void getMyFixedPegEls (
            WitPeriod                     shipPer,
            WitObjStack <WitFixedPegEl> & theFixedPegEls);
         //
         // On return, theFixedPegEls is a list of FixedPegEls for shipPer owned
         // by this Demand.

      void clearPegging (WitPeriod shipPer);
         //
         // Clears the pegging for this Demand in shipPer.

      double netRev () const;
         //
         // Returns the net revenue associated with shipping a unit of this
         // Demand.

      virtual void writeSolnData ();
         //
         // Override from class Component.
         // Writes the section of the solution data file for this Demand.

      void display ();
         //
         // Displays the input and preprocessing data for this Demand.

      static void genPriorities (WitProblem * theProblem);
         //
         // Automatically generates priorities from objective data.

      void clearShipVolForHeur ();
         //
         // Clears shipVol_.
         // Valid only when heuristic allocation is updating the solution.

      void incShipVolForHeur (WitPeriod thePer, double incVol);
         //
         // Increments shipVol_[thePer] by incVol.
         // Valid only when heuristic allocation is updating the solution.

      void initFssShipVolForPost ();
         //
         // Sets fssShipVol_ to its initial value.
         // Valid only when postprocessing is being performed.

      void compFssShipVol ();
         //
         // Computes fssShipVol_ in useFocusHorizons mode.

      void writeSoln ();
         //
         // Prints the comprehensive implosion solution for this Demand.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitString &,        demandName)
      accessFunc (WitPart *,                demandedPart)
      accessFunc (const WitDblFlexVec &,    demandVol)
      accessFunc (const WitFlexVec <int> &, priority)
      accessFunc (double,                   searchInc)
      accessFunc (const WitFlexVec <int> &, buildAheadUB)
      accessFunc (const WitFlexVec <int> &, leadTimeUB)
      accessFunc (const WitFlexVec <int> &, shipLateUB)
      accessFunc (bool,                     shipLateAllowed)
      accessFunc (bool,                     prefBuildAhead)
      accessFunc (bool,                     intShipVols)
      accessFunc (WitBoundSet *,            cumShipBounds)
      accessFunc (const WitDblFlexVec &,    shipVol)
      accessFunc (WitPeriod,                focusHorizon)
      accessFunc (const WitDblFlexVec &,    fssShipVol)
      accessFunc (const WitDblFlexVec &,    cumDemandVol)
      accessFunc (const WitDblFlexVec &,    cumShipVol)

      inline const WitDblFlexVec & shipReward () const
         {
         return shipReward_.curDblFlexVec ();
         }

      inline const WitDblFlexVec & cumShipReward () const
         {
         return cumShipReward_.curDblFlexVec ();
         }

      const WitString & demandedPartName ();

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitDemand)

      static int nInstances (WitProblem *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDemand);

      void compCumDemandVol ();
         //
         // Computes cumDemandVol_.

      virtual WitBoundSet * myBoundSet     ();
      virtual void          writeDataID    ();
      virtual void          writeDataAttrs ();
         //
         // Overrides from class Component.

      virtual void findPrereqs (WitDelComp * & prereq1, WitDelComp * & prereq2);
         //
         // Override from class DelComp.

      void buildPegEls ();
         //
         // Builds the PegEls owned by this Demand.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Data set by the constructor.
      //------------------------------------------------------------------------

      int mappingIndex_;
         //
         // Mapping index: see Mapping.h.
         // == # Demands constructed before this Demand.

      WitString demandName_;
         //
         // The name of this Demand.
         // The name must be unique to this demand
         // stream among all the demand streams for the same part, but it need
         // not be unique among demand streams for other parts.

      WitPart * const demandedPart_;
         //
         // The Part demanded by this Demand.

      //------------------------------------------------------------------------
      // Input data.
      //------------------------------------------------------------------------

      WitDblFlexVec demandVol_;
         //
         // Volume demanded in each period.
         // Range: [0.0, +inf).

      WitFlexVec <int> priority_;
         //
         // Used only by the heuristic; High numbers mean low priority.
         // Range: (-inf, +inf).

      double searchInc_;
         //
         // Increment for searches by the heuristic on this Demand.
         // Range: [0.001, +inf).

      WitFlexVec <int> buildAheadUB_;
         //
         // Used only by the heuristic; The heuristic will consider building
         // the part demanded up to buildAheadUB periods earlier than the
         // period in which the demandVol occurs.
         // Range: [0, nPeriods - 1].
         // Note that nPeriods - 1 implies no restriction.

      WitFlexVec <int> leadTimeUB_;
         //
         // Used only by the heuristic.
         // When the heuristic is attempting to increase the shipvol of this
         // demand in period shipPer, no Part with boundedLeadTimes_ == true may
         // be exploded in any period earlier than
         // shipPer - leadTimeUB_[shipPer].
         // Range: [0, nPeriods).

      WitFlexVec <int> shipLateUB_;
         //
         // For demand in period demPer, the heuristic will consider shipping
         // to this demand up to period demPer + shipLateUB[demPer].
         // Range: [0, nPeriods - 1].
         // Note that nPeriods - 1 implies no restriction.

      bool shipLateAllowed_;
         //
         // If false, then late shipments are not allowed for this Demand.

      bool prefBuildAhead_;
         //
         // Used only by the heuristic. 
         // If true, the heuristic will do preferential build-ahead on the 
         // demanded part, i.e., it will try to build the part as early as
         // possible.

      bool intShipVols_;
         //
         // If true, then in optimizing implosion, shipVol_ will be constrained
         // to take on integer values in all periods.

      WitBoundSet * cumShipBounds_;
         //
         // Pointer to bounds on cumulative shipment variables;

      WitObjVec shipReward_;
         //
         // Stores the shipment reward coefficients of the shipment variables
         // for this Demand.
         // Range: (-inf, +inf).

      WitObjVec cumShipReward_;
         //
         // Stores the reward coefficients on the cumulative shipment variables
         // for this Demand.
         // Range: (-inf, +inf).

      WitDblFlexVec shipVol_;
         //
         // shipVol ()[thePer] is the volume shipped to the demand stream in
         // thePer. Normally, this is set by implosion, but it can also be set
         // as input.
         // Range: [0.0, +inf).

      WitPeriod focusHorizon_;
         //
         // The last period in which the unmet demand volume of this
         // Demand will be considered when computing the shortage schedule.
         // Range: [-1, nPeriods).

      WitDblFlexVec fssShipVol_;
         //
         // fssShipVol[thePer] is the desired volume to be shipped to this
         // Demand in thePer for FSS purposes.
         // Range: [0.0, +inf).

      //------------------------------------------------------------------------
      // Data maintained automatically.
      //------------------------------------------------------------------------

      WitDblFlexVec cumDemandVol_;
         //
         // Cumulative volume demanded by each period.

      //------------------------------------------------------------------------
      // Data set by implosion.
      //------------------------------------------------------------------------

      WitDblFlexVec cumShipVol_;
         //
         // cumShipVol_[thePer] is the cumulative volume of the part shipped to
         // this Demand from periods 0 thru thePer.

      //------------------------------------------------------------------------
      // Data set by heuristic allocation.
      //------------------------------------------------------------------------

      WitPtrTVec <WitObjStack <WitPegEl> > myPegElsFor_;
         //
         // myPegElsFor_ (shipPer) is the list of all PegEl instances for
         // shipPer owned by this Demand.
   };

#endif
@


1.110
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.109
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d40 2
a41 261
{
public:

//------------------------------------------------------------------------
// Private constructor functions.
//------------------------------------------------------------------------

WitDemand (const char * theName, WitPart * thePart);
//
// demandName_   <-- theName
// demandedPart_ <-- thePart.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitDemand ();

//------------------------------------------------------------------------
// Default value functions.
//------------------------------------------------------------------------

defaultValue (double    defDemandVol,       0.0)
defaultValue (int       defPriority,        0)
defaultValue (double    defSearchInc,       1.0)
defaultValue (int       defBuildAheadUB,    0)
defaultValue (bool      defShipLateAllowed, true)
defaultValue (bool      defPrefBuildAhead,  false)
defaultValue (bool      defIntShipVols,     false)
defaultValue (double    defShipReward,      0.0)
defaultValue (double    defCumShipReward,   0.0)
defaultValue (double    defShipVol,         0.0)
defaultValue (WitPeriod defFocusHorizon,    -1)

static int defLeadTimeUB (WitProblem * theProblem);
static int defShipLateUB (WitProblem * theProblem);
//
// These default value function are implemented explicitly, because the
// values depend on theProblem.

//------------------------------------------------------------------------
// "Set" functions.
//------------------------------------------------------------------------

void setDemandName      (const char *);
void setDemandVol       (const WitIVRealArg &);
void setPriority        (const int *);
void setSearchInc       (double);
void setBuildAheadUB    (const int *);
void setLeadTimeUB      (const int *);
void setShipLateUB      (const int *);
void setShipLateAllowed (bool);
void setPrefBuildAhead  (bool);
void setIntShipVols     (bool);
void setShipReward      (const WitIVRealArg &);
void setCumShipReward   (const WitIVRealArg &);
void setShipVol         (const WitIVRealArg &);
void setFocusHorizon    (int);
void setFssShipVol      (const WitIVRealArg &);

//------------------------------------------------------------------------
// store<Activity><Attr> functions.
// Each of these functions sets the value of indicated attribute to the
// value of the argument.
// Each function is only valid when the indicated activity is being
// performed.
//------------------------------------------------------------------------

void storePostCumShipVol (const WitTVec <double> &);
//
// Valid only when postprocessing is being performed.

void storeOptShipVol    (WitPeriod, double);
void storeOptCumShipVol (WitPeriod, double);
//
// Valid only when the optimizing implosion subsystem is uploading the
// solution.

void storeStochDemandVol     (const WitDblFlexVec &);
void storeStochShipReward    (const WitDblFlexVec &);
void storeStochCumShipReward (const WitDblFlexVec &);
void storeStochShipVol       (const WitDblFlexVec &);
void storeStochCumShipVol    (const WitDblFlexVec &);
//
// Valid only when the stochastic implosion subsystem is uploading
// data.

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

virtual bool        inserted          ();
virtual void        writeMultiObjVecs (WitObjective *);
virtual void        identifyInstance  ();
virtual void        writeSetClause    ();
virtual void        copySelfInto      (WitCompMgr *);
virtual void        recount           ();
virtual void        clearOptSoln      ();
virtual void        clearStochSoln    ();
virtual WitDemand * thisDemand        ();
//
// Overrides from class Component.

virtual WitMsgFrag objTypeMsgFrag ();
virtual WitAttr    apiObjItrState ();
//
// Overrides from class DelComp.

void copyAttrsFrom (WitDemand * theDemand);
//
// Copies the input attributes of theDemand into this Demand.

static const WitString & demandName (const WitDemand * theDemand);
//
// Returns theDemand->demandName ().

void setUpPegging ();
//
// Takes action appropriate for when myGlobalComp ()->perfPegging_
// has just been set to true.

void shutDownPegging ();
//
// Takes action appropriate for when myGlobalComp ()->perfPegging_
// has just been set to false.

void extractPegEls (
WitPeriod                shipPer,
WitObjStack <WitPegEl> & thePegElStack);
//
// Extracts the PegEls for shipPer owned by this Demand and puts them
// into thePegElStack, which must be empty.
// Valid only when heuristic allocation is updating the solution.

void receivePegEls (
WitPeriod                shipPer,
WitObjStack <WitPegEl> & thePegElStack);
//
// Moves the PegEls from thePegElStack into the list of PegEls owned by
// this Demand for shipPer, which must be empty.
// Valid only when heuristic allocation is updating the solution.

void getMyFixedPegEls (
WitPeriod                     shipPer,
WitObjStack <WitFixedPegEl> & theFixedPegEls);
//
// On return, theFixedPegEls is a list of FixedPegEls for shipPer owned
// by this Demand.

void clearPegging (WitPeriod shipPer);
//
// Clears the pegging for this Demand in shipPer.

double netRev () const;
//
// Returns the net revenue associated with shipping a unit of this
// Demand.

virtual void writeSolnData ();
//
// Override from class Component.
// Writes the section of the solution data file for this Demand.

void display ();
//
// Displays the input and preprocessing data for this Demand.

static void genPriorities (WitProblem * theProblem);
//
// Automatically generates priorities from objective data.

void clearShipVolForHeur ();
//
// Clears shipVol_.
// Valid only when heuristic allocation is updating the solution.

void incShipVolForHeur (WitPeriod thePer, double incVol);
//
// Increments shipVol_[thePer] by incVol.
// Valid only when heuristic allocation is updating the solution.

void initFssShipVolForPost ();
//
// Sets fssShipVol_ to its initial value.
// Valid only when postprocessing is being performed.

void compFssShipVol ();
//
// Computes fssShipVol_ in useFocusHorizons mode.

void writeSoln ();
//
// Prints the comprehensive implosion solution for this Demand.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (const WitString &,        demandName)
accessFunc (WitPart *,                demandedPart)
accessFunc (const WitDblFlexVec &,    demandVol)
accessFunc (const WitFlexVec <int> &, priority)
accessFunc (double,                   searchInc)
accessFunc (const WitFlexVec <int> &, buildAheadUB)
accessFunc (const WitFlexVec <int> &, leadTimeUB)
accessFunc (const WitFlexVec <int> &, shipLateUB)
accessFunc (bool,                     shipLateAllowed)
accessFunc (bool,                     prefBuildAhead)
accessFunc (bool,                     intShipVols)
accessFunc (WitBoundSet *,            cumShipBounds)
accessFunc (const WitDblFlexVec &,    shipVol)
accessFunc (WitPeriod,                focusHorizon)
accessFunc (const WitDblFlexVec &,    fssShipVol)
accessFunc (const WitDblFlexVec &,    cumDemandVol)
accessFunc (const WitDblFlexVec &,    cumShipVol)

inline const WitDblFlexVec & shipReward () const
{
return shipReward_.curDblFlexVec ();
}

inline const WitDblFlexVec & cumShipReward () const
{
return cumShipReward_.curDblFlexVec ();
}

const WitString & demandedPartName ();

//------------------------------------------------------------------------
// Mapping functions
//------------------------------------------------------------------------

decMappingIndex (WitDemand)

static int nInstances (WitProblem *);

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitDemand);

void compCumDemandVol ();
//
// Computes cumDemandVol_.

virtual WitBoundSet * myBoundSet     ();
virtual void          writeDataID    ();
virtual void          writeDataAttrs ();
//
// Overrides from class Component.

virtual void findPrereqs (WitDelComp * & prereq1, WitDelComp * & prereq2);
//
// Override from class DelComp.

void buildPegEls ();
//
// Builds the PegEls owned by this Demand.
d43 403
a445 144
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Data set by the constructor.
//------------------------------------------------------------------------

int mappingIndex_;
//
// Mapping index: see Mapping.h.
// == # Demands constructed before this Demand.

WitString demandName_;
//
// The name of this Demand.
// The name must be unique to this demand
// stream among all the demand streams for the same part, but it need
// not be unique among demand streams for other parts.

WitPart * const demandedPart_;
//
// The Part demanded by this Demand.

//------------------------------------------------------------------------
// Input data.
//------------------------------------------------------------------------

WitDblFlexVec demandVol_;
//
// Volume demanded in each period.
// Range: [0.0, +inf).

WitFlexVec <int> priority_;
//
// Used only by the heuristic; High numbers mean low priority.
// Range: (-inf, +inf).

double searchInc_;
//
// Increment for searches by the heuristic on this Demand.
// Range: [0.001, +inf).

WitFlexVec <int> buildAheadUB_;
//
// Used only by the heuristic; The heuristic will consider building
// the part demanded up to buildAheadUB periods earlier than the
// period in which the demandVol occurs.
// Range: [0, nPeriods - 1].
// Note that nPeriods - 1 implies no restriction.

WitFlexVec <int> leadTimeUB_;
//
// Used only by the heuristic.
// When the heuristic is attempting to increase the shipvol of this
// demand in period shipPer, no Part with boundedLeadTimes_ == true may
// be exploded in any period earlier than
// shipPer - leadTimeUB_[shipPer].
// Range: [0, nPeriods).

WitFlexVec <int> shipLateUB_;
//
// For demand in period demPer, the heuristic will consider shipping
// to this demand up to period demPer + shipLateUB[demPer].
// Range: [0, nPeriods - 1].
// Note that nPeriods - 1 implies no restriction.

bool shipLateAllowed_;
//
// If false, then late shipments are not allowed for this Demand.

bool prefBuildAhead_;
//
// Used only by the heuristic.
// If true, the heuristic will do preferential build-ahead on the
// demanded part, i.e., it will try to build the part as early as
// possible.

bool intShipVols_;
//
// If true, then in optimizing implosion, shipVol_ will be constrained
// to take on integer values in all periods.

WitBoundSet * cumShipBounds_;
//
// Pointer to bounds on cumulative shipment variables;

WitObjVec shipReward_;
//
// Stores the shipment reward coefficients of the shipment variables
// for this Demand.
// Range: (-inf, +inf).

WitObjVec cumShipReward_;
//
// Stores the reward coefficients on the cumulative shipment variables
// for this Demand.
// Range: (-inf, +inf).

WitDblFlexVec shipVol_;
//
// shipVol ()[thePer] is the volume shipped to the demand stream in
// thePer. Normally, this is set by implosion, but it can also be set
// as input.
// Range: [0.0, +inf).

WitPeriod focusHorizon_;
//
// The last period in which the unmet demand volume of this
// Demand will be considered when computing the shortage schedule.
// Range: [-1, nPeriods).

WitDblFlexVec fssShipVol_;
//
// fssShipVol[thePer] is the desired volume to be shipped to this
// Demand in thePer for FSS purposes.
// Range: [0.0, +inf).

//------------------------------------------------------------------------
// Data maintained automatically.
//------------------------------------------------------------------------

WitDblFlexVec cumDemandVol_;
//
// Cumulative volume demanded by each period.

//------------------------------------------------------------------------
// Data set by implosion.
//------------------------------------------------------------------------

WitDblFlexVec cumShipVol_;
//
// cumShipVol_[thePer] is the cumulative volume of the part shipped to
// this Demand from periods 0 thru thePer.

//------------------------------------------------------------------------
// Data set by heuristic allocation.
//------------------------------------------------------------------------

WitPtrTVec <WitObjStack <WitPegEl> > myPegElsFor_;
//
// myPegElsFor_ (shipPer) is the list of all PegEl instances for
// shipPer owned by this Demand.
};
@


1.108
log
@Lead Time Bounds.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d40 261
a300 2
   {
   public:
d302 144
a445 403
      //------------------------------------------------------------------------
      // Private constructor functions.
      //------------------------------------------------------------------------

      WitDemand (const char * theName, WitPart * thePart);
         //
         // demandName_   <-- theName
         // demandedPart_ <-- thePart.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitDemand ();

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (double    defDemandVol,       0.0)
      defaultValue (int       defPriority,        0)
      defaultValue (double    defSearchInc,       1.0)
      defaultValue (int       defBuildAheadUB,    0)
      defaultValue (bool      defShipLateAllowed, true)
      defaultValue (bool      defPrefBuildAhead,  false)
      defaultValue (bool      defIntShipVols,     false)
      defaultValue (double    defShipReward,      0.0)
      defaultValue (double    defCumShipReward,   0.0)
      defaultValue (double    defShipVol,         0.0)
      defaultValue (WitPeriod defFocusHorizon,    -1)

      static int defLeadTimeUB (WitProblem * theProblem);
      static int defShipLateUB (WitProblem * theProblem);
         //
         // These default value function are implemented explicitly, because the
         // values depend on theProblem.

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setDemandName      (const char *);
      void setDemandVol       (const WitIVRealArg &);
      void setPriority        (const int *);
      void setSearchInc       (double);
      void setBuildAheadUB    (const int *);
      void setLeadTimeUB      (const int *);
      void setShipLateUB      (const int *);
      void setShipLateAllowed (bool);
      void setPrefBuildAhead  (bool);
      void setIntShipVols     (bool);
      void setShipReward      (const WitIVRealArg &);
      void setCumShipReward   (const WitIVRealArg &);
      void setShipVol         (const WitIVRealArg &);
      void setFocusHorizon    (int);
      void setFssShipVol      (const WitIVRealArg &);

      //------------------------------------------------------------------------
      // store<Activity><Attr> functions.
      // Each of these functions sets the value of indicated attribute to the
      // value of the argument.
      // Each function is only valid when the indicated activity is being
      // performed.
      //------------------------------------------------------------------------

      void storePostCumShipVol (const WitTVec <double> &);
         //
         // Valid only when postprocessing is being performed.

      void storeOptShipVol    (WitPeriod, double);
      void storeOptCumShipVol (WitPeriod, double);
         //
         // Valid only when the optimizing implosion subsystem is uploading the
         // solution.

      void storeStochDemandVol     (const WitDblFlexVec &);
      void storeStochShipReward    (const WitDblFlexVec &);
      void storeStochCumShipReward (const WitDblFlexVec &);
      void storeStochShipVol       (const WitDblFlexVec &);
      void storeStochCumShipVol    (const WitDblFlexVec &);
         //
         // Valid only when the stochastic implosion subsystem is uploading
         // data.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual bool        inserted          ();
      virtual void        writeMultiObjVecs (WitObjective *);
      virtual void        identifyInstance  ();
      virtual void        writeSetClause    ();
      virtual void        copySelfInto      (WitCompMgr *);
      virtual void        recount           ();
      virtual void        clearOptSoln      ();
      virtual void        clearStochSoln    ();
      virtual WitDemand * thisDemand        ();
         //
         // Overrides from class Component.

      virtual WitMsgFrag objTypeMsgFrag ();
      virtual WitAttr    apiObjItrState ();
         //
         // Overrides from class DelComp.

      void copyAttrsFrom (WitDemand * theDemand);
         //
         // Copies the input attributes of theDemand into this Demand.

      static const WitString & demandName (const WitDemand * theDemand);
         //
         // Returns theDemand->demandName ().

      void setUpPegging ();
         //
         // Takes action appropriate for when myGlobalComp ()->perfPegging_
         // has just been set to true.

      void shutDownPegging ();
         //
         // Takes action appropriate for when myGlobalComp ()->perfPegging_
         // has just been set to false.

      void extractPegEls (
            WitPeriod                shipPer,
            WitObjStack <WitPegEl> & thePegElStack);
         //
         // Extracts the PegEls for shipPer owned by this Demand and puts them
         // into thePegElStack, which must be empty.
         // Valid only when heuristic allocation is updating the solution.

      void receivePegEls (
            WitPeriod                shipPer,
            WitObjStack <WitPegEl> & thePegElStack);
         //
         // Moves the PegEls from thePegElStack into the list of PegEls owned by
         // this Demand for shipPer, which must be empty.
         // Valid only when heuristic allocation is updating the solution.

      void getMyFixedPegEls (
            WitPeriod                     shipPer,
            WitObjStack <WitFixedPegEl> & theFixedPegEls);
         //
         // On return, theFixedPegEls is a list of FixedPegEls for shipPer owned
         // by this Demand.

      void clearPegging (WitPeriod shipPer);
         //
         // Clears the pegging for this Demand in shipPer.

      double netRev () const;
         //
         // Returns the net revenue associated with shipping a unit of this
         // Demand.

      virtual void writeSolnData ();
         //
         // Override from class Component.
         // Writes the section of the solution data file for this Demand.

      void display ();
         //
         // Displays the input and preprocessing data for this Demand.

      static void genPriorities (WitProblem * theProblem);
         //
         // Automatically generates priorities from objective data.

      void clearShipVolForHeur ();
         //
         // Clears shipVol_.
         // Valid only when heuristic allocation is updating the solution.

      void incShipVolForHeur (WitPeriod thePer, double incVol);
         //
         // Increments shipVol_[thePer] by incVol.
         // Valid only when heuristic allocation is updating the solution.

      void initFssShipVolForPost ();
         //
         // Sets fssShipVol_ to its initial value.
         // Valid only when postprocessing is being performed.

      void compFssShipVol ();
         //
         // Computes fssShipVol_ in useFocusHorizons mode.

      void writeSoln ();
         //
         // Prints the comprehensive implosion solution for this Demand.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitString &,        demandName)
      accessFunc (WitPart *,                demandedPart)
      accessFunc (const WitDblFlexVec &,    demandVol)
      accessFunc (const WitFlexVec <int> &, priority)
      accessFunc (double,                   searchInc)
      accessFunc (const WitFlexVec <int> &, buildAheadUB)
      accessFunc (const WitFlexVec <int> &, leadTimeUB)
      accessFunc (const WitFlexVec <int> &, shipLateUB)
      accessFunc (bool,                     shipLateAllowed)
      accessFunc (bool,                     prefBuildAhead)
      accessFunc (bool,                     intShipVols)
      accessFunc (WitBoundSet *,            cumShipBounds)
      accessFunc (const WitDblFlexVec &,    shipVol)
      accessFunc (WitPeriod,                focusHorizon)
      accessFunc (const WitDblFlexVec &,    fssShipVol)
      accessFunc (const WitDblFlexVec &,    cumDemandVol)
      accessFunc (const WitDblFlexVec &,    cumShipVol)

      inline const WitDblFlexVec & shipReward () const
         {
         return shipReward_.curDblFlexVec ();
         }

      inline const WitDblFlexVec & cumShipReward () const
         {
         return cumShipReward_.curDblFlexVec ();
         }

      const WitString & demandedPartName ();

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitDemand)

      static int nInstances (WitProblem *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDemand);

      void compCumDemandVol ();
         //
         // Computes cumDemandVol_.

      virtual WitBoundSet * myBoundSet     ();
      virtual void          writeDataID    ();
      virtual void          writeDataAttrs ();
         //
         // Overrides from class Component.

      virtual void findPrereqs (WitDelComp * & prereq1, WitDelComp * & prereq2);
         //
         // Override from class DelComp.

      void buildPegEls ();
         //
         // Builds the PegEls owned by this Demand.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Data set by the constructor.
      //------------------------------------------------------------------------

      int mappingIndex_;
         //
         // Mapping index: see Mapping.h.
         // == # Demands constructed before this Demand.

      WitString demandName_;
         //
         // The name of this Demand.
         // The name must be unique to this demand
         // stream among all the demand streams for the same part, but it need
         // not be unique among demand streams for other parts.

      WitPart * const demandedPart_;
         //
         // The Part demanded by this Demand.

      //------------------------------------------------------------------------
      // Input data.
      //------------------------------------------------------------------------

      WitDblFlexVec demandVol_;
         //
         // Volume demanded in each period.
         // Range: [0.0, +inf).

      WitFlexVec <int> priority_;
         //
         // Used only by the heuristic; High numbers mean low priority.
         // Range: (-inf, +inf).

      double searchInc_;
         //
         // Increment for searches by the heuristic on this Demand.
         // Range: [0.001, +inf).

      WitFlexVec <int> buildAheadUB_;
         //
         // Used only by the heuristic; The heuristic will consider building
         // the part demanded up to buildAheadUB periods earlier than the
         // period in which the demandVol occurs.
         // Range: [0, nPeriods - 1].
         // Note that nPeriods - 1 implies no restriction.

      WitFlexVec <int> leadTimeUB_;
         //
         // Used only by the heuristic.
         // When the heuristic is attempting to increase the shipvol of this
         // demand in period shipPer, no Part with boundedLeadTimes_ == true may
         // be exploded in any period earlier than
         // shipPer - leadTimeUB_[shipPer].
         // Range: [0, nPeriods).

      WitFlexVec <int> shipLateUB_;
         //
         // For demand in period demPer, the heuristic will consider shipping
         // to this demand up to period demPer + shipLateUB[demPer].
         // Range: [0, nPeriods - 1].
         // Note that nPeriods - 1 implies no restriction.

      bool shipLateAllowed_;
         //
         // If false, then late shipments are not allowed for this Demand.

      bool prefBuildAhead_;
         //
         // Used only by the heuristic. 
         // If true, the heuristic will do preferential build-ahead on the 
         // demanded part, i.e., it will try to build the part as early as
         // possible.

      bool intShipVols_;
         //
         // If true, then in optimizing implosion, shipVol_ will be constrained
         // to take on integer values in all periods.

      WitBoundSet * cumShipBounds_;
         //
         // Pointer to bounds on cumulative shipment variables;

      WitObjVec shipReward_;
         //
         // Stores the shipment reward coefficients of the shipment variables
         // for this Demand.
         // Range: (-inf, +inf).

      WitObjVec cumShipReward_;
         //
         // Stores the reward coefficients on the cumulative shipment variables
         // for this Demand.
         // Range: (-inf, +inf).

      WitDblFlexVec shipVol_;
         //
         // shipVol ()[thePer] is the volume shipped to the demand stream in
         // thePer. Normally, this is set by implosion, but it can also be set
         // as input.
         // Range: [0.0, +inf).

      WitPeriod focusHorizon_;
         //
         // The last period in which the unmet demand volume of this
         // Demand will be considered when computing the shortage schedule.
         // Range: [-1, nPeriods).

      WitDblFlexVec fssShipVol_;
         //
         // fssShipVol[thePer] is the desired volume to be shipped to this
         // Demand in thePer for FSS purposes.
         // Range: [0.0, +inf).

      //------------------------------------------------------------------------
      // Data maintained automatically.
      //------------------------------------------------------------------------

      WitDblFlexVec cumDemandVol_;
         //
         // Cumulative volume demanded by each period.

      //------------------------------------------------------------------------
      // Data set by implosion.
      //------------------------------------------------------------------------

      WitDblFlexVec cumShipVol_;
         //
         // cumShipVol_[thePer] is the cumulative volume of the part shipped to
         // this Demand from periods 0 thru thePer.

      //------------------------------------------------------------------------
      // Data set by heuristic allocation.
      //------------------------------------------------------------------------

      WitPtrTVec <WitObjStack <WitPegEl> > myPegElsFor_;
         //
         // myPegElsFor_ (shipPer) is the list of all PegEl instances for
         // shipPer owned by this Demand.
   };
@


1.107
log
@Bounded Lead Times
@
text
@d357 2
a358 2
         // demand in period shipPer, no Material part with
         // boundedLeadTime_ == true may be exploded in any period earlier than
@


1.106
log
@Bounded Lead Times
@
text
@d358 1
a358 1
         // boundedLeadTimes == true may be exploded in any period earlier than
@


1.105
log
@Multi-objective mode
@
text
@d74 1
d77 2
a78 2
         // This default value function is implemented explicitly, because the
         // value depends on theProblem.
d89 1
d244 1
d353 9
@


1.104
log
@Multi-objective mode
@
text
@d255 1
a255 1
         return shipRewardObjVec_.curDblFlexVec ();
d260 1
a260 1
         return cumShipRewardObjVec_.curDblFlexVec ();
d377 1
a377 1
      WitObjVec shipRewardObjVec_;
d383 1
a383 1
      WitObjVec cumShipRewardObjVec_;
@


1.103
log
@Multi-Objective Mode
@
text
@a246 2
      accessFunc (const WitObjVec &,        shipRewardObjVec)
      accessFunc (const WitObjVec &,        cumShipRewardObjVec)
@


1.102
log
@Multi-Objective Mode
@
text
@d247 2
@


1.101
log
@Multi-Objective Mode
@
text
@a246 1
      accessFunc (const WitDblFlexVec &,    cumShipReward)
d258 5
d383 1
a383 1
      WitDblFlexVec cumShipReward_;
d385 2
a386 2
         // cumShipReward_[thePer] is the reward coef. on the cumulative
         // shipment variable for this Demand in thePer.
@


1.100
log
@Multi-Objective Mode
@
text
@d22 1
d129 9
a137 8
      virtual bool        inserted         ();
      virtual void        identifyInstance ();
      virtual void        writeSetClause   ();
      virtual void        copySelfInto     (WitCompMgr *);
      virtual void        recount          ();
      virtual void        clearOptSoln     ();
      virtual void        clearStochSoln   ();
      virtual WitDemand * thisDemand       ();
a246 1
      accessFunc (const WitDblFlexVec &,    shipReward)
d254 5
d373 1
a373 1
      WitDblFlexVec shipReward_;
d375 2
a376 2
         // shipReward_[thePer] is the reward coeff. on the shipment variable
         // for this Demand in thePer.
@


1.99
log
@Removed some references to objective #1.
@
text
@d130 1
@


1.98
log
@Removing objective #2.
@
text
@d368 2
a369 3
         // If objective #1 is being used, then shipReward_[thePer] is the
         // user-specified reward coeff. on the shipment variable for this
         // WitDemand in thePer.
d374 2
a375 3
         // If objective #1 is being used, then cumShipReward_[thePer] is
         // the user-specified reward coef. on the cumulative shipment variable
         // for this Demand in thePer.
@


1.97
log
@Corrected a comment.
@
text
@a67 1
      defaultValue (double    defGrossRev,        1.1)
a90 1
      void setGrossRev        (double);
a243 1
      accessFunc (double,                   grossRev)
a365 5
      double grossRev_;
         //
         // Gross revenue per unit for shipping the part to the demand stream.
         // Range: [0.0, +inf).

@


1.96
log
@Object name change.
@
text
@d77 1
a77 1
         // value depends on thePeriod.
@


1.95
log
@Object name change.
@
text
@d83 1
d304 1
a304 1
      const WitString demandName_;
@


1.94
log
@Stochastic Implosion
@
text
@d43 1
a43 1
      // Constructor functions.
a271 9
      static WitCompMgr * preconstruct (
            const char * theName,
            WitPart *    thePart);
         //
         // The args are the same of those of the ctor.
         // Performs the follow actions at the beginning of construction:
         // * Validates the args.
         // * Returns thePart->myCompMgr ().

@


1.93
log
@Stochastic Implosion
@
text
@a140 1
      virtual int        stageIndex     ();
@


1.92
log
@Stochastic Implosion
@
text
@d116 5
a120 3
      void storeStochDemandVol  (const WitDblFlexVec &);
      void storeStochShipVol    (const WitDblFlexVec &);
      void storeStochCumShipVol (const WitDblFlexVec &);
@


1.91
log
@Stochastic Implosion
@
text
@d139 1
@


1.90
log
@Stochastic Implosion
@
text
@a131 1
      virtual int         stageIndex       ();
@


1.89
log
@Stochastic Implosion
@
text
@d110 6
d131 1
a131 1
      virtual void        importOptSoln    ();
@


1.88
log
@Stochastic Implosion
@
text
@a39 2
      friend class WitHeurAccess;

d155 16
@


1.87
log
@Stochastic Implosion
@
text
@a108 1
      void storePostFssShipVol (const WitDblFlexVec    &);
d186 15
d203 1
a203 1
         // Computes the fssShipVol_ in useFocusHorizons mode.
@


1.86
log
@Stochastic Implosion
@
text
@a39 1
      friend class WitPostAccess;
d101 1
a101 1
      // storeStoch<Attr> functions.
d104 2
a105 1
      // Valid only when the stochastic implosion subsystem is uploading data.
d108 5
d116 3
@


1.85
log
@Stochastic Implosion
@
text
@d121 1
a121 1
      virtual int         stageNo          ();
@


1.84
log
@Stochastic Implosion
@
text
@d121 1
@


1.83
log
@Stochastic Implosion
@
text
@d121 1
@


1.82
log
@Stochastic Implosion
@
text
@d108 3
a110 3
      void storeStochDemandVol  (const WitTVec <double> &);
      void storeStochShipVol    (const WitTVec <double> &);
      void storeStochCumShipVol (const WitTVec <double> &);
@


1.81
log
@Stochastic Implosion
@
text
@d240 3
a242 3
      virtual WitBoundSet * myBoundSetForUpdate ();
      virtual void          writeDataID         ();
      virtual void          writeDataAttrs      ();
@


1.80
log
@Stochastic Implosion
@
text
@d116 6
a121 7
      virtual bool        inserted           ();
      virtual void        identifyInstance   ();
      virtual void        writeDataSetClause ();
      virtual void        copySelfInto       (WitCompMgr *);
      virtual void        recount            ();
      virtual void        importOptSoln      ();
      virtual WitDemand * thisDemand         ();
@


1.79
log
@Stochastic Implosion
@
text
@d102 1
a102 1
      // loadInStoch<Attr> functions.
d108 3
a110 3
      void loadInStochDemandVol  (const WitTVec <double> &);
      void loadInStochShipVol    (const WitTVec <double> &);
      void loadInStochCumShipVol (const WitTVec <double> &);
@


1.78
log
@Stochastic Implosion
@
text
@d105 1
a105 1
      // Valid only when the stochastic implosion subsystem is uploading.
d108 3
a110 1
      void loadInStochDemandVol (const WitTVec <double> &);
a121 1
      virtual void        importStochSoln    ();
@


1.77
log
@Stochastic Implosion
@
text
@d102 9
a119 1
      virtual void        importStochInput   ();
@


1.76
log
@Stochastic Implosion
@
text
@a129 4
      void compCumDemandVol ();
         //
         // Computes cumDemandVol_.

d228 4
@


1.75
log
@Stochastic Implosion
@
text
@d110 3
a112 2
      virtual void        acquireOptSoln     ();
      virtual void        passStochRefs      ();
@


1.74
log
@Stochastic Implosion
@
text
@d110 1
a110 1
      virtual void        importOptImpSoln   (WitPeriod);
@


1.73
log
@Stochastic Implosion
@
text
@d111 1
a111 1
      virtual void        passStochData      ();
@


1.72
log
@Stochastic Implosion
@
text
@d105 8
a112 10
      virtual bool        inserted               ();
      virtual void        identifyInstance       ();
      virtual void        writeDataSetClause     ();
      virtual void        copySelfInto           (WitCompMgr *);
      virtual void        recount                ();
      virtual void        importOptImpSoln       (WitPeriod);
      virtual void        restoreStochInputAttrs ();
      virtual void        clearStochSoln         ();
      virtual void        restoreStochSoln       ();
      virtual WitDemand * thisDemand             ();
d129 4
a244 4
      void compCumDemandVol ();
         //
         // Computes cumDemandVol_.

@


1.71
log
@Stochastic Implosion
@
text
@a41 1
      friend class WitFssAccess;
d170 4
@


1.70
log
@Stochastic Implosion
@
text
@d120 1
d122 1
a122 5
         // Override from class DelComp.

      virtual WitAttr apiObjItrState ();
         //
         // Override from class DelComp.
@


1.69
log
@Stochastic Implosion
@
text
@a41 1
      friend class WitOptAccess;
@


1.68
log
@Stochastic Implosion
@
text
@d112 1
@


1.67
log
@Stochastic Implosion
@
text
@a42 1
      friend class WitStochAccess;
d107 9
a115 6
      virtual bool        inserted           ();
      virtual void        identifyInstance   ();
      virtual void        writeDataSetClause ();
      virtual void        copySelfInto       (WitCompMgr *);
      virtual void        recount            ();
      virtual WitDemand * thisDemand         ();
a134 4
      void compCumDemandVol ();
         //
         // Computes cumDemandVol_.

d243 4
@


1.66
log
@Stochastic Implosion
@
text
@d133 4
@


1.65
log
@Stochastic Implosion
@
text
@d43 1
a112 1
      virtual void        retrieveStochAttrs ();
@


1.64
log
@Stochastic implosion
@
text
@d109 1
@


1.63
log
@Stochastic Implosion.
@
text
@d107 6
a112 5
      virtual bool         inserted         ();
      virtual void         identifyInstance ();
      virtual void         copySelfInto     (WitCompMgr *);
      virtual void         recount          ();
      virtual WitDemand *  thisDemand       ();
@


1.62
log
@[disallowed backlog]
@
text
@a107 1
      virtual WitMsgFragID classFragID      ();
d115 4
@


1.61
log
@[disallowed backlog]
@
text
@d66 12
a77 12
      defaultValue (double    defDemandVol,      0.0)
      defaultValue (int       defPriority,       0)
      defaultValue (double    defSearchInc,      1.0)
      defaultValue (int       defBuildAheadUB,   0)
      defaultValue (bool      defBacklogAllowed, true)
      defaultValue (bool      defPrefBuildAhead, false)
      defaultValue (bool      defIntShipVols,    false)
      defaultValue (double    defGrossRev,       1.1)
      defaultValue (double    defShipReward,     0.0)
      defaultValue (double    defCumShipReward,  0.0)
      defaultValue (double    defShipVol,        0.0)
      defaultValue (WitPeriod defFocusHorizon,   -1)
d88 14
a101 14
      void setDemandVol      (const WitIVRealArg &);
      void setPriority       (const int *);
      void setSearchInc      (double);
      void setBuildAheadUB   (const int *);
      void setShipLateUB     (const int *);
      void setBacklogAllowed (bool);
      void setPrefBuildAhead (bool);
      void setIntShipVols    (bool);
      void setGrossRev       (double);
      void setShipReward     (const WitIVRealArg &);
      void setCumShipReward  (const WitIVRealArg &);
      void setShipVol        (const WitIVRealArg &);
      void setFocusHorizon   (int);
      void setFssShipVol     (const WitIVRealArg &);
d182 1
a182 1
      accessFunc (bool,                     backlogAllowed)
d294 1
a294 1
      bool backlogAllowed_;
d296 1
a296 2
         // If false, then optimizing implosion will not allow backlogging of
         // demandVol for this Demand.
@


1.60
log
@[disallowed backlog]
@
text
@d66 12
a77 12
      defaultValue (double    defDemandVol,       0.0)
      defaultValue (int       defPriority,        0)
      defaultValue (double    defSearchInc,       1.0)
      defaultValue (int       defBuildAheadUB,    0)
      defaultValue (bool      defDisallowBacklog, false)
      defaultValue (bool      defPrefBuildAhead,  false)
      defaultValue (bool      defIntShipVols,     false)
      defaultValue (double    defGrossRev,        1.1)
      defaultValue (double    defShipReward,      0.0)
      defaultValue (double    defCumShipReward,   0.0)
      defaultValue (double    defShipVol,         0.0)
      defaultValue (WitPeriod defFocusHorizon,    -1)
d88 14
a101 14
      void setDemandVol       (const WitIVRealArg &);
      void setPriority        (const int *);
      void setSearchInc       (double);
      void setBuildAheadUB    (const int *);
      void setShipLateUB      (const int *);
      void setDisallowBacklog (bool);
      void setPrefBuildAhead  (bool);
      void setIntShipVols     (bool);
      void setGrossRev        (double);
      void setShipReward      (const WitIVRealArg &);
      void setCumShipReward   (const WitIVRealArg &);
      void setShipVol         (const WitIVRealArg &);
      void setFocusHorizon    (int);
      void setFssShipVol      (const WitIVRealArg &);
d182 1
a182 1
      accessFunc (bool,                     disallowBacklog)
d294 1
a294 1
      bool disallowBacklog_;
d296 1
a296 1
         // If true, then optimizing implosion will not allow backlogging of
@


1.59
log
@[disallowed backlog]
@
text
@d66 12
a77 12
      defaultValue (double    defDemandVol,      0.0)
      defaultValue (int       defPriority,       0)
      defaultValue (double    defSearchInc,      1.0)
      defaultValue (int       defBuildAheadUB,   0)
      defaultValue (bool      defBacklogAllowed, true)
      defaultValue (bool      defPrefBuildAhead, false)
      defaultValue (bool      defIntShipVols,    false)
      defaultValue (double    defGrossRev,       1.1)
      defaultValue (double    defShipReward,     0.0)
      defaultValue (double    defCumShipReward,  0.0)
      defaultValue (double    defShipVol,        0.0)
      defaultValue (WitPeriod defFocusHorizon,   -1)
d88 14
a101 14
      void setDemandVol      (const WitIVRealArg &);
      void setPriority       (const int *);
      void setSearchInc      (double);
      void setBuildAheadUB   (const int *);
      void setShipLateUB     (const int *);
      void setBacklogAllowed (bool);
      void setPrefBuildAhead (bool);
      void setIntShipVols    (bool);
      void setGrossRev       (double);
      void setShipReward     (const WitIVRealArg &);
      void setCumShipReward  (const WitIVRealArg &);
      void setShipVol        (const WitIVRealArg &);
      void setFocusHorizon   (int);
      void setFssShipVol     (const WitIVRealArg &);
d182 1
a182 1
      accessFunc (bool,                     backlogAllowed)
d294 1
a294 1
      bool backlogAllowed_;
d296 2
a297 2
         // Backlogging of demand for this Demand is allowed iff,
         // backlogAllowed_ is true.
@


1.58
log
@Rescinded all changed made since 1/31/07.
@
text
@d40 5
a170 4
      static void transmitDMPs ();
         //
         // See comment on transmitAllDMPs in CompMgr.h.

@


1.57
log
@[disallowed backlog]
@
text
@a22 1
#include <Restricted.h>
d96 1
a173 4
      accessFunc (const WitDblFlexVec &,    cumShipVol)
      accessFunc (const WitDblFlexVec &,    fssShipVol)
      accessFunc (const WitDblFlexVec &,    shipVol)

d188 1
d190 1
d192 1
a203 22
      //------------------------------------------------------------------------
      // Restricted public member data.
      //------------------------------------------------------------------------

      WitImpRestricted <WitDblFlexVec> shipVol_;
         //
         // shipVol_[thePer] is the volume shipped to the demand stream in
         // thePer. Normally, this is set by implosion, but it can also be set
         // as input.
         // Range: [0.0, +inf).

      WitOptPostRestricted <WitDblFlexVec> cumShipVol_;
         //
         // cumShipVol_[thePer] is the cumulative volume of the part shipped to
         // this Demand from periods 0 thru thePer.

      WitFssRestricted <WitDblFlexVec> fssShipVol_;
         //
         // fssShipVol_[thePer] is the desired volume to be shipped to this
         // Demand in thePer for FSS purposes.
         // Range: [0.0, +inf).

d333 7
d346 6
d361 9
@


1.56
log
@[backlog avoidance]
@
text
@d23 1
a96 1
      void setFssShipVol     (const WitIVRealArg &);
d174 4
a191 1
      accessFunc (const WitDblFlexVec &,    shipVol)
a192 1
      accessFunc (const WitDblFlexVec &,    fssShipVol)
a193 1
      accessFunc (const WitDblFlexVec &,    cumShipVol)
d205 22
a355 7
      WitDblFlexVec shipVol_;
         //
         // shipVol ()[thePer] is the volume shipped to the demand stream in
         // thePer. Normally, this is set by implosion, but it can also be set
         // as input.
         // Range: [0.0, +inf).

a361 6
      WitDblFlexVec fssShipVol_;
         //
         // fssShipVol[thePer] is the desired volume to be shipped to this
         // Demand in thePer for FSS purposes.
         // Range: [0.0, +inf).

a370 9
      // Data set by implosion.
      //------------------------------------------------------------------------

      WitDblFlexVec cumShipVol_;
         //
         // cumShipVol_[thePer] is the cumulative volume of the part shipped to
         // this Demand from periods 0 thru thePer.

      //------------------------------------------------------------------------
@


1.55
log
@witCopy<Object>Data
@
text
@d65 1
d88 1
d181 1
d293 5
@


1.54
log
@External opt implosion.
@
text
@d113 4
a223 4
      void copyAttrsFrom (WitDemand * theDemand);
         //
         // Copies the input attributes of theDemand into this Demand.

@


1.53
log
@Heuristic search increment.
@
text
@d66 1
a66 1
      defaultValue (bool      defIntConShipVols, false)
d88 1
a88 1
      void setIntConShipVols (bool);
d176 1
a176 1
      accessFunc (bool,                     intConShipVols)
d297 1
a297 1
      bool intConShipVols_;
@


1.52
log
@Integrality constraints.
@
text
@d63 1
d84 1
d172 1
d270 5
@


1.51
log
@Opt implosion with integrality constraints.
@
text
@d65 1
a65 1
      defaultValue (bool      defIntShipVols,    false)
d86 1
a86 1
      void setIntShipVols    (bool);
d173 1
a173 1
      accessFunc (bool,                     intShipVols)
d289 1
a289 1
      bool intShipVols_;
@


1.50
log
@Updated the copyright date on all source files.
@
text
@d65 1
d86 1
d173 1
d289 5
@


1.49
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.48
log
@[multi-thread]
@
text
@d22 1
a104 2
      void loadPegging ();

d349 1
a349 1
      WitPtrTVec <WitObjStack <WitPegEl> > & myPegElsFor_;
@


1.47
log
@[multi-thread]
@
text
@a103 7
      virtual void loadPost ();
      virtual void loadFss  ();
      virtual void loadHeur ();
      virtual void loadOpt  ();
         //
         // Overrides from class Component.

d157 4
@


1.46
log
@Changed names of obj1 attributes, e.g., obj1ScrapCost to scrapCost.
@
text
@d160 1
a160 1
      void writeSoln (bool fssInput);
a162 1
         // If fssInput is true, the input for FSS will be printed.
@


1.45
log
@Vector PropRt.
@
text
@d60 9
a68 9
      defaultValue (double    defDemandVol,         0.0)
      defaultValue (int       defPriority,          0)
      defaultValue (int       defBuildAheadUB,      0)
      defaultValue (bool      defPrefBuildAhead,    false)
      defaultValue (double    defGrossRev,          1.1)
      defaultValue (double    defObj1ShipReward,    0.0)
      defaultValue (double    defObj1CumShipReward, 0.0)
      defaultValue (double    defShipVol,           0.0)
      defaultValue (WitPeriod defFocusHorizon,      -1)
d79 11
a89 11
      void setDemandVol         (const WitIVRealArg &);
      void setPriority          (const int *);
      void setBuildAheadUB      (const int *);
      void setShipLateUB        (const int *);
      void setPrefBuildAhead    (bool);
      void setGrossRev          (double);
      void setObj1ShipReward    (const WitIVRealArg &);
      void setObj1CumShipReward (const WitIVRealArg &);
      void setShipVol           (const WitIVRealArg &);
      void setFocusHorizon      (int);
      void setFssShipVol        (const WitIVRealArg &);
d178 2
a179 2
      accessFunc (const WitDblFlexVec &,    obj1ShipReward)
      accessFunc (const WitDblFlexVec &,    obj1CumShipReward)
d300 1
a300 1
      WitDblFlexVec obj1ShipReward_;
d302 1
a302 1
         // If objective #1 is being used, then obj1ShipReward ()[thePer] is the
d307 1
a307 1
      WitDblFlexVec obj1CumShipReward_;
d309 1
a309 1
         // If objective #1 is being used, then obj1CumShipReward ()[thePer] is
@


1.44
log
@Double Precision.
@
text
@d79 1
a79 1
      void setDemandVol         (const WitInVecRA &);
d85 3
a87 3
      void setObj1ShipReward    (const WitInVecRA &);
      void setObj1CumShipReward (const WitInVecRA &);
      void setShipVol           (const WitInVecRA &);
d89 1
a89 1
      void setFssShipVol        (const WitInVecRA &);
@


1.43
log
@Double Precision.
@
text
@a78 1
      void setDemandVol         (const float *);
a84 1
      void setObj1ShipReward    (const float *);
a85 1
      void setObj1CumShipReward (const float *);
a86 1
      void setShipVol           (const float *);
a88 1
      void setFssShipVol        (const float *);
@


1.42
log
@Double Precision.
@
text
@d80 1
d87 1
d89 1
d91 1
d94 1
@


1.41
log
@Double Precision.
@
text
@d169 16
a184 16
      accessFunc (const WitString &,           demandName)
      accessFunc (WitPart *,                   demandedPart)
      accessFunc (const WitFlexVec <double> &, demandVol)
      accessFunc (const WitFlexVec <int> &,    priority)
      accessFunc (const WitFlexVec <int> &,    buildAheadUB)
      accessFunc (const WitFlexVec <int> &,    shipLateUB)
      accessFunc (bool,                        prefBuildAhead)
      accessFunc (WitBoundSet *,               cumShipBounds)
      accessFunc (double,                      grossRev)
      accessFunc (const WitFlexVec <double> &, obj1ShipReward)
      accessFunc (const WitFlexVec <double> &, obj1CumShipReward)
      accessFunc (const WitFlexVec <double> &, shipVol)
      accessFunc (WitPeriod,                   focusHorizon)
      accessFunc (const WitFlexVec <double> &, fssShipVol)
      accessFunc (const WitFlexVec <double> &, cumDemandVol)
      accessFunc (const WitFlexVec <double> &, cumShipVol)
d259 1
a259 1
      WitFlexVec <double> demandVol_;
d300 1
a300 1
      WitFlexVec <double> obj1ShipReward_;
d307 1
a307 1
      WitFlexVec <double> obj1CumShipReward_;
d314 1
a314 1
      WitFlexVec <double> shipVol_;
d327 1
a327 1
      WitFlexVec <double> fssShipVol_;
d337 1
a337 1
      WitFlexVec <double> cumDemandVol_;
d345 1
a345 1
      WitFlexVec <double> cumShipVol_;
@


1.40
log
@Double Precision.
@
text
@d21 1
a21 1
#include <RealVec.h>
d171 1
a171 1
      accessFunc (const WitRealVec &,          demandVol)
d178 2
a179 2
      accessFunc (const WitRealVec &,          obj1ShipReward)
      accessFunc (const WitRealVec &,          obj1CumShipReward)
d182 3
a184 3
      accessFunc (const WitRealVec &,          fssShipVol)
      accessFunc (const WitRealVec &,          cumDemandVol)
      accessFunc (const WitRealVec &,          cumShipVol)
d259 1
a259 1
      WitRealVec demandVol_;
d300 1
a300 1
      WitRealVec obj1ShipReward_;
d307 1
a307 1
      WitRealVec obj1CumShipReward_;
d327 1
a327 1
      WitRealVec fssShipVol_;
d337 1
a337 1
      WitRealVec cumDemandVol_;
d345 1
a345 1
      WitRealVec cumShipVol_;
@


1.39
log
@Double Precision.
@
text
@d171 1
a171 1
      accessFunc (const WitRealTVc &,          demandVol)
d182 2
a183 2
      accessFunc (const WitRealTVc &,          fssShipVol)
      accessFunc (const WitRealTVc &,          cumDemandVol)
d259 1
a259 1
      WitRealTVc demandVol_;
d327 1
a327 1
      WitRealTVc fssShipVol_;
d337 1
a337 1
      WitRealTVc cumDemandVol_;
@


1.38
log
@Double Precision.
@
text
@d171 1
a171 1
      accessFunc (const WitRealVec &,          demandVol)
d182 2
a183 2
      accessFunc (const WitRealVec &,          fssShipVol)
      accessFunc (const WitRealVec &,          cumDemandVol)
d259 1
a259 1
      WitRealVec demandVol_;
d327 1
a327 1
      WitRealVec fssShipVol_;
d337 1
a337 1
      WitRealVec cumDemandVol_;
@


1.37
log
@Double Precision.
@
text
@d60 1
a60 1
      defaultValue (float     defDemandVol,         0.0)
d65 3
a67 3
      defaultValue (float     defObj1ShipReward,    0.0)
      defaultValue (float     defObj1CumShipReward, 0.0)
      defaultValue (float     defShipVol,           0.0)
@


1.36
log
@Double Precision.
@
text
@d183 2
a184 2
      accessFunc (const WitTVec <float> &,     cumDemandVol)
      accessFunc (const WitFlexVec <float> &,  cumShipVol)
d337 1
a337 1
      WitTVec <float> cumDemandVol_;
d345 1
a345 1
      WitFlexVec <float> cumShipVol_;
@


1.35
log
@Continued double precision.
@
text
@d21 1
a21 1
#include <FlexVec.h>
d171 1
a171 1
      accessFunc (const WitTVec <float> &,     demandVol)
d178 2
a179 2
      accessFunc (const WitFlexVec <float> &,  obj1ShipReward)
      accessFunc (const WitFlexVec <float> &,  obj1CumShipReward)
d182 1
a182 1
      accessFunc (const WitTVec <float> &,     fssShipVol)
d259 1
a259 1
      WitTVec <float> demandVol_;
d300 1
a300 1
      WitFlexVec <float> obj1ShipReward_;
d302 1
a302 1
         // If objective #1 is being used, then obj1ShipReward ()[t] is the
d304 1
a304 1
         // WitDemand in period t.
d307 1
a307 1
      WitFlexVec <float> obj1CumShipReward_;
d309 3
a311 3
         // If objective #1 is being used, then obj1CumShipReward ()[t] is the
         // user-specified reward coef. on the cumulative shipment variable for
         // thisWitDemand in period t.
d316 3
a318 3
         // shipVol ()[t] is the volume shipped to the demand stream in period
         // t. Normally, this is set by implosion, but it can also be set as
         // input.
d327 1
a327 1
      WitTVec <float> fssShipVol_;
d329 2
a330 2
         // fssShipVol[t] is the desired volume to be shipped to this Demand
         // in period t for FSS purposes.
d347 2
a348 2
         // cumShipVol_[t] is the cumulative volume of the part shipped to the
         // demand from periods 0 thru t.
@


1.34
log
@Continued double precision.
@
text
@d64 1
a64 1
      defaultValue (StrDbl    defGrossRev,          1.1)
d84 1
a84 1
      void setGrossRev          (StrDbl);
d177 1
a177 1
      accessFunc (StrDbl,                      grossRev)
d295 1
a295 1
      StrDbl grossRev_;
@


1.33
log
@Continued double precision.
@
text
@d142 1
a142 1
      float netRev () const;
@


1.32
log
@Removed a bad function overload.
@
text
@d64 1
a64 1
      defaultValue (float     defGrossRev,          1.1F)
d84 1
a84 1
      void setGrossRev          (float);
d177 1
a177 1
      accessFunc (float,                       grossRev)
d295 1
a295 1
      float grossRev_;
@


1.31
log
@Continued implementation of proportionate routing.
@
text
@d100 1
a100 1
      virtual WitDemand *  myDemand         ();
@


1.30
log
@Continued implementation of proportionate routing.
@
text
@d24 1
a24 1
// class Demand.
d26 1
a26 1
// WitDemand, a.k.a. "demand stream".
@


1.29
log
@Continued implementation of proportionate routing.
@
text
@d100 1
a100 1
      virtual void         getDemand        (WitDemand * &);
@


1.28
log
@Removed all const_casts from WIT.
@
text
@d186 6
d194 1
a194 1
      const WitString & demandedPartName ();
@


1.27
log
@Attempt to fix a syntax error from the MS compiler in Pre.C.
@
text
@d131 3
a133 3
      void getMyPegEls (
            WitPeriod          shipPer,
            WitObjStack <const WitPegEl> & thePegEls);
d135 2
a136 2
         // On return, thePegEls is a list of all PegEls for shipPer owned by
         // this Demand.
@


1.26
log
@Internal changes.
@
text
@d64 1
a64 1
      defaultValue (float     defGrossRev,          1.1)
@


1.25
log
@Continued implementation of Single-Source.
@
text
@d60 9
a68 9
      defaultValue (float      defDemandVol,         0.0)
      defaultValue (int        defPriority,          0)
      defaultValue (int        defBuildAheadUB,      0)
      defaultValue (WitBoolean defPrefBuildAhead,    witFALSE)
      defaultValue (float      defGrossRev,          1.1)
      defaultValue (float      defObj1ShipReward,    0.0)
      defaultValue (float      defObj1CumShipReward, 0.0)
      defaultValue (float      defShipVol,           0.0)
      defaultValue (WitPeriod  defFocusHorizon,      -1)
d83 1
a83 1
      void setPrefBuildAhead    (WitBoolean);
d95 1
a95 1
      virtual WitBoolean   inserted         ();
d124 1
a124 1
         // has just been set to TRUE.
d129 1
a129 1
         // has just been set to FALSE.
d160 1
a160 1
      void writeSoln (WitBoolean fssInput);
d163 1
a163 1
         // If fssInput is TRUE, the input for FSS will be printed.
d175 1
a175 1
      accessFunc (WitBoolean,                  prefBuildAhead)
d278 1
a278 1
      WitBoolean prefBuildAhead_;
d281 1
a281 1
         // If TRUE, the heuristic will do preferential build-ahead on the 
@


1.24
log
@Continued implementation of Single-Source.
@
text
@a56 25
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitString &,           demandName)
      accessFunc (WitPart *,                   demandedPart)
      accessFunc (const WitTVec <float> &,     demandVol)
      accessFunc (const WitFlexVec <int> &,    priority)
      accessFunc (const WitFlexVec <int> &,    buildAheadUB)
      accessFunc (const WitFlexVec <int> &,    shipLateUB)
      accessFunc (WitBoolean,                  prefBuildAhead)
      accessFunc (WitBoundSet *,               cumShipBounds)
      accessFunc (float,                       grossRev)
      accessFunc (const WitFlexVec <float> &,  obj1ShipReward)
      accessFunc (const WitFlexVec <float> &,  obj1CumShipReward)
      accessFunc (const WitFlexVec <double> &, shipVol)
      accessFunc (WitPeriod,                   focusHorizon)
      accessFunc (const WitTVec <float> &,     fssShipVol)
      accessFunc (const WitTVec <float> &,     cumDemandVol)
      accessFunc (const WitFlexVec <float> &,  cumShipVol)

      decMappingIndex (WitDemand)

      const WitString & demandedPartName ();

      //------------------------------------------------------------------------
d131 8
a138 2
      void getMyOpnPegEls (WitPeriod, WitObjStack <const WitPegEl> &);
      void getMySubPegEls (WitPeriod, WitObjStack <const WitPegEl> &);
d140 1
a140 1
         // See class PegSite.
d165 25
d221 4
d348 1
a348 1
      WitPegSite * myPegSite_;
d350 2
a351 2
         // The PegSite owned by this Demand, if myGlobalComp ()->perfPegging_
         // is TRUE; otherwise NULL.
@


1.23
log
@Continued implementation of single-source.
@
text
@a76 2
      accessNonNull (WitPegSite *,             myPegSite)

d136 2
d155 5
@


1.22
log
@Continued implementation of single-source.
@
text
@a118 8
      // Conditional reference access functions.
      //------------------------------------------------------------------------

      conditionalRef (WitFlexVec <double>, shipVol,   heurAllAcc () ||
                                                       optImpAcc ())
      conditionalRef (WitFlexVec <float>,  cumShipVol, optImpAcc ())

      //------------------------------------------------------------------------
d128 7
a134 2
      virtual void         loadPost         ();
      virtual void         loadFss          ();
@


1.21
log
@Continued implementation of single-source.
@
text
@d122 3
a124 6
      conditionalRef (WitFlexVec <double>, shipVol,     heurAllAcc () ||
                                                         optImpAcc ())
      conditionalRef (WitFlexVec <float>,  cumShipVol,   optImpAcc () ||
                                                       postprocAcc ())
      conditionalRef (WitTVec <float>,     fssShipVol, postprocAcc () ||
                                                            fssAcc ())
d136 2
@


1.20
log
@Continued implementation of single-source.
@
text
@d122 6
a127 3
      conditionalRef (WitFlexVec <double>, shipVol,   heurAllAcc () ||
                                                       optImpAcc ())
      conditionalRef (WitFlexVec <float>,  cumShipVol, optImpAcc ())
a181 12

      void compDefFssShipVol ();
         //
         // Sets fssShipVol_ to its default value.

      void compFssShipVol ();
         //
         // Computes fssShipVol_ from focusHorizon.

      void compCumShipVol ();
         //
         // Computes cumShipVol_.
@


1.19
log
@Continued implementation of single-source.
@
text
@a138 4
      virtual void importPostprocResults ();
         //
         // Override from class Component.

d182 1
a182 1
         // Sets fssShipVol to its default value.
d186 5
a190 1
         // Computes fssShipVol from focusHorizon.
@


1.18
log
@Continued implementation of single-source.
@
text
@d122 3
a124 5
      conditionalRef (WitFlexVec <double>, shipVol,     heurAllAcc () ||
                                                         optImpAcc ())
      conditionalRef (WitFlexVec <float>,  cumShipVol,   optImpAcc () ||
                                                       postprocAcc ())
      conditionalRef (WitTVec <float>,     fssShipVol, postprocAcc ())
d139 1
a139 1
      virtual void importFssResults ();
d183 4
@


1.17
log
@Preliminary work on single source.
@
text
@d126 1
a126 2
      conditionalRef (WitTVec <float>,     fssShipVol, postprocAcc () ||
                                                            fssAcc ())
d141 4
d185 4
@


1.16
log
@Continued preliminary work on single source.
@
text
@d63 3
a65 3
      accessFunc (const WitFlexVec (int) &,    priority)
      accessFunc (const WitFlexVec (int) &,    buildAheadUB)
      accessFunc (const WitFlexVec (int) &,    shipLateUB)
d69 3
a71 3
      accessFunc (const WitFlexVec (float) &,  obj1ShipReward)
      accessFunc (const WitFlexVec (float) &,  obj1CumShipReward)
      accessFunc (const WitFlexVec (double) &, shipVol)
d75 1
a75 1
      accessFunc (const WitFlexVec (float) &,  cumShipVol)
d122 1
a122 1
      conditionalRef (WitFlexVec (double), shipVol,     heurAllAcc () ||
d124 1
a124 1
      conditionalRef (WitFlexVec (float),  cumShipVol,   optImpAcc () ||
d247 1
a247 1
      WitFlexVec (int) priority_;
d252 1
a252 1
      WitFlexVec (int) buildAheadUB_;
d260 1
a260 1
      WitFlexVec (int) shipLateUB_;
d283 1
a283 1
      WitFlexVec (float) obj1ShipReward_;
d290 1
a290 1
      WitFlexVec (float) obj1CumShipReward_;
d297 1
a297 1
      WitFlexVec (double) shipVol_;
d328 1
a328 1
      WitFlexVec (float) cumShipVol_;
@


1.15
log
@Continued implementation of object iteration.
@
text
@d62 1
a62 1
      accessFunc (const WitTVec (float) &,     demandVol)
d73 2
a74 2
      accessFunc (const WitTVec (float) &,     fssShipVol)
      accessFunc (const WitTVec (float) &,     cumDemandVol)
d126 1
a126 1
      conditionalRef (WitTVec (float),     fssShipVol, postprocAcc () ||
d242 1
a242 1
      WitTVec (float) demandVol_;
d310 1
a310 1
      WitTVec (float) fssShipVol_;
d320 1
a320 1
      WitTVec (float) cumDemandVol_;
@


1.14
log
@Continued implementation of object iteration.
@
text
@d142 1
a142 1
      virtual WitAttr apiItrState ();
@


1.13
log
@Began implementation of object iteration.
@
text
@d138 1
d141 4
@


1.12
log
@Minor change.
@
text
@d19 3
a21 1
#include <BopEntry.h>
d81 1
a81 4
      inline const WitString & demandedPartName ()
         {
         return demandedPart ()->partName ();
         }
@


1.11
log
@Continued implementation of pegging.
@
text
@d148 1
a148 1
         // Takes action appropriate for when myGlobalComp ()->peggingNeeded_
d153 1
a153 1
         // Takes action appropriate for when myGlobalComp ()->peggingNeeded_
d335 2
a336 2
         // The PegSite owned by this Demand, if
         // myGlobalComp ()->peggingNeeded_ is TRUE; otherwise NULL.
@


1.10
log
@Continued implementation of pegging.
@
text
@d148 2
a149 2
         // Takes action appropriate for when myGlobalComp ()->pegging_ has just
         // been set to TRUE.
d153 2
a154 2
         // Takes action appropriate for when myGlobalComp ()->pegging_ has just
         // been set to FALSE.
d335 2
a336 2
         // The PegSite owned by this Demand, if myGlobalComp ()->pegging_ is
         // TRUE; otherwise NULL.
@


1.9
log
@Continued implementation of pegging.
@
text
@d75 1
a75 2
      accessNonNull (WitPegSite <WitOperation> *, myOpnPegSite)
      accessNonNull (WitPegSite <WitSubEntry>  *, mySubPegSite)
d146 1
a146 1
      void startUpPegging ();
d333 1
a333 2
      WitPegSite <WitOperation> * myOpnPegSite_;
      WitPegSite <WitSubEntry>  * mySubPegSite_;
d335 1
a335 1
         // The PegSites owned by this Demand, if myGlobalComp ()->pegging_ is
@


1.8
log
@Continued implementation of pegging.
@
text
@d149 2
a150 2
         // Takes action appropriate for when myGlobalComp ()->perfPegging_ has
         // just been set to TRUE.
d154 2
a155 2
         // Takes action appropriate for when myGlobalComp ()->perfPegging_ has
         // just been set to FALSE.
d337 2
a338 2
         // The PegSites owned by this Demand, if myGlobalComp ()->perfPegging_
         // is TRUE; otherwise NULL.
@


1.7
log
@Continued implementation of pegging.
@
text
@d149 1
a149 1
         // Takes action appropriate for when myGlobalComp ()->doPegging_ has
d154 1
a154 1
         // Takes action appropriate for when myGlobalComp ()->doPegging_ has
d337 2
a338 2
         // The PegSites owned by this Demand, if myGlobalComp ()->doPegging_ is
         // TRUE; otherwise NULL.
@


1.6
log
@Initial implementation of pegging.
@
text
@d75 2
a76 1
      accessNonNull (WitPegSite *,             myPegSite)
d334 2
a335 1
      WitPegSite * myPegSite_;
d337 2
a338 2
         // The PegSite owned by this Demand, if myGlobalComp ()->doPegging ()
         // is TRUE; otherwise NULL.
@


1.5
log
@Refactoring for selection splitting.
@
text
@d75 2
d134 5
a138 1
      virtual WitBoolean inserted ();
d140 1
a140 1
         // Override from class Component.
d142 1
a142 1
      virtual WitMsgFragID classFragID ();
d144 1
a144 1
         // Override from class Component.
d146 1
a146 1
      virtual void identifyInstance ();
d148 2
a149 1
         // Override from class Component.
d151 1
a151 9
      virtual void copySelfInto (WitCompMgr * theCompMgr);
         //
         // Override from class Component.

      virtual void recount ();
         //
         // Override from class Component.

      static const WitString & demandName (const WitDemand * theDemand);
d153 2
a154 1
         // Returns theDemand->demandName ().
d197 2
d200 1
a200 9
         // Override from class Component.

      virtual void writeDataID ();
         //
         // Override from class Component.

      virtual void writeDataAttrs ();
         //
         // Override from class Component.
d328 9
@


1.4
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d185 1
a185 3
      copyCtorAndAssignment (WitDemand);
         //
         // Prevents unintentional copying and assignment.
@


1.3
log
@Fixed bug: MCL Client Error on emptyBom msg.
@
text
@d144 1
a144 1
      virtual void copyInto (WitCompMgr * theCompMgr);
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d58 16
a73 16
      accessFunc (const WitString &,          demandName)
      accessFunc (WitPart *,                  demandedPart)
      accessFunc (const WitTVec (float) &,    demandVol)
      accessFunc (const WitFlexVec (int) &,   priority)
      accessFunc (const WitFlexVec (int) &,   buildAheadUB)
      accessFunc (const WitFlexVec (int) &,   shipLateUB)
      accessFunc (WitBoolean,                 prefBuildAhead)
      accessFunc (WitBoundSet *,              cumShipBounds)
      accessFunc (float,                      grossRev)
      accessFunc (const WitFlexVec (float) &, obj1ShipReward)
      accessFunc (const WitFlexVec (float) &, obj1CumShipReward)
      accessFunc (const WitTVec (float) &,    shipVol)
      accessFunc (WitPeriod,                  focusHorizon)
      accessFunc (const WitTVec (float) &,    fssShipVol)
      accessFunc (const WitTVec (float) &,    cumDemandVol)
      accessFunc (const WitFlexVec (float) &, cumShipVol)
d121 6
a126 6
      conditionalRef (WitTVec (float),    shipVol,     heurAllAcc () ||
                                                        optImpAcc ())
      conditionalRef (WitFlexVec (float), cumShipVol,   optImpAcc () ||
                                                      postprocAcc ())
      conditionalRef (WitTVec (float),    fssShipVol, postprocAcc () ||
                                                           fssAcc ())
d301 1
a301 1
      WitTVec (float) shipVol_;
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
