head	1.87;
access;
symbols
	sce_5_01_20080919:1.79
	latest_sce_4_20_20060523:1.45.0.2
	sce_4_20_20060523:1.45
	latest_sce4_20_OSL:1.44.0.2
	sce_4_20_OSL:1.44
	sce_410_withVa:1.43
	sce_4_05_20040511:1.39
	sce_4_00_20040201:1.17
	nextGenBranch:1.16.0.2
	nextGenRoot:1.16
	sce_3_30_20030627:1.15
	EndRw-branch:1.9.0.6
	Root-of-EndRw:1.9
	rwToStl:1.9.0.4
	latest_sce_3_10_20010924:1.9.0.2
	sce_3_10_20010924:1.9
	latest_sce_3_00_20010601:1.7.0.2
	sce_3_00_20010601:1.7
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.87
date	2011.09.28.23.49.00;	author rjw;	state Exp;
branches;
next	1.86;

1.86
date	2011.09.24.00.27.18;	author rjw;	state Exp;
branches;
next	1.85;

1.85
date	2011.08.30.20.17.14;	author rjw;	state Exp;
branches;
next	1.84;

1.84
date	2011.01.13.00.38.39;	author rjw;	state Exp;
branches;
next	1.83;

1.83
date	2010.06.16.20.56.28;	author rjw;	state Exp;
branches;
next	1.82;

1.82
date	2010.03.26.22.22.52;	author rjw;	state Exp;
branches;
next	1.81;

1.81
date	2009.12.14.21.34.54;	author rjw;	state Exp;
branches;
next	1.80;

1.80
date	2009.12.08.21.44.06;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2008.07.02.17.48.36;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2008.03.03.21.41.14;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2008.01.18.22.40.58;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2008.01.09.22.33.56;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2007.12.06.22.53.00;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2007.11.29.19.18.03;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2007.10.22.19.58.51;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2007.10.17.14.58.47;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2007.10.15.21.50.33;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2007.10.11.19.16.55;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2007.06.18.21.53.31;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2007.06.15.17.44.36;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2007.06.14.21.38.31;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2007.05.21.15.20.09;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2007.05.03.22.05.29;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2007.05.03.19.36.16;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2007.04.30.20.10.32;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2007.04.30.19.52.04;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2007.04.25.23.30.29;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2007.04.25.20.39.59;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2007.04.23.22.46.03;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2007.04.19.14.52.48;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2007.04.16.21.32.58;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2007.04.16.17.53.22;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2007.04.16.17.41.28;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2007.04.10.20.49.29;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2007.04.10.20.10.15;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2007.04.10.16.33.21;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2007.04.04.22.08.17;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2007.04.04.20.04.39;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2007.04.04.16.16.02;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2007.04.03.22.04.02;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2006.11.02.23.07.12;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2006.09.21.20.31.51;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2006.05.02.17.33.54;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2005.10.21.15.37.51;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2005.07.13.21.18.46;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2005.03.21.21.49.26;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2005.02.24.23.23.55;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2004.11.04.16.30.13;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2004.04.19.22.16.27;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2004.04.19.18.25.17;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2004.04.09.21.24.26;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2004.04.09.19.37.57;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2004.04.02.23.45.20;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2004.04.01.21.05.11;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2004.03.29.23.21.27;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2004.03.29.22.25.14;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2004.03.27.00.08.20;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2004.03.26.22.29.41;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2004.03.25.20.35.02;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2004.03.25.19.59.37;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2004.03.24.23.06.32;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2004.03.24.16.50.34;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2004.02.20.15.37.35;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2004.02.19.21.21.27;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2004.02.12.19.13.38;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.02.07.00.12.09;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.02.06.00.17.32;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2004.02.04.22.31.26;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2004.02.04.18.57.49;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2004.01.30.23.07.50;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.08.05.20.18.23;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.07.10.22.58.16;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.05.07.18.06.14;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.21.18.56.22;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.31.21.28.52;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.27.21.17.15;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.08.19.22.36;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.02.22.18.17;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.31.00.26.25;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.01.19.23.31;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.06.19.22.07;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.12.19.48.05;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.08.16.37.03;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.36;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.25.20.12.29;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.15;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.18;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.18;	author wit;	state Exp;
branches;
next	;


desc
@@


1.87
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ApiCallH
#define ApiCallH

//------------------------------------------------------------------------------
// Header file: "ApiCall.h"
//
// Contains the declaration of the following classes:
//
//    ApiCall
//    GlobalCompApiCall
//    OptCompApiCall
//    StochApiCall
//    PartApiCall
//    MaterialApiCall
//    DemandApiCall
//    OperationApiCall
//    BomEntryApiCall
//    SubEntryApiCall
//    BopEntryApiCall
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class ApiCall
//
// Responsible for setting up an API function call and cleaning up afterwards.
//
// ProbAssoc
//    ApiCall
//       GlobalCompApiCall
//       OptCompApiCall
//       StochApiCall
//       PartApiCall
//       MaterialApiCall
//       DemandApiCall
//       OperationApiCall
//       BomEntryApiCall
//       SubEntryApiCall
//       BopEntryApiCall
//------------------------------------------------------------------------------

class WitApiCall: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline bool argsOK ()
         {
         witAssert (prepSetCalled_);

         return argsOK_;
         }

      //------------------------------------------------------------------------
      // prep<AttributeKind> functions.
      //
      // Each of these functions takes the appropriate API action in preparation
      // for setting the value of a specific kind of attribute.
      // Typically, a prep function has the following arguments:
      // * theAttName (usually)
      // * oldValue (sometimes)
      // * theValue
      //
      // * Sets myInputID ()->myAttName_ to theAttName.
      // * On return, sets myInputID ()->myAttName_ to NULL.
      // * Verifies that theValue is a valid value for the attribute.
      // * If theValue is valid:
      //      Issues an attribute-setting info msg.
      // * If theValue is not valid:
      //      Issues a severe Msg (possibly severe-after-input).
      // oldValue is the old value of the attribute, which is used in the
      // attribute-setting msg.
      //------------------------------------------------------------------------

      void prepBool (
            const char * theAttName,
            bool         oldValue,
            WitBoolean   theValue);
         //
         // Prep for a Bool attribute.

      void prepInt (
            const char * theAttName,
            int          oldValue,
            int          theValue);
         //
         // Prep for an int attribute.

      void prepNonNegInt (
            const char * theAttName,
            int          oldValue,
            int          theValue);
         //
         // Prep for a non-negative int attribute.

      void prepImmPosInt (
            const char * theAttName,
            int          oldValue,
            int          theValue);
         //
         // Prep for a positive int attribute.
         // Violation causes immediate abort.

      void prepRangedInt (
            const char * theAttName,
            int          oldValue,
            int          theValue,
            int          lb,
            int          ub);
         //
         // Prep for an int attribute in the range [lb, ub].

      void prepImmRangedInt (
            const char * theAttName,
            int          oldValue,
            int          theValue,
            int          lb,
            int          ub);
         //
         // Prep for an int attribute in the range [lb, ub].
         // Violation causes immediate abort.

      void prepDouble (
            const char * theAttName,
            double       oldValue,
            double       theValue);
         //
         // Prep for an unconstrained double attribute.

      void prepNonNegDouble (
            const char * theAttName,
            double       oldValue,
            double       theValue);
         //
         // Prep for a non-negative double attribute.

      void prepLBDouble (
            const char * theAttName, 
            double       oldValue, 
            double       theValue,
            double       lb,
            double       msgLB);
         //
         // Prep for a double attribute that must be >= lb.
         // msgLB is the lower bound to be displayed in any error message.

      void prepNonNegUBDouble (
            const char * theAttName, 
            double       oldValue, 
            double       theValue,
            double       ub,
            double       msgUB);
         //
         // Prep for a double attribute that must be in the range [0, ub].
         // msgUB is the upper bound to be displayed in any error message.

      void prepPosDouble (
            const char * theAttName,
            double       oldValue,
            double       theValue);
         //
         // Prep for a positive double attribute.

      void prepBoolVec (
            const char *       theAttName,
            const WitBoolean * theValue);
         //
         // Prep for a bool vector attribute.

      void prepIntVec (
            const char * theAttName,
            const int *  theValue);
         //
         // Prep for an unconstrained int vector attribute.

      void prepDblVec (
            const char *         theAttName,
            const WitIVRealArg & theValue);
         //
         // Prep for an unconstrained double vector attribute.

      void prepNonNegDblVec (
            const char *         theAttName,
            const WitIVRealArg & theValue);
         //
         // Prep for a non-negative double vector attribute.

      void prepBuildAheadUB (const int * theValue);
         //
         // Prep for a buildAheadUB attribute.

      void prepLeadTimeUB (const int * theValue);
         //
         // Prep for a leadTimeUB attribute.

      void prepShipLateUB (const int * theValue);
         //
         // Prep for a shipLateUB attribute.

      void prepString (
            const char *      theAttName,
            const WitString & oldValue,
            const char *      theValue);
         //
         // Prep for a String attribute.

      //------------------------------------------------------------------------
      // Attribute setting functions.
      //
      // Each of these functions sets an attribute to the given value for API
      // purposes. Generally, these functions are created for attributes of 
      // base classes, so they can be used multiple times.
      // A fatal error is issued, if this ApiCall is not associated with a
      // Component that has the attribute.
      //------------------------------------------------------------------------

      void setAppData        (void *);
      void setSelForDel      (WitBoolean);
      void setEarliestPeriod (int);
      void setLatestPeriod   (int);
      void setRoutingShare   (const WitIVRealArg &);
      void setOffset         (const WitIVRealArg &);
      void setObjectStage    (int);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void getObjectStage (int * objectStage);
         //
         // apiGet of objectStage for a Node.

      void setBoundSet (
            WitBoundSet *        theBoundSet,
            const WitIVRealArg & hardLBArg,
            const WitIVRealArg & softLBArg,
            const WitIVRealArg & hardUBArg);
         //
         // Sets theBoundSet to the args.
         // Similar to a "prep" functions, but sets the value as well.

      void reqNoPartsOrOpns (const char * theAttName);
         //
         // Issues a severe error if this WitRun contains a Part or Operations.
         // theAttName is the name of the attribute being set.

      void issueSetDblVecMsg (
            const char *  theAttName,
            const float * theFltCVec);
         //
         // Issues the message for setting a double vector attribute.
         // theAttName is the name of the attribute.
         // theFltCVec is the vector to which the attribute is to be set.

      void issueSetDblVecMsg (
            const char *   theAttName,
            const double * theDblCVec);
         //
         // Same as above.

      void issueBoundVecMsg (
            WitBoundSet * theBoundSet,
            const float * theFltCVec,
            WitMsgFragID  theFragID);
         //
         // Issues the message for setting one of the vectors of theBoundSet to
         // theFragID, where theFragID indicates a message fragment indicating
         // the vector being set.

      void issueBoundVecMsg (
            WitBoundSet *  theBoundSet,
            const double * theDblCVec,
            WitMsgFragID   theFragID);
         //
         // Same as above.

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitApiCall (WitRun * theWitRun);
         //
         // ProbAssoc <<< theWitRun->myProblem ().

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitApiCall ();

      //------------------------------------------------------------------------
      // Associated Component functions.
      //
      // Each of these functions returns the Component of the indicated class
      // associated with this ApiCall, if any.
      // Issues a fatal error if there is none.
      // The base class implementation issues the error.
      //------------------------------------------------------------------------

      virtual WitComponent * myComponent () = 0;
      virtual WitDelComp *   myDelComp   ();
      virtual WitBillEntry * myBillEntry ();
      virtual WitConsEntry * myConsEntry ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      inline WitInputID * myInputID ();
         //
         // Implemented in the .C file.

      void forbidNullSetArg (const void * theArg);
         //
         // theArg: A pointer that was passed to WIT as an argument to a
         //         API function for setting the value of a vector attribute.
         // If theArg is NULL, this function issues a severe error.

      void errorFound (WitPeriod thePer);
         //
         // Records the fact that an error has been found in thePer.

      void errorFound ();
         //
         // Records the fact that an error has been found.

      void prepSetAttr (const char * theAttName);
         //
         // To be called just prior to setting the value of any non-msg
         // attribute.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      static WitProblem * theProblemFor (WitRun * theWitRun);
         //
         // Calls myApiMgr ()->startInnerFunc () and then returns
         // theWitRun->myProblem ().

      void checkPeriodIntVec (const int * theValue);
         //
         // Error checking for an int vector in the range [0, nPeriods - 1].

      void mergeBoundVecs (
            WitDblFlexVec &       mergedVec,
            const WitDblFlexVec & oldVec,
            const WitIVRealArg &  theIVRealArg);
         //
         // Sets mergedVec by merging oldVec and newCVec as BoundSet vectors.

      void prepSetAttrStochMode (const char * theAttName);
         //
         // Called by prepSetAttr in stochastic mode.

      noCopyCtorAssign (WitApiCall);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      bool argsOK_;
         //
         // true, iff no errors have been found in the arguments.

      bool prepSetCalled_;
         //
         // In DEBUG mode, true, iff prepSetAttr has been called.
   };

//------------------------------------------------------------------------------
// class GlobalCompApiCall
//
// Responsible for setting up an API call for a GlobalComp and cleaning up
// afterwards.
//
// ProbAssoc
//    ApiCall
//       GlobalCompApiCall
//------------------------------------------------------------------------------

class WitGlobalCompApiCall: public WitApiCall
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitGlobalCompApiCall (WitRun * theWitRun);
         //
         // Sets up for an API call for the GlobalComp of theWitRun.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitGlobalCompApiCall ();
         //
         // Cleans up after an API call for the GlobalComp of myWitRun ().

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitGlobalCompApiCall);

      virtual WitComponent * myComponent ();
         //
         // Override from class ApiCall.
   };

//------------------------------------------------------------------------------
// class OptCompApiCall
//
// Responsible for setting up an API call for an OptComp and cleaning up
// afterwards.
//
// ProbAssoc
//    ApiCall
//       OptCompApiCall
//------------------------------------------------------------------------------

class WitOptCompApiCall: public WitApiCall
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOptCompApiCall (WitRun * theWitRun);
         //
         // Sets up for an API call for the OptComp of theWitRun.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitOptCompApiCall ();
         //
         // Cleans up after an API call for the OptComp of myWitRun ().

      //------------------------------------------------------------------------
      // Other public member functions
      //------------------------------------------------------------------------

      void reqMultiObjMode (const char * theAttName);
         //
         // Issues a severe error if this WitRun is not in multi-obj mode.
         // theAttName is the name of the global attribute being set or
         // retrieved.

      WitMultiObjMgr *   myMultiObjMgr    ();
      WitObjective *     currentObjective ();
      WitCpxParSpecMgr * myCpxParSpecMgr  ();
         //
         // Access wrappers.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitOptCompApiCall);

      virtual WitComponent * myComponent ();
         //
         // Override from class ApiCall.
   };

//------------------------------------------------------------------------------
// class StochApiCall
//
// Responsible for setting up an API call for stochastic implosion and cleaning
// up afterwards.
//
// ProbAssoc
//    ApiCall
//       StochApiCall
//------------------------------------------------------------------------------

class WitStochApiCall: public WitApiCall
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStochApiCall (WitRun * theWitRun);
         //
         // Sets up for an API call for stochastic implosion.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitStochApiCall ();
         //
         // Cleans up after an API call for stochastic implosion.

      //------------------------------------------------------------------------
      // Attribute setting functions.
      //------------------------------------------------------------------------

      void setPeriodStage (const int *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitStochApiCall);

      virtual WitComponent * myComponent ();
         //
         // Override from class ApiCall.
   };

//------------------------------------------------------------------------------
// class PartApiCall
//
// Responsible for setting up an API call for a Part and cleaning up
// afterwards.
//
// ProbAssoc
//    ApiCall
//       PartApiCall
//------------------------------------------------------------------------------

class WitPartApiCall: public WitApiCall
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPartApiCall (WitRun * theWitRun, const char * partName);
         //
         // Sets up for an API call for a Part in theWitRun identified by
         // partName.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPartApiCall ();
         //
         // Cleans up after an API call for a Part in myWitRun ().

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPart *, myPart)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPartApiCall);

      virtual WitComponent * myComponent ();
      virtual WitDelComp *   myDelComp ();
         //
         // Override from class ApiCall.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPart * const myPart_;
         //
         // The Part matching the API call.
   };

//------------------------------------------------------------------------------
// class MaterialApiCall
//
// Responsible for setting up an API call for a Material and cleaning up
// afterwards.
//
// ProbAssoc
//    ApiCall
//       MaterialApiCall
//------------------------------------------------------------------------------

class WitMaterialApiCall: public WitApiCall
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMaterialApiCall (
            WitRun *     theWitRun, 
            const char * partName,
            const char * theAttName);
         //
         // Sets up for an API call for a Material in theWitRun identified by
         // partName and for theAttName.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMaterialApiCall ();
         //
         // Cleans up after an API call for a Material in myWitRun ().

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void prepBa (
            const char * theAttName,
            bool         oldValue,
            WitBoolean   theValue,
            const char * otherAttr);
         //
         // Prep for buildNstn or buildAsap.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitMaterial *, myMaterial)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMaterialApiCall);

      virtual WitComponent * myComponent ();
      virtual WitDelComp *   myDelComp ();
         //
         // Override from class ApiCall.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMaterial * const myMaterial_;
         //
         // The Material matching the API call.
   };

//------------------------------------------------------------------------------
// class DemandApiCall
//
// Responsible for setting up an API call for a Demand and cleaning up
// afterwards.
//
// ProbAssoc
//    ApiCall
//       DemandApiCall
//------------------------------------------------------------------------------

class WitDemandApiCall: public WitApiCall
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDemandApiCall (
            WitRun *     theWitRun,
            const char * demandedPartName,
            const char * demandName);
         //
         // Sets up for an API call for a Demand in theWitRun identified by
         // demandedPartName and demandName.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitDemandApiCall ();
         //
         // Cleans up after an API call for a Demand in myWitRun ().

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitDemand *, myDemand)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDemandApiCall);

      virtual WitComponent * myComponent ();
      virtual WitDelComp *   myDelComp ();
         //
         // Override from class ApiCall.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDemand * const myDemand_;
         //
         // The Demand matching the API call.
   };

//------------------------------------------------------------------------------
// class OperationApiCall
//
// Responsible for setting up an API call for a Operation and cleaning up
// afterwards.
//
// ProbAssoc
//    ApiCall
//       OperationApiCall
//------------------------------------------------------------------------------

class WitOperationApiCall: public WitApiCall
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOperationApiCall (WitRun * theWitRun, const char * operationName);
         //
         // Sets up for an API call for a Operation in theWitRun identified by
         // operationName.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitOperationApiCall ();
         //
         // Cleans up after an API call for a Operation in myWitRun ().

      //------------------------------------------------------------------------
      // Attribute setting functions.
      //------------------------------------------------------------------------

      void setYieldRate   (const WitIVRealArg &);
      void setCycleTime34 (const WitIVRealArg &);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitOperation *, myOperation)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitOperationApiCall);

      virtual WitComponent * myComponent ();
      virtual WitDelComp *   myDelComp ();
         //
         // Override from class ApiCall.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitOperation * const myOperation_;
         //
         // The Operation matching the API call.
   };

//------------------------------------------------------------------------------
// class BomEntryApiCall
//
// Responsible for setting up an API call for a BomEntry and cleaning up
// afterwards.
//
// ProbAssoc
//    ApiCall
//       BomEntryApiCall
//------------------------------------------------------------------------------

class WitBomEntryApiCall: public WitApiCall
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBomEntryApiCall (
            WitRun *     theWitRun,
            const char * consumingOperationName,
            int          bomEntryIndex);
         //
         // Sets up for an API call for a BomEntry in theWitRun identified by
         // consumingOperationName and bomEntryIndex.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitBomEntryApiCall ();
         //
         // Cleans up after an API call for a BomEntry in myWitRun ().

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitBomEntry *, myBomEnt)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitBomEntryApiCall);

      virtual WitComponent * myComponent ();
      virtual WitDelComp *   myDelComp ();
      virtual WitBillEntry * myBillEntry ();
      virtual WitConsEntry * myConsEntry ();
         //
         // Override from class ApiCall.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBomEntry * myBomEnt_;
         //
         // The BomEntry matching the API call.
   };

//------------------------------------------------------------------------------
// class SubEntryApiCall
//
// Responsible for setting up an API call for a SubEntry and cleaning up
// afterwards.
//
// ProbAssoc
//    ApiCall
//       SubEntryApiCall
//------------------------------------------------------------------------------

class WitSubEntryApiCall: public WitApiCall
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSubEntryApiCall (
            WitRun *     theWitRun,
            const char * consumingOperationName,
            int          bomEntryIndex,
            int          subEntryIndex);
         //
         // Sets up for an API call for a SubEntry in theWitRun identified by
         // consumingOperationName, bomEntryIndex, and subEntryIndex.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSubEntryApiCall ();
         //
         // Cleans up after an API call for a SubEntry in myWitRun ().

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitSubEntry *, mySub)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitSubEntryApiCall);

      virtual WitComponent * myComponent ();
      virtual WitDelComp *   myDelComp ();
      virtual WitBillEntry * myBillEntry ();
      virtual WitConsEntry * myConsEntry ();
         //
         // Override from class ApiCall.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSubEntry * mySub_;
         //
         // The SubEntry matching the API call.
   };

//------------------------------------------------------------------------------
// class BopEntryApiCall
//
// Responsible for setting up an API call for a BopEntry and cleaning up
// afterwards.
//
// ProbAssoc
//    ApiCall
//       BopEntryApiCall
//------------------------------------------------------------------------------

class WitBopEntryApiCall: public WitApiCall
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBopEntryApiCall (
            WitRun *     theWitRun,
            const char * producingOperationName,
            int          bopEntryIndex);
         //
         // Sets up for an API call for a BopEntry in theWitRun identified by
         // producingOperationName and bopEntryIndex.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitBopEntryApiCall ();
         //
         // Cleans up after an API call for a BopEntry in myWitRun ().

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitBopEntry *, myBopEnt)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitBopEntryApiCall);

      virtual WitComponent * myComponent ();
      virtual WitDelComp *   myDelComp ();
      virtual WitBillEntry * myBillEntry ();
         //
         // Override from class ApiCall.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBopEntry * myBopEnt_;
         //
         // The BopEntry matching the API call.
   };

#endif
@


1.86
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.85
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d53 2
a54 151
{
public:

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

inline bool argsOK ()
{
witAssert (prepSetCalled_);

return argsOK_;
}

//------------------------------------------------------------------------
// prep<AttributeKind> functions.
//
// Each of these functions takes the appropriate API action in preparation
// for setting the value of a specific kind of attribute.
// Typically, a prep function has the following arguments:
// * theAttName (usually)
// * oldValue (sometimes)
// * theValue
//
// * Sets myInputID ()->myAttName_ to theAttName.
// * On return, sets myInputID ()->myAttName_ to NULL.
// * Verifies that theValue is a valid value for the attribute.
// * If theValue is valid:
//      Issues an attribute-setting info msg.
// * If theValue is not valid:
//      Issues a severe Msg (possibly severe-after-input).
// oldValue is the old value of the attribute, which is used in the
// attribute-setting msg.
//------------------------------------------------------------------------

void prepBool (
const char * theAttName,
bool         oldValue,
WitBoolean   theValue);
//
// Prep for a Bool attribute.

void prepInt (
const char * theAttName,
int          oldValue,
int          theValue);
//
// Prep for an int attribute.

void prepNonNegInt (
const char * theAttName,
int          oldValue,
int          theValue);
//
// Prep for a non-negative int attribute.

void prepImmPosInt (
const char * theAttName,
int          oldValue,
int          theValue);
//
// Prep for a positive int attribute.
// Violation causes immediate abort.

void prepRangedInt (
const char * theAttName,
int          oldValue,
int          theValue,
int          lb,
int          ub);
//
// Prep for an int attribute in the range [lb, ub].

void prepImmRangedInt (
const char * theAttName,
int          oldValue,
int          theValue,
int          lb,
int          ub);
//
// Prep for an int attribute in the range [lb, ub].
// Violation causes immediate abort.

void prepDouble (
const char * theAttName,
double       oldValue,
double       theValue);
//
// Prep for an unconstrained double attribute.

void prepNonNegDouble (
const char * theAttName,
double       oldValue,
double       theValue);
//
// Prep for a non-negative double attribute.

void prepLBDouble (
const char * theAttName,
double       oldValue,
double       theValue,
double       lb,
double       msgLB);
//
// Prep for a double attribute that must be >= lb.
// msgLB is the lower bound to be displayed in any error message.

void prepNonNegUBDouble (
const char * theAttName,
double       oldValue,
double       theValue,
double       ub,
double       msgUB);
//
// Prep for a double attribute that must be in the range [0, ub].
// msgUB is the upper bound to be displayed in any error message.

void prepPosDouble (
const char * theAttName,
double       oldValue,
double       theValue);
//
// Prep for a positive double attribute.

void prepBoolVec (
const char *       theAttName,
const WitBoolean * theValue);
//
// Prep for a bool vector attribute.

void prepIntVec (
const char * theAttName,
const int *  theValue);
//
// Prep for an unconstrained int vector attribute.

void prepDblVec (
const char *         theAttName,
const WitIVRealArg & theValue);
//
// Prep for an unconstrained double vector attribute.

void prepNonNegDblVec (
const char *         theAttName,
const WitIVRealArg & theValue);
//
// Prep for a non-negative double vector attribute.

void prepBuildAheadUB (const int * theValue);
//
// Prep for a buildAheadUB attribute.
d56 335
a390 186
void prepLeadTimeUB (const int * theValue);
//
// Prep for a leadTimeUB attribute.

void prepShipLateUB (const int * theValue);
//
// Prep for a shipLateUB attribute.

void prepString (
const char *      theAttName,
const WitString & oldValue,
const char *      theValue);
//
// Prep for a String attribute.

//------------------------------------------------------------------------
// Attribute setting functions.
//
// Each of these functions sets an attribute to the given value for API
// purposes. Generally, these functions are created for attributes of
// base classes, so they can be used multiple times.
// A fatal error is issued, if this ApiCall is not associated with a
// Component that has the attribute.
//------------------------------------------------------------------------

void setAppData        (void *);
void setSelForDel      (WitBoolean);
void setEarliestPeriod (int);
void setLatestPeriod   (int);
void setRoutingShare   (const WitIVRealArg &);
void setOffset         (const WitIVRealArg &);
void setObjectStage    (int);

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void getObjectStage (int * objectStage);
//
// apiGet of objectStage for a Node.

void setBoundSet (
WitBoundSet *        theBoundSet,
const WitIVRealArg & hardLBArg,
const WitIVRealArg & softLBArg,
const WitIVRealArg & hardUBArg);
//
// Sets theBoundSet to the args.
// Similar to a "prep" functions, but sets the value as well.

void reqNoPartsOrOpns (const char * theAttName);
//
// Issues a severe error if this WitRun contains a Part or Operations.
// theAttName is the name of the attribute being set.

void issueSetDblVecMsg (
const char *  theAttName,
const float * theFltCVec);
//
// Issues the message for setting a double vector attribute.
// theAttName is the name of the attribute.
// theFltCVec is the vector to which the attribute is to be set.

void issueSetDblVecMsg (
const char *   theAttName,
const double * theDblCVec);
//
// Same as above.

void issueBoundVecMsg (
WitBoundSet * theBoundSet,
const float * theFltCVec,
WitMsgFragID  theFragID);
//
// Issues the message for setting one of the vectors of theBoundSet to
// theFragID, where theFragID indicates a message fragment indicating
// the vector being set.

void issueBoundVecMsg (
WitBoundSet *  theBoundSet,
const double * theDblCVec,
WitMsgFragID   theFragID);
//
// Same as above.

protected:

//------------------------------------------------------------------------
// Protected member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitApiCall (WitRun * theWitRun);
//
// ProbAssoc <<< theWitRun->myProblem ().

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitApiCall ();

//------------------------------------------------------------------------
// Associated Component functions.
//
// Each of these functions returns the Component of the indicated class
// associated with this ApiCall, if any.
// Issues a fatal error if there is none.
// The base class implementation issues the error.
//------------------------------------------------------------------------

virtual WitComponent * myComponent () = 0;
virtual WitDelComp *   myDelComp   ();
virtual WitBillEntry * myBillEntry ();
virtual WitConsEntry * myConsEntry ();

//------------------------------------------------------------------------
// Other protected member functions.
//------------------------------------------------------------------------

inline WitInputID * myInputID ();
//
// Implemented in the .C file.

void forbidNullSetArg (const void * theArg);
//
// theArg: A pointer that was passed to WIT as an argument to a
//         API function for setting the value of a vector attribute.
// If theArg is NULL, this function issues a severe error.

void errorFound (WitPeriod thePer);
//
// Records the fact that an error has been found in thePer.

void errorFound ();
//
// Records the fact that an error has been found.

void prepSetAttr (const char * theAttName);
//
// To be called just prior to setting the value of any non-msg
// attribute.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

static WitProblem * theProblemFor (WitRun * theWitRun);
//
// Calls myApiMgr ()->startInnerFunc () and then returns
// theWitRun->myProblem ().

void checkPeriodIntVec (const int * theValue);
//
// Error checking for an int vector in the range [0, nPeriods - 1].

void mergeBoundVecs (
WitDblFlexVec &       mergedVec,
const WitDblFlexVec & oldVec,
const WitIVRealArg &  theIVRealArg);
//
// Sets mergedVec by merging oldVec and newCVec as BoundSet vectors.

void prepSetAttrStochMode (const char * theAttName);
//
// Called by prepSetAttr in stochastic mode.

noCopyCtorAssign (WitApiCall);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

bool argsOK_;
//
// true, iff no errors have been found in the arguments.

bool prepSetCalled_;
//
// In DEBUG mode, true, iff prepSetAttr has been called.
};
d404 2
a405 2
{
public:
d407 3
a409 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d411 3
a413 3
WitGlobalCompApiCall (WitRun * theWitRun);
//
// Sets up for an API call for the GlobalComp of theWitRun.
d415 3
a417 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d419 3
a421 3
virtual ~WitGlobalCompApiCall ();
//
// Cleans up after an API call for the GlobalComp of myWitRun ().
d423 1
a423 1
private:
d425 3
a427 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d429 1
a429 1
noCopyCtorAssign (WitGlobalCompApiCall);
d431 4
a434 4
virtual WitComponent * myComponent ();
//
// Override from class ApiCall.
};
d448 2
a449 6
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d451 44
a494 40
WitOptCompApiCall (WitRun * theWitRun);
//
// Sets up for an API call for the OptComp of theWitRun.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitOptCompApiCall ();
//
// Cleans up after an API call for the OptComp of myWitRun ().

//------------------------------------------------------------------------
// Other public member functions
//------------------------------------------------------------------------

void reqMultiObjMode (const char * theAttName);
//
// Issues a severe error if this WitRun is not in multi-obj mode.
// theAttName is the name of the global attribute being set or
// retrieved.

WitMultiObjMgr *   myMultiObjMgr    ();
WitObjective *     currentObjective ();
WitCpxParSpecMgr * myCpxParSpecMgr  ();
//
// Access wrappers.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitOptCompApiCall);

virtual WitComponent * myComponent ();
//
// Override from class ApiCall.
};
d508 2
a509 2
{
public:
d511 3
a513 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d515 3
a517 3
WitStochApiCall (WitRun * theWitRun);
//
// Sets up for an API call for stochastic implosion.
d519 3
a521 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d523 3
a525 3
virtual ~WitStochApiCall ();
//
// Cleans up after an API call for stochastic implosion.
d527 3
a529 3
//------------------------------------------------------------------------
// Attribute setting functions.
//------------------------------------------------------------------------
d531 1
a531 1
void setPeriodStage (const int *);
d533 1
a533 1
private:
d535 3
a537 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d539 1
a539 1
noCopyCtorAssign (WitStochApiCall);
d541 4
a544 4
virtual WitComponent * myComponent ();
//
// Override from class ApiCall.
};
d558 2
a559 2
{
public:
d561 3
a563 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d565 4
a568 4
WitPartApiCall (WitRun * theWitRun, const char * partName);
//
// Sets up for an API call for a Part in theWitRun identified by
// partName.
d570 3
a572 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d574 3
a576 3
virtual ~WitPartApiCall ();
//
// Cleans up after an API call for a Part in myWitRun ().
d578 3
a580 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d582 1
a582 1
accessFunc (WitPart *, myPart)
d584 1
a584 1
private:
d586 3
a588 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d590 1
a590 1
noCopyCtorAssign (WitPartApiCall);
d592 4
a595 4
virtual WitComponent * myComponent ();
virtual WitDelComp *   myDelComp ();
//
// Override from class ApiCall.
d597 3
a599 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d601 4
a604 4
WitPart * const myPart_;
//
// The Part matching the API call.
};
d618 2
a619 42
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitMaterialApiCall (
WitRun *     theWitRun,
const char * partName,
const char * theAttName);
//
// Sets up for an API call for a Material in theWitRun identified by
// partName and for theAttName.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitMaterialApiCall ();
//
// Cleans up after an API call for a Material in myWitRun ().

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void prepBa (
const char * theAttName,
bool         oldValue,
WitBoolean   theValue,
const char * otherAttr);
//
// Prep for buildNstn or buildAsap.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitMaterial *, myMaterial)

private:
d621 59
a679 19
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitMaterialApiCall);

virtual WitComponent * myComponent ();
virtual WitDelComp *   myDelComp ();
//
// Override from class ApiCall.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitMaterial * const myMaterial_;
//
// The Material matching the API call.
};
d693 2
a694 41
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitDemandApiCall (
WitRun *     theWitRun,
const char * demandedPartName,
const char * demandName);
//
// Sets up for an API call for a Demand in theWitRun identified by
// demandedPartName and demandName.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitDemandApiCall ();
//
// Cleans up after an API call for a Demand in myWitRun ().

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitDemand *, myDemand)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitDemandApiCall);

virtual WitComponent * myComponent ();
virtual WitDelComp *   myDelComp ();
//
// Override from class ApiCall.
d696 47
a742 8
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitDemand * const myDemand_;
//
// The Demand matching the API call.
};
d756 2
a757 2
{
public:
d759 3
a761 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d763 4
a766 4
WitOperationApiCall (WitRun * theWitRun, const char * operationName);
//
// Sets up for an API call for a Operation in theWitRun identified by
// operationName.
d768 3
a770 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d772 3
a774 3
virtual ~WitOperationApiCall ();
//
// Cleans up after an API call for a Operation in myWitRun ().
d776 3
a778 3
//------------------------------------------------------------------------
// Attribute setting functions.
//------------------------------------------------------------------------
d780 2
a781 2
void setYieldRate   (const WitIVRealArg &);
void setCycleTime34 (const WitIVRealArg &);
d783 3
a785 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d787 1
a787 1
accessFunc (WitOperation *, myOperation)
d789 1
a789 1
private:
d791 3
a793 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d795 1
a795 1
noCopyCtorAssign (WitOperationApiCall);
d797 4
a800 4
virtual WitComponent * myComponent ();
virtual WitDelComp *   myDelComp ();
//
// Override from class ApiCall.
d802 3
a804 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d806 4
a809 4
WitOperation * const myOperation_;
//
// The Operation matching the API call.
};
d823 2
a824 26
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitBomEntryApiCall (
WitRun *     theWitRun,
const char * consumingOperationName,
int          bomEntryIndex);
//
// Sets up for an API call for a BomEntry in theWitRun identified by
// consumingOperationName and bomEntryIndex.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitBomEntryApiCall ();
//
// Cleans up after an API call for a BomEntry in myWitRun ().

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d826 49
a874 25
accessFunc (WitBomEntry *, myBomEnt)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitBomEntryApiCall);

virtual WitComponent * myComponent ();
virtual WitDelComp *   myDelComp ();
virtual WitBillEntry * myBillEntry ();
virtual WitConsEntry * myConsEntry ();
//
// Override from class ApiCall.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitBomEntry * myBomEnt_;
//
// The BomEntry matching the API call.
};
d888 2
a889 19
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitSubEntryApiCall (
WitRun *     theWitRun,
const char * consumingOperationName,
int          bomEntryIndex,
int          subEntryIndex);
//
// Sets up for an API call for a SubEntry in theWitRun identified by
// consumingOperationName, bomEntryIndex, and subEntryIndex.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d891 50
a940 33
virtual ~WitSubEntryApiCall ();
//
// Cleans up after an API call for a SubEntry in myWitRun ().

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitSubEntry *, mySub)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitSubEntryApiCall);

virtual WitComponent * myComponent ();
virtual WitDelComp *   myDelComp ();
virtual WitBillEntry * myBillEntry ();
virtual WitConsEntry * myConsEntry ();
//
// Override from class ApiCall.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitSubEntry * mySub_;
//
// The SubEntry matching the API call.
};
d954 2
a955 14
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitBopEntryApiCall (
WitRun *     theWitRun,
const char * producingOperationName,
int          bopEntryIndex);
//
// Sets up for an API call for a BopEntry in theWitRun identified by
// producingOperationName and bopEntryIndex.
d957 48
a1004 36
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitBopEntryApiCall ();
//
// Cleans up after an API call for a BopEntry in myWitRun ().

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitBopEntry *, myBopEnt)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitBopEntryApiCall);

virtual WitComponent * myComponent ();
virtual WitDelComp *   myDelComp ();
virtual WitBillEntry * myBillEntry ();
//
// Override from class ApiCall.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitBopEntry * myBopEnt_;
//
// The BopEntry matching the API call.
};
@


1.84
log
@CPLEX Param Specs.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d53 151
a203 2
   {
   public:
d205 186
a390 335
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline bool argsOK ()
         {
         witAssert (prepSetCalled_);

         return argsOK_;
         }

      //------------------------------------------------------------------------
      // prep<AttributeKind> functions.
      //
      // Each of these functions takes the appropriate API action in preparation
      // for setting the value of a specific kind of attribute.
      // Typically, a prep function has the following arguments:
      // * theAttName (usually)
      // * oldValue (sometimes)
      // * theValue
      //
      // * Sets myInputID ()->myAttName_ to theAttName.
      // * On return, sets myInputID ()->myAttName_ to NULL.
      // * Verifies that theValue is a valid value for the attribute.
      // * If theValue is valid:
      //      Issues an attribute-setting info msg.
      // * If theValue is not valid:
      //      Issues a severe Msg (possibly severe-after-input).
      // oldValue is the old value of the attribute, which is used in the
      // attribute-setting msg.
      //------------------------------------------------------------------------

      void prepBool (
            const char * theAttName,
            bool         oldValue,
            WitBoolean   theValue);
         //
         // Prep for a Bool attribute.

      void prepInt (
            const char * theAttName,
            int          oldValue,
            int          theValue);
         //
         // Prep for an int attribute.

      void prepNonNegInt (
            const char * theAttName,
            int          oldValue,
            int          theValue);
         //
         // Prep for a non-negative int attribute.

      void prepImmPosInt (
            const char * theAttName,
            int          oldValue,
            int          theValue);
         //
         // Prep for a positive int attribute.
         // Violation causes immediate abort.

      void prepRangedInt (
            const char * theAttName,
            int          oldValue,
            int          theValue,
            int          lb,
            int          ub);
         //
         // Prep for an int attribute in the range [lb, ub].

      void prepImmRangedInt (
            const char * theAttName,
            int          oldValue,
            int          theValue,
            int          lb,
            int          ub);
         //
         // Prep for an int attribute in the range [lb, ub].
         // Violation causes immediate abort.

      void prepDouble (
            const char * theAttName,
            double       oldValue,
            double       theValue);
         //
         // Prep for an unconstrained double attribute.

      void prepNonNegDouble (
            const char * theAttName,
            double       oldValue,
            double       theValue);
         //
         // Prep for a non-negative double attribute.

      void prepLBDouble (
            const char * theAttName, 
            double       oldValue, 
            double       theValue,
            double       lb,
            double       msgLB);
         //
         // Prep for a double attribute that must be >= lb.
         // msgLB is the lower bound to be displayed in any error message.

      void prepNonNegUBDouble (
            const char * theAttName, 
            double       oldValue, 
            double       theValue,
            double       ub,
            double       msgUB);
         //
         // Prep for a double attribute that must be in the range [0, ub].
         // msgUB is the upper bound to be displayed in any error message.

      void prepPosDouble (
            const char * theAttName,
            double       oldValue,
            double       theValue);
         //
         // Prep for a positive double attribute.

      void prepBoolVec (
            const char *       theAttName,
            const WitBoolean * theValue);
         //
         // Prep for a bool vector attribute.

      void prepIntVec (
            const char * theAttName,
            const int *  theValue);
         //
         // Prep for an unconstrained int vector attribute.

      void prepDblVec (
            const char *         theAttName,
            const WitIVRealArg & theValue);
         //
         // Prep for an unconstrained double vector attribute.

      void prepNonNegDblVec (
            const char *         theAttName,
            const WitIVRealArg & theValue);
         //
         // Prep for a non-negative double vector attribute.

      void prepBuildAheadUB (const int * theValue);
         //
         // Prep for a buildAheadUB attribute.

      void prepLeadTimeUB (const int * theValue);
         //
         // Prep for a leadTimeUB attribute.

      void prepShipLateUB (const int * theValue);
         //
         // Prep for a shipLateUB attribute.

      void prepString (
            const char *      theAttName,
            const WitString & oldValue,
            const char *      theValue);
         //
         // Prep for a String attribute.

      //------------------------------------------------------------------------
      // Attribute setting functions.
      //
      // Each of these functions sets an attribute to the given value for API
      // purposes. Generally, these functions are created for attributes of 
      // base classes, so they can be used multiple times.
      // A fatal error is issued, if this ApiCall is not associated with a
      // Component that has the attribute.
      //------------------------------------------------------------------------

      void setAppData        (void *);
      void setSelForDel      (WitBoolean);
      void setEarliestPeriod (int);
      void setLatestPeriod   (int);
      void setRoutingShare   (const WitIVRealArg &);
      void setOffset         (const WitIVRealArg &);
      void setObjectStage    (int);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void getObjectStage (int * objectStage);
         //
         // apiGet of objectStage for a Node.

      void setBoundSet (
            WitBoundSet *        theBoundSet,
            const WitIVRealArg & hardLBArg,
            const WitIVRealArg & softLBArg,
            const WitIVRealArg & hardUBArg);
         //
         // Sets theBoundSet to the args.
         // Similar to a "prep" functions, but sets the value as well.

      void reqNoPartsOrOpns (const char * theAttName);
         //
         // Issues a severe error if this WitRun contains a Part or Operations.
         // theAttName is the name of the attribute being set.

      void issueSetDblVecMsg (
            const char *  theAttName,
            const float * theFltCVec);
         //
         // Issues the message for setting a double vector attribute.
         // theAttName is the name of the attribute.
         // theFltCVec is the vector to which the attribute is to be set.

      void issueSetDblVecMsg (
            const char *   theAttName,
            const double * theDblCVec);
         //
         // Same as above.

      void issueBoundVecMsg (
            WitBoundSet * theBoundSet,
            const float * theFltCVec,
            WitMsgFragID  theFragID);
         //
         // Issues the message for setting one of the vectors of theBoundSet to
         // theFragID, where theFragID indicates a message fragment indicating
         // the vector being set.

      void issueBoundVecMsg (
            WitBoundSet *  theBoundSet,
            const double * theDblCVec,
            WitMsgFragID   theFragID);
         //
         // Same as above.

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitApiCall (WitRun * theWitRun);
         //
         // ProbAssoc <<< theWitRun->myProblem ().

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitApiCall ();

      //------------------------------------------------------------------------
      // Associated Component functions.
      //
      // Each of these functions returns the Component of the indicated class
      // associated with this ApiCall, if any.
      // Issues a fatal error if there is none.
      // The base class implementation issues the error.
      //------------------------------------------------------------------------

      virtual WitComponent * myComponent () = 0;
      virtual WitDelComp *   myDelComp   ();
      virtual WitBillEntry * myBillEntry ();
      virtual WitConsEntry * myConsEntry ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      inline WitInputID * myInputID ();
         //
         // Implemented in the .C file.

      void forbidNullSetArg (const void * theArg);
         //
         // theArg: A pointer that was passed to WIT as an argument to a
         //         API function for setting the value of a vector attribute.
         // If theArg is NULL, this function issues a severe error.

      void errorFound (WitPeriod thePer);
         //
         // Records the fact that an error has been found in thePer.

      void errorFound ();
         //
         // Records the fact that an error has been found.

      void prepSetAttr (const char * theAttName);
         //
         // To be called just prior to setting the value of any non-msg
         // attribute.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      static WitProblem * theProblemFor (WitRun * theWitRun);
         //
         // Calls myApiMgr ()->startInnerFunc () and then returns
         // theWitRun->myProblem ().

      void checkPeriodIntVec (const int * theValue);
         //
         // Error checking for an int vector in the range [0, nPeriods - 1].

      void mergeBoundVecs (
            WitDblFlexVec &       mergedVec,
            const WitDblFlexVec & oldVec,
            const WitIVRealArg &  theIVRealArg);
         //
         // Sets mergedVec by merging oldVec and newCVec as BoundSet vectors.

      void prepSetAttrStochMode (const char * theAttName);
         //
         // Called by prepSetAttr in stochastic mode.

      noCopyCtorAssign (WitApiCall);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      bool argsOK_;
         //
         // true, iff no errors have been found in the arguments.

      bool prepSetCalled_;
         //
         // In DEBUG mode, true, iff prepSetAttr has been called.
   };
d404 2
a405 2
   {
   public:
d407 3
a409 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d411 3
a413 3
      WitGlobalCompApiCall (WitRun * theWitRun);
         //
         // Sets up for an API call for the GlobalComp of theWitRun.
d415 3
a417 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d419 3
a421 3
      virtual ~WitGlobalCompApiCall ();
         //
         // Cleans up after an API call for the GlobalComp of myWitRun ().
d423 1
a423 1
   private:
d425 3
a427 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d429 1
a429 1
      noCopyCtorAssign (WitGlobalCompApiCall);
d431 4
a434 4
      virtual WitComponent * myComponent ();
         //
         // Override from class ApiCall.
   };
d448 6
a453 2
   {
   public:
d455 40
a494 44
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOptCompApiCall (WitRun * theWitRun);
         //
         // Sets up for an API call for the OptComp of theWitRun.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitOptCompApiCall ();
         //
         // Cleans up after an API call for the OptComp of myWitRun ().

      //------------------------------------------------------------------------
      // Other public member functions
      //------------------------------------------------------------------------

      void reqMultiObjMode (const char * theAttName);
         //
         // Issues a severe error if this WitRun is not in multi-obj mode.
         // theAttName is the name of the global attribute being set or
         // retrieved.

      WitMultiObjMgr *   myMultiObjMgr    ();
      WitObjective *     currentObjective ();
      WitCpxParSpecMgr * myCpxParSpecMgr  ();
         //
         // Access wrappers.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitOptCompApiCall);

      virtual WitComponent * myComponent ();
         //
         // Override from class ApiCall.
   };
d508 2
a509 2
   {
   public:
d511 3
a513 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d515 3
a517 3
      WitStochApiCall (WitRun * theWitRun);
         //
         // Sets up for an API call for stochastic implosion.
d519 3
a521 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d523 3
a525 3
      virtual ~WitStochApiCall ();
         //
         // Cleans up after an API call for stochastic implosion.
d527 3
a529 3
      //------------------------------------------------------------------------
      // Attribute setting functions.
      //------------------------------------------------------------------------
d531 1
a531 1
      void setPeriodStage (const int *);
d533 1
a533 1
   private:
d535 3
a537 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d539 1
a539 1
      noCopyCtorAssign (WitStochApiCall);
d541 4
a544 4
      virtual WitComponent * myComponent ();
         //
         // Override from class ApiCall.
   };
d558 2
a559 2
   {
   public:
d561 3
a563 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d565 4
a568 4
      WitPartApiCall (WitRun * theWitRun, const char * partName);
         //
         // Sets up for an API call for a Part in theWitRun identified by
         // partName.
d570 3
a572 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d574 3
a576 3
      virtual ~WitPartApiCall ();
         //
         // Cleans up after an API call for a Part in myWitRun ().
d578 3
a580 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d582 1
a582 1
      accessFunc (WitPart *, myPart)
d584 1
a584 1
   private:
d586 3
a588 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d590 1
a590 1
      noCopyCtorAssign (WitPartApiCall);
d592 4
a595 4
      virtual WitComponent * myComponent ();
      virtual WitDelComp *   myDelComp ();
         //
         // Override from class ApiCall.
d597 3
a599 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d601 4
a604 4
      WitPart * const myPart_;
         //
         // The Part matching the API call.
   };
d618 42
a659 2
   {
   public:
d661 19
a679 59
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMaterialApiCall (
            WitRun *     theWitRun, 
            const char * partName,
            const char * theAttName);
         //
         // Sets up for an API call for a Material in theWitRun identified by
         // partName and for theAttName.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMaterialApiCall ();
         //
         // Cleans up after an API call for a Material in myWitRun ().

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void prepBa (
            const char * theAttName,
            bool         oldValue,
            WitBoolean   theValue,
            const char * otherAttr);
         //
         // Prep for buildNstn or buildAsap.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitMaterial *, myMaterial)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMaterialApiCall);

      virtual WitComponent * myComponent ();
      virtual WitDelComp *   myDelComp ();
         //
         // Override from class ApiCall.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMaterial * const myMaterial_;
         //
         // The Material matching the API call.
   };
d693 41
a733 2
   {
   public:
d735 8
a742 47
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDemandApiCall (
            WitRun *     theWitRun,
            const char * demandedPartName,
            const char * demandName);
         //
         // Sets up for an API call for a Demand in theWitRun identified by
         // demandedPartName and demandName.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitDemandApiCall ();
         //
         // Cleans up after an API call for a Demand in myWitRun ().

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitDemand *, myDemand)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDemandApiCall);

      virtual WitComponent * myComponent ();
      virtual WitDelComp *   myDelComp ();
         //
         // Override from class ApiCall.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDemand * const myDemand_;
         //
         // The Demand matching the API call.
   };
d756 2
a757 2
   {
   public:
d759 3
a761 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d763 4
a766 4
      WitOperationApiCall (WitRun * theWitRun, const char * operationName);
         //
         // Sets up for an API call for a Operation in theWitRun identified by
         // operationName.
d768 3
a770 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d772 3
a774 3
      virtual ~WitOperationApiCall ();
         //
         // Cleans up after an API call for a Operation in myWitRun ().
d776 3
a778 3
      //------------------------------------------------------------------------
      // Attribute setting functions.
      //------------------------------------------------------------------------
d780 2
a781 2
      void setYieldRate   (const WitIVRealArg &);
      void setCycleTime34 (const WitIVRealArg &);
d783 3
a785 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d787 1
a787 1
      accessFunc (WitOperation *, myOperation)
d789 1
a789 1
   private:
d791 3
a793 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d795 1
a795 1
      noCopyCtorAssign (WitOperationApiCall);
d797 4
a800 4
      virtual WitComponent * myComponent ();
      virtual WitDelComp *   myDelComp ();
         //
         // Override from class ApiCall.
d802 3
a804 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d806 4
a809 4
      WitOperation * const myOperation_;
         //
         // The Operation matching the API call.
   };
d823 26
a848 2
   {
   public:
d850 25
a874 49
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBomEntryApiCall (
            WitRun *     theWitRun,
            const char * consumingOperationName,
            int          bomEntryIndex);
         //
         // Sets up for an API call for a BomEntry in theWitRun identified by
         // consumingOperationName and bomEntryIndex.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitBomEntryApiCall ();
         //
         // Cleans up after an API call for a BomEntry in myWitRun ().

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitBomEntry *, myBomEnt)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitBomEntryApiCall);

      virtual WitComponent * myComponent ();
      virtual WitDelComp *   myDelComp ();
      virtual WitBillEntry * myBillEntry ();
      virtual WitConsEntry * myConsEntry ();
         //
         // Override from class ApiCall.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBomEntry * myBomEnt_;
         //
         // The BomEntry matching the API call.
   };
d888 19
a906 2
   {
   public:
d908 33
a940 50
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSubEntryApiCall (
            WitRun *     theWitRun,
            const char * consumingOperationName,
            int          bomEntryIndex,
            int          subEntryIndex);
         //
         // Sets up for an API call for a SubEntry in theWitRun identified by
         // consumingOperationName, bomEntryIndex, and subEntryIndex.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSubEntryApiCall ();
         //
         // Cleans up after an API call for a SubEntry in myWitRun ().

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitSubEntry *, mySub)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitSubEntryApiCall);

      virtual WitComponent * myComponent ();
      virtual WitDelComp *   myDelComp ();
      virtual WitBillEntry * myBillEntry ();
      virtual WitConsEntry * myConsEntry ();
         //
         // Override from class ApiCall.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSubEntry * mySub_;
         //
         // The SubEntry matching the API call.
   };
d954 14
a967 2
   {
   public:
d969 36
a1004 48
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBopEntryApiCall (
            WitRun *     theWitRun,
            const char * producingOperationName,
            int          bopEntryIndex);
         //
         // Sets up for an API call for a BopEntry in theWitRun identified by
         // producingOperationName and bopEntryIndex.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitBopEntryApiCall ();
         //
         // Cleans up after an API call for a BopEntry in myWitRun ().

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitBopEntry *, myBopEnt)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitBopEntryApiCall);

      virtual WitComponent * myComponent ();
      virtual WitDelComp *   myDelComp ();
      virtual WitBillEntry * myBillEntry ();
         //
         // Override from class ApiCall.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBopEntry * myBopEnt_;
         //
         // The BopEntry matching the API call.
   };
@


1.83
log
@Bounded Lead Times
@
text
@d95 7
d477 3
a479 2
      WitMultiObjMgr * myMultiObjMgr    ();
      WitObjective *   currentObjective ();
@


1.82
log
@Multi-Obj Mode
@
text
@d198 4
@


1.81
log
@Multi-Objective Mode.
@
text
@d153 10
a224 1
      void setFalloutRate    (double);
d460 6
@


1.80
log
@Multi-objective mode.
@
text
@d451 2
a452 1
      WitMultiObjMgr * myMultiObjMgr ();
d454 1
a454 1
         // Access wrapper.
@


1.79
log
@Removed many conversions of string constant to char *.
@
text
@d447 8
@


1.78
log
@Stochastic Implosion
@
text
@d73 1
a73 1
      // * theAttr (usually)
d77 2
a78 2
      // * Sets myInputID ()->myAttr_ to theAttr.
      // * On return, sets myInputID ()->myAttr_ to NULL.
d88 4
a91 1
      void prepBool (WitAttr theAttr, bool oldValue, WitBoolean theValue);
d95 4
a98 1
      void prepNonNegInt (WitAttr theAttr, int oldValue, int theValue);
d102 4
a105 1
      void prepImmPosInt (WitAttr theAttr, int oldValue, int theValue);
d111 1
a111 1
            WitAttr      theAttr,
d120 1
a120 1
            WitAttr      theAttr,
d129 4
a132 1
      void prepDouble (WitAttr theAttr, double oldValue, double theValue);
d136 4
a139 1
      void prepNonNegDouble (WitAttr theAttr, double oldValue, double theValue);
d144 5
a148 5
            WitAttr theAttr, 
            double  oldValue, 
            double  theValue,
            double  lb,
            double  msgLB);
d153 4
a156 1
      void prepPosDouble (WitAttr theAttr, double oldValue, double theValue);
d160 3
a162 1
      void prepBoolVec (WitAttr theAttr, const WitBoolean * theValue);
d166 3
a168 1
      void prepIntVec (WitAttr theAttr, const int * theValue);
d172 3
a174 1
      void prepDblVec (WitAttr theAttr, const WitIVRealArg & theValue);
d178 3
a180 1
      void prepNonNegDblVec (WitAttr theAttr, const WitIVRealArg & theValue);
d193 1
a193 1
            WitAttr           theAttr,
d235 1
a235 1
      void reqNoPartsOrOpns (WitAttr theAttr);
d238 1
a238 1
         // theAttr is the attribute being set.
d240 3
a242 1
      void issueSetDblVecMsg (WitAttr theAttr, const float *  theFltCVec);
d245 1
a245 1
         // theAttr is the name of the attribute.
d248 3
a250 1
      void issueSetDblVecMsg (WitAttr theAttr, const double * theDblCVec);
d326 1
a326 1
      void prepSetAttr (WitAttr theAttr);
d353 1
a353 1
      void prepSetAttrStochMode (WitAttr theAttr);
d592 1
a592 1
            WitAttr      theAttr);
d595 1
a595 1
         // partName and for theAttr.
d610 4
a613 4
            WitAttr    theAttr,
            bool       oldValue,
            WitBoolean theValue,
            WitAttr    otherAttr);
@


1.77
log
@Stochastic Implosion
@
text
@d461 6
@


1.76
log
@Stochastic Implosion
@
text
@d190 1
a190 1
      void setStageIndex     (int);
d196 1
a196 1
      void getStageIndex (int * stageIndex);
d198 1
a198 1
         // apiGet of stageIndex for a Node.
@


1.75
log
@Stochastic Implosion
@
text
@d196 4
@


1.74
log
@Stochastic Implosion
@
text
@d221 3
a223 3
            const WitBoundSet * theBoundSet,
            const float *       theFltCVec,
            WitMsgFragID        theFragID);
d230 3
a232 3
            const WitBoundSet * theBoundSet,
            const double *      theDblCVec,
            WitMsgFragID        theFragID);
@


1.73
log
@Stochastic Implosion
@
text
@a502 6
      // Other public member functions.
      //------------------------------------------------------------------------

      void prepSetPartSupplyVol (const WitIVRealArg & theValue);

      //------------------------------------------------------------------------
a640 6
      // Other public member functions.
      //------------------------------------------------------------------------

      void prepSetDemandDemandVol (const WitIVRealArg & theValue);

      //------------------------------------------------------------------------
@


1.72
log
@Stochastic Implosion
@
text
@d190 1
a190 1
      void setStageNo        (int);
@


1.71
log
@Stochastic Implosion
@
text
@d190 1
@


1.70
log
@Stochastic Implosion
@
text
@a234 5
      void prepGetStochSolnAttr (WitAttr theAttr);
         //
         // Takes action appropriate just before getting a stochastic solution
         // attribute identified by theAttr.

@


1.69
log
@Stochastic Implosion
@
text
@d507 6
d651 6
@


1.68
log
@Stochastic Implosion
@
text
@a234 5
      void prepStochSolnModeAttr ();
         //
         // Takes action appropriate just before setting an attribute that is
         // allowed to be set in stochastic solution mode.

a339 5

      bool stochSolnModeOK_;
         //
         // True, iff the API function sets an attribute that is allowed to be
         // set in stochastic solution mode.
@


1.67
log
@Stochastic Implosion
@
text
@a239 4
      void prepGetStochAttr ();
         //
         // Takes action appropriate just before getting a stochastic attribute.

@


1.66
log
@Stochastic Implosion
@
text
@a234 5
      void prepStochModeAttr ();
         //
         // Takes action appropriate just before setting an attribute that is
         // allowed to be set in stochastic mode.

a349 5
      bool stochModeOK_;
         //
         // True, iff the API function sets an attribute that is allowed to be
         // set in stochastic mode.

@


1.65
log
@Stochastic Implosion.
@
text
@d235 1
a235 1
      void prepStochDataModeAttr ();
d238 1
a238 1
         // allowed to be set in stochastic data mode.
d339 1
a339 1
         // Called by prepSetAttr in stochastic data mode.
d355 1
a355 1
      bool stochDataModeOK_;
d358 1
a358 1
         // set in stochastic data mode.
@


1.64
log
@Stochastic Implosion
@
text
@d245 1
a245 1
      void issueScenMsg ();
d247 6
a252 2
         // In stochastic implosion mode, issues a Msg indicating that attribute
         // value is specific to the current scenario.
@


1.63
log
@Stochastic Implosion
@
text
@d235 1
a235 1
      void prepStochAttr ();
d237 2
a238 1
         // Takes action appropriate just before setting a stochastic attribute.
@


1.62
log
@Stochastic Implosion
@
text
@a238 5
      void prepStochDataModeAttr ();
         //
         // Takes action appropriate just before setting an attribute that is
         // allowed to be set in stochastic data mode.

@


1.61
log
@Stochastic Implosion
@
text
@d244 5
d359 5
@


1.60
log
@Stochastic Implosion
@
text
@d235 5
a239 1
      void prepSetStochDataModeAttr ();
@


1.59
log
@Stochastic Implosion
@
text
@d235 1
a235 1
      void setsStochModeAttr ();
d237 2
a238 2
         // Tells this ApiCall that the corresponding API function sets an
         // attribute that is allowed to be set in stochastic implosion mode.
d242 1
a242 1
         // Instochastic implosion mode, issues a Msg indicating that attribute
d346 1
a346 1
      bool stochModeSet_;
d349 1
a349 1
         // set in stochastic implosion mode.
@


1.58
log
@Stochastic Implosion
@
text
@d328 4
@


1.57
log
@Stochastic Implosion
@
text
@a466 6
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      WitStochModeMgr * myStochModeMgr ();

@


1.56
log
@Stochastic Implosion
@
text
@d471 1
a471 1
      WitStochProb * myStochProb ();
@


1.55
log
@Stochastic Implosion
@
text
@d235 1
a235 1
      void setsStochAttr ();
d237 2
a238 2
         // Tells this ApiCall that the corresponding API function sets a
         // stochastic attribute.
d342 1
a342 1
      bool funcSetsStochAttr_;
d344 2
a345 1
         // True, iff the API function sets a stochastic attribute.
@


1.54
log
@Stochastic Implosion
@
text
@d240 5
@


1.53
log
@Stochastic Implosion
@
text
@d465 1
a465 1
      WitSIP * mySIP ();
@


1.52
log
@Stochastic Implosion
@
text
@d21 1
d42 1
d431 50
@


1.51
log
@Stochastic Implosion.
@
text
@d108 10
@


1.50
log
@Stochastic implosion.
@
text
@d223 1
a223 1
      void allowStochAct ();
d225 2
a226 1
         // Sets stochActAllowed_ to true.
d325 1
a325 1
      bool stochActAllowed_;
d327 1
a327 2
         // True, iff the API function sets an attribute that is allowed to be
         // set while stochastic implosion is active.
@


1.49
log
@Stochastic implosion.
@
text
@d223 1
a223 1
      void attrIsDiffable ();
d225 1
a225 1
         // Sets diffableAttr to true.
d324 1
a324 1
      bool diffableAttr_;
d326 2
a327 2
         // True, iff the API function is one that sets an attribute that is
         // differentiable for stochastic implosion.
@


1.48
log
@Stochastic Implosion.
@
text
@d35 1
a35 1
// Responsible for setting up an API call and cleaning up afterwards.
d60 1
a60 1
         witAssert (prepCalled_);
d223 4
d283 1
a283 1
      void callingPrep (WitAttr theAttr);
d285 2
a286 1
         // Indicates that a prep function is being called with theAttr.
d320 5
a324 1
      bool prepCalled_;
d326 2
a327 1
         // In DEBUG mode, true, iff one of the "prep" has been called.
@


1.47
log
@External opt implosion.
@
text
@a54 14
      // Constructor functions.
      //------------------------------------------------------------------------

      WitApiCall (WitRun * theWitRun);
         //
         // ProbAssoc <<< theWitRun->myProblem ().

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitApiCall ();

      //------------------------------------------------------------------------
d68 1
a68 1
      // Each of these functions takes the approriate API action in preparation
d230 14
d252 2
a253 2
      virtual WitComponent * myComponent ();
      virtual WitDelComp *   myDelComp ();
@


1.46
log
@Heuristic search increment.
@
text
@d289 5
@


1.45
log
@Updated the copyright date on all source files.
@
text
@d181 1
a181 1
      // A fatal error is issued, if this ApiCall is not associated with 
@


1.44
log
@Fixed a bug that occurred when witCopyData issued a severe error.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.43
log
@[exceptions]
@
text
@a75 2
         ifDebug (argsChecked_ = true);

a312 4

      bool argsChecked_;
         //
         // In DEBUG mode, true, iff argsOK () has been called.
@


1.42
log
@Allowed obj1 attributes to be set and retrieved when objChoice != 1.
Allowed objChoice to be set when parts or operations exist.
@
text
@d91 2
a92 2
      // * Sets myInputId ()->myAttr_ to theAttr.
      // * On return, sets myInputId ()->myAttr_ to NULL.
d263 1
a263 1
      inline WitInputId * myInputId ();
@


1.41
log
@Vector PropRt.
@
text
@a161 6
      void prepObj1Vec (WitAttr theAttr, const WitIVRealArg & theValue);
         //
         // Prep for a objective #1 vector attribute.
         // (These attributes are always non-negative real vectors.)
         // Incurs postprocAlt.

@


1.40
log
@Initial work on [vector propRouting attribute].
@
text
@d154 1
a154 1
      void prepDblVec (WitAttr theAttr, const WitInVecRA & theValue);
d158 1
a158 1
      void prepNonNegDblVec (WitAttr theAttr, const WitInVecRA & theValue);
d162 1
a162 1
      void prepObj1Vec (WitAttr theAttr, const WitInVecRA & theValue);
d197 2
a198 2
      void setRoutingShare   (const WitInVecRA &);
      void setOffset         (const WitInVecRA &);
d206 4
a209 4
            WitBoundSet *      theBoundSet,
            const WitInVecRA & hardLBArg,
            const WitInVecRA & softLBArg,
            const WitInVecRA & hardUBArg);
d304 1
a304 1
            const WitInVecRA &    theInVecRA);
d649 2
a650 2
      void setYieldRate   (const WitInVecRA &);
      void setCycleTime34 (const WitInVecRA &);
@


1.39
log
@Double Precision.
@
text
@d146 4
@


1.38
log
@Double Precision.
@
text
@d150 1
a150 1
      void prepDblVec (WitAttr theAttr, const float * theValue);
a152 14

      void prepNonNegDblVec (WitAttr theAttr, const float * theValue);
         //
         // Prep for a non-negative double vector attribute.

      void prepObj1Vec (WitAttr theAttr, const float * theValue);
         //
         // Prep for a objective #1 vector attribute.
         // (These attributes are always non-negative float vectors.)
         // Incurs postprocAlt.

      void prepDblVec (WitAttr theAttr, const WitInVecRA & theValue);
         //
         // Prep for an unconstrained float vector attribute.
@


1.37
log
@Double Precision.
@
text
@d229 26
a300 6
      void issueSetDblVecMsg (WitAttr theAttr, const WitInVecRA & theValue);
         //
         // Issues the message for setting a double vector attribute.
         // theAttr is the name of the attribute.
         // theValue is the new value.

a316 9

      void issueBoundVecMsg (
            const WitBoundSet * theBoundSet,
            const WitInVecRA &  theInVecRA,
            WitMsgFragID        theFragID);
         //
         // Issues the message for setting one of the vectors of theBoundSet to
         // theInVecRA, where theFragID indicates a message fragment indicating
         // the vector being set.
@


1.36
log
@Double Precision.
@
text
@d649 1
a649 1
      void setCycleTime34 (const float *);
@


1.35
log
@Double Precision.
@
text
@a123 1
      void prepDouble (WitAttr theAttr, double oldValue, float  theValue);
a127 1
      void prepNonNegDouble (WitAttr theAttr, double oldValue, float  theValue);
a134 7
            float   theValue,
            double  lb,
            double  msgLB);

      void prepLBDouble (
            WitAttr theAttr, 
            double  oldValue, 
a141 1
      void prepPosDouble (WitAttr theAttr, double oldValue, float  theValue);
d209 1
a209 1
      void setFalloutRate    (float);
@


1.34
log
@Double Precision.
@
text
@a657 1
      void setYieldRate   (const float *);
a659 1
      void setCycleTime34 (const WitInVecRA &);
@


1.33
log
@Double Precision.
@
text
@d217 2
a218 2
      void setRoutingShare   (const float *);
      void setOffset         (const float *);
d285 6
a296 6
      void issueSetDblVecMsg (WitAttr theAttr, const WitInVecRA & theValue);
         //
         // Issues the message for setting a double vector attribute.
         // theAttr is the name of the attribute.
         // theValue is the new value.

d659 1
d661 1
@


1.32
log
@Double Precision.
@
text
@d160 1
a160 1
      void prepFloatVec (WitAttr theAttr, const float * theValue);
d162 1
a162 1
         // Prep for an unconstrained float vector attribute.
d164 1
a164 1
      void prepNonNegFloatVec (WitAttr theAttr, const float * theValue);
d166 1
a166 1
         // Prep for a non-negative float vector attribute.
@


1.31
log
@Double Precision.
@
text
@a225 9
            WitBoundSet * theBoundSet,
            const float * hardLBArg,
            const float * softLBArg,
            const float * hardUBArg);
         //
         // Sets theBoundSet to the args.
         // Similar to a "prep" functions, but sets the value as well.

      void setBoundSet (
a303 7
            const float *         newCVec);
         //
         // Sets mergedVec by merging oldVec and newCVec as BoundSet vectors.

      void mergeBoundVecs (
            WitDblFlexVec &       mergedVec,
            const WitDblFlexVec & oldVec,
a306 9

      void issueBoundVecMsg (
            const WitBoundSet * theBoundSet,
            const float *       theCVec,
            WitMsgFragID        theFragID);
         //
         // Issues the message for setting one of the vectors of theBoundSet to
         // theCVec, where theFragID indicates a message fragment indicating the
         // vector being set.
@


1.30
log
@Double Precision.
@
text
@d232 10
a241 1
         // Similar to a "prep" functiona, but sets the value as well.
d317 7
d332 9
@


1.29
log
@Double Precision.
@
text
@a195 8
      void prepBoundSet (
            const WitBoundSet * theBoundSet,
            const float *       hardLBval,
            const float *       softLBval,
            const float *       hardUBval);
         //
         // prep for a BoundSet.

d225 9
d300 16
@


1.28
log
@Double Precision.
@
text
@a101 4
      void prepBool (WitAttr theAttr, bool oldValue, bool theValue);
         //
         // Prep for a Bool attribute.

@


1.27
log
@Double Precision.
@
text
@d106 4
d226 1
a226 1
      void setSelForDel      (bool);
d511 4
a514 4
            WitAttr theAttr,
            bool    oldValue,
            bool    theValue,
            WitAttr otherAttr);
@


1.26
log
@Double Precision.
@
text
@d168 10
d182 1
a182 1
      void prepObj1Vec (WitAttr theAttr, const float * theValue);
d185 1
a185 1
         // (These attributes are always non-negative float vectors.)
d289 6
@


1.25
log
@Continued double precision.
@
text
@d168 4
@


1.24
log
@Continued double precision.
@
text
@d129 2
a130 1
      void prepNonNegDouble (WitAttr theAttr, double oldValue, float theValue);
d136 11
a146 4
            double oldValue, 
            float  theValue,
            double lb,
            double msgLB);
d151 2
a152 1
      void prepPosDouble (WitAttr theAttr, double oldValue, float theValue);
@


1.23
log
@Continued double precision.
@
text
@d124 2
a125 1
      void prepDouble (WitAttr theAttr, double oldValue, float theValue);
@


1.22
log
@Continued double precision.
@
text
@a30 1
#include <StrDbl.h>
d124 1
a124 1
      void prepStrDbl (WitAttr theAttr, StrDbl oldValue, float theValue);
d126 1
a126 1
         // Prep for an unconstrained StrDbl attribute.
d128 1
a128 1
      void prepNonNegStrDbl (WitAttr theAttr, StrDbl oldValue, float theValue);
d130 1
a130 1
         // Prep for a non-negative StrDbl attribute.
d132 1
a132 1
      void prepLBStrDbl (
d134 1
a134 1
            StrDbl oldValue, 
d136 2
a137 2
            StrDbl lb,
            StrDbl msgLB);
d139 1
a139 1
         // Prep for a StrDbl attribute that must be >= lb.
d142 1
a142 1
      void prepPosStrDbl (WitAttr theAttr, StrDbl oldValue, float theValue);
d144 1
a144 1
         // Prep for a positive StrDbl attribute.
@


1.21
log
@Continued double precision.
@
text
@a124 22
      void prepFloat (WitAttr theAttr, float oldValue, float theValue);
         //
         // Prep for an unconstrained float attribute.

      void prepNonNegFloat (WitAttr theAttr, float oldValue, float theValue);
         //
         // Prep for a non-negative float attribute.

      void prepLBFloat (
            WitAttr theAttr, 
            float oldValue, 
            float theValue,
            float lb,
            float msgLB);
         //
         // Prep for a float attribute that must be >= lb.
         // msgLB is the lower bound to be displayed in any error message.

      void prepPosFloat (WitAttr theAttr, float oldValue, float theValue);
         //
         // Prep for a positive float attribute.

@


1.20
log
@Continued double precision.
@
text
@d165 4
@


1.19
log
@Continued double precision.
@
text
@d31 1
d147 1
a147 1
      void prepDouble (WitAttr theAttr, double oldValue, float theValue);
d149 1
a149 1
         // Prep for an unconstrained double attribute.
d151 1
a151 1
      void prepNonNegDouble (WitAttr theAttr, double oldValue, float theValue);
d153 1
a153 1
         // Prep for a non-negative double attribute.
d155 1
a155 1
      void prepLBDouble (
d157 1
a157 1
            double oldValue, 
d159 2
a160 2
            double lb,
            double msgLB);
d162 1
a162 1
         // Prep for a double attribute that must be >= lb.
a283 5

      void prepFloat (WitAttr, double, float);
         //
         // Not implemented,
         // Remove after conversion of float scalar attrs to double.
@


1.18
log
@Continued double precision.
@
text
@d150 14
d283 5
@


1.17
log
@Changed the routingShare attributes from scalars to vectors.
@
text
@d146 4
@


1.16
log
@Added some optional warnings on Linux.
@
text
@d201 1
a201 1
      void setRoutingShare   (float);
@


1.15
log
@Continued implementation of proportionate routing.
@
text
@d66 1
a66 1
      ~WitApiCall ();
d316 1
a316 1
      ~WitGlobalCompApiCall ();
d360 1
a360 1
      ~WitOptCompApiCall ();
d405 1
a405 1
      ~WitPartApiCall ();
d468 1
a468 1
      ~WitMaterialApiCall ();
d543 1
a543 1
      ~WitDemandApiCall ();
d603 1
a603 1
      ~WitOperationApiCall ();
d673 1
a673 1
      ~WitBomEntryApiCall ();
d739 1
a739 1
      ~WitSubEntryApiCall ();
d804 1
a804 1
      ~WitBopEntryApiCall ();
@


1.14
log
@Continued implementation of proportionate routing.
@
text
@d201 1
a201 1
      void setExpShare       (float);
@


1.13
log
@Continued implementation of proportionate routing.
@
text
@d201 1
a806 6

      //------------------------------------------------------------------------
      // Attribute setting functions.
      //------------------------------------------------------------------------

      void setExpShare (float);
@


1.12
log
@Began implementation of Proportionate Routing.
@
text
@d811 1
a811 1
      void setExpFactor (float);
@


1.11
log
@Fixed the "twoLevelLotSizes" bug that was discovered on windows.
@
text
@d808 6
@


1.10
log
@Internal changes.
@
text
@d291 1
a291 1
// Responsible for setting up an API call for an GlobalComp and cleaning up
@


1.9
log
@Refactoring for constrained stock reallocation.
@
text
@d72 1
a72 1
      inline WitBoolean argsOK ()
d76 1
a76 1
         ifDebug (argsChecked_ = witTRUE);
d102 1
a102 4
      void prepBoolean (
            WitAttr      theAttr,
            WitBoolean   oldValue,
            WitBoolean   theValue);
d104 1
a104 1
         // Prep for a Boolean attribute.
d198 1
a198 1
      void setSelForDel      (WitBoolean);
d275 1
a275 1
      WitBoolean argsOK_;
d277 1
a277 1
         // TRUE, iff no errors have been found in the arguments.
d279 1
a279 1
      WitBoolean prepCalled_;
d281 1
a281 1
         // In DEBUG mode, TRUE, iff one of the "prep" has been called.
d283 1
a283 1
      WitBoolean argsChecked_;
d285 1
a285 1
         // In DEBUG mode, TRUE, iff argsOK () has been called.
d476 4
a479 4
            WitAttr    theAttr,
            WitBoolean oldValue,
            WitBoolean theValue,
            WitAttr    otherAttr);
@


1.8
log
@Continued development of selection splitting for multi=exec.
@
text
@a321 9
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline WitGlobalComp * operator () ()
         {
         return myGlobalComp ();
         }

a365 9
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline WitOptComp * operator () ()
         {
         return myOptComp ();
         }

d412 1
a412 1
      // Other public member functions.
d415 1
a415 4
      inline WitPart * operator () ()
         {
         return myPart_;
         }
a477 5
      inline WitMaterial * operator () ()
         {
         return myMaterial_;
         }

d486 6
d550 1
a550 1
      // Other public member functions.
d553 1
a553 4
      inline WitDemand * operator () ()
         {
         return myDemand_;
         }
d617 1
a617 1
      // Other public member functions.
d620 1
a620 4
      inline WitOperation * operator () ()
         {
         return myOperation_;
         }
d680 1
a680 1
      // Other public member functions.
d683 1
a683 4
      inline WitBomEntry * operator () ()
         {
         return myBomEnt_;
         }
d746 1
a746 1
      // Other public member functions.
d749 1
a749 4
      inline WitSubEntry * operator () ()
         {
         return mySub_;
         }
d811 1
a811 1
      // Other public member functions.
d814 1
a814 4
      inline WitBopEntry * operator () ()
         {
         return myBopEnt_;
         }
@


1.7
log
@Re-worked the controls for selection splitting.
@
text
@d711 1
a711 1
         return myBomEntry_;
d733 1
a733 1
      WitBomEntry * myBomEntry_;
d780 1
a780 1
         return mySubEntry_;
d802 1
a802 1
      WitSubEntry * mySubEntry_;
d848 1
a848 1
         return myBopEntry_;
d869 1
a869 1
      WitBopEntry * myBopEntry_;
@


1.6
log
@Added the attribute ID to the error msg for calling an API function for a
   material part attribute and giving it a capacity part.
Began implementation of the new selection splitting design.
@
text
@a511 2
      void setBaSplitRes (float);

@


1.5
log
@Removed the coarse selection splitting code that's not needed for the new
design of selection splitting.
@
text
@d479 4
a482 1
      WitMaterialApiCall (WitRun * theWitRun, const char * partName);
d485 1
a485 1
         // partName.
@


1.4
log
@Refactoring for selection splitting.
@
text
@d509 2
@


1.3
log
@Replaced some scalar attributes with vector attributes:

   BOM entry  usageRate ==> consRate
   substitute usageRate ==> consRate
   BOP entry  prodRate  ==> productRate
@
text
@d272 1
a272 3
      copyCtorAndAssignment (WitApiCall);
         //
         // Prevents unintentional copying and assignment.
d337 1
a337 3
      copyCtorAndAssignment (WitGlobalCompApiCall);
         //
         // Prevents unintentional copying and assignment.
d390 1
a390 3
      copyCtorAndAssignment (WitOptCompApiCall);
         //
         // Prevents unintentional copying and assignment.
d444 1
a444 3
      copyCtorAndAssignment (WitPartApiCall);
         //
         // Prevents unintentional copying and assignment.
d515 1
a515 3
      copyCtorAndAssignment (WitMaterialApiCall);
         //
         // Prevents unintentional copying and assignment.
d581 1
a581 3
      copyCtorAndAssignment (WitDemandApiCall);
         //
         // Prevents unintentional copying and assignment.
d651 1
a651 3
      copyCtorAndAssignment (WitOperationApiCall);
         //
         // Prevents unintentional copying and assignment.
d717 1
a717 3
      copyCtorAndAssignment (WitBomEntryApiCall);
         //
         // Prevents unintentional copying and assignment.
d786 1
a786 3
      copyCtorAndAssignment (WitSubEntryApiCall);
         //
         // Prevents unintentional copying and assignment.
d854 1
a854 3
      copyCtorAndAssignment (WitBopEntryApiCall);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@a204 1
      void setUsageRate      (float);
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
