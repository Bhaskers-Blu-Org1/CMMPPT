head	1.35;
access;
symbols
	sce_5_01_20080919:1.32
	latest_sce_4_20_20060523:1.28.0.2
	sce_4_20_20060523:1.28
	latest_sce4_20_OSL:1.27.0.2
	sce_4_20_OSL:1.27
	sce_410_withVa:1.23
	sce_4_05_20040511:1.23
	sce_4_00_20040201:1.23
	nextGenBranch:1.22.0.2
	nextGenRoot:1.22
	sce_3_30_20030627:1.21
	EndRw-branch:1.18.0.4
	Root-of-EndRw:1.18
	rwToStl:1.18.0.2
	latest_sce_3_10_20010924:1.14.0.2
	sce_3_10_20010924:1.14
	latest_sce_3_00_20010601:1.9.0.2
	sce_3_00_20010601:1.9
	latest_sce_2_31_20010308:1.8.0.2
	sce_2_31_20010308:1.8;
locks; strict;
comment	@ * @;


1.35
date	2011.09.28.23.50.29;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2011.09.24.00.28.44;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.08.30.20.18.15;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2007.07.10.15.57.24;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2006.06.06.21.31.19;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2006.05.26.21.14.30;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2006.05.26.20.40.11;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2006.05.02.17.34.14;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2006.02.03.16.48.13;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2005.12.05.22.24.09;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2005.12.05.20.47.34;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2005.11.15.19.55.22;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2003.12.01.21.05.05;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2003.07.23.20.00.17;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.04.11.19.08.31;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.01.02.23.40.52;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.01.02.22.18.52;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2002.06.26.18.28.39;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2002.06.21.21.52.22;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2002.05.01.14.26.02;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.04.12.21.02.06;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.24.22.03.24;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.07.09.22.09.45;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.27.21.45.12;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.21.15.40.06;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.20.20.07.09;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.12.19.48.09;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.02.01.16.24.45;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.15.19.01.53;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.11.16.35.12;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.22.16.18.28;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.20.20.08.38;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.23.45.59;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.13.19.57.27;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.05.19.05.32;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.35
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef StackH
#define StackH

//------------------------------------------------------------------------------
// Header file: "Stack.h"
//
// Contains the declaration of the following classes:
//
//    AbsStack
//    AbsStItr
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class AbsStack
//
// A stack of undefined elements.
//
// Class Hierarchy:
//
// AbsStack
//    AbsObjStack
//       ObjStack <ObjByPtr>
//    PairStack   <ObjByPtr, ObjByVal>
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

class WitAbsStack
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      inline bool isNonEmpty () const
         {
         return not isEmpty ();
         }

      inline bool isEmpty () const
         {
         return (firstAbsLink_ == NULL);
         }

      void clear ();
         //
         // Removes all of the elements from this AbsStack.

      int nElements () const;
         //
         // Computes (by traversal) and returns the # of elements in this
         // AbsStack.

      void reverse ();
         //
         // Reverses the order of the elements in this AbsStack.

      WitProblem * myProblem () const;
         //
         // Returns the Problem associated with this AbsStack.

      inline const WitAbsLink * firstConstLink () const
         {
         return firstAbsLink_;
         }

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAbsStack (WitAbsLinkMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitAbsStack ();

      //------------------------------------------------------------------------
      // Other protected functions.
      //------------------------------------------------------------------------

      void pushAbs ();
         //
         // Pushes a new element onto the top of this AbsStack.

      void popAbs ();
         //
         // This AbsStack must be is non-Empty.
         // Removes the first element from this AbsStack.

      void takeContentsFromAbs (WitAbsStack & thatAbsStack);
         //
         // Assumes this AbsStack is empty.
         // Takes the contents of thatAbsStack and moves them into this
         // AbsStack.
         // This is done in constant time.

      void attachItrAbs (WitAbsStItr & theAbsStItr) const;
         //                                                                 
         // Puts theAbsStItr into its initial state for iterating through this
         // AbsStack.                                        

      accessFunc (WitAbsLink *, firstAbsLink)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitAbsStack);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitAbsLinkMgr * const myAbsLinkMgr_;
         //
         // The AbsLinkMgr to be used by this AbsStack.

      WitAbsLink * firstAbsLink_;
         //
         // The first AbsLink in this AbsStack.
   };

//------------------------------------------------------------------------------
// Class AbsStItr
//
// Responsible for iterating through the elements of an AbsStack.
//
// Class Hierarchy:
//
// AbsStItr
//    AbsObjStItr
//       ObjStItr  <ObjByPtr>
//    PairStItr <ObjByPtr, ObjByVal>
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

class WitAbsStItr                                
   {                                                                         
   friend class WitAbsStack;

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.                                              
      //------------------------------------------------------------------------
                                                                             
      WitAbsStItr ();                                            
                                                                             
      //------------------------------------------------------------------------
      // Destructor function.                                                
      //------------------------------------------------------------------------
                                                                             
      ~WitAbsStItr ();                                           
                                                                             
      //------------------------------------------------------------------------
      // Other protected member functions.                                   
      //------------------------------------------------------------------------
                                                                            
      void advanceAbs ();
         //                                                                 
         // If this AbsStItr is in its initial state, this              
         // function advances it to the first element of the AbsStack;  
         // otherwise it advances it to the next element.                   

      accessFunc (const WitAbsLink *, curAbsLink)

   private:                                                                  
                                                                             
      //------------------------------------------------------------------------
      // Private member functions.                                           
      //------------------------------------------------------------------------
                                                                          
      noCopyCtorAssign (WitAbsStItr);                           
                                                                          
      //------------------------------------------------------------------------
      // Private member data.                                                
      //------------------------------------------------------------------------

      const WitAbsStack * myAbsStack_;
         //
         // The AbsStack to which this AbsStItr is currently attached, if any;
         // otherwise NULL.
                                                                             
      const WitAbsLink * curAbsLink_;
         //                                                                  
         // The AbsLink currently associated with this AbsStItr,
         // or NULL, if this AbsStItr is in its initial state.
   };

#endif
@


1.34
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.33
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d40 2
a41 85
{
public:

//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------

inline bool isNonEmpty () const
{
return not isEmpty ();
}

inline bool isEmpty () const
{
return (firstAbsLink_ == NULL);
}

void clear ();
//
// Removes all of the elements from this AbsStack.

int nElements () const;
//
// Computes (by traversal) and returns the # of elements in this
// AbsStack.

void reverse ();
//
// Reverses the order of the elements in this AbsStack.

WitProblem * myProblem () const;
//
// Returns the Problem associated with this AbsStack.

inline const WitAbsLink * firstConstLink () const
{
return firstAbsLink_;
}

protected:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitAbsStack (WitAbsLinkMgr *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitAbsStack ();

//------------------------------------------------------------------------
// Other protected functions.
//------------------------------------------------------------------------

void pushAbs ();
//
// Pushes a new element onto the top of this AbsStack.

void popAbs ();
//
// This AbsStack must be is non-Empty.
// Removes the first element from this AbsStack.

void takeContentsFromAbs (WitAbsStack & thatAbsStack);
//
// Assumes this AbsStack is empty.
// Takes the contents of thatAbsStack and moves them into this
// AbsStack.
// This is done in constant time.

void attachItrAbs (WitAbsStItr & theAbsStItr) const;
//
// Puts theAbsStItr into its initial state for iterating through this
// AbsStack.

accessFunc (WitAbsLink *, firstAbsLink)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d43 97
a139 14
noCopyCtorAssign (WitAbsStack);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitAbsLinkMgr * const myAbsLinkMgr_;
//
// The AbsLinkMgr to be used by this AbsStack.

WitAbsLink * firstAbsLink_;
//
// The first AbsLink in this AbsStack.
};
d156 52
a207 52
class WitAbsStItr
{
friend class WitAbsStack;

protected:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitAbsStItr ();

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitAbsStItr ();

//------------------------------------------------------------------------
// Other protected member functions.
//------------------------------------------------------------------------

void advanceAbs ();
//
// If this AbsStItr is in its initial state, this
// function advances it to the first element of the AbsStack;
// otherwise it advances it to the next element.

accessFunc (const WitAbsLink *, curAbsLink)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitAbsStItr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

const WitAbsStack * myAbsStack_;
//
// The AbsStack to which this AbsStItr is currently attached, if any;
// otherwise NULL.

const WitAbsLink * curAbsLink_;
//
// The AbsLink currently associated with this AbsStItr,
// or NULL, if this AbsStItr is in its initial state.
};
@


1.32
log
@ASAP Pegging Order
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d40 85
a124 2
   {
   public:
d126 14
a139 97
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      inline bool isNonEmpty () const
         {
         return not isEmpty ();
         }

      inline bool isEmpty () const
         {
         return (firstAbsLink_ == NULL);
         }

      void clear ();
         //
         // Removes all of the elements from this AbsStack.

      int nElements () const;
         //
         // Computes (by traversal) and returns the # of elements in this
         // AbsStack.

      void reverse ();
         //
         // Reverses the order of the elements in this AbsStack.

      WitProblem * myProblem () const;
         //
         // Returns the Problem associated with this AbsStack.

      inline const WitAbsLink * firstConstLink () const
         {
         return firstAbsLink_;
         }

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAbsStack (WitAbsLinkMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitAbsStack ();

      //------------------------------------------------------------------------
      // Other protected functions.
      //------------------------------------------------------------------------

      void pushAbs ();
         //
         // Pushes a new element onto the top of this AbsStack.

      void popAbs ();
         //
         // This AbsStack must be is non-Empty.
         // Removes the first element from this AbsStack.

      void takeContentsFromAbs (WitAbsStack & thatAbsStack);
         //
         // Assumes this AbsStack is empty.
         // Takes the contents of thatAbsStack and moves them into this
         // AbsStack.
         // This is done in constant time.

      void attachItrAbs (WitAbsStItr & theAbsStItr) const;
         //                                                                 
         // Puts theAbsStItr into its initial state for iterating through this
         // AbsStack.                                        

      accessFunc (WitAbsLink *, firstAbsLink)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitAbsStack);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitAbsLinkMgr * const myAbsLinkMgr_;
         //
         // The AbsLinkMgr to be used by this AbsStack.

      WitAbsLink * firstAbsLink_;
         //
         // The first AbsLink in this AbsStack.
   };
d156 52
a207 52
class WitAbsStItr                                
   {                                                                         
   friend class WitAbsStack;

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.                                              
      //------------------------------------------------------------------------
                                                                             
      WitAbsStItr ();                                            
                                                                             
      //------------------------------------------------------------------------
      // Destructor function.                                                
      //------------------------------------------------------------------------
                                                                             
      ~WitAbsStItr ();                                           
                                                                             
      //------------------------------------------------------------------------
      // Other protected member functions.                                   
      //------------------------------------------------------------------------
                                                                            
      void advanceAbs ();
         //                                                                 
         // If this AbsStItr is in its initial state, this              
         // function advances it to the first element of the AbsStack;  
         // otherwise it advances it to the next element.                   

      accessFunc (const WitAbsLink *, curAbsLink)

   private:                                                                  
                                                                             
      //------------------------------------------------------------------------
      // Private member functions.                                           
      //------------------------------------------------------------------------
                                                                          
      noCopyCtorAssign (WitAbsStItr);                           
                                                                          
      //------------------------------------------------------------------------
      // Private member data.                                                
      //------------------------------------------------------------------------

      const WitAbsStack * myAbsStack_;
         //
         // The AbsStack to which this AbsStItr is currently attached, if any;
         // otherwise NULL.
                                                                             
      const WitAbsLink * curAbsLink_;
         //                                                                  
         // The AbsLink currently associated with this AbsStItr,
         // or NULL, if this AbsStItr is in its initial state.
   };
@


1.31
log
@New PIP pegging order.
@
text
@d106 1
a106 1
      void passContentsToAbs (WitAbsStack & theAbsStack);
d108 4
a111 3
         // Assumes theAbsStack is empty.
         // Takes the contents of this AbsStack and moves them into theAbsStack.
         // This is done in bounded time.
@


1.30
log
@New PIP pegging order.
@
text
@d101 1
a101 1
      bool popAbs ();
d103 2
a104 3
         // If this AbsStack is non-Empty, the first element it contains is
         // removed from it.
         // Returns true, iff this AbsStack is non-empty.
@


1.29
log
@New PIP pegging order.
@
text
@d109 3
a111 3
         // Clears theAbsStack and then takes the contents of this AbsStack and
         // moves them into theAbsStack.
         // This is done in bounded time, except for the clear.
@


1.28
log
@Updated the copyright date on all source files.
@
text
@d107 1
a107 1
      void takeContentsAbs (WitAbsStack & theAbsStack);
d109 2
a110 2
         // Clears this AbsStack and transfers the contents of theAbsStack
         // out of theAbsStack and into this AbsStack.
@


1.27
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.26
log
@[shared-resource pegging]
@
text
@d113 1
a113 1
      void attachAbs (WitAbsStItr & theAbsStItr) const;
@


1.25
log
@[shared-resource pegging]
@
text
@d113 5
d158 2
a177 5
      void attachToAbs (const WitAbsStack & theAbsStack); 
         //                                                                 
         // Puts this AbsStItr into its initial state for iterating     
         // through theAbsStack.                                        

@


1.24
log
@[shared-resource pegging]
@
text
@d144 2
a145 2
//    ObjStItr  <ObjByPtr>
//       PerStItr
d153 1
a153 1
   public:
a155 4
      // Public member functions.                                   
      //------------------------------------------------------------------------
                                                                            
      //------------------------------------------------------------------------
d168 1
a168 1
      // Other public member functions.                                   
d171 5
a181 5
      void attachToAbs (const WitAbsStack & theAbsStack); 
         //                                                                 
         // Puts this AbsStItr into its initial state for iterating     
         // through theAbsStack.                                        
                                                                            
@


1.23
log
@Continued implementation of PIP.
@
text
@d33 2
a34 2
//       ObjStack <ObjType>
//    PairStack   <ObjType, ValType>
d144 1
a144 1
//    ObjStItr  <ObjType>
d146 1
a146 1
//    PairStItr <ObjType, ValType>
@


1.22
log
@An attempt to fix link errors from the Windows compiler.
@
text
@d39 1
a39 1
class WitAbsStack: public WitUtil
d151 1
a151 1
class WitAbsStItr: public WitUtil                                
@


1.21
log
@Continued implementation of proportionate routing.
@
text
@a158 10
      void advanceAbs ();
         //                                                                 
         // If this AbsStItr is in its initial state, this              
         // function advances it to the first element of the AbsStack;  
         // otherwise it advances it to the next element.                   

      accessFunc (const WitAbsLink *, curAbsLink)

   protected:                                                                
                                                                             
d172 1
a172 1
      // Other protected member functions.                                   
d175 6
d186 2
@


1.20
log
@Internal changes.
@
text
@a33 1
//          PerStack
@


1.19
log
@Internal changes.
@
text
@d50 1
a50 1
         return ! isEmpty ();
@


1.18
log
@Continued implementation of Single-Source.
@
text
@d48 1
a48 1
      inline WitBoolean isNonEmpty () const
d53 1
a53 1
      inline WitBoolean isEmpty () const
d102 1
a102 1
      WitBoolean popAbs ();
d106 1
a106 1
         // Returns TRUE, iff this AbsStack is non-empty.
@


1.17
log
@Continued implementation of Single-Source.
@
text
@d34 1
a34 1
//    PerStack
d146 1
a146 1
//    PerStItr
@


1.16
log
@Preliminary work on single source.
@
text
@d34 1
d146 1
@


1.15
log
@Continued implementation of sel-split for pen-exec.
@
text
@d200 5
a204 5
                                                                             
      const WitAbsLink * firstAbsLink_;
         //                                                                  
         // The first AbsLink of the AbsStack to be iterated by this AbsStItr.
         // NULL indicates that the AbsStack is empty.
@


1.14
log
@Refactoring for constrained stock reallocation.
@
text
@d47 5
@


1.13
log
@Removed class template AbsPairStack <*,*>.
@
text
@a101 5
      WitAbsLink * slowAppendAbs ();
         //
         // Appends a new element to the end of this AbsStack, in linear time.
         // Returns the new AnsLink.

a114 8

      void implementTempCases ();
         //
         // This function is not to be called.
         // Its purpose is to force the various specific cases of some of the
         // stack templates to be implemented.
         // This is done as a work-around to a problem with the xlC
         // compiler & linker.
@


1.12
log
@Initial implementation of multi-route class templates.
@
text
@d33 2
a34 3
//       ObjStack  <ObjType>
//    AbsPairStack          <ValType>
//       PairStack <ObjType, ValType>
@


1.11
log
@Some template stuff.
@
text
@d122 1
a122 1
      void implementTempCases (WitTlObj *);
@


1.10
log
@Converted several generic classes into class templates.
@
text
@d122 1
a122 1
      void callTempFuncs (WitTlObj *);
d125 2
a126 1
         // It calls various template functions for the Stack sub-system.
d128 1
a128 2
         // compiler & linker. Without this function or something equivalent, 
         // the linker can't find the implementations of the template classes.
@


1.9
log
@Added the attribute ID to the error msg for calling an API function for a
   material part attribute and giving it a capacity part.
Began implementation of the new selection splitting design.
@
text
@d33 3
a35 3
//       ObjStack  (ObjType)
//    AbsPairStack          (ValType)
//       PairStack (ObjType, ValType)
d122 8
d153 2
a154 2
//    ObjStItr  (ObjType)
//    PairStItr (ObjType, ValType)
@


1.8
log
@Further implementation of coarse selection splitting.
@
text
@d112 1
@


1.7
log
@Fixed some bugs in coarse selection splitting.
@
text
@d103 5
@


1.6
log
@Initial implementation of coarse selection splitting for build-ahead.
@
text
@d93 1
a93 1
      void putAbs ();
d95 1
a95 1
         // Puts an element onto the top of this AbsStack.
d97 1
a97 1
      WitBoolean getAbs ();
@


1.5
log
@Further development of coarse selection splitting.
@
text
@d1 207
@


1.4
log
@Further development of coarse selection splitting.
@
text
@a0 355
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef StackH
#define StackH

//------------------------------------------------------------------------------
// Header file: "Stack.h"
//
// Contains the declaration of the following classes:
//
//    Stack
//    ObjStack  (ObjType)
//    PairStack (ObjType, ValType)
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class Stack
//
// This base class defines the abstract structure and behavior of a dynamic
// stack. The data contained by Stacks is defined in the derived classes.
//
// Class Hierarchy:
//
// Stack
//    ObjStack (ObjType)
//    PairStack (ObjType, ValType)
//------------------------------------------------------------------------------

class WitStack: public WitUtil
   {
      //------------------------------------------------------------------------
      // Friends.
      //------------------------------------------------------------------------

      friend WitStackItr;

   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      inline WitBoolean isEmpty () const
         {
         return (firstLink_ == NULL);
         }

      void clear ();
         //
         // Removes all of the elements from this Stack.

      int nElements () const;
         //
         // Computes (by traversal) and returns the # of elements in this Stack.

      void reverse ();
         //
         // Reverses the order of the elements in this Stack.

      WitProblem * myProblem () const;
         //
         // Returns the Problem associated with this Stack.

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStack (WitLinkMgr * theLinkMgr);
         //
         // myLinkMgr_ <-- theLinkMgr.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitStack ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      // The names end in "Abs" (abstract) to distinguish them from similar 
      // functions in the derived classes.
      //------------------------------------------------------------------------

      void pushAbs ();
         //
         // Pushes an empty element onto the top of this Stack.

      WitBoolean popAbs ();
         //
         // If this Stack is non-Empty, the first element it contains is
         // removed from it.
         // Returns TRUE, iff this Stack is non-empty.

      void takeContentsAbs (WitStack & theStack);
         //
         // Clears this Stack and transfers the contents of theStack out
         // of theStack and into this Stack.

      void reverseCopyOfAbs (const WitStack & theStack);
         //
         // Makes this Stack a reverse copy of theStack.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitLink *, firstLink)

   private:

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitStack);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitLinkMgr * const myLinkMgr_;
         //
         // The LinkMgr to be used by this Stack_.

      WitLink * firstLink_;
         //
         // The first Link in this Stack.
   };

//------------------------------------------------------------------------------
// Generic class ObjStack (ObjType)
//
// A stack of individual objects.
//
// Class Hierarchy:
//
// Stack
//    ObjStack (ObjType)
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Generic class declaration macro.
//------------------------------------------------------------------------------

#define WitObjStackdeclare(ObjType)                                            \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitList (ObjType);                                                       \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitObjStack (ObjType): public WitStack                                   \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitObjStack (ObjType) (WitProblem * theProblem);                         \
         /*                                                                  */\
         /* Stack <<< theProblem->myObjLinkMgr ()                            */\
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      ~WitObjStack (ObjType) ();                                               \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      void push (ObjType * theObject);                                         \
         /*                                                                  */\
         /* Pushes theObject onto the top of this ObjStack.                  */\
                                                                               \
      WitBoolean pop (ObjType * & theObject);                                  \
         /*                                                                  */\
         /* See popAbs.                                                      */\
         /* In the non-empty case, theObject is set to the popped object.    */\
                                                                               \
      inline void takeContents (WitObjStack (ObjType) & theStack)              \
         {                                                                     \
         takeContentsAbs (theStack);                                           \
         }                                                                     \
                                                                               \
      ObjType * firstObject () const;                                          \
         /*                                                                  */\
         /* Returns the first object in this ObjStack.                       */\
         /* Not to be called if this ObjStack is empty.                      */\
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other private member functions.                                     */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtorAssign (WitObjStack (ObjType));                                \
                                                                               \
      inline WitObjLink * firstObjLink () const                                \
         {                                                                     \
         return (WitObjLink *) firstLink ();                                   \
         }                                                                     \
   };                                                                          \

//------------------------------------------------------------------------------
// Generic global function
// reverseCopyInto (ObjStack (ObjType) &, const List (ObjType) &)
// 
// Makes theObjStack a reverse copy of theList.
//------------------------------------------------------------------------------

#define reverseCopyInto_ObjStackdeclare(ObjType)                               \
                                                                               \
void reverseCopyInto (                                                         \
      WitObjStack (ObjType) & theObjStack,                                     \
      const WitList (ObjType) &  theList);                                     \

//------------------------------------------------------------------------------
// Generic class PairStack (ObjType, ValType)
//
// A stack of (object, value) pairs.
//
// Class Hierarchy:
//
// Stack
//    PairStack (ObjType, ValType)
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Generic class declaration macro.
//------------------------------------------------------------------------------

#define WitPairStackdeclare2(ObjType, ValType)                                 \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitPairLink (ValType);                                                   \
class WitPairLinkMgr (ValType);                                                \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitPairStack (ObjType, ValType): public WitStack                         \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitPairStack (ObjType, ValType) (WitProblem * theProblem);               \
         /*                                                                  */\
         /* Stack <<< the appropriate LinkMgr from theProblem.               */\
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      ~WitPairStack (ObjType, ValType) ();                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      void push (ObjType * theObject, ValType theVal);                         \
         /*                                                                  */\
         /* Pushes (theObject, theVal) onto the top of this PairStack.       */\
                                                                               \
      WitBoolean pop (ObjType * & theObject, ValType & theVal);                \
         /*                                                                  */\
         /* See popAbs.                                                      */\
         /* In the non-empty case, (theObject, theVal) is set to the popped  */\
         /* (object, value).                                                 */\
                                                                               \
      inline void takeContents (                                               \
            WitPairStack (ObjType, ValType) & thePairStack)                    \
         {                                                                     \
         takeContentsAbs (thePairStack);                                       \
         }                                                                     \
                                                                               \
      inline void reverseCopyOf (const WitPairStack (ObjType, ValType) &       \
            thePairStack)                                                      \
         {                                                                     \
         reverseCopyOfAbs (thePairStack);                                      \
         }                                                                     \
                                                                               \
      ObjType * firstObject () const;                                          \
         /*                                                                  */\
         /* Returns the first object in this PairStack.                      */\
         /* Not to be called if this PairStack is empty.                     */\
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other private member functions.                                     */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtorAssign (WitPairStack (ObjType, ValType));                      \
                                                                               \
      inline WitPairLink (ValType) * firstPairLink () const                    \
         {                                                                     \
         return (WitPairLink (ValType) *) firstLink ();                        \
         }                                                                     \
   };                                                                          \

//------------------------------------------------------------------------------
// Declarations of all specific cases of the generic classes and functions
// declared in this file.
//------------------------------------------------------------------------------

typedef WitReqPt * WitReqPtPtr;

declare  (WitObjStack,              double)
declare  (WitObjStack,              WitPart)
declare  (WitObjStack,              WitOperation)
declare  (WitObjStack,              WitSubEntry)
declare  (WitObjStack,              WitBopEntry)
declare  (WitObjStack,              WitConsEntry)
declare  (WitObjStack,              WitAltPt)
declare  (WitObjStack,              WitTl)
declare  (WitObjStack,              WitReqPt)
declare  (WitObjStack,              WitReqPtPtr)
declare  (WitObjStack,              WitMeSelPt)

declare  (reverseCopyInto_ObjStack, WitPart)
declare  (reverseCopyInto_ObjStack, WitOperation)
declare  (reverseCopyInto_ObjStack, WitSubEntry)

declare2 (WitPairStack,             WitPart,      WitPeriod)
declare2 (WitPairStack,             WitDemand,    WitPeriod)
declare2 (WitPairStack,             WitOperation, WitPeriod)
declare2 (WitPairStack,             WitBopEntry,  WitPeriod)
declare2 (WitPairStack,             WitConsEntry, WitPeriod)

declare2 (WitPairStack,             double,       double)
declare2 (WitPairStack,             WitConsEntry, double)

#endif
@


1.3
log
@Futher development of selection splitting.
@
text
@d337 1
a350 1
declare2 (WitPairStack,             WitMrBomEnt,  WitPeriod)
@


1.2
log
@Further development of selection splitting for multi-route on substitutes.
@
text
@a20 1
//    MrBomEntPerDblStack
a323 62
// Generic class MrBomEntPerDblStack
//
// A stack of individual objects.
//
// Class Hierarchy:
//
// Stack
//    MrBomEntPerDblStack
//------------------------------------------------------------------------------

class WitMrBomEntPerDblStack: public WitStack
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrBomEntPerDblStack (WitProblem * theProblem);
         //
         // Stack <<< theProblem->myObjPerDblLinkMgr ()

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMrBomEntPerDblStack ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void push (
            WitMrBomEnt * theMrBomEnt,
            WitPeriod     thePer,
            double        theDbl);
         //
         // Pushes the args onto the top of this MrBomEntPerDblStack.

      WitBoolean pop (
            WitMrBomEnt * & theMrBomEnt,
            WitPeriod &     thePer,
            double &        theDbl);
         //
         // See popAbs.
         // In the non-empty case, args are set to the popped data.

   private:

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMrBomEntPerDblStack);

      inline WitObjPerDblLink * firstObjPerDblLink () const
         {
         return (WitObjPerDblLink *) firstLink ();
         }
   };

//------------------------------------------------------------------------------
d330 1
d352 1
@


1.1
log
@Some minor modifications.
@
text
@d19 1
a19 1
//    ObjStack (ObjType)
d21 1
d55 1
a55 1
         return (firstStackLink_ == NULL);
d84 1
a84 1
      WitStack (WitStackLinkMgr * theStackLinkMgr);
d86 1
a86 1
         // myStackLinkMgr_ <-- theStackLinkMgr.
d123 1
a123 1
      accessFunc (WitStackLink *, firstStackLink)
d137 1
a137 1
      WitStackLinkMgr * const myStackLinkMgr_;
d139 1
a139 1
         // The StackLinkMgr to be used by this Stack_.
d141 1
a141 1
      WitStackLink * firstStackLink_;
d143 1
a143 1
         // The first StackLink in this Stack.
d179 1
a179 1
         /* Stack <<< theProblem->myObjStackLinkMgr ()                       */\
d218 1
a218 1
      inline WitObjStackLink * firstObjStackLink () const                      \
d220 1
a220 1
         return (WitObjStackLink *) firstStackLink ();                         \
d256 2
a257 2
class WitPairStackLink (ValType);                                              \
class WitPairStackLinkMgr (ValType);                                           \
d271 1
a271 1
         /* Stack <<< the appropriate StackLinkMgr from theProblem.          */\
d318 1
a318 1
      inline WitPairStackLink (ValType) * firstPairStackLink () const          \
d320 1
a320 1
         return (WitPairStackLink (ValType) *) firstStackLink ();              \
d325 62
d412 1
@

