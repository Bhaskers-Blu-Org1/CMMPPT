head	1.12;
access;
symbols
	sce_5_01_20080919:1.8
	latest_sce_4_20_20060523:1.4.0.2
	sce_4_20_20060523:1.4
	latest_sce4_20_OSL:1.3.0.2
	sce_4_20_OSL:1.3
	sce_410_withVa:1.3
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.2
	nextGenBranch:1.1.0.6
	nextGenRoot:1.1
	sce_3_30_20030627:1.1
	EndRw-branch:1.1.0.4
	Root-of-EndRw:1.1
	rwToStl:1.1.0.2;
locks; strict;
comment	@ * @;


1.12
date	2011.09.28.23.49.07;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.09.24.00.27.25;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.08.30.20.17.20;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2010.08.19.18.00.10;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.03.03.22.35.41;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.08.01.20.38.22;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.10.03.15.08.58;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.08.18.19.32.52;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.02.17.33.55;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.10.22.53.18;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.01.21.05.03;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.29.23.06.25;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef CoeffH
#define CoeffH

//------------------------------------------------------------------------------
// Header file: "Coeff.h"
//
// Contains the declaration of class Coeff.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// class Coeff
//
// The coefficient of a variable in a constraint or objective in the
// optimization problem, i.e., a matrix element.
// Thus if theCoeff is an instance of this class, it follows that the
// coefficient of theCoeff->myVar () in theCoeff->myCon () is
// theCoeff->myValue ().
//
// Implemented in OptMisc.C.
//------------------------------------------------------------------------------

class WitCoeff
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitCoeff (WitOptCon * theCon, WitOptVar * theVar, double theValue);
         //
         // myCon_   <-- theCon.
         // myVar_   <-- theVar.
         // myValue_ <-- theValue.

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      ~WitCoeff ();

      //-----------------------------------------------------------------------
      // Data Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitOptCon *, myCon)
      accessFunc (WitOptVar *, myVar)
      accessFunc (double,      myValue)

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      inline void increment (const double & delta)
         {
         myValue_ += delta;
         }

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitCoeff);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitOptCon * const myCon_;
         //
         // The OptCon in which this Coeff appears.

      WitOptVar * const myVar_;
         //
         // The OptVar of which this Coeff is a coefficient.

      double myValue_;
         //
         // The coefficient value.
   };

#endif
@


1.11
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.10
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d34 2
a35 35
{
public:

//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------

WitCoeff (WitOptCon * theCon, WitOptVar * theVar, double theValue);
//
// myCon_   <-- theCon.
// myVar_   <-- theVar.
// myValue_ <-- theValue.

//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------

~WitCoeff ();

//-----------------------------------------------------------------------
// Data Access functions.
//-----------------------------------------------------------------------

accessFunc (WitOptCon *, myCon)
accessFunc (WitOptVar *, myVar)
accessFunc (double,      myValue)

//-----------------------------------------------------------------------
// Other public member functions.
//-----------------------------------------------------------------------

inline void increment (const double & delta)
{
myValue_ += delta;
}
d37 57
a93 24
private:

//-----------------------------------------------------------------------
// Private member functions.
//-----------------------------------------------------------------------

noCopyCtorAssign (WitCoeff);

//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------

WitOptCon * const myCon_;
//
// The OptCon in which this Coeff appears.

WitOptVar * const myVar_;
//
// The OptVar of which this Coeff is a coefficient.

double myValue_;
//
// The coefficient value.
};
@


1.9
log
@CPLEX
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d34 35
a68 2
   {
   public:
d70 24
a93 57
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitCoeff (WitOptCon * theCon, WitOptVar * theVar, double theValue);
         //
         // myCon_   <-- theCon.
         // myVar_   <-- theVar.
         // myValue_ <-- theValue.

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      ~WitCoeff ();

      //-----------------------------------------------------------------------
      // Data Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitOptCon *, myCon)
      accessFunc (WitOptVar *, myVar)
      accessFunc (double,      myValue)

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      inline void increment (const double & delta)
         {
         myValue_ += delta;
         }

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitCoeff);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitOptCon * const myCon_;
         //
         // The OptCon in which this Coeff appears.

      WitOptVar * const myVar_;
         //
         // The OptVar of which this Coeff is a coefficient.

      double myValue_;
         //
         // The coefficient value.
   };
@


1.8
log
@Stochastic Implosion
@
text
@d25 1
a25 1
// optimization model, i.e., a matrix element.
@


1.7
log
@Stochastic Implosion
@
text
@d25 1
a25 1
// optimization problem, i.e., a matrix element.
@


1.6
log
@App controlled opt implosion.
@
text
@d30 1
a30 1
// Implemented in OptProbEl.C.
@


1.5
log
@App controlled opt implode.
@
text
@d24 2
a25 2
// The coefficient of a variable in a constraint or objective in the Opt model,
// i.e., a matrix element.
@


1.4
log
@Updated the copyright date on all source files.
@
text
@d23 1
d29 2
@


1.3
log
@Double Precision.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.2
log
@Continued implementation of PIP.
@
text
@d38 1
a38 1
      WitCoeff (WitOptCon * theCon, WitOptVar * theVar, float theValue);
d56 1
a56 1
      accessFunc (float,       myValue)
d62 1
a62 1
      inline void increment (const float & delta)
d87 1
a87 1
      float myValue_;
@


1.1
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d30 1
a30 1
class WitCoeff: public WitUtil
@

