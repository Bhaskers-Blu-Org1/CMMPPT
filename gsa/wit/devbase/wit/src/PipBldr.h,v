head	1.36;
access;
symbols
	sce_5_01_20080919:1.33
	latest_sce_4_20_20060523:1.13.0.2
	sce_4_20_20060523:1.13
	latest_sce4_20_OSL:1.9.0.2
	sce_4_20_OSL:1.9
	sce_410_withVa:1.3;
locks; strict;
comment	@ * @;


1.36
date	2011.09.28.23.49.53;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2011.09.24.00.28.15;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2011.08.30.20.17.55;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2007.07.31.20.39.46;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2007.07.16.21.00.49;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2007.07.16.19.09.40;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2007.07.13.21.23.19;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.07.13.18.36.27;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2007.07.13.18.22.53;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2007.07.12.21.27.47;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.07.12.20.41.40;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.07.12.19.33.49;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.07.12.16.33.33;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.07.11.19.29.59;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.07.05.21.51.36;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.06.29.21.57.50;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.06.29.15.25.50;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2006.09.05.21.11.06;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2006.08.07.22.24.28;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2006.08.03.17.38.33;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.08.02.22.23.40;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2006.08.02.19.03.01;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2006.05.30.22.36.00;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2006.05.19.22.39.43;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.18.20.58.02;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.11.20.20.31;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.02.17.34.08;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.16.19.30.57;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.16.17.11.33;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.15.23.44.52;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.15.21.57.54;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.14.20.51.23;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2005.11.11.23.29.13;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.06.15.23.07.41;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.14.20.35.13;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.28.19.34.26;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.36
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PipBldrH
#define PipBldrH

//------------------------------------------------------------------------------
// Header file: "PipBldr.h"
//
// Contains the declaration of class PipBldr.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <Schedule.h>
#include <PairStack.h>

//------------------------------------------------------------------------------
// Class PipBldr
//
// "Post-Implosion Pegging Builder"
//
// Responsible for building a post-implosion pegging.
//------------------------------------------------------------------------------

class WitPipBldr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      static void buildPegging (WitPipPgg * thePipPgg);
         //
         // Builds the pegging and stores it in thePipPgg.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipBldr (WitPipPgg *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPipBldr ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      void buildPegging ();
         //
         // Builds the pegging.

      void validateData ();
         //
         // Validates the data for PIP.

      void compSideVols (WitSchedule <WitPart, double> & sideVolSched);
         //
         // Computes side-effects volumes and stores them in sideVolSched.

      void compBopSideVols (WitSchedule <WitPart, double> & sideVolSched);
         //
         // Computes side-effects volumes due to BopEntries and stores them in
         // sideVolSched.

      void compBomSideVols (WitSchedule <WitPart, double> & sideVolSched);
         //
         // Computes side-effects volumes due to BomEntries and stores them in
         // sideVolSched.

      void prtSideVols (const WitSchedule <WitPart, double> & sideVolSched);
         //
         // Prints side-effect volumes stored in sideVolSched.

      void consolidatePegging ();
         //
         // Consolidates each of the attribute peggings.

      void placeShipmentReqs ();
         //
         // Places requirement from the shipment sequence.

      void explodeAllReqs ();
         //
         // Explodes all requirements.

      void fillPartReqs (WitPart * thePart);
         //
         // Fills the requirements on thePart.

      void pegToAllAttsNpo (WitPart * thePart);
         //
         // Pegs the requirements on thePart to all attributes.
         // Uses the new pegging order.

      void pegToAtt (
            WitPart *           thePart,
            void (WitPipBldr::* thePegFunc) (WitPart *, WitPeriod));
         //
         // Pegs the requirements on thePart to one attribute.
         // thePegFunc should be one of the following functions:
         //
         //    netWithSupply
         //    explodeToProd
         //    netWithSideVol

      bool asapPggOrder (WitPart * thePart);
         //
         // Returns true, iff ASAP pegging order is to be used on thePart.

      void pegToAllAttsOpo (WitPart * thePart);
         //
         // Pegs the requirements on thePart to all attributes.
         // Uses the old pegging order.

      void netWithSupply (WitPart * thePart, WitPeriod thePer);
         //
         // Fills (as much as possible) the requirements on thePart in thePer
         // by netting against the supply.

      void explodeToProd (WitPart * thePart, WitPeriod thePer);
         //
         // Fills (as much as possible) the requirements on thePart in thePer
         // by exploding to production.

      void explodeBopEntry (WitBopEntry * theBopEnt, WitPeriod thePer);
         //
         // Fills (as much as possible) the requirements on theBopEnt->myPart ()
         // in thePer by exploding to production.

      void explodeToExecPer (WitBopEntry * theBopEnt, WitPeriod execPer);
         //
         // Fills (as much as possible) the requirements on theBopEnt->myPart ()
         // by exploding to production with execution period execPer.

      void netWithSideVol (WitPart * thePart, WitPeriod thePer);
         //
         // Fills (as much as possible) the requirements on thePart in thePer
         // by netting against the side-effect volume.

      void pegWorkReqToAtt (
            double                   theAttVol,
            WitPipAttPgg <WitPart> * theAttPgg,
            WitPart *                thePart,
            WitPeriod                thePer,
            WitPipReqList *          pgdReqListPtr);
         //
         // Pegs at most theAttVol units of requirements in the working
         // requirement sequence to theAttPgg for thePart in thePer, removing
         // them from the working requirement sequence. If
         // pgdReqListPtr != NULL, it is set to the list of requirements that
         // were pegged.

      void fillOpnReqs (WitOperation * theOpn);
         //
         // Fills the requirements on theOpn.

      void explodeBomEntry (WitBomEntry * theBomEnt, WitPeriod execPer);
         //
         // Explodes the requirements on theBomEnt in execPer.

      void pegSubVols (WitBomEntry * theBomEnt, WitPeriod execPer);
         //
         // Pegs the subVols of the substitutes for theBomEnt in execPer.

      void explodeConsEntry (
            WitConsEntry * theConsEnt,
            WitPeriod      execPer,
            double         totExecVol);
         // 
         // Explodes no more than totExecVol units of the requirements on
         // theConsEnt->myOperation () in execPer through theConsEnt.

      void addToIncPegVol (double pegVol, WitPipReqSrc * theReqSrc);
         //
         // Prepares to peg pegVol units to all of the shipments in theReqSrc by
         // adding pegVol to the appropriate locations in incPegVol_.

      void dispMaxPegRatio ();
         //
         // Computes and prints the maximum pegging ratio data.

      //------------------------------------------------------------------------
      // Debug printing functions.
      //------------------------------------------------------------------------

      void prtMaxPegRatio (
            double         ratio,
            WitOperation * theOpn,
            WitPeriod      execPer);
         //
         // Prints the maximum pegging ratio data.

      noCopyCtorAssign (WitPipBldr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPipPgg * const myPgg_;
         //
         // The PipPgg that owns this PipBldr.

      WitPipReqMgr * myReqMgr_;
         //
         // The PipReqMgr owned by this PipBldr.

      WitPipPartReqMgr * myPartReqMgr_;
         //
         // The PipPartReqMgr owned by this PipBldr.

      WitExecPerSched <WitBopEntry> * myExecPerSched_;
         //
         // The ExecPerSched owned by this PipBldr.

      WitSchedule <WitPart, double> sideVol_;
         //
         // sideVol_ (thePart)[thePer] is the side-effect volume of thePart in
         // thePer.

      WitSchedule <WitDemand, bool> addedTo_;
         //
         // During a call to addToIncPegVol (...), addedTo_ (theDemand)[shipPer]
         // is true, iff the function has already added to
         // incPegVol_ (theDemand)[shipPer].

      WitSchedule <WitDemand, double> incPegVol_;
         //
         // incPegVol_ (theDemand)[shipPer] is the amount of the current 
         // attribute for the current SrcComp in the current pegging period that
         // is to be pegged to theDemand in shipPer.

      WitDemPerStack posDemPers_;
         //
         // The set of pairs (theDemand, shipPer) such that
         // incPegVol_ (theDemand)[shipPer] > 0.
   };

#endif
@


1.35
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.34
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d32 2
a33 104
{
public:

//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------

static void buildPegging (WitPipPgg * thePipPgg);
//
// Builds the pegging and stores it in thePipPgg.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPipBldr (WitPipPgg *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitPipBldr ();

//------------------------------------------------------------------------
// Other private member functions.
//------------------------------------------------------------------------

void buildPegging ();
//
// Builds the pegging.

void validateData ();
//
// Validates the data for PIP.

void compSideVols (WitSchedule <WitPart, double> & sideVolSched);
//
// Computes side-effects volumes and stores them in sideVolSched.

void compBopSideVols (WitSchedule <WitPart, double> & sideVolSched);
//
// Computes side-effects volumes due to BopEntries and stores them in
// sideVolSched.

void compBomSideVols (WitSchedule <WitPart, double> & sideVolSched);
//
// Computes side-effects volumes due to BomEntries and stores them in
// sideVolSched.

void prtSideVols (const WitSchedule <WitPart, double> & sideVolSched);
//
// Prints side-effect volumes stored in sideVolSched.

void consolidatePegging ();
//
// Consolidates each of the attribute peggings.

void placeShipmentReqs ();
//
// Places requirement from the shipment sequence.

void explodeAllReqs ();
//
// Explodes all requirements.

void fillPartReqs (WitPart * thePart);
//
// Fills the requirements on thePart.

void pegToAllAttsNpo (WitPart * thePart);
//
// Pegs the requirements on thePart to all attributes.
// Uses the new pegging order.

void pegToAtt (
WitPart *           thePart,
void (WitPipBldr::* thePegFunc) (WitPart *, WitPeriod));
//
// Pegs the requirements on thePart to one attribute.
// thePegFunc should be one of the following functions:
//
//    netWithSupply
//    explodeToProd
//    netWithSideVol

bool asapPggOrder (WitPart * thePart);
//
// Returns true, iff ASAP pegging order is to be used on thePart.

void pegToAllAttsOpo (WitPart * thePart);
//
// Pegs the requirements on thePart to all attributes.
// Uses the old pegging order.

void netWithSupply (WitPart * thePart, WitPeriod thePer);
//
// Fills (as much as possible) the requirements on thePart in thePer
// by netting against the supply.
d35 219
a253 117
void explodeToProd (WitPart * thePart, WitPeriod thePer);
//
// Fills (as much as possible) the requirements on thePart in thePer
// by exploding to production.

void explodeBopEntry (WitBopEntry * theBopEnt, WitPeriod thePer);
//
// Fills (as much as possible) the requirements on theBopEnt->myPart ()
// in thePer by exploding to production.

void explodeToExecPer (WitBopEntry * theBopEnt, WitPeriod execPer);
//
// Fills (as much as possible) the requirements on theBopEnt->myPart ()
// by exploding to production with execution period execPer.

void netWithSideVol (WitPart * thePart, WitPeriod thePer);
//
// Fills (as much as possible) the requirements on thePart in thePer
// by netting against the side-effect volume.

void pegWorkReqToAtt (
double                   theAttVol,
WitPipAttPgg <WitPart> * theAttPgg,
WitPart *                thePart,
WitPeriod                thePer,
WitPipReqList *          pgdReqListPtr);
//
// Pegs at most theAttVol units of requirements in the working
// requirement sequence to theAttPgg for thePart in thePer, removing
// them from the working requirement sequence. If
// pgdReqListPtr != NULL, it is set to the list of requirements that
// were pegged.

void fillOpnReqs (WitOperation * theOpn);
//
// Fills the requirements on theOpn.

void explodeBomEntry (WitBomEntry * theBomEnt, WitPeriod execPer);
//
// Explodes the requirements on theBomEnt in execPer.

void pegSubVols (WitBomEntry * theBomEnt, WitPeriod execPer);
//
// Pegs the subVols of the substitutes for theBomEnt in execPer.

void explodeConsEntry (
WitConsEntry * theConsEnt,
WitPeriod      execPer,
double         totExecVol);
//
// Explodes no more than totExecVol units of the requirements on
// theConsEnt->myOperation () in execPer through theConsEnt.

void addToIncPegVol (double pegVol, WitPipReqSrc * theReqSrc);
//
// Prepares to peg pegVol units to all of the shipments in theReqSrc by
// adding pegVol to the appropriate locations in incPegVol_.

void dispMaxPegRatio ();
//
// Computes and prints the maximum pegging ratio data.

//------------------------------------------------------------------------
// Debug printing functions.
//------------------------------------------------------------------------

void prtMaxPegRatio (
double         ratio,
WitOperation * theOpn,
WitPeriod      execPer);
//
// Prints the maximum pegging ratio data.

noCopyCtorAssign (WitPipBldr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitPipPgg * const myPgg_;
//
// The PipPgg that owns this PipBldr.

WitPipReqMgr * myReqMgr_;
//
// The PipReqMgr owned by this PipBldr.

WitPipPartReqMgr * myPartReqMgr_;
//
// The PipPartReqMgr owned by this PipBldr.

WitExecPerSched <WitBopEntry> * myExecPerSched_;
//
// The ExecPerSched owned by this PipBldr.

WitSchedule <WitPart, double> sideVol_;
//
// sideVol_ (thePart)[thePer] is the side-effect volume of thePart in
// thePer.

WitSchedule <WitDemand, bool> addedTo_;
//
// During a call to addToIncPegVol (...), addedTo_ (theDemand)[shipPer]
// is true, iff the function has already added to
// incPegVol_ (theDemand)[shipPer].

WitSchedule <WitDemand, double> incPegVol_;
//
// incPegVol_ (theDemand)[shipPer] is the amount of the current
// attribute for the current SrcComp in the current pegging period that
// is to be pegged to theDemand in shipPer.

WitDemPerStack posDemPers_;
//
// The set of pairs (theDemand, shipPer) such that
// incPegVol_ (theDemand)[shipPer] > 0.
};
@


1.33
log
@Stochastic Implosion
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d32 104
a135 2
   {
   public:
d137 117
a253 219
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      static void buildPegging (WitPipPgg * thePipPgg);
         //
         // Builds the pegging and stores it in thePipPgg.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipBldr (WitPipPgg *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPipBldr ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      void buildPegging ();
         //
         // Builds the pegging.

      void validateData ();
         //
         // Validates the data for PIP.

      void compSideVols (WitSchedule <WitPart, double> & sideVolSched);
         //
         // Computes side-effects volumes and stores them in sideVolSched.

      void compBopSideVols (WitSchedule <WitPart, double> & sideVolSched);
         //
         // Computes side-effects volumes due to BopEntries and stores them in
         // sideVolSched.

      void compBomSideVols (WitSchedule <WitPart, double> & sideVolSched);
         //
         // Computes side-effects volumes due to BomEntries and stores them in
         // sideVolSched.

      void prtSideVols (const WitSchedule <WitPart, double> & sideVolSched);
         //
         // Prints side-effect volumes stored in sideVolSched.

      void consolidatePegging ();
         //
         // Consolidates each of the attribute peggings.

      void placeShipmentReqs ();
         //
         // Places requirement from the shipment sequence.

      void explodeAllReqs ();
         //
         // Explodes all requirements.

      void fillPartReqs (WitPart * thePart);
         //
         // Fills the requirements on thePart.

      void pegToAllAttsNpo (WitPart * thePart);
         //
         // Pegs the requirements on thePart to all attributes.
         // Uses the new pegging order.

      void pegToAtt (
            WitPart *           thePart,
            void (WitPipBldr::* thePegFunc) (WitPart *, WitPeriod));
         //
         // Pegs the requirements on thePart to one attribute.
         // thePegFunc should be one of the following functions:
         //
         //    netWithSupply
         //    explodeToProd
         //    netWithSideVol

      bool asapPggOrder (WitPart * thePart);
         //
         // Returns true, iff ASAP pegging order is to be used on thePart.

      void pegToAllAttsOpo (WitPart * thePart);
         //
         // Pegs the requirements on thePart to all attributes.
         // Uses the old pegging order.

      void netWithSupply (WitPart * thePart, WitPeriod thePer);
         //
         // Fills (as much as possible) the requirements on thePart in thePer
         // by netting against the supply.

      void explodeToProd (WitPart * thePart, WitPeriod thePer);
         //
         // Fills (as much as possible) the requirements on thePart in thePer
         // by exploding to production.

      void explodeBopEntry (WitBopEntry * theBopEnt, WitPeriod thePer);
         //
         // Fills (as much as possible) the requirements on theBopEnt->myPart ()
         // in thePer by exploding to production.

      void explodeToExecPer (WitBopEntry * theBopEnt, WitPeriod execPer);
         //
         // Fills (as much as possible) the requirements on theBopEnt->myPart ()
         // by exploding to production with execution period execPer.

      void netWithSideVol (WitPart * thePart, WitPeriod thePer);
         //
         // Fills (as much as possible) the requirements on thePart in thePer
         // by netting against the side-effect volume.

      void pegWorkReqToAtt (
            double                   theAttVol,
            WitPipAttPgg <WitPart> * theAttPgg,
            WitPart *                thePart,
            WitPeriod                thePer,
            WitPipReqList *          pgdReqListPtr);
         //
         // Pegs at most theAttVol units of requirements in the working
         // requirement sequence to theAttPgg for thePart in thePer, removing
         // them from the working requirement sequence. If
         // pgdReqListPtr != NULL, it is set to the list of requirements that
         // were pegged.

      void fillOpnReqs (WitOperation * theOpn);
         //
         // Fills the requirements on theOpn.

      void explodeBomEntry (WitBomEntry * theBomEnt, WitPeriod execPer);
         //
         // Explodes the requirements on theBomEnt in execPer.

      void pegSubVols (WitBomEntry * theBomEnt, WitPeriod execPer);
         //
         // Pegs the subVols of the substitutes for theBomEnt in execPer.

      void explodeConsEntry (
            WitConsEntry * theConsEnt,
            WitPeriod      execPer,
            double         totExecVol);
         // 
         // Explodes no more than totExecVol units of the requirements on
         // theConsEnt->myOperation () in execPer through theConsEnt.

      void addToIncPegVol (double pegVol, WitPipReqSrc * theReqSrc);
         //
         // Prepares to peg pegVol units to all of the shipments in theReqSrc by
         // adding pegVol to the appropriate locations in incPegVol_.

      void dispMaxPegRatio ();
         //
         // Computes and prints the maximum pegging ratio data.

      //------------------------------------------------------------------------
      // Debug printing functions.
      //------------------------------------------------------------------------

      void prtMaxPegRatio (
            double         ratio,
            WitOperation * theOpn,
            WitPeriod      execPer);
         //
         // Prints the maximum pegging ratio data.

      noCopyCtorAssign (WitPipBldr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPipPgg * const myPgg_;
         //
         // The PipPgg that owns this PipBldr.

      WitPipReqMgr * myReqMgr_;
         //
         // The PipReqMgr owned by this PipBldr.

      WitPipPartReqMgr * myPartReqMgr_;
         //
         // The PipPartReqMgr owned by this PipBldr.

      WitExecPerSched <WitBopEntry> * myExecPerSched_;
         //
         // The ExecPerSched owned by this PipBldr.

      WitSchedule <WitPart, double> sideVol_;
         //
         // sideVol_ (thePart)[thePer] is the side-effect volume of thePart in
         // thePer.

      WitSchedule <WitDemand, bool> addedTo_;
         //
         // During a call to addToIncPegVol (...), addedTo_ (theDemand)[shipPer]
         // is true, iff the function has already added to
         // incPegVol_ (theDemand)[shipPer].

      WitSchedule <WitDemand, double> incPegVol_;
         //
         // incPegVol_ (theDemand)[shipPer] is the amount of the current 
         // attribute for the current SrcComp in the current pegging period that
         // is to be pegged to theDemand in shipPer.

      WitDemPerStack posDemPers_;
         //
         // The set of pairs (theDemand, shipPer) such that
         // incPegVol_ (theDemand)[shipPer] > 0.
   };
@


1.32
log
@ASAP Pegging Order
@
text
@d228 1
a228 1
      WitExecPerSched * myExecPerSched_;
@


1.31
log
@ASAP Pegging Order
@
text
@d69 4
@


1.30
log
@ASAP pegging order
@
text
@d119 4
@


1.29
log
@ASAP Pegging Order
@
text
@d156 4
a159 3
         // Pegs at most theAttVol units of requirements in workReqSeq_ to
         // theAttPgg for thePart in thePer, removing them from workReqSeq_.
         // If pgdReqListPtr != NULL, it is set to the list of requirements that
@


1.28
log
@ASAP Pegging Order
@
text
@a90 4
      void prtInfeas ();
         //
         // Prints infeasibility data, as appropriate.

a160 4
      void recordInfeas (WitPart * thePart);
         //
         // Records all unfilled requirements for thePart as infeasibility.

a243 13

      //------------------------------------------------------------------------
      // Maximum infeasibility data.
      //------------------------------------------------------------------------

      double maxInfeas_;
         //
         // The maximum infesibility encountered.

      WitPart * maxInfeasPart_;
      WitPeriod maxInfeasPer_;
         //
         // The Part and period at which maxInfeas_ was encountered.
@


1.27
log
@ASAP Pegging Order
@
text
@a68 8
      void compNonExcStockVol (
            WitMaterial *      theMat,
            WitTVec <double> & nonExcStockVol);
         //
         // On return, nonExcStockVol[thePer] will be the portion of
         // theMat->stockVol ()[thePer] that does not come from excess
         // supplyVol.

a72 7
      void recInfeas (
            WitPart * thePart,
            WitPeriod thePer,
            double    infeasVol);
         //
         // Records infeasVol units of infeasibility at thePart in thePer.

@


1.26
log
@ASAP Pegging Order
@
text
@d238 1
a238 1
      WitPipMatPgr * myMatPgr_;
d240 1
a240 1
         // The PipMatPgr owned by this PipBldr.
@


1.25
log
@ASAP Pegging Order
@
text
@a32 2
   friend class WitPipMatPgr;

d180 4
@


1.24
log
@ASAP Pegging Order
@
text
@d120 62
@


1.23
log
@ASAP Pegging Order
@
text
@d176 1
a176 2
         // The PipMatPgr owned by this PipBldr in new material pegging mode;
         // otherwise NULL.
@


1.22
log
@ASAP Pegging Order
@
text
@a119 44
      void fillPartReqsOpo (WitPart * thePart);
         //
         // Fills the requirements on thePart.
         // Uses the old pegging order.

      void fillCurReqs (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills the requirements on thePart in fillPer, after they have been
         // loaded as current requirements.

      void netWithSupply (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirements on thePart in fillPer
         // by netting against the supply.

      void explodeToProd (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirements on thePart in fillPer
         // by exploding to production.

      void explodeBopEntry (WitBopEntry * theBopEnt, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirements on theBopEnt->myPart ()
         // in fillPer by exploding to production.

      void explodeToExecPer (WitBopEntry * theBopEnt, WitPeriod execPer);
         //
         // Fills (as much as possible) the requirements on theBopEnt->myPart ()
         // by exploding to production with execution period execPer.

      void explodeToStock (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirements on thePart in fillPer
         // by exploding to stock.

      void netWithSideVol (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirements on thePart in fillPer
         // by netting against the side-effect volume.

      void recordInfeas (WitPart * thePart, WitPeriod thePer);
         //
         // Records infeasibility at thePart in thePer, in any.

a152 14
      void prtFillReqs (WitPart * thePart, WitPeriod fillPer);
         //
         // Prints an indication that requirements are being filled for thePart
         // in fillPer.

      void prtNetToSupply (
            WitPart *      thePart,
            WitPeriod      thePer,
            double         incSuppVol,
            WitPipReqSrc * theReqSrc);
         //
         // Prints data for netting against supply incSuppVol units of the
         // requirement volume for thePart in thePer for theReqSrc.

a204 6
      WitTVec <double> nonExcStockVol_;
         //
         // If the current Part is a Material, theMat, nonExcStockVol_[thePer]
         // is the portion of theMat->stockVol ()[thePer] that does not come
         // from excess supplyVol.

@


1.21
log
@ASAP Pegging Order.
@
text
@a19 1
#include <PtrSched.h>
a89 5
      void recUnmatched (WitPart * thePart, double unmatchVol);
         //
         // Records the fact that unmatchVol units of pegging for thePart could
         // not be matched to requirements.

a193 22
      // Private member functions for NPO mode.
      //------------------------------------------------------------------------

      void fillStMatReqsNpo (WitMaterial * theMat);
         //
         // Fills the requirements on theMat, assuming it has stock.
         // Uses the new pegging order.

      void pegToAttNpo (
            void (WitPipBldr::* thePegFunc) (WitPart *, WitPeriod),
            WitMaterial *       theMat);
         //
         // Pegs the requirements on theMat to one attribute in NPO mode.
         // thePegFunc should be one of the following functions:
         //
         //    netWithSupply
         //    explodeToProd
         //    netWithSideVol

      accessNonNull (WitPipMatPgr *, myMatPgr)

      //------------------------------------------------------------------------
a268 12
      WitTVec <double> npoNetStockVol_;
         //
         // In NPO mode, if the current Part is a Material, theMat,
         // npoNetStockVol_[thePer] is the portion of
         // theMat->stockVol ()[thePer] that is available for pegging.
         // 0, if the current Part is a Capacity.

      bool pggStMatNpo_;
         //
         // True, iff a Material with stock is currently being pegged in NPO
         // mode.

a280 8

      double npoMaxUnmatchVol_;
         //
         // The maximum unmatched pegging volume encountered in NPO mode.

      WitPart * npoMaxUnmatchPart_;
         //
         // The Part at which npoMaxUnmatchVol_ was encountered.
@


1.20
log
@ASAP Pegging Order
@
text
@d34 2
a45 14
      void compNonExcStockVol (
            WitMaterial *      theMat,
            WitTVec <double> & nonExcStockVol);
         //
         // On return, nonExcStockVol[thePer] will be the portion of
         // theMat->stockVol ()[thePer] that does not come from excess
         // supplyVol.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPipReqMgr *, myReqMgr)

d72 8
@


1.19
log
@NSTN residualVols
@
text
@d37 28
d77 1
a77 1
      // Other public member functions.
a83 14
   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void compNonExcStockVol (
            WitMaterial *      theMat,
            WitTVec <double> & nonExcStockVol);
         //
         // On return, nonExcStockVol[thePer] will be the portion of
         // theMat->stockVol ()[thePer] that does not come from excess
         // supplyVol.

d223 2
d260 1
a260 1
      bool pggBuilt_;
d262 1
a262 1
         // true, iff this PipBldr has already built the pegging.
d264 1
a264 1
      WitPipReqMgr * myReqMgr_;
d266 2
a267 1
         // The PipReqMgr owned by this PipBldr.
@


1.18
log
@execVol pegging for BOP entries.
@
text
@a61 4
      double compExcessVol (WitPart * thePart, WitPeriod thePer);
         //
         // Computes and returns the excess supplyVol for thePart in thePer.

@


1.17
log
@GPIP migration.
@
text
@d262 1
a262 1
         // sideVol_ (thePart)[thePer] is the side-efffect volume of thePart in
@


1.16
log
@GPIP migration.
@
text
@d184 1
a184 1
      void addToIncPegVol (double pegVol, WitGpipReqSrc * theReqSrc);
d223 4
a226 4
            WitPart *       thePart,
            WitPeriod       thePer,
            double          incSuppVol,
            WitGpipReqSrc * theReqSrc);
d252 1
a252 1
      WitGpipReqMgr * myReqMgr_;
d254 1
a254 1
         // The GpipReqMgr owned by this PipBldr.
@


1.15
log
@GPIP migration.
@
text
@d16 1
a16 3
// Contains the declaration of the following class:
//
//    PipBldr
d20 3
d26 1
a29 6
//
// Class Hierarchy:
//
// ProbAssoc
//    PipBldr
//       GpipBldr
d37 6
d46 1
a46 1
      virtual ~WitPipBldr ();
d52 1
a52 5
      static WitPipBldr * newInstance (WitPipPgg * thePgg);
         //
         // Constructs and returns a new GpipBldr for thePgg.

      virtual void buildPegging ();
d56 1
a56 1
   protected:
d59 1
a59 7
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipBldr (WitPipPgg *);

      //------------------------------------------------------------------------
      // Other protected member functions.
a89 18
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPipPgg *,       myPgg)
      accessFunc (WitExecPerSched *, myExecPerSched)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual void buildPggSpec () = 0;
         //
         // Does those aspects of building the pegging that are specific to the
         // individual vs. group case.

d112 126
d252 4
d260 40
a312 4
      //------------------------------------------------------------------------
      // Maximum infeasibility data.
      //------------------------------------------------------------------------

@


1.14
log
@New PIP pegging order.
@
text
@a32 1
//       IpipBldr
d52 1
a52 2
         // Constructs and returns a new IpipBldr or GpipBldr for thePgg, as
         // appropriate.
@


1.13
log
@New PIP pegging order.
@
text
@d95 5
d170 12
@


1.12
log
@Fixed a bug in IPIP and GPIP.
@
text
@a33 1
//       IpipBldrV2
@


1.11
log
@New PIP pegging order.
@
text
@d73 12
@


1.10
log
@Updated the copyright date on all source files.
@
text
@d34 1
@


1.9
log
@GPIP
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.8
log
@GPIP
@
text
@d72 4
d101 14
@


1.7
log
@GPIP
@
text
@d69 11
d101 4
d122 13
@


1.6
log
@GPIP
@
text
@d86 4
@


1.5
log
@[shared-resource pegging]
@
text
@d16 3
a18 1
// Contains the declaration of class PipBldr.
a20 2
#include <Schedule.h>
#include <PtrSched.h>
d25 1
d27 1
a27 3
// "Post-Implosion Pegging Builder"
// Responsible for building the post-implosion pegging.
// Uses the new pipShare method.
d33 2
a41 6
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipBldr (WitUrpCoord *);

      //------------------------------------------------------------------------
d45 1
a45 1
      ~WitPipBldr ();
d51 6
a56 1
      void buildPegging ();
d60 1
a60 1
   private:
d63 1
a63 1
      // Private member functions.
d66 1
a66 3
      void initUnpeggedScheds ();
         //
         // Initializes the unpegged schedules.
d68 3
a70 3
      void normalizeShares ();
         //
         // Computes the values of normShare_.
d72 2
a73 3
      void prtNormShares ();
         //
         // Prints the values of normShare_.
d75 1
a75 3
      void compSideVols ();
         //
         // Computes side-effects volumes.
d77 3
a79 90
      void compBopSideVols ();
         //
         // Computes side-effects volumes due to BopEntries.

      void compBomSideVols ();
         //
         // Computes side-effects volumes due to BomEntries.

      void prtSideVols ();
         //
         // Prints side-effect volumes.

      void findExecPers ();
         //
         // Sets up expExecPers_.

      void pegShipment (double incShipVol);
         //
         // Pegs incShipVol units of shipVol to curTarg_.

      void pegPart (WitPart * thePart, WitPeriod pegPer);
         //
         // Pegs the reqVol of thePart in pegPer.

      void pegToStock (WitPart * thePart, WitPeriod pegPer, double & netReqVol);
         //
         // Pegs up to netReqVol units of thePart in pegPer to stock.
         // On return, netReqVol is amount that didn't get pegged.

      void pegToSupply (
            WitPart * thePart,
            WitPeriod pegPer,
            double &  netReqVol);
         //
         // Pegs up to netReqVol units of supply of thePart in pegPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegToSide (
            WitPart * thePart,
            WitPeriod pegPer,
            double &  netReqVol);
         //
         // Pegs up to netReqVol units of side-effect of thePart in pegPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegToProd (WitPart * thePart, WitPeriod expPer, double & netReqVol);
         //
         // Does pegging by explosion for netReqVol units on thePart in expPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegBopEnt (
            WitBopEntry * theBopEnt,
            WitPeriod     execPer,
            double &      netReqVol);
         //
         // Does pegging by explosion for netReqVol units through theBopEnt in
         // execPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegOpn (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         pgdExecVol);
         //
         // Does pegging by explosion of pgdExecVol units of execVol through
         // theOpn in execPer.
 
      void pegBomEntWithSubs (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            double        pgdExecVol);
         //
         // Does pegging by explosion of pgdExecVol units of execVol through
         // theBomEnt and its substitutes in execPer.

      void pegConsEnt (
            WitConsEntry * theConsEnt,
            WitPeriod      execPer,
            double         pgdExecVol);
         //
         // Does pegging by explosion of pgdExecVol units of execVol through
         // theConsEnt in execPer.

      double minAndNet (double & val1, double & val2);
         //
         // Returns the min of val1 and val2 after substracting it from both.

      void consolidatePegLists ();
         //
         // Consolidates the PipPegLists for the current PipTarg.
d81 1
a81 1
      void prtInfeas ();
d83 2
a84 1
         // Prints infeasibility data, as appropriate.
d92 1
a92 1
      WitUrpCoord * const myUrpCoord_;
d94 1
a94 48
         // The UrpCoord that owns this PipBldr.

      WitPipTarg * curTarg_;
         //
         // The PipTarg currently being pegged, if any; else NULL.

      WitReqSched * myReqSched_;
         //
         // The ReqSched onwed by this PipBldr.
                                
      WitPtrSched <WitBopEntry, WitVector <WitPeriod> > expExecPers_;
         //
         // If expExecPers_ (theBopEnt, expPer) != NULL, then it is a ptr to a
         // vector listing all of the periods, execPer, such that:
         //    theBopEnt->impactPeriod ()[execPer] == expPer and
         //    theBopEnt->execPerOKForExp (execPer) is true.
         // and there are at least two such execPers.

      WitSchedule <WitBopEntry, double> normShare_;
         //
         // normShare_ (theBopEnt)[execPer] is theBopEnt->pipShare_[execPer],
         // normalized so that the values for a given Operation and execPer sum
         // to 1.

      //------------------------------------------------------------------------
      // Unpegged Volume Schedules
      // Each of these schedules stores the unpegged portion of the
      // corresponding Component data (also side-effect volume).
      //------------------------------------------------------------------------

      WitSchedule <WitBopEntry, double> unpgdCoexVol_;
      WitSchedule <WitBomEntry, double> unpgdNonSubVol_;
      WitSchedule <WitSubEntry, double> unpgdSubVol_;
      WitSchedule <WitMaterial, double> unpgdStockVol_;
      WitSchedule <WitPart,     double> unpgdSupplyVol_;
      WitSchedule <WitPart,     double> unpgdSideVol_;

      //------------------------------------------------------------------------
      // Working Schedules to be used by PipPegList::consolidate.
      //------------------------------------------------------------------------

      WitSchedule <WitOperation, double> workOpnSched_;
      WitSchedule <WitSubEntry,  double> workSubSched_;
      WitSchedule <WitPart,      double> workPartSched_;

      //------------------------------------------------------------------------
      // Maximum infeasibility data.
      //------------------------------------------------------------------------
d96 1
a96 1
      double maxInfeas_;
d98 1
a98 1
         // The maximum infesibility encountered.
d100 1
a100 3
      WitPipTarg * maxInfeasTarg_;
      WitPart *    maxInfeasPart_;
      WitPeriod    maxInfeasPer_;
d102 1
a102 1
         // The PipTarg, Part and period at which maxInfeas_ was encountered.
@


1.4
log
@[shared-resource pegging]
@
text
@@


1.3
log
@New pipShare.
@
text
@d44 1
a44 1
      WitPipBldr (WitPipPegMgr *);
d183 1
a183 1
      WitPipPegMgr * const myPegMgr_;
d185 1
a185 1
         // The PipPegMgr that owns this PipBldr.
@


1.2
log
@Began work on the new interpretation of pipShare.
@
text
@d141 1
a141 1
      void pegBomEnts (
d146 2
a147 2
         // Does pegging by explosion of pgdExecVol units of execVol through the
         // the BomEntries of theOpn in execPer.
d215 6
a220 6
      WitSchedule <WitOperation, double> unpgdExecVol_;
      WitSchedule <WitBomEntry,  double> unpgdNonSubVol_;
      WitSchedule <WitSubEntry,  double> unpgdSubVol_;
      WitSchedule <WitMaterial,  double> unpgdStockVol_;
      WitSchedule <WitPart,      double> unpgdSupplyVol_;
      WitSchedule <WitPart,      double> unpgdSideVol_;
@


1.1
log
@Tie Breaking Prop-Rt.
@
text
@d28 1
d215 1
a215 1
      WitSchedule <WitBopEntry,  double> unpgdExecVol_;
@

