head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	2011.09.28.23.50.12;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.09.24.00.28.39;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.08.30.20.18.11;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2010.02.05.20.41.53;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2010.01.06.20.10.32;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.12.30.20.11.20;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.12.30.20.02.28;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.12.29.23.24.33;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.29.20.42.58;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.12.29.20.17.18;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.29.19.39.06;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.29.16.33.45;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef SglObjVecIRH
#define SglObjVecIRH

//------------------------------------------------------------------------------
// Header file: "SglObjVecIR.h"
//
// Contains the declaration of class SglObjVecIR.
//------------------------------------------------------------------------------

#include <ObjVecIR.h>
#include <FlexVec.h>

//------------------------------------------------------------------------------
// Class SglObjVecIR
//
// "Single Objective Vector Internal Representation"
//
// Internal Representation of a vector of doubles that holds the value of an
// objective function attribute in single objective mode.
//
// Class hierarchy:
//
//    ObjVecIR
//      SglObjVecIR
//
// Implemented in ObjVec.C.
//------------------------------------------------------------------------------

class WitSglObjVecIR: public WitObjVecIR
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSglObjVecIR (WitProblem *, double initValue);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSglObjVecIR ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void            copyInto       (WitObjVecIR *);
      virtual void            copyFrom       (WitSglObjVecIR *);
      virtual void            writeDataMulti (const char *,
                                              WitDelComp *,
                                              WitObjective *);
      virtual void            display        (WitMsgID,
                                              WitProblem *);
      virtual WitDblFlexVec & curDblFlexVec  ();
         //
         // Overrides from class ObjVecIR.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitSglObjVecIR);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDblFlexVec myDblFlexVec_;
         //
         // The vector of doubles represented by this ObjVecIR.
   };

#endif
@


1.11
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.10
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d39 2
a40 12
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitSglObjVecIR (WitProblem *, double initValue);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d42 43
a84 33
virtual ~WitSglObjVecIR ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

virtual void            copyInto       (WitObjVecIR *);
virtual void            copyFrom       (WitSglObjVecIR *);
virtual void            writeDataMulti (const char *,
WitDelComp *,
WitObjective *);
virtual void            display        (WitMsgID,
WitProblem *);
virtual WitDblFlexVec & curDblFlexVec  ();
//
// Overrides from class ObjVecIR.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitSglObjVecIR);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitDblFlexVec myDblFlexVec_;
//
// The vector of doubles represented by this ObjVecIR.
};
@


1.9
log
@multi-obj mode
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d39 12
a50 2
   {
   public:
d52 33
a84 43
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSglObjVecIR (WitProblem *, double initValue);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSglObjVecIR ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void            copyInto       (WitObjVecIR *);
      virtual void            copyFrom       (WitSglObjVecIR *);
      virtual void            writeDataMulti (const char *,
                                              WitDelComp *,
                                              WitObjective *);
      virtual void            display        (WitMsgID,
                                              WitProblem *);
      virtual WitDblFlexVec & curDblFlexVec  ();
         //
         // Overrides from class ObjVecIR.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitSglObjVecIR);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDblFlexVec myDblFlexVec_;
         //
         // The vector of doubles represented by this ObjVecIR.
   };
@


1.8
log
@Multi-objective mode
@
text
@d25 1
a25 1
// "Single-Objective Vector Internal Representation"
d28 1
a28 1
// objective function attribute in single-objective mode.
@


1.7
log
@Multi-Objective Mode
@
text
@d58 8
a65 9
      virtual void            copyInto        (WitObjVecIR *);
      virtual void            copyFrom        (WitSglObjVecIR *);
      virtual void            writeDataMulti  (const char *,
                                               WitDelComp *,
                                               WitObjective *);
      virtual void            display         (WitMsgID,
                                               WitProblem *);
      virtual WitDblFlexVec & curDblFlexVec   ();
      virtual WitDblFlexVec & myDblFlexVecFor (WitObjective *);
@


1.6
log
@Multi-Objective Mode
@
text
@d58 2
a59 2
      virtual void            copyInto        (WitObjVecIR *)          const;
      virtual void            copyFrom        (const WitSglObjVecIR *);
d62 3
a64 2
                                               WitObjective *)         const;
      virtual void            display         (WitMsgID, WitProblem *) const;
@


1.5
log
@Multi-Objective Mode
@
text
@d58 8
a65 7
      virtual void            copyInto       (WitObjVecIR *)          const;
      virtual void            copyFrom       (const WitSglObjVecIR *);
      virtual void            writeDataMulti (const char *,
                                              WitDelComp *,
                                              WitObjective *)         const;
      virtual void            display        (WitMsgID, WitProblem *) const;
      virtual WitDblFlexVec & curDblFlexVec  ();
@


1.4
log
@Multi-Objective Mode
@
text
@d46 1
a46 1
      WitSglObjVecIR (WitProblem *);
@


1.3
log
@Multi-Objective Mode
@
text
@d58 7
a64 8
      virtual void            copyInto        (WitObjVecIR *)          const;
      virtual void            copyFrom        (const WitSglObjVecIR *);
      virtual void            writeDataSingle (const char *)           const;
      virtual void            writeDataMulti  (const char *,
                                               WitDelComp *,
                                               WitObjective *)         const;
      virtual void            display         (WitMsgID, WitProblem *) const;
      virtual WitDblFlexVec & curDblFlexVec   ();
@


1.2
log
@Multi-Objective Mode
@
text
@d58 1
a58 1
      virtual void            copyInto        (WitObjVecIR *)  const;
d60 1
a60 1
      virtual void            writeDataSingle (const char *)   const;
d63 2
a64 2
                                               WitObjective *) const;
      virtual void            display         (WitMsgID)       const;
@


1.1
log
@Multi-Objective Mode
@
text
@d58 8
a65 8
      virtual       void             copyFrom        (const WitObjVecIR *);
      virtual       void             writeDataSingle (const char *)   const;
      virtual       void             writeDataMulti  (const char *,
                                                      WitDelComp *,
                                                      WitObjective *) const;
      virtual       void             display         (WitMsgID)       const;
      virtual const WitSglObjVecIR * thisSglObjVecIR ()               const;
      virtual       WitDblFlexVec &  curDblFlexVec   ();
@

