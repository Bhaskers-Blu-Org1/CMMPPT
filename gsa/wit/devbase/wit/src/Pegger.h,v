head	1.18;
access;
symbols
	sce_5_01_20080919:1.15
	latest_sce_4_20_20060523:1.13.0.2
	sce_4_20_20060523:1.13
	latest_sce4_20_OSL:1.12.0.2
	sce_4_20_OSL:1.12
	sce_410_withVa:1.11
	sce_4_05_20040511:1.11
	sce_4_00_20040201:1.11
	nextGenBranch:1.10.0.2
	nextGenRoot:1.10
	sce_3_30_20030627:1.10
	EndRw-branch:1.9.0.4
	Root-of-EndRw:1.9
	rwToStl:1.9.0.2
	latest_sce_3_10_20010924:1.3.0.2
	sce_3_10_20010924:1.3;
locks; strict;
comment	@ * @;


1.18
date	2011.09.28.23.49.51;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.09.24.00.28.13;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.08.30.20.17.53;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.11.12.20.27.37;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.02.28.20.04.58;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2006.05.02.17.34.07;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2005.09.30.22.50.00;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.24.17.11.17;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.27.23.26.13;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.09.04.19.14.57;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.02.17.03.36;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.02.14.56.51;	author austel;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.12.23.36.14;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.12.20.09.39;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.11.22.48.30;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.01.14.55.31;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.27.21.28.39;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.25.16.08.18;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PeggerH
#define PeggerH

//------------------------------------------------------------------------------
// Header file: "Pegger.h"
//
// Contains the declaration of the following class Pegger.
//------------------------------------------------------------------------------

#include <ObjStack.h>
#include <PairStack.h>
#include <PtrSched.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class Pegger
//
// Responsible for creating and maintaining the pegging of execVols and subVols
// to Demands in heuristic allocation.
//
// Implemented in Pegging.C.
//------------------------------------------------------------------------------

class WitPegger: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPegger (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPegger ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void setUpPeggedHeurAlloc (WitHeurAtor *);
         //
         // Sets up pegging for the beginning of heuristic allocation.

      void setUpPeggedIncAlloc (WitDemand * theDemand, WitPeriod shipPer);
         //
         // Sets up pegging for an incHeurAlloc for theDemand in shipPer.

      void pegDeltaVol (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         deltaVol);
         //
         // Records the following event: 
         //    theOpn->execVol_[execPer] += deltaVol

      void pegDeltaVol (
            WitSubEntry * theSub,
            WitPeriod     execPer,
            double        deltaVol);
         //
         // Records the following event: 
         //    theSub->subVol_ [execPer] += deltaVol

      void shutDownPeggedIncAlloc ();
         //                                
         // Shuts down pegging for an incHeurAlloc.

      void shutDownPeggedHeurAlloc ();
         //
         // Shuts down pegging for the end of heuristic allocation.

      void clear ();
         //
         // Puts the pegging into its initial state.

      void print ();
         //
         // Prints the pegging.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void pegDeltaVol (
            WitDelComp * theDelComp,
            WitPeriod    execPer,
            WitPegEl *   thePegEl,
            double       deltaVol);
         //
         // Let theOpn or theSub = theDelComp, as appropriate.
         // Records the following event: 
         //    theOpn->execVol_[execPer] += deltaVol, or
         //    theSub->subVol_ [execPer] += deltaVol
         // thePegEl is the correponding PegEl, if one exists.

      void deleteZeroPegEls ();
         //
         // Deletes the PegEls in myPegElStack_ whose peggedVol is 0.

      void printOpnPegEls (const WitObjStack <WitFixedPegEl> & theFixedPegEls);
         //
         // Prints theFixedPegEls, which must be for Operations.

      void printSubPegEls (const WitObjStack <WitFixedPegEl> & theFixedPegEls);
         //
         // Prints theFixedPegEls, which must be for Subs.

      WitPegEl * & curPegElsPtrFor (WitPegEl * thePegEl);
         //
         // Returns (by ref) the ptr in curOpnPegEls_ or curSubPegEls_ for
         // thePegEl.

      noCopyCtorAssign (WitPegger);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitHeurAtor * myHeurAtor_;
         //
         // The HeurAtor for this Pegger, when active; otherwise NULL.

      WitDemand * curDemand_;
         //
         // The Demand at which pegging is currently being performed, if any;
         // otherwise NULL.

      WitPeriod curShipPer_;
         //
         // The shipPer for which pegging is currently being performed, if any;
         // otherwise -1.

      WitObjStack <WitPegEl> myPegElStack_;
         //
         // Working version of the PegEl Stack for curDemand_ and curShipPer_.

      WitPtrSched <WitOperation, WitPegEl> curOpnPegEls_;
         //
         // curOpnPegEls_.myPtrAt (theOpn, execPer) is the PegEl for 
         // theOpn and execPer that pegs to the current Demand and 
         // shipPer, if any; otherwise NULL.
         // Only allocated when this Pegger is active.

      WitPtrSched <WitSubEntry, WitPegEl> curSubPegEls_;
         //
         // curSubPegEls_.myPtrAt (theSub, execPer) is the PegEl for 
         // theSub and execPer that pegs to the current Demand and 
         // shipPer, if any; otherwise NULL.
         // Only allocated when this Pegger is active.

      WitPairStack <WitDemand, WitPeriod> nonEmptyDemPers_;
         //
         // The set of pairs (theDemand, shipPer) such that
         // theDemand->myPegElsFor_ (shipPer) is non-empty.
   };

#endif
@


1.17
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.16
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d34 2
a35 124
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPegger (WitProblem *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitPegger ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void setUpPeggedHeurAlloc (WitHeurAtor *);
//
// Sets up pegging for the beginning of heuristic allocation.

void setUpPeggedIncAlloc (WitDemand * theDemand, WitPeriod shipPer);
//
// Sets up pegging for an incHeurAlloc for theDemand in shipPer.

void pegDeltaVol (
WitOperation * theOpn,
WitPeriod      execPer,
double         deltaVol);
//
// Records the following event:
//    theOpn->execVol_[execPer] += deltaVol

void pegDeltaVol (
WitSubEntry * theSub,
WitPeriod     execPer,
double        deltaVol);
//
// Records the following event:
//    theSub->subVol_ [execPer] += deltaVol

void shutDownPeggedIncAlloc ();
//
// Shuts down pegging for an incHeurAlloc.

void shutDownPeggedHeurAlloc ();
//
// Shuts down pegging for the end of heuristic allocation.

void clear ();
//
// Puts the pegging into its initial state.

void print ();
//
// Prints the pegging.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void pegDeltaVol (
WitDelComp * theDelComp,
WitPeriod    execPer,
WitPegEl *   thePegEl,
double       deltaVol);
//
// Let theOpn or theSub = theDelComp, as appropriate.
// Records the following event:
//    theOpn->execVol_[execPer] += deltaVol, or
//    theSub->subVol_ [execPer] += deltaVol
// thePegEl is the correponding PegEl, if one exists.

void deleteZeroPegEls ();
//
// Deletes the PegEls in myPegElStack_ whose peggedVol is 0.

void printOpnPegEls (const WitObjStack <WitFixedPegEl> & theFixedPegEls);
//
// Prints theFixedPegEls, which must be for Operations.

void printSubPegEls (const WitObjStack <WitFixedPegEl> & theFixedPegEls);
//
// Prints theFixedPegEls, which must be for Subs.

WitPegEl * & curPegElsPtrFor (WitPegEl * thePegEl);
//
// Returns (by ref) the ptr in curOpnPegEls_ or curSubPegEls_ for
// thePegEl.

noCopyCtorAssign (WitPegger);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitHeurAtor * myHeurAtor_;
//
// The HeurAtor for this Pegger, when active; otherwise NULL.

WitDemand * curDemand_;
//
// The Demand at which pegging is currently being performed, if any;
// otherwise NULL.

WitPeriod curShipPer_;
//
// The shipPer for which pegging is currently being performed, if any;
// otherwise -1.

WitObjStack <WitPegEl> myPegElStack_;
//
// Working version of the PegEl Stack for curDemand_ and curShipPer_.

WitPtrSched <WitOperation, WitPegEl> curOpnPegEls_;
//
// curOpnPegEls_.myPtrAt (theOpn, execPer) is the PegEl for
// theOpn and execPer that pegs to the current Demand and
// shipPer, if any; otherwise NULL.
// Only allocated when this Pegger is active.
d37 134
a170 12
WitPtrSched <WitSubEntry, WitPegEl> curSubPegEls_;
//
// curSubPegEls_.myPtrAt (theSub, execPer) is the PegEl for
// theSub and execPer that pegs to the current Demand and
// shipPer, if any; otherwise NULL.
// Only allocated when this Pegger is active.

WitPairStack <WitDemand, WitPeriod> nonEmptyDemPers_;
//
// The set of pairs (theDemand, shipPer) such that
// theDemand->myPegElsFor_ (shipPer) is non-empty.
};
@


1.15
log
@Stochastic Implosion
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d34 124
a157 2
   {
   public:
d159 12
a170 134
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPegger (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPegger ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void setUpPeggedHeurAlloc (WitHeurAtor *);
         //
         // Sets up pegging for the beginning of heuristic allocation.

      void setUpPeggedIncAlloc (WitDemand * theDemand, WitPeriod shipPer);
         //
         // Sets up pegging for an incHeurAlloc for theDemand in shipPer.

      void pegDeltaVol (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         deltaVol);
         //
         // Records the following event: 
         //    theOpn->execVol_[execPer] += deltaVol

      void pegDeltaVol (
            WitSubEntry * theSub,
            WitPeriod     execPer,
            double        deltaVol);
         //
         // Records the following event: 
         //    theSub->subVol_ [execPer] += deltaVol

      void shutDownPeggedIncAlloc ();
         //                                
         // Shuts down pegging for an incHeurAlloc.

      void shutDownPeggedHeurAlloc ();
         //
         // Shuts down pegging for the end of heuristic allocation.

      void clear ();
         //
         // Puts the pegging into its initial state.

      void print ();
         //
         // Prints the pegging.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void pegDeltaVol (
            WitDelComp * theDelComp,
            WitPeriod    execPer,
            WitPegEl *   thePegEl,
            double       deltaVol);
         //
         // Let theOpn or theSub = theDelComp, as appropriate.
         // Records the following event: 
         //    theOpn->execVol_[execPer] += deltaVol, or
         //    theSub->subVol_ [execPer] += deltaVol
         // thePegEl is the correponding PegEl, if one exists.

      void deleteZeroPegEls ();
         //
         // Deletes the PegEls in myPegElStack_ whose peggedVol is 0.

      void printOpnPegEls (const WitObjStack <WitFixedPegEl> & theFixedPegEls);
         //
         // Prints theFixedPegEls, which must be for Operations.

      void printSubPegEls (const WitObjStack <WitFixedPegEl> & theFixedPegEls);
         //
         // Prints theFixedPegEls, which must be for Subs.

      WitPegEl * & curPegElsPtrFor (WitPegEl * thePegEl);
         //
         // Returns (by ref) the ptr in curOpnPegEls_ or curSubPegEls_ for
         // thePegEl.

      noCopyCtorAssign (WitPegger);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitHeurAtor * myHeurAtor_;
         //
         // The HeurAtor for this Pegger, when active; otherwise NULL.

      WitDemand * curDemand_;
         //
         // The Demand at which pegging is currently being performed, if any;
         // otherwise NULL.

      WitPeriod curShipPer_;
         //
         // The shipPer for which pegging is currently being performed, if any;
         // otherwise -1.

      WitObjStack <WitPegEl> myPegElStack_;
         //
         // Working version of the PegEl Stack for curDemand_ and curShipPer_.

      WitPtrSched <WitOperation, WitPegEl> curOpnPegEls_;
         //
         // curOpnPegEls_.myPtrAt (theOpn, execPer) is the PegEl for 
         // theOpn and execPer that pegs to the current Demand and 
         // shipPer, if any; otherwise NULL.
         // Only allocated when this Pegger is active.

      WitPtrSched <WitSubEntry, WitPegEl> curSubPegEls_;
         //
         // curSubPegEls_.myPtrAt (theSub, execPer) is the PegEl for 
         // theSub and execPer that pegs to the current Demand and 
         // shipPer, if any; otherwise NULL.
         // Only allocated when this Pegger is active.

      WitPairStack <WitDemand, WitPeriod> nonEmptyDemPers_;
         //
         // The set of pairs (theDemand, shipPer) such that
         // theDemand->myPegElsFor_ (shipPer) is non-empty.
   };
@


1.14
log
@[disallowed backlog]
@
text
@d19 1
d113 1
a113 1
         // Deletes the PegEls in curPegElStack () whose peggedVol is 0.
a127 4
      inline WitObjStack <WitPegEl> & curPegElStack ();
         //
         // Returns the PegEl Stack for curDemand_ and curShipPer_.

d148 4
@


1.13
log
@Updated the copyright date on all source files.
@
text
@a91 9
      //------------------------------------------------------------------------
      // Functions for receiving data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      //------------------------------------------------------------------------

      static void receiveDMPs (
         WitPtrTVec <WitObjStack <WitPegEl> > WitDemand::* myPegElsForArg);

a136 13
      //------------------------------------------------------------------------
      // Data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      // theDemand->*myPegElsFor_ == theDemand->myPegElsFor_.
      //------------------------------------------------------------------------

      static WitPtrTVec <WitObjStack <WitPegEl> > WitDemand::* myPegElsFor_;

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

@


1.12
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.11
log
@Continued implementation of PIP.
@
text
@a55 6
      void loadDataFrom (
            WitDemand *                                  theDemand,
            const WitPtrTVec <WitObjStack <WitPegEl> > & thePegElStPtrTVec);
         //
         // Loads thePegElStPtrTVec into myPegEls_.

d92 9
d146 13
a162 5
      WitPtrSched <WitDemand, WitObjStack <WitPegEl> > myPegEls_;
         //
         // myPegEls_.myElemAt (theDemand, shipPer) is the set of all PegEls for
         // theDemand in shipPer.

d190 1
a190 1
         // myPegEls_ (theDemand, shipPer) is non-empty.
@


1.10
log
@Removed all const_casts from WIT.
@
text
@d21 1
@


1.9
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d119 1
a119 1
      void printOpnPegEls (const WitObjStack <const WitPegEl> & thePegEls);
d121 1
a121 1
         // Prints thePegEls, which must be for Operations.
d123 1
a123 1
      void printSubPegEls (const WitObjStack <const WitPegEl> & thePegEls);
d125 1
a125 1
         // Prints thePegEls, which must be for Subs.
@


1.8
log
@Began implementation of optimizing implosion with OSL V3.
@
text
@a20 1
#include <Demand.h>
d132 3
a134 4
      inline WitObjStack <WitPegEl> & curPegElStack ()
         {
         return myPegEls_.myElemAt (curDemand_, curShipPer_);
         }
@


1.7
log
@Added #include <Demand.h> to avoid following error message when using vacpp:

/usr/vacpp/bin/xlC128 -DRS6K -DAIX_VERSION=430 -q64 -qflag=i:i -qhalt=w -qsuppress=1540-0308 -qsuppress=1540-0309 -qsuppress=1540-0306 -qsuppress=1540-0152 -qsuppress=1540-0080 -DEXE_TYPE=debug -DPLATFORM=power64v5 -g -DDEBUG -DRWDEBUG -DDEVELOPMENT=1 -DDISGUISE=0 -DERR_TRACEALL -I../src/. -I/u/wit/power64v5/include -I/u/wit/power64v5/include -I../.. -I../.. -I.  -c -o Pegging.o ../src/Pegging.C
"../src/./PtrSched.h", line 221.30: 1540-0251 (S) The "->" operator cannot be applied to the undefined class "class WitDemand".
"../src/./PtrSched.h", line 216.37: 1540-0700 (I) The previous message was produced while processing "WitPtrSched<WitDemand,WitObjStack<WitPegEl> >::myPtrTVecAt(WitDemand *)".
"../src/./PtrSched.h", line 206.26: 1540-0700 (I) The previous message was produced while processing "WitPtrSched<WitDemand,WitObjStack<WitPegEl> >::myPtrAt(WitDemand *, WitPeriod)".
"../src/./PtrSched.h", line 200.13: 1540-0700 (I) The previous message was produced while processing "WitPtrSched<WitDemand,WitObjStack<WitPegEl> >::myElemAt(WitDemand *, WitPeriod)".
"../src/./Pegger.h", line 135.26: 1540-0700 (I) The previous message was produced while processing "WitPegger::curPegElStack()".
make: *** [Pegging.o] Error 1
@
text
@a18 1
#include <Demand.h>
d21 1
a21 1
#include <Assoc.h>
@


1.6
log
@Continued implementation of Single-Source.
@
text
@d19 1
@


1.5
log
@Continued implementation of Single-Source.
@
text
@d52 1
a52 1
      void setUpPeggedHeurAlloc ();
d116 4
d144 1
a144 1
      WitBoolean active_;
d146 1
a146 1
         // TRUE, iff pegged heuristic allocation is currently active.
@


1.4
log
@Continued implementation of Single-Source.
@
text
@a19 1
#include <PtrMap.h>
d56 3
a58 1
      void loadDataFrom (WitDemand * theDemand, WitPegSite * thePegSite);
d60 1
a60 1
         // Loads thePegSite as the PegSite for theDemand.
d116 1
a116 1
      void printOpnPegEls (WitObjStack <const WitPegEl> & thePegEls);
d120 1
a120 1
      void printSubPegEls (WitObjStack <const WitPegEl> & thePegEls);
d129 5
d144 1
a144 6
      WitPairStack <WitPegSite, WitPeriod> nonEmptyPairs_;
         //
         // The set of pairs (thePegSite, shipPer) such that
         // thePegSite->myPegElsFor (shipPer) is non-empty.

      WitPtrMap <WitDemand, WitPegSite> thePegSiteFor_;
d146 2
a147 2
         // thePegSiteFor_ (theDemand) is the PegSite for theDemand.
         // Only allocated when this Pegger is active.
d149 1
a149 1
      WitPegSite * curPegSite_;
d151 1
a151 1
         // The PegSite at which pegging is currently being performed, if any;
d172 5
@


1.3
log
@Continued implementation of pegging.
@
text
@d16 1
a16 1
// Contains the declaration of the class template Pegger <AllocComp>.
d19 3
a22 2
#include <ObjStack.h>
#include <PtrSched.h>
d25 1
a25 1
// Class template Pegger <AllocComp>
d27 2
a28 3
// For AllocComp = either Operation or SubEntry: 
//    Pegger <AllocComp> is responsible for creating and maintaining the pegging
//    of either execVols or subVols to Demands in heuristic allocation. 
d33 1
a33 2
template <class AllocComp>
      class WitPegger: public WitProbAssoc
d57 12
a68 2
      void setUpPeggedIncAlloc (
            WitObjStack <WitPegEl <AllocComp> > & thePegEls);
d70 2
a71 1
         // Sets up pegging for an incHeurAlloc by updating thePegEls.
d74 3
a76 3
            AllocComp * theAllocComp,
            WitPeriod   execPer,
            double      deltaVol);
d79 1
a79 2
         //    theAllocComp->execVol_[execPer] += deltaVol, or
         //    theAllocComp->subVol_ [execPer] += deltaVol
d93 4
d103 21
a123 2
      inline WitPegEl <AllocComp> * & curPegElsPtrFor (
             WitPegEl <AllocComp> * thePegEl);
d125 2
a126 1
         // Returns (by ref) the ptr in curPegEls_ for thePegEl.
d128 1
a128 1
      noCopyCtorAssignTemp (WitPegger, AllocComp);
d138 16
a153 1
      WitObjStack <WitObjStack <WitPegEl <AllocComp> > > nonEmptyPegElStPtrs_;
d155 2
a156 2
         // A list of ptrs to all non-empty PegEl Stacks for the AllocComp class
         // owned by the PegSites for this Pegger.
d158 1
a158 1
      WitObjStack <WitPegEl <AllocComp> > * curPegElStPtr_;
d160 4
a163 2
         // Ptr to the PegEl Stack for which pegging is currently being 
         // performed, if any; otherwise NULL.
d165 1
a165 1
      WitPtrSched <AllocComp, WitPegEl <AllocComp> > curPegEls_;
d167 2
a168 2
         // curPegEls_.myPtrAt (theAllocComp, execPer) is the PegEl for 
         // theAllocComp and execPer that pegs to the current Demand and 
@


1.2
log
@Continued implementation of pegging.
@
text
@d16 1
a16 4
// Contains the declaration of the following class templates:
//
//    PeggerI <AllocComp>
//    Pegger  <AllocComp> 
d19 2
d24 1
a24 2
// Class template PeggerI <AllocComp> and
// Class template Pegger  <AllocComp>
d27 2
a28 15
//    Class Pegger <AllocComp> is responsible creating the pegging of either
//    execVols or subVols to Demands in heuristic allocation. 
//
// Class templates PegMgr <AllocComp> and PegMgrI <AllocComp> have the
// following "wrapper/implementor" relationship: Pegger <AllocComp> is
// implemented as a simple wrapper for PeggerI <AllocComp>, which does all of
// the substantial implementation for Pegger <AllocComp>. PeggerI <AllocComp> 
// is implemented parametrically, while Pegger <AllocComp> is implemented
// non-parametrically. The purpose of this arrangement is to allow these
// templates to link correctly on platforms that have trouble linking templates.
//
// Class Hierarchy:
//
// PeggerI <AllocComp>
//    Pegger <AllocComp>
d34 1
a34 52
      class WitPeggerI: public WitProbAssoc
   {
   protected:

      //------------------------------------------------------------------------
      // Protected member functions that implement the corresponding member
      // functions as class Pegger.
      //------------------------------------------------------------------------

           WitPeggerI             (WitProblem *);
          ~WitPeggerI             ();
      void setUpPeggedIncAlloc    (WitObjStack <WitPegEl <AllocComp> > &);
      void pegDeltaVol            (AllocComp *, WitPeriod, double);
      void shutDownPeggedIncAlloc ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      inline WitPegEl <AllocComp> * & curPegElsPtrFor (
             WitPegEl <AllocComp> * thePegEl);
         //
         // Returns (by ref) the ptr in curPegEls_ for thePegEl.

      noCopyCtorAssignTemp (WitPeggerI, AllocComp);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitObjStack <WitPegEl <AllocComp> > * curPegElStPtr_;
         //
         // Ptr to the PegEl Stack for which pegging is currently being 
         // performed, if any; otherwise NULL.

      WitPtrSched <AllocComp, WitPegEl <AllocComp> > curPegEls_;
         //
         // curPegEls_.myPtrAt (theAllocComp, execPer) is the PegEl for 
         // theAllocComp and execPer that pegs to the current Demand and 
         // shipPer, if any; otherwise NULL.
   };

//------------------------------------------------------------------------------
// Class template Pegger <AllocComp>
//
// See above.
//------------------------------------------------------------------------------

template <class AllocComp>
      class WitPegger: private WitPeggerI <AllocComp>
d54 4
d76 8
d90 5
d96 25
@


1.1
log
@Initial implementation of pegging.
@
text
@d16 4
a19 1
// Contains the declaration of class Pegger.
d25 14
a38 1
// Class Pegger.
d40 4
a43 2
// Responsible creating the pegging of Demands to execVols in heuristic
// allocation.
d48 53
a100 1
class WitPegger: public WitProbAssoc
d120 2
a121 1
      void startIncHeurAlloc (WitObjStack <WitPegEl> & thePegEls);
d123 1
a123 2
         // Tells this Pegger to initiate pegging for an incHeurAlloc by 
         // updating thePegEls.
d125 4
a128 4
      void recIncExecVol (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         deltaVol);
d130 3
a132 1
         // Records the following event: theOpn->execVol_[execPer] += deltaVol.
d134 1
a134 1
      void finishIncHeurAlloc ();
d136 1
a136 1
         // Tells this Pegger to conclude pegging for an incHeurAlloc.
d144 1
a144 20
      inline WitPegEl * & curPegElsPtrFor (WitPegEl * thePegEl);
         //
         // Returns (by ref) the ptr in curPegEls_ for thePegEl.

      noCopyCtorAssign (WitPegger);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitObjStack <WitPegEl> * curPegElStPtr_;
         //
         // Ptr to the PegEl Stack for which pegging is currently being 
         // performed, if any; otherwise NULL.

      WitPtrSched <WitOperation, WitPegEl> curPegEls_;
         //
         // curPegEls_.myPtrAt (theOpn, execPer) is the PegEl for theOpn and
         // execPer that pegs to the current Demand and shipPer, if any;
         // otherwise NULL.
@

