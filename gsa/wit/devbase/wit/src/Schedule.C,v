head	1.36;
access;
symbols
	sce_5_01_20080919:1.27
	latest_sce_4_20_20060523:1.13.0.2
	sce_4_20_20060523:1.13
	latest_sce4_20_OSL:1.12.0.2
	sce_4_20_OSL:1.12
	sce_410_withVa:1.8
	sce_4_05_20040511:1.5
	sce_4_00_20040201:1.3;
locks; strict;
comment	@ * @;


1.36
date	2011.09.28.23.50.09;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2011.09.24.00.28.35;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2011.08.30.20.18.09;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2010.09.24.22.57.30;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2010.09.21.19.58.43;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2010.09.10.22.45.34;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2010.09.10.22.10.41;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2010.07.27.23.07.06;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2010.07.21.18.50.14;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2007.10.02.18.32.44;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.09.28.22.08.27;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.09.26.20.54.40;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.09.12.23.09.01;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.07.31.20.39.46;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.07.24.21.22.04;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.06.05.21.06.02;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.06.01.16.22.11;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.05.31.20.05.49;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.05.30.22.57.06;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.05.30.16.01.20;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.05.15.20.17.35;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.11.15.56.46;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.04.16.22.52.05;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2006.05.02.17.34.12;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.27.21.19.54;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.21.15.44.15;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.17.17.07.18;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.15.19.55.21;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.28.20.14.38;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.14.00.01.17;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.11.06.00.30.34;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.30.23.27.44;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.10.22.53.21;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.15.21.12.13;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.08.23.26.45;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.01.19.41.11;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.36
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "Schedule.C"
//
// Contains:
//    The implementation         of class template Schedule <DomEl, RangeEl>.
//    The explicit instantiation of class template Schedule <DomEl, RangeEl>.
//------------------------------------------------------------------------------

#include <Schedule.h>
#include <Material.h>
#include <Demand.h>
#include <Operation.h>
#include <SubEntry.h>
#include <BopEntry.h>
#include <RtSite.h>
#include <RtCand.h>

//------------------------------------------------------------------------------
// Implementation of class template Schedule <DomEl, RangeEl>.
//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      WitSchedule <DomEl, RangeEl>::WitSchedule ():
         myTVecs_ ()
   {
   if (false)
      {
      DomEl * theDomEl;

      DomEl::verifyMappingIndex (theDomEl);
      }
   }

//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      WitSchedule <DomEl, RangeEl>::WitSchedule (
            WitProblem * theProblem, RangeEl initValue):
         myTVecs_ ()
   {
   allocate (theProblem, initValue);
   }

//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      WitSchedule <DomEl, RangeEl>::~WitSchedule ()
   {
   clear ();
   }

//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      void WitSchedule <DomEl, RangeEl>::operator = (
         const WitSchedule & theSchedule)
   {
   int theIdx;

   for (theIdx = 0; theIdx < domainSize (); theIdx ++)
      myTVecs_.myElemAt (theIdx) = theSchedule.myTVecs_.myElemAt (theIdx);
   }

//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      void WitSchedule <DomEl, RangeEl>::clear ()
   {
   int theIdx;

   for (theIdx = 0; theIdx < domainSize (); theIdx ++)
      delete myTVecs_[theIdx];

   myTVecs_.clear ();
   }

//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      void WitSchedule <DomEl, RangeEl>::allocate (
         WitProblem * theProblem,
         RangeEl      theRangeEl)
   {
   int theIdx;

   allocate1D (theProblem);

   for (theIdx = 0; theIdx < domainSize (); theIdx ++)
      myTVecs_.myElemAt (theIdx).allocate (theProblem, theRangeEl);
   }

//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      void WitSchedule <DomEl, RangeEl>::allocate1D (WitProblem * theProblem)
   {
   int theIdx;

   clear ();

   myTVecs_.resize (DomEl::nInstances (theProblem));

   for (theIdx = 0; theIdx < domainSize (); theIdx ++)
      myTVecs_[theIdx] = new WitTVec <RangeEl>;
   }

//------------------------------------------------------------------------------
// Explicit instantiation of class template Schedule <DomEl, RangeEl>.
//------------------------------------------------------------------------------

template class WitSchedule <WitPart,      bool>;
template class WitSchedule <WitMaterial,  bool>;
template class WitSchedule <WitOperation, bool>;
template class WitSchedule <WitBomEntry,  bool>;
template class WitSchedule <WitBopEntry,  bool>;
template class WitSchedule <WitDemand,    bool>;
template class WitSchedule <WitRtSite,    bool>;
template class WitSchedule <WitRtCand,    bool>;

template class WitSchedule <WitPart,      int>;
template class WitSchedule <WitDemand,    int>;
template class WitSchedule <WitBopEntry,  int>;
template class WitSchedule <WitBillEntry, int>;

template class WitSchedule <WitNode,      double>;
template class WitSchedule <WitPart,      double>;
template class WitSchedule <WitMaterial,  double>;
template class WitSchedule <WitDemand,    double>;
template class WitSchedule <WitOperation, double>;
template class WitSchedule <WitBillEntry, double>;
template class WitSchedule <WitSubEntry,  double>;
template class WitSchedule <WitBopEntry,  double>;
@


1.35
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.34
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d32 6
a37 6
WitSchedule <DomEl, RangeEl>::WitSchedule ():
myTVecs_ ()
{
if (false)
{
DomEl * theDomEl;
d39 3
a41 3
DomEl::verifyMappingIndex (theDomEl);
}
}
d46 6
a51 6
WitSchedule <DomEl, RangeEl>::WitSchedule (
WitProblem * theProblem, RangeEl initValue):
myTVecs_ ()
{
allocate (theProblem, initValue);
}
d56 4
a59 4
WitSchedule <DomEl, RangeEl>::~WitSchedule ()
{
clear ();
}
d64 4
a67 4
void WitSchedule <DomEl, RangeEl>::operator = (
const WitSchedule & theSchedule)
{
int theIdx;
d69 3
a71 3
for (theIdx = 0; theIdx < domainSize (); theIdx ++)
myTVecs_.myElemAt (theIdx) = theSchedule.myTVecs_.myElemAt (theIdx);
}
d76 3
a78 3
void WitSchedule <DomEl, RangeEl>::clear ()
{
int theIdx;
d80 2
a81 2
for (theIdx = 0; theIdx < domainSize (); theIdx ++)
delete myTVecs_[theIdx];
d83 2
a84 2
myTVecs_.clear ();
}
d89 5
a93 5
void WitSchedule <DomEl, RangeEl>::allocate (
WitProblem * theProblem,
RangeEl      theRangeEl)
{
int theIdx;
d95 1
a95 1
allocate1D (theProblem);
d97 3
a99 3
for (theIdx = 0; theIdx < domainSize (); theIdx ++)
myTVecs_.myElemAt (theIdx).allocate (theProblem, theRangeEl);
}
d104 3
a106 3
void WitSchedule <DomEl, RangeEl>::allocate1D (WitProblem * theProblem)
{
int theIdx;
d108 1
a108 1
clear ();
d110 1
a110 1
myTVecs_.resize (DomEl::nInstances (theProblem));
d112 3
a114 3
for (theIdx = 0; theIdx < domainSize (); theIdx ++)
myTVecs_[theIdx] = new WitTVec <RangeEl>;
}
@


1.33
log
@Modifiable Heuristic Allocation
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d32 6
a37 6
      WitSchedule <DomEl, RangeEl>::WitSchedule ():
         myTVecs_ ()
   {
   if (false)
      {
      DomEl * theDomEl;
d39 3
a41 3
      DomEl::verifyMappingIndex (theDomEl);
      }
   }
d46 6
a51 6
      WitSchedule <DomEl, RangeEl>::WitSchedule (
            WitProblem * theProblem, RangeEl initValue):
         myTVecs_ ()
   {
   allocate (theProblem, initValue);
   }
d56 4
a59 4
      WitSchedule <DomEl, RangeEl>::~WitSchedule ()
   {
   clear ();
   }
d64 4
a67 4
      void WitSchedule <DomEl, RangeEl>::operator = (
         const WitSchedule & theSchedule)
   {
   int theIdx;
d69 3
a71 3
   for (theIdx = 0; theIdx < domainSize (); theIdx ++)
      myTVecs_.myElemAt (theIdx) = theSchedule.myTVecs_.myElemAt (theIdx);
   }
d76 3
a78 3
      void WitSchedule <DomEl, RangeEl>::clear ()
   {
   int theIdx;
d80 2
a81 2
   for (theIdx = 0; theIdx < domainSize (); theIdx ++)
      delete myTVecs_[theIdx];
d83 2
a84 2
   myTVecs_.clear ();
   }
d89 5
a93 5
      void WitSchedule <DomEl, RangeEl>::allocate (
         WitProblem * theProblem,
         RangeEl      theRangeEl)
   {
   int theIdx;
d95 1
a95 1
   allocate1D (theProblem);
d97 3
a99 3
   for (theIdx = 0; theIdx < domainSize (); theIdx ++)
      myTVecs_.myElemAt (theIdx).allocate (theProblem, theRangeEl);
   }
d104 3
a106 3
      void WitSchedule <DomEl, RangeEl>::allocate1D (WitProblem * theProblem)
   {
   int theIdx;
d108 1
a108 1
   clear ();
d110 1
a110 1
   myTVecs_.resize (DomEl::nInstances (theProblem));
d112 3
a114 3
   for (theIdx = 0; theIdx < domainSize (); theIdx ++)
      myTVecs_[theIdx] = new WitTVec <RangeEl>;
   }
@


1.32
log
@Heuristic Adjustment
@
text
@d122 1
a122 1
template class WitSchedule <WitDemand,    bool>;
d125 1
@


1.31
log
@Heuristic Adjustment
@
text
@a23 1
#include <BillEntry.h>
d123 1
@


1.30
log
@Heuristic Adjustment
@
text
@d24 1
a24 1
#include <Entry.h>
@


1.29
log
@Selection Recovery
@
text
@d21 1
a21 1
#include <Opn.h>
@


1.28
log
@Selection Recovery.
@
text
@d122 1
@


1.27
log
@Stochastic Implosion
@
text
@d123 1
@


1.26
log
@Stochastic Implosion
@
text
@a21 1
#include <BomEntry.h>
a24 1
#include <BoundSet.h>
a136 1
template class WitSchedule <WitBomEntry,  double>;
a138 1
template class WitSchedule <WitBoundSet,  double>;
@


1.25
log
@Stochastic Implosion
@
text
@d26 1
d142 1
@


1.24
log
@Stochastic Implosion
@
text
@a27 1
#include <Scenario.h>
a140 1
template class WitSchedule <WitScenario,  double>;
@


1.23
log
@Stochastic Implosion
@
text
@d28 1
d142 1
@


1.22
log
@Stochastic Implosion
@
text
@d130 1
@


1.21
log
@Stochastic Implosion
@
text
@d37 3
a39 1
   ifDebug (DomEl * theObject);
d41 2
a42 1
   ifDebug (DomEl::verifyMappingIndex (theObject));
@


1.20
log
@Stochastic Implosion
@
text
@a119 1
template class WitSchedule <WitMaterial,  bool>;
a120 2
template class WitSchedule <WitOperation, bool>;
template class WitSchedule <WitBomEntry,  bool>;
a125 1
template class WitSchedule <WitBillEntry, int>;
a133 1
template class WitSchedule <WitConsEntry, double>;
@


1.19
log
@Stochastic Implosion
@
text
@d138 1
@


1.18
log
@Stochastic Implosion
@
text
@d123 1
@


1.17
log
@Stochastic Implosion
@
text
@d120 1
@


1.16
log
@Stochastic Implosion
@
text
@d121 1
d127 1
@


1.15
log
@Stochastic Implosion
@
text
@d126 1
a126 1
template class WitSchedule <WitBopEntry, int>;
@


1.14
log
@Stochastic Implosion
@
text
@d69 1
a69 1
      myTVecs_ (theIdx) = theSchedule.myTVecs_ (theIdx);
d97 1
a97 1
      myTVecs_ (theIdx).allocate (theProblem, theRangeEl);
@


1.13
log
@Updated the copyright date on all source files.
@
text
@d35 1
a35 1
         myVector_ ()
d47 1
a47 1
         myVector_ ()
d63 12
d77 1
a77 1
   int i;
d79 2
a80 2
   for (i = 0; i < domainSize (); ++i)
      delete myVector_[i];
d82 1
a82 1
   myVector_.clear ();
d92 1
a92 1
   int i;
d96 2
a97 2
   for (i = 0; i < domainSize (); ++i)
      myVector_ (i).allocate (theProblem, theRangeEl);
d105 1
a105 1
   int i;
d109 1
a109 1
   myVector_.resize (DomEl::nInstances (theProblem));
d111 2
a112 2
   for (i = 0; i < domainSize (); ++i)
      myVector_[i] = new WitTVec <RangeEl>;
@


1.12
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.11
log
@[shared-resource pegging]
@
text
@d114 1
@


1.10
log
@[shared-resource pegging]
@
text
@d65 1
a65 1
   WitSiz i;
d80 1
a80 1
   WitSiz i;
d93 1
a93 1
   WitSiz i;
@


1.9
log
@[shared-resource pegging]
@
text
@d65 1
a65 1
   size_t i;
d80 1
a80 1
   size_t i;
d93 1
a93 1
   size_t i;
@


1.8
log
@Revised mappingIndex code.
@
text
@d78 1
a78 1
         RangeEl    theValue)
d85 1
a85 1
      myVector_ (i).allocate (theProblem, theValue);
@


1.7
log
@Low-Pri Prop-Rt.
@
text
@a27 1
#include <MapIdxI.h>
@


1.6
log
@Continued implementation of pen-exec override of prop-rt.
@
text
@d26 1
d110 1
@


1.5
log
@PIP.
@
text
@d26 1
d109 1
@


1.4
log
@Double Precision.
@
text
@d24 1
d120 1
@


1.3
log
@Continued implementation of post-implosion pegging.
@
text
@d105 2
a106 2
template class WitSchedule <WitPart,       bool>;
template class WitSchedule <WitDemand,     bool>;
d108 2
a109 14
template class WitSchedule <WitPart,       int>;
template class WitSchedule <WitDemand,     int>;

template class WitSchedule <WitNode,       float>;
template class WitSchedule <WitPart,       float>;
template class WitSchedule <WitDemand,     float>;
template class WitSchedule <WitBillEntry,  float>;

template class WitSchedule <WitPart,       double>;
template class WitSchedule <WitMaterial,   double>;
template class WitSchedule <WitDemand,     double>;
template class WitSchedule <WitOperation,  double>;
template class WitSchedule <WitBomEntry,   double>;
template class WitSchedule <WitSubEntry,   double>;
d111 8
@


1.2
log
@Continued implementation of post-implosion pegging.
@
text
@d22 2
d120 3
@


1.1
log
@Continued implementation of post-implosion pegging.
@
text
@d21 1
d103 2
a104 1
template class WitSchedule <WitNode,      float>;
d106 2
a107 4
template class WitSchedule <WitPart,      bool>;
template class WitSchedule <WitPart,      int>;
template class WitSchedule <WitPart,      float>;
template class WitSchedule <WitPart,      double>;
d109 9
a117 8
template class WitSchedule <WitMaterial,  double>;

template class WitSchedule <WitDemand,    bool>;
template class WitSchedule <WitDemand,    int>;
template class WitSchedule <WitDemand,    float>;
template class WitSchedule <WitDemand,    double>;

template class WitSchedule <WitBillEntry, float>;
@

