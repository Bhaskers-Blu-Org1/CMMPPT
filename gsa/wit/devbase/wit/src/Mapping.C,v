head	1.25;
access;
symbols
	sce_5_01_20080919:1.20
	EndRw-branch:1.17.0.4
	Root-of-EndRw:1.17
	rwToStl:1.17.0.2
	latest_sce_3_10_20010924:1.13.0.2
	sce_3_10_20010924:1.13
	latest_sce_3_00_20010601:1.10.0.2
	sce_3_00_20010601:1.10
	latest_sce_2_31_20010308:1.9.0.2
	sce_2_31_20010308:1.9
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2011.09.28.23.49.29;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2011.09.24.00.27.49;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.08.30.20.17.36;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2010.09.28.22.38.18;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2010.09.10.22.10.38;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.07.24.21.22.03;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.05.15.20.17.35;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.03.03.23.26.49;	author rjw;	state dead;
branches;
next	1.17;

1.17
date	2002.05.07.20.14.58;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2002.05.03.23.16.38;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.05.02.20.53.12;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.01.14.25.57;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2001.07.18.21.44.44;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.07.06.23.36.01;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.07.02.17.33.17;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.25.14.53.24;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.11.16.35.09;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.04.22.27.50;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.28.22.13.36;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.20.20.08.35;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.23.45.57;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.41;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.19.22.35.32;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.03;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.23;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.23;	author wit;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "Mapping.C"
//
// Contains:
//    The implementation         of class template Mapping <DomEl, RangeEl>.
//    The explicit instantiation of class template Mapping <DomEl, RangeEl>.
//------------------------------------------------------------------------------

#include <Mapping.h>
#include <Material.h>
#include <Operation.h>
#include <BomEntry.h>
#include <Demand.h>

//------------------------------------------------------------------------------
// Implementation of class template Mapping <DomEl, RangeEl>
//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      WitMapping <DomEl, RangeEl>::WitMapping ():
         myVector_ ()
   {
   if (false)
      {
      DomEl * theDomEl;

      DomEl::verifyMappingIndex (theDomEl);
      }
   }

//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      WitMapping <DomEl, RangeEl>::WitMapping (
         WitProblem * theProblem,
         RangeEl      initValue):

      myVector_ ()
   {
   allocate (theProblem, initValue);
   }

//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      WitMapping <DomEl, RangeEl>::~WitMapping ()
   {
   }

//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      void WitMapping <DomEl, RangeEl>::clear ()
   {
   myVector_.clear ();
   }

//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      void WitMapping <DomEl, RangeEl>::allocate (
         WitProblem * theProblem,
         RangeEl      theRangeEl)
   {
   myVector_.resize (DomEl::nInstances (theProblem), theRangeEl);
   }

//------------------------------------------------------------------------------
// Explicit instantiation of class template Mapping <DomEl, RangeEl>.
//------------------------------------------------------------------------------

template class WitMapping <WitNode,      bool>;
template class WitMapping <WitPart,      bool>;
template class WitMapping <WitMaterial,  bool>;
template class WitMapping <WitOperation, bool>;
template class WitMapping <WitBomEntry,  bool>;
template class WitMapping <WitDemand,    bool>;

template class WitMapping <WitNode,      int>;
template class WitMapping <WitPart,      int>;
template class WitMapping <WitMaterial,  int>;
template class WitMapping <WitOperation, int>;
@


1.24
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.23
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d29 10
a38 10
WitMapping <DomEl, RangeEl>::WitMapping ():
myVector_ ()
{
if (false)
{
DomEl * theDomEl;

DomEl::verifyMappingIndex (theDomEl);
}
}
d43 8
a50 8
WitMapping <DomEl, RangeEl>::WitMapping (
WitProblem * theProblem,
RangeEl      initValue):

myVector_ ()
{
allocate (theProblem, initValue);
}
d55 3
a57 3
WitMapping <DomEl, RangeEl>::~WitMapping ()
{
}
d62 4
a65 4
void WitMapping <DomEl, RangeEl>::clear ()
{
myVector_.clear ();
}
d70 6
a75 6
void WitMapping <DomEl, RangeEl>::allocate (
WitProblem * theProblem,
RangeEl      theRangeEl)
{
myVector_.resize (DomEl::nInstances (theProblem), theRangeEl);
}
@


1.22
log
@Modifiable Heuristic Allocation
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d29 10
a38 10
      WitMapping <DomEl, RangeEl>::WitMapping ():
         myVector_ ()
   {
   if (false)
      {
      DomEl * theDomEl;

      DomEl::verifyMappingIndex (theDomEl);
      }
   }
d43 8
a50 8
      WitMapping <DomEl, RangeEl>::WitMapping (
         WitProblem * theProblem,
         RangeEl      initValue):

      myVector_ ()
   {
   allocate (theProblem, initValue);
   }
d55 3
a57 3
      WitMapping <DomEl, RangeEl>::~WitMapping ()
   {
   }
d62 4
a65 4
      void WitMapping <DomEl, RangeEl>::clear ()
   {
   myVector_.clear ();
   }
d70 6
a75 6
      void WitMapping <DomEl, RangeEl>::allocate (
         WitProblem * theProblem,
         RangeEl      theRangeEl)
   {
   myVector_.resize (DomEl::nInstances (theProblem), theRangeEl);
   }
@


1.21
log
@Heuristic Adjustment
@
text
@d22 1
d86 1
@


1.20
log
@Stochastic Implosion
@
text
@d20 1
a20 1
#include <Opn.h>
@


1.19
log
@Stochastic Implosion
@
text
@d31 3
a33 1
   ifDebug (DomEl * theDomEl);
d35 2
a36 1
   ifDebug (DomEl::verifyMappingIndex (theDomEl));
@


1.18
log
@Removed all empty files from WIT (64 of them).
@
text
@d1 86
@


1.17
log
@Continued preliminary work on single source.
@
text
@@


1.16
log
@Continued preliminary work on single source.
@
text
@a0 255
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "Mapping.C"
//
// Contains the implementation of the following classes:
//
//    Mapping   (DomainType, RangeType)
//    Schedule  (DomainType, RangeType)
//------------------------------------------------------------------------------

#include <Schedule.h>
#include <Mapping.h>

//------------------------------------------------------------------------------
// Implementation macro for generic class
// WitMapping (DomInst, RangeType)
//------------------------------------------------------------------------------

#define WitMappingimplement2(DomainType, RangeType)                            \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitMapping (DomainType, RangeType)::WitMapping (DomainType, RangeType) ():     \
      myVector_ ()                                                             \
   {                                                                           \
   ifDebug (DomainType * theObject);                                           \
                                                                               \
   ifDebug (DomainType::verifyMappingIndex (theObject));                       \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitMapping (DomainType, RangeType)::WitMapping (DomainType, RangeType) (       \
         WitProblem * theProblem,                                              \
         RangeType    initValue):                                              \
                                                                               \
      myVector_ ()                                                             \
   {                                                                           \
   allocate (theProblem, initValue);                                           \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitMapping (DomainType, RangeType)::~WitMapping (DomainType, RangeType) ()     \
   {                                                                           \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitMapping (DomainType, RangeType)::operator = (                          \
      const WitMapping (DomainType, RangeType) & theMapping)                   \
   {                                                                           \
   myVector_.copy (theMapping.myVector_);                                      \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
size_t WitMapping (DomainType, RangeType)::domainSize () const                 \
   {                                                                           \
   return myVector_.length ();                                                 \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitMapping (DomainType, RangeType)::clear ()                              \
   {                                                                           \
   myVector_.clear ();                                                         \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitMapping (DomainType, RangeType)::allocate (                            \
      WitProblem * theProblem,                                                 \
      RangeType    theValue)                                                   \
   {                                                                           \
   int nInst;                                                                  \
                                                                               \
   nInst = theProblem->myCompMgr ()->nInstances ((DomainType *) NULL);         \
                                                                               \
   myVector_.resize (nInst, theValue);                                         \
   }                                                                           \

//------------------------------------------------------------------------------
// Implementation macro for generic class Schedule (DomainType, RangeType)
//------------------------------------------------------------------------------

#define WitScheduleimplement2(DomainType, RangeType)                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitSchedule (DomainType, RangeType)::WitSchedule (DomainType, RangeType) ():   \
      myVector_ ()                                                             \
   {                                                                           \
   ifDebug (DomainType * theObject);                                           \
                                                                               \
   ifDebug (DomainType::verifyMappingIndex (theObject));                       \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitSchedule (DomainType, RangeType)::WitSchedule (DomainType, RangeType)       \
   (WitProblem * theProblem, RangeType initValue):                             \
      myVector_ ()                                                             \
   {                                                                           \
   allocate (theProblem, initValue);                                           \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitSchedule (DomainType, RangeType)::~WitSchedule (DomainType, RangeType) ()   \
   {                                                                           \
   clear ();                                                                   \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitSchedule (DomainType, RangeType)::operator = (                         \
      const WitSchedule (DomainType, RangeType) & theSchedule)                 \
   {                                                                           \
   int i;                                                                      \
                                                                               \
   for (i = 0; i < domainSize (); ++i)                                         \
      vectorEl (i)->copy (* theSchedule.vectorEl (i));                         \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
size_t WitSchedule (DomainType, RangeType)::domainSize () const                \
   {                                                                           \
   return myVector_.length ();                                                 \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitSchedule (DomainType, RangeType)::clear ()                             \
   {                                                                           \
   int i;                                                                      \
                                                                               \
   for (i = 0; i < domainSize (); ++i)                                         \
      delete vectorEl (i);                                                     \
                                                                               \
   myVector_.clear ();                                                         \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitSchedule (DomainType, RangeType)::allocate (                           \
      WitProblem * theProblem,                                                 \
      RangeType theValue)                                                      \
   {                                                                           \
   int i;                                                                      \
                                                                               \
   allocate1D (theProblem);                                                    \
                                                                               \
   for (i = 0; i < domainSize (); ++i)                                         \
      vectorEl (i)->allocate (theProblem, theValue);                           \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitSchedule (DomainType, RangeType)::allocate1D (                         \
      WitProblem * theProblem)                                                 \
   {                                                                           \
   int i;                                                                      \
   int nInst;                                                                  \
                                                                               \
   nInst = theProblem->myCompMgr ()->nInstances ((DomainType *) NULL);         \
                                                                               \
   clear ();                                                                   \
                                                                               \
   myVector_.resize (nInst, NULL);                                             \
                                                                               \
   for (i = 0; i < domainSize (); ++i)                                         \
      vectorEl (i) = new WitTVec <RangeType>;                                  \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
RangeType WitSchedule (DomainType, RangeType)::ifAny (                         \
      const DomainType * theObject,                                            \
      WitPeriod t)                                                             \
      const                                                                    \
   {                                                                           \
   if (domainSize () == 0)                                                     \
      return (RangeType) NULL;                                                 \
                                                                               \
   if ((* this)(theObject).length () == 0)                                     \
      return (RangeType) NULL;                                                 \
                                                                               \
   return (* this) (theObject, t);                                             \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitSchedule (DomainType, RangeType)::insert (                             \
      RangeType theValue,                                                      \
      const DomainType * theObject,                                            \
      WitPeriod t)                                                             \
   {                                                                           \
   if (domainSize () == 0)                                                     \
      allocate1D (theObject->myProblem ());                                    \
                                                                               \
   if ((* this)(theObject).length () == 0)                                     \
      (* this)(theObject).allocate (                                           \
         theObject->myProblem (),                                              \
         (RangeType) NULL);                                                    \
                                                                               \
   (* this) (theObject, t) = theValue;                                         \
   }                                                                           \

//------------------------------------------------------------------------------
// Implementations of all specific cases of the generic classes implemented in 
// this file.
//------------------------------------------------------------------------------

implement2 (WitMapping,  WitNode,      int)
implement2 (WitMapping,  WitPart,      int)
implement2 (WitMapping,  WitMaterial,  int)

implement2 (WitMapping,  WitPart,      double)

implement2 (WitSchedule, WitPart,      int)
implement2 (WitSchedule, WitDemand,    int)

implement2 (WitSchedule, WitNode,      float)
implement2 (WitSchedule, WitPart,      float)
implement2 (WitSchedule, WitMaterial,  float)
implement2 (WitSchedule, WitOperation, float)
implement2 (WitSchedule, WitDemand,    float)
implement2 (WitSchedule, WitBillEntry, float)
implement2 (WitSchedule, WitSubEntry,  float)

implement2 (WitSchedule, WitPart,      double)
implement2 (WitSchedule, WitMaterial,  double)
implement2 (WitSchedule, WitOperation, double)
implement2 (WitSchedule, WitDemand,    double)
implement2 (WitSchedule, WitConsEntry, double)
implement2 (WitSchedule, WitBopEntry,  double)

implement2 (WitSchedule, WitPart,      WitTlObjPtr)
implement2 (WitSchedule, WitMaterial,  WitTlObjPtr)
implement2 (WitSchedule, WitOperation, WitTlObjPtr)
implement2 (WitSchedule, WitBomEntry,  WitTlObjPtr)
implement2 (WitSchedule, WitSubEntry,  WitTlObjPtr)
implement2 (WitSchedule, WitDemand,    WitTlObjPtr)
implement2 (WitSchedule, WitBoundSet,  WitTlObjPtr)

@


1.15
log
@Preliminary work on single source.
@
text
@d131 1
a131 1
      * vectorEl (i) = * theSchedule.vectorEl (i);                             \
d182 1
a182 1
      vectorEl (i) = new WitTVec (RangeType);                                  \
@


1.14
log
@Preliminary work on single source.
@
text
@d61 1
a61 1
   myVector_ = theMapping.myVector_;                                           \
@


1.13
log
@Implemented class template PtrSched <*, *>.
@
text
@a57 7
void WitMapping (DomainType, RangeType)::operator = (RangeType theValue)       \
   {                                                                           \
   myVector_ = theValue;                                                       \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
a120 10
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitSchedule (DomainType, RangeType)::operator = (RangeType theValue)      \
   {                                                                           \
   int i;                                                                      \
                                                                               \
   for (i = 0; i < domainSize (); ++i)                                         \
      * vectorEl (i) = theValue;                                               \
@


1.12
log
@Replaced Mapping (*, WitTlObjPtr) with PtrMap <*, *>.
@
text
@a269 1
implement2 (WitSchedule, WitBopEntry,  WitTlObjPtr)
@


1.11
log
@Some more template stuff.
@
text
@a246 9
implement2 (WitMapping,  WitNode,      WitTlObjPtr)
implement2 (WitMapping,  WitPart,      WitTlObjPtr)
implement2 (WitMapping,  WitMaterial,  WitTlObjPtr)
implement2 (WitMapping,  WitOperation, WitTlObjPtr)
implement2 (WitMapping,  WitBomEntry,  WitTlObjPtr)
implement2 (WitMapping,  WitSubEntry,  WitTlObjPtr)
implement2 (WitMapping,  WitDemand,    WitTlObjPtr)


@


1.10
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d15 2
a16 2
//    Mapping  (DomainType, RangeType)
//    Schedule (DomainType, RangeType)
d19 1
a20 1
#include <Schedule.h>
d24 1
a24 1
// WitMapping (DomainType, RangeType)
d282 1
@


1.9
log
@Initial implementation of coarse selection splitting for build-ahead.
@
text
@d247 7
a253 7
implement2 (WitMapping,  WitNode,      WitTlPtr)
implement2 (WitMapping,  WitPart,      WitTlPtr)
implement2 (WitMapping,  WitMaterial,  WitTlPtr)
implement2 (WitMapping,  WitOperation, WitTlPtr)
implement2 (WitMapping,  WitBomEntry,  WitTlPtr)
implement2 (WitMapping,  WitSubEntry,  WitTlPtr)
implement2 (WitMapping,  WitDemand,    WitTlPtr)
d274 8
a281 8
implement2 (WitSchedule, WitPart,      WitTlPtr)
implement2 (WitSchedule, WitMaterial,  WitTlPtr)
implement2 (WitSchedule, WitOperation, WitTlPtr)
implement2 (WitSchedule, WitBomEntry,  WitTlPtr)
implement2 (WitSchedule, WitSubEntry,  WitTlPtr)
implement2 (WitSchedule, WitBopEntry,  WitTlPtr)
implement2 (WitSchedule, WitDemand,    WitTlPtr)
implement2 (WitSchedule, WitBoundSet,  WitTlPtr)
@


1.8
log
@Coarse selection splitting.
@
text
@d173 1
a173 1
      WitProblem * theProblem,                                           \
d178 1
a178 1
   partiallyAllocate (theProblem);                                             \
d186 1
a186 1
void WitSchedule (DomainType, RangeType)::partiallyAllocate (                  \
d226 1
a226 1
      partiallyAllocate (theObject->myProblem ());                             \
@


1.7
log
@Completed a limited implementation of coarse selection splitting for BOP
entries.
@
text
@d271 2
a272 1
implement2 (WitSchedule, WitBillEntry, double)
@


1.6
log
@Further development of coarse selection splitting.
@
text
@a98 18
// Implementations of all specific cases of generic class Mapping.
//------------------------------------------------------------------------------

implement2 (WitMapping, WitNode,      int)
implement2 (WitMapping, WitPart,      int)
implement2 (WitMapping, WitMaterial,  int)

implement2 (WitMapping, WitPart,      double)

implement2 (WitMapping, WitNode,      WitTlPtr)
implement2 (WitMapping, WitPart,      WitTlPtr)
implement2 (WitMapping, WitMaterial,  WitTlPtr)
implement2 (WitMapping, WitOperation, WitTlPtr)
implement2 (WitMapping, WitBomEntry,  WitTlPtr)
implement2 (WitMapping, WitSubEntry,  WitTlPtr)
implement2 (WitMapping, WitDemand,    WitTlPtr)

//------------------------------------------------------------------------------
d237 2
a238 1
// Implementations of all specific cases of generic class Schedule.
d241 15
d271 1
a271 1
implement2 (WitSchedule, WitBomEntry,  double)
@


1.5
log
@Futher development of selection splitting.
@
text
@d108 7
a114 7
implement2 (WitMapping, WitNode,      WitTypelessPtr)
implement2 (WitMapping, WitPart,      WitTypelessPtr)
implement2 (WitMapping, WitMaterial,  WitTypelessPtr)
implement2 (WitMapping, WitOperation, WitTypelessPtr)
implement2 (WitMapping, WitBomEntry,  WitTypelessPtr)
implement2 (WitMapping, WitSubEntry,  WitTypelessPtr)
implement2 (WitMapping, WitDemand,    WitTypelessPtr)
d275 8
a282 8
implement2 (WitSchedule, WitPart,      WitTypelessPtr)
implement2 (WitSchedule, WitMaterial,  WitTypelessPtr)
implement2 (WitSchedule, WitOperation, WitTypelessPtr)
implement2 (WitSchedule, WitBomEntry,  WitTypelessPtr)
implement2 (WitSchedule, WitSubEntry,  WitTypelessPtr)
implement2 (WitSchedule, WitBopEntry,  WitTypelessPtr)
implement2 (WitSchedule, WitDemand,    WitTypelessPtr)
implement2 (WitSchedule, WitBoundSet,  WitTypelessPtr)
@


1.4
log
@Refactoring for selection splitting.
@
text
@d273 1
@


1.3
log
@Continued implementation of stock re-allocation.
@
text
@d58 1
a58 2
WitMapping (DomainType, RangeType) &                                           \
      WitMapping (DomainType, RangeType)::operator = (RangeType theValue)      \
a60 2
                                                                               \
   return * this;                                                              \
d65 2
a66 3
WitMapping (DomainType, RangeType) &                                           \
      WitMapping (DomainType, RangeType)::operator = (                         \
            const WitMapping (DomainType, RangeType) & theMapping)             \
a68 2
                                                                               \
   return * this;                                                              \
d150 1
a150 2
WitSchedule (DomainType, RangeType) &                                          \
      WitSchedule (DomainType, RangeType)::operator = (RangeType theValue)     \
a155 2
                                                                               \
   return * this;                                                              \
d160 2
a161 2
WitSchedule (DomainType, RangeType) & WitSchedule (DomainType, RangeType)::    \
      operator = (const WitSchedule (DomainType, RangeType) & theSchedule)     \
a166 2
                                                                               \
   return * this;                                                              \
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d24 1
a24 1
// WitMapping(DomainType, RangeType)
d58 1
a58 1
WitMapping(DomainType, RangeType) &                                            \
d68 11
d156 1
a156 1
WitSchedule(DomainType, RangeType) &                                           \
d169 2
a170 2
WitSchedule(DomainType, RangeType) & WitSchedule(DomainType, RangeType)::      \
      operator = (const WitSchedule(DomainType, RangeType) & theSchedule)      \
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
