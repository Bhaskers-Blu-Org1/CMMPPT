head	1.32;
access;
symbols
	sce_5_01_20080919:1.25
	latest_sce_4_20_20060523:1.8.0.2
	sce_4_20_20060523:1.8
	latest_sce4_20_OSL:1.7.0.2
	sce_4_20_OSL:1.7
	sce_410_withVa:1.7
	sce_4_05_20040511:1.4
	sce_4_00_20040201:1.4
	EndRw-branch:1.2.0.6
	Root-of-EndRw:1.2
	rwToStl:1.2.0.4
	latest_sce_3_10_20010924:1.2.0.2
	sce_3_10_20010924:1.2;
locks; strict;
comment	@ * @;


1.32
date	2011.09.28.23.50.00;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.09.24.00.28.24;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.08.30.20.18.02;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2010.09.10.22.10.41;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2010.01.08.22.51.54;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2010.01.04.22.11.24;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2009.12.18.23.47.57;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.02.07.18.41.39;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.11.29.15.35.01;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.11.27.21.05.01;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.11.15.19.57.34;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.10.02.18.32.43;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.08.29.22.28.43;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.08.24.22.14.00;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.08.22.22.16.15;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.08.20.22.47.59;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.08.16.21.27.40;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.08.15.21.36.42;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.08.14.15.03.00;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.07.30.22.38.02;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.07.24.21.22.04;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.06.05.21.06.02;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.06.01.23.29.47;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.01.22.25.07;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.02.17.34.10;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.28.20.14.37;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.01.27.21.03.28;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.26.23.50.32;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.02.20.46.43;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.03.03.23.27.04;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2001.07.06.22.29.06;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.02.17.33.17;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "PtrMap.C"
//
// Contains:
//    The implementation           of class template PtrMap <DomEl, RangeEl>.
//    The explicit instantiatation of class template PtrMap <DomEl, RangeEl>.
//------------------------------------------------------------------------------

#include <PtrMap.h>
#include <CompMgr.h>
#include <Scenario.h>
#include <Material.h>
#include <Demand.h>
#include <Operation.h>
#include <BomEntry.h>
#include <SubEntry.h>
#include <BoundSet.h>
#include <Objective.h>
#include <RtSite.h>
#include <RtCand.h>

//------------------------------------------------------------------------------
// Implementation of class template PtrMap <DomEl>.
//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      WitPtrMap <PtrMapArgs>::WitPtrMap ():
         myPtrVec_ ()
   {
   if (false)
      {
      DomEl * theDomEl;

      DomEl::verifyMappingIndex (theDomEl);
      }
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      WitPtrMap <PtrMapArgs>::WitPtrMap (WitProblem * theProblem):

         myPtrVec_ ()
   {
   allocate (theProblem);
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      WitPtrMap <PtrMapArgs>::~WitPtrMap ()
   {
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      void WitPtrMap <PtrMapArgs>::allocate (WitProblem * theProblem)
   {
   allocate (DomEl::nInstances (theProblem));
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      void WitPtrMap <PtrMapArgs>::allocate (int nInst)
   {
   myPtrVec_.resize (nInst);
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      void WitPtrMap <PtrMapArgs>::clear ()
   {
   myPtrVec_.clear ();
   }

//------------------------------------------------------------------------------
// Explicit instantiatation of class template PtrMap <DomEl, RangeEl>.
//------------------------------------------------------------------------------

template class WitPtrMap <WitNode,      WitNode>;
template class WitPtrMap <WitMaterial,  WitBaMat>;
template class WitPtrMap <WitPart,      WitRtSite>;
template class WitPtrMap <WitBomEntry,  WitRtSite>;
template class WitPtrMap <WitBillEntry, WitRtCand>;
template class WitPtrMap <WitRtSite,    WitSglSrcSite>;
template class WitPtrMap <WitRtSite,    WitMrSite>;
template class WitPtrMap <WitRtCand,    WitMrCand>;
template class WitPtrMap <WitNode,      WitStage>;

template class WitPtrMap <WitPart,      WitStScrapVar>;
template class WitPtrMap <WitMaterial,  WitStStockVar>;
template class WitPtrMap <WitOperation, WitStExecVar>;
template class WitPtrMap <WitDemand,    WitStShipVar>;
template class WitPtrMap <WitDemand,    WitStCumShipVar>;
template class WitPtrMap <WitBomEntry,  WitStNonSubVar>;
template class WitPtrMap <WitSubEntry,  WitStSubVar>;

template class WitPtrMap <WitObjective, WitMultiObjVar>;
template class WitPtrMap <WitObjective, WitMultiObjCon>;

template class WitPtrMap <WitPart,      WitDblFlexVec>;
template class WitPtrMap <WitMaterial,  WitDblFlexVec>;
template class WitPtrMap <WitDemand,    WitDblFlexVec>;
template class WitPtrMap <WitOperation, WitDblFlexVec>;
template class WitPtrMap <WitSubEntry,  WitDblFlexVec>;
template class WitPtrMap <WitBoundSet,  WitDblFlexVec>;
template class WitPtrMap <WitScenario,  WitDblFlexVec>;
template class WitPtrMap <WitObjective, WitDblFlexVec>;

template class WitPtrMap <WitNode,      WitList   <WitNode> >;

template class WitPtrMap <WitPart,      WitPtrMap <WitScenario,
                                                   WitDblFlexVec> >;
template class WitPtrMap <WitMaterial,  WitPtrMap <WitScenario,
                                                   WitDblFlexVec> >;
template class WitPtrMap <WitDemand,    WitPtrMap <WitScenario,
                                                   WitDblFlexVec> >;
template class WitPtrMap <WitOperation, WitPtrMap <WitScenario,
                                                   WitDblFlexVec> >;
template class WitPtrMap <WitSubEntry,  WitPtrMap <WitScenario,
                                                   WitDblFlexVec> >;
template class WitPtrMap <WitBoundSet,  WitPtrMap <WitScenario,
                                                   WitDblFlexVec> >;
@


1.31
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.30
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d35 7
a41 7
template <PtrMapArgDecs>
WitPtrMap <PtrMapArgs>::WitPtrMap ():
myPtrVec_ ()
{
if (false)
{
DomEl * theDomEl;
d43 3
a45 3
DomEl::verifyMappingIndex (theDomEl);
}
}
d49 2
a50 2
template <PtrMapArgDecs>
WitPtrMap <PtrMapArgs>::WitPtrMap (WitProblem * theProblem):
d52 4
a55 4
myPtrVec_ ()
{
allocate (theProblem);
}
d59 4
a62 4
template <PtrMapArgDecs>
WitPtrMap <PtrMapArgs>::~WitPtrMap ()
{
}
d66 5
a70 5
template <PtrMapArgDecs>
void WitPtrMap <PtrMapArgs>::allocate (WitProblem * theProblem)
{
allocate (DomEl::nInstances (theProblem));
}
d74 5
a78 5
template <PtrMapArgDecs>
void WitPtrMap <PtrMapArgs>::allocate (int nInst)
{
myPtrVec_.resize (nInst);
}
d82 5
a86 5
template <PtrMapArgDecs>
void WitPtrMap <PtrMapArgs>::clear ()
{
myPtrVec_.clear ();
}
d125 1
a125 1
WitDblFlexVec> >;
d127 1
a127 1
WitDblFlexVec> >;
d129 1
a129 1
WitDblFlexVec> >;
d131 1
a131 1
WitDblFlexVec> >;
d133 1
a133 1
WitDblFlexVec> >;
d135 1
a135 1
WitDblFlexVec> >;
@


1.29
log
@Heuristic Adjustment
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d35 7
a41 7
template <PtrMapArgDecs> 
      WitPtrMap <PtrMapArgs>::WitPtrMap ():
         myPtrVec_ ()
   {
   if (false)
      {
      DomEl * theDomEl;
d43 3
a45 3
      DomEl::verifyMappingIndex (theDomEl);
      }
   }
d49 2
a50 2
template <PtrMapArgDecs> 
      WitPtrMap <PtrMapArgs>::WitPtrMap (WitProblem * theProblem):
d52 4
a55 4
         myPtrVec_ ()
   {
   allocate (theProblem);
   }
d59 4
a62 4
template <PtrMapArgDecs> 
      WitPtrMap <PtrMapArgs>::~WitPtrMap ()
   {
   }
d66 5
a70 5
template <PtrMapArgDecs> 
      void WitPtrMap <PtrMapArgs>::allocate (WitProblem * theProblem)
   {
   allocate (DomEl::nInstances (theProblem));
   }
d74 5
a78 5
template <PtrMapArgDecs> 
      void WitPtrMap <PtrMapArgs>::allocate (int nInst)
   {
   myPtrVec_.resize (nInst);
   }
d82 5
a86 5
template <PtrMapArgDecs> 
      void WitPtrMap <PtrMapArgs>::clear ()
   {
   myPtrVec_.clear ();
   }
d125 1
a125 1
                                                   WitDblFlexVec> >;
d127 1
a127 1
                                                   WitDblFlexVec> >;
d129 1
a129 1
                                                   WitDblFlexVec> >;
d131 1
a131 1
                                                   WitDblFlexVec> >;
d133 1
a133 1
                                                   WitDblFlexVec> >;
d135 1
a135 1
                                                   WitDblFlexVec> >;
@


1.28
log
@Multi-objective mode
@
text
@d23 1
a23 1
#include <Opn.h>
@


1.27
log
@Multi-objective mode
@
text
@d111 1
@


1.26
log
@Multi-Objective Mode
@
text
@d110 2
@


1.25
log
@Stochastic Implosion
@
text
@d27 1
d117 1
@


1.24
log
@Stochastic Implosion
@
text
@d99 1
@


1.23
log
@Stochastic Implosion
@
text
@a98 1
template class WitPtrMap <WitBoundSet,  WitAbsStBS>;
@


1.22
log
@Stochastic Implosion
@
text
@d99 2
@


1.21
log
@Stochastic Implosion
@
text
@d20 1
d113 16
@


1.20
log
@Stochastic Implosion
@
text
@d25 1
d105 7
@


1.19
log
@Stochastic Implosion
@
text
@a26 1
#include <Scenario.h>
a96 1
template class WitPtrMap <WitScenario,  WitScenGroup>;
@


1.18
log
@Stochastic Implosion
@
text
@d98 1
a98 1
template class WitPtrMap <WitScenario,  WitScenSet>;
@


1.17
log
@Stochastic Implosion
@
text
@d21 2
d24 1
d99 7
a105 10
template class WitPtrMap <WitScenario,  WitStScrapVar>;
template class WitPtrMap <WitScenario,  WitStStockVar>;
template class WitPtrMap <WitScenario,  WitStExecVar>;
template class WitPtrMap <WitScenario,  WitStShipVar>;
template class WitPtrMap <WitScenario,  WitStCumShipVar>;
template class WitPtrMap <WitScenario,  WitStNonSubVar>;
template class WitPtrMap <WitScenario,  WitStSubVar>;
template class WitPtrMap <WitScenario,  WitStResCon>;
template class WitPtrMap <WitScenario,  WitStShipCon>;
template class WitPtrMap <WitScenario,  WitStSubCon>;
@


1.16
log
@Stochastic Implosion
@
text
@d95 1
@


1.15
log
@Stochastic Implosion
@
text
@d100 2
d104 1
@


1.14
log
@Stochastic Implosion
@
text
@d96 1
@


1.13
log
@Stochastic Implosion
@
text
@d97 2
d100 1
@


1.12
log
@Stochastic Implosion
@
text
@d24 1
d95 3
@


1.11
log
@Stochastic Implosion
@
text
@d33 3
a35 1
   ifDebug (DomEl * theDomEl);
d37 2
a38 1
   ifDebug (DomEl::verifyMappingIndex (theDomEl));
@


1.10
log
@Stochastic Implosion
@
text
@a90 2
template class WitPtrMap <WitPart,      WitList <WitBopEntry> >;
template class WitPtrMap <WitBomEntry,  WitList <WitSubEntry> >;
@


1.9
log
@Stochastic Implosion
@
text
@d91 1
@


1.8
log
@Updated the copyright date on all source files.
@
text
@d91 1
@


1.7
log
@Revised mappingIndex code.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.6
log
@Pegged critical list.
@
text
@a23 1
#include <MapIdxI.h>
@


1.5
log
@Pegged critical list.
@
text
@d84 8
a91 7
template class WitPtrMap <WitNode,     WitNode>;
template class WitPtrMap <WitMaterial, WitBaMat>;
template class WitPtrMap <WitPart,     WitRtSite>;
template class WitPtrMap <WitBomEntry, WitRtSite>;
template class WitPtrMap <WitRtSite,   WitSglSrcSite>;
template class WitPtrMap <WitRtSite,   WitMrSite>;
template class WitPtrMap <WitRtCand,   WitMrCand>;
@


1.4
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d21 1
d86 2
@


1.3
log
@Removed all empty files from WIT (64 of them).
@
text
@d1 87
@


1.2
log
@Implemented class template PtrMap.
@
text
@@


1.1
log
@Some more template stuff.
@
text
@a0 110
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "PtrMap.C"
//
// Contains the implementation of the following templates:
//
//    AbsPtrMap <DomInst>
//------------------------------------------------------------------------------

#include <PtrMap.h>

//------------------------------------------------------------------------------
// Implementation of class template AbsPtrMap <DomInst>.
//------------------------------------------------------------------------------

#if 0

void witImplementAbsPtrMap ()
   {
   WitAbsPtrMap <WitPart> theAbsPtrMap;
   }

#endif

//------------------------------------------------------------------------------

template <class DomInst>
      size_t WitAbsPtrMap <DomInst>::domainSize () const
   {
   return myPtrVec_.length ();
   }

//------------------------------------------------------------------------------

template <class DomInst> 
      WitAbsPtrMap <DomInst>::WitAbsPtrMap ():
         myPtrVec_ ()
   {
   ifDebug (DomInst * theDomInst);

   ifDebug (DomInst::verifyMappingIndex (theDomInst));
   }

//------------------------------------------------------------------------------

template <class DomInst> 
      WitAbsPtrMap <DomInst>::WitAbsPtrMap (WitProblem * theProblem):

         myPtrVec_ ()
   {
   allocateAbs (theProblem);
   }

//------------------------------------------------------------------------------

template <class DomInst> 
      WitAbsPtrMap <DomInst>::~WitAbsPtrMap ()
   {
   }

//------------------------------------------------------------------------------

template <class DomInst> 
      void WitAbsPtrMap <DomInst>::allocateAbs (WitProblem * theProblem)
   {
   int nInst;

   nInst = theProblem->myCompMgr ()->nInstances ((DomInst *) NULL);

   myPtrVec_.resize (nInst);
   }

//------------------------------------------------------------------------------

template <class DomInst> 
      void WitAbsPtrMap <DomInst>::clearAbs ()
   {
   myPtrVec_.clear ();
   }

//------------------------------------------------------------------------------

template <class DomInst> 
      void WitAbsPtrMap <DomInst>::setToAbs (WitTlObj * theTlObj)
   {
   int nInst;
   int idx;

   nInst = domainSize ();

   for (idx = 0; idx < nInst; idx ++)
      myPtrVec_[idx] = theTlObj;
   }

//------------------------------------------------------------------------------

template <class DomInst> 
      void WitAbsPtrMap <DomInst>::copyFromAbs (
         const WitAbsPtrMap <DomInst> & theAbsPtrMap)
   {
   myPtrVec_ = theAbsPtrMap.myPtrVec_;
   }
@

