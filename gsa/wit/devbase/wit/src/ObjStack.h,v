head	1.59;
access;
symbols
	sce_5_01_20080919:1.56
	latest_sce_4_20_20060523:1.54.0.2
	sce_4_20_20060523:1.54
	latest_sce4_20_OSL:1.53.0.2
	sce_4_20_OSL:1.53
	sce_410_withVa:1.47
	sce_4_05_20040511:1.44
	sce_4_00_20040201:1.44
	nextGenBranch:1.40.0.2
	nextGenRoot:1.40
	sce_3_30_20030627:1.37
	EndRw-branch:1.26.0.4
	Root-of-EndRw:1.26
	rwToStl:1.26.0.2
	latest_sce_3_10_20010924:1.19.0.2
	sce_3_10_20010924:1.19
	latest_sce_3_00_20010601:1.9.0.2
	sce_3_00_20010601:1.9
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5;
locks; strict;
comment	@ * @;


1.59
date	2011.09.28.23.49.41;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2011.09.24.00.28.03;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2011.08.30.20.17.45;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2007.07.10.15.57.23;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2006.05.26.20.40.10;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2006.05.02.17.34.05;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2006.02.03.16.48.12;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2005.12.05.22.37.20;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2005.12.05.22.24.08;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2005.12.05.20.47.34;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2005.11.15.21.27.23;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2005.11.15.19.55.21;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2005.09.06.19.47.58;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2005.08.22.20.38.59;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2005.01.11.20.28.37;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2003.12.24.20.12.34;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2003.12.13.00.17.51;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2003.12.11.18.37.26;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2003.12.09.22.44.05;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2003.07.24.15.31.12;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2003.07.23.21.23.20;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2003.07.23.20.00.17;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2003.04.11.20.45.35;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2003.04.11.19.08.28;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2003.03.19.16.48.21;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2003.02.13.23.06.29;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2003.01.27.23.26.12;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2003.01.23.19.13.21;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2003.01.22.23.01.01;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2003.01.22.19.32.12;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2003.01.15.21.01.22;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2003.01.13.22.22.10;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2003.01.02.22.18.37;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2002.07.11.22.48.29;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2002.06.26.18.28.37;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2002.06.21.21.52.20;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2002.05.01.14.25.58;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2002.03.08.21.17.59;	author bobw;	state Exp;
branches;
next	1.21;

1.21
date	2002.02.28.23.21.50;	author bobw;	state Exp;
branches;
next	1.20;

1.20
date	2002.02.07.16.57.28;	author bobw;	state Exp;
branches;
next	1.19;

1.19
date	2001.08.21.17.31.46;	author bobw;	state Exp;
branches;
next	1.18;

1.18
date	2001.08.01.14.55.30;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2001.07.09.22.09.44;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.07.05.18.50.17;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.06.27.21.45.12;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.21.18.24.32;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.21.15.40.05;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.20.20.07.05;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.18.18.42.22;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.15.20.53.36;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.25.14.53.25;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.10.22.31.13;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.08.21.35.44;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.03.15.28.39;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.09.22.55.47;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.15.19.01.51;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.11.16.35.10;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.28.22.13.38;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.22.16.18.26;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.59
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ObjStackH
#define ObjStackH

//------------------------------------------------------------------------------
// Header file: "ObjStack.h"
//
// Contains the declaration of the following classes and templates:
//
//    AbsObjStack
//    AbsObjStItr
//    ObjStack <ObjByPtr>
//    ObjStItr <ObjByPtr>
//------------------------------------------------------------------------------

#include <Stack.h>
#include <Link.h>

//------------------------------------------------------------------------------
// Class AbsObjStack
//
// A stack of individual objects of undefined type.
//
// Class Hierarchy:
//
// AbsStack
//    AbsObjStack
//       ObjStack <ObjByPtr>
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

class WitAbsObjStack: public WitAbsStack
   {
   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAbsObjStack (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitAbsObjStack ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void revCopyFromAbs (const WitAbsObjStack & theAbsObjStack);
         //
         // Copies the contents of theAbsObjStack into this AbsObjStack in 
         // reverse order.

      bool containsAbs (void * theObjByVP) const;
         //
         // Returns true, iff this AbsObjStack contains theObjByVP.

      void pushAbsObj (void * theObjByVP);
         //
         // Pushes theObjByVP onto the top of this AbsObjStack.

      bool popAbsObj (void * & theObjByVP);
         //
         // If this AbsObjStack is non-Empty, the first object it contains is
         // removed from it, theObjByVP is set to the removed object, and true
         // is returned;
         // otherwise, theObjByVP is set to NULL, and false is returned.

      void attachItrAbsObj (WitAbsObjStItr & theAbsObjStItr) const;
         //
         // Puts theAbsObjStItr into its initial state for iterating through
         // this AbsObjStack.

      void removeAbs (void * theObjByVP);
         //
         // Removes theObjByVP from this AbsObjStack (if it's there).

      void * firstObjByVP () const;
         //
         // Returns the first object in this AbsObjStack.
         // Not to be called if this AbsObjStack is empty.

      inline WitObjLink * firstObjLink () const
         {
         return reinterpret_cast <WitObjLink *> (firstAbsLink ());
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitAbsObjStack);
   };

//------------------------------------------------------------------------------
// Class AbsObjStItr
//
// Responsible for iterating through the elements of an AbsObjStack.
//
// Class Hierarchy:
//
// AbsStItr
//    AbsObjStItr
//       ObjStItr <ObjByPtr>
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

class WitAbsObjStItr: public WitAbsStItr       
   {
   friend class WitAbsObjStack;

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.                                              
      //------------------------------------------------------------------------
                                                                             
      WitAbsObjStItr ();                                            
                                                                             
      //------------------------------------------------------------------------
      // Destructor function.                                                
      //------------------------------------------------------------------------
                                                                             
      ~WitAbsObjStItr ();                                           
                                                                             
      //------------------------------------------------------------------------
      // Other protected member functions.                                   
      //------------------------------------------------------------------------

      bool advanceAbsObj (void * & theObjByVP);
         //
         // See AbsStItr::advanceAbs.
         // If the advance is successful, theObjByVP is set to the next object;
         // otherwise                     theObjByVP is set to NULL.

   private:                                                                  
                                                                             
      //------------------------------------------------------------------------
      // Private member functions.                                           
      //------------------------------------------------------------------------
                                                                          
      noCopyCtorAssign (WitAbsObjStItr);                           
   };

//------------------------------------------------------------------------------
// Class template ObjStack <ObjByPtr>
//
// A stack of individual objects of type ObjByPtr.
//
// Class Hierarchy:
//
// AbsStack
//    AbsObjStack
//       ObjStack <ObjByPtr>
//
// All implementation is inline.
//------------------------------------------------------------------------------

template <typename ObjByPtr> 
      class WitObjStack: public WitAbsObjStack
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitObjStack (WitProblem * theProblem):
            WitAbsObjStack (theProblem)
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitObjStack ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void revCopyFrom (const WitObjStack & theObjStack)
         {
         revCopyFromAbs (theObjStack);
         }

      inline bool contains (ObjByPtr * theObject) const
         {
         return containsAbs (theObject);
         }

      inline void push (ObjByPtr * theObject)
         {
         pushAbsObj (theObject);
         }

      inline bool pop (ObjByPtr * & theObject)
         {
         return popAbsObj (reinterpret_cast <void * &> (theObject));
         }

      inline void attachItr (WitObjStItr <ObjByPtr> & theObjStItr) const
         {
         attachItrAbsObj (theObjStItr);
         }

      inline void remove (ObjByPtr * theObject)
         {
         removeAbs (theObject);
         }

      inline void takeContentsFrom (WitObjStack & thatObjStack)
         {
         takeContentsFromAbs (thatObjStack);
         }

      inline ObjByPtr * firstObject () const
         {
         return reinterpret_cast <ObjByPtr *> (firstObjByVP ());
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitObjStack);
   };

//------------------------------------------------------------------------------
// Global function template deleteContents.
//
// Deletes all of the objects stored by theObjStack and clears theObjStack.
//
// Note: This function template needs to be global (rather than being a class
// member or belonging to an explicit namespace) in order to compile on Windows.
//------------------------------------------------------------------------------

template <typename ObjByPtr> 
      void deleteContents (WitObjStack <ObjByPtr> & theObjStack)
   {
   ObjByPtr * theObject;

   while (theObjStack.pop (theObject))
      delete theObject;
   }

//------------------------------------------------------------------------------
// NonClass function template revCopyInto.
//
// Makes theObjStack a reverse copy of theList.
//------------------------------------------------------------------------------

namespace WitNonClass
   {
   template <typename ObjByPtr> 
      void revCopyInto (
         WitObjStack <ObjByPtr> &   theObjStack,
         const WitList <ObjByPtr> & theList);
   }

//------------------------------------------------------------------------------
// Class template ObjStItr <ObjByPtr>
//
// Responsible for iterating through the elements of an ObjStack <ObjByPtr>.
//
// Class Hierarchy:
//
// AbsStItr
//    AbsObjStItr
//       ObjStItr <ObjByPtr>
//
// All implementation is inline.
//------------------------------------------------------------------------------

template <typename ObjByPtr> 
      class WitObjStItr: public WitAbsObjStItr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitObjStItr ():
            WitAbsObjStItr ()
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitObjStItr ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline bool advance (ObjByPtr * & theObject)
         {
         return advanceAbsObj (reinterpret_cast <void * &> (theObject));
         }

      inline ObjByPtr * myObject () const
         {
         return reinterpret_cast <ObjByPtr *> (myObjByVP ());
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      inline void * myObjByVP () const
         {
         return static_cast <const WitObjLink *> (curAbsLink ())->myObjByVP ();
         }

      noCopyCtorAssign (WitObjStItr);
   };

#endif
@


1.58
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.57
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d42 2
a43 8
{
protected:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitAbsObjStack (WitProblem *);
d45 60
a104 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d106 2
a107 53
~WitAbsObjStack ();

//------------------------------------------------------------------------
// Other protected member functions.
//------------------------------------------------------------------------

void revCopyFromAbs (const WitAbsObjStack & theAbsObjStack);
//
// Copies the contents of theAbsObjStack into this AbsObjStack in
// reverse order.

bool containsAbs (void * theObjByVP) const;
//
// Returns true, iff this AbsObjStack contains theObjByVP.

void pushAbsObj (void * theObjByVP);
//
// Pushes theObjByVP onto the top of this AbsObjStack.

bool popAbsObj (void * & theObjByVP);
//
// If this AbsObjStack is non-Empty, the first object it contains is
// removed from it, theObjByVP is set to the removed object, and true
// is returned;
// otherwise, theObjByVP is set to NULL, and false is returned.

void attachItrAbsObj (WitAbsObjStItr & theAbsObjStItr) const;
//
// Puts theAbsObjStItr into its initial state for iterating through
// this AbsObjStack.

void removeAbs (void * theObjByVP);
//
// Removes theObjByVP from this AbsObjStack (if it's there).

void * firstObjByVP () const;
//
// Returns the first object in this AbsObjStack.
// Not to be called if this AbsObjStack is empty.

inline WitObjLink * firstObjLink () const
{
return reinterpret_cast <WitObjLink *> (firstAbsLink ());
}

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitAbsObjStack);
};
d123 36
a158 36
class WitAbsObjStItr: public WitAbsStItr
{
friend class WitAbsObjStack;

protected:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitAbsObjStItr ();

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitAbsObjStItr ();

//------------------------------------------------------------------------
// Other protected member functions.
//------------------------------------------------------------------------

bool advanceAbsObj (void * & theObjByVP);
//
// See AbsStItr::advanceAbs.
// If the advance is successful, theObjByVP is set to the next object;
// otherwise                     theObjByVP is set to NULL.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitAbsObjStItr);
};
d174 71
a244 71
template <typename ObjByPtr>
class WitObjStack: public WitAbsObjStack
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

inline WitObjStack (WitProblem * theProblem):
WitAbsObjStack (theProblem)
{
}

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

inline ~WitObjStack ()
{
}

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

inline void revCopyFrom (const WitObjStack & theObjStack)
{
revCopyFromAbs (theObjStack);
}

inline bool contains (ObjByPtr * theObject) const
{
return containsAbs (theObject);
}

inline void push (ObjByPtr * theObject)
{
pushAbsObj (theObject);
}

inline bool pop (ObjByPtr * & theObject)
{
return popAbsObj (reinterpret_cast <void * &> (theObject));
}

inline void attachItr (WitObjStItr <ObjByPtr> & theObjStItr) const
{
attachItrAbsObj (theObjStItr);
}

inline void remove (ObjByPtr * theObject)
{
removeAbs (theObject);
}

inline void takeContentsFrom (WitObjStack & thatObjStack)
{
takeContentsFromAbs (thatObjStack);
}

inline ObjByPtr * firstObject () const
{
return reinterpret_cast <ObjByPtr *> (firstObjByVP ());
}

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d246 2
a247 2
noCopyCtorAssign (WitObjStack);
};
d258 8
a265 8
template <typename ObjByPtr>
void deleteContents (WitObjStack <ObjByPtr> & theObjStack)
{
ObjByPtr * theObject;

while (theObjStack.pop (theObject))
delete theObject;
}
d274 6
a279 6
{
template <typename ObjByPtr>
void revCopyInto (
WitObjStack <ObjByPtr> &   theObjStack,
const WitList <ObjByPtr> & theList);
}
d295 46
a340 46
template <typename ObjByPtr>
class WitObjStItr: public WitAbsObjStItr
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

inline WitObjStItr ():
WitAbsObjStItr ()
{
}

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

inline ~WitObjStItr ()
{
}

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

inline bool advance (ObjByPtr * & theObject)
{
return advanceAbsObj (reinterpret_cast <void * &> (theObject));
}

inline ObjByPtr * myObject () const
{
return reinterpret_cast <ObjByPtr *> (myObjByVP ());
}

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

inline void * myObjByVP () const
{
return static_cast <const WitObjLink *> (curAbsLink ())->myObjByVP ();
}
d342 2
a343 2
noCopyCtorAssign (WitObjStItr);
};
@


1.56
log
@ASAP Pegging Order
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d42 8
a49 2
   {
   protected:
d51 3
a53 60
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAbsObjStack (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitAbsObjStack ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void revCopyFromAbs (const WitAbsObjStack & theAbsObjStack);
         //
         // Copies the contents of theAbsObjStack into this AbsObjStack in 
         // reverse order.

      bool containsAbs (void * theObjByVP) const;
         //
         // Returns true, iff this AbsObjStack contains theObjByVP.

      void pushAbsObj (void * theObjByVP);
         //
         // Pushes theObjByVP onto the top of this AbsObjStack.

      bool popAbsObj (void * & theObjByVP);
         //
         // If this AbsObjStack is non-Empty, the first object it contains is
         // removed from it, theObjByVP is set to the removed object, and true
         // is returned;
         // otherwise, theObjByVP is set to NULL, and false is returned.

      void attachItrAbsObj (WitAbsObjStItr & theAbsObjStItr) const;
         //
         // Puts theAbsObjStItr into its initial state for iterating through
         // this AbsObjStack.

      void removeAbs (void * theObjByVP);
         //
         // Removes theObjByVP from this AbsObjStack (if it's there).

      void * firstObjByVP () const;
         //
         // Returns the first object in this AbsObjStack.
         // Not to be called if this AbsObjStack is empty.

      inline WitObjLink * firstObjLink () const
         {
         return reinterpret_cast <WitObjLink *> (firstAbsLink ());
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d55 53
a107 2
      noCopyCtorAssign (WitAbsObjStack);
   };
d123 36
a158 36
class WitAbsObjStItr: public WitAbsStItr       
   {
   friend class WitAbsObjStack;

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.                                              
      //------------------------------------------------------------------------
                                                                             
      WitAbsObjStItr ();                                            
                                                                             
      //------------------------------------------------------------------------
      // Destructor function.                                                
      //------------------------------------------------------------------------
                                                                             
      ~WitAbsObjStItr ();                                           
                                                                             
      //------------------------------------------------------------------------
      // Other protected member functions.                                   
      //------------------------------------------------------------------------

      bool advanceAbsObj (void * & theObjByVP);
         //
         // See AbsStItr::advanceAbs.
         // If the advance is successful, theObjByVP is set to the next object;
         // otherwise                     theObjByVP is set to NULL.

   private:                                                                  
                                                                             
      //------------------------------------------------------------------------
      // Private member functions.                                           
      //------------------------------------------------------------------------
                                                                          
      noCopyCtorAssign (WitAbsObjStItr);                           
   };
d174 71
a244 71
template <typename ObjByPtr> 
      class WitObjStack: public WitAbsObjStack
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitObjStack (WitProblem * theProblem):
            WitAbsObjStack (theProblem)
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitObjStack ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void revCopyFrom (const WitObjStack & theObjStack)
         {
         revCopyFromAbs (theObjStack);
         }

      inline bool contains (ObjByPtr * theObject) const
         {
         return containsAbs (theObject);
         }

      inline void push (ObjByPtr * theObject)
         {
         pushAbsObj (theObject);
         }

      inline bool pop (ObjByPtr * & theObject)
         {
         return popAbsObj (reinterpret_cast <void * &> (theObject));
         }

      inline void attachItr (WitObjStItr <ObjByPtr> & theObjStItr) const
         {
         attachItrAbsObj (theObjStItr);
         }

      inline void remove (ObjByPtr * theObject)
         {
         removeAbs (theObject);
         }

      inline void takeContentsFrom (WitObjStack & thatObjStack)
         {
         takeContentsFromAbs (thatObjStack);
         }

      inline ObjByPtr * firstObject () const
         {
         return reinterpret_cast <ObjByPtr *> (firstObjByVP ());
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d246 2
a247 2
      noCopyCtorAssign (WitObjStack);
   };
d258 8
a265 8
template <typename ObjByPtr> 
      void deleteContents (WitObjStack <ObjByPtr> & theObjStack)
   {
   ObjByPtr * theObject;

   while (theObjStack.pop (theObject))
      delete theObject;
   }
d274 6
a279 6
   {
   template <typename ObjByPtr> 
      void revCopyInto (
         WitObjStack <ObjByPtr> &   theObjStack,
         const WitList <ObjByPtr> & theList);
   }
d295 46
a340 46
template <typename ObjByPtr> 
      class WitObjStItr: public WitAbsObjStItr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitObjStItr ():
            WitAbsObjStItr ()
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitObjStItr ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline bool advance (ObjByPtr * & theObject)
         {
         return advanceAbsObj (reinterpret_cast <void * &> (theObject));
         }

      inline ObjByPtr * myObject () const
         {
         return reinterpret_cast <ObjByPtr *> (myObjByVP ());
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      inline void * myObjByVP () const
         {
         return static_cast <const WitObjLink *> (curAbsLink ())->myObjByVP ();
         }
d342 2
a343 2
      noCopyCtorAssign (WitObjStItr);
   };
@


1.55
log
@New PIP pegging order.
@
text
@d230 1
a230 1
      inline void passContentsTo (WitObjStack & theObjStack)
d232 1
a232 1
         passContentsToAbs (theObjStack);
@


1.54
log
@Updated the copyright date on all source files.
@
text
@d77 3
a79 2
         // removed from it and theObjByVP is set to the removed object.
         // Returns true, iff this AbsObjStack is non-empty.
d148 2
a149 1
         // Sets theObjByVP, if the advance is successful.
d230 1
a230 1
      inline void takeContents (WitObjStack & theObjStack)
d232 1
a232 1
         takeContentsAbs (theObjStack);
@


1.53
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.52
log
@[shared-resource pegging]
@
text
@d80 1
a80 1
      void attachAbsObj (WitAbsObjStItr & theAbsObjStItr) const;
d218 1
a218 1
      inline void attach (WitObjStItr <ObjByPtr> & theObjStItr) const
d220 1
a220 1
         attachAbsObj (theObjStItr);
@


1.51
log
@[shared-resource pegging]
@
text
@a143 5
      inline void advanceAbsObj ()
         {
         advanceAbs ();
         }

@


1.50
log
@[shared-resource pegging]
@
text
@d80 5
a142 5
                                                                            
      inline void attachToAbsObj (const WitAbsObjStack & theAbsObjStack)
         {
         attachToAbs (theAbsObjStack);
         }
d223 5
a323 5
      inline void attachTo (const WitObjStack <ObjByPtr> & theObjStack)
         {
         attachToAbs (theObjStack);
         }

@


1.49
log
@[shared-resource pegging]
@
text
@d19 1
a88 7
      static bool advanceAbsObj (
            WitAbsStItr & theItr, 
            void * &      theObjByVP);
         //
         // See AbsStItr::advanceAbs.
         // Sets theObjByVP, if the advance is successful.

d104 60
a237 10
      inline static bool advance (
            WitObjStItr <ObjByPtr> & theItr,
            ObjByPtr * &             theObject)
         {
         return
            advanceAbsObj (
               theItr,
               reinterpret_cast <void * &> (theObject));
         }

d287 2
a288 2
//    ObjStItr <ObjByPtr>
//       PerStItr
d294 1
a294 1
      class WitObjStItr: public WitAbsStItr
d303 1
a303 1
            WitAbsStItr ()
d326 1
a326 1
         return WitObjStack <ObjByPtr>::advance (* this, theObject);
@


1.48
log
@[shared-resource pegging]
@
text
@a24 1
#include <TlObj.h>
d65 1
a65 1
      bool containsAbs (WitTlObj * theTlObj) const;
d67 1
a67 1
         // Returns true, iff this AbsObjStack contains theTlObj.
d69 1
a69 1
      void pushAbsObj (WitTlObj * theTlObj);
d71 1
a71 1
         // Pushes theTlObj onto the top of this AbsObjStack.
d73 1
a73 1
      bool popAbsObj (WitTlObj * & theTlObj);
d76 1
a76 1
         // removed from it and theTlObj is set to the removed object.
d79 1
a79 1
      void removeAbs (WitTlObj * theTlObj);
d81 1
a81 1
         // Removes theTlObj from this AbsObjStack (if it's there).
d83 1
a83 1
      WitTlObj * firstTlObj () const;
d90 1
a90 1
            WitTlObj * &  theTlObj);
d93 1
a93 1
         // Sets theTlObj, if the advance is successful.
d156 1
a156 1
         return containsAbs (toTlObj_cast (theObject));
d161 1
a161 1
         pushAbsObj (toTlObj_cast (theObject));
d166 1
a166 1
         return popAbsObj (toTlObjRef_cast (theObject));
d171 1
a171 1
         removeAbs (toTlObj_cast (theObject));
d181 1
a181 1
         return fromTlObj_cast <ObjByPtr> (firstTlObj ());
d191 1
a191 1
               toTlObjRef_cast (theObject));
d287 1
a287 1
         return fromTlObj_cast <ObjByPtr> (myTlObj ());
d296 1
a296 1
      inline WitTlObj * myTlObj () const
d298 1
a298 1
         return static_cast <const WitObjLink *> (curAbsLink ())->myTlObj ();
@


1.47
log
@[multi-thread]
@
text
@d19 2
a20 2
//    ObjStack <ObjType>
//    ObjStItr <ObjType>
d36 1
a36 1
//       ObjStack <ObjType>
d111 1
a111 1
// Class template ObjStack <ObjType>
d113 1
a113 1
// A stack of individual objects of type ObjType.
d119 1
a119 1
//       ObjStack <ObjType>
d124 1
a124 1
template <typename ObjType> 
d155 1
a155 1
      inline bool contains (ObjType * theObject) const
d160 1
a160 1
      inline void push (ObjType * theObject)
d165 1
a165 1
      inline bool pop (ObjType * & theObject)
d170 1
a170 1
      inline void remove (ObjType * theObject)
d180 1
a180 1
      inline ObjType * firstObject () const
d182 1
a182 1
         return fromTlObj_cast <ObjType> (firstTlObj ());
d186 2
a187 2
            WitObjStItr <ObjType> & theItr,
            ObjType * &             theObject)
d213 2
a214 2
template <typename ObjType> 
      void deleteContents (WitObjStack <ObjType> & theObjStack)
d216 1
a216 1
   ObjType * theObject;
d230 1
a230 1
   template <typename ObjType> 
d232 2
a233 2
         WitObjStack <ObjType> &   theObjStack,
         const WitList <ObjType> & theList);
d237 1
a237 1
// Class template ObjStItr <ObjType>
d239 1
a239 1
// Responsible for iterating through the elements of an ObjStack <ObjType>.
d244 1
a244 1
//    ObjStItr <ObjType>
d250 1
a250 1
template <typename ObjType> 
d276 1
a276 1
      inline void attachTo (const WitObjStack <ObjType> & theObjStack)
d281 1
a281 1
      inline bool advance (ObjType * & theObject)
d283 1
a283 1
         return WitObjStack <ObjType>::advance (* this, theObject);
d286 1
a286 1
      inline ObjType * myObject () const
d288 1
a288 1
         return fromTlObj_cast <ObjType> (myTlObj ());
@


1.46
log
@[multi-threads]
@
text
@d229 6
a234 10
{

template <typename ObjType> 
   void revCopyInto (
      WitObjStack <ObjType> &   theObjStack,
      const WitList <ObjType> & theList);

}
   //
   // Leaving namespace NonClass.
@


1.45
log
@Low-Pri Prop-Rt.
@
text
@a235 1
// Leaving namespace NonClass.
d237 2
@


1.44
log
@Continued implementation of PIP.
@
text
@a95 4
      static bool advanceAbsObj (WitAbsStItr & theItr);
         //
         // See AbsStItr::advanceAbs.

a194 5
      inline static bool advance (WitObjStItr <ObjType> & theItr)
         {
         return advanceAbsObj (theItr);
         }

a288 10
      inline bool advance ()
         {
         return WitObjStack <ObjType>::advance (* this);
         }

      inline ObjType * operator -> () const
         {
         return myObject ();
         }

@


1.43
log
@An attempt to fix more syntax errors from on Windows.
@
text
@d61 1
a61 1
      void revCopyIntoAbs (WitAbsObjStack & theAbsObjStack) const;
d63 1
a63 1
         // Copies the contents of this AbsObjStack into theAbsObjStack in 
d154 1
a154 1
      inline void revCopyInto (WitObjStack & theObjStack) const
d156 1
a156 1
         revCopyIntoAbs (theObjStack);
@


1.42
log
@Continued implementation of PIP.
@
text
@d214 1
a214 1
// NonClass function template deleteContents.
a216 13
//------------------------------------------------------------------------------

namespace WitNonClass
{

template <typename ObjType> 
   void deleteContents (WitObjStack <ObjType> & theObjStack);

// Leaving namespace NonClass.
}

//------------------------------------------------------------------------------
// Implementation of NonClass function template deleteContents.
d218 2
a219 1
// Deletes all of the objects stored by theObjStack and clears theObjStack.
d223 1
a223 1
      void WitNonClass::deleteContents (WitObjStack <ObjType> & theObjStack)
@


1.41
log
@Continued implementation of PIP.
@
text
@d220 7
a226 4
   {
   template <typename ObjType> 
      void deleteContents (WitObjStack <ObjType> & theObjStack);
   }
d250 9
a258 6
   {
   template <typename ObjType> 
      void revCopyInto (
         WitObjStack <ObjType> &   theObjStack,
         const WitList <ObjType> & theList);
   }
@


1.40
log
@Minor changes.
@
text
@d214 13
a226 1
// Global function template deleteContents.
d232 1
a232 1
      void deleteContents (WitObjStack <ObjType> & theObjStack)
d241 1
a241 1
// Global function template revCopyInto.
d246 3
a248 1
template <typename ObjType> 
d252 1
@


1.39
log
@An attempt to fix another link error from the Windows compiler.
@
text
@d125 1
a125 1
// Implemented inline and in Stack.C.
a157 4

      void oldRevCopyOf (const WitList <ObjType> & theList);
         //
         // Makes this ObjStack a reverse copy of theList.
@


1.38
log
@An attempt to fix link errors from the Windows compiler.
@
text
@d159 1
a159 1
      void revCopyOf (const WitList <ObjType> & theList);
d231 11
@


1.37
log
@Modifications for the Linux port.
@
text
@d66 4
d163 4
a166 3
      bool contains (ObjType * theObject) const;
         //
         // Returns true, iff this ObjStack contains theObject.
@


1.36
log
@Continued implementation of proportionate routing.
@
text
@d121 1
a121 1
// All implementation is inline.
d155 1
a155 10
      inline void revCopyOf (const WitList <ObjType> & theList)
         {
         WitListItr theItr (theList);
         ObjType *  theObject;

         clear ();

         while (theList.advance (theItr, theObject))
            push (theObject);
         }
d159 1
a159 1
      inline bool contains (ObjType * theObject) const;
a304 21

//------------------------------------------------------------------------------
// Inline implementation of class template ObjStack <ObjType>
//------------------------------------------------------------------------------

template <typename ObjType> 
      inline bool WitObjStack <ObjType>::contains (
         ObjType * theObject) 
         const
   {
   WitObjStItr <ObjType> theItr;
   ObjType *             theItrObj;

   theItr.attachTo (* this);

   while (theItr.advance (theItrObj))
      if (theItrObj == theObject)
         return true;

   return false;
   }
@


1.35
log
@Continued implementation of proportionate routing.
@
text
@a36 1
//          PerStack
a119 1
//          PerStack
@


1.34
log
@Continued implementation of proportionate routing.
@
text
@d293 1
a293 1
      inline ObjType * operator () () const
d298 1
a298 1
      inline ObjType * operator -> () const
d300 1
a300 1
         return myObject ();
a307 5

      inline ObjType * myObject () const
         {
         return fromTlObj_cast <ObjType> (myTlObj ());
         }
@


1.33
log
@Removed all const_casts from WIT.
@
text
@d24 1
d93 4
d209 5
d224 1
a224 1
// Global function deleteContents.
d288 15
d308 10
@


1.32
log
@Replaced some C style casts with C++ style casts.
@
text
@d176 1
a176 6
         return
            popAbsObj (
               const_cast <WitTlObj * &> (
                  reinterpret_cast <const WitTlObj * &> (
                     const_cast <const ObjType * &> (
                        theObject))));
d201 1
a201 4
               const_cast <WitTlObj * &> (
                  reinterpret_cast <const WitTlObj * &> (
                     const_cast <const ObjType * &> (
                        theObject))));
@


1.31
log
@Casting adjustments for MS complier.
@
text
@d94 1
a94 1
         return (WitObjLink *) firstAbsLink ();
@


1.30
log
@Replaced some C-style casts with C++ style casts.
@
text
@d176 6
a181 1
         return popAbsObj (toTlObjRef_cast (theObject));
d203 7
a209 1
         return advanceAbsObj (theItr, toTlObjRef_cast (theObject));
@


1.29
log
@Various internal changes.
@
text
@d24 1
d171 1
a171 1
         pushAbsObj ((WitTlObj *) theObject);
d176 1
a176 1
         return popAbsObj ((WitTlObj * &) theObject);
d181 1
a181 1
         removeAbs ((WitTlObj *) theObject);
d191 1
a191 1
         return (ObjType *) firstTlObj ();
d198 1
a198 1
         return advanceAbsObj (theItr, (WitTlObj * &) theObject);
@


1.28
log
@Various internal changes.
@
text
@d146 1
a146 1
      inline void revCopyInto (WitObjStack <ObjType> & theObjStack) const
d183 1
a183 1
      inline void takeContents (WitObjStack <ObjType> & theObjStack)
d206 1
a206 1
      noCopyCtorAssignTemp (WitObjStack, ObjType);
d280 1
a280 1
      noCopyCtorAssignTemp (WitObjStItr, ObjType);
@


1.27
log
@Internal changes.
@
text
@d120 1
a120 1
template <class ObjType> 
d215 1
a215 1
template <class ObjType> 
d238 1
a238 1
template <class ObjType> 
d287 1
a287 1
template <class ObjType> 
@


1.26
log
@Continued implementation of Single-Source.
@
text
@d69 1
a69 1
      WitBoolean popAbsObj (WitTlObj * & theTlObj);
d73 1
a73 1
         // Returns TRUE, iff this AbsObjStack is non-empty.
d84 1
a84 1
      static WitBoolean advanceAbsObj (
d164 1
a164 1
      inline WitBoolean contains (ObjType * theObject) const;
d166 1
a166 1
         // Returns TRUE, iff this ObjStack contains theObject.
d173 1
a173 1
      inline WitBoolean pop (ObjType * & theObject)
d193 1
a193 1
      inline static WitBoolean advance (
d269 1
a269 1
      inline WitBoolean advance (ObjType * & theObject)
d288 1
a288 1
      inline WitBoolean WitObjStack <ObjType>::contains (
d299 1
a299 1
         return witTRUE;
d301 1
a301 1
   return witFALSE;
@


1.25
log
@Continued implementation of Single-Source.
@
text
@a150 7
      inline void revCopyIntoConst (
            WitObjStack <const ObjType> & theObjStack) 
            const
         {
         revCopyIntoAbs (theObjStack);
         }

@


1.24
log
@Continued implementation of Single-Source.
@
text
@d35 1
d115 1
d240 1
@


1.23
log
@Preliminary work on single source.
@
text
@d56 1
a56 1
      // Other protected functions.
@


1.22
log
@Continued implementation of sel-split for pen-exec.
@
text
@d156 13
a226 21
   }

//------------------------------------------------------------------------------
// Global function template reverseCopyInto.
// 
// When calling this function, ListObjType must actually be WitList (ObjType).
// Makes theObjStack a reverse copy of theList.
//------------------------------------------------------------------------------

template <class ObjType, class ListObjType> 
      void reverseCopyInto (
               WitObjStack <ObjType> & theObjStack,
         const ListObjType &           theList)
   {
   WitListItr theItr (theList);
   ObjType *  theObject;

   theObjStack.clear ();

   while (theList.advance (theItr, theObject))
      theObjStack.push (theObject);
@


1.21
log
@Continued implementation of sel-split for pen-exec.
@
text
@d74 4
d168 5
@


1.20
log
@Continued implementation of sel-split for pen-exec.
@
text
@d152 4
d285 21
@


1.19
log
@Refactoring for constrained stock reallocation.
@
text
@d61 2
a62 1
         // Copies the contents of this AbsObjStack into theAbsObjStack.
d139 5
@


1.18
log
@Continued implementation of pegging.
@
text
@d183 15
@


1.17
log
@Removed class template AbsPairStack <*,*>.
@
text
@d59 4
d138 7
@


1.16
log
@An attempt to resolve link troubles on Windows.
@
text
@d106 1
a106 1
// All implemented is inline.
d202 1
a202 1
// All implemented is inline.
@


1.15
log
@Initial implementation of multi-route class templates.
@
text
@d178 13
a190 4
template <class ObjType, class ListObjType>
   void reverseCopyInto (
            WitObjStack <ObjType> & theObjStack,
      const ListObjType &           theList);
@


1.14
log
@More templates.
@
text
@d168 1
a168 4
      WitObjStack                        (const WitObjStack <ObjType> &);
      WitObjStack <ObjType> & operator = (const WitObjStack <ObjType> &);
         //
         // See noCopyCtorAssign in macs.h. 
d238 1
a238 4
      WitObjStItr                        (const WitObjStItr <ObjType> &);
      WitObjStItr <ObjType> & operator = (const WitObjStItr <ObjType> &);
         //
         // See noCopyCtorAssign in macs.h. 
@


1.13
log
@Some template stuff.
@
text
@d171 1
a171 1
         // See noCopyCtorAssign in mac.h. 
d244 1
a244 1
         // See noCopyCtorAssign in mac.h. 
@


1.12
log
@Converted several generic classes into class templates.
@
text
@d106 1
a106 1
// Implemented in Stack.C
d118 4
a121 1
      WitObjStack (WitProblem *);
d127 3
a129 1
      ~WitObjStack ();
d145 4
a148 3
      void takeContents (WitObjStack <ObjType> &);
         //
         // Wrapper for takeContentsAbs.
d196 1
a196 1
// Implemented in Stack.C
d208 4
a211 1
      WitObjStItr ();
d217 3
a219 1
      ~WitObjStItr ();
d225 1
a225 2
      inline void attachTo (
            const WitObjStack <ObjType> & theObjStack)
@


1.11
log
@Replaced use of CandIndex with CmrCand in Consumption Multi-Route subsystem.
@
text
@d16 1
a16 1
// Contains the declaration of the following classes:
d19 2
a20 2
//    ObjStack (ObjType)
//    ObjStItr (ValType)
d34 1
a34 1
//       ObjStack (ObjType)
d96 1
a96 2
// The following two generic classes are declared in the same class declaration
// macro:
d98 1
a98 8
//    ObjStack (ObjType)
//    ObjStItr (ObjType)
//------------------------------------------------------------------------------
  
//------------------------------------------------------------------------------
// Generic class ObjStack (ObjType)
//
// A stack of individual objects.
d104 1
a104 1
//       ObjStack (ObjType)
d106 67
a172 1
// All implementation is inline.
d175 5
d181 1
a181 1
// Generic class ObjStItr (ObjType)
d183 1
a183 1
// Responsible for iterating through the elements of a ObjStack (ObjType).
d188 1
a188 1
//    ObjStItr (ObjType)
d190 1
a190 1
// All implementation is inline.
d193 16
a208 3
//------------------------------------------------------------------------------
// Generic class declaration macro for ObjStack and ObjStItr.
//------------------------------------------------------------------------------
d210 3
a212 123
#define WitObjStackdeclare(ObjType)                                            \
                                                                               \
class WitObjStItr (ObjType);                                                   \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitObjStack (ObjType): public WitAbsObjStack                             \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline WitObjStack (ObjType) (WitProblem * theProblem):                  \
            WitAbsObjStack (theProblem)                                        \
         {                                                                     \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline ~WitObjStack (ObjType) ()                                         \
         {                                                                     \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline void push (ObjType * theObject)                                   \
         {                                                                     \
         pushAbsObj ((WitTlObj *) theObject);                                  \
         }                                                                     \
                                                                               \
      inline WitBoolean pop (ObjType * & theObject)                            \
         {                                                                     \
         return popAbsObj ((WitTlObj * &) theObject);                          \
         }                                                                     \
                                                                               \
      inline void takeContents (WitObjStack (ObjType) & theObjStack)           \
         {                                                                     \
         takeContentsAbs (theObjStack);                                        \
         }                                                                     \
                                                                               \
      inline ObjType * firstObject () const                                    \
         {                                                                     \
         return (ObjType *) firstTlObj ();                                     \
         }                                                                     \
                                                                               \
      inline static WitBoolean advance (                                       \
            WitObjStItr (ObjType) & theItr,                                    \
            ObjType * &             theObject);                                \
         /*                                                                  */\
         /* See AbsObjStack::advanceAbsObj.                                  */\
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtorAssign (WitObjStack (ObjType));                                \
   };                                                                          \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitObjStItr (ObjType): public WitAbsStItr                                \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline WitObjStItr (ObjType) ():                                         \
            WitAbsStItr ()                                                     \
         {                                                                     \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline ~WitObjStItr (ObjType) ()                                         \
         {                                                                     \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline void attachTo (                                                   \
            const WitObjStack (ObjType) & theObjStack)                         \
         {                                                                     \
         attachToAbs (theObjStack);                                            \
         }                                                                     \
                                                                               \
      inline WitBoolean advance (ObjType * & theObject)                        \
         {                                                                     \
         return WitObjStack (ObjType)::advance (* this, theObject);            \
         }                                                                     \
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtorAssign (WitObjStItr (ObjType));                                \
   };                                                                          \
                                                                               \
/*---------------------------------------------------------------------------*/\
/* Inlines                                                                   */\
/*---------------------------------------------------------------------------*/\
                                                                               \
inline WitBoolean WitObjStack (ObjType)::advance (                             \
      WitObjStItr (ObjType) & theItr,                                          \
      ObjType * &             theObject)                                       \
   {                                                                           \
   return advanceAbsObj (theItr, (WitTlObj * &) theObject);                    \
   }                                                                           \
d214 5
a218 6
//------------------------------------------------------------------------------
// Generic global function
// reverseCopyInto (ObjStack (ObjType) &, const List (ObjType) &)
// 
// Makes theObjStack a reverse copy of theList.
//------------------------------------------------------------------------------
d220 4
a223 7
#define reverseCopyInto_ObjStackdeclare(ObjType)                               \
                                                                               \
class WitList (ObjType);                                                       \
                                                                               \
void reverseCopyInto (                                                         \
      WitObjStack (ObjType) &    theObjStack,                                  \
      const WitList (ObjType) &  theList);                                     \
d225 1
a225 4
//------------------------------------------------------------------------------
// Declarations of all specific cases of the generic classes and functions
// declared in this file.
//------------------------------------------------------------------------------
d227 3
a229 1
typedef WitReqPt * WitReqPtPtr;
d231 5
a235 18
declare  (WitObjStack,              double)
declare  (WitObjStack,              WitBopEntry)
declare  (WitObjStack,              WitCmrCand)
declare  (WitObjStack,              WitConsEntry)
declare  (WitObjStack,              WitMaterial)
declare  (WitObjStack,              WitOperation)
declare  (WitObjStack,              WitPart)
declare  (WitObjStack,              WitPmrCand)
declare  (WitObjStack,              WitReqPt)
declare  (WitObjStack,              WitReqPtPtr)
declare  (WitObjStack,              WitSelPt)
declare  (WitObjStack,              WitSubEntry)
declare  (WitObjStack,              WitSplitPt)
declare  (WitObjStack,              WitTlObj)

declare  (reverseCopyInto_ObjStack, WitOperation)
declare  (reverseCopyInto_ObjStack, WitPart)
declare  (reverseCopyInto_ObjStack, WitSubEntry)
@


1.10
log
@Removed indexes from production multi-route.
Other refactoring.
@
text
@d282 1
@


1.9
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d281 2
a282 1
declare  (WitObjStack,              WitPart)
d285 2
a286 5
declare  (WitObjStack,              WitSubEntry)
declare  (WitObjStack,              WitBopEntry)
declare  (WitObjStack,              WitConsEntry)
declare  (WitObjStack,              WitSelPt)
declare  (WitObjStack,              WitTlObj)
d289 2
d292 1
d294 1
a295 1
declare  (reverseCopyInto_ObjStack, WitOperation)
@


1.8
log
@Renamed AltPt classes to SelPt classes.
@
text
@d59 1
a59 1
      void pushAbsObj (WitTl * theTlObj);
d63 1
a63 1
      WitBoolean popAbsObj (WitTl * & theTlObj);
d69 1
a69 1
      WitTl * firstTlObj () const;
d76 1
a76 1
            WitTl * &     theTlObj);
d167 1
a167 1
         pushAbsObj ((WitTl *) theObject);                                     \
d172 1
a172 1
         return popAbsObj ((WitTl * &) theObject);                             \
d255 1
a255 1
   return advanceAbsObj (theItr, (WitTl * &) theObject);                       \
d288 1
a288 1
declare  (WitObjStack,              WitTl)
d291 1
@


1.7
log
@Removed class MeAltPt.
Changed name of class MeSelPt to MeAltPt.
Implemented de-selection of colliding MeAltPts.
@
text
@d287 1
a287 1
declare  (WitObjStack,              WitAltPt)
@


1.6
log
@Fixed a bug on multi-exec.
@
text
@a290 2
declare  (WitObjStack,              WitMeSelPt)
declare  (WitObjStack,              WitMeAltPt)
@


1.5
log
@Fixed a particularly difficult bug in coarse selection splitting.
@
text
@d292 1
@


1.4
log
@Fixed some bugs in coarse selection splitting.
@
text
@d282 1
@


1.3
log
@Initial implementation of coarse selection splitting for build-ahead.
@
text
@d59 1
a59 1
      void putAbsObj (WitTl * theTlObj);
d61 1
a61 1
         // Puts theTlObj onto the top of this AbsObjStack.
d63 1
a63 1
      WitBoolean getAbsObj (WitTl * & theTlObj);
d165 1
a165 1
      inline void put (ObjType * theObject)                                    \
d167 1
a167 1
         putAbsObj ((WitTl *) theObject);                                      \
d170 1
a170 1
      inline WitBoolean get (ObjType * & theObject)                            \
d172 1
a172 1
         return getAbsObj ((WitTl * &) theObject);                             \
@


1.2
log
@Completed a limited implementation of coarse selection splitting for BOP
entries.
@
text
@d20 1
d23 1
a23 1
#include <Util.h>
d32 3
a34 2
// AbsObjStack
//    ObjStack (ObjType)
d39 1
a39 1
class WitAbsObjStack: public WitUtil
a40 28
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      inline WitBoolean isEmpty () const
         {
         return (firstObjLink_ == NULL);
         }

      void clear ();
         //
         // Removes all of the elements from this AbsObjStack.

      int nElements () const;
         //
         // Computes (by traversal) and returns the # of elements in this
         // AbsObjStack.

      void reverse ();
         //
         // Reverses the order of the elements in this AbsObjStack.

      WitProblem * myProblem () const;
         //
         // Returns the Problem associated with this AbsObjStack.

d47 1
a47 3
      WitAbsObjStack (WitProblem * theProblem);
         //
         // myObjLinkMgr_ <-- theProblem->myObjLinkMgr ()
d59 1
a59 1
      void putAbs (WitTl * theTlObj);
d63 1
a63 1
      WitBoolean getAbs (WitTl * & theTlObj);
a68 5
      void takeContentsAbs (WitAbsObjStack & theAbsObjStack);
         //
         // Clears this AbsObjStack and transfers the contents of theAbsObjStack
         // out of theAbsObjStack and into this AbsObjStack.

d74 12
a92 12

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitObjLinkMgr * const myObjLinkMgr_;
         //
         // The ObjLinkMgr to be used by this AbsObjStack.

      WitObjLink * firstObjLink_;
         //
         // The first ObjLink in this AbsObjStack.
d96 8
d110 16
a125 2
// AbsObjStack
//    ObjStack (ObjType)
d127 1
a127 1
// All implementation is inline, by casting and calling AbsObjStack functions.
d131 1
a131 1
// Generic class declaration macro.
d136 4
d167 1
a167 1
         putAbs ((WitTl *) theObject);                                         \
d172 1
a172 1
         return getAbs ((WitTl * &) theObject);                                \
d185 6
d199 58
@


1.1
log
@Further development of coarse selection splitting.
@
text
@d87 1
a87 1
      void pushAbs (WitTl * theTlObj);
d89 1
a89 1
         // Pushes theTlObj onto the top of this AbsObjStack.
d91 1
a91 1
      WitBoolean popAbs (WitTl * & theTlObj);
d93 2
a94 2
         // If this AbsObjStack is non-Empty, the first element it contains is
         // removed from it and theTlObj is set to the popped object.
d172 1
a172 1
      inline void push (ObjType * theObject)                                   \
d174 1
a174 1
         pushAbs ((WitTl *) theObject);                                        \
d177 1
a177 1
      inline WitBoolean pop (ObjType * & theObject)                            \
d179 1
a179 1
         return popAbs ((WitTl * &) theObject);                                \
@

