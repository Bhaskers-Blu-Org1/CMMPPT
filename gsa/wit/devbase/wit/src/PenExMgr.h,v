head	1.6;
access;
symbols
	sce_5_01_20080919:1.3
	latest_sce_4_20_20060523:1.2.0.2
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.1.0.2
	sce_4_20_OSL:1.1
	sce_410_withVa:1.1;
locks; strict;
comment	@ * @;


1.6
date	2011.09.28.23.49.52;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.24.00.28.13;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.08.30.20.17.53;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.25.21.11.58;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.02.17.34.07;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.19.23.50.58;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PenExMgrH
#define PenExMgrH

//------------------------------------------------------------------------------
// Header file: "PenExMgr.h"
//
// Contains the declaration of class PenExMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class PenExMgr
//
// Class Hierarchy:
//
// ProbAssoc
//    PenExMgr
//
// Implemented in PenExec.C.
//------------------------------------------------------------------------------

class WitPenExMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPenExMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPenExMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void modifyRouting ();
         //
         // Modifies the current routing as appropriate in order to fill a small
         // incremental requirement for topPart in topPer at a heuristically 
         // minimum exec penalty.

      void findHypoModPts (WitObjStack <WitSelPt> & theModPts);
         //
         // Sets theModPts to the set of SelPts at which the selection
         // configuration would be modified by a hypothetical call to
         // modifyRouting ().

      void recCommitVol (double commitVol);
         //
         // Records the fact that commitVol units of demand were commited based
         // on the current routing.

      void placeReqs (
            WitPart * srcPart,
            WitPeriod srcPer,
            WitPart * reqPart,
            WitPeriod reqPer);
         //
         // To be called when requirements are being placed on reqPart in
         // reqPer, whose source is srcPart in srcPer.

      void recExpBeyondNet (
            WitPart * thePart, 
            WitPeriod thePer, 
            bool      netForConsEnt);
         //
         // Records the fact that restricted explosion needs to continue after
         // netting supply of thePart in fillPer. netForConsEnt should be true,
         // iff the netting was ConsEntry netting.

      void postExpBomEnt ();
         //
         // To be called just after HeurAtor::explodeBomEntry.

      bool restExpAllowed (WitBopEntry * theBopEnt, WitPeriod fillPer);
         //
         // Returns true, iff restricted explosion thru theBopEnt to fill reqs
         // in fillPer is currently allowed.

      void recordFundShortage ();
         //
         // To be called whenever a fundamental shortage occurs.

      void reqPsSupRep (WitPart * thePart, WitPeriod thePer);
         //
         // Requests replenishment of pseudo-supply of thePart in thePer.

      void postTempCommit (bool success);
         //
         // To be called at the end of each temp commit, with success indicating
         // its result.

      void updatePsSup ();
         //
         // Makes updates to pseudo-supply that were requested in the most
         // recent failing temp-commit.

      void replenishPsSups ();
         //
         // Replenishes pseudo-supplies where this was requested.

      void print ();
         //
         // Prints this PenExMgr.

      bool failRestShortOnly ();
         //
         // Returns true, iff a restriction shortage was found in the most
         // recent failing temp commit, but no fundamental shortage.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPenExMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitExpRest * myExpRest_;
         //
         // The ExpRest owned by this PenExMgr.

      WitRtAnalyzer * myRtAnalyzer_;
         //
         // The RtAnalyzer owned by this PenExMgr.
   };

#endif
@


1.5
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.4
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d33 2
a34 18
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPenExMgr (WitSelector *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitPenExMgr ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d36 111
a146 95
void modifyRouting ();
//
// Modifies the current routing as appropriate in order to fill a small
// incremental requirement for topPart in topPer at a heuristically
// minimum exec penalty.

void findHypoModPts (WitObjStack <WitSelPt> & theModPts);
//
// Sets theModPts to the set of SelPts at which the selection
// configuration would be modified by a hypothetical call to
// modifyRouting ().

void recCommitVol (double commitVol);
//
// Records the fact that commitVol units of demand were commited based
// on the current routing.

void placeReqs (
WitPart * srcPart,
WitPeriod srcPer,
WitPart * reqPart,
WitPeriod reqPer);
//
// To be called when requirements are being placed on reqPart in
// reqPer, whose source is srcPart in srcPer.

void recExpBeyondNet (
WitPart * thePart,
WitPeriod thePer,
bool      netForConsEnt);
//
// Records the fact that restricted explosion needs to continue after
// netting supply of thePart in fillPer. netForConsEnt should be true,
// iff the netting was ConsEntry netting.

void postExpBomEnt ();
//
// To be called just after HeurAtor::explodeBomEntry.

bool restExpAllowed (WitBopEntry * theBopEnt, WitPeriod fillPer);
//
// Returns true, iff restricted explosion thru theBopEnt to fill reqs
// in fillPer is currently allowed.

void recordFundShortage ();
//
// To be called whenever a fundamental shortage occurs.

void reqPsSupRep (WitPart * thePart, WitPeriod thePer);
//
// Requests replenishment of pseudo-supply of thePart in thePer.

void postTempCommit (bool success);
//
// To be called at the end of each temp commit, with success indicating
// its result.

void updatePsSup ();
//
// Makes updates to pseudo-supply that were requested in the most
// recent failing temp-commit.

void replenishPsSups ();
//
// Replenishes pseudo-supplies where this was requested.

void print ();
//
// Prints this PenExMgr.

bool failRestShortOnly ();
//
// Returns true, iff a restriction shortage was found in the most
// recent failing temp commit, but no fundamental shortage.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitPenExMgr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitExpRest * myExpRest_;
//
// The ExpRest owned by this PenExMgr.

WitRtAnalyzer * myRtAnalyzer_;
//
// The RtAnalyzer owned by this PenExMgr.
};
@


1.3
log
@Heuristic search increment.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d33 18
a50 2
   {
   public:
d52 95
a146 111
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPenExMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPenExMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void modifyRouting ();
         //
         // Modifies the current routing as appropriate in order to fill a small
         // incremental requirement for topPart in topPer at a heuristically 
         // minimum exec penalty.

      void findHypoModPts (WitObjStack <WitSelPt> & theModPts);
         //
         // Sets theModPts to the set of SelPts at which the selection
         // configuration would be modified by a hypothetical call to
         // modifyRouting ().

      void recCommitVol (double commitVol);
         //
         // Records the fact that commitVol units of demand were commited based
         // on the current routing.

      void placeReqs (
            WitPart * srcPart,
            WitPeriod srcPer,
            WitPart * reqPart,
            WitPeriod reqPer);
         //
         // To be called when requirements are being placed on reqPart in
         // reqPer, whose source is srcPart in srcPer.

      void recExpBeyondNet (
            WitPart * thePart, 
            WitPeriod thePer, 
            bool      netForConsEnt);
         //
         // Records the fact that restricted explosion needs to continue after
         // netting supply of thePart in fillPer. netForConsEnt should be true,
         // iff the netting was ConsEntry netting.

      void postExpBomEnt ();
         //
         // To be called just after HeurAtor::explodeBomEntry.

      bool restExpAllowed (WitBopEntry * theBopEnt, WitPeriod fillPer);
         //
         // Returns true, iff restricted explosion thru theBopEnt to fill reqs
         // in fillPer is currently allowed.

      void recordFundShortage ();
         //
         // To be called whenever a fundamental shortage occurs.

      void reqPsSupRep (WitPart * thePart, WitPeriod thePer);
         //
         // Requests replenishment of pseudo-supply of thePart in thePer.

      void postTempCommit (bool success);
         //
         // To be called at the end of each temp commit, with success indicating
         // its result.

      void updatePsSup ();
         //
         // Makes updates to pseudo-supply that were requested in the most
         // recent failing temp-commit.

      void replenishPsSups ();
         //
         // Replenishes pseudo-supplies where this was requested.

      void print ();
         //
         // Prints this PenExMgr.

      bool failRestShortOnly ();
         //
         // Returns true, iff a restriction shortage was found in the most
         // recent failing temp commit, but no fundamental shortage.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPenExMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitExpRest * myExpRest_;
         //
         // The ExpRest owned by this PenExMgr.

      WitRtAnalyzer * myRtAnalyzer_;
         //
         // The RtAnalyzer owned by this PenExMgr.
   };
@


1.2
log
@Updated the copyright date on all source files.
@
text
@d64 1
a64 1
      void recCommitVol (double commitVol, bool byExp);
a67 2
         // If byExp is true, the commit was done by exploding; 
         // if it is false, the commit was done by netting.
@


1.1
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@

