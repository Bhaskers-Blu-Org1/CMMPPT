head	1.8;
access;
symbols
	sce_5_01_20080919:1.4
	latest_sce_4_20_20060523:1.4.0.2
	sce_4_20_20060523:1.4
	latest_sce4_20_OSL:1.3.0.14
	sce_4_20_OSL:1.3
	sce_410_withVa:1.3
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.3
	nextGenBranch:1.3.0.12
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.3.0.10
	Root-of-EndRw:1.3
	rwToStl:1.3.0.8
	latest_sce_3_10_20010924:1.3.0.6
	sce_3_10_20010924:1.3
	latest_sce_3_00_20010601:1.3.0.4
	sce_3_00_20010601:1.3
	latest_sce_2_31_20010308:1.3.0.2
	sce_2_31_20010308:1.3
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2011.09.28.23.49.25;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.24.00.27.45;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.08.30.20.17.33;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.11.17.22.54.48;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.02.17.34.00;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.22.23.11.41;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.57;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.22;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.22;	author wit;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef HeurImpH
#define HeurImpH

//------------------------------------------------------------------------------
// Header file: "HeurImp.h"
//
// Contains the declaration of class HeurImploder.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// class HeurImploder
//
// This class provides the interface between heuristic implosion and the rest
// of WIT. An instance of this class exists of long as the Problem that owns it
// exists.
//------------------------------------------------------------------------------

class WitHeurImploder: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitHeurImploder (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitHeurImploder ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void implode ();
         //
         // Performs a heuristic implosion.

      void implodeForOpt ();
         //
         // Performs a heuristic implosion for optimizing implosion.

      void genPriorities (WitSchedule <WitDemand, int> & newPriority);
         //
         // Automatically generates priorities from objective data.
         // Stores the new priorities in newPriority.
         // The priorities are generated as follows:
         //    The demands are sorted according to objective function data.
         //    Then the priorities are assigned according to the order in which
         //    the demands appear in the sorted list.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      bool compareDemands (WitDemand *, WitDemand *);
         //
         // Comparison function for sorting demands in order to generate
         // priorities.
         //
         // Compares for:
         //   higher shipReward,    then
         //   higher cumShipReward, then
         //   higher stockCost,     then
         //   lower  index,
         // all in priorityPer_.

      noCopyCtorAssign (WitHeurImploder);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPeriod priorityPer_;
         //
         // The period for which priorities are currently being generated by
         // genPriorities.
   };

#endif
@


1.7
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.6
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d30 2
a31 24
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitHeurImploder (WitProblem * theProblem);
//
// ProbAssoc <<< theProblem.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitHeurImploder ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void implode ();
//
// Performs a heuristic implosion.
d33 64
a96 42
void implodeForOpt ();
//
// Performs a heuristic implosion for optimizing implosion.

void genPriorities (WitSchedule <WitDemand, int> & newPriority);
//
// Automatically generates priorities from objective data.
// Stores the new priorities in newPriority.
// The priorities are generated as follows:
//    The demands are sorted according to objective function data.
//    Then the priorities are assigned according to the order in which
//    the demands appear in the sorted list.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

bool compareDemands (WitDemand *, WitDemand *);
//
// Comparison function for sorting demands in order to generate
// priorities.
//
// Compares for:
//   higher shipReward,    then
//   higher cumShipReward, then
//   higher stockCost,     then
//   lower  index,
// all in priorityPer_.

noCopyCtorAssign (WitHeurImploder);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitPeriod priorityPer_;
//
// The period for which priorities are currently being generated by
// genPriorities.
};
@


1.5
log
@Removing objective #2.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d30 24
a53 2
   {
   public:
d55 42
a96 64
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitHeurImploder (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitHeurImploder ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void implode ();
         //
         // Performs a heuristic implosion.

      void implodeForOpt ();
         //
         // Performs a heuristic implosion for optimizing implosion.

      void genPriorities (WitSchedule <WitDemand, int> & newPriority);
         //
         // Automatically generates priorities from objective data.
         // Stores the new priorities in newPriority.
         // The priorities are generated as follows:
         //    The demands are sorted according to objective function data.
         //    Then the priorities are assigned according to the order in which
         //    the demands appear in the sorted list.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      bool compareDemands (WitDemand *, WitDemand *);
         //
         // Comparison function for sorting demands in order to generate
         // priorities.
         //
         // Compares for:
         //   higher shipReward,    then
         //   higher cumShipReward, then
         //   higher stockCost,     then
         //   lower  index,
         // all in priorityPer_.

      noCopyCtorAssign (WitHeurImploder);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPeriod priorityPer_;
         //
         // The period for which priorities are currently being generated by
         // genPriorities.
   };
@


1.4
log
@Updated the copyright date on all source files.
@
text
@d59 9
d74 12
d87 9
@


1.3
log
@Refactoring for selection splitting.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d65 1
a65 3
      copyCtorAndAssignment (WitHeurImploder);
         //
         // Prevents unintentional copying and assignment.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
