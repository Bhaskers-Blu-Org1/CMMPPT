head	1.24;
access;
symbols
	sce_5_01_20080919:1.14
	latest_sce_4_20_20060523:1.14.0.2
	sce_4_20_20060523:1.14
	latest_sce4_20_OSL:1.13.0.2
	sce_4_20_OSL:1.13
	sce_410_withVa:1.13;
locks; strict;
comment	@ * @;


1.24
date	2011.09.28.23.49.57;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.09.24.00.28.20;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.08.30.20.17.58;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2010.07.30.20.20.14;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2010.07.29.21.03.12;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2010.07.28.21.40.40;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2010.07.28.19.27.46;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2010.07.16.21.08.25;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2010.07.16.20.21.21;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2010.07.13.17.41.29;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2006.05.02.17.34.09;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.03.02.22.56.28;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2005.01.21.23.01.51;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2005.01.18.20.03.28;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2005.01.15.00.20.08;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.13.17.24.21;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.10.19.02.25;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.08.00.10.35;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.01.07.23.40.56;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.06.23.16.27;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.06.20.34.10;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.29.16.50.05;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.28.22.34.27;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.28.19.21.19;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PrAltPtH
#define PrAltPtH

//------------------------------------------------------------------------------
// Header file: "PrAltPt.h"
//
// Contains the declaration of class PrAltPt.
//------------------------------------------------------------------------------

#include <AltPt.h>

//------------------------------------------------------------------------------
// Class PrAltPt
//
// "Proportionate Routing Alteration Point"
// A PrAltPt is an AltPt at which the proportionate routing configuration can be
// altered. In this case, the alteration is the deactivation of a particular
// RtCand in a particular period for proportionate routing purposes.
//
// Class Hierarchy:
//
// AltPt
//    PrAltPt
//
// Implemented in PropRtg.C.
//------------------------------------------------------------------------------

class WitPrAltPt: public WitAltPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrAltPt (WitPrSelPt *, WitRtCand *, WitPrCoord *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPrAltPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void setStatus (bool activeVal, bool allowedVal);
         //
         // Sets active_ and allowed_.

      void recoverInitState ();
         //
         // Restores the Prop-Rtg configuration at this PrAltPt to its initial
         // state.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPrSelPt *, myPrSelPt)
      accessFunc (bool,         active)
      accessFunc (bool,         allowed)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual bool       hasResAlt       ();
      virtual void       alterSelection  ();
      virtual void       storeRecoveryPt ();
      virtual void       tempAlterSel    ();
      virtual void       cancelTempAlt   ();
      virtual WitSelPt * mySelPt         ();
      virtual void       printAlteration ();
         //
         // Overrides from class AltPt.

      void printRecovery ();
         //
         // Prints the restoration of the Prop-Rtg configuration at this PrAltPt
         // to its initial state.

      noCopyCtorAssign (WitPrAltPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPrSelPt * const myPrSelPt_;
         //
         // The PrSelPt for this PrAltPt.

      WitRtCand * const myRtCand_;
         //
         // The RtCand for this PrAltPt.

      WitPrCoord * const myPrCoord_;
         //
         // The PrCoord that owns this PrAltPt.

      bool active_;
         //
         // true, iff proportionate routing is currently active for myRtCand_ in
         // the period for this PrAltPt.

      bool allowed_;
         //
         // true, iff proportionate routing is currently allowed for myRtCand_
         // in the period for this PrAltPt.
         // If active_ is true, then allowed_ must be true.
         // When not in TBPR mode, active_ is true iff allowed_ is true.
   };

#endif
@


1.23
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.22
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d38 2
a39 12
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPrAltPt (WitPrSelPt *, WitRtCand *, WitPrCoord *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d41 84
a124 74
virtual ~WitPrAltPt ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void setStatus (bool activeVal, bool allowedVal);
//
// Sets active_ and allowed_.

void recoverInitState ();
//
// Restores the Prop-Rtg configuration at this PrAltPt to its initial
// state.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitPrSelPt *, myPrSelPt)
accessFunc (bool,         active)
accessFunc (bool,         allowed)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

virtual bool       hasResAlt       ();
virtual void       alterSelection  ();
virtual void       storeRecoveryPt ();
virtual void       tempAlterSel    ();
virtual void       cancelTempAlt   ();
virtual WitSelPt * mySelPt         ();
virtual void       printAlteration ();
//
// Overrides from class AltPt.

void printRecovery ();
//
// Prints the restoration of the Prop-Rtg configuration at this PrAltPt
// to its initial state.

noCopyCtorAssign (WitPrAltPt);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitPrSelPt * const myPrSelPt_;
//
// The PrSelPt for this PrAltPt.

WitRtCand * const myRtCand_;
//
// The RtCand for this PrAltPt.

WitPrCoord * const myPrCoord_;
//
// The PrCoord that owns this PrAltPt.

bool active_;
//
// true, iff proportionate routing is currently active for myRtCand_ in
// the period for this PrAltPt.

bool allowed_;
//
// true, iff proportionate routing is currently allowed for myRtCand_
// in the period for this PrAltPt.
// If active_ is true, then allowed_ must be true.
// When not in TBPR mode, active_ is true iff allowed_ is true.
};
@


1.21
log
@Selection Recovery
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d38 12
a49 2
   {
   public:
d51 74
a124 84
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrAltPt (WitPrSelPt *, WitRtCand *, WitPrCoord *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPrAltPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void setStatus (bool activeVal, bool allowedVal);
         //
         // Sets active_ and allowed_.

      void recoverInitState ();
         //
         // Restores the Prop-Rtg configuration at this PrAltPt to its initial
         // state.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPrSelPt *, myPrSelPt)
      accessFunc (bool,         active)
      accessFunc (bool,         allowed)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual bool       hasResAlt       ();
      virtual void       alterSelection  ();
      virtual void       storeRecoveryPt ();
      virtual void       tempAlterSel    ();
      virtual void       cancelTempAlt   ();
      virtual WitSelPt * mySelPt         ();
      virtual void       printAlteration ();
         //
         // Overrides from class AltPt.

      void printRecovery ();
         //
         // Prints the restoration of the Prop-Rtg configuration at this PrAltPt
         // to its initial state.

      noCopyCtorAssign (WitPrAltPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPrSelPt * const myPrSelPt_;
         //
         // The PrSelPt for this PrAltPt.

      WitRtCand * const myRtCand_;
         //
         // The RtCand for this PrAltPt.

      WitPrCoord * const myPrCoord_;
         //
         // The PrCoord that owns this PrAltPt.

      bool active_;
         //
         // true, iff proportionate routing is currently active for myRtCand_ in
         // the period for this PrAltPt.

      bool allowed_;
         //
         // true, iff proportionate routing is currently allowed for myRtCand_
         // in the period for this PrAltPt.
         // If active_ is true, then allowed_ must be true.
         // When not in TBPR mode, active_ is true iff allowed_ is true.
   };
@


1.20
log
@Selection Recovery
@
text
@d61 1
a61 1
      void recoverInitSel ();
d63 2
a64 2
         // Restores the prop-rtg selection configuration at this PrAltPt to its
         // original state.
d80 7
a86 7
      virtual bool       hasResAlt         ();
      virtual void       alterSelection    ();
      virtual void       recAltForRecovery ();
      virtual void       tempAlterSel      ();
      virtual void       cancelTempAlt     ();
      virtual WitSelPt * mySelPt           ();
      virtual void       printAlteration   ();
d92 2
a93 1
         // Prints the recovery of the initial selection of this PrAltPt.
@


1.19
log
@Selection Recovery
@
text
@d80 7
a86 7
      virtual bool       hasResAlt        ();
      virtual void       alterSelection   ();
      virtual void       recordAlteration ();
      virtual void       tempAlterSel     ();
      virtual void       cancelTempAlt    ();
      virtual WitSelPt * mySelPt          ();
      virtual void       printAlteration  ();
@


1.18
log
@Selection Recovery
@
text
@d61 5
d90 4
@


1.17
log
@Selection Recovery
@
text
@d75 7
a81 6
      virtual bool       hasResAlt       ();
      virtual void       alterSelection  ();
      virtual void       tempAlterSel    ();
      virtual void       cancelTempAlt   ();
      virtual WitSelPt * mySelPt         ();
      virtual void       printAlteration ();
@


1.16
log
@Selection Recovery
@
text
@a60 5
      void recoverInitState ();
         //
         // Restores this PrAltPt to its initial state.
         // (Used in selection recovery.)

a83 4
      void printRecovery ();
         //
         // Does printing for recoverInitState ().

@


1.15
log
@Selection Recovery.
@
text
@d45 1
a45 1
      WitPrAltPt (WitPrPt *, WitRtCand *, WitPrCoord *);
d70 3
a72 3
      accessFunc (WitPrPt *, myPrPt)
      accessFunc (bool,      active)
      accessFunc (bool,      allowed)
d99 1
a99 1
      WitPrPt * const myPrPt_;
d101 1
a101 1
         // The PrPt for this PrAltPt.
@


1.14
log
@Updated the copyright date on all source files.
@
text
@d61 5
d89 4
@


1.13
log
@Vector PropRtg.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.12
log
@Changed terminology from "low priority proportionate routing" to
"tie breaking proportionate routing".
@
text
@d34 1
a34 1
// Implemented in PropRt.C.
@


1.11
log
@Low-Pri Prop-Rt.
@
text
@d112 1
a112 1
         // When not in LPPR mode, active_ is true iff allowed_ is true.
@


1.10
log
@Low-Pri Prop-Rt.
@
text
@d25 1
a25 1
// A PrAltPt is an AltPt at which the Proportionate Routing configuration can be
d27 1
a27 1
// RtCand in a particular period for Proportionate Routing purposes.
@


1.9
log
@Low-Pri Prop-Rt.
@
text
@d75 6
a80 5
      virtual bool       hasResAlt      ();
      virtual void       alterSelection ();
      virtual void       tempAlterSel   ();
      virtual void       cancelTempAlt  ();
      virtual WitSelPt * mySelPt        ();
a83 5
      void printDisallowance ();
         //
         // Prints info indicating that proportionate routing is no longer
         // allowed for myRtCand_ in the period for this PrAltPt.

@


1.8
log
@Low-Pri Prop-Rt.
@
text
@d75 5
a79 6
      virtual bool       hasResAlt          ();
      virtual void       alterSelection     ();
      virtual void       tempAlterSel       ();
      virtual void       cancelTempAlt      (WitSelCand *);
      virtual bool       cancelNeedsSelCand ();
      virtual WitSelPt * mySelPt            ();
@


1.7
log
@Low-Pri Prop-Rt.
@
text
@d57 1
a57 1
      void setActStat (bool activeVal, bool lpprActVal);
d59 1
a59 1
         // Sets active_ and lpprAct_.
d67 1
a67 1
      accessFunc (bool,      lpprAct)
d84 1
a84 1
      void printPermDeact ();
d86 2
a87 2
         // Prints info indicating that proportionate routing thru myRtCand_ in
         // the period for this PrAltPt has been permanently ruled out.
d109 2
a110 2
         // myRtCand_ is considered to be active for proportionate explosions in
         // the period for this PrAltPt, iff potActive_ is true.
d112 1
a112 1
      bool lpprAct_;
d114 4
a117 2
         // myRtCand_ is considered to be active for low-pri prop-rt purposes in
         // the period for this PrAltPt, iff active_ is true.
@


1.6
log
@Low-Pri Prop-Rt.
@
text
@d54 8
a88 4
      void setActStat (bool activeVal, bool lpprActVal);
         //
         // Sets active_ and lpprAct_.

@


1.5
log
@Low-Pri Prop-Rt.
@
text
@d59 1
d81 3
a83 1
      void setActive (bool);
d105 7
a111 2
         // true, iff myRtCand_ is active for Proportionate Routing in the
         // period for this PrAltPt.
@


1.4
log
@Low-Pri Prop-Rt.
@
text
@d80 2
@


1.3
log
@Low-Pri Prop-Rt.
@
text
@d66 6
a71 4
      virtual bool       hasResAlt      ();
      virtual void       alterSelection ();
      virtual void       tempAlterSel   ();
      virtual WitSelPt * mySelPt        ();
@


1.2
log
@Low-Pri Prop-Rt.
@
text
@d45 1
a45 1
      WitPrAltPt (WitPrPt * thePrPt);
d73 5
d88 8
d98 2
a99 2
         // true, iff the RtCand for this PrAltPt is active for Proportionate
         // Rting in the period for this PrAltPt.
@


1.1
log
@Low-Pri Prop-Rt.
@
text
@d53 7
d63 1
a63 1
      // Other private member functions.
d66 1
d82 5
@

