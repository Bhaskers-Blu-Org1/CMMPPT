head	1.33;
access;
symbols
	sce_5_01_20080919:1.30
	latest_sce_4_20_20060523:1.28.0.2
	sce_4_20_20060523:1.28
	latest_sce4_20_OSL:1.27.0.2
	sce_4_20_OSL:1.27
	sce_410_withVa:1.23
	sce_4_05_20040511:1.17
	sce_4_00_20040201:1.17
	nextGenBranch:1.13.0.2
	nextGenRoot:1.13
	sce_3_30_20030627:1.13
	EndRw-branch:1.7.0.4
	Root-of-EndRw:1.7
	rwToStl:1.7.0.2
	latest_sce_3_10_20010924:1.3.0.2
	sce_3_10_20010924:1.3;
locks; strict;
comment	@ * @;


1.33
date	2011.09.28.23.50.01;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.09.24.00.28.24;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.08.30.20.18.02;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2007.07.30.22.38.02;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.05.11.15.56.46;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2006.05.02.17.34.10;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2006.03.08.23.57.12;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2006.02.21.15.44.14;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2006.02.17.17.07.18;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2006.01.11.19.52.06;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2005.03.28.20.14.37;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2005.03.24.18.42.04;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.12.23.17.24.20;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2004.12.22.23.59.47;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2004.12.22.22.48.59;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.22.19.25.56;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.12.01.21.05.05;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.09.26.15.38.57;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.25.21.19.26;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.25.20.44.44;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.03.21.07.32;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.19.21.47.32;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.07.20.20.51;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.03.21.57.27;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.15.21.01.24;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.13.22.22.12;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.11.18.53.16;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.04.21.53.36;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.04.19.14.58;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.03.22.35.22;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.01.14.55.31;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.25.16.08.19;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.18.21.44.45;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.33
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PtrSchedH
#define PtrSchedH

//------------------------------------------------------------------------------
// Header file: "PtrSched.h"
//
// Contains the declaration of class template PtrSched <DomEl, RangeEl>.
//------------------------------------------------------------------------------

#include <PtrVec.h>
#include <PtrTVec.h>
#include <CompMgr.h>

//------------------------------------------------------------------------------
// Template argument macros for class template PtrSched <DomEl, RangeEl>.
//------------------------------------------------------------------------------

#define PtrSchedArgDecs typename DomEl, typename RangeEl
#define PtrSchedArgs             DomEl,          RangeEl

//------------------------------------------------------------------------------
// Class template PtrSched <DomEl, RangeEl>
//
// A mapping from the instances of class DomEl (domain element) in a Problem to
// instances of class PtrTVec <RangeEl>.
//------------------------------------------------------------------------------

template <PtrSchedArgDecs>
      class WitPtrSched
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPtrSched ();
         //
         // Constructs an empty PtrSched (one that does not map any DomEls).

      WitPtrSched (WitProblem * theProblem);
         //
         // Constructs a PtrSched for those DomEls that are owned by theProblem.
         // Sets every element of this PtrSched to NULL.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPtrSched ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline int domainSize () const
         {
         return myPtrVec_.length ();
         }

      void allocate (WitProblem * theProblem);
         //
         // Resizes this PtrSched to cover the DomEls owned by theProblem. 
         // The value of this mapping for each DomEl will be set to NULL.

      void allocate1D (WitProblem * theProblem);
         //
         // Allocates the Vector of row Vector pointers, but not the row
         // Vectors.

      void allocate1D (int nInst);
         //
         // Same as above, but # instances is specified explicitly.

      void clear ();
         //
         // Deallocates this PtrSched.

      inline RangeEl & myElemAt (
            const DomEl * theDomEl,
            WitPeriod     thePer)
            const;
         //
         // Returns a ref to the RangeEl of this PtrSched for theDomEl and
         // thePer.

      inline RangeEl * & myPtrAt (const DomEl * theDomEl, WitPeriod thePer);
         //
         // Returns a ref to a ptr to the RangeEl of this PtrSched for theDomEl
         // and thePer.

      inline RangeEl * myPtrAt (const DomEl * theDomEl, WitPeriod thePer) const;
         //
         // Const version of the above.

      inline WitPtrTVec <RangeEl> & myPtrTVecAt (const DomEl * theDomEl);
         //
         // Returns a ref to the PtrTVec of this PtrSched for theDomEl.

      inline const WitPtrTVec <RangeEl> & myPtrTVecAt (
            const DomEl * theDomEl)
            const;
         //
         // Const version of the above.

      inline WitPtrTVec <RangeEl> & myPtrTVecAt (int theIdx)
         {
         return myPtrVec_.myElemAt (theIdx);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPtrSched);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrVec <WitPtrTVec <RangeEl> > myPtrVec_;
         //
         // Stores the RangeEl ptr for each DomEl and each period.
   };

//------------------------------------------------------------------------------
// Inline implementations.
//------------------------------------------------------------------------------

template <PtrSchedArgDecs>
      inline RangeEl & WitPtrSched <PtrSchedArgs>::myElemAt (
         const DomEl * theDomEl, 
         WitPeriod     thePer)
         const
   {
   witAssert (theDomEl != NULL);

   witAssert (myPtrVec_.myElemAt (theDomEl->mappingIndex ())[thePer] != NULL);

   return   * myPtrVec_.myElemAt (theDomEl->mappingIndex ())[thePer];
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs>
      inline RangeEl * & WitPtrSched <PtrSchedArgs>::myPtrAt (
         const DomEl * theDomEl, 
         WitPeriod     thePer)
   {
   witAssert (theDomEl != NULL);

   return myPtrVec_.myElemAt (theDomEl->mappingIndex ())[thePer];
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs>
      inline RangeEl * WitPtrSched <PtrSchedArgs>::myPtrAt (
         const DomEl * theDomEl, 
         WitPeriod     thePer)
         const
   {
   witAssert (theDomEl != NULL);

   return myPtrVec_.myElemAt (theDomEl->mappingIndex ())[thePer];
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs>
      inline WitPtrTVec <RangeEl> &
         WitPtrSched <PtrSchedArgs>::myPtrTVecAt (const DomEl * theDomEl)
   {
   witAssert (theDomEl != NULL);

   return myPtrVec_.myElemAt (theDomEl->mappingIndex ());
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs>
      inline const WitPtrTVec <RangeEl> &
         WitPtrSched <PtrSchedArgs>::myPtrTVecAt (const DomEl * theDomEl) const
   {
   witAssert (theDomEl != NULL);

   return myPtrVec_.myElemAt (theDomEl->mappingIndex ());
   }

#endif
@


1.32
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.31
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d38 102
a139 102
class WitPtrSched
{
public:

//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPtrSched ();
//
// Constructs an empty PtrSched (one that does not map any DomEls).

WitPtrSched (WitProblem * theProblem);
//
// Constructs a PtrSched for those DomEls that are owned by theProblem.
// Sets every element of this PtrSched to NULL.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitPtrSched ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

inline int domainSize () const
{
return myPtrVec_.length ();
}

void allocate (WitProblem * theProblem);
//
// Resizes this PtrSched to cover the DomEls owned by theProblem.
// The value of this mapping for each DomEl will be set to NULL.

void allocate1D (WitProblem * theProblem);
//
// Allocates the Vector of row Vector pointers, but not the row
// Vectors.

void allocate1D (int nInst);
//
// Same as above, but # instances is specified explicitly.

void clear ();
//
// Deallocates this PtrSched.

inline RangeEl & myElemAt (
const DomEl * theDomEl,
WitPeriod     thePer)
const;
//
// Returns a ref to the RangeEl of this PtrSched for theDomEl and
// thePer.

inline RangeEl * & myPtrAt (const DomEl * theDomEl, WitPeriod thePer);
//
// Returns a ref to a ptr to the RangeEl of this PtrSched for theDomEl
// and thePer.

inline RangeEl * myPtrAt (const DomEl * theDomEl, WitPeriod thePer) const;
//
// Const version of the above.

inline WitPtrTVec <RangeEl> & myPtrTVecAt (const DomEl * theDomEl);
//
// Returns a ref to the PtrTVec of this PtrSched for theDomEl.

inline const WitPtrTVec <RangeEl> & myPtrTVecAt (
const DomEl * theDomEl)
const;
//
// Const version of the above.

inline WitPtrTVec <RangeEl> & myPtrTVecAt (int theIdx)
{
return myPtrVec_.myElemAt (theIdx);
}

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitPtrSched);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitPtrVec <WitPtrTVec <RangeEl> > myPtrVec_;
//
// Stores the RangeEl ptr for each DomEl and each period.
};
d146 6
a151 6
inline RangeEl & WitPtrSched <PtrSchedArgs>::myElemAt (
const DomEl * theDomEl,
WitPeriod     thePer)
const
{
witAssert (theDomEl != NULL);
d153 1
a153 1
witAssert (myPtrVec_.myElemAt (theDomEl->mappingIndex ())[thePer] != NULL);
d155 2
a156 2
return   * myPtrVec_.myElemAt (theDomEl->mappingIndex ())[thePer];
}
d161 5
a165 5
inline RangeEl * & WitPtrSched <PtrSchedArgs>::myPtrAt (
const DomEl * theDomEl,
WitPeriod     thePer)
{
witAssert (theDomEl != NULL);
d167 2
a168 2
return myPtrVec_.myElemAt (theDomEl->mappingIndex ())[thePer];
}
d173 6
a178 6
inline RangeEl * WitPtrSched <PtrSchedArgs>::myPtrAt (
const DomEl * theDomEl,
WitPeriod     thePer)
const
{
witAssert (theDomEl != NULL);
d180 2
a181 2
return myPtrVec_.myElemAt (theDomEl->mappingIndex ())[thePer];
}
d186 4
a189 4
inline WitPtrTVec <RangeEl> &
WitPtrSched <PtrSchedArgs>::myPtrTVecAt (const DomEl * theDomEl)
{
witAssert (theDomEl != NULL);
d191 2
a192 2
return myPtrVec_.myElemAt (theDomEl->mappingIndex ());
}
d197 4
a200 4
inline const WitPtrTVec <RangeEl> &
WitPtrSched <PtrSchedArgs>::myPtrTVecAt (const DomEl * theDomEl) const
{
witAssert (theDomEl != NULL);
d202 2
a203 2
return myPtrVec_.myElemAt (theDomEl->mappingIndex ());
}
@


1.30
log
@Stochastic Implosion
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d38 102
a139 102
      class WitPtrSched
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPtrSched ();
         //
         // Constructs an empty PtrSched (one that does not map any DomEls).

      WitPtrSched (WitProblem * theProblem);
         //
         // Constructs a PtrSched for those DomEls that are owned by theProblem.
         // Sets every element of this PtrSched to NULL.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPtrSched ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline int domainSize () const
         {
         return myPtrVec_.length ();
         }

      void allocate (WitProblem * theProblem);
         //
         // Resizes this PtrSched to cover the DomEls owned by theProblem. 
         // The value of this mapping for each DomEl will be set to NULL.

      void allocate1D (WitProblem * theProblem);
         //
         // Allocates the Vector of row Vector pointers, but not the row
         // Vectors.

      void allocate1D (int nInst);
         //
         // Same as above, but # instances is specified explicitly.

      void clear ();
         //
         // Deallocates this PtrSched.

      inline RangeEl & myElemAt (
            const DomEl * theDomEl,
            WitPeriod     thePer)
            const;
         //
         // Returns a ref to the RangeEl of this PtrSched for theDomEl and
         // thePer.

      inline RangeEl * & myPtrAt (const DomEl * theDomEl, WitPeriod thePer);
         //
         // Returns a ref to a ptr to the RangeEl of this PtrSched for theDomEl
         // and thePer.

      inline RangeEl * myPtrAt (const DomEl * theDomEl, WitPeriod thePer) const;
         //
         // Const version of the above.

      inline WitPtrTVec <RangeEl> & myPtrTVecAt (const DomEl * theDomEl);
         //
         // Returns a ref to the PtrTVec of this PtrSched for theDomEl.

      inline const WitPtrTVec <RangeEl> & myPtrTVecAt (
            const DomEl * theDomEl)
            const;
         //
         // Const version of the above.

      inline WitPtrTVec <RangeEl> & myPtrTVecAt (int theIdx)
         {
         return myPtrVec_.myElemAt (theIdx);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPtrSched);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrVec <WitPtrTVec <RangeEl> > myPtrVec_;
         //
         // Stores the RangeEl ptr for each DomEl and each period.
   };
d146 6
a151 6
      inline RangeEl & WitPtrSched <PtrSchedArgs>::myElemAt (
         const DomEl * theDomEl, 
         WitPeriod     thePer)
         const
   {
   witAssert (theDomEl != NULL);
d153 1
a153 1
   witAssert (myPtrVec_.myElemAt (theDomEl->mappingIndex ())[thePer] != NULL);
d155 2
a156 2
   return   * myPtrVec_.myElemAt (theDomEl->mappingIndex ())[thePer];
   }
d161 5
a165 5
      inline RangeEl * & WitPtrSched <PtrSchedArgs>::myPtrAt (
         const DomEl * theDomEl, 
         WitPeriod     thePer)
   {
   witAssert (theDomEl != NULL);
d167 2
a168 2
   return myPtrVec_.myElemAt (theDomEl->mappingIndex ())[thePer];
   }
d173 6
a178 6
      inline RangeEl * WitPtrSched <PtrSchedArgs>::myPtrAt (
         const DomEl * theDomEl, 
         WitPeriod     thePer)
         const
   {
   witAssert (theDomEl != NULL);
d180 2
a181 2
   return myPtrVec_.myElemAt (theDomEl->mappingIndex ())[thePer];
   }
d186 4
a189 4
      inline WitPtrTVec <RangeEl> &
         WitPtrSched <PtrSchedArgs>::myPtrTVecAt (const DomEl * theDomEl)
   {
   witAssert (theDomEl != NULL);
d191 2
a192 2
   return myPtrVec_.myElemAt (theDomEl->mappingIndex ());
   }
d197 4
a200 4
      inline const WitPtrTVec <RangeEl> &
         WitPtrSched <PtrSchedArgs>::myPtrTVecAt (const DomEl * theDomEl) const
   {
   witAssert (theDomEl != NULL);
d202 2
a203 2
   return myPtrVec_.myElemAt (theDomEl->mappingIndex ());
   }
@


1.29
log
@Stochastic Implosion
@
text
@d119 5
@


1.28
log
@Updated the copyright date on all source files.
@
text
@d148 1
a148 1
   witAssert (myPtrVec_ (theDomEl->mappingIndex ())[thePer] != NULL);
d150 1
a150 1
   return   * myPtrVec_ (theDomEl->mappingIndex ())[thePer];
d162 1
a162 1
   return myPtrVec_ (theDomEl->mappingIndex ())[thePer];
d175 1
a175 1
   return myPtrVec_ (theDomEl->mappingIndex ())[thePer];
d186 1
a186 1
   return myPtrVec_ (theDomEl->mappingIndex ());
d197 1
a197 1
   return myPtrVec_ (theDomEl->mappingIndex ());
@


1.27
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.26
log
@[shared-resource pegging]
@
text
@d148 3
a150 1
   return * myPtrVec_ (theDomEl->mappingIndex ())[thePer];
@


1.25
log
@[shared-resource pegging]
@
text
@d69 1
a69 1
      inline WitSiz domainSize () const
@


1.24
log
@[shared-resource pegging]
@
text
@d69 1
a69 1
      inline size_t domainSize () const
@


1.23
log
@Revised mappingIndex code.
@
text
@d92 4
a95 1
      inline RangeEl & myElemAt (const DomEl * theDomEl, WitPeriod thePer);
d144 1
@


1.22
log
@Revised mappingIndex code.
@
text
@a21 1
#include <MapIdx.h>
@


1.21
log
@Low-Pri Prop-Rt.
@
text
@d145 1
a145 1
   return * myPtrVec_ (mappingIndex (theDomEl))[thePer];
d157 1
a157 1
   return myPtrVec_ (mappingIndex (theDomEl))[thePer];
d170 1
a170 1
   return myPtrVec_ (mappingIndex (theDomEl))[thePer];
d181 1
a181 1
   return myPtrVec_ (mappingIndex (theDomEl));
d192 1
a192 1
   return myPtrVec_ (mappingIndex (theDomEl));
@


1.20
log
@An attempt to fix warnings from the gcc 3.3.3 compiler.
@
text
@a194 38
#if 0

//------------------------------------------------------------------------------
// Some inline implementations prior to modification to accomodate the
// gcc 3.3.3 compiler.
//------------------------------------------------------------------------------

template <PtrSchedArgDecs>
      inline RangeEl & WitPtrSched <PtrSchedArgs>::myElemAt (
         const DomEl * theDomEl, 
         WitPeriod     thePer)
   {
   return * myPtrTVecAt (theDomEl)[thePer];
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs>
      inline RangeEl * & WitPtrSched <PtrSchedArgs>::myPtrAt (
         const DomEl * theDomEl, 
         WitPeriod     thePer)
   {
   return myPtrTVecAt (theDomEl)[thePer];
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs>
      inline RangeEl * WitPtrSched <PtrSchedArgs>::myPtrAt (
         const DomEl * theDomEl, 
         WitPeriod     thePer)
         const
   {
   return myPtrTVecAt (theDomEl)[thePer];
   }

#endif

@


1.19
log
@An attempt to fix some warnings from the gcc 3.3.3 compiler.
@
text
@d143 3
a145 1
   return * myPtrTVecAt (theDomEl)[thePer];
d155 3
a157 1
   return myPtrTVecAt (theDomEl)[thePer];
d168 3
a170 1
   return myPtrTVecAt (theDomEl)[thePer];
d195 38
@


1.18
log
@An attempt to fix warnings from the gcc 3.3.3 compiler.
@
text
@d139 3
a141 2
      inline WitPtrTVec <RangeEl> &
         WitPtrSched <PtrSchedArgs>::myPtrTVecAt (const DomEl * theDomEl)
d143 1
a143 3
   witAssert (theDomEl != NULL);

   return myPtrVec_ (mappingIndex (theDomEl));
d149 3
a151 2
      inline const WitPtrTVec <RangeEl> &
         WitPtrSched <PtrSchedArgs>::myPtrTVecAt (const DomEl * theDomEl) const
d153 1
a153 3
   witAssert (theDomEl != NULL);

   return myPtrVec_ (mappingIndex (theDomEl));
d159 1
a159 1
      inline RangeEl * & WitPtrSched <PtrSchedArgs>::myPtrAt (
d162 1
d170 2
a171 4
      inline RangeEl * WitPtrSched <PtrSchedArgs>::myPtrAt (
         const DomEl * theDomEl, 
         WitPeriod     thePer)
         const
d173 3
a175 1
   return myPtrTVecAt (theDomEl)[thePer];
d181 2
a182 3
      inline RangeEl & WitPtrSched <PtrSchedArgs>::myElemAt (
         const DomEl * theDomEl, 
         WitPeriod     thePer)
d184 3
a186 1
   return * myPtrAt (theDomEl, thePer);
@


1.17
log
@Continued implementation of PIP.
@
text
@d139 13
a151 3
      inline RangeEl & WitPtrSched <PtrSchedArgs>::myElemAt (
         const DomEl * theDomEl, 
         WitPeriod     thePer)
d153 3
a155 1
   return * myPtrAt (theDomEl, thePer);
d182 3
a184 2
      inline WitPtrTVec <RangeEl> &
         WitPtrSched <PtrSchedArgs>::myPtrTVecAt (const DomEl * theDomEl)
d186 1
a186 14
   witAssert (theDomEl != NULL);

   return myPtrVec_ (mappingIndex (theDomEl));
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs>
      inline const WitPtrTVec <RangeEl> &
         WitPtrSched <PtrSchedArgs>::myPtrTVecAt (const DomEl * theDomEl) const
   {
   witAssert (theDomEl != NULL);

   return myPtrVec_ (mappingIndex (theDomEl));
@


1.16
log
@Continued implementation of post-implosion pegging.
@
text
@d39 1
a39 1
      class WitPtrSched: public WitUtil
@


1.15
log
@Continued implementation of post-implosion pegging.
@
text
@d22 1
d107 1
a107 1
      WitPtrTVec <RangeEl> & myPtrTVecAt (const DomEl * theDomEl);
d111 3
a113 1
      const WitPtrTVec <RangeEl> & myPtrTVecAt (const DomEl * theDomEl) const;
d165 22
@


1.14
log
@Continued implementation of post-implosion pegging.
@
text
@d106 1
a106 1
      inline WitPtrTVec <RangeEl> & myPtrTVecAt (const DomEl * theDomEl);
d110 1
a110 3
      inline const WitPtrTVec <RangeEl> & myPtrTVecAt (
            const DomEl * theDomEl)
            const;
d130 33
@


1.13
log
@Continued implementation of proportionate routing.
@
text
@a34 2
//
// Implemented in PtrSchedI.h.
@


1.12
log
@Continued implementation of proportionate routing.
@
text
@d104 4
d111 6
@


1.11
log
@Continued implementation of proportionate routing.
@
text
@d86 4
@


1.10
log
@Continued implementation of proportionate routing.
@
text
@d90 1
a90 4
      inline RangeEl & myElemAt (
            const DomEl * theDomEl,
            WitPeriod     thePer) 
            const;
a99 5
      inline RangeEl * myPtrAt (const DomEl * theDomEl, WitPeriod thePer) const;
         //
         // Returns a ptr to the RangeEl of this PtrSched for theDomEl and
         // thePer.

a100 6
         //
         // Returns a ref to the PtrTVec of this PtrSched for theDomEl.

      inline const WitPtrTVec <RangeEl> & myPtrTVecAt (
            const DomEl * theDomEl)
            const;
@


1.9
log
@Various internal changes.
@
text
@d90 4
a93 1
      inline RangeEl & myElemAt (const DomEl * theDomEl, WitPeriod thePer);
d103 5
d109 6
@


1.8
log
@Various internal changes.
@
text
@d110 1
a110 1
      noCopyCtorAssignTemp (WitPtrSched, PtrSchedArgs);
@


1.7
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d27 2
a28 2
#define PtrSchedArgDecs  class DomEl, class RangeEl
#define PtrSchedArgs           DomEl,       RangeEl
@


1.6
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d36 1
a36 1
// All implementation is inline.
@


1.5
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d52 1
a52 1
      inline WitPtrSched ();
d56 1
a56 1
      inline WitPtrSched (WitProblem * theProblem);
d65 1
a65 1
      inline ~WitPtrSched ();
d76 1
a76 1
      inline void allocate (WitProblem * theProblem);
d81 1
a81 1
      inline void allocate1D (WitProblem * theProblem);
@


1.4
log
@Continued implementation of single-source.
@
text
@d71 5
d90 1
a90 1
      inline RangeEl & myElemAt (DomEl * theDomEl, WitPeriod thePer);
d95 1
a95 1
      inline RangeEl * & myPtrAt (DomEl * theDomEl, WitPeriod thePer);
d100 1
a100 1
      inline WitPtrTVec <RangeEl> & myPtrTVecAt (DomEl * theDomEl);
a119 108

//------------------------------------------------------------------------------
// Implementation of class template PtrSched <DomEl>.
//------------------------------------------------------------------------------

template <PtrSchedArgDecs> 
      inline WitPtrSched <PtrSchedArgs>::WitPtrSched ():
         myPtrVec_ ()
   {
   ifDebug (DomEl * theDomEl);

   ifDebug (DomEl::verifyMappingIndex (theDomEl));
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs> 
      inline WitPtrSched <PtrSchedArgs>::WitPtrSched (WitProblem * theProblem):

         myPtrVec_ ()
   {
   allocate (theProblem);
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs> 
      inline WitPtrSched <PtrSchedArgs>::~WitPtrSched ()
   {
   clear ();
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs> 
      inline void WitPtrSched <PtrSchedArgs>::allocate (WitProblem * theProblem)
   {
   int nInst;
   int theIdx;

   allocate1D (theProblem);

   for (theIdx = 0; theIdx < myPtrVec_.length (); theIdx ++)
      myPtrVec_ (theIdx).allocate (theProblem);
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs> 
      inline void WitPtrSched <PtrSchedArgs>::allocate1D (WitProblem *
         theProblem)
   {
   int nInst;
   int theIdx;

   clear ();

   nInst = theProblem->myCompMgr ()->nInstances ((DomEl *) NULL);

   myPtrVec_.resize (nInst);

   for (theIdx = 0; theIdx < nInst; theIdx ++)
      myPtrVec_[theIdx] = new WitPtrTVec <RangeEl>;
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs> 
      void WitPtrSched <PtrSchedArgs>::clear ()
   {
   int theIdx;

   for (theIdx = 0; theIdx < myPtrVec_.length (); theIdx ++)
      delete myPtrVec_[theIdx];

   myPtrVec_.clear ();
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs>
      inline RangeEl & WitPtrSched <PtrSchedArgs>::myElemAt (
         DomEl *   theDomEl, 
         WitPeriod thePer)
   {
   return * myPtrAt (theDomEl, thePer);
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs>
      inline RangeEl * & WitPtrSched <PtrSchedArgs>::myPtrAt (
         DomEl *   theDomEl, 
         WitPeriod thePer)
   {
   return myPtrTVecAt (theDomEl)[thePer];
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs>
      inline WitPtrTVec <RangeEl> & WitPtrSched <PtrSchedArgs>::myPtrTVecAt (
         DomEl * theDomEl)
   {
   witAssert (theDomEl != NULL);

   return myPtrVec_ (theDomEl->mappingIndex ());
   }
@


1.3
log
@Continued implementation of pegging.
@
text
@d85 1
a85 1
      inline RangeEl & myElemAt (const DomEl * theDomEl, WitPeriod thePer);
d90 1
a90 1
      inline RangeEl * & myPtrAt (const DomEl * theDomEl, WitPeriod thePer);
d95 1
a95 1
      inline WitPtrTVec <RangeEl> & myPtrTVecAt (const DomEl * theDomEl);
d197 2
a198 2
         const DomEl * theDomEl, 
         WitPeriod     thePer)
d207 2
a208 2
         const DomEl * theDomEl, 
         WitPeriod     thePer)
d217 1
a217 1
         const DomEl * theDomEl)
@


1.2
log
@Initial implementation of pegging.
@
text
@d81 4
a104 4
      void clear ();
         //
         // Deallocates this PtrSched.

d182 13
a221 13
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs> 
      void WitPtrSched <PtrSchedArgs>::clear ()
   {
   int theIdx;

   for (theIdx = 0; theIdx < myPtrVec_.length (); theIdx ++)
      delete myPtrVec_[theIdx];

   myPtrVec_.clear ();
@


1.1
log
@Implemented class template PtrSched <*, *>.
@
text
@d21 1
d34 1
a34 1
// pointers to instances of class RangeEl (range element).
d81 1
a81 1
      inline RangeEl & elemAt (const DomEl * theDomEl, WitPeriod thePer);
d86 1
a86 1
      inline RangeEl * & ptrAt (const DomEl * theDomEl, WitPeriod thePer);
d91 1
a91 1
      inline WitPtrTVec <RangeEl> & vecAt (const DomEl * theDomEl);
d183 1
a183 1
      inline RangeEl & WitPtrSched <PtrSchedArgs>::elemAt (
d187 1
a187 1
   return * ptrAt (theDomEl, thePer);
d193 1
a193 1
      inline RangeEl * & WitPtrSched <PtrSchedArgs>::ptrAt (
d197 1
a197 1
   return vecAt (theDomEl)[thePer];
d203 1
a203 1
      inline WitPtrTVec <RangeEl> & WitPtrSched <PtrSchedArgs>::vecAt (
@

