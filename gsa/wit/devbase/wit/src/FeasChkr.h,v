head	1.10;
access;
symbols
	sce_5_01_20080919:1.7;
locks; strict;
comment	@ * @;


1.10
date	2011.09.28.23.49.21;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.09.24.00.27.40;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.08.30.20.17.30;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.12.06.22.53.02;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.09.19.10.58;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.03.05.21.01.52;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.03.02.20.56.21;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.02.27.21.03.03;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.22.22.54.29;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.22.21.45.06;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef FeasChkrH
#define FeasChkrH

//------------------------------------------------------------------------------
// Header file: "FeasChkr.h"
//
// Contains the declaration of the following class:
//
//    FeasChkr
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class FeasChkr
//
// "Feasibility Checker"
// Responsible for verifying the feasiblity of an implosion solution.
//
// Class Hierarchy:
//
// ProbAssoc
//    FeasChkr
//------------------------------------------------------------------------------

class WitFeasChkr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitFeasChkr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitFeasChkr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void compFeasible ();
         //
         // Computes maxViolation_, feasible_.

      void unpostprocess ();
         //
         // Takes action appropriate to undoing postprocessing.

      void verifyUhsFeas ();
         //
         // Verifies the feasibility of the current solution, assuming that it
         // is the user-specified heuristic starting solution.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (double, maxViolation)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitFeasChkr);

      void checkFeasReq ();
         //
         // Records as maxViolation: max violation of all "required"
         // contraints, i.e., those that apply regardless of the Variant.

      void checkScrapVolNonneg   ();
      void checkStockVolNonneg   ();
      void checkExecVolNonneg    ();
      void checkSubVolNonneg     ();
      void checkShipVolNonneg    ();
      void checkCumShipVolNonneg ();
         // 
         // Records violations of nonnegativity for each solution attribute.

      void checkStockVols ();
         //
         // Records violations of stockVol == 0, when stock is not allowed.

      void checkExecVols ();
         //
         // Records violations of execVol == 0, when the operation is not
         // executable.

      void checkNonSubVols ();
         //
         // Records violations of nonSubVol >= 0.

      void checkShipVols ();
         //
         // Records violations of shipVol <= demandVol.

      void checkCumShipVols ();
         //
         // Records violations of cumShipVol <= cumDemandVol.

      void checkFeasAllBounds ();
         //
         // Records max bound violation for all bounds.

      void checkFeasLimitedBounds ();
         //
         // Records:
         //    max bound violation for the "limited" subset of bounds
         //    (those respected by heuristic implosion).

      void checkFeasHardLB (WitBoundSet * theBoundSet);
         //
         // Records hard LB violation for theBoundset.

      void checkFeasHardUB (WitBoundSet * theBoundSet);
         //
         // Records hard UB violation for theBoundset.

      void checkFeasLotSizes ();
         //
         // Records max lot size violation.

      void checkDisScrap ();
         //
         // Records max disallowed scrap violation.

      void checkIntegrality ();
         //
         // Records max integrality violation.

      void checkExecVolInt ();
         //
         // Records max execVol integrality violation.

      void checkSubVolInt ();
         //
         // Records max subVol integrality violation.

      void checkShipVolInt ();
         //
         // Records max shipVol integrality violation.

      void recordViolation (double theViolation, bool & reportNeeded);
         //
         // maxViolation_ = max (maxViolation_, theViolation)
         // On return, reportNeeded is true, iff an increase to maxViolation_ is
         // to be reported.

      void verifyUhsNonExecCon ();
      void verifyUhsSubCon ();
      void verifyUhsCumDemandCon ();
      void verifyUhsExecHUBCon ();
      void verifyUhsLotSizeCon ();
         //
         // Each of these function tests the current solution for satisfaction
         // of a specific class of constraints, assuming that the current
         // solution is the user-specified heuristic starting solution.
         // If a violation is found, a warning is issued.
         // Exception: In verifyUhsNonExecCon, if a violation is found, a severe
         // error is issued.

      double lotSizeViol (WitOperation * theOpn, WitPeriod execPer);
         //
         // Computes and returns the amount by which theOpn->execVol ()[execPer]
         // violates the lot-size constraint.

      double integralityViol (double theValue);
         //
         // Returns the distance from theValue to the nearest integer.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      double maxViolation_;
         //
         // The maximum constraint violation in the solution.
   };

#endif
@


1.9
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.8
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d36 2
a37 110
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitFeasChkr (WitProblem *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitFeasChkr ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void compFeasible ();
//
// Computes maxViolation_, feasible_.

void unpostprocess ();
//
// Takes action appropriate to undoing postprocessing.

void verifyUhsFeas ();
//
// Verifies the feasibility of the current solution, assuming that it
// is the user-specified heuristic starting solution.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (double, maxViolation)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitFeasChkr);

void checkFeasReq ();
//
// Records as maxViolation: max violation of all "required"
// contraints, i.e., those that apply regardless of the Variant.

void checkScrapVolNonneg   ();
void checkStockVolNonneg   ();
void checkExecVolNonneg    ();
void checkSubVolNonneg     ();
void checkShipVolNonneg    ();
void checkCumShipVolNonneg ();
//
// Records violations of nonnegativity for each solution attribute.

void checkStockVols ();
//
// Records violations of stockVol == 0, when stock is not allowed.

void checkExecVols ();
//
// Records violations of execVol == 0, when the operation is not
// executable.

void checkNonSubVols ();
//
// Records violations of nonSubVol >= 0.

void checkShipVols ();
//
// Records violations of shipVol <= demandVol.

void checkCumShipVols ();
//
// Records violations of cumShipVol <= cumDemandVol.

void checkFeasAllBounds ();
//
// Records max bound violation for all bounds.

void checkFeasLimitedBounds ();
//
// Records:
//    max bound violation for the "limited" subset of bounds
//    (those respected by heuristic implosion).

void checkFeasHardLB (WitBoundSet * theBoundSet);
//
// Records hard LB violation for theBoundset.

void checkFeasHardUB (WitBoundSet * theBoundSet);
//
// Records hard UB violation for theBoundset.

void checkFeasLotSizes ();
//
// Records max lot size violation.

void checkDisScrap ();
//
// Records max disallowed scrap violation.

void checkIntegrality ();
//
// Records max integrality violation.
d39 156
a194 48
void checkExecVolInt ();
//
// Records max execVol integrality violation.

void checkSubVolInt ();
//
// Records max subVol integrality violation.

void checkShipVolInt ();
//
// Records max shipVol integrality violation.

void recordViolation (double theViolation, bool & reportNeeded);
//
// maxViolation_ = max (maxViolation_, theViolation)
// On return, reportNeeded is true, iff an increase to maxViolation_ is
// to be reported.

void verifyUhsNonExecCon ();
void verifyUhsSubCon ();
void verifyUhsCumDemandCon ();
void verifyUhsExecHUBCon ();
void verifyUhsLotSizeCon ();
//
// Each of these function tests the current solution for satisfaction
// of a specific class of constraints, assuming that the current
// solution is the user-specified heuristic starting solution.
// If a violation is found, a warning is issued.
// Exception: In verifyUhsNonExecCon, if a violation is found, a severe
// error is issued.

double lotSizeViol (WitOperation * theOpn, WitPeriod execPer);
//
// Computes and returns the amount by which theOpn->execVol ()[execPer]
// violates the lot-size constraint.

double integralityViol (double theValue);
//
// Returns the distance from theValue to the nearest integer.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

double maxViolation_;
//
// The maximum constraint violation in the solution.
};
@


1.7
log
@Stochastic Implosion
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d36 110
a145 2
   {
   public:
d147 48
a194 156
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitFeasChkr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitFeasChkr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void compFeasible ();
         //
         // Computes maxViolation_, feasible_.

      void unpostprocess ();
         //
         // Takes action appropriate to undoing postprocessing.

      void verifyUhsFeas ();
         //
         // Verifies the feasibility of the current solution, assuming that it
         // is the user-specified heuristic starting solution.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (double, maxViolation)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitFeasChkr);

      void checkFeasReq ();
         //
         // Records as maxViolation: max violation of all "required"
         // contraints, i.e., those that apply regardless of the Variant.

      void checkScrapVolNonneg   ();
      void checkStockVolNonneg   ();
      void checkExecVolNonneg    ();
      void checkSubVolNonneg     ();
      void checkShipVolNonneg    ();
      void checkCumShipVolNonneg ();
         // 
         // Records violations of nonnegativity for each solution attribute.

      void checkStockVols ();
         //
         // Records violations of stockVol == 0, when stock is not allowed.

      void checkExecVols ();
         //
         // Records violations of execVol == 0, when the operation is not
         // executable.

      void checkNonSubVols ();
         //
         // Records violations of nonSubVol >= 0.

      void checkShipVols ();
         //
         // Records violations of shipVol <= demandVol.

      void checkCumShipVols ();
         //
         // Records violations of cumShipVol <= cumDemandVol.

      void checkFeasAllBounds ();
         //
         // Records max bound violation for all bounds.

      void checkFeasLimitedBounds ();
         //
         // Records:
         //    max bound violation for the "limited" subset of bounds
         //    (those respected by heuristic implosion).

      void checkFeasHardLB (WitBoundSet * theBoundSet);
         //
         // Records hard LB violation for theBoundset.

      void checkFeasHardUB (WitBoundSet * theBoundSet);
         //
         // Records hard UB violation for theBoundset.

      void checkFeasLotSizes ();
         //
         // Records max lot size violation.

      void checkDisScrap ();
         //
         // Records max disallowed scrap violation.

      void checkIntegrality ();
         //
         // Records max integrality violation.

      void checkExecVolInt ();
         //
         // Records max execVol integrality violation.

      void checkSubVolInt ();
         //
         // Records max subVol integrality violation.

      void checkShipVolInt ();
         //
         // Records max shipVol integrality violation.

      void recordViolation (double theViolation, bool & reportNeeded);
         //
         // maxViolation_ = max (maxViolation_, theViolation)
         // On return, reportNeeded is true, iff an increase to maxViolation_ is
         // to be reported.

      void verifyUhsNonExecCon ();
      void verifyUhsSubCon ();
      void verifyUhsCumDemandCon ();
      void verifyUhsExecHUBCon ();
      void verifyUhsLotSizeCon ();
         //
         // Each of these function tests the current solution for satisfaction
         // of a specific class of constraints, assuming that the current
         // solution is the user-specified heuristic starting solution.
         // If a violation is found, a warning is issued.
         // Exception: In verifyUhsNonExecCon, if a violation is found, a severe
         // error is issued.

      double lotSizeViol (WitOperation * theOpn, WitPeriod execPer);
         //
         // Computes and returns the amount by which theOpn->execVol ()[execPer]
         // violates the lot-size constraint.

      double integralityViol (double theValue);
         //
         // Returns the distance from theValue to the nearest integer.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      double maxViolation_;
         //
         // The maximum constraint violation in the solution.
   };
@


1.6
log
@[disallowed scrap]
@
text
@d127 1
a127 1
      void checkFeasHardLB (const WitBoundSet * theBoundSet);
d131 1
a131 1
      void checkFeasHardUB (const WitBoundSet * theBoundSet);
@


1.5
log
@[disallowed backlog]
@
text
@d139 4
@


1.4
log
@[disallowed backlog]
@
text
@d109 4
a116 4
      void checkShipVols ();
         //
         // Records violations of shipVol <= demandVol.

@


1.3
log
@[disallowed backlog]
@
text
@d113 4
@


1.2
log
@External opt implosion.
@
text
@a68 8
      // Function for receiving data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      //------------------------------------------------------------------------

      static void receiveDMPs (bool WitGlobalComp::* feasibleArg);
                                                 
      //------------------------------------------------------------------------
a182 13
      //------------------------------------------------------------------------
      // Data member pointer.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      // theGlobalComp->*feasible_ == theGlobalComp->feasible_.
      //------------------------------------------------------------------------

      static bool WitGlobalComp::* feasible_;

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

@


1.1
log
@external opt implosion.
@
text
@d147 12
d183 1
a183 1
      double integralityViolation (double theValue);
@

