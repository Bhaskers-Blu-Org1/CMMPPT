head	1.34;
access;
symbols
	sce_5_01_20080919:1.31
	latest_sce_4_20_20060523:1.20.0.2
	sce_4_20_20060523:1.20
	latest_sce4_20_OSL:1.19.0.2
	sce_4_20_OSL:1.19
	sce_410_withVa:1.18
	sce_4_05_20040511:1.18
	sce_4_00_20040201:1.14
	nextGenBranch:1.14.0.2
	nextGenRoot:1.14
	sce_3_30_20030627:1.13
	EndRw-branch:1.12.0.4
	Root-of-EndRw:1.12
	rwToStl:1.12.0.2
	latest_sce_3_10_20010924:1.4.0.6
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.4.0.4
	sce_3_00_20010601:1.4
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.34
date	2011.09.28.23.49.47;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.09.24.00.28.08;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.08.30.20.17.49;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2007.11.13.23.02.17;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2007.06.08.18.26.09;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.05.24.18.52.22;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2007.05.22.20.58.38;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2007.05.14.19.05.39;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.05.11.20.43.56;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.02.28.20.04.58;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.02.27.19.59.32;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.02.10.00.08.14;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.02.08.22.47.35;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.02.08.00.14.25;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2006.05.02.17.34.06;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2005.09.30.21.57.56;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2004.03.24.22.21.32;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2004.03.23.19.14.24;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2004.03.05.22.19.58;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2004.03.03.19.07.27;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.07.10.22.58.16;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.02.22.18.40;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.04.23.07.22;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.03.22.35.20;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.03.16.01.50;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.29.21.35.46;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.29.14.32.41;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.28.19.44.57;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.08.19.21.54;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.07.20.15.01;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.45;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.25.19.17.45;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.33;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.27;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.27;	author wit;	state Exp;
branches;
next	;


desc
@@


1.34
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef OrigMrpH
#define OrigMrpH

//------------------------------------------------------------------------------
// Header file: "OrigMrp.h"
//
// Contains the declaration of class OrigMrp.
//------------------------------------------------------------------------------

#include <MrpExp.h>

//------------------------------------------------------------------------------
// class OrigMrpExp.
//
// Responsible for performing MRP explosion on the original Problem.
//------------------------------------------------------------------------------

class WitOrigMrpExp: public WitMrpExp
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOrigMrpExp (WitProblem * theProblem);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitOrigMrpExp ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, exploding)
      accessFunc (bool, uploadingSoln)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitOrigMrpExp);

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual void initDerived ();

      virtual double   supplyVol (WitPart      *, WitPeriod);
      virtual double   demandVol (WitPart      *, WitPeriod);
      virtual double & execVol   (WitOperation *, WitPeriod);
      virtual double & subVol    (WitSubEntry  *, WitPeriod);

      virtual void finishDerived ();

      void uploadSoln ();
         //
         // Uploads the MRP solution.

      void compMrpConsVols ();
         //
         // Computes mrpConsVol for each Part.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      bool exploding_;
         //
         // true, iff this OrigMrpExp is currently performing Mrp explosion.

      bool uploadingSoln_;
         //
         // True, iff the MRP subsystem is currently uploading the MRP solution.

      //------------------------------------------------------------------------
      // MRP solution Schedules.
      //------------------------------------------------------------------------

      WitSchedule <WitOperation, double> mrpExecVol_;
      WitSchedule <WitSubEntry,  double> mrpSubVol_;
   };

#endif
@


1.33
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.32
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d28 6
a33 2
{
public:
d35 1
a35 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d37 3
a39 1
WitOrigMrpExp (WitProblem * theProblem);
d41 1
a41 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d43 3
a45 1
virtual ~WitOrigMrpExp ();
d47 2
a48 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d50 1
a50 2
accessFunc (bool, exploding)
accessFunc (bool, uploadingSoln)
d52 3
a54 1
private:
d56 1
a56 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d58 3
a60 1
noCopyCtorAssign (WitOrigMrpExp);
d62 1
a62 3
//------------------------------------------------------------------------
// Other private member functions.
//------------------------------------------------------------------------
d64 4
a67 1
virtual void initDerived ();
d69 1
a69 4
virtual double   supplyVol (WitPart      *, WitPeriod);
virtual double   demandVol (WitPart      *, WitPeriod);
virtual double & execVol   (WitOperation *, WitPeriod);
virtual double & subVol    (WitSubEntry  *, WitPeriod);
d71 3
a73 1
virtual void finishDerived ();
d75 3
a77 3
void uploadSoln ();
//
// Uploads the MRP solution.
d79 3
a81 3
void compMrpConsVols ();
//
// Computes mrpConsVol for each Part.
d83 3
a85 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d87 3
a89 3
bool exploding_;
//
// true, iff this OrigMrpExp is currently performing Mrp explosion.
d91 3
a93 3
bool uploadingSoln_;
//
// True, iff the MRP subsystem is currently uploading the MRP solution.
d95 3
a97 7
//------------------------------------------------------------------------
// MRP solution Schedules.
//------------------------------------------------------------------------

WitSchedule <WitOperation, double> mrpExecVol_;
WitSchedule <WitSubEntry,  double> mrpSubVol_;
};
@


1.31
log
@Stochastic Implosion
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d28 2
a29 2
   {
   public:
d31 3
a33 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d35 1
a35 1
      WitOrigMrpExp (WitProblem * theProblem);
d37 3
a39 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d41 1
a41 1
      virtual ~WitOrigMrpExp ();
d43 3
a45 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d47 2
a48 2
      accessFunc (bool, exploding)
      accessFunc (bool, uploadingSoln)
d50 1
a50 1
   private:
d52 3
a54 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d56 1
a56 1
      noCopyCtorAssign (WitOrigMrpExp);
d58 3
a60 3
      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------
d62 1
a62 1
      virtual void initDerived ();
d64 4
a67 4
      virtual double   supplyVol (WitPart      *, WitPeriod);
      virtual double   demandVol (WitPart      *, WitPeriod);
      virtual double & execVol   (WitOperation *, WitPeriod);
      virtual double & subVol    (WitSubEntry  *, WitPeriod);
d69 1
a69 1
      virtual void finishDerived ();
d71 3
a73 3
      void uploadSoln ();
         //
         // Uploads the MRP solution.
d75 3
a77 3
      void compMrpConsVols ();
         //
         // Computes mrpConsVol for each Part.
d79 3
a81 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d83 3
a85 3
      bool exploding_;
         //
         // true, iff this OrigMrpExp is currently performing Mrp explosion.
d87 3
a89 7
      bool uploadingSoln_;
         //
         // True, iff the MRP subsystem is currently uploading the MRP solution.

      //------------------------------------------------------------------------
      // MRP solution Schedules.
      //------------------------------------------------------------------------
d91 7
a97 3
      WitSchedule <WitOperation, double> mrpExecVol_;
      WitSchedule <WitSubEntry,  double> mrpSubVol_;
   };
@


1.30
log
@Stochastic Implosion
@
text
@a19 1
#include <RefMap.h>
d48 1
a48 13

      //------------------------------------------------------------------------
      // Reference receiving functions.
      // Each of these functions stores its arguments on the assumption that
      // they are references to the similarly named data members of the
      // Component for which passMrpRefs () is currently being called.
      //------------------------------------------------------------------------

      void receivePartRefs      (WitDblFlexVec &         reqVolRef,
                                 WitDblFlexVec &     mrpConsVolRef,
                                 WitDblFlexVec & mrpResidualVolRef);
      void receiveOperationRefs (WitDblFlexVec &     mrpExecVolRef);
      void receiveSubEntryRefs  (WitDblFlexVec &      mrpSubVolRef);
d71 4
a78 2
      accessNonNull (WitComponent *, passRefsComp)

d87 1
a87 1
      WitComponent * passRefsComp_;
d89 1
a89 2
         // The Component for which passMrpRefs is currently being called, if
         // any; otherwise NULL.
d92 1
a92 1
      // References to Component data.
d95 2
a96 5
      WitRefMap <WitPart,      WitDblFlexVec> reqVol_;
      WitRefMap <WitPart,      WitDblFlexVec> mrpConsVol_;
      WitRefMap <WitPart,      WitDblFlexVec> mrpResidualVol_;
      WitRefMap <WitOperation, WitDblFlexVec> mrpExecVol_;
      WitRefMap <WitSubEntry,  WitDblFlexVec> mrpSubVol_;
@


1.29
log
@Stochastic Implosion
@
text
@d57 5
a61 5
      void receivePartRefs      (WitDblFlexVec &         reqVolArg,
                                 WitDblFlexVec &     mrpConsVolArg,
                                 WitDblFlexVec & mrpResidualVolArg);
      void receiveOperationRefs (WitDblFlexVec &     mrpExecVolArg);
      void receiveSubEntryRefs  (WitDblFlexVec &      mrpSubVolArg);
@


1.28
log
@Stochastic Implosion
@
text
@d51 4
a54 4
      // Data receiving functions.
      // Each of these functions stores its reference arguments on the
      // assumption that they are references to the similarly named data members
      // of passDataComp_;
d57 5
a61 7
      void receivePartData (
            WitDblFlexVec & reqVolArg,
            WitDblFlexVec & mrpConsVolArg,
            WitDblFlexVec & mrpResidualVolArg);

      void receiveOperationData (WitDblFlexVec & mrpExecVolArg);
      void receiveSubEntryData  (WitDblFlexVec & mrpSubVolArg);
d88 1
a88 1
      accessNonNull (WitComponent *, passDataComp)
d98 1
a98 1
      WitComponent * passDataComp_;
d100 1
a100 1
         // The Component for which passMrpData is currently being called, if
@


1.27
log
@Stochastic Implosion
@
text
@d54 1
a54 1
      // of the Component argument.
d57 1
a57 2
      void receiveData (
            WitPart *       thePart,
d62 2
a63 7
      void receiveData (
            WitOperation *  theOpn,
            WitDblFlexVec & mrpExecVolArg);

      void receiveData (
            WitSubEntry *   theSub,
            WitDblFlexVec & mrpSubVolArg);
d90 2
d100 5
@


1.26
log
@Stochastic Implosion
@
text
@d20 1
d51 19
a69 9
      // MRP solution export functions.
      // Only valid when the MRP solution is being exported.
      //------------------------------------------------------------------------

      const WitTVec <double> & reqVol         (WitPart      *);
      const WitTVec <double> & mrpConsVol     (WitPart      *);
      const WitTVec <double> & mrpResidualVol (WitPart      *);
      const WitTVec <double> & mrpExecVol     (WitOperation *);
      const WitTVec <double> & mrpSubVol      (WitSubEntry  *);
d104 3
a106 3
      bool exporting_;
         //
         // True, iff the MRP solution is currently being exported.
d108 5
a112 5
      WitSchedule <WitPart,      double> mrpConsVol_;
      WitSchedule <WitOperation, double> mrpExecVol_;
      WitSchedule <WitSubEntry,  double> mrpSubVol_;
         //
         // Some of the MRP attributes computed by this OrigMrpExp.
@


1.25
log
@[disallowed backlog]
@
text
@d49 11
d74 4
a77 4
      virtual double          supplyVol (WitPart *, WitPeriod);
      virtual double          demandVol (WitPart *, WitPeriod);
      virtual WitDblFlexVec & execVol   (WitOperation *);
      virtual WitDblFlexVec & subVol    (WitSubEntry *);
d92 10
@


1.24
log
@Rescinded all changed made since 1/31/07.
@
text
@a19 3
#include <Part.h>
#include <Opn.h>
#include <SubEntry.h>
a48 12
      //------------------------------------------------------------------------
      // Functions for receiving data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      //------------------------------------------------------------------------

      static void receiveDMPs (WitDblFlexVec      WitPart::* reqVolArg,
                               WitDblFlexVec      WitPart::* mrpConsVolArg,
                               WitDblFlexVec      WitPart::* mrpResidualVolArg);
      static void receiveDMPs (WitDblFlexVec WitOperation::* mrpExecVolArg);
      static void receiveDMPs (WitDblFlexVec  WitSubEntry::* mrpSubVolArg);

a77 17
      //------------------------------------------------------------------------
      // Data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      // E.g., theOpn->*mrpExecVol_ == theOpn->mrpExecVol_.
      //------------------------------------------------------------------------

      static WitDblFlexVec      WitPart::* reqVol_;
      static WitDblFlexVec      WitPart::* mrpConsVol_;
      static WitDblFlexVec      WitPart::* mrpResidualVol_;
      static WitDblFlexVec WitOperation::* mrpExecVol_;
      static WitDblFlexVec  WitSubEntry::* mrpSubVol_;

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

@


1.23
log
@[disallowed backlog]
@
text
@d52 12
d93 17
@


1.22
log
@[disallowed backlog]
@
text
@a51 8
      //------------------------------------------------------------------------
      // Functions for receiving data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      //------------------------------------------------------------------------

      static void receiveDMPs (WitDblFlexVec  WitSubEntry::* mrpSubVolArg);

a80 13
      //------------------------------------------------------------------------
      // Data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      // E.g., theOpn->*mrpExecVol_ == theOpn->mrpExecVol_.
      //------------------------------------------------------------------------

      static WitDblFlexVec WitSubEntry::* mrpSubVol_;

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

@


1.21
log
@[disallowed backlog]
@
text
@a57 1
      static void receiveDMPs (WitDblFlexVec WitOperation::* mrpExecVolArg);
d96 1
a96 2
      static WitDblFlexVec WitOperation::* mrpExecVol_;
      static WitDblFlexVec  WitSubEntry::* mrpSubVol_;
@


1.20
log
@Updated the copyright date on all source files.
@
text
@a57 3
      static void receiveDMPs (WitDblFlexVec      WitPart::* reqVolArg,
                               WitDblFlexVec      WitPart::* mrpConsVolArg,
                               WitDblFlexVec      WitPart::* mrpResidualVolArg);
a96 3
      static WitDblFlexVec      WitPart::* reqVol_;
      static WitDblFlexVec      WitPart::* mrpConsVol_;
      static WitDblFlexVec      WitPart::* mrpResidualVol_;
@


1.19
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.18
log
@Double Precision.
@
text
@a22 1
#include <RefMap.h>
d53 3
a55 1
      // Data loading functions.
d58 5
a62 13
      void loadDataFrom (
            WitPart *       thePart,
            WitDblFlexVec & reqVolArg,
            WitDblFlexVec & mrpConsVolArg,
            WitDblFlexVec & mrpResidualVolArg);

      void loadDataFrom (
            WitOperation *  theOpn, 
            WitDblFlexVec & mrpExecVolArg);

      void loadDataFrom (
            WitSubEntry *   theSub, 
            WitDblFlexVec & mrpSubVolArg);
a84 8
      void loadData ();
         //
         // Loads the data to be loaded from the components.

      void clearLoadedData ();
         //
         // Clears the data that was loaded from the components.

d94 4
a97 1
      // Mappings to data loaded in from Components.
d100 5
a104 5
      WitRefMap <WitPart,      WitDblFlexVec> reqVol_;
      WitRefMap <WitPart,      WitDblFlexVec> mrpConsVol_;
      WitRefMap <WitPart,      WitDblFlexVec> mrpResidualVol_;
      WitRefMap <WitOperation, WitDblFlexVec> mrpExecVol_;
      WitRefMap <WitSubEntry,  WitDblFlexVec> mrpSubVol_;
@


1.17
log
@Double Precision.
@
text
@d58 4
a61 4
            WitPart *             thePart,
            WitFlexVec <double> & reqVolArg,
            WitFlexVec <double> & mrpConsVolArg,
            WitFlexVec <double> & mrpResidualVolArg);
d64 2
a65 2
            WitOperation *        theOpn, 
            WitFlexVec <double> & mrpExecVolArg);
d68 2
a69 2
            WitSubEntry *         theSub, 
            WitFlexVec <double> & mrpSubVolArg);
d85 4
a88 4
      virtual double                supplyVol (WitPart *, WitPeriod);
      virtual double                demandVol (WitPart *, WitPeriod);
      virtual WitFlexVec <double> & execVol   (WitOperation *);
      virtual WitFlexVec <double> & subVol    (WitSubEntry *);
d112 5
a116 5
      WitRefMap <WitPart,      WitFlexVec <double> > reqVol_;
      WitRefMap <WitPart,      WitFlexVec <double> > mrpConsVol_;
      WitRefMap <WitPart,      WitFlexVec <double> > mrpResidualVol_;
      WitRefMap <WitOperation, WitFlexVec <double> > mrpExecVol_;
      WitRefMap <WitSubEntry,  WitFlexVec <double> > mrpSubVol_;
@


1.16
log
@Double Precision.
@
text
@d58 4
a61 4
            WitPart *      thePart,
            WitRealVec &   reqVolArg,
            WitRealVec &   mrpConsVolArg,
            WitRealVec &   mrpResidualVolArg);
d64 2
a65 2
            WitOperation * theOpn, 
            WitRealVec &   mrpExecVolArg);
d68 2
a69 2
            WitSubEntry *  theSub, 
            WitRealVec &   mrpSubVolArg);
d85 4
a88 4
      virtual double       supplyVol (WitPart *, WitPeriod);
      virtual double       demandVol (WitPart *, WitPeriod);
      virtual WitRealVec & execVol   (WitOperation *);
      virtual WitRealVec & subVol    (WitSubEntry *);
d112 5
a116 5
      WitRefMap <WitPart,      WitRealVec> reqVol_;
      WitRefMap <WitPart,      WitRealVec> mrpConsVol_;
      WitRefMap <WitPart,      WitRealVec> mrpResidualVol_;
      WitRefMap <WitOperation, WitRealVec> mrpExecVol_;
      WitRefMap <WitSubEntry,  WitRealVec> mrpSubVol_;
@


1.15
log
@Double Precision.
@
text
@d58 4
a61 4
            WitPart *            thePart,
            WitRealVec &         reqVolArg,
            WitRealVec &         mrpConsVolArg,
            WitRealVec &         mrpResidualVolArg);
d64 2
a65 2
            WitOperation *       theOpn, 
            WitFlexVec <float> & mrpExecVolArg);
d68 2
a69 2
            WitSubEntry *        theSub, 
            WitFlexVec <float> & mrpSubVolArg);
d85 4
a88 4
      virtual double supplyVol (WitPart *,      WitPeriod);
      virtual double demandVol (WitPart *,      WitPeriod);
      virtual float & execVol  (WitOperation *, WitPeriod);
      virtual float & subVol   (WitSubEntry *,  WitPeriod);
d112 5
a116 5
      WitRefMap <WitPart,      WitRealVec>          reqVol_;
      WitRefMap <WitPart,      WitRealVec>          mrpConsVol_;
      WitRefMap <WitPart,      WitRealVec>          mrpResidualVol_;
      WitRefMap <WitOperation, WitFlexVec <float> > mrpExecVol_;
      WitRefMap <WitSubEntry,  WitFlexVec <float> > mrpSubVol_;
@


1.14
log
@Added some optional warnings on Linux.
@
text
@d59 3
a61 3
            WitFlexVec <float> & reqVolArg,
            WitFlexVec <float> & mrpConsVolArg,
            WitFlexVec <float> & mrpResidualVolArg);
d112 3
a114 3
      WitRefMap <WitPart,      WitFlexVec <float> > reqVol_;
      WitRefMap <WitPart,      WitFlexVec <float> > mrpConsVol_;
      WitRefMap <WitPart,      WitFlexVec <float> > mrpResidualVol_;
@


1.13
log
@Internal changes.
@
text
@d45 1
a45 1
      ~WitOrigMrpExp ();
@


1.12
log
@Continued implementation of single-source.
@
text
@d51 1
a51 1
      accessFunc (WitBoolean, exploding)
d122 1
a122 1
      WitBoolean exploding_;
d124 1
a124 1
         // TRUE, iff this OrigMrpExp is currently performing Mrp explosion.
@


1.11
log
@Continued implementation of single-source.
@
text
@d23 1
d112 5
a116 5
      WitRefMap <WitPart,      WitFlexVec <float> > & reqVol_;
      WitRefMap <WitPart,      WitFlexVec <float> > & mrpConsVol_;
      WitRefMap <WitPart,      WitFlexVec <float> > & mrpResidualVol_;
      WitRefMap <WitOperation, WitFlexVec <float> > & mrpExecVol_;
      WitRefMap <WitSubEntry,  WitFlexVec <float> > & mrpSubVol_;
@


1.10
log
@Continued implementation of single-source.
@
text
@d50 19
a68 2
      accessFunc (const WitAccFlag *, myAccFlag)
      accessFunc (WitBoolean,         exploding)
a78 10
      // Component data access functions.
      //------------------------------------------------------------------------

      refAccess (WitPart,      WitFlexVec <float>, reqVol)
      refAccess (WitPart,      WitFlexVec <float>, mrpConsVol)
      refAccess (WitPart,      WitFlexVec <float>, mrpResidualVol)
      refAccess (WitOperation, WitFlexVec <float>, mrpExecVol)
      refAccess (WitSubEntry,  WitFlexVec <float>, mrpSubVol)

      //------------------------------------------------------------------------
d91 8
d107 13
a119 3
      WitAccFlag * const myAccFlag_;
         //
         // The AccFlag for this OrigMrpExp.
@


1.9
log
@Continued implementation of single-source.
@
text
@a22 1
#include <Schedule.h>
d50 4
a53 1
      accessFunc (WitBoolean, exploding)
d56 1
a56 1
      // Result export functions.
d59 1
a59 8
      accessMap (const WitTVec <float> &, mrpConsVol, WitPart)
      accessMap (const WitTVec <float> &, mrpExecVol, WitOperation)
      accessMap (const WitTVec <float> &, mrpSubVol,  WitSubEntry)

      const WitTVec <double> & reqVol         (WitPart *);
      const WitTVec <double> & mrpResidualVol (WitPart *);

   private:
d62 1
a62 1
      // Private member functions.
d65 5
a69 1
      noCopyCtorAssign (WitOrigMrpExp);
d92 3
a94 11
      //------------------------------------------------------------------------
      // Result data.
      //------------------------------------------------------------------------

      WitSchedule <WitPart,      float> mrpConsVol_;
      WitSchedule <WitOperation, float> mrpExecVol_;
      WitSchedule <WitSubEntry,  float> mrpSubVol_;

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------
@


1.8
log
@Continued implementation of single-source.
@
text
@d54 1
a54 1
      // Result exporting functions.
@


1.7
log
@Continued implementation of single-source.
@
text
@d51 1
a51 1
      accessFunc (WitBoolean,                            exploding)
d53 3
a55 3
      accessMap  (const WitTVec <float> &, WitPart,      mrpConsVol)
      accessMap  (const WitTVec <float> &, WitOperation, mrpExecVol)
      accessMap  (const WitTVec <float> &, WitSubEntry,  mrpSubVol)
d57 3
a59 4
      inline const WitTVec <double> & reqVol (WitPart * thePart)
         {
         return myReqVol () (thePart);
         }
d61 2
a62 4
      inline const WitTVec <double> & mrpResidualVol (WitPart * thePart)
         {
         return netSupplyVol () (thePart);
         }
@


1.6
log
@Preliminary work on single source.
@
text
@d23 1
d51 15
a65 2
      accessFunc (const WitAccFlag *, myAccFlag)
      accessFunc (WitBoolean,         exploding)
a75 10
      // Component data access functions.
      //------------------------------------------------------------------------

      refAccess (WitPart,      WitFlexVec <float>, reqVol)
      refAccess (WitPart,      WitFlexVec <float>, mrpConsVol)
      refAccess (WitPart,      WitFlexVec <float>, mrpResidualVol)
      refAccess (WitOperation, WitFlexVec <float>, mrpExecVol)
      refAccess (WitSubEntry,  WitFlexVec <float>, mrpSubVol)

      //------------------------------------------------------------------------
d96 11
a106 3
      WitAccFlag * const myAccFlag_;
         //
         // The AccFlag for this OrigMrpExp.
@


1.5
log
@Continued preliminary work on single source.
@
text
@d65 5
a69 5
      refAccess (WitPart,      WitFlexVec (float), reqVol)
      refAccess (WitPart,      WitFlexVec (float), mrpConsVol)
      refAccess (WitPart,      WitFlexVec (float), mrpResidualVol)
      refAccess (WitOperation, WitFlexVec (float), mrpExecVol)
      refAccess (WitSubEntry,  WitFlexVec (float), mrpSubVol)
@


1.4
log
@Refactoring for selection splitting.
@
text
@d20 3
@


1.3
log
@Changed some more of the FSS and MRP stuff from float to double to fix a
   numerical problem.
@
text
@d56 1
a56 3
      copyCtorAndAssignment (WitOrigMrpExp);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d76 4
a79 7
      virtual float supplyVol (WitPart * thePart, WitPeriod thePer);

      virtual float demandVol (WitPart *, WitPeriod);

      virtual float & execVol (WitOperation *, WitPeriod);

      virtual float & subVol (WitSubEntry *, WitPeriod);
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
