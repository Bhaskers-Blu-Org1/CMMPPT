head	1.28;
access;
symbols
	sce_5_01_20080919:1.25;
locks; strict;
comment	@ * @;


1.28
date	2011.09.28.23.49.53;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.09.24.00.28.14;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.08.30.20.17.54;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.02.09.00.40.45;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.02.09.00.11.58;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.02.08.23.33.46;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.02.08.21.38.32;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.02.08.00.08.09;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.02.07.23.30.10;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.02.07.18.41.39;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.01.30.22.25.42;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.01.30.21.07.16;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.01.30.18.47.06;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.01.30.00.06.11;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.01.29.23.51.49;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.01.29.19.50.01;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.01.29.00.29.01;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.01.28.23.53.37;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.01.25.00.19.21;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.01.23.21.13.47;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.01.18.22.40.58;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.01.15.23.37.25;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.01.14.22.59.01;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.01.14.22.45.22;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.01.14.21.44.01;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.01.14.19.21.14;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.01.11.21.47.41;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.01.09.20.28.22;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PerStageMgrH
#define PerStageMgrH

//------------------------------------------------------------------------------
// Header file: "PerStageMgr.h"
//
// Contains the declaration of class PerStageMgr.
//------------------------------------------------------------------------------

#include <StageMgr.h>
#include <PtrTVec.h>

//------------------------------------------------------------------------------
// Class PerStageMgr
//
// "Period Stage Manager"
// Manages the stage data for stochastic implosion in stage-by-period mode.
//
// Class hierarchy:
//
//    ProbAssoc
//       StageMgr
//          PerStageMgr
//
// Implemented in Stage.C.
//------------------------------------------------------------------------------

class WitPerStageMgr: public WitStageMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPerStageMgr (WitStochModeMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPerStageMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void       setObjectStageIdx (WitNode *, int);
      virtual void       setPeriodStageIdx (WitPeriod, int);
      virtual WitStage * objectStage       (WitNode *);
      virtual WitStage * periodStage       (WitPeriod);
      virtual WitStage * myStageOf         (WitNode *,  WitPeriod);
      virtual bool       includesNode      (WitStage *, WitNode *);
      virtual bool       includesPeriod    (WitStage *, WitPeriod);
      virtual void       writeData         ();
      virtual void       displayData       ();
      virtual void       copyAttrsFrom     (WitStageMgr *);
      virtual void       validateData      ();
      virtual void       issueAttMisMatchHeadMsg ();
         //
         // Overrides from class StageMgr.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void validateCoreData ();
         //
         // Verifies that the input data for the core problem is valid for
         // entering stochastic mode in stage-by-period mode.

      void validateBomEnts ();
         //
         // Verifies that there are no BOM entries with positive offsets.

      void validateSubs ();
         //
         // Verifies that there are no substitutes with positive offsets.

      void validateBopEnts ();
         //
         // Verifies that there are no BOP entries with positive offsets.

      void checkImpactPeriod (WitBillEntry * theBillEnt, WitPeriod execPer);
         //
         // Verifies that the impactPeriod of theBillEnt in execPer is
         // >= execPer.

      noCopyCtorAssign (WitPerStageMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrTVec <WitStage> periodStage_;
         //
         // periodStage_[thePer] is the stage to which thePer belongs.
   };

#endif
@


1.27
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.26
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d38 2
a39 48
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPerStageMgr (WitStochModeMgr *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitPerStageMgr ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

virtual void       setObjectStageIdx (WitNode *, int);
virtual void       setPeriodStageIdx (WitPeriod, int);
virtual WitStage * objectStage       (WitNode *);
virtual WitStage * periodStage       (WitPeriod);
virtual WitStage * myStageOf         (WitNode *,  WitPeriod);
virtual bool       includesNode      (WitStage *, WitNode *);
virtual bool       includesPeriod    (WitStage *, WitPeriod);
virtual void       writeData         ();
virtual void       displayData       ();
virtual void       copyAttrsFrom     (WitStageMgr *);
virtual void       validateData      ();
virtual void       issueAttMisMatchHeadMsg ();
//
// Overrides from class StageMgr.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void validateCoreData ();
//
// Verifies that the input data for the core problem is valid for
// entering stochastic mode in stage-by-period mode.

void validateBomEnts ();
//
// Verifies that there are no BOM entries with positive offsets.
d41 69
a109 23
void validateSubs ();
//
// Verifies that there are no substitutes with positive offsets.

void validateBopEnts ();
//
// Verifies that there are no BOP entries with positive offsets.

void checkImpactPeriod (WitBillEntry * theBillEnt, WitPeriod execPer);
//
// Verifies that the impactPeriod of theBillEnt in execPer is
// >= execPer.

noCopyCtorAssign (WitPerStageMgr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitPtrTVec <WitStage> periodStage_;
//
// periodStage_[thePer] is the stage to which thePer belongs.
};
@


1.25
log
@Stochastic Implosion
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d38 48
a85 2
   {
   public:
d87 23
a109 69
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPerStageMgr (WitStochModeMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPerStageMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void       setObjectStageIdx (WitNode *, int);
      virtual void       setPeriodStageIdx (WitPeriod, int);
      virtual WitStage * objectStage       (WitNode *);
      virtual WitStage * periodStage       (WitPeriod);
      virtual WitStage * myStageOf         (WitNode *,  WitPeriod);
      virtual bool       includesNode      (WitStage *, WitNode *);
      virtual bool       includesPeriod    (WitStage *, WitPeriod);
      virtual void       writeData         ();
      virtual void       displayData       ();
      virtual void       copyAttrsFrom     (WitStageMgr *);
      virtual void       validateData      ();
      virtual void       issueAttMisMatchHeadMsg ();
         //
         // Overrides from class StageMgr.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void validateCoreData ();
         //
         // Verifies that the input data for the core problem is valid for
         // entering stochastic mode in stage-by-period mode.

      void validateBomEnts ();
         //
         // Verifies that there are no BOM entries with positive offsets.

      void validateSubs ();
         //
         // Verifies that there are no substitutes with positive offsets.

      void validateBopEnts ();
         //
         // Verifies that there are no BOP entries with positive offsets.

      void checkImpactPeriod (WitBillEntry * theBillEnt, WitPeriod execPer);
         //
         // Verifies that the impactPeriod of theBillEnt in execPer is
         // >= execPer.

      noCopyCtorAssign (WitPerStageMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrTVec <WitStage> periodStage_;
         //
         // periodStage_[thePer] is the stage to which thePer belongs.
   };
@


1.24
log
@Stochastic Implosion
@
text
@d57 11
a67 9
      virtual WitStage * objectStage    (WitNode *);
      virtual WitStage * periodStage    (WitPeriod);
      virtual WitStage * myStageOf      (WitNode *,  WitPeriod);
      virtual bool       includesNode   (WitStage *, WitNode *);
      virtual bool       includesPeriod (WitStage *, WitPeriod);
      virtual void       writeData      ();
      virtual void       displayData    ();
      virtual void       copyAttrsFrom  (WitStageMgr *);
      virtual void       validateData   ();
a77 5
      virtual void setObjectStage (WitNode *, WitStage *);
      virtual void setPeriodStage (WitPeriod, WitStage *);
         //
         // Overrides from class StageMgr.

@


1.23
log
@Srochastic Implosion
@
text
@a56 2
      virtual void       setObjectStage (WitNode *,  WitStage *);
      virtual void       setPeriodStage (WitPeriod,  WitStage *);
d76 5
@


1.22
log
@Stochastic Implosion
@
text
@d61 1
a61 1
      virtual WitStage * stageOf        (WitNode *,  WitPeriod);
@


1.21
log
@Stochastic Implosion
@
text
@d45 1
a45 1
      WitPerStageMgr (WitProblem *);
@


1.20
log
@Stochastic Implosion
@
text
@d57 11
a67 11
      virtual void       setObjectStage      (WitNode *,  WitStage *);
      virtual void       setPeriodStage      (const WitPtrTVec <WitStage> &);
      virtual WitStage * objectStage         (WitNode *);
      virtual WitStage * periodStage         (WitPeriod);
      virtual WitStage * stageOf             (WitNode *,  WitPeriod);
      virtual bool       includesNode        (WitStage *, WitNode *);
      virtual bool       includesPeriod      (WitStage *, WitPeriod);
      virtual void       writeData           ();
      virtual void       displayData         ();
      virtual void       copyAttrsFrom       (WitStageMgr *);
      virtual void       validateData        ();
@


1.19
log
@Stochastic Implosion
@
text
@d62 2
a63 2
      virtual bool       stageIncludesNode   (WitStage *, WitNode *);
      virtual bool       stageIncludesPeriod (WitStage *, WitPeriod);
@


1.18
log
@Stochastic Implosion
@
text
@d20 1
d34 1
a34 1
// Implemented in StageMgr.C.
d57 12
a68 12
      virtual void setObjectStage          (WitNode *, int);
      virtual void setPeriodStage          (const int *);
      virtual int  objectStage             (WitNode *);
      virtual int  periodStage             (WitPeriod);
      virtual int  stageOf                 (WitNode *, WitPeriod);
      virtual bool stageIncludesNode       (int,       WitNode *);
      virtual bool stageIncludesPeriod     (int,       WitPeriod);
      virtual void writeData               ();
      virtual void displayData             ();
      virtual void copyAttrsFrom           (WitStageMgr *);
      virtual void validateData            ();
      virtual void issueAttMisMatchHeadMsg ();
d106 1
a106 1
      WitTVec <int> periodStage_;
d108 1
a108 3
         // periodStage_[thePer] is the index of the stage to which thePer
         // belongs.
         // Valid values: 0 and 1.
@


1.17
log
@Stochastic Implosion
@
text
@d61 2
@


1.16
log
@Stochastic Implosion
@
text
@d56 5
a65 7
      virtual void setObjectStage          (WitNode *, int);
      virtual void setPeriodStage          (const int *);
      virtual int  stageOf                 (WitNode *, WitPeriod);
      virtual int  objectStage             (WitNode *);
      virtual 
         const WitTVec <int> &
                   periodStage             ();
@


1.15
log
@Stochastic Implosion
@
text
@a25 5
// All members of this class are private.
// Thus the only way to access this class is through the one friend function,
// WitStageMgr::newStageMgr (...), which constructs an instance and returns it
// as a StageMgr. After that, all access is through virtual function calls to
// the constructed StageMgr.
d29 3
a31 2
//    StageMgr
//       PerStageMgr
d38 1
a38 7
   friend WitStageMgr * WitStageMgr::newStageMgr (WitProblem *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d71 6
@


1.14
log
@Stochastic Implosion
@
text
@d26 5
d42 7
a48 1
   public:
a80 6
   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

@


1.13
log
@Stochastic Implosion
@
text
@d57 1
a57 1
      virtual void copyAttrsFrom           (WitStochModeMgr *);
d60 2
d63 4
a69 18
      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (int  defPeriodStage, 0)

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setPeriodStage (const int *);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitTVec <int> &, periodStage)

@


1.12
log
@Stochastic Implosion
@
text
@d60 1
a60 2
      virtual bool nodeBelongsToStage      (WitNode *, int);
      virtual bool perBelongsToStage       (WitPeriod, int);
@


1.11
log
@Stochastic Implosion
@
text
@a61 1
      virtual bool nodeIntersectsStage     (WitNode *, int);
@


1.10
log
@Stochastic Implosion
@
text
@d58 1
d60 2
@


1.9
log
@Stochastic Implosion
@
text
@d59 1
a59 1
      virtual bool intersectsStage         (int, WitNode *);
@


1.8
log
@Stochastic Implosion
@
text
@d59 1
@


1.7
log
@Stochastic Implosion
@
text
@d66 1
a66 1
      defaultValue (int  defPerStageIndex, 0)
d72 1
a72 1
      void setPerStageIndex (const int *);
d78 1
a78 1
      accessFunc (const WitTVec <int> &, perStageIndex)
d114 1
a114 1
      WitTVec <int> perStageIndex_;
d116 1
a116 1
         // perStageIndex_[thePer] is the index of the stage to which thePer
@


1.6
log
@Stochastic Implosion
@
text
@d55 4
a58 3
      virtual void writeData     ();
      virtual void displayData   ();
      virtual void copyAttrsFrom (WitStochModeMgr *);
@


1.5
log
@Stochastic Implosion
@
text
@a57 1
      virtual void validateData  ();
@


1.4
log
@Stochastic Implosion
@
text
@d103 5
@


1.3
log
@Stochastic Implosion
@
text
@d86 17
@


1.2
log
@Stochastic Implosion
@
text
@d63 6
d72 1
a72 1
      void setStageIndex (const int *);
d78 1
a78 1
      accessFunc (const WitTVec <int> &, stageIndex)
d92 1
a92 1
      WitTVec <int> stageIndex_;
d94 1
a94 1
         // stageIndex_[thePer] is the index of the stage to which thePer
@


1.1
log
@Stochastic Implosion
@
text
@d63 1
a63 1
      // Default value functions.
d66 1
a66 3
      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------
d72 2
d85 6
@

