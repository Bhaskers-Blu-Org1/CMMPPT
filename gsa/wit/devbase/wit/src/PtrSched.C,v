head	1.69;
access;
symbols
	sce_5_01_20080919:1.64
	latest_sce_4_20_20060523:1.48.0.2
	sce_4_20_20060523:1.48
	latest_sce4_20_OSL:1.47.0.2
	sce_4_20_OSL:1.47
	sce_410_withVa:1.24
	sce_4_05_20040511:1.16
	sce_4_00_20040201:1.16;
locks; strict;
comment	@ * @;


1.69
date	2011.09.28.23.50.01;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2011.09.24.00.28.24;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2011.08.30.20.18.02;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2010.09.10.22.10.41;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2010.07.16.20.21.21;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2007.08.24.15.48.07;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2007.08.22.22.16.15;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2007.08.16.21.27.40;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2007.08.15.21.36.42;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2007.08.14.15.03.01;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2007.07.30.22.38.02;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2007.07.27.19.53.37;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2007.07.27.16.33.32;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2007.07.26.19.23.35;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2007.07.25.21.16.10;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2007.07.24.21.22.04;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2007.07.23.23.08.23;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2007.05.11.15.56.45;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2006.08.17.19.36.40;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2006.08.07.22.24.29;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2006.08.03.18.59.33;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2006.05.02.17.34.10;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2006.03.17.19.02.18;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2006.03.11.00.03.45;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2006.03.08.23.57.12;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2006.03.03.20.46.56;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2006.02.21.15.44.14;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2006.02.17.17.07.17;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2006.01.31.22.40.39;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2006.01.25.22.16.42;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2006.01.23.20.54.05;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2006.01.20.17.00.47;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2006.01.18.20.02.59;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2006.01.13.20.23.00;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2006.01.12.23.10.47;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2006.01.10.21.24.29;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2006.01.09.23.42.39;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2006.01.09.20.02.30;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2006.01.03.19.00.03;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2005.12.28.18.57.50;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2005.12.16.20.33.56;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2005.11.23.19.08.19;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2005.11.21.22.27.20;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2005.11.16.23.24.49;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2005.11.14.22.29.02;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2005.03.28.20.14.37;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2005.01.28.19.34.27;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2005.01.10.22.34.48;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.12.28.19.21.19;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2004.12.27.22.33.17;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2004.12.24.00.02.27;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.15.16.39.25;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2004.12.06.22.38.16;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.12.24.23.25.56;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.12.19.19.01.02;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.12.19.49.44;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.12.11.21.56.33;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.23.19.33.13;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.16.22.29.40;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.16.16.18.03;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.14.21.19.17;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.01.14.17.43;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.30.15.40.55;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.26.20.55.13;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.26.16.06.06;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.26.15.38.57;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.25.22.58.26;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.25.21.19.26;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.25.20.44.44;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.69
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "PtrSched.C"
//
// Contains the implementation of class   template PtrSched <DomEl, RangeEl>.
// Contains the explicit instantiation of template PtrSched <DomEl, RangeEl>.
//------------------------------------------------------------------------------

#include <PtrSched.h>
#include <BomEntry.h>
#include <SubEntry.h>
#include <BopEntry.h>
#include <Operation.h>
#include <Material.h>
#include <Demand.h>
#include <BoundSet.h>
#include <RtSite.h>
#include <RtCand.h>

//------------------------------------------------------------------------------
// Implementation of class template PtrSched <DomEl, RangeEl>.
//------------------------------------------------------------------------------

template <PtrSchedArgDecs> 
      WitPtrSched <PtrSchedArgs>::WitPtrSched ():
         myPtrVec_ ()
   {
   if (false)
      {
      DomEl * theDomEl;

      DomEl::verifyMappingIndex (theDomEl);
      }
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs> 
      WitPtrSched <PtrSchedArgs>::WitPtrSched (WitProblem * theProblem):

         myPtrVec_ ()
   {
   allocate (theProblem);
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs> 
      WitPtrSched <PtrSchedArgs>::~WitPtrSched ()
   {
   clear ();
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs> 
      void WitPtrSched <PtrSchedArgs>::allocate (WitProblem * theProblem)
   {
   int theIdx;

   allocate1D (theProblem);

   for (theIdx = 0; theIdx < myPtrVec_.length (); theIdx ++)
      myPtrVec_.myElemAt (theIdx).allocate (theProblem);
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs> 
      void WitPtrSched <PtrSchedArgs>::allocate1D (WitProblem * theProblem)
   {
   allocate1D (DomEl::nInstances (theProblem));
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs> 
      void WitPtrSched <PtrSchedArgs>::allocate1D (int nInst)
   {
   int theIdx;

   clear ();

   myPtrVec_.resize (nInst);

   for (theIdx = 0; theIdx < nInst; theIdx ++)
      myPtrVec_[theIdx] = new WitPtrTVec <RangeEl>;
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs> 
      void WitPtrSched <PtrSchedArgs>::clear ()
   {
   int theIdx;

   for (theIdx = 0; theIdx < myPtrVec_.length (); theIdx ++)
      delete myPtrVec_[theIdx];

   myPtrVec_.clear ();
   }

//------------------------------------------------------------------------------

template class WitPtrSched <WitPart,      WitScrapVar>;
template class WitPtrSched <WitBomEntry,  WitNonSubVar>;
template class WitPtrSched <WitSubEntry,  WitSubVar>;
template class WitPtrSched <WitDemand,    WitShipVar>;
template class WitPtrSched <WitBoundSet,  WitSlbvVar>;
template class WitPtrSched <WitOperation, WitExecVar>;
template class WitPtrSched <WitMaterial,  WitStockVar>;
template class WitPtrSched <WitDemand,    WitCumShipVar>;
template class WitPtrSched <WitPart,      WitResourceCon>;
template class WitPtrSched <WitBomEntry,  WitSubCon>;
template class WitPtrSched <WitDemand,    WitShipCon>;
template class WitPtrSched <WitBoundSet,  WitSlbCon>;
template class WitPtrSched <WitBopEntry,  WitMeSitePt>;
template class WitPtrSched <WitDemand,    WitObjStack <WitPegEl> >;
template class WitPtrSched <WitOperation, WitPegEl>;
template class WitPtrSched <WitSubEntry,  WitPegEl>;
template class WitPtrSched <WitRtSite,    WitPrSelPt>;
template class WitPtrSched <WitRtCand,    WitPrAltPt>;
template class WitPtrSched <WitPart,      WitReqPt>;
template class WitPtrSched <WitPart,      WitPartPerStack>;
template class WitPtrSched <WitMaterial,  WitSsrPt>;
template class WitPtrSched <WitPart,      WitPipReqList>;
template class WitPtrSched <WitBopEntry,  WitPipReqList>;
template class WitPtrSched <WitDemand,    WitTripStack <WitOperation> >;
template class WitPtrSched <WitDemand,    WitTripStack <WitBopEntry>  >;
template class WitPtrSched <WitDemand,    WitTripStack <WitSubEntry>  >;
template class WitPtrSched <WitDemand,    WitTripStack <WitPart>      >;
@


1.68
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.67
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d32 7
a38 7
template <PtrSchedArgDecs>
WitPtrSched <PtrSchedArgs>::WitPtrSched ():
myPtrVec_ ()
{
if (false)
{
DomEl * theDomEl;
d40 3
a42 3
DomEl::verifyMappingIndex (theDomEl);
}
}
d46 2
a47 2
template <PtrSchedArgDecs>
WitPtrSched <PtrSchedArgs>::WitPtrSched (WitProblem * theProblem):
d49 4
a52 4
myPtrVec_ ()
{
allocate (theProblem);
}
d56 5
a60 5
template <PtrSchedArgDecs>
WitPtrSched <PtrSchedArgs>::~WitPtrSched ()
{
clear ();
}
d64 4
a67 4
template <PtrSchedArgDecs>
void WitPtrSched <PtrSchedArgs>::allocate (WitProblem * theProblem)
{
int theIdx;
d69 1
a69 1
allocate1D (theProblem);
d71 3
a73 3
for (theIdx = 0; theIdx < myPtrVec_.length (); theIdx ++)
myPtrVec_.myElemAt (theIdx).allocate (theProblem);
}
d77 5
a81 5
template <PtrSchedArgDecs>
void WitPtrSched <PtrSchedArgs>::allocate1D (WitProblem * theProblem)
{
allocate1D (DomEl::nInstances (theProblem));
}
d85 4
a88 4
template <PtrSchedArgDecs>
void WitPtrSched <PtrSchedArgs>::allocate1D (int nInst)
{
int theIdx;
d90 1
a90 1
clear ();
d92 1
a92 1
myPtrVec_.resize (nInst);
d94 3
a96 3
for (theIdx = 0; theIdx < nInst; theIdx ++)
myPtrVec_[theIdx] = new WitPtrTVec <RangeEl>;
}
d100 4
a103 4
template <PtrSchedArgDecs>
void WitPtrSched <PtrSchedArgs>::clear ()
{
int theIdx;
d105 2
a106 2
for (theIdx = 0; theIdx < myPtrVec_.length (); theIdx ++)
delete myPtrVec_[theIdx];
d108 2
a109 2
myPtrVec_.clear ();
}
@


1.66
log
@Heuristic Adjustment
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d32 7
a38 7
template <PtrSchedArgDecs> 
      WitPtrSched <PtrSchedArgs>::WitPtrSched ():
         myPtrVec_ ()
   {
   if (false)
      {
      DomEl * theDomEl;
d40 3
a42 3
      DomEl::verifyMappingIndex (theDomEl);
      }
   }
d46 2
a47 2
template <PtrSchedArgDecs> 
      WitPtrSched <PtrSchedArgs>::WitPtrSched (WitProblem * theProblem):
d49 4
a52 4
         myPtrVec_ ()
   {
   allocate (theProblem);
   }
d56 5
a60 5
template <PtrSchedArgDecs> 
      WitPtrSched <PtrSchedArgs>::~WitPtrSched ()
   {
   clear ();
   }
d64 4
a67 4
template <PtrSchedArgDecs> 
      void WitPtrSched <PtrSchedArgs>::allocate (WitProblem * theProblem)
   {
   int theIdx;
d69 1
a69 1
   allocate1D (theProblem);
d71 3
a73 3
   for (theIdx = 0; theIdx < myPtrVec_.length (); theIdx ++)
      myPtrVec_.myElemAt (theIdx).allocate (theProblem);
   }
d77 5
a81 5
template <PtrSchedArgDecs> 
      void WitPtrSched <PtrSchedArgs>::allocate1D (WitProblem * theProblem)
   {
   allocate1D (DomEl::nInstances (theProblem));
   }
d85 4
a88 4
template <PtrSchedArgDecs> 
      void WitPtrSched <PtrSchedArgs>::allocate1D (int nInst)
   {
   int theIdx;
d90 1
a90 1
   clear ();
d92 1
a92 1
   myPtrVec_.resize (nInst);
d94 3
a96 3
   for (theIdx = 0; theIdx < nInst; theIdx ++)
      myPtrVec_[theIdx] = new WitPtrTVec <RangeEl>;
   }
d100 4
a103 4
template <PtrSchedArgDecs> 
      void WitPtrSched <PtrSchedArgs>::clear ()
   {
   int theIdx;
d105 2
a106 2
   for (theIdx = 0; theIdx < myPtrVec_.length (); theIdx ++)
      delete myPtrVec_[theIdx];
d108 2
a109 2
   myPtrVec_.clear ();
   }
@


1.65
log
@Selection Recovery
@
text
@d21 1
a21 1
#include <Opn.h>
@


1.64
log
@Stochastic Implosion
@
text
@d129 1
a129 1
template class WitPtrSched <WitRtSite,    WitPrPt>;
@


1.63
log
@Stochastic Implosion
@
text
@a26 1
#include <Scenario.h>
a139 1
template class WitPtrSched <WitScenario,  WitScenPer>;
@


1.62
log
@Stochastic Implosion
@
text
@a141 21

template
   class WitPtrSched <WitPart,      WitPtrMap <WitScenario, WitStScrapVar>   >;
template
   class WitPtrSched <WitMaterial,  WitPtrMap <WitScenario, WitStStockVar>   >;
template
   class WitPtrSched <WitOperation, WitPtrMap <WitScenario, WitStExecVar>    >;
template
   class WitPtrSched <WitDemand,    WitPtrMap <WitScenario, WitStShipVar>    >;
template
   class WitPtrSched <WitDemand,    WitPtrMap <WitScenario, WitStCumShipVar> >;
template
   class WitPtrSched <WitBomEntry,  WitPtrMap <WitScenario, WitStNonSubVar>  >;
template
   class WitPtrSched <WitSubEntry,  WitPtrMap <WitScenario, WitStSubVar>     >;
template
   class WitPtrSched <WitPart,      WitPtrMap <WitScenario, WitStResCon>     >;
template
   class WitPtrSched <WitDemand,    WitPtrMap <WitScenario, WitStShipCon>    >;
template
   class WitPtrSched <WitBomEntry,  WitPtrMap <WitScenario, WitStSubCon>     >;
@


1.61
log
@Stochastic Implosion
@
text
@d154 4
d161 2
@


1.60
log
@Stochastic Implosion
@
text
@d146 2
@


1.59
log
@Stochastic Implosion
@
text
@d144 1
a144 1
   class WitPtrSched <WitPart,      WitPtrMap <WitScenario, WitStScrapVar> >;
d146 1
a146 1
   class WitPtrSched <WitOperation, WitPtrMap <WitScenario, WitStExecVar>  >;
d148 7
a154 1
   class WitPtrSched <WitPart,      WitPtrMap <WitScenario, WitStResCon>   >;
@


1.58
log
@Stochastic Implosion
@
text
@a125 3
template class WitPtrSched <WitPart,      WitStScrapVar>;
template class WitPtrSched <WitOperation, WitStExecVar>;
template class WitPtrSched <WitPart,      WitStResCon>;
d142 7
@


1.57
log
@Stochastic Implosion
@
text
@d128 1
@


1.56
log
@Stochastic Implosion
@
text
@d126 1
@


1.55
log
@Stochastic Implosion
@
text
@d27 1
d142 1
@


1.54
log
@Stochastic Implosion
@
text
@d125 1
@


1.53
log
@Stochastic Implosion
@
text
@d36 3
a38 1
   ifDebug (DomEl * theDomEl);
d40 2
a41 1
   ifDebug (DomEl::verifyMappingIndex (theDomEl));
@


1.52
log
@Stochastic Implosion
@
text
@d13 1
a13 1
// Contains the implementation of class template PtrSched <DomEl, RangeEl>.
@


1.51
log
@Removed optimizing implosion with lot sizes.
@
text
@d69 1
a69 1
      myPtrVec_ (theIdx).allocate (theProblem);
@


1.50
log
@execVol pegging for BOP entries.
@
text
@a114 2
template class WitPtrSched <WitOperation, WitIlsMultVar>;
template class WitPtrSched <WitOperation, WitMlsMultVar>;
a121 2
template class WitPtrSched <WitOperation, WitLotSizeCon>;
template class WitPtrSched <WitOperation, WitMlsCon>;
@


1.49
log
@GPIP migration.
@
text
@d138 1
@


1.48
log
@Updated the copyright date on all source files.
@
text
@d135 2
a136 2
template class WitPtrSched <WitPart,      WitGpipReqList>;
template class WitPtrSched <WitBopEntry,  WitGpipReqList>;
@


1.47
log
@GPIP
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.46
log
@GPIP
@
text
@a134 1
template class WitPtrSched <WitBopEntry,  WitVector <int> >;
@


1.45
log
@[shared-resource pegging]
@
text
@d136 2
a137 2
template class WitPtrSched <WitPart,      WitSrpReqList>;
template class WitPtrSched <WitBopEntry,  WitSrpReqList>;
@


1.44
log
@[shared-resource pegging]
@
text
@a135 2
template class WitPtrSched <WitDemand,    WitPipTarg>;
template class WitPtrSched <WitDemand,    WitTripStack <WitOperation> >;
d138 3
@


1.43
log
@[shared-resource pegging]
@
text
@d136 1
a136 1
template class WitPtrSched <WitDemand,    WitUrpTarg>;
@


1.42
log
@[shared-resource pegging]
@
text
@d64 1
a64 1
   WitSiz theIdx;
d100 1
a100 1
   WitSiz theIdx;
@


1.41
log
@[shared-resource pegging]
@
text
@d64 1
a64 1
   size_t theIdx;
d100 1
a100 1
   size_t theIdx;
@


1.40
log
@[shared-resource pegging]
@
text
@d138 2
a139 2
template class WitPtrSched <WitPart,      WitSrpReqPairStack>;
template class WitPtrSched <WitBopEntry,  WitSrpReqPairStack>;
@


1.39
log
@[shared-resource pegging]
@
text
@d139 1
@


1.38
log
@[shared-resource pegging]
@
text
@d138 1
a138 1
template class WitPtrSched <WitPart,      WitSrpReqSet>;
@


1.37
log
@[shared-resource pegging]
@
text
@d138 1
a138 1
template class WitPtrSched <WitPart,      WitSrpReqList>;
@


1.36
log
@[shared-resource pegging]
@
text
@d138 1
a138 1
template class WitPtrSched <WitPart,      WitSrpReqSpec>;
@


1.35
log
@[shared-resource pegging]
@
text
@a137 1
template class WitPtrSched <WitPart,      WitDemand>;
@


1.34
log
@[shared-resource pegging]
@
text
@d139 1
@


1.33
log
@[shared-resource pegging]
@
text
@d138 1
@


1.32
log
@[shared-resource pegging]
@
text
@d137 1
@


1.31
log
@[shared-resource pegging]
@
text
@a136 3
template class WitPtrSched <WitPart,      WitDblDblStack>;
template class WitPtrSched <WitDemand,    WitDblDblStack>;
template class WitPtrSched <WitBomEntry,  WitDblDblStack>;
@


1.30
log
@[shared-resource peging]
@
text
@a139 1
template class WitPtrSched <WitPart,      WitSrpFillMethDblStack>;
@


1.29
log
@[shared-resource pegging]
@
text
@d140 1
a140 2

template class WitPtrSched <WitPart, WitPairStack <WitSrpFillMeth, double> >;
@


1.28
log
@[shared-resource pegging]
@
text
@d140 2
@


1.27
log
@[shared-resource pegging]
@
text
@d139 1
a139 1

@


1.26
log
@[shared-resource pegging]
@
text
@d138 1
@


1.25
log
@[shared-resource pegging]
@
text
@d137 1
@


1.24
log
@Revised mappingIndex code.
@
text
@d136 1
a136 1
template class WitPtrSched <WitDemand,    WitPipTarg>;
@


1.23
log
@Tie Breaking Prop-Rt.
@
text
@a26 1
#include <MapIdxI.h>
@


1.22
log
@Low-Pri Prop-Rt.
@
text
@d137 1
a137 1
template class WitPtrSched <WitDemand,    WitPip::Targ>;
@


1.21
log
@Low-Pri Prop-Rt.
@
text
@a130 2
template class WitPtrSched <WitRtSite,    WitPoBrPt>;
template class WitPtrSched <WitRtCand,    WitPoPt>;
@


1.20
log
@Low-Pri Prop-Rt.
@
text
@d134 1
a134 1
template class WitPtrSched <WitRtCand,    WitPrAlt>;
@


1.19
log
@Low-Pri Prop-Rt.
@
text
@d134 1
@


1.18
log
@Low-Pri Prop-Rt.
@
text
@d133 1
@


1.17
log
@Low-Pri Prop-Rt.
@
text
@d127 1
a127 1
template class WitPtrSched <WitBopEntry,  WitMeCoordPt>;
@


1.16
log
@Continued implementation of PIP.
@
text
@d131 2
a132 2
template class WitPtrSched <WitRtSite,    WitPrBrPt>;
template class WitPtrSched <WitRtCand,    WitPrPt>;
@


1.15
log
@Continued implementation of PIP.
@
text
@a136 3
template class WitPtrSched <WitPart,      WitPerPair <WitPart>      >;
template class WitPtrSched <WitOperation, WitPerPair <WitOperation> >;
template class WitPtrSched <WitSubEntry,  WitPerPair <WitSubEntry>  >;
@


1.14
log
@Continued implementation of PIP.
@
text
@d137 3
a139 1

a141 3
template class WitPtrSched <WitPart,      WitPip::Src <WitPart>      >;
template class WitPtrSched <WitOperation, WitPip::Src <WitOperation> >;
template class WitPtrSched <WitSubEntry,  WitPip::Src <WitSubEntry>  >;
@


1.13
log
@Continued implementation of PIP.
@
text
@d138 1
a138 1
template class WitPtrSched <WitDemand,    WitPIP::WitPipTarg>;
d140 3
a142 3
template class WitPtrSched <WitPart,      WitPIP::WitPipSrc <WitPart>      >;
template class WitPtrSched <WitOperation, WitPIP::WitPipSrc <WitOperation> >;
template class WitPtrSched <WitSubEntry,  WitPIP::WitPipSrc <WitSubEntry>  >;
@


1.12
log
@Continued implementation of Post-Implosion Pegging.
@
text
@a136 1
template class WitPtrSched <WitDemand,    WitPipTarg>;
d138 5
a142 3
template class WitPtrSched <WitPart,      WitPipSrc <WitPart>      >;
template class WitPtrSched <WitOperation, WitPipSrc <WitOperation> >;
template class WitPtrSched <WitSubEntry,  WitPipSrc <WitSubEntry>  >;
@


1.11
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d136 1
d138 4
a141 3
template class WitPtrSched <WitPart,      WitPartPipSrc>;
template class WitPtrSched <WitOperation, WitOpnPipSrc>;
template class WitPtrSched <WitBopEntry,  WitVector <int> >;
@


1.10
log
@Continued implementation of post-implosion pegging.
@
text
@d138 1
@


1.9
log
@Continued implementation of post-implosion pegging.
@
text
@d137 1
a137 1
template class WitPtrSched <WitPart,      WitPipSrc>;
@


1.8
log
@Continued implementation of post-implosion pegging.
@
text
@d138 1
@


1.7
log
@Continued implementation of post-implosion pegging.
@
text
@d137 1
@


1.6
log
@Continued implementation of post-implosion pegging.
@
text
@d136 1
a136 1
template class WitPtrSched <WitDemand,    WitPIPegTarg>;
@


1.5
log
@Corrected a file inclusion AIX porting bug.
@
text
@d27 1
@


1.4
log
@Continued implementation of post-implosion pegging.
@
text
@a26 1
#include <MapIdxI.h>
@


1.3
log
@Continued implementation of post-implosion pegging.
@
text
@d27 1
a106 22
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs>
      WitPtrTVec <RangeEl> & WitPtrSched <PtrSchedArgs>::myPtrTVecAt (
         const DomEl * theDomEl)
   {
   witAssert (theDomEl != NULL);

   return myPtrVec_ (theDomEl->mappingIndex ());
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs>
      const WitPtrTVec <RangeEl> & WitPtrSched <PtrSchedArgs>::myPtrTVecAt (
         const DomEl * theDomEl) const
   {
   witAssert (theDomEl != NULL);

   return myPtrVec_ (theDomEl->mappingIndex ());
@


1.2
log
@Continued implementation of post-implosion pegging.
@
text
@d157 1
@


1.1
log
@Continued implementation of post-implosion pegging.
@
text
@d111 1
a111 32
      inline RangeEl & WitPtrSched <PtrSchedArgs>::myElemAt (
         const DomEl * theDomEl, 
         WitPeriod     thePer)
   {
   return * myPtrAt (theDomEl, thePer);
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs>
      inline RangeEl * & WitPtrSched <PtrSchedArgs>::myPtrAt (
         const DomEl * theDomEl, 
         WitPeriod     thePer)
   {
   return myPtrTVecAt (theDomEl)[thePer];
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs>
      inline RangeEl * WitPtrSched <PtrSchedArgs>::myPtrAt (
         const DomEl * theDomEl, 
         WitPeriod     thePer)
         const
   {
   return myPtrTVecAt (theDomEl)[thePer];
   }

//------------------------------------------------------------------------------

template <PtrSchedArgDecs>
      inline WitPtrTVec <RangeEl> & WitPtrSched <PtrSchedArgs>::myPtrTVecAt (
d122 2
a123 2
      inline const WitPtrTVec <RangeEl> &
         WitPtrSched <PtrSchedArgs>::myPtrTVecAt (const DomEl * theDomEl) const
@

