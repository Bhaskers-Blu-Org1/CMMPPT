head	1.42;
access;
symbols
	sce_5_01_20080919:1.38;
locks; strict;
comment	@ * @;


1.42
date	2011.09.28.23.50.08;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2011.09.24.00.28.33;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2011.08.30.20.18.07;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2009.12.25.00.10.47;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2008.01.28.23.53.37;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.01.25.00.19.22;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.01.15.23.37.25;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2008.01.08.15.53.30;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.01.04.20.25.28;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2007.12.06.22.01.22;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2007.12.05.22.13.09;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2007.12.04.00.18.47;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2007.12.04.00.07.15;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.12.03.19.41.34;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2007.11.29.16.24.43;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2007.11.28.23.23.47;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.11.28.20.34.28;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.11.27.23.09.44;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.11.27.21.05.01;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.11.26.23.15.18;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.10.11.19.16.57;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.10.08.18.56.35;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.10.02.18.32.43;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.10.01.19.52.16;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.09.28.22.08.26;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.09.26.22.52.52;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.09.26.20.54.40;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.09.26.16.06.38;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.09.26.14.36.17;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.09.25.21.03.03;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.09.21.23.06.08;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.09.21.18.45.20;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.09.21.17.47.13;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.09.21.16.44.41;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.09.21.14.47.32;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.20.22.17.57;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.09.20.20.58.25;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.09.20.18.46.16;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.18.20.12.58;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.18.18.43.14;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.09.17.21.51.16;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.09.17.21.46.32;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.42
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ScenInputAttH
#define ScenInputAttH

//------------------------------------------------------------------------------
// Header file: "ScenInputAtt.h"
//
// Contains the declaration of the following classes and templates:
//
//    AbsScenInputAtt
//    ScenInputAtt <Owner>
//------------------------------------------------------------------------------

#include <StochAssoc.h>

//------------------------------------------------------------------------------
// Class AbsScenInputAtt
//
// "Abstract Scenario-Specific Input Attribute"
// Abstract interface to an object that stores and manages data for the
// stochastic version of an input attribute that exists in deterministic mode,
// but becomes Scenario-specific in stochastic mode.
//
// Class hierarchy:
//
//    ProbAssoc
//       StochAssoc
//          AbsScenInputAtt
//             ScenInputAtt <Owner>
//
// Implemented in ScenAtt.C
//------------------------------------------------------------------------------

class WitAbsScenInputAtt: public WitStochAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitAbsScenInputAtt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void prepSet (WitDelComp * theDelComp) = 0;
         //
         // Takes action appropriate just before the value of the attribute is
         // to be set for theDelComp.

      virtual void prepSet (WitBoundSet * theBoundSet) = 0;
         //
         // Takes action appropriate just before the value of the attribute is
         // to be set for theBoundSet.

      virtual void downloadData (WitScenario * theScenario) = 0;
         //
         // Downloads the attribute value from each of the owners into this
         // AbsScenInputAtt for theScenario.

      virtual void uploadData (WitScenario * theScenario) = 0;
         //
         // Uploads the attribute value to each of the owners from this
         // AbsScenInputAtt for theScenario.
         // Valid only when the stochastic implosion subsystem is uploading
         // data.

      virtual void copyDataFrom (WitScenAttMgr * srcScenAttMgr) = 0;
         //
         // Copies into this AbsScenInputAtt the contents of the corresponding
         // AbsScenInputAtt that belongs to srcScenAttMgr.
         // It is assumed that srcScenAttMgr and this AbsScenInputAtt belong to
         // WitRuns whose Component set, # Scenarios, and # Periods match.

      virtual void writeData (
            WitComponent * theComp,
            WitScenario *  theScenario,
            bool           diffedSec,
            bool &         attWritten) = 0;
         //
         // Writes the section of the input data file for this AbsScenInputAtt
         // with respect to theComp and theScenario, if appropriate.
         // On entry, attWritten is true, iff an attribute has already been
         // written for theComp; if this function writes its attribute,
         // attWritten is set to true.
         // diffedSec indicates whether attributes are being written in the
         // differentiated section or the undifferentiated of the file.

      virtual void writeData (WitBoundSet *, WitScenario *, bool, bool &) = 0;
         //
         // Same as writeData (Component *, Scenario *, bool &), but for a
         // BoundSet.

      virtual bool ownedByBoundSet () = 0;
         //
         // Returns true, iff the attribute is owned by a BoundSet and not a
         // Component.

      virtual void validateData () = 0;
         //
         // Verifies that the values of the attribute are valid for a stochastic
         // implosion.

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAbsScenInputAtt (WitScenAttMgr *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitAbsScenInputAtt);
   };

//------------------------------------------------------------------------------
// Class Template ScenInputAtt <Owner>
//
// "Scenario-Specific Input Attribute"
// Stores and manages data for the stochastic version of an input attribute that
// exists in deterministic mode, but becomes Scenario-specific in stochastic
// mode.
//
// Template argument:
//    Owner: The class whose instances own the deterinistic version of the
//           attribute.
//
// Class hierarchy:
//
//    ProbAssoc
//       StochAssoc
//          AbsScenInputAtt
//             ScenInputAtt <Owner>
//
// Implemented in ScenAtt.C
//------------------------------------------------------------------------------

template <typename Owner>
      class WitScenInputAtt: private WitAbsScenInputAtt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitScenInputAtt (
         WitScenAttMgr *                     theScenAttMgr,
         const char *                        theAttName,
         double                              theDefaultVal,
         const WitDblFlexVec & (Owner::*     theAccFunc) () const,
         void (Owner::*                      theStoreFunc) (
                                                const WitDblFlexVec &),
         WitScenInputAtt * (WitScenAttMgr::* theInstFunc) () const);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      const WitDblFlexVec & myValueFor (Owner *, WitScenario *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitScenInputAtt ();

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual void prepSet      (WitDelComp *);
      virtual void prepSet      (WitBoundSet *);
      virtual void downloadData (WitScenario *);
      virtual void uploadData   (WitScenario *);
      virtual void copyDataFrom (WitScenAttMgr *);
      virtual void writeData    (WitComponent *, WitScenario *, bool, bool &);
      virtual void writeData    (WitBoundSet *,  WitScenario *, bool, bool &);

      virtual bool ownedByBoundSet ();
      virtual void validateData    ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      void prepSetForOwner (Owner * theOwner);
         //
         // Takes action appropriate just before the value of the attribute is
         // to be set for theOwner.

      static Owner * theOwnerFor (WitComponent * theComp);
         //
         // Returns the Owner corresponding to theComp.
         // Implemented using template specialization.
         // Not allowed if Owner is BoundSet.

      void writeDataForOwner (
            Owner *        theOwner,
            WitScenario *  theScenario,
            bool           diffedSec,
            bool &         attWritten);
         //
         // Writes the section of the input data file for this ScenInputAtt
         // with respect to theOwner and theScenario, if appropriate.
         // On entry, attWritten is true, iff an attribute has already been
         // written for theComp; if this function writes its attribute,
         // attWritten is set to true.
         // diffedSec indicates whether attributes are being written in the
         // differentiated section or the undifferentiated of the file.

      WitNode * stageNode (Owner * theOwner);
         //
         // Returns the Node whose stage determines the stage for theOwner.

      void checkSameInAllScenarios (Owner * theOwner, WitPeriod thePer);
         //
         // Verifies that the value of the attribute for theOwner in thePer is
         // the same in all Scenarios.

      void issueMisMatchOwnerMsg (Owner * theOwner);
         //
         // Issues a msg identifying theOwner for a stage 0 attribute mismatch
         // situation.
         // Implemented using template specialization.

      bool isDiffedAt (Owner * theOwner);
         //
         // Returns true, iff the attribute is considered to be differentiated
         // at theOwner.

      noCopyCtorAssign (WitScenInputAtt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitScenAtt <Owner> * myScenAtt_;
         //
         // The ScenAtt owned by this ScenInputAtt when the attribute is
         // differentiated; otherwise NULL.
         // The attribute is considered to be differentiated, iff its value
         // for at least one Owner has been set at least once since stochactic
         // mode was entered.

      const char * const myAttName_;
         //
         // The name of the attribute.

      const double myDefaultVal_;
         //
         // The default value of the attribute.

      const WitDblFlexVec & (Owner::* const myAccFunc_) () const;
         //
         // The access function for the attribute.

      void (Owner::* const myStoreFunc_) (const WitDblFlexVec &);
         //
         // The member function of the Owner class that sets the value of the
         // Owner's version of the attribute represented by this ScenInputAtt to
         // the value of the argument.
         // The function is expected to be valid only when the stochastic
         // implosion subsystem is uploading data.

      WitScenInputAtt * (WitScenAttMgr::* const myInstFunc_) () const;
         //
         // The member function of class ScenAttMgr that returns the
         // ScenInputAtt that belongs to the ScenAttMgr and corresponds to this
         // ScenInputAtt.
   };

#endif
@


1.41
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.40
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d43 2
a44 6
{
public:

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d46 81
a126 1
virtual ~WitAbsScenInputAtt ();
d128 2
a129 78
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

virtual void prepSet (WitDelComp * theDelComp) = 0;
//
// Takes action appropriate just before the value of the attribute is
// to be set for theDelComp.

virtual void prepSet (WitBoundSet * theBoundSet) = 0;
//
// Takes action appropriate just before the value of the attribute is
// to be set for theBoundSet.

virtual void downloadData (WitScenario * theScenario) = 0;
//
// Downloads the attribute value from each of the owners into this
// AbsScenInputAtt for theScenario.

virtual void uploadData (WitScenario * theScenario) = 0;
//
// Uploads the attribute value to each of the owners from this
// AbsScenInputAtt for theScenario.
// Valid only when the stochastic implosion subsystem is uploading
// data.

virtual void copyDataFrom (WitScenAttMgr * srcScenAttMgr) = 0;
//
// Copies into this AbsScenInputAtt the contents of the corresponding
// AbsScenInputAtt that belongs to srcScenAttMgr.
// It is assumed that srcScenAttMgr and this AbsScenInputAtt belong to
// WitRuns whose Component set, # Scenarios, and # Periods match.

virtual void writeData (
WitComponent * theComp,
WitScenario *  theScenario,
bool           diffedSec,
bool &         attWritten) = 0;
//
// Writes the section of the input data file for this AbsScenInputAtt
// with respect to theComp and theScenario, if appropriate.
// On entry, attWritten is true, iff an attribute has already been
// written for theComp; if this function writes its attribute,
// attWritten is set to true.
// diffedSec indicates whether attributes are being written in the
// differentiated section or the undifferentiated of the file.

virtual void writeData (WitBoundSet *, WitScenario *, bool, bool &) = 0;
//
// Same as writeData (Component *, Scenario *, bool &), but for a
// BoundSet.

virtual bool ownedByBoundSet () = 0;
//
// Returns true, iff the attribute is owned by a BoundSet and not a
// Component.

virtual void validateData () = 0;
//
// Verifies that the values of the attribute are valid for a stochastic
// implosion.

protected:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitAbsScenInputAtt (WitScenAttMgr *);

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitAbsScenInputAtt);
};
d154 139
a292 139
class WitScenInputAtt: private WitAbsScenInputAtt
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitScenInputAtt (
WitScenAttMgr *                     theScenAttMgr,
const char *                        theAttName,
double                              theDefaultVal,
const WitDblFlexVec & (Owner::*     theAccFunc) () const,
void (Owner::*                      theStoreFunc) (
const WitDblFlexVec &),
WitScenInputAtt * (WitScenAttMgr::* theInstFunc) () const);

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

const WitDblFlexVec & myValueFor (Owner *, WitScenario *);

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitScenInputAtt ();

//-----------------------------------------------------------------------
// Overriding private virtual member functions.
//-----------------------------------------------------------------------

virtual void prepSet      (WitDelComp *);
virtual void prepSet      (WitBoundSet *);
virtual void downloadData (WitScenario *);
virtual void uploadData   (WitScenario *);
virtual void copyDataFrom (WitScenAttMgr *);
virtual void writeData    (WitComponent *, WitScenario *, bool, bool &);
virtual void writeData    (WitBoundSet *,  WitScenario *, bool, bool &);

virtual bool ownedByBoundSet ();
virtual void validateData    ();

//------------------------------------------------------------------------
// Other private member functions.
//------------------------------------------------------------------------

void prepSetForOwner (Owner * theOwner);
//
// Takes action appropriate just before the value of the attribute is
// to be set for theOwner.

static Owner * theOwnerFor (WitComponent * theComp);
//
// Returns the Owner corresponding to theComp.
// Implemented using template specialization.
// Not allowed if Owner is BoundSet.

void writeDataForOwner (
Owner *        theOwner,
WitScenario *  theScenario,
bool           diffedSec,
bool &         attWritten);
//
// Writes the section of the input data file for this ScenInputAtt
// with respect to theOwner and theScenario, if appropriate.
// On entry, attWritten is true, iff an attribute has already been
// written for theComp; if this function writes its attribute,
// attWritten is set to true.
// diffedSec indicates whether attributes are being written in the
// differentiated section or the undifferentiated of the file.

WitNode * stageNode (Owner * theOwner);
//
// Returns the Node whose stage determines the stage for theOwner.

void checkSameInAllScenarios (Owner * theOwner, WitPeriod thePer);
//
// Verifies that the value of the attribute for theOwner in thePer is
// the same in all Scenarios.

void issueMisMatchOwnerMsg (Owner * theOwner);
//
// Issues a msg identifying theOwner for a stage 0 attribute mismatch
// situation.
// Implemented using template specialization.

bool isDiffedAt (Owner * theOwner);
//
// Returns true, iff the attribute is considered to be differentiated
// at theOwner.

noCopyCtorAssign (WitScenInputAtt);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitScenAtt <Owner> * myScenAtt_;
//
// The ScenAtt owned by this ScenInputAtt when the attribute is
// differentiated; otherwise NULL.
// The attribute is considered to be differentiated, iff its value
// for at least one Owner has been set at least once since stochactic
// mode was entered.

const char * const myAttName_;
//
// The name of the attribute.

const double myDefaultVal_;
//
// The default value of the attribute.

const WitDblFlexVec & (Owner::* const myAccFunc_) () const;
//
// The access function for the attribute.

void (Owner::* const myStoreFunc_) (const WitDblFlexVec &);
//
// The member function of the Owner class that sets the value of the
// Owner's version of the attribute represented by this ScenInputAtt to
// the value of the argument.
// The function is expected to be valid only when the stochastic
// implosion subsystem is uploading data.

WitScenInputAtt * (WitScenAttMgr::* const myInstFunc_) () const;
//
// The member function of class ScenAttMgr that returns the
// ScenInputAtt that belongs to the ScenAttMgr and corresponds to this
// ScenInputAtt.
};
@


1.39
log
@Multi-Objective Mode
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d43 6
a48 2
   {
   public:
d50 1
a50 81
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitAbsScenInputAtt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void prepSet (WitDelComp * theDelComp) = 0;
         //
         // Takes action appropriate just before the value of the attribute is
         // to be set for theDelComp.

      virtual void prepSet (WitBoundSet * theBoundSet) = 0;
         //
         // Takes action appropriate just before the value of the attribute is
         // to be set for theBoundSet.

      virtual void downloadData (WitScenario * theScenario) = 0;
         //
         // Downloads the attribute value from each of the owners into this
         // AbsScenInputAtt for theScenario.

      virtual void uploadData (WitScenario * theScenario) = 0;
         //
         // Uploads the attribute value to each of the owners from this
         // AbsScenInputAtt for theScenario.
         // Valid only when the stochastic implosion subsystem is uploading
         // data.

      virtual void copyDataFrom (WitScenAttMgr * srcScenAttMgr) = 0;
         //
         // Copies into this AbsScenInputAtt the contents of the corresponding
         // AbsScenInputAtt that belongs to srcScenAttMgr.
         // It is assumed that srcScenAttMgr and this AbsScenInputAtt belong to
         // WitRuns whose Component set, # Scenarios, and # Periods match.

      virtual void writeData (
            WitComponent * theComp,
            WitScenario *  theScenario,
            bool           diffedSec,
            bool &         attWritten) = 0;
         //
         // Writes the section of the input data file for this AbsScenInputAtt
         // with respect to theComp and theScenario, if appropriate.
         // On entry, attWritten is true, iff an attribute has already been
         // written for theComp; if this function writes its attribute,
         // attWritten is set to true.
         // diffedSec indicates whether attributes are being written in the
         // differentiated section or the undifferentiated of the file.

      virtual void writeData (WitBoundSet *, WitScenario *, bool, bool &) = 0;
         //
         // Same as writeData (Component *, Scenario *, bool &), but for a
         // BoundSet.

      virtual bool ownedByBoundSet () = 0;
         //
         // Returns true, iff the attribute is owned by a BoundSet and not a
         // Component.

      virtual void validateData () = 0;
         //
         // Verifies that the values of the attribute are valid for a stochastic
         // implosion.

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAbsScenInputAtt (WitScenAttMgr *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d52 78
a129 2
      noCopyCtorAssign (WitAbsScenInputAtt);
   };
d154 139
a292 139
      class WitScenInputAtt: private WitAbsScenInputAtt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitScenInputAtt (
         WitScenAttMgr *                     theScenAttMgr,
         const char *                        theAttName,
         double                              theDefaultVal,
         const WitDblFlexVec & (Owner::*     theAccFunc) () const,
         void (Owner::*                      theStoreFunc) (
                                                const WitDblFlexVec &),
         WitScenInputAtt * (WitScenAttMgr::* theInstFunc) () const);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      const WitDblFlexVec & myValueFor (Owner *, WitScenario *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitScenInputAtt ();

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual void prepSet      (WitDelComp *);
      virtual void prepSet      (WitBoundSet *);
      virtual void downloadData (WitScenario *);
      virtual void uploadData   (WitScenario *);
      virtual void copyDataFrom (WitScenAttMgr *);
      virtual void writeData    (WitComponent *, WitScenario *, bool, bool &);
      virtual void writeData    (WitBoundSet *,  WitScenario *, bool, bool &);

      virtual bool ownedByBoundSet ();
      virtual void validateData    ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      void prepSetForOwner (Owner * theOwner);
         //
         // Takes action appropriate just before the value of the attribute is
         // to be set for theOwner.

      static Owner * theOwnerFor (WitComponent * theComp);
         //
         // Returns the Owner corresponding to theComp.
         // Implemented using template specialization.
         // Not allowed if Owner is BoundSet.

      void writeDataForOwner (
            Owner *        theOwner,
            WitScenario *  theScenario,
            bool           diffedSec,
            bool &         attWritten);
         //
         // Writes the section of the input data file for this ScenInputAtt
         // with respect to theOwner and theScenario, if appropriate.
         // On entry, attWritten is true, iff an attribute has already been
         // written for theComp; if this function writes its attribute,
         // attWritten is set to true.
         // diffedSec indicates whether attributes are being written in the
         // differentiated section or the undifferentiated of the file.

      WitNode * stageNode (Owner * theOwner);
         //
         // Returns the Node whose stage determines the stage for theOwner.

      void checkSameInAllScenarios (Owner * theOwner, WitPeriod thePer);
         //
         // Verifies that the value of the attribute for theOwner in thePer is
         // the same in all Scenarios.

      void issueMisMatchOwnerMsg (Owner * theOwner);
         //
         // Issues a msg identifying theOwner for a stage 0 attribute mismatch
         // situation.
         // Implemented using template specialization.

      bool isDiffedAt (Owner * theOwner);
         //
         // Returns true, iff the attribute is considered to be differentiated
         // at theOwner.

      noCopyCtorAssign (WitScenInputAtt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitScenAtt <Owner> * myScenAtt_;
         //
         // The ScenAtt owned by this ScenInputAtt when the attribute is
         // differentiated; otherwise NULL.
         // The attribute is considered to be differentiated, iff its value
         // for at least one Owner has been set at least once since stochactic
         // mode was entered.

      const char * const myAttName_;
         //
         // The name of the attribute.

      const double myDefaultVal_;
         //
         // The default value of the attribute.

      const WitDblFlexVec & (Owner::* const myAccFunc_) () const;
         //
         // The access function for the attribute.

      void (Owner::* const myStoreFunc_) (const WitDblFlexVec &);
         //
         // The member function of the Owner class that sets the value of the
         // Owner's version of the attribute represented by this ScenInputAtt to
         // the value of the argument.
         // The function is expected to be valid only when the stochastic
         // implosion subsystem is uploading data.

      WitScenInputAtt * (WitScenAttMgr::* const myInstFunc_) () const;
         //
         // The member function of class ScenAttMgr that returns the
         // ScenInputAtt that belongs to the ScenAttMgr and corresponds to this
         // ScenInputAtt.
   };
@


1.38
log
@Stochastic Implosion
@
text
@a232 5
      void writeSetClause (Owner * theOwner);
         //
         // Writes a "set" clause for theOwner to an input data file.
         // Implemented using template specialization.

@


1.37
log
@Stochastic Implosion
@
text
@d238 4
@


1.36
log
@Stochastic Implosion
@
text
@d22 1
a22 1
#include <Assoc.h>
d35 3
a37 2
//       AbsScenInputAtt
//          ScenInputAtt <Owner>
d42 1
a42 1
class WitAbsScenInputAtt: public WitProbAssoc
d146 3
a148 2
//       AbsScenInputAtt
//          ScenInputAtt <Owner>
a292 8

      WitStochModeMgr * const myStochModeMgr_;
         //
         // The StochModeMgr for this ScenInputAtt.

      WitScenMgr * const myScenMgr_;
         //
         // The ScenMgr for this ScenInputAtt.
@


1.35
log
@Stochastic Implosion
@
text
@d111 1
a111 2
         // implosion. Specifically, verifies that the value of the attribute
         // for each stage 0 Owner is the same in all Scenarios.
d236 5
d292 1
a292 1
      WitScenAttMgr * const myScenAttMgr_;
d294 1
a294 1
         // The ScenAttMgr that owns this ScenInputAtt.
@


1.34
log
@Stochastic Implosion
@
text
@d288 1
a288 1
      WitStochModeMgr * const myStochModeMgr_;
d290 5
a294 1
         // The StochModeMgr for this ScenInputAtt.
@


1.33
log
@Stochastic Implosion
@
text
@d108 6
d201 1
d245 1
a245 1
         // Returns true, iff the attribute is considered to be diffirentiated
@


1.32
log
@Stochastic Implosion
@
text
@d77 1
a77 1
      virtual void copyDataFrom (WitScenAttMgr * thatScenAttMgr) = 0;
d80 2
a81 2
         // AbsScenInputAtt that belongs to thatScenAttMgr.
         // It is assumed that thatScenAttMgr and this AbsScenInputAtt belong to
a240 2
      accessNonNull (WitScenAtt <Owner> *, myScenAtt)

@


1.31
log
@Stochastic Implosion
@
text
@d55 1
a55 1
      virtual void prepSet () = 0;
d58 6
a63 1
         // to be set.
d186 2
a187 1
      virtual void prepSet      ();
d200 5
d211 14
a228 1
         // Not allowed if Owner is BoundSet.
d236 7
d251 5
a255 1
         // The ScenAtt owned by this ScenInputAtt.
a285 6

      bool active_;
         //
         // True, iff this ScenInputAtt is currently in an active state, which
         // is the case, iff the value of the attribute has been set at least
         // once since stochactic mode was entered.
@


1.30
log
@Stochastic Implosion
@
text
@d82 1
a82 1
            bool           diffedAtt,
d90 2
a91 3
         // The attributes is written only if it is:
         //    Differentiated,   if diffedAtt is true
         //    Undifferentiated, if diffedAtt is false.
@


1.29
log
@Stochastic Implosion
@
text
@d82 1
d90 3
d94 1
a94 1
      virtual void writeData (WitBoundSet *, WitScenario *, bool &) = 0;
d182 7
a188 6
      virtual void prepSet         ();
      virtual void downloadData    (WitScenario *);
      virtual void uploadData      (WitScenario *);
      virtual void copyDataFrom    (WitScenAttMgr *);
      virtual void writeData       (WitComponent *, WitScenario *, bool &);
      virtual void writeData       (WitBoundSet *,  WitScenario *, bool &);
@


1.28
log
@Stochastic Implosion
@
text
@d55 5
d178 1
d247 6
@


1.27
log
@Stochastic Implosion
@
text
@a189 5
      int stageIndex (Owner * theOwner);
         //
         // Returns the stage index for theOwner.
         // Not allowed if Owner is BoundSet.

@


1.26
log
@Stochastic Implosion
@
text
@a76 1
            int            stageToWrite,
d80 1
a80 2
         // with respect to theComp and theScenario, if appropriate and if
         // theComp belongs to the stage indicated by stageToWrite.
d176 1
a176 1
      virtual void writeData       (WitComponent *, WitScenario *, int, bool &);
@


1.25
log
@Stochastic Implosion
@
text
@d77 1
d81 2
a82 1
         // with respect to theComp and theScenario, if appropriate.
d178 1
a178 1
      virtual void writeData       (WitComponent *, WitScenario *, bool &);
@


1.24
log
@Stochastic Implosion
@
text
@d90 5
d173 6
a178 5
      virtual void downloadData (WitScenario *);
      virtual void uploadData   (WitScenario *);
      virtual void copyDataFrom (WitScenAttMgr *);
      virtual void writeData    (WitComponent *, WitScenario *, bool &);
      virtual void writeData    (WitBoundSet *,  WitScenario *, bool &);
d188 1
d193 1
d199 1
@


1.23
log
@Stochastic Implosion
@
text
@d187 1
a187 1
      void writeDataSetClause (Owner * theOwner);
d234 1
a234 1
      WitScenMgr * const myScenMgr_;
d236 1
a236 1
         // The ScenMgr for this ScenInputAtt.
@


1.22
log
@Stochastic Implosion
@
text
@d183 4
@


1.21
log
@Stochastic Implosion
@
text
@a89 5
      virtual void checkValsInStage0 () = 0;
         //
         // Verifies that the attribute values of all stage 0 Owners match
         // between all Scenarios.

d168 5
a172 6
      virtual void downloadData      (WitScenario *);
      virtual void uploadData        (WitScenario *);
      virtual void copyDataFrom      (WitScenAttMgr *);
      virtual void writeData         (WitComponent *, WitScenario *, bool &);
      virtual void writeData         (WitBoundSet *,  WitScenario *, bool &);
      virtual void checkValsInStage0 ();
@


1.20
log
@Stochastic Implosion
@
text
@d28 3
a30 3
// Stores and manages data for the stochastic version of an input attribute that
// exists in deterministic mode, but becomes Scenario-specific in stochastic
// mode.
d55 1
a55 1
      virtual void downloadData () = 0;
d58 1
a58 1
         // AbsScenInputAtt.
d60 1
a60 1
      virtual void uploadData () = 0;
d63 1
a63 1
         // AbsScenInputAtt.
d67 1
a67 1
      virtual void copyDataFrom (WitScenario * thatScenario) = 0;
d70 8
a77 5
         // AbsScenInputAtt that belongs to thatScenario.
         // It is assumed that thatScenario and this AbsScenInputAtt belong to
         // WitRuns whose Component set and # Periods match.

      virtual void writeData (WitComponent * theComp, bool & attWritten) = 0;
d80 1
a80 1
         // with respect to theComp, if appropriate.
d85 1
a85 1
      virtual void writeData (WitBoundSet *, bool &) = 0;
d87 2
a88 1
         // Same as writeData (Component *, bool &), but for a BoundSet.
d90 1
a90 1
      virtual void checkValsInStage0 (WitScenario * thatScenario) = 0;
d93 1
a93 2
         // between this AbsScenInputAtt and the corresponding AbsScenInputAtt
         // belonging to thatScenario.
d101 1
a101 1
      WitAbsScenInputAtt (WitScenario *);
d143 7
a149 7
         WitScenario *                     theScenario,
         const char *                      theAttName,
         double                            theDefaultVal,
         const WitDblFlexVec & (Owner::*   theAccFunc) () const,
         void (Owner::*                    theStoreFunc) (
                                              const WitDblFlexVec &),
         WitScenInputAtt * (WitScenario::* theInstFunc) () const);
d155 1
a155 1
      const WitDblFlexVec & myValueFor (Owner *);
d173 6
a178 6
      virtual void downloadData      ();
      virtual void uploadData        ();
      virtual void copyDataFrom      (WitScenario *);
      virtual void writeData         (WitComponent *, bool &);
      virtual void writeData         (WitBoundSet *,  bool &);
      virtual void checkValsInStage0 (WitScenario *);
a183 6
      void issueMisMatchOwnerMsg (Owner * theOwner);
         //
         // Issues a msg identifying theOwner for a stage 0 attribute mismatch
         // situation.
         // Implemented using template specialization.

d194 6
a205 4
      WitScenario * const myScenario_;
         //
         // The Scenario that owns this ScenInputAtt.

d230 1
a230 1
      WitScenInputAtt * (WitScenario::* const myInstFunc_) () const;
d232 2
a233 2
         // The member function of class Scenario that returns the
         // ScenInputAtt that belongs to the Scenario and corresponds to this
d235 4
@


1.19
log
@Stochastic Implosion
@
text
@d145 1
a145 1
                                              const WitTVec <double> &),
d152 1
a152 1
      const WitTVec <double> & myValueFor (Owner *);
d223 1
a223 1
      void (Owner::* const myStoreFunc_) (const WitTVec <double> &);
@


1.18
log
@Stochastic Implosion
@
text
@d82 4
d174 1
@


1.17
log
@Stochastic Implosion
@
text
@d218 8
@


1.16
log
@Stochastic Implosion
@
text
@d74 1
a74 1
      virtual void writeData (WitComponent * theComp) = 0;
d78 3
d169 1
a169 1
      virtual void writeData         (WitComponent *);
d187 5
@


1.15
log
@Stochastic Implosion
@
text
@d74 5
d135 1
d166 1
d179 5
d202 4
@


1.14
log
@Stochastic Implosion
@
text
@d163 8
d178 4
a193 8
      void (Owner::* const myStoreFunc_) (const WitTVec <double> &);
         //
         // The member function of the Owner class that sets the value of the
         // Owner's version of the attribute represented by this ScenInputAtt to
         // the value of the argument.
         // The function is expected to be valid only when the stochastic
         // implosion subsystem is uploading data.

@


1.13
log
@Stochastic Implosion
@
text
@d119 1
a119 1
      class WitScenInputAtt: public WitAbsScenInputAtt
d136 12
d154 1
a154 1
      // Overriding public virtual member functions.
a162 10
      // Data access functions.
      //------------------------------------------------------------------------

      const WitTVec <double> & myValueFor (Owner *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
@


1.12
log
@Stochastic Implosion
@
text
@d55 1
a55 1
      virtual void downloadDataToCurScen () = 0;
d57 2
a58 2
         // Downloads the attribute value from each of the owners into the
         // current Scenario's portion of this AbsScenInputAtt.
d60 1
a60 1
      virtual void uploadDataFromCurScen () = 0;
d62 2
a63 2
         // Uploads the attribute value to each of the owners from the current
         // Scenario's portion of this AbsScenInputAtt.
d67 1
a67 1
      virtual void copyContentsFrom (WitScenAttMgr * theScenAttMgr) = 0;
d70 3
a72 3
         // AbsScenInputAtt that belongs to theScenAttMgr.
         // It is assumed that theScenAttMgr and this AbsScenInputAtt belong to
         // WitRuns whose Component set, # Scenarios, and # Periods match.
d74 1
a74 1
      virtual void checkValsInStage0 () = 0;
d77 2
a78 1
         // between all Scenarios.
d86 1
a86 1
      WitAbsScenInputAtt (WitScenAttMgr *);
d128 6
a133 6
         WitScenAttMgr *                     theScenAttMgr,
         const char *                        theAttName,
         const WitDblFlexVec & (Owner::*     theAccFunc) () const,
         void (Owner::*                      theStoreFunc) (
                                                const WitTVec <double> &),
         WitScenInputAtt * (WitScenAttMgr::* theInstFunc) () const);
d145 4
a148 4
      virtual void downloadDataToCurScen ();
      virtual void uploadDataFromCurScen ();
      virtual void copyContentsFrom      (WitScenAttMgr *);
      virtual void checkValsInStage0     ();
d154 1
a154 3
      const WitTVec <double> & myValue (
            Owner *       theOwner,
            WitScenario * theScenario);
a161 5
      void downloadDataTo (WitScenario * theScenario);
         //
         // Downloads the attribute value from each of the owners into
         // theScenario's portion of this AbsScenInputAtt.

a171 4
      WitStochModeMgr * const myStochModeMgr_;
         //
         // The StochModeMgr for this ScenInputAtt.

d188 1
a188 1
      WitScenInputAtt * (WitScenAttMgr::* const myInstFunc_) () const;
d190 2
a191 2
         // The member function of class ScenAttMgr that returns the
         // ScenInputAtt that belongs to the ScenAttMgr and corresponds to this
@


1.11
log
@Stochastic Implosion
@
text
@d74 5
a119 2
      friend class WitScenario;

d128 1
d147 1
d182 4
@


1.10
log
@Stochastic Implosion
@
text
@a116 19
      //------------------------------------------------------------------------
      // Local typedefs.
      //------------------------------------------------------------------------

      typedef const WitDblFlexVec & (Owner::* AccFunc) () const;
         //
         // An AccFunc is a member function of the Owner class that provides
         // read-only access to the Owner's version of attribute represented by
         // this ScenInputAtt.

      typedef void (Owner::* StoreFunc) (const WitTVec <double> & theValue);
         //
         // See ScenAtt <Owner>.

      typedef WitScenInputAtt <Owner> * (WitScenAttMgr::* InstFunc) () const;
         //
         // An InstFunc is a member function of class ScenAttMgr that returns a
         // ScenInputAtt <Owner>.

d123 6
a128 1
      WitScenInputAtt (WitScenAttMgr *, AccFunc, StoreFunc, InstFunc);
d177 1
a177 1
      const AccFunc myAccFunc_;
d181 1
a181 1
      const StoreFunc myStoreFunc_;
d189 1
a189 1
      const InstFunc myInstFunc_;
d192 2
a193 2
         // ScenInputAtt <Owner> that belongs to the ScenAttMgr and
         // corresponds to this ScenInputAtt <Owner>.
@


1.9
log
@Stochastic Implosion
@
text
@d129 1
a129 1
         // See ScenAttTable <Owner>.
d183 1
a183 1
      WitScenAttTable <Owner> * myTable_;
d185 1
a185 1
         // The ScenAttTable owned by this ScenInputAtt.
@


1.8
log
@Stochastic Implosion
@
text
@a81 6
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitStochModeMgr *, myStochModeMgr)

a88 8

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitStochModeMgr * const myStochModeMgr_;
         //
         // The StochModeMgr for this AbsScenInputAtt.
d187 4
d195 8
@


1.7
log
@Stochastic Implosion
@
text
@d18 2
a19 2
//    ScenInputAtt
//    ConcScenInputAtt <Owner>
d25 1
a25 1
// Class ScenInputAtt
d27 1
a27 1
// "Scenario-Specific Input Attribute"
d35 2
a36 2
//       ScenInputAtt
//          ConcScenInputAtt <Owner>
d41 1
a41 1
class WitScenInputAtt: public WitProbAssoc
d49 1
a49 1
      virtual ~WitScenInputAtt ();
d58 1
a58 1
         // current Scenario's portion of this ScenInputAtt.
d63 1
a63 1
         // Scenario's portion of this ScenInputAtt.
d69 3
a71 3
         // Copies into this ScenInputAtt the contents of the corresponding
         // ScenInputAtt that belongs to theScenAttMgr.
         // It is assumed that theScenAttMgr and this ScenInputAtt belong to
d80 1
a80 1
      WitScenInputAtt (WitScenAttMgr *);
d94 1
a94 1
      noCopyCtorAssign (WitScenInputAtt);
d102 1
a102 1
         // The StochModeMgr for this ScenSolnAtt.
d106 1
a106 1
// Class Template ConcScenInputAtt <Owner>
d108 1
a108 1
// "Concrete Scenario-Specific Input Attribute"
d120 2
a121 2
//       ScenInputAtt
//          ConcScenInputAtt <Owner>
d127 1
a127 1
      class WitConcScenInputAtt: public WitScenInputAtt
d139 1
a139 1
         // this ConcScenInputAtt.
d145 1
a145 2
      typedef
            WitConcScenInputAtt <Owner> * (WitScenAttMgr::* InstFunc) () const;
d148 1
a148 1
         // ConcScenInputAtt <Owner>.
d156 1
a156 1
      WitConcScenInputAtt (WitScenAttMgr *, AccFunc, StoreFunc, InstFunc);
d162 1
a162 1
      virtual ~WitConcScenInputAtt ();
d189 1
a189 1
         // theScenario's portion of this ScenInputAtt.
d191 1
a191 1
      noCopyCtorAssign (WitConcScenInputAtt);
d199 1
a199 1
         // The ScenAttTable owned by this ConcScenInputAtt.
d208 2
a209 2
         // ConcScenInputAtt <Owner> that belongs to the ScenAttMgr and
         // corresponds to this ConcScenInputAtt <Owner>.
@


1.6
log
@Stochastic Implosion.
@
text
@d173 8
@


1.5
log
@Stochastic Implosion
@
text
@d67 7
d137 1
a137 1
         // An AccFunc is an member function of the Owner class that provides
d145 6
d157 1
a157 1
      WitConcScenInputAtt (WitScenAttMgr *, AccFunc, StoreFunc);
d171 1
d197 6
@


1.4
log
@Stochastic Implosion
@
text
@d75 6
d88 8
@


1.3
log
@Stochastic Implosion
@
text
@d73 1
a73 1
      WitScenInputAtt (WitProblem *);
@


1.2
log
@Stochastic Implosion
@
text
@d122 1
a122 1
         // See ScenAtt <Owner>.
d162 1
a162 1
      WitScenAtt <Owner> * myScenAtt_;
d164 1
a164 1
         // The ScenAtt owned by this ConcScenInputAtt.
@


1.1
log
@Stochastic Implosion
@
text
@d22 1
a22 1
#include <ConcScenAtt.h>
@

