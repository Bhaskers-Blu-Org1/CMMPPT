head	1.16;
access;
symbols
	sce_5_01_20080919:1.13
	latest_sce_4_20_20060523:1.13.0.2
	sce_4_20_20060523:1.13
	latest_sce4_20_OSL:1.12.0.2
	sce_4_20_OSL:1.12
	sce_410_withVa:1.12
	sce_4_05_20040511:1.9;
locks; strict;
comment	@ * @;


1.16
date	2011.09.28.23.50.02;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.09.24.00.28.26;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.08.30.20.18.04;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2006.05.02.17.34.10;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2005.08.19.21.38.03;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2005.08.17.18.15.10;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2005.02.24.23.23.57;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.26.16.27.03;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.26.16.07.23;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.25.22.00.36;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.27.21.00.29;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.26.18.59.42;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.24.22.29.04;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.19.16.31.24;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.19.16.08.16;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.18.00.05.24;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef RealArgH
#define RealArgH

//------------------------------------------------------------------------------
// Header file: "RealArg.h"
//
// Contains the declaration of class RealArg.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class RealArg
//
// A base class for for classes whose instances are arguments to API functions
// where the underlying type of the argument is a type derived either from float
// or from double.
//
// Class Hierarchy:
//
// RealArg
//    ISRealArg
//    OSRealArg
//    IVRealArg
//    OVRealArg
//    OTDARealArg
//------------------------------------------------------------------------------

class WitRealArg
   {
   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitRealArg (bool);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitRealArg ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, floatCase)

      inline bool doubleCase () const
         {
         return (not floatCase_);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitRealArg);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const bool floatCase_;
         //
         // If true,  the underlying argument is of a type based on float.
         // If false, the underlying argument is of a type based on double.
   };

#endif
@


1.15
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.14
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d39 2
a40 2
{
protected:
d42 3
a44 3
//------------------------------------------------------------------------
// Protected member functions.
//------------------------------------------------------------------------
d46 3
a48 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d50 1
a50 1
WitRealArg (bool);
d52 3
a54 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d56 1
a56 1
~WitRealArg ();
d58 3
a60 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d62 1
a62 1
accessFunc (bool, floatCase)
d64 4
a67 4
inline bool doubleCase () const
{
return (not floatCase_);
}
d69 1
a69 1
private:
d71 3
a73 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d75 1
a75 1
noCopyCtorAssign (WitRealArg);
d77 3
a79 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d81 5
a85 5
const bool floatCase_;
//
// If true,  the underlying argument is of a type based on float.
// If false, the underlying argument is of a type based on double.
};
@


1.13
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d39 2
a40 2
   {
   protected:
d42 3
a44 3
      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------
d46 3
a48 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d50 1
a50 1
      WitRealArg (bool);
d52 3
a54 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d56 1
a56 1
      ~WitRealArg ();
d58 3
a60 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d62 1
a62 1
      accessFunc (bool, floatCase)
d64 4
a67 4
      inline bool doubleCase () const
         {
         return (not floatCase_);
         }
d69 1
a69 1
   private:
d71 3
a73 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d75 1
a75 1
      noCopyCtorAssign (WitRealArg);
d77 3
a79 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d81 5
a85 5
      const bool floatCase_;
         //
         // If true,  the underlying argument is of a type based on float.
         // If false, the underlying argument is of a type based on double.
   };
@


1.12
log
@[multi-thread]:
   Moved PROLOG/EPILOG responsibility from the inner layer of the API
   to the outer layer.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.11
log
@[multi-thread]
@
text
@a39 16
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      static bool floatArgsExist ();
         //
         // Returns true, iff at least one RealArg exists with an underlying
         // argument of a type based on float.

      static bool doubleArgsExist ();
         //
         // Returns true, iff at least one RealArg exists with an underlying
         // argument of a type based on double.

a84 8

      static int nFloatArgs_;
         //
         // # RealArgs that currently exist with floatCase ()  == true.

      static int nDoubleArgs_;
         //
         // # RealArgs that currently exist with doubleCase () == true.
@


1.10
log
@Vector PropRt.
@
text
@a90 4
      int & nSameCaseArgs ();
         //
         // Returns nFloatArgs_ or nDoubleArgs_, depending on floatCase_.

@


1.9
log
@Double Precision.
@
text
@d27 9
@


1.8
log
@Double Precision.
@
text
@d69 3
a71 1
      inline bool floatCase () const
d73 1
a73 1
         return (not doubleCase_);
a75 2
      accessFunc (bool, doubleCase)

d84 1
a84 1
         // Returns nDoubleArgs_ or nFloatArgs_, depending on doubleCase_.
d92 1
a92 1
      const bool doubleCase_;
d94 2
a95 2
         // If true,  the underlying argument is of a type based on double.
         // If false, the underlying argument is of a type based on float.
d99 1
a99 1
         // # RealArgs that currently exist with doubleCase_ == false.
d103 1
a103 1
         // # RealArgs that currently exist with doubleCase_ == true.
@


1.7
log
@Double Precision.
@
text
@d69 5
@


1.6
log
@Double Precision.
@
text
@a58 2
      WitRealArg (const WitRealArg &);

d81 1
a81 3
      void operator = (const WitRealArg &);
         //
         // Not implemented; assignment is not allowed.
@


1.5
log
@Double Precision.
@
text
@d25 2
a26 2
// where the underlying type of the argument is a type derived from float or
// double depending on the value of doubleMode.
@


1.4
log
@Double Precision
@
text
@d16 1
a16 1
// Contains the declaration of class Wit::RealArg.
d22 1
a22 1
// Class Wit::RealArg
d29 1
a29 4
namespace Wit
{

class RealArg
d57 1
a57 1
      RealArg (bool);
d59 1
a59 1
      RealArg (const RealArg &);
d65 1
a65 1
      ~RealArg ();
d83 1
a83 1
      void operator = (const RealArg &);
a103 3

// Leaving namespace Wit.
}   
@


1.3
log
@Continued double precision.
@
text
@d40 5
d99 4
a105 4

      static int nFloatArgs_;
         //
         // # RealArgs that currently exist with doubleCase_ == false.
@


1.2
log
@Continued double precision.
@
text
@a39 5
      static bool floatArgsExist ();
         //
         // Returns true, iff at least one RealArg exists with an underlying
         //    argument of a type based on float.

d43 1
a43 1
         //    argument of a type based on double.
d98 1
a98 1
         static int nFloatArgs_;
@


1.1
log
@Continued double precision.
@
text
@d34 1
a34 1
      public:
d36 5
a40 1
      static bool floatCaseExists ();
d45 1
a45 1
      static bool doubleCaseExists ();
d53 4
d82 1
a82 1
      void incNCases (int inc);
d84 1
a84 1
         // Increases nDoubleCases_ or nFloatCases_ by inc, as appropriate.
d99 1
a99 1
      static int nDoubleCases_;
d103 1
a103 1
      static int nFloatCases_;
@

