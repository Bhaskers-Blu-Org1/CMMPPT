head	1.18;
access;
symbols
	sce_5_01_20080919:1.15
	latest_sce_4_20_20060523:1.15.0.2
	sce_4_20_20060523:1.15
	latest_sce4_20_OSL:1.14.0.2
	sce_4_20_OSL:1.14
	sce_410_withVa:1.14
	sce_4_05_20040511:1.4
	sce_4_00_20040201:1.4
	nextGenBranch:1.4.0.2
	nextGenRoot:1.4
	sce_3_30_20030627:1.3
	EndRw-branch:1.2.0.6
	Root-of-EndRw:1.2
	rwToStl:1.2.0.4
	latest_sce_3_10_20010924:1.2.0.2
	sce_3_10_20010924:1.2;
locks; strict;
comment	@ * @;


1.18
date	2011.09.28.23.50.27;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.09.24.00.28.42;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.08.30.20.18.13;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.02.17.34.13;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.01.01.00.43.14;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.12.31.18.28.29;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.12.20.18.36.25;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.17.21.53.01;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.16.23.35.17;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.15.23.50.11;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.14.22.37.11;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.13.23.35.48;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.13.20.31.15;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.10.16.49.45;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.10.22.58.17;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.02.22.18.51;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.17.18.56.29;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.16.21.42.32;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef SsrCandH
#define SsrCandH

//------------------------------------------------------------------------------
// Header file: "SsrCand.h"
//
// Contains the declaration of class SsrCand.
//------------------------------------------------------------------------------

#include <SelCand.h>

//------------------------------------------------------------------------------
// Class SsrCand
//
// "Selective Stock Reallocation Candidate"
// A SelCand for Selective Stock Reallocation.
// Represents whether or not stock reallocation is allowed for a given Material
// in a given period.
//
// Class Hierarchy:
//
// ProbAssoc
//    SelCand
//       SsrCand
//
// Implemented in SelStRe.C.
//------------------------------------------------------------------------------

class WitSsrCand: public WitSelCand
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSsrCand (bool, WitProblem *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSsrCand ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual void prtID     ();
      virtual void getSsrData (bool &);
         //
         // Overrides from class SelCand.

      noCopyCtorAssign (WitSsrCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const bool srAllowed_;
         //
         // Given any Material and period for which this SsrCand is selected,
         // stock reallocation from the period for the Material is allowed, iff
         // srAllowed_ is true.
   };

#endif
@


1.17
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.16
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d39 2
a40 2
{
public:
d42 3
a44 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d46 1
a46 1
WitSsrCand (bool, WitProblem *);
d48 1
a48 1
private:
d50 3
a52 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d54 1
a54 1
virtual ~WitSsrCand ();
d56 3
a58 3
//------------------------------------------------------------------------
// Other private member functions.
//------------------------------------------------------------------------
d60 4
a63 4
virtual void prtID     ();
virtual void getSsrData (bool &);
//
// Overrides from class SelCand.
d65 1
a65 1
noCopyCtorAssign (WitSsrCand);
d67 3
a69 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d71 6
a76 6
const bool srAllowed_;
//
// Given any Material and period for which this SsrCand is selected,
// stock reallocation from the period for the Material is allowed, iff
// srAllowed_ is true.
};
@


1.15
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d39 2
a40 2
   {
   public:
d42 3
a44 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d46 1
a46 1
      WitSsrCand (bool, WitProblem *);
d48 1
a48 1
   private:
d50 3
a52 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d54 1
a54 1
      virtual ~WitSsrCand ();
d56 3
a58 3
      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------
d60 4
a63 4
      virtual void prtID     ();
      virtual void getSsrData (bool &);
         //
         // Overrides from class SelCand.
d65 1
a65 1
      noCopyCtorAssign (WitSsrCand);
d67 3
a69 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d71 6
a76 6
      const bool srAllowed_;
         //
         // Given any Material and period for which this SsrCand is selected,
         // stock reallocation from the period for the Material is allowed, iff
         // srAllowed_ is true.
   };
@


1.14
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.13
log
@Low-Pri Prop-Rt.
@
text
@d46 1
a46 1
      WitSsrCand (WitSsrPt *);
d60 2
a61 3
      virtual void prtID            ();
      virtual void restoreSelToThis ();
      virtual void getSsrData       (bool &);
a70 5
      WitSsrPt * const mySsrPt_;
         //
         // The SsrPt at which this SsrCand represents a candidate for
         // selection.

@


1.12
log
@Low-Pri Prop-Rt.
@
text
@a60 1
      virtual void updateToCurSel   ();
d77 1
a77 1
      bool srAllowed_;
@


1.11
log
@Low-Pri Prop-Rt.
@
text
@a47 6
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, srAllowed)

d60 4
a63 4
      virtual void         prtID            ();
      virtual void         updateToCurSel   ();
      virtual void         restoreSelToThis ();
      virtual WitSsrCand * mySsrCand        ();
@


1.10
log
@Low-Pri Prop-Rt.
@
text
@d46 1
a46 1
      WitSsrCand (WitSsrMgr *);
d49 1
a49 1
      // Destructor function.
d52 3
a54 1
      virtual ~WitSsrCand ();
d57 1
a57 1
      // Data access functions.
d60 1
a60 3
      accessFunc (bool, srAllowed)

   private:
d63 1
a63 1
      // Private member functions.
d67 1
a69 1
      virtual void         setToCurSelOf    (WitSsrPt *);
d79 1
a79 1
      WitSsrPt * mySsrPt_;
a82 1
         // Valid only when this SsrCand is active.
a88 1
         // Valid only when this SsrCand is active.
@


1.9
log
@Low-Pri Prop-Rt.
@
text
@d66 4
a69 3
      virtual void         prtID         ();
      virtual WitSsrCand * mySsrCand     ();
      virtual void         setToCurSelOf (WitSsrPt *);
d79 6
d90 1
@


1.8
log
@Low-Pri Prop-Rt.
@
text
@a54 8
      // Other public member functions.
      //------------------------------------------------------------------------

      void setToCurSel (WitSsrPt * theSsrPt);
         //
         // Sets this SsrCand to represent the current selection at theSsrPt.

      //------------------------------------------------------------------------
d66 3
a68 2
      virtual void         prtID     ();
      virtual WitSsrCand * mySsrCand ();
@


1.7
log
@Low-Pri Prop-Rt.
@
text
@d46 1
a46 1
      WitSsrCand (bool, WitSsrMgr *);
d55 8
@


1.6
log
@Low-Pri Prop-Rt.
@
text
@d46 1
a46 1
      WitSsrCand (bool, WitProblem *);
d77 1
a77 1
      const bool srAllowed_;
@


1.5
log
@Low-Pri Prop-Rt.
@
text
@d46 1
a46 1
      WitSsrCand (bool, WitSsrMgr *);
@


1.4
log
@Added some optional warnings on Linux.
@
text
@a54 7
      // Overrides from class SelCand.
      //------------------------------------------------------------------------

      virtual void         prtID     ();
      virtual WitSsrCand * mySsrCand ();

      //------------------------------------------------------------------------
d66 5
@


1.3
log
@Internal changes.
@
text
@d52 1
a52 1
      ~WitSsrCand ();
@


1.2
log
@Continued implmentation of selective stock reallocation.
@
text
@d46 1
a46 1
      WitSsrCand (WitBoolean, WitSsrMgr *);
d65 1
a65 1
      accessFunc (WitBoolean, srAllowed)
d79 1
a79 1
      const WitBoolean srAllowed_;
d83 1
a83 1
         // srAllowed_ is TRUE.
@


1.1
log
@Continued implementation of selective stock reallocation.
@
text
@d58 2
a59 13
      virtual void       prtID       ();
      virtual WitBoolean isanSsrCand ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline static WitSsrCand * safeCast (WitSelCand * theSelCand)
         {
         witAssert ((theSelCand == NULL) || theSelCand->isanSsrCand ());

         return (WitSsrCand *) theSelCand;
         }
@

