head	1.26;
access;
symbols
	sce_5_01_20080919:1.22
	latest_sce_4_20_20060523:1.21.0.2
	sce_4_20_20060523:1.21
	latest_sce4_20_OSL:1.20.0.2
	sce_4_20_OSL:1.20
	sce_410_withVa:1.18
	sce_4_05_20040511:1.18
	sce_4_00_20040201:1.14
	nextGenBranch:1.12.0.2
	nextGenRoot:1.12
	sce_3_30_20030627:1.12
	EndRw-branch:1.10.0.4
	Root-of-EndRw:1.10
	rwToStl:1.10.0.2
	latest_sce_3_10_20010924:1.7.0.4
	sce_3_10_20010924:1.7
	latest_sce_3_00_20010601:1.7.0.2
	sce_3_00_20010601:1.7
	latest_sce_2_31_20010308:1.6.0.2
	sce_2_31_20010308:1.6
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2011.09.28.23.49.49;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.09.24.00.28.10;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2011.08.30.20.17.51;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2010.03.04.22.18.36;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2006.09.29.22.56.40;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2006.05.02.17.34.07;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2005.09.08.21.16.37;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2005.09.08.19.29.45;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2004.02.27.21.00.29;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2004.02.17.20.23.47;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2004.02.11.21.54.02;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2004.02.11.21.30.55;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.01.21.05.04;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.29.21.07.35;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.28.22.19.32;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.02.22.18.42;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.08.21.58.57;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.01.14.25.59;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.18.14.02.40;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.07.15.58.57;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.02.19.24.06;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.06.19.58.40;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.45;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.25;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.38;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.28;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.28;	author wit;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ParamMgrH
#define ParamMgrH

//------------------------------------------------------------------------------
// Header file: "ParamMgr.h"
//
// Contains the declaration of class ParamMgr.
//------------------------------------------------------------------------------

#include <Str.h>
#include <List.h>

//------------------------------------------------------------------------------
// Class ParamMgr
//
// Responsible for owning all of the Params for an SaeMgr.
//------------------------------------------------------------------------------

class WitParamMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitParamMgr (WitRun * theWitRun, int argc, char * argv[]);
         //
         // argc and argv give the command line arguments from main program.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitParamMgr ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitMsgFacility &,  myMsgFac)
      accessFunc (const WitString &, fileName)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void procParams ();
         //
         // Builds, reads, applies, and prints the control paramaters.

      void store (WitParam * theParam);
         //
         // Stores theParam in the Param Lists and checks for duplication.

      const WitString & stringParamVal (const char *);
      int               intParamVal    (const char *);
      double            doubleParamVal (const char *);
      const WitString & choiceParamVal (const char *);
      bool              boolParamVal   (const char *);
         //
         // Each of these functions returns the value of the (typed) Param
         // whose name matches the argument and asserts that a match exists.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitParamMgr);

      const char * compParamIFName (int argc, char * argv[]);
         //
         // Computes and returns the input file name.
         // argc and argv give the command line arguments from the main
         // program.

      void buildNonDevParams ();
         //
         // Builds all the non-development mode Params for this ParamMgr.

      void buildDevParams ();
         //
         // Builds all the development mode Params for this ParamMgr.

      void buildActionParam ();
         //
         // Builds the action Param.

      void buildOptInitMethodParam ();
         //
         // Builds the optInitMethod Param.

      void buildStringParam (
            const char * theName,
            const char * theText,
            const char * initValue);
         //
         // Constructs a StringParam with the given arguments.

      void buildIntParam (
            const char * theName,
            const char * theText,
            int          theLB,
            int          theUB,
            int          initValue);
         //
         // Constructs an IntParam with the given arguments.

      void buildDoubleParam (
            const char * theName,
            const char * theText,
            double       theLB,
            double       initValue);
         //
         // Constructs an DoubleParam with the given arguments.

      WitChoiceParam * buildChoiceParam (
            const char * theName,
            const char * theText);
         //
         // Constructs a ChoiceParam with the given arguments.
         // Returns the contructed ChoiceParam so that valid and initial values
         // can be set.

      void buildBoolParam (
            const char * theName,
            const char * theText,
            bool         initValue);
         //
         // Constructs a Bool ChoiceParam with the given arguments.

      void readParams ();
         //
         // Reads the Params.

      void applyNonDevParams ();
         //
         // Takes whatever immediate action is implied by the values of the
         // Params.

      void printEnv ();
         //
         // Issues msgs giving info from the environment.

      void applyDevParams ();
         //
         // Takes whatever immediate action is implied by the values of the
         // Params.

      void printParams ();
         //
         // Prints the Params.
         // Prints devParams only in DEVELOPMENT mode.

      void getTempParName (int theIdx, WitString & theString);
         //
         // Sets theString to be the name of tempPar #theIdx.

      void getTempParText (int theIdx, WitString & theString);
         //
         // Sets theString to be the text of tempPar #theIdx.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline WitGlobalComp * myGlobalComp ();
      inline WitOptComp *    myOptComp    ();
      inline WitProblem *    myProblem    ();

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRun * const myWitRun_;
         //
         // The WitRun for this ParamMgr.

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFacility for this ParamMgr.

      const WitString fileName_;
         //
         // Name of the parameter file.

      WitList <      WitParam>       allParams_;
      WitList <      WitParam> allNonDevParams_;
      WitList <      WitParam>    allDevParams_;

      WitList <WitStringParam> allStringParams_;
      WitList <   WitIntParam>    allIntParams_;
      WitList <WitDoubleParam> allDoubleParams_;
      WitList <WitChoiceParam> allChoiceParams_;
      WitList <WitChoiceParam>   allBoolParams_;
         //
         // The List of all                   Params for this ParamMgr.
         //                      non-dev-mode Params
         //                          dev-mode Params
         //
         //                             StringParams
         //                                IntParams
         //                             DoubleParams
         //                    non-Bool ChoiceParams
         //                        Bool ChoiceParams
         //
         // The Params are grouped into dev-mode Params and non-dev-mode Params
         // Dev-mode Params are only read and printed if DEVELOPMENT is
         // true. When DEVELOPEMENT is false, they are frozen at their
         // default values (but still valid). Non-dev-mode Params are read and
         // printed unconditionally. Only the non-dev-mode Params are
         // documented in the WIT guide.
         //
         // Notice that the Choice Params that belong to this ParamMgr are
         // grouped into two Lists: Bool and non-Bool. The Bool
         // ChoiceParams are ChoiceParams with valid values "yes" and "no".
         // They are built using buildBoolParam () and accessed using
         // boolParamVal (), which returns a Bool. The non-Bool
         // ChoiceParams are just treated as ChoiceParams.

      WitList <WitParam> * pCurrentParams_;
         //
         // Pointer to:
         //    allNonDevParams_,
         //       if non-dev-mode Params are currently being built.
         //    allDevParams_,
         //       if dev-mode     Params are currently being built.
         //    NULL,
         //       else.
   };

#endif
@


1.25
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.24
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d29 2
a30 98
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitParamMgr (WitRun * theWitRun, int argc, char * argv[]);
//
// argc and argv give the command line arguments from main program.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitParamMgr ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitMsgFacility &,  myMsgFac)
accessFunc (const WitString &, fileName)

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void procParams ();
//
// Builds, reads, applies, and prints the control paramaters.

void store (WitParam * theParam);
//
// Stores theParam in the Param Lists and checks for duplication.

const WitString & stringParamVal (const char *);
int               intParamVal    (const char *);
double            doubleParamVal (const char *);
const WitString & choiceParamVal (const char *);
bool              boolParamVal   (const char *);
//
// Each of these functions returns the value of the (typed) Param
// whose name matches the argument and asserts that a match exists.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitParamMgr);

const char * compParamIFName (int argc, char * argv[]);
//
// Computes and returns the input file name.
// argc and argv give the command line arguments from the main
// program.

void buildNonDevParams ();
//
// Builds all the non-development mode Params for this ParamMgr.

void buildDevParams ();
//
// Builds all the development mode Params for this ParamMgr.

void buildActionParam ();
//
// Builds the action Param.

void buildOptInitMethodParam ();
//
// Builds the optInitMethod Param.

void buildStringParam (
const char * theName,
const char * theText,
const char * initValue);
//
// Constructs a StringParam with the given arguments.

void buildIntParam (
const char * theName,
const char * theText,
int          theLB,
int          theUB,
int          initValue);
//
// Constructs an IntParam with the given arguments.

void buildDoubleParam (
const char * theName,
const char * theText,
double       theLB,
double       initValue);
//
// Constructs an DoubleParam with the given arguments.
d32 210
a241 114
WitChoiceParam * buildChoiceParam (
const char * theName,
const char * theText);
//
// Constructs a ChoiceParam with the given arguments.
// Returns the contructed ChoiceParam so that valid and initial values
// can be set.

void buildBoolParam (
const char * theName,
const char * theText,
bool         initValue);
//
// Constructs a Bool ChoiceParam with the given arguments.

void readParams ();
//
// Reads the Params.

void applyNonDevParams ();
//
// Takes whatever immediate action is implied by the values of the
// Params.

void printEnv ();
//
// Issues msgs giving info from the environment.

void applyDevParams ();
//
// Takes whatever immediate action is implied by the values of the
// Params.

void printParams ();
//
// Prints the Params.
// Prints devParams only in DEVELOPMENT mode.

void getTempParName (int theIdx, WitString & theString);
//
// Sets theString to be the name of tempPar #theIdx.

void getTempParText (int theIdx, WitString & theString);
//
// Sets theString to be the text of tempPar #theIdx.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

inline WitGlobalComp * myGlobalComp ();
inline WitOptComp *    myOptComp    ();
inline WitProblem *    myProblem    ();

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitRun * const myWitRun_;
//
// The WitRun for this ParamMgr.

WitMsgFacility & myMsgFac_;
//
// The MsgFacility for this ParamMgr.

const WitString fileName_;
//
// Name of the parameter file.

WitList <      WitParam>       allParams_;
WitList <      WitParam> allNonDevParams_;
WitList <      WitParam>    allDevParams_;

WitList <WitStringParam> allStringParams_;
WitList <   WitIntParam>    allIntParams_;
WitList <WitDoubleParam> allDoubleParams_;
WitList <WitChoiceParam> allChoiceParams_;
WitList <WitChoiceParam>   allBoolParams_;
//
// The List of all                   Params for this ParamMgr.
//                      non-dev-mode Params
//                          dev-mode Params
//
//                             StringParams
//                                IntParams
//                             DoubleParams
//                    non-Bool ChoiceParams
//                        Bool ChoiceParams
//
// The Params are grouped into dev-mode Params and non-dev-mode Params
// Dev-mode Params are only read and printed if DEVELOPMENT is
// true. When DEVELOPEMENT is false, they are frozen at their
// default values (but still valid). Non-dev-mode Params are read and
// printed unconditionally. Only the non-dev-mode Params are
// documented in the WIT guide.
//
// Notice that the Choice Params that belong to this ParamMgr are
// grouped into two Lists: Bool and non-Bool. The Bool
// ChoiceParams are ChoiceParams with valid values "yes" and "no".
// They are built using buildBoolParam () and accessed using
// boolParamVal (), which returns a Bool. The non-Bool
// ChoiceParams are just treated as ChoiceParams.

WitList <WitParam> * pCurrentParams_;
//
// Pointer to:
//    allNonDevParams_,
//       if non-dev-mode Params are currently being built.
//    allDevParams_,
//       if dev-mode     Params are currently being built.
//    NULL,
//       else.
};
@


1.23
log
@Multi-Obj Mode
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d29 98
a126 2
   {
   public:
d128 114
a241 210
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitParamMgr (WitRun * theWitRun, int argc, char * argv[]);
         //
         // argc and argv give the command line arguments from main program.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitParamMgr ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitMsgFacility &,  myMsgFac)
      accessFunc (const WitString &, fileName)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void procParams ();
         //
         // Builds, reads, applies, and prints the control paramaters.

      void store (WitParam * theParam);
         //
         // Stores theParam in the Param Lists and checks for duplication.

      const WitString & stringParamVal (const char *);
      int               intParamVal    (const char *);
      double            doubleParamVal (const char *);
      const WitString & choiceParamVal (const char *);
      bool              boolParamVal   (const char *);
         //
         // Each of these functions returns the value of the (typed) Param
         // whose name matches the argument and asserts that a match exists.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitParamMgr);

      const char * compParamIFName (int argc, char * argv[]);
         //
         // Computes and returns the input file name.
         // argc and argv give the command line arguments from the main
         // program.

      void buildNonDevParams ();
         //
         // Builds all the non-development mode Params for this ParamMgr.

      void buildDevParams ();
         //
         // Builds all the development mode Params for this ParamMgr.

      void buildActionParam ();
         //
         // Builds the action Param.

      void buildOptInitMethodParam ();
         //
         // Builds the optInitMethod Param.

      void buildStringParam (
            const char * theName,
            const char * theText,
            const char * initValue);
         //
         // Constructs a StringParam with the given arguments.

      void buildIntParam (
            const char * theName,
            const char * theText,
            int          theLB,
            int          theUB,
            int          initValue);
         //
         // Constructs an IntParam with the given arguments.

      void buildDoubleParam (
            const char * theName,
            const char * theText,
            double       theLB,
            double       initValue);
         //
         // Constructs an DoubleParam with the given arguments.

      WitChoiceParam * buildChoiceParam (
            const char * theName,
            const char * theText);
         //
         // Constructs a ChoiceParam with the given arguments.
         // Returns the contructed ChoiceParam so that valid and initial values
         // can be set.

      void buildBoolParam (
            const char * theName,
            const char * theText,
            bool         initValue);
         //
         // Constructs a Bool ChoiceParam with the given arguments.

      void readParams ();
         //
         // Reads the Params.

      void applyNonDevParams ();
         //
         // Takes whatever immediate action is implied by the values of the
         // Params.

      void printEnv ();
         //
         // Issues msgs giving info from the environment.

      void applyDevParams ();
         //
         // Takes whatever immediate action is implied by the values of the
         // Params.

      void printParams ();
         //
         // Prints the Params.
         // Prints devParams only in DEVELOPMENT mode.

      void getTempParName (int theIdx, WitString & theString);
         //
         // Sets theString to be the name of tempPar #theIdx.

      void getTempParText (int theIdx, WitString & theString);
         //
         // Sets theString to be the text of tempPar #theIdx.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline WitGlobalComp * myGlobalComp ();
      inline WitOptComp *    myOptComp    ();
      inline WitProblem *    myProblem    ();

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRun * const myWitRun_;
         //
         // The WitRun for this ParamMgr.

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFacility for this ParamMgr.

      const WitString fileName_;
         //
         // Name of the parameter file.

      WitList <      WitParam>       allParams_;
      WitList <      WitParam> allNonDevParams_;
      WitList <      WitParam>    allDevParams_;

      WitList <WitStringParam> allStringParams_;
      WitList <   WitIntParam>    allIntParams_;
      WitList <WitDoubleParam> allDoubleParams_;
      WitList <WitChoiceParam> allChoiceParams_;
      WitList <WitChoiceParam>   allBoolParams_;
         //
         // The List of all                   Params for this ParamMgr.
         //                      non-dev-mode Params
         //                          dev-mode Params
         //
         //                             StringParams
         //                                IntParams
         //                             DoubleParams
         //                    non-Bool ChoiceParams
         //                        Bool ChoiceParams
         //
         // The Params are grouped into dev-mode Params and non-dev-mode Params
         // Dev-mode Params are only read and printed if DEVELOPMENT is
         // true. When DEVELOPEMENT is false, they are frozen at their
         // default values (but still valid). Non-dev-mode Params are read and
         // printed unconditionally. Only the non-dev-mode Params are
         // documented in the WIT guide.
         //
         // Notice that the Choice Params that belong to this ParamMgr are
         // grouped into two Lists: Bool and non-Bool. The Bool
         // ChoiceParams are ChoiceParams with valid values "yes" and "no".
         // They are built using buildBoolParam () and accessed using
         // boolParamVal (), which returns a Bool. The non-Bool
         // ChoiceParams are just treated as ChoiceParams.

      WitList <WitParam> * pCurrentParams_;
         //
         // Pointer to:
         //    allNonDevParams_,
         //       if non-dev-mode Params are currently being built.
         //    allDevParams_,
         //       if dev-mode     Params are currently being built.
         //    NULL,
         //       else.
   };
@


1.22
log
@App controlled opt implosion.
@
text
@d67 1
d120 8
d204 1
d214 1
@


1.21
log
@Updated the copyright date on all source files.
@
text
@d169 3
a171 4
      inline WitGlobalComp *  myGlobalComp  ();
      inline WitOptComp *     myOptComp     ();
      inline WitOptImploder * myOptImploder ();
      inline WitProblem     * myProblem     ();
@


1.20
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.19
log
@[multi-thread]
@
text
@d36 1
a36 1
      WitParamMgr (WitSaeMgr * theSaeMgr, int argc, char * argv[]);
a37 1
         // mySaeMgr_ <-- theSaeMgr.
a168 1
      inline WitRun *         myWitRun      ();
d172 1
d178 1
a178 1
      WitSaeMgr * const mySaeMgr_;
d180 1
a180 1
         // The SaeMgr that owns this ParamMgr.
@


1.18
log
@Double Precision.
@
text
@d25 1
a25 1
// Responsible for owning all of the Params for an AloneRun.
d36 1
a36 1
      WitParamMgr (WitAloneRun * theAloneRun, int argc, char * argv[]);
d38 1
a38 1
         // myAloneRun_ <-- theAloneRun.
a169 2
      accessFunc (WitAloneRun *, myAloneRun)

d179 1
a179 1
      WitAloneRun * const myAloneRun_;
d181 1
a181 1
         // The AloneRun that owns this ParamMgr.
@


1.17
log
@Continued double precision.
@
text
@a138 4
      void setDoubleMode ();
         //
         // Sets the "doubleMode" attribute, if appropriate.

@


1.16
log
@Continued double precision.
@
text
@d139 1
a139 1
      void applyDoubleParam ();
d141 1
a141 1
         // Takes whatever action is implied by the value of the "double" Param.
@


1.15
log
@Continued double precision.
@
text
@a16 1
// Contains the declaration of class Ticker.
a18 1
#include <Assoc.h>
d20 1
a237 75
   };

//------------------------------------------------------------------------------
// Class Ticker.
//
// Counts the # of times a line of code is executed and prints the count at
// regular intervals.
//
// Instances of this class are typically declared as static local variables.
//
// Implemented in ParamMgr.C.
//------------------------------------------------------------------------------

class WitTicker: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitTicker (const char *, WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitTicker ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool tick ();

      static void setTickDelta (int);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline static int tickDelta ()
         {
         return tickDelta_;
         }

      accessFunc (int, nTicks)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitTicker);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      static int tickDelta_;
         //
         // If tickDelta_ > 0, tick () will print once every tickDelta_ calls.

      const char * const eventName_;
         //
         // The name of the event being counted.

      int nTicks_;
         //
         // # calls to tick.

      int prtTick_;
         //
         // nTicks_ is to printed when it reaches prtTick_.
@


1.14
log
@Continued implementation of PIP.
@
text
@d140 4
@


1.13
log
@Continued implementation of opt with COIN.
@
text
@d29 1
a29 1
class WitParamMgr: public WitUtil
@


1.12
log
@Continued implementation of opt with COIN.
@
text
@a104 4
      void buildOptSolveMethodParam ();
         //
         // Builds the optSolveMethod Param.

@


1.11
log
@Internal changes.
@
text
@d105 4
@


1.10
log
@Preliminary work on single source.
@
text
@d67 4
a70 4
      const WitString & stringParamVal  (const char *);
      int               intParamVal     (const char *);
      const WitString & choiceParamVal  (const char *);
      WitBoolean        booleanParamVal (const char *);
d129 1
a129 1
      void buildBooleanParam (
d132 1
a132 1
            WitBoolean   initValue);
d134 1
a134 1
         // Constructs a Boolean ChoiceParam with the given arguments.
d194 8
a201 8
      WitList <      WitParam>        allParams_;
      WitList <      WitParam>  allNonDevParams_;
      WitList <      WitParam>     allDevParams_;

      WitList <WitStringParam>  allStringParams_;
      WitList <   WitIntParam>     allIntParams_;
      WitList <WitChoiceParam>  allChoiceParams_;
      WitList <WitChoiceParam> allBooleanParams_;
d209 2
a210 2
         //                 non-Boolean ChoiceParams
         //                     Boolean ChoiceParams
d214 1
a214 1
         // TRUE. When DEVELOPEMENT is FALSE, they are frozen at their
d220 1
a220 1
         // grouped into two Lists: Boolean and non-Boolean. The Boolean
d222 2
a223 2
         // They are built using buildBooleanParam () and accessed using
         // booleanParamVal (), which returns a Boolean. The non-Boolean
d268 1
a268 1
      WitBoolean tick ();
@


1.9
log
@Preliminary work on single source.
@
text
@d159 1
a159 1
      WitString tempParName (int index);
d161 1
a161 1
         // Returns the name of tempPar #index.
d163 1
a163 1
      WitString tempParText (int index);
d165 1
a165 1
         // Returns the text of tempPar #index.
@


1.8
log
@Began implementation of object iteration.
@
text
@d194 3
a196 3
      WitList (      WitParam)        allParams_;
      WitList (      WitParam)  allNonDevParams_;
      WitList (      WitParam)     allDevParams_;
d198 4
a201 4
      WitList (WitStringParam)  allStringParams_;
      WitList (   WitIntParam)     allIntParams_;
      WitList (WitChoiceParam)  allChoiceParams_;
      WitList (WitChoiceParam) allBooleanParams_;
d226 1
a226 1
      WitList (WitParam) * pCurrentParams_;
@


1.7
log
@Implemented Ticker class.
Disallowed sel-split w multi-exec.
@
text
@d21 1
@


1.6
log
@Changed name of String.h to be Str.h to avoid windows build problems
@
text
@d17 1
d20 1
a20 1
#include <Str.h>
d234 75
@


1.5
log
@Some minor changes.
@
text
@d19 1
a19 1
#include <String.h>
@


1.4
log
@Refactoring for selection splitting.
@
text
@d19 1
a19 1
#include <Vector.h>
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d79 1
a79 3
      copyCtorAndAssignment (WitParamMgr);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d27 1
a27 1
class WitParamMgr
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
