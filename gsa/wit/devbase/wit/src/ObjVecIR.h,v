head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2011.09.28.23.49.43;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.09.24.00.28.04;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.08.30.20.17.46;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2010.02.05.20.41.53;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2010.01.06.20.10.32;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.12.30.20.11.20;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.12.30.20.02.27;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.29.20.42.57;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.12.29.20.17.18;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.29.19.39.05;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.29.16.33.45;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ObjVecIRH
#define ObjVecIRH

//------------------------------------------------------------------------------
// Header file: "ObjVecIR.h"
//
// Contains the declaration of class ObjVecIR.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class ObjVecIR
//
// "Objective Vector Internal Representation"
//
// Internal Representation of a vector of doubles that holds the value of an
// objective function attribute.
//
// Class hierarchy:
//
//    ObjVecIR
//      SglObjVecIR
//      MultiObjVecIR
//
// Implemented in ObjVec.C.
//------------------------------------------------------------------------------

class WitObjVecIR
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitObjVecIR ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void copyInto (WitObjVecIR * theObjVecIR) = 0;
         //
         // Copies the contents of this ObjVecIR into theObjVecIR, if this
         // ObjVecIR is of the same type as theObjVecIR;
         // otherwise issues a fatal error.

      virtual void copyFrom (WitSglObjVecIR *);
      virtual void copyFrom (WitMultiObjVecIR *);
         //
         // Copies the contents of the argument into this ObjVecIR, if this
         // ObjVecIR is of the same type as the argument;
         // otherwise issues a fatal error.

      virtual void writeDataMulti (
            const char *   attrName,
            WitDelComp *   theDelComp,
            WitObjective * theObj) = 0;
         //
         // Writes this ObjVecIR to the input data output file, as appropriate
         // for multiple objectives mode:
         //    In single objective mode, a fatal error is issued.
         //    In multiple objectives mode, the DblFlexVec for theObj is written
         //       including the set clause for theDelComp.
         //       The writing is only done if the vector is not 0.

      virtual void display (WitMsgID theMsgID, WitProblem *) = 0;
         //
         // Displays this ObjVecIR, issuing the indicated Msg.

      virtual WitDblFlexVec & curDblFlexVec () = 0;
         //
         // Returns the current vector of doubles represented by this ObjVecIR.

   protected:

      //------------------------------------------------------------------------
      // Protected constructor functions.
      //------------------------------------------------------------------------

      WitObjVecIR ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitObjVecIR);
   };

#endif
@


1.10
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.9
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d39 2
a40 55
{
public:

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitObjVecIR ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

virtual void copyInto (WitObjVecIR * theObjVecIR) = 0;
//
// Copies the contents of this ObjVecIR into theObjVecIR, if this
// ObjVecIR is of the same type as theObjVecIR;
// otherwise issues a fatal error.

virtual void copyFrom (WitSglObjVecIR *);
virtual void copyFrom (WitMultiObjVecIR *);
//
// Copies the contents of the argument into this ObjVecIR, if this
// ObjVecIR is of the same type as the argument;
// otherwise issues a fatal error.

virtual void writeDataMulti (
const char *   attrName,
WitDelComp *   theDelComp,
WitObjective * theObj) = 0;
//
// Writes this ObjVecIR to the input data output file, as appropriate
// for multiple objectives mode:
//    In single objective mode, a fatal error is issued.
//    In multiple objectives mode, the DblFlexVec for theObj is written
//       including the set clause for theDelComp.
//       The writing is only done if the vector is not 0.

virtual void display (WitMsgID theMsgID, WitProblem *) = 0;
//
// Displays this ObjVecIR, issuing the indicated Msg.

virtual WitDblFlexVec & curDblFlexVec () = 0;
//
// Returns the current vector of doubles represented by this ObjVecIR.

protected:

//------------------------------------------------------------------------
// Protected constructor functions.
//------------------------------------------------------------------------

WitObjVecIR ();

private:
d42 56
a97 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d99 2
a100 2
noCopyCtorAssign (WitObjVecIR);
};
@


1.8
log
@multi-obj mode
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d39 55
a93 2
   {
   public:
d95 3
a97 56
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitObjVecIR ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void copyInto (WitObjVecIR * theObjVecIR) = 0;
         //
         // Copies the contents of this ObjVecIR into theObjVecIR, if this
         // ObjVecIR is of the same type as theObjVecIR;
         // otherwise issues a fatal error.

      virtual void copyFrom (WitSglObjVecIR *);
      virtual void copyFrom (WitMultiObjVecIR *);
         //
         // Copies the contents of the argument into this ObjVecIR, if this
         // ObjVecIR is of the same type as the argument;
         // otherwise issues a fatal error.

      virtual void writeDataMulti (
            const char *   attrName,
            WitDelComp *   theDelComp,
            WitObjective * theObj) = 0;
         //
         // Writes this ObjVecIR to the input data output file, as appropriate
         // for multiple objectives mode:
         //    In single objective mode, a fatal error is issued.
         //    In multiple objectives mode, the DblFlexVec for theObj is written
         //       including the set clause for theDelComp.
         //       The writing is only done if the vector is not 0.

      virtual void display (WitMsgID theMsgID, WitProblem *) = 0;
         //
         // Displays this ObjVecIR, issuing the indicated Msg.

      virtual WitDblFlexVec & curDblFlexVec () = 0;
         //
         // Returns the current vector of doubles represented by this ObjVecIR.

   protected:

      //------------------------------------------------------------------------
      // Protected constructor functions.
      //------------------------------------------------------------------------

      WitObjVecIR ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d99 2
a100 2
      noCopyCtorAssign (WitObjVecIR);
   };
@


1.7
log
@Multi-objective mode
@
text
@d71 3
a73 3
         // for multi-objective mode:
         //    In single-objective mode, a fatal error is issued.
         //    In  multi-objective mode, the DblFlexVec for theObj is written.
@


1.6
log
@Multi-Objective Mode
@
text
@a84 8
      virtual WitDblFlexVec & myDblFlexVecFor (WitObjective * theObj) = 0;
         //
         // In multi-objective mode:
         //    Returns the vector of doubles represented by this ObjVecIR for
         //    theObj.
         // In single-objective mode:
         //    Issues a fatal error.

@


1.5
log
@Multi-Objective Mode
@
text
@d52 1
a52 1
      virtual void copyInto (WitObjVecIR * theObjVecIR) const = 0;
d58 2
a59 2
      virtual void copyFrom (const WitSglObjVecIR *);
      virtual void copyFrom (const WitMultiObjVecIR *);
d68 1
a68 2
            WitObjective * theObj)
            const = 0;
d77 1
a77 1
      virtual void display (WitMsgID theMsgID, WitProblem *) const = 0;
@


1.4
log
@Multi-Objective Mode
@
text
@d86 8
@


1.3
log
@Multi-Objective Mode
@
text
@a64 7
      virtual void writeDataSingle (const char * attrName) const = 0;
         //
         // Writes this ObjVecIR to the input data output file, as appropriate
         // for single-objective mode:
         //    In single-objective mode, the DblFlexVec is written.
         //    In  multi-objective mode, nothing        is written.

@


1.2
log
@Multi-Objective Mode
@
text
@d85 1
a85 1
      virtual void display (WitMsgID theMsgID) const = 0;
@


1.1
log
@Multi-Objective Mode
@
text
@d52 1
a52 1
      virtual void copyFrom (const WitObjVecIR * theObjVecIR) = 0;
d54 10
a63 1
         // Copies the contents of theObjVecIR into this ObjVecIR.
a88 8
      virtual const WitSglObjVecIR *   thisSglObjVecIR   () const;
      virtual const WitMultiObjVecIR * thisMultiObjVecIR () const;
         //
         // Returns this ObjVecIR as a SglObjVecIR,   if it is one;
         //    otherwise issues a fatal error.
         // Returns this ObjVecIR as a MultiObjVecIR, if it is one;
         //    otherwise issues a fatal error.

@

