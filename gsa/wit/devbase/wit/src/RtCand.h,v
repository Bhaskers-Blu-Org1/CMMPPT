head	1.27;
access;
symbols
	sce_5_01_20080919:1.24
	latest_sce_4_20_20060523:1.24.0.2
	sce_4_20_20060523:1.24
	latest_sce4_20_OSL:1.23.0.2
	sce_4_20_OSL:1.23
	sce_410_withVa:1.23
	sce_4_05_20040511:1.20
	sce_4_00_20040201:1.20
	nextGenBranch:1.20.0.2
	nextGenRoot:1.20
	sce_3_30_20030627:1.20;
locks; strict;
comment	@ * @;


1.27
date	2011.09.28.23.50.05;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.09.24.00.28.29;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.08.30.20.18.05;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2006.05.02.17.34.11;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2004.12.09.21.34.12;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.11.12.21.03.46;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.11.11.21.25.09;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.05.09.18.55.42;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.04.29.19.55.32;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.04.15.20.50.13;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.03.21.21.35.32;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.03.19.16.48.26;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.07.23.46.16;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.03.06.20.28.21;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.04.19.08.03;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.28.20.47.38;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.27.19.20.23;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.26.23.51.33;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.26.21.42.56;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.25.22.17.10;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.24.23.44.32;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.21.20.31.06;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.19.21.47.33;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.18.23.19.17;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.18.20.11.00;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.13.23.06.32;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.11.18.21.19;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef RtCandH
#define RtCandH

//------------------------------------------------------------------------------
// Header file: "RtCand.h"
//
// Contains the declaration of class RtCand.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class RtCand
//
// "Routing Candidate"
//
// Represents a BopEntry or ConsEntry in its role as a candidate for routing.
//
// In comments, the BopEntry ot ConsEntry represented by this RtCand will be
// referred to as "the represented candidate".
//
// Class Hierarchy:
//
// ProbAssoc
//    RtCand
//       ProdRtCand
//       ConsRtCand
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitRtCand: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitRtCand ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual bool usedByMr () = 0;
         //
         // Returns true, iff this RtCand would be used by Multi-Route.

      virtual void printID (int labelCol, int dataCol) = 0;
         //
         // Prints info identifying the represented candidate.
         // The label will be printed in column labelCol.
         // If dataCol > 0, the data will be printed in that column, if
         // possible.

      virtual bool isEligible (WitPeriod thePer) = 0;
         //
         // Returns true, iff the represented candidate is eligible to be
         // selected in thePer.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitRtSite *,    myRtSite)
      accessFunc (WitBillEntry *, myBillEnt)

      WitBopEntry *  myBopEnt  ();
      WitConsEntry * myConsEnt ();

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitRtCand)

      static int nInstances (WitProblem *);

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitRtCand (WitBillEntry *, WitRtSite *, WitRtMgr *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitRtCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const int mappingIndex_;
         //
         // Mapping index.

      WitBillEntry * const myBillEnt_;
         //
         // The BopEntry or ConsEntry represented by this RtCand.

      WitRtSite * const myRtSite_;
         //
         // The RtSite for this RtCand.
   };

#endif
@


1.26
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.25
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d42 2
a43 2
{
public:
d45 3
a47 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d49 1
a49 1
virtual ~WitRtCand ();
d51 3
a53 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d55 3
a57 3
virtual bool usedByMr () = 0;
//
// Returns true, iff this RtCand would be used by Multi-Route.
d59 6
a64 6
virtual void printID (int labelCol, int dataCol) = 0;
//
// Prints info identifying the represented candidate.
// The label will be printed in column labelCol.
// If dataCol > 0, the data will be printed in that column, if
// possible.
d66 4
a69 4
virtual bool isEligible (WitPeriod thePer) = 0;
//
// Returns true, iff the represented candidate is eligible to be
// selected in thePer.
d71 3
a73 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d75 2
a76 2
accessFunc (WitRtSite *,    myRtSite)
accessFunc (WitBillEntry *, myBillEnt)
d78 2
a79 2
WitBopEntry *  myBopEnt  ();
WitConsEntry * myConsEnt ();
d81 3
a83 3
//------------------------------------------------------------------------
// Mapping functions
//------------------------------------------------------------------------
d85 1
a85 1
decMappingIndex (WitRtCand)
d87 1
a87 1
static int nInstances (WitProblem *);
d89 1
a89 1
protected:
d91 3
a93 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d95 1
a95 1
WitRtCand (WitBillEntry *, WitRtSite *, WitRtMgr *);
d97 1
a97 1
private:
d99 3
a101 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d103 1
a103 1
noCopyCtorAssign (WitRtCand);
d105 3
a107 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d109 3
a111 3
const int mappingIndex_;
//
// Mapping index.
d113 3
a115 3
WitBillEntry * const myBillEnt_;
//
// The BopEntry or ConsEntry represented by this RtCand.
d117 4
a120 4
WitRtSite * const myRtSite_;
//
// The RtSite for this RtCand.
};
@


1.24
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d42 2
a43 2
   {
   public:
d45 3
a47 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d49 1
a49 1
      virtual ~WitRtCand ();
d51 3
a53 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d55 3
a57 3
      virtual bool usedByMr () = 0;
         //
         // Returns true, iff this RtCand would be used by Multi-Route.
d59 6
a64 6
      virtual void printID (int labelCol, int dataCol) = 0;
         //
         // Prints info identifying the represented candidate.
         // The label will be printed in column labelCol.
         // If dataCol > 0, the data will be printed in that column, if
         // possible.
d66 4
a69 4
      virtual bool isEligible (WitPeriod thePer) = 0;
         //
         // Returns true, iff the represented candidate is eligible to be
         // selected in thePer.
d71 3
a73 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d75 2
a76 2
      accessFunc (WitRtSite *,    myRtSite)
      accessFunc (WitBillEntry *, myBillEnt)
d78 2
a79 2
      WitBopEntry *  myBopEnt  ();
      WitConsEntry * myConsEnt ();
d81 3
a83 3
      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------
d85 1
a85 1
      decMappingIndex (WitRtCand)
d87 1
a87 1
      static int nInstances (WitProblem *);
d89 1
a89 1
   protected:
d91 3
a93 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d95 1
a95 1
      WitRtCand (WitBillEntry *, WitRtSite *, WitRtMgr *);
d97 1
a97 1
   private:
d99 3
a101 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d103 1
a103 1
      noCopyCtorAssign (WitRtCand);
d105 3
a107 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d109 3
a111 3
      const int mappingIndex_;
         //
         // Mapping index.
d113 3
a115 3
      WitBillEntry * const myBillEnt_;
         //
         // The BopEntry or ConsEntry represented by this RtCand.
d117 4
a120 4
      WitRtSite * const myRtSite_;
         //
         // The RtSite for this RtCand.
   };
@


1.23
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.22
log
@Low-Pri Prop-Rt.
@
text
@d55 1
a55 1
      virtual bool needsMrCand () = 0;
d57 1
a57 1
         // Returns true, iff an MrCand should be constructed for this RtCand.
@


1.21
log
@Low-Pri Prop-Rt.
@
text
@d95 1
a95 1
      WitRtCand (WitBillEntry *, WitRtSitePtr, WitRtMgr *);
@


1.20
log
@Attempt to fix syntax errors from GCC compiler.
@
text
@d59 1
a59 1
      virtual void printID (int dataCol) = 0;
d62 1
@


1.19
log
@Continued implementation of proportionate routing.
@
text
@d94 1
a94 1
      WitRtCand (WitBillEntry *, WitRtSiteComp, WitRtMgr *);
@


1.18
log
@Continued implementation of proportionate routing.
@
text
@d94 1
a94 1
      WitRtCand (WitBillEntry *, WitRtSite *, WitRtMgr *);
@


1.17
log
@Continued implementation of proportionate routing.
@
text
@d77 3
@


1.16
log
@Continued implementation of proportionate routing.
@
text
@a75 1
      accessFunc (WitSelector *,  mySelector)
d111 1
a111 1
         // The BopEntry ot ConsEntry represented by this RtCand.
a115 4

      WitSelector * const mySelector_;
         //
         // The Selector for this RtCand.
@


1.15
log
@Continued implementation of proportionate routing.
@
text
@d26 1
a26 1
// Represents a BopEntry ot ConsEntry in its role as a candidate for routing.
d55 4
a68 16

      virtual bool prodCase () = 0;
         //
         // Returns:
         //    true,  if this RtCand is for the production  case of routing;
         //    false, if this RtCand is for the consumption case of routing;

      virtual bool valid (WitPeriod thePer) = 0;
         //
         // Returns true, iff the represented candidate is valid for selection
         // in thePer.

      virtual void beSelectedByMR (WitPeriod thePer) = 0;
         //
         // Causes multi-route to select the represented candidate for
         // myRtSite_'s represented site in thePer.
@


1.14
log
@Continued implementation of proportionate routing.
@
text
@a96 2
         //
         // Not to be called; needed by the compiler for the PtrSched template.
@


1.13
log
@Continued implementation of proportionate routing.
@
text
@d25 5
a29 1
// Represents a BillEntry in its role as a candidate for routing.
d55 1
a55 1
      virtual void prtPrPtID () = 0;
d57 3
a59 1
         // Prints the ID for a PrPt for this RtCand.
d63 2
a64 1
         // Returns true, iff this RtCand is eligible to be selected in thePer.
d72 10
d88 1
d126 1
a126 1
         // The BillEntry represented by this RtCand.
d131 4
@


1.12
log
@Continued implementation of proportionate routing.
@
text
@d19 2
@


1.11
log
@Continued implementation of proportionate routing.
@
text
@d27 4
a30 3
// RtCand
//    ProdRtCand
//    ConsRtCand
d49 4
d57 6
d67 2
a68 1
      accessFunc (WitRtSite *, myRtSite)
@


1.10
log
@Continued implementation of proportionate routing.
@
text
@a47 4
      virtual void prtPrPtID () = 0;
         //
         // Prints the ID for a PrPt for this RtCand.

@


1.9
log
@Continued implementation of proportionate routing.
@
text
@d69 2
d78 1
a78 1
      WitRtCand (WitBillEntry *, WitRtSite *);
@


1.8
log
@Continued implementation of proportionate routing.
@
text
@d15 2
d18 84
@


1.7
log
@Continued implementation of proportionate routing.
@
text
@a14 2
//
// Contains the declaration of class RtCand.
a15 88

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class RtCand
//
// "Routing Candidate"
// Represents a BillEntry in its role as a candidate for routing.
//
// Class Hierarchy:
//
// RtCand
//    ProdRtCand
//    ConsRtCand
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitRtCand: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitRtCand ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void prtPrPtID () = 0;
         //
         // Prints the ID for a PrPt for this RtCand.

      virtual bool isEligible (WitPeriod thePer) = 0;
         //
         // Returns true, iff this RtCand is eligible to be selected in thePer.

      virtual WitBillEntry * myBillEntry () = 0;
         //
         // Returns the BillEntry represented by this RtCand.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitRtSite *, myRtSite)

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitRtCand)

      static int nInstances (WitProblem *);
         //
         // Not to be called; needed by the compiler for the PtrSched template.

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitRtCand (WitRtSite *, WitRtMgr *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitRtCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const int mappingIndex_;
         //
         // Mapping index.

      WitRtSite * const myRtSite_;
         //
         // The RtSite for this RtCand.
   };
@


1.6
log
@Continued implementation of proportionate routing.
@
text
@d16 1
a16 5
// Contains the declaration of the following classes:
//
//    RtCand.
//    ProdRtCand.
//    ConsRtCand.
d19 1
a19 1
#include <Util.h>
d36 1
a36 1
class WitRtCand: public WitUtil
a104 110
   };

//------------------------------------------------------------------------------
// Class ProdRtCand
//
// "Production Routing Candidate"
// Represents a BopEntry in its role as a candidate for production routing.
//
// Class Hierarchy:
//
// RtCand
//    ProdRtCand
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitProdRtCand: public WitRtCand
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitProdRtCand (WitBopEntry *, WitProdRtMgr *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitProdRtCand ();

      //------------------------------------------------------------------------
      // Overrides from class RtCand.
      //------------------------------------------------------------------------

      virtual void           prtPrPtID   ();
      virtual bool           isEligible  (WitPeriod);
      virtual WitBillEntry * myBillEntry ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitProdRtCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBopEntry * const myBopEnt_;
         //
         // The BopEntry represented by this ProdRtCand.
   };

//------------------------------------------------------------------------------
// Class ConsRtCand
//
// "Consumption Routing Candidate"
// Represents a ConsEntry in its role as a candidate for consumption routing.
//
// Class Hierarchy:
//
// RtCand
//    ConsRtCand
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitConsRtCand: public WitRtCand
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitConsRtCand (WitConsEntry *, WitConsRtMgr *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitConsRtCand ();

      //------------------------------------------------------------------------
      // Overrides from class RtCand.
      //------------------------------------------------------------------------

      virtual void           prtPrPtID   ();
      virtual bool           isEligible  (WitPeriod);
      virtual WitBillEntry * myBillEntry ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitConsRtCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitConsEntry * const myConsEnt_;
         //
         // The ConsEntry represented by this ConsRtCand.
@


1.5
log
@Continued implementation of proportionate routing.
@
text
@d19 2
a20 2
//    RtBopEnt.
//    RtConsEnt.
d28 2
a29 2
// "Routing Cand"
// Represents a BopEntry or a ConsEntry for routing purposes.
d34 2
a35 2
//    RtBopEnt
//    RtConsEnt
d58 1
a58 1
      virtual float expShare () = 0;
d60 1
a60 1
         // Returns expShare for the BopEntry or ConsEntry.
d62 1
a62 1
      virtual bool isEligible (WitPeriod thePer) = 0;
d64 1
a64 1
         // Returns true, iff this RtCand is eligible to be selected in thePer.
d112 1
a112 1
// Class RtBopEnt
d114 2
a115 2
// "Routing BopEnt"
// Represents a BopEnt for routing purposes.
d120 1
a120 1
//    RtBopEnt
d125 1
a125 1
class WitRtBopEnt: public WitRtCand
d133 1
a133 1
      WitRtBopEnt (WitBopEntry *, WitProdRtMgr *);
d141 1
a141 1
      virtual ~WitRtBopEnt ();
d147 3
a149 3
      virtual void  prtPrPtID  ();
      virtual float expShare   ();
      virtual bool  isEligible (WitPeriod);
d155 1
a155 1
      noCopyCtorAssign (WitRtBopEnt);
d162 2
d167 1
a167 1
// Class RtConsEnt
d169 2
a170 2
// "Routing ConsEntry"
// Represents a ConsEntry for routing purposes.
d175 1
a175 1
//    RtConsEnt
d180 1
a180 1
class WitRtConsEnt: public WitRtCand
d188 1
a188 1
      WitRtConsEnt (WitConsEntry *, WitConsRtMgr *);
d196 1
a196 1
      virtual ~WitRtConsEnt ();
d202 3
a204 3
      virtual void  prtPrPtID  ();
      virtual float expShare   ();
      virtual bool  isEligible (WitPeriod);
d210 1
a210 1
      noCopyCtorAssign (WitRtConsEnt);
d217 2
@


1.4
log
@Continued implementation of proportionate routing.
@
text
@d79 2
d88 1
a88 1
      WitRtCand (int theIdx, WitRtSite *);
a206 4

      static int mappingIndex (WitConsEntry * theConsEnt);
         //
         // Computes and returns the mappingIndex for the RtSite for theConsEnt.
@


1.3
log
@Continued implementation of proportionate routing.
@
text
@d184 1
a184 1
      WitRtConsEnt (WitConsEntry *, WitProdRtMgr *);
@


1.2
log
@Continued implementation of proportionate routing.
@
text
@d131 1
a131 1
      WitRtBopEnt (WitBopEntry *, WitRtSite *);
d184 1
a184 1
      WitRtConsEnt (WitConsEntry *, WitRtSite *);
@


1.1
log
@Continued implementation of proportionate routing.
@
text
@d54 26
d86 1
a86 1
      WitRtCand ();
d95 12
d131 3
a133 1
      WitRtBopEnt (WitBopEntry *);
d136 1
a136 1
      // Other public member functions.
d139 1
a139 1
   private:
d142 1
a142 1
      // Destructor function.
d145 3
a147 1
      virtual ~WitRtBopEnt ();
d184 3
a186 1
      WitRtConsEnt (WitConsEntry *);
d189 1
a189 1
      // Other public member functions.
d192 1
a192 1
   private:
d195 1
a195 1
      // Destructor function.
d198 3
a200 1
      virtual ~WitRtConsEnt ();
d205 4
@

