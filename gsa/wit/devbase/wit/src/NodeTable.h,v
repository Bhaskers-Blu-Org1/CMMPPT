head	1.8;
access;
symbols
	sce_5_01_20080919:1.5;
locks; strict;
comment	@ * @;


1.8
date	2011.09.28.23.49.40;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.24.00.28.02;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.08.30.20.17.44;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.02.22.21.36.10;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.02.21.23.58.46;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.19.21.45.50;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.07.28.17.31.55;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.07.19.19.17.06;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef NodeTableH
#define NodeTableH

//------------------------------------------------------------------------------
// Header file: "NodeTable.h"
//
// Contains the declaration of the following classes and templates:
//
//    NodeTable.
//    DerNodeTable <DerNode>.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <CstringLT.h>

#include <map>

//------------------------------------------------------------------------------

typedef std::map <const char *, WitNode *, WitCstringLT> WitNodeMap;

//------------------------------------------------------------------------------
// Class NodeTable
//
// A table of Nodes that maps the theNode->nameName () to theNode.
//
// Class Hierarchy:
//
// ProbAssoc
//    NodeTable
//       DerNodeTable <DerNode>
//
// Implemented in Misc.C
//------------------------------------------------------------------------------

class WitNodeTable: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      void remove (WitNode * theNode);
         //
         // Removes theNode from this NodeTable.
         // witAsserts that theNode is currently listed in this NodeTable.

      void purge ();
         //
         // Removes all selForDel Nodes from this NodeTable.

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitNodeTable (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitNodeTable ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void insertNode (WitNode * theNode);
         //
         // Inserts a theNode into this NodeTable.
         // In debug mode, issues a fatal error, if the name of theNode matches
         // a name already in the table.

      WitNode * findNode (const char * theName);
         //
         // Returns the node whose name is partName, assuming it was
         // previously inserted into this NodeTable; otherwise returns NULL.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitNodeTable);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitNodeMap myNodeMap_;
         //
         // Maps from theNode->nameName () to theNode.

      WitNode * cachedNode_;
         //
         // The node most recently inserted into or found in this NodeTable.
   };

//------------------------------------------------------------------------------
// Class Template DerNodeTable <DerNode>
//
// A NodeTable whose Nodes are all instances of the class represented by
// DerNode, where the DerNode class is a derived class of Node.
//
// Class Hierarchy:
//
// ProbAssoc
//    NodeTable
//       DerNodeTable <DerNode>
//
// All implementation is inline.
//------------------------------------------------------------------------------

template <typename DerNode> 
      class WitDerNodeTable: public WitNodeTable
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitDerNodeTable (WitProblem * theProblem):

            WitNodeTable (theProblem)
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitDerNodeTable ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void insert (DerNode * theDerNode)
         {
         insertNode (theDerNode);
         }

      DerNode * findDerNode (const char * theName)
         {
         return static_cast <DerNode *> (findNode (theName));
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDerNodeTable);
   };

#endif
@


1.7
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.6
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d46 2
a47 2
{
public:
d49 3
a51 3
//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------
d53 4
a56 4
void remove (WitNode * theNode);
//
// Removes theNode from this NodeTable.
// witAsserts that theNode is currently listed in this NodeTable.
d58 3
a60 3
void purge ();
//
// Removes all selForDel Nodes from this NodeTable.
d62 1
a62 1
protected:
d64 3
a66 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d68 1
a68 1
WitNodeTable (WitProblem *);
d70 3
a72 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d74 1
a74 1
~WitNodeTable ();
d76 3
a78 3
//------------------------------------------------------------------------
// Other protected member functions.
//------------------------------------------------------------------------
d80 5
a84 5
void insertNode (WitNode * theNode);
//
// Inserts a theNode into this NodeTable.
// In debug mode, issues a fatal error, if the name of theNode matches
// a name already in the table.
d86 4
a89 4
WitNode * findNode (const char * theName);
//
// Returns the node whose name is partName, assuming it was
// previously inserted into this NodeTable; otherwise returns NULL.
d91 1
a91 1
private:
d93 3
a95 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d97 1
a97 1
noCopyCtorAssign (WitNodeTable);
d99 3
a101 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d103 3
a105 3
WitNodeMap myNodeMap_;
//
// Maps from theNode->nameName () to theNode.
d107 4
a110 4
WitNode * cachedNode_;
//
// The node most recently inserted into or found in this NodeTable.
};
d127 42
a168 42
template <typename DerNode>
class WitDerNodeTable: public WitNodeTable
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

inline WitDerNodeTable (WitProblem * theProblem):

WitNodeTable (theProblem)
{
}

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

inline ~WitDerNodeTable ()
{
}

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

inline void insert (DerNode * theDerNode)
{
insertNode (theDerNode);
}

DerNode * findDerNode (const char * theName)
{
return static_cast <DerNode *> (findNode (theName));
}

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d170 2
a171 2
noCopyCtorAssign (WitDerNodeTable);
};
@


1.5
log
@Object name changing.
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d46 2
a47 2
   {
   public:
d49 3
a51 3
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------
d53 4
a56 4
      void remove (WitNode * theNode);
         //
         // Removes theNode from this NodeTable.
         // witAsserts that theNode is currently listed in this NodeTable.
d58 3
a60 3
      void purge ();
         //
         // Removes all selForDel Nodes from this NodeTable.
d62 1
a62 1
   protected:
d64 3
a66 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d68 1
a68 1
      WitNodeTable (WitProblem *);
d70 3
a72 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d74 1
a74 1
      ~WitNodeTable ();
d76 3
a78 3
      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------
d80 5
a84 5
      void insertNode (WitNode * theNode);
         //
         // Inserts a theNode into this NodeTable.
         // In debug mode, issues a fatal error, if the name of theNode matches
         // a name already in the table.
d86 4
a89 4
      WitNode * findNode (const char * theName);
         //
         // Returns the node whose name is partName, assuming it was
         // previously inserted into this NodeTable; otherwise returns NULL.
d91 1
a91 1
   private:
d93 3
a95 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d97 1
a97 1
      noCopyCtorAssign (WitNodeTable);
d99 3
a101 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d103 3
a105 3
      WitNodeMap myNodeMap_;
         //
         // Maps from theNode->nameName () to theNode.
d107 4
a110 4
      WitNode * cachedNode_;
         //
         // The node most recently inserted into or found in this NodeTable.
   };
d127 42
a168 42
template <typename DerNode> 
      class WitDerNodeTable: public WitNodeTable
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitDerNodeTable (WitProblem * theProblem):

            WitNodeTable (theProblem)
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitDerNodeTable ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void insert (DerNode * theDerNode)
         {
         insertNode (theDerNode);
         }

      DerNode * findDerNode (const char * theName)
         {
         return static_cast <DerNode *> (findNode (theName));
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d170 2
a171 2
      noCopyCtorAssign (WitDerNodeTable);
   };
@


1.4
log
@Object name change.
@
text
@d53 5
@


1.3
log
@Stochastic Implosion
@
text
@d16 4
a19 1
// Contains the declaration of class NodeTable.
d40 3
d50 10
d72 1
a72 1
      // Other public member functions.
d75 1
a75 1
      void insert (WitNode * theNode);
d81 1
a81 1
      WitNode * namedNode (const char * theName);
a85 4
      void purge ();
         //
         // Removes all selForDel Nodes from this NodeTable.

d107 61
@


1.2
log
@Corrected a non-portable declaration.
@
text
@d16 1
a16 4
// Contains the declaration of the following classes:
//
//    CstringLessThan
//    NodeTable
d20 1
a24 45
// Class CstringLessThan
//
// Comparison functor to be used for sorting c-strings.
//
// All implementation is inline.
//------------------------------------------------------------------------------

class WitCstringLessThan
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitCstringLessThan ()
         {
         }

      inline WitCstringLessThan (const WitCstringLessThan &)
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitCstringLessThan ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline bool operator () (
            const char * theCstring1,
            const char * theCstring2)
            const
         {
         return (strcmp (theCstring1, theCstring2) < 0);
         }
   };

//------------------------------------------------------------------------------
d26 1
a26 1
typedef std::map <const char *, WitNode *, WitCstringLessThan> WitNodeMap;
@


1.1
log
@Replaced WIT's hash tables with std:maps.
@
text
@d65 1
@

