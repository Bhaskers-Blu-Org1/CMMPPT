head	1.9;
access;
symbols
	sce_5_01_20080919:1.6
	latest_sce_4_20_20060523:1.3.0.2
	sce_4_20_20060523:1.3
	latest_sce4_20_OSL:1.2.0.2
	sce_4_20_OSL:1.2
	sce_410_withVa:1.2;
locks; strict;
comment	@ * @;


1.9
date	2011.09.28.23.49.27;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.09.24.00.27.47;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.08.30.20.17.35;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.07.02.17.48.37;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.12.06.22.53.02;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.21.15.42.26;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.02.17.34.00;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.11.17.20.36;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.24.23.23.56;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef IVRealArgH
#define IVRealArgH

//------------------------------------------------------------------------------
// Header file: "IVRealArg.h"
//
// Contains the declaration of class IVRealArg.
//------------------------------------------------------------------------------

#include <RealArg.h>

//------------------------------------------------------------------------------
// Class IVRealArg
//
// "Input Vector Real Argument"
//
// Provides a uniform interface to a certain kind of argument to an API
// function. The underlying argument is a vector real-valued variable passed in
// from the application program. Specifically, the underlying argument is of one
// of the following types:
//
//    const float  * const
//    const double * const
//
// Thus:
//    Some of the inner API functions (in WitRun.h) will have arguments of type
//       const IVRealArg &.
//    The corresponding outer API functions (in wit.h) will have arguments of
//       type "const float * const" and "const double * const". These are the
//       "underlying arguments".
//
//
// Class Hierarchy:
//
// RealArg
//    IVRealArg
//
// Implemented in RealArg.C.
//------------------------------------------------------------------------------

class WitIVRealArg: public WitRealArg
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitIVRealArg (const float *);
         //
         // Conversion from a const float * underlying argument.

      WitIVRealArg (const double *);
         //
         // Conversion from a const double * underlying argument.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitIVRealArg ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void copyInto (WitDblFlexVec & theDblFlexVec) const;
         //
         // Copies the elements of this IVRealArg into the corresponding
         // elements of theDblFlexVec.

      inline double operator [] (int theIdx) const;
         //
         // Returns the element of this IVRealArg indexed by theIdx.

      operator const void * () const;
         //
         // Returns the underlying argument, converted to a const void *.

      bool isNonNeg (int length) const;
         //
         // Returns true, iff underlying argument is non-negative for length
         // elements.

      void issueSetDblVecMsg (
            const char * theAttName,
            WitApiCall & theApiCall)
            const;
         //
         // Issues the message for setting a double vector attribute to the
         // underlying argument.
         // theAttName is the name of the attribute.
         // theApiCall issues the message.

      void issueBoundVecMsg (
            WitBoundSet * theBoundSet,
            WitMsgFragID  theFragID,
            WitApiCall &  theApiCall)
            const;
         //
         // Issues the message for setting one of the vectors of theBoundSet to
         // theFragID, where theFragID indicates a message fragment indicating
         // the vector being set.
         // theApiCall issues the message.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      inline const float  * myFltCVec () const;
      inline const double * myDblCVec () const;
         //
         // These functions return the underlying argument.

      noCopyCtorAssign (WitIVRealArg);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const float * const myFltCVec_;
         //
         // The underlying argument, if it is a const float *.
         // Otherwise NULL.

      const double * const myDblCVec_;
         //
         // The underlying argument, if it is a const double *.
         // Otherwise NULL.
   };

//------------------------------------------------------------------------------
// Implementation of inlines.
//------------------------------------------------------------------------------

inline double WitIVRealArg::operator [] (int theIdx) const
   {
   return
      floatCase ()?
         dblFromFlt (myFltCVec ()[theIdx]):
                     myDblCVec ()[theIdx];
   }

//------------------------------------------------------------------------------

inline const float * WitIVRealArg::myFltCVec () const
   {
   witAssert (floatCase ());

   return (myFltCVec_);
   }

//------------------------------------------------------------------------------

inline const double * WitIVRealArg::myDblCVec () const
   {
   witAssert (doubleCase ());

   return (myDblCVec_);
   }

//------------------------------------------------------------------------------

#endif
@


1.8
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.7
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d51 2
a52 41
{
public:

//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitIVRealArg (const float *);
//
// Conversion from a const float * underlying argument.

WitIVRealArg (const double *);
//
// Conversion from a const double * underlying argument.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitIVRealArg ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void copyInto (WitDblFlexVec & theDblFlexVec) const;
//
// Copies the elements of this IVRealArg into the corresponding
// elements of theDblFlexVec.

inline double operator [] (int theIdx) const;
//
// Returns the element of this IVRealArg indexed by theIdx.

operator const void * () const;
//
// Returns the underlying argument, converted to a const void *.
d54 92
a145 53
bool isNonNeg (int length) const;
//
// Returns true, iff underlying argument is non-negative for length
// elements.

void issueSetDblVecMsg (
const char * theAttName,
WitApiCall & theApiCall)
const;
//
// Issues the message for setting a double vector attribute to the
// underlying argument.
// theAttName is the name of the attribute.
// theApiCall issues the message.

void issueBoundVecMsg (
WitBoundSet * theBoundSet,
WitMsgFragID  theFragID,
WitApiCall &  theApiCall)
const;
//
// Issues the message for setting one of the vectors of theBoundSet to
// theFragID, where theFragID indicates a message fragment indicating
// the vector being set.
// theApiCall issues the message.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

inline const float  * myFltCVec () const;
inline const double * myDblCVec () const;
//
// These functions return the underlying argument.

noCopyCtorAssign (WitIVRealArg);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

const float * const myFltCVec_;
//
// The underlying argument, if it is a const float *.
// Otherwise NULL.

const double * const myDblCVec_;
//
// The underlying argument, if it is a const double *.
// Otherwise NULL.
};
d152 6
a157 6
{
return
floatCase ()?
dblFromFlt (myFltCVec ()[theIdx]):
myDblCVec ()[theIdx];
}
d162 2
a163 2
{
witAssert (floatCase ());
d165 2
a166 2
return (myFltCVec_);
}
d171 2
a172 2
{
witAssert (doubleCase ());
d174 2
a175 2
return (myDblCVec_);
}
@


1.6
log
@Removed many conversions of string constant to char *.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d51 41
a91 2
   {
   public:
d93 53
a145 92
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitIVRealArg (const float *);
         //
         // Conversion from a const float * underlying argument.

      WitIVRealArg (const double *);
         //
         // Conversion from a const double * underlying argument.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitIVRealArg ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void copyInto (WitDblFlexVec & theDblFlexVec) const;
         //
         // Copies the elements of this IVRealArg into the corresponding
         // elements of theDblFlexVec.

      inline double operator [] (int theIdx) const;
         //
         // Returns the element of this IVRealArg indexed by theIdx.

      operator const void * () const;
         //
         // Returns the underlying argument, converted to a const void *.

      bool isNonNeg (int length) const;
         //
         // Returns true, iff underlying argument is non-negative for length
         // elements.

      void issueSetDblVecMsg (
            const char * theAttName,
            WitApiCall & theApiCall)
            const;
         //
         // Issues the message for setting a double vector attribute to the
         // underlying argument.
         // theAttName is the name of the attribute.
         // theApiCall issues the message.

      void issueBoundVecMsg (
            WitBoundSet * theBoundSet,
            WitMsgFragID  theFragID,
            WitApiCall &  theApiCall)
            const;
         //
         // Issues the message for setting one of the vectors of theBoundSet to
         // theFragID, where theFragID indicates a message fragment indicating
         // the vector being set.
         // theApiCall issues the message.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      inline const float  * myFltCVec () const;
      inline const double * myDblCVec () const;
         //
         // These functions return the underlying argument.

      noCopyCtorAssign (WitIVRealArg);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const float * const myFltCVec_;
         //
         // The underlying argument, if it is a const float *.
         // Otherwise NULL.

      const double * const myDblCVec_;
         //
         // The underlying argument, if it is a const double *.
         // Otherwise NULL.
   };
d152 6
a157 6
   {
   return
      floatCase ()?
         dblFromFlt (myFltCVec ()[theIdx]):
                     myDblCVec ()[theIdx];
   }
d162 2
a163 2
   {
   witAssert (floatCase ());
d165 2
a166 2
   return (myFltCVec_);
   }
d171 2
a172 2
   {
   witAssert (doubleCase ());
d174 2
a175 2
   return (myDblCVec_);
   }
@


1.5
log
@Stochastic Implosion
@
text
@d98 4
a101 1
      void issueSetDblVecMsg (WitAttr theAttr, WitApiCall & theApiCall) const;
d105 1
a105 1
         // theAttr is the name of the attribute.
@


1.4
log
@App controlled opt implosion.
@
text
@d106 3
a108 3
            const WitBoundSet * theBoundSet,
            WitMsgFragID        theFragID,
            WitApiCall &        theApiCall)
@


1.3
log
@Updated the copyright date on all source files.
@
text
@d93 5
@


1.2
log
@Vector PropRtg.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.1
log
@Vector PropRt.
@
text
@d26 4
a29 4
// Provides a uniform interface to certain kind of argument to an API function.
// The underlying argument is a vector real-valued variable passed in from the
// application program. Specifically, the underlying argument is of one of the
// following types:
@

