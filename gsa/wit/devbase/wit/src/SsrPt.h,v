head	1.44;
access;
symbols
	sce_5_01_20080919:1.32
	latest_sce_4_20_20060523:1.32.0.2
	sce_4_20_20060523:1.32
	latest_sce4_20_OSL:1.31.0.2
	sce_4_20_OSL:1.31
	sce_410_withVa:1.31
	sce_4_05_20040511:1.15
	sce_4_00_20040201:1.15
	nextGenBranch:1.15.0.2
	nextGenRoot:1.15
	sce_3_30_20030627:1.15
	EndRw-branch:1.12.0.4
	Root-of-EndRw:1.12
	rwToStl:1.12.0.2
	latest_sce_3_10_20010924:1.3.0.2
	sce_3_10_20010924:1.3;
locks; strict;
comment	@ * @;


1.44
date	2011.09.28.23.50.27;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2011.09.24.00.28.43;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2011.08.30.20.18.14;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2010.07.30.20.20.15;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2010.07.29.21.03.13;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2010.07.28.19.27.47;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2010.07.27.23.07.07;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2010.07.27.18.12.34;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2010.07.16.22.26.42;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2010.07.13.17.41.30;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2010.07.02.22.56.26;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2010.07.02.19.15.50;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2006.05.02.17.34.13;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2005.01.15.00.20.08;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2005.01.13.17.24.21;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2005.01.06.20.34.10;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2005.01.01.00.43.14;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2004.12.31.18.28.29;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2004.12.28.22.34.27;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2004.12.22.19.57.26;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2004.12.21.22.13.50;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2004.12.20.21.13.10;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.12.17.21.53.01;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.12.16.23.35.17;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2004.12.15.23.50.11;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2004.12.14.22.37.11;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.13.20.31.15;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2004.12.09.22.06.07;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2004.12.09.21.34.12;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.05.05.16.10.02;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.01.31.21.28.59;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.02.22.18.52;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.07.19.16.10.52;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.07.02.21.53.09;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.24.23.00.09;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.15.21.21.40;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.12.21.02.06;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.11.15.36.33;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.20.22.51.20;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.19.16.20.58;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.09.00.43.50;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.19.18.51.00;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.17.18.56.29;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.16.21.42.32;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.44
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef SsrPtH
#define SsrPtH

//------------------------------------------------------------------------------
// Header file: "SsrPt.h"
//
// Contains the declaration of class SsrPt.
//------------------------------------------------------------------------------

#include <DetSelPt.h>

//------------------------------------------------------------------------------
// Class SsrPt
//
// "Selective Stock Reallocation Point"
// A SelPt for Selective Stock Reallocation.
// An SsrPt represents a Material and a period from which stock reallocation is
// initially allowed, but can eventually be disallowed.
//
// Class Hierarchy:
//
// SelPt
//    DetSelPt
//       SsrPt
//
// Implemented in SelStRe.C.
//------------------------------------------------------------------------------

class WitSsrPt: public WitDetSelPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSsrPt (WitMaterial *, WitPeriod, WitSsrMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSsrPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void defineSplit (
            double   rollVol,
            double & srAllVol,
            double & srNotAllVol);
         //
         // Sets srAllVol and srNotAllVol to be the SR-allowed-volume and the
         // SR-allowed-volume for a split explosion of rollVol units at this
         // SsrPt.

      void setSrWasDone (bool);

      void recoverInitState ();
         //
         // Restores the SSR configuration at this SsrPt to its initial state.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitSsrMgr *, mySsrMgr)
      accessFunc (bool,        srAllowed);
      accessFunc (bool,        srWasDone)
                
   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual WitSelMgr *  mySelMgr    ();
      virtual void         prtID       ();        
      virtual bool         splittable  ();   
      virtual void         getSortData (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand  ();
         //
         // Overrides from class SelPt.

      virtual bool hasResAlt       ();
      virtual void alterSelection  ();
      virtual void storeRecoveryPt ();
      virtual void tempAlterSel    ();
      virtual void cancelTempAlt   ();
      virtual void printAlteration ();
         //
         // Overrides from class DetSelPt.

      void setSrAllowed (bool);

      void printRecovery ();
         //
         // Prints the restoration of the SSR configuration at this SsrPt to its
         // initial state.

      noCopyCtorAssign (WitSsrPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMaterial * const myMat_;
         //
         // The Material represented by this SsrPt.

      const WitPeriod myFromPer_;
         //
         // The Period represented by this SsrPt.

      WitSsrMgr * const mySsrMgr_;
         //
         // The SsrMgr for this SsrPt.

      bool srAllowed_;
         //
         // true, iff stock reallocation from myFromPer_ for myMat_ is allowed.

      bool srWasDone_;
         //
         // true, iff any of the stock of myMat_ in myFromPer_ was reallocated
         // to an earlier period during the current temp-commit.
   };

#endif
@


1.43
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.42
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d39 2
a40 64
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitSsrPt (WitMaterial *, WitPeriod, WitSsrMgr *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitSsrPt ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void defineSplit (
double   rollVol,
double & srAllVol,
double & srNotAllVol);
//
// Sets srAllVol and srNotAllVol to be the SR-allowed-volume and the
// SR-allowed-volume for a split explosion of rollVol units at this
// SsrPt.

void setSrWasDone (bool);

void recoverInitState ();
//
// Restores the SSR configuration at this SsrPt to its initial state.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitSsrMgr *, mySsrMgr)
accessFunc (bool,        srAllowed);
accessFunc (bool,        srWasDone)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

virtual WitSelMgr *  mySelMgr    ();
virtual void         prtID       ();
virtual bool         splittable  ();
virtual void         getSortData (WitPart * &, WitPeriod &);
virtual WitSelCand * newSelCand  ();
//
// Overrides from class SelPt.

virtual bool hasResAlt       ();
virtual void alterSelection  ();
virtual void storeRecoveryPt ();
virtual void tempAlterSel    ();
virtual void cancelTempAlt   ();
virtual void printAlteration ();
//
// Overrides from class DetSelPt.
d42 96
a137 34
void setSrAllowed (bool);

void printRecovery ();
//
// Prints the restoration of the SSR configuration at this SsrPt to its
// initial state.

noCopyCtorAssign (WitSsrPt);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitMaterial * const myMat_;
//
// The Material represented by this SsrPt.

const WitPeriod myFromPer_;
//
// The Period represented by this SsrPt.

WitSsrMgr * const mySsrMgr_;
//
// The SsrMgr for this SsrPt.

bool srAllowed_;
//
// true, iff stock reallocation from myFromPer_ for myMat_ is allowed.

bool srWasDone_;
//
// true, iff any of the stock of myMat_ in myFromPer_ was reallocated
// to an earlier period during the current temp-commit.
};
@


1.41
log
@Selection Recovery
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d39 64
a102 2
   {
   public:
d104 34
a137 96
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSsrPt (WitMaterial *, WitPeriod, WitSsrMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSsrPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void defineSplit (
            double   rollVol,
            double & srAllVol,
            double & srNotAllVol);
         //
         // Sets srAllVol and srNotAllVol to be the SR-allowed-volume and the
         // SR-allowed-volume for a split explosion of rollVol units at this
         // SsrPt.

      void setSrWasDone (bool);

      void recoverInitState ();
         //
         // Restores the SSR configuration at this SsrPt to its initial state.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitSsrMgr *, mySsrMgr)
      accessFunc (bool,        srAllowed);
      accessFunc (bool,        srWasDone)
                
   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual WitSelMgr *  mySelMgr    ();
      virtual void         prtID       ();        
      virtual bool         splittable  ();   
      virtual void         getSortData (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand  ();
         //
         // Overrides from class SelPt.

      virtual bool hasResAlt       ();
      virtual void alterSelection  ();
      virtual void storeRecoveryPt ();
      virtual void tempAlterSel    ();
      virtual void cancelTempAlt   ();
      virtual void printAlteration ();
         //
         // Overrides from class DetSelPt.

      void setSrAllowed (bool);

      void printRecovery ();
         //
         // Prints the restoration of the SSR configuration at this SsrPt to its
         // initial state.

      noCopyCtorAssign (WitSsrPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMaterial * const myMat_;
         //
         // The Material represented by this SsrPt.

      const WitPeriod myFromPer_;
         //
         // The Period represented by this SsrPt.

      WitSsrMgr * const mySsrMgr_;
         //
         // The SsrMgr for this SsrPt.

      bool srAllowed_;
         //
         // true, iff stock reallocation from myFromPer_ for myMat_ is allowed.

      bool srWasDone_;
         //
         // true, iff any of the stock of myMat_ in myFromPer_ was reallocated
         // to an earlier period during the current temp-commit.
   };
@


1.40
log
@Selection Recovery
@
text
@d69 1
a69 1
      void recoverInitSel ();
d71 1
a71 1
         // Recovers the initial selection of this SsrPt.
d95 6
a100 6
      virtual bool hasResAlt         ();
      virtual void alterSelection    ();
      virtual void recAltForRecovery ();
      virtual void tempAlterSel      ();
      virtual void cancelTempAlt     ();
      virtual void printAlteration   ();
d108 2
a109 1
         // Prints the recovery of the initial selection of this SsrPt.
@


1.39
log
@Selection Recovery
@
text
@d95 6
a100 6
      virtual bool hasResAlt        ();
      virtual void alterSelection   ();
      virtual void recordAlteration ();
      virtual void tempAlterSel     ();
      virtual void cancelTempAlt    ();
      virtual void printAlteration  ();
@


1.38
log
@Selection Recovery
@
text
@d95 6
a100 5
      virtual bool hasResAlt       ();
      virtual void alterSelection  ();
      virtual void tempAlterSel    ();
      virtual void cancelTempAlt   ();
      virtual void printAlteration ();
@


1.37
log
@Selection Recovery
@
text
@d87 5
a91 7
      virtual WitSelMgr *  mySelMgr       ();
      virtual void         prtID          ();        
      virtual bool         splittable     ();   
      virtual void         getSortData    (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand     ();
      virtual void         printRecoverO  ();
      virtual void         recoverInitSeO ();
@


1.36
log
@Selection Recovery
@
text
@d69 4
d107 4
@


1.35
log
@Selection Recovery.
@
text
@d88 2
a89 2
      virtual void         printRecovery  ();
      virtual void         recoverInitSel ();
@


1.34
log
@Selection Recovery.
@
text
@d88 1
a89 1
      virtual void         prtRecInitSel  ();
@


1.33
log
@Selection Recovery.
@
text
@a66 1
      void setSrAllowed (bool);
d101 2
@


1.32
log
@Updated the copyright date on all source files.
@
text
@d84 7
a90 5
      virtual WitSelMgr *  mySelMgr    ();
      virtual void         prtID       ();        
      virtual bool         splittable  ();   
      virtual void         getSortData (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand  ();
@


1.31
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.30
log
@Low-Pri Prop-Rt.
@
text
@d84 5
a88 6
      virtual void         printSelection ();
      virtual WitSelMgr *  mySelMgr       ();
      virtual void         prtID          ();        
      virtual bool         splittable     ();   
      virtual void         getSortData    (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand     ();
d92 5
a96 4
      virtual bool hasResAlt      ();
      virtual void alterSelection ();
      virtual void tempAlterSel   ();
      virtual void cancelTempAlt  ();
@


1.29
log
@Low-Pri Prop-Rt.
@
text
@d93 4
a96 5
      virtual bool hasResAlt          ();
      virtual void alterSelection     ();
      virtual void tempAlterSel       ();
      virtual void cancelTempAlt      (WitSelCand *);
      virtual bool cancelNeedsSelCand ();
@


1.28
log
@Low-Pri Prop-Rt.
@
text
@a87 1
      virtual void         restoreSelTo   (WitSelCand *);
d93 5
a97 3
      virtual bool hasResAlt      ();
      virtual void alterSelection ();
      virtual void tempAlterSel   ();
@


1.27
log
@Low-Pri Prop-Rt.
@
text
@d88 1
@


1.26
log
@Low-Pri Prop-Rt.
@
text
@d58 9
@


1.25
log
@Low-Pri Prop-Rt.
@
text
@a74 1
      virtual bool         hasResAlt      ();
d84 1
@


1.24
log
@Low-Pri Prop-Rt.
@
text
@a80 1
      virtual void         tempAlterSel   ();
d86 1
d88 1
a88 1
         // Override from class DetSelPt.
@


1.23
log
@Low-Pri Prop-Rt.
@
text
@a75 1
      virtual void         alterSelection ();
d86 4
@


1.22
log
@Low-Pri Prop-Rt.
@
text
@d19 1
a19 1
#include <SelPt.h>
d32 2
a33 1
//    SsrPt
d38 1
a38 1
class WitSsrPt: public WitSelPt
@


1.21
log
@Low-Pri Prop-Rt.
@
text
@d64 3
a66 2
      accessFunc (bool, srAllowed);
      accessFunc (bool, srWasDone)
d82 1
a82 1
      virtual void         setToMyCurSel  (WitSelCand *);
@


1.20
log
@Low-Pri Prop-Rt.
@
text
@d57 1
a80 1
      virtual void         restoreSel     (WitSelCand *);
a84 4
      void setSrAllowed (bool srAllowedVal);
         //
         // Sets srAllowedVal to be the currently selected value of srAllowed_.

@


1.19
log
@Low-Pri Prop-Rt.
@
text
@d81 1
a81 1
      virtual void         setToCurSel    (WitSelCand *);
@


1.18
log
@Low-Pri Prop-Rt.
@
text
@a76 1
      virtual WitSelCand * curSelCand     ();
d81 1
@


1.17
log
@Low-Pri Prop-Rt.
@
text
@a58 5
      bool srAllowed ();
         //
         // Returns true, iff stock reallocation from myFromPer_ for myMat_ is
         // allowed.

d63 1
d85 4
d107 4
@


1.16
log
@Low-Pri Prop-Rt.
@
text
@a53 15
      // Overrides from class SelPt.
      //------------------------------------------------------------------------

      virtual bool         hasResAlt      ();
      virtual void         alterSelection ();
      virtual void         printSelection ();
      virtual WitSelMgr *  mySelMgr       ();
      virtual void         prtID          ();        
      virtual WitSelCand * curSelCand     ();
      virtual bool         splittable     ();   
      virtual void         getSortData    (WitPart * &, WitPeriod &);
      virtual void         tempAlterSel   ();
      virtual void         restoreSel     (WitSelCand *);

      //------------------------------------------------------------------------
d76 13
@


1.15
log
@Continued implementation of proportionate routing.
@
text
@d57 10
a66 9
      virtual bool        hasResAlt      ();
      virtual void        alterSelection ();
      virtual void        printSelection ();
      virtual WitSelMgr * mySelMgr       ();
      virtual void        prtID          ();        
      virtual bool        splittable     ();   
      virtual void        getSortData    (WitPart * &, WitPeriod &);
      virtual void        tempAlterSel   ();
      virtual void        restoreSel     (WitSelCand *);
@


1.14
log
@Continued implementation of proportionate routing.
@
text
@a63 1
      virtual WitPeriod   myPeriod       ();
@


1.13
log
@Internal changes.
@
text
@a19 1
#include <SsrCand.h>
d74 5
d84 1
a84 11

      inline bool srAllowed ()
         {
         return selSsrCand ()->srAllowed ();
         }

      inline WitSsrCand * selSsrCand ()
         {
         return selSelCand ()->mySsrCand ();
         }

@


1.12
log
@Continued implementation of Single-Source.
@
text
@d58 1
a58 1
      virtual WitBoolean  hasResAlt      ();
d63 1
a63 1
      virtual WitBoolean  splittable     ();   
d73 1
a73 1
      void setSrWasDone (WitBoolean);
d79 1
a79 1
      accessFunc (WitBoolean, srWasDone)
d81 1
a81 1
      inline WitBoolean srAllowed ()
d115 1
a115 1
      WitBoolean srWasDone_;
d117 1
a117 1
         // TRUE, iff any of the stock of myMat_ in myFromPer_ was reallocated
@


1.11
log
@Continued implementation of Single-Source.
@
text
@a98 4
      virtual void postSplit ();
         //
         // Override from class SelPt.

@


1.10
log
@Continued implementation of single-source.
@
text
@d65 1
@


1.9
log
@Continued implementation of sel-split for pen-exec.
@
text
@d58 1
@


1.8
log
@Continued implementation of sel-split for pen-exec.
@
text
@d63 1
a63 1
      virtual void        getSortData    (WitPart * &, int &, WitPeriod &);
@


1.7
log
@Continued implementation of sel-split for pen-exec.
@
text
@a62 1
      virtual WitPart *   myFillPart     ();
@


1.6
log
@Continued implementation of sel-split for pen-exec.
@
text
@d64 1
a64 2
      virtual WitPart *   mySortPart     ();
      virtual int         caseIndex      ();
@


1.5
log
@Continued implementation of sel-split for pen-exec.
@
text
@d64 1
a64 1
      virtual WitPart *   sortPart       ();
d66 2
@


1.4
log
@Fixed a subtle bug in sel-split for stock reallocation.
Continued implementation of sel-split for pen-exec.
@
text
@d64 2
@


1.3
log
@Continued implementation of selective stock reallocation.
@
text
@d95 4
@


1.2
log
@Continued implmentation of selective stock reallocation.
@
text
@d46 1
a46 1
      WitSsrPt (WitSsrMgr *);
d66 6
d75 7
d84 1
a84 4
         return
            (selSelCand () != NULL)?
               selSelCand ()->mySsrCand ():
               NULL;
d98 17
@


1.1
log
@Continued implementation of selective stock reallocation.
@
text
@d71 4
a74 1
         return WitSsrCand::safeCast (selSelCand ());
@

