head	1.52;
access;
symbols;
locks; strict;
comment	@ * @;


1.52
date	2011.09.28.23.49.10;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2011.09.24.00.27.28;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2011.08.30.20.17.22;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2011.08.30.18.14.49;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2011.08.26.22.54.44;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2011.02.15.21.20.12;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2011.02.10.00.46.30;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2011.02.09.19.13.22;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2011.02.08.23.21.06;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2011.02.08.21.49.02;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2011.02.08.17.17.10;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2011.02.08.00.46.53;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2011.02.08.00.28.04;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2011.02.07.22.05.11;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2011.02.04.17.24.18;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2011.01.31.19.57.16;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2011.01.28.20.22.05;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2011.01.28.19.38.14;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2011.01.27.23.16.38;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.01.21.23.23.51;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.01.21.00.34.33;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2010.12.13.21.36.33;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2010.12.10.19.28.44;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2010.12.10.00.40.25;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2010.12.09.16.57.01;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2010.12.09.00.34.40;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2010.12.08.23.04.37;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2010.12.08.00.33.29;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2010.12.07.00.29.45;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2010.12.04.00.29.43;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2010.11.19.21.28.21;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2010.11.17.20.20.52;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2010.11.08.20.38.04;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2010.11.05.21.32.25;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2010.11.05.19.00.45;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2010.11.03.20.45.03;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2010.08.24.18.17.56;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2010.08.24.16.30.30;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2010.08.20.21.07.36;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2010.08.20.19.42.21;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2010.08.20.16.43.58;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2010.08.19.18.00.11;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2010.08.19.14.22.14;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2010.08.18.20.58.23;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2010.08.17.22.22.56;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2010.06.04.20.23.31;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2010.06.02.18.38.41;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.27.23.27.55;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.24.20.32.07;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.21.23.46.13;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.21.15.28.01;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.20.23.18.42;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.52
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef CplexMgrH
#define CplexMgrH

//------------------------------------------------------------------------------
// Header file: "CplexMgr.h"
//
// Contains the declaration of class CplexMgr.
//    The declaration compiled only if CPLEX_EMBEDDED is defined.
//------------------------------------------------------------------------------

#ifdef CPLEX_EMBEDDED

#include <Assoc.h>

#include <cplex.h>

//------------------------------------------------------------------------------
// class CplexMgr
//
// Responsible for all interactions with CPLEX.
//------------------------------------------------------------------------------

class WitCplexMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitCplexMgr (WitOptProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitCplexMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void solveOptProb ();
         //
         // Solves the optimization problem by invoking CPLEX.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void setUpCplex ();
         //
         // Sets up CPLEX.

      void setUpLogFile ();
         //
         // Sets up the CPLEX log file.

      void shutDownCplex ();
         //
         // Shuts down CPLEX.

      void shutDownLogFile ();
         //
         // Shuts down the CPLEX log file.

      void solveOptProbAsLp ();
         //
         // Loads, solves and retrieves the solution to the optimization problem
         // as an LP for a first solve.

      void reSolveOptProbAsLp ();
         //
         // Loads, solves and retrieves the solution to the optimization problem
         // as an LP for a re-solve.

      void solveOptProbAsMip ();
         //
         // Loads, solves and retrieves the solution to the optimization problem
         // as a MIP.

      void solveOptProbAsLexOpt ();
         //
         // Loads, solves and retrieves the solution to the optimization problem
         // as a lexicographic optimization.

      void loadLp ();
         //
         // Loads the optimization problem into CPLEX as an LP.

      void getRowData (
            WitVector <double> & rhs,
            WitVector <char> &   sense);
         //
         // Retrieves the row portion of the LP aspect of the problem in the
         // representation required for CPXcopylp.

      void getColumnData (
            WitVector <double> & objective,
            WitVector <int> &    matbeg,
            WitVector <int> &    matcnt,
            WitVector <int> &    matind,
            WitVector <double> & matval,
            WitVector <double> & lb,
            WitVector <double> & ub);
         //
         // Retrieves the column portion of the LP aspect of the problem in the
         // representation required for CPXcopylp.

      void reviseLp ();
         //
         // Revises the LP problem that was previously loaded into CPLEX.

      void reviseBounds ();
         //
         // Revises the upper and lower bounds on variables of the LP problem
         // that was previously loaded into CPLEX.

      void reviseRHS ();
         //
         // Revises the right-hand-side values of the LP problem that was
         // previously loaded into CPLEX.

      void getConData (double & rhs, char & sense, WitOptCon * theOptCon);
         //
         // Sets rhs and sense to the CPLEX RHS and constraint sense for
         // theOptCon.

      void reviseObjCoeffs ();
         //
         // Revises the objective function coefficients of the LP problem that
         // was previously loaded into CPLEX.

      void loadIntData ();
         //
         // Loads the integrality data of the optimization problem into CPLEX.

      int countIntVars ();
         //
         // Counts and returns the number of integer variables in the
         // optimization problem.

      void writeMps ();
         //
         // Writes an MPS file of the opt problem entered into CPLEX, if
         // appropriate.

      void solveLexOpt ();
         //
         // Makes appropriate calls to CPLEX to solve the optimization problem
         // as a lexicographic optimization.

      void setObjCoef (WitOptVar * theOptVar, double theVal);
         //
         // Sets the objective coefficient of theOptVar to theVal.

      void lockLexObjElemVal (WitOptVar * theOptVar);
         //
         // Assuming theOptVar represents a lexicographic objective element that
         // has just been maximized, this function locks the variable at its
         // maximum value minus a tolerance.

      void setLpMethodByOptStarter ();
         //
         // Sets the LP method to be used by CPXlpopt based on the OptStarter.

      void solveLp (bool optNeeded);
         //
         // Makes appropriate calls to CPLEX to solve the optimization problem
         // as an LP.
         // optNeeded is to be true, iff an optimal solution is required.

      void loadInitSoln ();
         //
         // Loads the initial primal solution from myOptProblem () into CPLEX,
         // as needed.

      void printLpSolveInfo ();
         //
         // Prints some information about the LP solve.

      void checkLpSolnStatus (bool optNeeded);
         //
         // Checks the status of the LP solution.
         // optNeeded is to be true, iff an optimal solution is required.

      void repEarlyTermLpSolnStatus (bool optNeeded);
         //
         // Reports the status of the LP solution, in cases where the solve
         // routine terminated early.
         // optNeeded is to be true, iff an optimal solution is required.

      void solveMip (bool optNeeded);
         //
         // Makes appropriate calls to CPLEX to solve the optimization problem
         // as a MIP.
         // optNeeded is to be true, iff an optimal solution is required.

      void printMipSolveInfo ();
         //
         // Prints some information about the MIP solve.

      void checkMipSolnStatus (bool optNeeded);
         //
         // Checks the status of the MIP solution.
         // optNeeded is to be true, iff an optimal solution is required.

      void issueStatusMsg (WitMsgID theMsgID);
         //
         // Issues the Msg identitied by theMsgID, passing it the solution
         // status code and text as arguments.

      void storePrimalSoln ();
         //
         // Stores the primal solution in myOptProblem ().

      void storeDualSoln ();
         //
         // Stores the dual solution in myOptProblem ().

      void setSpecCpxPars ();
         //
         // Sets the CPLEX parameters as specified by the CpxParSpecs.

      void setSpecIntCpxPar (WitCpxParSpec * theCpxParSpec);
         //
         // Sets the CPLEX parameter as specified by theCpxParSpec.
         // The type of theCpxParSpec must be int.

      void setSpecDblCpxPar (WitCpxParSpec * theCpxParSpec);
         //
         // Sets the CPLEX parameter as specified by theCpxParSpec.
         // The type of theCpxParSpec must be double.

      void checkCpxParamType (WitCpxParSpec * theCpxParSpec);
         //
         // Verifies that the type of the CPLEX parameter for theCpxParSpec
         // matches the type of theCpxParSpec.

      int findCpxParamNum (WitCpxParSpec * theCpxParSpec);
         //
         // Determines and returns the CPLEX parameter number for
         // theCpxParSpec, if any; otherwise issues a severe error.

      void setIntParam (int theCpxParam, int theValue);
         //
         // Sets the value of the CPLEX parameter indicated by theCpxParam to
         // theValue.

      void storeCplexStatus ();
         //
         // Retrieves the solution status code and text from CPLEX and stores it
         // in myOptComp ().

      void storeObjBoundInfo ();
         //
         // Retrieves the objective function bound and MIP relative gap from
         // CPLEX and stores it in myOptComp ().

      void callCplex (const char * theFuncName, int theErrCode);
         //
         // Calls checkErrCode (theErrCode, theFuncName).
         // The intention is to use a call to a CPLEX function as the second
         // argument.

      void checkErrCode (int theErrCode, const char * theFuncName);
         //
         // If theErrCode is not 0, issues a severe message indicating
         // theErrCode as a CPLEX error code and theFuncName as the name of the
         // CPLEX function that returned the error code.

      bool mipMode ();
         //
         // Returns true, iff myOptProblem is a MIP.

      noCopyCtorAssign (WitCplexMgr);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitOptProblem * const myOptProblem_;
         //
         // The OptProblem that owns this CplexMgr.

      CPXENVptr myCpxEnv_;
         //
         // The CPLEX environment for this CplexMgr.

      CPXLPptr myCpxLp_;
         //
         // The CPLEX LP problem for this CplexMgr.
   };

#endif // CPLEX_EMBEDDED

#endif
@


1.51
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.50
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d33 2
a34 140
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitCplexMgr (WitOptProblem *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitCplexMgr ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

virtual void solveOptProb ();
//
// Solves the optimization problem by invoking CPLEX.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void setUpCplex ();
//
// Sets up CPLEX.

void setUpLogFile ();
//
// Sets up the CPLEX log file.

void shutDownCplex ();
//
// Shuts down CPLEX.

void shutDownLogFile ();
//
// Shuts down the CPLEX log file.

void solveOptProbAsLp ();
//
// Loads, solves and retrieves the solution to the optimization problem
// as an LP for a first solve.

void reSolveOptProbAsLp ();
//
// Loads, solves and retrieves the solution to the optimization problem
// as an LP for a re-solve.

void solveOptProbAsMip ();
//
// Loads, solves and retrieves the solution to the optimization problem
// as a MIP.

void solveOptProbAsLexOpt ();
//
// Loads, solves and retrieves the solution to the optimization problem
// as a lexicographic optimization.

void loadLp ();
//
// Loads the optimization problem into CPLEX as an LP.

void getRowData (
WitVector <double> & rhs,
WitVector <char> &   sense);
//
// Retrieves the row portion of the LP aspect of the problem in the
// representation required for CPXcopylp.

void getColumnData (
WitVector <double> & objective,
WitVector <int> &    matbeg,
WitVector <int> &    matcnt,
WitVector <int> &    matind,
WitVector <double> & matval,
WitVector <double> & lb,
WitVector <double> & ub);
//
// Retrieves the column portion of the LP aspect of the problem in the
// representation required for CPXcopylp.

void reviseLp ();
//
// Revises the LP problem that was previously loaded into CPLEX.

void reviseBounds ();
//
// Revises the upper and lower bounds on variables of the LP problem
// that was previously loaded into CPLEX.

void reviseRHS ();
//
// Revises the right-hand-side values of the LP problem that was
// previously loaded into CPLEX.

void getConData (double & rhs, char & sense, WitOptCon * theOptCon);
//
// Sets rhs and sense to the CPLEX RHS and constraint sense for
// theOptCon.

void reviseObjCoeffs ();
//
// Revises the objective function coefficients of the LP problem that
// was previously loaded into CPLEX.

void loadIntData ();
//
// Loads the integrality data of the optimization problem into CPLEX.

int countIntVars ();
//
// Counts and returns the number of integer variables in the
// optimization problem.

void writeMps ();
//
// Writes an MPS file of the opt problem entered into CPLEX, if
// appropriate.

void solveLexOpt ();
//
// Makes appropriate calls to CPLEX to solve the optimization problem
// as a lexicographic optimization.

void setObjCoef (WitOptVar * theOptVar, double theVal);
//
// Sets the objective coefficient of theOptVar to theVal.

void lockLexObjElemVal (WitOptVar * theOptVar);
//
// Assuming theOptVar represents a lexicographic objective element that
// has just been maximized, this function locks the variable at its
// maximum value minus a tolerance.
d36 269
a304 131
void setLpMethodByOptStarter ();
//
// Sets the LP method to be used by CPXlpopt based on the OptStarter.

void solveLp (bool optNeeded);
//
// Makes appropriate calls to CPLEX to solve the optimization problem
// as an LP.
// optNeeded is to be true, iff an optimal solution is required.

void loadInitSoln ();
//
// Loads the initial primal solution from myOptProblem () into CPLEX,
// as needed.

void printLpSolveInfo ();
//
// Prints some information about the LP solve.

void checkLpSolnStatus (bool optNeeded);
//
// Checks the status of the LP solution.
// optNeeded is to be true, iff an optimal solution is required.

void repEarlyTermLpSolnStatus (bool optNeeded);
//
// Reports the status of the LP solution, in cases where the solve
// routine terminated early.
// optNeeded is to be true, iff an optimal solution is required.

void solveMip (bool optNeeded);
//
// Makes appropriate calls to CPLEX to solve the optimization problem
// as a MIP.
// optNeeded is to be true, iff an optimal solution is required.

void printMipSolveInfo ();
//
// Prints some information about the MIP solve.

void checkMipSolnStatus (bool optNeeded);
//
// Checks the status of the MIP solution.
// optNeeded is to be true, iff an optimal solution is required.

void issueStatusMsg (WitMsgID theMsgID);
//
// Issues the Msg identitied by theMsgID, passing it the solution
// status code and text as arguments.

void storePrimalSoln ();
//
// Stores the primal solution in myOptProblem ().

void storeDualSoln ();
//
// Stores the dual solution in myOptProblem ().

void setSpecCpxPars ();
//
// Sets the CPLEX parameters as specified by the CpxParSpecs.

void setSpecIntCpxPar (WitCpxParSpec * theCpxParSpec);
//
// Sets the CPLEX parameter as specified by theCpxParSpec.
// The type of theCpxParSpec must be int.

void setSpecDblCpxPar (WitCpxParSpec * theCpxParSpec);
//
// Sets the CPLEX parameter as specified by theCpxParSpec.
// The type of theCpxParSpec must be double.

void checkCpxParamType (WitCpxParSpec * theCpxParSpec);
//
// Verifies that the type of the CPLEX parameter for theCpxParSpec
// matches the type of theCpxParSpec.

int findCpxParamNum (WitCpxParSpec * theCpxParSpec);
//
// Determines and returns the CPLEX parameter number for
// theCpxParSpec, if any; otherwise issues a severe error.

void setIntParam (int theCpxParam, int theValue);
//
// Sets the value of the CPLEX parameter indicated by theCpxParam to
// theValue.

void storeCplexStatus ();
//
// Retrieves the solution status code and text from CPLEX and stores it
// in myOptComp ().

void storeObjBoundInfo ();
//
// Retrieves the objective function bound and MIP relative gap from
// CPLEX and stores it in myOptComp ().

void callCplex (const char * theFuncName, int theErrCode);
//
// Calls checkErrCode (theErrCode, theFuncName).
// The intention is to use a call to a CPLEX function as the second
// argument.

void checkErrCode (int theErrCode, const char * theFuncName);
//
// If theErrCode is not 0, issues a severe message indicating
// theErrCode as a CPLEX error code and theFuncName as the name of the
// CPLEX function that returned the error code.

bool mipMode ();
//
// Returns true, iff myOptProblem is a MIP.

noCopyCtorAssign (WitCplexMgr);

//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------

WitOptProblem * const myOptProblem_;
//
// The OptProblem that owns this CplexMgr.

CPXENVptr myCpxEnv_;
//
// The CPLEX environment for this CplexMgr.

CPXLPptr myCpxLp_;
//
// The CPLEX LP problem for this CplexMgr.
};
@


1.49
log
@Replaced class SolverMgr with class CplexGateway.
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d33 140
a172 2
   {
   public:
d174 131
a304 269
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitCplexMgr (WitOptProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitCplexMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void solveOptProb ();
         //
         // Solves the optimization problem by invoking CPLEX.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void setUpCplex ();
         //
         // Sets up CPLEX.

      void setUpLogFile ();
         //
         // Sets up the CPLEX log file.

      void shutDownCplex ();
         //
         // Shuts down CPLEX.

      void shutDownLogFile ();
         //
         // Shuts down the CPLEX log file.

      void solveOptProbAsLp ();
         //
         // Loads, solves and retrieves the solution to the optimization problem
         // as an LP for a first solve.

      void reSolveOptProbAsLp ();
         //
         // Loads, solves and retrieves the solution to the optimization problem
         // as an LP for a re-solve.

      void solveOptProbAsMip ();
         //
         // Loads, solves and retrieves the solution to the optimization problem
         // as a MIP.

      void solveOptProbAsLexOpt ();
         //
         // Loads, solves and retrieves the solution to the optimization problem
         // as a lexicographic optimization.

      void loadLp ();
         //
         // Loads the optimization problem into CPLEX as an LP.

      void getRowData (
            WitVector <double> & rhs,
            WitVector <char> &   sense);
         //
         // Retrieves the row portion of the LP aspect of the problem in the
         // representation required for CPXcopylp.

      void getColumnData (
            WitVector <double> & objective,
            WitVector <int> &    matbeg,
            WitVector <int> &    matcnt,
            WitVector <int> &    matind,
            WitVector <double> & matval,
            WitVector <double> & lb,
            WitVector <double> & ub);
         //
         // Retrieves the column portion of the LP aspect of the problem in the
         // representation required for CPXcopylp.

      void reviseLp ();
         //
         // Revises the LP problem that was previously loaded into CPLEX.

      void reviseBounds ();
         //
         // Revises the upper and lower bounds on variables of the LP problem
         // that was previously loaded into CPLEX.

      void reviseRHS ();
         //
         // Revises the right-hand-side values of the LP problem that was
         // previously loaded into CPLEX.

      void getConData (double & rhs, char & sense, WitOptCon * theOptCon);
         //
         // Sets rhs and sense to the CPLEX RHS and constraint sense for
         // theOptCon.

      void reviseObjCoeffs ();
         //
         // Revises the objective function coefficients of the LP problem that
         // was previously loaded into CPLEX.

      void loadIntData ();
         //
         // Loads the integrality data of the optimization problem into CPLEX.

      int countIntVars ();
         //
         // Counts and returns the number of integer variables in the
         // optimization problem.

      void writeMps ();
         //
         // Writes an MPS file of the opt problem entered into CPLEX, if
         // appropriate.

      void solveLexOpt ();
         //
         // Makes appropriate calls to CPLEX to solve the optimization problem
         // as a lexicographic optimization.

      void setObjCoef (WitOptVar * theOptVar, double theVal);
         //
         // Sets the objective coefficient of theOptVar to theVal.

      void lockLexObjElemVal (WitOptVar * theOptVar);
         //
         // Assuming theOptVar represents a lexicographic objective element that
         // has just been maximized, this function locks the variable at its
         // maximum value minus a tolerance.

      void setLpMethodByOptStarter ();
         //
         // Sets the LP method to be used by CPXlpopt based on the OptStarter.

      void solveLp (bool optNeeded);
         //
         // Makes appropriate calls to CPLEX to solve the optimization problem
         // as an LP.
         // optNeeded is to be true, iff an optimal solution is required.

      void loadInitSoln ();
         //
         // Loads the initial primal solution from myOptProblem () into CPLEX,
         // as needed.

      void printLpSolveInfo ();
         //
         // Prints some information about the LP solve.

      void checkLpSolnStatus (bool optNeeded);
         //
         // Checks the status of the LP solution.
         // optNeeded is to be true, iff an optimal solution is required.

      void repEarlyTermLpSolnStatus (bool optNeeded);
         //
         // Reports the status of the LP solution, in cases where the solve
         // routine terminated early.
         // optNeeded is to be true, iff an optimal solution is required.

      void solveMip (bool optNeeded);
         //
         // Makes appropriate calls to CPLEX to solve the optimization problem
         // as a MIP.
         // optNeeded is to be true, iff an optimal solution is required.

      void printMipSolveInfo ();
         //
         // Prints some information about the MIP solve.

      void checkMipSolnStatus (bool optNeeded);
         //
         // Checks the status of the MIP solution.
         // optNeeded is to be true, iff an optimal solution is required.

      void issueStatusMsg (WitMsgID theMsgID);
         //
         // Issues the Msg identitied by theMsgID, passing it the solution
         // status code and text as arguments.

      void storePrimalSoln ();
         //
         // Stores the primal solution in myOptProblem ().

      void storeDualSoln ();
         //
         // Stores the dual solution in myOptProblem ().

      void setSpecCpxPars ();
         //
         // Sets the CPLEX parameters as specified by the CpxParSpecs.

      void setSpecIntCpxPar (WitCpxParSpec * theCpxParSpec);
         //
         // Sets the CPLEX parameter as specified by theCpxParSpec.
         // The type of theCpxParSpec must be int.

      void setSpecDblCpxPar (WitCpxParSpec * theCpxParSpec);
         //
         // Sets the CPLEX parameter as specified by theCpxParSpec.
         // The type of theCpxParSpec must be double.

      void checkCpxParamType (WitCpxParSpec * theCpxParSpec);
         //
         // Verifies that the type of the CPLEX parameter for theCpxParSpec
         // matches the type of theCpxParSpec.

      int findCpxParamNum (WitCpxParSpec * theCpxParSpec);
         //
         // Determines and returns the CPLEX parameter number for
         // theCpxParSpec, if any; otherwise issues a severe error.

      void setIntParam (int theCpxParam, int theValue);
         //
         // Sets the value of the CPLEX parameter indicated by theCpxParam to
         // theValue.

      void storeCplexStatus ();
         //
         // Retrieves the solution status code and text from CPLEX and stores it
         // in myOptComp ().

      void storeObjBoundInfo ();
         //
         // Retrieves the objective function bound and MIP relative gap from
         // CPLEX and stores it in myOptComp ().

      void callCplex (const char * theFuncName, int theErrCode);
         //
         // Calls checkErrCode (theErrCode, theFuncName).
         // The intention is to use a call to a CPLEX function as the second
         // argument.

      void checkErrCode (int theErrCode, const char * theFuncName);
         //
         // If theErrCode is not 0, issues a severe message indicating
         // theErrCode as a CPLEX error code and theFuncName as the name of the
         // CPLEX function that returned the error code.

      bool mipMode ();
         //
         // Returns true, iff myOptProblem is a MIP.

      noCopyCtorAssign (WitCplexMgr);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitOptProblem * const myOptProblem_;
         //
         // The OptProblem that owns this CplexMgr.

      CPXENVptr myCpxEnv_;
         //
         // The CPLEX environment for this CplexMgr.

      CPXLPptr myCpxLp_;
         //
         // The CPLEX LP problem for this CplexMgr.
   };
@


1.48
log
@Revisions for the removal of COIN.
@
text
@d22 1
a22 1
#include <SolverMgr.h>
a29 6
//
// Class hierarchy:
//
// ProbAssoc
//    SolverMgr
//       CplexMgr
d32 1
a32 1
class WitCplexMgr: public WitSolverMgr
d54 1
a54 1
         // Override from class SolverMgr.
@


1.47
log
@CPLEX
@
text
@d289 4
d299 4
@


1.46
log
@CPLEX
@
text
@d272 1
a272 1
      void storeObjBound ();
d274 2
a275 2
         // Retrieves the objective function bound from CPLEX and stores it
         // in myOptComp ().
@


1.45
log
@CPLEX
@
text
@d272 5
@


1.44
log
@CPLEX
@
text
@a17 2
//
// It is intended that this file only be included by CplexMgr.C.
d20 2
a23 2
#ifdef CPLEX_EMBEDDED

@


1.43
log
@CPLEX
@
text
@d206 1
a206 1
      void repEarlyTermLpSolnStatus (int theStatCode, bool optNeeded);
a209 1
         // theStatCode is to be the solution status from CPLEX.
d227 5
d269 5
@


1.42
log
@CPLEX
@
text
@d206 1
a206 1
      void repEarlyTermLpSolnStatus (int theStatus, bool optNeeded);
d210 1
a210 1
         // theStatus is to be the solution status from CPLEX.
@


1.41
log
@CPLEX
@
text
@d267 1
a267 1
         // Calls checkErrCode (theErrCode, theFuncName, false).
d271 1
a271 4
      void checkErrCode (
            int          theErrCode,
            const char * theFuncName,
            bool         funcIsSolver);
d273 3
a275 4
         // If theErrCode is not 0, issues a fatal message indicating theErrCode
         // as a CPLEX error code and theFuncName as the name of the CPLEX
         // function that returned the error code.
         // funcIsSolver is to be true, iff the function was a solve routine.
@


1.40
log
@CPLEX
@
text
@d267 1
a267 1
         // Calls checkErrCode (theErrCode, theFuncName).
d271 4
a274 1
      void checkErrCode (int theErrCode, const char * theFuncName);
d279 1
a279 6

      void callSolveFunc (const char * theFuncName, int theErrCode);
         //
         // If theErrCode is not 0, issues a severe message indicating
         // theErrCode as a CPLEX error code and theFuncName as the name of the
         // CPLEX solve routine that returned the error code.
@


1.39
log
@CPLEX
@
text
@d274 8
a281 2
         // as a CPLEX error code and theFuncName as the name (without prefix)
         // of the CPLEX function that returned the error code.
@


1.38
log
@CPLEX Parameters
@
text
@a289 4

      bool mipMode_;
         //
         // True, iff the optimization problem is to be solved as a MIP.
@


1.37
log
@CPLEX solution status
@
text
@d250 5
@


1.36
log
@CPLEX (bug fix)
@
text
@d206 1
a206 1
      void checkNonOptLpSolnStatus (int stat, bool optNeeded);
d208 3
a210 3
         // Checks the status of the LP solution, in cases where it is not
         // optimal, but may be acceptable.
         // stat is to be the solution status from CPLEX.
@


1.35
log
@CPLEX Solution Status
@
text
@d157 5
d285 4
@


1.34
log
@CPLEX Solution Status
@
text
@d208 1
a208 1
      void solveMip ();
d212 1
d218 1
a218 1
      void checkMipSolnStatus ();
d221 1
a221 1
         // Issues an error, if it is anything other than optimal.
@


1.33
log
@CPLEX Parameters
@
text
@d181 1
a181 1
      void solveLp ();
d185 1
d192 1
a192 1
      void printLpStats ();
d194 1
a194 1
         // Prints some statistics about the LP solve.
d196 1
a196 1
      void checkLpSolnStatus ();
d199 8
a206 1
         // Issues an error, if it is anything other than optimal.
d213 1
a213 1
      void printMipStats ();
d215 1
a215 1
         // Prints some statistics about the MIP solve.
@


1.32
log
@CPLEX Parameters
@
text
@d226 15
@


1.31
log
@CPLEX
@
text
@d222 4
@


1.30
log
@CPLEX
@
text
@d143 5
a152 5
      void getConData (double & rhs, char & sense, WitOptCon * theOptCon);
         //
         // Sets rhs and sense to the CPLEX RHS and constraint sense for
         // theOptCon.

d162 19
a213 19
      void solveLexOpt ();
         //
         // Makes appropriate calls to CPLEX to solve the optimization problem
         // as a lexicographic optimization.

      void setObjCoef (WitOptVar * theOptVar, double theVal);
         //
         // Sets the objective coefficient of theOptVar to theVal.

      void lockLexObjElemVal (WitOptVar * theOptVar);
         //
         // Assuming theOptVar represents a lexicographic objective element that
         // has just been maximized, this function locks the variable at its
         // maximum value minus a tolerance.

      void setLpMethodByOptStarter ();
         //
         // Sets the LP method to be used by CPXlpopt based on the OptStarter.

@


1.29
log
@CPLEX
@
text
@d101 1
a101 1
      void solveOptProbAsLexLp ();
d104 1
a104 6
         // as a lexicographic LP.

      void solveOptProbAsLexMip ();
         //
         // Loads, solves and retrieves the solution to the optimization problem
         // as a lexicographic MIP.
d195 1
a195 6
      void solveLexLp ();
         //
         // Makes appropriate calls to CPLEX to solve the optimization problem
         // as a lexicographic LP.

      void solveLexMip ();
d198 1
a198 1
         // as a lexicographic MIP.
@


1.28
log
@CPLEX
@
text
@d220 4
@


1.27
log
@CPLEX
@
text
@d205 5
@


1.26
log
@CPLEX
@
text
@d106 5
@


1.25
log
@CPLEX
@
text
@d223 1
a223 1
      void checkErrCode (const char * theFuncName);
d225 9
a233 3
         // Issues a fatal Msg if the current CPLEX error code is not 0.
         // theFuncName is to be the name of the CPLEX function to which the
         // error code applies.
a240 4
      int curErrCode_;
         //
         // The error code for the most recent call to the CPLEX function.

@


1.24
log
@CPLEX
@
text
@d223 1
a223 1
      void checkStatus (const char * theFuncName);
d225 1
a225 1
         // Issues a fatal Msg if the current CPLEX status code is not 0.
d227 1
a227 1
         // status code applies.
d235 1
a235 1
      int myCpxStatus_;
d237 1
a237 1
         // The status code for the most recent call to the CPLEX function.
@


1.23
log
@CPLEX
@
text
@d200 10
@


1.22
log
@CPLEX
@
text
@d101 5
d195 5
@


1.21
log
@CPLEX
@
text
@d185 5
@


1.20
log
@CPLEX
@
text
@d60 1
a60 1
      virtual void solve ();
d86 15
d103 1
a103 1
         // Loads the entire LP problem into CPLEX.
d148 4
d167 4
d176 9
@


1.19
log
@CPLEX
@
text
@a77 4
      void setParams ();
         //
         // Sets CPLEX parameters.

d138 1
a138 1
      void solveLpUnacc ();
d141 1
a141 1
         // as an LP in unaccelerated mode.
a147 5
      void solveLpAcc ();
         //
         // Makes appropriate calls to CPLEX to solve the optimization problem
         // as an LP in accelerated mode.

d161 5
@


1.18
log
@CPLEX
@
text
@d142 1
a142 1
      void solveLp ();
d145 1
a145 1
         // as an LP.
d152 5
@


1.17
log
@CPLEX
@
text
@d92 1
a92 1
         // loads the LP problem into CPLEX.
d113 24
@


1.16
log
@CPLEX
@
text
@d82 8
a140 8
      void shutDownCplex ();
         //
         // Shuts down CPLEX.

      void shutDownLogFile ();
         //
         // Shuts down the CPLEX log file.

@


1.15
log
@CPLEX
@
text
@d105 5
@


1.14
log
@CPLEX
@
text
@d78 4
@


1.13
log
@CPLEX
@
text
@d82 19
@


1.12
log
@CPLEX
@
text
@d87 5
@


1.11
log
@CPLEX
@
text
@d96 4
@


1.10
log
@CPLEX
@
text
@d48 1
a48 1
      WitCplexMgr (WitOptModel *);
d84 2
a85 2
         // Makes appropriate calls to CPLEX to solve the optimization model as
         // an LP in the usual way.
d94 1
a94 1
         // Stores the primal solution in myOptModel ().
@


1.9
log
@CPLEX
@
text
@d78 1
a78 1
      void loadLP ();
d82 1
a82 6
      void solveLpUnacc ();
         //
         // Makes appropriate calls to CPLEX to solve the optimization model as
         // an LP in unaccelerated mode.

      void solveLpAsUsual ();
d92 4
@


1.8
log
@CPLEX
@
text
@d82 15
@


1.7
log
@CPLEX
@
text
@a25 2
#define  CPLEX_RUNTIME_LIC

d78 4
@


1.6
log
@CPLEX
@
text
@d76 4
d84 4
@


1.5
log
@CPLEX
@
text
@d26 4
d72 9
a80 1
      void tryCplex ();
d82 3
a84 2
         // Tries calling some CPLEX functions.
         // (Temporary experimental code.)
d91 12
@


1.4
log
@CPLEX
@
text
@d17 1
a17 1
//    The declaration compiled only if CPLEX_EMBEDDED == 1.
d24 1
a24 1
#if CPLEX_EMBEDDED == 1
d80 1
a80 1
#endif // CPLEX_EMBEDDED == 1
@


1.3
log
@CPLEX
@
text
@d17 3
d24 2
d80 2
@


1.2
log
@CPLEX
@
text
@d63 5
@


1.1
log
@CPLEX
@
text
@a37 8
      // Static public member functions.
      //------------------------------------------------------------------------

      static bool cplexEmbedded ();
         //
         // Returns true, iff CPLEX is embedded into this build of WIT.

      //------------------------------------------------------------------------
@

