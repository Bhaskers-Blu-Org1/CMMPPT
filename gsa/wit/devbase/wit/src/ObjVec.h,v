head	1.24;
access;
symbols;
locks; strict;
comment	@ * @;


1.24
date	2011.09.28.23.49.43;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.09.24.00.28.04;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.08.30.20.17.46;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2010.01.06.20.42.40;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2010.01.06.20.10.32;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.12.30.20.02.27;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.12.29.23.24.32;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.12.29.22.53.17;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2009.12.29.20.42.57;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.12.29.20.17.18;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.12.29.19.39.05;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.12.29.16.33.45;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.12.25.00.34.51;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.12.24.22.58.55;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.12.24.21.00.04;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.12.24.20.26.59;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.12.23.22.39.55;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.12.23.00.21.49;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.12.22.23.44.51;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.12.21.20.17.09;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.18.23.47.57;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.12.18.00.46.39;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.17.23.37.38;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.16.23.21.43;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ObjVecH
#define ObjVecH

//------------------------------------------------------------------------------
// Header file: "ObjVec.h"
//
// Contains the declaration of class ObjVec.
//------------------------------------------------------------------------------

#include <ObjVecIR.h>

//------------------------------------------------------------------------------
// Class ObjVec
//
// "Objective Vector"
//
// Represents a vector of doubles that holds the value of an objective function
// attribute.
//------------------------------------------------------------------------------

class WitObjVec
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitObjVec (WitProblem *, double initValue);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitObjVec ();

      //------------------------------------------------------------------------
      // Wrapper methods for myObjVecIR_.
      //------------------------------------------------------------------------

      void operator = (const WitObjVec & theObjVec);

      void writeDataMulti (
         const char *   attrName,
         WitDelComp *   theDelComp,
         WitObjective * theObj)
         const;

      void display (WitMsgID, WitProblem *) const;

      inline const WitDblFlexVec & curDblFlexVec () const
         {
         return myObjVecIR_->curDblFlexVec ();
         }

      inline WitDblFlexVec & curDblFlexVec ()
         {
         return myObjVecIR_->curDblFlexVec ();
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      static WitObjVecIR * newObjVecIR (
            WitProblem * theProblem,
            double       initValue);
         //
         // Creates and returns a new ObjVecIR of the appropriate derived class
         // for theProblem.

      noCopyCtor (WitObjVec);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitObjVecIR * const myObjVecIR_;
         //
         // The ObjVecIR owned by this ObjVec that constitutes its internal
         // representation.
   };

#endif
@


1.23
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.22
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d31 2
a32 2
{
public:
d34 3
a36 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d38 1
a38 1
WitObjVec (WitProblem *, double initValue);
d40 3
a42 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d44 1
a44 1
virtual ~WitObjVec ();
d46 3
a48 3
//------------------------------------------------------------------------
// Wrapper methods for myObjVecIR_.
//------------------------------------------------------------------------
d50 1
a50 1
void operator = (const WitObjVec & theObjVec);
d52 5
a56 5
void writeDataMulti (
const char *   attrName,
WitDelComp *   theDelComp,
WitObjective * theObj)
const;
d58 1
a58 1
void display (WitMsgID, WitProblem *) const;
d60 4
a63 4
inline const WitDblFlexVec & curDblFlexVec () const
{
return myObjVecIR_->curDblFlexVec ();
}
d65 4
a68 4
inline WitDblFlexVec & curDblFlexVec ()
{
return myObjVecIR_->curDblFlexVec ();
}
d70 1
a70 1
private:
d72 3
a74 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d76 6
a81 6
static WitObjVecIR * newObjVecIR (
WitProblem * theProblem,
double       initValue);
//
// Creates and returns a new ObjVecIR of the appropriate derived class
// for theProblem.
d83 1
a83 1
noCopyCtor (WitObjVec);
d85 3
a87 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d89 5
a93 5
WitObjVecIR * const myObjVecIR_;
//
// The ObjVecIR owned by this ObjVec that constitutes its internal
// representation.
};
@


1.21
log
@Multi-objective mode
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d31 2
a32 2
   {
   public:
d34 3
a36 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d38 1
a38 1
      WitObjVec (WitProblem *, double initValue);
d40 3
a42 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d44 1
a44 1
      virtual ~WitObjVec ();
d46 3
a48 3
      //------------------------------------------------------------------------
      // Wrapper methods for myObjVecIR_.
      //------------------------------------------------------------------------
d50 1
a50 1
      void operator = (const WitObjVec & theObjVec);
d52 5
a56 5
      void writeDataMulti (
         const char *   attrName,
         WitDelComp *   theDelComp,
         WitObjective * theObj)
         const;
d58 1
a58 1
      void display (WitMsgID, WitProblem *) const;
d60 4
a63 4
      inline const WitDblFlexVec & curDblFlexVec () const
         {
         return myObjVecIR_->curDblFlexVec ();
         }
d65 4
a68 4
      inline WitDblFlexVec & curDblFlexVec ()
         {
         return myObjVecIR_->curDblFlexVec ();
         }
d70 1
a70 1
   private:
d72 3
a74 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d76 6
a81 6
      static WitObjVecIR * newObjVecIR (
            WitProblem * theProblem,
            double       initValue);
         //
         // Creates and returns a new ObjVecIR of the appropriate derived class
         // for theProblem.
d83 1
a83 1
      noCopyCtor (WitObjVec);
d85 3
a87 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d89 5
a93 5
      WitObjVecIR * const myObjVecIR_;
         //
         // The ObjVecIR owned by this ObjVec that constitutes its internal
         // representation.
   };
@


1.20
log
@Multi-objective mode
@
text
@d50 1
a50 3
      void operator = (const WitObjVec &     theObjVec);
      void operator = (const WitDblFlexVec & theDblFlexVec);
      void operator = (const WitIVRealArg &  theIVRealArg);
d65 5
@


1.19
log
@Multi-Objective Mode
@
text
@a66 5
      inline const WitDblFlexVec & operator () (WitObjective * theObj) const
         {
         return myObjVecIR_->myDblFlexVecFor (theObj);
         }

@


1.18
log
@Multi-Objective Mode
@
text
@d67 5
@


1.17
log
@Multi-Objective Mode
@
text
@d38 1
a38 1
      WitObjVec (WitProblem *);
d73 3
a75 1
      static WitObjVecIR * newObjVecIR (WitProblem * theProblem);
@


1.16
log
@Multi-Objective Mode
@
text
@d62 1
a62 1
      inline operator const WitDblFlexVec & () const
@


1.15
log
@Multi-Objective Mode
@
text
@a53 2
      void writeDataSingle (const char * attrName) const;

@


1.14
log
@Multi-Objective Mode
@
text
@d62 1
a62 1
      void display (WitMsgID theMsgID) const;
@


1.13
log
@Multi-Objective Mode
@
text
@d50 3
a52 9
      inline void copyFrom (const WitObjVec & theObjVec)
         {
         myObjVecIR_->copyFrom (theObjVec.myObjVecIR_);
         }

      inline void writeDataSingle (const char * attrName) const
         {
         myObjVecIR_->writeDataSingle (attrName);
         }
d54 1
a54 8
      inline void writeDataMulti (
            const char *   attrName,
            WitDelComp *   theDelComp,
            WitObjective * theObj)
            const
         {
         myObjVecIR_->writeDataMulti (attrName, theDelComp, theObj);
         }
d56 5
a60 4
      inline void display (WitMsgID theMsgID) const
         {
         myObjVecIR_->display (theMsgID);
         }
d62 1
a62 4
      inline WitDblFlexVec & curDblFlexVec ()
         {
         return myObjVecIR_->curDblFlexVec ();
         }
d64 1
a64 1
      inline const WitDblFlexVec & curDblFlexVec () const
d80 1
a80 1
      noCopyCtorAssign (WitObjVec);
@


1.12
log
@Multi-Objective Mode
@
text
@d19 1
a19 1
#include <Util.h>
a27 6
//
// Class hierarchy:
//
//    ObjVec
//      SingleObjVec
//      MultiObjVec
d35 6
d47 1
a47 1
      // Other public member functions.
d50 4
a53 3
      virtual void copyFrom (const WitObjVec * theObjVec) = 0;
         //
         // Copies the contents of theObjVec into this ObjVec.
d55 4
a58 6
      virtual void writeDataSingle (const char * attrName) const = 0;
         //
         // Writes this ObjVec to the input data output file, as appropriate for
         // single-objective mode:
         //    In single-objective mode, the DblFlexVec is written.
         //    In  multi-objective mode, nothing        is written.
d60 1
a60 1
      virtual void writeDataMulti (
d64 19
a82 8
            const = 0;
         //
         // Writes this ObjVec to the input data output file, as appropriate for
         // multi-objective mode:
         //    In single-objective mode, a fatal error is issued.
         //    In  multi-objective mode, the DblFlexVec for theObj is written.
         //       including the set clause for theDelComp.
         //       The writing is only done if the vector is not 0.
d84 1
a84 17
      virtual void display (WitMsgID theMsgID) const = 0;
         //
         // Displays this ObjVec, issuing the indicated Msg.

      virtual const WitSingleObjVec * thisSingleObjVec () const;
      virtual const WitMultiObjVec *  thisMultiObjVec  () const;
         //
         // Returns this ObjVec as a SingleObjVec, if it is one;
         //    otherwise issues a fatal error.
         // Returns this ObjVec as a MultiObjVec,  if it is one;
         //    otherwise issues a fatal error.

      virtual WitDblFlexVec & curDblFlexVec () = 0;
         //
         // Returns the current vector of doubles represented by this ObjVec.

   protected:
d87 1
a87 1
      // Protected constructor functions.
d90 4
a93 1
      WitObjVec ();
d95 1
a95 1
   private:
d98 1
a98 1
      // Private member functions.
d101 4
a104 11
      noCopyCtorAssign (WitObjVec);
   };

//------------------------------------------------------------------------------

namespace WitNonClass
   {
   WitObjVec * newObjVec (WitProblem * theProblem);
      //
      // Creates and returns a new ObjVec of the appropriate derived class for
      // theProblem.
@


1.11
log
@Multi-Objective Mode
@
text
@d63 1
d71 2
@


1.10
log
@Multi-Objective Mode
@
text
@d54 1
a54 1
      virtual void writeData (const char * attrName) const = 0;
d56 14
a69 3
         // Writes this ObjVec to the input data output file, if appropriate:
         //    In the single-objective case, the DblFlexVec is written.
         //    In the  multi-objective case, nothing        is written.
@


1.9
log
@Multi-Objective Mode
@
text
@d54 6
@


1.8
log
@Multi-Objective Mode
@
text
@d50 1
a50 1
      virtual void copyFrom (WitObjVec * theObjVec) = 0;
d54 1
a54 1
      virtual void display (WitMsgID theMsgID) = 0;
d58 2
a59 2
      virtual WitSingleObjVec * thisSingleObjVec ();
      virtual WitMultiObjVec *  thisMultiObjVec  ();
@


1.7
log
@Multi-Objective Mode
@
text
@d50 1
a50 1
      virtual WitDblFlexVec & curDblFlexVec () = 0;
d52 1
a52 1
         // Returns the current vector of doubles represented by this ObjVec.
d54 1
a54 1
      virtual void copyFrom (WitObjVec * theObjVec) = 0;
d56 1
a56 1
         // Copies the contents of theObjVec into this ObjVec.
d66 4
@


1.6
log
@Multi-Objective Mode
@
text
@d54 12
@


1.5
log
@Multi-Objective Mode
@
text
@d75 1
a75 1
   WitObjVec & newObjVecRef (WitProblem * theProblem);
d77 2
a78 2
      // Creates a new ObjVec of the appropriate derived class for theProblem
      // and returns a reference to it.
@


1.4
log
@Multi-Objective Mode
@
text
@d50 1
a50 6
      static WitObjVec & newInstanceRef (WitProblem * theProblem);
         //
         // Creates a new ObjVec of the appropriate derived class for theProblem
         // and returns a reference to it.

      virtual WitDblFlexVec & myDblFlexVec () = 0;
a53 12
      virtual void operator = (const WitObjVec & theObjVec) = 0;
         //
         // Assignment.

      virtual void copyInto (WitSingleObjVec & theSingleObjVec) const;
      virtual void copyInto (WitMultiObjVec  & theMultiObjVec)  const;
         //
         // If this ObjVec is the same run-time type as the argument ObjVec,
         // these functions copy the contents of this ObjVec into the argument
         // ObjVec. Otherwise a fatal message is issued.
         // The base class implementation issue the fatal message.

d68 11
a78 1
      noCopyCtor (WitObjVec);
@


1.3
log
@Multi-Objective Mode
@
text
@d33 1
d50 5
d59 12
d74 1
a74 1
      // Constructor functions.
d85 1
a85 1
      noCopyCtorAssign (WitObjVec);
@


1.2
log
@Multi-Objective Mode
@
text
@d28 5
d49 3
a51 1
      virtual WitDblFlexVec & curFlexVec () = 0;
@


1.1
log
@Multi-Objective Mode
@
text
@d23 5
d35 1
a35 1
      // Constructor functions.
d38 1
a38 1
      WitObjVec ();
d41 1
a41 1
      // Destructor function.
d44 3
a46 1
      ~WitObjVec ();
d49 1
a49 1
      // Other public member functions.
d52 1
a52 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
@

