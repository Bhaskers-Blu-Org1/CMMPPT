head	1.20;
access;
symbols
	sce_5_01_20080919:1.17
	latest_sce_4_20_20060523:1.17.0.2
	sce_4_20_20060523:1.17
	latest_sce4_20_OSL:1.16.0.2
	sce_4_20_OSL:1.16
	sce_410_withVa:1.14
	sce_4_05_20040511:1.11
	sce_4_00_20040201:1.3
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.0.4
	Root-of-EndRw:1.1
	rwToStl:1.1.0.2;
locks; strict;
comment	@ * @;


1.20
date	2011.09.28.23.49.35;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.09.24.00.27.57;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.08.30.20.17.40;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2006.05.02.17.34.03;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2005.09.15.19.47.10;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.09.14.21.54.45;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.07.13.15.54.09;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.02.24.23.23.56;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2005.02.24.19.46.27;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.04.19.22.16.28;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.16.21.32.55;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.25.21.21.58;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.25.19.59.37;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.26.18.59.42;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.24.21.32.06;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.12.19.13.39;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.04.22.31.27;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.01.21.05.03;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.02.22.18.34;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.09.19.52.33;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef MsgArgH
#define MsgArgH

//------------------------------------------------------------------------------
// Header file: "MsgArg.h"
//
// Contains the declaration of class MsgArg.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------

class MclArg;
class MclFacility;
class MclLevel;
class MclMsgFrag;

//------------------------------------------------------------------------------
// Class MsgArg
//
// Wrapper for class MclArg.
//
// Implemented in MsgFac.C.
//------------------------------------------------------------------------------

class WitMsgArg
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMsgArg ();
      WitMsgArg (bool                       rawArg);
      WitMsgArg (int                        rawArg);
      WitMsgArg (size_t                     rawArg);
      WitMsgArg (long                       rawArg);
      WitMsgArg (double                     rawArg);
      WitMsgArg (const WitISRealArg &       rawArg);
      WitMsgArg (const char *               rawArg);
      WitMsgArg (const WitString &          rawArg);
      WitMsgArg (const WitMsgFrag &         rawArg);
      WitMsgArg (const int *                rawArg, int length = 1);
      WitMsgArg (const float *              rawArg, int length = 1);
      WitMsgArg (const double *             rawArg, int length = 1);
      WitMsgArg (const WitVector <bool> &   rawArg);
      WitMsgArg (const WitVector <int> &    rawArg);
      WitMsgArg (const WitVector <double> & rawArg);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMsgArg ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void operator = (const WitMsgArg &);

      inline bool hasArg () const
         {
         return (myMclArgPtr_ != NULL);
         }

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline const MclArg & myMclArg () const
         {
         witAssert (hasArg ());

         return * myMclArgPtr_;
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtor (WitMsgArg);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      MclArg * myMclArgPtr_;
         //
         // Pointer to the MclArg wrapped by this MsgArg, if any;
         // otherwise NULL.
   };

#endif
@


1.19
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.18
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d37 2
a38 63
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitMsgArg ();
WitMsgArg (bool                       rawArg);
WitMsgArg (int                        rawArg);
WitMsgArg (size_t                     rawArg);
WitMsgArg (long                       rawArg);
WitMsgArg (double                     rawArg);
WitMsgArg (const WitISRealArg &       rawArg);
WitMsgArg (const char *               rawArg);
WitMsgArg (const WitString &          rawArg);
WitMsgArg (const WitMsgFrag &         rawArg);
WitMsgArg (const int *                rawArg, int length = 1);
WitMsgArg (const float *              rawArg, int length = 1);
WitMsgArg (const double *             rawArg, int length = 1);
WitMsgArg (const WitVector <bool> &   rawArg);
WitMsgArg (const WitVector <int> &    rawArg);
WitMsgArg (const WitVector <double> & rawArg);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitMsgArg ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void operator = (const WitMsgArg &);

inline bool hasArg () const
{
return (myMclArgPtr_ != NULL);
}

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

inline const MclArg & myMclArg () const
{
witAssert (hasArg ());

return * myMclArgPtr_;
}

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtor (WitMsgArg);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d40 66
a105 5
MclArg * myMclArgPtr_;
//
// Pointer to the MclArg wrapped by this MsgArg, if any;
// otherwise NULL.
};
@


1.17
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d37 63
a99 2
   {
   public:
d101 5
a105 66
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMsgArg ();
      WitMsgArg (bool                       rawArg);
      WitMsgArg (int                        rawArg);
      WitMsgArg (size_t                     rawArg);
      WitMsgArg (long                       rawArg);
      WitMsgArg (double                     rawArg);
      WitMsgArg (const WitISRealArg &       rawArg);
      WitMsgArg (const char *               rawArg);
      WitMsgArg (const WitString &          rawArg);
      WitMsgArg (const WitMsgFrag &         rawArg);
      WitMsgArg (const int *                rawArg, int length = 1);
      WitMsgArg (const float *              rawArg, int length = 1);
      WitMsgArg (const double *             rawArg, int length = 1);
      WitMsgArg (const WitVector <bool> &   rawArg);
      WitMsgArg (const WitVector <int> &    rawArg);
      WitMsgArg (const WitVector <double> & rawArg);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMsgArg ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void operator = (const WitMsgArg &);

      inline bool hasArg () const
         {
         return (myMclArgPtr_ != NULL);
         }

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline const MclArg & myMclArg () const
         {
         witAssert (hasArg ());

         return * myMclArgPtr_;
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtor (WitMsgArg);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      MclArg * myMclArgPtr_;
         //
         // Pointer to the MclArg wrapped by this MsgArg, if any;
         // otherwise NULL.
   };
@


1.16
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.15
log
@[multi-thread]
@
text
@a16 1
// Contains the declaration of class MsgIssueExc.
a106 66
//------------------------------------------------------------------------------
// Class MsgIssueExc
//
// "Message Issuing Exception"
// An exception of this type is thrown the code needs to issue a message, but
// cannot locally determine a MsgFacility to use. The exception is caught by the
// API, which issues the message. A MsgIssueExc stores a MsgID and 3 MsgArgs
// that are to be used to issue the message.
//------------------------------------------------------------------------------

class WitMsgIssueExc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMsgIssueExc (
            WitMsgID          theMsgID,
            const WitMsgArg & theMsgArg1,
            const WitMsgArg & theMsgArg2,
            const WitMsgArg & theMsgArg3);

      WitMsgIssueExc (const WitMsgIssueExc &);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMsgIssueExc ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitMsgID,          myMsgID)
      accessFunc (const WitMsgArg &, myMsgArg1)
      accessFunc (const WitMsgArg &, myMsgArg2)
      accessFunc (const WitMsgArg &, myMsgArg3)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      WitMsgArg & operator = (const WitMsgArg &);
         //
         // Not implemented.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMsgID myMsgID_;
         //
         // The MsgID of the Msg to be issued.

      WitMsgArg myMsgArg1_;
      WitMsgArg myMsgArg2_;
      WitMsgArg myMsgArg3_;
         //
         // The MsgArgs to be used in issuing the Msg.
   };

@


1.14
log
@[exceptions]
@
text
@d17 1
d69 11
d90 8
d99 43
a141 1
      // Other public member functions.
d144 4
a147 4
      inline bool hasArg () const
         {
         return (myMclArgPtr_ != NULL);
         }
d155 3
a157 1
      noCopyCtorAssign (WitMsgArg);
d163 7
a169 1
      MclArg * const myMclArgPtr_;
d171 1
a171 2
         // Pointer to the MclArg wrapped by this MsgArg, if any;
         // otherwise NULL.
@


1.13
log
@Vector PropRt.
@
text
@d32 2
@


1.12
log
@Vector Prop-Rt.
@
text
@d48 1
a48 1
      WitMsgArg (const WitInScalRA &        rawArg);
@


1.11
log
@Double Precision.
@
text
@d55 1
@


1.10
log
@Double Precision.
@
text
@a46 1
      WitMsgArg (float                      rawArg);
a55 1
      WitMsgArg (const WitVector <float> &  rawArg);
@


1.9
log
@Double Precision.
@
text
@d43 16
a58 14
      WitMsgArg (bool                      rawArg);
      WitMsgArg (int                       rawArg);
      WitMsgArg (size_t                    rawArg);
      WitMsgArg (long                      rawArg);
      WitMsgArg (float                     rawArg);
      WitMsgArg (double                    rawArg);
      WitMsgArg (const WitInScalRA &       rawArg);
      WitMsgArg (const char *              rawArg);
      WitMsgArg (const WitString &         rawArg);
      WitMsgArg (const WitMsgFrag &        rawArg);
      WitMsgArg (const int *               rawArg, int length = 1);
      WitMsgArg (const float *             rawArg, int length = 1);
      WitMsgArg (const WitVector <int> &   rawArg);
      WitMsgArg (const WitVector <float> & rawArg);
@


1.8
log
@Double Precision.
@
text
@d49 1
a49 1
      WitMsgArg (WitInScalRA               rawArg);
@


1.7
log
@Double Precision.
@
text
@d43 1
@


1.6
log
@Continued double precision.
@
text
@d48 1
a48 1
      WitMsgArg (InScalRA                  rawArg);
@


1.5
log
@Continued double precision.
@
text
@d48 1
@


1.4
log
@Continued double precision.
@
text
@a19 1
#include <StrDbl.h>
a47 1
      WitMsgArg (StrDbl                    rawArg);
@


1.3
log
@Continued implementation of PIP.
@
text
@d20 1
d49 1
@


1.2
log
@Internal changes.
@
text
@d34 1
a34 1
class WitMsgArg: public WitUtil
@


1.1
log
@Continued implementation of single-source.
@
text
@d77 1
a77 1
      inline WitBoolean hasArg () const
@

