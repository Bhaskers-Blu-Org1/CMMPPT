head	1.24;
access;
symbols
	sce_5_01_20080919:1.20;
locks; strict;
comment	@ * @;


1.24
date	2011.09.28.23.50.32;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.09.24.00.28.48;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.08.30.20.18.17;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2010.08.19.18.00.15;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.02.28.00.00.43;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.02.27.23.19.12;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.02.13.20.22.56;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.02.07.23.30.11;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.02.07.18.41.40;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.01.30.22.25.43;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.01.29.19.50.01;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.01.29.00.29.01;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.01.25.00.19.23;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.01.23.21.13.47;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.01.18.22.40.59;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.01.18.20.56.44;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.08.18.56.36;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.19.17.41.35;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.08.30.17.34.35;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.08.24.22.14.01;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.08.24.20.17.25;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.08.24.15.48.08;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.08.22.23.24.09;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.08.22.22.45.30;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef StochLocH
#define StochLocH

//------------------------------------------------------------------------------
// Header file: "StochLoc.h"
//
// Contains the declaration of class StochLoc.
//------------------------------------------------------------------------------

#include <ScenGroup.h>
#include <PtrMap.h>

//------------------------------------------------------------------------------
// Class StochLoc
//
// "Stochastic Location"
// Represents a pair consisting of a ScenGroup and a Period.
// Instances of this class are used to locate a StochVar or StochCon in the
// StochImpOP.
//
// Class hierarchy:
//
//    ProbAssoc
//       StochAssoc
//          StochLoc
//
// Implemented in StochOpt.C.
//------------------------------------------------------------------------------

class WitStochLoc: public WitStochAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStochLoc (WitScenGroup *, WitPeriod);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitStochLoc ();

      //------------------------------------------------------------------------
      // Other public member functions
      //------------------------------------------------------------------------

      void generateVariables ();
         //
         // Generates the StochVars associated with this StochLoc.

      void generateConstraints ();
         //
         // Generates the StochCons associated with this StochLoc.

      void clearStochVars ();
         //
         // Releases memory for PtrMaps to StochVars.

      void print ();
         //
         // Prints this StochLoc to the OptProblem file.

      //------------------------------------------------------------------------
      // StochVar look-up functions.
      //------------------------------------------------------------------------

      WitStScrapVar   * myScrapVarFor   (WitPart      *);
      WitStStockVar   * myStockVarFor   (WitMaterial  *);
      WitStExecVar    * myExecVarFor    (WitOperation *);
      WitStShipVar    * myShipVarFor    (WitDemand    *);
      WitStCumShipVar * myCumShipVarFor (WitDemand    *);
      WitStNonSubVar  * myNonSubVarFor  (WitBomEntry  *);
      WitStSubVar     * mySubVarFor     (WitSubEntry  *);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc    (WitPeriod,       myPer)
      accessFunc    (WitScenGroup *,  myScenGroup)

      accessWrapper (WitStochImpOP *, myStochImpOP, myScenGroup_)
      accessWrapper (WitStage *,      myStage,      myScenGroup_)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void genScrapVars   ();
      void genStockVars   ();
      void genShipVars    ();
      void genCumShipVars ();
      void genExecVars    ();
      void genNonSubVars  ();
      void genSubVars     ();
         //
         // Each of these functions generates the StochVars associated with this
         // StochLoc for a specific class derived from StochVar.

      void genResCons  ();
      void genShipCons ();
      void genSubCons  ();
         //
         // Each of these functions generates the StochCons associated with this
         // StochLoc for a specific class derived from StochCon.

      noCopyCtorAssign (WitStochLoc);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitScenGroup * const myScenGroup_;
         //
         // The ScenGroup that owns this StochLoc.

      const WitPeriod myPer_;
         //
         // The Period for this StochLoc.

      //-----------------------------------------------------------------------
      // PtrMaps to StochVars
      //
      // E.g.,myScrapVarFor (thePart) is the StScrapVar for myScenGroup_,
      // myPer_, and thePart, if any; otherwise NULL.
      //-----------------------------------------------------------------------

      WitPtrMap <WitPart,      WitStScrapVar>   myScrapVarFor_;
      WitPtrMap <WitMaterial,  WitStStockVar>   myStockVarFor_;
      WitPtrMap <WitOperation, WitStExecVar>    myExecVarFor_;
      WitPtrMap <WitDemand,    WitStShipVar>    myShipVarFor_;
      WitPtrMap <WitDemand,    WitStCumShipVar> myCumShipVarFor_;
      WitPtrMap <WitBomEntry,  WitStNonSubVar>  myNonSubVarFor_;
      WitPtrMap <WitSubEntry,  WitStSubVar>     mySubVarFor_;
   };

#endif
@


1.23
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.22
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d40 2
a41 12
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitStochLoc (WitScenGroup *, WitPeriod);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d43 107
a149 97
~WitStochLoc ();

//------------------------------------------------------------------------
// Other public member functions
//------------------------------------------------------------------------

void generateVariables ();
//
// Generates the StochVars associated with this StochLoc.

void generateConstraints ();
//
// Generates the StochCons associated with this StochLoc.

void clearStochVars ();
//
// Releases memory for PtrMaps to StochVars.

void print ();
//
// Prints this StochLoc to the OptProblem file.

//------------------------------------------------------------------------
// StochVar look-up functions.
//------------------------------------------------------------------------

WitStScrapVar   * myScrapVarFor   (WitPart      *);
WitStStockVar   * myStockVarFor   (WitMaterial  *);
WitStExecVar    * myExecVarFor    (WitOperation *);
WitStShipVar    * myShipVarFor    (WitDemand    *);
WitStCumShipVar * myCumShipVarFor (WitDemand    *);
WitStNonSubVar  * myNonSubVarFor  (WitBomEntry  *);
WitStSubVar     * mySubVarFor     (WitSubEntry  *);

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc    (WitPeriod,       myPer)
accessFunc    (WitScenGroup *,  myScenGroup)

accessWrapper (WitStochImpOP *, myStochImpOP, myScenGroup_)
accessWrapper (WitStage *,      myStage,      myScenGroup_)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void genScrapVars   ();
void genStockVars   ();
void genShipVars    ();
void genCumShipVars ();
void genExecVars    ();
void genNonSubVars  ();
void genSubVars     ();
//
// Each of these functions generates the StochVars associated with this
// StochLoc for a specific class derived from StochVar.

void genResCons  ();
void genShipCons ();
void genSubCons  ();
//
// Each of these functions generates the StochCons associated with this
// StochLoc for a specific class derived from StochCon.

noCopyCtorAssign (WitStochLoc);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitScenGroup * const myScenGroup_;
//
// The ScenGroup that owns this StochLoc.

const WitPeriod myPer_;
//
// The Period for this StochLoc.

//-----------------------------------------------------------------------
// PtrMaps to StochVars
//
// E.g.,myScrapVarFor (thePart) is the StScrapVar for myScenGroup_,
// myPer_, and thePart, if any; otherwise NULL.
//-----------------------------------------------------------------------

WitPtrMap <WitPart,      WitStScrapVar>   myScrapVarFor_;
WitPtrMap <WitMaterial,  WitStStockVar>   myStockVarFor_;
WitPtrMap <WitOperation, WitStExecVar>    myExecVarFor_;
WitPtrMap <WitDemand,    WitStShipVar>    myShipVarFor_;
WitPtrMap <WitDemand,    WitStCumShipVar> myCumShipVarFor_;
WitPtrMap <WitBomEntry,  WitStNonSubVar>  myNonSubVarFor_;
WitPtrMap <WitSubEntry,  WitStSubVar>     mySubVarFor_;
};
@


1.21
log
@CPLEX
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d40 12
a51 2
   {
   public:
d53 97
a149 107
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStochLoc (WitScenGroup *, WitPeriod);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitStochLoc ();

      //------------------------------------------------------------------------
      // Other public member functions
      //------------------------------------------------------------------------

      void generateVariables ();
         //
         // Generates the StochVars associated with this StochLoc.

      void generateConstraints ();
         //
         // Generates the StochCons associated with this StochLoc.

      void clearStochVars ();
         //
         // Releases memory for PtrMaps to StochVars.

      void print ();
         //
         // Prints this StochLoc to the OptProblem file.

      //------------------------------------------------------------------------
      // StochVar look-up functions.
      //------------------------------------------------------------------------

      WitStScrapVar   * myScrapVarFor   (WitPart      *);
      WitStStockVar   * myStockVarFor   (WitMaterial  *);
      WitStExecVar    * myExecVarFor    (WitOperation *);
      WitStShipVar    * myShipVarFor    (WitDemand    *);
      WitStCumShipVar * myCumShipVarFor (WitDemand    *);
      WitStNonSubVar  * myNonSubVarFor  (WitBomEntry  *);
      WitStSubVar     * mySubVarFor     (WitSubEntry  *);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc    (WitPeriod,       myPer)
      accessFunc    (WitScenGroup *,  myScenGroup)

      accessWrapper (WitStochImpOP *, myStochImpOP, myScenGroup_)
      accessWrapper (WitStage *,      myStage,      myScenGroup_)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void genScrapVars   ();
      void genStockVars   ();
      void genShipVars    ();
      void genCumShipVars ();
      void genExecVars    ();
      void genNonSubVars  ();
      void genSubVars     ();
         //
         // Each of these functions generates the StochVars associated with this
         // StochLoc for a specific class derived from StochVar.

      void genResCons  ();
      void genShipCons ();
      void genSubCons  ();
         //
         // Each of these functions generates the StochCons associated with this
         // StochLoc for a specific class derived from StochCon.

      noCopyCtorAssign (WitStochLoc);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitScenGroup * const myScenGroup_;
         //
         // The ScenGroup that owns this StochLoc.

      const WitPeriod myPer_;
         //
         // The Period for this StochLoc.

      //-----------------------------------------------------------------------
      // PtrMaps to StochVars
      //
      // E.g.,myScrapVarFor (thePart) is the StScrapVar for myScenGroup_,
      // myPer_, and thePart, if any; otherwise NULL.
      //-----------------------------------------------------------------------

      WitPtrMap <WitPart,      WitStScrapVar>   myScrapVarFor_;
      WitPtrMap <WitMaterial,  WitStStockVar>   myStockVarFor_;
      WitPtrMap <WitOperation, WitStExecVar>    myExecVarFor_;
      WitPtrMap <WitDemand,    WitStShipVar>    myShipVarFor_;
      WitPtrMap <WitDemand,    WitStCumShipVar> myCumShipVarFor_;
      WitPtrMap <WitBomEntry,  WitStNonSubVar>  myNonSubVarFor_;
      WitPtrMap <WitSubEntry,  WitStSubVar>     mySubVarFor_;
   };
@


1.20
log
@Stochastic Implosion
@
text
@d28 1
a28 1
// StochImpOM.
d73 1
a73 1
         // Prints this StochLoc to the OptModel file.
d94 1
a94 1
      accessWrapper (WitStochImpOM *, myStochImpOM, myScenGroup_)
@


1.19
log
@Stochastic Implosion
@
text
@d28 1
a28 1
// StochImpOP.
d94 1
a94 1
      accessWrapper (WitStochImpOP *, myStochImpOP, myScenGroup_)
@


1.18
log
@Stochastic Implosion
@
text
@d73 1
a73 1
         // Prints this StochLoc to the OptProb file.
@


1.17
log
@Stochastic Implosion
@
text
@d79 7
a85 7
      WitStScrapVar   * myStScrapVarFor   (WitPart      *);
      WitStStockVar   * myStStockVarFor   (WitMaterial  *);
      WitStExecVar    * myStExecVarFor    (WitOperation *);
      WitStShipVar    * myStShipVarFor    (WitDemand    *);
      WitStCumShipVar * myStCumShipVarFor (WitDemand    *);
      WitStNonSubVar  * myStNonSubVarFor  (WitBomEntry  *);
      WitStSubVar     * myStSubVarFor     (WitSubEntry  *);
d103 7
a109 5
      void genPartVars   ();
      void genDemandVars ();
      void genOpnVars    ();
      void genBomEntVars ();
      void genSubVars    ();
d111 2
a112 2
         // Generates the StochVars associated with this StochLoc for each Part,
         // etc.
d114 3
a116 3
      void genPartCons   ();
      void genDemandCons ();
      void genBomEntCons ();
d118 2
a119 2
         // Generates the StochCons associated with this StochLoc for each Part,
         // etc.
d138 1
a138 1
      // E.g.,myStScrapVarFor (thePart) is the StScrapVar for myScenGroup_,
d142 7
a148 7
      WitPtrMap <WitPart,      WitStScrapVar>   myStScrapVarFor_;
      WitPtrMap <WitMaterial,  WitStStockVar>   myStStockVarFor_;
      WitPtrMap <WitOperation, WitStExecVar>    myStExecVarFor_;
      WitPtrMap <WitDemand,    WitStShipVar>    myStShipVarFor_;
      WitPtrMap <WitDemand,    WitStCumShipVar> myStCumShipVarFor_;
      WitPtrMap <WitBomEntry,  WitStNonSubVar>  myStNonSubVarFor_;
      WitPtrMap <WitSubEntry,  WitStSubVar>     myStSubVarFor_;
@


1.16
log
@Stochastic Implosion
@
text
@d95 1
a118 4
      bool myStageIncludes (WitNode * theNode);
         //
         // Returns true, iff the stage for this StochLoc includes theNode.

@


1.15
log
@Stochastic Implosion
@
text
@d120 1
a120 1
         // Returns true, iff myScenGroup_->myStage () includes theNode.
@


1.14
log
@Stochastic Implosion
@
text
@d118 1
a118 1
      bool matchesMyStage (WitNode * theNode);
d120 1
a120 2
         // Returns true, iff theNode and myPer_ jointly belong to
         // myScenGroup_->myStage ().
@


1.13
log
@Stochastic Implosion
@
text
@d118 1
a118 1
      bool notInOtherStage (WitNode * theNode);
d120 2
a121 1
         // Returns true, iff theNode does not belong to the other stage.
@


1.12
log
@Stochastic Implosion
@
text
@d118 1
a118 1
      bool intersectsMyStage (WitNode * theNode);
d120 1
a120 1
         // Returns true, iff theNode intersects myScenGroup_->myStage ().
@


1.11
log
@Stochastic Implosion
@
text
@d19 1
a19 1
#include <Assoc.h>
d29 8
d39 1
a39 1
class WitStochLoc: public WitProbAssoc
d91 4
a94 4
      accessFunc (WitPeriod,       myPer)
      accessFunc (WitScenGroup *,  myScenGroup)
      accessFunc (WitStochImpOP *, myStochImpOP)
      accessFunc (WitScenAttMgr *, myScenAttMgr)
d118 4
a135 8
      WitStochImpOP * myStochImpOP_;
         //
         // The StochImpOP for this StochLoc.

      WitScenAttMgr * myScenAttMgr_;
         //
         // The ScenAttMgr for this StochLoc.

@


1.10
log
@Stochastic Implosion
@
text
@a109 2
      int objectStage (WitNode *);

a119 4
      const int myStage_;
         //
         // The stage to which this StochLoc belongs.

d124 1
a124 1
      WitStochImpOP * const myStochImpOP_;
d128 1
a128 1
      WitScenAttMgr * const myScenAttMgr_;
@


1.9
log
@Stochastic Implosion
@
text
@d110 1
a110 1
      int stageIndex (WitNode *);
d122 1
a122 1
      const int myStageIndex_;
d124 1
a124 1
         // Indicates the stage to which this StochLoc belongs.
@


1.8
log
@Stochastic Implosion
@
text
@d94 5
a98 1
      bool matchesMyStage (WitNode * theNode);
d100 11
a110 2
         // Returns true, iff theNode belongs to the same stage as this
         // StochLoc.
d122 4
@


1.7
log
@Stochastic Implosion
@
text
@d86 1
d109 4
d117 1
a117 1
      const WitPeriod myPer_;
d119 1
a119 1
         // The Period for this StochLoc.
@


1.6
log
@Stochastic Implosion
@
text
@d83 3
a85 2
      accessFunc (WitPeriod,      myPer)
      accessFunc (WitScenGroup *, myScenGroup)
d106 5
a110 1
         // The ScenGroup for this StochLoc.
@


1.5
log
@Stochastic Implosion
@
text
@d53 5
a57 1
         // Generates that StochVars associated with this StochLoc.
d92 5
@


1.4
log
@Stochastic Implosion
@
text
@d26 1
a26 1
// Represents a pair consisting of a ScenSet and a Period.
d39 1
a39 1
      WitStochLoc (WitScenSet *, WitPeriod);
d79 2
a80 2
      accessFunc (WitPeriod,    myPer)
      accessFunc (WitScenSet *, myScenSet)
d94 1
a94 1
      WitScenSet * const myScenSet_;
d96 1
a96 1
         // The ScenSet for this StochLoc.
d105 1
a105 1
      // E.g.,myStScrapVarFor (thePart) is the StScrapVar for myScenSet_,
@


1.3
log
@Stochastic Implosion
@
text
@d79 2
a80 3
      accessFunc    (WitPeriod,    myPer)

      accessNonNull (WitScenSet *, myScenSet)
@


1.2
log
@Stochastic Implosion
@
text
@d59 4
d79 2
@


1.1
log
@Stochastic Implosion
@
text
@d51 4
a59 14
      // StochVar storing functions.
      // E.g. store (WitStScrapVar * theStScrapVar) stores theStScrapVar in
      // this StochLoc.
      //------------------------------------------------------------------------

      void store (WitStScrapVar   *);
      void store (WitStStockVar   *);
      void store (WitStExecVar    *);
      void store (WitStShipVar    *);
      void store (WitStCumShipVar *);
      void store (WitStNonSubVar  *);
      void store (WitStSubVar     *);

      //------------------------------------------------------------------------
@

