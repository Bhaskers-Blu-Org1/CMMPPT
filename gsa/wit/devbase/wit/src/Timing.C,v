head	1.31;
access;
symbols
	sce_5_01_20080919:1.24
	latest_sce_4_20_20060523:1.22.0.2
	sce_4_20_20060523:1.22
	latest_sce4_20_OSL:1.20.0.2
	sce_4_20_OSL:1.20
	sce_410_withVa:1.19
	sce_4_05_20040511:1.16
	sce_4_00_20040201:1.16
	nextGenBranch:1.15.0.2
	nextGenRoot:1.15
	sce_3_30_20030627:1.15
	EndRw-branch:1.10.0.4
	Root-of-EndRw:1.10
	rwToStl:1.10.0.2
	latest_sce_3_10_20010924:1.7.0.2
	sce_3_10_20010924:1.7
	latest_sce_3_00_20010601:1.5.0.2
	sce_3_00_20010601:1.5
	latest_sce_2_31_20010308:1.3.0.2
	sce_2_31_20010308:1.3
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.31
date	2011.09.28.23.50.37;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.09.24.00.28.52;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2011.08.30.20.18.20;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2011.08.25.23.27.09;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2010.06.04.23.24.56;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2010.03.02.23.07.56;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2009.10.07.22.08.38;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2006.11.20.20.13.47;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2006.10.03.15.09.00;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2006.05.02.17.34.14;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2006.04.20.15.42.09;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2005.09.21.14.53.00;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2005.08.24.19.42.38;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2005.04.21.22.44.36;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2005.04.20.20.00.28;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.10.23.21.00.08;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.05.30.18.19.14;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.05.23.18.12.39;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.23.20.47.20;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.02.23.40.53;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.02.22.18.53;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.26.22.49.08;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.23.21.00.41;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.18.14.02.46;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.20.15.16.36;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.17.20.49.20;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.17.15.11.18;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.15.15.30.27;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.20.00.44.23;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.57.03;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.31;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.31;	author wit;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "Timing.C"
//
// Contains the implementation of the following classes:
//
//    Timer
//    TimingSection
//------------------------------------------------------------------------------

#include <Timing.h>
#include <MsgFac.h>
#include <ApiMgr.h>

#include <time.h>

//------------------------------------------------------------------------------
// Implementation of class Timer.
//------------------------------------------------------------------------------

WitTimer * WitTimer::uniqueTimer_ = NULL;

//------------------------------------------------------------------------------

WitTimer::WitTimer (WitMsgFacility & theMsgFac):

      myMsgFac_       (theMsgFac),
      prevTime_       (cpuTime ()),
      allSections_    (),
      activeSections_ ()
   {
   stronglyAssert (uniqueTimer_ == NULL);

   uniqueTimer_ = this;

   new WitTimingSection (this, "input",      "Input Reading");
   new WitTimingSection (this, "default",    "Default Output");
   new WitTimingSection (this, "preproc",    "Preprocessing");
   new WitTimingSection (this, "heuristic",  "Heuristic");
   new WitTimingSection (this, "opt-prob",   "Opt. Prob. Management");
   new WitTimingSection (this, "cplex",      "CPLEX");
   new WitTimingSection (this, "postproc",   "Postprocessing");
   new WitTimingSection (this, "pip",        "P.I. Pegging");
   new WitTimingSection (this, "mrp",        "MRP");
   new WitTimingSection (this, "fss",        "FSS");
   new WitTimingSection (this, "freeMemory", "Memory Deallocation");
   new WitTimingSection (this, "other",      "Other CPU");
   new WitTimingSection (this, "standard",   "Standard CPU");
   new WitTimingSection (this, "extra",      "Non-default Output");
   new WitTimingSection (this, "total",      "Total CPU");
   }

//------------------------------------------------------------------------------

WitTimer::~WitTimer ()
   {
   while (not allSections_.isEmpty ())
      delete allSections_.get ();

   stronglyAssert (uniqueTimer_ == this);

   uniqueTimer_ = NULL;
   }

//------------------------------------------------------------------------------

void WitTimer::enterSection (const char * theName)
   {
   WitTimingSection * theSection;

   if (uniqueTimer_ == NULL)
      return;

   if (not uniqueTimer ()->activeSections_.isEmpty ())
      uniqueTimer ()->activeSections_.first ()->chargeTime ();

   theSection = namedSection (theName);

   stronglyAssert (theSection != NULL);

   uniqueTimer ()->activeSections_.prepend (theSection);
   }

//------------------------------------------------------------------------------

void WitTimer::leaveSection (const char * theName)
   {
   WitTimingSection * theSection;

   if (uniqueTimer_ == NULL)
      return;

   stronglyAssert (not uniqueTimer ()->activeSections_.isEmpty ());

   theSection = uniqueTimer ()->activeSections_.get ();

   stronglyAssert (theSection->name () == theName);

   theSection->chargeTime ();
   }

//------------------------------------------------------------------------------

double WitTimer::getTimeAndChargeToCurrent ()
   {
   double timeSP;

   if (uniqueTimer_ == NULL)
      return 0.0;

   stronglyAssert (not uniqueTimer ()->activeSections_.isEmpty ());

   timeSP = uniqueTimer ()->timeSincePrev ();
                            
   uniqueTimer ()->activeSections_.first ()->chargeTime (timeSP);

   return timeSP;
   }

//------------------------------------------------------------------------------

void WitTimer::include (WitTimingSection * theSection)
   {
   allSections_.append (theSection);
   }

//------------------------------------------------------------------------------

double WitTimer::timeSincePrev ()
   {
   double curTime;
   double delta;

   curTime   = cpuTime ();
   delta     = curTime - prevTime_;
   prevTime_ = curTime;

   namedSection ("total")->chargeTime (delta);

   return delta;
   }

//------------------------------------------------------------------------------

void WitTimer::display ()
   {
   WitTimingSection * theSection;

   stronglyAssert (activeSections_.isEmpty ());

   namedSection ("standard")->chargeTime (
        namedSection ("total")->timeCharged ()
      - namedSection ("extra")->timeCharged ());

   myMsgFac () ("cpuTimesMsg");

   forEachEl (theSection, allSections_)
      theSection->display ();
   }

//------------------------------------------------------------------------------

void WitTimer::reset ()
   {
   WitTimingSection * theSection;

   stronglyAssert (activeSections_.isEmpty ());

   timeSincePrev ();

   forEachEl (theSection, allSections_)
      theSection->reset ();
   }

//------------------------------------------------------------------------------

void WitTimer::addTime (const char * theName1, const char * theName2)
   {
   WitTimingSection * theSection1;
   WitTimingSection * theSection2;

   theSection1 = namedSection (theName1);
   theSection2 = namedSection (theName2);

   if (theSection2->wasTimed ())
      theSection1->chargeTime (theSection2->timeCharged ());
   }

//------------------------------------------------------------------------------

WitTimingSection * WitTimer::namedSection (const char * theName)
   {
   if (uniqueTimer_ == NULL)
      return NULL;

   WitTimingSection * theSection;

   forEachEl (theSection, uniqueTimer_->allSections_)
      if (theSection->name () == theName)
         return theSection;

   stronglyAssert (false);

   return NULL;  // Never executed; Makes the compiler happy.
   }

//------------------------------------------------------------------------------

double WitTimer::cpuTime () const
   {
#ifdef USE_RUSAGE

    return cpuTimeByRusage ();

#else

    return
         static_cast <double> (clock ())
       / static_cast <double> (CLOCKS_PER_SEC);

#endif
   }

//------------------------------------------------------------------------------

#ifdef USE_RUSAGE

#include <sys/time.h>
#include <sys/resource.h>

double WitTimer::cpuTimeByRusage () const
   {
   struct rusage theRusage;
   int           rc;
   double        seconds;
   double        microSeconds;

   rc           = getrusage (RUSAGE_SELF, & theRusage);

   witAssert (rc == 0);

   seconds      = static_cast <double> (theRusage.ru_utime.tv_sec);
   microSeconds = static_cast <double> (theRusage.ru_utime.tv_usec);

   return (seconds + microSeconds / 1.0e+6);
   }

#endif

//------------------------------------------------------------------------------
// Implementation of class TimingSection.
//------------------------------------------------------------------------------

WitTimingSection::WitTimingSection (
         WitTimer * theTimer,
         const char * sectionName,
         const char * sectionTitle):

      name_        (sectionName),
      myTimer_     (theTimer),
      title_       (sectionTitle),
      wasTimed_    (false),
      timeCharged_ (0.0)
   {
   stronglyAssert (strlen (sectionTitle) <= 21);

   myTimer_->include (this);
   }

//------------------------------------------------------------------------------

WitTimingSection::~WitTimingSection ()
   {
   }

//------------------------------------------------------------------------------

void WitTimingSection::chargeTime (double incTime)
   {
   timeCharged_ += incTime;

   wasTimed_     = true;
   }

//------------------------------------------------------------------------------

void WitTimingSection::chargeTime ()
   {
   chargeTime (myTimer_->timeSincePrev ());
   }

//------------------------------------------------------------------------------

void WitTimingSection::reset ()
   {
   wasTimed_    = false;
   timeCharged_ = 0.0;
   }

//------------------------------------------------------------------------------

void WitTimingSection::display () const
   {
   if (not wasTimed_)
      return;

   char titleString[100];

   sprintf (titleString, "%s time:", title_.myCstring ());

   myTimer_->myMsgFac () ("sectionTimeMsg", titleString, timeCharged ());
   }
@


1.30
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.29
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d35 25
a59 25
myMsgFac_       (theMsgFac),
prevTime_       (cpuTime ()),
allSections_    (),
activeSections_ ()
{
stronglyAssert (uniqueTimer_ == NULL);

uniqueTimer_ = this;

new WitTimingSection (this, "input",      "Input Reading");
new WitTimingSection (this, "default",    "Default Output");
new WitTimingSection (this, "preproc",    "Preprocessing");
new WitTimingSection (this, "heuristic",  "Heuristic");
new WitTimingSection (this, "opt-prob",   "Opt. Prob. Management");
new WitTimingSection (this, "cplex",      "CPLEX");
new WitTimingSection (this, "postproc",   "Postprocessing");
new WitTimingSection (this, "pip",        "P.I. Pegging");
new WitTimingSection (this, "mrp",        "MRP");
new WitTimingSection (this, "fss",        "FSS");
new WitTimingSection (this, "freeMemory", "Memory Deallocation");
new WitTimingSection (this, "other",      "Other CPU");
new WitTimingSection (this, "standard",   "Standard CPU");
new WitTimingSection (this, "extra",      "Non-default Output");
new WitTimingSection (this, "total",      "Total CPU");
}
d64 3
a66 3
{
while (not allSections_.isEmpty ())
delete allSections_.get ();
d68 1
a68 1
stronglyAssert (uniqueTimer_ == this);
d70 2
a71 2
uniqueTimer_ = NULL;
}
d76 2
a77 2
{
WitTimingSection * theSection;
d79 2
a80 2
if (uniqueTimer_ == NULL)
return;
d82 2
a83 2
if (not uniqueTimer ()->activeSections_.isEmpty ())
uniqueTimer ()->activeSections_.first ()->chargeTime ();
d85 1
a85 1
theSection = namedSection (theName);
d87 1
a87 1
stronglyAssert (theSection != NULL);
d89 2
a90 2
uniqueTimer ()->activeSections_.prepend (theSection);
}
d95 2
a96 2
{
WitTimingSection * theSection;
d98 2
a99 2
if (uniqueTimer_ == NULL)
return;
d101 1
a101 1
stronglyAssert (not uniqueTimer ()->activeSections_.isEmpty ());
d103 1
a103 1
theSection = uniqueTimer ()->activeSections_.get ();
d105 1
a105 1
stronglyAssert (theSection->name () == theName);
d107 2
a108 2
theSection->chargeTime ();
}
d113 2
a114 5
{
double timeSP;

if (uniqueTimer_ == NULL)
return 0.0;
d116 2
a117 1
stronglyAssert (not uniqueTimer ()->activeSections_.isEmpty ());
d119 1
a119 1
timeSP = uniqueTimer ()->timeSincePrev ();
d121 3
a123 1
uniqueTimer ()->activeSections_.first ()->chargeTime (timeSP);
d125 2
a126 2
return timeSP;
}
d131 3
a133 3
{
allSections_.append (theSection);
}
d138 7
a144 7
{
double curTime;
double delta;

curTime   = cpuTime ();
delta     = curTime - prevTime_;
prevTime_ = curTime;
d146 1
a146 1
namedSection ("total")->chargeTime (delta);
d148 2
a149 2
return delta;
}
d154 2
a155 2
{
WitTimingSection * theSection;
d157 1
a157 1
stronglyAssert (activeSections_.isEmpty ());
d159 3
a161 3
namedSection ("standard")->chargeTime (
namedSection ("total")->timeCharged ()
- namedSection ("extra")->timeCharged ());
d163 1
a163 1
myMsgFac () ("cpuTimesMsg");
d165 3
a167 3
forEachEl (theSection, allSections_)
theSection->display ();
}
d172 2
a173 2
{
WitTimingSection * theSection;
d175 1
a175 1
stronglyAssert (activeSections_.isEmpty ());
d177 1
a177 1
timeSincePrev ();
d179 3
a181 3
forEachEl (theSection, allSections_)
theSection->reset ();
}
d186 10
a195 10
{
WitTimingSection * theSection1;
WitTimingSection * theSection2;

theSection1 = namedSection (theName1);
theSection2 = namedSection (theName2);

if (theSection2->wasTimed ())
theSection1->chargeTime (theSection2->timeCharged ());
}
d200 3
a202 3
{
if (uniqueTimer_ == NULL)
return NULL;
d204 1
a204 1
WitTimingSection * theSection;
d206 3
a208 3
forEachEl (theSection, uniqueTimer_->allSections_)
if (theSection->name () == theName)
return theSection;
d210 1
a210 1
stronglyAssert (false);
d212 2
a213 2
return NULL;  // Never executed; Makes the compiler happy.
}
d218 1
a218 1
{
d221 1
a221 1
return cpuTimeByRusage ();
d225 3
a227 3
return
static_cast <double> (clock ())
/ static_cast <double> (CLOCKS_PER_SEC);
d230 1
a230 1
}
d240 5
a244 5
{
struct rusage theRusage;
int           rc;
double        seconds;
double        microSeconds;
d246 1
a246 1
rc           = getrusage (RUSAGE_SELF, & theRusage);
d248 1
a248 1
witAssert (rc == 0);
d250 2
a251 2
seconds      = static_cast <double> (theRusage.ru_utime.tv_sec);
microSeconds = static_cast <double> (theRusage.ru_utime.tv_usec);
d253 2
a254 2
return (seconds + microSeconds / 1.0e+6);
}
d263 11
a273 11
WitTimer * theTimer,
const char * sectionName,
const char * sectionTitle):

name_        (sectionName),
myTimer_     (theTimer),
title_       (sectionTitle),
wasTimed_    (false),
timeCharged_ (0.0)
{
stronglyAssert (strlen (sectionTitle) <= 21);
d275 2
a276 2
myTimer_->include (this);
}
d281 2
a282 2
{
}
d287 2
a288 2
{
timeCharged_ += incTime;
d290 2
a291 2
wasTimed_     = true;
}
d296 3
a298 3
{
chargeTime (myTimer_->timeSincePrev ());
}
d303 4
a306 4
{
wasTimed_    = false;
timeCharged_ = 0.0;
}
d311 3
a313 3
{
if (not wasTimed_)
return;
d315 1
a315 1
char titleString[100];
d317 1
a317 1
sprintf (titleString, "%s time:", title_.myCstring ());
d319 2
a320 2
myTimer_->myMsgFac () ("sectionTimeMsg", titleString, timeCharged ());
}
@


1.28
log
@Removed COIN from WIT.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d35 25
a59 25
      myMsgFac_       (theMsgFac),
      prevTime_       (cpuTime ()),
      allSections_    (),
      activeSections_ ()
   {
   stronglyAssert (uniqueTimer_ == NULL);

   uniqueTimer_ = this;

   new WitTimingSection (this, "input",      "Input Reading");
   new WitTimingSection (this, "default",    "Default Output");
   new WitTimingSection (this, "preproc",    "Preprocessing");
   new WitTimingSection (this, "heuristic",  "Heuristic");
   new WitTimingSection (this, "opt-prob",   "Opt. Prob. Management");
   new WitTimingSection (this, "cplex",      "CPLEX");
   new WitTimingSection (this, "postproc",   "Postprocessing");
   new WitTimingSection (this, "pip",        "P.I. Pegging");
   new WitTimingSection (this, "mrp",        "MRP");
   new WitTimingSection (this, "fss",        "FSS");
   new WitTimingSection (this, "freeMemory", "Memory Deallocation");
   new WitTimingSection (this, "other",      "Other CPU");
   new WitTimingSection (this, "standard",   "Standard CPU");
   new WitTimingSection (this, "extra",      "Non-default Output");
   new WitTimingSection (this, "total",      "Total CPU");
   }
d64 3
a66 3
   {
   while (not allSections_.isEmpty ())
      delete allSections_.get ();
d68 1
a68 1
   stronglyAssert (uniqueTimer_ == this);
d70 2
a71 2
   uniqueTimer_ = NULL;
   }
d76 2
a77 2
   {
   WitTimingSection * theSection;
d79 2
a80 2
   if (uniqueTimer_ == NULL)
      return;
d82 2
a83 2
   if (not uniqueTimer ()->activeSections_.isEmpty ())
      uniqueTimer ()->activeSections_.first ()->chargeTime ();
d85 1
a85 1
   theSection = namedSection (theName);
d87 1
a87 1
   stronglyAssert (theSection != NULL);
d89 2
a90 2
   uniqueTimer ()->activeSections_.prepend (theSection);
   }
d95 2
a96 2
   {
   WitTimingSection * theSection;
d98 2
a99 2
   if (uniqueTimer_ == NULL)
      return;
d101 1
a101 1
   stronglyAssert (not uniqueTimer ()->activeSections_.isEmpty ());
d103 1
a103 1
   theSection = uniqueTimer ()->activeSections_.get ();
d105 1
a105 1
   stronglyAssert (theSection->name () == theName);
d107 2
a108 2
   theSection->chargeTime ();
   }
d113 5
a117 2
   {
   double timeSP;
d119 1
a119 2
   if (uniqueTimer_ == NULL)
      return 0.0;
d121 1
a121 1
   stronglyAssert (not uniqueTimer ()->activeSections_.isEmpty ());
d123 1
a123 3
   timeSP = uniqueTimer ()->timeSincePrev ();
                            
   uniqueTimer ()->activeSections_.first ()->chargeTime (timeSP);
d125 2
a126 2
   return timeSP;
   }
d131 3
a133 3
   {
   allSections_.append (theSection);
   }
d138 7
a144 7
   {
   double curTime;
   double delta;

   curTime   = cpuTime ();
   delta     = curTime - prevTime_;
   prevTime_ = curTime;
d146 1
a146 1
   namedSection ("total")->chargeTime (delta);
d148 2
a149 2
   return delta;
   }
d154 2
a155 2
   {
   WitTimingSection * theSection;
d157 1
a157 1
   stronglyAssert (activeSections_.isEmpty ());
d159 3
a161 3
   namedSection ("standard")->chargeTime (
        namedSection ("total")->timeCharged ()
      - namedSection ("extra")->timeCharged ());
d163 1
a163 1
   myMsgFac () ("cpuTimesMsg");
d165 3
a167 3
   forEachEl (theSection, allSections_)
      theSection->display ();
   }
d172 2
a173 2
   {
   WitTimingSection * theSection;
d175 1
a175 1
   stronglyAssert (activeSections_.isEmpty ());
d177 1
a177 1
   timeSincePrev ();
d179 3
a181 3
   forEachEl (theSection, allSections_)
      theSection->reset ();
   }
d186 10
a195 10
   {
   WitTimingSection * theSection1;
   WitTimingSection * theSection2;

   theSection1 = namedSection (theName1);
   theSection2 = namedSection (theName2);

   if (theSection2->wasTimed ())
      theSection1->chargeTime (theSection2->timeCharged ());
   }
d200 3
a202 3
   {
   if (uniqueTimer_ == NULL)
      return NULL;
d204 1
a204 1
   WitTimingSection * theSection;
d206 3
a208 3
   forEachEl (theSection, uniqueTimer_->allSections_)
      if (theSection->name () == theName)
         return theSection;
d210 1
a210 1
   stronglyAssert (false);
d212 2
a213 2
   return NULL;  // Never executed; Makes the compiler happy.
   }
d218 1
a218 1
   {
d221 1
a221 1
    return cpuTimeByRusage ();
d225 3
a227 3
    return
         static_cast <double> (clock ())
       / static_cast <double> (CLOCKS_PER_SEC);
d230 1
a230 1
   }
d240 5
a244 5
   {
   struct rusage theRusage;
   int           rc;
   double        seconds;
   double        microSeconds;
d246 1
a246 1
   rc           = getrusage (RUSAGE_SELF, & theRusage);
d248 1
a248 1
   witAssert (rc == 0);
d250 2
a251 2
   seconds      = static_cast <double> (theRusage.ru_utime.tv_sec);
   microSeconds = static_cast <double> (theRusage.ru_utime.tv_usec);
d253 2
a254 2
   return (seconds + microSeconds / 1.0e+6);
   }
d263 11
a273 11
         WitTimer * theTimer,
         const char * sectionName,
         const char * sectionTitle):

      name_        (sectionName),
      myTimer_     (theTimer),
      title_       (sectionTitle),
      wasTimed_    (false),
      timeCharged_ (0.0)
   {
   stronglyAssert (strlen (sectionTitle) <= 21);
d275 2
a276 2
   myTimer_->include (this);
   }
d281 2
a282 2
   {
   }
d287 2
a288 2
   {
   timeCharged_ += incTime;
d290 2
a291 2
   wasTimed_     = true;
   }
d296 3
a298 3
   {
   chargeTime (myTimer_->timeSincePrev ());
   }
d303 4
a306 4
   {
   wasTimed_    = false;
   timeCharged_ = 0.0;
   }
d311 3
a313 3
   {
   if (not wasTimed_)
      return;
d315 1
a315 1
   char titleString[100];
d317 1
a317 1
   sprintf (titleString, "%s time:", title_.myCstring ());
d319 2
a320 2
   myTimer_->myMsgFac () ("sectionTimeMsg", titleString, timeCharged ());
   }
@


1.27
log
@CPLEX
@
text
@a48 1
   new WitTimingSection (this, "coin",       "COIN");
@


1.26
log
@Multi-Obj Mode
@
text
@d50 1
@


1.25
log
@Made WIT operate in multi-thread mode unconditionally.
The multithread attribute in no longer meaningful.
@
text
@d112 18
@


1.24
log
@External opt implosion.
@
text
@a39 2
   stronglyAssert (not WitApiMgr::multiThread ());

@


1.23
log
@App controlled opt implosion.
@
text
@d46 15
a60 19
   new WitTimingSection (this, "input",         "Input Reading");
   new WitTimingSection (this, "default",       "Default Output");
   new WitTimingSection (this, "preproc",       "Preprocessing");
   new WitTimingSection (this, "heuristic",     "Heuristic");
   new WitTimingSection (this, "opt-prob",      "Opt. Prob. Management");
   new WitTimingSection (this, "coin-pre-post", "COIN Pre/Post-Solve");
   new WitTimingSection (this, "coin-simplex",  "COIN Main Simplex");
   new WitTimingSection (this, "coin-clean-up", "COIN Clean-Up Simplex");
   new WitTimingSection (this, "coin-other",    "COIN Other");
   new WitTimingSection (this, "coin-total",    "COIN Total");
   new WitTimingSection (this, "postproc",      "Postprocessing");
   new WitTimingSection (this, "pip",           "P.I. Pegging");
   new WitTimingSection (this, "mrp",           "MRP");
   new WitTimingSection (this, "fss",           "FSS");
   new WitTimingSection (this, "freeMemory",    "Memory Deallocation");
   new WitTimingSection (this, "other",         "Other CPU");
   new WitTimingSection (this, "standard",      "Standard CPU");
   new WitTimingSection (this, "extra",         "Non-default Output");
   new WitTimingSection (this, "total",         "Total CPU");
a146 5
   addTime ("coin-total", "coin-pre-post");
   addTime ("coin-total", "coin-simplex");
   addTime ("coin-total", "coin-clean-up");
   addTime ("coin-total", "coin-other");

@


1.22
log
@Updated the copyright date on all source files.
@
text
@d50 1
a50 1
   new WitTimingSection (this, "model",         "Model Management");
@


1.21
log
@Removed some OSL items.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.20
log
@Ran make depend.
@
text
@a50 1
   new WitTimingSection (this, "osl",           "OSL");
@


1.19
log
@Attempt to fix syntax errors found by the MS compiler.
@
text
@d21 1
d29 1
a29 1
WitTimer * WitTimer::theInstance_ = NULL;
d40 1
a40 1
   witAssert (theInstance_ == NULL);
d42 3
a44 1
   theInstance_ = this;
d75 3
a77 1
   theInstance_ = NULL;
d86 1
a86 1
   if (theInstance_ == NULL)
d89 2
a90 2
   if (not theInstance ()->activeSections_.isEmpty ())
      theInstance ()->activeSections_.first ()->chargeTime ();
d96 1
a96 1
   theInstance ()->activeSections_.prepend (theSection);
d105 1
a105 1
   if (theInstance_ == NULL)
d108 1
a108 1
   stronglyAssert (not theInstance ()->activeSections_.isEmpty ());
d110 1
a110 1
   theSection = theInstance ()->activeSections_.get ();
d195 1
a195 1
   if (theInstance_ == NULL)
d200 1
a200 1
   forEachEl (theSection, theInstance_->allSections_)
@


1.18
log
@Minor correction.
@
text
@d22 2
@


1.17
log
@Modified calls to COIN for unaccelerated mode.
@
text
@d145 4
a148 5
   namedSection ("coin-total")->chargeTime (
        namedSection ("coin-pre-post")->timeCharged ()
      + namedSection ("coin-simplex") ->timeCharged ()
      + namedSection ("coin-clean-up")->timeCharged ()
      + namedSection ("coin-other")   ->timeCharged ());
d172 14
@


1.16
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d41 20
a60 16
   new WitTimingSection (this, "input",      "Input Reading");
   new WitTimingSection (this, "default",    "Default Output");
   new WitTimingSection (this, "preproc",    "Preprocessing");
   new WitTimingSection (this, "heuristic",  "Heuristic");
   new WitTimingSection (this, "model",      "Model Management");
   new WitTimingSection (this, "osl",        "OSL");
   new WitTimingSection (this, "coin",       "COIN");
   new WitTimingSection (this, "postproc",   "Postprocessing");
   new WitTimingSection (this, "pip",        "P.I. Pegging");
   new WitTimingSection (this, "mrp",        "MRP");
   new WitTimingSection (this, "fss",        "FSS");
   new WitTimingSection (this, "freeMemory", "Memory Deallocation");
   new WitTimingSection (this, "other",      "Other CPU");
   new WitTimingSection (this, "standard",   "Standard CPU");
   new WitTimingSection (this, "extra",      "Non-default Output");
   new WitTimingSection (this, "total",      "Total CPU");
d142 8
a149 2
      namedSection ("total")->timeCharged () -
      namedSection ("extra")->timeCharged ());
d247 2
d289 1
a289 1
   char titleString[26];
@


1.15
log
@Continued implementation of opt with COIN.
@
text
@d41 1
a41 1
   new WitTimingSection (this, "input",      "Input reading");
d45 1
a45 1
   new WitTimingSection (this, "model",      "Model management");
d48 2
a50 1
   new WitTimingSection (this, "postproc",   "Postprocessing");
d52 1
a52 1
   new WitTimingSection (this, "freeMemory", "Memory deallocation");
@


1.14
log
@Continued implementation of opt with COIN.
@
text
@d47 1
@


1.13
log
@Changed some C style casts to C++ style.
@
text
@d15 1
a16 2
//    Timer
//    TimingEvent
a22 62
// Implementation of class TimingSection.
//------------------------------------------------------------------------------

WitTimingSection::WitTimingSection (
         WitTimer * theTimer,
         const char * sectionName,
         const char * sectionTitle):

      name_        (sectionName),
      myTimer_     (theTimer),
      title_       (sectionTitle),
      wasTimed_    (false),
      timeCharged_ (0.0)
   {
   myTimer_->include (this);
   }

//------------------------------------------------------------------------------

WitTimingSection::~WitTimingSection ()
   {
   }

//------------------------------------------------------------------------------

void WitTimingSection::chargeTime (double incTime)
   {
   timeCharged_ += incTime;

   wasTimed_     = true;
   }

//------------------------------------------------------------------------------

void WitTimingSection::chargeTime ()
   {
   chargeTime (myTimer_->timeSincePrev ());
   }

//------------------------------------------------------------------------------

void WitTimingSection::reset ()
   {
   wasTimed_    = false;
   timeCharged_ = 0.0;
   }

//------------------------------------------------------------------------------

void WitTimingSection::display () const
   {
   if (not wasTimed_)
      return;

   char titleString[26];

   sprintf (titleString, "%s time:", title_.myCstring ());

   myTimer_->myMsgFac () ("sectionTimeMsg", titleString, timeCharged ());
   }

//------------------------------------------------------------------------------
d31 5
a35 3
      myMsgFac_    (theMsgFac),
      prevTime_    (cpuTime ()),
      allSections_ ()
d69 1
a69 1
WitTimingSection * WitTimer::namedSection (const char * theName)
d71 2
d74 13
a86 1
      return NULL;
d88 2
d92 6
a97 3
   forEachEl (theSection, theInstance_->allSections_)
      if (theSection->name () == theName)
         return theSection;
d99 1
a99 1
   witAssert (false);
d101 1
a101 1
   return NULL;  // Never executed; Makes the compiler happy.
d115 2
a116 2
   double curTime = cpuTime ();
   double delta   = curTime - prevTime_;
d118 2
d133 1
a133 1
   WitTimingEvent::forbidCurrent ();
d151 1
a151 1
   WitTimingEvent::forbidCurrent ();
d161 18
d221 1
a221 1
// Implementation of class TimingEvent.
d224 13
a236 1
WitTimingEvent * WitTimingEvent::current = NULL;
d240 5
a244 1
WitTimingEvent::WitTimingEvent (const char * sectionName):
d246 1
a246 2
      mySection_ (WitTimer::namedSection (sectionName)),
      previous_  (current)
d248 1
a248 2
   if (not WitTimer::timingMode ())
      return;
d250 1
a250 4
   if (current != NULL)
      current->mySection_->chargeTime ();

   current = this;
d255 1
a255 1
WitTimingEvent::~WitTimingEvent ()
d257 2
a258 2
   if (not WitTimer::timingMode ())
      return;
d260 1
a260 2
   if (this != current)
      WitMsgFacility::current () ("timingMismatchFmsg");
d262 4
a265 3
   mySection_->chargeTime ();

   current = previous_;
d270 1
a270 1
void WitTimingEvent::forbidCurrent ()
d272 8
a279 2
   if (current != NULL)
      WitMsgFacility::current () ("timingMismatchFmsg");
@


1.12
log
@Internal changes.
@
text
@d209 3
a211 1
    return ((double) clock ()) / (double) CLOCKS_PER_SEC;
d234 2
a235 2
   seconds      = (double) theRusage.ru_utime.tv_sec;
   microSeconds = (double) theRusage.ru_utime.tv_usec;
@


1.11
log
@Internal changes.
@
text
@d75 1
a75 1
   if (! wasTimed_)
d122 1
a122 1
   while (! allSections_.isEmpty ())
d253 1
a253 1
   if (! WitTimer::timingMode ())
d266 1
a266 1
   if (! WitTimer::timingMode ())
@


1.10
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d35 1
a35 1
      wasTimed_    (witFALSE),
d53 1
a53 1
   wasTimed_     = witTRUE;
d67 1
a67 1
   wasTimed_    = witFALSE;
d141 1
a141 1
   witAssert (witFALSE);
@


1.9
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d106 1
a106 1
   new WitTimingSection (this, "mp",         "MP management");
@


1.8
log
@Began implementation of object iteration.
@
text
@d106 1
a106 1
   new WitTimingSection (this, "lp",         "LP management");
@


1.7
log
@Removed special sel-split timing code.
@
text
@d21 1
@


1.6
log
@Implemented an iteration upper bound for selection splitting.
@
text
@a104 4
   new WitTimingSection (this, "initSTC1",   "Init split tc1");
   new WitTimingSection (this, "loopSTC1",   "Loop split tc1");
   new WitTimingSection (this, "initSS",     "Init split sel");
   new WitTimingSection (this, "loopSS",     "Loop split sel");
@


1.5
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@d16 1
d105 4
@


1.4
log
@Implemented timing wrap-around adjustment.
@
text
@a20 9
#ifdef MCLOCK

extern "C"
   {
   long int mclock(void);
   }

#endif

a152 8
#ifdef AIX_CLOCK

   #define CLOCK_WRAP (4294967296.0 / (double) CLOCKS_PER_SEC)

#endif

//------------------------------------------------------------------------------

a159 7
#ifdef AIX_CLOCK

   if (delta < -1.0)
      delta += CLOCK_WRAP;

#endif

d201 1
a201 1
#ifdef MCLOCK
d203 1
a203 6
    return mclock () * .01;

#else
#ifdef SUN4

    return sunProcessTime ();
a209 1
#endif
d214 1
a214 1
#ifdef SUN4
d219 1
a219 1
double WitTimer::sunProcessTime () const
d221 4
a224 3
   struct rusage myRusage;
   int who = RUSAGE_SELF;
   int rc  = -1;
d226 1
a226 1
   rc = getrusage (who, &myRusage);
d230 4
a233 1
   return (myRusage.ru_utime.tv_sec + myRusage.ru_utime.tv_usec/1e6);
@


1.3
log
@Implemented and used class SelMgr.
@
text
@d60 1
a60 1
   wasTimed_ = witTRUE;
d162 8
d176 7
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@a92 6

implementClearContents (WitTimingSection)
   //
   // See RWClient.h.

//------------------------------------------------------------------------------
d129 2
a130 1
   allSections_.clearContents ();
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
