head	1.11;
access;
symbols
	sce_5_01_20080919:1.8
	latest_sce_4_20_20060523:1.6.0.2
	sce_4_20_20060523:1.6
	latest_sce4_20_OSL:1.4.0.2
	sce_4_20_OSL:1.4
	sce_410_withVa:1.3
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.2
	nextGenBranch:1.1.0.6
	nextGenRoot:1.1
	sce_3_30_20030627:1.1
	EndRw-branch:1.1.0.4
	Root-of-EndRw:1.1
	rwToStl:1.1.0.2;
locks; strict;
comment	@ * @;


1.11
date	2011.09.28.23.49.06;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.09.24.00.27.23;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.08.30.20.17.18;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.08.01.20.38.22;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.08.18.19.32.52;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.02.17.33.55;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.21.21.40.04;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.02.21.55.48;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.13.21.50.12;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.01.21.05.03;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.29.23.06.24;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef BoundPairH
#define BoundPairH

//------------------------------------------------------------------------------
// Header file: "BoundPair.h"
//
// Contains the declaration of class BoundPair.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// class BoundPair
//
// Used for lower and upper bounds.
//
// Implemented in OptMisc.C.
//------------------------------------------------------------------------------

class WitBoundPair
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitBoundPair ();
         //
         // lower_ and upper_ will be set to 0.0.

      WitBoundPair (double lowerInit, double upperInit);
         //
         // lower_ will be set to lowerInit.
         // upper_ will be set to upperInit.

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      ~WitBoundPair ();

      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (double, lower)
      accessFunc (double, upper)

      //-----------------------------------------------------------------------
      // Non-const access functions.
      //-----------------------------------------------------------------------

      inline double & lower ()
         {
         return lower_;
         }

      inline double & upper ()
         {
         return upper_;
         }

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      void operator = (const WitBoundPair & theBoundPair);
         //
         // Copies memberwise.

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtor (WitBoundPair);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      double lower_;
      double upper_;
   };

#endif
@


1.10
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.9
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d30 2
a31 2
{
public:
d33 3
a35 3
//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------
d37 3
a39 3
WitBoundPair ();
//
// lower_ and upper_ will be set to 0.0.
d41 4
a44 4
WitBoundPair (double lowerInit, double upperInit);
//
// lower_ will be set to lowerInit.
// upper_ will be set to upperInit.
d46 3
a48 3
//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------
d50 1
a50 1
~WitBoundPair ();
d52 3
a54 3
//-----------------------------------------------------------------------
// Data access functions.
//-----------------------------------------------------------------------
d56 2
a57 2
accessFunc (double, lower)
accessFunc (double, upper)
d59 3
a61 3
//-----------------------------------------------------------------------
// Non-const access functions.
//-----------------------------------------------------------------------
d63 4
a66 4
inline double & lower ()
{
return lower_;
}
d68 4
a71 4
inline double & upper ()
{
return upper_;
}
d73 3
a75 3
//-----------------------------------------------------------------------
// Other public member functions.
//-----------------------------------------------------------------------
d77 3
a79 3
void operator = (const WitBoundPair & theBoundPair);
//
// Copies memberwise.
d81 1
a81 1
private:
d83 3
a85 3
//-----------------------------------------------------------------------
// Private member functions.
//-----------------------------------------------------------------------
d87 1
a87 1
noCopyCtor (WitBoundPair);
d89 3
a91 3
//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------
d93 3
a95 3
double lower_;
double upper_;
};
@


1.8
log
@Stochastic Implosion
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d30 2
a31 2
   {
   public:
d33 3
a35 3
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------
d37 3
a39 3
      WitBoundPair ();
         //
         // lower_ and upper_ will be set to 0.0.
d41 4
a44 4
      WitBoundPair (double lowerInit, double upperInit);
         //
         // lower_ will be set to lowerInit.
         // upper_ will be set to upperInit.
d46 3
a48 3
      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------
d50 1
a50 1
      ~WitBoundPair ();
d52 3
a54 3
      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------
d56 2
a57 2
      accessFunc (double, lower)
      accessFunc (double, upper)
d59 3
a61 3
      //-----------------------------------------------------------------------
      // Non-const access functions.
      //-----------------------------------------------------------------------
d63 4
a66 4
      inline double & lower ()
         {
         return lower_;
         }
d68 4
a71 4
      inline double & upper ()
         {
         return upper_;
         }
d73 3
a75 3
      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------
d77 3
a79 3
      void operator = (const WitBoundPair & theBoundPair);
         //
         // Copies memberwise.
d81 1
a81 1
   private:
d83 3
a85 3
      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------
d87 1
a87 1
      noCopyCtor (WitBoundPair);
d89 3
a91 3
      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------
d93 3
a95 3
      double lower_;
      double upper_;
   };
@


1.7
log
@App controlled opt implode.
@
text
@d26 1
a26 1
// Implemented in OptProbEl.C.
@


1.6
log
@Updated the copyright date on all source files.
@
text
@d23 1
d25 2
@


1.5
log
@Removed some more OSL items.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.4
log
@[shared-resource pegging]
@
text
@a23 2
// Double precision is used because the fields might take on the values
// +- OSL_INFTY, which cannot be repesented precisely in single precision.
@


1.3
log
@Double Precision.
@
text
@d19 1
a19 1
#include <Dense.h>
@


1.2
log
@Continued implementation of PIP.
@
text
@d76 1
a76 1
      void copy (const WitBoundPair & theBoundPair);
d86 1
a86 1
      noCopyCtorAssign (WitBoundPair);
@


1.1
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d28 1
a28 1
class WitBoundPair: public WitUtil
@

