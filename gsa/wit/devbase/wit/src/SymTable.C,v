head	1.175;
access;
symbols
	sce_5_01_20080919:1.142
	latest_sce_4_20_20060523:1.95.0.2
	sce_4_20_20060523:1.95
	latest_sce4_20_OSL:1.92.0.2
	sce_4_20_OSL:1.92
	sce_410_withVa:1.90
	sce_4_05_20040511:1.69
	sce_4_00_20040201:1.53
	nextGenBranch:1.44.0.2
	nextGenRoot:1.44
	sce_3_30_20030627:1.44
	EndRw-branch:1.33.0.4
	Root-of-EndRw:1.33
	rwToStl:1.33.0.2
	latest_sce_3_10_20010924:1.18.0.2
	sce_3_10_20010924:1.18
	latest_sce_3_00_20010601:1.10.0.2
	sce_3_00_20010601:1.10
	latest_sce_2_31_20010308:1.6.0.2
	sce_2_31_20010308:1.6
	latest_sce_2_31_20001003:1.4.0.2
	sce_2_31_20001003:1.4
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.175
date	2011.09.28.23.50.36;	author rjw;	state Exp;
branches;
next	1.174;

1.174
date	2011.09.24.00.28.51;	author rjw;	state Exp;
branches;
next	1.173;

1.173
date	2011.08.30.20.18.19;	author rjw;	state Exp;
branches;
next	1.172;

1.172
date	2011.08.25.23.27.08;	author rjw;	state Exp;
branches;
next	1.171;

1.171
date	2011.02.07.15.46.03;	author rjw;	state Exp;
branches;
next	1.170;

1.170
date	2011.02.02.00.37.12;	author rjw;	state Exp;
branches;
next	1.169;

1.169
date	2011.01.14.00.35.23;	author rjw;	state Exp;
branches;
next	1.168;

1.168
date	2011.01.13.00.38.48;	author rjw;	state Exp;
branches;
next	1.167;

1.167
date	2011.01.12.23.09.34;	author rjw;	state Exp;
branches;
next	1.166;

1.166
date	2011.01.11.22.08.31;	author rjw;	state Exp;
branches;
next	1.165;

1.165
date	2010.10.12.19.48.28;	author rjw;	state Exp;
branches;
next	1.164;

1.164
date	2010.09.24.18.17.23;	author rjw;	state Exp;
branches;
next	1.163;

1.163
date	2010.09.22.20.21.53;	author rjw;	state Exp;
branches;
next	1.162;

1.162
date	2010.09.10.22.10.42;	author rjw;	state Exp;
branches;
next	1.161;

1.161
date	2010.07.01.22.41.21;	author rjw;	state Exp;
branches;
next	1.160;

1.160
date	2010.06.18.18.03.49;	author rjw;	state Exp;
branches;
next	1.159;

1.159
date	2010.06.17.16.17.14;	author rjw;	state Exp;
branches;
next	1.158;

1.158
date	2010.06.16.20.56.29;	author rjw;	state Exp;
branches;
next	1.157;

1.157
date	2010.06.16.18.33.37;	author rjw;	state Exp;
branches;
next	1.156;

1.156
date	2010.06.14.21.15.15;	author rjw;	state Exp;
branches;
next	1.155;

1.155
date	2010.05.21.18.17.57;	author rjw;	state Exp;
branches;
next	1.154;

1.154
date	2010.05.14.23.49.06;	author rjw;	state Exp;
branches;
next	1.153;

1.153
date	2010.03.29.21.34.22;	author rjw;	state Exp;
branches;
next	1.152;

1.152
date	2010.03.26.22.22.53;	author rjw;	state Exp;
branches;
next	1.151;

1.151
date	2010.01.29.23.22.52;	author rjw;	state Exp;
branches;
next	1.150;

1.150
date	2010.01.28.23.16.58;	author rjw;	state Exp;
branches;
next	1.149;

1.149
date	2009.12.14.21.34.55;	author rjw;	state Exp;
branches;
next	1.148;

1.148
date	2009.12.09.21.19.31;	author rjw;	state Exp;
branches;
next	1.147;

1.147
date	2009.12.04.23.30.52;	author rjw;	state Exp;
branches;
next	1.146;

1.146
date	2009.11.26.00.24.09;	author rjw;	state Exp;
branches;
next	1.145;

1.145
date	2009.11.17.19.31.38;	author rjw;	state Exp;
branches;
next	1.144;

1.144
date	2009.11.13.19.01.26;	author rjw;	state Exp;
branches;
next	1.143;

1.143
date	2009.11.12.17.36.36;	author rjw;	state Exp;
branches;
next	1.142;

1.142
date	2008.07.01.19.48.35;	author rjw;	state Exp;
branches;
next	1.141;

1.141
date	2008.02.07.18.41.40;	author rjw;	state Exp;
branches;
next	1.140;

1.140
date	2008.01.21.21.47.17;	author rjw;	state Exp;
branches;
next	1.139;

1.139
date	2008.01.18.22.41.00;	author rjw;	state Exp;
branches;
next	1.138;

1.138
date	2008.01.14.19.21.15;	author rjw;	state Exp;
branches;
next	1.137;

1.137
date	2008.01.11.21.47.42;	author rjw;	state Exp;
branches;
next	1.136;

1.136
date	2007.10.22.19.58.53;	author rjw;	state Exp;
branches;
next	1.135;

1.135
date	2007.10.22.19.20.38;	author rjw;	state Exp;
branches;
next	1.134;

1.134
date	2007.08.29.16.24.24;	author rjw;	state Exp;
branches;
next	1.133;

1.133
date	2007.08.28.17.38.36;	author rjw;	state Exp;
branches;
next	1.132;

1.132
date	2007.08.24.21.12.38;	author rjw;	state Exp;
branches;
next	1.131;

1.131
date	2007.07.16.20.15.00;	author rjw;	state Exp;
branches;
next	1.130;

1.130
date	2007.07.16.18.12.33;	author rjw;	state Exp;
branches;
next	1.129;

1.129
date	2007.05.21.15.20.10;	author rjw;	state Exp;
branches;
next	1.128;

1.128
date	2007.05.17.17.59.18;	author rjw;	state Exp;
branches;
next	1.127;

1.127
date	2007.05.16.22.16.46;	author rjw;	state Exp;
branches;
next	1.126;

1.126
date	2007.04.24.21.18.13;	author rjw;	state Exp;
branches;
next	1.125;

1.125
date	2007.04.23.21.03.20;	author rjw;	state Exp;
branches;
next	1.124;

1.124
date	2007.04.20.20.51.14;	author rjw;	state Exp;
branches;
next	1.123;

1.123
date	2007.04.11.23.03.39;	author rjw;	state Exp;
branches;
next	1.122;

1.122
date	2007.04.11.16.05.41;	author rjw;	state Exp;
branches;
next	1.121;

1.121
date	2007.04.10.16.33.21;	author rjw;	state Exp;
branches;
next	1.120;

1.120
date	2007.04.09.16.05.08;	author rjw;	state Exp;
branches;
next	1.119;

1.119
date	2007.03.30.22.33.03;	author rjw;	state Exp;
branches;
next	1.118;

1.118
date	2007.03.29.21.16.48;	author rjw;	state Exp;
branches;
next	1.117;

1.117
date	2007.03.28.22.14.32;	author rjw;	state Exp;
branches;
next	1.116;

1.116
date	2007.03.08.22.47.18;	author rjw;	state Exp;
branches;
next	1.115;

1.115
date	2007.03.08.17.02.55;	author rjw;	state Exp;
branches;
next	1.114;

1.114
date	2007.03.02.22.11.02;	author rjw;	state Exp;
branches;
next	1.113;

1.113
date	2007.02.28.22.15.48;	author rjw;	state Exp;
branches;
next	1.112;

1.112
date	2007.01.29.23.35.17;	author rjw;	state Exp;
branches;
next	1.111;

1.111
date	2007.01.29.23.12.42;	author rjw;	state Exp;
branches;
next	1.110;

1.110
date	2007.01.29.22.34.13;	author rjw;	state Exp;
branches;
next	1.109;

1.109
date	2007.01.29.21.52.03;	author rjw;	state Exp;
branches;
next	1.108;

1.108
date	2006.12.06.19.52.47;	author rjw;	state Exp;
branches;
next	1.107;

1.107
date	2006.12.01.21.36.36;	author rjw;	state Exp;
branches;
next	1.106;

1.106
date	2006.12.01.19.55.18;	author rjw;	state Exp;
branches;
next	1.105;

1.105
date	2006.10.12.20.48.11;	author rjw;	state Exp;
branches;
next	1.104;

1.104
date	2006.09.27.20.10.17;	author rjw;	state Exp;
branches;
next	1.103;

1.103
date	2006.09.21.20.31.52;	author rjw;	state Exp;
branches;
next	1.102;

1.102
date	2006.09.08.16.16.01;	author rjw;	state Exp;
branches;
next	1.101;

1.101
date	2006.08.30.16.37.35;	author rjw;	state Exp;
branches;
next	1.100;

1.100
date	2006.08.17.22.50.38;	author rjw;	state Exp;
branches;
next	1.99;

1.99
date	2006.08.17.19.36.40;	author rjw;	state Exp;
branches;
next	1.98;

1.98
date	2006.08.16.15.49.18;	author rjw;	state Exp;
branches;
next	1.97;

1.97
date	2006.08.02.18.06.00;	author rjw;	state Exp;
branches;
next	1.96;

1.96
date	2006.08.02.17.27.31;	author rjw;	state Exp;
branches;
next	1.95;

1.95
date	2006.05.16.22.01.07;	author rjw;	state Exp;
branches;
next	1.94;

1.94
date	2006.05.08.19.51.24;	author rjw;	state Exp;
branches;
next	1.93;

1.93
date	2006.05.02.17.34.14;	author rjw;	state Exp;
branches;
next	1.92;

1.92
date	2006.03.10.23.23.31;	author rjw;	state Exp;
branches;
next	1.91;

1.91
date	2005.11.10.20.33.08;	author rjw;	state Exp;
branches;
next	1.90;

1.90
date	2005.07.07.18.18.10;	author rjw;	state Exp;
branches;
next	1.89;

1.89
date	2005.07.07.16.00.58;	author rjw;	state Exp;
branches;
next	1.88;

1.88
date	2005.07.07.15.16.24;	author rjw;	state Exp;
branches;
next	1.87;

1.87
date	2005.06.13.16.48.47;	author rjw;	state Exp;
branches;
next	1.86;

1.86
date	2005.05.17.17.30.44;	author rjw;	state Exp;
branches;
next	1.85;

1.85
date	2005.03.02.22.34.37;	author rjw;	state Exp;
branches;
next	1.84;

1.84
date	2005.02.25.21.26.10;	author rjw;	state Exp;
branches;
next	1.83;

1.83
date	2005.02.24.23.23.57;	author rjw;	state Exp;
branches;
next	1.82;

1.82
date	2005.02.23.21.06.08;	author rjw;	state Exp;
branches;
next	1.81;

1.81
date	2005.02.23.16.32.00;	author rjw;	state Exp;
branches;
next	1.80;

1.80
date	2005.02.23.15.40.16;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2005.02.10.23.56.56;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2005.02.10.18.38.30;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2005.02.03.21.31.35;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2005.02.02.17.26.53;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2005.01.31.23.59.30;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2005.01.28.19.34.28;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2005.01.21.23.01.51;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2004.11.09.23.08.00;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2004.11.04.20.42.27;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2004.10.12.21.29.50;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2004.05.07.22.15.15;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2004.04.30.15.57.19;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2004.04.16.17.42.49;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2004.04.13.18.59.01;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2004.04.12.23.02.55;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2004.04.12.22.48.05;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2004.04.12.20.59.07;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2004.04.09.23.09.34;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2004.04.09.19.52.32;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2004.04.08.22.24.25;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2004.03.24.16.50.35;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2004.03.11.16.36.18;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2004.02.27.21.00.29;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2004.02.24.19.37.22;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2004.02.19.21.21.28;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2004.02.05.16.39.43;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2004.01.19.23.26.51;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2004.01.16.18.48.25;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2004.01.05.23.37.34;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2003.12.23.16.18.47;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2003.10.31.15.37.55;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2003.09.22.23.13.52;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2003.09.22.20.27.02;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2003.09.04.19.32.47;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2003.08.05.20.18.23;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2003.05.07.18.06.17;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2003.03.24.20.40.21;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2003.02.21.18.56.28;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2003.02.14.20.13.03;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2003.01.31.21.28.59;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2003.01.27.21.17.20;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2002.12.30.21.57.26;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2002.12.30.20.37.28;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2002.12.23.20.44.48;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2002.12.19.17.15.23;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2002.11.25.15.15.23;	author rwToStl;	state Exp;
branches;
next	1.33;

1.33
date	2002.10.18.22.23.58;	author rjw;	state Exp;
branches
	1.33.2.1;
next	1.32;

1.32
date	2002.10.16.22.30.22;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2002.10.10.19.21.18;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2002.09.30.21.36.39;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2002.08.22.14.01.49;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2002.06.24.22.02.26;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2002.05.17.21.45.06;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2002.04.24.18.26.09;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2002.04.18.14.02.46;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2001.12.19.16.17.12;	author bobw;	state Exp;
branches;
next	1.23;

1.23
date	2001.11.09.21.42.27;	author bobw;	state Exp;
branches;
next	1.22;

1.22
date	2001.10.05.20.53.58;	author bobw;	state Exp;
branches;
next	1.21;

1.21
date	2001.10.05.18.55.28;	author bobw;	state Exp;
branches;
next	1.20;

1.20
date	2001.10.03.18.55.12;	author bobw;	state Exp;
branches;
next	1.19;

1.19
date	2001.09.28.20.50.28;	author bobw;	state Exp;
branches;
next	1.18;

1.18
date	2001.09.16.21.42.32;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2001.08.30.23.00.34;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.08.29.21.37.21;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.08.06.17.31.08;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.03.18.40.43;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.07.30.15.12.11;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.07.28.00.48.35;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.07.25.16.08.20;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.29.22.11.28;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.17.15.11.18;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.04.06.19.22.11;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.08.16.37.08;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.13.21.03.55;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.06.18.45.08;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.25.20.12.35;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.08.21.56.14;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.57.01;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.30;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.33.2.1
date	2002.11.08.16.11.34;	author rwToStl;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.24.13.53.30;	author wit;	state Exp;
branches;
next	;


desc
@@


1.175
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
//
//     Source file:  SymTable.C
//     Implementation of class SymTabEntry, rules and symbol table
//
//------------------------------------------------------------------------------

#include <defines.h>

// #if IMPLEMENT_READDATA

#include <Parlex.h>
#include <SymTable.h>
#include <VecBS.h>
#include <Entity.h>
#include <Parser.h>
#include <WitRun.h>
#include <PipMgr.h>
#include <StochImpMgr.h>
#include <Demand.h>
#include <Material.h>
#include <Operation.h>
#include <SubEntry.h>
#include <BopEntry.h>
#include <BoundSet.h>
#include <ISRealArg.h>
#include <IVRealArg.h>
#include <wit.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------
// Implementation of class SymTabEntry.
//------------------------------------------------------------------------------

// Constructor and destructor

WitSymTabEntry::WitSymTabEntry():
  nparms_ (0), func_ (NULL), parmTypes_ (NULL)
{
}

WitSymTabEntry::WitSymTabEntry(int n, functionP fp, WitDRParmType::Tag pt[]):
  nparms_ (n), func_ (fp), parmTypes_ (pt)
{
}

WitSymTabEntry::~WitSymTabEntry()
{
}

// Operations

// Accessors

int WitSymTabEntry::nparms() const
{ return nparms_; }

WitSymTabEntry::functionP WitSymTabEntry::func() const
{ return func_; }

WitDRParmType::Tag *WitSymTabEntry::parmTypes() const
{ return parmTypes_; }

//------------------------------------------------------------------------------
// Implementation of class SymTable.
//------------------------------------------------------------------------------

WitRun*  WitSymTable::myWitRun_ = NULL;

// Constructor and destructor

WitSymTable::WitSymTable (WitRun * theRun)
   {
   myWitRun_ = theRun;
   }

WitSymTable::~WitSymTable()
{
  // remove all entries and delete each value
   if( theDictionary_.size() )
   {
      WitSymTableDict::iterator it = theDictionary_.begin();
      do
      {
         delete it->second;
      } while( ++it != theDictionary_.end() );
   }
}

// Operations
int WitSymTable::registerRules()
{
  int    i;
  WitSymTabEntry      *entryPtr;

  // printf("We will now register the rules\n");
  // iterate through the symbol-table structure and register each
  // rule in the hash dictionary.
  for (i = 0; symbolTable_[i].rule != NULL; i++)
  {
    entryPtr = new WitSymTabEntry(symbolTable_[i].nparms,
         symbolTable_[i].func, &symbolTable_[i].parmTypes[0]);

    typedef std::pair<std::string,WitSymTabEntry*> SymTableDictPair;
    theDictionary_.insert( SymTableDictPair( symbolTable_[i].rule, entryPtr ) );
  }

  return 0;
}

// Accesors
const WitSymTable::WitSymTableDict& WitSymTable::theDictionary()
{
  return theDictionary_;
}

WitRun* WitSymTable::myWitRun()
{ return myWitRun_; }

// Initialize static member data

  WitSymTabEntry::witSymbolDef  WitSymTable::symbolTable_[] = {

    {"add_bomEntry", 2, WitSymTable::witAddBomEntry,
      {WitDRParmType::string, WitDRParmType::string}},

    {"add_bopEntry", 2, WitSymTable::witAddBopEntry,
      {WitDRParmType::string, WitDRParmType::string}},

    {"add_demand", 2, WitSymTable::witAddDemand,
      {WitDRParmType::string, WitDRParmType::string}},

    {"add_part", 2, WitSymTable::witAddPart,
      {WitDRParmType::string, WitDRParmType::partCat}},

    {"add_partWithOperation", 1, WitSymTable::witAddPartWithOperation,
      {WitDRParmType::string}},

    {"add_operation", 1, WitSymTable::witAddOperation,
      {WitDRParmType::string}},

    {"add_subEntry", 3, WitSymTable::witAddSubEntry,
      {WitDRParmType::string, WitDRParmType::intScalar, WitDRParmType::string}},

    {"read", 1, NULL,
      {WitDRParmType::string}},

    {"set_problem_accAfterOptImp", 1, WitSymTable::witSetAccAfterOptImp,
      {WitDRParmType::boolScalar}},

    {"set_problem_accAfterSoftLB", 1, WitSymTable::witSetAccAfterSoftLB,
      {WitDRParmType::boolScalar}},

    {"set_problem_autoPriority", 1, WitSymTable::witSetAutoPriority,
      {WitDRParmType::boolScalar}},

    {"set_problem_compPrices", 1, WitSymTable::witSetCompPrices,
      {WitDRParmType::boolScalar}},

    {"set_problem_computeCriticalList", 1, 
      WitSymTable::witSetComputeCriticalList,
      {WitDRParmType::boolScalar}},

    {"set_problem_cplexParSpecDblVal", 1, WitSymTable::witSetCplexParSpecDblVal,
      {WitDRParmType::doubleScalar}},

    {"set_problem_cplexParSpecIntVal", 1, WitSymTable::witSetCplexParSpecIntVal,
      {WitDRParmType::intScalar}},

    {"set_problem_cplexParSpecName", 1, WitSymTable::witSetCplexParSpecName,
      {WitDRParmType::string}},
 
    {"set_problem_currentObjective", 1, WitSymTable::witSetCurrentObjective,
      {WitDRParmType::string}},
 
    {"set_problem_currentScenario", 1, WitSymTable::witSetCurrentScenario,
      {WitDRParmType::intScalar}},

    {"set_problem_equitability", 1, WitSymTable::witSetEquitability,
      {WitDRParmType::intScalar}},

    {"set_problem_execEmptyBom", 1, WitSymTable::witSetExecEmptyBom,
      {WitDRParmType::boolScalar}},

    {"set_problem_expCutoff", 1, WitSymTable::witSetExpCutoff,
      {WitDRParmType::doubleScalar}},

    {"set_problem_forcedMultiEq", 1, WitSymTable::witSetForcedMultiEq,
      {WitDRParmType::boolScalar}},

    {"set_problem_hashTableSize", 1, WitSymTable::witSetHashTableSize,
      {WitDRParmType::intScalar}},

    {"set_problem_highPrecisionWD", 1, WitSymTable::witSetHighPrecisionWD,
      {WitDRParmType::boolScalar}},

    {"set_problem_independentOffsets", 1, WitSymTable::witSetIndependentOffsets,
      {WitDRParmType::boolScalar}},

    {"set_problem_localBuildAhead", 1, WitSymTable::witSetLocalBuildAhead,
      {WitDRParmType::boolScalar}},

    {"set_problem_localMultiExec", 1, WitSymTable::witSetLocalMultiExec,
      {WitDRParmType::boolScalar}},

    {"set_problem_lotSizeTol", 1, WitSymTable::witSetLotSizeTol,
      {WitDRParmType::doubleScalar}},

    {"set_problem_minimalExcess", 1, WitSymTable::witSetMinimalExcess,
      {WitDRParmType::boolScalar}},

    {"set_problem_mipMode", 1, WitSymTable::witSetMipMode,
      {WitDRParmType::boolScalar}},

    {"set_problem_modHeurAlloc", 1, WitSymTable::witSetModHeurAlloc,
      {WitDRParmType::boolScalar}},

    {"set_problem_multiExec", 1, WitSymTable::witSetMultiExec,
      {WitDRParmType::boolScalar}},

    {"set_problem_multiObjMode", 1, WitSymTable::witSetMultiObjMode,
      {WitDRParmType::boolScalar}},

    {"set_problem_multiObjTol", 1, WitSymTable::witSetMultiObjTol,
      {WitDRParmType::doubleScalar}},

    {"set_problem_multiRoute", 1, WitSymTable::witSetMultiRoute,
      {WitDRParmType::boolScalar}},

    {"set_problem_nPeriods", 1, WitSymTable::witSetNPeriods,
      {WitDRParmType::intScalar}},

    {"set_problem_nScenarios", 1, WitSymTable::witSetNScenarios,
      {WitDRParmType::intScalar}},

    {"set_problem_newPipPggOrder", 1, WitSymTable::witSetNewPipPggOrder,
      {WitDRParmType::boolScalar}},

    {"set_problem_nonMrSelSplit", 1, WitSymTable::witSetNonMrSelSplit,
      {WitDRParmType::boolScalar}},

    {"set_problem_nstnResidual", 1, WitSymTable::witSetNstnResidual,
      {WitDRParmType::boolScalar}},

    {"set_problem_objChoice", 1, WitSymTable::witSetObjChoice,
      {WitDRParmType::intScalar}},

    {"set_problem_objectiveListSpec", 1, WitSymTable::witSetObjectiveListSpec,
      {WitDRParmType::string}},
 
    {"set_problem_objectiveRank", 1, WitSymTable::witSetObjectiveRank,
      {WitDRParmType::intScalar}},

    {"set_problem_outputPrecision", 1, WitSymTable::witSetOutputPrecision,
      {WitDRParmType::intScalar}},

    {"set_problem_penExec", 1, WitSymTable::witSetPenExec,
      {WitDRParmType::boolScalar}},

    {"set_problem_perfPegging", 1, WitSymTable::witSetPerfPegging,
      {WitDRParmType::boolScalar}},

    {"set_problem_periodStage", 1, WitSymTable::witSetPeriodStage,
      {WitDRParmType::intVector}},

    {"set_problem_periodsPerYear", 1, WitSymTable::witSetPeriodsPerYear,
      {WitDRParmType::doubleScalar}},

    {"set_problem_pgdCritListMode", 1, 
      WitSymTable::witSetPgdCritListMode,
      {WitDRParmType::boolScalar}},

    {"set_problem_pipSeqClearsNow", 1, WitSymTable::witSetPipSeqClearsNow,
      {WitDRParmType::boolScalar}},

    {"set_problem_pipSeqFromHeur", 1, WitSymTable::witSetPipSeqFromHeur,
      {WitDRParmType::boolScalar}},

    {"set_problem_prefHighStockSLBs", 1, WitSymTable::witSetPrefHighStockSLBs,
      {WitDRParmType::boolScalar}},

    {"set_problem_probability", 1, WitSymTable::witSetProbability,
      {WitDRParmType::doubleScalar}},

    {"set_problem_respectStockSLBs", 1, WitSymTable::witSetRespectStockSLBs,
      {WitDRParmType::boolScalar}},

    {"set_problem_roundReqVols", 1, WitSymTable::witSetRoundReqVols,
      {WitDRParmType::boolScalar}},

    {"set_problem_selSplit", 1, WitSymTable::witSetSelSplit,
      {WitDRParmType::boolScalar}},

    {"set_problem_selectionRecovery", 1, WitSymTable::witSetSelectionRecovery,
      {WitDRParmType::boolScalar}},

    {"set_problem_skipFailures", 1, WitSymTable::witSetSkipFailures,
      {WitDRParmType::boolScalar}},

    {"set_problem_solverLogFileName", 1, WitSymTable::witSetSolverLogFileName,
      {WitDRParmType::string}},
 
    {"set_problem_stageByObject", 1, WitSymTable::witSetStageByObject,
      {WitDRParmType::boolScalar}},

    {"set_problem_stochMode", 1, WitSymTable::witSetStochMode,
      {WitDRParmType::boolScalar}},

    {"set_problem_stockRealloc", 1, WitSymTable::witSetStockRealloc,
      {WitDRParmType::boolScalar}},

    {"set_problem_stockReallocation", 1, WitSymTable::witSetStockReallocation,
      {WitDRParmType::boolScalar}},

    {"set_problem_srSelSplit", 1, WitSymTable::witSetSrSelSplit,
      {WitDRParmType::boolScalar}},

    {"set_problem_tieBreakPropRt", 1, WitSymTable::witSetTieBreakPropRt,
      {WitDRParmType::boolScalar}},

    {"set_problem_title", 1, WitSymTable::witSetTitle,
      {WitDRParmType::string}},
 
    {"set_problem_truncOffsets", 1, WitSymTable::witSetTruncOffsets,
      {WitDRParmType::boolScalar}},

    {"set_problem_twoWayMultiExec", 1, WitSymTable::witSetTwoWayMultiExec,
      {WitDRParmType::boolScalar}},

    {"set_problem_useFocusHorizons", 1, WitSymTable::witSetUseFocusHorizons,
      {WitDRParmType::boolScalar}},

    {"set_problem_userHeurStart", 1, WitSymTable::witSetUserHeurStart,
      {WitDRParmType::boolScalar}},

    {"set_problem_wbounds", 1, WitSymTable::witSetWbounds,
      {WitDRParmType::doubleScalar}},

    {"set_problem_wit34Compatible", 1, WitSymTable::witSetWit34Compatible,
      {WitDRParmType::boolScalar}},
      
    {"set_part", 1, NULL, {WitDRParmType::string}},

    {"set_part_asapPipOrder", 1, WitSymTable::witSetPartAsapPipOrder,
      {WitDRParmType::boolScalar}},

    {"set_part_baSelSplit", 1, WitSymTable::witSetPartBaSelSplit,
      {WitDRParmType::boolScalar}},

    {"set_part_boundedLeadTimes", 1, WitSymTable::witSetPartBoundedLeadTimes,
      {WitDRParmType::boolScalar}},

    {"set_part_buildAheadUB", 1, WitSymTable::witSetPartBuildAheadUB,
      {WitDRParmType::intVector}},

    {"set_part_buildAheadLimit", 1, WitSymTable::witSetPartBuildAheadLimit,
      {WitDRParmType::intScalar}},

    {"set_part_buildAsap", 1, WitSymTable::witSetPartBuildAsap,
      {WitDRParmType::boolScalar}},

    {"set_part_buildNstn", 1, WitSymTable::witSetPartBuildNstn,
      {WitDRParmType::boolScalar}},

    {"set_part_obj1ScrapCost", 1, WitSymTable::witSetPartObj1ScrapCost,
      {WitDRParmType::doubleVector}},

    {"set_part_obj1StockCost", 1, WitSymTable::witSetPartObj1StockCost,
      {WitDRParmType::doubleVector}},

    {"set_part_objectStage", 1, WitSymTable::witSetPartObjectStage,
      {WitDRParmType::intScalar}},

    {"set_part_propRouting", 1, WitSymTable::witSetPartPropRouting,
      {WitDRParmType::boolScalar}},

    {"set_part_propRtg", 1, WitSymTable::witSetPartPropRtg,
      {WitDRParmType::boolVector}},

    {"set_part_scrapAllowed", 1, WitSymTable::witSetPartScrapAllowed,
      {WitDRParmType::boolScalar}},

    {"set_part_scrapCost", 1, WitSymTable::witSetPartScrapCost,
      {WitDRParmType::doubleVector}},

    {"set_part_singleSource", 1, WitSymTable::witSetPartSingleSource,
      {WitDRParmType::boolScalar}},

    {"set_part_stockBounds", 1, WitSymTable::witSetPartStockBounds,
      {WitDRParmType::boundSet}},

    {"set_part_stockCost", 1, WitSymTable::witSetPartStockCost,
      {WitDRParmType::doubleVector}},

    {"set_part_supplyVol", 1, WitSymTable::witSetPartSupplyVol,
      {WitDRParmType::doubleVector}},

    {"set_part_selForDel", 1, WitSymTable::witSetPartSelForDel,
      {WitDRParmType::boolScalar}},

    {"set_part_unitCost", 1, WitSymTable::witSetPartUnitCost,
      {WitDRParmType::doubleScalar}},

    {"set_demand", 2, NULL, {WitDRParmType::string, WitDRParmType::string}},

    {"set_demand_buildAheadLimit", 1,
      WitSymTable::witSetDemandBuildAheadLimit,
      {WitDRParmType::intScalar}},

    {"set_demand_buildAheadUB", 1,
      WitSymTable::witSetDemandBuildAheadUB,
      {WitDRParmType::intVector}},

    {"set_demand_cumShipBounds", 1, WitSymTable::witSetDemandCumShipBounds,
      {WitDRParmType::boundSet}},

    {"set_demand_cumShipReward", 1,
      WitSymTable::witSetDemandCumShipReward,
      {WitDRParmType::doubleVector}},

    {"set_demand_demandVol", 1, WitSymTable::witSetDemandDemandVol,
      {WitDRParmType::doubleVector}},

    {"set_demand_focusHorizon", 1, WitSymTable::witSetDemandFocusHorizon,
      {WitDRParmType::intScalar}},

    {"set_demand_grossRev", 1, WitSymTable::witSetDemandGrossRev,
      {WitDRParmType::doubleScalar}},

    {"set_demand_intShipVols", 1, WitSymTable::witSetDemandIntShipVols,
      {WitDRParmType::boolScalar}},

    {"set_demand_leadTimeUB", 1, WitSymTable::witSetDemandLeadTimeUB,
      {WitDRParmType::intVector}},

    {"set_demand_obj1CumShipReward", 1,
      WitSymTable::witSetDemandObj1CumShipReward,
      {WitDRParmType::doubleVector}},

    {"set_demand_obj1ShipReward", 1, WitSymTable::witSetDemandObj1ShipReward,
      {WitDRParmType::doubleVector}},

    {"set_demand_pipSeqIncShipVol", 1,
      WitSymTable::witSetDemandPipSeqIncShipVol,
      {WitDRParmType::doubleScalar}},

    {"set_demand_pipSeqShipPeriod", 1,
      WitSymTable::witSetDemandPipSeqShipPeriod,
      {WitDRParmType::intScalar}},

    {"set_demand_prefBuildAhead", 1, WitSymTable::witSetDemandPrefBuildAhead,
      {WitDRParmType::boolScalar}},

    {"set_demand_priority", 1, WitSymTable::witSetDemandPriority,
      {WitDRParmType::intVector}},

    {"set_demand_searchInc", 1, WitSymTable::witSetDemandSearchInc,
      {WitDRParmType::doubleScalar}},

    {"set_demand_selForDel", 1, WitSymTable::witSetDemandSelForDel,
      {WitDRParmType::boolScalar}},

    {"set_demand_shipLateAllowed", 1, WitSymTable::witSetDemandShipLateAllowed,
      {WitDRParmType::boolScalar}},

    {"set_demand_shipLateLimit", 1, WitSymTable::witSetDemandShipLateLimit,
      {WitDRParmType::intScalar}},

    {"set_demand_shipLateUB", 1, WitSymTable::witSetDemandShipLateUB,
      {WitDRParmType::intVector}},

    {"set_demand_shipReward", 1, WitSymTable::witSetDemandShipReward,
      {WitDRParmType::doubleVector}},

    {"set_demand_shipVol", 1, WitSymTable::witSetDemandShipVol,
      {WitDRParmType::doubleVector}},

    {"set_operation", 1, NULL, {WitDRParmType::string}},
 
    {"set_operation_execBounds", 1, WitSymTable::witSetOperationExecBounds,
      {WitDRParmType::boundSet}},

    {"set_operation_execCost", 1, WitSymTable::witSetOperationExecCost,
      {WitDRParmType::doubleVector}},

    {"set_operation_execPenalty", 1, WitSymTable::witSetOperationExecPenalty,
      {WitDRParmType::doubleScalar}},

    {"set_operation_incLotSize", 1, WitSymTable::witSetOperationIncLotSize,
      {WitDRParmType::doubleVector}},

    {"set_operation_incLotSize2", 1, WitSymTable::witSetOperationIncLotSize2,
      {WitDRParmType::doubleVector}},

    {"set_operation_intExecVols", 1,
          WitSymTable::witSetOperationIntExecVols,
      {WitDRParmType::boolScalar}},

    {"set_operation_lotSize2Thresh", 1,
                                    WitSymTable::witSetOperationLotSize2Thresh,
      {WitDRParmType::doubleVector}},

    {"set_operation_minLotSize", 1, WitSymTable::witSetOperationMinLotSize,
      {WitDRParmType::doubleVector}},

    {"set_operation_minLotSize2", 1, WitSymTable::witSetOperationMinLotSize2,
      {WitDRParmType::doubleVector}},

    {"set_operation_obj1ExecCost", 1, WitSymTable::witSetOperationObj1ExecCost,
      {WitDRParmType::doubleVector}},

    {"set_operation_objectStage", 1, WitSymTable::witSetOperationObjectStage,
      {WitDRParmType::intScalar}},

    {"set_operation_selForDel", 1, WitSymTable::witSetOperationSelForDel,
      {WitDRParmType::boolScalar}},

    {"set_operation_twoLevelLotSizes", 1,
          WitSymTable::witSetOperationTwoLevelLotSizes,
      {WitDRParmType::boolScalar}},

    {"set_operation_yield", 1, WitSymTable::witSetOperationYield,
      {WitDRParmType::intVector}},

    {"set_operation_yieldRate", 1, WitSymTable::witSetOperationYieldRate,
      {WitDRParmType::doubleVector}},

    {"set_operation_cycleTime34", 1,
      WitSymTable::witSetOperationCycleTime34, {WitDRParmType::doubleVector}},

    {"set_operation_execVol", 1,
      WitSymTable::witSetOperationExecVol, {WitDRParmType::doubleVector}},

    {"set_bomEntry", 2, NULL,
       {WitDRParmType::string, WitDRParmType::intScalar}},

    {"set_bomEntry_consRate", 1, WitSymTable::witSetBomEntryConsRate,
      {WitDRParmType::doubleVector}}, 

    {"set_bomEntry_earliestPeriod", 1, 
      WitSymTable::witSetBomEntryEarliestPeriod,
      {WitDRParmType::intScalar}},

    {"set_bomEntry_execPenalty", 1, WitSymTable::witSetBomEntryExecPenalty,
      {WitDRParmType::doubleScalar}},

    {"set_bomEntry_fallout", 1, WitSymTable::witSetBomEntryFallout,
      {WitDRParmType::intScalar}},

    {"set_bomEntry_falloutRate", 1, WitSymTable::witSetBomEntryFalloutRate,
      {WitDRParmType::doubleScalar}},

    {"set_bomEntry_latestPeriod", 1,
      WitSymTable::witSetBomEntryLatestPeriod,
      {WitDRParmType::intScalar}},

    {"set_bomEntry_mandEC", 1, WitSymTable::witSetBomEntryMandEC,
      {WitDRParmType::boolScalar}},

    {"set_bomEntry_offset", 1, WitSymTable::witSetBomEntryOffset,
      {WitDRParmType::doubleVector}},

    {"set_bomEntry_propRouting", 1, WitSymTable::witSetBomEntryPropRouting,
      {WitDRParmType::boolScalar}},

    {"set_bomEntry_propRtg", 1, WitSymTable::witSetBomEntryPropRtg,
      {WitDRParmType::boolVector}},

    {"set_bomEntry_routingShare", 1, WitSymTable::witSetBomEntryRoutingShare,
      {WitDRParmType::doubleVector}},

    {"set_bomEntry_selForDel", 1, WitSymTable::witSetBomEntrySelForDel,
      {WitDRParmType::boolScalar}},

    {"set_bomEntry_singleSource", 1, WitSymTable::witSetBomEntrySingleSource,
      {WitDRParmType::boolScalar}},

    {"set_bomEntry_usageRate", 1, WitSymTable::witSetBomEntryUsageRate,
      {WitDRParmType::doubleScalar}}, 

    {"set_subEntry", 3, NULL,
       {WitDRParmType::string,
        WitDRParmType::intScalar, 
        WitDRParmType::intScalar}},

    {"set_subEntry_consRate", 1, WitSymTable::witSetSubEntryConsRate,
      {WitDRParmType::doubleVector}},  

    {"set_subEntry_earliestPeriod", 1, 
      WitSymTable::witSetSubEntryEarliestPeriod,
      {WitDRParmType::intScalar}},

    {"set_subEntry_execPenalty", 1, WitSymTable::witSetSubEntryExecPenalty,
      {WitDRParmType::doubleScalar}},

    {"set_subEntry_expAllowed", 1,
      WitSymTable::witSetSubEntryExpAllowed, {WitDRParmType::boolScalar}},

    {"set_subEntry_expNetAversion", 1,
      WitSymTable::witSetSubEntryExpNetAversion, {WitDRParmType::doubleScalar}},

    {"set_subEntry_fallout", 1, WitSymTable::witSetSubEntryFallout,
      {WitDRParmType::intScalar}},

    {"set_subEntry_falloutRate", 1, WitSymTable::witSetSubEntryFalloutRate,
      {WitDRParmType::doubleScalar}},

    {"set_subEntry_intSubVols", 1,
      WitSymTable::witSetSubEntryIntSubVols, {WitDRParmType::boolScalar}},

    {"set_subEntry_latestPeriod", 1,
      WitSymTable::witSetSubEntryLatestPeriod,
      {WitDRParmType::intScalar}},

    {"set_subEntry_mrpNetAllowed", 1,
      WitSymTable::witSetSubEntryMrpNetAllowed, {WitDRParmType::boolScalar}},

    {"set_subEntry_netAllowed", 1,
      WitSymTable::witSetSubEntryNetAllowed, {WitDRParmType::boolScalar}},

    {"set_subEntry_usageRate", 1, WitSymTable::witSetSubEntryUsageRate,
      {WitDRParmType::doubleScalar}},  

    {"set_subEntry_obj1SubCost", 1,
      WitSymTable::witSetSubEntryObj1SubCost,
      {WitDRParmType::doubleVector}},

    {"set_subEntry_offset", 1,
      WitSymTable::witSetSubEntryOffset,
      {WitDRParmType::doubleVector}},

    {"set_subEntry_routingShare", 1, WitSymTable::witSetSubEntryRoutingShare,
      {WitDRParmType::doubleVector}},

    {"set_subEntry_selForDel", 1,
      WitSymTable::witSetSubEntrySelForDel, {WitDRParmType::boolScalar}},

    {"set_subEntry_subCost", 1,
      WitSymTable::witSetSubEntrySubCost, {WitDRParmType::doubleVector}},

    {"set_subEntry_subVol", 1, WitSymTable::witSetSubEntrySubVol,
      {WitDRParmType::doubleVector}}, 

    {"set_bopEntry", 2, NULL,
       {WitDRParmType::string, WitDRParmType::intScalar}},

    {"set_bopEntry_byProduct", 1, WitSymTable::witSetBopEntryByProduct,
      {WitDRParmType::boolScalar}},

    {"set_bopEntry_earliestPeriod", 1,
      WitSymTable::witSetBopEntryEarliestPeriod,
      {WitDRParmType::intScalar}},

    {"set_bopEntry_expAllowed", 1, WitSymTable::witSetBopEntryExpAllowed,
      {WitDRParmType::boolScalar}},

    {"set_bopEntry_expAversion", 1,
      WitSymTable::witSetBopEntryExpAversion, {WitDRParmType::doubleScalar}},

    {"set_bopEntry_latestPeriod", 1,
      WitSymTable::witSetBopEntryLatestPeriod,
      {WitDRParmType::intScalar}},

    {"set_bopEntry_meSelSplit", 1, WitSymTable::witSetBopEntryMeSelSplit,
      {WitDRParmType::boolScalar}},

    {"set_bopEntry_offset", 1, WitSymTable::witSetBopEntryOffset,
      {WitDRParmType::doubleVector}},

    {"set_bopEntry_prodRate", 1,
      WitSymTable::witSetBopEntryProdRate, {WitDRParmType::doubleScalar}},

    {"set_bopEntry_productRate", 1,
      WitSymTable::witSetBopEntryProductRate, {WitDRParmType::doubleVector}},

    {"set_bopEntry_routingShare", 1,
      WitSymTable::witSetBopEntryRoutingShare, {WitDRParmType::doubleVector}},

    {"set_bopEntry_selForDel", 1, WitSymTable::witSetBopEntrySelForDel,
      {WitDRParmType::boolScalar}},

    {"set_partWithOperation_asapPipOrder", 1,
      WitSymTable::witSetPartAsapPipOrder, {WitDRParmType::boolScalar}},

    {"set_partWithOperation_baSelSplit", 1,
      WitSymTable::witSetPartBaSelSplit, {WitDRParmType::boolScalar}},

    {"set_partWithOperation_boundedLeadTimes", 1,
      WitSymTable::witSetPartBoundedLeadTimes, {WitDRParmType::boolScalar}},

    {"set_partWithOperation_buildAheadUB", 1,
      WitSymTable::witSetPartBuildAheadUB, {WitDRParmType::intVector}},

    {"set_partWithOperation_buildAheadLimit", 1,
      WitSymTable::witSetPartBuildAheadLimit, {WitDRParmType::intScalar}},

    {"set_partWithOperation_buildAsap", 1,
      WitSymTable::witSetPartBuildAsap, {WitDRParmType::boolScalar}},

    {"set_partWithOperation_buildNstn", 1,
      WitSymTable::witSetPartBuildNstn, {WitDRParmType::boolScalar}},

    {"set_partWithOperation_obj1ScrapCost", 1,
      WitSymTable::witSetPartObj1ScrapCost, {WitDRParmType::doubleVector}},

    {"set_partWithOperation_obj1StockCost", 1,
      WitSymTable::witSetPartObj1StockCost, {WitDRParmType::doubleVector}},

    {"set_partWithOperation_objectStage", 1,
      WitSymTable::witSetPartObjectStage, {WitDRParmType::intScalar}},

    {"set_partWithOperation_propRouting", 1,
      WitSymTable::witSetPartPropRouting, {WitDRParmType::boolScalar}},

    {"set_partWithOperation_propRtg", 1,
      WitSymTable::witSetPartPropRtg, {WitDRParmType::boolVector}},

    {"set_partWithOperation_scrapAllowed", 1,
      WitSymTable::witSetPartScrapAllowed, {WitDRParmType::boolScalar}},

    {"set_partWithOperation_scrapCost", 1,
      WitSymTable::witSetPartScrapCost, {WitDRParmType::doubleVector}},

    {"set_partWithOperation_selForDel", 1,
      WitSymTable::witSetPartSelForDel, {WitDRParmType::boolScalar}},

    {"set_partWithOperation_singleSource", 1,
      WitSymTable::witSetPartSingleSource, {WitDRParmType::boolScalar}},

    {"set_partWithOperation_stockBounds", 1,
      WitSymTable::witSetPartStockBounds, {WitDRParmType::boundSet}},

    {"set_partWithOperation_supplyVol", 1,
      WitSymTable::witSetPartSupplyVol, {WitDRParmType::doubleVector}},

    {"set_partWithOperation_stockCost", 1,
      WitSymTable::witSetPartStockCost, {WitDRParmType::doubleVector}},

    {"set_partWithOperation_unitCost", 1,
      WitSymTable::witSetPartUnitCost, {WitDRParmType::doubleScalar}},

    {NULL,0,0,{WitDRParmType::undefined}}
  };


// Implementation of API function wrappers

WitParseRC WitSymTable::witAddBomEntry()
{
  myWitRun()->witAddBomEntry
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getPartName());
  return 0;   
}

WitParseRC WitSymTable::witAddBopEntry()
{
  myWitRun()->witAddBopEntry
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getPartName());
  return 0;
}

WitParseRC WitSymTable::witAddDemand()
{
  myWitRun()->witAddDemand
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName());
  return 0;
}

WitParseRC WitSymTable::witAddPart()
{
  switch (WitParser::instance ()->currentEntity()->getCatArg(1)) {
    case WitDRPartCat::capacity:
      myWitRun()->witAddPart
        (WitParser::instance ()->currentEntity()->getPartName(), WitCAPACITY);
      break;
    case WitDRPartCat::material:
      myWitRun()->witAddPart
        (WitParser::instance ()->currentEntity()->getPartName(), WitMATERIAL);
      break;
  };  
  return 0;
} 

WitParseRC WitSymTable::witAddPartWithOperation()
{
  myWitRun()->witAddPartWithOperation
    (WitParser::instance ()->currentEntity()->getPartName());
  return 0;
}

WitParseRC WitSymTable::witAddOperation()
{
  myWitRun()->witAddOperation
    (WitParser::instance ()->currentEntity()->getOperationName());
  return 0;
}

WitParseRC WitSymTable::witAddSubEntry()
{
  myWitRun()->witAddSubsBomEntry
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getPartName());
  return 0;
}

WitParseRC WitSymTable::witSetAccAfterOptImp()
{
  myWitRun()->witSetAccAfterOptImp
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetAccAfterSoftLB()
{
  myWitRun()->witSetAccAfterSoftLB
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetAutoPriority()
{
  myWitRun()->witSetAutoPriority
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetCompPrices()
{
  myWitRun()->witSetCompPrices
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetComputeCriticalList()
{
  myWitRun()->witSetComputeCriticalList
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetCplexParSpecDblVal()
{
  myWitRun()->witSetCplexParSpecDblVal
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetCplexParSpecIntVal()
{
  myWitRun()->witSetCplexParSpecIntVal
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetCplexParSpecName()
{
  myWitRun()->witSetCplexParSpecName
    (WitParser::instance ()->currentAttr()->getStringArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetCurrentObjective()
{
  myWitRun()->witSetCurrentObjective
    (WitParser::instance ()->currentAttr()->getStringArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetCurrentScenario()
{
  myWitRun()->witSetCurrentScenario
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetEquitability()
{
  myWitRun()->witSetEquitability
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetExecEmptyBom()
{
  myWitRun()->witSetExecEmptyBom
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetExpCutoff()
{
  myWitRun()->witSetExpCutoff
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetForcedMultiEq()
{
  myWitRun()->witSetForcedMultiEq
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetHashTableSize()
{
  myWitRun()->witSetHashTableSize
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetHighPrecisionWD()
{
  myWitRun()->witSetHighPrecisionWD
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetIndependentOffsets()
{
  myWitRun()->witSetIndependentOffsets
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetLocalBuildAhead()
{
  myWitRun()->witSetLocalBuildAhead
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetLocalMultiExec()
{
  myWitRun()->witSetLocalMultiExec
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetLotSizeTol()
{
  myWitRun()->witSetLotSizeTol
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetMinimalExcess()
{
  myWitRun()->witSetMinimalExcess
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetMipMode()
{
  myWitRun()->witSetMipMode
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetModHeurAlloc()
{
  myWitRun()->witSetModHeurAlloc
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetMultiExec()
{
  myWitRun()->witSetMultiExec
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetMultiObjMode()
{
  myWitRun()->witSetMultiObjMode
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetMultiObjTol()
{
  myWitRun()->witSetMultiObjTol
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetMultiRoute()
{
  myWitRun()->witSetMultiRoute
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetNPeriods()
{
  myWitRun()->witSetNPeriods
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetNScenarios()
{
  myWitRun()->witSetNScenarios
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetNewPipPggOrder()
{
  myWitRun()->witSetNewPipPggOrder
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetNonMrSelSplit()
{
  myWitRun()->witSetNonMrSelSplit
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetNstnResidual()
{
  myWitRun()->witSetNstnResidual
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetObjChoice()
{
  myWitRun()->witSetObjChoice
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetObjectiveListSpec()
{
  myWitRun()->witSetObjectiveListSpec
    (WitParser::instance ()->currentAttr()->getStringArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetObjectiveRank()
{
  myWitRun()->witSetObjectiveRank
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetOutputPrecision()
{
  myWitRun()->witSetOutputPrecision
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPenExec()
{
  myWitRun()->witSetPenExec
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPerfPegging()
{
  myWitRun()->witSetPerfPegging
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPeriodStage()
{
  int    *iptr;
  iptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec 
  (WitStochImpMgr::defPeriodStageIdx ());

  if (iptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetPeriodStage (iptr);
  return 0;
}

WitParseRC WitSymTable::witSetPeriodsPerYear ()
   {
   myWitRun ()->myMsgFac () ("setObsAttFromFileWmsg", "periodsPerYear");

   return 0;
   }

WitParseRC WitSymTable::witSetPgdCritListMode()
{
  myWitRun()->witSetPgdCritListMode
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPipSeqClearsNow()
{
  if (WitParser::instance ()->currentAttr ()->getBoolArg (0))
     myWitRun()->witClearPipSeq ();

  return 0;
}

WitParseRC WitSymTable::witSetPipSeqFromHeur()
{
  myWitRun()->witSetPipSeqFromHeur
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPrefHighStockSLBs()
{
  myWitRun()->witSetPrefHighStockSLBs
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetProbability()
{
  myWitRun()->witSetProbability
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetRespectStockSLBs()
{
  myWitRun()->witSetRespectStockSLBs
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetRoundReqVols()
{
  myWitRun()->witSetRoundReqVols
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSelSplit()
{
  myWitRun()->witSetSelSplit
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSelectionRecovery()
{
  myWitRun()->witSetSelectionRecovery
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSkipFailures()
{
  myWitRun()->witSetSkipFailures
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSolverLogFileName()
{
  myWitRun()->witSetSolverLogFileName
    (WitParser::instance ()->currentAttr()->getStringArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetStageByObject()
{
  myWitRun()->witSetStageByObject
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetStochMode()
{
  myWitRun()->witSetStochMode
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetStockRealloc()
{
  myWitRun()->witSetStockRealloc
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetStockReallocation()
{
  myWitRun()->witSetStockReallocation
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSrSelSplit()
{
  myWitRun()->witSetSrSelSplit
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetTieBreakPropRt()
{
  myWitRun()->witSetTieBreakPropRt
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetTitle()
{
  myWitRun()->witSetTitle
    (WitParser::instance ()->currentAttr()->getStringArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetTruncOffsets()
{
  myWitRun()->witSetTruncOffsets
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetTwoWayMultiExec()
{
  myWitRun()->witSetTwoWayMultiExec
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetUseFocusHorizons()
{
  myWitRun()->witSetUseFocusHorizons
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetUserHeurStart()
{
  myWitRun()->witSetUserHeurStart
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetWbounds()
{
  myWitRun()->witSetWbounds
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetWit34Compatible()
{
  myWitRun()->witSetWit34Compatible
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPartAsapPipOrder()
{
  myWitRun()->witSetPartAsapPipOrder
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPartBaSelSplit()
{
  myWitRun()->witSetPartBaSelSplit
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPartBoundedLeadTimes()
{
  myWitRun()->witSetPartBoundedLeadTimes
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPartBuildAheadUB()
{
  int  *iptr;
  iptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
    (WitMaterial::defBuildAheadUB(myWitRun()->myProblem ()));
  if (iptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetPartBuildAheadUB
    (WitParser::instance ()->currentEntity()->getPartName(), iptr);
  return 0;
}

WitParseRC WitSymTable::witSetPartBuildAheadLimit()
{
  myWitRun()->witSetPartBuildAheadLimit
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPartBuildAsap()
{
  myWitRun()->witSetPartBuildAsap
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPartBuildNstn()
{
  myWitRun()->witSetPartBuildNstn
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPartObj1ScrapCost()
{
  double *dptr;
  dptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitPart::defScrapCost());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetPartObj1ScrapCost
    (WitParser::instance ()->currentEntity()->getPartName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetPartObj1StockCost()
{
  double * dptr;
  dptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitMaterial::defStockCost());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetPartObj1StockCost
    (WitParser::instance ()->currentEntity()->getPartName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetPartObjectStage()
{
  myWitRun()->witSetPartObjectStage
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPartPropRouting()
{
  myWitRun()->witSetPartPropRouting
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPartPropRtg()
{
  WitBoolean * bptr;

  bptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getBoolVec
    (WitPart::defPropRtg());
  if (bptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetPartPropRtg
    (WitParser::instance ()->currentEntity()->getPartName(), bptr);
  return 0;
}

WitParseRC WitSymTable::witSetPartScrapAllowed()
{
  myWitRun()->witSetPartScrapAllowed
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPartScrapCost()
{
  double *dptr;
  dptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitPart::defScrapCost());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetPartScrapCost
    (WitParser::instance ()->currentEntity()->getPartName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetPartSingleSource()
{
  myWitRun()->witSetPartSingleSource
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPartStockBounds()
{
  WitVectorSpec * vecPtr;
  double *        arg2 = NULL;
  double *        arg3 = NULL;
  double *        arg4 = NULL;

  vecPtr =
     WitParser::instance ()->currentAttr()->getBoundSetArg(0)->hardLBVec();

  if (vecPtr != NULL) {
    arg2 = vecPtr->getDblVec (WitBoundSet::defHardLB());
    if (arg2 == NULL) return PERIOD_ERROR;
  };

  vecPtr =
     WitParser::instance ()->currentAttr()->getBoundSetArg(0)->softLBVec();

  if (vecPtr != NULL) {
    arg3 = vecPtr->getDblVec (WitBoundSet::defSoftLB());
    if (arg3 == NULL) return PERIOD_ERROR;
  };

  vecPtr =
     WitParser::instance ()->currentAttr()->getBoundSetArg(0)->hardUBVec();

  if (vecPtr != NULL) {
    arg4 = vecPtr->getDblVec (WitBoundSet::defHardUB());
    if (arg4 == NULL) return PERIOD_ERROR;
  };

  myWitRun()->witSetPartStockBounds
    (WitParser::instance ()->currentEntity()->getPartName(), arg2, arg3, arg4);
  return 0;
}

WitParseRC WitSymTable::witSetPartStockCost()
{
  double * dptr;
  dptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitMaterial::defStockCost());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetPartStockCost
    (WitParser::instance ()->currentEntity()->getPartName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetPartSupplyVol()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitPart::defSupplyVol());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetPartSupplyVol
    (WitParser::instance ()->currentEntity()->getPartName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetPartSelForDel()
{
  myWitRun()->witSetPartSelForDel
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPartUnitCost ()
   {
   myWitRun ()->myMsgFac () ("setObsAttFromFileWmsg", "unitCost");

   return 0;
   }

WitParseRC WitSymTable::witSetDemandBuildAheadLimit()
{
  myWitRun()->witSetDemandBuildAheadLimit
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetDemandBuildAheadUB()
{
  int  *iptr;

  iptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
    (WitDemand::defBuildAheadUB());
  if (iptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandBuildAheadUB
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     iptr);

  return 0;
}

WitParseRC WitSymTable::witSetDemandCumShipBounds()
{
  WitVectorSpec * vecPtr;
  double *        arg3 = NULL;
  double *        arg4 = NULL;
  double *        arg5 = NULL;

  vecPtr =
     WitParser::instance ()->currentAttr()->getBoundSetArg(0)->hardLBVec();
  if (vecPtr != NULL) {
    arg3 = vecPtr->getDblVec (WitBoundSet::defHardLB());
    if (arg3 == NULL) return PERIOD_ERROR;
  };

  vecPtr =
     WitParser::instance ()->currentAttr()->getBoundSetArg(0)->softLBVec();
  if (vecPtr != NULL) {
    arg4 = vecPtr->getDblVec (WitBoundSet::defSoftLB());
    if (arg4 == NULL) return PERIOD_ERROR;
  };

  vecPtr =
     WitParser::instance ()->currentAttr()->getBoundSetArg(0)->hardUBVec();
  if (vecPtr != NULL) {
    arg5 = vecPtr->getDblVec (WitBoundSet::defHardUB());
    if (arg5 == NULL) return PERIOD_ERROR;
  };

  myWitRun()->witSetDemandCumShipBounds
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     arg3,
     arg4,
     arg5);
  return 0;
}

WitParseRC WitSymTable::witSetDemandCumShipReward()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitDemand::defCumShipReward());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandCumShipReward
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetDemandDemandVol()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitDemand::defDemandVol());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandDemandVol
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetDemandFocusHorizon()
{
  myWitRun()->witSetDemandFocusHorizon
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetDemandGrossRev ()
   {
   myWitRun ()->myMsgFac () ("setObsAttFromFileWmsg", "grossRev");

   return 0;
   }

WitParseRC WitSymTable::witSetDemandIntShipVols()
{
  myWitRun()->witSetDemandIntShipVols
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetDemandLeadTimeUB()
{
  int  *iptr;

  iptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
    (WitDemand::defLeadTimeUB(myWitRun()->myProblem ()));
  if (iptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandLeadTimeUB
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     iptr);

  return 0;
}

WitParseRC WitSymTable::witSetDemandObj1CumShipReward()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitDemand::defCumShipReward());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandObj1CumShipReward
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetDemandObj1ShipReward()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitDemand::defShipReward());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandObj1ShipReward
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetDemandPipSeqIncShipVol()
{
  myWitRun()->witAppendToPipSeq
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     myWitRun ()->myProblem ()->myPipMgr ()->shipSeqShipPer (),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));

  myWitRun ()->myProblem ()->myPipMgr ()->setShipSeqShipPer (-1);

  return 0;
}

WitParseRC WitSymTable::witSetDemandPipSeqShipPeriod()
{
  myWitRun ()->myProblem ()->myPipMgr ()->setShipSeqShipPer (
     WitParser::instance ()->currentAttr()->getIntArg(0));

  return 0;
}

WitParseRC WitSymTable::witSetDemandPrefBuildAhead()
{
  myWitRun()->witSetDemandPrefBuildAhead
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetDemandPriority()
{ 
  int    *iptr;

  iptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
    (WitDemand::defPriority());
  if (iptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandPriority
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(), iptr);
  return 0;
}

WitParseRC WitSymTable::witSetDemandSearchInc()
{
  myWitRun()->witSetDemandSearchInc
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetDemandSelForDel()
{
  myWitRun()->witSetDemandSelForDel
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetDemandShipLateAllowed()
{
  myWitRun()->witSetDemandShipLateAllowed
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetDemandShipLateLimit()
{
  myWitRun()->witSetDemandShipLateLimit
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetDemandShipLateUB()
{
  int  *iptr;

  iptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
    (WitDemand::defShipLateUB(myWitRun()->myProblem ()));
  if (iptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandShipLateUB
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     iptr);

  return 0;
}

WitParseRC WitSymTable::witSetDemandShipReward()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitDemand::defShipReward());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandShipReward
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetDemandShipVol()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitDemand::defShipVol());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandShipVol
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetOperationExecBounds()
{
  WitVectorSpec * vecPtr;
  double *        arg2 = NULL;
  double *        arg3 = NULL;
  double *        arg4 = NULL;

  vecPtr =
     WitParser::instance ()->currentAttr()->getBoundSetArg(0)->hardLBVec();
  if (vecPtr != NULL) {
    arg2 = vecPtr->getDblVec (WitBoundSet::defHardLB());
    if (arg2 == NULL) return PERIOD_ERROR;
  };

  vecPtr =
     WitParser::instance ()->currentAttr()->getBoundSetArg(0)->softLBVec();
  if (vecPtr != NULL) {
    arg3 = vecPtr->getDblVec (WitBoundSet::defSoftLB());
    if (arg3 == NULL) return PERIOD_ERROR;
  };

  vecPtr =
     WitParser::instance ()->currentAttr()->getBoundSetArg(0)->hardUBVec();
  if (vecPtr != NULL) {
    arg4 = vecPtr->getDblVec (WitBoundSet::defHardUB());
    if (arg4 == NULL) return PERIOD_ERROR;
  };

  myWitRun()->witSetOperationExecBounds (
     WitParser::instance ()->currentEntity()->getOperationName(),
     arg2,
     arg3,
     arg4);
  return 0;
}

WitParseRC WitSymTable::witSetOperationExecCost()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defExecCost());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationExecCost
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetOperationExecPenalty()
{
  myWitRun()->witSetOperationExecPenalty
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetOperationIncLotSize()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defIncLotSize());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationIncLotSize
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetOperationIncLotSize2()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defIncLotSize2());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationIncLotSize2
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetOperationIntExecVols()
{
  myWitRun()->witSetOperationIntExecVols
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetOperationLotSize2Thresh()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defLotSize2Thresh());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationLotSize2Thresh
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetOperationMinLotSize()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defMinLotSize());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationMinLotSize
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetOperationMinLotSize2()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defMinLotSize2());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationMinLotSize2
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetOperationObj1ExecCost()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defExecCost());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationObj1ExecCost
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetOperationObjectStage()
{
  myWitRun()->witSetOperationObjectStage
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetOperationSelForDel()
{
  myWitRun()->witSetOperationSelForDel
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetOperationTwoLevelLotSizes()
{
  myWitRun()->witSetOperationTwoLevelLotSizes
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetOperationYield()
{
  int    *iptr;

  iptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
    (WitOperation::defYield());
  if (iptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationYield
    (WitParser::instance ()->currentEntity()->getOperationName(), iptr);
  return 0;
}

WitParseRC WitSymTable::witSetOperationYieldRate()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defYieldRate());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationYieldRate
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetOperationCycleTime34()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defCycleTime34());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationCycleTime34
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetOperationExecVol()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defExecVol());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationExecVol
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetBomEntryConsRate()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitConsEntry::defConsRate());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetBomEntryConsRate
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetBomEntryEarliestPeriod()
{
  myWitRun()->witSetBomEntryEarliestPeriod
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetBomEntryExecPenalty()
{
  myWitRun()->witSetBomEntryExecPenalty
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetBomEntryFallout()
{
  myWitRun()->witSetBomEntryFallout
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetBomEntryFalloutRate()
{
  myWitRun()->witSetBomEntryFalloutRate
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetBomEntryLatestPeriod()
{
  myWitRun()->witSetBomEntryLatestPeriod
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetBomEntryMandEC()
{
  myWitRun()->witSetBomEntryMandEC
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetBomEntryOffset()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitBillEntry::defOffset());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetBomEntryOffset
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetBomEntryPropRouting()
{
  myWitRun()->witSetBomEntryPropRouting
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetBomEntryPropRtg()
{
  WitBoolean * bptr;

  bptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getBoolVec
    (WitBomEntry::defPropRtg());
  if (bptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetBomEntryPropRtg
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     bptr);
  return 0;
}

WitParseRC WitSymTable::witSetBomEntryRoutingShare()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitBillEntry::defRoutingShare());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetBomEntryRoutingShare
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetBomEntrySelForDel()
{
  myWitRun()->witSetBomEntrySelForDel
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetBomEntrySingleSource()
{
  myWitRun()->witSetBomEntrySingleSource
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetBomEntryUsageRate()
{
  myWitRun()->witSetBomEntryUsageRate
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSubEntryConsRate()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitConsEntry::defConsRate());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetSubsBomEntryConsRate
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetSubEntryEarliestPeriod()
{
  myWitRun()->witSetSubsBomEntryEarliestPeriod
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSubEntryExecPenalty()
{
  myWitRun()->witSetSubsBomEntryExecPenalty
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSubEntryExpAllowed()
{
  myWitRun()->witSetSubsBomEntryExpAllowed
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSubEntryExpNetAversion()
{
  myWitRun()->witSetSubsBomEntryExpNetAversion
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSubEntryFallout()
{
  myWitRun()->witSetSubsBomEntryFallout
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSubEntryFalloutRate()
{
  myWitRun()->witSetSubsBomEntryFalloutRate
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSubEntryIntSubVols()
{
  myWitRun()->witSetSubsBomEntryIntSubVols
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSubEntryLatestPeriod()
{
  myWitRun()->witSetSubsBomEntryLatestPeriod
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSubEntryMrpNetAllowed()
{
  myWitRun()->witSetSubsBomEntryMrpNetAllowed
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSubEntryNetAllowed()
{
  myWitRun()->witSetSubsBomEntryNetAllowed
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSubEntryUsageRate()
{
  myWitRun()->witSetSubsBomEntryUsageRate
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;  
}

WitParseRC WitSymTable::witSetSubEntryObj1SubCost()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitSubEntry::defSubCost());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetSubsBomEntryObj1SubCost
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(), dptr);
  return 0; 
}

WitParseRC WitSymTable::witSetSubEntryOffset()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitBillEntry::defOffset());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetSubsBomEntryOffset
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetSubEntryRoutingShare()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitBillEntry::defRoutingShare());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetSubsBomEntryRoutingShare
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetSubEntrySelForDel()
{
  myWitRun()->witSetSubsBomEntrySelForDel
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSubEntrySubCost()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitSubEntry::defSubCost());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetSubsBomEntrySubCost
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(), dptr);
  return 0; 
}

WitParseRC WitSymTable::witSetSubEntrySubVol()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitSubEntry::defSubVol());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetSubsBomEntrySubVol
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetBopEntryByProduct()
{
  myWitRun()->witSetBopEntryByProduct
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0; 
}

WitParseRC WitSymTable::witSetBopEntryEarliestPeriod()
{
  myWitRun()->witSetBopEntryEarliestPeriod
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetBopEntryExpAllowed()
{
  myWitRun()->witSetBopEntryExpAllowed
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetBopEntryExpAversion()
{
  myWitRun()->witSetBopEntryExpAversion
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetBopEntryLatestPeriod()
{
  myWitRun()->witSetBopEntryLatestPeriod
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetBopEntryMeSelSplit()
{
  myWitRun()->witSetBopEntryMeSelSplit
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetBopEntryOffset()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
       (WitBillEntry::defOffset());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetBopEntryOffset
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(), dptr);
  return 0;
}

WitParseRC WitSymTable::witSetBopEntryProdRate()
{
  myWitRun()->witSetBopEntryProdRate
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetBopEntryProductRate()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitBopEntry::defProductRate());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetBopEntryProductRate
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     dptr);

  return 0;
}

WitParseRC WitSymTable::witSetBopEntryRoutingShare()
{
  double * dptr;

  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitBillEntry::defRoutingShare());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetBopEntryRoutingShare
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     dptr);

  return 0;
}

WitParseRC WitSymTable::witSetBopEntrySelForDel()
{
  myWitRun()->witSetBopEntrySelForDel
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}


// Implementation of class SymTableIterator

// Constructor and destructor
WitSymTableIterator::WitSymTableIterator(WitSymTable *s):
  pst_(s), index_(0)
{
}

WitSymTableIterator::~WitSymTableIterator()
{
}

WitSymTabEntry::witSymbolDef *WitSymTableIterator::operator ()()
{
  if (index_ < sizeof WitSymTable::symbolTable_
    /sizeof(WitSymTabEntry::witSymbolDef))
      return(&WitSymTable::symbolTable_[index_++]);
  return (&WitSymTable::symbolTable_[index_ = 0]);
}

// #endif
@


1.174
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 6
a6 1
//------------------------------------------------------------------------------
d8 1
a8 4
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential
d10 4
a13 1
//------------------------------------------------------------------------------
@


1.173
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d47 1
a47 1
nparms_ (0), func_ (NULL), parmTypes_ (NULL)
d52 1
a52 1
nparms_ (n), func_ (fp), parmTypes_ (pt)
d82 3
a84 3
{
myWitRun_ = theRun;
}
d88 9
a96 9
// remove all entries and delete each value
if( theDictionary_.size() )
{
WitSymTableDict::iterator it = theDictionary_.begin();
do
{
delete it->second;
} while( ++it != theDictionary_.end() );
}
d102 2
a103 10
int    i;
WitSymTabEntry      *entryPtr;

// printf("We will now register the rules\n");
// iterate through the symbol-table structure and register each
// rule in the hash dictionary.
for (i = 0; symbolTable_[i].rule != NULL; i++)
{
entryPtr = new WitSymTabEntry(symbolTable_[i].nparms,
symbolTable_[i].func, &symbolTable_[i].parmTypes[0]);
d105 11
a115 3
typedef std::pair<std::string,WitSymTabEntry*> SymTableDictPair;
theDictionary_.insert( SymTableDictPair( symbolTable_[i].rule, entryPtr ) );
}
d117 1
a117 1
return 0;
d123 1
a123 1
return theDictionary_;
d131 1
a131 13
WitSymTabEntry::witSymbolDef  WitSymTable::symbolTable_[] = {

{"add_bomEntry", 2, WitSymTable::witAddBomEntry,
{WitDRParmType::string, WitDRParmType::string}},

{"add_bopEntry", 2, WitSymTable::witAddBopEntry,
{WitDRParmType::string, WitDRParmType::string}},

{"add_demand", 2, WitSymTable::witAddDemand,
{WitDRParmType::string, WitDRParmType::string}},

{"add_part", 2, WitSymTable::witAddPart,
{WitDRParmType::string, WitDRParmType::partCat}},
d133 2
a134 2
{"add_partWithOperation", 1, WitSymTable::witAddPartWithOperation,
{WitDRParmType::string}},
d136 2
a137 2
{"add_operation", 1, WitSymTable::witAddOperation,
{WitDRParmType::string}},
d139 2
a140 2
{"add_subEntry", 3, WitSymTable::witAddSubEntry,
{WitDRParmType::string, WitDRParmType::intScalar, WitDRParmType::string}},
d142 2
a143 2
{"read", 1, NULL,
{WitDRParmType::string}},
d145 2
a146 2
{"set_problem_accAfterOptImp", 1, WitSymTable::witSetAccAfterOptImp,
{WitDRParmType::boolScalar}},
d148 2
a149 2
{"set_problem_accAfterSoftLB", 1, WitSymTable::witSetAccAfterSoftLB,
{WitDRParmType::boolScalar}},
d151 2
a152 2
{"set_problem_autoPriority", 1, WitSymTable::witSetAutoPriority,
{WitDRParmType::boolScalar}},
d154 2
a155 2
{"set_problem_compPrices", 1, WitSymTable::witSetCompPrices,
{WitDRParmType::boolScalar}},
d157 2
a158 3
{"set_problem_computeCriticalList", 1,
WitSymTable::witSetComputeCriticalList,
{WitDRParmType::boolScalar}},
d160 2
a161 2
{"set_problem_cplexParSpecDblVal", 1, WitSymTable::witSetCplexParSpecDblVal,
{WitDRParmType::doubleScalar}},
d163 2
a164 2
{"set_problem_cplexParSpecIntVal", 1, WitSymTable::witSetCplexParSpecIntVal,
{WitDRParmType::intScalar}},
d166 2
a167 2
{"set_problem_cplexParSpecName", 1, WitSymTable::witSetCplexParSpecName,
{WitDRParmType::string}},
d169 3
a171 2
{"set_problem_currentObjective", 1, WitSymTable::witSetCurrentObjective,
{WitDRParmType::string}},
d173 2
a174 2
{"set_problem_currentScenario", 1, WitSymTable::witSetCurrentScenario,
{WitDRParmType::intScalar}},
d176 2
a177 2
{"set_problem_equitability", 1, WitSymTable::witSetEquitability,
{WitDRParmType::intScalar}},
d179 8
a186 2
{"set_problem_execEmptyBom", 1, WitSymTable::witSetExecEmptyBom,
{WitDRParmType::boolScalar}},
d188 2
a189 2
{"set_problem_expCutoff", 1, WitSymTable::witSetExpCutoff,
{WitDRParmType::doubleScalar}},
d191 2
a192 2
{"set_problem_forcedMultiEq", 1, WitSymTable::witSetForcedMultiEq,
{WitDRParmType::boolScalar}},
d194 2
a195 2
{"set_problem_hashTableSize", 1, WitSymTable::witSetHashTableSize,
{WitDRParmType::intScalar}},
d197 2
a198 2
{"set_problem_highPrecisionWD", 1, WitSymTable::witSetHighPrecisionWD,
{WitDRParmType::boolScalar}},
d200 2
a201 2
{"set_problem_independentOffsets", 1, WitSymTable::witSetIndependentOffsets,
{WitDRParmType::boolScalar}},
d203 2
a204 2
{"set_problem_localBuildAhead", 1, WitSymTable::witSetLocalBuildAhead,
{WitDRParmType::boolScalar}},
d206 2
a207 2
{"set_problem_localMultiExec", 1, WitSymTable::witSetLocalMultiExec,
{WitDRParmType::boolScalar}},
d209 2
a210 2
{"set_problem_lotSizeTol", 1, WitSymTable::witSetLotSizeTol,
{WitDRParmType::doubleScalar}},
d212 2
a213 2
{"set_problem_minimalExcess", 1, WitSymTable::witSetMinimalExcess,
{WitDRParmType::boolScalar}},
d215 2
a216 2
{"set_problem_mipMode", 1, WitSymTable::witSetMipMode,
{WitDRParmType::boolScalar}},
d218 2
a219 2
{"set_problem_modHeurAlloc", 1, WitSymTable::witSetModHeurAlloc,
{WitDRParmType::boolScalar}},
d221 2
a222 2
{"set_problem_multiExec", 1, WitSymTable::witSetMultiExec,
{WitDRParmType::boolScalar}},
d224 2
a225 2
{"set_problem_multiObjMode", 1, WitSymTable::witSetMultiObjMode,
{WitDRParmType::boolScalar}},
d227 2
a228 2
{"set_problem_multiObjTol", 1, WitSymTable::witSetMultiObjTol,
{WitDRParmType::doubleScalar}},
d230 2
a231 2
{"set_problem_multiRoute", 1, WitSymTable::witSetMultiRoute,
{WitDRParmType::boolScalar}},
d233 2
a234 2
{"set_problem_nPeriods", 1, WitSymTable::witSetNPeriods,
{WitDRParmType::intScalar}},
d236 2
a237 2
{"set_problem_nScenarios", 1, WitSymTable::witSetNScenarios,
{WitDRParmType::intScalar}},
d239 2
a240 2
{"set_problem_newPipPggOrder", 1, WitSymTable::witSetNewPipPggOrder,
{WitDRParmType::boolScalar}},
d242 2
a243 2
{"set_problem_nonMrSelSplit", 1, WitSymTable::witSetNonMrSelSplit,
{WitDRParmType::boolScalar}},
d245 2
a246 2
{"set_problem_nstnResidual", 1, WitSymTable::witSetNstnResidual,
{WitDRParmType::boolScalar}},
d248 2
a249 2
{"set_problem_objChoice", 1, WitSymTable::witSetObjChoice,
{WitDRParmType::intScalar}},
d251 2
a252 2
{"set_problem_objectiveListSpec", 1, WitSymTable::witSetObjectiveListSpec,
{WitDRParmType::string}},
d254 2
a255 2
{"set_problem_objectiveRank", 1, WitSymTable::witSetObjectiveRank,
{WitDRParmType::intScalar}},
d257 5
a261 2
{"set_problem_outputPrecision", 1, WitSymTable::witSetOutputPrecision,
{WitDRParmType::intScalar}},
d263 2
a264 2
{"set_problem_penExec", 1, WitSymTable::witSetPenExec,
{WitDRParmType::boolScalar}},
d266 2
a267 2
{"set_problem_perfPegging", 1, WitSymTable::witSetPerfPegging,
{WitDRParmType::boolScalar}},
d269 2
a270 2
{"set_problem_periodStage", 1, WitSymTable::witSetPeriodStage,
{WitDRParmType::intVector}},
d272 2
a273 2
{"set_problem_periodsPerYear", 1, WitSymTable::witSetPeriodsPerYear,
{WitDRParmType::doubleScalar}},
d275 2
a276 3
{"set_problem_pgdCritListMode", 1,
WitSymTable::witSetPgdCritListMode,
{WitDRParmType::boolScalar}},
d278 3
a280 2
{"set_problem_pipSeqClearsNow", 1, WitSymTable::witSetPipSeqClearsNow,
{WitDRParmType::boolScalar}},
d282 2
a283 2
{"set_problem_pipSeqFromHeur", 1, WitSymTable::witSetPipSeqFromHeur,
{WitDRParmType::boolScalar}},
d285 2
a286 2
{"set_problem_prefHighStockSLBs", 1, WitSymTable::witSetPrefHighStockSLBs,
{WitDRParmType::boolScalar}},
d288 2
a289 2
{"set_problem_probability", 1, WitSymTable::witSetProbability,
{WitDRParmType::doubleScalar}},
d291 2
a292 2
{"set_problem_respectStockSLBs", 1, WitSymTable::witSetRespectStockSLBs,
{WitDRParmType::boolScalar}},
d294 2
a295 2
{"set_problem_roundReqVols", 1, WitSymTable::witSetRoundReqVols,
{WitDRParmType::boolScalar}},
d297 2
a298 2
{"set_problem_selSplit", 1, WitSymTable::witSetSelSplit,
{WitDRParmType::boolScalar}},
d300 2
a301 2
{"set_problem_selectionRecovery", 1, WitSymTable::witSetSelectionRecovery,
{WitDRParmType::boolScalar}},
d303 2
a304 2
{"set_problem_skipFailures", 1, WitSymTable::witSetSkipFailures,
{WitDRParmType::boolScalar}},
d306 2
a307 2
{"set_problem_solverLogFileName", 1, WitSymTable::witSetSolverLogFileName,
{WitDRParmType::string}},
d309 5
a313 2
{"set_problem_stageByObject", 1, WitSymTable::witSetStageByObject,
{WitDRParmType::boolScalar}},
d315 2
a316 2
{"set_problem_stochMode", 1, WitSymTable::witSetStochMode,
{WitDRParmType::boolScalar}},
d318 2
a319 2
{"set_problem_stockRealloc", 1, WitSymTable::witSetStockRealloc,
{WitDRParmType::boolScalar}},
d321 2
a322 2
{"set_problem_stockReallocation", 1, WitSymTable::witSetStockReallocation,
{WitDRParmType::boolScalar}},
d324 2
a325 2
{"set_problem_srSelSplit", 1, WitSymTable::witSetSrSelSplit,
{WitDRParmType::boolScalar}},
d327 2
a328 2
{"set_problem_tieBreakPropRt", 1, WitSymTable::witSetTieBreakPropRt,
{WitDRParmType::boolScalar}},
d330 5
a334 2
{"set_problem_title", 1, WitSymTable::witSetTitle,
{WitDRParmType::string}},
d336 2
a337 2
{"set_problem_truncOffsets", 1, WitSymTable::witSetTruncOffsets,
{WitDRParmType::boolScalar}},
d339 2
a340 2
{"set_problem_twoWayMultiExec", 1, WitSymTable::witSetTwoWayMultiExec,
{WitDRParmType::boolScalar}},
d342 2
a343 2
{"set_problem_useFocusHorizons", 1, WitSymTable::witSetUseFocusHorizons,
{WitDRParmType::boolScalar}},
d345 2
a346 2
{"set_problem_userHeurStart", 1, WitSymTable::witSetUserHeurStart,
{WitDRParmType::boolScalar}},
d348 4
a351 2
{"set_problem_wbounds", 1, WitSymTable::witSetWbounds,
{WitDRParmType::doubleScalar}},
d353 2
a354 2
{"set_problem_wit34Compatible", 1, WitSymTable::witSetWit34Compatible,
{WitDRParmType::boolScalar}},
d356 2
a357 1
{"set_part", 1, NULL, {WitDRParmType::string}},
d359 2
a360 2
{"set_part_asapPipOrder", 1, WitSymTable::witSetPartAsapPipOrder,
{WitDRParmType::boolScalar}},
d362 2
a363 2
{"set_part_baSelSplit", 1, WitSymTable::witSetPartBaSelSplit,
{WitDRParmType::boolScalar}},
d365 2
a366 2
{"set_part_boundedLeadTimes", 1, WitSymTable::witSetPartBoundedLeadTimes,
{WitDRParmType::boolScalar}},
d368 2
a369 2
{"set_part_buildAheadUB", 1, WitSymTable::witSetPartBuildAheadUB,
{WitDRParmType::intVector}},
d371 2
a372 2
{"set_part_buildAheadLimit", 1, WitSymTable::witSetPartBuildAheadLimit,
{WitDRParmType::intScalar}},
d374 2
a375 2
{"set_part_buildAsap", 1, WitSymTable::witSetPartBuildAsap,
{WitDRParmType::boolScalar}},
d377 2
a378 2
{"set_part_buildNstn", 1, WitSymTable::witSetPartBuildNstn,
{WitDRParmType::boolScalar}},
d380 2
a381 2
{"set_part_obj1ScrapCost", 1, WitSymTable::witSetPartObj1ScrapCost,
{WitDRParmType::doubleVector}},
d383 2
a384 2
{"set_part_obj1StockCost", 1, WitSymTable::witSetPartObj1StockCost,
{WitDRParmType::doubleVector}},
d386 2
a387 2
{"set_part_objectStage", 1, WitSymTable::witSetPartObjectStage,
{WitDRParmType::intScalar}},
d389 2
a390 2
{"set_part_propRouting", 1, WitSymTable::witSetPartPropRouting,
{WitDRParmType::boolScalar}},
d392 2
a393 2
{"set_part_propRtg", 1, WitSymTable::witSetPartPropRtg,
{WitDRParmType::boolVector}},
d395 2
a396 2
{"set_part_scrapAllowed", 1, WitSymTable::witSetPartScrapAllowed,
{WitDRParmType::boolScalar}},
d398 2
a399 2
{"set_part_scrapCost", 1, WitSymTable::witSetPartScrapCost,
{WitDRParmType::doubleVector}},
d401 2
a402 2
{"set_part_singleSource", 1, WitSymTable::witSetPartSingleSource,
{WitDRParmType::boolScalar}},
d404 2
a405 2
{"set_part_stockBounds", 1, WitSymTable::witSetPartStockBounds,
{WitDRParmType::boundSet}},
d407 2
a408 2
{"set_part_stockCost", 1, WitSymTable::witSetPartStockCost,
{WitDRParmType::doubleVector}},
d410 2
a411 2
{"set_part_supplyVol", 1, WitSymTable::witSetPartSupplyVol,
{WitDRParmType::doubleVector}},
d413 1
a413 2
{"set_part_selForDel", 1, WitSymTable::witSetPartSelForDel,
{WitDRParmType::boolScalar}},
d415 3
a417 2
{"set_part_unitCost", 1, WitSymTable::witSetPartUnitCost,
{WitDRParmType::doubleScalar}},
d419 3
a421 1
{"set_demand", 2, NULL, {WitDRParmType::string, WitDRParmType::string}},
d423 2
a424 3
{"set_demand_buildAheadLimit", 1,
WitSymTable::witSetDemandBuildAheadLimit,
{WitDRParmType::intScalar}},
d426 3
a428 3
{"set_demand_buildAheadUB", 1,
WitSymTable::witSetDemandBuildAheadUB,
{WitDRParmType::intVector}},
d430 2
a431 2
{"set_demand_cumShipBounds", 1, WitSymTable::witSetDemandCumShipBounds,
{WitDRParmType::boundSet}},
d433 2
a434 3
{"set_demand_cumShipReward", 1,
WitSymTable::witSetDemandCumShipReward,
{WitDRParmType::doubleVector}},
d436 2
a437 2
{"set_demand_demandVol", 1, WitSymTable::witSetDemandDemandVol,
{WitDRParmType::doubleVector}},
d439 2
a440 2
{"set_demand_focusHorizon", 1, WitSymTable::witSetDemandFocusHorizon,
{WitDRParmType::intScalar}},
d442 2
a443 2
{"set_demand_grossRev", 1, WitSymTable::witSetDemandGrossRev,
{WitDRParmType::doubleScalar}},
d445 3
a447 2
{"set_demand_intShipVols", 1, WitSymTable::witSetDemandIntShipVols,
{WitDRParmType::boolScalar}},
d449 2
a450 2
{"set_demand_leadTimeUB", 1, WitSymTable::witSetDemandLeadTimeUB,
{WitDRParmType::intVector}},
d452 3
a454 3
{"set_demand_obj1CumShipReward", 1,
WitSymTable::witSetDemandObj1CumShipReward,
{WitDRParmType::doubleVector}},
d456 3
a458 2
{"set_demand_obj1ShipReward", 1, WitSymTable::witSetDemandObj1ShipReward,
{WitDRParmType::doubleVector}},
d460 2
a461 3
{"set_demand_pipSeqIncShipVol", 1,
WitSymTable::witSetDemandPipSeqIncShipVol,
{WitDRParmType::doubleScalar}},
d463 2
a464 3
{"set_demand_pipSeqShipPeriod", 1,
WitSymTable::witSetDemandPipSeqShipPeriod,
{WitDRParmType::intScalar}},
d466 2
a467 2
{"set_demand_prefBuildAhead", 1, WitSymTable::witSetDemandPrefBuildAhead,
{WitDRParmType::boolScalar}},
d469 2
a470 2
{"set_demand_priority", 1, WitSymTable::witSetDemandPriority,
{WitDRParmType::intVector}},
d472 2
a473 2
{"set_demand_searchInc", 1, WitSymTable::witSetDemandSearchInc,
{WitDRParmType::doubleScalar}},
d475 2
a476 2
{"set_demand_selForDel", 1, WitSymTable::witSetDemandSelForDel,
{WitDRParmType::boolScalar}},
d478 2
a479 2
{"set_demand_shipLateAllowed", 1, WitSymTable::witSetDemandShipLateAllowed,
{WitDRParmType::boolScalar}},
d481 2
a482 2
{"set_demand_shipLateLimit", 1, WitSymTable::witSetDemandShipLateLimit,
{WitDRParmType::intScalar}},
d484 2
a485 2
{"set_demand_shipLateUB", 1, WitSymTable::witSetDemandShipLateUB,
{WitDRParmType::intVector}},
d487 4
a490 2
{"set_demand_shipReward", 1, WitSymTable::witSetDemandShipReward,
{WitDRParmType::doubleVector}},
d492 2
a493 2
{"set_demand_shipVol", 1, WitSymTable::witSetDemandShipVol,
{WitDRParmType::doubleVector}},
d495 2
a496 1
{"set_operation", 1, NULL, {WitDRParmType::string}},
d498 2
a499 2
{"set_operation_execBounds", 1, WitSymTable::witSetOperationExecBounds,
{WitDRParmType::boundSet}},
d501 2
a502 2
{"set_operation_execCost", 1, WitSymTable::witSetOperationExecCost,
{WitDRParmType::doubleVector}},
d504 3
a506 2
{"set_operation_execPenalty", 1, WitSymTable::witSetOperationExecPenalty,
{WitDRParmType::doubleScalar}},
d508 3
a510 2
{"set_operation_incLotSize", 1, WitSymTable::witSetOperationIncLotSize,
{WitDRParmType::doubleVector}},
d512 2
a513 2
{"set_operation_incLotSize2", 1, WitSymTable::witSetOperationIncLotSize2,
{WitDRParmType::doubleVector}},
d515 2
a516 3
{"set_operation_intExecVols", 1,
WitSymTable::witSetOperationIntExecVols,
{WitDRParmType::boolScalar}},
d518 2
a519 3
{"set_operation_lotSize2Thresh", 1,
WitSymTable::witSetOperationLotSize2Thresh,
{WitDRParmType::doubleVector}},
d521 2
a522 2
{"set_operation_minLotSize", 1, WitSymTable::witSetOperationMinLotSize,
{WitDRParmType::doubleVector}},
d524 2
a525 2
{"set_operation_minLotSize2", 1, WitSymTable::witSetOperationMinLotSize2,
{WitDRParmType::doubleVector}},
d527 3
a529 2
{"set_operation_obj1ExecCost", 1, WitSymTable::witSetOperationObj1ExecCost,
{WitDRParmType::doubleVector}},
d531 2
a532 2
{"set_operation_objectStage", 1, WitSymTable::witSetOperationObjectStage,
{WitDRParmType::intScalar}},
d534 2
a535 2
{"set_operation_selForDel", 1, WitSymTable::witSetOperationSelForDel,
{WitDRParmType::boolScalar}},
d537 2
a538 3
{"set_operation_twoLevelLotSizes", 1,
WitSymTable::witSetOperationTwoLevelLotSizes,
{WitDRParmType::boolScalar}},
d540 2
a541 2
{"set_operation_yield", 1, WitSymTable::witSetOperationYield,
{WitDRParmType::intVector}},
d543 2
a544 2
{"set_operation_yieldRate", 1, WitSymTable::witSetOperationYieldRate,
{WitDRParmType::doubleVector}},
d546 2
a547 2
{"set_operation_cycleTime34", 1,
WitSymTable::witSetOperationCycleTime34, {WitDRParmType::doubleVector}},
d549 3
a551 2
{"set_operation_execVol", 1,
WitSymTable::witSetOperationExecVol, {WitDRParmType::doubleVector}},
d553 2
a554 2
{"set_bomEntry", 2, NULL,
{WitDRParmType::string, WitDRParmType::intScalar}},
d556 2
a557 2
{"set_bomEntry_consRate", 1, WitSymTable::witSetBomEntryConsRate,
{WitDRParmType::doubleVector}},
d559 2
a560 3
{"set_bomEntry_earliestPeriod", 1,
WitSymTable::witSetBomEntryEarliestPeriod,
{WitDRParmType::intScalar}},
d562 3
a564 2
{"set_bomEntry_execPenalty", 1, WitSymTable::witSetBomEntryExecPenalty,
{WitDRParmType::doubleScalar}},
d566 2
a567 2
{"set_bomEntry_fallout", 1, WitSymTable::witSetBomEntryFallout,
{WitDRParmType::intScalar}},
d569 2
a570 2
{"set_bomEntry_falloutRate", 1, WitSymTable::witSetBomEntryFalloutRate,
{WitDRParmType::doubleScalar}},
d572 2
a573 3
{"set_bomEntry_latestPeriod", 1,
WitSymTable::witSetBomEntryLatestPeriod,
{WitDRParmType::intScalar}},
d575 2
a576 2
{"set_bomEntry_mandEC", 1, WitSymTable::witSetBomEntryMandEC,
{WitDRParmType::boolScalar}},
d578 2
a579 2
{"set_bomEntry_offset", 1, WitSymTable::witSetBomEntryOffset,
{WitDRParmType::doubleVector}},
d581 2
a582 2
{"set_bomEntry_propRouting", 1, WitSymTable::witSetBomEntryPropRouting,
{WitDRParmType::boolScalar}},
d584 2
a585 2
{"set_bomEntry_propRtg", 1, WitSymTable::witSetBomEntryPropRtg,
{WitDRParmType::boolVector}},
d587 2
a588 2
{"set_bomEntry_routingShare", 1, WitSymTable::witSetBomEntryRoutingShare,
{WitDRParmType::doubleVector}},
d590 4
a593 2
{"set_bomEntry_selForDel", 1, WitSymTable::witSetBomEntrySelForDel,
{WitDRParmType::boolScalar}},
d595 2
a596 2
{"set_bomEntry_singleSource", 1, WitSymTable::witSetBomEntrySingleSource,
{WitDRParmType::boolScalar}},
d598 3
a600 2
{"set_bomEntry_usageRate", 1, WitSymTable::witSetBomEntryUsageRate,
{WitDRParmType::doubleScalar}},
d602 2
a603 4
{"set_subEntry", 3, NULL,
{WitDRParmType::string,
WitDRParmType::intScalar,
WitDRParmType::intScalar}},
d605 2
a606 2
{"set_subEntry_consRate", 1, WitSymTable::witSetSubEntryConsRate,
{WitDRParmType::doubleVector}},
d608 2
a609 3
{"set_subEntry_earliestPeriod", 1,
WitSymTable::witSetSubEntryEarliestPeriod,
{WitDRParmType::intScalar}},
d611 2
a612 2
{"set_subEntry_execPenalty", 1, WitSymTable::witSetSubEntryExecPenalty,
{WitDRParmType::doubleScalar}},
d614 2
a615 2
{"set_subEntry_expAllowed", 1,
WitSymTable::witSetSubEntryExpAllowed, {WitDRParmType::boolScalar}},
d617 2
a618 2
{"set_subEntry_expNetAversion", 1,
WitSymTable::witSetSubEntryExpNetAversion, {WitDRParmType::doubleScalar}},
d620 3
a622 2
{"set_subEntry_fallout", 1, WitSymTable::witSetSubEntryFallout,
{WitDRParmType::intScalar}},
d624 2
a625 2
{"set_subEntry_falloutRate", 1, WitSymTable::witSetSubEntryFalloutRate,
{WitDRParmType::doubleScalar}},
d627 2
a628 2
{"set_subEntry_intSubVols", 1,
WitSymTable::witSetSubEntryIntSubVols, {WitDRParmType::boolScalar}},
d630 2
a631 3
{"set_subEntry_latestPeriod", 1,
WitSymTable::witSetSubEntryLatestPeriod,
{WitDRParmType::intScalar}},
d633 3
a635 2
{"set_subEntry_mrpNetAllowed", 1,
WitSymTable::witSetSubEntryMrpNetAllowed, {WitDRParmType::boolScalar}},
d637 3
a639 2
{"set_subEntry_netAllowed", 1,
WitSymTable::witSetSubEntryNetAllowed, {WitDRParmType::boolScalar}},
d641 2
a642 2
{"set_subEntry_usageRate", 1, WitSymTable::witSetSubEntryUsageRate,
{WitDRParmType::doubleScalar}},
d644 2
a645 3
{"set_subEntry_obj1SubCost", 1,
WitSymTable::witSetSubEntryObj1SubCost,
{WitDRParmType::doubleVector}},
d647 2
a648 3
{"set_subEntry_offset", 1,
WitSymTable::witSetSubEntryOffset,
{WitDRParmType::doubleVector}},
d650 2
a651 2
{"set_subEntry_routingShare", 1, WitSymTable::witSetSubEntryRoutingShare,
{WitDRParmType::doubleVector}},
d653 2
a654 2
{"set_subEntry_selForDel", 1,
WitSymTable::witSetSubEntrySelForDel, {WitDRParmType::boolScalar}},
d656 2
a657 2
{"set_subEntry_subCost", 1,
WitSymTable::witSetSubEntrySubCost, {WitDRParmType::doubleVector}},
d659 3
a661 2
{"set_subEntry_subVol", 1, WitSymTable::witSetSubEntrySubVol,
{WitDRParmType::doubleVector}},
d663 2
a664 2
{"set_bopEntry", 2, NULL,
{WitDRParmType::string, WitDRParmType::intScalar}},
d666 2
a667 2
{"set_bopEntry_byProduct", 1, WitSymTable::witSetBopEntryByProduct,
{WitDRParmType::boolScalar}},
d669 3
a671 3
{"set_bopEntry_earliestPeriod", 1,
WitSymTable::witSetBopEntryEarliestPeriod,
{WitDRParmType::intScalar}},
d673 2
a674 2
{"set_bopEntry_expAllowed", 1, WitSymTable::witSetBopEntryExpAllowed,
{WitDRParmType::boolScalar}},
d676 2
a677 2
{"set_bopEntry_expAversion", 1,
WitSymTable::witSetBopEntryExpAversion, {WitDRParmType::doubleScalar}},
d679 2
a680 3
{"set_bopEntry_latestPeriod", 1,
WitSymTable::witSetBopEntryLatestPeriod,
{WitDRParmType::intScalar}},
d682 2
a683 2
{"set_bopEntry_meSelSplit", 1, WitSymTable::witSetBopEntryMeSelSplit,
{WitDRParmType::boolScalar}},
d685 2
a686 2
{"set_bopEntry_offset", 1, WitSymTable::witSetBopEntryOffset,
{WitDRParmType::doubleVector}},
d688 2
a689 2
{"set_bopEntry_prodRate", 1,
WitSymTable::witSetBopEntryProdRate, {WitDRParmType::doubleScalar}},
d691 2
a692 2
{"set_bopEntry_productRate", 1,
WitSymTable::witSetBopEntryProductRate, {WitDRParmType::doubleVector}},
d694 2
a695 2
{"set_bopEntry_routingShare", 1,
WitSymTable::witSetBopEntryRoutingShare, {WitDRParmType::doubleVector}},
d697 2
a698 2
{"set_bopEntry_selForDel", 1, WitSymTable::witSetBopEntrySelForDel,
{WitDRParmType::boolScalar}},
d700 2
a701 2
{"set_partWithOperation_asapPipOrder", 1,
WitSymTable::witSetPartAsapPipOrder, {WitDRParmType::boolScalar}},
d703 2
a704 2
{"set_partWithOperation_baSelSplit", 1,
WitSymTable::witSetPartBaSelSplit, {WitDRParmType::boolScalar}},
d706 2
a707 2
{"set_partWithOperation_boundedLeadTimes", 1,
WitSymTable::witSetPartBoundedLeadTimes, {WitDRParmType::boolScalar}},
d709 2
a710 2
{"set_partWithOperation_buildAheadUB", 1,
WitSymTable::witSetPartBuildAheadUB, {WitDRParmType::intVector}},
d712 2
a713 2
{"set_partWithOperation_buildAheadLimit", 1,
WitSymTable::witSetPartBuildAheadLimit, {WitDRParmType::intScalar}},
d715 2
a716 2
{"set_partWithOperation_buildAsap", 1,
WitSymTable::witSetPartBuildAsap, {WitDRParmType::boolScalar}},
d718 2
a719 2
{"set_partWithOperation_buildNstn", 1,
WitSymTable::witSetPartBuildNstn, {WitDRParmType::boolScalar}},
d721 2
a722 2
{"set_partWithOperation_obj1ScrapCost", 1,
WitSymTable::witSetPartObj1ScrapCost, {WitDRParmType::doubleVector}},
d724 2
a725 2
{"set_partWithOperation_obj1StockCost", 1,
WitSymTable::witSetPartObj1StockCost, {WitDRParmType::doubleVector}},
d727 2
a728 2
{"set_partWithOperation_objectStage", 1,
WitSymTable::witSetPartObjectStage, {WitDRParmType::intScalar}},
d730 2
a731 2
{"set_partWithOperation_propRouting", 1,
WitSymTable::witSetPartPropRouting, {WitDRParmType::boolScalar}},
d733 2
a734 2
{"set_partWithOperation_propRtg", 1,
WitSymTable::witSetPartPropRtg, {WitDRParmType::boolVector}},
d736 2
a737 2
{"set_partWithOperation_scrapAllowed", 1,
WitSymTable::witSetPartScrapAllowed, {WitDRParmType::boolScalar}},
d739 2
a740 2
{"set_partWithOperation_scrapCost", 1,
WitSymTable::witSetPartScrapCost, {WitDRParmType::doubleVector}},
d742 2
a743 2
{"set_partWithOperation_selForDel", 1,
WitSymTable::witSetPartSelForDel, {WitDRParmType::boolScalar}},
d745 2
a746 2
{"set_partWithOperation_singleSource", 1,
WitSymTable::witSetPartSingleSource, {WitDRParmType::boolScalar}},
d748 2
a749 2
{"set_partWithOperation_stockBounds", 1,
WitSymTable::witSetPartStockBounds, {WitDRParmType::boundSet}},
d751 2
a752 11
{"set_partWithOperation_supplyVol", 1,
WitSymTable::witSetPartSupplyVol, {WitDRParmType::doubleVector}},

{"set_partWithOperation_stockCost", 1,
WitSymTable::witSetPartStockCost, {WitDRParmType::doubleVector}},

{"set_partWithOperation_unitCost", 1,
WitSymTable::witSetPartUnitCost, {WitDRParmType::doubleScalar}},

{NULL,0,0,{WitDRParmType::undefined}}
};
d759 4
a762 4
myWitRun()->witAddBomEntry
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getPartName());
return 0;
d767 4
a770 4
myWitRun()->witAddBopEntry
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getPartName());
return 0;
d775 4
a778 4
myWitRun()->witAddDemand
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName());
return 0;
d783 12
a794 12
switch (WitParser::instance ()->currentEntity()->getCatArg(1)) {
case WitDRPartCat::capacity:
myWitRun()->witAddPart
(WitParser::instance ()->currentEntity()->getPartName(), WitCAPACITY);
break;
case WitDRPartCat::material:
myWitRun()->witAddPart
(WitParser::instance ()->currentEntity()->getPartName(), WitMATERIAL);
break;
};
return 0;
}
d798 3
a800 3
myWitRun()->witAddPartWithOperation
(WitParser::instance ()->currentEntity()->getPartName());
return 0;
d805 3
a807 3
myWitRun()->witAddOperation
(WitParser::instance ()->currentEntity()->getOperationName());
return 0;
d812 5
a816 5
myWitRun()->witAddSubsBomEntry
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getPartName());
return 0;
d821 3
a823 3
myWitRun()->witSetAccAfterOptImp
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d828 3
a830 3
myWitRun()->witSetAccAfterSoftLB
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d835 3
a837 3
myWitRun()->witSetAutoPriority
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d842 3
a844 3
myWitRun()->witSetCompPrices
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d849 3
a851 3
myWitRun()->witSetComputeCriticalList
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d856 3
a858 3
myWitRun()->witSetCplexParSpecDblVal
(WitParser::instance ()->currentAttr()->getDoubleArg(0));
return 0;
d863 3
a865 3
myWitRun()->witSetCplexParSpecIntVal
(WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d870 3
a872 3
myWitRun()->witSetCplexParSpecName
(WitParser::instance ()->currentAttr()->getStringArg(0));
return 0;
d877 3
a879 3
myWitRun()->witSetCurrentObjective
(WitParser::instance ()->currentAttr()->getStringArg(0));
return 0;
d884 3
a886 3
myWitRun()->witSetCurrentScenario
(WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d891 3
a893 3
myWitRun()->witSetEquitability
(WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d898 3
a900 3
myWitRun()->witSetExecEmptyBom
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d905 3
a907 3
myWitRun()->witSetExpCutoff
(WitParser::instance ()->currentAttr()->getDoubleArg(0));
return 0;
d912 3
a914 3
myWitRun()->witSetForcedMultiEq
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d919 3
a921 3
myWitRun()->witSetHashTableSize
(WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d926 3
a928 3
myWitRun()->witSetHighPrecisionWD
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d933 3
a935 3
myWitRun()->witSetIndependentOffsets
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d940 3
a942 3
myWitRun()->witSetLocalBuildAhead
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d947 3
a949 3
myWitRun()->witSetLocalMultiExec
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d954 3
a956 3
myWitRun()->witSetLotSizeTol
(WitParser::instance ()->currentAttr()->getDoubleArg(0));
return 0;
d961 3
a963 3
myWitRun()->witSetMinimalExcess
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d968 3
a970 3
myWitRun()->witSetMipMode
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d975 3
a977 3
myWitRun()->witSetModHeurAlloc
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d982 3
a984 3
myWitRun()->witSetMultiExec
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d989 3
a991 3
myWitRun()->witSetMultiObjMode
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d996 3
a998 3
myWitRun()->witSetMultiObjTol
(WitParser::instance ()->currentAttr()->getDoubleArg(0));
return 0;
d1003 3
a1005 3
myWitRun()->witSetMultiRoute
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1010 3
a1012 3
myWitRun()->witSetNPeriods
(WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d1017 3
a1019 3
myWitRun()->witSetNScenarios
(WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d1024 3
a1026 3
myWitRun()->witSetNewPipPggOrder
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1031 3
a1033 3
myWitRun()->witSetNonMrSelSplit
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1038 3
a1040 3
myWitRun()->witSetNstnResidual
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1045 3
a1047 3
myWitRun()->witSetObjChoice
(WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d1052 3
a1054 3
myWitRun()->witSetObjectiveListSpec
(WitParser::instance ()->currentAttr()->getStringArg(0));
return 0;
d1059 3
a1061 3
myWitRun()->witSetObjectiveRank
(WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d1066 3
a1068 3
myWitRun()->witSetOutputPrecision
(WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d1073 3
a1075 3
myWitRun()->witSetPenExec
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1080 3
a1082 3
myWitRun()->witSetPerfPegging
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1087 3
a1089 3
int    *iptr;
iptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
(WitStochImpMgr::defPeriodStageIdx ());
d1091 1
a1091 1
if (iptr == NULL) return PERIOD_ERROR;
d1093 2
a1094 2
myWitRun()->witSetPeriodStage (iptr);
return 0;
d1098 2
a1099 2
{
myWitRun ()->myMsgFac () ("setObsAttFromFileWmsg", "periodsPerYear");
d1101 2
a1102 2
return 0;
}
d1106 3
a1108 3
myWitRun()->witSetPgdCritListMode
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1113 2
a1114 2
if (WitParser::instance ()->currentAttr ()->getBoolArg (0))
myWitRun()->witClearPipSeq ();
d1116 1
a1116 1
return 0;
d1121 3
a1123 3
myWitRun()->witSetPipSeqFromHeur
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1128 3
a1130 3
myWitRun()->witSetPrefHighStockSLBs
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1135 3
a1137 3
myWitRun()->witSetProbability
(WitParser::instance ()->currentAttr()->getDoubleArg(0));
return 0;
d1142 3
a1144 3
myWitRun()->witSetRespectStockSLBs
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1149 3
a1151 3
myWitRun()->witSetRoundReqVols
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1156 3
a1158 3
myWitRun()->witSetSelSplit
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1163 3
a1165 3
myWitRun()->witSetSelectionRecovery
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1170 3
a1172 3
myWitRun()->witSetSkipFailures
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1177 3
a1179 3
myWitRun()->witSetSolverLogFileName
(WitParser::instance ()->currentAttr()->getStringArg(0));
return 0;
d1184 3
a1186 3
myWitRun()->witSetStageByObject
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1191 3
a1193 3
myWitRun()->witSetStochMode
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1198 3
a1200 3
myWitRun()->witSetStockRealloc
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1205 3
a1207 3
myWitRun()->witSetStockReallocation
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1212 3
a1214 3
myWitRun()->witSetSrSelSplit
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1219 3
a1221 3
myWitRun()->witSetTieBreakPropRt
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1226 3
a1228 3
myWitRun()->witSetTitle
(WitParser::instance ()->currentAttr()->getStringArg(0));
return 0;
d1233 3
a1235 3
myWitRun()->witSetTruncOffsets
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1240 3
a1242 3
myWitRun()->witSetTwoWayMultiExec
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1247 3
a1249 3
myWitRun()->witSetUseFocusHorizons
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1254 3
a1256 3
myWitRun()->witSetUserHeurStart
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1261 3
a1263 3
myWitRun()->witSetWbounds
(WitParser::instance ()->currentAttr()->getDoubleArg(0));
return 0;
d1268 3
a1270 3
myWitRun()->witSetWit34Compatible
(WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1275 4
a1278 4
myWitRun()->witSetPartAsapPipOrder
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1283 4
a1286 4
myWitRun()->witSetPartBaSelSplit
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1291 4
a1294 4
myWitRun()->witSetPartBoundedLeadTimes
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1299 8
a1306 8
int  *iptr;
iptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
(WitMaterial::defBuildAheadUB(myWitRun()->myProblem ()));
if (iptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetPartBuildAheadUB
(WitParser::instance ()->currentEntity()->getPartName(), iptr);
return 0;
d1311 4
a1314 4
myWitRun()->witSetPartBuildAheadLimit
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d1319 4
a1322 4
myWitRun()->witSetPartBuildAsap
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1327 4
a1330 4
myWitRun()->witSetPartBuildNstn
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1335 8
a1342 8
double *dptr;
dptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitPart::defScrapCost());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetPartObj1ScrapCost
(WitParser::instance ()->currentEntity()->getPartName(), dptr);
return 0;
d1347 8
a1354 8
double * dptr;
dptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitMaterial::defStockCost());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetPartObj1StockCost
(WitParser::instance ()->currentEntity()->getPartName(), dptr);
return 0;
d1359 4
a1362 4
myWitRun()->witSetPartObjectStage
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d1367 4
a1370 4
myWitRun()->witSetPartPropRouting
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1375 1
a1375 1
WitBoolean * bptr;
d1377 7
a1383 7
bptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getBoolVec
(WitPart::defPropRtg());
if (bptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetPartPropRtg
(WitParser::instance ()->currentEntity()->getPartName(), bptr);
return 0;
d1388 4
a1391 4
myWitRun()->witSetPartScrapAllowed
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1396 8
a1403 8
double *dptr;
dptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitPart::defScrapCost());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetPartScrapCost
(WitParser::instance ()->currentEntity()->getPartName(), dptr);
return 0;
d1408 4
a1411 4
myWitRun()->witSetPartSingleSource
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1416 32
a1447 32
WitVectorSpec * vecPtr;
double *        arg2 = NULL;
double *        arg3 = NULL;
double *        arg4 = NULL;

vecPtr =
WitParser::instance ()->currentAttr()->getBoundSetArg(0)->hardLBVec();

if (vecPtr != NULL) {
arg2 = vecPtr->getDblVec (WitBoundSet::defHardLB());
if (arg2 == NULL) return PERIOD_ERROR;
};

vecPtr =
WitParser::instance ()->currentAttr()->getBoundSetArg(0)->softLBVec();

if (vecPtr != NULL) {
arg3 = vecPtr->getDblVec (WitBoundSet::defSoftLB());
if (arg3 == NULL) return PERIOD_ERROR;
};

vecPtr =
WitParser::instance ()->currentAttr()->getBoundSetArg(0)->hardUBVec();

if (vecPtr != NULL) {
arg4 = vecPtr->getDblVec (WitBoundSet::defHardUB());
if (arg4 == NULL) return PERIOD_ERROR;
};

myWitRun()->witSetPartStockBounds
(WitParser::instance ()->currentEntity()->getPartName(), arg2, arg3, arg4);
return 0;
d1452 8
a1459 8
double * dptr;
dptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitMaterial::defStockCost());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetPartStockCost
(WitParser::instance ()->currentEntity()->getPartName(), dptr);
return 0;
d1464 1
a1464 1
double * dptr;
d1466 7
a1472 7
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitPart::defSupplyVol());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetPartSupplyVol
(WitParser::instance ()->currentEntity()->getPartName(), dptr);
return 0;
d1477 4
a1480 4
myWitRun()->witSetPartSelForDel
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1484 2
a1485 2
{
myWitRun ()->myMsgFac () ("setObsAttFromFileWmsg", "unitCost");
d1487 2
a1488 2
return 0;
}
d1492 5
a1496 5
myWitRun()->witSetDemandBuildAheadLimit
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(),
WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d1501 1
a1501 1
int  *iptr;
d1503 8
a1510 8
iptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
(WitDemand::defBuildAheadUB());
if (iptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetDemandBuildAheadUB
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(),
iptr);
d1512 1
a1512 1
return 0;
d1517 33
a1549 33
WitVectorSpec * vecPtr;
double *        arg3 = NULL;
double *        arg4 = NULL;
double *        arg5 = NULL;

vecPtr =
WitParser::instance ()->currentAttr()->getBoundSetArg(0)->hardLBVec();
if (vecPtr != NULL) {
arg3 = vecPtr->getDblVec (WitBoundSet::defHardLB());
if (arg3 == NULL) return PERIOD_ERROR;
};

vecPtr =
WitParser::instance ()->currentAttr()->getBoundSetArg(0)->softLBVec();
if (vecPtr != NULL) {
arg4 = vecPtr->getDblVec (WitBoundSet::defSoftLB());
if (arg4 == NULL) return PERIOD_ERROR;
};

vecPtr =
WitParser::instance ()->currentAttr()->getBoundSetArg(0)->hardUBVec();
if (vecPtr != NULL) {
arg5 = vecPtr->getDblVec (WitBoundSet::defHardUB());
if (arg5 == NULL) return PERIOD_ERROR;
};

myWitRun()->witSetDemandCumShipBounds
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(),
arg3,
arg4,
arg5);
return 0;
d1554 1
a1554 1
double * dptr;
d1556 8
a1563 8
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitDemand::defCumShipReward());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetDemandCumShipReward
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(), dptr);
return 0;
d1568 1
a1568 1
double * dptr;
d1570 8
a1577 8
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitDemand::defDemandVol());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetDemandDemandVol
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(), dptr);
return 0;
d1582 5
a1586 5
myWitRun()->witSetDemandFocusHorizon
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(),
WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d1590 2
a1591 2
{
myWitRun ()->myMsgFac () ("setObsAttFromFileWmsg", "grossRev");
d1593 2
a1594 2
return 0;
}
d1598 5
a1602 5
myWitRun()->witSetDemandIntShipVols
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1607 1
a1607 1
int  *iptr;
d1609 8
a1616 8
iptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
(WitDemand::defLeadTimeUB(myWitRun()->myProblem ()));
if (iptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetDemandLeadTimeUB
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(),
iptr);
d1618 1
a1618 1
return 0;
d1623 1
a1623 1
double * dptr;
d1625 8
a1632 8
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitDemand::defCumShipReward());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetDemandObj1CumShipReward
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(), dptr);
return 0;
d1637 1
a1637 1
double * dptr;
d1639 8
a1646 8
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitDemand::defShipReward());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetDemandObj1ShipReward
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(), dptr);
return 0;
d1651 5
a1655 5
myWitRun()->witAppendToPipSeq
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(),
myWitRun ()->myProblem ()->myPipMgr ()->shipSeqShipPer (),
WitParser::instance ()->currentAttr()->getDoubleArg(0));
d1657 1
a1657 1
myWitRun ()->myProblem ()->myPipMgr ()->setShipSeqShipPer (-1);
d1659 1
a1659 1
return 0;
d1664 2
a1665 2
myWitRun ()->myProblem ()->myPipMgr ()->setShipSeqShipPer (
WitParser::instance ()->currentAttr()->getIntArg(0));
d1667 1
a1667 1
return 0;
d1672 5
a1676 5
myWitRun()->witSetDemandPrefBuildAhead
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1680 2
a1681 2
{
int    *iptr;
d1683 8
a1690 8
iptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
(WitDemand::defPriority());
if (iptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetDemandPriority
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(), iptr);
return 0;
d1695 5
a1699 5
myWitRun()->witSetDemandSearchInc
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(),
WitParser::instance ()->currentAttr()->getDoubleArg(0));
return 0;
d1704 5
a1708 5
myWitRun()->witSetDemandSelForDel
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1713 5
a1717 5
myWitRun()->witSetDemandShipLateAllowed
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1722 5
a1726 5
myWitRun()->witSetDemandShipLateLimit
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(),
WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d1731 1
a1731 1
int  *iptr;
d1733 8
a1740 8
iptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
(WitDemand::defShipLateUB(myWitRun()->myProblem ()));
if (iptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetDemandShipLateUB
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(),
iptr);
d1742 1
a1742 1
return 0;
d1747 1
a1747 1
double * dptr;
d1749 8
a1756 8
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitDemand::defShipReward());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetDemandShipReward
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(), dptr);
return 0;
d1761 1
a1761 1
double * dptr;
d1763 8
a1770 8
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitDemand::defShipVol());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetDemandShipVol
(WitParser::instance ()->currentEntity()->getPartName(),
WitParser::instance ()->currentEntity()->getDemandName(), dptr);
return 0;
d1775 32
a1806 32
WitVectorSpec * vecPtr;
double *        arg2 = NULL;
double *        arg3 = NULL;
double *        arg4 = NULL;

vecPtr =
WitParser::instance ()->currentAttr()->getBoundSetArg(0)->hardLBVec();
if (vecPtr != NULL) {
arg2 = vecPtr->getDblVec (WitBoundSet::defHardLB());
if (arg2 == NULL) return PERIOD_ERROR;
};

vecPtr =
WitParser::instance ()->currentAttr()->getBoundSetArg(0)->softLBVec();
if (vecPtr != NULL) {
arg3 = vecPtr->getDblVec (WitBoundSet::defSoftLB());
if (arg3 == NULL) return PERIOD_ERROR;
};

vecPtr =
WitParser::instance ()->currentAttr()->getBoundSetArg(0)->hardUBVec();
if (vecPtr != NULL) {
arg4 = vecPtr->getDblVec (WitBoundSet::defHardUB());
if (arg4 == NULL) return PERIOD_ERROR;
};

myWitRun()->witSetOperationExecBounds (
WitParser::instance ()->currentEntity()->getOperationName(),
arg2,
arg3,
arg4);
return 0;
d1811 1
a1811 1
double * dptr;
d1813 7
a1819 7
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitOperation::defExecCost());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetOperationExecCost
(WitParser::instance ()->currentEntity()->getOperationName(), dptr);
return 0;
d1824 4
a1827 4
myWitRun()->witSetOperationExecPenalty
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentAttr()->getDoubleArg(0));
return 0;
d1832 1
a1832 1
double * dptr;
d1834 7
a1840 7
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitOperation::defIncLotSize());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetOperationIncLotSize
(WitParser::instance ()->currentEntity()->getOperationName(), dptr);
return 0;
d1845 1
a1845 1
double * dptr;
d1847 7
a1853 7
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitOperation::defIncLotSize2());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetOperationIncLotSize2
(WitParser::instance ()->currentEntity()->getOperationName(), dptr);
return 0;
d1858 4
a1861 4
myWitRun()->witSetOperationIntExecVols
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1866 1
a1866 1
double * dptr;
d1868 7
a1874 7
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitOperation::defLotSize2Thresh());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetOperationLotSize2Thresh
(WitParser::instance ()->currentEntity()->getOperationName(), dptr);
return 0;
d1879 1
a1879 1
double * dptr;
d1881 7
a1887 7
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitOperation::defMinLotSize());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetOperationMinLotSize
(WitParser::instance ()->currentEntity()->getOperationName(), dptr);
return 0;
d1892 1
a1892 1
double * dptr;
d1894 7
a1900 7
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitOperation::defMinLotSize2());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetOperationMinLotSize2
(WitParser::instance ()->currentEntity()->getOperationName(), dptr);
return 0;
d1905 1
a1905 1
double * dptr;
d1907 7
a1913 7
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitOperation::defExecCost());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetOperationObj1ExecCost
(WitParser::instance ()->currentEntity()->getOperationName(), dptr);
return 0;
d1918 4
a1921 4
myWitRun()->witSetOperationObjectStage
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d1926 4
a1929 4
myWitRun()->witSetOperationSelForDel
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1934 4
a1937 4
myWitRun()->witSetOperationTwoLevelLotSizes
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d1942 1
a1942 1
int    *iptr;
d1944 7
a1950 7
iptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
(WitOperation::defYield());
if (iptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetOperationYield
(WitParser::instance ()->currentEntity()->getOperationName(), iptr);
return 0;
d1955 1
a1955 1
double * dptr;
d1957 7
a1963 7
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitOperation::defYieldRate());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetOperationYieldRate
(WitParser::instance ()->currentEntity()->getOperationName(), dptr);
return 0;
d1968 1
a1968 1
double * dptr;
d1970 7
a1976 7
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitOperation::defCycleTime34());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetOperationCycleTime34
(WitParser::instance ()->currentEntity()->getOperationName(), dptr);
return 0;
d1981 1
a1981 1
double * dptr;
d1983 7
a1989 7
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitOperation::defExecVol());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetOperationExecVol
(WitParser::instance ()->currentEntity()->getOperationName(), dptr);
return 0;
d1994 1
a1994 1
double * dptr;
d1996 8
a2003 8
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitConsEntry::defConsRate());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetBomEntryConsRate
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(), dptr);
return 0;
d2008 5
a2012 5
myWitRun()->witSetBomEntryEarliestPeriod
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d2017 5
a2021 5
myWitRun()->witSetBomEntryExecPenalty
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentAttr()->getDoubleArg(0));
return 0;
d2026 5
a2030 5
myWitRun()->witSetBomEntryFallout
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d2035 5
a2039 5
myWitRun()->witSetBomEntryFalloutRate
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentAttr()->getDoubleArg(0));
return 0;
d2044 5
a2048 5
myWitRun()->witSetBomEntryLatestPeriod
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d2053 5
a2057 5
myWitRun()->witSetBomEntryMandEC
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d2062 1
a2062 1
double * dptr;
d2064 8
a2071 8
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitBillEntry::defOffset());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetBomEntryOffset
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(), dptr);
return 0;
d2076 5
a2080 5
myWitRun()->witSetBomEntryPropRouting
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d2085 1
a2085 1
WitBoolean * bptr;
d2087 9
a2095 9
bptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getBoolVec
(WitBomEntry::defPropRtg());
if (bptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetBomEntryPropRtg
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
bptr);
return 0;
d2100 1
a2100 1
double * dptr;
d2102 8
a2109 8
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitBillEntry::defRoutingShare());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetBomEntryRoutingShare
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(), dptr);
return 0;
d2114 5
a2118 5
myWitRun()->witSetBomEntrySelForDel
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d2123 5
a2127 5
myWitRun()->witSetBomEntrySingleSource
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d2132 5
a2136 5
myWitRun()->witSetBomEntryUsageRate
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentAttr()->getDoubleArg(0));
return 0;
d2141 1
a2141 1
double * dptr;
d2143 9
a2151 9
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitConsEntry::defConsRate());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetSubsBomEntryConsRate
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getSubEntryIndex(), dptr);
return 0;
d2156 6
a2161 6
myWitRun()->witSetSubsBomEntryEarliestPeriod
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getSubEntryIndex(),
WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d2166 6
a2171 6
myWitRun()->witSetSubsBomEntryExecPenalty
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getSubEntryIndex(),
WitParser::instance ()->currentAttr()->getDoubleArg(0));
return 0;
d2176 6
a2181 6
myWitRun()->witSetSubsBomEntryExpAllowed
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getSubEntryIndex(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d2186 6
a2191 6
myWitRun()->witSetSubsBomEntryExpNetAversion
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getSubEntryIndex(),
WitParser::instance ()->currentAttr()->getDoubleArg(0));
return 0;
d2196 6
a2201 6
myWitRun()->witSetSubsBomEntryFallout
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getSubEntryIndex(),
WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d2206 6
a2211 6
myWitRun()->witSetSubsBomEntryFalloutRate
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getSubEntryIndex(),
WitParser::instance ()->currentAttr()->getDoubleArg(0));
return 0;
d2216 6
a2221 6
myWitRun()->witSetSubsBomEntryIntSubVols
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getSubEntryIndex(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d2226 6
a2231 6
myWitRun()->witSetSubsBomEntryLatestPeriod
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getSubEntryIndex(),
WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d2236 6
a2241 6
myWitRun()->witSetSubsBomEntryMrpNetAllowed
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getSubEntryIndex(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d2246 6
a2251 6
myWitRun()->witSetSubsBomEntryNetAllowed
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getSubEntryIndex(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d2256 6
a2261 6
myWitRun()->witSetSubsBomEntryUsageRate
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getSubEntryIndex(),
WitParser::instance ()->currentAttr()->getDoubleArg(0));
return 0;
d2266 1
a2266 1
double * dptr;
d2268 9
a2276 9
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitSubEntry::defSubCost());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetSubsBomEntryObj1SubCost
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getSubEntryIndex(), dptr);
return 0;
d2281 1
a2281 1
double * dptr;
d2283 9
a2291 9
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitBillEntry::defOffset());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetSubsBomEntryOffset
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getSubEntryIndex(), dptr);
return 0;
d2296 1
a2296 1
double * dptr;
d2298 9
a2306 9
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitBillEntry::defRoutingShare());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetSubsBomEntryRoutingShare
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getSubEntryIndex(), dptr);
return 0;
d2311 6
a2316 6
myWitRun()->witSetSubsBomEntrySelForDel
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getSubEntryIndex(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d2321 1
a2321 1
double * dptr;
d2323 9
a2331 9
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitSubEntry::defSubCost());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetSubsBomEntrySubCost
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getSubEntryIndex(), dptr);
return 0;
d2336 1
a2336 1
double * dptr;
d2338 9
a2346 9
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitSubEntry::defSubVol());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetSubsBomEntrySubVol
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBomEntryIndex(),
WitParser::instance ()->currentEntity()->getSubEntryIndex(), dptr);
return 0;
d2351 5
a2355 5
myWitRun()->witSetBopEntryByProduct
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBopEntryIndex(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d2360 5
a2364 5
myWitRun()->witSetBopEntryEarliestPeriod
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBopEntryIndex(),
WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d2369 5
a2373 5
myWitRun()->witSetBopEntryExpAllowed
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBopEntryIndex(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d2378 5
a2382 5
myWitRun()->witSetBopEntryExpAversion
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBopEntryIndex(),
WitParser::instance ()->currentAttr()->getDoubleArg(0));
return 0;
d2387 5
a2391 5
myWitRun()->witSetBopEntryLatestPeriod
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBopEntryIndex(),
WitParser::instance ()->currentAttr()->getIntArg(0));
return 0;
d2396 5
a2400 5
myWitRun()->witSetBopEntryMeSelSplit
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBopEntryIndex(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d2405 1
a2405 1
double * dptr;
d2407 8
a2414 8
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitBillEntry::defOffset());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetBopEntryOffset
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBopEntryIndex(), dptr);
return 0;
d2419 5
a2423 5
myWitRun()->witSetBopEntryProdRate
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBopEntryIndex(),
WitParser::instance ()->currentAttr()->getDoubleArg(0));
return 0;
d2428 1
a2428 1
double * dptr;
d2430 8
a2437 8
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitBopEntry::defProductRate());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetBopEntryProductRate
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBopEntryIndex(),
dptr);
d2439 1
a2439 1
return 0;
d2444 1
a2444 1
double * dptr;
d2446 8
a2453 8
dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
(WitBillEntry::defRoutingShare());
if (dptr == NULL) return PERIOD_ERROR;

myWitRun()->witSetBopEntryRoutingShare
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBopEntryIndex(),
dptr);
d2455 1
a2455 1
return 0;
d2460 5
a2464 5
myWitRun()->witSetBopEntrySelForDel
(WitParser::instance ()->currentEntity()->getOperationName(),
WitParser::instance ()->currentEntity()->getBopEntryIndex(),
WitParser::instance ()->currentAttr()->getBoolArg(0));
return 0;
d2472 1
a2472 1
pst_(s), index_(0)
d2482 4
a2485 4
if (index_ < sizeof WitSymTable::symbolTable_
/sizeof(WitSymTabEntry::witSymbolDef))
return(&WitSymTable::symbolTable_[index_++]);
return (&WitSymTable::symbolTable_[index_ = 0]);
@


1.172
log
@Removed COIN from WIT.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d47 1
a47 1
  nparms_ (0), func_ (NULL), parmTypes_ (NULL)
d52 1
a52 1
  nparms_ (n), func_ (fp), parmTypes_ (pt)
d82 3
a84 3
   {
   myWitRun_ = theRun;
   }
d88 9
a96 9
  // remove all entries and delete each value
   if( theDictionary_.size() )
   {
      WitSymTableDict::iterator it = theDictionary_.begin();
      do
      {
         delete it->second;
      } while( ++it != theDictionary_.end() );
   }
d102 10
a111 2
  int    i;
  WitSymTabEntry      *entryPtr;
d113 3
a115 11
  // printf("We will now register the rules\n");
  // iterate through the symbol-table structure and register each
  // rule in the hash dictionary.
  for (i = 0; symbolTable_[i].rule != NULL; i++)
  {
    entryPtr = new WitSymTabEntry(symbolTable_[i].nparms,
         symbolTable_[i].func, &symbolTable_[i].parmTypes[0]);

    typedef std::pair<std::string,WitSymTabEntry*> SymTableDictPair;
    theDictionary_.insert( SymTableDictPair( symbolTable_[i].rule, entryPtr ) );
  }
d117 1
a117 1
  return 0;
d123 1
a123 1
  return theDictionary_;
d131 13
a143 1
  WitSymTabEntry::witSymbolDef  WitSymTable::symbolTable_[] = {
d145 2
a146 2
    {"add_bomEntry", 2, WitSymTable::witAddBomEntry,
      {WitDRParmType::string, WitDRParmType::string}},
d148 2
a149 2
    {"add_bopEntry", 2, WitSymTable::witAddBopEntry,
      {WitDRParmType::string, WitDRParmType::string}},
d151 2
a152 2
    {"add_demand", 2, WitSymTable::witAddDemand,
      {WitDRParmType::string, WitDRParmType::string}},
d154 2
a155 2
    {"add_part", 2, WitSymTable::witAddPart,
      {WitDRParmType::string, WitDRParmType::partCat}},
d157 2
a158 2
    {"add_partWithOperation", 1, WitSymTable::witAddPartWithOperation,
      {WitDRParmType::string}},
d160 2
a161 2
    {"add_operation", 1, WitSymTable::witAddOperation,
      {WitDRParmType::string}},
d163 2
a164 2
    {"add_subEntry", 3, WitSymTable::witAddSubEntry,
      {WitDRParmType::string, WitDRParmType::intScalar, WitDRParmType::string}},
d166 2
a167 2
    {"read", 1, NULL,
      {WitDRParmType::string}},
d169 3
a171 2
    {"set_problem_accAfterOptImp", 1, WitSymTable::witSetAccAfterOptImp,
      {WitDRParmType::boolScalar}},
d173 2
a174 2
    {"set_problem_accAfterSoftLB", 1, WitSymTable::witSetAccAfterSoftLB,
      {WitDRParmType::boolScalar}},
d176 2
a177 2
    {"set_problem_autoPriority", 1, WitSymTable::witSetAutoPriority,
      {WitDRParmType::boolScalar}},
d179 2
a180 2
    {"set_problem_compPrices", 1, WitSymTable::witSetCompPrices,
      {WitDRParmType::boolScalar}},
d182 2
a183 3
    {"set_problem_computeCriticalList", 1, 
      WitSymTable::witSetComputeCriticalList,
      {WitDRParmType::boolScalar}},
d185 2
a186 2
    {"set_problem_cplexParSpecDblVal", 1, WitSymTable::witSetCplexParSpecDblVal,
      {WitDRParmType::doubleScalar}},
d188 2
a189 2
    {"set_problem_cplexParSpecIntVal", 1, WitSymTable::witSetCplexParSpecIntVal,
      {WitDRParmType::intScalar}},
d191 2
a192 8
    {"set_problem_cplexParSpecName", 1, WitSymTable::witSetCplexParSpecName,
      {WitDRParmType::string}},
 
    {"set_problem_currentObjective", 1, WitSymTable::witSetCurrentObjective,
      {WitDRParmType::string}},
 
    {"set_problem_currentScenario", 1, WitSymTable::witSetCurrentScenario,
      {WitDRParmType::intScalar}},
d194 2
a195 2
    {"set_problem_equitability", 1, WitSymTable::witSetEquitability,
      {WitDRParmType::intScalar}},
d197 2
a198 2
    {"set_problem_execEmptyBom", 1, WitSymTable::witSetExecEmptyBom,
      {WitDRParmType::boolScalar}},
d200 2
a201 2
    {"set_problem_expCutoff", 1, WitSymTable::witSetExpCutoff,
      {WitDRParmType::doubleScalar}},
d203 2
a204 2
    {"set_problem_forcedMultiEq", 1, WitSymTable::witSetForcedMultiEq,
      {WitDRParmType::boolScalar}},
d206 2
a207 2
    {"set_problem_hashTableSize", 1, WitSymTable::witSetHashTableSize,
      {WitDRParmType::intScalar}},
d209 2
a210 2
    {"set_problem_highPrecisionWD", 1, WitSymTable::witSetHighPrecisionWD,
      {WitDRParmType::boolScalar}},
d212 2
a213 2
    {"set_problem_independentOffsets", 1, WitSymTable::witSetIndependentOffsets,
      {WitDRParmType::boolScalar}},
d215 2
a216 2
    {"set_problem_localBuildAhead", 1, WitSymTable::witSetLocalBuildAhead,
      {WitDRParmType::boolScalar}},
d218 2
a219 2
    {"set_problem_localMultiExec", 1, WitSymTable::witSetLocalMultiExec,
      {WitDRParmType::boolScalar}},
d221 2
a222 2
    {"set_problem_lotSizeTol", 1, WitSymTable::witSetLotSizeTol,
      {WitDRParmType::doubleScalar}},
d224 2
a225 2
    {"set_problem_minimalExcess", 1, WitSymTable::witSetMinimalExcess,
      {WitDRParmType::boolScalar}},
d227 2
a228 2
    {"set_problem_mipMode", 1, WitSymTable::witSetMipMode,
      {WitDRParmType::boolScalar}},
d230 2
a231 2
    {"set_problem_modHeurAlloc", 1, WitSymTable::witSetModHeurAlloc,
      {WitDRParmType::boolScalar}},
d233 2
a234 2
    {"set_problem_multiExec", 1, WitSymTable::witSetMultiExec,
      {WitDRParmType::boolScalar}},
d236 2
a237 2
    {"set_problem_multiObjMode", 1, WitSymTable::witSetMultiObjMode,
      {WitDRParmType::boolScalar}},
d239 2
a240 2
    {"set_problem_multiObjTol", 1, WitSymTable::witSetMultiObjTol,
      {WitDRParmType::doubleScalar}},
d242 2
a243 2
    {"set_problem_multiRoute", 1, WitSymTable::witSetMultiRoute,
      {WitDRParmType::boolScalar}},
d245 2
a246 2
    {"set_problem_nPeriods", 1, WitSymTable::witSetNPeriods,
      {WitDRParmType::intScalar}},
d248 2
a249 2
    {"set_problem_nScenarios", 1, WitSymTable::witSetNScenarios,
      {WitDRParmType::intScalar}},
d251 2
a252 2
    {"set_problem_newPipPggOrder", 1, WitSymTable::witSetNewPipPggOrder,
      {WitDRParmType::boolScalar}},
d254 2
a255 2
    {"set_problem_nonMrSelSplit", 1, WitSymTable::witSetNonMrSelSplit,
      {WitDRParmType::boolScalar}},
d257 2
a258 2
    {"set_problem_nstnResidual", 1, WitSymTable::witSetNstnResidual,
      {WitDRParmType::boolScalar}},
d260 2
a261 2
    {"set_problem_objChoice", 1, WitSymTable::witSetObjChoice,
      {WitDRParmType::intScalar}},
d263 2
a264 5
    {"set_problem_objectiveListSpec", 1, WitSymTable::witSetObjectiveListSpec,
      {WitDRParmType::string}},
 
    {"set_problem_objectiveRank", 1, WitSymTable::witSetObjectiveRank,
      {WitDRParmType::intScalar}},
d266 2
a267 2
    {"set_problem_outputPrecision", 1, WitSymTable::witSetOutputPrecision,
      {WitDRParmType::intScalar}},
d269 2
a270 2
    {"set_problem_penExec", 1, WitSymTable::witSetPenExec,
      {WitDRParmType::boolScalar}},
d272 2
a273 2
    {"set_problem_perfPegging", 1, WitSymTable::witSetPerfPegging,
      {WitDRParmType::boolScalar}},
d275 2
a276 2
    {"set_problem_periodStage", 1, WitSymTable::witSetPeriodStage,
      {WitDRParmType::intVector}},
d278 3
a280 2
    {"set_problem_periodsPerYear", 1, WitSymTable::witSetPeriodsPerYear,
      {WitDRParmType::doubleScalar}},
d282 2
a283 3
    {"set_problem_pgdCritListMode", 1, 
      WitSymTable::witSetPgdCritListMode,
      {WitDRParmType::boolScalar}},
d285 2
a286 2
    {"set_problem_pipSeqClearsNow", 1, WitSymTable::witSetPipSeqClearsNow,
      {WitDRParmType::boolScalar}},
d288 2
a289 2
    {"set_problem_pipSeqFromHeur", 1, WitSymTable::witSetPipSeqFromHeur,
      {WitDRParmType::boolScalar}},
d291 2
a292 2
    {"set_problem_prefHighStockSLBs", 1, WitSymTable::witSetPrefHighStockSLBs,
      {WitDRParmType::boolScalar}},
d294 2
a295 2
    {"set_problem_probability", 1, WitSymTable::witSetProbability,
      {WitDRParmType::doubleScalar}},
d297 2
a298 2
    {"set_problem_respectStockSLBs", 1, WitSymTable::witSetRespectStockSLBs,
      {WitDRParmType::boolScalar}},
d300 2
a301 2
    {"set_problem_roundReqVols", 1, WitSymTable::witSetRoundReqVols,
      {WitDRParmType::boolScalar}},
d303 2
a304 2
    {"set_problem_selSplit", 1, WitSymTable::witSetSelSplit,
      {WitDRParmType::boolScalar}},
d306 2
a307 2
    {"set_problem_selectionRecovery", 1, WitSymTable::witSetSelectionRecovery,
      {WitDRParmType::boolScalar}},
d309 2
a310 2
    {"set_problem_skipFailures", 1, WitSymTable::witSetSkipFailures,
      {WitDRParmType::boolScalar}},
d312 2
a313 5
    {"set_problem_solverLogFileName", 1, WitSymTable::witSetSolverLogFileName,
      {WitDRParmType::string}},
 
    {"set_problem_stageByObject", 1, WitSymTable::witSetStageByObject,
      {WitDRParmType::boolScalar}},
d315 2
a316 2
    {"set_problem_stochMode", 1, WitSymTable::witSetStochMode,
      {WitDRParmType::boolScalar}},
d318 2
a319 2
    {"set_problem_stockRealloc", 1, WitSymTable::witSetStockRealloc,
      {WitDRParmType::boolScalar}},
d321 2
a322 2
    {"set_problem_stockReallocation", 1, WitSymTable::witSetStockReallocation,
      {WitDRParmType::boolScalar}},
d324 2
a325 2
    {"set_problem_srSelSplit", 1, WitSymTable::witSetSrSelSplit,
      {WitDRParmType::boolScalar}},
d327 2
a328 2
    {"set_problem_tieBreakPropRt", 1, WitSymTable::witSetTieBreakPropRt,
      {WitDRParmType::boolScalar}},
d330 2
a331 5
    {"set_problem_title", 1, WitSymTable::witSetTitle,
      {WitDRParmType::string}},
 
    {"set_problem_truncOffsets", 1, WitSymTable::witSetTruncOffsets,
      {WitDRParmType::boolScalar}},
d333 2
a334 2
    {"set_problem_twoWayMultiExec", 1, WitSymTable::witSetTwoWayMultiExec,
      {WitDRParmType::boolScalar}},
d336 2
a337 2
    {"set_problem_useFocusHorizons", 1, WitSymTable::witSetUseFocusHorizons,
      {WitDRParmType::boolScalar}},
d339 2
a340 2
    {"set_problem_userHeurStart", 1, WitSymTable::witSetUserHeurStart,
      {WitDRParmType::boolScalar}},
d342 2
a343 2
    {"set_problem_wbounds", 1, WitSymTable::witSetWbounds,
      {WitDRParmType::doubleScalar}},
d345 2
a346 4
    {"set_problem_wit34Compatible", 1, WitSymTable::witSetWit34Compatible,
      {WitDRParmType::boolScalar}},
      
    {"set_part", 1, NULL, {WitDRParmType::string}},
d348 2
a349 2
    {"set_part_asapPipOrder", 1, WitSymTable::witSetPartAsapPipOrder,
      {WitDRParmType::boolScalar}},
d351 1
a351 2
    {"set_part_baSelSplit", 1, WitSymTable::witSetPartBaSelSplit,
      {WitDRParmType::boolScalar}},
d353 2
a354 2
    {"set_part_boundedLeadTimes", 1, WitSymTable::witSetPartBoundedLeadTimes,
      {WitDRParmType::boolScalar}},
d356 2
a357 2
    {"set_part_buildAheadUB", 1, WitSymTable::witSetPartBuildAheadUB,
      {WitDRParmType::intVector}},
d359 2
a360 2
    {"set_part_buildAheadLimit", 1, WitSymTable::witSetPartBuildAheadLimit,
      {WitDRParmType::intScalar}},
d362 2
a363 2
    {"set_part_buildAsap", 1, WitSymTable::witSetPartBuildAsap,
      {WitDRParmType::boolScalar}},
d365 2
a366 2
    {"set_part_buildNstn", 1, WitSymTable::witSetPartBuildNstn,
      {WitDRParmType::boolScalar}},
d368 2
a369 2
    {"set_part_obj1ScrapCost", 1, WitSymTable::witSetPartObj1ScrapCost,
      {WitDRParmType::doubleVector}},
d371 2
a372 2
    {"set_part_obj1StockCost", 1, WitSymTable::witSetPartObj1StockCost,
      {WitDRParmType::doubleVector}},
d374 2
a375 2
    {"set_part_objectStage", 1, WitSymTable::witSetPartObjectStage,
      {WitDRParmType::intScalar}},
d377 2
a378 2
    {"set_part_propRouting", 1, WitSymTable::witSetPartPropRouting,
      {WitDRParmType::boolScalar}},
d380 2
a381 2
    {"set_part_propRtg", 1, WitSymTable::witSetPartPropRtg,
      {WitDRParmType::boolVector}},
d383 2
a384 2
    {"set_part_scrapAllowed", 1, WitSymTable::witSetPartScrapAllowed,
      {WitDRParmType::boolScalar}},
d386 2
a387 2
    {"set_part_scrapCost", 1, WitSymTable::witSetPartScrapCost,
      {WitDRParmType::doubleVector}},
d389 2
a390 2
    {"set_part_singleSource", 1, WitSymTable::witSetPartSingleSource,
      {WitDRParmType::boolScalar}},
d392 2
a393 2
    {"set_part_stockBounds", 1, WitSymTable::witSetPartStockBounds,
      {WitDRParmType::boundSet}},
d395 2
a396 2
    {"set_part_stockCost", 1, WitSymTable::witSetPartStockCost,
      {WitDRParmType::doubleVector}},
d398 2
a399 2
    {"set_part_supplyVol", 1, WitSymTable::witSetPartSupplyVol,
      {WitDRParmType::doubleVector}},
d401 2
a402 2
    {"set_part_selForDel", 1, WitSymTable::witSetPartSelForDel,
      {WitDRParmType::boolScalar}},
d404 2
a405 2
    {"set_part_unitCost", 1, WitSymTable::witSetPartUnitCost,
      {WitDRParmType::doubleScalar}},
d407 2
a408 1
    {"set_demand", 2, NULL, {WitDRParmType::string, WitDRParmType::string}},
d410 2
a411 3
    {"set_demand_buildAheadLimit", 1,
      WitSymTable::witSetDemandBuildAheadLimit,
      {WitDRParmType::intScalar}},
d413 1
a413 3
    {"set_demand_buildAheadUB", 1,
      WitSymTable::witSetDemandBuildAheadUB,
      {WitDRParmType::intVector}},
d415 3
a417 2
    {"set_demand_cumShipBounds", 1, WitSymTable::witSetDemandCumShipBounds,
      {WitDRParmType::boundSet}},
d419 3
a421 3
    {"set_demand_cumShipReward", 1,
      WitSymTable::witSetDemandCumShipReward,
      {WitDRParmType::doubleVector}},
d423 2
a424 2
    {"set_demand_demandVol", 1, WitSymTable::witSetDemandDemandVol,
      {WitDRParmType::doubleVector}},
d426 3
a428 2
    {"set_demand_focusHorizon", 1, WitSymTable::witSetDemandFocusHorizon,
      {WitDRParmType::intScalar}},
d430 2
a431 2
    {"set_demand_grossRev", 1, WitSymTable::witSetDemandGrossRev,
      {WitDRParmType::doubleScalar}},
d433 2
a434 2
    {"set_demand_intShipVols", 1, WitSymTable::witSetDemandIntShipVols,
      {WitDRParmType::boolScalar}},
d436 2
a437 2
    {"set_demand_leadTimeUB", 1, WitSymTable::witSetDemandLeadTimeUB,
      {WitDRParmType::intVector}},
d439 2
a440 3
    {"set_demand_obj1CumShipReward", 1,
      WitSymTable::witSetDemandObj1CumShipReward,
      {WitDRParmType::doubleVector}},
d442 2
a443 2
    {"set_demand_obj1ShipReward", 1, WitSymTable::witSetDemandObj1ShipReward,
      {WitDRParmType::doubleVector}},
d445 3
a447 3
    {"set_demand_pipSeqIncShipVol", 1,
      WitSymTable::witSetDemandPipSeqIncShipVol,
      {WitDRParmType::doubleScalar}},
d449 2
a450 3
    {"set_demand_pipSeqShipPeriod", 1,
      WitSymTable::witSetDemandPipSeqShipPeriod,
      {WitDRParmType::intScalar}},
d452 3
a454 2
    {"set_demand_prefBuildAhead", 1, WitSymTable::witSetDemandPrefBuildAhead,
      {WitDRParmType::boolScalar}},
d456 3
a458 2
    {"set_demand_priority", 1, WitSymTable::witSetDemandPriority,
      {WitDRParmType::intVector}},
d460 2
a461 2
    {"set_demand_searchInc", 1, WitSymTable::witSetDemandSearchInc,
      {WitDRParmType::doubleScalar}},
d463 2
a464 2
    {"set_demand_selForDel", 1, WitSymTable::witSetDemandSelForDel,
      {WitDRParmType::boolScalar}},
d466 2
a467 2
    {"set_demand_shipLateAllowed", 1, WitSymTable::witSetDemandShipLateAllowed,
      {WitDRParmType::boolScalar}},
d469 2
a470 2
    {"set_demand_shipLateLimit", 1, WitSymTable::witSetDemandShipLateLimit,
      {WitDRParmType::intScalar}},
d472 2
a473 2
    {"set_demand_shipLateUB", 1, WitSymTable::witSetDemandShipLateUB,
      {WitDRParmType::intVector}},
d475 2
a476 2
    {"set_demand_shipReward", 1, WitSymTable::witSetDemandShipReward,
      {WitDRParmType::doubleVector}},
d478 2
a479 2
    {"set_demand_shipVol", 1, WitSymTable::witSetDemandShipVol,
      {WitDRParmType::doubleVector}},
d481 2
a482 4
    {"set_operation", 1, NULL, {WitDRParmType::string}},
 
    {"set_operation_execBounds", 1, WitSymTable::witSetOperationExecBounds,
      {WitDRParmType::boundSet}},
d484 2
a485 2
    {"set_operation_execCost", 1, WitSymTable::witSetOperationExecCost,
      {WitDRParmType::doubleVector}},
d487 1
a487 2
    {"set_operation_execPenalty", 1, WitSymTable::witSetOperationExecPenalty,
      {WitDRParmType::doubleScalar}},
d489 2
a490 2
    {"set_operation_incLotSize", 1, WitSymTable::witSetOperationIncLotSize,
      {WitDRParmType::doubleVector}},
d492 2
a493 2
    {"set_operation_incLotSize2", 1, WitSymTable::witSetOperationIncLotSize2,
      {WitDRParmType::doubleVector}},
d495 2
a496 3
    {"set_operation_intExecVols", 1,
          WitSymTable::witSetOperationIntExecVols,
      {WitDRParmType::boolScalar}},
d498 2
a499 3
    {"set_operation_lotSize2Thresh", 1,
                                    WitSymTable::witSetOperationLotSize2Thresh,
      {WitDRParmType::doubleVector}},
d501 2
a502 2
    {"set_operation_minLotSize", 1, WitSymTable::witSetOperationMinLotSize,
      {WitDRParmType::doubleVector}},
d504 3
a506 2
    {"set_operation_minLotSize2", 1, WitSymTable::witSetOperationMinLotSize2,
      {WitDRParmType::doubleVector}},
d508 3
a510 2
    {"set_operation_obj1ExecCost", 1, WitSymTable::witSetOperationObj1ExecCost,
      {WitDRParmType::doubleVector}},
d512 2
a513 2
    {"set_operation_objectStage", 1, WitSymTable::witSetOperationObjectStage,
      {WitDRParmType::intScalar}},
d515 2
a516 2
    {"set_operation_selForDel", 1, WitSymTable::witSetOperationSelForDel,
      {WitDRParmType::boolScalar}},
d518 2
a519 3
    {"set_operation_twoLevelLotSizes", 1,
          WitSymTable::witSetOperationTwoLevelLotSizes,
      {WitDRParmType::boolScalar}},
d521 2
a522 2
    {"set_operation_yield", 1, WitSymTable::witSetOperationYield,
      {WitDRParmType::intVector}},
d524 2
a525 2
    {"set_operation_yieldRate", 1, WitSymTable::witSetOperationYieldRate,
      {WitDRParmType::doubleVector}},
d527 3
a529 2
    {"set_operation_cycleTime34", 1,
      WitSymTable::witSetOperationCycleTime34, {WitDRParmType::doubleVector}},
d531 2
a532 2
    {"set_operation_execVol", 1,
      WitSymTable::witSetOperationExecVol, {WitDRParmType::doubleVector}},
d534 2
a535 2
    {"set_bomEntry", 2, NULL,
       {WitDRParmType::string, WitDRParmType::intScalar}},
d537 2
a538 2
    {"set_bomEntry_consRate", 1, WitSymTable::witSetBomEntryConsRate,
      {WitDRParmType::doubleVector}}, 
d540 2
a541 3
    {"set_bomEntry_earliestPeriod", 1, 
      WitSymTable::witSetBomEntryEarliestPeriod,
      {WitDRParmType::intScalar}},
d543 2
a544 2
    {"set_bomEntry_execPenalty", 1, WitSymTable::witSetBomEntryExecPenalty,
      {WitDRParmType::doubleScalar}},
d546 2
a547 2
    {"set_bomEntry_fallout", 1, WitSymTable::witSetBomEntryFallout,
      {WitDRParmType::intScalar}},
d549 3
a551 2
    {"set_bomEntry_falloutRate", 1, WitSymTable::witSetBomEntryFalloutRate,
      {WitDRParmType::doubleScalar}},
d553 2
a554 3
    {"set_bomEntry_latestPeriod", 1,
      WitSymTable::witSetBomEntryLatestPeriod,
      {WitDRParmType::intScalar}},
d556 2
a557 2
    {"set_bomEntry_mandEC", 1, WitSymTable::witSetBomEntryMandEC,
      {WitDRParmType::boolScalar}},
d559 2
a560 2
    {"set_bomEntry_offset", 1, WitSymTable::witSetBomEntryOffset,
      {WitDRParmType::doubleVector}},
d562 3
a564 2
    {"set_bomEntry_propRouting", 1, WitSymTable::witSetBomEntryPropRouting,
      {WitDRParmType::boolScalar}},
d566 2
a567 2
    {"set_bomEntry_propRtg", 1, WitSymTable::witSetBomEntryPropRtg,
      {WitDRParmType::boolVector}},
d569 2
a570 2
    {"set_bomEntry_routingShare", 1, WitSymTable::witSetBomEntryRoutingShare,
      {WitDRParmType::doubleVector}},
d572 2
a573 2
    {"set_bomEntry_selForDel", 1, WitSymTable::witSetBomEntrySelForDel,
      {WitDRParmType::boolScalar}},
d575 2
a576 2
    {"set_bomEntry_singleSource", 1, WitSymTable::witSetBomEntrySingleSource,
      {WitDRParmType::boolScalar}},
d578 2
a579 2
    {"set_bomEntry_usageRate", 1, WitSymTable::witSetBomEntryUsageRate,
      {WitDRParmType::doubleScalar}}, 
d581 2
a582 4
    {"set_subEntry", 3, NULL,
       {WitDRParmType::string,
        WitDRParmType::intScalar, 
        WitDRParmType::intScalar}},
d584 2
a585 2
    {"set_subEntry_consRate", 1, WitSymTable::witSetSubEntryConsRate,
      {WitDRParmType::doubleVector}},  
d587 2
a588 3
    {"set_subEntry_earliestPeriod", 1, 
      WitSymTable::witSetSubEntryEarliestPeriod,
      {WitDRParmType::intScalar}},
d590 4
a593 2
    {"set_subEntry_execPenalty", 1, WitSymTable::witSetSubEntryExecPenalty,
      {WitDRParmType::doubleScalar}},
d595 2
a596 2
    {"set_subEntry_expAllowed", 1,
      WitSymTable::witSetSubEntryExpAllowed, {WitDRParmType::boolScalar}},
d598 3
a600 2
    {"set_subEntry_expNetAversion", 1,
      WitSymTable::witSetSubEntryExpNetAversion, {WitDRParmType::doubleScalar}},
d602 2
a603 2
    {"set_subEntry_fallout", 1, WitSymTable::witSetSubEntryFallout,
      {WitDRParmType::intScalar}},
d605 2
a606 2
    {"set_subEntry_falloutRate", 1, WitSymTable::witSetSubEntryFalloutRate,
      {WitDRParmType::doubleScalar}},
d608 2
a609 2
    {"set_subEntry_intSubVols", 1,
      WitSymTable::witSetSubEntryIntSubVols, {WitDRParmType::boolScalar}},
d611 2
a612 3
    {"set_subEntry_latestPeriod", 1,
      WitSymTable::witSetSubEntryLatestPeriod,
      {WitDRParmType::intScalar}},
d614 2
a615 2
    {"set_subEntry_mrpNetAllowed", 1,
      WitSymTable::witSetSubEntryMrpNetAllowed, {WitDRParmType::boolScalar}},
d617 2
a618 2
    {"set_subEntry_netAllowed", 1,
      WitSymTable::witSetSubEntryNetAllowed, {WitDRParmType::boolScalar}},
d620 3
a622 2
    {"set_subEntry_usageRate", 1, WitSymTable::witSetSubEntryUsageRate,
      {WitDRParmType::doubleScalar}},  
d624 2
a625 3
    {"set_subEntry_obj1SubCost", 1,
      WitSymTable::witSetSubEntryObj1SubCost,
      {WitDRParmType::doubleVector}},
d627 2
a628 3
    {"set_subEntry_offset", 1,
      WitSymTable::witSetSubEntryOffset,
      {WitDRParmType::doubleVector}},
d630 2
a631 2
    {"set_subEntry_routingShare", 1, WitSymTable::witSetSubEntryRoutingShare,
      {WitDRParmType::doubleVector}},
d633 3
a635 2
    {"set_subEntry_selForDel", 1,
      WitSymTable::witSetSubEntrySelForDel, {WitDRParmType::boolScalar}},
d637 3
a639 2
    {"set_subEntry_subCost", 1,
      WitSymTable::witSetSubEntrySubCost, {WitDRParmType::doubleVector}},
d641 2
a642 2
    {"set_subEntry_subVol", 1, WitSymTable::witSetSubEntrySubVol,
      {WitDRParmType::doubleVector}}, 
d644 2
a645 2
    {"set_bopEntry", 2, NULL,
       {WitDRParmType::string, WitDRParmType::intScalar}},
d647 2
a648 2
    {"set_bopEntry_byProduct", 1, WitSymTable::witSetBopEntryByProduct,
      {WitDRParmType::boolScalar}},
d650 2
a651 3
    {"set_bopEntry_earliestPeriod", 1,
      WitSymTable::witSetBopEntryEarliestPeriod,
      {WitDRParmType::intScalar}},
d653 2
a654 2
    {"set_bopEntry_expAllowed", 1, WitSymTable::witSetBopEntryExpAllowed,
      {WitDRParmType::boolScalar}},
d656 2
a657 2
    {"set_bopEntry_expAversion", 1,
      WitSymTable::witSetBopEntryExpAversion, {WitDRParmType::doubleScalar}},
d659 3
a661 3
    {"set_bopEntry_latestPeriod", 1,
      WitSymTable::witSetBopEntryLatestPeriod,
      {WitDRParmType::intScalar}},
d663 2
a664 2
    {"set_bopEntry_meSelSplit", 1, WitSymTable::witSetBopEntryMeSelSplit,
      {WitDRParmType::boolScalar}},
d666 2
a667 2
    {"set_bopEntry_offset", 1, WitSymTable::witSetBopEntryOffset,
      {WitDRParmType::doubleVector}},
d669 3
a671 2
    {"set_bopEntry_prodRate", 1,
      WitSymTable::witSetBopEntryProdRate, {WitDRParmType::doubleScalar}},
d673 2
a674 2
    {"set_bopEntry_productRate", 1,
      WitSymTable::witSetBopEntryProductRate, {WitDRParmType::doubleVector}},
d676 2
a677 2
    {"set_bopEntry_routingShare", 1,
      WitSymTable::witSetBopEntryRoutingShare, {WitDRParmType::doubleVector}},
d679 2
a680 2
    {"set_bopEntry_selForDel", 1, WitSymTable::witSetBopEntrySelForDel,
      {WitDRParmType::boolScalar}},
d682 2
a683 2
    {"set_partWithOperation_asapPipOrder", 1,
      WitSymTable::witSetPartAsapPipOrder, {WitDRParmType::boolScalar}},
d685 2
a686 2
    {"set_partWithOperation_baSelSplit", 1,
      WitSymTable::witSetPartBaSelSplit, {WitDRParmType::boolScalar}},
d688 2
a689 2
    {"set_partWithOperation_boundedLeadTimes", 1,
      WitSymTable::witSetPartBoundedLeadTimes, {WitDRParmType::boolScalar}},
d691 2
a692 2
    {"set_partWithOperation_buildAheadUB", 1,
      WitSymTable::witSetPartBuildAheadUB, {WitDRParmType::intVector}},
d694 2
a695 2
    {"set_partWithOperation_buildAheadLimit", 1,
      WitSymTable::witSetPartBuildAheadLimit, {WitDRParmType::intScalar}},
d697 2
a698 2
    {"set_partWithOperation_buildAsap", 1,
      WitSymTable::witSetPartBuildAsap, {WitDRParmType::boolScalar}},
d700 2
a701 2
    {"set_partWithOperation_buildNstn", 1,
      WitSymTable::witSetPartBuildNstn, {WitDRParmType::boolScalar}},
d703 2
a704 2
    {"set_partWithOperation_obj1ScrapCost", 1,
      WitSymTable::witSetPartObj1ScrapCost, {WitDRParmType::doubleVector}},
d706 2
a707 2
    {"set_partWithOperation_obj1StockCost", 1,
      WitSymTable::witSetPartObj1StockCost, {WitDRParmType::doubleVector}},
d709 2
a710 2
    {"set_partWithOperation_objectStage", 1,
      WitSymTable::witSetPartObjectStage, {WitDRParmType::intScalar}},
d712 2
a713 2
    {"set_partWithOperation_propRouting", 1,
      WitSymTable::witSetPartPropRouting, {WitDRParmType::boolScalar}},
d715 2
a716 2
    {"set_partWithOperation_propRtg", 1,
      WitSymTable::witSetPartPropRtg, {WitDRParmType::boolVector}},
d718 2
a719 2
    {"set_partWithOperation_scrapAllowed", 1,
      WitSymTable::witSetPartScrapAllowed, {WitDRParmType::boolScalar}},
d721 2
a722 2
    {"set_partWithOperation_scrapCost", 1,
      WitSymTable::witSetPartScrapCost, {WitDRParmType::doubleVector}},
d724 2
a725 2
    {"set_partWithOperation_selForDel", 1,
      WitSymTable::witSetPartSelForDel, {WitDRParmType::boolScalar}},
d727 2
a728 2
    {"set_partWithOperation_singleSource", 1,
      WitSymTable::witSetPartSingleSource, {WitDRParmType::boolScalar}},
d730 2
a731 2
    {"set_partWithOperation_stockBounds", 1,
      WitSymTable::witSetPartStockBounds, {WitDRParmType::boundSet}},
d733 2
a734 2
    {"set_partWithOperation_supplyVol", 1,
      WitSymTable::witSetPartSupplyVol, {WitDRParmType::doubleVector}},
d736 2
a737 2
    {"set_partWithOperation_stockCost", 1,
      WitSymTable::witSetPartStockCost, {WitDRParmType::doubleVector}},
d739 2
a740 2
    {"set_partWithOperation_unitCost", 1,
      WitSymTable::witSetPartUnitCost, {WitDRParmType::doubleScalar}},
d742 11
a752 2
    {NULL,0,0,{WitDRParmType::undefined}}
  };
d759 4
a762 4
  myWitRun()->witAddBomEntry
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getPartName());
  return 0;   
d767 4
a770 4
  myWitRun()->witAddBopEntry
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getPartName());
  return 0;
d775 4
a778 4
  myWitRun()->witAddDemand
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName());
  return 0;
d783 12
a794 12
  switch (WitParser::instance ()->currentEntity()->getCatArg(1)) {
    case WitDRPartCat::capacity:
      myWitRun()->witAddPart
        (WitParser::instance ()->currentEntity()->getPartName(), WitCAPACITY);
      break;
    case WitDRPartCat::material:
      myWitRun()->witAddPart
        (WitParser::instance ()->currentEntity()->getPartName(), WitMATERIAL);
      break;
  };  
  return 0;
} 
d798 3
a800 3
  myWitRun()->witAddPartWithOperation
    (WitParser::instance ()->currentEntity()->getPartName());
  return 0;
d805 3
a807 3
  myWitRun()->witAddOperation
    (WitParser::instance ()->currentEntity()->getOperationName());
  return 0;
d812 5
a816 5
  myWitRun()->witAddSubsBomEntry
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getPartName());
  return 0;
d821 3
a823 3
  myWitRun()->witSetAccAfterOptImp
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d828 3
a830 3
  myWitRun()->witSetAccAfterSoftLB
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d835 3
a837 3
  myWitRun()->witSetAutoPriority
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d842 3
a844 3
  myWitRun()->witSetCompPrices
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d849 3
a851 3
  myWitRun()->witSetComputeCriticalList
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d856 3
a858 3
  myWitRun()->witSetCplexParSpecDblVal
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
d863 3
a865 3
  myWitRun()->witSetCplexParSpecIntVal
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d870 3
a872 3
  myWitRun()->witSetCplexParSpecName
    (WitParser::instance ()->currentAttr()->getStringArg(0));
  return 0;
d877 3
a879 3
  myWitRun()->witSetCurrentObjective
    (WitParser::instance ()->currentAttr()->getStringArg(0));
  return 0;
d884 3
a886 3
  myWitRun()->witSetCurrentScenario
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d891 3
a893 3
  myWitRun()->witSetEquitability
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d898 3
a900 3
  myWitRun()->witSetExecEmptyBom
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d905 3
a907 3
  myWitRun()->witSetExpCutoff
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
d912 3
a914 3
  myWitRun()->witSetForcedMultiEq
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d919 3
a921 3
  myWitRun()->witSetHashTableSize
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d926 3
a928 3
  myWitRun()->witSetHighPrecisionWD
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d933 3
a935 3
  myWitRun()->witSetIndependentOffsets
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d940 3
a942 3
  myWitRun()->witSetLocalBuildAhead
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d947 3
a949 3
  myWitRun()->witSetLocalMultiExec
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d954 3
a956 3
  myWitRun()->witSetLotSizeTol
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
d961 3
a963 3
  myWitRun()->witSetMinimalExcess
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d968 3
a970 3
  myWitRun()->witSetMipMode
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d975 3
a977 3
  myWitRun()->witSetModHeurAlloc
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d982 3
a984 3
  myWitRun()->witSetMultiExec
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d989 3
a991 3
  myWitRun()->witSetMultiObjMode
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d996 3
a998 3
  myWitRun()->witSetMultiObjTol
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
d1003 3
a1005 3
  myWitRun()->witSetMultiRoute
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1010 3
a1012 3
  myWitRun()->witSetNPeriods
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d1017 3
a1019 3
  myWitRun()->witSetNScenarios
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d1024 3
a1026 3
  myWitRun()->witSetNewPipPggOrder
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1031 3
a1033 3
  myWitRun()->witSetNonMrSelSplit
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1038 3
a1040 3
  myWitRun()->witSetNstnResidual
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1045 3
a1047 3
  myWitRun()->witSetObjChoice
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d1052 3
a1054 3
  myWitRun()->witSetObjectiveListSpec
    (WitParser::instance ()->currentAttr()->getStringArg(0));
  return 0;
d1059 3
a1061 3
  myWitRun()->witSetObjectiveRank
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d1066 3
a1068 3
  myWitRun()->witSetOutputPrecision
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d1073 3
a1075 3
  myWitRun()->witSetPenExec
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1080 3
a1082 3
  myWitRun()->witSetPerfPegging
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1087 3
a1089 3
  int    *iptr;
  iptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec 
  (WitStochImpMgr::defPeriodStageIdx ());
d1091 1
a1091 1
  if (iptr == NULL) return PERIOD_ERROR;
d1093 2
a1094 2
  myWitRun()->witSetPeriodStage (iptr);
  return 0;
d1098 2
a1099 2
   {
   myWitRun ()->myMsgFac () ("setObsAttFromFileWmsg", "periodsPerYear");
d1101 2
a1102 2
   return 0;
   }
d1106 3
a1108 3
  myWitRun()->witSetPgdCritListMode
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1113 2
a1114 2
  if (WitParser::instance ()->currentAttr ()->getBoolArg (0))
     myWitRun()->witClearPipSeq ();
d1116 1
a1116 1
  return 0;
d1121 3
a1123 3
  myWitRun()->witSetPipSeqFromHeur
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1128 3
a1130 3
  myWitRun()->witSetPrefHighStockSLBs
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1135 3
a1137 3
  myWitRun()->witSetProbability
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
d1142 3
a1144 3
  myWitRun()->witSetRespectStockSLBs
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1149 3
a1151 3
  myWitRun()->witSetRoundReqVols
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1156 3
a1158 3
  myWitRun()->witSetSelSplit
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1163 3
a1165 3
  myWitRun()->witSetSelectionRecovery
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1170 3
a1172 3
  myWitRun()->witSetSkipFailures
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1177 3
a1179 3
  myWitRun()->witSetSolverLogFileName
    (WitParser::instance ()->currentAttr()->getStringArg(0));
  return 0;
d1184 3
a1186 3
  myWitRun()->witSetStageByObject
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1191 3
a1193 3
  myWitRun()->witSetStochMode
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1198 3
a1200 3
  myWitRun()->witSetStockRealloc
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1205 3
a1207 3
  myWitRun()->witSetStockReallocation
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1212 3
a1214 3
  myWitRun()->witSetSrSelSplit
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1219 3
a1221 3
  myWitRun()->witSetTieBreakPropRt
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1226 3
a1228 3
  myWitRun()->witSetTitle
    (WitParser::instance ()->currentAttr()->getStringArg(0));
  return 0;
d1233 3
a1235 3
  myWitRun()->witSetTruncOffsets
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1240 3
a1242 3
  myWitRun()->witSetTwoWayMultiExec
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1247 3
a1249 3
  myWitRun()->witSetUseFocusHorizons
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1254 3
a1256 3
  myWitRun()->witSetUserHeurStart
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1261 3
a1263 3
  myWitRun()->witSetWbounds
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
d1268 3
a1270 3
  myWitRun()->witSetWit34Compatible
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1275 4
a1278 4
  myWitRun()->witSetPartAsapPipOrder
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1283 4
a1286 4
  myWitRun()->witSetPartBaSelSplit
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1291 4
a1294 4
  myWitRun()->witSetPartBoundedLeadTimes
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1299 8
a1306 8
  int  *iptr;
  iptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
    (WitMaterial::defBuildAheadUB(myWitRun()->myProblem ()));
  if (iptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetPartBuildAheadUB
    (WitParser::instance ()->currentEntity()->getPartName(), iptr);
  return 0;
d1311 4
a1314 4
  myWitRun()->witSetPartBuildAheadLimit
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d1319 4
a1322 4
  myWitRun()->witSetPartBuildAsap
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1327 4
a1330 4
  myWitRun()->witSetPartBuildNstn
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1335 8
a1342 8
  double *dptr;
  dptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitPart::defScrapCost());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetPartObj1ScrapCost
    (WitParser::instance ()->currentEntity()->getPartName(), dptr);
  return 0;
d1347 8
a1354 8
  double * dptr;
  dptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitMaterial::defStockCost());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetPartObj1StockCost
    (WitParser::instance ()->currentEntity()->getPartName(), dptr);
  return 0;
d1359 4
a1362 4
  myWitRun()->witSetPartObjectStage
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d1367 4
a1370 4
  myWitRun()->witSetPartPropRouting
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1375 1
a1375 1
  WitBoolean * bptr;
d1377 7
a1383 7
  bptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getBoolVec
    (WitPart::defPropRtg());
  if (bptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetPartPropRtg
    (WitParser::instance ()->currentEntity()->getPartName(), bptr);
  return 0;
d1388 4
a1391 4
  myWitRun()->witSetPartScrapAllowed
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1396 8
a1403 8
  double *dptr;
  dptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitPart::defScrapCost());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetPartScrapCost
    (WitParser::instance ()->currentEntity()->getPartName(), dptr);
  return 0;
d1408 4
a1411 4
  myWitRun()->witSetPartSingleSource
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1416 32
a1447 32
  WitVectorSpec * vecPtr;
  double *        arg2 = NULL;
  double *        arg3 = NULL;
  double *        arg4 = NULL;

  vecPtr =
     WitParser::instance ()->currentAttr()->getBoundSetArg(0)->hardLBVec();

  if (vecPtr != NULL) {
    arg2 = vecPtr->getDblVec (WitBoundSet::defHardLB());
    if (arg2 == NULL) return PERIOD_ERROR;
  };

  vecPtr =
     WitParser::instance ()->currentAttr()->getBoundSetArg(0)->softLBVec();

  if (vecPtr != NULL) {
    arg3 = vecPtr->getDblVec (WitBoundSet::defSoftLB());
    if (arg3 == NULL) return PERIOD_ERROR;
  };

  vecPtr =
     WitParser::instance ()->currentAttr()->getBoundSetArg(0)->hardUBVec();

  if (vecPtr != NULL) {
    arg4 = vecPtr->getDblVec (WitBoundSet::defHardUB());
    if (arg4 == NULL) return PERIOD_ERROR;
  };

  myWitRun()->witSetPartStockBounds
    (WitParser::instance ()->currentEntity()->getPartName(), arg2, arg3, arg4);
  return 0;
d1452 8
a1459 8
  double * dptr;
  dptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitMaterial::defStockCost());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetPartStockCost
    (WitParser::instance ()->currentEntity()->getPartName(), dptr);
  return 0;
d1464 1
a1464 1
  double * dptr;
d1466 7
a1472 7
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitPart::defSupplyVol());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetPartSupplyVol
    (WitParser::instance ()->currentEntity()->getPartName(), dptr);
  return 0;
d1477 4
a1480 4
  myWitRun()->witSetPartSelForDel
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1484 2
a1485 2
   {
   myWitRun ()->myMsgFac () ("setObsAttFromFileWmsg", "unitCost");
d1487 2
a1488 2
   return 0;
   }
d1492 5
a1496 5
  myWitRun()->witSetDemandBuildAheadLimit
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d1501 1
a1501 1
  int  *iptr;
d1503 8
a1510 8
  iptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
    (WitDemand::defBuildAheadUB());
  if (iptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandBuildAheadUB
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     iptr);
d1512 1
a1512 1
  return 0;
d1517 33
a1549 33
  WitVectorSpec * vecPtr;
  double *        arg3 = NULL;
  double *        arg4 = NULL;
  double *        arg5 = NULL;

  vecPtr =
     WitParser::instance ()->currentAttr()->getBoundSetArg(0)->hardLBVec();
  if (vecPtr != NULL) {
    arg3 = vecPtr->getDblVec (WitBoundSet::defHardLB());
    if (arg3 == NULL) return PERIOD_ERROR;
  };

  vecPtr =
     WitParser::instance ()->currentAttr()->getBoundSetArg(0)->softLBVec();
  if (vecPtr != NULL) {
    arg4 = vecPtr->getDblVec (WitBoundSet::defSoftLB());
    if (arg4 == NULL) return PERIOD_ERROR;
  };

  vecPtr =
     WitParser::instance ()->currentAttr()->getBoundSetArg(0)->hardUBVec();
  if (vecPtr != NULL) {
    arg5 = vecPtr->getDblVec (WitBoundSet::defHardUB());
    if (arg5 == NULL) return PERIOD_ERROR;
  };

  myWitRun()->witSetDemandCumShipBounds
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     arg3,
     arg4,
     arg5);
  return 0;
d1554 1
a1554 1
  double * dptr;
d1556 8
a1563 8
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitDemand::defCumShipReward());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandCumShipReward
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(), dptr);
  return 0;
d1568 1
a1568 1
  double * dptr;
d1570 8
a1577 8
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitDemand::defDemandVol());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandDemandVol
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(), dptr);
  return 0;
d1582 5
a1586 5
  myWitRun()->witSetDemandFocusHorizon
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d1590 2
a1591 2
   {
   myWitRun ()->myMsgFac () ("setObsAttFromFileWmsg", "grossRev");
d1593 2
a1594 2
   return 0;
   }
d1598 5
a1602 5
  myWitRun()->witSetDemandIntShipVols
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1607 1
a1607 1
  int  *iptr;
d1609 8
a1616 8
  iptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
    (WitDemand::defLeadTimeUB(myWitRun()->myProblem ()));
  if (iptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandLeadTimeUB
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     iptr);
d1618 1
a1618 1
  return 0;
d1623 1
a1623 1
  double * dptr;
d1625 8
a1632 8
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitDemand::defCumShipReward());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandObj1CumShipReward
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(), dptr);
  return 0;
d1637 1
a1637 1
  double * dptr;
d1639 8
a1646 8
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitDemand::defShipReward());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandObj1ShipReward
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(), dptr);
  return 0;
d1651 5
a1655 5
  myWitRun()->witAppendToPipSeq
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     myWitRun ()->myProblem ()->myPipMgr ()->shipSeqShipPer (),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
d1657 1
a1657 1
  myWitRun ()->myProblem ()->myPipMgr ()->setShipSeqShipPer (-1);
d1659 1
a1659 1
  return 0;
d1664 2
a1665 2
  myWitRun ()->myProblem ()->myPipMgr ()->setShipSeqShipPer (
     WitParser::instance ()->currentAttr()->getIntArg(0));
d1667 1
a1667 1
  return 0;
d1672 5
a1676 5
  myWitRun()->witSetDemandPrefBuildAhead
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1680 2
a1681 2
{ 
  int    *iptr;
d1683 8
a1690 8
  iptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
    (WitDemand::defPriority());
  if (iptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandPriority
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(), iptr);
  return 0;
d1695 5
a1699 5
  myWitRun()->witSetDemandSearchInc
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
d1704 5
a1708 5
  myWitRun()->witSetDemandSelForDel
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1713 5
a1717 5
  myWitRun()->witSetDemandShipLateAllowed
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1722 5
a1726 5
  myWitRun()->witSetDemandShipLateLimit
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d1731 1
a1731 1
  int  *iptr;
d1733 8
a1740 8
  iptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
    (WitDemand::defShipLateUB(myWitRun()->myProblem ()));
  if (iptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandShipLateUB
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     iptr);
d1742 1
a1742 1
  return 0;
d1747 1
a1747 1
  double * dptr;
d1749 8
a1756 8
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitDemand::defShipReward());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandShipReward
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(), dptr);
  return 0;
d1761 1
a1761 1
  double * dptr;
d1763 8
a1770 8
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitDemand::defShipVol());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandShipVol
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(), dptr);
  return 0;
d1775 32
a1806 32
  WitVectorSpec * vecPtr;
  double *        arg2 = NULL;
  double *        arg3 = NULL;
  double *        arg4 = NULL;

  vecPtr =
     WitParser::instance ()->currentAttr()->getBoundSetArg(0)->hardLBVec();
  if (vecPtr != NULL) {
    arg2 = vecPtr->getDblVec (WitBoundSet::defHardLB());
    if (arg2 == NULL) return PERIOD_ERROR;
  };

  vecPtr =
     WitParser::instance ()->currentAttr()->getBoundSetArg(0)->softLBVec();
  if (vecPtr != NULL) {
    arg3 = vecPtr->getDblVec (WitBoundSet::defSoftLB());
    if (arg3 == NULL) return PERIOD_ERROR;
  };

  vecPtr =
     WitParser::instance ()->currentAttr()->getBoundSetArg(0)->hardUBVec();
  if (vecPtr != NULL) {
    arg4 = vecPtr->getDblVec (WitBoundSet::defHardUB());
    if (arg4 == NULL) return PERIOD_ERROR;
  };

  myWitRun()->witSetOperationExecBounds (
     WitParser::instance ()->currentEntity()->getOperationName(),
     arg2,
     arg3,
     arg4);
  return 0;
d1811 1
a1811 1
  double * dptr;
d1813 7
a1819 7
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defExecCost());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationExecCost
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
d1824 4
a1827 4
  myWitRun()->witSetOperationExecPenalty
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
d1832 1
a1832 1
  double * dptr;
d1834 7
a1840 7
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defIncLotSize());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationIncLotSize
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
d1845 1
a1845 1
  double * dptr;
d1847 7
a1853 7
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defIncLotSize2());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationIncLotSize2
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
d1858 4
a1861 4
  myWitRun()->witSetOperationIntExecVols
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1866 1
a1866 1
  double * dptr;
d1868 7
a1874 7
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defLotSize2Thresh());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationLotSize2Thresh
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
d1879 1
a1879 1
  double * dptr;
d1881 7
a1887 7
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defMinLotSize());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationMinLotSize
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
d1892 1
a1892 1
  double * dptr;
d1894 7
a1900 7
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defMinLotSize2());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationMinLotSize2
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
d1905 1
a1905 1
  double * dptr;
d1907 7
a1913 7
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defExecCost());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationObj1ExecCost
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
d1918 4
a1921 4
  myWitRun()->witSetOperationObjectStage
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d1926 4
a1929 4
  myWitRun()->witSetOperationSelForDel
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1934 4
a1937 4
  myWitRun()->witSetOperationTwoLevelLotSizes
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d1942 1
a1942 1
  int    *iptr;
d1944 7
a1950 7
  iptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
    (WitOperation::defYield());
  if (iptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationYield
    (WitParser::instance ()->currentEntity()->getOperationName(), iptr);
  return 0;
d1955 1
a1955 1
  double * dptr;
d1957 7
a1963 7
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defYieldRate());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationYieldRate
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
d1968 1
a1968 1
  double * dptr;
d1970 7
a1976 7
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defCycleTime34());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationCycleTime34
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
d1981 1
a1981 1
  double * dptr;
d1983 7
a1989 7
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitOperation::defExecVol());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetOperationExecVol
    (WitParser::instance ()->currentEntity()->getOperationName(), dptr);
  return 0;
d1994 1
a1994 1
  double * dptr;
d1996 8
a2003 8
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitConsEntry::defConsRate());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetBomEntryConsRate
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(), dptr);
  return 0;
d2008 5
a2012 5
  myWitRun()->witSetBomEntryEarliestPeriod
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d2017 5
a2021 5
  myWitRun()->witSetBomEntryExecPenalty
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
d2026 5
a2030 5
  myWitRun()->witSetBomEntryFallout
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d2035 5
a2039 5
  myWitRun()->witSetBomEntryFalloutRate
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
d2044 5
a2048 5
  myWitRun()->witSetBomEntryLatestPeriod
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d2053 5
a2057 5
  myWitRun()->witSetBomEntryMandEC
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d2062 1
a2062 1
  double * dptr;
d2064 8
a2071 8
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitBillEntry::defOffset());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetBomEntryOffset
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(), dptr);
  return 0;
d2076 5
a2080 5
  myWitRun()->witSetBomEntryPropRouting
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d2085 1
a2085 1
  WitBoolean * bptr;
d2087 9
a2095 9
  bptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getBoolVec
    (WitBomEntry::defPropRtg());
  if (bptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetBomEntryPropRtg
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     bptr);
  return 0;
d2100 1
a2100 1
  double * dptr;
d2102 8
a2109 8
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitBillEntry::defRoutingShare());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetBomEntryRoutingShare
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(), dptr);
  return 0;
d2114 5
a2118 5
  myWitRun()->witSetBomEntrySelForDel
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d2123 5
a2127 5
  myWitRun()->witSetBomEntrySingleSource
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d2132 5
a2136 5
  myWitRun()->witSetBomEntryUsageRate
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
d2141 1
a2141 1
  double * dptr;
d2143 9
a2151 9
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitConsEntry::defConsRate());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetSubsBomEntryConsRate
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(), dptr);
  return 0;
d2156 6
a2161 6
  myWitRun()->witSetSubsBomEntryEarliestPeriod
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d2166 6
a2171 6
  myWitRun()->witSetSubsBomEntryExecPenalty
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
d2176 6
a2181 6
  myWitRun()->witSetSubsBomEntryExpAllowed
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d2186 6
a2191 6
  myWitRun()->witSetSubsBomEntryExpNetAversion
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
d2196 6
a2201 6
  myWitRun()->witSetSubsBomEntryFallout
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d2206 6
a2211 6
  myWitRun()->witSetSubsBomEntryFalloutRate
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
d2216 6
a2221 6
  myWitRun()->witSetSubsBomEntryIntSubVols
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d2226 6
a2231 6
  myWitRun()->witSetSubsBomEntryLatestPeriod
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d2236 6
a2241 6
  myWitRun()->witSetSubsBomEntryMrpNetAllowed
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d2246 6
a2251 6
  myWitRun()->witSetSubsBomEntryNetAllowed
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d2256 6
a2261 6
  myWitRun()->witSetSubsBomEntryUsageRate
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;  
d2266 1
a2266 1
  double * dptr;
d2268 9
a2276 9
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitSubEntry::defSubCost());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetSubsBomEntryObj1SubCost
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(), dptr);
  return 0; 
d2281 1
a2281 1
  double * dptr;
d2283 9
a2291 9
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitBillEntry::defOffset());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetSubsBomEntryOffset
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(), dptr);
  return 0;
d2296 1
a2296 1
  double * dptr;
d2298 9
a2306 9
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitBillEntry::defRoutingShare());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetSubsBomEntryRoutingShare
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(), dptr);
  return 0;
d2311 6
a2316 6
  myWitRun()->witSetSubsBomEntrySelForDel
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d2321 1
a2321 1
  double * dptr;
d2323 9
a2331 9
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitSubEntry::defSubCost());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetSubsBomEntrySubCost
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(), dptr);
  return 0; 
d2336 1
a2336 1
  double * dptr;
d2338 9
a2346 9
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitSubEntry::defSubVol());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetSubsBomEntrySubVol
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(), dptr);
  return 0;
d2351 5
a2355 5
  myWitRun()->witSetBopEntryByProduct
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0; 
d2360 5
a2364 5
  myWitRun()->witSetBopEntryEarliestPeriod
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d2369 5
a2373 5
  myWitRun()->witSetBopEntryExpAllowed
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d2378 5
a2382 5
  myWitRun()->witSetBopEntryExpAversion
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
d2387 5
a2391 5
  myWitRun()->witSetBopEntryLatestPeriod
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
d2396 5
a2400 5
  myWitRun()->witSetBopEntryMeSelSplit
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d2405 1
a2405 1
  double * dptr;
d2407 8
a2414 8
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
       (WitBillEntry::defOffset());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetBopEntryOffset
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(), dptr);
  return 0;
d2419 5
a2423 5
  myWitRun()->witSetBopEntryProdRate
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
d2428 1
a2428 1
  double * dptr;
d2430 8
a2437 8
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitBopEntry::defProductRate());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetBopEntryProductRate
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     dptr);
d2439 1
a2439 1
  return 0;
d2444 1
a2444 1
  double * dptr;
d2446 8
a2453 8
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitBillEntry::defRoutingShare());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetBopEntryRoutingShare
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     dptr);
d2455 1
a2455 1
  return 0;
d2460 5
a2464 5
  myWitRun()->witSetBopEntrySelForDel
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
d2472 1
a2472 1
  pst_(s), index_(0)
d2482 4
a2485 4
  if (index_ < sizeof WitSymTable::symbolTable_
    /sizeof(WitSymTabEntry::witSymbolDef))
      return(&WitSymTable::symbolTable_[index_++]);
  return (&WitSymTable::symbolTable_[index_ = 0]);
@


1.171
log
@CPLEX Parameters
@
text
@a165 3
    {"set_problem_coinSelected", 1, WitSymTable::witSetCoinSelected,
      {WitDRParmType::boolScalar}},

a181 3
    {"set_problem_cplexSelected", 1, WitSymTable::witSetCplexSelected,
      {WitDRParmType::boolScalar}},

a839 7
WitParseRC WitSymTable::witSetCoinSelected()
{
  myWitRun()->witSetCoinSelected
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

a874 7
WitParseRC WitSymTable::witSetCplexSelected()
{
  myWitRun()->witSetCplexSelected
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

@


1.170
log
@CPLEX Parameters
@
text
@d176 1
a176 4
    {"set_problem_cplexSelected", 1, WitSymTable::witSetCplexSelected,
      {WitDRParmType::boolScalar}},

    {"set_problem_cpxParSpecDblVal", 1, WitSymTable::witSetCpxParSpecDblVal,
d179 1
a179 1
    {"set_problem_cpxParSpecIntVal", 1, WitSymTable::witSetCpxParSpecIntVal,
d182 1
a182 1
    {"set_problem_cpxParSpecName", 1, WitSymTable::witSetCpxParSpecName,
d185 3
d867 1
a867 1
WitParseRC WitSymTable::witSetCplexSelected()
d869 2
a870 2
  myWitRun()->witSetCplexSelected
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
d874 1
a874 1
WitParseRC WitSymTable::witSetCpxParSpecDblVal()
d876 2
a877 2
  myWitRun()->witSetCpxParSpecDblVal
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
d881 1
a881 1
WitParseRC WitSymTable::witSetCpxParSpecIntVal()
d883 2
a884 2
  myWitRun()->witSetCpxParSpecIntVal
    (WitParser::instance ()->currentAttr()->getIntArg(0));
d888 1
a888 1
WitParseRC WitSymTable::witSetCpxParSpecName()
d890 2
a891 2
  myWitRun()->witSetCpxParSpecName
    (WitParser::instance ()->currentAttr()->getStringArg(0));
@


1.169
log
@CPLEX Param Specs
@
text
@d179 9
a317 9
    {"set_problem_specCpxParDblVal", 1, WitSymTable::witSetSpecCpxParDblVal,
      {WitDRParmType::doubleScalar}},

    {"set_problem_specCpxParIntVal", 1, WitSymTable::witSetSpecCpxParIntVal,
      {WitDRParmType::intScalar}},

    {"set_problem_specCpxParName", 1, WitSymTable::witSetSpecCpxParName,
      {WitDRParmType::string}},
 
d874 21
a1201 21
WitParseRC WitSymTable::witSetSpecCpxParDblVal()
{
  myWitRun()->witSetSpecCpxParDblVal
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSpecCpxParIntVal()
{
  myWitRun()->witSetSpecCpxParIntVal
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSpecCpxParName()
{
  myWitRun()->witSetSpecCpxParName
    (WitParser::instance ()->currentAttr()->getStringArg(0));
  return 0;
}

@


1.168
log
@CPLEX Param Specs.
@
text
@d309 3
d1181 7
@


1.167
log
@CPX Param Specs
@
text
@d309 3
d1178 7
@


1.166
log
@CPX Params
@
text
@a241 3
    {"set_problem_nameForCpxParam", 1, WitSymTable::witSetNameForCpxParam,
      {WitDRParmType::string}},
 
d309 3
a1014 7
WitParseRC WitSymTable::witSetNameForCpxParam()
{
  myWitRun()->witSetNameForCpxParam
    (WitParser::instance ()->currentAttr()->getStringArg(0));
  return 0;
}

d1175 7
@


1.165
log
@CPLEX
@
text
@d242 1
a242 1
    {"set_problem_objectiveListSpec", 1, WitSymTable::witSetObjectiveListSpec,
a244 3
    {"set_problem_objectiveRank", 1, WitSymTable::witSetObjectiveRank,
      {WitDRParmType::intScalar}},

d257 6
d1015 7
@


1.164
log
@Modifiable heuristic allocation
@
text
@d166 3
d176 3
a305 6
    {"set_problem_solverIsCoin", 1, WitSymTable::witSetSolverIsCoin,
      {WitDRParmType::boolScalar}},

    {"set_problem_solverIsCplex", 1, WitSymTable::witSetSolverIsCplex,
      {WitDRParmType::boolScalar}},

d837 7
d858 7
a1164 14
WitParseRC WitSymTable::witSetSolverIsCoin()
{
  myWitRun()->witSetSolverIsCoin
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetSolverIsCplex()
{
  myWitRun()->witSetSolverIsCplex
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

@


1.163
log
@Heuristic Adjustment
@
text
@a193 3
    {"set_problem_heurAdjustEnabled", 1, WitSymTable::witSetHeurAdjustEnabled,
      {WitDRParmType::boolScalar}},

d215 3
a899 7
WitParseRC WitSymTable::witSetHeurAdjustEnabled()
{
  myWitRun()->witSetHeurAdjustEnabled
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

d949 7
@


1.162
log
@Heuristic Adjustment
@
text
@d194 3
d900 7
@


1.161
log
@Name change: "selection reuse" has becomne "selection recovery".
@
text
@d31 1
a31 1
#include <Opn.h>
@


1.160
log
@Lead Time Bounds.
@
text
@d291 1
a291 1
    {"set_problem_selectionReuse", 1, WitSymTable::witSetSelectionReuse,
d1127 1
a1127 1
WitParseRC WitSymTable::witSetSelectionReuse()
d1129 1
a1129 1
  myWitRun()->witSetSelectionReuse
@


1.159
log
@Bounded Lead Times
@
text
@d353 1
a353 1
    {"set_part_boundedLeadTime", 1, WitSymTable::witSetPartBoundedLeadTime,
d691 2
a692 2
    {"set_partWithOperation_boundedLeadTime", 1,
      WitSymTable::witSetPartBoundedLeadTime, {WitDRParmType::boolScalar}},
d1269 1
a1269 1
WitParseRC WitSymTable::witSetPartBoundedLeadTime()
d1271 1
a1271 1
  myWitRun()->witSetPartBoundedLeadTime
@


1.158
log
@Bounded Lead Times
@
text
@d353 1
a353 1
    {"set_part_boundedLeadTimes", 1, WitSymTable::witSetPartBoundedLeadTimes,
d691 2
a692 2
    {"set_partWithOperation_boundedLeadTimes", 1,
      WitSymTable::witSetPartBoundedLeadTimes, {WitDRParmType::boolScalar}},
d1269 1
a1269 1
WitParseRC WitSymTable::witSetPartBoundedLeadTimes()
d1271 1
a1271 1
  myWitRun()->witSetPartBoundedLeadTimes
@


1.157
log
@Bounded Lead Times
@
text
@d436 3
d1585 16
@


1.156
log
@Selection Reuse.
@
text
@d353 3
d688 3
d1266 8
@


1.155
log
@CPLEX
@
text
@d291 3
d1118 7
@


1.154
log
@Preparing for CPLEX.
@
text
@d297 3
d1129 7
@


1.153
log
@Multi-Obj Mode
@
text
@d294 3
d1119 7
@


1.152
log
@Multi-Obj Mode
@
text
@d236 1
a236 1
    {"set_problem_objectiveSeqNo", 1, WitSymTable::witSetObjectiveSeqNo,
d1005 1
a1005 1
WitParseRC WitSymTable::witSetObjectiveSeqNo()
d1007 1
a1007 1
  myWitRun()->witSetObjectiveSeqNo
@


1.151
log
@Multi-objective mode
@
text
@d221 3
d942 7
@


1.150
log
@Multi-objective mode
@
text
@a223 3
    {"set_problem_nObjectives", 1, WitSymTable::witSetNObjectives,
      {WitDRParmType::intScalar}},

a232 3
    {"set_problem_objectiveName", 1, WitSymTable::witSetObjectiveName,
      {WitDRParmType::string}},
 
a945 7
WitParseRC WitSymTable::witSetNObjectives()
{
  myWitRun()->witSetNObjectives
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

a994 7
WitParseRC WitSymTable::witSetObjectiveName()
{
  myWitRun()->witSetObjectiveName
    (WitParser::instance ()->currentAttr()->getStringArg(0));
  return 0;
}

@


1.149
log
@Multi-Objective Mode.
@
text
@d233 3
d1001 7
@


1.148
log
@Multi-objective mode.
@
text
@d236 3
d1005 7
@


1.147
log
@Multi-obj mode.
@
text
@d233 3
d995 7
@


1.146
log
@Multi-objective mode.
@
text
@d173 3
d824 7
@


1.145
log
@Removing objective #2.
@
text
@d221 3
d933 7
@


1.144
log
@Removing objective #2.
@
text
@d38 1
d81 4
a84 4
WitSymTable::WitSymTable(WitRun *theRun)
{
  myWitRun_ = theRun;
}
d380 3
d406 3
d712 3
d1005 6
a1010 6
WitParseRC WitSymTable::witSetPeriodsPerYear()
{
  myWitRun()->witSetPeriodsPerYear
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}
d1376 7
d1482 7
@


1.143
log
@Multi-obj mode.
@
text
@a164 3
    {"set_problem_capCost", 1, WitSymTable::witSetCapCost,
      {WitDRParmType::doubleScalar}},

a195 3
    {"set_problem_invCost", 1, WitSymTable::witSetInvCost,
      {WitDRParmType::doubleScalar}},

a237 12
    {"set_problem_obj2Winv", 1, WitSymTable::witSetObj2Winv,
      {WitDRParmType::doubleScalar}},

    {"set_problem_obj2Wrev", 1, WitSymTable::witSetObj2Wrev,
      {WitDRParmType::doubleScalar}},

    {"set_problem_obj2Wserv", 1, WitSymTable::witSetObj2Wserv,
      {WitDRParmType::doubleScalar}},

    {"set_problem_obj2Wsub", 1, WitSymTable::witSetObj2Wsub,
      {WitDRParmType::doubleScalar}},

a378 3
    {"set_part_unitCost", 1, WitSymTable::witSetPartUnitCost,
      {WitDRParmType::doubleScalar}},

a401 3
    {"set_demand_grossRev", 1, WitSymTable::witSetDemandGrossRev,
      {WitDRParmType::doubleScalar}},

a480 3
    {"set_operation_obj2AuxCost", 1, WitSymTable::witSetOperationObj2AuxCost,
      {WitDRParmType::doubleScalar}},

a596 3
    {"set_subEntry_obj2SubPenalty", 1,
      WitSymTable::witSetSubEntryObj2SubPenalty, {WitDRParmType::doubleScalar}},

a704 3
    {"set_partWithOperation_unitCost", 1,
      WitSymTable::witSetPartUnitCost, {WitDRParmType::doubleScalar}},

a793 7
WitParseRC WitSymTable::witSetCapCost()
{
  myWitRun()->witSetCapCost
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

a863 7
WitParseRC WitSymTable::witSetInvCost()
{
  myWitRun()->witSetInvCost
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

a961 28
WitParseRC WitSymTable::witSetObj2Winv()
{
  myWitRun()->witSetObj2Winv
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetObj2Wrev()
{
  myWitRun()->witSetObj2Wrev
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetObj2Wserv()
{
  myWitRun()->witSetObj2Wserv
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetObj2Wsub()
{
  myWitRun()->witSetObj2Wsub
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

a1365 8
WitParseRC WitSymTable::witSetPartUnitCost()
{
  myWitRun()->witSetPartUnitCost
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

a1464 9
WitParseRC WitSymTable::witSetDemandGrossRev()
{
  myWitRun()->witSetDemandGrossRev
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

a1768 8
WitParseRC WitSymTable::witSetOperationObj2AuxCost()
{
  myWitRun()->witSetOperationObj2AuxCost
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

a2106 10
WitParseRC WitSymTable::witSetSubEntryObj2SubPenalty()
{
  myWitRun()->witSetSubsBomEntryObj2SubPenalty
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

@


1.142
log
@Removed many instances of converting a string constant to a char *.
@
text
@d220 3
d953 7
@


1.141
log
@Stochastic Implosion
@
text
@a742 3
  char   *s = "Invoking witAddBomEntry  ";
  WitParser::instance ()->currentEntity()->printArgs(s);

a750 3
  char   *s = "Invoking witAddBopEntry  ";
  WitParser::instance ()->currentEntity()->printArgs(s);

a758 3
  char   *s = "Invoking witAddDemand  ";
  WitParser::instance ()->currentEntity()->printArgs(s);

a766 3
  char   *s = "Invoking witAddPart  ";
  WitParser::instance ()->currentEntity()->printArgs(s);

a781 3
  char   *s = "Invoking witAddPartWithOperation  ";
  WitParser::instance ()->currentEntity()->printArgs(s);

a788 3
  char   *s = "Invoking witAddOperation  ";
  WitParser::instance ()->currentEntity()->printArgs(s);

a795 3
  char   *s = "Invoking witAddSubEntry  ";
  WitParser::instance ()->currentEntity()->printArgs(s);

a804 3
  char   *s = "Invoking witSetAccAfterOptImp  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a811 3
  char   *s = "Invoking witSetAccAfterSoftLB  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a818 3
  char   *s = "Invoking witSetAutoPriority  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a825 3
  char   *s = "Invoking witSetCapCost  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a832 3
  char   *s = "Invoking witSetCompPrices  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a839 3
  char   *s = "Invoking witSetComputeCriticalList  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a846 3
  char   *s = "Invoking witSetCurrentScenario  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a853 3
  char   *s = "Invoking witSetEquitability  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a860 3
  char   *s = "Invoking witSetExecEmptyBom  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a867 3
  char   *s = "Invoking witSetExpCutoff  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a874 3
  char   *s = "Invoking witSetForcedMultiEq  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a881 3
  char   *s = "Invoking witSetHashTableSize  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a888 3
  char   *s = "Invoking witSetHighPrecisionWD  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a895 3
  char   *s = "Invoking witSetIndependentOffsets  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a902 3
  char   *s = "Invoking witSetInvCost  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a909 3
  char   *s = "Invoking witSetLocalBuildAhead  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a916 3
  char   *s = "Invoking witSetLocalMultiExec  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a923 3
  char   *s = "Invoking witSetLotSizeTol  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a930 3
  char   *s = "Invoking witSetMinimalExcess  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a937 3
  char   *s = "Invoking witSetMipMode  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a944 3
  char   *s = "Invoking witSetMultiExec  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a951 3
  char   *s = "Invoking witSetMultiRoute  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a958 3
  char   *s = "Invoking witSetNPeriods  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a965 3
  char   *s = "Invoking witSetNScenarios  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a972 3
  char   *s = "Invoking witSetNewPipPggOrder  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a979 3
  char   *s = "Invoking witSetNonMrSelSplit  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a986 3
  char   *s = "Invoking witSetNstnResidual  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a993 3
  char   *s = "Invoking witSetObjChoice  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1000 3
  char   *s = "Invoking witSetObj2Winv  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1007 3
  char   *s = "Invoking witSetObj2Wrev  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1014 3
  char   *s = "Invoking witSetObj2Wserv  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1021 3
  char   *s = "Invoking witSetObj2Wsub  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1028 3
  char   *s = "Invoking witSetOutputPrecision  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1035 3
  char   *s = "Invoking witSetPenExec  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1042 3
  char   *s = "Invoking witSetPerfPegging  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1050 3
  char   *s = "Invoking witSetPeriodStage  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1061 3
  char   *s = "Invoking witSetPeriodsPerYear  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1068 3
  char   *s = "Invoking witSetPgdCritListMode  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1075 3
  char   *s = "Invoking witSetPipSeqClearsNow  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1083 3
  char   *s = "Invoking witSetPipSeqFromHeur  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1090 3
  char   *s = "Invoking witSetPrefHighStockSLBs  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1097 3
  char   *s = "Invoking witSetProbability  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1104 3
  char   *s = "Invoking witSetRespectStockSLBs  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1111 3
  char   *s = "Invoking witSetRoundReqVols  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1118 3
  char   *s = "Invoking witSetSelSplit  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1125 3
  char   *s = "Invoking witSetSkipFailures  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1132 3
  char   *s = "Invoking witSetSolverLogFileName  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1139 3
  char   *s = "Invoking witSetStageByObject  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1146 3
  char   *s = "Invoking witSetStochMode  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1153 3
  char   *s = "Invoking witSetStockRealloc  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1160 3
  char   *s = "Invoking witSetStockReallocation  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1167 3
  char   *s = "Invoking witSetSrSelSplit  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1174 3
  char   *s = "Invoking witSetTieBreakPropRt  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1181 3
  char   *s = "Invoking witSetTitle  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1188 3
  char   *s = "Invoking witSetTruncOffsets  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1195 3
  char   *s = "Invoking witSetTwoWayMultiExec  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1202 3
  char   *s = "Invoking witSetUseFocusHorizons  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1209 3
  char   *s = "Invoking witSetUserHeurStart  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1216 3
  char   *s = "Invoking witSetWbounds  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1223 3
  char   *s = "Invoking witSetWit34Compatible  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1230 3
  char   *s = "Invoking witSetPartAsapPipOrder  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1238 3
  char   *s = "Invoking witSetPartBaSelSplit  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1247 3
  char   *s = "Invoking witSetPartBuildAheadUB  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1258 3
  char   *s = "Invoking witSetPartBuildAheadLimit  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1266 3
  char   *s = "Invoking witSetPartBuildAsap  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1274 3
  char   *s = "Invoking witSetPartBuildNstn  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1283 3
  char   *s = "Invoking witSetPartObj1ScrapCost  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1295 3
  char   *s = "Invoking witSetPartObj1StockCost  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1306 3
  char   *s = "Invoking witSetPartObjectStage  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1314 3
  char   *s = "Invoking witSetPartPropRouting  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

d1324 1
a1324 2
  char   *s = "Invoking witSetPartPropRtg  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1335 3
  char   *s = "Invoking witSetPartScrapAllowed  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1344 3
  char   *s = "Invoking witSetPartScrapCost  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1355 3
  char   *s = "Invoking witSetPartSingleSource  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1368 3
  char   *s = "Invoking witSetPartStockBounds  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1400 3
  char   *s = "Invoking witSetPartStockCost  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

d1413 1
a1413 2
  char   *s = "Invoking witSetPartSupplyVol  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1424 3
  char   *s = "Invoking witSetPartSelForDel  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1432 3
  char   *s = "Invoking witSetPartUnitCost  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1440 3
  char   *s = "Invoking witSetDemandBuildAheadLimit  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1450 2
  char   *s = "Invoking witSetDemandBuildAheadUB  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1470 3
  char   *s = "Invoking witSetDemandCumShipBounds  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1503 2
  char   *s = "Invoking witSetDemandCumShipReward  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1517 2
  char   *s = "Invoking witSetDemandDemandVol  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1530 3
  char   *s = "Invoking witSetDemandFocusHorizon  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1539 3
  char   *s = "Invoking witSetDemandGrossRev  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1548 3
  char   *s = "Invoking witSetDemandIntShipVols  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1558 2
  char   *s = "Invoking witSetDemandCumShipReward  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1572 2
  char   *s = "Invoking witSetDemandObj1ShipReward  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1585 3
  char   *s = "Invoking witSetDemandPipSeqIncShipVol  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1598 3
  char   *s = "Invoking witSetDemandPipSeqShipPeriod  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1606 3
  char   *s = "Invoking witSetDemandPrefBuildAhead  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1616 2
  char   *s = "Invoking witSetDemandPriority  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1629 3
  char   *s = "Invoking witSetDemandSearchInc  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1638 3
  char   *s = "Invoking witSetDemandSelForDel  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1647 3
  char   *s = "Invoking witSetDemandShipLateAllowed  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1656 3
  char   *s = "Invoking witSetDemandShipLateLimit  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1666 2
  char   *s = "Invoking witSetDemandShipLateUB  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1682 2
  char   *s = "Invoking witSetDemandShipReward  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1696 2
  char   *s = "Invoking witSetDemandShipVol  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1714 3
  char   *s = "Invoking witSetOperationExecBounds  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1746 2
  char   *s = "Invoking witSetOperationExecCost  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1758 3
  char   *s = "Invoking witSetOperationExecPenalty  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1767 2
  char   *s = "Invoking witSetOperationIncLotSize  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1780 2
  char   *s = "Invoking witSetOperationIncLotSize2  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1792 3
  char   *s = "Invoking witSetOperationIntExecVols  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1801 2
  char   *s = "Invoking witSetOperationLotSize2Thresh  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1814 2
  char   *s = "Invoking witSetOperationMinLotSize  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1827 2
  char   *s = "Invoking witSetOperationMinLotSize2  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1840 2
  char   *s = "Invoking witSetOperationObj1ExecCost  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1852 3
  char   *s = "Invoking witSetOperationObj2AuxCost  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1860 3
  char   *s = "Invoking witSetOperationObjectStage  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1868 3
  char   *s = "Invoking witSetOperationSelForDel  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1876 3
  char   *s = "Invoking witSetOperationTwoLevelLotSizes  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1885 2
  char   *s = "Invoking witSetOperationYield  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1898 2
  char   *s = "Invoking witSetOperationYieldRate  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1911 2
  char   *s = "Invoking witSetOperationCycleTime34  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1924 2
  char   *s = "Invoking witSetOperationExecVol  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1937 2
  char   *s = "Invoking witSetBomEntryConsRate  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1950 3
  char   *s = "Invoking witSetBomEntryEarliestPeriod  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1959 3
  char   *s = "Invoking witSetBomEntryExecPenalty  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1968 3
  char   *s = "Invoking witSetBomEntryFallout  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1977 3
  char   *s = "Invoking witSetBomEntryFalloutRate  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1986 3
  char   *s = "Invoking witSetBomEntryLatestPeriod  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a1995 3
  char   *s = "Invoking witSetBomEntryMandEC  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2005 2
  char   *s = "Invoking witSetBomEntryOffset  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a2018 3
  char   *s = "Invoking witSetBomEntryPropRouting  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

d2029 1
a2029 2
  char   *s = "Invoking witSetBomEntryPropRtg  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a2043 2
  char   *s = "Invoking witSetBomEntryRoutingShare  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a2056 3
  char   *s = "Invoking witSetBomEntrySelForDel  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2065 3
  char   *s = "Invoking witSetBomEntrySingleSource  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2074 3
  char   *s = "Invoking witSetBomEntryUsageRate  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2084 2
  char   *s = "Invoking witSetSubEntryConsRate  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a2098 3
  char   *s = "Invoking witSetSubEntryEarliestPeriod  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2108 3
  char   *s = "Invoking witSetSubEntryExecPenalty  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2118 3
  char   *s = "Invoking witSetSubEntryExpAllowed  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2128 3
  char   *s = "Invoking witSetSubEntryExpNetAversion  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2138 3
  char   *s = "Invoking witSetSubEntryFallout  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2148 3
  char   *s = "Invoking witSetSubEntryFalloutRate  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2158 3
  char   *s = "Invoking witSetSubEntryIntSubVols  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2168 3
  char   *s = "Invoking witSetSubEntryLatestPeriod  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2178 3
  char   *s = "Invoking witSetSubEntryMrpNetAllowed  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2188 3
  char   *s = "Invoking witSetSubEntryNetAllowed  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2198 3
  char   *s = "Invoking witSetSubEntryObj2SubPenalty  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2208 3
  char   *s = "Invoking witSetSubEntryUsageRate  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2219 2
  char   *s = "Invoking witSetSubEntryObj1SubCost  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a2234 2
  char   *s = "Invoking witSetSubEntryOffset  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a2249 2
  char   *s = "Invoking witSetSubEntryRoutingShare  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a2263 3
  char   *s = "Invoking witSetSubEntrySelForDel  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2274 2
  char   *s = "Invoking witSetSubEntrySubCost  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a2289 2
  char   *s = "Invoking witSetSubEntrySubVol  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a2303 3
  char   *s = "Invoking witSetBopEntryByProduct  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2312 3
  char   *s = "Invoking witSetBopEntryEarliestPeriod  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2321 3
  char   *s = "Invoking witSetBopEntryExpAllowed  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2330 3
  char   *s = "Invoking witSetBopEntryExpAversion  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2339 3
  char   *s = "Invoking witSetBopEntryLatestPeriod  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2348 3
  char   *s = "Invoking witSetBopEntryMeSelSplit  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

a2358 2
  char   *s = "Invoking witSetBopEntryOffset  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a2371 3
  char   *s = "Invoking witSetBopEntryProdRate  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
 
d2382 1
a2382 3
  char   *s = "Invoking witSetBopEntryProductRate  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
 
d2398 1
a2398 3
  char   *s = "Invoking witSetBopEntryRoutingShare  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
 
a2412 3
  char   *s = "Invoking witSetBopEntrySelForDel  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

@


1.140
log
@Stochastic Implosion
@
text
@d1181 1
a1181 1
  (WitStochImpMgr::defPeriodStage ());
@


1.139
log
@Stochastic Implosion
@
text
@d175 1
a175 1
    {"set_problem_curScenarioIndex", 1, WitSymTable::witSetCurScenarioIndex,
d884 1
a884 1
WitParseRC WitSymTable::witSetCurScenarioIndex()
d886 1
a886 1
  char   *s = "Invoking witSetCurScenarioIndex  ";
d889 1
a889 1
  myWitRun()->witSetCurScenarioIndex
@


1.138
log
@Stochastic Implosion
@
text
@a258 3
    {"set_problem_perStageIndex", 1, WitSymTable::witSetPerStageIndex,
      {WitDRParmType::intVector}},

d262 3
d364 3
a381 3
    {"set_part_stageIndex", 1, WitSymTable::witSetPartStageIndex,
      {WitDRParmType::intScalar}},

d505 3
a510 3
    {"set_operation_stageIndex", 1, WitSymTable::witSetOperationStageIndex,
      {WitDRParmType::intScalar}},

d702 3
d717 3
a722 3
    {"set_partWithOperation_stageIndex", 1,
      WitSymTable::witSetPartStageIndex, {WitDRParmType::intScalar}},

a728 3
    {"set_partWithOperation_selForDel", 1,
      WitSymTable::witSetPartSelForDel, {WitDRParmType::boolScalar}},

d1164 1
a1164 1
WitParseRC WitSymTable::witSetPerStageIndex()
d1166 1
a1166 2
  int    *iptr;
  char   *s = "Invoking witSetPerStageIndex  ";
d1169 2
a1170 6
  iptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec 
  (WitStochImpMgr::defPerStageIndex ());

  if (iptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetPerStageIndex (iptr);
d1174 1
a1174 1
WitParseRC WitSymTable::witSetPerfPegging()
d1176 2
a1177 1
  char   *s = "Invoking witSetPerfPegging  ";
d1180 6
a1185 2
  myWitRun()->witSetPerfPegging
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
d1530 11
a1602 11
WitParseRC WitSymTable::witSetPartStageIndex()
{
  char   *s = "Invoking witSetPartStageIndex  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetPartStageIndex
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

d2193 1
a2193 1
WitParseRC WitSymTable::witSetOperationSelForDel()
d2195 1
a2195 1
  char   *s = "Invoking witSetOperationSelForDel  ";
d2198 1
a2198 1
  myWitRun()->witSetOperationSelForDel
d2200 1
a2200 1
     WitParser::instance ()->currentAttr()->getBoolArg(0));
d2204 1
a2204 1
WitParseRC WitSymTable::witSetOperationStageIndex()
d2206 1
a2206 1
  char   *s = "Invoking witSetOperationStageIndex  ";
d2209 1
a2209 1
  myWitRun()->witSetOperationStageIndex
d2211 1
a2211 1
     WitParser::instance ()->currentAttr()->getIntArg(0));
@


1.137
log
@Stochastic Implosion
@
text
@d259 3
a301 3
    {"set_problem_stageIndex", 1, WitSymTable::witSetStageIndex,
      {WitDRParmType::intVector}},

d1164 15
a1309 15
WitParseRC WitSymTable::witSetStageIndex()
{
  int    *iptr;
  char   *s = "Invoking witSetStageIndex  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  iptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec 
  (WitStochImpMgr::defStageIndex ());

  if (iptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetStageIndex (iptr);
  return 0;
}

@


1.136
log
@Stochastic Implosion
@
text
@d28 1
d299 3
d1295 15
@


1.135
log
@Stochastic Implosion
@
text
@d375 1
a375 1
    {"set_part_stageNo", 1, WitSymTable::witSetPartStageNo,
d504 1
a504 1
    {"set_operation_stageNo", 1, WitSymTable::witSetOperationStageNo,
d713 2
a714 2
    {"set_partWithOperation_stageNo", 1,
      WitSymTable::witSetPartStageNo, {WitDRParmType::intScalar}},
d1573 1
a1573 1
WitParseRC WitSymTable::witSetPartStageNo()
d1575 1
a1575 1
  char   *s = "Invoking witSetPartStageNo  ";
d1578 1
a1578 1
  myWitRun()->witSetPartStageNo
d2185 1
a2185 1
WitParseRC WitSymTable::witSetOperationStageNo()
d2187 1
a2187 1
  char   *s = "Invoking witSetOperationStageNo  ";
d2190 1
a2190 1
  myWitRun()->witSetOperationStageNo
@


1.134
log
@Stochastic Implosion
@
text
@d174 1
a174 1
    {"set_problem_curScenarioNo", 1, WitSymTable::witSetCurScenarioNo,
d880 1
a880 1
WitParseRC WitSymTable::witSetCurScenarioNo()
d882 1
a882 1
  char   *s = "Invoking witSetCurScenarioNo  ";
d885 1
a885 1
  myWitRun()->witSetCurScenarioNo
@


1.133
log
@Stochastic Implosion
@
text
@a365 3
    {"set_part_recourseStage", 1, WitSymTable::witSetPartRecourseStage,
      {WitDRParmType::boolScalar}},

d375 3
d501 1
a501 2
    {"set_operation_recourseStage", 1,
          WitSymTable::witSetOperationRecourseStage,
d504 2
a505 2
    {"set_operation_selForDel", 1, WitSymTable::witSetOperationSelForDel,
      {WitDRParmType::boolScalar}},
a703 3
    {"set_partWithOperation_recourseStage", 1,
      WitSymTable::witSetPartRecourseStage, {WitDRParmType::boolScalar}},

d713 3
a1535 11
WitParseRC WitSymTable::witSetPartRecourseStage()
{
  char   *s = "Invoking witSetPartRecourseStage  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetPartRecourseStage
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

d1573 11
d2174 1
a2174 1
WitParseRC WitSymTable::witSetOperationRecourseStage()
d2176 1
a2176 1
  char   *s = "Invoking witSetOperationRecourseStage  ";
d2179 1
a2179 1
  myWitRun()->witSetOperationRecourseStage
d2185 1
a2185 1
WitParseRC WitSymTable::witSetOperationSelForDel()
d2187 1
a2187 1
  char   *s = "Invoking witSetOperationSelForDel  ";
d2190 1
a2190 1
  myWitRun()->witSetOperationSelForDel
d2192 1
a2192 1
     WitParser::instance ()->currentAttr()->getBoolArg(0));
@


1.132
log
@Stochastic Implosion
@
text
@d174 3
a285 3
    {"set_problem_scenarioIndex", 1, WitSymTable::witSetScenarioIndex,
      {WitDRParmType::intScalar}},

d881 10
a1251 10
WitParseRC WitSymTable::witSetScenarioIndex()
{
  char   *s = "Invoking witSetScenarioIndex  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetScenarioIndex
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

@


1.131
log
@ASAP Pegging Order
@
text
@d274 3
a285 3
    {"set_problem_scenarioProb", 1, WitSymTable::witSetScenarioProb,
      {WitDRParmType::doubleScalar}},

d1212 10
a1251 10
WitParseRC WitSymTable::witSetScenarioProb()
{
  char   *s = "Invoking witSetScenarioProb  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetScenarioProb
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

@


1.130
log
@ASAP Pegging Order
@
text
@d336 1
a336 1
    {"set_part_asapPip", 1, WitSymTable::witSetPartAsapPip,
d675 2
a676 2
    {"set_partWithOperation_asapPip", 1,
      WitSymTable::witSetPartAsapPip, {WitDRParmType::boolScalar}},
d1412 1
a1412 1
WitParseRC WitSymTable::witSetPartAsapPip()
d1414 1
a1414 1
  char   *s = "Invoking witSetPartAsapPip  ";
d1417 1
a1417 1
  myWitRun()->witSetPartAsapPip
@


1.129
log
@Stochastic Implosion
@
text
@d336 3
d675 3
d1412 11
@


1.128
log
@Stochastic Implosion
@
text
@d298 1
a298 1
    {"set_problem_stochDataMode", 1, WitSymTable::witSetStochDataMode,
d1286 1
a1286 1
WitParseRC WitSymTable::witSetStochDataMode()
d1288 1
a1288 1
  char   *s = "Invoking witSetStochDataMode  ";
d1291 1
a1291 1
  myWitRun()->witSetStochDataMode
@


1.127
log
@Stochastic Implosion
@
text
@a273 3
    {"set_problem_probability", 1, WitSymTable::witSetProbability,
      {WitDRParmType::doubleScalar}},

d283 3
a1205 10
WitParseRC WitSymTable::witSetProbability()
{
  char   *s = "Invoking witSetProbability  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetProbability
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

d1236 10
@


1.126
log
@Stochastic Implosion
@
text
@d363 3
d498 4
d699 3
d1520 11
d2158 11
@


1.125
log
@Stochastic Implosion
@
text
@d274 3
a285 3
    {"set_problem_scenarioProb", 1, WitSymTable::witSetScenarioProb,
      {WitDRParmType::doubleScalar}},

d1196 10
a1235 10
WitParseRC WitSymTable::witSetScenarioProb()
{
  char   *s = "Invoking witSetScenarioProb  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetScenarioProb
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

@


1.124
log
@Stochastic Implosion
@
text
@d298 1
a298 1
    {"set_problem_stochasticMode", 1, WitSymTable::witSetStochasticMode,
d1276 1
a1276 1
WitParseRC WitSymTable::witSetStochasticMode()
d1278 1
a1278 1
  char   *s = "Invoking witSetStochasticMode  ";
d1281 1
a1281 1
  myWitRun()->witSetStochasticMode
@


1.123
log
@Stochastic Implosion
@
text
@d298 1
a298 1
    {"set_problem_stochImpMode", 1, WitSymTable::witSetStochImpMode,
d1276 1
a1276 1
WitParseRC WitSymTable::witSetStochImpMode()
d1278 1
a1278 1
  char   *s = "Invoking witSetStochImpMode  ";
d1281 1
a1281 1
  myWitRun()->witSetStochImpMode
@


1.122
log
@Stochastic Implosion
@
text
@a273 3
    {"set_problem_probability", 1, WitSymTable::witSetProbability,
      {WitDRParmType::doubleScalar}},

d283 3
a1195 10
WitParseRC WitSymTable::witSetProbability()
{
  char   *s = "Invoking witSetProbability  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetProbability
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

d1226 10
@


1.121
log
@Stochastic Implosion
@
text
@d274 3
d1196 10
@


1.120
log
@Stochastic implosion.
@
text
@d280 3
d1213 10
@


1.119
log
@Stochastic Implosion.
@
text
@d292 1
a292 1
    {"set_problem_stochImpActive", 1, WitSymTable::witSetStochImpActive,
d1250 1
a1250 1
WitParseRC WitSymTable::witSetStochImpActive()
d1252 1
a1252 1
  char   *s = "Invoking witSetStochImpActive  ";
d1255 1
a1255 1
  myWitRun()->witSetStochImpActive
@


1.118
log
@Stochastic implosion.
@
text
@d292 3
d1250 10
@


1.117
log
@Stochastic implosion.
@
text
@d222 3
d1016 10
@


1.116
log
@[disallowing scrap]
@
text
@d286 3
d1224 10
@


1.115
log
@[disallowed backlog]
@
text
@d348 3
d677 3
d1445 11
@


1.114
log
@[disallowed backlog]
@
text
@a370 3
    {"set_demand_backlogAllowed", 1, WitSymTable::witSetDemandBacklogAllowed,
      {WitDRParmType::boolScalar}},

d425 3
a1554 12
WitParseRC WitSymTable::witSetDemandBacklogAllowed()
{
  char   *s = "Invoking witSetDemandBacklogAllowed  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetDemandBacklogAllowed
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

d1804 12
@


1.113
log
@[disallowed backlog]
@
text
@d371 3
a391 3
    {"set_demand_disallowBacklog", 1, WitSymTable::witSetDemandDisallowBacklog,
      {WitDRParmType::boolScalar}},

d1555 12
a1668 12
WitParseRC WitSymTable::witSetDemandDisallowBacklog()
{
  char   *s = "Invoking witSetDemandDisallowBacklog  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetDemandDisallowBacklog
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

@


1.112
log
@{backlog avoidance]
@
text
@a370 3
    {"set_demand_backlogAllowed", 1, WitSymTable::witSetDemandBacklogAllowed,
      {WitDRParmType::boolScalar}},

d389 3
a1554 12
WitParseRC WitSymTable::witSetDemandBacklogAllowed()
{
  char   *s = "Invoking witSetDemandBacklogAllowed  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetDemandBacklogAllowed
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

d1657 12
@


1.111
log
@[backlog avoidance]
@
text
@d1560 1
a1560 1
  myWitRun()->witSetDemandPrefBuildAhead
@


1.110
log
@[backlog avoidance]
@
text
@d371 3
d1555 12
@


1.109
log
@[backlog avoidance]
@
text
@a163 3
    {"set_problem_backlogAllowed", 1, WitSymTable::witSetBacklogAllowed,
      {WitDRParmType::boolScalar}},

a810 10
WitParseRC WitSymTable::witSetBacklogAllowed()
{
  char   *s = "Invoking witSetBacklogAllowed  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetBacklogAllowed
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

@


1.108
log
@External opt implosion.
@
text
@d164 3
d814 10
@


1.107
log
@External opt implosion.
@
text
@a160 3
    {"set_problem_allowIntCons", 1, WitSymTable::witSetAllowIntCons,
      {WitDRParmType::boolScalar}},

d210 3
a800 10
WitParseRC WitSymTable::witSetAllowIntCons()
{
  char   *s = "Invoking witSetAllowIntCons  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetAllowIntCons
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

d961 10
@


1.106
log
@External opt implosion.
@
text
@d161 3
a176 3
    {"set_problem_enforceIntCons", 1, WitSymTable::witSetEnforceIntCons,
      {WitDRParmType::boolScalar}},

d801 10
a850 10
WitParseRC WitSymTable::witSetEnforceIntCons()
{
  char   *s = "Invoking witSetEnforceIntCons  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetEnforceIntCons
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

@


1.105
log
@External opt implosion.
@
text
@d174 3
d841 10
@


1.104
log
@Heuristic search increment.
@
text
@d392 1
a392 1
    {"set_demand_intConShipVols", 1, WitSymTable::witSetDemandIntConShipVols,
d451 2
a452 2
    {"set_operation_intConExecVols", 1,
          WitSymTable::witSetOperationIntConExecVols,
d564 2
a565 2
    {"set_subEntry_intConSubVols", 1,
      WitSymTable::witSetSubEntryIntConSubVols, {WitDRParmType::boolScalar}},
d1665 1
a1665 1
WitParseRC WitSymTable::witSetDemandIntConShipVols()
d1667 1
a1667 1
  char   *s = "Invoking witSetDemandIntConShipVols  ";
d1670 1
a1670 1
  myWitRun()->witSetDemandIntConShipVols
d1945 1
a1945 1
WitParseRC WitSymTable::witSetOperationIntConExecVols()
d1947 1
a1947 1
  char   *s = "Invoking witSetOperationIntConExecVols  ";
d1950 1
a1950 1
  myWitRun()->witSetOperationIntConExecVols
d2388 1
a2388 1
WitParseRC WitSymTable::witSetSubEntryIntConSubVols()
d2390 1
a2390 1
  char   *s = "Invoking witSetSubEntryIntConSubVols  ";
d2393 1
a2393 1
  myWitRun()->witSetSubsBomEntryIntConSubVols
@


1.103
log
@Heuristic search increment.
@
text
@a188 3
    {"set_problem_heurSearchInc", 1, WitSymTable::witSetHeurSearchInc,
      {WitDRParmType::doubleScalar}},

d416 3
a887 10
WitParseRC WitSymTable::witSetHeurSearchInc()
{
  char   *s = "Invoking witSetHeurSearchInc  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetHeurSearchInc
    (WitParser::instance ()->currentAttr()->getDoubleArg(0));
  return 0;
}

d1764 12
@


1.102
log
@NSTN residualVol.
@
text
@d189 3
d888 10
@


1.101
log
@NSTN residualVols.
@
text
@d207 3
d945 10
@


1.100
log
@Integrality constraints.
@
text
@d222 3
d992 10
@


1.99
log
@Removed optimizing implosion with lot sizes.
@
text
@d386 1
a386 1
    {"set_demand_intShipVols", 1, WitSymTable::witSetDemandIntShipVols,
d442 2
a443 2
    {"set_operation_intExecVols", 1,
          WitSymTable::witSetOperationIntExecVols,
d555 2
a556 2
    {"set_subEntry_intSubVols", 1,
      WitSymTable::witSetSubEntryIntSubVols, {WitDRParmType::boolScalar}},
d1636 1
a1636 1
WitParseRC WitSymTable::witSetDemandIntShipVols()
d1638 1
a1638 1
  char   *s = "Invoking witSetDemandIntShipVols  ";
d1641 1
a1641 1
  myWitRun()->witSetDemandIntShipVols
d1904 1
a1904 1
WitParseRC WitSymTable::witSetOperationIntExecVols()
d1906 1
a1906 1
  char   *s = "Invoking witSetOperationIntExecVols  ";
d1909 1
a1909 1
  myWitRun()->witSetOperationIntExecVols
d2347 1
a2347 1
WitParseRC WitSymTable::witSetSubEntryIntSubVols()
d2349 1
a2349 1
  char   *s = "Invoking witSetSubEntryIntSubVols  ";
d2352 1
a2352 1
  myWitRun()->witSetSubsBomEntryIntSubVols
@


1.98
log
@Opt implosion with integrality constraints.
@
text
@a236 3
    {"set_problem_optWithLotSizes", 1, WitSymTable::witSetOptWithLotSizes,
      {WitDRParmType::boolScalar}},

a1038 10
WitParseRC WitSymTable::witSetOptWithLotSizes()
{
  char   *s = "Invoking witSetOptWithLotSizes  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetOptWithLotSizes
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

@


1.97
log
@GPIP migration.
@
text
@d389 3
d445 4
d558 3
d1649 12
d1917 11
d2360 13
@


1.96
log
@GPIP migration
@
text
@a612 3
    {"set_bopEntry_pipShare", 1,
      WitSymTable::witSetBopEntryPipShare, {WitDRParmType::doubleVector}},

a2577 18
WitParseRC WitSymTable::witSetBopEntryPipShare()
{
  double * dptr;
  char   *s = "Invoking witSetBopEntryPipShare  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
 
  dptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getDblVec
    (WitBopEntry::defPipShare());
  if (dptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetBopEntryPipShare
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     dptr);

  return 0;
}

@


1.95
log
@Removed the postSolveRecovery attribute.
@
text
@a185 3
    {"set_problem_groupPipMode", 1, WitSymTable::witSetGroupPipMode,
      {WitDRParmType::boolScalar}},

a864 10
WitParseRC WitSymTable::witSetGroupPipMode()
{
  char   *s = "Invoking witSetGroupPipMode  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetGroupPipMode
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

@


1.94
log
@New PIP pegging order.
@
text
@a264 3
    {"set_problem_postSolveRecovery", 1, WitSymTable::witSetPostSolveRecovery,
      {WitDRParmType::boolScalar}},

a1128 10
WitParseRC WitSymTable::witSetPostSolveRecovery()
{
  char   *s = "Invoking witSetPostSolveRecovery  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetPostSolveRecovery
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

@


1.93
log
@Updated the copyright date on all source files.
@
text
@d219 3
d981 10
@


1.92
log
@GPIP
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.91
log
@Began [shared-resource pegging]
@
text
@d186 3
a282 3
    {"set_problem_srpMode", 1, WitSymTable::witSetSrpMode,
      {WitDRParmType::boolScalar}},

d868 10
a1188 10
WitParseRC WitSymTable::witSetSrpMode()
{
  char   *s = "Invoking witSetSrpMode  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetSrpMode
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

@


1.90
log
@[exceptions]
@
text
@d280 3
d1179 10
@


1.89
log
@[exceptions]
@
text
@d25 1
a25 1
#include <witParse.h>
@


1.88
log
@[exceptions]
@
text
@a21 1
#include <witLexer.h>
@


1.87
log
@Changed names of obj1 attributes, e.g., obj1ScrapCost to scrapCost.
@
text
@d107 1
a107 1
  for (i = 0; symbolTable[i].rule != NULL; i++)
d109 2
a110 2
    entryPtr = new WitSymTabEntry(symbolTable[i].nparms,
         symbolTable[i].func, &symbolTable[i].parmTypes[0]);
d113 1
a113 1
    theDictionary_.insert( SymTableDictPair( symbolTable[i].rule, entryPtr ) );
d130 1
a130 1
  WitSymTabEntry::witSymbolDef  WitSymTable::symbolTable[] = {
d2665 1
a2665 1
  pst(s), index(0)
d2675 1
a2675 1
  if (index < sizeof WitSymTable::symbolTable
d2677 2
a2678 2
      return(&WitSymTable::symbolTable[index++]);
  return (&WitSymTable::symbolTable[index = 0]);
@


1.86
log
@Made opt implosion use COIN unconditionally when COIN_BUILD is defined.
@
text
@d343 3
d352 3
d377 4
d420 3
d431 3
d453 1
a453 2
    {"set_operation_obj1ExecCost", 1,
      WitSymTable::witSetOperationObj1ExecCost,
d582 3
d656 3
d671 3
d1353 1
a1353 1
    (WitPart::defObj1ScrapCost());
d1368 1
a1368 1
    (WitMaterial::defObj1StockCost());
d1401 15
d1466 15
d1587 16
d1650 1
a1650 1
    (WitDemand::defObj1CumShipReward());
d1666 1
a1666 1
    (WitDemand::defObj1ShipReward());
d1772 16
d1843 15
d1951 1
a1951 1
    (WitOperation::defObj1ExecCost());
d2403 1
a2403 1
    (WitSubEntry::defObj1SubCost());
d2460 17
@


1.85
log
@Vector PropRtg.
@
text
@a277 3
    {"set_problem_solverIsCoin", 1, WitSymTable::witSetSolverIsCoin,
      {WitDRParmType::boolScalar}},

a1142 10
WitParseRC WitSymTable::witSetSolverIsCoin()
{
  char   *s = "Invoking witSetSolverIsCoin  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetSolverIsCoin
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

@


1.84
log
@Vector PropRt.
@
text
@d343 1
a343 1
    {"set_part_propRt", 1, WitSymTable::witSetPartPropRt,
d498 1
a498 1
    {"set_bomEntry_propRt", 1, WitSymTable::witSetBomEntryPropRt,
d638 2
a639 2
    {"set_partWithOperation_propRt", 1,
      WitSymTable::witSetPartPropRt, {WitDRParmType::boolVector}},
d1376 1
a1376 1
WitParseRC WitSymTable::witSetPartPropRt()
d1379 1
a1379 1
  char   *s = "Invoking witSetPartPropRt  ";
d1382 1
a1382 1
    (WitPart::defPropRt());
d1385 1
a1385 1
  myWitRun()->witSetPartPropRt
d2080 1
a2080 1
WitParseRC WitSymTable::witSetBomEntryPropRt()
d2083 1
a2083 1
  char   *s = "Invoking witSetBomEntryPropRt  ";
d2086 1
a2086 1
    (WitBomEntry::defPropRt());
d2089 1
a2089 1
  myWitRun()->witSetBomEntryPropRt
@


1.83
log
@Vector PropRt.
@
text
@d498 3
d2080 16
@


1.82
log
@Vector Prop-Rt.
@
text
@d35 2
a36 2
#include <InScalRA.h>
#include <InVecRA.h>
@


1.81
log
@Vector Prop-Rt.
@
text
@d1375 1
a1375 1
  int * iptr;
d1378 3
a1380 3
  iptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getIntVec
    (WitPart::defPropRt()? 1: 0);
  if (iptr == NULL) return PERIOD_ERROR;
d1383 1
a1383 1
    (WitParser::instance ()->currentEntity()->getPartName(), iptr);
@


1.80
log
@Vector Prop-Rt.
@
text
@d636 1
a636 1
      WitSymTable::witSetPartPropRt, {WitDRParmType::intVector}},
@


1.79
log
@Vector PropRt.
@
text
@a345 7
#if 0

    {"set_part_propRt", 1, WitSymTable::witSetPartPropRt,
      {WitDRParmType::intVector}},

#endif

@


1.78
log
@Vector propRt.
@
text
@d344 5
d351 2
@


1.77
log
@Pegged Critical List.
@
text
@d343 3
d635 3
d1373 14
@


1.76
log
@Pegged Critical List
@
text
@d250 2
a251 2
    {"set_problem_pgdCritListNeeded", 1, 
      WitSymTable::witSetPgdCritListNeeded,
d1046 1
a1046 1
WitParseRC WitSymTable::witSetPgdCritListNeeded()
d1048 1
a1048 1
  char   *s = "Invoking witSetPgdCritListNeeded  ";
d1051 1
a1051 1
  myWitRun()->witSetPgdCritListNeeded
@


1.75
log
@Pegged Critical List.
@
text
@a167 4
    {"set_problem_compPgdCritList", 1, 
      WitSymTable::witSetCompPgdCritList,
      {WitDRParmType::boolScalar}},

d250 4
a775 10
WitParseRC WitSymTable::witSetCompPgdCritList()
{
  char   *s = "Invoking witSetCompPgdCritList  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetCompPgdCritList
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

d1046 10
@


1.74
log
@Tie Breaking Prop-Rt.
@
text
@d168 4
d776 10
@


1.73
log
@Changed terminology from "low priority proportionate routing" to
"tie breaking proportionate routing".
@
text
@d28 1
a28 1
#include <PipSysMgr.h>
d1589 1
a1589 1
     myWitRun ()->myProblem ()->myPipSysMgr ()->shipSeqShipPer (),
d1592 1
a1592 1
  myWitRun ()->myProblem ()->myPipSysMgr ()->setShipSeqShipPer (-1);
d1602 1
a1602 1
  myWitRun ()->myProblem ()->myPipSysMgr ()->setShipSeqShipPer (
@


1.72
log
@Continued implmentation of low priority proportionate routing.
@
text
@a207 3
    {"set_problem_lowPriPropRt", 1, WitSymTable::witSetLowPriPropRt,
      {WitDRParmType::boolScalar}},

d289 3
a901 10
WitParseRC WitSymTable::witSetLowPriPropRt()
{
  char   *s = "Invoking witSetLowPriPropRt  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetLowPriPropRt
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

d1173 10
@


1.71
log
@Began work on [propRouting as penExec tie-breaker].
@
text
@d208 3
a246 3
    {"set_problem_penExecOverPropRt", 1, WitSymTable::witSetPenExecOverPropRt,
      {WitDRParmType::boolScalar}},

d902 10
a1031 10
WitParseRC WitSymTable::witSetPenExecOverPropRt()
{
  char   *s = "Invoking witSetPenExecOverPropRt  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetPenExecOverPropRt
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

@


1.70
log
@Added "solverIsCoin" attribute.
@
text
@d244 3
d1022 10
@


1.69
log
@PIP.
@
text
@d274 3
d1116 10
@


1.68
log
@Continued implementation of PIP.
@
text
@d584 1
a584 1
      WitSymTable::witSetBopEntryPipShare, {WitDRParmType::doubleScalar}},
d2400 1
d2403 4
d2411 2
a2412 1
     WitParser::instance ()->currentAttr()->getDoubleArg(0));
@


1.67
log
@Double Precision.
@
text
@d583 3
d2395 12
@


1.66
log
@Double Precision.
@
text
@d190 3
d830 10
@


1.65
log
@Double Precision.
@
text
@d756 1
a756 1
    (WitParser::instance ()->currentAttr()->getFloatArg(0));
d806 1
a806 1
    (WitParser::instance ()->currentAttr()->getFloatArg(0));
d846 1
a846 1
    (WitParser::instance ()->currentAttr()->getFloatArg(0));
d876 1
a876 1
    (WitParser::instance ()->currentAttr()->getFloatArg(0));
d936 1
a936 1
    (WitParser::instance ()->currentAttr()->getFloatArg(0));
d946 1
a946 1
    (WitParser::instance ()->currentAttr()->getFloatArg(0));
d956 1
a956 1
    (WitParser::instance ()->currentAttr()->getFloatArg(0));
d966 1
a966 1
    (WitParser::instance ()->currentAttr()->getFloatArg(0));
d1016 1
a1016 1
    (WitParser::instance ()->currentAttr()->getFloatArg(0));
d1197 1
a1197 1
    (WitParser::instance ()->currentAttr()->getFloatArg(0));
d1272 1
a1272 1
  double *fptr;
d1276 1
a1276 1
  fptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d1278 1
a1278 1
  if (fptr == NULL) return PERIOD_ERROR;
d1281 1
a1281 1
    (WitParser::instance ()->currentEntity()->getPartName(), fptr);
d1287 1
a1287 1
  double * fptr;
d1291 1
a1291 1
  fptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d1293 1
a1293 1
  if (fptr == NULL) return PERIOD_ERROR;
d1296 1
a1296 1
    (WitParser::instance ()->currentEntity()->getPartName(), fptr);
d1336 1
a1336 1
    arg2 = vecPtr->getFltVec (WitBoundSet::defHardLB());
d1344 1
a1344 1
    arg3 = vecPtr->getFltVec (WitBoundSet::defSoftLB());
d1352 1
a1352 1
    arg4 = vecPtr->getFltVec (WitBoundSet::defHardUB());
d1363 1
a1363 1
  double * fptr;
d1366 1
a1366 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d1368 1
a1368 1
  if (fptr == NULL) return PERIOD_ERROR;
d1371 1
a1371 1
    (WitParser::instance ()->currentEntity()->getPartName(), fptr);
d1393 1
a1393 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d1440 1
a1440 1
    arg3 = vecPtr->getFltVec (WitBoundSet::defHardLB());
d1447 1
a1447 1
    arg4 = vecPtr->getFltVec (WitBoundSet::defSoftLB());
d1454 1
a1454 1
    arg5 = vecPtr->getFltVec (WitBoundSet::defHardUB());
d1469 1
a1469 1
  double * fptr;
d1473 1
a1473 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d1475 1
a1475 1
  if (fptr == NULL) return PERIOD_ERROR;
d1479 1
a1479 1
     WitParser::instance ()->currentEntity()->getDemandName(), fptr);
d1503 1
a1503 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d1509 1
a1509 1
  double * fptr;
d1513 1
a1513 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d1515 1
a1515 1
  if (fptr == NULL) return PERIOD_ERROR;
d1519 1
a1519 1
     WitParser::instance ()->currentEntity()->getDemandName(), fptr);
d1525 1
a1525 1
  double * fptr;
d1529 1
a1529 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d1531 1
a1531 1
  if (fptr == NULL) return PERIOD_ERROR;
d1535 1
a1535 1
     WitParser::instance ()->currentEntity()->getDemandName(), fptr);
d1548 1
a1548 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d1638 1
a1638 1
  double * fptr;
d1642 1
a1642 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d1644 1
a1644 1
  if (fptr == NULL) return PERIOD_ERROR;
d1648 1
a1648 1
     WitParser::instance ()->currentEntity()->getDemandName(), fptr);
d1665 1
a1665 1
    arg2 = vecPtr->getFltVec (WitBoundSet::defHardLB());
d1672 1
a1672 1
    arg3 = vecPtr->getFltVec (WitBoundSet::defSoftLB());
d1679 1
a1679 1
    arg4 = vecPtr->getFltVec (WitBoundSet::defHardUB());
d1698 1
a1698 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d1704 1
a1704 1
  double * fptr;
d1708 1
a1708 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d1710 1
a1710 1
  if (fptr == NULL) return PERIOD_ERROR;
d1713 1
a1713 1
    (WitParser::instance ()->currentEntity()->getOperationName(), fptr);
d1719 1
a1719 1
  double * fptr;
d1723 1
a1723 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d1725 1
a1725 1
  if (fptr == NULL) return PERIOD_ERROR;
d1728 1
a1728 1
    (WitParser::instance ()->currentEntity()->getOperationName(), fptr);
d1734 1
a1734 1
  double * fptr;
d1738 1
a1738 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d1740 1
a1740 1
  if (fptr == NULL) return PERIOD_ERROR;
d1743 1
a1743 1
    (WitParser::instance ()->currentEntity()->getOperationName(), fptr);
d1749 1
a1749 1
  double * fptr;
d1753 1
a1753 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d1755 1
a1755 1
  if (fptr == NULL) return PERIOD_ERROR;
d1758 1
a1758 1
    (WitParser::instance ()->currentEntity()->getOperationName(), fptr);
d1764 1
a1764 1
  double * fptr;
d1768 1
a1768 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d1770 1
a1770 1
  if (fptr == NULL) return PERIOD_ERROR;
d1773 1
a1773 1
    (WitParser::instance ()->currentEntity()->getOperationName(), fptr);
d1779 1
a1779 1
  double * fptr;
d1783 1
a1783 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d1785 1
a1785 1
  if (fptr == NULL) return PERIOD_ERROR;
d1788 1
a1788 1
    (WitParser::instance ()->currentEntity()->getOperationName(), fptr);
d1799 1
a1799 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d1842 1
a1842 1
  double * fptr;
d1846 1
a1846 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d1848 1
a1848 1
  if (fptr == NULL) return PERIOD_ERROR;
d1851 1
a1851 1
    (WitParser::instance ()->currentEntity()->getOperationName(), fptr);
d1857 1
a1857 1
  double * fptr;
d1861 1
a1861 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d1863 1
a1863 1
  if (fptr == NULL) return PERIOD_ERROR;
d1866 1
a1866 1
    (WitParser::instance ()->currentEntity()->getOperationName(), fptr);
d1872 1
a1872 1
  double * fptr;
d1876 1
a1876 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d1878 1
a1878 1
  if (fptr == NULL) return PERIOD_ERROR;
d1881 1
a1881 1
    (WitParser::instance ()->currentEntity()->getOperationName(), fptr);
d1887 1
a1887 1
  double * fptr;
d1891 1
a1891 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d1893 1
a1893 1
  if (fptr == NULL) return PERIOD_ERROR;
d1897 1
a1897 1
     WitParser::instance ()->currentEntity()->getBomEntryIndex(), fptr);
d1921 1
a1921 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d1945 1
a1945 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d1975 1
a1975 1
  double * fptr;
d1979 1
a1979 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d1981 1
a1981 1
  if (fptr == NULL) return PERIOD_ERROR;
d1985 1
a1985 1
     WitParser::instance ()->currentEntity()->getBomEntryIndex(), fptr);
d2003 1
a2003 1
  double * fptr;
d2007 1
a2007 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d2009 1
a2009 1
  if (fptr == NULL) return PERIOD_ERROR;
d2013 1
a2013 1
     WitParser::instance ()->currentEntity()->getBomEntryIndex(), fptr);
d2049 1
a2049 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d2055 1
a2055 1
  double * fptr;
d2059 1
a2059 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d2061 1
a2061 1
  if (fptr == NULL) return PERIOD_ERROR;
d2066 1
a2066 1
     WitParser::instance ()->currentEntity()->getSubEntryIndex(), fptr);
d2092 1
a2092 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d2118 1
a2118 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d2144 1
a2144 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d2196 1
a2196 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d2209 1
a2209 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d2215 1
a2215 1
  double * fptr;
d2219 1
a2219 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d2221 1
a2221 1
  if (fptr == NULL) return PERIOD_ERROR;
d2226 1
a2226 1
     WitParser::instance ()->currentEntity()->getSubEntryIndex(), fptr);
d2232 1
a2232 1
  double * fptr;
d2236 1
a2236 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d2238 1
a2238 1
  if (fptr == NULL) return PERIOD_ERROR;
d2243 1
a2243 1
     WitParser::instance ()->currentEntity()->getSubEntryIndex(), fptr);
d2249 1
a2249 1
  double * fptr;
d2253 1
a2253 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d2255 1
a2255 1
  if (fptr == NULL) return PERIOD_ERROR;
d2260 1
a2260 1
     WitParser::instance ()->currentEntity()->getSubEntryIndex(), fptr);
d2279 1
a2279 1
  double * fptr;
d2283 1
a2283 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d2285 1
a2285 1
  if (fptr == NULL) return PERIOD_ERROR;
d2290 1
a2290 1
     WitParser::instance ()->currentEntity()->getSubEntryIndex(), fptr);
d2338 1
a2338 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d2368 1
a2368 1
  double * fptr;
d2372 1
a2372 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d2374 1
a2374 1
  if (fptr == NULL) return PERIOD_ERROR;
d2378 1
a2378 1
     WitParser::instance ()->currentEntity()->getBopEntryIndex(), fptr);
d2390 1
a2390 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d2396 1
a2396 1
  double * fptr;
d2400 1
a2400 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d2402 1
a2402 1
  if (fptr == NULL) return PERIOD_ERROR;
d2407 1
a2407 1
     fptr);
d2414 1
a2414 1
  double * fptr;
d2418 1
a2418 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getFltVec
d2420 1
a2420 1
  if (fptr == NULL) return PERIOD_ERROR;
d2425 1
a2425 1
     fptr);
@


1.64
log
@Double Precision.
@
text
@d166 1
a166 1
      {WitDRParmType::floatScalar}},
d182 1
a182 1
      {WitDRParmType::floatScalar}},
d194 1
a194 1
      {WitDRParmType::floatScalar}},
d203 1
a203 1
      {WitDRParmType::floatScalar}},
d221 1
a221 1
      {WitDRParmType::floatScalar}},
d224 1
a224 1
      {WitDRParmType::floatScalar}},
d227 1
a227 1
      {WitDRParmType::floatScalar}},
d230 1
a230 1
      {WitDRParmType::floatScalar}},
d245 1
a245 1
      {WitDRParmType::floatScalar}},
d299 1
a299 1
      {WitDRParmType::floatScalar}},
d322 1
a322 1
      {WitDRParmType::floatVector}},
d325 1
a325 1
      {WitDRParmType::floatVector}},
d337 1
a337 1
      {WitDRParmType::floatVector}},
d343 1
a343 1
      {WitDRParmType::floatScalar}},
d359 1
a359 1
      {WitDRParmType::floatVector}},
d365 1
a365 1
      {WitDRParmType::floatScalar}},
d369 1
a369 1
      {WitDRParmType::floatVector}},
d372 1
a372 1
      {WitDRParmType::floatVector}},
d376 1
a376 1
      {WitDRParmType::floatScalar}},
d398 1
a398 1
      {WitDRParmType::floatVector}},
d406 1
a406 1
      {WitDRParmType::floatScalar}},
d409 1
a409 1
      {WitDRParmType::floatVector}},
d412 1
a412 1
      {WitDRParmType::floatVector}},
d416 1
a416 1
      {WitDRParmType::floatVector}},
d419 1
a419 1
      {WitDRParmType::floatVector}},
d422 1
a422 1
      {WitDRParmType::floatVector}},
d426 1
a426 1
      {WitDRParmType::floatVector}},
d429 1
a429 1
      {WitDRParmType::floatScalar}},
d442 1
a442 1
      {WitDRParmType::floatVector}},
d445 1
a445 1
      WitSymTable::witSetOperationCycleTime34, {WitDRParmType::floatVector}},
d448 1
a448 1
      WitSymTable::witSetOperationExecVol, {WitDRParmType::floatVector}},
d454 1
a454 1
      {WitDRParmType::floatVector}}, 
d461 1
a461 1
      {WitDRParmType::floatScalar}},
d467 1
a467 1
      {WitDRParmType::floatScalar}},
d477 1
a477 1
      {WitDRParmType::floatVector}},
d483 1
a483 1
      {WitDRParmType::floatVector}},
d492 1
a492 1
      {WitDRParmType::floatScalar}}, 
d500 1
a500 1
      {WitDRParmType::floatVector}},  
d507 1
a507 1
      {WitDRParmType::floatScalar}},
d513 1
a513 1
      WitSymTable::witSetSubEntryExpNetAversion, {WitDRParmType::floatScalar}},
d519 1
a519 1
      {WitDRParmType::floatScalar}},
d532 1
a532 1
      {WitDRParmType::floatScalar}},  
d536 1
a536 1
      {WitDRParmType::floatVector}},
d539 1
a539 1
      WitSymTable::witSetSubEntryObj2SubPenalty, {WitDRParmType::floatScalar}},
d543 1
a543 1
      {WitDRParmType::floatVector}},
d546 1
a546 1
      {WitDRParmType::floatVector}},
d552 1
a552 1
      {WitDRParmType::floatVector}}, 
d568 1
a568 1
      WitSymTable::witSetBopEntryExpAversion, {WitDRParmType::floatScalar}},
d578 1
a578 1
      {WitDRParmType::floatVector}},
d581 1
a581 1
      WitSymTable::witSetBopEntryProdRate, {WitDRParmType::floatScalar}},
d584 1
a584 1
      WitSymTable::witSetBopEntryProductRate, {WitDRParmType::floatVector}},
d587 1
a587 1
      WitSymTable::witSetBopEntryRoutingShare, {WitDRParmType::floatVector}},
d608 1
a608 1
      WitSymTable::witSetPartObj1ScrapCost, {WitDRParmType::floatVector}},
d611 1
a611 1
      WitSymTable::witSetPartObj1StockCost, {WitDRParmType::floatVector}},
d623 1
a623 1
      WitSymTable::witSetPartSupplyVol, {WitDRParmType::floatVector}},
d629 1
a629 1
      WitSymTable::witSetPartUnitCost, {WitDRParmType::floatScalar}},
@


1.63
log
@Double Precision.
@
text
@d50 1
a50 1
WitSymTabEntry::WitSymTabEntry(int n, functionP fp, pType pt[]):
d69 1
a69 1
pType *WitSymTabEntry::parmTypes() const
d133 1
a133 1
      {String, String}},
d136 1
a136 1
      {String, String}},
d139 1
a139 1
      {String, String}},
d142 1
a142 1
      {String, Category}},
d145 1
a145 1
      {String}},
d148 1
a148 1
      {String}},
d151 1
a151 1
      {String, Integer, String}},
d154 1
a154 1
      {String}},
d157 1
a157 1
      {Boolean}},
d160 1
a160 1
      {Boolean}},
d163 1
a163 1
      {Boolean}},
d166 1
a166 1
      {Float}},
d169 1
a169 1
      {Boolean}},
d173 1
a173 1
      {Boolean}},
d176 1
a176 1
      {Integer}},
d179 1
a179 1
      {Boolean}},
d182 1
a182 1
      {Float}},
d185 1
a185 1
      {Boolean}},
d188 1
a188 1
      {Integer}},
d191 1
a191 1
      {Boolean}},
d194 1
a194 1
      {Float}},
d197 1
a197 1
      {Boolean}},
d200 1
a200 1
      {Boolean}},
d203 1
a203 1
      {Float}},
d206 1
a206 1
      {Boolean}},
d209 1
a209 1
      {Boolean}},
d212 1
a212 1
      {Integer}},
d215 1
a215 1
      {Boolean}},
d218 1
a218 1
      {Integer}},
d221 1
a221 1
      {Float}},
d224 1
a224 1
      {Float}},
d227 1
a227 1
      {Float}},
d230 1
a230 1
      {Float}},
d233 1
a233 1
      {Boolean}},
d236 1
a236 1
      {Integer}},
d239 1
a239 1
      {Boolean}},
d242 1
a242 1
      {Boolean}},
d245 1
a245 1
      {Float}},
d248 1
a248 1
      {Boolean}},
d251 1
a251 1
      {Boolean}},
d254 1
a254 1
      {Boolean}},
d257 1
a257 1
      {Boolean}},
d260 1
a260 1
      {Boolean}},
d263 1
a263 1
      {Boolean}},
d266 1
a266 1
      {Boolean}},
d269 1
a269 1
      {Boolean}},
d272 1
a272 1
      {String}},
d275 1
a275 1
      {Boolean}},
d278 1
a278 1
      {Boolean}},
d281 1
a281 1
      {Boolean}},
d284 1
a284 1
      {String}},
d287 1
a287 1
      {Boolean}},
d290 1
a290 1
      {Boolean}},
d293 1
a293 1
      {Boolean}},
d296 1
a296 1
      {Boolean}},
d299 1
a299 1
      {Float}},
d302 1
a302 1
      {Boolean}},
d304 1
a304 1
    {"set_part", 1, NULL, {String}},
d307 1
a307 1
      {Boolean}},
d310 1
a310 1
      {IntVector}},
d313 1
a313 1
      {Integer}},
d316 1
a316 1
      {Boolean}},
d319 1
a319 1
      {Boolean}},
d322 1
a322 1
      {FloatVector}},
d325 1
a325 1
      {FloatVector}},
d328 1
a328 1
      {Boolean}},
d331 1
a331 1
      {Boolean}},
d334 1
a334 1
      {BoundSet}},
d337 1
a337 1
      {FloatVector}},
d340 1
a340 1
      {Boolean}},
d343 1
a343 1
      {Float}},
d345 1
a345 1
    {"set_demand", 2, NULL, {String, String}},
d349 1
a349 1
      {Integer}},
d353 1
a353 1
      {IntVector}},
d356 1
a356 1
      {BoundSet}},
d359 1
a359 1
      {FloatVector}},
d362 1
a362 1
      {Integer}},
d365 1
a365 1
      {Float}},
d369 1
a369 1
      {FloatVector}},
d372 1
a372 1
      {FloatVector}},
d376 1
a376 1
      {Float}},
d380 1
a380 1
      {Integer}},
d383 1
a383 1
      {Boolean}},
d386 1
a386 1
      {IntVector}},
d389 1
a389 1
      {Boolean}},
d392 1
a392 1
      {Integer}},
d395 1
a395 1
      {IntVector}},
d398 1
a398 1
      {FloatVector}},
d400 1
a400 1
    {"set_operation", 1, NULL, {String}},
d403 1
a403 1
      {BoundSet}},
d406 1
a406 1
      {Float}},
d409 1
a409 1
      {FloatVector}},
d412 1
a412 1
      {FloatVector}},
d416 1
a416 1
      {FloatVector}},
d419 1
a419 1
      {FloatVector}},
d422 1
a422 1
      {FloatVector}},
d426 1
a426 1
      {FloatVector}},
d429 1
a429 1
      {Float}},
d432 1
a432 1
      {Boolean}},
d436 1
a436 1
      {Boolean}},
d439 1
a439 1
      {IntVector}},
d442 1
a442 1
      {FloatVector}},
d445 1
a445 1
      WitSymTable::witSetOperationCycleTime34, {FloatVector}},
d448 1
a448 1
      WitSymTable::witSetOperationExecVol, {FloatVector}},
d450 2
a451 1
    {"set_bomEntry", 2, NULL, {String, Integer}},
d454 1
a454 1
      {FloatVector}}, 
d458 1
a458 1
      {Integer}},
d461 1
a461 1
      {Float}},
d464 1
a464 1
      {Integer}},
d467 1
a467 1
      {Float}},
d471 1
a471 1
      {Integer}},
d474 1
a474 1
      {Boolean}},
d477 1
a477 1
      {FloatVector}},
d480 1
a480 1
      {Boolean}},
d483 1
a483 1
      {FloatVector}},
d486 1
a486 1
      {Boolean}},
d489 1
a489 1
      {Boolean}},
d492 1
a492 1
      {Float}}, 
d494 4
a497 1
    {"set_subEntry", 3, NULL, {String, Integer, Integer}},
d500 1
a500 1
      {FloatVector}},  
d504 1
a504 1
      {Integer}},
d507 1
a507 1
      {Float}},
d510 1
a510 1
      WitSymTable::witSetSubEntryExpAllowed, {Boolean}},
d513 1
a513 1
      WitSymTable::witSetSubEntryExpNetAversion, {Float}},
d516 1
a516 1
      {Integer}},
d519 1
a519 1
      {Float}},
d523 1
a523 1
      {Integer}},
d526 1
a526 1
      WitSymTable::witSetSubEntryMrpNetAllowed, {Boolean}},
d529 1
a529 1
      WitSymTable::witSetSubEntryNetAllowed, {Boolean}},
d532 1
a532 1
      {Float}},  
d536 1
a536 1
      {FloatVector}},
d539 1
a539 1
      WitSymTable::witSetSubEntryObj2SubPenalty, {Float}},
d543 1
a543 1
      {FloatVector}},
d546 1
a546 1
      {FloatVector}},
d549 1
a549 1
      WitSymTable::witSetSubEntrySelForDel, {Boolean}},
d552 1
a552 1
      {FloatVector}}, 
d554 2
a555 1
    {"set_bopEntry", 2, NULL, {String, Integer}},
d558 1
a558 1
      {Boolean}},
d562 1
a562 1
      {Integer}},
d565 1
a565 1
      {Boolean}},
d568 1
a568 1
      WitSymTable::witSetBopEntryExpAversion, {Float}},
d572 1
a572 1
      {Integer}},
d575 1
a575 1
      {Boolean}},
d578 1
a578 1
      {FloatVector}},
d581 1
a581 1
      WitSymTable::witSetBopEntryProdRate, {Float}},
d584 1
a584 1
      WitSymTable::witSetBopEntryProductRate, {FloatVector}},
d587 1
a587 1
      WitSymTable::witSetBopEntryRoutingShare, {FloatVector}},
d590 1
a590 1
      {Boolean}},
d593 1
a593 1
      WitSymTable::witSetPartBaSelSplit, {Boolean}},
d596 1
a596 1
      WitSymTable::witSetPartBuildAheadUB, {IntVector}},
d599 1
a599 1
      WitSymTable::witSetPartBuildAheadLimit, {Integer}},
d602 1
a602 1
      WitSymTable::witSetPartBuildAsap, {Boolean}},
d605 1
a605 1
      WitSymTable::witSetPartBuildNstn, {Boolean}},
d608 1
a608 1
      WitSymTable::witSetPartObj1ScrapCost, {FloatVector}},
d611 1
a611 1
      WitSymTable::witSetPartObj1StockCost, {FloatVector}},
d614 1
a614 1
      WitSymTable::witSetPartPropRouting, {Boolean}},
d617 1
a617 1
      WitSymTable::witSetPartSingleSource, {Boolean}},
d620 1
a620 1
      WitSymTable::witSetPartStockBounds, {BoundSet}},
d623 1
a623 1
      WitSymTable::witSetPartSupplyVol, {FloatVector}},
d626 1
a626 1
      WitSymTable::witSetPartSelForDel, {Boolean}},
d629 1
a629 1
      WitSymTable::witSetPartUnitCost, {Float}},
d631 1
a631 1
    {NULL,0,0,{Undefined}}
@


1.62
log
@Double Precision.
@
text
@d671 1
a671 1
    case capacity:
d675 1
a675 1
    case material:
@


1.61
log
@Double Precision.
@
text
@d1223 1
a1223 1
  iptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1267 1
a1267 1
  float  *fptr;
d1271 1
a1271 1
  fptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1282 1
a1282 1
  float  *fptr;
d1286 1
a1286 1
  fptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1319 4
a1322 4
  WitVectorSpec *vecPtr;
  float*        arg2 = NULL;
  float*        arg3 = NULL;
  float*        arg4 = NULL;
d1331 1
a1331 1
    arg2 = vecPtr->getVector (WitBoundSet::defHardLB());
d1339 1
a1339 1
    arg3 = vecPtr->getVector (WitBoundSet::defSoftLB());
d1347 1
a1347 1
    arg4 = vecPtr->getVector (WitBoundSet::defHardUB());
d1358 1
a1358 1
  float  *fptr;
d1361 1
a1361 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1410 1
a1410 1
  iptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1424 4
a1427 4
  WitVectorSpec *vecPtr;
  float*        arg3 = NULL;
  float*        arg4 = NULL;
  float*        arg5 = NULL;
d1435 1
a1435 1
    arg3 = vecPtr->getVector (WitBoundSet::defHardLB());
d1442 1
a1442 1
    arg4 = vecPtr->getVector (WitBoundSet::defSoftLB());
d1449 1
a1449 1
    arg5 = vecPtr->getVector (WitBoundSet::defHardUB());
d1464 1
a1464 1
  float  *fptr;
d1468 1
a1468 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1504 1
a1504 1
  float  *fptr;
d1508 1
a1508 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1520 1
a1520 1
  float  *fptr;
d1524 1
a1524 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1579 1
a1579 1
  iptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1619 1
a1619 1
  iptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1633 1
a1633 1
  float  *fptr;
d1637 1
a1637 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1649 4
a1652 4
  WitVectorSpec *vecPtr;
  float*        arg2 = NULL;
  float*        arg3 = NULL;
  float*        arg4 = NULL;
d1660 1
a1660 1
    arg2 = vecPtr->getVector (WitBoundSet::defHardLB());
d1667 1
a1667 1
    arg3 = vecPtr->getVector (WitBoundSet::defSoftLB());
d1674 1
a1674 1
    arg4 = vecPtr->getVector (WitBoundSet::defHardUB());
d1699 1
a1699 1
  float  *fptr;
d1703 1
a1703 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1714 1
a1714 1
  float  *fptr;
d1718 1
a1718 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1729 1
a1729 1
  float  *fptr;
d1733 1
a1733 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1744 1
a1744 1
  float  *fptr;
d1748 1
a1748 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1759 1
a1759 1
  float  *fptr;
d1763 1
a1763 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1774 1
a1774 1
  float  *fptr;
d1778 1
a1778 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1826 1
a1826 1
  iptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1837 1
a1837 1
  float  *fptr;
d1841 1
a1841 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1852 1
a1852 1
  float  *fptr;
d1856 1
a1856 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1867 1
a1867 1
  float  *fptr;
d1871 1
a1871 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1882 1
a1882 1
  float  *fptr;
d1886 1
a1886 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1970 1
a1970 1
  float  *fptr;
d1974 1
a1974 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d1998 1
a1998 1
  float  *fptr;
d2002 1
a2002 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d2050 1
a2050 1
  float  *fptr;
d2054 1
a2054 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d2210 1
a2210 1
  float  *fptr;
d2214 1
a2214 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d2227 1
a2227 1
  float  *fptr;
d2231 1
a2231 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d2244 1
a2244 1
  float  *fptr;
d2248 1
a2248 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d2274 1
a2274 1
  float  *fptr;
d2278 1
a2278 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d2363 1
a2363 1
  float  *fptr;
d2367 1
a2367 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d2391 1
a2391 1
  float  *fptr;
d2395 1
a2395 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
d2409 1
a2409 1
  float  *fptr;
d2413 1
a2413 1
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
@


1.60
log
@Double Precision.
@
text
@d2044 1
a2044 1
     WitParser::instance ()->currentAttr()->getOldFloatArg(0));
d2204 1
a2204 1
     WitParser::instance ()->currentAttr()->getOldFloatArg(0));
d2385 1
a2385 1
     WitParser::instance ()->currentAttr()->getOldFloatArg(0));
@


1.59
log
@Double Precision.
@
text
@d2044 1
a2044 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d2204 1
a2204 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d2385 1
a2385 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
@


1.58
log
@Double Precision.
@
text
@d36 1
@


1.57
log
@Double Precision.
@
text
@a173 3
    {"set_problem_doubleMode", 1, WitSymTable::witSetDoubleMode,
      {Boolean}},

a769 10
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetDoubleMode()
{
  char   *s = "Invoking witSetDoubleMode  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetDoubleMode
@


1.56
log
@Continued double precision.
@
text
@d174 3
a191 3
    {"set_problem_pipSeqFromHeur", 1, WitSymTable::witSetPipSeqFromHeur,
      {Boolean}},

d252 3
d777 10
a836 10
WitParseRC WitSymTable::witSetPipSeqFromHeur()
{
  char   *s = "Invoking witSetPipSeqFromHeur  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetPipSeqFromHeur
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

d1035 10
@


1.55
log
@Continued double precision.
@
text
@d35 1
a35 1
#include <RealSInArg.h>
@


1.54
log
@Removed the "pip" attribute.
@
text
@d35 1
@


1.53
log
@Continued implementation of PIP.
@
text
@a247 3
    {"set_problem_pip", 1, WitSymTable::witSetPip,
      {Boolean}},

a1019 10
  return 0;
}

WitParseRC WitSymTable::witSetPip()
{
  char   *s = "Invoking witSetPip  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetPip
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
@


1.52
log
@Continued implementation of PIP.
@
text
@d188 1
a188 1
    {"set_problem_heurPipSeq", 1, WitSymTable::witSetHeurPipSeq,
d826 1
a826 1
WitParseRC WitSymTable::witSetHeurPipSeq()
d828 1
a828 1
  char   *s = "Invoking witSetHeurPipSeq  ";
d831 1
a831 1
  myWitRun()->witSetHeurPipSeq
@


1.51
log
@Continued implementation of PIP.
@
text
@d28 1
a250 3
    {"set_problem_pipSeqAppendsNow", 1, WitSymTable::witSetPipSeqAppendsNow,
      {Boolean}},

a253 12
    {"set_problem_pipSeqDemandName", 1, WitSymTable::witSetPipSeqDemandName,
      {String}},

    {"set_problem_pipSeqPartName", 1, WitSymTable::witSetPipSeqPartName,
      {String}},

    {"set_problem_pipSeqShipPeriod", 1, WitSymTable::witSetPipSeqShipPeriod,
      {Integer}},

    {"set_problem_pipSeqIncShipVol", 1, WitSymTable::witSetPipSeqIncShipVol,
      {Float}},

d348 4
a355 4
    {"set_demand_buildAheadLimit", 1,
      WitSymTable::witSetDemandBuildAheadLimit,
      {Integer}},

a361 3
    {"set_demand_shipVol", 1, WitSymTable::witSetDemandShipVol,
      {FloatVector}},

d375 7
a381 2
    {"set_demand_priority", 1, WitSymTable::witSetDemandPriority,
      {IntVector}},
d386 1
a386 2
    {"set_demand_shipLateUB", 1,
      WitSymTable::witSetDemandShipLateUB,
d389 3
d395 5
a399 2
    {"set_demand_selForDel", 1, WitSymTable::witSetDemandSelForDel,
      {Boolean}},
a1035 10
WitParseRC WitSymTable::witSetPipSeqAppendsNow()
{
  char   *s = "Invoking witSetPipSeqAppendsNow  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetPipSeqAppendsNow
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

d1041 2
a1042 39
  myWitRun()->witSetPipSeqClearsNow
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPipSeqDemandName()
{
  char   *s = "Invoking witSetPipSeqDemandName  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetPipSeqDemandName
    (WitParser::instance ()->currentAttr()->getStringArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPipSeqPartName()
{
  char   *s = "Invoking witSetPipSeqPartName  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetPipSeqPartName
    (WitParser::instance ()->currentAttr()->getStringArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPipSeqShipPeriod()
{
  char   *s = "Invoking witSetPipSeqShipPeriod  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetPipSeqShipPeriod
    (WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetPipSeqIncShipVol()
{
  char   *s = "Invoking witSetPipSeqIncShipVol  ";
  WitParser::instance ()->currentAttr()->printArgs(s);
a1043 2
  myWitRun()->witSetPipSeqIncShipVol
    (WitParser::instance ()->currentAttr()->getFloatArg(0));
d1403 1
a1403 1
WitParseRC WitSymTable::witSetDemandGrossRev()
d1405 1
a1405 1
  char   *s = "Invoking witSetDemandGrossRev  ";
d1408 1
a1408 1
  myWitRun()->witSetDemandGrossRev
d1411 1
a1411 65
     WitParser::instance ()->currentAttr()->getFloatArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetDemandDemandVol()
{
  float  *fptr;
  char   *s = "Invoking witSetDemandDemandVol  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
    (WitDemand::defDemandVol());
  if (fptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandDemandVol
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(), fptr);
  return 0;
}

WitParseRC WitSymTable::witSetDemandShipVol()
{
  float  *fptr;
  char   *s = "Invoking witSetDemandShipVol  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
    (WitDemand::defShipVol());
  if (fptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandShipVol
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(), fptr);
  return 0;
}

WitParseRC WitSymTable::witSetDemandObj1ShipReward()
{
  float  *fptr;
  char   *s = "Invoking witSetDemandObj1ShipReward  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
    (WitDemand::defObj1ShipReward());
  if (fptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandObj1ShipReward
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(), fptr);
  return 0;
}

WitParseRC WitSymTable::witSetDemandPriority()
{ 
  int    *iptr;
  char   *s = "Invoking witSetDemandPriority  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  iptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
    (WitDemand::defPriority());
  if (iptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetDemandPriority
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(), iptr);
a1432 12
WitParseRC WitSymTable::witSetDemandBuildAheadLimit()
{
  char   *s = "Invoking witSetDemandBuildAheadLimit  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetDemandBuildAheadLimit
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentEntity()->getDemandName(),
     WitParser::instance ()->currentAttr()->getIntArg(0));
  return 0;
}

d1473 16
d1501 12
d1529 43
d1584 4
a1587 4
WitParseRC WitSymTable::witSetDemandShipLateUB()
{
  int  *iptr;
  char   *s = "Invoking witSetDemandShipLateUB  ";
d1590 2
a1591 2
  iptr =  WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
    (WitDemand::defShipLateUB(myWitRun()->myProblem ()));
d1594 12
a1605 1
  myWitRun()->witSetDemandShipLateUB
d1608 1
a1608 2
     iptr);

d1624 1
a1624 1
WitParseRC WitSymTable::witSetDemandSelForDel()
d1626 2
a1627 1
  char   *s = "Invoking witSetDemandSelForDel  ";
d1630 5
a1634 1
  myWitRun()->witSetDemandSelForDel
d1637 18
a1654 1
     WitParser::instance ()->currentAttr()->getBoolArg(0));
@


1.50
log
@Continued implementation of PIP.
@
text
@d250 18
d1040 60
@


1.49
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d187 3
d812 10
@


1.48
log
@Continued implementation of post-implosion pegging.
@
text
@a237 3
    {"set_problem_perfPIPegging", 1, WitSymTable::witSetPerfPIPegging,
      {Boolean}},

d244 3
a981 10
WitParseRC WitSymTable::witSetPerfPIPegging()
{
  char   *s = "Invoking witSetPerfPIPegging  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetPerfPIPegging
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

d999 10
@


1.47
log
@Began implementation of post-implosion pegging.
@
text
@d238 1
a238 1
    {"set_problem_perfPegging", 1, WitSymTable::witSetPerfPegging,
d241 1
a241 1
    {"set_problem_piPegging", 1, WitSymTable::witSetPiPegging,
d982 1
a982 1
WitParseRC WitSymTable::witSetPerfPegging()
d984 1
a984 1
  char   *s = "Invoking witSetPerfPegging  ";
d987 1
a987 1
  myWitRun()->witSetPerfPegging
d992 1
a992 1
WitParseRC WitSymTable::witSetPiPegging()
d994 1
a994 1
  char   *s = "Invoking witSetPiPegging  ";
d997 1
a997 1
  myWitRun()->witSetPiPegging
@


1.46
log
@Continued implementation of opt with COIN.
@
text
@d241 3
d988 10
@


1.45
log
@Changed the routingShare attributes from scalars to vectors.
@
text
@d262 3
d1056 10
@


1.44
log
@Continued implementation of proportionate routing.
@
text
@d463 1
a463 1
      {Float}},
d523 1
a523 1
      {Float}},
d563 1
a563 1
      WitSymTable::witSetBopEntryRoutingShare, {Float}},
d1921 1
d1925 4
d1931 1
a1931 2
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d2167 1
d2171 4
d2178 1
a2178 2
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getFloatArg(0));
d2332 1
d2335 4
d2343 2
a2344 1
     WitParser::instance ()->currentAttr()->getFloatArg(0));
@


1.43
log
@Implemented OSL postSolve error recovery.
@
text
@a442 3
    {"set_bomEntry_expShare", 1, WitSymTable::witSetBomEntryExpShare,
      {Float}},

d462 3
a491 3
    {"set_subEntry_expShare", 1, WitSymTable::witSetSubEntryExpShare,
      {Float}},

d522 2
a523 2
    {"set_subEntry_subVol", 1, WitSymTable::witSetSubEntrySubVol,
      {FloatVector}}, 
d528 3
a545 3
    {"set_bopEntry_expShare", 1,
      WitSymTable::witSetBopEntryExpShare, {Float}},

d562 3
a1842 12
WitParseRC WitSymTable::witSetBomEntryExpShare()
{
  char   *s = "Invoking witSetBomEntryExpShare  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetBomEntryExpShare
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getFloatArg(0));
  return 0;
}

d1919 12
a2035 13
WitParseRC WitSymTable::witSetSubEntryExpShare()
{
  char   *s = "Invoking witSetSubEntryExpShare  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetSubsBomEntryExpShare
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getFloatArg(0));
  return 0;
}

d2161 1
a2161 1
WitParseRC WitSymTable::witSetSubEntrySubVol()
d2163 1
a2163 2
  float  *fptr;
  char   *s = "Invoking witSetSubEntrySubVol  ";
d2166 1
a2166 5
  fptr = WitParser::instance ()->currentAttr()->getVectorArg(0)->getVector
    (WitSubEntry::defSubVol());
  if (fptr == NULL) return PERIOD_ERROR;

  myWitRun()->witSetSubsBomEntrySubVol
d2169 2
a2170 1
     WitParser::instance ()->currentEntity()->getSubEntryIndex(), fptr);
d2187 17
a2251 12
WitParseRC WitSymTable::witSetBopEntryExpShare()
{
  char   *s = "Invoking witSetBopEntryExpShare  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetBopEntryExpShare
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBopEntryIndex(),
     WitParser::instance ()->currentAttr()->getFloatArg(0));
  return 0;
}

d2319 12
@


1.42
log
@Continued implementation of proportionate routing.
@
text
@d244 3
d993 10
@


1.41
log
@Continued implementation of proportionate routing.
@
text
@d440 3
d459 3
d489 3
d1830 12
d1906 12
d2016 13
@


1.40
log
@Continued implementation of proportionate routing.
@
text
@a246 3
    {"set_problem_propRouting", 1, WitSymTable::witSetPropRouting,
      {Boolean}},

d312 3
d577 3
a993 10
WitParseRC WitSymTable::witSetPropRouting()
{
  char   *s = "Invoking witSetPropRouting  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetPropRouting
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

d1220 11
@


1.39
log
@Began implementation of Proportionate Routing.
@
text
@d247 3
d534 2
a535 2
    {"set_bopEntry_expFactor", 1,
      WitSymTable::witSetBopEntryExpFactor, {Float}},
d991 10
d2189 1
a2189 1
WitParseRC WitSymTable::witSetBopEntryExpFactor()
d2191 1
a2191 1
  char   *s = "Invoking witSetBopEntryExpFactor  ";
d2194 1
a2194 1
  myWitRun()->witSetBopEntryExpFactor
@


1.38
log
@Continued implementation of execPenalties on BOM entries and subs.
@
text
@d531 3
d2170 12
@


1.37
log
@Added penalties on BOM entries and substitutes to pen-exec.
@
text
@d434 3
a461 3
    {"set_bomEntry_usePenalty", 1, WitSymTable::witSetBomEntryUsePenalty,
      {Float}},

d471 3
a515 3
    {"set_subEntry_usePenalty", 1, WitSymTable::witSetSubEntryUsePenalty,
      {Float}},

d1789 12
a1900 12
WitParseRC WitSymTable::witSetBomEntryUsePenalty()
{
  char   *s = "Invoking witSetBomEntryUsePenalty  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetBomEntryUsePenalty
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentAttr()->getFloatArg(0));
  return 0;
}

d1931 13
a2121 13
  return 0;
}

WitParseRC WitSymTable::witSetSubEntryUsePenalty()
{
  char   *s = "Invoking witSetSubEntryUsePenalty  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetSubsBomEntryUsePenalty
    (WitParser::instance ()->currentEntity()->getOperationName(),
     WitParser::instance ()->currentEntity()->getBomEntryIndex(),
     WitParser::instance ()->currentEntity()->getSubEntryIndex(),
     WitParser::instance ()->currentAttr()->getFloatArg(0));
@


1.36
log
@Continued implementation of user-specified heuristic starting solution.
@
text
@d459 3
d513 3
d1889 12
d2109 13
@


1.35
log
@Continued implementation of heuristic initial solution.
@
text
@a186 3
    {"set_problem_heurInitSoln", 1, WitSymTable::witSetHeurInitSoln,
      {Boolean}},

d280 3
a778 10
WitParseRC WitSymTable::witSetHeurInitSoln()
{
  char   *s = "Invoking witSetHeurInitSoln  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetHeurInitSoln
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

d1085 10
@


1.34
log
@modications to change rogueWave tools.h++ to STL
@
text
@d187 1
a187 1
    {"set_problem_independentOffsets", 1, WitSymTable::witSetIndependentOffsets,
d190 1
a190 1
    {"set_problem_initHeurSoln", 1, WitSymTable::witSetInitHeurSoln,
d779 1
a779 1
WitParseRC WitSymTable::witSetIndependentOffsets()
d781 1
a781 1
  char   *s = "Invoking witSetIndependentOffsets  ";
d784 1
a784 1
  myWitRun()->witSetIndependentOffsets
d789 1
a789 1
WitParseRC WitSymTable::witSetInitHeurSoln()
d791 1
a791 1
  char   *s = "Invoking witSetInitHeurSoln  ";
d794 1
a794 1
  myWitRun()->witSetInitHeurSoln
@


1.33
log
@Continued implementation of heuristic implosion from an initial solution.
Added some debugging code to Single-Source.
@
text
@a39 2
RWDEFINE_COLLECTABLE(WitSymTabEntry, 100)

a78 1
  theDictionary_ = (RWHashDictionary *) new RWHashDictionary(HASH_SIZE);
d84 9
a92 3
  // remove all entries and delete each key and value
  theDictionary_->clearAndDestroy();   
  delete theDictionary_;
a98 1
  RWCollectableString *rulePtr;
a105 1
    rulePtr = new RWCollectableString(symbolTable[i].rule);
d107 4
a110 2
      symbolTable[i].func, &symbolTable[i].parmTypes[0]);
    theDictionary_->insertKeyAndValue(rulePtr, entryPtr);
d117 1
a117 1
RWHashDictionary *WitSymTable::theDictionary()
@


1.33.2.1
log
@Migration from Roguewave tools.h++ to STL
@
text
@d40 2
d81 1
d87 3
a89 9
  // remove all entries and delete each value
   if( theDictionary_.size() )
   {
      WitSymTableDict::iterator it = theDictionary_.begin();
      do
      {
         delete it->second;
      } while( ++it != theDictionary_.end() );
   }
d96 1
d104 1
d106 2
a107 4
         symbolTable[i].func, &symbolTable[i].parmTypes[0]);

    typedef std::pair<std::string,WitSymTabEntry*> SymTableDictPair;
    theDictionary_.insert( SymTableDictPair( symbolTable[i].rule, entryPtr ) );
d114 1
a114 1
const WitSymTable::WitSymTableDict& WitSymTable::theDictionary()
@


1.32
log
@Began implementation of heuristic implosion from an initial solution.
@
text
@d184 1
a184 1
    {"set_problem_heurInitSoln", 1, WitSymTable::witSetHeurInitSoln,
d187 1
a187 1
    {"set_problem_independentOffsets", 1, WitSymTable::witSetIndependentOffsets,
d776 1
a776 1
WitParseRC WitSymTable::witSetHeurInitSoln()
d778 1
a778 1
  char   *s = "Invoking witSetHeurInitSoln  ";
d781 1
a781 1
  myWitRun()->witSetHeurInitSoln
d786 1
a786 1
WitParseRC WitSymTable::witSetIndependentOffsets()
d788 1
a788 1
  char   *s = "Invoking witSetIndependentOffsets  ";
d791 1
a791 1
  myWitRun()->witSetIndependentOffsets
@


1.31
log
@Continued implementation of two-level lot sizes.
@
text
@d184 3
d773 10
@


1.30
log
@Continued implementation of two-level lot sizes.
@
text
@d403 4
d1663 11
@


1.29
log
@Began implementation of opt implosion with lot sizes.
@
text
@d380 7
d390 3
d1567 30
d1608 15
@


1.28
log
@Continued implementation of Single-Source.
@
text
@d226 3
d896 10
@


1.27
log
@Continued implementation of single-source.
@
text
@d430 3
d1754 12
@


1.26
log
@Continued implementation of object iteration.
@
text
@d303 3
d539 3
d1159 11
@


1.25
log
@Began implementation of object iteration.
@
text
@d34 1
@


1.24
log
@Initial implementation of selection splitting for multi-route.
@
text
@d29 5
a33 1

@


1.23
log
@Began implementation of selection splitting for stock reallocation.
@
text
@d203 3
d242 3
d822 10
d948 10
@


1.22
log
@Changed selStockRe attribute to stockReallocation (fullSR, internally).
@
text
@d248 3
d962 10
@


1.21
log
@Replaced uncondStockRe attribute with the old stockRealloc attribute.
@
text
@d239 1
a239 1
    {"set_problem_selStockRe", 1, WitSymTable::witSetSelStockRe,
d242 1
a242 1
    {"set_problem_skipFailures", 1, WitSymTable::witSetSkipFailures,
d245 1
a245 1
    {"set_problem_stockRealloc", 1, WitSymTable::witSetStockRealloc,
d933 1
a933 1
WitParseRC WitSymTable::witSetSelStockRe()
d935 1
a935 1
  char   *s = "Invoking witSetSelStockRe  ";
d938 1
a938 1
  myWitRun()->witSetSelStockRe
d943 1
a943 1
WitParseRC WitSymTable::witSetSkipFailures()
d945 1
a945 1
  char   *s = "Invoking witSetSkipFailures  ";
d948 1
a948 1
  myWitRun()->witSetSkipFailures
d953 1
a953 1
WitParseRC WitSymTable::witSetStockRealloc()
d955 1
a955 1
  char   *s = "Invoking witSetStockRealloc  ";
d958 1
a958 1
  myWitRun()->witSetStockRealloc
@


1.20
log
@Renamed mandatory stock reallocation to unconditional stock reallocation.
@
text
@a256 3
    {"set_problem_uncondStockRe", 1, WitSymTable::witSetUncondStockRe,
      {Boolean}},

a988 10
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

WitParseRC WitSymTable::witSetUncondStockRe()
{
  char   *s = "Invoking witSetUncondStockRe  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetUncondStockRe
@


1.19
log
@Changed attribute stockRealloc to mandStockRe.
@
text
@a193 3
    {"set_problem_mandStockRe", 1, WitSymTable::witSetMandStockRe,
      {Boolean}},

d257 3
a785 10
WitParseRC WitSymTable::witSetMandStockRe()
{
  char   *s = "Invoking witSetMandStockRe  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetMandStockRe
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

d992 10
@


1.18
log
@Continued implementation of selective stock reallocation.
@
text
@d194 3
d783 10
@


1.17
log
@Added selStockRealloc attribute.
@
text
@d239 1
a239 1
    {"set_problem_selStockRealloc", 1, WitSymTable::witSetSelStockRealloc,
d933 1
a933 1
WitParseRC WitSymTable::witSetSelStockRealloc()
d935 1
a935 1
  char   *s = "Invoking witSetSelStockRealloc  ";
d938 1
a938 1
  myWitRun()->witSetSelStockRealloc
@


1.16
log
@Added shadowPrice and compPrices attributes.
@
text
@d239 3
d929 10
@


1.15
log
@Minor change.
@
text
@d157 3
d657 10
@


1.14
log
@Continued implementation of pegging.
@
text
@d221 1
a221 1
    {"set_problem_peggingNeeded", 1, WitSymTable::witSetPeggingNeeded,
d867 1
a867 1
WitParseRC WitSymTable::witSetPeggingNeeded()
d869 1
a869 1
  char   *s = "Invoking witSetPeggingNeeded  ";
d872 1
a872 1
  myWitRun()->witSetPeggingNeeded
@


1.13
log
@Continued implementation of pegging.
@
text
@d221 1
a221 1
    {"set_problem_pegging", 1, WitSymTable::witSetPegging,
d867 1
a867 1
WitParseRC WitSymTable::witSetPegging()
d869 1
a869 1
  char   *s = "Invoking witSetPegging  ";
d872 1
a872 1
  myWitRun()->witSetPegging
@


1.12
log
@Continued implementation of pegging.
@
text
@d221 1
a221 1
    {"set_problem_perfPegging", 1, WitSymTable::witSetPerfPegging,
d867 1
a867 1
WitParseRC WitSymTable::witSetPerfPegging()
d869 1
a869 1
  char   *s = "Invoking witSetPerfPegging  ";
d872 1
a872 1
  myWitRun()->witSetPerfPegging
@


1.11
log
@Initial implementation of pegging.
@
text
@a160 3
    {"set_problem_doPegging", 1, WitSymTable::witSetDoPegging,
      {Boolean}},

d221 3
a666 10
WitParseRC WitSymTable::witSetDoPegging()
{
  char   *s = "Invoking witSetDoPegging  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetDoPegging
    (WitParser::instance ()->currentAttr()->getBoolArg(0));
  return 0;
}

d863 10
@


1.10
log
@Added meSelSplitOK development parameter.
Added meSelSplit attribute.
Refactoring for sel-split for multi-exec.
@
text
@d161 3
d663 10
@


1.9
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@d477 3
d1937 12
@


1.8
log
@Re-worked the controls for selection splitting.
@
text
@d259 3
d489 3
d978 11
@


1.7
log
@Removed the coarse selection splitting code that's not needed for the new
design of selection splitting.
@
text
@a258 3
    {"set_part_baSplitRes", 1, WitSymTable::witSetPartBaSplitRes,
      {Float}},

a485 3
    {"set_partWithOperation_baSplitRes", 1,
      WitSymTable::witSetPartBaSplitRes, {Float}},

a971 11
  return 0;
}

WitParseRC WitSymTable::witSetPartBaSplitRes()
{
  char   *s = "Invoking witSetPartBaSplitRes  ";
  WitParser::instance ()->currentAttr()->printArgs(s);

  myWitRun()->witSetPartBaSplitRes
    (WitParser::instance ()->currentEntity()->getPartName(),
     WitParser::instance ()->currentAttr()->getFloatArg(0));
@


1.6
log
@Implemented respectStockSLBs and prefHighStockSLBs global attributes.
@
text
@d259 3
d489 3
d978 11
@


1.5
log
@

Revised stand-alone FSS capabilties in development mode.
Modified some stock soft-lower bound controls.
Fixed bug: BOP entry productRate attribute could not be read.
@
text
@d224 6
d862 20
@


1.4
log
@Replaced some scalar attributes with vector attributes:

   BOM entry  usageRate ==> consRate
   substitute usageRate ==> consRate
   BOP entry  prodRate  ==> productRate
@
text
@d474 2
a475 2
    {"set_bopEntry_prodRate", 1,
      WitSymTable::witSetBopEntryProdRate, {FloatVector}},
@


1.3
log
@Finished implementing stock reallocation.
@
text
@d369 3
d400 3
d474 3
d1507 16
d1623 17
d1919 18
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d230 3
d866 10
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
