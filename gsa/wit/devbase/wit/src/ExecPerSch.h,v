head	1.8;
access;
symbols
	sce_5_01_20080919:1.4
	latest_sce_4_20_20060523:1.3.0.2
	sce_4_20_20060523:1.3
	latest_sce4_20_OSL:1.2.0.2
	sce_4_20_OSL:1.2;
locks; strict;
comment	@ * @;


1.8
date	2011.09.28.23.49.19;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.24.00.27.38;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.08.30.20.17.28;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.21.18.50.14;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.07.31.20.39.45;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.02.17.33.58;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.28.20.38.39;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.28.19.43.04;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ExecPerSchH
#define ExecPerSchH

//------------------------------------------------------------------------------
// Header file: "ExecPerSch.h"
//
// Contains the declaration of class template ExecPerSched <Entry>.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <Schedule.h>

//------------------------------------------------------------------------------
// Class template ExecPerSched <Entry>
//
// "Execution Period Schedule"
// Entry is either BopEntry for BillEntry.
// For each Entry and each period, responsible for indicating the range of
// execution periods for which the Entry has an impactPeriod matching the
// period.
//
// Implemented in Misc.C.
//------------------------------------------------------------------------------

template <typename Entry>
      class WitExecPerSched: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitExecPerSched (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitExecPerSched ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void getExecPerRange (
            Entry *     theEntry,
            WitPeriod   impactPer,
            WitPeriod & execPerFirst,
            WitPeriod & execPerLast);
         //
         // Sets execPerFirst and execPerLast to be the first and last execution
         // periods, execPer, for which
         // theEntry->impactPeriod ()[execPer] == impactPer.
         //
         // If there are no such execution periods, sets:
         //    firstExecPer = -1
         //    lastExecPer  = -2

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitExecPerSched);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSchedule <Entry, WitPeriod> firstExecPer_;
         //
         // firstExecPer_ (theEntry)[impactPer] is the first period execPer
         // such that theEntry->impactPeriod ()[execPer] == impactPer.
         // or -1 if there is none.

      WitSchedule <Entry, WitPeriod> lastExecPer_;
         //
         // lastExecPer_ (theEntry)[impactPer] is the last period execPer
         // such that theEntry->impactPeriod ()[execPer] == impactPer.
         // or -2 if there is none.
   };

#endif
@


1.7
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.6
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d35 58
a92 58
class WitExecPerSched: public WitProbAssoc
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitExecPerSched (WitProblem *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitExecPerSched ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void getExecPerRange (
Entry *     theEntry,
WitPeriod   impactPer,
WitPeriod & execPerFirst,
WitPeriod & execPerLast);
//
// Sets execPerFirst and execPerLast to be the first and last execution
// periods, execPer, for which
// theEntry->impactPeriod ()[execPer] == impactPer.
//
// If there are no such execution periods, sets:
//    firstExecPer = -1
//    lastExecPer  = -2

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitExecPerSched);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitSchedule <Entry, WitPeriod> firstExecPer_;
//
// firstExecPer_ (theEntry)[impactPer] is the first period execPer
// such that theEntry->impactPeriod ()[execPer] == impactPer.
// or -1 if there is none.

WitSchedule <Entry, WitPeriod> lastExecPer_;
//
// lastExecPer_ (theEntry)[impactPer] is the last period execPer
// such that theEntry->impactPeriod ()[execPer] == impactPer.
// or -2 if there is none.
};
@


1.5
log
@Selection Recovery.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d35 58
a92 58
      class WitExecPerSched: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitExecPerSched (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitExecPerSched ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void getExecPerRange (
            Entry *     theEntry,
            WitPeriod   impactPer,
            WitPeriod & execPerFirst,
            WitPeriod & execPerLast);
         //
         // Sets execPerFirst and execPerLast to be the first and last execution
         // periods, execPer, for which
         // theEntry->impactPeriod ()[execPer] == impactPer.
         //
         // If there are no such execution periods, sets:
         //    firstExecPer = -1
         //    lastExecPer  = -2

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitExecPerSched);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSchedule <Entry, WitPeriod> firstExecPer_;
         //
         // firstExecPer_ (theEntry)[impactPer] is the first period execPer
         // such that theEntry->impactPeriod ()[execPer] == impactPer.
         // or -1 if there is none.

      WitSchedule <Entry, WitPeriod> lastExecPer_;
         //
         // lastExecPer_ (theEntry)[impactPer] is the last period execPer
         // such that theEntry->impactPeriod ()[execPer] == impactPer.
         // or -2 if there is none.
   };
@


1.4
log
@Stochastic Implosion
@
text
@d64 4
d85 1
d91 1
@


1.3
log
@Updated the copyright date on all source files.
@
text
@d16 1
a16 3
// Contains the declaration of the following class:
//
//    ExecPerSched
d23 1
a23 1
// Class ExecPerSched
d26 4
a29 5
// For each BopEntry in each explosion period, responsible for indicating the
// range of execution periods for which the BopEntry has an impactPeriod
// matching the explosion period.
//
// Class Hierarchy:
d31 1
a31 4
// ProbAssoc
//    ExecPerSched
//
// Implemented in BopEntry.C.
d34 2
a35 1
class WitExecPerSched: public WitProbAssoc
a54 6
      bool hasMultiExec (WitBopEntry * theBopEnt);
         //
         // Returns true, iff there is at least one period, expPer, such that
         // theBopEnt->impactPeriod ()[execPer] == expPer for at least two
         // values of execPer.
                  
d56 4
a59 4
            WitBopEntry * theBopEnt,
            WitPeriod     expPer,
            WitPeriod &   execPerFirst,
            WitPeriod &   execPerLast);
d63 1
a63 1
         // theBopEnt->impactPeriod ()[execPer] == expPer.
d77 1
a77 1
      WitSchedule <WitBopEntry, WitPeriod> firstExecPer_;
d79 2
a80 2
         // firstExecPer_ (theBopEnt)[expPer] is the first period execPer such
         // that theBopEnt->impactPeriod ()[execPer] == expPer.
d82 1
a82 1
      WitSchedule <WitBopEntry, WitPeriod> lastExecPer_;
d84 2
a85 2
         // lastExecPer_ (theBopEnt)[expPer] is the last period execPer such
         // that theBopEnt->impactPeriod ()[execPer] == expPer.
@


1.2
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.1
log
@[shared-resource pegging]
@
text
@d60 6
@

