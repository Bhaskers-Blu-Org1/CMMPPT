head	1.37;
access;
symbols
	sce_5_01_20080919:1.29
	latest_sce_4_20_20060523:1.26.0.2
	sce_4_20_20060523:1.26
	latest_sce4_20_OSL:1.25.0.2
	sce_4_20_OSL:1.25
	sce_410_withVa:1.25
	sce_4_05_20040511:1.24
	sce_4_00_20040201:1.11
	nextGenBranch:1.9.0.2
	nextGenRoot:1.9
	sce_3_30_20030627:1.9
	EndRw-branch:1.7.0.4
	Root-of-EndRw:1.7
	rwToStl:1.7.0.2
	latest_sce_3_10_20010924:1.4.0.6
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.4.0.4
	sce_3_00_20010601:1.4
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.37
date	2011.09.28.23.49.14;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2011.09.24.00.27.31;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2011.08.30.20.17.24;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2011.01.19.00.20.48;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2010.09.09.20.20.32;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2010.01.25.19.45.17;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2009.12.29.20.42.57;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2009.12.21.23.09.55;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.10.18.23.14.44;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2007.04.17.21.27.10;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2007.04.17.20.19.01;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2006.05.02.17.33.57;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2005.02.16.18.25.02;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2004.04.19.22.16.28;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2004.03.24.22.21.29;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.03.24.19.17.33;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.03.23.19.14.23;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2004.03.22.16.37.18;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2004.03.12.17.21.54;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2004.03.05.22.19.57;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2004.03.02.19.17.52;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2004.02.12.19.13.39;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2004.02.07.00.12.10;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2004.02.04.22.31.27;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.02.04.18.57.49;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.30.23.07.51;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.01.27.16.43.23;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.01.06.18.59.28;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.02.23.40.38;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.02.22.18.23;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.09.19.52.30;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.08.19.21.48;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.03.23.16.36;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.38;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.29.21.22.42;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.32;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.20;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.20;	author wit;	state Exp;
branches;
next	;


desc
@@


1.37
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef DataWritH
#define DataWritH

//------------------------------------------------------------------------------
// Header file: "DataWrit.h"
//
// Contains the declaration of class DataWriter.
//------------------------------------------------------------------------------

#include <Component.h>
#include <Str.h>

//------------------------------------------------------------------------------
// class DataWriter
//
// Responsible for writing the input data file.
//------------------------------------------------------------------------------

class WitDataWriter: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDataWriter (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitDataWriter ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void writeData (const char * fileName);
         //
         // Writes an input data file for myProblem ().
         // fileName is the name of the file to be written.

      void writeEndCommand ();
         //
         // Writes the semicolon at the end of a command in the input data
         // output file.

      void writeFirstKeyWord (const char * theKeyWord);
         //
         // Writes theKeyWord on a new line.

      void writeKeyWord (const char * theKeyWord);
         //
         // Writes theKeyWord on the current line.

      void writeFirstInFileKeyWord (const char * theKeyWord);
         //
         // Writes theKeyWord, assuming it's the first token in the file.

      void writeIntValue (int theInt);
         //
         // Writes theInt.

      void writeStringValue (const WitString & theString);
         //
         // Writes theString.

      void writeCstringValue (const char * theCstring);
         //
         // Writes theCstring.

      //------------------------------------------------------------------------
      // writeVector (attrName, theVector, defaultVal) functions:
      //
      // Each of these functions writes the value of theVector to the input data
      // output file, or no-op, if the attribute is at its default value.
      // attrName is the name of the attribute.
      // defaultVal is the default value of the attribute.
      //------------------------------------------------------------------------

      void writeVector (
         const char *              attrName,
         const WitFlexVec <bool> & theVector,
         bool                      defaultVal);

      void writeVector (
         const char *              attrName,
         const WitTVec    <int> &  theVector,
         int                       defaultVal);

      void writeVector (
         const char *              attrName,
         const WitFlexVec <int> &  theVector,
         int                       defaultVal);

      void writeVector (
         const char *              attrName,
         const WitDblFlexVec &     theVector,
         double                    defaultVal);

      void writeVector (
         const char *              attrName,
         const WitTVec <double> &  theVector,
         double                    defaultVal);

      //------------------------------------------------------------------------
      // Each of these functions writes an attribute iff its current value is
      // different from its default value.
      //------------------------------------------------------------------------

      void writeDouble (
            const char *      attrName,
            double            theValue,
            double            defaultVal);

      void writeInt (
            const char *      attrName,
            int               theValue,
            int               defaultVal);

      void writeBool (
            const char *      attrName,
            bool              theValue, 
            bool              defaultVal);

      void writeString (
            const char *      attrName,
            const WitString & theValue,
            const char *      defaultVal);

      //------------------------------------------------------------------------
      // Each of these functions writes an attribute unconditionally.
      //------------------------------------------------------------------------

      void writeDouble (const char * attrName, double            theValue);
      void writeInt    (const char * attrName, int               theValue);
      void writeBool   (const char * attrName, bool              theValue);
      void writeString (const char * attrName, const WitString & theValue);

      //------------------------------------------------------------------------

      void writeObjVec (
            const char *      attrName,
            const WitObjVec & theObjVec,
            double            defaultVal);
         //
         // Write for an ObjVec.
         // No-op in Multi-Objective mode.

      void writeSolnData (const char * fileName);
         //
         // Writes the solution data file for myProblem ().
         // fileName is the name of the file to be written.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDataWriter);

      void writeData (const char * fileName, bool solnData);
         //
         // Writes an input data file for myProblem ().
         // fileName is the name of the file to be written.
         // If solnData is true,  the solution data will be written.
         // If solnData is false, the problem  data will be written.

      const char * withSlashes (const char * theCstring);
         //
         // Returns a c-string whose content is theCstring with a "\" in front
         // of each special char.

      inline static bool isSpecial (char theChar)
         {
         return ((theChar == '\"') or (theChar == '\\'));
         }
         //
         // Returns true, iff theChar is "special", i.e., one of the characters
         // that must be preceeded by a "\" in the file format.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitComponent * curComp_;
         //
         // The Component currently being written, if any; else NULL.

      WitString buffer_;
         //
         // A buffer for expanding Strings with "\"s.
   };

#endif
@


1.36
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.35
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d29 2
a30 50
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitDataWriter (WitProblem * theProblem);
//
// ProbAssoc <<< theProblem.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitDataWriter ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void writeData (const char * fileName);
//
// Writes an input data file for myProblem ().
// fileName is the name of the file to be written.

void writeEndCommand ();
//
// Writes the semicolon at the end of a command in the input data
// output file.

void writeFirstKeyWord (const char * theKeyWord);
//
// Writes theKeyWord on a new line.

void writeKeyWord (const char * theKeyWord);
//
// Writes theKeyWord on the current line.

void writeFirstInFileKeyWord (const char * theKeyWord);
//
// Writes theKeyWord, assuming it's the first token in the file.

void writeIntValue (int theInt);
//
// Writes theInt.

void writeStringValue (const WitString & theString);
//
// Writes theString.
d32 175
a206 127
void writeCstringValue (const char * theCstring);
//
// Writes theCstring.

//------------------------------------------------------------------------
// writeVector (attrName, theVector, defaultVal) functions:
//
// Each of these functions writes the value of theVector to the input data
// output file, or no-op, if the attribute is at its default value.
// attrName is the name of the attribute.
// defaultVal is the default value of the attribute.
//------------------------------------------------------------------------

void writeVector (
const char *              attrName,
const WitFlexVec <bool> & theVector,
bool                      defaultVal);

void writeVector (
const char *              attrName,
const WitTVec    <int> &  theVector,
int                       defaultVal);

void writeVector (
const char *              attrName,
const WitFlexVec <int> &  theVector,
int                       defaultVal);

void writeVector (
const char *              attrName,
const WitDblFlexVec &     theVector,
double                    defaultVal);

void writeVector (
const char *              attrName,
const WitTVec <double> &  theVector,
double                    defaultVal);

//------------------------------------------------------------------------
// Each of these functions writes an attribute iff its current value is
// different from its default value.
//------------------------------------------------------------------------

void writeDouble (
const char *      attrName,
double            theValue,
double            defaultVal);

void writeInt (
const char *      attrName,
int               theValue,
int               defaultVal);

void writeBool (
const char *      attrName,
bool              theValue,
bool              defaultVal);

void writeString (
const char *      attrName,
const WitString & theValue,
const char *      defaultVal);

//------------------------------------------------------------------------
// Each of these functions writes an attribute unconditionally.
//------------------------------------------------------------------------

void writeDouble (const char * attrName, double            theValue);
void writeInt    (const char * attrName, int               theValue);
void writeBool   (const char * attrName, bool              theValue);
void writeString (const char * attrName, const WitString & theValue);

//------------------------------------------------------------------------

void writeObjVec (
const char *      attrName,
const WitObjVec & theObjVec,
double            defaultVal);
//
// Write for an ObjVec.
// No-op in Multi-Objective mode.

void writeSolnData (const char * fileName);
//
// Writes the solution data file for myProblem ().
// fileName is the name of the file to be written.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitDataWriter);

void writeData (const char * fileName, bool solnData);
//
// Writes an input data file for myProblem ().
// fileName is the name of the file to be written.
// If solnData is true,  the solution data will be written.
// If solnData is false, the problem  data will be written.

const char * withSlashes (const char * theCstring);
//
// Returns a c-string whose content is theCstring with a "\" in front
// of each special char.

inline static bool isSpecial (char theChar)
{
return ((theChar == '\"') or (theChar == '\\'));
}
//
// Returns true, iff theChar is "special", i.e., one of the characters
// that must be preceeded by a "\" in the file format.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitComponent * curComp_;
//
// The Component currently being written, if any; else NULL.

WitString buffer_;
//
// A buffer for expanding Strings with "\"s.
};
@


1.34
log
@CPLEX Parameters
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d29 50
a78 2
   {
   public:
d80 127
a206 175
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDataWriter (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitDataWriter ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void writeData (const char * fileName);
         //
         // Writes an input data file for myProblem ().
         // fileName is the name of the file to be written.

      void writeEndCommand ();
         //
         // Writes the semicolon at the end of a command in the input data
         // output file.

      void writeFirstKeyWord (const char * theKeyWord);
         //
         // Writes theKeyWord on a new line.

      void writeKeyWord (const char * theKeyWord);
         //
         // Writes theKeyWord on the current line.

      void writeFirstInFileKeyWord (const char * theKeyWord);
         //
         // Writes theKeyWord, assuming it's the first token in the file.

      void writeIntValue (int theInt);
         //
         // Writes theInt.

      void writeStringValue (const WitString & theString);
         //
         // Writes theString.

      void writeCstringValue (const char * theCstring);
         //
         // Writes theCstring.

      //------------------------------------------------------------------------
      // writeVector (attrName, theVector, defaultVal) functions:
      //
      // Each of these functions writes the value of theVector to the input data
      // output file, or no-op, if the attribute is at its default value.
      // attrName is the name of the attribute.
      // defaultVal is the default value of the attribute.
      //------------------------------------------------------------------------

      void writeVector (
         const char *              attrName,
         const WitFlexVec <bool> & theVector,
         bool                      defaultVal);

      void writeVector (
         const char *              attrName,
         const WitTVec    <int> &  theVector,
         int                       defaultVal);

      void writeVector (
         const char *              attrName,
         const WitFlexVec <int> &  theVector,
         int                       defaultVal);

      void writeVector (
         const char *              attrName,
         const WitDblFlexVec &     theVector,
         double                    defaultVal);

      void writeVector (
         const char *              attrName,
         const WitTVec <double> &  theVector,
         double                    defaultVal);

      //------------------------------------------------------------------------
      // Each of these functions writes an attribute iff its current value is
      // different from its default value.
      //------------------------------------------------------------------------

      void writeDouble (
            const char *      attrName,
            double            theValue,
            double            defaultVal);

      void writeInt (
            const char *      attrName,
            int               theValue,
            int               defaultVal);

      void writeBool (
            const char *      attrName,
            bool              theValue, 
            bool              defaultVal);

      void writeString (
            const char *      attrName,
            const WitString & theValue,
            const char *      defaultVal);

      //------------------------------------------------------------------------
      // Each of these functions writes an attribute unconditionally.
      //------------------------------------------------------------------------

      void writeDouble (const char * attrName, double            theValue);
      void writeInt    (const char * attrName, int               theValue);
      void writeBool   (const char * attrName, bool              theValue);
      void writeString (const char * attrName, const WitString & theValue);

      //------------------------------------------------------------------------

      void writeObjVec (
            const char *      attrName,
            const WitObjVec & theObjVec,
            double            defaultVal);
         //
         // Write for an ObjVec.
         // No-op in Multi-Objective mode.

      void writeSolnData (const char * fileName);
         //
         // Writes the solution data file for myProblem ().
         // fileName is the name of the file to be written.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDataWriter);

      void writeData (const char * fileName, bool solnData);
         //
         // Writes an input data file for myProblem ().
         // fileName is the name of the file to be written.
         // If solnData is true,  the solution data will be written.
         // If solnData is false, the problem  data will be written.

      const char * withSlashes (const char * theCstring);
         //
         // Returns a c-string whose content is theCstring with a "\" in front
         // of each special char.

      inline static bool isSpecial (char theChar)
         {
         return ((theChar == '\"') or (theChar == '\\'));
         }
         //
         // Returns true, iff theChar is "special", i.e., one of the characters
         // that must be preceeded by a "\" in the file format.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitComponent * curComp_;
         //
         // The Component currently being written, if any; else NULL.

      WitString buffer_;
         //
         // A buffer for expanding Strings with "\"s.
   };
@


1.33
log
@Heuristic Adjustment
@
text
@d119 3
d123 1
a123 1
      void writeObjVec (
d125 1
a125 1
            const WitObjVec & theObjVec,
a126 10
         //
         // Write for an ObjVec.
         // No-op in Multi-Objective mode.

      void writeDouble (
            const char * attrName,
            double       theValue,
            double       defaultVal);
         //
         // Write for a double.
d129 3
a131 5
            const char * attrName,
            int          theValue,
            int          defaultVal);
         //
         // Write for an int.
d133 4
a136 3
      void writeBool (const char * attrName, bool theValue, bool defaultVal);
         //
         // Write for a bool.
d142 16
d159 2
a160 1
         // Write for a String.
@


1.32
log
@Multi-objective mode
@
text
@d19 1
a19 1
#include <Compo.h>
@


1.31
log
@Multi-Objective Mode
@
text
@d80 4
d149 1
a149 1
            const WitString & defaultVal);
d173 1
a173 1
      const WitString & withSlashes (const WitString & theString);
d175 2
a176 2
         // Returns a String whose content is theString with a "\" in front of
         // each special char.
@


1.30
log
@Multi-Objective Mode
@
text
@d116 8
@


1.29
log
@Stochastic Implosion
@
text
@d72 1
a72 1
      void writeIntValue (int i);
d74 1
a74 1
         // Writes i.
@


1.28
log
@Stochastic Implosion
@
text
@d178 4
@


1.27
log
@Stochastic Implosion
@
text
@d109 5
@


1.26
log
@Updated the copyright date on all source files.
@
text
@a110 7
      void writeVectorUncond (
            const char *          attrName,
            const WitDblFlexVec & theVector,
            double                defaultVal);
         //
         // Same as writeVector, but writes unconditionally.

@


1.25
log
@Vector Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.24
log
@Double Precision.
@
text
@d90 3
a92 3
         const char *                attrName,
         const WitTVec    <int> &    theVector,
         int                         defaultVal);
d95 3
a97 3
         const char *                attrName,
         const WitFlexVec <int> &    theVector,
         int                         defaultVal);
d100 8
a107 3
         const char *          attrName,
         const WitDblFlexVec & theVector,
         double                defaultVal);
@


1.23
log
@Double Precision.
@
text
@a99 5
         const char *                attrName,
         const WitTVec    <float> &  theVector,
         float                       defaultVal);

      void writeVector (
d109 1
a109 1
            float                 defaultVal);
a156 46

      //------------------------------------------------------------------------
      // writeSingle (theVector) functions:
      //
      // Each of these functions writes the value of theVector to the input data
      // output file, if it is a single replicated value, else no-op. 
      // Returns true, iff the write happened.
      //------------------------------------------------------------------------

      bool writeSingle (const WitTVec    <float>  &);

      bool writeSingle (const WitDblFlexVec &);

      bool writeSingle (const WitTVec    <int>    &);
      bool writeSingle (const WitFlexVec <int>    &);

      //------------------------------------------------------------------------
      // writeSparse (theVector, defaultVal) functions:
      //
      // Each of these functions writes the value of theVector to the input data
      // output file, if it is sparse relative to defaultVal, else no-op.
      // Returns true, iff the write happened.
      //------------------------------------------------------------------------

      bool writeSparse (const WitTVec    <float> &,  float);
 
      bool writeSparse (const WitDblFlexVec &,       double);

      bool writeSparse (const WitTVec    <int>   &,  int);
      bool writeSparse (const WitFlexVec <int>   &,  int);

      //------------------------------------------------------------------------
      // writeDense (theVector) functions:
      //
      // Each of these functions writes the value of theVector to the input data
      // output file, in dense format.
      //------------------------------------------------------------------------

      void writeDense (const WitTVec    <float> &);

      void writeDense (const WitDblFlexVec &);

      void writeDense (const WitTVec    <int>   &);
      void writeDense (const WitFlexVec <int>   &);

      //------------------------------------------------------------------------
@


1.22
log
@Double Precision.
@
text
@d105 3
a107 3
         const char *                attrName,
         const WitFlexVec <double> & theVector,
         double                      defaultVal);
d112 3
a114 3
            const char *                attrName,
            const WitFlexVec <double> & theVector,
            float                       defaultVal);
d173 1
a173 1
      bool writeSingle (const WitFlexVec <double> &);
d188 1
a188 1
      bool writeSparse (const WitFlexVec <double> &, double);
d202 1
a202 1
      void writeDense (const WitFlexVec <double> &);
@


1.21
log
@Double Precision.
@
text
@a105 5
         const WitFlexVec <float> &  theVector,
         float                       defaultVal);

      void writeVector (
         const char *                attrName,
a171 1
      bool writeSingle (const WitFlexVec <float>  &);
a186 1
      bool writeSparse (const WitFlexVec <float> &,  float);
a200 1
      void writeDense (const WitFlexVec <float> &);
@


1.20
log
@Double Precision.
@
text
@a113 5
      void writeVector (
         const char *                attrName,
         const WitRealVec &          theVector,
         double                      defaultVal);

d117 3
a119 3
            const char *       attrName,
            const WitRealVec & theVector,
            float              defaultVal);
@


1.19
log
@Double Precision.
@
text
@d116 1
a116 11
         const WitFltRealVec &       theVector,
         double                      defaultVal);

      void writeVector (
         const char *                attrName,
         const WitDblRealVec &       theVector,
         double                      defaultVal);

      void writeVector (
         const char *                attrName,
         const WitFltRealTVc &       theVector,
@


1.18
log
@Double Precision.
@
text
@d116 11
a126 1
         const WitRealVec &          theVector,
@


1.17
log
@Double Precision.
@
text
@d122 3
a124 3
            const char *                attrName,
            const WitFlexVec <float> &  theVector,
            float                       defaultVal);
@


1.16
log
@Continued double precision.
@
text
@d114 5
@


1.15
log
@Continued double precision.
@
text
@d123 1
a123 1
      void writeStrDbl (
d125 2
a126 2
            StrDbl       theValue,
            StrDbl       defaultVal);
d128 1
a128 1
         // Write for a StrDbl.
@


1.14
log
@Continued double precision.
@
text
@a122 7
      void writeFloat (
            const char * attrName,
            float        theValue,
            float        defaultVal);
         //
         // Write for a float.

@


1.13
log
@Continued double precision.
@
text
@d130 1
a130 1
      void writeDouble (
d132 2
a133 2
            double       theValue,
            double       defaultVal);
d135 1
a135 1
         // Write for a float.
a235 5

      void writeFloat (const char *, double, double);
         //
         // Not implemented,
         // Remove after conversion of float scalar attrs to double.
@


1.12
log
@Continued double precision.
@
text
@d237 5
@


1.11
log
@Continued implementation of PIP.
@
text
@d125 9
a133 2
            float theValue,
            float defaultVal);
d139 2
a140 2
            int theValue,
            int defaultVal);
d149 1
a149 1
            const char * attrName,
@


1.10
log
@Continued implementation of PIP.
@
text
@d89 24
a112 7
      void writeVector (const char *, const WitTVec    <float> &,  float);
      void writeVector (const char *, const WitFlexVec <float> &,  float);

      void writeVector (const char *, const WitFlexVec <double> &, double);

      void writeVector (const char *, const WitTVec    <int>   &,  int);
      void writeVector (const char *, const WitFlexVec <int>   &,  int);
a114 7
      // writeVectorUncond (attrName, theVector, defaultVal) functions:
      //
      // Same as writeVector, but writes unconditionally.
      //------------------------------------------------------------------------

      void writeVectorUncond (const char *, const WitTVec    <float> &, float);
      void writeVectorUncond (const char *, const WitFlexVec <float> &, float);
d116 6
a121 7
      void writeVectorUncond (const char *, const WitFlexVec <double> &, 
                                                                        double);

      void writeVectorUncond (const char *, const WitTVec    <int>   &, int);
      void writeVectorUncond (const char *, const WitFlexVec <int>   &, int);

      //------------------------------------------------------------------------
@


1.9
log
@Internal changes.
@
text
@d152 1
a152 3
      void writeData (
            const char *           fileName,
            void (WitComponent::* writeDataFunc) ());
d156 2
a157 2
         // writeDataFunc is the function to call the write the data for each
         // component.
@


1.8
log
@Internal changes.
@
text
@d217 1
a217 1
         return ((theChar == '\"') || (theChar == '\\'));
@


1.7
log
@Continued implementation of single-source.
@
text
@d128 1
a128 4
      void writeBoolean (
            const char * attrName,
            WitBoolean theValue,
            WitBoolean defaultVal);
d130 1
a130 1
         // Write for a Boolean.
d166 1
a166 1
      // Returns TRUE, iff the write happened.
d169 2
a170 2
      WitBoolean writeSingle (const WitTVec    <float>  &);
      WitBoolean writeSingle (const WitFlexVec <float>  &);
d172 1
a172 1
      WitBoolean writeSingle (const WitFlexVec <double> &);
d174 2
a175 2
      WitBoolean writeSingle (const WitTVec    <int>    &);
      WitBoolean writeSingle (const WitFlexVec <int>    &);
d182 1
a182 1
      // Returns TRUE, iff the write happened.
d185 2
a186 2
      WitBoolean writeSparse (const WitTVec    <float> &,  float);
      WitBoolean writeSparse (const WitFlexVec <float> &,  float);
d188 1
a188 1
      WitBoolean writeSparse (const WitFlexVec <double> &, double);
d190 2
a191 2
      WitBoolean writeSparse (const WitTVec    <int>   &,  int);
      WitBoolean writeSparse (const WitFlexVec <int>   &,  int);
d215 1
a215 1
      inline static WitBoolean isSpecial (char theChar)
d220 1
a220 1
         // Returns TRUE, iff theChar is "special", i.e., one of the characters
@


1.6
log
@Preliminary work on single source.
@
text
@d20 1
d230 1
a230 1
      WitString & buffer_;
a232 1
         // Declared as a reference, to be "mutable".
@


1.5
log
@Continued preliminary work on single source.
@
text
@d89 1
a89 1
      void writeVector (const char *, const WitFlexVec (float) &,  float);
d91 1
a91 1
      void writeVector (const char *, const WitFlexVec (double) &, double);
d94 1
a94 1
      void writeVector (const char *, const WitFlexVec (int)   &,  int);
d103 1
a103 1
      void writeVectorUncond (const char *, const WitFlexVec (float) &, float);
d105 1
a105 1
      void writeVectorUncond (const char *, const WitFlexVec (double) &, 
d109 1
a109 1
      void writeVectorUncond (const char *, const WitFlexVec (int)   &, int);
d172 1
a172 1
      WitBoolean writeSingle (const WitFlexVec (float)  &);
d174 1
a174 1
      WitBoolean writeSingle (const WitFlexVec (double) &);
d177 1
a177 1
      WitBoolean writeSingle (const WitFlexVec (int)    &);
d188 1
a188 1
      WitBoolean writeSparse (const WitFlexVec (float) &,  float);
d190 1
a190 1
      WitBoolean writeSparse (const WitFlexVec (double) &, double);
d193 1
a193 1
      WitBoolean writeSparse (const WitFlexVec (int)   &,  int);
d203 1
a203 1
      void writeDense (const WitFlexVec (float) &);
d205 1
a205 1
      void writeDense (const WitFlexVec (double) &);
d208 1
a208 1
      void writeDense (const WitFlexVec (int)   &);
@


1.4
log
@Refactoring for selection splitting.
@
text
@d88 1
a88 1
      void writeVector (const char *, const WitTVec    (float) &,  float);
d93 1
a93 1
      void writeVector (const char *, const WitTVec    (int)   &,  int);
d102 1
a102 1
      void writeVectorUncond (const char *, const WitTVec    (float) &, float);
d108 1
a108 1
      void writeVectorUncond (const char *, const WitTVec    (int)   &, int);
d171 1
a171 1
      WitBoolean writeSingle (const WitTVec    (float)  &);
d176 1
a176 1
      WitBoolean writeSingle (const WitTVec    (int)    &);
d187 1
a187 1
      WitBoolean writeSparse (const WitTVec    (float) &,  float);
d192 1
a192 1
      WitBoolean writeSparse (const WitTVec    (int)   &,  int);
d202 1
a202 1
      void writeDense (const WitTVec    (float) &);
d207 1
a207 1
      void writeDense (const WitTVec    (int)   &);
@


1.3
log
@Fixed bug: MCL Client Error on emptyBom msg.
@
text
@d152 1
a152 3
      copyCtorAndAssignment (WitDataWriter);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d88 2
a89 2
      void writeVector (const char *, const WitTVec    (float) &, float);
      void writeVector (const char *, const WitFlexVec (float) &, float);
d91 4
a94 2
      void writeVector (const char *, const WitTVec    (int)   &, int);
      void writeVector (const char *, const WitFlexVec (int)   &, int);
d105 3
d173 2
a174 2
      WitBoolean writeSingle (const WitTVec    (float) &);
      WitBoolean writeSingle (const WitFlexVec (float) &);
d176 4
a179 2
      WitBoolean writeSingle (const WitTVec    (int)   &);
      WitBoolean writeSingle (const WitFlexVec (int)   &);
d189 4
a192 2
      WitBoolean writeSparse (const WitTVec    (float) &, float);
      WitBoolean writeSparse (const WitFlexVec (float) &, float);
d194 2
a195 2
      WitBoolean writeSparse (const WitTVec    (int)   &, int);
      WitBoolean writeSparse (const WitFlexVec (int)   &, int);
d206 2
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
