head	1.19;
access;
symbols
	sce_5_01_20080919:1.16
	latest_sce_4_20_20060523:1.16.0.2
	sce_4_20_20060523:1.16
	latest_sce4_20_OSL:1.15.0.2
	sce_4_20_OSL:1.15
	sce_410_withVa:1.15
	sce_4_05_20040511:1.12
	sce_4_00_20040201:1.7
	nextGenBranch:1.6.0.2
	nextGenRoot:1.6
	sce_3_30_20030627:1.6
	EndRw-branch:1.5.0.4
	Root-of-EndRw:1.5
	rwToStl:1.5.0.2
	latest_sce_3_10_20010924:1.4.0.6
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.4.0.4
	sce_3_00_20010601:1.4
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2011.09.28.23.50.39;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.09.24.00.28.55;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.08.30.20.18.22;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.02.17.34.15;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.02.23.21.06.08;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.02.23.15.40.16;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.02.10.23.56.57;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.04.13.18.59.01;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.04.12.23.02.55;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.12.22.48.05;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.04.09.23.09.34;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.08.22.24.25;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.01.21.05.06;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.11.25.15.15.23;	author rwToStl;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.02.20.53.17;	author rjw;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2001.01.20.00.44.23;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.28;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.57.07;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.31;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.5.2.1
date	2002.11.08.16.11.33;	author rwToStl;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.24.13.53.31;	author wit;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef VecBSH
#define VecBSH

//------------------------------------------------------------------------------
//
//     Source file: VecBS.h
//
//     Contains the declaration of classes VectorSpec and BoundSetSpec
//------------------------------------------------------------------------------

#include <Util.h>

#include <vector>

#define VSIZE 25

//------------------------------------------------------------------------------
//
//     Definition of class VectorSpec to implement
//     "vector formats":
//
//          DRParmType::boolVector
//          DRParmType::intVector
//          DRParmType::doubleVector
//
//     When a Wit function requires a vector format, a vector (of the
//     required datatype) is constructed and a pointer to the vector is
//     passed to the function.  The length of the vector is a parameter	
//     and it's usually equal to myProblem->nPeriods()
//------------------------------------------------------------------------------

class WitVectorSpec
{

public:

  enum vType {undefined_, single_, sparse_, dense_};

  // Constructors and destructors
  WitVectorSpec();
  WitVectorSpec(WitProblem * theProblem, vType, WitDRParmType::Tag);
  ~WitVectorSpec();

  // Operations
  int      getIntVal(int i);     // where i= index into integer vector
  double   getDoubleVal(int i);  //   0, 1, ..., nval_-1
  int      getPeriodVal(int i);

  WitParseRC   addBoolVal   (bool);
  WitParseRC   addIntVal    (int);
  WitParseRC   addDoubleVal (double);
  WitParseRC   addPeriodVal (int);

  WitBoolean * getBoolVec       (bool    defVal);
  WitBoolean * getBoolVecSingle ();
  WitBoolean * getBoolVecDense  ();
  WitBoolean * getBoolVecSparse (bool    defVal);

  int *        getIntVec        (int    defVal);
  int *        getIntVecSingle  ();
  int *        getIntVecDense   ();
  int *        getIntVecSparse  (int    defVal);

  double *     getDblVec        (double defVal);

  // Accessors
  vType              formatType() const;
  WitDRParmType::Tag dataType() const;
  int                nval() const;
  int                nPeriods() const;
  int                nEntries() const;
  int                aSize() const;

  void     setFormatType(const vType);
  void     setDataType(const WitDRParmType::Tag);

private:
  vType              formatType_;    // how the vector format is specified

  WitDRParmType::Tag dataType_;      // should be one of the following:
                                     //    DRParmType::boolVector
                                     //    DRParmType::intVector
                                     //    DRParmType::doubleVector

  int                nPeriods_;      // number of periods
  int                nEntries_;      // number of specified values 
  int                aSize_;         // actual size of the time vector

  std::vector <int> *    pvec_;      // a vector of "periods"
  std::vector <bool> *   bvec_;      // a vector of booleans
  std::vector <int> *    ivec_;      // a vector of integers
  std::vector <double> * dvec_;      // a vector of doubles

     // pointers to the actual vectors to be passed to the API functions.
     // The vector to be constructed depends on the datatype.
     //
  WitBoolean * boolCVec_;
  int *        intCVec_;
  double *     dblCVec_;

     // Convenient-access functions for the vectors.
     //
  inline std::vector <int> & pvec ()
     {
     witAssert (pvec_ != NULL);

     return * pvec_;
     }

  inline std::vector <bool> & bvec ()
     {
     witAssert (bvec_ != NULL);

     return * bvec_;
     }

  inline std::vector <int> & ivec ()
     {
     witAssert (ivec_ != NULL);

     return * ivec_;
     }

  inline std::vector <double> & dvec ()
     {
     witAssert (dvec_ != NULL);

     return * dvec_;
     }
};

//------------------------------------------------------------------------------
//
//     Declaration of class BoundSetSpec to implement BoundSet
//     attributes.  Each BoundSetSpec object may be of type execBounds,
//     stockBounds or cumShipBounds, and may include any or all of
//     the following in any order:
//
//          hardLB <vector format>
//          softLB <vector format>
//          hardUB <vector format>
//
//     When a Wit function requires a bound set, a BoundSetSpec object is
//     constructed, which in turn contains 3 pointers to VectorSpec objects
//     (of the required datatype).  A pointer to the BoundSetSpec object is
//     passed to the function.  The length of each vector is equal to
//     myProblem->nPeriods()
//------------------------------------------------------------------------------

class WitBoundSetSpec
{

public:

  typedef enum bsType {undefined, exec, stock, cumShip} bsType;
  enum bounds {hardlb, softlb, hardub};

  // Constructors and destructors
  WitBoundSetSpec();
  WitBoundSetSpec(bsType);
  ~WitBoundSetSpec();

  // Operations

  // Accessors
  bsType         boundSetType() const;
  WitVectorSpec* hardLBVec() const;
  WitVectorSpec* softLBVec() const;
  WitVectorSpec* hardUBVec() const;

  void           setHardLBVec(WitVectorSpec*);
  void           setSoftLBVec(WitVectorSpec*);
  void           setHardUBVec(WitVectorSpec*);

private:

  bsType         boundSetType_;   // how the bound set is specified

  WitVectorSpec  *hardLBVec_;     // pointer to hardLB vector
  WitVectorSpec  *softLBVec_;     // pointer to softLB vector
  WitVectorSpec  *hardUBVec_;     // pointer to hardUB vector
};

#endif
@


1.18
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 14
a19 9
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished);
//     OCO Source Modules
//     IBM Confidential
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//
@


1.17
log
@Revised the copyright date.
@
text
@d6 1
a6 1
//     (c) Copyright IBM Corp. 2011.
d37 1
a37 1
//     passed to the function.  The length of the vector is a parameter
d46 1
a46 1
enum vType {undefined_, single_, sparse_, dense_};
d48 34
a81 34
// Constructors and destructors
WitVectorSpec();
WitVectorSpec(WitProblem * theProblem, vType, WitDRParmType::Tag);
~WitVectorSpec();

// Operations
int      getIntVal(int i);     // where i= index into integer vector
double   getDoubleVal(int i);  //   0, 1, ..., nval_-1
int      getPeriodVal(int i);

WitParseRC   addBoolVal   (bool);
WitParseRC   addIntVal    (int);
WitParseRC   addDoubleVal (double);
WitParseRC   addPeriodVal (int);

WitBoolean * getBoolVec       (bool    defVal);
WitBoolean * getBoolVecSingle ();
WitBoolean * getBoolVecDense  ();
WitBoolean * getBoolVecSparse (bool    defVal);

int *        getIntVec        (int    defVal);
int *        getIntVecSingle  ();
int *        getIntVecDense   ();
int *        getIntVecSparse  (int    defVal);

double *     getDblVec        (double defVal);

// Accessors
vType              formatType() const;
WitDRParmType::Tag dataType() const;
int                nval() const;
int                nPeriods() const;
int                nEntries() const;
int                aSize() const;
d83 2
a84 2
void     setFormatType(const vType);
void     setDataType(const WitDRParmType::Tag);
d87 1
a87 1
vType              formatType_;    // how the vector format is specified
d89 47
a135 4
WitDRParmType::Tag dataType_;      // should be one of the following:
//    DRParmType::boolVector
//    DRParmType::intVector
//    DRParmType::doubleVector
d137 2
a138 45
int                nPeriods_;      // number of periods
int                nEntries_;      // number of specified values
int                aSize_;         // actual size of the time vector

std::vector <int> *    pvec_;      // a vector of "periods"
std::vector <bool> *   bvec_;      // a vector of booleans
std::vector <int> *    ivec_;      // a vector of integers
std::vector <double> * dvec_;      // a vector of doubles

// pointers to the actual vectors to be passed to the API functions.
// The vector to be constructed depends on the datatype.
//
WitBoolean * boolCVec_;
int *        intCVec_;
double *     dblCVec_;

// Convenient-access functions for the vectors.
//
inline std::vector <int> & pvec ()
{
witAssert (pvec_ != NULL);

return * pvec_;
}

inline std::vector <bool> & bvec ()
{
witAssert (bvec_ != NULL);

return * bvec_;
}

inline std::vector <int> & ivec ()
{
witAssert (ivec_ != NULL);

return * ivec_;
}

inline std::vector <double> & dvec ()
{
witAssert (dvec_ != NULL);

return * dvec_;
}
d164 2
a165 2
typedef enum bsType {undefined, exec, stock, cumShip} bsType;
enum bounds {hardlb, softlb, hardub};
d167 16
a182 16
// Constructors and destructors
WitBoundSetSpec();
WitBoundSetSpec(bsType);
~WitBoundSetSpec();

// Operations

// Accessors
bsType         boundSetType() const;
WitVectorSpec* hardLBVec() const;
WitVectorSpec* softLBVec() const;
WitVectorSpec* hardUBVec() const;

void           setHardLBVec(WitVectorSpec*);
void           setSoftLBVec(WitVectorSpec*);
void           setHardUBVec(WitVectorSpec*);
d186 1
a186 1
bsType         boundSetType_;   // how the bound set is specified
d188 3
a190 3
WitVectorSpec  *hardLBVec_;     // pointer to hardLB vector
WitVectorSpec  *softLBVec_;     // pointer to softLB vector
WitVectorSpec  *hardUBVec_;     // pointer to hardUB vector
@


1.16
log
@Updated the copyright date on all source files.
@
text
@d6 1
a6 1
//     (c) Copyright IBM Corp. 2006.
d37 1
a37 1
//     passed to the function.  The length of the vector is a parameter	
d46 1
a46 1
  enum vType {undefined_, single_, sparse_, dense_};
d48 34
a81 34
  // Constructors and destructors
  WitVectorSpec();
  WitVectorSpec(WitProblem * theProblem, vType, WitDRParmType::Tag);
  ~WitVectorSpec();

  // Operations
  int      getIntVal(int i);     // where i= index into integer vector
  double   getDoubleVal(int i);  //   0, 1, ..., nval_-1
  int      getPeriodVal(int i);

  WitParseRC   addBoolVal   (bool);
  WitParseRC   addIntVal    (int);
  WitParseRC   addDoubleVal (double);
  WitParseRC   addPeriodVal (int);

  WitBoolean * getBoolVec       (bool    defVal);
  WitBoolean * getBoolVecSingle ();
  WitBoolean * getBoolVecDense  ();
  WitBoolean * getBoolVecSparse (bool    defVal);

  int *        getIntVec        (int    defVal);
  int *        getIntVecSingle  ();
  int *        getIntVecDense   ();
  int *        getIntVecSparse  (int    defVal);

  double *     getDblVec        (double defVal);

  // Accessors
  vType              formatType() const;
  WitDRParmType::Tag dataType() const;
  int                nval() const;
  int                nPeriods() const;
  int                nEntries() const;
  int                aSize() const;
d83 2
a84 2
  void     setFormatType(const vType);
  void     setDataType(const WitDRParmType::Tag);
d87 1
a87 1
  vType              formatType_;    // how the vector format is specified
d89 4
a92 47
  WitDRParmType::Tag dataType_;      // should be one of the following:
                                     //    DRParmType::boolVector
                                     //    DRParmType::intVector
                                     //    DRParmType::doubleVector

  int                nPeriods_;      // number of periods
  int                nEntries_;      // number of specified values 
  int                aSize_;         // actual size of the time vector

  std::vector <int> *    pvec_;      // a vector of "periods"
  std::vector <bool> *   bvec_;      // a vector of booleans
  std::vector <int> *    ivec_;      // a vector of integers
  std::vector <double> * dvec_;      // a vector of doubles

     // pointers to the actual vectors to be passed to the API functions.
     // The vector to be constructed depends on the datatype.
     //
  WitBoolean * boolCVec_;
  int *        intCVec_;
  double *     dblCVec_;

     // Convenient-access functions for the vectors.
     //
  inline std::vector <int> & pvec ()
     {
     witAssert (pvec_ != NULL);

     return * pvec_;
     }

  inline std::vector <bool> & bvec ()
     {
     witAssert (bvec_ != NULL);

     return * bvec_;
     }

  inline std::vector <int> & ivec ()
     {
     witAssert (ivec_ != NULL);

     return * ivec_;
     }

  inline std::vector <double> & dvec ()
     {
     witAssert (dvec_ != NULL);
d94 45
a138 2
     return * dvec_;
     }
d164 2
a165 2
  typedef enum bsType {undefined, exec, stock, cumShip} bsType;
  enum bounds {hardlb, softlb, hardub};
d167 16
a182 16
  // Constructors and destructors
  WitBoundSetSpec();
  WitBoundSetSpec(bsType);
  ~WitBoundSetSpec();

  // Operations

  // Accessors
  bsType         boundSetType() const;
  WitVectorSpec* hardLBVec() const;
  WitVectorSpec* softLBVec() const;
  WitVectorSpec* hardUBVec() const;

  void           setHardLBVec(WitVectorSpec*);
  void           setSoftLBVec(WitVectorSpec*);
  void           setHardUBVec(WitVectorSpec*);
d186 1
a186 1
  bsType         boundSetType_;   // how the bound set is specified
d188 3
a190 3
  WitVectorSpec  *hardLBVec_;     // pointer to hardLB vector
  WitVectorSpec  *softLBVec_;     // pointer to softLB vector
  WitVectorSpec  *hardUBVec_;     // pointer to hardUB vector
@


1.15
log
@Vector Prop-Rt.
@
text
@d6 1
a6 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.14
log
@Vector Prop-Rt.
@
text
@d54 1
a54 1
  int      getIntVal(int i);    // where i= index into integer vector
d63 9
a71 4
  int *    getIntVec       (int    defVal);
  int *    getSingleIntVec ();
  int *    getDenseIntVec  ();
  int *    getSparseIntVec (int    defVal);
d73 1
a73 1
  double * getDblVec       (double defVal);
d99 1
d106 3
a108 3
  int *    intCVec_;
  double * dblCVec_;

d119 7
@


1.13
log
@Vector PropRt.
@
text
@d58 9
a66 3
  WitParseRC   addIntVal(int);
  WitParseRC   addDoubleVal(double);
  WitParseRC   addPeriodVal(int);
d68 1
a68 2
  int *    getIntVec (int    defVal);
  double * getDblVec (double defVal);
@


1.12
log
@Double Precision.
@
text
@d31 1
d78 6
a83 2
  WitDRParmType::Tag dataType_;      // should be DRParmType::intVector
                                     // or DRParmType::doubleVector
@


1.11
log
@Double Precision.
@
text
@d54 1
a54 1
  double   getFloatVal(int i);  //   0, 1, ..., nval_-1
d58 1
a58 1
  WitParseRC   addFloatVal(double);
d62 1
a62 1
  double * getFltVec (double defVal);
d85 1
a85 1
  std::vector <double> * fvec_;      // a vector of floats, stored as doubles
d91 1
a91 1
  double * fltCVec_;
d110 1
a110 1
  inline std::vector <double> & fvec ()
d112 1
a112 1
     witAssert (fvec_ != NULL);
d114 1
a114 1
     return * fvec_;
@


1.10
log
@Double Precision.
@
text
@d32 1
a32 1
//          DRParmType::floatVector
d78 1
a78 1
                                     // or DRParmType::floatVector
@


1.9
log
@Double Precision.
@
text
@d31 2
a32 2
//          IntVector
//          FloatVector
d49 1
a49 1
  WitVectorSpec(WitProblem * theProblem, vType, pType);
d65 6
a70 6
  vType    formatType() const;
  pType    dataType() const;
  int      nval() const;
  int      nPeriods() const;
  int      nEntries() const;
  int      aSize() const;
d73 1
a73 1
  void     setDataType(const pType);
d76 6
a81 5
  vType    formatType_;             // how the vector format is specified
  pType    dataType_;               // should be IntVector or FloatVector
  int      nPeriods_;               // number of periods
  int      nEntries_;               // number of specified values 
  int      aSize_;                  // actual size of the time vector
@


1.8
log
@Double Precision.
@
text
@d54 1
a54 1
  float    getFloatVal(int i);  //   0, 1, ..., nval_-1
d61 2
a62 2
  int *    getVector (int defVal);
  float *  getVector (double defVal);
d82 3
a84 3
  std::vector <int>    *pvec_;       // a vector of "periods"
  std::vector <int>    *ivec_;       // a vector of integers
  std::vector <double> *fvec_;       // a vector of floats, stored as doubles
d86 9
a114 6

     // pointers to the actual vectors to be passed to the API functions.
     // The vector to be constructed depends on the datatype.
     //
  float * fltCVec_;
  int *   intCVec_;
@


1.7
log
@Continued implementation of PIP.
@
text
@d58 1
a58 1
  WitParseRC   addFloatVal(float);
d61 2
a62 3
  int*     getVector (int defVal);
  float*   getVector (double defVal);
  float*   getVector (float defVal);
d82 30
a111 8
  std::vector<int>    *pvec;         // a vector of "periods"
  std::vector<int>    *ivec;         // a vector of integers
  std::vector<float>  *fvec;         // a vector of floats

  // pointers to the actual vectors to be passed to the API functions.
  // The vector to be constructed depends on the datatype.
  float    *floatTVec;
  int      *intTVec;
@


1.6
log
@modications to change rogueWave tools.h++ to STL
@
text
@d40 1
a40 1
class WitVectorSpec: public WitUtil
d111 1
a111 1
class WitBoundSetSpec: public WitUtil
@


1.5
log
@Preliminary work on single source.
@
text
@d22 1
a22 4
#include <rw/tvordvec.h>
#include <rw/gvector.h>


a25 3
declare (RWGVector, int)
declare (RWGVector, float)

d83 3
a85 3
  RWGVector (int)    *pvec;         // a vector of "periods"
  RWGVector (int)    *ivec;         // a vector of integers
  RWGVector (float)  *fvec;         // a vector of floats
@


1.5.2.1
log
@Migration from Roguewave tools.h++ to STL
@
text
@d22 4
a25 1
#include <vector>
d29 3
d89 3
a91 3
  std::vector<int>    *pvec;         // a vector of "periods"
  std::vector<int>    *ivec;         // a vector of integers
  std::vector<float>  *fvec;         // a vector of floats
@


1.4
log
@Implemented and used class SelMgr.
@
text
@d20 1
a20 1
#include <Vector.h>
d23 1
d25 6
a30 1
#define VSIZE    25
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d20 2
a21 1
#include <rw/gvector.h>
a22 2

#include <RWClient.h>
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d41 2
a42 1
class WitVectorSpec {
d112 2
a113 1
class WitBoundSetSpec {
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
