head	1.27;
access;
symbols;
locks; strict;
comment	@ * @;


1.27
date	2011.09.28.23.49.38;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.09.24.00.28.00;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.08.30.20.17.43;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2010.04.12.22.23.19;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2010.03.29.21.34.22;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2010.03.26.22.22.53;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2010.02.05.20.41.53;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2010.01.29.23.53.01;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2010.01.29.23.22.52;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2010.01.28.23.16.58;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2010.01.28.20.10.12;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2010.01.25.19.45.18;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2009.12.31.20.45.09;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2009.12.28.23.07.44;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2009.12.24.22.58.55;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2009.12.17.22.57.27;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2009.12.15.21.43.50;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.12.14.21.34.54;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.12.12.00.47.37;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.12.11.19.02.17;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.12.09.23.23.17;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.12.09.22.51.31;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.12.08.20.10.13;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.04.23.30.52;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.12.02.20.06.07;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.01.23.34.38;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.11.26.00.24.09;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef MultiObjMgrH
#define MultiObjMgrH

//------------------------------------------------------------------------------
// Header file: "MultiObjMgr.h"
//
// Contains the declaration of class MultiObjMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <List.h>
#include <Str.h>

//------------------------------------------------------------------------------
// Class MultiObjMgr
//
// Responsible for managing multiple objectives mode.
//
// Implemented in MultiObj.C.
//------------------------------------------------------------------------------

class WitMultiObjMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMultiObjMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMultiObjMgr ();

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (const char * defObjectiveListSpec, "Default")

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void copyAttrsFrom (WitMultiObjMgr * theMultiObjMgr);
         //
         // Copies the input attributes of theMultiObjMgr into this MultiObjMgr.

      void writeDataAttrs ();
         //
         // Writes the attributes of this MultiObjMgr to an input data file.

      void writeMultiObjVecs ();
         //
         // Writes the ObjVec attributes to an input data file.

      void display ();
         //
         // Displays the input and preprocessing data for this MultiObjMgr.

      WitObjective * findObjective (const char * theObjName);
         //
         // Finds and returns the Objective belonging to this MultiObjMgr whose
         // name matches theObjName, if any; otherwise returns NULL.

      void validateData ();
         //
         // Verifies that the input data is valid for optimizing implosion in
         // multiple objectives mode.
         // Specifically, this function verifies that the objectiveRanks of the
         // Objectives are unique.

      void writeObjValues ();
         //
         // Writes the objValue attribute for each Objective to the message file

      //------------------------------------------------------------------------
      // "Set" functions
      //------------------------------------------------------------------------

      void setObjectiveList (const WitVector <const char *> & theObjNames);
         //
         // Deletes the current Objectives and creates a new set of Objectives,
         // one for each objective name in theObjNames.

      void setCurrentObjective (WitObjective *);

      void setMultiObjTol (double);

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (double defMultiObjTol, 1.0e-7)

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitList <WitObjective> &, myObjectives)
      accessFunc (WitObjective *,                 currentObjective)
      accessFunc (double,                         multiObjTol)

      void getObjectiveListSpec (WitString & theObjListSpec);
         //
         // Sets theObjListSpec to the String that specifies the list of
         // Objectives owned by this MultiObjMgr.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void clearObjectives ();
         //
         // Deletes the contents of myObjectives_ and clears it.

      void checkUniqueRanks ();
         //
         // Verifies that the objectiveRanks of the Objectives are unique.

      noCopyCtorAssign (WitMultiObjMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitList <WitObjective> myObjectives_;
         //
         // The Objectives owned by this MultiObjMgr.

      WitObjective * currentObjective_;
         //
         // The currently selected Objective.

      double multiObjTol_;
         //
         // Each objective that has already been optimized is constrained to
         // achieve its maximum value minus a tolerance based on multiObjTol_.
   };

#endif
@


1.26
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.25
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d32 2
a33 2
{
public:
d35 3
a37 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d39 1
a39 1
WitMultiObjMgr (WitProblem *);
d41 3
a43 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d45 1
a45 1
~WitMultiObjMgr ();
d47 3
a49 3
//------------------------------------------------------------------------
// Default value functions.
//------------------------------------------------------------------------
d51 1
a51 1
defaultValue (const char * defObjectiveListSpec, "Default")
d53 3
a55 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d57 3
a59 3
void copyAttrsFrom (WitMultiObjMgr * theMultiObjMgr);
//
// Copies the input attributes of theMultiObjMgr into this MultiObjMgr.
d61 3
a63 3
void writeDataAttrs ();
//
// Writes the attributes of this MultiObjMgr to an input data file.
d65 3
a67 3
void writeMultiObjVecs ();
//
// Writes the ObjVec attributes to an input data file.
d69 3
a71 3
void display ();
//
// Displays the input and preprocessing data for this MultiObjMgr.
d73 4
a76 4
WitObjective * findObjective (const char * theObjName);
//
// Finds and returns the Objective belonging to this MultiObjMgr whose
// name matches theObjName, if any; otherwise returns NULL.
d78 6
a83 6
void validateData ();
//
// Verifies that the input data is valid for optimizing implosion in
// multiple objectives mode.
// Specifically, this function verifies that the objectiveRanks of the
// Objectives are unique.
d85 3
a87 3
void writeObjValues ();
//
// Writes the objValue attribute for each Objective to the message file
d89 3
a91 3
//------------------------------------------------------------------------
// "Set" functions
//------------------------------------------------------------------------
d93 4
a96 4
void setObjectiveList (const WitVector <const char *> & theObjNames);
//
// Deletes the current Objectives and creates a new set of Objectives,
// one for each objective name in theObjNames.
d98 1
a98 1
void setCurrentObjective (WitObjective *);
d100 1
a100 1
void setMultiObjTol (double);
d102 3
a104 3
//------------------------------------------------------------------------
// Default value functions.
//------------------------------------------------------------------------
d106 1
a106 1
defaultValue (double defMultiObjTol, 1.0e-7)
d108 3
a110 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d112 3
a114 3
accessFunc (const WitList <WitObjective> &, myObjectives)
accessFunc (WitObjective *,                 currentObjective)
accessFunc (double,                         multiObjTol)
d116 4
a119 4
void getObjectiveListSpec (WitString & theObjListSpec);
//
// Sets theObjListSpec to the String that specifies the list of
// Objectives owned by this MultiObjMgr.
d121 1
a121 1
private:
d123 3
a125 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d127 3
a129 3
void clearObjectives ();
//
// Deletes the contents of myObjectives_ and clears it.
d131 3
a133 3
void checkUniqueRanks ();
//
// Verifies that the objectiveRanks of the Objectives are unique.
d135 1
a135 1
noCopyCtorAssign (WitMultiObjMgr);
d137 3
a139 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d141 3
a143 3
WitList <WitObjective> myObjectives_;
//
// The Objectives owned by this MultiObjMgr.
d145 3
a147 3
WitObjective * currentObjective_;
//
// The currently selected Objective.
d149 5
a153 5
double multiObjTol_;
//
// Each objective that has already been optimized is constrained to
// achieve its maximum value minus a tolerance based on multiObjTol_.
};
@


1.24
log
@Added a message to an API function.
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d32 2
a33 2
   {
   public:
d35 3
a37 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d39 1
a39 1
      WitMultiObjMgr (WitProblem *);
d41 3
a43 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d45 1
a45 1
      ~WitMultiObjMgr ();
d47 3
a49 3
      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------
d51 1
a51 1
      defaultValue (const char * defObjectiveListSpec, "Default")
d53 3
a55 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d57 3
a59 3
      void copyAttrsFrom (WitMultiObjMgr * theMultiObjMgr);
         //
         // Copies the input attributes of theMultiObjMgr into this MultiObjMgr.
d61 3
a63 3
      void writeDataAttrs ();
         //
         // Writes the attributes of this MultiObjMgr to an input data file.
d65 3
a67 3
      void writeMultiObjVecs ();
         //
         // Writes the ObjVec attributes to an input data file.
d69 3
a71 3
      void display ();
         //
         // Displays the input and preprocessing data for this MultiObjMgr.
d73 4
a76 4
      WitObjective * findObjective (const char * theObjName);
         //
         // Finds and returns the Objective belonging to this MultiObjMgr whose
         // name matches theObjName, if any; otherwise returns NULL.
d78 6
a83 6
      void validateData ();
         //
         // Verifies that the input data is valid for optimizing implosion in
         // multiple objectives mode.
         // Specifically, this function verifies that the objectiveRanks of the
         // Objectives are unique.
d85 3
a87 3
      void writeObjValues ();
         //
         // Writes the objValue attribute for each Objective to the message file
d89 3
a91 3
      //------------------------------------------------------------------------
      // "Set" functions
      //------------------------------------------------------------------------
d93 4
a96 4
      void setObjectiveList (const WitVector <const char *> & theObjNames);
         //
         // Deletes the current Objectives and creates a new set of Objectives,
         // one for each objective name in theObjNames.
d98 1
a98 1
      void setCurrentObjective (WitObjective *);
d100 1
a100 1
      void setMultiObjTol (double);
d102 3
a104 3
      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------
d106 1
a106 1
      defaultValue (double defMultiObjTol, 1.0e-7)
d108 3
a110 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d112 3
a114 3
      accessFunc (const WitList <WitObjective> &, myObjectives)
      accessFunc (WitObjective *,                 currentObjective)
      accessFunc (double,                         multiObjTol)
d116 4
a119 4
      void getObjectiveListSpec (WitString & theObjListSpec);
         //
         // Sets theObjListSpec to the String that specifies the list of
         // Objectives owned by this MultiObjMgr.
d121 1
a121 1
   private:
d123 3
a125 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d127 3
a129 3
      void clearObjectives ();
         //
         // Deletes the contents of myObjectives_ and clears it.
d131 3
a133 3
      void checkUniqueRanks ();
         //
         // Verifies that the objectiveRanks of the Objectives are unique.
d135 1
a135 1
      noCopyCtorAssign (WitMultiObjMgr);
d137 3
a139 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d141 3
a143 3
      WitList <WitObjective> myObjectives_;
         //
         // The Objectives owned by this MultiObjMgr.
d145 3
a147 3
      WitObjective * currentObjective_;
         //
         // The currently selected Objective.
d149 5
a153 5
      double multiObjTol_;
         //
         // Each objective that has already been optimized is constrained to
         // achieve its maximum value minus a tolerance based on multiObjTol_.
   };
@


1.23
log
@Multi-Obj Mode
@
text
@d51 1
a51 1
      defaultValue (const char * defObjectiveListSpec, "1")
@


1.22
log
@Multi-Obj Mode
@
text
@d82 1
a82 1
         // Specifically, this function verifies that the objectiveSeqNos of the
d131 1
a131 1
      void checkUniqueSeqNos ();
d133 1
a133 1
         // Verifies that the objectiveSeqNos of the Objectives are unique.
@


1.21
log
@multi-obj mode
@
text
@d100 8
d114 1
d148 5
@


1.20
log
@Multi-objective mode
@
text
@d26 1
a26 1
// Responsible for managing multi-objective mode.
d81 1
a81 1
         // multi-objective mode.
@


1.19
log
@Multi-objective mode
@
text
@d76 1
a76 1
         // objectiveName matches theObjName, if any; otherwise returns NULL.
@


1.18
log
@Multi-objective mode
@
text
@a50 1
      defaultValue (int          defNObjectives,       1)
a97 5
      void setNObjectives (int theInt);
         //
         // Deletes the current Objectives and creates a new set of theInt
         // Objectives.

a111 5
      inline int nObjectives ()
         {
         return myObjectives_.nElements ();
         }

@


1.17
log
@Multi-objective mode.
@
text
@a89 4
      void compObjectiveListSpec ();
         //
         // Sets objectiveListSpec_ to its appropriate value.

d112 5
a116 1
      accessFunc (const WitString &,              objectiveListSpec)
a149 5

      WitString objectiveListSpec_;
         //
         // The String that specifies the list of Objectives owned by this
         // MultiObjMgr.
@


1.16
log
@Multi-objective mode
@
text
@d98 1
a98 1
      void setObjectiveList (int nObjNames, const char * const * theObjNames);
d101 1
a101 2
         // one for each objective name in theObjNames, where nObjNames is the
         // vector length of theObjNames.
@


1.15
log
@Multi-objective mode
@
text
@d21 1
d51 2
a52 1
      defaultValue (int defNObjectives, 1)
d74 1
a74 1
      WitObjective * findObjective (const WitString & theObjName);
d90 4
d98 6
d109 1
a109 1
      void setCurrentObjective (WitObjective * theObj);
d117 1
d151 5
@


1.14
log
@Multi-Objective Mode
@
text
@d84 4
@


1.13
log
@Multi-Objective Mode
@
text
@d64 1
a64 1
      void writeObjVecs ();
@


1.12
log
@Multi-Objective Mode
@
text
@d64 4
@


1.11
log
@Multi-Objective Mode.
@
text
@d20 1
a20 1
#include <PtrVec.h>
d95 7
a101 3
      accessFunc (const WitPtrVec <WitObjective> &, myObjectives)
      accessFunc (int,                              nObjectives)
      accessFunc (WitObjective *,                   currentObjective)
d123 1
a123 1
      WitPtrVec <WitObjective> myObjectives_;
a126 4
      int nObjectives_;
         //
         // The # of Objectives owned by this MultiObjMgr.

@


1.10
log
@Multi-Objective Mode.
@
text
@d109 4
@


1.9
log
@Multi-Objective Mode.
@
text
@a55 9
      void setNObjectives (int theInt);
         //
         // Deletes the current Objectives and creates a new set of theInt
         // Objectives.

      void setCurrentObjective (WitObjective * theObj);
         //
         // Setter.

d73 18
@


1.8
log
@Multi-Objective Mode
@
text
@d20 1
a20 1
#include <List.h>
a81 4
      void store (WitObjective * theObj);
         //
         // Stores theObj in this MultiObjMgr.

d86 2
a87 1
      accessFunc (const WitList   <WitObjective> &, myObjectives)
a89 5
      inline int nObjectives ()
         {
         return myObjectives_.nElements ();
         }

d106 1
a106 1
      WitList <WitObjective> myObjectives_;
d110 4
@


1.7
log
@Multi-Objective Mode
@
text
@a60 4
      void store (WitObjective * theObj);
         //
         // Stores theObj in this MultiObjMgr.

d82 4
@


1.6
log
@Multi-Objective Mode.
@
text
@d61 4
@


1.5
log
@Multi-objective mode.
@
text
@d20 1
a20 1
#include <PtrVec.h>
d86 1
a86 1
      accessFunc (const WitPtrVec <WitObjective> &, myObjectives)
d91 1
a91 1
         return myObjectives_.length ();
d110 1
a110 1
      WitPtrVec <WitObjective> myObjectives_;
@


1.4
log
@Multi-obj mode.
@
text
@d77 5
@


1.3
log
@Multi-Obj mode.
@
text
@d61 4
d81 3
a88 5
      inline const WitPtrVec <WitObjective> & myObjectives ()
         {
         return myObjectives_;
         }

d108 4
@


1.2
log
@multi-objective mode
@
text
@d65 1
a65 1
      void writeData ();
d67 1
a67 1
         // Writes the section of the input data file for this MultiObjMgr.
d69 1
a69 1
      void writeDataAttrs ();
d71 1
a71 1
         // Writes the attributes of this MultiObjMgr to an input data file.
@


1.1
log
@Multi-objective mode.
@
text
@d69 4
@

