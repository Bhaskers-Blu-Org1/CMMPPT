head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2011.09.28.23.49.58;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.09.24.00.28.21;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.08.30.20.17.59;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.16.22.26.41;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.16.20.21.21;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PrSelPtH
#define PrSelPtH

//------------------------------------------------------------------------------
// Header file: "PrSelPt.h"
//
// Contains the declaration of class PrSelPt.
//------------------------------------------------------------------------------

#include <SelPt.h>

//------------------------------------------------------------------------------
// Class PrSelPt
//
// "Proportionate Routing Selection Point"
// A SelPt for proportionate routing
// A PrSelPt represents an RtSite and a period at which proportionate routing is
// to be performed.
//
// Class Hierarchy:
//
// SelPt
//    PrSelPt
//
// Implemented in PropRtg.C.
//------------------------------------------------------------------------------

class WitPrSelPt: public WitSelPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrSelPt (WitRtSite *, WitPeriod, WitPrCoord *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPrSelPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints the current state of this PrSelPt.

      void printAllowedRtCands ();
         //
         // Prints the RtCands for myRtSite_ that are currently allowed for
         // prop-rt in myPer_.

      void incAllowedRtCands (int delta);
         //
         // Adds delta to nAllowedRtCands_.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPeriod, myPer)
      accessFunc (int,       nAllowedRtCands)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual WitSelMgr *  mySelMgr    ();
      virtual void         prtID       ();        
      virtual bool         splittable  ();   
      virtual void         getSortData (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand  ();
         //
         // Overrides from class SelPt.

      noCopyCtorAssign (WitPrSelPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRtSite * const myRtSite_;
         //
         // The RtSite for this PrSelPt.

      const WitPeriod myPer_;
         //
         // The period for this PrSelPt.

      WitPrCoord * const myPrCoord_;
         //
         // The PrCoord that owns this PrSelPt.

      int nAllowedRtCands_;
         //
         // # of RtCands for myRtSite_ that are currently allowed in myPer_.
   };

#endif
@


1.4
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.3
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d38 12
a49 2
{
public:
d51 1
a51 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d53 3
a55 1
WitPrSelPt (WitRtSite *, WitPeriod, WitPrCoord *);
d57 3
a59 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d61 4
a64 1
virtual ~WitPrSelPt ();
d66 3
a68 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d70 6
a75 3
void print ();
//
// Prints the current state of this PrSelPt.
d77 1
a77 4
void printAllowedRtCands ();
//
// Prints the RtCands for myRtSite_ that are currently allowed for
// prop-rt in myPer_.
d79 3
a81 3
void incAllowedRtCands (int delta);
//
// Adds delta to nAllowedRtCands_.
d83 7
a89 20
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitPeriod, myPer)
accessFunc (int,       nAllowedRtCands)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

virtual WitSelMgr *  mySelMgr    ();
virtual void         prtID       ();
virtual bool         splittable  ();
virtual void         getSortData (WitPart * &, WitPeriod &);
virtual WitSelCand * newSelCand  ();
//
// Overrides from class SelPt.
d91 1
a91 1
noCopyCtorAssign (WitPrSelPt);
d93 3
a95 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d97 3
a99 3
WitRtSite * const myRtSite_;
//
// The RtSite for this PrSelPt.
d101 3
a103 3
const WitPeriod myPer_;
//
// The period for this PrSelPt.
d105 3
a107 3
WitPrCoord * const myPrCoord_;
//
// The PrCoord that owns this PrSelPt.
d109 4
a112 4
int nAllowedRtCands_;
//
// # of RtCands for myRtSite_ that are currently allowed in myPer_.
};
@


1.2
log
@Selection Recovery
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d38 2
a39 2
   {
   public:
d41 3
a43 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d45 1
a45 1
      WitPrSelPt (WitRtSite *, WitPeriod, WitPrCoord *);
d47 3
a49 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d51 1
a51 1
      virtual ~WitPrSelPt ();
d53 3
a55 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d57 3
a59 3
      void print ();
         //
         // Prints the current state of this PrSelPt.
d61 4
a64 4
      void printAllowedRtCands ();
         //
         // Prints the RtCands for myRtSite_ that are currently allowed for
         // prop-rt in myPer_.
d66 3
a68 3
      void incAllowedRtCands (int delta);
         //
         // Adds delta to nAllowedRtCands_.
d70 20
a89 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d91 1
a91 2
      accessFunc (WitPeriod, myPer)
      accessFunc (int,       nAllowedRtCands)
d93 3
a95 1
   private:
d97 3
a99 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d101 3
a103 7
      virtual WitSelMgr *  mySelMgr    ();
      virtual void         prtID       ();        
      virtual bool         splittable  ();   
      virtual void         getSortData (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand  ();
         //
         // Overrides from class SelPt.
d105 3
a107 1
      noCopyCtorAssign (WitPrSelPt);
d109 4
a112 20
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRtSite * const myRtSite_;
         //
         // The RtSite for this PrSelPt.

      const WitPeriod myPer_;
         //
         // The period for this PrSelPt.

      WitPrCoord * const myPrCoord_;
         //
         // The PrCoord that owns this PrSelPt.

      int nAllowedRtCands_;
         //
         // # of RtCands for myRtSite_ that are currently allowed in myPer_.
   };
@


1.1
log
@Selection Recovery
@
text
@d83 5
a87 7
      virtual WitSelMgr *  mySelMgr       ();
      virtual void         prtID          ();        
      virtual bool         splittable     ();   
      virtual void         getSortData    (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand     ();
      virtual void         printRecovery  ();
      virtual void         recoverInitSel ();
@

