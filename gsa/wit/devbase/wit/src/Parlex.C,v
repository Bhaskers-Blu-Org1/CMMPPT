head	1.14;
access;
symbols
	sce_5_01_20080919:1.10
	latest_sce_4_20_20060523:1.10.0.2
	sce_4_20_20060523:1.10
	latest_sce4_20_OSL:1.9.0.2
	sce_4_20_OSL:1.9
	sce_410_withVa:1.9
	sce_4_05_20040511:1.8
	sce_4_00_20040201:1.7
	nextGenBranch:1.7.0.6
	nextGenRoot:1.7
	sce_3_30_20030627:1.7
	EndRw-branch:1.7.0.4
	Root-of-EndRw:1.7
	rwToStl:1.7.0.2
	latest_sce_3_10_20010924:1.4.0.6
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.4.0.4
	sce_3_00_20010601:1.4
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2011.09.28.23.49.49;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.09.24.00.28.11;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.08.30.20.17.51;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2010.01.25.19.45.18;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.02.17.34.07;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2005.07.07.15.16.24;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.13.21.50.14;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.14.16.09.49;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.09.19.52.34;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.08.21.58.57;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.02.19.24.06;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.06.19.58.40;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.39;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.28;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.28;	author wit;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
//
//     Source file:    Parlex.C
//
//     Implementation of classes Parlex and FileStackElement.
//		
//     Contains functions to manipulate global data for witParser,
//     witLexer and other auxiliary classes.
//
//------------------------------------------------------------------------------

#include <defines.h>

// #if IMPLEMENT_READDATA

#include <Parlex.h>

extern  FILE       *yyin;               /* current input file     */

//------------------------------------------------------------------------------
// Implementation of class FileStackElement.
//------------------------------------------------------------------------------

WitFileStackElement::WitFileStackElement ():
      inputFile_ (NULL),
      lineno_    (0),
      fileName_  ()
   {
   }

WitFileStackElement::~WitFileStackElement ()
   {
   }

//------------------------------------------------------------------------------
// Implementation of class WitParlex.
//------------------------------------------------------------------------------

// Initialize static member data
int         WitParlex::lineno_ = 1;
int         WitParlex::errcode_ = 0;
WitString & WitParlex::fileName_ = * new WitString;
int         WitParlex::stackPos_ = 0;

WitFileStackElement WitParlex::fileStack_[STACKSIZE];


// Constructor and destructor

WitParlex::WitParlex()
{
  lineno_   = 1;
  errcode_  = 0;
  fileName_ = "";
}

WitParlex::~WitParlex()
{
}

// Public operations

int WitParlex::lineno()
{ return lineno_; }

int WitParlex::errcode()
{ return errcode_; }

const char* WitParlex::fileName()
{ return fileName_.myCstring (); }

void WitParlex::setLineno(int n)
{ lineno_ = n; }

void WitParlex::setErrcode(int n)
{ errcode_ = n; }

void WitParlex::setFileName(const char *s)
{ fileName_ = s; }

// Save current input-file state and begin reading from new file
WitParseRC  WitParlex::saveFile(const char *s)
{ 
  int   yyleng;
  char  *fn;
  FILE  *fp;

  if (stackPos_+1 == STACKSIZE)
    return STACK_OVERFLOW;

  yyleng = strlen(s);                           // filename, as read
  fn = new char[yyleng-1];                      // get rid of quote marks
  strncpy(fn, s+1, yyleng-2);
  fn[yyleng-2] = '\0';
  if (!(fp = fopen(fn, "r")))
    return FOPEN_ERROR;

  fileStack_[stackPos_].fileName_ = fileName_;  // save current file name

  fileStack_[stackPos_].lineno_ = lineno_;
  fileStack_[stackPos_++].inputFile_ = yyin;
  yyin = fp;
  fileName_ = fn;
  lineno_ = 1;

  delete[] fn;

  return 0;
} 

// Close current input file and restore prvious input-file state
WitParseRC  WitParlex::restoreFile()
{
  if (stackPos_ == 0) return 1;                  // if end of original file 
  fileName_ = fileStack_[--stackPos_].fileName_; // restore lexer state
  lineno_ = fileStack_[stackPos_].lineno_;

  fclose(yyin);
  yyin = fileStack_[stackPos_].inputFile_;
  return 0;
}

//#endif
@


1.13
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 6
a6 1
//------------------------------------------------------------------------------
d8 1
a8 4
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential
d10 4
a13 1
//------------------------------------------------------------------------------
@


1.12
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d15 1
a15 1
//
d34 5
a38 5
inputFile_ (NULL),
lineno_    (0),
fileName_  ()
{
}
d41 2
a42 2
{
}
d61 3
a63 3
lineno_   = 1;
errcode_  = 0;
fileName_ = "";
d92 22
a113 22
{
int   yyleng;
char  *fn;
FILE  *fp;

if (stackPos_+1 == STACKSIZE)
return STACK_OVERFLOW;

yyleng = strlen(s);                           // filename, as read
fn = new char[yyleng-1];                      // get rid of quote marks
strncpy(fn, s+1, yyleng-2);
fn[yyleng-2] = '\0';
if (!(fp = fopen(fn, "r")))
return FOPEN_ERROR;

fileStack_[stackPos_].fileName_ = fileName_;  // save current file name

fileStack_[stackPos_].lineno_ = lineno_;
fileStack_[stackPos_++].inputFile_ = yyin;
yyin = fp;
fileName_ = fn;
lineno_ = 1;
d115 1
a115 1
delete[] fn;
d117 2
a118 2
return 0;
}
d123 7
a129 7
if (stackPos_ == 0) return 1;                  // if end of original file
fileName_ = fileStack_[--stackPos_].fileName_; // restore lexer state
lineno_ = fileStack_[stackPos_].lineno_;

fclose(yyin);
yyin = fileStack_[stackPos_].inputFile_;
return 0;
@


1.11
log
@Multi-objective mode
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d15 1
a15 1
//		
d34 5
a38 5
      inputFile_ (NULL),
      lineno_    (0),
      fileName_  ()
   {
   }
d41 2
a42 2
   {
   }
d61 3
a63 3
  lineno_   = 1;
  errcode_  = 0;
  fileName_ = "";
d92 22
a113 22
{ 
  int   yyleng;
  char  *fn;
  FILE  *fp;

  if (stackPos_+1 == STACKSIZE)
    return STACK_OVERFLOW;

  yyleng = strlen(s);                           // filename, as read
  fn = new char[yyleng-1];                      // get rid of quote marks
  strncpy(fn, s+1, yyleng-2);
  fn[yyleng-2] = '\0';
  if (!(fp = fopen(fn, "r")))
    return FOPEN_ERROR;

  fileStack_[stackPos_].fileName_ = fileName_;  // save current file name

  fileStack_[stackPos_].lineno_ = lineno_;
  fileStack_[stackPos_++].inputFile_ = yyin;
  yyin = fp;
  fileName_ = fn;
  lineno_ = 1;
d115 1
a115 1
  delete[] fn;
d117 2
a118 2
  return 0;
} 
d123 7
a129 7
  if (stackPos_ == 0) return 1;                  // if end of original file 
  fileName_ = fileStack_[--stackPos_].fileName_; // restore lexer state
  lineno_ = fileStack_[stackPos_].lineno_;

  fclose(yyin);
  yyin = fileStack_[stackPos_].inputFile_;
  return 0;
@


1.10
log
@Updated the copyright date on all source files.
@
text
@d61 3
a63 4
  lineno_ = 1;
  errcode_ = 0;

  fileName_.copyCstring ("");
d88 1
a88 1
{ fileName_.copyCstring (s); }
d112 1
a112 1
  fileName_.copyCstring (fn);
@


1.9
log
@[exceptions]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.8
log
@Double Precision.
@
text
@d52 1
a52 1
int         WitParlex::sp = 0;
d98 1
a98 1
  if (sp+1 == STACKSIZE)
d108 1
a108 1
  fileStack_[sp].fileName_ = fileName_;  // save current file name
d110 2
a111 2
  fileStack_[sp].lineno_ = lineno_;
  fileStack_[sp++].inputFile_ = yyin;
d124 3
a126 3
  if (sp == 0) return 1;                        // if end of original file 
  fileName_ = fileStack_[--sp].fileName_;       // restore lexer state
  lineno_ = fileStack_[sp].lineno_;
d129 1
a129 1
  yyin = fileStack_[sp].inputFile_;
@


1.7
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d108 1
a108 1
  fileStack_[sp].fileName_.copy (fileName_);  // save current file name
d125 1
a125 1
  fileName_.copy (fileStack_[--sp].fileName_);         // restore lexer state
@


1.6
log
@Continued implementation of single-source.
@
text
@d116 1
a116 1
  delete fn;
@


1.5
log
@Preliminary work on single source.
@
text
@a25 1
#include <Str.h>
d36 1
a36 1
      fileName_  (* new WitString)
a41 1
   delete & fileName_;
@


1.4
log
@Changed name of String.h to be Str.h to avoid windows build problems
@
text
@d65 2
a66 1
  fileName_ = "";
d91 1
a91 1
{ fileName_ = s; }
d110 1
a110 1
  fileStack_[sp].fileName_ = fileName_;  // save current file name
d115 1
a115 1
  fileName_ = fn;
d127 1
a127 1
  fileName_ = fileStack_[--sp].fileName_;         // restore lexer state
@


1.3
log
@Some minor changes.
@
text
@d26 1
a26 1
#include <String.h>
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d26 1
a26 2

#include <Vector.h>
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
