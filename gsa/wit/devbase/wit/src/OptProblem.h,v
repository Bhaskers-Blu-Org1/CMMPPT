head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	2011.09.28.23.49.46;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.09.24.00.28.07;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.08.30.20.17.48;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.08.30.18.14.53;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.08.26.22.54.50;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.08.25.23.27.04;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.02.03.22.30.53;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2010.11.12.22.03.05;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2010.08.27.21.06.50;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2010.08.24.22.06.44;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2010.08.20.21.07.36;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2010.08.19.18.00.14;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef OptProblemH
#define OptProblemH

//------------------------------------------------------------------------------
// Header file: "OptProblem.h"
//
// Contains the declaration of class OptProblem.
//------------------------------------------------------------------------------

#include <List.h>
#include <ObjStack.h>
#include <PtrVec.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// class OptProblem.
//
// An optimization problem, either:
//    a linear programming problem, or
//    a mixed integer programming problem.
//
// Class hierarchy:
//
//    ProbAssoc
//       OptProblem
//          DetImpOP
//          StochImpOP
//------------------------------------------------------------------------------

class WitOptProblem: public WitProbAssoc
   {
   public:

      //-----------------------------------------------------------------------
      // Public pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual bool needDual () = 0;
         //
         // Returns true, iff a dual solution is needed.

      virtual bool reSolveMode () = 0;
         //
         // Returns true, iff solving this OptProblem would be a re-solve.

      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (const WitList <WitOptVar> &,   myOptVars)
      accessFunc (const WitList <WitOptCon> &,   myOptCons)
      accessFunc (int,                           nCoeffs)
      accessFunc (const WitPtrVec <WitOptVar> &, myLexOptVarSeq)
      accessFunc (FILE *,                        optProbFile)

      inline int nOptVars ()
         {
         return myOptVars ().nElements ();
         }

      inline int nOptCons ()
         {
         return myOptCons ().nElements ();
         }

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      void store (WitOptVar * theVar);
         //
         // theVar is a new OptVar created for this OptProblem.
         // This function stores theVar.

      void store (WitOptCon * theCon);
         //
         // theCon is a new OptCon created for this OptProblem.
         // This function stores theCon.

      void generateFixed ();
         //
         // Generates the fixed aspects of this OptProblem (the aspects that do
         // not change in accelerated mode).

      void countIntVars ();
         //
         // Sets nIntVars_.

      void incCoeff (WitOptVar * theVar, double delta);
         //
         // Adds delta to the Coeff of theVar in curCon_, constructing it,
         // if neccesary.  No-op, if delta is (nearly) 0.0.

      void generateFlexible ();
         //
         // Generates the flexible aspects of this OptProblem (the aspects that
         // may change in accelerated mode).

      const WitBoundPair & preScreenBounds (const WitOptVar * theVar);
         //
         // Returns the value that theVar->bounds () held just prior to
         // screening. Valid only if saveBounds has been called.

      const WitBoundPair & preScreenBounds (const WitOptCon * theCon);
         //
         // Returns the value that theCon->bounds () held just prior to
         // screening. Valid only if saveBounds has been called.

      void calcInitSoln ();
         //
         // Calculates an initial solution.

      void getMatrixByCols (
            WitVector <int> &    firstCoeffIdx,
            WitVector <int> &    rowIdx,
            WitVector <double> & coeffVal);
         //
         // Retrieves the constraint matrix in the column major ordered format.

      void print ();
         //
         // Prints this OptProblem.

      void solve ();
         //
         // Solves this OptProblem.

      double compObjValue ();
         //
         // Computes and returns the objective fnuction value for the current
         // primal solution.

   protected:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitOptProblem (WitProblem *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitOptProblem ();

      //-----------------------------------------------------------------------
      // Protected pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual void generateVariables () = 0;
         //
         // Generates all variables.

      virtual void generateConstraints () = 0;
         //
         // Generates all OptCons.

      virtual void generateLexOptVarSeq (WitPtrVec <WitOptVar> & theOptVarSeq);
         //
         // Sets theOptVarSeq to be the sequence of OptVars to be
         // lexicographically maximized.
         // Valid only in multiple objectives mode.

      virtual void postGenFixed () = 0;
         //
         // Takes actions appropriate at the conclusion of generateFixed ().

      virtual void postGenFlexible () = 0;
         //
         // Takes actions appropriate at the conclusion of generateFlexible ().

      virtual void printOptVCHeading () = 0;
         //
         // Prints a heading for OptVCs to optProbFile ().

      //-----------------------------------------------------------------------
      // Protected non-pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual void displayDerived ();
         //
         // Display any problem-specific message in pre-release mode.
         // This default version is a no-op.

      virtual void printDerived ();
         //
         // Prints problem-specific aspects of this OptProblem.
         // This default version is a no-op.

      virtual void initDepVars ();
         //
         // Initializes the dependent variables, i.e., those variables whose
         // initial value depends on the initial value of other variables.

      //-----------------------------------------------------------------------
      // Other protected member functions.
      //-----------------------------------------------------------------------

      void saveBounds ();
         //
         // Copies bounds for each OptVar and OptCon into varPreScreenBounds_ 
         // and conPreScreenBounds_.

      int screen (WitOptCon * theCon);
         //
         // Performs generic screening on theCon and the variables it
         // intersects.
         // Returns # OptVars fixed.
         // No-op, if theCon is NULL.

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      void generateCoeffs ();
         //
         // Generates all Coeffs for all OptCons and stores them in the
         // OptVC myCoeffs_ vectors.

      void buildCoeffs ();
         //
         // Generates all Coeffs for all OptCons.

      void allocVarCoeffs ();
         //
         // Invokes allocMyCoeffs for each OptVar in this OptProblem.

      void storeCoeffs ();
         //
         // Stores all Coeffs in each OptVC, in OptCon order for OptVars and
         // OptVar order for OptCons.

      inline WitCoeff * & varLastCoeff (const WitOptVar * theVar);
         //
         // Return the most recently generated Coeff whose OptVar is theVar, or
         // NULL is none exists.

      void generateObjCoeffs ();
         //
         // For each OptVar, theVar, computes theVar->objCoeff.

      void printVars ();
         //
         // Prints all OptVars in this OptProblem.

      void printCons ();
         //
         // Prints all OptCons in this OptProblem.

      void printObjFunc ();
         //
         // Prints the objective function for this OptProblem.

      void printLexSeq ();
         //
         // Prints the sequence of OptVars to be lex maximized.
         // Valid only in multiple objectives mode.

      void prtMatrixByCols ();
         //
         // Prints the matrix in the column major ordered format.

      virtual void doScreening () = 0;
         //
         // Performs screening of constraints and variables.

      void reconstructDual ();
         //
         // Assuming the optimization problem was screened and an optimal dual
         // solution to the screened problem has been obtained, this function
         // modifies the dual solution, in order to make it optimal and feasible
         // for the dual of the unscreened problem.

      noCopyCtorAssign (WitOptProblem);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitCplexGateway * myCplexGateway_;
         //
         // The CplexGateway owned by this OptProblem, if any;
         // otherwise, NULL.

      WitList <WitOptVar> myOptVars_;
         //
         // The list of all OptVars in this OptProblem.

      WitList <WitOptCon> myOptCons_;
         //
         // The list of all OptCons in this OptProblem.

      int nCoeffs_;
         //
         // # Coeffs in optimization problem.

      WitOptCon * curCon_;
         //
         // The OptCon whose Coeffs are currently being generated.

      WitObjStack <WitCoeff> curConCoeffs_;
         //
         // The Coeffs for curCon_;

      WitPtrVec <WitCoeff> varLastCoeff_;
         //
         // varLastCoeff_[theVar->index ()] is the most recently
         // generated Coeff whose OptVar is theVar, or NULL is none exists.
         // Allocated only during buildCoeffs.

      int nIntVars_;
         //
         // # integer variables in this OptProblem.

      WitPtrVec <WitOptVar> myLexOptVarSeq_;
         //
         // In multiple objectives mode:
         //    The sequence of OptVars to be lexicographically maximized.
         // In single objective mode:
         //    Empty

      WitPtrVec <WitBoundPair> varPreScreenBounds_;
         //
         // Stores the return values of preScreenBounds (OptVar *).

      WitPtrVec <WitBoundPair> conPreScreenBounds_;
         //
         // Stores the return values of preScreenBounds (OptCon *).

      WitList <WitCoeff> screenedCoeffs_;
         //
         // For each Coeff in screenedCoeffs_, theCoeff:
         //    theCoeff->myVar () is a variable that was screened out.
         //    theCoeff->myCon () is the constraint that enabled the
         //    variable to be screened out.
         // The Coeffs are stored in reverse of the order in which the
         // screening was performed.
         // Valid iff needDual () is true.

      FILE * optProbFile_;
         //
         // Optimization problem output file.
   };

#endif
@


1.11
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.10
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d40 2
a41 191
{
public:

//-----------------------------------------------------------------------
// Public pure virtual member functions.
//-----------------------------------------------------------------------

virtual bool needDual () = 0;
//
// Returns true, iff a dual solution is needed.

virtual bool reSolveMode () = 0;
//
// Returns true, iff solving this OptProblem would be a re-solve.

//-----------------------------------------------------------------------
// Data access functions.
//-----------------------------------------------------------------------

accessFunc (const WitList <WitOptVar> &,   myOptVars)
accessFunc (const WitList <WitOptCon> &,   myOptCons)
accessFunc (int,                           nCoeffs)
accessFunc (const WitPtrVec <WitOptVar> &, myLexOptVarSeq)
accessFunc (FILE *,                        optProbFile)

inline int nOptVars ()
{
return myOptVars ().nElements ();
}

inline int nOptCons ()
{
return myOptCons ().nElements ();
}

//-----------------------------------------------------------------------
// Other public member functions.
//-----------------------------------------------------------------------

void store (WitOptVar * theVar);
//
// theVar is a new OptVar created for this OptProblem.
// This function stores theVar.

void store (WitOptCon * theCon);
//
// theCon is a new OptCon created for this OptProblem.
// This function stores theCon.

void generateFixed ();
//
// Generates the fixed aspects of this OptProblem (the aspects that do
// not change in accelerated mode).

void countIntVars ();
//
// Sets nIntVars_.

void incCoeff (WitOptVar * theVar, double delta);
//
// Adds delta to the Coeff of theVar in curCon_, constructing it,
// if neccesary.  No-op, if delta is (nearly) 0.0.

void generateFlexible ();
//
// Generates the flexible aspects of this OptProblem (the aspects that
// may change in accelerated mode).

const WitBoundPair & preScreenBounds (const WitOptVar * theVar);
//
// Returns the value that theVar->bounds () held just prior to
// screening. Valid only if saveBounds has been called.

const WitBoundPair & preScreenBounds (const WitOptCon * theCon);
//
// Returns the value that theCon->bounds () held just prior to
// screening. Valid only if saveBounds has been called.

void calcInitSoln ();
//
// Calculates an initial solution.

void getMatrixByCols (
WitVector <int> &    firstCoeffIdx,
WitVector <int> &    rowIdx,
WitVector <double> & coeffVal);
//
// Retrieves the constraint matrix in the column major ordered format.

void print ();
//
// Prints this OptProblem.

void solve ();
//
// Solves this OptProblem.

double compObjValue ();
//
// Computes and returns the objective fnuction value for the current
// primal solution.

protected:

//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------

WitOptProblem (WitProblem *);

//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------

virtual ~WitOptProblem ();

//-----------------------------------------------------------------------
// Protected pure virtual member functions.
//-----------------------------------------------------------------------

virtual void generateVariables () = 0;
//
// Generates all variables.

virtual void generateConstraints () = 0;
//
// Generates all OptCons.

virtual void generateLexOptVarSeq (WitPtrVec <WitOptVar> & theOptVarSeq);
//
// Sets theOptVarSeq to be the sequence of OptVars to be
// lexicographically maximized.
// Valid only in multiple objectives mode.

virtual void postGenFixed () = 0;
//
// Takes actions appropriate at the conclusion of generateFixed ().

virtual void postGenFlexible () = 0;
//
// Takes actions appropriate at the conclusion of generateFlexible ().

virtual void printOptVCHeading () = 0;
//
// Prints a heading for OptVCs to optProbFile ().

//-----------------------------------------------------------------------
// Protected non-pure virtual member functions.
//-----------------------------------------------------------------------

virtual void displayDerived ();
//
// Display any problem-specific message in pre-release mode.
// This default version is a no-op.

virtual void printDerived ();
//
// Prints problem-specific aspects of this OptProblem.
// This default version is a no-op.

virtual void initDepVars ();
//
// Initializes the dependent variables, i.e., those variables whose
// initial value depends on the initial value of other variables.

//-----------------------------------------------------------------------
// Other protected member functions.
//-----------------------------------------------------------------------

void saveBounds ();
//
// Copies bounds for each OptVar and OptCon into varPreScreenBounds_
// and conPreScreenBounds_.

int screen (WitOptCon * theCon);
//
// Performs generic screening on theCon and the variables it
// intersects.
// Returns # OptVars fixed.
// No-op, if theCon is NULL.

private:

//-----------------------------------------------------------------------
// Private member functions.
//-----------------------------------------------------------------------

void generateCoeffs ();
//
// Generates all Coeffs for all OptCons and stores them in the
// OptVC myCoeffs_ vectors.
d43 313
a355 124
void buildCoeffs ();
//
// Generates all Coeffs for all OptCons.

void allocVarCoeffs ();
//
// Invokes allocMyCoeffs for each OptVar in this OptProblem.

void storeCoeffs ();
//
// Stores all Coeffs in each OptVC, in OptCon order for OptVars and
// OptVar order for OptCons.

inline WitCoeff * & varLastCoeff (const WitOptVar * theVar);
//
// Return the most recently generated Coeff whose OptVar is theVar, or
// NULL is none exists.

void generateObjCoeffs ();
//
// For each OptVar, theVar, computes theVar->objCoeff.

void printVars ();
//
// Prints all OptVars in this OptProblem.

void printCons ();
//
// Prints all OptCons in this OptProblem.

void printObjFunc ();
//
// Prints the objective function for this OptProblem.

void printLexSeq ();
//
// Prints the sequence of OptVars to be lex maximized.
// Valid only in multiple objectives mode.

void prtMatrixByCols ();
//
// Prints the matrix in the column major ordered format.

virtual void doScreening () = 0;
//
// Performs screening of constraints and variables.

void reconstructDual ();
//
// Assuming the optimization problem was screened and an optimal dual
// solution to the screened problem has been obtained, this function
// modifies the dual solution, in order to make it optimal and feasible
// for the dual of the unscreened problem.

noCopyCtorAssign (WitOptProblem);

//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------

WitCplexGateway * myCplexGateway_;
//
// The CplexGateway owned by this OptProblem, if any;
// otherwise, NULL.

WitList <WitOptVar> myOptVars_;
//
// The list of all OptVars in this OptProblem.

WitList <WitOptCon> myOptCons_;
//
// The list of all OptCons in this OptProblem.

int nCoeffs_;
//
// # Coeffs in optimization problem.

WitOptCon * curCon_;
//
// The OptCon whose Coeffs are currently being generated.

WitObjStack <WitCoeff> curConCoeffs_;
//
// The Coeffs for curCon_;

WitPtrVec <WitCoeff> varLastCoeff_;
//
// varLastCoeff_[theVar->index ()] is the most recently
// generated Coeff whose OptVar is theVar, or NULL is none exists.
// Allocated only during buildCoeffs.

int nIntVars_;
//
// # integer variables in this OptProblem.

WitPtrVec <WitOptVar> myLexOptVarSeq_;
//
// In multiple objectives mode:
//    The sequence of OptVars to be lexicographically maximized.
// In single objective mode:
//    Empty

WitPtrVec <WitBoundPair> varPreScreenBounds_;
//
// Stores the return values of preScreenBounds (OptVar *).

WitPtrVec <WitBoundPair> conPreScreenBounds_;
//
// Stores the return values of preScreenBounds (OptCon *).

WitList <WitCoeff> screenedCoeffs_;
//
// For each Coeff in screenedCoeffs_, theCoeff:
//    theCoeff->myVar () is a variable that was screened out.
//    theCoeff->myCon () is the constraint that enabled the
//    variable to be screened out.
// The Coeffs are stored in reverse of the order in which the
// screening was performed.
// Valid iff needDual () is true.

FILE * optProbFile_;
//
// Optimization problem output file.
};
@


1.9
log
@Replaced class SolverMgr with class CplexGateway.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d40 191
a230 2
   {
   public:
d232 124
a355 313
      //-----------------------------------------------------------------------
      // Public pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual bool needDual () = 0;
         //
         // Returns true, iff a dual solution is needed.

      virtual bool reSolveMode () = 0;
         //
         // Returns true, iff solving this OptProblem would be a re-solve.

      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (const WitList <WitOptVar> &,   myOptVars)
      accessFunc (const WitList <WitOptCon> &,   myOptCons)
      accessFunc (int,                           nCoeffs)
      accessFunc (const WitPtrVec <WitOptVar> &, myLexOptVarSeq)
      accessFunc (FILE *,                        optProbFile)

      inline int nOptVars ()
         {
         return myOptVars ().nElements ();
         }

      inline int nOptCons ()
         {
         return myOptCons ().nElements ();
         }

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      void store (WitOptVar * theVar);
         //
         // theVar is a new OptVar created for this OptProblem.
         // This function stores theVar.

      void store (WitOptCon * theCon);
         //
         // theCon is a new OptCon created for this OptProblem.
         // This function stores theCon.

      void generateFixed ();
         //
         // Generates the fixed aspects of this OptProblem (the aspects that do
         // not change in accelerated mode).

      void countIntVars ();
         //
         // Sets nIntVars_.

      void incCoeff (WitOptVar * theVar, double delta);
         //
         // Adds delta to the Coeff of theVar in curCon_, constructing it,
         // if neccesary.  No-op, if delta is (nearly) 0.0.

      void generateFlexible ();
         //
         // Generates the flexible aspects of this OptProblem (the aspects that
         // may change in accelerated mode).

      const WitBoundPair & preScreenBounds (const WitOptVar * theVar);
         //
         // Returns the value that theVar->bounds () held just prior to
         // screening. Valid only if saveBounds has been called.

      const WitBoundPair & preScreenBounds (const WitOptCon * theCon);
         //
         // Returns the value that theCon->bounds () held just prior to
         // screening. Valid only if saveBounds has been called.

      void calcInitSoln ();
         //
         // Calculates an initial solution.

      void getMatrixByCols (
            WitVector <int> &    firstCoeffIdx,
            WitVector <int> &    rowIdx,
            WitVector <double> & coeffVal);
         //
         // Retrieves the constraint matrix in the column major ordered format.

      void print ();
         //
         // Prints this OptProblem.

      void solve ();
         //
         // Solves this OptProblem.

      double compObjValue ();
         //
         // Computes and returns the objective fnuction value for the current
         // primal solution.

   protected:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitOptProblem (WitProblem *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitOptProblem ();

      //-----------------------------------------------------------------------
      // Protected pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual void generateVariables () = 0;
         //
         // Generates all variables.

      virtual void generateConstraints () = 0;
         //
         // Generates all OptCons.

      virtual void generateLexOptVarSeq (WitPtrVec <WitOptVar> & theOptVarSeq);
         //
         // Sets theOptVarSeq to be the sequence of OptVars to be
         // lexicographically maximized.
         // Valid only in multiple objectives mode.

      virtual void postGenFixed () = 0;
         //
         // Takes actions appropriate at the conclusion of generateFixed ().

      virtual void postGenFlexible () = 0;
         //
         // Takes actions appropriate at the conclusion of generateFlexible ().

      virtual void printOptVCHeading () = 0;
         //
         // Prints a heading for OptVCs to optProbFile ().

      //-----------------------------------------------------------------------
      // Protected non-pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual void displayDerived ();
         //
         // Display any problem-specific message in pre-release mode.
         // This default version is a no-op.

      virtual void printDerived ();
         //
         // Prints problem-specific aspects of this OptProblem.
         // This default version is a no-op.

      virtual void initDepVars ();
         //
         // Initializes the dependent variables, i.e., those variables whose
         // initial value depends on the initial value of other variables.

      //-----------------------------------------------------------------------
      // Other protected member functions.
      //-----------------------------------------------------------------------

      void saveBounds ();
         //
         // Copies bounds for each OptVar and OptCon into varPreScreenBounds_ 
         // and conPreScreenBounds_.

      int screen (WitOptCon * theCon);
         //
         // Performs generic screening on theCon and the variables it
         // intersects.
         // Returns # OptVars fixed.
         // No-op, if theCon is NULL.

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      void generateCoeffs ();
         //
         // Generates all Coeffs for all OptCons and stores them in the
         // OptVC myCoeffs_ vectors.

      void buildCoeffs ();
         //
         // Generates all Coeffs for all OptCons.

      void allocVarCoeffs ();
         //
         // Invokes allocMyCoeffs for each OptVar in this OptProblem.

      void storeCoeffs ();
         //
         // Stores all Coeffs in each OptVC, in OptCon order for OptVars and
         // OptVar order for OptCons.

      inline WitCoeff * & varLastCoeff (const WitOptVar * theVar);
         //
         // Return the most recently generated Coeff whose OptVar is theVar, or
         // NULL is none exists.

      void generateObjCoeffs ();
         //
         // For each OptVar, theVar, computes theVar->objCoeff.

      void printVars ();
         //
         // Prints all OptVars in this OptProblem.

      void printCons ();
         //
         // Prints all OptCons in this OptProblem.

      void printObjFunc ();
         //
         // Prints the objective function for this OptProblem.

      void printLexSeq ();
         //
         // Prints the sequence of OptVars to be lex maximized.
         // Valid only in multiple objectives mode.

      void prtMatrixByCols ();
         //
         // Prints the matrix in the column major ordered format.

      virtual void doScreening () = 0;
         //
         // Performs screening of constraints and variables.

      void reconstructDual ();
         //
         // Assuming the optimization problem was screened and an optimal dual
         // solution to the screened problem has been obtained, this function
         // modifies the dual solution, in order to make it optimal and feasible
         // for the dual of the unscreened problem.

      noCopyCtorAssign (WitOptProblem);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitCplexGateway * myCplexGateway_;
         //
         // The CplexGateway owned by this OptProblem, if any;
         // otherwise, NULL.

      WitList <WitOptVar> myOptVars_;
         //
         // The list of all OptVars in this OptProblem.

      WitList <WitOptCon> myOptCons_;
         //
         // The list of all OptCons in this OptProblem.

      int nCoeffs_;
         //
         // # Coeffs in optimization problem.

      WitOptCon * curCon_;
         //
         // The OptCon whose Coeffs are currently being generated.

      WitObjStack <WitCoeff> curConCoeffs_;
         //
         // The Coeffs for curCon_;

      WitPtrVec <WitCoeff> varLastCoeff_;
         //
         // varLastCoeff_[theVar->index ()] is the most recently
         // generated Coeff whose OptVar is theVar, or NULL is none exists.
         // Allocated only during buildCoeffs.

      int nIntVars_;
         //
         // # integer variables in this OptProblem.

      WitPtrVec <WitOptVar> myLexOptVarSeq_;
         //
         // In multiple objectives mode:
         //    The sequence of OptVars to be lexicographically maximized.
         // In single objective mode:
         //    Empty

      WitPtrVec <WitBoundPair> varPreScreenBounds_;
         //
         // Stores the return values of preScreenBounds (OptVar *).

      WitPtrVec <WitBoundPair> conPreScreenBounds_;
         //
         // Stores the return values of preScreenBounds (OptCon *).

      WitList <WitCoeff> screenedCoeffs_;
         //
         // For each Coeff in screenedCoeffs_, theCoeff:
         //    theCoeff->myVar () is a variable that was screened out.
         //    theCoeff->myCon () is the constraint that enabled the
         //    variable to be screened out.
         // The Coeffs are stored in reverse of the order in which the
         // screening was performed.
         // Valid iff needDual () is true.

      FILE * optProbFile_;
         //
         // Optimization problem output file.
   };
@


1.8
log
@Revisions for the removal of COIN.
@
text
@a141 4
      static bool cplexEmbedded ();
         //
         // Returns true, iff CPLEX was embedded into the current build of WIT.

d292 1
a292 1
      WitSolverMgr * mySolverMgr_;
d294 1
a294 1
         // The SolverMgr owned by this OptProblem, if any;
@


1.7
log
@Removed COIN from WIT.
@
text
@d142 4
@


1.6
log
@CPLEX
@
text
@a278 4
      void checkVarBounds ();
         //
         // Verifies that the lower bound on each OptVar is <= the upper bound.

@


1.5
log
@CPLEX
@
text
@d298 2
a299 1
         // The SolverMgr owned by this OptProblem.
@


1.4
log
@CPLEX
@
text
@d51 4
@


1.3
log
@CPLEX
@
text
@a50 16
      virtual void reportInfeasible () = 0;
         //
         // Does any special error reporting for an infeasible opt problem
         // prior to the reporting that will be done by the SolverMgr.

      virtual void reportUnbounded () = 0;
         //
         // Does any special error reporting for an unbounded opt problem
         // prior to the reporting that will be done by the SolverMgr.

      virtual void reportInfOrUnbdd () = 0;
         //
         // Does any special error reporting for an  opt problem that's either
         // infeasible or unbounded prior to the reporting that will be done by
         // the SolverMgr.

@


1.2
log
@CPLEX
@
text
@d53 1
a53 1
         // Does any special error reporting for an infeasible solution,
d58 1
a58 1
         // Does any special error reporting for an unbounded solution,
d61 6
@


1.1
log
@CPLEX
@
text
@a127 14
      void getLpProbForCplex (
            WitVector <double> & objective,
            WitVector <double> & rhs,
            WitVector <char>   & sense,
            WitVector <int>    & matbeg,
            WitVector <int>    & matcnt,
            WitVector <int>    & matind,
            WitVector <double> & matval,
            WitVector <double> & lb,
            WitVector <double> & ub);
         //
         // Retrieves the LP problem in the representation required for the
         // CPLEX function CPXcopylp.

a288 19
      void getRowDataForCplex (
            WitVector <double> & rhs,
            WitVector <char> &   sense);
         //
         // Retrieves the row portion of the LP aspect of the problem in the
         // representation required for the CPLEX function CPXcopylp.

      void getColumnDataForCplex (
            WitVector <double> & objective,
            WitVector <int> &    matbeg,
            WitVector <int> &    matcnt,
            WitVector <int> &    matind,
            WitVector <double> & matval,
            WitVector <double> & lb,
            WitVector <double> & ub);
         //
         // Retrieves the column portion of the LP aspect of the problem in the
         // representation required for the CPLEX function CPXcopylp.

@

