head	1.367;
access;
symbols
	sce_5_01_20080919:1.300
	latest_sce_4_20_20060523:1.193.0.2
	sce_4_20_20060523:1.193
	latest_sce4_20_OSL:1.188.0.2
	sce_4_20_OSL:1.188
	sce_410_withVa:1.158
	sce_4_05_20040511:1.109
	sce_4_00_20040201:1.76
	nextGenBranch:1.60.0.2
	nextGenRoot:1.60
	sce_3_30_20030627:1.59
	EndRw-branch:1.44.0.4
	Root-of-EndRw:1.44
	rwToStl:1.44.0.2
	latest_sce_3_10_20010924:1.21.0.2
	sce_3_10_20010924:1.21
	latest_sce_3_00_20010601:1.10.0.2
	sce_3_00_20010601:1.10
	latest_sce_2_31_20010308:1.8.0.2
	sce_2_31_20010308:1.8
	latest_sce_2_31_20001003:1.6.0.2
	sce_2_31_20001003:1.6
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.367
date	2011.09.28.23.50.41;	author rjw;	state Exp;
branches;
next	1.366;

1.366
date	2011.09.24.00.28.57;	author rjw;	state Exp;
branches;
next	1.365;

1.365
date	2011.08.30.20.18.23;	author rjw;	state Exp;
branches;
next	1.364;

1.364
date	2011.08.25.23.27.10;	author rjw;	state Exp;
branches;
next	1.363;

1.363
date	2011.02.16.17.02.50;	author rjw;	state Exp;
branches;
next	1.362;

1.362
date	2011.02.15.23.26.08;	author rjw;	state Exp;
branches;
next	1.361;

1.361
date	2011.02.15.21.20.21;	author rjw;	state Exp;
branches;
next	1.360;

1.360
date	2011.02.10.00.46.37;	author rjw;	state Exp;
branches;
next	1.359;

1.359
date	2011.02.08.23.21.15;	author rjw;	state Exp;
branches;
next	1.358;

1.358
date	2011.02.08.21.49.09;	author rjw;	state Exp;
branches;
next	1.357;

1.357
date	2011.02.07.15.46.04;	author rjw;	state Exp;
branches;
next	1.356;

1.356
date	2011.02.03.00.23.04;	author rjw;	state Exp;
branches;
next	1.355;

1.355
date	2011.02.02.00.37.14;	author rjw;	state Exp;
branches;
next	1.354;

1.354
date	2011.01.31.21.21.58;	author rjw;	state Exp;
branches;
next	1.353;

1.353
date	2011.01.27.19.55.55;	author rjw;	state Exp;
branches;
next	1.352;

1.352
date	2011.01.27.16.34.28;	author rjw;	state Exp;
branches;
next	1.351;

1.351
date	2011.01.27.15.12.48;	author rjw;	state Exp;
branches;
next	1.350;

1.350
date	2011.01.27.00.31.30;	author rjw;	state Exp;
branches;
next	1.349;

1.349
date	2011.01.26.22.37.25;	author rjw;	state Exp;
branches;
next	1.348;

1.348
date	2011.01.26.21.25.44;	author rjw;	state Exp;
branches;
next	1.347;

1.347
date	2011.01.14.00.35.24;	author rjw;	state Exp;
branches;
next	1.346;

1.346
date	2011.01.13.00.38.49;	author rjw;	state Exp;
branches;
next	1.345;

1.345
date	2011.01.12.23.09.36;	author rjw;	state Exp;
branches;
next	1.344;

1.344
date	2011.01.11.22.08.32;	author rjw;	state Exp;
branches;
next	1.343;

1.343
date	2010.10.12.22.02.22;	author rjw;	state Exp;
branches;
next	1.342;

1.342
date	2010.10.12.19.48.29;	author rjw;	state Exp;
branches;
next	1.341;

1.341
date	2010.09.24.18.17.23;	author rjw;	state Exp;
branches;
next	1.340;

1.340
date	2010.09.24.15.46.15;	author rjw;	state Exp;
branches;
next	1.339;

1.339
date	2010.09.22.20.21.54;	author rjw;	state Exp;
branches;
next	1.338;

1.338
date	2010.09.07.16.38.59;	author rjw;	state Exp;
branches;
next	1.337;

1.337
date	2010.09.02.20.16.25;	author rjw;	state Exp;
branches;
next	1.336;

1.336
date	2010.09.01.21.11.26;	author rjw;	state Exp;
branches;
next	1.335;

1.335
date	2010.07.01.22.41.22;	author rjw;	state Exp;
branches;
next	1.334;

1.334
date	2010.06.18.18.03.50;	author rjw;	state Exp;
branches;
next	1.333;

1.333
date	2010.06.17.16.17.15;	author rjw;	state Exp;
branches;
next	1.332;

1.332
date	2010.06.16.20.56.29;	author rjw;	state Exp;
branches;
next	1.331;

1.331
date	2010.06.16.18.33.38;	author rjw;	state Exp;
branches;
next	1.330;

1.330
date	2010.06.14.21.15.15;	author rjw;	state Exp;
branches;
next	1.329;

1.329
date	2010.05.21.18.17.57;	author rjw;	state Exp;
branches;
next	1.328;

1.328
date	2010.05.20.23.18.44;	author rjw;	state Exp;
branches;
next	1.327;

1.327
date	2010.05.14.23.49.06;	author rjw;	state Exp;
branches;
next	1.326;

1.326
date	2010.05.14.21.42.32;	author rjw;	state Exp;
branches;
next	1.325;

1.325
date	2010.05.14.17.47.15;	author rjw;	state Exp;
branches;
next	1.324;

1.324
date	2010.05.12.18.38.07;	author rjw;	state Exp;
branches;
next	1.323;

1.323
date	2010.05.11.22.26.28;	author rjw;	state Exp;
branches;
next	1.322;

1.322
date	2010.03.29.21.34.23;	author rjw;	state Exp;
branches;
next	1.321;

1.321
date	2010.03.26.22.22.54;	author rjw;	state Exp;
branches;
next	1.320;

1.320
date	2010.01.29.23.22.53;	author rjw;	state Exp;
branches;
next	1.319;

1.319
date	2010.01.28.23.16.58;	author rjw;	state Exp;
branches;
next	1.318;

1.318
date	2010.01.25.19.45.19;	author rjw;	state Exp;
branches;
next	1.317;

1.317
date	2009.12.15.19.31.22;	author rjw;	state Exp;
branches;
next	1.316;

1.316
date	2009.12.14.21.34.55;	author rjw;	state Exp;
branches;
next	1.315;

1.315
date	2009.12.09.21.19.32;	author rjw;	state Exp;
branches;
next	1.314;

1.314
date	2009.12.09.00.15.34;	author rjw;	state Exp;
branches;
next	1.313;

1.313
date	2009.12.05.00.10.20;	author rjw;	state Exp;
branches;
next	1.312;

1.312
date	2009.12.04.23.30.53;	author rjw;	state Exp;
branches;
next	1.311;

1.311
date	2009.11.26.00.24.09;	author rjw;	state Exp;
branches;
next	1.310;

1.310
date	2009.11.17.19.31.38;	author rjw;	state Exp;
branches;
next	1.309;

1.309
date	2009.11.13.19.01.27;	author rjw;	state Exp;
branches;
next	1.308;

1.308
date	2009.11.12.17.36.37;	author rjw;	state Exp;
branches;
next	1.307;

1.307
date	2009.10.08.16.06.03;	author rjw;	state Exp;
branches;
next	1.306;

1.306
date	2009.10.07.22.08.38;	author rjw;	state Exp;
branches;
next	1.305;

1.305
date	2009.06.23.16.10.35;	author rjw;	state Exp;
branches;
next	1.304;

1.304
date	2009.01.30.16.07.19;	author rjw;	state Exp;
branches;
next	1.303;

1.303
date	2009.01.05.16.09.42;	author rjw;	state Exp;
branches;
next	1.302;

1.302
date	2008.11.12.19.52.25;	author rjw;	state Exp;
branches;
next	1.301;

1.301
date	2008.08.25.20.47.09;	author rjw;	state Exp;
branches;
next	1.300;

1.300
date	2008.07.02.17.48.37;	author rjw;	state Exp;
branches;
next	1.299;

1.299
date	2008.07.02.14.17.35;	author rjw;	state Exp;
branches;
next	1.298;

1.298
date	2008.07.01.20.08.35;	author rjw;	state Exp;
branches;
next	1.297;

1.297
date	2008.02.25.22.35.10;	author rjw;	state Exp;
branches;
next	1.296;

1.296
date	2008.02.22.23.18.19;	author rjw;	state Exp;
branches;
next	1.295;

1.295
date	2008.02.22.21.36.11;	author rjw;	state Exp;
branches;
next	1.294;

1.294
date	2008.02.21.22.20.56;	author rjw;	state Exp;
branches;
next	1.293;

1.293
date	2008.01.21.21.47.18;	author rjw;	state Exp;
branches;
next	1.292;

1.292
date	2008.01.18.22.41.00;	author rjw;	state Exp;
branches;
next	1.291;

1.291
date	2008.01.14.19.21.15;	author rjw;	state Exp;
branches;
next	1.290;

1.290
date	2008.01.11.21.47.42;	author rjw;	state Exp;
branches;
next	1.289;

1.289
date	2007.10.30.21.44.18;	author rjw;	state Exp;
branches;
next	1.288;

1.288
date	2007.10.22.19.58.54;	author rjw;	state Exp;
branches;
next	1.287;

1.287
date	2007.10.22.19.20.38;	author rjw;	state Exp;
branches;
next	1.286;

1.286
date	2007.10.22.18.53.59;	author rjw;	state Exp;
branches;
next	1.285;

1.285
date	2007.08.29.19.46.10;	author rjw;	state Exp;
branches;
next	1.284;

1.284
date	2007.08.29.16.24.24;	author rjw;	state Exp;
branches;
next	1.283;

1.283
date	2007.08.28.17.38.36;	author rjw;	state Exp;
branches;
next	1.282;

1.282
date	2007.08.24.21.12.39;	author rjw;	state Exp;
branches;
next	1.281;

1.281
date	2007.07.16.20.15.00;	author rjw;	state Exp;
branches;
next	1.280;

1.280
date	2007.07.16.18.12.33;	author rjw;	state Exp;
branches;
next	1.279;

1.279
date	2007.05.30.22.05.52;	author rjw;	state Exp;
branches;
next	1.278;

1.278
date	2007.05.21.15.20.11;	author rjw;	state Exp;
branches;
next	1.277;

1.277
date	2007.05.17.17.59.18;	author rjw;	state Exp;
branches;
next	1.276;

1.276
date	2007.05.16.22.36.36;	author rjw;	state Exp;
branches;
next	1.275;

1.275
date	2007.05.16.22.16.46;	author rjw;	state Exp;
branches;
next	1.274;

1.274
date	2007.04.30.19.32.31;	author rjw;	state Exp;
branches;
next	1.273;

1.273
date	2007.04.24.21.18.14;	author rjw;	state Exp;
branches;
next	1.272;

1.272
date	2007.04.23.21.03.21;	author rjw;	state Exp;
branches;
next	1.271;

1.271
date	2007.04.23.20.20.00;	author rjw;	state Exp;
branches;
next	1.270;

1.270
date	2007.04.20.23.31.47;	author rjw;	state Exp;
branches;
next	1.269;

1.269
date	2007.04.20.20.51.14;	author rjw;	state Exp;
branches;
next	1.268;

1.268
date	2007.04.19.21.38.45;	author rjw;	state Exp;
branches;
next	1.267;

1.267
date	2007.04.11.23.03.39;	author rjw;	state Exp;
branches;
next	1.266;

1.266
date	2007.04.11.16.05.41;	author rjw;	state Exp;
branches;
next	1.265;

1.265
date	2007.04.10.16.33.22;	author rjw;	state Exp;
branches;
next	1.264;

1.264
date	2007.04.09.16.05.09;	author rjw;	state Exp;
branches;
next	1.263;

1.263
date	2007.03.30.22.33.03;	author rjw;	state Exp;
branches;
next	1.262;

1.262
date	2007.03.29.21.16.49;	author rjw;	state Exp;
branches;
next	1.261;

1.261
date	2007.03.28.22.14.33;	author rjw;	state Exp;
branches;
next	1.260;

1.260
date	2007.03.20.22.07.24;	author rjw;	state Exp;
branches;
next	1.259;

1.259
date	2007.03.08.22.47.18;	author rjw;	state Exp;
branches;
next	1.258;

1.258
date	2007.03.08.17.02.55;	author rjw;	state Exp;
branches;
next	1.257;

1.257
date	2007.03.02.22.11.02;	author rjw;	state Exp;
branches;
next	1.256;

1.256
date	2007.03.02.21.05.27;	author rjw;	state Exp;
branches;
next	1.255;

1.255
date	2007.02.28.22.15.49;	author rjw;	state Exp;
branches;
next	1.254;

1.254
date	2007.01.29.23.12.43;	author rjw;	state Exp;
branches;
next	1.253;

1.253
date	2007.01.29.22.34.13;	author rjw;	state Exp;
branches;
next	1.252;

1.252
date	2007.01.29.21.52.04;	author rjw;	state Exp;
branches;
next	1.251;

1.251
date	2007.01.26.21.03.15;	author rjw;	state Exp;
branches;
next	1.250;

1.250
date	2007.01.19.23.47.07;	author rjw;	state Exp;
branches;
next	1.249;

1.249
date	2007.01.16.16.53.45;	author rjw;	state Exp;
branches;
next	1.248;

1.248
date	2007.01.16.16.27.40;	author rjw;	state Exp;
branches;
next	1.247;

1.247
date	2007.01.16.00.25.06;	author rjw;	state Exp;
branches;
next	1.246;

1.246
date	2007.01.15.22.25.30;	author rjw;	state Exp;
branches;
next	1.245;

1.245
date	2007.01.15.21.15.16;	author rjw;	state Exp;
branches;
next	1.244;

1.244
date	2007.01.12.21.04.02;	author rjw;	state Exp;
branches;
next	1.243;

1.243
date	2007.01.12.20.00.37;	author rjw;	state Exp;
branches;
next	1.242;

1.242
date	2007.01.09.21.07.49;	author rjw;	state Exp;
branches;
next	1.241;

1.241
date	2007.01.09.15.55.25;	author rjw;	state Exp;
branches;
next	1.240;

1.240
date	2007.01.08.18.38.25;	author rjw;	state Exp;
branches;
next	1.239;

1.239
date	2007.01.03.18.42.21;	author rjw;	state Exp;
branches;
next	1.238;

1.238
date	2006.12.28.21.03.22;	author rjw;	state Exp;
branches;
next	1.237;

1.237
date	2006.12.28.16.39.36;	author rjw;	state Exp;
branches;
next	1.236;

1.236
date	2006.12.26.22.24.07;	author rjw;	state Exp;
branches;
next	1.235;

1.235
date	2006.12.19.19.26.47;	author rjw;	state Exp;
branches;
next	1.234;

1.234
date	2006.12.06.19.52.47;	author rjw;	state Exp;
branches;
next	1.233;

1.233
date	2006.12.01.21.36.37;	author rjw;	state Exp;
branches;
next	1.232;

1.232
date	2006.12.01.19.55.18;	author rjw;	state Exp;
branches;
next	1.231;

1.231
date	2006.11.20.22.29.33;	author rjw;	state Exp;
branches;
next	1.230;

1.230
date	2006.11.20.17.04.53;	author rjw;	state Exp;
branches;
next	1.229;

1.229
date	2006.11.18.00.09.22;	author rjw;	state Exp;
branches;
next	1.228;

1.228
date	2006.11.17.17.22.00;	author rjw;	state Exp;
branches;
next	1.227;

1.227
date	2006.11.14.23.10.26;	author rjw;	state Exp;
branches;
next	1.226;

1.226
date	2006.11.01.17.31.46;	author rjw;	state Exp;
branches;
next	1.225;

1.225
date	2006.10.19.21.54.30;	author rjw;	state Exp;
branches;
next	1.224;

1.224
date	2006.10.13.20.47.03;	author rjw;	state Exp;
branches;
next	1.223;

1.223
date	2006.10.12.20.48.11;	author rjw;	state Exp;
branches;
next	1.222;

1.222
date	2006.10.12.19.43.44;	author rjw;	state Exp;
branches;
next	1.221;

1.221
date	2006.10.12.16.22.13;	author rjw;	state Exp;
branches;
next	1.220;

1.220
date	2006.10.11.22.37.22;	author rjw;	state Exp;
branches;
next	1.219;

1.219
date	2006.10.10.19.10.46;	author rjw;	state Exp;
branches;
next	1.218;

1.218
date	2006.10.09.23.25.24;	author rjw;	state Exp;
branches;
next	1.217;

1.217
date	2006.10.05.20.54.54;	author rjw;	state Exp;
branches;
next	1.216;

1.216
date	2006.10.05.18.19.15;	author rjw;	state Exp;
branches;
next	1.215;

1.215
date	2006.10.04.20.44.49;	author rjw;	state Exp;
branches;
next	1.214;

1.214
date	2006.10.04.18.45.07;	author rjw;	state Exp;
branches;
next	1.213;

1.213
date	2006.10.02.19.27.35;	author rjw;	state Exp;
branches;
next	1.212;

1.212
date	2006.09.29.22.56.41;	author rjw;	state Exp;
branches;
next	1.211;

1.211
date	2006.09.27.20.10.17;	author rjw;	state Exp;
branches;
next	1.210;

1.210
date	2006.09.21.20.31.52;	author rjw;	state Exp;
branches;
next	1.209;

1.209
date	2006.09.15.23.09.41;	author rjw;	state Exp;
branches;
next	1.208;

1.208
date	2006.09.15.22.00.37;	author rjw;	state Exp;
branches;
next	1.207;

1.207
date	2006.09.15.16.20.19;	author rjw;	state Exp;
branches;
next	1.206;

1.206
date	2006.09.08.16.16.01;	author rjw;	state Exp;
branches;
next	1.205;

1.205
date	2006.08.30.16.37.35;	author rjw;	state Exp;
branches;
next	1.204;

1.204
date	2006.08.22.21.52.51;	author rjw;	state Exp;
branches;
next	1.203;

1.203
date	2006.08.22.21.26.54;	author rjw;	state Exp;
branches;
next	1.202;

1.202
date	2006.08.18.23.32.17;	author rjw;	state Exp;
branches;
next	1.201;

1.201
date	2006.08.18.22.29.02;	author rjw;	state Exp;
branches;
next	1.200;

1.200
date	2006.08.17.22.50.38;	author rjw;	state Exp;
branches;
next	1.199;

1.199
date	2006.08.17.19.36.41;	author rjw;	state Exp;
branches;
next	1.198;

1.198
date	2006.08.16.15.49.19;	author rjw;	state Exp;
branches;
next	1.197;

1.197
date	2006.08.09.18.36.40;	author rjw;	state Exp;
branches;
next	1.196;

1.196
date	2006.08.08.18.31.19;	author rjw;	state Exp;
branches;
next	1.195;

1.195
date	2006.08.02.18.06.01;	author rjw;	state Exp;
branches;
next	1.194;

1.194
date	2006.08.02.17.27.32;	author rjw;	state Exp;
branches;
next	1.193;

1.193
date	2006.05.16.22.01.07;	author rjw;	state Exp;
branches;
next	1.192;

1.192
date	2006.05.08.19.51.25;	author rjw;	state Exp;
branches;
next	1.191;

1.191
date	2006.05.02.17.34.16;	author rjw;	state Exp;
branches;
next	1.190;

1.190
date	2006.04.18.14.31.04;	author rjw;	state Exp;
branches;
next	1.189;

1.189
date	2006.04.17.20.21.31;	author rjw;	state Exp;
branches;
next	1.188;

1.188
date	2006.04.03.17.24.14;	author rjw;	state Exp;
branches;
next	1.187;

1.187
date	2006.03.10.23.23.31;	author rjw;	state Exp;
branches;
next	1.186;

1.186
date	2005.11.10.20.33.08;	author rjw;	state Exp;
branches;
next	1.185;

1.185
date	2005.11.04.20.42.55;	author rjw;	state Exp;
branches;
next	1.184;

1.184
date	2005.11.03.19.53.47;	author rjw;	state Exp;
branches;
next	1.183;

1.183
date	2005.11.02.23.59.32;	author rjw;	state Exp;
branches;
next	1.182;

1.182
date	2005.11.01.16.30.55;	author rjw;	state Exp;
branches;
next	1.181;

1.181
date	2005.10.31.21.29.26;	author rjw;	state Exp;
branches;
next	1.180;

1.180
date	2005.10.28.17.22.58;	author rjw;	state Exp;
branches;
next	1.179;

1.179
date	2005.10.17.15.02.07;	author rjw;	state Exp;
branches;
next	1.178;

1.178
date	2005.10.13.20.51.50;	author rjw;	state Exp;
branches;
next	1.177;

1.177
date	2005.10.13.19.01.50;	author rjw;	state Exp;
branches;
next	1.176;

1.176
date	2005.10.10.14.59.57;	author rjw;	state Exp;
branches;
next	1.175;

1.175
date	2005.10.07.20.01.22;	author rjw;	state Exp;
branches;
next	1.174;

1.174
date	2005.10.07.19.36.26;	author rjw;	state Exp;
branches;
next	1.173;

1.173
date	2005.10.07.17.14.21;	author rjw;	state Exp;
branches;
next	1.172;

1.172
date	2005.10.07.16.05.21;	author rjw;	state Exp;
branches;
next	1.171;

1.171
date	2005.10.07.15.45.15;	author rjw;	state Exp;
branches;
next	1.170;

1.170
date	2005.10.06.15.47.34;	author rjw;	state Exp;
branches;
next	1.169;

1.169
date	2005.09.20.20.37.38;	author rjw;	state Exp;
branches;
next	1.168;

1.168
date	2005.09.20.20.18.02;	author rjw;	state Exp;
branches;
next	1.167;

1.167
date	2005.09.20.19.48.19;	author rjw;	state Exp;
branches;
next	1.166;

1.166
date	2005.09.19.14.49.33;	author rjw;	state Exp;
branches;
next	1.165;

1.165
date	2005.09.15.18.57.52;	author rjw;	state Exp;
branches;
next	1.164;

1.164
date	2005.09.15.15.27.21;	author rjw;	state Exp;
branches;
next	1.163;

1.163
date	2005.09.14.22.44.10;	author rjw;	state Exp;
branches;
next	1.162;

1.162
date	2005.09.14.21.54.46;	author rjw;	state Exp;
branches;
next	1.161;

1.161
date	2005.09.12.22.17.33;	author rjw;	state Exp;
branches;
next	1.160;

1.160
date	2005.09.12.21.44.20;	author rjw;	state Exp;
branches;
next	1.159;

1.159
date	2005.09.08.19.29.45;	author rjw;	state Exp;
branches;
next	1.158;

1.158
date	2005.09.06.19.22.28;	author rjw;	state Exp;
branches;
next	1.157;

1.157
date	2005.09.06.19.18.15;	author rjw;	state Exp;
branches;
next	1.156;

1.156
date	2005.09.06.17.51.31;	author rjw;	state Exp;
branches;
next	1.155;

1.155
date	2005.09.06.17.33.36;	author rjw;	state Exp;
branches;
next	1.154;

1.154
date	2005.09.01.21.45.03;	author rjw;	state Exp;
branches;
next	1.153;

1.153
date	2005.08.31.22.11.01;	author rjw;	state Exp;
branches;
next	1.152;

1.152
date	2005.08.31.19.00.36;	author rjw;	state Exp;
branches;
next	1.151;

1.151
date	2005.08.31.18.02.41;	author rjw;	state Exp;
branches;
next	1.150;

1.150
date	2005.08.31.14.52.04;	author rjw;	state Exp;
branches;
next	1.149;

1.149
date	2005.08.29.22.29.24;	author rjw;	state Exp;
branches;
next	1.148;

1.148
date	2005.08.29.21.44.42;	author rjw;	state Exp;
branches;
next	1.147;

1.147
date	2005.08.29.20.29.48;	author rjw;	state Exp;
branches;
next	1.146;

1.146
date	2005.08.29.19.14.35;	author rjw;	state Exp;
branches;
next	1.145;

1.145
date	2005.08.25.21.47.40;	author rjw;	state Exp;
branches;
next	1.144;

1.144
date	2005.08.25.17.50.32;	author rjw;	state Exp;
branches;
next	1.143;

1.143
date	2005.08.24.19.26.42;	author rjw;	state Exp;
branches;
next	1.142;

1.142
date	2005.08.23.19.45.19;	author rjw;	state Exp;
branches;
next	1.141;

1.141
date	2005.08.23.18.45.42;	author rjw;	state Exp;
branches;
next	1.140;

1.140
date	2005.08.23.17.38.58;	author rjw;	state Exp;
branches;
next	1.139;

1.139
date	2005.08.22.20.38.59;	author rjw;	state Exp;
branches;
next	1.138;

1.138
date	2005.08.19.23.24.11;	author rjw;	state Exp;
branches;
next	1.137;

1.137
date	2005.08.19.21.38.03;	author rjw;	state Exp;
branches;
next	1.136;

1.136
date	2005.08.17.18.15.10;	author rjw;	state Exp;
branches;
next	1.135;

1.135
date	2005.08.12.20.39.04;	author rjw;	state Exp;
branches;
next	1.134;

1.134
date	2005.08.12.20.32.08;	author rjw;	state Exp;
branches;
next	1.133;

1.133
date	2005.08.12.19.35.30;	author rjw;	state Exp;
branches;
next	1.132;

1.132
date	2005.07.11.22.53.49;	author rjw;	state Exp;
branches;
next	1.131;

1.131
date	2005.07.08.20.48.20;	author rjw;	state Exp;
branches;
next	1.130;

1.130
date	2005.07.08.15.59.43;	author rjw;	state Exp;
branches;
next	1.129;

1.129
date	2005.06.13.16.48.48;	author rjw;	state Exp;
branches;
next	1.128;

1.128
date	2005.06.09.17.30.39;	author rjw;	state Exp;
branches;
next	1.127;

1.127
date	2005.06.02.18.03.00;	author rjw;	state Exp;
branches;
next	1.126;

1.126
date	2005.05.17.17.30.44;	author rjw;	state Exp;
branches;
next	1.125;

1.125
date	2005.03.16.17.00.31;	author rjw;	state Exp;
branches;
next	1.124;

1.124
date	2005.03.02.22.34.37;	author rjw;	state Exp;
branches;
next	1.123;

1.123
date	2005.02.25.21.26.10;	author rjw;	state Exp;
branches;
next	1.122;

1.122
date	2005.02.24.23.23.57;	author rjw;	state Exp;
branches;
next	1.121;

1.121
date	2005.02.10.18.38.30;	author rjw;	state Exp;
branches;
next	1.120;

1.120
date	2005.02.04.21.17.34;	author rjw;	state Exp;
branches;
next	1.119;

1.119
date	2005.02.03.23.15.35;	author rjw;	state Exp;
branches;
next	1.118;

1.118
date	2005.02.03.21.31.36;	author rjw;	state Exp;
branches;
next	1.117;

1.117
date	2005.02.02.17.26.53;	author rjw;	state Exp;
branches;
next	1.116;

1.116
date	2005.01.31.23.59.31;	author rjw;	state Exp;
branches;
next	1.115;

1.115
date	2005.01.21.23.01.52;	author rjw;	state Exp;
branches;
next	1.114;

1.114
date	2004.11.09.23.08.01;	author rjw;	state Exp;
branches;
next	1.113;

1.113
date	2004.11.04.20.42.28;	author rjw;	state Exp;
branches;
next	1.112;

1.112
date	2004.10.12.21.29.50;	author rjw;	state Exp;
branches;
next	1.111;

1.111
date	2004.05.13.20.53.56;	author rjw;	state Exp;
branches;
next	1.110;

1.110
date	2004.05.12.21.50.59;	author rjw;	state Exp;
branches;
next	1.109;

1.109
date	2004.05.07.22.15.15;	author rjw;	state Exp;
branches;
next	1.108;

1.108
date	2004.05.05.15.43.58;	author rjw;	state Exp;
branches;
next	1.107;

1.107
date	2004.04.30.15.57.19;	author rjw;	state Exp;
branches;
next	1.106;

1.106
date	2004.04.16.17.42.50;	author rjw;	state Exp;
branches;
next	1.105;

1.105
date	2004.04.09.15.52.47;	author rjw;	state Exp;
branches;
next	1.104;

1.104
date	2004.04.07.19.21.32;	author rjw;	state Exp;
branches;
next	1.103;

1.103
date	2004.04.06.18.55.59;	author rjw;	state Exp;
branches;
next	1.102;

1.102
date	2004.04.06.15.42.17;	author rjw;	state Exp;
branches;
next	1.101;

1.101
date	2004.04.05.23.04.57;	author rjw;	state Exp;
branches;
next	1.100;

1.100
date	2004.04.05.22.18.08;	author rjw;	state Exp;
branches;
next	1.99;

1.99
date	2004.04.02.20.54.16;	author rjw;	state Exp;
branches;
next	1.98;

1.98
date	2004.04.01.21.05.12;	author rjw;	state Exp;
branches;
next	1.97;

1.97
date	2004.03.31.22.56.08;	author rjw;	state Exp;
branches;
next	1.96;

1.96
date	2004.03.30.21.10.08;	author rjw;	state Exp;
branches;
next	1.95;

1.95
date	2004.03.30.18.57.05;	author rjw;	state Exp;
branches;
next	1.94;

1.94
date	2004.03.30.00.05.33;	author rjw;	state Exp;
branches;
next	1.93;

1.93
date	2004.03.29.22.25.14;	author rjw;	state Exp;
branches;
next	1.92;

1.92
date	2004.03.26.17.03.33;	author rjw;	state Exp;
branches;
next	1.91;

1.91
date	2004.03.24.16.50.35;	author rjw;	state Exp;
branches;
next	1.90;

1.90
date	2004.03.11.16.36.18;	author rjw;	state Exp;
branches;
next	1.89;

1.89
date	2004.02.24.21.32.06;	author rjw;	state Exp;
branches;
next	1.88;

1.88
date	2004.02.24.20.10.58;	author rjw;	state Exp;
branches;
next	1.87;

1.87
date	2004.02.24.19.37.23;	author rjw;	state Exp;
branches;
next	1.86;

1.86
date	2004.02.20.22.46.03;	author rjw;	state Exp;
branches;
next	1.85;

1.85
date	2004.02.20.16.38.01;	author rjw;	state Exp;
branches;
next	1.84;

1.84
date	2004.02.20.15.37.36;	author rjw;	state Exp;
branches;
next	1.83;

1.83
date	2004.02.19.22.56.11;	author rjw;	state Exp;
branches;
next	1.82;

1.82
date	2004.02.19.21.21.28;	author rjw;	state Exp;
branches;
next	1.81;

1.81
date	2004.02.18.00.05.25;	author rjw;	state Exp;
branches;
next	1.80;

1.80
date	2004.02.17.20.23.47;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2004.02.14.00.45.35;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2004.02.10.23.57.45;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2004.02.05.16.39.43;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2004.01.19.23.26.51;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2003.12.31.20.09.19;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2003.12.30.22.10.47;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2003.12.30.20.41.44;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2003.12.30.18.08.29;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2003.12.30.16.24.25;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2003.12.23.16.18.48;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2003.12.04.16.45.16;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2003.12.01.21.05.06;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2003.10.31.15.37.55;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2003.09.22.23.13.52;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2003.09.22.20.27.02;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2003.09.19.18.29.01;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2003.09.03.18.09.58;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2003.08.05.20.18.23;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2003.08.01.21.01.38;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2003.07.28.20.34.13;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2003.05.07.18.06.18;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2003.03.24.20.58.32;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2003.03.24.20.40.22;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2003.02.21.18.56.29;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2003.02.14.20.13.04;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2003.01.31.21.29.00;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2003.01.27.21.17.21;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2003.01.23.22.48.15;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2003.01.22.19.32.15;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2003.01.17.14.57.50;	author rwToStl;	state Exp;
branches;
next	1.49;

1.49
date	2003.01.02.22.18.56;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2002.12.30.21.57.27;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2002.12.30.20.37.29;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2002.12.23.20.44.49;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2002.12.19.17.15.24;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2002.10.18.22.23.59;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2002.10.16.22.30.23;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2002.10.10.19.21.19;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2002.09.30.21.36.41;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2002.08.22.14.01.50;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2002.06.24.22.02.27;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2002.05.17.21.45.07;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2002.04.26.18.20.19;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2002.04.26.15.53.45;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2002.04.26.15.08.57;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2002.04.25.21.48.13;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2002.04.25.19.14.54;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2002.04.24.18.26.10;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2002.04.22.14.32.15;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2001.12.20.21.41.20;	author bobw;	state Exp;
branches;
next	1.29;

1.29
date	2001.12.20.18.50.07;	author bobw;	state Exp;
branches;
next	1.28;

1.28
date	2001.12.19.16.17.13;	author bobw;	state Exp;
branches;
next	1.27;

1.27
date	2001.11.09.21.42.28;	author bobw;	state Exp;
branches;
next	1.26;

1.26
date	2001.10.05.20.53.59;	author bobw;	state Exp;
branches;
next	1.25;

1.25
date	2001.10.05.18.55.29;	author bobw;	state Exp;
branches;
next	1.24;

1.24
date	2001.10.03.18.55.13;	author bobw;	state Exp;
branches;
next	1.23;

1.23
date	2001.09.28.21.42.40;	author bobw;	state Exp;
branches;
next	1.22;

1.22
date	2001.09.28.20.50.28;	author bobw;	state Exp;
branches;
next	1.21;

1.21
date	2001.09.16.21.42.33;	author bobw;	state Exp;
branches;
next	1.20;

1.20
date	2001.09.14.13.23.47;	author fasano;	state Exp;
branches;
next	1.19;

1.19
date	2001.08.30.23.00.35;	author bobw;	state Exp;
branches;
next	1.18;

1.18
date	2001.08.29.21.37.22;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2001.08.06.17.44.41;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.08.06.17.31.09;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.08.03.18.40.44;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.07.30.15.12.12;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.07.28.00.48.36;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.07.27.21.28.40;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.07.25.16.08.21;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.29.22.11.29;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.17.15.11.19;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2000.12.14.19.35.23;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.13.21.03.56;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.25.20.12.36;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.07.14.20.27.32;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.05.08.21.56.16;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.10.23.17.47;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.57.14;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.32;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.32;	author wit;	state Exp;
branches;
next	;


desc
@@


1.367
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "api.C"
//
// Contains the implementations of all of outer API functions (which are 
// C-callable global functions). These functions call the inner API functions
// (which are C++ WitRun member functions).
//
// Contains the implementation of class ErrorExc.
//------------------------------------------------------------------------------

#include <WitRun.h>
#include <ApiMgr.h>
#include <ISRealArg.h>
#include <OSRealArg.h>
#include <IVRealArg.h>
#include <OVRealArg.h>
#include <OTDARealArg.h>
#include <wit.h>

#include <stdlib.h>

//------------------------------------------------------------------------------
// Macro STANDARD_API_IMPL (theWitRun, innerFunc, argList)
//
// "Standard API Implementation"
// This macro expands to the standard implementation of an outer API function.
//
// Arguments:
//    theWitRun    The WitRun for which the inner API function is to be called.
//    innerFunc    The name of the inner API function to be called.
//                 It must also be the name of the outer API function within
//                 which this macro is being called.
//    argList      The list of arguments (in parentheses) to be passed to the
//                 inner API function.
//
// For most outer API functions, the implementation of the function consists
// entirely of a call to this macro or the macro STANDARD_DBL_API_IMPL.
// All other outer API functions are preceded by the following comment:
//
// Non-Standard API Function.
//------------------------------------------------------------------------------

#define STANDARD_API_IMPL(theWitRun, innerFunc, argList)                       \
   {                                                                           \
   try                                                                         \
      {                                                                        \
      WitApiMgr::startApiFunc (theWitRun, #innerFunc);                         \
                                                                               \
      theWitRun->innerFunc argList;                                            \
                                                                               \
      theWitRun->myApiMgr ()->finishApiFunc ();                                \
      }                                                                        \
                                                                               \
   catch (...)                                                                 \
      {                                                                        \
      theWitRun->myApiMgr ()->handleAnyExc ();                                 \
      }                                                                        \
                                                                               \
   return theWitRun->myApiMgr ()->apiRc ();                                    \
   }                                                                           \

//------------------------------------------------------------------------------
// Macro STANDARD_DBL_API_IMPL (theWitRun, innerFunc, argList)
//
// "Standard Double API Implementation"
//
// Same as STANDARD_API_IMPL, but appends "Dbl" to the end of the name of the
// inner API function to construct the name of the outer API function.
//------------------------------------------------------------------------------

#define STANDARD_DBL_API_IMPL(theWitRun, innerFunc, argList)                   \
   {                                                                           \
   try                                                                         \
      {                                                                        \
      WitApiMgr::startApiFunc (theWitRun, #innerFunc "Dbl");                   \
                                                                               \
      theWitRun->innerFunc argList;                                            \
                                                                               \
      theWitRun->myApiMgr ()->finishApiFunc ();                                \
      }                                                                        \
                                                                               \
   catch (...)                                                                 \
      {                                                                        \
      theWitRun->myApiMgr ()->handleAnyExc ();                                 \
      }                                                                        \
                                                                               \
   return theWitRun->myApiMgr ()->apiRc ();                                    \
   }                                                                           \

//------------------------------------------------------------------------------
// nonConst
//
// Converts a const char * to a char *.
// Used to initialize a variable of type witAttr or witFileFormat with a string
// constant.
//------------------------------------------------------------------------------

namespace WitNonClass
   {
   witAttr nonConst (const char * theCstring)
      {
      return const_cast <char *> (theCstring);
      }
   }

//------------------------------------------------------------------------------

extern "C"
   {

//------------------------------------------------------------------------------
// WIT API functions for the current release.
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witAddBomEntry (
      WitRun * const theWitRun,
      const char * const consumingOperationName,
      const char * const consumedPartName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAddBomEntry, (
         consumingOperationName,
         consumedPartName))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witAddBopEntry (
      WitRun * const theWitRun,
      const char * const producingOperationName,
      const char * const producedPartName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAddBopEntry, (
         producingOperationName,
         producedPartName))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witAddDblCplexParSpec (
      WitRun * const     theWitRun,
      const char * const theName,
      const float        theValue)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAddDblCplexParSpec, (
         theName,
         theValue))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witAddDblCplexParSpecDbl (
      WitRun * const     theWitRun,
      const char * const theName,
      const double       theValue)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witAddDblCplexParSpec, (
         theName,
         theValue))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witAddDemand (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAddDemand, (
         demandedPartName,
         demandName))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witAddIntCplexParSpec (
      WitRun * const     theWitRun,
      const char * const theName,
      const int          theValue)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAddIntCplexParSpec, (
         theName,
         theValue))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witAddOperation (
      WitRun * const theWitRun,
      const char * const operationName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAddOperation, (
         operationName))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witAddPart (
      WitRun * const theWitRun,
      const char * const partName,
      const witAttr partCategory)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAddPart, (
         partName,
         partCategory))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witAddPartWithOperation (
      WitRun * const theWitRun,
      const char * const partAndOperationName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAddPartWithOperation, (
         partAndOperationName))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witAddSubsBomEntry (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const char * const consumedPartName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAddSubsBomEntry, (
         operationName,
         bomEntryIndex,
         consumedPartName))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witAdvanceObjItr (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAdvanceObjItr, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witAppendToPipSeq (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      int                shipPeriod,
      float              incShipVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAppendToPipSeq, (
         partName,
         demandName,
         shipPeriod,
         incShipVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witAppendToPipSeqDbl (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      int                shipPeriod,
      double             incShipVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witAppendToPipSeq, (
         partName,
         demandName,
         shipPeriod,
         incShipVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witBuildPip (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witBuildPip, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witClearCplexParSpecs (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witClearCplexParSpecs, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witClearPegging (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witClearPegging, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witClearPipSeq (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witClearPipSeq, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witClearStochSoln (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witClearStochSoln, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witCopyBomEntryData (
      WitRun * const     dupWitRun,
      const char * const dupOperationName,
      const int          dupBomEntryIndex,
      WitRun * const     origWitRun,
      const char * const origOperationName,
      const int          origBomEntryIndex)
   {
   STANDARD_API_IMPL (
      dupWitRun,
      witCopyBomEntryData, (
         dupOperationName,
         dupBomEntryIndex,
         origWitRun,
         origOperationName,
         origBomEntryIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witCopyBopEntryData (
      WitRun * const     dupWitRun,
      const char * const dupOperationName,
      const int          dupBopEntryIndex,
      WitRun * const     origWitRun,
      const char * const origOperationName,
      const int          origBopEntryIndex)
   {
   STANDARD_API_IMPL (
      dupWitRun,
      witCopyBopEntryData, (
         dupOperationName,
         dupBopEntryIndex,
         origWitRun,
         origOperationName,
         origBopEntryIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witCopyData (
      WitRun * const dupWitRun,
      WitRun * const origWitRun)
   {
   STANDARD_API_IMPL (
      dupWitRun,
      witCopyData, (
         origWitRun))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witCopyDemandData (
      WitRun * const     dupWitRun,
      const char * const dupPartName,
      const char * const dupDemandName,
      WitRun * const     origWitRun,
      const char * const origPartName,
      const char * const origDemandName)
   {
   STANDARD_API_IMPL (
      dupWitRun,
      witCopyDemandData, (
         dupPartName,
         dupDemandName,
         origWitRun,
         origPartName,
         origDemandName))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witCopyOperationData (
      WitRun * const     dupWitRun,
      const char * const dupOperationName,
      WitRun * const     origWitRun,
      const char * const origOperationName)
   {
   STANDARD_API_IMPL (
      dupWitRun,
      witCopyOperationData, (
         dupOperationName,
         origWitRun,
         origOperationName))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witCopyPartData (
      WitRun * const     dupWitRun,
      const char * const dupPartName,
      WitRun * const     origWitRun,
      const char * const origPartName)
   {
   STANDARD_API_IMPL (
      dupWitRun,
      witCopyPartData, (
         dupPartName,
         origWitRun,
         origPartName))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witCopySubsBomEntryData (
      WitRun * const     dupWitRun,
      const char * const dupOperationName,
      const int          dupBomEntryIndex,
      const int          dupSubsBomEntryIndex,
      WitRun * const     origWitRun,
      const char * const origOperationName,
      const int          origBomEntryIndex,
      const int          origSubsBomEntryIndex)
   {
   STANDARD_API_IMPL (
      dupWitRun,
      witCopySubsBomEntryData, (
         dupOperationName,
         dupBomEntryIndex,
         dupSubsBomEntryIndex,
         origWitRun,
         origOperationName,
         origBomEntryIndex,
         origSubsBomEntryIndex))
   }

//------------------------------------------------------------------------------

witReturnCode witDeleteRunInner (WitRun *);

//------------------------------------------------------------------------------
// Non-Standard API Function.
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witDeleteRun (
      WitRun * theWitRun)
   {
   witReturnCode theRC;

   if (theWitRun == NULL)
      return WitINFORMATIONAL_RC;

   theRC = witDeleteRunInner (theWitRun);

   if (theRC > WitWARNING_RC)
      return theRC;

   theWitRun->myApiMgr ()->lockMyWitRun ("witDeleteRun");

   delete theWitRun;

   return theRC;
   }

//------------------------------------------------------------------------------
// witDeleteRunInner
//
// Inner function for witDeleteRun.
// Not an actual API function.
//------------------------------------------------------------------------------

witReturnCode witDeleteRunInner (WitRun * theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witDeleteRun, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witDisplayData (
      WitRun * const theWitRun,
      const char * const fileName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witDisplayData, (
         fileName))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witEqHeurAlloc (
      WitRun * const theWitRun,
      const int lenLists,
      const char * const * const demandedPartNameList,
      const char * const * const demandNameList,
      const int * const shipPeriodList,
      const float * const desIncVolList,
      float * * incVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witEqHeurAlloc, (
         lenLists,
         demandedPartNameList,
         demandNameList,
         shipPeriodList,
         desIncVolList,
         incVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witEqHeurAllocDbl (
      WitRun * const theWitRun,
      const int lenLists,
      const char * const * const demandedPartNameList,
      const char * const * const demandNameList,
      const int * const shipPeriodList,
      const double * const desIncVolList,
      double * * incVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witEqHeurAlloc, (
         lenLists,
         demandedPartNameList,
         demandNameList,
         shipPeriodList,
         desIncVolList,
         incVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witEqHeurAllocTwme (
      WitRun * const theWitRun,
      const int lenLists,
      const char * const * const demandedPartNameList,
      const char * const * const demandNameList,
      const int * const shipPeriodList,
      const float * const desIncVolList,
      float * * incVolList,
      const witBoolean * const asapMultiExecList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witEqHeurAllocTwme, (
         lenLists,
         demandedPartNameList,
         demandNameList,
         shipPeriodList,
         desIncVolList,
         incVolList,
         asapMultiExecList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witEqHeurAllocTwmeDbl (
      WitRun * const theWitRun,
      const int lenLists,
      const char * const * const demandedPartNameList,
      const char * const * const demandNameList,
      const int * const shipPeriodList,
      const double * const desIncVolList,
      double * * incVolList,
      const witBoolean * const asapMultiExecList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witEqHeurAllocTwme, (
         lenLists,
         demandedPartNameList,
         demandNameList,
         shipPeriodList,
         desIncVolList,
         incVolList,
         asapMultiExecList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witEvalObjectives (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witEvalObjectives, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witFinishExtOpt (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witFinishExtOpt, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witFinishHeurAlloc (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witFinishHeurAlloc, ())
   }

//------------------------------------------------------------------------------
// Non-Standard API Function.
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witFree (
      void * mem)
   {
   free (mem);

   return WitINFORMATIONAL_RC;
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGeneratePriorities (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGeneratePriorities, ())
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetAccAfterSoftLB (
      WitRun * const theWitRun,
      witBoolean * accAfterSoftLB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetAccAfterSoftLB, (
         accAfterSoftLB))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetAccAfterOptImp (
      WitRun * const theWitRun,
      witBoolean * accAfterOptImp)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetAccAfterOptImp, (
         accAfterOptImp))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetAccelerated (
      WitRun * const theWitRun,
      witBoolean * accelerated)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetAccelerated, (
         accelerated))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetAppData (
      WitRun * const theWitRun,
      void * * appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetAppData, (
         appData))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetAutoPriority (
      WitRun * const theWitRun,
      witBoolean * autoPriority)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetAutoPriority, (
         autoPriority))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryAppData (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      void * * appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryAppData, (
         operationName,
         bomEntryIndex,
         appData))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryConsRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      float * * consRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryConsRate, (
         operationName,
         bomEntryIndex,
         consRate))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryConsRateDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      double * * consRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBomEntryConsRate, (
         operationName,
         bomEntryIndex,
         consRate))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryConsumedPart (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      char * * consumedPartName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryConsumedPart, (
         operationName,
         bomEntryIndex,
         consumedPartName))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryEarliestPeriod (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      int * earliestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryEarliestPeriod, (
         operationName,
         bomEntryIndex,
         earliestPeriod))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryExecPenalty (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      float * execPenalty)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryExecPenalty, (
         operationName,
         bomEntryIndex,
         execPenalty))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryExecPenaltyDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      double * execPenalty)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBomEntryExecPenalty, (
         operationName,
         bomEntryIndex,
         execPenalty))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryFalloutRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      float * falloutRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryFalloutRate, (
         operationName,
         bomEntryIndex,
         falloutRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryFalloutRateDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      double * falloutRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBomEntryFalloutRate, (
         operationName,
         bomEntryIndex,
         falloutRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryImpactPeriod (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      int * * impactPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryImpactPeriod, (
         operationName,
         bomEntryIndex,
         impactPeriod))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryLatestPeriod (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      int * latestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryLatestPeriod, (
         operationName,
         bomEntryIndex,
         latestPeriod))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryMandEC (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      witBoolean * mandEC)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryMandEC, (
         operationName,
         bomEntryIndex,
         mandEC))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryNSubsBomEntries (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      int * nSubsBomEntries)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryNSubsBomEntries, (
         operationName,
         bomEntryIndex,
         nSubsBomEntries))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryNonSubVarIndex (
      WitRun * const     theWitRun,
      const char * const consumingOperationName,
      const int          bomEntryIndex,
      const int          thePer,
      int *              nonSubVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryNonSubVarIndex, (
         consumingOperationName,
         bomEntryIndex,
         thePer,
         nonSubVarIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryOffset (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      float * * offset)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryOffset, (
         operationName,
         bomEntryIndex,
         offset))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryOffsetDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      double * * offset)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBomEntryOffset, (
         operationName,
         bomEntryIndex,
         offset))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryPropRtg (
      WitRun * const     theWitRun,
      const char * const operationName,
      const int          bomEntryIndex,
      witBoolean * *     propRtg)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryPropRtg, (
         operationName,
         bomEntryIndex,
         propRtg))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryRoutingShare (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      float * * routingShare)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryRoutingShare, (
         operationName,
         bomEntryIndex,
         routingShare))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryRoutingShareDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      double * * routingShare)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBomEntryRoutingShare, (
         operationName,
         bomEntryIndex,
         routingShare))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntrySelForDel (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      witBoolean * selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntrySelForDel, (
         operationName,
         bomEntryIndex,
         selForDel))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntrySingleSource (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      witBoolean * singleSource)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntrySingleSource, (
         operationName,
         bomEntryIndex,
         singleSource))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntrySubConIndex (
      WitRun * const     theWitRun,
      const char * const consumingOperationName,
      const int          bomEntryIndex,
      const int          thePer,
      int *              subConIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntrySubConIndex, (
         consumingOperationName,
         bomEntryIndex,
         thePer,
         subConIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryAppData (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      void * * appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryAppData, (
         operationName,
         bopEntryIndex,
         appData))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryEarliestPeriod (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      int * earliestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryEarliestPeriod, (
         operationName,
         bopEntryIndex,
         earliestPeriod))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryExpAllowed (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      witBoolean * expAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryExpAllowed, (
         operationName,
         bopEntryIndex,
         expAllowed))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryExpAversion (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      float * expAversion)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryExpAversion, (
         operationName,
         bopEntryIndex,
         expAversion))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryExpAversionDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      double * expAversion)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBopEntryExpAversion, (
         operationName,
         bopEntryIndex,
         expAversion))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryImpactPeriod (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      int * * impactPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryImpactPeriod, (
         operationName,
         bopEntryIndex,
         impactPeriod))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryLatestPeriod (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      int * latestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryLatestPeriod, (
         operationName,
         bopEntryIndex,
         latestPeriod))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryOffset (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      float * * offset)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryOffset, (
         operationName,
         bopEntryIndex,
         offset))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryOffsetDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      double * * offset)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBopEntryOffset, (
         operationName,
         bopEntryIndex,
         offset))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryProductRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      float * * productRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryProductRate, (
         operationName,
         bopEntryIndex,
         productRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryProductRateDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      double * * productRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBopEntryProductRate, (
         operationName,
         bopEntryIndex,
         productRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryProducedPart (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      char * * producedPartName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryProducedPart, (
         operationName,
         bopEntryIndex,
         producedPartName))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryRoutingShare (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      float * * routingShare)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryRoutingShare, (
         operationName,
         bopEntryIndex,
         routingShare))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryRoutingShareDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      double * * routingShare)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBopEntryRoutingShare, (
         operationName,
         bopEntryIndex,
         routingShare))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntrySelForDel (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      witBoolean * selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntrySelForDel, (
         operationName,
         bopEntryIndex,
         selForDel))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBoundsValue (
      WitRun * const theWitRun,
      float *        boundsValue)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBoundsValue, (
         boundsValue))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBoundsValueDbl (
      WitRun * const theWitRun,
      double *       boundsValue)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBoundsValue, (
         boundsValue))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetCompPrices (
      WitRun * const theWitRun,
      witBoolean * compPrices)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCompPrices, (
         compPrices))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetComputeCriticalList (
      WitRun * const theWitRun,
      witBoolean * computeCriticalList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetComputeCriticalList, (
         computeCriticalList))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetCplexEmbedded (
      WitRun * const theWitRun,
      witBoolean *   cplexEmbedded)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCplexEmbedded, (
         cplexEmbedded))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetCplexMipBound (
      WitRun * const theWitRun,
      float * cplexMipBound)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCplexMipBound, (
         cplexMipBound))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetCplexMipBoundDbl (
      WitRun * const theWitRun,
      double * cplexMipBound)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetCplexMipBound, (
         cplexMipBound))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetCplexMipRelGap (
      WitRun * const theWitRun,
      float * cplexMipRelGap)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCplexMipRelGap, (
         cplexMipRelGap))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetCplexMipRelGapDbl (
      WitRun * const theWitRun,
      double * cplexMipRelGap)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetCplexMipRelGap, (
         cplexMipRelGap))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetCplexParSpecDblVal (
      WitRun * const theWitRun,
      float * cplexParSpecDblVal)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCplexParSpecDblVal, (
         cplexParSpecDblVal))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetCplexParSpecDblValDbl (
      WitRun * const theWitRun,
      double * cplexParSpecDblVal)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetCplexParSpecDblVal, (
         cplexParSpecDblVal))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetCplexParSpecIntVal (
      WitRun * const theWitRun,
      int * cplexParSpecIntVal)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCplexParSpecIntVal, (
         cplexParSpecIntVal))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetCplexParSpecName (
      WitRun * const theWitRun,
      char * * cplexParSpecName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCplexParSpecName, (
         cplexParSpecName))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetCplexStatusCode (
      WitRun * const theWitRun,
      int *          cplexStatusCode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCplexStatusCode, (
         cplexStatusCode))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetCplexStatusText (
      WitRun * const theWitRun,
      char * *       cplexStatusText)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCplexStatusText, (
         cplexStatusText))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetCriticalList (
      WitRun * const theWitRun,
      int * lenCritList,
      char * * * critPartList,
      int * * critPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCriticalList, (
         lenCritList,
         critPartList,
         critPeriod))
   }
  
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetCurrentObjective (
      WitRun * const theWitRun,
      char * * theObjName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCurrentObjective, (
         theObjName))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetCurrentScenario (
      WitRun * const theWitRun,
      int * currentScenario)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCurrentScenario, (
         currentScenario))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDblCplexParSpec (
      WitRun * const     theWitRun,
      const char * const theName,
      witBoolean *       dblSpecExists,
      float *            theValue)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDblCplexParSpec, (
         theName,
         dblSpecExists,
         theValue))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDblCplexParSpecDbl (
      WitRun * const     theWitRun,
      const char * const theName,
      witBoolean *       dblSpecExists,
      double *           theValue)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDblCplexParSpec, (
         theName,
         dblSpecExists,
         theValue))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandAppData (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      void * * appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandAppData, (
         demandedPartName,
         demandName,
         appData))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandCoExecVolPip (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         operationNameList,
      int * *            bopEntryIndexList,
      int * *            execPeriodList,
      float * *          peggedVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandCoExecVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         bopEntryIndexList,
         execPeriodList,
         peggedVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandCoExecVolPipDbl (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         operationNameList,
      int * *            bopEntryIndexList,
      int * *            execPeriodList,
      double * *         peggedVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandCoExecVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         bopEntryIndexList,
         execPeriodList,
         peggedVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandConsVolPip (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         partNameList,
      int * *            periodList,
      float * *          peggedVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandConsVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandConsVolPipDbl (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         partNameList,
      int * *            periodList,
      double * *         peggedVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandConsVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandCumShipBounds (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * * hardLower,
      float * * softLower,
      float * * hardUpper)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandCumShipBounds, (
         demandedPartName,
         demandName,
         hardLower,
         softLower,
         hardUpper))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandCumShipBoundsDbl (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * * hardLower,
      double * * softLower,
      double * * hardUpper)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandCumShipBounds, (
         demandedPartName,
         demandName,
         hardLower,
         softLower,
         hardUpper))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandCumShipReward (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * * cumShipReward)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandCumShipReward, (
         demandedPartName,
         demandName,
         cumShipReward))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandCumShipRewardDbl (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * * cumShipReward)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandCumShipReward, (
         demandedPartName,
         demandName,
         cumShipReward))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandCumShipSlbConIndex (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          thePer,
      int *              cumShipSlbConIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandCumShipSlbConIndex, (
         partName,
         demandName,
         thePer,
         cumShipSlbConIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandCumShipSlbvVarIndex (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          thePer,
      int *              cumShipSlbvVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandCumShipSlbvVarIndex, (
         partName,
         demandName,
         thePer,
         cumShipSlbvVarIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandCumShipVarIndex (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          thePer,
      int *              cumShipVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandCumShipVarIndex, (
         partName,
         demandName,
         thePer,
         cumShipVarIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandDemandVol (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * * demandVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandDemandVol, (
         demandedPartName,
         demandName,
         demandVol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandDemandVolDbl (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * * demandVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandDemandVol, (
         demandedPartName,
         demandName,
         demandVol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC WitReturnCode STDCALL witGetDemandExecVolPegging (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      const int shipPeriod,
      int * lenLists,
      char * * * operationNameList,
      int * * execPeriodList,
      float * * peggedExecVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandExecVolPegging, (
         demandedPartName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         peggedExecVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC WitReturnCode STDCALL witGetDemandExecVolPeggingDbl (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      const int shipPeriod,
      int * lenLists,
      char * * * operationNameList,
      int * * execPeriodList,
      double * * peggedExecVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandExecVolPegging, (
         demandedPartName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         peggedExecVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandExecVolPip (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         operationNameList,
      int * *            execPeriodList,
      float * *          peggedExecVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandExecVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         peggedExecVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandExecVolPipDbl (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         operationNameList,
      int * *            execPeriodList,
      double * *         peggedExecVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandExecVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         peggedExecVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandFocusHorizon (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      int * focusHorizon)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandFocusHorizon, (
         demandedPartName,
         demandName,
         focusHorizon))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandFssShipVol (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * * fssShipVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandFssShipVol, (
         demandedPartName,
         demandName,
         fssShipVol))
   }
 
//------------------------------------------------------------------------------


WIT_DECLSPEC witReturnCode STDCALL witGetDemandFssShipVolDbl (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * * fssShipVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandFssShipVol, (
         demandedPartName,
         demandName,
         fssShipVol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandIntShipVols (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * intShipVols)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandIntShipVols, (
         partName,
         demandName,
         intShipVols))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandLeadTimeUB (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      int * * leadTimeUB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandLeadTimeUB, (
         demandedPartName,
         demandName,
         leadTimeUB))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandPriority (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      int * * priority)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandPriority, (
         demandedPartName,
         demandName,
         priority))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandProdVolPip (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         partNameList,
      int * *            periodList,
      float * *          peggedVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandProdVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandProdVolPipDbl (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         partNameList,
      int * *            periodList,
      double * *         peggedVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandProdVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandSearchInc (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * searchInc)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandSearchInc, (
         demandedPartName,
         demandName,
         searchInc))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandSearchIncDbl (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * searchInc)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandSearchInc, (
         demandedPartName,
         demandName,
         searchInc))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandSelForDel (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      int * selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandSelForDel, (
         demandedPartName,
         demandName,
         selForDel))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandShipConIndex (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          thePer,
      int *              shipConIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandShipConIndex, (
         partName,
         demandName,
         thePer,
         shipConIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandShipVarIndex (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          thePer,
      int *              shipVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandShipVarIndex, (
         partName,
         demandName,
         thePer,
         shipVarIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandShipLateAllowed (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * shipLateAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandShipLateAllowed, (
         partName,
         demandName,
         shipLateAllowed))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandShipLateUB (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      int * * shipLateUB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandShipLateUB, (
         demandedPartName,
         demandName,
         shipLateUB))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandShipReward (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * * shipReward)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandShipReward, (
         demandedPartName,
         demandName,
         shipReward))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandShipRewardDbl (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * * shipReward)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandShipReward, (
         demandedPartName,
         demandName,
         shipReward))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandShipVol (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * * shipVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandShipVol, (
         demandedPartName,
         demandName,
         shipVol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandShipVolDbl (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * * shipVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandShipVol, (
         demandedPartName,
         demandName,
         shipVol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandSideVolPip (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         partNameList,
      int * *            periodList,
      float * *          peggedVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandSideVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandSideVolPipDbl (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         partNameList,
      int * *            periodList,
      double * *         peggedVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandSideVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC WitReturnCode STDCALL witGetDemandSubVolPegging (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      const int shipPeriod,
      int * lenLists,
      char * * * operationNameList,
      int * * execPeriodList,
      int * * bomEntryIndexList,
      int * * subsBomEntryIndexList,
      float * * peggedSubVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandSubVolPegging, (
         demandedPartName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         bomEntryIndexList,
         subsBomEntryIndexList,
         peggedSubVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC WitReturnCode STDCALL witGetDemandSubVolPeggingDbl (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      const int shipPeriod,
      int * lenLists,
      char * * * operationNameList,
      int * * execPeriodList,
      int * * bomEntryIndexList,
      int * * subsBomEntryIndexList,
      double * * peggedSubVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandSubVolPegging, (
         demandedPartName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         bomEntryIndexList,
         subsBomEntryIndexList,
         peggedSubVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandSubVolPip (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         operationNameList,
      int * *            bomEntryIndexList,
      int * *            subsBomEntryIndexList,
      int * *            execPeriodList,
      float * *          peggedSubVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandSubVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         bomEntryIndexList,
         subsBomEntryIndexList,
         execPeriodList,
         peggedSubVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandSubVolPipDbl (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         operationNameList,
      int * *            bomEntryIndexList,
      int * *            subsBomEntryIndexList,
      int * *            execPeriodList,
      double * *         peggedSubVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandSubVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         bomEntryIndexList,
         subsBomEntryIndexList,
         execPeriodList,
         peggedSubVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandSupplyVolPip (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         partNameList,
      int * *            periodList,
      float * *          peggedVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandSupplyVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandSupplyVolPipDbl (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         partNameList,
      int * *            periodList,
      double * *         peggedVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandSupplyVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetEquitability (
      WitRun * const theWitRun,
      int * equitablity)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetEquitability, (
         equitablity))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetExecEmptyBom (
      WitRun * const theWitRun,
      witBoolean * execEmptyBom)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetExecEmptyBom, (
         execEmptyBom))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetExpCutoff (
      WitRun * const theWitRun,
      float * expCutoff)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetExpCutoff, (
         expCutoff))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetExpCutoffDbl (
      WitRun * const theWitRun,
      double * expCutoff)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetExpCutoff, (
         expCutoff))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetExtOptActive (
      WitRun * const theWitRun,
      witBoolean *   extOptActive)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetExtOptActive, (
         extOptActive))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetExpCycle (
      WitRun * const theWitRun,
      int *          lenLists,
      char * * *     partNameList,
      char * * *     operationNameList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetExpCycle, (
         lenLists,
         partNameList,
         operationNameList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetExtOptIntVarIndices (
      WitRun * const theWitRun,
      int * *        indices,
      int *          len)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetExtOptIntVarIndices, (
         indices,
         len))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetExtOptLpProb (
      WitRun * const theWitRun,
      int *          numcols,
      int *          numrows,
      int * *        start,
      int * *        index,
      float * *      value,
      float * *      collb,
      float * *      colub,
      float * *      obj,
      float * *      rowlb,
      float * *      rowub)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetExtOptLpProb, (
         numcols,
         numrows,
         start,
         index,
         value,
         collb,
         colub,
         obj,
         rowlb,
         rowub))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetExtOptLpProbDbl (
      WitRun * const theWitRun,
      int *          numcols,
      int *          numrows,
      int * *        start,
      int * *        index,
      double * *     value,
      double * *     collb,
      double * *     colub,
      double * *     obj,
      double * *     rowlb,
      double * *     rowub)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetExtOptLpProb, (
         numcols,
         numrows,
         start,
         index,
         value,
         collb,
         colub,
         obj,
         rowlb,
         rowub))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetFeasible (
      WitRun * const theWitRun,
      witBoolean * feasible)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetFeasible, (
         feasible))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetFocusShortageVol (
      WitRun * const theWitRun,
      int *          lenList,
      char * * *     partList,
      float * * *    shortageVolList )
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetFocusShortageVol, (
         lenList,
         partList,
         shortageVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetFocusShortageVolDbl (
      WitRun * const theWitRun,
      int *          lenList,
      char * * *     partList,
      double * * *   shortageVolList )
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetFocusShortageVol, (
         lenList,
         partList,
         shortageVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetForcedMultiEq (
      WitRun * const theWitRun,
      witBoolean * forcedMultiEq)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetForcedMultiEq, (
         forcedMultiEq))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetHeurAllocActive (
      WitRun * const theWitRun,
      witBoolean * heurAllocActive)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetHeurAllocActive, (
         heurAllocActive))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetHighPrecisionWD (
      WitRun * const theWitRun,
      witBoolean * highPrecisionWD)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetHighPrecisionWD, (
         highPrecisionWD))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetIndependentOffsets (
      WitRun * const theWitRun,
      witBoolean * independentOffsets)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetIndependentOffsets, (
         independentOffsets))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetIntCplexParSpec (
      WitRun * const     theWitRun,
      const char * const theName,
      witBoolean *       intSpecExists,
      int *              theValue)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetIntCplexParSpec, (
         theName,
         intSpecExists,
         theValue))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetLotSizeTol (
      WitRun * const theWitRun,
      float * lotSizeTol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetLotSizeTol, (
         lotSizeTol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetLotSizeTolDbl (
      WitRun * const theWitRun,
      double * lotSizeTol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetLotSizeTol, (
         lotSizeTol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetMesgFile (
      WitRun * const theWitRun,
      FILE * * mesgFile)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMesgFile, (
         mesgFile))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetMesgFileAccessMode (
      WitRun * const theWitRun,
      char * * mesgFileAccessMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMesgFileAccessMode, (
         mesgFileAccessMode))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetMesgFileName (
      WitRun * const theWitRun,
      char * * mesgFileName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMesgFileName, (
         mesgFileName))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetMesgPrintNumber (
      WitRun * const theWitRun,
      const int messageNumber,
      witBoolean * mesgPrintMunber)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMesgPrintNumber, (
         messageNumber,
         mesgPrintMunber))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetMesgStopRunning (
      WitRun * const theWitRun,
      const int messageNumber,
      witBoolean * mesgStopRunning)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMesgStopRunning, (
         messageNumber,
         mesgStopRunning))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetMesgThrowErrorExc (
      WitRun * const theWitRun,
      const int messageNumber,
      witBoolean * mesgThrowErrorExc)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMesgThrowErrorExc, (
         messageNumber,
         mesgThrowErrorExc))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetMesgTimesPrint (
      WitRun * const theWitRun,
      const int messageNumber,
      int * mesgTimesPrint)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMesgTimesPrint, (
         messageNumber,
         mesgTimesPrint))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetMinimalExcess (
      WitRun * const theWitRun,
      witBoolean * minimalExcess)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMinimalExcess, (
         minimalExcess))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetMipMode (
      WitRun * const theWitRun,
      witBoolean * mipMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMipMode, (
         mipMode))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetModHeurAlloc (
      WitRun * const theWitRun,
      witBoolean * modHeurAlloc)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetModHeurAlloc, (
         modHeurAlloc))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetMultiExec (
      WitRun * const theWitRun,
      witBoolean * multiExec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMultiExec, (
         multiExec))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetMultiObjMode (
      WitRun * const theWitRun,
      witBoolean * multiObjMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMultiObjMode, (
         multiObjMode))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetMultiObjTol (
      WitRun * const theWitRun,
      float * multiObjTol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMultiObjTol, (
         multiObjTol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetMultiObjTolDbl (
      WitRun * const theWitRun,
      double * multiObjTol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetMultiObjTol, (
         multiObjTol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetMultiRoute (
      WitRun * const theWitRun,
      witBoolean * multiRoute)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMultiRoute, (
         multiRoute))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetNPeriods (
      WitRun * const theWitRun,
      int * nPeriods)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetNPeriods, (
         nPeriods))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetNScenarios (
      WitRun * const theWitRun,
      int * nScenarios)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetNScenarios, (
         nScenarios))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetNstnResidual (
      WitRun * const theWitRun,
      witBoolean * nstnResidual)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetNstnResidual, (
         nstnResidual))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObjItrBomEntry (
      WitRun * const theWitRun,
      char * * consumingOperationName,
      int * bomEntryIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjItrBomEntry, (
         consumingOperationName,
         bomEntryIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObjItrBopEntry (
      WitRun * const theWitRun,
      char * * producingOperationName,
      int * bopEntryIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjItrBopEntry, (
         producingOperationName,
         bopEntryIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObjItrDemand (
      WitRun * const theWitRun,
      char * * demandedPartName,
      char * * demandName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjItrDemand, (
         demandedPartName,
         demandName))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObjItrOperation (
      WitRun * const theWitRun,
      char * * operationName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjItrOperation, (
         operationName))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObjItrPart (
      WitRun * const theWitRun,
      char * * partName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjItrPart, (
         partName))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObjItrState (
      WitRun * const theWitRun,
      witAttr * objItrState)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjItrState, (
         objItrState))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObjItrSubsBomEntry (
      WitRun * const theWitRun,
      char * * consumingOperationName,
      int * bomEntryIndex,
      int * subsBomEntryIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjItrSubsBomEntry, (
         consumingOperationName,
         bomEntryIndex,
         subsBomEntryIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObjValue (
      WitRun * const theWitRun,
      float *        objValue)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjValue, (
         objValue))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObjValueDbl (
      WitRun * const theWitRun,
      double *       objValue)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetObjValue, (
         objValue))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObjValues (
      WitRun * const theWitRun,
      float * objValue,
      float * boundsValue)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjValues, (
         objValue,
         boundsValue))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObjValuesDbl (
      WitRun * const theWitRun,
      double * objValue,
      double * boundsValue)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetObjValues, (
         objValue,
         boundsValue))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObjectiveList (
      WitRun * const theWitRun,
      int  *         lenList,
      char * * *     objectiveList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjectiveList, (
         lenList,
         objectiveList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObjectiveListSpec (
      WitRun * const theWitRun,
      char * * objectiveListSpec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjectiveListSpec, (
         objectiveListSpec))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObjectiveRank (
      WitRun * const theWitRun,
      int * objectiveRank)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjectiveRank, (
         objectiveRank))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationAppData (
      WitRun * const theWitRun,
      const char * const operationName,
      void * * appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationAppData, (
         operationName,
         appData))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationExecBounds (
      WitRun * const theWitRun,
      const char * const operationName,
      float * * hardLower,
      float * * softLower,
      float * * hardUpper)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationExecBounds, (
         operationName,
         hardLower,
         softLower,
         hardUpper))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationExecBoundsDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      double * * hardLower,
      double * * softLower,
      double * * hardUpper)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationExecBounds, (
         operationName,
         hardLower,
         softLower,
         hardUpper))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationExecCost (
      WitRun * const theWitRun,
      const char * const operationName,
      float * * execCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationExecCost, (
         operationName,
         execCost))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationExecCostDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      double * * execCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationExecCost, (
         operationName,
         execCost))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationExecPenalty (
      WitRun * const theWitRun,
      const char * const operationName,
      float * execPenalty)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationExecPenalty, (
         operationName,
         execPenalty))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationExecPenaltyDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      double * execPenalty)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationExecPenalty, (
         operationName,
         execPenalty))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationExecSlbConIndex (
      WitRun * const     theWitRun,
      const char * const operationName,
      const int          thePer,
      int *              execSlbConIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationExecSlbConIndex, (
         operationName,
         thePer,
         execSlbConIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationExecSlbvVarIndex (
      WitRun * const     theWitRun,
      const char * const operationName,
      const int          thePer,
      int *              execSlbvVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationExecSlbvVarIndex, (
         operationName,
         thePer,
         execSlbvVarIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationExecVarIndex (
      WitRun * const     theWitRun,
      const char * const operationName,
      const int          thePer,
      int *              execVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationExecVarIndex, (
         operationName,
         thePer,
         execVarIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationExecVol (
      WitRun * const theWitRun,
      const char * const operationName,
      float * * execVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationExecVol, (
         operationName,
         execVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationExecVolDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      double * * execVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationExecVol, (
         operationName,
         execVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationExecutable (
      WitRun * const theWitRun,
      const char * const operationName,
      witBoolean * * execVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationExecutable, (
         operationName,
         execVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationExists (
      WitRun * const theWitRun,
      const char * const operationName,
      witBoolean * exists)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationExists, (
         operationName,
         exists))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationFssExecVol (
      WitRun * const theWitRun,
      const char * const operationName,
      float * * fssExecVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationFssExecVol, (
         operationName,
         fssExecVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationFssExecVolDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      double * * fssExecVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationFssExecVol, (
         operationName,
         fssExecVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationIncLotSize (
      WitRun * const theWitRun,
      const char * const operationName,
      float * * incLotSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationIncLotSize, (
         operationName,
         incLotSize))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationIncLotSizeDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      double * * incLotSize)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationIncLotSize, (
         operationName,
         incLotSize))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationIncLotSize2 (
      WitRun * const theWitRun,
      const char * const operationName,
      float * * incLotSize2)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationIncLotSize2, (
         operationName,
         incLotSize2))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationIncLotSize2Dbl (
      WitRun * const theWitRun,
      const char * const operationName,
      double * * incLotSize2)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationIncLotSize2, (
         operationName,
         incLotSize2))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationIntExecVols (
      WitRun * const theWitRun,
      const char * const operationName,
      witBoolean * intExecVols)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationIntExecVols, (
         operationName,
         intExecVols))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationLotSize2Thresh (
      WitRun * const theWitRun,
      const char * const operationName,
      float * * lotSize2Thresh)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationLotSize2Thresh, (
         operationName,
         lotSize2Thresh))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationLotSize2ThreshDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      double * * lotSize2Thresh)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationLotSize2Thresh, (
         operationName,
         lotSize2Thresh))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationMinLotSize (
      WitRun * const theWitRun,
      const char * const operationName,
      float * * minLotSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationMinLotSize, (
         operationName,
         minLotSize))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationMinLotSizeDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      double * * minLotSize)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationMinLotSize, (
         operationName,
         minLotSize))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationMinLotSize2 (
      WitRun * const theWitRun,
      const char * const operationName,
      float * * minLotSize2)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationMinLotSize2, (
         operationName,
         minLotSize2))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationMinLotSize2Dbl (
      WitRun * const theWitRun,
      const char * const operationName,
      double * * minLotSize2)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationMinLotSize2, (
         operationName,
         minLotSize2))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationMrpExecVol (
      WitRun * const theWitRun,
      const char * const operationName,
      float * * mrpExecVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationMrpExecVol, (
         operationName,
         mrpExecVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationMrpExecVolDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      double * * mrpExecVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationMrpExecVol, (
         operationName,
         mrpExecVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationNBomEntries (
      WitRun * const theWitRun,
      const char * const operationName,
      int * nBomEntries)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationNBomEntries, (
         operationName,
         nBomEntries))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationNBopEntries (
      WitRun * const theWitRun,
      const char * const operationName,
      int * nBopEntries)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationNBopEntries, (
         operationName,
         nBopEntries))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationObjectStage (
      WitRun * const theWitRun,
      const char * const operationName,
      int * objectStage)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationObjectStage, (
         operationName,
         objectStage))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationSelForDel (
      WitRun * const theWitRun,
      const char * const operationName,
      witBoolean * selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationSelForDel, (
         operationName,
         selForDel))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperations (
      WitRun * const theWitRun,
      int * lenOperationList,
      char * * * operationList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperations, (
         lenOperationList,
         operationList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationTwoLevelLotSizes (
      WitRun * const theWitRun,
      const char * const operationName,
      witBoolean * twoLevelLotSizes)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationTwoLevelLotSizes, (
         operationName,
         twoLevelLotSizes))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationYieldRate (
      WitRun * const theWitRun,
      const char * const operationName,
      float * * yieldRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationYieldRate, (
         operationName,
         yieldRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationYieldRateDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      double * * yieldRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationYieldRate, (
         operationName,
         yieldRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOptInitMethod (
      WitRun * const theWitRun,
      witAttr * optInitMethod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOptInitMethod, (
         optInitMethod))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOutputPrecision (
      WitRun * const theWitRun,
      int * outputPrecision)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOutputPrecision, (
         outputPrecision))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPostprocessed (
      WitRun * const theWitRun,
      witBoolean * postprocessed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPostprocessed, (
         postprocessed))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartAppData (
      WitRun * const theWitRun,
      const char * const partName,
      void * * appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartAppData, (
         partName,
         appData))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartAsapPipOrder (
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * asapPipOrder)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartAsapPipOrder, (
         partName,
         asapPipOrder))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartBelowList (
      WitRun * const theWitRun,
      const char * const partName,
      int * lenList,
      char * * * partNameList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartBelowList, (
         partName,
         lenList,
         partNameList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartBoundedLeadTimes (
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * boundedLeadTimes)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartBoundedLeadTimes, (
         partName,
         boundedLeadTimes))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartBuildAheadUB (
      WitRun * const theWitRun,
      const char * const partName,
      int * * buildAheadUB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartBuildAheadUB, (
         partName,
         buildAheadUB))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartBuildAsap (
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * buildAsap)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartBuildAsap, (
         partName,
         buildAsap))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartBuildNstn (
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * buildNstn)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartBuildNstn, (
         partName,
         buildNstn))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartConsVol (
      WitRun * const theWitRun,
      const char * const partName,
      float * * consVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartConsVol, (
         partName,
         consVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartConsVolDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * consVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartConsVol, (
         partName,
         consVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartConsumingBomEntry (
      WitRun * const theWitRun,
      const char * const partName,
      const int consIndex,
      char * * consumingOperationName,
      int * bomEntryIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartConsumingBomEntry, (
         partName,
         consIndex,
         consumingOperationName,
         bomEntryIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartConsumingSubsBomEntry (
      WitRun * const theWitRun,
      const char * const partName,
      const int consIndex,
      char * * consumingOperationName,
      int * bomEntryIndex,
      int * subsBomEntryIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartConsumingSubsBomEntry, (
         partName,
         consIndex,
         consumingOperationName,
         bomEntryIndex,
         subsBomEntryIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartDemands (
      WitRun * const theWitRun,
      const char * const partName,
      int * lenDemandList,
      char * * * demandList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartDemands, (
         partName,
         lenDemandList,
         demandList))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartCategory (
      WitRun * const theWitRun,
      const char * const partName,
      witAttr * category)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartCategory, (
         partName,
         category))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartExcessVol (
      WitRun * const theWitRun,
      const char * const partName,
      float * * excessVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartExcessVol, (
         partName,
         excessVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartExcessVolDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * excessVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartExcessVol, (
         partName,
         excessVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartExists (
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * exists)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartExists, (
         partName,
         exists))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartFocusShortageVol (
      WitRun * const theWitRun,
      const char * const partName,
      float * * shortageVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartFocusShortageVol, (
         partName,
         shortageVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartFocusShortageVolDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * shortageVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartFocusShortageVol, (
         partName,
         shortageVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartMrpConsVol (
      WitRun * const theWitRun,
      const char * const partName,
      float * * mrpConsVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartMrpConsVol, (
         partName,
         mrpConsVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartMrpConsVolDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * mrpConsVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartMrpConsVol, (
         partName,
         mrpConsVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartMrpExcessVol (
      WitRun * const theWitRun,
      const char * const partName,
      float * * mrpExcessVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartMrpExcessVol, (
         partName,
         mrpExcessVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartMrpExcessVolDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * mrpExcessVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartMrpExcessVol, (
         partName,
         mrpExcessVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartMrpResidualVol (
      WitRun * const theWitRun,
      const char * const partName,
      float * * mrpResidualVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartMrpResidualVol, (
         partName,
         mrpResidualVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartMrpResidualVolDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * mrpResidualVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartMrpResidualVol, (
         partName,
         mrpResidualVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartNConsumingBomEntries (
      WitRun * const theWitRun,
      const char * const partName,
      int * nConsumingBomEntries)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartNConsumingBomEntries, (
         partName,
         nConsumingBomEntries))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartNConsumingSubsBomEntries (
      WitRun * const theWitRun,
      const char * const partName,
      int * nConsumingSubsBomEntries)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartNConsumingSubsBomEntries, (
         partName,
         nConsumingSubsBomEntries))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartNProducingBopEntries (
      WitRun * const theWitRun,
      const char * const partName,
      int * nProducingBopEntries)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartNProducingBopEntries, (
         partName,
         nProducingBopEntries))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartObjectStage (
      WitRun * const     theWitRun,
      const char * const partName,
      int *              objectStage)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartObjectStage, (
         partName,
         objectStage))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartProdVol (
      WitRun * const theWitRun,
      const char * const partName,
      float * * prodVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartProdVol, (
         partName,
         prodVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartProdVolDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * prodVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartProdVol, (
         partName,
         prodVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartProducingBopEntry (
      WitRun * const theWitRun,
      const char * const partName,
      const int prodIndex,
      char * * producingOperationName,
      int * bopEntryIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartProducingBopEntry, (
         partName,
         prodIndex,
         producingOperationName,
         bopEntryIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartPropRtg (
      WitRun * const     theWitRun,
      const char * const partName,
      witBoolean * *     propRtg)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartPropRtg, (
         partName,
         propRtg))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartReqVol (
      WitRun * const theWitRun,
      const char * const partName,
      float * * reqVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartReqVol, (
         partName,
         reqVol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartReqVolDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * reqVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartReqVol, (
         partName,
         reqVol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartResidualVol (
      WitRun * const theWitRun,
      const char * const partName,
      float * * residualVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartResidualVol, (
         partName,
         residualVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartResidualVolDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * residualVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartResidualVol, (
         partName,
         residualVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartResourceConIndex (
      WitRun * const     theWitRun,
      const char * const partName,
      const int          thePer,
      int *              resourceConIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartResourceConIndex, (
         partName,
         thePer,
         resourceConIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartScrapAllowed (
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * scrapAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartScrapAllowed, (
         partName,
         scrapAllowed))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartScrapCost (
      WitRun * const theWitRun,
      const char * const partName,
      float * * scrapCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartScrapCost, (
         partName,
         scrapCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartScrapCostDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * scrapCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartScrapCost, (
         partName,
         scrapCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartScrapVarIndex (
      WitRun * const     theWitRun,
      const char * const partName,
      const int          thePer,
      int *              scrapVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartScrapVarIndex, (
         partName,
         thePer,
         scrapVarIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartScrapVol (
      WitRun * const theWitRun,
      const char * const partName,
      float * * scrapVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartScrapVol, (
         partName,
         scrapVol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartScrapVolDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * scrapVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartScrapVol, (
         partName,
         scrapVol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartSelForDel (
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartSelForDel, (
         partName,
         selForDel))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartShadowPrice (
      WitRun * const theWitRun,
      const char * const partName,
      float * * shadowPrice)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartShadowPrice, (
         partName,
         shadowPrice))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartShadowPriceDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * shadowPrice)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartShadowPrice, (
         partName,
         shadowPrice))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartSingleSource (
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * singleSource)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartSingleSource, (
         partName,
         singleSource))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartStockBounds (
      WitRun * const theWitRun,
      const char * const partName,
      float * * hardLower,
      float * * softLower,
      float * * hardUpper)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartStockBounds, (
         partName,
         hardLower,
         softLower,
         hardUpper))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartStockBoundsDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * hardLower,
      double * * softLower,
      double * * hardUpper)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartStockBounds, (
         partName,
         hardLower,
         softLower,
         hardUpper))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartStockCost (
      WitRun * const theWitRun,
      const char * const partName,
      float * * stockCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartStockCost, (
         partName,
         stockCost))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartStockCostDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * stockCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartStockCost, (
         partName,
         stockCost))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartStockSlbConIndex (
      WitRun * const     theWitRun,
      const char * const partName,
      const int          thePer,
      int *              stockSlbConIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartStockSlbConIndex, (
         partName,
         thePer,
         stockSlbConIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartStockSlbvVarIndex (
      WitRun * const     theWitRun,
      const char * const partName,
      const int          thePer,
      int *              stockSlbvVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartStockSlbvVarIndex, (
         partName,
         thePer,
         stockSlbvVarIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartStockVarIndex (
      WitRun * const     theWitRun,
      const char * const partName,
      const int          thePer,
      int *              stockVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartStockVarIndex, (
         partName,
         thePer,
         stockVarIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartStockVol (
      WitRun * const theWitRun,
      const char * const partName,
      float * * stockVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartStockVol, (
         partName,
         stockVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartStockVolDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * stockVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartStockVol, (
         partName,
         stockVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartSupplyVol (
      WitRun * const theWitRun,
      const char * const partName,
      float * * supplyVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartSupplyVol, (
         partName,
         supplyVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartSupplyVolDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * supplyVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartSupplyVol, (
         partName,
         supplyVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetParts (
      WitRun * const theWitRun,
      int * lenPartList,
      char * * * partList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetParts, (
         lenPartList,
         partList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPenExec (
      WitRun * const theWitRun,
      witBoolean * penExec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPenExec, (
         penExec))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPerfPegging (
      WitRun * const theWitRun,
      witBoolean * perfPegging)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPerfPegging, (
         perfPegging))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPeriodStage (
      WitRun * const theWitRun,
      int * *        periodStage)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPeriodStage, (
         periodStage))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPipExists (
      WitRun * const theWitRun,
      witBoolean * pipExists)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPipExists, (
         pipExists))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPipSeq (
      WitRun * const theWitRun,
      int *          lenLists,
      char * * *     partNameList,
      char * * *     demandNameList,
      int * *        shipPerList,
      float * *      incShipVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPipSeq, (
         lenLists,
         partNameList,
         demandNameList,
         shipPerList,
         incShipVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPipSeqDbl (
      WitRun * const theWitRun,
      int *          lenLists,
      char * * *     partNameList,
      char * * *     demandNameList,
      int * *        shipPerList,
      double * *     incShipVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPipSeq, (
         lenLists,
         partNameList,
         demandNameList,
         shipPerList,
         incShipVolList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPipSeqFromHeur (
      WitRun * const theWitRun,
      witBoolean * pipSeqFromHeur)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPipSeqFromHeur, (
         pipSeqFromHeur))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPgdCritList (
      WitRun * const theWitRun,
      int *          lenLists,
      char * * *     critPartNameList,
      int * *        critPerList,
      char * * *     demPartNameList,
      char * * *     demandNameList,
      int * *        shipPerList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPgdCritList, (
         lenLists,
         critPartNameList,
         critPerList,
         demPartNameList,
         demandNameList,
         shipPerList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPgdCritListMode (
      WitRun * const theWitRun,
      witBoolean * pgdCritListMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPgdCritListMode, (
         pgdCritListMode))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPrefHighStockSLBs (
      WitRun * const theWitRun,
      witBoolean * prefHighStockSLBs)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPrefHighStockSLBs, (
         prefHighStockSLBs))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPreprocessed (
      WitRun * const theWitRun,
      witBoolean * preprocessed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPreprocessed, (
         preprocessed))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetProbability (
      WitRun * const theWitRun,
      float * probability)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetProbability, (
         probability))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetProbabilityDbl (
      WitRun * const theWitRun,
      double * probability)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetProbability, (
         probability))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetRespectStockSLBs (
      WitRun * const theWitRun,
      witBoolean * respectStockSLBs)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetRespectStockSLBs, (
         respectStockSLBs))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetRoundReqVols (
      WitRun * const theWitRun,
      witBoolean * roundReqVols)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetRoundReqVols, (
         roundReqVols))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSelSplit (
      WitRun * const theWitRun,
      witBoolean * selSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSelSplit, (
         selSplit))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSelectionRecovery (
      WitRun * const theWitRun,
      witBoolean * selectionRecovery)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSelectionRecovery, (
         selectionRecovery))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSkipFailures (
      WitRun * const theWitRun,
      witBoolean * skipFailures)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSkipFailures, (
         skipFailures))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSolverLogFileName (
      WitRun * const theWitRun,
      char * * solverLogFileName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSolverLogFileName, (
         solverLogFileName))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetStageByObject (
      WitRun * const theWitRun,
      witBoolean *   stageByObject)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetStageByObject, (
         stageByObject))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetStochMode (
      WitRun * const theWitRun,
      witBoolean * stochMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetStochMode, (
         stochMode))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetStochSolnMode (
      WitRun * const theWitRun,
      witBoolean * stochSolnMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetStochSolnMode, (
         stochSolnMode))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetStockReallocation (
      WitRun * const theWitRun,
      witBoolean * stockReallocation)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetStockReallocation, (
         stockReallocation))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryAppData (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      void * * appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryAppData, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         appData))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryConsRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * * consRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryConsRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         consRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryConsRateDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * * consRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryConsRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         consRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryConsumedPart (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      char * * consumedPart)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryConsumedPart, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         consumedPart))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryEarliestPeriod (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      int * earliestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryEarliestPeriod, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         earliestPeriod))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryExecPenalty (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * execPenalty)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryExecPenalty, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         execPenalty))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryExecPenaltyDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * execPenalty)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryExecPenalty, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         execPenalty))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryExpAllowed (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      witBoolean * expAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryExpAllowed, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expAllowed))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryExpNetAversion (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * expNetAversion)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryExpNetAversion, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expNetAversion))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryExpNetAversionDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * expNetAversion)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryExpNetAversion, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expNetAversion))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryFalloutRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * falloutRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryFalloutRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         falloutRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryFalloutRateDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * falloutRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryFalloutRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         falloutRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryFssSubVol (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * * fssSubVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryFssSubVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         fssSubVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryFssSubVolDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * * fssSubVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryFssSubVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         fssSubVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryImpactPeriod (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      int * * impactPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryImpactPeriod, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         impactPeriod))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryIntSubVols (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      witBoolean * intSubVols)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryIntSubVols, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         intSubVols))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryLatestPeriod (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      int * latestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryLatestPeriod, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         latestPeriod))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryMrpNetAllowed (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      witBoolean * mrpNetAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryMrpNetAllowed, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         mrpNetAllowed))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryMrpSubVol (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * * mrpSubVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryMrpSubVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         mrpSubVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryMrpSubVolDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * * mrpSubVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryMrpSubVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         mrpSubVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryNetAllowed (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      witBoolean * netAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryNetAllowed, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         netAllowed))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryObj1SubCost (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * * obj1SubCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryObj1SubCost, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj1SubCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryObj1SubCostDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * * obj1SubCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryObj1SubCost, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj1SubCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryOffset (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * * offset)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryOffset, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         offset))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryOffsetDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * * offset)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryOffset, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         offset))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryRoutingShare (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * * routingShare)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryRoutingShare, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         routingShare))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryRoutingShareDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * * routingShare)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryRoutingShare, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         routingShare))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntrySelForDel (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      witBoolean * selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntrySelForDel, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         selForDel))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntrySubCost (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * * subCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntrySubCost, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntrySubCostDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * * subCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntrySubCost, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntrySubVarIndex (
      WitRun * const     theWitRun,
      const char * const consumingOperationName,
      const int          bomEntryIndex,
      const int          subsBomEntryIndex,
      const int          thePer,
      int *              subVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntrySubVarIndex, (
         consumingOperationName,
         bomEntryIndex,
         subsBomEntryIndex,
         thePer,
         subVarIndex))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntrySubVol (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * * subVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntrySubVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntrySubVolDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * * subVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntrySubVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetTieBreakPropRt (
      WitRun * const theWitRun,
      witBoolean * tieBreakPropRt)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetTieBreakPropRt, (
         tieBreakPropRt))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetTitle (
      WitRun * const theWitRun,
      char * * title)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetTitle, (
         title))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetTruncOffsets (
      WitRun * const theWitRun,
      witBoolean * truncOffsets)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetTruncOffsets, (
         truncOffsets))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetTwoWayMultiExec (
      WitRun * const theWitRun,
      witBoolean * twoWayMultiExec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetTwoWayMultiExec, (
         twoWayMultiExec))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetUseFocusHorizons (
      WitRun * const theWitRun,
      witBoolean * useFocusHorizons)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetUseFocusHorizons, (
         useFocusHorizons))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetUserHeurStart (
      WitRun * const theWitRun,
      witBoolean * userHeurStart)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetUserHeurStart, (
         userHeurStart))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetWbounds (
      WitRun * const theWitRun,
      float * wbounds)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetWbounds, (
         wbounds))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetWboundsDbl (
      WitRun * const theWitRun,
      double * wbounds)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetWbounds, (
         wbounds))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetWit34Compatible (
      WitRun * const theWitRun,
      witBoolean * wit34Compatible)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetWit34Compatible, (
         wit34Compatible))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witHeurImplode (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witHeurImplode, ())
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witIncHeurAlloc (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      const int shipPeriod,
      const float desIncVol,
      float * incVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witIncHeurAlloc, (
         demandedPartName,
         demandName,
         shipPeriod,
         desIncVol,
         incVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witIncHeurAllocDbl (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      const int shipPeriod,
      const double desIncVol,
      double * incVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witIncHeurAlloc, (
         demandedPartName,
         demandName,
         shipPeriod,
         desIncVol,
         incVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witIncHeurAllocTwme (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      const int shipPeriod,
      const float desIncVol,
      float * incVol,
      witBoolean asapMultiExec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witIncHeurAllocTwme, (
         demandedPartName,
         demandName,
         shipPeriod,
         desIncVol,
         incVol,
         asapMultiExec))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witIncHeurAllocTwmeDbl (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      const int shipPeriod,
      const double desIncVol,
      double * incVol,
      witBoolean asapMultiExec)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witIncHeurAllocTwme, (
         demandedPartName,
         demandName,
         shipPeriod,
         desIncVol,
         incVol,
         asapMultiExec))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witInitialize (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witInitialize, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witMrp (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witMrp, ())
   }
 
//------------------------------------------------------------------------------
// Non-Standard API Function.
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witNewRun (
      WitRun * * theWitRunPtr)
   {
   forbidNullArg (theWitRunPtr, "theWitRunPtr", "witNewRun");

   * theWitRunPtr = WitRun::newInstance ();

   STANDARD_API_IMPL (
      (* theWitRunPtr),
      witNewRun, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witOptImplode (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witOptImplode, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witPostprocess (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witPostprocess, ())
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witPreprocess (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witPreprocess, ())
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witPurgeData (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witPurgeData, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witReadData (
      WitRun * const theWitRun,
      const char * const fileName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witReadData, (
         fileName))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witResetObjItr (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witResetObjItr, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetAccAfterSoftLB (
      WitRun * const theWitRun,
      const witBoolean accAfterSoftLB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetAccAfterSoftLB, (
         accAfterSoftLB))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetAccAfterOptImp (
      WitRun * const theWitRun,
      const witBoolean accAfterOptImp)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetAccAfterOptImp, (
         accAfterOptImp))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetAppData (
      WitRun * const theWitRun,
      void * const appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetAppData, (
         appData))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetAutoPriority (
      WitRun * const theWitRun,
      const witBoolean autoPriority)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetAutoPriority, (
         autoPriority))
   }
  
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryAppData (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      void * const appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryAppData, (
         operationName,
         bomEntryIndex,
         appData))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryConsRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const float * consRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryConsRate, (
         operationName,
         bomEntryIndex,
         consRate))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryConsRateDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const double * consRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetBomEntryConsRate, (
         operationName,
         bomEntryIndex,
         consRate))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryEarliestPeriod (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int earliestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryEarliestPeriod, (
         operationName,
         bomEntryIndex,
         earliestPeriod))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryExecPenalty (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const float execPenalty)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryExecPenalty, (
         operationName,
         bomEntryIndex,
         execPenalty))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryExecPenaltyDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const double execPenalty)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetBomEntryExecPenalty, (
         operationName,
         bomEntryIndex,
         execPenalty))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryFalloutRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const float falloutRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryFalloutRate, (
         operationName,
         bomEntryIndex,
         falloutRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryFalloutRateDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const double falloutRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetBomEntryFalloutRate, (
         operationName,
         bomEntryIndex,
         falloutRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryLatestPeriod (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int latestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryLatestPeriod, (
         operationName,
         bomEntryIndex,
         latestPeriod))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryMandEC (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const witBoolean mandEC)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryMandEC, (
         operationName,
         bomEntryIndex,
         mandEC))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryOffset (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const float * const offset)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryOffset, (
         operationName,
         bomEntryIndex,
         offset))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryOffsetDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const double * const offset)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetBomEntryOffset, (
         operationName,
         bomEntryIndex,
         offset))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryPropRtg (
      WitRun * const           theWitRun,
      const char * const       operationName,
      const int                bomEntryIndex,
      const witBoolean * const propRtg)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryPropRtg, (
         operationName,
         bomEntryIndex,
         propRtg))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryRoutingShare (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const float * routingShare)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryRoutingShare, (
         operationName,
         bomEntryIndex,
         routingShare))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryRoutingShareDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const double * routingShare)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetBomEntryRoutingShare, (
         operationName,
         bomEntryIndex,
         routingShare))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntrySelForDel (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const witBoolean selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntrySelForDel, (
         operationName,
         bomEntryIndex,
         selForDel))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntrySingleSource (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const witBoolean singleSource)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntrySingleSource, (
         operationName,
         bomEntryIndex,
         singleSource))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryAppData (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      void * const appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryAppData, (
         operationName,
         bopEntryIndex,
         appData))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryEarliestPeriod (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const int earliestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryEarliestPeriod, (
         operationName,
         bopEntryIndex,
         earliestPeriod))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryExpAllowed (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const witBoolean expAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryExpAllowed, (
         operationName,
         bopEntryIndex,
         expAllowed))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryExpAversion (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const float expAversion)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryExpAversion, (
         operationName,
         bopEntryIndex,
         expAversion))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryExpAversionDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const double expAversion)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetBopEntryExpAversion, (
         operationName,
         bopEntryIndex,
         expAversion))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryLatestPeriod (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const int latestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryLatestPeriod, (
         operationName,
         bopEntryIndex,
         latestPeriod))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryOffset (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const float * const offset)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryOffset, (
         operationName,
         bopEntryIndex,
         offset))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryOffsetDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const double * const offset)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetBopEntryOffset, (
         operationName,
         bopEntryIndex,
         offset))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryProductRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const float * productRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryProductRate, (
         operationName,
         bopEntryIndex,
         productRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryProductRateDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const double * productRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetBopEntryProductRate, (
         operationName,
         bopEntryIndex,
         productRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryRoutingShare (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const float * routingShare)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryRoutingShare, (
         operationName,
         bopEntryIndex,
         routingShare))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryRoutingShareDbl ( 
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const double * routingShare)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetBopEntryRoutingShare, (
         operationName,
         bopEntryIndex,
         routingShare))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBopEntrySelForDel (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const witBoolean selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntrySelForDel, (
         operationName,
         bopEntryIndex,
         selForDel))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetCompPrices (
      WitRun * const theWitRun,
      const witBoolean compPrices)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetCompPrices, (
         compPrices))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetComputeCriticalList (
      WitRun * const theWitRun,
      const witBoolean computeCriticalList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetComputeCriticalList, (
         computeCriticalList))
   }
  
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetCplexParSpecDblVal (
      WitRun * const theWitRun,
      const float cplexParSpecDblVal)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetCplexParSpecDblVal, (
         cplexParSpecDblVal))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetCplexParSpecDblValDbl (
      WitRun * const theWitRun,
      const double cplexParSpecDblVal)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetCplexParSpecDblVal, (
         cplexParSpecDblVal))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetCplexParSpecIntVal (
      WitRun * const theWitRun,
      const int cplexParSpecIntVal)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetCplexParSpecIntVal, (
         cplexParSpecIntVal))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetCplexParSpecName (
      WitRun * const theWitRun,
      const char * const cplexParSpecName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetCplexParSpecName, (
         cplexParSpecName))
   }
  
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetCurrentObjective (
      WitRun * const theWitRun,
      const char * const theObjName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetCurrentObjective, (
         theObjName))
   }
  
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetCurrentScenario (
      WitRun * const theWitRun,
      const int currentScenario)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetCurrentScenario, (
         currentScenario))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandAppData (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      void * const appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandAppData, (
         partName,
         demandName,
         appData))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandCumShipBounds (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float * const hardLower,
      const float * const softLower,
      const float * const hardUpper)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandCumShipBounds, (
         partName,
         demandName,
         hardLower,
         softLower,
         hardUpper))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandCumShipBoundsDbl ( 
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double * const hardLower,
      const double * const softLower,
      const double * const hardUpper)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandCumShipBounds, (
         partName,
         demandName,
         hardLower,
         softLower,
         hardUpper))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandCumShipReward (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float * const cumShipReward)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandCumShipReward, (
         partName,
         demandName,
         cumShipReward))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandCumShipRewardDbl ( 
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double * const cumShipReward)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandCumShipReward, (
         partName,
         demandName,
         cumShipReward))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandDemandName (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const char * const newName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandDemandName, (
         partName,
         demandName,
         newName))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandDemandVol (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float * const demandVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandDemandVol, (
         partName,
         demandName,
         demandVol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandDemandVolDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double * const demandVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandDemandVol, (
         partName,
         demandName,
         demandVol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandFocusHorizon (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int focusHorizon)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandFocusHorizon, (
         partName,
         demandName,
         focusHorizon))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandFssShipVol (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float * const fssShipVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandFssShipVol, (
         partName,
         demandName,
         fssShipVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandFssShipVolDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double * const fssShipVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandFssShipVol, (
         partName,
         demandName,
         fssShipVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandIntShipVols (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int intShipVols)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandIntShipVols, (
         partName,
         demandName,
         intShipVols))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandLeadTimeUB (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int * leadTimeUB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandLeadTimeUB, (
         partName,
         demandName,
         leadTimeUB))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandPriority (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int * const priority)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandPriority, (
         partName,
         demandName,
         priority))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandSearchInc (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float searchInc)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandSearchInc, (
         partName,
         demandName,
         searchInc))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandSearchIncDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double searchInc)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandSearchInc, (
         partName,
         demandName,
         searchInc))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandSelForDel (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const witBoolean selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandSelForDel, (
         partName,
         demandName,
         selForDel))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandShipLateAllowed (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int shipLateAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandShipLateAllowed, (
         partName,
         demandName,
         shipLateAllowed))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandShipLateUB (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int * shipLateUB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandShipLateUB, (
         partName,
         demandName,
         shipLateUB))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandShipReward (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float * const shipReward)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandShipReward, (
         partName,
         demandName,
         shipReward))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandShipRewardDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double * const shipReward)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandShipReward, (
         partName,
         demandName,
         shipReward))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandShipVol (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float * const shipVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandShipVol, (
         partName,
         demandName,
         shipVol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandShipVolDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double * const shipVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandShipVol, (
         partName,
         demandName,
         shipVol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetEquitability (
      WitRun * const theWitRun,
      const int equitablity)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetEquitability, (
         equitablity))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetExecEmptyBom (
      WitRun * const theWitRun,
      const witBoolean execEmptyBom)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetExecEmptyBom, (
         execEmptyBom))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetExpCutoff (
      WitRun * const theWitRun,
      const float expCutoff)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetExpCutoff, (
         expCutoff))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetExpCutoffDbl (
      WitRun * const theWitRun,
      const double expCutoff)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetExpCutoff, (
         expCutoff))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetExtOptSoln (
      WitRun * const      theWitRun,
      const float * const colsol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetExtOptSoln, (
         colsol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetExtOptSolnDbl (
      WitRun * const       theWitRun,
      const double * const colsol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetExtOptSoln, (
         colsol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetForcedMultiEq (
      WitRun * const theWitRun,
      const witBoolean forcedMultiEq)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetForcedMultiEq, (
         forcedMultiEq))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetHighPrecisionWD (
      WitRun * const theWitRun,
      const witBoolean highPrecisionWD)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetHighPrecisionWD, (
         highPrecisionWD))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetIndependentOffsets (
      WitRun * const theWitRun,
      const witBoolean independentOffsets)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetIndependentOffsets, (
         independentOffsets))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetLotSizeTol (
      WitRun * const theWitRun,
      const float lotSizeTol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetLotSizeTol, (
         lotSizeTol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetLotSizeTolDbl (
      WitRun * const theWitRun,
      const double lotSizeTol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetLotSizeTol, (
         lotSizeTol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetMesgFileAccessMode (
      WitRun * const theWitRun,
      const witBoolean quiet,
      const char * const mesgFileAccessMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMesgFileAccessMode, (
         quiet,
         mesgFileAccessMode))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetMesgFileName (
      WitRun * const theWitRun,
      const witBoolean quiet,
      const char * const mesgFileName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMesgFileName, (
         quiet,
         mesgFileName))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetMesgPrintNumber (
      WitRun * const theWitRun,
      const witBoolean quiet,
      const int messageNumber,
      const witBoolean mesgPrintMunber)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMesgPrintNumber, (
         quiet,
         messageNumber,
         mesgPrintMunber))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetMesgStopRunning (
      WitRun * const theWitRun,
      const witBoolean quiet,
      const int messageNumber,
      const witBoolean mesgStopRunning)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMesgStopRunning, (
         quiet,
         messageNumber,
         mesgStopRunning))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetMesgThrowErrorExc (
      WitRun * const theWitRun,
      const witBoolean quiet,
      const int messageNumber,
      const witBoolean mesgThrowErrorExc)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMesgThrowErrorExc, (
         quiet,
         messageNumber,
         mesgThrowErrorExc))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetMesgTimesPrint (
      WitRun * const theWitRun,
      const witBoolean quiet,
      const int messageNumber,
      const int mesgTimesPrint)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMesgTimesPrint, (
         quiet,
         messageNumber,
         mesgTimesPrint))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetMinimalExcess (
      WitRun * const theWitRun,
      const witBoolean minimalExcess)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMinimalExcess, (
         minimalExcess))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetMipMode (
      WitRun * const theWitRun,
      const witBoolean mipMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMipMode, (
         mipMode))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetModHeurAlloc (
      WitRun * const theWitRun,
      const witBoolean modHeurAlloc)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetModHeurAlloc, (
         modHeurAlloc))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetMultiExec (
      WitRun * const theWitRun,
      const witBoolean multiExec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMultiExec, (
         multiExec))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetMultiObjMode (
      WitRun * const theWitRun,
      const witBoolean multiObjMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMultiObjMode, (
         multiObjMode))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetMultiObjTol (
      WitRun * const theWitRun,
      const float multiObjTol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMultiObjTol, (
         multiObjTol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetMultiObjTolDbl (
      WitRun * const theWitRun,
      const double multiObjTol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetMultiObjTol, (
         multiObjTol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetMultiRoute (
      WitRun * const theWitRun,
      const witBoolean multiRoute)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMultiRoute, (
         multiRoute))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetNPeriods (
      WitRun * const theWitRun,
      const int nPeriods)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetNPeriods, (
         nPeriods))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetNScenarios (
      WitRun * const theWitRun,
      const int nScenarios)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetNScenarios, (
         nScenarios))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetNstnResidual (
      WitRun * const theWitRun,
      const witBoolean nstnResidual)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetNstnResidual, (
         nstnResidual))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObjectiveList (
      WitRun * const             theWitRun,
      const int                  lenList,
      const char * const * const objectiveList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetObjectiveList, (
         lenList,
         objectiveList))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObjectiveListSpec (
      WitRun * const     theWitRun,
      const char * const objectiveListSpec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetObjectiveListSpec, (
         objectiveListSpec))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObjectiveRank (
      WitRun * const theWitRun,
      const int objectiveRank)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetObjectiveRank, (
         objectiveRank))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationAppData (
      WitRun * const theWitRun,
      const char * const operationName,
      void * const appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationAppData, (
         operationName,
         appData))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationExecBounds (
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const hardLower,
      const float * const softLower,
      const float * const hardUpper)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationExecBounds, (
         operationName,
         hardLower,
         softLower,
         hardUpper))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationExecBoundsDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const hardLower,
      const double * const softLower,
      const double * const hardUpper)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationExecBounds, (
         operationName,
         hardLower,
         softLower,
         hardUpper))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationExecCost (
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const execCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationExecCost, (
         operationName,
         execCost))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationExecCostDbl ( 
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const execCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationExecCost, (
         operationName,
         execCost))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationExecPenalty (
      WitRun * const theWitRun,
      const char * const operationName,
      const float execPenalty)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationExecPenalty, (
         operationName,
         execPenalty))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationExecPenaltyDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const double execPenalty)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationExecPenalty, (
         operationName,
         execPenalty))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationExecVol (
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const execVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationExecVol, (
         operationName,
         execVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationExecVolDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const execVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationExecVol, (
         operationName,
         execVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationIncLotSize (
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const incLotSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationIncLotSize, (
         operationName,
         incLotSize))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationIncLotSizeDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const incLotSize)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationIncLotSize, (
         operationName,
         incLotSize))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationIncLotSize2 (
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const incLotSize2)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationIncLotSize2, (
         operationName,
         incLotSize2))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationIncLotSize2Dbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const incLotSize2)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationIncLotSize2, (
         operationName,
         incLotSize2))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationIntExecVols (
      WitRun * const theWitRun,
      const char * const operationName,
      const witBoolean intExecVols)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationIntExecVols, (
         operationName,
         intExecVols))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationLotSize2Thresh (
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const lotSize2Thresh)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationLotSize2Thresh, (
         operationName,
         lotSize2Thresh))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationLotSize2ThreshDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const lotSize2Thresh)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationLotSize2Thresh, (
         operationName,
         lotSize2Thresh))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationMinLotSize (
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const minLotSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationMinLotSize, (
         operationName,
         minLotSize))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationMinLotSizeDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const minLotSize)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationMinLotSize, (
         operationName,
         minLotSize))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationMinLotSize2 (
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const minLotSize2)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationMinLotSize2, (
         operationName,
         minLotSize2))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationMinLotSize2Dbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const minLotSize2)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationMinLotSize2, (
         operationName,
         minLotSize2))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationObjectStage (
      WitRun * const     theWitRun,
      const char * const operationName,
      const int          objectStage)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationObjectStage, (
         operationName,
         objectStage))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationOperationName (
      WitRun * const     theWitRun,
      const char * const operationName,
      const char * const newName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationOperationName, (
         operationName,
         newName))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationSelForDel (
      WitRun * const theWitRun,
      const char * const operationName,
      const witBoolean selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationSelForDel, (
         operationName,
         selForDel))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationTwoLevelLotSizes (
      WitRun * const theWitRun,
      const char * const operationName,
      const witBoolean twoLevelLotSizes)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationTwoLevelLotSizes, (
         operationName,
         twoLevelLotSizes))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationYieldRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const yieldRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationYieldRate, (
         operationName,
         yieldRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationYieldRateDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const yieldRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationYieldRate, (
         operationName,
         yieldRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOptInitMethod (
      WitRun * const theWitRun,
      const witAttr optInitMethod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOptInitMethod, (
         optInitMethod))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOutputPrecision (
      WitRun * const theWitRun,
      const int outputPrecision)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOutputPrecision, (
         outputPrecision))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartAppData (
      WitRun * const theWitRun,
      const char * const partName,
      void * const appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartAppData, (
         partName,
         appData))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartAsapPipOrder (
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean asapPipOrder)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartAsapPipOrder, (
         partName,
         asapPipOrder))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartBoundedLeadTimes (
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean boundedLeadTimes)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartBoundedLeadTimes, (
         partName,
         boundedLeadTimes))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartBuildAheadUB (
      WitRun * const theWitRun,
      const char * const partName,
      const int * const buildAheadUB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartBuildAheadUB, (
         partName,
         buildAheadUB))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartBuildAsap (
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean buildAsap)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartBuildAsap, (
         partName,
         buildAsap))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartBuildNstn (
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean buildNstn)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartBuildNstn, (
         partName,
         buildNstn))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartObjectStage (
      WitRun * const     theWitRun,
      const char * const partName,
      const int          objectStage)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartObjectStage, (
         partName,
         objectStage))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartPartName (
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const newName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartPartName, (
         partName,
         newName))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartPropRtg (
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean * const propRtg)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartPropRtg, (
         partName,
         propRtg))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartScrapAllowed (
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean scrapAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartScrapAllowed, (
         partName,
         scrapAllowed))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartScrapCost (
      WitRun * const theWitRun,
      const char * const partName,
      const float * const scrapCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartScrapCost, (
         partName,
         scrapCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartScrapCostDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const double * const scrapCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetPartScrapCost, (
         partName,
         scrapCost
         ))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartSelForDel (
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartSelForDel, (
         partName,
         selForDel))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartSingleSource (
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean singleSource)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartSingleSource, (
         partName,
         singleSource))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartStockBounds (
      WitRun * const theWitRun,
      const char * const partName,
      const float * const hardLower,
      const float * const softLower,
      const float * const hardUpper)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartStockBounds, (
         partName,
         hardLower,
         softLower,
         hardUpper))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartStockBoundsDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const double * const hardLower,
      const double * const softLower,
      const double * const hardUpper)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetPartStockBounds, (
         partName,
         hardLower,
         softLower,
         hardUpper))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartStockCost (
      WitRun * const theWitRun,
      const char * const partName,
      const float * const stockCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartStockCost, (
         partName,
         stockCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartStockCostDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const double * const stockCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetPartStockCost, (
         partName,
         stockCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartSupplyVol (
      WitRun * const theWitRun,
      const char * const partName,
      const float * const supplyVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartSupplyVol, (
         partName,
         supplyVol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartSupplyVolDbl ( 
      WitRun * const theWitRun,
      const char * const partName,
      const double * const supplyVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetPartSupplyVol, (
         partName,
         supplyVol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPenExec (
      WitRun * const theWitRun,
      const witBoolean penExec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPenExec, (
         penExec))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPerfPegging (
      WitRun * const theWitRun,
      const witBoolean perfPegging)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPerfPegging, (
         perfPegging))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPeriodStage (
      WitRun * const theWitRun,
      const int *    periodStage)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPeriodStage, (
         periodStage))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPgdCritListMode (
      WitRun * const theWitRun,
      const witBoolean pgdCritListMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPgdCritListMode, (
         pgdCritListMode))
   }
  
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPipSeqFromHeur (
      WitRun * const theWitRun,
      const witBoolean pipSeqFromHeur)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPipSeqFromHeur, (
         pipSeqFromHeur))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPrefHighStockSLBs (
      WitRun * const theWitRun,
      const witBoolean prefHighStockSLBs)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPrefHighStockSLBs, (
         prefHighStockSLBs))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetProbability (
      WitRun * const theWitRun,
      const float probability)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetProbability, (
         probability))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetProbabilityDbl (
      WitRun * const theWitRun,
      const double probability)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetProbability, (
         probability))
   }

 //------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetRespectStockSLBs (
      WitRun * const theWitRun,
      const witBoolean respectStockSLBs)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetRespectStockSLBs, (
         respectStockSLBs))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetRoundReqVols (
      WitRun * const theWitRun,
      const witBoolean roundReqVols)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetRoundReqVols, (
         roundReqVols))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSelSplit (
      WitRun * const theWitRun,
      const witBoolean selSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSelSplit, (
         selSplit))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSelectionRecovery (
      WitRun * const theWitRun,
      const witBoolean selectionRecovery)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSelectionRecovery, (
         selectionRecovery))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSkipFailures (
      WitRun * const theWitRun,
      const witBoolean skipFailures)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSkipFailures, (
         skipFailures))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSolverLogFileName (
      WitRun * const theWitRun,
      const char * const solverLogFileName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSolverLogFileName, (
         solverLogFileName))
   }
  
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetStageByObject (
      WitRun * const theWitRun,
      const witBoolean stageByObject)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetStageByObject, (
         stageByObject))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetStochMode (
      WitRun * const theWitRun,
      const witBoolean stochMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetStochMode, (
         stochMode))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetStockReallocation (
      WitRun * const theWitRun,
      const witBoolean stockReallocation)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetStockReallocation, (
         stockReallocation))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryAppData (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      void * const appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryAppData, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         appData))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryConsRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float * consRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryConsRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         consRate))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryConsRateDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double * consRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntryConsRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         consRate))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryEarliestPeriod (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const int earliestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryEarliestPeriod, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         earliestPeriod))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryExecPenalty (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float execPenalty)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryExecPenalty, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         execPenalty))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryExecPenaltyDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double execPenalty)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntryExecPenalty, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         execPenalty))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryExpAllowed (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const witBoolean expAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryExpAllowed, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expAllowed))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryExpNetAversion (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float expNetAversion)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryExpNetAversion, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expNetAversion))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryExpNetAversionDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double expNetAversion)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntryExpNetAversion, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expNetAversion))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryFalloutRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float falloutRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryFalloutRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         falloutRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryFalloutRateDbl ( 
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double falloutRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntryFalloutRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         falloutRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryIntSubVols (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const witBoolean intSubVols)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryIntSubVols, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         intSubVols))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryLatestPeriod (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const int latestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryLatestPeriod, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         latestPeriod))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryMrpNetAllowed (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const witBoolean mrpNetAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryMrpNetAllowed, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         mrpNetAllowed))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryNetAllowed (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const witBoolean netAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryNetAllowed, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         netAllowed))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryObj1SubCost (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float * const obj1SubCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryObj1SubCost, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj1SubCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryObj1SubCostDbl ( 
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double * const obj1SubCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntryObj1SubCost, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj1SubCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryOffset (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float * const offset)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryOffset, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         offset))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryOffsetDbl ( 
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double * const offset)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntryOffset, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         offset))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryRoutingShare (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float * routingShare)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryRoutingShare, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         routingShare))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryRoutingShareDbl ( 
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double * routingShare)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntryRoutingShare, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         routingShare))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntrySelForDel (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const witBoolean selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntrySelForDel, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         selForDel))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntrySubCost (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float * const subCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntrySubCost, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntrySubCostDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double * const subCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntrySubCost, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntrySubVol (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float * const subVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntrySubVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntrySubVolDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double * const subVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntrySubVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetTieBreakPropRt (
      WitRun * const theWitRun,
      const witBoolean tieBreakPropRt)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetTieBreakPropRt, (
         tieBreakPropRt))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetTitle (
      WitRun * const theWitRun,
      const char * const title)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetTitle, (
         title))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetTruncOffsets (
      WitRun * const theWitRun,
      const witBoolean truncOffsets)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetTruncOffsets, (
         truncOffsets))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetTwoWayMultiExec (
      WitRun * const theWitRun,
      const witBoolean twoWayMultiExec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetTwoWayMultiExec, (
         twoWayMultiExec))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetUseFocusHorizons (
      WitRun * const theWitRun,
      const witBoolean useFocusHorizons)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetUseFocusHorizons, (
         useFocusHorizons))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetUserHeurStart (
      WitRun * const theWitRun,
      const witBoolean userHeurStart)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetUserHeurStart, (
         userHeurStart))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetWbounds (
      WitRun * const theWitRun,
      const float wbounds)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetWbounds, (
         wbounds))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetWboundsDbl (
      WitRun * const theWitRun,
      const double wbounds)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetWbounds, (
         wbounds))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetWit34Compatible (
      WitRun * const theWitRun,
      const witBoolean wit34Compatible)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetWit34Compatible, (
         wit34Compatible))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witShutDownExtOpt (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witShutDownExtOpt, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witShutDownHeurAlloc (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witShutDownHeurAlloc, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witStartExtOpt (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witStartExtOpt, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witStartHeurAlloc (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witStartHeurAlloc, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witStochImplode (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witStochImplode, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witWriteCriticalList (
      WitRun * const theWitRun,
      const char * const fileName,
      const witFileFormat fileFormat,
      const int maxListLen)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witWriteCriticalList, (
         fileName,
         fileFormat,
         maxListLen))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witWriteData (
      WitRun * const theWitRun,
      const char * const fileName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witWriteData, (
         fileName))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witWriteExecSched (
      WitRun * const theWitRun,
      const char * const fileName,
      const witFileFormat fileFormat)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witWriteExecSched, (
         fileName,
         fileFormat))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witWriteReqSched (
      WitRun * const theWitRun,
      const char * const fileName,
      const witFileFormat fileFormat)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witWriteReqSched, (
         fileName,
         fileFormat))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witWriteShipSched (
      WitRun * const theWitRun,
      const char * const fileName,
      const witFileFormat fileFormat)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witWriteShipSched, (
         fileName,
         fileFormat))
   }

//------------------------------------------------------------------------------
// The following functions that were formerly part of WIT's documented API,
// but have since been removed from the documentation.
// They are included here for upward compatibility.
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryFallout (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      int * fallout)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryFallout, (
         operationName,
         bomEntryIndex,
         fallout))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryPropRouting (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      witBoolean * propRouting)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryPropRouting, (
         operationName,
         bomEntryIndex,
         propRouting))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryUsageRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      float * usageRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryUsageRate, (
         operationName,
         bomEntryIndex,
         usageRate))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryUsageTime (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      float * time)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryUsageTime, (
         operationName,
         bomEntryIndex,
         time))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryByProduct (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      witBoolean * byProduct)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryByProduct, (
         operationName,
         bopEntryIndex,
         byProduct))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryProdRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      float * prodRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryProdRate, (
         operationName,
         bopEntryIndex,
         prodRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBuildWhenEmpty (
      WitRun * const theWitRun,
      witBoolean * buildWhenEmpty)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBuildWhenEmpty, (
         buildWhenEmpty))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandBuildAheadLimit (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * buildAheadLimit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandBuildAheadLimit, (
         partName,
         demandName,
         buildAheadLimit))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandBuildAheadUB (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * * buildAheadUB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandBuildAheadUB, (
         partName,
         demandName,
         buildAheadUB))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandObj1CumShipReward (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * * obj1CumShipReward)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandObj1CumShipReward, (
         demandedPartName,
         demandName,
         obj1CumShipReward))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandObj1CumShipRewardDbl (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * * obj1CumShipReward)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandObj1CumShipReward, (
         demandedPartName,
         demandName,
         obj1CumShipReward))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandObj1ShipReward (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * * obj1ShipReward)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandObj1ShipReward, (
         demandedPartName,
         demandName,
         obj1ShipReward))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandObj1ShipRewardDbl (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * * obj1ShipReward)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandObj1ShipReward, (
         demandedPartName,
         demandName,
         obj1ShipReward))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandPrefBuildAhead (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * prefBuildAhead)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandPrefBuildAhead, (
         partName,
         demandName,
         prefBuildAhead))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandShipLateLimit (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * shipLateLimit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandShipLateLimit, (
         partName,
         demandName,
         shipLateLimit))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetHashTableSize (
      WitRun * const theWitRun,
      int * hashTableSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetHashTableSize, (
         hashTableSize))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetLocalBuildAhead (
      WitRun * const theWitRun,
      witBoolean * localBuildAhead)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetLocalBuildAhead, (
         localBuildAhead))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetLocalMultiExec (
      WitRun * const theWitRun,
      witBoolean * localMultiExec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetLocalMultiExec, (
         localMultiExec))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObjChoice (
      WitRun * const theWitRun,
      int * objChoice)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjChoice, (
         objChoice))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationObj1ExecCost (
      WitRun * const theWitRun,
      const char * const operationName,
      float * * obj1ExecCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationObj1ExecCost, (
         operationName,
         obj1ExecCost))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationObj1ExecCostDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      double * * obj1ExecCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationObj1ExecCost, (
         operationName,
         obj1ExecCost))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationYield (
      WitRun * const theWitRun,
      const char * const operationName,
      int * * yield)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationYield, (
         operationName,
         yield))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartBuildAheadLimit (
      WitRun * const theWitRun,
      const char * const partName,
      int * buildAheadLimit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartBuildAheadLimit, (
         partName,
         buildAheadLimit))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartCycleTime (
      WitRun * const theWitRun,
      const char * const partName,
      float * * cycleTime)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartCycleTime, (
         partName,
         cycleTime))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartIncLotSize (
      WitRun * const theWitRun,
      const char * const partName,
      float * * incLotSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartIncLotSize, (
         partName,
         incLotSize))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartMinLotSize (
      WitRun * const theWitRun,
      const char * const partName,
      float * * minLotSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartMinLotSize, (
         partName,
         minLotSize))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartMrpProdVol (
      WitRun * const theWitRun,
      const char * const partName,
      float * * mrpProdVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartMrpProdVol, (
         partName,
         mrpProdVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartNBomEntries (
      WitRun * const theWitRun,
      const char * const partName,
      int * nBomEntries)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartNBomEntries, (
         partName,
         nBomEntries))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartObj1ProdCost (
      WitRun * const theWitRun,
      const char * const partName,
      float * * obj1ProdCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartObj1ProdCost, (
         partName,
         obj1ProdCost))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartObj1ScrapCost (
      WitRun * const theWitRun,
      const char * const partName,
      float * * obj1ScrapCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartObj1ScrapCost, (
         partName,
         obj1ScrapCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartObj1ScrapCostDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * obj1ScrapCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartObj1ScrapCost, (
         partName,
         obj1ScrapCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartObj1StockCost (
      WitRun * const theWitRun,
      const char * const partName,
      float * * obj1StockCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartObj1StockCost, (
         partName,
         obj1StockCost))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartObj1StockCostDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * obj1StockCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartObj1StockCost, (
         partName,
         obj1StockCost))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartProdBounds (
      WitRun * const theWitRun,
      const char * const partName,
      float * * hardLower,
      float * * softLower,
      float * * hardUpper)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartProdBounds, (
         partName,
         hardLower,
         softLower,
         hardUpper))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartPropRouting (
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * propRouting)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartPropRouting, (
         partName,
         propRouting))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartYield (
      WitRun * const theWitRun,
      const char * const partName,
      int * * yield)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartYield, (
         partName,
         yield))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetStockRealloc (
      WitRun * const theWitRun,
      witBoolean * stockRealloc)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetStockRealloc, (
         stockRealloc))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryFallout (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      int * fallout)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryFallout, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         fallout))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryProdVol (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * * prodVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryProdVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         prodVol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryUsageRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * usageRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryUsageRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         usageRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witOptPreprocess (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witOptPreprocess, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryFallout (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int fallout)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryFallout, (
         operationName,
         bomEntryIndex,
         fallout))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryPropRouting (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const witBoolean propRouting)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryPropRouting, (
         operationName,
         bomEntryIndex,
         propRouting))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryUsageRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const float usageRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryUsageRate, (
         operationName,
         bomEntryIndex,
         usageRate))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryUsageTime (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const float time)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryUsageTime, (
         operationName,
         bomEntryIndex,
         time))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryByProduct (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const witBoolean byProduct)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryByProduct, (
         operationName,
         bopEntryIndex,
         byProduct))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryProdRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const float prodRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryProdRate, (
         operationName,
         bopEntryIndex,
         prodRate))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBuildWhenEmpty (
      WitRun * const theWitRun,
      const witBoolean buildWhenEmpty)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBuildWhenEmpty, (
         buildWhenEmpty))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandBuildAheadLimit (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int buildAheadLimit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandBuildAheadLimit, (
         partName,
         demandName,
         buildAheadLimit))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandBuildAheadUB (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int * buildAheadUB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandBuildAheadUB, (
         partName,
         demandName,
         buildAheadUB))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandObj1CumShipReward (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float * const obj1CumShipReward)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandObj1CumShipReward, (
         partName,
         demandName,
         obj1CumShipReward))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandObj1CumShipRewardDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double * const obj1CumShipReward)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandObj1CumShipReward, (
         partName,
         demandName,
         obj1CumShipReward))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandObj1ShipReward (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float * const obj1ShipReward)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandObj1ShipReward, (
         partName,
         demandName,
         obj1ShipReward))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandObj1ShipRewardDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double * const obj1ShipReward)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandObj1ShipReward, (
         partName,
         demandName,
         obj1ShipReward))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandPrefBuildAhead (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int prefBuildAhead)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandPrefBuildAhead, (
         partName,
         demandName,
         prefBuildAhead))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandShipLateLimit (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int shipLateLimit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandShipLateLimit, (
         partName,
         demandName,
         shipLateLimit))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetHashTableSize (
      WitRun * const theWitRun,
      const int hashTableSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetHashTableSize, (
         hashTableSize))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetLocalBuildAhead (
      WitRun * const theWitRun,
      const witBoolean localBuildAhead)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetLocalBuildAhead, (
         localBuildAhead))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetLocalMultiExec (
      WitRun * const theWitRun,
      const witBoolean localMultiExec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetLocalMultiExec, (
         localMultiExec))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObjChoice (
      WitRun * const theWitRun,
      const int objChoice)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetObjChoice, (
         objChoice))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationObj1ExecCost (
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const obj1ExecCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationObj1ExecCost, (
         operationName,
         obj1ExecCost))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationObj1ExecCostDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const obj1ExecCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationObj1ExecCost, (
         operationName,
         obj1ExecCost))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationYield (
      WitRun * const theWitRun,
      const char * const operationName,
      const int * const yield)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationYield, (
         operationName,
         yield))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartBuildAheadLimit (
      WitRun * const theWitRun,
      const char * const partName,
      const int buildAheadLimit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartBuildAheadLimit, (
         partName,
         buildAheadLimit))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartCycleTime (
      WitRun * const theWitRun,
      const char * const partName,
      const float * const cycleTime)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartCycleTime, (
         partName,
         cycleTime))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartIncLotSize (
      WitRun * const theWitRun,
      const char * const partName,
      const float * const incLotSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartIncLotSize, (
         partName,
         incLotSize))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartMinLotSize (
      WitRun * const theWitRun,
      const char * const partName,
      const float * const minLotSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartMinLotSize, (
         partName,
         minLotSize))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartObj1ProdCost (
      WitRun * const theWitRun,
      const char * const partName,
      const float * const obj1ProdCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartObj1ProdCost, (
         partName,
         obj1ProdCost))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartObj1ScrapCost (
      WitRun * const theWitRun,
      const char * const partName,
      const float * const obj1ScrapCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartObj1ScrapCost, (
         partName,
         obj1ScrapCost
         ))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartObj1ScrapCostDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const double * const obj1ScrapCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetPartObj1ScrapCost, (
         partName,
         obj1ScrapCost
         ))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartObj1StockCost (
      WitRun * const theWitRun,
      const char * const partName,
      const float * const obj1StockCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartObj1StockCost, (
         partName,
         obj1StockCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartObj1StockCostDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const double * const obj1StockCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetPartObj1StockCost, (
         partName,
         obj1StockCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartProdBounds (
      WitRun * const theWitRun,
      const char * const partName,
      const float * const hardLower,
      const float * const softLower,
      const float * const hardUpper)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartProdBounds, (
         partName,
         hardLower,
         softLower,
         hardUpper))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartProdVol (
      WitRun * const theWitRun,
      const char * const partName,
      const float * const prodVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartProdVol, (
         partName,
         prodVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartPropRouting (
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean propRouting)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartPropRouting, (
         partName,
         propRouting))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartYield (
      WitRun * const theWitRun,
      const char * const partName,
      const int * const yield)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartYield, (
         partName,
         yield))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetStockRealloc (
      WitRun * const theWitRun,
      const witBoolean stockRealloc)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetStockRealloc, (
         stockRealloc))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryFallout (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const int fallout)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryFallout, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         fallout))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryProdVol (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float * const prodVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryProdVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         prodVol))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryUsageRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float usageRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryUsageRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         usageRate))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witWriteProdSched (
      WitRun * const theWitRun,
      const char * const fileName,
      const witFileFormat fileFormat)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witWriteProdSched, (
         fileName,
         fileFormat))
   }

//------------------------------------------------------------------------------
// Miscellaneous undocumented functions.
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witExecStandAlone (
      WitRun * const theWitRun,
      int            argc,
      char *         argv[])
   {
   STANDARD_API_IMPL (
      theWitRun,
      witExecStandAlone, (
         argc,
         argv))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witExhaustMemory (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witExhaustMemory, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryMeSelSplit (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      witBoolean * meSelSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryMeSelSplit, (
         operationName,
         bopEntryIndex,
         meSelSplit))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDevMode (
      WitRun * const theWitRun,
      witBoolean *   devMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDevMode, (
         devMode))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetNewPipPggOrder (
      WitRun * const theWitRun,
      witBoolean * newPipPggOrder)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetNewPipPggOrder, (
         newPipPggOrder))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetNonMrSelSplit (
      WitRun * const theWitRun,
      witBoolean * nonMrSelSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetNonMrSelSplit, (
         nonMrSelSplit))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartBaSelSplit (
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * baSelSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartBaSelSplit, (
         partName,
         baSelSplit))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSrSelSplit (
      WitRun * const theWitRun,
      witBoolean * srSelSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSrSelSplit, (
         srSelSplit))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witInterpretDevCmd (
      WitRun * const     theWitRun,
      const char * const theDevCmd)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witInterpretDevCmd, (
         theDevCmd))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witIssueFatalMesg (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witIssueFatalMesg, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witListUnissuedMsgs (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witListUnissuedMsgs, ())
   }

//------------------------------------------------------------------------------
// Non-Standard API Function.
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witMalloc (
      size_t size,
      void * * mem)
   {
   * mem = malloc (size);

   return
      (* mem != NULL)?
         WitINFORMATIONAL_RC: 
         WitWARNING_RC;
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witNoDependantWitRunVeneersDecr (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witNoDependantWitRunVeneersDecr, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witNoDependantWitRunVeneersIncr (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witNoDependantWitRunVeneersIncr, ())
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witNoDependantWitRunVeneersIsOne (
      WitRun * const theWitRun,
      int * isOne)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witNoDependantWitRunVeneersIsOne, (
         isOne))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryMeSelSplit (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const witBoolean meSelSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryMeSelSplit, (
         operationName,
         bopEntryIndex,
         meSelSplit))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetNewPipPggOrder (
      WitRun * const theWitRun,
      const witBoolean newPipPggOrder)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetNewPipPggOrder, (
         newPipPggOrder))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetNonMrSelSplit (
      WitRun * const theWitRun,
      const witBoolean nonMrSelSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetNonMrSelSplit, (
         nonMrSelSplit))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartBaSelSplit (
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean baSelSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartBaSelSplit, (
         partName,
         baSelSplit))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSrSelSplit (
      WitRun * const theWitRun,
      const witBoolean srSelSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSrSelSplit, (
         srSelSplit))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetWit34Allowed (
      WitRun * const theWitRun,
      const witBoolean wit34Allowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetWit34Allowed, (
         wit34Allowed))
   }

//------------------------------------------------------------------------------
//
// The MS V C++ V4.2 compiler reports:
//   error C2201: must have external linkage in order to be exported/imported
// when defining exported witAttr symbols to be of type const.
// This seems to be a compiler problem and can be avoided by not declaring
// these symbols to be const.  This is not desirable, but seems to be
// necessary. 
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//
// Examples of declaration and definition of global data.
//
// When building a wit.dll with MS V C++ V4.2:
//   Definition in api.C:
//     declspec (dllexport) witAttr WitCAPACITY = "CAPACITY";
//   Declaration in wit.h when included by internally by wit:
//     extern declspec (dllexport) witAttr WitCAPACITY;
//   Declaration in wit.h when included by wit applications: 
//     extern declspec (dllimport) witAttr WitCAPACITY;
//
// All other builds:
//   Definition in api.C:
//     const witAttr WitCAPACITY = "CAPACITY";
//   Declaration in wit application and api applications:
//     extern const witAttr WitCAPACITY;
//
//------------------------------------------------------------------------------

WIT_DECLSPEC WIT_CONST witAttr       WitSTDOUT       = nonConst ("stdout");
WIT_DECLSPEC WIT_CONST witAttr       WitSTDIN        = nonConst ("stdin");

WIT_DECLSPEC WIT_CONST witAttr       WitRAW          = nonConst ("RAW");
WIT_DECLSPEC WIT_CONST witAttr       WitPRODUCT      = nonConst ("PRODUCT");
WIT_DECLSPEC WIT_CONST witAttr       WitCAPACITY     = nonConst ("CAPACITY");
WIT_DECLSPEC WIT_CONST witAttr       WitMATERIAL     = nonConst ("MATERIAL");

WIT_DECLSPEC WIT_CONST witAttr       WitINACTIVE     = nonConst ("inactive");
WIT_DECLSPEC WIT_CONST witAttr       WitAT_PART      = nonConst ("atPart");
WIT_DECLSPEC WIT_CONST witAttr       WitAT_DEMAND    = nonConst ("atDemand");
WIT_DECLSPEC WIT_CONST witAttr       WitAT_OPERATION = nonConst ("atOperation");
WIT_DECLSPEC WIT_CONST witAttr       WitAT_BOM_ENTRY = nonConst ("atBomEntry");
WIT_DECLSPEC WIT_CONST witAttr       WitAT_SUB_ENTRY = nonConst ("atSubEntry");
WIT_DECLSPEC WIT_CONST witAttr       WitAT_BOP_ENTRY = nonConst ("atBopEntry");

WIT_DECLSPEC WIT_CONST witFileFormat WitBSV          = nonConst ("bsv");
WIT_DECLSPEC WIT_CONST witFileFormat WitCSV          = nonConst ("csv");


WIT_DECLSPEC
   WIT_CONST witAttr WitACC_OPT_INIT_METHOD   = nonConst ("accOptInitMethod");
WIT_DECLSPEC
   WIT_CONST witAttr WitHEUR_OPT_INIT_METHOD  = nonConst ("heurOptInitMethod");
WIT_DECLSPEC
   WIT_CONST witAttr WitSCHED_OPT_INIT_METHOD = nonConst ("schedOptInitMethod");
WIT_DECLSPEC
   WIT_CONST witAttr WitCRASH_OPT_INIT_METHOD = nonConst ("crashOptInitMethod");


WIT_DECLSPEC WIT_CONST int           WitINFORMATIONAL_MESSAGES = -1;
WIT_DECLSPEC WIT_CONST int           WitWARNING_MESSAGES       = -2;
WIT_DECLSPEC WIT_CONST int           WitSEVERE_MESSAGES        = -3;
WIT_DECLSPEC WIT_CONST int           WitFATAL_MESSAGES         = -4;

WIT_DECLSPEC WIT_CONST witReturnCode WitINFORMATIONAL_RC       =  0;
WIT_DECLSPEC WIT_CONST witReturnCode WitWARNING_RC             =  1;
WIT_DECLSPEC WIT_CONST witReturnCode WitSEVERE_RC              =  3;
WIT_DECLSPEC WIT_CONST witReturnCode WitFATAL_RC               =  4;

//------------------------------------------------------------------------------

   }
   //
   // End of extern "C"

//------------------------------------------------------------------------------
// Implementation of class ErrorExc.
//------------------------------------------------------------------------------

WitErrorExc::WitErrorExc (
         const char *  funcNameVal,
         int           mesgNumVal,
         witReturnCode retCodeVal):

      funcName_ (),
      mesgNum_  (mesgNumVal),
      retCode_  (retCodeVal)
   {
   strncpy (funcName_, funcNameVal, 50);

   funcName_[50] = '\0';
   }

//------------------------------------------------------------------------------

WitErrorExc::WitErrorExc (const WitErrorExc & theErrorExc):

      funcName_ (),
      mesgNum_  (theErrorExc.mesgNum_),
      retCode_  (theErrorExc.retCode_)
   {
   strcpy (funcName_, theErrorExc.funcName_);
   }

//------------------------------------------------------------------------------

WitErrorExc::~WitErrorExc ()
   {
   }

//------------------------------------------------------------------------------

const char * WitErrorExc::funcName () const
   {
   return funcName_;
   }

//------------------------------------------------------------------------------

int WitErrorExc::mesgNum () const
   {
   return mesgNum_;
   }

//------------------------------------------------------------------------------

witReturnCode WitErrorExc::retCode () const
   {
   return retCode_;
   }
@


1.366
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.365
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d13 1
a13 1
// Contains the implementations of all of outer API functions (which are
d53 17
a69 17
{                                                                           \
try                                                                         \
{                                                                        \
WitApiMgr::startApiFunc (theWitRun, #innerFunc);                         \
\
theWitRun->innerFunc argList;                                            \
\
theWitRun->myApiMgr ()->finishApiFunc ();                                \
}                                                                        \
\
catch (...)                                                                 \
{                                                                        \
theWitRun->myApiMgr ()->handleAnyExc ();                                 \
}                                                                        \
\
return theWitRun->myApiMgr ()->apiRc ();                                    \
}                                                                           \
d81 17
a97 17
{                                                                           \
try                                                                         \
{                                                                        \
WitApiMgr::startApiFunc (theWitRun, #innerFunc "Dbl");                   \
\
theWitRun->innerFunc argList;                                            \
\
theWitRun->myApiMgr ()->finishApiFunc ();                                \
}                                                                        \
\
catch (...)                                                                 \
{                                                                        \
theWitRun->myApiMgr ()->handleAnyExc ();                                 \
}                                                                        \
\
return theWitRun->myApiMgr ()->apiRc ();                                    \
}                                                                           \
d108 6
a113 6
{
witAttr nonConst (const char * theCstring)
{
return const_cast <char *> (theCstring);
}
}
d118 1
a118 1
{
d125 10
a134 10
WitRun * const theWitRun,
const char * const consumingOperationName,
const char * const consumedPartName)
{
STANDARD_API_IMPL (
theWitRun,
witAddBomEntry, (
consumingOperationName,
consumedPartName))
}
d139 10
a148 10
WitRun * const theWitRun,
const char * const producingOperationName,
const char * const producedPartName)
{
STANDARD_API_IMPL (
theWitRun,
witAddBopEntry, (
producingOperationName,
producedPartName))
}
d153 10
a162 10
WitRun * const     theWitRun,
const char * const theName,
const float        theValue)
{
STANDARD_API_IMPL (
theWitRun,
witAddDblCplexParSpec, (
theName,
theValue))
}
d167 10
a176 10
WitRun * const     theWitRun,
const char * const theName,
const double       theValue)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witAddDblCplexParSpec, (
theName,
theValue))
}
d181 11
a191 11
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName)
{
STANDARD_API_IMPL (
theWitRun,
witAddDemand, (
demandedPartName,
demandName))
}

d195 10
a204 10
WitRun * const     theWitRun,
const char * const theName,
const int          theValue)
{
STANDARD_API_IMPL (
theWitRun,
witAddIntCplexParSpec, (
theName,
theValue))
}
d209 8
a216 8
WitRun * const theWitRun,
const char * const operationName)
{
STANDARD_API_IMPL (
theWitRun,
witAddOperation, (
operationName))
}
d221 11
a231 11
WitRun * const theWitRun,
const char * const partName,
const witAttr partCategory)
{
STANDARD_API_IMPL (
theWitRun,
witAddPart, (
partName,
partCategory))
}

d235 8
a242 8
WitRun * const theWitRun,
const char * const partAndOperationName)
{
STANDARD_API_IMPL (
theWitRun,
witAddPartWithOperation, (
partAndOperationName))
}
d247 13
a259 13
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const char * const consumedPartName)
{
STANDARD_API_IMPL (
theWitRun,
witAddSubsBomEntry, (
operationName,
bomEntryIndex,
consumedPartName))
}

d263 6
a268 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witAdvanceObjItr, ())
}
d273 14
a286 14
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
int                shipPeriod,
float              incShipVol)
{
STANDARD_API_IMPL (
theWitRun,
witAppendToPipSeq, (
partName,
demandName,
shipPeriod,
incShipVol))
}
d291 14
a304 14
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
int                shipPeriod,
double             incShipVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witAppendToPipSeq, (
partName,
demandName,
shipPeriod,
incShipVol))
}
d309 6
a314 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witBuildPip, ())
}
d319 6
a324 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witClearCplexParSpecs, ())
}
d329 6
a334 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witClearPegging, ())
}
d339 6
a344 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witClearPipSeq, ())
}
d349 6
a354 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witClearStochSoln, ())
}
d359 16
a374 16
WitRun * const     dupWitRun,
const char * const dupOperationName,
const int          dupBomEntryIndex,
WitRun * const     origWitRun,
const char * const origOperationName,
const int          origBomEntryIndex)
{
STANDARD_API_IMPL (
dupWitRun,
witCopyBomEntryData, (
dupOperationName,
dupBomEntryIndex,
origWitRun,
origOperationName,
origBomEntryIndex))
}
d379 16
a394 16
WitRun * const     dupWitRun,
const char * const dupOperationName,
const int          dupBopEntryIndex,
WitRun * const     origWitRun,
const char * const origOperationName,
const int          origBopEntryIndex)
{
STANDARD_API_IMPL (
dupWitRun,
witCopyBopEntryData, (
dupOperationName,
dupBopEntryIndex,
origWitRun,
origOperationName,
origBopEntryIndex))
}
d399 8
a406 8
WitRun * const dupWitRun,
WitRun * const origWitRun)
{
STANDARD_API_IMPL (
dupWitRun,
witCopyData, (
origWitRun))
}
d411 16
a426 16
WitRun * const     dupWitRun,
const char * const dupPartName,
const char * const dupDemandName,
WitRun * const     origWitRun,
const char * const origPartName,
const char * const origDemandName)
{
STANDARD_API_IMPL (
dupWitRun,
witCopyDemandData, (
dupPartName,
dupDemandName,
origWitRun,
origPartName,
origDemandName))
}
d431 12
a442 12
WitRun * const     dupWitRun,
const char * const dupOperationName,
WitRun * const     origWitRun,
const char * const origOperationName)
{
STANDARD_API_IMPL (
dupWitRun,
witCopyOperationData, (
dupOperationName,
origWitRun,
origOperationName))
}
d447 12
a458 12
WitRun * const     dupWitRun,
const char * const dupPartName,
WitRun * const     origWitRun,
const char * const origPartName)
{
STANDARD_API_IMPL (
dupWitRun,
witCopyPartData, (
dupPartName,
origWitRun,
origPartName))
}
d463 20
a482 20
WitRun * const     dupWitRun,
const char * const dupOperationName,
const int          dupBomEntryIndex,
const int          dupSubsBomEntryIndex,
WitRun * const     origWitRun,
const char * const origOperationName,
const int          origBomEntryIndex,
const int          origSubsBomEntryIndex)
{
STANDARD_API_IMPL (
dupWitRun,
witCopySubsBomEntryData, (
dupOperationName,
dupBomEntryIndex,
dupSubsBomEntryIndex,
origWitRun,
origOperationName,
origBomEntryIndex,
origSubsBomEntryIndex))
}
d493 3
a495 3
WitRun * theWitRun)
{
witReturnCode theRC;
d497 2
a498 2
if (theWitRun == NULL)
return WitINFORMATIONAL_RC;
d500 1
a500 1
theRC = witDeleteRunInner (theWitRun);
d502 2
a503 2
if (theRC > WitWARNING_RC)
return theRC;
d505 1
a505 1
theWitRun->myApiMgr ()->lockMyWitRun ("witDeleteRun");
d507 1
a507 1
delete theWitRun;
d509 2
a510 2
return theRC;
}
d520 5
a524 5
{
STANDARD_API_IMPL (
theWitRun,
witDeleteRun, ())
}
d529 8
a536 8
WitRun * const theWitRun,
const char * const fileName)
{
STANDARD_API_IMPL (
theWitRun,
witDisplayData, (
fileName))
}
d541 18
a558 18
WitRun * const theWitRun,
const int lenLists,
const char * const * const demandedPartNameList,
const char * const * const demandNameList,
const int * const shipPeriodList,
const float * const desIncVolList,
float * * incVolList)
{
STANDARD_API_IMPL (
theWitRun,
witEqHeurAlloc, (
lenLists,
demandedPartNameList,
demandNameList,
shipPeriodList,
desIncVolList,
incVolList))
}
d563 18
a580 18
WitRun * const theWitRun,
const int lenLists,
const char * const * const demandedPartNameList,
const char * const * const demandNameList,
const int * const shipPeriodList,
const double * const desIncVolList,
double * * incVolList)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witEqHeurAlloc, (
lenLists,
demandedPartNameList,
demandNameList,
shipPeriodList,
desIncVolList,
incVolList))
}
d585 20
a604 20
WitRun * const theWitRun,
const int lenLists,
const char * const * const demandedPartNameList,
const char * const * const demandNameList,
const int * const shipPeriodList,
const float * const desIncVolList,
float * * incVolList,
const witBoolean * const asapMultiExecList)
{
STANDARD_API_IMPL (
theWitRun,
witEqHeurAllocTwme, (
lenLists,
demandedPartNameList,
demandNameList,
shipPeriodList,
desIncVolList,
incVolList,
asapMultiExecList))
}
d609 20
a628 20
WitRun * const theWitRun,
const int lenLists,
const char * const * const demandedPartNameList,
const char * const * const demandNameList,
const int * const shipPeriodList,
const double * const desIncVolList,
double * * incVolList,
const witBoolean * const asapMultiExecList)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witEqHeurAllocTwme, (
lenLists,
demandedPartNameList,
demandNameList,
shipPeriodList,
desIncVolList,
incVolList,
asapMultiExecList))
}
d633 6
a638 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witEvalObjectives, ())
}
d643 6
a648 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witFinishExtOpt, ())
}
d653 6
a658 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witFinishHeurAlloc, ())
}
d665 3
a667 3
void * mem)
{
free (mem);
d669 2
a670 2
return WitINFORMATIONAL_RC;
}
d675 7
a681 7
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witGeneratePriorities, ())
}

d685 9
a693 9
WitRun * const theWitRun,
witBoolean * accAfterSoftLB)
{
STANDARD_API_IMPL (
theWitRun,
witGetAccAfterSoftLB, (
accAfterSoftLB))
}

d697 9
a705 9
WitRun * const theWitRun,
witBoolean * accAfterOptImp)
{
STANDARD_API_IMPL (
theWitRun,
witGetAccAfterOptImp, (
accAfterOptImp))
}

d709 8
a716 8
WitRun * const theWitRun,
witBoolean * accelerated)
{
STANDARD_API_IMPL (
theWitRun,
witGetAccelerated, (
accelerated))
}
d721 8
a728 8
WitRun * const theWitRun,
void * * appData)
{
STANDARD_API_IMPL (
theWitRun,
witGetAppData, (
appData))
}
d733 8
a740 8
WitRun * const theWitRun,
witBoolean * autoPriority)
{
STANDARD_API_IMPL (
theWitRun,
witGetAutoPriority, (
autoPriority))
}
d745 12
a756 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
void * * appData)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntryAppData, (
operationName,
bomEntryIndex,
appData))
}
d761 13
a773 13
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
float * * consRate)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntryConsRate, (
operationName,
bomEntryIndex,
consRate))
}

d777 13
a789 13
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
double * * consRate)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetBomEntryConsRate, (
operationName,
bomEntryIndex,
consRate))
}

d793 12
a804 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
char * * consumedPartName)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntryConsumedPart, (
operationName,
bomEntryIndex,
consumedPartName))
}
d809 12
a820 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
int * earliestPeriod)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntryEarliestPeriod, (
operationName,
bomEntryIndex,
earliestPeriod))
}
d825 12
a836 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
float * execPenalty)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntryExecPenalty, (
operationName,
bomEntryIndex,
execPenalty))
}
d841 12
a852 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
double * execPenalty)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetBomEntryExecPenalty, (
operationName,
bomEntryIndex,
execPenalty))
}
d857 12
a868 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
float * falloutRate)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntryFalloutRate, (
operationName,
bomEntryIndex,
falloutRate))
}
d873 12
a884 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
double * falloutRate)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetBomEntryFalloutRate, (
operationName,
bomEntryIndex,
falloutRate))
}
d889 13
a901 13
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
int * * impactPeriod)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntryImpactPeriod, (
operationName,
bomEntryIndex,
impactPeriod))
}

d905 13
a917 13
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
int * latestPeriod)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntryLatestPeriod, (
operationName,
bomEntryIndex,
latestPeriod))
}

d921 12
a932 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
witBoolean * mandEC)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntryMandEC, (
operationName,
bomEntryIndex,
mandEC))
}
d937 13
a949 13
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
int * nSubsBomEntries)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntryNSubsBomEntries, (
operationName,
bomEntryIndex,
nSubsBomEntries))
}

d953 14
a966 14
WitRun * const     theWitRun,
const char * const consumingOperationName,
const int          bomEntryIndex,
const int          thePer,
int *              nonSubVarIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntryNonSubVarIndex, (
consumingOperationName,
bomEntryIndex,
thePer,
nonSubVarIndex))
}
d971 12
a982 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
float * * offset)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntryOffset, (
operationName,
bomEntryIndex,
offset))
}
d987 12
a998 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
double * * offset)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetBomEntryOffset, (
operationName,
bomEntryIndex,
offset))
}
d1003 12
a1014 12
WitRun * const     theWitRun,
const char * const operationName,
const int          bomEntryIndex,
witBoolean * *     propRtg)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntryPropRtg, (
operationName,
bomEntryIndex,
propRtg))
}
d1019 12
a1030 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
float * * routingShare)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntryRoutingShare, (
operationName,
bomEntryIndex,
routingShare))
}
d1035 12
a1046 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
double * * routingShare)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetBomEntryRoutingShare, (
operationName,
bomEntryIndex,
routingShare))
}
d1051 12
a1062 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
witBoolean * selForDel)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntrySelForDel, (
operationName,
bomEntryIndex,
selForDel))
}
d1067 12
a1078 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
witBoolean * singleSource)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntrySingleSource, (
operationName,
bomEntryIndex,
singleSource))
}
d1083 14
a1096 14
WitRun * const     theWitRun,
const char * const consumingOperationName,
const int          bomEntryIndex,
const int          thePer,
int *              subConIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntrySubConIndex, (
consumingOperationName,
bomEntryIndex,
thePer,
subConIndex))
}
d1101 12
a1112 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
void * * appData)
{
STANDARD_API_IMPL (
theWitRun,
witGetBopEntryAppData, (
operationName,
bopEntryIndex,
appData))
}
d1117 12
a1128 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
int * earliestPeriod)
{
STANDARD_API_IMPL (
theWitRun,
witGetBopEntryEarliestPeriod, (
operationName,
bopEntryIndex,
earliestPeriod))
}
d1133 12
a1144 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
witBoolean * expAllowed)
{
STANDARD_API_IMPL (
theWitRun,
witGetBopEntryExpAllowed, (
operationName,
bopEntryIndex,
expAllowed))
}
d1149 12
a1160 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
float * expAversion)
{
STANDARD_API_IMPL (
theWitRun,
witGetBopEntryExpAversion, (
operationName,
bopEntryIndex,
expAversion))
}
d1165 12
a1176 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
double * expAversion)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetBopEntryExpAversion, (
operationName,
bopEntryIndex,
expAversion))
}
d1181 12
a1192 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
int * * impactPeriod)
{
STANDARD_API_IMPL (
theWitRun,
witGetBopEntryImpactPeriod, (
operationName,
bopEntryIndex,
impactPeriod))
}
d1197 12
a1208 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
int * latestPeriod)
{
STANDARD_API_IMPL (
theWitRun,
witGetBopEntryLatestPeriod, (
operationName,
bopEntryIndex,
latestPeriod))
}
d1213 12
a1224 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
float * * offset)
{
STANDARD_API_IMPL (
theWitRun,
witGetBopEntryOffset, (
operationName,
bopEntryIndex,
offset))
}
d1229 12
a1240 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
double * * offset)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetBopEntryOffset, (
operationName,
bopEntryIndex,
offset))
}
d1245 12
a1256 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
float * * productRate)
{
STANDARD_API_IMPL (
theWitRun,
witGetBopEntryProductRate, (
operationName,
bopEntryIndex,
productRate))
}
d1261 12
a1272 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
double * * productRate)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetBopEntryProductRate, (
operationName,
bopEntryIndex,
productRate))
}
d1277 12
a1288 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
char * * producedPartName)
{
STANDARD_API_IMPL (
theWitRun,
witGetBopEntryProducedPart, (
operationName,
bopEntryIndex,
producedPartName))
}
d1293 12
a1304 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
float * * routingShare)
{
STANDARD_API_IMPL (
theWitRun,
witGetBopEntryRoutingShare, (
operationName,
bopEntryIndex,
routingShare))
}
d1309 12
a1320 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
double * * routingShare)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetBopEntryRoutingShare, (
operationName,
bopEntryIndex,
routingShare))
}
d1325 12
a1336 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
witBoolean * selForDel)
{
STANDARD_API_IMPL (
theWitRun,
witGetBopEntrySelForDel, (
operationName,
bopEntryIndex,
selForDel))
}
d1341 8
a1348 8
WitRun * const theWitRun,
float *        boundsValue)
{
STANDARD_API_IMPL (
theWitRun,
witGetBoundsValue, (
boundsValue))
}
d1353 8
a1360 8
WitRun * const theWitRun,
double *       boundsValue)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetBoundsValue, (
boundsValue))
}
d1365 9
a1373 9
WitRun * const theWitRun,
witBoolean * compPrices)
{
STANDARD_API_IMPL (
theWitRun,
witGetCompPrices, (
compPrices))
}

d1377 9
a1385 9
WitRun * const theWitRun,
witBoolean * computeCriticalList)
{
STANDARD_API_IMPL (
theWitRun,
witGetComputeCriticalList, (
computeCriticalList))
}

d1389 8
a1396 8
WitRun * const theWitRun,
witBoolean *   cplexEmbedded)
{
STANDARD_API_IMPL (
theWitRun,
witGetCplexEmbedded, (
cplexEmbedded))
}
d1401 9
a1409 9
WitRun * const theWitRun,
float * cplexMipBound)
{
STANDARD_API_IMPL (
theWitRun,
witGetCplexMipBound, (
cplexMipBound))
}

d1413 9
a1421 9
WitRun * const theWitRun,
double * cplexMipBound)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetCplexMipBound, (
cplexMipBound))
}

d1425 9
a1433 9
WitRun * const theWitRun,
float * cplexMipRelGap)
{
STANDARD_API_IMPL (
theWitRun,
witGetCplexMipRelGap, (
cplexMipRelGap))
}

d1437 9
a1445 9
WitRun * const theWitRun,
double * cplexMipRelGap)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetCplexMipRelGap, (
cplexMipRelGap))
}

d1449 9
a1457 9
WitRun * const theWitRun,
float * cplexParSpecDblVal)
{
STANDARD_API_IMPL (
theWitRun,
witGetCplexParSpecDblVal, (
cplexParSpecDblVal))
}

d1461 9
a1469 9
WitRun * const theWitRun,
double * cplexParSpecDblVal)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetCplexParSpecDblVal, (
cplexParSpecDblVal))
}

d1473 9
a1481 9
WitRun * const theWitRun,
int * cplexParSpecIntVal)
{
STANDARD_API_IMPL (
theWitRun,
witGetCplexParSpecIntVal, (
cplexParSpecIntVal))
}

d1485 9
a1493 9
WitRun * const theWitRun,
char * * cplexParSpecName)
{
STANDARD_API_IMPL (
theWitRun,
witGetCplexParSpecName, (
cplexParSpecName))
}

d1497 9
a1505 9
WitRun * const theWitRun,
int *          cplexStatusCode)
{
STANDARD_API_IMPL (
theWitRun,
witGetCplexStatusCode, (
cplexStatusCode))
}

d1509 9
a1517 9
WitRun * const theWitRun,
char * *       cplexStatusText)
{
STANDARD_API_IMPL (
theWitRun,
witGetCplexStatusText, (
cplexStatusText))
}

d1521 13
a1533 13
WitRun * const theWitRun,
int * lenCritList,
char * * * critPartList,
int * * critPeriod)
{
STANDARD_API_IMPL (
theWitRun,
witGetCriticalList, (
lenCritList,
critPartList,
critPeriod))
}

d1537 9
a1545 9
WitRun * const theWitRun,
char * * theObjName)
{
STANDARD_API_IMPL (
theWitRun,
witGetCurrentObjective, (
theObjName))
}

d1549 9
a1557 9
WitRun * const theWitRun,
int * currentScenario)
{
STANDARD_API_IMPL (
theWitRun,
witGetCurrentScenario, (
currentScenario))
}

d1561 12
a1572 12
WitRun * const     theWitRun,
const char * const theName,
witBoolean *       dblSpecExists,
float *            theValue)
{
STANDARD_API_IMPL (
theWitRun,
witGetDblCplexParSpec, (
theName,
dblSpecExists,
theValue))
}
d1577 12
a1588 12
WitRun * const     theWitRun,
const char * const theName,
witBoolean *       dblSpecExists,
double *           theValue)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDblCplexParSpec, (
theName,
dblSpecExists,
theValue))
}
d1593 12
a1604 12
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
void * * appData)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandAppData, (
demandedPartName,
demandName,
appData))
}
d1609 22
a1630 22
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          shipPeriod,
int *              lenLists,
char * * *         operationNameList,
int * *            bopEntryIndexList,
int * *            execPeriodList,
float * *          peggedVolList)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandCoExecVolPip, (
partName,
demandName,
shipPeriod,
lenLists,
operationNameList,
bopEntryIndexList,
execPeriodList,
peggedVolList))
}
d1635 22
a1656 22
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          shipPeriod,
int *              lenLists,
char * * *         operationNameList,
int * *            bopEntryIndexList,
int * *            execPeriodList,
double * *         peggedVolList)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDemandCoExecVolPip, (
partName,
demandName,
shipPeriod,
lenLists,
operationNameList,
bopEntryIndexList,
execPeriodList,
peggedVolList))
}
d1661 20
a1680 20
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          shipPeriod,
int *              lenLists,
char * * *         partNameList,
int * *            periodList,
float * *          peggedVolList)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandConsVolPip, (
partName,
demandName,
shipPeriod,
lenLists,
partNameList,
periodList,
peggedVolList))
}
d1685 20
a1704 20
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          shipPeriod,
int *              lenLists,
char * * *         partNameList,
int * *            periodList,
double * *         peggedVolList)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDemandConsVolPip, (
partName,
demandName,
shipPeriod,
lenLists,
partNameList,
periodList,
peggedVolList))
}
d1709 16
a1724 16
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
float * * hardLower,
float * * softLower,
float * * hardUpper)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandCumShipBounds, (
demandedPartName,
demandName,
hardLower,
softLower,
hardUpper))
}
d1729 16
a1744 16
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
double * * hardLower,
double * * softLower,
double * * hardUpper)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDemandCumShipBounds, (
demandedPartName,
demandName,
hardLower,
softLower,
hardUpper))
}
d1749 13
a1761 13
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
float * * cumShipReward)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandCumShipReward, (
demandedPartName,
demandName,
cumShipReward))
}

d1765 13
a1777 13
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
double * * cumShipReward)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDemandCumShipReward, (
demandedPartName,
demandName,
cumShipReward))
}

d1781 14
a1794 14
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          thePer,
int *              cumShipSlbConIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandCumShipSlbConIndex, (
partName,
demandName,
thePer,
cumShipSlbConIndex))
}
d1799 14
a1812 14
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          thePer,
int *              cumShipSlbvVarIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandCumShipSlbvVarIndex, (
partName,
demandName,
thePer,
cumShipSlbvVarIndex))
}
d1817 14
a1830 14
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          thePer,
int *              cumShipVarIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandCumShipVarIndex, (
partName,
demandName,
thePer,
cumShipVarIndex))
}
d1835 13
a1847 13
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
float * * demandVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandDemandVol, (
demandedPartName,
demandName,
demandVol))
}

d1851 13
a1863 13
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
double * * demandVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDemandDemandVol, (
demandedPartName,
demandName,
demandVol))
}

d1867 20
a1886 20
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
const int shipPeriod,
int * lenLists,
char * * * operationNameList,
int * * execPeriodList,
float * * peggedExecVolList)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandExecVolPegging, (
demandedPartName,
demandName,
shipPeriod,
lenLists,
operationNameList,
execPeriodList,
peggedExecVolList))
}
d1891 20
a1910 20
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
const int shipPeriod,
int * lenLists,
char * * * operationNameList,
int * * execPeriodList,
double * * peggedExecVolList)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDemandExecVolPegging, (
demandedPartName,
demandName,
shipPeriod,
lenLists,
operationNameList,
execPeriodList,
peggedExecVolList))
}
d1915 20
a1934 20
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          shipPeriod,
int *              lenLists,
char * * *         operationNameList,
int * *            execPeriodList,
float * *          peggedExecVolList)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandExecVolPip, (
partName,
demandName,
shipPeriod,
lenLists,
operationNameList,
execPeriodList,
peggedExecVolList))
}
d1939 20
a1958 20
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          shipPeriod,
int *              lenLists,
char * * *         operationNameList,
int * *            execPeriodList,
double * *         peggedExecVolList)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDemandExecVolPip, (
partName,
demandName,
shipPeriod,
lenLists,
operationNameList,
execPeriodList,
peggedExecVolList))
}
d1963 12
a1974 12
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
int * focusHorizon)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandFocusHorizon, (
demandedPartName,
demandName,
focusHorizon))
}
d1979 13
a1991 13
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
float * * fssShipVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandFssShipVol, (
demandedPartName,
demandName,
fssShipVol))
}

d1996 13
a2008 13
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
double * * fssShipVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDemandFssShipVol, (
demandedPartName,
demandName,
fssShipVol))
}

d2012 12
a2023 12
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
int * intShipVols)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandIntShipVols, (
partName,
demandName,
intShipVols))
}
d2028 12
a2039 12
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
int * * leadTimeUB)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandLeadTimeUB, (
demandedPartName,
demandName,
leadTimeUB))
}
d2044 12
a2055 12
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
int * * priority)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandPriority, (
demandedPartName,
demandName,
priority))
}
d2060 20
a2079 20
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          shipPeriod,
int *              lenLists,
char * * *         partNameList,
int * *            periodList,
float * *          peggedVolList)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandProdVolPip, (
partName,
demandName,
shipPeriod,
lenLists,
partNameList,
periodList,
peggedVolList))
}
d2084 20
a2103 20
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          shipPeriod,
int *              lenLists,
char * * *         partNameList,
int * *            periodList,
double * *         peggedVolList)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDemandProdVolPip, (
partName,
demandName,
shipPeriod,
lenLists,
partNameList,
periodList,
peggedVolList))
}
d2108 12
a2119 12
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
float * searchInc)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandSearchInc, (
demandedPartName,
demandName,
searchInc))
}
d2124 12
a2135 12
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
double * searchInc)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDemandSearchInc, (
demandedPartName,
demandName,
searchInc))
}
d2140 12
a2151 12
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
int * selForDel)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandSelForDel, (
demandedPartName,
demandName,
selForDel))
}
d2156 14
a2169 14
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          thePer,
int *              shipConIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandShipConIndex, (
partName,
demandName,
thePer,
shipConIndex))
}
d2174 14
a2187 14
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          thePer,
int *              shipVarIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandShipVarIndex, (
partName,
demandName,
thePer,
shipVarIndex))
}
d2192 12
a2203 12
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
int * shipLateAllowed)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandShipLateAllowed, (
partName,
demandName,
shipLateAllowed))
}
d2208 12
a2219 12
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
int * * shipLateUB)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandShipLateUB, (
demandedPartName,
demandName,
shipLateUB))
}
d2224 12
a2235 12
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
float * * shipReward)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandShipReward, (
demandedPartName,
demandName,
shipReward))
}
d2240 12
a2251 12
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
double * * shipReward)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDemandShipReward, (
demandedPartName,
demandName,
shipReward))
}
d2256 13
a2268 13
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
float * * shipVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandShipVol, (
demandedPartName,
demandName,
shipVol))
}

d2272 13
a2284 13
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
double * * shipVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDemandShipVol, (
demandedPartName,
demandName,
shipVol))
}

d2288 20
a2307 20
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          shipPeriod,
int *              lenLists,
char * * *         partNameList,
int * *            periodList,
float * *          peggedVolList)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandSideVolPip, (
partName,
demandName,
shipPeriod,
lenLists,
partNameList,
periodList,
peggedVolList))
}
d2312 20
a2331 20
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          shipPeriod,
int *              lenLists,
char * * *         partNameList,
int * *            periodList,
double * *         peggedVolList)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDemandSideVolPip, (
partName,
demandName,
shipPeriod,
lenLists,
partNameList,
periodList,
peggedVolList))
}
d2336 24
a2359 24
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
const int shipPeriod,
int * lenLists,
char * * * operationNameList,
int * * execPeriodList,
int * * bomEntryIndexList,
int * * subsBomEntryIndexList,
float * * peggedSubVolList)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandSubVolPegging, (
demandedPartName,
demandName,
shipPeriod,
lenLists,
operationNameList,
execPeriodList,
bomEntryIndexList,
subsBomEntryIndexList,
peggedSubVolList))
}
d2364 24
a2387 24
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
const int shipPeriod,
int * lenLists,
char * * * operationNameList,
int * * execPeriodList,
int * * bomEntryIndexList,
int * * subsBomEntryIndexList,
double * * peggedSubVolList)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDemandSubVolPegging, (
demandedPartName,
demandName,
shipPeriod,
lenLists,
operationNameList,
execPeriodList,
bomEntryIndexList,
subsBomEntryIndexList,
peggedSubVolList))
}
d2392 24
a2415 24
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          shipPeriod,
int *              lenLists,
char * * *         operationNameList,
int * *            bomEntryIndexList,
int * *            subsBomEntryIndexList,
int * *            execPeriodList,
float * *          peggedSubVolList)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandSubVolPip, (
partName,
demandName,
shipPeriod,
lenLists,
operationNameList,
bomEntryIndexList,
subsBomEntryIndexList,
execPeriodList,
peggedSubVolList))
}
d2420 24
a2443 24
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          shipPeriod,
int *              lenLists,
char * * *         operationNameList,
int * *            bomEntryIndexList,
int * *            subsBomEntryIndexList,
int * *            execPeriodList,
double * *         peggedSubVolList)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDemandSubVolPip, (
partName,
demandName,
shipPeriod,
lenLists,
operationNameList,
bomEntryIndexList,
subsBomEntryIndexList,
execPeriodList,
peggedSubVolList))
}
d2448 20
a2467 20
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          shipPeriod,
int *              lenLists,
char * * *         partNameList,
int * *            periodList,
float * *          peggedVolList)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandSupplyVolPip, (
partName,
demandName,
shipPeriod,
lenLists,
partNameList,
periodList,
peggedVolList))
}
d2472 20
a2491 20
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const int          shipPeriod,
int *              lenLists,
char * * *         partNameList,
int * *            periodList,
double * *         peggedVolList)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDemandSupplyVolPip, (
partName,
demandName,
shipPeriod,
lenLists,
partNameList,
periodList,
peggedVolList))
}
d2496 8
a2503 8
WitRun * const theWitRun,
int * equitablity)
{
STANDARD_API_IMPL (
theWitRun,
witGetEquitability, (
equitablity))
}
d2508 9
a2516 9
WitRun * const theWitRun,
witBoolean * execEmptyBom)
{
STANDARD_API_IMPL (
theWitRun,
witGetExecEmptyBom, (
execEmptyBom))
}

d2520 9
a2528 9
WitRun * const theWitRun,
float * expCutoff)
{
STANDARD_API_IMPL (
theWitRun,
witGetExpCutoff, (
expCutoff))
}

d2532 9
a2540 9
WitRun * const theWitRun,
double * expCutoff)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetExpCutoff, (
expCutoff))
}

d2544 8
a2551 8
WitRun * const theWitRun,
witBoolean *   extOptActive)
{
STANDARD_API_IMPL (
theWitRun,
witGetExtOptActive, (
extOptActive))
}
d2556 12
a2567 12
WitRun * const theWitRun,
int *          lenLists,
char * * *     partNameList,
char * * *     operationNameList)
{
STANDARD_API_IMPL (
theWitRun,
witGetExpCycle, (
lenLists,
partNameList,
operationNameList))
}
d2572 10
a2581 10
WitRun * const theWitRun,
int * *        indices,
int *          len)
{
STANDARD_API_IMPL (
theWitRun,
witGetExtOptIntVarIndices, (
indices,
len))
}
d2586 26
a2611 26
WitRun * const theWitRun,
int *          numcols,
int *          numrows,
int * *        start,
int * *        index,
float * *      value,
float * *      collb,
float * *      colub,
float * *      obj,
float * *      rowlb,
float * *      rowub)
{
STANDARD_API_IMPL (
theWitRun,
witGetExtOptLpProb, (
numcols,
numrows,
start,
index,
value,
collb,
colub,
obj,
rowlb,
rowub))
}
d2616 26
a2641 26
WitRun * const theWitRun,
int *          numcols,
int *          numrows,
int * *        start,
int * *        index,
double * *     value,
double * *     collb,
double * *     colub,
double * *     obj,
double * *     rowlb,
double * *     rowub)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetExtOptLpProb, (
numcols,
numrows,
start,
index,
value,
collb,
colub,
obj,
rowlb,
rowub))
}
d2646 9
a2654 9
WitRun * const theWitRun,
witBoolean * feasible)
{
STANDARD_API_IMPL (
theWitRun,
witGetFeasible, (
feasible))
}

d2658 12
a2669 12
WitRun * const theWitRun,
int *          lenList,
char * * *     partList,
float * * *    shortageVolList )
{
STANDARD_API_IMPL (
theWitRun,
witGetFocusShortageVol, (
lenList,
partList,
shortageVolList))
}
d2674 12
a2685 12
WitRun * const theWitRun,
int *          lenList,
char * * *     partList,
double * * *   shortageVolList )
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetFocusShortageVol, (
lenList,
partList,
shortageVolList))
}
d2690 8
a2697 8
WitRun * const theWitRun,
witBoolean * forcedMultiEq)
{
STANDARD_API_IMPL (
theWitRun,
witGetForcedMultiEq, (
forcedMultiEq))
}
d2702 8
a2709 8
WitRun * const theWitRun,
witBoolean * heurAllocActive)
{
STANDARD_API_IMPL (
theWitRun,
witGetHeurAllocActive, (
heurAllocActive))
}
d2714 8
a2721 8
WitRun * const theWitRun,
witBoolean * highPrecisionWD)
{
STANDARD_API_IMPL (
theWitRun,
witGetHighPrecisionWD, (
highPrecisionWD))
}
d2726 8
a2733 8
WitRun * const theWitRun,
witBoolean * independentOffsets)
{
STANDARD_API_IMPL (
theWitRun,
witGetIndependentOffsets, (
independentOffsets))
}
d2738 12
a2749 12
WitRun * const     theWitRun,
const char * const theName,
witBoolean *       intSpecExists,
int *              theValue)
{
STANDARD_API_IMPL (
theWitRun,
witGetIntCplexParSpec, (
theName,
intSpecExists,
theValue))
}
d2754 9
a2762 9
WitRun * const theWitRun,
float * lotSizeTol)
{
STANDARD_API_IMPL (
theWitRun,
witGetLotSizeTol, (
lotSizeTol))
}

d2766 9
a2774 9
WitRun * const theWitRun,
double * lotSizeTol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetLotSizeTol, (
lotSizeTol))
}

d2778 9
a2786 9
WitRun * const theWitRun,
FILE * * mesgFile)
{
STANDARD_API_IMPL (
theWitRun,
witGetMesgFile, (
mesgFile))
}

d2790 9
a2798 9
WitRun * const theWitRun,
char * * mesgFileAccessMode)
{
STANDARD_API_IMPL (
theWitRun,
witGetMesgFileAccessMode, (
mesgFileAccessMode))
}

d2802 9
a2810 9
WitRun * const theWitRun,
char * * mesgFileName)
{
STANDARD_API_IMPL (
theWitRun,
witGetMesgFileName, (
mesgFileName))
}

d2814 11
a2824 11
WitRun * const theWitRun,
const int messageNumber,
witBoolean * mesgPrintMunber)
{
STANDARD_API_IMPL (
theWitRun,
witGetMesgPrintNumber, (
messageNumber,
mesgPrintMunber))
}

d2828 11
a2838 11
WitRun * const theWitRun,
const int messageNumber,
witBoolean * mesgStopRunning)
{
STANDARD_API_IMPL (
theWitRun,
witGetMesgStopRunning, (
messageNumber,
mesgStopRunning))
}

d2842 11
a2852 11
WitRun * const theWitRun,
const int messageNumber,
witBoolean * mesgThrowErrorExc)
{
STANDARD_API_IMPL (
theWitRun,
witGetMesgThrowErrorExc, (
messageNumber,
mesgThrowErrorExc))
}

d2856 10
a2865 10
WitRun * const theWitRun,
const int messageNumber,
int * mesgTimesPrint)
{
STANDARD_API_IMPL (
theWitRun,
witGetMesgTimesPrint, (
messageNumber,
mesgTimesPrint))
}
d2870 8
a2877 8
WitRun * const theWitRun,
witBoolean * minimalExcess)
{
STANDARD_API_IMPL (
theWitRun,
witGetMinimalExcess, (
minimalExcess))
}
d2882 9
a2890 9
WitRun * const theWitRun,
witBoolean * mipMode)
{
STANDARD_API_IMPL (
theWitRun,
witGetMipMode, (
mipMode))
}

d2894 8
a2901 8
WitRun * const theWitRun,
witBoolean * modHeurAlloc)
{
STANDARD_API_IMPL (
theWitRun,
witGetModHeurAlloc, (
modHeurAlloc))
}
d2906 8
a2913 8
WitRun * const theWitRun,
witBoolean * multiExec)
{
STANDARD_API_IMPL (
theWitRun,
witGetMultiExec, (
multiExec))
}
d2918 9
a2926 9
WitRun * const theWitRun,
witBoolean * multiObjMode)
{
STANDARD_API_IMPL (
theWitRun,
witGetMultiObjMode, (
multiObjMode))
}

d2930 9
a2938 9
WitRun * const theWitRun,
float * multiObjTol)
{
STANDARD_API_IMPL (
theWitRun,
witGetMultiObjTol, (
multiObjTol))
}

d2942 9
a2950 9
WitRun * const theWitRun,
double * multiObjTol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetMultiObjTol, (
multiObjTol))
}

d2954 8
a2961 8
WitRun * const theWitRun,
witBoolean * multiRoute)
{
STANDARD_API_IMPL (
theWitRun,
witGetMultiRoute, (
multiRoute))
}
d2966 9
a2974 9
WitRun * const theWitRun,
int * nPeriods)
{
STANDARD_API_IMPL (
theWitRun,
witGetNPeriods, (
nPeriods))
}

d2978 9
a2986 9
WitRun * const theWitRun,
int * nScenarios)
{
STANDARD_API_IMPL (
theWitRun,
witGetNScenarios, (
nScenarios))
}

d2990 8
a2997 8
WitRun * const theWitRun,
witBoolean * nstnResidual)
{
STANDARD_API_IMPL (
theWitRun,
witGetNstnResidual, (
nstnResidual))
}
d3002 10
a3011 10
WitRun * const theWitRun,
char * * consumingOperationName,
int * bomEntryIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetObjItrBomEntry, (
consumingOperationName,
bomEntryIndex))
}
d3016 10
a3025 10
WitRun * const theWitRun,
char * * producingOperationName,
int * bopEntryIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetObjItrBopEntry, (
producingOperationName,
bopEntryIndex))
}
d3030 10
a3039 10
WitRun * const theWitRun,
char * * demandedPartName,
char * * demandName)
{
STANDARD_API_IMPL (
theWitRun,
witGetObjItrDemand, (
demandedPartName,
demandName))
}
d3044 8
a3051 8
WitRun * const theWitRun,
char * * operationName)
{
STANDARD_API_IMPL (
theWitRun,
witGetObjItrOperation, (
operationName))
}
d3056 8
a3063 8
WitRun * const theWitRun,
char * * partName)
{
STANDARD_API_IMPL (
theWitRun,
witGetObjItrPart, (
partName))
}
d3068 8
a3075 8
WitRun * const theWitRun,
witAttr * objItrState)
{
STANDARD_API_IMPL (
theWitRun,
witGetObjItrState, (
objItrState))
}
d3080 12
a3091 12
WitRun * const theWitRun,
char * * consumingOperationName,
int * bomEntryIndex,
int * subsBomEntryIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetObjItrSubsBomEntry, (
consumingOperationName,
bomEntryIndex,
subsBomEntryIndex))
}
d3096 8
a3103 8
WitRun * const theWitRun,
float *        objValue)
{
STANDARD_API_IMPL (
theWitRun,
witGetObjValue, (
objValue))
}
d3108 8
a3115 8
WitRun * const theWitRun,
double *       objValue)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetObjValue, (
objValue))
}
d3120 10
a3129 10
WitRun * const theWitRun,
float * objValue,
float * boundsValue)
{
STANDARD_API_IMPL (
theWitRun,
witGetObjValues, (
objValue,
boundsValue))
}
d3134 10
a3143 10
WitRun * const theWitRun,
double * objValue,
double * boundsValue)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetObjValues, (
objValue,
boundsValue))
}
d3148 10
a3157 10
WitRun * const theWitRun,
int  *         lenList,
char * * *     objectiveList)
{
STANDARD_API_IMPL (
theWitRun,
witGetObjectiveList, (
lenList,
objectiveList))
}
d3162 8
a3169 8
WitRun * const theWitRun,
char * * objectiveListSpec)
{
STANDARD_API_IMPL (
theWitRun,
witGetObjectiveListSpec, (
objectiveListSpec))
}
d3174 9
a3182 9
WitRun * const theWitRun,
int * objectiveRank)
{
STANDARD_API_IMPL (
theWitRun,
witGetObjectiveRank, (
objectiveRank))
}

d3186 10
a3195 10
WitRun * const theWitRun,
const char * const operationName,
void * * appData)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationAppData, (
operationName,
appData))
}
d3200 14
a3213 14
WitRun * const theWitRun,
const char * const operationName,
float * * hardLower,
float * * softLower,
float * * hardUpper)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationExecBounds, (
operationName,
hardLower,
softLower,
hardUpper))
}
d3218 14
a3231 14
WitRun * const theWitRun,
const char * const operationName,
double * * hardLower,
double * * softLower,
double * * hardUpper)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetOperationExecBounds, (
operationName,
hardLower,
softLower,
hardUpper))
}
d3236 10
a3245 10
WitRun * const theWitRun,
const char * const operationName,
float * * execCost)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationExecCost, (
operationName,
execCost))
}
d3250 10
a3259 10
WitRun * const theWitRun,
const char * const operationName,
double * * execCost)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetOperationExecCost, (
operationName,
execCost))
}
d3264 10
a3273 10
WitRun * const theWitRun,
const char * const operationName,
float * execPenalty)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationExecPenalty, (
operationName,
execPenalty))
}
d3278 10
a3287 10
WitRun * const theWitRun,
const char * const operationName,
double * execPenalty)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetOperationExecPenalty, (
operationName,
execPenalty))
}
d3292 12
a3303 12
WitRun * const     theWitRun,
const char * const operationName,
const int          thePer,
int *              execSlbConIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationExecSlbConIndex, (
operationName,
thePer,
execSlbConIndex))
}
d3308 12
a3319 12
WitRun * const     theWitRun,
const char * const operationName,
const int          thePer,
int *              execSlbvVarIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationExecSlbvVarIndex, (
operationName,
thePer,
execSlbvVarIndex))
}
d3324 12
a3335 12
WitRun * const     theWitRun,
const char * const operationName,
const int          thePer,
int *              execVarIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationExecVarIndex, (
operationName,
thePer,
execVarIndex))
}
d3340 10
a3349 10
WitRun * const theWitRun,
const char * const operationName,
float * * execVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationExecVol, (
operationName,
execVol))
}
d3354 10
a3363 10
WitRun * const theWitRun,
const char * const operationName,
double * * execVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetOperationExecVol, (
operationName,
execVol))
}
d3368 10
a3377 10
WitRun * const theWitRun,
const char * const operationName,
witBoolean * * execVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationExecutable, (
operationName,
execVol))
}
d3382 10
a3391 10
WitRun * const theWitRun,
const char * const operationName,
witBoolean * exists)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationExists, (
operationName,
exists))
}
d3396 10
a3405 10
WitRun * const theWitRun,
const char * const operationName,
float * * fssExecVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationFssExecVol, (
operationName,
fssExecVol))
}
d3410 10
a3419 10
WitRun * const theWitRun,
const char * const operationName,
double * * fssExecVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetOperationFssExecVol, (
operationName,
fssExecVol))
}
d3424 10
a3433 10
WitRun * const theWitRun,
const char * const operationName,
float * * incLotSize)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationIncLotSize, (
operationName,
incLotSize))
}
d3438 10
a3447 10
WitRun * const theWitRun,
const char * const operationName,
double * * incLotSize)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetOperationIncLotSize, (
operationName,
incLotSize))
}
d3452 10
a3461 10
WitRun * const theWitRun,
const char * const operationName,
float * * incLotSize2)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationIncLotSize2, (
operationName,
incLotSize2))
}
d3466 10
a3475 10
WitRun * const theWitRun,
const char * const operationName,
double * * incLotSize2)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetOperationIncLotSize2, (
operationName,
incLotSize2))
}
d3480 10
a3489 10
WitRun * const theWitRun,
const char * const operationName,
witBoolean * intExecVols)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationIntExecVols, (
operationName,
intExecVols))
}
d3494 10
a3503 10
WitRun * const theWitRun,
const char * const operationName,
float * * lotSize2Thresh)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationLotSize2Thresh, (
operationName,
lotSize2Thresh))
}
d3508 10
a3517 10
WitRun * const theWitRun,
const char * const operationName,
double * * lotSize2Thresh)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetOperationLotSize2Thresh, (
operationName,
lotSize2Thresh))
}
d3522 10
a3531 10
WitRun * const theWitRun,
const char * const operationName,
float * * minLotSize)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationMinLotSize, (
operationName,
minLotSize))
}
d3536 10
a3545 10
WitRun * const theWitRun,
const char * const operationName,
double * * minLotSize)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetOperationMinLotSize, (
operationName,
minLotSize))
}
d3550 10
a3559 10
WitRun * const theWitRun,
const char * const operationName,
float * * minLotSize2)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationMinLotSize2, (
operationName,
minLotSize2))
}
d3564 10
a3573 10
WitRun * const theWitRun,
const char * const operationName,
double * * minLotSize2)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetOperationMinLotSize2, (
operationName,
minLotSize2))
}
d3578 10
a3587 10
WitRun * const theWitRun,
const char * const operationName,
float * * mrpExecVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationMrpExecVol, (
operationName,
mrpExecVol))
}
d3592 10
a3601 10
WitRun * const theWitRun,
const char * const operationName,
double * * mrpExecVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetOperationMrpExecVol, (
operationName,
mrpExecVol))
}
d3606 10
a3615 10
WitRun * const theWitRun,
const char * const operationName,
int * nBomEntries)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationNBomEntries, (
operationName,
nBomEntries))
}
d3620 10
a3629 10
WitRun * const theWitRun,
const char * const operationName,
int * nBopEntries)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationNBopEntries, (
operationName,
nBopEntries))
}
d3634 10
a3643 10
WitRun * const theWitRun,
const char * const operationName,
int * objectStage)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationObjectStage, (
operationName,
objectStage))
}
d3648 10
a3657 10
WitRun * const theWitRun,
const char * const operationName,
witBoolean * selForDel)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationSelForDel, (
operationName,
selForDel))
}
d3662 10
a3671 10
WitRun * const theWitRun,
int * lenOperationList,
char * * * operationList)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperations, (
lenOperationList,
operationList))
}
d3676 10
a3685 10
WitRun * const theWitRun,
const char * const operationName,
witBoolean * twoLevelLotSizes)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationTwoLevelLotSizes, (
operationName,
twoLevelLotSizes))
}
d3690 10
a3699 10
WitRun * const theWitRun,
const char * const operationName,
float * * yieldRate)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationYieldRate, (
operationName,
yieldRate))
}
d3704 10
a3713 10
WitRun * const theWitRun,
const char * const operationName,
double * * yieldRate)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetOperationYieldRate, (
operationName,
yieldRate))
}
d3718 9
a3726 9
WitRun * const theWitRun,
witAttr * optInitMethod)
{
STANDARD_API_IMPL (
theWitRun,
witGetOptInitMethod, (
optInitMethod))
}

d3730 9
a3738 9
WitRun * const theWitRun,
int * outputPrecision)
{
STANDARD_API_IMPL (
theWitRun,
witGetOutputPrecision, (
outputPrecision))
}

d3742 8
a3749 8
WitRun * const theWitRun,
witBoolean * postprocessed)
{
STANDARD_API_IMPL (
theWitRun,
witGetPostprocessed, (
postprocessed))
}
d3754 11
a3764 11
WitRun * const theWitRun,
const char * const partName,
void * * appData)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartAppData, (
partName,
appData))
}

d3768 10
a3777 10
WitRun * const theWitRun,
const char * const partName,
witBoolean * asapPipOrder)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartAsapPipOrder, (
partName,
asapPipOrder))
}
d3782 12
a3793 12
WitRun * const theWitRun,
const char * const partName,
int * lenList,
char * * * partNameList)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartBelowList, (
partName,
lenList,
partNameList))
}
d3798 10
a3807 10
WitRun * const theWitRun,
const char * const partName,
witBoolean * boundedLeadTimes)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartBoundedLeadTimes, (
partName,
boundedLeadTimes))
}
d3812 10
a3821 10
WitRun * const theWitRun,
const char * const partName,
int * * buildAheadUB)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartBuildAheadUB, (
partName,
buildAheadUB))
}
d3826 10
a3835 10
WitRun * const theWitRun,
const char * const partName,
witBoolean * buildAsap)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartBuildAsap, (
partName,
buildAsap))
}
d3840 10
a3849 10
WitRun * const theWitRun,
const char * const partName,
witBoolean * buildNstn)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartBuildNstn, (
partName,
buildNstn))
}
d3854 10
a3863 10
WitRun * const theWitRun,
const char * const partName,
float * * consVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartConsVol, (
partName,
consVol))
}
d3868 10
a3877 10
WitRun * const theWitRun,
const char * const partName,
double * * consVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPartConsVol, (
partName,
consVol))
}
d3882 14
a3895 14
WitRun * const theWitRun,
const char * const partName,
const int consIndex,
char * * consumingOperationName,
int * bomEntryIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartConsumingBomEntry, (
partName,
consIndex,
consumingOperationName,
bomEntryIndex))
}
d3900 16
a3915 16
WitRun * const theWitRun,
const char * const partName,
const int consIndex,
char * * consumingOperationName,
int * bomEntryIndex,
int * subsBomEntryIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartConsumingSubsBomEntry, (
partName,
consIndex,
consumingOperationName,
bomEntryIndex,
subsBomEntryIndex))
}
d3920 13
a3932 13
WitRun * const theWitRun,
const char * const partName,
int * lenDemandList,
char * * * demandList)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartDemands, (
partName,
lenDemandList,
demandList))
}

d3936 11
a3946 11
WitRun * const theWitRun,
const char * const partName,
witAttr * category)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartCategory, (
partName,
category))
}

d3950 10
a3959 10
WitRun * const theWitRun,
const char * const partName,
float * * excessVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartExcessVol, (
partName,
excessVol))
}
d3964 10
a3973 10
WitRun * const theWitRun,
const char * const partName,
double * * excessVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPartExcessVol, (
partName,
excessVol))
}
d3978 10
a3987 10
WitRun * const theWitRun,
const char * const partName,
witBoolean * exists)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartExists, (
partName,
exists))
}
d3992 10
a4001 10
WitRun * const theWitRun,
const char * const partName,
float * * shortageVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartFocusShortageVol, (
partName,
shortageVol))
}
d4006 10
a4015 10
WitRun * const theWitRun,
const char * const partName,
double * * shortageVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPartFocusShortageVol, (
partName,
shortageVol))
}
d4020 10
a4029 10
WitRun * const theWitRun,
const char * const partName,
float * * mrpConsVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartMrpConsVol, (
partName,
mrpConsVol))
}
d4034 10
a4043 10
WitRun * const theWitRun,
const char * const partName,
double * * mrpConsVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPartMrpConsVol, (
partName,
mrpConsVol))
}
d4048 10
a4057 10
WitRun * const theWitRun,
const char * const partName,
float * * mrpExcessVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartMrpExcessVol, (
partName,
mrpExcessVol))
}
d4062 10
a4071 10
WitRun * const theWitRun,
const char * const partName,
double * * mrpExcessVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPartMrpExcessVol, (
partName,
mrpExcessVol))
}
d4076 10
a4085 10
WitRun * const theWitRun,
const char * const partName,
float * * mrpResidualVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartMrpResidualVol, (
partName,
mrpResidualVol))
}
d4090 10
a4099 10
WitRun * const theWitRun,
const char * const partName,
double * * mrpResidualVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPartMrpResidualVol, (
partName,
mrpResidualVol))
}
d4104 10
a4113 10
WitRun * const theWitRun,
const char * const partName,
int * nConsumingBomEntries)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartNConsumingBomEntries, (
partName,
nConsumingBomEntries))
}
d4118 10
a4127 10
WitRun * const theWitRun,
const char * const partName,
int * nConsumingSubsBomEntries)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartNConsumingSubsBomEntries, (
partName,
nConsumingSubsBomEntries))
}
d4132 10
a4141 10
WitRun * const theWitRun,
const char * const partName,
int * nProducingBopEntries)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartNProducingBopEntries, (
partName,
nProducingBopEntries))
}
d4146 10
a4155 10
WitRun * const     theWitRun,
const char * const partName,
int *              objectStage)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartObjectStage, (
partName,
objectStage))
}
d4160 10
a4169 10
WitRun * const theWitRun,
const char * const partName,
float * * prodVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartProdVol, (
partName,
prodVol))
}
d4174 10
a4183 10
WitRun * const theWitRun,
const char * const partName,
double * * prodVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPartProdVol, (
partName,
prodVol))
}
d4188 14
a4201 14
WitRun * const theWitRun,
const char * const partName,
const int prodIndex,
char * * producingOperationName,
int * bopEntryIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartProducingBopEntry, (
partName,
prodIndex,
producingOperationName,
bopEntryIndex))
}
d4206 10
a4215 10
WitRun * const     theWitRun,
const char * const partName,
witBoolean * *     propRtg)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartPropRtg, (
partName,
propRtg))
}
d4220 11
a4230 11
WitRun * const theWitRun,
const char * const partName,
float * * reqVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartReqVol, (
partName,
reqVol))
}

d4234 11
a4244 11
WitRun * const theWitRun,
const char * const partName,
double * * reqVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPartReqVol, (
partName,
reqVol))
}

d4248 10
a4257 10
WitRun * const theWitRun,
const char * const partName,
float * * residualVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartResidualVol, (
partName,
residualVol))
}
d4262 10
a4271 10
WitRun * const theWitRun,
const char * const partName,
double * * residualVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPartResidualVol, (
partName,
residualVol))
}
d4276 12
a4287 12
WitRun * const     theWitRun,
const char * const partName,
const int          thePer,
int *              resourceConIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartResourceConIndex, (
partName,
thePer,
resourceConIndex))
}
d4292 11
a4302 11
WitRun * const theWitRun,
const char * const partName,
witBoolean * scrapAllowed)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartScrapAllowed, (
partName,
scrapAllowed))
}

d4306 11
a4316 11
WitRun * const theWitRun,
const char * const partName,
float * * scrapCost)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartScrapCost, (
partName,
scrapCost))
}

d4320 11
a4330 11
WitRun * const theWitRun,
const char * const partName,
double * * scrapCost)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPartScrapCost, (
partName,
scrapCost))
}

d4334 12
a4345 12
WitRun * const     theWitRun,
const char * const partName,
const int          thePer,
int *              scrapVarIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartScrapVarIndex, (
partName,
thePer,
scrapVarIndex))
}
d4350 11
a4360 11
WitRun * const theWitRun,
const char * const partName,
float * * scrapVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartScrapVol, (
partName,
scrapVol))
}

d4364 11
a4374 11
WitRun * const theWitRun,
const char * const partName,
double * * scrapVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPartScrapVol, (
partName,
scrapVol))
}

d4378 10
a4387 10
WitRun * const theWitRun,
const char * const partName,
witBoolean * selForDel)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartSelForDel, (
partName,
selForDel))
}
d4392 11
a4402 11
WitRun * const theWitRun,
const char * const partName,
float * * shadowPrice)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartShadowPrice, (
partName,
shadowPrice))
}

d4406 11
a4416 11
WitRun * const theWitRun,
const char * const partName,
double * * shadowPrice)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPartShadowPrice, (
partName,
shadowPrice))
}

d4420 11
a4430 11
WitRun * const theWitRun,
const char * const partName,
witBoolean * singleSource)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartSingleSource, (
partName,
singleSource))
}

d4434 15
a4448 15
WitRun * const theWitRun,
const char * const partName,
float * * hardLower,
float * * softLower,
float * * hardUpper)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartStockBounds, (
partName,
hardLower,
softLower,
hardUpper))
}

d4452 15
a4466 15
WitRun * const theWitRun,
const char * const partName,
double * * hardLower,
double * * softLower,
double * * hardUpper)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPartStockBounds, (
partName,
hardLower,
softLower,
hardUpper))
}

d4470 10
a4479 10
WitRun * const theWitRun,
const char * const partName,
float * * stockCost)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartStockCost, (
partName,
stockCost))
}
d4484 10
a4493 10
WitRun * const theWitRun,
const char * const partName,
double * * stockCost)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPartStockCost, (
partName,
stockCost))
}
d4498 12
a4509 12
WitRun * const     theWitRun,
const char * const partName,
const int          thePer,
int *              stockSlbConIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartStockSlbConIndex, (
partName,
thePer,
stockSlbConIndex))
}
d4514 12
a4525 12
WitRun * const     theWitRun,
const char * const partName,
const int          thePer,
int *              stockSlbvVarIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartStockSlbvVarIndex, (
partName,
thePer,
stockSlbvVarIndex))
}
d4530 12
a4541 12
WitRun * const     theWitRun,
const char * const partName,
const int          thePer,
int *              stockVarIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartStockVarIndex, (
partName,
thePer,
stockVarIndex))
}
d4546 10
a4555 10
WitRun * const theWitRun,
const char * const partName,
float * * stockVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartStockVol, (
partName,
stockVol))
}
d4560 10
a4569 10
WitRun * const theWitRun,
const char * const partName,
double * * stockVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPartStockVol, (
partName,
stockVol))
}
d4574 10
a4583 10
WitRun * const theWitRun,
const char * const partName,
float * * supplyVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartSupplyVol, (
partName,
supplyVol))
}
d4588 10
a4597 10
WitRun * const theWitRun,
const char * const partName,
double * * supplyVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPartSupplyVol, (
partName,
supplyVol))
}
d4602 10
a4611 10
WitRun * const theWitRun,
int * lenPartList,
char * * * partList)
{
STANDARD_API_IMPL (
theWitRun,
witGetParts, (
lenPartList,
partList))
}
d4616 8
a4623 8
WitRun * const theWitRun,
witBoolean * penExec)
{
STANDARD_API_IMPL (
theWitRun,
witGetPenExec, (
penExec))
}
d4628 8
a4635 8
WitRun * const theWitRun,
witBoolean * perfPegging)
{
STANDARD_API_IMPL (
theWitRun,
witGetPerfPegging, (
perfPegging))
}
d4640 8
a4647 8
WitRun * const theWitRun,
int * *        periodStage)
{
STANDARD_API_IMPL (
theWitRun,
witGetPeriodStage, (
periodStage))
}
d4652 8
a4659 8
WitRun * const theWitRun,
witBoolean * pipExists)
{
STANDARD_API_IMPL (
theWitRun,
witGetPipExists, (
pipExists))
}
d4664 16
a4679 16
WitRun * const theWitRun,
int *          lenLists,
char * * *     partNameList,
char * * *     demandNameList,
int * *        shipPerList,
float * *      incShipVolList)
{
STANDARD_API_IMPL (
theWitRun,
witGetPipSeq, (
lenLists,
partNameList,
demandNameList,
shipPerList,
incShipVolList))
}
d4684 16
a4699 16
WitRun * const theWitRun,
int *          lenLists,
char * * *     partNameList,
char * * *     demandNameList,
int * *        shipPerList,
double * *     incShipVolList)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPipSeq, (
lenLists,
partNameList,
demandNameList,
shipPerList,
incShipVolList))
}
d4704 8
a4711 8
WitRun * const theWitRun,
witBoolean * pipSeqFromHeur)
{
STANDARD_API_IMPL (
theWitRun,
witGetPipSeqFromHeur, (
pipSeqFromHeur))
}
d4716 18
a4733 18
WitRun * const theWitRun,
int *          lenLists,
char * * *     critPartNameList,
int * *        critPerList,
char * * *     demPartNameList,
char * * *     demandNameList,
int * *        shipPerList)
{
STANDARD_API_IMPL (
theWitRun,
witGetPgdCritList, (
lenLists,
critPartNameList,
critPerList,
demPartNameList,
demandNameList,
shipPerList))
}
d4738 9
a4746 9
WitRun * const theWitRun,
witBoolean * pgdCritListMode)
{
STANDARD_API_IMPL (
theWitRun,
witGetPgdCritListMode, (
pgdCritListMode))
}

d4750 8
a4757 8
WitRun * const theWitRun,
witBoolean * prefHighStockSLBs)
{
STANDARD_API_IMPL (
theWitRun,
witGetPrefHighStockSLBs, (
prefHighStockSLBs))
}
d4762 8
a4769 8
WitRun * const theWitRun,
witBoolean * preprocessed)
{
STANDARD_API_IMPL (
theWitRun,
witGetPreprocessed, (
preprocessed))
}
d4774 9
a4782 9
WitRun * const theWitRun,
float * probability)
{
STANDARD_API_IMPL (
theWitRun,
witGetProbability, (
probability))
}

d4786 9
a4794 9
WitRun * const theWitRun,
double * probability)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetProbability, (
probability))
}

d4798 8
a4805 8
WitRun * const theWitRun,
witBoolean * respectStockSLBs)
{
STANDARD_API_IMPL (
theWitRun,
witGetRespectStockSLBs, (
respectStockSLBs))
}
d4810 8
a4817 8
WitRun * const theWitRun,
witBoolean * roundReqVols)
{
STANDARD_API_IMPL (
theWitRun,
witGetRoundReqVols, (
roundReqVols))
}
d4822 8
a4829 8
WitRun * const theWitRun,
witBoolean * selSplit)
{
STANDARD_API_IMPL (
theWitRun,
witGetSelSplit, (
selSplit))
}
d4834 8
a4841 8
WitRun * const theWitRun,
witBoolean * selectionRecovery)
{
STANDARD_API_IMPL (
theWitRun,
witGetSelectionRecovery, (
selectionRecovery))
}
d4846 8
a4853 8
WitRun * const theWitRun,
witBoolean * skipFailures)
{
STANDARD_API_IMPL (
theWitRun,
witGetSkipFailures, (
skipFailures))
}
d4858 9
a4866 9
WitRun * const theWitRun,
char * * solverLogFileName)
{
STANDARD_API_IMPL (
theWitRun,
witGetSolverLogFileName, (
solverLogFileName))
}

d4870 8
a4877 8
WitRun * const theWitRun,
witBoolean *   stageByObject)
{
STANDARD_API_IMPL (
theWitRun,
witGetStageByObject, (
stageByObject))
}
d4882 8
a4889 8
WitRun * const theWitRun,
witBoolean * stochMode)
{
STANDARD_API_IMPL (
theWitRun,
witGetStochMode, (
stochMode))
}
d4894 8
a4901 8
WitRun * const theWitRun,
witBoolean * stochSolnMode)
{
STANDARD_API_IMPL (
theWitRun,
witGetStochSolnMode, (
stochSolnMode))
}
d4906 8
a4913 8
WitRun * const theWitRun,
witBoolean * stockReallocation)
{
STANDARD_API_IMPL (
theWitRun,
witGetStockReallocation, (
stockReallocation))
}
d4918 14
a4931 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
void * * appData)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryAppData, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
appData))
}
d4936 14
a4949 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
float * * consRate)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryConsRate, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
consRate))
}
d4954 14
a4967 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
double * * consRate)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetSubsBomEntryConsRate, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
consRate))
}
d4972 15
a4986 15
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
char * * consumedPart)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryConsumedPart, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
consumedPart))
}

d4990 15
a5004 15
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
int * earliestPeriod)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryEarliestPeriod, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
earliestPeriod))
}

d5008 14
a5021 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
float * execPenalty)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryExecPenalty, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
execPenalty))
}
d5026 14
a5039 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
double * execPenalty)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetSubsBomEntryExecPenalty, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
execPenalty))
}
d5044 14
a5057 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
witBoolean * expAllowed)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryExpAllowed, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
expAllowed))
}
d5062 14
a5075 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
float * expNetAversion)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryExpNetAversion, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
expNetAversion))
}
d5080 14
a5093 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
double * expNetAversion)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetSubsBomEntryExpNetAversion, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
expNetAversion))
}
d5098 14
a5111 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
float * falloutRate)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryFalloutRate, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
falloutRate))
}
d5116 14
a5129 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
double * falloutRate)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetSubsBomEntryFalloutRate, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
falloutRate))
}
d5134 14
a5147 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
float * * fssSubVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryFssSubVol, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
fssSubVol))
}
d5152 14
a5165 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
double * * fssSubVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetSubsBomEntryFssSubVol, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
fssSubVol))
}
d5170 14
a5183 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
int * * impactPeriod)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryImpactPeriod, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
impactPeriod))
}
d5188 14
a5201 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
witBoolean * intSubVols)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryIntSubVols, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
intSubVols))
}
d5206 15
a5220 15
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
int * latestPeriod)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryLatestPeriod, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
latestPeriod))
}

d5224 14
a5237 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
witBoolean * mrpNetAllowed)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryMrpNetAllowed, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
mrpNetAllowed))
}
d5242 14
a5255 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
float * * mrpSubVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryMrpSubVol, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
mrpSubVol))
}
d5260 14
a5273 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
double * * mrpSubVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetSubsBomEntryMrpSubVol, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
mrpSubVol))
}
d5278 14
a5291 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
witBoolean * netAllowed)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryNetAllowed, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
netAllowed))
}
d5296 15
a5310 15
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
float * * obj1SubCost)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryObj1SubCost, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
obj1SubCost))
}

d5314 15
a5328 15
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
double * * obj1SubCost)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetSubsBomEntryObj1SubCost, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
obj1SubCost))
}

d5332 14
a5345 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
float * * offset)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryOffset, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
offset))
}
d5350 14
a5363 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
double * * offset)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetSubsBomEntryOffset, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
offset))
}
d5368 14
a5381 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
float * * routingShare)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryRoutingShare, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
routingShare))
}
d5386 14
a5399 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
double * * routingShare)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetSubsBomEntryRoutingShare, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
routingShare))
}
d5404 14
a5417 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
witBoolean * selForDel)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntrySelForDel, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
selForDel))
}
d5422 15
a5436 15
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
float * * subCost)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntrySubCost, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
subCost))
}

d5440 15
a5454 15
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
double * * subCost)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetSubsBomEntrySubCost, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
subCost))
}

d5458 16
a5473 16
WitRun * const     theWitRun,
const char * const consumingOperationName,
const int          bomEntryIndex,
const int          subsBomEntryIndex,
const int          thePer,
int *              subVarIndex)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntrySubVarIndex, (
consumingOperationName,
bomEntryIndex,
subsBomEntryIndex,
thePer,
subVarIndex))
}
d5478 14
a5491 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
float * * subVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntrySubVol, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
subVol))
}
d5496 14
a5509 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
double * * subVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetSubsBomEntrySubVol, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
subVol))
}
d5514 8
a5521 8
WitRun * const theWitRun,
witBoolean * tieBreakPropRt)
{
STANDARD_API_IMPL (
theWitRun,
witGetTieBreakPropRt, (
tieBreakPropRt))
}
d5526 8
a5533 8
WitRun * const theWitRun,
char * * title)
{
STANDARD_API_IMPL (
theWitRun,
witGetTitle, (
title))
}
d5538 8
a5545 8
WitRun * const theWitRun,
witBoolean * truncOffsets)
{
STANDARD_API_IMPL (
theWitRun,
witGetTruncOffsets, (
truncOffsets))
}
d5550 8
a5557 8
WitRun * const theWitRun,
witBoolean * twoWayMultiExec)
{
STANDARD_API_IMPL (
theWitRun,
witGetTwoWayMultiExec, (
twoWayMultiExec))
}
d5562 8
a5569 8
WitRun * const theWitRun,
witBoolean * useFocusHorizons)
{
STANDARD_API_IMPL (
theWitRun,
witGetUseFocusHorizons, (
useFocusHorizons))
}
d5574 8
a5581 8
WitRun * const theWitRun,
witBoolean * userHeurStart)
{
STANDARD_API_IMPL (
theWitRun,
witGetUserHeurStart, (
userHeurStart))
}
d5586 9
a5594 9
WitRun * const theWitRun,
float * wbounds)
{
STANDARD_API_IMPL (
theWitRun,
witGetWbounds, (
wbounds))
}

d5598 9
a5606 9
WitRun * const theWitRun,
double * wbounds)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetWbounds, (
wbounds))
}

d5610 8
a5617 8
WitRun * const theWitRun,
witBoolean * wit34Compatible)
{
STANDARD_API_IMPL (
theWitRun,
witGetWit34Compatible, (
wit34Compatible))
}
d5622 7
a5628 7
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witHeurImplode, ())
}

d5632 16
a5647 16
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
const int shipPeriod,
const float desIncVol,
float * incVol)
{
STANDARD_API_IMPL (
theWitRun,
witIncHeurAlloc, (
demandedPartName,
demandName,
shipPeriod,
desIncVol,
incVol))
}
d5652 16
a5667 16
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
const int shipPeriod,
const double desIncVol,
double * incVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witIncHeurAlloc, (
demandedPartName,
demandName,
shipPeriod,
desIncVol,
incVol))
}
d5672 18
a5689 18
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
const int shipPeriod,
const float desIncVol,
float * incVol,
witBoolean asapMultiExec)
{
STANDARD_API_IMPL (
theWitRun,
witIncHeurAllocTwme, (
demandedPartName,
demandName,
shipPeriod,
desIncVol,
incVol,
asapMultiExec))
}
d5694 18
a5711 18
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
const int shipPeriod,
const double desIncVol,
double * incVol,
witBoolean asapMultiExec)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witIncHeurAllocTwme, (
demandedPartName,
demandName,
shipPeriod,
desIncVol,
incVol,
asapMultiExec))
}
d5716 6
a5721 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witInitialize, ())
}
d5726 7
a5732 7
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witMrp, ())
}

d5738 10
a5747 10
WitRun * * theWitRunPtr)
{
forbidNullArg (theWitRunPtr, "theWitRunPtr", "witNewRun");

* theWitRunPtr = WitRun::newInstance ();

STANDARD_API_IMPL (
(* theWitRunPtr),
witNewRun, ())
}
d5752 6
a5757 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witOptImplode, ())
}
d5762 7
a5768 7
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witPostprocess, ())
}

d5772 7
a5778 7
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witPreprocess, ())
}

d5782 6
a5787 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witPurgeData, ())
}
d5792 9
a5800 9
WitRun * const theWitRun,
const char * const fileName)
{
STANDARD_API_IMPL (
theWitRun,
witReadData, (
fileName))
}

d5804 6
a5809 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witResetObjItr, ())
}
d5814 9
a5822 9
WitRun * const theWitRun,
const witBoolean accAfterSoftLB)
{
STANDARD_API_IMPL (
theWitRun,
witSetAccAfterSoftLB, (
accAfterSoftLB))
}

d5826 8
a5833 8
WitRun * const theWitRun,
const witBoolean accAfterOptImp)
{
STANDARD_API_IMPL (
theWitRun,
witSetAccAfterOptImp, (
accAfterOptImp))
}
d5838 9
a5846 9
WitRun * const theWitRun,
void * const appData)
{
STANDARD_API_IMPL (
theWitRun,
witSetAppData, (
appData))
}

d5850 9
a5858 9
WitRun * const theWitRun,
const witBoolean autoPriority)
{
STANDARD_API_IMPL (
theWitRun,
witSetAutoPriority, (
autoPriority))
}

d5862 12
a5873 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
void * const appData)
{
STANDARD_API_IMPL (
theWitRun,
witSetBomEntryAppData, (
operationName,
bomEntryIndex,
appData))
}
d5878 13
a5890 13
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const float * consRate)
{
STANDARD_API_IMPL (
theWitRun,
witSetBomEntryConsRate, (
operationName,
bomEntryIndex,
consRate))
}

d5894 13
a5906 13
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const double * consRate)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetBomEntryConsRate, (
operationName,
bomEntryIndex,
consRate))
}

d5910 13
a5922 13
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int earliestPeriod)
{
STANDARD_API_IMPL (
theWitRun,
witSetBomEntryEarliestPeriod, (
operationName,
bomEntryIndex,
earliestPeriod))
}

d5926 12
a5937 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const float execPenalty)
{
STANDARD_API_IMPL (
theWitRun,
witSetBomEntryExecPenalty, (
operationName,
bomEntryIndex,
execPenalty))
}
d5942 12
a5953 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const double execPenalty)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetBomEntryExecPenalty, (
operationName,
bomEntryIndex,
execPenalty))
}
d5958 12
a5969 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const float falloutRate)
{
STANDARD_API_IMPL (
theWitRun,
witSetBomEntryFalloutRate, (
operationName,
bomEntryIndex,
falloutRate))
}
d5974 12
a5985 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const double falloutRate)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetBomEntryFalloutRate, (
operationName,
bomEntryIndex,
falloutRate))
}
d5990 13
a6002 13
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int latestPeriod)
{
STANDARD_API_IMPL (
theWitRun,
witSetBomEntryLatestPeriod, (
operationName,
bomEntryIndex,
latestPeriod))
}

d6006 12
a6017 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const witBoolean mandEC)
{
STANDARD_API_IMPL (
theWitRun,
witSetBomEntryMandEC, (
operationName,
bomEntryIndex,
mandEC))
}
d6022 12
a6033 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const float * const offset)
{
STANDARD_API_IMPL (
theWitRun,
witSetBomEntryOffset, (
operationName,
bomEntryIndex,
offset))
}
d6038 12
a6049 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const double * const offset)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetBomEntryOffset, (
operationName,
bomEntryIndex,
offset))
}
d6054 12
a6065 12
WitRun * const           theWitRun,
const char * const       operationName,
const int                bomEntryIndex,
const witBoolean * const propRtg)
{
STANDARD_API_IMPL (
theWitRun,
witSetBomEntryPropRtg, (
operationName,
bomEntryIndex,
propRtg))
}
d6070 12
a6081 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const float * routingShare)
{
STANDARD_API_IMPL (
theWitRun,
witSetBomEntryRoutingShare, (
operationName,
bomEntryIndex,
routingShare))
}
d6086 12
a6097 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const double * routingShare)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetBomEntryRoutingShare, (
operationName,
bomEntryIndex,
routingShare))
}
d6102 12
a6113 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const witBoolean selForDel)
{
STANDARD_API_IMPL (
theWitRun,
witSetBomEntrySelForDel, (
operationName,
bomEntryIndex,
selForDel))
}
d6118 12
a6129 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const witBoolean singleSource)
{
STANDARD_API_IMPL (
theWitRun,
witSetBomEntrySingleSource, (
operationName,
bomEntryIndex,
singleSource))
}
d6134 12
a6145 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
void * const appData)
{
STANDARD_API_IMPL (
theWitRun,
witSetBopEntryAppData, (
operationName,
bopEntryIndex,
appData))
}
d6150 12
a6161 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
const int earliestPeriod)
{
STANDARD_API_IMPL (
theWitRun,
witSetBopEntryEarliestPeriod, (
operationName,
bopEntryIndex,
earliestPeriod))
}
d6166 12
a6177 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
const witBoolean expAllowed)
{
STANDARD_API_IMPL (
theWitRun,
witSetBopEntryExpAllowed, (
operationName,
bopEntryIndex,
expAllowed))
}
d6182 12
a6193 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
const float expAversion)
{
STANDARD_API_IMPL (
theWitRun,
witSetBopEntryExpAversion, (
operationName,
bopEntryIndex,
expAversion))
}
d6198 12
a6209 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
const double expAversion)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetBopEntryExpAversion, (
operationName,
bopEntryIndex,
expAversion))
}
d6214 12
a6225 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
const int latestPeriod)
{
STANDARD_API_IMPL (
theWitRun,
witSetBopEntryLatestPeriod, (
operationName,
bopEntryIndex,
latestPeriod))
}
d6230 12
a6241 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
const float * const offset)
{
STANDARD_API_IMPL (
theWitRun,
witSetBopEntryOffset, (
operationName,
bopEntryIndex,
offset))
}
d6246 12
a6257 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
const double * const offset)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetBopEntryOffset, (
operationName,
bopEntryIndex,
offset))
}
d6262 12
a6273 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
const float * productRate)
{
STANDARD_API_IMPL (
theWitRun,
witSetBopEntryProductRate, (
operationName,
bopEntryIndex,
productRate))
}
d6278 12
a6289 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
const double * productRate)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetBopEntryProductRate, (
operationName,
bopEntryIndex,
productRate))
}
d6294 12
a6305 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
const float * routingShare)
{
STANDARD_API_IMPL (
theWitRun,
witSetBopEntryRoutingShare, (
operationName,
bopEntryIndex,
routingShare))
}
d6309 13
a6321 13
WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryRoutingShareDbl (
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
const double * routingShare)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetBopEntryRoutingShare, (
operationName,
bopEntryIndex,
routingShare))
}
d6326 12
a6337 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
const witBoolean selForDel)
{
STANDARD_API_IMPL (
theWitRun,
witSetBopEntrySelForDel, (
operationName,
bopEntryIndex,
selForDel))
}
d6342 8
a6349 8
WitRun * const theWitRun,
const witBoolean compPrices)
{
STANDARD_API_IMPL (
theWitRun,
witSetCompPrices, (
compPrices))
}
d6354 9
a6362 9
WitRun * const theWitRun,
const witBoolean computeCriticalList)
{
STANDARD_API_IMPL (
theWitRun,
witSetComputeCriticalList, (
computeCriticalList))
}

d6366 9
a6374 9
WitRun * const theWitRun,
const float cplexParSpecDblVal)
{
STANDARD_API_IMPL (
theWitRun,
witSetCplexParSpecDblVal, (
cplexParSpecDblVal))
}

d6378 9
a6386 9
WitRun * const theWitRun,
const double cplexParSpecDblVal)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetCplexParSpecDblVal, (
cplexParSpecDblVal))
}

d6390 9
a6398 9
WitRun * const theWitRun,
const int cplexParSpecIntVal)
{
STANDARD_API_IMPL (
theWitRun,
witSetCplexParSpecIntVal, (
cplexParSpecIntVal))
}

d6402 9
a6410 9
WitRun * const theWitRun,
const char * const cplexParSpecName)
{
STANDARD_API_IMPL (
theWitRun,
witSetCplexParSpecName, (
cplexParSpecName))
}

d6414 9
a6422 9
WitRun * const theWitRun,
const char * const theObjName)
{
STANDARD_API_IMPL (
theWitRun,
witSetCurrentObjective, (
theObjName))
}

d6426 9
a6434 9
WitRun * const theWitRun,
const int currentScenario)
{
STANDARD_API_IMPL (
theWitRun,
witSetCurrentScenario, (
currentScenario))
}

d6438 13
a6450 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
void * const appData)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandAppData, (
partName,
demandName,
appData))
}

d6454 16
a6469 16
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const float * const hardLower,
const float * const softLower,
const float * const hardUpper)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandCumShipBounds, (
partName,
demandName,
hardLower,
softLower,
hardUpper))
}
d6473 17
a6489 17
WIT_DECLSPEC witReturnCode STDCALL witSetDemandCumShipBoundsDbl (
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const double * const hardLower,
const double * const softLower,
const double * const hardUpper)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetDemandCumShipBounds, (
partName,
demandName,
hardLower,
softLower,
hardUpper))
}
d6494 29
a6522 29
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const float * const cumShipReward)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandCumShipReward, (
partName,
demandName,
cumShipReward))
}

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandCumShipRewardDbl (
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const double * const cumShipReward)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetDemandCumShipReward, (
partName,
demandName,
cumShipReward))
}

d6526 12
a6537 12
WitRun * const     theWitRun,
const char * const partName,
const char * const demandName,
const char * const newName)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandDemandName, (
partName,
demandName,
newName))
}
d6542 13
a6554 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const float * const demandVol)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandDemandVol, (
partName,
demandName,
demandVol))
}

d6558 13
a6570 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const double * const demandVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetDemandDemandVol, (
partName,
demandName,
demandVol))
}

d6574 13
a6586 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const int focusHorizon)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandFocusHorizon, (
partName,
demandName,
focusHorizon))
}

d6590 12
a6601 12
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const float * const fssShipVol)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandFssShipVol, (
partName,
demandName,
fssShipVol))
}
d6606 12
a6617 12
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const double * const fssShipVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetDemandFssShipVol, (
partName,
demandName,
fssShipVol))
}
d6622 13
a6634 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const int intShipVols)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandIntShipVols, (
partName,
demandName,
intShipVols))
}

d6638 13
a6650 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const int * leadTimeUB)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandLeadTimeUB, (
partName,
demandName,
leadTimeUB))
}

d6654 13
a6666 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const int * const priority)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandPriority, (
partName,
demandName,
priority))
}

d6670 13
a6682 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const float searchInc)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandSearchInc, (
partName,
demandName,
searchInc))
}

d6686 13
a6698 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const double searchInc)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetDemandSearchInc, (
partName,
demandName,
searchInc))
}

d6702 12
a6713 12
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const witBoolean selForDel)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandSelForDel, (
partName,
demandName,
selForDel))
}
d6718 13
a6730 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const int shipLateAllowed)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandShipLateAllowed, (
partName,
demandName,
shipLateAllowed))
}

d6734 13
a6746 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const int * shipLateUB)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandShipLateUB, (
partName,
demandName,
shipLateUB))
}

d6750 13
a6762 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const float * const shipReward)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandShipReward, (
partName,
demandName,
shipReward))
}

d6766 13
a6778 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const double * const shipReward)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetDemandShipReward, (
partName,
demandName,
shipReward))
}

d6782 13
a6794 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const float * const shipVol)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandShipVol, (
partName,
demandName,
shipVol))
}

d6798 13
a6810 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const double * const shipVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetDemandShipVol, (
partName,
demandName,
shipVol))
}

d6814 8
a6821 8
WitRun * const theWitRun,
const int equitablity)
{
STANDARD_API_IMPL (
theWitRun,
witSetEquitability, (
equitablity))
}
d6826 9
a6834 9
WitRun * const theWitRun,
const witBoolean execEmptyBom)
{
STANDARD_API_IMPL (
theWitRun,
witSetExecEmptyBom, (
execEmptyBom))
}

d6838 9
a6846 9
WitRun * const theWitRun,
const float expCutoff)
{
STANDARD_API_IMPL (
theWitRun,
witSetExpCutoff, (
expCutoff))
}

d6850 9
a6858 9
WitRun * const theWitRun,
const double expCutoff)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetExpCutoff, (
expCutoff))
}

d6862 8
a6869 8
WitRun * const      theWitRun,
const float * const colsol)
{
STANDARD_API_IMPL (
theWitRun,
witSetExtOptSoln, (
colsol))
}
d6874 8
a6881 8
WitRun * const       theWitRun,
const double * const colsol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetExtOptSoln, (
colsol))
}
d6886 8
a6893 8
WitRun * const theWitRun,
const witBoolean forcedMultiEq)
{
STANDARD_API_IMPL (
theWitRun,
witSetForcedMultiEq, (
forcedMultiEq))
}
d6898 8
a6905 8
WitRun * const theWitRun,
const witBoolean highPrecisionWD)
{
STANDARD_API_IMPL (
theWitRun,
witSetHighPrecisionWD, (
highPrecisionWD))
}
d6910 8
a6917 8
WitRun * const theWitRun,
const witBoolean independentOffsets)
{
STANDARD_API_IMPL (
theWitRun,
witSetIndependentOffsets, (
independentOffsets))
}
d6922 9
a6930 9
WitRun * const theWitRun,
const float lotSizeTol)
{
STANDARD_API_IMPL (
theWitRun,
witSetLotSizeTol, (
lotSizeTol))
}

d6934 9
a6942 9
WitRun * const theWitRun,
const double lotSizeTol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetLotSizeTol, (
lotSizeTol))
}

d6946 11
a6956 11
WitRun * const theWitRun,
const witBoolean quiet,
const char * const mesgFileAccessMode)
{
STANDARD_API_IMPL (
theWitRun,
witSetMesgFileAccessMode, (
quiet,
mesgFileAccessMode))
}

d6960 11
a6970 11
WitRun * const theWitRun,
const witBoolean quiet,
const char * const mesgFileName)
{
STANDARD_API_IMPL (
theWitRun,
witSetMesgFileName, (
quiet,
mesgFileName))
}

d6974 13
a6986 13
WitRun * const theWitRun,
const witBoolean quiet,
const int messageNumber,
const witBoolean mesgPrintMunber)
{
STANDARD_API_IMPL (
theWitRun,
witSetMesgPrintNumber, (
quiet,
messageNumber,
mesgPrintMunber))
}

d6990 13
a7002 13
WitRun * const theWitRun,
const witBoolean quiet,
const int messageNumber,
const witBoolean mesgStopRunning)
{
STANDARD_API_IMPL (
theWitRun,
witSetMesgStopRunning, (
quiet,
messageNumber,
mesgStopRunning))
}

d7006 13
a7018 13
WitRun * const theWitRun,
const witBoolean quiet,
const int messageNumber,
const witBoolean mesgThrowErrorExc)
{
STANDARD_API_IMPL (
theWitRun,
witSetMesgThrowErrorExc, (
quiet,
messageNumber,
mesgThrowErrorExc))
}

d7022 13
a7034 13
WitRun * const theWitRun,
const witBoolean quiet,
const int messageNumber,
const int mesgTimesPrint)
{
STANDARD_API_IMPL (
theWitRun,
witSetMesgTimesPrint, (
quiet,
messageNumber,
mesgTimesPrint))
}

d7038 8
a7045 8
WitRun * const theWitRun,
const witBoolean minimalExcess)
{
STANDARD_API_IMPL (
theWitRun,
witSetMinimalExcess, (
minimalExcess))
}
d7050 9
a7058 9
WitRun * const theWitRun,
const witBoolean mipMode)
{
STANDARD_API_IMPL (
theWitRun,
witSetMipMode, (
mipMode))
}

d7062 8
a7069 8
WitRun * const theWitRun,
const witBoolean modHeurAlloc)
{
STANDARD_API_IMPL (
theWitRun,
witSetModHeurAlloc, (
modHeurAlloc))
}
d7074 8
a7081 8
WitRun * const theWitRun,
const witBoolean multiExec)
{
STANDARD_API_IMPL (
theWitRun,
witSetMultiExec, (
multiExec))
}
d7086 9
a7094 9
WitRun * const theWitRun,
const witBoolean multiObjMode)
{
STANDARD_API_IMPL (
theWitRun,
witSetMultiObjMode, (
multiObjMode))
}

d7098 9
a7106 9
WitRun * const theWitRun,
const float multiObjTol)
{
STANDARD_API_IMPL (
theWitRun,
witSetMultiObjTol, (
multiObjTol))
}

d7110 9
a7118 9
WitRun * const theWitRun,
const double multiObjTol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetMultiObjTol, (
multiObjTol))
}

d7122 8
a7129 8
WitRun * const theWitRun,
const witBoolean multiRoute)
{
STANDARD_API_IMPL (
theWitRun,
witSetMultiRoute, (
multiRoute))
}
d7134 9
a7142 9
WitRun * const theWitRun,
const int nPeriods)
{
STANDARD_API_IMPL (
theWitRun,
witSetNPeriods, (
nPeriods))
}

d7146 9
a7154 9
WitRun * const theWitRun,
const int nScenarios)
{
STANDARD_API_IMPL (
theWitRun,
witSetNScenarios, (
nScenarios))
}

d7158 8
a7165 8
WitRun * const theWitRun,
const witBoolean nstnResidual)
{
STANDARD_API_IMPL (
theWitRun,
witSetNstnResidual, (
nstnResidual))
}
d7170 10
a7179 10
WitRun * const             theWitRun,
const int                  lenList,
const char * const * const objectiveList)
{
STANDARD_API_IMPL (
theWitRun,
witSetObjectiveList, (
lenList,
objectiveList))
}
d7184 8
a7191 8
WitRun * const     theWitRun,
const char * const objectiveListSpec)
{
STANDARD_API_IMPL (
theWitRun,
witSetObjectiveListSpec, (
objectiveListSpec))
}
d7196 9
a7204 9
WitRun * const theWitRun,
const int objectiveRank)
{
STANDARD_API_IMPL (
theWitRun,
witSetObjectiveRank, (
objectiveRank))
}

d7208 10
a7217 10
WitRun * const theWitRun,
const char * const operationName,
void * const appData)
{
STANDARD_API_IMPL (
theWitRun,
witSetOperationAppData, (
operationName,
appData))
}
d7222 14
a7235 14
WitRun * const theWitRun,
const char * const operationName,
const float * const hardLower,
const float * const softLower,
const float * const hardUpper)
{
STANDARD_API_IMPL (
theWitRun,
witSetOperationExecBounds, (
operationName,
hardLower,
softLower,
hardUpper))
}
d7240 14
a7253 14
WitRun * const theWitRun,
const char * const operationName,
const double * const hardLower,
const double * const softLower,
const double * const hardUpper)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetOperationExecBounds, (
operationName,
hardLower,
softLower,
hardUpper))
}
d7258 10
a7267 10
WitRun * const theWitRun,
const char * const operationName,
const float * const execCost)
{
STANDARD_API_IMPL (
theWitRun,
witSetOperationExecCost, (
operationName,
execCost))
}
d7271 11
a7281 11
WIT_DECLSPEC witReturnCode STDCALL witSetOperationExecCostDbl (
WitRun * const theWitRun,
const char * const operationName,
const double * const execCost)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetOperationExecCost, (
operationName,
execCost))
}
d7286 10
a7295 10
WitRun * const theWitRun,
const char * const operationName,
const float execPenalty)
{
STANDARD_API_IMPL (
theWitRun,
witSetOperationExecPenalty, (
operationName,
execPenalty))
}
d7300 10
a7309 10
WitRun * const theWitRun,
const char * const operationName,
const double execPenalty)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetOperationExecPenalty, (
operationName,
execPenalty))
}
d7314 10
a7323 10
WitRun * const theWitRun,
const char * const operationName,
const float * const execVol)
{
STANDARD_API_IMPL (
theWitRun,
witSetOperationExecVol, (
operationName,
execVol))
}
d7328 10
a7337 10
WitRun * const theWitRun,
const char * const operationName,
const double * const execVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetOperationExecVol, (
operationName,
execVol))
}
d7342 10
a7351 10
WitRun * const theWitRun,
const char * const operationName,
const float * const incLotSize)
{
STANDARD_API_IMPL (
theWitRun,
witSetOperationIncLotSize, (
operationName,
incLotSize))
}
d7356 10
a7365 10
WitRun * const theWitRun,
const char * const operationName,
const double * const incLotSize)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetOperationIncLotSize, (
operationName,
incLotSize))
}
d7370 10
a7379 10
WitRun * const theWitRun,
const char * const operationName,
const float * const incLotSize2)
{
STANDARD_API_IMPL (
theWitRun,
witSetOperationIncLotSize2, (
operationName,
incLotSize2))
}
d7384 10
a7393 10
WitRun * const theWitRun,
const char * const operationName,
const double * const incLotSize2)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetOperationIncLotSize2, (
operationName,
incLotSize2))
}
d7398 10
a7407 10
WitRun * const theWitRun,
const char * const operationName,
const witBoolean intExecVols)
{
STANDARD_API_IMPL (
theWitRun,
witSetOperationIntExecVols, (
operationName,
intExecVols))
}
d7412 10
a7421 10
WitRun * const theWitRun,
const char * const operationName,
const float * const lotSize2Thresh)
{
STANDARD_API_IMPL (
theWitRun,
witSetOperationLotSize2Thresh, (
operationName,
lotSize2Thresh))
}
d7426 10
a7435 10
WitRun * const theWitRun,
const char * const operationName,
const double * const lotSize2Thresh)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetOperationLotSize2Thresh, (
operationName,
lotSize2Thresh))
}
d7440 10
a7449 10
WitRun * const theWitRun,
const char * const operationName,
const float * const minLotSize)
{
STANDARD_API_IMPL (
theWitRun,
witSetOperationMinLotSize, (
operationName,
minLotSize))
}
d7454 10
a7463 10
WitRun * const theWitRun,
const char * const operationName,
const double * const minLotSize)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetOperationMinLotSize, (
operationName,
minLotSize))
}
d7468 10
a7477 10
WitRun * const theWitRun,
const char * const operationName,
const float * const minLotSize2)
{
STANDARD_API_IMPL (
theWitRun,
witSetOperationMinLotSize2, (
operationName,
minLotSize2))
}
d7482 10
a7491 10
WitRun * const theWitRun,
const char * const operationName,
const double * const minLotSize2)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetOperationMinLotSize2, (
operationName,
minLotSize2))
}
d7496 10
a7505 10
WitRun * const     theWitRun,
const char * const operationName,
const int          objectStage)
{
STANDARD_API_IMPL (
theWitRun,
witSetOperationObjectStage, (
operationName,
objectStage))
}
d7510 10
a7519 10
WitRun * const     theWitRun,
const char * const operationName,
const char * const newName)
{
STANDARD_API_IMPL (
theWitRun,
witSetOperationOperationName, (
operationName,
newName))
}
d7524 10
a7533 10
WitRun * const theWitRun,
const char * const operationName,
const witBoolean selForDel)
{
STANDARD_API_IMPL (
theWitRun,
witSetOperationSelForDel, (
operationName,
selForDel))
}
d7538 10
a7547 10
WitRun * const theWitRun,
const char * const operationName,
const witBoolean twoLevelLotSizes)
{
STANDARD_API_IMPL (
theWitRun,
witSetOperationTwoLevelLotSizes, (
operationName,
twoLevelLotSizes))
}
d7552 10
a7561 10
WitRun * const theWitRun,
const char * const operationName,
const float * const yieldRate)
{
STANDARD_API_IMPL (
theWitRun,
witSetOperationYieldRate, (
operationName,
yieldRate))
}
d7566 10
a7575 10
WitRun * const theWitRun,
const char * const operationName,
const double * const yieldRate)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetOperationYieldRate, (
operationName,
yieldRate))
}
d7580 8
a7587 8
WitRun * const theWitRun,
const witAttr optInitMethod)
{
STANDARD_API_IMPL (
theWitRun,
witSetOptInitMethod, (
optInitMethod))
}
d7592 8
a7599 8
WitRun * const theWitRun,
const int outputPrecision)
{
STANDARD_API_IMPL (
theWitRun,
witSetOutputPrecision, (
outputPrecision))
}
d7604 10
a7613 10
WitRun * const theWitRun,
const char * const partName,
void * const appData)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartAppData, (
partName,
appData))
}
d7618 10
a7627 10
WitRun * const theWitRun,
const char * const partName,
const witBoolean asapPipOrder)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartAsapPipOrder, (
partName,
asapPipOrder))
}
d7632 10
a7641 10
WitRun * const theWitRun,
const char * const partName,
const witBoolean boundedLeadTimes)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartBoundedLeadTimes, (
partName,
boundedLeadTimes))
}
d7646 11
a7656 11
WitRun * const theWitRun,
const char * const partName,
const int * const buildAheadUB)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartBuildAheadUB, (
partName,
buildAheadUB))
}

d7660 10
a7669 10
WitRun * const theWitRun,
const char * const partName,
const witBoolean buildAsap)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartBuildAsap, (
partName,
buildAsap))
}
d7674 10
a7683 10
WitRun * const theWitRun,
const char * const partName,
const witBoolean buildNstn)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartBuildNstn, (
partName,
buildNstn))
}
d7688 10
a7697 10
WitRun * const     theWitRun,
const char * const partName,
const int          objectStage)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartObjectStage, (
partName,
objectStage))
}
d7702 10
a7711 10
WitRun * const     theWitRun,
const char * const partName,
const char * const newName)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartPartName, (
partName,
newName))
}
d7716 10
a7725 10
WitRun * const theWitRun,
const char * const partName,
const witBoolean * const propRtg)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartPropRtg, (
partName,
propRtg))
}
d7730 11
a7740 11
WitRun * const theWitRun,
const char * const partName,
const witBoolean scrapAllowed)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartScrapAllowed, (
partName,
scrapAllowed))
}

d7744 11
a7754 11
WitRun * const theWitRun,
const char * const partName,
const float * const scrapCost)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartScrapCost, (
partName,
scrapCost))
}

d7758 12
a7769 12
WitRun * const theWitRun,
const char * const partName,
const double * const scrapCost)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetPartScrapCost, (
partName,
scrapCost
))
}

d7773 10
a7782 10
WitRun * const theWitRun,
const char * const partName,
const witBoolean selForDel)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartSelForDel, (
partName,
selForDel))
}
d7787 11
a7797 11
WitRun * const theWitRun,
const char * const partName,
const witBoolean singleSource)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartSingleSource, (
partName,
singleSource))
}

d7801 15
a7815 15
WitRun * const theWitRun,
const char * const partName,
const float * const hardLower,
const float * const softLower,
const float * const hardUpper)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartStockBounds, (
partName,
hardLower,
softLower,
hardUpper))
}

d7819 15
a7833 15
WitRun * const theWitRun,
const char * const partName,
const double * const hardLower,
const double * const softLower,
const double * const hardUpper)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetPartStockBounds, (
partName,
hardLower,
softLower,
hardUpper))
}

d7837 11
a7847 11
WitRun * const theWitRun,
const char * const partName,
const float * const stockCost)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartStockCost, (
partName,
stockCost))
}

d7851 11
a7861 11
WitRun * const theWitRun,
const char * const partName,
const double * const stockCost)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetPartStockCost, (
partName,
stockCost))
}

d7865 25
a7889 25
WitRun * const theWitRun,
const char * const partName,
const float * const supplyVol)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartSupplyVol, (
partName,
supplyVol))
}

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartSupplyVolDbl (
WitRun * const theWitRun,
const char * const partName,
const double * const supplyVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetPartSupplyVol, (
partName,
supplyVol))
}

d7893 8
a7900 8
WitRun * const theWitRun,
const witBoolean penExec)
{
STANDARD_API_IMPL (
theWitRun,
witSetPenExec, (
penExec))
}
d7905 8
a7912 8
WitRun * const theWitRun,
const witBoolean perfPegging)
{
STANDARD_API_IMPL (
theWitRun,
witSetPerfPegging, (
perfPegging))
}
d7917 8
a7924 8
WitRun * const theWitRun,
const int *    periodStage)
{
STANDARD_API_IMPL (
theWitRun,
witSetPeriodStage, (
periodStage))
}
d7929 9
a7937 9
WitRun * const theWitRun,
const witBoolean pgdCritListMode)
{
STANDARD_API_IMPL (
theWitRun,
witSetPgdCritListMode, (
pgdCritListMode))
}

d7941 8
a7948 8
WitRun * const theWitRun,
const witBoolean pipSeqFromHeur)
{
STANDARD_API_IMPL (
theWitRun,
witSetPipSeqFromHeur, (
pipSeqFromHeur))
}
d7953 8
a7960 8
WitRun * const theWitRun,
const witBoolean prefHighStockSLBs)
{
STANDARD_API_IMPL (
theWitRun,
witSetPrefHighStockSLBs, (
prefHighStockSLBs))
}
d7965 9
a7973 9
WitRun * const theWitRun,
const float probability)
{
STANDARD_API_IMPL (
theWitRun,
witSetProbability, (
probability))
}

d7977 8
a7984 8
WitRun * const theWitRun,
const double probability)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetProbability, (
probability))
}
d7986 1
a7986 1
//------------------------------------------------------------------------------
d7989 8
a7996 8
WitRun * const theWitRun,
const witBoolean respectStockSLBs)
{
STANDARD_API_IMPL (
theWitRun,
witSetRespectStockSLBs, (
respectStockSLBs))
}
d8001 8
a8008 8
WitRun * const theWitRun,
const witBoolean roundReqVols)
{
STANDARD_API_IMPL (
theWitRun,
witSetRoundReqVols, (
roundReqVols))
}
d8013 8
a8020 8
WitRun * const theWitRun,
const witBoolean selSplit)
{
STANDARD_API_IMPL (
theWitRun,
witSetSelSplit, (
selSplit))
}
d8025 8
a8032 8
WitRun * const theWitRun,
const witBoolean selectionRecovery)
{
STANDARD_API_IMPL (
theWitRun,
witSetSelectionRecovery, (
selectionRecovery))
}
d8037 8
a8044 8
WitRun * const theWitRun,
const witBoolean skipFailures)
{
STANDARD_API_IMPL (
theWitRun,
witSetSkipFailures, (
skipFailures))
}
d8049 9
a8057 9
WitRun * const theWitRun,
const char * const solverLogFileName)
{
STANDARD_API_IMPL (
theWitRun,
witSetSolverLogFileName, (
solverLogFileName))
}

d8061 8
a8068 8
WitRun * const theWitRun,
const witBoolean stageByObject)
{
STANDARD_API_IMPL (
theWitRun,
witSetStageByObject, (
stageByObject))
}
d8073 8
a8080 8
WitRun * const theWitRun,
const witBoolean stochMode)
{
STANDARD_API_IMPL (
theWitRun,
witSetStochMode, (
stochMode))
}
d8085 8
a8092 8
WitRun * const theWitRun,
const witBoolean stockReallocation)
{
STANDARD_API_IMPL (
theWitRun,
witSetStockReallocation, (
stockReallocation))
}
d8097 14
a8110 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
void * const appData)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntryAppData, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
appData))
}
d8115 15
a8129 15
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const float * consRate)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntryConsRate, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
consRate))
}

d8133 15
a8147 15
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const double * consRate)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetSubsBomEntryConsRate, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
consRate))
}

d8151 15
a8165 15
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const int earliestPeriod)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntryEarliestPeriod, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
earliestPeriod))
}

d8169 14
a8182 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const float execPenalty)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntryExecPenalty, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
execPenalty))
}
d8187 14
a8200 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const double execPenalty)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetSubsBomEntryExecPenalty, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
execPenalty))
}
d8205 14
a8218 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const witBoolean expAllowed)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntryExpAllowed, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
expAllowed))
}
d8223 14
a8236 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const float expNetAversion)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntryExpNetAversion, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
expNetAversion))
}
d8241 14
a8254 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const double expNetAversion)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetSubsBomEntryExpNetAversion, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
expNetAversion))
}
d8259 14
a8272 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const float falloutRate)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntryFalloutRate, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
falloutRate))
}
d8276 15
a8290 15
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryFalloutRateDbl (
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const double falloutRate)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetSubsBomEntryFalloutRate, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
falloutRate))
}
d8295 14
a8308 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const witBoolean intSubVols)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntryIntSubVols, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
intSubVols))
}
d8313 15
a8327 15
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const int latestPeriod)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntryLatestPeriod, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
latestPeriod))
}

d8331 14
a8344 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const witBoolean mrpNetAllowed)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntryMrpNetAllowed, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
mrpNetAllowed))
}
d8349 14
a8362 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const witBoolean netAllowed)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntryNetAllowed, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
netAllowed))
}
d8367 33
a8399 33
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const float * const obj1SubCost)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntryObj1SubCost, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
obj1SubCost))
}

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryObj1SubCostDbl (
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const double * const obj1SubCost)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetSubsBomEntryObj1SubCost, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
obj1SubCost))
}

d8403 14
a8416 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const float * const offset)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntryOffset, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
offset))
}
d8420 15
a8434 15
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryOffsetDbl (
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const double * const offset)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetSubsBomEntryOffset, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
offset))
}
d8439 14
a8452 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const float * routingShare)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntryRoutingShare, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
routingShare))
}
d8456 15
a8470 15
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryRoutingShareDbl (
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const double * routingShare)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetSubsBomEntryRoutingShare, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
routingShare))
}
d8475 14
a8488 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const witBoolean selForDel)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntrySelForDel, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
selForDel))
}
d8493 15
a8507 15
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const float * const subCost)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntrySubCost, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
subCost))
}

d8511 15
a8525 15
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const double * const subCost)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetSubsBomEntrySubCost, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
subCost))
}

d8529 14
a8542 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const float * const subVol)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntrySubVol, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
subVol))
}
d8547 14
a8560 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const double * const subVol)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetSubsBomEntrySubVol, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
subVol))
}
d8565 8
a8572 8
WitRun * const theWitRun,
const witBoolean tieBreakPropRt)
{
STANDARD_API_IMPL (
theWitRun,
witSetTieBreakPropRt, (
tieBreakPropRt))
}
d8577 8
a8584 8
WitRun * const theWitRun,
const char * const title)
{
STANDARD_API_IMPL (
theWitRun,
witSetTitle, (
title))
}
d8589 8
a8596 8
WitRun * const theWitRun,
const witBoolean truncOffsets)
{
STANDARD_API_IMPL (
theWitRun,
witSetTruncOffsets, (
truncOffsets))
}
d8601 8
a8608 8
WitRun * const theWitRun,
const witBoolean twoWayMultiExec)
{
STANDARD_API_IMPL (
theWitRun,
witSetTwoWayMultiExec, (
twoWayMultiExec))
}
d8613 8
a8620 8
WitRun * const theWitRun,
const witBoolean useFocusHorizons)
{
STANDARD_API_IMPL (
theWitRun,
witSetUseFocusHorizons, (
useFocusHorizons))
}
d8625 8
a8632 8
WitRun * const theWitRun,
const witBoolean userHeurStart)
{
STANDARD_API_IMPL (
theWitRun,
witSetUserHeurStart, (
userHeurStart))
}
d8637 9
a8645 9
WitRun * const theWitRun,
const float wbounds)
{
STANDARD_API_IMPL (
theWitRun,
witSetWbounds, (
wbounds))
}

d8649 9
a8657 9
WitRun * const theWitRun,
const double wbounds)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetWbounds, (
wbounds))
}

d8661 8
a8668 8
WitRun * const theWitRun,
const witBoolean wit34Compatible)
{
STANDARD_API_IMPL (
theWitRun,
witSetWit34Compatible, (
wit34Compatible))
}
d8673 6
a8678 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witShutDownExtOpt, ())
}
d8683 6
a8688 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witShutDownHeurAlloc, ())
}
d8693 6
a8698 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witStartExtOpt, ())
}
d8703 6
a8708 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witStartHeurAlloc, ())
}
d8713 6
a8718 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witStochImplode, ())
}
d8723 12
a8734 12
WitRun * const theWitRun,
const char * const fileName,
const witFileFormat fileFormat,
const int maxListLen)
{
STANDARD_API_IMPL (
theWitRun,
witWriteCriticalList, (
fileName,
fileFormat,
maxListLen))
}
d8739 9
a8747 9
WitRun * const theWitRun,
const char * const fileName)
{
STANDARD_API_IMPL (
theWitRun,
witWriteData, (
fileName))
}

d8751 11
a8761 11
WitRun * const theWitRun,
const char * const fileName,
const witFileFormat fileFormat)
{
STANDARD_API_IMPL (
theWitRun,
witWriteExecSched, (
fileName,
fileFormat))
}

d8765 11
a8775 11
WitRun * const theWitRun,
const char * const fileName,
const witFileFormat fileFormat)
{
STANDARD_API_IMPL (
theWitRun,
witWriteReqSched, (
fileName,
fileFormat))
}

d8779 10
a8788 10
WitRun * const theWitRun,
const char * const fileName,
const witFileFormat fileFormat)
{
STANDARD_API_IMPL (
theWitRun,
witWriteShipSched, (
fileName,
fileFormat))
}
d8797 12
a8808 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
int * fallout)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntryFallout, (
operationName,
bomEntryIndex,
fallout))
}
d8813 12
a8824 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
witBoolean * propRouting)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntryPropRouting, (
operationName,
bomEntryIndex,
propRouting))
}
d8829 13
a8841 13
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
float * usageRate)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntryUsageRate, (
operationName,
bomEntryIndex,
usageRate))
}

d8845 12
a8856 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
float * time)
{
STANDARD_API_IMPL (
theWitRun,
witGetBomEntryUsageTime, (
operationName,
bomEntryIndex,
time))
}
d8861 12
a8872 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
witBoolean * byProduct)
{
STANDARD_API_IMPL (
theWitRun,
witGetBopEntryByProduct, (
operationName,
bopEntryIndex,
byProduct))
}
d8877 12
a8888 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
float * prodRate)
{
STANDARD_API_IMPL (
theWitRun,
witGetBopEntryProdRate, (
operationName,
bopEntryIndex,
prodRate))
}
d8893 9
a8901 9
WitRun * const theWitRun,
witBoolean * buildWhenEmpty)
{
STANDARD_API_IMPL (
theWitRun,
witGetBuildWhenEmpty, (
buildWhenEmpty))
}

d8905 12
a8916 12
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
int * buildAheadLimit)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandBuildAheadLimit, (
partName,
demandName,
buildAheadLimit))
}
d8921 12
a8932 12
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
int * * buildAheadUB)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandBuildAheadUB, (
partName,
demandName,
buildAheadUB))
}
d8937 13
a8949 13
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
float * * obj1CumShipReward)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandObj1CumShipReward, (
demandedPartName,
demandName,
obj1CumShipReward))
}

d8953 13
a8965 13
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
double * * obj1CumShipReward)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDemandObj1CumShipReward, (
demandedPartName,
demandName,
obj1CumShipReward))
}

d8969 12
a8980 12
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
float * * obj1ShipReward)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandObj1ShipReward, (
demandedPartName,
demandName,
obj1ShipReward))
}
d8985 12
a8996 12
WitRun * const theWitRun,
const char * const demandedPartName,
const char * const demandName,
double * * obj1ShipReward)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetDemandObj1ShipReward, (
demandedPartName,
demandName,
obj1ShipReward))
}
d9001 12
a9012 12
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
int * prefBuildAhead)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandPrefBuildAhead, (
partName,
demandName,
prefBuildAhead))
}
d9017 13
a9029 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
int * shipLateLimit)
{
STANDARD_API_IMPL (
theWitRun,
witGetDemandShipLateLimit, (
partName,
demandName,
shipLateLimit))
}

d9033 8
a9040 8
WitRun * const theWitRun,
int * hashTableSize)
{
STANDARD_API_IMPL (
theWitRun,
witGetHashTableSize, (
hashTableSize))
}
d9045 8
a9052 8
WitRun * const theWitRun,
witBoolean * localBuildAhead)
{
STANDARD_API_IMPL (
theWitRun,
witGetLocalBuildAhead, (
localBuildAhead))
}
d9057 8
a9064 8
WitRun * const theWitRun,
witBoolean * localMultiExec)
{
STANDARD_API_IMPL (
theWitRun,
witGetLocalMultiExec, (
localMultiExec))
}
d9069 8
a9076 8
WitRun * const theWitRun,
int * objChoice)
{
STANDARD_API_IMPL (
theWitRun,
witGetObjChoice, (
objChoice))
}
d9081 10
a9090 10
WitRun * const theWitRun,
const char * const operationName,
float * * obj1ExecCost)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationObj1ExecCost, (
operationName,
obj1ExecCost))
}
d9095 10
a9104 10
WitRun * const theWitRun,
const char * const operationName,
double * * obj1ExecCost)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetOperationObj1ExecCost, (
operationName,
obj1ExecCost))
}
d9109 10
a9118 10
WitRun * const theWitRun,
const char * const operationName,
int * * yield)
{
STANDARD_API_IMPL (
theWitRun,
witGetOperationYield, (
operationName,
yield))
}
d9123 10
a9132 10
WitRun * const theWitRun,
const char * const partName,
int * buildAheadLimit)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartBuildAheadLimit, (
partName,
buildAheadLimit))
}
d9137 10
a9146 10
WitRun * const theWitRun,
const char * const partName,
float * * cycleTime)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartCycleTime, (
partName,
cycleTime))
}
d9151 10
a9160 10
WitRun * const theWitRun,
const char * const partName,
float * * incLotSize)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartIncLotSize, (
partName,
incLotSize))
}
d9165 10
a9174 10
WitRun * const theWitRun,
const char * const partName,
float * * minLotSize)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartMinLotSize, (
partName,
minLotSize))
}
d9179 10
a9188 10
WitRun * const theWitRun,
const char * const partName,
float * * mrpProdVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartMrpProdVol, (
partName,
mrpProdVol))
}
d9193 10
a9202 10
WitRun * const theWitRun,
const char * const partName,
int * nBomEntries)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartNBomEntries, (
partName,
nBomEntries))
}
d9207 10
a9216 10
WitRun * const theWitRun,
const char * const partName,
float * * obj1ProdCost)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartObj1ProdCost, (
partName,
obj1ProdCost))
}
d9221 11
a9231 11
WitRun * const theWitRun,
const char * const partName,
float * * obj1ScrapCost)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartObj1ScrapCost, (
partName,
obj1ScrapCost))
}

d9235 11
a9245 11
WitRun * const theWitRun,
const char * const partName,
double * * obj1ScrapCost)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPartObj1ScrapCost, (
partName,
obj1ScrapCost))
}

d9249 10
a9258 10
WitRun * const theWitRun,
const char * const partName,
float * * obj1StockCost)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartObj1StockCost, (
partName,
obj1StockCost))
}
d9263 10
a9272 10
WitRun * const theWitRun,
const char * const partName,
double * * obj1StockCost)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witGetPartObj1StockCost, (
partName,
obj1StockCost))
}
d9277 14
a9290 14
WitRun * const theWitRun,
const char * const partName,
float * * hardLower,
float * * softLower,
float * * hardUpper)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartProdBounds, (
partName,
hardLower,
softLower,
hardUpper))
}
d9295 11
a9305 11
WitRun * const theWitRun,
const char * const partName,
witBoolean * propRouting)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartPropRouting, (
partName,
propRouting))
}

d9309 10
a9318 10
WitRun * const theWitRun,
const char * const partName,
int * * yield)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartYield, (
partName,
yield))
}
d9323 8
a9330 8
WitRun * const theWitRun,
witBoolean * stockRealloc)
{
STANDARD_API_IMPL (
theWitRun,
witGetStockRealloc, (
stockRealloc))
}
d9335 14
a9348 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
int * fallout)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryFallout, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
fallout))
}
d9353 15
a9367 15
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
float * * prodVol)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryProdVol, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
prodVol))
}

d9371 14
a9384 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
float * usageRate)
{
STANDARD_API_IMPL (
theWitRun,
witGetSubsBomEntryUsageRate, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
usageRate))
}
d9389 6
a9394 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witOptPreprocess, ())
}
d9399 12
a9410 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int fallout)
{
STANDARD_API_IMPL (
theWitRun,
witSetBomEntryFallout, (
operationName,
bomEntryIndex,
fallout))
}
d9415 12
a9426 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const witBoolean propRouting)
{
STANDARD_API_IMPL (
theWitRun,
witSetBomEntryPropRouting, (
operationName,
bomEntryIndex,
propRouting))
}
d9431 13
a9443 13
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const float usageRate)
{
STANDARD_API_IMPL (
theWitRun,
witSetBomEntryUsageRate, (
operationName,
bomEntryIndex,
usageRate))
}

d9447 12
a9458 12
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const float time)
{
STANDARD_API_IMPL (
theWitRun,
witSetBomEntryUsageTime, (
operationName,
bomEntryIndex,
time))
}
d9463 12
a9474 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
const witBoolean byProduct)
{
STANDARD_API_IMPL (
theWitRun,
witSetBopEntryByProduct, (
operationName,
bopEntryIndex,
byProduct))
}
d9479 12
a9490 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
const float prodRate)
{
STANDARD_API_IMPL (
theWitRun,
witSetBopEntryProdRate, (
operationName,
bopEntryIndex,
prodRate))
}
d9495 8
a9502 8
WitRun * const theWitRun,
const witBoolean buildWhenEmpty)
{
STANDARD_API_IMPL (
theWitRun,
witSetBuildWhenEmpty, (
buildWhenEmpty))
}
d9507 13
a9519 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const int buildAheadLimit)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandBuildAheadLimit, (
partName,
demandName,
buildAheadLimit))
}

d9523 12
a9534 12
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const int * buildAheadUB)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandBuildAheadUB, (
partName,
demandName,
buildAheadUB))
}
d9539 13
a9551 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const float * const obj1CumShipReward)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandObj1CumShipReward, (
partName,
demandName,
obj1CumShipReward))
}

d9555 13
a9567 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const double * const obj1CumShipReward)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetDemandObj1CumShipReward, (
partName,
demandName,
obj1CumShipReward))
}

d9571 13
a9583 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const float * const obj1ShipReward)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandObj1ShipReward, (
partName,
demandName,
obj1ShipReward))
}

d9587 13
a9599 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const double * const obj1ShipReward)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetDemandObj1ShipReward, (
partName,
demandName,
obj1ShipReward))
}

d9603 13
a9615 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const int prefBuildAhead)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandPrefBuildAhead, (
partName,
demandName,
prefBuildAhead))
}

d9619 13
a9631 13
WitRun * const theWitRun,
const char * const partName,
const char * const demandName,
const int shipLateLimit)
{
STANDARD_API_IMPL (
theWitRun,
witSetDemandShipLateLimit, (
partName,
demandName,
shipLateLimit))
}

d9635 9
a9643 9
WitRun * const theWitRun,
const int hashTableSize)
{
STANDARD_API_IMPL (
theWitRun,
witSetHashTableSize, (
hashTableSize))
}

d9647 8
a9654 8
WitRun * const theWitRun,
const witBoolean localBuildAhead)
{
STANDARD_API_IMPL (
theWitRun,
witSetLocalBuildAhead, (
localBuildAhead))
}
d9659 8
a9666 8
WitRun * const theWitRun,
const witBoolean localMultiExec)
{
STANDARD_API_IMPL (
theWitRun,
witSetLocalMultiExec, (
localMultiExec))
}
d9671 9
a9679 9
WitRun * const theWitRun,
const int objChoice)
{
STANDARD_API_IMPL (
theWitRun,
witSetObjChoice, (
objChoice))
}

d9683 10
a9692 10
WitRun * const theWitRun,
const char * const operationName,
const float * const obj1ExecCost)
{
STANDARD_API_IMPL (
theWitRun,
witSetOperationObj1ExecCost, (
operationName,
obj1ExecCost))
}
d9697 10
a9706 10
WitRun * const theWitRun,
const char * const operationName,
const double * const obj1ExecCost)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetOperationObj1ExecCost, (
operationName,
obj1ExecCost))
}
d9711 10
a9720 10
WitRun * const theWitRun,
const char * const operationName,
const int * const yield)
{
STANDARD_API_IMPL (
theWitRun,
witSetOperationYield, (
operationName,
yield))
}
d9725 10
a9734 10
WitRun * const theWitRun,
const char * const partName,
const int buildAheadLimit)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartBuildAheadLimit, (
partName,
buildAheadLimit))
}
d9739 10
a9748 10
WitRun * const theWitRun,
const char * const partName,
const float * const cycleTime)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartCycleTime, (
partName,
cycleTime))
}
d9753 10
a9762 10
WitRun * const theWitRun,
const char * const partName,
const float * const incLotSize)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartIncLotSize, (
partName,
incLotSize))
}
d9767 10
a9776 10
WitRun * const theWitRun,
const char * const partName,
const float * const minLotSize)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartMinLotSize, (
partName,
minLotSize))
}
d9781 10
a9790 10
WitRun * const theWitRun,
const char * const partName,
const float * const obj1ProdCost)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartObj1ProdCost, (
partName,
obj1ProdCost))
}
d9795 12
a9806 12
WitRun * const theWitRun,
const char * const partName,
const float * const obj1ScrapCost)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartObj1ScrapCost, (
partName,
obj1ScrapCost
))
}

d9810 12
a9821 12
WitRun * const theWitRun,
const char * const partName,
const double * const obj1ScrapCost)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetPartObj1ScrapCost, (
partName,
obj1ScrapCost
))
}

d9825 11
a9835 11
WitRun * const theWitRun,
const char * const partName,
const float * const obj1StockCost)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartObj1StockCost, (
partName,
obj1StockCost))
}

d9839 11
a9849 11
WitRun * const theWitRun,
const char * const partName,
const double * const obj1StockCost)
{
STANDARD_DBL_API_IMPL (
theWitRun,
witSetPartObj1StockCost, (
partName,
obj1StockCost))
}

d9853 14
a9866 14
WitRun * const theWitRun,
const char * const partName,
const float * const hardLower,
const float * const softLower,
const float * const hardUpper)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartProdBounds, (
partName,
hardLower,
softLower,
hardUpper))
}
d9871 10
a9880 10
WitRun * const theWitRun,
const char * const partName,
const float * const prodVol)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartProdVol, (
partName,
prodVol))
}
d9885 10
a9894 10
WitRun * const theWitRun,
const char * const partName,
const witBoolean propRouting)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartPropRouting, (
partName,
propRouting))
}
d9899 10
a9908 10
WitRun * const theWitRun,
const char * const partName,
const int * const yield)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartYield, (
partName,
yield))
}
d9913 8
a9920 8
WitRun * const theWitRun,
const witBoolean stockRealloc)
{
STANDARD_API_IMPL (
theWitRun,
witSetStockRealloc, (
stockRealloc))
}
d9925 14
a9938 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const int fallout)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntryFallout, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
fallout))
}
d9943 14
a9956 14
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const float * const prodVol)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntryProdVol, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
prodVol))
}
d9961 15
a9975 15
WitRun * const theWitRun,
const char * const operationName,
const int bomEntryIndex,
const int subsBomEntryIndex,
const float usageRate)
{
STANDARD_API_IMPL (
theWitRun,
witSetSubsBomEntryUsageRate, (
operationName,
bomEntryIndex,
subsBomEntryIndex,
usageRate))
}

d9979 10
a9988 10
WitRun * const theWitRun,
const char * const fileName,
const witFileFormat fileFormat)
{
STANDARD_API_IMPL (
theWitRun,
witWriteProdSched, (
fileName,
fileFormat))
}
d9995 10
a10004 10
WitRun * const theWitRun,
int            argc,
char *         argv[])
{
STANDARD_API_IMPL (
theWitRun,
witExecStandAlone, (
argc,
argv))
}
d10009 6
a10014 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witExhaustMemory, ())
}
d10019 12
a10030 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
witBoolean * meSelSplit)
{
STANDARD_API_IMPL (
theWitRun,
witGetBopEntryMeSelSplit, (
operationName,
bopEntryIndex,
meSelSplit))
}
d10035 8
a10042 8
WitRun * const theWitRun,
witBoolean *   devMode)
{
STANDARD_API_IMPL (
theWitRun,
witGetDevMode, (
devMode))
}
d10047 8
a10054 8
WitRun * const theWitRun,
witBoolean * newPipPggOrder)
{
STANDARD_API_IMPL (
theWitRun,
witGetNewPipPggOrder, (
newPipPggOrder))
}
d10059 8
a10066 8
WitRun * const theWitRun,
witBoolean * nonMrSelSplit)
{
STANDARD_API_IMPL (
theWitRun,
witGetNonMrSelSplit, (
nonMrSelSplit))
}
d10071 10
a10080 10
WitRun * const theWitRun,
const char * const partName,
witBoolean * baSelSplit)
{
STANDARD_API_IMPL (
theWitRun,
witGetPartBaSelSplit, (
partName,
baSelSplit))
}
d10085 8
a10092 8
WitRun * const theWitRun,
witBoolean * srSelSplit)
{
STANDARD_API_IMPL (
theWitRun,
witGetSrSelSplit, (
srSelSplit))
}
d10097 8
a10104 8
WitRun * const     theWitRun,
const char * const theDevCmd)
{
STANDARD_API_IMPL (
theWitRun,
witInterpretDevCmd, (
theDevCmd))
}
d10109 6
a10114 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witIssueFatalMesg, ())
}
d10119 6
a10124 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witListUnissuedMsgs, ())
}
d10131 10
a10140 10
size_t size,
void * * mem)
{
* mem = malloc (size);

return
(* mem != NULL)?
WitINFORMATIONAL_RC:
WitWARNING_RC;
}
d10145 6
a10150 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witNoDependantWitRunVeneersDecr, ())
}
d10155 6
a10160 6
WitRun * const theWitRun)
{
STANDARD_API_IMPL (
theWitRun,
witNoDependantWitRunVeneersIncr, ())
}
d10165 8
a10172 8
WitRun * const theWitRun,
int * isOne)
{
STANDARD_API_IMPL (
theWitRun,
witNoDependantWitRunVeneersIsOne, (
isOne))
}
d10177 12
a10188 12
WitRun * const theWitRun,
const char * const operationName,
const int bopEntryIndex,
const witBoolean meSelSplit)
{
STANDARD_API_IMPL (
theWitRun,
witSetBopEntryMeSelSplit, (
operationName,
bopEntryIndex,
meSelSplit))
}
d10193 8
a10200 8
WitRun * const theWitRun,
const witBoolean newPipPggOrder)
{
STANDARD_API_IMPL (
theWitRun,
witSetNewPipPggOrder, (
newPipPggOrder))
}
d10205 8
a10212 8
WitRun * const theWitRun,
const witBoolean nonMrSelSplit)
{
STANDARD_API_IMPL (
theWitRun,
witSetNonMrSelSplit, (
nonMrSelSplit))
}
d10217 10
a10226 10
WitRun * const theWitRun,
const char * const partName,
const witBoolean baSelSplit)
{
STANDARD_API_IMPL (
theWitRun,
witSetPartBaSelSplit, (
partName,
baSelSplit))
}
d10231 8
a10238 8
WitRun * const theWitRun,
const witBoolean srSelSplit)
{
STANDARD_API_IMPL (
theWitRun,
witSetSrSelSplit, (
srSelSplit))
}
d10243 8
a10250 8
WitRun * const theWitRun,
const witBoolean wit34Allowed)
{
STANDARD_API_IMPL (
theWitRun,
witSetWit34Allowed, (
wit34Allowed))
}
d10259 1
a10259 1
// necessary.
d10272 1
a10272 1
//   Declaration in wit.h when included by wit applications:
d10304 1
a10304 1
WIT_CONST witAttr WitACC_OPT_INIT_METHOD   = nonConst ("accOptInitMethod");
d10306 1
a10306 1
WIT_CONST witAttr WitHEUR_OPT_INIT_METHOD  = nonConst ("heurOptInitMethod");
d10308 1
a10308 1
WIT_CONST witAttr WitSCHED_OPT_INIT_METHOD = nonConst ("schedOptInitMethod");
d10310 1
a10310 1
WIT_CONST witAttr WitCRASH_OPT_INIT_METHOD = nonConst ("crashOptInitMethod");
d10325 3
a10327 3
}
//
// End of extern "C"
d10334 9
a10342 9
const char *  funcNameVal,
int           mesgNumVal,
witReturnCode retCodeVal):

funcName_ (),
mesgNum_  (mesgNumVal),
retCode_  (retCodeVal)
{
strncpy (funcName_, funcNameVal, 50);
d10344 2
a10345 2
funcName_[50] = '\0';
}
d10351 6
a10356 6
funcName_ (),
mesgNum_  (theErrorExc.mesgNum_),
retCode_  (theErrorExc.retCode_)
{
strcpy (funcName_, theErrorExc.funcName_);
}
d10361 2
a10362 2
{
}
d10367 3
a10369 3
{
return funcName_;
}
d10374 3
a10376 3
{
return mesgNum_;
}
d10381 3
a10383 3
{
return retCode_;
}
@


1.364
log
@Removed COIN from WIT.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d13 1
a13 1
// Contains the implementations of all of outer API functions (which are 
d53 17
a69 17
   {                                                                           \
   try                                                                         \
      {                                                                        \
      WitApiMgr::startApiFunc (theWitRun, #innerFunc);                         \
                                                                               \
      theWitRun->innerFunc argList;                                            \
                                                                               \
      theWitRun->myApiMgr ()->finishApiFunc ();                                \
      }                                                                        \
                                                                               \
   catch (...)                                                                 \
      {                                                                        \
      theWitRun->myApiMgr ()->handleAnyExc ();                                 \
      }                                                                        \
                                                                               \
   return theWitRun->myApiMgr ()->apiRc ();                                    \
   }                                                                           \
d81 17
a97 17
   {                                                                           \
   try                                                                         \
      {                                                                        \
      WitApiMgr::startApiFunc (theWitRun, #innerFunc "Dbl");                   \
                                                                               \
      theWitRun->innerFunc argList;                                            \
                                                                               \
      theWitRun->myApiMgr ()->finishApiFunc ();                                \
      }                                                                        \
                                                                               \
   catch (...)                                                                 \
      {                                                                        \
      theWitRun->myApiMgr ()->handleAnyExc ();                                 \
      }                                                                        \
                                                                               \
   return theWitRun->myApiMgr ()->apiRc ();                                    \
   }                                                                           \
d108 6
a113 6
   {
   witAttr nonConst (const char * theCstring)
      {
      return const_cast <char *> (theCstring);
      }
   }
d118 1
a118 1
   {
d125 10
a134 10
      WitRun * const theWitRun,
      const char * const consumingOperationName,
      const char * const consumedPartName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAddBomEntry, (
         consumingOperationName,
         consumedPartName))
   }
d139 10
a148 10
      WitRun * const theWitRun,
      const char * const producingOperationName,
      const char * const producedPartName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAddBopEntry, (
         producingOperationName,
         producedPartName))
   }
d153 10
a162 10
      WitRun * const     theWitRun,
      const char * const theName,
      const float        theValue)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAddDblCplexParSpec, (
         theName,
         theValue))
   }
d167 10
a176 10
      WitRun * const     theWitRun,
      const char * const theName,
      const double       theValue)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witAddDblCplexParSpec, (
         theName,
         theValue))
   }
d181 11
a191 11
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAddDemand, (
         demandedPartName,
         demandName))
   }
 
d195 10
a204 10
      WitRun * const     theWitRun,
      const char * const theName,
      const int          theValue)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAddIntCplexParSpec, (
         theName,
         theValue))
   }
d209 8
a216 8
      WitRun * const theWitRun,
      const char * const operationName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAddOperation, (
         operationName))
   }
d221 11
a231 11
      WitRun * const theWitRun,
      const char * const partName,
      const witAttr partCategory)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAddPart, (
         partName,
         partCategory))
   }
 
d235 8
a242 8
      WitRun * const theWitRun,
      const char * const partAndOperationName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAddPartWithOperation, (
         partAndOperationName))
   }
d247 13
a259 13
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const char * const consumedPartName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAddSubsBomEntry, (
         operationName,
         bomEntryIndex,
         consumedPartName))
   }
 
d263 6
a268 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAdvanceObjItr, ())
   }
d273 14
a286 14
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      int                shipPeriod,
      float              incShipVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witAppendToPipSeq, (
         partName,
         demandName,
         shipPeriod,
         incShipVol))
   }
d291 14
a304 14
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      int                shipPeriod,
      double             incShipVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witAppendToPipSeq, (
         partName,
         demandName,
         shipPeriod,
         incShipVol))
   }
d309 6
a314 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witBuildPip, ())
   }
d319 6
a324 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witClearCplexParSpecs, ())
   }
d329 6
a334 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witClearPegging, ())
   }
d339 6
a344 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witClearPipSeq, ())
   }
d349 6
a354 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witClearStochSoln, ())
   }
d359 16
a374 16
      WitRun * const     dupWitRun,
      const char * const dupOperationName,
      const int          dupBomEntryIndex,
      WitRun * const     origWitRun,
      const char * const origOperationName,
      const int          origBomEntryIndex)
   {
   STANDARD_API_IMPL (
      dupWitRun,
      witCopyBomEntryData, (
         dupOperationName,
         dupBomEntryIndex,
         origWitRun,
         origOperationName,
         origBomEntryIndex))
   }
d379 16
a394 16
      WitRun * const     dupWitRun,
      const char * const dupOperationName,
      const int          dupBopEntryIndex,
      WitRun * const     origWitRun,
      const char * const origOperationName,
      const int          origBopEntryIndex)
   {
   STANDARD_API_IMPL (
      dupWitRun,
      witCopyBopEntryData, (
         dupOperationName,
         dupBopEntryIndex,
         origWitRun,
         origOperationName,
         origBopEntryIndex))
   }
d399 8
a406 8
      WitRun * const dupWitRun,
      WitRun * const origWitRun)
   {
   STANDARD_API_IMPL (
      dupWitRun,
      witCopyData, (
         origWitRun))
   }
d411 16
a426 16
      WitRun * const     dupWitRun,
      const char * const dupPartName,
      const char * const dupDemandName,
      WitRun * const     origWitRun,
      const char * const origPartName,
      const char * const origDemandName)
   {
   STANDARD_API_IMPL (
      dupWitRun,
      witCopyDemandData, (
         dupPartName,
         dupDemandName,
         origWitRun,
         origPartName,
         origDemandName))
   }
d431 12
a442 12
      WitRun * const     dupWitRun,
      const char * const dupOperationName,
      WitRun * const     origWitRun,
      const char * const origOperationName)
   {
   STANDARD_API_IMPL (
      dupWitRun,
      witCopyOperationData, (
         dupOperationName,
         origWitRun,
         origOperationName))
   }
d447 12
a458 12
      WitRun * const     dupWitRun,
      const char * const dupPartName,
      WitRun * const     origWitRun,
      const char * const origPartName)
   {
   STANDARD_API_IMPL (
      dupWitRun,
      witCopyPartData, (
         dupPartName,
         origWitRun,
         origPartName))
   }
d463 20
a482 20
      WitRun * const     dupWitRun,
      const char * const dupOperationName,
      const int          dupBomEntryIndex,
      const int          dupSubsBomEntryIndex,
      WitRun * const     origWitRun,
      const char * const origOperationName,
      const int          origBomEntryIndex,
      const int          origSubsBomEntryIndex)
   {
   STANDARD_API_IMPL (
      dupWitRun,
      witCopySubsBomEntryData, (
         dupOperationName,
         dupBomEntryIndex,
         dupSubsBomEntryIndex,
         origWitRun,
         origOperationName,
         origBomEntryIndex,
         origSubsBomEntryIndex))
   }
d493 3
a495 3
      WitRun * theWitRun)
   {
   witReturnCode theRC;
d497 2
a498 2
   if (theWitRun == NULL)
      return WitINFORMATIONAL_RC;
d500 1
a500 1
   theRC = witDeleteRunInner (theWitRun);
d502 2
a503 2
   if (theRC > WitWARNING_RC)
      return theRC;
d505 1
a505 1
   theWitRun->myApiMgr ()->lockMyWitRun ("witDeleteRun");
d507 1
a507 1
   delete theWitRun;
d509 2
a510 2
   return theRC;
   }
d520 5
a524 5
   {
   STANDARD_API_IMPL (
      theWitRun,
      witDeleteRun, ())
   }
d529 8
a536 8
      WitRun * const theWitRun,
      const char * const fileName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witDisplayData, (
         fileName))
   }
d541 18
a558 18
      WitRun * const theWitRun,
      const int lenLists,
      const char * const * const demandedPartNameList,
      const char * const * const demandNameList,
      const int * const shipPeriodList,
      const float * const desIncVolList,
      float * * incVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witEqHeurAlloc, (
         lenLists,
         demandedPartNameList,
         demandNameList,
         shipPeriodList,
         desIncVolList,
         incVolList))
   }
d563 18
a580 18
      WitRun * const theWitRun,
      const int lenLists,
      const char * const * const demandedPartNameList,
      const char * const * const demandNameList,
      const int * const shipPeriodList,
      const double * const desIncVolList,
      double * * incVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witEqHeurAlloc, (
         lenLists,
         demandedPartNameList,
         demandNameList,
         shipPeriodList,
         desIncVolList,
         incVolList))
   }
d585 20
a604 20
      WitRun * const theWitRun,
      const int lenLists,
      const char * const * const demandedPartNameList,
      const char * const * const demandNameList,
      const int * const shipPeriodList,
      const float * const desIncVolList,
      float * * incVolList,
      const witBoolean * const asapMultiExecList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witEqHeurAllocTwme, (
         lenLists,
         demandedPartNameList,
         demandNameList,
         shipPeriodList,
         desIncVolList,
         incVolList,
         asapMultiExecList))
   }
d609 20
a628 20
      WitRun * const theWitRun,
      const int lenLists,
      const char * const * const demandedPartNameList,
      const char * const * const demandNameList,
      const int * const shipPeriodList,
      const double * const desIncVolList,
      double * * incVolList,
      const witBoolean * const asapMultiExecList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witEqHeurAllocTwme, (
         lenLists,
         demandedPartNameList,
         demandNameList,
         shipPeriodList,
         desIncVolList,
         incVolList,
         asapMultiExecList))
   }
d633 6
a638 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witEvalObjectives, ())
   }
d643 6
a648 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witFinishExtOpt, ())
   }
d653 6
a658 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witFinishHeurAlloc, ())
   }
d665 3
a667 3
      void * mem)
   {
   free (mem);
d669 2
a670 2
   return WitINFORMATIONAL_RC;
   }
d675 7
a681 7
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGeneratePriorities, ())
   }
 
d685 9
a693 9
      WitRun * const theWitRun,
      witBoolean * accAfterSoftLB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetAccAfterSoftLB, (
         accAfterSoftLB))
   }
 
d697 9
a705 9
      WitRun * const theWitRun,
      witBoolean * accAfterOptImp)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetAccAfterOptImp, (
         accAfterOptImp))
   }
 
d709 8
a716 8
      WitRun * const theWitRun,
      witBoolean * accelerated)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetAccelerated, (
         accelerated))
   }
d721 8
a728 8
      WitRun * const theWitRun,
      void * * appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetAppData, (
         appData))
   }
d733 8
a740 8
      WitRun * const theWitRun,
      witBoolean * autoPriority)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetAutoPriority, (
         autoPriority))
   }
d745 12
a756 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      void * * appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryAppData, (
         operationName,
         bomEntryIndex,
         appData))
   }
d761 13
a773 13
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      float * * consRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryConsRate, (
         operationName,
         bomEntryIndex,
         consRate))
   }
 
d777 13
a789 13
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      double * * consRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBomEntryConsRate, (
         operationName,
         bomEntryIndex,
         consRate))
   }
 
d793 12
a804 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      char * * consumedPartName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryConsumedPart, (
         operationName,
         bomEntryIndex,
         consumedPartName))
   }
d809 12
a820 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      int * earliestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryEarliestPeriod, (
         operationName,
         bomEntryIndex,
         earliestPeriod))
   }
d825 12
a836 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      float * execPenalty)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryExecPenalty, (
         operationName,
         bomEntryIndex,
         execPenalty))
   }
d841 12
a852 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      double * execPenalty)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBomEntryExecPenalty, (
         operationName,
         bomEntryIndex,
         execPenalty))
   }
d857 12
a868 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      float * falloutRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryFalloutRate, (
         operationName,
         bomEntryIndex,
         falloutRate))
   }
d873 12
a884 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      double * falloutRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBomEntryFalloutRate, (
         operationName,
         bomEntryIndex,
         falloutRate))
   }
d889 13
a901 13
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      int * * impactPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryImpactPeriod, (
         operationName,
         bomEntryIndex,
         impactPeriod))
   }
 
d905 13
a917 13
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      int * latestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryLatestPeriod, (
         operationName,
         bomEntryIndex,
         latestPeriod))
   }
 
d921 12
a932 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      witBoolean * mandEC)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryMandEC, (
         operationName,
         bomEntryIndex,
         mandEC))
   }
d937 13
a949 13
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      int * nSubsBomEntries)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryNSubsBomEntries, (
         operationName,
         bomEntryIndex,
         nSubsBomEntries))
   }
 
d953 14
a966 14
      WitRun * const     theWitRun,
      const char * const consumingOperationName,
      const int          bomEntryIndex,
      const int          thePer,
      int *              nonSubVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryNonSubVarIndex, (
         consumingOperationName,
         bomEntryIndex,
         thePer,
         nonSubVarIndex))
   }
d971 12
a982 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      float * * offset)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryOffset, (
         operationName,
         bomEntryIndex,
         offset))
   }
d987 12
a998 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      double * * offset)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBomEntryOffset, (
         operationName,
         bomEntryIndex,
         offset))
   }
d1003 12
a1014 12
      WitRun * const     theWitRun,
      const char * const operationName,
      const int          bomEntryIndex,
      witBoolean * *     propRtg)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryPropRtg, (
         operationName,
         bomEntryIndex,
         propRtg))
   }
d1019 12
a1030 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      float * * routingShare)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryRoutingShare, (
         operationName,
         bomEntryIndex,
         routingShare))
   }
d1035 12
a1046 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      double * * routingShare)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBomEntryRoutingShare, (
         operationName,
         bomEntryIndex,
         routingShare))
   }
d1051 12
a1062 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      witBoolean * selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntrySelForDel, (
         operationName,
         bomEntryIndex,
         selForDel))
   }
d1067 12
a1078 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      witBoolean * singleSource)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntrySingleSource, (
         operationName,
         bomEntryIndex,
         singleSource))
   }
d1083 14
a1096 14
      WitRun * const     theWitRun,
      const char * const consumingOperationName,
      const int          bomEntryIndex,
      const int          thePer,
      int *              subConIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntrySubConIndex, (
         consumingOperationName,
         bomEntryIndex,
         thePer,
         subConIndex))
   }
d1101 12
a1112 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      void * * appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryAppData, (
         operationName,
         bopEntryIndex,
         appData))
   }
d1117 12
a1128 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      int * earliestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryEarliestPeriod, (
         operationName,
         bopEntryIndex,
         earliestPeriod))
   }
d1133 12
a1144 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      witBoolean * expAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryExpAllowed, (
         operationName,
         bopEntryIndex,
         expAllowed))
   }
d1149 12
a1160 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      float * expAversion)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryExpAversion, (
         operationName,
         bopEntryIndex,
         expAversion))
   }
d1165 12
a1176 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      double * expAversion)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBopEntryExpAversion, (
         operationName,
         bopEntryIndex,
         expAversion))
   }
d1181 12
a1192 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      int * * impactPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryImpactPeriod, (
         operationName,
         bopEntryIndex,
         impactPeriod))
   }
d1197 12
a1208 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      int * latestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryLatestPeriod, (
         operationName,
         bopEntryIndex,
         latestPeriod))
   }
d1213 12
a1224 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      float * * offset)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryOffset, (
         operationName,
         bopEntryIndex,
         offset))
   }
d1229 12
a1240 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      double * * offset)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBopEntryOffset, (
         operationName,
         bopEntryIndex,
         offset))
   }
d1245 12
a1256 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      float * * productRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryProductRate, (
         operationName,
         bopEntryIndex,
         productRate))
   }
d1261 12
a1272 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      double * * productRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBopEntryProductRate, (
         operationName,
         bopEntryIndex,
         productRate))
   }
d1277 12
a1288 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      char * * producedPartName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryProducedPart, (
         operationName,
         bopEntryIndex,
         producedPartName))
   }
d1293 12
a1304 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      float * * routingShare)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryRoutingShare, (
         operationName,
         bopEntryIndex,
         routingShare))
   }
d1309 12
a1320 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      double * * routingShare)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBopEntryRoutingShare, (
         operationName,
         bopEntryIndex,
         routingShare))
   }
d1325 12
a1336 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      witBoolean * selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntrySelForDel, (
         operationName,
         bopEntryIndex,
         selForDel))
   }
d1341 8
a1348 8
      WitRun * const theWitRun,
      float *        boundsValue)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBoundsValue, (
         boundsValue))
   }
d1353 8
a1360 8
      WitRun * const theWitRun,
      double *       boundsValue)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetBoundsValue, (
         boundsValue))
   }
d1365 9
a1373 9
      WitRun * const theWitRun,
      witBoolean * compPrices)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCompPrices, (
         compPrices))
   }
 
d1377 9
a1385 9
      WitRun * const theWitRun,
      witBoolean * computeCriticalList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetComputeCriticalList, (
         computeCriticalList))
   }
 
d1389 8
a1396 8
      WitRun * const theWitRun,
      witBoolean *   cplexEmbedded)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCplexEmbedded, (
         cplexEmbedded))
   }
d1401 9
a1409 9
      WitRun * const theWitRun,
      float * cplexMipBound)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCplexMipBound, (
         cplexMipBound))
   }
 
d1413 9
a1421 9
      WitRun * const theWitRun,
      double * cplexMipBound)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetCplexMipBound, (
         cplexMipBound))
   }
 
d1425 9
a1433 9
      WitRun * const theWitRun,
      float * cplexMipRelGap)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCplexMipRelGap, (
         cplexMipRelGap))
   }
 
d1437 9
a1445 9
      WitRun * const theWitRun,
      double * cplexMipRelGap)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetCplexMipRelGap, (
         cplexMipRelGap))
   }
 
d1449 9
a1457 9
      WitRun * const theWitRun,
      float * cplexParSpecDblVal)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCplexParSpecDblVal, (
         cplexParSpecDblVal))
   }
 
d1461 9
a1469 9
      WitRun * const theWitRun,
      double * cplexParSpecDblVal)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetCplexParSpecDblVal, (
         cplexParSpecDblVal))
   }
 
d1473 9
a1481 9
      WitRun * const theWitRun,
      int * cplexParSpecIntVal)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCplexParSpecIntVal, (
         cplexParSpecIntVal))
   }
 
d1485 9
a1493 9
      WitRun * const theWitRun,
      char * * cplexParSpecName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCplexParSpecName, (
         cplexParSpecName))
   }
 
d1497 9
a1505 9
      WitRun * const theWitRun,
      int *          cplexStatusCode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCplexStatusCode, (
         cplexStatusCode))
   }
 
d1509 9
a1517 9
      WitRun * const theWitRun,
      char * *       cplexStatusText)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCplexStatusText, (
         cplexStatusText))
   }
 
d1521 13
a1533 13
      WitRun * const theWitRun,
      int * lenCritList,
      char * * * critPartList,
      int * * critPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCriticalList, (
         lenCritList,
         critPartList,
         critPeriod))
   }
  
d1537 9
a1545 9
      WitRun * const theWitRun,
      char * * theObjName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCurrentObjective, (
         theObjName))
   }
 
d1549 9
a1557 9
      WitRun * const theWitRun,
      int * currentScenario)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCurrentScenario, (
         currentScenario))
   }
 
d1561 12
a1572 12
      WitRun * const     theWitRun,
      const char * const theName,
      witBoolean *       dblSpecExists,
      float *            theValue)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDblCplexParSpec, (
         theName,
         dblSpecExists,
         theValue))
   }
d1577 12
a1588 12
      WitRun * const     theWitRun,
      const char * const theName,
      witBoolean *       dblSpecExists,
      double *           theValue)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDblCplexParSpec, (
         theName,
         dblSpecExists,
         theValue))
   }
d1593 12
a1604 12
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      void * * appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandAppData, (
         demandedPartName,
         demandName,
         appData))
   }
d1609 22
a1630 22
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         operationNameList,
      int * *            bopEntryIndexList,
      int * *            execPeriodList,
      float * *          peggedVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandCoExecVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         bopEntryIndexList,
         execPeriodList,
         peggedVolList))
   }
d1635 22
a1656 22
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         operationNameList,
      int * *            bopEntryIndexList,
      int * *            execPeriodList,
      double * *         peggedVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandCoExecVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         bopEntryIndexList,
         execPeriodList,
         peggedVolList))
   }
d1661 20
a1680 20
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         partNameList,
      int * *            periodList,
      float * *          peggedVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandConsVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList))
   }
d1685 20
a1704 20
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         partNameList,
      int * *            periodList,
      double * *         peggedVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandConsVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList))
   }
d1709 16
a1724 16
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * * hardLower,
      float * * softLower,
      float * * hardUpper)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandCumShipBounds, (
         demandedPartName,
         demandName,
         hardLower,
         softLower,
         hardUpper))
   }
d1729 16
a1744 16
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * * hardLower,
      double * * softLower,
      double * * hardUpper)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandCumShipBounds, (
         demandedPartName,
         demandName,
         hardLower,
         softLower,
         hardUpper))
   }
d1749 13
a1761 13
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * * cumShipReward)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandCumShipReward, (
         demandedPartName,
         demandName,
         cumShipReward))
   }
 
d1765 13
a1777 13
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * * cumShipReward)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandCumShipReward, (
         demandedPartName,
         demandName,
         cumShipReward))
   }
 
d1781 14
a1794 14
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          thePer,
      int *              cumShipSlbConIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandCumShipSlbConIndex, (
         partName,
         demandName,
         thePer,
         cumShipSlbConIndex))
   }
d1799 14
a1812 14
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          thePer,
      int *              cumShipSlbvVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandCumShipSlbvVarIndex, (
         partName,
         demandName,
         thePer,
         cumShipSlbvVarIndex))
   }
d1817 14
a1830 14
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          thePer,
      int *              cumShipVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandCumShipVarIndex, (
         partName,
         demandName,
         thePer,
         cumShipVarIndex))
   }
d1835 13
a1847 13
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * * demandVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandDemandVol, (
         demandedPartName,
         demandName,
         demandVol))
   }
 
d1851 13
a1863 13
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * * demandVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandDemandVol, (
         demandedPartName,
         demandName,
         demandVol))
   }
 
d1867 20
a1886 20
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      const int shipPeriod,
      int * lenLists,
      char * * * operationNameList,
      int * * execPeriodList,
      float * * peggedExecVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandExecVolPegging, (
         demandedPartName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         peggedExecVolList))
   }
d1891 20
a1910 20
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      const int shipPeriod,
      int * lenLists,
      char * * * operationNameList,
      int * * execPeriodList,
      double * * peggedExecVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandExecVolPegging, (
         demandedPartName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         peggedExecVolList))
   }
d1915 20
a1934 20
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         operationNameList,
      int * *            execPeriodList,
      float * *          peggedExecVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandExecVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         peggedExecVolList))
   }
d1939 20
a1958 20
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         operationNameList,
      int * *            execPeriodList,
      double * *         peggedExecVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandExecVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         peggedExecVolList))
   }
d1963 12
a1974 12
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      int * focusHorizon)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandFocusHorizon, (
         demandedPartName,
         demandName,
         focusHorizon))
   }
d1979 13
a1991 13
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * * fssShipVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandFssShipVol, (
         demandedPartName,
         demandName,
         fssShipVol))
   }
 
d1996 13
a2008 13
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * * fssShipVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandFssShipVol, (
         demandedPartName,
         demandName,
         fssShipVol))
   }
 
d2012 12
a2023 12
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * intShipVols)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandIntShipVols, (
         partName,
         demandName,
         intShipVols))
   }
d2028 12
a2039 12
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      int * * leadTimeUB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandLeadTimeUB, (
         demandedPartName,
         demandName,
         leadTimeUB))
   }
d2044 12
a2055 12
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      int * * priority)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandPriority, (
         demandedPartName,
         demandName,
         priority))
   }
d2060 20
a2079 20
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         partNameList,
      int * *            periodList,
      float * *          peggedVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandProdVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList))
   }
d2084 20
a2103 20
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         partNameList,
      int * *            periodList,
      double * *         peggedVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandProdVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList))
   }
d2108 12
a2119 12
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * searchInc)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandSearchInc, (
         demandedPartName,
         demandName,
         searchInc))
   }
d2124 12
a2135 12
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * searchInc)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandSearchInc, (
         demandedPartName,
         demandName,
         searchInc))
   }
d2140 12
a2151 12
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      int * selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandSelForDel, (
         demandedPartName,
         demandName,
         selForDel))
   }
d2156 14
a2169 14
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          thePer,
      int *              shipConIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandShipConIndex, (
         partName,
         demandName,
         thePer,
         shipConIndex))
   }
d2174 14
a2187 14
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          thePer,
      int *              shipVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandShipVarIndex, (
         partName,
         demandName,
         thePer,
         shipVarIndex))
   }
d2192 12
a2203 12
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * shipLateAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandShipLateAllowed, (
         partName,
         demandName,
         shipLateAllowed))
   }
d2208 12
a2219 12
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      int * * shipLateUB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandShipLateUB, (
         demandedPartName,
         demandName,
         shipLateUB))
   }
d2224 12
a2235 12
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * * shipReward)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandShipReward, (
         demandedPartName,
         demandName,
         shipReward))
   }
d2240 12
a2251 12
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * * shipReward)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandShipReward, (
         demandedPartName,
         demandName,
         shipReward))
   }
d2256 13
a2268 13
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * * shipVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandShipVol, (
         demandedPartName,
         demandName,
         shipVol))
   }
 
d2272 13
a2284 13
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * * shipVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandShipVol, (
         demandedPartName,
         demandName,
         shipVol))
   }
 
d2288 20
a2307 20
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         partNameList,
      int * *            periodList,
      float * *          peggedVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandSideVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList))
   }
d2312 20
a2331 20
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         partNameList,
      int * *            periodList,
      double * *         peggedVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandSideVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList))
   }
d2336 24
a2359 24
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      const int shipPeriod,
      int * lenLists,
      char * * * operationNameList,
      int * * execPeriodList,
      int * * bomEntryIndexList,
      int * * subsBomEntryIndexList,
      float * * peggedSubVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandSubVolPegging, (
         demandedPartName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         bomEntryIndexList,
         subsBomEntryIndexList,
         peggedSubVolList))
   }
d2364 24
a2387 24
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      const int shipPeriod,
      int * lenLists,
      char * * * operationNameList,
      int * * execPeriodList,
      int * * bomEntryIndexList,
      int * * subsBomEntryIndexList,
      double * * peggedSubVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandSubVolPegging, (
         demandedPartName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         bomEntryIndexList,
         subsBomEntryIndexList,
         peggedSubVolList))
   }
d2392 24
a2415 24
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         operationNameList,
      int * *            bomEntryIndexList,
      int * *            subsBomEntryIndexList,
      int * *            execPeriodList,
      float * *          peggedSubVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandSubVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         bomEntryIndexList,
         subsBomEntryIndexList,
         execPeriodList,
         peggedSubVolList))
   }
d2420 24
a2443 24
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         operationNameList,
      int * *            bomEntryIndexList,
      int * *            subsBomEntryIndexList,
      int * *            execPeriodList,
      double * *         peggedSubVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandSubVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         bomEntryIndexList,
         subsBomEntryIndexList,
         execPeriodList,
         peggedSubVolList))
   }
d2448 20
a2467 20
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         partNameList,
      int * *            periodList,
      float * *          peggedVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandSupplyVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList))
   }
d2472 20
a2491 20
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const int          shipPeriod,
      int *              lenLists,
      char * * *         partNameList,
      int * *            periodList,
      double * *         peggedVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandSupplyVolPip, (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList))
   }
d2496 8
a2503 8
      WitRun * const theWitRun,
      int * equitablity)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetEquitability, (
         equitablity))
   }
d2508 9
a2516 9
      WitRun * const theWitRun,
      witBoolean * execEmptyBom)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetExecEmptyBom, (
         execEmptyBom))
   }
 
d2520 9
a2528 9
      WitRun * const theWitRun,
      float * expCutoff)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetExpCutoff, (
         expCutoff))
   }
 
d2532 9
a2540 9
      WitRun * const theWitRun,
      double * expCutoff)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetExpCutoff, (
         expCutoff))
   }
 
d2544 8
a2551 8
      WitRun * const theWitRun,
      witBoolean *   extOptActive)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetExtOptActive, (
         extOptActive))
   }
d2556 12
a2567 12
      WitRun * const theWitRun,
      int *          lenLists,
      char * * *     partNameList,
      char * * *     operationNameList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetExpCycle, (
         lenLists,
         partNameList,
         operationNameList))
   }
d2572 10
a2581 10
      WitRun * const theWitRun,
      int * *        indices,
      int *          len)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetExtOptIntVarIndices, (
         indices,
         len))
   }
d2586 26
a2611 26
      WitRun * const theWitRun,
      int *          numcols,
      int *          numrows,
      int * *        start,
      int * *        index,
      float * *      value,
      float * *      collb,
      float * *      colub,
      float * *      obj,
      float * *      rowlb,
      float * *      rowub)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetExtOptLpProb, (
         numcols,
         numrows,
         start,
         index,
         value,
         collb,
         colub,
         obj,
         rowlb,
         rowub))
   }
d2616 26
a2641 26
      WitRun * const theWitRun,
      int *          numcols,
      int *          numrows,
      int * *        start,
      int * *        index,
      double * *     value,
      double * *     collb,
      double * *     colub,
      double * *     obj,
      double * *     rowlb,
      double * *     rowub)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetExtOptLpProb, (
         numcols,
         numrows,
         start,
         index,
         value,
         collb,
         colub,
         obj,
         rowlb,
         rowub))
   }
d2646 9
a2654 9
      WitRun * const theWitRun,
      witBoolean * feasible)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetFeasible, (
         feasible))
   }
 
d2658 12
a2669 12
      WitRun * const theWitRun,
      int *          lenList,
      char * * *     partList,
      float * * *    shortageVolList )
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetFocusShortageVol, (
         lenList,
         partList,
         shortageVolList))
   }
d2674 12
a2685 12
      WitRun * const theWitRun,
      int *          lenList,
      char * * *     partList,
      double * * *   shortageVolList )
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetFocusShortageVol, (
         lenList,
         partList,
         shortageVolList))
   }
d2690 8
a2697 8
      WitRun * const theWitRun,
      witBoolean * forcedMultiEq)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetForcedMultiEq, (
         forcedMultiEq))
   }
d2702 8
a2709 8
      WitRun * const theWitRun,
      witBoolean * heurAllocActive)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetHeurAllocActive, (
         heurAllocActive))
   }
d2714 8
a2721 8
      WitRun * const theWitRun,
      witBoolean * highPrecisionWD)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetHighPrecisionWD, (
         highPrecisionWD))
   }
d2726 8
a2733 8
      WitRun * const theWitRun,
      witBoolean * independentOffsets)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetIndependentOffsets, (
         independentOffsets))
   }
d2738 12
a2749 12
      WitRun * const     theWitRun,
      const char * const theName,
      witBoolean *       intSpecExists,
      int *              theValue)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetIntCplexParSpec, (
         theName,
         intSpecExists,
         theValue))
   }
d2754 9
a2762 9
      WitRun * const theWitRun,
      float * lotSizeTol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetLotSizeTol, (
         lotSizeTol))
   }
 
d2766 9
a2774 9
      WitRun * const theWitRun,
      double * lotSizeTol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetLotSizeTol, (
         lotSizeTol))
   }
 
d2778 9
a2786 9
      WitRun * const theWitRun,
      FILE * * mesgFile)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMesgFile, (
         mesgFile))
   }
 
d2790 9
a2798 9
      WitRun * const theWitRun,
      char * * mesgFileAccessMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMesgFileAccessMode, (
         mesgFileAccessMode))
   }
 
d2802 9
a2810 9
      WitRun * const theWitRun,
      char * * mesgFileName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMesgFileName, (
         mesgFileName))
   }
 
d2814 11
a2824 11
      WitRun * const theWitRun,
      const int messageNumber,
      witBoolean * mesgPrintMunber)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMesgPrintNumber, (
         messageNumber,
         mesgPrintMunber))
   }
 
d2828 11
a2838 11
      WitRun * const theWitRun,
      const int messageNumber,
      witBoolean * mesgStopRunning)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMesgStopRunning, (
         messageNumber,
         mesgStopRunning))
   }
 
d2842 11
a2852 11
      WitRun * const theWitRun,
      const int messageNumber,
      witBoolean * mesgThrowErrorExc)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMesgThrowErrorExc, (
         messageNumber,
         mesgThrowErrorExc))
   }
 
d2856 10
a2865 10
      WitRun * const theWitRun,
      const int messageNumber,
      int * mesgTimesPrint)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMesgTimesPrint, (
         messageNumber,
         mesgTimesPrint))
   }
d2870 8
a2877 8
      WitRun * const theWitRun,
      witBoolean * minimalExcess)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMinimalExcess, (
         minimalExcess))
   }
d2882 9
a2890 9
      WitRun * const theWitRun,
      witBoolean * mipMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMipMode, (
         mipMode))
   }
 
d2894 8
a2901 8
      WitRun * const theWitRun,
      witBoolean * modHeurAlloc)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetModHeurAlloc, (
         modHeurAlloc))
   }
d2906 8
a2913 8
      WitRun * const theWitRun,
      witBoolean * multiExec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMultiExec, (
         multiExec))
   }
d2918 9
a2926 9
      WitRun * const theWitRun,
      witBoolean * multiObjMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMultiObjMode, (
         multiObjMode))
   }
 
d2930 9
a2938 9
      WitRun * const theWitRun,
      float * multiObjTol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMultiObjTol, (
         multiObjTol))
   }
 
d2942 9
a2950 9
      WitRun * const theWitRun,
      double * multiObjTol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetMultiObjTol, (
         multiObjTol))
   }
 
d2954 8
a2961 8
      WitRun * const theWitRun,
      witBoolean * multiRoute)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMultiRoute, (
         multiRoute))
   }
d2966 9
a2974 9
      WitRun * const theWitRun,
      int * nPeriods)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetNPeriods, (
         nPeriods))
   }
 
d2978 9
a2986 9
      WitRun * const theWitRun,
      int * nScenarios)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetNScenarios, (
         nScenarios))
   }
 
d2990 8
a2997 8
      WitRun * const theWitRun,
      witBoolean * nstnResidual)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetNstnResidual, (
         nstnResidual))
   }
d3002 10
a3011 10
      WitRun * const theWitRun,
      char * * consumingOperationName,
      int * bomEntryIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjItrBomEntry, (
         consumingOperationName,
         bomEntryIndex))
   }
d3016 10
a3025 10
      WitRun * const theWitRun,
      char * * producingOperationName,
      int * bopEntryIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjItrBopEntry, (
         producingOperationName,
         bopEntryIndex))
   }
d3030 10
a3039 10
      WitRun * const theWitRun,
      char * * demandedPartName,
      char * * demandName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjItrDemand, (
         demandedPartName,
         demandName))
   }
d3044 8
a3051 8
      WitRun * const theWitRun,
      char * * operationName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjItrOperation, (
         operationName))
   }
d3056 8
a3063 8
      WitRun * const theWitRun,
      char * * partName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjItrPart, (
         partName))
   }
d3068 8
a3075 8
      WitRun * const theWitRun,
      witAttr * objItrState)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjItrState, (
         objItrState))
   }
d3080 12
a3091 12
      WitRun * const theWitRun,
      char * * consumingOperationName,
      int * bomEntryIndex,
      int * subsBomEntryIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjItrSubsBomEntry, (
         consumingOperationName,
         bomEntryIndex,
         subsBomEntryIndex))
   }
d3096 8
a3103 8
      WitRun * const theWitRun,
      float *        objValue)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjValue, (
         objValue))
   }
d3108 8
a3115 8
      WitRun * const theWitRun,
      double *       objValue)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetObjValue, (
         objValue))
   }
d3120 10
a3129 10
      WitRun * const theWitRun,
      float * objValue,
      float * boundsValue)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjValues, (
         objValue,
         boundsValue))
   }
d3134 10
a3143 10
      WitRun * const theWitRun,
      double * objValue,
      double * boundsValue)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetObjValues, (
         objValue,
         boundsValue))
   }
d3148 10
a3157 10
      WitRun * const theWitRun,
      int  *         lenList,
      char * * *     objectiveList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjectiveList, (
         lenList,
         objectiveList))
   }
d3162 8
a3169 8
      WitRun * const theWitRun,
      char * * objectiveListSpec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjectiveListSpec, (
         objectiveListSpec))
   }
d3174 9
a3182 9
      WitRun * const theWitRun,
      int * objectiveRank)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjectiveRank, (
         objectiveRank))
   }
 
d3186 10
a3195 10
      WitRun * const theWitRun,
      const char * const operationName,
      void * * appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationAppData, (
         operationName,
         appData))
   }
d3200 14
a3213 14
      WitRun * const theWitRun,
      const char * const operationName,
      float * * hardLower,
      float * * softLower,
      float * * hardUpper)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationExecBounds, (
         operationName,
         hardLower,
         softLower,
         hardUpper))
   }
d3218 14
a3231 14
      WitRun * const theWitRun,
      const char * const operationName,
      double * * hardLower,
      double * * softLower,
      double * * hardUpper)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationExecBounds, (
         operationName,
         hardLower,
         softLower,
         hardUpper))
   }
d3236 10
a3245 10
      WitRun * const theWitRun,
      const char * const operationName,
      float * * execCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationExecCost, (
         operationName,
         execCost))
   }
d3250 10
a3259 10
      WitRun * const theWitRun,
      const char * const operationName,
      double * * execCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationExecCost, (
         operationName,
         execCost))
   }
d3264 10
a3273 10
      WitRun * const theWitRun,
      const char * const operationName,
      float * execPenalty)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationExecPenalty, (
         operationName,
         execPenalty))
   }
d3278 10
a3287 10
      WitRun * const theWitRun,
      const char * const operationName,
      double * execPenalty)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationExecPenalty, (
         operationName,
         execPenalty))
   }
d3292 12
a3303 12
      WitRun * const     theWitRun,
      const char * const operationName,
      const int          thePer,
      int *              execSlbConIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationExecSlbConIndex, (
         operationName,
         thePer,
         execSlbConIndex))
   }
d3308 12
a3319 12
      WitRun * const     theWitRun,
      const char * const operationName,
      const int          thePer,
      int *              execSlbvVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationExecSlbvVarIndex, (
         operationName,
         thePer,
         execSlbvVarIndex))
   }
d3324 12
a3335 12
      WitRun * const     theWitRun,
      const char * const operationName,
      const int          thePer,
      int *              execVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationExecVarIndex, (
         operationName,
         thePer,
         execVarIndex))
   }
d3340 10
a3349 10
      WitRun * const theWitRun,
      const char * const operationName,
      float * * execVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationExecVol, (
         operationName,
         execVol))
   }
d3354 10
a3363 10
      WitRun * const theWitRun,
      const char * const operationName,
      double * * execVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationExecVol, (
         operationName,
         execVol))
   }
d3368 10
a3377 10
      WitRun * const theWitRun,
      const char * const operationName,
      witBoolean * * execVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationExecutable, (
         operationName,
         execVol))
   }
d3382 10
a3391 10
      WitRun * const theWitRun,
      const char * const operationName,
      witBoolean * exists)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationExists, (
         operationName,
         exists))
   }
d3396 10
a3405 10
      WitRun * const theWitRun,
      const char * const operationName,
      float * * fssExecVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationFssExecVol, (
         operationName,
         fssExecVol))
   }
d3410 10
a3419 10
      WitRun * const theWitRun,
      const char * const operationName,
      double * * fssExecVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationFssExecVol, (
         operationName,
         fssExecVol))
   }
d3424 10
a3433 10
      WitRun * const theWitRun,
      const char * const operationName,
      float * * incLotSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationIncLotSize, (
         operationName,
         incLotSize))
   }
d3438 10
a3447 10
      WitRun * const theWitRun,
      const char * const operationName,
      double * * incLotSize)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationIncLotSize, (
         operationName,
         incLotSize))
   }
d3452 10
a3461 10
      WitRun * const theWitRun,
      const char * const operationName,
      float * * incLotSize2)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationIncLotSize2, (
         operationName,
         incLotSize2))
   }
d3466 10
a3475 10
      WitRun * const theWitRun,
      const char * const operationName,
      double * * incLotSize2)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationIncLotSize2, (
         operationName,
         incLotSize2))
   }
d3480 10
a3489 10
      WitRun * const theWitRun,
      const char * const operationName,
      witBoolean * intExecVols)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationIntExecVols, (
         operationName,
         intExecVols))
   }
d3494 10
a3503 10
      WitRun * const theWitRun,
      const char * const operationName,
      float * * lotSize2Thresh)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationLotSize2Thresh, (
         operationName,
         lotSize2Thresh))
   }
d3508 10
a3517 10
      WitRun * const theWitRun,
      const char * const operationName,
      double * * lotSize2Thresh)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationLotSize2Thresh, (
         operationName,
         lotSize2Thresh))
   }
d3522 10
a3531 10
      WitRun * const theWitRun,
      const char * const operationName,
      float * * minLotSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationMinLotSize, (
         operationName,
         minLotSize))
   }
d3536 10
a3545 10
      WitRun * const theWitRun,
      const char * const operationName,
      double * * minLotSize)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationMinLotSize, (
         operationName,
         minLotSize))
   }
d3550 10
a3559 10
      WitRun * const theWitRun,
      const char * const operationName,
      float * * minLotSize2)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationMinLotSize2, (
         operationName,
         minLotSize2))
   }
d3564 10
a3573 10
      WitRun * const theWitRun,
      const char * const operationName,
      double * * minLotSize2)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationMinLotSize2, (
         operationName,
         minLotSize2))
   }
d3578 10
a3587 10
      WitRun * const theWitRun,
      const char * const operationName,
      float * * mrpExecVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationMrpExecVol, (
         operationName,
         mrpExecVol))
   }
d3592 10
a3601 10
      WitRun * const theWitRun,
      const char * const operationName,
      double * * mrpExecVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationMrpExecVol, (
         operationName,
         mrpExecVol))
   }
d3606 10
a3615 10
      WitRun * const theWitRun,
      const char * const operationName,
      int * nBomEntries)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationNBomEntries, (
         operationName,
         nBomEntries))
   }
d3620 10
a3629 10
      WitRun * const theWitRun,
      const char * const operationName,
      int * nBopEntries)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationNBopEntries, (
         operationName,
         nBopEntries))
   }
d3634 10
a3643 10
      WitRun * const theWitRun,
      const char * const operationName,
      int * objectStage)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationObjectStage, (
         operationName,
         objectStage))
   }
d3648 10
a3657 10
      WitRun * const theWitRun,
      const char * const operationName,
      witBoolean * selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationSelForDel, (
         operationName,
         selForDel))
   }
d3662 10
a3671 10
      WitRun * const theWitRun,
      int * lenOperationList,
      char * * * operationList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperations, (
         lenOperationList,
         operationList))
   }
d3676 10
a3685 10
      WitRun * const theWitRun,
      const char * const operationName,
      witBoolean * twoLevelLotSizes)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationTwoLevelLotSizes, (
         operationName,
         twoLevelLotSizes))
   }
d3690 10
a3699 10
      WitRun * const theWitRun,
      const char * const operationName,
      float * * yieldRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationYieldRate, (
         operationName,
         yieldRate))
   }
d3704 10
a3713 10
      WitRun * const theWitRun,
      const char * const operationName,
      double * * yieldRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationYieldRate, (
         operationName,
         yieldRate))
   }
d3718 9
a3726 9
      WitRun * const theWitRun,
      witAttr * optInitMethod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOptInitMethod, (
         optInitMethod))
   }
 
d3730 9
a3738 9
      WitRun * const theWitRun,
      int * outputPrecision)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOutputPrecision, (
         outputPrecision))
   }
 
d3742 8
a3749 8
      WitRun * const theWitRun,
      witBoolean * postprocessed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPostprocessed, (
         postprocessed))
   }
d3754 11
a3764 11
      WitRun * const theWitRun,
      const char * const partName,
      void * * appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartAppData, (
         partName,
         appData))
   }
 
d3768 10
a3777 10
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * asapPipOrder)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartAsapPipOrder, (
         partName,
         asapPipOrder))
   }
d3782 12
a3793 12
      WitRun * const theWitRun,
      const char * const partName,
      int * lenList,
      char * * * partNameList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartBelowList, (
         partName,
         lenList,
         partNameList))
   }
d3798 10
a3807 10
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * boundedLeadTimes)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartBoundedLeadTimes, (
         partName,
         boundedLeadTimes))
   }
d3812 10
a3821 10
      WitRun * const theWitRun,
      const char * const partName,
      int * * buildAheadUB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartBuildAheadUB, (
         partName,
         buildAheadUB))
   }
d3826 10
a3835 10
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * buildAsap)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartBuildAsap, (
         partName,
         buildAsap))
   }
d3840 10
a3849 10
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * buildNstn)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartBuildNstn, (
         partName,
         buildNstn))
   }
d3854 10
a3863 10
      WitRun * const theWitRun,
      const char * const partName,
      float * * consVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartConsVol, (
         partName,
         consVol))
   }
d3868 10
a3877 10
      WitRun * const theWitRun,
      const char * const partName,
      double * * consVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartConsVol, (
         partName,
         consVol))
   }
d3882 14
a3895 14
      WitRun * const theWitRun,
      const char * const partName,
      const int consIndex,
      char * * consumingOperationName,
      int * bomEntryIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartConsumingBomEntry, (
         partName,
         consIndex,
         consumingOperationName,
         bomEntryIndex))
   }
d3900 16
a3915 16
      WitRun * const theWitRun,
      const char * const partName,
      const int consIndex,
      char * * consumingOperationName,
      int * bomEntryIndex,
      int * subsBomEntryIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartConsumingSubsBomEntry, (
         partName,
         consIndex,
         consumingOperationName,
         bomEntryIndex,
         subsBomEntryIndex))
   }
d3920 13
a3932 13
      WitRun * const theWitRun,
      const char * const partName,
      int * lenDemandList,
      char * * * demandList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartDemands, (
         partName,
         lenDemandList,
         demandList))
   }
 
d3936 11
a3946 11
      WitRun * const theWitRun,
      const char * const partName,
      witAttr * category)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartCategory, (
         partName,
         category))
   }
 
d3950 10
a3959 10
      WitRun * const theWitRun,
      const char * const partName,
      float * * excessVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartExcessVol, (
         partName,
         excessVol))
   }
d3964 10
a3973 10
      WitRun * const theWitRun,
      const char * const partName,
      double * * excessVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartExcessVol, (
         partName,
         excessVol))
   }
d3978 10
a3987 10
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * exists)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartExists, (
         partName,
         exists))
   }
d3992 10
a4001 10
      WitRun * const theWitRun,
      const char * const partName,
      float * * shortageVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartFocusShortageVol, (
         partName,
         shortageVol))
   }
d4006 10
a4015 10
      WitRun * const theWitRun,
      const char * const partName,
      double * * shortageVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartFocusShortageVol, (
         partName,
         shortageVol))
   }
d4020 10
a4029 10
      WitRun * const theWitRun,
      const char * const partName,
      float * * mrpConsVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartMrpConsVol, (
         partName,
         mrpConsVol))
   }
d4034 10
a4043 10
      WitRun * const theWitRun,
      const char * const partName,
      double * * mrpConsVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartMrpConsVol, (
         partName,
         mrpConsVol))
   }
d4048 10
a4057 10
      WitRun * const theWitRun,
      const char * const partName,
      float * * mrpExcessVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartMrpExcessVol, (
         partName,
         mrpExcessVol))
   }
d4062 10
a4071 10
      WitRun * const theWitRun,
      const char * const partName,
      double * * mrpExcessVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartMrpExcessVol, (
         partName,
         mrpExcessVol))
   }
d4076 10
a4085 10
      WitRun * const theWitRun,
      const char * const partName,
      float * * mrpResidualVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartMrpResidualVol, (
         partName,
         mrpResidualVol))
   }
d4090 10
a4099 10
      WitRun * const theWitRun,
      const char * const partName,
      double * * mrpResidualVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartMrpResidualVol, (
         partName,
         mrpResidualVol))
   }
d4104 10
a4113 10
      WitRun * const theWitRun,
      const char * const partName,
      int * nConsumingBomEntries)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartNConsumingBomEntries, (
         partName,
         nConsumingBomEntries))
   }
d4118 10
a4127 10
      WitRun * const theWitRun,
      const char * const partName,
      int * nConsumingSubsBomEntries)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartNConsumingSubsBomEntries, (
         partName,
         nConsumingSubsBomEntries))
   }
d4132 10
a4141 10
      WitRun * const theWitRun,
      const char * const partName,
      int * nProducingBopEntries)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartNProducingBopEntries, (
         partName,
         nProducingBopEntries))
   }
d4146 10
a4155 10
      WitRun * const     theWitRun,
      const char * const partName,
      int *              objectStage)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartObjectStage, (
         partName,
         objectStage))
   }
d4160 10
a4169 10
      WitRun * const theWitRun,
      const char * const partName,
      float * * prodVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartProdVol, (
         partName,
         prodVol))
   }
d4174 10
a4183 10
      WitRun * const theWitRun,
      const char * const partName,
      double * * prodVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartProdVol, (
         partName,
         prodVol))
   }
d4188 14
a4201 14
      WitRun * const theWitRun,
      const char * const partName,
      const int prodIndex,
      char * * producingOperationName,
      int * bopEntryIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartProducingBopEntry, (
         partName,
         prodIndex,
         producingOperationName,
         bopEntryIndex))
   }
d4206 10
a4215 10
      WitRun * const     theWitRun,
      const char * const partName,
      witBoolean * *     propRtg)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartPropRtg, (
         partName,
         propRtg))
   }
d4220 11
a4230 11
      WitRun * const theWitRun,
      const char * const partName,
      float * * reqVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartReqVol, (
         partName,
         reqVol))
   }
 
d4234 11
a4244 11
      WitRun * const theWitRun,
      const char * const partName,
      double * * reqVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartReqVol, (
         partName,
         reqVol))
   }
 
d4248 10
a4257 10
      WitRun * const theWitRun,
      const char * const partName,
      float * * residualVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartResidualVol, (
         partName,
         residualVol))
   }
d4262 10
a4271 10
      WitRun * const theWitRun,
      const char * const partName,
      double * * residualVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartResidualVol, (
         partName,
         residualVol))
   }
d4276 12
a4287 12
      WitRun * const     theWitRun,
      const char * const partName,
      const int          thePer,
      int *              resourceConIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartResourceConIndex, (
         partName,
         thePer,
         resourceConIndex))
   }
d4292 11
a4302 11
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * scrapAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartScrapAllowed, (
         partName,
         scrapAllowed))
   }
 
d4306 11
a4316 11
      WitRun * const theWitRun,
      const char * const partName,
      float * * scrapCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartScrapCost, (
         partName,
         scrapCost))
   }
 
d4320 11
a4330 11
      WitRun * const theWitRun,
      const char * const partName,
      double * * scrapCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartScrapCost, (
         partName,
         scrapCost))
   }
 
d4334 12
a4345 12
      WitRun * const     theWitRun,
      const char * const partName,
      const int          thePer,
      int *              scrapVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartScrapVarIndex, (
         partName,
         thePer,
         scrapVarIndex))
   }
d4350 11
a4360 11
      WitRun * const theWitRun,
      const char * const partName,
      float * * scrapVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartScrapVol, (
         partName,
         scrapVol))
   }
 
d4364 11
a4374 11
      WitRun * const theWitRun,
      const char * const partName,
      double * * scrapVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartScrapVol, (
         partName,
         scrapVol))
   }
 
d4378 10
a4387 10
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartSelForDel, (
         partName,
         selForDel))
   }
d4392 11
a4402 11
      WitRun * const theWitRun,
      const char * const partName,
      float * * shadowPrice)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartShadowPrice, (
         partName,
         shadowPrice))
   }
 
d4406 11
a4416 11
      WitRun * const theWitRun,
      const char * const partName,
      double * * shadowPrice)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartShadowPrice, (
         partName,
         shadowPrice))
   }
 
d4420 11
a4430 11
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * singleSource)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartSingleSource, (
         partName,
         singleSource))
   }
 
d4434 15
a4448 15
      WitRun * const theWitRun,
      const char * const partName,
      float * * hardLower,
      float * * softLower,
      float * * hardUpper)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartStockBounds, (
         partName,
         hardLower,
         softLower,
         hardUpper))
   }
 
d4452 15
a4466 15
      WitRun * const theWitRun,
      const char * const partName,
      double * * hardLower,
      double * * softLower,
      double * * hardUpper)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartStockBounds, (
         partName,
         hardLower,
         softLower,
         hardUpper))
   }
 
d4470 10
a4479 10
      WitRun * const theWitRun,
      const char * const partName,
      float * * stockCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartStockCost, (
         partName,
         stockCost))
   }
d4484 10
a4493 10
      WitRun * const theWitRun,
      const char * const partName,
      double * * stockCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartStockCost, (
         partName,
         stockCost))
   }
d4498 12
a4509 12
      WitRun * const     theWitRun,
      const char * const partName,
      const int          thePer,
      int *              stockSlbConIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartStockSlbConIndex, (
         partName,
         thePer,
         stockSlbConIndex))
   }
d4514 12
a4525 12
      WitRun * const     theWitRun,
      const char * const partName,
      const int          thePer,
      int *              stockSlbvVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartStockSlbvVarIndex, (
         partName,
         thePer,
         stockSlbvVarIndex))
   }
d4530 12
a4541 12
      WitRun * const     theWitRun,
      const char * const partName,
      const int          thePer,
      int *              stockVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartStockVarIndex, (
         partName,
         thePer,
         stockVarIndex))
   }
d4546 10
a4555 10
      WitRun * const theWitRun,
      const char * const partName,
      float * * stockVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartStockVol, (
         partName,
         stockVol))
   }
d4560 10
a4569 10
      WitRun * const theWitRun,
      const char * const partName,
      double * * stockVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartStockVol, (
         partName,
         stockVol))
   }
d4574 10
a4583 10
      WitRun * const theWitRun,
      const char * const partName,
      float * * supplyVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartSupplyVol, (
         partName,
         supplyVol))
   }
d4588 10
a4597 10
      WitRun * const theWitRun,
      const char * const partName,
      double * * supplyVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartSupplyVol, (
         partName,
         supplyVol))
   }
d4602 10
a4611 10
      WitRun * const theWitRun,
      int * lenPartList,
      char * * * partList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetParts, (
         lenPartList,
         partList))
   }
d4616 8
a4623 8
      WitRun * const theWitRun,
      witBoolean * penExec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPenExec, (
         penExec))
   }
d4628 8
a4635 8
      WitRun * const theWitRun,
      witBoolean * perfPegging)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPerfPegging, (
         perfPegging))
   }
d4640 8
a4647 8
      WitRun * const theWitRun,
      int * *        periodStage)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPeriodStage, (
         periodStage))
   }
d4652 8
a4659 8
      WitRun * const theWitRun,
      witBoolean * pipExists)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPipExists, (
         pipExists))
   }
d4664 16
a4679 16
      WitRun * const theWitRun,
      int *          lenLists,
      char * * *     partNameList,
      char * * *     demandNameList,
      int * *        shipPerList,
      float * *      incShipVolList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPipSeq, (
         lenLists,
         partNameList,
         demandNameList,
         shipPerList,
         incShipVolList))
   }
d4684 16
a4699 16
      WitRun * const theWitRun,
      int *          lenLists,
      char * * *     partNameList,
      char * * *     demandNameList,
      int * *        shipPerList,
      double * *     incShipVolList)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPipSeq, (
         lenLists,
         partNameList,
         demandNameList,
         shipPerList,
         incShipVolList))
   }
d4704 8
a4711 8
      WitRun * const theWitRun,
      witBoolean * pipSeqFromHeur)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPipSeqFromHeur, (
         pipSeqFromHeur))
   }
d4716 18
a4733 18
      WitRun * const theWitRun,
      int *          lenLists,
      char * * *     critPartNameList,
      int * *        critPerList,
      char * * *     demPartNameList,
      char * * *     demandNameList,
      int * *        shipPerList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPgdCritList, (
         lenLists,
         critPartNameList,
         critPerList,
         demPartNameList,
         demandNameList,
         shipPerList))
   }
d4738 9
a4746 9
      WitRun * const theWitRun,
      witBoolean * pgdCritListMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPgdCritListMode, (
         pgdCritListMode))
   }
 
d4750 8
a4757 8
      WitRun * const theWitRun,
      witBoolean * prefHighStockSLBs)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPrefHighStockSLBs, (
         prefHighStockSLBs))
   }
d4762 8
a4769 8
      WitRun * const theWitRun,
      witBoolean * preprocessed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPreprocessed, (
         preprocessed))
   }
d4774 9
a4782 9
      WitRun * const theWitRun,
      float * probability)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetProbability, (
         probability))
   }
 
d4786 9
a4794 9
      WitRun * const theWitRun,
      double * probability)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetProbability, (
         probability))
   }
 
d4798 8
a4805 8
      WitRun * const theWitRun,
      witBoolean * respectStockSLBs)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetRespectStockSLBs, (
         respectStockSLBs))
   }
d4810 8
a4817 8
      WitRun * const theWitRun,
      witBoolean * roundReqVols)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetRoundReqVols, (
         roundReqVols))
   }
d4822 8
a4829 8
      WitRun * const theWitRun,
      witBoolean * selSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSelSplit, (
         selSplit))
   }
d4834 8
a4841 8
      WitRun * const theWitRun,
      witBoolean * selectionRecovery)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSelectionRecovery, (
         selectionRecovery))
   }
d4846 8
a4853 8
      WitRun * const theWitRun,
      witBoolean * skipFailures)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSkipFailures, (
         skipFailures))
   }
d4858 9
a4866 9
      WitRun * const theWitRun,
      char * * solverLogFileName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSolverLogFileName, (
         solverLogFileName))
   }
 
d4870 8
a4877 8
      WitRun * const theWitRun,
      witBoolean *   stageByObject)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetStageByObject, (
         stageByObject))
   }
d4882 8
a4889 8
      WitRun * const theWitRun,
      witBoolean * stochMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetStochMode, (
         stochMode))
   }
d4894 8
a4901 8
      WitRun * const theWitRun,
      witBoolean * stochSolnMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetStochSolnMode, (
         stochSolnMode))
   }
d4906 8
a4913 8
      WitRun * const theWitRun,
      witBoolean * stockReallocation)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetStockReallocation, (
         stockReallocation))
   }
d4918 14
a4931 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      void * * appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryAppData, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         appData))
   }
d4936 14
a4949 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * * consRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryConsRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         consRate))
   }
d4954 14
a4967 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * * consRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryConsRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         consRate))
   }
d4972 15
a4986 15
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      char * * consumedPart)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryConsumedPart, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         consumedPart))
   }
 
d4990 15
a5004 15
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      int * earliestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryEarliestPeriod, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         earliestPeriod))
   }
 
d5008 14
a5021 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * execPenalty)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryExecPenalty, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         execPenalty))
   }
d5026 14
a5039 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * execPenalty)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryExecPenalty, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         execPenalty))
   }
d5044 14
a5057 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      witBoolean * expAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryExpAllowed, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expAllowed))
   }
d5062 14
a5075 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * expNetAversion)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryExpNetAversion, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expNetAversion))
   }
d5080 14
a5093 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * expNetAversion)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryExpNetAversion, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expNetAversion))
   }
d5098 14
a5111 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * falloutRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryFalloutRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         falloutRate))
   }
d5116 14
a5129 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * falloutRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryFalloutRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         falloutRate))
   }
d5134 14
a5147 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * * fssSubVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryFssSubVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         fssSubVol))
   }
d5152 14
a5165 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * * fssSubVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryFssSubVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         fssSubVol))
   }
d5170 14
a5183 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      int * * impactPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryImpactPeriod, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         impactPeriod))
   }
d5188 14
a5201 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      witBoolean * intSubVols)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryIntSubVols, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         intSubVols))
   }
d5206 15
a5220 15
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      int * latestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryLatestPeriod, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         latestPeriod))
   }
 
d5224 14
a5237 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      witBoolean * mrpNetAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryMrpNetAllowed, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         mrpNetAllowed))
   }
d5242 14
a5255 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * * mrpSubVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryMrpSubVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         mrpSubVol))
   }
d5260 14
a5273 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * * mrpSubVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryMrpSubVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         mrpSubVol))
   }
d5278 14
a5291 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      witBoolean * netAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryNetAllowed, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         netAllowed))
   }
d5296 15
a5310 15
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * * obj1SubCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryObj1SubCost, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj1SubCost))
   }
 
d5314 15
a5328 15
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * * obj1SubCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryObj1SubCost, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj1SubCost))
   }
 
d5332 14
a5345 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * * offset)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryOffset, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         offset))
   }
d5350 14
a5363 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * * offset)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryOffset, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         offset))
   }
d5368 14
a5381 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * * routingShare)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryRoutingShare, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         routingShare))
   }
d5386 14
a5399 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * * routingShare)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryRoutingShare, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         routingShare))
   }
d5404 14
a5417 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      witBoolean * selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntrySelForDel, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         selForDel))
   }
d5422 15
a5436 15
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * * subCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntrySubCost, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subCost))
   }
 
d5440 15
a5454 15
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * * subCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntrySubCost, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subCost))
   }
 
d5458 16
a5473 16
      WitRun * const     theWitRun,
      const char * const consumingOperationName,
      const int          bomEntryIndex,
      const int          subsBomEntryIndex,
      const int          thePer,
      int *              subVarIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntrySubVarIndex, (
         consumingOperationName,
         bomEntryIndex,
         subsBomEntryIndex,
         thePer,
         subVarIndex))
   }
d5478 14
a5491 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * * subVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntrySubVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subVol))
   }
d5496 14
a5509 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * * subVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntrySubVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subVol))
   }
d5514 8
a5521 8
      WitRun * const theWitRun,
      witBoolean * tieBreakPropRt)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetTieBreakPropRt, (
         tieBreakPropRt))
   }
d5526 8
a5533 8
      WitRun * const theWitRun,
      char * * title)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetTitle, (
         title))
   }
d5538 8
a5545 8
      WitRun * const theWitRun,
      witBoolean * truncOffsets)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetTruncOffsets, (
         truncOffsets))
   }
d5550 8
a5557 8
      WitRun * const theWitRun,
      witBoolean * twoWayMultiExec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetTwoWayMultiExec, (
         twoWayMultiExec))
   }
d5562 8
a5569 8
      WitRun * const theWitRun,
      witBoolean * useFocusHorizons)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetUseFocusHorizons, (
         useFocusHorizons))
   }
d5574 8
a5581 8
      WitRun * const theWitRun,
      witBoolean * userHeurStart)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetUserHeurStart, (
         userHeurStart))
   }
d5586 9
a5594 9
      WitRun * const theWitRun,
      float * wbounds)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetWbounds, (
         wbounds))
   }
 
d5598 9
a5606 9
      WitRun * const theWitRun,
      double * wbounds)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetWbounds, (
         wbounds))
   }
 
d5610 8
a5617 8
      WitRun * const theWitRun,
      witBoolean * wit34Compatible)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetWit34Compatible, (
         wit34Compatible))
   }
d5622 7
a5628 7
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witHeurImplode, ())
   }
 
d5632 16
a5647 16
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      const int shipPeriod,
      const float desIncVol,
      float * incVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witIncHeurAlloc, (
         demandedPartName,
         demandName,
         shipPeriod,
         desIncVol,
         incVol))
   }
d5652 16
a5667 16
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      const int shipPeriod,
      const double desIncVol,
      double * incVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witIncHeurAlloc, (
         demandedPartName,
         demandName,
         shipPeriod,
         desIncVol,
         incVol))
   }
d5672 18
a5689 18
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      const int shipPeriod,
      const float desIncVol,
      float * incVol,
      witBoolean asapMultiExec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witIncHeurAllocTwme, (
         demandedPartName,
         demandName,
         shipPeriod,
         desIncVol,
         incVol,
         asapMultiExec))
   }
d5694 18
a5711 18
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      const int shipPeriod,
      const double desIncVol,
      double * incVol,
      witBoolean asapMultiExec)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witIncHeurAllocTwme, (
         demandedPartName,
         demandName,
         shipPeriod,
         desIncVol,
         incVol,
         asapMultiExec))
   }
d5716 6
a5721 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witInitialize, ())
   }
d5726 7
a5732 7
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witMrp, ())
   }
 
d5738 10
a5747 10
      WitRun * * theWitRunPtr)
   {
   forbidNullArg (theWitRunPtr, "theWitRunPtr", "witNewRun");

   * theWitRunPtr = WitRun::newInstance ();

   STANDARD_API_IMPL (
      (* theWitRunPtr),
      witNewRun, ())
   }
d5752 6
a5757 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witOptImplode, ())
   }
d5762 7
a5768 7
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witPostprocess, ())
   }
 
d5772 7
a5778 7
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witPreprocess, ())
   }
 
d5782 6
a5787 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witPurgeData, ())
   }
d5792 9
a5800 9
      WitRun * const theWitRun,
      const char * const fileName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witReadData, (
         fileName))
   }
 
d5804 6
a5809 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witResetObjItr, ())
   }
d5814 9
a5822 9
      WitRun * const theWitRun,
      const witBoolean accAfterSoftLB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetAccAfterSoftLB, (
         accAfterSoftLB))
   }
 
d5826 8
a5833 8
      WitRun * const theWitRun,
      const witBoolean accAfterOptImp)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetAccAfterOptImp, (
         accAfterOptImp))
   }
d5838 9
a5846 9
      WitRun * const theWitRun,
      void * const appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetAppData, (
         appData))
   }
 
d5850 9
a5858 9
      WitRun * const theWitRun,
      const witBoolean autoPriority)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetAutoPriority, (
         autoPriority))
   }
  
d5862 12
a5873 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      void * const appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryAppData, (
         operationName,
         bomEntryIndex,
         appData))
   }
d5878 13
a5890 13
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const float * consRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryConsRate, (
         operationName,
         bomEntryIndex,
         consRate))
   }
 
d5894 13
a5906 13
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const double * consRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetBomEntryConsRate, (
         operationName,
         bomEntryIndex,
         consRate))
   }
 
d5910 13
a5922 13
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int earliestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryEarliestPeriod, (
         operationName,
         bomEntryIndex,
         earliestPeriod))
   }
 
d5926 12
a5937 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const float execPenalty)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryExecPenalty, (
         operationName,
         bomEntryIndex,
         execPenalty))
   }
d5942 12
a5953 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const double execPenalty)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetBomEntryExecPenalty, (
         operationName,
         bomEntryIndex,
         execPenalty))
   }
d5958 12
a5969 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const float falloutRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryFalloutRate, (
         operationName,
         bomEntryIndex,
         falloutRate))
   }
d5974 12
a5985 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const double falloutRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetBomEntryFalloutRate, (
         operationName,
         bomEntryIndex,
         falloutRate))
   }
d5990 13
a6002 13
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int latestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryLatestPeriod, (
         operationName,
         bomEntryIndex,
         latestPeriod))
   }
 
d6006 12
a6017 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const witBoolean mandEC)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryMandEC, (
         operationName,
         bomEntryIndex,
         mandEC))
   }
d6022 12
a6033 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const float * const offset)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryOffset, (
         operationName,
         bomEntryIndex,
         offset))
   }
d6038 12
a6049 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const double * const offset)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetBomEntryOffset, (
         operationName,
         bomEntryIndex,
         offset))
   }
d6054 12
a6065 12
      WitRun * const           theWitRun,
      const char * const       operationName,
      const int                bomEntryIndex,
      const witBoolean * const propRtg)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryPropRtg, (
         operationName,
         bomEntryIndex,
         propRtg))
   }
d6070 12
a6081 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const float * routingShare)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryRoutingShare, (
         operationName,
         bomEntryIndex,
         routingShare))
   }
d6086 12
a6097 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const double * routingShare)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetBomEntryRoutingShare, (
         operationName,
         bomEntryIndex,
         routingShare))
   }
d6102 12
a6113 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const witBoolean selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntrySelForDel, (
         operationName,
         bomEntryIndex,
         selForDel))
   }
d6118 12
a6129 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const witBoolean singleSource)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntrySingleSource, (
         operationName,
         bomEntryIndex,
         singleSource))
   }
d6134 12
a6145 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      void * const appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryAppData, (
         operationName,
         bopEntryIndex,
         appData))
   }
d6150 12
a6161 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const int earliestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryEarliestPeriod, (
         operationName,
         bopEntryIndex,
         earliestPeriod))
   }
d6166 12
a6177 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const witBoolean expAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryExpAllowed, (
         operationName,
         bopEntryIndex,
         expAllowed))
   }
d6182 12
a6193 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const float expAversion)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryExpAversion, (
         operationName,
         bopEntryIndex,
         expAversion))
   }
d6198 12
a6209 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const double expAversion)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetBopEntryExpAversion, (
         operationName,
         bopEntryIndex,
         expAversion))
   }
d6214 12
a6225 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const int latestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryLatestPeriod, (
         operationName,
         bopEntryIndex,
         latestPeriod))
   }
d6230 12
a6241 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const float * const offset)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryOffset, (
         operationName,
         bopEntryIndex,
         offset))
   }
d6246 12
a6257 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const double * const offset)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetBopEntryOffset, (
         operationName,
         bopEntryIndex,
         offset))
   }
d6262 12
a6273 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const float * productRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryProductRate, (
         operationName,
         bopEntryIndex,
         productRate))
   }
d6278 12
a6289 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const double * productRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetBopEntryProductRate, (
         operationName,
         bopEntryIndex,
         productRate))
   }
d6294 12
a6305 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const float * routingShare)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryRoutingShare, (
         operationName,
         bopEntryIndex,
         routingShare))
   }
d6309 13
a6321 13
WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryRoutingShareDbl ( 
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const double * routingShare)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetBopEntryRoutingShare, (
         operationName,
         bopEntryIndex,
         routingShare))
   }
d6326 12
a6337 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const witBoolean selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntrySelForDel, (
         operationName,
         bopEntryIndex,
         selForDel))
   }
d6342 8
a6349 8
      WitRun * const theWitRun,
      const witBoolean compPrices)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetCompPrices, (
         compPrices))
   }
d6354 9
a6362 9
      WitRun * const theWitRun,
      const witBoolean computeCriticalList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetComputeCriticalList, (
         computeCriticalList))
   }
  
d6366 9
a6374 9
      WitRun * const theWitRun,
      const float cplexParSpecDblVal)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetCplexParSpecDblVal, (
         cplexParSpecDblVal))
   }
 
d6378 9
a6386 9
      WitRun * const theWitRun,
      const double cplexParSpecDblVal)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetCplexParSpecDblVal, (
         cplexParSpecDblVal))
   }
 
d6390 9
a6398 9
      WitRun * const theWitRun,
      const int cplexParSpecIntVal)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetCplexParSpecIntVal, (
         cplexParSpecIntVal))
   }
 
d6402 9
a6410 9
      WitRun * const theWitRun,
      const char * const cplexParSpecName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetCplexParSpecName, (
         cplexParSpecName))
   }
  
d6414 9
a6422 9
      WitRun * const theWitRun,
      const char * const theObjName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetCurrentObjective, (
         theObjName))
   }
  
d6426 9
a6434 9
      WitRun * const theWitRun,
      const int currentScenario)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetCurrentScenario, (
         currentScenario))
   }
 
d6438 13
a6450 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      void * const appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandAppData, (
         partName,
         demandName,
         appData))
   }
 
d6454 16
a6469 16
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float * const hardLower,
      const float * const softLower,
      const float * const hardUpper)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandCumShipBounds, (
         partName,
         demandName,
         hardLower,
         softLower,
         hardUpper))
   }
d6473 17
a6489 17
WIT_DECLSPEC witReturnCode STDCALL witSetDemandCumShipBoundsDbl ( 
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double * const hardLower,
      const double * const softLower,
      const double * const hardUpper)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandCumShipBounds, (
         partName,
         demandName,
         hardLower,
         softLower,
         hardUpper))
   }
d6494 29
a6522 29
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float * const cumShipReward)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandCumShipReward, (
         partName,
         demandName,
         cumShipReward))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandCumShipRewardDbl ( 
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double * const cumShipReward)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandCumShipReward, (
         partName,
         demandName,
         cumShipReward))
   }
 
d6526 12
a6537 12
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const demandName,
      const char * const newName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandDemandName, (
         partName,
         demandName,
         newName))
   }
d6542 13
a6554 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float * const demandVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandDemandVol, (
         partName,
         demandName,
         demandVol))
   }
 
d6558 13
a6570 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double * const demandVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandDemandVol, (
         partName,
         demandName,
         demandVol))
   }
 
d6574 13
a6586 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int focusHorizon)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandFocusHorizon, (
         partName,
         demandName,
         focusHorizon))
   }
 
d6590 12
a6601 12
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float * const fssShipVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandFssShipVol, (
         partName,
         demandName,
         fssShipVol))
   }
d6606 12
a6617 12
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double * const fssShipVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandFssShipVol, (
         partName,
         demandName,
         fssShipVol))
   }
d6622 13
a6634 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int intShipVols)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandIntShipVols, (
         partName,
         demandName,
         intShipVols))
   }
 
d6638 13
a6650 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int * leadTimeUB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandLeadTimeUB, (
         partName,
         demandName,
         leadTimeUB))
   }
 
d6654 13
a6666 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int * const priority)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandPriority, (
         partName,
         demandName,
         priority))
   }
 
d6670 13
a6682 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float searchInc)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandSearchInc, (
         partName,
         demandName,
         searchInc))
   }
 
d6686 13
a6698 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double searchInc)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandSearchInc, (
         partName,
         demandName,
         searchInc))
   }
 
d6702 12
a6713 12
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const witBoolean selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandSelForDel, (
         partName,
         demandName,
         selForDel))
   }
d6718 13
a6730 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int shipLateAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandShipLateAllowed, (
         partName,
         demandName,
         shipLateAllowed))
   }
 
d6734 13
a6746 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int * shipLateUB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandShipLateUB, (
         partName,
         demandName,
         shipLateUB))
   }
 
d6750 13
a6762 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float * const shipReward)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandShipReward, (
         partName,
         demandName,
         shipReward))
   }
 
d6766 13
a6778 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double * const shipReward)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandShipReward, (
         partName,
         demandName,
         shipReward))
   }
 
d6782 13
a6794 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float * const shipVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandShipVol, (
         partName,
         demandName,
         shipVol))
   }
 
d6798 13
a6810 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double * const shipVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandShipVol, (
         partName,
         demandName,
         shipVol))
   }
 
d6814 8
a6821 8
      WitRun * const theWitRun,
      const int equitablity)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetEquitability, (
         equitablity))
   }
d6826 9
a6834 9
      WitRun * const theWitRun,
      const witBoolean execEmptyBom)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetExecEmptyBom, (
         execEmptyBom))
   }
 
d6838 9
a6846 9
      WitRun * const theWitRun,
      const float expCutoff)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetExpCutoff, (
         expCutoff))
   }
 
d6850 9
a6858 9
      WitRun * const theWitRun,
      const double expCutoff)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetExpCutoff, (
         expCutoff))
   }
 
d6862 8
a6869 8
      WitRun * const      theWitRun,
      const float * const colsol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetExtOptSoln, (
         colsol))
   }
d6874 8
a6881 8
      WitRun * const       theWitRun,
      const double * const colsol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetExtOptSoln, (
         colsol))
   }
d6886 8
a6893 8
      WitRun * const theWitRun,
      const witBoolean forcedMultiEq)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetForcedMultiEq, (
         forcedMultiEq))
   }
d6898 8
a6905 8
      WitRun * const theWitRun,
      const witBoolean highPrecisionWD)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetHighPrecisionWD, (
         highPrecisionWD))
   }
d6910 8
a6917 8
      WitRun * const theWitRun,
      const witBoolean independentOffsets)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetIndependentOffsets, (
         independentOffsets))
   }
d6922 9
a6930 9
      WitRun * const theWitRun,
      const float lotSizeTol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetLotSizeTol, (
         lotSizeTol))
   }
 
d6934 9
a6942 9
      WitRun * const theWitRun,
      const double lotSizeTol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetLotSizeTol, (
         lotSizeTol))
   }
 
d6946 11
a6956 11
      WitRun * const theWitRun,
      const witBoolean quiet,
      const char * const mesgFileAccessMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMesgFileAccessMode, (
         quiet,
         mesgFileAccessMode))
   }
 
d6960 11
a6970 11
      WitRun * const theWitRun,
      const witBoolean quiet,
      const char * const mesgFileName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMesgFileName, (
         quiet,
         mesgFileName))
   }
 
d6974 13
a6986 13
      WitRun * const theWitRun,
      const witBoolean quiet,
      const int messageNumber,
      const witBoolean mesgPrintMunber)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMesgPrintNumber, (
         quiet,
         messageNumber,
         mesgPrintMunber))
   }
 
d6990 13
a7002 13
      WitRun * const theWitRun,
      const witBoolean quiet,
      const int messageNumber,
      const witBoolean mesgStopRunning)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMesgStopRunning, (
         quiet,
         messageNumber,
         mesgStopRunning))
   }
 
d7006 13
a7018 13
      WitRun * const theWitRun,
      const witBoolean quiet,
      const int messageNumber,
      const witBoolean mesgThrowErrorExc)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMesgThrowErrorExc, (
         quiet,
         messageNumber,
         mesgThrowErrorExc))
   }
 
d7022 13
a7034 13
      WitRun * const theWitRun,
      const witBoolean quiet,
      const int messageNumber,
      const int mesgTimesPrint)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMesgTimesPrint, (
         quiet,
         messageNumber,
         mesgTimesPrint))
   }
 
d7038 8
a7045 8
      WitRun * const theWitRun,
      const witBoolean minimalExcess)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMinimalExcess, (
         minimalExcess))
   }
d7050 9
a7058 9
      WitRun * const theWitRun,
      const witBoolean mipMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMipMode, (
         mipMode))
   }
 
d7062 8
a7069 8
      WitRun * const theWitRun,
      const witBoolean modHeurAlloc)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetModHeurAlloc, (
         modHeurAlloc))
   }
d7074 8
a7081 8
      WitRun * const theWitRun,
      const witBoolean multiExec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMultiExec, (
         multiExec))
   }
d7086 9
a7094 9
      WitRun * const theWitRun,
      const witBoolean multiObjMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMultiObjMode, (
         multiObjMode))
   }
 
d7098 9
a7106 9
      WitRun * const theWitRun,
      const float multiObjTol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMultiObjTol, (
         multiObjTol))
   }
 
d7110 9
a7118 9
      WitRun * const theWitRun,
      const double multiObjTol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetMultiObjTol, (
         multiObjTol))
   }
 
d7122 8
a7129 8
      WitRun * const theWitRun,
      const witBoolean multiRoute)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMultiRoute, (
         multiRoute))
   }
d7134 9
a7142 9
      WitRun * const theWitRun,
      const int nPeriods)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetNPeriods, (
         nPeriods))
   }
 
d7146 9
a7154 9
      WitRun * const theWitRun,
      const int nScenarios)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetNScenarios, (
         nScenarios))
   }
 
d7158 8
a7165 8
      WitRun * const theWitRun,
      const witBoolean nstnResidual)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetNstnResidual, (
         nstnResidual))
   }
d7170 10
a7179 10
      WitRun * const             theWitRun,
      const int                  lenList,
      const char * const * const objectiveList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetObjectiveList, (
         lenList,
         objectiveList))
   }
d7184 8
a7191 8
      WitRun * const     theWitRun,
      const char * const objectiveListSpec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetObjectiveListSpec, (
         objectiveListSpec))
   }
d7196 9
a7204 9
      WitRun * const theWitRun,
      const int objectiveRank)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetObjectiveRank, (
         objectiveRank))
   }
 
d7208 10
a7217 10
      WitRun * const theWitRun,
      const char * const operationName,
      void * const appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationAppData, (
         operationName,
         appData))
   }
d7222 14
a7235 14
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const hardLower,
      const float * const softLower,
      const float * const hardUpper)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationExecBounds, (
         operationName,
         hardLower,
         softLower,
         hardUpper))
   }
d7240 14
a7253 14
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const hardLower,
      const double * const softLower,
      const double * const hardUpper)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationExecBounds, (
         operationName,
         hardLower,
         softLower,
         hardUpper))
   }
d7258 10
a7267 10
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const execCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationExecCost, (
         operationName,
         execCost))
   }
d7271 11
a7281 11
WIT_DECLSPEC witReturnCode STDCALL witSetOperationExecCostDbl ( 
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const execCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationExecCost, (
         operationName,
         execCost))
   }
d7286 10
a7295 10
      WitRun * const theWitRun,
      const char * const operationName,
      const float execPenalty)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationExecPenalty, (
         operationName,
         execPenalty))
   }
d7300 10
a7309 10
      WitRun * const theWitRun,
      const char * const operationName,
      const double execPenalty)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationExecPenalty, (
         operationName,
         execPenalty))
   }
d7314 10
a7323 10
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const execVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationExecVol, (
         operationName,
         execVol))
   }
d7328 10
a7337 10
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const execVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationExecVol, (
         operationName,
         execVol))
   }
d7342 10
a7351 10
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const incLotSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationIncLotSize, (
         operationName,
         incLotSize))
   }
d7356 10
a7365 10
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const incLotSize)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationIncLotSize, (
         operationName,
         incLotSize))
   }
d7370 10
a7379 10
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const incLotSize2)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationIncLotSize2, (
         operationName,
         incLotSize2))
   }
d7384 10
a7393 10
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const incLotSize2)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationIncLotSize2, (
         operationName,
         incLotSize2))
   }
d7398 10
a7407 10
      WitRun * const theWitRun,
      const char * const operationName,
      const witBoolean intExecVols)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationIntExecVols, (
         operationName,
         intExecVols))
   }
d7412 10
a7421 10
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const lotSize2Thresh)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationLotSize2Thresh, (
         operationName,
         lotSize2Thresh))
   }
d7426 10
a7435 10
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const lotSize2Thresh)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationLotSize2Thresh, (
         operationName,
         lotSize2Thresh))
   }
d7440 10
a7449 10
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const minLotSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationMinLotSize, (
         operationName,
         minLotSize))
   }
d7454 10
a7463 10
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const minLotSize)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationMinLotSize, (
         operationName,
         minLotSize))
   }
d7468 10
a7477 10
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const minLotSize2)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationMinLotSize2, (
         operationName,
         minLotSize2))
   }
d7482 10
a7491 10
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const minLotSize2)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationMinLotSize2, (
         operationName,
         minLotSize2))
   }
d7496 10
a7505 10
      WitRun * const     theWitRun,
      const char * const operationName,
      const int          objectStage)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationObjectStage, (
         operationName,
         objectStage))
   }
d7510 10
a7519 10
      WitRun * const     theWitRun,
      const char * const operationName,
      const char * const newName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationOperationName, (
         operationName,
         newName))
   }
d7524 10
a7533 10
      WitRun * const theWitRun,
      const char * const operationName,
      const witBoolean selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationSelForDel, (
         operationName,
         selForDel))
   }
d7538 10
a7547 10
      WitRun * const theWitRun,
      const char * const operationName,
      const witBoolean twoLevelLotSizes)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationTwoLevelLotSizes, (
         operationName,
         twoLevelLotSizes))
   }
d7552 10
a7561 10
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const yieldRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationYieldRate, (
         operationName,
         yieldRate))
   }
d7566 10
a7575 10
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const yieldRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationYieldRate, (
         operationName,
         yieldRate))
   }
d7580 8
a7587 8
      WitRun * const theWitRun,
      const witAttr optInitMethod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOptInitMethod, (
         optInitMethod))
   }
d7592 8
a7599 8
      WitRun * const theWitRun,
      const int outputPrecision)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOutputPrecision, (
         outputPrecision))
   }
d7604 10
a7613 10
      WitRun * const theWitRun,
      const char * const partName,
      void * const appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartAppData, (
         partName,
         appData))
   }
d7618 10
a7627 10
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean asapPipOrder)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartAsapPipOrder, (
         partName,
         asapPipOrder))
   }
d7632 10
a7641 10
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean boundedLeadTimes)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartBoundedLeadTimes, (
         partName,
         boundedLeadTimes))
   }
d7646 11
a7656 11
      WitRun * const theWitRun,
      const char * const partName,
      const int * const buildAheadUB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartBuildAheadUB, (
         partName,
         buildAheadUB))
   }
 
d7660 10
a7669 10
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean buildAsap)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartBuildAsap, (
         partName,
         buildAsap))
   }
d7674 10
a7683 10
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean buildNstn)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartBuildNstn, (
         partName,
         buildNstn))
   }
d7688 10
a7697 10
      WitRun * const     theWitRun,
      const char * const partName,
      const int          objectStage)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartObjectStage, (
         partName,
         objectStage))
   }
d7702 10
a7711 10
      WitRun * const     theWitRun,
      const char * const partName,
      const char * const newName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartPartName, (
         partName,
         newName))
   }
d7716 10
a7725 10
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean * const propRtg)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartPropRtg, (
         partName,
         propRtg))
   }
d7730 11
a7740 11
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean scrapAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartScrapAllowed, (
         partName,
         scrapAllowed))
   }
 
d7744 11
a7754 11
      WitRun * const theWitRun,
      const char * const partName,
      const float * const scrapCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartScrapCost, (
         partName,
         scrapCost))
   }
 
d7758 12
a7769 12
      WitRun * const theWitRun,
      const char * const partName,
      const double * const scrapCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetPartScrapCost, (
         partName,
         scrapCost
         ))
   }
 
d7773 10
a7782 10
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartSelForDel, (
         partName,
         selForDel))
   }
d7787 11
a7797 11
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean singleSource)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartSingleSource, (
         partName,
         singleSource))
   }
 
d7801 15
a7815 15
      WitRun * const theWitRun,
      const char * const partName,
      const float * const hardLower,
      const float * const softLower,
      const float * const hardUpper)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartStockBounds, (
         partName,
         hardLower,
         softLower,
         hardUpper))
   }
 
d7819 15
a7833 15
      WitRun * const theWitRun,
      const char * const partName,
      const double * const hardLower,
      const double * const softLower,
      const double * const hardUpper)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetPartStockBounds, (
         partName,
         hardLower,
         softLower,
         hardUpper))
   }
 
d7837 11
a7847 11
      WitRun * const theWitRun,
      const char * const partName,
      const float * const stockCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartStockCost, (
         partName,
         stockCost))
   }
 
d7851 11
a7861 11
      WitRun * const theWitRun,
      const char * const partName,
      const double * const stockCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetPartStockCost, (
         partName,
         stockCost))
   }
 
d7865 25
a7889 25
      WitRun * const theWitRun,
      const char * const partName,
      const float * const supplyVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartSupplyVol, (
         partName,
         supplyVol))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartSupplyVolDbl ( 
      WitRun * const theWitRun,
      const char * const partName,
      const double * const supplyVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetPartSupplyVol, (
         partName,
         supplyVol))
   }
 
d7893 8
a7900 8
      WitRun * const theWitRun,
      const witBoolean penExec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPenExec, (
         penExec))
   }
d7905 8
a7912 8
      WitRun * const theWitRun,
      const witBoolean perfPegging)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPerfPegging, (
         perfPegging))
   }
d7917 8
a7924 8
      WitRun * const theWitRun,
      const int *    periodStage)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPeriodStage, (
         periodStage))
   }
d7929 9
a7937 9
      WitRun * const theWitRun,
      const witBoolean pgdCritListMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPgdCritListMode, (
         pgdCritListMode))
   }
  
d7941 8
a7948 8
      WitRun * const theWitRun,
      const witBoolean pipSeqFromHeur)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPipSeqFromHeur, (
         pipSeqFromHeur))
   }
d7953 8
a7960 8
      WitRun * const theWitRun,
      const witBoolean prefHighStockSLBs)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPrefHighStockSLBs, (
         prefHighStockSLBs))
   }
d7965 9
a7973 9
      WitRun * const theWitRun,
      const float probability)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetProbability, (
         probability))
   }
 
d7977 8
a7984 8
      WitRun * const theWitRun,
      const double probability)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetProbability, (
         probability))
   }
d7986 1
a7986 1
 //------------------------------------------------------------------------------
d7989 8
a7996 8
      WitRun * const theWitRun,
      const witBoolean respectStockSLBs)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetRespectStockSLBs, (
         respectStockSLBs))
   }
d8001 8
a8008 8
      WitRun * const theWitRun,
      const witBoolean roundReqVols)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetRoundReqVols, (
         roundReqVols))
   }
d8013 8
a8020 8
      WitRun * const theWitRun,
      const witBoolean selSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSelSplit, (
         selSplit))
   }
d8025 8
a8032 8
      WitRun * const theWitRun,
      const witBoolean selectionRecovery)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSelectionRecovery, (
         selectionRecovery))
   }
d8037 8
a8044 8
      WitRun * const theWitRun,
      const witBoolean skipFailures)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSkipFailures, (
         skipFailures))
   }
d8049 9
a8057 9
      WitRun * const theWitRun,
      const char * const solverLogFileName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSolverLogFileName, (
         solverLogFileName))
   }
  
d8061 8
a8068 8
      WitRun * const theWitRun,
      const witBoolean stageByObject)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetStageByObject, (
         stageByObject))
   }
d8073 8
a8080 8
      WitRun * const theWitRun,
      const witBoolean stochMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetStochMode, (
         stochMode))
   }
d8085 8
a8092 8
      WitRun * const theWitRun,
      const witBoolean stockReallocation)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetStockReallocation, (
         stockReallocation))
   }
d8097 14
a8110 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      void * const appData)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryAppData, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         appData))
   }
d8115 15
a8129 15
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float * consRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryConsRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         consRate))
   }
 
d8133 15
a8147 15
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double * consRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntryConsRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         consRate))
   }
 
d8151 15
a8165 15
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const int earliestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryEarliestPeriod, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         earliestPeriod))
   }
 
d8169 14
a8182 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float execPenalty)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryExecPenalty, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         execPenalty))
   }
d8187 14
a8200 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double execPenalty)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntryExecPenalty, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         execPenalty))
   }
d8205 14
a8218 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const witBoolean expAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryExpAllowed, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expAllowed))
   }
d8223 14
a8236 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float expNetAversion)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryExpNetAversion, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expNetAversion))
   }
d8241 14
a8254 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double expNetAversion)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntryExpNetAversion, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expNetAversion))
   }
d8259 14
a8272 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float falloutRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryFalloutRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         falloutRate))
   }
d8276 15
a8290 15
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryFalloutRateDbl ( 
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double falloutRate)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntryFalloutRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         falloutRate))
   }
d8295 14
a8308 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const witBoolean intSubVols)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryIntSubVols, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         intSubVols))
   }
d8313 15
a8327 15
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const int latestPeriod)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryLatestPeriod, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         latestPeriod))
   }
 
d8331 14
a8344 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const witBoolean mrpNetAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryMrpNetAllowed, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         mrpNetAllowed))
   }
d8349 14
a8362 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const witBoolean netAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryNetAllowed, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         netAllowed))
   }
d8367 33
a8399 33
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float * const obj1SubCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryObj1SubCost, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj1SubCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryObj1SubCostDbl ( 
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double * const obj1SubCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntryObj1SubCost, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj1SubCost))
   }
 
d8403 14
a8416 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float * const offset)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryOffset, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         offset))
   }
d8420 15
a8434 15
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryOffsetDbl ( 
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double * const offset)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntryOffset, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         offset))
   }
d8439 14
a8452 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float * routingShare)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryRoutingShare, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         routingShare))
   }
d8456 15
a8470 15
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryRoutingShareDbl ( 
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double * routingShare)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntryRoutingShare, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         routingShare))
   }
d8475 14
a8488 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const witBoolean selForDel)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntrySelForDel, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         selForDel))
   }
d8493 15
a8507 15
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float * const subCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntrySubCost, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subCost))
   }
 
d8511 15
a8525 15
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double * const subCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntrySubCost, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subCost))
   }
 
d8529 14
a8542 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float * const subVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntrySubVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subVol))
   }
d8547 14
a8560 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double * const subVol)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntrySubVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subVol))
   }
d8565 8
a8572 8
      WitRun * const theWitRun,
      const witBoolean tieBreakPropRt)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetTieBreakPropRt, (
         tieBreakPropRt))
   }
d8577 8
a8584 8
      WitRun * const theWitRun,
      const char * const title)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetTitle, (
         title))
   }
d8589 8
a8596 8
      WitRun * const theWitRun,
      const witBoolean truncOffsets)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetTruncOffsets, (
         truncOffsets))
   }
d8601 8
a8608 8
      WitRun * const theWitRun,
      const witBoolean twoWayMultiExec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetTwoWayMultiExec, (
         twoWayMultiExec))
   }
d8613 8
a8620 8
      WitRun * const theWitRun,
      const witBoolean useFocusHorizons)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetUseFocusHorizons, (
         useFocusHorizons))
   }
d8625 8
a8632 8
      WitRun * const theWitRun,
      const witBoolean userHeurStart)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetUserHeurStart, (
         userHeurStart))
   }
d8637 9
a8645 9
      WitRun * const theWitRun,
      const float wbounds)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetWbounds, (
         wbounds))
   }
 
d8649 9
a8657 9
      WitRun * const theWitRun,
      const double wbounds)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetWbounds, (
         wbounds))
   }
 
d8661 8
a8668 8
      WitRun * const theWitRun,
      const witBoolean wit34Compatible)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetWit34Compatible, (
         wit34Compatible))
   }
d8673 6
a8678 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witShutDownExtOpt, ())
   }
d8683 6
a8688 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witShutDownHeurAlloc, ())
   }
d8693 6
a8698 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witStartExtOpt, ())
   }
d8703 6
a8708 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witStartHeurAlloc, ())
   }
d8713 6
a8718 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witStochImplode, ())
   }
d8723 12
a8734 12
      WitRun * const theWitRun,
      const char * const fileName,
      const witFileFormat fileFormat,
      const int maxListLen)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witWriteCriticalList, (
         fileName,
         fileFormat,
         maxListLen))
   }
d8739 9
a8747 9
      WitRun * const theWitRun,
      const char * const fileName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witWriteData, (
         fileName))
   }
 
d8751 11
a8761 11
      WitRun * const theWitRun,
      const char * const fileName,
      const witFileFormat fileFormat)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witWriteExecSched, (
         fileName,
         fileFormat))
   }
 
d8765 11
a8775 11
      WitRun * const theWitRun,
      const char * const fileName,
      const witFileFormat fileFormat)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witWriteReqSched, (
         fileName,
         fileFormat))
   }
 
d8779 10
a8788 10
      WitRun * const theWitRun,
      const char * const fileName,
      const witFileFormat fileFormat)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witWriteShipSched, (
         fileName,
         fileFormat))
   }
d8797 12
a8808 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      int * fallout)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryFallout, (
         operationName,
         bomEntryIndex,
         fallout))
   }
d8813 12
a8824 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      witBoolean * propRouting)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryPropRouting, (
         operationName,
         bomEntryIndex,
         propRouting))
   }
d8829 13
a8841 13
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      float * usageRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryUsageRate, (
         operationName,
         bomEntryIndex,
         usageRate))
   }
 
d8845 12
a8856 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      float * time)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBomEntryUsageTime, (
         operationName,
         bomEntryIndex,
         time))
   }
d8861 12
a8872 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      witBoolean * byProduct)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryByProduct, (
         operationName,
         bopEntryIndex,
         byProduct))
   }
d8877 12
a8888 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      float * prodRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryProdRate, (
         operationName,
         bopEntryIndex,
         prodRate))
   }
d8893 9
a8901 9
      WitRun * const theWitRun,
      witBoolean * buildWhenEmpty)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBuildWhenEmpty, (
         buildWhenEmpty))
   }
 
d8905 12
a8916 12
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * buildAheadLimit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandBuildAheadLimit, (
         partName,
         demandName,
         buildAheadLimit))
   }
d8921 12
a8932 12
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * * buildAheadUB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandBuildAheadUB, (
         partName,
         demandName,
         buildAheadUB))
   }
d8937 13
a8949 13
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * * obj1CumShipReward)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandObj1CumShipReward, (
         demandedPartName,
         demandName,
         obj1CumShipReward))
   }
 
d8953 13
a8965 13
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * * obj1CumShipReward)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandObj1CumShipReward, (
         demandedPartName,
         demandName,
         obj1CumShipReward))
   }
 
d8969 12
a8980 12
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * * obj1ShipReward)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandObj1ShipReward, (
         demandedPartName,
         demandName,
         obj1ShipReward))
   }
d8985 12
a8996 12
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * * obj1ShipReward)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandObj1ShipReward, (
         demandedPartName,
         demandName,
         obj1ShipReward))
   }
d9001 12
a9012 12
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * prefBuildAhead)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandPrefBuildAhead, (
         partName,
         demandName,
         prefBuildAhead))
   }
d9017 13
a9029 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * shipLateLimit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandShipLateLimit, (
         partName,
         demandName,
         shipLateLimit))
   }
 
d9033 8
a9040 8
      WitRun * const theWitRun,
      int * hashTableSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetHashTableSize, (
         hashTableSize))
   }
d9045 8
a9052 8
      WitRun * const theWitRun,
      witBoolean * localBuildAhead)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetLocalBuildAhead, (
         localBuildAhead))
   }
d9057 8
a9064 8
      WitRun * const theWitRun,
      witBoolean * localMultiExec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetLocalMultiExec, (
         localMultiExec))
   }
d9069 8
a9076 8
      WitRun * const theWitRun,
      int * objChoice)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjChoice, (
         objChoice))
   }
d9081 10
a9090 10
      WitRun * const theWitRun,
      const char * const operationName,
      float * * obj1ExecCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationObj1ExecCost, (
         operationName,
         obj1ExecCost))
   }
d9095 10
a9104 10
      WitRun * const theWitRun,
      const char * const operationName,
      double * * obj1ExecCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationObj1ExecCost, (
         operationName,
         obj1ExecCost))
   }
d9109 10
a9118 10
      WitRun * const theWitRun,
      const char * const operationName,
      int * * yield)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationYield, (
         operationName,
         yield))
   }
d9123 10
a9132 10
      WitRun * const theWitRun,
      const char * const partName,
      int * buildAheadLimit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartBuildAheadLimit, (
         partName,
         buildAheadLimit))
   }
d9137 10
a9146 10
      WitRun * const theWitRun,
      const char * const partName,
      float * * cycleTime)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartCycleTime, (
         partName,
         cycleTime))
   }
d9151 10
a9160 10
      WitRun * const theWitRun,
      const char * const partName,
      float * * incLotSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartIncLotSize, (
         partName,
         incLotSize))
   }
d9165 10
a9174 10
      WitRun * const theWitRun,
      const char * const partName,
      float * * minLotSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartMinLotSize, (
         partName,
         minLotSize))
   }
d9179 10
a9188 10
      WitRun * const theWitRun,
      const char * const partName,
      float * * mrpProdVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartMrpProdVol, (
         partName,
         mrpProdVol))
   }
d9193 10
a9202 10
      WitRun * const theWitRun,
      const char * const partName,
      int * nBomEntries)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartNBomEntries, (
         partName,
         nBomEntries))
   }
d9207 10
a9216 10
      WitRun * const theWitRun,
      const char * const partName,
      float * * obj1ProdCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartObj1ProdCost, (
         partName,
         obj1ProdCost))
   }
d9221 11
a9231 11
      WitRun * const theWitRun,
      const char * const partName,
      float * * obj1ScrapCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartObj1ScrapCost, (
         partName,
         obj1ScrapCost))
   }
 
d9235 11
a9245 11
      WitRun * const theWitRun,
      const char * const partName,
      double * * obj1ScrapCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartObj1ScrapCost, (
         partName,
         obj1ScrapCost))
   }
 
d9249 10
a9258 10
      WitRun * const theWitRun,
      const char * const partName,
      float * * obj1StockCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartObj1StockCost, (
         partName,
         obj1StockCost))
   }
d9263 10
a9272 10
      WitRun * const theWitRun,
      const char * const partName,
      double * * obj1StockCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartObj1StockCost, (
         partName,
         obj1StockCost))
   }
d9277 14
a9290 14
      WitRun * const theWitRun,
      const char * const partName,
      float * * hardLower,
      float * * softLower,
      float * * hardUpper)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartProdBounds, (
         partName,
         hardLower,
         softLower,
         hardUpper))
   }
d9295 11
a9305 11
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * propRouting)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartPropRouting, (
         partName,
         propRouting))
   }
 
d9309 10
a9318 10
      WitRun * const theWitRun,
      const char * const partName,
      int * * yield)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartYield, (
         partName,
         yield))
   }
d9323 8
a9330 8
      WitRun * const theWitRun,
      witBoolean * stockRealloc)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetStockRealloc, (
         stockRealloc))
   }
d9335 14
a9348 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      int * fallout)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryFallout, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         fallout))
   }
d9353 15
a9367 15
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * * prodVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryProdVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         prodVol))
   }
 
d9371 14
a9384 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * usageRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryUsageRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         usageRate))
   }
d9389 6
a9394 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witOptPreprocess, ())
   }
d9399 12
a9410 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int fallout)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryFallout, (
         operationName,
         bomEntryIndex,
         fallout))
   }
d9415 12
a9426 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const witBoolean propRouting)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryPropRouting, (
         operationName,
         bomEntryIndex,
         propRouting))
   }
d9431 13
a9443 13
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const float usageRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryUsageRate, (
         operationName,
         bomEntryIndex,
         usageRate))
   }
 
d9447 12
a9458 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const float time)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBomEntryUsageTime, (
         operationName,
         bomEntryIndex,
         time))
   }
d9463 12
a9474 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const witBoolean byProduct)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryByProduct, (
         operationName,
         bopEntryIndex,
         byProduct))
   }
d9479 12
a9490 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const float prodRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryProdRate, (
         operationName,
         bopEntryIndex,
         prodRate))
   }
d9495 8
a9502 8
      WitRun * const theWitRun,
      const witBoolean buildWhenEmpty)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBuildWhenEmpty, (
         buildWhenEmpty))
   }
d9507 13
a9519 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int buildAheadLimit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandBuildAheadLimit, (
         partName,
         demandName,
         buildAheadLimit))
   }
 
d9523 12
a9534 12
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int * buildAheadUB)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandBuildAheadUB, (
         partName,
         demandName,
         buildAheadUB))
   }
d9539 13
a9551 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float * const obj1CumShipReward)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandObj1CumShipReward, (
         partName,
         demandName,
         obj1CumShipReward))
   }
 
d9555 13
a9567 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double * const obj1CumShipReward)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandObj1CumShipReward, (
         partName,
         demandName,
         obj1CumShipReward))
   }
 
d9571 13
a9583 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float * const obj1ShipReward)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandObj1ShipReward, (
         partName,
         demandName,
         obj1ShipReward))
   }
 
d9587 13
a9599 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double * const obj1ShipReward)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandObj1ShipReward, (
         partName,
         demandName,
         obj1ShipReward))
   }
 
d9603 13
a9615 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int prefBuildAhead)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandPrefBuildAhead, (
         partName,
         demandName,
         prefBuildAhead))
   }
 
d9619 13
a9631 13
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int shipLateLimit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandShipLateLimit, (
         partName,
         demandName,
         shipLateLimit))
   }
 
d9635 9
a9643 9
      WitRun * const theWitRun,
      const int hashTableSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetHashTableSize, (
         hashTableSize))
   }
 
d9647 8
a9654 8
      WitRun * const theWitRun,
      const witBoolean localBuildAhead)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetLocalBuildAhead, (
         localBuildAhead))
   }
d9659 8
a9666 8
      WitRun * const theWitRun,
      const witBoolean localMultiExec)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetLocalMultiExec, (
         localMultiExec))
   }
d9671 9
a9679 9
      WitRun * const theWitRun,
      const int objChoice)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetObjChoice, (
         objChoice))
   }
 
d9683 10
a9692 10
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const obj1ExecCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationObj1ExecCost, (
         operationName,
         obj1ExecCost))
   }
d9697 10
a9706 10
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const obj1ExecCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationObj1ExecCost, (
         operationName,
         obj1ExecCost))
   }
d9711 10
a9720 10
      WitRun * const theWitRun,
      const char * const operationName,
      const int * const yield)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationYield, (
         operationName,
         yield))
   }
d9725 10
a9734 10
      WitRun * const theWitRun,
      const char * const partName,
      const int buildAheadLimit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartBuildAheadLimit, (
         partName,
         buildAheadLimit))
   }
d9739 10
a9748 10
      WitRun * const theWitRun,
      const char * const partName,
      const float * const cycleTime)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartCycleTime, (
         partName,
         cycleTime))
   }
d9753 10
a9762 10
      WitRun * const theWitRun,
      const char * const partName,
      const float * const incLotSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartIncLotSize, (
         partName,
         incLotSize))
   }
d9767 10
a9776 10
      WitRun * const theWitRun,
      const char * const partName,
      const float * const minLotSize)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartMinLotSize, (
         partName,
         minLotSize))
   }
d9781 10
a9790 10
      WitRun * const theWitRun,
      const char * const partName,
      const float * const obj1ProdCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartObj1ProdCost, (
         partName,
         obj1ProdCost))
   }
d9795 12
a9806 12
      WitRun * const theWitRun,
      const char * const partName,
      const float * const obj1ScrapCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartObj1ScrapCost, (
         partName,
         obj1ScrapCost
         ))
   }
 
d9810 12
a9821 12
      WitRun * const theWitRun,
      const char * const partName,
      const double * const obj1ScrapCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetPartObj1ScrapCost, (
         partName,
         obj1ScrapCost
         ))
   }
 
d9825 11
a9835 11
      WitRun * const theWitRun,
      const char * const partName,
      const float * const obj1StockCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartObj1StockCost, (
         partName,
         obj1StockCost))
   }
 
d9839 11
a9849 11
      WitRun * const theWitRun,
      const char * const partName,
      const double * const obj1StockCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetPartObj1StockCost, (
         partName,
         obj1StockCost))
   }
 
d9853 14
a9866 14
      WitRun * const theWitRun,
      const char * const partName,
      const float * const hardLower,
      const float * const softLower,
      const float * const hardUpper)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartProdBounds, (
         partName,
         hardLower,
         softLower,
         hardUpper))
   }
d9871 10
a9880 10
      WitRun * const theWitRun,
      const char * const partName,
      const float * const prodVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartProdVol, (
         partName,
         prodVol))
   }
d9885 10
a9894 10
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean propRouting)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartPropRouting, (
         partName,
         propRouting))
   }
d9899 10
a9908 10
      WitRun * const theWitRun,
      const char * const partName,
      const int * const yield)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartYield, (
         partName,
         yield))
   }
d9913 8
a9920 8
      WitRun * const theWitRun,
      const witBoolean stockRealloc)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetStockRealloc, (
         stockRealloc))
   }
d9925 14
a9938 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const int fallout)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryFallout, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         fallout))
   }
d9943 14
a9956 14
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float * const prodVol)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryProdVol, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         prodVol))
   }
d9961 15
a9975 15
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float usageRate)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryUsageRate, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         usageRate))
   }
 
d9979 10
a9988 10
      WitRun * const theWitRun,
      const char * const fileName,
      const witFileFormat fileFormat)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witWriteProdSched, (
         fileName,
         fileFormat))
   }
d9995 10
a10004 10
      WitRun * const theWitRun,
      int            argc,
      char *         argv[])
   {
   STANDARD_API_IMPL (
      theWitRun,
      witExecStandAlone, (
         argc,
         argv))
   }
d10009 6
a10014 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witExhaustMemory, ())
   }
d10019 12
a10030 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      witBoolean * meSelSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBopEntryMeSelSplit, (
         operationName,
         bopEntryIndex,
         meSelSplit))
   }
d10035 8
a10042 8
      WitRun * const theWitRun,
      witBoolean *   devMode)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDevMode, (
         devMode))
   }
d10047 8
a10054 8
      WitRun * const theWitRun,
      witBoolean * newPipPggOrder)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetNewPipPggOrder, (
         newPipPggOrder))
   }
d10059 8
a10066 8
      WitRun * const theWitRun,
      witBoolean * nonMrSelSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetNonMrSelSplit, (
         nonMrSelSplit))
   }
d10071 10
a10080 10
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * baSelSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartBaSelSplit, (
         partName,
         baSelSplit))
   }
d10085 8
a10092 8
      WitRun * const theWitRun,
      witBoolean * srSelSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSrSelSplit, (
         srSelSplit))
   }
d10097 8
a10104 8
      WitRun * const     theWitRun,
      const char * const theDevCmd)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witInterpretDevCmd, (
         theDevCmd))
   }
d10109 6
a10114 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witIssueFatalMesg, ())
   }
d10119 6
a10124 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witListUnissuedMsgs, ())
   }
d10131 10
a10140 10
      size_t size,
      void * * mem)
   {
   * mem = malloc (size);

   return
      (* mem != NULL)?
         WitINFORMATIONAL_RC: 
         WitWARNING_RC;
   }
d10145 6
a10150 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witNoDependantWitRunVeneersDecr, ())
   }
d10155 6
a10160 6
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witNoDependantWitRunVeneersIncr, ())
   }
d10165 8
a10172 8
      WitRun * const theWitRun,
      int * isOne)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witNoDependantWitRunVeneersIsOne, (
         isOne))
   }
d10177 12
a10188 12
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const witBoolean meSelSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBopEntryMeSelSplit, (
         operationName,
         bopEntryIndex,
         meSelSplit))
   }
d10193 8
a10200 8
      WitRun * const theWitRun,
      const witBoolean newPipPggOrder)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetNewPipPggOrder, (
         newPipPggOrder))
   }
d10205 8
a10212 8
      WitRun * const theWitRun,
      const witBoolean nonMrSelSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetNonMrSelSplit, (
         nonMrSelSplit))
   }
d10217 10
a10226 10
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean baSelSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartBaSelSplit, (
         partName,
         baSelSplit))
   }
d10231 8
a10238 8
      WitRun * const theWitRun,
      const witBoolean srSelSplit)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSrSelSplit, (
         srSelSplit))
   }
d10243 8
a10250 8
      WitRun * const theWitRun,
      const witBoolean wit34Allowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetWit34Allowed, (
         wit34Allowed))
   }
d10259 1
a10259 1
// necessary. 
d10272 1
a10272 1
//   Declaration in wit.h when included by wit applications: 
d10304 1
a10304 1
   WIT_CONST witAttr WitACC_OPT_INIT_METHOD   = nonConst ("accOptInitMethod");
d10306 1
a10306 1
   WIT_CONST witAttr WitHEUR_OPT_INIT_METHOD  = nonConst ("heurOptInitMethod");
d10308 1
a10308 1
   WIT_CONST witAttr WitSCHED_OPT_INIT_METHOD = nonConst ("schedOptInitMethod");
d10310 1
a10310 1
   WIT_CONST witAttr WitCRASH_OPT_INIT_METHOD = nonConst ("crashOptInitMethod");
d10325 3
a10327 3
   }
   //
   // End of extern "C"
d10334 9
a10342 9
         const char *  funcNameVal,
         int           mesgNumVal,
         witReturnCode retCodeVal):

      funcName_ (),
      mesgNum_  (mesgNumVal),
      retCode_  (retCodeVal)
   {
   strncpy (funcName_, funcNameVal, 50);
d10344 2
a10345 2
   funcName_[50] = '\0';
   }
d10351 6
a10356 6
      funcName_ (),
      mesgNum_  (theErrorExc.mesgNum_),
      retCode_  (theErrorExc.retCode_)
   {
   strcpy (funcName_, theErrorExc.funcName_);
   }
d10361 2
a10362 2
   {
   }
d10367 3
a10369 3
   {
   return funcName_;
   }
d10374 3
a10376 3
   {
   return mesgNum_;
   }
d10381 3
a10383 3
   {
   return retCode_;
   }
@


1.363
log
@CPLEX
@
text
@a1363 24
WIT_DECLSPEC witReturnCode STDCALL witGetCoinEmbedded (
      WitRun * const theWitRun,
      witBoolean *   coinEmbedded)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCoinEmbedded, (
         coinEmbedded))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetCoinSelected (
      WitRun * const theWitRun,
      witBoolean * coinSelected)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCoinSelected, (
         coinSelected))
   }
 
//------------------------------------------------------------------------------

a1495 12
WIT_DECLSPEC witReturnCode STDCALL witGetCplexSelected (
      WitRun * const theWitRun,
      witBoolean * cplexSelected)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCplexSelected, (
         cplexSelected))
   }
 
//------------------------------------------------------------------------------

a6340 12
WIT_DECLSPEC witReturnCode STDCALL witSetCoinSelected (
      WitRun * const theWitRun,
      const witBoolean coinSelected)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetCoinSelected, (
         coinSelected))
   }

//------------------------------------------------------------------------------

a6412 12
WIT_DECLSPEC witReturnCode STDCALL witSetCplexSelected (
      WitRun * const theWitRun,
      const witBoolean cplexSelected)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetCplexSelected, (
         cplexSelected))
   }

//------------------------------------------------------------------------------

@


1.362
log
@CPLEX
@
text
@d1424 1
a1424 1
WIT_DECLSPEC witReturnCode STDCALL witGetCplexObjBound (
d1426 1
a1426 1
      float * cplexObjBound)
d1430 2
a1431 2
      witGetCplexObjBound, (
         cplexObjBound))
d1436 1
a1436 1
WIT_DECLSPEC witReturnCode STDCALL witGetCplexObjBoundDbl (
d1438 1
a1438 1
      double * cplexObjBound)
d1442 2
a1443 2
      witGetCplexObjBound, (
         cplexObjBound))
d1448 1
a1448 1
WIT_DECLSPEC witReturnCode STDCALL witGetCplexObjRelGap (
d1450 1
a1450 1
      float * cplexObjRelGap)
d1454 2
a1455 2
      witGetCplexObjRelGap, (
         cplexObjRelGap))
d1460 1
a1460 1
WIT_DECLSPEC witReturnCode STDCALL witGetCplexObjRelGapDbl (
d1462 1
a1462 1
      double * cplexObjRelGap)
d1466 2
a1467 2
      witGetCplexObjRelGap, (
         cplexObjRelGap))
@


1.361
log
@CPLEX
@
text
@d1424 1
a1424 1
WIT_DECLSPEC witReturnCode STDCALL witGetCplexMipRelGap (
d1426 1
a1426 1
      float * cplexMipRelGap)
d1430 2
a1431 2
      witGetCplexMipRelGap, (
         cplexMipRelGap))
d1436 1
a1436 1
WIT_DECLSPEC witReturnCode STDCALL witGetCplexMipRelGapDbl (
d1438 1
a1438 1
      double * cplexMipRelGap)
d1442 2
a1443 2
      witGetCplexMipRelGap, (
         cplexMipRelGap))
d1448 1
a1448 1
WIT_DECLSPEC witReturnCode STDCALL witGetCplexObjBound (
d1450 1
a1450 1
      float * cplexObjBound)
d1454 2
a1455 2
      witGetCplexObjBound, (
         cplexObjBound))
d1460 1
a1460 1
WIT_DECLSPEC witReturnCode STDCALL witGetCplexObjBoundDbl (
d1462 1
a1462 1
      double * cplexObjBound)
d1466 2
a1467 2
      witGetCplexObjBound, (
         cplexObjBound))
@


1.360
log
@CPLEX
@
text
@d1424 24
@


1.359
log
@CPLEX
@
text
@d1424 24
@


1.358
log
@CPLEX
@
text
@d1496 12
@


1.357
log
@CPLEX Parameters
@
text
@d1484 1
a1484 1
WIT_DECLSPEC witReturnCode STDCALL witGetCplexSolnStatus (
d1486 1
a1486 1
      int *          cplexSolnStatus)
d1490 2
a1491 2
      witGetCplexSolnStatus, (
         cplexSolnStatus))
@


1.356
log
@CPLEX Parameters
@
text
@d152 1
a152 1
WIT_DECLSPEC witReturnCode STDCALL witAddDblCpxParSpec (
d159 1
a159 1
      witAddDblCpxParSpec, (
d166 1
a166 1
WIT_DECLSPEC witReturnCode STDCALL witAddDblCpxParSpecDbl (
d173 1
a173 1
      witAddDblCpxParSpec, (
d194 1
a194 1
WIT_DECLSPEC witReturnCode STDCALL witAddIntCpxParSpec (
d201 1
a201 1
      witAddIntCpxParSpec, (
d318 1
a318 1
WIT_DECLSPEC witReturnCode STDCALL witClearCpxParSpecs (
d323 1
a323 1
      witClearCpxParSpecs, ())
d1424 1
a1424 1
WIT_DECLSPEC witReturnCode STDCALL witGetCplexSelected (
d1426 1
a1426 1
      witBoolean * cplexSelected)
d1430 2
a1431 2
      witGetCplexSelected, (
         cplexSelected))
d1436 1
a1436 1
WIT_DECLSPEC witReturnCode STDCALL witGetCpxParSpecDblVal (
d1438 1
a1438 1
      float * cpxParSpecDblVal)
d1440 1
a1440 1
   STANDARD_API_IMPL (
d1442 2
a1443 2
      witGetCpxParSpecDblVal, (
         cpxParSpecDblVal))
d1448 1
a1448 1
WIT_DECLSPEC witReturnCode STDCALL witGetCpxParSpecDblValDbl (
d1450 1
a1450 1
      double * cpxParSpecDblVal)
d1452 1
a1452 1
   STANDARD_DBL_API_IMPL (
d1454 2
a1455 2
      witGetCpxParSpecDblVal, (
         cpxParSpecDblVal))
d1460 1
a1460 1
WIT_DECLSPEC witReturnCode STDCALL witGetCpxParSpecIntVal (
d1462 1
a1462 1
      int * cpxParSpecIntVal)
d1466 2
a1467 2
      witGetCpxParSpecIntVal, (
         cpxParSpecIntVal))
d1472 1
a1472 1
WIT_DECLSPEC witReturnCode STDCALL witGetCpxParSpecName (
d1474 1
a1474 1
      char * * cpxParSpecName)
d1478 2
a1479 2
      witGetCpxParSpecName, (
         cpxParSpecName))
d1484 1
a1484 1
WIT_DECLSPEC witReturnCode STDCALL witGetCpxSolnStatus (
d1486 1
a1486 1
      int *          cpxSolnStatus)
d1490 2
a1491 2
      witGetCpxSolnStatus, (
         cpxSolnStatus))
d1536 1
a1536 1
WIT_DECLSPEC witReturnCode STDCALL witGetDblCpxParSpec (
d1544 1
a1544 1
      witGetDblCpxParSpec, (
d1552 1
a1552 1
WIT_DECLSPEC witReturnCode STDCALL witGetDblCpxParSpecDbl (
d1560 1
a1560 1
      witGetDblCpxParSpec, (
d2713 1
a2713 1
WIT_DECLSPEC witReturnCode STDCALL witGetIntCpxParSpec (
d2721 1
a2721 1
      witGetIntCpxParSpec, (
d6353 1
a6353 1
WIT_DECLSPEC witReturnCode STDCALL witSetCplexSelected (
d6355 1
a6355 1
      const witBoolean cplexSelected)
d6359 2
a6360 2
      witSetCplexSelected, (
         cplexSelected))
d6362 1
a6362 1

d6365 1
a6365 1
WIT_DECLSPEC witReturnCode STDCALL witSetCpxParSpecDblVal (
d6367 1
a6367 1
      const float cpxParSpecDblVal)
d6369 1
a6369 1
   STANDARD_API_IMPL (
d6371 2
a6372 2
      witSetCpxParSpecDblVal, (
         cpxParSpecDblVal))
d6377 1
a6377 1
WIT_DECLSPEC witReturnCode STDCALL witSetCpxParSpecDblValDbl (
d6379 1
a6379 1
      const double cpxParSpecDblVal)
d6381 1
a6381 1
   STANDARD_DBL_API_IMPL (
d6383 2
a6384 2
      witSetCpxParSpecDblVal, (
         cpxParSpecDblVal))
d6389 1
a6389 1
WIT_DECLSPEC witReturnCode STDCALL witSetCpxParSpecIntVal (
d6391 1
a6391 1
      const int cpxParSpecIntVal)
d6395 2
a6396 2
      witSetCpxParSpecIntVal, (
         cpxParSpecIntVal))
d6398 1
a6398 1
 
d6401 1
a6401 1
WIT_DECLSPEC witReturnCode STDCALL witSetCpxParSpecName (
d6403 1
a6403 1
      const char * const cpxParSpecName)
d6407 2
a6408 2
      witSetCpxParSpecName, (
         cpxParSpecName))
d6410 1
a6410 1
  
@


1.355
log
@CPLEX Parameters
@
text
@d155 1
a155 1
      const float        theVal)
d161 1
a161 1
         theVal))
d169 1
a169 1
      const double       theVal)
d175 1
a175 1
         theVal))
d197 1
a197 1
      const int          theVal)
d203 1
a203 1
         theVal))
@


1.354
log
@CPLEX solution status
@
text
@d1436 48
a4844 48
WIT_DECLSPEC witReturnCode STDCALL witGetSpecCpxParDblVal (
      WitRun * const theWitRun,
      float * specCpxParDblVal)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSpecCpxParDblVal, (
         specCpxParDblVal))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSpecCpxParDblValDbl (
      WitRun * const theWitRun,
      double * specCpxParDblVal)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSpecCpxParDblVal, (
         specCpxParDblVal))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSpecCpxParIntVal (
      WitRun * const theWitRun,
      int * specCpxParIntVal)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSpecCpxParIntVal, (
         specCpxParIntVal))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSpecCpxParName (
      WitRun * const theWitRun,
      char * * specCpxParName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSpecCpxParName, (
         specCpxParName))
   }
 
//------------------------------------------------------------------------------

d6365 48
a8059 48
WIT_DECLSPEC witReturnCode STDCALL witSetSpecCpxParDblVal (
      WitRun * const theWitRun,
      const float specCpxParDblVal)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSpecCpxParDblVal, (
         specCpxParDblVal))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSpecCpxParDblValDbl (
      WitRun * const theWitRun,
      const double specCpxParDblVal)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSpecCpxParDblVal, (
         specCpxParDblVal))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSpecCpxParIntVal (
      WitRun * const theWitRun,
      const int specCpxParIntVal)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSpecCpxParIntVal, (
         specCpxParIntVal))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSpecCpxParName (
      WitRun * const theWitRun,
      const char * const specCpxParName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSpecCpxParName, (
         specCpxParName))
   }
  
//------------------------------------------------------------------------------

@


1.353
log
@CPLEX Solution Status
@
text
@d1436 1
a1436 1
WIT_DECLSPEC witReturnCode STDCALL witGetCpxStat (
d1438 1
a1438 1
      int *          cpxStat)
d1442 2
a1443 2
      witGetCpxStat, (
         cpxStat))
@


1.352
log
@CPLEX Parameters
@
text
@d1436 12
@


1.351
log
@CPLEX Parameters
@
text
@d318 10
@


1.350
log
@CPLEX Parameters
@
text
@d1466 32
@


1.349
log
@CPLEX Parameters
@
text
@d2611 16
@


1.348
log
@CPLEX Parameters
@
text
@d152 28
@


1.347
log
@CPLEX Param Specs
@
text
@d166 14
@


1.346
log
@CPLEX Param Specs.
@
text
@d4685 24
d7900 24
@


1.345
log
@CPX Param Specs
@
text
@d4685 12
d7876 12
@


1.344
log
@CPX Params
@
text
@a2804 12
WIT_DECLSPEC witReturnCode STDCALL witGetNameForCpxParam (
      WitRun * const theWitRun,
      char * * nameForCpxParam)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetNameForCpxParam, (
         nameForCpxParam))
   }
 
//------------------------------------------------------------------------------

d4685 12
a6960 12
WIT_DECLSPEC witReturnCode STDCALL witSetNameForCpxParam (
      WitRun * const theWitRun,
      const char * const nameForCpxParam)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetNameForCpxParam, (
         nameForCpxParam))
   }
  
//------------------------------------------------------------------------------

d7864 12
@


1.343
log
@CPLEX
@
text
@d2805 12
d6961 12
@


1.342
log
@CPLEX
@
text
@a4672 12
WIT_DECLSPEC witReturnCode STDCALL witGetSolverEmbedded (
      WitRun * const theWitRun,
      witBoolean *   solverEmbedded)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSolverEmbedded, (
         solverEmbedded))
   }

//------------------------------------------------------------------------------

@


1.341
log
@Modifiable heuristic allocation
@
text
@d1324 12
d1372 12
a4684 24
WIT_DECLSPEC witReturnCode STDCALL witGetSolverIsCoin (
      WitRun * const theWitRun,
      witBoolean * solverIsCoin)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSolverIsCoin, (
         solverIsCoin))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSolverIsCplex (
      WitRun * const theWitRun,
      witBoolean * solverIsCplex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSolverIsCplex, (
         solverIsCplex))
   }
 
//------------------------------------------------------------------------------

d6169 12
d6205 12
a7851 24
WIT_DECLSPEC witReturnCode STDCALL witSetSolverIsCoin (
      WitRun * const theWitRun,
      const witBoolean solverIsCoin)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSolverIsCoin, (
         solverIsCoin))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSolverIsCplex (
      WitRun * const theWitRun,
      const witBoolean solverIsCplex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSolverIsCplex, (
         solverIsCplex))
   }

//------------------------------------------------------------------------------

@


1.340
log
@Heuristic Adjustment
@
text
@a2508 12
WIT_DECLSPEC witReturnCode STDCALL witGetHeurAdjustEnabled (
      WitRun * const theWitRun,
      witBoolean * heurAdjustEnabled)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetHeurAdjustEnabled, (
         heurAdjustEnabled))
   }

//------------------------------------------------------------------------------

d2685 12
a6676 12
WIT_DECLSPEC witReturnCode STDCALL witSetHeurAdjustEnabled (
      WitRun * const theWitRun,
      const witBoolean heurAdjustEnabled)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetHeurAdjustEnabled, (
         heurAdjustEnabled))
   }

//------------------------------------------------------------------------------

d6841 12
@


1.339
log
@Heuristic Adjustment
@
text
@a599 10
WIT_DECLSPEC witReturnCode STDCALL witFinishHeurAdjust (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witFinishHeurAdjust, ())
   }

//------------------------------------------------------------------------------

a2508 12
WIT_DECLSPEC witReturnCode STDCALL witGetHeurAdjustActive (
      WitRun * const theWitRun,
      witBoolean * heurAdjustActive)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetHeurAdjustActive, (
         heurAdjustActive))
   }

//------------------------------------------------------------------------------

a8505 10
WIT_DECLSPEC witReturnCode STDCALL witStartHeurAdjust (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witStartHeurAdjust, ())
   }

//------------------------------------------------------------------------------

@


1.338
log
@Heuristic Adjustment
@
text
@d2531 12
d6699 12
@


1.337
log
@Pause/Resume
@
text
@d600 10
d2519 1
a2519 1
WIT_DECLSPEC witReturnCode STDCALL witGetHeurAllocActive (
d2521 1
a2521 1
      witBoolean * heurAllocActive)
d2525 2
a2526 2
      witGetHeurAllocActive, (
         heurAllocActive))
d2531 1
a2531 1
WIT_DECLSPEC witReturnCode STDCALL witGetHeurAllocPaused (
d2533 1
a2533 1
      witBoolean * heurAllocPaused)
d2537 2
a2538 2
      witGetHeurAllocPaused, (
         heurAllocPaused))
a5598 10
WIT_DECLSPEC witReturnCode STDCALL witPauseHeurAlloc (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witPauseHeurAlloc, ())
   }

//------------------------------------------------------------------------------

d8504 10
@


1.336
log
@Pause/resume
@
text
@d5589 10
@


1.335
log
@Name change: "selection reuse" has becomne "selection recovery".
@
text
@d2521 12
@


1.334
log
@Lead Time Bounds.
@
text
@d4613 1
a4613 1
WIT_DECLSPEC witReturnCode STDCALL witGetSelectionReuse (
d4615 1
a4615 1
      witBoolean * selectionReuse)
d4619 2
a4620 2
      witGetSelectionReuse, (
         selectionReuse))
d7780 1
a7780 1
WIT_DECLSPEC witReturnCode STDCALL witSetSelectionReuse (
d7782 1
a7782 1
      const witBoolean selectionReuse)
d7786 2
a7787 2
      witSetSelectionReuse, (
         selectionReuse))
@


1.333
log
@Bounded Lead Times
@
text
@d3577 1
a3577 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartBoundedLeadTime (
d3580 1
a3580 1
      witBoolean * boundedLeadTime)
d3584 1
a3584 1
      witGetPartBoundedLeadTime, (
d3586 1
a3586 1
         boundedLeadTime))
d7387 1
a7387 1
WIT_DECLSPEC witReturnCode STDCALL witSetPartBoundedLeadTime (
d7390 1
a7390 1
      const witBoolean boundedLeadTime)
d7394 1
a7394 1
      witSetPartBoundedLeadTime, (
d7396 1
a7396 1
         boundedLeadTime))
@


1.332
log
@Bounded Lead Times
@
text
@d3577 1
a3577 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartBoundedLeadTimes (
d3580 1
a3580 1
      witBoolean * boundedLeadTimes)
d3584 1
a3584 1
      witGetPartBoundedLeadTimes, (
d3586 1
a3586 1
         boundedLeadTimes))
d7387 1
a7387 1
WIT_DECLSPEC witReturnCode STDCALL witSetPartBoundedLeadTimes (
d7390 1
a7390 1
      const witBoolean boundedLeadTimes)
d7394 1
a7394 1
      witSetPartBoundedLeadTimes, (
d7396 1
a7396 1
         boundedLeadTimes))
@


1.331
log
@Bounded Lead Times
@
text
@d1835 16
d6405 16
@


1.330
log
@Selection Reuse.
@
text
@d3561 14
d7355 14
@


1.329
log
@CPLEX
@
text
@d4583 12
d7720 12
@


1.328
log
@CPLEX
@
text
@d4619 12
d7732 12
@


1.327
log
@Preparing for CPLEX.
@
text
@d1348 12
@


1.326
log
@Revising the build procedure.
@
text
@d4595 12
d7696 12
@


1.325
log
@Revising the build procedure.
@
text
@d4583 12
@


1.324
log
@Revising the build procedure.
@
text
@d1312 12
a9657 12
WIT_DECLSPEC witReturnCode STDCALL witGetCoinEmdedded (
      WitRun * const theWitRun,
      witBoolean *   coinEmdedded)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCoinEmdedded, (
         coinEmdedded))
   }

//------------------------------------------------------------------------------

@


1.323
log
@Revising the build process.
@
text
@d9646 12
a9719 12
WIT_DECLSPEC witReturnCode STDCALL witGetWitEmbedsCoin (
      WitRun * const theWitRun,
      witBoolean *   witEmbedsCoin)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetWitEmbedsCoin, (
         witEmbedsCoin))
   }

//------------------------------------------------------------------------------

@


1.322
log
@Multi-Obj Mode
@
text
@a9681 12
WIT_DECLSPEC witReturnCode STDCALL witGetOptImpAllowed (
      WitRun * const theWitRun,
      witBoolean *   optImpAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOptImpAllowed, (
         optImpAllowed))
   }

//------------------------------------------------------------------------------

d9708 12
@


1.321
log
@Multi-Obj Mode
@
text
@d2913 1
a2913 1
WIT_DECLSPEC witReturnCode STDCALL witGetObjectiveSeqNo (
d2915 1
a2915 1
      int * objectiveSeqNo)
d2919 2
a2920 2
      witGetObjectiveSeqNo, (
         objectiveSeqNo))
d6833 1
a6833 1
WIT_DECLSPEC witReturnCode STDCALL witSetObjectiveSeqNo (
d6835 1
a6835 1
      const int objectiveSeqNo)
d6839 2
a6840 2
      witSetObjectiveSeqNo, (
         objectiveSeqNo))
@


1.320
log
@Multi-objective mode
@
text
@d2669 24
d6735 24
@


1.319
log
@Multi-objective mode
@
text
@a2680 12
WIT_DECLSPEC witReturnCode STDCALL witGetNObjectives (
      WitRun * const theWitRun,
      int * nObjectives)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetNObjectives, (
         nObjectives))
   }
 
//------------------------------------------------------------------------------

a2888 12
WIT_DECLSPEC witReturnCode STDCALL witGetObjectiveName (
      WitRun * const theWitRun,
      char * * objectiveName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjectiveName, (
         objectiveName))
   }
 
//------------------------------------------------------------------------------

a6722 12
WIT_DECLSPEC witReturnCode STDCALL witSetNObjectives (
      WitRun * const theWitRun,
      const int nObjectives)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetNObjectives, (
         nObjectives))
   }
 
//------------------------------------------------------------------------------

a6784 12
WIT_DECLSPEC witReturnCode STDCALL witSetObjectiveName (
      WitRun * const theWitRun,
      const char * const objectiveName)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetObjectiveName, (
         objectiveName))
   }
  
//------------------------------------------------------------------------------

@


1.318
log
@Multi-objective mode
@
text
@d2889 12
d6809 12
@


1.317
log
@Multi-Objective Mode
@
text
@d2875 14
a2912 14
WIT_DECLSPEC witReturnCode STDCALL witGetObjectives (
      WitRun * const theWitRun,
      int  *         lenList,
      char * * *     objectiveList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjectives, (
         lenList,
         objectiveList))
   }

//------------------------------------------------------------------------------

d6783 14
@


1.316
log
@Multi-Objective Mode.
@
text
@d2899 14
a9643 14
WIT_DECLSPEC witReturnCode STDCALL witGetObjectives (
      WitRun * const theWitRun,
      int  *         lenList,
      char * * *     objectiveList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObjectives, (
         lenList,
         objectiveList))
   }

//------------------------------------------------------------------------------

@


1.315
log
@Multi-objective mode.
@
text
@d2887 12
d6781 12
@


1.314
log
@Multi-objective mode.
@
text
@d2875 12
d6757 12
@


1.313
log
@Multi-obj mode.
@
text
@d1354 1
a1354 1
      char * * currentObjective)
d1359 1
a1359 1
         currentObjective))
d6031 1
a6031 1
      const char * const currentObjective)
d6036 1
a6036 1
         currentObjective))
@


1.312
log
@Multi-obj mode.
@
text
@d9582 14
@


1.311
log
@Multi-objective mode.
@
text
@d1352 12
d6029 12
@


1.310
log
@Removing objective #2.
@
text
@d2669 12
d6673 12
@


1.309
log
@Removing objective #2.
@
text
@a8785 24
WIT_DECLSPEC witReturnCode STDCALL witGetPeriodsPerYear (
      WitRun * const theWitRun,
      float * periodsPerYear)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPeriodsPerYear, (
         periodsPerYear))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPeriodsPerYearDbl (
      WitRun * const theWitRun,
      double * periodsPerYear)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPeriodsPerYear, (
         periodsPerYear))
   }

//------------------------------------------------------------------------------

a9375 24
WIT_DECLSPEC witReturnCode STDCALL witSetPeriodsPerYear (
      WitRun * const theWitRun,
      const float periodsPerYear)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPeriodsPerYear, (
         periodsPerYear))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPeriodsPerYearDbl (
      WitRun * const theWitRun,
      const double periodsPerYear)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetPeriodsPerYear, (
         periodsPerYear))
   }
 
//------------------------------------------------------------------------------

@


1.308
log
@Multi-obj mode.
@
text
@a8367 24
WIT_DECLSPEC witReturnCode STDCALL witGetCapCost (
      WitRun * const theWitRun,
      float * capCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetCapCost, (
         capCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetCapCostDbl (
      WitRun * const theWitRun,
      double * capCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetCapCost, (
         capCost))
   }
 
//------------------------------------------------------------------------------

a8399 32
WIT_DECLSPEC witReturnCode STDCALL witGetDemandGrossRev (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * grossRev)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandGrossRev, (
         demandedPartName,
         demandName,
         grossRev))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandGrossRevDbl (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * grossRev)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetDemandGrossRev, (
         demandedPartName,
         demandName,
         grossRev))
   }

//------------------------------------------------------------------------------

a8507 24
WIT_DECLSPEC witReturnCode STDCALL witGetInvCost (
      WitRun * const theWitRun,
      float * invCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetInvCost, (
         invCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetInvCostDbl (
      WitRun * const theWitRun,
      double * invCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetInvCost, (
         invCost))
   }
 
//------------------------------------------------------------------------------

a8531 132
WIT_DECLSPEC witReturnCode STDCALL witGetObj2Values (
      WitRun * const theWitRun,
      float * revValue,
      float * invValue,
      float * servValue,
      float * subsValue)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObj2Values, (
         revValue,
         invValue,
         servValue,
         subsValue))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObj2ValuesDbl (
      WitRun * const theWitRun,
      double * revValue,
      double * invValue,
      double * servValue,
      double * subsValue)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetObj2Values, (
         revValue,
         invValue,
         servValue,
         subsValue))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObj2Winv (
      WitRun * const theWitRun,
      float * obj2Winv)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObj2Winv, (
         obj2Winv))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObj2WinvDbl (
      WitRun * const theWitRun,
      double * obj2Winv)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetObj2Winv, (
         obj2Winv))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObj2Wrev (
      WitRun * const theWitRun,
      float * obj2Wrev)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObj2Wrev, (
         obj2Wrev))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObj2WrevDbl (
      WitRun * const theWitRun,
      double * obj2Wrev)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetObj2Wrev, (
         obj2Wrev))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObj2Wserv (
      WitRun * const theWitRun,
      float * obj2Wserv)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObj2Wserv, (
         obj2Wserv))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObj2WservDbl (
      WitRun * const theWitRun,
      double * obj2Wserv)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetObj2Wserv, (
         obj2Wserv))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObj2Wsub (
      WitRun * const theWitRun,
      float * obj2Wsub)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetObj2Wsub, (
         obj2Wsub))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObj2WsubDbl (
      WitRun * const theWitRun,
      double * obj2Wsub)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetObj2Wsub, (
         obj2Wsub))
   }
 
//------------------------------------------------------------------------------

a8571 28
WIT_DECLSPEC witReturnCode STDCALL witGetOperationObj2AuxCost (
      WitRun * const theWitRun,
      const char * const operationName,
      float * obj2AuxCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetOperationObj2AuxCost, (
         operationName,
         obj2AuxCost))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationObj2AuxCostDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      double * obj2AuxCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetOperationObj2AuxCost, (
         operationName,
         obj2AuxCost))
   }

//------------------------------------------------------------------------------

a8771 28
WIT_DECLSPEC witReturnCode STDCALL witGetPartUnitCost (
      WitRun * const theWitRun,
      const char * const partName,
      float * unitCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartUnitCost, (
         partName,
         unitCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartUnitCostDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * unitCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetPartUnitCost, (
         partName,
         unitCost))
   }
 
//------------------------------------------------------------------------------

a8839 36
WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryObj2SubPenalty (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * obj2SubPenalty)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetSubsBomEntryObj2SubPenalty, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj2SubPenalty))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryObj2SubPenaltyDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * obj2SubPenalty)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witGetSubsBomEntryObj2SubPenalty, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj2SubPenalty))
   }

//------------------------------------------------------------------------------

a8993 24
WIT_DECLSPEC witReturnCode STDCALL witSetCapCost (
      WitRun * const theWitRun,
      const float capCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetCapCost, (
         capCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetCapCostDbl (
      WitRun * const theWitRun,
      const double capCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetCapCost, (
         capCost))
   }
 
//------------------------------------------------------------------------------

a9025 32
WIT_DECLSPEC witReturnCode STDCALL witSetDemandGrossRev (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float grossRev)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandGrossRev, (
         partName,
         demandName,
         grossRev))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandGrossRevDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double grossRev)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetDemandGrossRev, (
         partName,
         demandName,
         grossRev))
   }
 
//------------------------------------------------------------------------------

a9133 24
WIT_DECLSPEC witReturnCode STDCALL witSetInvCost (
      WitRun * const theWitRun,
      const float invCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetInvCost, (
         invCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetInvCostDbl (
      WitRun * const theWitRun,
      const double invCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetInvCost, (
         invCost))
   }
 
//------------------------------------------------------------------------------

a9157 96
WIT_DECLSPEC witReturnCode STDCALL witSetObj2Winv (
      WitRun * const theWitRun,
      const float obj2Winv)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetObj2Winv, (
         obj2Winv))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObj2WinvDbl (
      WitRun * const theWitRun,
      const double obj2Winv)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetObj2Winv, (
         obj2Winv))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObj2Wrev (
      WitRun * const theWitRun,
      const float obj2Wrev)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetObj2Wrev, (
         obj2Wrev))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObj2WrevDbl (
      WitRun * const theWitRun,
      const double obj2Wrev)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetObj2Wrev, (
         obj2Wrev))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObj2Wserv (
      WitRun * const theWitRun,
      const float obj2Wserv)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetObj2Wserv, (
         obj2Wserv))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObj2WservDbl (
      WitRun * const theWitRun,
      const double obj2Wserv)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetObj2Wserv, (
         obj2Wserv))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObj2Wsub (
      WitRun * const theWitRun,
      const float obj2Wsub)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetObj2Wsub, (
         obj2Wsub))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObj2WsubDbl (
      WitRun * const theWitRun,
      const double obj2Wsub)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetObj2Wsub, (
         obj2Wsub))
   }
 
//------------------------------------------------------------------------------

a9197 28
WIT_DECLSPEC witReturnCode STDCALL witSetOperationObj2AuxCost (
      WitRun * const theWitRun,
      const char * const operationName,
      const float obj2AuxCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetOperationObj2AuxCost, (
         operationName,
         obj2AuxCost))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationObj2AuxCostDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const double obj2AuxCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetOperationObj2AuxCost, (
         operationName,
         obj2AuxCost))
   }

//------------------------------------------------------------------------------

a9385 28
WIT_DECLSPEC witReturnCode STDCALL witSetPartUnitCost (
      WitRun * const theWitRun,
      const char * const partName,
      const float unitCost)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartUnitCost, (
         partName,
         unitCost))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartUnitCostDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const double unitCost)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetPartUnitCost, (
         partName,
         unitCost))
   }
 
//------------------------------------------------------------------------------

a9453 36
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryObj2SubPenalty (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float obj2SubPenalty)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetSubsBomEntryObj2SubPenalty, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj2SubPenalty))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryObj2SubPenaltyDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double obj2SubPenalty)
   {
   STANDARD_DBL_API_IMPL (
      theWitRun,
      witSetSubsBomEntryObj2SubPenalty, (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj2SubPenalty))
   }

//------------------------------------------------------------------------------

@


1.307
log
@Removed multiThread.
@
text
@d2645 12
d6637 12
@


1.306
log
@Made WIT operate in multi-thread mode unconditionally.
The multithread attribute in no longer meaningful.
@
text
@a8587 12
WIT_DECLSPEC witReturnCode STDCALL witGetMultiThread (
      WitRun * const theWitRun,
      witBoolean *   multiThread)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMultiThread, (
         multiThread))
   }

//------------------------------------------------------------------------------

a9517 12
WIT_DECLSPEC witReturnCode STDCALL witSetMultiThread (
      WitRun * const   theWitRun,
      const witBoolean multiThread)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMultiThread, (
         multiThread))
   }

//------------------------------------------------------------------------------

@


1.305
log
@Corrected an alpabetization error.
@
text
@a454 3
   if (not WitApiMgr::multiThread ())
      WitApiMgr::lockWit ("witDeleteRun");

a456 3
   if (not WitApiMgr::multiThread ())
      WitApiMgr::unlockWit ();

a2656 12
WIT_DECLSPEC witReturnCode STDCALL witGetMultiThread (
      WitRun * const theWitRun,
      witBoolean *   multiThread)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetMultiThread, (
         multiThread))
   }

//------------------------------------------------------------------------------

a5369 3
   if (not WitApiMgr::multiThread ())
      WitApiMgr::lockWit ("witNewRun");

a5371 3
   if (not WitApiMgr::multiThread ())
      WitApiMgr::unlockWit ();

a6636 12
WIT_DECLSPEC witReturnCode STDCALL witSetMultiThread (
      WitRun * const   theWitRun,
      const witBoolean multiThread)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetMultiThread, (
         multiThread))
   }

//------------------------------------------------------------------------------

d8588 12
d9530 12
@


1.304
log
@Implemented the undocumented "wit34Allowed" attribute.
@
text
@d5413 1
a5413 1
WIT_DECLSPEC witReturnCode STDCALL witPreprocess (
d5418 1
a5418 1
      witPreprocess, ())
d5423 1
a5423 1
WIT_DECLSPEC witReturnCode STDCALL witPostprocess (
d5428 1
a5428 1
      witPostprocess, ())
@


1.303
log
@Implemented witIssueFatalMesg.
@
text
@d10349 12
@


1.302
log
@Alterations to allow compilation with the GCC 4.3.2 compiler.
@
text
@d5368 1
a5368 1
 
d10204 22
a10348 12

WIT_DECLSPEC witReturnCode STDCALL witInterpretDevCmd (
      WitRun * const     theWitRun,
      const char * const theDevCmd)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witInterpretDevCmd, (
         theDevCmd))
   }

//------------------------------------------------------------------------------
@


1.301
log
@Added witGetObjectValue and witGetBoundsValue.
Moved witGetObjectValues to the undocumented section.
@
text
@d29 2
@


1.300
log
@Removed many conversions of string constant to char *.
@
text
@d1292 1
a1292 1
WIT_DECLSPEC witReturnCode STDCALL witGetBuildWhenEmpty (
d1294 1
a1294 1
      witBoolean * buildWhenEmpty)
d1298 14
a1311 2
      witGetBuildWhenEmpty, (
         buildWhenEmpty))
d1313 1
a1313 1
 
d2803 24
d2838 1
a2838 1
 
d2852 1
a2852 1
 
d8366 12
@


1.299
log
@Removed some implicit conversions from string constant to char *.
@
text
@d98 1
a98 1
// asAttr
d100 3
a102 1
// Converts a c-string into a witAttr.
d107 1
a107 1
   witAttr asAttr (const char * theCstring)
d109 1
a109 1
      return const_cast <witAttr> (theCstring);
d10319 2
a10320 2
WIT_DECLSPEC WIT_CONST witAttr WitSTDOUT                 = asAttr ("stdout");
WIT_DECLSPEC WIT_CONST witAttr WitSTDIN                  = asAttr ("stdin");
d10322 36
a10357 37
WIT_DECLSPEC WIT_CONST witAttr WitRAW                    = asAttr ("RAW");
WIT_DECLSPEC WIT_CONST witAttr WitPRODUCT                = asAttr ("PRODUCT");
WIT_DECLSPEC WIT_CONST witAttr WitCAPACITY               = asAttr ("CAPACITY");
WIT_DECLSPEC WIT_CONST witAttr WitMATERIAL               = asAttr ("MATERIAL");

WIT_DECLSPEC WIT_CONST int WitINFORMATIONAL_MESSAGES     = -1;
WIT_DECLSPEC WIT_CONST int WitWARNING_MESSAGES           = -2;
WIT_DECLSPEC WIT_CONST int WitSEVERE_MESSAGES            = -3;
WIT_DECLSPEC WIT_CONST int WitFATAL_MESSAGES             = -4;

WIT_DECLSPEC WIT_CONST witReturnCode WitINFORMATIONAL_RC = 0;
WIT_DECLSPEC WIT_CONST witReturnCode WitWARNING_RC       = 1;
WIT_DECLSPEC WIT_CONST witReturnCode WitSEVERE_RC        = 3;
WIT_DECLSPEC WIT_CONST witReturnCode WitFATAL_RC         = 4;

WIT_DECLSPEC WIT_CONST witFileFormat WitBSV              = asAttr ("bsv");
WIT_DECLSPEC WIT_CONST witFileFormat WitCSV              = asAttr ("csv");

WIT_DECLSPEC WIT_CONST witAttr WitACC_OPT_INIT_METHOD    =
                        asAttr ("accOptInitMethod");

WIT_DECLSPEC WIT_CONST witAttr WitHEUR_OPT_INIT_METHOD   =
                        asAttr ("heurOptInitMethod");

WIT_DECLSPEC WIT_CONST witAttr WitSCHED_OPT_INIT_METHOD  =
                        asAttr ("schedOptInitMethod");

WIT_DECLSPEC WIT_CONST witAttr WitCRASH_OPT_INIT_METHOD  =
                        asAttr ("crashOptInitMethod");

WIT_DECLSPEC WIT_CONST witAttr WitINACTIVE     = asAttr ("inactive");
WIT_DECLSPEC WIT_CONST witAttr WitAT_PART      = asAttr ("atPart");
WIT_DECLSPEC WIT_CONST witAttr WitAT_DEMAND    = asAttr ("atDemand");
WIT_DECLSPEC WIT_CONST witAttr WitAT_OPERATION = asAttr ("atOperation");
WIT_DECLSPEC WIT_CONST witAttr WitAT_BOM_ENTRY = asAttr ("atBomEntry");
WIT_DECLSPEC WIT_CONST witAttr WitAT_SUB_ENTRY = asAttr ("atSubEntry");
WIT_DECLSPEC WIT_CONST witAttr WitAT_BOP_ENTRY = asAttr ("atBopEntry");
@


1.298
log
@Experiment for the char * problem.
@
text
@d98 14
d10317 2
a10318 7
WIT_DECLSPEC WIT_CONST witAttr WitSTDOUT                 =
   const_cast <char *> ("stdout");

WIT_DECLSPEC WIT_CONST witAttr WitSTDIN                  = "stdin";

WIT_DECLSPEC WIT_CONST witAttr WitRAW                    = "RAW";
WIT_DECLSPEC WIT_CONST witAttr WitPRODUCT                = "PRODUCT";
d10320 4
a10323 2
WIT_DECLSPEC WIT_CONST witAttr WitCAPACITY               = "CAPACITY";
WIT_DECLSPEC WIT_CONST witAttr WitMATERIAL               = "MATERIAL";
d10335 8
a10342 2
WIT_DECLSPEC WIT_CONST witFileFormat WitBSV              = "bsv";
WIT_DECLSPEC WIT_CONST witFileFormat WitCSV              = "csv";
d10344 13
a10356 12
WIT_DECLSPEC WIT_CONST witAttr WitACC_OPT_INIT_METHOD    = "accOptInitMethod";
WIT_DECLSPEC WIT_CONST witAttr WitHEUR_OPT_INIT_METHOD   = "heurOptInitMethod";
WIT_DECLSPEC WIT_CONST witAttr WitSCHED_OPT_INIT_METHOD  = "schedOptInitMethod";
WIT_DECLSPEC WIT_CONST witAttr WitCRASH_OPT_INIT_METHOD  = "crashOptInitMethod";

WIT_DECLSPEC WIT_CONST witAttr WitINACTIVE               = "inactive";
WIT_DECLSPEC WIT_CONST witAttr WitAT_PART                = "atPart";
WIT_DECLSPEC WIT_CONST witAttr WitAT_DEMAND              = "atDemand";
WIT_DECLSPEC WIT_CONST witAttr WitAT_OPERATION           = "atOperation";
WIT_DECLSPEC WIT_CONST witAttr WitAT_BOM_ENTRY           = "atBomEntry";
WIT_DECLSPEC WIT_CONST witAttr WitAT_SUB_ENTRY           = "atSubEntry";
WIT_DECLSPEC WIT_CONST witAttr WitAT_BOP_ENTRY           = "atBopEntry";
@


1.297
log
@Object name change.
@
text
@d10303 3
a10305 1
WIT_DECLSPEC WIT_CONST witAttr WitSTDOUT                 = "stdout";
@


1.296
log
@Object name changing.
@
text
@d6063 16
@


1.295
log
@Object name changing.
@
text
@d6941 14
d7121 2
a7122 2
      const char * const oldPartName,
      const char * const newPartName)
d7127 2
a7128 2
         oldPartName,
         newPartName))
@


1.294
log
@Moved a function to its correct alphabetic position.
@
text
@d7105 14
@


1.293
log
@Stochastic Implosion
@
text
@a287 12
WIT_DECLSPEC witReturnCode STDCALL witCopyData (
      WitRun * const dupWitRun,
      WitRun * const origWitRun)
   {
   STANDARD_API_IMPL (
      dupWitRun,
      witCopyData, (
         origWitRun))
   }

//------------------------------------------------------------------------------

d328 12
@


1.292
log
@Stochastic Implosion
@
text
@d1328 1
a1328 1
WIT_DECLSPEC witReturnCode STDCALL witGetCurScenarioIndex (
d1330 1
a1330 1
      int * curScenarioIndex)
d1334 2
a1335 2
      witGetCurScenarioIndex, (
         curScenarioIndex))
d5963 1
a5963 1
WIT_DECLSPEC witReturnCode STDCALL witSetCurScenarioIndex (
d5965 1
a5965 1
      const int curScenarioIndex)
d5969 2
a5970 2
      witSetCurScenarioIndex, (
         curScenarioIndex))
@


1.291
log
@Stochastic Implosion
@
text
@d3251 1
a3251 1
WIT_DECLSPEC witReturnCode STDCALL witGetOperationSelForDel (
d3254 1
a3254 1
      witBoolean * selForDel)
d3258 1
a3258 1
      witGetOperationSelForDel, (
d3260 1
a3260 1
         selForDel))
d3265 1
a3265 1
WIT_DECLSPEC witReturnCode STDCALL witGetOperationStageIndex (
d3268 1
a3268 1
      int * stageIndex)
d3272 1
a3272 1
      witGetOperationStageIndex, (
d3274 1
a3274 1
         stageIndex))
d3749 14
a4036 14
WIT_DECLSPEC witReturnCode STDCALL witGetPartStageIndex (
      WitRun * const     theWitRun,
      const char * const partName,
      int *              stageIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartStageIndex, (
         partName,
         stageIndex))
   }

//------------------------------------------------------------------------------

d4231 1
a4231 1
WIT_DECLSPEC witReturnCode STDCALL witGetPerStageIndex (
d4233 1
a4233 1
      int * *        perStageIndex)
d4237 2
a4238 2
      witGetPerStageIndex, (
         perStageIndex))
d4243 1
a4243 1
WIT_DECLSPEC witReturnCode STDCALL witGetPerfPegging (
d4245 1
a4245 1
      witBoolean * perfPegging)
d4249 2
a4250 2
      witGetPerfPegging, (
         perfPegging))
d6927 2
a6928 2
WIT_DECLSPEC witReturnCode STDCALL witSetOperationSelForDel (
      WitRun * const theWitRun,
d6930 1
a6930 1
      const witBoolean selForDel)
d6934 1
a6934 1
      witSetOperationSelForDel, (
d6936 1
a6936 1
         selForDel))
d6941 2
a6942 2
WIT_DECLSPEC witReturnCode STDCALL witSetOperationStageIndex (
      WitRun * const     theWitRun,
d6944 1
a6944 1
      const int          stageIndex)
d6948 1
a6948 1
      witSetOperationStageIndex, (
d6950 1
a6950 1
         stageIndex))
d7091 14
a7189 14
WIT_DECLSPEC witReturnCode STDCALL witSetPartStageIndex (
      WitRun * const     theWitRun,
      const char * const partName,
      const int          stageIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartStageIndex, (
         partName,
         stageIndex))
   }

//------------------------------------------------------------------------------

d7294 1
a7294 1
WIT_DECLSPEC witReturnCode STDCALL witSetPerStageIndex (
d7296 1
a7296 1
      const int *    perStageIndex)
d7300 2
a7301 2
      witSetPerStageIndex, (
         perStageIndex))
d7306 1
a7306 1
WIT_DECLSPEC witReturnCode STDCALL witSetPerfPegging (
d7308 1
a7308 1
      const witBoolean perfPegging)
d7312 2
a7313 2
      witSetPerfPegging, (
         perfPegging))
@


1.290
log
@Stochastic Implosion
@
text
@d4231 24
a4318 12
WIT_DECLSPEC witReturnCode STDCALL witGetPerfPegging (
      WitRun * const theWitRun,
      witBoolean * perfPegging)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPerfPegging, (
         perfPegging))
   }

//------------------------------------------------------------------------------

a4472 12
WIT_DECLSPEC witReturnCode STDCALL witGetStageIndex (
      WitRun * const theWitRun,
      int * *        stageIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetStageIndex, (
         stageIndex))
   }

//------------------------------------------------------------------------------

d7294 12
a7449 12
WIT_DECLSPEC witReturnCode STDCALL witSetStageIndex (
      WitRun * const theWitRun,
      const int *    stageIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetStageIndex, (
         stageIndex))
   }

//------------------------------------------------------------------------------

@


1.289
log
@witGetExpCycle
@
text
@d4451 1
a4451 1
      witBoolean * stageByObject)
d4461 12
d7438 12
@


1.288
log
@Stochastic Implosion
@
text
@d2287 16
@


1.287
log
@Stochastic Implosion
@
text
@d3249 1
a3249 1
WIT_DECLSPEC witReturnCode STDCALL witGetOperationStageNo (
d3252 1
a3252 1
      int * stageNo)
d3256 1
a3256 1
      witGetOperationStageNo, (
d3258 1
a3258 1
         stageNo))
d4007 1
a4007 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartStageNo (
d4010 1
a4010 1
      int *              stageNo)
d4014 1
a4014 1
      witGetPartStageNo, (
d4016 1
a4016 1
         stageNo))
d6913 1
a6913 1
WIT_DECLSPEC witReturnCode STDCALL witSetOperationStageNo (
d6916 1
a6916 1
      const int          stageNo)
d6920 1
a6920 1
      witSetOperationStageNo, (
d6922 1
a6922 1
         stageNo))
d7148 1
a7148 1
WIT_DECLSPEC witReturnCode STDCALL witSetPartStageNo (
d7151 1
a7151 1
      const int          stageNo)
d7155 1
a7155 1
      witSetPartStageNo, (
d7157 1
a7157 1
         stageNo))
@


1.286
log
@Stochastic Implosion
@
text
@d1328 1
a1328 1
WIT_DECLSPEC witReturnCode STDCALL witGetCurScenarioNo (
d1330 1
a1330 1
      int * curScenarioNo)
d1334 2
a1335 2
      witGetCurScenarioNo, (
         curScenarioNo))
d5935 1
a5935 1
WIT_DECLSPEC witReturnCode STDCALL witSetCurScenarioNo (
d5937 1
a5937 1
      const int curScenarioNo)
d5941 2
a5942 2
      witSetCurScenarioNo, (
         curScenarioNo))
@


1.285
log
@Stochastic Implosion
@
text
@d278 10
a463 10
WIT_DECLSPEC witReturnCode STDCALL witDiscardStochSoln (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witDiscardStochSoln, ())
   }

//------------------------------------------------------------------------------

@


1.284
log
@Stochastic Implosion
@
text
@d30 1
a30 1
// Macro STANDARD_API_IMPL (theWitRun, innerFunc, argList, suffix, preInitMode)
d36 1
a36 1
//    theWitRun    The WitRun for which the  inner API function is to be called.
d38 2
a39 3
//    suffix       A string to be appended to the end of the string value of 
//                 innerfunc to form the name of the outer API function
//                 being implemented.
d44 1
a44 1
// entirely of a call to this macro.
d50 1
a50 5
#define STANDARD_API_IMPL(                                                     \
      theWitRun,                                                               \
      innerFunc,                                                               \
      suffix,                                                                  \
      argList)                                                                 \
d54 29
a82 1
      WitApiMgr::startApiFunc  (theWitRun, #innerFunc suffix);                 \
d113 1
a113 1
      witAddBomEntry, "", (
d127 1
a127 1
      witAddBopEntry, "", (
d141 1
a141 1
      witAddDemand, "", (
d154 1
a154 1
      witAddOperation, "", (
d167 1
a167 1
      witAddPart, "", (
d180 1
a180 1
      witAddPartWithOperation, "", (
d194 1
a194 1
      witAddSubsBomEntry, "", (
d207 1
a207 1
      witAdvanceObjItr, "", ())
d221 1
a221 1
      witAppendToPipSeq, "", (
d237 1
a237 1
   STANDARD_API_IMPL (
d239 1
a239 1
      witAppendToPipSeq, "Dbl", (
d253 1
a253 1
      witBuildPip, "", ())
d263 1
a263 1
      witClearPegging, "", ())
d273 1
a273 1
      witClearPipSeq, "", ())
d284 1
a284 1
      witCopyData, "", (
d300 1
a300 1
      witCopyBomEntryData, "", (
d320 1
a320 1
      witCopyBopEntryData, "", (
d340 1
a340 1
      witCopyDemandData, "", (
d358 1
a358 1
      witCopyOperationData, "", (
d374 1
a374 1
      witCopyPartData, "", (
d394 1
a394 1
      witCopySubsBomEntryData, "", (
d449 1
a449 1
      witDeleteRun, "", ())
d459 1
a459 1
      witDiscardStochSoln, "", ())
d470 1
a470 1
      witDisplayData, "", (
d487 1
a487 1
      witEqHeurAlloc, "", (
d507 1
a507 1
   STANDARD_API_IMPL (
d509 1
a509 1
      witEqHeurAlloc, "Dbl", (
d532 1
a532 1
      witEqHeurAllocTwme, "", (
d554 1
a554 1
   STANDARD_API_IMPL (
d556 1
a556 1
      witEqHeurAllocTwme, "Dbl", (
d573 1
a573 1
      witEvalObjectives, "", ())
d583 1
a583 1
      witFinishExtOpt, "", ())
d593 1
a593 1
      witFinishHeurAlloc, "", ())
d615 1
a615 1
      witGeneratePriorities, "", ())
d626 1
a626 1
      witGetAccAfterSoftLB, "", (
d638 1
a638 1
      witGetAccAfterOptImp, "", (
d650 1
a650 1
      witGetAccelerated, "", (
d662 1
a662 1
      witGetAppData, "", (
d674 1
a674 1
      witGetAutoPriority, "", (
d688 1
a688 1
      witGetBomEntryAppData, "", (
d704 1
a704 1
      witGetBomEntryConsRate, "", (
d718 1
a718 1
   STANDARD_API_IMPL (
d720 1
a720 1
      witGetBomEntryConsRate, "Dbl", (
d736 1
a736 1
      witGetBomEntryConsumedPart, "", (
d752 1
a752 1
      witGetBomEntryEarliestPeriod, "", (
d768 1
a768 1
      witGetBomEntryExecPenalty, "", (
d782 1
a782 1
   STANDARD_API_IMPL (
d784 1
a784 1
      witGetBomEntryExecPenalty, "Dbl", (
d800 1
a800 1
      witGetBomEntryFalloutRate, "", (
d814 1
a814 1
   STANDARD_API_IMPL (
d816 1
a816 1
      witGetBomEntryFalloutRate, "Dbl", (
d832 1
a832 1
      witGetBomEntryImpactPeriod, "", (
d848 1
a848 1
      witGetBomEntryLatestPeriod, "", (
d864 1
a864 1
      witGetBomEntryMandEC, "", (
d880 1
a880 1
      witGetBomEntryNSubsBomEntries, "", (
d897 1
a897 1
      witGetBomEntryNonSubVarIndex, "", (
d914 1
a914 1
      witGetBomEntryOffset, "", (
d928 1
a928 1
   STANDARD_API_IMPL (
d930 1
a930 1
      witGetBomEntryOffset, "Dbl", (
d946 1
a946 1
      witGetBomEntryPropRtg, "", (
d962 1
a962 1
      witGetBomEntryRoutingShare, "", (
d976 1
a976 1
   STANDARD_API_IMPL (
d978 1
a978 1
      witGetBomEntryRoutingShare, "Dbl", (
d994 1
a994 1
      witGetBomEntrySelForDel, "", (
d1010 1
a1010 1
      witGetBomEntrySingleSource, "", (
d1027 1
a1027 1
      witGetBomEntrySubConIndex, "", (
d1044 1
a1044 1
      witGetBopEntryAppData, "", (
d1060 1
a1060 1
      witGetBopEntryEarliestPeriod, "", (
d1076 1
a1076 1
      witGetBopEntryExpAllowed, "", (
d1092 1
a1092 1
      witGetBopEntryExpAversion, "", (
d1106 1
a1106 1
   STANDARD_API_IMPL (
d1108 1
a1108 1
      witGetBopEntryExpAversion, "Dbl", (
d1124 1
a1124 1
      witGetBopEntryImpactPeriod, "", (
d1140 1
a1140 1
      witGetBopEntryLatestPeriod, "", (
d1156 1
a1156 1
      witGetBopEntryOffset, "", (
d1170 1
a1170 1
   STANDARD_API_IMPL (
d1172 1
a1172 1
      witGetBopEntryOffset, "Dbl", (
d1188 1
a1188 1
      witGetBopEntryProductRate, "", (
d1202 1
a1202 1
   STANDARD_API_IMPL (
d1204 1
a1204 1
      witGetBopEntryProductRate, "Dbl", (
d1220 1
a1220 1
      witGetBopEntryProducedPart, "", (
d1236 1
a1236 1
      witGetBopEntryRoutingShare, "", (
d1250 1
a1250 1
   STANDARD_API_IMPL (
d1252 1
a1252 1
      witGetBopEntryRoutingShare, "Dbl", (
d1268 1
a1268 1
      witGetBopEntrySelForDel, "", (
d1282 1
a1282 1
      witGetBuildWhenEmpty, "", (
d1294 1
a1294 1
      witGetCompPrices, "", (
d1306 1
a1306 1
      witGetComputeCriticalList, "", (
d1320 1
a1320 1
      witGetCriticalList, "", (
d1334 1
a1334 1
      witGetCurScenarioNo, "", (
d1348 1
a1348 1
      witGetDemandAppData, "", (
d1369 1
a1369 1
      witGetDemandCoExecVolPip, "", (
d1393 1
a1393 1
   STANDARD_API_IMPL (
d1395 1
a1395 1
      witGetDemandCoExecVolPip, "Dbl", (
d1420 1
a1420 1
      witGetDemandConsVolPip, "", (
d1442 1
a1442 1
   STANDARD_API_IMPL (
d1444 1
a1444 1
      witGetDemandConsVolPip, "Dbl", (
d1466 1
a1466 1
      witGetDemandCumShipBounds, "", (
d1484 1
a1484 1
   STANDARD_API_IMPL (
d1486 1
a1486 1
      witGetDemandCumShipBounds, "Dbl", (
d1504 1
a1504 1
      witGetDemandCumShipReward, "", (
d1518 1
a1518 1
   STANDARD_API_IMPL (
d1520 1
a1520 1
      witGetDemandCumShipReward, "Dbl", (
d1537 1
a1537 1
      witGetDemandCumShipSlbConIndex, "", (
d1555 1
a1555 1
      witGetDemandCumShipSlbvVarIndex, "", (
d1573 1
a1573 1
      witGetDemandCumShipVarIndex, "", (
d1590 1
a1590 1
      witGetDemandDemandVol, "", (
d1604 1
a1604 1
   STANDARD_API_IMPL (
d1606 1
a1606 1
      witGetDemandDemandVol, "Dbl", (
d1626 1
a1626 1
      witGetDemandExecVolPegging, "", (
d1648 1
a1648 1
   STANDARD_API_IMPL (
d1650 1
a1650 1
      witGetDemandExecVolPegging, "Dbl", (
d1674 1
a1674 1
      witGetDemandExecVolPip, "", (
d1696 1
a1696 1
   STANDARD_API_IMPL (
d1698 1
a1698 1
      witGetDemandExecVolPip, "Dbl", (
d1718 1
a1718 1
      witGetDemandFocusHorizon, "", (
d1734 1
a1734 1
      witGetDemandFssShipVol, "", (
d1749 1
a1749 1
   STANDARD_API_IMPL (
d1751 1
a1751 1
      witGetDemandFssShipVol, "Dbl", (
d1767 1
a1767 1
      witGetDemandIntShipVols, "", (
d1783 1
a1783 1
      witGetDemandPriority, "", (
d1803 1
a1803 1
      witGetDemandProdVolPip, "", (
d1825 1
a1825 1
   STANDARD_API_IMPL (
d1827 1
a1827 1
      witGetDemandProdVolPip, "Dbl", (
d1847 1
a1847 1
      witGetDemandSearchInc, "", (
d1861 1
a1861 1
   STANDARD_API_IMPL (
d1863 1
a1863 1
      witGetDemandSearchInc, "Dbl", (
d1879 1
a1879 1
      witGetDemandSelForDel, "", (
d1896 1
a1896 1
      witGetDemandShipConIndex, "", (
d1914 1
a1914 1
      witGetDemandShipVarIndex, "", (
d1931 1
a1931 1
      witGetDemandShipLateAllowed, "", (
d1947 1
a1947 1
      witGetDemandShipLateUB, "", (
d1963 1
a1963 1
      witGetDemandShipReward, "", (
d1977 1
a1977 1
   STANDARD_API_IMPL (
d1979 1
a1979 1
      witGetDemandShipReward, "Dbl", (
d1995 1
a1995 1
      witGetDemandShipVol, "", (
d2009 1
a2009 1
   STANDARD_API_IMPL (
d2011 1
a2011 1
      witGetDemandShipVol, "Dbl", (
d2031 1
a2031 1
      witGetDemandSideVolPip, "", (
d2053 1
a2053 1
   STANDARD_API_IMPL (
d2055 1
a2055 1
      witGetDemandSideVolPip, "Dbl", (
d2081 1
a2081 1
      witGetDemandSubVolPegging, "", (
d2107 1
a2107 1
   STANDARD_API_IMPL (
d2109 1
a2109 1
      witGetDemandSubVolPegging, "Dbl", (
d2137 1
a2137 1
      witGetDemandSubVolPip, "", (
d2163 1
a2163 1
   STANDARD_API_IMPL (
d2165 1
a2165 1
      witGetDemandSubVolPip, "Dbl", (
d2191 1
a2191 1
      witGetDemandSupplyVolPip, "", (
d2213 1
a2213 1
   STANDARD_API_IMPL (
d2215 1
a2215 1
      witGetDemandSupplyVolPip, "Dbl", (
d2233 1
a2233 1
      witGetEquitability, "", (
d2245 1
a2245 1
      witGetExecEmptyBom, "", (
d2257 1
a2257 1
      witGetExpCutoff, "", (
d2267 1
a2267 1
   STANDARD_API_IMPL (
d2269 1
a2269 1
      witGetExpCutoff, "Dbl", (
d2281 1
a2281 1
      witGetExtOptActive, "", (
d2294 1
a2294 1
      witGetExtOptIntVarIndices, "", (
d2316 1
a2316 1
      witGetExtOptLpProb, "", (
d2344 1
a2344 1
   STANDARD_API_IMPL (
d2346 1
a2346 1
      witGetExtOptLpProb, "Dbl", (
d2367 1
a2367 1
      witGetFeasible, "", (
d2381 1
a2381 1
      witGetFocusShortageVol, "", (
d2395 1
a2395 1
   STANDARD_API_IMPL (
d2397 1
a2397 1
      witGetFocusShortageVol, "Dbl", (
d2411 1
a2411 1
      witGetForcedMultiEq, "", (
d2423 1
a2423 1
      witGetHeurAllocActive, "", (
d2435 1
a2435 1
      witGetHighPrecisionWD, "", (
d2447 1
a2447 1
      witGetIndependentOffsets, "", (
d2459 1
a2459 1
      witGetLotSizeTol, "", (
d2469 1
a2469 1
   STANDARD_API_IMPL (
d2471 1
a2471 1
      witGetLotSizeTol, "Dbl", (
d2483 1
a2483 1
      witGetMesgFile, "", (
d2495 1
a2495 1
      witGetMesgFileAccessMode, "", (
d2507 1
a2507 1
      witGetMesgFileName, "", (
d2520 1
a2520 1
      witGetMesgPrintNumber, "", (
d2534 1
a2534 1
      witGetMesgStopRunning, "", (
d2548 1
a2548 1
      witGetMesgThrowErrorExc, "", (
d2562 1
a2562 1
      witGetMesgTimesPrint, "", (
d2575 1
a2575 1
      witGetMinimalExcess, "", (
d2587 1
a2587 1
      witGetMipMode, "", (
d2599 1
a2599 1
      witGetMultiExec, "", (
d2611 1
a2611 1
      witGetMultiRoute, "", (
d2623 1
a2623 1
      witGetMultiThread, "", (
d2635 1
a2635 1
      witGetNPeriods, "", (
d2647 1
a2647 1
      witGetNScenarios, "", (
d2659 1
a2659 1
      witGetNstnResidual, "", (
d2672 1
a2672 1
      witGetObjItrBomEntry, "", (
d2686 1
a2686 1
      witGetObjItrBopEntry, "", (
d2700 1
a2700 1
      witGetObjItrDemand, "", (
d2713 1
a2713 1
      witGetObjItrOperation, "", (
d2725 1
a2725 1
      witGetObjItrPart, "", (
d2737 1
a2737 1
      witGetObjItrState, "", (
d2751 1
a2751 1
      witGetObjItrSubsBomEntry, "", (
d2766 1
a2766 1
      witGetObjValues, "", (
d2778 1
a2778 1
   STANDARD_API_IMPL (
d2780 1
a2780 1
      witGetObjValues, "Dbl", (
d2794 1
a2794 1
      witGetOperationAppData, "", (
d2810 1
a2810 1
      witGetOperationExecBounds, "", (
d2826 1
a2826 1
   STANDARD_API_IMPL (
d2828 1
a2828 1
      witGetOperationExecBounds, "Dbl", (
d2844 1
a2844 1
      witGetOperationExecCost, "", (
d2856 1
a2856 1
   STANDARD_API_IMPL (
d2858 1
a2858 1
      witGetOperationExecCost, "Dbl", (
d2872 1
a2872 1
      witGetOperationExecPenalty, "", (
d2884 1
a2884 1
   STANDARD_API_IMPL (
d2886 1
a2886 1
      witGetOperationExecPenalty, "Dbl", (
d2901 1
a2901 1
      witGetOperationExecSlbConIndex, "", (
d2917 1
a2917 1
      witGetOperationExecSlbvVarIndex, "", (
d2933 1
a2933 1
      witGetOperationExecVarIndex, "", (
d2948 1
a2948 1
      witGetOperationExecVol, "", (
d2960 1
a2960 1
   STANDARD_API_IMPL (
d2962 1
a2962 1
      witGetOperationExecVol, "Dbl", (
d2976 1
a2976 1
      witGetOperationExecutable, "", (
d2990 1
a2990 1
      witGetOperationExists, "", (
d3004 1
a3004 1
      witGetOperationFssExecVol, "", (
d3016 1
a3016 1
   STANDARD_API_IMPL (
d3018 1
a3018 1
      witGetOperationFssExecVol, "Dbl", (
d3032 1
a3032 1
      witGetOperationIncLotSize, "", (
d3044 1
a3044 1
   STANDARD_API_IMPL (
d3046 1
a3046 1
      witGetOperationIncLotSize, "Dbl", (
d3060 1
a3060 1
      witGetOperationIncLotSize2, "", (
d3072 1
a3072 1
   STANDARD_API_IMPL (
d3074 1
a3074 1
      witGetOperationIncLotSize2, "Dbl", (
d3088 1
a3088 1
      witGetOperationIntExecVols, "", (
d3102 1
a3102 1
      witGetOperationLotSize2Thresh, "", (
d3114 1
a3114 1
   STANDARD_API_IMPL (
d3116 1
a3116 1
      witGetOperationLotSize2Thresh, "Dbl", (
d3130 1
a3130 1
      witGetOperationMinLotSize, "", (
d3142 1
a3142 1
   STANDARD_API_IMPL (
d3144 1
a3144 1
      witGetOperationMinLotSize, "Dbl", (
d3158 1
a3158 1
      witGetOperationMinLotSize2, "", (
d3170 1
a3170 1
   STANDARD_API_IMPL (
d3172 1
a3172 1
      witGetOperationMinLotSize2, "Dbl", (
d3186 1
a3186 1
      witGetOperationMrpExecVol, "", (
d3198 1
a3198 1
   STANDARD_API_IMPL (
d3200 1
a3200 1
      witGetOperationMrpExecVol, "Dbl", (
d3214 1
a3214 1
      witGetOperationNBomEntries, "", (
d3228 1
a3228 1
      witGetOperationNBopEntries, "", (
d3242 1
a3242 1
      witGetOperationSelForDel, "", (
d3256 1
a3256 1
      witGetOperationStageNo, "", (
d3270 1
a3270 1
      witGetOperations, "", (
d3284 1
a3284 1
      witGetOperationTwoLevelLotSizes, "", (
d3298 1
a3298 1
      witGetOperationYieldRate, "", (
d3310 1
a3310 1
   STANDARD_API_IMPL (
d3312 1
a3312 1
      witGetOperationYieldRate, "Dbl", (
d3325 1
a3325 1
      witGetOptInitMethod, "", (
d3337 1
a3337 1
      witGetOutputPrecision, "", (
d3349 1
a3349 1
      witGetPostprocessed, "", (
d3362 1
a3362 1
      witGetPartAppData, "", (
d3376 1
a3376 1
      witGetPartAsapPipOrder, "", (
d3391 1
a3391 1
      witGetPartBelowList, "", (
d3406 1
a3406 1
      witGetPartBuildAheadUB, "", (
d3420 1
a3420 1
      witGetPartBuildAsap, "", (
d3434 1
a3434 1
      witGetPartBuildNstn, "", (
d3448 1
a3448 1
      witGetPartConsVol, "", (
d3460 1
a3460 1
   STANDARD_API_IMPL (
d3462 1
a3462 1
      witGetPartConsVol, "Dbl", (
d3478 1
a3478 1
      witGetPartConsumingBomEntry, "", (
d3497 1
a3497 1
      witGetPartConsumingSubsBomEntry, "", (
d3515 1
a3515 1
      witGetPartDemands, "", (
d3530 1
a3530 1
      witGetPartCategory, "", (
d3544 1
a3544 1
      witGetPartExcessVol, "", (
d3556 1
a3556 1
   STANDARD_API_IMPL (
d3558 1
a3558 1
      witGetPartExcessVol, "Dbl", (
d3572 1
a3572 1
      witGetPartExists, "", (
d3586 1
a3586 1
      witGetPartFocusShortageVol, "", (
d3598 1
a3598 1
   STANDARD_API_IMPL (
d3600 1
a3600 1
      witGetPartFocusShortageVol, "Dbl", (
d3614 1
a3614 1
      witGetPartMrpConsVol, "", (
d3626 1
a3626 1
   STANDARD_API_IMPL (
d3628 1
a3628 1
      witGetPartMrpConsVol, "Dbl", (
d3642 1
a3642 1
      witGetPartMrpExcessVol, "", (
d3654 1
a3654 1
   STANDARD_API_IMPL (
d3656 1
a3656 1
      witGetPartMrpExcessVol, "Dbl", (
d3670 1
a3670 1
      witGetPartMrpResidualVol, "", (
d3682 1
a3682 1
   STANDARD_API_IMPL (
d3684 1
a3684 1
      witGetPartMrpResidualVol, "Dbl", (
d3698 1
a3698 1
      witGetPartNConsumingBomEntries, "", (
d3712 1
a3712 1
      witGetPartNConsumingSubsBomEntries, "", (
d3726 1
a3726 1
      witGetPartNProducingBopEntries, "", (
d3740 1
a3740 1
      witGetPartProdVol, "", (
d3752 1
a3752 1
   STANDARD_API_IMPL (
d3754 1
a3754 1
      witGetPartProdVol, "Dbl", (
d3770 1
a3770 1
      witGetPartProducingBopEntry, "", (
d3786 1
a3786 1
      witGetPartPropRtg, "", (
d3800 1
a3800 1
      witGetPartReqVol, "", (
d3812 1
a3812 1
   STANDARD_API_IMPL (
d3814 1
a3814 1
      witGetPartReqVol, "Dbl", (
d3828 1
a3828 1
      witGetPartResidualVol, "", (
d3840 1
a3840 1
   STANDARD_API_IMPL (
d3842 1
a3842 1
      witGetPartResidualVol, "Dbl", (
d3857 1
a3857 1
      witGetPartResourceConIndex, "", (
d3872 1
a3872 1
      witGetPartScrapAllowed, "", (
d3886 1
a3886 1
      witGetPartScrapCost, "", (
d3898 1
a3898 1
   STANDARD_API_IMPL (
d3900 1
a3900 1
      witGetPartScrapCost, "Dbl", (
d3915 1
a3915 1
      witGetPartScrapVarIndex, "", (
d3930 1
a3930 1
      witGetPartScrapVol, "", (
d3942 1
a3942 1
   STANDARD_API_IMPL (
d3944 1
a3944 1
      witGetPartScrapVol, "Dbl", (
d3958 1
a3958 1
      witGetPartSelForDel, "", (
d3972 1
a3972 1
      witGetPartShadowPrice, "", (
d3984 1
a3984 1
   STANDARD_API_IMPL (
d3986 1
a3986 1
      witGetPartShadowPrice, "Dbl", (
d4000 1
a4000 1
      witGetPartSingleSource, "", (
d4014 1
a4014 1
      witGetPartStageNo, "", (
d4030 1
a4030 1
      witGetPartStockBounds, "", (
d4046 1
a4046 1
   STANDARD_API_IMPL (
d4048 1
a4048 1
      witGetPartStockBounds, "Dbl", (
d4064 1
a4064 1
      witGetPartStockCost, "", (
d4076 1
a4076 1
   STANDARD_API_IMPL (
d4078 1
a4078 1
      witGetPartStockCost, "Dbl", (
d4093 1
a4093 1
      witGetPartStockSlbConIndex, "", (
d4109 1
a4109 1
      witGetPartStockSlbvVarIndex, "", (
d4125 1
a4125 1
      witGetPartStockVarIndex, "", (
d4140 1
a4140 1
      witGetPartStockVol, "", (
d4152 1
a4152 1
   STANDARD_API_IMPL (
d4154 1
a4154 1
      witGetPartStockVol, "Dbl", (
d4168 1
a4168 1
      witGetPartSupplyVol, "", (
d4180 1
a4180 1
   STANDARD_API_IMPL (
d4182 1
a4182 1
      witGetPartSupplyVol, "Dbl", (
d4196 1
a4196 1
      witGetParts, "", (
d4209 1
a4209 1
      witGetPenExec, "", (
d4221 1
a4221 1
      witGetPipExists, "", (
d4237 1
a4237 1
      witGetPipSeq, "", (
d4255 1
a4255 1
   STANDARD_API_IMPL (
d4257 1
a4257 1
      witGetPipSeq, "Dbl", (
d4273 1
a4273 1
      witGetPipSeqFromHeur, "", (
d4285 1
a4285 1
      witGetPerfPegging, "", (
d4302 1
a4302 1
      witGetPgdCritList, "", (
d4319 1
a4319 1
      witGetPgdCritListMode, "", (
d4331 1
a4331 1
      witGetPrefHighStockSLBs, "", (
d4343 1
a4343 1
      witGetPreprocessed, "", (
d4355 1
a4355 1
      witGetProbability, "", (
d4365 1
a4365 1
   STANDARD_API_IMPL (
d4367 1
a4367 1
      witGetProbability, "Dbl", (
d4379 1
a4379 1
      witGetRespectStockSLBs, "", (
d4391 1
a4391 1
      witGetRoundReqVols, "", (
d4403 1
a4403 1
      witGetSelSplit, "", (
d4415 1
a4415 1
      witGetSkipFailures, "", (
d4427 1
a4427 1
      witGetSolverLogFileName, "", (
d4439 1
a4439 1
      witGetStageByObject, "", (
d4451 1
a4451 1
      witGetStochMode, "", (
d4463 1
a4463 1
      witGetStochSolnMode, "", (
d4475 1
a4475 1
      witGetStockReallocation, "", (
d4490 1
a4490 1
      witGetSubsBomEntryAppData, "", (
d4508 1
a4508 1
      witGetSubsBomEntryConsRate, "", (
d4524 1
a4524 1
   STANDARD_API_IMPL (
d4526 1
a4526 1
      witGetSubsBomEntryConsRate, "Dbl", (
d4544 1
a4544 1
      witGetSubsBomEntryConsumedPart, "", (
d4562 1
a4562 1
      witGetSubsBomEntryEarliestPeriod, "", (
d4580 1
a4580 1
      witGetSubsBomEntryExecPenalty, "", (
d4596 1
a4596 1
   STANDARD_API_IMPL (
d4598 1
a4598 1
      witGetSubsBomEntryExecPenalty, "Dbl", (
d4616 1
a4616 1
      witGetSubsBomEntryExpAllowed, "", (
d4634 1
a4634 1
      witGetSubsBomEntryExpNetAversion, "", (
d4650 1
a4650 1
   STANDARD_API_IMPL (
d4652 1
a4652 1
      witGetSubsBomEntryExpNetAversion, "Dbl", (
d4670 1
a4670 1
      witGetSubsBomEntryFalloutRate, "", (
d4686 1
a4686 1
   STANDARD_API_IMPL (
d4688 1
a4688 1
      witGetSubsBomEntryFalloutRate, "Dbl", (
d4706 1
a4706 1
      witGetSubsBomEntryFssSubVol, "", (
d4722 1
a4722 1
   STANDARD_API_IMPL (
d4724 1
a4724 1
      witGetSubsBomEntryFssSubVol, "Dbl", (
d4742 1
a4742 1
      witGetSubsBomEntryImpactPeriod, "", (
d4760 1
a4760 1
      witGetSubsBomEntryIntSubVols, "", (
d4778 1
a4778 1
      witGetSubsBomEntryLatestPeriod, "", (
d4796 1
a4796 1
      witGetSubsBomEntryMrpNetAllowed, "", (
d4814 1
a4814 1
      witGetSubsBomEntryMrpSubVol, "", (
d4830 1
a4830 1
   STANDARD_API_IMPL (
d4832 1
a4832 1
      witGetSubsBomEntryMrpSubVol, "Dbl", (
d4850 1
a4850 1
      witGetSubsBomEntryNetAllowed, "", (
d4868 1
a4868 1
      witGetSubsBomEntryObj1SubCost, "", (
d4884 1
a4884 1
   STANDARD_API_IMPL (
d4886 1
a4886 1
      witGetSubsBomEntryObj1SubCost, "Dbl", (
d4904 1
a4904 1
      witGetSubsBomEntryOffset, "", (
d4920 1
a4920 1
   STANDARD_API_IMPL (
d4922 1
a4922 1
      witGetSubsBomEntryOffset, "Dbl", (
d4940 1
a4940 1
      witGetSubsBomEntryRoutingShare, "", (
d4956 1
a4956 1
   STANDARD_API_IMPL (
d4958 1
a4958 1
      witGetSubsBomEntryRoutingShare, "Dbl", (
d4976 1
a4976 1
      witGetSubsBomEntrySelForDel, "", (
d4994 1
a4994 1
      witGetSubsBomEntrySubCost, "", (
d5010 1
a5010 1
   STANDARD_API_IMPL (
d5012 1
a5012 1
      witGetSubsBomEntrySubCost, "Dbl", (
d5031 1
a5031 1
      witGetSubsBomEntrySubVarIndex, "", (
d5050 1
a5050 1
      witGetSubsBomEntrySubVol, "", (
d5066 1
a5066 1
   STANDARD_API_IMPL (
d5068 1
a5068 1
      witGetSubsBomEntrySubVol, "Dbl", (
d5083 1
a5083 1
      witGetTieBreakPropRt, "", (
d5095 1
a5095 1
      witGetTitle, "", (
d5107 1
a5107 1
      witGetTruncOffsets, "", (
d5119 1
a5119 1
      witGetTwoWayMultiExec, "", (
d5131 1
a5131 1
      witGetUseFocusHorizons, "", (
d5143 1
a5143 1
      witGetUserHeurStart, "", (
d5155 1
a5155 1
      witGetWbounds, "", (
d5165 1
a5165 1
   STANDARD_API_IMPL (
d5167 1
a5167 1
      witGetWbounds, "Dbl", (
d5179 1
a5179 1
      witGetWit34Compatible, "", (
d5190 1
a5190 1
      witHeurImplode, "", ())
d5205 1
a5205 1
      witIncHeurAlloc, "", (
d5223 1
a5223 1
   STANDARD_API_IMPL (
d5225 1
a5225 1
      witIncHeurAlloc, "Dbl", (
d5246 1
a5246 1
      witIncHeurAllocTwme, "", (
d5266 1
a5266 1
   STANDARD_API_IMPL (
d5268 1
a5268 1
      witIncHeurAllocTwme, "Dbl", (
d5284 1
a5284 1
      witInitialize, "", ())
d5294 1
a5294 1
      witMrp, "", ())
d5316 1
a5316 1
      witNewRun, "", ())
d5326 1
a5326 1
      witOptImplode, "", ())
d5336 1
a5336 1
      witPreprocess, "", ())
d5346 1
a5346 1
      witPostprocess, "", ())
d5356 1
a5356 1
      witPurgeData, "", ())
d5367 1
a5367 1
      witReadData, "", (
d5378 1
a5378 1
      witResetObjItr, "", ())
d5389 1
a5389 1
      witSetAccAfterSoftLB, "", (
d5401 1
a5401 1
      witSetAccAfterOptImp, "", (
d5413 1
a5413 1
      witSetAppData, "", (
d5425 1
a5425 1
      witSetAutoPriority, "", (
d5439 1
a5439 1
      witSetBomEntryAppData, "", (
d5455 1
a5455 1
      witSetBomEntryConsRate, "", (
d5469 1
a5469 1
   STANDARD_API_IMPL (
d5471 1
a5471 1
      witSetBomEntryConsRate, "Dbl", (
d5487 1
a5487 1
      witSetBomEntryEarliestPeriod, "", (
d5503 1
a5503 1
      witSetBomEntryExecPenalty, "", (
d5517 1
a5517 1
   STANDARD_API_IMPL (
d5519 1
a5519 1
      witSetBomEntryExecPenalty, "Dbl", (
d5535 1
a5535 1
      witSetBomEntryFalloutRate, "", (
d5549 1
a5549 1
   STANDARD_API_IMPL (
d5551 1
a5551 1
      witSetBomEntryFalloutRate, "Dbl", (
d5567 1
a5567 1
      witSetBomEntryLatestPeriod, "", (
d5583 1
a5583 1
      witSetBomEntryMandEC, "", (
d5599 1
a5599 1
      witSetBomEntryOffset, "", (
d5613 1
a5613 1
   STANDARD_API_IMPL (
d5615 1
a5615 1
      witSetBomEntryOffset, "Dbl", (
d5631 1
a5631 1
      witSetBomEntryPropRtg, "", (
d5647 1
a5647 1
      witSetBomEntryRoutingShare, "", (
d5661 1
a5661 1
   STANDARD_API_IMPL (
d5663 1
a5663 1
      witSetBomEntryRoutingShare, "Dbl", (
d5679 1
a5679 1
      witSetBomEntrySelForDel, "", (
d5695 1
a5695 1
      witSetBomEntrySingleSource, "", (
d5711 1
a5711 1
      witSetBopEntryAppData, "", (
d5727 1
a5727 1
      witSetBopEntryEarliestPeriod, "", (
d5743 1
a5743 1
      witSetBopEntryExpAllowed, "", (
d5759 1
a5759 1
      witSetBopEntryExpAversion, "", (
d5773 1
a5773 1
   STANDARD_API_IMPL (
d5775 1
a5775 1
      witSetBopEntryExpAversion, "Dbl", (
d5791 1
a5791 1
      witSetBopEntryLatestPeriod, "", (
d5807 1
a5807 1
      witSetBopEntryOffset, "", (
d5821 1
a5821 1
   STANDARD_API_IMPL (
d5823 1
a5823 1
      witSetBopEntryOffset, "Dbl", (
d5839 1
a5839 1
      witSetBopEntryProductRate, "", (
d5853 1
a5853 1
   STANDARD_API_IMPL (
d5855 1
a5855 1
      witSetBopEntryProductRate, "Dbl", (
d5871 1
a5871 1
      witSetBopEntryRoutingShare, "", (
d5885 1
a5885 1
   STANDARD_API_IMPL (
d5887 1
a5887 1
      witSetBopEntryRoutingShare, "Dbl", (
d5903 1
a5903 1
      witSetBopEntrySelForDel, "", (
d5917 1
a5917 1
      witSetCompPrices, "", (
d5929 1
a5929 1
      witSetComputeCriticalList, "", (
d5941 1
a5941 1
      witSetCurScenarioNo, "", (
d5955 1
a5955 1
      witSetDemandAppData, "", (
d5973 1
a5973 1
      witSetDemandCumShipBounds, "", (
d5991 1
a5991 1
   STANDARD_API_IMPL (
d5993 1
a5993 1
      witSetDemandCumShipBounds, "Dbl", (
d6011 1
a6011 1
      witSetDemandCumShipReward, "", (
d6025 1
a6025 1
   STANDARD_API_IMPL (
d6027 1
a6027 1
      witSetDemandCumShipReward, "Dbl", (
d6043 1
a6043 1
      witSetDemandDemandVol, "", (
d6057 1
a6057 1
   STANDARD_API_IMPL (
d6059 1
a6059 1
      witSetDemandDemandVol, "Dbl", (
d6075 1
a6075 1
      witSetDemandFocusHorizon, "", (
d6091 1
a6091 1
      witSetDemandFssShipVol, "", (
d6105 1
a6105 1
   STANDARD_API_IMPL (
d6107 1
a6107 1
      witSetDemandFssShipVol, "Dbl", (
d6123 1
a6123 1
      witSetDemandIntShipVols, "", (
d6139 1
a6139 1
      witSetDemandPriority, "", (
d6155 1
a6155 1
      witSetDemandSearchInc, "", (
d6169 1
a6169 1
   STANDARD_API_IMPL (
d6171 1
a6171 1
      witSetDemandSearchInc, "Dbl", (
d6187 1
a6187 1
      witSetDemandSelForDel, "", (
d6203 1
a6203 1
      witSetDemandShipLateAllowed, "", (
d6219 1
a6219 1
      witSetDemandShipLateUB, "", (
d6235 1
a6235 1
      witSetDemandShipReward, "", (
d6249 1
a6249 1
   STANDARD_API_IMPL (
d6251 1
a6251 1
      witSetDemandShipReward, "Dbl", (
d6267 1
a6267 1
      witSetDemandShipVol, "", (
d6281 1
a6281 1
   STANDARD_API_IMPL (
d6283 1
a6283 1
      witSetDemandShipVol, "Dbl", (
d6297 1
a6297 1
      witSetEquitability, "", (
d6309 1
a6309 1
      witSetExecEmptyBom, "", (
d6321 1
a6321 1
      witSetExpCutoff, "", (
d6331 1
a6331 1
   STANDARD_API_IMPL (
d6333 1
a6333 1
      witSetExpCutoff, "Dbl", (
d6345 1
a6345 1
      witSetExtOptSoln, "", (
d6355 1
a6355 1
   STANDARD_API_IMPL (
d6357 1
a6357 1
      witSetExtOptSoln, "Dbl", (
d6369 1
a6369 1
      witSetForcedMultiEq, "", (
d6381 1
a6381 1
      witSetHighPrecisionWD, "", (
d6393 1
a6393 1
      witSetIndependentOffsets, "", (
d6405 1
a6405 1
      witSetLotSizeTol, "", (
d6415 1
a6415 1
   STANDARD_API_IMPL (
d6417 1
a6417 1
      witSetLotSizeTol, "Dbl", (
d6430 1
a6430 1
      witSetMesgFileAccessMode, "", (
d6444 1
a6444 1
      witSetMesgFileName, "", (
d6459 1
a6459 1
      witSetMesgPrintNumber, "", (
d6475 1
a6475 1
      witSetMesgStopRunning, "", (
d6491 1
a6491 1
      witSetMesgThrowErrorExc, "", (
d6507 1
a6507 1
      witSetMesgTimesPrint, "", (
d6521 1
a6521 1
      witSetMinimalExcess, "", (
d6533 1
a6533 1
      witSetMipMode, "", (
d6545 1
a6545 1
      witSetMultiExec, "", (
d6557 1
a6557 1
      witSetMultiRoute, "", (
d6569 1
a6569 1
      witSetMultiThread, "", (
d6581 1
a6581 1
      witSetNPeriods, "", (
d6593 1
a6593 1
      witSetNScenarios, "", (
d6605 1
a6605 1
      witSetNstnResidual, "", (
d6618 1
a6618 1
      witSetOperationAppData, "", (
d6634 1
a6634 1
      witSetOperationExecBounds, "", (
d6650 1
a6650 1
   STANDARD_API_IMPL (
d6652 1
a6652 1
      witSetOperationExecBounds, "Dbl", (
d6668 1
a6668 1
      witSetOperationExecCost, "", (
d6680 1
a6680 1
   STANDARD_API_IMPL (
d6682 1
a6682 1
      witSetOperationExecCost, "Dbl", (
d6696 1
a6696 1
      witSetOperationExecPenalty, "", (
d6708 1
a6708 1
   STANDARD_API_IMPL (
d6710 1
a6710 1
      witSetOperationExecPenalty, "Dbl", (
d6724 1
a6724 1
      witSetOperationExecVol, "", (
d6736 1
a6736 1
   STANDARD_API_IMPL (
d6738 1
a6738 1
      witSetOperationExecVol, "Dbl", (
d6752 1
a6752 1
      witSetOperationIncLotSize, "", (
d6764 1
a6764 1
   STANDARD_API_IMPL (
d6766 1
a6766 1
      witSetOperationIncLotSize, "Dbl", (
d6780 1
a6780 1
      witSetOperationIncLotSize2, "", (
d6792 1
a6792 1
   STANDARD_API_IMPL (
d6794 1
a6794 1
      witSetOperationIncLotSize2, "Dbl", (
d6808 1
a6808 1
      witSetOperationIntExecVols, "", (
d6822 1
a6822 1
      witSetOperationLotSize2Thresh, "", (
d6834 1
a6834 1
   STANDARD_API_IMPL (
d6836 1
a6836 1
      witSetOperationLotSize2Thresh, "Dbl", (
d6850 1
a6850 1
      witSetOperationMinLotSize, "", (
d6862 1
a6862 1
   STANDARD_API_IMPL (
d6864 1
a6864 1
      witSetOperationMinLotSize, "Dbl", (
d6878 1
a6878 1
      witSetOperationMinLotSize2, "", (
d6890 1
a6890 1
   STANDARD_API_IMPL (
d6892 1
a6892 1
      witSetOperationMinLotSize2, "Dbl", (
d6906 1
a6906 1
      witSetOperationSelForDel, "", (
d6920 1
a6920 1
      witSetOperationStageNo, "", (
d6934 1
a6934 1
      witSetOperationTwoLevelLotSizes, "", (
d6948 1
a6948 1
      witSetOperationYieldRate, "", (
d6960 1
a6960 1
   STANDARD_API_IMPL (
d6962 1
a6962 1
      witSetOperationYieldRate, "Dbl", (
d6975 1
a6975 1
      witSetOptInitMethod, "", (
d6987 1
a6987 1
      witSetOutputPrecision, "", (
d7000 1
a7000 1
      witSetPartAppData, "", (
d7014 1
a7014 1
      witSetPartAsapPipOrder, "", (
d7028 1
a7028 1
      witSetPartBuildAheadUB, "", (
d7042 1
a7042 1
      witSetPartBuildAsap, "", (
d7056 1
a7056 1
      witSetPartBuildNstn, "", (
d7070 1
a7070 1
      witSetPartPropRtg, "", (
d7084 1
a7084 1
      witSetPartScrapAllowed, "", (
d7098 1
a7098 1
      witSetPartScrapCost, "", (
d7110 1
a7110 1
   STANDARD_API_IMPL (
d7112 1
a7112 1
      witSetPartScrapCost, "Dbl", (
d7127 1
a7127 1
      witSetPartSelForDel, "", (
d7141 1
a7141 1
      witSetPartSingleSource, "", (
d7155 1
a7155 1
      witSetPartStageNo, "", (
d7171 1
a7171 1
      witSetPartStockBounds, "", (
d7187 1
a7187 1
   STANDARD_API_IMPL (
d7189 1
a7189 1
      witSetPartStockBounds, "Dbl", (
d7205 1
a7205 1
      witSetPartStockCost, "", (
d7217 1
a7217 1
   STANDARD_API_IMPL (
d7219 1
a7219 1
      witSetPartStockCost, "Dbl", (
d7233 1
a7233 1
      witSetPartSupplyVol, "", (
d7245 1
a7245 1
   STANDARD_API_IMPL (
d7247 1
a7247 1
      witSetPartSupplyVol, "Dbl", (
d7260 1
a7260 1
      witSetPenExec, "", (
d7272 1
a7272 1
      witSetPerfPegging, "", (
d7284 1
a7284 1
      witSetPgdCritListMode, "", (
d7296 1
a7296 1
      witSetPipSeqFromHeur, "", (
d7308 1
a7308 1
      witSetPrefHighStockSLBs, "", (
d7320 1
a7320 1
      witSetProbability, "", (
d7330 1
a7330 1
   STANDARD_API_IMPL (
d7332 1
a7332 1
      witSetProbability, "Dbl", (
d7344 1
a7344 1
      witSetRespectStockSLBs, "", (
d7356 1
a7356 1
      witSetRoundReqVols, "", (
d7368 1
a7368 1
      witSetSelSplit, "", (
d7380 1
a7380 1
      witSetSkipFailures, "", (
d7392 1
a7392 1
      witSetSolverLogFileName, "", (
d7404 1
a7404 1
      witSetStageByObject, "", (
d7416 1
a7416 1
      witSetStochMode, "", (
d7428 1
a7428 1
      witSetStockReallocation, "", (
d7443 1
a7443 1
      witSetSubsBomEntryAppData, "", (
d7461 1
a7461 1
      witSetSubsBomEntryConsRate, "", (
d7477 1
a7477 1
   STANDARD_API_IMPL (
d7479 1
a7479 1
      witSetSubsBomEntryConsRate, "Dbl", (
d7497 1
a7497 1
      witSetSubsBomEntryEarliestPeriod, "", (
d7515 1
a7515 1
      witSetSubsBomEntryExecPenalty, "", (
d7531 1
a7531 1
   STANDARD_API_IMPL (
d7533 1
a7533 1
      witSetSubsBomEntryExecPenalty, "Dbl", (
d7551 1
a7551 1
      witSetSubsBomEntryExpAllowed, "", (
d7569 1
a7569 1
      witSetSubsBomEntryExpNetAversion, "", (
d7585 1
a7585 1
   STANDARD_API_IMPL (
d7587 1
a7587 1
      witSetSubsBomEntryExpNetAversion, "Dbl", (
d7605 1
a7605 1
      witSetSubsBomEntryFalloutRate, "", (
d7621 1
a7621 1
   STANDARD_API_IMPL (
d7623 1
a7623 1
      witSetSubsBomEntryFalloutRate, "Dbl", (
d7641 1
a7641 1
      witSetSubsBomEntryIntSubVols, "", (
d7659 1
a7659 1
      witSetSubsBomEntryLatestPeriod, "", (
d7677 1
a7677 1
      witSetSubsBomEntryMrpNetAllowed, "", (
d7695 1
a7695 1
      witSetSubsBomEntryNetAllowed, "", (
d7713 1
a7713 1
      witSetSubsBomEntryObj1SubCost, "", (
d7729 1
a7729 1
   STANDARD_API_IMPL (
d7731 1
a7731 1
      witSetSubsBomEntryObj1SubCost, "Dbl", (
d7749 1
a7749 1
      witSetSubsBomEntryOffset, "", (
d7765 1
a7765 1
   STANDARD_API_IMPL (
d7767 1
a7767 1
      witSetSubsBomEntryOffset, "Dbl", (
d7785 1
a7785 1
      witSetSubsBomEntryRoutingShare, "", (
d7801 1
a7801 1
   STANDARD_API_IMPL (
d7803 1
a7803 1
      witSetSubsBomEntryRoutingShare, "Dbl", (
d7821 1
a7821 1
      witSetSubsBomEntrySelForDel, "", (
d7839 1
a7839 1
      witSetSubsBomEntrySubCost, "", (
d7855 1
a7855 1
   STANDARD_API_IMPL (
d7857 1
a7857 1
      witSetSubsBomEntrySubCost, "Dbl", (
d7875 1
a7875 1
      witSetSubsBomEntrySubVol, "", (
d7891 1
a7891 1
   STANDARD_API_IMPL (
d7893 1
a7893 1
      witSetSubsBomEntrySubVol, "Dbl", (
d7908 1
a7908 1
      witSetTieBreakPropRt, "", (
d7920 1
a7920 1
      witSetTitle, "", (
d7932 1
a7932 1
      witSetTruncOffsets, "", (
d7944 1
a7944 1
      witSetTwoWayMultiExec, "", (
d7956 1
a7956 1
      witSetUseFocusHorizons, "", (
d7968 1
a7968 1
      witSetUserHeurStart, "", (
d7980 1
a7980 1
      witSetWbounds, "", (
d7990 1
a7990 1
   STANDARD_API_IMPL (
d7992 1
a7992 1
      witSetWbounds, "Dbl", (
d8004 1
a8004 1
      witSetWit34Compatible, "", (
d8015 1
a8015 1
      witShutDownExtOpt, "", ())
d8025 1
a8025 1
      witShutDownHeurAlloc, "", ())
d8035 1
a8035 1
      witStartExtOpt, "", ())
d8045 1
a8045 1
      witStartHeurAlloc, "", ())
d8055 1
a8055 1
      witStochImplode, "", ())
d8068 1
a8068 1
      witWriteCriticalList, "", (
d8082 1
a8082 1
      witWriteData, "", (
d8095 1
a8095 1
      witWriteExecSched, "", (
d8109 1
a8109 1
      witWriteReqSched, "", (
d8123 1
a8123 1
      witWriteShipSched, "", (
d8142 1
a8142 1
      witGetBomEntryFallout, "", (
d8158 1
a8158 1
      witGetBomEntryPropRouting, "", (
d8174 1
a8174 1
      witGetBomEntryUsageRate, "", (
d8190 1
a8190 1
      witGetBomEntryUsageTime, "", (
d8206 1
a8206 1
      witGetBopEntryByProduct, "", (
d8222 1
a8222 1
      witGetBopEntryProdRate, "", (
d8236 1
a8236 1
      witGetCapCost, "", (
d8246 1
a8246 1
   STANDARD_API_IMPL (
d8248 1
a8248 1
      witGetCapCost, "Dbl", (
d8262 1
a8262 1
      witGetDemandBuildAheadLimit, "", (
d8278 1
a8278 1
      witGetDemandBuildAheadUB, "", (
d8294 1
a8294 1
      witGetDemandGrossRev, "", (
d8308 1
a8308 1
   STANDARD_API_IMPL (
d8310 1
a8310 1
      witGetDemandGrossRev, "Dbl", (
d8326 1
a8326 1
      witGetDemandObj1CumShipReward, "", (
d8340 1
a8340 1
   STANDARD_API_IMPL (
d8342 1
a8342 1
      witGetDemandObj1CumShipReward, "Dbl", (
d8358 1
a8358 1
      witGetDemandObj1ShipReward, "", (
d8372 1
a8372 1
   STANDARD_API_IMPL (
d8374 1
a8374 1
      witGetDemandObj1ShipReward, "Dbl", (
d8390 1
a8390 1
      witGetDemandPrefBuildAhead, "", (
d8406 1
a8406 1
      witGetDemandShipLateLimit, "", (
d8420 1
a8420 1
      witGetHashTableSize, "", (
d8432 1
a8432 1
      witGetInvCost, "", (
d8442 1
a8442 1
   STANDARD_API_IMPL (
d8444 1
a8444 1
      witGetInvCost, "Dbl", (
d8456 1
a8456 1
      witGetLocalBuildAhead, "", (
d8468 1
a8468 1
      witGetLocalMultiExec, "", (
d8483 1
a8483 1
      witGetObj2Values, "", (
d8499 1
a8499 1
   STANDARD_API_IMPL (
d8501 1
a8501 1
      witGetObj2Values, "Dbl", (
d8516 1
a8516 1
      witGetObj2Winv, "", (
d8526 1
a8526 1
   STANDARD_API_IMPL (
d8528 1
a8528 1
      witGetObj2Winv, "Dbl", (
d8540 1
a8540 1
      witGetObj2Wrev, "", (
d8550 1
a8550 1
   STANDARD_API_IMPL (
d8552 1
a8552 1
      witGetObj2Wrev, "Dbl", (
d8564 1
a8564 1
      witGetObj2Wserv, "", (
d8574 1
a8574 1
   STANDARD_API_IMPL (
d8576 1
a8576 1
      witGetObj2Wserv, "Dbl", (
d8588 1
a8588 1
      witGetObj2Wsub, "", (
d8598 1
a8598 1
   STANDARD_API_IMPL (
d8600 1
a8600 1
      witGetObj2Wsub, "Dbl", (
d8612 1
a8612 1
      witGetObjChoice, "", (
d8625 1
a8625 1
      witGetOperationObj1ExecCost, "", (
d8637 1
a8637 1
   STANDARD_API_IMPL (
d8639 1
a8639 1
      witGetOperationObj1ExecCost, "Dbl", (
d8653 1
a8653 1
      witGetOperationObj2AuxCost, "", (
d8665 1
a8665 1
   STANDARD_API_IMPL (
d8667 1
a8667 1
      witGetOperationObj2AuxCost, "Dbl", (
d8681 1
a8681 1
      witGetOperationYield, "", (
d8695 1
a8695 1
      witGetPartBuildAheadLimit, "", (
d8709 1
a8709 1
      witGetPartCycleTime, "", (
d8723 1
a8723 1
      witGetPartIncLotSize, "", (
d8737 1
a8737 1
      witGetPartMinLotSize, "", (
d8751 1
a8751 1
      witGetPartMrpProdVol, "", (
d8765 1
a8765 1
      witGetPartNBomEntries, "", (
d8779 1
a8779 1
      witGetPartObj1ProdCost, "", (
d8793 1
a8793 1
      witGetPartObj1ScrapCost, "", (
d8805 1
a8805 1
   STANDARD_API_IMPL (
d8807 1
a8807 1
      witGetPartObj1ScrapCost, "Dbl", (
d8821 1
a8821 1
      witGetPartObj1StockCost, "", (
d8833 1
a8833 1
   STANDARD_API_IMPL (
d8835 1
a8835 1
      witGetPartObj1StockCost, "Dbl", (
d8851 1
a8851 1
      witGetPartProdBounds, "", (
d8867 1
a8867 1
      witGetPartPropRouting, "", (
d8881 1
a8881 1
      witGetPartUnitCost, "", (
d8893 1
a8893 1
   STANDARD_API_IMPL (
d8895 1
a8895 1
      witGetPartUnitCost, "Dbl", (
d8909 1
a8909 1
      witGetPartYield, "", (
d8922 1
a8922 1
      witGetPeriodsPerYear, "", (
d8932 1
a8932 1
   STANDARD_API_IMPL (
d8934 1
a8934 1
      witGetPeriodsPerYear, "Dbl", (
d8946 1
a8946 1
      witGetStockRealloc, "", (
d8961 1
a8961 1
      witGetSubsBomEntryFallout, "", (
d8979 1
a8979 1
      witGetSubsBomEntryObj2SubPenalty, "", (
d8995 1
a8995 1
   STANDARD_API_IMPL (
d8997 1
a8997 1
      witGetSubsBomEntryObj2SubPenalty, "Dbl", (
d9015 1
a9015 1
      witGetSubsBomEntryProdVol, "", (
d9033 1
a9033 1
      witGetSubsBomEntryUsageRate, "", (
d9047 1
a9047 1
      witOptPreprocess, "", ())
d9060 1
a9060 1
      witSetBomEntryFallout, "", (
d9076 1
a9076 1
      witSetBomEntryPropRouting, "", (
d9092 1
a9092 1
      witSetBomEntryUsageRate, "", (
d9108 1
a9108 1
      witSetBomEntryUsageTime, "", (
d9124 1
a9124 1
      witSetBopEntryByProduct, "", (
d9140 1
a9140 1
      witSetBopEntryProdRate, "", (
d9154 1
a9154 1
      witSetBuildWhenEmpty, "", (
d9166 1
a9166 1
      witSetCapCost, "", (
d9176 1
a9176 1
   STANDARD_API_IMPL (
d9178 1
a9178 1
      witSetCapCost, "Dbl", (
d9192 1
a9192 1
      witSetDemandBuildAheadLimit, "", (
d9208 1
a9208 1
      witSetDemandBuildAheadUB, "", (
d9224 1
a9224 1
      witSetDemandGrossRev, "", (
d9238 1
a9238 1
   STANDARD_API_IMPL (
d9240 1
a9240 1
      witSetDemandGrossRev, "Dbl", (
d9256 1
a9256 1
      witSetDemandObj1CumShipReward, "", (
d9270 1
a9270 1
   STANDARD_API_IMPL (
d9272 1
a9272 1
      witSetDemandObj1CumShipReward, "Dbl", (
d9288 1
a9288 1
      witSetDemandObj1ShipReward, "", (
d9302 1
a9302 1
   STANDARD_API_IMPL (
d9304 1
a9304 1
      witSetDemandObj1ShipReward, "Dbl", (
d9320 1
a9320 1
      witSetDemandPrefBuildAhead, "", (
d9336 1
a9336 1
      witSetDemandShipLateLimit, "", (
d9350 1
a9350 1
      witSetHashTableSize, "", (
d9362 1
a9362 1
      witSetInvCost, "", (
d9372 1
a9372 1
   STANDARD_API_IMPL (
d9374 1
a9374 1
      witSetInvCost, "Dbl", (
d9386 1
a9386 1
      witSetLocalBuildAhead, "", (
d9398 1
a9398 1
      witSetLocalMultiExec, "", (
d9410 1
a9410 1
      witSetObj2Winv, "", (
d9420 1
a9420 1
   STANDARD_API_IMPL (
d9422 1
a9422 1
      witSetObj2Winv, "Dbl", (
d9434 1
a9434 1
      witSetObj2Wrev, "", (
d9444 1
a9444 1
   STANDARD_API_IMPL (
d9446 1
a9446 1
      witSetObj2Wrev, "Dbl", (
d9458 1
a9458 1
      witSetObj2Wserv, "", (
d9468 1
a9468 1
   STANDARD_API_IMPL (
d9470 1
a9470 1
      witSetObj2Wserv, "Dbl", (
d9482 1
a9482 1
      witSetObj2Wsub, "", (
d9492 1
a9492 1
   STANDARD_API_IMPL (
d9494 1
a9494 1
      witSetObj2Wsub, "Dbl", (
d9506 1
a9506 1
      witSetObjChoice, "", (
d9519 1
a9519 1
      witSetOperationObj1ExecCost, "", (
d9531 1
a9531 1
   STANDARD_API_IMPL (
d9533 1
a9533 1
      witSetOperationObj1ExecCost, "Dbl", (
d9547 1
a9547 1
      witSetOperationObj2AuxCost, "", (
d9559 1
a9559 1
   STANDARD_API_IMPL (
d9561 1
a9561 1
      witSetOperationObj2AuxCost, "Dbl", (
d9575 1
a9575 1
      witSetOperationYield, "", (
d9589 1
a9589 1
      witSetPartBuildAheadLimit, "", (
d9603 1
a9603 1
      witSetPartCycleTime, "", (
d9617 1
a9617 1
      witSetPartIncLotSize, "", (
d9631 1
a9631 1
      witSetPartMinLotSize, "", (
d9645 1
a9645 1
      witSetPartObj1ProdCost, "", (
d9659 1
a9659 1
      witSetPartObj1ScrapCost, "", (
d9672 1
a9672 1
   STANDARD_API_IMPL (
d9674 1
a9674 1
      witSetPartObj1ScrapCost, "Dbl", (
d9689 1
a9689 1
      witSetPartObj1StockCost, "", (
d9701 1
a9701 1
   STANDARD_API_IMPL (
d9703 1
a9703 1
      witSetPartObj1StockCost, "Dbl", (
d9719 1
a9719 1
      witSetPartProdBounds, "", (
d9735 1
a9735 1
      witSetPartProdVol, "", (
d9749 1
a9749 1
      witSetPartPropRouting, "", (
d9763 1
a9763 1
      witSetPartUnitCost, "", (
d9775 1
a9775 1
   STANDARD_API_IMPL (
d9777 1
a9777 1
      witSetPartUnitCost, "Dbl", (
d9791 1
a9791 1
      witSetPartYield, "", (
d9804 1
a9804 1
      witSetPeriodsPerYear, "", (
d9814 1
a9814 1
   STANDARD_API_IMPL (
d9816 1
a9816 1
      witSetPeriodsPerYear, "Dbl", (
d9828 1
a9828 1
      witSetStockRealloc, "", (
d9843 1
a9843 1
      witSetSubsBomEntryFallout, "", (
d9861 1
a9861 1
      witSetSubsBomEntryObj2SubPenalty, "", (
d9877 1
a9877 1
   STANDARD_API_IMPL (
d9879 1
a9879 1
      witSetSubsBomEntryObj2SubPenalty, "Dbl", (
d9897 1
a9897 1
      witSetSubsBomEntryProdVol, "", (
d9915 1
a9915 1
      witSetSubsBomEntryUsageRate, "", (
d9931 1
a9931 1
      witWriteProdSched, "", (
d9947 1
a9947 1
      witExecStandAlone, "", (
d9959 1
a9959 1
      witExhaustMemory, "", ())
d9972 1
a9972 1
      witGetBopEntryMeSelSplit, "", (
d9986 1
a9986 1
      witGetDevMode, "", (
d9998 1
a9998 1
      witGetNewPipPggOrder, "", (
d10010 1
a10010 1
      witGetNonMrSelSplit, "", (
d10022 1
a10022 1
      witGetOptImpAllowed, "", (
d10035 1
a10035 1
      witGetPartBaSelSplit, "", (
d10048 1
a10048 1
      witGetSrSelSplit, "", (
d10059 1
a10059 1
      witListUnissuedMsgs, "", ())
d10085 1
a10085 1
      witNoDependantWitRunVeneersDecr, "", ())
d10095 1
a10095 1
      witNoDependantWitRunVeneersIncr, "", ())
d10106 1
a10106 1
      witNoDependantWitRunVeneersIsOne, "", (
d10120 1
a10120 1
      witSetBopEntryMeSelSplit, "", (
d10134 1
a10134 1
      witSetNewPipPggOrder, "", (
d10146 1
a10146 1
      witSetNonMrSelSplit, "", (
d10159 1
a10159 1
      witSetPartBaSelSplit, "", (
d10172 1
a10172 1
      witSetSrSelSplit, "", (
d10184 1
a10184 1
      witInterpretDevCmd, "", (
@


1.283
log
@Stochastic Implosion
@
text
@d3212 1
a3212 1
WIT_DECLSPEC witReturnCode STDCALL witGetOperationRecourseStage (
d3215 1
a3215 1
      witBoolean * recourseStage)
d3219 1
a3219 1
      witGetOperationRecourseStage, "", (
d3221 1
a3221 1
         recourseStage))
d3226 1
a3226 1
WIT_DECLSPEC witReturnCode STDCALL witGetOperationSelForDel (
d3229 1
a3229 1
      witBoolean * selForDel)
d3233 1
a3233 1
      witGetOperationSelForDel, "", (
d3235 1
a3235 1
         selForDel))
a3797 14
WIT_DECLSPEC witReturnCode STDCALL witGetPartRecourseStage (
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * recourseStage)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetPartRecourseStage, "", (
         partName,
         recourseStage))
   }

//------------------------------------------------------------------------------

d3984 14
d6876 1
a6876 1
WIT_DECLSPEC witReturnCode STDCALL witSetOperationRecourseStage (
d6879 1
a6879 1
      const witBoolean recourseStage)
d6883 1
a6883 1
      witSetOperationRecourseStage, "", (
d6885 1
a6885 1
         recourseStage))
d6890 2
a6891 2
WIT_DECLSPEC witReturnCode STDCALL witSetOperationSelForDel (
      WitRun * const theWitRun,
d6893 1
a6893 1
      const witBoolean selForDel)
d6897 1
a6897 1
      witSetOperationSelForDel, "", (
d6899 1
a6899 1
         selForDel))
a7053 14
WIT_DECLSPEC witReturnCode STDCALL witSetPartRecourseStage (
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean recourseStage)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetPartRecourseStage, "", (
         partName,
         recourseStage))
   }

//------------------------------------------------------------------------------

d7125 14
@


1.282
log
@Stochastic Implosion
@
text
@d1305 12
a4373 12
WIT_DECLSPEC witReturnCode STDCALL witGetScenarioIndex (
      WitRun * const theWitRun,
      int * scenarioIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetScenarioIndex, "", (
         scenarioIndex))
   }
 
//------------------------------------------------------------------------------

d5912 12
a7338 12
WIT_DECLSPEC witReturnCode STDCALL witSetScenarioIndex (
      WitRun * const theWitRun,
      const int scenarioIndex)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetScenarioIndex, "", (
         scenarioIndex))
   }
 
//------------------------------------------------------------------------------

@


1.281
log
@ASAP Pegging Order
@
text
@d4314 24
a4373 24
WIT_DECLSPEC witReturnCode STDCALL witGetScenarioProb (
      WitRun * const theWitRun,
      float * scenarioProb)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetScenarioProb, "", (
         scenarioProb))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetScenarioProbDbl (
      WitRun * const theWitRun,
      double * scenarioProb)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetScenarioProb, "Dbl", (
         scenarioProb))
   }
 
//------------------------------------------------------------------------------

d7279 24
a7338 24
WIT_DECLSPEC witReturnCode STDCALL witSetScenarioProb (
      WitRun * const theWitRun,
      const float scenarioProb)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetScenarioProb, "", (
         scenarioProb))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetScenarioProbDbl (
      WitRun * const theWitRun,
      const double scenarioProb)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetScenarioProb, "Dbl", (
         scenarioProb))
   }
 
//------------------------------------------------------------------------------

@


1.280
log
@ASAP Pegging Order
@
text
@d3334 1
a3334 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartAsapPip (
d3337 1
a3337 1
      witBoolean * asapPip)
d3341 1
a3341 1
      witGetPartAsapPip, "", (
d3343 1
a3343 1
         asapPip))
d6972 1
a6972 1
WIT_DECLSPEC witReturnCode STDCALL witSetPartAsapPip (
d6975 1
a6975 1
      const witBoolean asapPip)
d6979 1
a6979 1
      witSetPartAsapPip, "", (
d6981 1
a6981 1
         asapPip))
@


1.279
log
@Stochastic Implosion
@
text
@d3334 14
d6972 14
@


1.278
log
@Stochastic Implosion
@
text
@a5293 10
WIT_DECLSPEC witReturnCode STDCALL witOptPreprocess (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witOptPreprocess, "", ())
   }

//------------------------------------------------------------------------------

d8991 10
@


1.277
log
@Stochastic Implosion
@
text
@d4408 1
a4408 1
WIT_DECLSPEC witReturnCode STDCALL witGetStochDataMode (
d4410 1
a4410 1
      witBoolean * stochDataMode)
d4414 2
a4415 2
      witGetStochDataMode, "", (
         stochDataMode))
d7369 1
a7369 1
WIT_DECLSPEC witReturnCode STDCALL witSetStochDataMode (
d7371 1
a7371 1
      const witBoolean stochDataMode)
d7375 2
a7376 2
      witSetStochDataMode, "", (
         stochDataMode))
@


1.276
log
@Stochastic Implosion
@
text
@d4300 1
a4300 1
WIT_DECLSPEC witReturnCode STDCALL witGetProbability (
d4302 1
a4302 1
      float * probability)
d4306 2
a4307 2
      witGetProbability, "", (
         probability))
d4309 1
a4309 1
 
d4312 1
a4312 1
WIT_DECLSPEC witReturnCode STDCALL witGetProbabilityDbl (
d4314 1
a4314 1
      double * probability)
d4318 2
a4319 2
      witGetProbability, "Dbl", (
         probability))
d4321 1
a4321 1
 
d4324 1
a4324 1
WIT_DECLSPEC witReturnCode STDCALL witGetRespectStockSLBs (
d4326 1
a4326 1
      witBoolean * respectStockSLBs)
d4330 2
a4331 2
      witGetRespectStockSLBs, "", (
         respectStockSLBs))
d4333 1
a4333 1

d4336 1
a4336 1
WIT_DECLSPEC witReturnCode STDCALL witGetRoundReqVols (
d4338 1
a4338 1
      witBoolean * roundReqVols)
d4342 2
a4343 2
      witGetRoundReqVols, "", (
         roundReqVols))
d4345 1
a4345 1

d4348 1
a4348 1
WIT_DECLSPEC witReturnCode STDCALL witGetScenarioIndex (
d4350 1
a4350 1
      int * scenarioIndex)
d4354 2
a4355 2
      witGetScenarioIndex, "", (
         scenarioIndex))
d7261 1
a7261 1
WIT_DECLSPEC witReturnCode STDCALL witSetProbability (
d7263 1
a7263 1
      const float probability)
d7267 2
a7268 2
      witSetProbability, "", (
         probability))
d7270 1
a7270 1
 
d7273 1
a7273 1
WIT_DECLSPEC witReturnCode STDCALL witSetProbabilityDbl (
d7275 1
a7275 1
      const double probability)
d7279 2
a7280 2
      witSetProbability, "Dbl", (
         probability))
d7282 1
a7282 1
 
d7285 1
a7285 1
WIT_DECLSPEC witReturnCode STDCALL witSetRespectStockSLBs (
d7287 1
a7287 1
      const witBoolean respectStockSLBs)
d7291 2
a7292 2
      witSetRespectStockSLBs, "", (
         respectStockSLBs))
d7294 1
a7294 1

d7297 1
a7297 1
WIT_DECLSPEC witReturnCode STDCALL witSetRoundReqVols (
d7299 1
a7299 1
      const witBoolean roundReqVols)
d7303 2
a7304 2
      witSetRoundReqVols, "", (
         roundReqVols))
d7306 1
a7306 1

d7309 1
a7309 1
WIT_DECLSPEC witReturnCode STDCALL witSetScenarioIndex (
d7311 1
a7311 1
      const int scenarioIndex)
d7315 2
a7316 2
      witSetScenarioIndex, "", (
         scenarioIndex))
@


1.275
log
@Stochastic Implosion
@
text
@d3214 1
a3214 1
WIT_DECLSPEC witReturnCode STDCALL witGetOperations (
d3216 2
a3217 2
      int * lenOperationList,
      char * * * operationList)
d3221 3
a3223 3
      witGetOperations, "", (
         lenOperationList,
         operationList))
d3228 1
a3228 1
WIT_DECLSPEC witReturnCode STDCALL witGetOperationSelForDel (
d3230 2
a3231 2
      const char * const operationName,
      witBoolean * selForDel)
d3235 3
a3237 3
      witGetOperationSelForDel, "", (
         operationName,
         selForDel))
a3829 14
WIT_DECLSPEC witReturnCode STDCALL witGetParts (
      WitRun * const theWitRun,
      int * lenPartList,
      char * * * partList)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetParts, "", (
         lenPartList,
         partList))
   }

//------------------------------------------------------------------------------

d4140 14
@


1.274
log
@Stochastic Implosion
@
text
@d3200 14
d3772 14
d6860 14
d7024 14
@


1.273
log
@Stochastic Implosion
@
text
@d4392 1
a4392 1
WIT_DECLSPEC witReturnCode STDCALL witGetStochSolnExists (
d4394 1
a4394 1
      witBoolean * stochSolnExists)
d4398 2
a4399 2
      witGetStochSolnExists, "", (
         stochSolnExists))
@


1.272
log
@Stochastic Implosion
@
text
@d4272 24
a4331 24
WIT_DECLSPEC witReturnCode STDCALL witGetScenarioProb (
      WitRun * const theWitRun,
      float * scenarioProb)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetScenarioProb, "", (
         scenarioProb))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetScenarioProbDbl (
      WitRun * const theWitRun,
      double * scenarioProb)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetScenarioProb, "Dbl", (
         scenarioProb))
   }
 
//------------------------------------------------------------------------------

d7205 24
a7264 24
WIT_DECLSPEC witReturnCode STDCALL witSetScenarioProb (
      WitRun * const theWitRun,
      const float scenarioProb)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetScenarioProb, "", (
         scenarioProb))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetScenarioProbDbl (
      WitRun * const theWitRun,
      const double scenarioProb)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetScenarioProb, "Dbl", (
         scenarioProb))
   }
 
//------------------------------------------------------------------------------

@


1.271
log
@Stochastic Implosion
@
text
@d4380 1
a4380 1
WIT_DECLSPEC witReturnCode STDCALL witGetStochSolnExists (
d4382 1
a4382 1
      witBoolean * stochSolnExists)
d4386 2
a4387 2
      witGetStochSolnExists, "", (
         stochSolnExists))
d4392 1
a4392 1
WIT_DECLSPEC witReturnCode STDCALL witGetStochasticMode (
d4394 1
a4394 1
      witBoolean * stochasticMode)
d4398 2
a4399 2
      witGetStochasticMode, "", (
         stochasticMode))
d7313 1
a7313 1
WIT_DECLSPEC witReturnCode STDCALL witSetStochasticMode (
d7315 1
a7315 1
      const witBoolean stochasticMode)
d7319 2
a7320 2
      witSetStochasticMode, "", (
         stochasticMode))
@


1.270
log
@Stochastic Implosion
@
text
@d431 10
d2951 1
a2951 1
      witBoolean * exist)
d2957 1
a2957 1
         exist))
d3505 1
a3505 1
      witBoolean * exist)
d3511 1
a3511 1
         exist))
d4380 1
a4380 1
WIT_DECLSPEC witReturnCode STDCALL witGetStochSolnAvail (
d4382 1
a4382 1
      witBoolean * stochSolnAvail)
d4386 2
a4387 2
      witGetStochSolnAvail, "", (
         stochSolnAvail))
@


1.269
log
@Stochastic Implosion
@
text
@d4370 12
@


1.268
log
@Stochastic Implosion
@
text
@d4370 1
a4370 1
WIT_DECLSPEC witReturnCode STDCALL witGetStochImpMode (
d4372 1
a4372 1
      witBoolean * stochImpMode)
d4376 2
a4377 2
      witGetStochImpMode, "", (
         stochImpMode))
d7291 1
a7291 1
WIT_DECLSPEC witReturnCode STDCALL witSetStochImpMode (
d7293 1
a7293 1
      const witBoolean stochImpMode)
d7297 2
a7298 2
      witSetStochImpMode, "", (
         stochImpMode))
@


1.267
log
@Stochastic Implosion
@
text
@d7931 10
@


1.266
log
@Stochastic Implosion
@
text
@d4262 1
a4262 1
WIT_DECLSPEC witReturnCode STDCALL witGetProbability (
d4264 1
a4264 1
      float * probability)
d4268 2
a4269 2
      witGetProbability, "", (
         probability))
d4271 1
a4271 1
 
d4274 1
a4274 1
WIT_DECLSPEC witReturnCode STDCALL witGetProbabilityDbl (
d4276 1
a4276 1
      double * probability)
d4280 2
a4281 2
      witGetProbability, "Dbl", (
         probability))
d4283 1
a4283 1
 
d4286 1
a4286 1
WIT_DECLSPEC witReturnCode STDCALL witGetRespectStockSLBs (
d4288 1
a4288 1
      witBoolean * respectStockSLBs)
d4292 2
a4293 2
      witGetRespectStockSLBs, "", (
         respectStockSLBs))
d4295 1
a4295 1

d4298 1
a4298 1
WIT_DECLSPEC witReturnCode STDCALL witGetRoundReqVols (
d4300 1
a4300 1
      witBoolean * roundReqVols)
d4304 2
a4305 2
      witGetRoundReqVols, "", (
         roundReqVols))
d4307 1
a4307 1

d4310 1
a4310 1
WIT_DECLSPEC witReturnCode STDCALL witGetScenarioIndex (
d4312 1
a4312 1
      int * scenarioIndex)
d4316 2
a4317 2
      witGetScenarioIndex, "", (
         scenarioIndex))
d7183 1
a7183 1
WIT_DECLSPEC witReturnCode STDCALL witSetProbability (
d7185 1
a7185 1
      const float probability)
d7189 2
a7190 2
      witSetProbability, "", (
         probability))
d7192 1
a7192 1
 
d7195 1
a7195 1
WIT_DECLSPEC witReturnCode STDCALL witSetProbabilityDbl (
d7197 1
a7197 1
      const double probability)
d7201 2
a7202 2
      witSetProbability, "Dbl", (
         probability))
d7204 1
a7204 1
 
d7207 1
a7207 1
WIT_DECLSPEC witReturnCode STDCALL witSetRespectStockSLBs (
d7209 1
a7209 1
      const witBoolean respectStockSLBs)
d7213 2
a7214 2
      witSetRespectStockSLBs, "", (
         respectStockSLBs))
d7216 1
a7216 1

d7219 1
a7219 1
WIT_DECLSPEC witReturnCode STDCALL witSetRoundReqVols (
d7221 1
a7221 1
      const witBoolean roundReqVols)
d7225 2
a7226 2
      witSetRoundReqVols, "", (
         roundReqVols))
d7228 1
a7228 1

d7231 1
a7231 1
WIT_DECLSPEC witReturnCode STDCALL witSetScenarioIndex (
d7233 1
a7233 1
      const int scenarioIndex)
d7237 2
a7238 2
      witSetScenarioIndex, "", (
         scenarioIndex))
@


1.265
log
@Stochastic Implosion
@
text
@d4262 24
d7183 24
@


1.264
log
@Stochastic implosion.
@
text
@d4286 12
d7183 12
@


1.263
log
@Stochastic Implosion.
@
text
@d4334 1
a4334 1
WIT_DECLSPEC witReturnCode STDCALL witGetStochImpActive (
d4336 1
a4336 1
      witBoolean * stochImpActive)
d4340 2
a4341 2
      witGetStochImpActive, "", (
         stochImpActive))
d7219 1
a7219 1
WIT_DECLSPEC witReturnCode STDCALL witSetStochImpActive (
d7221 1
a7221 1
      const witBoolean stochImpActive)
d7225 2
a7226 2
      witSetStochImpActive, "", (
         stochImpActive))
@


1.262
log
@Stochastic implosion.
@
text
@d4334 12
d7219 12
@


1.261
log
@Stochastic implosion.
@
text
@d2596 12
d6450 12
@


1.260
log
@Removed witThrowUnknownExc.
@
text
@d4310 12
d7171 12
@


1.259
log
@[disallowing scrap]
@
text
@a9894 10
WIT_DECLSPEC witReturnCode STDCALL witThrowUnknownExc (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witThrowUnknownExc, "", ())
   }

//------------------------------------------------------------------------------

@


1.258
log
@[disallowed backlog]
@
text
@d3794 14
d6876 14
@


1.257
log
@[disallowed backlog]
@
text
@a1310 16
WIT_DECLSPEC witReturnCode STDCALL witGetDemandBacklogAllowed (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * backlogAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandBacklogAllowed, "", (
         partName,
         demandName,
         backlogAllowed))
   }

//------------------------------------------------------------------------------

d1830 1
a1830 1
      int * shipLateLimit)
d1837 1
a1837 1
         shipLateLimit))
d1878 16
a5787 16
WIT_DECLSPEC witReturnCode STDCALL witSetDemandBacklogAllowed (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int backlogAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandBacklogAllowed, "", (
         partName,
         demandName,
         backlogAllowed))
   }
 
//------------------------------------------------------------------------------

d6020 16
@


1.256
log
@[disallowed backlog]
@
text
@d1311 16
a1584 16
WIT_DECLSPEC witReturnCode STDCALL witGetDemandDisallowBacklog (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * disallowBacklog)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandDisallowBacklog, "", (
         partName,
         demandName,
         disallowBacklog))
   }

//------------------------------------------------------------------------------

d5788 16
a5907 16
WIT_DECLSPEC witReturnCode STDCALL witSetDemandDisallowBacklog (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int disallowBacklog)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandDisallowBacklog, "", (
         partName,
         demandName,
         disallowBacklog))
   }
 
//------------------------------------------------------------------------------

@


1.255
log
@[disallowed backlog]
@
text
@d1569 16
d5892 16
a7984 16
WIT_DECLSPEC witReturnCode STDCALL witGetDemandDisallowBacklog (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * disallowBacklog)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetDemandDisallowBacklog, "", (
         partName,
         demandName,
         disallowBacklog))
   }

//------------------------------------------------------------------------------

a8904 16
WIT_DECLSPEC witReturnCode STDCALL witSetDemandDisallowBacklog (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int disallowBacklog)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetDemandDisallowBacklog, "", (
         partName,
         demandName,
         disallowBacklog))
   }
 
//------------------------------------------------------------------------------

@


1.254
log
@[backlog avoidance]
@
text
@d7921 1
a7921 1
WIT_DECLSPEC witReturnCode STDCALL witGetDemandBacklogAllowed (
d7925 1
a7925 1
      int * backlogAllowed)
d7929 1
a7929 1
      witGetDemandBacklogAllowed, "", (
d7932 1
a7932 1
         backlogAllowed))
d7937 1
a7937 1
WIT_DECLSPEC witReturnCode STDCALL witGetDemandBuildAheadLimit (
d7941 1
a7941 1
      int * buildAheadLimit)
d7945 1
a7945 1
      witGetDemandBuildAheadLimit, "", (
d7948 1
a7948 1
         buildAheadLimit))
d7953 1
a7953 1
WIT_DECLSPEC witReturnCode STDCALL witGetDemandBuildAheadUB (
d7957 1
a7957 1
      int * * buildAheadUB)
d7961 1
a7961 1
      witGetDemandBuildAheadUB, "", (
d7964 1
a7964 1
         buildAheadUB))
d8857 1
a8857 1
WIT_DECLSPEC witReturnCode STDCALL witSetDemandBacklogAllowed (
d8861 1
a8861 1
      const int backlogAllowed)
d8865 1
a8865 1
      witSetDemandBacklogAllowed, "", (
d8868 1
a8868 1
         backlogAllowed))
d8873 1
a8873 1
WIT_DECLSPEC witReturnCode STDCALL witSetDemandBuildAheadLimit (
d8877 1
a8877 1
      const int buildAheadLimit)
d8881 1
a8881 1
      witSetDemandBuildAheadLimit, "", (
d8884 1
a8884 1
         buildAheadLimit))
d8886 1
a8886 1
 
d8889 1
a8889 1
WIT_DECLSPEC witReturnCode STDCALL witSetDemandBuildAheadUB (
d8893 1
a8893 1
      const int * buildAheadUB)
d8897 1
a8897 1
      witSetDemandBuildAheadUB, "", (
d8900 1
a8900 1
         buildAheadUB))
d8902 1
a8902 1

@


1.253
log
@[backlog avoidance]
@
text
@d278 5
a282 5
      dupOperationName,
      dupBomEntryIndex,
      origWitRun,
      origOperationName,
      origBomEntryIndex))
d298 5
a302 5
      dupOperationName,
      dupBopEntryIndex,
      origWitRun,
      origOperationName,
      origBopEntryIndex))
d7921 16
d8857 16
@


1.252
log
@[backlog avoidance]
@
text
@a646 12
WIT_DECLSPEC witReturnCode STDCALL witGetBacklogAllowed (
      WitRun * const theWitRun,
      witBoolean * backlogAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witGetBacklogAllowed, "", (
         backlogAllowed))
   }

//------------------------------------------------------------------------------

a5251 12
WIT_DECLSPEC witReturnCode STDCALL witSetBacklogAllowed (
      WitRun * const theWitRun,
      const witBoolean backlogAllowed)
   {
   STANDARD_API_IMPL (
      theWitRun,
      witSetBacklogAllowed, "", (
         backlogAllowed))
   }

//------------------------------------------------------------------------------

@


1.251
log
@witCopy<Object>Data
@
text
@d647 12
d5264 12
@


1.250
log
@witCopy<Object>Data
@
text
@d269 1
a269 1
      const char * const dupConsumingOperationName,
d272 1
a272 1
      const char * const origConsumingOperationName,
d278 1
a278 1
      dupConsumingOperationName,
d281 1
a281 1
      origConsumingOperationName,
d289 1
a289 1
      const char * const dupProducingOperationName,
d292 1
a292 1
      const char * const origProducingOperationName,
d298 1
a298 1
      dupProducingOperationName,
d301 1
a301 1
      origProducingOperationName,
d361 1
a361 1
      const char * const dupConsumingOperationName,
d365 1
a365 1
      const char * const origConsumingOperationName,
d372 1
a372 1
         dupConsumingOperationName,
d376 1
a376 1
         origConsumingOperationName,
@


1.249
log
@witCopy<Object>Data
@
text
@d359 24
@


1.248
log
@witCopy<Object>Data
@
text
@d287 20
@


1.247
log
@witCopy<Object>Data
@
text
@d267 20
@


1.246
log
@witCopy<Object>Data
@
text
@d256 2
a257 2
      WitRun * const dstWitRun,
      WitRun * const srcWitRun)
d260 1
a260 1
      dstWitRun,
d262 1
a262 1
         srcWitRun))
d268 6
a273 6
      WitRun * const     dstWitRun,
      const char * const dstPartName,
      const char * const dstDemandName,
      WitRun * const     srcWitRun,
      const char * const srcPartName,
      const char * const srcDemandName)
d276 1
a276 1
      dstWitRun,
d278 5
a282 5
         dstPartName,
         dstDemandName,
         srcWitRun,
         srcPartName,
         srcDemandName))
d288 4
a291 4
      WitRun * const     dstWitRun,
      const char * const dstOperationName,
      WitRun * const     srcWitRun,
      const char * const srcOperationName)
d294 1
a294 1
      dstWitRun,
d296 3
a298 3
         dstOperationName,
         srcWitRun,
         srcOperationName))
d304 4
a307 4
      WitRun * const     dstWitRun,
      const char * const dstPartName,
      WitRun * const     srcWitRun,
      const char * const srcPartName)
d310 1
a310 1
      dstWitRun,
d312 3
a314 3
         dstPartName,
         srcWitRun,
         srcPartName))
@


1.245
log
@witCopy<Object>Data.
@
text
@d267 20
@


1.244
log
@witCopy<Object>Data
@
text
@d267 16
d285 1
a285 1
      const char * const dstpartName,
d292 1
a292 1
         dstpartName,
@


1.243
log
@witCopy<Object>Data
@
text
@d30 1
a30 1
// Macro STANDARD_API_IMPL (innerFunc, argList, suffix, preInitMode)
d36 1
d52 1
d89 1
d103 1
d117 1
d130 1
d143 1
d156 1
d170 1
d183 1
d197 1
d215 1
d229 1
d239 1
d249 1
a253 2
// Non-Standard API Function.
//------------------------------------------------------------------------------
a258 4
   WitRun * theWitRun;
 
   theWitRun = dstWitRun;

d260 1
a265 2
// Non-Standard API Function.
//------------------------------------------------------------------------------
a272 4
   WitRun * theWitRun;
 
   theWitRun = dstWitRun;

d274 1
d282 4
d297 1
a297 15
   try
      {
      WitApiMgr::startApiFunc  (theWitRun, "witDeleteRun");

      theWitRun->witDeleteRun ();

      theWitRun->myApiMgr ()->finishApiFunc ();
      }

   catch (...)
      {
      theWitRun->myApiMgr ()->handleAnyExc ();
      }

   theRC = theWitRun->myApiMgr ()->apiRc ();
d316 14
d336 1
d353 1
d375 1
d398 1
d422 1
d439 1
d449 1
d459 1
d481 1
d492 1
d504 1
d516 1
d528 1
d540 1
d554 1
d570 1
d586 1
d602 1
d618 1
d634 1
d650 1
d666 1
d682 1
d698 1
d714 1
d730 1
d746 1
d763 1
d780 1
d796 1
d812 1
d828 1
d844 1
d860 1
d876 1
d893 1
d910 1
d926 1
d942 1
d958 1
d974 1
d990 1
d1006 1
d1022 1
d1038 1
d1054 1
d1070 1
d1086 1
d1102 1
d1118 1
d1134 1
d1148 1
d1160 1
d1172 1
d1186 1
d1202 1
d1223 1
d1249 1
d1274 1
d1298 1
d1320 1
d1340 1
d1358 1
d1374 1
d1391 1
d1409 1
d1427 1
d1444 1
d1460 1
d1480 1
d1504 1
d1528 1
d1552 1
d1572 1
d1588 1
d1605 1
d1621 1
d1637 1
d1657 1
d1681 1
d1701 1
d1717 1
d1733 1
d1750 1
d1768 1
d1785 1
d1801 1
d1817 1
d1833 1
d1849 1
d1869 1
d1893 1
d1919 1
d1947 1
d1975 1
d2003 1
d2029 1
d2053 1
d2071 1
d2083 1
d2095 1
d2107 1
d2119 1
d2132 1
d2154 1
d2184 1
d2205 1
d2219 1
d2235 1
d2249 1
d2261 1
d2273 1
d2285 1
d2297 1
d2309 1
d2321 1
d2333 1
d2345 1
d2358 1
d2372 1
d2386 1
d2400 1
d2413 1
d2425 1
d2437 1
d2449 1
d2461 1
d2473 1
d2485 1
d2498 1
d2512 1
d2526 1
d2539 1
d2551 1
d2563 1
d2577 1
d2592 1
d2606 1
d2620 1
d2636 1
d2654 1
d2670 1
d2684 1
d2698 1
d2712 1
d2727 1
d2743 1
d2759 1
d2774 1
d2788 1
d2802 1
d2816 1
d2830 1
d2844 1
d2858 1
d2872 1
d2886 1
d2900 1
d2914 1
d2928 1
d2942 1
d2956 1
d2970 1
d2984 1
d2998 1
d3012 1
d3026 1
d3040 1
d3054 1
d3068 1
d3082 1
d3096 1
d3110 1
d3124 1
d3137 1
d3149 1
d3161 1
d3174 1
d3189 1
d3204 1
d3218 1
d3232 1
d3246 1
d3260 1
d3276 1
d3295 1
d3313 1
d3328 1
d3342 1
d3356 1
d3370 1
d3384 1
d3398 1
d3412 1
d3426 1
d3440 1
d3454 1
d3468 1
d3482 1
d3496 1
d3510 1
d3524 1
d3538 1
d3552 1
d3568 1
d3584 1
d3598 1
d3612 1
d3626 1
d3640 1
d3655 1
d3670 1
d3684 1
d3698 1
d3713 1
d3728 1
d3742 1
d3756 1
d3770 1
d3784 1
d3798 1
d3814 1
d3832 1
d3848 1
d3862 1
d3877 1
d3893 1
d3909 1
d3924 1
d3938 1
d3952 1
d3966 1
d3979 1
d3991 1
d4007 1
d4027 1
d4043 1
d4055 1
d4072 1
d4089 1
d4101 1
d4113 1
d4125 1
d4137 1
d4149 1
d4161 1
d4173 1
d4185 1
d4200 1
d4218 1
d4236 1
d4254 1
d4272 1
d4290 1
d4308 1
d4326 1
d4344 1
d4362 1
d4380 1
d4398 1
d4416 1
d4434 1
d4452 1
d4470 1
d4488 1
d4506 1
d4524 1
d4542 1
d4560 1
d4578 1
d4596 1
d4614 1
d4632 1
d4650 1
d4668 1
d4686 1
d4704 1
d4722 1
d4741 1
d4760 1
d4778 1
d4793 1
d4805 1
d4817 1
d4829 1
d4841 1
d4853 1
d4865 1
d4877 1
d4889 1
d4900 1
d4915 1
d4935 1
d4956 1
d4978 1
d4994 1
d5004 1
a5014 2
   WitRun * theWitRun;

d5020 1
a5020 1
   theWitRun = WitRun::newInstance ();
a5024 2
   * theWitRunPtr = theWitRun;

d5026 1
d5036 1
d5046 1
d5056 1
d5066 1
d5076 1
d5087 1
d5098 1
d5109 1
d5121 1
d5133 1
d5145 1
d5159 1
d5175 1
d5191 1
d5207 1
d5223 1
d5239 1
d5255 1
d5271 1
d5287 1
d5303 1
d5319 1
d5335 1
d5351 1
d5367 1
d5383 1
d5399 1
d5415 1
d5431 1
d5447 1
d5463 1
d5479 1
d5495 1
d5511 1
d5527 1
d5543 1
d5559 1
d5575 1
d5591 1
d5607 1
d5623 1
d5637 1
d5649 1
d5663 1
d5681 1
d5701 1
d5719 1
d5735 1
d5751 1
d5767 1
d5783 1
d5799 1
d5815 1
d5831 1
d5847 1
d5863 1
d5879 1
d5895 1
d5911 1
d5927 1
d5943 1
d5959 1
d5975 1
d5989 1
d6001 1
d6013 1
d6025 1
d6037 1
d6049 1
d6061 1
d6073 1
d6085 1
d6097 1
d6109 1
d6122 1
d6136 1
d6151 1
d6167 1
d6183 1
d6199 1
d6213 1
d6225 1
d6237 1
d6249 1
d6261 1
d6273 1
d6285 1
d6298 1
d6314 1
d6332 1
d6348 1
d6362 1
d6376 1
d6390 1
d6404 1
d6418 1
d6432 1
d6446 1
d6460 1
d6474 1
d6488 1
d6502 1
d6516 1
d6530 1
d6544 1
d6558 1
d6572 1
d6586 1
d6600 1
d6614 1
d6628 1
d6641 1
d6653 1
d6666 1
d6680 1
d6694 1
d6708 1
d6722 1
d6736 1
d6750 1
d6765 1
d6779 1
d6795 1
d6813 1
d6829 1
d6843 1
d6857 1
d6871 1
d6884 1
d6896 1
d6908 1
d6920 1
d6932 1
d6944 1
d6956 1
d6968 1
d6980 1
d6992 1
d7004 1
d7019 1
d7037 1
d7055 1
d7073 1
d7091 1
d7109 1
d7127 1
d7145 1
d7163 1
d7181 1
d7199 1
d7217 1
d7235 1
d7253 1
d7271 1
d7289 1
d7307 1
d7325 1
d7343 1
d7361 1
d7379 1
d7397 1
d7415 1
d7433 1
d7451 1
d7469 1
d7484 1
d7496 1
d7508 1
d7520 1
d7532 1
d7544 1
d7556 1
d7568 1
d7580 1
d7591 1
d7601 1
d7611 1
d7621 1
d7634 1
d7648 1
d7661 1
d7675 1
d7689 1
d7708 1
d7724 1
d7740 1
d7756 1
d7772 1
d7788 1
d7802 1
d7814 1
d7828 1
d7844 1
d7860 1
d7876 1
d7892 1
d7908 1
d7924 1
d7940 1
d7956 1
d7972 1
d7986 1
d7998 1
d8010 1
d8022 1
d8034 1
d8049 1
d8067 1
d8082 1
d8094 1
d8106 1
d8118 1
d8130 1
d8142 1
d8154 1
d8166 1
d8178 1
d8191 1
d8205 1
d8219 1
d8233 1
d8247 1
d8261 1
d8275 1
d8289 1
d8303 1
d8317 1
d8331 1
d8345 1
d8359 1
d8373 1
d8387 1
d8401 1
d8417 1
d8433 1
d8447 1
d8461 1
d8475 1
d8488 1
d8500 1
d8512 1
d8527 1
d8545 1
d8563 1
d8581 1
d8599 1
d8616 1
d8632 1
d8648 1
d8664 1
d8680 1
d8696 1
d8710 1
d8722 1
d8734 1
d8748 1
d8764 1
d8780 1
d8796 1
d8812 1
d8828 1
d8844 1
d8860 1
d8876 1
d8892 1
d8906 1
d8918 1
d8930 1
d8942 1
d8954 1
d8966 1
d8978 1
d8990 1
d9002 1
d9014 1
d9026 1
d9038 1
d9050 1
d9062 1
d9075 1
d9089 1
d9103 1
d9117 1
d9131 1
d9145 1
d9159 1
d9173 1
d9187 1
d9201 1
d9215 1
d9230 1
d9245 1
d9259 1
d9275 1
d9291 1
d9305 1
d9319 1
d9333 1
d9347 1
d9360 1
d9372 1
d9384 1
d9399 1
d9417 1
d9435 1
d9453 1
d9471 1
d9487 1
d9503 1
d9515 1
d9528 1
d9542 1
d9554 1
d9566 1
d9578 1
d9591 1
d9604 1
d9615 1
d9641 1
d9651 1
d9662 1
d9676 1
d9690 1
d9702 1
d9715 1
d9728 1
d9739 1
d9750 1
@


1.242
log
@witCopy<Object>Data
@
text
@d61 1
a61 1
      WitApiMgr::finishApiFunc (theWitRun);                                    \
d294 1
a294 1
      WitApiMgr::finishApiFunc (theWitRun);
@


1.241
log
@witCopy<Object>Data
@
text
@d9115 1
a9115 1
WIT_DECLSPEC witReturnCode STDCALL witInterpDevCmd (
d9117 1
a9117 1
      const char * const theCmd)
d9120 2
a9121 2
      witInterpDevCmd, "", (
         theCmd))
@


1.240
log
@witCopy<Object>Data
@
text
@d259 21
@


1.239
log
@External opt implosion.
@
text
@d9085 1
a9085 1
WIT_DECLSPEC witReturnCode STDCALL witTestFatalMesg (
d9089 1
a9089 1
      witTestFatalMesg, "", ())
d9094 3
a9096 2
WIT_DECLSPEC witReturnCode STDCALL witThrowUnknownExc (
      WitRun * const theWitRun)
d9099 2
a9100 1
      witThrowUnknownExc, "", ())
@


1.238
log
@External opt implosion.
@
text
@d5642 2
a5643 2
      WitRun * const theWitRun,
      const float * const soln)
d5647 1
a5647 1
         soln))
d5653 2
a5654 2
      WitRun * const theWitRun,
      const double * const soln)
d5658 1
a5658 1
         soln))
@


1.237
log
@External opt implosion.
@
text
@d1993 1
a1993 1
WIT_DECLSPEC witReturnCode STDCALL witGetExtOptIntVars (
d1999 1
a1999 1
      witGetExtOptIntVars, "", (
@


1.236
log
@External opt implosion.
@
text
@d7089 9
@


1.235
log
@external optimzing implosion.
@
text
@d1993 1
a1993 1
WIT_DECLSPEC witReturnCode STDCALL witGetExtOptIntIndices (
d1995 2
a1996 2
      int * *        intIndices,
      int *          numIntCols)
d1999 3
a2001 3
      witGetExtOptIntIndices, "", (
         intIndices,
         numIntCols))
d5641 1
a5641 1
WIT_DECLSPEC witReturnCode STDCALL witSetExtOptColSol (
d5643 1
a5643 1
      const float * const colsol)
d5646 2
a5647 2
      witSetExtOptColSol, "", (
         colsol))
d5652 1
a5652 1
WIT_DECLSPEC witReturnCode STDCALL witSetExtOptColSolDbl (
d5654 1
a5654 1
      const double * const colsol)
d5657 2
a5658 2
      witSetExtOptColSol, "Dbl", (
         colsol))
@


1.234
log
@External opt implosion.
@
text
@d1131 4
a1134 4
      char ***           operationNameList,
      int **             bopEntryIndexList,
      int **             execPeriodList,
      float **           peggedVolList)
d1156 4
a1159 4
      char ***           operationNameList,
      int **             bopEntryIndexList,
      int **             execPeriodList,
      double **          peggedVolList)
d1984 1
a1984 1
      witBoolean * extOptActive)
d1993 14
a2006 1
WIT_DECLSPEC witReturnCode STDCALL witGetExtOptProb (
d2010 8
a2017 11
      int **         start,
      int **         index,
      float **       value,
      float **       collb,
      float **       colub,
      float **       obj,
      float **       rowlb,
      float **       rowub,
      int **         intIndices,
      int *          numIntCols,
      float *        objSense)
d2020 1
a2020 1
      witGetExtOptProb, "", (
d2030 1
a2030 4
         rowub,
         intIndices,
         numIntCols,
         objSense))
d2035 1
a2035 1
WIT_DECLSPEC witReturnCode STDCALL witGetExtOptProbDbl (
d2039 8
a2046 11
      int **         start,
      int **         index,
      double **      value,
      double **      collb,
      double **      colub,
      double **      obj,
      double **      rowlb,
      double **      rowub,
      int **         intIndices,
      int *          numIntCols,
      double *       objSense)
d2049 1
a2049 1
      witGetExtOptProb, "Dbl", (
d2059 1
a2059 4
         rowub,
         intIndices,
         numIntCols,
         objSense))
@


1.233
log
@External opt implosion.
@
text
@a480 11
WIT_DECLSPEC witReturnCode STDCALL witGetAllowIntCons (
      WitRun * const theWitRun,
      witBoolean * allowIntCons)
   {
   STANDARD_API_IMPL (
      witGetAllowIntCons, "", (
         allowIntCons))
   }
 
//------------------------------------------------------------------------------

d2266 11
a4793 11
WIT_DECLSPEC witReturnCode STDCALL witSetAllowIntCons (
      WitRun * const theWitRun,
      const witBoolean allowIntCons)
   {
   STANDARD_API_IMPL (
      witSetAllowIntCons, "", (
         allowIntCons))
   }
 
//------------------------------------------------------------------------------

d5814 11
@


1.232
log
@External opt implosion.
@
text
@d481 11
a1948 11
WIT_DECLSPEC witReturnCode STDCALL witGetEnforceIntCons (
      WitRun * const theWitRun,
      witBoolean * enforceIntCons)
   {
   STANDARD_API_IMPL (
      witGetEnforceIntCons, "", (
         enforceIntCons))
   }
 
//------------------------------------------------------------------------------

d4794 11
a5606 11
WIT_DECLSPEC witReturnCode STDCALL witSetEnforceIntCons (
      WitRun * const theWitRun,
      const witBoolean enforceIntCons)
   {
   STANDARD_API_IMPL (
      witSetEnforceIntCons, "", (
         enforceIntCons))
   }
 
//------------------------------------------------------------------------------

@


1.231
log
@External optimizing implosion.
@
text
@d1938 11
d5596 11
@


1.230
log
@External opt implosion.
@
text
@d1508 1
a1508 1
WIT_DECLSPEC witReturnCode STDCALL witGetDemandObj1CumShipReward (
d1510 1
a1510 1
      const char * const demandedPartName,
d1512 1
a1512 1
      float * * obj1CumShipReward)
d1515 2
a1516 2
      witGetDemandObj1CumShipReward, "", (
         demandedPartName,
d1518 1
a1518 46
         obj1CumShipReward))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandObj1CumShipRewardDbl (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * * obj1CumShipReward)
   {
   STANDARD_API_IMPL (
      witGetDemandObj1CumShipReward, "Dbl", (
         demandedPartName,
         demandName,
         obj1CumShipReward))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandObj1ShipReward (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * * obj1ShipReward)
   {
   STANDARD_API_IMPL (
      witGetDemandObj1ShipReward, "", (
         demandedPartName,
         demandName,
         obj1ShipReward))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandObj1ShipRewardDbl (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * * obj1ShipReward)
   {
   STANDARD_API_IMPL (
      witGetDemandObj1ShipReward, "Dbl", (
         demandedPartName,
         demandName,
         obj1ShipReward))
d2708 13
d4157 17
d5435 1
a5435 1
WIT_DECLSPEC witReturnCode STDCALL witSetDemandObj1CumShipReward (
d5439 1
a5439 1
      const float * const obj1CumShipReward)
d5442 1
a5442 1
      witSetDemandObj1CumShipReward, "", (
d5445 1
a5445 46
         obj1CumShipReward))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandObj1CumShipRewardDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double * const obj1CumShipReward)
   {
   STANDARD_API_IMPL (
      witSetDemandObj1CumShipReward, "Dbl", (
         partName,
         demandName,
         obj1CumShipReward))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandObj1ShipReward (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float * const obj1ShipReward)
   {
   STANDARD_API_IMPL (
      witSetDemandObj1ShipReward, "", (
         partName,
         demandName,
         obj1ShipReward))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandObj1ShipRewardDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double * const obj1ShipReward)
   {
   STANDARD_API_IMPL (
      witSetDemandObj1ShipReward, "Dbl", (
         partName,
         demandName,
         obj1ShipReward))
d6035 13
d6712 17
d7334 60
d8190 60
a8869 15
WIT_DECLSPEC witReturnCode STDCALL witGetDemandIntShipVols (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * intShipVols)
   {
   STANDARD_API_IMPL (
      witGetDemandIntShipVols, "", (
         partName,
         demandName,
         intShipVols))
   }

//------------------------------------------------------------------------------

a8902 13
WIT_DECLSPEC witReturnCode STDCALL witGetOperationIntExecVols (
      WitRun * const theWitRun,
      const char * const operationName,
      witBoolean * intExecVols)
   {
   STANDARD_API_IMPL (
      witGetOperationIntExecVols, "", (
         operationName,
         intExecVols))
   }

//------------------------------------------------------------------------------

a8937 17
WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryIntSubVols (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      witBoolean * intSubVols)
   {
   STANDARD_API_IMPL (
      witGetSubsBomEntryIntSubVols, "", (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         intSubVols))
   }

//------------------------------------------------------------------------------

a9006 15
WIT_DECLSPEC witReturnCode STDCALL witSetDemandIntShipVols (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int intShipVols)
   {
   STANDARD_API_IMPL (
      witSetDemandIntShipVols, "", (
         partName,
         demandName,
         intShipVols))
   }
 
//------------------------------------------------------------------------------

a9028 13
WIT_DECLSPEC witReturnCode STDCALL witSetOperationIntExecVols (
      WitRun * const theWitRun,
      const char * const operationName,
      const witBoolean intExecVols)
   {
   STANDARD_API_IMPL (
      witSetOperationIntExecVols, "", (
         operationName,
         intExecVols))
   }

//------------------------------------------------------------------------------

a9052 17
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryIntSubVols (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const witBoolean intSubVols)
   {
   STANDARD_API_IMPL (
      witSetSubsBomEntryIntSubVols, "", (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         intSubVols))
   }

//------------------------------------------------------------------------------

@


1.229
log
@External opt implosion.
@
text
@d1289 34
d2578 15
d3635 30
@


1.228
log
@External opt implosion.
@
text
@d548 1
a548 1
WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryEarliestPeriod (
d552 1
a552 1
      int * earliestPeriod)
d555 1
a555 1
      witGetBomEntryEarliestPeriod, "", (
d558 1
a558 1
         earliestPeriod))
d563 1
a563 1
WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryConsumedPart (
d567 1
a567 1
      char * * consumedPartName)
d570 1
a570 1
      witGetBomEntryConsumedPart, "", (
d573 1
a573 1
         consumedPartName))
d2544 2
a2545 2
WIT_DECLSPEC witReturnCode STDCALL witGetOperationExecutable (
      WitRun * const theWitRun,
d2547 2
a2548 1
      witBoolean * * execVol)
d2551 1
a2551 1
      witGetOperationExecutable, "", (
d2553 2
a2554 1
         execVol))
d2563 1
a2563 1
      int *              execIndex)
d2569 1
a2569 1
         execIndex))
d2600 13
@


1.227
log
@External opt implosion.
@
text
@d703 1
a703 1
      int *              colIndex)
d710 1
a710 1
         colIndex))
d825 1
a825 1
      int *              rowIndex)
d832 1
a832 1
         rowIndex))
d1294 1
a1294 1
      int *              colIndex)
d1301 1
a1301 1
         colIndex))
d1645 1
a1645 1
      int *              rowIndex)
d1652 1
a1652 1
         rowIndex))
d1662 1
a1662 1
      int *              colIndex)
d1669 1
a1669 1
         colIndex))
d2561 1
a2561 1
      int *              colIndex)
d2567 1
a2567 1
         colIndex))
d3368 1
a3368 1
      int *              rowIndex)
d3374 1
a3374 1
         rowIndex))
d3422 1
a3422 1
      int *              colIndex)
d3428 1
a3428 1
         colIndex))
d3575 1
a3575 1
      int *              colIndex)
d3581 1
a3581 1
         colIndex))
d4339 1
a4339 1
      int *              colIndex)
d4347 1
a4347 1
         colIndex))
@


1.226
log
@External opt implosion.
@
text
@a562 15
WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryNSubsBomEntries (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      int * nSubsBomEntries)
   {
   STANDARD_API_IMPL (
      witGetBomEntryNSubsBomEntries, "", (
         operationName,
         bomEntryIndex,
         nSubsBomEntries))
   }
 
//------------------------------------------------------------------------------

d683 32
d820 17
d1289 17
d1640 34
d2557 15
d3418 15
d3571 15
d4333 19
@


1.225
log
@External opt implosion.
@
text
@d3264 15
@


1.224
log
@External opt implosion.
@
text
@d1919 1
a1919 1
WIT_DECLSPEC witReturnCode STDCALL witGetExtOptProblem (
d1936 1
a1936 1
      witGetExtOptProblem, "", (
d1954 1
a1954 1
WIT_DECLSPEC witReturnCode STDCALL witGetExtOptProblemDbl (
d1971 1
a1971 1
      witGetExtOptProblem, "Dbl", (
d5431 1
a5431 1
WIT_DECLSPEC witReturnCode STDCALL witSetExtOptColSolution (
d5436 1
a5436 1
      witSetExtOptColSolution, "", (
d5442 1
a5442 1
WIT_DECLSPEC witReturnCode STDCALL witSetExtOptColSolutionDbl (
d5447 1
a5447 1
      witSetExtOptColSolution, "Dbl", (
@


1.223
log
@External opt implosion.
@
text
@d1919 70
a2794 70
WIT_DECLSPEC witReturnCode STDCALL witGetOptProblem (
      WitRun * const theWitRun,
      int *          numcols,
      int *          numrows,
      int **         start,
      int **         index,
      float **       value,
      float **       collb,
      float **       colub,
      float **       obj,
      float **       rowlb,
      float **       rowub,
      int **         intIndices,
      int *          numIntCols,
      float *        objSense)
   {
   STANDARD_API_IMPL (
      witGetOptProblem, "", (
         numcols,
         numrows,
         start,
         index,
         value,
         collb,
         colub,
         obj,
         rowlb,
         rowub,
         intIndices,
         numIntCols,
         objSense))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOptProblemDbl (
      WitRun * const theWitRun,
      int *          numcols,
      int *          numrows,
      int **         start,
      int **         index,
      double **      value,
      double **      collb,
      double **      colub,
      double **      obj,
      double **      rowlb,
      double **      rowub,
      int **         intIndices,
      int *          numIntCols,
      double *       objSense)
   {
   STANDARD_API_IMPL (
      witGetOptProblem, "Dbl", (
         numcols,
         numrows,
         start,
         index,
         value,
         collb,
         colub,
         obj,
         rowlb,
         rowub,
         intIndices,
         numIntCols,
         objSense))
   }

//------------------------------------------------------------------------------

d5431 22
@


1.222
log
@External opt implosion.
@
text
@d8500 1
a8500 1
WIT_DECLSPEC witReturnCode STDCALL witGetDemandIntConShipVols (
d8504 1
a8504 1
      int * intConShipVols)
d8507 1
a8507 1
      witGetDemandIntConShipVols, "", (
d8510 1
a8510 1
         intConShipVols))
d8548 1
a8548 1
WIT_DECLSPEC witReturnCode STDCALL witGetOperationIntConExecVols (
d8551 1
a8551 1
      witBoolean * intConExecVols)
d8554 1
a8554 1
      witGetOperationIntConExecVols, "", (
d8556 1
a8556 1
         intConExecVols))
d8596 1
a8596 1
WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryIntConSubVols (
d8601 1
a8601 1
      witBoolean * intConSubVols)
d8604 1
a8604 1
      witGetSubsBomEntryIntConSubVols, "", (
d8608 1
a8608 1
         intConSubVols))
d8682 1
a8682 1
WIT_DECLSPEC witReturnCode STDCALL witSetDemandIntConShipVols (
d8686 1
a8686 1
      const int intConShipVols)
d8689 1
a8689 1
      witSetDemandIntConShipVols, "", (
d8692 1
a8692 1
         intConShipVols))
d8719 1
a8719 1
WIT_DECLSPEC witReturnCode STDCALL witSetOperationIntConExecVols (
d8722 1
a8722 1
      const witBoolean intConExecVols)
d8725 1
a8725 1
      witSetOperationIntConExecVols, "", (
d8727 1
a8727 1
         intConExecVols))
d8756 1
a8756 1
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryIntConSubVols (
d8761 1
a8761 1
      const witBoolean intConSubVols)
d8764 1
a8764 1
      witSetSubsBomEntryIntConSubVols, "", (
d8768 1
a8768 1
         intConSubVols))
@


1.221
log
@External opt implosion.
@
text
@d409 1
a409 1
WIT_DECLSPEC witReturnCode STDCALL witFinishAsstOpt (
d413 1
a413 1
      witFinishAsstOpt, "", ())
a491 11
WIT_DECLSPEC witReturnCode STDCALL witGetAsstOptActive (
      WitRun * const theWitRun,
      witBoolean * asstOptActive)
   {
   STANDARD_API_IMPL (
      witGetAsstOptActive, "", (
         asstOptActive))
   }

//------------------------------------------------------------------------------

d1908 11
d6825 1
a6825 1
WIT_DECLSPEC witReturnCode STDCALL witStartAsstOpt (
d6829 1
a6829 1
      witStartAsstOpt, "", ())
@


1.220
log
@Assisted opt implosion.
@
text
@a6824 9
WIT_DECLSPEC witReturnCode STDCALL witSolveOptProblem (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      witSolveOptProblem, "", ())
   }

//------------------------------------------------------------------------------

@


1.219
log
@Assisted opt implosion.
@
text
@d2736 4
a2739 1
      float **       rowub)
d2752 4
a2755 1
         rowub))
d2771 4
a2774 1
      double **      rowub)
d2787 4
a2790 1
         rowub))
@


1.218
log
@Custom opt implosion.
@
text
@d409 1
a409 1
WIT_DECLSPEC witReturnCode STDCALL witFinishCustOptImp (
d413 1
a413 1
      witFinishCustOptImp, "", ())
d492 11
a1086 11
WIT_DECLSPEC witReturnCode STDCALL witGetCustOptImpActive (
      WitRun * const theWitRun,
      witBoolean * custOptImpActive)
   {
   STANDARD_API_IMPL (
      witGetCustOptImpActive, "", (
         custOptImpActive))
   }

//------------------------------------------------------------------------------

d6822 1
a6822 1
WIT_DECLSPEC witReturnCode STDCALL witStartCustOptImp (
d6826 1
a6826 1
      witStartCustOptImp, "", ())
@


1.217
log
@App controlled opt implosion.
@
text
@d409 1
a409 1
WIT_DECLSPEC witReturnCode STDCALL witFinishHeurAlloc (
d413 1
a413 1
      witFinishHeurAlloc, "", ())
d418 1
a418 1
WIT_DECLSPEC witReturnCode STDCALL witFinishOptImp (
d422 1
a422 1
      witFinishOptImp, "", ())
d1076 11
a2713 11
WIT_DECLSPEC witReturnCode STDCALL witGetOptImpActive (
      WitRun * const theWitRun,
      witBoolean * optImpActive)
   {
   STANDARD_API_IMPL (
      witGetOptImpActive, "", (
         optImpActive))
   }

//------------------------------------------------------------------------------

d6822 1
a6822 1
WIT_DECLSPEC witReturnCode STDCALL witStartHeurAlloc (
d6826 1
a6826 1
      witStartHeurAlloc, "", ())
d6831 1
a6831 1
WIT_DECLSPEC witReturnCode STDCALL witStartOptImp (
d6835 1
a6835 1
      witStartOptImp, "", ())
@


1.216
log
@App controlled opt implosion.
@
text
@d8558 11
@


1.215
log
@App controlled opt implosion.
@
text
@d57 1
a57 1
      theWitRun->myApiMgr ()->startApiFunc (#innerFunc suffix);                \
d61 1
a61 1
      theWitRun->myApiMgr ()->finishApiFunc ();                                \
d269 1
a269 1
      theWitRun->myApiMgr ()->startApiFunc ("witDeleteRun");
d273 1
a273 1
      theWitRun->myApiMgr ()->finishApiFunc ();
@


1.214
log
@App controlled opt implosion.
@
text
@d2768 1
a2768 1
      witGetOptProblem, "", (
@


1.213
log
@App controlled opt implosion.
@
text
@d2725 58
@


1.212
log
@App controlled opt implosion.
@
text
@d6755 1
a6755 1
WIT_DECLSPEC witReturnCode STDCALL witSolveOptImp (
d6759 1
a6759 1
      witSolveOptImp, "", ())
a8659 11
WIT_DECLSPEC witReturnCode STDCALL witSetOptImpActive (
      WitRun * const theWitRun,
      const witBoolean optImpActive)
   {
   STANDARD_API_IMPL (
      witSetOptImpActive, "", (
         optImpActive))
   }

//------------------------------------------------------------------------------

@


1.211
log
@Heuristic search increment.
@
text
@d417 9
d6755 9
d6773 9
@


1.210
log
@Heuristic search increment.
@
text
@d1535 30
a1961 22
WIT_DECLSPEC witReturnCode STDCALL witGetHeurSearchInc (
      WitRun * const theWitRun,
      float * heurSearchInc)
   {
   STANDARD_API_IMPL (
      witGetHeurSearchInc, "", (
         heurSearchInc))
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetHeurSearchIncDbl (
      WitRun * const theWitRun,
      double * heurSearchInc)
   {
   STANDARD_API_IMPL (
      witGetHeurSearchInc, "Dbl", (
         heurSearchInc))
   }

//------------------------------------------------------------------------------

d5188 30
a5362 22
WIT_DECLSPEC witReturnCode STDCALL witSetHeurSearchInc (
      WitRun * const theWitRun,
      const float heurSearchInc)
   {
   STANDARD_API_IMPL (
      witSetHeurSearchInc, "", (
         heurSearchInc))
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetHeurSearchIncDbl (
      WitRun * const theWitRun,
      const double heurSearchInc)
   {
   STANDARD_API_IMPL (
      witSetHeurSearchInc, "Dbl", (
         heurSearchInc))
   }
 
//------------------------------------------------------------------------------

@


1.209
log
@App controlled opt implosion.
@
text
@d1932 22
d5325 22
@


1.208
log
@App controlled opt implosion.
@
text
@d8573 11
@


1.207
log
@App controlled opt implosion.
@
text
@d8367 11
@


1.206
log
@NSTN residualVol.
@
text
@a2455 13
WIT_DECLSPEC witReturnCode STDCALL witGetOperationIntConExecVols (
      WitRun * const theWitRun,
      const char * const operationName,
      witBoolean * intConExecVols)
   {
   STANDARD_API_IMPL (
      witGetOperationIntConExecVols, "", (
         operationName,
         intConExecVols))
   }

//------------------------------------------------------------------------------

a3840 17
WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryIntConSubVols (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      witBoolean * intConSubVols)
   {
   STANDARD_API_IMPL (
      witGetSubsBomEntryIntConSubVols, "", (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         intConSubVols))
   }

//------------------------------------------------------------------------------

a5675 13
WIT_DECLSPEC witReturnCode STDCALL witSetOperationIntConExecVols (
      WitRun * const theWitRun,
      const char * const operationName,
      const witBoolean intConExecVols)
   {
   STANDARD_API_IMPL (
      witSetOperationIntConExecVols, "", (
         operationName,
         intConExecVols))
   }

//------------------------------------------------------------------------------

a6339 17
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryIntConSubVols (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const witBoolean intConSubVols)
   {
   STANDARD_API_IMPL (
      witSetSubsBomEntryIntConSubVols, "", (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         intConSubVols))
   }

//------------------------------------------------------------------------------

a6935 15
WIT_DECLSPEC witReturnCode STDCALL witGetDemandIntConShipVols (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * intConShipVols)
   {
   STANDARD_API_IMPL (
      witGetDemandIntConShipVols, "", (
         partName,
         demandName,
         intConShipVols))
   }

//------------------------------------------------------------------------------

a7731 15
WIT_DECLSPEC witReturnCode STDCALL witSetDemandIntConShipVols (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int intConShipVols)
   {
   STANDARD_API_IMPL (
      witSetDemandIntConShipVols, "", (
         partName,
         demandName,
         intConShipVols))
   }
 
//------------------------------------------------------------------------------

d8315 38
a8352 1
WIT_DECLSPEC witReturnCode STDCALL witGetNewPipPggOrder (
d8354 3
a8356 1
      witBoolean * newPipPggOrder)
d8359 4
a8362 2
      witGetNewPipPggOrder, "", (
         newPipPggOrder))
d8367 1
a8367 1
WIT_DECLSPEC witReturnCode STDCALL witSetNewPipPggOrder (
d8369 1
a8369 1
      const witBoolean newPipPggOrder)
d8372 1
a8372 1
      witSetNewPipPggOrder, "", (
d8389 1
a8389 1
WIT_DECLSPEC witReturnCode STDCALL witSetNonMrSelSplit (
d8391 2
a8392 1
      const witBoolean nonMrSelSplit)
d8395 3
a8397 2
      witSetNonMrSelSplit, "", (
         nonMrSelSplit))
d8415 1
a8415 1
WIT_DECLSPEC witReturnCode STDCALL witSetPartBaSelSplit (
d8417 1
a8417 2
      const char * const partName,
      const witBoolean baSelSplit)
d8420 2
a8421 3
      witSetPartBaSelSplit, "", (
         partName,
         baSelSplit))
d8426 1
a8426 1
WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryMeSelSplit (
d8429 3
a8431 2
      const int bopEntryIndex,
      witBoolean * meSelSplit)
d8434 1
a8434 1
      witGetBopEntryMeSelSplit, "", (
d8436 3
a8438 2
         bopEntryIndex,
         meSelSplit))
d8443 2
a8444 5
WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryMeSelSplit (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const witBoolean meSelSplit)
d8447 17
a8463 4
      witSetBopEntryMeSelSplit, "", (
         operationName,
         bopEntryIndex,
         meSelSplit))
d8468 2
a8469 3
WIT_DECLSPEC witReturnCode STDCALL witGetSrSelSplit (
      WitRun * const theWitRun,
      witBoolean * srSelSplit)
d8472 1
a8472 2
      witGetSrSelSplit, "", (
         srSelSplit))
d8477 2
a8478 3
WIT_DECLSPEC witReturnCode STDCALL witSetSrSelSplit (
      WitRun * const theWitRun,
      const witBoolean srSelSplit)
d8481 1
a8481 2
      witSetSrSelSplit, "", (
         srSelSplit))
d8497 5
a8501 2
WIT_DECLSPEC witReturnCode STDCALL witNoDependantWitRunVeneersDecr (
      WitRun * const theWitRun)
d8504 4
a8507 1
      witNoDependantWitRunVeneersDecr, "", ())
d8512 18
a8529 2
WIT_DECLSPEC witReturnCode STDCALL witNoDependantWitRunVeneersIncr (
      WitRun * const theWitRun)
d8532 2
a8533 1
      witNoDependantWitRunVeneersIncr, "", ())
d8538 3
a8540 2
WIT_DECLSPEC witReturnCode STDCALL witExhaustMemory (
      WitRun * const theWitRun)
d8543 2
a8544 1
      witExhaustMemory, "", ())
d8549 4
a8552 2
WIT_DECLSPEC witReturnCode STDCALL witListUnissuedMsgs (
      WitRun * const theWitRun)
d8555 3
a8557 1
      witListUnissuedMsgs, "", ())
d8561 12
a8572 1
// Non-Standard API Function.
d8575 3
a8577 3
WIT_DECLSPEC witReturnCode STDCALL witMalloc (
      size_t size,
      void * * mem)
d8579 3
a8581 6
   * mem = malloc (size);

   return
      (* mem != NULL)?
         WitINFORMATIONAL_RC: 
         WitWARNING_RC;
d8586 6
a8591 2
WIT_DECLSPEC witReturnCode STDCALL witTestFatalMesg (
      WitRun * const theWitRun)
d8594 5
a8598 1
      witTestFatalMesg, "", ())
d8603 2
a8604 4
WIT_DECLSPEC witReturnCode STDCALL witExecStandAlone (
      WitRun * const theWitRun,
      int            argc,
      char *         argv[])
d8607 1
a8607 3
      witExecStandAlone, "", (
         argc,
         argv))
@


1.205
log
@NSTN residualVols.
@
text
@d2061 11
d5463 11
@


1.204
log
@App controlled opt implosion.
@
text
@d2105 11
d5496 11
@


1.203
log
@App controlled opt implosion.
@
text
@a36 2
//    argList      The list of arguments (in parentheses) to be passed to the
//                 inner API function.
d40 2
d52 2
a53 2
      argList,                                                                 \
      suffix)                                                                  \
d87 1
a87 1
      witAddBomEntry, (
d89 1
a89 2
         consumedPartName),
      "")
d100 1
a100 1
      witAddBopEntry, (
d102 1
a102 2
         producedPartName),
      "")
d113 1
a113 1
      witAddDemand, (
d115 1
a115 2
         demandName),
      "")
d125 2
a126 3
      witAddOperation, (
         operationName),
      "")
d137 1
a137 1
      witAddPart, (
d139 1
a139 2
         partCategory),
      "")
d149 2
a150 3
      witAddPartWithOperation, (
         partAndOperationName),
      "")
d162 1
a162 1
      witAddSubsBomEntry, (
d165 1
a165 2
         consumedPartName),
      "")
d174 1
a174 2
      witAdvanceObjItr, (),
      "")
d187 1
a187 1
      witAppendToPipSeq, (
d191 1
a191 2
         incShipVol),
      "")
d204 1
a204 1
      witAppendToPipSeq, (
d208 1
a208 2
         incShipVol),
      "Dbl")
d217 1
a217 2
      witBuildPip, (),
      "")
d226 1
a226 2
      witClearPegging, (),
      "")
d235 1
a235 2
      witClearPipSeq, (),
      "")
d251 2
a252 3
      witCopyData, (
         srcWitRun),
      "")
d306 2
a307 3
      witDisplayData, (
         fileName),
      "")
d322 1
a322 1
      witEqHeurAlloc, (
d328 1
a328 2
         incVolList),
      "")
d343 1
a343 1
      witEqHeurAlloc, (
d349 1
a349 2
         incVolList),
      "Dbl")
d365 1
a365 1
      witEqHeurAllocTwme, (
d372 1
a372 2
         asapMultiExecList),
      "")
d388 1
a388 1
      witEqHeurAllocTwme, (
d395 1
a395 2
         asapMultiExecList),
      "Dbl")
d404 1
a404 2
      witEvalObjectives, (),
      "")
d413 1
a413 2
      witFinishHeurAlloc, (),
      "")
d434 1
a434 2
      witGeneratePriorities, (),
      "")
d444 2
a445 3
      witGetAccAfterSoftLB, (
         accAfterSoftLB),
      "")
d455 2
a456 3
      witGetAccAfterOptImp, (
         accAfterOptImp),
      "")
d466 2
a467 3
      witGetAccelerated, (
         accelerated),
      "")
d477 2
a478 3
      witGetAppData, (
         appData),
      "")
d488 2
a489 3
      witGetAutoPriority, (
         autoPriority),
      "")
d501 1
a501 1
      witGetBomEntryAppData, (
d504 1
a504 2
         appData),
      "")
d516 1
a516 1
      witGetBomEntryConsRate, (
d519 1
a519 2
         consRate),
      "")
d531 1
a531 1
      witGetBomEntryConsRate, (
d534 1
a534 2
         consRate),
      "Dbl")
d546 1
a546 1
      witGetBomEntryEarliestPeriod, (
d549 1
a549 2
         earliestPeriod),
      "")
d561 1
a561 1
      witGetBomEntryNSubsBomEntries, (
d564 1
a564 2
         nSubsBomEntries),
      "")
d576 1
a576 1
      witGetBomEntryConsumedPart, (
d579 1
a579 2
         consumedPartName),
      "")
d591 1
a591 1
      witGetBomEntryExecPenalty, (
d594 1
a594 2
         execPenalty),
      "")
d606 1
a606 1
      witGetBomEntryExecPenalty, (
d609 1
a609 2
         execPenalty),
      "Dbl")
d621 1
a621 1
      witGetBomEntryFalloutRate, (
d624 1
a624 2
         falloutRate),
      "")
d636 1
a636 1
      witGetBomEntryFalloutRate, (
d639 1
a639 2
         falloutRate),
      "Dbl")
d651 1
a651 1
      witGetBomEntryImpactPeriod, (
d654 1
a654 2
         impactPeriod),
      "")
d666 1
a666 1
      witGetBomEntryLatestPeriod, (
d669 1
a669 2
         latestPeriod),
      "")
d681 1
a681 1
      witGetBomEntryMandEC, (
d684 1
a684 2
         mandEC),
      "")
d696 1
a696 1
      witGetBomEntryOffset, (
d699 1
a699 2
         offset),
      "")
d711 1
a711 1
      witGetBomEntryOffset, (
d714 1
a714 2
         offset),
      "Dbl")
d726 1
a726 1
      witGetBomEntryPropRtg, (
d729 1
a729 2
         propRtg),
      "")
d741 1
a741 1
      witGetBomEntryRoutingShare, (
d744 1
a744 2
         routingShare),
      "")
d756 1
a756 1
      witGetBomEntryRoutingShare, (
d759 1
a759 2
         routingShare),
      "Dbl")
d771 1
a771 1
      witGetBomEntrySelForDel, (
d774 1
a774 2
         selForDel),
      "")
d786 1
a786 1
      witGetBomEntrySingleSource, (
d789 1
a789 2
         singleSource),
      "")
d801 1
a801 1
      witGetBopEntryAppData, (
d804 1
a804 2
         appData),
      "")
d816 1
a816 1
      witGetBopEntryEarliestPeriod, (
d819 1
a819 2
         earliestPeriod),
      "")
d831 1
a831 1
      witGetBopEntryExpAllowed, (
d834 1
a834 2
         expAllowed),
      "")
d846 1
a846 1
      witGetBopEntryExpAversion, (
d849 1
a849 2
         expAversion),
      "")
d861 1
a861 1
      witGetBopEntryExpAversion, (
d864 1
a864 2
         expAversion),
      "Dbl")
d876 1
a876 1
      witGetBopEntryImpactPeriod, (
d879 1
a879 2
         impactPeriod),
      "")
d891 1
a891 1
      witGetBopEntryLatestPeriod, (
d894 1
a894 2
         latestPeriod),
      "")
d906 1
a906 1
      witGetBopEntryOffset, (
d909 1
a909 2
         offset),
      "")
d921 1
a921 1
      witGetBopEntryOffset, (
d924 1
a924 2
         offset),
      "Dbl")
d936 1
a936 1
      witGetBopEntryProductRate, (
d939 1
a939 2
         productRate),
      "")
d951 1
a951 1
      witGetBopEntryProductRate, (
d954 1
a954 2
         productRate),
      "Dbl")
d966 1
a966 1
      witGetBopEntryProducedPart, (
d969 1
a969 2
         producedPartName),
      "")
d981 1
a981 1
      witGetBopEntryRoutingShare, (
d984 1
a984 2
         routingShare),
      "")
d996 1
a996 1
      witGetBopEntryRoutingShare, (
d999 1
a999 2
         routingShare),
      "Dbl")
d1011 1
a1011 1
      witGetBopEntrySelForDel, (
d1014 1
a1014 2
         selForDel),
      "")
d1024 2
a1025 3
      witGetBuildWhenEmpty, (
         buildWhenEmpty),
      "")
d1035 2
a1036 3
      witGetCompPrices, (
         compPrices),
      "")
d1046 2
a1047 3
      witGetComputeCriticalList, (
         computeCriticalList),
      "")
d1059 1
a1059 1
      witGetCriticalList, (
d1062 1
a1062 2
         critPeriod),
      "")
d1074 1
a1074 1
      witGetDemandAppData, (
d1077 1
a1077 2
         appData),
      "")
d1094 1
a1094 1
      witGetDemandCoExecVolPip, (
d1102 1
a1102 2
         peggedVolList),
      "")
d1119 1
a1119 1
      witGetDemandCoExecVolPip, (
d1127 1
a1127 2
         peggedVolList),
      "Dbl")
d1143 1
a1143 1
      witGetDemandConsVolPip, (
d1150 1
a1150 2
         peggedVolList),
      "")
d1166 1
a1166 1
      witGetDemandConsVolPip, (
d1173 1
a1173 2
         peggedVolList),
      "Dbl")
d1187 1
a1187 1
      witGetDemandCumShipBounds, (
d1192 1
a1192 2
         hardUpper),
      "")
d1206 1
a1206 1
      witGetDemandCumShipBounds, (
d1211 1
a1211 2
         hardUpper),
      "Dbl")
d1223 1
a1223 1
      witGetDemandCumShipReward, (
d1226 1
a1226 2
         cumShipReward),
      "")
d1238 1
a1238 1
      witGetDemandCumShipReward, (
d1241 1
a1241 2
         cumShipReward),
      "Dbl")
d1253 1
a1253 1
      witGetDemandDemandVol, (
d1256 1
a1256 2
         demandVol),
      "")
d1268 1
a1268 1
      witGetDemandDemandVol, (
d1271 1
a1271 2
         demandVol),
      "Dbl")
d1287 1
a1287 1
      witGetDemandExecVolPegging, (
d1294 1
a1294 2
         peggedExecVolList),
      "")
d1310 1
a1310 1
      witGetDemandExecVolPegging, (
d1317 1
a1317 2
         peggedExecVolList),
      "Dbl")
d1333 1
a1333 1
      witGetDemandExecVolPip, (
d1340 1
a1340 2
         peggedExecVolList),
      "")
d1356 1
a1356 1
      witGetDemandExecVolPip, (
d1363 1
a1363 2
         peggedExecVolList),
      "Dbl")
d1375 1
a1375 1
      witGetDemandFocusHorizon, (
d1378 1
a1378 2
         focusHorizon),
      "")
d1390 1
a1390 1
      witGetDemandFssShipVol, (
d1393 1
a1393 2
         fssShipVol),
      "")
d1406 1
a1406 1
      witGetDemandFssShipVol, (
d1409 1
a1409 2
         fssShipVol),
      "Dbl")
d1421 1
a1421 1
      witGetDemandObj1CumShipReward, (
d1424 1
a1424 2
         obj1CumShipReward),
      "")
d1436 1
a1436 1
      witGetDemandObj1CumShipReward, (
d1439 1
a1439 2
         obj1CumShipReward),
      "Dbl")
d1451 1
a1451 1
      witGetDemandObj1ShipReward, (
d1454 1
a1454 2
         obj1ShipReward),
      "")
d1466 1
a1466 1
      witGetDemandObj1ShipReward, (
d1469 1
a1469 2
         obj1ShipReward),
      "Dbl")
d1481 1
a1481 1
      witGetDemandPriority, (
d1484 1
a1484 2
         priority),
      "")
d1500 1
a1500 1
      witGetDemandProdVolPip, (
d1507 1
a1507 2
         peggedVolList),
      "")
d1523 1
a1523 1
      witGetDemandProdVolPip, (
d1530 1
a1530 2
         peggedVolList),
      "Dbl")
d1542 1
a1542 1
      witGetDemandSelForDel, (
d1545 1
a1545 2
         shipLateLimit),
      "")
d1557 1
a1557 1
      witGetDemandShipLateUB, (
d1560 1
a1560 2
         shipLateUB),
      "")
d1572 1
a1572 1
      witGetDemandShipReward, (
d1575 1
a1575 2
         shipReward),
      "")
d1587 1
a1587 1
      witGetDemandShipReward, (
d1590 1
a1590 2
         shipReward),
      "Dbl")
d1602 1
a1602 1
      witGetDemandShipVol, (
d1605 1
a1605 2
         shipVol),
      "")
d1617 1
a1617 1
      witGetDemandShipVol, (
d1620 1
a1620 2
         shipVol),
      "Dbl")
d1636 1
a1636 1
      witGetDemandSideVolPip, (
d1643 1
a1643 2
         peggedVolList),
      "")
d1659 1
a1659 1
      witGetDemandSideVolPip, (
d1666 1
a1666 2
         peggedVolList),
      "Dbl")
d1684 1
a1684 1
      witGetDemandSubVolPegging, (
d1693 1
a1693 2
         peggedSubVolList),
      "")
d1711 1
a1711 1
      witGetDemandSubVolPegging, (
d1720 1
a1720 2
         peggedSubVolList),
      "Dbl")
d1738 1
a1738 1
      witGetDemandSubVolPip, (
d1747 1
a1747 2
         peggedSubVolList),
      "")
d1765 1
a1765 1
      witGetDemandSubVolPip, (
d1774 1
a1774 2
         peggedSubVolList),
      "Dbl")
d1790 1
a1790 1
      witGetDemandSupplyVolPip, (
d1797 1
a1797 2
         peggedVolList),
      "")
d1813 1
a1813 1
      witGetDemandSupplyVolPip, (
d1820 1
a1820 2
         peggedVolList),
      "Dbl")
d1830 2
a1831 3
      witGetEquitability, (
         equitablity),
      "")
d1841 2
a1842 3
      witGetExecEmptyBom, (
         execEmptyBom),
      "")
d1852 2
a1853 3
      witGetExpCutoff, (
         expCutoff),
      "")
d1863 2
a1864 3
      witGetExpCutoff, (
         expCutoff),
      "Dbl")
d1874 2
a1875 3
      witGetFeasible, (
         feasible),
      "")
d1887 1
a1887 1
      witGetFocusShortageVol, (
d1890 1
a1890 2
         shortageVolList),
      "")
d1902 1
a1902 1
      witGetFocusShortageVol, (
d1905 1
a1905 2
         shortageVolList),
      "Dbl")
d1915 2
a1916 3
      witGetForcedMultiEq, (
         forcedMultiEq),
      "")
d1926 2
a1927 3
      witGetHeurAllocActive, (
         heurAllocActive),
      "")
d1937 2
a1938 3
      witGetHighPrecisionWD, (
         highPrecisionWD),
      "")
d1948 2
a1949 3
      witGetIndependentOffsets, (
         independentOffsets),
      "")
d1959 2
a1960 3
      witGetLotSizeTol, (
         lotSizeTol),
      "")
d1970 2
a1971 3
      witGetLotSizeTol, (
         lotSizeTol),
      "Dbl")
d1981 2
a1982 3
      witGetMesgFile, (
         mesgFile),
      "")
d1992 2
a1993 3
      witGetMesgFileAccessMode, (
         mesgFileAccessMode),
      "")
d2003 2
a2004 3
      witGetMesgFileName, (
         mesgFileName),
      "")
d2015 1
a2015 1
      witGetMesgPrintNumber, (
d2017 1
a2017 2
         mesgPrintMunber),
      "")
d2028 1
a2028 1
      witGetMesgStopRunning, (
d2030 1
a2030 2
         mesgStopRunning),
      "")
d2041 1
a2041 1
      witGetMesgThrowErrorExc, (
d2043 1
a2043 2
         mesgThrowErrorExc),
      "")
d2054 1
a2054 1
      witGetMesgTimesPrint, (
d2056 1
a2056 2
         mesgTimesPrint),
      "")
d2066 2
a2067 3
      witGetMultiExec, (
         multiExec),
      "")
d2077 2
a2078 3
      witGetMultiRoute, (
         multiRoute),
      "")
d2088 2
a2089 3
      witGetMultiThread, (
         multiThread),
      "")
d2099 2
a2100 3
      witGetNPeriods, (
         nPeriods),
      "")
d2111 1
a2111 1
      witGetObjItrBomEntry, (
d2113 1
a2113 2
         bomEntryIndex),
      "")
d2124 1
a2124 1
      witGetObjItrBopEntry, (
d2126 1
a2126 2
         bopEntryIndex),
      "")
d2137 1
a2137 1
      witGetObjItrDemand, (
d2139 1
a2139 2
         demandName),
      "")
d2149 2
a2150 3
      witGetObjItrOperation, (
         operationName),
      "")
d2160 2
a2161 3
      witGetObjItrPart, (
         partName),
      "")
d2171 2
a2172 3
      witGetObjItrState, (
         objItrState),
      "")
d2184 1
a2184 1
      witGetObjItrSubsBomEntry, (
d2187 1
a2187 2
         subsBomEntryIndex),
      "")
d2198 1
a2198 1
      witGetObjValues, (
d2200 1
a2200 2
         boundsValue),
      "")
d2211 1
a2211 1
      witGetObjValues, (
d2213 1
a2213 2
         boundsValue),
      "Dbl")
d2224 1
a2224 1
      witGetOperationAppData, (
d2226 1
a2226 2
         appData),
      "")
d2239 1
a2239 1
      witGetOperationExecBounds, (
d2243 1
a2243 2
         hardUpper),
      "")
d2256 1
a2256 1
      witGetOperationExecBounds, (
d2260 1
a2260 2
         hardUpper),
      "Dbl")
d2271 1
a2271 1
      witGetOperationExecCost, (
d2273 1
a2273 2
         execCost),
      "")
d2284 1
a2284 1
      witGetOperationExecCost, (
d2286 1
a2286 2
         execCost),
      "Dbl")
d2297 1
a2297 1
      witGetOperationExecPenalty, (
d2299 1
a2299 2
         execPenalty),
      "")
d2310 1
a2310 1
      witGetOperationExecPenalty, (
d2312 1
a2312 2
         execPenalty),
      "Dbl")
d2323 1
a2323 1
      witGetOperationExecutable, (
d2325 1
a2325 2
         execVol),
      "")
d2336 1
a2336 1
      witGetOperationExecVol, (
d2338 1
a2338 2
         execVol),
      "")
d2349 1
a2349 1
      witGetOperationExecVol, (
d2351 1
a2351 2
         execVol),
      "Dbl")
d2362 1
a2362 1
      witGetOperationExists, (
d2364 1
a2364 2
         exist),
      "")
d2375 1
a2375 1
      witGetOperationFssExecVol, (
d2377 1
a2377 2
         fssExecVol),
      "")
d2388 1
a2388 1
      witGetOperationFssExecVol, (
d2390 1
a2390 2
         fssExecVol),
      "Dbl")
d2401 1
a2401 1
      witGetOperationIncLotSize, (
d2403 1
a2403 2
         incLotSize),
      "")
d2414 1
a2414 1
      witGetOperationIncLotSize, (
d2416 1
a2416 2
         incLotSize),
      "Dbl")
d2427 1
a2427 1
      witGetOperationIncLotSize2, (
d2429 1
a2429 2
         incLotSize2),
      "")
d2440 1
a2440 1
      witGetOperationIntConExecVols, (
d2442 1
a2442 2
         intConExecVols),
      "")
d2453 1
a2453 1
      witGetOperationIncLotSize2, (
d2455 1
a2455 2
         incLotSize2),
      "Dbl")
d2466 1
a2466 1
      witGetOperationLotSize2Thresh, (
d2468 1
a2468 2
         lotSize2Thresh),
      "")
d2479 1
a2479 1
      witGetOperationLotSize2Thresh, (
d2481 1
a2481 2
         lotSize2Thresh),
      "Dbl")
d2492 1
a2492 1
      witGetOperationMinLotSize, (
d2494 1
a2494 2
         minLotSize),
      "")
d2505 1
a2505 1
      witGetOperationMinLotSize, (
d2507 1
a2507 2
         minLotSize),
      "Dbl")
d2518 1
a2518 1
      witGetOperationMinLotSize2, (
d2520 1
a2520 2
         minLotSize2),
      "")
d2531 1
a2531 1
      witGetOperationMinLotSize2, (
d2533 1
a2533 2
         minLotSize2),
      "Dbl")
d2544 1
a2544 1
      witGetOperationMrpExecVol, (
d2546 1
a2546 2
         mrpExecVol),
      "")
d2557 1
a2557 1
      witGetOperationMrpExecVol, (
d2559 1
a2559 2
         mrpExecVol),
      "Dbl")
d2570 1
a2570 1
      witGetOperationNBomEntries, (
d2572 1
a2572 2
         nBomEntries),
      "")
d2583 1
a2583 1
      witGetOperationNBopEntries, (
d2585 1
a2585 2
         nBopEntries),
      "")
d2596 1
a2596 1
      witGetOperations, (
d2598 1
a2598 2
         operationList),
      "")
d2609 1
a2609 1
      witGetOperationSelForDel, (
d2611 1
a2611 2
         selForDel),
      "")
d2622 1
a2622 1
      witGetOperationTwoLevelLotSizes, (
d2624 1
a2624 2
         twoLevelLotSizes),
      "")
d2635 1
a2635 1
      witGetOperationYieldRate, (
d2637 1
a2637 2
         yieldRate),
      "")
d2648 1
a2648 1
      witGetOperationYieldRate, (
d2650 1
a2650 2
         yieldRate),
      "Dbl")
d2660 2
a2661 3
      witGetOptImpActive, (
         optImpActive),
      "")
d2671 2
a2672 3
      witGetOptInitMethod, (
         optInitMethod),
      "")
d2682 2
a2683 3
      witGetOutputPrecision, (
         outputPrecision),
      "")
d2693 2
a2694 3
      witGetPostprocessed, (
         postprocessed),
      "")
d2705 1
a2705 1
      witGetPartAppData, (
d2707 1
a2707 2
         appData),
      "")
d2719 1
a2719 1
      witGetPartBelowList, (
d2722 1
a2722 2
         partNameList),
      "")
d2733 1
a2733 1
      witGetPartBuildAheadUB, (
d2735 1
a2735 2
         buildAheadUB),
      "")
d2746 1
a2746 1
      witGetPartBuildAsap, (
d2748 1
a2748 2
         buildAsap),
      "")
d2759 1
a2759 1
      witGetPartBuildNstn, (
d2761 1
a2761 2
         buildNstn),
      "")
d2772 1
a2772 1
      witGetPartConsVol, (
d2774 1
a2774 2
         consVol),
      "")
d2785 1
a2785 1
      witGetPartConsVol, (
d2787 1
a2787 2
         consVol),
      "Dbl")
d2800 1
a2800 1
      witGetPartConsumingBomEntry, (
d2804 1
a2804 2
         bomEntryIndex),
      "")
d2818 1
a2818 1
      witGetPartConsumingSubsBomEntry, (
d2823 1
a2823 2
         subsBomEntryIndex),
      "")
d2835 1
a2835 1
      witGetPartDemands, (
d2838 1
a2838 2
         demandList),
      "")
d2849 1
a2849 1
      witGetPartCategory, (
d2851 1
a2851 2
         category),
      "")
d2862 1
a2862 1
      witGetPartExcessVol, (
d2864 1
a2864 2
         excessVol),
      "")
d2875 1
a2875 1
      witGetPartExcessVol, (
d2877 1
a2877 2
         excessVol),
      "Dbl")
d2888 1
a2888 1
      witGetPartExists, (
d2890 1
a2890 2
         exist),
      "")
d2901 1
a2901 1
      witGetPartFocusShortageVol, (
d2903 1
a2903 2
         shortageVol),
      "")
d2914 1
a2914 1
      witGetPartFocusShortageVol, (
d2916 1
a2916 2
         shortageVol),
      "Dbl")
d2927 1
a2927 1
      witGetPartMrpConsVol, (
d2929 1
a2929 2
         mrpConsVol),
      "")
d2940 1
a2940 1
      witGetPartMrpConsVol, (
d2942 1
a2942 2
         mrpConsVol),
      "Dbl")
d2953 1
a2953 1
      witGetPartMrpExcessVol, (
d2955 1
a2955 2
         mrpExcessVol),
      "")
d2966 1
a2966 1
      witGetPartMrpExcessVol, (
d2968 1
a2968 2
         mrpExcessVol),
      "Dbl")
d2979 1
a2979 1
      witGetPartMrpResidualVol, (
d2981 1
a2981 2
         mrpResidualVol),
      "")
d2992 1
a2992 1
      witGetPartMrpResidualVol, (
d2994 1
a2994 2
         mrpResidualVol),
      "Dbl")
d3005 1
a3005 1
      witGetPartNConsumingBomEntries, (
d3007 1
a3007 2
         nConsumingBomEntries),
      "")
d3018 1
a3018 1
      witGetPartNConsumingSubsBomEntries, (
d3020 1
a3020 2
         nConsumingSubsBomEntries),
      "")
d3031 1
a3031 1
      witGetPartNProducingBopEntries, (
d3033 1
a3033 2
         nProducingBopEntries),
      "")
d3044 1
a3044 1
      witGetPartProdVol, (
d3046 1
a3046 2
         prodVol),
      "")
d3057 1
a3057 1
      witGetPartProdVol, (
d3059 1
a3059 2
         prodVol),
      "Dbl")
d3072 1
a3072 1
      witGetPartProducingBopEntry, (
d3076 1
a3076 2
         bopEntryIndex),
      "")
d3087 1
a3087 1
      witGetPartPropRtg, (
d3089 1
a3089 2
         propRtg),
      "")
d3100 1
a3100 1
      witGetPartReqVol, (
d3102 1
a3102 2
         reqVol),
      "")
d3113 1
a3113 1
      witGetPartReqVol, (
d3115 1
a3115 2
         reqVol),
      "Dbl")
d3126 1
a3126 1
      witGetPartResidualVol, (
d3128 1
a3128 2
         residualVol),
      "")
d3139 1
a3139 1
      witGetPartResidualVol, (
d3141 1
a3141 2
         residualVol),
      "Dbl")
d3152 1
a3152 1
      witGetParts, (
d3154 1
a3154 2
         partList),
      "")
d3165 1
a3165 1
      witGetPartScrapCost, (
d3167 1
a3167 2
         scrapCost),
      "")
d3178 1
a3178 1
      witGetPartScrapCost, (
d3180 1
a3180 2
         scrapCost),
      "Dbl")
d3191 1
a3191 1
      witGetPartScrapVol, (
d3193 1
a3193 2
         scrapVol),
      "")
d3204 1
a3204 1
      witGetPartScrapVol, (
d3206 1
a3206 2
         scrapVol),
      "Dbl")
d3217 1
a3217 1
      witGetPartSelForDel, (
d3219 1
a3219 2
         selForDel),
      "")
d3230 1
a3230 1
      witGetPartShadowPrice, (
d3232 1
a3232 2
         shadowPrice),
      "")
d3243 1
a3243 1
      witGetPartShadowPrice, (
d3245 1
a3245 2
         shadowPrice),
      "Dbl")
d3256 1
a3256 1
      witGetPartSingleSource, (
d3258 1
a3258 2
         singleSource),
      "")
d3271 1
a3271 1
      witGetPartStockBounds, (
d3275 1
a3275 2
         hardUpper),
      "")
d3288 1
a3288 1
      witGetPartStockBounds, (
d3292 1
a3292 2
         hardUpper),
      "Dbl")
d3303 1
a3303 1
      witGetPartStockCost, (
d3305 1
a3305 2
         stockCost),
      "")
d3316 1
a3316 1
      witGetPartStockCost, (
d3318 1
a3318 2
         stockCost),
      "Dbl")
d3329 1
a3329 1
      witGetPartStockVol, (
d3331 1
a3331 2
         stockVol),
      "")
d3342 1
a3342 1
      witGetPartStockVol, (
d3344 1
a3344 2
         stockVol),
      "Dbl")
d3355 1
a3355 1
      witGetPartSupplyVol, (
d3357 1
a3357 2
         supplyVol),
      "")
d3368 1
a3368 1
      witGetPartSupplyVol, (
d3370 1
a3370 2
         supplyVol),
      "Dbl")
d3380 2
a3381 3
      witGetPenExec, (
         penExec),
      "")
d3391 2
a3392 3
      witGetPipExists, (
         pipExists),
      "")
d3406 1
a3406 1
      witGetPipSeq, (
d3411 1
a3411 2
         incShipVolList),
      "")
d3425 1
a3425 1
      witGetPipSeq, (
d3430 1
a3430 2
         incShipVolList),
      "Dbl")
d3440 2
a3441 3
      witGetPipSeqFromHeur, (
         pipSeqFromHeur),
      "")
d3451 2
a3452 3
      witGetPerfPegging, (
         perfPegging),
      "")
d3467 1
a3467 1
      witGetPgdCritList, (
d3473 1
a3473 2
         shipPerList),
      "")
d3483 2
a3484 3
      witGetPgdCritListMode, (
         pgdCritListMode),
      "")
d3494 2
a3495 3
      witGetPrefHighStockSLBs, (
         prefHighStockSLBs),
      "")
d3505 2
a3506 3
      witGetPreprocessed, (
         preprocessed),
      "")
d3516 2
a3517 3
      witGetRespectStockSLBs, (
         respectStockSLBs),
      "")
d3527 2
a3528 3
      witGetRoundReqVols, (
         roundReqVols),
      "")
d3538 2
a3539 3
      witGetSelSplit, (
         selSplit),
      "")
d3549 2
a3550 3
      witGetSkipFailures, (
         skipFailures),
      "")
d3560 2
a3561 3
      witGetSolverLogFileName, (
         solverLogFileName),
      "")
d3571 2
a3572 3
      witGetStockReallocation, (
         stockReallocation),
      "")
d3585 1
a3585 1
      witGetSubsBomEntryAppData, (
d3589 1
a3589 2
         appData),
      "")
d3602 1
a3602 1
      witGetSubsBomEntryConsRate, (
d3606 1
a3606 2
         consRate),
      "")
d3619 1
a3619 1
      witGetSubsBomEntryConsRate, (
d3623 1
a3623 2
         consRate),
      "Dbl")
d3636 1
a3636 1
      witGetSubsBomEntryConsumedPart, (
d3640 1
a3640 2
         consumedPart),
      "")
d3653 1
a3653 1
      witGetSubsBomEntryEarliestPeriod, (
d3657 1
a3657 2
         earliestPeriod),
      "")
d3670 1
a3670 1
      witGetSubsBomEntryExecPenalty, (
d3674 1
a3674 2
         execPenalty),
      "")
d3687 1
a3687 1
      witGetSubsBomEntryExecPenalty, (
d3691 1
a3691 2
         execPenalty),
      "Dbl")
d3704 1
a3704 1
      witGetSubsBomEntryExpAllowed, (
d3708 1
a3708 2
         expAllowed),
      "")
d3721 1
a3721 1
      witGetSubsBomEntryExpNetAversion, (
d3725 1
a3725 2
         expNetAversion),
      "")
d3738 1
a3738 1
      witGetSubsBomEntryExpNetAversion, (
d3742 1
a3742 2
         expNetAversion),
      "Dbl")
d3755 1
a3755 1
      witGetSubsBomEntryFalloutRate, (
d3759 1
a3759 2
         falloutRate),
      "")
d3772 1
a3772 1
      witGetSubsBomEntryFalloutRate, (
d3776 1
a3776 2
         falloutRate),
      "Dbl")
d3789 1
a3789 1
      witGetSubsBomEntryFssSubVol, (
d3793 1
a3793 2
         fssSubVol),
      "")
d3806 1
a3806 1
      witGetSubsBomEntryFssSubVol, (
d3810 1
a3810 2
         fssSubVol),
      "Dbl")
d3823 1
a3823 1
      witGetSubsBomEntryImpactPeriod, (
d3827 1
a3827 2
         impactPeriod),
      "")
d3840 1
a3840 1
      witGetSubsBomEntryIntConSubVols, (
d3844 1
a3844 2
         intConSubVols),
      "")
d3857 1
a3857 1
      witGetSubsBomEntryLatestPeriod, (
d3861 1
a3861 2
         latestPeriod),
      "")
d3874 1
a3874 1
      witGetSubsBomEntryMrpNetAllowed, (
d3878 1
a3878 2
         mrpNetAllowed),
      "")
d3891 1
a3891 1
      witGetSubsBomEntryMrpSubVol, (
d3895 1
a3895 2
         mrpSubVol),
      "")
d3908 1
a3908 1
      witGetSubsBomEntryMrpSubVol, (
d3912 1
a3912 2
         mrpSubVol),
      "Dbl")
d3925 1
a3925 1
      witGetSubsBomEntryNetAllowed, (
d3929 1
a3929 2
         netAllowed),
      "")
d3942 1
a3942 1
      witGetSubsBomEntryObj1SubCost, (
d3946 1
a3946 2
         obj1SubCost),
      "")
d3959 1
a3959 1
      witGetSubsBomEntryObj1SubCost, (
d3963 1
a3963 2
         obj1SubCost),
      "Dbl")
d3976 1
a3976 1
      witGetSubsBomEntryOffset, (
d3980 1
a3980 2
         offset),
      "")
d3993 1
a3993 1
      witGetSubsBomEntryOffset, (
d3997 1
a3997 2
         offset),
      "Dbl")
d4010 1
a4010 1
      witGetSubsBomEntryRoutingShare, (
d4014 1
a4014 2
         routingShare),
      "")
d4027 1
a4027 1
      witGetSubsBomEntryRoutingShare, (
d4031 1
a4031 2
         routingShare),
      "Dbl")
d4044 1
a4044 1
      witGetSubsBomEntrySelForDel, (
d4048 1
a4048 2
         selForDel),
      "")
d4061 1
a4061 1
      witGetSubsBomEntrySubCost, (
d4065 1
a4065 2
         subCost),
      "")
d4078 1
a4078 1
      witGetSubsBomEntrySubCost, (
d4082 1
a4082 2
         subCost),
      "Dbl")
d4095 1
a4095 1
      witGetSubsBomEntrySubVol, (
d4099 1
a4099 2
         subVol),
      "")
d4112 1
a4112 1
      witGetSubsBomEntrySubVol, (
d4116 1
a4116 2
         subVol),
      "Dbl")
d4126 2
a4127 3
      witGetTieBreakPropRt, (
         tieBreakPropRt),
      "")
d4137 2
a4138 3
      witGetTitle, (
         title),
      "")
d4148 2
a4149 3
      witGetTruncOffsets, (
         truncOffsets),
      "")
d4159 2
a4160 3
      witGetTwoWayMultiExec, (
         twoWayMultiExec),
      "")
d4170 2
a4171 3
      witGetUseFocusHorizons, (
         useFocusHorizons),
      "")
d4181 2
a4182 3
      witGetUserHeurStart, (
         userHeurStart),
      "")
d4192 2
a4193 3
      witGetWbounds, (
         wbounds),
      "")
d4203 2
a4204 3
      witGetWbounds, (
         wbounds),
      "Dbl")
d4214 2
a4215 3
      witGetWit34Compatible, (
         wit34Compatible),
      "")
d4224 1
a4224 2
      witHeurImplode, (),
      "")
d4238 1
a4238 1
      witIncHeurAlloc, (
d4243 1
a4243 2
         incVol),
      "")
d4257 1
a4257 1
      witIncHeurAlloc, (
d4262 1
a4262 2
         incVol),
      "Dbl")
d4277 1
a4277 1
      witIncHeurAllocTwme, (
d4283 1
a4283 2
         asapMultiExec),
      "")
d4298 1
a4298 1
      witIncHeurAllocTwme, (
d4304 1
a4304 2
         asapMultiExec),
      "Dbl")
d4313 1
a4313 2
      witInitialize, (),
      "")
d4322 1
a4322 2
      witMrp, (),
      "")
d4347 1
a4347 2
      witNewRun, (),
      "")
d4356 1
a4356 2
      witOptImplode, (),
      "")
d4365 1
a4365 2
      witOptPreprocess, (),
      "")
d4374 1
a4374 2
      witPreprocess, (),
      "")
d4383 1
a4383 2
      witPostprocess, (),
      "")
d4392 1
a4392 2
      witPurgeData, (),
      "")
d4402 2
a4403 3
      witReadData, (
         fileName),
      "")
d4412 1
a4412 2
      witResetObjItr, (),
      "")
d4422 2
a4423 3
      witSetAccAfterSoftLB, (
         accAfterSoftLB),
      "")
d4433 2
a4434 3
      witSetAccAfterOptImp, (
         accAfterOptImp),
      "")
d4444 2
a4445 3
      witSetAppData, (
         appData),
      "")
d4455 2
a4456 3
      witSetAutoPriority, (
         autoPriority),
      "")
d4468 1
a4468 1
      witSetBomEntryAppData, (
d4471 1
a4471 2
         appData),
      "")
d4483 1
a4483 1
      witSetBomEntryConsRate, (
d4486 1
a4486 2
         consRate),
      "")
d4498 1
a4498 1
      witSetBomEntryConsRate, (
d4501 1
a4501 2
         consRate),
      "Dbl")
d4513 1
a4513 1
      witSetBomEntryEarliestPeriod, (
d4516 1
a4516 2
         earliestPeriod),
      "")
d4528 1
a4528 1
      witSetBomEntryExecPenalty, (
d4531 1
a4531 2
         execPenalty),
      "")
d4543 1
a4543 1
      witSetBomEntryExecPenalty, (
d4546 1
a4546 2
         execPenalty),
      "Dbl")
d4558 1
a4558 1
      witSetBomEntryFalloutRate, (
d4561 1
a4561 2
         falloutRate),
      "")
d4573 1
a4573 1
      witSetBomEntryFalloutRate, (
d4576 1
a4576 2
         falloutRate),
      "Dbl")
d4588 1
a4588 1
      witSetBomEntryLatestPeriod, (
d4591 1
a4591 2
         latestPeriod),
      "")
d4603 1
a4603 1
      witSetBomEntryMandEC, (
d4606 1
a4606 2
         mandEC),
      "")
d4618 1
a4618 1
      witSetBomEntryOffset, (
d4621 1
a4621 2
         offset),
      "")
d4633 1
a4633 1
      witSetBomEntryOffset, (
d4636 1
a4636 2
         offset),
      "Dbl")
d4648 1
a4648 1
      witSetBomEntryPropRtg, (
d4651 1
a4651 2
         propRtg),
      "")
d4663 1
a4663 1
      witSetBomEntryRoutingShare, (
d4666 1
a4666 2
         routingShare),
      "")
d4678 1
a4678 1
      witSetBomEntryRoutingShare, (
d4681 1
a4681 2
         routingShare),
      "Dbl")
d4693 1
a4693 1
      witSetBomEntrySelForDel, (
d4696 1
a4696 2
         selForDel),
      "")
d4708 1
a4708 1
      witSetBomEntrySingleSource, (
d4711 1
a4711 2
         singleSource),
      "")
d4723 1
a4723 1
      witSetBopEntryAppData, (
d4726 1
a4726 2
         appData),
      "")
d4738 1
a4738 1
      witSetBopEntryEarliestPeriod, (
d4741 1
a4741 2
         earliestPeriod),
      "")
d4753 1
a4753 1
      witSetBopEntryExpAllowed, (
d4756 1
a4756 2
         expAllowed),
      "")
d4768 1
a4768 1
      witSetBopEntryExpAversion, (
d4771 1
a4771 2
         expAversion),
      "")
d4783 1
a4783 1
      witSetBopEntryExpAversion, (
d4786 1
a4786 2
         expAversion),
      "Dbl")
d4798 1
a4798 1
      witSetBopEntryLatestPeriod, (
d4801 1
a4801 2
         latestPeriod),
      "")
d4813 1
a4813 1
      witSetBopEntryOffset, (
d4816 1
a4816 2
         offset),
      "")
d4828 1
a4828 1
      witSetBopEntryOffset, (
d4831 1
a4831 2
         offset),
      "Dbl")
d4843 1
a4843 1
      witSetBopEntryProductRate, (
d4846 1
a4846 2
         productRate),
      "")
d4858 1
a4858 1
      witSetBopEntryProductRate, (
d4861 1
a4861 2
         productRate),
      "Dbl")
d4873 1
a4873 1
      witSetBopEntryRoutingShare, (
d4876 1
a4876 2
         routingShare),
      "")
d4888 1
a4888 1
      witSetBopEntryRoutingShare, (
d4891 1
a4891 2
         routingShare),
      "Dbl")
d4903 1
a4903 1
      witSetBopEntrySelForDel, (
d4906 1
a4906 2
         selForDel),
      "")
d4916 2
a4917 3
      witSetCompPrices, (
         compPrices),
      "")
d4927 2
a4928 3
      witSetComputeCriticalList, (
         computeCriticalList),
      "")
d4940 1
a4940 1
      witSetDemandAppData, (
d4943 1
a4943 2
         appData),
      "")
d4957 1
a4957 1
      witSetDemandCumShipBounds, (
d4962 1
a4962 2
         hardUpper),
      "")
d4976 1
a4976 1
      witSetDemandCumShipBounds, (
d4981 1
a4981 2
         hardUpper),
      "Dbl")
d4993 1
a4993 1
      witSetDemandCumShipReward, (
d4996 1
a4996 2
         cumShipReward),
      "")
d5008 1
a5008 1
      witSetDemandCumShipReward, (
d5011 1
a5011 2
         cumShipReward),
      "Dbl")
d5023 1
a5023 1
      witSetDemandDemandVol, (
d5026 1
a5026 2
         demandVol),
      "")
d5038 1
a5038 1
      witSetDemandDemandVol, (
d5041 1
a5041 2
         demandVol),
      "Dbl")
d5053 1
a5053 1
      witSetDemandFocusHorizon, (
d5056 1
a5056 2
         focusHorizon),
      "")
d5068 1
a5068 1
      witSetDemandFssShipVol, (
d5071 1
a5071 2
         fssShipVol),
      "")
d5083 1
a5083 1
      witSetDemandFssShipVol, (
d5086 1
a5086 2
         fssShipVol),
      "Dbl")
d5098 1
a5098 1
      witSetDemandObj1CumShipReward, (
d5101 1
a5101 2
         obj1CumShipReward),
      "")
d5113 1
a5113 1
      witSetDemandObj1CumShipReward, (
d5116 1
a5116 2
         obj1CumShipReward),
      "Dbl")
d5128 1
a5128 1
      witSetDemandObj1ShipReward, (
d5131 1
a5131 2
         obj1ShipReward),
      "")
d5143 1
a5143 1
      witSetDemandObj1ShipReward, (
d5146 1
a5146 2
         obj1ShipReward),
      "Dbl")
d5158 1
a5158 1
      witSetDemandPriority, (
d5161 1
a5161 2
         priority),
      "")
d5173 1
a5173 1
      witSetDemandSelForDel, (
d5176 1
a5176 2
         selForDel),
      "")
d5188 1
a5188 1
      witSetDemandShipLateUB, (
d5191 1
a5191 2
         shipLateUB),
      "")
d5203 1
a5203 1
      witSetDemandShipReward, (
d5206 1
a5206 2
         shipReward),
      "")
d5218 1
a5218 1
      witSetDemandShipReward, (
d5221 1
a5221 2
         shipReward),
      "Dbl")
d5233 1
a5233 1
      witSetDemandShipVol, (
d5236 1
a5236 2
         shipVol),
      "")
d5248 1
a5248 1
      witSetDemandShipVol, (
d5251 1
a5251 2
         shipVol),
      "Dbl")
d5261 2
a5262 3
      witSetEquitability, (
         equitablity),
      "")
d5272 2
a5273 3
      witSetExecEmptyBom, (
         execEmptyBom),
      "")
d5283 2
a5284 3
      witSetExpCutoff, (
         expCutoff),
      "")
d5294 2
a5295 3
      witSetExpCutoff, (
         expCutoff),
      "Dbl")
d5305 2
a5306 3
      witSetForcedMultiEq, (
         forcedMultiEq),
      "")
d5316 2
a5317 3
      witSetHighPrecisionWD, (
         highPrecisionWD),
      "")
d5327 2
a5328 3
      witSetIndependentOffsets, (
         independentOffsets),
      "")
d5338 2
a5339 3
      witSetLotSizeTol, (
         lotSizeTol),
      "")
d5349 2
a5350 3
      witSetLotSizeTol, (
         lotSizeTol),
      "Dbl")
d5361 1
a5361 1
      witSetMesgFileAccessMode, (
d5363 1
a5363 2
         mesgFileAccessMode),
      "")
d5374 1
a5374 1
      witSetMesgFileName, (
d5376 1
a5376 2
         mesgFileName),
      "")
d5388 1
a5388 1
      witSetMesgPrintNumber, (
d5391 1
a5391 2
         mesgPrintMunber),
      "")
d5403 1
a5403 1
      witSetMesgStopRunning, (
d5406 1
a5406 2
         mesgStopRunning),
      "")
d5418 1
a5418 1
      witSetMesgThrowErrorExc, (
d5421 1
a5421 2
         mesgThrowErrorExc),
      "")
d5433 1
a5433 1
      witSetMesgTimesPrint, (
d5436 1
a5436 2
         mesgTimesPrint),
      "")
d5446 2
a5447 3
      witSetMultiExec, (
         multiExec),
      "")
d5457 2
a5458 3
      witSetMultiRoute, (
         multiRoute),
      "")
d5468 2
a5469 3
      witSetMultiThread, (
         multiThread),
      "")
d5479 2
a5480 3
      witSetNPeriods, (
         nPeriods),
      "")
d5491 1
a5491 1
      witSetOperationAppData, (
d5493 1
a5493 2
         appData),
      "")
d5506 1
a5506 1
      witSetOperationExecBounds, (
d5510 1
a5510 2
         hardUpper),
      "")
d5523 1
a5523 1
      witSetOperationExecBounds, (
d5527 1
a5527 2
         hardUpper),
      "Dbl")
d5538 1
a5538 1
      witSetOperationExecCost, (
d5540 1
a5540 2
         execCost),
      "")
d5551 1
a5551 1
      witSetOperationExecCost, (
d5553 1
a5553 2
         execCost),
      "Dbl")
d5564 1
a5564 1
      witSetOperationExecPenalty, (
d5566 1
a5566 2
         execPenalty),
      "")
d5577 1
a5577 1
      witSetOperationExecPenalty, (
d5579 1
a5579 2
         execPenalty),
      "Dbl")
d5590 1
a5590 1
      witSetOperationExecVol, (
d5592 1
a5592 2
         execVol),
      "")
d5603 1
a5603 1
      witSetOperationExecVol, (
d5605 1
a5605 2
         execVol),
      "Dbl")
d5616 1
a5616 1
      witSetOperationIncLotSize, (
d5618 1
a5618 2
         incLotSize),
      "")
d5629 1
a5629 1
      witSetOperationIncLotSize, (
d5631 1
a5631 2
         incLotSize),
      "Dbl")
d5642 1
a5642 1
      witSetOperationIncLotSize2, (
d5644 1
a5644 2
         incLotSize2),
      "")
d5655 1
a5655 1
      witSetOperationIncLotSize2, (
d5657 1
a5657 2
         incLotSize2),
      "Dbl")
d5668 1
a5668 1
      witSetOperationIntConExecVols, (
d5670 1
a5670 2
         intConExecVols),
      "")
d5681 1
a5681 1
      witSetOperationLotSize2Thresh, (
d5683 1
a5683 2
         lotSize2Thresh),
      "")
d5694 1
a5694 1
      witSetOperationLotSize2Thresh, (
d5696 1
a5696 2
         lotSize2Thresh),
      "Dbl")
d5707 1
a5707 1
      witSetOperationMinLotSize, (
d5709 1
a5709 2
         minLotSize),
      "")
d5720 1
a5720 1
      witSetOperationMinLotSize, (
d5722 1
a5722 2
         minLotSize),
      "Dbl")
d5733 1
a5733 1
      witSetOperationMinLotSize2, (
d5735 1
a5735 2
         minLotSize2),
      "")
d5746 1
a5746 1
      witSetOperationMinLotSize2, (
d5748 1
a5748 2
         minLotSize2),
      "Dbl")
d5759 1
a5759 1
      witSetOperationSelForDel, (
d5761 1
a5761 2
         selForDel),
      "")
d5772 1
a5772 1
      witSetOperationTwoLevelLotSizes, (
d5774 1
a5774 2
         twoLevelLotSizes),
      "")
d5785 1
a5785 1
      witSetOperationYieldRate, (
d5787 1
a5787 2
         yieldRate),
      "")
d5798 1
a5798 1
      witSetOperationYieldRate, (
d5800 1
a5800 2
         yieldRate),
      "Dbl")
d5810 2
a5811 3
      witSetOptInitMethod, (
         optInitMethod),
      "")
d5821 2
a5822 3
      witSetOutputPrecision, (
         outputPrecision),
      "")
d5833 1
a5833 1
      witSetPartAppData, (
d5835 1
a5835 2
         appData),
      "")
d5846 1
a5846 1
      witSetPartBuildAheadUB, (
d5848 1
a5848 2
         buildAheadUB),
      "")
d5859 1
a5859 1
      witSetPartBuildAsap, (
d5861 1
a5861 2
         buildAsap),
      "")
d5872 1
a5872 1
      witSetPartBuildNstn, (
d5874 1
a5874 2
         buildNstn),
      "")
d5885 1
a5885 1
      witSetPartPropRtg, (
d5887 1
a5887 2
         propRtg),
      "")
d5898 1
a5898 1
      witSetPartScrapCost, (
d5900 1
a5900 2
         scrapCost),
      "")
d5911 1
a5911 1
      witSetPartScrapCost, (
d5914 1
a5914 2
         ),
      "Dbl")
d5925 1
a5925 1
      witSetPartSelForDel, (
d5927 1
a5927 2
         selForDel),
      "")
d5938 1
a5938 1
      witSetPartSingleSource, (
d5940 1
a5940 2
         singleSource),
      "")
d5953 1
a5953 1
      witSetPartStockBounds, (
d5957 1
a5957 2
         hardUpper),
      "")
d5970 1
a5970 1
      witSetPartStockBounds, (
d5974 1
a5974 2
         hardUpper),
      "Dbl")
d5985 1
a5985 1
      witSetPartStockCost, (
d5987 1
a5987 2
         stockCost),
      "")
d5998 1
a5998 1
      witSetPartStockCost, (
d6000 1
a6000 2
         stockCost),
      "Dbl")
d6011 1
a6011 1
      witSetPartSupplyVol, (
d6013 1
a6013 2
         supplyVol),
      "")
d6024 1
a6024 1
      witSetPartSupplyVol, (
d6026 1
a6026 2
         supplyVol),
      "Dbl")
d6036 2
a6037 3
      witSetPenExec, (
         penExec),
      "")
d6047 2
a6048 3
      witSetPerfPegging, (
         perfPegging),
      "")
d6058 2
a6059 3
      witSetPgdCritListMode, (
         pgdCritListMode),
      "")
d6069 2
a6070 3
      witSetPipSeqFromHeur, (
         pipSeqFromHeur),
      "")
d6080 2
a6081 3
      witSetPrefHighStockSLBs, (
         prefHighStockSLBs),
      "")
d6091 2
a6092 3
      witSetRespectStockSLBs, (
         respectStockSLBs),
      "")
d6102 2
a6103 3
      witSetRoundReqVols, (
         roundReqVols),
      "")
d6113 2
a6114 3
      witSetSelSplit, (
         selSplit),
      "")
d6124 2
a6125 3
      witSetSkipFailures, (
         skipFailures),
      "")
d6135 2
a6136 3
      witSetSolverLogFileName, (
         solverLogFileName),
      "")
d6146 2
a6147 3
      witSetStockReallocation, (
         stockReallocation),
      "")
d6160 1
a6160 1
      witSetSubsBomEntryAppData, (
d6164 1
a6164 2
         appData),
      "")
d6177 1
a6177 1
      witSetSubsBomEntryConsRate, (
d6181 1
a6181 2
         consRate),
      "")
d6194 1
a6194 1
      witSetSubsBomEntryConsRate, (
d6198 1
a6198 2
         consRate),
      "Dbl")
d6211 1
a6211 1
      witSetSubsBomEntryEarliestPeriod, (
d6215 1
a6215 2
         earliestPeriod),
      "")
d6228 1
a6228 1
      witSetSubsBomEntryExecPenalty, (
d6232 1
a6232 2
         execPenalty),
      "")
d6245 1
a6245 1
      witSetSubsBomEntryExecPenalty, (
d6249 1
a6249 2
         execPenalty),
      "Dbl")
d6262 1
a6262 1
      witSetSubsBomEntryExpAllowed, (
d6266 1
a6266 2
         expAllowed),
      "")
d6279 1
a6279 1
      witSetSubsBomEntryExpNetAversion, (
d6283 1
a6283 2
         expNetAversion),
      "")
d6296 1
a6296 1
      witSetSubsBomEntryExpNetAversion, (
d6300 1
a6300 2
         expNetAversion),
      "Dbl")
d6313 1
a6313 1
      witSetSubsBomEntryFalloutRate, (
d6317 1
a6317 2
         falloutRate),
      "")
d6330 1
a6330 1
      witSetSubsBomEntryFalloutRate, (
d6334 1
a6334 2
         falloutRate),
      "Dbl")
d6347 1
a6347 1
      witSetSubsBomEntryIntConSubVols, (
d6351 1
a6351 2
         intConSubVols),
      "")
d6364 1
a6364 1
      witSetSubsBomEntryLatestPeriod, (
d6368 1
a6368 2
         latestPeriod),
      "")
d6381 1
a6381 1
      witSetSubsBomEntryMrpNetAllowed, (
d6385 1
a6385 2
         mrpNetAllowed),
      "")
d6398 1
a6398 1
      witSetSubsBomEntryNetAllowed, (
d6402 1
a6402 2
         netAllowed),
      "")
d6415 1
a6415 1
      witSetSubsBomEntryObj1SubCost, (
d6419 1
a6419 2
         obj1SubCost),
      "")
d6432 1
a6432 1
      witSetSubsBomEntryObj1SubCost, (
d6436 1
a6436 2
         obj1SubCost),
      "Dbl")
d6449 1
a6449 1
      witSetSubsBomEntryOffset, (
d6453 1
a6453 2
         offset),
      "")
d6466 1
a6466 1
      witSetSubsBomEntryOffset, (
d6470 1
a6470 2
         offset),
      "Dbl")
d6483 1
a6483 1
      witSetSubsBomEntryRoutingShare, (
d6487 1
a6487 2
         routingShare),
      "")
d6500 1
a6500 1
      witSetSubsBomEntryRoutingShare, (
d6504 1
a6504 2
         routingShare),
      "Dbl")
d6517 1
a6517 1
      witSetSubsBomEntrySelForDel, (
d6521 1
a6521 2
         selForDel),
      "")
d6534 1
a6534 1
      witSetSubsBomEntrySubCost, (
d6538 1
a6538 2
         subCost),
      "")
d6551 1
a6551 1
      witSetSubsBomEntrySubCost, (
d6555 1
a6555 2
         subCost),
      "Dbl")
d6568 1
a6568 1
      witSetSubsBomEntrySubVol, (
d6572 1
a6572 2
         subVol),
      "")
d6585 1
a6585 1
      witSetSubsBomEntrySubVol, (
d6589 1
a6589 2
         subVol),
      "Dbl")
d6599 2
a6600 3
      witSetTieBreakPropRt, (
         tieBreakPropRt),
      "")
d6610 2
a6611 3
      witSetTitle, (
         title),
      "")
d6621 2
a6622 3
      witSetTruncOffsets, (
         truncOffsets),
      "")
d6632 2
a6633 3
      witSetTwoWayMultiExec, (
         twoWayMultiExec),
      "")
d6643 2
a6644 3
      witSetUseFocusHorizons, (
         useFocusHorizons),
      "")
d6654 2
a6655 3
      witSetUserHeurStart, (
         userHeurStart),
      "")
d6665 2
a6666 3
      witSetWbounds, (
         wbounds),
      "")
d6676 2
a6677 3
      witSetWbounds, (
         wbounds),
      "Dbl")
d6687 2
a6688 3
      witSetWit34Compatible, (
         wit34Compatible),
      "")
d6697 1
a6697 2
      witShutDownHeurAlloc, (),
      "")
d6706 1
a6706 2
      witStartHeurAlloc, (),
      "")
d6718 1
a6718 1
      witWriteCriticalList, (
d6721 1
a6721 2
         maxListLen),
      "")
d6731 2
a6732 3
      witWriteData, (
         fileName),
      "")
d6743 1
a6743 1
      witWriteExecSched, (
d6745 1
a6745 2
         fileFormat),
      "")
d6756 1
a6756 1
      witWriteReqSched, (
d6758 1
a6758 2
         fileFormat),
      "")
d6769 1
a6769 1
      witWriteShipSched, (
d6771 1
a6771 2
         fileFormat),
      "")
d6787 1
a6787 1
      witGetBomEntryFallout, (
d6790 1
a6790 2
         fallout),
      "")
d6802 1
a6802 1
      witGetBomEntryPropRouting, (
d6805 1
a6805 2
         propRouting),
      "")
d6817 1
a6817 1
      witGetBomEntryUsageRate, (
d6820 1
a6820 2
         usageRate),
      "")
d6832 1
a6832 1
      witGetBomEntryUsageTime, (
d6835 1
a6835 2
         time),
      "")
d6847 1
a6847 1
      witGetBopEntryByProduct, (
d6850 1
a6850 2
         byProduct),
      "")
d6862 1
a6862 1
      witGetBopEntryProdRate, (
d6865 1
a6865 2
         prodRate),
      "")
d6875 2
a6876 3
      witGetCapCost, (
         capCost),
      "")
d6886 2
a6887 3
      witGetCapCost, (
         capCost),
      "Dbl")
d6899 1
a6899 1
      witGetDemandBuildAheadLimit, (
d6902 1
a6902 2
         buildAheadLimit),
      "")
d6914 1
a6914 1
      witGetDemandBuildAheadUB, (
d6917 1
a6917 2
         buildAheadUB),
      "")
d6929 1
a6929 1
      witGetDemandGrossRev, (
d6932 1
a6932 2
         grossRev),
      "")
d6944 1
a6944 1
      witGetDemandGrossRev, (
d6947 1
a6947 2
         grossRev),
      "Dbl")
d6959 1
a6959 1
      witGetDemandIntConShipVols, (
d6962 1
a6962 2
         intConShipVols),
      "")
d6974 1
a6974 1
      witGetDemandPrefBuildAhead, (
d6977 1
a6977 2
         prefBuildAhead),
      "")
d6989 1
a6989 1
      witGetDemandShipLateLimit, (
d6992 1
a6992 2
         shipLateLimit),
      "")
d7002 2
a7003 3
      witGetHashTableSize, (
         hashTableSize),
      "")
d7013 2
a7014 3
      witGetInvCost, (
         invCost),
      "")
d7024 2
a7025 3
      witGetInvCost, (
         invCost),
      "Dbl")
d7035 2
a7036 3
      witGetLocalBuildAhead, (
         localBuildAhead),
      "")
d7046 2
a7047 3
      witGetLocalMultiExec, (
         localMultiExec),
      "")
d7060 1
a7060 1
      witGetObj2Values, (
d7064 1
a7064 2
         subsValue),
      "")
d7077 1
a7077 1
      witGetObj2Values, (
d7081 1
a7081 2
         subsValue),
      "Dbl")
d7091 2
a7092 3
      witGetObj2Winv, (
         obj2Winv),
      "")
d7102 2
a7103 3
      witGetObj2Winv, (
         obj2Winv),
      "Dbl")
d7113 2
a7114 3
      witGetObj2Wrev, (
         obj2Wrev),
      "")
d7124 2
a7125 3
      witGetObj2Wrev, (
         obj2Wrev),
      "Dbl")
d7135 2
a7136 3
      witGetObj2Wserv, (
         obj2Wserv),
      "")
d7146 2
a7147 3
      witGetObj2Wserv, (
         obj2Wserv),
      "Dbl")
d7157 2
a7158 3
      witGetObj2Wsub, (
         obj2Wsub),
      "")
d7168 2
a7169 3
      witGetObj2Wsub, (
         obj2Wsub),
      "Dbl")
d7179 2
a7180 3
      witGetObjChoice, (
         objChoice),
      "")
d7191 1
a7191 1
      witGetOperationObj1ExecCost, (
d7193 1
a7193 2
         obj1ExecCost),
      "")
d7204 1
a7204 1
      witGetOperationObj1ExecCost, (
d7206 1
a7206 2
         obj1ExecCost),
      "Dbl")
d7217 1
a7217 1
      witGetOperationObj2AuxCost, (
d7219 1
a7219 2
         obj2AuxCost),
      "")
d7230 1
a7230 1
      witGetOperationObj2AuxCost, (
d7232 1
a7232 2
         obj2AuxCost),
      "Dbl")
d7243 1
a7243 1
      witGetOperationYield, (
d7245 1
a7245 2
         yield),
      "")
d7256 1
a7256 1
      witGetPartBuildAheadLimit, (
d7258 1
a7258 2
         buildAheadLimit),
      "")
d7269 1
a7269 1
      witGetPartCycleTime, (
d7271 1
a7271 2
         cycleTime),
      "")
d7282 1
a7282 1
      witGetPartIncLotSize, (
d7284 1
a7284 2
         incLotSize),
      "")
d7295 1
a7295 1
      witGetPartMinLotSize, (
d7297 1
a7297 2
         minLotSize),
      "")
d7308 1
a7308 1
      witGetPartMrpProdVol, (
d7310 1
a7310 2
         mrpProdVol),
      "")
d7321 1
a7321 1
      witGetPartNBomEntries, (
d7323 1
a7323 2
         nBomEntries),
      "")
d7334 1
a7334 1
      witGetPartObj1ProdCost, (
d7336 1
a7336 2
         obj1ProdCost),
      "")
d7347 1
a7347 1
      witGetPartObj1ScrapCost, (
d7349 1
a7349 2
         obj1ScrapCost),
      "")
d7360 1
a7360 1
      witGetPartObj1ScrapCost, (
d7362 1
a7362 2
         obj1ScrapCost),
      "Dbl")
d7373 1
a7373 1
      witGetPartObj1StockCost, (
d7375 1
a7375 2
         obj1StockCost),
      "")
d7386 1
a7386 1
      witGetPartObj1StockCost, (
d7388 1
a7388 2
         obj1StockCost),
      "Dbl")
d7401 1
a7401 1
      witGetPartProdBounds, (
d7405 1
a7405 2
         hardUpper),
      "")
d7416 1
a7416 1
      witGetPartPropRouting, (
d7418 1
a7418 2
         propRouting),
      "")
d7429 1
a7429 1
      witGetPartUnitCost, (
d7431 1
a7431 2
         unitCost),
      "")
d7442 1
a7442 1
      witGetPartUnitCost, (
d7444 1
a7444 2
         unitCost),
      "Dbl")
d7455 1
a7455 1
      witGetPartYield, (
d7457 1
a7457 2
         yield),
      "")
d7467 2
a7468 3
      witGetPeriodsPerYear, (
         periodsPerYear),
      "")
d7478 2
a7479 3
      witGetPeriodsPerYear, (
         periodsPerYear),
      "Dbl")
d7489 2
a7490 3
      witGetStockRealloc, (
         stockRealloc),
      "")
d7503 1
a7503 1
      witGetSubsBomEntryFallout, (
d7507 1
a7507 2
         fallout),
      "")
d7520 1
a7520 1
      witGetSubsBomEntryObj2SubPenalty, (
d7524 1
a7524 2
         obj2SubPenalty),
      "")
d7537 1
a7537 1
      witGetSubsBomEntryObj2SubPenalty, (
d7541 1
a7541 2
         obj2SubPenalty),
      "Dbl")
d7554 1
a7554 1
      witGetSubsBomEntryProdVol, (
d7558 1
a7558 2
         prodVol),
      "")
d7571 1
a7571 1
      witGetSubsBomEntryUsageRate, (
d7575 1
a7575 2
         usageRate),
      "")
d7587 1
a7587 1
      witSetBomEntryFallout, (
d7590 1
a7590 2
         fallout),
      "")
d7602 1
a7602 1
      witSetBomEntryPropRouting, (
d7605 1
a7605 2
         propRouting),
      "")
d7617 1
a7617 1
      witSetBomEntryUsageRate, (
d7620 1
a7620 2
         usageRate),
      "")
d7632 1
a7632 1
      witSetBomEntryUsageTime, (
d7635 1
a7635 2
         time),
      "")
d7647 1
a7647 1
      witSetBopEntryByProduct, (
d7650 1
a7650 2
         byProduct),
      "")
d7662 1
a7662 1
      witSetBopEntryProdRate, (
d7665 1
a7665 2
         prodRate),
      "")
d7675 2
a7676 3
      witSetBuildWhenEmpty, (
         buildWhenEmpty),
      "")
d7686 2
a7687 3
      witSetCapCost, (
         capCost),
      "")
d7697 2
a7698 3
      witSetCapCost, (
         capCost),
      "Dbl")
d7710 1
a7710 1
      witSetDemandBuildAheadLimit, (
d7713 1
a7713 2
         buildAheadLimit),
      "")
d7725 1
a7725 1
      witSetDemandBuildAheadUB, (
d7728 1
a7728 2
         buildAheadUB),
      "")
d7740 1
a7740 1
      witSetDemandGrossRev, (
d7743 1
a7743 2
         grossRev),
      "")
d7755 1
a7755 1
      witSetDemandGrossRev, (
d7758 1
a7758 2
         grossRev),
      "Dbl")
d7770 1
a7770 1
      witSetDemandIntConShipVols, (
d7773 1
a7773 2
         intConShipVols),
      "")
d7785 1
a7785 1
      witSetDemandPrefBuildAhead, (
d7788 1
a7788 2
         prefBuildAhead),
      "")
d7800 1
a7800 1
      witSetDemandShipLateLimit, (
d7803 1
a7803 2
         shipLateLimit),
      "")
d7813 2
a7814 3
      witSetHashTableSize, (
         hashTableSize),
      "")
d7824 2
a7825 3
      witSetInvCost, (
         invCost),
      "")
d7835 2
a7836 3
      witSetInvCost, (
         invCost),
      "Dbl")
d7846 2
a7847 3
      witSetLocalBuildAhead, (
         localBuildAhead),
      "")
d7857 2
a7858 3
      witSetLocalMultiExec, (
         localMultiExec),
      "")
d7868 2
a7869 3
      witSetObj2Winv, (
         obj2Winv),
      "")
d7879 2
a7880 3
      witSetObj2Winv, (
         obj2Winv),
      "Dbl")
d7890 2
a7891 3
      witSetObj2Wrev, (
         obj2Wrev),
      "")
d7901 2
a7902 3
      witSetObj2Wrev, (
         obj2Wrev),
      "Dbl")
d7912 2
a7913 3
      witSetObj2Wserv, (
         obj2Wserv),
      "")
d7923 2
a7924 3
      witSetObj2Wserv, (
         obj2Wserv),
      "Dbl")
d7934 2
a7935 3
      witSetObj2Wsub, (
         obj2Wsub),
      "")
d7945 2
a7946 3
      witSetObj2Wsub, (
         obj2Wsub),
      "Dbl")
d7956 2
a7957 3
      witSetObjChoice, (
         objChoice),
      "")
d7968 1
a7968 1
      witSetOperationObj1ExecCost, (
d7970 1
a7970 2
         obj1ExecCost),
      "")
d7981 1
a7981 1
      witSetOperationObj1ExecCost, (
d7983 1
a7983 2
         obj1ExecCost),
      "Dbl")
d7994 1
a7994 1
      witSetOperationObj2AuxCost, (
d7996 1
a7996 2
         obj2AuxCost),
      "")
d8007 1
a8007 1
      witSetOperationObj2AuxCost, (
d8009 1
a8009 2
         obj2AuxCost),
      "Dbl")
d8020 1
a8020 1
      witSetOperationYield, (
d8022 1
a8022 2
         yield),
      "")
d8033 1
a8033 1
      witSetPartBuildAheadLimit, (
d8035 1
a8035 2
         buildAheadLimit),
      "")
d8046 1
a8046 1
      witSetPartCycleTime, (
d8048 1
a8048 2
         cycleTime),
      "")
d8059 1
a8059 1
      witSetPartIncLotSize, (
d8061 1
a8061 2
         incLotSize),
      "")
d8072 1
a8072 1
      witSetPartMinLotSize, (
d8074 1
a8074 2
         minLotSize),
      "")
d8085 1
a8085 1
      witSetPartObj1ProdCost, (
d8087 1
a8087 2
         obj1ProdCost),
      "")
d8098 1
a8098 1
      witSetPartObj1ScrapCost, (
d8101 1
a8101 2
         ),
      "")
d8112 1
a8112 1
      witSetPartObj1ScrapCost, (
d8115 1
a8115 2
         ),
      "Dbl")
d8126 1
a8126 1
      witSetPartObj1StockCost, (
d8128 1
a8128 2
         obj1StockCost),
      "")
d8139 1
a8139 1
      witSetPartObj1StockCost, (
d8141 1
a8141 2
         obj1StockCost),
      "Dbl")
d8154 1
a8154 1
      witSetPartProdBounds, (
d8158 1
a8158 2
         hardUpper),
      "")
d8169 1
a8169 1
      witSetPartProdVol, (
d8171 1
a8171 2
         prodVol),
      "")
d8182 1
a8182 1
      witSetPartPropRouting, (
d8184 1
a8184 2
         propRouting),
      "")
d8195 1
a8195 1
      witSetPartUnitCost, (
d8197 1
a8197 2
         unitCost),
      "")
d8208 1
a8208 1
      witSetPartUnitCost, (
d8210 1
a8210 2
         unitCost),
      "Dbl")
d8221 1
a8221 1
      witSetPartYield, (
d8223 1
a8223 2
         yield),
      "")
d8233 2
a8234 3
      witSetPeriodsPerYear, (
         periodsPerYear),
      "")
d8244 2
a8245 3
      witSetPeriodsPerYear, (
         periodsPerYear),
      "Dbl")
d8255 2
a8256 3
      witSetStockRealloc, (
         stockRealloc),
      "")
d8269 1
a8269 1
      witSetSubsBomEntryFallout, (
d8273 1
a8273 2
         fallout),
      "")
d8286 1
a8286 1
      witSetSubsBomEntryObj2SubPenalty, (
d8290 1
a8290 2
         obj2SubPenalty),
      "")
d8303 1
a8303 1
      witSetSubsBomEntryObj2SubPenalty, (
d8307 1
a8307 2
         obj2SubPenalty),
      "Dbl")
d8320 1
a8320 1
      witSetSubsBomEntryProdVol, (
d8324 1
a8324 2
         prodVol),
      "")
d8337 1
a8337 1
      witSetSubsBomEntryUsageRate, (
d8341 1
a8341 2
         usageRate),
      "")
d8352 1
a8352 1
      witWriteProdSched, (
d8354 1
a8354 2
         fileFormat),
      "")
d8366 2
a8367 3
      witGetNewPipPggOrder, (
         newPipPggOrder),
      "")
d8377 2
a8378 3
      witSetNewPipPggOrder, (
         newPipPggOrder),
      "")
d8388 2
a8389 3
      witGetNonMrSelSplit, (
         nonMrSelSplit),
      "")
d8399 2
a8400 3
      witSetNonMrSelSplit, (
         nonMrSelSplit),
      "")
d8411 1
a8411 1
      witGetPartBaSelSplit, (
d8413 1
a8413 2
         baSelSplit),
      "")
d8424 1
a8424 1
      witSetPartBaSelSplit, (
d8426 1
a8426 2
         baSelSplit),
      "")
d8438 1
a8438 1
      witGetBopEntryMeSelSplit, (
d8441 1
a8441 2
         meSelSplit),
      "")
d8453 1
a8453 1
      witSetBopEntryMeSelSplit, (
d8456 1
a8456 2
         meSelSplit),
      "")
d8466 2
a8467 3
      witGetSrSelSplit, (
         srSelSplit),
      "")
d8477 2
a8478 3
      witSetSrSelSplit, (
         srSelSplit),
      "")
d8488 2
a8489 3
      witNoDependantWitRunVeneersIsOne, (
         isOne),
      "")
d8498 1
a8498 2
      witNoDependantWitRunVeneersDecr, (),
      "")
d8507 1
a8507 2
      witNoDependantWitRunVeneersIncr, (),
      "")
d8516 1
a8516 2
      witExhaustMemory, (),
      "")
d8525 1
a8525 2
      witListUnissuedMsgs, (),
      "")
d8550 1
a8550 2
      witTestFatalMesg, (),
      "")
d8561 1
a8561 1
      witExecStandAlone, (
d8563 1
a8563 2
         argv),
      "")
d8572 1
a8572 2
      witThrowUnknownExc, (),
      "")
@


1.202
log
@App controlled opt implosion.
@
text
@a41 1
//    preInitMode  Passed to ApiMgr:startApiFunc (...).
d53 1
a53 2
      suffix,                                                                  \
      preInitMode)                                                             \
d57 1
a57 1
      theWitRun->myApiMgr ()->startApiFunc (#innerFunc suffix, preInitMode);   \
d90 1
a90 2
      "",
      false)
d104 1
a104 2
      "",
      false)
d118 1
a118 2
      "",
      false)
d130 1
a130 2
      "",
      false)
d144 1
a144 2
      "",
      false)
d156 1
a156 2
      "",
      false)
d172 1
a172 2
      "",
      false)
d182 1
a182 2
      "",
      false)
d200 1
a200 2
      "",
      false)
d218 1
a218 2
      "Dbl",
      false)
d228 1
a228 2
      "",
      false)
d238 1
a238 2
      "",
      false)
d248 1
a248 2
      "",
      false)
d266 1
a266 2
      "",
      true)
d283 1
a283 1
      theWitRun->myApiMgr ()->startApiFunc ("witDeleteRun", true);
d322 1
a322 2
      "",
      false)
d344 1
a344 2
      "",
      false)
d366 1
a366 2
      "Dbl",
      false)
d390 1
a390 2
      "",
      false)
d414 1
a414 2
      "Dbl",
      false)
d424 1
a424 2
      "",
      false)
d434 1
a434 2
      "",
      false)
d456 1
a456 2
      "",
      false)
d468 1
a468 2
      "",
      false)
d480 1
a480 2
      "",
      false)
d492 1
a492 2
      "",
      false)
d504 1
a504 2
      "",
      false)
d516 1
a516 2
      "",
      false)
d532 1
a532 2
      "",
      false)
d548 1
a548 2
      "",
      false)
d564 1
a564 2
      "Dbl",
      false)
d580 1
a580 2
      "",
      false)
d596 1
a596 2
      "",
      false)
d612 1
a612 2
      "",
      false)
d628 1
a628 2
      "",
      false)
d644 1
a644 2
      "Dbl",
      false)
d660 1
a660 2
      "",
      false)
d676 1
a676 2
      "Dbl",
      false)
d692 1
a692 2
      "",
      false)
d708 1
a708 2
      "",
      false)
d724 1
a724 2
      "",
      false)
d740 1
a740 2
      "",
      false)
d756 1
a756 2
      "Dbl",
      false)
d772 1
a772 2
      "",
      false)
d788 1
a788 2
      "",
      false)
d804 1
a804 2
      "Dbl",
      false)
d820 1
a820 2
      "",
      false)
d836 1
a836 2
      "",
      false)
d852 1
a852 2
      "",
      false)
d868 1
a868 2
      "",
      false)
d884 1
a884 2
      "",
      false)
d900 1
a900 2
      "",
      false)
d916 1
a916 2
      "Dbl",
      false)
d932 1
a932 2
      "",
      false)
d948 1
a948 2
      "",
      false)
d964 1
a964 2
      "",
      false)
d980 1
a980 2
      "Dbl",
      false)
d996 1
a996 2
      "",
      false)
d1012 1
a1012 2
      "Dbl",
      false)
d1028 1
a1028 2
      "",
      false)
d1044 1
a1044 2
      "",
      false)
d1060 1
a1060 2
      "Dbl",
      false)
d1076 1
a1076 2
      "",
      false)
d1088 1
a1088 2
      "",
      false)
d1100 1
a1100 2
      "",
      false)
d1112 1
a1112 2
      "",
      false)
d1128 1
a1128 2
      "",
      false)
d1144 1
a1144 2
      "",
      false)
d1170 1
a1170 2
      "",
      false)
d1196 1
a1196 2
      "Dbl",
      false)
d1220 1
a1220 2
      "",
      false)
d1244 1
a1244 2
      "Dbl",
      false)
d1264 1
a1264 2
      "",
      false)
d1284 1
a1284 2
      "Dbl",
      false)
d1300 1
a1300 2
      "",
      false)
d1316 1
a1316 2
      "Dbl",
      false)
d1332 1
a1332 2
      "",
      false)
d1348 1
a1348 2
      "Dbl",
      false)
d1372 1
a1372 2
      "",
      false)
d1396 1
a1396 2
      "Dbl",
      false)
d1420 1
a1420 2
      "",
      false)
d1444 1
a1444 2
      "Dbl",
      false)
d1460 1
a1460 2
      "",
      false)
d1476 1
a1476 2
      "",
      false)
d1493 1
a1493 2
      "Dbl",
      false)
d1509 1
a1509 2
      "",
      false)
d1525 1
a1525 2
      "Dbl",
      false)
d1541 1
a1541 2
      "",
      false)
d1557 1
a1557 2
      "Dbl",
      false)
d1573 1
a1573 2
      "",
      false)
d1597 1
a1597 2
      "",
      false)
d1621 1
a1621 2
      "Dbl",
      false)
d1637 1
a1637 2
      "",
      false)
d1653 1
a1653 2
      "",
      false)
d1669 1
a1669 2
      "",
      false)
d1685 1
a1685 2
      "Dbl",
      false)
d1701 1
a1701 2
      "",
      false)
d1717 1
a1717 2
      "Dbl",
      false)
d1741 1
a1741 2
      "",
      false)
d1765 1
a1765 2
      "Dbl",
      false)
d1793 1
a1793 2
      "",
      false)
d1821 1
a1821 2
      "Dbl",
      false)
d1849 1
a1849 2
      "",
      false)
d1877 1
a1877 2
      "Dbl",
      false)
d1901 1
a1901 2
      "",
      false)
d1925 1
a1925 2
      "Dbl",
      false)
d1937 1
a1937 2
      "",
      false)
d1949 1
a1949 2
      "",
      false)
d1961 1
a1961 2
      "",
      false)
d1973 1
a1973 2
      "Dbl",
      false)
d1985 1
a1985 2
      "",
      false)
d2001 1
a2001 2
      "",
      false)
d2017 1
a2017 2
      "Dbl",
      false)
d2029 1
a2029 2
      "",
      false)
d2041 1
a2041 2
      "",
      false)
d2053 1
a2053 2
      "",
      false)
d2065 1
a2065 2
      "",
      false)
d2077 1
a2077 2
      "",
      false)
d2089 1
a2089 2
      "Dbl",
      false)
d2101 1
a2101 2
      "",
      false)
d2113 1
a2113 2
      "",
      false)
d2125 1
a2125 2
      "",
      false)
d2139 1
a2139 2
      "",
      false)
d2153 1
a2153 2
      "",
      false)
d2167 1
a2167 2
      "",
      false)
d2181 1
a2181 2
      "",
      false)
d2193 1
a2193 2
      "",
      false)
d2205 1
a2205 2
      "",
      false)
d2217 1
a2217 2
      "",
      false)
d2229 1
a2229 2
      "",
      false)
d2243 1
a2243 2
      "",
      false)
d2257 1
a2257 2
      "",
      false)
d2271 1
a2271 2
      "",
      false)
d2283 1
a2283 2
      "",
      false)
d2295 1
a2295 2
      "",
      false)
d2307 1
a2307 2
      "",
      false)
d2323 1
a2323 2
      "",
      false)
d2337 1
a2337 2
      "",
      false)
d2351 1
a2351 2
      "Dbl",
      false)
d2365 1
a2365 2
      "",
      false)
d2383 1
a2383 2
      "",
      false)
d2401 1
a2401 2
      "Dbl",
      false)
d2415 1
a2415 2
      "",
      false)
d2429 1
a2429 2
      "Dbl",
      false)
d2443 1
a2443 2
      "",
      false)
d2457 1
a2457 2
      "Dbl",
      false)
d2471 1
a2471 2
      "",
      false)
d2485 1
a2485 2
      "",
      false)
d2499 1
a2499 2
      "Dbl",
      false)
d2513 1
a2513 2
      "",
      false)
d2527 1
a2527 2
      "",
      false)
d2541 1
a2541 2
      "Dbl",
      false)
d2555 1
a2555 2
      "",
      false)
d2569 1
a2569 2
      "Dbl",
      false)
d2583 1
a2583 2
      "",
      false)
d2597 1
a2597 2
      "",
      false)
d2611 1
a2611 2
      "Dbl",
      false)
d2625 1
a2625 2
      "",
      false)
d2639 1
a2639 2
      "Dbl",
      false)
d2653 1
a2653 2
      "",
      false)
d2667 1
a2667 2
      "Dbl",
      false)
d2681 1
a2681 2
      "",
      false)
d2695 1
a2695 2
      "Dbl",
      false)
d2709 1
a2709 2
      "",
      false)
d2723 1
a2723 2
      "Dbl",
      false)
d2737 1
a2737 2
      "",
      false)
d2751 1
a2751 2
      "",
      false)
d2765 1
a2765 2
      "",
      false)
d2779 1
a2779 2
      "",
      false)
d2793 1
a2793 2
      "",
      false)
d2807 1
a2807 2
      "",
      false)
d2821 1
a2821 2
      "Dbl",
      false)
d2833 1
a2833 2
      "",
      false)
d2845 1
a2845 2
      "",
      false)
d2857 1
a2857 2
      "",
      false)
d2869 1
a2869 2
      "",
      false)
d2883 1
a2883 2
      "",
      false)
d2899 1
a2899 2
      "",
      false)
d2913 1
a2913 2
      "",
      false)
d2927 1
a2927 2
      "",
      false)
d2941 1
a2941 2
      "",
      false)
d2955 1
a2955 2
      "",
      false)
d2969 1
a2969 2
      "Dbl",
      false)
d2987 1
a2987 2
      "",
      false)
d3007 1
a3007 2
      "",
      false)
d3023 1
a3023 2
      "",
      false)
d3037 1
a3037 2
      "",
      false)
d3051 1
a3051 2
      "",
      false)
d3065 1
a3065 2
      "Dbl",
      false)
d3079 1
a3079 2
      "",
      false)
d3093 1
a3093 2
      "",
      false)
d3107 1
a3107 2
      "Dbl",
      false)
d3121 1
a3121 2
      "",
      false)
d3135 1
a3135 2
      "Dbl",
      false)
d3149 1
a3149 2
      "",
      false)
d3163 1
a3163 2
      "Dbl",
      false)
d3177 1
a3177 2
      "",
      false)
d3191 1
a3191 2
      "Dbl",
      false)
d3205 1
a3205 2
      "",
      false)
d3219 1
a3219 2
      "",
      false)
d3233 1
a3233 2
      "",
      false)
d3247 1
a3247 2
      "",
      false)
d3261 1
a3261 2
      "Dbl",
      false)
d3279 1
a3279 2
      "",
      false)
d3293 1
a3293 2
      "",
      false)
d3307 1
a3307 2
      "",
      false)
d3321 1
a3321 2
      "Dbl",
      false)
d3335 1
a3335 2
      "",
      false)
d3349 1
a3349 2
      "Dbl",
      false)
d3363 1
a3363 2
      "",
      false)
d3377 1
a3377 2
      "",
      false)
d3391 1
a3391 2
      "Dbl",
      false)
d3405 1
a3405 2
      "",
      false)
d3419 1
a3419 2
      "Dbl",
      false)
d3433 1
a3433 2
      "",
      false)
d3447 1
a3447 2
      "",
      false)
d3461 1
a3461 2
      "Dbl",
      false)
d3475 1
a3475 2
      "",
      false)
d3493 1
a3493 2
      "",
      false)
d3511 1
a3511 2
      "Dbl",
      false)
d3525 1
a3525 2
      "",
      false)
d3539 1
a3539 2
      "Dbl",
      false)
d3553 1
a3553 2
      "",
      false)
d3567 1
a3567 2
      "Dbl",
      false)
d3581 1
a3581 2
      "",
      false)
d3595 1
a3595 2
      "Dbl",
      false)
d3607 1
a3607 2
      "",
      false)
d3619 1
a3619 2
      "",
      false)
d3639 1
a3639 2
      "",
      false)
d3659 1
a3659 2
      "Dbl",
      false)
d3671 1
a3671 2
      "",
      false)
d3683 1
a3683 2
      "",
      false)
d3705 1
a3705 2
      "",
      false)
d3717 1
a3717 2
      "",
      false)
d3729 1
a3729 2
      "",
      false)
d3741 1
a3741 2
      "",
      false)
d3753 1
a3753 2
      "",
      false)
d3765 1
a3765 2
      "",
      false)
d3777 1
a3777 2
      "",
      false)
d3789 1
a3789 2
      "",
      false)
d3801 1
a3801 2
      "",
      false)
d3813 1
a3813 2
      "",
      false)
d3831 1
a3831 2
      "",
      false)
d3849 1
a3849 2
      "",
      false)
d3867 1
a3867 2
      "Dbl",
      false)
d3885 1
a3885 2
      "",
      false)
d3903 1
a3903 2
      "",
      false)
d3921 1
a3921 2
      "",
      false)
d3939 1
a3939 2
      "Dbl",
      false)
d3957 1
a3957 2
      "",
      false)
d3975 1
a3975 2
      "",
      false)
d3993 1
a3993 2
      "Dbl",
      false)
d4011 1
a4011 2
      "",
      false)
d4029 1
a4029 2
      "Dbl",
      false)
d4047 1
a4047 2
      "",
      false)
d4065 1
a4065 2
      "Dbl",
      false)
d4083 1
a4083 2
      "",
      false)
d4101 1
a4101 2
      "",
      false)
d4119 1
a4119 2
      "",
      false)
d4137 1
a4137 2
      "",
      false)
d4155 1
a4155 2
      "",
      false)
d4173 1
a4173 2
      "Dbl",
      false)
d4191 1
a4191 2
      "",
      false)
d4209 1
a4209 2
      "",
      false)
d4227 1
a4227 2
      "Dbl",
      false)
d4245 1
a4245 2
      "",
      false)
d4263 1
a4263 2
      "Dbl",
      false)
d4281 1
a4281 2
      "",
      false)
d4299 1
a4299 2
      "Dbl",
      false)
d4317 1
a4317 2
      "",
      false)
d4335 1
a4335 2
      "",
      false)
d4353 1
a4353 2
      "Dbl",
      false)
d4371 1
a4371 2
      "",
      false)
d4389 1
a4389 2
      "Dbl",
      false)
d4401 1
a4401 2
      "",
      false)
d4413 1
a4413 2
      "",
      false)
d4425 1
a4425 2
      "",
      false)
d4437 1
a4437 2
      "",
      false)
d4449 1
a4449 2
      "",
      false)
d4461 1
a4461 2
      "",
      false)
d4473 1
a4473 2
      "",
      false)
d4485 1
a4485 2
      "Dbl",
      false)
d4497 1
a4497 2
      "",
      false)
d4507 1
a4507 2
      "",
      false)
d4527 1
a4527 2
      "",
      false)
d4547 1
a4547 2
      "Dbl",
      false)
d4569 1
a4569 2
      "",
      false)
d4591 1
a4591 2
      "Dbl",
      false)
d4601 1
a4601 2
      "",
      true)
d4611 1
a4611 2
      "",
      false)
d4637 1
a4637 2
      "",
      true)
d4647 1
a4647 2
      "",
      false)
d4657 1
a4657 2
      "",
      false)
d4667 1
a4667 2
      "",
      false)
d4677 1
a4677 2
      "",
      false)
d4687 1
a4687 2
      "",
      false)
d4699 1
a4699 2
      "",
      false)
d4709 1
a4709 2
      "",
      false)
d4721 1
a4721 2
      "",
      false)
d4733 1
a4733 2
      "",
      false)
d4745 1
a4745 2
      "",
      false)
d4757 1
a4757 2
      "",
      false)
d4773 1
a4773 2
      "",
      false)
d4789 1
a4789 2
      "",
      false)
d4805 1
a4805 2
      "Dbl",
      false)
d4821 1
a4821 2
      "",
      false)
d4837 1
a4837 2
      "",
      false)
d4853 1
a4853 2
      "Dbl",
      false)
d4869 1
a4869 2
      "",
      false)
d4885 1
a4885 2
      "Dbl",
      false)
d4901 1
a4901 2
      "",
      false)
d4917 1
a4917 2
      "",
      false)
d4933 1
a4933 2
      "",
      false)
d4949 1
a4949 2
      "Dbl",
      false)
d4965 1
a4965 2
      "",
      false)
d4981 1
a4981 2
      "",
      false)
d4997 1
a4997 2
      "Dbl",
      false)
d5013 1
a5013 2
      "",
      false)
d5029 1
a5029 2
      "",
      false)
d5045 1
a5045 2
      "",
      false)
d5061 1
a5061 2
      "",
      false)
d5077 1
a5077 2
      "",
      false)
d5093 1
a5093 2
      "",
      false)
d5109 1
a5109 2
      "Dbl",
      false)
d5125 1
a5125 2
      "",
      false)
d5141 1
a5141 2
      "",
      false)
d5157 1
a5157 2
      "Dbl",
      false)
d5173 1
a5173 2
      "",
      false)
d5189 1
a5189 2
      "Dbl",
      false)
d5205 1
a5205 2
      "",
      false)
d5221 1
a5221 2
      "Dbl",
      false)
d5237 1
a5237 2
      "",
      false)
d5249 1
a5249 2
      "",
      false)
d5261 1
a5261 2
      "",
      false)
d5277 1
a5277 2
      "",
      false)
d5297 1
a5297 2
      "",
      false)
d5317 1
a5317 2
      "Dbl",
      false)
d5333 1
a5333 2
      "",
      false)
d5349 1
a5349 2
      "Dbl",
      false)
d5365 1
a5365 2
      "",
      false)
d5381 1
a5381 2
      "Dbl",
      false)
d5397 1
a5397 2
      "",
      false)
d5413 1
a5413 2
      "",
      false)
d5429 1
a5429 2
      "Dbl",
      false)
d5445 1
a5445 2
      "",
      false)
d5461 1
a5461 2
      "Dbl",
      false)
d5477 1
a5477 2
      "",
      false)
d5493 1
a5493 2
      "Dbl",
      false)
d5509 1
a5509 2
      "",
      false)
d5525 1
a5525 2
      "",
      false)
d5541 1
a5541 2
      "",
      false)
d5557 1
a5557 2
      "",
      false)
d5573 1
a5573 2
      "Dbl",
      false)
d5589 1
a5589 2
      "",
      false)
d5605 1
a5605 2
      "Dbl",
      false)
d5617 1
a5617 2
      "",
      false)
d5629 1
a5629 2
      "",
      false)
d5641 1
a5641 2
      "",
      false)
d5653 1
a5653 2
      "Dbl",
      false)
d5665 1
a5665 2
      "",
      false)
d5677 1
a5677 2
      "",
      false)
d5689 1
a5689 2
      "",
      false)
d5701 1
a5701 2
      "",
      false)
d5713 1
a5713 2
      "Dbl",
      false)
d5727 1
a5727 2
      "",
      true)
d5741 1
a5741 2
      "",
      true)
d5757 1
a5757 2
      "",
      true)
d5773 1
a5773 2
      "",
      true)
d5789 1
a5789 2
      "",
      true)
d5805 1
a5805 2
      "",
      true)
d5817 1
a5817 2
      "",
      false)
d5829 1
a5829 2
      "",
      false)
d5841 1
a5841 2
      "",
      false)
d5853 1
a5853 2
      "",
      false)
d5867 1
a5867 2
      "",
      false)
d5885 1
a5885 2
      "",
      false)
d5903 1
a5903 2
      "Dbl",
      false)
d5917 1
a5917 2
      "",
      false)
d5931 1
a5931 2
      "Dbl",
      false)
d5945 1
a5945 2
      "",
      false)
d5959 1
a5959 2
      "Dbl",
      false)
d5973 1
a5973 2
      "",
      false)
d5987 1
a5987 2
      "Dbl",
      false)
d6001 1
a6001 2
      "",
      false)
d6015 1
a6015 2
      "Dbl",
      false)
d6029 1
a6029 2
      "",
      false)
d6043 1
a6043 2
      "Dbl",
      false)
d6057 1
a6057 2
      "",
      false)
d6071 1
a6071 2
      "",
      false)
d6085 1
a6085 2
      "Dbl",
      false)
d6099 1
a6099 2
      "",
      false)
d6113 1
a6113 2
      "Dbl",
      false)
d6127 1
a6127 2
      "",
      false)
d6141 1
a6141 2
      "Dbl",
      false)
d6155 1
a6155 2
      "",
      false)
d6169 1
a6169 2
      "",
      false)
d6183 1
a6183 2
      "",
      false)
d6197 1
a6197 2
      "Dbl",
      false)
d6209 1
a6209 2
      "",
      false)
d6221 1
a6221 2
      "",
      false)
d6235 1
a6235 2
      "",
      false)
d6249 1
a6249 2
      "",
      false)
d6263 1
a6263 2
      "",
      false)
d6277 1
a6277 2
      "",
      false)
d6291 1
a6291 2
      "",
      false)
d6305 1
a6305 2
      "",
      false)
d6320 1
a6320 2
      "Dbl",
      false)
d6334 1
a6334 2
      "",
      false)
d6348 1
a6348 2
      "",
      false)
d6366 1
a6366 2
      "",
      false)
d6384 1
a6384 2
      "Dbl",
      false)
d6398 1
a6398 2
      "",
      false)
d6412 1
a6412 2
      "Dbl",
      false)
d6426 1
a6426 2
      "",
      false)
d6440 1
a6440 2
      "Dbl",
      false)
d6452 1
a6452 2
      "",
      false)
d6464 1
a6464 2
      "",
      false)
d6476 1
a6476 2
      "",
      false)
d6488 1
a6488 2
      "",
      false)
d6500 1
a6500 2
      "",
      false)
d6512 1
a6512 2
      "",
      false)
d6524 1
a6524 2
      "",
      false)
d6536 1
a6536 2
      "",
      false)
d6548 1
a6548 2
      "",
      false)
d6560 1
a6560 2
      "",
      false)
d6572 1
a6572 2
      "",
      false)
d6590 1
a6590 2
      "",
      false)
d6608 1
a6608 2
      "",
      false)
d6626 1
a6626 2
      "Dbl",
      false)
d6644 1
a6644 2
      "",
      false)
d6662 1
a6662 2
      "",
      false)
d6680 1
a6680 2
      "Dbl",
      false)
d6698 1
a6698 2
      "",
      false)
d6716 1
a6716 2
      "",
      false)
d6734 1
a6734 2
      "Dbl",
      false)
d6752 1
a6752 2
      "",
      false)
d6770 1
a6770 2
      "Dbl",
      false)
d6788 1
a6788 2
      "",
      false)
d6806 1
a6806 2
      "",
      false)
d6824 1
a6824 2
      "",
      false)
d6842 1
a6842 2
      "",
      false)
d6860 1
a6860 2
      "",
      false)
d6878 1
a6878 2
      "Dbl",
      false)
d6896 1
a6896 2
      "",
      false)
d6914 1
a6914 2
      "Dbl",
      false)
d6932 1
a6932 2
      "",
      false)
d6950 1
a6950 2
      "Dbl",
      false)
d6968 1
a6968 2
      "",
      false)
d6986 1
a6986 2
      "",
      false)
d7004 1
a7004 2
      "Dbl",
      false)
d7022 1
a7022 2
      "",
      false)
d7040 1
a7040 2
      "Dbl",
      false)
d7052 1
a7052 2
      "",
      false)
d7064 1
a7064 2
      "",
      false)
d7076 1
a7076 2
      "",
      false)
d7088 1
a7088 2
      "",
      false)
d7100 1
a7100 2
      "",
      false)
d7112 1
a7112 2
      "",
      false)
d7124 1
a7124 2
      "",
      false)
d7136 1
a7136 2
      "Dbl",
      false)
d7148 1
a7148 2
      "",
      false)
d7158 1
a7158 2
      "",
      false)
d7168 1
a7168 2
      "",
      false)
d7184 1
a7184 2
      "",
      false)
d7196 1
a7196 2
      "",
      false)
d7210 1
a7210 2
      "",
      false)
d7224 1
a7224 2
      "",
      false)
d7238 1
a7238 2
      "",
      false)
d7258 1
a7258 2
      "",
      false)
d7274 1
a7274 2
      "",
      false)
d7290 1
a7290 2
      "",
      false)
d7306 1
a7306 2
      "",
      false)
d7322 1
a7322 2
      "",
      false)
d7338 1
a7338 2
      "",
      false)
d7350 1
a7350 2
      "",
      false)
d7362 1
a7362 2
      "Dbl",
      false)
d7378 1
a7378 2
      "",
      false)
d7394 1
a7394 2
      "",
      false)
d7410 1
a7410 2
      "",
      false)
d7426 1
a7426 2
      "Dbl",
      false)
d7442 1
a7442 2
      "",
      false)
d7458 1
a7458 2
      "",
      false)
d7474 1
a7474 2
      "",
      false)
d7486 1
a7486 2
      "",
      false)
d7498 1
a7498 2
      "",
      false)
d7510 1
a7510 2
      "Dbl",
      false)
d7522 1
a7522 2
      "",
      false)
d7534 1
a7534 2
      "",
      false)
d7552 1
a7552 2
      "",
      false)
d7570 1
a7570 2
      "Dbl",
      false)
d7582 1
a7582 2
      "",
      false)
d7594 1
a7594 2
      "Dbl",
      false)
d7606 1
a7606 2
      "",
      false)
d7618 1
a7618 2
      "Dbl",
      false)
d7630 1
a7630 2
      "",
      false)
d7642 1
a7642 2
      "Dbl",
      false)
d7654 1
a7654 2
      "",
      false)
d7666 1
a7666 2
      "Dbl",
      false)
d7678 1
a7678 2
      "",
      false)
d7692 1
a7692 2
      "",
      false)
d7706 1
a7706 2
      "Dbl",
      false)
d7720 1
a7720 2
      "",
      false)
d7734 1
a7734 2
      "Dbl",
      false)
d7748 1
a7748 2
      "",
      false)
d7762 1
a7762 2
      "",
      false)
d7776 1
a7776 2
      "",
      false)
d7790 1
a7790 2
      "",
      false)
d7804 1
a7804 2
      "",
      false)
d7818 1
a7818 2
      "",
      false)
d7832 1
a7832 2
      "",
      false)
d7846 1
a7846 2
      "",
      false)
d7860 1
a7860 2
      "",
      false)
d7874 1
a7874 2
      "Dbl",
      false)
d7888 1
a7888 2
      "",
      false)
d7902 1
a7902 2
      "Dbl",
      false)
d7920 1
a7920 2
      "",
      false)
d7934 1
a7934 2
      "",
      false)
d7948 1
a7948 2
      "",
      false)
d7962 1
a7962 2
      "Dbl",
      false)
d7976 1
a7976 2
      "",
      false)
d7988 1
a7988 2
      "",
      false)
d8000 1
a8000 2
      "Dbl",
      false)
d8012 1
a8012 2
      "",
      false)
d8030 1
a8030 2
      "",
      false)
d8048 1
a8048 2
      "",
      false)
d8066 1
a8066 2
      "Dbl",
      false)
d8084 1
a8084 2
      "",
      false)
d8102 1
a8102 2
      "",
      false)
d8118 1
a8118 2
      "",
      false)
d8134 1
a8134 2
      "",
      false)
d8150 1
a8150 2
      "",
      false)
d8166 1
a8166 2
      "",
      false)
d8182 1
a8182 2
      "",
      false)
d8198 1
a8198 2
      "",
      false)
d8210 1
a8210 2
      "",
      false)
d8222 1
a8222 2
      "",
      false)
d8234 1
a8234 2
      "Dbl",
      false)
d8250 1
a8250 2
      "",
      false)
d8266 1
a8266 2
      "",
      false)
d8282 1
a8282 2
      "",
      false)
d8298 1
a8298 2
      "Dbl",
      false)
d8314 1
a8314 2
      "",
      false)
d8330 1
a8330 2
      "",
      false)
d8346 1
a8346 2
      "",
      false)
d8358 1
a8358 2
      "",
      false)
d8370 1
a8370 2
      "",
      false)
d8382 1
a8382 2
      "Dbl",
      false)
d8394 1
a8394 2
      "",
      false)
d8406 1
a8406 2
      "",
      false)
d8418 1
a8418 2
      "",
      false)
d8430 1
a8430 2
      "Dbl",
      false)
d8442 1
a8442 2
      "",
      false)
d8454 1
a8454 2
      "Dbl",
      false)
d8466 1
a8466 2
      "",
      false)
d8478 1
a8478 2
      "Dbl",
      false)
d8490 1
a8490 2
      "",
      false)
d8502 1
a8502 2
      "Dbl",
      false)
d8514 1
a8514 2
      "",
      false)
d8528 1
a8528 2
      "",
      false)
d8542 1
a8542 2
      "Dbl",
      false)
d8556 1
a8556 2
      "",
      false)
d8570 1
a8570 2
      "Dbl",
      false)
d8584 1
a8584 2
      "",
      false)
d8598 1
a8598 2
      "",
      false)
d8612 1
a8612 2
      "",
      false)
d8626 1
a8626 2
      "",
      false)
d8640 1
a8640 2
      "",
      false)
d8654 1
a8654 2
      "",
      false)
d8669 1
a8669 2
      "",
      false)
d8684 1
a8684 2
      "Dbl",
      false)
d8698 1
a8698 2
      "",
      false)
d8712 1
a8712 2
      "Dbl",
      false)
d8730 1
a8730 2
      "",
      false)
d8744 1
a8744 2
      "",
      false)
d8758 1
a8758 2
      "",
      false)
d8772 1
a8772 2
      "",
      false)
d8786 1
a8786 2
      "Dbl",
      false)
d8800 1
a8800 2
      "",
      false)
d8812 1
a8812 2
      "",
      false)
d8824 1
a8824 2
      "Dbl",
      false)
d8836 1
a8836 2
      "",
      false)
d8854 1
a8854 2
      "",
      false)
d8872 1
a8872 2
      "",
      false)
d8890 1
a8890 2
      "Dbl",
      false)
d8908 1
a8908 2
      "",
      false)
d8926 1
a8926 2
      "",
      false)
d8940 1
a8940 2
      "",
      false)
d8954 1
a8954 2
      "",
      false)
d8966 1
a8966 2
      "",
      false)
d8978 1
a8978 2
      "",
      false)
d8990 1
a8990 2
      "",
      false)
d9004 1
a9004 2
      "",
      false)
d9018 1
a9018 2
      "",
      false)
d9034 1
a9034 2
      "",
      false)
d9050 1
a9050 2
      "",
      false)
d9062 1
a9062 2
      "",
      false)
d9074 1
a9074 2
      "",
      false)
d9086 1
a9086 2
      "",
      true)
d9096 1
a9096 2
      "",
      true)
d9106 1
a9106 2
      "",
      true)
d9116 1
a9116 2
      "",
      false)
d9126 1
a9126 2
      "",
      false)
d9152 1
a9152 2
      "",
      false)
d9166 1
a9166 2
      "",
      true)
d9176 1
a9176 2
      "",
      false)
@


1.201
log
@App controlled opt implode.
@
text
@d521 1
a521 1
  
d2999 13
@


1.200
log
@Integrality constraints.
@
text
@a439 2
#ifdef OPT_IMPLODE

a448 2
#endif

a4920 2
#ifdef OPT_IMPLODE

a4940 2
#endif
 
@


1.199
log
@Removed optimizing implosion with lot sizes.
@
text
@d2748 1
a2748 1
WIT_DECLSPEC witReturnCode STDCALL witGetOperationIntExecVols (
d2751 1
a2751 1
      witBoolean * intExecVols)
d2754 1
a2754 1
      witGetOperationIntExecVols, (
d2756 1
a2756 1
         intExecVols),
d4337 1
a4337 1
WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryIntSubVols (
d4342 1
a4342 1
      witBoolean * intSubVols)
d4345 1
a4345 1
      witGetSubsBomEntryIntSubVols, (
d4349 1
a4349 1
         intSubVols),
d6431 1
a6431 1
WIT_DECLSPEC witReturnCode STDCALL witSetOperationIntExecVols (
d6434 1
a6434 1
      const witBoolean intExecVols)
d6437 1
a6437 1
      witSetOperationIntExecVols, (
d6439 1
a6439 1
         intExecVols),
d7208 1
a7208 1
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryIntSubVols (
d7213 1
a7213 1
      const witBoolean intSubVols)
d7216 1
a7216 1
      witSetSubsBomEntryIntSubVols, (
d7220 1
a7220 1
         intSubVols),
d7907 1
a7907 1
WIT_DECLSPEC witReturnCode STDCALL witGetDemandIntShipVols (
d7911 1
a7911 1
      int * intShipVols)
d7914 1
a7914 1
      witGetDemandIntShipVols, (
d7917 1
a7917 1
         intShipVols),
d8840 1
a8840 1
WIT_DECLSPEC witReturnCode STDCALL witSetDemandIntShipVols (
d8844 1
a8844 1
      const int intShipVols)
d8847 1
a8847 1
      witSetDemandIntShipVols, (
d8850 1
a8850 1
         intShipVols),
@


1.198
log
@Opt implosion with integrality constraints.
@
text
@a8252 13
WIT_DECLSPEC witReturnCode STDCALL witGetOptWithLotSizes (
      WitRun * const theWitRun,
      witBoolean * optWithLotSizes)
   {
   STANDARD_API_IMPL (
      witGetOptWithLotSizes, (
         optWithLotSizes),
      "",
      false)
   }
 
//------------------------------------------------------------------------------

a9147 13
WIT_DECLSPEC witReturnCode STDCALL witSetOptWithLotSizes (
      WitRun * const theWitRun,
      const witBoolean optWithLotSizes)
   {
   STANDARD_API_IMPL (
      witSetOptWithLotSizes, (
         optWithLotSizes),
      "",
      false)
   }

//------------------------------------------------------------------------------

@


1.197
log
@ExecVol pegging for BOP entries.
@
text
@d2748 15
d4337 19
d6431 15
d7208 19
d7907 17
d8853 17
@


1.196
log
@BOP entry execVol pegging.
@
text
@d1222 1
a1222 1
WIT_DECLSPEC witReturnCode STDCALL witGetDemandCoexVolPip (
d1234 1
a1234 1
      witGetDemandCoexVolPip, (
d1249 1
a1249 1
WIT_DECLSPEC witReturnCode STDCALL witGetDemandCoexVolPipDbl (
d1261 1
a1261 1
      witGetDemandCoexVolPip, (
@


1.195
log
@GPIP migration.
@
text
@d1222 54
@


1.194
log
@GPIP migration
@
text
@a1046 34
WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryPipShare (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      float * * pipShare)
   {
   STANDARD_API_IMPL (
      witGetBopEntryPipShare, (
         operationName,
         bopEntryIndex,
         pipShare),
      "",
      false)
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryPipShareDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      double * * pipShare)
   {
   STANDARD_API_IMPL (
      witGetBopEntryPipShare, (
         operationName,
         bopEntryIndex,
         pipShare),
      "Dbl",
      false)
   }

//------------------------------------------------------------------------------

a5396 34
WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryPipShare (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const float * pipShare)
   {
   STANDARD_API_IMPL (
      witSetBopEntryPipShare, (
         operationName,
         bopEntryIndex,
         pipShare),
      "",
      false)
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryPipShareDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const double * pipShare)
   {
   STANDARD_API_IMPL (
      witSetBopEntryPipShare, (
         operationName,
         bopEntryIndex,
         pipShare),
      "Dbl",
      false)
   }

//------------------------------------------------------------------------------

@


1.193
log
@Removed the postSolveRecovery attribute.
@
text
@a2132 13
WIT_DECLSPEC witReturnCode STDCALL witGetGroupPipMode (
      WitRun * const theWitRun,
      witBoolean * groupPipMode)
   {
   STANDARD_API_IMPL (
      witGetGroupPipMode, (
         groupPipMode),
      "",
      false)
   }

//------------------------------------------------------------------------------

a6005 13
WIT_DECLSPEC witReturnCode STDCALL witSetGroupPipMode (
      WitRun * const theWitRun,
      const witBoolean groupPipMode)
   {
   STANDARD_API_IMPL (
      witSetGroupPipMode, (
         groupPipMode),
      "",
      false)
   }

//------------------------------------------------------------------------------

@


1.192
log
@New PIP pegging order.
@
text
@a3925 13
WIT_DECLSPEC witReturnCode STDCALL witGetPostSolveRecovery (
      WitRun * const theWitRun,
      witBoolean * postSolveRecovery)
   {
   STANDARD_API_IMPL (
      witGetPostSolveRecovery, (
         postSolveRecovery),
      "",
      false)
   }
 
//------------------------------------------------------------------------------

a6898 13
WIT_DECLSPEC witReturnCode STDCALL witSetPostSolveRecovery (
      WitRun * const theWitRun,
      const witBoolean postSolveRecovery)
   {
   STANDARD_API_IMPL (
      witSetPostSolveRecovery, (
         postSolveRecovery),
      "",
      false)
   }

//------------------------------------------------------------------------------

@


1.191
log
@Updated the copyright date on all source files.
@
text
@d9520 26
@


1.190
log
@Removed access to the oslMesgFileName attribute.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.189
log
@Modified code for OSL and COIN log file names.
@
text
@a8246 13
WIT_DECLSPEC witReturnCode STDCALL witGetOslMesgFileName (
      WitRun * const theWitRun,
      char * * oslMesgFileName)
   {
   STANDARD_API_IMPL (
      witGetOslMesgFileName, (
         oslMesgFileName),
      "",
      false)
   }
 
//------------------------------------------------------------------------------

a9137 13
WIT_DECLSPEC witReturnCode STDCALL witSetOslMesgFileName (
      WitRun * const theWitRun,
      const char * const oslMesgFileName)
   {
   STANDARD_API_IMPL (
      witSetOslMesgFileName, (
         oslMesgFileName),
      "",
      false)
   }
  
//------------------------------------------------------------------------------

@


1.188
log
@Moved hashTableSize functions.
@
text
@d30 1
a30 1
// Macro STANDARD_API_IMPL (innerFunc, argList)
a2993 13
WIT_DECLSPEC witReturnCode STDCALL witGetOslMesgFileName (
      WitRun * const theWitRun,
      char * * oslMesgFileName)
   {
   STANDARD_API_IMPL (
      witGetOslMesgFileName, (
         oslMesgFileName),
      "",
      false)
   }
 
//------------------------------------------------------------------------------

d4017 13
a6246 13
WIT_DECLSPEC witReturnCode STDCALL witSetOslMesgFileName (
      WitRun * const theWitRun,
      const char * const oslMesgFileName)
   {
   STANDARD_API_IMPL (
      witSetOslMesgFileName, (
         oslMesgFileName),
      "",
      false)
   }
  
//------------------------------------------------------------------------------

d6990 13
d8247 13
d9151 13
a9545 26
WIT_DECLSPEC witReturnCode STDCALL witGetSolverLogFileName (
      WitRun * const theWitRun,
      char * * solverLogFileName)
   {
   STANDARD_API_IMPL (
      witGetSolverLogFileName, (
         solverLogFileName),
      "",
      false)
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSolverLogFileName (
      WitRun * const theWitRun,
      const char * const solverLogFileName)
   {
   STANDARD_API_IMPL (
      witSetSolverLogFileName, (
         solverLogFileName),
      "",
      false)
   }
  
//------------------------------------------------------------------------------

@


1.187
log
@GPIP
@
text
@a2145 13
WIT_DECLSPEC witReturnCode STDCALL witGetHashTableSize (
      WitRun * const theWitRun,
      int * hashTableSize)
   {
   STANDARD_API_IMPL (
      witGetHashTableSize, (
         hashTableSize),
      "",
      false)
   }

//------------------------------------------------------------------------------

a6044 13
WIT_DECLSPEC witReturnCode STDCALL witSetHashTableSize (
      WitRun * const theWitRun,
      const int hashTableSize)
   {
   STANDARD_API_IMPL (
      witSetHashTableSize, (
         hashTableSize),
      "",
      false)
   }
 
//------------------------------------------------------------------------------

d7939 13
d8868 13
@


1.186
log
@Began [shared-resource pegging]
@
text
@d2133 13
a4042 13
WIT_DECLSPEC witReturnCode STDCALL witGetSrpMode (
      WitRun * const theWitRun,
      witBoolean * srpMode)
   {
   STANDARD_API_IMPL (
      witGetSrpMode, (
         srpMode),
      "",
      false)
   }

//------------------------------------------------------------------------------

d6045 13
a7028 13
WIT_DECLSPEC witReturnCode STDCALL witSetSrpMode (
      WitRun * const theWitRun,
      const witBoolean srpMode)
   {
   STANDARD_API_IMPL (
      witSetSrpMode, (
         srpMode),
      "",
      false)
   }

//------------------------------------------------------------------------------

@


1.185
log
@[error recovery]
@
text
@d4030 13
d7016 13
@


1.184
log
@Error exceptions.
@
text
@a9744 11

WIT_DECLSPEC witReturnCode STDCALL witSetErrorRecovery (
      WitRun * const theWitRun)
   {
   STANDARD_API_IMPL (
      witSetErrorRecovery, (),
      "",
      false)
   }

//------------------------------------------------------------------------------
@


1.183
log
@Error exceptions.
@
text
@a9827 34
// Namespace ErrorExcUtil
//
// Contains a utility function for class ErrorExc.
//------------------------------------------------------------------------------

namespace WitErrorExcUtil
   {
   char * dupCstring (const char * theName);
      //
      // Allocates theName and returns it.
   }

//------------------------------------------------------------------------------

char * WitErrorExcUtil::dupCstring (const char * theCstring)
   {
   char * dupCstringVal;

   try
      {
      dupCstringVal = new char [strlen (theCstring + 1)];
      }

   catch (std::bad_alloc)
      {
      return NULL;
      }

   strcpy (dupCstringVal, theCstring);

   return dupCstringVal;
   }

//------------------------------------------------------------------------------
d9836 1
a9836 1
      funcName_ (WitErrorExcUtil::dupCstring (funcNameVal)),
d9840 3
d9849 1
a9849 1
      funcName_ (WitErrorExcUtil::dupCstring (theErrorExc.funcName ())),
d9853 1
a9859 1
   delete funcName_;
d9866 1
a9866 4
   return
      (funcName_ != NULL)?
         funcName_:
         "unknown";
@


1.182
log
@WitErrorExc with MS compiler.
@
text
@a21 1
#include <ErrorExcData.h>
d9828 34
d9870 3
a9872 2
      myErrorExcData_ (
         new WitErrorExcData (funcNameVal, mesgNumVal, retCodeVal))
d9880 3
a9882 1
      myErrorExcData_ (new WitErrorExcData (theErrorExc.myErrorExcData_))
d9890 1
a9890 1
   delete myErrorExcData_;
d9897 4
a9900 1
   return myErrorExcData_->funcName ().myCstring ();
d9907 1
a9907 1
   return myErrorExcData_->mesgNum ();
d9914 1
a9914 1
   return myErrorExcData_->retCode ();
@


1.181
log
@Error exceptions on MS compiler.
@
text
@d9832 4
a9835 1
WitErrorExc::WitErrorExc (const WitErrorExcData & theErrorExcData):
d9837 2
a9838 1
      myErrorExcData_ (* new WitErrorExcData (theErrorExcData))
d9846 1
a9846 1
      myErrorExcData_ (* new WitErrorExcData (theErrorExc.myErrorExcData_))
d9854 1
a9854 1
   delete & myErrorExcData_;
d9861 1
a9861 1
   return myErrorExcData_.funcName ().myCstring ();
d9868 1
a9868 1
   return myErrorExcData_.mesgNum ();
d9875 1
a9875 1
   return myErrorExcData_.retCode ();
@


1.180
log
@Experiment for WitErrorExc trouble with MS complier.
@
text
@d22 1
d9832 1
a9832 11
WitErrorExc::WitErrorExc ()
   {
   }

//------------------------------------------------------------------------------

WitErrorExc::WitErrorExc (const WitErrorExc &)
   {
   }

//------------------------------------------------------------------------------
d9834 1
a9834 1
WitErrorExc::~WitErrorExc ()
a9838 4
// Implementation of class TempExc.
//------------------------------------------------------------------------------

#include <ConcErrorExc.h>
d9840 1
a9840 1
WitTempExc::WitTempExc (const WitConcErrorExc & theConcErrorExc):
d9842 1
a9842 1
      myConcErrorExc_ (* new WitConcErrorExc (theConcErrorExc))
d9848 1
a9848 9
WitTempExc::WitTempExc (const WitTempExc & theTempExc):
                                                      
      myConcErrorExc_ (* new WitConcErrorExc (theTempExc.myConcErrorExc_))
   {
   }

//------------------------------------------------------------------------------

WitTempExc::~WitTempExc ()
d9850 1
a9850 1
   delete & myConcErrorExc_;
d9855 1
a9855 1
const char * WitTempExc::funcName () const
d9857 1
a9857 1
   return myConcErrorExc_.funcName ();
d9862 1
a9862 1
int WitTempExc::mesgNum () const
d9864 1
a9864 1
   return myConcErrorExc_.mesgNum ();
d9869 1
a9869 1
witReturnCode WitTempExc::retCode () const
d9871 1
a9871 1
   return myConcErrorExc_.retCode ();
@


1.179
log
@[error recovery]
@
text
@d9846 48
@


1.178
log
@[multi-thread]
@
text
@d9745 11
@


1.177
log
@[multi-thread]
@
text
@d6229 1
a6229 1
      true)
@


1.176
log
@[multi-thread]
@
text
@d294 3
@


1.175
log
@[multi-thread]
@
text
@d313 1
a313 1
   theWitRun->myApiMgr ()->lockWitRun ("witDeleteRun");
@


1.174
log
@[multi-thread]
@
text
@a42 1
//    quietMode    Passed to ApiMgr:startApiFunc (...).
d55 1
a55 2
      preInitMode,                                                             \
      quietMode)                                                               \
d59 1
a59 3
      theWitRun->                                                              \
         myApiMgr ()->                                                         \
            startApiFunc (#innerFunc suffix, preInitMode, quietMode);          \
a92 1
      false,
a107 1
      false,
a122 1
      false,
a135 1
      false,
a150 1
      false,
a163 1
      false,
a180 1
      false,
a191 1
      false,
a210 1
      false,
a229 1
      false,
a240 1
      false,
a251 1
      false,
a262 1
      false,
d282 1
a282 2
      true,
      false)
d296 1
a296 1
      theWitRun->myApiMgr ()->startApiFunc ("witDeleteRun", true, true);
a335 1
      false,
a358 1
      false,
a381 1
      false,
a406 1
      false,
a431 1
      false,
a444 1
      false,
a457 1
      false,
a480 1
      false,
a493 1
      false,
a506 1
      false,
a519 1
      false,
a532 1
      false,
a545 1
      false,
a562 1
      false,
a579 1
      false,
a596 1
      false,
a613 1
      false,
a630 1
      false,
a647 1
      false,
a664 1
      false,
a681 1
      false,
a698 1
      false,
a715 1
      false,
a732 1
      false,
a749 1
      false,
a766 1
      false,
a783 1
      false,
a800 1
      false,
a817 1
      false,
a834 1
      false,
a851 1
      false,
a868 1
      false,
a885 1
      false,
a902 1
      false,
a919 1
      false,
a936 1
      false,
a953 1
      false,
a970 1
      false,
a987 1
      false,
a1004 1
      false,
a1021 1
      false,
a1038 1
      false,
a1055 1
      false,
a1072 1
      false,
a1089 1
      false,
a1106 1
      false,
a1123 1
      false,
a1140 1
      false,
a1157 1
      false,
a1174 1
      false,
a1187 1
      false,
a1200 1
      false,
a1213 1
      false,
a1230 1
      false,
a1247 1
      false,
a1272 1
      false,
a1297 1
      false,
a1318 1
      false,
a1339 1
      false,
a1356 1
      false,
a1373 1
      false,
a1390 1
      false,
a1407 1
      false,
a1432 1
      false,
a1457 1
      false,
a1482 1
      false,
a1507 1
      false,
a1524 1
      false,
a1541 1
      false,
a1559 1
      false,
a1576 1
      false,
a1593 1
      false,
a1610 1
      false,
a1627 1
      false,
a1644 1
      false,
a1669 1
      false,
a1694 1
      false,
a1711 1
      false,
a1728 1
      false,
a1745 1
      false,
a1762 1
      false,
a1779 1
      false,
a1796 1
      false,
a1821 1
      false,
a1846 1
      false,
a1875 1
      false,
a1904 1
      false,
a1933 1
      false,
a1962 1
      false,
a1987 1
      false,
a2012 1
      false,
a2025 1
      false,
a2038 1
      false,
a2051 1
      false,
a2064 1
      false,
a2077 1
      false,
a2094 1
      false,
a2111 1
      false,
a2124 1
      false,
a2137 1
      false,
a2150 1
      false,
a2163 1
      false,
a2176 1
      false,
a2189 1
      false,
a2202 1
      false,
a2215 1
      false,
a2228 1
      false,
a2241 1
      false,
a2256 1
      false,
a2271 1
      false,
a2286 1
      false,
a2301 1
      false,
a2314 1
      false,
a2327 1
      false,
a2340 1
      false,
a2353 1
      false,
a2368 1
      false,
a2383 1
      false,
a2398 1
      false,
a2411 1
      false,
a2424 1
      false,
a2437 1
      false,
a2454 1
      false,
a2469 1
      false,
a2484 1
      false,
a2499 1
      false,
a2518 1
      false,
a2537 1
      false,
a2552 1
      false,
a2567 1
      false,
a2582 1
      false,
a2597 1
      false,
a2612 1
      false,
a2627 1
      false,
a2642 1
      false,
a2657 1
      false,
a2672 1
      false,
a2687 1
      false,
a2702 1
      false,
a2717 1
      false,
a2732 1
      false,
a2747 1
      false,
a2762 1
      false,
a2777 1
      false,
a2792 1
      false,
a2807 1
      false,
a2822 1
      false,
a2837 1
      false,
a2852 1
      false,
a2867 1
      false,
a2882 1
      false,
a2897 1
      false,
a2912 1
      false,
a2927 1
      false,
a2942 1
      false,
a2957 1
      false,
a2972 1
      false,
a2985 1
      false,
a2998 1
      false,
a3011 1
      false,
a3024 1
      false,
a3039 1
      false,
a3056 1
      false,
a3071 1
      false,
a3086 1
      false,
a3101 1
      false,
a3116 1
      false,
a3131 1
      false,
a3150 1
      false,
a3171 1
      false,
a3188 1
      false,
a3203 1
      false,
a3218 1
      false,
a3233 1
      false,
a3248 1
      false,
a3263 1
      false,
a3278 1
      false,
a3293 1
      false,
a3308 1
      false,
a3323 1
      false,
a3338 1
      false,
a3353 1
      false,
a3368 1
      false,
a3383 1
      false,
a3398 1
      false,
a3413 1
      false,
a3428 1
      false,
a3443 1
      false,
a3462 1
      false,
a3477 1
      false,
a3492 1
      false,
a3507 1
      false,
a3522 1
      false,
a3537 1
      false,
a3552 1
      false,
a3567 1
      false,
a3582 1
      false,
a3597 1
      false,
a3612 1
      false,
a3627 1
      false,
a3642 1
      false,
a3657 1
      false,
a3672 1
      false,
a3691 1
      false,
a3710 1
      false,
a3725 1
      false,
a3740 1
      false,
a3755 1
      false,
a3770 1
      false,
a3785 1
      false,
a3800 1
      false,
a3813 1
      false,
a3826 1
      false,
a3847 1
      false,
a3868 1
      false,
a3881 1
      false,
a3894 1
      false,
a3917 1
      false,
a3930 1
      false,
a3943 1
      false,
a3956 1
      false,
a3969 1
      false,
a3982 1
      false,
a3995 1
      false,
a4008 1
      false,
a4021 1
      false,
a4034 1
      false,
a4053 1
      false,
a4072 1
      false,
a4091 1
      false,
a4110 1
      false,
a4129 1
      false,
a4148 1
      false,
a4167 1
      false,
a4186 1
      false,
a4205 1
      false,
a4224 1
      false,
a4243 1
      false,
a4262 1
      false,
a4281 1
      false,
a4300 1
      false,
a4319 1
      false,
a4338 1
      false,
a4357 1
      false,
a4376 1
      false,
a4395 1
      false,
a4414 1
      false,
a4433 1
      false,
a4452 1
      false,
a4471 1
      false,
a4490 1
      false,
a4509 1
      false,
a4528 1
      false,
a4547 1
      false,
a4566 1
      false,
a4585 1
      false,
a4604 1
      false,
a4623 1
      false,
a4636 1
      false,
a4649 1
      false,
a4662 1
      false,
a4675 1
      false,
a4688 1
      false,
a4701 1
      false,
a4714 1
      false,
a4727 1
      false,
a4740 1
      false,
a4751 1
      false,
a4772 1
      false,
a4793 1
      false,
a4816 1
      false,
a4839 1
      false,
d4851 1
a4851 2
      true,
      false)
a4861 1
      false,
a4888 1
      true,
a4901 1
      false,
a4912 1
      false,
a4925 1
      false,
a4936 1
      false,
a4947 1
      false,
a4960 1
      false,
a4971 1
      false,
a4984 1
      false,
a4997 1
      false,
a5010 1
      false,
a5023 1
      false,
a5040 1
      false,
a5057 1
      false,
a5074 1
      false,
a5091 1
      false,
a5108 1
      false,
a5125 1
      false,
a5142 1
      false,
a5159 1
      false,
a5176 1
      false,
a5193 1
      false,
a5210 1
      false,
a5227 1
      false,
a5244 1
      false,
a5261 1
      false,
a5278 1
      false,
a5295 1
      false,
a5312 1
      false,
a5329 1
      false,
a5346 1
      false,
a5363 1
      false,
a5380 1
      false,
a5397 1
      false,
a5414 1
      false,
a5431 1
      false,
a5448 1
      false,
a5465 1
      false,
a5482 1
      false,
a5499 1
      false,
a5516 1
      false,
a5533 1
      false,
a5550 1
      false,
a5567 1
      false,
a5580 1
      false,
a5593 1
      false,
a5610 1
      false,
a5631 1
      false,
a5652 1
      false,
a5669 1
      false,
a5686 1
      false,
a5703 1
      false,
a5720 1
      false,
a5737 1
      false,
a5754 1
      false,
a5771 1
      false,
a5788 1
      false,
a5805 1
      false,
a5822 1
      false,
a5839 1
      false,
a5856 1
      false,
a5873 1
      false,
a5890 1
      false,
a5907 1
      false,
a5924 1
      false,
a5941 1
      false,
a5958 1
      false,
a5971 1
      false,
a5984 1
      false,
a5997 1
      false,
a6010 1
      false,
a6023 1
      false,
a6036 1
      false,
a6049 1
      false,
a6062 1
      false,
a6075 1
      false,
a6088 1
      false,
a6103 1
      true,
a6118 1
      true,
a6135 1
      true,
a6152 1
      true,
a6169 1
      true,
a6186 1
      true,
a6199 1
      false,
a6212 1
      false,
d6226 1
a6226 2
      true,
      false)
a6238 1
      false,
a6251 1
      false,
a6266 1
      false,
a6285 1
      false,
a6304 1
      false,
a6319 1
      false,
a6334 1
      false,
a6349 1
      false,
a6364 1
      false,
a6379 1
      false,
a6394 1
      false,
a6409 1
      false,
a6424 1
      false,
a6439 1
      false,
a6454 1
      false,
a6469 1
      false,
a6484 1
      false,
a6499 1
      false,
a6514 1
      false,
a6529 1
      false,
a6544 1
      false,
a6559 1
      false,
a6574 1
      false,
a6589 1
      false,
a6604 1
      false,
a6617 1
      false,
a6630 1
      false,
a6645 1
      false,
a6660 1
      false,
a6675 1
      false,
a6690 1
      false,
a6705 1
      false,
a6720 1
      false,
a6736 1
      false,
a6751 1
      false,
a6766 1
      false,
a6785 1
      false,
a6804 1
      false,
a6819 1
      false,
a6834 1
      false,
a6849 1
      false,
a6864 1
      false,
a6877 1
      false,
a6890 1
      false,
a6903 1
      false,
a6916 1
      false,
a6929 1
      false,
a6942 1
      false,
a6955 1
      false,
a6968 1
      false,
a6981 1
      false,
a6994 1
      false,
a7007 1
      false,
a7026 1
      false,
a7045 1
      false,
a7064 1
      false,
a7083 1
      false,
a7102 1
      false,
a7121 1
      false,
a7140 1
      false,
a7159 1
      false,
a7178 1
      false,
a7197 1
      false,
a7216 1
      false,
a7235 1
      false,
a7254 1
      false,
a7273 1
      false,
a7292 1
      false,
a7311 1
      false,
a7330 1
      false,
a7349 1
      false,
a7368 1
      false,
a7387 1
      false,
a7406 1
      false,
a7425 1
      false,
a7444 1
      false,
a7463 1
      false,
a7482 1
      false,
a7495 1
      false,
a7508 1
      false,
a7521 1
      false,
a7534 1
      false,
a7547 1
      false,
a7560 1
      false,
a7573 1
      false,
a7586 1
      false,
a7599 1
      false,
a7610 1
      false,
a7621 1
      false,
a7638 1
      false,
a7651 1
      false,
a7666 1
      false,
a7681 1
      false,
a7696 1
      false,
a7717 1
      false,
a7734 1
      false,
a7751 1
      false,
a7768 1
      false,
a7785 1
      false,
a7802 1
      false,
a7815 1
      false,
a7828 1
      false,
a7845 1
      false,
a7862 1
      false,
a7879 1
      false,
a7896 1
      false,
a7913 1
      false,
a7930 1
      false,
a7943 1
      false,
a7956 1
      false,
a7969 1
      false,
a7982 1
      false,
a8001 1
      false,
a8020 1
      false,
a8033 1
      false,
a8046 1
      false,
a8059 1
      false,
a8072 1
      false,
a8085 1
      false,
a8098 1
      false,
a8111 1
      false,
a8124 1
      false,
a8137 1
      false,
a8152 1
      false,
a8167 1
      false,
a8182 1
      false,
a8197 1
      false,
a8212 1
      false,
a8225 1
      false,
a8240 1
      false,
a8255 1
      false,
a8270 1
      false,
a8285 1
      false,
a8300 1
      false,
a8315 1
      false,
a8330 1
      false,
a8345 1
      false,
a8360 1
      false,
a8375 1
      false,
a8390 1
      false,
a8409 1
      false,
a8424 1
      false,
a8439 1
      false,
a8454 1
      false,
a8469 1
      false,
a8482 1
      false,
a8495 1
      false,
a8508 1
      false,
a8527 1
      false,
a8546 1
      false,
a8565 1
      false,
a8584 1
      false,
a8603 1
      false,
a8620 1
      false,
a8637 1
      false,
a8654 1
      false,
a8671 1
      false,
a8688 1
      false,
a8705 1
      false,
a8718 1
      false,
a8731 1
      false,
a8744 1
      false,
a8761 1
      false,
a8778 1
      false,
a8795 1
      false,
a8812 1
      false,
a8829 1
      false,
a8846 1
      false,
a8859 1
      false,
a8872 1
      false,
a8885 1
      false,
a8898 1
      false,
a8911 1
      false,
a8924 1
      false,
a8937 1
      false,
a8950 1
      false,
a8963 1
      false,
a8976 1
      false,
a8989 1
      false,
a9002 1
      false,
a9015 1
      false,
a9030 1
      false,
a9045 1
      false,
a9060 1
      false,
a9075 1
      false,
a9090 1
      false,
a9103 1
      false,
a9118 1
      false,
a9133 1
      false,
a9148 1
      false,
a9163 1
      false,
a9178 1
      false,
a9194 1
      false,
a9210 1
      false,
a9225 1
      false,
a9240 1
      false,
a9259 1
      false,
a9274 1
      false,
a9289 1
      false,
a9304 1
      false,
a9319 1
      false,
a9334 1
      false,
a9347 1
      false,
a9360 1
      false,
a9373 1
      false,
a9392 1
      false,
a9411 1
      false,
a9430 1
      false,
a9449 1
      false,
a9468 1
      false,
a9483 1
      false,
a9498 1
      false,
a9511 1
      false,
a9524 1
      false,
a9537 1
      false,
a9552 1
      false,
a9567 1
      false,
a9584 1
      false,
a9601 1
      false,
a9614 1
      false,
a9627 1
      false,
a9640 1
      true,
a9651 1
      true,
a9662 1
      true,
a9673 1
      false,
a9684 1
      false,
a9711 1
      false,
a9726 1
      true,
a9737 1
      false,
@


1.173
log
@[multi-thread]
@
text
@d36 1
a36 1
//    innerFunc    The name of the inner API fuction to be called.
d38 6
a43 1
//                 inner API function
a49 4
//
// Note: The code resulting from an invocation of this macro uses variables
// preInitMode, quietMode, and doubleMode, which are declared in the
// DefaultApiData namespace (see below) and sometimes re-declared locally.
d52 6
a57 1
#define STANDARD_API_IMPL(innerFunc, argList)                                  \
d63 1
a63 6
            startApiFunc (                                                     \
               doubleMode?                                                     \
                  #innerFunc "Dbl":                                            \
                  #innerFunc,                                                  \
               preInitMode,                                                    \
               quietMode);                                                     \
a78 35
// Namespace DefaultApiData
//
// Contains variables used (by default) by the code resulting from an invocation
// of the STANDARD_API_IMPL macro.
//------------------------------------------------------------------------------

namespace WitDefaultApiData
   {
   const bool preInitMode = false;
      //
      // This is the default value of the preInitMode argument that is passed to
      // ApiMgr::startApiFunc by the expanded code resulting from an invocation
      // of the STANDARD_API_IMPL macro.
      // In cases where a value of true is to be passed,
      // a local preInitMode variable should be declared and set to true.
      // For an example of this, see witSetMesgFileAccessMode.

   const bool quietMode = false;
      //
      // This is the same idea as above, but for the quietMode argument.

   const bool doubleMode = false;
      //
      // By default, the expanded code resulting from an invocation of the
      // STANDARD_API_IMPL macro will the pass the name of the inner API
      // function as the theFuncName argument to ApiMgr::startApiFunc.
      // For double precision functions, a local doubleMode variable should be
      // declared and set to true. This causes the macro-expanded code to pas
      // the inner function name with "Dbl" appended to the end.
      // For an example of this, see witGetBomEntryConsRateDbl.
   };

using namespace WitDefaultApiData;

//------------------------------------------------------------------------------
d95 4
a98 2
         consumedPartName)
      )
d111 4
a114 2
         producedPartName)
      )
d127 4
a130 2
         demandName)
      )
d141 4
a144 2
         operationName)
      )
d157 4
a160 2
         partCategory)
      )
d171 4
a174 2
         partAndOperationName)
      )
d189 4
a192 2
         consumedPartName)
      )
d201 4
a204 2
      witAdvanceObjItr, ()
      )
d221 4
a224 2
         incShipVol)
      )
a235 2
   const bool doubleMode = true;

d241 4
a244 2
         incShipVol)
      )
d253 4
a256 2
      witBuildPip, ()
      )
d265 4
a268 2
      witClearPegging, ()
      )
d277 4
a280 2
      witClearPipSeq, ()
      )
d291 1
a291 2
   const bool preInitMode = true;
   WitRun *   theWitRun;
d297 4
a300 2
         srcWitRun)
      )
d352 4
a355 2
         fileName)
      )
d376 4
a379 2
         incVolList)
      )
a392 2
   const bool doubleMode = true;

d400 4
a403 2
         incVolList)
      )
d426 4
a429 2
         asapMultiExecList)
      )
a443 2
   const bool doubleMode = true;

d452 4
a455 2
         asapMultiExecList)
      )
d466 4
a469 2
      witEvalObjectives, ()
      )
d480 4
a483 2
      witFinishHeurAlloc, ()
      )
d504 4
a507 2
      witGeneratePriorities, ()
      )
d518 4
a521 2
         accAfterSoftLB)
      )
d532 4
a535 2
         accAfterOptImp)
      )
d546 4
a549 2
         accelerated)
      )
d560 4
a563 2
         appData)
      )
d574 4
a577 2
         autoPriority)
      )
d592 4
a595 2
         appData)
      )
d610 4
a613 2
         consRate)
      )
a623 2
   const bool doubleMode = true;

d628 4
a631 2
         consRate)
      )
d646 4
a649 2
         earliestPeriod)
      )
d664 4
a667 2
         nSubsBomEntries)
      )
d682 4
a685 2
         consumedPartName)
      )
d700 4
a703 2
         execPenalty)
      )
a713 2
   const bool doubleMode = true;

d718 4
a721 2
         execPenalty)
      )
d736 4
a739 2
         falloutRate)
      )
a749 2
   const bool doubleMode = true;

d754 4
a757 2
         falloutRate)
      )
d772 4
a775 2
         impactPeriod)
      )
d790 4
a793 2
         latestPeriod)
      )
d808 4
a811 2
         mandEC)
      )
d826 4
a829 2
         offset)
      )
a839 2
   const bool doubleMode = true;

d844 4
a847 2
         offset)
      )
d862 4
a865 2
         propRtg)
      )
d880 4
a883 2
         routingShare)
      )
a893 2
   const bool doubleMode = true;

d898 4
a901 2
         routingShare)
      )
d916 4
a919 2
         selForDel)
      )
d934 4
a937 2
         singleSource)
      )
a947 1

d952 4
a955 2
         appData)
      )
d970 4
a973 2
         earliestPeriod)
      )
d988 4
a991 2
         expAllowed)
      )
d1006 4
a1009 2
         expAversion)
      )
a1019 2
   const bool doubleMode = true;

d1024 4
a1027 2
         expAversion)
      )
d1042 4
a1045 2
         impactPeriod)
      )
d1060 4
a1063 2
         latestPeriod)
      )
d1078 4
a1081 2
         offset)
      )
a1091 2
   const bool doubleMode = true;

d1096 4
a1099 2
         offset)
      )
d1114 4
a1117 2
         pipShare)
      )
a1127 2
   const bool doubleMode = true;

d1132 4
a1135 2
         pipShare)
      )
d1150 4
a1153 2
         productRate)
      )
a1163 2
   const bool doubleMode = true;

d1168 4
a1171 2
         productRate)
      )
d1186 4
a1189 2
         producedPartName)
      )
d1204 4
a1207 2
         routingShare)
      )
a1217 2
   const bool doubleMode = true;

d1222 4
a1225 2
         routingShare)
      )
d1240 4
a1243 2
         selForDel)
      )
d1254 4
a1257 2
         buildWhenEmpty)
      )
d1268 4
a1271 2
         compPrices)
      )
d1282 4
a1285 2
         computeCriticalList)
      )
d1300 4
a1303 2
         critPeriod)
      )
d1318 4
a1321 2
         appData)
      )
d1344 4
a1347 2
         peggedVolList)
      )
a1361 2
   const bool doubleMode = true;

d1370 4
a1373 2
         peggedVolList)
      )
d1392 4
a1395 2
         hardUpper)
      )
a1407 2
   const bool doubleMode = true;

d1414 4
a1417 2
         hardUpper)
      )
d1432 4
a1435 2
         cumShipReward)
      )
a1445 2
   const bool doubleMode = true;

d1450 4
a1453 2
         cumShipReward)
      )
d1468 4
a1471 2
         demandVol)
      )
a1481 2
   const bool doubleMode = true;

d1486 4
a1489 2
         demandVol)
      )
d1512 4
a1515 2
         peggedExecVolList)
      )
a1529 2
   const bool doubleMode = true;

d1538 4
a1541 2
         peggedExecVolList)
      )
d1564 4
a1567 2
         peggedExecVolList)
      )
a1581 2
   const bool doubleMode = true;

d1590 4
a1593 2
         peggedExecVolList)
      )
d1608 4
a1611 2
         focusHorizon)
      )
d1626 4
a1629 2
         fssShipVol)
      )
a1640 2
   const bool doubleMode = true;

d1645 4
a1648 2
         fssShipVol)
      )
d1663 4
a1666 2
         obj1CumShipReward)
      )
a1676 2
   const bool doubleMode = true;

d1681 4
a1684 2
         obj1CumShipReward)
      )
d1699 4
a1702 2
         obj1ShipReward)
      )
a1712 2
   const bool doubleMode = true;

d1717 4
a1720 2
         obj1ShipReward)
      )
d1735 4
a1738 2
         priority)
      )
d1761 4
a1764 2
         peggedVolList)
      )
a1778 2
   const bool doubleMode = true;

d1787 4
a1790 2
         peggedVolList)
      )
d1805 4
a1808 2
         shipLateLimit)
      )
d1823 4
a1826 2
         shipLateUB)
      )
d1841 4
a1844 2
         shipReward)
      )
a1854 2
   const bool doubleMode = true;

d1859 4
a1862 2
         shipReward)
      )
d1877 4
a1880 2
         shipVol)
      )
a1890 2
   const bool doubleMode = true;

d1895 4
a1898 2
         shipVol)
      )
d1921 4
a1924 2
         peggedVolList)
      )
a1938 2
   const bool doubleMode = true;

d1947 4
a1950 2
         peggedVolList)
      )
d1977 4
a1980 2
         peggedSubVolList)
      )
a1996 2
   const bool doubleMode = true;

d2007 4
a2010 2
         peggedSubVolList)
      )
d2037 4
a2040 2
         peggedSubVolList)
      )
a2056 2
   const bool doubleMode = true;

d2067 4
a2070 2
         peggedSubVolList)
      )
d2093 4
a2096 2
         peggedVolList)
      )
a2110 2
   const bool doubleMode = true;

d2119 4
a2122 2
         peggedVolList)
      )
d2133 4
a2136 2
         equitablity)
      )
d2147 4
a2150 2
         execEmptyBom)
      )
d2161 4
a2164 2
         expCutoff)
      )
a2172 2
   const bool doubleMode = true;

d2175 4
a2178 2
         expCutoff)
      )
d2189 4
a2192 2
         feasible)
      )
d2207 4
a2210 2
         shortageVolList)
      )
a2220 2
   const bool doubleMode = true;

d2225 4
a2228 2
         shortageVolList)
      )
d2239 4
a2242 2
         forcedMultiEq)
      )
d2253 4
a2256 2
         hashTableSize)
      )
d2267 4
a2270 2
         heurAllocActive)
      )
d2281 4
a2284 2
         highPrecisionWD)
      )
d2295 4
a2298 2
         independentOffsets)
      )
d2309 4
a2312 2
         lotSizeTol)
      )
a2320 2
   const bool doubleMode = true;

d2323 4
a2326 2
         lotSizeTol)
      )
d2337 4
a2340 2
         mesgFile)
      )
d2351 4
a2354 2
         mesgFileAccessMode)
      )
d2365 4
a2368 2
         mesgFileName)
      )
d2381 4
a2384 2
         mesgPrintMunber)
      )
d2397 4
a2400 2
         mesgStopRunning)
      )
d2413 4
a2416 2
         mesgThrowErrorExc)
      )
d2429 4
a2432 2
         mesgTimesPrint)
      )
d2443 4
a2446 2
         multiExec)
      )
d2457 4
a2460 2
         multiRoute)
      )
d2471 4
a2474 2
         multiThread)
      )
d2485 4
a2488 2
         nPeriods)
      )
d2501 4
a2504 2
         bomEntryIndex)
      )
d2517 4
a2520 2
         bopEntryIndex)
      )
d2533 4
a2536 2
         demandName)
      )
d2547 4
a2550 2
         operationName)
      )
d2561 4
a2564 2
         partName)
      )
d2575 4
a2578 2
         objItrState)
      )
d2593 4
a2596 2
         subsBomEntryIndex)
      )
d2609 4
a2612 2
         boundsValue)
      )
a2621 2
   const bool doubleMode = true;

d2625 4
a2628 2
         boundsValue)
      )
d2641 4
a2644 2
         appData)
      )
d2661 4
a2664 2
         hardUpper)
      )
a2675 2
   const bool doubleMode = true;

d2681 4
a2684 2
         hardUpper)
      )
d2697 4
a2700 2
         execCost)
      )
a2709 2
   const bool doubleMode = true;

d2713 4
a2716 2
         execCost)
      )
d2729 4
a2732 2
         execPenalty)
      )
a2741 2
   const bool doubleMode = true;

d2745 4
a2748 2
         execPenalty)
      )
d2761 4
a2764 2
         execVol)
      )
d2777 4
a2780 2
         execVol)
      )
a2789 2
   const bool doubleMode = true;

d2793 4
a2796 2
         execVol)
      )
d2809 4
a2812 2
         exist)
      )
d2825 4
a2828 2
         fssExecVol)
      )
a2837 2
   const bool doubleMode = true;

d2841 4
a2844 2
         fssExecVol)
      )
d2857 4
a2860 2
         incLotSize)
      )
a2869 2
   const bool doubleMode = true;

d2873 4
a2876 2
         incLotSize)
      )
d2889 4
a2892 2
         incLotSize2)
      )
a2901 2
   const bool doubleMode = true;

d2905 4
a2908 2
         incLotSize2)
      )
d2921 4
a2924 2
         lotSize2Thresh)
      )
a2933 2
   const bool doubleMode = true;

d2937 4
a2940 2
         lotSize2Thresh)
      )
d2953 4
a2956 2
         minLotSize)
      )
a2965 2
   const bool doubleMode = true;

d2969 4
a2972 2
         minLotSize)
      )
d2985 4
a2988 2
         minLotSize2)
      )
a2997 2
   const bool doubleMode = true;

d3001 4
a3004 2
         minLotSize2)
      )
d3017 4
a3020 2
         mrpExecVol)
      )
a3029 2
   const bool doubleMode = true;

d3033 4
a3036 2
         mrpExecVol)
      )
d3049 4
a3052 2
         nBomEntries)
      )
d3065 4
a3068 2
         nBopEntries)
      )
d3081 4
a3084 2
         operationList)
      )
d3097 4
a3100 2
         selForDel)
      )
d3113 4
a3116 2
         twoLevelLotSizes)
      )
d3129 4
a3132 2
         yieldRate)
      )
a3141 2
   const bool doubleMode = true;

d3145 4
a3148 2
         yieldRate)
      )
d3159 4
a3162 2
         optInitMethod)
      )
d3173 4
a3176 2
         oslMesgFileName)
      )
d3187 4
a3190 2
         outputPrecision)
      )
d3201 4
a3204 2
         postprocessed)
      )
d3217 4
a3220 2
         appData)
      )
d3235 4
a3238 2
         partNameList)
      )
d3251 4
a3254 2
         buildAheadUB)
      )
d3267 4
a3270 2
         buildAsap)
      )
d3283 4
a3286 2
         buildNstn)
      )
d3299 4
a3302 2
         consVol)
      )
a3311 2
   const bool doubleMode = true;

d3315 4
a3318 2
         consVol)
      )
d3335 4
a3338 2
         bomEntryIndex)
      )
d3357 4
a3360 2
         subsBomEntryIndex)
      )
d3375 4
a3378 2
         demandList)
      )
d3391 4
a3394 2
         category)
      )
d3407 4
a3410 2
         excessVol)
      )
a3419 2
   const bool doubleMode = true;

d3423 4
a3426 2
         excessVol)
      )
d3439 4
a3442 2
         exist)
      )
d3455 4
a3458 2
         shortageVol)
      )
a3467 2
   const bool doubleMode = true;

d3471 4
a3474 2
         shortageVol)
      )
d3487 4
a3490 2
         mrpConsVol)
      )
a3499 2
   const bool doubleMode = true;

d3503 4
a3506 2
         mrpConsVol)
      )
d3519 4
a3522 2
         mrpExcessVol)
      )
a3531 2
   const bool doubleMode = true;

d3535 4
a3538 2
         mrpExcessVol)
      )
d3551 4
a3554 2
         mrpResidualVol)
      )
a3563 2
   const bool doubleMode = true;

d3567 4
a3570 2
         mrpResidualVol)
      )
d3583 4
a3586 2
         nConsumingBomEntries)
      )
d3599 4
a3602 2
         nConsumingSubsBomEntries)
      )
d3615 4
a3618 2
         nProducingBopEntries)
      )
d3631 4
a3634 2
         prodVol)
      )
a3643 2
   const bool doubleMode = true;

d3647 4
a3650 2
         prodVol)
      )
d3667 4
a3670 2
         bopEntryIndex)
      )
d3683 4
a3686 2
         propRtg)
      )
d3699 4
a3702 2
         reqVol)
      )
a3711 2
   const bool doubleMode = true;

d3715 4
a3718 2
         reqVol)
      )
d3731 4
a3734 2
         residualVol)
      )
a3743 2
   const bool doubleMode = true;

d3747 4
a3750 2
         residualVol)
      )
d3763 4
a3766 2
         partList)
      )
d3779 4
a3782 2
         scrapCost)
      )
a3791 2
   const bool doubleMode = true;

d3795 4
a3798 2
         scrapCost)
      )
d3811 4
a3814 2
         scrapVol)
      )
a3823 2
   const bool doubleMode = true;

d3827 4
a3830 2
         scrapVol)
      )
d3843 4
a3846 2
         selForDel)
      )
d3859 4
a3862 2
         shadowPrice)
      )
a3871 2
   const bool doubleMode = true;

d3875 4
a3878 2
         shadowPrice)
      )
d3891 4
a3894 2
         singleSource)
      )
d3911 4
a3914 2
         hardUpper)
      )
a3925 2
   const bool doubleMode = true;

d3931 4
a3934 2
         hardUpper)
      )
d3947 4
a3950 2
         stockCost)
      )
a3959 2
   const bool doubleMode = true;

d3963 4
a3966 2
         stockCost)
      )
d3979 4
a3982 2
         stockVol)
      )
a3991 2
   const bool doubleMode = true;

d3995 4
a3998 2
         stockVol)
      )
d4011 4
a4014 2
         supplyVol)
      )
a4023 2
   const bool doubleMode = true;

d4027 4
a4030 2
         supplyVol)
      )
d4041 4
a4044 2
         penExec)
      )
d4055 4
a4058 2
         pipExists)
      )
d4077 4
a4080 2
         incShipVolList)
      )
a4092 2
   const bool doubleMode = true;

d4099 4
a4102 2
         incShipVolList)
      )
d4113 4
a4116 2
         pipSeqFromHeur)
      )
d4127 4
a4130 2
         perfPegging)
      )
d4151 4
a4154 2
         shipPerList)
      )
d4165 4
a4168 2
         pgdCritListMode)
      )
d4179 4
a4182 2
         postSolveRecovery)
      )
d4193 4
a4196 2
         prefHighStockSLBs)
      )
d4207 4
a4210 2
         preprocessed)
      )
d4221 4
a4224 2
         respectStockSLBs)
      )
d4235 4
a4238 2
         roundReqVols)
      )
d4249 4
a4252 2
         selSplit)
      )
d4263 4
a4266 2
         skipFailures)
      )
d4277 4
a4280 2
         stockReallocation)
      )
d4297 4
a4300 2
         appData)
      )
d4317 4
a4320 2
         consRate)
      )
a4331 2
   const bool doubleMode = true;

d4337 4
a4340 2
         consRate)
      )
d4357 4
a4360 2
         consumedPart)
      )
d4377 4
a4380 2
         earliestPeriod)
      )
d4397 4
a4400 2
         execPenalty)
      )
a4411 2
   const bool doubleMode = true;

d4417 4
a4420 2
         execPenalty)
      )
d4437 4
a4440 2
         expAllowed)
      )
d4457 4
a4460 2
         expNetAversion)
      )
a4471 2
   const bool doubleMode = true;

d4477 4
a4480 2
         expNetAversion)
      )
d4497 4
a4500 2
         falloutRate)
      )
a4511 2
   const bool doubleMode = true;

d4517 4
a4520 2
         falloutRate)
      )
d4537 4
a4540 2
         fssSubVol)
      )
a4551 2
   const bool doubleMode = true;

d4557 4
a4560 2
         fssSubVol)
      )
d4577 4
a4580 2
         impactPeriod)
      )
d4597 4
a4600 2
         latestPeriod)
      )
d4617 4
a4620 2
         mrpNetAllowed)
      )
d4637 4
a4640 2
         mrpSubVol)
      )
a4651 2
   const bool doubleMode = true;

d4657 4
a4660 2
         mrpSubVol)
      )
d4677 4
a4680 2
         netAllowed)
      )
d4697 4
a4700 2
         obj1SubCost)
      )
a4711 2
   const bool doubleMode = true;

d4717 4
a4720 2
         obj1SubCost)
      )
d4737 4
a4740 2
         offset)
      )
a4751 2
   const bool doubleMode = true;

d4757 4
a4760 2
         offset)
      )
d4777 4
a4780 2
         routingShare)
      )
a4791 2
   const bool doubleMode = true;

d4797 4
a4800 2
         routingShare)
      )
d4817 4
a4820 2
         selForDel)
      )
d4837 4
a4840 2
         subCost)
      )
a4851 2
   const bool doubleMode = true;

d4857 4
a4860 2
         subCost)
      )
d4877 4
a4880 2
         subVol)
      )
a4891 2
   const bool doubleMode = true;

d4897 4
a4900 2
         subVol)
      )
d4911 4
a4914 2
         tieBreakPropRt)
      )
d4925 4
a4928 2
         title)
      )
d4939 4
a4942 2
         truncOffsets)
      )
d4953 4
a4956 2
         twoWayMultiExec)
      )
d4967 4
a4970 2
         useFocusHorizons)
      )
d4981 4
a4984 2
         userHeurStart)
      )
d4995 4
a4998 2
         wbounds)
      )
a5006 2
   const bool doubleMode = true;

d5009 4
a5012 2
         wbounds)
      )
d5023 4
a5026 2
         wit34Compatible)
      )
d5035 4
a5038 2
      witHeurImplode, ()
      )
d5057 4
a5060 2
         incVol)
      )
a5072 2
   const bool doubleMode = true;

d5079 4
a5082 2
         incVol)
      )
d5103 4
a5106 2
         asapMultiExec)
      )
a5119 2
   const bool doubleMode = true;

d5127 4
a5130 2
         asapMultiExec)
      )
a5137 2
   const bool preInitMode = true;

d5139 4
a5142 2
      witInitialize, ()
      )
d5151 4
a5154 2
      witMrp, ()
      )
d5164 1
a5164 3
   const bool preInitMode = true;
   const bool quietMode   = true;
   WitRun *   theWitRun;
d5179 4
a5182 2
      witNewRun, ()
      )
d5193 4
a5196 2
      witOptImplode, ()
      )
d5205 4
a5208 2
      witOptPreprocess, ()
      )
d5219 4
a5222 2
      witPreprocess, ()
      )
d5231 4
a5234 2
      witPostprocess, ()
      )
d5243 4
a5246 2
      witPurgeData, ()
      )
d5257 4
a5260 2
         fileName)
      )
d5269 4
a5272 2
      witResetObjItr, ()
      )
d5283 4
a5286 2
         accAfterSoftLB)
      )
d5297 4
a5300 2
         accAfterOptImp)
      )
d5311 4
a5314 2
         appData)
      )
d5325 4
a5328 2
         autoPriority)
      )
d5343 4
a5346 2
         appData)
      )
d5361 4
a5364 2
         consRate)
      )
a5374 2
   const bool doubleMode = true;

d5379 4
a5382 2
         consRate)
      )
d5397 4
a5400 2
         earliestPeriod)
      )
d5415 4
a5418 2
         execPenalty)
      )
a5428 2
   const bool doubleMode = true;

d5433 4
a5436 2
         execPenalty)
      )
d5451 4
a5454 2
         falloutRate)
      )
a5464 2
   const bool doubleMode = true;

d5469 4
a5472 2
         falloutRate)
      )
d5487 4
a5490 2
         latestPeriod)
      )
d5505 4
a5508 2
         mandEC)
      )
d5523 4
a5526 2
         offset)
      )
a5536 2
   const bool doubleMode = true;

d5541 4
a5544 2
         offset)
      )
d5559 4
a5562 2
         propRtg)
      )
d5577 4
a5580 2
         routingShare)
      )
a5590 2
   const bool doubleMode = true;

d5595 4
a5598 2
         routingShare)
      )
d5613 4
a5616 2
         selForDel)
      )
d5631 4
a5634 2
         singleSource)
      )
d5649 4
a5652 2
         appData)
      )
d5667 4
a5670 2
         earliestPeriod)
      )
d5685 4
a5688 2
         expAllowed)
      )
d5703 4
a5706 2
         expAversion)
      )
a5716 2
   const bool doubleMode = true;

d5721 4
a5724 2
         expAversion)
      )
d5739 4
a5742 2
         latestPeriod)
      )
d5757 4
a5760 2
         offset)
      )
a5770 2
   const bool doubleMode = true;

d5775 4
a5778 2
         offset)
      )
d5793 4
a5796 2
         pipShare)
      )
a5806 2
   const bool doubleMode = true;

d5811 4
a5814 2
         pipShare)
      )
d5829 4
a5832 2
         productRate)
      )
a5842 2
   const bool doubleMode = true;

d5847 4
a5850 2
         productRate)
      )
d5865 4
a5868 2
         routingShare)
      )
a5878 2
   const bool doubleMode = true;

d5883 4
a5886 2
         routingShare)
      )
d5901 4
a5904 2
         selForDel)
      )
d5915 4
a5918 2
         compPrices)
      )
d5929 4
a5932 2
         computeCriticalList)
      )
d5947 4
a5950 2
         appData)
      )
d5969 4
a5972 2
         hardUpper)
      )
a5984 2
   const bool doubleMode = true;

d5991 4
a5994 2
         hardUpper)
      )
d6009 4
a6012 2
         cumShipReward)
      )
a6022 2
   const bool doubleMode = true;

d6027 4
a6030 2
         cumShipReward)
      )
d6045 4
a6048 2
         demandVol)
      )
a6058 2
   const bool doubleMode = true;

d6063 4
a6066 2
         demandVol)
      )
d6081 4
a6084 2
         focusHorizon)
      )
d6099 4
a6102 2
         fssShipVol)
      )
a6112 2
   const bool doubleMode = true;

d6117 4
a6120 2
         fssShipVol)
      )
d6135 4
a6138 2
         obj1CumShipReward)
      )
a6148 2
   const bool doubleMode = true;

d6153 4
a6156 2
         obj1CumShipReward)
      )
d6171 4
a6174 2
         obj1ShipReward)
      )
a6184 2
   const bool doubleMode = true;

d6189 4
a6192 2
         obj1ShipReward)
      )
d6207 4
a6210 2
         priority)
      )
d6225 4
a6228 2
         selForDel)
      )
d6243 4
a6246 2
         shipLateUB)
      )
d6261 4
a6264 2
         shipReward)
      )
a6274 2
   const bool doubleMode = true;

d6279 4
a6282 2
         shipReward)
      )
d6297 4
a6300 2
         shipVol)
      )
a6310 2
   const bool doubleMode = true;

d6315 4
a6318 2
         shipVol)
      )
d6329 4
a6332 2
         equitablity)
      )
d6343 4
a6346 2
         execEmptyBom)
      )
d6357 4
a6360 2
         expCutoff)
      )
a6368 2
   const bool doubleMode = true;

d6371 4
a6374 2
         expCutoff)
      )
d6385 4
a6388 2
         forcedMultiEq)
      )
d6399 4
a6402 2
         hashTableSize)
      )
d6413 4
a6416 2
         highPrecisionWD)
      )
d6427 4
a6430 2
         independentOffsets)
      )
d6441 4
a6444 2
         lotSizeTol)
      )
a6452 2
   const bool doubleMode = true;

d6455 4
a6458 2
         lotSizeTol)
      )
a6467 3
   const bool preInitMode = true;
   const bool quietMode   = true;

d6471 4
a6474 2
         mesgFileAccessMode)
      )
a6483 3
   const bool preInitMode = true;
   const bool quietMode   = true;

d6487 4
a6490 2
         mesgFileName)
      )
a6500 3
   const bool preInitMode = true;
   const bool quietMode   = true;

d6505 4
a6508 2
         mesgPrintMunber)
      )
a6518 3
   const bool preInitMode = true;
   const bool quietMode   = true;

d6523 4
a6526 2
         mesgStopRunning)
      )
a6536 3
   const bool preInitMode = true;
   const bool quietMode   = true;

d6541 4
a6544 2
         mesgThrowErrorExc)
      )
a6554 3
   const bool preInitMode = true;
   const bool quietMode   = true;

d6559 4
a6562 2
         mesgTimesPrint)
      )
d6573 4
a6576 2
         multiExec)
      )
d6587 4
a6590 2
         multiRoute)
      )
a6598 2
   const bool preInitMode = true;

d6601 4
a6604 2
         multiThread)
      )
d6615 4
a6618 2
         nPeriods)
      )
d6629 4
a6632 2
         oslMesgFileName)
      )
d6645 4
a6648 2
         appData)
      )
d6665 4
a6668 2
         hardUpper)
      )
a6679 2
   const bool doubleMode = true;

d6685 4
a6688 2
         hardUpper)
      )
d6701 4
a6704 2
         execCost)
      )
a6713 2
   const bool doubleMode = true;

d6717 4
a6720 2
         execCost)
      )
d6733 4
a6736 2
         execPenalty)
      )
a6745 2
   const bool doubleMode = true;

d6749 4
a6752 2
         execPenalty)
      )
d6765 4
a6768 2
         execVol)
      )
a6777 2
   const bool doubleMode = true;

d6781 4
a6784 2
         execVol)
      )
d6797 4
a6800 2
         incLotSize)
      )
a6809 2
   const bool doubleMode = true;

d6813 4
a6816 2
         incLotSize)
      )
d6829 4
a6832 2
         incLotSize2)
      )
a6841 2
   const bool doubleMode = true;

d6845 4
a6848 2
         incLotSize2)
      )
d6861 4
a6864 2
         lotSize2Thresh)
      )
a6873 2
   const bool doubleMode = true;

d6877 4
a6880 2
         lotSize2Thresh)
      )
d6893 4
a6896 2
         minLotSize)
      )
a6905 2
   const bool doubleMode = true;

d6909 4
a6912 2
         minLotSize)
      )
d6925 4
a6928 2
         minLotSize2)
      )
a6937 2
   const bool doubleMode = true;

d6941 4
a6944 2
         minLotSize2)
      )
d6957 4
a6960 2
         selForDel)
      )
d6973 4
a6976 2
         twoLevelLotSizes)
      )
d6989 4
a6992 2
         yieldRate)
      )
a7001 2
   const bool doubleMode = true;

d7005 4
a7008 2
         yieldRate)
      )
d7019 4
a7022 2
         optInitMethod)
      )
d7033 4
a7036 2
         outputPrecision)
      )
d7049 4
a7052 2
         appData)
      )
d7065 4
a7068 2
         buildAheadUB)
      )
d7081 4
a7084 2
         buildAsap)
      )
d7097 4
a7100 2
         buildNstn)
      )
d7113 4
a7116 2
         propRtg)
      )
d7129 4
a7132 2
         scrapCost)
      )
a7141 2
   const bool doubleMode = true;

d7146 4
a7149 2
         )
      )
d7162 4
a7165 2
         selForDel)
      )
d7178 4
a7181 2
         singleSource)
      )
d7198 4
a7201 2
         hardUpper)
      )
a7212 2
   const bool doubleMode = true;

d7218 4
a7221 2
         hardUpper)
      )
d7234 4
a7237 2
         stockCost)
      )
a7246 2
   const bool doubleMode = true;

d7250 4
a7253 2
         stockCost)
      )
d7266 4
a7269 2
         supplyVol)
      )
a7278 2
   const bool doubleMode = true;

d7282 4
a7285 2
         supplyVol)
      )
d7296 4
a7299 2
         penExec)
      )
d7310 4
a7313 2
         perfPegging)
      )
d7324 4
a7327 2
         pgdCritListMode)
      )
d7338 4
a7341 2
         pipSeqFromHeur)
      )
d7352 4
a7355 2
         postSolveRecovery)
      )
d7366 4
a7369 2
         prefHighStockSLBs)
      )
d7380 4
a7383 2
         respectStockSLBs)
      )
d7394 4
a7397 2
         roundReqVols)
      )
d7408 4
a7411 2
         selSplit)
      )
d7422 4
a7425 2
         skipFailures)
      )
d7436 4
a7439 2
         stockReallocation)
      )
d7456 4
a7459 2
         appData)
      )
d7476 4
a7479 2
         consRate)
      )
a7490 2
   const bool doubleMode = true;

d7496 4
a7499 2
         consRate)
      )
d7516 4
a7519 2
         earliestPeriod)
      )
d7536 4
a7539 2
         execPenalty)
      )
a7550 2
   const bool doubleMode = true;

d7556 4
a7559 2
         execPenalty)
      )
d7576 4
a7579 2
         expAllowed)
      )
d7596 4
a7599 2
         expNetAversion)
      )
a7610 2
   const bool doubleMode = true;

d7616 4
a7619 2
         expNetAversion)
      )
d7636 4
a7639 2
         falloutRate)
      )
a7650 2
   const bool doubleMode = true;

d7656 4
a7659 2
         falloutRate)
      )
d7676 4
a7679 2
         latestPeriod)
      )
d7696 4
a7699 2
         mrpNetAllowed)
      )
d7716 4
a7719 2
         netAllowed)
      )
d7736 4
a7739 2
         obj1SubCost)
      )
a7750 2
   const bool doubleMode = true;

d7756 4
a7759 2
         obj1SubCost)
      )
d7776 4
a7779 2
         offset)
      )
a7790 2
   const bool doubleMode = true;

d7796 4
a7799 2
         offset)
      )
d7816 4
a7819 2
         routingShare)
      )
a7830 2
   const bool doubleMode = true;

d7836 4
a7839 2
         routingShare)
      )
d7856 4
a7859 2
         selForDel)
      )
d7876 4
a7879 2
         subCost)
      )
a7890 2
   const bool doubleMode = true;

d7896 4
a7899 2
         subCost)
      )
d7916 4
a7919 2
         subVol)
      )
a7930 2
   const bool doubleMode = true;

d7936 4
a7939 2
         subVol)
      )
d7950 4
a7953 2
         tieBreakPropRt)
      )
d7964 4
a7967 2
         title)
      )
d7978 4
a7981 2
         truncOffsets)
      )
d7992 4
a7995 2
         twoWayMultiExec)
      )
d8006 4
a8009 2
         useFocusHorizons)
      )
d8020 4
a8023 2
         userHeurStart)
      )
d8034 4
a8037 2
         wbounds)
      )
a8045 2
   const bool doubleMode = true;

d8048 4
a8051 2
         wbounds)
      )
d8062 4
a8065 2
         wit34Compatible)
      )
d8074 4
a8077 2
      witShutDownHeurAlloc, ()
      )
d8086 4
a8089 2
      witStartHeurAlloc, ()
      )
d8104 4
a8107 2
         maxListLen)
      )
d8118 4
a8121 2
         fileName)
      )
d8134 4
a8137 2
         fileFormat)
      )
d8150 4
a8153 2
         fileFormat)
      )
d8166 4
a8169 2
         fileFormat)
      )
d8188 4
a8191 2
         fallout)
      )
d8206 4
a8209 2
         propRouting)
      )
d8224 4
a8227 2
         usageRate)
      )
d8242 4
a8245 2
         time)
      )
d8260 4
a8263 2
         byProduct)
      )
d8278 4
a8281 2
         prodRate)
      )
d8292 4
a8295 2
         capCost)
      )
a8303 2
   const bool doubleMode = true;

d8306 4
a8309 2
         capCost)
      )
d8324 4
a8327 2
         buildAheadLimit)
      )
d8342 4
a8345 2
         buildAheadUB)
      )
d8360 4
a8363 2
         grossRev)
      )
a8373 2
   const bool doubleMode = true;

d8378 4
a8381 2
         grossRev)
      )
d8396 4
a8399 2
         prefBuildAhead)
      )
d8414 4
a8417 2
         shipLateLimit)
      )
d8428 4
a8431 2
         invCost)
      )
a8439 2
   const bool doubleMode = true;

d8442 4
a8445 2
         invCost)
      )
d8456 4
a8459 2
         localBuildAhead)
      )
d8470 4
a8473 2
         localMultiExec)
      )
d8490 4
a8493 2
         subsValue)
      )
a8504 2
   const bool doubleMode = true;

d8510 4
a8513 2
         subsValue)
      )
d8524 4
a8527 2
         obj2Winv)
      )
a8535 2
   const bool doubleMode = true;

d8538 4
a8541 2
         obj2Winv)
      )
d8552 4
a8555 2
         obj2Wrev)
      )
a8563 2
   const bool doubleMode = true;

d8566 4
a8569 2
         obj2Wrev)
      )
d8580 4
a8583 2
         obj2Wserv)
      )
a8591 2
   const bool doubleMode = true;

d8594 4
a8597 2
         obj2Wserv)
      )
d8608 4
a8611 2
         obj2Wsub)
      )
a8619 2
   const bool doubleMode = true;

d8622 4
a8625 2
         obj2Wsub)
      )
d8636 4
a8639 2
         objChoice)
      )
d8652 4
a8655 2
         obj1ExecCost)
      )
a8664 2
   const bool doubleMode = true;

d8668 4
a8671 2
         obj1ExecCost)
      )
d8684 4
a8687 2
         obj2AuxCost)
      )
a8696 2
   const bool doubleMode = true;

d8700 4
a8703 2
         obj2AuxCost)
      )
d8716 4
a8719 2
         yield)
      )
d8730 4
a8733 2
         optWithLotSizes)
      )
d8746 4
a8749 2
         buildAheadLimit)
      )
d8762 4
a8765 2
         cycleTime)
      )
d8778 4
a8781 2
         incLotSize)
      )
d8794 4
a8797 2
         minLotSize)
      )
d8810 4
a8813 2
         mrpProdVol)
      )
d8826 4
a8829 2
         nBomEntries)
      )
d8842 4
a8845 2
         obj1ProdCost)
      )
d8858 4
a8861 2
         obj1ScrapCost)
      )
a8870 2
   const bool doubleMode = true;

d8874 4
a8877 2
         obj1ScrapCost)
      )
d8890 4
a8893 2
         obj1StockCost)
      )
a8902 2
   const bool doubleMode = true;

d8906 4
a8909 2
         obj1StockCost)
      )
d8926 4
a8929 2
         hardUpper)
      )
d8942 4
a8945 2
         propRouting)
      )
d8958 4
a8961 2
         unitCost)
      )
a8970 2
   const bool doubleMode = true;

d8974 4
a8977 2
         unitCost)
      )
d8990 4
a8993 2
         yield)
      )
d9004 4
a9007 2
         periodsPerYear)
      )
a9015 2
   const bool doubleMode = true;

d9018 4
a9021 2
         periodsPerYear)
      )
d9032 4
a9035 2
         stockRealloc)
      )
d9052 4
a9055 2
         fallout)
      )
d9072 4
a9075 2
         obj2SubPenalty)
      )
a9086 2
   const bool doubleMode = true;

d9092 4
a9095 2
         obj2SubPenalty)
      )
d9112 4
a9115 2
         prodVol)
      )
d9132 4
a9135 2
         usageRate)
      )
d9150 4
a9153 2
         fallout)
      )
d9168 4
a9171 2
         propRouting)
      )
d9186 4
a9189 2
         usageRate)
      )
d9204 4
a9207 2
         time)
      )
d9222 4
a9225 2
         byProduct)
      )
d9240 4
a9243 2
         prodRate)
      )
d9254 4
a9257 2
         buildWhenEmpty)
      )
d9268 4
a9271 2
         capCost)
      )
a9279 2
   const bool doubleMode = true;

d9282 4
a9285 2
         capCost)
      )
d9300 4
a9303 2
         buildAheadLimit)
      )
d9318 4
a9321 2
         buildAheadUB)
      )
d9336 4
a9339 2
         grossRev)
      )
a9349 2
   const bool doubleMode = true;

d9354 4
a9357 2
         grossRev)
      )
d9372 4
a9375 2
         prefBuildAhead)
      )
d9390 4
a9393 2
         shipLateLimit)
      )
d9404 4
a9407 2
         invCost)
      )
a9415 2
   const bool doubleMode = true;

d9418 4
a9421 2
         invCost)
      )
d9432 4
a9435 2
         localBuildAhead)
      )
d9446 4
a9449 2
         localMultiExec)
      )
d9460 4
a9463 2
         obj2Winv)
      )
a9471 2
   const bool doubleMode = true;

d9474 4
a9477 2
         obj2Winv)
      )
d9488 4
a9491 2
         obj2Wrev)
      )
a9499 2
   const bool doubleMode = true;

d9502 4
a9505 2
         obj2Wrev)
      )
d9516 4
a9519 2
         obj2Wserv)
      )
a9527 2
   const bool doubleMode = true;

d9530 4
a9533 2
         obj2Wserv)
      )
d9544 4
a9547 2
         obj2Wsub)
      )
a9555 2
   const bool doubleMode = true;

d9558 4
a9561 2
         obj2Wsub)
      )
d9572 4
a9575 2
         objChoice)
      )
d9588 4
a9591 2
         obj1ExecCost)
      )
a9600 2
   const bool doubleMode = true;

d9604 4
a9607 2
         obj1ExecCost)
      )
d9620 4
a9623 2
         obj2AuxCost)
      )
a9632 2
   const bool doubleMode = true;

d9636 4
a9639 2
         obj2AuxCost)
      )
d9652 4
a9655 2
         yield)
      )
d9666 4
a9669 2
         optWithLotSizes)
      )
d9682 4
a9685 2
         buildAheadLimit)
      )
d9698 4
a9701 2
         cycleTime)
      )
d9714 4
a9717 2
         incLotSize)
      )
d9730 4
a9733 2
         minLotSize)
      )
d9746 4
a9749 2
         obj1ProdCost)
      )
d9763 4
a9766 2
         )
      )
a9775 2
   const bool doubleMode = true;

d9780 4
a9783 2
         )
      )
d9796 4
a9799 2
         obj1StockCost)
      )
a9808 2
   const bool doubleMode = true;

d9812 4
a9815 2
         obj1StockCost)
      )
d9832 4
a9835 2
         hardUpper)
      )
d9848 4
a9851 2
         prodVol)
      )
d9864 4
a9867 2
         propRouting)
      )
d9880 4
a9883 2
         unitCost)
      )
a9892 2
   const bool doubleMode = true;

d9896 4
a9899 2
         unitCost)
      )
d9912 4
a9915 2
         yield)
      )
d9926 4
a9929 2
         periodsPerYear)
      )
a9937 2
   const bool doubleMode = true;

d9940 4
a9943 2
         periodsPerYear)
      )
d9954 4
a9957 2
         stockRealloc)
      )
d9974 4
a9977 2
         fallout)
      )
d9994 4
a9997 2
         obj2SubPenalty)
      )
a10008 2
   const bool doubleMode = true;

d10014 4
a10017 2
         obj2SubPenalty)
      )
d10034 4
a10037 2
         prodVol)
      )
d10054 4
a10057 2
         usageRate)
      )
d10070 4
a10073 2
         fileFormat)
      )
d10086 4
a10089 2
         solverLogFileName)
      )
d10100 4
a10103 2
         solverLogFileName)
      )
d10114 4
a10117 2
         nonMrSelSplit)
      )
d10128 4
a10131 2
         nonMrSelSplit)
      )
d10144 4
a10147 2
         baSelSplit)
      )
d10160 4
a10163 2
         baSelSplit)
      )
d10178 4
a10181 2
         meSelSplit)
      )
d10196 4
a10199 2
         meSelSplit)
      )
d10210 4
a10213 2
         srSelSplit)
      )
d10224 4
a10227 2
         srSelSplit)
      )
a10235 3
   const bool preInitMode = true;
   const bool quietMode   = true;

d10238 4
a10241 2
         isOne)
      )
a10248 3
   const bool preInitMode = true;
   const bool quietMode   = true;

d10250 4
a10253 2
      witNoDependantWitRunVeneersDecr, ()
      )
a10260 3
   const bool preInitMode = true;
   const bool quietMode   = true;

d10262 4
a10265 2
      witNoDependantWitRunVeneersIncr, ()
      )
d10274 4
a10277 2
      witExhaustMemory, ()
      )
d10286 4
a10289 2
      witListUnissuedMsgs, ()
      )
d10314 4
a10317 2
      witTestFatalMesg, ()
      )
a10326 3
   const bool preInitMode = true;
   const bool quietMode   = true;

d10330 4
a10333 2
         argv)
      )
d10342 4
a10345 2
      witThrowUnknownExc, ()
      )
@


1.172
log
@[multi-thread]
@
text
@d342 2
a343 4
   if (WitApiMgr::multiThread ())
      WitApiMgr::lockWitMT ("witDeleteRun");
   else
      WitApiMgr::lockWit   ("witDeleteRun");
d347 2
a348 4
   if (WitApiMgr::multiThread ())
      WitApiMgr::unlockWitMT ();
   else
      WitApiMgr::unlockWit   ();
d4784 2
a4785 4
   if (WitApiMgr::multiThread ())
      WitApiMgr::lockWitMT ("witNewRun");
   else
      WitApiMgr::lockWit   ("witNewRun");
d4789 2
a4790 4
   if (WitApiMgr::multiThread ())
      WitApiMgr::unlockWitMT ();
   else
      WitApiMgr::unlockWit   ();
@


1.171
log
@[multi-thread]
@
text
@a315 2
witReturnCode witDeleteRunPrep (WitRun * theWitRun);

d321 5
a325 1
   theRC = witDeleteRunPrep (theWitRun);
d327 4
a330 1
   if (theRC <= WitWARNING_RC)
d332 4
a335 1
      theWitRun->myApiMgr ()->lockWitRun ("witDeleteRun");
d337 4
a340 12
      if (WitApiMgr::multiThread ())
         WitApiMgr::lockWitMT ("witDeleteRun");
      else
         WitApiMgr::lockWit   ("witDeleteRun");

      delete theWitRun;

      if (WitApiMgr::multiThread ())
         WitApiMgr::unlockWitMT ();
      else
         WitApiMgr::unlockWit   ();
      }
d342 4
a345 2
   return theRC;
   }
d347 1
a347 5
//------------------------------------------------------------------------------
// witDeleteRunPrep
// Does preparatory aspects of witDeleteRun.
// Not an actual API function.
//------------------------------------------------------------------------------
d349 4
a352 4
witReturnCode witDeleteRunPrep (WitRun * theWitRun)
   {
   const bool preInitMode = true;
   const bool quietMode   = true;
d354 1
a354 3
   STANDARD_API_IMPL (
      witDeleteRun, ()
      )
@


1.170
log
@[multi-thread]
@
text
@d327 2
@


1.169
log
@[multi-thread]
@
text
@d327 4
a330 1
      WitApiMgr::sglThreadLock ("witDeleteRun");
d334 4
a337 1
      WitApiMgr::sglThreadUnlock ();
d346 1
a346 1
// Not an actual API funtion.
d4790 4
a4793 1
   WitApiMgr::sglThreadLock ("witNewRun");
d4797 4
a4800 1
   WitApiMgr::sglThreadUnlock ();
@


1.168
log
@[multi-thread]
@
text
@d9527 1
a9527 1
//     declspec (dllexport) witAttr WitNaccAfterSoftLB = "accAfterSoftLB";
d9529 1
a9529 1
//     extern declspec (dllexport) witAttr WitNaccAfterSoftLB;
d9531 1
a9531 1
//     extern declspec (dllimport) witAttr WitNaccAfterSoftLB;
d9535 3
a9537 3
//     const witAttr WitNaccAfterSoftLB = "accAfterSoftLB";
//   Declaration in wit application and api applications:Definition in api.C:
//     extern const witAttr WitNaccAfterSoftLB;
a9540 72
WIT_DECLSPEC WIT_CONST witAttr WitNaccAfterSoftLB        = "accAfterSoftLB";
WIT_DECLSPEC WIT_CONST witAttr WitNaccAfterOptImp        = "accAfterOptImp";
WIT_DECLSPEC WIT_CONST witAttr WitNaccelerated           = "accelerated";
WIT_DECLSPEC WIT_CONST witAttr WitNautoPriority          = "autoPriority";
WIT_DECLSPEC WIT_CONST witAttr WitNbuildAheadLimit       = "buildAheadLimit";
WIT_DECLSPEC WIT_CONST witAttr WitNbuildWhenEmpty        = "buildWhenEmpty";
WIT_DECLSPEC WIT_CONST witAttr WitNcapCost               = "capCost";
WIT_DECLSPEC WIT_CONST witAttr WitNcomputeCriticalList   =
                                  "computeCriticalList";
WIT_DECLSPEC WIT_CONST witAttr WitNcumShipBounds         = "cumShipBounds";
WIT_DECLSPEC WIT_CONST witAttr WitNcycleTime             = "cycleTime";
WIT_DECLSPEC WIT_CONST witAttr WitNearliestPeriod        = "earliestPeriod";
WIT_DECLSPEC WIT_CONST witAttr WitNequitability          = "equitability";
WIT_DECLSPEC WIT_CONST witAttr WitNfallout               = "fallout";
WIT_DECLSPEC WIT_CONST witAttr WitNfeasible              = "feasible";
WIT_DECLSPEC WIT_CONST witAttr WitNgrossRev              = "grossRev";
WIT_DECLSPEC WIT_CONST witAttr WitNhashTableSize         = "hashTableSize";
WIT_DECLSPEC WIT_CONST witAttr WitNincLotSize            = "incLotSize";
WIT_DECLSPEC WIT_CONST witAttr WitNinvCost               = "invCost";
WIT_DECLSPEC WIT_CONST witAttr WitNlatestPeriod          = "latestPeriod";
WIT_DECLSPEC WIT_CONST witAttr WitNmandEC                = "mandEC";
WIT_DECLSPEC WIT_CONST witAttr WitNmessageFile           = "messageFile";
WIT_DECLSPEC WIT_CONST witAttr WitNmessageFileAccessMode =
                                  "messageFileAccessMode";
WIT_DECLSPEC WIT_CONST witAttr WitNmessageFileName       = "messageFileName";
WIT_DECLSPEC WIT_CONST witAttr WitNminLotSize            = "minLotSize";
WIT_DECLSPEC WIT_CONST witAttr WitNnPeriods              = "nPeriods";
WIT_DECLSPEC WIT_CONST witAttr WitNobj1CumShipReward     = "obj1CumShipReward";
WIT_DECLSPEC WIT_CONST witAttr WitNobj1ShipReward        = "obj1ShipReward";
WIT_DECLSPEC WIT_CONST witAttr WitNobj1ProdCost          = "obj1ProdCost";
WIT_DECLSPEC WIT_CONST witAttr WitNobj1ScrapCost         = "obj1ScrapCost";
WIT_DECLSPEC WIT_CONST witAttr WitNobj1StockCost         = "obj1StockCost";
WIT_DECLSPEC WIT_CONST witAttr WitNobj1SubCost           = "obj1SubCost";
WIT_DECLSPEC WIT_CONST witAttr WitNobj2SubPenalty        = "obj2SubPenalty";
WIT_DECLSPEC WIT_CONST witAttr WitNobj2Winv              = "obj2Winv";
WIT_DECLSPEC WIT_CONST witAttr WitNobj2Wrev              = "obj2Wrev";
WIT_DECLSPEC WIT_CONST witAttr WitNobj2Wserv             = "obj2Wserv";
WIT_DECLSPEC WIT_CONST witAttr WitNobj2Wsub              = "obj2Wsub";
WIT_DECLSPEC WIT_CONST witAttr WitNobjChoice             = "objChoice";
WIT_DECLSPEC WIT_CONST witAttr WitNoffset                = "offset";
WIT_DECLSPEC WIT_CONST witAttr WitNoptInitMethod         = "optInitMethod";
WIT_DECLSPEC WIT_CONST witAttr WitNoslMessageFileName    = "oslMessageFileName";
WIT_DECLSPEC WIT_CONST witAttr WitNoutputPrecision       = "outputPrecision";
WIT_DECLSPEC WIT_CONST witAttr WitNpartBomSubsProdSched  =
                                  "partBomSubsProdSched";
WIT_DECLSPEC WIT_CONST witAttr WitNpartDemandShipSched   =
                                  "partDemandShipSched";
WIT_DECLSPEC WIT_CONST witAttr WitNpartProdSched         = "partProdSched";
WIT_DECLSPEC WIT_CONST witAttr WitNpartShipSched         = "partShipSched";
WIT_DECLSPEC WIT_CONST witAttr WitNperiodsPerYear        = "periodsPerYear";
WIT_DECLSPEC WIT_CONST witAttr WitNpreprocessed          = "preprocessed";
WIT_DECLSPEC WIT_CONST witAttr WitNprintMessageNumber    = "printMessageNumber";
WIT_DECLSPEC WIT_CONST witAttr WitNpriority              = "priority";
WIT_DECLSPEC WIT_CONST witAttr WitNprodBounds            = "prodBounds";
WIT_DECLSPEC WIT_CONST witAttr WitNprodVol               = "prodVol";
WIT_DECLSPEC WIT_CONST witAttr WitNpostprocessed         = "postprocessed";
WIT_DECLSPEC WIT_CONST witAttr WitNdemandVol             = "demandVol";
WIT_DECLSPEC WIT_CONST witAttr WitNreqVol                = "reqVol";
WIT_DECLSPEC WIT_CONST witAttr WitNshipLateLimit         = "shipLateLimit";
WIT_DECLSPEC WIT_CONST witAttr WitNshipVol               = "shipVol";
WIT_DECLSPEC WIT_CONST witAttr WitNstockBounds           = "stockBounds";
WIT_DECLSPEC WIT_CONST witAttr WitNstopRunning           = "stopRunning";
WIT_DECLSPEC WIT_CONST witAttr WitNsupplyVol             = "supplyVol";
WIT_DECLSPEC WIT_CONST witAttr WitNtimesPrint            = "timesPrint";
WIT_DECLSPEC WIT_CONST witAttr WitNtitle                 = "title";
WIT_DECLSPEC WIT_CONST witAttr WitNusageRate             = "usageRate";
WIT_DECLSPEC WIT_CONST witAttr WitNunitCost              = "unitCost";
WIT_DECLSPEC WIT_CONST witAttr WitNusageTime             = "usageTime";
WIT_DECLSPEC WIT_CONST witAttr WitNwbounds               = "wbounds";
WIT_DECLSPEC WIT_CONST witAttr WitNyield                 = "yield";


@


1.167
log
@[multi-thread]
@
text
@d221 1
a221 2
      witAdvanceObjItr, (
         )
d269 1
a269 2
      witBuildPip, (
         )
d279 1
a279 2
      witClearPegging, (
         )
d289 1
a289 2
      witClearPipSeq, (
         )
d349 1
a349 2
      witDeleteRun, (
         )
d469 1
a469 2
      witEvalObjectives, (
         )
d481 1
a481 2
      witFinishHeurAlloc, (
         )
d503 1
a503 2
      witGeneratePriorities, (
         )
d4657 1
a4657 2
      witHeurImplode, (
         )
d4757 1
a4757 2
      witInitialize, (
         )
d4767 1
a4767 2
      witMrp, (
         )
d4793 1
a4793 2
      witNewRun, (
         )
d4805 1
a4805 2
      witOptImplode, (
         )
d4815 1
a4815 2
      witOptPreprocess, (
         )
d4827 1
a4827 2
      witPreprocess, (
         )
d4837 1
a4837 2
      witPostprocess, (
         )
d4847 1
a4847 2
      witPurgeData, (
         )
d4869 1
a4869 2
      witResetObjItr, (
         )
d7450 1
a7450 2
      witShutDownHeurAlloc, (
         )
d7460 1
a7460 2
      witStartHeurAlloc, (
         )
d9420 1
a9420 2
      witNoDependantWitRunVeneersDecr, (
         )
d9433 1
a9433 2
      witNoDependantWitRunVeneersIncr, (
         )
d9443 1
a9443 2
      witExhaustMemory, (
         )
d9453 1
a9453 2
      witListUnissuedMsgs, (
         )
d9479 1
a9479 2
      witTestFatalMesg, (
         )
d9506 1
a9506 2
      witThrowUnknownExc, (
         )
@


1.166
log
@Updated WIT's exception throwing capability.
@
text
@d6116 2
a6117 1
      WitRun * const theWitRun)
d6123 1
a6123 1
         )
@


1.165
log
@[multi-thread]
@
text
@d16 2
d2265 1
a2265 1
WIT_DECLSPEC witReturnCode STDCALL witGetMesgThrowException (
d2268 1
a2268 1
      witBoolean * mesgThrowException)
d2271 1
a2271 1
      witGetMesgThrowException, (
d2273 1
a2273 1
         mesgThrowException)
d6053 1
a6053 1
WIT_DECLSPEC witReturnCode STDCALL witSetMesgThrowException (
d6057 1
a6057 1
      const witBoolean mesgThrowException)
d6063 1
a6063 1
      witSetMesgThrowException, (
d6066 1
a6066 1
         mesgThrowException)
d9678 20
@


1.164
log
@[multi-thread]
@
text
@a24 1
#include <MsgArg.h>
@


1.163
log
@[multi-thread]
@
text
@d70 1
a70 1
      theWitRun->myApiMgr ()->handleInternalExc ();                            \
d9524 11
@


1.162
log
@[multi-thread]
@
text
@a51 5
   WitApiMgr *  theApiMgr;                                                     \
   const char * theFuncName;                                                   \
                                                                               \
   theApiMgr = theWitRun->myApiMgr ();                                         \
                                                                               \
d54 8
a61 6
      theFuncName = #innerFunc;                                                \
                                                                               \
      if (doubleMode)                                                          \
         theFuncName = #innerFunc "Dbl";                                       \
                                                                               \
      theApiMgr->startApiFunc (theFuncName, preInitMode, quietMode);           \
d65 1
a65 11
      theApiMgr->finishApiFunc ();                                             \
      }                                                                        \
                                                                               \
   catch (std::bad_alloc)                                                      \
      {                                                                        \
      theApiMgr->handleBadAllocExc ();                                         \
      }                                                                        \
                                                                               \
   catch (WitMsgIssueExc & theExc)                                             \
      {                                                                        \
      theApiMgr->handleMsgIssueExc (theExc);                                   \
d68 1
a68 1
   catch (WitAbortApiExc & theExc)                                             \
d70 1
a70 1
      theApiMgr->handleAbortApiExc (theExc);                                   \
d73 1
a73 1
   return theApiMgr->apiRc ();                                                 \
@


1.161
log
@Removed code supporting the variable-argument-list API functions.
@
text
@d25 1
d76 5
@


1.160
log
@Removed all variable-argument-list (outer layer) API functions.
@
text
@a7564 96
//------------------------------------------------------------------------------
// Non-Standard API Function.
//------------------------------------------------------------------------------

#if 0

WIT_DECLSPEC witReturnCode STDCALL witAddBomEntryVa (
      WitRun * const theWitRun,
      const char * const consumingOperationName,
      const char * const consumedPartName,
      ...)
   {
   WitApiVaList theApiVaList;

   va_start (theApiVaList (), consumedPartName);

   STANDARD_API_IMPL (
      witAddBomEntryVa, (
         consumingOperationName,
         consumedPartName,
         theApiVaList ())
      )
   }

//------------------------------------------------------------------------------
// Non-Standard API Function.
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witAddDemandVa (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      ...)
   {
   WitApiVaList theApiVaList;

   va_start (theApiVaList (), demandName);

   STANDARD_API_IMPL (
      witAddDemandVa, (
         partName,
         demandName,
         theApiVaList ())
      )
   }

//------------------------------------------------------------------------------
// Non-Standard API Function.
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witAddPartVa (
      WitRun * const theWitRun,
      const char * const partName,
      const witAttr partCategory,
      ...)
   {
   WitApiVaList theApiVaList;

   va_start (theApiVaList (), partCategory);

   STANDARD_API_IMPL (
      witAddPartVa, (
         partName,
         partCategory,
         theApiVaList ())
      )
   }

//------------------------------------------------------------------------------
// Non-Standard API Function.
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witAddSubsBomEntryVa (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const char * const consumedPartName,
      ...)
   {
   WitApiVaList theApiVaList;

   va_start (theApiVaList (), consumedPartName);

   STANDARD_API_IMPL (
      witAddSubsBomEntryVa, (
         operationName,
         bomEntryIndex,
         consumedPartName,
         theApiVaList ())
      )
   }

#endif

//------------------------------------------------------------------------------

@


1.159
log
@[multi-thread]
@
text
@d7569 2
d7657 2
@


1.158
log
@[multi-thread]
@
text
@d9606 17
@


1.157
log
@[multi-thread]
@
text
@d135 2
a136 1
         consumedPartName))
d149 2
a150 1
         producedPartName))
d163 2
a164 1
         demandName))
d175 2
a176 1
         operationName))
d189 2
a190 1
         partCategory))
d201 2
a202 1
         partAndOperationName))
d217 2
a218 1
         consumedPartName))
d228 2
a229 1
         ))
d246 2
a247 1
         incShipVol))
d266 2
a267 1
         incShipVol))
d277 2
a278 1
         ))
d288 2
a289 1
         ))
d299 2
a300 1
         ))
d318 2
a319 1
         srcWitRun))
d360 2
a361 1
         ))
d372 2
a373 1
         fileName))
d394 2
a395 1
         incVolList))
d418 2
a419 1
         incVolList))
d442 2
a443 1
         asapMultiExecList))
d468 2
a469 1
         asapMultiExecList))
d481 2
a482 1
         ))
d494 2
a495 1
         ))
d517 2
a518 1
         ))
d529 2
a530 1
         accAfterSoftLB))
d541 2
a542 1
         accAfterOptImp))
d553 2
a554 1
         accelerated))
d565 2
a566 1
         appData))
d577 2
a578 1
         autoPriority))
d593 2
a594 1
         appData))
d609 2
a610 1
         consRate))
d627 2
a628 1
         consRate))
d643 2
a644 1
         earliestPeriod))
d659 2
a660 1
         nSubsBomEntries))
d675 2
a676 1
         consumedPartName))
d691 2
a692 1
         execPenalty))
d709 2
a710 1
         execPenalty))
d725 2
a726 1
         falloutRate))
d743 2
a744 1
         falloutRate))
d759 2
a760 1
         impactPeriod))
d775 2
a776 1
         latestPeriod))
d791 2
a792 1
         mandEC))
d807 2
a808 1
         offset))
d825 2
a826 1
         offset))
d841 2
a842 1
         propRtg))
d857 2
a858 1
         routingShare))
d875 2
a876 1
         routingShare))
d891 2
a892 1
         selForDel))
d907 2
a908 1
         singleSource))
d924 2
a925 1
         appData))
d940 2
a941 1
         earliestPeriod))
d956 2
a957 1
         expAllowed))
d972 2
a973 1
         expAversion))
d990 2
a991 1
         expAversion))
d1006 2
a1007 1
         impactPeriod))
d1022 2
a1023 1
         latestPeriod))
d1038 2
a1039 1
         offset))
d1056 2
a1057 1
         offset))
d1072 2
a1073 1
         pipShare))
d1090 2
a1091 1
         pipShare))
d1106 2
a1107 1
         productRate))
d1124 2
a1125 1
         productRate))
d1140 2
a1141 1
         producedPartName))
d1156 2
a1157 1
         routingShare))
d1174 2
a1175 1
         routingShare))
d1190 2
a1191 1
         selForDel))
d1202 2
a1203 1
         buildWhenEmpty))
d1214 2
a1215 1
         compPrices))
d1226 2
a1227 1
         computeCriticalList))
d1242 2
a1243 1
         critPeriod))
d1258 2
a1259 1
         appData))
d1282 2
a1283 1
         peggedVolList))
d1308 2
a1309 1
         peggedVolList))
d1328 2
a1329 1
         hardUpper))
d1350 2
a1351 1
         hardUpper))
d1366 2
a1367 1
         cumShipReward))
d1384 2
a1385 1
         cumShipReward))
d1400 2
a1401 1
         demandVol))
d1418 2
a1419 1
         demandVol))
d1442 2
a1443 1
         peggedExecVolList))
d1468 2
a1469 1
         peggedExecVolList))
d1492 2
a1493 1
         peggedExecVolList))
d1518 2
a1519 1
         peggedExecVolList))
d1534 2
a1535 1
         focusHorizon))
d1550 2
a1551 1
         fssShipVol))
d1569 2
a1570 1
         fssShipVol))
d1585 2
a1586 1
         obj1CumShipReward))
d1603 2
a1604 1
         obj1CumShipReward))
d1619 2
a1620 1
         obj1ShipReward))
d1637 2
a1638 1
         obj1ShipReward))
d1653 2
a1654 1
         priority))
d1677 2
a1678 1
         peggedVolList))
d1703 2
a1704 1
         peggedVolList))
d1719 2
a1720 1
         shipLateLimit))
d1735 2
a1736 1
         shipLateUB))
d1751 2
a1752 1
         shipReward))
d1769 2
a1770 1
         shipReward))
d1785 2
a1786 1
         shipVol))
d1803 2
a1804 1
         shipVol))
d1827 2
a1828 1
         peggedVolList))
d1853 2
a1854 1
         peggedVolList))
d1881 2
a1882 1
         peggedSubVolList))
d1911 2
a1912 1
         peggedSubVolList))
d1939 2
a1940 1
         peggedSubVolList))
d1969 2
a1970 1
         peggedSubVolList))
d1993 2
a1994 1
         peggedVolList))
d2019 2
a2020 1
         peggedVolList))
d2031 2
a2032 1
         equitablity))
d2043 2
a2044 1
         execEmptyBom))
d2055 2
a2056 1
         expCutoff))
d2069 2
a2070 1
         expCutoff))
d2081 2
a2082 1
         feasible))
d2097 2
a2098 1
         shortageVolList))
d2115 2
a2116 1
         shortageVolList))
d2127 2
a2128 1
         forcedMultiEq))
d2139 2
a2140 1
         hashTableSize))
d2151 2
a2152 1
         heurAllocActive))
d2163 2
a2164 1
         highPrecisionWD))
d2175 2
a2176 1
         independentOffsets))
d2187 2
a2188 1
         lotSizeTol))
d2201 2
a2202 1
         lotSizeTol))
d2213 2
a2214 1
         mesgFile))
d2225 2
a2226 1
         mesgFileAccessMode))
d2237 2
a2238 1
         mesgFileName))
d2251 2
a2252 1
         mesgPrintMunber))
d2265 2
a2266 1
         mesgStopRunning))
d2279 2
a2280 1
         mesgThrowException))
d2293 2
a2294 1
         mesgTimesPrint))
d2305 2
a2306 1
         multiExec))
d2317 2
a2318 1
         multiRoute))
d2329 2
a2330 1
         multiThread))
d2341 2
a2342 1
         nPeriods))
d2355 2
a2356 1
         bomEntryIndex))
d2369 2
a2370 1
         bopEntryIndex))
d2383 2
a2384 1
         demandName))
d2395 2
a2396 1
         operationName))
d2407 2
a2408 1
         partName))
d2419 2
a2420 1
         objItrState))
d2435 2
a2436 1
         subsBomEntryIndex))
d2449 2
a2450 1
         boundsValue))
d2465 2
a2466 1
         boundsValue))
d2479 2
a2480 1
         appData))
d2497 2
a2498 1
         hardUpper))
d2517 2
a2518 1
         hardUpper))
d2531 2
a2532 1
         execCost))
d2547 2
a2548 1
         execCost))
d2561 2
a2562 1
         execPenalty))
d2577 2
a2578 1
         execPenalty))
d2591 2
a2592 1
         execVol))
d2605 2
a2606 1
         execVol))
d2621 2
a2622 1
         execVol))
d2635 2
a2636 1
         exist))
d2649 2
a2650 1
         fssExecVol))
d2665 2
a2666 1
         fssExecVol))
d2679 2
a2680 1
         incLotSize))
d2695 2
a2696 1
         incLotSize))
d2709 2
a2710 1
         incLotSize2))
d2725 2
a2726 1
         incLotSize2))
d2739 2
a2740 1
         lotSize2Thresh))
d2755 2
a2756 1
         lotSize2Thresh))
d2769 2
a2770 1
         minLotSize))
d2785 2
a2786 1
         minLotSize))
d2799 2
a2800 1
         minLotSize2))
d2815 2
a2816 1
         minLotSize2))
d2829 2
a2830 1
         mrpExecVol))
d2845 2
a2846 1
         mrpExecVol))
d2859 2
a2860 1
         nBomEntries))
d2873 2
a2874 1
         nBopEntries))
d2887 2
a2888 1
         operationList))
d2901 2
a2902 1
         selForDel))
d2915 2
a2916 1
         twoLevelLotSizes))
d2929 2
a2930 1
         yieldRate))
d2945 2
a2946 1
         yieldRate))
d2957 2
a2958 1
         optInitMethod))
d2969 2
a2970 1
         oslMesgFileName))
d2981 2
a2982 1
         outputPrecision))
d2993 2
a2994 1
         postprocessed))
d3007 2
a3008 1
         appData))
d3023 2
a3024 1
         partNameList))
d3037 2
a3038 1
         buildAheadUB))
d3051 2
a3052 1
         buildAsap))
d3065 2
a3066 1
         buildNstn))
d3079 2
a3080 1
         consVol))
d3095 2
a3096 1
         consVol))
d3113 2
a3114 1
         bomEntryIndex))
d3133 2
a3134 1
         subsBomEntryIndex))
d3149 2
a3150 1
         demandList))
d3163 2
a3164 1
         category))
d3177 2
a3178 1
         excessVol))
d3193 2
a3194 1
         excessVol))
d3207 2
a3208 1
         exist))
d3221 2
a3222 1
         shortageVol))
d3237 2
a3238 1
         shortageVol))
d3251 2
a3252 1
         mrpConsVol))
d3267 2
a3268 1
         mrpConsVol))
d3281 2
a3282 1
         mrpExcessVol))
d3297 2
a3298 1
         mrpExcessVol))
d3311 2
a3312 1
         mrpResidualVol))
d3327 2
a3328 1
         mrpResidualVol))
d3341 2
a3342 1
         nConsumingBomEntries))
d3355 2
a3356 1
         nConsumingSubsBomEntries))
d3369 2
a3370 1
         nProducingBopEntries))
d3383 2
a3384 1
         prodVol))
d3399 2
a3400 1
         prodVol))
d3417 2
a3418 1
         bopEntryIndex))
d3431 2
a3432 1
         propRtg))
d3445 2
a3446 1
         reqVol))
d3461 2
a3462 1
         reqVol))
d3475 2
a3476 1
         residualVol))
d3491 2
a3492 1
         residualVol))
d3505 2
a3506 1
         partList))
d3519 2
a3520 1
         scrapCost))
d3535 2
a3536 1
         scrapCost))
d3549 2
a3550 1
         scrapVol))
d3565 2
a3566 1
         scrapVol))
d3579 2
a3580 1
         selForDel))
d3593 2
a3594 1
         shadowPrice))
d3609 2
a3610 1
         shadowPrice))
d3623 2
a3624 1
         singleSource))
d3641 2
a3642 1
         hardUpper))
d3661 2
a3662 1
         hardUpper))
d3675 2
a3676 1
         stockCost))
d3691 2
a3692 1
         stockCost))
d3705 2
a3706 1
         stockVol))
d3721 2
a3722 1
         stockVol))
d3735 2
a3736 1
         supplyVol))
d3751 2
a3752 1
         supplyVol))
d3763 2
a3764 1
         penExec))
d3775 2
a3776 1
         pipExists))
d3795 2
a3796 1
         incShipVolList))
d3817 2
a3818 1
         incShipVolList))
d3829 2
a3830 1
         pipSeqFromHeur))
d3841 2
a3842 1
         perfPegging))
d3863 2
a3864 1
         shipPerList))
d3875 2
a3876 1
         pgdCritListMode))
d3887 2
a3888 1
         postSolveRecovery))
d3899 2
a3900 1
         prefHighStockSLBs))
d3911 2
a3912 1
         preprocessed))
d3923 2
a3924 1
         respectStockSLBs))
d3935 2
a3936 1
         roundReqVols))
d3947 2
a3948 1
         selSplit))
d3959 2
a3960 1
         skipFailures))
d3971 2
a3972 1
         stockReallocation))
d3989 2
a3990 1
         appData))
d4007 2
a4008 1
         consRate))
d4027 2
a4028 1
         consRate))
d4045 2
a4046 1
         consumedPart))
d4063 2
a4064 1
         earliestPeriod))
d4081 2
a4082 1
         execPenalty))
d4101 2
a4102 1
         execPenalty))
d4119 2
a4120 1
         expAllowed))
d4137 2
a4138 1
         expNetAversion))
d4157 2
a4158 1
         expNetAversion))
d4175 2
a4176 1
         falloutRate))
d4195 2
a4196 1
         falloutRate))
d4213 2
a4214 1
         fssSubVol))
d4233 2
a4234 1
         fssSubVol))
d4251 2
a4252 1
         impactPeriod))
d4269 2
a4270 1
         latestPeriod))
d4287 2
a4288 1
         mrpNetAllowed))
d4305 2
a4306 1
         mrpSubVol))
d4325 2
a4326 1
         mrpSubVol))
d4343 2
a4344 1
         netAllowed))
d4361 2
a4362 1
         obj1SubCost))
d4381 2
a4382 1
         obj1SubCost))
d4399 2
a4400 1
         offset))
d4419 2
a4420 1
         offset))
d4437 2
a4438 1
         routingShare))
d4457 2
a4458 1
         routingShare))
d4475 2
a4476 1
         selForDel))
d4493 2
a4494 1
         subCost))
d4513 2
a4514 1
         subCost))
d4531 2
a4532 1
         subVol))
d4551 2
a4552 1
         subVol))
d4563 2
a4564 1
         tieBreakPropRt))
d4575 2
a4576 1
         title))
d4587 2
a4588 1
         truncOffsets))
d4599 2
a4600 1
         twoWayMultiExec))
d4611 2
a4612 1
         useFocusHorizons))
d4623 2
a4624 1
         userHeurStart))
d4635 2
a4636 1
         wbounds))
d4649 2
a4650 1
         wbounds))
d4661 2
a4662 1
         wit34Compatible))
d4672 2
a4673 1
         ))
d4692 2
a4693 1
         incVol))
d4714 2
a4715 1
         incVol))
d4736 2
a4737 1
         asapMultiExec))
d4760 2
a4761 1
         asapMultiExec))
d4773 2
a4774 1
         ))
d4784 2
a4785 1
         ))
d4811 2
a4812 1
         ))
d4824 2
a4825 1
         ))
d4835 2
a4836 1
         ))
d4848 2
a4849 1
         ))
d4859 2
a4860 1
         ))
d4870 2
a4871 1
         ))
d4882 2
a4883 1
         fileName))
d4893 2
a4894 1
         ))
d4905 2
a4906 1
         accAfterSoftLB))
d4917 2
a4918 1
         accAfterOptImp))
d4929 2
a4930 1
         appData))
d4941 2
a4942 1
         autoPriority))
d4957 2
a4958 1
         appData))
d4973 2
a4974 1
         consRate))
d4991 2
a4992 1
         consRate))
d5007 2
a5008 1
         earliestPeriod))
d5023 2
a5024 1
         execPenalty))
d5041 2
a5042 1
         execPenalty))
d5057 2
a5058 1
         falloutRate))
d5075 2
a5076 1
         falloutRate))
d5091 2
a5092 1
         latestPeriod))
d5107 2
a5108 1
         mandEC))
d5123 2
a5124 1
         offset))
d5141 2
a5142 1
         offset))
d5157 2
a5158 1
         propRtg))
d5173 2
a5174 1
         routingShare))
d5191 2
a5192 1
         routingShare))
d5207 2
a5208 1
         selForDel))
d5223 2
a5224 1
         singleSource))
d5239 2
a5240 1
         appData))
d5255 2
a5256 1
         earliestPeriod))
d5271 2
a5272 1
         expAllowed))
d5287 2
a5288 1
         expAversion))
d5305 2
a5306 1
         expAversion))
d5321 2
a5322 1
         latestPeriod))
d5337 2
a5338 1
         offset))
d5355 2
a5356 1
         offset))
d5371 2
a5372 1
         pipShare))
d5389 2
a5390 1
         pipShare))
d5405 2
a5406 1
         productRate))
d5423 2
a5424 1
         productRate))
d5439 2
a5440 1
         routingShare))
d5457 2
a5458 1
         routingShare))
d5473 2
a5474 1
         selForDel))
d5485 2
a5486 1
         compPrices))
d5497 2
a5498 1
         computeCriticalList))
d5513 2
a5514 1
         appData))
d5533 2
a5534 1
         hardUpper))
d5555 2
a5556 1
         hardUpper))
d5571 2
a5572 1
         cumShipReward))
d5589 2
a5590 1
         cumShipReward))
d5605 2
a5606 1
         demandVol))
d5623 2
a5624 1
         demandVol))
d5639 2
a5640 1
         focusHorizon))
d5655 2
a5656 1
         fssShipVol))
d5673 2
a5674 1
         fssShipVol))
d5689 2
a5690 1
         obj1CumShipReward))
d5707 2
a5708 1
         obj1CumShipReward))
d5723 2
a5724 1
         obj1ShipReward))
d5741 2
a5742 1
         obj1ShipReward))
d5757 2
a5758 1
         priority))
d5773 2
a5774 1
         selForDel))
d5789 2
a5790 1
         shipLateUB))
d5805 2
a5806 1
         shipReward))
d5823 2
a5824 1
         shipReward))
d5839 2
a5840 1
         shipVol))
d5857 2
a5858 1
         shipVol))
d5869 2
a5870 1
         equitablity))
d5881 2
a5882 1
         execEmptyBom))
d5893 2
a5894 1
         expCutoff))
d5907 2
a5908 1
         expCutoff))
d5919 2
a5920 1
         forcedMultiEq))
d5931 2
a5932 1
         hashTableSize))
d5943 2
a5944 1
         highPrecisionWD))
d5955 2
a5956 1
         independentOffsets))
d5967 2
a5968 1
         lotSizeTol))
d5981 2
a5982 1
         lotSizeTol))
d5998 2
a5999 1
         mesgFileAccessMode))
d6015 2
a6016 1
         mesgFileName))
d6034 2
a6035 1
         mesgPrintMunber))
d6053 2
a6054 1
         mesgStopRunning))
d6072 2
a6073 1
         mesgThrowException))
d6091 2
a6092 1
         mesgTimesPrint))
d6103 2
a6104 1
         multiExec))
d6115 2
a6116 1
         multiRoute))
d6128 2
a6129 1
         ))
d6140 2
a6141 1
         nPeriods))
d6152 2
a6153 1
         oslMesgFileName))
d6166 2
a6167 1
         appData))
d6184 2
a6185 1
         hardUpper))
d6204 2
a6205 1
         hardUpper))
d6218 2
a6219 1
         execCost))
d6234 2
a6235 1
         execCost))
d6248 2
a6249 1
         execPenalty))
d6264 2
a6265 1
         execPenalty))
d6278 2
a6279 1
         execVol))
d6294 2
a6295 1
         execVol))
d6308 2
a6309 1
         incLotSize))
d6324 2
a6325 1
         incLotSize))
d6338 2
a6339 1
         incLotSize2))
d6354 2
a6355 1
         incLotSize2))
d6368 2
a6369 1
         lotSize2Thresh))
d6384 2
a6385 1
         lotSize2Thresh))
d6398 2
a6399 1
         minLotSize))
d6414 2
a6415 1
         minLotSize))
d6428 2
a6429 1
         minLotSize2))
d6444 2
a6445 1
         minLotSize2))
d6458 2
a6459 1
         selForDel))
d6472 2
a6473 1
         twoLevelLotSizes))
d6486 2
a6487 1
         yieldRate))
d6502 2
a6503 1
         yieldRate))
d6514 2
a6515 1
         optInitMethod))
d6526 2
a6527 1
         outputPrecision))
d6540 2
a6541 1
         appData))
d6554 2
a6555 1
         buildAheadUB))
d6568 2
a6569 1
         buildAsap))
d6582 2
a6583 1
         buildNstn))
d6596 2
a6597 1
         propRtg))
d6610 2
a6611 2
         scrapCost
         ))
d6627 2
a6628 1
         ))
d6641 2
a6642 1
         selForDel))
d6655 2
a6656 1
         singleSource))
d6673 2
a6674 1
         hardUpper))
d6693 2
a6694 1
         hardUpper))
d6707 2
a6708 1
         stockCost))
d6723 2
a6724 1
         stockCost))
d6737 2
a6738 1
         supplyVol))
d6753 2
a6754 1
         supplyVol))
d6765 2
a6766 1
         penExec))
d6777 2
a6778 1
         perfPegging))
d6789 2
a6790 1
         pgdCritListMode))
d6801 2
a6802 1
         pipSeqFromHeur))
d6813 2
a6814 1
         postSolveRecovery))
d6825 2
a6826 1
         prefHighStockSLBs))
d6837 2
a6838 1
         respectStockSLBs))
d6849 2
a6850 1
         roundReqVols))
d6861 2
a6862 1
         selSplit))
d6873 2
a6874 1
         skipFailures))
d6885 2
a6886 1
         stockReallocation))
d6903 2
a6904 1
         appData))
d6921 2
a6922 1
         consRate))
d6941 2
a6942 1
         consRate))
d6959 2
a6960 1
         earliestPeriod))
d6977 2
a6978 1
         execPenalty))
d6997 2
a6998 1
         execPenalty))
d7015 2
a7016 1
         expAllowed))
d7033 2
a7034 1
         expNetAversion))
d7053 2
a7054 1
         expNetAversion))
d7071 2
a7072 1
         falloutRate))
d7091 2
a7092 1
         falloutRate))
d7109 2
a7110 1
         latestPeriod))
d7127 2
a7128 1
         mrpNetAllowed))
d7145 2
a7146 1
         netAllowed))
d7163 2
a7164 1
         obj1SubCost))
d7183 2
a7184 1
         obj1SubCost))
d7201 2
a7202 1
         offset))
d7221 2
a7222 1
         offset))
d7239 2
a7240 1
         routingShare))
d7259 2
a7260 1
         routingShare))
d7277 2
a7278 1
         selForDel))
d7295 2
a7296 1
         subCost))
d7315 2
a7316 1
         subCost))
d7333 2
a7334 1
         subVol))
d7353 2
a7354 1
         subVol))
d7365 2
a7366 1
         tieBreakPropRt))
d7377 2
a7378 1
         title))
d7389 2
a7390 1
         truncOffsets))
d7401 2
a7402 1
         twoWayMultiExec))
d7413 2
a7414 1
         useFocusHorizons))
d7425 2
a7426 1
         userHeurStart))
d7437 2
a7438 1
         wbounds))
d7451 2
a7452 1
         wbounds))
d7463 2
a7464 1
         wit34Compatible))
d7474 2
a7475 1
         ))
d7485 2
a7486 1
         ))
d7501 2
a7502 1
         maxListLen))
d7513 2
a7514 1
         fileName))
d7527 2
a7528 1
         fileFormat))
d7541 2
a7542 1
         fileFormat))
d7555 2
a7556 1
         fileFormat))
d7583 2
a7584 1
         theApiVaList ()))
d7605 2
a7606 1
         theApiVaList ()))
d7627 2
a7628 1
         theApiVaList ()))
d7651 2
a7652 1
         theApiVaList ()))
d7667 2
a7668 1
         fallout))
d7683 2
a7684 1
         propRouting))
d7699 2
a7700 1
         usageRate))
d7715 2
a7716 1
         time))
d7731 2
a7732 1
         byProduct))
d7747 2
a7748 1
         prodRate))
d7759 2
a7760 1
         capCost))
d7773 2
a7774 1
         capCost))
d7789 2
a7790 1
         buildAheadLimit))
d7805 2
a7806 1
         buildAheadUB))
d7821 2
a7822 1
         grossRev))
d7839 2
a7840 1
         grossRev))
d7855 2
a7856 1
         prefBuildAhead))
d7871 2
a7872 1
         shipLateLimit))
d7883 2
a7884 1
         invCost))
d7897 2
a7898 1
         invCost))
d7909 2
a7910 1
         localBuildAhead))
d7921 2
a7922 1
         localMultiExec))
d7939 2
a7940 1
         subsValue))
d7959 2
a7960 1
         subsValue))
d7971 2
a7972 1
         obj2Winv))
d7985 2
a7986 1
         obj2Winv))
d7997 2
a7998 1
         obj2Wrev))
d8011 2
a8012 1
         obj2Wrev))
d8023 2
a8024 1
         obj2Wserv))
d8037 2
a8038 1
         obj2Wserv))
d8049 2
a8050 1
         obj2Wsub))
d8063 2
a8064 1
         obj2Wsub))
d8075 2
a8076 1
         objChoice))
d8089 2
a8090 1
         obj1ExecCost))
d8105 2
a8106 1
         obj1ExecCost))
d8119 2
a8120 1
         obj2AuxCost))
d8135 2
a8136 1
         obj2AuxCost))
d8149 2
a8150 1
         yield))
d8161 2
a8162 1
         optWithLotSizes))
d8175 2
a8176 1
         buildAheadLimit))
d8189 2
a8190 1
         cycleTime))
d8203 2
a8204 1
         incLotSize))
d8217 2
a8218 1
         minLotSize))
d8231 2
a8232 1
         mrpProdVol))
d8245 2
a8246 1
         nBomEntries))
d8259 2
a8260 1
         obj1ProdCost))
d8273 2
a8274 1
         obj1ScrapCost))
d8289 2
a8290 1
         obj1ScrapCost))
d8303 2
a8304 1
         obj1StockCost))
d8319 2
a8320 1
         obj1StockCost))
d8337 2
a8338 1
         hardUpper))
d8351 2
a8352 1
         propRouting))
d8365 2
a8366 1
         unitCost))
d8381 2
a8382 1
         unitCost))
d8395 2
a8396 1
         yield))
d8407 2
a8408 1
         periodsPerYear))
d8421 2
a8422 1
         periodsPerYear))
d8433 2
a8434 1
         stockRealloc))
d8451 2
a8452 1
         fallout))
d8469 2
a8470 1
         obj2SubPenalty))
d8489 2
a8490 1
         obj2SubPenalty))
d8507 2
a8508 1
         prodVol))
d8525 2
a8526 1
         usageRate))
d8541 2
a8542 1
         fallout))
d8557 2
a8558 1
         propRouting))
d8573 2
a8574 1
         usageRate))
d8589 2
a8590 1
         time))
d8605 2
a8606 1
         byProduct))
d8621 2
a8622 1
         prodRate))
d8633 2
a8634 1
         buildWhenEmpty))
d8645 2
a8646 1
         capCost))
d8659 2
a8660 1
         capCost))
d8675 2
a8676 1
         buildAheadLimit))
d8691 2
a8692 1
         buildAheadUB))
d8707 2
a8708 1
         grossRev))
d8725 2
a8726 1
         grossRev))
d8741 2
a8742 1
         prefBuildAhead))
d8757 2
a8758 1
         shipLateLimit))
d8769 2
a8770 1
         invCost))
d8783 2
a8784 1
         invCost))
d8795 2
a8796 1
         localBuildAhead))
d8807 2
a8808 1
         localMultiExec))
d8819 2
a8820 1
         obj2Winv))
d8833 2
a8834 1
         obj2Winv))
d8845 2
a8846 1
         obj2Wrev))
d8859 2
a8860 1
         obj2Wrev))
d8871 2
a8872 1
         obj2Wserv))
d8885 2
a8886 1
         obj2Wserv))
d8897 2
a8898 1
         obj2Wsub))
d8911 2
a8912 1
         obj2Wsub))
d8923 2
a8924 1
         objChoice))
d8937 2
a8938 1
         obj1ExecCost))
d8953 2
a8954 1
         obj1ExecCost))
d8967 2
a8968 1
         obj2AuxCost))
d8983 2
a8984 1
         obj2AuxCost))
d8997 2
a8998 1
         yield))
d9009 2
a9010 1
         optWithLotSizes))
d9023 2
a9024 1
         buildAheadLimit))
d9037 2
a9038 1
         cycleTime))
d9051 2
a9052 1
         incLotSize))
d9065 2
a9066 1
         minLotSize))
d9079 2
a9080 1
         obj1ProdCost))
d9094 2
a9095 1
         ))
d9111 2
a9112 1
         ))
d9125 2
a9126 1
         obj1StockCost))
d9141 2
a9142 1
         obj1StockCost))
d9159 2
a9160 1
         hardUpper))
d9173 2
a9174 1
         prodVol))
d9187 2
a9188 1
         propRouting))
d9201 2
a9202 1
         unitCost))
d9217 2
a9218 1
         unitCost))
d9231 2
a9232 1
         yield))
d9243 2
a9244 1
         periodsPerYear))
d9257 2
a9258 1
         periodsPerYear))
d9269 2
a9270 1
         stockRealloc))
d9287 2
a9288 1
         fallout))
d9305 2
a9306 1
         obj2SubPenalty))
d9325 2
a9326 1
         obj2SubPenalty))
d9343 2
a9344 1
         prodVol))
d9361 2
a9362 1
         usageRate))
d9375 2
a9376 1
         fileFormat))
d9389 2
a9390 1
         solverLogFileName))
d9401 2
a9402 1
         solverLogFileName))
d9413 2
a9414 1
         nonMrSelSplit))
d9425 2
a9426 1
         nonMrSelSplit))
d9439 2
a9440 1
         baSelSplit))
d9453 2
a9454 1
         baSelSplit))
d9469 2
a9470 1
         meSelSplit))
d9485 2
a9486 1
         meSelSplit))
d9497 2
a9498 1
         srSelSplit))
d9509 2
a9510 1
         srSelSplit))
d9524 2
a9525 1
         isOne))
d9538 2
a9539 1
         ))
d9552 2
a9553 1
         ))
d9563 2
a9564 1
         ))
d9574 2
a9575 1
         ))
d9601 2
a9602 1
         ))
@


1.156
log
@[multi-thread]
@
text
@d28 1
a28 1
// Macro STANDARD_API_IMPL (innerFunc, argList, suffix)
a36 3
//    suffix       A string to be added to the end of innerFunc in order to form
//                 the name of the outer API function.
//                 This will be either "" or "Dbl".
d44 3
d49 1
a49 1
#define STANDARD_API_IMPL(innerFunc, argList, suffix)                          \
d51 2
a52 1
   WitApiMgr * theApiMgr;                                                      \
d58 6
a63 1
      theApiMgr->startApiFunc (#innerFunc suffix, preInitMode, quietMode);     \
d84 5
d90 25
a114 2
namespace WitNonClass
{
d116 1
a116 12
const bool preInitMode = false;
const bool quietMode   = false;
   //
   // These two variables are, by default, passed as arguments to
   // ApiMgr::startApiFunc by the expanded code resulting from an invocation of
   // the STANDARD_API_IMPL macro.
   // In cases where a value of true is to be passed for either argument,
   // a local variable with the same name should be declared and set to true.
   // For an example of this, see witSetMesgFileAccessMode.
};
   //
   // Leaving namespace NonClass.
d135 1
a135 2
         consumedPartName),
      "")
d148 1
a148 2
         producedPartName),
      "")
d161 1
a161 2
         demandName),
      "")
d172 1
a172 2
         operationName),
      "")
d185 1
a185 2
         partCategory),
      "")
d196 1
a196 2
         partAndOperationName),
      "")
d211 1
a211 2
         consumedPartName),
      "")
d221 1
a221 2
         ),
      "")
d238 1
a238 2
         incShipVol),
      "")
d250 2
d257 1
a257 2
         incShipVol),
      "Dbl")
d267 1
a267 2
         ),
      "")
d277 1
a277 2
         ),
      "")
d287 1
a287 2
         ),
      "")
d305 1
a305 2
         srcWitRun),
      "")
d346 1
a346 2
         ),
      "")
d357 1
a357 2
         fileName),
      "")
d378 1
a378 2
         incVolList),
      "")
d392 2
d401 1
a401 2
         incVolList),
      "Dbl")
d424 1
a424 2
         asapMultiExecList),
      "")
d439 2
d449 1
a449 2
         asapMultiExecList),
      "Dbl")
d461 1
a461 2
         ),
      "")
d473 1
a473 2
         ),
      "")
d495 1
a495 2
         ),
      "")
d506 1
a506 2
         accAfterSoftLB),
      "")
d517 1
a517 2
         accAfterOptImp),
      "")
d528 1
a528 2
         accelerated),
      "")
d539 1
a539 2
         appData),
      "")
d550 1
a550 2
         autoPriority),
      "")
d565 1
a565 2
         appData),
      "")
d580 1
a580 2
         consRate),
      "")
d591 2
d597 1
a597 2
         consRate),
      "Dbl")
d612 1
a612 2
         earliestPeriod),
      "")
d627 1
a627 2
         nSubsBomEntries),
      "")
d642 1
a642 2
         consumedPartName),
      "")
d657 1
a657 2
         execPenalty),
      "")
d668 2
d674 1
a674 2
         execPenalty),
      "Dbl")
d689 1
a689 2
         falloutRate),
      "")
d700 2
d706 1
a706 2
         falloutRate),
      "Dbl")
d721 1
a721 2
         impactPeriod),
      "")
d736 1
a736 2
         latestPeriod),
      "")
d751 1
a751 2
         mandEC),
      "")
d766 1
a766 2
         offset),
      "")
d777 2
d783 1
a783 2
         offset),
      "Dbl")
d798 1
a798 2
         propRtg),
      "")
d813 1
a813 2
         routingShare),
      "")
d824 2
d830 1
a830 2
         routingShare),
      "Dbl")
d845 1
a845 2
         selForDel),
      "")
d860 1
a860 2
         singleSource),
      "")
d876 1
a876 2
         appData),
      "")
d891 1
a891 2
         earliestPeriod),
      "")
d906 1
a906 2
         expAllowed),
      "")
d921 1
a921 2
         expAversion),
      "")
d932 2
d938 1
a938 2
         expAversion),
      "Dbl")
d953 1
a953 2
         impactPeriod),
      "")
d968 1
a968 2
         latestPeriod),
      "")
d983 1
a983 2
         offset),
      "")
d994 2
d1000 1
a1000 2
         offset),
      "Dbl")
d1015 1
a1015 2
         pipShare),
      "")
d1026 2
d1032 1
a1032 2
         pipShare),
      "Dbl")
d1047 1
a1047 2
         productRate),
      "")
d1058 2
d1064 1
a1064 2
         productRate),
      "Dbl")
d1079 1
a1079 2
         producedPartName),
      "")
d1094 1
a1094 2
         routingShare),
      "")
d1105 2
d1111 1
a1111 2
         routingShare),
      "Dbl")
d1126 1
a1126 2
         selForDel),
      "")
d1137 1
a1137 2
         buildWhenEmpty),
      "")
d1148 1
a1148 2
         compPrices),
      "")
d1159 1
a1159 2
         computeCriticalList),
      "")
d1174 1
a1174 2
         critPeriod),
      "")
d1189 1
a1189 2
         appData),
      "")
d1212 1
a1212 2
         peggedVolList),
      "")
d1227 2
d1237 1
a1237 2
         peggedVolList),
      "Dbl")
d1256 1
a1256 2
         hardUpper),
      "")
d1269 2
d1277 1
a1277 2
         hardUpper),
      "Dbl")
d1292 1
a1292 2
         cumShipReward),
      "")
d1303 2
d1309 1
a1309 2
         cumShipReward),
      "Dbl")
d1324 1
a1324 2
         demandVol),
      "")
d1335 2
d1341 1
a1341 2
         demandVol),
      "Dbl")
d1364 1
a1364 2
         peggedExecVolList),
      "")
d1379 2
d1389 1
a1389 2
         peggedExecVolList),
      "Dbl")
d1412 1
a1412 2
         peggedExecVolList),
      "")
d1427 2
d1437 1
a1437 2
         peggedExecVolList),
      "Dbl")
d1452 1
a1452 2
         focusHorizon),
      "")
d1467 1
a1467 2
         fssShipVol),
      "")
d1479 2
d1485 1
a1485 2
         fssShipVol),
      "Dbl")
d1500 1
a1500 2
         obj1CumShipReward),
      "")
d1511 2
d1517 1
a1517 2
         obj1CumShipReward),
      "Dbl")
d1532 1
a1532 2
         obj1ShipReward),
      "")
d1543 2
d1549 1
a1549 2
         obj1ShipReward),
      "Dbl")
d1564 1
a1564 2
         priority),
      "")
d1587 1
a1587 2
         peggedVolList),
      "")
d1602 2
d1612 1
a1612 2
         peggedVolList),
      "Dbl")
d1627 1
a1627 2
         shipLateLimit),
      "")
d1642 1
a1642 2
         shipLateUB),
      "")
d1657 1
a1657 2
         shipReward),
      "")
d1668 2
d1674 1
a1674 2
         shipReward),
      "Dbl")
d1689 1
a1689 2
         shipVol),
      "")
d1700 2
d1706 1
a1706 2
         shipVol),
      "Dbl")
d1729 1
a1729 2
         peggedVolList),
      "")
d1744 2
d1754 1
a1754 2
         peggedVolList),
      "Dbl")
d1781 1
a1781 2
         peggedSubVolList),
      "")
d1798 2
d1810 1
a1810 2
         peggedSubVolList),
      "Dbl")
d1837 1
a1837 2
         peggedSubVolList),
      "")
d1854 2
d1866 1
a1866 2
         peggedSubVolList),
      "Dbl")
d1889 1
a1889 2
         peggedVolList),
      "")
d1904 2
d1914 1
a1914 2
         peggedVolList),
      "Dbl")
d1925 1
a1925 2
         equitablity),
      "")
d1936 1
a1936 2
         execEmptyBom),
      "")
d1947 1
a1947 2
         expCutoff),
      "")
d1956 2
d1960 1
a1960 2
         expCutoff),
      "Dbl")
d1971 1
a1971 2
         feasible),
      "")
d1986 1
a1986 2
         shortageVolList),
      "")
d1997 2
d2003 1
a2003 2
         shortageVolList),
      "Dbl")
d2014 1
a2014 2
         forcedMultiEq),
      "")
d2025 1
a2025 2
         hashTableSize),
      "")
d2036 1
a2036 2
         heurAllocActive),
      "")
d2047 1
a2047 2
         highPrecisionWD),
      "")
d2058 1
a2058 2
         independentOffsets),
      "")
d2069 1
a2069 2
         lotSizeTol),
      "")
d2078 2
d2082 1
a2082 2
         lotSizeTol),
      "Dbl")
d2093 1
a2093 2
         mesgFile),
      "")
d2104 1
a2104 2
         mesgFileAccessMode),
      "")
d2115 1
a2115 2
         mesgFileName),
      "")
d2128 1
a2128 2
         mesgPrintMunber),
      "")
d2141 1
a2141 2
         mesgStopRunning),
      "")
d2154 1
a2154 2
         mesgThrowException),
      "")
d2167 1
a2167 2
         mesgTimesPrint),
      "")
d2178 1
a2178 2
         multiExec),
      "")
d2189 1
a2189 2
         multiRoute),
      "")
d2200 1
a2200 2
         multiThread),
      "")
d2211 1
a2211 2
         nPeriods),
      "")
d2224 1
a2224 2
         bomEntryIndex),
      "")
d2237 1
a2237 2
         bopEntryIndex),
      "")
d2250 1
a2250 2
         demandName),
      "")
d2261 1
a2261 2
         operationName),
      "")
d2272 1
a2272 2
         partName),
      "")
d2283 1
a2283 2
         objItrState),
      "")
d2298 1
a2298 2
         subsBomEntryIndex),
      "")
d2311 1
a2311 2
         boundsValue),
      "")
d2321 2
d2326 1
a2326 2
         boundsValue),
      "Dbl")
d2339 1
a2339 2
         appData),
      "")
d2356 1
a2356 2
         hardUpper),
      "")
d2368 2
d2375 1
a2375 2
         hardUpper),
      "Dbl")
d2388 1
a2388 2
         execCost),
      "")
d2398 2
d2403 1
a2403 2
         execCost),
      "Dbl")
d2416 1
a2416 2
         execPenalty),
      "")
d2426 2
d2431 1
a2431 2
         execPenalty),
      "Dbl")
d2444 1
a2444 2
         execVol),
      "")
d2457 1
a2457 2
         execVol),
      "")
d2467 2
d2472 1
a2472 2
         execVol),
      "Dbl")
d2485 1
a2485 2
         exist),
      "")
d2498 1
a2498 2
         fssExecVol),
      "")
d2508 2
d2513 1
a2513 2
         fssExecVol),
      "Dbl")
d2526 1
a2526 2
         incLotSize),
      "")
d2536 2
d2541 1
a2541 2
         incLotSize),
      "Dbl")
d2554 1
a2554 2
         incLotSize2),
      "")
d2564 2
d2569 1
a2569 2
         incLotSize2),
      "Dbl")
d2582 1
a2582 2
         lotSize2Thresh),
      "")
d2592 2
d2597 1
a2597 2
         lotSize2Thresh),
      "Dbl")
d2610 1
a2610 2
         minLotSize),
      "")
d2620 2
d2625 1
a2625 2
         minLotSize),
      "Dbl")
d2638 1
a2638 2
         minLotSize2),
      "")
d2648 2
d2653 1
a2653 2
         minLotSize2),
      "Dbl")
d2666 1
a2666 2
         mrpExecVol),
      "")
d2676 2
d2681 1
a2681 2
         mrpExecVol),
      "Dbl")
d2694 1
a2694 2
         nBomEntries),
      "")
d2707 1
a2707 2
         nBopEntries),
      "")
d2720 1
a2720 2
         operationList),
      "")
d2733 1
a2733 2
         selForDel),
      "")
d2746 1
a2746 2
         twoLevelLotSizes),
      "")
d2759 1
a2759 2
         yieldRate),
      "")
d2769 2
d2774 1
a2774 2
         yieldRate),
      "Dbl")
d2785 1
a2785 2
         optInitMethod),
      "")
d2796 1
a2796 2
         oslMesgFileName),
      "")
d2807 1
a2807 2
         outputPrecision),
      "")
d2818 1
a2818 2
         postprocessed),
      "")
d2831 1
a2831 2
         appData),
      "")
d2846 1
a2846 2
         partNameList),
      "")
d2859 1
a2859 2
         buildAheadUB),
      "")
d2872 1
a2872 2
         buildAsap),
      "")
d2885 1
a2885 2
         buildNstn),
      "")
d2898 1
a2898 2
         consVol),
      "")
d2908 2
d2913 1
a2913 2
         consVol),
      "Dbl")
d2930 1
a2930 2
         bomEntryIndex),
      "")
d2949 1
a2949 2
         subsBomEntryIndex),
      "")
d2964 1
a2964 2
         demandList),
      "")
d2977 1
a2977 2
         category),
      "")
d2990 1
a2990 2
         excessVol),
      "")
d3000 2
d3005 1
a3005 2
         excessVol),
      "Dbl")
d3018 1
a3018 2
         exist),
      "")
d3031 1
a3031 2
         shortageVol),
      "")
d3041 2
d3046 1
a3046 2
         shortageVol),
      "Dbl")
d3059 1
a3059 2
         mrpConsVol),
      "")
d3069 2
d3074 1
a3074 2
         mrpConsVol),
      "Dbl")
d3087 1
a3087 2
         mrpExcessVol),
      "")
d3097 2
d3102 1
a3102 2
         mrpExcessVol),
      "Dbl")
d3115 1
a3115 2
         mrpResidualVol),
      "")
d3125 2
d3130 1
a3130 2
         mrpResidualVol),
      "Dbl")
d3143 1
a3143 2
         nConsumingBomEntries),
      "")
d3156 1
a3156 2
         nConsumingSubsBomEntries),
      "")
d3169 1
a3169 2
         nProducingBopEntries),
      "")
d3182 1
a3182 2
         prodVol),
      "")
d3192 2
d3197 1
a3197 2
         prodVol),
      "Dbl")
d3214 1
a3214 2
         bopEntryIndex),
      "")
d3227 1
a3227 2
         propRtg),
      "")
d3240 1
a3240 2
         reqVol),
      "")
d3250 2
d3255 1
a3255 2
         reqVol),
      "Dbl")
d3268 1
a3268 2
         residualVol),
      "")
d3278 2
d3283 1
a3283 2
         residualVol),
      "Dbl")
d3296 1
a3296 2
         partList),
      "")
d3309 1
a3309 2
         scrapCost),
      "")
d3319 2
d3324 1
a3324 2
         scrapCost),
      "Dbl")
d3337 1
a3337 2
         scrapVol),
      "")
d3347 2
d3352 1
a3352 2
         scrapVol),
      "Dbl")
d3365 1
a3365 2
         selForDel),
      "")
d3378 1
a3378 2
         shadowPrice),
      "")
d3388 2
d3393 1
a3393 2
         shadowPrice),
      "Dbl")
d3406 1
a3406 2
         singleSource),
      "")
d3423 1
a3423 2
         hardUpper),
      "")
d3435 2
d3442 1
a3442 2
         hardUpper),
      "Dbl")
d3455 1
a3455 2
         stockCost),
      "")
d3465 2
d3470 1
a3470 2
         stockCost),
      "Dbl")
d3483 1
a3483 2
         stockVol),
      "")
d3493 2
d3498 1
a3498 2
         stockVol),
      "Dbl")
d3511 1
a3511 2
         supplyVol),
      "")
d3521 2
d3526 1
a3526 2
         supplyVol),
      "Dbl")
d3537 1
a3537 2
         penExec),
      "")
d3548 1
a3548 2
         pipExists),
      "")
d3567 1
a3567 2
         incShipVolList),
      "")
d3580 2
d3588 1
a3588 2
         incShipVolList),
      "Dbl")
d3599 1
a3599 2
         pipSeqFromHeur),
      "")
d3610 1
a3610 2
         perfPegging),
      "")
d3631 1
a3631 2
         shipPerList),
      "")
d3642 1
a3642 2
         pgdCritListMode),
      "")
d3653 1
a3653 2
         postSolveRecovery),
      "")
d3664 1
a3664 2
         prefHighStockSLBs),
      "")
d3675 1
a3675 2
         preprocessed),
      "")
d3686 1
a3686 2
         respectStockSLBs),
      "")
d3697 1
a3697 2
         roundReqVols),
      "")
d3708 1
a3708 2
         selSplit),
      "")
d3719 1
a3719 2
         skipFailures),
      "")
d3730 1
a3730 2
         stockReallocation),
      "")
d3747 1
a3747 2
         appData),
      "")
d3764 1
a3764 2
         consRate),
      "")
d3776 2
d3783 1
a3783 2
         consRate),
      "Dbl")
d3800 1
a3800 2
         consumedPart),
      "")
d3817 1
a3817 2
         earliestPeriod),
      "")
d3834 1
a3834 2
         execPenalty),
      "")
d3846 2
d3853 1
a3853 2
         execPenalty),
      "Dbl")
d3870 1
a3870 2
         expAllowed),
      "")
d3887 1
a3887 2
         expNetAversion),
      "")
d3899 2
d3906 1
a3906 2
         expNetAversion),
      "Dbl")
d3923 1
a3923 2
         falloutRate),
      "")
d3935 2
d3942 1
a3942 2
         falloutRate),
      "Dbl")
d3959 1
a3959 2
         fssSubVol),
      "")
d3971 2
d3978 1
a3978 2
         fssSubVol),
      "Dbl")
d3995 1
a3995 2
         impactPeriod),
      "")
d4012 1
a4012 2
         latestPeriod),
      "")
d4029 1
a4029 2
         mrpNetAllowed),
      "")
d4046 1
a4046 2
         mrpSubVol),
      "")
d4058 2
d4065 1
a4065 2
         mrpSubVol),
      "Dbl")
d4082 1
a4082 2
         netAllowed),
      "")
d4099 1
a4099 2
         obj1SubCost),
      "")
d4111 2
d4118 1
a4118 2
         obj1SubCost),
      "Dbl")
d4135 1
a4135 2
         offset),
      "")
d4147 2
d4154 1
a4154 2
         offset),
      "Dbl")
d4171 1
a4171 2
         routingShare),
      "")
d4183 2
d4190 1
a4190 2
         routingShare),
      "Dbl")
d4207 1
a4207 2
         selForDel),
      "")
d4224 1
a4224 2
         subCost),
      "")
d4236 2
d4243 1
a4243 2
         subCost),
      "Dbl")
d4260 1
a4260 2
         subVol),
      "")
d4272 2
d4279 1
a4279 2
         subVol),
      "Dbl")
d4290 1
a4290 2
         tieBreakPropRt),
      "")
d4301 1
a4301 2
         title),
      "")
d4312 1
a4312 2
         truncOffsets),
      "")
d4323 1
a4323 2
         twoWayMultiExec),
      "")
d4334 1
a4334 2
         useFocusHorizons),
      "")
d4345 1
a4345 2
         userHeurStart),
      "")
d4356 1
a4356 2
         wbounds),
      "")
d4365 2
d4369 1
a4369 2
         wbounds),
      "Dbl")
d4380 1
a4380 2
         wit34Compatible),
      "")
d4390 1
a4390 2
         ),
      "")
d4409 1
a4409 2
         incVol),
      "")
d4422 2
d4430 1
a4430 2
         incVol),
      "Dbl")
d4451 1
a4451 2
         asapMultiExec),
      "")
d4465 2
d4474 1
a4474 2
         asapMultiExec),
      "Dbl")
d4486 1
a4486 2
         ),
      "")
d4496 1
a4496 2
         ),
      "")
d4522 1
a4522 2
         ),
      "")
d4534 1
a4534 2
         ),
      "")
d4544 1
a4544 2
         ),
      "")
d4556 1
a4556 2
         ),
      "")
d4566 1
a4566 2
         ),
      "")
d4576 1
a4576 2
         ),
      "")
d4587 1
a4587 2
         fileName),
      "")
d4597 1
a4597 2
         ),
      "")
d4608 1
a4608 2
         accAfterSoftLB),
      "")
d4619 1
a4619 2
         accAfterOptImp),
      "")
d4630 1
a4630 2
         appData),
      "")
d4641 1
a4641 2
         autoPriority),
      "")
d4656 1
a4656 2
         appData),
      "")
d4671 1
a4671 2
         consRate),
      "")
d4682 2
d4688 1
a4688 2
         consRate),
      "Dbl")
d4703 1
a4703 2
         earliestPeriod),
      "")
d4718 1
a4718 2
         execPenalty),
      "")
d4729 2
d4735 1
a4735 2
         execPenalty),
      "Dbl")
d4750 1
a4750 2
         falloutRate),
      "")
d4761 2
d4767 1
a4767 2
         falloutRate),
      "Dbl")
d4782 1
a4782 2
         latestPeriod),
      "")
d4797 1
a4797 2
         mandEC),
      "")
d4812 1
a4812 2
         offset),
      "")
d4823 2
d4829 1
a4829 2
         offset),
      "Dbl")
d4844 1
a4844 2
         propRtg),
      "")
d4859 1
a4859 2
         routingShare),
      "")
d4870 2
d4876 1
a4876 2
         routingShare),
      "Dbl")
d4891 1
a4891 2
         selForDel),
      "")
d4906 1
a4906 2
         singleSource),
      "")
d4921 1
a4921 2
         appData),
      "")
d4936 1
a4936 2
         earliestPeriod),
      "")
d4951 1
a4951 2
         expAllowed),
      "")
d4966 1
a4966 2
         expAversion),
      "")
d4977 2
d4983 1
a4983 2
         expAversion),
      "Dbl")
d4998 1
a4998 2
         latestPeriod),
      "")
d5013 1
a5013 2
         offset),
      "")
d5024 2
d5030 1
a5030 2
         offset),
      "Dbl")
d5045 1
a5045 2
         pipShare),
      "")
d5056 2
d5062 1
a5062 2
         pipShare),
      "Dbl")
d5077 1
a5077 2
         productRate),
      "")
d5088 2
d5094 1
a5094 2
         productRate),
      "Dbl")
d5109 1
a5109 2
         routingShare),
      "")
d5120 2
d5126 1
a5126 2
         routingShare),
      "Dbl")
d5141 1
a5141 2
         selForDel),
      "")
d5152 1
a5152 2
         compPrices),
      "")
d5163 1
a5163 2
         computeCriticalList),
      "")
d5178 1
a5178 2
         appData),
      "")
d5197 1
a5197 2
         hardUpper),
      "")
d5210 2
d5218 1
a5218 2
         hardUpper),
      "Dbl")
d5233 1
a5233 2
         cumShipReward),
      "")
d5244 2
d5250 1
a5250 2
         cumShipReward),
      "Dbl")
d5265 1
a5265 2
         demandVol),
      "")
d5276 2
d5282 1
a5282 2
         demandVol),
      "Dbl")
d5297 1
a5297 2
         focusHorizon),
      "")
d5312 1
a5312 2
         fssShipVol),
      "")
d5323 2
d5329 1
a5329 2
         fssShipVol),
      "Dbl")
d5344 1
a5344 2
         obj1CumShipReward),
      "")
d5355 2
d5361 1
a5361 2
         obj1CumShipReward),
      "Dbl")
d5376 1
a5376 2
         obj1ShipReward),
      "")
d5387 2
d5393 1
a5393 2
         obj1ShipReward),
      "Dbl")
d5408 1
a5408 2
         priority),
      "")
d5423 1
a5423 2
         selForDel),
      "")
d5438 1
a5438 2
         shipLateUB),
      "")
d5453 1
a5453 2
         shipReward),
      "")
d5464 2
d5470 1
a5470 2
         shipReward),
      "Dbl")
d5485 1
a5485 2
         shipVol),
      "")
d5496 2
d5502 1
a5502 2
         shipVol),
      "Dbl")
d5513 1
a5513 2
         equitablity),
      "")
d5524 1
a5524 2
         execEmptyBom),
      "")
d5535 1
a5535 2
         expCutoff),
      "")
d5544 2
d5548 1
a5548 2
         expCutoff),
      "Dbl")
d5559 1
a5559 2
         forcedMultiEq),
      "")
d5570 1
a5570 2
         hashTableSize),
      "")
d5581 1
a5581 2
         highPrecisionWD),
      "")
d5592 1
a5592 2
         independentOffsets),
      "")
d5603 1
a5603 2
         lotSizeTol),
      "")
d5612 2
d5616 1
a5616 2
         lotSizeTol),
      "Dbl")
d5632 1
a5632 2
         mesgFileAccessMode),
      "")
d5648 1
a5648 2
         mesgFileName),
      "")
d5666 1
a5666 2
         mesgPrintMunber),
      "")
d5684 1
a5684 2
         mesgStopRunning),
      "")
d5702 1
a5702 2
         mesgThrowException),
      "")
d5720 1
a5720 2
         mesgTimesPrint),
      "")
d5731 1
a5731 2
         multiExec),
      "")
d5742 1
a5742 2
         multiRoute),
      "")
d5754 1
a5754 2
         ),
      "")
d5765 1
a5765 2
         nPeriods),
      "")
d5776 1
a5776 2
         oslMesgFileName),
      "")
d5789 1
a5789 2
         appData),
      "")
d5806 1
a5806 2
         hardUpper),
      "")
d5818 2
d5825 1
a5825 2
         hardUpper),
      "Dbl")
d5838 1
a5838 2
         execCost),
      "")
d5848 2
d5853 1
a5853 2
         execCost),
      "Dbl")
d5866 1
a5866 2
         execPenalty),
      "")
d5876 2
d5881 1
a5881 2
         execPenalty),
      "Dbl")
d5894 1
a5894 2
         execVol),
      "")
d5904 2
d5909 1
a5909 2
         execVol),
      "Dbl")
d5922 1
a5922 2
         incLotSize),
      "")
d5932 2
d5937 1
a5937 2
         incLotSize),
      "Dbl")
d5950 1
a5950 2
         incLotSize2),
      "")
d5960 2
d5965 1
a5965 2
         incLotSize2),
      "Dbl")
d5978 1
a5978 2
         lotSize2Thresh),
      "")
d5988 2
d5993 1
a5993 2
         lotSize2Thresh),
      "Dbl")
d6006 1
a6006 2
         minLotSize),
      "")
d6016 2
d6021 1
a6021 2
         minLotSize),
      "Dbl")
d6034 1
a6034 2
         minLotSize2),
      "")
d6044 2
d6049 1
a6049 2
         minLotSize2),
      "Dbl")
d6062 1
a6062 2
         selForDel),
      "")
d6075 1
a6075 2
         twoLevelLotSizes),
      "")
d6088 1
a6088 2
         yieldRate),
      "")
d6098 2
d6103 1
a6103 2
         yieldRate),
      "Dbl")
d6114 1
a6114 2
         optInitMethod),
      "")
d6125 1
a6125 2
         outputPrecision),
      "")
d6138 1
a6138 2
         appData),
      "")
d6151 1
a6151 2
         buildAheadUB),
      "")
d6164 1
a6164 2
         buildAsap),
      "")
d6177 1
a6177 2
         buildNstn),
      "")
d6190 1
a6190 2
         propRtg),
      "")
d6204 1
a6204 2
         ),
      "")
d6214 2
d6220 1
a6220 2
         ),
      "Dbl")
d6233 1
a6233 2
         selForDel),
      "")
d6246 1
a6246 2
         singleSource),
      "")
d6263 1
a6263 2
         hardUpper),
      "")
d6275 2
d6282 1
a6282 2
         hardUpper),
      "Dbl")
d6295 1
a6295 2
         stockCost),
      "")
d6305 2
d6310 1
a6310 2
         stockCost),
      "Dbl")
d6323 1
a6323 2
         supplyVol),
      "")
d6333 2
d6338 1
a6338 2
         supplyVol),
      "Dbl")
d6349 1
a6349 2
         penExec),
      "")
d6360 1
a6360 2
         perfPegging),
      "")
d6371 1
a6371 2
         pgdCritListMode),
      "")
d6382 1
a6382 2
         pipSeqFromHeur),
      "")
d6393 1
a6393 2
         postSolveRecovery),
      "")
d6404 1
a6404 2
         prefHighStockSLBs),
      "")
d6415 1
a6415 2
         respectStockSLBs),
      "")
d6426 1
a6426 2
         roundReqVols),
      "")
d6437 1
a6437 2
         selSplit),
      "")
d6448 1
a6448 2
         skipFailures),
      "")
d6459 1
a6459 2
         stockReallocation),
      "")
d6476 1
a6476 2
         appData),
      "")
d6493 1
a6493 2
         consRate),
      "")
d6505 2
d6512 1
a6512 2
         consRate),
      "Dbl")
d6529 1
a6529 2
         earliestPeriod),
      "")
d6546 1
a6546 2
         execPenalty),
      "")
d6558 2
d6565 1
a6565 2
         execPenalty),
      "Dbl")
d6582 1
a6582 2
         expAllowed),
      "")
d6599 1
a6599 2
         expNetAversion),
      "")
d6611 2
d6618 1
a6618 2
         expNetAversion),
      "Dbl")
d6635 1
a6635 2
         falloutRate),
      "")
d6647 2
d6654 1
a6654 2
         falloutRate),
      "Dbl")
d6671 1
a6671 2
         latestPeriod),
      "")
d6688 1
a6688 2
         mrpNetAllowed),
      "")
d6705 1
a6705 2
         netAllowed),
      "")
d6722 1
a6722 2
         obj1SubCost),
      "")
d6734 2
d6741 1
a6741 2
         obj1SubCost),
      "Dbl")
d6758 1
a6758 2
         offset),
      "")
d6770 2
d6777 1
a6777 2
         offset),
      "Dbl")
d6794 1
a6794 2
         routingShare),
      "")
d6806 2
d6813 1
a6813 2
         routingShare),
      "Dbl")
d6830 1
a6830 2
         selForDel),
      "")
d6847 1
a6847 2
         subCost),
      "")
d6859 2
d6866 1
a6866 2
         subCost),
      "Dbl")
d6883 1
a6883 2
         subVol),
      "")
d6895 2
d6902 1
a6902 2
         subVol),
      "Dbl")
d6913 1
a6913 2
         tieBreakPropRt),
      "")
d6924 1
a6924 2
         title),
      "")
d6935 1
a6935 2
         truncOffsets),
      "")
d6946 1
a6946 2
         twoWayMultiExec),
      "")
d6957 1
a6957 2
         useFocusHorizons),
      "")
d6968 1
a6968 2
         userHeurStart),
      "")
d6979 1
a6979 2
         wbounds),
      "")
d6988 2
d6992 1
a6992 2
         wbounds),
      "Dbl")
d7003 1
a7003 2
         wit34Compatible),
      "")
d7013 1
a7013 2
         ),
      "")
d7023 1
a7023 2
         ),
      "")
d7038 1
a7038 2
         maxListLen),
      "")
d7049 1
a7049 2
         fileName),
      "")
d7062 1
a7062 2
         fileFormat),
      "")
d7075 1
a7075 2
         fileFormat),
      "")
d7088 1
a7088 2
         fileFormat),
      "")
d7115 1
a7115 2
         theApiVaList ()),
      "")
d7136 1
a7136 2
         theApiVaList ()),
      "")
d7157 1
a7157 2
         theApiVaList ()),
      "")
d7180 1
a7180 2
         theApiVaList ()),
      "")
d7195 1
a7195 2
         fallout),
      "")
d7210 1
a7210 2
         propRouting),
      "")
d7225 1
a7225 2
         usageRate),
      "")
d7240 1
a7240 2
         time),
      "")
d7255 1
a7255 2
         byProduct),
      "")
d7270 1
a7270 2
         prodRate),
      "")
d7281 1
a7281 2
         capCost),
      "")
d7290 2
d7294 1
a7294 2
         capCost),
      "Dbl")
d7309 1
a7309 2
         buildAheadLimit),
      "")
d7324 1
a7324 2
         buildAheadUB),
      "")
d7339 1
a7339 2
         grossRev),
      "")
d7350 2
d7356 1
a7356 2
         grossRev),
      "Dbl")
d7371 1
a7371 2
         prefBuildAhead),
      "")
d7386 1
a7386 2
         shipLateLimit),
      "")
d7397 1
a7397 2
         invCost),
      "")
d7406 2
d7410 1
a7410 2
         invCost),
      "Dbl")
d7421 1
a7421 2
         localBuildAhead),
      "")
d7432 1
a7432 2
         localMultiExec),
      "")
d7449 1
a7449 2
         subsValue),
      "")
d7461 2
d7468 1
a7468 2
         subsValue),
      "Dbl")
d7479 1
a7479 2
         obj2Winv),
      "")
d7488 2
d7492 1
a7492 2
         obj2Winv),
      "Dbl")
d7503 1
a7503 2
         obj2Wrev),
      "")
d7512 2
d7516 1
a7516 2
         obj2Wrev),
      "Dbl")
d7527 1
a7527 2
         obj2Wserv),
      "")
d7536 2
d7540 1
a7540 2
         obj2Wserv),
      "Dbl")
d7551 1
a7551 2
         obj2Wsub),
      "")
d7560 2
d7564 1
a7564 2
         obj2Wsub),
      "Dbl")
d7575 1
a7575 2
         objChoice),
      "")
d7588 1
a7588 2
         obj1ExecCost),
      "")
d7598 2
d7603 1
a7603 2
         obj1ExecCost),
      "Dbl")
d7616 1
a7616 2
         obj2AuxCost),
      "")
d7626 2
d7631 1
a7631 2
         obj2AuxCost),
      "Dbl")
d7644 1
a7644 2
         yield),
      "")
d7655 1
a7655 2
         optWithLotSizes),
      "")
d7668 1
a7668 2
         buildAheadLimit),
      "")
d7681 1
a7681 2
         cycleTime),
      "")
d7694 1
a7694 2
         incLotSize),
      "")
d7707 1
a7707 2
         minLotSize),
      "")
d7720 1
a7720 2
         mrpProdVol),
      "")
d7733 1
a7733 2
         nBomEntries),
      "")
d7746 1
a7746 2
         obj1ProdCost),
      "")
d7759 1
a7759 2
         obj1ScrapCost),
      "")
d7769 2
d7774 1
a7774 2
         obj1ScrapCost),
      "Dbl")
d7787 1
a7787 2
         obj1StockCost),
      "")
d7797 2
d7802 1
a7802 2
         obj1StockCost),
      "Dbl")
d7819 1
a7819 2
         hardUpper),
      "")
d7832 1
a7832 2
         propRouting),
      "")
d7845 1
a7845 2
         unitCost),
      "")
d7855 2
d7860 1
a7860 2
         unitCost),
      "Dbl")
d7873 1
a7873 2
         yield),
      "")
d7884 1
a7884 2
         periodsPerYear),
      "")
d7893 2
d7897 1
a7897 2
         periodsPerYear),
      "Dbl")
d7908 1
a7908 2
         stockRealloc),
      "")
d7925 1
a7925 2
         fallout),
      "")
d7942 1
a7942 2
         obj2SubPenalty),
      "")
d7954 2
d7961 1
a7961 2
         obj2SubPenalty),
      "Dbl")
d7978 1
a7978 2
         prodVol),
      "")
d7995 1
a7995 2
         usageRate),
      "")
d8010 1
a8010 2
         fallout),
      "")
d8025 1
a8025 2
         propRouting),
      "")
d8040 1
a8040 2
         usageRate),
      "")
d8055 1
a8055 2
         time),
      "")
d8070 1
a8070 2
         byProduct),
      "")
d8085 1
a8085 2
         prodRate),
      "")
d8096 1
a8096 2
         buildWhenEmpty),
      "")
d8107 1
a8107 2
         capCost),
      "")
d8116 2
d8120 1
a8120 2
         capCost),
      "Dbl")
d8135 1
a8135 2
         buildAheadLimit),
      "")
d8150 1
a8150 2
         buildAheadUB),
      "")
d8165 1
a8165 2
         grossRev),
      "")
d8176 2
d8182 1
a8182 2
         grossRev),
      "Dbl")
d8197 1
a8197 2
         prefBuildAhead),
      "")
d8212 1
a8212 2
         shipLateLimit),
      "")
d8223 1
a8223 2
         invCost),
      "")
d8232 2
d8236 1
a8236 2
         invCost),
      "Dbl")
d8247 1
a8247 2
         localBuildAhead),
      "")
d8258 1
a8258 2
         localMultiExec),
      "")
d8269 1
a8269 2
         obj2Winv),
      "")
d8278 2
d8282 1
a8282 2
         obj2Winv),
      "Dbl")
d8293 1
a8293 2
         obj2Wrev),
      "")
d8302 2
d8306 1
a8306 2
         obj2Wrev),
      "Dbl")
d8317 1
a8317 2
         obj2Wserv),
      "")
d8326 2
d8330 1
a8330 2
         obj2Wserv),
      "Dbl")
d8341 1
a8341 2
         obj2Wsub),
      "")
d8350 2
d8354 1
a8354 2
         obj2Wsub),
      "Dbl")
d8365 1
a8365 2
         objChoice),
      "")
d8378 1
a8378 2
         obj1ExecCost),
      "")
d8388 2
d8393 1
a8393 2
         obj1ExecCost),
      "Dbl")
d8406 1
a8406 2
         obj2AuxCost),
      "")
d8416 2
d8421 1
a8421 2
         obj2AuxCost),
      "Dbl")
d8434 1
a8434 2
         yield),
      "")
d8445 1
a8445 2
         optWithLotSizes),
      "")
d8458 1
a8458 2
         buildAheadLimit),
      "")
d8471 1
a8471 2
         cycleTime),
      "")
d8484 1
a8484 2
         incLotSize),
      "")
d8497 1
a8497 2
         minLotSize),
      "")
d8510 1
a8510 2
         obj1ProdCost),
      "")
d8524 1
a8524 2
         ),
      "")
d8534 2
d8540 1
a8540 2
         ),
      "Dbl")
d8553 1
a8553 2
         obj1StockCost),
      "")
d8563 2
d8568 1
a8568 2
         obj1StockCost),
      "Dbl")
d8585 1
a8585 2
         hardUpper),
      "")
d8598 1
a8598 2
         prodVol),
      "")
d8611 1
a8611 2
         propRouting),
      "")
d8624 1
a8624 2
         unitCost),
      "")
d8634 2
d8639 1
a8639 2
         unitCost),
      "Dbl")
d8652 1
a8652 2
         yield),
      "")
d8663 1
a8663 2
         periodsPerYear),
      "")
d8672 2
d8676 1
a8676 2
         periodsPerYear),
      "Dbl")
d8687 1
a8687 2
         stockRealloc),
      "")
d8704 1
a8704 2
         fallout),
      "")
d8721 1
a8721 2
         obj2SubPenalty),
      "")
d8733 2
d8740 1
a8740 2
         obj2SubPenalty),
      "Dbl")
d8742 1
d8757 1
a8757 2
         prodVol),
      "")
d8774 1
a8774 2
         usageRate),
      "")
d8787 1
a8787 2
         fileFormat),
      "")
d8800 1
a8800 2
         solverLogFileName),
      "")
d8811 1
a8811 2
         solverLogFileName),
      "")
d8822 1
a8822 2
         nonMrSelSplit),
      "")
d8833 1
a8833 2
         nonMrSelSplit),
      "")
d8846 1
a8846 2
         baSelSplit),
      "")
d8859 1
a8859 2
         baSelSplit),
      "")
d8874 1
a8874 2
         meSelSplit),
      "")
d8889 1
a8889 2
         meSelSplit),
      "")
d8900 1
a8900 2
         srSelSplit),
      "")
d8911 1
a8911 2
         srSelSplit),
      "")
d8925 1
a8925 2
         isOne),
      "")
d8938 1
a8938 2
         ),
      "")
d8951 1
a8951 2
         ),
      "")
d8961 1
a8961 2
         ),
      "")
d8971 1
a8971 2
         ),
      "")
d8997 1
a8997 2
         ),
      "")
@


1.155
log
@[multi-thread]
@
text
@d57 1
a57 1
      theApiMgr->startApiFunc (#innerFunc suffix, preInitFunc, quietFunc);     \
d82 2
a83 2
const bool preInitFunc = false;
const bool quietFunc   = false;
d286 1
a286 1
   const bool preInitFunc = true;
d330 2
a331 2
   const bool preInitFunc = true;
   const bool quietFunc   = true;
d4594 1
a4594 1
   const bool preInitFunc = true;
d4620 2
a4621 2
   const bool preInitFunc = true;
   const bool quietFunc   = true;
d5777 2
a5778 2
   const bool preInitFunc = true;
   const bool quietFunc   = true;
d5794 2
a5795 2
   const bool preInitFunc = true;
   const bool quietFunc   = true;
d5812 2
a5813 2
   const bool preInitFunc = true;
   const bool quietFunc   = true;
d5831 2
a5832 2
   const bool preInitFunc = true;
   const bool quietFunc   = true;
d5850 2
a5851 2
   const bool preInitFunc = true;
   const bool quietFunc   = true;
d5869 2
a5870 2
   const bool preInitFunc = true;
   const bool quietFunc   = true;
d5909 1
a5909 1
   const bool preInitFunc = true;
d9198 2
a9199 2
   const bool preInitFunc = true;
   const bool quietFunc   = true;
d9212 2
a9213 2
   const bool preInitFunc = true;
   const bool quietFunc   = true;
d9226 2
a9227 2
   const bool preInitFunc = true;
   const bool quietFunc   = true;
@


1.154
log
@[multi-thread]
@
text
@d28 1
a28 1
// Macro STANDARD_API_IMPL (innerFunc, argList, suffix, setPreInit, setQuiet)
d34 6
a39 9
//    innerFunc  The name of the inner API fuction to be called.
//    argList    The list of arguments (in parentheses) to be passed to the
//               inner API function
//    preInit:   True, iff the API function is allowed to be called before
//               witInitialize.
//    quiet:     True, iff informational messages are to be suppressed.
//    suffix     A string to be added to the end of innerFunc in order to form
//               the name of the outer API function.
//               This will be either "" or "Dbl".
d49 1
a49 1
#define STANDARD_API_IMPL(innerFunc, argList, preInit, quiet, suffix)          \
d57 1
a57 1
      theApiMgr->startApiFunc (#innerFunc suffix, preInit, quiet);             \
d79 18
a112 2
      false,
      false,
a126 2
      false,
      false,
a140 2
      false,
      false,
a152 2
      false,
      false,
a166 2
      false,
      false,
a178 2
      false,
      false,
a194 2
      false,
      false,
a205 2
      false,
      false,
a223 2
      false,
      false,
a241 2
      false,
      false,
a252 2
      false,
      false,
a263 2
      false,
      false,
a274 2
      false,
      false,
d286 2
a287 1
   WitRun * theWitRun;
a293 2
      true,
      false,
d330 3
a335 2
      true,
      true,
a347 2
      false,
      false,
a369 2
      false,
      false,
a391 2
      false,
      false,
a415 2
      false,
      false,
a439 2
      false,
      false,
a452 2
      false,
      false,
a465 2
      false,
      false,
a488 2
      false,
      false,
a500 2
      false,
      false,
a512 2
      false,
      false,
a524 2
      false,
      false,
a536 2
      false,
      false,
a548 2
      false,
      false,
a564 2
      false,
      false,
a580 2
      false,
      false,
a596 2
      false,
      false,
a612 2
      false,
      false,
a628 2
      false,
      false,
a644 2
      false,
      false,
a660 2
      false,
      false,
a676 2
      false,
      false,
a692 2
      false,
      false,
a708 2
      false,
      false,
a724 2
      false,
      false,
a740 2
      false,
      false,
a756 2
      false,
      false,
a772 2
      false,
      false,
a788 2
      false,
      false,
a804 2
      false,
      false,
a820 2
      false,
      false,
a836 2
      false,
      false,
a852 2
      false,
      false,
a868 2
      false,
      false,
a885 2
      false,
      false,
a901 2
      false,
      false,
a917 2
      false,
      false,
a933 2
      false,
      false,
a949 2
      false,
      false,
a965 2
      false,
      false,
a981 2
      false,
      false,
a997 2
      false,
      false,
a1013 2
      false,
      false,
a1029 2
      false,
      false,
a1045 2
      false,
      false,
a1061 2
      false,
      false,
a1077 2
      false,
      false,
a1093 2
      false,
      false,
a1109 2
      false,
      false,
a1125 2
      false,
      false,
a1141 2
      false,
      false,
a1153 2
      false,
      false,
a1165 2
      false,
      false,
a1177 2
      false,
      false,
a1193 2
      false,
      false,
a1209 2
      false,
      false,
a1233 2
      false,
      false,
a1257 2
      false,
      false,
a1277 2
      false,
      false,
a1297 2
      false,
      false,
a1313 2
      false,
      false,
a1329 2
      false,
      false,
a1345 2
      false,
      false,
a1361 2
      false,
      false,
a1385 2
      false,
      false,
a1409 2
      false,
      false,
a1433 2
      false,
      false,
a1457 2
      false,
      false,
a1473 2
      false,
      false,
a1489 2
      false,
      false,
a1506 2
      false,
      false,
a1522 2
      false,
      false,
a1538 2
      false,
      false,
a1554 2
      false,
      false,
a1570 2
      false,
      false,
a1586 2
      false,
      false,
a1610 2
      false,
      false,
a1634 2
      false,
      false,
a1650 2
      false,
      false,
a1666 2
      false,
      false,
a1682 2
      false,
      false,
a1698 2
      false,
      false,
a1714 2
      false,
      false,
a1730 2
      false,
      false,
a1754 2
      false,
      false,
a1778 2
      false,
      false,
a1806 2
      false,
      false,
a1834 2
      false,
      false,
a1862 2
      false,
      false,
a1890 2
      false,
      false,
a1914 2
      false,
      false,
a1938 2
      false,
      false,
a1950 2
      false,
      false,
a1962 2
      false,
      false,
a1974 2
      false,
      false,
a1986 2
      false,
      false,
a1998 2
      false,
      false,
a2014 2
      false,
      false,
a2030 2
      false,
      false,
a2042 2
      false,
      false,
a2054 2
      false,
      false,
a2066 2
      false,
      false,
a2078 2
      false,
      false,
a2090 2
      false,
      false,
a2102 2
      false,
      false,
a2114 2
      false,
      false,
a2126 2
      false,
      false,
a2138 2
      false,
      false,
a2150 2
      false,
      false,
a2164 2
      false,
      false,
a2178 2
      false,
      false,
a2192 2
      false,
      false,
a2206 2
      false,
      false,
a2218 2
      false,
      false,
a2230 2
      false,
      false,
a2242 2
      false,
      false,
a2254 2
      false,
      false,
a2268 2
      false,
      false,
a2282 2
      false,
      false,
a2296 2
      false,
      false,
a2308 2
      false,
      false,
a2320 2
      false,
      false,
a2332 2
      false,
      false,
a2348 2
      false,
      false,
a2362 2
      false,
      false,
a2376 2
      false,
      false,
a2390 2
      false,
      false,
a2408 2
      false,
      false,
a2426 2
      false,
      false,
a2440 2
      false,
      false,
a2454 2
      false,
      false,
a2468 2
      false,
      false,
a2482 2
      false,
      false,
a2496 2
      false,
      false,
a2510 2
      false,
      false,
a2524 2
      false,
      false,
a2538 2
      false,
      false,
a2552 2
      false,
      false,
a2566 2
      false,
      false,
a2580 2
      false,
      false,
a2594 2
      false,
      false,
a2608 2
      false,
      false,
a2622 2
      false,
      false,
a2636 2
      false,
      false,
a2650 2
      false,
      false,
a2664 2
      false,
      false,
a2678 2
      false,
      false,
a2692 2
      false,
      false,
a2706 2
      false,
      false,
a2720 2
      false,
      false,
a2734 2
      false,
      false,
a2748 2
      false,
      false,
a2762 2
      false,
      false,
a2776 2
      false,
      false,
a2790 2
      false,
      false,
a2804 2
      false,
      false,
a2818 2
      false,
      false,
a2832 2
      false,
      false,
a2844 2
      false,
      false,
a2856 2
      false,
      false,
a2868 2
      false,
      false,
a2880 2
      false,
      false,
a2894 2
      false,
      false,
a2910 2
      false,
      false,
a2924 2
      false,
      false,
a2938 2
      false,
      false,
a2952 2
      false,
      false,
a2966 2
      false,
      false,
a2980 2
      false,
      false,
a2998 2
      false,
      false,
a3018 2
      false,
      false,
a3034 2
      false,
      false,
a3048 2
      false,
      false,
a3062 2
      false,
      false,
a3076 2
      false,
      false,
a3090 2
      false,
      false,
a3104 2
      false,
      false,
a3118 2
      false,
      false,
a3132 2
      false,
      false,
a3146 2
      false,
      false,
a3160 2
      false,
      false,
a3174 2
      false,
      false,
a3188 2
      false,
      false,
a3202 2
      false,
      false,
a3216 2
      false,
      false,
a3230 2
      false,
      false,
a3244 2
      false,
      false,
a3258 2
      false,
      false,
a3272 2
      false,
      false,
a3290 2
      false,
      false,
a3304 2
      false,
      false,
a3318 2
      false,
      false,
a3332 2
      false,
      false,
a3346 2
      false,
      false,
a3360 2
      false,
      false,
a3374 2
      false,
      false,
a3388 2
      false,
      false,
a3402 2
      false,
      false,
a3416 2
      false,
      false,
a3430 2
      false,
      false,
a3444 2
      false,
      false,
a3458 2
      false,
      false,
a3472 2
      false,
      false,
a3486 2
      false,
      false,
a3504 2
      false,
      false,
a3522 2
      false,
      false,
a3536 2
      false,
      false,
a3550 2
      false,
      false,
a3564 2
      false,
      false,
a3578 2
      false,
      false,
a3592 2
      false,
      false,
a3606 2
      false,
      false,
a3618 2
      false,
      false,
a3630 2
      false,
      false,
a3650 2
      false,
      false,
a3670 2
      false,
      false,
a3682 2
      false,
      false,
a3694 2
      false,
      false,
a3716 2
      false,
      false,
a3728 2
      false,
      false,
a3740 2
      false,
      false,
a3752 2
      false,
      false,
a3764 2
      false,
      false,
a3776 2
      false,
      false,
a3788 2
      false,
      false,
a3800 2
      false,
      false,
a3812 2
      false,
      false,
a3824 2
      false,
      false,
a3842 2
      false,
      false,
a3860 2
      false,
      false,
a3878 2
      false,
      false,
a3896 2
      false,
      false,
a3914 2
      false,
      false,
a3932 2
      false,
      false,
a3950 2
      false,
      false,
a3968 2
      false,
      false,
a3986 2
      false,
      false,
a4004 2
      false,
      false,
a4022 2
      false,
      false,
a4040 2
      false,
      false,
a4058 2
      false,
      false,
a4076 2
      false,
      false,
a4094 2
      false,
      false,
a4112 2
      false,
      false,
a4130 2
      false,
      false,
a4148 2
      false,
      false,
a4166 2
      false,
      false,
a4184 2
      false,
      false,
a4202 2
      false,
      false,
a4220 2
      false,
      false,
a4238 2
      false,
      false,
a4256 2
      false,
      false,
a4274 2
      false,
      false,
a4292 2
      false,
      false,
a4310 2
      false,
      false,
a4328 2
      false,
      false,
a4346 2
      false,
      false,
a4364 2
      false,
      false,
a4382 2
      false,
      false,
a4394 2
      false,
      false,
a4406 2
      false,
      false,
a4418 2
      false,
      false,
a4430 2
      false,
      false,
a4442 2
      false,
      false,
a4454 2
      false,
      false,
a4466 2
      false,
      false,
a4478 2
      false,
      false,
a4490 2
      false,
      false,
a4501 2
      false,
      false,
a4521 2
      false,
      false,
a4541 2
      false,
      false,
a4563 2
      false,
      false,
a4585 2
      false,
      false,
d4594 2
a4598 2
      true,
      false,
a4609 2
      false,
      false,
d4620 3
a4622 1
   WitRun * theWitRun;
a4636 2
      true,
      true,
a4649 2
      false,
      false,
a4660 2
      false,
      false,
a4673 2
      false,
      false,
a4684 2
      false,
      false,
a4695 2
      false,
      false,
a4707 2
      false,
      false,
a4718 2
      false,
      false,
a4730 2
      false,
      false,
a4742 2
      false,
      false,
a4754 2
      false,
      false,
a4766 2
      false,
      false,
a4782 2
      false,
      false,
a4798 2
      false,
      false,
a4814 2
      false,
      false,
a4830 2
      false,
      false,
a4846 2
      false,
      false,
a4862 2
      false,
      false,
a4878 2
      false,
      false,
a4894 2
      false,
      false,
a4910 2
      false,
      false,
a4926 2
      false,
      false,
a4942 2
      false,
      false,
a4958 2
      false,
      false,
a4974 2
      false,
      false,
a4990 2
      false,
      false,
a5006 2
      false,
      false,
a5022 2
      false,
      false,
a5038 2
      false,
      false,
a5054 2
      false,
      false,
a5070 2
      false,
      false,
a5086 2
      false,
      false,
a5102 2
      false,
      false,
a5118 2
      false,
      false,
a5134 2
      false,
      false,
a5150 2
      false,
      false,
a5166 2
      false,
      false,
a5182 2
      false,
      false,
a5198 2
      false,
      false,
a5214 2
      false,
      false,
a5230 2
      false,
      false,
a5246 2
      false,
      false,
a5262 2
      false,
      false,
a5278 2
      false,
      false,
a5290 2
      false,
      false,
a5302 2
      false,
      false,
a5318 2
      false,
      false,
a5338 2
      false,
      false,
a5358 2
      false,
      false,
a5374 2
      false,
      false,
a5390 2
      false,
      false,
a5406 2
      false,
      false,
a5422 2
      false,
      false,
a5438 2
      false,
      false,
a5454 2
      false,
      false,
a5470 2
      false,
      false,
a5486 2
      false,
      false,
a5502 2
      false,
      false,
a5518 2
      false,
      false,
a5534 2
      false,
      false,
a5550 2
      false,
      false,
a5566 2
      false,
      false,
a5582 2
      false,
      false,
a5598 2
      false,
      false,
a5614 2
      false,
      false,
a5630 2
      false,
      false,
a5646 2
      false,
      false,
a5658 2
      false,
      false,
a5670 2
      false,
      false,
a5682 2
      false,
      false,
a5694 2
      false,
      false,
a5706 2
      false,
      false,
a5718 2
      false,
      false,
a5730 2
      false,
      false,
a5742 2
      false,
      false,
a5754 2
      false,
      false,
a5766 2
      false,
      false,
d5777 3
a5783 2
      true,
      true,
d5794 3
a5800 2
      true,
      true,
d5812 3
a5819 2
      true,
      true,
d5831 3
a5838 2
      true,
      true,
d5850 3
a5857 2
      true,
      true,
d5869 3
a5876 2
      true,
      true,
a5888 2
      false,
      false,
a5900 2
      false,
      false,
d5909 2
a5913 2
      true,
      false,
a5925 2
      false,
      false,
a5937 2
      false,
      false,
a5951 2
      false,
      false,
a5969 2
      false,
      false,
a5987 2
      false,
      false,
a6001 2
      false,
      false,
a6015 2
      false,
      false,
a6029 2
      false,
      false,
a6043 2
      false,
      false,
a6057 2
      false,
      false,
a6071 2
      false,
      false,
a6085 2
      false,
      false,
a6099 2
      false,
      false,
a6113 2
      false,
      false,
a6127 2
      false,
      false,
a6141 2
      false,
      false,
a6155 2
      false,
      false,
a6169 2
      false,
      false,
a6183 2
      false,
      false,
a6197 2
      false,
      false,
a6211 2
      false,
      false,
a6225 2
      false,
      false,
a6239 2
      false,
      false,
a6253 2
      false,
      false,
a6267 2
      false,
      false,
a6279 2
      false,
      false,
a6291 2
      false,
      false,
a6305 2
      false,
      false,
a6319 2
      false,
      false,
a6333 2
      false,
      false,
a6347 2
      false,
      false,
a6361 2
      false,
      false,
a6376 2
      false,
      false,
a6391 2
      false,
      false,
a6405 2
      false,
      false,
a6419 2
      false,
      false,
a6437 2
      false,
      false,
a6455 2
      false,
      false,
a6469 2
      false,
      false,
a6483 2
      false,
      false,
a6497 2
      false,
      false,
a6511 2
      false,
      false,
a6523 2
      false,
      false,
a6535 2
      false,
      false,
a6547 2
      false,
      false,
a6559 2
      false,
      false,
a6571 2
      false,
      false,
a6583 2
      false,
      false,
a6595 2
      false,
      false,
a6607 2
      false,
      false,
a6619 2
      false,
      false,
a6631 2
      false,
      false,
a6643 2
      false,
      false,
a6661 2
      false,
      false,
a6679 2
      false,
      false,
a6697 2
      false,
      false,
a6715 2
      false,
      false,
a6733 2
      false,
      false,
a6751 2
      false,
      false,
a6769 2
      false,
      false,
a6787 2
      false,
      false,
a6805 2
      false,
      false,
a6823 2
      false,
      false,
a6841 2
      false,
      false,
a6859 2
      false,
      false,
a6877 2
      false,
      false,
a6895 2
      false,
      false,
a6913 2
      false,
      false,
a6931 2
      false,
      false,
a6949 2
      false,
      false,
a6967 2
      false,
      false,
a6985 2
      false,
      false,
a7003 2
      false,
      false,
a7021 2
      false,
      false,
a7039 2
      false,
      false,
a7057 2
      false,
      false,
a7075 2
      false,
      false,
a7093 2
      false,
      false,
a7105 2
      false,
      false,
a7117 2
      false,
      false,
a7129 2
      false,
      false,
a7141 2
      false,
      false,
a7153 2
      false,
      false,
a7165 2
      false,
      false,
a7177 2
      false,
      false,
a7189 2
      false,
      false,
a7201 2
      false,
      false,
a7212 2
      false,
      false,
a7223 2
      false,
      false,
a7239 2
      false,
      false,
a7251 2
      false,
      false,
a7265 2
      false,
      false,
a7279 2
      false,
      false,
a7293 2
      false,
      false,
a7321 2
      false,
      false,
a7343 2
      false,
      false,
a7365 2
      false,
      false,
a7389 2
      false,
      false,
a7405 2
      false,
      false,
a7421 2
      false,
      false,
a7437 2
      false,
      false,
a7453 2
      false,
      false,
a7469 2
      false,
      false,
a7485 2
      false,
      false,
a7497 2
      false,
      false,
a7509 2
      false,
      false,
a7525 2
      false,
      false,
a7541 2
      false,
      false,
a7557 2
      false,
      false,
a7573 2
      false,
      false,
a7589 2
      false,
      false,
a7605 2
      false,
      false,
a7617 2
      false,
      false,
a7629 2
      false,
      false,
a7641 2
      false,
      false,
a7653 2
      false,
      false,
a7671 2
      false,
      false,
a7689 2
      false,
      false,
a7701 2
      false,
      false,
a7713 2
      false,
      false,
a7725 2
      false,
      false,
a7737 2
      false,
      false,
a7749 2
      false,
      false,
a7761 2
      false,
      false,
a7773 2
      false,
      false,
a7785 2
      false,
      false,
a7797 2
      false,
      false,
a7811 2
      false,
      false,
a7825 2
      false,
      false,
a7839 2
      false,
      false,
a7853 2
      false,
      false,
a7867 2
      false,
      false,
a7879 2
      false,
      false,
a7893 2
      false,
      false,
a7907 2
      false,
      false,
a7921 2
      false,
      false,
a7935 2
      false,
      false,
a7949 2
      false,
      false,
a7963 2
      false,
      false,
a7977 2
      false,
      false,
a7991 2
      false,
      false,
a8005 2
      false,
      false,
a8019 2
      false,
      false,
a8033 2
      false,
      false,
a8051 2
      false,
      false,
a8065 2
      false,
      false,
a8079 2
      false,
      false,
a8093 2
      false,
      false,
a8107 2
      false,
      false,
a8119 2
      false,
      false,
a8131 2
      false,
      false,
a8143 2
      false,
      false,
a8161 2
      false,
      false,
a8179 2
      false,
      false,
a8197 2
      false,
      false,
a8215 2
      false,
      false,
a8233 2
      false,
      false,
a8249 2
      false,
      false,
a8265 2
      false,
      false,
a8281 2
      false,
      false,
a8297 2
      false,
      false,
a8313 2
      false,
      false,
a8329 2
      false,
      false,
a8341 2
      false,
      false,
a8353 2
      false,
      false,
a8365 2
      false,
      false,
a8381 2
      false,
      false,
a8397 2
      false,
      false,
a8413 2
      false,
      false,
a8429 2
      false,
      false,
a8445 2
      false,
      false,
a8461 2
      false,
      false,
a8473 2
      false,
      false,
a8485 2
      false,
      false,
a8497 2
      false,
      false,
a8509 2
      false,
      false,
a8521 2
      false,
      false,
a8533 2
      false,
      false,
a8545 2
      false,
      false,
a8557 2
      false,
      false,
a8569 2
      false,
      false,
a8581 2
      false,
      false,
a8593 2
      false,
      false,
a8605 2
      false,
      false,
a8617 2
      false,
      false,
a8631 2
      false,
      false,
a8645 2
      false,
      false,
a8659 2
      false,
      false,
a8673 2
      false,
      false,
a8687 2
      false,
      false,
a8699 2
      false,
      false,
a8713 2
      false,
      false,
a8727 2
      false,
      false,
a8741 2
      false,
      false,
a8755 2
      false,
      false,
a8769 2
      false,
      false,
a8784 2
      false,
      false,
a8799 2
      false,
      false,
a8813 2
      false,
      false,
a8827 2
      false,
      false,
a8845 2
      false,
      false,
a8859 2
      false,
      false,
a8873 2
      false,
      false,
a8887 2
      false,
      false,
a8901 2
      false,
      false,
a8915 2
      false,
      false,
a8927 2
      false,
      false,
a8939 2
      false,
      false,
a8951 2
      false,
      false,
a8969 2
      false,
      false,
a8987 2
      false,
      false,
a9005 2
      false,
      false,
a9022 2
      false,
      false,
a9040 2
      false,
      false,
a9054 2
      false,
      false,
a9068 2
      false,
      false,
a9080 2
      false,
      false,
a9092 2
      false,
      false,
a9104 2
      false,
      false,
a9118 2
      false,
      false,
a9132 2
      false,
      false,
a9148 2
      false,
      false,
a9164 2
      false,
      false,
a9176 2
      false,
      false,
a9188 2
      false,
      false,
d9198 3
a9203 2
      true,
      true,
d9212 3
a9217 2
      true,
      true,
d9226 3
a9231 2
      true,
      true,
a9242 2
      false,
      false,
a9253 2
      false,
      false,
a9280 2
      false,
      false,
@


1.153
log
@[multi-thread]
@
text
@a26 2
#include <stdarg.h>

d67 5
d313 2
a317 1
   WitApiMgr *   theApiMgr;
d320 1
a320 1
   theApiMgr = theWitRun->myApiMgr ();
d322 1
a322 1
   try
d324 1
a324 1
      theApiMgr->startApiFunc ("witDeleteRun", true, true); 
d326 1
a326 2
      theApiMgr->finishApiFunc ();
      }
d328 1
a328 3
   catch (WitAbortApiExc & theExc)
      {
      theApiMgr->handleAbortApiExc (theExc);
d331 2
a332 1
   theRC = theApiMgr->apiRc ();
d334 5
a338 1
   WitApiMgr::sglThreadLock ("witDeleteRun");
d340 8
a347 5
   delete theWitRun;

   WitApiMgr::sglThreadUnlock ();

   return theRC;
d8208 1
a8208 2
   WitApiMgr * theApiMgr;
   va_list     theArg;
d8210 1
a8210 1
   theApiMgr = theWitRun->myApiMgr ();
d8212 8
a8219 25
   try
      {
      va_start (theArg, consumedPartName);

      theApiMgr->startApiFunc ("witAddBomEntryVa", false, false);

      theWitRun->
         witAddBomEntryVa (
            consumingOperationName,
            consumedPartName,
            theArg);

      theApiMgr->finishApiFunc ();

      va_end (theArg);
      }

   catch (WitAbortApiExc & theExc)
      {
      va_end (theArg);

      theApiMgr->handleAbortApiExc (theExc);
      }

   return theApiMgr->apiRc ();
d8232 1
a8232 2
   WitApiMgr * theApiMgr;
   va_list     theArg;
d8234 1
a8234 1
   theApiMgr = theWitRun->myApiMgr ();
d8236 8
a8243 25
   try
      {
      va_start (theArg, demandName);

      theApiMgr->startApiFunc ("witAddDemandVa", false, false);

      theWitRun->
         witAddDemandVa (
            partName,
            demandName,
            theArg);

      theApiMgr->finishApiFunc ();

      va_end (theArg);
      }

   catch (WitAbortApiExc & theExc)
      {
      va_end (theArg);

      theApiMgr->handleAbortApiExc (theExc);
      }

   return theApiMgr->apiRc ();
d8256 1
a8256 2
   WitApiMgr * theApiMgr;
   va_list     theArg;
d8258 1
a8258 1
   theApiMgr = theWitRun->myApiMgr ();
d8260 8
a8267 25
   try
      {
      va_start (theArg, partCategory);

      theApiMgr->startApiFunc ("witAddPartVa", false, false);

      theWitRun->
         witAddPartVa (
            partName,
            partCategory,
            theArg);

      theApiMgr->finishApiFunc ();

      va_end (theArg);
      }

   catch (WitAbortApiExc & theExc)
      {
      va_end (theArg);

      theApiMgr->handleAbortApiExc (theExc);
      }

   return theApiMgr->apiRc ();
d8281 1
a8281 2
   WitApiMgr * theApiMgr;
   va_list     theArg;
d8283 1
a8283 1
   theApiMgr = theWitRun->myApiMgr ();
d8285 9
a8293 26
   try
      {
      va_start (theArg, consumedPartName);

      theApiMgr->startApiFunc ("witAddSubsBomEntryVa", false, false);

      theWitRun->
         witAddSubsBomEntryVa (
            operationName,
            bomEntryIndex,
            consumedPartName,
            theArg);

      theApiMgr->finishApiFunc ();

      va_end (theArg);
      }

   catch (WitAbortApiExc & theExc)
      {
      va_end (theArg);

      theApiMgr->handleAbortApiExc (theExc);
      }

   return theApiMgr->apiRc ();
d10391 13
@


1.152
log
@[multi-thread]
@
text
@a19 1
#include <ApiGroup.h>
d30 1
a30 1
// Macro STANDARD_API_IMPL (innerFunc, argList, suffix, whichGroup) 
d39 3
a44 2
//    whichGroup The name of the ApiGroup to which the outer API function
//               belongs.
d54 1
a54 1
#define STANDARD_API_IMPL(innerFunc, argList, suffix, whichGroup)              \
d62 1
a62 1
      theApiMgr->startApiFunc (#innerFunc suffix, theApiMgr->whichGroup ());   \
d95 3
a97 2
      "",
      defaultGroup)
d111 3
a113 2
      "",
      defaultGroup)
d127 3
a129 2
      "",
      defaultGroup)
d141 3
a143 2
      "",
      defaultGroup)
d157 3
a159 2
      "",
      defaultGroup)
d171 3
a173 2
      "",
      defaultGroup)
d189 3
a191 2
      "",
      defaultGroup)
d202 3
a204 2
      "",
      defaultGroup)
d222 3
a224 2
      "",
      defaultGroup)
d242 3
a244 2
      "Dbl",
      defaultGroup)
d255 3
a257 2
      "",
      defaultGroup)
d268 3
a270 2
      "",
      defaultGroup)
d281 3
a283 2
      "",
      defaultGroup)
d301 3
a303 2
      "",
      preInGroup)
d320 1
a320 1
      theApiMgr->startApiFunc ("witDeleteRun", theApiMgr->quietGroup ());
d350 3
a352 2
      "",
      defaultGroup)
d374 3
a376 2
      "",
      defaultGroup)
d398 3
a400 2
      "Dbl",
      defaultGroup)
d424 3
a426 2
      "",
      defaultGroup)
d450 3
a452 2
      "Dbl",
      defaultGroup)
d465 3
a467 2
      "",
      defaultGroup)
d480 3
a482 2
      "",
      defaultGroup)
d505 3
a507 2
      "",
      defaultGroup)
d519 3
a521 2
      "",
      defaultGroup)
d533 3
a535 2
      "",
      defaultGroup)
d547 3
a549 2
      "",
      defaultGroup)
d561 3
a563 2
      "",
      defaultGroup)
d575 3
a577 2
      "",
      defaultGroup)
d593 3
a595 2
      "",
      defaultGroup)
d611 3
a613 2
      "",
      defaultGroup)
d629 3
a631 2
      "Dbl",
      defaultGroup)
d647 3
a649 2
      "",
      defaultGroup)
d665 3
a667 2
      "",
      defaultGroup)
d683 3
a685 2
      "",
      defaultGroup)
d701 3
a703 2
      "",
      defaultGroup)
d719 3
a721 2
      "Dbl",
      defaultGroup)
d737 3
a739 2
      "",
      defaultGroup)
d755 3
a757 2
      "Dbl",
      defaultGroup)
d773 3
a775 2
      "",
      defaultGroup)
d791 3
a793 2
      "",
      defaultGroup)
d809 3
a811 2
      "",
      defaultGroup)
d827 3
a829 2
      "",
      defaultGroup)
d845 3
a847 2
      "Dbl",
      defaultGroup)
d863 3
a865 2
      "",
      defaultGroup)
d881 3
a883 2
      "",
      defaultGroup)
d899 3
a901 2
      "Dbl",
      defaultGroup)
d917 3
a919 2
      "",
      defaultGroup)
d935 3
a937 2
      "",
      defaultGroup)
d954 3
a956 2
      "",
      defaultGroup)
d972 3
a974 2
      "",
      defaultGroup)
d990 3
a992 2
      "",
      defaultGroup)
d1008 3
a1010 2
      "",
      defaultGroup)
d1026 3
a1028 2
      "Dbl",
      defaultGroup)
d1044 3
a1046 2
      "",
      defaultGroup)
d1062 3
a1064 2
      "",
      defaultGroup)
d1080 3
a1082 2
      "",
      defaultGroup)
d1098 3
a1100 2
      "Dbl",
      defaultGroup)
d1116 3
a1118 2
      "",
      defaultGroup)
d1134 3
a1136 2
      "Dbl",
      defaultGroup)
d1152 3
a1154 2
      "",
      defaultGroup)
d1170 3
a1172 2
      "Dbl",
      defaultGroup)
d1188 3
a1190 2
      "",
      defaultGroup)
d1206 3
a1208 2
      "",
      defaultGroup)
d1224 3
a1226 2
      "Dbl",
      defaultGroup)
d1242 3
a1244 2
      "",
      defaultGroup)
d1256 3
a1258 2
      "",
      defaultGroup)
d1270 3
a1272 2
      "",
      defaultGroup)
d1284 3
a1286 2
      "",
      defaultGroup)
d1302 3
a1304 2
      "",
      defaultGroup)
d1320 3
a1322 2
      "",
      defaultGroup)
d1346 3
a1348 2
      "",
      defaultGroup)
d1372 3
a1374 2
      "Dbl",
      defaultGroup)
d1394 3
a1396 2
      "",
      defaultGroup)
d1416 3
a1418 2
      "Dbl",
      defaultGroup)
d1434 3
a1436 2
      "",
      defaultGroup)
d1452 3
a1454 2
      "Dbl",
      defaultGroup)
d1470 3
a1472 2
      "",
      defaultGroup)
d1488 3
a1490 2
      "Dbl",
      defaultGroup)
d1514 3
a1516 2
      "",
      defaultGroup)
d1540 3
a1542 2
      "Dbl",
      defaultGroup)
d1566 3
a1568 2
      "",
      defaultGroup)
d1592 3
a1594 2
      "Dbl",
      defaultGroup)
d1610 3
a1612 2
      "",
      defaultGroup)
d1628 3
a1630 2
      "",
      defaultGroup)
d1647 3
a1649 2
      "Dbl",
      defaultGroup)
d1665 3
a1667 2
      "",
      defaultGroup)
d1683 3
a1685 2
      "Dbl",
      defaultGroup)
d1701 3
a1703 2
      "",
      defaultGroup)
d1719 3
a1721 2
      "Dbl",
      defaultGroup)
d1737 3
a1739 2
      "",
      defaultGroup)
d1763 3
a1765 2
      "",
      defaultGroup)
d1789 3
a1791 2
      "Dbl",
      defaultGroup)
d1807 3
a1809 2
      "",
      defaultGroup)
d1825 3
a1827 2
      "",
      defaultGroup)
d1843 3
a1845 2
      "",
      defaultGroup)
d1861 3
a1863 2
      "Dbl",
      defaultGroup)
d1879 3
a1881 2
      "",
      defaultGroup)
d1897 3
a1899 2
      "Dbl",
      defaultGroup)
d1923 3
a1925 2
      "",
      defaultGroup)
d1949 3
a1951 2
      "Dbl",
      defaultGroup)
d1979 3
a1981 2
      "",
      defaultGroup)
d2009 3
a2011 2
      "Dbl",
      defaultGroup)
d2039 3
a2041 2
      "",
      defaultGroup)
d2069 3
a2071 2
      "Dbl",
      defaultGroup)
d2095 3
a2097 2
      "",
      defaultGroup)
d2121 3
a2123 2
      "Dbl",
      defaultGroup)
d2135 3
a2137 2
      "",
      defaultGroup)
d2149 3
a2151 2
      "",
      defaultGroup)
d2163 3
a2165 2
      "",
      defaultGroup)
d2177 3
a2179 2
      "Dbl",
      defaultGroup)
d2191 3
a2193 2
      "",
      defaultGroup)
d2209 3
a2211 2
      "",
      defaultGroup)
d2227 3
a2229 2
      "Dbl",
      defaultGroup)
d2241 3
a2243 2
      "",
      defaultGroup)
d2255 3
a2257 2
      "",
      defaultGroup)
d2269 3
a2271 2
      "",
      defaultGroup)
d2283 3
a2285 2
      "",
      defaultGroup)
d2297 3
a2299 2
      "",
      defaultGroup)
d2311 3
a2313 2
      "",
      defaultGroup)
d2325 3
a2327 2
      "Dbl",
      defaultGroup)
d2339 3
a2341 2
      "",
      defaultGroup)
d2353 3
a2355 2
      "",
      defaultGroup)
d2367 3
a2369 2
      "",
      defaultGroup)
d2383 3
a2385 2
      "",
      defaultGroup)
d2399 3
a2401 2
      "",
      defaultGroup)
d2415 3
a2417 2
      "",
      defaultGroup)
d2431 3
a2433 2
      "",
      defaultGroup)
d2445 3
a2447 2
      "",
      defaultGroup)
d2459 3
a2461 2
      "",
      defaultGroup)
d2473 3
a2475 2
      "",
      defaultGroup)
d2487 3
a2489 2
      "",
      defaultGroup)
d2503 3
a2505 2
      "",
      defaultGroup)
d2519 3
a2521 2
      "",
      defaultGroup)
d2535 3
a2537 2
      "",
      defaultGroup)
d2549 3
a2551 2
      "",
      defaultGroup)
d2563 3
a2565 2
      "",
      defaultGroup)
d2577 3
a2579 2
      "",
      defaultGroup)
d2595 3
a2597 2
      "",
      defaultGroup)
d2611 3
a2613 2
      "",
      defaultGroup)
d2627 3
a2629 2
      "Dbl",
      defaultGroup)
d2643 3
a2645 2
      "",
      defaultGroup)
d2663 3
a2665 2
      "",
      defaultGroup)
d2683 3
a2685 2
      "Dbl",
      defaultGroup)
d2699 3
a2701 2
      "",
      defaultGroup)
d2715 3
a2717 2
      "Dbl",
      defaultGroup)
d2731 3
a2733 2
      "",
      defaultGroup)
d2747 3
a2749 2
      "Dbl",
      defaultGroup)
d2763 3
a2765 2
      "",
      defaultGroup)
d2779 3
a2781 2
      "",
      defaultGroup)
d2795 3
a2797 2
      "Dbl",
      defaultGroup)
d2811 3
a2813 2
      "",
      defaultGroup)
d2827 3
a2829 2
      "",
      defaultGroup)
d2843 3
a2845 2
      "Dbl",
      defaultGroup)
d2859 3
a2861 2
      "",
      defaultGroup)
d2875 3
a2877 2
      "Dbl",
      defaultGroup)
d2891 3
a2893 2
      "",
      defaultGroup)
d2907 3
a2909 2
      "Dbl",
      defaultGroup)
d2923 3
a2925 2
      "",
      defaultGroup)
d2939 3
a2941 2
      "Dbl",
      defaultGroup)
d2955 3
a2957 2
      "",
      defaultGroup)
d2971 3
a2973 2
      "Dbl",
      defaultGroup)
d2987 3
a2989 2
      "",
      defaultGroup)
d3003 3
a3005 2
      "Dbl",
      defaultGroup)
d3019 3
a3021 2
      "",
      defaultGroup)
d3035 3
a3037 2
      "Dbl",
      defaultGroup)
d3051 3
a3053 2
      "",
      defaultGroup)
d3067 3
a3069 2
      "",
      defaultGroup)
d3083 3
a3085 2
      "",
      defaultGroup)
d3099 3
a3101 2
      "",
      defaultGroup)
d3115 3
a3117 2
      "",
      defaultGroup)
d3131 3
a3133 2
      "",
      defaultGroup)
d3147 3
a3149 2
      "Dbl",
      defaultGroup)
d3161 3
a3163 2
      "",
      defaultGroup)
d3175 3
a3177 2
      "",
      defaultGroup)
d3189 3
a3191 2
      "",
      defaultGroup)
d3203 3
a3205 2
      "",
      defaultGroup)
d3219 3
a3221 2
      "",
      defaultGroup)
d3237 3
a3239 2
      "",
      defaultGroup)
d3253 3
a3255 2
      "",
      defaultGroup)
d3269 3
a3271 2
      "",
      defaultGroup)
d3285 3
a3287 2
      "",
      defaultGroup)
d3301 3
a3303 2
      "",
      defaultGroup)
d3317 3
a3319 2
      "Dbl",
      defaultGroup)
d3337 3
a3339 2
      "",
      defaultGroup)
d3359 3
a3361 2
      "",
      defaultGroup)
d3377 3
a3379 2
      "",
      defaultGroup)
d3393 3
a3395 2
      "",
      defaultGroup)
d3409 3
a3411 2
      "",
      defaultGroup)
d3425 3
a3427 2
      "Dbl",
      defaultGroup)
d3441 3
a3443 2
      "",
      defaultGroup)
d3457 3
a3459 2
      "",
      defaultGroup)
d3473 3
a3475 2
      "Dbl",
      defaultGroup)
d3489 3
a3491 2
      "",
      defaultGroup)
d3505 3
a3507 2
      "Dbl",
      defaultGroup)
d3521 3
a3523 2
      "",
      defaultGroup)
d3537 3
a3539 2
      "Dbl",
      defaultGroup)
d3553 3
a3555 2
      "",
      defaultGroup)
d3569 3
a3571 2
      "Dbl",
      defaultGroup)
d3585 3
a3587 2
      "",
      defaultGroup)
d3601 3
a3603 2
      "",
      defaultGroup)
d3617 3
a3619 2
      "",
      defaultGroup)
d3633 3
a3635 2
      "",
      defaultGroup)
d3649 3
a3651 2
      "Dbl",
      defaultGroup)
d3669 3
a3671 2
      "",
      defaultGroup)
d3685 3
a3687 2
      "",
      defaultGroup)
d3701 3
a3703 2
      "",
      defaultGroup)
d3717 3
a3719 2
      "Dbl",
      defaultGroup)
d3733 3
a3735 2
      "",
      defaultGroup)
d3749 3
a3751 2
      "Dbl",
      defaultGroup)
d3765 3
a3767 2
      "",
      defaultGroup)
d3781 3
a3783 2
      "",
      defaultGroup)
d3797 3
a3799 2
      "Dbl",
      defaultGroup)
d3813 3
a3815 2
      "",
      defaultGroup)
d3829 3
a3831 2
      "Dbl",
      defaultGroup)
d3845 3
a3847 2
      "",
      defaultGroup)
d3861 3
a3863 2
      "",
      defaultGroup)
d3877 3
a3879 2
      "Dbl",
      defaultGroup)
d3893 3
a3895 2
      "",
      defaultGroup)
d3913 3
a3915 2
      "",
      defaultGroup)
d3933 3
a3935 2
      "Dbl",
      defaultGroup)
d3949 3
a3951 2
      "",
      defaultGroup)
d3965 3
a3967 2
      "Dbl",
      defaultGroup)
d3981 3
a3983 2
      "",
      defaultGroup)
d3997 3
a3999 2
      "Dbl",
      defaultGroup)
d4013 3
a4015 2
      "",
      defaultGroup)
d4029 3
a4031 2
      "Dbl",
      defaultGroup)
d4043 3
a4045 2
      "",
      defaultGroup)
d4057 3
a4059 2
      "",
      defaultGroup)
d4079 3
a4081 2
      "",
      defaultGroup)
d4101 3
a4103 2
      "Dbl",
      defaultGroup)
d4115 3
a4117 2
      "",
      defaultGroup)
d4129 3
a4131 2
      "",
      defaultGroup)
d4153 3
a4155 2
      "",
      defaultGroup)
d4167 3
a4169 2
      "",
      defaultGroup)
d4181 3
a4183 2
      "",
      defaultGroup)
d4195 3
a4197 2
      "",
      defaultGroup)
d4209 3
a4211 2
      "",
      defaultGroup)
d4223 3
a4225 2
      "",
      defaultGroup)
d4237 3
a4239 2
      "",
      defaultGroup)
d4251 3
a4253 2
      "",
      defaultGroup)
d4265 3
a4267 2
      "",
      defaultGroup)
d4279 3
a4281 2
      "",
      defaultGroup)
d4299 3
a4301 2
      "",
      defaultGroup)
d4319 3
a4321 2
      "",
      defaultGroup)
d4339 3
a4341 2
      "Dbl",
      defaultGroup)
d4359 3
a4361 2
      "",
      defaultGroup)
d4379 3
a4381 2
      "",
      defaultGroup)
d4399 3
a4401 2
      "",
      defaultGroup)
d4419 3
a4421 2
      "Dbl",
      defaultGroup)
d4439 3
a4441 2
      "",
      defaultGroup)
d4459 3
a4461 2
      "",
      defaultGroup)
d4479 3
a4481 2
      "Dbl",
      defaultGroup)
d4499 3
a4501 2
      "",
      defaultGroup)
d4519 3
a4521 2
      "Dbl",
      defaultGroup)
d4539 3
a4541 2
      "",
      defaultGroup)
d4559 3
a4561 2
      "Dbl",
      defaultGroup)
d4579 3
a4581 2
      "",
      defaultGroup)
d4599 3
a4601 2
      "",
      defaultGroup)
d4619 3
a4621 2
      "",
      defaultGroup)
d4639 3
a4641 2
      "",
      defaultGroup)
d4659 3
a4661 2
      "Dbl",
      defaultGroup)
d4679 3
a4681 2
      "",
      defaultGroup)
d4699 3
a4701 2
      "",
      defaultGroup)
d4719 3
a4721 2
      "Dbl",
      defaultGroup)
d4739 3
a4741 2
      "",
      defaultGroup)
d4759 3
a4761 2
      "Dbl",
      defaultGroup)
d4779 3
a4781 2
      "",
      defaultGroup)
d4799 3
a4801 2
      "Dbl",
      defaultGroup)
d4819 3
a4821 2
      "",
      defaultGroup)
d4839 3
a4841 2
      "",
      defaultGroup)
d4859 3
a4861 2
      "Dbl",
      defaultGroup)
d4879 3
a4881 2
      "",
      defaultGroup)
d4899 3
a4901 2
      "Dbl",
      defaultGroup)
d4913 3
a4915 2
      "",
      defaultGroup)
d4927 3
a4929 2
      "",
      defaultGroup)
d4941 3
a4943 2
      "",
      defaultGroup)
d4955 3
a4957 2
      "",
      defaultGroup)
d4969 3
a4971 2
      "",
      defaultGroup)
d4983 3
a4985 2
      "",
      defaultGroup)
d4997 3
a4999 2
      "",
      defaultGroup)
d5011 3
a5013 2
      "Dbl",
      defaultGroup)
d5025 3
a5027 2
      "",
      defaultGroup)
d5038 3
a5040 2
      "",
      defaultGroup)
d5060 3
a5062 2
      "",
      defaultGroup)
d5082 3
a5084 2
      "Dbl",
      defaultGroup)
d5106 3
a5108 2
      "",
      defaultGroup)
d5130 3
a5132 2
      "Dbl",
      defaultGroup)
d5143 3
a5145 2
      "",
      preInGroup)
d5156 3
a5158 2
      "",
      defaultGroup)
d5183 3
a5185 2
      "",
      quietGroup)
d5198 3
a5200 2
      "",
      defaultGroup)
d5211 3
a5213 2
      "",
      defaultGroup)
d5226 3
a5228 2
      "",
      defaultGroup)
d5239 3
a5241 2
      "",
      defaultGroup)
d5252 3
a5254 2
      "",
      defaultGroup)
d5266 3
a5268 2
      "",
      defaultGroup)
d5279 3
a5281 2
      "",
      defaultGroup)
d5293 3
a5295 2
      "",
      defaultGroup)
d5307 3
a5309 2
      "",
      defaultGroup)
d5321 3
a5323 2
      "",
      defaultGroup)
d5335 3
a5337 2
      "",
      defaultGroup)
d5353 3
a5355 2
      "",
      defaultGroup)
d5371 3
a5373 2
      "",
      defaultGroup)
d5389 3
a5391 2
      "Dbl",
      defaultGroup)
d5407 3
a5409 2
      "",
      defaultGroup)
d5425 3
a5427 2
      "",
      defaultGroup)
d5443 3
a5445 2
      "Dbl",
      defaultGroup)
d5461 3
a5463 2
      "",
      defaultGroup)
d5479 3
a5481 2
      "Dbl",
      defaultGroup)
d5497 3
a5499 2
      "",
      defaultGroup)
d5515 3
a5517 2
      "",
      defaultGroup)
d5533 3
a5535 2
      "",
      defaultGroup)
d5551 3
a5553 2
      "Dbl",
      defaultGroup)
d5569 3
a5571 2
      "",
      defaultGroup)
d5587 3
a5589 2
      "",
      defaultGroup)
d5605 3
a5607 2
      "Dbl",
      defaultGroup)
d5623 3
a5625 2
      "",
      defaultGroup)
d5641 3
a5643 2
      "",
      defaultGroup)
d5659 3
a5661 2
      "",
      defaultGroup)
d5677 3
a5679 2
      "",
      defaultGroup)
d5695 3
a5697 2
      "",
      defaultGroup)
d5713 3
a5715 2
      "",
      defaultGroup)
d5731 3
a5733 2
      "Dbl",
      defaultGroup)
d5749 3
a5751 2
      "",
      defaultGroup)
d5767 3
a5769 2
      "",
      defaultGroup)
d5785 3
a5787 2
      "Dbl",
      defaultGroup)
d5803 3
a5805 2
      "",
      defaultGroup)
d5821 3
a5823 2
      "Dbl",
      defaultGroup)
d5839 3
a5841 2
      "",
      defaultGroup)
d5857 3
a5859 2
      "Dbl",
      defaultGroup)
d5875 3
a5877 2
      "",
      defaultGroup)
d5893 3
a5895 2
      "Dbl",
      defaultGroup)
d5911 3
a5913 2
      "",
      defaultGroup)
d5925 3
a5927 2
      "",
      defaultGroup)
d5939 3
a5941 2
      "",
      defaultGroup)
d5957 3
a5959 2
      "",
      defaultGroup)
d5979 3
a5981 2
      "",
      defaultGroup)
d6001 3
a6003 2
      "Dbl",
      defaultGroup)
d6019 3
a6021 2
      "",
      defaultGroup)
d6037 3
a6039 2
      "Dbl",
      defaultGroup)
d6055 3
a6057 2
      "",
      defaultGroup)
d6073 3
a6075 2
      "Dbl",
      defaultGroup)
d6091 3
a6093 2
      "",
      defaultGroup)
d6109 3
a6111 2
      "",
      defaultGroup)
d6127 3
a6129 2
      "Dbl",
      defaultGroup)
d6145 3
a6147 2
      "",
      defaultGroup)
d6163 3
a6165 2
      "Dbl",
      defaultGroup)
d6181 3
a6183 2
      "",
      defaultGroup)
d6199 3
a6201 2
      "Dbl",
      defaultGroup)
d6217 3
a6219 2
      "",
      defaultGroup)
d6235 3
a6237 2
      "",
      defaultGroup)
d6253 3
a6255 2
      "",
      defaultGroup)
d6271 3
a6273 2
      "",
      defaultGroup)
d6289 3
a6291 2
      "Dbl",
      defaultGroup)
d6307 3
a6309 2
      "",
      defaultGroup)
d6325 3
a6327 2
      "Dbl",
      defaultGroup)
d6339 3
a6341 2
      "",
      defaultGroup)
d6353 3
a6355 2
      "",
      defaultGroup)
d6367 3
a6369 2
      "",
      defaultGroup)
d6381 3
a6383 2
      "Dbl",
      defaultGroup)
d6395 3
a6397 2
      "",
      defaultGroup)
d6409 3
a6411 2
      "",
      defaultGroup)
d6423 3
a6425 2
      "",
      defaultGroup)
d6437 3
a6439 2
      "",
      defaultGroup)
d6451 3
a6453 2
      "",
      defaultGroup)
d6465 3
a6467 2
      "Dbl",
      defaultGroup)
d6481 3
a6483 2
      "",
      quietGroup)
d6497 3
a6499 2
      "",
      quietGroup)
d6515 3
a6517 2
      "",
      quietGroup)
d6533 3
a6535 2
      "",
      quietGroup)
d6551 3
a6553 2
      "",
      quietGroup)
d6569 3
a6571 2
      "",
      quietGroup)
d6583 3
a6585 2
      "",
      defaultGroup)
d6597 3
a6599 2
      "",
      defaultGroup)
d6610 3
a6612 2
      "",
      preInGroup)
d6624 3
a6626 2
      "",
      defaultGroup)
d6638 3
a6640 2
      "",
      defaultGroup)
d6654 3
a6656 2
      "",
      defaultGroup)
d6674 3
a6676 2
      "",
      defaultGroup)
d6694 3
a6696 2
      "Dbl",
      defaultGroup)
d6710 3
a6712 2
      "",
      defaultGroup)
d6726 3
a6728 2
      "Dbl",
      defaultGroup)
d6742 3
a6744 2
      "",
      defaultGroup)
d6758 3
a6760 2
      "Dbl",
      defaultGroup)
d6774 3
a6776 2
      "",
      defaultGroup)
d6790 3
a6792 2
      "Dbl",
      defaultGroup)
d6806 3
a6808 2
      "",
      defaultGroup)
d6822 3
a6824 2
      "Dbl",
      defaultGroup)
d6838 3
a6840 2
      "",
      defaultGroup)
d6854 3
a6856 2
      "Dbl",
      defaultGroup)
d6870 3
a6872 2
      "",
      defaultGroup)
d6886 3
a6888 2
      "Dbl",
      defaultGroup)
d6902 3
a6904 2
      "",
      defaultGroup)
d6918 3
a6920 2
      "Dbl",
      defaultGroup)
d6934 3
a6936 2
      "",
      defaultGroup)
d6950 3
a6952 2
      "Dbl",
      defaultGroup)
d6966 3
a6968 2
      "",
      defaultGroup)
d6982 3
a6984 2
      "",
      defaultGroup)
d6998 3
a7000 2
      "",
      defaultGroup)
d7014 3
a7016 2
      "Dbl",
      defaultGroup)
d7028 3
a7030 2
      "",
      defaultGroup)
d7042 3
a7044 2
      "",
      defaultGroup)
d7058 3
a7060 2
      "",
      defaultGroup)
d7074 3
a7076 2
      "",
      defaultGroup)
d7090 3
a7092 2
      "",
      defaultGroup)
d7106 3
a7108 2
      "",
      defaultGroup)
d7122 3
a7124 2
      "",
      defaultGroup)
d7139 3
a7141 2
      "",
      defaultGroup)
d7156 3
a7158 2
      "Dbl",
      defaultGroup)
d7172 3
a7174 2
      "",
      defaultGroup)
d7188 3
a7190 2
      "",
      defaultGroup)
d7208 3
a7210 2
      "",
      defaultGroup)
d7228 3
a7230 2
      "Dbl",
      defaultGroup)
d7244 3
a7246 2
      "",
      defaultGroup)
d7260 3
a7262 2
      "Dbl",
      defaultGroup)
d7276 3
a7278 2
      "",
      defaultGroup)
d7292 3
a7294 2
      "Dbl",
      defaultGroup)
d7306 3
a7308 2
      "",
      defaultGroup)
d7320 3
a7322 2
      "",
      defaultGroup)
d7334 3
a7336 2
      "",
      defaultGroup)
d7348 3
a7350 2
      "",
      defaultGroup)
d7362 3
a7364 2
      "",
      defaultGroup)
d7376 3
a7378 2
      "",
      defaultGroup)
d7390 3
a7392 2
      "",
      defaultGroup)
d7404 3
a7406 2
      "",
      defaultGroup)
d7418 3
a7420 2
      "",
      defaultGroup)
d7432 3
a7434 2
      "",
      defaultGroup)
d7446 3
a7448 2
      "",
      defaultGroup)
d7466 3
a7468 2
      "",
      defaultGroup)
d7486 3
a7488 2
      "",
      defaultGroup)
d7506 3
a7508 2
      "Dbl",
      defaultGroup)
d7526 3
a7528 2
      "",
      defaultGroup)
d7546 3
a7548 2
      "",
      defaultGroup)
d7566 3
a7568 2
      "Dbl",
      defaultGroup)
d7586 3
a7588 2
      "",
      defaultGroup)
d7606 3
a7608 2
      "",
      defaultGroup)
d7626 3
a7628 2
      "Dbl",
      defaultGroup)
d7646 3
a7648 2
      "",
      defaultGroup)
d7666 3
a7668 2
      "Dbl",
      defaultGroup)
d7686 3
a7688 2
      "",
      defaultGroup)
d7706 3
a7708 2
      "",
      defaultGroup)
d7726 3
a7728 2
      "",
      defaultGroup)
d7746 3
a7748 2
      "",
      defaultGroup)
d7766 3
a7768 2
      "Dbl",
      defaultGroup)
d7786 3
a7788 2
      "",
      defaultGroup)
d7806 3
a7808 2
      "Dbl",
      defaultGroup)
d7826 3
a7828 2
      "",
      defaultGroup)
d7846 3
a7848 2
      "Dbl",
      defaultGroup)
d7866 3
a7868 2
      "",
      defaultGroup)
d7886 3
a7888 2
      "",
      defaultGroup)
d7906 3
a7908 2
      "Dbl",
      defaultGroup)
d7926 3
a7928 2
      "",
      defaultGroup)
d7946 3
a7948 2
      "Dbl",
      defaultGroup)
d7960 3
a7962 2
      "",
      defaultGroup)
d7974 3
a7976 2
      "",
      defaultGroup)
d7988 3
a7990 2
      "",
      defaultGroup)
d8002 3
a8004 2
      "",
      defaultGroup)
d8016 3
a8018 2
      "",
      defaultGroup)
d8030 3
a8032 2
      "",
      defaultGroup)
d8044 3
a8046 2
      "",
      defaultGroup)
d8058 3
a8060 2
      "Dbl",
      defaultGroup)
d8072 3
a8074 2
      "",
      defaultGroup)
d8085 3
a8087 2
      "",
      defaultGroup)
d8098 3
a8100 2
      "",
      defaultGroup)
d8116 3
a8118 2
      "",
      defaultGroup)
d8130 3
a8132 2
      "",
      defaultGroup)
d8146 3
a8148 2
      "",
      defaultGroup)
d8162 3
a8164 2
      "",
      defaultGroup)
d8178 3
a8180 2
      "",
      defaultGroup)
d8208 1
a8208 1
      theApiMgr->startApiFunc ("witAddBomEntryVa", theApiMgr->defaultGroup ());
d8250 1
a8250 1
      theApiMgr->startApiFunc ("witAddDemandVa", theApiMgr->defaultGroup ());
d8292 1
a8292 1
      theApiMgr->startApiFunc ("witAddPartVa", theApiMgr->defaultGroup ());
d8335 1
a8335 2
      theApiMgr->
         startApiFunc ("witAddSubsBomEntryVa", theApiMgr->defaultGroup ());
d8372 3
a8374 2
      "",
      defaultGroup)
d8390 3
a8392 2
      "",
      defaultGroup)
d8408 3
a8410 2
      "",
      defaultGroup)
d8426 3
a8428 2
      "",
      defaultGroup)
d8444 3
a8446 2
      "",
      defaultGroup)
d8462 3
a8464 2
      "",
      defaultGroup)
d8476 3
a8478 2
      "",
      defaultGroup)
d8490 3
a8492 2
      "Dbl",
      defaultGroup)
d8508 3
a8510 2
      "",
      defaultGroup)
d8526 3
a8528 2
      "",
      defaultGroup)
d8544 3
a8546 2
      "",
      defaultGroup)
d8562 3
a8564 2
      "Dbl",
      defaultGroup)
d8580 3
a8582 2
      "",
      defaultGroup)
d8598 3
a8600 2
      "",
      defaultGroup)
d8612 3
a8614 2
      "",
      defaultGroup)
d8626 3
a8628 2
      "Dbl",
      defaultGroup)
d8640 3
a8642 2
      "",
      defaultGroup)
d8654 3
a8656 2
      "",
      defaultGroup)
d8674 3
a8676 2
      "",
      defaultGroup)
d8694 3
a8696 2
      "Dbl",
      defaultGroup)
d8708 3
a8710 2
      "",
      defaultGroup)
d8722 3
a8724 2
      "Dbl",
      defaultGroup)
d8736 3
a8738 2
      "",
      defaultGroup)
d8750 3
a8752 2
      "Dbl",
      defaultGroup)
d8764 3
a8766 2
      "",
      defaultGroup)
d8778 3
a8780 2
      "Dbl",
      defaultGroup)
d8792 3
a8794 2
      "",
      defaultGroup)
d8806 3
a8808 2
      "Dbl",
      defaultGroup)
d8820 3
a8822 2
      "",
      defaultGroup)
d8836 3
a8838 2
      "",
      defaultGroup)
d8852 3
a8854 2
      "Dbl",
      defaultGroup)
d8868 3
a8870 2
      "",
      defaultGroup)
d8884 3
a8886 2
      "Dbl",
      defaultGroup)
d8900 3
a8902 2
      "",
      defaultGroup)
d8914 3
a8916 2
      "",
      defaultGroup)
d8930 3
a8932 2
      "",
      defaultGroup)
d8946 3
a8948 2
      "",
      defaultGroup)
d8962 3
a8964 2
      "",
      defaultGroup)
d8978 3
a8980 2
      "",
      defaultGroup)
d8994 3
a8996 2
      "",
      defaultGroup)
d9010 3
a9012 2
      "",
      defaultGroup)
d9026 3
a9028 2
      "",
      defaultGroup)
d9042 3
a9044 2
      "",
      defaultGroup)
d9058 3
a9060 2
      "Dbl",
      defaultGroup)
d9074 3
a9076 2
      "",
      defaultGroup)
d9090 3
a9092 2
      "Dbl",
      defaultGroup)
d9110 3
a9112 2
      "",
      defaultGroup)
d9126 3
a9128 2
      "",
      defaultGroup)
d9142 3
a9144 2
      "",
      defaultGroup)
d9158 3
a9160 2
      "Dbl",
      defaultGroup)
d9174 3
a9176 2
      "",
      defaultGroup)
d9188 3
a9190 2
      "",
      defaultGroup)
d9202 3
a9204 2
      "Dbl",
      defaultGroup)
d9216 3
a9218 2
      "",
      defaultGroup)
d9236 3
a9238 2
      "",
      defaultGroup)
d9256 3
a9258 2
      "",
      defaultGroup)
d9276 3
a9278 2
      "Dbl",
      defaultGroup)
d9296 3
a9298 2
      "",
      defaultGroup)
d9316 3
a9318 2
      "",
      defaultGroup)
d9334 3
a9336 2
      "",
      defaultGroup)
d9352 3
a9354 2
      "",
      defaultGroup)
d9370 3
a9372 2
      "",
      defaultGroup)
d9388 3
a9390 2
      "",
      defaultGroup)
d9406 3
a9408 2
      "",
      defaultGroup)
d9424 3
a9426 2
      "",
      defaultGroup)
d9438 3
a9440 2
      "",
      defaultGroup)
d9452 3
a9454 2
      "",
      defaultGroup)
d9466 3
a9468 2
      "Dbl",
      defaultGroup)
d9484 3
a9486 2
      "",
      defaultGroup)
d9502 3
a9504 2
      "",
      defaultGroup)
d9520 3
a9522 2
      "",
      defaultGroup)
d9538 3
a9540 2
      "Dbl",
      defaultGroup)
d9556 3
a9558 2
      "",
      defaultGroup)
d9574 3
a9576 2
      "",
      defaultGroup)
d9588 3
a9590 2
      "",
      defaultGroup)
d9602 3
a9604 2
      "Dbl",
      defaultGroup)
d9616 3
a9618 2
      "",
      defaultGroup)
d9630 3
a9632 2
      "",
      defaultGroup)
d9644 3
a9646 2
      "",
      defaultGroup)
d9658 3
a9660 2
      "Dbl",
      defaultGroup)
d9672 3
a9674 2
      "",
      defaultGroup)
d9686 3
a9688 2
      "Dbl",
      defaultGroup)
d9700 3
a9702 2
      "",
      defaultGroup)
d9714 3
a9716 2
      "Dbl",
      defaultGroup)
d9728 3
a9730 2
      "",
      defaultGroup)
d9742 3
a9744 2
      "Dbl",
      defaultGroup)
d9756 3
a9758 2
      "",
      defaultGroup)
d9772 3
a9774 2
      "",
      defaultGroup)
d9788 3
a9790 2
      "Dbl",
      defaultGroup)
d9804 3
a9806 2
      "",
      defaultGroup)
d9820 3
a9822 2
      "Dbl",
      defaultGroup)
d9836 3
a9838 2
      "",
      defaultGroup)
d9850 3
a9852 2
      "",
      defaultGroup)
d9866 3
a9868 2
      "",
      defaultGroup)
d9882 3
a9884 2
      "",
      defaultGroup)
d9898 3
a9900 2
      "",
      defaultGroup)
d9914 3
a9916 2
      "",
      defaultGroup)
d9930 3
a9932 2
      "",
      defaultGroup)
d9947 3
a9949 2
      "",
      defaultGroup)
d9964 3
a9966 2
      "Dbl",
      defaultGroup)
d9980 3
a9982 2
      "",
      defaultGroup)
d9996 3
a9998 2
      "Dbl",
      defaultGroup)
d10016 3
a10018 2
      "",
      defaultGroup)
d10032 3
a10034 2
      "",
      defaultGroup)
d10048 3
a10050 2
      "",
      defaultGroup)
d10064 3
a10066 2
      "",
      defaultGroup)
d10080 3
a10082 2
      "Dbl",
      defaultGroup)
d10096 3
a10098 2
      "",
      defaultGroup)
d10110 3
a10112 2
      "",
      defaultGroup)
d10124 3
a10126 2
      "Dbl",
      defaultGroup)
d10138 3
a10140 2
      "",
      defaultGroup)
d10158 3
a10160 2
      "",
      defaultGroup)
d10178 3
a10180 2
      "",
      defaultGroup)
d10198 3
a10200 2
      "Dbl",
      defaultGroup)
d10217 3
a10219 2
      "",
      defaultGroup)
d10237 3
a10239 2
      "",
      defaultGroup)
d10253 3
a10255 2
      "",
      defaultGroup)
d10269 3
a10271 2
      "",
      defaultGroup)
d10283 3
a10285 2
      "",
      defaultGroup)
d10297 3
a10299 2
      "",
      defaultGroup)
d10311 3
a10313 2
      "",
      defaultGroup)
d10327 3
a10329 2
      "",
      defaultGroup)
d10343 3
a10345 2
      "",
      defaultGroup)
d10361 3
a10363 2
      "",
      defaultGroup)
d10379 3
a10381 2
      "",
      defaultGroup)
d10393 3
a10395 2
      "",
      defaultGroup)
d10407 3
a10409 2
      "",
      defaultGroup)
d10421 3
a10423 2
      "",
      quietGroup)
d10434 3
a10436 2
      "",
      quietGroup)
d10447 3
a10449 2
      "",
      quietGroup)
d10460 3
a10462 2
      "",
      defaultGroup)
d10489 3
a10491 2
      "",
      defaultGroup)
@


1.151
log
@Attempt to fix a macro expansion syntax error on the MS compiler.
@
text
@d31 1
a31 1
// Macro STANDARD_API_IMPL (innerFunc, suffix, argList, whichGroup) 
d38 2
a42 2
//    argList    The list of arguments (in parentheses) to be passed to the
//               inner API function
d54 1
a54 1
#define STANDARD_API_IMPL(innerFunc, suffix, argList, whichGroup)              \
d92 1
a92 1
      witAddBomEntry, "", (
d95 1
d107 1
a107 1
      witAddBopEntry, "", (
d110 1
d122 1
a122 1
      witAddDemand, "", (
d125 1
d136 1
a136 1
      witAddOperation, "", (
d138 1
d150 1
a150 1
      witAddPart, "", (
d153 1
d164 1
a164 1
      witAddPartWithOperation, "", (
d166 1
d179 1
a179 1
      witAddSubsBomEntry, "", (
d183 1
d193 1
a193 1
      witAdvanceObjItr, "", (
d195 1
d209 1
a209 1
      witAppendToPipSeq, "", (
d214 1
d228 1
a228 1
      witAppendToPipSeq, "Dbl", (
d233 1
d243 1
a243 1
      witBuildPip, "", (
d245 1
d255 1
a255 1
      witClearPegging, "", (
d257 1
d267 1
a267 1
      witClearPipSeq, "", (
d269 1
d286 1
a286 1
      witCopyData, "", (
d288 1
d306 1
a306 1
      theApiMgr->startApiFunc ("witDeleteRun", theApiMgr->quietPreInGroup ());
d334 1
a334 1
      witDisplayData, "", (
d336 1
d352 1
a352 1
      witEqHeurAlloc, "", (
d359 1
d375 1
a375 1
      witEqHeurAlloc, "Dbl", (
d382 1
d399 1
a399 1
      witEqHeurAllocTwme, "", (
d407 1
d424 1
a424 1
      witEqHeurAllocTwme, "Dbl", (
d432 1
d444 1
a444 1
      witEvalObjectives, "", (
d446 1
d458 1
a458 1
      witFinishHeurAlloc, "", (
d460 1
d482 1
a482 1
      witGeneratePriorities, "", (
d484 1
d495 1
a495 1
      witGetAccAfterSoftLB, "", (
d497 1
d508 1
a508 1
      witGetAccAfterOptImp, "", (
d510 1
d521 1
a521 1
      witGetAccelerated, "", (
d523 1
d534 1
a534 1
      witGetAppData, "", (
d536 1
d547 1
a547 1
      witGetAutoPriority, "", (
d549 1
d562 1
a562 1
      witGetBomEntryAppData, "", (
d566 1
d579 1
a579 1
      witGetBomEntryConsRate, "", (
d583 1
d596 1
a596 1
      witGetBomEntryConsRate, "Dbl", (
d600 1
d613 1
a613 1
      witGetBomEntryEarliestPeriod, "", (
d617 1
d630 1
a630 1
      witGetBomEntryNSubsBomEntries, "", (
d634 1
d647 1
a647 1
      witGetBomEntryConsumedPart, "", (
d651 1
d664 1
a664 1
      witGetBomEntryExecPenalty, "", (
d668 1
d681 1
a681 1
      witGetBomEntryExecPenalty, "Dbl", (
d685 1
d698 1
a698 1
      witGetBomEntryFalloutRate, "", (
d702 1
d715 1
a715 1
      witGetBomEntryFalloutRate, "Dbl", (
d719 1
d732 1
a732 1
      witGetBomEntryImpactPeriod, "", (
d736 1
d749 1
a749 1
      witGetBomEntryLatestPeriod, "", (
d753 1
d766 1
a766 1
      witGetBomEntryMandEC, "", (
d770 1
d783 1
a783 1
      witGetBomEntryOffset, "", (
d787 1
d800 1
a800 1
      witGetBomEntryOffset, "Dbl", (
d804 1
d817 1
a817 1
      witGetBomEntryPropRtg, "", (
d821 1
d834 1
a834 1
      witGetBomEntryRoutingShare, "", (
d838 1
d851 1
a851 1
      witGetBomEntryRoutingShare, "Dbl", (
d855 1
d868 1
a868 1
      witGetBomEntrySelForDel, "", (
d872 1
d885 1
a885 1
      witGetBomEntrySingleSource, "", (
d889 1
d903 1
a903 1
      witGetBopEntryAppData, "", (
d907 1
d920 1
a920 1
      witGetBopEntryEarliestPeriod, "", (
d924 1
d937 1
a937 1
      witGetBopEntryExpAllowed, "", (
d941 1
d954 1
a954 1
      witGetBopEntryExpAversion, "", (
d958 1
d971 1
a971 1
      witGetBopEntryExpAversion, "Dbl", (
d975 1
d988 1
a988 1
      witGetBopEntryImpactPeriod, "", (
d992 1
d1005 1
a1005 1
      witGetBopEntryLatestPeriod, "", (
d1009 1
d1022 1
a1022 1
      witGetBopEntryOffset, "", (
d1026 1
d1039 1
a1039 1
      witGetBopEntryOffset, "Dbl", (
d1043 1
d1056 1
a1056 1
      witGetBopEntryPipShare, "", (
d1060 1
d1073 1
a1073 1
      witGetBopEntryPipShare, "Dbl", (
d1077 1
d1090 1
a1090 1
      witGetBopEntryProductRate, "", (
d1094 1
d1107 1
a1107 1
      witGetBopEntryProductRate, "Dbl", (
d1111 1
d1124 1
a1124 1
      witGetBopEntryProducedPart, "", (
d1128 1
d1141 1
a1141 1
      witGetBopEntryRoutingShare, "", (
d1145 1
d1158 1
a1158 1
      witGetBopEntryRoutingShare, "Dbl", (
d1162 1
d1175 1
a1175 1
      witGetBopEntrySelForDel, "", (
d1179 1
d1190 1
a1190 1
      witGetBuildWhenEmpty, "", (
d1192 1
d1203 1
a1203 1
      witGetCompPrices, "", (
d1205 1
d1216 1
a1216 1
      witGetComputeCriticalList, "", (
d1218 1
d1231 1
a1231 1
      witGetCriticalList, "", (
d1235 1
d1248 1
a1248 1
      witGetDemandAppData, "", (
d1252 1
d1269 1
a1269 1
      witGetDemandConsVolPip, "", (
d1277 1
d1294 1
a1294 1
      witGetDemandConsVolPip, "Dbl", (
d1302 1
d1317 1
a1317 1
      witGetDemandCumShipBounds, "", (
d1323 1
d1338 1
a1338 1
      witGetDemandCumShipBounds, "Dbl", (
d1344 1
d1357 1
a1357 1
      witGetDemandCumShipReward, "", (
d1361 1
d1374 1
a1374 1
      witGetDemandCumShipReward, "Dbl", (
d1378 1
d1391 1
a1391 1
      witGetDemandDemandVol, "", (
d1395 1
d1408 1
a1408 1
      witGetDemandDemandVol, "Dbl", (
d1412 1
d1429 1
a1429 1
      witGetDemandExecVolPegging, "", (
d1437 1
d1454 1
a1454 1
      witGetDemandExecVolPegging, "Dbl", (
d1462 1
d1479 1
a1479 1
      witGetDemandExecVolPip, "", (
d1487 1
d1504 1
a1504 1
      witGetDemandExecVolPip, "Dbl", (
d1512 1
d1525 1
a1525 1
      witGetDemandFocusHorizon, "", (
d1529 1
d1542 1
a1542 1
      witGetDemandFssShipVol, "", (
d1546 1
d1560 1
a1560 1
      witGetDemandFssShipVol, "Dbl", (
d1564 1
d1577 1
a1577 1
      witGetDemandObj1CumShipReward, "", (
d1581 1
d1594 1
a1594 1
      witGetDemandObj1CumShipReward, "Dbl", (
d1598 1
d1611 1
a1611 1
      witGetDemandObj1ShipReward, "", (
d1615 1
d1628 1
a1628 1
      witGetDemandObj1ShipReward, "Dbl", (
d1632 1
d1645 1
a1645 1
      witGetDemandPriority, "", (
d1649 1
d1666 1
a1666 1
      witGetDemandProdVolPip, "", (
d1674 1
d1691 1
a1691 1
      witGetDemandProdVolPip, "Dbl", (
d1699 1
d1712 1
a1712 1
      witGetDemandSelForDel, "", (
d1716 1
d1729 1
a1729 1
      witGetDemandShipLateUB, "", (
d1733 1
d1746 1
a1746 1
      witGetDemandShipReward, "", (
d1750 1
d1763 1
a1763 1
      witGetDemandShipReward, "Dbl", (
d1767 1
d1780 1
a1780 1
      witGetDemandShipVol, "", (
d1784 1
d1797 1
a1797 1
      witGetDemandShipVol, "Dbl", (
d1801 1
d1818 1
a1818 1
      witGetDemandSideVolPip, "", (
d1826 1
d1843 1
a1843 1
      witGetDemandSideVolPip, "Dbl", (
d1851 1
d1870 1
a1870 1
      witGetDemandSubVolPegging, "", (
d1880 1
d1899 1
a1899 1
      witGetDemandSubVolPegging, "Dbl", (
d1909 1
d1928 1
a1928 1
      witGetDemandSubVolPip, "", (
d1938 1
d1957 1
a1957 1
      witGetDemandSubVolPip, "Dbl", (
d1967 1
d1984 1
a1984 1
      witGetDemandSupplyVolPip, "", (
d1992 1
d2009 1
a2009 1
      witGetDemandSupplyVolPip, "Dbl", (
d2017 1
d2028 1
a2028 1
      witGetEquitability, "", (
d2030 1
d2041 1
a2041 1
      witGetExecEmptyBom, "", (
d2043 1
d2054 1
a2054 1
      witGetExpCutoff, "", (
d2056 1
d2067 1
a2067 1
      witGetExpCutoff, "Dbl", (
d2069 1
d2080 1
a2080 1
      witGetFeasible, "", (
d2082 1
d2095 1
a2095 1
      witGetFocusShortageVol, "", (
d2099 1
d2112 1
a2112 1
      witGetFocusShortageVol, "Dbl", (
d2116 1
d2127 1
a2127 1
      witGetForcedMultiEq, "", (
d2129 1
d2140 1
a2140 1
      witGetHashTableSize, "", (
d2142 1
d2153 1
a2153 1
      witGetHeurAllocActive, "", (
d2155 1
d2166 1
a2166 1
      witGetHighPrecisionWD, "", (
d2168 1
d2179 1
a2179 1
      witGetIndependentOffsets, "", (
d2181 1
d2192 1
a2192 1
      witGetLotSizeTol, "", (
d2194 1
d2205 1
a2205 1
      witGetLotSizeTol, "Dbl", (
d2207 1
d2218 1
a2218 1
      witGetMesgFile, "", (
d2220 1
d2231 1
a2231 1
      witGetMesgFileAccessMode, "", (
d2233 1
d2244 1
a2244 1
      witGetMesgFileName, "", (
d2246 1
d2258 1
a2258 1
      witGetMesgPrintNumber, "", (
d2261 1
d2273 1
a2273 1
      witGetMesgStopRunning, "", (
d2276 1
d2288 1
a2288 1
      witGetMesgThrowException, "", (
d2291 1
d2303 1
a2303 1
      witGetMesgTimesPrint, "", (
d2306 1
d2317 1
a2317 1
      witGetMultiExec, "", (
d2319 1
d2330 1
a2330 1
      witGetMultiRoute, "", (
d2332 1
d2343 1
a2343 1
      witGetMultiThread, "", (
d2345 1
d2356 1
a2356 1
      witGetNPeriods, "", (
d2358 1
d2370 1
a2370 1
      witGetObjItrBomEntry, "", (
d2373 1
d2385 1
a2385 1
      witGetObjItrBopEntry, "", (
d2388 1
d2400 1
a2400 1
      witGetObjItrDemand, "", (
d2403 1
d2414 1
a2414 1
      witGetObjItrOperation, "", (
d2416 1
d2427 1
a2427 1
      witGetObjItrPart, "", (
d2429 1
d2440 1
a2440 1
      witGetObjItrState, "", (
d2442 1
d2455 1
a2455 1
      witGetObjItrSubsBomEntry, "", (
d2459 1
d2471 1
a2471 1
      witGetObjValues, "", (
d2474 1
d2486 1
a2486 1
      witGetObjValues, "Dbl", (
d2489 1
d2501 1
a2501 1
      witGetOperationAppData, "", (
d2504 1
d2518 1
a2518 1
      witGetOperationExecBounds, "", (
d2523 1
d2537 1
a2537 1
      witGetOperationExecBounds, "Dbl", (
d2542 1
d2554 1
a2554 1
      witGetOperationExecCost, "", (
d2557 1
d2569 1
a2569 1
      witGetOperationExecCost, "Dbl", (
d2572 1
d2584 1
a2584 1
      witGetOperationExecPenalty, "", (
d2587 1
d2599 1
a2599 1
      witGetOperationExecPenalty, "Dbl", (
d2602 1
d2614 1
a2614 1
      witGetOperationExecutable, "", (
d2617 1
d2629 1
a2629 1
      witGetOperationExecVol, "", (
d2632 1
d2644 1
a2644 1
      witGetOperationExecVol, "Dbl", (
d2647 1
d2659 1
a2659 1
      witGetOperationExists, "", (
d2662 1
d2674 1
a2674 1
      witGetOperationFssExecVol, "", (
d2677 1
d2689 1
a2689 1
      witGetOperationFssExecVol, "Dbl", (
d2692 1
d2704 1
a2704 1
      witGetOperationIncLotSize, "", (
d2707 1
d2719 1
a2719 1
      witGetOperationIncLotSize, "Dbl", (
d2722 1
d2734 1
a2734 1
      witGetOperationIncLotSize2, "", (
d2737 1
d2749 1
a2749 1
      witGetOperationIncLotSize2, "Dbl", (
d2752 1
d2764 1
a2764 1
      witGetOperationLotSize2Thresh, "", (
d2767 1
d2779 1
a2779 1
      witGetOperationLotSize2Thresh, "Dbl", (
d2782 1
d2794 1
a2794 1
      witGetOperationMinLotSize, "", (
d2797 1
d2809 1
a2809 1
      witGetOperationMinLotSize, "Dbl", (
d2812 1
d2824 1
a2824 1
      witGetOperationMinLotSize2, "", (
d2827 1
d2839 1
a2839 1
      witGetOperationMinLotSize2, "Dbl", (
d2842 1
d2854 1
a2854 1
      witGetOperationMrpExecVol, "", (
d2857 1
d2869 1
a2869 1
      witGetOperationMrpExecVol, "Dbl", (
d2872 1
a2872 1

d2884 1
a2884 1
      witGetOperationNBomEntries, "", (
d2887 1
d2899 1
a2899 1
      witGetOperationNBopEntries, "", (
d2902 1
d2914 1
a2914 1
      witGetOperations, "", (
d2917 1
d2929 1
a2929 1
      witGetOperationSelForDel, "", (
d2932 1
d2944 1
a2944 1
      witGetOperationTwoLevelLotSizes, "", (
d2947 1
d2959 1
a2959 1
      witGetOperationYieldRate, "", (
d2962 1
d2974 1
a2974 1
      witGetOperationYieldRate, "Dbl", (
d2977 1
d2988 1
a2988 1
      witGetOptInitMethod, "", (
d2990 1
d3001 1
a3001 1
      witGetOslMesgFileName, "", (
d3003 1
d3014 1
a3014 1
      witGetOutputPrecision, "", (
d3016 1
d3027 1
a3027 1
      witGetPostprocessed, "", (
d3029 1
d3041 1
a3041 1
      witGetPartAppData, "", (
d3044 1
d3057 1
a3057 1
      witGetPartBelowList, "", (
d3061 1
d3073 1
a3073 1
      witGetPartBuildAheadUB, "", (
d3076 1
d3088 1
a3088 1
      witGetPartBuildAsap, "", (
d3091 1
d3103 1
a3103 1
      witGetPartBuildNstn, "", (
d3106 1
d3118 1
a3118 1
      witGetPartConsVol, "", (
d3121 1
d3133 1
a3133 1
      witGetPartConsVol, "Dbl", (
d3136 1
d3150 1
a3150 1
      witGetPartConsumingBomEntry, "", (
d3155 1
d3170 1
a3170 1
      witGetPartConsumingSubsBomEntry, "", (
d3176 1
d3189 1
a3189 1
      witGetPartDemands, "", (
d3193 1
d3205 1
a3205 1
      witGetPartCategory, "", (
d3208 1
d3220 1
a3220 1
      witGetPartExcessVol, "", (
d3223 1
d3235 1
a3235 1
      witGetPartExcessVol, "Dbl", (
d3238 1
d3250 1
a3250 1
      witGetPartExists, "", (
d3253 1
d3265 1
a3265 1
      witGetPartFocusShortageVol, "", (
d3268 1
d3280 1
a3280 1
      witGetPartFocusShortageVol, "Dbl", (
d3283 1
d3295 1
a3295 1
      witGetPartMrpConsVol, "", (
d3298 1
d3310 1
a3310 1
      witGetPartMrpConsVol, "Dbl", (
d3313 1
d3325 1
a3325 1
      witGetPartMrpExcessVol, "", (
d3328 1
d3340 1
a3340 1
      witGetPartMrpExcessVol, "Dbl", (
d3343 1
d3355 1
a3355 1
      witGetPartMrpResidualVol, "", (
d3358 1
d3370 1
a3370 1
      witGetPartMrpResidualVol, "Dbl", (
d3373 1
d3385 1
a3385 1
      witGetPartNConsumingBomEntries, "", (
d3388 1
d3400 1
a3400 1
      witGetPartNConsumingSubsBomEntries, "", (
d3403 1
d3415 1
a3415 1
      witGetPartNProducingBopEntries, "", (
d3418 1
d3430 1
a3430 1
      witGetPartProdVol, "", (
d3433 1
d3445 1
a3445 1
      witGetPartProdVol, "Dbl", (
d3448 1
d3462 1
a3462 1
      witGetPartProducingBopEntry, "", (
d3467 1
d3479 1
a3479 1
      witGetPartPropRtg, "", (
d3482 1
d3494 1
a3494 1
      witGetPartReqVol, "", (
d3497 1
d3509 1
a3509 1
      witGetPartReqVol, "Dbl", (
d3512 1
d3524 1
a3524 1
      witGetPartResidualVol, "", (
d3527 1
d3539 1
a3539 1
      witGetPartResidualVol, "Dbl", (
d3542 1
d3554 1
a3554 1
      witGetParts, "", (
d3557 1
d3569 1
a3569 1
      witGetPartScrapCost, "", (
d3572 1
d3584 1
a3584 1
      witGetPartScrapCost, "Dbl", (
d3587 1
d3599 1
a3599 1
      witGetPartScrapVol, "", (
d3602 1
d3614 1
a3614 1
      witGetPartScrapVol, "Dbl", (
d3617 1
d3629 1
a3629 1
      witGetPartSelForDel, "", (
d3632 1
d3644 1
a3644 1
      witGetPartShadowPrice, "", (
d3647 1
d3659 1
a3659 1
      witGetPartShadowPrice, "Dbl", (
d3662 1
d3674 1
a3674 1
      witGetPartSingleSource, "", (
d3677 1
d3691 1
a3691 1
      witGetPartStockBounds, "", (
d3696 1
d3710 1
a3710 1
      witGetPartStockBounds, "Dbl", (
d3715 1
d3727 1
a3727 1
      witGetPartStockCost, "", (
d3730 1
d3742 1
a3742 1
      witGetPartStockCost, "Dbl", (
d3745 1
d3757 1
a3757 1
      witGetPartStockVol, "", (
d3760 1
d3772 1
a3772 1
      witGetPartStockVol, "Dbl", (
d3775 1
d3787 1
a3787 1
      witGetPartSupplyVol, "", (
d3790 1
d3802 1
a3802 1
      witGetPartSupplyVol, "Dbl", (
d3805 1
d3816 1
a3816 1
      witGetPenExec, "", (
d3818 1
d3829 1
a3829 1
      witGetPipExists, "", (
d3831 1
d3846 1
a3846 1
      witGetPipSeq, "", (
d3852 1
d3867 1
a3867 1
      witGetPipSeq, "Dbl", (
d3873 1
d3884 1
a3884 1
      witGetPipSeqFromHeur, "", (
d3886 1
d3897 1
a3897 1
      witGetPerfPegging, "", (
d3899 1
d3915 1
a3915 1
      witGetPgdCritList, "", (
d3922 1
d3933 1
a3933 1
      witGetPgdCritListMode, "", (
d3935 1
d3946 1
a3946 1
      witGetPostSolveRecovery, "", (
d3948 1
d3959 1
a3959 1
      witGetPrefHighStockSLBs, "", (
d3961 1
d3972 1
a3972 1
      witGetPreprocessed, "", (
d3974 1
d3985 1
a3985 1
      witGetRespectStockSLBs, "", (
d3987 1
d3998 1
a3998 1
      witGetRoundReqVols, "", (
d4000 1
d4011 1
a4011 1
      witGetSelSplit, "", (
d4013 1
d4024 1
a4024 1
      witGetSkipFailures, "", (
d4026 1
d4037 1
a4037 1
      witGetStockReallocation, "", (
d4039 1
d4053 1
a4053 1
      witGetSubsBomEntryAppData, "", (
d4058 1
d4072 1
a4072 1
      witGetSubsBomEntryConsRate, "", (
d4077 1
d4091 1
a4091 1
      witGetSubsBomEntryConsRate, "Dbl", (
d4096 1
d4110 1
a4110 1
      witGetSubsBomEntryConsumedPart, "", (
d4115 1
d4129 1
a4129 1
      witGetSubsBomEntryEarliestPeriod, "", (
d4134 1
d4148 1
a4148 1
      witGetSubsBomEntryExecPenalty, "", (
d4153 1
d4167 1
a4167 1
      witGetSubsBomEntryExecPenalty, "Dbl", (
d4172 1
d4186 1
a4186 1
      witGetSubsBomEntryExpAllowed, "", (
d4191 1
d4205 1
a4205 1
      witGetSubsBomEntryExpNetAversion, "", (
d4210 1
d4224 1
a4224 1
      witGetSubsBomEntryExpNetAversion, "Dbl", (
d4229 1
d4243 1
a4243 1
      witGetSubsBomEntryFalloutRate, "", (
d4248 1
d4262 1
a4262 1
      witGetSubsBomEntryFalloutRate, "Dbl", (
d4267 1
d4281 1
a4281 1
      witGetSubsBomEntryFssSubVol, "", (
d4286 1
d4300 1
a4300 1
      witGetSubsBomEntryFssSubVol, "Dbl", (
d4305 1
d4319 1
a4319 1
      witGetSubsBomEntryImpactPeriod, "", (
d4324 1
d4338 1
a4338 1
      witGetSubsBomEntryLatestPeriod, "", (
d4343 1
d4357 1
a4357 1
      witGetSubsBomEntryMrpNetAllowed, "", (
d4362 1
d4376 1
a4376 1
      witGetSubsBomEntryMrpSubVol, "", (
d4381 1
d4395 1
a4395 1
      witGetSubsBomEntryMrpSubVol, "Dbl", (
d4400 1
d4414 1
a4414 1
      witGetSubsBomEntryNetAllowed, "", (
d4419 1
d4433 1
a4433 1
      witGetSubsBomEntryObj1SubCost, "", (
d4438 1
d4452 1
a4452 1
      witGetSubsBomEntryObj1SubCost, "Dbl", (
d4457 1
d4471 1
a4471 1
      witGetSubsBomEntryOffset, "", (
d4476 1
d4490 1
a4490 1
      witGetSubsBomEntryOffset, "Dbl", (
d4495 1
d4509 1
a4509 1
      witGetSubsBomEntryRoutingShare, "", (
d4514 1
d4528 1
a4528 1
      witGetSubsBomEntryRoutingShare, "Dbl", (
d4533 1
d4547 1
a4547 1
      witGetSubsBomEntrySelForDel, "", (
d4552 1
d4566 1
a4566 1
      witGetSubsBomEntrySubCost, "", (
d4571 1
d4585 1
a4585 1
      witGetSubsBomEntrySubCost, "Dbl", (
d4590 1
d4604 1
a4604 1
      witGetSubsBomEntrySubVol, "", (
d4609 1
d4623 1
a4623 1
      witGetSubsBomEntrySubVol, "Dbl", (
d4628 1
d4639 1
a4639 1
      witGetTieBreakPropRt, "", (
d4641 1
d4652 1
a4652 1
      witGetTitle, "", (
d4654 1
d4665 1
a4665 1
      witGetTruncOffsets, "", (
d4667 1
d4678 1
a4678 1
      witGetTwoWayMultiExec, "", (
d4680 1
d4691 1
a4691 1
      witGetUseFocusHorizons, "", (
d4693 1
d4704 1
a4704 1
      witGetUserHeurStart, "", (
d4706 1
d4717 1
a4717 1
      witGetWbounds, "", (
d4719 1
d4730 1
a4730 1
      witGetWbounds, "Dbl", (
d4732 1
d4743 1
a4743 1
      witGetWit34Compatible, "", (
d4745 1
d4755 1
a4755 1
      witHeurImplode, "", (
d4757 1
d4772 1
a4772 1
      witIncHeurAlloc, "", (
d4778 1
d4793 1
a4793 1
      witIncHeurAlloc, "Dbl", (
d4799 1
d4815 1
a4815 1
      witIncHeurAllocTwme, "", (
d4822 1
d4838 1
a4838 1
      witIncHeurAllocTwme, "Dbl", (
d4845 1
d4855 1
a4855 1
      witInitialize, "", (
d4857 1
d4867 1
a4867 1
      witMrp, "", (
d4869 1
d4893 1
a4893 1
      witNewRun, "", (
d4895 2
a4896 1
      quietPreInGroup)
d4907 1
a4907 1
      witOptImplode, "", (
d4909 1
d4919 1
a4919 1
      witOptPreprocess, "", (
d4921 1
d4933 1
a4933 1
      witPreprocess, "", (
d4935 1
d4945 1
a4945 1
      witPostprocess, "", (
d4947 1
d4957 1
a4957 1
      witPurgeData, "", (
d4959 1
d4970 1
a4970 1
      witReadData, "", (
d4972 1
d4982 1
a4982 1
      witResetObjItr, "", (
d4984 1
d4995 1
a4995 1
      witSetAccAfterSoftLB, "", (
d4997 1
d5008 1
a5008 1
      witSetAccAfterOptImp, "", (
d5010 1
d5021 1
a5021 1
      witSetAppData, "", (
d5023 1
d5034 1
a5034 1
      witSetAutoPriority, "", (
d5036 1
d5049 1
a5049 1
      witSetBomEntryAppData, "", (
d5053 1
d5066 1
a5066 1
      witSetBomEntryConsRate, "", (
d5070 1
d5083 1
a5083 1
      witSetBomEntryConsRate, "Dbl", (
d5087 1
d5100 1
a5100 1
      witSetBomEntryEarliestPeriod, "", (
d5104 1
d5117 1
a5117 1
      witSetBomEntryExecPenalty, "", (
d5121 1
d5134 1
a5134 1
      witSetBomEntryExecPenalty, "Dbl", (
d5138 1
d5151 1
a5151 1
      witSetBomEntryFalloutRate, "", (
d5155 1
d5168 1
a5168 1
      witSetBomEntryFalloutRate, "Dbl", (
d5172 1
d5185 1
a5185 1
      witSetBomEntryLatestPeriod, "", (
d5189 1
d5202 1
a5202 1
      witSetBomEntryMandEC, "", (
d5206 1
d5219 1
a5219 1
      witSetBomEntryOffset, "", (
d5223 1
d5236 1
a5236 1
      witSetBomEntryOffset, "Dbl", (
d5240 1
d5253 1
a5253 1
      witSetBomEntryPropRtg, "", (
d5257 1
d5270 1
a5270 1
      witSetBomEntryRoutingShare, "", (
d5274 1
d5287 1
a5287 1
      witSetBomEntryRoutingShare, "Dbl", (
d5291 1
d5304 1
a5304 1
      witSetBomEntrySelForDel, "", (
d5308 1
d5321 1
a5321 1
      witSetBomEntrySingleSource, "", (
d5325 1
d5338 1
a5338 1
      witSetBopEntryAppData, "", (
d5342 1
d5355 1
a5355 1
      witSetBopEntryEarliestPeriod, "", (
d5359 1
d5372 1
a5372 1
      witSetBopEntryExpAllowed, "", (
d5376 1
d5389 1
a5389 1
      witSetBopEntryExpAversion, "", (
d5393 1
d5406 1
a5406 1
      witSetBopEntryExpAversion, "Dbl", (
d5410 1
d5423 1
a5423 1
      witSetBopEntryLatestPeriod, "", (
d5427 1
d5440 1
a5440 1
      witSetBopEntryOffset, "", (
d5444 1
d5457 1
a5457 1
      witSetBopEntryOffset, "Dbl", (
d5461 1
d5474 1
a5474 1
      witSetBopEntryPipShare, "", (
d5478 1
d5491 1
a5491 1
      witSetBopEntryPipShare, "Dbl", (
d5495 1
d5508 1
a5508 1
      witSetBopEntryProductRate, "", (
d5512 1
d5525 1
a5525 1
      witSetBopEntryProductRate, "Dbl", (
d5529 1
d5542 1
a5542 1
      witSetBopEntryRoutingShare, "", (
d5546 1
d5559 1
a5559 1
      witSetBopEntryRoutingShare, "Dbl", (
d5563 1
d5576 1
a5576 1
      witSetBopEntrySelForDel, "", (
d5580 1
d5591 1
a5591 1
      witSetCompPrices, "", (
d5593 1
d5604 1
a5604 1
      witSetComputeCriticalList, "", (
d5606 1
d5619 1
a5619 1
      witSetDemandAppData, "", (
d5623 1
d5638 1
a5638 1
      witSetDemandCumShipBounds, "", (
d5644 1
d5659 1
a5659 1
      witSetDemandCumShipBounds, "Dbl", (
d5665 1
d5678 1
a5678 1
      witSetDemandCumShipReward, "", (
d5682 1
d5695 1
a5695 1
      witSetDemandCumShipReward, "Dbl", (
d5699 1
d5712 1
a5712 1
      witSetDemandDemandVol, "", (
d5716 1
d5729 1
a5729 1
      witSetDemandDemandVol, "Dbl", (
d5733 1
d5746 1
a5746 1
      witSetDemandFocusHorizon, "", (
d5750 1
d5763 1
a5763 1
      witSetDemandFssShipVol, "", (
d5767 1
d5780 1
a5780 1
      witSetDemandFssShipVol, "Dbl", (
d5784 1
d5797 1
a5797 1
      witSetDemandObj1CumShipReward, "", (
d5801 1
d5814 1
a5814 1
      witSetDemandObj1CumShipReward, "Dbl", (
d5818 1
d5831 1
a5831 1
      witSetDemandObj1ShipReward, "", (
d5835 1
d5848 1
a5848 1
      witSetDemandObj1ShipReward, "Dbl", (
d5852 1
d5865 1
a5865 1
      witSetDemandPriority, "", (
d5869 1
d5882 1
a5882 1
      witSetDemandSelForDel, "", (
d5886 1
d5899 1
a5899 1
      witSetDemandShipLateUB, "", (
d5903 1
d5916 1
a5916 1
      witSetDemandShipReward, "", (
d5920 1
d5933 1
a5933 1
      witSetDemandShipReward, "Dbl", (
d5937 1
d5950 1
a5950 1
      witSetDemandShipVol, "", (
d5954 1
d5967 1
a5967 1
      witSetDemandShipVol, "Dbl", (
d5971 1
d5982 1
a5982 1
      witSetEquitability, "", (
d5984 1
d5995 1
a5995 1
      witSetExecEmptyBom, "", (
d5997 1
d6008 1
a6008 1
      witSetExpCutoff, "", (
d6010 1
d6021 1
a6021 1
      witSetExpCutoff, "Dbl", (
d6023 1
d6034 1
a6034 1
      witSetForcedMultiEq, "", (
d6036 1
d6047 1
a6047 1
      witSetHashTableSize, "", (
d6049 1
d6060 1
a6060 1
      witSetHighPrecisionWD, "", (
d6062 1
d6073 1
a6073 1
      witSetIndependentOffsets, "", (
d6075 1
d6086 1
a6086 1
      witSetLotSizeTol, "", (
d6088 1
d6099 1
a6099 1
      witSetLotSizeTol, "Dbl", (
d6101 1
d6113 1
a6113 1
      witSetMesgFileAccessMode, "", (
d6116 2
a6117 1
      quietPreInGroup)
d6128 1
a6128 1
      witSetMesgFileName, "", (
d6131 2
a6132 1
      quietPreInGroup)
d6144 1
a6144 1
      witSetMesgPrintNumber, "", (
d6148 2
a6149 1
      quietPreInGroup)
d6161 1
a6161 1
      witSetMesgStopRunning, "", (
d6165 2
a6166 1
      quietPreInGroup)
d6178 1
a6178 1
      witSetMesgThrowException, "", (
d6182 2
a6183 1
      quietPreInGroup)
d6195 1
a6195 1
      witSetMesgTimesPrint, "", (
d6199 2
a6200 1
      quietPreInGroup)
d6210 1
a6210 1
      witSetMultiExec, "", (
d6212 1
d6223 1
a6223 1
      witSetMultiRoute, "", (
d6225 1
d6235 1
a6235 1
      witSetMultiThread, "", (
d6237 1
d6248 1
a6248 1
      witSetNPeriods, "", (
d6250 1
d6261 1
a6261 1
      witSetOslMesgFileName, "", (
d6263 1
d6275 1
a6275 1
      witSetOperationAppData, "", (
d6278 1
d6292 1
a6292 1
      witSetOperationExecBounds, "", (
d6297 1
d6311 1
a6311 1
      witSetOperationExecBounds, "Dbl", (
d6316 1
d6328 1
a6328 1
      witSetOperationExecCost, "", (
d6331 1
d6343 1
a6343 1
      witSetOperationExecCost, "Dbl", (
d6346 1
d6358 1
a6358 1
      witSetOperationExecPenalty, "", (
d6361 1
d6373 1
a6373 1
      witSetOperationExecPenalty, "Dbl", (
d6376 1
d6388 1
a6388 1
      witSetOperationExecVol, "", (
d6391 1
d6403 1
a6403 1
      witSetOperationExecVol, "Dbl", (
d6406 1
d6418 1
a6418 1
      witSetOperationIncLotSize, "", (
d6421 1
d6433 1
a6433 1
      witSetOperationIncLotSize, "Dbl", (
d6436 1
d6448 1
a6448 1
      witSetOperationIncLotSize2, "", (
d6451 1
d6463 1
a6463 1
      witSetOperationIncLotSize2, "Dbl", (
d6466 1
d6478 1
a6478 1
      witSetOperationLotSize2Thresh, "", (
d6481 1
d6493 1
a6493 1
      witSetOperationLotSize2Thresh, "Dbl", (
d6496 1
d6508 1
a6508 1
      witSetOperationMinLotSize, "", (
d6511 1
d6523 1
a6523 1
      witSetOperationMinLotSize, "Dbl", (
d6526 1
d6538 1
a6538 1
      witSetOperationMinLotSize2, "", (
d6541 1
d6553 1
a6553 1
      witSetOperationMinLotSize2, "Dbl", (
d6556 1
d6568 1
a6568 1
      witSetOperationSelForDel, "", (
d6571 1
d6583 1
a6583 1
      witSetOperationTwoLevelLotSizes, "", (
d6586 1
d6598 1
a6598 1
      witSetOperationYieldRate, "", (
d6601 1
d6613 1
a6613 1
      witSetOperationYieldRate, "Dbl", (
d6616 1
d6627 1
a6627 1
      witSetOptInitMethod, "", (
d6629 1
d6640 1
a6640 1
      witSetOutputPrecision, "", (
d6642 1
d6654 1
a6654 1
      witSetPartAppData, "", (
d6657 1
d6669 1
a6669 1
      witSetPartBuildAheadUB, "", (
d6672 1
d6684 1
a6684 1
      witSetPartBuildAsap, "", (
d6687 1
d6699 1
a6699 1
      witSetPartBuildNstn, "", (
d6702 1
d6714 1
a6714 1
      witSetPartPropRtg, "", (
d6717 1
d6729 1
a6729 1
      witSetPartScrapCost, "", (
d6733 1
d6745 1
a6745 1
      witSetPartScrapCost, "Dbl", (
d6749 1
d6761 1
a6761 1
      witSetPartSelForDel, "", (
d6764 1
d6776 1
a6776 1
      witSetPartSingleSource, "", (
d6779 1
d6793 1
a6793 1
      witSetPartStockBounds, "", (
d6798 1
d6812 1
a6812 1
      witSetPartStockBounds, "Dbl", (
d6817 1
d6829 1
a6829 1
      witSetPartStockCost, "", (
d6832 1
d6844 1
a6844 1
      witSetPartStockCost, "Dbl", (
d6847 1
d6859 1
a6859 1
      witSetPartSupplyVol, "", (
d6862 1
d6874 1
a6874 1
      witSetPartSupplyVol, "Dbl", (
d6877 1
d6888 1
a6888 1
      witSetPenExec, "", (
d6890 1
d6901 1
a6901 1
      witSetPerfPegging, "", (
d6903 1
d6914 1
a6914 1
      witSetPgdCritListMode, "", (
d6916 1
d6927 1
a6927 1
      witSetPipSeqFromHeur, "", (
d6929 1
d6940 1
a6940 1
      witSetPostSolveRecovery, "", (
d6942 1
d6953 1
a6953 1
      witSetPrefHighStockSLBs, "", (
d6955 1
d6966 1
a6966 1
      witSetRespectStockSLBs, "", (
d6968 1
d6979 1
a6979 1
      witSetRoundReqVols, "", (
d6981 1
d6992 1
a6992 1
      witSetSelSplit, "", (
d6994 1
d7005 1
a7005 1
      witSetSkipFailures, "", (
d7007 1
d7018 1
a7018 1
      witSetStockReallocation, "", (
d7020 1
d7034 1
a7034 1
      witSetSubsBomEntryAppData, "", (
d7039 1
d7053 1
a7053 1
      witSetSubsBomEntryConsRate, "", (
d7058 1
d7072 1
a7072 1
      witSetSubsBomEntryConsRate, "Dbl", (
d7077 1
d7091 1
a7091 1
      witSetSubsBomEntryEarliestPeriod, "", (
d7096 1
d7110 1
a7110 1
      witSetSubsBomEntryExecPenalty, "", (
d7115 1
d7129 1
a7129 1
      witSetSubsBomEntryExecPenalty, "Dbl", (
d7134 1
d7148 1
a7148 1
      witSetSubsBomEntryExpAllowed, "", (
d7153 1
d7167 1
a7167 1
      witSetSubsBomEntryExpNetAversion, "", (
d7172 1
d7186 1
a7186 1
      witSetSubsBomEntryExpNetAversion, "Dbl", (
d7191 1
d7205 1
a7205 1
      witSetSubsBomEntryFalloutRate, "", (
d7210 1
d7224 1
a7224 1
      witSetSubsBomEntryFalloutRate, "Dbl", (
d7229 1
d7243 1
a7243 1
      witSetSubsBomEntryLatestPeriod, "", (
d7248 1
d7262 1
a7262 1
      witSetSubsBomEntryMrpNetAllowed, "", (
d7267 1
d7281 1
a7281 1
      witSetSubsBomEntryNetAllowed, "", (
d7286 1
d7300 1
a7300 1
      witSetSubsBomEntryObj1SubCost, "", (
d7305 1
d7319 1
a7319 1
      witSetSubsBomEntryObj1SubCost, "Dbl", (
d7324 1
d7338 1
a7338 1
      witSetSubsBomEntryOffset, "", (
d7343 1
d7357 1
a7357 1
      witSetSubsBomEntryOffset, "Dbl", (
d7362 1
d7376 1
a7376 1
      witSetSubsBomEntryRoutingShare, "", (
d7381 1
d7395 1
a7395 1
      witSetSubsBomEntryRoutingShare, "Dbl", (
d7400 1
d7414 1
a7414 1
      witSetSubsBomEntrySelForDel, "", (
d7419 1
d7433 1
a7433 1
      witSetSubsBomEntrySubCost, "", (
d7438 1
d7452 1
a7452 1
      witSetSubsBomEntrySubCost, "Dbl", (
d7457 1
d7471 1
a7471 1
      witSetSubsBomEntrySubVol, "", (
d7476 1
d7490 1
a7490 1
      witSetSubsBomEntrySubVol, "Dbl", (
d7495 1
d7506 1
a7506 1
      witSetTieBreakPropRt, "", (
d7508 1
d7519 1
a7519 1
      witSetTitle, "", (
d7521 1
d7532 1
a7532 1
      witSetTruncOffsets, "", (
d7534 1
d7545 1
a7545 1
      witSetTwoWayMultiExec, "", (
d7547 1
d7558 1
a7558 1
      witSetUseFocusHorizons, "", (
d7560 1
d7571 1
a7571 1
      witSetUserHeurStart, "", (
d7573 1
d7584 1
a7584 1
      witSetWbounds, "", (
d7586 1
d7597 1
a7597 1
      witSetWbounds, "Dbl", (
d7599 1
d7610 1
a7610 1
      witSetWit34Compatible, "", (
d7612 1
d7622 1
a7622 1
      witShutDownHeurAlloc, "", (
d7624 1
d7634 1
a7634 1
      witStartHeurAlloc, "", (
d7636 1
d7649 1
a7649 1
      witWriteCriticalList, "", (
d7653 1
d7664 1
a7664 1
      witWriteData, "", (
d7666 1
d7678 1
a7678 1
      witWriteExecSched, "", (
d7681 1
d7693 1
a7693 1
      witWriteReqSched, "", (
d7696 1
d7708 1
a7708 1
      witWriteShipSched, "", (
d7711 1
d7901 1
a7901 1
      witGetBomEntryFallout, "", (
d7905 1
d7918 1
a7918 1
      witGetBomEntryPropRouting, "", (
d7922 1
d7935 1
a7935 1
      witGetBomEntryUsageRate, "", (
d7939 1
d7952 1
a7952 1
      witGetBomEntryUsageTime, "", (
d7956 1
d7969 1
a7969 1
      witGetBopEntryByProduct, "", (
d7973 1
d7986 1
a7986 1
      witGetBopEntryProdRate, "", (
d7990 1
d8001 1
a8001 1
      witGetCapCost, "", (
d8003 1
d8014 1
a8014 1
      witGetCapCost, "Dbl", (
d8016 1
d8029 1
a8029 1
      witGetDemandBuildAheadLimit, "", (
d8033 1
d8046 1
a8046 1
      witGetDemandBuildAheadUB, "", (
d8050 1
d8063 1
a8063 1
      witGetDemandGrossRev, "", (
d8067 1
d8080 1
a8080 1
      witGetDemandGrossRev, "Dbl", (
d8084 1
d8097 1
a8097 1
      witGetDemandPrefBuildAhead, "", (
d8101 1
d8114 1
a8114 1
      witGetDemandShipLateLimit, "", (
d8118 1
d8129 1
a8129 1
      witGetInvCost, "", (
d8131 1
d8142 1
a8142 1
      witGetInvCost, "Dbl", (
d8144 1
d8155 1
a8155 1
      witGetLocalBuildAhead, "", (
d8157 1
d8168 1
a8168 1
      witGetLocalMultiExec, "", (
d8170 1
d8184 1
a8184 1
      witGetObj2Values, "", (
d8189 1
d8203 1
a8203 1
      witGetObj2Values, "Dbl", (
d8208 1
d8219 1
a8219 1
      witGetObj2Winv, "", (
d8221 1
d8232 1
a8232 1
      witGetObj2Winv, "Dbl", (
d8234 1
d8245 1
a8245 1
      witGetObj2Wrev, "", (
d8247 1
d8258 1
a8258 1
      witGetObj2Wrev, "Dbl", (
d8260 1
d8271 1
a8271 1
      witGetObj2Wserv, "", (
d8273 1
d8284 1
a8284 1
      witGetObj2Wserv, "Dbl", (
d8286 1
d8297 1
a8297 1
      witGetObj2Wsub, "", (
d8299 1
d8310 1
a8310 1
      witGetObj2Wsub, "Dbl", (
d8312 1
d8323 1
a8323 1
      witGetObjChoice, "", (
d8325 1
d8337 1
a8337 1
      witGetOperationObj1ExecCost, "", (
d8340 1
d8352 1
a8352 1
      witGetOperationObj1ExecCost, "Dbl", (
d8355 1
d8367 1
a8367 1
      witGetOperationObj2AuxCost, "", (
d8370 1
d8382 1
a8382 1
      witGetOperationObj2AuxCost, "Dbl", (
d8385 1
d8397 1
a8397 1
      witGetOperationYield, "", (
d8400 1
d8411 1
a8411 1
      witGetOptWithLotSizes, "", (
d8413 1
d8425 1
a8425 1
      witGetPartBuildAheadLimit, "", (
d8428 1
d8440 1
a8440 1
      witGetPartCycleTime, "", (
d8443 1
d8455 1
a8455 1
      witGetPartIncLotSize, "", (
d8458 1
d8470 1
a8470 1
      witGetPartMinLotSize, "", (
d8473 1
d8485 1
a8485 1
      witGetPartMrpProdVol, "", (
d8488 1
d8500 1
a8500 1
      witGetPartNBomEntries, "", (
d8503 1
d8515 1
a8515 1
      witGetPartObj1ProdCost, "", (
d8518 1
d8530 1
a8530 1
      witGetPartObj1ScrapCost, "", (
d8533 1
d8545 1
a8545 1
      witGetPartObj1ScrapCost, "Dbl", (
d8548 1
d8560 1
a8560 1
      witGetPartObj1StockCost, "", (
d8563 1
d8575 1
a8575 1
      witGetPartObj1StockCost, "Dbl", (
d8578 1
d8592 1
a8592 1
      witGetPartProdBounds, "", (
d8597 1
d8609 1
a8609 1
      witGetPartPropRouting, "", (
d8612 1
d8624 1
a8624 1
      witGetPartUnitCost, "", (
d8627 1
d8639 1
a8639 1
      witGetPartUnitCost, "Dbl", (
d8642 1
d8654 1
a8654 1
      witGetPartYield, "", (
d8657 1
d8668 1
a8668 1
      witGetPeriodsPerYear, "", (
d8670 1
d8681 1
a8681 1
      witGetPeriodsPerYear, "Dbl", (
d8683 1
d8694 1
a8694 1
      witGetStockRealloc, "", (
d8696 1
d8710 1
a8710 1
      witGetSubsBomEntryFallout, "", (
d8715 1
d8729 1
a8729 1
      witGetSubsBomEntryObj2SubPenalty, "", (
d8734 1
d8748 1
a8748 1
      witGetSubsBomEntryObj2SubPenalty, "Dbl", (
d8753 1
d8767 1
a8767 1
      witGetSubsBomEntryProdVol, "", (
d8772 1
d8786 1
a8786 1
      witGetSubsBomEntryUsageRate, "", (
d8791 1
d8804 1
a8804 1
      witSetBomEntryFallout, "", (
d8808 1
d8821 1
a8821 1
      witSetBomEntryPropRouting, "", (
d8825 1
d8838 1
a8838 1
      witSetBomEntryUsageRate, "", (
d8842 1
d8855 1
a8855 1
      witSetBomEntryUsageTime, "", (
d8859 1
d8872 1
a8872 1
      witSetBopEntryByProduct, "", (
d8876 1
d8889 1
a8889 1
      witSetBopEntryProdRate, "", (
d8893 1
d8904 1
a8904 1
      witSetBuildWhenEmpty, "", (
d8906 1
d8917 1
a8917 1
      witSetCapCost, "", (
d8919 1
d8930 1
a8930 1
      witSetCapCost, "Dbl", (
d8932 1
d8945 1
a8945 1
      witSetDemandBuildAheadLimit, "", (
d8949 1
d8962 1
a8962 1
      witSetDemandBuildAheadUB, "", (
d8966 1
d8979 1
a8979 1
      witSetDemandGrossRev, "", (
d8983 1
d8996 1
a8996 1
      witSetDemandGrossRev, "Dbl", (
d9000 1
d9013 1
a9013 1
      witSetDemandPrefBuildAhead, "", (
d9017 1
d9030 1
a9030 1
      witSetDemandShipLateLimit, "", (
d9034 1
d9045 1
a9045 1
      witSetInvCost, "", (
d9047 1
d9058 1
a9058 1
      witSetInvCost, "Dbl", (
d9060 1
d9071 1
a9071 1
      witSetLocalBuildAhead, "", (
d9073 1
d9084 1
a9084 1
      witSetLocalMultiExec, "", (
d9086 1
d9097 1
a9097 1
      witSetObj2Winv, "", (
d9099 1
d9110 1
a9110 1
      witSetObj2Winv, "Dbl", (
d9112 1
d9123 1
a9123 1
      witSetObj2Wrev, "", (
d9125 1
d9136 1
a9136 1
      witSetObj2Wrev, "Dbl", (
d9138 1
d9149 1
a9149 1
      witSetObj2Wserv, "", (
d9151 1
d9162 1
a9162 1
      witSetObj2Wserv, "Dbl", (
d9164 1
d9175 1
a9175 1
      witSetObj2Wsub, "", (
d9177 1
d9188 1
a9188 1
      witSetObj2Wsub, "Dbl", (
d9190 1
d9201 1
a9201 1
      witSetObjChoice, "", (
d9203 1
d9215 1
a9215 1
      witSetOperationObj1ExecCost, "", (
d9218 1
d9230 1
a9230 1
      witSetOperationObj1ExecCost, "Dbl", (
d9233 1
d9245 1
a9245 1
      witSetOperationObj2AuxCost, "", (
d9248 1
d9260 1
a9260 1
      witSetOperationObj2AuxCost, "Dbl", (
d9263 1
d9275 1
a9275 1
      witSetOperationYield, "", (
d9278 1
d9289 1
a9289 1
      witSetOptWithLotSizes, "", (
d9291 1
d9303 1
a9303 1
      witSetPartBuildAheadLimit, "", (
d9306 1
d9318 1
a9318 1
      witSetPartCycleTime, "", (
d9321 1
d9333 1
a9333 1
      witSetPartIncLotSize, "", (
d9336 1
d9348 1
a9348 1
      witSetPartMinLotSize, "", (
d9351 1
d9363 1
a9363 1
      witSetPartObj1ProdCost, "", (
d9366 1
d9378 1
a9378 1
      witSetPartObj1ScrapCost, "", (
d9382 1
d9394 1
a9394 1
      witSetPartObj1ScrapCost, "Dbl", (
d9398 1
d9410 1
a9410 1
      witSetPartObj1StockCost, "", (
d9413 1
d9425 1
a9425 1
      witSetPartObj1StockCost, "Dbl", (
d9428 1
d9442 1
a9442 1
      witSetPartProdBounds, "", (
d9447 1
d9459 1
a9459 1
      witSetPartProdVol, "", (
d9462 1
d9474 1
a9474 1
      witSetPartPropRouting, "", (
d9477 1
d9489 1
a9489 1
      witSetPartUnitCost, "", (
d9492 1
d9504 1
a9504 1
      witSetPartUnitCost, "Dbl", (
d9507 1
d9519 1
a9519 1
      witSetPartYield, "", (
d9522 1
d9533 1
a9533 1
      witSetPeriodsPerYear, "", (
d9535 1
d9546 1
a9546 1
      witSetPeriodsPerYear, "Dbl", (
d9548 1
d9559 1
a9559 1
      witSetStockRealloc, "", (
d9561 1
d9575 1
a9575 1
      witSetSubsBomEntryFallout, "", (
d9580 1
d9594 1
a9594 1
      witSetSubsBomEntryObj2SubPenalty, "", (
d9599 1
d9613 1
a9613 1
      witSetSubsBomEntryObj2SubPenalty, "Dbl", (
d9618 1
d9631 1
a9631 1
      witSetSubsBomEntryProdVol, "", (
d9636 1
d9650 1
a9650 1
      witSetSubsBomEntryUsageRate, "", (
d9655 1
d9667 1
a9667 1
      witWriteProdSched, "", (
d9670 1
d9683 1
a9683 1
      witGetSolverLogFileName, "", (
d9685 1
d9696 1
a9696 1
      witSetSolverLogFileName, "", (
d9698 1
d9709 1
a9709 1
      witGetNonMrSelSplit, "", (
d9711 1
d9722 1
a9722 1
      witSetNonMrSelSplit, "", (
d9724 1
d9736 1
a9736 1
      witGetPartBaSelSplit, "", (
d9739 1
d9751 1
a9751 1
      witSetPartBaSelSplit, "", (
d9754 1
d9767 1
a9767 1
      witGetBopEntryMeSelSplit, "", (
d9771 1
d9784 1
a9784 1
      witSetBopEntryMeSelSplit, "", (
d9788 1
d9799 1
a9799 1
      witGetSrSelSplit, "", (
d9801 1
d9812 1
a9812 1
      witSetSrSelSplit, "", (
d9814 1
d9825 1
a9825 1
      witNoDependantWitRunVeneersIsOne, "", (
d9827 2
a9828 1
      quietPreInGroup)
d9837 1
a9837 1
      witNoDependantWitRunVeneersDecr, "", (
d9839 2
a9840 1
      quietPreInGroup)
d9849 1
a9849 1
      witNoDependantWitRunVeneersIncr, "", (
d9851 2
a9852 1
      quietPreInGroup)
d9861 1
a9861 1
      witListUnissuedMsgs, "", (
d9863 1
d9889 1
a9889 1
      witTestFatalMesg, "", (
d9891 1
@


1.150
log
@Fixed a bug:
   Severe error msg WIT0285S was being issued for
   witNoDependantWitRunVeneersIncr.
@
text
@d38 3
a40 3
//    suffix     A sequence of characters to be added to the end of innerFunc
//               in order to form the name of the outer API function.
//               This will be either blank or Dbl.
d62 1
a62 1
      theApiMgr->startApiFunc (#innerFunc #suffix, theApiMgr->whichGroup ());  \
d92 1
a92 1
      witAddBomEntry, , (
d106 1
a106 1
      witAddBopEntry, , (
d120 1
a120 1
      witAddDemand, , (
d133 1
a133 1
      witAddOperation, , (
d146 1
a146 1
      witAddPart, , (
d159 1
a159 1
      witAddPartWithOperation, , (
d173 1
a173 1
      witAddSubsBomEntry, , (
d186 1
a186 1
      witAdvanceObjItr, , (
d201 1
a201 1
      witAppendToPipSeq, , (
d219 1
a219 1
      witAppendToPipSeq, Dbl, (
d233 1
a233 1
      witBuildPip, , (
d244 1
a244 1
      witClearPegging, , (
d255 1
a255 1
      witClearPipSeq, , (
d273 1
a273 1
      witCopyData, , (
d320 1
a320 1
      witDisplayData, , (
d337 1
a337 1
      witEqHeurAlloc, , (
d359 1
a359 1
      witEqHeurAlloc, Dbl, (
d382 1
a382 1
      witEqHeurAllocTwme, , (
d406 1
a406 1
      witEqHeurAllocTwme, Dbl, (
d425 1
a425 1
      witEvalObjectives, , (
d438 1
a438 1
      witFinishHeurAlloc, , (
d461 1
a461 1
      witGeneratePriorities, , (
d473 1
a473 1
      witGetAccAfterSoftLB, , (
d485 1
a485 1
      witGetAccAfterOptImp, , (
d497 1
a497 1
      witGetAccelerated, , (
d509 1
a509 1
      witGetAppData, , (
d521 1
a521 1
      witGetAutoPriority, , (
d535 1
a535 1
      witGetBomEntryAppData, , (
d551 1
a551 1
      witGetBomEntryConsRate, , (
d567 1
a567 1
      witGetBomEntryConsRate, Dbl, (
d583 1
a583 1
      witGetBomEntryEarliestPeriod, , (
d599 1
a599 1
      witGetBomEntryNSubsBomEntries, , (
d615 1
a615 1
      witGetBomEntryConsumedPart, , (
d631 1
a631 1
      witGetBomEntryExecPenalty, , (
d647 1
a647 1
      witGetBomEntryExecPenalty, Dbl, (
d663 1
a663 1
      witGetBomEntryFalloutRate, , (
d679 1
a679 1
      witGetBomEntryFalloutRate, Dbl, (
d695 1
a695 1
      witGetBomEntryImpactPeriod, , (
d711 1
a711 1
      witGetBomEntryLatestPeriod, , (
d727 1
a727 1
      witGetBomEntryMandEC, , (
d743 1
a743 1
      witGetBomEntryOffset, , (
d759 1
a759 1
      witGetBomEntryOffset, Dbl, (
d775 1
a775 1
      witGetBomEntryPropRtg, , (
d791 1
a791 1
      witGetBomEntryRoutingShare, , (
d807 1
a807 1
      witGetBomEntryRoutingShare, Dbl, (
d823 1
a823 1
      witGetBomEntrySelForDel, , (
d839 1
a839 1
      witGetBomEntrySingleSource, , (
d856 1
a856 1
      witGetBopEntryAppData, , (
d872 1
a872 1
      witGetBopEntryEarliestPeriod, , (
d888 1
a888 1
      witGetBopEntryExpAllowed, , (
d904 1
a904 1
      witGetBopEntryExpAversion, , (
d920 1
a920 1
      witGetBopEntryExpAversion, Dbl, (
d936 1
a936 1
      witGetBopEntryImpactPeriod, , (
d952 1
a952 1
      witGetBopEntryLatestPeriod, , (
d968 1
a968 1
      witGetBopEntryOffset, , (
d984 1
a984 1
      witGetBopEntryOffset, Dbl, (
d1000 1
a1000 1
      witGetBopEntryPipShare, , (
d1016 1
a1016 1
      witGetBopEntryPipShare, Dbl, (
d1032 1
a1032 1
      witGetBopEntryProductRate, , (
d1048 1
a1048 1
      witGetBopEntryProductRate, Dbl, (
d1064 1
a1064 1
      witGetBopEntryProducedPart, , (
d1080 1
a1080 1
      witGetBopEntryRoutingShare, , (
d1096 1
a1096 1
      witGetBopEntryRoutingShare, Dbl, (
d1112 1
a1112 1
      witGetBopEntrySelForDel, , (
d1126 1
a1126 1
      witGetBuildWhenEmpty, , (
d1138 1
a1138 1
      witGetCompPrices, , (
d1150 1
a1150 1
      witGetComputeCriticalList, , (
d1164 1
a1164 1
      witGetCriticalList, , (
d1180 1
a1180 1
      witGetDemandAppData, , (
d1200 1
a1200 1
      witGetDemandConsVolPip, , (
d1224 1
a1224 1
      witGetDemandConsVolPip, Dbl, (
d1246 1
a1246 1
      witGetDemandCumShipBounds, , (
d1266 1
a1266 1
      witGetDemandCumShipBounds, Dbl, (
d1284 1
a1284 1
      witGetDemandCumShipReward, , (
d1300 1
a1300 1
      witGetDemandCumShipReward, Dbl, (
d1316 1
a1316 1
      witGetDemandDemandVol, , (
d1332 1
a1332 1
      witGetDemandDemandVol, Dbl, (
d1352 1
a1352 1
      witGetDemandExecVolPegging, , (
d1376 1
a1376 1
      witGetDemandExecVolPegging, Dbl, (
d1400 1
a1400 1
      witGetDemandExecVolPip, , (
d1424 1
a1424 1
      witGetDemandExecVolPip, Dbl, (
d1444 1
a1444 1
      witGetDemandFocusHorizon, , (
d1460 1
a1460 1
      witGetDemandFssShipVol, , (
d1477 1
a1477 1
      witGetDemandFssShipVol, Dbl, (
d1493 1
a1493 1
      witGetDemandObj1CumShipReward, , (
d1509 1
a1509 1
      witGetDemandObj1CumShipReward, Dbl, (
d1525 1
a1525 1
      witGetDemandObj1ShipReward, , (
d1541 1
a1541 1
      witGetDemandObj1ShipReward, Dbl, (
d1557 1
a1557 1
      witGetDemandPriority, , (
d1577 1
a1577 1
      witGetDemandProdVolPip, , (
d1601 1
a1601 1
      witGetDemandProdVolPip, Dbl, (
d1621 1
a1621 1
      witGetDemandSelForDel, , (
d1637 1
a1637 1
      witGetDemandShipLateUB, , (
d1653 1
a1653 1
      witGetDemandShipReward, , (
d1669 1
a1669 1
      witGetDemandShipReward, Dbl, (
d1685 1
a1685 1
      witGetDemandShipVol, , (
d1701 1
a1701 1
      witGetDemandShipVol, Dbl, (
d1721 1
a1721 1
      witGetDemandSideVolPip, , (
d1745 1
a1745 1
      witGetDemandSideVolPip, Dbl, (
d1771 1
a1771 1
      witGetDemandSubVolPegging, , (
d1799 1
a1799 1
      witGetDemandSubVolPegging, Dbl, (
d1827 1
a1827 1
      witGetDemandSubVolPip, , (
d1855 1
a1855 1
      witGetDemandSubVolPip, Dbl, (
d1881 1
a1881 1
      witGetDemandSupplyVolPip, , (
d1905 1
a1905 1
      witGetDemandSupplyVolPip, Dbl, (
d1923 1
a1923 1
      witGetEquitability, , (
d1935 1
a1935 1
      witGetExecEmptyBom, , (
d1947 1
a1947 1
      witGetExpCutoff, , (
d1959 1
a1959 1
      witGetExpCutoff, Dbl, (
d1971 1
a1971 1
      witGetFeasible, , (
d1985 1
a1985 1
      witGetFocusShortageVol, , (
d2001 1
a2001 1
      witGetFocusShortageVol, Dbl, (
d2015 1
a2015 1
      witGetForcedMultiEq, , (
d2027 1
a2027 1
      witGetHashTableSize, , (
d2039 1
a2039 1
      witGetHeurAllocActive, , (
d2051 1
a2051 1
      witGetHighPrecisionWD, , (
d2063 1
a2063 1
      witGetIndependentOffsets, , (
d2075 1
a2075 1
      witGetLotSizeTol, , (
d2087 1
a2087 1
      witGetLotSizeTol, Dbl, (
d2099 1
a2099 1
      witGetMesgFile, , (
d2111 1
a2111 1
      witGetMesgFileAccessMode, , (
d2123 1
a2123 1
      witGetMesgFileName, , (
d2136 1
a2136 1
      witGetMesgPrintNumber, , (
d2150 1
a2150 1
      witGetMesgStopRunning, , (
d2164 1
a2164 1
      witGetMesgThrowException, , (
d2178 1
a2178 1
      witGetMesgTimesPrint, , (
d2191 1
a2191 1
      witGetMultiExec, , (
d2203 1
a2203 1
      witGetMultiRoute, , (
d2215 1
a2215 1
      witGetMultiThread, , (
d2227 1
a2227 1
      witGetNPeriods, , (
d2240 1
a2240 1
      witGetObjItrBomEntry, , (
d2254 1
a2254 1
      witGetObjItrBopEntry, , (
d2268 1
a2268 1
      witGetObjItrDemand, , (
d2281 1
a2281 1
      witGetObjItrOperation, , (
d2293 1
a2293 1
      witGetObjItrPart, , (
d2305 1
a2305 1
      witGetObjItrState, , (
d2319 1
a2319 1
      witGetObjItrSubsBomEntry, , (
d2334 1
a2334 1
      witGetObjValues, , (
d2348 1
a2348 1
      witGetObjValues, Dbl, (
d2362 1
a2362 1
      witGetOperationAppData, , (
d2378 1
a2378 1
      witGetOperationExecBounds, , (
d2396 1
a2396 1
      witGetOperationExecBounds, Dbl, (
d2412 1
a2412 1
      witGetOperationExecCost, , (
d2426 1
a2426 1
      witGetOperationExecCost, Dbl, (
d2440 1
a2440 1
      witGetOperationExecPenalty, , (
d2454 1
a2454 1
      witGetOperationExecPenalty, Dbl, (
d2468 1
a2468 1
      witGetOperationExecutable, , (
d2482 1
a2482 1
      witGetOperationExecVol, , (
d2496 1
a2496 1
      witGetOperationExecVol, Dbl, (
d2510 1
a2510 1
      witGetOperationExists, , (
d2524 1
a2524 1
      witGetOperationFssExecVol, , (
d2538 1
a2538 1
      witGetOperationFssExecVol, Dbl, (
d2552 1
a2552 1
      witGetOperationIncLotSize, , (
d2566 1
a2566 1
      witGetOperationIncLotSize, Dbl, (
d2580 1
a2580 1
      witGetOperationIncLotSize2, , (
d2594 1
a2594 1
      witGetOperationIncLotSize2, Dbl, (
d2608 1
a2608 1
      witGetOperationLotSize2Thresh, , (
d2622 1
a2622 1
      witGetOperationLotSize2Thresh, Dbl, (
d2636 1
a2636 1
      witGetOperationMinLotSize, , (
d2650 1
a2650 1
      witGetOperationMinLotSize, Dbl, (
d2664 1
a2664 1
      witGetOperationMinLotSize2, , (
d2678 1
a2678 1
      witGetOperationMinLotSize2, Dbl, (
d2692 1
a2692 1
      witGetOperationMrpExecVol, , (
d2706 1
a2706 1
      witGetOperationMrpExecVol, Dbl, (
d2721 1
a2721 1
      witGetOperationNBomEntries, , (
d2735 1
a2735 1
      witGetOperationNBopEntries, , (
d2749 1
a2749 1
      witGetOperations, , (
d2763 1
a2763 1
      witGetOperationSelForDel, , (
d2777 1
a2777 1
      witGetOperationTwoLevelLotSizes, , (
d2791 1
a2791 1
      witGetOperationYieldRate, , (
d2805 1
a2805 1
      witGetOperationYieldRate, Dbl, (
d2818 1
a2818 1
      witGetOptInitMethod, , (
d2830 1
a2830 1
      witGetOslMesgFileName, , (
d2842 1
a2842 1
      witGetOutputPrecision, , (
d2854 1
a2854 1
      witGetPostprocessed, , (
d2867 1
a2867 1
      witGetPartAppData, , (
d2882 1
a2882 1
      witGetPartBelowList, , (
d2897 1
a2897 1
      witGetPartBuildAheadUB, , (
d2911 1
a2911 1
      witGetPartBuildAsap, , (
d2925 1
a2925 1
      witGetPartBuildNstn, , (
d2939 1
a2939 1
      witGetPartConsVol, , (
d2953 1
a2953 1
      witGetPartConsVol, Dbl, (
d2969 1
a2969 1
      witGetPartConsumingBomEntry, , (
d2988 1
a2988 1
      witGetPartConsumingSubsBomEntry, , (
d3006 1
a3006 1
      witGetPartDemands, , (
d3021 1
a3021 1
      witGetPartCategory, , (
d3035 1
a3035 1
      witGetPartExcessVol, , (
d3049 1
a3049 1
      witGetPartExcessVol, Dbl, (
d3063 1
a3063 1
      witGetPartExists, , (
d3077 1
a3077 1
      witGetPartFocusShortageVol, , (
d3091 1
a3091 1
      witGetPartFocusShortageVol, Dbl, (
d3105 1
a3105 1
      witGetPartMrpConsVol, , (
d3119 1
a3119 1
      witGetPartMrpConsVol, Dbl, (
d3133 1
a3133 1
      witGetPartMrpExcessVol, , (
d3147 1
a3147 1
      witGetPartMrpExcessVol, Dbl, (
d3161 1
a3161 1
      witGetPartMrpResidualVol, , (
d3175 1
a3175 1
      witGetPartMrpResidualVol, Dbl, (
d3189 1
a3189 1
      witGetPartNConsumingBomEntries, , (
d3203 1
a3203 1
      witGetPartNConsumingSubsBomEntries, , (
d3217 1
a3217 1
      witGetPartNProducingBopEntries, , (
d3231 1
a3231 1
      witGetPartProdVol, , (
d3245 1
a3245 1
      witGetPartProdVol, Dbl, (
d3261 1
a3261 1
      witGetPartProducingBopEntry, , (
d3277 1
a3277 1
      witGetPartPropRtg, , (
d3291 1
a3291 1
      witGetPartReqVol, , (
d3305 1
a3305 1
      witGetPartReqVol, Dbl, (
d3319 1
a3319 1
      witGetPartResidualVol, , (
d3333 1
a3333 1
      witGetPartResidualVol, Dbl, (
d3347 1
a3347 1
      witGetParts, , (
d3361 1
a3361 1
      witGetPartScrapCost, , (
d3375 1
a3375 1
      witGetPartScrapCost, Dbl, (
d3389 1
a3389 1
      witGetPartScrapVol, , (
d3403 1
a3403 1
      witGetPartScrapVol, Dbl, (
d3417 1
a3417 1
      witGetPartSelForDel, , (
d3431 1
a3431 1
      witGetPartShadowPrice, , (
d3445 1
a3445 1
      witGetPartShadowPrice, Dbl, (
d3459 1
a3459 1
      witGetPartSingleSource, , (
d3475 1
a3475 1
      witGetPartStockBounds, , (
d3493 1
a3493 1
      witGetPartStockBounds, Dbl, (
d3509 1
a3509 1
      witGetPartStockCost, , (
d3523 1
a3523 1
      witGetPartStockCost, Dbl, (
d3537 1
a3537 1
      witGetPartStockVol, , (
d3551 1
a3551 1
      witGetPartStockVol, Dbl, (
d3565 1
a3565 1
      witGetPartSupplyVol, , (
d3579 1
a3579 1
      witGetPartSupplyVol, Dbl, (
d3592 1
a3592 1
      witGetPenExec, , (
d3604 1
a3604 1
      witGetPipExists, , (
d3620 1
a3620 1
      witGetPipSeq, , (
d3640 1
a3640 1
      witGetPipSeq, Dbl, (
d3656 1
a3656 1
      witGetPipSeqFromHeur, , (
d3668 1
a3668 1
      witGetPerfPegging, , (
d3685 1
a3685 1
      witGetPgdCritList, , (
d3702 1
a3702 1
      witGetPgdCritListMode, , (
d3714 1
a3714 1
      witGetPostSolveRecovery, , (
d3726 1
a3726 1
      witGetPrefHighStockSLBs, , (
d3738 1
a3738 1
      witGetPreprocessed, , (
d3750 1
a3750 1
      witGetRespectStockSLBs, , (
d3762 1
a3762 1
      witGetRoundReqVols, , (
d3774 1
a3774 1
      witGetSelSplit, , (
d3786 1
a3786 1
      witGetSkipFailures, , (
d3798 1
a3798 1
      witGetStockReallocation, , (
d3813 1
a3813 1
      witGetSubsBomEntryAppData, , (
d3831 1
a3831 1
      witGetSubsBomEntryConsRate, , (
d3849 1
a3849 1
      witGetSubsBomEntryConsRate, Dbl, (
d3867 1
a3867 1
      witGetSubsBomEntryConsumedPart, , (
d3885 1
a3885 1
      witGetSubsBomEntryEarliestPeriod, , (
d3903 1
a3903 1
      witGetSubsBomEntryExecPenalty, , (
d3921 1
a3921 1
      witGetSubsBomEntryExecPenalty, Dbl, (
d3939 1
a3939 1
      witGetSubsBomEntryExpAllowed, , (
d3957 1
a3957 1
      witGetSubsBomEntryExpNetAversion, , (
d3975 1
a3975 1
      witGetSubsBomEntryExpNetAversion, Dbl, (
d3993 1
a3993 1
      witGetSubsBomEntryFalloutRate, , (
d4011 1
a4011 1
      witGetSubsBomEntryFalloutRate, Dbl, (
d4029 1
a4029 1
      witGetSubsBomEntryFssSubVol, , (
d4047 1
a4047 1
      witGetSubsBomEntryFssSubVol, Dbl, (
d4065 1
a4065 1
      witGetSubsBomEntryImpactPeriod, , (
d4083 1
a4083 1
      witGetSubsBomEntryLatestPeriod, , (
d4101 1
a4101 1
      witGetSubsBomEntryMrpNetAllowed, , (
d4119 1
a4119 1
      witGetSubsBomEntryMrpSubVol, , (
d4137 1
a4137 1
      witGetSubsBomEntryMrpSubVol, Dbl, (
d4155 1
a4155 1
      witGetSubsBomEntryNetAllowed, , (
d4173 1
a4173 1
      witGetSubsBomEntryObj1SubCost, , (
d4191 1
a4191 1
      witGetSubsBomEntryObj1SubCost, Dbl, (
d4209 1
a4209 1
      witGetSubsBomEntryOffset, , (
d4227 1
a4227 1
      witGetSubsBomEntryOffset, Dbl, (
d4245 1
a4245 1
      witGetSubsBomEntryRoutingShare, , (
d4263 1
a4263 1
      witGetSubsBomEntryRoutingShare, Dbl, (
d4281 1
a4281 1
      witGetSubsBomEntrySelForDel, , (
d4299 1
a4299 1
      witGetSubsBomEntrySubCost, , (
d4317 1
a4317 1
      witGetSubsBomEntrySubCost, Dbl, (
d4335 1
a4335 1
      witGetSubsBomEntrySubVol, , (
d4353 1
a4353 1
      witGetSubsBomEntrySubVol, Dbl, (
d4368 1
a4368 1
      witGetTieBreakPropRt, , (
d4380 1
a4380 1
      witGetTitle, , (
d4392 1
a4392 1
      witGetTruncOffsets, , (
d4404 1
a4404 1
      witGetTwoWayMultiExec, , (
d4416 1
a4416 1
      witGetUseFocusHorizons, , (
d4428 1
a4428 1
      witGetUserHeurStart, , (
d4440 1
a4440 1
      witGetWbounds, , (
d4452 1
a4452 1
      witGetWbounds, Dbl, (
d4464 1
a4464 1
      witGetWit34Compatible, , (
d4475 1
a4475 1
      witHeurImplode, , (
d4491 1
a4491 1
      witIncHeurAlloc, , (
d4511 1
a4511 1
      witIncHeurAlloc, Dbl, (
d4532 1
a4532 1
      witIncHeurAllocTwme, , (
d4554 1
a4554 1
      witIncHeurAllocTwme, Dbl, (
d4570 1
a4570 1
      witInitialize, , (
d4581 1
a4581 1
      witMrp, , (
d4606 1
a4606 1
      witNewRun, , (
d4619 1
a4619 1
      witOptImplode, , (
d4630 1
a4630 1
      witOptPreprocess, , (
d4643 1
a4643 1
      witPreprocess, , (
d4654 1
a4654 1
      witPostprocess, , (
d4665 1
a4665 1
      witPurgeData, , (
d4677 1
a4677 1
      witReadData, , (
d4688 1
a4688 1
      witResetObjItr, , (
d4700 1
a4700 1
      witSetAccAfterSoftLB, , (
d4712 1
a4712 1
      witSetAccAfterOptImp, , (
d4724 1
a4724 1
      witSetAppData, , (
d4736 1
a4736 1
      witSetAutoPriority, , (
d4750 1
a4750 1
      witSetBomEntryAppData, , (
d4766 1
a4766 1
      witSetBomEntryConsRate, , (
d4782 1
a4782 1
      witSetBomEntryConsRate, Dbl, (
d4798 1
a4798 1
      witSetBomEntryEarliestPeriod, , (
d4814 1
a4814 1
      witSetBomEntryExecPenalty, , (
d4830 1
a4830 1
      witSetBomEntryExecPenalty, Dbl, (
d4846 1
a4846 1
      witSetBomEntryFalloutRate, , (
d4862 1
a4862 1
      witSetBomEntryFalloutRate, Dbl, (
d4878 1
a4878 1
      witSetBomEntryLatestPeriod, , (
d4894 1
a4894 1
      witSetBomEntryMandEC, , (
d4910 1
a4910 1
      witSetBomEntryOffset, , (
d4926 1
a4926 1
      witSetBomEntryOffset, Dbl, (
d4942 1
a4942 1
      witSetBomEntryPropRtg, , (
d4958 1
a4958 1
      witSetBomEntryRoutingShare, , (
d4974 1
a4974 1
      witSetBomEntryRoutingShare, Dbl, (
d4990 1
a4990 1
      witSetBomEntrySelForDel, , (
d5006 1
a5006 1
      witSetBomEntrySingleSource, , (
d5022 1
a5022 1
      witSetBopEntryAppData, , (
d5038 1
a5038 1
      witSetBopEntryEarliestPeriod, , (
d5054 1
a5054 1
      witSetBopEntryExpAllowed, , (
d5070 1
a5070 1
      witSetBopEntryExpAversion, , (
d5086 1
a5086 1
      witSetBopEntryExpAversion, Dbl, (
d5102 1
a5102 1
      witSetBopEntryLatestPeriod, , (
d5118 1
a5118 1
      witSetBopEntryOffset, , (
d5134 1
a5134 1
      witSetBopEntryOffset, Dbl, (
d5150 1
a5150 1
      witSetBopEntryPipShare, , (
d5166 1
a5166 1
      witSetBopEntryPipShare, Dbl, (
d5182 1
a5182 1
      witSetBopEntryProductRate, , (
d5198 1
a5198 1
      witSetBopEntryProductRate, Dbl, (
d5214 1
a5214 1
      witSetBopEntryRoutingShare, , (
d5230 1
a5230 1
      witSetBopEntryRoutingShare, Dbl, (
d5246 1
a5246 1
      witSetBopEntrySelForDel, , (
d5260 1
a5260 1
      witSetCompPrices, , (
d5272 1
a5272 1
      witSetComputeCriticalList, , (
d5286 1
a5286 1
      witSetDemandAppData, , (
d5304 1
a5304 1
      witSetDemandCumShipBounds, , (
d5324 1
a5324 1
      witSetDemandCumShipBounds, Dbl, (
d5342 1
a5342 1
      witSetDemandCumShipReward, , (
d5358 1
a5358 1
      witSetDemandCumShipReward, Dbl, (
d5374 1
a5374 1
      witSetDemandDemandVol, , (
d5390 1
a5390 1
      witSetDemandDemandVol, Dbl, (
d5406 1
a5406 1
      witSetDemandFocusHorizon, , (
d5422 1
a5422 1
      witSetDemandFssShipVol, , (
d5438 1
a5438 1
      witSetDemandFssShipVol, Dbl, (
d5454 1
a5454 1
      witSetDemandObj1CumShipReward, , (
d5470 1
a5470 1
      witSetDemandObj1CumShipReward, Dbl, (
d5486 1
a5486 1
      witSetDemandObj1ShipReward, , (
d5502 1
a5502 1
      witSetDemandObj1ShipReward, Dbl, (
d5518 1
a5518 1
      witSetDemandPriority, , (
d5534 1
a5534 1
      witSetDemandSelForDel, , (
d5550 1
a5550 1
      witSetDemandShipLateUB, , (
d5566 1
a5566 1
      witSetDemandShipReward, , (
d5582 1
a5582 1
      witSetDemandShipReward, Dbl, (
d5598 1
a5598 1
      witSetDemandShipVol, , (
d5614 1
a5614 1
      witSetDemandShipVol, Dbl, (
d5628 1
a5628 1
      witSetEquitability, , (
d5640 1
a5640 1
      witSetExecEmptyBom, , (
d5652 1
a5652 1
      witSetExpCutoff, , (
d5664 1
a5664 1
      witSetExpCutoff, Dbl, (
d5676 1
a5676 1
      witSetForcedMultiEq, , (
d5688 1
a5688 1
      witSetHashTableSize, , (
d5700 1
a5700 1
      witSetHighPrecisionWD, , (
d5712 1
a5712 1
      witSetIndependentOffsets, , (
d5724 1
a5724 1
      witSetLotSizeTol, , (
d5736 1
a5736 1
      witSetLotSizeTol, Dbl, (
d5749 1
a5749 1
      witSetMesgFileAccessMode, , (
d5763 1
a5763 1
      witSetMesgFileName, , (
d5778 1
a5778 1
      witSetMesgPrintNumber, , (
d5794 1
a5794 1
      witSetMesgStopRunning, , (
d5810 1
a5810 1
      witSetMesgThrowException, , (
d5826 1
a5826 1
      witSetMesgTimesPrint, , (
d5840 1
a5840 1
      witSetMultiExec, , (
d5852 1
a5852 1
      witSetMultiRoute, , (
d5863 1
a5863 1
      witSetMultiThread, , (
d5875 1
a5875 1
      witSetNPeriods, , (
d5887 1
a5887 1
      witSetOslMesgFileName, , (
d5900 1
a5900 1
      witSetOperationAppData, , (
d5916 1
a5916 1
      witSetOperationExecBounds, , (
d5934 1
a5934 1
      witSetOperationExecBounds, Dbl, (
d5950 1
a5950 1
      witSetOperationExecCost, , (
d5964 1
a5964 1
      witSetOperationExecCost, Dbl, (
d5978 1
a5978 1
      witSetOperationExecPenalty, , (
d5992 1
a5992 1
      witSetOperationExecPenalty, Dbl, (
d6006 1
a6006 1
      witSetOperationExecVol, , (
d6020 1
a6020 1
      witSetOperationExecVol, Dbl, (
d6034 1
a6034 1
      witSetOperationIncLotSize, , (
d6048 1
a6048 1
      witSetOperationIncLotSize, Dbl, (
d6062 1
a6062 1
      witSetOperationIncLotSize2, , (
d6076 1
a6076 1
      witSetOperationIncLotSize2, Dbl, (
d6090 1
a6090 1
      witSetOperationLotSize2Thresh, , (
d6104 1
a6104 1
      witSetOperationLotSize2Thresh, Dbl, (
d6118 1
a6118 1
      witSetOperationMinLotSize, , (
d6132 1
a6132 1
      witSetOperationMinLotSize, Dbl, (
d6146 1
a6146 1
      witSetOperationMinLotSize2, , (
d6160 1
a6160 1
      witSetOperationMinLotSize2, Dbl, (
d6174 1
a6174 1
      witSetOperationSelForDel, , (
d6188 1
a6188 1
      witSetOperationTwoLevelLotSizes, , (
d6202 1
a6202 1
      witSetOperationYieldRate, , (
d6216 1
a6216 1
      witSetOperationYieldRate, Dbl, (
d6229 1
a6229 1
      witSetOptInitMethod, , (
d6241 1
a6241 1
      witSetOutputPrecision, , (
d6254 1
a6254 1
      witSetPartAppData, , (
d6268 1
a6268 1
      witSetPartBuildAheadUB, , (
d6282 1
a6282 1
      witSetPartBuildAsap, , (
d6296 1
a6296 1
      witSetPartBuildNstn, , (
d6310 1
a6310 1
      witSetPartPropRtg, , (
d6324 1
a6324 1
      witSetPartScrapCost, , (
d6339 1
a6339 1
      witSetPartScrapCost, Dbl, (
d6354 1
a6354 1
      witSetPartSelForDel, , (
d6368 1
a6368 1
      witSetPartSingleSource, , (
d6384 1
a6384 1
      witSetPartStockBounds, , (
d6402 1
a6402 1
      witSetPartStockBounds, Dbl, (
d6418 1
a6418 1
      witSetPartStockCost, , (
d6432 1
a6432 1
      witSetPartStockCost, Dbl, (
d6446 1
a6446 1
      witSetPartSupplyVol, , (
d6460 1
a6460 1
      witSetPartSupplyVol, Dbl, (
d6473 1
a6473 1
      witSetPenExec, , (
d6485 1
a6485 1
      witSetPerfPegging, , (
d6497 1
a6497 1
      witSetPgdCritListMode, , (
d6509 1
a6509 1
      witSetPipSeqFromHeur, , (
d6521 1
a6521 1
      witSetPostSolveRecovery, , (
d6533 1
a6533 1
      witSetPrefHighStockSLBs, , (
d6545 1
a6545 1
      witSetRespectStockSLBs, , (
d6557 1
a6557 1
      witSetRoundReqVols, , (
d6569 1
a6569 1
      witSetSelSplit, , (
d6581 1
a6581 1
      witSetSkipFailures, , (
d6593 1
a6593 1
      witSetStockReallocation, , (
d6608 1
a6608 1
      witSetSubsBomEntryAppData, , (
d6626 1
a6626 1
      witSetSubsBomEntryConsRate, , (
d6644 1
a6644 1
      witSetSubsBomEntryConsRate, Dbl, (
d6662 1
a6662 1
      witSetSubsBomEntryEarliestPeriod, , (
d6680 1
a6680 1
      witSetSubsBomEntryExecPenalty, , (
d6698 1
a6698 1
      witSetSubsBomEntryExecPenalty, Dbl, (
d6716 1
a6716 1
      witSetSubsBomEntryExpAllowed, , (
d6734 1
a6734 1
      witSetSubsBomEntryExpNetAversion, , (
d6752 1
a6752 1
      witSetSubsBomEntryExpNetAversion, Dbl, (
d6770 1
a6770 1
      witSetSubsBomEntryFalloutRate, , (
d6788 1
a6788 1
      witSetSubsBomEntryFalloutRate, Dbl, (
d6806 1
a6806 1
      witSetSubsBomEntryLatestPeriod, , (
d6824 1
a6824 1
      witSetSubsBomEntryMrpNetAllowed, , (
d6842 1
a6842 1
      witSetSubsBomEntryNetAllowed, , (
d6860 1
a6860 1
      witSetSubsBomEntryObj1SubCost, , (
d6878 1
a6878 1
      witSetSubsBomEntryObj1SubCost, Dbl, (
d6896 1
a6896 1
      witSetSubsBomEntryOffset, , (
d6914 1
a6914 1
      witSetSubsBomEntryOffset, Dbl, (
d6932 1
a6932 1
      witSetSubsBomEntryRoutingShare, , (
d6950 1
a6950 1
      witSetSubsBomEntryRoutingShare, Dbl, (
d6968 1
a6968 1
      witSetSubsBomEntrySelForDel, , (
d6986 1
a6986 1
      witSetSubsBomEntrySubCost, , (
d7004 1
a7004 1
      witSetSubsBomEntrySubCost, Dbl, (
d7022 1
a7022 1
      witSetSubsBomEntrySubVol, , (
d7040 1
a7040 1
      witSetSubsBomEntrySubVol, Dbl, (
d7055 1
a7055 1
      witSetTieBreakPropRt, , (
d7067 1
a7067 1
      witSetTitle, , (
d7079 1
a7079 1
      witSetTruncOffsets, , (
d7091 1
a7091 1
      witSetTwoWayMultiExec, , (
d7103 1
a7103 1
      witSetUseFocusHorizons, , (
d7115 1
a7115 1
      witSetUserHeurStart, , (
d7127 1
a7127 1
      witSetWbounds, , (
d7139 1
a7139 1
      witSetWbounds, Dbl, (
d7151 1
a7151 1
      witSetWit34Compatible, , (
d7162 1
a7162 1
      witShutDownHeurAlloc, , (
d7173 1
a7173 1
      witStartHeurAlloc, , (
d7187 1
a7187 1
      witWriteCriticalList, , (
d7201 1
a7201 1
      witWriteData, , (
d7214 1
a7214 1
      witWriteExecSched, , (
d7228 1
a7228 1
      witWriteReqSched, , (
d7242 1
a7242 1
      witWriteShipSched, , (
d7434 1
a7434 1
      witGetBomEntryFallout, , (
d7450 1
a7450 1
      witGetBomEntryPropRouting, , (
d7466 1
a7466 1
      witGetBomEntryUsageRate, , (
d7482 1
a7482 1
      witGetBomEntryUsageTime, , (
d7498 1
a7498 1
      witGetBopEntryByProduct, , (
d7514 1
a7514 1
      witGetBopEntryProdRate, , (
d7528 1
a7528 1
      witGetCapCost, , (
d7540 1
a7540 1
      witGetCapCost, Dbl, (
d7554 1
a7554 1
      witGetDemandBuildAheadLimit, , (
d7570 1
a7570 1
      witGetDemandBuildAheadUB, , (
d7586 1
a7586 1
      witGetDemandGrossRev, , (
d7602 1
a7602 1
      witGetDemandGrossRev, Dbl, (
d7618 1
a7618 1
      witGetDemandPrefBuildAhead, , (
d7634 1
a7634 1
      witGetDemandShipLateLimit, , (
d7648 1
a7648 1
      witGetInvCost, , (
d7660 1
a7660 1
      witGetInvCost, Dbl, (
d7672 1
a7672 1
      witGetLocalBuildAhead, , (
d7684 1
a7684 1
      witGetLocalMultiExec, , (
d7699 1
a7699 1
      witGetObj2Values, , (
d7717 1
a7717 1
      witGetObj2Values, Dbl, (
d7732 1
a7732 1
      witGetObj2Winv, , (
d7744 1
a7744 1
      witGetObj2Winv, Dbl, (
d7756 1
a7756 1
      witGetObj2Wrev, , (
d7768 1
a7768 1
      witGetObj2Wrev, Dbl, (
d7780 1
a7780 1
      witGetObj2Wserv, , (
d7792 1
a7792 1
      witGetObj2Wserv, Dbl, (
d7804 1
a7804 1
      witGetObj2Wsub, , (
d7816 1
a7816 1
      witGetObj2Wsub, Dbl, (
d7828 1
a7828 1
      witGetObjChoice, , (
d7841 1
a7841 1
      witGetOperationObj1ExecCost, , (
d7855 1
a7855 1
      witGetOperationObj1ExecCost, Dbl, (
d7869 1
a7869 1
      witGetOperationObj2AuxCost, , (
d7883 1
a7883 1
      witGetOperationObj2AuxCost, Dbl, (
d7897 1
a7897 1
      witGetOperationYield, , (
d7910 1
a7910 1
      witGetOptWithLotSizes, , (
d7923 1
a7923 1
      witGetPartBuildAheadLimit, , (
d7937 1
a7937 1
      witGetPartCycleTime, , (
d7951 1
a7951 1
      witGetPartIncLotSize, , (
d7965 1
a7965 1
      witGetPartMinLotSize, , (
d7979 1
a7979 1
      witGetPartMrpProdVol, , (
d7993 1
a7993 1
      witGetPartNBomEntries, , (
d8007 1
a8007 1
      witGetPartObj1ProdCost, , (
d8021 1
a8021 1
      witGetPartObj1ScrapCost, , (
d8035 1
a8035 1
      witGetPartObj1ScrapCost, Dbl, (
d8049 1
a8049 1
      witGetPartObj1StockCost, , (
d8063 1
a8063 1
      witGetPartObj1StockCost, Dbl, (
d8079 1
a8079 1
      witGetPartProdBounds, , (
d8095 1
a8095 1
      witGetPartPropRouting, , (
d8109 1
a8109 1
      witGetPartUnitCost, , (
d8123 1
a8123 1
      witGetPartUnitCost, Dbl, (
d8137 1
a8137 1
      witGetPartYield, , (
d8150 1
a8150 1
      witGetPeriodsPerYear, , (
d8162 1
a8162 1
      witGetPeriodsPerYear, Dbl, (
d8174 1
a8174 1
      witGetStockRealloc, , (
d8189 1
a8189 1
      witGetSubsBomEntryFallout, , (
d8207 1
a8207 1
      witGetSubsBomEntryObj2SubPenalty, , (
d8225 1
a8225 1
      witGetSubsBomEntryObj2SubPenalty, Dbl, (
d8243 1
a8243 1
      witGetSubsBomEntryProdVol, , (
d8261 1
a8261 1
      witGetSubsBomEntryUsageRate, , (
d8278 1
a8278 1
      witSetBomEntryFallout, , (
d8294 1
a8294 1
      witSetBomEntryPropRouting, , (
d8310 1
a8310 1
      witSetBomEntryUsageRate, , (
d8326 1
a8326 1
      witSetBomEntryUsageTime, , (
d8342 1
a8342 1
      witSetBopEntryByProduct, , (
d8358 1
a8358 1
      witSetBopEntryProdRate, , (
d8372 1
a8372 1
      witSetBuildWhenEmpty, , (
d8384 1
a8384 1
      witSetCapCost, , (
d8396 1
a8396 1
      witSetCapCost, Dbl, (
d8410 1
a8410 1
      witSetDemandBuildAheadLimit, , (
d8426 1
a8426 1
      witSetDemandBuildAheadUB, , (
d8442 1
a8442 1
      witSetDemandGrossRev, , (
d8458 1
a8458 1
      witSetDemandGrossRev, Dbl, (
d8474 1
a8474 1
      witSetDemandPrefBuildAhead, , (
d8490 1
a8490 1
      witSetDemandShipLateLimit, , (
d8504 1
a8504 1
      witSetInvCost, , (
d8516 1
a8516 1
      witSetInvCost, Dbl, (
d8528 1
a8528 1
      witSetLocalBuildAhead, , (
d8540 1
a8540 1
      witSetLocalMultiExec, , (
d8552 1
a8552 1
      witSetObj2Winv, , (
d8564 1
a8564 1
      witSetObj2Winv, Dbl, (
d8576 1
a8576 1
      witSetObj2Wrev, , (
d8588 1
a8588 1
      witSetObj2Wrev, Dbl, (
d8600 1
a8600 1
      witSetObj2Wserv, , (
d8612 1
a8612 1
      witSetObj2Wserv, Dbl, (
d8624 1
a8624 1
      witSetObj2Wsub, , (
d8636 1
a8636 1
      witSetObj2Wsub, Dbl, (
d8648 1
a8648 1
      witSetObjChoice, , (
d8661 1
a8661 1
      witSetOperationObj1ExecCost, , (
d8675 1
a8675 1
      witSetOperationObj1ExecCost, Dbl, (
d8689 1
a8689 1
      witSetOperationObj2AuxCost, , (
d8703 1
a8703 1
      witSetOperationObj2AuxCost, Dbl, (
d8717 1
a8717 1
      witSetOperationYield, , (
d8730 1
a8730 1
      witSetOptWithLotSizes, , (
d8743 1
a8743 1
      witSetPartBuildAheadLimit, , (
d8757 1
a8757 1
      witSetPartCycleTime, , (
d8771 1
a8771 1
      witSetPartIncLotSize, , (
d8785 1
a8785 1
      witSetPartMinLotSize, , (
d8799 1
a8799 1
      witSetPartObj1ProdCost, , (
d8813 1
a8813 1
      witSetPartObj1ScrapCost, , (
d8828 1
a8828 1
      witSetPartObj1ScrapCost, Dbl, (
d8843 1
a8843 1
      witSetPartObj1StockCost, , (
d8857 1
a8857 1
      witSetPartObj1StockCost, Dbl, (
d8873 1
a8873 1
      witSetPartProdBounds, , (
d8889 1
a8889 1
      witSetPartProdVol, , (
d8903 1
a8903 1
      witSetPartPropRouting, , (
d8917 1
a8917 1
      witSetPartUnitCost, , (
d8931 1
a8931 1
      witSetPartUnitCost, Dbl, (
d8945 1
a8945 1
      witSetPartYield, , (
d8958 1
a8958 1
      witSetPeriodsPerYear, , (
d8970 1
a8970 1
      witSetPeriodsPerYear, Dbl, (
d8982 1
a8982 1
      witSetStockRealloc, , (
d8997 1
a8997 1
      witSetSubsBomEntryFallout, , (
d9015 1
a9015 1
      witSetSubsBomEntryObj2SubPenalty, , (
d9033 1
a9033 1
      witSetSubsBomEntryObj2SubPenalty, Dbl, (
d9050 1
a9050 1
      witSetSubsBomEntryProdVol, , (
d9068 1
a9068 1
      witSetSubsBomEntryUsageRate, , (
d9084 1
a9084 1
      witWriteProdSched, , (
d9099 1
a9099 1
      witGetSolverLogFileName, , (
d9111 1
a9111 1
      witSetSolverLogFileName, , (
d9123 1
a9123 1
      witGetNonMrSelSplit, , (
d9135 1
a9135 1
      witSetNonMrSelSplit, , (
d9148 1
a9148 1
      witGetPartBaSelSplit, , (
d9162 1
a9162 1
      witSetPartBaSelSplit, , (
d9177 1
a9177 1
      witGetBopEntryMeSelSplit, , (
d9193 1
a9193 1
      witSetBopEntryMeSelSplit, , (
d9207 1
a9207 1
      witGetSrSelSplit, , (
d9219 1
a9219 1
      witSetSrSelSplit, , (
d9231 1
a9231 1
      witNoDependantWitRunVeneersIsOne, , (
d9242 1
a9242 1
      witNoDependantWitRunVeneersDecr, , (
d9253 1
a9253 1
      witNoDependantWitRunVeneersIncr, , (
d9264 1
a9264 1
      witListUnissuedMsgs, , (
d9291 1
a9291 1
      witTestFatalMesg, , (
@


1.149
log
@[multi-thread]
@
text
@d9244 1
a9244 1
      quietGroup)
d9255 1
a9255 1
      quietGroup)
@


1.148
log
@[multi-thread]
@
text
@d31 1
a31 1
// Macro STANDARD_API_IMPL (innerFunc, argList, whichGroup) 
d38 3
d54 1
a54 1
#define STANDARD_API_IMPL(innerFunc, argList, whichGroup)                      \
d62 1
a62 31
      theApiMgr->startApiFunc (#innerFunc, theApiMgr->whichGroup ());          \
                                                                               \
      theWitRun->innerFunc argList;                                            \
                                                                               \
      theApiMgr->finishApiFunc ();                                             \
      }                                                                        \
                                                                               \
   catch (WitAbortApiExc & theExc)                                             \
      {                                                                        \
      theApiMgr->handleAbortApiExc (theExc);                                   \
      }                                                                        \
                                                                               \
   return theApiMgr->apiRc ();                                                 \
   }                                                                           \

//------------------------------------------------------------------------------
// Macro STANDARD_API_IMPL_DBL (innerFunc, argList, whichGroup) 
//
// Same as STANDARD_API_IMPL, except that the name of the outer API function is
// the name of the inner API function with "Dbl" appended to the end.
//------------------------------------------------------------------------------

#define STANDARD_API_IMPL_DBL(innerFunc, argList, whichGroup)                  \
   {                                                                           \
   WitApiMgr * theApiMgr;                                                      \
                                                                               \
   theApiMgr = theWitRun->myApiMgr ();                                         \
                                                                               \
   try                                                                         \
      {                                                                        \
      theApiMgr->startApiFunc (#innerFunc "Dbl", theApiMgr->whichGroup ());    \
d92 1
a92 1
      witAddBomEntry, (
d106 1
a106 1
      witAddBopEntry, (
d120 1
a120 1
      witAddDemand, (
d133 1
a133 1
      witAddOperation, (
d146 1
a146 1
      witAddPart, (
d159 1
a159 1
      witAddPartWithOperation, (
d173 1
a173 1
      witAddSubsBomEntry, (
d186 1
a186 1
      witAdvanceObjItr, (
d201 1
a201 1
      witAppendToPipSeq, (
d218 2
a219 2
   STANDARD_API_IMPL_DBL (
      witAppendToPipSeq, (
d233 1
a233 1
      witBuildPip, (
d244 1
a244 1
      witClearPegging, (
d255 1
a255 1
      witClearPipSeq, (
d273 1
a273 1
      witCopyData, (
d320 1
a320 1
      witDisplayData, (
d337 1
a337 1
      witEqHeurAlloc, (
d358 2
a359 2
   STANDARD_API_IMPL_DBL (
      witEqHeurAlloc, (
d382 1
a382 1
      witEqHeurAllocTwme, (
d405 2
a406 2
   STANDARD_API_IMPL_DBL (
      witEqHeurAllocTwme, (
d425 1
a425 1
      witEvalObjectives, (
d438 1
a438 1
      witFinishHeurAlloc, (
d461 1
a461 1
      witGeneratePriorities, (
d473 1
a473 1
      witGetAccAfterSoftLB, (
d485 1
a485 1
      witGetAccAfterOptImp, (
d497 1
a497 1
      witGetAccelerated, (
d509 1
a509 1
      witGetAppData, (
d521 1
a521 1
      witGetAutoPriority, (
d535 1
a535 1
      witGetBomEntryAppData, (
d551 1
a551 1
      witGetBomEntryConsRate, (
d566 2
a567 2
   STANDARD_API_IMPL_DBL (
      witGetBomEntryConsRate, (
d583 1
a583 1
      witGetBomEntryEarliestPeriod, (
d599 1
a599 1
      witGetBomEntryNSubsBomEntries, (
d615 1
a615 1
      witGetBomEntryConsumedPart, (
d631 1
a631 1
      witGetBomEntryExecPenalty, (
d646 2
a647 2
   STANDARD_API_IMPL_DBL (
      witGetBomEntryExecPenalty, (
d663 1
a663 1
      witGetBomEntryFalloutRate, (
d678 2
a679 2
   STANDARD_API_IMPL_DBL (
      witGetBomEntryFalloutRate, (
d695 1
a695 1
      witGetBomEntryImpactPeriod, (
d711 1
a711 1
      witGetBomEntryLatestPeriod, (
d727 1
a727 1
      witGetBomEntryMandEC, (
d743 1
a743 1
      witGetBomEntryOffset, (
d758 2
a759 2
   STANDARD_API_IMPL_DBL (
      witGetBomEntryOffset, (
d775 1
a775 1
      witGetBomEntryPropRtg, (
d791 1
a791 1
      witGetBomEntryRoutingShare, (
d806 2
a807 2
   STANDARD_API_IMPL_DBL (
      witGetBomEntryRoutingShare, (
d823 1
a823 1
      witGetBomEntrySelForDel, (
d839 1
a839 1
      witGetBomEntrySingleSource, (
d856 1
a856 1
      witGetBopEntryAppData, (
d872 1
a872 1
      witGetBopEntryEarliestPeriod, (
d888 1
a888 1
      witGetBopEntryExpAllowed, (
d904 1
a904 1
      witGetBopEntryExpAversion, (
d919 2
a920 2
   STANDARD_API_IMPL_DBL (
      witGetBopEntryExpAversion, (
d936 1
a936 1
      witGetBopEntryImpactPeriod, (
d952 1
a952 1
      witGetBopEntryLatestPeriod, (
d968 1
a968 1
      witGetBopEntryOffset, (
d983 2
a984 2
   STANDARD_API_IMPL_DBL (
      witGetBopEntryOffset, (
d1000 1
a1000 1
      witGetBopEntryPipShare, (
d1015 2
a1016 2
   STANDARD_API_IMPL_DBL (
      witGetBopEntryPipShare, (
d1032 1
a1032 1
      witGetBopEntryProductRate, (
d1047 2
a1048 2
   STANDARD_API_IMPL_DBL (
      witGetBopEntryProductRate, (
d1064 1
a1064 1
      witGetBopEntryProducedPart, (
d1080 1
a1080 1
      witGetBopEntryRoutingShare, (
d1095 2
a1096 2
   STANDARD_API_IMPL_DBL (
      witGetBopEntryRoutingShare, (
d1112 1
a1112 1
      witGetBopEntrySelForDel, (
d1126 1
a1126 1
      witGetBuildWhenEmpty, (
d1138 1
a1138 1
      witGetCompPrices, (
d1150 1
a1150 1
      witGetComputeCriticalList, (
d1164 1
a1164 1
      witGetCriticalList, (
d1180 1
a1180 1
      witGetDemandAppData, (
d1200 1
a1200 1
      witGetDemandConsVolPip, (
d1223 2
a1224 2
   STANDARD_API_IMPL_DBL (
      witGetDemandConsVolPip, (
d1246 1
a1246 1
      witGetDemandCumShipBounds, (
d1265 2
a1266 2
   STANDARD_API_IMPL_DBL (
      witGetDemandCumShipBounds, (
d1284 1
a1284 1
      witGetDemandCumShipReward, (
d1299 2
a1300 2
   STANDARD_API_IMPL_DBL (
      witGetDemandCumShipReward, (
d1316 1
a1316 1
      witGetDemandDemandVol, (
d1331 2
a1332 2
   STANDARD_API_IMPL_DBL (
      witGetDemandDemandVol, (
d1352 1
a1352 1
      witGetDemandExecVolPegging, (
d1375 2
a1376 2
   STANDARD_API_IMPL_DBL (
      witGetDemandExecVolPegging, (
d1400 1
a1400 1
      witGetDemandExecVolPip, (
d1423 2
a1424 2
   STANDARD_API_IMPL_DBL (
      witGetDemandExecVolPip, (
d1444 1
a1444 1
      witGetDemandFocusHorizon, (
d1460 1
a1460 1
      witGetDemandFssShipVol, (
d1476 2
a1477 2
   STANDARD_API_IMPL_DBL (
      witGetDemandFssShipVol, (
d1493 1
a1493 1
      witGetDemandObj1CumShipReward, (
d1508 2
a1509 2
   STANDARD_API_IMPL_DBL (
      witGetDemandObj1CumShipReward, (
d1525 1
a1525 1
      witGetDemandObj1ShipReward, (
d1540 2
a1541 2
   STANDARD_API_IMPL_DBL (
      witGetDemandObj1ShipReward, (
d1557 1
a1557 1
      witGetDemandPriority, (
d1577 1
a1577 1
      witGetDemandProdVolPip, (
d1600 2
a1601 2
   STANDARD_API_IMPL_DBL (
      witGetDemandProdVolPip, (
d1621 1
a1621 1
      witGetDemandSelForDel, (
d1637 1
a1637 1
      witGetDemandShipLateUB, (
d1653 1
a1653 1
      witGetDemandShipReward, (
d1668 2
a1669 2
   STANDARD_API_IMPL_DBL (
      witGetDemandShipReward, (
d1685 1
a1685 1
      witGetDemandShipVol, (
d1700 2
a1701 2
   STANDARD_API_IMPL_DBL (
      witGetDemandShipVol, (
d1721 1
a1721 1
      witGetDemandSideVolPip, (
d1744 2
a1745 2
   STANDARD_API_IMPL_DBL (
      witGetDemandSideVolPip, (
d1771 1
a1771 1
      witGetDemandSubVolPegging, (
d1798 2
a1799 2
   STANDARD_API_IMPL_DBL (
      witGetDemandSubVolPegging, (
d1827 1
a1827 1
      witGetDemandSubVolPip, (
d1854 2
a1855 2
   STANDARD_API_IMPL_DBL (
      witGetDemandSubVolPip, (
d1881 1
a1881 1
      witGetDemandSupplyVolPip, (
d1904 2
a1905 2
   STANDARD_API_IMPL_DBL (
      witGetDemandSupplyVolPip, (
d1923 1
a1923 1
      witGetEquitability, (
d1935 1
a1935 1
      witGetExecEmptyBom, (
d1947 1
a1947 1
      witGetExpCutoff, (
d1958 2
a1959 2
   STANDARD_API_IMPL_DBL (
      witGetExpCutoff, (
d1971 1
a1971 1
      witGetFeasible, (
d1985 1
a1985 1
      witGetFocusShortageVol, (
d2000 2
a2001 2
   STANDARD_API_IMPL_DBL (
      witGetFocusShortageVol, (
d2015 1
a2015 1
      witGetForcedMultiEq, (
d2027 1
a2027 1
      witGetHashTableSize, (
d2039 1
a2039 1
      witGetHeurAllocActive, (
d2051 1
a2051 1
      witGetHighPrecisionWD, (
d2063 1
a2063 1
      witGetIndependentOffsets, (
d2075 1
a2075 1
      witGetLotSizeTol, (
d2086 2
a2087 2
   STANDARD_API_IMPL_DBL (
      witGetLotSizeTol, (
d2099 1
a2099 1
      witGetMesgFile, (
d2111 1
a2111 1
      witGetMesgFileAccessMode, (
d2123 1
a2123 1
      witGetMesgFileName, (
d2136 1
a2136 1
      witGetMesgPrintNumber, (
d2150 1
a2150 1
      witGetMesgStopRunning, (
d2164 1
a2164 1
      witGetMesgThrowException, (
d2178 1
a2178 1
      witGetMesgTimesPrint, (
d2191 1
a2191 1
      witGetMultiExec, (
d2203 1
a2203 1
      witGetMultiRoute, (
d2215 1
a2215 1
      witGetMultiThread, (
d2227 1
a2227 1
      witGetNPeriods, (
d2240 1
a2240 1
      witGetObjItrBomEntry, (
d2254 1
a2254 1
      witGetObjItrBopEntry, (
d2268 1
a2268 1
      witGetObjItrDemand, (
d2281 1
a2281 1
      witGetObjItrOperation, (
d2293 1
a2293 1
      witGetObjItrPart, (
d2305 1
a2305 1
      witGetObjItrState, (
d2319 1
a2319 1
      witGetObjItrSubsBomEntry, (
d2334 1
a2334 1
      witGetObjValues, (
d2347 2
a2348 2
   STANDARD_API_IMPL_DBL (
      witGetObjValues, (
d2362 1
a2362 1
      witGetOperationAppData, (
d2378 1
a2378 1
      witGetOperationExecBounds, (
d2395 2
a2396 2
   STANDARD_API_IMPL_DBL (
      witGetOperationExecBounds, (
d2412 1
a2412 1
      witGetOperationExecCost, (
d2425 2
a2426 2
   STANDARD_API_IMPL_DBL (
      witGetOperationExecCost, (
d2440 1
a2440 1
      witGetOperationExecPenalty, (
d2453 2
a2454 2
   STANDARD_API_IMPL_DBL (
      witGetOperationExecPenalty, (
d2468 1
a2468 1
      witGetOperationExecutable, (
d2482 1
a2482 1
      witGetOperationExecVol, (
d2495 2
a2496 2
   STANDARD_API_IMPL_DBL (
      witGetOperationExecVol, (
d2510 1
a2510 1
      witGetOperationExists, (
d2524 1
a2524 1
      witGetOperationFssExecVol, (
d2537 2
a2538 2
   STANDARD_API_IMPL_DBL (
      witGetOperationFssExecVol, (
d2552 1
a2552 1
      witGetOperationIncLotSize, (
d2565 2
a2566 2
   STANDARD_API_IMPL_DBL (
      witGetOperationIncLotSize, (
d2580 1
a2580 1
      witGetOperationIncLotSize2, (
d2593 2
a2594 2
   STANDARD_API_IMPL_DBL (
      witGetOperationIncLotSize2, (
d2608 1
a2608 1
      witGetOperationLotSize2Thresh, (
d2621 2
a2622 2
   STANDARD_API_IMPL_DBL (
      witGetOperationLotSize2Thresh, (
d2636 1
a2636 1
      witGetOperationMinLotSize, (
d2649 2
a2650 2
   STANDARD_API_IMPL_DBL (
      witGetOperationMinLotSize, (
d2664 1
a2664 1
      witGetOperationMinLotSize2, (
d2677 2
a2678 2
   STANDARD_API_IMPL_DBL (
      witGetOperationMinLotSize2, (
d2692 1
a2692 1
      witGetOperationMrpExecVol, (
d2705 2
a2706 2
   STANDARD_API_IMPL_DBL (
      witGetOperationMrpExecVol, (
d2709 1
d2721 1
a2721 1
      witGetOperationNBomEntries, (
d2735 1
a2735 1
      witGetOperationNBopEntries, (
d2749 1
a2749 1
      witGetOperations, (
d2763 1
a2763 1
      witGetOperationSelForDel, (
d2777 1
a2777 1
      witGetOperationTwoLevelLotSizes, (
d2791 1
a2791 1
      witGetOperationYieldRate, (
d2804 2
a2805 2
   STANDARD_API_IMPL_DBL (
      witGetOperationYieldRate, (
d2818 1
a2818 1
      witGetOptInitMethod, (
d2830 1
a2830 1
      witGetOslMesgFileName, (
d2842 1
a2842 1
      witGetOutputPrecision, (
d2854 1
a2854 1
      witGetPostprocessed, (
d2867 1
a2867 1
      witGetPartAppData, (
d2882 1
a2882 1
      witGetPartBelowList, (
d2897 1
a2897 1
      witGetPartBuildAheadUB, (
d2911 1
a2911 1
      witGetPartBuildAsap, (
d2925 1
a2925 1
      witGetPartBuildNstn, (
d2939 1
a2939 1
      witGetPartConsVol, (
d2952 2
a2953 2
   STANDARD_API_IMPL_DBL (
      witGetPartConsVol, (
d2969 1
a2969 1
      witGetPartConsumingBomEntry, (
d2988 1
a2988 1
      witGetPartConsumingSubsBomEntry, (
d3006 1
a3006 1
      witGetPartDemands, (
d3021 1
a3021 1
      witGetPartCategory, (
d3035 1
a3035 1
      witGetPartExcessVol, (
d3048 2
a3049 2
   STANDARD_API_IMPL_DBL (
      witGetPartExcessVol, (
d3063 1
a3063 1
      witGetPartExists, (
d3077 1
a3077 1
      witGetPartFocusShortageVol, (
d3090 2
a3091 2
   STANDARD_API_IMPL_DBL (
      witGetPartFocusShortageVol, (
d3105 1
a3105 1
      witGetPartMrpConsVol, (
d3118 2
a3119 2
   STANDARD_API_IMPL_DBL (
      witGetPartMrpConsVol, (
d3133 1
a3133 1
      witGetPartMrpExcessVol, (
d3146 2
a3147 2
   STANDARD_API_IMPL_DBL (
      witGetPartMrpExcessVol, (
d3161 1
a3161 1
      witGetPartMrpResidualVol, (
d3174 2
a3175 2
   STANDARD_API_IMPL_DBL (
      witGetPartMrpResidualVol, (
d3189 1
a3189 1
      witGetPartNConsumingBomEntries, (
d3203 1
a3203 1
      witGetPartNConsumingSubsBomEntries, (
d3217 1
a3217 1
      witGetPartNProducingBopEntries, (
d3231 1
a3231 1
      witGetPartProdVol, (
d3244 2
a3245 2
   STANDARD_API_IMPL_DBL (
      witGetPartProdVol, (
d3261 1
a3261 1
      witGetPartProducingBopEntry, (
d3277 1
a3277 1
      witGetPartPropRtg, (
d3291 1
a3291 1
      witGetPartReqVol, (
d3304 2
a3305 2
   STANDARD_API_IMPL_DBL (
      witGetPartReqVol, (
d3319 1
a3319 1
      witGetPartResidualVol, (
d3332 2
a3333 2
   STANDARD_API_IMPL_DBL (
      witGetPartResidualVol, (
d3347 1
a3347 1
      witGetParts, (
d3361 1
a3361 1
      witGetPartScrapCost, (
d3374 2
a3375 2
   STANDARD_API_IMPL_DBL (
      witGetPartScrapCost, (
d3389 1
a3389 1
      witGetPartScrapVol, (
d3402 2
a3403 2
   STANDARD_API_IMPL_DBL (
      witGetPartScrapVol, (
d3417 1
a3417 1
      witGetPartSelForDel, (
d3431 1
a3431 1
      witGetPartShadowPrice, (
d3444 2
a3445 2
   STANDARD_API_IMPL_DBL (
      witGetPartShadowPrice, (
d3459 1
a3459 1
      witGetPartSingleSource, (
d3475 1
a3475 1
      witGetPartStockBounds, (
d3492 2
a3493 2
   STANDARD_API_IMPL_DBL (
      witGetPartStockBounds, (
d3509 1
a3509 1
      witGetPartStockCost, (
d3522 2
a3523 2
   STANDARD_API_IMPL_DBL (
      witGetPartStockCost, (
d3537 1
a3537 1
      witGetPartStockVol, (
d3550 2
a3551 2
   STANDARD_API_IMPL_DBL (
      witGetPartStockVol, (
d3565 1
a3565 1
      witGetPartSupplyVol, (
d3578 2
a3579 2
   STANDARD_API_IMPL_DBL (
      witGetPartSupplyVol, (
d3592 1
a3592 1
      witGetPenExec, (
d3604 1
a3604 1
      witGetPipExists, (
d3620 1
a3620 1
      witGetPipSeq, (
d3639 2
a3640 2
   STANDARD_API_IMPL_DBL (
      witGetPipSeq, (
d3656 1
a3656 1
      witGetPipSeqFromHeur, (
d3668 1
a3668 1
      witGetPerfPegging, (
d3685 1
a3685 1
      witGetPgdCritList, (
d3702 1
a3702 1
      witGetPgdCritListMode, (
d3714 1
a3714 1
      witGetPostSolveRecovery, (
d3726 1
a3726 1
      witGetPrefHighStockSLBs, (
d3738 1
a3738 1
      witGetPreprocessed, (
d3750 1
a3750 1
      witGetRespectStockSLBs, (
d3762 1
a3762 1
      witGetRoundReqVols, (
d3774 1
a3774 1
      witGetSelSplit, (
d3786 1
a3786 1
      witGetSkipFailures, (
d3798 1
a3798 1
      witGetStockReallocation, (
d3813 1
a3813 1
      witGetSubsBomEntryAppData, (
d3831 1
a3831 1
      witGetSubsBomEntryConsRate, (
d3848 2
a3849 2
   STANDARD_API_IMPL_DBL (
      witGetSubsBomEntryConsRate, (
d3867 1
a3867 1
      witGetSubsBomEntryConsumedPart, (
d3885 1
a3885 1
      witGetSubsBomEntryEarliestPeriod, (
d3903 1
a3903 1
      witGetSubsBomEntryExecPenalty, (
d3920 2
a3921 2
   STANDARD_API_IMPL_DBL (
      witGetSubsBomEntryExecPenalty, (
d3939 1
a3939 1
      witGetSubsBomEntryExpAllowed, (
d3957 1
a3957 1
      witGetSubsBomEntryExpNetAversion, (
d3974 2
a3975 2
   STANDARD_API_IMPL_DBL (
      witGetSubsBomEntryExpNetAversion, (
d3993 1
a3993 1
      witGetSubsBomEntryFalloutRate, (
d4010 2
a4011 2
   STANDARD_API_IMPL_DBL (
      witGetSubsBomEntryFalloutRate, (
d4029 1
a4029 1
      witGetSubsBomEntryFssSubVol, (
d4046 2
a4047 2
   STANDARD_API_IMPL_DBL (
      witGetSubsBomEntryFssSubVol, (
d4065 1
a4065 1
      witGetSubsBomEntryImpactPeriod, (
d4083 1
a4083 1
      witGetSubsBomEntryLatestPeriod, (
d4101 1
a4101 1
      witGetSubsBomEntryMrpNetAllowed, (
d4119 1
a4119 1
      witGetSubsBomEntryMrpSubVol, (
d4136 2
a4137 2
   STANDARD_API_IMPL_DBL (
      witGetSubsBomEntryMrpSubVol, (
d4155 1
a4155 1
      witGetSubsBomEntryNetAllowed, (
d4173 1
a4173 1
      witGetSubsBomEntryObj1SubCost, (
d4190 2
a4191 2
   STANDARD_API_IMPL_DBL (
      witGetSubsBomEntryObj1SubCost, (
d4209 1
a4209 1
      witGetSubsBomEntryOffset, (
d4226 2
a4227 2
   STANDARD_API_IMPL_DBL (
      witGetSubsBomEntryOffset, (
d4245 1
a4245 1
      witGetSubsBomEntryRoutingShare, (
d4262 2
a4263 2
   STANDARD_API_IMPL_DBL (
      witGetSubsBomEntryRoutingShare, (
d4281 1
a4281 1
      witGetSubsBomEntrySelForDel, (
d4299 1
a4299 1
      witGetSubsBomEntrySubCost, (
d4316 2
a4317 2
   STANDARD_API_IMPL_DBL (
      witGetSubsBomEntrySubCost, (
d4335 1
a4335 1
      witGetSubsBomEntrySubVol, (
d4352 2
a4353 2
   STANDARD_API_IMPL_DBL (
      witGetSubsBomEntrySubVol, (
d4368 1
a4368 1
      witGetTieBreakPropRt, (
d4380 1
a4380 1
      witGetTitle, (
d4392 1
a4392 1
      witGetTruncOffsets, (
d4404 1
a4404 1
      witGetTwoWayMultiExec, (
d4416 1
a4416 1
      witGetUseFocusHorizons, (
d4428 1
a4428 1
      witGetUserHeurStart, (
d4440 1
a4440 1
      witGetWbounds, (
d4451 2
a4452 2
   STANDARD_API_IMPL_DBL (
      witGetWbounds, (
d4464 1
a4464 1
      witGetWit34Compatible, (
d4475 1
a4475 1
      witHeurImplode, (
d4491 1
a4491 1
      witIncHeurAlloc, (
d4510 2
a4511 2
   STANDARD_API_IMPL_DBL (
      witIncHeurAlloc, (
d4532 1
a4532 1
      witIncHeurAllocTwme, (
d4553 2
a4554 2
   STANDARD_API_IMPL_DBL (
      witIncHeurAllocTwme, (
d4570 1
a4570 1
      witInitialize, (
d4581 1
a4581 1
      witMrp, (
d4606 1
a4606 1
      witNewRun, (
d4619 1
a4619 1
      witOptImplode, (
d4630 1
a4630 1
      witOptPreprocess, (
d4643 1
a4643 1
      witPreprocess, (
d4654 1
a4654 1
      witPostprocess, (
d4665 1
a4665 1
      witPurgeData, (
d4677 1
a4677 1
      witReadData, (
d4688 1
a4688 1
      witResetObjItr, (
d4700 1
a4700 1
      witSetAccAfterSoftLB, (
d4712 1
a4712 1
      witSetAccAfterOptImp, (
d4724 1
a4724 1
      witSetAppData, (
d4736 1
a4736 1
      witSetAutoPriority, (
d4750 1
a4750 1
      witSetBomEntryAppData, (
d4766 1
a4766 1
      witSetBomEntryConsRate, (
d4781 2
a4782 2
   STANDARD_API_IMPL_DBL (
      witSetBomEntryConsRate, (
d4798 1
a4798 1
      witSetBomEntryEarliestPeriod, (
d4814 1
a4814 1
      witSetBomEntryExecPenalty, (
d4829 2
a4830 2
   STANDARD_API_IMPL_DBL (
      witSetBomEntryExecPenalty, (
d4846 1
a4846 1
      witSetBomEntryFalloutRate, (
d4861 2
a4862 2
   STANDARD_API_IMPL_DBL (
      witSetBomEntryFalloutRate, (
d4878 1
a4878 1
      witSetBomEntryLatestPeriod, (
d4894 1
a4894 1
      witSetBomEntryMandEC, (
d4910 1
a4910 1
      witSetBomEntryOffset, (
d4925 2
a4926 2
   STANDARD_API_IMPL_DBL (
      witSetBomEntryOffset, (
d4942 1
a4942 1
      witSetBomEntryPropRtg, (
d4958 1
a4958 1
      witSetBomEntryRoutingShare, (
d4973 2
a4974 2
   STANDARD_API_IMPL_DBL (
      witSetBomEntryRoutingShare, (
d4990 1
a4990 1
      witSetBomEntrySelForDel, (
d5006 1
a5006 1
      witSetBomEntrySingleSource, (
d5022 1
a5022 1
      witSetBopEntryAppData, (
d5038 1
a5038 1
      witSetBopEntryEarliestPeriod, (
d5054 1
a5054 1
      witSetBopEntryExpAllowed, (
d5070 1
a5070 1
      witSetBopEntryExpAversion, (
d5085 2
a5086 2
   STANDARD_API_IMPL_DBL (
      witSetBopEntryExpAversion, (
d5102 1
a5102 1
      witSetBopEntryLatestPeriod, (
d5118 1
a5118 1
      witSetBopEntryOffset, (
d5133 2
a5134 2
   STANDARD_API_IMPL_DBL (
      witSetBopEntryOffset, (
d5150 1
a5150 1
      witSetBopEntryPipShare, (
d5165 2
a5166 2
   STANDARD_API_IMPL_DBL (
      witSetBopEntryPipShare, (
d5182 1
a5182 1
      witSetBopEntryProductRate, (
d5197 2
a5198 2
   STANDARD_API_IMPL_DBL (
      witSetBopEntryProductRate, (
d5214 1
a5214 1
      witSetBopEntryRoutingShare, (
d5229 2
a5230 2
   STANDARD_API_IMPL_DBL (
      witSetBopEntryRoutingShare, (
d5246 1
a5246 1
      witSetBopEntrySelForDel, (
d5260 1
a5260 1
      witSetCompPrices, (
d5272 1
a5272 1
      witSetComputeCriticalList, (
d5286 1
a5286 1
      witSetDemandAppData, (
d5304 1
a5304 1
      witSetDemandCumShipBounds, (
d5323 2
a5324 2
   STANDARD_API_IMPL_DBL (
      witSetDemandCumShipBounds, (
d5342 1
a5342 1
      witSetDemandCumShipReward, (
d5357 2
a5358 2
   STANDARD_API_IMPL_DBL (
      witSetDemandCumShipReward, (
d5374 1
a5374 1
      witSetDemandDemandVol, (
d5389 2
a5390 2
   STANDARD_API_IMPL_DBL (
      witSetDemandDemandVol, (
d5406 1
a5406 1
      witSetDemandFocusHorizon, (
d5422 1
a5422 1
      witSetDemandFssShipVol, (
d5437 2
a5438 2
   STANDARD_API_IMPL_DBL (
      witSetDemandFssShipVol, (
d5454 1
a5454 1
      witSetDemandObj1CumShipReward, (
d5469 2
a5470 2
   STANDARD_API_IMPL_DBL (
      witSetDemandObj1CumShipReward, (
d5486 1
a5486 1
      witSetDemandObj1ShipReward, (
d5501 2
a5502 2
   STANDARD_API_IMPL_DBL (
      witSetDemandObj1ShipReward, (
d5518 1
a5518 1
      witSetDemandPriority, (
d5534 1
a5534 1
      witSetDemandSelForDel, (
d5550 1
a5550 1
      witSetDemandShipLateUB, (
d5566 1
a5566 1
      witSetDemandShipReward, (
d5581 2
a5582 2
   STANDARD_API_IMPL_DBL (
      witSetDemandShipReward, (
d5598 1
a5598 1
      witSetDemandShipVol, (
d5613 2
a5614 2
   STANDARD_API_IMPL_DBL (
      witSetDemandShipVol, (
d5628 1
a5628 1
      witSetEquitability, (
d5640 1
a5640 1
      witSetExecEmptyBom, (
d5652 1
a5652 1
      witSetExpCutoff, (
d5663 2
a5664 2
   STANDARD_API_IMPL_DBL (
      witSetExpCutoff, (
d5676 1
a5676 1
      witSetForcedMultiEq, (
d5688 1
a5688 1
      witSetHashTableSize, (
d5700 1
a5700 1
      witSetHighPrecisionWD, (
d5712 1
a5712 1
      witSetIndependentOffsets, (
d5724 1
a5724 1
      witSetLotSizeTol, (
d5735 2
a5736 2
   STANDARD_API_IMPL_DBL (
      witSetLotSizeTol, (
d5749 1
a5749 1
      witSetMesgFileAccessMode, (
d5763 1
a5763 1
      witSetMesgFileName, (
d5778 1
a5778 1
      witSetMesgPrintNumber, (
d5794 1
a5794 1
      witSetMesgStopRunning, (
d5810 1
a5810 1
      witSetMesgThrowException, (
d5826 1
a5826 1
      witSetMesgTimesPrint, (
d5840 1
a5840 1
      witSetMultiExec, (
d5852 1
a5852 1
      witSetMultiRoute, (
d5863 1
a5863 1
      witSetMultiThread, (
d5875 1
a5875 1
      witSetNPeriods, (
d5887 1
a5887 1
      witSetOslMesgFileName, (
d5900 1
a5900 1
      witSetOperationAppData, (
d5916 1
a5916 1
      witSetOperationExecBounds, (
d5933 2
a5934 2
   STANDARD_API_IMPL_DBL (
      witSetOperationExecBounds, (
d5950 1
a5950 1
      witSetOperationExecCost, (
d5963 2
a5964 2
   STANDARD_API_IMPL_DBL (
      witSetOperationExecCost, (
d5978 1
a5978 1
      witSetOperationExecPenalty, (
d5991 2
a5992 2
   STANDARD_API_IMPL_DBL (
      witSetOperationExecPenalty, (
d6006 1
a6006 1
      witSetOperationExecVol, (
d6019 2
a6020 2
   STANDARD_API_IMPL_DBL (
      witSetOperationExecVol, (
d6034 1
a6034 1
      witSetOperationIncLotSize, (
d6047 2
a6048 2
   STANDARD_API_IMPL_DBL (
      witSetOperationIncLotSize, (
d6062 1
a6062 1
      witSetOperationIncLotSize2, (
d6075 2
a6076 2
   STANDARD_API_IMPL_DBL (
      witSetOperationIncLotSize2, (
d6090 1
a6090 1
      witSetOperationLotSize2Thresh, (
d6103 2
a6104 2
   STANDARD_API_IMPL_DBL (
      witSetOperationLotSize2Thresh, (
d6118 1
a6118 1
      witSetOperationMinLotSize, (
d6131 2
a6132 2
   STANDARD_API_IMPL_DBL (
      witSetOperationMinLotSize, (
d6146 1
a6146 1
      witSetOperationMinLotSize2, (
d6159 2
a6160 2
   STANDARD_API_IMPL_DBL (
      witSetOperationMinLotSize2, (
d6174 1
a6174 1
      witSetOperationSelForDel, (
d6188 1
a6188 1
      witSetOperationTwoLevelLotSizes, (
d6202 1
a6202 1
      witSetOperationYieldRate, (
d6215 2
a6216 2
   STANDARD_API_IMPL_DBL (
      witSetOperationYieldRate, (
d6229 1
a6229 1
      witSetOptInitMethod, (
d6241 1
a6241 1
      witSetOutputPrecision, (
d6254 1
a6254 1
      witSetPartAppData, (
d6268 1
a6268 1
      witSetPartBuildAheadUB, (
d6282 1
a6282 1
      witSetPartBuildAsap, (
d6296 1
a6296 1
      witSetPartBuildNstn, (
d6310 1
a6310 1
      witSetPartPropRtg, (
d6324 1
a6324 1
      witSetPartScrapCost, (
d6338 2
a6339 2
   STANDARD_API_IMPL_DBL (
      witSetPartScrapCost, (
d6354 1
a6354 1
      witSetPartSelForDel, (
d6368 1
a6368 1
      witSetPartSingleSource, (
d6384 1
a6384 1
      witSetPartStockBounds, (
d6401 2
a6402 2
   STANDARD_API_IMPL_DBL (
      witSetPartStockBounds, (
d6418 1
a6418 1
      witSetPartStockCost, (
d6431 2
a6432 2
   STANDARD_API_IMPL_DBL (
      witSetPartStockCost, (
d6446 1
a6446 1
      witSetPartSupplyVol, (
d6459 2
a6460 2
   STANDARD_API_IMPL_DBL (
      witSetPartSupplyVol, (
d6473 1
a6473 1
      witSetPenExec, (
d6485 1
a6485 1
      witSetPerfPegging, (
d6497 1
a6497 1
      witSetPgdCritListMode, (
d6509 1
a6509 1
      witSetPipSeqFromHeur, (
d6521 1
a6521 1
      witSetPostSolveRecovery, (
d6533 1
a6533 1
      witSetPrefHighStockSLBs, (
d6545 1
a6545 1
      witSetRespectStockSLBs, (
d6557 1
a6557 1
      witSetRoundReqVols, (
d6569 1
a6569 1
      witSetSelSplit, (
d6581 1
a6581 1
      witSetSkipFailures, (
d6593 1
a6593 1
      witSetStockReallocation, (
d6608 1
a6608 1
      witSetSubsBomEntryAppData, (
d6626 1
a6626 1
      witSetSubsBomEntryConsRate, (
d6643 2
a6644 2
   STANDARD_API_IMPL_DBL (
      witSetSubsBomEntryConsRate, (
d6662 1
a6662 1
      witSetSubsBomEntryEarliestPeriod, (
d6680 1
a6680 1
      witSetSubsBomEntryExecPenalty, (
d6697 2
a6698 2
   STANDARD_API_IMPL_DBL (
      witSetSubsBomEntryExecPenalty, (
d6716 1
a6716 1
      witSetSubsBomEntryExpAllowed, (
d6734 1
a6734 1
      witSetSubsBomEntryExpNetAversion, (
d6751 2
a6752 2
   STANDARD_API_IMPL_DBL (
      witSetSubsBomEntryExpNetAversion, (
d6770 1
a6770 1
      witSetSubsBomEntryFalloutRate, (
d6787 2
a6788 2
   STANDARD_API_IMPL_DBL (
      witSetSubsBomEntryFalloutRate, (
d6806 1
a6806 1
      witSetSubsBomEntryLatestPeriod, (
d6824 1
a6824 1
      witSetSubsBomEntryMrpNetAllowed, (
d6842 1
a6842 1
      witSetSubsBomEntryNetAllowed, (
d6860 1
a6860 1
      witSetSubsBomEntryObj1SubCost, (
d6877 2
a6878 2
   STANDARD_API_IMPL_DBL (
      witSetSubsBomEntryObj1SubCost, (
d6896 1
a6896 1
      witSetSubsBomEntryOffset, (
d6913 2
a6914 2
   STANDARD_API_IMPL_DBL (
      witSetSubsBomEntryOffset, (
d6932 1
a6932 1
      witSetSubsBomEntryRoutingShare, (
d6949 2
a6950 2
   STANDARD_API_IMPL_DBL (
      witSetSubsBomEntryRoutingShare, (
d6968 1
a6968 1
      witSetSubsBomEntrySelForDel, (
d6986 1
a6986 1
      witSetSubsBomEntrySubCost, (
d7003 2
a7004 2
   STANDARD_API_IMPL_DBL (
      witSetSubsBomEntrySubCost, (
d7022 1
a7022 1
      witSetSubsBomEntrySubVol, (
d7039 2
a7040 2
   STANDARD_API_IMPL_DBL (
      witSetSubsBomEntrySubVol, (
d7055 1
a7055 1
      witSetTieBreakPropRt, (
d7067 1
a7067 1
      witSetTitle, (
d7079 1
a7079 1
      witSetTruncOffsets, (
d7091 1
a7091 1
      witSetTwoWayMultiExec, (
d7103 1
a7103 1
      witSetUseFocusHorizons, (
d7115 1
a7115 1
      witSetUserHeurStart, (
d7127 1
a7127 1
      witSetWbounds, (
d7138 2
a7139 2
   STANDARD_API_IMPL_DBL (
      witSetWbounds, (
d7151 1
a7151 1
      witSetWit34Compatible, (
d7162 1
a7162 1
      witShutDownHeurAlloc, (
d7173 1
a7173 1
      witStartHeurAlloc, (
d7187 1
a7187 1
      witWriteCriticalList, (
d7201 1
a7201 1
      witWriteData, (
d7214 1
a7214 1
      witWriteExecSched, (
d7228 1
a7228 1
      witWriteReqSched, (
d7242 1
a7242 1
      witWriteShipSched, (
d7434 1
a7434 1
      witGetBomEntryFallout, (
d7450 1
a7450 1
      witGetBomEntryPropRouting, (
d7466 1
a7466 1
      witGetBomEntryUsageRate, (
d7482 1
a7482 1
      witGetBomEntryUsageTime, (
d7498 1
a7498 1
      witGetBopEntryByProduct, (
d7514 1
a7514 1
      witGetBopEntryProdRate, (
d7528 1
a7528 1
      witGetCapCost, (
d7539 2
a7540 2
   STANDARD_API_IMPL_DBL (
      witGetCapCost, (
d7554 1
a7554 1
      witGetDemandBuildAheadLimit, (
d7570 1
a7570 1
      witGetDemandBuildAheadUB, (
d7586 1
a7586 1
      witGetDemandGrossRev, (
d7601 2
a7602 2
   STANDARD_API_IMPL_DBL (
      witGetDemandGrossRev, (
d7618 1
a7618 1
      witGetDemandPrefBuildAhead, (
d7634 1
a7634 1
      witGetDemandShipLateLimit, (
d7648 1
a7648 1
      witGetInvCost, (
d7659 2
a7660 2
   STANDARD_API_IMPL_DBL (
      witGetInvCost, (
d7672 1
a7672 1
      witGetLocalBuildAhead, (
d7684 1
a7684 1
      witGetLocalMultiExec, (
d7699 1
a7699 1
      witGetObj2Values, (
d7716 2
a7717 2
   STANDARD_API_IMPL_DBL (
      witGetObj2Values, (
d7732 1
a7732 1
      witGetObj2Winv, (
d7743 2
a7744 2
   STANDARD_API_IMPL_DBL (
      witGetObj2Winv, (
d7756 1
a7756 1
      witGetObj2Wrev, (
d7767 2
a7768 2
   STANDARD_API_IMPL_DBL (
      witGetObj2Wrev, (
d7780 1
a7780 1
      witGetObj2Wserv, (
d7791 2
a7792 2
   STANDARD_API_IMPL_DBL (
      witGetObj2Wserv, (
d7804 1
a7804 1
      witGetObj2Wsub, (
d7815 2
a7816 2
   STANDARD_API_IMPL_DBL (
      witGetObj2Wsub, (
d7828 1
a7828 1
      witGetObjChoice, (
d7841 1
a7841 1
      witGetOperationObj1ExecCost, (
d7854 2
a7855 2
   STANDARD_API_IMPL_DBL (
      witGetOperationObj1ExecCost, (
d7869 1
a7869 1
      witGetOperationObj2AuxCost, (
d7882 2
a7883 2
   STANDARD_API_IMPL_DBL (
      witGetOperationObj2AuxCost, (
d7897 1
a7897 1
      witGetOperationYield, (
d7910 1
a7910 1
      witGetOptWithLotSizes, (
d7923 1
a7923 1
      witGetPartBuildAheadLimit, (
d7937 1
a7937 1
      witGetPartCycleTime, (
d7951 1
a7951 1
      witGetPartIncLotSize, (
d7965 1
a7965 1
      witGetPartMinLotSize, (
d7979 1
a7979 1
      witGetPartMrpProdVol, (
d7993 1
a7993 1
      witGetPartNBomEntries, (
d8007 1
a8007 1
      witGetPartObj1ProdCost, (
d8021 1
a8021 1
      witGetPartObj1ScrapCost, (
d8034 2
a8035 2
   STANDARD_API_IMPL_DBL (
      witGetPartObj1ScrapCost, (
d8049 1
a8049 1
      witGetPartObj1StockCost, (
d8062 2
a8063 2
   STANDARD_API_IMPL_DBL (
      witGetPartObj1StockCost, (
d8079 1
a8079 1
      witGetPartProdBounds, (
d8095 1
a8095 1
      witGetPartPropRouting, (
d8109 1
a8109 1
      witGetPartUnitCost, (
d8122 2
a8123 2
   STANDARD_API_IMPL_DBL (
      witGetPartUnitCost, (
d8137 1
a8137 1
      witGetPartYield, (
d8150 1
a8150 1
      witGetPeriodsPerYear, (
d8161 2
a8162 2
   STANDARD_API_IMPL_DBL (
      witGetPeriodsPerYear, (
d8174 1
a8174 1
      witGetStockRealloc, (
d8189 1
a8189 1
      witGetSubsBomEntryFallout, (
d8207 1
a8207 1
      witGetSubsBomEntryObj2SubPenalty, (
d8224 2
a8225 2
   STANDARD_API_IMPL_DBL (
      witGetSubsBomEntryObj2SubPenalty, (
d8243 1
a8243 1
      witGetSubsBomEntryProdVol, (
d8261 1
a8261 1
      witGetSubsBomEntryUsageRate, (
d8278 1
a8278 1
      witSetBomEntryFallout, (
d8294 1
a8294 1
      witSetBomEntryPropRouting, (
d8310 1
a8310 1
      witSetBomEntryUsageRate, (
d8326 1
a8326 1
      witSetBomEntryUsageTime, (
d8342 1
a8342 1
      witSetBopEntryByProduct, (
d8358 1
a8358 1
      witSetBopEntryProdRate, (
d8372 1
a8372 1
      witSetBuildWhenEmpty, (
d8384 1
a8384 1
      witSetCapCost, (
d8395 2
a8396 2
   STANDARD_API_IMPL_DBL (
      witSetCapCost, (
d8410 1
a8410 1
      witSetDemandBuildAheadLimit, (
d8426 1
a8426 1
      witSetDemandBuildAheadUB, (
d8442 1
a8442 1
      witSetDemandGrossRev, (
d8457 2
a8458 2
   STANDARD_API_IMPL_DBL (
      witSetDemandGrossRev, (
d8474 1
a8474 1
      witSetDemandPrefBuildAhead, (
d8490 1
a8490 1
      witSetDemandShipLateLimit, (
d8504 1
a8504 1
      witSetInvCost, (
d8515 2
a8516 2
   STANDARD_API_IMPL_DBL (
      witSetInvCost, (
d8528 1
a8528 1
      witSetLocalBuildAhead, (
d8540 1
a8540 1
      witSetLocalMultiExec, (
d8552 1
a8552 1
      witSetObj2Winv, (
d8563 2
a8564 2
   STANDARD_API_IMPL_DBL (
      witSetObj2Winv, (
d8576 1
a8576 1
      witSetObj2Wrev, (
d8587 2
a8588 2
   STANDARD_API_IMPL_DBL (
      witSetObj2Wrev, (
d8600 1
a8600 1
      witSetObj2Wserv, (
d8611 2
a8612 2
   STANDARD_API_IMPL_DBL (
      witSetObj2Wserv, (
d8624 1
a8624 1
      witSetObj2Wsub, (
d8635 2
a8636 2
   STANDARD_API_IMPL_DBL (
      witSetObj2Wsub, (
d8648 1
a8648 1
      witSetObjChoice, (
d8661 1
a8661 1
      witSetOperationObj1ExecCost, (
d8674 2
a8675 2
   STANDARD_API_IMPL_DBL (
      witSetOperationObj1ExecCost, (
d8689 1
a8689 1
      witSetOperationObj2AuxCost, (
d8702 2
a8703 2
   STANDARD_API_IMPL_DBL (
      witSetOperationObj2AuxCost, (
d8717 1
a8717 1
      witSetOperationYield, (
d8730 1
a8730 1
      witSetOptWithLotSizes, (
d8743 1
a8743 1
      witSetPartBuildAheadLimit, (
d8757 1
a8757 1
      witSetPartCycleTime, (
d8771 1
a8771 1
      witSetPartIncLotSize, (
d8785 1
a8785 1
      witSetPartMinLotSize, (
d8799 1
a8799 1
      witSetPartObj1ProdCost, (
d8813 1
a8813 1
      witSetPartObj1ScrapCost, (
d8827 2
a8828 2
   STANDARD_API_IMPL_DBL (
      witSetPartObj1ScrapCost, (
d8843 1
a8843 1
      witSetPartObj1StockCost, (
d8856 2
a8857 2
   STANDARD_API_IMPL_DBL (
      witSetPartObj1StockCost, (
d8873 1
a8873 1
      witSetPartProdBounds, (
d8889 1
a8889 1
      witSetPartProdVol, (
d8903 1
a8903 1
      witSetPartPropRouting, (
d8917 1
a8917 1
      witSetPartUnitCost, (
d8930 2
a8931 2
   STANDARD_API_IMPL_DBL (
      witSetPartUnitCost, (
d8945 1
a8945 1
      witSetPartYield, (
d8958 1
a8958 1
      witSetPeriodsPerYear, (
d8969 2
a8970 2
   STANDARD_API_IMPL_DBL (
      witSetPeriodsPerYear, (
d8982 1
a8982 1
      witSetStockRealloc, (
d8997 1
a8997 1
      witSetSubsBomEntryFallout, (
d9015 1
a9015 1
      witSetSubsBomEntryObj2SubPenalty, (
d9032 2
a9033 2
   STANDARD_API_IMPL_DBL (
      witSetSubsBomEntryObj2SubPenalty, (
d9050 1
a9050 1
      witSetSubsBomEntryProdVol, (
d9068 1
a9068 1
      witSetSubsBomEntryUsageRate, (
d9084 1
a9084 1
      witWriteProdSched, (
d9099 1
a9099 1
      witGetSolverLogFileName, (
d9111 1
a9111 1
      witSetSolverLogFileName, (
d9123 1
a9123 1
      witGetNonMrSelSplit, (
d9135 1
a9135 1
      witSetNonMrSelSplit, (
d9148 1
a9148 1
      witGetPartBaSelSplit, (
d9162 1
a9162 1
      witSetPartBaSelSplit, (
d9177 1
a9177 1
      witGetBopEntryMeSelSplit, (
d9193 1
a9193 1
      witSetBopEntryMeSelSplit, (
d9207 1
a9207 1
      witGetSrSelSplit, (
d9219 1
a9219 1
      witSetSrSelSplit, (
d9231 1
a9231 1
      witNoDependantWitRunVeneersIsOne, (
d9242 1
a9242 1
      witNoDependantWitRunVeneersDecr, (
d9253 1
a9253 1
      witNoDependantWitRunVeneersIncr, (
d9264 1
a9264 1
      witListUnissuedMsgs, (
d9291 1
a9291 1
      witTestFatalMesg, (
@


1.147
log
@[multi-thread]
@
text
@d75 30
d245 1
a245 1
   STANDARD_API_IMPL (
d251 1
a251 1
      doubleGroup)
d385 1
a385 1
   STANDARD_API_IMPL (
d393 1
a393 1
      doubleGroup)
d432 1
a432 1
   STANDARD_API_IMPL (
d441 1
a441 1
      doubleGroup)
d593 1
a593 1
   STANDARD_API_IMPL (
d598 1
a598 1
      doubleGroup)
d673 1
a673 1
   STANDARD_API_IMPL (
d678 1
a678 1
      doubleGroup)
d705 1
a705 1
   STANDARD_API_IMPL (
d710 1
a710 1
      doubleGroup)
d785 1
a785 1
   STANDARD_API_IMPL (
d790 1
a790 1
      doubleGroup)
d833 1
a833 1
   STANDARD_API_IMPL (
d838 1
a838 1
      doubleGroup)
d946 1
a946 1
   STANDARD_API_IMPL (
d951 1
a951 1
      doubleGroup)
d1010 1
a1010 1
   STANDARD_API_IMPL (
d1015 1
a1015 1
      doubleGroup)
d1042 1
a1042 1
   STANDARD_API_IMPL (
d1047 1
a1047 1
      doubleGroup)
d1074 1
a1074 1
   STANDARD_API_IMPL (
d1079 1
a1079 1
      doubleGroup)
d1122 1
a1122 1
   STANDARD_API_IMPL (
d1127 1
a1127 1
      doubleGroup)
d1250 1
a1250 1
   STANDARD_API_IMPL (
d1259 1
a1259 1
      doubleGroup)
d1292 1
a1292 1
   STANDARD_API_IMPL (
d1299 1
a1299 1
      doubleGroup)
d1326 1
a1326 1
   STANDARD_API_IMPL (
d1331 1
a1331 1
      doubleGroup)
d1358 1
a1358 1
   STANDARD_API_IMPL (
d1363 1
a1363 1
      doubleGroup)
d1402 1
a1402 1
   STANDARD_API_IMPL (
d1411 1
a1411 1
      doubleGroup)
d1450 1
a1450 1
   STANDARD_API_IMPL (
d1459 1
a1459 1
      doubleGroup)
d1496 1
d1503 1
a1503 1
   STANDARD_API_IMPL (
d1508 1
a1508 1
      doubleGroup)
d1535 1
a1535 1
   STANDARD_API_IMPL (
d1540 1
a1540 1
      doubleGroup)
d1567 1
a1567 1
   STANDARD_API_IMPL (
d1572 1
a1572 1
      doubleGroup)
d1627 1
a1627 1
   STANDARD_API_IMPL (
d1636 1
a1636 1
      doubleGroup)
d1695 1
a1695 1
   STANDARD_API_IMPL (
d1700 1
a1700 1
      doubleGroup)
d1727 1
a1727 1
   STANDARD_API_IMPL (
d1732 1
a1732 1
      doubleGroup)
d1771 1
a1771 1
   STANDARD_API_IMPL (
d1780 1
a1780 1
      doubleGroup)
d1825 1
a1825 1
   STANDARD_API_IMPL (
d1836 1
a1836 1
      doubleGroup)
d1881 1
a1881 1
   STANDARD_API_IMPL (
d1892 1
a1892 1
      doubleGroup)
d1931 1
a1931 1
   STANDARD_API_IMPL (
d1940 1
a1940 1
      doubleGroup)
d1985 1
a1985 1
   STANDARD_API_IMPL (
d1988 1
a1988 1
      doubleGroup)
d2027 1
a2027 1
   STANDARD_API_IMPL (
d2032 1
a2032 1
      doubleGroup)
d2113 1
a2113 1
   STANDARD_API_IMPL (
d2116 1
a2116 1
      doubleGroup)
d2374 1
a2374 1
   STANDARD_API_IMPL (
d2378 1
a2378 1
      doubleGroup)
d2386 1
a2386 2
      void * * appData
)
d2422 1
a2422 1
   STANDARD_API_IMPL (
d2428 1
a2428 1
      doubleGroup)
d2436 1
a2436 2
      float * * execCost
)
d2450 1
a2450 2
      double * * execCost
)
d2452 1
a2452 1
   STANDARD_API_IMPL (
d2456 1
a2456 1
      doubleGroup)
d2464 1
a2464 2
      float * execPenalty
)
d2478 1
a2478 2
      double * execPenalty
)
d2480 1
a2480 1
   STANDARD_API_IMPL (
d2484 1
a2484 1
      doubleGroup)
d2492 1
a2492 2
      witBoolean * * execVol
)
d2506 1
a2506 2
      float * * execVol
)
d2520 1
a2520 2
      double * * execVol
)
d2522 1
a2522 1
   STANDARD_API_IMPL (
d2526 1
a2526 1
      doubleGroup)
d2548 1
a2548 2
      float * * fssExecVol
)
d2562 1
a2562 2
      double * * fssExecVol
)
d2564 1
a2564 1
   STANDARD_API_IMPL (
d2568 1
a2568 1
      doubleGroup)
d2576 1
a2576 2
      float * * incLotSize
)
d2590 1
a2590 2
      double * * incLotSize
)
d2592 1
a2592 1
   STANDARD_API_IMPL (
d2596 1
a2596 1
      doubleGroup)
d2604 1
a2604 2
      float * * incLotSize2
)
d2618 1
a2618 2
      double * * incLotSize2
)
d2620 1
a2620 1
   STANDARD_API_IMPL (
d2624 1
a2624 1
      doubleGroup)
d2632 1
a2632 2
      float * * lotSize2Thresh
)
d2646 1
a2646 2
      double * * lotSize2Thresh
)
d2648 1
a2648 1
   STANDARD_API_IMPL (
d2652 1
a2652 1
      doubleGroup)
d2660 1
a2660 2
      float * * minLotSize
)
d2674 1
a2674 2
      double * * minLotSize
)
d2676 1
a2676 1
   STANDARD_API_IMPL (
d2680 1
a2680 1
      doubleGroup)
d2688 1
a2688 2
      float * * minLotSize2
)
d2702 1
a2702 2
      double * * minLotSize2
)
d2704 1
a2704 1
   STANDARD_API_IMPL (
d2708 1
a2708 1
      doubleGroup)
d2716 1
a2716 2
      float * * mrpExecVol
)
d2730 1
a2730 2
      double * * mrpExecVol
)
d2732 1
a2732 1
   STANDARD_API_IMPL (
d2736 1
a2736 1
      doubleGroup)
d2744 1
a2744 2
      int * nBomEntries
)
d2758 1
a2758 2
      int * nBopEntries
)
d2786 1
a2786 2
      witBoolean * selForDel
)
d2800 1
a2800 2
      witBoolean * twoLevelLotSizes
)
d2814 1
a2814 2
      float * * yieldRate
)
d2828 1
a2828 2
      double * * yieldRate
)
d2830 1
a2830 1
   STANDARD_API_IMPL (
d2834 1
a2834 1
      doubleGroup)
d2978 1
a2978 1
   STANDARD_API_IMPL (
d2982 1
a2982 1
      doubleGroup)
d3074 1
a3074 1
   STANDARD_API_IMPL (
d3078 1
a3078 1
      doubleGroup)
d3116 1
a3116 1
   STANDARD_API_IMPL (
d3120 1
a3120 1
      doubleGroup)
d3144 1
a3144 1
   STANDARD_API_IMPL (
d3148 1
a3148 1
      doubleGroup)
d3172 1
a3172 1
   STANDARD_API_IMPL (
d3176 1
a3176 1
      doubleGroup)
d3200 1
a3200 1
   STANDARD_API_IMPL (
d3204 1
a3204 1
      doubleGroup)
d3270 1
a3270 1
   STANDARD_API_IMPL (
d3274 1
a3274 1
      doubleGroup)
d3330 1
a3330 1
   STANDARD_API_IMPL (
d3334 1
a3334 1
      doubleGroup)
d3358 1
a3358 1
   STANDARD_API_IMPL (
d3362 1
a3362 1
      doubleGroup)
d3400 1
a3400 1
   STANDARD_API_IMPL (
d3404 1
a3404 1
      doubleGroup)
d3428 1
a3428 1
   STANDARD_API_IMPL (
d3432 1
a3432 1
      doubleGroup)
d3470 1
a3470 1
   STANDARD_API_IMPL (
d3474 1
a3474 1
      doubleGroup)
d3518 1
a3518 1
   STANDARD_API_IMPL (
d3524 1
a3524 1
      doubleGroup)
d3548 1
a3548 1
   STANDARD_API_IMPL (
d3552 1
a3552 1
      doubleGroup)
d3576 1
a3576 1
   STANDARD_API_IMPL (
d3580 1
a3580 1
      doubleGroup)
d3604 1
a3604 1
   STANDARD_API_IMPL (
d3608 1
a3608 1
      doubleGroup)
d3665 1
a3665 1
   STANDARD_API_IMPL (
d3672 1
a3672 1
      doubleGroup)
d3874 1
a3874 1
   STANDARD_API_IMPL (
d3880 1
a3880 1
      doubleGroup)
d3946 1
a3946 1
   STANDARD_API_IMPL (
d3952 1
a3952 1
      doubleGroup)
d4000 1
a4000 1
   STANDARD_API_IMPL (
d4006 1
a4006 1
      doubleGroup)
d4036 1
a4036 1
   STANDARD_API_IMPL (
d4042 1
a4042 1
      doubleGroup)
d4072 1
a4072 1
   STANDARD_API_IMPL (
d4078 1
a4078 1
      doubleGroup)
d4162 1
a4162 1
   STANDARD_API_IMPL (
d4168 1
a4168 1
      doubleGroup)
d4216 1
a4216 1
   STANDARD_API_IMPL (
d4222 1
a4222 1
      doubleGroup)
d4252 1
a4252 1
   STANDARD_API_IMPL (
d4258 1
a4258 1
      doubleGroup)
d4288 1
a4288 1
   STANDARD_API_IMPL (
d4294 1
a4294 1
      doubleGroup)
d4342 1
a4342 1
   STANDARD_API_IMPL (
d4348 1
a4348 1
      doubleGroup)
d4378 1
a4378 1
   STANDARD_API_IMPL (
d4384 1
a4384 1
      doubleGroup)
d4477 1
a4477 1
   STANDARD_API_IMPL (
d4480 1
a4480 1
      doubleGroup)
d4536 1
a4536 1
   STANDARD_API_IMPL (
d4543 1
a4543 1
      doubleGroup)
d4579 1
a4579 1
   STANDARD_API_IMPL (
d4587 1
a4587 1
      doubleGroup)
d4807 1
a4807 1
   STANDARD_API_IMPL (
d4812 1
a4812 1
      doubleGroup)
d4855 1
a4855 1
   STANDARD_API_IMPL (
d4860 1
a4860 1
      doubleGroup)
d4887 1
a4887 1
   STANDARD_API_IMPL (
d4892 1
a4892 1
      doubleGroup)
d4951 1
a4951 1
   STANDARD_API_IMPL (
d4956 1
a4956 1
      doubleGroup)
d4999 1
a4999 1
   STANDARD_API_IMPL (
d5004 1
a5004 1
      doubleGroup)
d5111 1
a5111 1
   STANDARD_API_IMPL (
d5116 1
a5116 1
      doubleGroup)
d5159 1
a5159 1
   STANDARD_API_IMPL (
d5164 1
a5164 1
      doubleGroup)
d5191 1
a5191 1
   STANDARD_API_IMPL (
d5196 1
a5196 1
      doubleGroup)
d5223 1
a5223 1
   STANDARD_API_IMPL (
d5228 1
a5228 1
      doubleGroup)
d5255 1
a5255 1
   STANDARD_API_IMPL (
d5260 1
a5260 1
      doubleGroup)
d5349 1
a5349 1
   STANDARD_API_IMPL (
d5356 1
a5356 1
      doubleGroup)
d5383 1
a5383 1
   STANDARD_API_IMPL (
d5388 1
a5388 1
      doubleGroup)
d5415 1
a5415 1
   STANDARD_API_IMPL (
d5420 1
a5420 1
      doubleGroup)
d5463 1
a5463 1
   STANDARD_API_IMPL (
d5468 1
a5468 1
      doubleGroup)
d5495 1
a5495 1
   STANDARD_API_IMPL (
d5500 1
a5500 1
      doubleGroup)
d5527 1
a5527 1
   STANDARD_API_IMPL (
d5532 1
a5532 1
      doubleGroup)
d5607 1
a5607 1
   STANDARD_API_IMPL (
d5612 1
a5612 1
      doubleGroup)
d5639 1
a5639 1
   STANDARD_API_IMPL (
d5644 1
a5644 1
      doubleGroup)
d5689 1
a5689 1
   STANDARD_API_IMPL (
d5692 1
a5692 1
      doubleGroup)
d5761 1
a5761 1
   STANDARD_API_IMPL (
d5764 1
a5764 1
      doubleGroup)
d5959 1
a5959 1
   STANDARD_API_IMPL (
d5965 1
a5965 1
      doubleGroup)
d5973 1
a5973 2
      const float * const execCost
)
d5987 1
a5987 2
      const double * const execCost
)
d5989 1
a5989 1
   STANDARD_API_IMPL (
d5993 1
a5993 1
      doubleGroup)
d6001 1
a6001 2
      const float execPenalty
)
d6015 1
a6015 2
      const double execPenalty
)
d6017 1
a6017 1
   STANDARD_API_IMPL (
d6021 1
a6021 1
      doubleGroup)
d6045 1
a6045 1
   STANDARD_API_IMPL (
d6049 1
a6049 1
      doubleGroup)
d6057 1
a6057 2
      const float * const incLotSize
)
d6071 1
a6071 2
      const double * const incLotSize
)
d6073 1
a6073 1
   STANDARD_API_IMPL (
d6077 1
a6077 1
      doubleGroup)
d6085 1
a6085 2
      const float * const incLotSize2
)
d6099 1
a6099 2
      const double * const incLotSize2
)
d6101 1
a6101 1
   STANDARD_API_IMPL (
d6105 1
a6105 1
      doubleGroup)
d6113 1
a6113 2
      const float * const lotSize2Thresh
)
d6127 1
a6127 2
      const double * const lotSize2Thresh
)
d6129 1
a6129 1
   STANDARD_API_IMPL (
d6133 1
a6133 1
      doubleGroup)
d6141 1
a6141 2
      const float * const minLotSize
)
d6155 1
a6155 2
      const double * const minLotSize
)
d6157 1
a6157 1
   STANDARD_API_IMPL (
d6161 1
a6161 1
      doubleGroup)
d6169 1
a6169 2
      const float * const minLotSize2
)
d6183 1
a6183 2
      const double * const minLotSize2
)
d6185 1
a6185 1
   STANDARD_API_IMPL (
d6189 1
a6189 1
      doubleGroup)
d6197 1
a6197 2
      const witBoolean selForDel
)
d6211 1
a6211 2
      const witBoolean twoLevelLotSizes
)
d6225 1
a6225 2
      const float * const yieldRate
)
d6239 1
a6239 2
      const double * const yieldRate
)
d6241 1
a6241 1
   STANDARD_API_IMPL (
d6245 1
a6245 1
      doubleGroup)
d6364 1
a6364 1
   STANDARD_API_IMPL (
d6369 1
a6369 1
      doubleGroup)
d6427 1
a6427 1
   STANDARD_API_IMPL (
d6433 1
a6433 1
      doubleGroup)
d6457 1
a6457 1
   STANDARD_API_IMPL (
d6461 1
a6461 1
      doubleGroup)
d6485 1
a6485 1
   STANDARD_API_IMPL (
d6489 1
a6489 1
      doubleGroup)
d6669 1
a6669 1
   STANDARD_API_IMPL (
d6675 1
a6675 1
      doubleGroup)
d6723 1
a6723 1
   STANDARD_API_IMPL (
d6729 1
a6729 1
      doubleGroup)
d6777 1
a6777 1
   STANDARD_API_IMPL (
d6783 1
a6783 1
      doubleGroup)
d6813 1
a6813 1
   STANDARD_API_IMPL (
d6819 1
a6819 1
      doubleGroup)
d6903 1
a6903 1
   STANDARD_API_IMPL (
d6909 1
a6909 1
      doubleGroup)
d6939 1
a6939 1
   STANDARD_API_IMPL (
d6945 1
a6945 1
      doubleGroup)
d6975 1
a6975 1
   STANDARD_API_IMPL (
d6981 1
a6981 1
      doubleGroup)
d7029 1
a7029 1
   STANDARD_API_IMPL (
d7035 1
a7035 1
      doubleGroup)
d7065 1
a7065 1
   STANDARD_API_IMPL (
d7071 1
a7071 1
      doubleGroup)
d7164 1
a7164 1
   STANDARD_API_IMPL (
d7167 1
a7167 1
      doubleGroup)
d7565 1
a7565 1
   STANDARD_API_IMPL (
d7568 1
a7568 1
      doubleGroup)
d7627 1
a7627 1
   STANDARD_API_IMPL (
d7632 1
a7632 1
      doubleGroup)
d7685 1
a7685 1
   STANDARD_API_IMPL (
d7688 1
a7688 1
      doubleGroup)
d7742 1
a7742 1
   STANDARD_API_IMPL (
d7748 1
a7748 1
      doubleGroup)
d7769 1
a7769 1
   STANDARD_API_IMPL (
d7772 1
a7772 1
      doubleGroup)
d7793 1
a7793 1
   STANDARD_API_IMPL (
d7796 1
a7796 1
      doubleGroup)
d7817 1
a7817 1
   STANDARD_API_IMPL (
d7820 1
a7820 1
      doubleGroup)
d7841 1
a7841 1
   STANDARD_API_IMPL (
d7844 1
a7844 1
      doubleGroup)
d7864 1
a7864 2
      float * * obj1ExecCost
)
d7878 1
a7878 2
      double * * obj1ExecCost
)
d7880 1
a7880 1
   STANDARD_API_IMPL (
d7884 1
a7884 1
      doubleGroup)
d7892 1
a7892 2
      float * obj2AuxCost
)
d7906 1
a7906 2
      double * obj2AuxCost
)
d7908 1
a7908 1
   STANDARD_API_IMPL (
d7912 1
a7912 1
      doubleGroup)
d7920 1
a7920 2
      int * * yield
)
d8060 1
a8060 1
   STANDARD_API_IMPL (
d8064 1
a8064 1
      doubleGroup)
d8088 1
a8088 1
   STANDARD_API_IMPL (
d8092 1
a8092 1
      doubleGroup)
d8148 1
a8148 1
   STANDARD_API_IMPL (
d8152 1
a8152 1
      doubleGroup)
d8187 1
a8187 1
   STANDARD_API_IMPL (
d8190 1
a8190 1
      doubleGroup)
d8250 1
a8250 1
   STANDARD_API_IMPL (
d8256 1
a8256 1
      doubleGroup)
d8421 1
a8421 1
   STANDARD_API_IMPL (
d8424 1
a8424 1
      doubleGroup)
d8483 1
a8483 1
   STANDARD_API_IMPL (
d8488 1
a8488 1
      doubleGroup)
d8541 1
a8541 1
   STANDARD_API_IMPL (
d8544 1
a8544 1
      doubleGroup)
d8589 1
a8589 1
   STANDARD_API_IMPL (
d8592 1
a8592 1
      doubleGroup)
d8613 1
a8613 1
   STANDARD_API_IMPL (
d8616 1
a8616 1
      doubleGroup)
d8637 1
a8637 1
   STANDARD_API_IMPL (
d8640 1
a8640 1
      doubleGroup)
d8661 1
a8661 1
   STANDARD_API_IMPL (
d8664 1
a8664 1
      doubleGroup)
d8684 1
a8684 2
      const float * const obj1ExecCost
)
d8698 1
a8698 2
      const double * const obj1ExecCost
)
d8700 1
a8700 1
   STANDARD_API_IMPL (
d8704 1
a8704 1
      doubleGroup)
d8712 1
a8712 2
      const float obj2AuxCost
)
d8726 1
a8726 2
      const double obj2AuxCost
)
d8728 1
a8728 1
   STANDARD_API_IMPL (
d8732 1
a8732 1
      doubleGroup)
d8740 1
a8740 2
      const int * const yield
)
d8853 1
a8853 1
   STANDARD_API_IMPL (
d8858 1
a8858 1
      doubleGroup)
d8882 1
a8882 1
   STANDARD_API_IMPL (
d8886 1
a8886 1
      doubleGroup)
d8956 1
a8956 1
   STANDARD_API_IMPL (
d8960 1
a8960 1
      doubleGroup)
d8995 1
a8995 1
   STANDARD_API_IMPL (
d8998 1
a8998 1
      doubleGroup)
d9058 1
a9058 1
   STANDARD_API_IMPL (
d9064 1
a9064 1
      doubleGroup)
@


1.146
log
@[multi-thread]
@
text
@d301 1
a301 1
   WitApiMgr::lockApi ("witDeleteRun");
d305 1
a305 1
   WitApiMgr::unlockApi ();
d4620 1
a4620 1
   WitApiMgr::lockApi ("witNewRun");
d4624 1
a4624 1
   WitApiMgr::unlockApi ();
@


1.145
log
@[multi-thread]
@
text
@d301 2
d305 2
d4616 2
d4620 1
a4620 1
   WitRun * & theWitRun = * theWitRunPtr;
d4624 4
@


1.144
log
@[multi-thread]
@
text
@d2202 12
d5872 11
@


1.143
log
@[multi-thread]
@
text
@d13 3
a15 2
// Contains the c callable API functions.  These functions invoke the
// C++ callable API functions.
d37 1
a37 1
//    innerFunc  The name (as a symbol) of the inner API fuction to be called.
d43 3
a45 3
// For most API functions, the implementation of the function consists entirely 
// of a call to this macro.
// All other API functions are preceded by the following comment:
@


1.142
log
@[multi-thread]
@
text
@d288 1
a288 1
      theApiMgr->startApiFunc ("witDeleteRun", theApiMgr->preInQuietGroup ());
d4608 1
a4608 1
      preInQuietGroup)
d5752 1
a5752 1
      preInQuietGroup)
d5766 1
a5766 1
      preInQuietGroup)
d5782 1
a5782 1
      preInQuietGroup)
d5798 1
a5798 1
      preInQuietGroup)
d5814 1
a5814 1
      preInQuietGroup)
d5830 1
a5830 1
      preInQuietGroup)
d9250 1
a9250 1
      preInQuietGroup)
@


1.141
log
@[multi-thread]
@
text
@d27 2
@


1.140
log
@[multi-thread]
@
text
@d2170 1
a2170 1
      quietGroup)
@


1.139
log
@[multi-threads]
@
text
@d31 1
a31 1
// This macro expands to the standard implementation of an API function.
d39 7
d269 1
a269 1
      preInitGroup)
d286 1
a286 1
      theApiMgr->startApiFunc ("witDeleteRun", theApiMgr->preInitGroup ());
d4576 1
a4576 1
      preInitGroup)
d4606 1
a4606 1
      preInitGroup)
d5750 1
a5750 1
      preInitGroup)
d5764 1
a5764 1
      preInitGroup)
d5780 1
a5780 1
      preInitGroup)
d5796 1
a5796 1
      preInitGroup)
d5812 1
a5812 1
      preInitGroup)
d5828 1
a5828 1
      preInitGroup)
d9248 1
a9248 1
      preInitGroup)
@


1.138
log
@[multi-threads]
@
text
@d19 1
a19 1
#include <wit.h>
d25 1
d28 11
a38 1
// Macro STANDARD_API_IMPL
d41 1
a41 1
#define STANDARD_API_IMPL(innerFunc, argList)                                  \
d43 4
d49 1
a49 1
      theWitRun->myApiMgr ()->startApiFunc (#innerFunc);                       \
d53 1
a53 1
      theWitRun->myApiMgr ()->finishApiFunc ();                                \
d58 1
a58 1
      theWitRun->myApiMgr ()->handleAbortApiExc (theExc);                      \
d61 1
a61 1
   return theWitRun->myApiMgr ()->apiRc ();                                    \
d81 2
a82 1
         consumedPartName))
d95 2
a96 1
         producedPartName))
d109 2
a110 1
         demandName))
d121 2
a122 1
         operationName))
d135 2
a136 1
         partCategory))
d147 2
a148 1
         partAndOperationName))
d163 2
a164 1
         consumedPartName))
d174 2
a175 1
         ))
d192 2
a193 1
         incShipVol))
a204 2
   theWitRun->myApiMgr ()->setDblCall ();

d210 2
a211 1
         incShipVol))
d221 2
a222 1
         ))
d232 2
a233 1
         ))
d243 2
a244 1
         ))
a258 2
   theWitRun->myApiMgr ()->setQuietCall ();

d261 2
a262 1
         srcWitRun))
d272 1
d275 1
a275 1
   theWitRun->myApiMgr ()->setQuietCall ();
d279 1
a279 1
      theWitRun->myApiMgr ()->startApiFunc ("witDeleteRun");
d281 1
a281 1
      theWitRun->myApiMgr ()->finishApiFunc ();
d286 1
a286 1
      theWitRun->myApiMgr ()->handleAbortApiExc (theExc);
d289 1
a289 1
   theRC = theWitRun->myApiMgr ()->apiRc ();
d304 2
a305 1
         fileName))
d326 2
a327 1
         incVolList))
a340 2
   theWitRun->myApiMgr ()->setDblCall ();

d348 2
a349 1
         incVolList))
d372 2
a373 1
         asapMultiExecList))
a387 2
   theWitRun->myApiMgr ()->setDblCall ();

d396 2
a397 1
         asapMultiExecList))
d409 2
a410 1
         ))
d422 2
a423 1
         ))
d445 2
a446 1
         ))
d457 2
a458 1
         accAfterSoftLB))
d469 2
a470 1
         accAfterOptImp))
d481 2
a482 1
         accelerated))
d493 2
a494 1
         appData))
d505 2
a506 1
         autoPriority))
d521 2
a522 1
         appData))
d537 2
a538 1
         consRate))
a548 2
   theWitRun->myApiMgr ()->setDblCall ();

d553 2
a554 1
         consRate))
d569 2
a570 1
         earliestPeriod))
d585 2
a586 1
         nSubsBomEntries))
d601 2
a602 1
         consumedPartName))
d617 2
a618 1
         execPenalty))
a628 2
   theWitRun->myApiMgr ()->setDblCall ();

d633 2
a634 1
         execPenalty))
d649 2
a650 1
         falloutRate))
a660 2
   theWitRun->myApiMgr ()->setDblCall ();

d665 2
a666 1
         falloutRate))
d681 2
a682 1
         impactPeriod))
d697 2
a698 1
         latestPeriod))
d713 2
a714 1
         mandEC))
d729 2
a730 1
         offset))
a740 2
   theWitRun->myApiMgr ()->setDblCall ();

d745 2
a746 1
         offset))
d761 2
a762 1
         propRtg))
d777 2
a778 1
         routingShare))
a788 2
   theWitRun->myApiMgr ()->setDblCall ();

d793 2
a794 1
         routingShare))
d809 2
a810 1
         selForDel))
d825 2
a826 1
         singleSource))
d842 2
a843 1
         appData))
d858 2
a859 1
         earliestPeriod))
d874 2
a875 1
         expAllowed))
d890 2
a891 1
         expAversion))
a901 2
   theWitRun->myApiMgr ()->setDblCall ();

d906 2
a907 1
         expAversion))
d922 2
a923 1
         impactPeriod))
d938 2
a939 1
         latestPeriod))
d954 2
a955 1
         offset))
a965 2
   theWitRun->myApiMgr ()->setDblCall ();

d970 2
a971 1
         offset))
d986 2
a987 1
         pipShare))
a997 2
   theWitRun->myApiMgr ()->setDblCall ();

d1002 2
a1003 1
         pipShare))
d1018 2
a1019 1
         productRate))
a1029 2
   theWitRun->myApiMgr ()->setDblCall ();

d1034 2
a1035 1
         productRate))
d1050 2
a1051 1
         producedPartName))
d1066 2
a1067 1
         routingShare))
a1077 2
   theWitRun->myApiMgr ()->setDblCall ();

d1082 2
a1083 1
         routingShare))
d1098 2
a1099 1
         selForDel))
d1110 2
a1111 1
         buildWhenEmpty))
d1122 2
a1123 1
         compPrices))
d1134 2
a1135 1
         computeCriticalList))
d1150 2
a1151 1
         critPeriod))
d1166 2
a1167 1
         appData))
d1190 2
a1191 1
         peggedVolList))
a1205 2
   theWitRun->myApiMgr ()->setDblCall ();

d1214 2
a1215 1
         peggedVolList))
d1234 2
a1235 1
         hardUpper))
a1247 2
   theWitRun->myApiMgr ()->setDblCall ();

d1254 2
a1255 1
         hardUpper))
d1270 2
a1271 1
         cumShipReward))
a1281 2
   theWitRun->myApiMgr ()->setDblCall ();

d1286 2
a1287 1
         cumShipReward))
d1302 2
a1303 1
         demandVol))
a1313 2
   theWitRun->myApiMgr ()->setDblCall ();

d1318 2
a1319 1
         demandVol))
d1342 2
a1343 1
         peggedExecVolList))
a1357 2
   theWitRun->myApiMgr ()->setDblCall ();

d1366 2
a1367 1
         peggedExecVolList))
d1390 2
a1391 1
         peggedExecVolList))
a1405 2
   theWitRun->myApiMgr ()->setDblCall ();

d1414 2
a1415 1
         peggedExecVolList))
d1430 2
a1431 1
         focusHorizon))
d1446 2
a1447 1
         fssShipVol))
a1457 2
   theWitRun->myApiMgr ()->setDblCall ();

d1462 2
a1463 1
         fssShipVol))
d1478 2
a1479 1
         obj1CumShipReward))
a1489 2
   theWitRun->myApiMgr ()->setDblCall ();

d1494 2
a1495 1
         obj1CumShipReward))
d1510 2
a1511 1
         obj1ShipReward))
a1521 2
   theWitRun->myApiMgr ()->setDblCall ();

d1526 2
a1527 1
         obj1ShipReward))
d1542 2
a1543 1
         priority))
d1566 2
a1567 1
         peggedVolList))
a1581 2
   theWitRun->myApiMgr ()->setDblCall ();

d1590 2
a1591 1
         peggedVolList))
d1606 2
a1607 1
         shipLateLimit))
d1622 2
a1623 1
         shipLateUB))
d1638 2
a1639 1
         shipReward))
a1649 2
   theWitRun->myApiMgr ()->setDblCall ();

d1654 2
a1655 1
         shipReward))
d1670 2
a1671 1
         shipVol))
a1681 2
   theWitRun->myApiMgr ()->setDblCall ();

d1686 2
a1687 1
         shipVol))
d1710 2
a1711 1
         peggedVolList))
a1725 2
   theWitRun->myApiMgr ()->setDblCall ();

d1734 2
a1735 1
         peggedVolList))
d1762 2
a1763 1
         peggedSubVolList))
a1779 2
   theWitRun->myApiMgr ()->setDblCall ();

d1790 2
a1791 1
         peggedSubVolList))
d1818 2
a1819 1
         peggedSubVolList))
a1835 2
   theWitRun->myApiMgr ()->setDblCall ();

d1846 2
a1847 1
         peggedSubVolList))
d1870 2
a1871 1
         peggedVolList))
a1885 2
   theWitRun->myApiMgr ()->setDblCall ();

d1894 2
a1895 1
         peggedVolList))
d1906 2
a1907 1
         equitablity))
d1918 2
a1919 1
         execEmptyBom))
d1930 2
a1931 1
         expCutoff))
a1939 2
   theWitRun->myApiMgr ()->setDblCall ();

d1942 2
a1943 1
         expCutoff))
d1954 2
a1955 1
         feasible))
d1970 2
a1971 1
         shortageVolList))
a1981 2
   theWitRun->myApiMgr ()->setDblCall ();

d1986 2
a1987 1
         shortageVolList))
d1998 2
a1999 1
         forcedMultiEq))
d2010 2
a2011 1
         hashTableSize))
d2022 2
a2023 1
         heurAllocActive))
d2034 2
a2035 1
         highPrecisionWD))
d2046 2
a2047 1
         independentOffsets))
d2058 2
a2059 1
         lotSizeTol))
a2067 2
   theWitRun->myApiMgr ()->setDblCall ();

d2070 2
a2071 1
         lotSizeTol))
d2082 2
a2083 1
         mesgFile))
d2094 2
a2095 1
         mesgFileAccessMode))
d2106 2
a2107 1
         mesgFileName))
d2120 2
a2121 1
         mesgPrintMunber))
d2134 2
a2135 1
         mesgStopRunning))
d2148 2
a2149 1
         mesgThrowException))
a2158 2
   theWitRun->myApiMgr ()->setQuietCall ();

d2162 2
a2163 1
         mesgTimesPrint))
d2174 2
a2175 1
         multiExec))
d2186 2
a2187 1
         multiRoute))
d2198 2
a2199 1
         nPeriods))
d2212 2
a2213 1
         bomEntryIndex))
d2226 2
a2227 1
         bopEntryIndex))
d2240 2
a2241 1
         demandName))
d2252 2
a2253 1
         operationName))
d2264 2
a2265 1
         partName))
d2276 2
a2277 1
         objItrState))
d2292 2
a2293 1
         subsBomEntryIndex))
d2306 2
a2307 1
         boundsValue))
a2316 2
   theWitRun->myApiMgr ()->setDblCall ();

d2320 2
a2321 1
         boundsValue))
d2335 2
a2336 1
         appData))
d2353 2
a2354 1
         hardUpper))
a2365 2
   theWitRun->myApiMgr ()->setDblCall ();

d2371 2
a2372 1
         hardUpper))
d2386 2
a2387 1
         execCost))
a2397 2
   theWitRun->myApiMgr ()->setDblCall ();

d2401 2
a2402 1
         execCost))
d2416 2
a2417 1
         execPenalty))
a2427 2
   theWitRun->myApiMgr ()->setDblCall ();

d2431 2
a2432 1
         execPenalty))
d2446 2
a2447 1
         execVol))
d2461 2
a2462 1
         execVol))
a2472 2
   theWitRun->myApiMgr ()->setDblCall ();

d2476 2
a2477 1
         execVol))
d2490 2
a2491 1
         exist))
d2505 2
a2506 1
         fssExecVol))
a2516 2
   theWitRun->myApiMgr ()->setDblCall ();

d2520 2
a2521 1
         fssExecVol))
d2535 2
a2536 1
         incLotSize))
a2546 2
   theWitRun->myApiMgr ()->setDblCall ();

d2550 2
a2551 1
         incLotSize))
d2565 2
a2566 1
         incLotSize2))
a2576 2
   theWitRun->myApiMgr ()->setDblCall ();

d2580 2
a2581 1
         incLotSize2))
d2595 2
a2596 1
         lotSize2Thresh))
a2606 2
   theWitRun->myApiMgr ()->setDblCall ();

d2610 2
a2611 1
         lotSize2Thresh))
d2625 2
a2626 1
         minLotSize))
a2636 2
   theWitRun->myApiMgr ()->setDblCall ();

d2640 2
a2641 1
         minLotSize))
d2655 2
a2656 1
         minLotSize2))
a2666 2
   theWitRun->myApiMgr ()->setDblCall ();

d2670 2
a2671 1
         minLotSize2))
d2685 2
a2686 1
         mrpExecVol))
a2696 2
   theWitRun->myApiMgr ()->setDblCall ();

d2700 2
a2701 1
         mrpExecVol))
d2715 2
a2716 1
         nBomEntries))
d2730 2
a2731 1
         nBopEntries))
d2744 2
a2745 1
         operationList))
d2759 2
a2760 1
         selForDel))
d2774 2
a2775 1
         twoLevelLotSizes))
d2789 2
a2790 1
         yieldRate))
a2800 2
   theWitRun->myApiMgr ()->setDblCall ();

d2804 2
a2805 1
         yieldRate))
d2816 2
a2817 1
         optInitMethod))
d2828 2
a2829 1
         oslMesgFileName))
d2840 2
a2841 1
         outputPrecision))
d2852 2
a2853 1
         postprocessed))
d2866 2
a2867 1
         appData))
d2882 2
a2883 1
         partNameList))
d2896 2
a2897 1
         buildAheadUB))
d2910 2
a2911 1
         buildAsap))
d2924 2
a2925 1
         buildNstn))
d2938 2
a2939 1
         consVol))
a2948 2
   theWitRun->myApiMgr ()->setDblCall ();

d2952 2
a2953 1
         consVol))
d2970 2
a2971 1
         bomEntryIndex))
d2990 2
a2991 1
         subsBomEntryIndex))
d3006 2
a3007 1
         demandList))
d3020 2
a3021 1
         category))
d3034 2
a3035 1
         excessVol))
a3044 2
   theWitRun->myApiMgr ()->setDblCall ();

d3048 2
a3049 1
         excessVol))
d3062 2
a3063 1
         exist))
d3076 2
a3077 1
         shortageVol))
a3086 2
   theWitRun->myApiMgr ()->setDblCall ();

d3090 2
a3091 1
         shortageVol))
d3104 2
a3105 1
         mrpConsVol))
a3114 2
   theWitRun->myApiMgr ()->setDblCall ();

d3118 2
a3119 1
         mrpConsVol))
d3132 2
a3133 1
         mrpExcessVol))
a3142 2
   theWitRun->myApiMgr ()->setDblCall ();

d3146 2
a3147 1
         mrpExcessVol))
d3160 2
a3161 1
         mrpResidualVol))
a3170 2
   theWitRun->myApiMgr ()->setDblCall ();

d3174 2
a3175 1
         mrpResidualVol))
d3188 2
a3189 1
         nConsumingBomEntries))
d3202 2
a3203 1
         nConsumingSubsBomEntries))
d3216 2
a3217 1
         nProducingBopEntries))
d3230 2
a3231 1
         prodVol))
a3240 2
   theWitRun->myApiMgr ()->setDblCall ();

d3244 2
a3245 1
         prodVol))
d3262 2
a3263 1
         bopEntryIndex))
d3276 2
a3277 1
         propRtg))
d3290 2
a3291 1
         reqVol))
a3300 2
   theWitRun->myApiMgr ()->setDblCall ();

d3304 2
a3305 1
         reqVol))
d3318 2
a3319 1
         residualVol))
a3328 2
   theWitRun->myApiMgr ()->setDblCall ();

d3332 2
a3333 1
         residualVol))
d3346 2
a3347 1
         partList))
d3360 2
a3361 1
         scrapCost))
a3370 2
   theWitRun->myApiMgr ()->setDblCall ();

d3374 2
a3375 1
         scrapCost))
d3388 2
a3389 1
         scrapVol))
a3398 2
   theWitRun->myApiMgr ()->setDblCall ();

d3402 2
a3403 1
         scrapVol))
d3416 2
a3417 1
         selForDel))
d3430 2
a3431 1
         shadowPrice))
a3440 2
   theWitRun->myApiMgr ()->setDblCall ();

d3444 2
a3445 1
         shadowPrice))
d3458 2
a3459 1
         singleSource))
d3476 2
a3477 1
         hardUpper))
a3488 2
   theWitRun->myApiMgr ()->setDblCall ();

d3494 2
a3495 1
         hardUpper))
d3508 2
a3509 1
         stockCost))
a3518 2
   theWitRun->myApiMgr ()->setDblCall ();

d3522 2
a3523 1
         stockCost))
d3536 2
a3537 1
         stockVol))
a3546 2
   theWitRun->myApiMgr ()->setDblCall ();

d3550 2
a3551 1
         stockVol))
d3564 2
a3565 1
         supplyVol))
a3574 2
   theWitRun->myApiMgr ()->setDblCall ();

d3578 2
a3579 1
         supplyVol))
d3590 2
a3591 1
         penExec))
d3602 2
a3603 1
         pipExists))
d3622 2
a3623 1
         incShipVolList))
a3635 2
   theWitRun->myApiMgr ()->setDblCall ();

d3642 2
a3643 1
         incShipVolList))
d3654 2
a3655 1
         pipSeqFromHeur))
d3666 2
a3667 1
         perfPegging))
d3688 2
a3689 1
         shipPerList))
d3700 2
a3701 1
         pgdCritListMode))
d3712 2
a3713 1
         postSolveRecovery))
d3724 2
a3725 1
         prefHighStockSLBs))
d3736 2
a3737 1
         preprocessed))
d3748 2
a3749 1
         respectStockSLBs))
d3760 2
a3761 1
         roundReqVols))
d3772 2
a3773 1
         selSplit))
d3784 2
a3785 1
         skipFailures))
d3796 2
a3797 1
         stockReallocation))
d3814 2
a3815 1
         appData))
d3832 2
a3833 1
         consRate))
a3844 2
   theWitRun->myApiMgr ()->setDblCall ();

d3850 2
a3851 1
         consRate))
d3868 2
a3869 1
         consumedPart))
d3886 2
a3887 1
         earliestPeriod))
d3904 2
a3905 1
         execPenalty))
a3916 2
   theWitRun->myApiMgr ()->setDblCall ();

d3922 2
a3923 1
         execPenalty))
d3940 2
a3941 1
         expAllowed))
d3958 2
a3959 1
         expNetAversion))
a3970 2
   theWitRun->myApiMgr ()->setDblCall ();

d3976 2
a3977 1
         expNetAversion))
d3994 2
a3995 1
         falloutRate))
a4006 2
   theWitRun->myApiMgr ()->setDblCall ();

d4012 2
a4013 1
         falloutRate))
d4030 2
a4031 1
         fssSubVol))
a4042 2
   theWitRun->myApiMgr ()->setDblCall ();

d4048 2
a4049 1
         fssSubVol))
d4066 2
a4067 1
         impactPeriod))
d4084 2
a4085 1
         latestPeriod))
d4102 2
a4103 1
         mrpNetAllowed))
d4120 2
a4121 1
         mrpSubVol))
a4132 2
   theWitRun->myApiMgr ()->setDblCall ();

d4138 2
a4139 1
         mrpSubVol))
d4156 2
a4157 1
         netAllowed))
d4174 2
a4175 1
         obj1SubCost))
a4186 2
   theWitRun->myApiMgr ()->setDblCall ();

d4192 2
a4193 1
         obj1SubCost))
d4210 2
a4211 1
         offset))
a4222 2
   theWitRun->myApiMgr ()->setDblCall ();

d4228 2
a4229 1
         offset))
d4246 2
a4247 1
         routingShare))
a4258 2
   theWitRun->myApiMgr ()->setDblCall ();

d4264 2
a4265 1
         routingShare))
d4282 2
a4283 1
         selForDel))
d4300 2
a4301 1
         subCost))
a4312 2
   theWitRun->myApiMgr ()->setDblCall ();

d4318 2
a4319 1
         subCost))
d4336 2
a4337 1
         subVol))
a4348 2
   theWitRun->myApiMgr ()->setDblCall ();

d4354 2
a4355 1
         subVol))
d4366 2
a4367 1
         tieBreakPropRt))
d4378 2
a4379 1
         title))
d4390 2
a4391 1
         truncOffsets))
d4402 2
a4403 1
         twoWayMultiExec))
d4414 2
a4415 1
         useFocusHorizons))
d4426 2
a4427 1
         userHeurStart))
d4438 2
a4439 1
         wbounds))
a4447 2
   theWitRun->myApiMgr ()->setDblCall ();

d4450 2
a4451 1
         wbounds))
d4462 2
a4463 1
         wit34Compatible))
d4473 2
a4474 1
         ))
d4493 2
a4494 1
         incVol))
a4506 2
   theWitRun->myApiMgr ()->setDblCall ();

d4513 2
a4514 1
         incVol))
d4535 2
a4536 1
         asapMultiExec))
a4549 2
   theWitRun->myApiMgr ()->setDblCall ();

d4557 2
a4558 1
         asapMultiExec))
a4565 2
   theWitRun->myApiMgr ()->setQuietCall ();

d4568 2
a4569 1
         ))
d4579 2
a4580 1
         ))
a4595 2
   theWitRun->myApiMgr ()->setQuietCall ();

d4598 2
a4599 1
         ))
d4611 2
a4612 1
         ))
d4622 2
a4623 1
         ))
d4635 2
a4636 1
         ))
d4646 2
a4647 1
         ))
d4657 2
a4658 1
         ))
d4669 2
a4670 1
         fileName))
d4680 2
a4681 1
         ))
d4692 2
a4693 1
         accAfterSoftLB))
d4704 2
a4705 1
         accAfterOptImp))
d4716 2
a4717 1
         appData))
d4728 2
a4729 1
         autoPriority))
d4744 2
a4745 1
         appData))
d4760 2
a4761 1
         consRate))
a4771 2
   theWitRun->myApiMgr ()->setDblCall ();

d4776 2
a4777 1
         consRate))
d4792 2
a4793 1
         earliestPeriod))
d4808 2
a4809 1
         execPenalty))
a4819 2
   theWitRun->myApiMgr ()->setDblCall ();

d4824 2
a4825 1
         execPenalty))
d4840 2
a4841 1
         falloutRate))
a4851 2
   theWitRun->myApiMgr ()->setDblCall ();

d4856 2
a4857 1
         falloutRate))
d4872 2
a4873 1
         latestPeriod))
d4888 2
a4889 1
         mandEC))
d4904 2
a4905 1
         offset))
a4915 2
   theWitRun->myApiMgr ()->setDblCall ();

d4920 2
a4921 1
         offset))
d4936 2
a4937 1
         propRtg))
d4952 2
a4953 1
         routingShare))
a4963 2
   theWitRun->myApiMgr ()->setDblCall ();

d4968 2
a4969 1
         routingShare))
d4984 2
a4985 1
         selForDel))
d5000 2
a5001 1
         singleSource))
d5016 2
a5017 1
         appData))
d5032 2
a5033 1
         earliestPeriod))
d5048 2
a5049 1
         expAllowed))
d5064 2
a5065 1
         expAversion))
a5075 2
   theWitRun->myApiMgr ()->setDblCall ();

d5080 2
a5081 1
         expAversion))
d5096 2
a5097 1
         latestPeriod))
d5112 2
a5113 1
         offset))
a5123 2
   theWitRun->myApiMgr ()->setDblCall ();

d5128 2
a5129 1
         offset))
d5144 2
a5145 1
         pipShare))
a5155 2
   theWitRun->myApiMgr ()->setDblCall ();

d5160 2
a5161 1
         pipShare))
d5176 2
a5177 1
         productRate))
a5187 2
   theWitRun->myApiMgr ()->setDblCall ();

d5192 2
a5193 1
         productRate))
d5208 2
a5209 1
         routingShare))
a5219 2
   theWitRun->myApiMgr ()->setDblCall ();

d5224 2
a5225 1
         routingShare))
d5240 2
a5241 1
         selForDel))
d5252 2
a5253 1
         compPrices))
d5264 2
a5265 1
         computeCriticalList))
d5280 2
a5281 1
         appData))
d5300 2
a5301 1
         hardUpper))
a5313 2
   theWitRun->myApiMgr ()->setDblCall ();

d5320 2
a5321 1
         hardUpper))
d5336 2
a5337 1
         cumShipReward))
a5347 2
   theWitRun->myApiMgr ()->setDblCall ();

d5352 2
a5353 1
         cumShipReward))
d5368 2
a5369 1
         demandVol))
a5379 2
   theWitRun->myApiMgr ()->setDblCall ();

d5384 2
a5385 1
         demandVol))
d5400 2
a5401 1
         focusHorizon))
d5416 2
a5417 1
         fssShipVol))
a5427 2
   theWitRun->myApiMgr ()->setDblCall ();

d5432 2
a5433 1
         fssShipVol))
d5448 2
a5449 1
         obj1CumShipReward))
a5459 2
   theWitRun->myApiMgr ()->setDblCall ();

d5464 2
a5465 1
         obj1CumShipReward))
d5480 2
a5481 1
         obj1ShipReward))
a5491 2
   theWitRun->myApiMgr ()->setDblCall ();

d5496 2
a5497 1
         obj1ShipReward))
d5512 2
a5513 1
         priority))
d5528 2
a5529 1
         selForDel))
d5544 2
a5545 1
         shipLateUB))
d5560 2
a5561 1
         shipReward))
a5571 2
   theWitRun->myApiMgr ()->setDblCall ();

d5576 2
a5577 1
         shipReward))
d5592 2
a5593 1
         shipVol))
a5603 2
   theWitRun->myApiMgr ()->setDblCall ();

d5608 2
a5609 1
         shipVol))
d5620 2
a5621 1
         equitablity))
d5632 2
a5633 1
         execEmptyBom))
d5644 2
a5645 1
         expCutoff))
a5653 2
   theWitRun->myApiMgr ()->setDblCall ();

d5656 2
a5657 1
         expCutoff))
d5668 2
a5669 1
         forcedMultiEq))
d5680 2
a5681 1
         hashTableSize))
d5692 2
a5693 1
         highPrecisionWD))
d5704 2
a5705 1
         independentOffsets))
d5716 2
a5717 1
         lotSizeTol))
a5725 2
   theWitRun->myApiMgr ()->setDblCall ();

d5728 2
a5729 1
         lotSizeTol))
a5738 2
   theWitRun->myApiMgr ()->setQuietCall ();

d5742 2
a5743 1
         mesgFileAccessMode))
a5752 2
   theWitRun->myApiMgr ()->setQuietCall ();

d5756 2
a5757 1
         mesgFileName))
a5767 2
   theWitRun->myApiMgr ()->setQuietCall ();

d5772 2
a5773 1
         mesgPrintMunber))
a5783 2
   theWitRun->myApiMgr ()->setQuietCall ();

d5788 2
a5789 1
         mesgStopRunning))
a5799 2
   theWitRun->myApiMgr ()->setQuietCall ();

d5804 2
a5805 1
         mesgThrowException))
a5815 2
   theWitRun->myApiMgr ()->setQuietCall ();

d5820 2
a5821 1
         mesgTimesPrint))
d5832 2
a5833 1
         multiExec))
d5844 2
a5845 1
         multiRoute))
d5856 2
a5857 1
         nPeriods))
d5868 2
a5869 1
         oslMesgFileName))
d5882 2
a5883 1
         appData))
d5900 2
a5901 1
         hardUpper))
a5912 2
   theWitRun->myApiMgr ()->setDblCall ();

d5918 2
a5919 1
         hardUpper))
d5933 2
a5934 1
         execCost))
a5944 2
   theWitRun->myApiMgr ()->setDblCall ();

d5948 2
a5949 1
         execCost))
d5963 2
a5964 1
         execPenalty))
a5974 2
   theWitRun->myApiMgr ()->setDblCall ();

d5978 2
a5979 1
         execPenalty))
d5992 2
a5993 1
         execVol))
a6002 2
   theWitRun->myApiMgr ()->setDblCall ();

d6006 2
a6007 1
         execVol))
d6021 2
a6022 1
         incLotSize))
a6032 2
   theWitRun->myApiMgr ()->setDblCall ();

d6036 2
a6037 1
         incLotSize))
d6051 2
a6052 1
         incLotSize2))
a6062 2
   theWitRun->myApiMgr ()->setDblCall ();

d6066 2
a6067 1
         incLotSize2))
d6081 2
a6082 1
         lotSize2Thresh))
a6092 2
   theWitRun->myApiMgr ()->setDblCall ();

d6096 2
a6097 1
         lotSize2Thresh))
d6111 2
a6112 1
         minLotSize))
a6122 2
   theWitRun->myApiMgr ()->setDblCall ();

d6126 2
a6127 1
         minLotSize))
d6141 2
a6142 1
         minLotSize2))
a6152 2
   theWitRun->myApiMgr ()->setDblCall ();

d6156 2
a6157 1
         minLotSize2))
d6171 2
a6172 1
         selForDel))
d6186 2
a6187 1
         twoLevelLotSizes))
d6201 2
a6202 1
         yieldRate))
a6212 2
   theWitRun->myApiMgr ()->setDblCall ();

d6216 2
a6217 1
         yieldRate))
d6228 2
a6229 1
         optInitMethod))
d6240 2
a6241 1
         outputPrecision))
d6254 2
a6255 1
         appData))
d6268 2
a6269 1
         buildAheadUB))
d6282 2
a6283 1
         buildAsap))
d6296 2
a6297 1
         buildNstn))
d6310 2
a6311 1
         propRtg))
d6325 2
a6326 1
         ))
a6335 2
   theWitRun->myApiMgr ()->setDblCall ();

d6340 2
a6341 1
         ))
d6354 2
a6355 1
         selForDel))
d6368 2
a6369 1
         singleSource))
d6386 2
a6387 1
         hardUpper))
a6398 2
   theWitRun->myApiMgr ()->setDblCall ();

d6404 2
a6405 1
         hardUpper))
d6418 2
a6419 1
         stockCost))
a6428 2
   theWitRun->myApiMgr ()->setDblCall ();

d6432 2
a6433 1
         stockCost))
d6446 2
a6447 1
         supplyVol))
a6456 2
   theWitRun->myApiMgr ()->setDblCall ();

d6460 2
a6461 1
         supplyVol))
d6472 2
a6473 1
         penExec))
d6484 2
a6485 1
         perfPegging))
d6496 2
a6497 1
         pgdCritListMode))
d6508 2
a6509 1
         pipSeqFromHeur))
d6520 2
a6521 1
         postSolveRecovery))
d6532 2
a6533 1
         prefHighStockSLBs))
d6544 2
a6545 1
         respectStockSLBs))
d6556 2
a6557 1
         roundReqVols))
d6568 2
a6569 1
         selSplit))
d6580 2
a6581 1
         skipFailures))
d6592 2
a6593 1
         stockReallocation))
d6610 2
a6611 1
         appData))
d6628 2
a6629 1
         consRate))
a6640 2
   theWitRun->myApiMgr ()->setDblCall ();

d6646 2
a6647 1
         consRate))
d6664 2
a6665 1
         earliestPeriod))
d6682 2
a6683 1
         execPenalty))
a6694 2
   theWitRun->myApiMgr ()->setDblCall ();

d6700 2
a6701 1
         execPenalty))
d6718 2
a6719 1
         expAllowed))
d6736 2
a6737 1
         expNetAversion))
a6748 2
   theWitRun->myApiMgr ()->setDblCall ();

d6754 2
a6755 1
         expNetAversion))
d6772 2
a6773 1
         falloutRate))
a6784 2
   theWitRun->myApiMgr ()->setDblCall ();

d6790 2
a6791 1
         falloutRate))
d6808 2
a6809 1
         latestPeriod))
d6826 2
a6827 1
         mrpNetAllowed))
d6844 2
a6845 1
         netAllowed))
d6862 2
a6863 1
         obj1SubCost))
a6874 2
   theWitRun->myApiMgr ()->setDblCall ();

d6880 2
a6881 1
         obj1SubCost))
d6898 2
a6899 1
         offset))
a6910 2
   theWitRun->myApiMgr ()->setDblCall ();

d6916 2
a6917 1
         offset))
d6934 2
a6935 1
         routingShare))
a6946 2
   theWitRun->myApiMgr ()->setDblCall ();

d6952 2
a6953 1
         routingShare))
d6970 2
a6971 1
         selForDel))
d6988 2
a6989 1
         subCost))
a7000 2
   theWitRun->myApiMgr ()->setDblCall ();

d7006 2
a7007 1
         subCost))
d7024 2
a7025 1
         subVol))
a7036 2
   theWitRun->myApiMgr ()->setDblCall ();

d7042 2
a7043 1
         subVol))
d7054 2
a7055 1
         tieBreakPropRt))
d7066 2
a7067 1
         title))
d7078 2
a7079 1
         truncOffsets))
d7090 2
a7091 1
         twoWayMultiExec))
d7102 2
a7103 1
         useFocusHorizons))
d7114 2
a7115 1
         userHeurStart))
d7126 2
a7127 1
         wbounds))
a7135 2
   theWitRun->myApiMgr ()->setDblCall ();

d7138 2
a7139 1
         wbounds))
d7150 2
a7151 1
         wit34Compatible))
d7161 2
a7162 1
         ))
d7172 2
a7173 1
         ))
d7188 2
a7189 1
         maxListLen))
d7200 2
a7201 1
         fileName))
d7214 2
a7215 1
         fileFormat))
d7228 2
a7229 1
         fileFormat))
d7242 2
a7243 1
         fileFormat))
d7262 4
a7265 1
   va_list theArg;
d7271 1
a7271 1
      theWitRun->myApiMgr ()->startApiFunc ("witAddBomEntryVa");
d7279 1
a7279 1
      theWitRun->myApiMgr ()->finishApiFunc ();
d7288 1
a7288 1
      theWitRun->myApiMgr ()->handleAbortApiExc (theExc);
d7291 1
a7291 1
   return theWitRun->myApiMgr ()->apiRc ();
d7304 4
a7307 1
   va_list theArg;
d7313 1
a7313 1
      theWitRun->myApiMgr ()->startApiFunc ("witAddDemandVa");
d7321 1
a7321 1
      theWitRun->myApiMgr ()->finishApiFunc ();
d7330 1
a7330 1
      theWitRun->myApiMgr ()->handleAbortApiExc (theExc);
d7333 1
a7333 1
   return theWitRun->myApiMgr ()->apiRc ();
d7346 4
a7349 1
   va_list theArg;
d7355 1
a7355 1
      theWitRun->myApiMgr ()->startApiFunc ("witAddPartVa");
d7363 1
a7363 1
      theWitRun->myApiMgr ()->finishApiFunc ();
d7372 1
a7372 1
      theWitRun->myApiMgr ()->handleAbortApiExc (theExc);
d7375 1
a7375 1
   return theWitRun->myApiMgr ()->apiRc ();
d7389 4
a7392 1
   va_list theArg;
d7398 2
a7399 1
      theWitRun->myApiMgr ()->startApiFunc ("witAddSubsBomEntryVa");
d7408 1
a7408 1
      theWitRun->myApiMgr ()->finishApiFunc ();
d7417 1
a7417 1
      theWitRun->myApiMgr ()->handleAbortApiExc (theExc);
d7420 1
a7420 1
   return theWitRun->myApiMgr ()->apiRc ();
d7435 2
a7436 1
         fallout))
d7451 2
a7452 1
         propRouting))
d7467 2
a7468 1
         usageRate))
d7483 2
a7484 1
         time))
d7499 2
a7500 1
         byProduct))
d7515 2
a7516 1
         prodRate))
d7527 2
a7528 1
         capCost))
a7536 2
   theWitRun->myApiMgr ()->setDblCall ();

d7539 2
a7540 1
         capCost))
d7555 2
a7556 1
         buildAheadLimit))
d7571 2
a7572 1
         buildAheadUB))
d7587 2
a7588 1
         grossRev))
a7598 2
   theWitRun->myApiMgr ()->setDblCall ();

d7603 2
a7604 1
         grossRev))
d7619 2
a7620 1
         prefBuildAhead))
d7635 2
a7636 1
         shipLateLimit))
d7647 2
a7648 1
         invCost))
a7656 2
   theWitRun->myApiMgr ()->setDblCall ();

d7659 2
a7660 1
         invCost))
d7671 2
a7672 1
         localBuildAhead))
d7683 2
a7684 1
         localMultiExec))
d7701 2
a7702 1
         subsValue))
a7713 2
   theWitRun->myApiMgr ()->setDblCall ();

d7719 2
a7720 1
         subsValue))
d7731 2
a7732 1
         obj2Winv))
a7740 2
   theWitRun->myApiMgr ()->setDblCall ();

d7743 2
a7744 1
         obj2Winv))
d7755 2
a7756 1
         obj2Wrev))
a7764 2
   theWitRun->myApiMgr ()->setDblCall ();

d7767 2
a7768 1
         obj2Wrev))
d7779 2
a7780 1
         obj2Wserv))
a7788 2
   theWitRun->myApiMgr ()->setDblCall ();

d7791 2
a7792 1
         obj2Wserv))
d7803 2
a7804 1
         obj2Wsub))
a7812 2
   theWitRun->myApiMgr ()->setDblCall ();

d7815 2
a7816 1
         obj2Wsub))
d7827 2
a7828 1
         objChoice))
d7842 2
a7843 1
         obj1ExecCost))
a7853 2
   theWitRun->myApiMgr ()->setDblCall ();

d7857 2
a7858 1
         obj1ExecCost))
d7872 2
a7873 1
         obj2AuxCost))
a7883 2
   theWitRun->myApiMgr ()->setDblCall ();

d7887 2
a7888 1
         obj2AuxCost))
d7902 2
a7903 1
         yield))
d7914 2
a7915 1
         optWithLotSizes))
d7928 2
a7929 1
         buildAheadLimit))
d7942 2
a7943 1
         cycleTime))
d7956 2
a7957 1
         incLotSize))
d7970 2
a7971 1
         minLotSize))
d7984 2
a7985 1
         mrpProdVol))
d7998 2
a7999 1
         nBomEntries))
d8012 2
a8013 1
         obj1ProdCost))
d8026 2
a8027 1
         obj1ScrapCost))
a8036 2
   theWitRun->myApiMgr ()->setDblCall ();

d8040 2
a8041 1
         obj1ScrapCost))
d8054 2
a8055 1
         obj1StockCost))
a8064 2
   theWitRun->myApiMgr ()->setDblCall ();

d8068 2
a8069 1
         obj1StockCost))
d8086 2
a8087 1
         hardUpper))
d8100 2
a8101 1
         propRouting))
d8114 2
a8115 1
         unitCost))
a8124 2
   theWitRun->myApiMgr ()->setDblCall ();

d8128 2
a8129 1
         unitCost))
d8142 2
a8143 1
         yield))
d8154 2
a8155 1
         periodsPerYear))
a8163 2
   theWitRun->myApiMgr ()->setDblCall ();

d8166 2
a8167 1
         periodsPerYear))
d8178 2
a8179 1
         stockRealloc))
d8196 2
a8197 1
         fallout))
d8214 2
a8215 1
         obj2SubPenalty))
a8226 2
   theWitRun->myApiMgr ()->setDblCall ();

d8232 2
a8233 1
         obj2SubPenalty))
d8250 2
a8251 1
         prodVol))
d8268 2
a8269 1
         usageRate))
d8284 2
a8285 1
         fallout))
d8300 2
a8301 1
         propRouting))
d8316 2
a8317 1
         usageRate))
d8332 2
a8333 1
         time))
d8348 2
a8349 1
         byProduct))
d8364 2
a8365 1
         prodRate))
d8376 2
a8377 1
         buildWhenEmpty))
d8388 2
a8389 1
         capCost))
a8397 2
   theWitRun->myApiMgr ()->setDblCall ();

d8400 2
a8401 1
         capCost))
d8416 2
a8417 1
         buildAheadLimit))
d8432 2
a8433 1
         buildAheadUB))
d8448 2
a8449 1
         grossRev))
a8459 2
   theWitRun->myApiMgr ()->setDblCall ();

d8464 2
a8465 1
         grossRev))
d8480 2
a8481 1
         prefBuildAhead))
d8496 2
a8497 1
         shipLateLimit))
d8508 2
a8509 1
         invCost))
a8517 2
   theWitRun->myApiMgr ()->setDblCall ();

d8520 2
a8521 1
         invCost))
d8532 2
a8533 1
         localBuildAhead))
d8544 2
a8545 1
         localMultiExec))
d8556 2
a8557 1
         obj2Winv))
a8565 2
   theWitRun->myApiMgr ()->setDblCall ();

d8568 2
a8569 1
         obj2Winv))
d8580 2
a8581 1
         obj2Wrev))
a8589 2
   theWitRun->myApiMgr ()->setDblCall ();

d8592 2
a8593 1
         obj2Wrev))
d8604 2
a8605 1
         obj2Wserv))
a8613 2
   theWitRun->myApiMgr ()->setDblCall ();

d8616 2
a8617 1
         obj2Wserv))
d8628 2
a8629 1
         obj2Wsub))
a8637 2
   theWitRun->myApiMgr ()->setDblCall ();

d8640 2
a8641 1
         obj2Wsub))
d8652 2
a8653 1
         objChoice))
d8667 2
a8668 1
         obj1ExecCost))
a8678 2
   theWitRun->myApiMgr ()->setDblCall ();

d8682 2
a8683 1
         obj1ExecCost))
d8697 2
a8698 1
         obj2AuxCost))
a8708 2
   theWitRun->myApiMgr ()->setDblCall ();

d8712 2
a8713 1
         obj2AuxCost))
d8727 2
a8728 1
         yield))
d8739 2
a8740 1
         optWithLotSizes))
d8753 2
a8754 1
         buildAheadLimit))
d8767 2
a8768 1
         cycleTime))
d8781 2
a8782 1
         incLotSize))
d8795 2
a8796 1
         minLotSize))
d8809 2
a8810 1
         obj1ProdCost))
d8824 2
a8825 1
         ))
a8834 2
   theWitRun->myApiMgr ()->setDblCall ();

d8839 2
a8840 1
         ))
d8853 2
a8854 1
         obj1StockCost))
a8863 2
   theWitRun->myApiMgr ()->setDblCall ();

d8867 2
a8868 1
         obj1StockCost))
d8885 2
a8886 1
         hardUpper))
d8899 2
a8900 1
         prodVol))
d8913 2
a8914 1
         propRouting))
d8927 2
a8928 1
         unitCost))
a8937 2
   theWitRun->myApiMgr ()->setDblCall ();

d8941 2
a8942 1
         unitCost))
d8955 2
a8956 1
         yield))
d8967 2
a8968 1
         periodsPerYear))
a8976 2
   theWitRun->myApiMgr ()->setDblCall ();

d8979 2
a8980 1
         periodsPerYear))
d8991 2
a8992 1
         stockRealloc))
d9009 2
a9010 1
         fallout))
d9027 2
a9028 1
         obj2SubPenalty))
a9039 2
   theWitRun->myApiMgr ()->setDblCall ();

d9045 2
a9046 1
         obj2SubPenalty))
d9062 2
a9063 1
         prodVol))
d9080 2
a9081 1
         usageRate))
d9094 2
a9095 1
         fileFormat))
d9108 2
a9109 1
         solverLogFileName))
d9120 2
a9121 1
         solverLogFileName))
d9132 2
a9133 1
         nonMrSelSplit))
d9144 2
a9145 1
         nonMrSelSplit))
d9158 2
a9159 1
         baSelSplit))
d9172 2
a9173 1
         baSelSplit))
d9188 2
a9189 1
         meSelSplit))
d9204 2
a9205 1
         meSelSplit))
d9216 2
a9217 1
         srSelSplit))
d9228 2
a9229 1
         srSelSplit))
a9237 2
   theWitRun->myApiMgr ()->setQuietCall ();

d9240 2
a9241 1
         isOne))
a9248 2
   theWitRun->myApiMgr ()->setQuietCall ();

d9251 2
a9252 1
         ))
a9259 2
   theWitRun->myApiMgr ()->setQuietCall ();

d9262 2
a9263 1
         ))
d9273 2
a9274 1
         ))
d9300 2
a9301 1
         ))
@


1.137
log
@[multi-thread]:
   Moved PROLOG/EPILOG responsibility from the inner layer of the API
   to the outer layer.
@
text
@a30 24
                                                                               \
   STANDARD_NAMED_API_IMPL (#innerFunc, innerFunc, argList, false)             \

//------------------------------------------------------------------------------
// Macro STANDARD_API_IMPL_DBL
//------------------------------------------------------------------------------

#define STANDARD_API_IMPL_DBL(innerFunc, argList)                              \
                                                                               \
   STANDARD_NAMED_API_IMPL (#innerFunc "Dbl", innerFunc, argList, false)       \

//------------------------------------------------------------------------------
// Macro STANDARD_API_IMPL_QUIET
//------------------------------------------------------------------------------

#define STANDARD_API_IMPL_QUIET(innerFunc, argList)                            \
                                                                               \
   STANDARD_NAMED_API_IMPL (#innerFunc, innerFunc, argList, true)              \

//------------------------------------------------------------------------------
// Macro STANDARD_NAMED_API_IMPL
//------------------------------------------------------------------------------

#define STANDARD_NAMED_API_IMPL(funcName, innerFunc, argList, quietArg)        \
d34 1
a34 1
      theWitRun->myApiMgr ()->startApiFunc (funcName, quietArg);               \
d181 3
a183 1
   STANDARD_API_IMPL_DBL (
d233 3
a235 1
   STANDARD_API_IMPL_QUIET (
d249 2
d253 1
a253 1
      theWitRun->myApiMgr ()->startApiFunc ("witDeleteRun", true);
d313 3
a315 1
   STANDARD_API_IMPL_DBL (
d360 3
a362 1
   STANDARD_API_IMPL_DBL (
d512 3
a514 1
   STANDARD_API_IMPL_DBL (
d589 3
a591 1
   STANDARD_API_IMPL_DBL (
d621 3
a623 1
   STANDARD_API_IMPL_DBL (
d698 3
a700 1
   STANDARD_API_IMPL_DBL (
d745 3
a747 1
   STANDARD_API_IMPL_DBL (
d853 3
a855 1
   STANDARD_API_IMPL_DBL (
d915 3
a917 1
   STANDARD_API_IMPL_DBL (
d947 3
a949 1
   STANDARD_API_IMPL_DBL (
d979 3
a981 1
   STANDARD_API_IMPL_DBL (
d1026 3
a1028 1
   STANDARD_API_IMPL_DBL (
d1148 3
a1150 1
   STANDARD_API_IMPL_DBL (
d1190 3
a1192 1
   STANDARD_API_IMPL_DBL (
d1224 3
a1226 1
   STANDARD_API_IMPL_DBL (
d1256 3
a1258 1
   STANDARD_API_IMPL_DBL (
d1300 3
a1302 1
   STANDARD_API_IMPL_DBL (
d1348 3
a1350 1
   STANDARD_API_IMPL_DBL (
d1399 3
a1401 1
   STANDARD_API_IMPL_DBL (
d1431 3
a1433 1
   STANDARD_API_IMPL_DBL (
d1463 3
a1465 1
   STANDARD_API_IMPL_DBL (
d1522 3
a1524 1
   STANDARD_API_IMPL_DBL (
d1588 3
a1590 1
   STANDARD_API_IMPL_DBL (
d1620 3
a1622 1
   STANDARD_API_IMPL_DBL (
d1664 3
a1666 1
   STANDARD_API_IMPL_DBL (
d1718 3
a1720 1
   STANDARD_API_IMPL_DBL (
d1774 3
a1776 1
   STANDARD_API_IMPL_DBL (
d1824 3
a1826 1
   STANDARD_API_IMPL_DBL (
d1876 3
a1878 1
   STANDARD_API_IMPL_DBL (
d1917 3
a1919 1
   STANDARD_API_IMPL_DBL (
d1998 3
a2000 1
   STANDARD_API_IMPL_DBL (
d2084 3
a2086 1
   STANDARD_API_IMPL_QUIET (
d2232 3
a2234 1
   STANDARD_API_IMPL_DBL (
d2280 3
a2282 1
   STANDARD_API_IMPL_DBL (
d2312 3
a2314 1
   STANDARD_API_IMPL_DBL (
d2342 3
a2344 1
   STANDARD_API_IMPL_DBL (
d2386 3
a2388 1
   STANDARD_API_IMPL_DBL (
d2429 3
a2431 1
   STANDARD_API_IMPL_DBL (
d2459 3
a2461 1
   STANDARD_API_IMPL_DBL (
d2489 3
a2491 1
   STANDARD_API_IMPL_DBL (
d2519 3
a2521 1
   STANDARD_API_IMPL_DBL (
d2549 3
a2551 1
   STANDARD_API_IMPL_DBL (
d2579 3
a2581 1
   STANDARD_API_IMPL_DBL (
d2609 3
a2611 1
   STANDARD_API_IMPL_DBL (
d2708 3
a2710 1
   STANDARD_API_IMPL_DBL (
d2847 3
a2849 1
   STANDARD_API_IMPL_DBL (
d2939 3
a2941 1
   STANDARD_API_IMPL_DBL (
d2980 3
a2982 1
   STANDARD_API_IMPL_DBL (
d3008 3
a3010 1
   STANDARD_API_IMPL_DBL (
d3036 3
a3038 1
   STANDARD_API_IMPL_DBL (
d3064 3
a3066 1
   STANDARD_API_IMPL_DBL (
d3131 3
a3133 1
   STANDARD_API_IMPL_DBL (
d3189 3
a3191 1
   STANDARD_API_IMPL_DBL (
d3217 3
a3219 1
   STANDARD_API_IMPL_DBL (
d3258 3
a3260 1
   STANDARD_API_IMPL_DBL (
d3286 3
a3288 1
   STANDARD_API_IMPL_DBL (
d3327 3
a3329 1
   STANDARD_API_IMPL_DBL (
d3374 3
a3376 1
   STANDARD_API_IMPL_DBL (
d3404 3
a3406 1
   STANDARD_API_IMPL_DBL (
d3432 3
a3434 1
   STANDARD_API_IMPL_DBL (
d3460 3
a3462 1
   STANDARD_API_IMPL_DBL (
d3519 3
a3521 1
   STANDARD_API_IMPL_DBL (
d3715 3
a3717 1
   STANDARD_API_IMPL_DBL (
d3785 3
a3787 1
   STANDARD_API_IMPL_DBL (
d3838 3
a3840 1
   STANDARD_API_IMPL_DBL (
d3874 3
a3876 1
   STANDARD_API_IMPL_DBL (
d3910 3
a3912 1
   STANDARD_API_IMPL_DBL (
d3997 3
a3999 1
   STANDARD_API_IMPL_DBL (
d4050 3
a4052 1
   STANDARD_API_IMPL_DBL (
d4086 3
a4088 1
   STANDARD_API_IMPL_DBL (
d4122 3
a4124 1
   STANDARD_API_IMPL_DBL (
d4175 3
a4177 1
   STANDARD_API_IMPL_DBL (
d4211 3
a4213 1
   STANDARD_API_IMPL_DBL (
d4304 3
a4306 1
   STANDARD_API_IMPL_DBL (
d4361 3
a4363 1
   STANDARD_API_IMPL_DBL (
d4404 3
a4406 1
   STANDARD_API_IMPL_DBL (
d4421 3
a4423 1
   STANDARD_API_IMPL_QUIET (
d4451 3
a4453 1
   STANDARD_API_IMPL_QUIET (
d4615 3
a4617 1
   STANDARD_API_IMPL_DBL (
d4662 3
a4664 1
   STANDARD_API_IMPL_DBL (
d4694 3
a4696 1
   STANDARD_API_IMPL_DBL (
d4756 3
a4758 1
   STANDARD_API_IMPL_DBL (
d4803 3
a4805 1
   STANDARD_API_IMPL_DBL (
d4910 3
a4912 1
   STANDARD_API_IMPL_DBL (
d4957 3
a4959 1
   STANDARD_API_IMPL_DBL (
d4989 3
a4991 1
   STANDARD_API_IMPL_DBL (
d5021 3
a5023 1
   STANDARD_API_IMPL_DBL (
d5053 3
a5055 1
   STANDARD_API_IMPL_DBL (
d5143 3
a5145 1
   STANDARD_API_IMPL_DBL (
d5177 3
a5179 1
   STANDARD_API_IMPL_DBL (
d5209 3
a5211 1
   STANDARD_API_IMPL_DBL (
d5256 3
a5258 1
   STANDARD_API_IMPL_DBL (
d5288 3
a5290 1
   STANDARD_API_IMPL_DBL (
d5320 3
a5322 1
   STANDARD_API_IMPL_DBL (
d5397 3
a5399 1
   STANDARD_API_IMPL_DBL (
d5429 3
a5431 1
   STANDARD_API_IMPL_DBL (
d5477 3
a5479 1
   STANDARD_API_IMPL_DBL (
d5545 3
a5547 1
   STANDARD_API_IMPL_DBL (
d5559 3
a5561 1
   STANDARD_API_IMPL_QUIET (
d5574 3
a5576 1
   STANDARD_API_IMPL_QUIET (
d5590 3
a5592 1
   STANDARD_API_IMPL_QUIET (
d5607 3
a5609 1
   STANDARD_API_IMPL_QUIET (
d5624 3
a5626 1
   STANDARD_API_IMPL_QUIET (
d5641 3
a5643 1
   STANDARD_API_IMPL_QUIET (
d5733 3
a5735 1
   STANDARD_API_IMPL_DBL (
d5765 3
a5767 1
   STANDARD_API_IMPL_DBL (
d5795 3
a5797 1
   STANDARD_API_IMPL_DBL (
d5823 3
a5825 1
   STANDARD_API_IMPL_DBL (
d5853 3
a5855 1
   STANDARD_API_IMPL_DBL (
d5883 3
a5885 1
   STANDARD_API_IMPL_DBL (
d5913 3
a5915 1
   STANDARD_API_IMPL_DBL (
d5943 3
a5945 1
   STANDARD_API_IMPL_DBL (
d5973 3
a5975 1
   STANDARD_API_IMPL_DBL (
d6031 3
a6033 1
   STANDARD_API_IMPL_DBL (
d6147 3
a6149 1
   STANDARD_API_IMPL_DBL (
d6208 3
a6210 1
   STANDARD_API_IMPL_DBL (
d6238 3
a6240 1
   STANDARD_API_IMPL_DBL (
d6266 3
a6268 1
   STANDARD_API_IMPL_DBL (
d6438 3
a6440 1
   STANDARD_API_IMPL_DBL (
d6491 3
a6493 1
   STANDARD_API_IMPL_DBL (
d6544 3
a6546 1
   STANDARD_API_IMPL_DBL (
d6580 3
a6582 1
   STANDARD_API_IMPL_DBL (
d6667 3
a6669 1
   STANDARD_API_IMPL_DBL (
d6703 3
a6705 1
   STANDARD_API_IMPL_DBL (
d6739 3
a6741 1
   STANDARD_API_IMPL_DBL (
d6792 3
a6794 1
   STANDARD_API_IMPL_DBL (
d6828 3
a6830 1
   STANDARD_API_IMPL_DBL (
d6921 3
a6923 1
   STANDARD_API_IMPL_DBL (
d7046 1
a7046 1
      theWitRun->myApiMgr ()->startApiFunc ("witAddBomEntryVa", false);
d7085 1
a7085 1
      theWitRun->myApiMgr ()->startApiFunc ("witAddDemandVa", false);
d7124 1
a7124 1
      theWitRun->myApiMgr ()->startApiFunc ("witAddPartVa", false);
d7164 1
a7164 1
      theWitRun->myApiMgr ()->startApiFunc ("witAddSubsBomEntryVa", false);
d7295 3
a7297 1
   STANDARD_API_IMPL_DBL (
d7355 3
a7357 1
   STANDARD_API_IMPL_DBL (
d7411 3
a7413 1
   STANDARD_API_IMPL_DBL (
d7466 3
a7468 1
   STANDARD_API_IMPL_DBL (
d7493 3
a7495 1
   STANDARD_API_IMPL_DBL (
d7517 3
a7519 1
   STANDARD_API_IMPL_DBL (
d7541 3
a7543 1
   STANDARD_API_IMPL_DBL (
d7565 3
a7567 1
   STANDARD_API_IMPL_DBL (
d7605 3
a7607 1
   STANDARD_API_IMPL_DBL (
d7635 3
a7637 1
   STANDARD_API_IMPL_DBL (
d7779 3
a7781 1
   STANDARD_API_IMPL_DBL (
d7807 3
a7809 1
   STANDARD_API_IMPL_DBL (
d7865 3
a7867 1
   STANDARD_API_IMPL_DBL (
d7903 3
a7905 1
   STANDARD_API_IMPL_DBL (
d7964 3
a7966 1
   STANDARD_API_IMPL_DBL (
d8126 3
a8128 1
   STANDARD_API_IMPL_DBL (
d8186 3
a8188 1
   STANDARD_API_IMPL_DBL (
d8242 3
a8244 1
   STANDARD_API_IMPL_DBL (
d8288 3
a8290 1
   STANDARD_API_IMPL_DBL (
d8312 3
a8314 1
   STANDARD_API_IMPL_DBL (
d8336 3
a8338 1
   STANDARD_API_IMPL_DBL (
d8360 3
a8362 1
   STANDARD_API_IMPL_DBL (
d8400 3
a8402 1
   STANDARD_API_IMPL_DBL (
d8430 3
a8432 1
   STANDARD_API_IMPL_DBL (
d8549 3
a8551 1
   STANDARD_API_IMPL_DBL (
d8578 3
a8580 1
   STANDARD_API_IMPL_DBL (
d8649 3
a8651 1
   STANDARD_API_IMPL_DBL (
d8687 3
a8689 1
   STANDARD_API_IMPL_DBL (
d8748 3
a8750 1
   STANDARD_API_IMPL_DBL (
d8934 3
a8936 1
   STANDARD_API_IMPL_QUIET (
d8946 3
a8948 1
   STANDARD_API_IMPL_QUIET (
d8958 3
a8960 1
   STANDARD_API_IMPL_QUIET (
@


1.136
log
@[multi-thread]
@
text
@d18 1
d26 49
d87 2
a88 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witAddBomEntry (
d90 1
a90 1
         consumedPartName);
d100 2
a101 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witAddBopEntry (
d103 1
a103 1
         producedPartName);
d113 2
a114 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witAddDemand (
d116 1
a116 1
         demandName);
d125 3
a127 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witAddOperation (
         operationName);
d137 2
a138 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witAddPart (
d140 1
a140 1
         partCategory);
d149 3
a151 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witAddPartWithOperation (
         partAndOperationName);
d162 2
a163 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witAddSubsBomEntry (
d166 1
a166 1
         consumedPartName);
d174 3
a176 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witAdvanceObjItr ();
d188 2
a189 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witAppendToPipSeq (
d193 1
a193 1
         incShipVol);
d205 2
a206 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witAppendToPipSeq (
d210 1
a210 1
         incShipVol);
d218 3
a220 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witBuildPip ();
d228 3
a230 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witClearPegging ();
d238 3
a240 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witClearPipSeq ();
d244 2
d251 3
a253 2
   dstWitRun->reqNoActApiCalls ();
   srcWitRun->reqNoActApiCalls ();
d255 3
a257 2
   return dstWitRun->witCopyData (
         srcWitRun);
d261 2
d269 11
a279 1
   theWitRun->reqNoActApiCalls ();
d281 1
a281 1
   theRC = theWitRun->witDeleteRun ();
d294 3
a296 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witDisplayData (
         fileName);
d310 2
a311 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witEqHeurAlloc (
d317 1
a317 1
         incVolList);
d331 2
a332 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witEqHeurAlloc (
d338 1
a338 1
         incVolList);
d353 2
a354 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witEqHeurAllocTwme (
d361 1
a361 1
         asapMultiExecList);
d376 2
a377 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witEqHeurAllocTwme (
d384 1
a384 1
         asapMultiExecList);
d394 3
a396 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witEvalObjectives ();
d406 3
a408 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witFinishHeurAlloc ();
d412 2
d428 3
a430 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGeneratePriorities ();
d439 3
a441 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetAccAfterSoftLB (
         accAfterSoftLB);
d450 3
a452 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetAccAfterOptImp (
         accAfterOptImp);
d461 3
a463 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetAccelerated (
         accelerated);
d472 3
a474 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetAppData (
         appData);
d483 3
a485 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetAutoPriority (
         autoPriority);
d496 2
a497 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryAppData (
d500 1
a500 1
         appData);
d511 2
a512 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryConsRate (
d515 1
a515 1
         consRate);
d526 2
a527 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryConsRate (
d530 1
a530 1
         consRate);
d541 2
a542 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryEarliestPeriod (
d545 1
a545 1
         earliestPeriod);
d556 2
a557 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryNSubsBomEntries (
d560 1
a560 1
         nSubsBomEntries);
d571 2
a572 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryConsumedPart (
d575 1
a575 1
         consumedPartName);
d586 2
a587 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryExecPenalty (
d590 1
a590 1
         execPenalty);
d601 2
a602 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryExecPenalty (
d605 1
a605 1
         execPenalty);
d616 2
a617 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryFalloutRate (
d620 1
a620 1
         falloutRate);
d631 2
a632 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryFalloutRate (
d635 1
a635 1
         falloutRate);
d646 2
a647 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryImpactPeriod (
d650 1
a650 1
         impactPeriod);
d661 2
a662 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryLatestPeriod (
d665 1
a665 1
         latestPeriod);
d676 2
a677 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryMandEC (
d680 1
a680 1
         mandEC);
d691 2
a692 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryOffset (
d695 1
a695 1
         offset);
d706 2
a707 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryOffset (
d710 1
a710 1
         offset);
d721 2
a722 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryPropRtg (
d725 1
a725 1
         propRtg);
d736 2
a737 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryRoutingShare (
d740 1
a740 1
         routingShare);
d751 2
a752 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryRoutingShare (
d755 1
a755 1
         routingShare);
d766 2
a767 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntrySelForDel (
d770 1
a770 1
         selForDel);
d781 2
a782 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntrySingleSource (
d785 1
a785 1
         singleSource);
d797 2
a798 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryAppData (
d801 1
a801 1
         appData);
d812 2
a813 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryEarliestPeriod (
d816 1
a816 1
         earliestPeriod);
d827 2
a828 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryExpAllowed (
d831 1
a831 1
         expAllowed);
d842 2
a843 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryExpAversion (
d846 1
a846 1
         expAversion);
d857 2
a858 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryExpAversion (
d861 1
a861 1
         expAversion);
d872 2
a873 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryImpactPeriod (
d876 1
a876 1
         impactPeriod);
d887 2
a888 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryLatestPeriod (
d891 1
a891 1
         latestPeriod);
d902 2
a903 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryOffset (
d906 1
a906 1
         offset);
d917 2
a918 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryOffset (
d921 1
a921 1
         offset);
d932 2
a933 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryPipShare (
d936 1
a936 1
         pipShare);
d947 2
a948 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryPipShare (
d951 1
a951 1
         pipShare);
d962 2
a963 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryProductRate (
d966 1
a966 1
         productRate);
d977 2
a978 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryProductRate (
d981 1
a981 1
         productRate);
d992 2
a993 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryProducedPart (
d996 1
a996 1
         producedPartName);
d1007 2
a1008 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryRoutingShare (
d1011 1
a1011 1
         routingShare);
d1022 2
a1023 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryRoutingShare (
d1026 1
a1026 1
         routingShare);
d1037 2
a1038 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntrySelForDel (
d1041 1
a1041 1
         selForDel);
d1050 3
a1052 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBuildWhenEmpty (
         buildWhenEmpty);
d1061 3
a1063 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetCompPrices (
         compPrices);
d1072 3
a1074 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetComputeCriticalList (
         computeCriticalList);
d1085 2
a1086 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetCriticalList (
d1089 1
a1089 1
         critPeriod);
d1100 2
a1101 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandAppData (
d1104 1
a1104 1
         appData);
d1119 2
a1120 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandConsVolPip (
d1127 1
a1127 1
         peggedVolList);
d1142 2
a1143 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandConsVolPip (
d1150 1
a1150 1
         peggedVolList);
d1163 2
a1164 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandCumShipBounds (
d1169 1
a1169 1
         hardUpper);
d1182 2
a1183 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandCumShipBounds (
d1188 1
a1188 1
         hardUpper);
d1199 2
a1200 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandCumShipReward (
d1203 1
a1203 1
         cumShipReward);
d1214 2
a1215 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandCumShipReward (
d1218 1
a1218 1
         cumShipReward);
d1229 2
a1230 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandDemandVol (
d1233 1
a1233 1
         demandVol);
d1244 2
a1245 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandDemandVol (
d1248 1
a1248 1
         demandVol);
d1263 2
a1264 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandExecVolPegging (
d1271 1
a1271 1
         peggedExecVolList);
d1286 2
a1287 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandExecVolPegging (
d1294 1
a1294 1
         peggedExecVolList);
d1309 2
a1310 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandExecVolPip (
d1317 1
a1317 1
         peggedExecVolList);
d1332 2
a1333 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandExecVolPip (
d1340 1
a1340 1
         peggedExecVolList);
d1351 2
a1352 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandFocusHorizon (
d1355 1
a1355 1
         focusHorizon);
d1366 2
a1367 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandFssShipVol (
d1370 1
a1370 1
         fssShipVol);
d1381 2
a1382 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandFssShipVol (
d1385 1
a1385 1
         fssShipVol);
d1396 2
a1397 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandObj1CumShipReward (
d1400 1
a1400 1
         obj1CumShipReward);
d1411 2
a1412 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandObj1CumShipReward (
d1415 1
a1415 1
         obj1CumShipReward);
d1426 2
a1427 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandObj1ShipReward (
d1430 1
a1430 1
         obj1ShipReward);
d1441 2
a1442 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandObj1ShipReward (
d1445 1
a1445 1
         obj1ShipReward);
d1456 2
a1457 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandPriority (
d1460 1
a1460 1
         priority);
d1475 2
a1476 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandProdVolPip (
d1483 1
a1483 1
         peggedVolList);
d1498 2
a1499 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandProdVolPip (
d1506 1
a1506 1
         peggedVolList);
d1517 2
a1518 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandSelForDel (
d1521 1
a1521 1
         shipLateLimit);
d1532 2
a1533 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandShipLateUB (
d1536 1
a1536 1
         shipLateUB);
d1547 2
a1548 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandShipReward (
d1551 1
a1551 1
         shipReward);
d1562 2
a1563 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandShipReward (
d1566 1
a1566 1
         shipReward);
d1577 2
a1578 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandShipVol (
d1581 1
a1581 1
         shipVol);
d1592 2
a1593 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandShipVol (
d1596 1
a1596 1
         shipVol);
d1611 2
a1612 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandSideVolPip (
d1619 1
a1619 1
         peggedVolList);
d1634 2
a1635 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandSideVolPip (
d1642 1
a1642 1
         peggedVolList);
d1659 2
a1660 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandSubVolPegging (
d1669 1
a1669 1
         peggedSubVolList);
d1686 2
a1687 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandSubVolPegging (
d1696 1
a1696 1
         peggedSubVolList);
d1713 2
a1714 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandSubVolPip (
d1723 1
a1723 1
         peggedSubVolList);
d1740 2
a1741 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandSubVolPip (
d1750 1
a1750 1
         peggedSubVolList);
d1765 2
a1766 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandSupplyVolPip (
d1773 1
a1773 1
         peggedVolList);
d1788 2
a1789 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandSupplyVolPip (
d1796 1
a1796 1
         peggedVolList);
d1805 3
a1807 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetEquitability (
         equitablity);
d1816 3
a1818 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetExecEmptyBom (
         execEmptyBom);
d1827 3
a1829 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetExpCutoff (
         expCutoff);
d1838 3
a1840 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetExpCutoff (
         expCutoff);
d1849 3
a1851 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetFeasible (
         feasible);
d1862 2
a1863 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetFocusShortageVol (
d1866 1
a1866 1
         shortageVolList);
d1877 2
a1878 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetFocusShortageVol (
d1881 1
a1881 1
         shortageVolList);
d1890 3
a1892 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetForcedMultiEq (
         forcedMultiEq);
d1901 3
a1903 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetHashTableSize (
         hashTableSize);
d1912 3
a1914 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetHeurAllocActive (
         heurAllocActive);
d1923 3
a1925 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetHighPrecisionWD (
         highPrecisionWD);
d1934 3
a1936 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetIndependentOffsets (
         independentOffsets);
d1945 3
a1947 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetLotSizeTol (
         lotSizeTol);
d1956 3
a1958 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetLotSizeTol (
         lotSizeTol);
d1967 3
a1969 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetMesgFile (
         mesgFile);
d1978 3
a1980 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetMesgFileAccessMode (
         mesgFileAccessMode);
d1989 3
a1991 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetMesgFileName (
         mesgFileName);
d2001 2
a2002 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetMesgPrintNumber (
d2004 1
a2004 1
         mesgPrintMunber);
d2014 2
a2015 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetMesgStopRunning (
d2017 1
a2017 1
         mesgStopRunning);
d2027 2
a2028 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetMesgThrowException (
d2030 1
a2030 1
         mesgThrowException);
d2040 2
a2041 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetMesgTimesPrint (
d2043 1
a2043 1
         mesgTimesPrint);
d2052 3
a2054 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetMultiExec (
         multiExec);
d2063 3
a2065 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetMultiRoute (
         multiRoute);
d2074 3
a2076 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetNPeriods (
         nPeriods);
d2086 2
a2087 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObjItrBomEntry (
d2089 1
a2089 1
         bomEntryIndex);
d2099 2
a2100 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObjItrBopEntry (
d2102 1
a2102 1
         bopEntryIndex);
d2112 2
a2113 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObjItrDemand (
d2115 1
a2115 1
         demandName);
d2124 3
a2126 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObjItrOperation (
         operationName);
d2135 3
a2137 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObjItrPart (
         partName);
d2146 3
a2148 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObjItrState (objItrState);
d2159 2
a2160 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObjItrSubsBomEntry (
d2163 1
a2163 1
         subsBomEntryIndex);
d2173 2
a2174 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObjValues (
d2176 1
a2176 1
         boundsValue);
d2186 2
a2187 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObjValues (
d2189 1
a2189 1
         boundsValue);
d2200 2
a2201 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationAppData (
d2203 1
a2203 1
         appData);
d2215 2
a2216 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationExecBounds (
d2220 1
a2220 1
         hardUpper);
d2232 2
a2233 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationExecBounds (
d2237 1
a2237 1
         hardUpper);
d2248 2
a2249 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationExecCost (
d2251 1
a2251 1
         execCost);
d2262 2
a2263 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationExecCost (
d2265 1
a2265 1
         execCost);
d2276 2
a2277 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationExecPenalty (
d2279 1
a2279 1
         execPenalty);
d2290 2
a2291 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationExecPenalty (
d2293 1
a2293 1
         execPenalty);
d2304 2
a2305 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationExecutable (
d2307 1
a2307 1
         execVol);
d2318 2
a2319 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationExecVol (
d2321 1
a2321 1
         execVol);
d2332 2
a2333 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationExecVol (
d2335 1
a2335 1
         execVol);
d2345 2
a2346 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationExists (
d2348 1
a2348 1
         exist);
d2359 2
a2360 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationFssExecVol (
d2362 1
a2362 1
         fssExecVol);
d2373 2
a2374 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationFssExecVol (
d2376 1
a2376 1
         fssExecVol);
d2387 2
a2388 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationIncLotSize (
d2390 1
a2390 1
         incLotSize);
d2401 2
a2402 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationIncLotSize (
d2404 1
a2404 1
         incLotSize);
d2415 2
a2416 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationIncLotSize2 (
d2418 1
a2418 1
         incLotSize2);
d2429 2
a2430 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationIncLotSize2 (
d2432 1
a2432 1
         incLotSize2);
d2443 2
a2444 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationLotSize2Thresh (
d2446 1
a2446 1
         lotSize2Thresh);
d2457 2
a2458 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationLotSize2Thresh (
d2460 1
a2460 1
         lotSize2Thresh);
d2471 2
a2472 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationMinLotSize (
d2474 1
a2474 1
         minLotSize);
d2485 2
a2486 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationMinLotSize (
d2488 1
a2488 1
         minLotSize);
d2499 2
a2500 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationMinLotSize2 (
d2502 1
a2502 1
         minLotSize2);
d2513 2
a2514 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationMinLotSize2 (
d2516 1
a2516 1
         minLotSize2);
d2527 2
a2528 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationMrpExecVol (
d2530 1
a2530 1
         mrpExecVol);
d2541 2
a2542 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationMrpExecVol (
d2544 1
a2544 1
         mrpExecVol);
d2555 2
a2556 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationNBomEntries (
d2558 1
a2558 1
         nBomEntries);
d2569 2
a2570 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationNBopEntries (
d2572 1
a2572 1
         nBopEntries);
d2582 2
a2583 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperations (
d2585 1
a2585 1
         operationList);
d2596 2
a2597 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationSelForDel (
d2599 1
a2599 1
         selForDel);
d2610 2
a2611 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationTwoLevelLotSizes (
d2613 1
a2613 1
         twoLevelLotSizes);
d2624 2
a2625 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationYieldRate (
d2627 1
a2627 1
         yieldRate);
d2638 2
a2639 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationYieldRate (
d2641 1
a2641 1
         yieldRate);
d2650 3
a2652 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOptInitMethod (
         optInitMethod);
d2661 3
a2663 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOslMesgFileName (
         oslMesgFileName);
d2672 3
a2674 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOutputPrecision (
         outputPrecision);
d2683 3
a2685 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPostprocessed (
         postprocessed);
d2695 2
a2696 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartAppData (
d2698 1
a2698 1
         appData);
d2709 2
a2710 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartBelowList (
d2713 1
a2713 1
         partNameList);
d2723 2
a2724 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartBuildAheadUB (
d2726 1
a2726 1
         buildAheadUB);
d2736 2
a2737 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartBuildAsap (
d2739 1
a2739 1
         buildAsap);
d2749 2
a2750 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartBuildNstn (
d2752 1
a2752 1
         buildNstn);
d2762 2
a2763 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartConsVol (
d2765 1
a2765 1
         consVol);
d2775 2
a2776 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartConsVol (
d2778 1
a2778 1
         consVol);
d2790 2
a2791 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartConsumingBomEntry (
d2795 1
a2795 1
         bomEntryIndex);
d2808 2
a2809 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartConsumingSubsBomEntry (
d2814 1
a2814 1
         subsBomEntryIndex);
d2825 2
a2826 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartDemands (
d2829 1
a2829 1
         demandList);
d2839 2
a2840 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartCategory (
d2842 1
a2842 1
         category);
d2852 2
a2853 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartExcessVol (
d2855 1
a2855 1
         excessVol);
d2865 2
a2866 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartExcessVol (
d2868 1
a2868 1
         excessVol);
d2878 2
a2879 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartExists (
d2881 1
a2881 1
         exist);
d2891 2
a2892 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartFocusShortageVol (
d2894 1
a2894 1
         shortageVol);
d2904 2
a2905 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartFocusShortageVol (
d2907 1
a2907 1
         shortageVol);
d2917 2
a2918 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartMrpConsVol (
d2920 1
a2920 1
         mrpConsVol);
d2930 2
a2931 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartMrpConsVol (
d2933 1
a2933 1
         mrpConsVol);
d2943 2
a2944 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartMrpExcessVol (
d2946 1
a2946 1
         mrpExcessVol);
d2956 2
a2957 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartMrpExcessVol (
d2959 1
a2959 1
         mrpExcessVol);
d2969 2
a2970 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartMrpResidualVol (
d2972 1
a2972 1
         mrpResidualVol);
d2982 2
a2983 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartMrpResidualVol (
d2985 1
a2985 1
         mrpResidualVol);
d2995 2
a2996 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartNConsumingBomEntries (
d2998 1
a2998 1
         nConsumingBomEntries);
d3008 2
a3009 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartNConsumingSubsBomEntries (
d3011 1
a3011 1
         nConsumingSubsBomEntries);
d3021 2
a3022 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartNProducingBopEntries (
d3024 1
a3024 1
         nProducingBopEntries);
d3034 2
a3035 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartProdVol (
d3037 1
a3037 1
         prodVol);
d3047 2
a3048 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartProdVol (
d3050 1
a3050 1
         prodVol);
d3062 2
a3063 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartProducingBopEntry (
d3067 1
a3067 1
         bopEntryIndex);
d3077 2
a3078 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartPropRtg (
d3080 1
a3080 1
         propRtg);
d3090 2
a3091 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartReqVol (
d3093 1
a3093 1
         reqVol);
d3103 2
a3104 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartReqVol (
d3106 1
a3106 1
         reqVol);
d3116 2
a3117 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartResidualVol (
d3119 1
a3119 1
         residualVol);
d3129 2
a3130 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartResidualVol (
d3132 1
a3132 1
         residualVol);
d3142 2
a3143 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetParts (
d3145 1
a3145 1
         partList);
d3155 2
a3156 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartScrapCost (
d3158 1
a3158 1
         scrapCost);
d3168 2
a3169 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartScrapCost (
d3171 1
a3171 1
         scrapCost);
d3181 2
a3182 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartScrapVol (
d3184 1
a3184 1
         scrapVol);
d3194 2
a3195 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartScrapVol (
d3197 1
a3197 1
         scrapVol);
d3207 2
a3208 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartSelForDel (
d3210 1
a3210 1
         selForDel);
d3220 2
a3221 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartShadowPrice (
d3223 1
a3223 1
         shadowPrice);
d3233 2
a3234 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartShadowPrice (
d3236 1
a3236 1
         shadowPrice);
d3246 2
a3247 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartSingleSource (
d3249 1
a3249 1
         singleSource);
d3261 2
a3262 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartStockBounds (
d3266 1
a3266 1
         hardUpper);
d3278 2
a3279 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartStockBounds (
d3283 1
a3283 1
         hardUpper);
d3293 2
a3294 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartStockCost (
d3296 1
a3296 1
         stockCost);
d3306 2
a3307 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartStockCost (
d3309 1
a3309 1
         stockCost);
d3319 2
a3320 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartStockVol (
d3322 1
a3322 1
         stockVol);
d3332 2
a3333 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartStockVol (
d3335 1
a3335 1
         stockVol);
d3345 2
a3346 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartSupplyVol (
d3348 1
a3348 1
         supplyVol);
d3358 2
a3359 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartSupplyVol (
d3361 1
a3361 1
         supplyVol);
d3370 3
a3372 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPenExec (
         penExec);
d3381 3
a3383 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPipExists (
         pipExists);
d3396 2
a3397 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPipSeq (
d3402 1
a3402 1
         incShipVolList);
d3415 2
a3416 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPipSeq (
d3421 1
a3421 1
         incShipVolList);
d3430 3
a3432 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPipSeqFromHeur (
         pipSeqFromHeur);
d3441 3
a3443 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPerfPegging (
         perfPegging);
d3457 2
a3458 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPgdCritList (
d3464 1
a3464 1
         shipPerList);
d3473 3
a3475 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPgdCritListMode (
         pgdCritListMode);
d3484 3
a3486 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPostSolveRecovery (
         postSolveRecovery);
d3495 3
a3497 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPrefHighStockSLBs (
         prefHighStockSLBs);
d3506 3
a3508 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPreprocessed (
         preprocessed);
d3517 3
a3519 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetRespectStockSLBs (
         respectStockSLBs);
d3528 3
a3530 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetRoundReqVols (
         roundReqVols);
d3539 3
a3541 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSelSplit (
         selSplit);
d3550 3
a3552 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSkipFailures (
         skipFailures);
d3561 3
a3563 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetStockReallocation (
         stockReallocation);
d3575 2
a3576 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryAppData (
d3580 1
a3580 1
         appData);
d3592 2
a3593 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryConsRate (
d3597 1
a3597 1
         consRate);
d3609 2
a3610 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryConsRate (
d3614 1
a3614 1
         consRate);
d3626 2
a3627 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryConsumedPart (
d3631 1
a3631 1
         consumedPart);
d3643 2
a3644 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryEarliestPeriod (
d3648 1
a3648 1
         earliestPeriod);
d3660 2
a3661 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryExecPenalty (
d3665 1
a3665 1
         execPenalty);
d3677 2
a3678 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryExecPenalty (
d3682 1
a3682 1
         execPenalty);
d3694 2
a3695 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryExpAllowed (
d3699 1
a3699 1
         expAllowed);
d3711 2
a3712 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryExpNetAversion (
d3716 1
a3716 1
         expNetAversion);
d3728 2
a3729 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryExpNetAversion (
d3733 1
a3733 1
         expNetAversion);
d3745 2
a3746 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryFalloutRate (
d3750 1
a3750 1
         falloutRate);
d3762 2
a3763 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryFalloutRate (
d3767 1
a3767 1
         falloutRate);
d3779 2
a3780 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryFssSubVol (
d3784 1
a3784 1
         fssSubVol);
d3796 2
a3797 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryFssSubVol (
d3801 1
a3801 1
         fssSubVol);
d3813 2
a3814 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryImpactPeriod (
d3818 1
a3818 1
         impactPeriod);
d3830 2
a3831 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryLatestPeriod (
d3835 1
a3835 1
         latestPeriod);
d3847 2
a3848 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryMrpNetAllowed (
d3852 1
a3852 1
         mrpNetAllowed);
d3864 2
a3865 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryMrpSubVol (
d3869 1
a3869 1
         mrpSubVol);
d3881 2
a3882 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryMrpSubVol (
d3886 1
a3886 1
         mrpSubVol);
d3898 2
a3899 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryNetAllowed (
d3903 1
a3903 1
         netAllowed);
d3915 2
a3916 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryObj1SubCost (
d3920 1
a3920 1
         obj1SubCost);
d3932 2
a3933 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryObj1SubCost (
d3937 1
a3937 1
         obj1SubCost);
d3949 2
a3950 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryOffset (
d3954 1
a3954 1
         offset);
d3966 2
a3967 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryOffset (
d3971 1
a3971 1
         offset);
d3983 2
a3984 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryRoutingShare (
d3988 1
a3988 1
         routingShare);
d4000 2
a4001 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryRoutingShare (
d4005 1
a4005 1
         routingShare);
d4017 2
a4018 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntrySelForDel (
d4022 1
a4022 1
         selForDel);
d4034 2
a4035 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntrySubCost (
d4039 1
a4039 1
         subCost);
d4051 2
a4052 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntrySubCost (
d4056 1
a4056 1
         subCost);
d4068 2
a4069 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntrySubVol (
d4073 1
a4073 1
         subVol);
d4085 2
a4086 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntrySubVol (
d4090 1
a4090 1
         subVol);
d4099 3
a4101 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetTieBreakPropRt (
         tieBreakPropRt);
d4110 3
a4112 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetTitle (
         title);
d4121 3
a4123 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetTruncOffsets (
         truncOffsets);
d4132 3
a4134 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetTwoWayMultiExec (
         twoWayMultiExec);
d4143 3
a4145 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetUseFocusHorizons (
         useFocusHorizons);
d4154 3
a4156 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetUserHeurStart (
         userHeurStart);
d4165 3
a4167 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetWbounds (
         wbounds);
d4176 3
a4178 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetWbounds (
         wbounds);
d4187 3
a4189 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetWit34Compatible (
         wit34Compatible);
d4197 3
a4199 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witHeurImplode ();
d4212 2
a4213 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witIncHeurAlloc (
d4218 1
a4218 1
         incVol);
d4231 2
a4232 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witIncHeurAlloc (
d4237 1
a4237 1
         incVol);
d4251 2
a4252 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witIncHeurAllocTwme (
d4258 1
a4258 1
         asapMultiExec);
d4272 2
a4273 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witIncHeurAllocTwme (
d4279 1
a4279 1
         asapMultiExec);
d4287 3
a4289 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witInitialize ();
d4297 3
a4299 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witMrp ();
d4303 2
d4307 1
a4307 1
      WitRun * * theWitRun)
d4309 3
a4311 1
   forbidNullArg (theWitRun, "theWitRun", "witNewRun");
d4313 1
a4313 1
   * theWitRun = WitRun::newInstance ();
d4315 3
a4317 2
   return
      (* theWitRun)->witNewRun ();
d4327 3
a4329 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witOptImplode ();
d4337 3
a4339 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witOptPreprocess ();
d4349 3
a4351 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witPreprocess ();
d4359 3
a4361 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witPostprocess ();
d4369 3
a4371 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witPurgeData ();
d4380 3
a4382 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witReadData (
         fileName);
d4390 3
a4392 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witResetObjItr ();
d4401 3
a4403 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetAccAfterSoftLB (
         accAfterSoftLB);
d4412 3
a4414 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetAccAfterOptImp (
         accAfterOptImp);
d4423 3
a4425 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetAppData (
         appData);
d4434 3
a4436 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetAutoPriority (
         autoPriority);
d4447 2
a4448 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryAppData (
d4451 1
a4451 1
         appData);
d4462 2
a4463 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryConsRate (
d4466 1
a4466 1
         consRate);
d4477 2
a4478 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryConsRate (
d4481 1
a4481 1
         consRate);
d4492 2
a4493 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryEarliestPeriod (
d4496 1
a4496 1
         earliestPeriod);
d4507 2
a4508 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryExecPenalty (
d4511 1
a4511 1
         execPenalty);
d4522 2
a4523 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryExecPenalty (
d4526 1
a4526 1
         execPenalty);
d4537 2
a4538 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryFalloutRate (
d4541 1
a4541 1
         falloutRate);
d4552 2
a4553 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryFalloutRate (
d4556 1
a4556 1
         falloutRate);
d4567 2
a4568 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryLatestPeriod (
d4571 1
a4571 1
         latestPeriod);
d4582 2
a4583 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryMandEC (
d4586 1
a4586 1
         mandEC);
d4597 2
a4598 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryOffset (
d4601 1
a4601 1
         offset);
d4612 2
a4613 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryOffset (
d4616 1
a4616 1
         offset);
d4627 2
a4628 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryPropRtg (
d4631 1
a4631 1
         propRtg);
d4642 2
a4643 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryRoutingShare (
d4646 1
a4646 1
         routingShare);
d4657 2
a4658 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryRoutingShare (
d4661 1
a4661 1
         routingShare);
d4672 2
a4673 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntrySelForDel (
d4676 1
a4676 1
         selForDel);
d4687 2
a4688 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntrySingleSource (
d4691 1
a4691 1
         singleSource);
d4702 2
a4703 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBopEntryAppData (
d4706 1
a4706 1
         appData);
d4717 2
a4718 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBopEntryEarliestPeriod (
d4721 1
a4721 1
         earliestPeriod);
d4732 2
a4733 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBopEntryExpAllowed (
d4736 1
a4736 1
         expAllowed);
d4747 2
a4748 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBopEntryExpAversion (
d4751 1
a4751 1
         expAversion);
d4762 2
a4763 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBopEntryExpAversion (
d4766 1
a4766 1
         expAversion);
d4777 2
a4778 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBopEntryLatestPeriod (
d4781 1
a4781 1
         latestPeriod);
d4792 2
a4793 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBopEntryOffset (
d4796 1
a4796 1
         offset);
d4807 2
a4808 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBopEntryOffset (
d4811 1
a4811 1
         offset);
d4822 2
a4823 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBopEntryPipShare (
d4826 1
a4826 1
         pipShare);
d4837 2
a4838 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBopEntryPipShare (
d4841 1
a4841 1
         pipShare);
d4852 2
a4853 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBopEntryProductRate (
d4856 1
a4856 1
         productRate);
d4867 2
a4868 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBopEntryProductRate (
d4871 1
a4871 1
         productRate);
d4882 2
a4883 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBopEntryRoutingShare (
d4886 1
a4886 1
         routingShare);
d4891 1
a4891 1
WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryRoutingShareDbl (
d4897 2
a4898 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBopEntryRoutingShare (
d4901 1
a4901 1
         routingShare);
d4912 2
a4913 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBopEntrySelForDel (
d4916 1
a4916 1
         selForDel);
d4925 3
a4927 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetCompPrices (
         compPrices);
d4936 3
a4938 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetComputeCriticalList (
         computeCriticalList);
d4949 2
a4950 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandAppData (
d4953 1
a4953 1
         appData);
d4966 2
a4967 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandCumShipBounds (
d4972 1
a4972 1
         hardUpper);
d4977 1
a4977 1
WIT_DECLSPEC witReturnCode STDCALL witSetDemandCumShipBoundsDbl (
d4985 2
a4986 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandCumShipBounds (
d4991 1
a4991 1
         hardUpper);
d5002 2
a5003 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandCumShipReward (
d5006 1
a5006 1
         cumShipReward);
d5011 1
a5011 1
WIT_DECLSPEC witReturnCode STDCALL witSetDemandCumShipRewardDbl (
d5017 2
a5018 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandCumShipReward (
d5021 1
a5021 1
         cumShipReward);
d5032 2
a5033 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandDemandVol (
d5036 1
a5036 1
         demandVol);
d5047 2
a5048 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandDemandVol (
d5051 1
a5051 1
         demandVol);
d5062 2
a5063 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandFocusHorizon (
d5066 1
a5066 1
         focusHorizon);
d5077 2
a5078 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandFssShipVol (
d5081 1
a5081 1
         fssShipVol);
d5092 2
a5093 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandFssShipVol (
d5096 1
a5096 1
         fssShipVol);
d5107 2
a5108 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandObj1CumShipReward (
d5111 1
a5111 1
         obj1CumShipReward);
d5122 2
a5123 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandObj1CumShipReward (
d5126 1
a5126 1
         obj1CumShipReward);
d5137 2
a5138 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandObj1ShipReward (
d5141 1
a5141 1
         obj1ShipReward);
d5152 2
a5153 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandObj1ShipReward (
d5156 1
a5156 1
         obj1ShipReward);
d5167 2
a5168 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandPriority (
d5171 1
a5171 1
         priority);
d5182 2
a5183 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandSelForDel (
d5186 1
a5186 1
         selForDel);
d5197 2
a5198 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandShipLateUB (
d5201 1
a5201 1
         shipLateUB);
d5212 2
a5213 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandShipReward (
d5216 1
a5216 1
         shipReward);
d5227 2
a5228 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandShipReward (
d5231 1
a5231 1
         shipReward);
d5242 2
a5243 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandShipVol (
d5246 1
a5246 1
         shipVol);
d5257 2
a5258 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandShipVol (
d5261 1
a5261 1
         shipVol);
d5270 3
a5272 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetEquitability (
         equitablity);
d5281 3
a5283 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetExecEmptyBom (
         execEmptyBom);
d5292 3
a5294 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetExpCutoff (
         expCutoff);
d5303 3
a5305 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetExpCutoff (
         expCutoff);
d5314 3
a5316 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetForcedMultiEq (
         forcedMultiEq);
d5325 3
a5327 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetHashTableSize (
         hashTableSize);
d5336 3
a5338 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetHighPrecisionWD (
         highPrecisionWD);
d5347 3
a5349 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetIndependentOffsets (
         independentOffsets);
d5358 3
a5360 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetLotSizeTol (
         lotSizeTol);
d5369 3
a5371 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetLotSizeTol (
         lotSizeTol);
d5381 2
a5382 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetMesgFileAccessMode (
d5384 1
a5384 1
         mesgFileAccessMode);
d5394 2
a5395 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetMesgFileName (
d5397 1
a5397 1
         mesgFileName);
d5408 2
a5409 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetMesgPrintNumber (
d5412 1
a5412 1
         mesgPrintMunber);
d5423 2
a5424 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetMesgStopRunning (
d5427 1
a5427 1
         mesgStopRunning);
d5438 2
a5439 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetMesgThrowException (
d5442 1
a5442 1
         mesgThrowException);
d5453 2
a5454 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetMesgTimesPrint (
d5457 1
a5457 1
         mesgTimesPrint);
d5466 3
a5468 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetMultiExec (
         multiExec);
d5477 3
a5479 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetMultiRoute (
         multiRoute);
d5488 3
a5490 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetNPeriods (
         nPeriods);
d5499 4
a5502 6
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOslMesgFileName (
         oslMesgFileName);
   }
d5511 2
a5512 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationAppData (
d5514 1
a5514 1
         appData);
d5526 2
a5527 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationExecBounds (
d5531 1
a5531 1
         hardUpper);
d5543 2
a5544 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationExecBounds (
d5548 1
a5548 1
         hardUpper);
d5559 2
a5560 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationExecCost (
d5562 1
a5562 1
         execCost);
d5567 1
a5567 1
WIT_DECLSPEC witReturnCode STDCALL witSetOperationExecCostDbl (
d5573 2
a5574 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationExecCost (
d5576 1
a5576 1
         execCost);
d5587 2
a5588 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationExecPenalty (
d5590 1
a5590 1
         execPenalty);
d5601 2
a5602 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationExecPenalty (
d5604 1
a5604 1
         execPenalty);
d5614 2
a5615 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationExecVol (
d5617 1
a5617 1
         execVol);
d5627 2
a5628 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationExecVol (
d5630 1
a5630 1
         execVol);
d5641 2
a5642 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationIncLotSize (
d5644 1
a5644 1
         incLotSize);
d5655 2
a5656 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationIncLotSize (
d5658 1
a5658 1
         incLotSize);
d5669 2
a5670 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationIncLotSize2 (
d5672 1
a5672 1
         incLotSize2);
d5683 2
a5684 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationIncLotSize2 (
d5686 1
a5686 1
         incLotSize2);
d5697 2
a5698 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationLotSize2Thresh (
d5700 1
a5700 1
         lotSize2Thresh);
d5711 2
a5712 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationLotSize2Thresh (
d5714 1
a5714 1
         lotSize2Thresh);
d5725 2
a5726 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationMinLotSize (
d5728 1
a5728 1
         minLotSize);
d5739 2
a5740 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationMinLotSize (
d5742 1
a5742 1
         minLotSize);
d5753 2
a5754 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationMinLotSize2 (
d5756 1
a5756 1
         minLotSize2);
d5767 2
a5768 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationMinLotSize2 (
d5770 1
a5770 1
         minLotSize2);
d5781 2
a5782 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationSelForDel (
d5784 1
a5784 1
         selForDel);
d5795 2
a5796 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationTwoLevelLotSizes (
d5798 1
a5798 1
         twoLevelLotSizes);
d5809 2
a5810 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationYieldRate (
d5812 1
a5812 1
         yieldRate);
d5823 2
a5824 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationYieldRate (
d5826 1
a5826 1
         yieldRate);
d5835 3
a5837 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOptInitMethod (
         optInitMethod);
d5846 3
a5848 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOutputPrecision (
         outputPrecision);
d5858 2
a5859 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartAppData (
d5861 1
a5861 1
         appData);
d5871 2
a5872 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartBuildAheadUB (
d5874 1
a5874 1
         buildAheadUB);
d5884 2
a5885 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartBuildAsap (
d5887 1
a5887 1
         buildAsap);
d5897 2
a5898 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartBuildNstn (
d5900 1
a5900 1
         buildNstn);
d5910 2
a5911 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartPropRtg (
d5913 1
a5913 1
         propRtg);
d5923 2
a5924 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartScrapCost (
d5927 1
a5927 1
         );
d5937 2
a5938 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartScrapCost (
d5941 1
a5941 1
         );
d5951 2
a5952 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartSelForDel (
d5954 1
a5954 1
         selForDel);
d5964 2
a5965 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartSingleSource (
d5967 1
a5967 1
         singleSource);
d5979 2
a5980 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartStockBounds (
d5984 1
a5984 1
         hardUpper);
d5996 2
a5997 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartStockBounds (
d6001 1
a6001 1
         hardUpper);
d6011 2
a6012 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartStockCost (
d6014 1
a6014 1
         stockCost);
d6024 2
a6025 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartStockCost (
d6027 1
a6027 1
         stockCost);
d6037 2
a6038 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartSupplyVol (
d6040 1
a6040 1
         supplyVol);
d6045 1
a6045 1
WIT_DECLSPEC witReturnCode STDCALL witSetPartSupplyVolDbl (
d6050 2
a6051 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartSupplyVol (
d6053 1
a6053 1
         supplyVol);
d6062 3
a6064 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPenExec (
         penExec);
d6073 3
a6075 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPerfPegging (
         perfPegging);
d6084 3
a6086 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPgdCritListMode (
         pgdCritListMode);
d6095 3
a6097 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPipSeqFromHeur (
         pipSeqFromHeur);
d6106 3
a6108 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPostSolveRecovery (
         postSolveRecovery);
d6117 3
a6119 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPrefHighStockSLBs (
         prefHighStockSLBs);
d6128 3
a6130 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetRespectStockSLBs (
         respectStockSLBs);
d6139 3
a6141 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetRoundReqVols (
         roundReqVols);
d6150 3
a6152 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSelSplit (
         selSplit);
d6161 3
a6163 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSkipFailures (
         skipFailures);
d6172 3
a6174 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetStockReallocation (
         stockReallocation);
d6186 2
a6187 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryAppData (
d6191 1
a6191 1
         appData);
d6203 2
a6204 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryConsRate (
d6208 1
a6208 1
         consRate);
d6220 2
a6221 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryConsRate (
d6225 1
a6225 1
         consRate);
d6237 2
a6238 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryEarliestPeriod (
d6242 1
a6242 1
         earliestPeriod);
d6254 2
a6255 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryExecPenalty (
d6259 1
a6259 1
         execPenalty);
d6271 2
a6272 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryExecPenalty (
d6276 1
a6276 1
         execPenalty);
d6288 2
a6289 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryExpAllowed (
d6293 1
a6293 1
         expAllowed);
d6305 2
a6306 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryExpNetAversion (
d6310 1
a6310 1
         expNetAversion);
d6322 2
a6323 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryExpNetAversion (
d6327 1
a6327 1
         expNetAversion);
d6339 2
a6340 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryFalloutRate (
d6344 1
a6344 1
         falloutRate);
d6349 1
a6349 1
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryFalloutRateDbl (
d6356 2
a6357 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryFalloutRate (
d6361 1
a6361 1
         falloutRate);
d6373 2
a6374 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryLatestPeriod (
d6378 1
a6378 1
         latestPeriod);
d6390 2
a6391 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryMrpNetAllowed (
d6395 1
a6395 1
         mrpNetAllowed);
d6407 2
a6408 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryNetAllowed (
d6412 1
a6412 1
         netAllowed);
d6424 2
a6425 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryObj1SubCost (
d6429 1
a6429 1
         obj1SubCost);
d6434 1
a6434 1
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryObj1SubCostDbl (
d6441 2
a6442 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryObj1SubCost (
d6446 1
a6446 1
         obj1SubCost);
d6458 2
a6459 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryOffset (
d6463 1
a6463 1
         offset);
d6468 1
a6468 1
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryOffsetDbl (
d6475 2
a6476 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryOffset (
d6480 1
a6480 1
         offset);
d6492 2
a6493 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryRoutingShare (
d6497 1
a6497 1
         routingShare);
d6502 1
a6502 1
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryRoutingShareDbl (
d6509 2
a6510 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryRoutingShare (
d6514 1
a6514 1
         routingShare);
d6526 2
a6527 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntrySelForDel (
d6531 1
a6531 1
         selForDel);
d6543 2
a6544 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntrySubCost (
d6548 1
a6548 1
         subCost);
d6560 2
a6561 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntrySubCost (
d6565 1
a6565 1
         subCost);
d6577 2
a6578 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntrySubVol (
d6582 1
a6582 1
         subVol);
d6594 2
a6595 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntrySubVol (
d6599 1
a6599 1
         subVol);
d6608 3
a6610 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetTieBreakPropRt (
         tieBreakPropRt);
d6619 3
a6621 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetTitle (
         title);
d6630 3
a6632 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetTruncOffsets (
         truncOffsets);
d6641 3
a6643 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetTwoWayMultiExec (
         twoWayMultiExec);
d6652 3
a6654 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetUseFocusHorizons (
         useFocusHorizons);
d6663 3
a6665 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetUserHeurStart (
         userHeurStart);
d6674 3
a6676 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetWbounds (
         wbounds);
d6685 3
a6687 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetWbounds (
         wbounds);
d6696 3
a6698 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetWit34Compatible (
         wit34Compatible);
d6706 3
a6708 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witShutDownHeurAlloc ();
d6716 3
a6718 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witStartHeurAlloc ();
d6729 2
a6730 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witWriteCriticalList (
d6733 1
a6733 1
         maxListLen);
d6742 3
a6744 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witWriteData (
         fileName);
d6754 2
a6755 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witWriteExecSched (
d6757 1
a6757 1
         fileFormat);
d6767 2
a6768 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witWriteReqSched (
d6770 1
a6770 1
         fileFormat);
d6780 2
a6781 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witWriteShipSched (
d6783 1
a6783 1
         fileFormat);
d6792 4
d6802 5
a6806 2
   va_list       ap;
   witReturnCode rc;
d6808 1
a6808 1
   theWitRun->reqNoActApiCalls ();
d6810 5
a6814 1
   va_start (ap,consumedPartName);
d6816 8
a6823 5
   rc =
      theWitRun->witAddBomEntryVa (
         consumingOperationName,
         consumedPartName,
         ap);
d6825 2
a6826 1
   va_end (ap);
d6828 1
a6828 1
   return rc;
d6832 2
d6841 13
a6853 2
   va_list       ap;
   witReturnCode rc;
d6855 1
a6855 1
   theWitRun->reqNoActApiCalls ();
d6857 2
a6858 1
   va_start (ap,demandName);
d6860 3
a6862 5
   rc =
      theWitRun->witAddDemandVa (
         partName,
         demandName,
         ap);
d6864 2
a6865 1
   va_end (ap);
d6867 1
a6867 1
   return rc;
d6871 2
d6880 5
a6884 2
   va_list       ap;
   witReturnCode rc;
d6886 1
a6886 1
   theWitRun->reqNoActApiCalls ();
d6888 5
a6892 1
   va_start (ap,partCategory);
d6894 8
a6901 5
   rc =
      theWitRun->witAddPartVa (
         partName,
         partCategory,
         ap);
d6903 2
a6904 1
   va_end (ap);
d6906 1
a6906 1
   return rc;
d6910 2
d6920 14
a6933 2
   va_list       ap;
   witReturnCode rc;
d6935 1
a6935 1
   theWitRun->reqNoActApiCalls ();
d6937 2
a6938 1
   va_start (ap,consumedPartName);
d6940 3
a6942 6
   rc =
      theWitRun->witAddSubsBomEntryVa (
         operationName,
         bomEntryIndex,
         consumedPartName,
         ap);
d6944 2
a6945 1
   va_end (ap);
d6947 1
a6947 1
   return rc;
d6958 2
a6959 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryFallout (
d6962 1
a6962 1
         fallout);
d6973 2
a6974 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryPropRouting (
d6977 1
a6977 1
         propRouting);
d6988 2
a6989 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryUsageRate (
d6992 1
a6992 1
         usageRate);
d7003 2
a7004 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBomEntryUsageTime (
d7007 1
a7007 1
         time);
d7018 2
a7019 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryByProduct (
d7022 1
a7022 1
         byProduct);
d7033 2
a7034 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryProdRate (
d7037 1
a7037 1
         prodRate);
d7046 3
a7048 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetCapCost (
         capCost);
d7057 3
a7059 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetCapCost (
         capCost);
d7070 2
a7071 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandBuildAheadLimit (
d7074 1
a7074 1
         buildAheadLimit);
d7085 2
a7086 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandBuildAheadUB (
d7089 1
a7089 1
         buildAheadUB);
d7100 2
a7101 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandGrossRev (
d7104 1
a7104 1
         grossRev);
d7115 2
a7116 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandGrossRev (
d7119 1
a7119 1
         grossRev);
d7130 2
a7131 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandPrefBuildAhead (
d7134 1
a7134 1
         prefBuildAhead);
d7145 2
a7146 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetDemandShipLateLimit (
d7149 1
a7149 1
         shipLateLimit);
d7158 3
a7160 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetInvCost (
         invCost);
d7169 3
a7171 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetInvCost (
         invCost);
d7180 3
a7182 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetLocalBuildAhead (
         localBuildAhead);
d7191 3
a7193 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetLocalMultiExec (
         localMultiExec);
d7205 2
a7206 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObj2Values (
d7210 1
a7210 1
         subsValue);
d7222 2
a7223 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObj2Values (
d7227 1
a7227 1
         subsValue);
d7236 3
a7238 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObj2Winv (
         obj2Winv);
d7247 3
a7249 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObj2Winv (
         obj2Winv);
d7258 3
a7260 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObj2Wrev (
         obj2Wrev);
d7269 3
a7271 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObj2Wrev (
         obj2Wrev);
d7280 3
a7282 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObj2Wserv (
         obj2Wserv);
d7291 3
a7293 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObj2Wserv (
         obj2Wserv);
d7302 3
a7304 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObj2Wsub (
         obj2Wsub);
d7313 3
a7315 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObj2Wsub (
         obj2Wsub);
d7324 3
a7326 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetObjChoice (
         objChoice);
d7337 2
a7338 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationObj1ExecCost (
d7340 1
a7340 1
         obj1ExecCost);
d7351 2
a7352 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationObj1ExecCost (
d7354 1
a7354 1
         obj1ExecCost);
d7365 2
a7366 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationObj2AuxCost (
d7368 1
a7368 1
         obj2AuxCost);
d7379 2
a7380 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationObj2AuxCost (
d7382 1
a7382 1
         obj2AuxCost);
d7393 2
a7394 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOperationYield (
d7396 1
a7396 1
         yield);
d7405 3
a7407 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetOptWithLotSizes (
         optWithLotSizes);
d7417 2
a7418 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartBuildAheadLimit (
d7420 1
a7420 1
         buildAheadLimit);
d7430 2
a7431 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartCycleTime (
d7433 1
a7433 1
         cycleTime);
d7443 2
a7444 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartIncLotSize (
d7446 1
a7446 1
         incLotSize);
d7456 2
a7457 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartMinLotSize (
d7459 1
a7459 1
         minLotSize);
d7469 2
a7470 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartMrpProdVol (
d7472 1
a7472 1
         mrpProdVol);
d7482 2
a7483 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartNBomEntries (
d7485 1
a7485 1
         nBomEntries);
d7495 2
a7496 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartObj1ProdCost (
d7498 1
a7498 1
         obj1ProdCost);
d7508 2
a7509 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartObj1ScrapCost (
d7511 1
a7511 1
         obj1ScrapCost);
d7521 2
a7522 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartObj1ScrapCost (
d7524 1
a7524 1
         obj1ScrapCost);
d7534 2
a7535 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartObj1StockCost (
d7537 1
a7537 1
         obj1StockCost);
d7547 2
a7548 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartObj1StockCost (
d7550 1
a7550 1
         obj1StockCost);
d7562 2
a7563 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartProdBounds (
d7567 1
a7567 1
         hardUpper);
d7577 2
a7578 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartPropRouting (
d7580 1
a7580 1
         propRouting);
d7590 2
a7591 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartUnitCost (
d7593 1
a7593 1
         unitCost);
d7603 2
a7604 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartUnitCost (
d7606 1
a7606 1
         unitCost);
d7616 2
a7617 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartYield (
d7619 1
a7619 1
         yield);
d7628 3
a7630 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPeriodsPerYear (
         periodsPerYear);
d7639 3
a7641 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPeriodsPerYear (
         periodsPerYear);
d7650 3
a7652 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetStockRealloc (
         stockRealloc);
d7664 2
a7665 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryFallout (
d7669 1
a7669 1
         fallout);
d7681 2
a7682 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryObj2SubPenalty (
d7686 1
a7686 1
         obj2SubPenalty);
d7698 2
a7699 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryObj2SubPenalty (
d7703 1
a7703 1
         obj2SubPenalty);
d7715 2
a7716 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryProdVol (
d7720 1
a7720 1
         prodVol);
d7732 2
a7733 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSubsBomEntryUsageRate (
d7737 1
a7737 1
         usageRate);
d7748 2
a7749 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryFallout (
d7752 1
a7752 1
         fallout);
d7763 2
a7764 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryPropRouting (
d7767 1
a7767 1
         propRouting);
d7778 2
a7779 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryUsageRate (
d7782 1
a7782 1
         usageRate);
d7793 2
a7794 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBomEntryUsageTime (
d7797 1
a7797 1
         time);
d7808 2
a7809 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBopEntryByProduct (
d7812 1
a7812 1
         byProduct);
d7823 2
a7824 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBopEntryProdRate (
d7827 1
a7827 1
         prodRate);
d7836 3
a7838 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBuildWhenEmpty (
         buildWhenEmpty);
d7847 3
a7849 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetCapCost (
         capCost);
d7858 3
a7860 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetCapCost (
         capCost);
d7871 2
a7872 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandBuildAheadLimit (
d7875 1
a7875 1
         buildAheadLimit);
d7886 2
a7887 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandBuildAheadUB (
d7890 1
a7890 1
         buildAheadUB);
d7901 2
a7902 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandGrossRev (
d7905 1
a7905 1
         grossRev);
d7916 2
a7917 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandGrossRev (
d7920 1
a7920 1
         grossRev);
d7931 2
a7932 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandPrefBuildAhead (
d7935 1
a7935 1
         prefBuildAhead);
d7946 2
a7947 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetDemandShipLateLimit (
d7950 1
a7950 1
         shipLateLimit);
d7959 3
a7961 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetInvCost (
         invCost);
d7970 3
a7972 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetInvCost (
         invCost);
d7981 3
a7983 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetLocalBuildAhead (
         localBuildAhead);
d7992 3
a7994 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetLocalMultiExec (
         localMultiExec);
d8003 3
a8005 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetObj2Winv (
         obj2Winv);
d8014 3
a8016 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetObj2Winv (
         obj2Winv);
d8025 3
a8027 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetObj2Wrev (
         obj2Wrev);
d8036 3
a8038 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetObj2Wrev (
         obj2Wrev);
d8047 3
a8049 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetObj2Wserv (
         obj2Wserv);
d8058 3
a8060 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetObj2Wserv (
         obj2Wserv);
d8069 3
a8071 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetObj2Wsub (
         obj2Wsub);
d8080 3
a8082 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetObj2Wsub (
         obj2Wsub);
d8091 3
a8093 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetObjChoice (
         objChoice);
d8104 2
a8105 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationObj1ExecCost (
d8107 1
a8107 1
         obj1ExecCost);
d8118 2
a8119 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationObj1ExecCost (
d8121 1
a8121 1
         obj1ExecCost);
d8132 2
a8133 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationObj2AuxCost (
d8135 1
a8135 1
         obj2AuxCost);
d8146 2
a8147 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationObj2AuxCost (
d8149 1
a8149 1
         obj2AuxCost);
d8160 2
a8161 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOperationYield (
d8163 1
a8163 1
         yield);
d8172 3
a8174 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetOptWithLotSizes (
         optWithLotSizes);
d8184 2
a8185 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartBuildAheadLimit (
d8187 1
a8187 1
         buildAheadLimit);
d8197 2
a8198 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartCycleTime (
d8200 1
a8200 1
         cycleTime);
d8210 2
a8211 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartIncLotSize (
d8213 1
a8213 1
         incLotSize);
d8223 2
a8224 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartMinLotSize (
d8226 1
a8226 1
         minLotSize);
d8236 2
a8237 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartObj1ProdCost (
d8239 1
a8239 1
         obj1ProdCost);
d8249 2
a8250 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartObj1ScrapCost (
d8253 1
a8253 1
         );
d8263 2
a8264 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartObj1ScrapCost (
d8267 1
a8267 1
         );
d8277 2
a8278 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartObj1StockCost (
d8280 1
a8280 1
         obj1StockCost);
d8290 2
a8291 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartObj1StockCost (
d8293 1
a8293 1
         obj1StockCost);
d8305 2
a8306 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartProdBounds (
d8310 1
a8310 1
         hardUpper);
d8320 2
a8321 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartProdVol (
d8323 1
a8323 1
         prodVol);
d8333 2
a8334 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartPropRouting (
d8336 1
a8336 1
         propRouting);
d8346 2
a8347 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartUnitCost (
d8349 1
a8349 1
         unitCost);
d8359 2
a8360 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartUnitCost (
d8362 1
a8362 1
         unitCost);
d8372 2
a8373 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartYield (
d8375 1
a8375 1
         yield);
d8384 3
a8386 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPeriodsPerYear (
         periodsPerYear);
d8395 3
a8397 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPeriodsPerYear (
         periodsPerYear);
d8406 3
a8408 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetStockRealloc (
         stockRealloc);
d8420 2
a8421 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryFallout (
d8425 1
a8425 1
         fallout);
d8437 2
a8438 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryObj2SubPenalty (
d8442 1
a8442 1
         obj2SubPenalty);
d8454 2
a8455 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryObj2SubPenalty (
d8459 1
a8459 1
         obj2SubPenalty);
d8470 2
a8471 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryProdVol (
d8475 1
a8475 1
         prodVol);
d8487 2
a8488 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSubsBomEntryUsageRate (
d8492 1
a8492 1
         usageRate);
d8502 2
a8503 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witWriteProdSched (
d8505 1
a8505 1
         fileFormat);
d8516 3
a8518 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSolverLogFileName (
         solverLogFileName);
d8527 3
a8529 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSolverLogFileName (
         solverLogFileName);
d8538 3
a8540 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetNonMrSelSplit (
         nonMrSelSplit);
d8549 3
a8551 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetNonMrSelSplit (
         nonMrSelSplit);
d8561 2
a8562 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetPartBaSelSplit (
d8564 1
a8564 1
         baSelSplit);
d8574 2
a8575 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetPartBaSelSplit (
d8577 1
a8577 1
         baSelSplit);
d8588 2
a8589 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetBopEntryMeSelSplit (
d8592 1
a8592 1
         meSelSplit);
d8603 2
a8604 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetBopEntryMeSelSplit (
d8607 1
a8607 1
         meSelSplit);
d8616 3
a8618 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witGetSrSelSplit (
         srSelSplit);
d8627 3
a8629 5
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witSetSrSelSplit (
         srSelSplit);
d8638 3
a8640 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witNoDependantWitRunVeneersIsOne (isOne);
d8648 3
a8650 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witNoDependantWitRunVeneersDecr ();
d8658 3
a8660 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witNoDependantWitRunVeneersIncr ();
d8668 3
a8670 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witListUnissuedMsgs ();
d8674 2
d8694 3
a8696 4
   theWitRun->reqNoActApiCalls ();

   return
      theWitRun->witTestFatalMesg ();
@


1.135
log
@[multi-thread]
@
text
@d25 2
a26 5
#include <stdarg.h>

#ifdef __cplusplus
  extern "C" {
#endif
d9878 3
a9880 3
#ifdef __cplusplus
  }
#endif
@


1.134
log
@[multi-thread]
@
text
@d224 2
a225 1
   forbidNullArg (dstWitRun, "dstWitRun", "witCopyData");
@


1.133
log
@[multi-threads]
@
text
@d40 2
d43 3
a45 5
      theWitRun->
         reqNoActApiCalls ()->
            witAddBomEntry (
               consumingOperationName,
               consumedPartName);
d55 2
d58 3
a60 5
      theWitRun->
         reqNoActApiCalls ()->
            witAddBopEntry (
               producingOperationName,
               producedPartName);
d70 2
d73 3
a75 5
      theWitRun->
         reqNoActApiCalls ()->
            witAddDemand (
               demandedPartName,
               demandName);
d84 2
d87 2
a88 4
      theWitRun->
         reqNoActApiCalls ()->
            witAddOperation (
               operationName);
d98 2
d101 3
a103 5
      theWitRun->
         reqNoActApiCalls ()->
            witAddPart (
               partName,
               partCategory);
d112 2
d115 2
a116 4
      theWitRun->
         reqNoActApiCalls ()->
            witAddPartWithOperation (
               partAndOperationName);
d127 2
d130 4
a133 6
      theWitRun->
         reqNoActApiCalls ()->
            witAddSubsBomEntry (
               operationName,
               bomEntryIndex,
               consumedPartName);
d141 2
d144 1
a144 3
      theWitRun->
         reqNoActApiCalls ()->
            witAdvanceObjItr ();
d156 2
d159 5
a163 7
      theWitRun->
         reqNoActApiCalls ()->
            witAppendToPipSeq (
               partName,
               demandName,
               shipPeriod,
               incShipVol);
d175 2
d178 5
a182 7
      theWitRun->
         reqNoActApiCalls ()->
            witAppendToPipSeq (
               partName,
               demandName,
               shipPeriod,
               incShipVol);
d190 2
d193 1
a193 3
      theWitRun->
         reqNoActApiCalls ()->
            witBuildPip ();
d201 2
d204 1
a204 3
      theWitRun->
         reqNoActApiCalls ()->
            witClearPegging ();
d212 2
d215 1
a215 3
      theWitRun->
         reqNoActApiCalls ()->
            witClearPipSeq ();
d224 4
a227 5
   return
      dstWitRun->
         reqNoActApiCalls ()->
            witCopyData (
               srcWitRun);
d237 3
a239 4
   theRC =
      theWitRun->
         reqNoActApiCalls ()->
            witDeleteRun ();
d252 2
d255 2
a256 4
      theWitRun->
         reqNoActApiCalls ()->
            witDisplayData (
               fileName);
d270 2
d273 7
a279 9
      theWitRun->
         reqNoActApiCalls ()->
            witEqHeurAlloc (
               lenLists,
               demandedPartNameList,
               demandNameList,
               shipPeriodList,
               desIncVolList,
               incVolList);
d293 2
d296 7
a302 9
      theWitRun->
         reqNoActApiCalls ()->
            witEqHeurAlloc (
               lenLists,
               demandedPartNameList,
               demandNameList,
               shipPeriodList,
               desIncVolList,
               incVolList);
d317 2
d320 8
a327 10
      theWitRun->
         reqNoActApiCalls ()->
            witEqHeurAllocTwme (
               lenLists,
               demandedPartNameList,
               demandNameList,
               shipPeriodList,
               desIncVolList,
               incVolList,
               asapMultiExecList);
d342 2
d345 8
a352 10
      theWitRun->
         reqNoActApiCalls ()->
            witEqHeurAllocTwme (
               lenLists,
               demandedPartNameList,
               demandNameList,
               shipPeriodList,
               desIncVolList,
               incVolList,
               asapMultiExecList);
d362 2
d365 1
a365 3
      theWitRun->
         reqNoActApiCalls ()->
            witEvalObjectives ();
d375 2
d378 1
a378 3
      theWitRun->
         reqNoActApiCalls ()->
            witFinishHeurAlloc ();
d396 2
d399 1
a399 3
      theWitRun->
         reqNoActApiCalls ()->
            witGeneratePriorities ();
d408 2
d411 2
a412 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetAccAfterSoftLB (
               accAfterSoftLB);
d421 2
d424 2
a425 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetAccAfterOptImp (
               accAfterOptImp);
d434 2
d437 2
a438 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetAccelerated (
               accelerated);
d447 2
d450 2
a451 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetAppData (
               appData);
d460 2
d463 2
a464 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetAutoPriority (
               autoPriority);
d475 2
d478 4
a481 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryAppData (
               operationName,
               bomEntryIndex,
               appData);
d492 2
d495 4
a498 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryConsRate (
               operationName,
               bomEntryIndex,
               consRate);
d509 2
d512 4
a515 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryConsRate (
               operationName,
               bomEntryIndex,
               consRate);
d526 2
d529 4
a532 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryEarliestPeriod (
               operationName,
               bomEntryIndex,
               earliestPeriod);
d543 2
d546 4
a549 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryNSubsBomEntries (
               operationName,
               bomEntryIndex,
               nSubsBomEntries);
d560 2
d563 4
a566 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryConsumedPart (
               operationName,
               bomEntryIndex,
               consumedPartName);
d577 2
d580 4
a583 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryExecPenalty (
               operationName,
               bomEntryIndex,
               execPenalty);
d594 2
d597 4
a600 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryExecPenalty (
               operationName,
               bomEntryIndex,
               execPenalty);
d611 2
d614 4
a617 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryFalloutRate (
               operationName,
               bomEntryIndex,
               falloutRate);
d628 2
d631 4
a634 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryFalloutRate (
               operationName,
               bomEntryIndex,
               falloutRate);
d645 2
d648 4
a651 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryImpactPeriod (
               operationName,
               bomEntryIndex,
               impactPeriod);
d662 2
d665 4
a668 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryLatestPeriod (
               operationName,
               bomEntryIndex,
               latestPeriod);
d679 2
d682 4
a685 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryMandEC (
               operationName,
               bomEntryIndex,
               mandEC);
d696 2
d699 4
a702 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryOffset (
               operationName,
               bomEntryIndex,
               offset);
d713 2
d716 4
a719 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryOffset (
               operationName,
               bomEntryIndex,
               offset);
d730 2
d733 4
a736 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryPropRtg (
               operationName,
               bomEntryIndex,
               propRtg);
d747 2
d750 4
a753 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryRoutingShare (
               operationName,
               bomEntryIndex,
               routingShare);
d764 2
d767 4
a770 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryRoutingShare (
               operationName,
               bomEntryIndex,
               routingShare);
d781 2
d784 4
a787 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntrySelForDel (
               operationName,
               bomEntryIndex,
               selForDel);
d798 2
d801 4
a804 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntrySingleSource (
               operationName,
               bomEntryIndex,
               singleSource);
d816 2
d819 4
a822 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryAppData (
               operationName,
               bopEntryIndex,
               appData);
d833 2
d836 4
a839 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryEarliestPeriod (
               operationName,
               bopEntryIndex,
               earliestPeriod);
d850 2
d853 4
a856 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryExpAllowed (
               operationName,
               bopEntryIndex,
               expAllowed);
d867 2
d870 4
a873 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryExpAversion (
               operationName,
               bopEntryIndex,
               expAversion);
d884 2
d887 4
a890 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryExpAversion (
               operationName,
               bopEntryIndex,
               expAversion);
d901 2
d904 4
a907 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryImpactPeriod (
               operationName,
               bopEntryIndex,
               impactPeriod);
d918 2
d921 4
a924 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryLatestPeriod (
               operationName,
               bopEntryIndex,
               latestPeriod);
d935 2
d938 4
a941 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryOffset (
               operationName,
               bopEntryIndex,
               offset);
d952 2
d955 4
a958 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryOffset (
               operationName,
               bopEntryIndex,
               offset);
d969 2
d972 4
a975 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryPipShare (
               operationName,
               bopEntryIndex,
               pipShare);
d986 2
d989 4
a992 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryPipShare (
               operationName,
               bopEntryIndex,
               pipShare);
d1003 2
d1006 4
a1009 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryProductRate (
               operationName,
               bopEntryIndex,
               productRate);
d1020 2
d1023 4
a1026 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryProductRate (
               operationName,
               bopEntryIndex,
               productRate);
d1037 2
d1040 4
a1043 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryProducedPart (
               operationName,
               bopEntryIndex,
               producedPartName);
d1054 2
d1057 4
a1060 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryRoutingShare (
               operationName,
               bopEntryIndex,
               routingShare);
d1071 2
d1074 4
a1077 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryRoutingShare (
               operationName,
               bopEntryIndex,
               routingShare);
d1088 2
d1091 4
a1094 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntrySelForDel (
               operationName,
               bopEntryIndex,
               selForDel);
d1103 2
d1106 2
a1107 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetBuildWhenEmpty (
               buildWhenEmpty);
d1116 2
d1119 2
a1120 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetCompPrices (
               compPrices);
d1129 2
d1132 2
a1133 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetComputeCriticalList (
               computeCriticalList);
d1144 2
d1147 4
a1150 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetCriticalList (
               lenCritList,
               critPartList,
               critPeriod);
d1161 2
d1164 4
a1167 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandAppData (
               demandedPartName,
               demandName,
               appData);
d1182 2
d1185 8
a1192 10
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandConsVolPip (
               partName,
               demandName,
               shipPeriod,
               lenLists,
               partNameList,
               periodList,
               peggedVolList);
d1207 2
d1210 8
a1217 10
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandConsVolPip (
               partName,
               demandName,
               shipPeriod,
               lenLists,
               partNameList,
               periodList,
               peggedVolList);
d1230 2
d1233 6
a1238 8
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandCumShipBounds (
               demandedPartName,
               demandName,
               hardLower,
               softLower,
               hardUpper);
d1251 2
d1254 6
a1259 8
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandCumShipBounds (
               demandedPartName,
               demandName,
               hardLower,
               softLower,
               hardUpper);
d1270 2
d1273 4
a1276 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandCumShipReward (
               demandedPartName,
               demandName,
               cumShipReward);
d1287 2
d1290 4
a1293 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandCumShipReward (
               demandedPartName,
               demandName,
               cumShipReward);
d1304 2
d1307 4
a1310 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandDemandVol (
               demandedPartName,
               demandName,
               demandVol);
d1321 2
d1324 4
a1327 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandDemandVol (
               demandedPartName,
               demandName,
               demandVol);
d1342 2
d1345 8
a1352 10
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandExecVolPegging (
               demandedPartName,
               demandName,
               shipPeriod,
               lenLists,
               operationNameList,
               execPeriodList,
               peggedExecVolList);
d1367 2
d1370 8
a1377 10
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandExecVolPegging (
               demandedPartName,
               demandName,
               shipPeriod,
               lenLists,
               operationNameList,
               execPeriodList,
               peggedExecVolList);
d1392 2
d1395 8
a1402 10
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandExecVolPip (
               partName,
               demandName,
               shipPeriod,
               lenLists,
               operationNameList,
               execPeriodList,
               peggedExecVolList);
d1417 2
d1420 8
a1427 10
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandExecVolPip (
               partName,
               demandName,
               shipPeriod,
               lenLists,
               operationNameList,
               execPeriodList,
               peggedExecVolList);
d1438 2
d1441 4
a1444 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandFocusHorizon (
               demandedPartName,
               demandName,
               focusHorizon);
d1455 2
d1458 4
a1461 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandFssShipVol (
               demandedPartName,
               demandName,
               fssShipVol);
d1472 2
d1475 4
a1478 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandFssShipVol (
               demandedPartName,
               demandName,
               fssShipVol);
d1489 2
d1492 4
a1495 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandObj1CumShipReward (
               demandedPartName,
               demandName,
               obj1CumShipReward);
d1506 2
d1509 4
a1512 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandObj1CumShipReward (
               demandedPartName,
               demandName,
               obj1CumShipReward);
d1523 2
d1526 4
a1529 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandObj1ShipReward (
               demandedPartName,
               demandName,
               obj1ShipReward);
d1540 2
d1543 4
a1546 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandObj1ShipReward (
               demandedPartName,
               demandName,
               obj1ShipReward);
d1557 2
d1560 4
a1563 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandPriority (
               demandedPartName,
               demandName,
               priority);
d1578 2
d1581 8
a1588 10
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandProdVolPip (
               partName,
               demandName,
               shipPeriod,
               lenLists,
               partNameList,
               periodList,
               peggedVolList);
d1603 2
d1606 8
a1613 10
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandProdVolPip (
               partName,
               demandName,
               shipPeriod,
               lenLists,
               partNameList,
               periodList,
               peggedVolList);
d1624 2
d1627 4
a1630 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandSelForDel (
               demandedPartName,
               demandName,
               shipLateLimit);
d1641 2
d1644 4
a1647 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandShipLateUB (
               demandedPartName,
               demandName,
               shipLateUB);
d1658 2
d1661 4
a1664 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandShipReward (
               demandedPartName,
               demandName,
               shipReward);
d1675 2
d1678 4
a1681 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandShipReward (
               demandedPartName,
               demandName,
               shipReward);
d1692 2
d1695 4
a1698 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandShipVol (
               demandedPartName,
               demandName,
               shipVol);
d1709 2
d1712 4
a1715 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandShipVol (
               demandedPartName,
               demandName,
               shipVol);
d1730 2
d1733 8
a1740 10
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandSideVolPip (
               partName,
               demandName,
               shipPeriod,
               lenLists,
               partNameList,
               periodList,
               peggedVolList);
d1755 2
d1758 8
a1765 10
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandSideVolPip (
               partName,
               demandName,
               shipPeriod,
               lenLists,
               partNameList,
               periodList,
               peggedVolList);
d1782 2
d1785 10
a1794 12
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandSubVolPegging (
               demandedPartName,
               demandName,
               shipPeriod,
               lenLists,
               operationNameList,
               execPeriodList,
               bomEntryIndexList,
               subsBomEntryIndexList,
               peggedSubVolList);
d1811 2
d1814 10
a1823 12
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandSubVolPegging (
               demandedPartName,
               demandName,
               shipPeriod,
               lenLists,
               operationNameList,
               execPeriodList,
               bomEntryIndexList,
               subsBomEntryIndexList,
               peggedSubVolList);
d1840 2
d1843 10
a1852 12
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandSubVolPip (
               partName,
               demandName,
               shipPeriod,
               lenLists,
               operationNameList,
               bomEntryIndexList,
               subsBomEntryIndexList,
               execPeriodList,
               peggedSubVolList);
d1869 2
d1872 10
a1881 12
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandSubVolPip (
               partName,
               demandName,
               shipPeriod,
               lenLists,
               operationNameList,
               bomEntryIndexList,
               subsBomEntryIndexList,
               execPeriodList,
               peggedSubVolList);
d1896 2
d1899 8
a1906 10
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandSupplyVolPip (
               partName,
               demandName,
               shipPeriod,
               lenLists,
               partNameList,
               periodList,
               peggedVolList);
d1921 2
d1924 8
a1931 10
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandSupplyVolPip (
               partName,
               demandName,
               shipPeriod,
               lenLists,
               partNameList,
               periodList,
               peggedVolList);
d1940 2
d1943 2
a1944 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetEquitability (
               equitablity);
d1953 2
d1956 2
a1957 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetExecEmptyBom (
               execEmptyBom);
d1966 2
d1969 2
a1970 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetExpCutoff (
               expCutoff);
d1979 2
d1982 2
a1983 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetExpCutoff (
               expCutoff);
d1992 2
d1995 2
a1996 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetFeasible (
               feasible);
d2007 2
d2010 4
a2013 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetFocusShortageVol (
               lenList,
               partList,
               shortageVolList);
d2024 2
d2027 4
a2030 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetFocusShortageVol (
               lenList,
               partList,
               shortageVolList);
d2039 2
d2042 2
a2043 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetForcedMultiEq (
               forcedMultiEq);
d2052 2
d2055 2
a2056 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetHashTableSize (
               hashTableSize);
d2065 2
d2068 2
a2069 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetHeurAllocActive (
               heurAllocActive);
d2078 2
d2081 2
a2082 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetHighPrecisionWD (
               highPrecisionWD);
d2091 2
d2094 2
a2095 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetIndependentOffsets (
               independentOffsets);
d2104 2
d2107 2
a2108 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetLotSizeTol (
               lotSizeTol);
d2117 2
d2120 2
a2121 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetLotSizeTol (
               lotSizeTol);
d2130 2
d2133 2
a2134 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetMesgFile (
               mesgFile);
d2143 2
d2146 2
a2147 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetMesgFileAccessMode (
               mesgFileAccessMode);
d2156 2
d2159 2
a2160 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetMesgFileName (
               mesgFileName);
d2170 2
d2173 3
a2175 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetMesgPrintNumber (
               messageNumber,
               mesgPrintMunber);
d2185 2
d2188 3
a2190 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetMesgStopRunning (
               messageNumber,
               mesgStopRunning);
d2200 2
d2203 3
a2205 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetMesgThrowException (
               messageNumber,
               mesgThrowException);
d2215 2
d2218 3
a2220 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetMesgTimesPrint (
               messageNumber,
               mesgTimesPrint);
d2229 2
d2232 2
a2233 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetMultiExec (
               multiExec);
d2242 2
d2245 2
a2246 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetMultiRoute (
               multiRoute);
d2255 2
d2258 2
a2259 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetNPeriods (
               nPeriods);
d2269 2
d2272 3
a2274 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetObjItrBomEntry (
               consumingOperationName,
               bomEntryIndex);
d2284 2
d2287 3
a2289 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetObjItrBopEntry (
               producingOperationName,
               bopEntryIndex);
d2299 2
d2302 3
a2304 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetObjItrDemand (
               demandedPartName,
               demandName);
d2313 2
d2316 2
a2317 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetObjItrOperation (
               operationName);
d2326 2
d2329 2
a2330 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetObjItrPart (
               partName);
d2339 2
d2342 1
a2342 3
      theWitRun->
         reqNoActApiCalls ()->
            witGetObjItrState (objItrState);
d2353 2
d2356 4
a2359 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetObjItrSubsBomEntry (
               consumingOperationName,
               bomEntryIndex,
               subsBomEntryIndex);
d2369 2
d2372 3
a2374 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetObjValues (
               objValue,
               boundsValue);
d2384 2
d2387 3
a2389 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetObjValues (
               objValue,
               boundsValue);
d2400 2
d2403 3
a2405 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationAppData (
               operationName,
               appData);
d2417 2
d2420 5
a2424 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationExecBounds (
               operationName,
               hardLower,
               softLower,
               hardUpper);
d2436 2
d2439 5
a2443 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationExecBounds (
               operationName,
               hardLower,
               softLower,
               hardUpper);
d2454 2
d2457 3
a2459 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationExecCost (
               operationName,
               execCost);
d2470 2
d2473 3
a2475 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationExecCost (
               operationName,
               execCost);
d2486 2
d2489 3
a2491 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationExecPenalty (
               operationName,
               execPenalty);
d2502 2
d2505 3
a2507 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationExecPenalty (
               operationName,
               execPenalty);
d2518 2
d2521 3
a2523 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationExecutable (
               operationName,
               execVol);
d2534 2
d2537 3
a2539 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationExecVol (
               operationName,
               execVol);
d2550 2
d2553 3
a2555 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationExecVol (
               operationName,
               execVol);
d2565 2
d2568 3
a2570 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationExists (
               operationName,
               exist);
d2581 2
d2584 3
a2586 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationFssExecVol (
               operationName,
               fssExecVol);
d2597 2
d2600 3
a2602 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationFssExecVol (
               operationName,
               fssExecVol);
d2613 2
d2616 3
a2618 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationIncLotSize (
               operationName,
               incLotSize);
d2629 2
d2632 3
a2634 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationIncLotSize (
               operationName,
               incLotSize);
d2645 2
d2648 3
a2650 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationIncLotSize2 (
               operationName,
               incLotSize2);
d2661 2
d2664 3
a2666 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationIncLotSize2 (
               operationName,
               incLotSize2);
d2677 2
d2680 3
a2682 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationLotSize2Thresh (
               operationName,
               lotSize2Thresh);
d2693 2
d2696 3
a2698 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationLotSize2Thresh (
               operationName,
               lotSize2Thresh);
d2709 2
d2712 3
a2714 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationMinLotSize (
               operationName,
               minLotSize);
d2725 2
d2728 3
a2730 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationMinLotSize (
               operationName,
               minLotSize);
d2741 2
d2744 3
a2746 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationMinLotSize2 (
               operationName,
               minLotSize2);
d2757 2
d2760 3
a2762 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationMinLotSize2 (
               operationName,
               minLotSize2);
d2773 2
d2776 3
a2778 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationMrpExecVol (
               operationName,
               mrpExecVol);
d2789 2
d2792 3
a2794 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationMrpExecVol (
               operationName,
               mrpExecVol);
d2805 2
d2808 3
a2810 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationNBomEntries (
               operationName,
               nBomEntries);
d2821 2
d2824 3
a2826 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationNBopEntries (
               operationName,
               nBopEntries);
d2836 2
d2839 3
a2841 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperations (
               lenOperationList,
               operationList);
d2852 2
d2855 3
a2857 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationSelForDel (
               operationName,
               selForDel);
d2868 2
d2871 3
a2873 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationTwoLevelLotSizes (
               operationName,
               twoLevelLotSizes);
d2884 2
d2887 3
a2889 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationYieldRate (
               operationName,
               yieldRate);
d2900 2
d2903 3
a2905 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationYieldRate (
               operationName,
               yieldRate);
d2914 2
d2917 2
a2918 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetOptInitMethod (
               optInitMethod);
d2927 2
d2930 2
a2931 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetOslMesgFileName (
               oslMesgFileName);
d2940 2
d2943 2
a2944 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetOutputPrecision (
               outputPrecision);
d2953 2
d2956 2
a2957 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetPostprocessed (
               postprocessed);
d2967 2
d2970 3
a2972 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartAppData (
               partName,
               appData);
d2983 2
d2986 4
a2989 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartBelowList (
               partName,
               lenList,
               partNameList);
d2999 2
d3002 3
a3004 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartBuildAheadUB (
               partName,
               buildAheadUB);
d3014 2
d3017 3
a3019 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartBuildAsap (
               partName,
               buildAsap);
d3029 2
d3032 3
a3034 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartBuildNstn (
               partName,
               buildNstn);
d3044 2
d3047 3
a3049 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartConsVol (
               partName,
               consVol);
d3059 2
d3062 3
a3064 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartConsVol (
               partName,
               consVol);
d3076 2
d3079 5
a3083 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartConsumingBomEntry (
               partName,
               consIndex,
               consumingOperationName,
               bomEntryIndex);
d3096 2
d3099 6
a3104 8
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartConsumingSubsBomEntry (
               partName,
               consIndex,
               consumingOperationName,
               bomEntryIndex,
               subsBomEntryIndex);
d3115 2
d3118 4
a3121 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartDemands (
               partName,
               lenDemandList,
               demandList);
d3131 2
d3134 3
a3136 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartCategory (
               partName,
               category);
d3146 2
d3149 3
a3151 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartExcessVol (
               partName,
               excessVol);
d3161 2
d3164 3
a3166 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartExcessVol (
               partName,
               excessVol);
d3176 2
d3179 3
a3181 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartExists (
               partName,
               exist);
d3191 2
d3194 3
a3196 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartFocusShortageVol (
               partName,
               shortageVol);
d3206 2
d3209 3
a3211 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartFocusShortageVol (
               partName,
               shortageVol);
d3221 2
d3224 3
a3226 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartMrpConsVol (
               partName,
               mrpConsVol);
d3236 2
d3239 3
a3241 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartMrpConsVol (
               partName,
               mrpConsVol);
d3251 2
d3254 3
a3256 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartMrpExcessVol (
               partName,
               mrpExcessVol);
d3266 2
d3269 3
a3271 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartMrpExcessVol (
               partName,
               mrpExcessVol);
d3281 2
d3284 3
a3286 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartMrpResidualVol (
               partName,
               mrpResidualVol);
d3296 2
d3299 3
a3301 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartMrpResidualVol (
               partName,
               mrpResidualVol);
d3311 2
d3314 3
a3316 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartNConsumingBomEntries (
               partName,
               nConsumingBomEntries);
d3326 2
d3329 3
a3331 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartNConsumingSubsBomEntries (
               partName,
               nConsumingSubsBomEntries);
d3341 2
d3344 3
a3346 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartNProducingBopEntries (
               partName,
               nProducingBopEntries);
d3356 2
d3359 3
a3361 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartProdVol (
               partName,
               prodVol);
d3371 2
d3374 3
a3376 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartProdVol (
               partName,
               prodVol);
d3388 2
d3391 5
a3395 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartProducingBopEntry (
               partName,
               prodIndex,
               producingOperationName,
               bopEntryIndex);
d3405 2
d3408 3
a3410 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartPropRtg (
               partName,
               propRtg);
d3420 2
d3423 3
a3425 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartReqVol (
               partName,
               reqVol);
d3435 2
d3438 3
a3440 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartReqVol (
               partName,
               reqVol);
d3450 2
d3453 3
a3455 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartResidualVol (
               partName,
               residualVol);
d3465 2
d3468 3
a3470 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartResidualVol (
               partName,
               residualVol);
d3480 2
d3483 3
a3485 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetParts (
               lenPartList,
               partList);
d3495 2
d3498 3
a3500 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartScrapCost (
               partName,
               scrapCost);
d3510 2
d3513 3
a3515 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartScrapCost (
               partName,
               scrapCost);
d3525 2
d3528 3
a3530 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartScrapVol (
               partName,
               scrapVol);
d3540 2
d3543 3
a3545 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartScrapVol (
               partName,
               scrapVol);
d3555 2
d3558 3
a3560 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartSelForDel (
               partName,
               selForDel);
d3570 2
d3573 3
a3575 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartShadowPrice (
               partName,
               shadowPrice);
d3585 2
d3588 3
a3590 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartShadowPrice (
               partName,
               shadowPrice);
d3600 2
d3603 3
a3605 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartSingleSource (
               partName,
               singleSource);
d3617 2
d3620 5
a3624 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartStockBounds (
               partName,
               hardLower,
               softLower,
               hardUpper);
d3636 2
d3639 5
a3643 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartStockBounds (
               partName,
               hardLower,
               softLower,
               hardUpper);
d3653 2
d3656 3
a3658 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartStockCost (
               partName,
               stockCost);
d3668 2
d3671 3
a3673 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartStockCost (
               partName,
               stockCost);
d3683 2
d3686 3
a3688 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartStockVol (
               partName,
               stockVol);
d3698 2
d3701 3
a3703 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartStockVol (
               partName,
               stockVol);
d3713 2
d3716 3
a3718 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartSupplyVol (
               partName,
               supplyVol);
d3728 2
d3731 3
a3733 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartSupplyVol (
               partName,
               supplyVol);
d3742 2
d3745 2
a3746 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetPenExec (
               penExec);
d3755 2
d3758 2
a3759 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetPipExists (
               pipExists);
d3772 2
d3775 6
a3780 8
      theWitRun->
         reqNoActApiCalls ()->
            witGetPipSeq (
               lenLists,
               partNameList,
               demandNameList,
               shipPerList,
               incShipVolList);
d3793 2
d3796 6
a3801 8
      theWitRun->
         reqNoActApiCalls ()->
            witGetPipSeq (
               lenLists,
               partNameList,
               demandNameList,
               shipPerList,
               incShipVolList);
d3810 2
d3813 2
a3814 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetPipSeqFromHeur (
               pipSeqFromHeur);
d3823 2
d3826 2
a3827 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetPerfPegging (
               perfPegging);
d3841 2
d3844 7
a3850 9
      theWitRun->
         reqNoActApiCalls ()->
            witGetPgdCritList (
               lenLists,
               critPartNameList,
               critPerList,
               demPartNameList,
               demandNameList,
               shipPerList);
d3859 2
d3862 2
a3863 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetPgdCritListMode (
               pgdCritListMode);
d3872 2
d3875 2
a3876 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetPostSolveRecovery (
               postSolveRecovery);
d3885 2
d3888 2
a3889 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetPrefHighStockSLBs (
               prefHighStockSLBs);
d3898 2
d3901 2
a3902 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetPreprocessed (
               preprocessed);
d3911 2
d3914 2
a3915 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetRespectStockSLBs (
               respectStockSLBs);
d3924 2
d3927 2
a3928 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetRoundReqVols (
               roundReqVols);
d3937 2
d3940 2
a3941 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetSelSplit (
               selSplit);
d3950 2
d3953 2
a3954 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetSkipFailures (
               skipFailures);
d3963 2
d3966 2
a3967 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetStockReallocation (
               stockReallocation);
d3979 2
d3982 5
a3986 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryAppData (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               appData);
d3998 2
d4001 5
a4005 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryConsRate (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               consRate);
d4017 2
d4020 5
a4024 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryConsRate (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               consRate);
d4036 2
d4039 5
a4043 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryConsumedPart (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               consumedPart);
d4055 2
d4058 5
a4062 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryEarliestPeriod (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               earliestPeriod);
d4074 2
d4077 5
a4081 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryExecPenalty (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               execPenalty);
d4093 2
d4096 5
a4100 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryExecPenalty (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               execPenalty);
d4112 2
d4115 5
a4119 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryExpAllowed (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               expAllowed);
d4131 2
d4134 5
a4138 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryExpNetAversion (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               expNetAversion);
d4150 2
d4153 5
a4157 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryExpNetAversion (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               expNetAversion);
d4169 2
d4172 5
a4176 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryFalloutRate (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               falloutRate);
d4188 2
d4191 5
a4195 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryFalloutRate (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               falloutRate);
d4207 2
d4210 5
a4214 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryFssSubVol (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               fssSubVol);
d4226 2
d4229 5
a4233 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryFssSubVol (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               fssSubVol);
d4245 2
d4248 5
a4252 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryImpactPeriod (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               impactPeriod);
d4264 2
d4267 5
a4271 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryLatestPeriod (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               latestPeriod);
d4283 2
d4286 5
a4290 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryMrpNetAllowed (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               mrpNetAllowed);
d4302 2
d4305 5
a4309 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryMrpSubVol (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               mrpSubVol);
d4321 2
d4324 5
a4328 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryMrpSubVol (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               mrpSubVol);
d4340 2
d4343 5
a4347 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryNetAllowed (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               netAllowed);
d4359 2
d4362 5
a4366 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryObj1SubCost (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               obj1SubCost);
d4378 2
d4381 5
a4385 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryObj1SubCost (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               obj1SubCost);
d4397 2
d4400 5
a4404 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryOffset (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               offset);
d4416 2
d4419 5
a4423 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryOffset (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               offset);
d4435 2
d4438 5
a4442 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryRoutingShare (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               routingShare);
d4454 2
d4457 5
a4461 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryRoutingShare (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               routingShare);
d4473 2
d4476 5
a4480 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntrySelForDel (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               selForDel);
d4492 2
d4495 5
a4499 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntrySubCost (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               subCost);
d4511 2
d4514 5
a4518 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntrySubCost (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               subCost);
d4530 2
d4533 5
a4537 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntrySubVol (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               subVol);
d4549 2
d4552 5
a4556 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntrySubVol (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               subVol);
d4565 2
d4568 2
a4569 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetTieBreakPropRt (
               tieBreakPropRt);
d4578 2
d4581 2
a4582 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetTitle (
               title);
d4591 2
d4594 2
a4595 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetTruncOffsets (
               truncOffsets);
d4604 2
d4607 2
a4608 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetTwoWayMultiExec (
               twoWayMultiExec);
d4617 2
d4620 2
a4621 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetUseFocusHorizons (
               useFocusHorizons);
d4630 2
d4633 2
a4634 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetUserHeurStart (
               userHeurStart);
d4643 2
d4646 2
a4647 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetWbounds (
               wbounds);
d4656 2
d4659 2
a4660 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetWbounds (
               wbounds);
d4669 2
d4672 2
a4673 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetWit34Compatible (
               wit34Compatible);
d4681 2
d4684 1
a4684 3
      theWitRun->
         reqNoActApiCalls ()->
            witHeurImplode ();
d4697 2
d4700 6
a4705 8
      theWitRun->
         reqNoActApiCalls ()->
            witIncHeurAlloc (
               demandedPartName,
               demandName,
               shipPeriod,
               desIncVol,
               incVol);
d4718 2
d4721 6
a4726 8
      theWitRun->
         reqNoActApiCalls ()->
            witIncHeurAlloc (
               demandedPartName,
               demandName,
               shipPeriod,
               desIncVol,
               incVol);
d4740 2
d4743 7
a4749 9
      theWitRun->
         reqNoActApiCalls ()->
            witIncHeurAllocTwme (
               demandedPartName,
               demandName,
               shipPeriod,
               desIncVol,
               incVol,
               asapMultiExec);
d4763 2
d4766 7
a4772 9
      theWitRun->
         reqNoActApiCalls ()->
            witIncHeurAllocTwme (
               demandedPartName,
               demandName,
               shipPeriod,
               desIncVol,
               incVol,
               asapMultiExec);
d4780 2
d4783 1
a4783 3
      theWitRun->
         reqNoActApiCalls ()->
            witInitialize ();
d4791 2
d4794 1
a4794 3
      theWitRun->
         reqNoActApiCalls ()->
            witMrp ();
d4807 1
a4807 3
      (* theWitRun)->
         reqNoActApiCalls ()->
            witNewRun ();
d4817 2
d4820 1
a4820 3
      theWitRun->
         reqNoActApiCalls ()->
            witOptImplode ();
d4828 2
d4831 1
a4831 3
      theWitRun->
         reqNoActApiCalls ()->
            witOptPreprocess ();
d4841 2
d4844 1
a4844 3
      theWitRun->
         reqNoActApiCalls ()->
            witPreprocess ();
d4852 2
d4855 1
a4855 3
      theWitRun->
         reqNoActApiCalls ()->
            witPostprocess ();
d4863 2
d4866 1
a4866 3
      theWitRun->
         reqNoActApiCalls ()->
            witPurgeData ();
d4875 2
d4878 2
a4879 4
      theWitRun->
         reqNoActApiCalls ()->
            witReadData (
               fileName);
d4887 2
d4890 1
a4890 3
      theWitRun->
         reqNoActApiCalls ()->
            witResetObjItr ();
d4899 2
d4902 2
a4903 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetAccAfterSoftLB (
               accAfterSoftLB);
d4912 2
d4915 2
a4916 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetAccAfterOptImp (
               accAfterOptImp);
d4925 2
d4928 2
a4929 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetAppData (
               appData);
d4938 2
d4941 2
a4942 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetAutoPriority (
               autoPriority);
d4953 2
d4956 4
a4959 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryAppData (
               operationName,
               bomEntryIndex,
               appData);
d4970 2
d4973 4
a4976 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryConsRate (
               operationName,
               bomEntryIndex,
               consRate);
d4987 2
d4990 4
a4993 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryConsRate (
               operationName,
               bomEntryIndex,
               consRate);
d5004 2
d5007 4
a5010 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryEarliestPeriod (
               operationName,
               bomEntryIndex,
               earliestPeriod);
d5021 2
d5024 4
a5027 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryExecPenalty (
               operationName,
               bomEntryIndex,
               execPenalty);
d5038 2
d5041 4
a5044 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryExecPenalty (
               operationName,
               bomEntryIndex,
               execPenalty);
d5055 2
d5058 4
a5061 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryFalloutRate (
               operationName,
               bomEntryIndex,
               falloutRate);
d5072 2
d5075 4
a5078 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryFalloutRate (
               operationName,
               bomEntryIndex,
               falloutRate);
d5089 2
d5092 4
a5095 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryLatestPeriod (
               operationName,
               bomEntryIndex,
               latestPeriod);
d5106 2
d5109 4
a5112 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryMandEC (
               operationName,
               bomEntryIndex,
               mandEC);
d5123 2
d5126 4
a5129 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryOffset (
               operationName,
               bomEntryIndex,
               offset);
d5140 2
d5143 4
a5146 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryOffset (
               operationName,
               bomEntryIndex,
               offset);
d5157 2
d5160 4
a5163 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryPropRtg (
               operationName,
               bomEntryIndex,
               propRtg);
d5174 2
d5177 4
a5180 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryRoutingShare (
               operationName,
               bomEntryIndex,
               routingShare);
d5191 2
d5194 4
a5197 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryRoutingShare (
               operationName,
               bomEntryIndex,
               routingShare);
d5208 2
d5211 4
a5214 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntrySelForDel (
               operationName,
               bomEntryIndex,
               selForDel);
d5225 2
d5228 4
a5231 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntrySingleSource (
               operationName,
               bomEntryIndex,
               singleSource);
d5242 2
d5245 4
a5248 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBopEntryAppData (
               operationName,
               bopEntryIndex,
               appData);
d5259 2
d5262 4
a5265 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBopEntryEarliestPeriod (
               operationName,
               bopEntryIndex,
               earliestPeriod);
d5276 2
d5279 4
a5282 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBopEntryExpAllowed (
               operationName,
               bopEntryIndex,
               expAllowed);
d5293 2
d5296 4
a5299 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBopEntryExpAversion (
               operationName,
               bopEntryIndex,
               expAversion);
d5310 2
d5313 4
a5316 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBopEntryExpAversion (
               operationName,
               bopEntryIndex,
               expAversion);
d5327 2
d5330 4
a5333 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBopEntryLatestPeriod (
               operationName,
               bopEntryIndex,
               latestPeriod);
d5344 2
d5347 4
a5350 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBopEntryOffset (
               operationName,
               bopEntryIndex,
               offset);
d5361 2
d5364 4
a5367 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBopEntryOffset (
               operationName,
               bopEntryIndex,
               offset);
d5378 2
d5381 4
a5384 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBopEntryPipShare (
               operationName,
               bopEntryIndex,
               pipShare);
d5395 2
d5398 4
a5401 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBopEntryPipShare (
               operationName,
               bopEntryIndex,
               pipShare);
d5412 2
d5415 4
a5418 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBopEntryProductRate (
               operationName,
               bopEntryIndex,
               productRate);
d5429 2
d5432 4
a5435 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBopEntryProductRate (
               operationName,
               bopEntryIndex,
               productRate);
d5446 2
d5449 4
a5452 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBopEntryRoutingShare (
               operationName,
               bopEntryIndex,
               routingShare);
d5463 2
d5466 4
a5469 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBopEntryRoutingShare (
               operationName,
               bopEntryIndex,
               routingShare);
d5480 2
d5483 4
a5486 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBopEntrySelForDel (
               operationName,
               bopEntryIndex,
               selForDel);
d5495 2
d5498 2
a5499 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetCompPrices (
               compPrices);
d5508 2
d5511 2
a5512 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetComputeCriticalList (
               computeCriticalList);
d5523 2
d5526 4
a5529 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandAppData (
               partName,
               demandName,
               appData);
d5542 2
d5545 6
a5550 8
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandCumShipBounds (
               partName,
               demandName,
               hardLower,
               softLower,
               hardUpper);
d5563 2
d5566 6
a5571 8
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandCumShipBounds (
               partName,
               demandName,
               hardLower,
               softLower,
               hardUpper);
d5582 2
d5585 4
a5588 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandCumShipReward (
               partName,
               demandName,
               cumShipReward);
d5599 2
d5602 4
a5605 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandCumShipReward (
               partName,
               demandName,
               cumShipReward);
d5616 2
d5619 4
a5622 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandDemandVol (
               partName,
               demandName,
               demandVol);
d5633 2
d5636 4
a5639 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandDemandVol (
               partName,
               demandName,
               demandVol);
d5650 2
d5653 4
a5656 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandFocusHorizon (
               partName,
               demandName,
               focusHorizon);
d5667 2
d5670 4
a5673 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandFssShipVol (
               partName,
               demandName,
               fssShipVol);
d5684 2
d5687 4
a5690 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandFssShipVol (
               partName,
               demandName,
               fssShipVol);
d5701 2
d5704 4
a5707 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandObj1CumShipReward (
               partName,
               demandName,
               obj1CumShipReward);
d5718 2
d5721 4
a5724 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandObj1CumShipReward (
               partName,
               demandName,
               obj1CumShipReward);
d5735 2
d5738 4
a5741 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandObj1ShipReward (
               partName,
               demandName,
               obj1ShipReward);
d5752 2
d5755 4
a5758 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandObj1ShipReward (
               partName,
               demandName,
               obj1ShipReward);
d5769 2
d5772 4
a5775 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandPriority (
               partName,
               demandName,
               priority);
d5786 2
d5789 4
a5792 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandSelForDel (
               partName,
               demandName,
               selForDel);
d5803 2
d5806 4
a5809 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandShipLateUB (
               partName,
               demandName,
               shipLateUB);
d5820 2
d5823 4
a5826 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandShipReward (
               partName,
               demandName,
               shipReward);
d5837 2
d5840 4
a5843 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandShipReward (
               partName,
               demandName,
               shipReward);
d5854 2
d5857 4
a5860 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandShipVol (
               partName,
               demandName,
               shipVol);
d5871 2
d5874 4
a5877 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandShipVol (
               partName,
               demandName,
               shipVol);
d5886 2
d5889 2
a5890 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetEquitability (
               equitablity);
d5899 2
d5902 2
a5903 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetExecEmptyBom (
               execEmptyBom);
d5912 2
d5915 2
a5916 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetExpCutoff (
               expCutoff);
d5925 2
d5928 2
a5929 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetExpCutoff (
               expCutoff);
d5938 2
d5941 2
a5942 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetForcedMultiEq (
               forcedMultiEq);
d5951 2
d5954 2
a5955 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetHashTableSize (
               hashTableSize);
d5964 2
d5967 2
a5968 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetHighPrecisionWD (
               highPrecisionWD);
d5977 2
d5980 2
a5981 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetIndependentOffsets (
               independentOffsets);
d5990 2
d5993 2
a5994 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetLotSizeTol (
               lotSizeTol);
d6003 2
d6006 2
a6007 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetLotSizeTol (
               lotSizeTol);
d6017 2
d6020 3
a6022 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetMesgFileAccessMode (
               quiet,
               mesgFileAccessMode);
d6032 2
d6035 3
a6037 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetMesgFileName (
               quiet,
               mesgFileName);
d6048 2
d6051 4
a6054 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetMesgPrintNumber (
               quiet,
               messageNumber,
               mesgPrintMunber);
d6065 2
d6068 4
a6071 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetMesgStopRunning (
               quiet,
               messageNumber,
               mesgStopRunning);
d6082 2
d6085 4
a6088 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetMesgThrowException (
               quiet,
               messageNumber,
               mesgThrowException);
d6099 2
d6102 4
a6105 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetMesgTimesPrint (
               quiet,
               messageNumber,
               mesgTimesPrint);
d6114 2
d6117 2
a6118 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetMultiExec (
               multiExec);
d6127 2
d6130 2
a6131 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetMultiRoute (
               multiRoute);
d6140 2
d6143 2
a6144 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetNPeriods (
               nPeriods);
d6153 2
d6156 2
a6157 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetOslMesgFileName (
               oslMesgFileName);
d6167 2
d6170 3
a6172 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationAppData (
               operationName,
               appData);
d6184 2
d6187 5
a6191 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationExecBounds (
               operationName,
               hardLower,
               softLower,
               hardUpper);
d6203 2
d6206 5
a6210 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationExecBounds (
               operationName,
               hardLower,
               softLower,
               hardUpper);
d6221 2
d6224 3
a6226 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationExecCost (
               operationName,
               execCost);
d6237 2
d6240 3
a6242 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationExecCost (
               operationName,
               execCost);
d6253 2
d6256 3
a6258 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationExecPenalty (
               operationName,
               execPenalty);
d6269 2
d6272 3
a6274 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationExecPenalty (
               operationName,
               execPenalty);
d6284 2
d6287 3
a6289 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationExecVol (
               operationName,
               execVol);
d6299 2
d6302 3
a6304 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationExecVol (
               operationName,
               execVol);
d6315 2
d6318 3
a6320 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationIncLotSize (
               operationName,
               incLotSize);
d6331 2
d6334 3
a6336 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationIncLotSize (
               operationName,
               incLotSize);
d6347 2
d6350 3
a6352 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationIncLotSize2 (
               operationName,
               incLotSize2);
d6363 2
d6366 3
a6368 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationIncLotSize2 (
               operationName,
               incLotSize2);
d6379 2
d6382 3
a6384 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationLotSize2Thresh (
               operationName,
               lotSize2Thresh);
d6395 2
d6398 3
a6400 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationLotSize2Thresh (
               operationName,
               lotSize2Thresh);
d6411 2
d6414 3
a6416 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationMinLotSize (
               operationName,
               minLotSize);
d6427 2
d6430 3
a6432 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationMinLotSize (
               operationName,
               minLotSize);
d6443 2
d6446 3
a6448 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationMinLotSize2 (
               operationName,
               minLotSize2);
d6459 2
d6462 3
a6464 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationMinLotSize2 (
               operationName,
               minLotSize2);
d6475 2
d6478 3
a6480 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationSelForDel (
               operationName,
               selForDel);
d6491 2
d6494 3
a6496 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationTwoLevelLotSizes (
               operationName,
               twoLevelLotSizes);
d6507 2
d6510 3
a6512 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationYieldRate (
               operationName,
               yieldRate);
d6523 2
d6526 3
a6528 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationYieldRate (
               operationName,
               yieldRate);
d6537 2
d6540 2
a6541 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetOptInitMethod (
               optInitMethod);
d6550 2
d6553 2
a6554 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetOutputPrecision (
               outputPrecision);
d6564 2
d6567 3
a6569 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartAppData (
               partName,
               appData);
d6579 2
d6582 3
a6584 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartBuildAheadUB (
               partName,
               buildAheadUB);
d6594 2
d6597 3
a6599 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartBuildAsap (
               partName,
               buildAsap);
d6609 2
d6612 3
a6614 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartBuildNstn (
               partName,
               buildNstn);
d6624 2
d6627 3
a6629 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartPropRtg (
               partName,
               propRtg);
d6639 2
d6642 3
a6644 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartScrapCost (
               partName,
               scrapCost
d6655 2
d6658 3
a6660 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartScrapCost (
               partName,
               scrapCost
d6671 2
d6674 3
a6676 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartSelForDel (
               partName,
               selForDel);
d6686 2
d6689 3
a6691 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartSingleSource (
               partName,
               singleSource);
d6703 2
d6706 5
a6710 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartStockBounds (
               partName,
               hardLower,
               softLower,
               hardUpper);
d6722 2
d6725 5
a6729 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartStockBounds (
               partName,
               hardLower,
               softLower,
               hardUpper);
d6739 2
d6742 3
a6744 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartStockCost (
               partName,
               stockCost);
d6754 2
d6757 3
a6759 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartStockCost (
               partName,
               stockCost);
d6769 2
d6772 3
a6774 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartSupplyVol (
               partName,
               supplyVol);
d6784 2
d6787 3
a6789 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartSupplyVol (
               partName,
               supplyVol);
d6798 2
d6801 2
a6802 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetPenExec (
               penExec);
d6811 2
d6814 2
a6815 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetPerfPegging (
               perfPegging);
d6824 2
d6827 2
a6828 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetPgdCritListMode (
               pgdCritListMode);
d6837 2
d6840 2
a6841 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetPipSeqFromHeur (
               pipSeqFromHeur);
d6850 2
d6853 2
a6854 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetPostSolveRecovery (
               postSolveRecovery);
d6863 2
d6866 2
a6867 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetPrefHighStockSLBs (
               prefHighStockSLBs);
d6876 2
d6879 2
a6880 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetRespectStockSLBs (
               respectStockSLBs);
d6889 2
d6892 2
a6893 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetRoundReqVols (
               roundReqVols);
d6902 2
d6905 2
a6906 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetSelSplit (
               selSplit);
d6915 2
d6918 2
a6919 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetSkipFailures (
               skipFailures);
d6928 2
d6931 2
a6932 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetStockReallocation (
               stockReallocation);
d6944 2
d6947 5
a6951 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryAppData (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               appData);
d6963 2
d6966 5
a6970 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryConsRate (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               consRate);
d6982 2
d6985 5
a6989 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryConsRate (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               consRate);
d7001 2
d7004 5
a7008 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryEarliestPeriod (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               earliestPeriod);
d7020 2
d7023 5
a7027 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryExecPenalty (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               execPenalty);
d7039 2
d7042 5
a7046 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryExecPenalty (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               execPenalty);
d7058 2
d7061 5
a7065 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryExpAllowed (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               expAllowed);
d7077 2
d7080 5
a7084 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryExpNetAversion (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               expNetAversion);
d7096 2
d7099 5
a7103 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryExpNetAversion (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               expNetAversion);
d7115 2
d7118 5
a7122 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryFalloutRate (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               falloutRate);
d7134 2
d7137 5
a7141 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryFalloutRate (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               falloutRate);
d7153 2
d7156 5
a7160 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryLatestPeriod (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               latestPeriod);
d7172 2
d7175 5
a7179 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryMrpNetAllowed (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               mrpNetAllowed);
d7191 2
d7194 5
a7198 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryNetAllowed (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               netAllowed);
d7210 2
d7213 5
a7217 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryObj1SubCost (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               obj1SubCost);
d7229 2
d7232 5
a7236 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryObj1SubCost (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               obj1SubCost);
d7248 2
d7251 5
a7255 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryOffset (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               offset);
d7267 2
d7270 5
a7274 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryOffset (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               offset);
d7286 2
d7289 5
a7293 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryRoutingShare (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               routingShare);
d7305 2
d7308 5
a7312 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryRoutingShare (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               routingShare);
d7324 2
d7327 5
a7331 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntrySelForDel (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               selForDel);
d7343 2
d7346 5
a7350 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntrySubCost (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               subCost);
d7362 2
d7365 5
a7369 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntrySubCost (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               subCost);
d7381 2
d7384 5
a7388 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntrySubVol (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               subVol);
d7400 2
d7403 5
a7407 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntrySubVol (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               subVol);
d7416 2
d7419 2
a7420 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetTieBreakPropRt (
               tieBreakPropRt);
d7429 2
d7432 2
a7433 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetTitle (
               title);
d7442 2
d7445 2
a7446 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetTruncOffsets (
               truncOffsets);
d7455 2
d7458 2
a7459 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetTwoWayMultiExec (
               twoWayMultiExec);
d7468 2
d7471 2
a7472 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetUseFocusHorizons (
               useFocusHorizons);
d7481 2
d7484 2
a7485 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetUserHeurStart (
               userHeurStart);
d7494 2
d7497 2
a7498 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetWbounds (
               wbounds);
d7507 2
d7510 2
a7511 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetWbounds (
               wbounds);
d7520 2
d7523 2
a7524 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetWit34Compatible (
               wit34Compatible);
d7532 2
d7535 1
a7535 3
      theWitRun->
         reqNoActApiCalls ()->
            witShutDownHeurAlloc ();
d7543 2
d7546 1
a7546 3
      theWitRun->
         reqNoActApiCalls ()->
            witStartHeurAlloc ();
d7557 2
d7560 4
a7563 6
      theWitRun->
         reqNoActApiCalls ()->
            witWriteCriticalList (
               fileName,
               fileFormat,
               maxListLen);
d7572 2
d7575 2
a7576 4
      theWitRun->
         reqNoActApiCalls ()->
            witWriteData (
               fileName);
d7586 2
d7589 3
a7591 5
      theWitRun->
         reqNoActApiCalls ()->
            witWriteExecSched (
               fileName,
               fileFormat);
d7601 2
d7604 3
a7606 5
      theWitRun->
         reqNoActApiCalls ()->
            witWriteReqSched (
               fileName,
               fileFormat);
d7616 2
d7619 3
a7621 5
      theWitRun->
         reqNoActApiCalls ()->
            witWriteShipSched (
               fileName,
               fileFormat);
d7639 2
d7644 4
a7647 6
      theWitRun->
         reqNoActApiCalls ()->
            witAddBomEntryVa (
               consumingOperationName,
               consumedPartName,
               ap);
d7665 2
d7670 4
a7673 6
      theWitRun->
         reqNoActApiCalls ()->
            witAddDemandVa (
               partName,
               demandName,
               ap);
d7691 2
d7696 4
a7699 6
      theWitRun->
         reqNoActApiCalls ()->
            witAddPartVa (
               partName,
               partCategory,
               ap);
d7718 2
d7723 5
a7727 7
      theWitRun->
         reqNoActApiCalls ()->
            witAddSubsBomEntryVa (
               operationName,
               bomEntryIndex,
               consumedPartName,
               ap);
d7742 2
d7745 4
a7748 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryFallout (
               operationName,
               bomEntryIndex,
               fallout);
d7759 2
d7762 4
a7765 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryPropRouting (
               operationName,
               bomEntryIndex,
               propRouting);
d7776 2
d7779 4
a7782 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryUsageRate (
               operationName,
               bomEntryIndex,
               usageRate);
d7793 2
d7796 4
a7799 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBomEntryUsageTime (
               operationName,
               bomEntryIndex,
               time);
d7810 2
d7813 4
a7816 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryByProduct (
               operationName,
               bopEntryIndex,
               byProduct);
d7827 2
d7830 4
a7833 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryProdRate (
               operationName,
               bopEntryIndex,
               prodRate);
d7842 2
d7845 2
a7846 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetCapCost (
               capCost);
d7855 2
d7858 2
a7859 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetCapCost (
               capCost);
d7870 2
d7873 4
a7876 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandBuildAheadLimit (
               partName,
               demandName,
               buildAheadLimit);
d7887 2
d7890 4
a7893 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandBuildAheadUB (
               partName,
               demandName,
               buildAheadUB);
d7904 2
d7907 4
a7910 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandGrossRev (
               demandedPartName,
               demandName,
               grossRev);
d7921 2
d7924 4
a7927 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandGrossRev (
               demandedPartName,
               demandName,
               grossRev);
d7938 2
d7941 4
a7944 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandPrefBuildAhead (
               partName,
               demandName,
               prefBuildAhead);
d7955 2
d7958 4
a7961 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetDemandShipLateLimit (
               partName,
               demandName,
               shipLateLimit);
d7970 2
d7973 2
a7974 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetInvCost (
               invCost);
d7983 2
d7986 2
a7987 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetInvCost (
               invCost);
d7996 2
d7999 2
a8000 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetLocalBuildAhead (
               localBuildAhead);
d8009 2
d8012 2
a8013 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetLocalMultiExec (
               localMultiExec);
d8025 2
d8028 5
a8032 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetObj2Values (
               revValue,
               invValue,
               servValue,
               subsValue);
d8044 2
d8047 5
a8051 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetObj2Values (
               revValue,
               invValue,
               servValue,
               subsValue);
d8060 2
d8063 2
a8064 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetObj2Winv (
               obj2Winv);
d8073 2
d8076 2
a8077 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetObj2Winv (
               obj2Winv);
d8086 2
d8089 2
a8090 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetObj2Wrev (
               obj2Wrev);
d8099 2
d8102 2
a8103 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetObj2Wrev (
               obj2Wrev);
d8112 2
d8115 2
a8116 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetObj2Wserv (
               obj2Wserv);
d8125 2
d8128 2
a8129 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetObj2Wserv (
               obj2Wserv);
d8138 2
d8141 2
a8142 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetObj2Wsub (
               obj2Wsub);
d8151 2
d8154 2
a8155 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetObj2Wsub (
               obj2Wsub);
d8164 2
d8167 2
a8168 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetObjChoice (
               objChoice);
d8179 2
d8182 3
a8184 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationObj1ExecCost (
               operationName,
               obj1ExecCost);
d8195 2
d8198 3
a8200 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationObj1ExecCost (
               operationName,
               obj1ExecCost);
d8211 2
d8214 3
a8216 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationObj2AuxCost (
               operationName,
               obj2AuxCost);
d8227 2
d8230 3
a8232 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationObj2AuxCost (
               operationName,
               obj2AuxCost);
d8243 2
d8246 3
a8248 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetOperationYield (
               operationName,
               yield);
d8257 2
d8260 2
a8261 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetOptWithLotSizes (
               optWithLotSizes);
d8271 2
d8274 3
a8276 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartBuildAheadLimit (
               partName,
               buildAheadLimit);
d8286 2
d8289 3
a8291 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartCycleTime (
               partName,
               cycleTime);
d8301 2
d8304 3
a8306 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartIncLotSize (
               partName,
               incLotSize);
d8316 2
d8319 3
a8321 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartMinLotSize (
               partName,
               minLotSize);
d8331 2
d8334 3
a8336 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartMrpProdVol (
               partName,
               mrpProdVol);
d8346 2
d8349 3
a8351 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartNBomEntries (
               partName,
               nBomEntries);
d8361 2
d8364 3
a8366 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartObj1ProdCost (
               partName,
               obj1ProdCost);
d8376 2
d8379 3
a8381 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartObj1ScrapCost (
               partName,
               obj1ScrapCost);
d8391 2
d8394 3
a8396 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartObj1ScrapCost (
               partName,
               obj1ScrapCost);
d8406 2
d8409 3
a8411 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartObj1StockCost (
               partName,
               obj1StockCost);
d8421 2
d8424 3
a8426 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartObj1StockCost (
               partName,
               obj1StockCost);
d8438 2
d8441 5
a8445 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartProdBounds (
               partName,
               hardLower,
               softLower,
               hardUpper);
d8455 2
d8458 3
a8460 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartPropRouting (
               partName,
               propRouting);
d8470 2
d8473 3
a8475 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartUnitCost (
               partName,
               unitCost);
d8485 2
d8488 3
a8490 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartUnitCost (
               partName,
               unitCost);
d8500 2
d8503 3
a8505 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartYield (
               partName,
               yield);
d8514 2
d8517 2
a8518 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetPeriodsPerYear (
               periodsPerYear);
d8527 2
d8530 2
a8531 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetPeriodsPerYear (
               periodsPerYear);
d8540 2
d8543 2
a8544 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetStockRealloc (
               stockRealloc);
d8556 2
d8559 5
a8563 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryFallout (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               fallout);
d8575 2
d8578 5
a8582 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryObj2SubPenalty (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               obj2SubPenalty);
d8594 2
d8597 5
a8601 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryObj2SubPenalty (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               obj2SubPenalty);
d8613 2
d8616 5
a8620 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryProdVol (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               prodVol);
d8632 2
d8635 5
a8639 7
      theWitRun->
         reqNoActApiCalls ()->
            witGetSubsBomEntryUsageRate (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               usageRate);
d8650 2
d8653 4
a8656 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryFallout (
               operationName,
               bomEntryIndex,
               fallout);
d8667 2
d8670 4
a8673 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryPropRouting (
               operationName,
               bomEntryIndex,
               propRouting);
d8684 2
d8687 4
a8690 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryUsageRate (
               operationName,
               bomEntryIndex,
               usageRate);
d8701 2
d8704 4
a8707 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBomEntryUsageTime (
               operationName,
               bomEntryIndex,
               time);
d8718 2
d8721 4
a8724 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBopEntryByProduct (
               operationName,
               bopEntryIndex,
               byProduct);
d8735 2
d8738 4
a8741 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBopEntryProdRate (
               operationName,
               bopEntryIndex,
               prodRate);
d8750 2
d8753 2
a8754 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetBuildWhenEmpty (
               buildWhenEmpty);
d8763 2
d8766 2
a8767 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetCapCost (
               capCost);
d8776 2
d8779 2
a8780 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetCapCost (
               capCost);
d8791 2
d8794 4
a8797 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandBuildAheadLimit (
               partName,
               demandName,
               buildAheadLimit);
d8808 2
d8811 4
a8814 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandBuildAheadUB (
               partName,
               demandName,
               buildAheadUB);
d8825 2
d8828 4
a8831 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandGrossRev (
               partName,
               demandName,
               grossRev);
d8842 2
d8845 4
a8848 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandGrossRev (
               partName,
               demandName,
               grossRev);
d8859 2
d8862 4
a8865 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandPrefBuildAhead (
               partName,
               demandName,
               prefBuildAhead);
d8876 2
d8879 4
a8882 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetDemandShipLateLimit (
               partName,
               demandName,
               shipLateLimit);
d8891 2
d8894 2
a8895 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetInvCost (
               invCost);
d8904 2
d8907 2
a8908 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetInvCost (
               invCost);
d8917 2
d8920 2
a8921 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetLocalBuildAhead (
               localBuildAhead);
d8930 2
d8933 2
a8934 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetLocalMultiExec (
               localMultiExec);
d8943 2
d8946 2
a8947 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetObj2Winv (
               obj2Winv);
d8956 2
d8959 2
a8960 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetObj2Winv (
               obj2Winv);
d8969 2
d8972 2
a8973 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetObj2Wrev (
               obj2Wrev);
d8982 2
d8985 2
a8986 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetObj2Wrev (
               obj2Wrev);
d8995 2
d8998 2
a8999 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetObj2Wserv (
               obj2Wserv);
d9008 2
d9011 2
a9012 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetObj2Wserv (
               obj2Wserv);
d9021 2
d9024 2
a9025 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetObj2Wsub (
               obj2Wsub);
d9034 2
d9037 2
a9038 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetObj2Wsub (
               obj2Wsub);
d9047 2
d9050 2
a9051 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetObjChoice (
               objChoice);
d9062 2
d9065 3
a9067 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationObj1ExecCost (
               operationName,
               obj1ExecCost);
d9078 2
d9081 3
a9083 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationObj1ExecCost (
               operationName,
               obj1ExecCost);
d9094 2
d9097 3
a9099 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationObj2AuxCost (
               operationName,
               obj2AuxCost);
d9110 2
d9113 3
a9115 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationObj2AuxCost (
               operationName,
               obj2AuxCost);
d9126 2
d9129 3
a9131 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetOperationYield (
               operationName,
               yield);
d9140 2
d9143 2
a9144 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetOptWithLotSizes (
               optWithLotSizes);
d9154 2
d9157 3
a9159 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartBuildAheadLimit (
               partName,
               buildAheadLimit);
d9169 2
d9172 3
a9174 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartCycleTime (
               partName,
               cycleTime);
d9184 2
d9187 3
a9189 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartIncLotSize (
               partName,
               incLotSize);
d9199 2
d9202 3
a9204 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartMinLotSize (
               partName,
               minLotSize);
d9214 2
d9217 3
a9219 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartObj1ProdCost (
               partName,
               obj1ProdCost);
d9229 2
d9232 3
a9234 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartObj1ScrapCost (
               partName,
               obj1ScrapCost
d9245 2
d9248 3
a9250 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartObj1ScrapCost (
               partName,
               obj1ScrapCost
d9261 2
d9264 3
a9266 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartObj1StockCost (
               partName,
               obj1StockCost);
d9276 2
d9279 3
a9281 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartObj1StockCost (
               partName,
               obj1StockCost);
d9293 2
d9296 5
a9300 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartProdBounds (
               partName,
               hardLower,
               softLower,
               hardUpper);
d9310 2
d9313 3
a9315 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartProdVol (
               partName,
               prodVol);
d9325 2
d9328 3
a9330 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartPropRouting (
               partName,
               propRouting);
d9340 2
d9343 3
a9345 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartUnitCost (
               partName,
               unitCost);
d9355 2
d9358 3
a9360 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartUnitCost (
               partName,
               unitCost);
d9370 2
d9373 3
a9375 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartYield (
               partName,
               yield);
d9384 2
d9387 2
a9388 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetPeriodsPerYear (
               periodsPerYear);
d9397 2
d9400 2
a9401 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetPeriodsPerYear (
               periodsPerYear);
d9410 2
d9413 2
a9414 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetStockRealloc (
               stockRealloc);
d9426 2
d9429 5
a9433 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryFallout (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               fallout);
d9445 2
d9448 5
a9452 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryObj2SubPenalty (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               obj2SubPenalty);
d9464 2
d9467 5
a9471 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryObj2SubPenalty (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               obj2SubPenalty);
d9482 2
d9485 5
a9489 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryProdVol (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               prodVol);
d9501 2
d9504 5
a9508 7
      theWitRun->
         reqNoActApiCalls ()->
            witSetSubsBomEntryUsageRate (
               operationName,
               bomEntryIndex,
               subsBomEntryIndex,
               usageRate);
d9518 2
d9521 3
a9523 5
      theWitRun->
         reqNoActApiCalls ()->
            witWriteProdSched (
               fileName,
               fileFormat);
d9534 2
d9537 2
a9538 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetSolverLogFileName (
               solverLogFileName);
d9547 2
d9550 2
a9551 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetSolverLogFileName (
               solverLogFileName);
d9560 2
d9563 2
a9564 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetNonMrSelSplit (
               nonMrSelSplit);
d9573 2
d9576 2
a9577 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetNonMrSelSplit (
               nonMrSelSplit);
d9587 2
d9590 3
a9592 5
      theWitRun->
         reqNoActApiCalls ()->
            witGetPartBaSelSplit (
               partName,
               baSelSplit);
d9602 2
d9605 3
a9607 5
      theWitRun->
         reqNoActApiCalls ()->
            witSetPartBaSelSplit (
               partName,
               baSelSplit);
d9618 2
d9621 4
a9624 6
      theWitRun->
         reqNoActApiCalls ()->
            witGetBopEntryMeSelSplit (
               operationName,
               bopEntryIndex,
               meSelSplit);
d9635 2
d9638 4
a9641 6
      theWitRun->
         reqNoActApiCalls ()->
            witSetBopEntryMeSelSplit (
               operationName,
               bopEntryIndex,
               meSelSplit);
d9650 2
d9653 2
a9654 4
      theWitRun->
         reqNoActApiCalls ()->
            witGetSrSelSplit (
               srSelSplit);
d9663 2
d9666 2
a9667 4
      theWitRun->
         reqNoActApiCalls ()->
            witSetSrSelSplit (
               srSelSplit);
d9676 2
d9679 1
a9679 3
      theWitRun->
         reqNoActApiCalls ()->
            witNoDependantWitRunVeneersIsOne (isOne);
d9687 2
d9690 1
a9690 3
      theWitRun->
         reqNoActApiCalls ()->
            witNoDependantWitRunVeneersDecr ();
d9698 2
d9701 1
a9701 3
      theWitRun->
         reqNoActApiCalls ()->
            witNoDependantWitRunVeneersIncr ();
d9709 2
d9712 1
a9712 3
      theWitRun->
         reqNoActApiCalls ()->
            witListUnissuedMsgs ();
d9734 2
d9737 1
a9737 3
      theWitRun->
         reqNoActApiCalls ()->
            witTestFatalMesg ();
@


1.132
log
@[exceptions]
@
text
@d41 5
a45 3
      theWitRun->witAddBomEntry (
         consumingOperationName,
         consumedPartName);
d56 5
a60 3
      theWitRun->witAddBopEntry (
         producingOperationName,
         producedPartName);
d71 5
a75 3
      theWitRun->witAddDemand (
         demandedPartName,
         demandName);
d85 4
a88 2
      theWitRun->witAddOperation (
         operationName);
d99 5
a103 3
      theWitRun->witAddPart (
         partName,
         partCategory);
d113 4
a116 2
      theWitRun->witAddPartWithOperation (
         partAndOperationName);
d128 6
a133 4
      theWitRun->witAddSubsBomEntry (
         operationName,
         bomEntryIndex,
         consumedPartName);
d142 3
a144 1
      theWitRun->witAdvanceObjItr ();
d157 7
a163 5
      theWitRun->witAppendToPipSeq (
         partName,
         demandName,
         shipPeriod,
         incShipVol);
d176 7
a182 5
      theWitRun->witAppendToPipSeq (
         partName,
         demandName,
         shipPeriod,
         incShipVol);
d191 3
a193 1
      theWitRun->witBuildPip ();
d202 3
a204 1
      theWitRun->witClearPegging ();
d213 3
a215 1
      theWitRun->witClearPipSeq ();
d224 5
a228 4
   forbidNullArg (dstWitRun, "dstWitRun", "witCopyData");

   return dstWitRun->witCopyData (
         srcWitRun);
d238 4
a241 1
   theRC = theWitRun->witDeleteRun ();
d255 4
a258 2
      theWitRun->witDisplayData (
         fileName);
d273 9
a281 7
      theWitRun->witEqHeurAlloc (
         lenLists,
         demandedPartNameList,
         demandNameList,
         shipPeriodList,
         desIncVolList,
         incVolList);
d296 9
a304 7
      theWitRun->witEqHeurAlloc (
         lenLists,
         demandedPartNameList,
         demandNameList,
         shipPeriodList,
         desIncVolList,
         incVolList);
d320 10
a329 8
      theWitRun->witEqHeurAllocTwme (
         lenLists,
         demandedPartNameList,
         demandNameList,
         shipPeriodList,
         desIncVolList,
         incVolList,
         asapMultiExecList);
d345 10
a354 8
      theWitRun->witEqHeurAllocTwme (
         lenLists,
         demandedPartNameList,
         demandNameList,
         shipPeriodList,
         desIncVolList,
         incVolList,
         asapMultiExecList);
d365 3
a367 1
      theWitRun->witEvalObjectives ();
d378 3
a380 1
      theWitRun->witFinishHeurAlloc ();
d399 3
a401 1
      theWitRun->witGeneratePriorities ();
d411 4
a414 2
      theWitRun->witGetAccAfterSoftLB (
         accAfterSoftLB);
d424 4
a427 2
      theWitRun->witGetAccAfterOptImp (
         accAfterOptImp);
d437 4
a440 2
      theWitRun->witGetAccelerated (
         accelerated);
d450 4
a453 2
      theWitRun->witGetAppData (
         appData);
d463 4
a466 2
      theWitRun->witGetAutoPriority (
         autoPriority);
d478 6
a483 4
      theWitRun->witGetBomEntryAppData (
         operationName,
         bomEntryIndex,
         appData);
d495 6
a500 4
      theWitRun->witGetBomEntryConsRate (
         operationName,
         bomEntryIndex,
         consRate);
d512 6
a517 4
      theWitRun->witGetBomEntryConsRate (
         operationName,
         bomEntryIndex,
         consRate);
d529 6
a534 4
      theWitRun->witGetBomEntryEarliestPeriod (
         operationName,
         bomEntryIndex,
         earliestPeriod);
d546 6
a551 4
      theWitRun->witGetBomEntryNSubsBomEntries (
         operationName,
         bomEntryIndex,
         nSubsBomEntries);
d563 6
a568 4
      theWitRun->witGetBomEntryConsumedPart (
         operationName,
         bomEntryIndex,
         consumedPartName);
d580 6
a585 4
      theWitRun->witGetBomEntryExecPenalty (
         operationName,
         bomEntryIndex,
         execPenalty);
d597 6
a602 4
      theWitRun->witGetBomEntryExecPenalty (
         operationName,
         bomEntryIndex,
         execPenalty);
d614 6
a619 4
      theWitRun->witGetBomEntryFalloutRate (
         operationName,
         bomEntryIndex,
         falloutRate);
d631 6
a636 4
      theWitRun->witGetBomEntryFalloutRate (
         operationName,
         bomEntryIndex,
         falloutRate);
d648 6
a653 4
      theWitRun->witGetBomEntryImpactPeriod (
         operationName,
         bomEntryIndex,
         impactPeriod);
d665 6
a670 4
      theWitRun->witGetBomEntryLatestPeriod (
         operationName,
         bomEntryIndex,
         latestPeriod);
d682 6
a687 4
      theWitRun->witGetBomEntryMandEC (
         operationName,
         bomEntryIndex,
         mandEC);
d699 6
a704 4
      theWitRun->witGetBomEntryOffset (
         operationName,
         bomEntryIndex,
         offset);
d716 6
a721 4
      theWitRun->witGetBomEntryOffset (
         operationName,
         bomEntryIndex,
         offset);
d733 6
a738 4
      theWitRun->witGetBomEntryPropRtg (
         operationName,
         bomEntryIndex,
         propRtg);
d750 6
a755 4
      theWitRun->witGetBomEntryRoutingShare (
         operationName,
         bomEntryIndex,
         routingShare);
d767 6
a772 4
      theWitRun->witGetBomEntryRoutingShare (
         operationName,
         bomEntryIndex,
         routingShare);
d784 6
a789 4
      theWitRun->witGetBomEntrySelForDel (
         operationName,
         bomEntryIndex,
         selForDel);
d801 6
a806 4
      theWitRun->witGetBomEntrySingleSource (
         operationName,
         bomEntryIndex,
         singleSource);
d819 6
a824 4
      theWitRun->witGetBopEntryAppData (
         operationName,
         bopEntryIndex,
         appData);
d836 6
a841 4
      theWitRun->witGetBopEntryEarliestPeriod (
         operationName,
         bopEntryIndex,
         earliestPeriod);
d853 6
a858 4
      theWitRun->witGetBopEntryExpAllowed (
         operationName,
         bopEntryIndex,
         expAllowed);
d870 6
a875 4
      theWitRun->witGetBopEntryExpAversion (
         operationName,
         bopEntryIndex,
         expAversion);
d887 6
a892 4
      theWitRun->witGetBopEntryExpAversion (
         operationName,
         bopEntryIndex,
         expAversion);
d904 6
a909 4
      theWitRun->witGetBopEntryImpactPeriod (
         operationName,
         bopEntryIndex,
         impactPeriod);
d921 6
a926 4
      theWitRun->witGetBopEntryLatestPeriod (
         operationName,
         bopEntryIndex,
         latestPeriod);
d938 6
a943 4
      theWitRun->witGetBopEntryOffset (
         operationName,
         bopEntryIndex,
         offset);
d955 6
a960 4
      theWitRun->witGetBopEntryOffset (
         operationName,
         bopEntryIndex,
         offset);
d972 6
a977 4
      theWitRun->witGetBopEntryPipShare (
         operationName,
         bopEntryIndex,
         pipShare);
d989 6
a994 4
      theWitRun->witGetBopEntryPipShare (
         operationName,
         bopEntryIndex,
         pipShare);
d1006 6
a1011 4
      theWitRun->witGetBopEntryProductRate (
         operationName,
         bopEntryIndex,
         productRate);
d1023 6
a1028 4
      theWitRun->witGetBopEntryProductRate (
         operationName,
         bopEntryIndex,
         productRate);
d1040 6
a1045 4
      theWitRun->witGetBopEntryProducedPart (
         operationName,
         bopEntryIndex,
         producedPartName);
d1057 6
a1062 4
      theWitRun->witGetBopEntryRoutingShare (
         operationName,
         bopEntryIndex,
         routingShare);
d1074 6
a1079 4
      theWitRun->witGetBopEntryRoutingShare (
         operationName,
         bopEntryIndex,
         routingShare);
d1091 6
a1096 4
      theWitRun->witGetBopEntrySelForDel (
         operationName,
         bopEntryIndex,
         selForDel);
d1106 4
a1109 2
      theWitRun->witGetBuildWhenEmpty (
         buildWhenEmpty);
d1119 4
a1122 2
      theWitRun->witGetCompPrices (
         compPrices);
d1132 4
a1135 2
      theWitRun->witGetComputeCriticalList (
         computeCriticalList);
d1147 6
a1152 4
      theWitRun->witGetCriticalList (
         lenCritList,
         critPartList,
         critPeriod);
d1164 6
a1169 4
      theWitRun->witGetDemandAppData (
         demandedPartName,
         demandName,
         appData);
d1185 10
a1194 8
      theWitRun->witGetDemandConsVolPip (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList);
d1210 10
a1219 8
      theWitRun->witGetDemandConsVolPip (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList);
d1233 8
a1240 6
      theWitRun->witGetDemandCumShipBounds (
         demandedPartName,
         demandName,
         hardLower,
         softLower,
         hardUpper);
d1254 8
a1261 6
      theWitRun->witGetDemandCumShipBounds (
         demandedPartName,
         demandName,
         hardLower,
         softLower,
         hardUpper);
d1273 6
a1278 4
      theWitRun->witGetDemandCumShipReward (
         demandedPartName,
         demandName,
         cumShipReward);
d1290 6
a1295 4
      theWitRun->witGetDemandCumShipReward (
         demandedPartName,
         demandName,
         cumShipReward);
d1307 6
a1312 4
      theWitRun->witGetDemandDemandVol (
         demandedPartName,
         demandName,
         demandVol);
d1324 6
a1329 4
      theWitRun->witGetDemandDemandVol (
         demandedPartName,
         demandName,
         demandVol);
d1345 10
a1354 8
      theWitRun->witGetDemandExecVolPegging (
         demandedPartName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         peggedExecVolList);
d1370 10
a1379 8
      theWitRun->witGetDemandExecVolPegging (
         demandedPartName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         peggedExecVolList);
d1395 10
a1404 8
      theWitRun->witGetDemandExecVolPip (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         peggedExecVolList);
d1420 10
a1429 8
      theWitRun->witGetDemandExecVolPip (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         peggedExecVolList);
d1441 6
a1446 4
      theWitRun->witGetDemandFocusHorizon (
         demandedPartName,
         demandName,
         focusHorizon);
d1458 6
a1463 4
      theWitRun->witGetDemandFssShipVol (
         demandedPartName,
         demandName,
         fssShipVol);
d1475 6
a1480 4
      theWitRun->witGetDemandFssShipVol (
         demandedPartName,
         demandName,
         fssShipVol);
d1492 6
a1497 4
      theWitRun->witGetDemandObj1CumShipReward (
         demandedPartName,
         demandName,
         obj1CumShipReward);
d1509 6
a1514 4
      theWitRun->witGetDemandObj1CumShipReward (
         demandedPartName,
         demandName,
         obj1CumShipReward);
d1526 6
a1531 4
      theWitRun->witGetDemandObj1ShipReward (
         demandedPartName,
         demandName,
         obj1ShipReward);
d1543 6
a1548 4
      theWitRun->witGetDemandObj1ShipReward (
         demandedPartName,
         demandName,
         obj1ShipReward);
d1560 6
a1565 4
      theWitRun->witGetDemandPriority (
         demandedPartName,
         demandName,
         priority);
d1581 10
a1590 8
      theWitRun->witGetDemandProdVolPip (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList);
d1606 10
a1615 8
      theWitRun->witGetDemandProdVolPip (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList);
d1627 6
a1632 4
      theWitRun->witGetDemandSelForDel (
         demandedPartName,
         demandName,
         shipLateLimit);
d1644 6
a1649 4
      theWitRun->witGetDemandShipLateUB (
         demandedPartName,
         demandName,
         shipLateUB);
d1661 6
a1666 4
      theWitRun->witGetDemandShipReward (
         demandedPartName,
         demandName,
         shipReward);
d1678 6
a1683 4
      theWitRun->witGetDemandShipReward (
         demandedPartName,
         demandName,
         shipReward);
d1695 6
a1700 4
      theWitRun->witGetDemandShipVol (
         demandedPartName,
         demandName,
         shipVol);
d1712 6
a1717 4
      theWitRun->witGetDemandShipVol (
         demandedPartName,
         demandName,
         shipVol);
d1733 10
a1742 8
      theWitRun->witGetDemandSideVolPip (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList);
d1758 10
a1767 8
      theWitRun->witGetDemandSideVolPip (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList);
d1785 12
a1796 10
      theWitRun->witGetDemandSubVolPegging (
         demandedPartName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         bomEntryIndexList,
         subsBomEntryIndexList,
         peggedSubVolList);
d1814 12
a1825 10
      theWitRun->witGetDemandSubVolPegging (
         demandedPartName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         bomEntryIndexList,
         subsBomEntryIndexList,
         peggedSubVolList);
d1843 12
a1854 10
      theWitRun->witGetDemandSubVolPip (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         bomEntryIndexList,
         subsBomEntryIndexList,
         execPeriodList,
         peggedSubVolList);
d1872 12
a1883 10
      theWitRun->witGetDemandSubVolPip (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         bomEntryIndexList,
         subsBomEntryIndexList,
         execPeriodList,
         peggedSubVolList);
d1899 10
a1908 8
      theWitRun->witGetDemandSupplyVolPip (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList);
d1924 10
a1933 8
      theWitRun->witGetDemandSupplyVolPip (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         partNameList,
         periodList,
         peggedVolList);
d1943 4
a1946 2
      theWitRun->witGetEquitability (
         equitablity);
d1956 4
a1959 2
      theWitRun->witGetExecEmptyBom (
         execEmptyBom);
d1969 4
a1972 2
      theWitRun->witGetExpCutoff (
         expCutoff);
d1982 4
a1985 2
      theWitRun->witGetExpCutoff (
         expCutoff);
d1995 4
a1998 2
      theWitRun->witGetFeasible (
         feasible);
d2010 6
a2015 4
      theWitRun->witGetFocusShortageVol (
         lenList,
         partList,
         shortageVolList);
d2027 6
a2032 4
      theWitRun->witGetFocusShortageVol (
         lenList,
         partList,
         shortageVolList);
d2042 4
a2045 2
      theWitRun->witGetForcedMultiEq (
         forcedMultiEq);
d2055 4
a2058 2
      theWitRun->witGetHashTableSize (
         hashTableSize);
d2068 4
a2071 2
      theWitRun->witGetHeurAllocActive (
         heurAllocActive);
d2081 4
a2084 2
      theWitRun->witGetHighPrecisionWD (
         highPrecisionWD);
d2094 4
a2097 2
      theWitRun->witGetIndependentOffsets (
         independentOffsets);
d2107 4
a2110 2
      theWitRun->witGetLotSizeTol (
         lotSizeTol);
d2120 4
a2123 2
      theWitRun->witGetLotSizeTol (
         lotSizeTol);
d2133 4
a2136 2
      theWitRun->witGetMesgFile (
         mesgFile);
d2146 4
a2149 2
      theWitRun->witGetMesgFileAccessMode (
         mesgFileAccessMode);
d2159 4
a2162 2
      theWitRun->witGetMesgFileName (
         mesgFileName);
d2173 5
a2177 3
      theWitRun->witGetMesgPrintNumber (
         messageNumber,
         mesgPrintMunber);
d2188 5
a2192 3
      theWitRun->witGetMesgStopRunning (
         messageNumber,
         mesgStopRunning);
d2203 5
a2207 3
      theWitRun->witGetMesgThrowException (
         messageNumber,
         mesgThrowException);
d2218 5
a2222 3
      theWitRun->witGetMesgTimesPrint (
         messageNumber,
         mesgTimesPrint);
d2232 4
a2235 2
      theWitRun->witGetMultiExec (
         multiExec);
d2245 4
a2248 2
      theWitRun->witGetMultiRoute (
         multiRoute);
d2258 4
a2261 2
      theWitRun->witGetNPeriods (
         nPeriods);
d2272 5
a2276 3
      theWitRun->witGetObjItrBomEntry (
         consumingOperationName,
         bomEntryIndex);
d2287 5
a2291 3
      theWitRun->witGetObjItrBopEntry (
         producingOperationName,
         bopEntryIndex);
d2302 5
a2306 3
      theWitRun->witGetObjItrDemand (
         demandedPartName,
         demandName);
d2316 4
a2319 2
      theWitRun->witGetObjItrOperation (
         operationName);
d2329 4
a2332 2
      theWitRun->witGetObjItrPart (
         partName);
d2342 3
a2344 1
      theWitRun->witGetObjItrState (objItrState);
d2356 6
a2361 4
      theWitRun->witGetObjItrSubsBomEntry (
         consumingOperationName,
         bomEntryIndex,
         subsBomEntryIndex);
d2372 5
a2376 3
      theWitRun->witGetObjValues (
         objValue,
         boundsValue);
d2387 5
a2391 3
      theWitRun->witGetObjValues (
         objValue,
         boundsValue);
d2403 5
a2407 3
      theWitRun->witGetOperationAppData (
         operationName,
         appData);
d2420 7
a2426 5
      theWitRun->witGetOperationExecBounds (
         operationName,
         hardLower,
         softLower,
         hardUpper);
d2439 7
a2445 5
      theWitRun->witGetOperationExecBounds (
         operationName,
         hardLower,
         softLower,
         hardUpper);
d2457 5
a2461 3
      theWitRun->witGetOperationExecCost (
         operationName,
         execCost);
d2473 5
a2477 3
      theWitRun->witGetOperationExecCost (
         operationName,
         execCost);
d2489 5
a2493 3
      theWitRun->witGetOperationExecPenalty (
         operationName,
         execPenalty);
d2505 5
a2509 3
      theWitRun->witGetOperationExecPenalty (
         operationName,
         execPenalty);
d2521 5
a2525 3
      theWitRun->witGetOperationExecutable (
         operationName,
         execVol);
d2537 5
a2541 3
      theWitRun->witGetOperationExecVol (
         operationName,
         execVol);
d2553 5
a2557 3
      theWitRun->witGetOperationExecVol (
         operationName,
         execVol);
d2568 5
a2572 3
      theWitRun->witGetOperationExists (
         operationName,
         exist);
d2584 5
a2588 3
      theWitRun->witGetOperationFssExecVol (
         operationName,
         fssExecVol);
d2600 5
a2604 3
      theWitRun->witGetOperationFssExecVol (
         operationName,
         fssExecVol);
d2616 5
a2620 3
      theWitRun->witGetOperationIncLotSize (
         operationName,
         incLotSize);
d2632 5
a2636 3
      theWitRun->witGetOperationIncLotSize (
         operationName,
         incLotSize);
d2648 5
a2652 3
      theWitRun->witGetOperationIncLotSize2 (
         operationName,
         incLotSize2);
d2664 5
a2668 3
      theWitRun->witGetOperationIncLotSize2 (
         operationName,
         incLotSize2);
d2680 5
a2684 3
      theWitRun->witGetOperationLotSize2Thresh (
         operationName,
         lotSize2Thresh);
d2696 5
a2700 3
      theWitRun->witGetOperationLotSize2Thresh (
         operationName,
         lotSize2Thresh);
d2712 5
a2716 3
      theWitRun->witGetOperationMinLotSize (
         operationName,
         minLotSize);
d2728 5
a2732 3
      theWitRun->witGetOperationMinLotSize (
         operationName,
         minLotSize);
d2744 5
a2748 3
      theWitRun->witGetOperationMinLotSize2 (
         operationName,
         minLotSize2);
d2760 5
a2764 3
      theWitRun->witGetOperationMinLotSize2 (
         operationName,
         minLotSize2);
d2776 5
a2780 3
      theWitRun->witGetOperationMrpExecVol (
         operationName,
         mrpExecVol);
d2792 5
a2796 3
      theWitRun->witGetOperationMrpExecVol (
         operationName,
         mrpExecVol);
d2808 5
a2812 3
      theWitRun->witGetOperationNBomEntries (
         operationName,
         nBomEntries);
d2824 5
a2828 3
      theWitRun->witGetOperationNBopEntries (
         operationName,
         nBopEntries);
d2839 5
a2843 3
      theWitRun->witGetOperations (
         lenOperationList,
         operationList);
d2855 5
a2859 3
      theWitRun->witGetOperationSelForDel (
         operationName,
         selForDel);
d2871 5
a2875 3
      theWitRun->witGetOperationTwoLevelLotSizes (
         operationName,
         twoLevelLotSizes);
d2887 5
a2891 3
      theWitRun->witGetOperationYieldRate (
         operationName,
         yieldRate);
d2903 5
a2907 3
      theWitRun->witGetOperationYieldRate (
         operationName,
         yieldRate);
d2917 4
a2920 2
      theWitRun->witGetOptInitMethod (
         optInitMethod);
d2930 4
a2933 2
      theWitRun->witGetOslMesgFileName (
         oslMesgFileName);
d2943 4
a2946 2
      theWitRun->witGetOutputPrecision (
         outputPrecision);
d2956 4
a2959 2
      theWitRun->witGetPostprocessed (
         postprocessed);
d2970 5
a2974 3
      theWitRun->witGetPartAppData (
         partName,
         appData);
d2986 6
a2991 4
      theWitRun->witGetPartBelowList (
         partName,
         lenList,
         partNameList);
d3002 5
a3006 3
      theWitRun->witGetPartBuildAheadUB (
         partName,
         buildAheadUB);
d3017 5
a3021 3
      theWitRun->witGetPartBuildAsap (
         partName,
         buildAsap);
d3032 5
a3036 3
      theWitRun->witGetPartBuildNstn (
         partName,
         buildNstn);
d3047 5
a3051 3
      theWitRun->witGetPartConsVol (
         partName,
         consVol);
d3062 5
a3066 3
      theWitRun->witGetPartConsVol (
         partName,
         consVol);
d3079 7
a3085 5
      theWitRun->witGetPartConsumingBomEntry (
         partName,
         consIndex,
         consumingOperationName,
         bomEntryIndex);
d3099 8
a3106 6
      theWitRun->witGetPartConsumingSubsBomEntry (
         partName,
         consIndex,
         consumingOperationName,
         bomEntryIndex,
         subsBomEntryIndex);
d3118 6
a3123 4
      theWitRun->witGetPartDemands (
         partName,
         lenDemandList,
         demandList);
d3134 5
a3138 3
      theWitRun->witGetPartCategory (
         partName,
         category);
d3149 5
a3153 3
      theWitRun->witGetPartExcessVol (
         partName,
         excessVol);
d3164 5
a3168 3
      theWitRun->witGetPartExcessVol (
         partName,
         excessVol);
d3179 5
a3183 3
      theWitRun->witGetPartExists (
         partName,
         exist);
d3194 5
a3198 3
      theWitRun->witGetPartFocusShortageVol (
         partName,
         shortageVol);
d3209 5
a3213 3
      theWitRun->witGetPartFocusShortageVol (
         partName,
         shortageVol);
d3224 5
a3228 3
      theWitRun->witGetPartMrpConsVol (
         partName,
         mrpConsVol);
d3239 5
a3243 3
      theWitRun->witGetPartMrpConsVol (
         partName,
         mrpConsVol);
d3254 5
a3258 3
      theWitRun->witGetPartMrpExcessVol (
         partName,
         mrpExcessVol);
d3269 5
a3273 3
      theWitRun->witGetPartMrpExcessVol (
         partName,
         mrpExcessVol);
d3284 5
a3288 3
      theWitRun->witGetPartMrpResidualVol (
         partName,
         mrpResidualVol);
d3299 5
a3303 3
      theWitRun->witGetPartMrpResidualVol (
         partName,
         mrpResidualVol);
d3314 5
a3318 3
      theWitRun->witGetPartNConsumingBomEntries (
         partName,
         nConsumingBomEntries);
d3329 5
a3333 3
      theWitRun->witGetPartNConsumingSubsBomEntries (
         partName,
         nConsumingSubsBomEntries);
d3344 5
a3348 3
      theWitRun->witGetPartNProducingBopEntries (
         partName,
         nProducingBopEntries);
d3359 5
a3363 3
      theWitRun->witGetPartProdVol (
         partName,
         prodVol);
d3374 5
a3378 3
      theWitRun->witGetPartProdVol (
         partName,
         prodVol);
d3391 7
a3397 5
      theWitRun->witGetPartProducingBopEntry (
         partName,
         prodIndex,
         producingOperationName,
         bopEntryIndex);
d3408 5
a3412 3
      theWitRun->witGetPartPropRtg (
         partName,
         propRtg);
d3423 5
a3427 3
      theWitRun->witGetPartReqVol (
         partName,
         reqVol);
d3438 5
a3442 3
      theWitRun->witGetPartReqVol (
         partName,
         reqVol);
d3453 5
a3457 3
      theWitRun->witGetPartResidualVol (
         partName,
         residualVol);
d3468 5
a3472 3
      theWitRun->witGetPartResidualVol (
         partName,
         residualVol);
d3483 5
a3487 3
      theWitRun->witGetParts (
         lenPartList,
         partList);
d3498 5
a3502 3
      theWitRun->witGetPartScrapCost (
         partName,
         scrapCost);
d3513 5
a3517 3
      theWitRun->witGetPartScrapCost (
         partName,
         scrapCost);
d3528 5
a3532 3
      theWitRun->witGetPartScrapVol (
         partName,
         scrapVol);
d3543 5
a3547 3
      theWitRun->witGetPartScrapVol (
         partName,
         scrapVol);
d3558 5
a3562 3
      theWitRun->witGetPartSelForDel (
         partName,
         selForDel);
d3573 5
a3577 3
      theWitRun->witGetPartShadowPrice (
         partName,
         shadowPrice);
d3588 5
a3592 3
      theWitRun->witGetPartShadowPrice (
         partName,
         shadowPrice);
d3603 5
a3607 3
      theWitRun->witGetPartSingleSource (
         partName,
         singleSource);
d3620 7
a3626 5
      theWitRun->witGetPartStockBounds (
         partName,
         hardLower,
         softLower,
         hardUpper);
d3639 7
a3645 5
      theWitRun->witGetPartStockBounds (
         partName,
         hardLower,
         softLower,
         hardUpper);
d3656 5
a3660 3
      theWitRun->witGetPartStockCost (
         partName,
         stockCost);
d3671 5
a3675 3
      theWitRun->witGetPartStockCost (
         partName,
         stockCost);
d3686 5
a3690 3
      theWitRun->witGetPartStockVol (
         partName,
         stockVol);
d3701 5
a3705 3
      theWitRun->witGetPartStockVol (
         partName,
         stockVol);
d3716 5
a3720 3
      theWitRun->witGetPartSupplyVol (
         partName,
         supplyVol);
d3731 5
a3735 3
      theWitRun->witGetPartSupplyVol (
         partName,
         supplyVol);
d3745 4
a3748 2
      theWitRun->witGetPenExec (
         penExec);
d3758 4
a3761 2
      theWitRun->witGetPipExists (
         pipExists);
d3775 8
a3782 6
      theWitRun->witGetPipSeq (
         lenLists,
         partNameList,
         demandNameList,
         shipPerList,
         incShipVolList);
d3796 8
a3803 6
      theWitRun->witGetPipSeq (
         lenLists,
         partNameList,
         demandNameList,
         shipPerList,
         incShipVolList);
d3813 4
a3816 2
      theWitRun->witGetPipSeqFromHeur (
         pipSeqFromHeur);
d3826 4
a3829 2
      theWitRun->witGetPerfPegging (
         perfPegging);
d3844 9
a3852 7
      theWitRun->witGetPgdCritList (
         lenLists,
         critPartNameList,
         critPerList,
         demPartNameList,
         demandNameList,
         shipPerList);
d3862 4
a3865 2
      theWitRun->witGetPgdCritListMode (
         pgdCritListMode);
d3875 4
a3878 2
      theWitRun->witGetPostSolveRecovery (
         postSolveRecovery);
d3888 4
a3891 2
      theWitRun->witGetPrefHighStockSLBs (
         prefHighStockSLBs);
d3901 4
a3904 2
      theWitRun->witGetPreprocessed (
         preprocessed);
d3914 4
a3917 2
      theWitRun->witGetRespectStockSLBs (
         respectStockSLBs);
d3927 4
a3930 2
      theWitRun->witGetRoundReqVols (
         roundReqVols);
d3940 4
a3943 2
      theWitRun->witGetSelSplit (
         selSplit);
d3953 4
a3956 2
      theWitRun->witGetSkipFailures (
         skipFailures);
d3966 4
a3969 2
      theWitRun->witGetStockReallocation (
         stockReallocation);
d3982 7
a3988 5
      theWitRun->witGetSubsBomEntryAppData (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         appData);
d4001 7
a4007 5
      theWitRun->witGetSubsBomEntryConsRate (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         consRate);
d4020 7
a4026 5
      theWitRun->witGetSubsBomEntryConsRate (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         consRate);
d4039 7
a4045 5
      theWitRun->witGetSubsBomEntryConsumedPart (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         consumedPart);
d4058 7
a4064 5
      theWitRun->witGetSubsBomEntryEarliestPeriod (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         earliestPeriod);
d4077 7
a4083 5
      theWitRun->witGetSubsBomEntryExecPenalty (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         execPenalty);
d4096 7
a4102 5
      theWitRun->witGetSubsBomEntryExecPenalty (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         execPenalty);
d4115 7
a4121 5
      theWitRun->witGetSubsBomEntryExpAllowed (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expAllowed);
d4134 7
a4140 5
      theWitRun->witGetSubsBomEntryExpNetAversion (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expNetAversion);
d4153 7
a4159 5
      theWitRun->witGetSubsBomEntryExpNetAversion (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expNetAversion);
d4172 7
a4178 5
      theWitRun->witGetSubsBomEntryFalloutRate (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         falloutRate);
d4191 7
a4197 5
      theWitRun->witGetSubsBomEntryFalloutRate (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         falloutRate);
d4210 7
a4216 5
      theWitRun->witGetSubsBomEntryFssSubVol (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         fssSubVol);
d4229 7
a4235 5
      theWitRun->witGetSubsBomEntryFssSubVol (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         fssSubVol);
d4248 7
a4254 5
      theWitRun->witGetSubsBomEntryImpactPeriod (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         impactPeriod);
d4267 7
a4273 5
      theWitRun->witGetSubsBomEntryLatestPeriod (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         latestPeriod);
d4286 7
a4292 5
      theWitRun->witGetSubsBomEntryMrpNetAllowed (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         mrpNetAllowed);
d4305 7
a4311 5
      theWitRun->witGetSubsBomEntryMrpSubVol (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         mrpSubVol);
d4324 7
a4330 5
      theWitRun->witGetSubsBomEntryMrpSubVol (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         mrpSubVol);
d4343 7
a4349 5
      theWitRun->witGetSubsBomEntryNetAllowed (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         netAllowed);
d4362 7
a4368 5
      theWitRun->witGetSubsBomEntryObj1SubCost (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj1SubCost);
d4381 7
a4387 5
      theWitRun->witGetSubsBomEntryObj1SubCost (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj1SubCost);
d4400 7
a4406 5
      theWitRun->witGetSubsBomEntryOffset (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         offset);
d4419 7
a4425 5
      theWitRun->witGetSubsBomEntryOffset (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         offset);
d4438 7
a4444 5
      theWitRun->witGetSubsBomEntryRoutingShare (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         routingShare);
d4457 7
a4463 5
      theWitRun->witGetSubsBomEntryRoutingShare (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         routingShare);
d4476 7
a4482 5
      theWitRun->witGetSubsBomEntrySelForDel (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         selForDel);
d4495 7
a4501 5
      theWitRun->witGetSubsBomEntrySubCost (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subCost);
d4514 7
a4520 5
      theWitRun->witGetSubsBomEntrySubCost (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subCost);
d4533 7
a4539 5
      theWitRun->witGetSubsBomEntrySubVol (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subVol);
d4552 7
a4558 5
      theWitRun->witGetSubsBomEntrySubVol (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subVol);
d4568 4
a4571 2
      theWitRun->witGetTieBreakPropRt (
         tieBreakPropRt);
d4581 4
a4584 2
      theWitRun->witGetTitle (
         title);
d4594 4
a4597 2
      theWitRun->witGetTruncOffsets (
         truncOffsets);
d4607 4
a4610 2
      theWitRun->witGetTwoWayMultiExec (
         twoWayMultiExec);
d4620 4
a4623 2
      theWitRun->witGetUseFocusHorizons (
         useFocusHorizons);
d4633 4
a4636 2
      theWitRun->witGetUserHeurStart (
         userHeurStart);
d4646 4
a4649 2
      theWitRun->witGetWbounds (
         wbounds);
d4659 4
a4662 2
      theWitRun->witGetWbounds (
         wbounds);
d4672 4
a4675 2
      theWitRun->witGetWit34Compatible (
         wit34Compatible);
d4684 3
a4686 1
      theWitRun->witHeurImplode ();
d4700 8
a4707 6
      theWitRun->witIncHeurAlloc (
         demandedPartName,
         demandName,
         shipPeriod,
         desIncVol,
         incVol);
d4721 8
a4728 6
      theWitRun->witIncHeurAlloc (
         demandedPartName,
         demandName,
         shipPeriod,
         desIncVol,
         incVol);
d4743 9
a4751 7
      theWitRun->witIncHeurAllocTwme (
         demandedPartName,
         demandName,
         shipPeriod,
         desIncVol,
         incVol,
         asapMultiExec);
d4766 9
a4774 7
      theWitRun->witIncHeurAllocTwme (
         demandedPartName,
         demandName,
         shipPeriod,
         desIncVol,
         incVol,
         asapMultiExec);
d4783 3
a4785 1
      theWitRun->witInitialize ();
d4794 3
a4796 1
      theWitRun->witMrp ();
d4809 3
a4811 1
      (* theWitRun)->witNewRun ();
d4822 3
a4824 1
      theWitRun->witOptImplode ();
d4833 3
a4835 1
      theWitRun->witOptPreprocess ();
d4846 3
a4848 1
      theWitRun->witPreprocess ();
d4857 3
a4859 1
      theWitRun->witPostprocess ();
d4868 3
a4870 1
      theWitRun->witPurgeData ();
d4880 4
a4883 2
      theWitRun->witReadData (
         fileName);
d4892 3
a4894 1
      theWitRun->witResetObjItr ();
d4904 4
a4907 2
      theWitRun->witSetAccAfterSoftLB (
         accAfterSoftLB);
d4917 4
a4920 2
      theWitRun->witSetAccAfterOptImp (
         accAfterOptImp);
d4930 4
a4933 2
      theWitRun->witSetAppData (
         appData);
d4943 4
a4946 2
      theWitRun->witSetAutoPriority (
         autoPriority);
d4958 6
a4963 4
      theWitRun->witSetBomEntryAppData (
         operationName,
         bomEntryIndex,
         appData);
d4975 6
a4980 4
      theWitRun->witSetBomEntryConsRate (
         operationName,
         bomEntryIndex,
         consRate);
d4992 6
a4997 4
      theWitRun->witSetBomEntryConsRate (
         operationName,
         bomEntryIndex,
         consRate);
d5009 6
a5014 4
      theWitRun->witSetBomEntryEarliestPeriod (
         operationName,
         bomEntryIndex,
         earliestPeriod);
d5026 6
a5031 4
      theWitRun->witSetBomEntryExecPenalty (
         operationName,
         bomEntryIndex,
         execPenalty);
d5043 6
a5048 4
      theWitRun->witSetBomEntryExecPenalty (
         operationName,
         bomEntryIndex,
         execPenalty);
d5060 6
a5065 4
      theWitRun->witSetBomEntryFalloutRate (
         operationName,
         bomEntryIndex,
         falloutRate);
d5077 6
a5082 4
      theWitRun->witSetBomEntryFalloutRate (
         operationName,
         bomEntryIndex,
         falloutRate);
d5094 6
a5099 4
      theWitRun->witSetBomEntryLatestPeriod (
         operationName,
         bomEntryIndex,
         latestPeriod);
d5111 6
a5116 4
      theWitRun->witSetBomEntryMandEC (
         operationName,
         bomEntryIndex,
         mandEC);
d5128 6
a5133 4
      theWitRun->witSetBomEntryOffset (
         operationName,
         bomEntryIndex,
         offset);
d5145 6
a5150 4
      theWitRun->witSetBomEntryOffset (
         operationName,
         bomEntryIndex,
         offset);
d5162 6
a5167 4
      theWitRun->witSetBomEntryPropRtg (
         operationName,
         bomEntryIndex,
         propRtg);
d5179 6
a5184 4
      theWitRun->witSetBomEntryRoutingShare (
         operationName,
         bomEntryIndex,
         routingShare);
d5196 6
a5201 4
      theWitRun->witSetBomEntryRoutingShare (
         operationName,
         bomEntryIndex,
         routingShare);
d5213 6
a5218 4
      theWitRun->witSetBomEntrySelForDel (
         operationName,
         bomEntryIndex,
         selForDel);
d5230 6
a5235 4
      theWitRun->witSetBomEntrySingleSource (
         operationName,
         bomEntryIndex,
         singleSource);
d5247 6
a5252 4
      theWitRun->witSetBopEntryAppData (
         operationName,
         bopEntryIndex,
         appData);
d5264 6
a5269 4
      theWitRun->witSetBopEntryEarliestPeriod (
         operationName,
         bopEntryIndex,
         earliestPeriod);
d5281 6
a5286 4
      theWitRun->witSetBopEntryExpAllowed (
         operationName,
         bopEntryIndex,
         expAllowed);
d5298 6
a5303 4
      theWitRun->witSetBopEntryExpAversion (
         operationName,
         bopEntryIndex,
         expAversion);
d5315 6
a5320 4
      theWitRun->witSetBopEntryExpAversion (
         operationName,
         bopEntryIndex,
         expAversion);
d5332 6
a5337 4
      theWitRun->witSetBopEntryLatestPeriod (
         operationName,
         bopEntryIndex,
         latestPeriod);
d5349 6
a5354 4
      theWitRun->witSetBopEntryOffset (
         operationName,
         bopEntryIndex,
         offset);
d5366 6
a5371 4
      theWitRun->witSetBopEntryOffset (
         operationName,
         bopEntryIndex,
         offset);
d5383 6
a5388 4
      theWitRun->witSetBopEntryPipShare (
         operationName,
         bopEntryIndex,
         pipShare);
d5400 6
a5405 4
      theWitRun->witSetBopEntryPipShare (
         operationName,
         bopEntryIndex,
         pipShare);
d5417 6
a5422 4
      theWitRun->witSetBopEntryProductRate (
         operationName,
         bopEntryIndex,
         productRate);
d5434 6
a5439 4
      theWitRun->witSetBopEntryProductRate (
         operationName,
         bopEntryIndex,
         productRate);
d5451 6
a5456 4
      theWitRun->witSetBopEntryRoutingShare (
         operationName,
         bopEntryIndex,
         routingShare);
d5468 6
a5473 4
      theWitRun->witSetBopEntryRoutingShare (
         operationName,
         bopEntryIndex,
         routingShare);
d5485 6
a5490 4
      theWitRun->witSetBopEntrySelForDel (
         operationName,
         bopEntryIndex,
         selForDel);
d5500 4
a5503 2
      theWitRun->witSetCompPrices (
         compPrices);
d5513 4
a5516 2
      theWitRun->witSetComputeCriticalList (
         computeCriticalList);
d5528 6
a5533 4
      theWitRun->witSetDemandAppData (
         partName,
         demandName,
         appData);
d5547 8
a5554 6
      theWitRun->witSetDemandCumShipBounds (
         partName,
         demandName,
         hardLower,
         softLower,
         hardUpper);
d5568 8
a5575 6
      theWitRun->witSetDemandCumShipBounds (
         partName,
         demandName,
         hardLower,
         softLower,
         hardUpper);
d5587 6
a5592 4
      theWitRun->witSetDemandCumShipReward (
         partName,
         demandName,
         cumShipReward);
d5604 6
a5609 4
      theWitRun->witSetDemandCumShipReward (
         partName,
         demandName,
         cumShipReward);
d5621 6
a5626 4
      theWitRun->witSetDemandDemandVol (
         partName,
         demandName,
         demandVol);
d5638 6
a5643 4
      theWitRun->witSetDemandDemandVol (
         partName,
         demandName,
         demandVol);
d5655 6
a5660 4
      theWitRun->witSetDemandFocusHorizon (
         partName,
         demandName,
         focusHorizon);
d5672 6
a5677 4
      theWitRun->witSetDemandFssShipVol (
         partName,
         demandName,
         fssShipVol);
d5689 6
a5694 4
      theWitRun->witSetDemandFssShipVol (
         partName,
         demandName,
         fssShipVol);
d5706 6
a5711 4
      theWitRun->witSetDemandObj1CumShipReward (
         partName,
         demandName,
         obj1CumShipReward);
d5723 6
a5728 4
      theWitRun->witSetDemandObj1CumShipReward (
         partName,
         demandName,
         obj1CumShipReward);
d5740 6
a5745 4
      theWitRun->witSetDemandObj1ShipReward (
         partName,
         demandName,
         obj1ShipReward);
d5757 6
a5762 4
      theWitRun->witSetDemandObj1ShipReward (
         partName,
         demandName,
         obj1ShipReward);
d5774 6
a5779 4
      theWitRun->witSetDemandPriority (
         partName,
         demandName,
         priority);
d5791 6
a5796 4
      theWitRun->witSetDemandSelForDel (
         partName,
         demandName,
         selForDel);
d5808 6
a5813 4
      theWitRun->witSetDemandShipLateUB (
         partName,
         demandName,
         shipLateUB);
d5825 6
a5830 4
      theWitRun->witSetDemandShipReward (
         partName,
         demandName,
         shipReward);
d5842 6
a5847 4
      theWitRun->witSetDemandShipReward (
         partName,
         demandName,
         shipReward);
d5859 6
a5864 4
      theWitRun->witSetDemandShipVol (
         partName,
         demandName,
         shipVol);
d5876 6
a5881 4
      theWitRun->witSetDemandShipVol (
         partName,
         demandName,
         shipVol);
d5891 4
a5894 2
      theWitRun->witSetEquitability (
         equitablity);
d5904 4
a5907 2
      theWitRun->witSetExecEmptyBom (
         execEmptyBom);
d5917 4
a5920 2
      theWitRun->witSetExpCutoff (
         expCutoff);
d5930 4
a5933 2
      theWitRun->witSetExpCutoff (
         expCutoff);
d5943 4
a5946 2
      theWitRun->witSetForcedMultiEq (
         forcedMultiEq);
d5956 4
a5959 2
      theWitRun->witSetHashTableSize (
         hashTableSize);
d5969 4
a5972 2
      theWitRun->witSetHighPrecisionWD (
         highPrecisionWD);
d5982 4
a5985 2
      theWitRun->witSetIndependentOffsets (
         independentOffsets);
d5995 4
a5998 2
      theWitRun->witSetLotSizeTol (
         lotSizeTol);
d6008 4
a6011 2
      theWitRun->witSetLotSizeTol (
         lotSizeTol);
d6022 5
a6026 3
      theWitRun->witSetMesgFileAccessMode (
         quiet,
         mesgFileAccessMode);
d6037 5
a6041 3
      theWitRun->witSetMesgFileName (
         quiet,
         mesgFileName);
d6053 6
a6058 4
      theWitRun->witSetMesgPrintNumber (
         quiet,
         messageNumber,
         mesgPrintMunber);
d6070 6
a6075 4
      theWitRun->witSetMesgStopRunning (
         quiet,
         messageNumber,
         mesgStopRunning);
d6087 6
a6092 4
      theWitRun->witSetMesgThrowException (
         quiet,
         messageNumber,
         mesgThrowException);
d6104 6
a6109 4
      theWitRun->witSetMesgTimesPrint (
         quiet,
         messageNumber,
         mesgTimesPrint);
d6119 4
a6122 2
      theWitRun->witSetMultiExec (
         multiExec);
d6132 4
a6135 2
      theWitRun->witSetMultiRoute (
         multiRoute);
d6145 4
a6148 2
      theWitRun->witSetNPeriods (
         nPeriods);
d6158 4
a6161 2
      theWitRun->witSetOslMesgFileName (
         oslMesgFileName);
d6172 5
a6176 3
      theWitRun->witSetOperationAppData (
         operationName,
         appData);
d6189 7
a6195 5
      theWitRun->witSetOperationExecBounds (
         operationName,
         hardLower,
         softLower,
         hardUpper);
d6208 7
a6214 5
      theWitRun->witSetOperationExecBounds (
         operationName,
         hardLower,
         softLower,
         hardUpper);
d6226 5
a6230 3
      theWitRun->witSetOperationExecCost (
         operationName,
         execCost);
d6242 5
a6246 3
      theWitRun->witSetOperationExecCost (
         operationName,
         execCost);
d6258 5
a6262 3
      theWitRun->witSetOperationExecPenalty (
         operationName,
         execPenalty);
d6274 5
a6278 3
      theWitRun->witSetOperationExecPenalty (
         operationName,
         execPenalty);
d6289 5
a6293 3
      theWitRun->witSetOperationExecVol (
         operationName,
         execVol);
d6304 5
a6308 3
      theWitRun->witSetOperationExecVol (
         operationName,
         execVol);
d6320 5
a6324 3
      theWitRun->witSetOperationIncLotSize (
         operationName,
         incLotSize);
d6336 5
a6340 3
      theWitRun->witSetOperationIncLotSize (
         operationName,
         incLotSize);
d6352 5
a6356 3
      theWitRun->witSetOperationIncLotSize2 (
         operationName,
         incLotSize2);
d6368 5
a6372 3
      theWitRun->witSetOperationIncLotSize2 (
         operationName,
         incLotSize2);
d6384 5
a6388 3
      theWitRun->witSetOperationLotSize2Thresh (
         operationName,
         lotSize2Thresh);
d6400 5
a6404 3
      theWitRun->witSetOperationLotSize2Thresh (
         operationName,
         lotSize2Thresh);
d6416 5
a6420 3
      theWitRun->witSetOperationMinLotSize (
         operationName,
         minLotSize);
d6432 5
a6436 3
      theWitRun->witSetOperationMinLotSize (
         operationName,
         minLotSize);
d6448 5
a6452 3
      theWitRun->witSetOperationMinLotSize2 (
         operationName,
         minLotSize2);
d6464 5
a6468 3
      theWitRun->witSetOperationMinLotSize2 (
         operationName,
         minLotSize2);
d6480 5
a6484 3
      theWitRun->witSetOperationSelForDel (
         operationName,
         selForDel);
d6496 5
a6500 3
      theWitRun->witSetOperationTwoLevelLotSizes (
         operationName,
         twoLevelLotSizes);
d6512 5
a6516 3
      theWitRun->witSetOperationYieldRate (
         operationName,
         yieldRate);
d6528 5
a6532 3
      theWitRun->witSetOperationYieldRate (
         operationName,
         yieldRate);
d6542 4
a6545 2
      theWitRun->witSetOptInitMethod (
         optInitMethod);
d6555 4
a6558 2
      theWitRun->witSetOutputPrecision (
         outputPrecision);
d6569 5
a6573 3
      theWitRun->witSetPartAppData (
         partName,
         appData);
d6584 5
a6588 3
      theWitRun->witSetPartBuildAheadUB (
         partName,
         buildAheadUB);
d6599 5
a6603 3
      theWitRun->witSetPartBuildAsap (
         partName,
         buildAsap);
d6614 5
a6618 3
      theWitRun->witSetPartBuildNstn (
         partName,
         buildNstn);
d6629 5
a6633 3
      theWitRun->witSetPartPropRtg (
         partName,
         propRtg);
d6644 5
a6648 3
      theWitRun->witSetPartScrapCost (
         partName,
         scrapCost
d6660 5
a6664 3
      theWitRun->witSetPartScrapCost (
         partName,
         scrapCost
d6676 5
a6680 3
      theWitRun->witSetPartSelForDel (
         partName,
         selForDel);
d6691 5
a6695 3
      theWitRun->witSetPartSingleSource (
         partName,
         singleSource);
d6708 7
a6714 5
      theWitRun->witSetPartStockBounds (
         partName,
         hardLower,
         softLower,
         hardUpper);
d6727 7
a6733 5
      theWitRun->witSetPartStockBounds (
         partName,
         hardLower,
         softLower,
         hardUpper);
d6744 5
a6748 3
      theWitRun->witSetPartStockCost (
         partName,
         stockCost);
d6759 5
a6763 3
      theWitRun->witSetPartStockCost (
         partName,
         stockCost);
d6774 5
a6778 3
      theWitRun->witSetPartSupplyVol (
         partName,
         supplyVol);
d6789 5
a6793 3
      theWitRun->witSetPartSupplyVol (
         partName,
         supplyVol);
d6803 4
a6806 2
      theWitRun->witSetPenExec (
         penExec);
d6816 4
a6819 2
      theWitRun->witSetPerfPegging (
         perfPegging);
d6829 4
a6832 2
      theWitRun->witSetPgdCritListMode (
         pgdCritListMode);
d6842 4
a6845 2
      theWitRun->witSetPipSeqFromHeur (
         pipSeqFromHeur);
d6855 4
a6858 2
      theWitRun->witSetPostSolveRecovery (
         postSolveRecovery);
d6868 4
a6871 2
      theWitRun->witSetPrefHighStockSLBs (
         prefHighStockSLBs);
d6881 4
a6884 2
      theWitRun->witSetRespectStockSLBs (
         respectStockSLBs);
d6894 4
a6897 2
      theWitRun->witSetRoundReqVols (
         roundReqVols);
d6907 4
a6910 2
      theWitRun->witSetSelSplit (
         selSplit);
d6920 4
a6923 2
      theWitRun->witSetSkipFailures (
         skipFailures);
d6933 4
a6936 2
      theWitRun->witSetStockReallocation (
         stockReallocation);
d6949 7
a6955 5
      theWitRun->witSetSubsBomEntryAppData (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         appData);
d6968 7
a6974 5
      theWitRun->witSetSubsBomEntryConsRate (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         consRate);
d6987 7
a6993 5
      theWitRun->witSetSubsBomEntryConsRate (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         consRate);
d7006 7
a7012 5
      theWitRun->witSetSubsBomEntryEarliestPeriod (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         earliestPeriod);
d7025 7
a7031 5
      theWitRun->witSetSubsBomEntryExecPenalty (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         execPenalty);
d7044 7
a7050 5
      theWitRun->witSetSubsBomEntryExecPenalty (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         execPenalty);
d7063 7
a7069 5
      theWitRun->witSetSubsBomEntryExpAllowed (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expAllowed);
d7082 7
a7088 5
      theWitRun->witSetSubsBomEntryExpNetAversion (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expNetAversion);
d7101 7
a7107 5
      theWitRun->witSetSubsBomEntryExpNetAversion (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expNetAversion);
d7120 7
a7126 5
      theWitRun->witSetSubsBomEntryFalloutRate (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         falloutRate);
d7139 7
a7145 5
      theWitRun->witSetSubsBomEntryFalloutRate (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         falloutRate);
d7158 7
a7164 5
      theWitRun->witSetSubsBomEntryLatestPeriod (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         latestPeriod);
d7177 7
a7183 5
      theWitRun->witSetSubsBomEntryMrpNetAllowed (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         mrpNetAllowed);
d7196 7
a7202 5
      theWitRun->witSetSubsBomEntryNetAllowed (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         netAllowed);
d7215 7
a7221 5
      theWitRun->witSetSubsBomEntryObj1SubCost (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj1SubCost);
d7234 7
a7240 5
      theWitRun->witSetSubsBomEntryObj1SubCost (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj1SubCost);
d7253 7
a7259 5
      theWitRun->witSetSubsBomEntryOffset (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         offset);
d7272 7
a7278 5
      theWitRun->witSetSubsBomEntryOffset (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         offset);
d7291 7
a7297 5
      theWitRun->witSetSubsBomEntryRoutingShare (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         routingShare);
d7310 7
a7316 5
      theWitRun->witSetSubsBomEntryRoutingShare (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         routingShare);
d7329 7
a7335 5
      theWitRun->witSetSubsBomEntrySelForDel (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         selForDel);
d7348 7
a7354 5
      theWitRun->witSetSubsBomEntrySubCost (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subCost);
d7367 7
a7373 5
      theWitRun->witSetSubsBomEntrySubCost (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subCost);
d7386 7
a7392 5
      theWitRun->witSetSubsBomEntrySubVol (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subVol);
d7405 7
a7411 5
      theWitRun->witSetSubsBomEntrySubVol (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         subVol);
d7421 4
a7424 2
      theWitRun->witSetTieBreakPropRt (
         tieBreakPropRt);
d7434 4
a7437 2
      theWitRun->witSetTitle (
         title);
d7447 4
a7450 2
      theWitRun->witSetTruncOffsets (
         truncOffsets);
d7460 4
a7463 2
      theWitRun->witSetTwoWayMultiExec (
         twoWayMultiExec);
d7473 4
a7476 2
      theWitRun->witSetUseFocusHorizons (
         useFocusHorizons);
d7486 4
a7489 2
      theWitRun->witSetUserHeurStart (
         userHeurStart);
d7499 4
a7502 2
      theWitRun->witSetWbounds (
         wbounds);
d7512 4
a7515 2
      theWitRun->witSetWbounds (
         wbounds);
d7525 4
a7528 2
      theWitRun->witSetWit34Compatible (
         wit34Compatible);
d7537 3
a7539 1
      theWitRun->witShutDownHeurAlloc ();
d7548 3
a7550 1
      theWitRun->witStartHeurAlloc ();
d7562 6
a7567 4
      theWitRun->witWriteCriticalList (
         fileName,
         fileFormat,
         maxListLen);
d7577 4
a7580 2
      theWitRun->witWriteData (
         fileName);
d7591 5
a7595 3
      theWitRun->witWriteExecSched (
         fileName,
         fileFormat);
d7606 5
a7610 3
      theWitRun->witWriteReqSched (
         fileName,
         fileFormat);
d7621 5
a7625 3
      theWitRun->witWriteShipSched (
         fileName,
         fileFormat);
d7640 3
a7642 1
   va_list ap;
d7644 9
a7652 5
   witReturnCode rc;
   rc = theWitRun->witAddBomEntryVa (
         consumingOperationName,
         consumedPartName,
         ap);
d7654 1
d7666 3
a7668 1
   va_list ap;
d7670 9
a7678 5
   witReturnCode rc;
   rc = theWitRun->witAddDemandVa (
         partName,
         demandName,
         ap);
d7680 1
d7692 3
a7694 1
   va_list ap;
d7696 9
a7704 5
   witReturnCode rc;
   rc = theWitRun->witAddPartVa (
         partName,
         partCategory,
         ap);
d7706 1
d7719 3
a7721 1
   va_list ap;
d7723 10
a7732 6
   witReturnCode rc;
   rc = theWitRun->witAddSubsBomEntryVa (
         operationName,
         bomEntryIndex,
         consumedPartName,
         ap);
d7734 1
d7747 6
a7752 4
      theWitRun->witGetBomEntryFallout (
         operationName,
         bomEntryIndex,
         fallout);
d7764 6
a7769 4
      theWitRun->witGetBomEntryPropRouting (
         operationName,
         bomEntryIndex,
         propRouting);
d7781 6
a7786 4
      theWitRun->witGetBomEntryUsageRate (
         operationName,
         bomEntryIndex,
         usageRate);
d7798 6
a7803 4
      theWitRun->witGetBomEntryUsageTime (
         operationName,
         bomEntryIndex,
         time);
d7815 6
a7820 4
      theWitRun->witGetBopEntryByProduct (
         operationName,
         bopEntryIndex,
         byProduct);
d7832 6
a7837 4
      theWitRun->witGetBopEntryProdRate (
         operationName,
         bopEntryIndex,
         prodRate);
d7847 4
a7850 2
      theWitRun->witGetCapCost (
         capCost);
d7860 4
a7863 2
      theWitRun->witGetCapCost (
         capCost);
d7875 6
a7880 4
      theWitRun->witGetDemandBuildAheadLimit (
         partName,
         demandName,
         buildAheadLimit);
d7892 6
a7897 4
      theWitRun->witGetDemandBuildAheadUB (
         partName,
         demandName,
         buildAheadUB);
d7909 6
a7914 4
      theWitRun->witGetDemandGrossRev (
         demandedPartName,
         demandName,
         grossRev);
d7926 6
a7931 4
      theWitRun->witGetDemandGrossRev (
         demandedPartName,
         demandName,
         grossRev);
d7943 6
a7948 4
      theWitRun->witGetDemandPrefBuildAhead (
         partName,
         demandName,
         prefBuildAhead);
d7960 6
a7965 4
      theWitRun->witGetDemandShipLateLimit (
         partName,
         demandName,
         shipLateLimit);
d7975 4
a7978 2
      theWitRun->witGetInvCost (
         invCost);
d7988 4
a7991 2
      theWitRun->witGetInvCost (
         invCost);
d8001 4
a8004 2
      theWitRun->witGetLocalBuildAhead (
         localBuildAhead);
d8014 4
a8017 2
      theWitRun->witGetLocalMultiExec (
         localMultiExec);
d8030 7
a8036 5
      theWitRun->witGetObj2Values (
         revValue,
         invValue,
         servValue,
         subsValue);
d8049 7
a8055 5
      theWitRun->witGetObj2Values (
         revValue,
         invValue,
         servValue,
         subsValue);
d8065 4
a8068 2
      theWitRun->witGetObj2Winv (
         obj2Winv);
d8078 4
a8081 2
      theWitRun->witGetObj2Winv (
         obj2Winv);
d8091 4
a8094 2
      theWitRun->witGetObj2Wrev (
         obj2Wrev);
d8104 4
a8107 2
      theWitRun->witGetObj2Wrev (
         obj2Wrev);
d8117 4
a8120 2
      theWitRun->witGetObj2Wserv (
         obj2Wserv);
d8130 4
a8133 2
      theWitRun->witGetObj2Wserv (
         obj2Wserv);
d8143 4
a8146 2
      theWitRun->witGetObj2Wsub (
         obj2Wsub);
d8156 4
a8159 2
      theWitRun->witGetObj2Wsub (
         obj2Wsub);
d8169 4
a8172 2
      theWitRun->witGetObjChoice (
         objChoice);
d8184 5
a8188 3
      theWitRun->witGetOperationObj1ExecCost (
         operationName,
         obj1ExecCost);
d8200 5
a8204 3
      theWitRun->witGetOperationObj1ExecCost (
         operationName,
         obj1ExecCost);
d8216 5
a8220 3
      theWitRun->witGetOperationObj2AuxCost (
         operationName,
         obj2AuxCost);
d8232 5
a8236 3
      theWitRun->witGetOperationObj2AuxCost (
         operationName,
         obj2AuxCost);
d8248 5
a8252 3
      theWitRun->witGetOperationYield (
         operationName,
         yield);
d8262 4
a8265 2
      theWitRun->witGetOptWithLotSizes (
         optWithLotSizes);
d8276 5
a8280 3
      theWitRun->witGetPartBuildAheadLimit (
         partName,
         buildAheadLimit);
d8291 5
a8295 3
      theWitRun->witGetPartCycleTime (
         partName,
         cycleTime);
d8306 5
a8310 3
      theWitRun->witGetPartIncLotSize (
         partName,
         incLotSize);
d8321 5
a8325 3
      theWitRun->witGetPartMinLotSize (
         partName,
         minLotSize);
d8336 5
a8340 3
      theWitRun->witGetPartMrpProdVol (
         partName,
         mrpProdVol);
d8351 5
a8355 3
      theWitRun->witGetPartNBomEntries (
         partName,
         nBomEntries);
d8366 5
a8370 3
      theWitRun->witGetPartObj1ProdCost (
         partName,
         obj1ProdCost);
d8381 5
a8385 3
      theWitRun->witGetPartObj1ScrapCost (
         partName,
         obj1ScrapCost);
d8396 5
a8400 3
      theWitRun->witGetPartObj1ScrapCost (
         partName,
         obj1ScrapCost);
d8411 5
a8415 3
      theWitRun->witGetPartObj1StockCost (
         partName,
         obj1StockCost);
d8426 5
a8430 3
      theWitRun->witGetPartObj1StockCost (
         partName,
         obj1StockCost);
d8443 7
a8449 5
      theWitRun->witGetPartProdBounds (
         partName,
         hardLower,
         softLower,
         hardUpper);
d8460 5
a8464 3
      theWitRun->witGetPartPropRouting (
         partName,
         propRouting);
d8475 5
a8479 3
      theWitRun->witGetPartUnitCost (
         partName,
         unitCost);
d8490 5
a8494 3
      theWitRun->witGetPartUnitCost (
         partName,
         unitCost);
d8505 5
a8509 3
      theWitRun->witGetPartYield (
         partName,
         yield);
d8519 4
a8522 2
      theWitRun->witGetPeriodsPerYear (
         periodsPerYear);
d8532 4
a8535 2
      theWitRun->witGetPeriodsPerYear (
         periodsPerYear);
d8545 4
a8548 2
      theWitRun->witGetStockRealloc (
         stockRealloc);
d8561 7
a8567 5
      theWitRun->witGetSubsBomEntryFallout (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         fallout);
d8580 7
a8586 5
      theWitRun->witGetSubsBomEntryObj2SubPenalty (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj2SubPenalty);
d8599 7
a8605 5
      theWitRun->witGetSubsBomEntryObj2SubPenalty (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj2SubPenalty);
d8618 7
a8624 5
      theWitRun->witGetSubsBomEntryProdVol (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         prodVol);
d8637 7
a8643 5
      theWitRun->witGetSubsBomEntryUsageRate (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         usageRate);
d8655 6
a8660 4
      theWitRun->witSetBomEntryFallout (
         operationName,
         bomEntryIndex,
         fallout);
d8672 6
a8677 4
      theWitRun->witSetBomEntryPropRouting (
         operationName,
         bomEntryIndex,
         propRouting);
d8689 6
a8694 4
      theWitRun->witSetBomEntryUsageRate (
         operationName,
         bomEntryIndex,
         usageRate);
d8706 6
a8711 4
      theWitRun->witSetBomEntryUsageTime (
         operationName,
         bomEntryIndex,
         time);
d8723 6
a8728 4
      theWitRun->witSetBopEntryByProduct (
         operationName,
         bopEntryIndex,
         byProduct);
d8740 6
a8745 4
      theWitRun->witSetBopEntryProdRate (
         operationName,
         bopEntryIndex,
         prodRate);
d8755 4
a8758 2
      theWitRun->witSetBuildWhenEmpty (
         buildWhenEmpty);
d8768 4
a8771 2
      theWitRun->witSetCapCost (
         capCost);
d8781 4
a8784 2
      theWitRun->witSetCapCost (
         capCost);
d8796 6
a8801 4
      theWitRun->witSetDemandBuildAheadLimit (
         partName,
         demandName,
         buildAheadLimit);
d8813 6
a8818 4
      theWitRun->witSetDemandBuildAheadUB (
         partName,
         demandName,
         buildAheadUB);
d8830 6
a8835 4
      theWitRun->witSetDemandGrossRev (
         partName,
         demandName,
         grossRev);
d8847 6
a8852 4
      theWitRun->witSetDemandGrossRev (
         partName,
         demandName,
         grossRev);
d8864 6
a8869 4
      theWitRun->witSetDemandPrefBuildAhead (
         partName,
         demandName,
         prefBuildAhead);
d8881 6
a8886 4
      theWitRun->witSetDemandShipLateLimit (
         partName,
         demandName,
         shipLateLimit);
d8896 4
a8899 2
      theWitRun->witSetInvCost (
         invCost);
d8909 4
a8912 2
      theWitRun->witSetInvCost (
         invCost);
d8922 4
a8925 2
      theWitRun->witSetLocalBuildAhead (
         localBuildAhead);
d8935 4
a8938 2
      theWitRun->witSetLocalMultiExec (
         localMultiExec);
d8948 4
a8951 2
      theWitRun->witSetObj2Winv (
         obj2Winv);
d8961 4
a8964 2
      theWitRun->witSetObj2Winv (
         obj2Winv);
d8974 4
a8977 2
      theWitRun->witSetObj2Wrev (
         obj2Wrev);
d8987 4
a8990 2
      theWitRun->witSetObj2Wrev (
         obj2Wrev);
d9000 4
a9003 2
      theWitRun->witSetObj2Wserv (
         obj2Wserv);
d9013 4
a9016 2
      theWitRun->witSetObj2Wserv (
         obj2Wserv);
d9026 4
a9029 2
      theWitRun->witSetObj2Wsub (
         obj2Wsub);
d9039 4
a9042 2
      theWitRun->witSetObj2Wsub (
         obj2Wsub);
d9052 4
a9055 2
      theWitRun->witSetObjChoice (
         objChoice);
d9067 5
a9071 3
      theWitRun->witSetOperationObj1ExecCost (
         operationName,
         obj1ExecCost);
d9083 5
a9087 3
      theWitRun->witSetOperationObj1ExecCost (
         operationName,
         obj1ExecCost);
d9099 5
a9103 3
      theWitRun->witSetOperationObj2AuxCost (
         operationName,
         obj2AuxCost);
d9115 5
a9119 3
      theWitRun->witSetOperationObj2AuxCost (
         operationName,
         obj2AuxCost);
d9131 5
a9135 3
      theWitRun->witSetOperationYield (
         operationName,
         yield);
d9145 4
a9148 2
      theWitRun->witSetOptWithLotSizes (
         optWithLotSizes);
d9159 5
a9163 3
      theWitRun->witSetPartBuildAheadLimit (
         partName,
         buildAheadLimit);
d9174 5
a9178 3
      theWitRun->witSetPartCycleTime (
         partName,
         cycleTime);
d9189 5
a9193 3
      theWitRun->witSetPartIncLotSize (
         partName,
         incLotSize);
d9204 5
a9208 3
      theWitRun->witSetPartMinLotSize (
         partName,
         minLotSize);
d9219 5
a9223 3
      theWitRun->witSetPartObj1ProdCost (
         partName,
         obj1ProdCost);
d9234 5
a9238 3
      theWitRun->witSetPartObj1ScrapCost (
         partName,
         obj1ScrapCost
d9250 5
a9254 3
      theWitRun->witSetPartObj1ScrapCost (
         partName,
         obj1ScrapCost
d9266 5
a9270 3
      theWitRun->witSetPartObj1StockCost (
         partName,
         obj1StockCost);
d9281 5
a9285 3
      theWitRun->witSetPartObj1StockCost (
         partName,
         obj1StockCost);
d9298 7
a9304 5
      theWitRun->witSetPartProdBounds (
         partName,
         hardLower,
         softLower,
         hardUpper);
d9315 5
a9319 3
      theWitRun->witSetPartProdVol (
         partName,
         prodVol);
d9330 5
a9334 3
      theWitRun->witSetPartPropRouting (
         partName,
         propRouting);
d9345 5
a9349 3
      theWitRun->witSetPartUnitCost (
         partName,
         unitCost);
d9360 5
a9364 3
      theWitRun->witSetPartUnitCost (
         partName,
         unitCost);
d9375 5
a9379 3
      theWitRun->witSetPartYield (
         partName,
         yield);
d9389 4
a9392 2
      theWitRun->witSetPeriodsPerYear (
         periodsPerYear);
d9402 4
a9405 2
      theWitRun->witSetPeriodsPerYear (
         periodsPerYear);
d9415 4
a9418 2
      theWitRun->witSetStockRealloc (
         stockRealloc);
d9431 7
a9437 5
      theWitRun->witSetSubsBomEntryFallout (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         fallout);
d9450 7
a9456 5
      theWitRun->witSetSubsBomEntryObj2SubPenalty (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj2SubPenalty);
d9469 7
a9475 5
      theWitRun->witSetSubsBomEntryObj2SubPenalty (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj2SubPenalty);
d9487 7
a9493 5
      theWitRun->witSetSubsBomEntryProdVol (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         prodVol);
d9506 7
a9512 5
      theWitRun->witSetSubsBomEntryUsageRate (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         usageRate);
d9523 5
a9527 3
      theWitRun->witWriteProdSched (
         fileName,
         fileFormat);
d9539 4
a9542 2
      theWitRun->witGetSolverLogFileName (
         solverLogFileName);
d9552 4
a9555 2
      theWitRun->witSetSolverLogFileName (
         solverLogFileName);
d9565 4
a9568 2
      theWitRun->witGetNonMrSelSplit (
         nonMrSelSplit);
d9578 4
a9581 2
      theWitRun->witSetNonMrSelSplit (
         nonMrSelSplit);
d9592 5
a9596 3
      theWitRun->witGetPartBaSelSplit (
         partName,
         baSelSplit);
d9607 5
a9611 3
      theWitRun->witSetPartBaSelSplit (
         partName,
         baSelSplit);
d9623 6
a9628 4
      theWitRun->witGetBopEntryMeSelSplit (
         operationName,
         bopEntryIndex,
         meSelSplit);
d9640 6
a9645 4
      theWitRun->witSetBopEntryMeSelSplit (
         operationName,
         bopEntryIndex,
         meSelSplit);
d9655 4
a9658 2
      theWitRun->witGetSrSelSplit (
         srSelSplit);
d9668 4
a9671 2
      theWitRun->witSetSrSelSplit (
         srSelSplit);
d9681 3
a9683 1
      theWitRun->witNoDependantWitRunVeneersIsOne (isOne);
d9692 3
a9694 1
      theWitRun->witNoDependantWitRunVeneersDecr ();
d9703 3
a9705 1
      theWitRun->witNoDependantWitRunVeneersIncr ();
d9714 3
a9716 1
      theWitRun->witListUnissuedMsgs ();
d9739 3
a9741 1
      theWitRun->witTestFatalMesg ();
@


1.131
log
@[exceptions]
@
text
@d1947 13
a4018 11
WIT_DECLSPEC witReturnCode STDCALL witGetThrowExcOnError (
      WitRun * const theWitRun,
      witBoolean *   throwExcOnError)
   {
   return
      theWitRun->witGetThrowExcOnError (
         throwExcOnError);
   }

//------------------------------------------------------------------------------

d5342 15
a6513 13
WIT_DECLSPEC WitReturnCode STDCALL witSetThrowExcOnError (
      WitRun * const   theWitRun,
      const witBoolean quiet,
      const witBoolean throwExcOnError)
   {
   return
      theWitRun->witSetThrowExcOnError (
         quiet,
         throwExcOnError);
   }

//------------------------------------------------------------------------------

@


1.130
log
@[exceptions]
@
text
@d4006 11
d6497 1
a6497 1
WIT_DECLSPEC WitReturnCode STDCALL witSetThrowOnErrors (
d6500 1
a6500 1
      const witBoolean throwOnErrors)
d6503 1
a6503 1
      theWitRun->witSetThrowOnErrors (
d6505 1
a6505 1
         throwOnErrors);
@


1.129
log
@Changed names of obj1 attributes, e.g., obj1ScrapCost to scrapCost.
@
text
@d6486 13
@


1.128
log
@Moved objective #2 functions to the undocumented section of wit.h., etc.
@
text
@d1118 30
d1466 30
d2153 28
a2487 27
WIT_DECLSPEC witReturnCode STDCALL witGetOperationObj1ExecCost (
      WitRun * const theWitRun,
      const char * const operationName,
      float * * obj1ExecCost
)
   {
   return
      theWitRun->witGetOperationObj1ExecCost (
         operationName,
         obj1ExecCost);
   }


WIT_DECLSPEC witReturnCode STDCALL witGetOperationObj1ExecCostDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      double * * obj1ExecCost
)
   {
   return
      theWitRun->witGetOperationObj1ExecCost (
         operationName,
         obj1ExecCost);
   }

//------------------------------------------------------------------------------

a2939 52
WIT_DECLSPEC witReturnCode STDCALL witGetPartObj1ScrapCost (
      WitRun * const theWitRun,
      const char * const partName,
      float * * obj1ScrapCost)
   {
   return
      theWitRun->witGetPartObj1ScrapCost (
         partName,
         obj1ScrapCost);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartObj1ScrapCostDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * obj1ScrapCost)
   {
   return
      theWitRun->witGetPartObj1ScrapCost (
         partName,
         obj1ScrapCost);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartObj1StockCost (
      WitRun * const theWitRun,
      const char * const partName,
      float * * obj1StockCost)
   {
   return
      theWitRun->witGetPartObj1StockCost (
         partName,
         obj1StockCost);
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartObj1StockCostDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * obj1StockCost)
   {
   return
      theWitRun->witGetPartObj1StockCost (
         partName,
         obj1StockCost);
   }

//------------------------------------------------------------------------------

d3061 26
d3199 26
d3938 34
d4893 30
d5103 30
d5435 1
a5435 1
WIT_DECLSPEC witReturnCode STDCALL witSetOperationExecPenalty (
d5438 1
a5438 1
      const float execPenalty
d5442 1
a5442 1
      theWitRun->witSetOperationExecPenalty (
d5444 1
a5444 1
         execPenalty);
d5449 1
a5449 1
WIT_DECLSPEC witReturnCode STDCALL witSetOperationExecPenaltyDbl (
d5452 1
a5452 1
      const double execPenalty
d5456 29
a5484 1
      theWitRun->witSetOperationExecPenalty (
a5656 28
WIT_DECLSPEC witReturnCode STDCALL witSetOperationObj1ExecCost (
      WitRun * const theWitRun,
      const char * const operationName,
      const float * const obj1ExecCost
)
   {
   return
      theWitRun->witSetOperationObj1ExecCost (
         operationName,
         obj1ExecCost);
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationObj1ExecCostDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const double * const obj1ExecCost
)
   {
   return
      theWitRun->witSetOperationObj1ExecCost (
         operationName,
         obj1ExecCost);
   }

//------------------------------------------------------------------------------

d5787 1
a5787 1
WIT_DECLSPEC witReturnCode STDCALL witSetPartObj1ScrapCost (
d5790 1
a5790 1
      const float * const obj1ScrapCost)
d5793 1
a5793 1
      theWitRun->witSetPartObj1ScrapCost (
d5795 1
a5795 2
         obj1ScrapCost
         );
d5797 1
a5797 1
 
d5800 1
a5800 1
WIT_DECLSPEC witReturnCode STDCALL witSetPartObj1ScrapCostDbl (
d5803 1
a5803 1
      const double * const obj1ScrapCost)
d5806 1
a5806 1
      theWitRun->witSetPartObj1ScrapCost (
d5808 1
a5808 1
         obj1ScrapCost
d5814 1
a5814 1
WIT_DECLSPEC witReturnCode STDCALL witSetPartObj1StockCost (
d5817 1
a5817 1
      const float * const obj1StockCost)
d5820 1
a5820 1
      theWitRun->witSetPartObj1StockCost (
d5822 2
a5823 14
         obj1StockCost);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartObj1StockCostDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const double * const obj1StockCost)
   {
   return
      theWitRun->witSetPartObj1StockCost (
         partName,
         obj1StockCost);
a5827 13
WIT_DECLSPEC witReturnCode STDCALL witSetPartPropRtg (
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean * const propRtg)
   {
   return
      theWitRun->witSetPartPropRtg (
         partName,
         propRtg);
   }

//------------------------------------------------------------------------------

d5888 26
d6418 34
d7129 28
d7301 52
d7896 28
d8042 54
@


1.127
log
@Moved set/get optWithLotSizes to the undocumented section of wit.h and
api.C.
@
text
@a981 22
WIT_DECLSPEC witReturnCode STDCALL witGetCapCost (
      WitRun * const theWitRun,
      float * capCost)
   {
   return
      theWitRun->witGetCapCost (
         capCost);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetCapCostDbl (
      WitRun * const theWitRun,
      double * capCost)
   {
   return
      theWitRun->witGetCapCost (
         capCost);
   }
 
//------------------------------------------------------------------------------

a1284 30
WIT_DECLSPEC witReturnCode STDCALL witGetDemandGrossRev (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      float * grossRev)
   {
   return
      theWitRun->witGetDemandGrossRev (
         demandedPartName,
         demandName,
         grossRev);
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandGrossRevDbl (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      double * grossRev)
   {
   return
      theWitRun->witGetDemandGrossRev (
         demandedPartName,
         demandName,
         grossRev);
   }

//------------------------------------------------------------------------------

a1805 22
WIT_DECLSPEC witReturnCode STDCALL witGetInvCost (
      WitRun * const theWitRun,
      float * invCost)
   {
   return
      theWitRun->witGetInvCost (
         invCost);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetInvCostDbl (
      WitRun * const theWitRun,
      double * invCost)
   {
   return
      theWitRun->witGetInvCost (
         invCost);
   }
 
//------------------------------------------------------------------------------

a1932 133
WIT_DECLSPEC witReturnCode STDCALL witGetObj2Values (
      WitRun * const theWitRun,
      float * revValue,
      float * invValue,
      float * servValue,
      float * subsValue)
   {
   return
      theWitRun->witGetObj2Values (
         revValue,
         invValue,
         servValue,
         subsValue);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObj2ValuesDbl (
      WitRun * const theWitRun,
      double * revValue,
      double * invValue,
      double * servValue,
      double * subsValue)
   {
   return
      theWitRun->witGetObj2Values (
         revValue,
         invValue,
         servValue,
         subsValue);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObj2Winv (
      WitRun * const theWitRun,
      float * obj2Winv)
   {
   return
      theWitRun->witGetObj2Winv (
         obj2Winv);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObj2WinvDbl (
      WitRun * const theWitRun,
      double * obj2Winv)
   {
   return
      theWitRun->witGetObj2Winv (
         obj2Winv);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObj2Wrev (
      WitRun * const theWitRun,
      float * obj2Wrev)
   {
   return
      theWitRun->witGetObj2Wrev (
         obj2Wrev);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObj2WrevDbl (
      WitRun * const theWitRun,
      double * obj2Wrev)
   {
   return
      theWitRun->witGetObj2Wrev (
         obj2Wrev);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObj2Wserv (
      WitRun * const theWitRun,
      float * obj2Wserv)
   {
   return
      theWitRun->witGetObj2Wserv (
         obj2Wserv);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObj2WservDbl (
      WitRun * const theWitRun,
      double * obj2Wserv)
   {
   return
      theWitRun->witGetObj2Wserv (
         obj2Wserv);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObj2Wsub (
      WitRun * const theWitRun,
      float * obj2Wsub)
   {
   return
      theWitRun->witGetObj2Wsub (
         obj2Wsub);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObj2WsubDbl (
      WitRun * const theWitRun,
      double * obj2Wsub)
   {
   return
      theWitRun->witGetObj2Wsub (
         obj2Wsub);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetObjChoice (
      WitRun * const theWitRun,
      int * objChoice)
   {
   return
      theWitRun->witGetObjChoice (
         objChoice);
   }

//------------------------------------------------------------------------------

a2426 28
WIT_DECLSPEC witReturnCode STDCALL witGetOperationObj2AuxCost (
      WitRun * const theWitRun,
      const char * const operationName,
      float * obj2AuxCost
)
   {
   return
      theWitRun->witGetOperationObj2AuxCost (
         operationName,
         obj2AuxCost);
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetOperationObj2AuxCostDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      double * obj2AuxCost
)
   {
   return
      theWitRun->witGetOperationObj2AuxCost (
         operationName,
         obj2AuxCost);
   }

//------------------------------------------------------------------------------

d3216 1
a3216 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartUnitCost (
d3218 1
a3218 2
      const char * const partName,
      float * unitCost)
d3221 2
a3222 3
      theWitRun->witGetPartUnitCost (
         partName,
         unitCost);
d3224 1
a3224 1
 
d3227 1
a3227 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartUnitCostDbl (
d3229 1
a3229 2
      const char * const partName,
      double * unitCost)
d3232 4
a3235 27
      theWitRun->witGetPartUnitCost (
         partName,
         unitCost);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPenExec (
      WitRun * const theWitRun,
      witBoolean * penExec)
   {
   return
      theWitRun->witGetPenExec (
         penExec);
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPipExists (
      WitRun * const theWitRun,
      witBoolean * pipExists)
   {
   return
      theWitRun->witGetPipExists (
         pipExists);
   }

a3297 22
WIT_DECLSPEC witReturnCode STDCALL witGetPeriodsPerYear (
      WitRun * const theWitRun,
      float * periodsPerYear)
   {
   return
      theWitRun->witGetPeriodsPerYear (
         periodsPerYear);
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPeriodsPerYearDbl (
      WitRun * const theWitRun,
      double * periodsPerYear)
   {
   return
      theWitRun->witGetPeriodsPerYear (
         periodsPerYear);
   }

//------------------------------------------------------------------------------

a3791 34
WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryObj2SubPenalty (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * obj2SubPenalty)
   {
   return
      theWitRun->witGetSubsBomEntryObj2SubPenalty (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj2SubPenalty);
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryObj2SubPenaltyDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      double * obj2SubPenalty)
   {
   return
      theWitRun->witGetSubsBomEntryObj2SubPenalty (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj2SubPenalty);
   }

//------------------------------------------------------------------------------

a4722 22
WIT_DECLSPEC witReturnCode STDCALL witSetCapCost (
      WitRun * const theWitRun,
      const float capCost)
   {
   return
      theWitRun->witSetCapCost (
         capCost);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetCapCostDbl (
      WitRun * const theWitRun,
      const double capCost)
   {
   return
      theWitRun->witSetCapCost (
         capCost);
   }
 
//------------------------------------------------------------------------------

a4872 30
WIT_DECLSPEC witReturnCode STDCALL witSetDemandGrossRev (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const float grossRev)
   {
   return
      theWitRun->witSetDemandGrossRev (
         partName,
         demandName,
         grossRev);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDemandGrossRevDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const double grossRev)
   {
   return
      theWitRun->witSetDemandGrossRev (
         partName,
         demandName,
         grossRev);
   }
 
//------------------------------------------------------------------------------

a5095 22
WIT_DECLSPEC witReturnCode STDCALL witSetInvCost (
      WitRun * const theWitRun,
      const float invCost)
   {
   return
      theWitRun->witSetInvCost (
         invCost);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetInvCostDbl (
      WitRun * const theWitRun,
      const double invCost)
   {
   return
      theWitRun->witSetInvCost (
         invCost);
   }
 
//------------------------------------------------------------------------------

a5221 99
WIT_DECLSPEC witReturnCode STDCALL witSetObj2Winv (
      WitRun * const theWitRun,
      const float obj2Winv)
   {
   return
      theWitRun->witSetObj2Winv (
         obj2Winv);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObj2WinvDbl (
      WitRun * const theWitRun,
      const double obj2Winv)
   {
   return
      theWitRun->witSetObj2Winv (
         obj2Winv);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObj2Wrev (
      WitRun * const theWitRun,
      const float obj2Wrev)
   {
   return
      theWitRun->witSetObj2Wrev (
         obj2Wrev);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObj2WrevDbl (
      WitRun * const theWitRun,
      const double obj2Wrev)
   {
   return
      theWitRun->witSetObj2Wrev (
         obj2Wrev);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObj2Wserv (
      WitRun * const theWitRun,
      const float obj2Wserv)
   {
   return
      theWitRun->witSetObj2Wserv (
         obj2Wserv);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObj2WservDbl (
      WitRun * const theWitRun,
      const double obj2Wserv)
   {
   return
      theWitRun->witSetObj2Wserv (
         obj2Wserv);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObj2Wsub (
      WitRun * const theWitRun,
      const float obj2Wsub)
   {
   return
      theWitRun->witSetObj2Wsub (
         obj2Wsub);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObj2WsubDbl (
      WitRun * const theWitRun,
      const double obj2Wsub)
   {
   return
      theWitRun->witSetObj2Wsub (
         obj2Wsub);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetObjChoice (
      WitRun * const theWitRun,
      const int objChoice)
   {
   return
      theWitRun->witSetObjChoice (
         objChoice);
   }
 
//------------------------------------------------------------------------------

a5501 28
WIT_DECLSPEC witReturnCode STDCALL witSetOperationObj2AuxCost (
      WitRun * const theWitRun,
      const char * const operationName,
      const float obj2AuxCost
)
   {
   return
      theWitRun->witSetOperationObj2AuxCost (
         operationName,
         obj2AuxCost);
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetOperationObj2AuxCostDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const double obj2AuxCost
)
   {
   return
      theWitRun->witSetOperationObj2AuxCost (
         operationName,
         obj2AuxCost);
   }

//------------------------------------------------------------------------------

a5784 26
WIT_DECLSPEC witReturnCode STDCALL witSetPartUnitCost (
      WitRun * const theWitRun,
      const char * const partName,
      const float unitCost)
   {
   return
      theWitRun->witSetPartUnitCost (
         partName,
         unitCost);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPartUnitCostDbl (
      WitRun * const theWitRun,
      const char * const partName,
      const double unitCost)
   {
   return
      theWitRun->witSetPartUnitCost (
         partName,
         unitCost);
   }
 
//------------------------------------------------------------------------------

a5806 22
WIT_DECLSPEC witReturnCode STDCALL witSetPeriodsPerYear (
      WitRun * const theWitRun,
      const float periodsPerYear)
   {
   return
      theWitRun->witSetPeriodsPerYear (
         periodsPerYear);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPeriodsPerYearDbl (
      WitRun * const theWitRun,
      const double periodsPerYear)
   {
   return
      theWitRun->witSetPeriodsPerYear (
         periodsPerYear);
   }
 
//------------------------------------------------------------------------------

a6177 34
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryObj2SubPenalty (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float obj2SubPenalty)
   {
   return
      theWitRun->witSetSubsBomEntryObj2SubPenalty (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj2SubPenalty);
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryObj2SubPenaltyDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const double obj2SubPenalty)
   {
   return
      theWitRun->witSetSubsBomEntryObj2SubPenalty (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         obj2SubPenalty);
   }
 
//------------------------------------------------------------------------------

d6651 22
d6703 30
d6763 22
d6807 1
a6807 1
WIT_DECLSPEC witReturnCode STDCALL witGetOperationYield (
d6809 4
a6812 3
      const char * const operationName,
      int * * yield
)
d6815 5
a6819 3
      theWitRun->witGetOperationYield (
         operationName,
         yield);
d6821 1
a6821 1

d6824 1
a6824 1
WIT_DECLSPEC witReturnCode STDCALL witGetOptWithLotSizes (
d6826 4
a6829 1
      witBoolean * optWithLotSizes)
d6832 5
a6836 2
      theWitRun->witGetOptWithLotSizes (
         optWithLotSizes);
d6841 1
a6841 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartBuildAheadLimit (
d6843 1
a6843 2
      const char * const partName,
      int * buildAheadLimit)
d6846 2
a6847 3
      theWitRun->witGetPartBuildAheadLimit (
         partName,
         buildAheadLimit);
d6849 1
a6849 1

d6852 1
a6852 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartCycleTime (
d6854 1
a6854 2
      const char * const partName,
      float * * cycleTime)
d6857 2
a6858 3
      theWitRun->witGetPartCycleTime (
         partName,
         cycleTime);
d6860 1
a6860 1

d6863 1
a6863 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartIncLotSize (
d6865 1
a6865 2
      const char * const partName,
      float * * incLotSize)
d6868 2
a6869 3
      theWitRun->witGetPartIncLotSize (
         partName,
         incLotSize);
d6871 1
a6871 1

d6874 159
a7032 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartMinLotSize (
d7114 26
d7153 22
d7203 34
d7254 242
a7495 1
WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryUsageRate (
d7497 1
a7497 4
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * usageRate)
d7500 2
a7501 5
      theWitRun->witGetSubsBomEntryUsageRate (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         usageRate);
d7503 1
a7503 1

d7506 1
a7506 1
WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryFallout (
d7508 1
a7508 3
      const char * const operationName,
      const int bomEntryIndex,
      const int fallout)
d7511 2
a7512 4
      theWitRun->witSetBomEntryFallout (
         operationName,
         bomEntryIndex,
         fallout);
d7517 1
a7517 1
WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryPropRouting (
d7519 1
a7519 3
      const char * const operationName,
      const int bomEntryIndex,
      const witBoolean propRouting)
d7522 2
a7523 4
      theWitRun->witSetBomEntryPropRouting (
         operationName,
         bomEntryIndex,
         propRouting);
d7528 1
a7528 1
WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryUsageRate (
d7530 1
a7530 3
      const char * const operationName,
      const int bomEntryIndex,
      const float usageRate)
d7533 2
a7534 4
      theWitRun->witSetBomEntryUsageRate (
         operationName,
         bomEntryIndex,
         usageRate);
d7539 1
a7539 1
WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryUsageTime (
d7541 1
a7541 3
      const char * const operationName,
      const int bomEntryIndex,
      const float time)
d7544 2
a7545 4
      theWitRun->witSetBomEntryUsageTime (
         operationName,
         bomEntryIndex,
         time);
d7547 1
a7547 1

d7550 1
a7550 1
WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryByProduct (
d7552 1
a7552 3
      const char * const operationName,
      const int bopEntryIndex,
      const witBoolean byProduct)
d7555 2
a7556 4
      theWitRun->witSetBopEntryByProduct (
         operationName,
         bopEntryIndex,
         byProduct);
d7558 1
a7558 1

d7561 1
a7561 1
WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryProdRate (
d7563 1
a7563 3
      const char * const operationName,
      const int bopEntryIndex,
      const float prodRate)
d7566 2
a7567 4
      theWitRun->witSetBopEntryProdRate (
         operationName,
         bopEntryIndex,
         prodRate);
d7569 1
a7569 1

d7572 1
a7572 1
WIT_DECLSPEC witReturnCode STDCALL witSetBuildWhenEmpty (
d7574 1
a7574 1
      const witBoolean buildWhenEmpty)
d7577 2
a7578 2
      theWitRun->witSetBuildWhenEmpty (
         buildWhenEmpty);
d7580 1
a7580 1

d7583 1
a7583 1
WIT_DECLSPEC witReturnCode STDCALL witSetDemandBuildAheadLimit (
d7585 1
a7585 3
      const char * const partName,
      const char * const demandName,
      const int buildAheadLimit)
d7588 2
a7589 4
      theWitRun->witSetDemandBuildAheadLimit (
         partName,
         demandName,
         buildAheadLimit);
d7594 1
a7594 1
WIT_DECLSPEC witReturnCode STDCALL witSetDemandBuildAheadUB (
d7596 1
a7596 3
      const char * const partName,
      const char * const demandName,
      const int * buildAheadUB)
d7599 2
a7600 4
      theWitRun->witSetDemandBuildAheadUB (
         partName,
         demandName,
         buildAheadUB);
d7602 1
a7602 1

d7605 1
a7605 1
WIT_DECLSPEC witReturnCode STDCALL witSetDemandPrefBuildAhead (
d7607 1
a7607 3
      const char * const partName,
      const char * const demandName,
      const int prefBuildAhead)
d7610 2
a7611 4
      theWitRun->witSetDemandPrefBuildAhead (
         partName,
         demandName,
         prefBuildAhead);
d7616 1
a7616 1
WIT_DECLSPEC witReturnCode STDCALL witSetDemandShipLateLimit (
d7618 1
a7618 3
      const char * const partName,
      const char * const demandName,
      const int shipLateLimit)
d7621 2
a7622 4
      theWitRun->witSetDemandShipLateLimit (
         partName,
         demandName,
         shipLateLimit);
d7627 1
a7627 1
WIT_DECLSPEC witReturnCode STDCALL witSetLocalBuildAhead (
d7629 3
a7631 1
      const witBoolean localBuildAhead)
d7634 3
a7636 2
      theWitRun->witSetLocalBuildAhead (
         localBuildAhead);
d7641 1
a7641 1
WIT_DECLSPEC witReturnCode STDCALL witSetLocalMultiExec (
d7643 3
a7645 1
      const witBoolean localMultiExec)
d7648 3
a7650 2
      theWitRun->witSetLocalMultiExec (
         localMultiExec);
d7788 26
d7827 22
d7877 33
@


1.126
log
@Made opt implosion use COIN unconditionally when COIN_BUILD is defined.
@
text
@a2741 11
WIT_DECLSPEC witReturnCode STDCALL witGetOptWithLotSizes (
      WitRun * const theWitRun,
      witBoolean * optWithLotSizes)
   {
   return
      theWitRun->witGetOptWithLotSizes (
         optWithLotSizes);
   }
 
//------------------------------------------------------------------------------

a6086 11
WIT_DECLSPEC witReturnCode STDCALL witSetOptWithLotSizes (
      WitRun * const theWitRun,
      const witBoolean optWithLotSizes)
   {
   return
      theWitRun->witSetOptWithLotSizes (
         optWithLotSizes);
   }

//------------------------------------------------------------------------------

d7347 11
d7751 11
@


1.125
log
@Vector PropRtg.
@
text
@a3700 11
WIT_DECLSPEC witReturnCode STDCALL witGetSolverIsCoin (
      WitRun * const theWitRun,
      witBoolean * solverIsCoin)
   {
   return
      theWitRun->witGetSolverIsCoin (
         solverIsCoin);
   }
 
//------------------------------------------------------------------------------

a6482 11
WIT_DECLSPEC witReturnCode STDCALL witSetSolverIsCoin (
      WitRun * const theWitRun,
      const witBoolean solverIsCoin)
   {
   return
      theWitRun->witSetSolverIsCoin (
         solverIsCoin);
   }

//------------------------------------------------------------------------------

@


1.124
log
@Vector PropRtg.
@
text
@a639 15
WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryPropRouting (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      witBoolean * propRouting)
   {
   return
      theWitRun->witGetBomEntryPropRouting (
         operationName,
         bomEntryIndex,
         propRouting);
   }

//------------------------------------------------------------------------------

a3219 13
WIT_DECLSPEC witReturnCode STDCALL witGetPartPropRouting (
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * propRouting)
   {
   return
      theWitRun->witGetPartPropRouting (
         partName,
         propRouting);
   }
 
//------------------------------------------------------------------------------

a4761 15
WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryPropRouting (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const witBoolean propRouting)
   {
   return
      theWitRun->witSetBomEntryPropRouting (
         operationName,
         bomEntryIndex,
         propRouting);
   }

//------------------------------------------------------------------------------

a6236 13
WIT_DECLSPEC witReturnCode STDCALL witSetPartPropRouting (
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean propRouting)
   {
   return
      theWitRun->witSetPartPropRouting (
         partName,
         propRouting);
   }

//------------------------------------------------------------------------------

d7220 15
d7499 13
d7553 17
d7602 1
a7602 1
WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryProdVol (
d7606 1
a7606 2
      const int subsBomEntryIndex,
      float * * prodVol)
d7609 1
a7609 1
      theWitRun->witGetSubsBomEntryProdVol (
d7612 1
a7612 2
         subsBomEntryIndex,
         prodVol);
d7614 1
a7614 1
 
d7879 13
@


1.123
log
@Vector PropRt.
@
text
@d655 1
a655 1
WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryPropRt (
d659 1
a659 1
      witBoolean * *     propRt)
d662 1
a662 1
      theWitRun->witGetBomEntryPropRt (
d665 1
a665 1
         propRt);
d3248 1
a3248 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartPropRt (
d3251 1
a3251 1
      witBoolean * *     propRt)
d3254 1
a3254 1
      theWitRun->witGetPartPropRt (
d3256 1
a3256 1
         propRt);
d4805 1
a4805 1
WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryPropRt (
d4809 1
a4809 1
      const witBoolean * const propRt)
d4812 1
a4812 1
      theWitRun->witSetBomEntryPropRt (
d4815 1
a4815 1
         propRt);
d6293 1
a6293 1
WIT_DECLSPEC witReturnCode STDCALL witSetPartPropRt (
d6296 1
a6296 1
      const witBoolean * const propRt)
d6299 1
a6299 1
      theWitRun->witSetPartPropRt (
d6301 1
a6301 1
         propRt);
@


1.122
log
@Vector PropRt.
@
text
@d655 15
d4805 15
@


1.121
log
@Vector propRt.
@
text
@d19 5
a23 5
#include <InScalRA.h>
#include <OutScalRA.h>
#include <InVecRA.h>
#include <OutVecRA.h>
#include <Out2DARA.h>
@


1.120
log
@Pegged Critical List.
@
text
@d3233 13
d6263 13
@


1.119
log
@Pegged Critical List.
@
text
@d3595 2
d3599 1
a3599 3
      int * *        shipPerList,
      char * * *     critPartNameList,
      int * *        critPerList)
d3604 2
d3608 1
a3608 3
         shipPerList,
         critPartNameList,
         critPerList);
@


1.118
log
@Pegged Critical List.
@
text
@d3592 21
@


1.117
log
@Pegged Critical List
@
text
@d3592 1
a3592 1
WIT_DECLSPEC witReturnCode STDCALL witGetPgdCritListNeeded (
d3594 1
a3594 1
      witBoolean * pgdCritListNeeded)
d3597 2
a3598 2
      theWitRun->witGetPgdCritListNeeded (
         pgdCritListNeeded);
d6385 1
a6385 1
WIT_DECLSPEC witReturnCode STDCALL witSetPgdCritListNeeded (
d6387 1
a6387 1
      const witBoolean pgdCritListNeeded)
d6390 2
a6391 2
      theWitRun->witSetPgdCritListNeeded (
         pgdCritListNeeded);
@


1.116
log
@Pegged Critical List.
@
text
@a1003 11
WIT_DECLSPEC witReturnCode STDCALL witGetCompPgdCritList (
      WitRun * const theWitRun,
      witBoolean * compPgdCritList)
   {
   return
      theWitRun->witGetCompPgdCritList (
         compPgdCritList);
   }
 
//------------------------------------------------------------------------------

d3592 11
a5062 11
WIT_DECLSPEC witReturnCode STDCALL witSetCompPgdCritList (
      WitRun * const theWitRun,
      const witBoolean compPgdCritList)
   {
   return
      theWitRun->witSetCompPgdCritList (
         compPgdCritList);
   }
  
//------------------------------------------------------------------------------

d6385 11
@


1.115
log
@Changed terminology from "low priority proportionate routing" to
"tie breaking proportionate routing".
@
text
@d982 1
a982 1
WIT_DECLSPEC witReturnCode STDCALL witGetComputeCriticalList (
d984 1
a984 1
      witBoolean * computeCriticalList)
d987 2
a988 2
      theWitRun->witGetComputeCriticalList (
         computeCriticalList);
d993 1
a993 1
WIT_DECLSPEC witReturnCode STDCALL witGetCapCost (
d995 1
a995 1
      float * capCost)
d1004 1
a1004 1
WIT_DECLSPEC witReturnCode STDCALL witGetCapCostDbl (
d1006 1
a1006 1
      double * capCost)
d1009 2
a1010 2
      theWitRun->witGetCapCost (
         capCost);
d1026 11
d5063 11
d5087 1
a5087 1
      const witBoolean computCriticalList)
d5091 1
a5091 1
         computCriticalList);
@


1.114
log
@Continued implmentation of low priority proportionate routing.
@
text
@a1901 11
WIT_DECLSPEC witReturnCode STDCALL witGetLowPriPropRt (
      WitRun * const theWitRun,
      witBoolean * lowPriPropRt)
   {
   return
      theWitRun->witGetLowPriPropRt (
         lowPriPropRt);
   }

//------------------------------------------------------------------------------

d4218 11
a5498 11
WIT_DECLSPEC witReturnCode STDCALL witSetLowPriPropRt (
      WitRun * const theWitRun,
      const witBoolean lowPriPropRt)
   {
   return
      theWitRun->witSetLowPriPropRt (
         lowPriPropRt);
   }

//------------------------------------------------------------------------------

d6898 11
@


1.113
log
@Began work on [propRouting as penExec tie-breaker].
@
text
@d1902 11
d3019 1
a3019 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartObj1ScrapCost (
d3022 1
a3022 1
      float * * obj1ScrapCost)
d3025 1
a3025 1
      theWitRun->witGetPartObj1ScrapCost (
d3027 1
a3027 1
         obj1ScrapCost);
a3028 2
 
//------------------------------------------------------------------------------
a3029 11
WIT_DECLSPEC witReturnCode STDCALL witGetPartObj1ScrapCostDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * obj1ScrapCost)
   {
   return
      theWitRun->witGetPartObj1ScrapCost (
         partName,
         obj1ScrapCost);
   }
 
d3032 1
a3032 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartObj1StockCost (
d3035 1
a3035 1
      float * * obj1StockCost)
d3038 1
a3038 1
      theWitRun->witGetPartObj1StockCost (
d3040 1
a3040 1
         obj1StockCost);
d3045 1
a3045 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartObj1StockCostDbl (
d3048 1
a3048 1
      double * * obj1StockCost)
d3051 1
a3051 1
      theWitRun->witGetPartObj1StockCost (
d3053 1
a3053 1
         obj1StockCost);
d3058 1
a3058 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartProdVol (
d3061 1
a3061 1
      float * * prodVol)
d3064 1
a3064 1
      theWitRun->witGetPartProdVol (
d3066 1
a3066 1
         prodVol);
d3071 1
a3071 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartProdVolDbl (
d3074 1
a3074 1
      double * * prodVol)
d3077 1
a3077 1
      theWitRun->witGetPartProdVol (
d3079 1
a3079 1
         prodVol);
d3084 1
a3084 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartProducingBopEntry (
d3087 1
a3087 3
      const int prodIndex,
      char * * producingOperationName,
      int * bopEntryIndex)
d3090 1
a3090 1
      theWitRun->witGetPartProducingBopEntry (
d3092 1
a3092 3
         prodIndex,
         producingOperationName,
         bopEntryIndex);
d3097 1
a3097 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartStockBounds (
d3100 1
a3100 3
      float * * hardLower,
      float * * softLower,
      float * * hardUpper)
d3103 1
a3103 1
      theWitRun->witGetPartStockBounds (
d3105 1
a3105 3
         hardLower,
         softLower,
         hardUpper);
a3106 2
 
//------------------------------------------------------------------------------
a3107 15
WIT_DECLSPEC witReturnCode STDCALL witGetPartStockBoundsDbl (
      WitRun * const theWitRun,
      const char * const partName,
      double * * hardLower,
      double * * softLower,
      double * * hardUpper)
   {
   return
      theWitRun->witGetPartStockBounds (
         partName,
         hardLower,
         softLower,
         hardUpper);
   }
 
d3110 1
a3110 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartMrpConsVol (
d3113 1
a3113 1
      float * * mrpConsVol)
d3116 1
a3116 1
      theWitRun->witGetPartMrpConsVol (
d3118 1
a3118 1
         mrpConsVol);
d3123 1
a3123 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartMrpConsVolDbl (
d3126 1
a3126 1
      double * * mrpConsVol)
d3129 1
a3129 1
      theWitRun->witGetPartMrpConsVol (
d3131 1
a3131 1
         mrpConsVol);
d3136 1
a3136 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartMrpExcessVol (
d3139 1
a3139 1
      float * * mrpExcessVol)
d3142 1
a3142 1
      theWitRun->witGetPartMrpExcessVol (
d3144 1
a3144 1
         mrpExcessVol);
d3146 1
a3146 1

d3149 1
a3149 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartMrpExcessVolDbl (
d3152 1
a3152 1
      double * * mrpExcessVol)
d3155 1
a3155 1
      theWitRun->witGetPartMrpExcessVol (
d3157 1
a3157 1
         mrpExcessVol);
d3159 1
a3159 1

d3162 1
a3162 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartMrpResidualVol (
d3165 1
a3165 1
      float * * mrpResidualVol)
d3168 1
a3168 1
      theWitRun->witGetPartMrpResidualVol (
d3170 1
a3170 1
         mrpResidualVol);
d3175 1
a3175 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartMrpResidualVolDbl (
d3178 1
a3178 1
      double * * mrpResidualVol)
d3181 1
a3181 1
      theWitRun->witGetPartMrpResidualVol (
d3183 1
a3183 1
         mrpResidualVol);
d3188 1
a3188 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartNConsumingBomEntries (
d3191 1
a3191 1
      int * nConsumingBomEntries)
d3194 1
a3194 1
      theWitRun->witGetPartNConsumingBomEntries (
d3196 1
a3196 1
         nConsumingBomEntries);
d3201 1
a3201 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartNConsumingSubsBomEntries (
d3204 1
a3204 1
      int * nConsumingSubsBomEntries)
d3207 1
a3207 1
      theWitRun->witGetPartNConsumingSubsBomEntries (
d3209 1
a3209 1
         nConsumingSubsBomEntries);
d3214 1
a3214 1
WIT_DECLSPEC witReturnCode STDCALL witGetPartNProducingBopEntries (
d3217 3
a3219 1
      int * nProducingBopEntries)
d3222 1
a3222 1
      theWitRun->witGetPartNProducingBopEntries (
d3224 3
a3226 1
         nProducingBopEntries);
d3387 34
a3509 11
WIT_DECLSPEC witReturnCode STDCALL witGetPenExecOverPropRt (
      WitRun * const theWitRun,
      witBoolean * penExecOverPropRt)
   {
   return
      theWitRun->witGetPenExecOverPropRt (
         penExecOverPropRt);
   }

//------------------------------------------------------------------------------

d5499 11
a6351 11
WIT_DECLSPEC witReturnCode STDCALL witSetPenExecOverPropRt (
      WitRun * const theWitRun,
      const witBoolean penExecOverPropRt)
   {
   return
      theWitRun->witSetPenExecOverPropRt (
         penExecOverPropRt);
   }

//------------------------------------------------------------------------------

@


1.112
log
@Added "solverIsCoin" attribute.
@
text
@d3499 11
d6341 11
@


1.111
log
@More work on handling severe and fatal errors.
@
text
@d3669 11
d6436 11
@


1.110
log
@Added:
   WitFATAL_RC
   witTestFatalMesg
@
text
@d209 4
d214 2
a215 1
   return WitINFORMATIONAL_RC;
d4409 2
a4410 1
   return WitINFORMATIONAL_RC;
@


1.109
log
@PIP.
@
text
@d8005 9
d8128 1
@


1.108
log
@Removed portableFree.
@
text
@d850 1
a850 1
      float * pipShare)
d865 1
a865 1
      double * pipShare)
d4901 1
a4901 1
      const float pipShare)
d4916 1
a4916 1
      const double pipShare)
@


1.107
log
@Continued implementation of PIP.
@
text
@d339 1
a339 1
   portableFree (mem);
@


1.106
log
@Double Precision.
@
text
@d846 30
d4893 30
@


1.105
log
@Double Precision.
@
text
@d1801 1
a1801 1
WIT_DECLSPEC witReturnCode STDCALL witGetPipSeqFromHeur (
d1803 1
a1803 1
      witBoolean * pipSeqFromHeur)
d1806 2
a1807 2
      theWitRun->witGetPipSeqFromHeur (
         pipSeqFromHeur);
d3513 11
d5345 1
a5345 1
WIT_DECLSPEC witReturnCode STDCALL witSetPipSeqFromHeur (
d5347 1
a5347 1
      const witBoolean pipSeqFromHeur)
d5350 2
a5351 2
      theWitRun->witSetPipSeqFromHeur (
         pipSeqFromHeur);
d6284 11
@


1.104
log
@Double Precision.
@
text
@d23 1
d1760 1
a1760 1
      theWitRun->witGetFocusShortageVolDbl (
@


1.103
log
@Double Precision.
@
text
@d1739 3
a1741 3
      int   *   lenList,
      char  * * * partList,
      float * * * shortageVolList )
d1745 15
@


1.102
log
@Double Precision.
@
text
@d1043 23
d1203 23
d1399 23
d1505 23
d1609 27
d1645 23
@


1.101
log
@Double Precision.
@
text
@d3336 19
@


1.100
log
@Double Precision.
@
text
@d1134 23
d1447 27
@


1.99
log
@Double Precision.
@
text
@d246 21
d275 23
@


1.98
log
@Double Precision.
@
text
@d395 15
d575 15
d620 15
d786 15
d816 15
d861 15
d1052 15
d1143 15
d1203 15
d1233 15
d1331 15
d2110 14
d2138 14
d2166 14
d2194 14
d2222 14
d2250 14
d2278 14
d2332 13
d2430 14
d2669 13
d2708 13
d2760 13
d2863 13
d2889 13
d2915 13
d2993 13
d3019 13
d3136 13
d3397 17
d3584 17
d3669 17
d3720 17
d3788 1
a3788 1
WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryProdVol (
d3793 1
a3793 1
      float * * prodVol)
d3796 1
a3796 1
      theWitRun->witGetSubsBomEntryProdVol (
d3800 1
a3800 1
         prodVol);
d3802 1
a3802 1
 
d3822 17
d3873 17
d7109 17
@


1.97
log
@Double Precision.
@
text
@d3731 15
d3866 15
d3911 15
d4061 15
d4091 15
d4121 15
d4252 1
a4252 1
      const float * const iDemandVol)
d4258 16
a4273 1
         iDemandVol);
d4308 15
d4368 15
d4398 15
d4473 15
d4949 14
d4977 14
d5005 14
d5033 14
d5061 14
d5089 14
d5173 14
d5313 13
d5606 17
d5827 17
d5895 17
d5929 17
d5969 17
@


1.96
log
@Double Precision.
@
text
@d1904 14
d2444 26
d2664 13
d4757 13
a6163 13
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartProdVol (
      WitRun * const theWitRun,
      const char * const partName,
      float * * prodVol)
   {
   return
      theWitRun->witGetPartProdVol (
         partName,
         prodVol);
@


1.95
log
@Double Precision.
@
text
@d2275 13
@


1.94
log
@Double Precision.
@
text
@d2637 13
@


1.93
log
@Double Precision.
@
text
@d2391 13
d4921 14
@


1.92
log
@Double Precision.
@
text
@d928 19
d1831 17
d2438 17
d4047 19
d4607 17
d4976 17
@


1.91
log
@Double Precision.
@
text
@d22 1
d2601 13
@


1.90
log
@Double Precision.
@
text
@d21 1
d4888 13
@


1.89
log
@Continued double precision.
@
text
@a1259 11
WIT_DECLSPEC witReturnCode STDCALL witGetDoubleMode (
      WitRun * const theWitRun,
      witBoolean * doubleMode)
   {
   return
      theWitRun->witGetDoubleMode (
         doubleMode);
   }
 
//------------------------------------------------------------------------------

a4139 11
   }
 
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetDoubleMode (
      WitRun * const theWitRun,
      const witBoolean doubleMode)
   {
   return
      theWitRun->witSetDoubleMode (
         doubleMode);
@


1.88
log
@Continued double precision.
@
text
@d147 17
d3348 19
d3374 21
@


1.87
log
@Continued double precision.
@
text
@d1545 17
d1751 13
@


1.86
log
@Continued double precision.
@
text
@d19 2
a20 2
#include <RealSInArg.h>
#include <RealSOutArg.h>
@


1.85
log
@Continued double precision.
@
text
@d436 15
d466 15
d815 11
d1015 15
d1390 11
d1556 11
d1578 11
d1600 11
d1622 11
d1788 14
d1997 14
d2585 13
d2661 11
d2845 17
d2896 17
d2930 17
d3083 17
d3525 15
d3555 15
d3836 11
d3963 15
d4178 11
d4326 11
d4348 11
d4370 11
d4392 11
d4469 14
d4594 14
d4844 13
d4890 11
d5046 17
d5097 17
d5131 17
d5222 17
@


1.84
log
@Continued double precision.
@
text
@a36 2
   forbidNullWitRun (theWitRun, "witAddBomEntry");

a49 2
   forbidNullWitRun (theWitRun, "witAddBopEntry");

a62 2
   forbidNullWitRun (theWitRun, "witAddDemand");

a74 2
   forbidNullWitRun (theWitRun, "witAddOperation");

a86 2
   forbidNullWitRun (theWitRun, "witAddPart");

a98 2
   forbidNullWitRun (theWitRun, "witAddPartWithOperation");

a111 2
   forbidNullWitRun (theWitRun, "witAddSubsBomEntry");

a123 2
   forbidNullWitRun (theWitRun, "witAdvanceObjItr");

a136 2
   forbidNullWitRun (theWitRun, "witAppendToPipSeq");

a149 2
   forbidNullWitRun (theWitRun, "witBuildPip");

a158 2
   forbidNullWitRun (theWitRun, "witClearPegging");

a167 2
   forbidNullWitRun (theWitRun, "witClearPipSeq");

a198 2
   forbidNullWitRun (theWitRun, "witDisplayData");

a214 2
   forbidNullWitRun (theWitRun, "witEqHeurAlloc");

a236 2
   forbidNullWitRun (theWitRun, "witEqHeurAllocTwme");

a254 2
   forbidNullWitRun (theWitRun, "witEvalObjectives");

a265 2
   forbidNullWitRun (theWitRun, "witFinishHeurAlloc");

a284 2
   forbidNullWitRun (theWitRun, "witGeneratePriorities");

a294 2
   forbidNullWitRun (theWitRun, "witGetAccAfterSoftLB");

a305 2
   forbidNullWitRun (theWitRun, "witGetAccAfterOptImp");

a316 2
   forbidNullWitRun (theWitRun, "witGetAccelerated");

a327 2
   forbidNullWitRun (theWitRun, "witGetAppData");

a338 2
   forbidNullWitRun (theWitRun, "witGetAutoPriority");

a351 2
   forbidNullWitRun (theWitRun, "witGetBomEntryAppData");

a366 2
   forbidNullWitRun (theWitRun, "witGetBomEntryConsRate");

a381 2
   forbidNullWitRun (theWitRun, "witGetBomEntryEarliestPeriod");

a396 2
   forbidNullWitRun (theWitRun, "witGetBomEntryNSubsBomEntries");

a411 2
   forbidNullWitRun (theWitRun, "witGetBomEntryConsumedPart");

a426 2
   forbidNullWitRun (theWitRun, "witGetBomEntryExecPenalty");

a441 2
   forbidNullWitRun (theWitRun, "witGetBomEntryFalloutRate");

a456 2
   forbidNullWitRun (theWitRun, "witGetBomEntryImpactPeriod");

a471 2
   forbidNullWitRun (theWitRun, "witGetBomEntryLatestPeriod");

a486 2
   forbidNullWitRun (theWitRun, "witGetBomEntryMandEC");

a501 2
   forbidNullWitRun (theWitRun, "witGetBomEntryOffset");

a516 2
   forbidNullWitRun (theWitRun, "witGetBomEntryPropRouting");

a531 2
   forbidNullWitRun (theWitRun, "witGetBomEntryRoutingShare");

a546 2
   forbidNullWitRun (theWitRun, "witGetBomEntrySelForDel");

a561 2
   forbidNullWitRun (theWitRun, "witGetBomEntrySingleSource");

a576 1
   forbidNullWitRun (theWitRun, "witGetBopEntryAppData");
a592 2
   forbidNullWitRun (theWitRun, "witGetBopEntryEarliestPeriod");

a607 2
   forbidNullWitRun (theWitRun, "witGetBopEntryExpAllowed");

a622 2
   forbidNullWitRun (theWitRun, "witGetBopEntryExpAversion");

a637 2
   forbidNullWitRun (theWitRun, "witGetBopEntryExpAversion");

a652 2
   forbidNullWitRun (theWitRun, "witGetBopEntryImpactPeriod");

a667 2
   forbidNullWitRun (theWitRun, "witGetBopEntryLatestPeriod");

a682 2
   forbidNullWitRun (theWitRun, "witGetBopEntryOffset");

a697 2
   forbidNullWitRun (theWitRun, "witGetBopEntryProductRate");

a712 2
   forbidNullWitRun (theWitRun, "witGetBopEntryProducedPart");

a727 2
   forbidNullWitRun (theWitRun, "witGetBopEntryRoutingShare");

a742 2
   forbidNullWitRun (theWitRun, "witGetBopEntrySelForDel");

a755 2
   forbidNullWitRun (theWitRun, "witGetBuildWhenEmpty");

a766 2
   forbidNullWitRun (theWitRun, "witGetComputeCriticalList");

a777 2
   forbidNullWitRun (theWitRun, "witGetCapCost");

a788 2
   forbidNullWitRun (theWitRun, "witGetCompPrices");

a801 2
   forbidNullWitRun (theWitRun, "witGetCriticalList");

a816 2
   forbidNullWitRun (theWitRun, "witGetDemandAppData");

a835 2
   forbidNullWitRun (theWitRun, "witGetDemandConsVolPip");

a856 2
   forbidNullWitRun (theWitRun, "witGetDemandCumShipBounds");

a873 2
   forbidNullWitRun (theWitRun, "witGetDemandDemandVol");

a892 2
   forbidNullWitRun (theWitRun, "witGetDemandExecVolPegging");

a915 2
   forbidNullWitRun (theWitRun, "witGetDemandExecVolPip");

a934 2
   forbidNullWitRun (theWitRun, "witGetDemandFocusHorizon");

a949 2
   forbidNullWitRun (theWitRun, "witGetDemandFssShipVol");

a964 2
   forbidNullWitRun (theWitRun, "witGetDemandGrossRev");

a979 2
   forbidNullWitRun (theWitRun, "witGetDemandObj1CumShipReward");

a994 2
   forbidNullWitRun (theWitRun, "witGetDemandObj1ShipReward");

a1009 2
   forbidNullWitRun (theWitRun, "witGetDemandPriority");

a1028 2
   forbidNullWitRun (theWitRun, "witGetDemandProdVolPip");

a1047 2
   forbidNullWitRun (theWitRun, "witGetDemandSelForDel");

a1062 2
   forbidNullWitRun (theWitRun, "witGetDemandShipLateUB");

a1077 2
   forbidNullWitRun (theWitRun, "witGetDemandShipVol");

a1096 2
   forbidNullWitRun (theWitRun, "witGetDemandSideVolPip");

a1121 2
   forbidNullWitRun (theWitRun, "witGetDemandSubVolPegging");

a1148 2
   forbidNullWitRun (theWitRun, "witGetDemandSubVolPip");

a1173 2
   forbidNullWitRun (theWitRun, "witGetDemandSupplyVolPip");

a1190 2
   forbidNullWitRun (theWitRun, "witGetDoubleMode");

a1201 2
   forbidNullWitRun (theWitRun, "witGetEquitability");

a1212 2
   forbidNullWitRun (theWitRun, "witGetExecEmptyBom");

a1223 2
   forbidNullWitRun (theWitRun, "witGetExpCutoff");

a1234 2
   forbidNullWitRun (theWitRun, "witGetExpCutoffDbl");

a1245 2
   forbidNullWitRun (theWitRun, "witGetFeasible");

a1258 2
   forbidNullWitRun (theWitRun, "witGetFocusShortageVol");

a1271 2
   forbidNullWitRun (theWitRun, "witGetForcedMultiEq");

a1282 2
   forbidNullWitRun (theWitRun, "witGetHashTableSize");

a1293 2
   forbidNullWitRun (theWitRun, "witGetHeurAllocActive");

a1304 2
   forbidNullWitRun (theWitRun, "witGetPipSeqFromHeur");

a1315 2
   forbidNullWitRun (theWitRun, "witGetIndependentOffsets");

a1326 2
   forbidNullWitRun (theWitRun, "witGetInvCost");

a1337 2
   forbidNullWitRun (theWitRun, "witGetLotSizeTol");

a1348 2
   forbidNullWitRun (theWitRun, "witGetLotSizeTolDbl");

a1359 2
   forbidNullWitRun (theWitRun, "witGetMesgFile");

a1370 2
   forbidNullWitRun (theWitRun, "witGetMesgFileAccessMode");

a1381 2
   forbidNullWitRun (theWitRun, "witGetMesgFileName");

a1393 2
   forbidNullWitRun (theWitRun, "witGetMesgPrintNumber");

a1406 2
   forbidNullWitRun (theWitRun, "witGetMesgStopRunning");

a1419 2
   forbidNullWitRun (theWitRun, "witGetMesgTimesPrint");

a1431 2
   forbidNullWitRun (theWitRun, "witGetMultiExec");

a1442 2
   forbidNullWitRun (theWitRun, "witGetMultiRoute");

a1453 2
   forbidNullWitRun (theWitRun, "witGetNPeriods");

a1467 2
   forbidNullWitRun (theWitRun, "witGetObj2Values");

a1481 2
   forbidNullWitRun (theWitRun, "witGetObj2Winv");

a1492 2
   forbidNullWitRun (theWitRun, "witGetObj2Wrev");

a1503 2
   forbidNullWitRun (theWitRun, "witGetObj2Wserv");

a1514 2
   forbidNullWitRun (theWitRun, "witGetObj2Wsub");

a1525 2
   forbidNullWitRun (theWitRun, "witGetObjChoice");

a1537 2
   forbidNullWitRun (theWitRun, "witGetObjItrBomEntry");

a1550 2
   forbidNullWitRun (theWitRun, "witGetObjItrBopEntry");

a1563 2
   forbidNullWitRun (theWitRun, "witGetObjItrDemand");

a1575 2
   forbidNullWitRun (theWitRun, "witGetObjItrOperation");

a1586 2
   forbidNullWitRun (theWitRun, "witGetObjItrPart");

a1597 2
   forbidNullWitRun (theWitRun, "witGetObjItrState");

a1609 2
   forbidNullWitRun (theWitRun, "witGetObjItrSubsBomEntry");

a1623 2
   forbidNullWitRun (theWitRun, "witGetObjValues");

a1637 2
   forbidNullWitRun (theWitRun, "witGetOperationAppData");

a1652 2
   forbidNullWitRun (theWitRun, "witGetOperationExecBounds");

a1668 2
   forbidNullWitRun (theWitRun, "witGetOperationExecPenalty");

a1682 2
   forbidNullWitRun (theWitRun, "witGetOperationExecutable");

a1696 2
   forbidNullWitRun (theWitRun, "witGetOperationExecVol");

a1709 2
   forbidNullWitRun (theWitRun, "witGetOperationExists");

a1723 2
   forbidNullWitRun (theWitRun, "witGetOperationFssExecVol");

a1737 2
   forbidNullWitRun (theWitRun, "witGetOperationIncLotSize");

a1751 2
   forbidNullWitRun (theWitRun, "witGetOperationIncLotSize2");

a1765 2
   forbidNullWitRun (theWitRun, "witGetOperationLotSize2Thresh");

a1779 2
   forbidNullWitRun (theWitRun, "witGetOperationMinLotSize");

a1793 2
   forbidNullWitRun (theWitRun, "witGetOperationMinLotSize2");

a1807 2
   forbidNullWitRun (theWitRun, "witGetOperationMrpExecVol");

a1821 2
   forbidNullWitRun (theWitRun, "witGetOperationNBomEntries");

a1835 2
   forbidNullWitRun (theWitRun, "witGetOperationNBopEntries");

a1849 2
   forbidNullWitRun (theWitRun, "witGetOperationObj1ExecCost");

a1863 2
   forbidNullWitRun (theWitRun, "witGetOperationObj2AuxCost");

a1876 2
   forbidNullWitRun (theWitRun, "witGetOperations");

a1890 2
   forbidNullWitRun (theWitRun, "witGetOperationSelForDel");

a1904 2
   forbidNullWitRun (theWitRun, "witGetOperationTwoLevelLotSizes");

a1918 2
   forbidNullWitRun (theWitRun, "witGetOperationYieldRate");

a1930 2
   forbidNullWitRun (theWitRun, "witGetOptInitMethod");

a1941 2
   forbidNullWitRun (theWitRun, "witGetOptWithLotSizes");

a1952 2
   forbidNullWitRun (theWitRun, "witGetOslMesgFileName");

a1963 2
   forbidNullWitRun (theWitRun, "witGetOutputPrecision");

a1974 2
   forbidNullWitRun (theWitRun, "witGetPostprocessed");

a1986 2
   forbidNullWitRun (theWitRun, "witGetPartAppData");

a2000 2
   forbidNullWitRun (theWitRun, "witGetPartBelowList");

a2014 2
   forbidNullWitRun (theWitRun, "witGetPartBuildAheadUB");

a2027 2
   forbidNullWitRun (theWitRun, "witGetPartBuildAsap");

a2040 2
   forbidNullWitRun (theWitRun, "witGetPartBuildNstn");

a2053 2
   forbidNullWitRun (theWitRun, "witGetPartConsVol");

a2068 2
   forbidNullWitRun (theWitRun, "witGetPartConsumingBomEntry");

a2086 2
   forbidNullWitRun (theWitRun, "witGetPartConsumingSubsBomEntry");

a2103 2
   forbidNullWitRun (theWitRun, "witGetPartDemands");

a2117 2
   forbidNullWitRun (theWitRun, "witGetPartCategory");

a2130 2
   forbidNullWitRun (theWitRun, "witGetPartExcessVol");

a2143 2
   forbidNullWitRun (theWitRun, "witGetPartExists");

a2156 2
   forbidNullWitRun (theWitRun, "witGetPartFocusShortageVol");

a2169 2
   forbidNullWitRun (theWitRun, "witGetPartObj1ScrapCost");

a2182 2
   forbidNullWitRun (theWitRun, "witGetPartObj1StockCost");

a2197 2
   forbidNullWitRun (theWitRun, "witGetPartProducingBopEntry");

a2214 2
   forbidNullWitRun (theWitRun, "witGetPartStockBounds");

a2229 2
   forbidNullWitRun (theWitRun, "witGetPartMrpConsVol");

a2242 2
   forbidNullWitRun (theWitRun, "witGetPartMrpExcessVol");

a2255 2
   forbidNullWitRun (theWitRun, "witGetPartMrpResidualVol");

a2268 2
   forbidNullWitRun (theWitRun, "witGetPartNConsumingBomEntries");

a2281 2
   forbidNullWitRun (theWitRun, "witGetPartNConsumingSubsBomEntries");

a2294 2
   forbidNullWitRun (theWitRun, "witGetPartNProducingBopEntries");

a2307 2
   forbidNullWitRun (theWitRun, "witGetPartPropRouting");

a2320 2
   forbidNullWitRun (theWitRun, "witGetPartReqVol");

a2333 2
   forbidNullWitRun (theWitRun, "witGetPartResidualVol");

a2346 2
   forbidNullWitRun (theWitRun, "witGetParts");

a2359 2
   forbidNullWitRun (theWitRun, "witGetPartScrapVol");

a2372 2
   forbidNullWitRun (theWitRun, "witGetPartSelForDel");

a2385 2
   forbidNullWitRun (theWitRun, "witGetPartShadowPrice");

a2398 2
   forbidNullWitRun (theWitRun, "witGetPartSingleSource");

a2411 2
   forbidNullWitRun (theWitRun, "witGetPartStockVol");

a2424 2
   forbidNullWitRun (theWitRun, "witGetPartSupplyVol");

a2437 2
   forbidNullWitRun (theWitRun, "witGetPartUnitCost");

a2449 2
   forbidNullWitRun (theWitRun, "witGetPenExec");

a2460 2
   forbidNullWitRun (theWitRun, "witGetPipExists");

a2475 2
   forbidNullWitRun (theWitRun, "witGetPipSeq");

a2490 2
   forbidNullWitRun (theWitRun, "witGetPerfPegging");

a2501 2
   forbidNullWitRun (theWitRun, "witGetPeriodsPerYear");

a2512 2
   forbidNullWitRun (theWitRun, "witGetPostSolveRecovery");

a2523 2
   forbidNullWitRun (theWitRun, "witGetPrefHighStockSLBs");

a2534 2
   forbidNullWitRun (theWitRun, "witGetPreprocessed");

a2545 2
   forbidNullWitRun (theWitRun, "witGetRespectStockSLBs");

a2556 2
   forbidNullWitRun (theWitRun, "witGetRoundReqVols");

a2567 2
   forbidNullWitRun (theWitRun, "witGetSelSplit");

a2578 2
   forbidNullWitRun (theWitRun, "witGetSkipFailures");

a2589 2
   forbidNullWitRun (theWitRun, "witGetStockReallocation");

a2603 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryAppData");

a2620 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryConsRate");

a2637 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryConsumedPart");

a2654 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryEarliestPeriod");

a2671 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryExecPenalty");

a2688 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryExpAllowed");

a2705 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryExpNetAversion");

a2722 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryFalloutRate");

a2739 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryFssSubVol");

a2756 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryImpactPeriod");

a2773 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryLatestPeriod");

a2790 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryMrpNetAllowed");

a2807 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryMrpSubVol");

a2824 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryNetAllowed");

a2841 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryObj1SubCost");

a2858 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryObj2SubPenalty");

a2875 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryOffset");

a2892 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryProdVol");

a2909 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryRoutingShare");

a2926 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntrySelForDel");

a2943 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntrySubVol");

a2957 2
   forbidNullWitRun (theWitRun, "witGetTitle");

a2968 2
   forbidNullWitRun (theWitRun, "witGetTruncOffsets");

a2979 2
   forbidNullWitRun (theWitRun, "witGetTwoWayMultiExec");

a2990 2
   forbidNullWitRun (theWitRun, "witGetUseFocusHorizons");

a3001 2
   forbidNullWitRun (theWitRun, "witGetUserHeurStart");

d3013 6
a3018 1
   forbidNullWitRun (theWitRun, "witGetWbounds");
d3020 4
a3034 2
   forbidNullWitRun (theWitRun, "witGetWit34Compatible");

a3044 2
   forbidNullWitRun (theWitRun, "witHeurImplode");

a3058 2
   forbidNullWitRun (theWitRun, "witIncHeurAlloc");

a3078 2
   forbidNullWitRun (theWitRun, "witIncHeurAllocTwme");

a3093 2
   forbidNullWitRun (theWitRun, "witInitialize");

a3102 2
   forbidNullWitRun (theWitRun, "witMrp");

a3125 2
   forbidNullWitRun (theWitRun, "witOptImplode");

a3134 2
   forbidNullWitRun (theWitRun, "witOptPreprocess");

a3145 2
   forbidNullWitRun (theWitRun, "witPreprocess");

a3154 2
   forbidNullWitRun (theWitRun, "witPostprocess");

a3163 2
   forbidNullWitRun (theWitRun, "witPurgeData");

a3173 2
   forbidNullWitRun (theWitRun, "witReadData");

a3183 2
   forbidNullWitRun (theWitRun, "witResetObjItr");

a3193 2
   forbidNullWitRun (theWitRun, "witSetAccAfterSoftLB");

a3204 2
   forbidNullWitRun (theWitRun, "witSetAccAfterOptImp");

a3215 2
   forbidNullWitRun (theWitRun, "witSetAppData");

a3226 2
   forbidNullWitRun (theWitRun, "witSetAutoPriority");

a3239 2
   forbidNullWitRun (theWitRun, "witSetBomEntryAppData");

a3254 2
   forbidNullWitRun (theWitRun, "witSetBomEntryConsRate");

a3269 2
   forbidNullWitRun (theWitRun, "witSetBomEntryEarliestPeriod");

a3284 2
   forbidNullWitRun (theWitRun, "witSetBomEntryExecPenalty");

a3299 2
   forbidNullWitRun (theWitRun, "witSetBomEntryFalloutRate");

a3314 2
   forbidNullWitRun (theWitRun, "witSetBomEntryLatestPeriod");

a3329 2
   forbidNullWitRun (theWitRun, "witSetBomEntryMandEC");

a3344 2
   forbidNullWitRun (theWitRun, "witSetBomEntryOffset");

a3359 2
   forbidNullWitRun (theWitRun, "witSetBomEntryPropRouting");

a3374 2
   forbidNullWitRun (theWitRun, "witSetBomEntryRoutingShare");

a3389 2
   forbidNullWitRun (theWitRun, "witSetBomEntrySelForDel");

a3404 2
   forbidNullWitRun (theWitRun, "witSetBomEntrySingleSource");

a3419 2
   forbidNullWitRun (theWitRun, "witSetBopEntryAppData");

a3434 2
   forbidNullWitRun (theWitRun, "witSetBopEntryEarliestPeriod");

a3449 2
   forbidNullWitRun (theWitRun, "witSetBopEntryExpAllowed");

a3464 2
   forbidNullWitRun (theWitRun, "witSetBopEntryExpAversion");

a3479 2
   forbidNullWitRun (theWitRun, "witSetBopEntryExpAversionDbl");

a3494 2
   forbidNullWitRun (theWitRun, "witSetBopEntryLatestPeriod");

a3509 2
   forbidNullWitRun (theWitRun, "witSetBopEntryOffset");

a3524 2
   forbidNullWitRun (theWitRun, "witSetBopEntryProductRate");

a3539 2
   forbidNullWitRun (theWitRun, "witSetBopEntryRoutingShare");

a3554 2
   forbidNullWitRun (theWitRun, "witSetBopEntrySelForDel");

a3567 2
   forbidNullWitRun (theWitRun, "witSetCapCost");

a3578 2
   forbidNullWitRun (theWitRun, "witSetCompPrices");

a3589 2
   forbidNullWitRun (theWitRun, "witSetComputeCriticalList");

a3602 2
   forbidNullWitRun (theWitRun, "witSetDemandAppData");

a3619 2
   forbidNullWitRun (theWitRun, "witSetDemandCumShipBounds");

a3636 2
   forbidNullWitRun (theWitRun, "witSetDemandDemandVol");

a3651 2
   forbidNullWitRun (theWitRun, "witSetDemandFocusHorizon");

a3666 2
   forbidNullWitRun (theWitRun, "witSetDemandFssShipVol");

a3681 2
   forbidNullWitRun (theWitRun, "witSetDemandGrossRev");

a3696 2
   forbidNullWitRun (theWitRun, "witSetDemandObj1CumShipReward");

a3711 2
   forbidNullWitRun (theWitRun, "witSetDemandObj1ShipReward");

a3726 2
   forbidNullWitRun (theWitRun, "witSetDemandPriority");

a3741 2
   forbidNullWitRun (theWitRun, "witSetDemandSelForDel");

a3756 2
   forbidNullWitRun (theWitRun, "witSetDemandShipLateUB");

a3771 2
   forbidNullWitRun (theWitRun, "witSetDemandShipVol");

a3784 2
   forbidNullWitRun (theWitRun, "witSetDoubleMode");

a3795 2
   forbidNullWitRun (theWitRun, "witSetEquitability");

a3806 2
   forbidNullWitRun (theWitRun, "witSetExecEmptyBom");

a3817 2
   forbidNullWitRun (theWitRun, "witSetExpCutoff");

a3828 2
   forbidNullWitRun (theWitRun, "witSetExpCutoffDbl");

a3839 2
   forbidNullWitRun (theWitRun, "witSetForcedMultiEq");

a3850 2
   forbidNullWitRun (theWitRun, "witSetHashTableSize");

a3861 2
   forbidNullWitRun (theWitRun, "witSetPipSeqFromHeur");

a3872 2
   forbidNullWitRun (theWitRun, "witSetIndependentOffsets");

a3883 2
   forbidNullWitRun (theWitRun, "witSetInvCost");

a3894 2
   forbidNullWitRun (theWitRun, "witSetLotSizeTol");

a3905 2
   forbidNullWitRun (theWitRun, "witSetLotSizeTolDbl");

a3917 2
   forbidNullWitRun (theWitRun, "witSetMesgFileAccessMode");

a3930 2
   forbidNullWitRun (theWitRun, "witSetMesgFileName");

a3944 2
   forbidNullWitRun (theWitRun, "witSetMesgPrintNumber");

a3959 2
   forbidNullWitRun (theWitRun, "witSetMesgStopRunning");

a3974 2
   forbidNullWitRun (theWitRun, "witSetMesgTimesPrint");

a3987 2
   forbidNullWitRun (theWitRun, "witSetMultiExec");

a3998 2
   forbidNullWitRun (theWitRun, "witSetMultiRoute");

a4009 2
   forbidNullWitRun (theWitRun, "witSetNPeriods");

a4020 2
   forbidNullWitRun (theWitRun, "witSetObj2Winv");

a4031 2
   forbidNullWitRun (theWitRun, "witSetObj2Wrev");

a4042 2
   forbidNullWitRun (theWitRun, "witSetObj2Wserv");

a4053 2
   forbidNullWitRun (theWitRun, "witSetObj2Wsub");

a4064 2
   forbidNullWitRun (theWitRun, "witSetObjChoice");

a4075 2
   forbidNullWitRun (theWitRun, "witSetOslMesgFileName");

a4087 2
   forbidNullWitRun (theWitRun, "witSetOperationAppData");

a4102 2
   forbidNullWitRun (theWitRun, "witSetOperationExecBounds");

a4118 2
   forbidNullWitRun (theWitRun, "witSetOperationExecPenalty");

a4131 2
   forbidNullWitRun (theWitRun, "witSetOperationExecVol");

a4145 2
   forbidNullWitRun (theWitRun, "witSetOperationIncLotSize");

a4159 2
   forbidNullWitRun (theWitRun, "witSetOperationIncLotSize2");

a4173 2
   forbidNullWitRun (theWitRun, "witSetOperationLotSize2Thresh");

a4187 2
   forbidNullWitRun (theWitRun, "witSetOperationMinLotSize");

a4201 2
   forbidNullWitRun (theWitRun, "witSetOperationMinLotSize2");

a4215 2
   forbidNullWitRun (theWitRun, "witSetOperationObj1ExecCost");

a4229 2
   forbidNullWitRun (theWitRun, "witSetOperationObj2AuxCost");

a4243 2
   forbidNullWitRun (theWitRun, "witSetOperationSelForDel");

a4257 2
   forbidNullWitRun (theWitRun, "witSetOperationTwoLevelLotSizes");

a4271 2
   forbidNullWitRun (theWitRun, "witSetOperationYieldRate");

a4283 2
   forbidNullWitRun (theWitRun, "witSetOptInitMethod");

a4294 2
   forbidNullWitRun (theWitRun, "witSetOptWithLotSizes");

a4305 2
   forbidNullWitRun (theWitRun, "witSetOutputPrecision");

a4317 2
   forbidNullWitRun (theWitRun, "witSetPartAppData");

a4330 2
   forbidNullWitRun (theWitRun, "witSetPartBuildAheadUB");

a4343 2
   forbidNullWitRun (theWitRun, "witSetPartBuildAsap");

a4356 2
   forbidNullWitRun (theWitRun, "witSetPartBuildNstn");

a4369 2
   forbidNullWitRun (theWitRun, "witSetPartObj1ScrapCost");

a4383 2
   forbidNullWitRun (theWitRun, "witSetPartObj1StockCost");

a4396 2
   forbidNullWitRun (theWitRun, "witSetPartPropRouting");

a4409 2
   forbidNullWitRun (theWitRun, "witSetPartSelForDel");

a4422 2
   forbidNullWitRun (theWitRun, "witSetPartSingleSource");

a4437 2
   forbidNullWitRun (theWitRun, "witSetPartStockBounds");

a4452 2
   forbidNullWitRun (theWitRun, "witSetPartSupplyVol");

a4465 2
   forbidNullWitRun (theWitRun, "witSetPartUnitCost");

a4477 2
   forbidNullWitRun (theWitRun, "witSetPenExec");

a4488 2
   forbidNullWitRun (theWitRun, "witSetPerfPegging");

a4499 2
   forbidNullWitRun (theWitRun, "witSetPeriodsPerYear");

a4510 2
   forbidNullWitRun (theWitRun, "witSetPostSolveRecovery");

a4521 2
   forbidNullWitRun (theWitRun, "witSetPrefHighStockSLBs");

a4532 2
   forbidNullWitRun (theWitRun, "witSetRespectStockSLBs");

a4543 2
   forbidNullWitRun (theWitRun, "witSetRoundReqVols");

a4554 2
   forbidNullWitRun (theWitRun, "witSetSelSplit");

a4565 2
   forbidNullWitRun (theWitRun, "witSetSkipFailures");

a4576 2
   forbidNullWitRun (theWitRun, "witSetStockReallocation");

a4590 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntryAppData");

a4607 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntryConsRate");

a4624 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntryEarliestPeriod");

a4641 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntryExecPenalty");

a4658 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntryExpAllowed");

a4675 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntryExpNetAversion");

a4692 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntryFalloutRate");

a4709 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntryLatestPeriod");

a4726 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntryMrpNetAllowed");

a4743 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntryNetAllowed");

a4760 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntryObj1SubCost");

a4777 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntryObj2SubPenalty");

a4794 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntryOffset");

a4811 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntryRoutingShare");

a4828 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntrySelForDel");

a4845 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntrySubVol");

a4859 2
   forbidNullWitRun (theWitRun, "witSetTitle");

a4870 2
   forbidNullWitRun (theWitRun, "witSetTruncOffsets");

a4881 2
   forbidNullWitRun (theWitRun, "witSetTwoWayMultiExec");

a4892 2
   forbidNullWitRun (theWitRun, "witSetUseFocusHorizons");

a4903 2
   forbidNullWitRun (theWitRun, "witSetUserHeurStart");

d4915 6
a4920 1
   forbidNullWitRun (theWitRun, "witSetWbounds");
d4922 4
a4936 2
   forbidNullWitRun (theWitRun, "witSetWit34Compatible");

a4946 2
   forbidNullWitRun (theWitRun, "witShutDownHeurAlloc");

a4955 2
   forbidNullWitRun (theWitRun, "witStartHeurAlloc");

a4967 2
   forbidNullWitRun (theWitRun, "witWriteCriticalList");

a4980 2
   forbidNullWitRun (theWitRun, "witWriteData");

a4992 2
   forbidNullWitRun (theWitRun, "witWriteExecSched");

a5005 2
   forbidNullWitRun (theWitRun, "witWriteReqSched");

a5018 2
   forbidNullWitRun (theWitRun, "witWriteShipSched");

a5036 2
   forbidNullWitRun (theWitRun, "witAddBomEntryVa");

a5055 2
   forbidNullWitRun (theWitRun, "witAddDemandVa");

a5074 2
   forbidNullWitRun (theWitRun, "witAddPartVa");

a5094 2
   forbidNullWitRun (theWitRun, "witAddSubsBomEntryVa");

a5114 2
   forbidNullWitRun (theWitRun, "witGetBomEntryFallout");

a5129 2
   forbidNullWitRun (theWitRun, "witGetBomEntryUsageRate");

a5144 2
   forbidNullWitRun (theWitRun, "witGetBomEntryUsageTime");

a5159 2
   forbidNullWitRun (theWitRun, "witGetBopEntryByProduct");

a5174 2
   forbidNullWitRun (theWitRun, "witGetBopEntryProdRate");

a5189 2
   forbidNullWitRun (theWitRun, "witGetDemandBuildAheadLimit");

a5204 2
   forbidNullWitRun (theWitRun, "witGetDemandBuildAheadUB");

a5219 2
   forbidNullWitRun (theWitRun, "witGetDemandPrefBuildAhead");

a5234 2
   forbidNullWitRun (theWitRun, "witGetDemandShipLateLimit");

a5247 2
   forbidNullWitRun (theWitRun, "witGetLocalBuildAhead");

a5258 2
   forbidNullWitRun (theWitRun, "witGetLocalMultiExec");

a5271 2
   forbidNullWitRun (theWitRun, "witGetOperationYield");

a5284 2
   forbidNullWitRun (theWitRun, "witGetPartBuildAheadLimit");

a5297 2
   forbidNullWitRun (theWitRun, "witGetPartCycleTime");

a5310 2
   forbidNullWitRun (theWitRun, "witGetPartIncLotSize");

a5323 2
   forbidNullWitRun (theWitRun, "witGetPartMinLotSize");

a5336 2
   forbidNullWitRun (theWitRun, "witGetPartMrpProdVol");

a5349 2
   forbidNullWitRun (theWitRun, "witGetPartNBomEntries");

a5362 2
   forbidNullWitRun (theWitRun, "witGetPartObj1ProdCost");

a5377 2
   forbidNullWitRun (theWitRun, "witGetPartProdBounds");

a5392 2
   forbidNullWitRun (theWitRun, "witGetPartProdVol");

a5405 2
   forbidNullWitRun (theWitRun, "witGetPartYield");

a5417 2
   forbidNullWitRun (theWitRun, "witGetStockRealloc");

a5431 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryFallout");

a5448 2
   forbidNullWitRun (theWitRun, "witGetSubsBomEntryUsageRate");

a5464 2
   forbidNullWitRun (theWitRun, "witSetBomEntryFallout");

a5479 2
   forbidNullWitRun (theWitRun, "witSetBomEntryUsageRate");

a5494 2
   forbidNullWitRun (theWitRun, "witSetBomEntryUsageTime");

a5509 2
   forbidNullWitRun (theWitRun, "witSetBopEntryByProduct");

a5524 2
   forbidNullWitRun (theWitRun, "witSetBopEntryProdRate");

a5537 2
   forbidNullWitRun (theWitRun, "witSetBuildWhenEmpty");

a5550 2
   forbidNullWitRun (theWitRun, "witSetDemandBuildAheadLimit");

a5565 2
   forbidNullWitRun (theWitRun, "witSetDemandBuildAheadUB");

a5580 2
   forbidNullWitRun (theWitRun, "witSetDemandPrefBuildAhead");

a5595 2
   forbidNullWitRun (theWitRun, "witSetDemandShipLateLimit");

a5608 2
   forbidNullWitRun (theWitRun, "witSetLocalBuildAhead");

a5619 2
   forbidNullWitRun (theWitRun, "witSetLocalMultiExec");

a5632 2
   forbidNullWitRun (theWitRun, "witSetOperationYield");

a5645 2
   forbidNullWitRun (theWitRun, "witSetPartBuildAheadLimit");

a5658 2
   forbidNullWitRun (theWitRun, "witSetPartCycleTime");

a5671 2
   forbidNullWitRun (theWitRun, "witSetPartIncLotSize");

a5684 2
   forbidNullWitRun (theWitRun, "witSetPartMinLotSize");

a5697 2
   forbidNullWitRun (theWitRun, "witSetPartObj1ProdCost");

a5712 2
   forbidNullWitRun (theWitRun, "witSetPartProdBounds");

a5727 2
   forbidNullWitRun (theWitRun, "witSetPartProdVol");

a5740 2
   forbidNullWitRun (theWitRun, "witSetPartYield");

a5752 2
   forbidNullWitRun (theWitRun, "witSetStockRealloc");

a5766 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntryFallout");

a5783 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntryProdVol");

a5800 2
   forbidNullWitRun (theWitRun, "witSetSubsBomEntryUsageRate");

a5815 2
   forbidNullWitRun (theWitRun, "witWriteProdSched");

a5829 2
   forbidNullWitRun (theWitRun, "witGetSolverLogFileName");

a5840 2
   forbidNullWitRun (theWitRun, "witSetSolverLogFileName");

a5851 2
   forbidNullWitRun (theWitRun, "witGetNonMrSelSplit");

a5862 2
   forbidNullWitRun (theWitRun, "witSetNonMrSelSplit");

a5874 2
   forbidNullWitRun (theWitRun, "witGetPartBaSelSplit");

a5887 2
   forbidNullWitRun (theWitRun, "witSetPartBaSelSplit");

a5901 2
   forbidNullWitRun (theWitRun, "witGetBopEntryMeSelSplit");

a5916 2
   forbidNullWitRun (theWitRun, "witSetBopEntryMeSelSplit");

a5929 2
   forbidNullWitRun (theWitRun, "witGetSrSelSplit");

a5940 2
   forbidNullWitRun (theWitRun, "witSetSrSelSplit");

a5951 2
   forbidNullWitRun (theWitRun, "witNoDependantWitRunVeneersIsOne");

a5960 2
   forbidNullWitRun (theWitRun, "witNoDependantWitRunVeneersDecr");

a5969 2
   forbidNullWitRun (theWitRun, "witNoDependantWitRunVeneersIncr");

a5978 2
   forbidNullWitRun (theWitRun, "witListUnissuedMsgs");

@


1.83
log
@Continued double precision.
@
text
@d1388 13
d4347 13
@


1.82
log
@Continued double precision.
@
text
@d1509 13
d4412 13
@


1.81
log
@Continued double precision.
@
text
@d19 1
d715 17
d3928 17
a5671 19
   }

//------------------------------------------------------------------------------
// API functions to be used only in double precision mode.
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryExpAversionDbl (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      double * expAversion)
   {
   forbidNullWitRun (theWitRun, "witGetBopEntryExpAversion");

   return
      theWitRun->witGetBopEntryExpAversion (
         operationName,
         bopEntryIndex,
         expAversion);
@


1.80
log
@Continued double precision.
@
text
@d19 1
a19 1
#include <RealOutArg.h>
@


1.79
log
@Continued double precision.
@
text
@d1318 1
a1318 1
WIT_DECLSPEC witReturnCode STDCALL witGetDoublePrecision (
d1320 1
a1320 1
      witBoolean * doublePrecision)
d1322 1
a1322 1
   forbidNullWitRun (theWitRun, "witGetDoublePrecision");
d1325 2
a1326 2
      theWitRun->witGetDoublePrecision (
         doublePrecision);
d4242 1
a4242 1
WIT_DECLSPEC witReturnCode STDCALL witSetDoublePrecision (
d4244 1
a4244 1
      const witBoolean doublePrecision)
d4246 1
a4246 1
   forbidNullWitRun (theWitRun, "witSetDoublePrecision");
d4249 2
a4250 2
      theWitRun->witSetDoublePrecision (
         doublePrecision);
@


1.78
log
@Continued double precision.
@
text
@d19 1
d5637 19
@


1.77
log
@Removed the "pip" attribute.
@
text
@d1317 13
d4237 13
@


1.76
log
@Continued implementation of PIP.
@
text
@a2745 13
WIT_DECLSPEC witReturnCode STDCALL witGetPip (
      WitRun * const theWitRun,
      witBoolean * pip)
   {
   forbidNullWitRun (theWitRun, "witGetPip");

   return
      theWitRun->witGetPip (
         pip);
   }

//------------------------------------------------------------------------------

a5000 13
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPip (
      WitRun * const theWitRun,
      const witBoolean pip)
   {
   forbidNullWitRun (theWitRun, "witSetPip");

   return
      theWitRun->witSetPip (
         pip);
@


1.75
log
@Implemented API function witAppendToPipSeq.
@
text
@d1425 1
a1425 1
WIT_DECLSPEC witReturnCode STDCALL witGetHeurPipSeq (
d1427 1
a1427 1
      witBoolean * heurPipSeq)
d1429 1
a1429 1
   forbidNullWitRun (theWitRun, "witGetHeurPipSeq");
d1432 2
a1433 2
      theWitRun->witGetHeurPipSeq (
         heurPipSeq);
d4306 1
a4306 1
WIT_DECLSPEC witReturnCode STDCALL witSetHeurPipSeq (
d4308 1
a4308 1
      const witBoolean heurPipSeq)
d4310 1
a4310 1
   forbidNullWitRun (theWitRun, "witSetHeurPipSeq");
d4313 2
a4314 2
      theWitRun->witSetHeurPipSeq (
         heurPipSeq);
@


1.74
log
@Added API function witClearPipSeq.
@
text
@d144 19
@


1.73
log
@Added API function witGetPipSeq.
@
text
@d166 11
@


1.72
log
@Added pipExists attribute.
@
text
@d2742 21
@


1.71
log
@Added API function witBuildPip.
@
text
@d2729 13
@


1.70
log
@Continued implementation of PIP.
@
text
@d144 11
@


1.69
log
@Continued implementation of PIP.
@
text
@d1384 13
d4229 13
@


1.68
log
@Continued implementation of PIP.
@
text
@d1168 25
@


1.67
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d35 1
a35 1
   WitUtil::forbidNullWitRun (theWitRun, "witAddBomEntry");
d50 1
a50 1
   WitUtil::forbidNullWitRun (theWitRun, "witAddBopEntry");
d65 1
a65 1
   WitUtil::forbidNullWitRun (theWitRun, "witAddDemand");
d79 1
a79 1
   WitUtil::forbidNullWitRun (theWitRun, "witAddOperation");
d93 1
a93 1
   WitUtil::forbidNullWitRun (theWitRun, "witAddPart");
d107 1
a107 1
   WitUtil::forbidNullWitRun (theWitRun, "witAddPartWithOperation");
d122 1
a122 1
   WitUtil::forbidNullWitRun (theWitRun, "witAddSubsBomEntry");
d136 1
a136 1
   WitUtil::forbidNullWitRun (theWitRun, "witAdvanceObjItr");
d147 1
a147 1
   WitUtil::forbidNullWitRun (theWitRun, "witClearPegging");
d159 1
a159 1
   WitUtil::forbidNullArg (dstWitRun, "dstWitRun", "witCopyData");
d180 1
a180 1
   WitUtil::forbidNullWitRun (theWitRun, "witDisplayData");
d198 1
a198 1
   WitUtil::forbidNullWitRun (theWitRun, "witEqHeurAlloc");
d222 1
a222 1
   WitUtil::forbidNullWitRun (theWitRun, "witEqHeurAllocTwme");
d242 1
a242 1
   WitUtil::forbidNullWitRun (theWitRun, "witEvalObjectives");
d255 1
a255 1
   WitUtil::forbidNullWitRun (theWitRun, "witFinishHeurAlloc");
d266 1
a266 1
   WitUtil::portableFree (mem);
d276 1
a276 1
   WitUtil::forbidNullWitRun (theWitRun, "witGeneratePriorities");
d288 1
a288 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetAccAfterSoftLB");
d301 1
a301 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetAccAfterOptImp");
d314 1
a314 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetAccelerated");
d327 1
a327 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetAppData");
d340 1
a340 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetAutoPriority");
d355 1
a355 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryAppData");
d372 1
a372 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryConsRate");
d389 1
a389 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryEarliestPeriod");
d406 1
a406 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryNSubsBomEntries");
d423 1
a423 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryConsumedPart");
d440 1
a440 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryExecPenalty");
d457 1
a457 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryFalloutRate");
d474 1
a474 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryImpactPeriod");
d491 1
a491 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryLatestPeriod");
d508 1
a508 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryMandEC");
d525 1
a525 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryOffset");
d542 1
a542 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryPropRouting");
d559 1
a559 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryRoutingShare");
d576 1
a576 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntrySelForDel");
d593 1
a593 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntrySingleSource");
d610 1
a610 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntryAppData");
d627 1
a627 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntryEarliestPeriod");
d644 1
a644 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntryExpAllowed");
d661 1
a661 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntryExpAversion");
d678 1
a678 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntryImpactPeriod");
d695 1
a695 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntryLatestPeriod");
d712 1
a712 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntryOffset");
d729 1
a729 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntryProductRate");
d746 1
a746 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntryProducedPart");
d763 1
a763 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntryRoutingShare");
d780 1
a780 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntrySelForDel");
d795 1
a795 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBuildWhenEmpty");
d808 1
a808 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetComputeCriticalList");
d821 1
a821 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetCapCost");
d834 1
a834 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetCompPrices");
d849 1
a849 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetCriticalList");
d866 1
a866 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandAppData");
d887 1
a887 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandConsVolPip");
d910 1
a910 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandCumShipBounds");
d929 1
a929 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandDemandVol");
d950 1
a950 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandExecVolPegging");
d975 1
a975 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandExecVolPip");
d996 1
a996 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandFocusHorizon");
d1013 1
a1013 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandFssShipVol");
d1030 1
a1030 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandGrossRev");
d1047 1
a1047 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandObj1CumShipReward");
d1064 1
a1064 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandObj1ShipReward");
d1081 1
a1081 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandPriority");
d1102 1
a1102 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandProdVolPip");
d1123 1
a1123 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandSelForDel");
d1140 1
a1140 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandShipLateUB");
d1157 1
a1157 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandShipVol");
d1180 1
a1180 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandSubVolPegging");
d1209 1
a1209 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandSubVolPip");
d1236 1
a1236 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandSupplyVolPip");
d1255 1
a1255 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetEquitability");
d1268 1
a1268 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetExecEmptyBom");
d1281 1
a1281 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetExpCutoff");
d1294 1
a1294 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetFeasible");
d1309 1
a1309 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetFocusShortageVol");
d1324 1
a1324 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetForcedMultiEq");
d1337 1
a1337 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetHashTableSize");
d1350 1
a1350 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetHeurAllocActive");
d1363 1
a1363 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetIndependentOffsets");
d1376 1
a1376 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetInvCost");
d1389 1
a1389 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetLotSizeTol");
d1402 1
a1402 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetMesgFile");
d1415 1
a1415 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetMesgFileAccessMode");
d1428 1
a1428 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetMesgFileName");
d1442 1
a1442 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetMesgPrintNumber");
d1457 1
a1457 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetMesgStopRunning");
d1472 1
a1472 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetMesgTimesPrint");
d1486 1
a1486 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetMultiExec");
d1499 1
a1499 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetMultiRoute");
d1512 1
a1512 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetNPeriods");
d1528 1
a1528 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetObj2Values");
d1544 1
a1544 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetObj2Winv");
d1557 1
a1557 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetObj2Wrev");
d1570 1
a1570 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetObj2Wserv");
d1583 1
a1583 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetObj2Wsub");
d1596 1
a1596 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetObjChoice");
d1610 1
a1610 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetObjItrBomEntry");
d1625 1
a1625 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetObjItrBopEntry");
d1640 1
a1640 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetObjItrDemand");
d1654 1
a1654 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetObjItrOperation");
d1667 1
a1667 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetObjItrPart");
d1680 1
a1680 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetObjItrState");
d1694 1
a1694 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetObjItrSubsBomEntry");
d1710 1
a1710 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetObjValues");
d1726 1
a1726 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationAppData");
d1743 1
a1743 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationExecBounds");
d1761 1
a1761 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationExecPenalty");
d1777 1
a1777 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationExecutable");
d1793 1
a1793 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationExecVol");
d1808 1
a1808 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationExists");
d1824 1
a1824 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationFssExecVol");
d1840 1
a1840 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationIncLotSize");
d1856 1
a1856 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationIncLotSize2");
d1872 1
a1872 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationLotSize2Thresh");
d1888 1
a1888 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationMinLotSize");
d1904 1
a1904 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationMinLotSize2");
d1920 1
a1920 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationMrpExecVol");
d1936 1
a1936 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationNBomEntries");
d1952 1
a1952 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationNBopEntries");
d1968 1
a1968 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationObj1ExecCost");
d1984 1
a1984 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationObj2AuxCost");
d1999 1
a1999 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperations");
d2015 1
a2015 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationSelForDel");
d2031 1
a2031 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationTwoLevelLotSizes");
d2047 1
a2047 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationYieldRate");
d2061 1
a2061 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOptInitMethod");
d2074 1
a2074 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOptWithLotSizes");
d2087 1
a2087 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOslMesgFileName");
d2100 1
a2100 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOutputPrecision");
d2113 1
a2113 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPostprocessed");
d2127 1
a2127 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartAppData");
d2143 1
a2143 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartBelowList");
d2159 1
a2159 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartBuildAheadUB");
d2174 1
a2174 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartBuildAsap");
d2189 1
a2189 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartBuildNstn");
d2204 1
a2204 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartConsVol");
d2221 1
a2221 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartConsumingBomEntry");
d2241 1
a2241 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartConsumingSubsBomEntry");
d2260 1
a2260 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartDemands");
d2276 1
a2276 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartCategory");
d2291 1
a2291 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartExcessVol");
d2306 1
a2306 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartExists");
d2321 1
a2321 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartFocusShortageVol");
d2336 1
a2336 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartObj1ScrapCost");
d2351 1
a2351 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartObj1StockCost");
d2368 1
a2368 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartProducingBopEntry");
d2387 1
a2387 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartStockBounds");
d2404 1
a2404 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartMrpConsVol");
d2419 1
a2419 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartMrpExcessVol");
d2434 1
a2434 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartMrpResidualVol");
d2449 1
a2449 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartNConsumingBomEntries");
d2464 1
a2464 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartNConsumingSubsBomEntries");
d2479 1
a2479 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartNProducingBopEntries");
d2494 1
a2494 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartPropRouting");
d2509 1
a2509 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartReqVol");
d2524 1
a2524 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartResidualVol");
d2539 1
a2539 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetParts");
d2554 1
a2554 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartScrapVol");
d2569 1
a2569 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartSelForDel");
d2584 1
a2584 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartShadowPrice");
d2599 1
a2599 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartSingleSource");
d2614 1
a2614 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartStockVol");
d2629 1
a2629 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartSupplyVol");
d2644 1
a2644 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartUnitCost");
d2658 1
a2658 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPenExec");
d2671 1
a2671 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPip");
d2684 1
a2684 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPerfPegging");
d2697 1
a2697 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPeriodsPerYear");
d2710 1
a2710 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPostSolveRecovery");
d2723 1
a2723 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPrefHighStockSLBs");
d2736 1
a2736 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPreprocessed");
d2749 1
a2749 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetRespectStockSLBs");
d2762 1
a2762 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetRoundReqVols");
d2775 1
a2775 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSelSplit");
d2788 1
a2788 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSkipFailures");
d2801 1
a2801 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetStockReallocation");
d2817 1
a2817 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryAppData");
d2836 1
a2836 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryConsRate");
d2855 1
a2855 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryConsumedPart");
d2874 1
a2874 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryEarliestPeriod");
d2893 1
a2893 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryExecPenalty");
d2912 1
a2912 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryExpAllowed");
d2931 1
a2931 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryExpNetAversion");
d2950 1
a2950 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryFalloutRate");
d2969 1
a2969 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryFssSubVol");
d2988 1
a2988 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryImpactPeriod");
d3007 1
a3007 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryLatestPeriod");
d3026 1
a3026 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryMrpNetAllowed");
d3045 1
a3045 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryMrpSubVol");
d3064 1
a3064 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryNetAllowed");
d3083 1
a3083 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryObj1SubCost");
d3102 1
a3102 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryObj2SubPenalty");
d3121 1
a3121 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryOffset");
d3140 1
a3140 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryProdVol");
d3159 1
a3159 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryRoutingShare");
d3178 1
a3178 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntrySelForDel");
d3197 1
a3197 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntrySubVol");
d3213 1
a3213 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetTitle");
d3226 1
a3226 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetTruncOffsets");
d3239 1
a3239 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetTwoWayMultiExec");
d3252 1
a3252 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetUseFocusHorizons");
d3265 1
a3265 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetUserHeurStart");
d3278 1
a3278 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetWbounds");
d3291 1
a3291 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetWit34Compatible");
d3303 1
a3303 1
   WitUtil::forbidNullWitRun (theWitRun, "witHeurImplode");
d3319 1
a3319 1
   WitUtil::forbidNullWitRun (theWitRun, "witIncHeurAlloc");
d3341 1
a3341 1
   WitUtil::forbidNullWitRun (theWitRun, "witIncHeurAllocTwme");
d3358 1
a3358 1
   WitUtil::forbidNullWitRun (theWitRun, "witInitialize");
d3369 1
a3369 1
   WitUtil::forbidNullWitRun (theWitRun, "witMrp");
d3380 1
a3380 1
   WitUtil::forbidNullArg (theWitRun, "theWitRun", "witNewRun");
d3394 1
a3394 1
   WitUtil::forbidNullWitRun (theWitRun, "witOptImplode");
d3405 1
a3405 1
   WitUtil::forbidNullWitRun (theWitRun, "witOptPreprocess");
d3418 1
a3418 1
   WitUtil::forbidNullWitRun (theWitRun, "witPreprocess");
d3429 1
a3429 1
   WitUtil::forbidNullWitRun (theWitRun, "witPostprocess");
d3440 1
a3440 1
   WitUtil::forbidNullWitRun (theWitRun, "witPurgeData");
d3452 1
a3452 1
   WitUtil::forbidNullWitRun (theWitRun, "witReadData");
d3464 1
a3464 1
   WitUtil::forbidNullWitRun (theWitRun, "witResetObjItr");
d3476 1
a3476 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetAccAfterSoftLB");
d3489 1
a3489 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetAccAfterOptImp");
d3502 1
a3502 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetAppData");
d3515 1
a3515 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetAutoPriority");
d3530 1
a3530 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntryAppData");
d3547 1
a3547 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntryConsRate");
d3564 1
a3564 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntryEarliestPeriod");
d3581 1
a3581 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntryExecPenalty");
d3598 1
a3598 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntryFalloutRate");
d3615 1
a3615 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntryLatestPeriod");
d3632 1
a3632 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntryMandEC");
d3649 1
a3649 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntryOffset");
d3666 1
a3666 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntryPropRouting");
d3683 1
a3683 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntryRoutingShare");
d3700 1
a3700 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntrySelForDel");
d3717 1
a3717 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntrySingleSource");
d3734 1
a3734 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBopEntryAppData");
d3751 1
a3751 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBopEntryEarliestPeriod");
d3768 1
a3768 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBopEntryExpAllowed");
d3785 1
a3785 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBopEntryExpAversion");
d3802 1
a3802 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBopEntryLatestPeriod");
d3819 1
a3819 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBopEntryOffset");
d3836 1
a3836 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBopEntryProductRate");
d3853 1
a3853 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBopEntryRoutingShare");
d3870 1
a3870 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBopEntrySelForDel");
d3885 1
a3885 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetCapCost");
d3898 1
a3898 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetCompPrices");
d3911 1
a3911 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetComputeCriticalList");
d3926 1
a3926 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandAppData");
d3945 1
a3945 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandCumShipBounds");
d3964 1
a3964 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandDemandVol");
d3981 1
a3981 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandFocusHorizon");
d3998 1
a3998 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandFssShipVol");
d4015 1
a4015 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandGrossRev");
d4032 1
a4032 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandObj1CumShipReward");
d4049 1
a4049 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandObj1ShipReward");
d4066 1
a4066 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandPriority");
d4083 1
a4083 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandSelForDel");
d4100 1
a4100 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandShipLateUB");
d4117 1
a4117 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandShipVol");
d4132 1
a4132 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetEquitability");
d4145 1
a4145 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetExecEmptyBom");
d4158 1
a4158 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetExpCutoff");
d4171 1
a4171 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetForcedMultiEq");
d4184 1
a4184 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetHashTableSize");
d4197 1
a4197 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetIndependentOffsets");
d4210 1
a4210 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetInvCost");
d4223 1
a4223 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetLotSizeTol");
d4237 1
a4237 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetMesgFileAccessMode");
d4252 1
a4252 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetMesgFileName");
d4268 1
a4268 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetMesgPrintNumber");
d4285 1
a4285 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetMesgStopRunning");
d4302 1
a4302 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetMesgTimesPrint");
d4317 1
a4317 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetMultiExec");
d4330 1
a4330 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetMultiRoute");
d4343 1
a4343 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetNPeriods");
d4356 1
a4356 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetObj2Winv");
d4369 1
a4369 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetObj2Wrev");
d4382 1
a4382 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetObj2Wserv");
d4395 1
a4395 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetObj2Wsub");
d4408 1
a4408 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetObjChoice");
d4421 1
a4421 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOslMesgFileName");
d4435 1
a4435 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOperationAppData");
d4452 1
a4452 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOperationExecBounds");
d4470 1
a4470 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOperationExecPenalty");
d4485 1
a4485 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOperationExecVol");
d4501 1
a4501 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOperationIncLotSize");
d4517 1
a4517 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOperationIncLotSize2");
d4533 1
a4533 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOperationLotSize2Thresh");
d4549 1
a4549 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOperationMinLotSize");
d4565 1
a4565 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOperationMinLotSize2");
d4581 1
a4581 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOperationObj1ExecCost");
d4597 1
a4597 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOperationObj2AuxCost");
d4613 1
a4613 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOperationSelForDel");
d4629 1
a4629 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOperationTwoLevelLotSizes");
d4645 1
a4645 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOperationYieldRate");
d4659 1
a4659 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOptInitMethod");
d4672 1
a4672 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOptWithLotSizes");
d4685 1
a4685 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOutputPrecision");
d4699 1
a4699 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartAppData");
d4714 1
a4714 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartBuildAheadUB");
d4729 1
a4729 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartBuildAsap");
d4744 1
a4744 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartBuildNstn");
d4759 1
a4759 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartObj1ScrapCost");
d4775 1
a4775 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartObj1StockCost");
d4790 1
a4790 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartPropRouting");
d4805 1
a4805 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartSelForDel");
d4820 1
a4820 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartSingleSource");
d4837 1
a4837 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartStockBounds");
d4854 1
a4854 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartSupplyVol");
d4869 1
a4869 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartUnitCost");
d4883 1
a4883 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPenExec");
d4896 1
a4896 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPip");
d4909 1
a4909 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPerfPegging");
d4922 1
a4922 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPeriodsPerYear");
d4935 1
a4935 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPostSolveRecovery");
d4948 1
a4948 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPrefHighStockSLBs");
d4961 1
a4961 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetRespectStockSLBs");
d4974 1
a4974 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetRoundReqVols");
d4987 1
a4987 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSelSplit");
d5000 1
a5000 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSkipFailures");
d5013 1
a5013 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetStockReallocation");
d5029 1
a5029 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryAppData");
d5048 1
a5048 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryConsRate");
d5067 1
a5067 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryEarliestPeriod");
d5086 1
a5086 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryExecPenalty");
d5105 1
a5105 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryExpAllowed");
d5124 1
a5124 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryExpNetAversion");
d5143 1
a5143 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryFalloutRate");
d5162 1
a5162 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryLatestPeriod");
d5181 1
a5181 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryMrpNetAllowed");
d5200 1
a5200 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryNetAllowed");
d5219 1
a5219 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryObj1SubCost");
d5238 1
a5238 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryObj2SubPenalty");
d5257 1
a5257 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryOffset");
d5276 1
a5276 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryRoutingShare");
d5295 1
a5295 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntrySelForDel");
d5314 1
a5314 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntrySubVol");
d5330 1
a5330 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetTitle");
d5343 1
a5343 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetTruncOffsets");
d5356 1
a5356 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetTwoWayMultiExec");
d5369 1
a5369 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetUseFocusHorizons");
d5382 1
a5382 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetUserHeurStart");
d5395 1
a5395 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetWbounds");
d5408 1
a5408 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetWit34Compatible");
d5420 1
a5420 1
   WitUtil::forbidNullWitRun (theWitRun, "witShutDownHeurAlloc");
d5431 1
a5431 1
   WitUtil::forbidNullWitRun (theWitRun, "witStartHeurAlloc");
d5445 1
a5445 1
   WitUtil::forbidNullWitRun (theWitRun, "witWriteCriticalList");
d5460 1
a5460 1
   WitUtil::forbidNullWitRun (theWitRun, "witWriteData");
d5474 1
a5474 1
   WitUtil::forbidNullWitRun (theWitRun, "witWriteExecSched");
d5489 1
a5489 1
   WitUtil::forbidNullWitRun (theWitRun, "witWriteReqSched");
d5504 1
a5504 1
   WitUtil::forbidNullWitRun (theWitRun, "witWriteShipSched");
d5524 1
a5524 1
   WitUtil::forbidNullWitRun (theWitRun, "witAddBomEntryVa");
d5545 1
a5545 1
   WitUtil::forbidNullWitRun (theWitRun, "witAddDemandVa");
d5566 1
a5566 1
   WitUtil::forbidNullWitRun (theWitRun, "witAddPartVa");
d5588 1
a5588 1
   WitUtil::forbidNullWitRun (theWitRun, "witAddSubsBomEntryVa");
d5610 1
a5610 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryFallout");
d5627 1
a5627 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryUsageRate");
d5644 1
a5644 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryUsageTime");
d5661 1
a5661 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntryByProduct");
d5678 1
a5678 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntryProdRate");
d5695 1
a5695 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandBuildAheadLimit");
d5712 1
a5712 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandBuildAheadUB");
d5729 1
a5729 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandPrefBuildAhead");
d5746 1
a5746 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandShipLateLimit");
d5761 1
a5761 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetLocalBuildAhead");
d5774 1
a5774 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetLocalMultiExec");
d5789 1
a5789 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationYield");
d5804 1
a5804 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartBuildAheadLimit");
d5819 1
a5819 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartCycleTime");
d5834 1
a5834 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartIncLotSize");
d5849 1
a5849 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartMinLotSize");
d5864 1
a5864 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartMrpProdVol");
d5879 1
a5879 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartNBomEntries");
d5894 1
a5894 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartObj1ProdCost");
d5911 1
a5911 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartProdBounds");
d5928 1
a5928 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartProdVol");
d5943 1
a5943 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartYield");
d5957 1
a5957 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetStockRealloc");
d5973 1
a5973 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryFallout");
d5992 1
a5992 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryUsageRate");
d6010 1
a6010 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntryFallout");
d6027 1
a6027 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntryUsageRate");
d6044 1
a6044 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntryUsageTime");
d6061 1
a6061 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBopEntryByProduct");
d6078 1
a6078 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBopEntryProdRate");
d6093 1
a6093 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBuildWhenEmpty");
d6108 1
a6108 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandBuildAheadLimit");
d6125 1
a6125 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandBuildAheadUB");
d6142 1
a6142 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandPrefBuildAhead");
d6159 1
a6159 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandShipLateLimit");
d6174 1
a6174 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetLocalBuildAhead");
d6187 1
a6187 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetLocalMultiExec");
d6202 1
a6202 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOperationYield");
d6217 1
a6217 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartBuildAheadLimit");
d6232 1
a6232 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartCycleTime");
d6247 1
a6247 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartIncLotSize");
d6262 1
a6262 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartMinLotSize");
d6277 1
a6277 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartObj1ProdCost");
d6294 1
a6294 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartProdBounds");
d6311 1
a6311 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartProdVol");
d6326 1
a6326 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartYield");
d6340 1
a6340 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetStockRealloc");
d6356 1
a6356 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryFallout");
d6375 1
a6375 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryProdVol");
d6394 1
a6394 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryUsageRate");
d6411 1
a6411 1
   WitUtil::forbidNullWitRun (theWitRun, "witWriteProdSched");
d6427 1
a6427 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSolverLogFileName");
d6440 1
a6440 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSolverLogFileName");
d6453 1
a6453 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetNonMrSelSplit");
d6466 1
a6466 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetNonMrSelSplit");
d6480 1
a6480 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartBaSelSplit");
d6495 1
a6495 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartBaSelSplit");
d6511 1
a6511 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntryMeSelSplit");
d6528 1
a6528 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBopEntryMeSelSplit");
d6543 1
a6543 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSrSelSplit");
d6556 1
a6556 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSrSelSplit");
d6569 1
a6569 1
   WitUtil::forbidNullWitRun (theWitRun, "witNoDependantWitRunVeneersIsOne");
d6580 1
a6580 1
   WitUtil::forbidNullWitRun (theWitRun, "witNoDependantWitRunVeneersDecr");
d6591 1
a6591 1
   WitUtil::forbidNullWitRun (theWitRun, "witNoDependantWitRunVeneersIncr");
d6602 1
a6602 1
   WitUtil::forbidNullWitRun (theWitRun, "witListUnissuedMsgs");
@


1.66
log
@Continued implementation of post-implosion pegging.
@
text
@d877 25
d965 25
d1092 25
d1197 54
d2667 1
a2667 1
WIT_DECLSPEC witReturnCode STDCALL witGetPerfPIPegging (
d2669 1
a2669 1
      witBoolean * perfPIPegging)
d2671 1
a2671 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPerfPIPegging");
d2674 2
a2675 2
      theWitRun->witGetPerfPIPegging (
         perfPIPegging);
d4892 1
a4892 1
WIT_DECLSPEC witReturnCode STDCALL witSetPerfPIPegging (
d4894 1
a4894 1
      const witBoolean perfPIPegging)
d4896 1
a4896 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPerfPIPegging");
d4899 2
a4900 2
      theWitRun->witSetPerfPIPegging (
         perfPIPegging);
@


1.65
log
@Began implementation of post-implosion pegging.
@
text
@d2538 13
a2576 13
WIT_DECLSPEC witReturnCode STDCALL witGetPiPegging (
      WitRun * const theWitRun,
      witBoolean * piPegging)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetPiPegging");

   return
      theWitRun->witGetPiPegging (
         piPegging);
   }

//------------------------------------------------------------------------------

d4763 1
a4763 1
WIT_DECLSPEC witReturnCode STDCALL witSetPerfPegging (
d4765 1
a4765 1
      const witBoolean perfPegging)
d4767 1
a4767 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPerfPegging");
d4770 2
a4771 2
      theWitRun->witSetPerfPegging (
         perfPegging);
d4776 1
a4776 1
WIT_DECLSPEC witReturnCode STDCALL witSetPiPegging (
d4778 1
a4778 1
      const witBoolean piPegging)
d4780 1
a4780 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPiPegging");
d4783 2
a4784 2
      theWitRun->witSetPiPegging (
         piPegging);
@


1.64
log
@Continued implementation of opt with COIN.
@
text
@d2564 13
d4772 13
@


1.63
log
@Continued implementation of opt with COIN.
@
text
@a829 13
WIT_DECLSPEC witReturnCode STDCALL witGetSolverLogFileName (
      WitRun * const theWitRun,
      char * * solverLogFileName)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetSolverLogFileName");

   return
      theWitRun->witGetSolverLogFileName (
         solverLogFileName);
   }
 
//------------------------------------------------------------------------------

a3751 13
WIT_DECLSPEC witReturnCode STDCALL witSetSolverLogFileName (
      WitRun * const theWitRun,
      const char * const solverLogFileName)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetSolverLogFileName");

   return
      theWitRun->witSetSolverLogFileName (
         solverLogFileName);
   }
  
//------------------------------------------------------------------------------

d6266 26
@


1.62
log
@Changed the routingShare attributes from scalars to vectors.
@
text
@d830 1
a830 1
WIT_DECLSPEC witReturnCode STDCALL witGetCoinLogFileName (
d832 1
a832 1
      char * * coinLogFileName)
d834 1
a834 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetCoinLogFileName");
d837 2
a838 2
      theWitRun->witGetCoinLogFileName (
         coinLogFileName);
d3765 1
a3765 1
WIT_DECLSPEC witReturnCode STDCALL witSetCoinLogFileName (
d3767 1
a3767 1
      const char * const coinLogFileName)
d3769 1
a3769 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetCoinLogFileName");
d3772 2
a3773 2
      theWitRun->witSetCoinLogFileName (
         coinLogFileName);
@


1.61
log
@Continued implementation of opt with COIN.
@
text
@d557 1
a557 1
      float * routingShare)
d761 1
a761 1
      float * routingShare)
d3028 1
a3028 1
      float * routingShare)
d3552 1
a3552 1
      const float routingShare)
d3722 1
a3722 1
      const float routingShare)
d5145 1
a5145 1
      const float routingShare)
@


1.60
log
@Continued implementation of opt with COIN.
@
text
@d830 1
a830 1
WIT_DECLSPEC witReturnCode STDCALL witGetCoinMesgFileName (
d832 1
a832 1
      char * * coinMesgFileName)
d834 1
a834 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetCoinMesgFileName");
d837 2
a838 2
      theWitRun->witGetCoinMesgFileName (
         coinMesgFileName);
d3765 1
a3765 1
WIT_DECLSPEC witReturnCode STDCALL witSetCoinMesgFileName (
d3767 1
a3767 1
      const char * const coinMesgFileName)
d3769 1
a3769 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetCoinMesgFileName");
d3772 2
a3773 2
      theWitRun->witSetCoinMesgFileName (
         coinMesgFileName);
@


1.59
log
@Continued implementation of proportionate routing.
@
text
@d830 13
d3763 13
@


1.58
log
@Continued implementation of OSL postSolve recovery.
@
text
@a450 17
WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryExpShare (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      float * expShare)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryExpShare");

   return
      theWitRun->witGetBomEntryExpShare (
         operationName,
         bomEntryIndex,
         expShare);
   }

//------------------------------------------------------------------------------

d553 17
a671 17
WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryExpShare (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      float * expShare)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntryExpShare");

   return
      theWitRun->witGetBopEntryExpShare (
         operationName,
         bopEntryIndex,
         expShare);
   }

//------------------------------------------------------------------------------

d757 17
a2800 19
WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryExpShare (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * expShare)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryExpShare");

   return
      theWitRun->witGetSubsBomEntryExpShare (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expShare);
   }

//------------------------------------------------------------------------------

d3010 19
a3449 17
WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryExpShare (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const float expShare)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntryExpShare");

   return
      theWitRun->witSetBomEntryExpShare (
         operationName,
         bomEntryIndex,
         expShare);
   }

//------------------------------------------------------------------------------

d3535 17
a3653 17
WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryExpShare (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const float expShare)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetBopEntryExpShare");

   return
      theWitRun->witSetBopEntryExpShare (
         operationName,
         bopEntryIndex,
         expShare);
   }

//------------------------------------------------------------------------------

d3705 17
a4980 19
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryExpShare (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float expShare)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryExpShare");

   return
      theWitRun->witSetSubsBomEntryExpShare (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         expShare);
   }

//------------------------------------------------------------------------------

d5110 19
@


1.57
log
@Implemented OSL postSolve error recovery.
@
text
@d2564 13
@


1.56
log
@Continued implementation of proportionate routing.
@
text
@d4763 13
@


1.55
log
@Continued implementation of proportionate routing.
@
text
@d451 17
d553 17
d2788 19
d3437 17
d3522 17
d4951 19
@


1.54
log
@Continued implementation of proportionate routing.
@
text
@d2326 15
a2555 13
WIT_DECLSPEC witReturnCode STDCALL witGetPropRouting (
      WitRun * const theWitRun,
      witBoolean * propRouting)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetPropRouting");

   return
      theWitRun->witGetPropRouting (
         propRouting);
   }

//------------------------------------------------------------------------------

d4543 15
a4684 13
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetPropRouting (
      WitRun * const theWitRun,
      const witBoolean propRouting)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetPropRouting");

   return
      theWitRun->witSetPropRouting (
         propRouting);
@


1.53
log
@Began implementation of Proportionate Routing.
@
text
@d638 1
a638 1
WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryExpFactor (
d642 1
a642 1
      float * expFactor)
d644 1
a644 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntryExpFactor");
d647 1
a647 1
      theWitRun->witGetBopEntryExpFactor (
d650 1
a650 1
         expFactor);
d2541 13
d3552 1
a3552 1
WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryExpFactor (
d3556 1
a3556 1
      const float expFactor)
d3558 1
a3558 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBopEntryExpFactor");
d3561 1
a3561 1
      theWitRun->witSetBopEntryExpFactor (
d3564 1
a3564 1
         expFactor);
d4668 13
@


1.52
log
@Added API function witShutDownHeurAlloc.
@
text
@d638 17
d3535 17
@


1.51
log
@Replaced some C-style casts with C++ style casts.
@
text
@d5066 11
@


1.50
log
@added #include <defines.h> to fix compile error.
@
text
@a16 1
#include <defines.h>
@


1.49
log
@Internal changes.
@
text
@d17 1
@


1.48
log
@Continued implementation of execPenalties on BOM entries and subs.
@
text
@d3790 1
a3790 1
      const WitBoolean selForDel)
@


1.47
log
@Added penalties on BOM entries and substitutes to pen-exec.
@
text
@d434 17
a569 17
WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryUsePenalty (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      float * usePenalty)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryUsePenalty");

   return
      theWitRun->witGetBomEntryUsePenalty (
         operationName,
         bomEntryIndex,
         usePenalty);
   }

//------------------------------------------------------------------------------

d2665 19
a2968 19
WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryUsePenalty (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * usePenalty)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryUsePenalty");

   return
      theWitRun->witGetSubsBomEntryUsePenalty (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         usePenalty);
   }

//------------------------------------------------------------------------------

d3335 17
a3453 17
WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryUsePenalty (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const float usePenalty)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntryUsePenalty");

   return
      theWitRun->witSetBomEntryUsePenalty (
         operationName,
         bomEntryIndex,
         usePenalty);
   }

//------------------------------------------------------------------------------

d4747 19
a4970 19
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryUsePenalty (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float usePenalty)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryUsePenalty");

   return
      theWitRun->witSetSubsBomEntryUsePenalty (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         usePenalty);
@


1.46
log
@Continued implementation of user-specified heuristic starting solution.
@
text
@d553 17
d2950 19
d3437 17
d4952 19
@


1.45
log
@Continued implementation of heuristic initial solution.
@
text
@a1174 13
WIT_DECLSPEC witReturnCode STDCALL witGetHeurInitSoln (
      WitRun * const theWitRun,
      witBoolean * heurInitSoln)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetHeurInitSoln");

   return
      theWitRun->witGetHeurInitSoln (
         heurInitSoln);
   }

//------------------------------------------------------------------------------

d2985 13
a3861 13
WIT_DECLSPEC witReturnCode STDCALL witSetHeurInitSoln (
      WitRun * const theWitRun,
      const witBoolean heurInitSoln)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetHeurInitSoln");

   return
      theWitRun->witSetHeurInitSoln (
         heurInitSoln);
   }

//------------------------------------------------------------------------------

d4951 13
@


1.44
log
@Continued implementation of heuristic implosion from an initial solution.
Added some debugging code to Single-Source.
@
text
@d1175 1
a1175 1
WIT_DECLSPEC witReturnCode STDCALL witGetInitHeurSoln (
d1177 1
a1177 1
      witBoolean * initHeurSoln)
d1179 1
a1179 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetInitHeurSoln");
d1182 2
a1183 2
      theWitRun->witGetInitHeurSoln (
         initHeurSoln);
d3862 1
a3862 1
WIT_DECLSPEC witReturnCode STDCALL witSetInitHeurSoln (
d3864 1
a3864 1
      const witBoolean initHeurSoln)
d3866 1
a3866 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetInitHeurSoln");
d3869 2
a3870 2
      theWitRun->witSetInitHeurSoln (
         initHeurSoln);
@


1.43
log
@Began implementation of heuristic implosion from an initial solution.
@
text
@d1162 1
a1162 1
WIT_DECLSPEC witReturnCode STDCALL witGetHeurInitSoln (
d1164 1
a1164 1
      witBoolean * heurInitSoln)
d1166 1
a1166 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetHeurInitSoln");
d1169 2
a1170 2
      theWitRun->witGetHeurInitSoln (
         heurInitSoln);
d1175 1
a1175 1
WIT_DECLSPEC witReturnCode STDCALL witGetIndependentOffsets (
d1177 1
a1177 1
      witBoolean * independentOffsets)
d1179 1
a1179 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetIndependentOffsets");
d1182 2
a1183 2
      theWitRun->witGetIndependentOffsets (
         independentOffsets);
d3858 13
@


1.42
log
@Continued implementation of two-level lot sizes.
@
text
@d1162 13
@


1.41
log
@Continued implementation of two-level lot sizes.
@
text
@d1828 16
d4262 16
@


1.40
log
@Began implementation of opt implosion with lot sizes.
@
text
@d1653 32
d1701 16
d4138 32
d4182 16
@


1.39
log
@Continued implementation of Single-Source.
@
text
@d1809 13
d3142 1
a3142 1
  
d4179 13
@


1.38
log
@Continued implementation of single-source.
@
text
@d536 17
d3290 17
@


1.37
log
@Trivial update.
@
text
@a552 17
WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryByProduct (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      witBoolean * byProduct)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntryByProduct");

   return
      theWitRun->witGetBopEntryByProduct (
         operationName,
         bopEntryIndex,
         byProduct);
   }

//------------------------------------------------------------------------------

d940 18
a957 1
WIT_DECLSPEC WitReturnCode STDCALL witGetDemandSubVolPegging (
d961 1
a961 7
      const int shipPeriod,
      int * lenLists,
      char * * * operationNameList,
      int * * execPeriodList,
      int * * bomEntryIndexList,
      int * * subsBomEntryIndexList,
      float * * peggedSubVolList)
d963 1
a963 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandSubVolPegging");
d966 1
a966 1
      theWitRun->witGetDemandSubVolPegging (
d969 1
a969 7
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         bomEntryIndexList,
         subsBomEntryIndexList,
         peggedSubVolList);
d1008 1
a1008 1
WIT_DECLSPEC witReturnCode STDCALL witGetDemandSelForDel (
d1012 7
a1018 1
      int * shipLateLimit)
d1020 1
a1020 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandSelForDel");
d1023 1
a1023 1
      theWitRun->witGetDemandSelForDel (
d1026 7
a1032 18
         shipLateLimit);
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetDemandPriority (
      WitRun * const theWitRun,
      const char * const demandedPartName,
      const char * const demandName,
      int * * priority)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandPriority");

   return
      theWitRun->witGetDemandPriority (
         demandedPartName,
         demandName,
         priority);
d2228 15
d2258 15
d2288 15
a2332 30
WIT_DECLSPEC witReturnCode STDCALL witGetParts (
      WitRun * const theWitRun,
      int * lenPartList,
      char * * * partList)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetParts");

   return
      theWitRun->witGetParts (
         lenPartList,
         partList);
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartSelForDel (
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * selForDel)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartSelForDel");

   return
      theWitRun->witGetPartSelForDel (
         partName,
         selForDel);
   }

//------------------------------------------------------------------------------

d2801 1
a2801 1
WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntrySubVol (
d2806 1
a2806 1
      float * * subVol)
d2808 1
a2808 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntrySubVol");
d2811 1
a2811 1
      theWitRun->witGetSubsBomEntrySubVol (
d2815 1
a2815 1
         subVol);
d2820 1
a2820 1
WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntrySelForDel (
d2825 1
a2825 1
      witBoolean * selForDel)
d2827 1
a2827 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntrySelForDel");
d2830 1
a2830 1
      theWitRun->witGetSubsBomEntrySelForDel (
d2834 1
a2834 1
         selForDel);
a3293 17
WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryByProduct (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const witBoolean byProduct)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetBopEntryByProduct");

   return
      theWitRun->witSetBopEntryByProduct (
         operationName,
         bopEntryIndex,
         byProduct);
   }

//------------------------------------------------------------------------------

d3609 17
a3659 17
WIT_DECLSPEC witReturnCode STDCALL witSetDemandSelForDel (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const WitBoolean selForDel)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandSelForDel");

   return
      theWitRun->witSetDemandSelForDel (
         partName,
         demandName,
         selForDel);
   }

//------------------------------------------------------------------------------

d4240 30
a4303 15
WIT_DECLSPEC witReturnCode STDCALL witSetPartSelForDel (
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean selForDel)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartSelForDel");

   return
      theWitRun->witSetPartSelForDel (
         partName,
         selForDel);
   }

//------------------------------------------------------------------------------

d4664 1
a4664 1
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntrySubVol (
d4669 1
a4669 1
      const float * const subVol)
d4671 1
a4671 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntrySubVol");
d4674 1
a4674 1
      theWitRun->witSetSubsBomEntrySubVol (
d4678 1
a4678 1
         subVol);
d4683 1
a4683 1
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntrySelForDel (
d4688 1
a4688 1
      const witBoolean selForDel)
d4690 1
a4690 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntrySelForDel");
d4693 1
a4693 1
      theWitRun->witSetSubsBomEntrySelForDel (
d4697 1
a4697 1
         selForDel);
d5007 17
d5403 17
@


1.36
log
@Trivial update.
@
text
@d62 1
a62 1
      const char * const partName,
d69 1
a69 1
         partName,
d794 1
a794 1
      const char * const partName,
d802 1
a802 1
         partName,
d811 1
a811 1
      const char * const partName,
d821 1
a821 1
         partName,
d832 1
a832 1
      const char * const partName,
d840 1
a840 1
         partName,
d849 1
a849 1
      const char * const partName,
d861 1
a861 1
         partName,
d874 1
a874 1
      const char * const partName,
d882 1
a882 1
         partName,
d891 1
a891 1
      const char * const partName,
d899 1
a899 1
         partName,
d908 1
a908 1
      const char * const partName,
d916 1
a916 1
         partName,
d925 1
a925 1
      const char * const partName,
d933 1
a933 1
         partName,
d942 1
a942 1
      const char * const partName,
d950 1
a950 1
         partName,
d959 1
a959 1
      const char * const partName,
d973 1
a973 1
         partName,
d988 1
a988 1
      const char * const partName,
d996 1
a996 1
         partName,
d1005 1
a1005 1
      const char * const partName,
d1013 1
a1013 1
         partName,
d1022 1
a1022 1
      const char * const partName,
d1030 1
a1030 1
         partName,
d1039 1
a1039 1
      const char * const partName,
d1047 1
a1047 1
         partName,
d1440 1
a1440 1
      char * * partName,
d1447 1
a1447 1
         partName,
@


1.35
log
@Trivial update.
@
text
@d325 1
a325 1
      void ** appData)
d353 1
a353 1
      void ** appData)
d421 1
a421 1
      char ** consumedPartName)
d455 1
a455 1
      int ** impactPeriod)
d506 1
a506 1
      float ** offset)
d540 1
a540 1
      void ** appData)
d625 1
a625 1
      int ** impactPeriod)
d659 1
a659 1
      float ** offset)
d693 1
a693 1
      char ** producedPartName)
d778 2
a779 2
      char *** critPartList,
      int ** critPeriod)
d796 1
a796 1
      void ** appData)
d813 3
a815 3
      float ** hardLower,
      float ** softLower,
      float ** hardUpper)
d834 1
a834 1
      float ** demandVol)
d893 1
a893 1
      float ** fssShipVol)
d927 1
a927 1
      float ** obj1CumShipReward)
d944 1
a944 1
      float ** obj1ShipReward)
d1007 1
a1007 1
      float ** shipVol)
d1041 1
a1041 1
      int ** priority)
d1109 2
a1110 2
      char  *** partList,
      float *** shortageVolList )
d1203 1
a1203 1
      FILE ** mesgFile)
d1216 1
a1216 1
      char ** mesgFileAccessMode)
d1229 1
a1229 1
      char ** mesgFileName)
d1526 1
a1526 1
      void ** appData
d1542 3
a1544 3
      float ** hardLower,
      float ** softLower,
      float ** hardUpper)
d1577 1
a1577 1
      witBoolean ** execVol
d1593 1
a1593 1
      float ** execVol
d1624 1
a1624 1
      float ** fssExecVol
d1640 1
a1640 1
      float ** incLotSize
d1656 1
a1656 1
      float ** minLotSize
d1672 1
a1672 1
      float ** mrpExecVol
d1720 1
a1720 1
      float ** obj1ExecCost
d1752 1
a1752 1
      char *** operationList)
d1783 1
a1783 1
      float ** yieldRate
d1811 1
a1811 1
      char ** oslMesgFileName)
d1851 1
a1851 1
      void ** appData)
d1867 1
a1867 1
      char *** partNameList)
d1883 1
a1883 1
      int ** buildAheadUB)
d1928 1
a1928 1
      float ** consVol)
d1944 1
a1944 1
      char ** consumingOperationName,
d1963 1
a1963 1
      char ** consumingOperationName,
d1984 1
a1984 1
      char *** demandList)
d2015 1
a2015 1
      float ** excessVol)
d2045 1
a2045 1
      float ** shortageVol)
d2060 1
a2060 1
      float ** obj1ScrapCost)
d2075 1
a2075 1
      float ** obj1StockCost)
d2091 1
a2091 1
      char ** producingOperationName,
d2109 3
a2111 3
      float ** hardLower,
      float ** softLower,
      float ** hardUpper)
d2128 1
a2128 1
      float ** mrpConsVol)
d2143 1
a2143 1
      float ** mrpExcessVol)
d2158 1
a2158 1
      float ** mrpResidualVol)
d2218 1
a2218 1
      float ** reqVol)
d2233 1
a2233 1
      float ** residualVol)
d2248 1
a2248 1
      float ** scrapVol)
d2263 1
a2263 1
      float ** shadowPrice)
d2278 1
a2278 1
      float ** stockVol)
d2293 1
a2293 1
      float ** supplyVol)
d2308 1
a2308 1
      char *** partList)
d2485 1
a2485 1
      void ** appData)
d2523 1
a2523 1
      char ** consumedPart)
d2618 1
a2618 1
      float ** fssSubVol)
d2637 1
a2637 1
      int ** impactPeriod)
d2694 1
a2694 1
      float ** mrpSubVol)
d2732 1
a2732 1
      float ** obj1SubCost)
d2770 1
a2770 1
      float ** offset)
d2789 1
a2789 1
      float ** prodVol)
d2808 1
a2808 1
      float ** subVol)
d2997 1
a2997 1
      WitRun ** theWitRun)
d5125 1
a5125 1
      int ** yield
d5156 1
a5156 1
      float ** cycleTime)
d5171 1
a5171 1
      float ** incLotSize)
d5186 1
a5186 1
      float ** minLotSize)
d5201 1
a5201 1
      float ** mrpProdVol)
d5231 1
a5231 1
      float ** obj1ProdCost)
d5246 3
a5248 3
      float ** hardLower,
      float ** softLower,
      float ** hardUpper)
d5265 1
a5265 1
      float ** prodVol)
d5280 1
a5280 1
      int ** yield)
d5908 1
a5908 1
      void ** mem)
@


1.34
log
@Continued implementation of object iteration.
@
text
@d6047 1
a6053 1
WIT_DECLSPEC WIT_CONST witAttr WitINACTIVE               = "inactive";
@


1.33
log
@Continued implementation of object iteration.
@
text
@d134 1
a134 2
      WitRun * const theWitRun,
      witAttr * objItrState)
d139 1
a139 1
      theWitRun->witAdvanceObjItr (objItrState);
@


1.32
log
@Continued implementation of object iteration.
@
text
@d133 1
a133 1
WIT_DECLSPEC witReturnCode STDCALL witAdvanceItr (
d135 1
a135 1
      witAttr * curItrState)
d137 1
a137 1
   WitUtil::forbidNullWitRun (theWitRun, "witAdvanceItr");
d140 1
a140 1
      theWitRun->witAdvanceItr (curItrState);
a792 12
WIT_DECLSPEC witReturnCode STDCALL witGetCurItrState (
      WitRun * const theWitRun,
      witAttr * curItrState)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetCurItrState");

   return
      theWitRun->witGetCurItrState (curItrState);
   }

//------------------------------------------------------------------------------

a1188 88
WIT_DECLSPEC witReturnCode STDCALL witGetItrBomEntry (
      WitRun * const theWitRun,
      char * * consumingOperationName,
      int * bomEntryIndex)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetItrBomEntry");

   return
      theWitRun->witGetItrBomEntry (
         consumingOperationName,
         bomEntryIndex);
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetItrBopEntry (
      WitRun * const theWitRun,
      char * * producingOperationName,
      int * bopEntryIndex)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetItrBopEntry");

   return
      theWitRun->witGetItrBopEntry (
         producingOperationName,
         bopEntryIndex);
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetItrDemand (
      WitRun * const theWitRun,
      char * * partName,
      char * * demandName)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetItrDemand");

   return
      theWitRun->witGetItrDemand (
         partName,
         demandName);
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetItrOperation (
      WitRun * const theWitRun,
      char * * operationName)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetItrOperation");

   return
      theWitRun->witGetItrOperation (
         operationName);
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetItrSubsBomEntry (
      WitRun * const theWitRun,
      char * * consumingOperationName,
      int * bomEntryIndex,
      int * subsBomEntryIndex)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetItrSubsBomEntry");

   return
      theWitRun->witGetItrSubsBomEntry (
         consumingOperationName,
         bomEntryIndex,
         subsBomEntryIndex);
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetItrPart (
      WitRun * const theWitRun,
      char * * partName)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetItrPart");

   return
      theWitRun->witGetItrPart (
         partName);
   }

//------------------------------------------------------------------------------

a1324 13
WIT_DECLSPEC witReturnCode STDCALL witGetObjChoice (
      WitRun * const theWitRun,
      int * objChoice)
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetObjChoice");

   return
      theWitRun->witGetObjChoice (
         objChoice);
   }

//------------------------------------------------------------------------------

d1396 113
d3081 1
a3081 1
WIT_DECLSPEC witReturnCode STDCALL witResetItr (
d3084 1
a3084 1
   WitUtil::forbidNullWitRun (theWitRun, "witResetItr");
d3087 1
a3087 1
      theWitRun->witResetItr ();
@


1.31
log
@Continued implementation of object iteration.
@
text
@d18 1
a21 31
//------------------------------------------------------------------------------
//
// The MS V C++ V4.2 compiler reports:
//   error C2201: must have external linkage in order to be exported/imported
// when defining exported witAttr symbols to be of type const.
// This seems to be a compiler problem and can be avoided by not declaring
// these symbols to be const.  This is not desirable, but seems to be
// necessary. 
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//
// Examples of declaration and definition of global data.
//
// When building a wit.dll with MS V C++ V4.2:
//   Definition in api.C:
//     declspec (dllexport) witAttr WitNaccAfterSoftLB = "accAfterSoftLB";
//   Declaration in wit.h when included by internaly by wit:
//     extern declspec (dllexport) witAttr WitNaccAfterSoftLB;
//   Declaration in wit.h when included by wit applications: 
//     extern declspec (dllimport) witAttr WitNaccAfterSoftLB;
//
// All other builds:
//   Definition in api.C:
//     const witAttr WitNaccAfterSoftLB = "accAfterSoftLB";
//   Declaration in wit application and api applications:Definition in api.C:
//     extern const witAttr WitNaccAfterSoftLB;
//
//------------------------------------------------------------------------------

a25 105
WIT_DECLSPEC WIT_CONST witAttr WitNaccAfterSoftLB        = "accAfterSoftLB";
WIT_DECLSPEC WIT_CONST witAttr WitNaccAfterOptImp        = "accAfterOptImp";
WIT_DECLSPEC WIT_CONST witAttr WitNaccelerated           = "accelerated";
WIT_DECLSPEC WIT_CONST witAttr WitNautoPriority          = "autoPriority";
WIT_DECLSPEC WIT_CONST witAttr WitNbuildAheadLimit       = "buildAheadLimit";
WIT_DECLSPEC WIT_CONST witAttr WitNbuildWhenEmpty        = "buildWhenEmpty";
WIT_DECLSPEC WIT_CONST witAttr WitNcapCost               = "capCost";
WIT_DECLSPEC WIT_CONST witAttr WitNcomputeCriticalList   =
                                  "computeCriticalList";
WIT_DECLSPEC WIT_CONST witAttr WitNcumShipBounds         = "cumShipBounds";
WIT_DECLSPEC WIT_CONST witAttr WitNcycleTime             = "cycleTime";
WIT_DECLSPEC WIT_CONST witAttr WitNearliestPeriod        = "earliestPeriod";
WIT_DECLSPEC WIT_CONST witAttr WitNequitability          = "equitability";
WIT_DECLSPEC WIT_CONST witAttr WitNfallout               = "fallout";
WIT_DECLSPEC WIT_CONST witAttr WitNfeasible              = "feasible";
WIT_DECLSPEC WIT_CONST witAttr WitNgrossRev              = "grossRev";
WIT_DECLSPEC WIT_CONST witAttr WitNhashTableSize         = "hashTableSize";
WIT_DECLSPEC WIT_CONST witAttr WitNincLotSize            = "incLotSize";
WIT_DECLSPEC WIT_CONST witAttr WitNinvCost               = "invCost";
WIT_DECLSPEC WIT_CONST witAttr WitNlatestPeriod          = "latestPeriod";
WIT_DECLSPEC WIT_CONST witAttr WitNmandEC                = "mandEC";
WIT_DECLSPEC WIT_CONST witAttr WitNmessageFile           = "messageFile";
WIT_DECLSPEC WIT_CONST witAttr WitNmessageFileAccessMode =
                                  "messageFileAccessMode";
WIT_DECLSPEC WIT_CONST witAttr WitNmessageFileName       = "messageFileName";
WIT_DECLSPEC WIT_CONST witAttr WitNminLotSize            = "minLotSize";
WIT_DECLSPEC WIT_CONST witAttr WitNnPeriods              = "nPeriods";
WIT_DECLSPEC WIT_CONST witAttr WitNobj1CumShipReward     = "obj1CumShipReward";
WIT_DECLSPEC WIT_CONST witAttr WitNobj1ShipReward        = "obj1ShipReward";
WIT_DECLSPEC WIT_CONST witAttr WitNobj1ProdCost          = "obj1ProdCost";
WIT_DECLSPEC WIT_CONST witAttr WitNobj1ScrapCost         = "obj1ScrapCost";
WIT_DECLSPEC WIT_CONST witAttr WitNobj1StockCost         = "obj1StockCost";
WIT_DECLSPEC WIT_CONST witAttr WitNobj1SubCost           = "obj1SubCost";
WIT_DECLSPEC WIT_CONST witAttr WitNobj2SubPenalty        = "obj2SubPenalty";
WIT_DECLSPEC WIT_CONST witAttr WitNobj2Winv              = "obj2Winv";
WIT_DECLSPEC WIT_CONST witAttr WitNobj2Wrev              = "obj2Wrev";
WIT_DECLSPEC WIT_CONST witAttr WitNobj2Wserv             = "obj2Wserv";
WIT_DECLSPEC WIT_CONST witAttr WitNobj2Wsub              = "obj2Wsub";
WIT_DECLSPEC WIT_CONST witAttr WitNobjChoice             = "objChoice";
WIT_DECLSPEC WIT_CONST witAttr WitNoffset                = "offset";
WIT_DECLSPEC WIT_CONST witAttr WitNoptInitMethod         = "optInitMethod";
WIT_DECLSPEC WIT_CONST witAttr WitNoslMessageFileName    = "oslMessageFileName";
WIT_DECLSPEC WIT_CONST witAttr WitNoutputPrecision       = "outputPrecision";
WIT_DECLSPEC WIT_CONST witAttr WitNpartBomSubsProdSched  =
                                  "partBomSubsProdSched";
WIT_DECLSPEC WIT_CONST witAttr WitNpartDemandShipSched   =
                                  "partDemandShipSched";
WIT_DECLSPEC WIT_CONST witAttr WitNpartProdSched         = "partProdSched";
WIT_DECLSPEC WIT_CONST witAttr WitNpartShipSched         = "partShipSched";
WIT_DECLSPEC WIT_CONST witAttr WitNperiodsPerYear        = "periodsPerYear";
WIT_DECLSPEC WIT_CONST witAttr WitNpreprocessed          = "preprocessed";
WIT_DECLSPEC WIT_CONST witAttr WitNprintMessageNumber    = "printMessageNumber";
WIT_DECLSPEC WIT_CONST witAttr WitNpriority              = "priority";
WIT_DECLSPEC WIT_CONST witAttr WitNprodBounds            = "prodBounds";
WIT_DECLSPEC WIT_CONST witAttr WitNprodVol               = "prodVol";
WIT_DECLSPEC WIT_CONST witAttr WitNpostprocessed         = "postprocessed";
WIT_DECLSPEC WIT_CONST witAttr WitNdemandVol             = "demandVol";
WIT_DECLSPEC WIT_CONST witAttr WitNreqVol                = "reqVol";
WIT_DECLSPEC WIT_CONST witAttr WitNshipLateLimit         = "shipLateLimit";
WIT_DECLSPEC WIT_CONST witAttr WitNshipVol               = "shipVol";
WIT_DECLSPEC WIT_CONST witAttr WitNstockBounds           = "stockBounds";
WIT_DECLSPEC WIT_CONST witAttr WitNstopRunning           = "stopRunning";
WIT_DECLSPEC WIT_CONST witAttr WitNsupplyVol             = "supplyVol";
WIT_DECLSPEC WIT_CONST witAttr WitNtimesPrint            = "timesPrint";
WIT_DECLSPEC WIT_CONST witAttr WitNtitle                 = "title";
WIT_DECLSPEC WIT_CONST witAttr WitNusageRate             = "usageRate";
WIT_DECLSPEC WIT_CONST witAttr WitNunitCost              = "unitCost";
WIT_DECLSPEC WIT_CONST witAttr WitNusageTime             = "usageTime";
WIT_DECLSPEC WIT_CONST witAttr WitNwbounds               = "wbounds";
WIT_DECLSPEC WIT_CONST witAttr WitNyield                 = "yield";


WIT_DECLSPEC WIT_CONST witAttr WitSTDOUT                 = "stdout";
WIT_DECLSPEC WIT_CONST witAttr WitSTDIN                  = "stdin";

WIT_DECLSPEC WIT_CONST witAttr WitRAW                    = "RAW";
WIT_DECLSPEC WIT_CONST witAttr WitPRODUCT                = "PRODUCT";

WIT_DECLSPEC WIT_CONST witAttr WitCAPACITY               = "CAPACITY";
WIT_DECLSPEC WIT_CONST witAttr WitMATERIAL               = "MATERIAL";

WIT_DECLSPEC WIT_CONST int WitINFORMATIONAL_MESSAGES     = -1;
WIT_DECLSPEC WIT_CONST int WitWARNING_MESSAGES           = -2;
WIT_DECLSPEC WIT_CONST int WitSEVERE_MESSAGES            = -3;

WIT_DECLSPEC WIT_CONST witReturnCode WitINFORMATIONAL_RC = 0;
WIT_DECLSPEC WIT_CONST witReturnCode WitWARNING_RC       = 1;
WIT_DECLSPEC WIT_CONST witReturnCode WitSEVERE_RC        = 3;
WIT_DECLSPEC WIT_CONST witReturnCode WitFATAL_RC         = 4;

WIT_DECLSPEC WIT_CONST witFileFormat WitBSV              = "bsv";
WIT_DECLSPEC WIT_CONST witFileFormat WitCSV              = "csv";

WIT_DECLSPEC WIT_CONST witAttr WitACC_OPT_INIT_METHOD    = "accOptInitMethod";
WIT_DECLSPEC WIT_CONST witAttr WitHEUR_OPT_INIT_METHOD   = "heurOptInitMethod";
WIT_DECLSPEC WIT_CONST witAttr WitSCHED_OPT_INIT_METHOD  = "schedOptInitMethod";
WIT_DECLSPEC WIT_CONST witAttr WitCRASH_OPT_INIT_METHOD  = "crashOptInitMethod";

WIT_DECLSPEC WIT_CONST witAttr WitITR_AT_PART            = "itrAtPart";
WIT_DECLSPEC WIT_CONST witAttr WitITR_AT_DEMAND          = "itrAtDemand";
WIT_DECLSPEC WIT_CONST witAttr WitITR_AT_OPERATION       = "itrAtOperation";
WIT_DECLSPEC WIT_CONST witAttr WitITR_AT_BOM_ENTRY       = "itrAtBomEntry";
WIT_DECLSPEC WIT_CONST witAttr WitITR_AT_SUB_ENTRY       = "itrAtSubEntry";
WIT_DECLSPEC WIT_CONST witAttr WitITR_AT_BOP_ENTRY       = "itrAtBopEntry";

d33 1
a33 2
      const char * const consumedPartName
      )
d40 1
a40 2
         consumedPartName
         );
d48 1
a48 2
      const char * const producedPartName
      )
d55 1
a55 2
         producedPartName
         );
d63 1
a63 2
      const char * const demandName
      )
d70 1
a70 2
         demandName
         );
d77 1
a77 2
      const char * const operationName
      )
d83 1
a83 2
         operationName
         );
d91 1
a91 2
      const witAttr partCategory
      )
d98 1
a98 2
         partCategory
         );
d105 1
a105 2
      const char * const partAndOperationName
      )
d111 1
a111 2
         partAndOperationName
         );
d120 1
a120 2
      const char * const consumedPartName
      )
d128 1
a128 2
         consumedPartName
         );
d133 12
d146 1
a146 2
      WitRun * const theWitRun
      )
d158 1
a158 2
      WitRun * const srcWitRun
      )
d163 1
a163 2
         srcWitRun
         );
d169 1
a169 2
      WitRun * theWitRun
      )
d179 1
a179 2
      const char * const fileName
      )
d185 1
a185 2
         fileName
         );
d197 1
a197 2
      float * * incVolList
      )
d208 1
a208 2
         incVolList
         );
d221 1
a221 2
      const witBoolean * const asapMultiExecList
      )
d233 1
a233 2
         asapMultiExecList
         );
d241 1
a241 2
      WitRun * const theWitRun
      )
d254 1
a254 2
      WitRun * const theWitRun
      )
d265 1
a265 2
      void * mem
      )
d275 1
a275 2
      WitRun * const theWitRun
      )
d287 1
a287 2
      witBoolean * accAfterSoftLB
      )
d293 1
a293 2
         accAfterSoftLB
         );
d300 1
a300 2
      witBoolean * accAfterOptImp
      )
d306 1
a306 2
         accAfterOptImp
         );
d313 1
a313 2
      witBoolean * accelerated
      )
d319 1
a319 2
         accelerated
         );
d326 1
a326 2
      void ** appData
      )
d332 1
a332 2
         appData
         );
d339 1
a339 2
      witBoolean * autoPriority
      )
d345 1
a345 2
         autoPriority
         );
d354 1
a354 2
      void ** appData
      )
d362 1
a362 2
         appData
         );
d371 1
a371 2
      float * * consRate
      )
d379 1
a379 2
         consRate
         );
d388 1
a388 2
      int * earliestPeriod
      )
d396 1
a396 2
         earliestPeriod
         );
d405 1
a405 2
      int * nSubsBomEntries
      )
d413 1
a413 2
         nSubsBomEntries
         );
d422 1
a422 2
      char ** consumedPartName
      )
d430 1
a430 2
         consumedPartName
         );
d439 1
a439 2
      float * falloutRate
      )
d447 1
a447 2
         falloutRate
         );
d456 1
a456 2
      int ** impactPeriod
      )
d464 1
a464 2
         impactPeriod
         );
d473 1
a473 2
      int * latestPeriod
      )
d481 1
a481 2
         latestPeriod
         );
d490 1
a490 2
      witBoolean * mandEC
      )
d498 1
a498 2
         mandEC
         );
d507 1
a507 2
      float ** offset
      )
d515 1
a515 2
         offset
         );
d524 1
a524 2
      witBoolean * selForDel
      )
d532 1
a532 2
         selForDel
         );
d541 1
a541 2
      void ** appData
      )
d549 1
a549 2
         appData
         );
d558 1
a558 2
      witBoolean * byProduct
      )
d566 1
a566 2
         byProduct
         );
d575 1
a575 2
      int * earliestPeriod
      )
d583 1
a583 2
         earliestPeriod
         );
d592 1
a592 2
      witBoolean * expAllowed
      )
d600 1
a600 2
         expAllowed
         );
d609 1
a609 2
      float * expAversion
      )
d617 1
a617 2
         expAversion
         );
d626 1
a626 2
      int ** impactPeriod
      )
d634 1
a634 2
         impactPeriod
         );
d643 1
a643 2
      int * latestPeriod
      )
d651 1
a651 2
         latestPeriod
         );
d660 1
a660 2
      float ** offset
      )
d668 1
a668 2
         offset
         );
d677 1
a677 2
      float * * productRate
      )
d685 1
a685 2
         productRate
         );
d694 1
a694 2
      char ** producedPartName
      )
d702 1
a702 2
         producedPartName
         );
d711 1
a711 2
      witBoolean * selForDel
      )
d719 1
a719 2
         selForDel
         );
d726 1
a726 2
      witBoolean * buildWhenEmpty
      )
d732 1
a732 2
         buildWhenEmpty
         );
d739 1
a739 2
      witBoolean * computeCriticalList
      )
d745 1
a745 2
         computeCriticalList
         );
d752 1
a752 2
      float * capCost
      )
d758 1
a758 2
         capCost
         );
d765 1
a765 2
      witBoolean * compPrices
      )
d771 1
a771 2
         compPrices
         );
d780 1
a780 2
      int ** critPeriod
      )
d788 1
a788 2
         critPeriod
         );
d793 12
d809 1
a809 2
      void ** appData
      )
d817 1
a817 2
         appData
         );
d828 1
a828 2
      float ** hardUpper
      )
d838 1
a838 2
         hardUpper
         );
d847 1
a847 2
      float ** demandVol
      )
d855 1
a855 2
         demandVol
         );
d868 1
a868 2
      float * * peggedExecVolList
      )
d880 1
a880 2
         peggedExecVolList
         );
d889 1
a889 2
      int * focusHorizon
      )
d897 1
a897 2
         focusHorizon
         );
d906 1
a906 2
      float ** fssShipVol
      )
d914 1
a914 2
         fssShipVol
         );
d923 1
a923 2
      float * grossRev
      )
d931 1
a931 2
         grossRev
         );
d940 1
a940 2
      float ** obj1CumShipReward
      )
d948 1
a948 2
         obj1CumShipReward
         );
d957 1
a957 2
      float ** obj1ShipReward
      )
d965 1
a965 2
         obj1ShipReward
         );
d980 1
a980 2
      float * * peggedSubVolList
      )
d994 1
a994 2
         peggedSubVolList
         );
d1003 1
a1003 2
      int * * shipLateUB
      )
d1011 1
a1011 2
         shipLateUB
         );
d1020 1
a1020 2
      float ** shipVol
      )
d1028 1
a1028 2
         shipVol
         );
d1037 1
a1037 2
      int * shipLateLimit
      )
d1045 1
a1045 2
         shipLateLimit
         );
d1054 1
a1054 2
      int ** priority
      )
d1062 1
a1062 2
         priority
         );
d1069 1
a1069 2
      int * equitablity
      )
d1075 1
a1075 2
         equitablity
         );
d1082 1
a1082 2
      witBoolean * execEmptyBom
      )
d1088 1
a1088 2
         execEmptyBom
         );
d1095 1
a1095 2
      float * expCutoff
      )
d1101 1
a1101 2
         expCutoff
         );
d1108 1
a1108 2
      witBoolean * feasible
      )
d1114 1
a1114 2
         feasible
         );
d1131 1
a1131 2
         shortageVolList
         );
d1138 1
a1138 2
      witBoolean * forcedMultiEq
      )
d1144 1
a1144 2
         forcedMultiEq
         );
d1151 1
a1151 2
      int * hashTableSize
      )
d1157 1
a1157 2
         hashTableSize
         );
d1164 1
a1164 2
      witBoolean * heurAllocActive
      )
d1170 1
a1170 2
         heurAllocActive
         );
d1177 1
a1177 2
      witBoolean * independentOffsets
      )
d1183 1
a1183 2
         independentOffsets
         );
d1190 1
a1190 2
      float * invCost
      )
d1196 1
a1196 2
         invCost
         );
d1201 88
d1291 1
a1291 2
      float * lotSizeTol
      )
d1297 1
a1297 2
         lotSizeTol
         );
d1304 1
a1304 2
      FILE ** mesgFile
      )
d1310 1
a1310 2
         mesgFile
         );
d1317 1
a1317 2
      char ** mesgFileAccessMode
      )
d1323 1
a1323 2
         mesgFileAccessMode
         );
d1330 1
a1330 2
      char ** mesgFileName
      )
d1336 1
a1336 2
         mesgFileName
         );
d1344 1
a1344 2
      witBoolean * mesgPrintMunber
      )
d1351 1
a1351 2
         mesgPrintMunber
         );
d1359 1
a1359 2
      witBoolean * mesgStopRunning
      )
d1366 1
a1366 2
         mesgStopRunning
         );
d1374 1
a1374 2
      int * mesgTimesPrint
      )
d1381 1
a1381 2
         mesgTimesPrint
         );
d1388 1
a1388 2
      witBoolean * multiExec
      )
d1394 1
a1394 2
         multiExec
         );
d1401 1
a1401 2
      witBoolean * multiRoute
      )
d1407 1
a1407 2
         multiRoute
         );
d1414 1
a1414 2
      int * nPeriods
      )
d1420 1
a1420 2
         nPeriods
         );
d1427 1
a1427 2
      int * objChoice
      )
d1433 1
a1433 2
         objChoice
         );
d1443 1
a1443 2
      float * subsValue
      )
d1452 1
a1452 2
         subsValue
         );
d1459 1
a1459 2
      float * obj2Winv
      )
d1465 1
a1465 2
         obj2Winv
         );
d1472 1
a1472 2
      float * obj2Wrev
      )
d1478 1
a1478 2
         obj2Wrev
         );
d1485 1
a1485 2
      float * obj2Wserv
      )
d1491 1
a1491 2
         obj2Wserv
         );
d1498 1
a1498 2
      float * obj2Wsub
      )
d1504 1
a1504 2
         obj2Wsub
         );
d1512 1
a1512 2
      float * boundsValue
      )
d1519 1
a1519 2
         boundsValue
         );
d1528 1
a1528 2

      )
d1535 1
a1535 2
         appData
         );
d1545 1
a1545 2
      float ** hardUpper
      )
d1554 1
a1554 2
         hardUpper
         );
d1563 1
a1563 2

      )
d1570 1
a1570 2
         execPenalty
         );
d1579 1
a1579 2

      )
d1586 1
a1586 2
         execVol
         );
d1595 1
a1595 2

      )
d1602 1
a1602 2
         execVol
         );
d1610 1
a1610 2
      witBoolean * exist
      )
d1617 1
a1617 2
         exist
         );
d1626 1
a1626 2

      )
d1633 1
a1633 2
         fssExecVol
         );
d1642 1
a1642 2

      )
d1649 1
a1649 2
         incLotSize
         );
d1658 1
a1658 2

      )
d1665 1
a1665 2
         minLotSize
         );
d1674 1
a1674 2

      )
d1681 1
a1681 2
         mrpExecVol
         );
d1690 1
a1690 2

      )
d1697 1
a1697 2
         nBomEntries
         );
d1706 1
a1706 2

      )
d1713 1
a1713 2
         nBopEntries
         );
d1722 1
a1722 2

      )
d1729 1
a1729 2
         obj1ExecCost
         );
d1738 1
a1738 2

      )
d1745 1
a1745 2
         obj2AuxCost
         );
d1753 1
a1753 2
      char *** operationList
      )
d1760 1
a1760 2
         operationList
         );
d1769 1
a1769 2

      )
d1776 1
a1776 2
         selForDel
         );
d1785 1
a1785 2

      )
d1792 1
a1792 2
         yieldRate
         );
d1799 1
a1799 2
      witAttr * optInitMethod
      )
d1805 1
a1805 2
         optInitMethod
         );
d1812 1
a1812 2
      char ** oslMesgFileName
      )
d1818 1
a1818 2
         oslMesgFileName
         );
d1825 1
a1825 2
      int * outputPrecision
      )
d1831 1
a1831 2
         outputPrecision
         );
d1838 1
a1838 2
      witBoolean * postprocessed
      )
d1844 1
a1844 2
         postprocessed
         );
d1852 1
a1852 2
      void ** appData
      )
d1859 1
a1859 2
         appData
         );
d1868 1
a1868 2
      char *** partNameList
      )
d1876 1
a1876 2
         partNameList
         );
d1884 1
a1884 2
      int ** buildAheadUB
      )
d1891 1
a1891 2
         buildAheadUB
         );
d1899 1
a1899 2
      witBoolean * buildAsap
      )
d1906 1
a1906 2
         buildAsap
         );
d1914 1
a1914 2
      witBoolean * buildNstn
      )
d1921 1
a1921 2
         buildNstn
         );
d1929 1
a1929 2
      float ** consVol
      )
d1936 1
a1936 2
         consVol
         );
d1946 1
a1946 2
      int * bomEntryIndex
      )
d1955 1
a1955 2
         bomEntryIndex
         );
d1966 1
a1966 2
      int * subsBomEntryIndex
      )
d1976 1
a1976 2
         subsBomEntryIndex
         );
d1985 1
a1985 2
      char *** demandList
      )
d1993 1
a1993 2
         demandList
         );
d2001 1
a2001 2
      witAttr * category
      )
d2008 1
a2008 2
         category
         );
d2016 1
a2016 2
      float ** excessVol
      )
d2023 1
a2023 2
         excessVol
         );
d2031 1
a2031 2
      witBoolean * exist
      )
d2038 1
a2038 2
         exist
         );
d2046 1
a2046 2
      float ** shortageVol
      )
d2053 1
a2053 2
         shortageVol
         );
d2061 1
a2061 2
      float ** obj1ScrapCost
      )
d2068 1
a2068 2
         obj1ScrapCost
         );
d2076 1
a2076 2
      float ** obj1StockCost
      )
d2083 1
a2083 2
         obj1StockCost
         );
d2093 1
a2093 2
      int * bopEntryIndex
      )
d2102 1
a2102 2
         bopEntryIndex
         );
d2112 1
a2112 2
      float ** hardUpper
      )
d2121 1
a2121 2
         hardUpper
         );
d2129 1
a2129 2
      float ** mrpConsVol
      )
d2136 1
a2136 2
         mrpConsVol
         );
d2144 1
a2144 2
      float ** mrpExcessVol
      )
d2151 1
a2151 2
         mrpExcessVol
         );
d2159 1
a2159 2
      float ** mrpResidualVol
      )
d2166 1
a2166 2
         mrpResidualVol
         );
d2174 1
a2174 2
      int * nConsumingBomEntries
      )
d2181 1
a2181 2
         nConsumingBomEntries
         );
d2189 1
a2189 2
      int * nConsumingSubsBomEntries
      )
d2196 1
a2196 2
         nConsumingSubsBomEntries
         );
d2204 1
a2204 2
      int * nProducingBopEntries
      )
d2211 1
a2211 2
         nProducingBopEntries
         );
d2219 1
a2219 2
      float ** reqVol
      )
d2226 1
a2226 2
         reqVol
         );
d2234 1
a2234 2
      float ** residualVol
      )
d2241 1
a2241 2
         residualVol
         );
d2249 1
a2249 2
      float ** scrapVol
      )
d2256 1
a2256 2
         scrapVol
         );
d2264 1
a2264 2
      float ** shadowPrice
      )
d2271 1
a2271 2
         shadowPrice
         );
d2279 1
a2279 2
      float ** stockVol
      )
d2286 1
a2286 2
         stockVol
         );
d2294 1
a2294 2
      float ** supplyVol
      )
d2301 1
a2301 2
         supplyVol
         );
d2309 1
a2309 2
      char *** partList
      )
d2316 1
a2316 2
         partList
         );
d2324 1
a2324 2
      witBoolean * selForDel
      )
d2331 1
a2331 2
         selForDel
         );
d2339 1
a2339 2
      float * unitCost
      )
d2346 1
a2346 2
         unitCost
         );
d2353 1
a2353 2
      witBoolean * penExec
      )
d2359 1
a2359 2
         penExec
         );
d2366 1
a2366 2
      witBoolean * perfPegging
      )
d2372 1
a2372 2
         perfPegging
         );
d2379 1
a2379 2
      float * periodsPerYear
      )
d2385 1
a2385 2
         periodsPerYear
         );
d2392 1
a2392 2
      witBoolean * prefHighStockSLBs
      )
d2398 1
a2398 2
         prefHighStockSLBs
         );
d2405 1
a2405 2
      witBoolean * preprocessed
      )
d2411 1
a2411 2
         preprocessed
         );
d2418 1
a2418 2
      witBoolean * respectStockSLBs
      )
d2424 1
a2424 2
         respectStockSLBs
         );
d2431 1
a2431 2
      witBoolean * roundReqVols
      )
d2437 1
a2437 2
         roundReqVols
         );
d2444 1
a2444 2
      witBoolean * selSplit
      )
d2450 1
a2450 2
         selSplit
         );
d2457 1
a2457 2
      witBoolean * skipFailures
      )
d2463 1
a2463 2
         skipFailures
         );
d2470 1
a2470 2
      witBoolean * stockReallocation
      )
d2476 1
a2476 2
         stockReallocation
         );
d2486 1
a2486 2
      void ** appData
      )
d2495 1
a2495 2
         appData
         );
d2505 1
a2505 2
      float * * consRate
      )
d2514 1
a2514 2
         consRate
         );
d2524 1
a2524 2
      char ** consumedPart
      )
d2533 1
a2533 2
         consumedPart
         );
d2543 1
a2543 2
      int * earliestPeriod
      )
d2552 1
a2552 2
         earliestPeriod
         );
d2562 1
a2562 2
      witBoolean * expAllowed
      )
d2571 1
a2571 2
         expAllowed
         );
d2581 1
a2581 2
      float * expNetAversion
      )
d2590 1
a2590 2
         expNetAversion
         );
d2600 1
a2600 2
      float * falloutRate
      )
d2609 1
a2609 2
         falloutRate
         );
d2619 1
a2619 2
      float ** fssSubVol
      )
d2628 1
a2628 2
         fssSubVol
         );
d2638 1
a2638 2
      int ** impactPeriod
      )
d2647 1
a2647 2
         impactPeriod
         );
d2657 1
a2657 2
      int * latestPeriod
      )
d2666 1
a2666 2
         latestPeriod
         );
d2676 1
a2676 2
      witBoolean * mrpNetAllowed
      )
d2685 1
a2685 2
         mrpNetAllowed
         );
d2695 1
a2695 2
      float ** mrpSubVol
      )
d2704 1
a2704 2
         mrpSubVol
         );
d2714 1
a2714 2
      witBoolean * netAllowed
      )
d2723 1
a2723 2
         netAllowed
         );
d2733 1
a2733 2
      float ** obj1SubCost
      )
d2742 1
a2742 2
         obj1SubCost
         );
d2752 1
a2752 2
      float * obj2SubPenalty
      )
d2761 1
a2761 2
         obj2SubPenalty
         );
d2771 1
a2771 2
      float ** offset
      )
d2780 1
a2780 2
         offset
         );
d2790 1
a2790 2
      float ** prodVol
      )
d2799 1
a2799 2
         prodVol
         );
d2809 1
a2809 2
      float ** subVol
      )
d2818 1
a2818 2
         subVol
         );
d2828 1
a2828 2
      witBoolean * selForDel
      )
d2837 1
a2837 2
         selForDel
         );
d2844 1
a2844 2
      char * * title
      )
d2850 1
a2850 2
         title
         );
d2857 1
a2857 2
      witBoolean * truncOffsets
      )
d2863 1
a2863 2
         truncOffsets
         );
d2870 1
a2870 2
      witBoolean * twoWayMultiExec
      )
d2876 1
a2876 2
         twoWayMultiExec
         );
d2883 1
a2883 2
      witBoolean * useFocusHorizons
      )
d2889 1
a2889 2
         useFocusHorizons
         );
d2896 1
a2896 2
      float * wbounds
      )
d2902 1
a2902 2
         wbounds
         );
d2909 1
a2909 2
      witBoolean * wit34Compatible
      )
d2915 1
a2915 2
         wit34Compatible
         );
d2921 1
a2921 2
      WitRun * const theWitRun
      )
d2937 1
a2937 2
      float * incVol
      )
d2947 1
a2947 2
         incVol
         );
d2959 1
a2959 2
      witBoolean asapMultiExec
      )
d2970 1
a2970 2
         asapMultiExec
         );
d2976 1
a2976 2
      WitRun * const theWitRun
      )
d2987 1
a2987 2
      WitRun * const theWitRun
      )
d2998 1
a2998 2
      WitRun ** theWitRun
      )
d3012 1
a3012 2
      WitRun * const theWitRun
      )
d3023 1
a3023 2
      WitRun * const theWitRun
      )
d3036 1
a3036 2
      WitRun * const theWitRun
      )
d3047 1
a3047 2
      WitRun * const theWitRun
      )
d3058 1
a3058 2
      WitRun * const theWitRun
      )
d3070 1
a3070 2
      const char * const fileName
      )
d3076 1
a3076 2
         fileName
         );
d3081 11
d3094 1
a3094 2
      const witBoolean accAfterSoftLB
      )
d3100 1
a3100 2
         accAfterSoftLB
         );
d3107 1
a3107 2
      const witBoolean accAfterOptImp
      )
d3113 1
a3113 2
         accAfterOptImp
         );
d3120 1
a3120 2
      void * const appData
      )
d3126 1
a3126 2
         appData
         );
d3133 1
a3133 2
      const witBoolean autoPriority
      )
d3139 1
a3139 2
         autoPriority
         );
d3148 1
a3148 2
      void * const appData
      )
d3156 1
a3156 2
         appData
         );
d3165 1
a3165 2
      const float * consRate
      )
d3173 1
a3173 2
         consRate
         );
d3182 1
a3182 2
      const int earliestPeriod
      )
d3190 1
a3190 2
         earliestPeriod
         );
d3199 1
a3199 2
      const float falloutRate
      )
d3207 1
a3207 2
         falloutRate
         );
d3216 1
a3216 2
      const int latestPeriod
      )
d3224 1
a3224 2
         latestPeriod
         );
d3233 1
a3233 2
      const witBoolean mandEC
      )
d3241 1
a3241 2
         mandEC
         );
d3250 1
a3250 2
      const float * const offset
      )
d3258 1
a3258 2
         offset
         );
d3267 1
a3267 2
      const witBoolean selForDel
      )
d3275 1
a3275 2
         selForDel
         );
d3284 1
a3284 2
      void * const appData
      )
d3292 1
a3292 2
         appData
         );
d3301 1
a3301 2
      const witBoolean byProduct
      )
d3309 1
a3309 2
         byProduct
         );
d3318 1
a3318 2
      const int earliestPeriod
      )
d3326 1
a3326 2
         earliestPeriod
         );
d3335 1
a3335 2
      const witBoolean expAllowed
      )
d3343 1
a3343 2
         expAllowed
         );
d3352 1
a3352 2
      const float expAversion
      )
d3360 1
a3360 2
         expAversion
         );
d3369 1
a3369 2
      const int latestPeriod
      )
d3377 1
a3377 2
         latestPeriod
         );
d3386 1
a3386 2
      const float * const offset
      )
d3394 1
a3394 2
         offset
         );
d3403 1
a3403 2
      const float * productRate
      )
d3411 1
a3411 2
         productRate
         );
d3420 1
a3420 2
      const witBoolean selForDel
      )
d3428 1
a3428 2
         selForDel
         );
d3435 1
a3435 2
      const float capCost
      )
d3441 1
a3441 2
         capCost
         );
d3448 1
a3448 2
      const witBoolean compPrices
      )
d3454 1
a3454 2
         compPrices
         );
d3461 1
a3461 2
      const witBoolean computCriticalList
      )
d3467 1
a3467 2
         computCriticalList
         );
d3476 1
a3476 2
      void * const appData
      )
d3484 1
a3484 2
         appData
         );
d3495 1
a3495 2
      const float * const hardUpper
      )
d3505 1
a3505 2
         hardUpper
         );
d3514 1
a3514 2
      const float * const iDemandVol
      )
d3522 1
a3522 2
         iDemandVol
         );
d3531 1
a3531 2
      const int focusHorizon
      )
d3539 1
a3539 2
         focusHorizon
         );
d3548 1
a3548 2
      const float * const fssShipVol
      )
d3556 1
a3556 2
         fssShipVol
         );
d3565 1
a3565 2
      const float grossRev
      )
d3573 1
a3573 2
         grossRev
         );
d3582 1
a3582 2
      const float * const obj1CumShipReward
      )
d3590 1
a3590 2
         obj1CumShipReward
         );
d3599 1
a3599 2
      const float * const obj1ShipReward
      )
d3607 1
a3607 2
         obj1ShipReward
         );
d3616 1
a3616 2
      const int * const priority
      )
d3624 1
a3624 2
         priority
         );
d3633 1
a3633 2
      const int * shipLateUB
      )
d3641 1
a3641 2
         shipLateUB
         );
d3650 1
a3650 2
      const float * const shipVol
      )
d3658 1
a3658 2
         shipVol
         );
d3667 1
a3667 2
      const WitBoolean selForDel
      )
d3675 1
a3675 2
         selForDel
         );
d3682 1
a3682 2
      const int equitablity
      )
d3688 1
a3688 2
         equitablity
         );
d3695 1
a3695 2
      const witBoolean execEmptyBom
      )
d3701 1
a3701 2
         execEmptyBom
         );
d3708 1
a3708 2
      const float expCutoff
      )
d3714 1
a3714 2
         expCutoff
         );
d3721 1
a3721 2
      const witBoolean forcedMultiEq
      )
d3727 1
a3727 2
         forcedMultiEq
         );
d3734 1
a3734 2
      const int hashTableSize
      )
d3740 1
a3740 2
         hashTableSize
         );
d3747 1
a3747 2
      const witBoolean independentOffsets
      )
d3753 1
a3753 2
         independentOffsets
         );
d3760 1
a3760 2
      const float invCost
      )
d3766 1
a3766 2
         invCost
         );
d3773 1
a3773 2
      const float lotSizeTol
      )
d3779 1
a3779 2
         lotSizeTol
         );
d3787 1
a3787 2
      const char * const mesgFileAccessMode
      )
d3794 1
a3794 2
         mesgFileAccessMode
         );
d3802 1
a3802 2
      const char * const mesgFileName
      )
d3809 1
a3809 2
         mesgFileName
         );
d3818 1
a3818 2
      const witBoolean mesgPrintMunber
      )
d3826 1
a3826 2
         mesgPrintMunber
         );
d3835 1
a3835 2
      const witBoolean mesgStopRunning
      )
d3843 1
a3843 2
         mesgStopRunning
         );
d3852 1
a3852 2
      const int mesgTimesPrint
      )
d3860 1
a3860 2
         mesgTimesPrint
         );
d3867 1
a3867 2
      const witBoolean multiExec
      )
d3873 1
a3873 2
         multiExec
         );
d3880 1
a3880 2
      const witBoolean multiRoute
      )
d3886 1
a3886 2
         multiRoute
         );
d3893 1
a3893 2
      const int nPeriods
      )
d3899 1
a3899 2
         nPeriods
         );
d3906 1
a3906 2
      const float obj2Winv
      )
d3912 1
a3912 2
         obj2Winv
         );
d3919 1
a3919 2
      const float obj2Wrev
      )
d3925 1
a3925 2
         obj2Wrev
         );
d3932 1
a3932 2
      const float obj2Wserv
      )
d3938 1
a3938 2
         obj2Wserv
         );
d3945 1
a3945 2
      const float obj2Wsub
      )
d3951 1
a3951 2
         obj2Wsub
         );
d3958 1
a3958 2
      const int objChoice
      )
d3964 1
a3964 2
         objChoice
         );
d3971 1
a3971 2
      const char * const oslMesgFileName
      )
d3977 1
a3977 2
         oslMesgFileName
         );
d3985 1
a3985 2
      void * const appData
      )
d3992 1
a3992 2
         appData
         );
d4002 1
a4002 2
      const float * const hardUpper
      )
d4011 1
a4011 2
         hardUpper
         );
d4020 1
a4020 2

      )
d4027 1
a4027 2
         execPenalty
         );
d4035 1
a4035 2
      const float * const execVol
      )
d4042 1
a4042 2
         execVol
         );
d4051 1
a4051 2

      )
d4058 1
a4058 2
         incLotSize
         );
d4067 1
a4067 2

      )
d4074 1
a4074 2
         minLotSize
         );
d4083 1
a4083 2

      )
d4090 1
a4090 2
         obj1ExecCost
         );
d4099 1
a4099 2

      )
d4106 1
a4106 2
         obj2AuxCost
         );
d4115 1
a4115 2

      )
d4122 1
a4122 2
         selForDel
         );
d4131 1
a4131 2

      )
d4138 1
a4138 2
         yieldRate
         );
d4145 1
a4145 2
      const witAttr optInitMethod
      )
d4151 1
a4151 2
         optInitMethod
         );
d4158 1
a4158 2
      const int outputPrecision
      )
d4164 1
a4164 2
         outputPrecision
         );
d4172 1
a4172 2
      void * const appData
      )
d4179 1
a4179 2
         appData
         );
d4187 1
a4187 2
      const int * const buildAheadUB
      )
d4194 1
a4194 2
         buildAheadUB
         );
d4202 1
a4202 2
      const witBoolean buildAsap
      )
d4209 1
a4209 2
         buildAsap
         );
d4217 1
a4217 2
      const witBoolean buildNstn
      )
d4224 1
a4224 2
         buildNstn
         );
d4232 1
a4232 2
      const float * const obj1ScrapCost
      )
d4248 1
a4248 2
      const float * const obj1StockCost
      )
d4255 1
a4255 2
         obj1StockCost
         );
d4265 1
a4265 2
      const float * const hardUpper
      )
d4274 1
a4274 2
         hardUpper
         );
d4282 1
a4282 2
      const float * const supplyVol
      )
d4289 1
a4289 2
         supplyVol
         );
d4297 1
a4297 2
      const witBoolean selForDel
      )
d4304 1
a4304 2
         selForDel
         );
d4312 1
a4312 2
      const float unitCost
      )
d4319 1
a4319 2
         unitCost
         );
d4326 1
a4326 2
      const witBoolean penExec
      )
d4332 1
a4332 2
         penExec
         );
d4339 1
a4339 2
      const witBoolean perfPegging
      )
d4345 1
a4345 2
         perfPegging
         );
d4352 1
a4352 2
      const float periodsPerYear
      )
d4358 1
a4358 2
         periodsPerYear
         );
d4365 1
a4365 2
      const witBoolean prefHighStockSLBs
      )
d4371 1
a4371 2
         prefHighStockSLBs
         );
d4378 1
a4378 2
      const witBoolean respectStockSLBs
      )
d4384 1
a4384 2
         respectStockSLBs
         );
d4391 1
a4391 2
      const witBoolean roundReqVols
      )
d4397 1
a4397 2
         roundReqVols
         );
d4404 1
a4404 2
      const witBoolean selSplit
      )
d4410 1
a4410 2
         selSplit
         );
d4417 1
a4417 2
      const witBoolean skipFailures
      )
d4423 1
a4423 2
         skipFailures
         );
d4430 1
a4430 2
      const witBoolean stockReallocation
      )
d4436 1
a4436 2
         stockReallocation
         );
d4446 1
a4446 2
      void * const appData
      )
d4455 1
a4455 2
         appData
         );
d4465 1
a4465 2
      const float * consRate
      )
d4474 1
a4474 2
         consRate
         );
d4484 1
a4484 2
      const int earliestPeriod
      )
d4493 1
a4493 2
         earliestPeriod
         );
d4503 1
a4503 2
      const witBoolean expAllowed
      )
d4512 1
a4512 2
         expAllowed
         );
d4522 1
a4522 2
      const float expNetAversion
      )
d4531 1
a4531 2
         expNetAversion
         );
d4541 1
a4541 2
      const float falloutRate
      )
d4550 1
a4550 2
         falloutRate
         );
d4560 1
a4560 2
      const int latestPeriod
      )
d4569 1
a4569 2
         latestPeriod
         );
d4579 1
a4579 2
      const witBoolean mrpNetAllowed
      )
d4588 1
a4588 2
         mrpNetAllowed
         );
d4598 1
a4598 2
      const witBoolean netAllowed
      )
d4607 1
a4607 2
         netAllowed
         );
d4617 1
a4617 2
      const float * const obj1SubCost
      )
d4626 1
a4626 2
         obj1SubCost
         );
d4636 1
a4636 2
      const float obj2SubPenalty
      )
d4645 1
a4645 2
         obj2SubPenalty
         );
d4655 1
a4655 2
      const float * const offset
      )
d4664 1
a4664 2
         offset
         );
d4674 1
a4674 2
      const float * const subVol
      )
d4683 1
a4683 2
         subVol
         );
d4693 1
a4693 2
      const witBoolean selForDel
      )
d4702 1
a4702 2
         selForDel
         );
d4709 1
a4709 2
      const char * const title
      )
d4715 1
a4715 2
         title
         );
d4722 1
a4722 2
      const witBoolean truncOffsets
      )
d4728 1
a4728 2
         truncOffsets
         );
d4735 1
a4735 2
      const witBoolean twoWayMultiExec
      )
d4741 1
a4741 2
         twoWayMultiExec
         );
d4748 1
a4748 2
      const witBoolean useFocusHorizons
      )
d4754 1
a4754 2
         useFocusHorizons
         );
d4761 1
a4761 2
      const float wbounds
      )
d4767 1
a4767 2
         wbounds
         );
d4774 1
a4774 2
      const witBoolean wit34Compatible
      )
d4780 1
a4780 2
         wit34Compatible
         );
d4786 1
a4786 2
      WitRun * const theWitRun
      )
d4800 1
a4800 2
      const int maxListLen
      )
d4808 1
a4808 2
         maxListLen
         );
d4815 1
a4815 2
      const char * const fileName
      )
d4821 1
a4821 2
         fileName
         );
d4829 1
a4829 2
      const witFileFormat fileFormat
      )
d4836 1
a4836 2
         fileFormat
         );
d4844 1
a4844 2
      const witFileFormat fileFormat
      )
d4851 1
a4851 2
         fileFormat
         );
d4859 1
a4859 2
      const witFileFormat fileFormat
      )
d4866 1
a4866 2
         fileFormat
         );
d4879 1
a4879 2
      ...
      )
d4889 1
a4889 2
         ap
      );
d4900 1
a4900 2
      ...
      )
d4910 1
a4910 2
         ap
      );
d4921 1
a4921 2
      ...
      )
d4931 1
a4931 2
         ap
      );
d4943 1
a4943 2
      ...
      )
d4954 1
a4954 2
         ap
      );
d4965 1
a4965 2
      int * fallout
      )
d4973 1
a4973 2
         fallout
         );
d4982 1
a4982 2
      float * usageRate
      )
d4990 1
a4990 2
         usageRate
         );
d4999 1
a4999 2
      float * time
      )
d5007 1
a5007 2
         time
         );
d5016 1
a5016 2
      float * prodRate
      )
d5024 1
a5024 2
         prodRate
         );
d5033 1
a5033 2
      int * buildAheadLimit
      )
d5041 1
a5041 2
         buildAheadLimit
         );
d5050 1
a5050 2
      int * * buildAheadUB
      )
d5058 1
a5058 2
         buildAheadUB
         );
d5067 1
a5067 2
      int * prefBuildAhead
      )
d5075 1
a5075 2
         prefBuildAhead
         );
d5084 1
a5084 2
      int * shipLateLimit
      )
d5092 1
a5092 2
         shipLateLimit
         );
d5099 1
a5099 2
      witBoolean * localBuildAhead
      )
d5105 1
a5105 2
         localBuildAhead
         );
d5112 1
a5112 2
      witBoolean * localMultiExec
      )
d5118 1
a5118 2
         localMultiExec
         );
d5127 1
a5127 2

      )
d5134 1
a5134 2
         yield
         );
d5142 1
a5142 2
      int * buildAheadLimit
      )
d5149 1
a5149 2
         buildAheadLimit
         );
d5157 1
a5157 2
      float ** cycleTime
      )
d5164 1
a5164 2
         cycleTime
         );
d5172 1
a5172 2
      float ** incLotSize
      )
d5179 1
a5179 2
         incLotSize
         );
d5187 1
a5187 2
      float ** minLotSize
      )
d5194 1
a5194 2
         minLotSize
         );
d5202 1
a5202 2
      float ** mrpProdVol
      )
d5209 1
a5209 2
         mrpProdVol
         );
d5217 1
a5217 2
      int * nBomEntries
      )
d5224 1
a5224 2
         nBomEntries
         );
d5232 1
a5232 2
      float ** obj1ProdCost
      )
d5239 1
a5239 2
         obj1ProdCost
         );
d5249 1
a5249 2
      float ** hardUpper
      )
d5258 1
a5258 2
         hardUpper
         );
d5266 1
a5266 2
      float ** prodVol
      )
d5273 1
a5273 2
         prodVol
         );
d5281 1
a5281 2
      int ** yield
      )
d5288 1
a5288 2
         yield
         );
d5295 1
a5295 2
      witBoolean * stockRealloc
      )
d5301 1
a5301 2
         stockRealloc
         );
d5311 1
a5311 2
      int * fallout
      )
d5320 1
a5320 2
         fallout
         );
d5330 1
a5330 2
      float * usageRate
      )
d5339 1
a5339 2
         usageRate
         );
d5348 1
a5348 2
      const int fallout
      )
d5356 1
a5356 2
         fallout
         );
d5365 1
a5365 2
      const float usageRate
      )
d5373 1
a5373 2
         usageRate
         );
d5382 1
a5382 2
      const float time
      )
d5390 1
a5390 2
         time
         );
d5399 1
a5399 2
      const float prodRate
      )
d5407 1
a5407 2
         prodRate
         );
d5414 1
a5414 2
      const witBoolean buildWhenEmpty
      )
d5420 1
a5420 2
         buildWhenEmpty
         );
d5429 1
a5429 2
      const int buildAheadLimit
      )
d5437 1
a5437 2
         buildAheadLimit
         );
d5446 1
a5446 2
      const int * buildAheadUB
      )
d5454 1
a5454 2
         buildAheadUB
         );
d5463 1
a5463 2
      const int prefBuildAhead
      )
d5471 1
a5471 2
         prefBuildAhead
         );
d5480 1
a5480 2
      const int shipLateLimit
      )
d5488 1
a5488 2
         shipLateLimit
         );
d5495 1
a5495 2
      const witBoolean localBuildAhead
      )
d5501 1
a5501 2
         localBuildAhead
         );
d5508 1
a5508 2
      const witBoolean localMultiExec
      )
d5514 1
a5514 2
         localMultiExec
         );
d5523 1
a5523 2

      )
d5530 1
a5530 2
         yield
         );
d5538 1
a5538 2
      const int buildAheadLimit
      )
d5545 1
a5545 2
         buildAheadLimit
         );
d5553 1
a5553 2
      const float * const cycleTime
      )
d5560 1
a5560 2
         cycleTime
         );
d5568 1
a5568 2
      const float * const incLotSize
      )
d5575 1
a5575 2
         incLotSize
         );
d5583 1
a5583 2
      const float * const minLotSize
      )
d5590 1
a5590 2
         minLotSize
         );
d5598 1
a5598 2
      const float * const obj1ProdCost
      )
d5605 1
a5605 2
         obj1ProdCost
         );
d5615 1
a5615 2
      const float * const hardUpper
      )
d5624 1
a5624 2
         hardUpper
         );
d5632 1
a5632 2
      const float * const prodVol
      )
d5639 1
a5639 2
         prodVol
         );
d5647 1
a5647 2
      const int * const yield
      )
d5654 1
a5654 2
         yield
         );
d5661 1
a5661 2
      const witBoolean stockRealloc
      )
d5667 1
a5667 2
         stockRealloc
         );
d5677 1
a5677 2
      const int fallout
      )
d5686 1
a5686 2
         fallout
         );
d5696 1
a5696 2
      const float * const prodVol
      )
d5705 1
a5705 2
         prodVol
         );
d5715 1
a5715 2
      const float usageRate
      )
d5724 1
a5724 2
         usageRate
         );
d5732 1
a5732 2
      const witFileFormat fileFormat
      )
d5739 1
a5739 2
         fileFormat
         );
d5748 1
a5748 2
      witBoolean * nonMrSelSplit
      )
d5754 1
a5754 2
         nonMrSelSplit
         );
d5761 1
a5761 2
      const witBoolean nonMrSelSplit
      )
d5767 1
a5767 2
         nonMrSelSplit
         );
d5775 1
a5775 2
      witBoolean * baSelSplit
      )
d5782 1
a5782 2
         baSelSplit
         );
d5790 1
a5790 2
      const witBoolean baSelSplit
      )
d5797 1
a5797 2
         baSelSplit
         );
d5806 1
a5806 2
      witBoolean * meSelSplit
      )
d5814 1
a5814 2
         meSelSplit
         );
d5823 1
a5823 2
      const witBoolean meSelSplit
      )
d5831 1
a5831 2
         meSelSplit
         );
d5838 1
a5838 2
      witBoolean * srSelSplit
      )
d5844 1
a5844 2
         srSelSplit
         );
d5851 1
a5851 2
      const witBoolean srSelSplit
      )
d5857 1
a5857 2
         srSelSplit
         );
d5864 1
a5864 2
      int * isOne
      )
d5875 1
a5875 2
      WitRun * const theWitRun
      )
d5886 1
a5886 2
      WitRun * const theWitRun
      )
d5897 1
a5897 2
      WitRun * const theWitRun
      )
d5909 1
a5909 2
      void ** mem
      )
d5918 137
@


1.30
log
@Moved some API functions around.
@
text
@d130 1
d133 1
d137 8
a144 8
WIT_DECLSPEC WIT_CONST int WitINFORMATIONAL_MESSAGES     =-1;
WIT_DECLSPEC WIT_CONST int WitWARNING_MESSAGES           =-2;
WIT_DECLSPEC WIT_CONST int WitSEVERE_MESSAGES            =-3;

WIT_DECLSPEC WIT_CONST witReturnCode WitINFORMATIONAL_RC =0;
WIT_DECLSPEC WIT_CONST witReturnCode WitWARNING_RC       =1;
WIT_DECLSPEC WIT_CONST witReturnCode WitSEVERE_RC        =3;
WIT_DECLSPEC WIT_CONST witReturnCode WitFATAL_RC         =4;
d153 7
@


1.29
log
@Finished implementation of selection splitting for multi-route.
@
text
@a843 19
WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryMeSelSplit (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      witBoolean * meSelSplit
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntryMeSelSplit");

   return
      theWitRun->witGetBopEntryMeSelSplit (
         operationName,
         bopEntryIndex,
         meSelSplit
         );
   }

//------------------------------------------------------------------------------

a2094 17
WIT_DECLSPEC witReturnCode STDCALL witGetPartBaSelSplit (
      WitRun * const theWitRun,
      const char * const partName,
      witBoolean * baSelSplit
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartBaSelSplit");

   return
      theWitRun->witGetPartBaSelSplit (
         partName,
         baSelSplit
         );
   }

//------------------------------------------------------------------------------

a2793 15
WIT_DECLSPEC witReturnCode STDCALL witGetSrSelSplit (
      WitRun * const theWitRun,
      witBoolean * srSelSplit
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetSrSelSplit");

   return
      theWitRun->witGetSrSelSplit (
         srSelSplit
         );
   }

//------------------------------------------------------------------------------

a3784 19
WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryMeSelSplit (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bopEntryIndex,
      const witBoolean meSelSplit
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetBopEntryMeSelSplit");

   return
      theWitRun->witSetBopEntryMeSelSplit (
         operationName,
         bopEntryIndex,
         meSelSplit
         );
   }

//------------------------------------------------------------------------------

a4692 17
WIT_DECLSPEC witReturnCode STDCALL witSetPartBaSelSplit (
      WitRun * const theWitRun,
      const char * const partName,
      const witBoolean baSelSplit
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartBaSelSplit");

   return
      theWitRun->witSetPartBaSelSplit (
         partName,
         baSelSplit
         );
   }

//------------------------------------------------------------------------------

a4984 15
WIT_DECLSPEC witReturnCode STDCALL witSetSrSelSplit (
      WitRun * const theWitRun,
      const witBoolean srSelSplit
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetSrSelSplit");

   return
      theWitRun->witSetSrSelSplit (
         srSelSplit
         );
   }

//------------------------------------------------------------------------------

d6472 102
@


1.28
log
@Initial implementation of selection splitting for multi-route.
@
text
@a1616 15
WIT_DECLSPEC witReturnCode STDCALL witGetNonMrSelSplit (
      WitRun * const theWitRun,
      witBoolean * nonMrSelSplit
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetNonMrSelSplit");

   return
      theWitRun->witGetNonMrSelSplit (
         nonMrSelSplit
         );
   }

//------------------------------------------------------------------------------

a4444 15
WIT_DECLSPEC witReturnCode STDCALL witSetNonMrSelSplit (
      WitRun * const theWitRun,
      const witBoolean nonMrSelSplit
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetNonMrSelSplit");

   return
      theWitRun->witSetNonMrSelSplit (
         nonMrSelSplit
         );
   }

//------------------------------------------------------------------------------

d6547 30
@


1.27
log
@Began implementation of selection splitting for stock reallocation.
@
text
@d1617 15
d2800 15
d4460 15
d5052 15
@


1.26
log
@Changed selStockRe attribute to stockReallocation (fullSR, internally).
@
text
@d2815 15
d5037 15
@


1.25
log
@Replaced uncondStockRe attribute with the old stockRealloc attribute.
@
text
@d2785 1
a2785 1
WIT_DECLSPEC witReturnCode STDCALL witGetSelStockRe (
d2787 1
a2787 1
      witBoolean * selStockRe
d2790 1
a2790 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSelStockRe");
d2793 2
a2794 2
      theWitRun->witGetSelStockRe (
         selStockRe
d2800 1
a2800 1
WIT_DECLSPEC witReturnCode STDCALL witGetSkipFailures (
d2802 1
a2802 1
      witBoolean * skipFailures
d2805 1
a2805 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSkipFailures");
d2808 2
a2809 2
      theWitRun->witGetSkipFailures (
         skipFailures
d5012 1
a5012 1
WIT_DECLSPEC witReturnCode STDCALL witSetSelStockRe (
d5014 1
a5014 1
      const witBoolean selStockRe
d5017 1
a5017 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetSelStockRe");
d5020 2
a5021 2
      theWitRun->witSetSelStockRe (
         selStockRe
@


1.24
log
@Renamed mandatory stock reallocation to unconditional stock reallocation.
@
text
@a3258 15
WIT_DECLSPEC witReturnCode STDCALL witGetUncondStockRe (
      WitRun * const theWitRun,
      witBoolean * uncondStockRe
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetUncondStockRe");

   return
      theWitRun->witGetUncondStockRe (
         uncondStockRe
         );
   }

//------------------------------------------------------------------------------

a5360 15
         );
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetUncondStockRe (
      WitRun * const theWitRun,
      const witBoolean uncondStockRe
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetUncondStockRe");

   return
      theWitRun->witSetUncondStockRe (
         uncondStockRe
@


1.23
log
@Removed allowSSR development control parameter.
@
text
@a1475 15
WIT_DECLSPEC witReturnCode STDCALL witGetMandStockRe (
      WitRun * const theWitRun,
      witBoolean * mandStockRe
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetMandStockRe");

   return
      theWitRun->witGetMandStockRe (
         mandStockRe
         );
   }

//------------------------------------------------------------------------------

d3259 15
a4293 15
WIT_DECLSPEC witReturnCode STDCALL witSetMandStockRe (
      WitRun * const theWitRun,
      const witBoolean mandStockRe
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetMandStockRe");

   return
      theWitRun->witSetMandStockRe (
         mandStockRe
         );
   }

//------------------------------------------------------------------------------

d5376 15
@


1.22
log
@Changed attribute stockRealloc to mandStockRe.
@
text
@d5042 15
@


1.21
log
@Continued implementation of selective stock reallocation.
@
text
@d1476 15
a2829 15
WIT_DECLSPEC witReturnCode STDCALL witGetStockRealloc (
      WitRun * const theWitRun,
      witBoolean * stockRealloc
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetStockRealloc");

   return
      theWitRun->witGetStockRealloc (
         stockRealloc
         );
   }

//------------------------------------------------------------------------------

d4294 15
a5041 15
WIT_DECLSPEC witReturnCode STDCALL witSetStockRealloc (
      WitRun * const theWitRun,
      const witBoolean stockRealloc
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetStockRealloc");

   return
      theWitRun->witSetStockRealloc (
         stockRealloc
         );
   }

//------------------------------------------------------------------------------

d5995 15
d6402 15
@


1.20
log
@added witMalloc function
@
text
@d2785 1
a2785 1
WIT_DECLSPEC witReturnCode STDCALL witGetSelStockRealloc (
d2787 1
a2787 1
      witBoolean * selStockRealloc
d2790 1
a2790 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSelStockRealloc");
d2793 2
a2794 2
      theWitRun->witGetSelStockRealloc (
         selStockRealloc
a3390 12
WIT_DECLSPEC witReturnCode STDCALL witMalloc (
      size_t size,
      void ** mem
      )
   {
   *mem = malloc( size );

   return (*mem!=NULL) ? WitINFORMATIONAL_RC : WitWARNING_RC;
   }

//------------------------------------------------------------------------------

d6519 15
@


1.19
log
@Added selStockRealloc attribute.
@
text
@d3391 12
@


1.18
log
@Added shadowPrice and compPrices attributes.
@
text
@d2785 15
@


1.17
log
@Minor change.
@
text
@a938 15
WIT_DECLSPEC witReturnCode STDCALL witGetWit34Compatible (
      WitRun * const theWitRun,
      witBoolean * wit34Compatible
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetWit34Compatible");

   return
      theWitRun->witGetWit34Compatible (
         wit34Compatible
         );
   }

//------------------------------------------------------------------------------

d984 15
d2578 17
d3289 15
d3882 1
a3882 1
WIT_DECLSPEC witReturnCode STDCALL witSetWit34Compatible (
d3884 1
a3884 1
      const witBoolean wit34Compatible
d3887 1
a3887 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetWit34Compatible");
d3890 2
a3891 2
      theWitRun->witSetWit34Compatible (
         wit34Compatible
d3894 1
a3894 1

d3897 1
a3897 1
WIT_DECLSPEC witReturnCode STDCALL witSetCapCost (
d3899 1
a3899 1
      const float capCost
d3902 1
a3902 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetCapCost");
d3905 2
a3906 2
      theWitRun->witSetCapCost (
         capCost
d3909 1
a3909 1
 
d5394 15
@


1.16
log
@Minor change.
@
text
@d4890 1
a4890 1
WIT_DECLSPEC witReturnCode STDCALL witSetPeriodsPerYear (
d4892 1
a4892 1
      const float periodsPerYear
d4895 1
a4895 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPeriodsPerYear");
d4898 2
a4899 2
      theWitRun->witSetPeriodsPerYear (
         periodsPerYear
d4902 1
a4902 1
 
d4905 1
a4905 1
WIT_DECLSPEC witReturnCode STDCALL witSetPerfPegging (
d4907 1
a4907 1
      const witBoolean perfPegging
d4910 1
a4910 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPerfPegging");
d4913 2
a4914 2
      theWitRun->witSetPerfPegging (
         perfPegging
d4917 1
a4917 1

@


1.15
log
@Continued implementation of pegging.
@
text
@d1083 1
a1083 1
      int shipPeriod,
d1205 1
a1205 1
      int shipPeriod,
d2678 1
a2678 1
WIT_DECLSPEC witReturnCode STDCALL witGetPeggingNeeded (
d2680 1
a2680 1
      witBoolean * peggingNeeded
d2683 1
a2683 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPeggingNeeded");
d2686 2
a2687 2
      theWitRun->witGetPeggingNeeded (
         peggingNeeded
d4905 1
a4905 1
WIT_DECLSPEC witReturnCode STDCALL witSetPeggingNeeded (
d4907 1
a4907 1
      const witBoolean peggingNeeded
d4910 1
a4910 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPeggingNeeded");
d4913 2
a4914 2
      theWitRun->witSetPeggingNeeded (
         peggingNeeded
@


1.14
log
@Continued implementation of pegging.
@
text
@d1079 27
d1201 1
a1201 28
WIT_DECLSPEC WitReturnCode STDCALL witGetDemandPeggedExecVols (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int shipPeriod,
      int * lenLists,
      char * * * operationNameList,
      int * * execPeriodList,
      float * * peggedExecVolList
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandPeggedExecVols");

   return
      theWitRun->witGetDemandPeggedExecVols (
         partName,
         demandName,
         shipPeriod,
         lenLists,
         operationNameList,
         execPeriodList,
         peggedExecVolList
         );
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC WitReturnCode STDCALL witGetDemandPeggedSubVols (
d1214 1
a1214 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandPeggedExecVols");
d1217 1
a1217 1
      theWitRun->witGetDemandPeggedSubVols (
d2678 1
a2678 1
WIT_DECLSPEC witReturnCode STDCALL witGetPegging (
d2680 1
a2680 1
      witBoolean * pegging
d2683 1
a2683 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPegging");
d2686 2
a2687 2
      theWitRun->witGetPegging (
         pegging
d4905 1
a4905 1
WIT_DECLSPEC witReturnCode STDCALL witSetPegging (
d4907 1
a4907 1
      const witBoolean pegging
d4910 1
a4910 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPegging");
d4913 2
a4914 2
      theWitRun->witSetPegging (
         pegging
@


1.13
log
@Continued implementation of pegging.
@
text
@d2678 1
a2678 1
WIT_DECLSPEC witReturnCode STDCALL witGetPerfPegging (
d2680 1
a2680 1
      witBoolean * perfPegging
d2683 1
a2683 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPerfPegging");
d2686 2
a2687 2
      theWitRun->witGetPerfPegging (
         perfPegging
d4905 1
a4905 1
WIT_DECLSPEC witReturnCode STDCALL witSetPerfPegging (
d4907 1
a4907 1
      const witBoolean perfPegging
d4910 1
a4910 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPerfPegging");
d4913 2
a4914 2
      theWitRun->witSetPerfPegging (
         perfPegging
@


1.12
log
@Continued implementation of pegging.
@
text
@a1307 15
WIT_DECLSPEC witReturnCode STDCALL witGetDoPegging (
      WitRun * const theWitRun,
      witBoolean * doPegging
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetDoPegging");

   return
      theWitRun->witGetDoPegging (
         doPegging
         );
   }

//------------------------------------------------------------------------------

d2678 15
a4126 15
WIT_DECLSPEC witReturnCode STDCALL witSetDoPegging (
      WitRun * const theWitRun,
      const witBoolean doPegging
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetDoPegging");

   return
      theWitRun->witSetDoPegging (
         doPegging
         );
   }

//------------------------------------------------------------------------------

d4903 15
@


1.11
log
@Initial implementation of pegging.
@
text
@d1182 1
a1182 1
      float * * deltaExecVolList
d1195 32
a1226 1
         deltaExecVolList
@


1.10
log
@Added meSelSplitOK development parameter.
Added meSelSplit attribute.
Refactoring for sel-split for multi-exec.
@
text
@d273 12
d1174 27
d1277 1
a1277 1
WIT_DECLSPEC witReturnCode STDCALL witGetHeurAllocActive (
d1279 1
a1279 1
      witBoolean * heurAllocActive
d1282 1
a1282 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetHeurAllocActive");
d1285 2
a1286 2
      theWitRun->witGetHeurAllocActive (
         heurAllocActive
d1400 15
d4091 15
@


1.9
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@d832 19
d3684 19
@


1.8
log
@Implemented EBS lower bound adjustment for sel-split.
@
text
@d2025 17
d4573 17
@


1.7
log
@Implemented respectStockSLBs and prefHighStockSLBs global attributes.
@
text
@d274 2
a275 2
      WitRun * const lhsWitRun,
      WitRun * const rhsWitRun
d278 1
a278 1
   WitUtil::forbidNullArg (lhsWitRun, "lhsWitRun", "witCopyData");
d280 2
a281 2
   return lhsWitRun->witCopyData (
         rhsWitRun
@


1.6
log
@Replaced some scalar attributes with vector attributes:

   BOM entry  usageRate ==> consRate
   substitute usageRate ==> consRate
   BOP entry  prodRate  ==> productRate
@
text
@d2587 15
d2617 15
d4746 30
@


1.5
log
@Outer API: Merged all no-longer-documented functions into one section.
Outer API: Moved build-ahead by demand functions into the no-longer-documented
   section.
Simplified the rules for two-way multiple execution periods.
@
text
@d509 19
a698 19
WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryUsageRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      float * usageRate
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryUsageRate");

   return
      theWitRun->witGetBomEntryUsageRate (
         operationName,
         bomEntryIndex,
         usageRate
         );
   }
 
//------------------------------------------------------------------------------

d851 1
a851 1
WIT_DECLSPEC witReturnCode STDCALL witGetBopEntryProdRate (
d855 1
a855 1
      float * prodRate
d858 1
a858 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBopEntryProdRate");
d861 1
a861 1
      theWitRun->witGetBopEntryProdRate (
d864 1
a864 1
         prodRate
d2668 21
a3045 21
WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryUsageRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      float * usageRate
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryUsageRate");

   return
      theWitRun->witGetSubsBomEntryUsageRate (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         usageRate
         );
   }

//------------------------------------------------------------------------------

d3376 19
a3508 19
WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryUsageRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const float usageRate
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntryUsageRate");

   return
      theWitRun->witSetBomEntryUsageRate (
         operationName,
         bomEntryIndex,
         usageRate
         );
   }
 
//------------------------------------------------------------------------------

d3642 1
a3642 1
WIT_DECLSPEC witReturnCode STDCALL witSetBopEntryProdRate (
d3646 1
a3646 1
      const float prodRate
d3649 1
a3649 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBopEntryProdRate");
d3652 1
a3652 1
      theWitRun->witSetBopEntryProdRate (
d3655 1
a3655 1
         prodRate
d4784 21
a5056 21
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryUsageRate (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const float usageRate
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryUsageRate");

   return
      theWitRun->witSetSubsBomEntryUsageRate (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         usageRate
         );
   }
 
//------------------------------------------------------------------------------

d5346 19
d5384 19
d5722 21
d5762 19
d5800 19
d6138 21
@


1.4
log
@Finished implementing stock reallocation.
@
text
@a1005 19
WIT_DECLSPEC witReturnCode STDCALL witGetDemandBuildAheadUB (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * * buildAheadUB
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandBuildAheadUB");

   return
      theWitRun->witGetDemandBuildAheadUB (
         partName,
         demandName,
         buildAheadUB
         );
   }

//------------------------------------------------------------------------------

a1142 19
WIT_DECLSPEC witReturnCode STDCALL witGetDemandPrefBuildAhead (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * prefBuildAhead
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandPrefBuildAhead");

   return
      theWitRun->witGetDemandPrefBuildAhead (
         partName,
         demandName,
         prefBuildAhead
         );
   }

//------------------------------------------------------------------------------

a3743 19
WIT_DECLSPEC witReturnCode STDCALL witSetDemandBuildAheadUB (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int * buildAheadUB
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandBuildAheadUB");

   return
      theWitRun->witSetDemandBuildAheadUB (
         partName,
         demandName,
         buildAheadUB
         );
   }

//------------------------------------------------------------------------------

a3880 19
WIT_DECLSPEC witReturnCode STDCALL witSetDemandPrefBuildAhead (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      const int prefBuildAhead
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetDemandPrefBuildAhead");

   return
      theWitRun->witSetDemandPrefBuildAhead (
         partName,
         demandName,
         prefBuildAhead
         );
   }
 
//------------------------------------------------------------------------------

d5228 3
a5230 1
// WIT API functions to enable compatibility with earlier WIT 5.0 applications.
d5233 1
a5233 1
WIT_DECLSPEC witReturnCode STDCALL witGetLocalBuildAhead (
d5235 3
a5237 1
      witBoolean * localBuildAhead
d5240 1
a5240 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetLocalBuildAhead");
d5242 10
a5251 4
   return
      theWitRun->witGetLocalBuildAhead (
         localBuildAhead
         );
d5256 1
a5256 1
WIT_DECLSPEC witReturnCode STDCALL witGetLocalMultiExec (
d5258 3
a5260 1
      witBoolean * localMultiExec
d5263 1
a5263 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetLocalMultiExec");
d5265 10
a5274 4
   return
      theWitRun->witGetLocalMultiExec (
         localMultiExec
         );
d5279 1
a5279 31
WIT_DECLSPEC witReturnCode STDCALL witSetLocalBuildAhead (
      WitRun * const theWitRun,
      const witBoolean localBuildAhead
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetLocalBuildAhead");

   return
      theWitRun->witSetLocalBuildAhead (
         localBuildAhead
         );
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witSetLocalMultiExec (
      WitRun * const theWitRun,
      const witBoolean localMultiExec
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetLocalMultiExec");

   return
      theWitRun->witSetLocalMultiExec (
         localMultiExec
         );
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witGetPartBuildAheadLimit (
d5282 2
a5283 1
      int * buildAheadLimit
d5286 1
a5286 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetPartBuildAheadLimit");
d5288 4
a5291 2
   return
      theWitRun->witGetPartBuildAheadLimit (
d5293 5
a5297 2
         buildAheadLimit
         );
d5302 1
a5302 1
WIT_DECLSPEC witReturnCode STDCALL witSetPartBuildAheadLimit (
d5304 4
a5307 2
      const char * const partName,
      const int buildAheadLimit
d5310 1
a5310 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetPartBuildAheadLimit");
d5312 11
a5322 5
   return
      theWitRun->witSetPartBuildAheadLimit (
         partName,
         buildAheadLimit
         );
a5325 2
// WIT API functions to enable compatibility with WIT 4.0 applications.
//------------------------------------------------------------------------------
d5346 1
a5346 1
WIT_DECLSPEC witReturnCode STDCALL witGetOperationYield (
d5349 2
a5350 2
      int ** yield

d5353 1
a5353 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetOperationYield");
d5356 1
a5356 1
      theWitRun->witGetOperationYield (
d5358 2
a5359 1
         yield
d5365 1
a5365 1
WIT_DECLSPEC witReturnCode STDCALL witGetSubsBomEntryFallout (
d5367 3
a5369 4
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      int * fallout
d5372 1
a5372 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetSubsBomEntryFallout");
d5375 4
a5378 5
      theWitRun->witGetSubsBomEntryFallout (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         fallout
d5384 1
a5384 1
WIT_DECLSPEC witReturnCode STDCALL witSetBomEntryFallout (
d5386 3
a5388 3
      const char * const operationName,
      const int bomEntryIndex,
      const int fallout
d5391 1
a5391 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetBomEntryFallout");
d5394 4
a5397 4
      theWitRun->witSetBomEntryFallout (
         operationName,
         bomEntryIndex,
         fallout
d5403 1
a5403 1
WIT_DECLSPEC witReturnCode STDCALL witSetOperationYield (
d5405 3
a5407 3
      const char * const operationName,
      const int * const yield

d5410 1
a5410 1
   WitUtil::forbidNullWitRun (theWitRun, "witSetOperationYield");
d5413 4
a5416 3
      theWitRun->witSetOperationYield (
         operationName,
         yield
d5422 1
a5422 47
WIT_DECLSPEC witReturnCode STDCALL witSetSubsBomEntryFallout (
      WitRun * const theWitRun,
      const char * const operationName,
      const int bomEntryIndex,
      const int subsBomEntryIndex,
      const int fallout
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witSetSubsBomEntryFallout");

   return
      theWitRun->witSetSubsBomEntryFallout (
         operationName,
         bomEntryIndex,
         subsBomEntryIndex,
         fallout
         );
   }

//------------------------------------------------------------------------------
// WIT API functions to enable compatibility with WIT 3.4 applications.
//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witAddBomEntryVa (
      WitRun * const theWitRun,
      const char * const consumingOperationName,
      const char * const consumedPartName,
      ...
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witAddBomEntryVa");

   va_list ap;
   va_start (ap,consumedPartName);
   witReturnCode rc;
   rc = theWitRun->witAddBomEntryVa (
         consumingOperationName,
         consumedPartName,
         ap
      );
   va_end (ap);
   return rc;
   }

//------------------------------------------------------------------------------

WIT_DECLSPEC witReturnCode STDCALL witAddDemandVa (
d5426 1
a5426 1
      ...
d5429 1
a5429 1
   WitUtil::forbidNullWitRun (theWitRun, "witAddDemandVa");
d5431 2
a5432 4
   va_list ap;
   va_start (ap,demandName);
   witReturnCode rc;
   rc = theWitRun->witAddDemandVa (
d5435 2
a5436 4
         ap
      );
   va_end (ap);
   return rc;
d5438 1
a5438 1

d5441 1
a5441 1
WIT_DECLSPEC witReturnCode STDCALL witAddPartVa (
d5443 1
a5443 3
      const char * const partName,
      const witAttr partCategory,
      ...
d5446 1
a5446 1
   WitUtil::forbidNullWitRun (theWitRun, "witAddPartVa");
d5448 4
a5451 10
   va_list ap;
   va_start (ap,partCategory);
   witReturnCode rc;
   rc = theWitRun->witAddPartVa (
         partName,
         partCategory,
         ap
      );
   va_end (ap);
   return rc;
d5456 1
a5456 1
WIT_DECLSPEC witReturnCode STDCALL witAddSubsBomEntryVa (
d5458 1
a5458 4
      const char * const operationName,
      const int bomEntryIndex,
      const char * const consumedPartName,
      ...
d5461 1
a5461 1
   WitUtil::forbidNullWitRun (theWitRun, "witAddSubsBomEntryVa");
d5463 4
a5466 11
   va_list ap;
   va_start (ap,consumedPartName);
   witReturnCode rc;
   rc = theWitRun->witAddSubsBomEntryVa (
         operationName,
         bomEntryIndex,
         consumedPartName,
         ap
      );
   va_end (ap);
   return rc;
d5471 1
a5471 1
WIT_DECLSPEC witReturnCode STDCALL witGetBomEntryUsageTime (
d5474 2
a5475 2
      const int bomEntryIndex,
      float * time
d5478 1
a5478 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetBomEntryUsageTime");
d5481 1
a5481 1
      theWitRun->witGetBomEntryUsageTime (
d5483 1
a5483 2
         bomEntryIndex,
         time
d5489 1
a5489 1
WIT_DECLSPEC witReturnCode STDCALL witGetDemandBuildAheadLimit (
a5491 1
      const char * const demandName,
d5495 1
a5495 1
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandBuildAheadLimit");
d5498 1
a5498 1
      theWitRun->witGetDemandBuildAheadLimit (
a5499 1
         demandName,
a5505 19
WIT_DECLSPEC witReturnCode STDCALL witGetDemandShipLateLimit (
      WitRun * const theWitRun,
      const char * const partName,
      const char * const demandName,
      int * shipLateLimit
      )
   {
   WitUtil::forbidNullWitRun (theWitRun, "witGetDemandShipLateLimit");

   return
      theWitRun->witGetDemandShipLateLimit (
         partName,
         demandName,
         shipLateLimit
         );
   }
 
//------------------------------------------------------------------------------

d5663 40
d5756 38
d5813 65
d5996 21
@


1.3
log
@Replaced "PRM" with "WIT".
Replaced "Production Resource Manager" with "Watson Implosion Technology".
Upgraded release # to 6.0.
@
text
@d2670 15
d4819 15
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d153 1
a153 1
// PRM API functions for the current release.
d5274 1
a5274 1
// PRM API functions to enable compatibility with earlier PRM 5.0 applications.
d5370 1
a5370 1
// PRM API functions to enable compatibility with PRM 4.0 applications.
d5488 1
a5488 1
// PRM API functions to enable compatibility with WIT 3.4 applications.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
