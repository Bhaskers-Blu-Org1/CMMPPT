head	1.10;
access;
symbols;
locks; strict;
comment	@ * @;


1.10
date	2011.09.28.23.49.11;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.09.24.00.27.29;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.08.30.20.17.22;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.02.03.23.37.25;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.02.03.19.02.11;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.01.26.00.22.55;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.01.21.23.23.51;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.20.00.26.43;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.01.18.23.27.15;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.01.12.23.09.23;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef CpxParSpecH
#define CpxParSpecH

//------------------------------------------------------------------------------
// Header file: "CpxParSpec.h"
//
// Contains the declaration of class CpxParSpec.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <Str.h>

//------------------------------------------------------------------------------
// Class CpxParSpec
//
// "CPLEX Parameter Specification"
//
// A CpxParSpec represents an instruction to set a specified CPLEX parameter to
// a specified value.
//
// Each CpxParSpec has:
//   * A specified name, which, when prefixed with "CPX_PARAM_", is to match the
//     name of the specified CPLEX parameter.
//   * A specified value type (either int or double) which is to be the value
//     type of the specified CPLEX parameter.
//   * A specified value, matching the specified value type, which is the value
//     to which the specified CPLEX parameter is to be set.
//
// A CpxParSpec is either valid or invalid.
// A CpxParSpec is valid, iff both of the following hold:
//   * Its name matches the name of an actual CPLEX parameter.
//   * Its value type matches the type of the CPLEX parameter.
//
// During optimizing implosion and stochastic implosion with CPLEX selected,
// just before a CPLEX solve routine is invoked, the following actions will be
// performed for each CpxParSpec in the Problem:
//   * If the CpxParSpec is invalid, a severe error will be issued.
//   * If the CpxParSpec is   valid, the value of the specified CPLEX
//     parameter will be set to the specified value.
//------------------------------------------------------------------------------

class WitCpxParSpec: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitCpxParSpec (WitProblem *, const char *, int);
      WitCpxParSpec (WitProblem *, const char *, double);

      WitCpxParSpec (WitProblem *, WitCpxParSpec *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitCpxParSpec ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitString &, myName)
      accessFunc (bool,              valTypeIsInt)

      int    myIntVal () const;
      double myDblVal () const;

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void display ();
         //
         // Displays the input data for this CpxParSpec.

      void writeData ();
         //
         // Writes this CpxParSpec to an input data file.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitCpxParSpec);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitString myName_;
         //
         // The name of this CpxParSpec.

      const bool valTypeIsInt_;
         //
         // If true,  the specified value type is int.
         // If false, the specified value type is double.

      const int    myIntVal_;
      const double myDblVal_;
         //
         // If valTypeIsInt_ is true,
         //    myIntVal_ is the specified value.
         //    myDblVal_ is 0.0.
         //
         // If valTypeIsInt_ is false,
         //    myIntVal_ is 0.
         //    myDblVal_ is the specified value.
   };

#endif
@


1.9
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.8
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d52 2
a53 35
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitCpxParSpec (WitProblem *, const char *, int);
WitCpxParSpec (WitProblem *, const char *, double);

WitCpxParSpec (WitProblem *, WitCpxParSpec *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitCpxParSpec ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (const WitString &, myName)
accessFunc (bool,              valTypeIsInt)

int    myIntVal () const;
double myDblVal () const;

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void display ();
//
// Displays the input data for this CpxParSpec.
d55 69
a123 36
void writeData ();
//
// Writes this CpxParSpec to an input data file.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitCpxParSpec);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

const WitString myName_;
//
// The name of this CpxParSpec.

const bool valTypeIsInt_;
//
// If true,  the specified value type is int.
// If false, the specified value type is double.

const int    myIntVal_;
const double myDblVal_;
//
// If valTypeIsInt_ is true,
//    myIntVal_ is the specified value.
//    myDblVal_ is 0.0.
//
// If valTypeIsInt_ is false,
//    myIntVal_ is 0.
//    myDblVal_ is the specified value.
};
@


1.7
log
@CPLEX Parameters
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d52 35
a86 2
   {
   public:
d88 36
a123 69
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitCpxParSpec (WitProblem *, const char *, int);
      WitCpxParSpec (WitProblem *, const char *, double);

      WitCpxParSpec (WitProblem *, WitCpxParSpec *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitCpxParSpec ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitString &, myName)
      accessFunc (bool,              valTypeIsInt)

      int    myIntVal () const;
      double myDblVal () const;

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void display ();
         //
         // Displays the input data for this CpxParSpec.

      void writeData ();
         //
         // Writes this CpxParSpec to an input data file.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitCpxParSpec);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitString myName_;
         //
         // The name of this CpxParSpec.

      const bool valTypeIsInt_;
         //
         // If true,  the specified value type is int.
         // If false, the specified value type is double.

      const int    myIntVal_;
      const double myDblVal_;
         //
         // If valTypeIsInt_ is true,
         //    myIntVal_ is the specified value.
         //    myDblVal_ is 0.0.
         //
         // If valTypeIsInt_ is false,
         //    myIntVal_ is 0.
         //    myDblVal_ is the specified value.
   };
@


1.6
log
@CPLEX Parameters
@
text
@d31 1
a31 1
//   * A specified name, which, when appended with "CPX_PARAM_", is to match the
@


1.5
log
@CPLEX Parameters
@
text
@d31 2
a32 2
//   * A specified name, which is to be the name of the specified CPLEX
//     parameter.
@


1.4
log
@CPLEX Parameters
@
text
@d62 2
@


1.3
log
@CPLEX Parameters
@
text
@d40 1
a40 2
//   * Its name matches the name of an actual CPLEX parameter, excluding the
//     "CPX_PARAM_" prefix.
@


1.2
log
@CPLEX Parameters
@
text
@d87 4
@


1.1
log
@CPX Param Specs
@
text
@d19 1
d52 1
a52 1
class WitCpxParSpec
d60 2
a61 2
      WitCpxParSpec (const char *, int);
      WitCpxParSpec (const char *, double);
d79 8
@

