head	1.33;
access;
symbols
	sce_5_01_20080919:1.16;
locks; strict;
comment	@ * @;


1.33
date	2011.09.28.23.49.18;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.09.24.00.27.35;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.08.30.20.17.27;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2010.08.19.18.00.12;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2010.03.24.21.31.02;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2010.03.18.23.28.02;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2010.03.18.22.35.02;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2010.03.16.20.39.22;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2010.03.13.00.35.50;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2010.03.11.22.36.23;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2010.02.16.20.47.03;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2010.02.05.20.41.52;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2010.01.26.21.06.11;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2010.01.16.00.09.08;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2010.01.15.17.13.02;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2010.01.04.22.11.23;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2009.12.31.21.47.39;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.03.03.22.35.42;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.02.29.23.24.29;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.02.27.23.43.42;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.02.27.23.19.10;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.02.27.22.49.16;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.12.06.22.53.01;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.11.13.20.17.38;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.09.05.22.23.58;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.08.15.22.02.08;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.08.15.19.15.33;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.08.09.20.17.42;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.08.09.19.30.36;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.08.08.23.27.44;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.08.02.19.39.47;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.06.26.20.01.30;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.06.26.19.06.20;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.33
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef DetVarsH
#define DetVarsH

//------------------------------------------------------------------------------
// Header file: "DetVars.h"
//
// Contains the declaration the following classes:
//
//    DetVar
//    ScrapVar
//    NonSubVar
//    SubVar
//    ShipVar
//    BoundedVar
//    ExecVar
//    StockVar
//    CumShipVar
//    SlbvVar
//    MultiObjVar
//    NtbvVar
//------------------------------------------------------------------------------

#include <OptVar.h>

//------------------------------------------------------------------------------
// Class DetVar
//
// "Deterministic Variable"
// An OptVar in a deterministic implosion optimization problem.
//
// Class hierarchy:
//
//    OptVC
//       OptVar
//          DetVar
//             ScrapVar
//             NonSubVar
//             SubVar
//             ShipVar
//             BoundedVar
//                ExecVar
//                StockVar
//                CumShipVar
//             SlbvVar
//             MultiObjVar
//             NtbvVar
//------------------------------------------------------------------------------

class WitDetVar: public WitOptVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitDetVar (WitDetImpOP *, WitPeriod);

      WitDetVar (WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitDetVar ();
 
      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual WitOptProblem * myOptProblem ();
      virtual WitDetVar *     mandDetVar   ();

      //------------------------------------------------------------------------

      virtual void uploadSoln () = 0;
         //
         // Uploads the primal solution for this DetVar to the corresponding
         // attribute.

      virtual bool isSlbvVar ();
         //
         // Returns true, iff this DetVar is an SlbvVar.

      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitDetImpOP *, myDetImpOP)

      inline bool hasPeriod ()
         {
         return (myPeriod_ != -1);
         }

      inline WitPeriod myPeriod ()
         {
         witAssert (hasPeriod ());

         return myPeriod_;
         }

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitDetVar);

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual void printSource ();

      //-----------------------------------------------------------------------
      // Private pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual void printItem () = 0;
         //
         // Prints to the optProbFile text identifying the non-period
         // data from which this DetVar was generated.

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitDetImpOP * const myDetImpOP_;
         //
         // The DetImpOP that owns this DetVar.

      const WitPeriod myPeriod_;
         //
         // The Period for this DetVar, if it has one.
         // -1, if it doesn't have a Period.
   };

//------------------------------------------------------------------------------
// class ScrapVar
// A scrap variable in the optimization problem.
//
// Class hierarchy:
//
//    OptVC
//       OptVar
//          DetVar
//             ScrapVar
//------------------------------------------------------------------------------

class WitScrapVar: public WitDetVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitScrapVar (WitPart *, WitPeriod, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitScrapVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double compObjCoeff   ();
      virtual double indepInitValue ();
      virtual void   uploadSoln     ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitPart *, myPart)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitScrapVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitPart * const myPart_;
         //
         // The Part with which this ScrapVar is associated.
   };

//------------------------------------------------------------------------------
// class NonSubVar
// A non-substitution variable in the optimization problem.
//
// Class hierarchy:
//
//    OptVC
//       OptVar
//          DetVar
//             NonSubVar
//------------------------------------------------------------------------------

class WitNonSubVar: public WitDetVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitNonSubVar (WitBomEntry *, WitPeriod, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitNonSubVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double compObjCoeff   ();
      virtual double indepInitValue ();
      virtual void   uploadSoln     ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitBomEntry *, myBomEnt)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitNonSubVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitBomEntry * const myBomEnt_;
         //
         // The BomEntry with which this NonSubVar is associated.
   };

//------------------------------------------------------------------------------
// class SubVar
// A substitution variable in the optimization problem.
//
// Class hierarchy:
//
//    OptVC
//       OptVar
//          DetVar
//             SubVar
//------------------------------------------------------------------------------

class WitSubVar: public WitDetVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitSubVar (WitSubEntry *, WitPeriod, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitSubVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double compObjCoeff   ();
      virtual double indepInitValue ();
      virtual bool   isAnIntVar     ();
      virtual void   uploadSoln     ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitSubEntry *, mySub)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitSubVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitSubEntry * const mySub_;
         //
         // The SubEntry with which this SubVar is associated.
   };

//------------------------------------------------------------------------------
// class ShipVar
// A shipment variable in the optimization problem.
//
// Class hierarchy:
//
//    OptVC
//       OptVar
//          DetVar
//             ShipVar
//------------------------------------------------------------------------------

class WitShipVar: public WitDetVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitShipVar (WitDemand *, WitPeriod, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitShipVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double compObjCoeff   ();
      virtual double indepInitValue ();
      virtual bool   isAnIntVar     ();
      virtual void   uploadSoln     ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitDemand *, myDemand)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitShipVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitDemand * const myDemand_;
         //
         // The Demand with which this ShipVar is associated.
   };

//------------------------------------------------------------------------------
// class BoundedVar
// A variable with user-specified bounds in the optimization problem.
//
// Class hierarchy:
//
//    OptVC
//       OptVar
//          DetVar
//             BoundedVar
//                ExecVar
//                StockVar
//                CumShipVar
//------------------------------------------------------------------------------

class WitBoundedVar: public WitDetVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitBoundedVar (WitDetImpOP *, WitPeriod);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitBoundedVar ();

      //-----------------------------------------------------------------------
      // Public pure virtual function members.
      //-----------------------------------------------------------------------

      virtual WitBoundSet * myBoundSet () = 0;
         //
         // Returns the BoundSet that bounds this BoundedVar.

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      double hardLB ();
         //
         // Hard lower bound:         0.0 <= hardLB ()  <  +infinity.

      double softLB ();
         //
         // Soft lower bound:         0.0 <= softLB ()  <  +infinity.

      double hardUB ();
         //
         // Hard upper bound:         0.0 <= hardUB ()  <= +infinity.

      bool needsAnSlbvVar ();
         //
         // Returns true, iff an SlbvVar should be generated for this
         // BoundedVar.

      void printBoundInfo ();
         //
         // Prints bound information of this BoundedVar to optProbFile.

      void printSoln ();
         //
         // Prints the optimization solution associated with this BoundedVar to
         // solnFile.

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitBoundedVar);
   };

//------------------------------------------------------------------------------
// class ExecVar
// An execution variable in the optimization problem.
//
// Class hierarchy:
//
//    OptVC
//       OptVar
//          DetVar
//             BoundedVar
//                ExecVar
//------------------------------------------------------------------------------

class WitExecVar: public WitBoundedVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitExecVar (WitOperation *, WitPeriod, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitExecVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double        compObjCoeff   ();
      virtual double        indepInitValue ();
      virtual bool          isAnIntVar     ();
      virtual void          uploadSoln     ();
      virtual WitBoundSet * myBoundSet     ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitOperation *, myOperation)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitExecVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitOperation * const myOperation_;
         //
         // The Operation with which this ExecVar is associated.
   };

//------------------------------------------------------------------------------
// class StockVar
// A stock variable in the optimization problem.
//
// Class hierarchy:
//
//    OptVC
//       OptVar
//          DetVar
//             BoundedVar
//                StockVar
//------------------------------------------------------------------------------

class WitStockVar: public WitBoundedVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitStockVar (WitMaterial *, WitPeriod, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitStockVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double        compObjCoeff   ();
      virtual double        indepInitValue ();
      virtual void          uploadSoln     ();
      virtual WitBoundSet * myBoundSet     ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitMaterial *, myMaterial)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitStockVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitMaterial * const myMaterial_;
         //
         // The Material with which this StockVar is associated.
   };

//------------------------------------------------------------------------------
// class CumShipVar
// A cumulative shipment variable in the optimization problem.
//
// Class hierarchy:
//
//    OptVC
//       OptVar
//          DetVar
//             BoundedVar
//                CumShipVar
//------------------------------------------------------------------------------

class WitCumShipVar: public WitBoundedVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitCumShipVar (WitDemand *, WitPeriod, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitCumShipVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double        compObjCoeff   ();
      virtual double        indepInitValue ();
      virtual void          uploadSoln     ();
      virtual WitBoundSet * myBoundSet     ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitDemand *, myDemand)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitCumShipVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitDemand * const myDemand_;
         //
         // The Demand with which this CumShipVar is associated.
   };

//------------------------------------------------------------------------------
// class SlbvVar
// A soft lower bound violation variable in the optimization problem.
//
// Class hierarchy:
//
//    OptVC
//       OptVar
//          DetVar
//             SlbvVar
//------------------------------------------------------------------------------

class WitSlbvVar: public WitDetVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitSlbvVar (WitBoundedVar *, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitSlbvVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double compObjCoeff ();
      virtual void   uploadSoln   ();
      virtual bool   isSlbvVar    ();

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      inline WitBoundSet * myBoundSet ();
         //
         // Returns myBoundedVar_->myBoundSet ().
         // Implemented in this file just below class BoundedVar.

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitSlbvVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitBoundedVar * const myBoundedVar_;
         //
         // The BoundedVar to which this SlbvVar applies.
   };

//------------------------------------------------------------------------------
// class MultiObjVar
// A multiple objectives variable in the optimization problem: a variable whose
// value is constrained to match the value of one of the Objectives in multiple
// objectives mode.
//
// Class hierarchy:
//
//    OptVC
//       OptVar
//          DetVar
//             MultiObjVar
//------------------------------------------------------------------------------

class WitMultiObjVar: public WitDetVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitMultiObjVar (WitObjective *, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitMultiObjVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double       compObjCoeff       ();
      virtual void         uploadSoln         ();
      virtual const char * lexObjElemName     ();
      virtual void         reportLexUnbounded ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitObjective *, myObj)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitMultiObjVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitObjective * const myObj_;
         //
         // The Objective with which this MultiObjVar is associated.
   };

//------------------------------------------------------------------------------
// class NtbvVar
// A negative total bound violation variable in the optimization problem:
// a variable whose value is constrained to be negative of the sum of the
// violations of soft lower bounds in the solution.
//
// Class hierarchy:
//
//    OptVC
//       OptVar
//          DetVar
//             NtbvVar
//------------------------------------------------------------------------------

class WitNtbvVar: public WitDetVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitNtbvVar (WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitNtbvVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double       compObjCoeff       ();
      virtual void         uploadSoln         ();
      virtual const char * lexObjElemName     ();
      virtual void         reportLexUnbounded ();

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitNtbvVar);
   };

//------------------------------------------------------------------------------
// Implementation of inline functions of class SlbvVar.
//------------------------------------------------------------------------------

inline WitBoundSet * WitSlbvVar::myBoundSet ()
   {
   return myBoundedVar_->myBoundSet ();
   }

#endif
@


1.32
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 6
a6 1
//------------------------------------------------------------------------------
d8 1
a8 4
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
d10 4
a13 1
//------------------------------------------------------------------------------
@


1.31
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 1
a6 1
//     IBM Confidential
d59 2
a60 2
{
public:
d62 3
a64 3
//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------
d66 1
a66 1
WitDetVar (WitDetImpOP *, WitPeriod);
d68 1
a68 1
WitDetVar (WitDetImpOP *);
d70 3
a72 3
//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------
d74 5
a78 1
virtual ~WitDetVar ();
d80 2
a81 3
//-----------------------------------------------------------------------
// Overriding public virtual member functions.
//-----------------------------------------------------------------------
d83 1
a83 2
virtual WitOptProblem * myOptProblem ();
virtual WitDetVar *     mandDetVar   ();
d85 4
a88 1
//------------------------------------------------------------------------
d90 3
a92 8
virtual void uploadSoln () = 0;
//
// Uploads the primal solution for this DetVar to the corresponding
// attribute.

virtual bool isSlbvVar ();
//
// Returns true, iff this DetVar is an SlbvVar.
d94 3
a96 3
//-----------------------------------------------------------------------
// Data access functions.
//-----------------------------------------------------------------------
d98 1
a98 1
accessFunc (WitDetImpOP *, myDetImpOP)
d100 4
a103 4
inline bool hasPeriod ()
{
return (myPeriod_ != -1);
}
d105 3
a107 3
inline WitPeriod myPeriod ()
{
witAssert (hasPeriod ());
d109 2
a110 2
return myPeriod_;
}
d112 1
a112 1
private:
d114 3
a116 3
//-----------------------------------------------------------------------
// Private member functions.
//-----------------------------------------------------------------------
d118 1
a118 1
noCopyCtorAssign (WitDetVar);
d120 3
a122 3
//-----------------------------------------------------------------------
// Overriding private virtual member functions.
//-----------------------------------------------------------------------
d124 1
a124 1
virtual void printSource ();
d126 3
a128 3
//-----------------------------------------------------------------------
// Private pure virtual member functions.
//-----------------------------------------------------------------------
d130 4
a133 4
virtual void printItem () = 0;
//
// Prints to the optProbFile text identifying the non-period
// data from which this DetVar was generated.
d135 3
a137 3
//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------
d139 3
a141 3
WitDetImpOP * const myDetImpOP_;
//
// The DetImpOP that owns this DetVar.
d143 5
a147 5
const WitPeriod myPeriod_;
//
// The Period for this DetVar, if it has one.
// -1, if it doesn't have a Period.
};
d162 2
a163 2
{
public:
d165 3
a167 3
//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------
d169 1
a169 1
WitScrapVar (WitPart *, WitPeriod, WitDetImpOP *);
d171 3
a173 3
//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------
d175 1
a175 1
virtual ~WitScrapVar ();
d177 3
a179 3
//-----------------------------------------------------------------------
// Overriding public virtual member functions.
//-----------------------------------------------------------------------
d181 3
a183 3
virtual double compObjCoeff   ();
virtual double indepInitValue ();
virtual void   uploadSoln     ();
d185 3
a187 3
//-----------------------------------------------------------------------
// Access functions.
//-----------------------------------------------------------------------
d189 1
a189 1
accessFunc (WitPart *, myPart)
d191 1
a191 1
private:
d193 3
a195 3
//-----------------------------------------------------------------------
// Overriding private virtual member functions.
//-----------------------------------------------------------------------
d197 4
a200 4
virtual double       upperBoundVal ();
virtual double       lowerBoundVal ();
virtual const char * classText     ();
virtual void         printItem     ();
d202 3
a204 3
//-----------------------------------------------------------------------
// Other private member functions.
//-----------------------------------------------------------------------
d206 1
a206 1
noCopyCtorAssign (WitScrapVar);
d208 3
a210 3
//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------
d212 4
a215 4
WitPart * const myPart_;
//
// The Part with which this ScrapVar is associated.
};
d230 2
a231 2
{
public:
d233 3
a235 3
//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------
d237 1
a237 1
WitNonSubVar (WitBomEntry *, WitPeriod, WitDetImpOP *);
d239 3
a241 3
//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------
d243 1
a243 1
virtual ~WitNonSubVar ();
d245 3
a247 3
//-----------------------------------------------------------------------
// Overriding public virtual member functions.
//-----------------------------------------------------------------------
d249 3
a251 3
virtual double compObjCoeff   ();
virtual double indepInitValue ();
virtual void   uploadSoln     ();
d253 3
a255 3
//-----------------------------------------------------------------------
// Access functions.
//-----------------------------------------------------------------------
d257 1
a257 1
accessFunc (WitBomEntry *, myBomEnt)
d259 1
a259 1
private:
d261 3
a263 3
//-----------------------------------------------------------------------
// Overriding private virtual member functions.
//-----------------------------------------------------------------------
d265 4
a268 4
virtual double       upperBoundVal ();
virtual double       lowerBoundVal ();
virtual const char * classText     ();
virtual void         printItem     ();
d270 3
a272 3
//-----------------------------------------------------------------------
// Other private member functions.
//-----------------------------------------------------------------------
d274 1
a274 1
noCopyCtorAssign (WitNonSubVar);
d276 3
a278 3
//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------
d280 4
a283 4
WitBomEntry * const myBomEnt_;
//
// The BomEntry with which this NonSubVar is associated.
};
d298 2
a299 2
{
public:
d301 3
a303 3
//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------
d305 1
a305 1
WitSubVar (WitSubEntry *, WitPeriod, WitDetImpOP *);
d307 3
a309 3
//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------
d311 1
a311 1
virtual ~WitSubVar ();
d313 3
a315 3
//-----------------------------------------------------------------------
// Overriding public virtual member functions.
//-----------------------------------------------------------------------
d317 4
a320 4
virtual double compObjCoeff   ();
virtual double indepInitValue ();
virtual bool   isAnIntVar     ();
virtual void   uploadSoln     ();
d322 3
a324 3
//-----------------------------------------------------------------------
// Access functions.
//-----------------------------------------------------------------------
d326 1
a326 1
accessFunc (WitSubEntry *, mySub)
d328 1
a328 1
private:
d330 3
a332 3
//-----------------------------------------------------------------------
// Overriding private virtual member functions.
//-----------------------------------------------------------------------
d334 4
a337 4
virtual double       upperBoundVal ();
virtual double       lowerBoundVal ();
virtual const char * classText     ();
virtual void         printItem     ();
d339 3
a341 3
//-----------------------------------------------------------------------
// Other private member functions.
//-----------------------------------------------------------------------
d343 1
a343 1
noCopyCtorAssign (WitSubVar);
d345 3
a347 3
//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------
d349 4
a352 4
WitSubEntry * const mySub_;
//
// The SubEntry with which this SubVar is associated.
};
d367 2
a368 2
{
public:
d370 3
a372 3
//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------
d374 1
a374 1
WitShipVar (WitDemand *, WitPeriod, WitDetImpOP *);
d376 3
a378 3
//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------
d380 1
a380 1
virtual ~WitShipVar ();
d382 3
a384 3
//-----------------------------------------------------------------------
// Overriding public virtual member functions.
//-----------------------------------------------------------------------
d386 4
a389 4
virtual double compObjCoeff   ();
virtual double indepInitValue ();
virtual bool   isAnIntVar     ();
virtual void   uploadSoln     ();
d391 3
a393 3
//-----------------------------------------------------------------------
// Access functions.
//-----------------------------------------------------------------------
d395 1
a395 1
accessFunc (WitDemand *, myDemand)
d397 1
a397 1
private:
d399 3
a401 3
//-----------------------------------------------------------------------
// Overriding private virtual member functions.
//-----------------------------------------------------------------------
d403 4
a406 4
virtual double       upperBoundVal ();
virtual double       lowerBoundVal ();
virtual const char * classText     ();
virtual void         printItem     ();
d408 3
a410 3
//-----------------------------------------------------------------------
// Other private member functions.
//-----------------------------------------------------------------------
d412 1
a412 1
noCopyCtorAssign (WitShipVar);
d414 3
a416 3
//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------
d418 4
a421 4
WitDemand * const myDemand_;
//
// The Demand with which this ShipVar is associated.
};
d439 2
a440 2
{
public:
d442 3
a444 3
//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------
d446 1
a446 1
WitBoundedVar (WitDetImpOP *, WitPeriod);
d448 3
a450 3
//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------
d452 1
a452 1
virtual ~WitBoundedVar ();
d454 3
a456 3
//-----------------------------------------------------------------------
// Public pure virtual function members.
//-----------------------------------------------------------------------
d458 3
a460 3
virtual WitBoundSet * myBoundSet () = 0;
//
// Returns the BoundSet that bounds this BoundedVar.
d462 3
a464 3
//-----------------------------------------------------------------------
// Other public member functions.
//-----------------------------------------------------------------------
d466 3
a468 3
double hardLB ();
//
// Hard lower bound:         0.0 <= hardLB ()  <  +infinity.
d470 3
a472 3
double softLB ();
//
// Soft lower bound:         0.0 <= softLB ()  <  +infinity.
d474 3
a476 3
double hardUB ();
//
// Hard upper bound:         0.0 <= hardUB ()  <= +infinity.
d478 4
a481 4
bool needsAnSlbvVar ();
//
// Returns true, iff an SlbvVar should be generated for this
// BoundedVar.
d483 3
a485 3
void printBoundInfo ();
//
// Prints bound information of this BoundedVar to optProbFile.
d487 4
a490 4
void printSoln ();
//
// Prints the optimization solution associated with this BoundedVar to
// solnFile.
d492 1
a492 1
private:
d494 3
a496 3
//-----------------------------------------------------------------------
// Private member functions.
//-----------------------------------------------------------------------
d498 2
a499 2
noCopyCtorAssign (WitBoundedVar);
};
d515 2
a516 2
{
public:
d518 3
a520 3
//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------
d522 1
a522 1
WitExecVar (WitOperation *, WitPeriod, WitDetImpOP *);
d524 3
a526 3
//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------
d528 1
a528 1
virtual ~WitExecVar ();
d530 3
a532 3
//-----------------------------------------------------------------------
// Overriding public virtual member functions.
//-----------------------------------------------------------------------
d534 5
a538 5
virtual double        compObjCoeff   ();
virtual double        indepInitValue ();
virtual bool          isAnIntVar     ();
virtual void          uploadSoln     ();
virtual WitBoundSet * myBoundSet     ();
d540 3
a542 3
//-----------------------------------------------------------------------
// Access functions.
//-----------------------------------------------------------------------
d544 1
a544 1
accessFunc (WitOperation *, myOperation)
d546 1
a546 1
private:
d548 3
a550 3
//-----------------------------------------------------------------------
// Overriding private virtual member functions.
//-----------------------------------------------------------------------
d552 4
a555 4
virtual double       upperBoundVal ();
virtual double       lowerBoundVal ();
virtual const char * classText     ();
virtual void         printItem     ();
d557 3
a559 3
//-----------------------------------------------------------------------
// Other private member functions.
//-----------------------------------------------------------------------
d561 1
a561 1
noCopyCtorAssign (WitExecVar);
d563 3
a565 3
//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------
d567 4
a570 4
WitOperation * const myOperation_;
//
// The Operation with which this ExecVar is associated.
};
d586 2
a587 2
{
public:
d589 3
a591 3
//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------
d593 1
a593 1
WitStockVar (WitMaterial *, WitPeriod, WitDetImpOP *);
d595 3
a597 3
//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------
d599 1
a599 1
virtual ~WitStockVar ();
d601 3
a603 3
//-----------------------------------------------------------------------
// Overriding public virtual member functions.
//-----------------------------------------------------------------------
d605 4
a608 4
virtual double        compObjCoeff   ();
virtual double        indepInitValue ();
virtual void          uploadSoln     ();
virtual WitBoundSet * myBoundSet     ();
d610 3
a612 3
//-----------------------------------------------------------------------
// Access functions.
//-----------------------------------------------------------------------
d614 1
a614 1
accessFunc (WitMaterial *, myMaterial)
d616 1
a616 1
private:
d618 3
a620 3
//-----------------------------------------------------------------------
// Overriding private virtual member functions.
//-----------------------------------------------------------------------
d622 4
a625 4
virtual double       upperBoundVal ();
virtual double       lowerBoundVal ();
virtual const char * classText     ();
virtual void         printItem     ();
d627 3
a629 3
//-----------------------------------------------------------------------
// Other private member functions.
//-----------------------------------------------------------------------
d631 1
a631 1
noCopyCtorAssign (WitStockVar);
d633 3
a635 3
//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------
d637 4
a640 4
WitMaterial * const myMaterial_;
//
// The Material with which this StockVar is associated.
};
d656 2
a657 2
{
public:
d659 3
a661 3
//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------
d663 1
a663 1
WitCumShipVar (WitDemand *, WitPeriod, WitDetImpOP *);
d665 3
a667 3
//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------
d669 1
a669 1
virtual ~WitCumShipVar ();
d671 3
a673 3
//-----------------------------------------------------------------------
// Overriding public virtual member functions.
//-----------------------------------------------------------------------
d675 4
a678 4
virtual double        compObjCoeff   ();
virtual double        indepInitValue ();
virtual void          uploadSoln     ();
virtual WitBoundSet * myBoundSet     ();
d680 3
a682 3
//-----------------------------------------------------------------------
// Access functions.
//-----------------------------------------------------------------------
d684 1
a684 1
accessFunc (WitDemand *, myDemand)
d686 1
a686 1
private:
d688 3
a690 3
//-----------------------------------------------------------------------
// Overriding private virtual member functions.
//-----------------------------------------------------------------------
d692 4
a695 4
virtual double       upperBoundVal ();
virtual double       lowerBoundVal ();
virtual const char * classText     ();
virtual void         printItem     ();
d697 3
a699 3
//-----------------------------------------------------------------------
// Other private member functions.
//-----------------------------------------------------------------------
d701 1
a701 1
noCopyCtorAssign (WitCumShipVar);
d703 3
a705 3
//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------
d707 4
a710 4
WitDemand * const myDemand_;
//
// The Demand with which this CumShipVar is associated.
};
d725 2
a726 2
{
public:
d728 3
a730 3
//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------
d732 1
a732 1
WitSlbvVar (WitBoundedVar *, WitDetImpOP *);
d734 3
a736 3
//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------
d738 1
a738 1
virtual ~WitSlbvVar ();
d740 3
a742 3
//-----------------------------------------------------------------------
// Overriding public virtual member functions.
//-----------------------------------------------------------------------
d744 3
a746 3
virtual double compObjCoeff ();
virtual void   uploadSoln   ();
virtual bool   isSlbvVar    ();
d748 3
a750 3
//-----------------------------------------------------------------------
// Other public member functions.
//-----------------------------------------------------------------------
d752 4
a755 4
inline WitBoundSet * myBoundSet ();
//
// Returns myBoundedVar_->myBoundSet ().
// Implemented in this file just below class BoundedVar.
d757 1
a757 1
private:
d759 3
a761 3
//-----------------------------------------------------------------------
// Overriding private virtual member functions.
//-----------------------------------------------------------------------
d763 4
a766 4
virtual double       upperBoundVal ();
virtual double       lowerBoundVal ();
virtual const char * classText     ();
virtual void         printItem     ();
d768 3
a770 3
//-----------------------------------------------------------------------
// Other private member functions.
//-----------------------------------------------------------------------
d772 1
a772 1
noCopyCtorAssign (WitSlbvVar);
d774 3
a776 3
//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------
d778 4
a781 4
WitBoundedVar * const myBoundedVar_;
//
// The BoundedVar to which this SlbvVar applies.
};
d798 2
a799 2
{
public:
d801 3
a803 3
//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------
d805 1
a805 1
WitMultiObjVar (WitObjective *, WitDetImpOP *);
d807 3
a809 3
//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------
d811 1
a811 1
virtual ~WitMultiObjVar ();
d813 3
a815 3
//-----------------------------------------------------------------------
// Overriding public virtual member functions.
//-----------------------------------------------------------------------
d817 4
a820 4
virtual double       compObjCoeff       ();
virtual void         uploadSoln         ();
virtual const char * lexObjElemName     ();
virtual void         reportLexUnbounded ();
d822 3
a824 3
//-----------------------------------------------------------------------
// Access functions.
//-----------------------------------------------------------------------
d826 1
a826 1
accessFunc (WitObjective *, myObj)
d828 1
a828 1
private:
d830 3
a832 3
//-----------------------------------------------------------------------
// Overriding private virtual member functions.
//-----------------------------------------------------------------------
d834 4
a837 4
virtual double       upperBoundVal ();
virtual double       lowerBoundVal ();
virtual const char * classText     ();
virtual void         printItem     ();
d839 3
a841 3
//-----------------------------------------------------------------------
// Other private member functions.
//-----------------------------------------------------------------------
d843 1
a843 1
noCopyCtorAssign (WitMultiObjVar);
d845 3
a847 3
//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------
d849 4
a852 4
WitObjective * const myObj_;
//
// The Objective with which this MultiObjVar is associated.
};
d869 2
a870 2
{
public:
d872 3
a874 3
//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------
d876 1
a876 1
WitNtbvVar (WitDetImpOP *);
d878 3
a880 3
//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------
d882 1
a882 1
virtual ~WitNtbvVar ();
d884 3
a886 3
//-----------------------------------------------------------------------
// Overriding public virtual member functions.
//-----------------------------------------------------------------------
d888 4
a891 4
virtual double       compObjCoeff       ();
virtual void         uploadSoln         ();
virtual const char * lexObjElemName     ();
virtual void         reportLexUnbounded ();
d893 1
a893 1
private:
d895 3
a897 3
//-----------------------------------------------------------------------
// Overriding private virtual member functions.
//-----------------------------------------------------------------------
d899 4
a902 4
virtual double       upperBoundVal ();
virtual double       lowerBoundVal ();
virtual const char * classText     ();
virtual void         printItem     ();
d904 3
a906 3
//-----------------------------------------------------------------------
// Other private member functions.
//-----------------------------------------------------------------------
d908 2
a909 2
noCopyCtorAssign (WitNtbvVar);
};
d916 3
a918 3
{
return myBoundedVar_->myBoundSet ();
}
@


1.30
log
@CPLEX
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 1
a6 1
//     IBM Confidential 
d59 2
a60 2
   {
   public:
d62 3
a64 3
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------
d66 1
a66 1
      WitDetVar (WitDetImpOP *, WitPeriod);
d68 1
a68 1
      WitDetVar (WitDetImpOP *);
d70 3
a72 3
      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------
d74 1
a74 5
      virtual ~WitDetVar ();
 
      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------
d76 3
a78 2
      virtual WitOptProblem * myOptProblem ();
      virtual WitDetVar *     mandDetVar   ();
d80 2
a81 1
      //------------------------------------------------------------------------
d83 1
a83 4
      virtual void uploadSoln () = 0;
         //
         // Uploads the primal solution for this DetVar to the corresponding
         // attribute.
d85 8
a92 3
      virtual bool isSlbvVar ();
         //
         // Returns true, iff this DetVar is an SlbvVar.
d94 3
a96 3
      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------
d98 1
a98 1
      accessFunc (WitDetImpOP *, myDetImpOP)
d100 4
a103 4
      inline bool hasPeriod ()
         {
         return (myPeriod_ != -1);
         }
d105 3
a107 3
      inline WitPeriod myPeriod ()
         {
         witAssert (hasPeriod ());
d109 2
a110 2
         return myPeriod_;
         }
d112 1
a112 1
   private:
d114 3
a116 3
      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------
d118 1
a118 1
      noCopyCtorAssign (WitDetVar);
d120 3
a122 3
      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------
d124 1
a124 1
      virtual void printSource ();
d126 3
a128 3
      //-----------------------------------------------------------------------
      // Private pure virtual member functions.
      //-----------------------------------------------------------------------
d130 4
a133 4
      virtual void printItem () = 0;
         //
         // Prints to the optProbFile text identifying the non-period
         // data from which this DetVar was generated.
d135 3
a137 3
      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------
d139 3
a141 3
      WitDetImpOP * const myDetImpOP_;
         //
         // The DetImpOP that owns this DetVar.
d143 5
a147 5
      const WitPeriod myPeriod_;
         //
         // The Period for this DetVar, if it has one.
         // -1, if it doesn't have a Period.
   };
d162 2
a163 2
   {
   public:
d165 3
a167 3
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------
d169 1
a169 1
      WitScrapVar (WitPart *, WitPeriod, WitDetImpOP *);
d171 3
a173 3
      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------
d175 1
a175 1
      virtual ~WitScrapVar ();
d177 3
a179 3
      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------
d181 3
a183 3
      virtual double compObjCoeff   ();
      virtual double indepInitValue ();
      virtual void   uploadSoln     ();
d185 3
a187 3
      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------
d189 1
a189 1
      accessFunc (WitPart *, myPart)
d191 1
a191 1
   private:
d193 3
a195 3
      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------
d197 4
a200 4
      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();
d202 3
a204 3
      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------
d206 1
a206 1
      noCopyCtorAssign (WitScrapVar);
d208 3
a210 3
      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------
d212 4
a215 4
      WitPart * const myPart_;
         //
         // The Part with which this ScrapVar is associated.
   };
d230 2
a231 2
   {
   public:
d233 3
a235 3
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------
d237 1
a237 1
      WitNonSubVar (WitBomEntry *, WitPeriod, WitDetImpOP *);
d239 3
a241 3
      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------
d243 1
a243 1
      virtual ~WitNonSubVar ();
d245 3
a247 3
      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------
d249 3
a251 3
      virtual double compObjCoeff   ();
      virtual double indepInitValue ();
      virtual void   uploadSoln     ();
d253 3
a255 3
      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------
d257 1
a257 1
      accessFunc (WitBomEntry *, myBomEnt)
d259 1
a259 1
   private:
d261 3
a263 3
      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------
d265 4
a268 4
      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();
d270 3
a272 3
      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------
d274 1
a274 1
      noCopyCtorAssign (WitNonSubVar);
d276 3
a278 3
      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------
d280 4
a283 4
      WitBomEntry * const myBomEnt_;
         //
         // The BomEntry with which this NonSubVar is associated.
   };
d298 2
a299 2
   {
   public:
d301 3
a303 3
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------
d305 1
a305 1
      WitSubVar (WitSubEntry *, WitPeriod, WitDetImpOP *);
d307 3
a309 3
      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------
d311 1
a311 1
      virtual ~WitSubVar ();
d313 3
a315 3
      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------
d317 4
a320 4
      virtual double compObjCoeff   ();
      virtual double indepInitValue ();
      virtual bool   isAnIntVar     ();
      virtual void   uploadSoln     ();
d322 3
a324 3
      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------
d326 1
a326 1
      accessFunc (WitSubEntry *, mySub)
d328 1
a328 1
   private:
d330 3
a332 3
      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------
d334 4
a337 4
      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();
d339 3
a341 3
      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------
d343 1
a343 1
      noCopyCtorAssign (WitSubVar);
d345 3
a347 3
      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------
d349 4
a352 4
      WitSubEntry * const mySub_;
         //
         // The SubEntry with which this SubVar is associated.
   };
d367 2
a368 2
   {
   public:
d370 3
a372 3
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------
d374 1
a374 1
      WitShipVar (WitDemand *, WitPeriod, WitDetImpOP *);
d376 3
a378 3
      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------
d380 1
a380 1
      virtual ~WitShipVar ();
d382 3
a384 3
      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------
d386 4
a389 4
      virtual double compObjCoeff   ();
      virtual double indepInitValue ();
      virtual bool   isAnIntVar     ();
      virtual void   uploadSoln     ();
d391 3
a393 3
      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------
d395 1
a395 1
      accessFunc (WitDemand *, myDemand)
d397 1
a397 1
   private:
d399 3
a401 3
      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------
d403 4
a406 4
      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();
d408 3
a410 3
      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------
d412 1
a412 1
      noCopyCtorAssign (WitShipVar);
d414 3
a416 3
      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------
d418 4
a421 4
      WitDemand * const myDemand_;
         //
         // The Demand with which this ShipVar is associated.
   };
d439 2
a440 2
   {
   public:
d442 3
a444 3
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------
d446 1
a446 1
      WitBoundedVar (WitDetImpOP *, WitPeriod);
d448 3
a450 3
      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------
d452 1
a452 1
      virtual ~WitBoundedVar ();
d454 3
a456 3
      //-----------------------------------------------------------------------
      // Public pure virtual function members.
      //-----------------------------------------------------------------------
d458 3
a460 3
      virtual WitBoundSet * myBoundSet () = 0;
         //
         // Returns the BoundSet that bounds this BoundedVar.
d462 3
a464 3
      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------
d466 3
a468 3
      double hardLB ();
         //
         // Hard lower bound:         0.0 <= hardLB ()  <  +infinity.
d470 3
a472 3
      double softLB ();
         //
         // Soft lower bound:         0.0 <= softLB ()  <  +infinity.
d474 3
a476 3
      double hardUB ();
         //
         // Hard upper bound:         0.0 <= hardUB ()  <= +infinity.
d478 4
a481 4
      bool needsAnSlbvVar ();
         //
         // Returns true, iff an SlbvVar should be generated for this
         // BoundedVar.
d483 3
a485 3
      void printBoundInfo ();
         //
         // Prints bound information of this BoundedVar to optProbFile.
d487 4
a490 4
      void printSoln ();
         //
         // Prints the optimization solution associated with this BoundedVar to
         // solnFile.
d492 1
a492 1
   private:
d494 3
a496 3
      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------
d498 2
a499 2
      noCopyCtorAssign (WitBoundedVar);
   };
d515 2
a516 2
   {
   public:
d518 3
a520 3
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------
d522 1
a522 1
      WitExecVar (WitOperation *, WitPeriod, WitDetImpOP *);
d524 3
a526 3
      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------
d528 1
a528 1
      virtual ~WitExecVar ();
d530 3
a532 3
      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------
d534 5
a538 5
      virtual double        compObjCoeff   ();
      virtual double        indepInitValue ();
      virtual bool          isAnIntVar     ();
      virtual void          uploadSoln     ();
      virtual WitBoundSet * myBoundSet     ();
d540 3
a542 3
      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------
d544 1
a544 1
      accessFunc (WitOperation *, myOperation)
d546 1
a546 1
   private:
d548 3
a550 3
      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------
d552 4
a555 4
      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();
d557 3
a559 3
      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------
d561 1
a561 1
      noCopyCtorAssign (WitExecVar);
d563 3
a565 3
      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------
d567 4
a570 4
      WitOperation * const myOperation_;
         //
         // The Operation with which this ExecVar is associated.
   };
d586 2
a587 2
   {
   public:
d589 3
a591 3
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------
d593 1
a593 1
      WitStockVar (WitMaterial *, WitPeriod, WitDetImpOP *);
d595 3
a597 3
      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------
d599 1
a599 1
      virtual ~WitStockVar ();
d601 3
a603 3
      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------
d605 4
a608 4
      virtual double        compObjCoeff   ();
      virtual double        indepInitValue ();
      virtual void          uploadSoln     ();
      virtual WitBoundSet * myBoundSet     ();
d610 3
a612 3
      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------
d614 1
a614 1
      accessFunc (WitMaterial *, myMaterial)
d616 1
a616 1
   private:
d618 3
a620 3
      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------
d622 4
a625 4
      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();
d627 3
a629 3
      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------
d631 1
a631 1
      noCopyCtorAssign (WitStockVar);
d633 3
a635 3
      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------
d637 4
a640 4
      WitMaterial * const myMaterial_;
         //
         // The Material with which this StockVar is associated.
   };
d656 2
a657 2
   {
   public:
d659 3
a661 3
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------
d663 1
a663 1
      WitCumShipVar (WitDemand *, WitPeriod, WitDetImpOP *);
d665 3
a667 3
      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------
d669 1
a669 1
      virtual ~WitCumShipVar ();
d671 3
a673 3
      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------
d675 4
a678 4
      virtual double        compObjCoeff   ();
      virtual double        indepInitValue ();
      virtual void          uploadSoln     ();
      virtual WitBoundSet * myBoundSet     ();
d680 3
a682 3
      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------
d684 1
a684 1
      accessFunc (WitDemand *, myDemand)
d686 1
a686 1
   private:
d688 3
a690 3
      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------
d692 4
a695 4
      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();
d697 3
a699 3
      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------
d701 1
a701 1
      noCopyCtorAssign (WitCumShipVar);
d703 3
a705 3
      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------
d707 4
a710 4
      WitDemand * const myDemand_;
         //
         // The Demand with which this CumShipVar is associated.
   };
d725 2
a726 2
   {
   public:
d728 3
a730 3
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------
d732 1
a732 1
      WitSlbvVar (WitBoundedVar *, WitDetImpOP *);
d734 3
a736 3
      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------
d738 1
a738 1
      virtual ~WitSlbvVar ();
d740 3
a742 3
      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------
d744 3
a746 3
      virtual double compObjCoeff ();
      virtual void   uploadSoln   ();
      virtual bool   isSlbvVar    ();
d748 3
a750 3
      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------
d752 4
a755 4
      inline WitBoundSet * myBoundSet ();
         //
         // Returns myBoundedVar_->myBoundSet ().
         // Implemented in this file just below class BoundedVar.
d757 1
a757 1
   private:
d759 3
a761 3
      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------
d763 4
a766 4
      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();
d768 3
a770 3
      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------
d772 1
a772 1
      noCopyCtorAssign (WitSlbvVar);
d774 3
a776 3
      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------
d778 4
a781 4
      WitBoundedVar * const myBoundedVar_;
         //
         // The BoundedVar to which this SlbvVar applies.
   };
d798 2
a799 2
   {
   public:
d801 3
a803 3
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------
d805 1
a805 1
      WitMultiObjVar (WitObjective *, WitDetImpOP *);
d807 3
a809 3
      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------
d811 1
a811 1
      virtual ~WitMultiObjVar ();
d813 3
a815 3
      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------
d817 4
a820 4
      virtual double       compObjCoeff       ();
      virtual void         uploadSoln         ();
      virtual const char * lexObjElemName     ();
      virtual void         reportLexUnbounded ();
d822 3
a824 3
      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------
d826 1
a826 1
      accessFunc (WitObjective *, myObj)
d828 1
a828 1
   private:
d830 3
a832 3
      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------
d834 4
a837 4
      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();
d839 3
a841 3
      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------
d843 1
a843 1
      noCopyCtorAssign (WitMultiObjVar);
d845 3
a847 3
      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------
d849 4
a852 4
      WitObjective * const myObj_;
         //
         // The Objective with which this MultiObjVar is associated.
   };
d869 2
a870 2
   {
   public:
d872 3
a874 3
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------
d876 1
a876 1
      WitNtbvVar (WitDetImpOP *);
d878 3
a880 3
      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------
d882 1
a882 1
      virtual ~WitNtbvVar ();
d884 3
a886 3
      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------
d888 4
a891 4
      virtual double       compObjCoeff       ();
      virtual void         uploadSoln         ();
      virtual const char * lexObjElemName     ();
      virtual void         reportLexUnbounded ();
d893 1
a893 1
   private:
d895 3
a897 3
      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------
d899 4
a902 4
      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();
d904 3
a906 3
      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------
d908 2
a909 2
      noCopyCtorAssign (WitNtbvVar);
   };
d916 3
a918 3
   {
   return myBoundedVar_->myBoundSet ();
   }
@


1.29
log
@Removed OptObj classes.
@
text
@d38 1
a38 1
// An OptVar in a deterministic implosion optimization model.
d66 1
a66 1
      WitDetVar (WitDetImpOM *, WitPeriod);
d68 1
a68 1
      WitDetVar (WitDetImpOM *);
d80 2
a81 2
      virtual WitOptModel * myOptModel ();
      virtual WitDetVar *   mandDetVar ();
d98 1
a98 1
      accessFunc (WitDetImpOM *, myDetImpOM)
d132 1
a132 1
         // Prints to the modelFile text identifying the non-period
d139 1
a139 1
      WitDetImpOM * const myDetImpOM_;
d141 1
a141 1
         // The DetImpOM that owns this DetVar.
d151 1
a151 1
// A scrap variable in the optimization model.
d169 1
a169 1
      WitScrapVar (WitPart *, WitPeriod, WitDetImpOM *);
d219 1
a219 1
// A non-substitution variable in the optimization model.
d237 1
a237 1
      WitNonSubVar (WitBomEntry *, WitPeriod, WitDetImpOM *);
d287 1
a287 1
// A substitution variable in the optimization model.
d305 1
a305 1
      WitSubVar (WitSubEntry *, WitPeriod, WitDetImpOM *);
d356 1
a356 1
// A shipment variable in the optimization model.
d374 1
a374 1
      WitShipVar (WitDemand *, WitPeriod, WitDetImpOM *);
d425 1
a425 1
// A variable with user-specified bounds in the optimization model.
d446 1
a446 1
      WitBoundedVar (WitDetImpOM *, WitPeriod);
d485 1
a485 1
         // Prints bound information of this BoundedVar to modelFile.
d503 1
a503 1
// An execution variable in the optimization model.
d522 1
a522 1
      WitExecVar (WitOperation *, WitPeriod, WitDetImpOM *);
d574 1
a574 1
// A stock variable in the optimization model.
d593 1
a593 1
      WitStockVar (WitMaterial *, WitPeriod, WitDetImpOM *);
d644 1
a644 1
// A cumulative shipment variable in the optimization model.
d663 1
a663 1
      WitCumShipVar (WitDemand *, WitPeriod, WitDetImpOM *);
d714 1
a714 1
// A soft lower bound violation variable in the optimization model.
d732 1
a732 1
      WitSlbvVar (WitBoundedVar *, WitDetImpOM *);
d785 1
a785 1
// A multiple objectives variable in the optimization model: a variable whose
d805 1
a805 1
      WitMultiObjVar (WitObjective *, WitDetImpOM *);
d856 1
a856 1
// A negative total bound violation variable in the optimization model:
d876 1
a876 1
      WitNtbvVar (WitDetImpOM *);
@


1.28
log
@Removed some unneeded functions.
@
text
@a84 5
      virtual double detCoeffVal () = 0;
         //
         // Computes and returns the coefficient value of this DetVar in the
         // DetObj.

d181 3
a183 3
      virtual double indepInitValue  ();
      virtual double detCoeffVal     ();
      virtual void   uploadSoln      ();
d249 1
a250 1
      virtual double detCoeffVal    ();
d317 1
a319 1
      virtual double detCoeffVal    ();
d386 1
a388 1
      virtual double detCoeffVal    ();
d534 1
a536 1
      virtual double        detCoeffVal    ();
d605 1
a606 1
      virtual double        detCoeffVal    ();
d675 1
a676 1
      virtual double        detCoeffVal    ();
d744 3
a746 3
      virtual double detCoeffVal ();
      virtual void   uploadSoln  ();
      virtual bool   isSlbvVar   ();
d817 1
a817 1
      virtual double       detCoeffVal        ();
d888 1
a888 1
      virtual double       detCoeffVal        ();
@


1.27
log
@Removed class BoundsObj.
@
text
@a83 5
      // <obj>CoeffVal functions.
      // Each of these functions computes and returns the value of the Coeff of
      // this OptVar in the indicated objective.
      // The base class implementation returns 0.
      //------------------------------------------------------------------------
d85 4
a88 4
      virtual double boundsCoeffVal  ();
      virtual double primaryCoeffVal ();

      //------------------------------------------------------------------------
d187 1
a187 1
      virtual double primaryCoeffVal ();
d255 1
d322 4
a325 4
      virtual double indepInitValue  ();
      virtual bool   isAnIntVar      ();
      virtual double primaryCoeffVal ();
      virtual void   uploadSoln      ();
d391 4
a394 4
      virtual double indepInitValue  ();
      virtual bool   isAnIntVar      ();
      virtual double primaryCoeffVal ();
      virtual void   uploadSoln      ();
d539 5
a543 5
      virtual double        indepInitValue  ();
      virtual bool          isAnIntVar      ();
      virtual double        primaryCoeffVal ();
      virtual void          uploadSoln      ();
      virtual WitBoundSet * myBoundSet      ();
d610 4
a613 4
      virtual double        indepInitValue  ();
      virtual double        primaryCoeffVal ();
      virtual void          uploadSoln      ();
      virtual WitBoundSet * myBoundSet      ();
d681 1
a702 6
      // Static private member functions.
      //-----------------------------------------------------------------------

      virtual double primaryCoeffVal ();

      //-----------------------------------------------------------------------
d749 3
a751 3
      virtual double boundsCoeffVal ();
      virtual void   uploadSoln     ();
      virtual bool   isSlbvVar      ();
d822 1
d893 1
@


1.26
log
@Multi-Obj Mode
@
text
@d100 4
d760 1
@


1.25
log
@Multi-Obj Mode
@
text
@d29 1
a29 1
//    TbvVar
d55 1
a55 1
//             TbvVar
d863 4
a866 4
// class TbvVar
// A total bound violation variable in the optimization model: a variable whose
// value is constrained to be negative of the sum of the violations of soft
// lower bounds in the solution.
d873 1
a873 1
//             TbvVar
d876 1
a876 1
class WitTbvVar: public WitDetVar
d884 1
a884 1
      WitTbvVar (WitDetImpOM *);
d890 1
a890 1
      virtual ~WitTbvVar ();
d915 1
a915 1
      noCopyCtorAssign (WitTbvVar);
@


1.24
log
@Multi-Obj Mode
@
text
@d29 1
d55 1
d863 56
@


1.23
log
@Multi-Obj Mode
@
text
@d825 1
a825 1
      virtual const char * lexObjCompName     ();
@


1.22
log
@multi-obj mode
@
text
@d825 1
a825 1
      virtual const char * lexObjElemName     ();
@


1.21
log
@Multi-objective mode
@
text
@d792 3
a794 3
// A multi-objective variable in the optimization model: a variable whose value
// is constrained to match the value of one of the Objectives in multi-objective
// mode.
@


1.20
log
@Multi-objective mode
@
text
@d824 3
a826 3
      virtual void              uploadSoln         ();
      virtual const WitString & lexObjElemName     ();
      virtual void              reportLexUnbounded ();
@


1.19
log
@Multi-objective mode
@
text
@d824 3
a826 2
      virtual void              uploadSoln     ();
      virtual const WitString & lexObjElemName ();
@


1.18
log
@Multi-objective mode
@
text
@d824 2
a825 1
      virtual void uploadSoln ();
@


1.17
log
@Multi-objective mode
@
text
@d28 1
d53 1
d66 2
d103 12
a114 1
      accessFunc (WitPeriod,     myPeriod)
d149 2
a150 1
         // The period for this DetVar.
d791 68
@


1.16
log
@Stochastic Implosion
@
text
@a85 4
      virtual double revCoeffVal     ();
      virtual double invCoeffVal     ();
      virtual double servCoeffVal    ();
      virtual double subCoeffVal     ();
a170 1
      virtual double     revCoeffVal ();
a237 1
      virtual double    invCoeffVal ();
a306 3
      virtual double revCoeffVal     ();
      virtual double invCoeffVal     ();
      virtual double subCoeffVal     ();
a375 1
      virtual double     revCoeffVal ();
a523 2
      virtual double            revCoeffVal ();
      virtual double            invCoeffVal ();
a593 1
      virtual double        invCoeffVal     ();
a687 1
      virtual double    servCoeffVal ();
@


1.15
log
@Stochastic Implosion
@
text
@d36 1
a36 1
// An OptVar in a deterministic implosion optimization problem.
d143 1
a143 1
// A scrap variable in the optimization problem.
d212 1
a212 1
// A non-substitution variable in the optimization problem.
d280 1
a280 1
// A substitution variable in the optimization problem.
d352 1
a352 1
// A shipment variable in the optimization problem.
d422 1
a422 1
// A variable with user-specified bounds in the optimization problem.
d500 1
a500 1
// An execution variable in the optimization problem.
d573 1
a573 1
// A stock variable in the optimization problem.
d644 1
a644 1
// A cumulative shipment variable in the optimization problem.
d720 1
a720 1
// A soft lower bound violation variable in the optimization problem.
@


1.14
log
@Stochastic Implosion
@
text
@d125 1
a125 1
         // Prints to the optProbFile text identifying the non-period
d482 1
a482 1
         // Prints bound information of this BoundedVar to optProbFile.
@


1.13
log
@Stochastic Implosion
@
text
@d62 1
a62 1
      WitDetVar (WitDetImpOP *, WitPeriod);
d102 1
a102 1
      accessFunc (WitDetImpOP *, myDetImpOP)
d132 1
a132 1
      WitDetImpOP * const myDetImpOP_;
d134 1
a134 1
         // The DetImpOP that owns this DetVar.
d161 1
a161 1
      WitScrapVar (WitPart *, WitPeriod, WitDetImpOP *);
d230 1
a230 1
      WitNonSubVar (WitBomEntry *, WitPeriod, WitDetImpOP *);
d298 1
a298 1
      WitSubVar (WitSubEntry *, WitPeriod, WitDetImpOP *);
d370 1
a370 1
      WitShipVar (WitDemand *, WitPeriod, WitDetImpOP *);
d443 1
a443 1
      WitBoundedVar (WitDetImpOP *, WitPeriod);
d519 1
a519 1
      WitExecVar (WitOperation *, WitPeriod, WitDetImpOP *);
d592 1
a592 1
      WitStockVar (WitMaterial *, WitPeriod, WitDetImpOP *);
d663 1
a663 1
      WitCumShipVar (WitDemand *, WitPeriod, WitDetImpOP *);
d738 1
a738 1
      WitSlbvVar (WitBoundedVar *, WitDetImpOP *);
@


1.12
log
@Stochastic Implosion
@
text
@d74 2
a75 2
      virtual WitOptProb * myOptProb  ();
      virtual WitDetVar *  mandDetVar ();
@


1.11
log
@Stochastic Implosion
@
text
@d40 1
a40 1
//    OptProbEl
d147 1
a147 1
//    OptProbEl
d216 1
a216 1
//    OptProbEl
d284 1
a284 1
//    OptProbEl
d356 1
a356 1
//    OptProbEl
d426 1
a426 1
//    OptProbEl
d504 1
a504 1
//    OptProbEl
d577 1
a577 1
//    OptProbEl
d648 1
a648 1
//    OptProbEl
d724 1
a724 1
//    OptProbEl
@


1.10
log
@Stochastic Implosion
@
text
@d455 1
a455 1
      virtual const WitBoundSet * myBoundSet () = 0;
d531 7
a537 8
      virtual double indepInitValue  ();
      virtual bool   isAnIntVar      ();
      virtual double primaryCoeffVal ();
      virtual double     revCoeffVal ();
      virtual double     invCoeffVal ();
      virtual void   uploadSoln      ();

      virtual const WitBoundSet * myBoundSet ();
d604 5
a608 5
      virtual double              indepInitValue  ();
      virtual double              primaryCoeffVal ();
      virtual double              invCoeffVal     ();
      virtual void                uploadSoln      ();
      virtual const WitBoundSet * myBoundSet      ();
d675 3
a677 3
      virtual double              indepInitValue ();
      virtual void                uploadSoln     ();
      virtual const WitBoundSet * myBoundSet     ();
d757 1
a757 1
      inline const WitBoundSet * myBoundSet ();
d792 1
a792 1
inline const WitBoundSet * WitSlbvVar::myBoundSet ()
@


1.9
log
@Stochastic Implosion
@
text
@d91 7
d176 1
d244 1
d316 1
d386 1
d536 1
d608 1
d677 1
d752 1
@


1.8
log
@Stochastic Implosion
@
text
@a22 1
//    SlbvVar
d27 1
a46 1
//             SlbvVar
d51 1
a409 69
// class SlbvVar
// A soft lower bound violation variable in the optimization problem.
//
// Class hierarchy:
//
//    OptProbEl
//       OptVar
//          DetVar
//             SlbvVar
//------------------------------------------------------------------------------

class WitSlbvVar: public WitDetVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitSlbvVar (WitBoundedVar *, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitSlbvVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double boundsCoeffVal ();

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      inline const WitBoundSet * myBoundSet ();
         //
         // Returns myBoundedVar_->myBoundSet ().
         // Implemented in this file just below class BoundedVar.

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual double       upperBoundVal ();
      virtual double       lowerBoundVal ();
      virtual const char * classText     ();
      virtual void         printItem     ();

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitSlbvVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitBoundedVar * const myBoundedVar_;
         //
         // The BoundedVar to which this SlbvVar applies.
   };

//------------------------------------------------------------------------------
a487 9
// Implementation of inline functions that depend on class BoundedVar.
//------------------------------------------------------------------------------

inline const WitBoundSet * WitSlbvVar::myBoundSet ()
   {
   return myBoundedVar_->myBoundSet ();
   }

//------------------------------------------------------------------------------
d705 78
@


1.7
log
@Stochastic Implosion
@
text
@d182 4
a185 4
      virtual double       compUpperBound ();
      virtual double       compLowerBound ();
      virtual const char * classText      ();
      virtual void         printItem      ();
d249 4
a252 4
      virtual double       compUpperBound ();
      virtual double       compLowerBound ();
      virtual const char * classText      ();
      virtual void         printItem      ();
d320 4
a323 4
      virtual double       compUpperBound ();
      virtual double       compLowerBound ();
      virtual const char * classText      ();
      virtual void         printItem      ();
d389 4
a392 4
      virtual double       compUpperBound ();
      virtual double       compLowerBound ();
      virtual const char * classText      ();
      virtual void         printItem      ();
d458 4
a461 4
      virtual double       compUpperBound ();
      virtual double       compLowerBound ();
      virtual const char * classText      ();
      virtual void         printItem      ();
d618 4
a621 4
      virtual double       compUpperBound ();
      virtual double       compLowerBound ();
      virtual const char * classText      ();
      virtual void         printItem      ();
d688 4
a691 4
      virtual double       compUpperBound ();
      virtual double       compLowerBound ();
      virtual const char * classText      ();
      virtual void         printItem      ();
d756 4
a759 4
      virtual double       compUpperBound ();
      virtual double       compLowerBound ();
      virtual const char * classText      ();
      virtual void         printItem      ();
@


1.6
log
@Stochastic Implosion
@
text
@d182 4
a185 2
      virtual const char * classText ();
      virtual void         printItem ();
d249 4
a252 2
      virtual const char * classText ();
      virtual void         printItem ();
d320 4
a323 2
      virtual const char * classText ();
      virtual void         printItem ();
a371 8
      virtual void compBounds ();
         //
         // Computes the bounds for this ShipVar.
         // If shipLateAllowed:
         //    [0, +infinity)
         // Else:
         //    [0, demandVol]

d389 4
a392 2
      virtual const char * classText ();
      virtual void         printItem ();
d458 4
a461 3
      virtual const char * classText ();

      virtual void printItem ();
a517 8
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual void compBounds ();
         //
         // Computes the bounds for this BoundedVar.

      //-----------------------------------------------------------------------
a546 12
   protected:

      //-----------------------------------------------------------------------
      // Protected virtual member functions.
      //-----------------------------------------------------------------------

      virtual void compSpecBounds ();
         //
         // Computes the bounds for this BoundedVar other than those derived
         // from myBoundSet_.
         // The base class implementation computes the bounds as [0, infinity).

d618 4
a621 2
      virtual const char * classText ();
      virtual void         printItem ();
d671 4
a674 5
      virtual double  indepInitValue ();
      virtual double primaryCoeffVal ();
      virtual double     invCoeffVal ();

      virtual const WitBoundSet * myBoundSet ();
d688 4
a691 2
      virtual const char * classText ();
      virtual void         printItem ();
d756 4
a759 4
      virtual const char * classText ();
      virtual void         printItem ();

      virtual void compSpecBounds ();
@


1.5
log
@Stochastic Implosion
@
text
@d84 3
a86 3
      virtual double boundsCoeffVal  () const;
      virtual double primaryCoeffVal () const;
      virtual double revCoeffVal     () const;
d89 1
a89 1
      virtual double subCoeffVal     () const;
d116 1
a116 1
      virtual void printItem () const = 0;
d167 2
a168 2
      virtual double primaryCoeffVal () const;
      virtual double     revCoeffVal () const;
d183 1
a183 1
      virtual void         printItem () const;
d248 1
a248 1
      virtual void         printItem () const;
d299 2
a300 2
      virtual double primaryCoeffVal () const;
      virtual double revCoeffVal     () const;
d302 1
a302 1
      virtual double subCoeffVal     () const;
d317 1
a317 1
      virtual void         printItem () const;
d376 2
a377 2
      virtual double primaryCoeffVal () const;
      virtual double     revCoeffVal () const;
d392 1
a392 1
      virtual void         printItem () const;
d441 1
a441 1
      virtual double boundsCoeffVal () const;
d447 1
a447 1
      inline const WitBoundSet * myBoundSet () const;
d460 1
a460 1
      virtual void printItem () const;
d512 1
a512 1
      virtual const WitBoundSet * myBoundSet () const = 0;
d528 1
a528 1
      double hardLB () const;
d532 1
a532 1
      double softLB () const;
d536 1
a536 1
      double hardUB () const;
d579 1
a579 1
inline const WitBoundSet * WitSlbvVar::myBoundSet () const
d619 2
a620 2
      virtual double primaryCoeffVal () const;
      virtual double     revCoeffVal () const;
d623 1
a623 1
      virtual const WitBoundSet * myBoundSet () const;
d638 1
a638 1
      virtual void         printItem () const;
d689 1
a689 1
      virtual double primaryCoeffVal () const;
d692 1
a692 1
      virtual const WitBoundSet * myBoundSet () const;
d707 1
a707 1
      virtual void         printItem () const;
d758 1
a758 1
      virtual const WitBoundSet * myBoundSet     () const;
d773 1
a773 1
      virtual void         printItem () const;
d781 1
a781 1
      virtual double primaryCoeffVal () const;
@


1.4
log
@Stochastic Implosion
@
text
@d74 2
a75 2
      virtual WitOptProb *       myOptProb  () const;
      virtual const WitDetVar *  mandDetVar () const;
d87 2
a88 2
      virtual double invCoeffVal     () const;
      virtual double servCoeffVal    () const;
d110 1
a110 1
      virtual void printSource () const;
d166 1
a166 2
      virtual double indepInitValue () const;

d182 2
a183 3
      virtual const char * classText () const;

      virtual void printItem () const;
d232 2
a233 3
      virtual double indepInitValue () const;

      virtual double    invCoeffVal () const;
d247 2
a248 3
      virtual const char * classText () const;

      virtual void printItem () const;
d297 2
a298 4
      virtual double indepInitValue  () const;

      virtual bool   isAnIntVar      () const;

d301 1
a301 1
      virtual double invCoeffVal     () const;
d316 2
a317 3
      virtual const char * classText () const;

      virtual void printItem () const;
d374 2
a375 4
      virtual double indepInitValue  () const;

      virtual bool   isAnIntVar      () const;

d391 2
a392 3
      virtual const char * classText () const;

      virtual void printItem () const;
d458 1
a458 1
      virtual const char * classText () const;
d540 1
a540 1
      bool needsAnSlbvVar () const;
d617 2
a618 4
      virtual double indepInitValue  () const;

      virtual bool   isAnIntVar      () const;

d621 1
a621 1
      virtual double     invCoeffVal () const;
d637 2
a638 3
      virtual const char * classText () const;

      virtual void printItem () const;
d688 1
a688 2
      virtual double  indepInitValue () const;

d690 1
a690 1
      virtual double     invCoeffVal () const;
d706 2
a707 3
      virtual const char * classText () const;

      virtual void printItem () const;
d757 2
a758 3
      virtual double indepInitValue () const;

      virtual const WitBoundSet * myBoundSet () const;
d772 2
a773 3
      virtual const char * classText () const;

      virtual void printItem () const;
d782 1
a782 1
      virtual double    servCoeffVal () const;
@


1.3
log
@Stochastic Implosion
@
text
@d74 16
a89 7
      virtual WitOptProb * myOptProb       () const;
      virtual double       boundsCoeffVal  () const;
      virtual double       primaryCoeffVal () const;
      virtual double       revCoeffVal     () const;
      virtual double       invCoeffVal     () const;
      virtual double       servCoeffVal    () const;
      virtual double       subCoeffVal     () const;
d306 3
a308 3
      virtual double     revCoeffVal () const;
      virtual double     invCoeffVal () const;
      virtual double     subCoeffVal () const;
@


1.2
log
@Stochastic Implosion
@
text
@d74 7
a80 1
      virtual WitOptProb * myOptProb () const;
d292 3
a294 1
      virtual double  indepInitValue () const;
a300 2
      virtual bool   isAnIntVar      () const;

d372 3
a374 1
      virtual double  indepInitValue () const;
a378 2
      virtual bool   isAnIntVar      () const;

d618 3
a620 1
      virtual double  indepInitValue () const;
a625 2
      virtual bool       isAnIntVar () const;

@


1.1
log
@Stochastic Implosion
@
text
@d69 1
a69 1

d71 1
a71 1
      // Data access functions.
d74 1
a74 1
      accessFunc (WitPeriod, myPeriod)
d77 1
a77 1
      // Other public member functions.
d80 2
a81 4
      inline WitDetImpOP * myDetImpOP () const
         {
         return reinterpret_cast <WitDetImpOP *> (myOptProb ());
         }
d110 5
a114 1
      WitPeriod myPeriod_;
d116 1
a116 1
         // The period with which this DetVar is associated.
@

