head	1.50;
access;
symbols
	sce_5_01_20080919:1.37
	latest_sce_4_20_20060523:1.37.0.2
	sce_4_20_20060523:1.37
	latest_sce4_20_OSL:1.36.0.2
	sce_4_20_OSL:1.36
	sce_410_withVa:1.36
	sce_4_05_20040511:1.21
	sce_4_00_20040201:1.21
	nextGenBranch:1.21.0.2
	nextGenRoot:1.21
	sce_3_30_20030627:1.21
	EndRw-branch:1.17.0.4
	Root-of-EndRw:1.17
	rwToStl:1.17.0.2
	latest_sce_3_10_20010924:1.3.0.2
	sce_3_10_20010924:1.3;
locks; strict;
comment	@ * @;


1.50
date	2011.09.28.23.49.34;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2011.09.24.00.27.54;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2011.08.30.20.17.39;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2010.07.30.20.20.14;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2010.07.29.21.03.12;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2010.07.28.19.27.46;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2010.07.28.15.45.05;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2010.07.27.18.12.34;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2010.07.26.21.47.11;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2010.07.16.22.26.40;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2010.07.13.17.41.29;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2010.07.02.18.53.10;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2010.07.01.20.51.32;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2006.05.02.17.34.02;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2005.01.15.00.20.08;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2005.01.13.17.24.20;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2005.01.06.20.34.09;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2005.01.01.00.43.13;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2004.12.28.22.34.26;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2004.12.22.19.57.26;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2004.12.21.22.13.48;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2004.12.20.21.13.10;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2004.12.17.21.53.00;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2004.12.16.23.35.17;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2004.12.15.23.50.11;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2004.12.14.22.37.10;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2004.12.09.22.06.07;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2004.12.09.21.34.11;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.12.09.19.22.50;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.05.05.16.10.00;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.03.19.16.48.19;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.01.02.22.18.33;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2002.11.26.23.28.48;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2002.09.26.19.05.27;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2002.07.02.21.53.03;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.07.02.19.20.57;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.24.23.00.04;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.21.19.10.26;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.04.15.21.21.36;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.04.12.21.02.00;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.04.11.15.36.29;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.20.22.51.17;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.19.16.20.56;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.15.23.17.29;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.15.05.47;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.13.19.27.19;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.07.23.24.28;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.19.18.50.58;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.17.18.56.28;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.30.20.29.24;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.50
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef MrPtH
#define MrPtH

//------------------------------------------------------------------------------
// Header file: "MrPt.h"
//
// Contains the declaration of class MrPt.
//------------------------------------------------------------------------------

#include <DetSelPt.h>
#include <SelCand.h>

//------------------------------------------------------------------------------
// Class MrPt.
//
// "Multi-Route Point"
// Represents a location (in the BOM structure) and period at which multi-route
// selection is to be performed.
//
// Class Hierarchy:
//
// SelPt
//    DetSelPt
//       MrPt
//
// Implemented in MultiRoute.C.
//------------------------------------------------------------------------------

class WitMrPt: public WitDetSelPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrPt (WitMrSite *, WitPeriod);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMrPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void select (WitRtCand * theRtCand);
         //
         // Selects theRtCand for this MrPt.

      void recoverInitState ();
         //
         // Restores the Multi-Route configuration at this MrPt to its initial
         // state.

      accessFunc (WitMrSite *, myMrSite)
      accessFunc (WitPeriod,   myPer)
      accessFunc (WitRtCand *, selRtCand)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual WitSelMgr *  mySelMgr    ();
      virtual void         prtID       ();        
      virtual bool         splittable  ();   
      virtual void         getSortData (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand  ();
      virtual bool         sglSrcMode  ();
         //
         // Overrides from class SelPt.

      virtual bool hasResAlt       ();
      virtual void alterSelection  ();
      virtual void storeRecoveryPt ();
      virtual void tempAlterSel    ();
      virtual void cancelTempAlt   ();
      virtual void printAlteration ();
         //
         // Overrides from class DetSelPt.

      void refreshHasResAlt ();
         //
         // Computes hasResAlt_.

      WitRtCand * findNextRtCand ();
         //
         // Finds and returns the first selectable RtCand for this MrPt
         // that is not its current selection, or NULL, if there is none.

      void printRecovery ();
         //
         // Prints the restoration of the Multi-Route configuration at this MrPt
         // to its initial state.

      FILE * msgFile ();

      inline WitSelector * mySelector ();

      noCopyCtorAssign (WitMrPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMrSite * const myMrSite_;
         //
         // The MrSite that owns this MrPt.

      const WitPeriod myPer_;
         //
         // The period in which selection is to be done.

      WitRtCand * selRtCand_;
         //
         // The RtCand currently selected for routing from this MrPt, if any;
         // otherwise, NULL.

      bool hasResAlt_;
         //
         // true, iff this MrPt currently has a selection and an 
         // shortage-resolving alternative to the current selection exists.
   };

#endif
@


1.49
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.48
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d39 2
a40 59
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitMrPt (WitMrSite *, WitPeriod);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitMrPt ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void select (WitRtCand * theRtCand);
//
// Selects theRtCand for this MrPt.

void recoverInitState ();
//
// Restores the Multi-Route configuration at this MrPt to its initial
// state.

accessFunc (WitMrSite *, myMrSite)
accessFunc (WitPeriod,   myPer)
accessFunc (WitRtCand *, selRtCand)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

virtual WitSelMgr *  mySelMgr    ();
virtual void         prtID       ();
virtual bool         splittable  ();
virtual void         getSortData (WitPart * &, WitPeriod &);
virtual WitSelCand * newSelCand  ();
virtual bool         sglSrcMode  ();
//
// Overrides from class SelPt.

virtual bool hasResAlt       ();
virtual void alterSelection  ();
virtual void storeRecoveryPt ();
virtual void tempAlterSel    ();
virtual void cancelTempAlt   ();
virtual void printAlteration ();
//
// Overrides from class DetSelPt.

void refreshHasResAlt ();
//
// Computes hasResAlt_.
d42 95
a136 38
WitRtCand * findNextRtCand ();
//
// Finds and returns the first selectable RtCand for this MrPt
// that is not its current selection, or NULL, if there is none.

void printRecovery ();
//
// Prints the restoration of the Multi-Route configuration at this MrPt
// to its initial state.

FILE * msgFile ();

inline WitSelector * mySelector ();

noCopyCtorAssign (WitMrPt);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitMrSite * const myMrSite_;
//
// The MrSite that owns this MrPt.

const WitPeriod myPer_;
//
// The period in which selection is to be done.

WitRtCand * selRtCand_;
//
// The RtCand currently selected for routing from this MrPt, if any;
// otherwise, NULL.

bool hasResAlt_;
//
// true, iff this MrPt currently has a selection and an
// shortage-resolving alternative to the current selection exists.
};
@


1.47
log
@Selection Recovery
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d39 59
a97 2
   {
   public:
d99 38
a136 95
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrPt (WitMrSite *, WitPeriod);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMrPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void select (WitRtCand * theRtCand);
         //
         // Selects theRtCand for this MrPt.

      void recoverInitState ();
         //
         // Restores the Multi-Route configuration at this MrPt to its initial
         // state.

      accessFunc (WitMrSite *, myMrSite)
      accessFunc (WitPeriod,   myPer)
      accessFunc (WitRtCand *, selRtCand)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual WitSelMgr *  mySelMgr    ();
      virtual void         prtID       ();        
      virtual bool         splittable  ();   
      virtual void         getSortData (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand  ();
      virtual bool         sglSrcMode  ();
         //
         // Overrides from class SelPt.

      virtual bool hasResAlt       ();
      virtual void alterSelection  ();
      virtual void storeRecoveryPt ();
      virtual void tempAlterSel    ();
      virtual void cancelTempAlt   ();
      virtual void printAlteration ();
         //
         // Overrides from class DetSelPt.

      void refreshHasResAlt ();
         //
         // Computes hasResAlt_.

      WitRtCand * findNextRtCand ();
         //
         // Finds and returns the first selectable RtCand for this MrPt
         // that is not its current selection, or NULL, if there is none.

      void printRecovery ();
         //
         // Prints the restoration of the Multi-Route configuration at this MrPt
         // to its initial state.

      FILE * msgFile ();

      inline WitSelector * mySelector ();

      noCopyCtorAssign (WitMrPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMrSite * const myMrSite_;
         //
         // The MrSite that owns this MrPt.

      const WitPeriod myPer_;
         //
         // The period in which selection is to be done.

      WitRtCand * selRtCand_;
         //
         // The RtCand currently selected for routing from this MrPt, if any;
         // otherwise, NULL.

      bool hasResAlt_;
         //
         // true, iff this MrPt currently has a selection and an 
         // shortage-resolving alternative to the current selection exists.
   };
@


1.46
log
@Selection Recovery
@
text
@d62 1
a62 1
      void recoverInitSel ();
d64 2
a65 1
         // Recovers the initial selection of this MrPt.
d86 6
a91 6
      virtual bool hasResAlt         ();
      virtual void alterSelection    ();
      virtual void recAltForRecovery ();
      virtual void tempAlterSel      ();
      virtual void cancelTempAlt     ();
      virtual void printAlteration   ();
d106 2
a107 1
         // Prints the recovery of the initial selection of this MrPt.
@


1.45
log
@Selection Recovery
@
text
@d85 6
a90 6
      virtual bool hasResAlt        ();
      virtual void alterSelection   ();
      virtual void recordAlteration ();
      virtual void tempAlterSel     ();
      virtual void cancelTempAlt    ();
      virtual void printAlteration  ();
@


1.44
log
@Sleection Recovery
@
text
@d85 6
a90 5
      virtual bool hasResAlt       ();
      virtual void alterSelection  ();
      virtual void tempAlterSel    ();
      virtual void cancelTempAlt   ();
      virtual void printAlteration ();
@


1.43
log
@Selection Recovery
@
text
@a61 4
      void restoreSel (WitRtCand * theRtCand);
         //
         // Restores the selection for this MrPt to theRtCand.

d93 1
a93 1
      void selectAndResolve (WitRtCand * theRtCand);
d95 1
a95 1
         // Selects theRtCand for this MrPt and recomputes hasResAlt_.
@


1.42
log
@Selection Recovery
@
text
@d68 1
a68 1
         // Recovers the initial selection of this SelPt.
d108 1
a108 1
         // Does printing for recoverInitSel ().
@


1.41
log
@Selection Recovery
@
text
@d66 4
d71 1
d80 6
a85 8
      virtual WitSelMgr *  mySelMgr       ();
      virtual void         prtID          ();        
      virtual bool         splittable     ();   
      virtual void         getSortData    (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand     ();
      virtual bool         sglSrcMode     ();
      virtual void         printRecoverO  ();
      virtual void         recoverInitSeO ();
d106 4
@


1.40
log
@Selection Recovery.
@
text
@d81 2
a82 2
      virtual void         printRecovery  ();
      virtual void         recoverInitSel ();
@


1.39
log
@Selection recovery.
@
text
@d81 1
a82 1
      virtual void         prtRecInitSel  ();
@


1.38
log
@Selection Reuse
@
text
@d81 2
a82 2
      virtual void         restoreInitSel ();
      virtual void         prtRestInitSel ();
@


1.37
log
@Updated the copyright date on all source files.
@
text
@d60 1
a60 1
         // Instructs this MrPt to select theRtCand.
d75 8
a82 6
      virtual WitSelMgr *  mySelMgr    ();
      virtual void         prtID       ();        
      virtual bool         splittable  ();   
      virtual void         getSortData (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand  ();
      virtual bool         sglSrcMode  ();
d94 4
d105 2
a112 4
      WitSelector * const mySelector_;
         //
         // The Selector for the MrPt.

@


1.36
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.35
log
@Low-Pri Prop-Rt.
@
text
@d75 6
a80 7
      virtual void         printSelection ();
      virtual WitSelMgr *  mySelMgr       ();
      virtual void         prtID          ();        
      virtual bool         splittable     ();   
      virtual void         getSortData    (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand     ();
      virtual bool         sglSrcMode     ();
d84 5
a88 4
      virtual bool hasResAlt      ();
      virtual void alterSelection ();
      virtual void tempAlterSel   ();
      virtual void cancelTempAlt  ();
@


1.34
log
@Low-Pri Prop-Rt.
@
text
@d85 4
a88 5
      virtual bool hasResAlt          ();
      virtual void alterSelection     ();
      virtual void tempAlterSel       ();
      virtual void cancelTempAlt      (WitSelCand *);
      virtual bool cancelNeedsSelCand ();
@


1.33
log
@Low-Pri Prop-Rt.
@
text
@a78 1
      virtual void         restoreSelTo   (WitSelCand *);
d85 5
a89 3
      virtual bool hasResAlt      ();
      virtual void alterSelection ();
      virtual void tempAlterSel   ();
@


1.32
log
@Low-Pri Prop-Rt.
@
text
@d79 1
@


1.31
log
@Low-Pri Prop-Rt.
@
text
@a74 1
      virtual bool         hasResAlt      ();
d85 1
d89 1
a89 1
         // Override from class DetSelPt.
@


1.30
log
@Low-Pri Prop-Rt.
@
text
@a80 1
      virtual void         tempAlterSel   ();
d87 1
@


1.29
log
@Low-Pri Prop-Rt.
@
text
@a75 1
      virtual void         alterSelection ();
d87 4
@


1.28
log
@Low-Pri Prop-Rt.
@
text
@d19 1
a19 1
#include <SelPt.h>
d32 2
a33 1
//    MrPt
d38 1
a38 1
class WitMrPt: public WitSelPt
@


1.27
log
@Low-Pri Prop-Rt.
@
text
@d65 1
d82 1
a82 1
      virtual void         setToMyCurSel  (WitSelCand *);
@


1.26
log
@Low-Pri Prop-Rt.
@
text
@d61 4
a80 1
      virtual void         restoreSel     (WitSelCand *);
@


1.25
log
@Low-Pri Prop-Rt.
@
text
@d78 1
a78 1
      virtual void         setToCurSel    (WitSelCand *);
@


1.24
log
@Low-Pri Prop-Rt.
@
text
@a73 1
      virtual WitSelCand * curSelCand     ();
d78 1
@


1.23
log
@Low-Pri Prop-Rt.
@
text
@a53 16
      // Overrides from class SelPt.
      //------------------------------------------------------------------------

      virtual bool         hasResAlt      ();
      virtual void         alterSelection ();
      virtual void         printSelection ();
      virtual void         prtID          ();        
      virtual void         getSortData    (WitPart * &, WitPeriod &);
      virtual WitSelMgr *  mySelMgr       ();
      virtual WitSelCand * curSelCand     ();
      virtual bool         splittable     ();   
      virtual void         tempAlterSel   ();
      virtual void         restoreSel     (WitSelCand *);
      virtual bool         sglSrcMode     ();

      //------------------------------------------------------------------------
d69 14
@


1.22
log
@Low-Pri Prop-Rt.
@
text
@d57 11
a67 10
      virtual bool        hasResAlt      ();
      virtual void        alterSelection ();
      virtual void        printSelection ();
      virtual void        prtID          ();        
      virtual void        getSortData    (WitPart * &, WitPeriod &);
      virtual WitSelMgr * mySelMgr       ();
      virtual bool        splittable     ();   
      virtual void        tempAlterSel   ();
      virtual void        restoreSel     (WitSelCand *);
      virtual bool        sglSrcMode     ();
@


1.21
log
@Continued implementation of proportionate routing.
@
text
@d72 1
a72 1
      void select (WitMrCand * theMrCand);
d74 1
a74 1
         // Causes this MrPt to select theMrCand.
d76 1
a76 7
      inline WitMrCand * selMrCand ()
         {
         return
            (selSelCand () == NULL)?
               NULL:
               selSelCand ()->myMrCand ();
         }
d84 1
a84 1
      WitMrCand * findNextMrCand ();
d86 1
a86 1
         // Finds and returns the first selectable MrCand for this MrPt
d97 4
d109 5
@


1.20
log
@Continued implementation of proportionate routing.
@
text
@a63 1
      virtual WitPeriod   myPeriod       ();
@


1.19
log
@Internal changes.
@
text
@d57 11
a67 13
      virtual bool          hasResAlt      ();
      virtual void          alterSelection ();
      virtual void          printSelection ();
      virtual void          prtID          ();        
      virtual void          getSortData    (WitPart * &, WitPeriod &);
      virtual WitSelMgr *   mySelMgr       ();
      virtual bool          splittable     ();   
      virtual WitPeriod     myPeriod       ();
      virtual void          tempAlterSel   ();
      virtual void          restoreSel     (WitSelCand *);
      virtual bool          sglSrcMode     ();
      virtual WitPart *     myPmrPart      ();
      virtual WitBomEntry * myCmrBomEnt    ();
@


1.18
log
@Continued implementation of single-source by the new algorithm.
@
text
@d57 1
a57 1
      virtual WitBoolean    hasResAlt      ();
d63 1
a63 1
      virtual WitBoolean    splittable     ();   
d67 1
a67 1
      virtual WitBoolean    sglSrcMode     ();
d114 1
a114 1
      WitBoolean hasResAlt_;
d116 1
a116 1
         // TRUE, iff this MrPt currently has a selection and an 
@


1.17
log
@Began implementation of multi-level lot sizes.
@
text
@d67 1
@


1.16
log
@Continued implementation of Single-Source.
@
text
@d16 1
a16 1
// Contains the declaration of class template MrPt <MrArgs>.
d20 1
a20 1
#include <MrCand.h>
d23 1
a23 1
// Class Template MrPt <MrArgs>
a28 3
// For more information on this template, see:
//    "General Comments on the Multi-Route Class Templates" in MrMgr.h.
//
d32 1
a32 1
//    MrPt <MrArgs>
d34 1
a34 3
// Parametric     implementation         in MultiRoute_TI.h.
// Non-parametric implementation for Pmr in ProdMR.C.
// Non-parametric implementation for Cmr in ConsMR.C.
d37 1
a37 2
template <MrArgDecs>
      class WitMrPt: public WitSelPt
d45 1
a45 4
      WitMrPt (WitMrSelSite <MrArgs> * theMrSelSite, WitPeriod thePer);
         //
         // myMrSelSite_ <-- theMrSelSite.
         // myPer_       <-- thePer.
d51 1
a51 1
      ~WitMrPt ();
d60 2
a62 1
      virtual void          prtID          ();        
a63 1
      virtual void          getSortData    (WitPart * &, WitPeriod &);
d74 1
a74 5
      void printID ();
         //
         // Prints a string identifying this MrPt.

      void select (CandComp * theCandComp);
d76 1
a76 1
         // Causes this MrPt to select theCandComp.
d78 1
a78 5
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline WitMrCand <MrArgs> * selMrCand ()
d81 3
a83 3
            (selSelCand () != NULL)?
               WitMrCand <MrArgs>::theMrCandFor (selSelCand ()):
               NULL;
a88 6
      // Private typedefs.
      //------------------------------------------------------------------------

      typedef WitObjStItr <WitMrCand <MrArgs> > WitMrCandItr;

      //------------------------------------------------------------------------
d92 1
a92 3
      noCopyCtorAssignTemp (WitMrPt, MrArgs);

      WitMrCand <MrArgs> * findNextMrCand ();
d94 2
a95 2
         // Finds and returns the first selectable MrCand for this MrPt that is
         // not its current selection, or NULL, if there is none.
d99 2
d105 1
a105 1
      WitMrSelSite <MrArgs> * const myMrSelSite_;
d107 1
a107 1
         // The MrSelSite that owns this MrPt.
d111 1
a111 1
         // The period in which a CandComp is to be selected.
@


1.15
log
@Continued implementation of Single-Source.
@
text
@d73 1
@


1.14
log
@Continued implementation of single-source.
@
text
@d66 11
a76 10
      virtual WitBoolean  hasResAlt      ();
      virtual void        alterSelection ();
      virtual void        printSelection ();
      virtual WitSelMgr * mySelMgr       ();
      virtual void        prtID          ();        
      virtual WitBoolean  splittable     ();   
      virtual void        getSortData    (WitPart * &, WitPeriod &);
      virtual void        tempAlterSel   ();
      virtual void        restoreSel     (WitSelCand *);
      virtual WitPart *   myPmrPart      ();
@


1.13
log
@Continued implementation of single-source.
@
text
@d66 1
d75 1
a75 1
      virtual WitBoolean  sglSrcMode ();
a91 2

      accessFunc (WitBoolean, hasResAlt)
@


1.12
log
@Continued implementation of sel-split for pen-exec.
@
text
@d74 1
@


1.11
log
@Continued implementation of sel-split for pen-exec.
@
text
@d71 1
a71 1
      virtual void        getSortData    (WitPart * &, int &, WitPeriod &);
@


1.10
log
@Continued implementation of sel-split for pen-exec.
@
text
@a70 1
      virtual WitPart *   myFillPart     ();
@


1.9
log
@Continued implementation of sel-split for pen-exec.
@
text
@d72 1
a72 2
      virtual WitPart *   mySortPart     ();
      virtual int         caseIndex      ();
@


1.8
log
@Continued implementation of sel-split for pen-exec.
@
text
@d72 1
a72 1
      virtual WitPart *   sortPart       ();
@


1.7
log
@Continued implementation of sel-split for pen-exec.
@
text
@d72 2
a73 1
      virtual int         sspeIndex      ();
@


1.6
log
@Continued implementation of sel-split for pen-exec.
@
text
@d66 9
a74 8
      virtual void            alterSelection  ();
      virtual void            printSelection  ();
      virtual WitSelMgr *     mySelMgr        ();
      virtual void            prtID           ();        
      virtual WitBoolean      splittable      ();   
      virtual WitPart *       myFillPart      ();
      virtual int             sspeIndex       ();
      virtual void            setMrSelPrevSel (WitBoolean);
d115 5
@


1.5
log
@Continued implementation of sel-split for pen-exec.
@
text
@d66 8
a73 9
      virtual void            alterSelection ();
      virtual void            printSelection ();
      virtual WitSelMgr *     mySelMgr       ();
      virtual void            prtID          ();        
      virtual WitBoolean      splittable     ();   
      virtual WitPart *       myFillPart     ();
      virtual int             sspeIndex      ();
      virtual WitMrPt <Pmr> * myPmrPtIfAny   ();
      virtual WitMrPt <Cmr> * myCmrPtIfAny   ();
d91 1
a91 3
      accessFunc (WitMrSelSite <MrArgs> *, myMrSelSite)
      accessFunc (WitPeriod,               myPer)
      accessFunc (WitBoolean,              hasResAlt)
@


1.4
log
@Continued implementation of sel-split fpr pen-exec.
@
text
@d72 3
a74 1
      virtual WitMrPt <Pmr> * myMrPtPmrIfAny ();
@


1.3
log
@Continued implementation of selective stock reallocation.
@
text
@d66 7
a72 6
      virtual void        alterSelection ();
      virtual void        printSelection ();
      virtual WitSelMgr * mySelMgr       ();
      virtual void        prtID          ();        
      virtual WitBoolean  splittable     ();   
      virtual WitPart *   myFillPart     ();
d90 3
a92 1
      accessFunc (WitBoolean, hasResAlt)
@


1.2
log
@Continued implmentation of selective stock reallocation.
@
text
@d19 1
a20 1
#include <SelPt.h>
@


1.1
log
@Refactoring for constrained stock reallocation.
@
text
@d93 4
a96 1
         return WitMrCand <MrArgs>::safeCast (selSelCand ());
@

