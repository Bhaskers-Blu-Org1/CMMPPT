head	1.101;
access;
symbols
	sce_5_01_20080919:1.89
	latest_sce_4_20_20060523:1.66.0.2
	sce_4_20_20060523:1.66
	latest_sce4_20_OSL:1.65.0.2
	sce_4_20_OSL:1.65
	sce_410_withVa:1.60
	sce_4_05_20040511:1.56
	sce_4_00_20040201:1.42
	nextGenBranch:1.33.0.2
	nextGenRoot:1.33
	sce_3_30_20030627:1.33
	EndRw-branch:1.29.0.4
	Root-of-EndRw:1.29
	rwToStl:1.29.0.2
	latest_sce_3_10_20010924:1.18.0.2
	sce_3_10_20010924:1.18
	latest_sce_3_00_20010601:1.13.0.2
	sce_3_00_20010601:1.13
	latest_sce_2_31_20010308:1.12.0.2
	sce_2_31_20010308:1.12
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.101
date	2011.09.28.23.49.59;	author rjw;	state Exp;
branches;
next	1.100;

1.100
date	2011.09.24.00.28.23;	author rjw;	state Exp;
branches;
next	1.99;

1.99
date	2011.08.30.20.18.00;	author rjw;	state Exp;
branches;
next	1.98;

1.98
date	2010.09.24.18.17.22;	author rjw;	state Exp;
branches;
next	1.97;

1.97
date	2010.09.22.20.21.53;	author rjw;	state Exp;
branches;
next	1.96;

1.96
date	2010.09.21.21.19.13;	author rjw;	state Exp;
branches;
next	1.95;

1.95
date	2010.09.07.16.38.59;	author rjw;	state Exp;
branches;
next	1.94;

1.94
date	2010.09.02.18.58.25;	author rjw;	state Exp;
branches;
next	1.93;

1.93
date	2010.01.25.19.45.19;	author rjw;	state Exp;
branches;
next	1.92;

1.92
date	2009.12.29.20.17.18;	author rjw;	state Exp;
branches;
next	1.91;

1.91
date	2009.12.23.22.39.55;	author rjw;	state Exp;
branches;
next	1.90;

1.90
date	2009.11.17.22.54.49;	author rjw;	state Exp;
branches;
next	1.89;

1.89
date	2007.12.03.19.41.33;	author rjw;	state Exp;
branches;
next	1.88;

1.88
date	2007.11.29.21.12.32;	author rjw;	state Exp;
branches;
next	1.87;

1.87
date	2007.08.01.22.41.58;	author rjw;	state Exp;
branches;
next	1.86;

1.86
date	2007.06.20.22.10.26;	author rjw;	state Exp;
branches;
next	1.85;

1.85
date	2007.06.18.22.28.42;	author rjw;	state Exp;
branches;
next	1.84;

1.84
date	2007.06.18.19.53.32;	author rjw;	state Exp;
branches;
next	1.83;

1.83
date	2007.06.14.16.09.36;	author rjw;	state Exp;
branches;
next	1.82;

1.82
date	2007.05.09.22.44.27;	author rjw;	state Exp;
branches;
next	1.81;

1.81
date	2007.05.08.20.11.22;	author rjw;	state Exp;
branches;
next	1.80;

1.80
date	2007.04.30.21.52.09;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2007.04.27.21.02.02;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2007.04.25.19.56.54;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2007.04.24.20.07.50;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2007.04.06.19.34.18;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2007.04.05.20.23.52;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2007.03.22.20.01.16;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2007.01.09.21.07.48;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2006.12.27.20.19.30;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2006.12.27.19.55.08;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2006.09.21.15.42.27;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2006.09.19.17.50.55;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2006.09.18.23.02.52;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2006.09.18.22.27.41;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2006.05.02.17.34.10;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2006.03.21.20.47.35;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2006.01.09.20.02.30;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2005.11.16.20.42.15;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2005.11.15.21.45.26;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2005.11.15.21.27.23;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2005.09.07.19.29.52;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2005.02.24.19.46.28;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2005.02.10.19.46.48;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2005.01.28.19.34.27;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2004.04.19.22.16.29;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2004.04.16.21.32.56;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2004.03.24.22.21.33;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2004.03.24.19.17.34;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2004.03.23.19.14.25;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2004.03.22.21.45.52;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2004.03.22.16.37.19;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2004.03.12.17.21.55;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2004.03.03.20.05.07;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2004.03.02.19.17.52;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2004.03.02.16.19.32;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2004.02.27.21.00.29;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2004.02.10.23.57.45;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2004.01.30.20.09.48;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2003.12.31.21.44.53;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2003.12.29.16.25.32;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2003.12.24.20.12.34;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2003.12.17.22.30.00;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2003.12.12.19.49.44;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2003.12.11.21.56.33;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2003.12.01.21.05.05;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2003.09.30.15.40.55;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2003.09.24.23.08.18;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2003.04.15.20.50.12;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2003.04.14.22.00.35;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2003.01.22.19.32.13;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2003.01.02.22.18.45;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2002.08.15.20.03.48;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2002.06.28.19.40.15;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2002.06.26.18.42.53;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2002.06.26.18.28.38;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2002.06.21.21.52.21;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2002.05.16.23.32.08;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2002.05.08.19.21.56;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2002.05.03.23.16.42;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2002.05.01.14.26.01;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2002.04.22.14.32.13;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2002.04.18.14.02.42;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2001.08.23.21.13.54;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2001.07.25.16.08.19;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.07.03.20.07.31;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.06.21.18.24.33;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.20.20.07.05;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.05.17.15.11.16;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.01.27.00.24.39;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.01.11.16.35.10;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2000.12.20.20.22.27;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2000.12.13.19.57.26;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2000.12.06.19.58.41;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.05.19.05.31;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.04.22.07.38;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.22.23.11.47;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.21.20.03.27;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.26;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.48;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.29;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.29;	author wit;	state Exp;
branches;
next	;


desc
@@


1.101
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ProblemH
#define ProblemH

//------------------------------------------------------------------------------
// Header file: "Problem.h"
//
// Contains the declaration of class Problem.
//------------------------------------------------------------------------------

#include <List.h>
#include <TVec.h>

//------------------------------------------------------------------------------
// Class Problem.
//
// Each instance of this class defines A WIT problem and its solution.
// Essentially this is all aspects of WIT that are initialized by
// witInitialize.
// It excludes any aspect of WIT that must function prior to witInitialize,
// specifically, the message facility and the API.
//------------------------------------------------------------------------------

class WitProblem
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitProblem (WitSession * theSession);
         //
         // mySession_ <-- theSession.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitProblem ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitSession *,              mySession)
      accessFunc (WitCompMgr *,              myCompMgr)
      accessFunc (WitPreprocessor *,         myPreprocessor)
      accessFunc (WitPostprocessor *,        myPostprocessor)
      accessFunc (WitHeurImploder *,         myHeurImploder)
      accessFunc (WitEqAllocator *,          myEqAllocator)
      accessFunc (WitHeurAllMgr *,           myHeurAllMgr)
      accessFunc (WitDetOptImpMgr *,         myDetOptImpMgr)
      accessFunc (WitStochImpMgr *,          myStochImpMgr)
      accessFunc (WitPipMgr *,               myPipMgr)
      accessFunc (WitOrigMrpExp *,           myOrigMrpExp)
      accessFunc (WitFSS *,                  myFSS)
      accessFunc (WitDataReader *,           myDataReader)
      accessFunc (WitDataWriter *,           myDataWriter)
      accessFunc (WitSolnWriter *,           mySolnWriter)
      accessFunc (WitMsgFacility &,          myMsgFac)
      accessFunc (WitRun *,                  myWitRun)
      accessFunc (WitApiMgr *,               myApiMgr)
      accessFunc (FILE *,                    solnFile)
      accessFunc (int,                       nPeriods)
      accessFunc (WitPeriod,                 lastPeriod)
      accessFunc (WitObjLinkMgr *,           myObjLinkMgr)
      accessFunc (WitPairLinkMgr <int> *,    myIntPairLinkMgr)
      accessFunc (WitPairLinkMgr <bool> *,   myBoolPairLinkMgr)
      accessFunc (WitPairLinkMgr <double> *, myDblPairLinkMgr)
      accessFunc (WitPairLinkMgr <void *> *, myVoidPtrPairLinkMgr)
      accessFunc (WitTripLinkMgr *,          myTripLinkMgr)
      accessFunc (WitVariant *,              optVariant)
      accessFunc (WitVariant *,              extOptVariant)
      accessFunc (WitVariant *,              heurVariant)
      accessFunc (WitVariant *,              heurOptVariant)
      accessFunc (WitVariant *,              inputVariant)
      accessFunc (WitVariant *,              currentVariant)
      accessFunc (WitFlexVAsst *,            scalarFlexVAsst)
      accessFunc (WitFlexVAsst *,            vectorFlexVAsst)

      inline WitGlobalComp * myGlobalComp ()
         {
         return myGlobalComp_;
         }

      inline WitOptComp * myOptComp ()
         {
         return myOptComp_;
         }

      bool wit34Compatible ();
         //
         // Returns myCompMgr ()->myGlobalComp ()->wit34Compatible ();

      WitHeurModifier * myHeurModifier ();
         //
         // Wrapper for myHeurAllMgr_.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void store (WitVariant * theVariant);
         //
         // Stores theVariant in this Problem.

      void setUpVariants ();
         //
         // Sets up the Variants for this Problem.

      void makeCurrent (WitVariant * theVariant);
         //
         // Sets currentVariant to theVariant.

      void allocTVecs ();
         //
         // Allocates various TVecs, if this has not already been done.
         // This is done when the first Part or Operation is constructed, at
         // which point nPeriods becomes frozen.

      void clearTVecs ();
         //
         // Clears various TVecs, if this has not already been done.
         // This is done when the # of Parts and Operations becomes 0, at which
         // point nPeriods becomes unfrozen.

      void updateNPeriods ();
         //
         // Sets nPeriods_ to the current value in myGlobalComp ().

      void displayData (const char * filename);
         //
         // Displays the input and preprocessing data of this Problem, i.e.,
         // prints it in an easy-to-read format.
         // filename is the name of the file to which it will print.

      void displayGlobalData ();
         //
         // Displays the global input and preprocessing data of this Problem.

      void displayNonGlobalData ();
         //
         // Displays the non-global input and preprocessing data of this
         // Problem.

      void display (WitMsgID theMsgID, const WitDblFlexVec & theFlexVec);
         //
         // Displays theFlexVec, issuing the indicated Msg.

      void display (WitMsgID theMsgID, const WitFlexVec <int> & theFlexVec);
         //
         // Displays theFlexVec, issuing the indicated Msg.

      void display (WitMsgID theMsgID, const WitFlexVec <bool> & theFlexVec);
         //
         // Displays theFlexVec, issuing the indicated Msg.

      void display (WitMsgID theMsgID, const WitObjVec & theObjVec);
         //
         // Displays theObjVec, issuing the indicated Msg.

      void displayBoundVec (
            WitMsgFragID          theFragID,
            const WitDblFlexVec & theFlexVec);
         //
         // Displays theFlexVec as a BoundSet vector indicated by theFragID.

      void copyProblemInto (WitProblem * theProblem);
         //
         // Copies the input state of this Problem into theProblem: the
         // Components and the input attributes. Preprocesses this Problem
         // and puts theProblem into an unpreprocessed state. Preprocessing
         // This Problem is done to check for errors. The Components of the
         // Problem are constructed in the same order as the order in which the
         // Components of this Problem were contructed.

      void prepSetUnpreAttr ();
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set, thereby necessitating unpreprocessing.
         // The attribute is not allowed to be set in stochastic mode.

      void prepSetUnpostAttr ();
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set, thereby necessitating unpostprocessing.
         // The attribute is not allowed to be set in stochastic mode.

      void prepSetNonUnpostAttr ();
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set without necessitating unpreprocessing or unpostprocessing.
         // The attribute is not allowed to be set in stochastic mode.

      void prepSetStochModeAttr (const char * theAttName);
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set, thereby necessitating unpostprocessing.
         // The attribute is allowed to be set in stochastic mode.
         // theAttName is the name of the attribute.

      void resetSoln ();
         //
         // Puts this Problem into a state reflecting that the data has been
         // changed in a way that would invalidate the current solution, in any.

      void writeSoln (const char * fileName);
         //
         // Prints the comprehensive implosion solution.
         // fileName is the name of the file to be written to.

      void writeSolnValue (double val);
         //
         // Writes val to solnFile (), or blank, if val would print as 0.

      void writeMrpSoln (const char * fileName);
         //
         // Prints the comprehensive MRP solution.
         // fileName is the name of the file to be written to.

      void computeFssIfNeeded ();
         //
         // Computed FSS it hasn't already been computed.
         // It is an error to call this function when postprocessed () is false

      void pauseForInput (const char * theText);
         //
         // Pauses execution and waits for user input.
         // Displays theText.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitProblem);

      void writeStochSoln ();
         //
         // Prints the stochastic comprehensive implosion solution.

      void writeSolnInt ();
         //
         // Prints the comprehensive implosion solution.
         // Internal version.

      void writeBoundsSoln ();
         //
         // Prints the comprehensive implosion solution for BoundSets.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSession * const mySession_;
         //
         // The Session that owns this Problem.

      WitCompMgr * myCompMgr_;
         //
         // The CompMgr owned by this Problem.

      //------------------------------------------------------------------------
      // Singleton objects.
      // Each of these objects has a one-to-one relationship with this Problem.
      // The Problem delegates some of its responsibilities to each of them.
      // It creates and destroys them when it is created and destroyed.
      //------------------------------------------------------------------------

      WitPreprocessor  * myPreprocessor_;
      WitPostprocessor * myPostprocessor_;
      WitHeurImploder  * myHeurImploder_;
      WitEqAllocator   * myEqAllocator_;
      WitHeurAllMgr    * myHeurAllMgr_;
      WitDetOptImpMgr  * myDetOptImpMgr_;
      WitStochImpMgr   * myStochImpMgr_;
      WitPipMgr        * myPipMgr_;
      WitOrigMrpExp    * myOrigMrpExp_;
      WitFSS           * myFSS_;
      WitDataReader    * myDataReader_;
      WitDataWriter    * myDataWriter_;
      WitSolnWriter    * mySolnWriter_;

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFacility for this Problem.

      WitRun * const myWitRun_;
         //
         // The WitRun for this Problem.

      WitApiMgr * const myApiMgr_;
         //
         // The ApiMgr for this Problem.

      FILE * solnFile_;
         //
         // Output file for comprehensive solution.

      WitGlobalComp * myGlobalComp_;
         //
         // Ptr to myCompMgr ()->myGlobalComp ().

      WitOptComp * myOptComp_;
         //
         // Ptr to myCompMgr ()->myOptComp ().

      int nPeriods_;
         //
         // Same value as myCompMgr ()->myGlobalComp ()->nPeriods ().

      WitPeriod lastPeriod_;
         //
         // The last period in this Problem, i.e., nPeriods_ - 1.

      //------------------------------------------------------------------------
      // LinkMgrs.
      //------------------------------------------------------------------------

      WitObjLinkMgr           * myObjLinkMgr_;
      WitPairLinkMgr <int>    * myIntPairLinkMgr_;
      WitPairLinkMgr <bool>   * myBoolPairLinkMgr_;
      WitPairLinkMgr <double> * myDblPairLinkMgr_;
      WitPairLinkMgr <void *> * myVoidPtrPairLinkMgr_;
      WitTripLinkMgr          * myTripLinkMgr_;

      //------------------------------------------------------------------------
      // Variants.
      //------------------------------------------------------------------------

      WitVariant * optVariant_;
         //
         // The version of the problem solved by optimizing implosion.

      WitVariant * extOptVariant_;
         //
         // The version of the problem solved by external optimizing implosion.

      WitVariant * heurVariant_;
         //
         // The version of the problem solved by heuristic implosion.

      WitVariant * heurOptVariant_;
         //
         // The version of the problem solved by heuristic implosion when used
         // as an initial solution to optimizing implosion.

      WitVariant * inputVariant_;
         //
         // The version of the problem considered when the solution is from
         // the input data.

      WitList <WitVariant> allVariants_;
         //
         // The list of all possible Variants.

      WitVariant * currentVariant_;
         //
         // The version of the implosion problem currently under consideration.

      //------------------------------------------------------------------------
      // FlexVecAssts.
      //------------------------------------------------------------------------

      WitFlexVAsst * scalarFlexVAsst_;
      WitFlexVAsst * vectorFlexVAsst_;
         //
         // The FlexVAsst owned by this Problem for scalar and vector mode.

      //------------------------------------------------------------------------
      // Some useful vectors allocated when the first Part or Operation is
      // constructed.
      //------------------------------------------------------------------------

      WitTVec <double> dispDoubleVector_;
      WitTVec <int>    dispIntVector_;
      WitTVec <bool>   dispBoolVector_;
         //
         // TVecs used by display.
   };

//------------------------------------------------------------------------------
// forEachPeriod
//
// Expands to the header of a "for" loop causing thePer to iterate thru all the
// periods in theProblem.
//------------------------------------------------------------------------------

#define forEachPeriod(thePer, theProblem)                                      \
                                                                               \
   for (thePer = 0; thePer < (theProblem)->nPeriods (); ++ thePer)             \

#endif
@


1.100
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.99
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d33 2
a34 284
{
public:

//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitProblem (WitSession * theSession);
//
// mySession_ <-- theSession.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitProblem ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitSession *,              mySession)
accessFunc (WitCompMgr *,              myCompMgr)
accessFunc (WitPreprocessor *,         myPreprocessor)
accessFunc (WitPostprocessor *,        myPostprocessor)
accessFunc (WitHeurImploder *,         myHeurImploder)
accessFunc (WitEqAllocator *,          myEqAllocator)
accessFunc (WitHeurAllMgr *,           myHeurAllMgr)
accessFunc (WitDetOptImpMgr *,         myDetOptImpMgr)
accessFunc (WitStochImpMgr *,          myStochImpMgr)
accessFunc (WitPipMgr *,               myPipMgr)
accessFunc (WitOrigMrpExp *,           myOrigMrpExp)
accessFunc (WitFSS *,                  myFSS)
accessFunc (WitDataReader *,           myDataReader)
accessFunc (WitDataWriter *,           myDataWriter)
accessFunc (WitSolnWriter *,           mySolnWriter)
accessFunc (WitMsgFacility &,          myMsgFac)
accessFunc (WitRun *,                  myWitRun)
accessFunc (WitApiMgr *,               myApiMgr)
accessFunc (FILE *,                    solnFile)
accessFunc (int,                       nPeriods)
accessFunc (WitPeriod,                 lastPeriod)
accessFunc (WitObjLinkMgr *,           myObjLinkMgr)
accessFunc (WitPairLinkMgr <int> *,    myIntPairLinkMgr)
accessFunc (WitPairLinkMgr <bool> *,   myBoolPairLinkMgr)
accessFunc (WitPairLinkMgr <double> *, myDblPairLinkMgr)
accessFunc (WitPairLinkMgr <void *> *, myVoidPtrPairLinkMgr)
accessFunc (WitTripLinkMgr *,          myTripLinkMgr)
accessFunc (WitVariant *,              optVariant)
accessFunc (WitVariant *,              extOptVariant)
accessFunc (WitVariant *,              heurVariant)
accessFunc (WitVariant *,              heurOptVariant)
accessFunc (WitVariant *,              inputVariant)
accessFunc (WitVariant *,              currentVariant)
accessFunc (WitFlexVAsst *,            scalarFlexVAsst)
accessFunc (WitFlexVAsst *,            vectorFlexVAsst)

inline WitGlobalComp * myGlobalComp ()
{
return myGlobalComp_;
}

inline WitOptComp * myOptComp ()
{
return myOptComp_;
}

bool wit34Compatible ();
//
// Returns myCompMgr ()->myGlobalComp ()->wit34Compatible ();

WitHeurModifier * myHeurModifier ();
//
// Wrapper for myHeurAllMgr_.

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void store (WitVariant * theVariant);
//
// Stores theVariant in this Problem.

void setUpVariants ();
//
// Sets up the Variants for this Problem.

void makeCurrent (WitVariant * theVariant);
//
// Sets currentVariant to theVariant.

void allocTVecs ();
//
// Allocates various TVecs, if this has not already been done.
// This is done when the first Part or Operation is constructed, at
// which point nPeriods becomes frozen.

void clearTVecs ();
//
// Clears various TVecs, if this has not already been done.
// This is done when the # of Parts and Operations becomes 0, at which
// point nPeriods becomes unfrozen.

void updateNPeriods ();
//
// Sets nPeriods_ to the current value in myGlobalComp ().

void displayData (const char * filename);
//
// Displays the input and preprocessing data of this Problem, i.e.,
// prints it in an easy-to-read format.
// filename is the name of the file to which it will print.

void displayGlobalData ();
//
// Displays the global input and preprocessing data of this Problem.

void displayNonGlobalData ();
//
// Displays the non-global input and preprocessing data of this
// Problem.

void display (WitMsgID theMsgID, const WitDblFlexVec & theFlexVec);
//
// Displays theFlexVec, issuing the indicated Msg.

void display (WitMsgID theMsgID, const WitFlexVec <int> & theFlexVec);
//
// Displays theFlexVec, issuing the indicated Msg.

void display (WitMsgID theMsgID, const WitFlexVec <bool> & theFlexVec);
//
// Displays theFlexVec, issuing the indicated Msg.

void display (WitMsgID theMsgID, const WitObjVec & theObjVec);
//
// Displays theObjVec, issuing the indicated Msg.

void displayBoundVec (
WitMsgFragID          theFragID,
const WitDblFlexVec & theFlexVec);
//
// Displays theFlexVec as a BoundSet vector indicated by theFragID.

void copyProblemInto (WitProblem * theProblem);
//
// Copies the input state of this Problem into theProblem: the
// Components and the input attributes. Preprocesses this Problem
// and puts theProblem into an unpreprocessed state. Preprocessing
// This Problem is done to check for errors. The Components of the
// Problem are constructed in the same order as the order in which the
// Components of this Problem were contructed.

void prepSetUnpreAttr ();
//
// Takes action appropriate just before the value of an attribute is to
// be set, thereby necessitating unpreprocessing.
// The attribute is not allowed to be set in stochastic mode.

void prepSetUnpostAttr ();
//
// Takes action appropriate just before the value of an attribute is to
// be set, thereby necessitating unpostprocessing.
// The attribute is not allowed to be set in stochastic mode.

void prepSetNonUnpostAttr ();
//
// Takes action appropriate just before the value of an attribute is to
// be set without necessitating unpreprocessing or unpostprocessing.
// The attribute is not allowed to be set in stochastic mode.

void prepSetStochModeAttr (const char * theAttName);
//
// Takes action appropriate just before the value of an attribute is to
// be set, thereby necessitating unpostprocessing.
// The attribute is allowed to be set in stochastic mode.
// theAttName is the name of the attribute.

void resetSoln ();
//
// Puts this Problem into a state reflecting that the data has been
// changed in a way that would invalidate the current solution, in any.

void writeSoln (const char * fileName);
//
// Prints the comprehensive implosion solution.
// fileName is the name of the file to be written to.

void writeSolnValue (double val);
//
// Writes val to solnFile (), or blank, if val would print as 0.

void writeMrpSoln (const char * fileName);
//
// Prints the comprehensive MRP solution.
// fileName is the name of the file to be written to.

void computeFssIfNeeded ();
//
// Computed FSS it hasn't already been computed.
// It is an error to call this function when postprocessed () is false

void pauseForInput (const char * theText);
//
// Pauses execution and waits for user input.
// Displays theText.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitProblem);

void writeStochSoln ();
//
// Prints the stochastic comprehensive implosion solution.

void writeSolnInt ();
//
// Prints the comprehensive implosion solution.
// Internal version.

void writeBoundsSoln ();
//
// Prints the comprehensive implosion solution for BoundSets.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitSession * const mySession_;
//
// The Session that owns this Problem.

WitCompMgr * myCompMgr_;
//
// The CompMgr owned by this Problem.

//------------------------------------------------------------------------
// Singleton objects.
// Each of these objects has a one-to-one relationship with this Problem.
// The Problem delegates some of its responsibilities to each of them.
// It creates and destroys them when it is created and destroyed.
//------------------------------------------------------------------------

WitPreprocessor  * myPreprocessor_;
WitPostprocessor * myPostprocessor_;
WitHeurImploder  * myHeurImploder_;
WitEqAllocator   * myEqAllocator_;
WitHeurAllMgr    * myHeurAllMgr_;
WitDetOptImpMgr  * myDetOptImpMgr_;
WitStochImpMgr   * myStochImpMgr_;
WitPipMgr        * myPipMgr_;
WitOrigMrpExp    * myOrigMrpExp_;
WitFSS           * myFSS_;
WitDataReader    * myDataReader_;
WitDataWriter    * myDataWriter_;
WitSolnWriter    * mySolnWriter_;

//------------------------------------------------------------------------
// Other private member data.
//------------------------------------------------------------------------

WitMsgFacility & myMsgFac_;
//
// The MsgFacility for this Problem.

WitRun * const myWitRun_;
//
// The WitRun for this Problem.

WitApiMgr * const myApiMgr_;
//
// The ApiMgr for this Problem.

FILE * solnFile_;
//
// Output file for comprehensive solution.
d36 363
a398 81
WitGlobalComp * myGlobalComp_;
//
// Ptr to myCompMgr ()->myGlobalComp ().

WitOptComp * myOptComp_;
//
// Ptr to myCompMgr ()->myOptComp ().

int nPeriods_;
//
// Same value as myCompMgr ()->myGlobalComp ()->nPeriods ().

WitPeriod lastPeriod_;
//
// The last period in this Problem, i.e., nPeriods_ - 1.

//------------------------------------------------------------------------
// LinkMgrs.
//------------------------------------------------------------------------

WitObjLinkMgr           * myObjLinkMgr_;
WitPairLinkMgr <int>    * myIntPairLinkMgr_;
WitPairLinkMgr <bool>   * myBoolPairLinkMgr_;
WitPairLinkMgr <double> * myDblPairLinkMgr_;
WitPairLinkMgr <void *> * myVoidPtrPairLinkMgr_;
WitTripLinkMgr          * myTripLinkMgr_;

//------------------------------------------------------------------------
// Variants.
//------------------------------------------------------------------------

WitVariant * optVariant_;
//
// The version of the problem solved by optimizing implosion.

WitVariant * extOptVariant_;
//
// The version of the problem solved by external optimizing implosion.

WitVariant * heurVariant_;
//
// The version of the problem solved by heuristic implosion.

WitVariant * heurOptVariant_;
//
// The version of the problem solved by heuristic implosion when used
// as an initial solution to optimizing implosion.

WitVariant * inputVariant_;
//
// The version of the problem considered when the solution is from
// the input data.

WitList <WitVariant> allVariants_;
//
// The list of all possible Variants.

WitVariant * currentVariant_;
//
// The version of the implosion problem currently under consideration.

//------------------------------------------------------------------------
// FlexVecAssts.
//------------------------------------------------------------------------

WitFlexVAsst * scalarFlexVAsst_;
WitFlexVAsst * vectorFlexVAsst_;
//
// The FlexVAsst owned by this Problem for scalar and vector mode.

//------------------------------------------------------------------------
// Some useful vectors allocated when the first Part or Operation is
// constructed.
//------------------------------------------------------------------------

WitTVec <double> dispDoubleVector_;
WitTVec <int>    dispIntVector_;
WitTVec <bool>   dispBoolVector_;
//
// TVecs used by display.
};
d408 2
a409 2
\
for (thePer = 0; thePer < (theProblem)->nPeriods (); ++ thePer)             \
@


1.98
log
@Modifiable heuristic allocation
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d33 284
a316 2
   {
   public:
d318 81
a398 363
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitProblem (WitSession * theSession);
         //
         // mySession_ <-- theSession.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitProblem ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitSession *,              mySession)
      accessFunc (WitCompMgr *,              myCompMgr)
      accessFunc (WitPreprocessor *,         myPreprocessor)
      accessFunc (WitPostprocessor *,        myPostprocessor)
      accessFunc (WitHeurImploder *,         myHeurImploder)
      accessFunc (WitEqAllocator *,          myEqAllocator)
      accessFunc (WitHeurAllMgr *,           myHeurAllMgr)
      accessFunc (WitDetOptImpMgr *,         myDetOptImpMgr)
      accessFunc (WitStochImpMgr *,          myStochImpMgr)
      accessFunc (WitPipMgr *,               myPipMgr)
      accessFunc (WitOrigMrpExp *,           myOrigMrpExp)
      accessFunc (WitFSS *,                  myFSS)
      accessFunc (WitDataReader *,           myDataReader)
      accessFunc (WitDataWriter *,           myDataWriter)
      accessFunc (WitSolnWriter *,           mySolnWriter)
      accessFunc (WitMsgFacility &,          myMsgFac)
      accessFunc (WitRun *,                  myWitRun)
      accessFunc (WitApiMgr *,               myApiMgr)
      accessFunc (FILE *,                    solnFile)
      accessFunc (int,                       nPeriods)
      accessFunc (WitPeriod,                 lastPeriod)
      accessFunc (WitObjLinkMgr *,           myObjLinkMgr)
      accessFunc (WitPairLinkMgr <int> *,    myIntPairLinkMgr)
      accessFunc (WitPairLinkMgr <bool> *,   myBoolPairLinkMgr)
      accessFunc (WitPairLinkMgr <double> *, myDblPairLinkMgr)
      accessFunc (WitPairLinkMgr <void *> *, myVoidPtrPairLinkMgr)
      accessFunc (WitTripLinkMgr *,          myTripLinkMgr)
      accessFunc (WitVariant *,              optVariant)
      accessFunc (WitVariant *,              extOptVariant)
      accessFunc (WitVariant *,              heurVariant)
      accessFunc (WitVariant *,              heurOptVariant)
      accessFunc (WitVariant *,              inputVariant)
      accessFunc (WitVariant *,              currentVariant)
      accessFunc (WitFlexVAsst *,            scalarFlexVAsst)
      accessFunc (WitFlexVAsst *,            vectorFlexVAsst)

      inline WitGlobalComp * myGlobalComp ()
         {
         return myGlobalComp_;
         }

      inline WitOptComp * myOptComp ()
         {
         return myOptComp_;
         }

      bool wit34Compatible ();
         //
         // Returns myCompMgr ()->myGlobalComp ()->wit34Compatible ();

      WitHeurModifier * myHeurModifier ();
         //
         // Wrapper for myHeurAllMgr_.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void store (WitVariant * theVariant);
         //
         // Stores theVariant in this Problem.

      void setUpVariants ();
         //
         // Sets up the Variants for this Problem.

      void makeCurrent (WitVariant * theVariant);
         //
         // Sets currentVariant to theVariant.

      void allocTVecs ();
         //
         // Allocates various TVecs, if this has not already been done.
         // This is done when the first Part or Operation is constructed, at
         // which point nPeriods becomes frozen.

      void clearTVecs ();
         //
         // Clears various TVecs, if this has not already been done.
         // This is done when the # of Parts and Operations becomes 0, at which
         // point nPeriods becomes unfrozen.

      void updateNPeriods ();
         //
         // Sets nPeriods_ to the current value in myGlobalComp ().

      void displayData (const char * filename);
         //
         // Displays the input and preprocessing data of this Problem, i.e.,
         // prints it in an easy-to-read format.
         // filename is the name of the file to which it will print.

      void displayGlobalData ();
         //
         // Displays the global input and preprocessing data of this Problem.

      void displayNonGlobalData ();
         //
         // Displays the non-global input and preprocessing data of this
         // Problem.

      void display (WitMsgID theMsgID, const WitDblFlexVec & theFlexVec);
         //
         // Displays theFlexVec, issuing the indicated Msg.

      void display (WitMsgID theMsgID, const WitFlexVec <int> & theFlexVec);
         //
         // Displays theFlexVec, issuing the indicated Msg.

      void display (WitMsgID theMsgID, const WitFlexVec <bool> & theFlexVec);
         //
         // Displays theFlexVec, issuing the indicated Msg.

      void display (WitMsgID theMsgID, const WitObjVec & theObjVec);
         //
         // Displays theObjVec, issuing the indicated Msg.

      void displayBoundVec (
            WitMsgFragID          theFragID,
            const WitDblFlexVec & theFlexVec);
         //
         // Displays theFlexVec as a BoundSet vector indicated by theFragID.

      void copyProblemInto (WitProblem * theProblem);
         //
         // Copies the input state of this Problem into theProblem: the
         // Components and the input attributes. Preprocesses this Problem
         // and puts theProblem into an unpreprocessed state. Preprocessing
         // This Problem is done to check for errors. The Components of the
         // Problem are constructed in the same order as the order in which the
         // Components of this Problem were contructed.

      void prepSetUnpreAttr ();
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set, thereby necessitating unpreprocessing.
         // The attribute is not allowed to be set in stochastic mode.

      void prepSetUnpostAttr ();
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set, thereby necessitating unpostprocessing.
         // The attribute is not allowed to be set in stochastic mode.

      void prepSetNonUnpostAttr ();
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set without necessitating unpreprocessing or unpostprocessing.
         // The attribute is not allowed to be set in stochastic mode.

      void prepSetStochModeAttr (const char * theAttName);
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set, thereby necessitating unpostprocessing.
         // The attribute is allowed to be set in stochastic mode.
         // theAttName is the name of the attribute.

      void resetSoln ();
         //
         // Puts this Problem into a state reflecting that the data has been
         // changed in a way that would invalidate the current solution, in any.

      void writeSoln (const char * fileName);
         //
         // Prints the comprehensive implosion solution.
         // fileName is the name of the file to be written to.

      void writeSolnValue (double val);
         //
         // Writes val to solnFile (), or blank, if val would print as 0.

      void writeMrpSoln (const char * fileName);
         //
         // Prints the comprehensive MRP solution.
         // fileName is the name of the file to be written to.

      void computeFssIfNeeded ();
         //
         // Computed FSS it hasn't already been computed.
         // It is an error to call this function when postprocessed () is false

      void pauseForInput (const char * theText);
         //
         // Pauses execution and waits for user input.
         // Displays theText.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitProblem);

      void writeStochSoln ();
         //
         // Prints the stochastic comprehensive implosion solution.

      void writeSolnInt ();
         //
         // Prints the comprehensive implosion solution.
         // Internal version.

      void writeBoundsSoln ();
         //
         // Prints the comprehensive implosion solution for BoundSets.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSession * const mySession_;
         //
         // The Session that owns this Problem.

      WitCompMgr * myCompMgr_;
         //
         // The CompMgr owned by this Problem.

      //------------------------------------------------------------------------
      // Singleton objects.
      // Each of these objects has a one-to-one relationship with this Problem.
      // The Problem delegates some of its responsibilities to each of them.
      // It creates and destroys them when it is created and destroyed.
      //------------------------------------------------------------------------

      WitPreprocessor  * myPreprocessor_;
      WitPostprocessor * myPostprocessor_;
      WitHeurImploder  * myHeurImploder_;
      WitEqAllocator   * myEqAllocator_;
      WitHeurAllMgr    * myHeurAllMgr_;
      WitDetOptImpMgr  * myDetOptImpMgr_;
      WitStochImpMgr   * myStochImpMgr_;
      WitPipMgr        * myPipMgr_;
      WitOrigMrpExp    * myOrigMrpExp_;
      WitFSS           * myFSS_;
      WitDataReader    * myDataReader_;
      WitDataWriter    * myDataWriter_;
      WitSolnWriter    * mySolnWriter_;

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFacility for this Problem.

      WitRun * const myWitRun_;
         //
         // The WitRun for this Problem.

      WitApiMgr * const myApiMgr_;
         //
         // The ApiMgr for this Problem.

      FILE * solnFile_;
         //
         // Output file for comprehensive solution.

      WitGlobalComp * myGlobalComp_;
         //
         // Ptr to myCompMgr ()->myGlobalComp ().

      WitOptComp * myOptComp_;
         //
         // Ptr to myCompMgr ()->myOptComp ().

      int nPeriods_;
         //
         // Same value as myCompMgr ()->myGlobalComp ()->nPeriods ().

      WitPeriod lastPeriod_;
         //
         // The last period in this Problem, i.e., nPeriods_ - 1.

      //------------------------------------------------------------------------
      // LinkMgrs.
      //------------------------------------------------------------------------

      WitObjLinkMgr           * myObjLinkMgr_;
      WitPairLinkMgr <int>    * myIntPairLinkMgr_;
      WitPairLinkMgr <bool>   * myBoolPairLinkMgr_;
      WitPairLinkMgr <double> * myDblPairLinkMgr_;
      WitPairLinkMgr <void *> * myVoidPtrPairLinkMgr_;
      WitTripLinkMgr          * myTripLinkMgr_;

      //------------------------------------------------------------------------
      // Variants.
      //------------------------------------------------------------------------

      WitVariant * optVariant_;
         //
         // The version of the problem solved by optimizing implosion.

      WitVariant * extOptVariant_;
         //
         // The version of the problem solved by external optimizing implosion.

      WitVariant * heurVariant_;
         //
         // The version of the problem solved by heuristic implosion.

      WitVariant * heurOptVariant_;
         //
         // The version of the problem solved by heuristic implosion when used
         // as an initial solution to optimizing implosion.

      WitVariant * inputVariant_;
         //
         // The version of the problem considered when the solution is from
         // the input data.

      WitList <WitVariant> allVariants_;
         //
         // The list of all possible Variants.

      WitVariant * currentVariant_;
         //
         // The version of the implosion problem currently under consideration.

      //------------------------------------------------------------------------
      // FlexVecAssts.
      //------------------------------------------------------------------------

      WitFlexVAsst * scalarFlexVAsst_;
      WitFlexVAsst * vectorFlexVAsst_;
         //
         // The FlexVAsst owned by this Problem for scalar and vector mode.

      //------------------------------------------------------------------------
      // Some useful vectors allocated when the first Part or Operation is
      // constructed.
      //------------------------------------------------------------------------

      WitTVec <double> dispDoubleVector_;
      WitTVec <int>    dispIntVector_;
      WitTVec <bool>   dispBoolVector_;
         //
         // TVecs used by display.
   };
d408 2
a409 2
                                                                               \
   for (thePer = 0; thePer < (theProblem)->nPeriods (); ++ thePer)             \
@


1.97
log
@Heuristic Adjustment
@
text
@d108 1
a108 1
      WitHeurAdjuster * myHeurAdjuster ();
@


1.96
log
@Heuristic Adjustment
@
text
@a64 1
      accessFunc (WitHeurAdjuster *,         myHeurAdjuster)
d108 4
a288 1
      WitHeurAdjuster  * myHeurAdjuster_;
@


1.95
log
@Heuristic Adjustment
@
text
@d65 1
a65 1
      accessFunc (WitHeurAdjMgr *,           myHeurAdjMgr)
d286 1
a286 1
      WitHeurAdjMgr    * myHeurAdjMgr_;
@


1.94
log
@Pause/Resume
@
text
@d65 1
a65 1
      accessFunc (WitHeurPauseMgr *,         myHeurPauseMgr)
d286 1
a286 1
      WitHeurPauseMgr  * myHeurPauseMgr_;
@


1.93
log
@Multi-objective mode
@
text
@d65 1
d286 1
@


1.92
log
@Multi-Objective Mode
@
text
@d216 1
a216 1
      void writeSoln (const WitString & fileName);
d225 1
a225 1
      void writeMrpSoln (const WitString & fileName);
@


1.91
log
@Multi-Objective Mode
@
text
@d155 1
a155 3
      void display (
            WitMsgID              theMsgID,
            const WitDblFlexVec & theFlexVec);
d159 1
a159 3
      void display (
            WitMsgID                 theMsgID,
            const WitFlexVec <int> & theFlexVec);
d163 1
a163 3
      void display (
            WitMsgID                  theMsgID,
            const WitFlexVec <bool> & theFlexVec);
d167 4
@


1.90
log
@Removing objective #2.
@
text
@d159 1
a159 1
         // Displays theFlexVec, using theMsgNum, issing the indicated Msg.
d165 1
a165 1
         // Displays theFlexVec using theMsgNum, issing the indicated Msg.
d171 1
a171 1
         // Displays theFlexVec using theMsgNum, issing the indicated Msg.
@


1.89
log
@Stochastic Implosion
@
text
@a217 4
      void genPriorities ();
         //
         // Automatically generates priorities from objective data.

@


1.88
log
@Stochastic Implosion
@
text
@d206 7
@


1.87
log
@Stochastic Implosion
@
text
@a205 7
      void prepSetStochModeAttr (const char * theAttName);
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set, thereby necessitating unpostprocessing.
         // The attribute is allowed to be set in stochastic mode.
         // theAttName is the name of the attribute.

@


1.86
log
@Stochastic Implosion
@
text
@d65 1
a65 1
      accessFunc (WitOptImploder *,          myOptImploder)
d291 1
a291 1
      WitOptImploder   * myOptImploder_;
@


1.85
log
@Stochastic Implosion
@
text
@d150 5
@


1.84
log
@Stochastic Implosion
@
text
@d201 1
a201 1
      void prepSetStochModeAttr ();
d205 2
a206 9
         // The attribute is allowed to be set in stochastic mode, but not in
         // stochastic solution mode.

      void prepSetStochSolnModeAttr ();
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set, thereby necessitating unpostprocessing.
         // The attribute is allowed to be set in stochastic mode, including
         // stochastic solution mode.
@


1.83
log
@Stochastic Implosion
@
text
@d205 9
a213 1
         // The attribute is allowed to be set in stochastic mode.
@


1.82
log
@Stochastic Implosion
@
text
@d187 1
d193 1
d199 7
@


1.81
log
@Stochastic Implosion
@
text
@a59 1
      accessFunc (WitAttMgr *,               myAttMgr)
a270 1
      WitAttMgr        * myAttMgr_;
@


1.80
log
@Stochastic Implosion
@
text
@d60 1
d272 1
@


1.79
log
@Stochastic Implosion
@
text
@d66 1
a66 1
      accessFunc (WitStochMgr *,             myStochMgr)
d277 1
a277 1
      WitStochMgr      * myStochMgr_;
@


1.78
log
@Stochastic Implosion
@
text
@d239 9
@


1.77
log
@Stochastic Implosion
@
text
@d183 1
a183 1
      void settingUnpreAttr ();
d185 2
a186 2
         // Takes action appropriate when setting an attribute that requires
         // unpreprocessing.
d188 1
a188 1
      void settingUnpostAttr ();
d190 2
a191 2
         // Takes action appropriate when setting an attribute that requires
         // unpostprocessing.
d193 1
a193 1
      void settingNonUnpostAttr ();
d195 2
a196 2
         // Takes action appropriate when setting an attribute that does not
         // require unpreprocessing.
@


1.76
log
@Stochastic implosion.
@
text
@d190 2
a191 6
         // Takes action appropriate when setting a non-stochastic attribute
         // that requires unpostprocessing.

      void settingStochAttr ();
         //
         // Takes action appropriate when setting a stochastic attribute.
@


1.75
log
@Stochastic implosion.
@
text
@d197 5
@


1.74
log
@Stochastic Implosion.
@
text
@d183 14
@


1.73
log
@witCopy<Object>Data
@
text
@d66 1
d253 1
@


1.72
log
@External opt implosion.
@
text
@a77 1
      accessFunc (WitProblem *,              copyingIntoProblem)
a294 5
      WitProblem * copyingIntoProblem_;
         //
         // The Problem into which this Problem is being copied, if any, else 
         // NULL.

@


1.71
log
@External optimizing implosion.
@
text
@d85 5
a89 5
      accessFunc (WitVariant *,              myOptVariant)
      accessFunc (WitVariant *,              myExtOptVariant)
      accessFunc (WitVariant *,              myHeurVariant)
      accessFunc (WitVariant *,              myHeurOptVariant)
      accessFunc (WitVariant *,              myInputVariant)
d316 1
a316 1
      WitVariant * myOptVariant_;
d320 1
a320 1
      WitVariant * myExtOptVariant_;
d324 1
a324 1
      WitVariant * myHeurVariant_;
d328 1
a328 1
      WitVariant * myHeurOptVariant_;
d333 1
a333 1
      WitVariant * myInputVariant_;
@


1.70
log
@App controlled opt implosion.
@
text
@d86 1
d320 4
@


1.69
log
@App controlled opt implosion.
@
text
@a89 3
      accessFunc (WitDataAlt *,              noOpAlt)
      accessFunc (WitDataAlt *,              postprocAlt)
      accessFunc (WitDataAlt *,              preprocAlt)
d182 1
a182 1
      void incur (WitDataAlt * theDataAlt);
d184 2
a185 3
         // Incurrs theDataAlt:
         // Updates the state of this Problem to reflect that this kind of
         // data alteration of occurred.
a341 16
      // DataAlts.
      //------------------------------------------------------------------------

      WitDataAlt * noOpAlt_;
         //
         // Represents a data alteration that has no impact.

      WitDataAlt * postprocAlt_;
         //
         // Represents a data alteration that necessitates unpostprocessing.

      WitDataAlt * preprocAlt_;
         //
         // Represents a data alteration that necessitates unpreprocessing.

      //------------------------------------------------------------------------
@


1.68
log
@App controlled opt implosion.
@
text
@a194 37
      bool preprocessed ();
         //
         // Returns true, iff this Problem is in a preprocessed state.

      void preprocess ();
         //
         // Performs preprocessing for this problem.

      bool optPreprocessed ();
         //
         // Returns true, iff this Problem is in an opt-preprocessed state.

      void optPreprocess ();
         //
         // Performs preprocessing of this Problem for an optimizing implosion.

      void unpreprocess ();
         //
         // Does unpreprocessing for this Problem.

      void heurAllocIsReset ();
         //
         // Responds to the fact that heuristic allocation is being reset.

      bool postprocessed ();
         //
         // Returns true, iff this Problem is in a postprocessed state.

      void postprocess ();
         //
         // Performs postprocessing based on the current production and
         // shipment schedules and currentVariant ().

      void unpostprocess ();
         //
         // Does unpostprocessing for this Problem.

@


1.67
log
@App controlled opt implosion.
@
text
@d211 4
a263 4
      void unpreprocess ();
         //
         // Does unpreprocessing for this Problem.

@


1.66
log
@Updated the copyright date on all source files.
@
text
@d185 1
a185 1
      void incur (const WitDataAlt * theDataAlt);
@


1.65
log
@GPIP
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.64
log
@[shared-resource pegging]
@
text
@d247 1
a247 1
      void pauseForInput ();
d250 1
@


1.63
log
@[shared-resource pegging]
@
text
@a79 1
      accessFunc (WitDblDblLinkMgr *,        myDblDblLinkMgr)
a344 1
      WitDblDblLinkMgr        * myDblDblLinkMgr_;
@


1.62
log
@[shared-resource pegging]
@
text
@d80 1
d346 1
@


1.61
log
@[shared-resource pegging]
@
text
@d83 1
a83 1
      accessFunc (WitPairLinkMgr <void *> *, myTlPtrPairLinkMgr)
d348 1
a348 1
      WitPairLinkMgr <void *> * myTlPtrPairLinkMgr_;
@


1.60
log
@[multi-thread]
@
text
@d58 37
a94 37
      accessFunc (WitSession *,                  mySession)
      accessFunc (WitCompMgr *,                  myCompMgr)
      accessFunc (WitPreprocessor *,             myPreprocessor)
      accessFunc (WitPostprocessor *,            myPostprocessor)
      accessFunc (WitHeurImploder *,             myHeurImploder)
      accessFunc (WitEqAllocator *,              myEqAllocator)
      accessFunc (WitHeurAllMgr *,               myHeurAllMgr)
      accessFunc (WitOptImploder *,              myOptImploder)
      accessFunc (WitPipMgr *,                   myPipMgr)
      accessFunc (WitOrigMrpExp *,               myOrigMrpExp)
      accessFunc (WitFSS *,                      myFSS)
      accessFunc (WitDataReader *,               myDataReader)
      accessFunc (WitDataWriter *,               myDataWriter)
      accessFunc (WitSolnWriter *,               mySolnWriter)
      accessFunc (WitMsgFacility &,              myMsgFac)
      accessFunc (WitRun *,                      myWitRun)
      accessFunc (WitApiMgr *,                   myApiMgr)
      accessFunc (FILE *,                        solnFile)
      accessFunc (int,                           nPeriods)
      accessFunc (WitPeriod,                     lastPeriod)
      accessFunc (WitProblem *,                  copyingIntoProblem)
      accessFunc (WitObjLinkMgr *,               myObjLinkMgr)
      accessFunc (WitPairLinkMgr <int> *,        myIntPairLinkMgr)
      accessFunc (WitPairLinkMgr <bool> *,       myBoolPairLinkMgr)
      accessFunc (WitPairLinkMgr <double> *,     myDblPairLinkMgr)
      accessFunc (WitPairLinkMgr <WitTlObj *> *, myTlPtrPairLinkMgr)
      accessFunc (WitTripLinkMgr *,              myTripLinkMgr)
      accessFunc (WitVariant *,                  myOptVariant)
      accessFunc (WitVariant *,                  myHeurVariant)
      accessFunc (WitVariant *,                  myHeurOptVariant)
      accessFunc (WitVariant *,                  myInputVariant)
      accessFunc (WitVariant *,                  currentVariant)
      accessFunc (WitDataAlt *,                  noOpAlt)
      accessFunc (WitDataAlt *,                  postprocAlt)
      accessFunc (WitDataAlt *,                  preprocAlt)
      accessFunc (WitFlexVAsst *,                scalarFlexVAsst)
      accessFunc (WitFlexVAsst *,                vectorFlexVAsst)
d344 6
a349 6
      WitObjLinkMgr               * myObjLinkMgr_;
      WitPairLinkMgr <int>        * myIntPairLinkMgr_;
      WitPairLinkMgr <bool>       * myBoolPairLinkMgr_;
      WitPairLinkMgr <double>     * myDblPairLinkMgr_;
      WitPairLinkMgr <WitTlObj *> * myTlPtrPairLinkMgr_;
      WitTripLinkMgr              * myTripLinkMgr_;
@


1.59
log
@Vector Prop-Rt.
@
text
@d228 1
a228 1
      void writeSoln (const WitString & fileName, bool fssInput);
a231 1
         // If fssInput is true, the input for FSS will be printed.
@


1.58
log
@Vector PropRt.
@
text
@a169 6
      void display (
            WitMsgID               theMsgID,
            const WitTVec <bool> & theTVec);
         //
         // Displays theTVec using theMsgNum, issing the indicated Msg.

d414 1
@


1.57
log
@Tie Breaking Prop-Rt.
@
text
@d164 1
a164 1
      void displayBoolVec (
d170 1
a170 1
      void displayBoolVec (
@


1.56
log
@Double Precision.
@
text
@d66 1
a66 1
      accessFunc (WitPip::SysMgr *,              myPipSysMgr)
d299 1
a299 1
      WitPip::SysMgr   * myPipSysMgr_;
@


1.55
log
@Double Precision.
@
text
@a239 4
      void writeSolnValue (float val);
         //
         // Writes val to solnFile (), or blank, if val would print as 0.

@


1.54
log
@Double Precision.
@
text
@d422 2
a423 2
      WitTVec <float> dispFloatVector_;
      WitTVec <int>   dispIntVector_;
@


1.53
log
@Double Precision.
@
text
@d153 2
a154 2
            WitMsgID                    theMsgID,
            const WitFlexVec <double> & theFlexVec);
d177 2
a178 2
            WitMsgFragID                theFragID,
            const WitFlexVec <double> & theFlexVec);
@


1.52
log
@Double Precision.
@
text
@a152 6
            WitMsgID                   theMsgID,
            const WitFlexVec <float> & theFlexVec);
         //
         // Displays theFlexVec, using theMsgNum, issing the indicated Msg.

      void display (
a174 6

      void displayBoundVec (
            WitMsgFragID               theFragID,
            const WitFlexVec <float> & theFlexVec);
         //
         // Displays theFlexVec as a BoundSet vector indicated by theFragID.
@


1.51
log
@Double Precision.
@
text
@d159 2
a160 2
            WitMsgID           theMsgID,
            const WitRealVec & theRealVec);
d162 1
a162 1
         // Displays theRealVec, using theMsgNum, issing the indicated Msg.
d189 2
a190 2
            WitMsgFragID       theFragID,
            const WitRealVec & theRealVec);
d192 1
a192 1
         // Displays theRealVec as a BoundSet vector indicated by theFragID.
@


1.50
log
@Double Precision.
@
text
@d76 2
d93 2
a105 10
      inline int nPeriods ()
         {
         return * nPeriodsPtr_;
         }

      inline WitPeriod lastPeriod ()
         {
         return * lastPeriodPtr_;
         }

d138 4
d350 1
a350 1
      const int * nPeriodsPtr_;
d352 1
a352 1
         // Ptr to myCompMgr ()->myGlobalComp ()->nPeriods ().
d354 1
a354 1
      const WitPeriod * lastPeriodPtr_;
d356 1
a356 1
         // Ptr to myCompMgr ()->myGlobalComp ()->lastPeriod ().
d419 9
@


1.49
log
@Double Precision.
@
text
@d161 2
a162 2
            WitMsgID              theMsgID,
            const WitFltRealVec & theFltRealVec);
d164 1
a164 13
         // Displays theFltRealVec, using theMsgNum, issing the indicated Msg.

      void display (
            WitMsgID              theMsgID,
            const WitDblRealVec & theDblRealVec);
         //
         // Displays theDblRealVec, using theMsgNum, issing the indicated Msg.

      void display (
            WitMsgID              theMsgID,
            const WitFltRealTVc & theFltRealTVc);
         //
         // Displays theFltRealTVc, using theMsgNum, issing the indicated Msg.
@


1.48
log
@Double Precision.
@
text
@d161 2
a162 2
            WitMsgID           theMsgID,
            const WitRealVec & theRealVec);
d164 13
a176 1
         // Displays theRealVec, using theMsgNum, issing the indicated Msg.
@


1.47
log
@Double Precision.
@
text
@d190 6
@


1.46
log
@Double Precision.
@
text
@d252 4
@


1.45
log
@Double Precision.
@
text
@d161 6
@


1.44
log
@Continued double precision.
@
text
@a115 5
      inline static int nInstances ()
         {
         return nInstances_;
         }

a347 4

      static int nInstances_;
         //
         // # of instances of this class that currently exist.
@


1.43
log
@Began implementation of double precision.
@
text
@d116 5
d353 4
@


1.42
log
@Continued implementation of PIP.
@
text
@d256 4
@


1.41
log
@Continued implementation of PIP.
@
text
@d66 1
a66 1
      accessFunc (WitPip::SubsysMgr *,           myPipMgr)
d291 12
a302 12
      WitPreprocessor   * myPreprocessor_;
      WitPostprocessor  * myPostprocessor_;
      WitHeurImploder   * myHeurImploder_;
      WitEqAllocator    * myEqAllocator_;
      WitHeurAllMgr     * myHeurAllMgr_;
      WitOptImploder    * myOptImploder_;
      WitPip::SubsysMgr * myPipMgr_;
      WitOrigMrpExp     * myOrigMrpExp_;
      WitFSS            * myFSS_;
      WitDataReader     * myDataReader_;
      WitDataWriter     * myDataWriter_;
      WitSolnWriter     * mySolnWriter_;
@


1.40
log
@Continued implementation of PIP.
@
text
@d66 1
a66 1
      accessFunc (WitPip::Mgr *,                 myPipMgr)
d291 12
a302 12
      WitPreprocessor  * myPreprocessor_;
      WitPostprocessor * myPostprocessor_;
      WitHeurImploder  * myHeurImploder_;
      WitEqAllocator   * myEqAllocator_;
      WitHeurAllMgr    * myHeurAllMgr_;
      WitOptImploder   * myOptImploder_;
      WitPip::Mgr      * myPipMgr_;
      WitOrigMrpExp    * myOrigMrpExp_;
      WitFSS           * myFSS_;
      WitDataReader    * myDataReader_;
      WitDataWriter    * myDataWriter_;
      WitSolnWriter    * mySolnWriter_;
@


1.39
log
@Continued implementation of PIP.
@
text
@d82 1
d354 1
@


1.38
log
@Continued implementation of PIP.
@
text
@d66 1
a66 1
      accessFunc (WitPip::Int *,                 myPipInt)
d296 1
a296 1
      WitPip::Int      * myPipInt_;
@


1.37
log
@Continued implementation of PIP.
@
text
@d66 1
a66 1
      accessFunc (WitPIP::WitPipInt *,           myPipInt)
d290 12
a301 12
      WitPreprocessor   * myPreprocessor_;
      WitPostprocessor  * myPostprocessor_;
      WitHeurImploder   * myHeurImploder_;
      WitEqAllocator    * myEqAllocator_;
      WitHeurAllMgr     * myHeurAllMgr_;
      WitOptImploder    * myOptImploder_;
      WitPIP::WitPipInt * myPipInt_;
      WitOrigMrpExp     * myOrigMrpExp_;
      WitFSS            * myFSS_;
      WitDataReader     * myDataReader_;
      WitDataWriter     * myDataWriter_;
      WitSolnWriter     * mySolnWriter_;
@


1.36
log
@Continued implementation of PIP.
@
text
@d66 1
a66 1
      accessFunc (WitPipInt *,                   myPipInt)
d290 12
a301 12
      WitPreprocessor  * myPreprocessor_;
      WitPostprocessor * myPostprocessor_;
      WitHeurImploder  * myHeurImploder_;
      WitEqAllocator   * myEqAllocator_;
      WitHeurAllMgr    * myHeurAllMgr_;
      WitOptImploder   * myOptImploder_;
      WitPipInt        * myPipInt_;
      WitOrigMrpExp    * myOrigMrpExp_;
      WitFSS           * myFSS_;
      WitDataReader    * myDataReader_;
      WitDataWriter    * myDataWriter_;
      WitSolnWriter    * mySolnWriter_;
@


1.35
log
@Continued implementation of post-implosion pegging.
@
text
@d32 1
a32 1
class WitProblem: public WitUtil
@


1.34
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d66 1
a66 1
      accessFunc (WitPIPegInt *,                 myPIPegInt)
d296 1
a296 1
      WitPIPegInt      * myPIPegInt_;
@


1.33
log
@Continued implementation of proportionate routing.
@
text
@d66 1
d296 1
@


1.32
log
@Continued implementation of proportionate routing.
@
text
@a20 1
#include <TlObj.h>
@


1.31
log
@Replaced some C-style casts with C++ style casts.
@
text
@a114 5
      inline const WitPeriod * ptrToPer (WitPeriod thePer)
         {
         return ptrToPer_[thePer];
         }

a407 4

      WitTVec <WitPeriod *> ptrToPer_;
         //
         // * ptrToPer_[thePer] == thePer.
@


1.30
log
@Internal changes.
@
text
@d21 1
@


1.29
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d78 1
d110 1
a110 1
      WitBoolean wit34Compatible ();
d167 13
a179 1
         // Displays theVector using theMsgNum, issing the indicated Msg.
d206 1
a206 1
      WitBoolean preprocessed ();
d208 1
a208 1
         // Returns TRUE, iff this Problem is in a preprocessed state.
d214 1
a214 1
      WitBoolean optPreprocessed ();
d216 1
a216 1
         // Returns TRUE, iff this Problem is in an opt-preprocessed state.
d226 1
a226 1
      WitBoolean postprocessed ();
d228 1
a228 1
         // Returns TRUE, iff this Problem is in a postprocessed state.
d239 1
a239 1
      void writeSoln (const WitString & fileName, WitBoolean fssInput);
d243 1
a243 1
         // If fssInput is TRUE, the input for FSS will be printed.
d257 1
a257 1
         // It is an error to call this function when postprocessed () is FALSE
d353 1
d409 1
d411 1
a411 5
         // A TVec used by display.

      WitTVec <int> dispIntVector_;
         //
         // A TVec used by display.
@


1.28
log
@Continued implementation of Single-Source.
@
text
@a245 4
      void closeFilesAtExit ();
         //
         // Closes files for an error exit.

@


1.27
log
@Continued implementation of Single-Source.
@
text
@d113 1
a113 1
      inline const WitPeriod * ptrFor (WitPeriod thePer)
d115 1
a115 1
         return & samePerAs_[thePer];
d140 6
d406 1
a406 1
      WitTVec <WitPeriod> samePerAs_;
d408 1
a408 1
         // samePerAs_[thePer] == thePer.
@


1.26
log
@Continued implementation of Single-Source.
@
text
@a76 1
      accessFunc (WitPerLinkMgr *,               myPerLinkMgr)
a336 1
      WitPerLinkMgr               * myPerLinkMgr_;
@


1.25
log
@Continued implementation of Single-Source.
@
text
@d114 5
d401 4
@


1.24
log
@Continued implementation of single source.
@
text
@d77 1
d333 1
@


1.23
log
@Preliminary work on single source.
@
text
@d58 30
a87 29
      accessFunc (WitSession *,                 mySession)
      accessFunc (WitCompMgr *,                 myCompMgr)
      accessFunc (WitPreprocessor *,            myPreprocessor)
      accessFunc (WitPostprocessor *,           myPostprocessor)
      accessFunc (WitHeurImploder *,            myHeurImploder)
      accessFunc (WitEqAllocator *,             myEqAllocator)
      accessFunc (WitHeurAllMgr *,              myHeurAllMgr)
      accessFunc (WitOptImploder *,             myOptImploder)
      accessFunc (WitOrigMrpExp *,              myOrigMrpExp)
      accessFunc (WitFSS *,                     myFSS)
      accessFunc (WitDataReader *,              myDataReader)
      accessFunc (WitDataWriter *,              myDataWriter)
      accessFunc (WitSolnWriter *,              mySolnWriter)
      accessFunc (WitMsgFacility &,             myMsgFac)
      accessFunc (WitRun *,                     myWitRun)
      accessFunc (WitApiMgr *,                  myApiMgr)
      accessFunc (FILE *,                       solnFile)
      accessFunc (WitProblem *,                 copyingIntoProblem)
      accessFunc (WitObjLinkMgr *,              myObjLinkMgr)
      accessFunc (WitPairLinkMgr <WitPeriod> *, myPerPairLinkMgr)
      accessFunc (WitPairLinkMgr <double>    *, myDblPairLinkMgr)
      accessFunc (WitVariant *,                 myOptVariant)
      accessFunc (WitVariant *,                 myHeurVariant)
      accessFunc (WitVariant *,                 myHeurOptVariant)
      accessFunc (WitVariant *,                 myInputVariant)
      accessFunc (WitVariant *,                 currentVariant)
      accessFunc (WitDataAlt *,                 noOpAlt)
      accessFunc (WitDataAlt *,                 postprocAlt)
      accessFunc (WitDataAlt *,                 preprocAlt)
d331 4
a334 3
      WitObjLinkMgr              * myObjLinkMgr_;
      WitPairLinkMgr <WitPeriod> * myPerPairLinkMgr_;
      WitPairLinkMgr <double>    * myDblPairLinkMgr_;
@


1.22
log
@Continued preliminary work on single source.
@
text
@d146 1
a146 1
            const WitFlexVec (float) & theFlexVec);
d152 1
a152 1
            const WitFlexVec (int) & theFlexVec);
d158 1
a158 1
            const WitFlexVec (float) & theFlexVec);
@


1.21
log
@Preliminary work on single source.
@
text
@d385 1
a385 1
      WitTVec (float) dispFloatVector_;
d389 1
a389 1
      WitTVec (int) dispIntVector_;
@


1.20
log
@Continued implementation of object iteration.
@
text
@d356 1
a356 1
      WitList (WitVariant) allVariants_;
@


1.19
log
@Began implementation of object iteration.
@
text
@d84 1
a84 1
      accessFunc (WitDataAlt *,                 noopAlt)
d368 1
a368 1
      WitDataAlt * noopAlt_;
@


1.18
log
@Refactoring for constrained stock reallocation.
@
text
@d19 1
@


1.17
log
@Initial implementation of pegging.
@
text
@a86 2
      accessFunc (const WitPtrTVec <WitFixedPer> &, myFixedPer)

a390 4

      WitPtrTVec <WitFixedPer> & myFixedPer_;
         //
         // myFixedPer_[thePer]->myPeriod () == thePer.
@


1.16
log
@Moved Stack template implementations to header files.
@
text
@d63 1
a63 1
      accessFunc (WitHeurAllocator *,           myHeurAllocator)
d278 1
a278 1
      WitHeurAllocator * myHeurAllocator_;
@


1.15
log
@More templates.
@
text
@d57 29
a85 27
      accessFunc (WitSession *,       mySession)
      accessFunc (WitCompMgr *,       myCompMgr)
      accessFunc (WitPreprocessor *,  myPreprocessor)
      accessFunc (WitPostprocessor *, myPostprocessor)
      accessFunc (WitHeurImploder *,  myHeurImploder)
      accessFunc (WitEqAllocator *,   myEqAllocator)
      accessFunc (WitHeurAllocator *, myHeurAllocator)
      accessFunc (WitOptImploder *,   myOptImploder)
      accessFunc (WitOrigMrpExp *,    myOrigMrpExp)
      accessFunc (WitFSS *,           myFSS)
      accessFunc (WitDataReader *,    myDataReader)
      accessFunc (WitDataWriter *,    myDataWriter)
      accessFunc (WitSolnWriter *,    mySolnWriter)
      accessFunc (WitMsgFacility &,   myMsgFac)
      accessFunc (WitRun *,           myWitRun)
      accessFunc (WitApiMgr *,        myApiMgr)
      accessFunc (FILE *,             solnFile)
      accessFunc (WitProblem *,       copyingIntoProblem)
      accessFunc (WitObjLinkMgr *,    myObjLinkMgr)
      accessFunc (WitVariant *,       myOptVariant)
      accessFunc (WitVariant *,       myHeurVariant)
      accessFunc (WitVariant *,       myHeurOptVariant)
      accessFunc (WitVariant *,       myInputVariant)
      accessFunc (WitVariant *,       currentVariant)
      accessFunc (WitDataAlt *,       noopAlt)
      accessFunc (WitDataAlt *,       postprocAlt)
      accessFunc (WitDataAlt *,       preprocAlt)
a113 10
      // getMyInstance functions.
      //
      // Each of these functions sets its argument to the instance of the 
      // argument's class owned by this Problem.
      //------------------------------------------------------------------------

      void getMyInstance (WitPairLinkMgr <WitPeriod> * &);
      void getMyInstance (WitPairLinkMgr <double>    * &);

      //------------------------------------------------------------------------
d333 1
a333 1
      WitPairLinkMgr <double>    * myDoublePairLinkMgr_;
@


1.14
log
@Converted several generic classes into class templates.
@
text
@d85 1
a85 1
      accessFunc (const WitPtrTVec (WitFixedPer) &, myFixedPer)
d402 1
a402 1
      WitPtrTVec (WitFixedPer) & myFixedPer_;
@


1.13
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@d118 2
a119 2
      void getMyInstance (WitPairLinkMgr (WitPeriod) * &);
      void getMyInstance (WitPairLinkMgr (double)    * &);
d340 2
a341 2
      WitPairLinkMgr (WitPeriod) * myPerPairLinkMgr_;
      WitPairLinkMgr (double)    * myDoublePairLinkMgr_;
@


1.12
log
@Further implementation of coarse selection splitting.
@
text
@d129 1
a129 1
      void setupVariants ();
@


1.11
log
@Initial implementation of coarse selection splitting for build-ahead.
@
text
@d85 2
a246 4
      const WitPeriod * samePerPtr (WitPeriod thePer);
         //
         // * (return value) == thePer.

d402 1
a402 1
      WitPtrTVec (WitPeriod) & samePer_;
d404 1
a404 1
         // samePer_ (thePer) == thePer.
@


1.10
log
@Minor correction.
@
text
@d245 4
d403 4
@


1.9
log
@Further development of selection splitting for multi-route on substitutes.
@
text
@d57 27
a83 28
      accessFunc (WitSession *,          mySession)
      accessFunc (WitCompMgr *,          myCompMgr)
      accessFunc (WitPreprocessor *,     myPreprocessor)
      accessFunc (WitPostprocessor *,    myPostprocessor)
      accessFunc (WitHeurImploder *,     myHeurImploder)
      accessFunc (WitEqAllocator *,      myEqAllocator)
      accessFunc (WitHeurAllocator *,    myHeurAllocator)
      accessFunc (WitOptImploder *,      myOptImploder)
      accessFunc (WitOrigMrpExp *,       myOrigMrpExp)
      accessFunc (WitFSS *,              myFSS)
      accessFunc (WitDataReader *,       myDataReader)
      accessFunc (WitDataWriter *,       myDataWriter)
      accessFunc (WitSolnWriter *,       mySolnWriter)
      accessFunc (WitMsgFacility &,      myMsgFac)
      accessFunc (WitRun *,              myWitRun)
      accessFunc (WitApiMgr *,           myApiMgr)
      accessFunc (FILE *,                solnFile)
      accessFunc (WitProblem *,          copyingIntoProblem)
      accessFunc (WitObjLinkMgr *,       myObjLinkMgr)
      accessFunc (WitObjPerDblLinkMgr *, myObjPerDblLinkMgr)
      accessFunc (WitVariant *,          myOptVariant)
      accessFunc (WitVariant *,          myHeurVariant)
      accessFunc (WitVariant *,          myHeurOptVariant)
      accessFunc (WitVariant *,          myInputVariant)
      accessFunc (WitVariant *,          currentVariant)
      accessFunc (WitDataAlt *,          noopAlt)
      accessFunc (WitDataAlt *,          postprocAlt)
      accessFunc (WitDataAlt *,          preprocAlt)
a339 1
      WitObjPerDblLinkMgr        * myObjPerDblLinkMgr_;
@


1.8
log
@Some minor changes.
@
text
@d57 28
a84 27
      accessFunc (WitSession *,         mySession)
      accessFunc (WitCompMgr *,         myCompMgr)
      accessFunc (WitPreprocessor *,    myPreprocessor)
      accessFunc (WitPostprocessor *,   myPostprocessor)
      accessFunc (WitHeurImploder *,    myHeurImploder)
      accessFunc (WitEqAllocator *,     myEqAllocator)
      accessFunc (WitHeurAllocator *,   myHeurAllocator)
      accessFunc (WitOptImploder *,     myOptImploder)
      accessFunc (WitOrigMrpExp *,      myOrigMrpExp)
      accessFunc (WitFSS *,             myFSS)
      accessFunc (WitDataReader *,      myDataReader)
      accessFunc (WitDataWriter *,      myDataWriter)
      accessFunc (WitSolnWriter *,      mySolnWriter)
      accessFunc (WitMsgFacility &,     myMsgFac)
      accessFunc (WitRun *,             myWitRun)
      accessFunc (WitApiMgr *,          myApiMgr)
      accessFunc (FILE *,               solnFile)
      accessFunc (WitProblem *,         copyingIntoProblem)
      accessFunc (WitObjStackLinkMgr *, myObjStackLinkMgr)
      accessFunc (WitVariant *,         myOptVariant)
      accessFunc (WitVariant *,         myHeurVariant)
      accessFunc (WitVariant *,         myHeurOptVariant)
      accessFunc (WitVariant *,         myInputVariant)
      accessFunc (WitVariant *,         currentVariant)
      accessFunc (WitDataAlt *,         noopAlt)
      accessFunc (WitDataAlt *,         postprocAlt)
      accessFunc (WitDataAlt *,         preprocAlt)
d117 2
a118 2
      void getMyInstance (WitPairStackLinkMgr (WitPeriod) * &);
      void getMyInstance (WitPairStackLinkMgr (double)    * &);
d335 1
a335 1
      // StackLinkMgrs.
d338 4
a341 3
      WitObjStackLinkMgr              * myObjStackLinkMgr_;
      WitPairStackLinkMgr (WitPeriod) * myPerPairStackLinkMgr_;
      WitPairStackLinkMgr (double)    * myDoublePairStackLinkMgr_;
@


1.7
log
@Some minor modifications.
@
text
@d19 1
a19 1
#include <Vector.h>
@


1.6
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@d57 27
a83 27
      accessFunc (WitSession *,       mySession)
      accessFunc (WitCompMgr *,       myCompMgr)
      accessFunc (WitPreprocessor *,  myPreprocessor)
      accessFunc (WitPostprocessor *, myPostprocessor)
      accessFunc (WitHeurImploder *,  myHeurImploder)
      accessFunc (WitEqAllocator *,   myEqAllocator)
      accessFunc (WitHeurAllocator *, myHeurAllocator)
      accessFunc (WitOptImploder *,   myOptImploder)
      accessFunc (WitOrigMrpExp *,    myOrigMrpExp)
      accessFunc (WitFSS *,           myFSS)
      accessFunc (WitDataReader *,    myDataReader)
      accessFunc (WitDataWriter *,    myDataWriter)
      accessFunc (WitSolnWriter *,    mySolnWriter)
      accessFunc (WitMsgFacility &,   myMsgFac)
      accessFunc (WitRun *,           myWitRun)
      accessFunc (WitApiMgr *,        myApiMgr)
      accessFunc (FILE *,             solnFile)
      accessFunc (WitProblem *,       copyingIntoProblem)
      accessFunc (WitObjDynLinkMgr *, myObjDynLinkMgr)
      accessFunc (WitVariant *,       myOptVariant)
      accessFunc (WitVariant *,       myHeurVariant)
      accessFunc (WitVariant *,       myHeurOptVariant)
      accessFunc (WitVariant *,       myInputVariant)
      accessFunc (WitVariant *,       currentVariant)
      accessFunc (WitDataAlt *,       noopAlt)
      accessFunc (WitDataAlt *,       postprocAlt)
      accessFunc (WitDataAlt *,       preprocAlt)
d116 2
a117 2
      void getMyInstance (WitPairDynLinkMgr (WitPeriod) * &);
      void getMyInstance (WitPairDynLinkMgr (double)    * &);
d334 1
a334 1
      // DynLinkMgrs.
d337 3
a339 3
      WitObjDynLinkMgr              * myObjDynLinkMgr_;
      WitPairDynLinkMgr (WitPeriod) * myPerPairDynLinkMgr_;
      WitPairDynLinkMgr (double)    * myDoublePairDynLinkMgr_;
@


1.5
log
@Refactoring for selection splitting.
@
text
@d147 4
a251 4

      void displayGlobal ();
         //
         // Displays the global input and preprocessing data of this Problem.
@


1.4
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d109 9
a117 4
      void getMyInstance (WitPairDynLinkMgr (WitPeriod) * & theInstance);
         //
         // Sets theInstance to the Instance of class 
         // WitPairDynLinkMgr (WitPeriod) owned by this Problem.
d247 1
a247 3
      copyCtorAndAssignment (WitProblem);
         //
         // Prevents unintentional copying and assignment.
d339 1
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d57 27
a83 28
      accessFunc (WitSession *,                  mySession)
      accessFunc (WitCompMgr *,                  myCompMgr)
      accessFunc (WitPreprocessor *,             myPreprocessor)
      accessFunc (WitPostprocessor *,            myPostprocessor)
      accessFunc (WitHeurImploder *,             myHeurImploder)
      accessFunc (WitEqAllocator *,              myEqAllocator)
      accessFunc (WitHeurAllocator *,            myHeurAllocator)
      accessFunc (WitOptImploder *,              myOptImploder)
      accessFunc (WitOrigMrpExp *,               myOrigMrpExp)
      accessFunc (WitFSS *,                      myFSS)
      accessFunc (WitDataReader *,               myDataReader)
      accessFunc (WitDataWriter *,               myDataWriter)
      accessFunc (WitSolnWriter *,               mySolnWriter)
      accessFunc (WitMsgFacility &,              myMsgFac)
      accessFunc (WitRun *,                      myWitRun)
      accessFunc (WitApiMgr *,                   myApiMgr)
      accessFunc (WitDynLinkMgr *,               myDynLinkMgr)
      accessFunc (WitDynPerLinkMgr *,            myDynPerLinkMgr)
      accessFunc (FILE *,                        solnFile)
      accessFunc (WitProblem *,                  copyingIntoProblem)
      accessFunc (WitVariant *,                  myOptVariant)
      accessFunc (WitVariant *,                  myHeurVariant)
      accessFunc (WitVariant *,                  myHeurOptVariant)
      accessFunc (WitVariant *,                  myInputVariant)
      accessFunc (WitVariant *,                  currentVariant)
      accessFunc (WitDataAlt *,                  noopAlt)
      accessFunc (WitDataAlt *,                  postprocAlt)
      accessFunc (WitDataAlt *,                  preprocAlt)
d109 5
a304 8
      WitDynLinkMgr * myDynLinkMgr_;
         //
         // The DynLinkMgr that owns all the DynLinks for this Problem.

      WitDynPerLinkMgr * myDynPerLinkMgr_;
         //
         // The DynPerLinkMgr that owns all the DynPerLinks for this Problem.

d329 7
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d31 1
a31 1
class WitProblem
d101 5
a170 7
      inline WitPeriod lPeriod ()
            //
            // Returns the last period.
         {
         return nPeriods () - 1;
         }

d324 4
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
