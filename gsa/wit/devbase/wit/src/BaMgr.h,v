head	1.72;
access;
symbols
	sce_5_01_20080919:1.58
	latest_sce_4_20_20060523:1.58.0.2
	sce_4_20_20060523:1.58
	latest_sce4_20_OSL:1.57.0.2
	sce_4_20_OSL:1.57
	sce_410_withVa:1.57
	sce_4_05_20040511:1.48
	sce_4_00_20040201:1.48
	nextGenBranch:1.48.0.2
	nextGenRoot:1.48
	sce_3_30_20030627:1.48
	EndRw-branch:1.41.0.4
	Root-of-EndRw:1.41
	rwToStl:1.41.0.2
	latest_sce_3_10_20010924:1.39.0.2
	sce_3_10_20010924:1.39
	latest_sce_3_00_20010601:1.28.0.2
	sce_3_00_20010601:1.28
	latest_sce_2_31_20010308:1.12.0.2
	sce_2_31_20010308:1.12
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.72
date	2011.09.28.23.49.03;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2011.09.24.00.27.21;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2011.08.30.20.17.16;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2010.07.30.20.20.13;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2010.07.29.21.03.11;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2010.07.26.17.48.43;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2010.07.22.21.55.32;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2010.07.16.22.26.40;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2010.07.15.23.49.24;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2010.07.02.18.53.09;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2010.07.01.22.41.20;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2010.06.25.15.42.51;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2010.06.24.23.37.32;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2010.06.18.23.11.14;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2006.05.02.17.33.54;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2005.01.13.17.24.20;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2004.12.31.19.52.24;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2004.12.28.19.21.18;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2004.12.21.22.13.48;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2004.12.17.21.53.00;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2004.12.14.22.37.09;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2004.12.13.23.35.47;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2004.12.10.21.58.31;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2004.12.10.16.49.43;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2003.04.14.22.00.33;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2003.04.11.19.08.24;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2003.04.01.20.34.24;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2003.02.07.23.29.06;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2003.01.31.21.28.52;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2003.01.29.19.16.44;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2003.01.02.22.18.19;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2002.05.24.23.00.02;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2002.03.22.21.23.19;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2001.09.04.15.44.37;	author bobw;	state Exp;
branches;
next	1.38;

1.38
date	2001.08.30.20.29.22;	author bobw;	state Exp;
branches;
next	1.37;

1.37
date	2001.08.24.22.03.18;	author bobw;	state Exp;
branches;
next	1.36;

1.36
date	2001.08.23.21.13.52;	author bobw;	state Exp;
branches;
next	1.35;

1.35
date	2001.07.06.23.36.00;	author bobw;	state Exp;
branches;
next	1.34;

1.34
date	2001.07.03.17.00.56;	author bobw;	state Exp;
branches;
next	1.33;

1.33
date	2001.06.21.18.24.30;	author bobw;	state Exp;
branches;
next	1.32;

1.32
date	2001.06.20.20.07.02;	author bobw;	state Exp;
branches;
next	1.31;

1.31
date	2001.06.15.20.53.34;	author bobw;	state Exp;
branches;
next	1.30;

1.30
date	2001.06.11.19.29.09;	author bobw;	state Exp;
branches;
next	1.29;

1.29
date	2001.06.01.19.23.31;	author bobw;	state Exp;
branches;
next	1.28;

1.28
date	2001.05.30.21.16.48;	author bobw;	state Exp;
branches;
next	1.27;

1.27
date	2001.05.29.22.11.24;	author bobw;	state Exp;
branches;
next	1.26;

1.26
date	2001.05.25.22.59.11;	author bobw;	state Exp;
branches;
next	1.25;

1.25
date	2001.05.25.14.53.22;	author bobw;	state Exp;
branches;
next	1.24;

1.24
date	2001.05.17.15.11.12;	author bobw;	state Exp;
branches;
next	1.23;

1.23
date	2001.05.10.22.31.11;	author bobw;	state Exp;
branches;
next	1.22;

1.22
date	2001.04.30.21.29.40;	author bobw;	state Exp;
branches;
next	1.21;

1.21
date	2001.04.06.19.22.07;	author bobw;	state Exp;
branches;
next	1.20;

1.20
date	2001.04.03.19.23.03;	author bobw;	state Exp;
branches;
next	1.19;

1.19
date	2001.03.30.18.54.47;	author bobw;	state Exp;
branches;
next	1.18;

1.18
date	2001.03.29.00.10.15;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2001.03.27.20.07.25;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.03.21.21.55.45;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.03.20.21.03.57;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.03.12.19.48.06;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.03.08.16.37.03;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.02.01.16.24.42;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.01.31.23.17.44;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.01.27.00.24.37;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.26.21.46.00;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.24.20.05.56;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.20.00.44.15;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.15.19.01.48;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.11.16.35.07;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.20.20.08.34;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.22.23.11.36;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.20;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.18;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.18;	author wit;	state Exp;
branches;
next	;


desc
@@


1.72
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef BaMgrH
#define BaMgrH

//------------------------------------------------------------------------------
// Header file: "BaMgr.h"
//
// Contains the declaration of class BaMgr.
//------------------------------------------------------------------------------

#include <SelMgr.h>
#include <PtrMap.h>
#include <PairStack.h>
#include <Mapping.h>

//------------------------------------------------------------------------------
// Class BaMgr
//
// Manager of the build-ahead subsystem.
// The build-ahead subsystem is responsible for maintaining the selections for 
// build-ahead.
//
// Class Hierarchy:
//
// ProbAssoc
//    SelMgr
//       BaMgr
//
// Implemented in BuildAhd.C.
//------------------------------------------------------------------------------

class WitBaMgr: public WitSelMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBaMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitBaMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static bool instNeededFor (WitProblem * theProblem);
         //
         // Returns TRUE, iff a BaMgr is needed for theProblem.

      WitPeriod selExpPer (WitPart * thePart, WitPeriod fillPer);
         //
         // selExpPer (thePart, fillPer) is the currently selected explosion 
         // period to be used when filling requirements for thePart in fillPer.
         // If no explosion period is selected, then returns the Part's default
         // explosion period for fillPer.

      void print ();
         //
         // Prints the BaMats owned by this BaMgr.

      void saveExpPer (WitPeriod expPer);
         //
         // Saves the value of expPer to be retrieved later.

      void retrieveExpPer (WitPeriod & expPer);
         //
         // Sets expPer to the value saved by saveExpPer.

      void storeRecoveryPt (WitBaMat * theBaMat);
         //
         // Stores theBaMat as a point at which the build-ahead
         // configuration is to be restored to its initial state.

      void recoverInitState ();
         //
         // Restores the build-ahead selection configuration to its original
         // state.

      //------------------------------------------------------------------------
      // Selection Splitting functions.
      //------------------------------------------------------------------------

      virtual bool selSplitNeeded ();
         //
         // Override from class SelMgr.

      bool selIsSplit (WitPart * thePart, WitPeriod fillPer);
         //
         // Returns true, iff there is a split build-period selection for 
         // filling requirements for thePart in fillPer. 
         // Valid only in sel-split mode.

      void defineSplit (
            WitPart *        thePart,
            WitPeriod        fillPer,
            double           reqVol,
            WitPerDblStack & theSplitPairs,
            double &         unbddVol);
         //
         // Sets theSplitPairs to be the split pairs for a split explosion of
         // reqVol units at thePart in fillPer. Sets unbddVol to the splitVol of
         // the unbounded split explosion, if any; otherwise 0.

      void recExpMatSS (WitPart * thePart, WitPeriod fillPer, double expVol);
         //
         // Records the fact expVol units were exploded thru thePart to fill
         // reqs in fillPer.

      virtual void postSplitCommit ();
         //
         // Override from class SelMgr.

      void deferRejection (WitBaMat * theBaMat, WitPeriod expPer);
         //
         // Records to reject expPer as an explosion period for theBaMat at the
         // end of split-commit.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual WitAltPt *   myAltPtFor         (WitBopEntry *,
                                               WitConsEntry *,
                                               WitPeriod,
                                               WitPeriod);
      virtual WitAltPt *   myAltPtFor         (WitPart *, WitPeriod);
      virtual bool         validForNetting    ();
      virtual bool         validForExecBounds ();
      virtual bool         validForLTBounds   ();
      virtual const char * selCaseName        ();
         //
         // Overrides from class SelMgr.

      WitPeriod selExpPer (
            WitPart *    thePart, 
            WitPeriod    fillPer,
            WitBaMat * & theBaMat);
         //
         // Returns the explosion period currently selected for filling
         // requirements in fillPer, if any, else -1. In the >= 0 case, sets
         // theBaMat to the corresponding BaMat.

      WitBaPt * myBaPt (WitPart * thePart, WitPeriod fillPer);
         //
         // Returns the BaPt for thePart in fillPer, if any, else NULL.

      noCopyCtorAssign (WitBaMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBaDir * myBaDirForNstn_;
      WitBaDir * myBaDirForAsap_;
         //
         // The BaDirs owned by this BaMgr for NSTN and ASAP Build-Ahead.

      WitPtrMap <WitMaterial, WitBaMat> myBaMatFor_;
         //
         // myBaMatFor_ (theMat) is the BaMat owned by this BaMgr 
         // corresponding to theMat, if any, else NULL.

      WitPairStack <WitBaMat, WitPeriod> pairsToReject_;
         //
         // Valid only in selection splitting mode.
         // For each pair, (theBaMat, expPer) in pairsToReject_, expPer is to be
         // rejected as an explosion period at the end of the current
         // split-commit.

      WitPeriod savedExpPer_;
         //
         // The expPer saved and retrieved by saveExpPer () and
         // retrieveExpPer ().

      WitObjStack <WitBaMat> alteredBaMats_;
         //
         // Valid only in selection recovery mode.
         // The set of BaMats at which the build-ahead configuration was altered
         // in the current incHeurAlloc.

      WitMapping <WitMaterial, bool> baAlteredAt_;
         //
         // Valid only in selection recovery mode.
         // baAlteredAt_ (theMat) is true, iff the build-ahead configuration was
         // altered at theMat in the current incHeurAlloc.
   };

#endif
@


1.71
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.70
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d28 1
a28 1
// The build-ahead subsystem is responsible for maintaining the selections for
d41 2
a42 76
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitBaMgr (WitSelector *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitBaMgr ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

static bool instNeededFor (WitProblem * theProblem);
//
// Returns TRUE, iff a BaMgr is needed for theProblem.

WitPeriod selExpPer (WitPart * thePart, WitPeriod fillPer);
//
// selExpPer (thePart, fillPer) is the currently selected explosion
// period to be used when filling requirements for thePart in fillPer.
// If no explosion period is selected, then returns the Part's default
// explosion period for fillPer.

void print ();
//
// Prints the BaMats owned by this BaMgr.

void saveExpPer (WitPeriod expPer);
//
// Saves the value of expPer to be retrieved later.

void retrieveExpPer (WitPeriod & expPer);
//
// Sets expPer to the value saved by saveExpPer.

void storeRecoveryPt (WitBaMat * theBaMat);
//
// Stores theBaMat as a point at which the build-ahead
// configuration is to be restored to its initial state.

void recoverInitState ();
//
// Restores the build-ahead selection configuration to its original
// state.

//------------------------------------------------------------------------
// Selection Splitting functions.
//------------------------------------------------------------------------

virtual bool selSplitNeeded ();
//
// Override from class SelMgr.

bool selIsSplit (WitPart * thePart, WitPeriod fillPer);
//
// Returns true, iff there is a split build-period selection for
// filling requirements for thePart in fillPer.
// Valid only in sel-split mode.

void defineSplit (
WitPart *        thePart,
WitPeriod        fillPer,
double           reqVol,
WitPerDblStack & theSplitPairs,
double &         unbddVol);
//
// Sets theSplitPairs to be the split pairs for a split explosion of
// reqVol units at thePart in fillPer. Sets unbddVol to the splitVol of
// the unbounded split explosion, if any; otherwise 0.
d44 159
a202 85
void recExpMatSS (WitPart * thePart, WitPeriod fillPer, double expVol);
//
// Records the fact expVol units were exploded thru thePart to fill
// reqs in fillPer.

virtual void postSplitCommit ();
//
// Override from class SelMgr.

void deferRejection (WitBaMat * theBaMat, WitPeriod expPer);
//
// Records to reject expPer as an explosion period for theBaMat at the
// end of split-commit.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

virtual WitAltPt *   myAltPtFor         (WitBopEntry *,
WitConsEntry *,
WitPeriod,
WitPeriod);
virtual WitAltPt *   myAltPtFor         (WitPart *, WitPeriod);
virtual bool         validForNetting    ();
virtual bool         validForExecBounds ();
virtual bool         validForLTBounds   ();
virtual const char * selCaseName        ();
//
// Overrides from class SelMgr.

WitPeriod selExpPer (
WitPart *    thePart,
WitPeriod    fillPer,
WitBaMat * & theBaMat);
//
// Returns the explosion period currently selected for filling
// requirements in fillPer, if any, else -1. In the >= 0 case, sets
// theBaMat to the corresponding BaMat.

WitBaPt * myBaPt (WitPart * thePart, WitPeriod fillPer);
//
// Returns the BaPt for thePart in fillPer, if any, else NULL.

noCopyCtorAssign (WitBaMgr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitBaDir * myBaDirForNstn_;
WitBaDir * myBaDirForAsap_;
//
// The BaDirs owned by this BaMgr for NSTN and ASAP Build-Ahead.

WitPtrMap <WitMaterial, WitBaMat> myBaMatFor_;
//
// myBaMatFor_ (theMat) is the BaMat owned by this BaMgr
// corresponding to theMat, if any, else NULL.

WitPairStack <WitBaMat, WitPeriod> pairsToReject_;
//
// Valid only in selection splitting mode.
// For each pair, (theBaMat, expPer) in pairsToReject_, expPer is to be
// rejected as an explosion period at the end of the current
// split-commit.

WitPeriod savedExpPer_;
//
// The expPer saved and retrieved by saveExpPer () and
// retrieveExpPer ().

WitObjStack <WitBaMat> alteredBaMats_;
//
// Valid only in selection recovery mode.
// The set of BaMats at which the build-ahead configuration was altered
// in the current incHeurAlloc.

WitMapping <WitMaterial, bool> baAlteredAt_;
//
// Valid only in selection recovery mode.
// baAlteredAt_ (theMat) is true, iff the build-ahead configuration was
// altered at theMat in the current incHeurAlloc.
};
@


1.69
log
@Selection Recovery
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d28 1
a28 1
// The build-ahead subsystem is responsible for maintaining the selections for 
d41 76
a116 2
   {
   public:
d118 85
a202 159
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBaMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitBaMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static bool instNeededFor (WitProblem * theProblem);
         //
         // Returns TRUE, iff a BaMgr is needed for theProblem.

      WitPeriod selExpPer (WitPart * thePart, WitPeriod fillPer);
         //
         // selExpPer (thePart, fillPer) is the currently selected explosion 
         // period to be used when filling requirements for thePart in fillPer.
         // If no explosion period is selected, then returns the Part's default
         // explosion period for fillPer.

      void print ();
         //
         // Prints the BaMats owned by this BaMgr.

      void saveExpPer (WitPeriod expPer);
         //
         // Saves the value of expPer to be retrieved later.

      void retrieveExpPer (WitPeriod & expPer);
         //
         // Sets expPer to the value saved by saveExpPer.

      void storeRecoveryPt (WitBaMat * theBaMat);
         //
         // Stores theBaMat as a point at which the build-ahead
         // configuration is to be restored to its initial state.

      void recoverInitState ();
         //
         // Restores the build-ahead selection configuration to its original
         // state.

      //------------------------------------------------------------------------
      // Selection Splitting functions.
      //------------------------------------------------------------------------

      virtual bool selSplitNeeded ();
         //
         // Override from class SelMgr.

      bool selIsSplit (WitPart * thePart, WitPeriod fillPer);
         //
         // Returns true, iff there is a split build-period selection for 
         // filling requirements for thePart in fillPer. 
         // Valid only in sel-split mode.

      void defineSplit (
            WitPart *        thePart,
            WitPeriod        fillPer,
            double           reqVol,
            WitPerDblStack & theSplitPairs,
            double &         unbddVol);
         //
         // Sets theSplitPairs to be the split pairs for a split explosion of
         // reqVol units at thePart in fillPer. Sets unbddVol to the splitVol of
         // the unbounded split explosion, if any; otherwise 0.

      void recExpMatSS (WitPart * thePart, WitPeriod fillPer, double expVol);
         //
         // Records the fact expVol units were exploded thru thePart to fill
         // reqs in fillPer.

      virtual void postSplitCommit ();
         //
         // Override from class SelMgr.

      void deferRejection (WitBaMat * theBaMat, WitPeriod expPer);
         //
         // Records to reject expPer as an explosion period for theBaMat at the
         // end of split-commit.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual WitAltPt *   myAltPtFor         (WitBopEntry *,
                                               WitConsEntry *,
                                               WitPeriod,
                                               WitPeriod);
      virtual WitAltPt *   myAltPtFor         (WitPart *, WitPeriod);
      virtual bool         validForNetting    ();
      virtual bool         validForExecBounds ();
      virtual bool         validForLTBounds   ();
      virtual const char * selCaseName        ();
         //
         // Overrides from class SelMgr.

      WitPeriod selExpPer (
            WitPart *    thePart, 
            WitPeriod    fillPer,
            WitBaMat * & theBaMat);
         //
         // Returns the explosion period currently selected for filling
         // requirements in fillPer, if any, else -1. In the >= 0 case, sets
         // theBaMat to the corresponding BaMat.

      WitBaPt * myBaPt (WitPart * thePart, WitPeriod fillPer);
         //
         // Returns the BaPt for thePart in fillPer, if any, else NULL.

      noCopyCtorAssign (WitBaMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBaDir * myBaDirForNstn_;
      WitBaDir * myBaDirForAsap_;
         //
         // The BaDirs owned by this BaMgr for NSTN and ASAP Build-Ahead.

      WitPtrMap <WitMaterial, WitBaMat> myBaMatFor_;
         //
         // myBaMatFor_ (theMat) is the BaMat owned by this BaMgr 
         // corresponding to theMat, if any, else NULL.

      WitPairStack <WitBaMat, WitPeriod> pairsToReject_;
         //
         // Valid only in selection splitting mode.
         // For each pair, (theBaMat, expPer) in pairsToReject_, expPer is to be
         // rejected as an explosion period at the end of the current
         // split-commit.

      WitPeriod savedExpPer_;
         //
         // The expPer saved and retrieved by saveExpPer () and
         // retrieveExpPer ().

      WitObjStack <WitBaMat> alteredBaMats_;
         //
         // Valid only in selection recovery mode.
         // The set of BaMats at which the build-ahead configuration was altered
         // in the current incHeurAlloc.

      WitMapping <WitMaterial, bool> baAlteredAt_;
         //
         // Valid only in selection recovery mode.
         // baAlteredAt_ (theMat) is true, iff the build-ahead configuration was
         // altered at theMat in the current incHeurAlloc.
   };
@


1.68
log
@Selection Recovery
@
text
@d83 1
a83 1
      void recAltForRecovery (WitBaMat * theBaMat);
d85 2
a86 3
         // Records the fact that the build-ahead configuration is being altered
         // at theBaMat.
         // Valid only in selection recovery mode:
d88 1
a88 1
      void recoverSelections ();
d91 1
a91 2
         // state, recovering all discarded selection candidates.
         // Valid only in selection recovery mode.
@


1.67
log
@Selection Recovery.
@
text
@d83 1
a83 1
      void recordAlteration (WitBaMat * theBaMat);
@


1.66
log
@Selection Recovery.
@
text
@d89 6
a148 1
      virtual void         recoverSelections  ();
@


1.65
log
@Selection Recovery
@
text
@d67 3
a69 2
         // period to be used when filling requirements for thePart in
         // fillPer, or fillPer, if there is none.
@


1.64
log
@Re-implemented selection recovery for build-ahead.
@
text
@d142 1
a142 1
      virtual void         specSelRecovery    ();
@


1.63
log
@Selection recovery.
@
text
@d22 1
d82 6
a126 5
      void recRejection (WitBaMat * theBaMat, WitPeriod expPer);
         //
         // Records the rejection of (theBaMat, expPer) for explosion.
         // Valid only in selection recovery mode:

d187 7
a193 1
      WitPairStack <WitBaMat, WitPeriod> rejectedPairs_;
d196 2
a197 2
         // The set of pairs (theBaMat, expPer) that have been rejected for
         // explosion.
@


1.62
log
@Name change: "selection reuse" has becomne "selection recovery".
@
text
@d140 1
a140 1
      virtual void         restoreSpecConfig  ();
@


1.61
log
@Selection reuse.
@
text
@d123 1
a123 1
         // Valid only in selection reuse mode:
d187 1
a187 1
         // Valid only in selection reuse mode.
@


1.60
log
@Selection reuse.
@
text
@d120 5
d184 6
@


1.59
log
@Lead Time Bounds
@
text
@d135 1
@


1.58
log
@Updated the copyright date on all source files.
@
text
@d130 1
d133 1
@


1.57
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.56
log
@Low-Pri Prop-Rt.
@
text
@d73 8
d171 5
@


1.55
log
@Low-Pri Prop-Rt.
@
text
@d92 1
a92 1
            bool &           lastUnbdd);
d95 2
a96 2
         // reqVol units at thePart in fillPer. Sets lastUnbdd to be true, iff
         // the last pair is for an unbounded split explosion.
@


1.54
log
@Low-Pri Prop-Rt.
@
text
@d118 1
a118 1
      virtual WitSelAlt *  mySelAltFor        (WitBopEntry *,
@


1.53
log
@Low-Pri Prop-Rt.
@
text
@d118 1
a118 1
      virtual WitSelPt *   mySelPtForAlt      (WitBopEntry *,
@


1.52
log
@Low-Pri Prop-Rt.
@
text
@a124 1
      virtual WitSelCand * newSelCand         ();
@


1.51
log
@Low-Pri Prop-Rt.
@
text
@a20 1
#include <PtrTVec.h>
a111 6
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitPtrTVec <WitBaCand> &, myBaCandFor)

d125 1
a147 5
      WitPtrTVec <WitBaCand> myBaCandFor_;
         //
         // myBaCandFor_[expPer] is the BaCand owned by this BaMgr that
         // represents expPer.

@


1.50
log
@Low-Pri Prop-Rt.
@
text
@d22 1
@


1.49
log
@Low-Pri Prop-Rt.
@
text
@d116 1
a116 1
      accessFunc (const WitPtrTVec <WitBaCand> &, myBaCand)
d153 1
a153 1
      WitPtrTVec <WitBaCand> myBaCand_;
d155 2
a156 2
         // myBaCand_[expPer] is the BaCand owned by this BaMgr that represents
         // expPer.
@


1.48
log
@Continued implementation of proportionate routing.
@
text
@a68 16
      //------------------------------------------------------------------------
      // Overrides from class SelMgr.
      //------------------------------------------------------------------------

      virtual WitSelPt *   mySelPtForAlt      (WitBopEntry *,
                                               WitConsEntry *,
                                               WitPeriod,
                                               WitPeriod);
      virtual bool         validForNetting    ();
      virtual bool         validForExecBounds ();
      virtual const char * selCaseName        ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

d124 9
a132 1
      noCopyCtorAssign (WitBaMgr);
d147 2
@


1.47
log
@Continued implementation of proportionate routing.
@
text
@d103 6
a108 1
      void startSplitExp (WitPart * thePart, WitPeriod fillPer, double reqVol);
d110 3
a112 5
         // See SelMgr.

      bool findNextSplit (WitPeriod & expPer, double & splitExpVol);
         //
         // See SelMgr.
@


1.46
log
@Continued implementation of proportionate routing.
@
text
@a96 4
      void startSplitExp (WitPart * thePart, WitPeriod fillPer, double reqVol);
         //
         // See SelMgr.

d102 4
@


1.45
log
@Continued implementation of proportionate routing.
@
text
@d97 4
a105 4

      void startSplitExp (WitPart * thePart, WitPeriod fillPer, double reqVol);
         //
         // See SelMgr.
@


1.44
log
@Continued implementation of proportionate routing.
@
text
@d73 1
a73 1
      virtual WitSelPt *   mySelPt            (WitBopEntry *,
@


1.43
log
@Continued implementation of Proportionate Routing.
@
text
@d26 1
a26 1
// Interface to the build-ahead subsystem.
@


1.42
log
@Internal changes.
@
text
@d59 4
@


1.41
log
@Continued implementation of single-source.
@
text
@d73 2
a74 2
      virtual WitBoolean   validForNetting    ();
      virtual WitBoolean   validForExecBounds ();
d89 1
a89 1
      virtual WitBoolean selSplitNeeded ();
d93 1
a93 1
      WitBoolean selIsSplit (WitPart * thePart, WitPeriod fillPer);
d95 1
a95 1
         // Returns TRUE, iff there is a split build-period selection for 
d103 1
a103 1
      WitBoolean findNextSplit (WitPeriod & expPer, double & splitExpVol);
@


1.40
log
@Continued implementation of sel-split for pen-exec.
@
text
@d72 1
a72 2
                                               WitPeriod,
                                               WitBoolean &);
@


1.39
log
@Continuing implementation of selective stock reallocation.
@
text
@d74 1
@


1.38
log
@Refactoring for constrained stock reallocation.
@
text
@d27 2
a28 2
// The BaMat subsystem is responsible for maintaining the selections for 
// global build-ahead my material.
d32 3
a34 2
// SelMgr
//    BaMgr
@


1.37
log
@Refactoring for constrained stock reallocation.
@
text
@d143 1
a143 1
      WitBaSelPt * myBaSelPt (WitPart * thePart, WitPeriod fillPer);
d145 1
a145 1
         // Returns the BaSelPt for thePart in fillPer, if any, else NULL.
@


1.36
log
@Refactoring for constrained stock reallocation.
@
text
@a110 4
      virtual void postCommitSS ();
         //
         // Override from class SelMgr.

a132 4

      virtual void setUpDerivedSS ();
         //
         // Override from class SelMgr.
@


1.35
log
@Replaced Mapping (*, WitTlObjPtr) with PtrMap <*, *>.
@
text
@a21 1
#include <FixedPer.h>
d65 1
a65 1
      // Overrides from class SelPt.
a74 1
      virtual void         prtSelCandID       (WitTlObj *);
@


1.34
log
@Refactoring build-ahead.
@
text
@d20 1
a20 1
#include <Mapping.h>
a156 8
      inline WitBaMat * & myBaMat (WitMaterial * theMat)
            //
            // myBaMat (theMat) is the BaMat owned by this BaMgr 
            // corresponding to theMat, if any, else NULL.
         {
         return (WitBaMat * &) myBaMatTl_ (theMat);
         }

d171 1
a171 1
      WitMapping (WitMaterial, WitTlObjPtr) myBaMatTl_;
d173 2
a174 1
         // Data for myBaMat (Mat *).
@


1.33
log
@More templates.
@
text
@d126 6
@


1.32
log
@Converted several generic classes into class templates.
@
text
@d163 1
a163 1
      WitPtrTVec (WitBaCand) myBaCand_;
@


1.31
log
@Removed indexes from production multi-route.
Other refactoring.
@
text
@d177 1
a177 1
      WitPairStack (WitBaMat, WitPeriod) pairsToReject_;
@


1.30
log
@Refactoring.
@
text
@d163 5
@


1.29
log
@Continued development of selection splitting for multi=exec.
@
text
@d59 1
a59 1
      WitPeriod selExpPeriod (WitPart * thePart, WitPeriod fillPer);
d61 1
a61 1
         // selExpPeriod (thePart, fillPer) is the currently selected explosion 
@


1.28
log
@Refactoring for sel-split for multi-exec.
@
text
@d65 3
a67 8
      virtual WitSelPt * mySelPt (
            WitBopEntry *,
            WitConsEntry *,
            WitPeriod,
            WitPeriod,
            WitBoolean &);
         //
         // Override from class SelMgr.
d69 12
a80 3
      virtual WitBoolean validForExecBounds ();
         //
         // Override from class SelMgr.
@


1.27
log
@Added meSelSplitOK development parameter.
Added meSelSplit attribute.
Refactoring for sel-split for multi-exec.
@
text
@a154 10
      inline static WitPeriod asaPer (WitTlObj * theTlObj)
         {
         return ((WitFixedPer *) theTlObj)->myPeriod ();
         }

      inline WitTlObj * asaTlObj (WitPeriod thePer)
         {
         return (WitTlObj *) myProblem ()->myFixedPer ()[thePer];
         }

@


1.26
log
@Various refactorings for sel-split for multi-exec.
@
text
@d134 1
a134 5
      virtual void adjustSplitBound (WitTlObj *, double &);
         //
         // Override from class SelMgr.

      WitPeriod intSelExpPer (
@


1.25
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d104 1
a104 5
      void recExpMatSS (
            WitPart * thePart,
            WitPeriod expPer, 
            double    expVol,
            WitPeriod fillPer);
d106 2
a107 2
         // Records the fact expVol units were exploded thru thePart in expPer
         // to fill reqs in fillPer.
a137 4
      virtual void prtSplitExp (WitTlObj *);
         //
         // Override from class SelMgr.

a181 11
      //------------------------------------------------------------------------
      // Data valid only in selection splitting mode.
      //------------------------------------------------------------------------

      WitMaterial * splitExpMat_;
      WitPeriod     splitFillPer_;
         //
         // The Material and fill period for the currently active split
         // explosion.
         // Undefined, if split explosion is not currently active.

d184 1
@


1.24
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@a120 9
      void splitSelection (
            WitMaterial * theMat,
            WitPeriod     fillPer,
            WitPeriod     expPer,
            double        splitBound);
         //
         // Splits the selection at theMat, fillPer, and expPer, using
         // splitBound.

d138 1
a138 1
      virtual void adjustSplitBound (WitTl *, double &);
d142 1
a142 1
      virtual void prtSelSplit (WitTl *);
d155 4
d167 1
a167 1
      inline static WitPeriod asaPer (WitTl * theTlObj)
d172 1
a172 1
      inline WitTl * asaTlObj (WitPeriod thePer)
d174 1
a174 1
         return (WitTl *) myProblem ()->myFixedPer ()[thePer];
d186 1
a186 1
      WitMapping (WitMaterial, WitTlPtr) myBaMatTl_;
a193 8
      WitStackSpSched (WitMaterial) splitSched_;
         //
         // splitSched_ (theMat, fillPer) is the ordered list of
         // (expPerPtr, splitBound) pairs to be used when filling reqs for 
         // theMat in fillPer. 
         // splitSched_ (theMat, fillPer) is only valid if theMat
         // corresponds to a BaMat.

d197 2
a198 2
         // The Material, fill period, net req vol, and split list for
         // the currently active split explosion.
@


1.23
log
@Renamed AltPt classes to SelPt classes.
@
text
@d86 4
d143 1
a143 1
      void setupSelSplit ();
d145 1
a145 1
         // Sets up data for selection splitting.
d199 1
a199 8
      WitStackSpSched (WitMaterial, WitFixedPer) expPairs_;
         //
         // expPairs_ (theMat, expPer) is a list of pairs (fillPer, expVol) such
         // that expVol units were exploded thru theMat in expPer to fill reqs 
         // in fillPer during the current commit. expPairs_ (theMat, expPer) is
         // only valid if theMat corresponds to a BaMat.

      WitStackSpSched (WitMaterial, WitTl) splitSched_;
@


1.22
log
@Fixed uninitialized memory bugs.
Refactoring for selection splitting.
@
text
@d65 1
a65 1
      virtual WitAltPt * myAltPt (
@


1.21
log
@Re-worked the controls for selection splitting.
@
text
@d168 10
@


1.20
log
@Continued implementation of selection splitting.
@
text
@a138 5
      static WitBoolean selSplitNeeded (WitProblem * theProblem);
         //
         // Returns TRUE, iff the input data requests selection splitting for
         // build-ahead.

@


1.19
log
@Continued implementation of selection splitting.
@
text
@d113 1
a113 1
      virtual void clearSplitSched ();
d126 5
d211 6
@


1.18
log
@Re-factoring for selection splitting.
@
text
@d151 1
a151 1
      WitBoolean hasExpPer (
d154 1
a154 2
            WitBaMat * & theBaMat,
            WitPeriod &  expPer);
d156 3
a158 4
         // Returns TRUE, iff there is a period selected for exploding thePart
         // in fillPer.
         // In the TRUE case, sets theBaMat and expPer accordingly.
         // Otherwise, these arguments are undefined.
@


1.17
log
@Re-factoring build-ahead for selection splitting.
@
text
@d117 5
a121 1
      void splitSelection (WitBaAltPt * theBaAltPt, double splitBound);
d123 2
a124 1
         // Splits the selection at theBaAltPt, using splitBound.
a169 10
      inline static WitPeriod itsPer (WitTl * theTlObj)
         {
         return ((WitFixedPer *) theTlObj)->myPeriod ();
         }

      inline WitTl * itsTlPtr (WitPeriod thePer)
         {
         return (WitTl *) myProblem ()->myFixedPer ()[thePer];
         }

a207 6

      WitPeriod searchFillPer_;
         //
         // The fill period for the BaAltPt for the current SS-EBS, if any.
         // This data member should be removed after BaAltPts by fillPer are
         // implemented.
@


1.16
log
@Continued implementation of selection splitting with the new design.
@
text
@d179 5
@


1.15
log
@Continued implementation of selection splitting with the new design.
@
text
@d113 4
@


1.14
log
@Added the attribute ID to the error msg for calling an API function for a
   material part attribute and giving it a capacity part.
Began implementation of the new selection splitting design.
@
text
@d113 4
d204 6
@


1.13
log
@Removed the coarse selection splitting code that's not needed for the new
design of selection splitting.
@
text
@d183 2
a184 4
         // in fillPer during the current commit. During selection alteration, 
         // its values reflect the most recent successful temp commit, if any, 
         // else it is empty. expPairs_ (theMat, expPer) is only valid if theMat
         // corresponds to a BaMat.
@


1.12
log
@Further implementation of coarse selection splitting.
@
text
@d47 1
a47 1
      WitBaMgr (WitHeurAllPerf *);
d109 1
a109 1
      virtual void postCommitSS (WitBoolean);
a112 16
      virtual void preAltAttSS ();
         //
         // Override from class SelMgr.

      virtual void postAltAttSS ();
         //
         // Override from class SelMgr.

      virtual void postPermCommitSS ();
         //
         // Override from class SelMgr.

      void splitSel (WitMaterial * theMat, WitPeriod expPer);
         //
         // Records a split selection at theMat in expPer.

d120 5
@


1.11
log
@Further implementation of coarse selection splitting.
@
text
@d201 1
a201 1
         // splitSched_ (theMat, fillPer) is the list of
d203 1
a203 1
         // theMat in fillPer. The pairs are stored in reverse order.
@


1.10
log
@Further implementation of coarse selection splitting.
@
text
@d141 1
a141 1
      virtual void adjustSplitVol (WitTl *, double &);
d202 1
a202 1
         // (expPerPtr, splitVol) pairs to be used when filling reqs for 
@


1.9
log
@Implemented coarse selection splitting for multiple exec periods.
@
text
@d22 1
d170 1
a170 1
         return * (const WitPeriod *) theTlObj;
d175 1
a175 1
         return (WitTl *) myProblem ()->samePerPtr (thePer);
d190 1
a190 1
      WitStackSpSched (WitMaterial, WitConstPer) expPairs_;
@


1.8
log
@Further development of coarse selection splitting.
@
text
@d85 6
a123 6
      WitBoolean selIsSplit (WitPart * thePart, WitPeriod fillPer);
         //
         // Returns TRUE, iff there is a split build-period selection for 
         // filling requirements for thePart in fillPer. 
         // Valid only in sel-split mode.

d167 1
a167 1
      inline static WitPeriod pointedPer (WitTl * theTlObj)
d172 1
a172 1
      inline WitTl * aTlPtrTo (WitPeriod thePer)
@


1.7
log
@Implemented and used class SelMgr.
@
text
@a20 1
#include <StSpSch.h>
a21 1
#include <PairSt.h>
d87 1
a87 1
         // Sets up for a BA sel-split explosion on thePart, fillPer and reqVol.
d91 1
a91 7
         // If there is another split to be done on the current split explosion,
         // sets thePer and splitExpVol accordingly and returns TRUE;
         // otherwise returns false.
 
      void finishSplitExp ();
         //
         // Concludes a BA sel-split explosion.
d140 5
a144 1
      void prtSelSplit (WitPeriod, WitBoolean, double);
d146 1
a146 1
         // Prints data for a build-ahead selection split.
d167 10
a188 8
      WitStackSpSched (WitMaterial, WitConstPer) splitSched_;
         //
         // splitSched_ (theMat, fillPer) is the list of
         // (expPerPtr, splitVol) pairs to be used when filling reqs for 
         // theMat in fillPer. The pairs are stored in reverse order.
         // splitSched_ (theMat, fillPer) is only valid if theMat
         // corresponds to a BaMat.

d198 1
a198 1
      WitBoolean splitExpActive_;
d200 5
a204 2
         // TRUE iff the build was in DEBUG mode and a split explosion for this
         // BaMgr is currently underway.
d206 2
a207 4
      WitMaterial *  splitExpMat_;
      WitPeriod      splitFillPer_;
      double         splitNetReqVol_;
      WitPerDblStack splitList_;
@


1.6
log
@Fixed some bugs in coarse selection splitting.
@
text
@d19 1
d23 1
d32 5
d40 1
a40 1
class WitBaMgr: public WitProbAssoc
d48 1
a48 3
      WitBaMgr (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.
d54 1
a54 1
      ~WitBaMgr ();
d66 10
a75 4
      WitAltPt * myAltPt (
            WitPart *    thePart,
            WitPeriod    fillPer,
            WitBoolean & resFound);
d77 1
a77 4
         // Returns the AltPt representing the selection of an explosion 
         // period to fill requirements for thePart in period fillPer, or
         // NULL, if there is none. Sets resFound to indicate whether or not
         // a resolving alteration was found.
d87 14
d110 1
a110 1
      void postCommitSS (WitBoolean tempSuccess);
d112 1
a112 3
         // Performs the actions to be taken for build-ahead sel-split, just
         // after a commit. tempSuccess is to be TRUE, iff the commit was
         // successful and in temp mode.
d114 1
a114 1
      void preAltAttSS ();
d116 1
a116 2
         // Performs actions to be taken for build-ahead sel-split just before a
         // selection alteration is attempted.
d118 1
a118 1
      void postAltAttSS ();
d120 1
a120 2
         // Performs actions to be taken for build-ahead sel-split just after a
         // selection alteration has been attempted.
d122 1
a122 1
      void postPermCommitSS ();
d124 1
a124 2
         // Performs the actions to be taken for build-ahead sel-split,
         // just after a perm commit.
a135 12
      void getSplitList (
            WitPart *        thePart,
            WitPeriod        fillPer,
            WitPerDblStack & splitList);
         //
         // Sets splitList to be the ordered list of (Period, splitVol)
         // pairs to be used for filling reqs in thePart in fillPer.

      void prtSelSplit (WitPart *, WitPeriod, WitPeriod, WitBoolean, double);
         //
         // Prints data for a build-ahead selection split.

d148 4
d183 1
a183 1
      WitStackSpSched (WitMaterial, WitConstPer) mySplitSched_;
d185 1
a185 1
         // mySplitSched_ (theMat, fillPer) is the list of
d188 1
a188 1
         // mySplitSched_ (theMat, fillPer) is only valid if theMat
d199 14
@


1.5
log
@Initial implementation of coarse selection splitting for build-ahead.
@
text
@a80 1
            WitPeriod fillPer, 
d82 2
a83 1
            double    expVol);
d109 6
d127 1
a127 8
      void prtBpsSplitAt (WitPart * thePart, WitPeriod fillPer);
         //
         // Prints data for a build-period selection split.

      void prtBpsSplitTo (
            WitPeriod  expPer, 
            WitBoolean splitFound,
            double     splitVol);
d129 1
a129 1
         // Prints data for a build-period selection split.
@


1.4
log
@Further development of coarse selection splitting.
@
text
@d20 2
a70 4
      void print (WitBaAltPt * theBaAltPt);
         // 
         // Prints theBaAltPt, which should be owned within this BaMgr.

d75 57
d140 4
d169 22
a190 1
         // Data for myBaMat (Part *).
@


1.3
log
@Refactoring for selection splitting.
@
text
@d108 1
a108 1
      WitMapping (WitMaterial, WitTypelessPtr) myBaMatTl_;
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d83 1
a83 3
      copyCtorAndAssignment (WitBaMgr);
         //
         // Prevents unintentional copying and assignment.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
