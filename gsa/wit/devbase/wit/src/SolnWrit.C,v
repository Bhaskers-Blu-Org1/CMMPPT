head	1.27;
access;
symbols
	sce_5_01_20080919:1.21
	latest_sce_4_20_20060523:1.18.0.2
	sce_4_20_20060523:1.18
	latest_sce4_20_OSL:1.17.0.2
	sce_4_20_OSL:1.17
	sce_410_withVa:1.15
	sce_4_05_20040511:1.11
	sce_4_00_20040201:1.10
	nextGenBranch:1.9.0.2
	nextGenRoot:1.9
	sce_3_30_20030627:1.9
	EndRw-branch:1.6.0.4
	Root-of-EndRw:1.6
	rwToStl:1.6.0.2
	latest_sce_3_10_20010924:1.2.0.8
	sce_3_10_20010924:1.2
	latest_sce_3_00_20010601:1.2.0.6
	sce_3_00_20010601:1.2
	latest_sce_2_31_20010308:1.2.0.4
	sce_2_31_20010308:1.2
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.27
date	2011.09.28.23.50.13;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.09.24.00.28.40;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.08.30.20.18.12;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2010.09.10.22.10.42;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2010.03.16.22.42.28;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2010.01.28.23.16.58;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.08.01.22.41.58;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.05.10.20.08.50;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2006.09.19.17.50.55;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2006.05.02.17.34.13;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2006.01.18.21.42.59;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2005.09.13.19.38.08;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.08.19.21.38.03;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.08.12.19.35.29;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.02.08.22.33.25;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.05.12.19.43.31;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.10.22.53.21;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.12.15.23.22.33;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.17.19.37.35;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.23.18.12.39;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.02.23.40.51;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.23.18.09.17;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.09.19.52.37;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.24.18.26.08;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.18.14.02.44;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.57;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.30;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.30;	author wit;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "SolnWrit.C"
//
// Contains the implementation of class SolnWriter.
//------------------------------------------------------------------------------

#include <SolnWrit.h>
#include <Pre.h>
#include <GlobalComp.h>
#include <Part.h>
#include <Operation.h>
#include <BomEntry.h>
#include <SubEntry.h>
#include <Demand.h>
#include <ApiMgr.h>
#include <Timing.h>
#include <DetOptImpMgr.h>
#include <CompMgr.h>
#include <TempMsgFile.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------

#define REQ_EPSILON   0.0005  /* Values must exceed this amount in order     */
                              /* to appear in the requirements schedule.     */

#define PROD_EPSILON  0.0005  /* Values must exceed this amount in order     */
                              /* to appear in the production schedule.       */

#define SHIP_EPSILON  0.05    /* Values must exceed this amount in order     */
                              /* to appear in the shipment schedule.         */

#define LONG_MESSAGE_LINES 1000 /* Message length for witWriteProdSched,     */
                                /* witWriteShipSched, & witWriteReqSched.    */

//------------------------------------------------------------------------------

WitSolnWriter::WitSolnWriter (WitProblem * theProblem):
      WitProbAssoc (theProblem)
   {
   }

//------------------------------------------------------------------------------

WitSolnWriter::~WitSolnWriter ()
   {
   }

//------------------------------------------------------------------------------

void WitSolnWriter::writeCriticalList (
      const char *  filename,
      WitFileFormat fileFormat,
      int           maxListLength)
   {
   WitPartPerStack critList (myProblem ());
   const char *    theMsgID;
   WitPart *       thePart;
   WitPeriod       thePer;

   WitTimer::enterSection ("default");

   WitString quotedPartName (100);

   myMsgFac () (
      "witFileParam",
      (filename == NULL)?
         myMsgFac ().fileName ().myCstring ():
         filename);

   myMsgFac () ("fileFormatMsg", fileFormat );

   if      (fileFormat == WitBSV)
      theMsgID = "criticalListMsg";
   else if (fileFormat == WitCSV)
      theMsgID = "criticalListCsvMsg";
   else
      myMsgFac () ("unknownFileFormatSmsg", fileFormat);

   myPreprocessor ()->preprocess ();

   WitTempMsgFile theTemp (myMsgFac (), filename);

   critList.revCopyFrom (myGlobalComp ()->revCritList ());

   while (critList.pop (thePart, thePer))
      {
      myMsgFac () (theMsgID,
         quoteCstring (thePart->partName (), quotedPartName),
         thePer);
      }

   WitTimer::leaveSection ("default");
   }

//------------------------------------------------------------------------------

void WitSolnWriter::writeReqSched (
      const char *  filename,
      WitFileFormat fileFormat)
   {
   WitPart *    thePart;
   WitPeriod    t;
   int          saveMsgLen;
   const char * theMsgID;
   WitString    quotedPartName (100);

   WitTimer::enterSection ("default");

   myMsgFac () ("witFileParam",
      (filename == NULL)?
         myMsgFac ().fileName ().myCstring ():
         filename);

   myMsgFac () ("fileFormatMsg", fileFormat );

   if      (fileFormat == WitBSV)
      theMsgID = "reqSchedDataMsg";

   else if (fileFormat == WitCSV)
      theMsgID = "reqSchedDataCsvMsg";

   else
      myMsgFac () ("unknownFileFormatSmsg", fileFormat);

   myPreprocessor ()->preprocess ();

   WitTempMsgFile theTemp (myMsgFac (), filename);

   saveMsgLen = myMsgFac ().lineLength ();

   myMsgFac ().setLineLength (LONG_MESSAGE_LINES);

   forEachPart (thePart, myProblem ())
      forEachPeriod (t, myProblem ())
         if (fabs ((thePart->reqVol ())[t]) > REQ_EPSILON)
            myMsgFac () (theMsgID,
               quoteCstring (thePart->partName (), quotedPartName),
               t,
               (thePart->reqVol ())[t]);

   myMsgFac ().setLineLength (saveMsgLen);

   WitTimer::leaveSection ("default");
   }

//------------------------------------------------------------------------------

void  WitSolnWriter::writeExecSched (
   const char * const filename,
   const WitFileFormat fileFormat )
   {
   WitOperation * theOpn;
   WitPeriod      t;
   WitBomEntry *  theBomEnt;
   WitSubEntry *  theSub;
   int            saveMsgLen;
   const char *   theMsgID;
   char           formattedProdVol[100];
   char           formattedSubVol [100];
   WitString      quotedOperationName    (100);
   WitString      quotedReplacedPartName (100);
   WitString      quotedConsumedPartName (100);

   WitTimer::enterSection ("default");

   myMsgFac () ("witFileParam",
      (filename == NULL)?
         myMsgFac ().fileName ().myCstring ():
         filename);

   myMsgFac () ("fileFormatMsg", fileFormat );

   if      (fileFormat == WitBSV)
      theMsgID = "prodSchedDataMsg";
   else if (fileFormat == WitCSV)
      theMsgID = "prodSchedDataCsvMsg";
   else
      myMsgFac () ("unknownFileFormatSmsg", fileFormat);

   myPreprocessor ()->preprocess ();

   WitTempMsgFile theTemp (myMsgFac (), filename);

   saveMsgLen = myMsgFac ().lineLength ();

   myMsgFac ().setLineLength (LONG_MESSAGE_LINES);

   forEachOperation (theOpn, myProblem ())
      forEachPeriod (t, myProblem ())
         if (fabs (theOpn->execVol ()[t]) > PROD_EPSILON)
            myMsgFac ()(theMsgID,
               quoteCstring (
                  theOpn->operationName (),
                  quotedOperationName),
               t,
               formattedDouble (theOpn->execVol ()[t], formattedProdVol));

   if (myCompMgr ()->hasSubEntries ())
      {
      if (fileFormat == WitBSV)
         theMsgID = "subSchedDataMsg";
      else
         theMsgID = "subSchedDataCsvMsg";

      myMsgFac () ("subSchedHeadingMsg");

      forEachBomEntry (theBomEnt, myProblem ())
         if (not theBomEnt->mySubEntries ().isEmpty ())
            forEachPeriod (t, myProblem ())
               forEachEl (theSub, theBomEnt->mySubEntries ())
                  if (theSub->inEffect (t))
                     if (fabs (theSub->subVol ()[t]) > PROD_EPSILON)
                        {
                        myMsgFac () (theMsgID,
                           quoteCstring (
                              theSub->myOperationName (),
                              quotedOperationName),
                           quoteCstring (
                              theBomEnt->myPartName (),
                              quotedReplacedPartName),
                           theBomEnt->localIndex (),
                           t,
                           quoteCstring (
                              theSub->myPartName (),
                              quotedConsumedPartName),
                           theSub->localIndex (),
                           formattedDouble (
                              theSub->subVol ()[t],
                              formattedSubVol));
                        }
      }

   myMsgFac ().setLineLength (saveMsgLen);

   WitTimer::leaveSection ("default");
   }

//------------------------------------------------------------------------------

void WitSolnWriter::writeShipSched (
   const char * const filename,
   const WitFileFormat fileFormat )
   {
   WitDemand *    theDemand;
   WitPeriod      t;
   int            saveMsgLen;
   const char *   theMsgID;
   char           formattedShipVol[100];
   WitString      quotedPartName   (100);
   WitString      quotedDemandName (100);

   WitTimer::enterSection ("default");

   myMsgFac () ("witFileParam",
      (filename == NULL)?
         myMsgFac ().fileName ().myCstring ():
         filename);

   myMsgFac () ("fileFormatMsg", fileFormat);

   if      (fileFormat == WitBSV)
      theMsgID = "shipSchedDataMsg";

   else if (fileFormat == WitCSV)
      theMsgID = "shipSchedDataCsvMsg";

   else
      myMsgFac () ("unknownFileFormatSmsg", fileFormat);

   myPreprocessor ()->preprocess ();

   WitTempMsgFile theTemp (myMsgFac (), filename);

   saveMsgLen = myMsgFac ().lineLength ();

   myMsgFac ().setLineLength (LONG_MESSAGE_LINES);

   forEachDemand (theDemand, myProblem ())
      forEachPeriod (t, myProblem ())
         if (fabs (theDemand->shipVol ()[t]) > SHIP_EPSILON)
            {
            myMsgFac () (theMsgID,
               quoteCstring (theDemand->demandedPartName (), quotedPartName),
               quoteCstring (theDemand->demandName (),       quotedDemandName),
               t,
               formattedDouble (theDemand->shipVol ()[t], formattedShipVol));
            }

   myMsgFac ().setLineLength (saveMsgLen);

   WitTimer::leaveSection ("default");
   }

//------------------------------------------------------------------------------

const char * WitSolnWriter::quoteCstring (
      const WitString & inputString,
      WitString &       quotedString)
   {
   int inputStringLen;

   inputStringLen = inputString.length ();

   if (inputStringLen + 2 > quotedString.maxLength ())
      quotedString.resize (inputStringLen + 100);

   quotedString[0] = '"';

   inputString.copyInto (& quotedString[1]);

   quotedString[inputStringLen+1] = '"';
   quotedString[inputStringLen+2] = '\0';

   return quotedString.myCstring ();
   }

//------------------------------------------------------------------------------

char * WitSolnWriter::formattedDouble (double theDbl, char * theCstring)
   {
   sprintf (theCstring, "%.*f", myGlobalComp ()->outputPrecision (), theDbl);

   return theCstring;
   }
@


1.26
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.25
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d34 1
a34 1
/* to appear in the requirements schedule.     */
d37 1
a37 1
/* to appear in the production schedule.       */
d40 1
a40 1
/* to appear in the shipment schedule.         */
d43 1
a43 1
/* witWriteShipSched, & witWriteReqSched.    */
d48 3
a50 3
WitProbAssoc (theProblem)
{
}
d55 2
a56 2
{
}
d61 40
a100 40
const char *  filename,
WitFileFormat fileFormat,
int           maxListLength)
{
WitPartPerStack critList (myProblem ());
const char *    theMsgID;
WitPart *       thePart;
WitPeriod       thePer;

WitTimer::enterSection ("default");

WitString quotedPartName (100);

myMsgFac () (
"witFileParam",
(filename == NULL)?
myMsgFac ().fileName ().myCstring ():
filename);

myMsgFac () ("fileFormatMsg", fileFormat );

if      (fileFormat == WitBSV)
theMsgID = "criticalListMsg";
else if (fileFormat == WitCSV)
theMsgID = "criticalListCsvMsg";
else
myMsgFac () ("unknownFileFormatSmsg", fileFormat);

myPreprocessor ()->preprocess ();

WitTempMsgFile theTemp (myMsgFac (), filename);

critList.revCopyFrom (myGlobalComp ()->revCritList ());

while (critList.pop (thePart, thePer))
{
myMsgFac () (theMsgID,
quoteCstring (thePart->partName (), quotedPartName),
thePer);
}
d102 2
a103 2
WitTimer::leaveSection ("default");
}
d108 8
a115 8
const char *  filename,
WitFileFormat fileFormat)
{
WitPart *    thePart;
WitPeriod    t;
int          saveMsgLen;
const char * theMsgID;
WitString    quotedPartName (100);
d117 1
a117 1
WitTimer::enterSection ("default");
d119 4
a122 4
myMsgFac () ("witFileParam",
(filename == NULL)?
myMsgFac ().fileName ().myCstring ():
filename);
d124 1
a124 1
myMsgFac () ("fileFormatMsg", fileFormat );
d126 2
a127 2
if      (fileFormat == WitBSV)
theMsgID = "reqSchedDataMsg";
d129 2
a130 2
else if (fileFormat == WitCSV)
theMsgID = "reqSchedDataCsvMsg";
d132 2
a133 2
else
myMsgFac () ("unknownFileFormatSmsg", fileFormat);
d135 1
a135 1
myPreprocessor ()->preprocess ();
d137 1
a137 1
WitTempMsgFile theTemp (myMsgFac (), filename);
d139 1
a139 1
saveMsgLen = myMsgFac ().lineLength ();
d141 1
a141 1
myMsgFac ().setLineLength (LONG_MESSAGE_LINES);
d143 7
a149 7
forEachPart (thePart, myProblem ())
forEachPeriod (t, myProblem ())
if (fabs ((thePart->reqVol ())[t]) > REQ_EPSILON)
myMsgFac () (theMsgID,
quoteCstring (thePart->partName (), quotedPartName),
t,
(thePart->reqVol ())[t]);
d151 1
a151 1
myMsgFac ().setLineLength (saveMsgLen);
d153 2
a154 2
WitTimer::leaveSection ("default");
}
d159 83
a241 83
const char * const filename,
const WitFileFormat fileFormat )
{
WitOperation * theOpn;
WitPeriod      t;
WitBomEntry *  theBomEnt;
WitSubEntry *  theSub;
int            saveMsgLen;
const char *   theMsgID;
char           formattedProdVol[100];
char           formattedSubVol [100];
WitString      quotedOperationName    (100);
WitString      quotedReplacedPartName (100);
WitString      quotedConsumedPartName (100);

WitTimer::enterSection ("default");

myMsgFac () ("witFileParam",
(filename == NULL)?
myMsgFac ().fileName ().myCstring ():
filename);

myMsgFac () ("fileFormatMsg", fileFormat );

if      (fileFormat == WitBSV)
theMsgID = "prodSchedDataMsg";
else if (fileFormat == WitCSV)
theMsgID = "prodSchedDataCsvMsg";
else
myMsgFac () ("unknownFileFormatSmsg", fileFormat);

myPreprocessor ()->preprocess ();

WitTempMsgFile theTemp (myMsgFac (), filename);

saveMsgLen = myMsgFac ().lineLength ();

myMsgFac ().setLineLength (LONG_MESSAGE_LINES);

forEachOperation (theOpn, myProblem ())
forEachPeriod (t, myProblem ())
if (fabs (theOpn->execVol ()[t]) > PROD_EPSILON)
myMsgFac ()(theMsgID,
quoteCstring (
theOpn->operationName (),
quotedOperationName),
t,
formattedDouble (theOpn->execVol ()[t], formattedProdVol));

if (myCompMgr ()->hasSubEntries ())
{
if (fileFormat == WitBSV)
theMsgID = "subSchedDataMsg";
else
theMsgID = "subSchedDataCsvMsg";

myMsgFac () ("subSchedHeadingMsg");

forEachBomEntry (theBomEnt, myProblem ())
if (not theBomEnt->mySubEntries ().isEmpty ())
forEachPeriod (t, myProblem ())
forEachEl (theSub, theBomEnt->mySubEntries ())
if (theSub->inEffect (t))
if (fabs (theSub->subVol ()[t]) > PROD_EPSILON)
{
myMsgFac () (theMsgID,
quoteCstring (
theSub->myOperationName (),
quotedOperationName),
quoteCstring (
theBomEnt->myPartName (),
quotedReplacedPartName),
theBomEnt->localIndex (),
t,
quoteCstring (
theSub->myPartName (),
quotedConsumedPartName),
theSub->localIndex (),
formattedDouble (
theSub->subVol ()[t],
formattedSubVol));
}
}
d243 1
a243 1
myMsgFac ().setLineLength (saveMsgLen);
d245 2
a246 2
WitTimer::leaveSection ("default");
}
d251 47
a297 47
const char * const filename,
const WitFileFormat fileFormat )
{
WitDemand *    theDemand;
WitPeriod      t;
int            saveMsgLen;
const char *   theMsgID;
char           formattedShipVol[100];
WitString      quotedPartName   (100);
WitString      quotedDemandName (100);

WitTimer::enterSection ("default");

myMsgFac () ("witFileParam",
(filename == NULL)?
myMsgFac ().fileName ().myCstring ():
filename);

myMsgFac () ("fileFormatMsg", fileFormat);

if      (fileFormat == WitBSV)
theMsgID = "shipSchedDataMsg";

else if (fileFormat == WitCSV)
theMsgID = "shipSchedDataCsvMsg";

else
myMsgFac () ("unknownFileFormatSmsg", fileFormat);

myPreprocessor ()->preprocess ();

WitTempMsgFile theTemp (myMsgFac (), filename);

saveMsgLen = myMsgFac ().lineLength ();

myMsgFac ().setLineLength (LONG_MESSAGE_LINES);

forEachDemand (theDemand, myProblem ())
forEachPeriod (t, myProblem ())
if (fabs (theDemand->shipVol ()[t]) > SHIP_EPSILON)
{
myMsgFac () (theMsgID,
quoteCstring (theDemand->demandedPartName (), quotedPartName),
quoteCstring (theDemand->demandName (),       quotedDemandName),
t,
formattedDouble (theDemand->shipVol ()[t], formattedShipVol));
}
d299 1
a299 1
myMsgFac ().setLineLength (saveMsgLen);
d301 2
a302 2
WitTimer::leaveSection ("default");
}
d307 4
a310 4
const WitString & inputString,
WitString &       quotedString)
{
int inputStringLen;
d312 1
a312 1
inputStringLen = inputString.length ();
d314 2
a315 2
if (inputStringLen + 2 > quotedString.maxLength ())
quotedString.resize (inputStringLen + 100);
d317 1
a317 1
quotedString[0] = '"';
d319 1
a319 1
inputString.copyInto (& quotedString[1]);
d321 2
a322 2
quotedString[inputStringLen+1] = '"';
quotedString[inputStringLen+2] = '\0';
d324 2
a325 2
return quotedString.myCstring ();
}
d330 2
a331 2
{
sprintf (theCstring, "%.*f", myGlobalComp ()->outputPrecision (), theDbl);
d333 2
a334 2
return theCstring;
}
@


1.24
log
@Heuristic Adjustment
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d34 1
a34 1
                              /* to appear in the requirements schedule.     */
d37 1
a37 1
                              /* to appear in the production schedule.       */
d40 1
a40 1
                              /* to appear in the shipment schedule.         */
d43 1
a43 1
                                /* witWriteShipSched, & witWriteReqSched.    */
d48 3
a50 3
      WitProbAssoc (theProblem)
   {
   }
d55 2
a56 2
   {
   }
d61 40
a100 40
      const char *  filename,
      WitFileFormat fileFormat,
      int           maxListLength)
   {
   WitPartPerStack critList (myProblem ());
   const char *    theMsgID;
   WitPart *       thePart;
   WitPeriod       thePer;

   WitTimer::enterSection ("default");

   WitString quotedPartName (100);

   myMsgFac () (
      "witFileParam",
      (filename == NULL)?
         myMsgFac ().fileName ().myCstring ():
         filename);

   myMsgFac () ("fileFormatMsg", fileFormat );

   if      (fileFormat == WitBSV)
      theMsgID = "criticalListMsg";
   else if (fileFormat == WitCSV)
      theMsgID = "criticalListCsvMsg";
   else
      myMsgFac () ("unknownFileFormatSmsg", fileFormat);

   myPreprocessor ()->preprocess ();

   WitTempMsgFile theTemp (myMsgFac (), filename);

   critList.revCopyFrom (myGlobalComp ()->revCritList ());

   while (critList.pop (thePart, thePer))
      {
      myMsgFac () (theMsgID,
         quoteCstring (thePart->partName (), quotedPartName),
         thePer);
      }
d102 2
a103 2
   WitTimer::leaveSection ("default");
   }
d108 8
a115 8
      const char *  filename,
      WitFileFormat fileFormat)
   {
   WitPart *    thePart;
   WitPeriod    t;
   int          saveMsgLen;
   const char * theMsgID;
   WitString    quotedPartName (100);
d117 1
a117 1
   WitTimer::enterSection ("default");
d119 4
a122 4
   myMsgFac () ("witFileParam",
      (filename == NULL)?
         myMsgFac ().fileName ().myCstring ():
         filename);
d124 1
a124 1
   myMsgFac () ("fileFormatMsg", fileFormat );
d126 2
a127 2
   if      (fileFormat == WitBSV)
      theMsgID = "reqSchedDataMsg";
d129 2
a130 2
   else if (fileFormat == WitCSV)
      theMsgID = "reqSchedDataCsvMsg";
d132 2
a133 2
   else
      myMsgFac () ("unknownFileFormatSmsg", fileFormat);
d135 1
a135 1
   myPreprocessor ()->preprocess ();
d137 1
a137 1
   WitTempMsgFile theTemp (myMsgFac (), filename);
d139 1
a139 1
   saveMsgLen = myMsgFac ().lineLength ();
d141 1
a141 1
   myMsgFac ().setLineLength (LONG_MESSAGE_LINES);
d143 7
a149 7
   forEachPart (thePart, myProblem ())
      forEachPeriod (t, myProblem ())
         if (fabs ((thePart->reqVol ())[t]) > REQ_EPSILON)
            myMsgFac () (theMsgID,
               quoteCstring (thePart->partName (), quotedPartName),
               t,
               (thePart->reqVol ())[t]);
d151 1
a151 1
   myMsgFac ().setLineLength (saveMsgLen);
d153 2
a154 2
   WitTimer::leaveSection ("default");
   }
d159 83
a241 83
   const char * const filename,
   const WitFileFormat fileFormat )
   {
   WitOperation * theOpn;
   WitPeriod      t;
   WitBomEntry *  theBomEnt;
   WitSubEntry *  theSub;
   int            saveMsgLen;
   const char *   theMsgID;
   char           formattedProdVol[100];
   char           formattedSubVol [100];
   WitString      quotedOperationName    (100);
   WitString      quotedReplacedPartName (100);
   WitString      quotedConsumedPartName (100);

   WitTimer::enterSection ("default");

   myMsgFac () ("witFileParam",
      (filename == NULL)?
         myMsgFac ().fileName ().myCstring ():
         filename);

   myMsgFac () ("fileFormatMsg", fileFormat );

   if      (fileFormat == WitBSV)
      theMsgID = "prodSchedDataMsg";
   else if (fileFormat == WitCSV)
      theMsgID = "prodSchedDataCsvMsg";
   else
      myMsgFac () ("unknownFileFormatSmsg", fileFormat);

   myPreprocessor ()->preprocess ();

   WitTempMsgFile theTemp (myMsgFac (), filename);

   saveMsgLen = myMsgFac ().lineLength ();

   myMsgFac ().setLineLength (LONG_MESSAGE_LINES);

   forEachOperation (theOpn, myProblem ())
      forEachPeriod (t, myProblem ())
         if (fabs (theOpn->execVol ()[t]) > PROD_EPSILON)
            myMsgFac ()(theMsgID,
               quoteCstring (
                  theOpn->operationName (),
                  quotedOperationName),
               t,
               formattedDouble (theOpn->execVol ()[t], formattedProdVol));

   if (myCompMgr ()->hasSubEntries ())
      {
      if (fileFormat == WitBSV)
         theMsgID = "subSchedDataMsg";
      else
         theMsgID = "subSchedDataCsvMsg";

      myMsgFac () ("subSchedHeadingMsg");

      forEachBomEntry (theBomEnt, myProblem ())
         if (not theBomEnt->mySubEntries ().isEmpty ())
            forEachPeriod (t, myProblem ())
               forEachEl (theSub, theBomEnt->mySubEntries ())
                  if (theSub->inEffect (t))
                     if (fabs (theSub->subVol ()[t]) > PROD_EPSILON)
                        {
                        myMsgFac () (theMsgID,
                           quoteCstring (
                              theSub->myOperationName (),
                              quotedOperationName),
                           quoteCstring (
                              theBomEnt->myPartName (),
                              quotedReplacedPartName),
                           theBomEnt->localIndex (),
                           t,
                           quoteCstring (
                              theSub->myPartName (),
                              quotedConsumedPartName),
                           theSub->localIndex (),
                           formattedDouble (
                              theSub->subVol ()[t],
                              formattedSubVol));
                        }
      }
d243 1
a243 1
   myMsgFac ().setLineLength (saveMsgLen);
d245 2
a246 2
   WitTimer::leaveSection ("default");
   }
d251 47
a297 47
   const char * const filename,
   const WitFileFormat fileFormat )
   {
   WitDemand *    theDemand;
   WitPeriod      t;
   int            saveMsgLen;
   const char *   theMsgID;
   char           formattedShipVol[100];
   WitString      quotedPartName   (100);
   WitString      quotedDemandName (100);

   WitTimer::enterSection ("default");

   myMsgFac () ("witFileParam",
      (filename == NULL)?
         myMsgFac ().fileName ().myCstring ():
         filename);

   myMsgFac () ("fileFormatMsg", fileFormat);

   if      (fileFormat == WitBSV)
      theMsgID = "shipSchedDataMsg";

   else if (fileFormat == WitCSV)
      theMsgID = "shipSchedDataCsvMsg";

   else
      myMsgFac () ("unknownFileFormatSmsg", fileFormat);

   myPreprocessor ()->preprocess ();

   WitTempMsgFile theTemp (myMsgFac (), filename);

   saveMsgLen = myMsgFac ().lineLength ();

   myMsgFac ().setLineLength (LONG_MESSAGE_LINES);

   forEachDemand (theDemand, myProblem ())
      forEachPeriod (t, myProblem ())
         if (fabs (theDemand->shipVol ()[t]) > SHIP_EPSILON)
            {
            myMsgFac () (theMsgID,
               quoteCstring (theDemand->demandedPartName (), quotedPartName),
               quoteCstring (theDemand->demandName (),       quotedDemandName),
               t,
               formattedDouble (theDemand->shipVol ()[t], formattedShipVol));
            }
d299 1
a299 1
   myMsgFac ().setLineLength (saveMsgLen);
d301 2
a302 2
   WitTimer::leaveSection ("default");
   }
d307 4
a310 4
      const WitString & inputString,
      WitString &       quotedString)
   {
   int inputStringLen;
d312 1
a312 1
   inputStringLen = inputString.length ();
d314 2
a315 2
   if (inputStringLen + 2 > quotedString.maxLength ())
      quotedString.resize (inputStringLen + 100);
d317 1
a317 1
   quotedString[0] = '"';
d319 1
a319 1
   inputString.copyInto (& quotedString[1]);
d321 2
a322 2
   quotedString[inputStringLen+1] = '"';
   quotedString[inputStringLen+2] = '\0';
d324 2
a325 2
   return quotedString.myCstring ();
   }
d330 2
a331 2
   {
   sprintf (theCstring, "%.*f", myGlobalComp ()->outputPrecision (), theDbl);
d333 2
a334 2
   return theCstring;
   }
@


1.23
log
@Changed source file names:
   Global.h ==> GlobalComp.h
   Global.C ==> GlobalComp.C
@
text
@d20 1
a20 1
#include <Opn.h>
@


1.22
log
@Multi-objective mode
@
text
@d18 1
a18 1
#include <Global.h>
@


1.21
log
@Stochastic Implosion
@
text
@d319 1
a319 1
   strcpy (& quotedString[1], inputString.myCstring ());
@


1.20
log
@Stochastic Implosion
@
text
@d26 1
a26 1
#include <OptImp.h>
@


1.19
log
@App controlled opt implosion.
@
text
@d65 4
a68 5
   WitPartPer * thePartPer;
   int          theIdx;
   const char * theMsgID;
   WitPart *    thePart;
   WitPeriod    thePer;
a73 2
   theIdx = 0;

d93 3
a95 1
   forEachEl (thePartPer, myGlobalComp ()->criticalList ())
a96 7
      if (maxListLength > 0)
         if (++ theIdx > maxListLength)
            break;

      thePart = thePartPer->first;
      thePer  = thePartPer->second;

@


1.18
log
@Updated the copyright date on all source files.
@
text
@d17 1
d92 1
a92 1
   myProblem ()->preprocess ();
d143 1
a143 1
   myProblem ()->preprocess ();
d198 1
a198 1
   myProblem ()->preprocess ();
d288 1
a288 1
   myProblem ()->preprocess ();
@


1.17
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.16
log
@[multi-thread]
@
text
@a26 1
#include <PerPair.h>
d101 2
a102 1
      thePartPer->getElems (thePart, thePer);
@


1.15
log
@[multi-thread]:
   Moved PROLOG/EPILOG responsibility from the inner layer of the API
   to the outer layer.
@
text
@a30 2
#include <ctype.h>

@


1.14
log
@[multi-threads]
@
text
@d79 5
a83 7
   if (myApiMgr ()->calledByApp ())
      {
      myMsgFac () (
         "witFileParam",
         (filename == NULL)?
            myMsgFac ().fileName ().myCstring ():
            filename);
d85 1
a85 2
      myMsgFac () ("fileFormatMsg", fileFormat );
      }
d128 6
a133 7
   if (myApiMgr ()->calledByApp ()) {
      myMsgFac () ("witFileParam",
         filename==NULL ?
            myMsgFac ().fileName ().myCstring () :
            filename );
      myMsgFac () ("fileFormatMsg", fileFormat );
   }
d136 2
a137 1
      theMsgID    = "reqSchedDataMsg";
d139 4
a142 2
      theMsgID    = "reqSchedDataCsvMsg";
   else  myMsgFac () ("unknownFileFormatSmsg",fileFormat);
d273 6
a278 7
   if (myApiMgr ()->calledByApp ()) {
      myMsgFac () ("witFileParam",
         filename==NULL ?
            myMsgFac ().fileName ().myCstring () :
            filename );
      myMsgFac () ("fileFormatMsg", fileFormat );
   }
d282 1
d285 1
d287 1
a287 1
      myMsgFac () ("unknownFileFormatSmsg",fileFormat);
@


1.13
log
@Pegged Critical List.
@
text
@d79 1
a79 1
   if (myApiMgr ()->applicationCalled ())
d131 1
a131 1
   if (myApiMgr ()->applicationCalled ()) {
d274 1
a274 1
   if (myApiMgr ()->applicationCalled ()) {
@


1.12
log
@Minor change.
@
text
@d63 3
a65 3
   const char * const filename,
   const WitFileFormat fileFormat,
   const int maxListLength  )
d68 1
a68 1
   int          k;
d77 1
a77 1
   k = 0;
d79 2
a80 1
   if (myApiMgr ()->applicationCalled ()) {
d83 4
a86 3
         filename==NULL ?
            myMsgFac ().fileName ().myCstring () :
            filename );
d88 1
a88 1
   }
d95 1
a95 1
      myMsgFac () ("unknownFileFormatSmsg",fileFormat);
d104 1
a104 1
         if (++ k > maxListLength)
@


1.11
log
@Double Precision.
@
text
@a27 1
#include <wit.h>
@


1.10
log
@Continued implementation of PIP.
@
text
@d215 1
a215 1
               formattedFloat (theOpn->execVol ()[t], formattedProdVol));
d246 1
a246 1
                           formattedFloat (
d304 1
a304 1
               formattedFloat (theDemand->shipVol ()[t], formattedShipVol));
d337 1
a337 1
char * WitSolnWriter::formattedFloat (float theFloat, char * theCstring)
d339 1
a339 1
   sprintf (theCstring, "%.*f", myGlobalComp ()->outputPrecision (), theFloat);
@


1.9
log
@Fixed a bug in MRP in stand-alone mode.
@
text
@d27 1
a27 1
#include <Dated.h>
d68 5
a72 3
   WitDatedPart * theDP;
   int            k;
   const char *   theMsgID;
d100 1
a100 1
   forEachEl (theDP, myGlobalComp ()->criticalList ())
d106 2
d109 2
a110 2
         quoteCstring (theDP->myPart ()->partName (), quotedPartName),
         theDP->myPeriod ());
@


1.8
log
@Continued implementation of opt with COIN.
@
text
@d124 1
a124 1
   WitTimer::leaveSection ("default");
@


1.7
log
@Internal changes.
@
text
@d72 1
a72 1
   WitTimingEvent theEvent ("default");
d108 2
d118 7
a124 6
   WitPart *      thePart;
   WitPeriod      t;
   int            saveMsgLen;
   const char *   theMsgID;
   WitTimingEvent theEvent       ("default");
   WitString      quotedPartName (100);
a143 1
   /* Allow long message lines */
a155 1
   /* Restore length of message */
d157 2
d175 3
a177 1
   WitTimingEvent theEvent ("default");
d179 1
a179 3
   WitString quotedOperationName    (100);
   WitString quotedReplacedPartName (100);
   WitString quotedConsumedPartName (100);
a198 1
   /* Allow long message lines */
a247 1
   /* Restore length of message */
d249 2
d264 2
a265 1
   WitTimingEvent theEvent ("default");
d267 1
a267 2
   WitString quotedPartName   (100);
   WitString quotedDemandName (100);
a287 1
   /* Allow long message lines */
a302 1
   /* Restore length of message */
d304 2
@


1.6
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d221 1
a221 1
         if (! theBomEnt->mySubEntries ().isEmpty ())
@


1.5
log
@Continued implementation of single-source.
@
text
@d16 7
a23 1
#include <SolnWrit.h>
@


1.4
log
@Continued implementation of object iteration.
@
text
@d23 1
@


1.3
log
@Began implementation of object iteration.
@
text
@d22 1
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d22 1
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
