head	1.13;
access;
symbols
	sce_5_01_20080919:1.4;
locks; strict;
comment	@ * @;


1.13
date	2011.09.28.23.49.47;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.09.24.00.28.08;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.08.30.20.17.49;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2010.08.19.18.00.14;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2010.03.24.21.31.03;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2010.03.16.20.39.22;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2010.03.13.00.35.50;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2010.01.06.00.27.30;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2010.01.04.22.11.24;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.03.03.22.35.43;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.02.29.23.24.29;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.02.27.23.19.11;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.02.27.22.49.17;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef OptVCH
#define OptVCH

//------------------------------------------------------------------------------
// Header file: "OptVC.h"
//
// Contains the declaration of class OptVC.
//------------------------------------------------------------------------------

#include <BoundPair.h>
#include <PtrVec.h>

//------------------------------------------------------------------------------
// class OptVC
//
// "Optimization Variable / Constraint"
// A variable or constraint in an optimization problem.
//
// Class hierarchy:
//
//    OptVC
//       OptVar
//          DetVar
//             ScrapVar
//             NonSubVar
//             SubVar
//             ShipVar
//             BoundedVar
//                ExecVar
//                StockVar
//                CumShipVar
//             SlbvVar
//             MultiObjVar
//             NtbvVar
//          StochVar
//             StScrapVar
//             StNonSubVar
//             StSubVar
//             StShipVar
//             StBddVar
//                StExecVar
//                StStockVar
//                StCumShipVar
//             StSlbvVar
//       OptCon
//          DetCon
//             ResourceCon
//             SubCon
//             ShipCon
//             SlbCon
//             MultiObjCon
//             TbvCon
//          StochCon
//             StResCon
//             StSubCon
//             StShipCon
//             StSlbCon
//
// Implemented in OptMisc.C.
//------------------------------------------------------------------------------

class WitOptVC
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitOptVC (WitOptProblem * theOptProblem, int theIndex);
         //
         // index_ <-- theIndex.

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitOptVC ();

      //-----------------------------------------------------------------------
      // Public pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual WitOptProblem * myOptProblem () = 0;
         //
         // Returns the OptProblem that owns this OptVC.

      virtual double solnValue () = 0;
         //
         // Returns:
         //   primalValue for OptVars.
         //   dualValue () for OptCons.

      //-----------------------------------------------------------------------
      // Public static member functions.
      //-----------------------------------------------------------------------

      static void writeExtReal (
            FILE * outFile,
            const char * fFormat,
            const char * sFormat,
            double val);
         //
         // Writes val to outFile.
         // If val is finite, fFormat is used as the format.
         // If val is infinite, an appropriate string is printed using
         // sFormat as the format.

      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (const WitBoundPair &, bounds)
      accessFunc (int,                  index)

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      inline WitBoundPair & bounds ()
            //
            // Non-const access.
         {
         return bounds_;
         }

      void allocMyCoeffs (int nCoeffsForOptVC);
         //
         // Allocates myCoeffVec_ to nCoeffsForOptVC.

      void clearMyCoeffs ();
         //
         // Clears myCoeffVec_.

      void store (WitCoeff * theCoeff);
         //
         // Stores theCoeff in myCoeffVec_.

      void compBounds ();
         //
         // Computes the bounds for this OptVC.

      void printID ();
         //
         // Print info identifying this OptVC to the optProbFile.

      void printBounds (const WitBoundPair & preScreenBounds);
         //
         // Prints bounds and preScreenBounds for this OptVC to the optProbFile.

      void attachCoeffItr (WitCoeffItr & theItr);
         //
         // Attaches theItr to myCoeffVec_.

   protected:

      //-----------------------------------------------------------------------
      // Protected pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual double upperBoundVal () = 0;
      virtual double lowerBoundVal () = 0;
         //
         // Computes and returns the upper and lower bounds for this OptVC.

      virtual const char * kindText () = 0;
         //
         // Returns a string identifying the high level derived class (e.g.,
         // OptVar), of which this OptVC is an instance.

      virtual const char * classText () = 0;
         //
         // Returns a string identifying the low level derived class (e.g.,
         // StockVar), of which this OptVC is an instance.
         // No more than 12 characters

      virtual void printSource () = 0;
         //
         // Prints to myOptProblem ()->optProbFile () text identifying the data
         // from which this OptVC was generated.

      //-----------------------------------------------------------------------
      // Other protected member functions.
      //-----------------------------------------------------------------------

      WitProblem * myProblem ();

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitOptVC);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitPtrVec <WitCoeff> myCoeffVec_;
         //
         // The vector of Coeffs that belong to this OptVC_.

      int nCoeffs_;
         //
         // The # of Coeffs that belong to this OptVC_.

      WitBoundPair bounds_;
         //
         // Lower and upper bounds.

      const int index_;
         //
         // Index for arrays of OptVars or OptCons.
         // OptVars and OptCons are indexed separately; i.e., the first
         // OptVar has index 0 and the first OptCon has index 0.
   };

#endif
@


1.12
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 6
a6 1
//------------------------------------------------------------------------------
d8 1
a8 4
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
d10 4
a13 1
//------------------------------------------------------------------------------
@


1.11
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 1
a6 1
//     IBM Confidential
d72 2
a73 2
{
public:
d75 152
a226 152
//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------

WitOptVC (WitOptProblem * theOptProblem, int theIndex);
//
// index_ <-- theIndex.

//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------

virtual ~WitOptVC ();

//-----------------------------------------------------------------------
// Public pure virtual member functions.
//-----------------------------------------------------------------------

virtual WitOptProblem * myOptProblem () = 0;
//
// Returns the OptProblem that owns this OptVC.

virtual double solnValue () = 0;
//
// Returns:
//   primalValue for OptVars.
//   dualValue () for OptCons.

//-----------------------------------------------------------------------
// Public static member functions.
//-----------------------------------------------------------------------

static void writeExtReal (
FILE * outFile,
const char * fFormat,
const char * sFormat,
double val);
//
// Writes val to outFile.
// If val is finite, fFormat is used as the format.
// If val is infinite, an appropriate string is printed using
// sFormat as the format.

//-----------------------------------------------------------------------
// Data access functions.
//-----------------------------------------------------------------------

accessFunc (const WitBoundPair &, bounds)
accessFunc (int,                  index)

//-----------------------------------------------------------------------
// Other public member functions.
//-----------------------------------------------------------------------

inline WitBoundPair & bounds ()
//
// Non-const access.
{
return bounds_;
}

void allocMyCoeffs (int nCoeffsForOptVC);
//
// Allocates myCoeffVec_ to nCoeffsForOptVC.

void clearMyCoeffs ();
//
// Clears myCoeffVec_.

void store (WitCoeff * theCoeff);
//
// Stores theCoeff in myCoeffVec_.

void compBounds ();
//
// Computes the bounds for this OptVC.

void printID ();
//
// Print info identifying this OptVC to the optProbFile.

void printBounds (const WitBoundPair & preScreenBounds);
//
// Prints bounds and preScreenBounds for this OptVC to the optProbFile.

void attachCoeffItr (WitCoeffItr & theItr);
//
// Attaches theItr to myCoeffVec_.

protected:

//-----------------------------------------------------------------------
// Protected pure virtual member functions.
//-----------------------------------------------------------------------

virtual double upperBoundVal () = 0;
virtual double lowerBoundVal () = 0;
//
// Computes and returns the upper and lower bounds for this OptVC.

virtual const char * kindText () = 0;
//
// Returns a string identifying the high level derived class (e.g.,
// OptVar), of which this OptVC is an instance.

virtual const char * classText () = 0;
//
// Returns a string identifying the low level derived class (e.g.,
// StockVar), of which this OptVC is an instance.
// No more than 12 characters

virtual void printSource () = 0;
//
// Prints to myOptProblem ()->optProbFile () text identifying the data
// from which this OptVC was generated.

//-----------------------------------------------------------------------
// Other protected member functions.
//-----------------------------------------------------------------------

WitProblem * myProblem ();

private:

//-----------------------------------------------------------------------
// Private member functions.
//-----------------------------------------------------------------------

noCopyCtorAssign (WitOptVC);

//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------

WitPtrVec <WitCoeff> myCoeffVec_;
//
// The vector of Coeffs that belong to this OptVC_.

int nCoeffs_;
//
// The # of Coeffs that belong to this OptVC_.

WitBoundPair bounds_;
//
// Lower and upper bounds.

const int index_;
//
// Index for arrays of OptVars or OptCons.
// OptVars and OptCons are indexed separately; i.e., the first
// OptVar has index 0 and the first OptCon has index 0.
};
@


1.10
log
@CPLEX
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 1
a6 1
//     IBM Confidential 
d72 2
a73 2
   {
   public:
d75 152
a226 152
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitOptVC (WitOptProblem * theOptProblem, int theIndex);
         //
         // index_ <-- theIndex.

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitOptVC ();

      //-----------------------------------------------------------------------
      // Public pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual WitOptProblem * myOptProblem () = 0;
         //
         // Returns the OptProblem that owns this OptVC.

      virtual double solnValue () = 0;
         //
         // Returns:
         //   primalValue for OptVars.
         //   dualValue () for OptCons.

      //-----------------------------------------------------------------------
      // Public static member functions.
      //-----------------------------------------------------------------------

      static void writeExtReal (
            FILE * outFile,
            const char * fFormat,
            const char * sFormat,
            double val);
         //
         // Writes val to outFile.
         // If val is finite, fFormat is used as the format.
         // If val is infinite, an appropriate string is printed using
         // sFormat as the format.

      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (const WitBoundPair &, bounds)
      accessFunc (int,                  index)

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      inline WitBoundPair & bounds ()
            //
            // Non-const access.
         {
         return bounds_;
         }

      void allocMyCoeffs (int nCoeffsForOptVC);
         //
         // Allocates myCoeffVec_ to nCoeffsForOptVC.

      void clearMyCoeffs ();
         //
         // Clears myCoeffVec_.

      void store (WitCoeff * theCoeff);
         //
         // Stores theCoeff in myCoeffVec_.

      void compBounds ();
         //
         // Computes the bounds for this OptVC.

      void printID ();
         //
         // Print info identifying this OptVC to the optProbFile.

      void printBounds (const WitBoundPair & preScreenBounds);
         //
         // Prints bounds and preScreenBounds for this OptVC to the optProbFile.

      void attachCoeffItr (WitCoeffItr & theItr);
         //
         // Attaches theItr to myCoeffVec_.

   protected:

      //-----------------------------------------------------------------------
      // Protected pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual double upperBoundVal () = 0;
      virtual double lowerBoundVal () = 0;
         //
         // Computes and returns the upper and lower bounds for this OptVC.

      virtual const char * kindText () = 0;
         //
         // Returns a string identifying the high level derived class (e.g.,
         // OptVar), of which this OptVC is an instance.

      virtual const char * classText () = 0;
         //
         // Returns a string identifying the low level derived class (e.g.,
         // StockVar), of which this OptVC is an instance.
         // No more than 12 characters

      virtual void printSource () = 0;
         //
         // Prints to myOptProblem ()->optProbFile () text identifying the data
         // from which this OptVC was generated.

      //-----------------------------------------------------------------------
      // Other protected member functions.
      //-----------------------------------------------------------------------

      WitProblem * myProblem ();

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitOptVC);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitPtrVec <WitCoeff> myCoeffVec_;
         //
         // The vector of Coeffs that belong to this OptVC_.

      int nCoeffs_;
         //
         // The # of Coeffs that belong to this OptVC_.

      WitBoundPair bounds_;
         //
         // Lower and upper bounds.

      const int index_;
         //
         // Index for arrays of OptVars or OptCons.
         // OptVars and OptCons are indexed separately; i.e., the first
         // OptVar has index 0 and the first OptCon has index 0.
   };
@


1.9
log
@Removed OptObj classes.
@
text
@d26 1
a26 1
// A variable or constraint in an optimization model.
d79 1
a79 1
      WitOptVC (WitOptModel * theOptModel, int theIndex);
d93 1
a93 1
      virtual WitOptModel * myOptModel () = 0;
d95 1
a95 1
         // Returns the OptModel that owns this OptVC.
d154 1
a154 1
         // Print info identifying this OptVC to the modelFile.
d158 1
a158 1
         // Prints bounds and preScreenBounds for this OptVC to the modelFile.
d188 1
a188 1
         // Prints to myOptModel ()->modelFile () text identifying the data
@


1.8
log
@Multi-Obj Mode
@
text
@d223 1
a223 1
         // Index for arrays of OptVars or OptCons or OptObjs.
@


1.7
log
@Multi-Obj Mode
@
text
@d43 1
a43 1
//             TbvVar
@


1.6
log
@Multi-objective mode
@
text
@d43 1
d61 1
@


1.5
log
@Multi-objective mode
@
text
@d59 1
@


1.4
log
@Stochastic Implosion
@
text
@d42 1
d181 1
@


1.3
log
@Stochastic Implosion
@
text
@d26 1
a26 1
// A variable or constraint in an optimization problem.
@


1.2
log
@Stochastic Implosion
@
text
@d91 1
a91 1
         // Returns the OptModel that owns this optProbEl.
d150 1
a150 1
         // Print info identifying this OptVC to the optProbFile.
d154 1
a154 2
         // Prints bounds and preScreenBounds for this OptVC to the
         // optProbFile.
d183 1
a183 1
         // Prints to myOptModel ()->optProbFile () text identifying the data
@


1.1
log
@Stochastic Implosion
@
text
@d75 1
a75 1
      WitOptVC (WitOptProb * theOptProb, int theIndex);
d89 1
a89 1
      virtual WitOptProb * myOptProb () = 0;
d91 1
a91 1
         // Returns the OptProb that owns this optProbEl.
d184 1
a184 1
         // Prints to myOptProb ()->optProbFile () text identifying the data
@

