head	1.50;
access;
symbols;
locks; strict;
comment	@ * @;


1.50
date	2011.09.28.23.50.32;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2011.09.24.00.28.48;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2011.08.30.20.18.17;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2010.11.12.22.03.05;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2010.08.27.21.06.50;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2010.08.24.22.06.44;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2010.08.19.18.00.15;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2008.02.28.00.00.43;	author rjw;	state dead;
branches;
next	1.42;

1.42
date	2008.02.27.23.19.12;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2008.02.27.22.49.18;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2008.02.14.19.16.18;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2008.02.12.22.04.04;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2007.10.10.19.51.29;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2007.09.19.17.41.35;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2007.09.10.21.01.35;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2007.09.07.20.25.12;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2007.09.07.20.10.23;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2007.09.07.15.19.30;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2007.09.05.22.23.58;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2007.08.30.19.39.02;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2007.08.29.22.28.44;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.08.24.22.14.01;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2007.08.24.21.49.57;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2007.08.24.20.17.25;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.08.24.15.48.08;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.08.22.22.16.16;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.08.20.22.47.59;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.08.16.21.27.41;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.08.15.21.36.43;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.08.14.15.03.01;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.08.07.21.22.37;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.08.07.19.17.44;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.08.03.19.07.03;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.08.02.22.06.27;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.07.31.23.04.46;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.07.31.22.22.33;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.07.27.23.15.16;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.07.27.21.08.53;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.07.27.19.53.38;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.07.27.16.33.32;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.07.26.21.53.57;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.07.26.21.39.50;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.07.26.21.09.28;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.07.26.19.23.36;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.07.25.23.18.23;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.07.25.21.16.10;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.07.25.19.53.27;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.07.24.22.17.32;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.06.22.21.23.57;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.06.22.18.35.56;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.50
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef StochImpOPH
#define StochImpOPH

//------------------------------------------------------------------------------
// Header file: "StochImpOP.h"
//
// Contains the declaration of class StochImpOP.
//------------------------------------------------------------------------------

#include <OptProblem.h>
#include <List.h>

//------------------------------------------------------------------------------
// class StochImpOP
//
// "Stochastic Implosion Optimization Problem"
//
// Class hierarchy:
//
//    ProbAssoc
//       OptProblem
//          StochImpOP
//
// Implemented in StochOpt.C.
//------------------------------------------------------------------------------

class WitStochImpOP: public WitOptProblem
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitStochImpOP (WitStochModeMgr *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitStochImpOP ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual bool needDual    ();
      virtual bool reSolveMode ();

      //-----------------------------------------------------------------------
      // OptVC item printing functions.
      //
      // Each of these functions prints its argument to optProbFile ().
      //-----------------------------------------------------------------------

      void printItem (WitNode *);
      void printItem (WitDemand *);
      void printItem (WitBomEntry *);
      void printItem (WitSubEntry *);
      void printItem (WitStBddVar *);

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc    (WitStochModeMgr *,                myStochModeMgr)
      accessFunc    (WitScenGroup *,                   myScenGroupForStage0)
      accessNonNull (WitExecPerSched <WitBillEntry> *, myExecPerSched)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual void generateVariables   ();
      virtual void generateConstraints ();
      virtual void postGenFixed        ();
      virtual void postGenFlexible     ();
      virtual void printOptVCHeading   ();
      virtual void doScreening         ();

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      void buildScenGroups ();
         //
         // Creates theScenGroups to be owned by this StochImpOP.
         // To be called during construction.

      bool positiveHardLBsExist  ();
         //
         // Returns true iff there is at least one BoundSet with a positive
         // hardLB in some Scenario.

      bool disallowedScrapExists ();
         //
         // Returns true iff there is at least one Part with
         // scrapAllowed == false.

      noCopyCtorAssign (WitStochImpOP);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitStochModeMgr * const myStochModeMgr_;
         //
         // The StochModeMgr for this StochImpOP.

      WitList <WitScenGroup> myScenGroups_;
         //
         // The ScenGroups owned by this StochImpOP.

      WitScenGroup * myScenGroupForStage0_;
         //
         // The ScenGroup owned by this StochImpOP for Stage 0.

      WitExecPerSched <WitBillEntry> * myExecPerSched_;
         //
         // The ExecPerSched owned by this StochImpOP during fixed matrix
         // generation; otherwise NULL.
   };

#endif
@


1.49
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.48
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d37 2
a38 21
{
public:

//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------

WitStochImpOP (WitStochModeMgr *);

//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------

virtual ~WitStochImpOP ();

//-----------------------------------------------------------------------
// Overriding public virtual member functions.
//-----------------------------------------------------------------------

virtual bool needDual    ();
virtual bool reSolveMode ();
d40 94
a133 75
//-----------------------------------------------------------------------
// OptVC item printing functions.
//
// Each of these functions prints its argument to optProbFile ().
//-----------------------------------------------------------------------

void printItem (WitNode *);
void printItem (WitDemand *);
void printItem (WitBomEntry *);
void printItem (WitSubEntry *);
void printItem (WitStBddVar *);

//-----------------------------------------------------------------------
// Access functions.
//-----------------------------------------------------------------------

accessFunc    (WitStochModeMgr *,                myStochModeMgr)
accessFunc    (WitScenGroup *,                   myScenGroupForStage0)
accessNonNull (WitExecPerSched <WitBillEntry> *, myExecPerSched)

private:

//-----------------------------------------------------------------------
// Overriding private virtual member functions.
//-----------------------------------------------------------------------

virtual void generateVariables   ();
virtual void generateConstraints ();
virtual void postGenFixed        ();
virtual void postGenFlexible     ();
virtual void printOptVCHeading   ();
virtual void doScreening         ();

//-----------------------------------------------------------------------
// Other private member functions.
//-----------------------------------------------------------------------

void buildScenGroups ();
//
// Creates theScenGroups to be owned by this StochImpOP.
// To be called during construction.

bool positiveHardLBsExist  ();
//
// Returns true iff there is at least one BoundSet with a positive
// hardLB in some Scenario.

bool disallowedScrapExists ();
//
// Returns true iff there is at least one Part with
// scrapAllowed == false.

noCopyCtorAssign (WitStochImpOP);

//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------

WitStochModeMgr * const myStochModeMgr_;
//
// The StochModeMgr for this StochImpOP.

WitList <WitScenGroup> myScenGroups_;
//
// The ScenGroups owned by this StochImpOP.

WitScenGroup * myScenGroupForStage0_;
//
// The ScenGroup owned by this StochImpOP for Stage 0.

WitExecPerSched <WitBillEntry> * myExecPerSched_;
//
// The ExecPerSched owned by this StochImpOP during fixed matrix
// generation; otherwise NULL.
};
@


1.47
log
@CPLEX
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d37 21
a57 2
   {
   public:
d59 75
a133 94
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitStochImpOP (WitStochModeMgr *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitStochImpOP ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual bool needDual    ();
      virtual bool reSolveMode ();

      //-----------------------------------------------------------------------
      // OptVC item printing functions.
      //
      // Each of these functions prints its argument to optProbFile ().
      //-----------------------------------------------------------------------

      void printItem (WitNode *);
      void printItem (WitDemand *);
      void printItem (WitBomEntry *);
      void printItem (WitSubEntry *);
      void printItem (WitStBddVar *);

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc    (WitStochModeMgr *,                myStochModeMgr)
      accessFunc    (WitScenGroup *,                   myScenGroupForStage0)
      accessNonNull (WitExecPerSched <WitBillEntry> *, myExecPerSched)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual void generateVariables   ();
      virtual void generateConstraints ();
      virtual void postGenFixed        ();
      virtual void postGenFlexible     ();
      virtual void printOptVCHeading   ();
      virtual void doScreening         ();

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      void buildScenGroups ();
         //
         // Creates theScenGroups to be owned by this StochImpOP.
         // To be called during construction.

      bool positiveHardLBsExist  ();
         //
         // Returns true iff there is at least one BoundSet with a positive
         // hardLB in some Scenario.

      bool disallowedScrapExists ();
         //
         // Returns true iff there is at least one Part with
         // scrapAllowed == false.

      noCopyCtorAssign (WitStochImpOP);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitStochModeMgr * const myStochModeMgr_;
         //
         // The StochModeMgr for this StochImpOP.

      WitList <WitScenGroup> myScenGroups_;
         //
         // The ScenGroups owned by this StochImpOP.

      WitScenGroup * myScenGroupForStage0_;
         //
         // The ScenGroup owned by this StochImpOP for Stage 0.

      WitExecPerSched <WitBillEntry> * myExecPerSched_;
         //
         // The ExecPerSched owned by this StochImpOP during fixed matrix
         // generation; otherwise NULL.
   };
@


1.46
log
@CPLEX
@
text
@d56 2
a57 1
      virtual bool needDual ();
@


1.45
log
@CPLEX
@
text
@d56 1
a56 4
      virtual bool needDual         ();
      virtual void reportInfeasible ();
      virtual void reportUnbounded  ();
      virtual void reportInfOrUnbdd ();
@


1.44
log
@CPLEX
@
text
@d59 1
@


1.43
log
@Stochastic Implosion
@
text
@d19 1
a19 1
#include <OptModel.h>
d30 1
a30 1
//       OptModel
d36 1
a36 1
class WitStochImpOP: public WitOptModel
a78 2
      accessNonNull (WitStochObj *,                    myStochObj)
      accessNonNull (WitStBoundsObj *,                 myStBoundsObj)
d86 6
a91 7
      virtual void        generateVariables   ();
      virtual void        generateConstraints ();
      virtual WitOptObj * generateObjectives  ();
      virtual void        postGenFixed        ();
      virtual void        postGenFlexible     ();
      virtual void        printOptVCHeading   ();
      virtual void        doScreening         ();
a133 5

      WitStochObj *    myStochObj_;
      WitStBoundsObj * myStBoundsObj_;
         //
         // The OptObjs owned by this StochImpOP.
@


1.42
log
@Stochastic Implosion
@
text
@@


1.41
log
@Stochastic Implosion
@
text
@d19 1
a19 1
#include <OptProb.h>
d30 1
a30 1
//       OptProb
d36 1
a36 1
class WitStochImpOP: public WitOptProb
@


1.40
log
@Stochastic Implosion
@
text
@d61 1
a61 1
      // OptProbEl item printing functions.
d88 7
a94 7
      virtual void        generateVariables     ();
      virtual void        generateConstraints   ();
      virtual WitOptObj * generateObjectives    ();
      virtual void        postGenFixed          ();
      virtual void        postGenFlexible       ();
      virtual void        printOptProbElHeading ();
      virtual void        doScreening           ();
@


1.39
log
@Stochastic Implosion
@
text
@d100 5
@


1.38
log
@Stochastic Implosion
@
text
@d77 1
a77 1
      accessFunc    (WitScenGroup *,                   stage0ScenGroup)
d124 1
a124 1
      WitScenGroup * stage0ScenGroup_;
d126 1
a126 1
         // The stage 0 ScenGroup owned by this StochImpOP.
@


1.37
log
@Stochastic Implosion
@
text
@d100 10
@


1.36
log
@Stochastic Implosion
@
text
@d44 1
a44 1
      WitStochImpOP (WitStochOptMgr *);
d76 1
a76 1
      accessFunc    (WitScenMgr *,                     myScenMgr)
d106 1
a106 1
      WitStochOptMgr * const myStochOptMgr_;
d108 1
a108 5
         // The StochOptMgr that owns this StochImpOP.

      WitScenMgr * const myScenMgr_;
         //
         // The ScenMgr for this StochImpOP.
@


1.35
log
@Stochastic Implosion
@
text
@d92 1
@


1.34
log
@Stochastic Implosion
@
text
@d79 1
a80 1
      accessNonNull (WitStochObj *,                    myStochObj)
d126 1
a127 1
      WitStochObj *    myStochObj_;
@


1.33
log
@Stochastic Implosion
@
text
@d79 1
d126 2
a127 3
      WitStPrimaryObj * myStPrimaryObj_;
      WitStBoundsObj *  myStBoundsObj_;
      WitStochObj *     myStochObj_;
@


1.32
log
@Stochastic Implosion
@
text
@d125 5
a129 1
      WitStochObj * myStochObj_;
@


1.31
log
@Stochastic Implosion
@
text
@d70 1
@


1.30
log
@Stochastic Implosion
@
text
@d76 1
d115 4
@


1.29
log
@Stochastic Implosion
@
text
@d20 1
a20 1
#include <PtrMap.h>
d110 1
a110 1
      WitScenGroup * myAllScenGroup_;
d112 1
a112 7
         // The Scenario Set owned by this StochImpOP that represents the set of
         // all Scenarios.

      WitPtrMap <WitScenario, WitScenGroup> mySglScenGroupFor_;
         //
         // mySglScenGroupFor_ (theScenario) is the ScenGroup owned by this
         // StochImpOP that represents theScenario by itself.
@


1.28
log
@Stochastic Implosion
@
text
@d110 1
a110 1
      WitScenSet * myAllScenSet_;
d115 1
a115 1
      WitPtrMap <WitScenario, WitScenSet> mySglScenSetFor_;
d117 1
a117 1
         // mySglScenSetFor_ (theScenario) is the ScenSet owned by this
@


1.27
log
@Stochastic Implosion
@
text
@d32 2
@


1.26
log
@Stochastic Implosion
@
text
@a58 12
      // Other public member functions.
      //-----------------------------------------------------------------------

      void printPeriod (WitPeriod thePer);
         //
         // Prints thePer to optProbFile ().

      void printScenario (WitScenario * theScenario);
         //
         // Prints theScenario to optProbFile ().

      //-----------------------------------------------------------------------
a76 5
      inline WitScenSet * mySglScenSetFor (WitScenario * theScenario)
         {
         return mySglScenSetFor_ (theScenario);
         }

@


1.25
log
@Stochastic Implosion
@
text
@a20 1
#include <PtrSched.h>
a88 4
      accessFunc2 (
         const WitPtrSched  <WitScenario,   WitScenPer> &,
         myScenPerSched)

a134 5
      WitPtrSched <WitScenario, WitScenPer> myScenPerSched_;
         //
         // myScenPerSched_.myPtrAt (theScenario, thePer) is the ScenPer for
         // theScenario and thePer owned by this StochImpOP.

@


1.24
log
@Stochastic Implosion
@
text
@a71 19
      // OptVar Look-Up functions.
      //-----------------------------------------------------------------------

      WitStScrapVar *   myStScrapVarFor   (WitPart *,      WitPeriod,
                                                           WitScenario *);
      WitStStockVar *   myStStockVarFor   (WitMaterial *,  WitPeriod,
                                                           WitScenario *);
      WitStExecVar *    myStExecVarFor    (WitOperation *, WitPeriod,
                                                           WitScenario *);
      WitStShipVar *    myStShipVarFor    (WitDemand *,    WitPeriod,
                                                           WitScenario *);
      WitStCumShipVar * myStCumShipVarFor (WitDemand *,    WitPeriod,
                                                           WitScenario *);
      WitStNonSubVar *  myStNonSubVarFor  (WitBomEntry *,  WitPeriod,
                                                           WitScenario *);
      WitStSubVar *     myStSubVarFor     (WitSubEntry *,  WitPeriod,
                                                           WitScenario *);

      //-----------------------------------------------------------------------
d94 5
a149 21
      //-----------------------------------------------------------------------
      // The StOptElMgrs owned by this StochImpOP.
      //
      // E.g., myStExecVarMgr_.myStOptElFor (theScenario, theOpn, thePer) is
      // the StExecVar for theScenario, theOpn, and thePer, or NULL, if there is
      // none.
      //-----------------------------------------------------------------------

      WitStOptElMgr <WitPart,      WitStScrapVar> *    myStScrapVarMgr_;
      WitStOptElMgr <WitMaterial,  WitStStockVar> *    myStStockVarMgr_;
      WitStOptElMgr <WitOperation, WitStExecVar> *     myStExecVarMgr_;
      WitStOptElMgr <WitDemand,    WitStShipVar> *     myStShipVarMgr_;
      WitStOptElMgr <WitDemand,    WitStCumShipVar> *  myStCumShipVarMgr_;
      WitStOptElMgr <WitBomEntry,  WitStNonSubVar> *   myStNonSubVarMgr_;
      WitStOptElMgr <WitSubEntry,  WitStSubVar> *      myStSubVarMgr_;
      WitStOptElMgr <WitPart,      WitStResCon> *      myStResConMgr_;
      WitStOptElMgr <WitDemand,    WitStShipCon> *     myStShipConMgr_;
      WitStOptElMgr <WitBomEntry,  WitStSubCon> *      myStSubConMgr_;

      //-----------------------------------------------------------------------

@


1.23
log
@Stochastic Implosion
@
text
@d20 1
d144 10
@


1.22
log
@Stochastic Implosion
@
text
@d84 4
d97 2
a128 6
         // The following are formats used in printing an OptProbEl.
         //
      inline static const char * itemFormat    ();
      inline static const char * periodDFormat ();
      inline static const char * periodSFormat ();

d166 2
d170 1
@


1.21
log
@Stochastic Implosion
@
text
@d76 2
d162 1
@


1.20
log
@Stochastic Implosion
@
text
@d74 8
a81 4
      WitStScrapVar * myStScrapVarFor (WitPart *,      WitPeriod,
                                                       WitScenario *);
      WitStExecVar  * myStExecVarFor  (WitOperation *, WitPeriod,
                                                       WitScenario *);
d90 1
d159 6
a164 3
      WitStOptElMgr <WitPart,      WitStScrapVar> * myStScrapVarMgr_;
      WitStOptElMgr <WitOperation, WitStExecVar> *  myStExecVarMgr_;
      WitStOptElMgr <WitPart,      WitStResCon> *   myStResConMgr_;
@


1.19
log
@Stochastic Implosion
@
text
@d93 1
@


1.18
log
@Stochastic Implosion
@
text
@d42 1
a42 1
      WitStochImpOP (WitStochImploder *);
d127 1
a127 1
      WitStochImploder * const myStochImploder_;
d129 1
a129 1
         // The StochImploder that owns this StochImpOP.
@


1.17
log
@Stochastic Implosion
@
text
@d62 8
d80 8
@


1.16
log
@Stochastic Implosion
@
text
@d99 6
@


1.15
log
@Stochastic Implosion
@
text
@d63 9
a81 8
      accessFunc2 (
         const WitStOptElMgr <WitPart,      WitStScrapVar> *,
         myStScrapVarMgr)

      accessFunc2 (
         const WitStOptElMgr <WitOperation, WitStExecVar> *,
         myStExecVarMgr)

@


1.14
log
@Stochastic Implosion
@
text
@d66 2
a67 1
      accessFunc  (WitScenMgr *, myScenMgr)
d117 5
@


1.13
log
@Stochastic Implosion
@
text
@d69 10
a78 1
         const WitPtrSched <WitScenario, WitScenPer> &, myScenPerSched)
@


1.12
log
@Stochastic Implosion
@
text
@d108 1
a108 1
      // StOptElMgrs
d118 4
@


1.11
log
@Stochastic Implosion
@
text
@d117 1
@


1.10
log
@Stochastic Implosion
@
text
@d115 2
a116 1
      WitStOptElMgr <WitOperation, WitStExecVar> * myStExecVarMgr_;
@


1.9
log
@Stochastic Implosion
@
text
@a20 1
#include <StOptElMgr.h>
d110 1
a110 1
      // E.g., myStExecVarTable_.myStOptElFor (theScenario, theOpn, thePer) is
d115 1
a115 1
      WitStOptElMgr <WitOperation, WitStExecVar> myStExecVarTable_;
@


1.8
log
@Stochastic Implosion
@
text
@d21 1
a21 1
#include <StOptElTable.h>
d109 1
a109 1
      // StOptElTables
d116 1
a116 1
      WitStOptElTable <WitOperation, WitStExecVar> myStExecVarTable_;
@


1.7
log
@Stochastic Implosion
@
text
@d67 5
@


1.6
log
@Stochastic Implosion
@
text
@d20 1
d94 9
d105 4
@


1.5
log
@Stochastic Implosion
@
text
@a65 2
      accessFunc (WitStochImploder *, myStochImploder)

@


1.4
log
@Stochastic Implosion
@
text
@d59 1
a59 1
      // Access functions.
d63 1
a63 1
      // Other public member functions.
d66 2
@


1.3
log
@Stochastic Implosion
@
text
@d20 1
d92 6
@


1.2
log
@Stochastic Implosion
@
text
@d41 1
a41 1
      WitStochImpOP (WitProblem *);
d87 4
@


1.1
log
@Stochastic Implosion
@
text
@d15 2
d19 70
@

