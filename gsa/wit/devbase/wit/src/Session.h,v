head	1.29;
access;
symbols
	sce_5_01_20080919:1.24
	latest_sce_4_20_20060523:1.24.0.2
	sce_4_20_20060523:1.24
	latest_sce4_20_OSL:1.23.0.2
	sce_4_20_OSL:1.23
	sce_410_withVa:1.15
	sce_4_05_20040511:1.15
	sce_4_00_20040201:1.7
	nextGenBranch:1.6.0.2
	nextGenRoot:1.6
	sce_3_30_20030627:1.6
	EndRw-branch:1.5.0.4
	Root-of-EndRw:1.5
	rwToStl:1.5.0.2
	latest_sce_3_10_20010924:1.4.0.6
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.4.0.4
	sce_3_00_20010601:1.4
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.29
date	2011.09.29.18.22.29;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2011.09.28.23.50.12;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.09.28.18.32.28;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.09.24.00.28.38;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.08.30.20.18.11;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2006.05.02.17.34.13;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2005.11.01.18.29.12;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2005.10.28.22.28.08;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2005.10.21.22.23.34;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2005.10.19.19.21.17;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.18.20.56.22;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2005.09.15.19.58.21;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2005.09.13.19.31.57;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2005.09.08.21.16.37;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2004.03.12.15.09.24;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2004.03.11.16.36.18;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.02.27.21.00.29;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.02.26.20.40.26;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.02.17.20.23.47;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.02.14.00.45.35;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.11.21.30.55;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.10.23.57.45;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.01.21.05.05;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.02.22.18.49;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.09.19.52.36;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.48;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.27;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.57;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.30;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.30;	author wit;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Revised some comments.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef SessionH
#define SessionH

//------------------------------------------------------------------------------
// Header file: "Session.h"
//
// Contains the declaration of class Session.
//------------------------------------------------------------------------------

#include <Str.h>

//------------------------------------------------------------------------------
// Class Session
//
// WIT Session.
// Responsible for all non-API aspects of WIT.
// Life span: The life span of the owning WitRun.
// Implemented in Misc.C.
//------------------------------------------------------------------------------

class WitSession
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSession (WitApiMgr * theApiMgr);
         //
         // myApiMgr_ <-- theApiMgr.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSession ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc    (WitApiMgr *,  myApiMgr)
      accessFunc    (WitRun *,     myWitRun)
      accessNonNull (WitProblem *, myProblem)

      inline WitMsgFacility & myMsgFac () const
         {
         return * myMsgFacPtr_;
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void writeHeading (FILE * outFile);
         //
         // Writes a heading to outFile.

      void printHeading ();
         //
         // Issues a heading message.

      void activate ();
         //
         // Puts this session into a newly active state, i.e., one with a new
         // Problem.

      void deactivate ();
         //
         // Puts this session into an inactive state, i.e., one without a
         // Problem.

      inline bool active () const
         {
         return (myProblem_ != NULL);
         }

      void copyData (WitSession * srcSession);
         //
         // Copies the input state of srcSession into this Session.
         // No-op if srcSession is this Session.

      FILE * openFile (const char * fileName, const char * mode);
         //
         // Opens and returns a file with name filename in mode mode, with
         // error checking.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      static const char * currentTime ();
         //
         // Returns the current calendar time as a c-string.

      noCopyCtorAssign (WitSession);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      static const char * proprietaryStmt_;
         //
         // The proprietary statement for WIT.
         // The main purpose of this data member is to cause the WIT object
         // library file (e.g., libwit.a) to contain WIT's propretary statement
         // as a sequence of text characters. It is also used in file headings.

      WitApiMgr * const myApiMgr_;
         //
         // The ApiMgr that owns this Session.

      WitRun * const myWitRun_;
         //
         // The WitRun for this Session.

      WitMsgFacility * myMsgFacPtr_;
         //
         // Ptr to the MsgFacility owned by this Session.

      WitString exeTypeText_;
         //
         // Identifies exe_type used for compile.

      WitString startTime_;
         //
         // Calendar time when this Session is constructed as a String.

      WitProblem * myProblem_;
         //
         // The Problem owned by this Session, when it is initialized;
         // otherwise NULL.
   };

#endif
@


1.28
log
@Revised the source code proprietary statement.
@
text
@d122 3
@


1.27
log
@Revised the propietery statement in the object code and at run time.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.26
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d114 4
@


1.25
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d31 2
a32 94
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitSession (WitApiMgr * theApiMgr);
//
// myApiMgr_ <-- theApiMgr.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitSession ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc    (WitApiMgr *,  myApiMgr)
accessFunc    (WitRun *,     myWitRun)
accessNonNull (WitProblem *, myProblem)

inline WitMsgFacility & myMsgFac () const
{
return * myMsgFacPtr_;
}

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void writeHeading (FILE * outFile);
//
// Writes a heading to outFile.

void printHeading ();
//
// Issues a heading message.

void activate ();
//
// Puts this session into a newly active state, i.e., one with a new
// Problem.

void deactivate ();
//
// Puts this session into an inactive state, i.e., one without a
// Problem.

inline bool active () const
{
return (myProblem_ != NULL);
}

void copyData (WitSession * srcSession);
//
// Copies the input state of srcSession into this Session.
// No-op if srcSession is this Session.

FILE * openFile (const char * fileName, const char * mode);
//
// Opens and returns a file with name filename in mode mode, with
// error checking.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

static const char * currentTime ();
//
// Returns the current calendar time as a c-string.

noCopyCtorAssign (WitSession);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitApiMgr * const myApiMgr_;
//
// The ApiMgr that owns this Session.

WitRun * const myWitRun_;
//
// The WitRun for this Session.

WitMsgFacility * myMsgFacPtr_;
//
// Ptr to the MsgFacility owned by this Session.
d34 105
a138 13
WitString exeTypeText_;
//
// Identifies exe_type used for compile.

WitString startTime_;
//
// Calendar time when this Session is constructed as a String.

WitProblem * myProblem_;
//
// The Problem owned by this Session, when it is initialized;
// otherwise NULL.
};
@


1.24
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d31 94
a124 2
   {
   public:
d126 13
a138 105
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSession (WitApiMgr * theApiMgr);
         //
         // myApiMgr_ <-- theApiMgr.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSession ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc    (WitApiMgr *,  myApiMgr)
      accessFunc    (WitRun *,     myWitRun)
      accessNonNull (WitProblem *, myProblem)

      inline WitMsgFacility & myMsgFac () const
         {
         return * myMsgFacPtr_;
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void writeHeading (FILE * outFile);
         //
         // Writes a heading to outFile.

      void printHeading ();
         //
         // Issues a heading message.

      void activate ();
         //
         // Puts this session into a newly active state, i.e., one with a new
         // Problem.

      void deactivate ();
         //
         // Puts this session into an inactive state, i.e., one without a
         // Problem.

      inline bool active () const
         {
         return (myProblem_ != NULL);
         }

      void copyData (WitSession * srcSession);
         //
         // Copies the input state of srcSession into this Session.
         // No-op if srcSession is this Session.

      FILE * openFile (const char * fileName, const char * mode);
         //
         // Opens and returns a file with name filename in mode mode, with
         // error checking.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      static const char * currentTime ();
         //
         // Returns the current calendar time as a c-string.

      noCopyCtorAssign (WitSession);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitApiMgr * const myApiMgr_;
         //
         // The ApiMgr that owns this Session.

      WitRun * const myWitRun_;
         //
         // The WitRun for this Session.

      WitMsgFacility * myMsgFacPtr_;
         //
         // Ptr to the MsgFacility owned by this Session.

      WitString exeTypeText_;
         //
         // Identifies exe_type used for compile.

      WitString startTime_;
         //
         // Calendar time when this Session is constructed as a String.

      WitProblem * myProblem_;
         //
         // The Problem owned by this Session, when it is initialized;
         // otherwise NULL.
   };
@


1.23
log
@Corrected a declaration.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.22
log
@[error recovery]
@
text
@d93 1
a93 1
      FILE * openFile (const char * fileName, const WitString & mode);
@


1.21
log
@[error recovery]
@
text
@a97 5
      void recordError ();
         //
         // Records the fact that the current API function is being aborted for
         // a severe or fatal error.

@


1.20
log
@Minor update.
@
text
@d98 5
@


1.19
log
@Made WIT's use of errno relatively thread-safe.
@
text
@d104 4
d132 1
a132 1
         // Calendar time when this Session is constructed.
@


1.18
log
@[multi-thread]
@
text
@d93 1
a93 1
      FILE * openFile (const WitString & fileName, const WitString & mode);
@


1.17
log
@[multi-thread]
@
text
@a64 12
      void becomesCurrent ();
         //
         // Makes this Session current.

      void becomesUncurrent ();
         //
         // Makes this Session no longer current.

      static WitSession * curSession ();
         //
         // Returns the current session, which must exist.

a109 5
      static WitSession * curSession_;
         //
         // The Session for the current WitRun (the WitRun of the current API
         // function call).
                          
@


1.16
log
@[multi-thread]
@
text
@d105 5
@


1.15
log
@Double Precision.
@
text
@d90 5
@


1.14
log
@Double Precision.
@
text
@d65 12
d112 5
@


1.13
log
@Double Precision.
@
text
@a77 4
//    void deactivate ();
         //
         // Puts this session into an inactive state, i.e., one with no Problem.

@


1.12
log
@Double Precision.
@
text
@d78 1
a78 1
      void deactivate ();
@


1.11
log
@Continued double precision.
@
text
@a55 5
      inline static bool doubleMode ()
         {
         return doubleMode_;
         }

a72 2
      void setDoubleMode (bool);

a122 5

      static bool doubleMode_;
         //
         // If false, then WIT is in single precision mode in all WitRuns.
         // If true,  then WIT is in double precision mode in all WitRuns.
@


1.10
log
@Continued double precision.
@
text
@d56 1
a56 1
      inline static bool doublePrecision ()
d58 1
a58 1
         return doublePrecision_;
d78 1
a78 1
      void setDoublePrecision (bool);
d131 1
a131 1
      static bool doublePrecision_;
@


1.9
log
@Continued double precision.
@
text
@a53 1
      accessFunc    (bool,         doublePrecision)
d56 5
d133 1
a134 1
         // If false, then WIT is in single precision mode in all WitRuns.
@


1.8
log
@Continued double precision.
@
text
@d81 4
@


1.7
log
@Continued implementation of PIP.
@
text
@d52 4
a55 2
      accessFunc (WitApiMgr *, myApiMgr)
      accessFunc (WitRun *,    myWitRun)
d74 2
a85 7
      inline WitProblem * myProblem () const
         {
         witAssert (active ());

         return myProblem_;
         }

d122 5
@


1.6
log
@Internal changes.
@
text
@d30 1
a30 1
class WitSession: public WitUtil
@


1.5
log
@Continued implementation of single-source.
@
text
@d77 1
a77 1
      inline WitBoolean active () const
@


1.4
log
@Refactoring for selection splitting.
@
text
@d19 1
a19 1
#include <Util.h>
d118 1
a118 1
      WitString & exeTypeText_;
d122 1
a122 1
      WitString & startTime_;
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d100 1
a100 3
      copyCtorAndAssignment (WitSession);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d30 1
a30 1
class WitSession
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
