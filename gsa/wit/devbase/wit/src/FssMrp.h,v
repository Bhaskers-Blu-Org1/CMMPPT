head	1.28;
access;
symbols
	sce_5_01_20080919:1.25
	latest_sce_4_20_20060523:1.16.0.2
	sce_4_20_20060523:1.16
	latest_sce4_20_OSL:1.15.0.2
	sce_4_20_OSL:1.15
	sce_410_withVa:1.14
	sce_4_05_20040511:1.13
	sce_4_00_20040201:1.9
	nextGenBranch:1.9.0.2
	nextGenRoot:1.9
	sce_3_30_20030627:1.8
	EndRw-branch:1.8.0.4
	Root-of-EndRw:1.8
	rwToStl:1.8.0.2
	latest_sce_3_10_20010924:1.4.0.6
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.4.0.4
	sce_3_00_20010601:1.4
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.28
date	2011.09.28.23.49.23;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.09.24.00.27.42;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.08.30.20.17.31;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.11.14.17.18.54;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.06.08.18.26.08;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.05.14.16.18.38;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.05.11.20.43.55;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.02.28.20.04.55;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.02.27.19.59.31;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.02.10.00.08.13;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.02.08.22.47.34;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.02.08.00.14.25;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.02.17.33.58;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.09.30.21.57.55;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.02.03.21.20.28;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.03.24.22.21.30;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.03.23.19.14.23;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.05.22.19.58;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.03.03.19.07.27;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.07.10.22.58.16;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.03.22.35.18;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.03.16.01.48;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.29.14.32.39;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.08.19.21.50;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.40;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.25.19.17.44;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.50;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.22;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.22;	author wit;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef FssMrpH
#define FssMrpH

//------------------------------------------------------------------------------
// Header file: "FssMrp.h"
//
// Contains the declaration of class FssMrpExp.
//------------------------------------------------------------------------------

#include <MrpExp.h>

//------------------------------------------------------------------------------
// class FssMrpExp.
//
// Responsible for performing MRP explosion for FSS.
// Implemented in FSS.C.
//------------------------------------------------------------------------------

class WitFssMrpExp: public WitMrpExp
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitFssMrpExp (
            WitProblem *,
            WitFSS *,
            bool &                               uploadingSolnArg,
            WitSchedule <WitOperation, double> & fssExecVolArg,
            WitSchedule <WitSubEntry,  double> & fssSubVolArg);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitFssMrpExp ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitFssMrpExp);

      virtual double   supplyVol (WitPart      *, WitPeriod);
      virtual double   demandVol (WitPart      *, WitPeriod);
      virtual double & execVol   (WitOperation *, WitPeriod);
      virtual double & subVol    (WitSubEntry  *, WitPeriod);

      virtual void finishDerived ();

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitFSS * const myFSS_;
         //
         // The FSS that uses this FssMrpExp.

      bool & uploadingSoln_;
         //
         // True, iff the FSS subsystem is currently uploading the FSS solution.

      //------------------------------------------------------------------------
      // References to FSS solution Schedules.
      //------------------------------------------------------------------------

      WitSchedule <WitOperation, double> & fssExecVol_;
      WitSchedule <WitSubEntry,  double> & fssSubVol_;
   };

#endif
@


1.27
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 6
a6 1
//------------------------------------------------------------------------------
d8 1
a8 4
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential
d10 4
a13 1
//------------------------------------------------------------------------------
@


1.26
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d29 2
a30 2
{
public:
d32 3
a34 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d36 6
a41 6
WitFssMrpExp (
WitProblem *,
WitFSS *,
bool &                               uploadingSolnArg,
WitSchedule <WitOperation, double> & fssExecVolArg,
WitSchedule <WitSubEntry,  double> & fssSubVolArg);
d43 3
a45 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d47 1
a47 1
virtual ~WitFssMrpExp ();
d49 1
a49 1
private:
d51 3
a53 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d55 1
a55 1
noCopyCtorAssign (WitFssMrpExp);
d57 4
a60 4
virtual double   supplyVol (WitPart      *, WitPeriod);
virtual double   demandVol (WitPart      *, WitPeriod);
virtual double & execVol   (WitOperation *, WitPeriod);
virtual double & subVol    (WitSubEntry  *, WitPeriod);
d62 1
a62 1
virtual void finishDerived ();
d64 3
a66 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d68 7
a74 3
WitFSS * const myFSS_;
//
// The FSS that uses this FssMrpExp.
d76 3
a78 3
bool & uploadingSoln_;
//
// True, iff the FSS subsystem is currently uploading the FSS solution.
d80 3
a82 7
//------------------------------------------------------------------------
// References to FSS solution Schedules.
//------------------------------------------------------------------------

WitSchedule <WitOperation, double> & fssExecVol_;
WitSchedule <WitSubEntry,  double> & fssSubVol_;
};
@


1.25
log
@Stochastic Implosion
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d29 2
a30 2
   {
   public:
d32 3
a34 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d36 6
a41 6
      WitFssMrpExp (
            WitProblem *,
            WitFSS *,
            bool &                               uploadingSolnArg,
            WitSchedule <WitOperation, double> & fssExecVolArg,
            WitSchedule <WitSubEntry,  double> & fssSubVolArg);
d43 3
a45 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d47 1
a47 1
      virtual ~WitFssMrpExp ();
d49 1
a49 1
   private:
d51 3
a53 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d55 1
a55 1
      noCopyCtorAssign (WitFssMrpExp);
d57 4
a60 4
      virtual double   supplyVol (WitPart      *, WitPeriod);
      virtual double   demandVol (WitPart      *, WitPeriod);
      virtual double & execVol   (WitOperation *, WitPeriod);
      virtual double & subVol    (WitSubEntry  *, WitPeriod);
d62 1
a62 1
      virtual void finishDerived ();
d64 3
a66 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d68 3
a70 3
      WitFSS * const myFSS_;
         //
         // The FSS that uses this FssMrpExp.
d72 3
a74 7
      bool & uploadingSoln_;
         //
         // True, iff the FSS subsystem is currently uploading the FSS solution.

      //------------------------------------------------------------------------
      // References to FSS solution Schedules.
      //------------------------------------------------------------------------
d76 7
a82 3
      WitSchedule <WitOperation, double> & fssExecVol_;
      WitSchedule <WitSubEntry,  double> & fssSubVol_;
   };
@


1.24
log
@Stochastic Implosion
@
text
@d39 3
a41 3
            WitRefMap <WitPart,      WitDblFlexVec> & focShortageVolRef,
            WitRefMap <WitOperation, WitDblFlexVec> & fssExecVolRef,
            WitRefMap <WitSubEntry,  WitDblFlexVec> & fssSubVolRef);
d72 4
d77 1
a77 1
      // References to Component data.
d80 2
a81 3
      WitRefMap <WitPart,      WitDblFlexVec> & focShortageVol_;
      WitRefMap <WitOperation, WitDblFlexVec> & fssExecVol_;
      WitRefMap <WitSubEntry,  WitDblFlexVec> & fssSubVol_;
@


1.23
log
@Stochastic Implosion
@
text
@d39 3
a41 3
            WitRefMap <WitPart,      WitDblFlexVec> & focShortageVolArg,
            WitRefMap <WitOperation, WitDblFlexVec> & fssExecVolArg,
            WitRefMap <WitSubEntry,  WitDblFlexVec> & fssSubVolArg);
@


1.22
log
@Stochastic Implosion
@
text
@d36 6
a41 1
      WitFssMrpExp (WitProblem *, WitFSS *);
d71 8
@


1.21
log
@[disallowed backlog]
@
text
@d52 4
a55 4
      virtual double          supplyVol (WitPart *, WitPeriod);
      virtual double          demandVol (WitPart *, WitPeriod);
      virtual WitDblFlexVec & execVol   (WitOperation *);
      virtual WitDblFlexVec & subVol    (WitSubEntry *);
@


1.20
log
@Rescinded all changed made since 1/31/07.
@
text
@a43 10
      //------------------------------------------------------------------------
      // Functions for receiving data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      //------------------------------------------------------------------------

      static void receiveDMPs (WitDblFlexVec      WitPart::* focShortageVolArg);
      static void receiveDMPs (WitDblFlexVec WitOperation::* fssExecVolArg);
      static void receiveDMPs (WitDblFlexVec  WitSubEntry::* fssSubVolArg);

a62 15
      //------------------------------------------------------------------------
      // Data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      // E.g., theOpn->*fssExecVol_ == theOpn->fssExecVol_.
      //------------------------------------------------------------------------

      static WitDblFlexVec      WitPart::* focShortageVol_;
      static WitDblFlexVec WitOperation::* fssExecVol_;
      static WitDblFlexVec  WitSubEntry::* fssSubVol_;

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

@


1.19
log
@[disallowed backlog]
@
text
@d44 10
d80 3
a82 1
      static WitDblFlexVec WitSubEntry::* fssSubVol_;
@


1.18
log
@[disallowed backlog]
@
text
@a43 8
      //------------------------------------------------------------------------
      // Functions for receiving data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      //------------------------------------------------------------------------

      static void receiveDMPs (WitDblFlexVec WitSubEntry::* fssSubVolArg);

@


1.17
log
@[disallowed backlog]
@
text
@d50 1
a50 2
      static void receiveDMPs (WitDblFlexVec WitOperation::* fssExecVolArg);
      static void receiveDMPs (WitDblFlexVec  WitSubEntry::* fssSubVolArg);
d78 1
a78 2
      static WitDblFlexVec WitOperation::* fssExecVol_;
      static WitDblFlexVec  WitSubEntry::* fssSubVol_;
@


1.16
log
@Updated the copyright date on all source files.
@
text
@a49 1
      static void receiveDMPs (WitDblFlexVec      WitPart::* focShortageVolArg);
a78 1
      static WitDblFlexVec      WitPart::* focShortageVol_;
@


1.15
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.14
log
@pegged Critical List.
@
text
@d36 1
a36 6
      WitFssMrpExp (
            WitProblem *,
            WitFSS *,
            const WitRefMap <WitPart,      WitDblFlexVec> & focShortageVolArg,
            const WitRefMap <WitOperation, WitDblFlexVec> & fssExecVolArg,
            const WitRefMap <WitSubEntry,  WitDblFlexVec> & fssSubVolArg);
d44 10
d74 4
a77 1
      // Mappings to data loaded in from Components.
d80 3
a82 3
      const WitRefMap <WitPart,      WitDblFlexVec> & focShortageVol_;
      const WitRefMap <WitOperation, WitDblFlexVec> & fssExecVol_;
      const WitRefMap <WitSubEntry,  WitDblFlexVec> & fssSubVol_;
@


1.13
log
@Double Precision.
@
text
@d39 3
a41 3
            WitRefMap <WitPart,      WitDblFlexVec> & focShortageVolArg,
            WitRefMap <WitOperation, WitDblFlexVec> & fssExecVolArg,
            WitRefMap <WitSubEntry,  WitDblFlexVec> & fssSubVolArg);
d72 3
a74 3
      WitRefMap <WitPart,      WitDblFlexVec> & focShortageVol_;
      WitRefMap <WitOperation, WitDblFlexVec> & fssExecVol_;
      WitRefMap <WitSubEntry,  WitDblFlexVec> & fssSubVol_;
@


1.12
log
@Double Precision.
@
text
@d39 3
a41 3
            WitRefMap <WitPart,      WitFlexVec <double> > & focShortageVolArg,
            WitRefMap <WitOperation, WitFlexVec <double> > & fssExecVolArg,
            WitRefMap <WitSubEntry,  WitFlexVec <double> > & fssSubVolArg);
d57 4
a60 4
      virtual double                supplyVol (WitPart *, WitPeriod);
      virtual double                demandVol (WitPart *, WitPeriod);
      virtual WitFlexVec <double> & execVol   (WitOperation *);
      virtual WitFlexVec <double> & subVol    (WitSubEntry *);
d72 3
a74 3
      WitRefMap <WitPart,      WitFlexVec <double> > & focShortageVol_;
      WitRefMap <WitOperation, WitFlexVec <double> > & fssExecVol_;
      WitRefMap <WitSubEntry,  WitFlexVec <double> > & fssSubVol_;
@


1.11
log
@Double Precision.
@
text
@d39 3
a41 3
            WitRefMap <WitPart,      WitRealVec> & focShortageVolArg,
            WitRefMap <WitOperation, WitRealVec> & fssExecVolArg,
            WitRefMap <WitSubEntry,  WitRealVec> & fssSubVolArg);
d57 4
a60 4
      virtual double       supplyVol (WitPart *, WitPeriod);
      virtual double       demandVol (WitPart *, WitPeriod);
      virtual WitRealVec & execVol   (WitOperation *);
      virtual WitRealVec & subVol    (WitSubEntry *);
d72 3
a74 3
      WitRefMap <WitPart,      WitRealVec> & focShortageVol_;
      WitRefMap <WitOperation, WitRealVec> & fssExecVol_;
      WitRefMap <WitSubEntry,  WitRealVec> & fssSubVol_;
@


1.10
log
@Double Precision.
@
text
@d39 3
a41 3
            WitRefMap <WitPart,      WitRealVec> &          focShortageVolArg,
            WitRefMap <WitOperation, WitFlexVec <float> > & fssExecVolArg,
            WitRefMap <WitSubEntry,  WitFlexVec <float> > & fssSubVolArg);
d57 4
a60 4
      virtual double  supplyVol (WitPart *,      WitPeriod);
      virtual double  demandVol (WitPart *,      WitPeriod);
      virtual float & execVol   (WitOperation *, WitPeriod);
      virtual float & subVol    (WitSubEntry *,  WitPeriod);
d72 3
a74 3
      WitRefMap <WitPart,      WitRealVec> &          focShortageVol_;
      WitRefMap <WitOperation, WitFlexVec <float> > & fssExecVol_;
      WitRefMap <WitSubEntry,  WitFlexVec <float> > & fssSubVol_;
@


1.9
log
@Added some optional warnings on Linux.
@
text
@d39 1
a39 1
            WitRefMap <WitPart,      WitFlexVec <float> > & focShortageVolArg,
d72 1
a72 1
      WitRefMap <WitPart,      WitFlexVec <float> > & focShortageVol_;
@


1.8
log
@Continued implementation of single-source.
@
text
@d47 1
a47 1
      ~WitFssMrpExp ();
@


1.7
log
@Continued implementation of single-source.
@
text
@d37 5
a41 6
            WitProblem * theProblem,
            WitFSS *     theFSS,
            WitAccFlag * theAccFlag);
         //
         // Constructs an FssMrpExp for theProblem and theFSS.
         // myAccFlag_ <-- theAccFlag.
a54 12
      //------------------------------------------------------------------------
      // Component data access functions.
      //------------------------------------------------------------------------

      refAccess (WitPart,      WitFlexVec <float>, focShortageVol)
      refAccess (WitOperation, WitFlexVec <float>, fssExecVol)
      refAccess (WitSubEntry,  WitFlexVec <float>, fssSubVol)

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

d68 12
a82 4

      WitAccFlag * myAccFlag_;
         //
         // Ptr to myFSS_->myAccFlag_.
@


1.6
log
@Continued implementation of single-source.
@
text
@d37 6
a42 4
            WitProblem *,
            WitFSS *,
            WitSchedule <WitOperation, float> & fssExecVolRef,
            WitSchedule <WitSubEntry,  float> & fssSubVolRef);
d57 8
d70 4
a73 5
      virtual void    initDerived ();
      virtual double  supplyVol   (WitPart *,      WitPeriod);
      virtual double  demandVol   (WitPart *,      WitPeriod);
      virtual float & execVol     (WitOperation *, WitPeriod);
      virtual float & subVol      (WitSubEntry *,  WitPeriod);
a80 11
      //------------------------------------------------------------------------
      // Result data.
      //------------------------------------------------------------------------

      WitSchedule <WitOperation, float> & fssExecVol_;
      WitSchedule <WitSubEntry,  float> & fssSubVol_;

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

d84 4
@


1.5
log
@Preliminary work on single source.
@
text
@d37 4
a40 6
            WitProblem * theProblem,
            WitFSS *     theFSS,
            WitAccFlag * theAccFlag);
         //
         // Constructs an FssMrpExp for theProblem and theFSS.
         // myAccFlag_ <-- theAccFlag.
a54 8
      // Component data access functions.
      //------------------------------------------------------------------------

      refAccess (WitPart,      WitFlexVec <float>, focShortageVol)
      refAccess (WitOperation, WitFlexVec <float>, fssExecVol)
      refAccess (WitSubEntry,  WitFlexVec <float>, fssSubVol)

      //------------------------------------------------------------------------
d60 5
a64 4
      virtual double  supplyVol (WitPart *,      WitPeriod);
      virtual double  demandVol (WitPart *,      WitPeriod);
      virtual float & execVol   (WitOperation *, WitPeriod);
      virtual float & subVol    (WitSubEntry *,  WitPeriod);
d72 11
a85 4

      WitAccFlag * myAccFlag_;
         //
         // Ptr to myFSS_->myAccFlag_.
@


1.4
log
@Refactoring for selection splitting.
@
text
@d60 3
a62 3
      refAccess (WitPart,      WitFlexVec (float), focShortageVol)
      refAccess (WitOperation, WitFlexVec (float), fssExecVol)
      refAccess (WitSubEntry,  WitFlexVec (float), fssSubVol)
@


1.3
log
@Changed some more of the FSS and MRP stuff from float to double to fix a
   numerical problem.
@
text
@d68 1
a68 3
      copyCtorAndAssignment (WitFssMrpExp);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d72 4
a75 7
      virtual float supplyVol (WitPart * thePart, WitPeriod thePer);

      virtual float demandVol (WitPart *, WitPeriod);

      virtual float & execVol (WitOperation *, WitPeriod);

      virtual float & subVol (WitSubEntry *, WitPeriod);
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
