head	1.9;
access;
symbols
	sce_5_01_20080919:1.5
	latest_sce_4_20_20060523:1.5.0.2
	sce_4_20_20060523:1.5
	latest_sce4_20_OSL:1.4.0.2
	sce_4_20_OSL:1.4;
locks; strict;
comment	@ * @;


1.9
date	2011.09.28.23.50.06;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.09.24.00.28.31;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.08.30.20.18.06;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.12.21.20.35.47;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.02.17.34.12;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.21.14.53.00;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.20.21.47.58;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.08.21.16.37;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.08.19.29.45;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef SaeMgrH
#define SaeMgrH

//------------------------------------------------------------------------------
// Header file: "SaeMgr.h"
//
// Contains the declaration of class SaeMgr.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class SaeMgr
//
// "Stand-Alone Execution Manager"
// This class has primary responsibility for performing the actions of the WIT
// stand-alone executable.
//------------------------------------------------------------------------------

class WitSaeMgr
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      static void execute (WitRun * theWitRun, int argc, char * argv[]);
         //
         // Uses theWitRun to perform the main actions of the WIT stand-alone
         // executable.
         // argc and argv are to be passed in from the main program.

      inline static bool standAloneMode ()
         {
         return standAloneMode_;
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSaeMgr (WitRun *, int argc, char * argv[]);
         //
         // argc and argv are to be passed in from the main program.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSaeMgr ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      void execute ();
         //
         // Performs main actions of the WIT stand-alone executable.

      void setUp ();
         //
         // Sets up WIT for a stand-alone run.

      void setUpMsg ();
         //
         // Sets up the message facility.

      void readInput ();
         //
         // Reads input for the problem and performs related tasks.

      noCopyCtorAssign (WitSaeMgr);

      //------------------------------------------------------------------------
      // Parameter value wrapper functions.
      //------------------------------------------------------------------------

      inline const WitString & stringParamVal  (const char *);
      inline const char *      cStringParamVal (const char *);
      inline int               intParamVal     (const char *);
      inline const WitString & choiceParamVal  (const char *);
      inline bool              boolParamVal    (const char *);

      //------------------------------------------------------------------------

      void preprocess ();
         //
         // Performs preprocessing and related tasks.

      void performAction ();
         //
         // Performs the action indicated by the "action" control paramater.

      void printMrp ();
         //
         // Prints the results of MRP.

      void printImplosion ();
         //
         // Prints the results of implosion.

      void doFss ();
         //
         // Does FSS for stand-alone purposes.

      void makeVolServObj ();
         //
         // Turns the objective function into a volume serviceability objective.

      void clearObj ();
         //
         // Sets the objective to 0.

      void compVolServ ();
         //
         // Computes and displays the volume serviceability objective for the
         // current implosion solution.

      bool tempParIsSet (int);
         //
         // Wrapper for myProblem ()->myGlobalComp ().

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessNonNull (WitProblem *, myProblem)

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRun * const myWitRun_;
         //
         // The WitRun for this SaeMgr.

      WitSession * const mySession_;
         //
         // The Session for this SaeMgr.

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFac for this SaeMgr.

      WitTimer * myTimer_;
         //
         // The Timer owned by this SaeMgr.

      WitParamMgr * myParamMgr_;
         //
         // The ParamMgr owned by this SaeMgr.

      WitProblem * myProblem_;
         //
         // The Problem for this SaeMgr when one exists; otherwise NULL.

      static bool standAloneMode_;
         //
         // True, iff WIT is being used in standalone executable mode.
   };

#endif
@


1.8
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.7
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d30 17
a46 2
{
public:
d48 1
a48 3
//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------
d50 7
a56 20
static void execute (WitRun * theWitRun, int argc, char * argv[]);
//
// Uses theWitRun to perform the main actions of the WIT stand-alone
// executable.
// argc and argv are to be passed in from the main program.

inline static bool standAloneMode ()
{
return standAloneMode_;
}

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d58 3
a60 3
WitSaeMgr (WitRun *, int argc, char * argv[]);
//
// argc and argv are to be passed in from the main program.
d62 3
a64 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d66 1
a66 1
~WitSaeMgr ();
d68 3
a70 3
//------------------------------------------------------------------------
// Other private member functions.
//------------------------------------------------------------------------
d72 3
a74 3
void execute ();
//
// Performs main actions of the WIT stand-alone executable.
d76 3
a78 3
void setUp ();
//
// Sets up WIT for a stand-alone run.
d80 3
a82 3
void setUpMsg ();
//
// Sets up the message facility.
d84 3
a86 3
void readInput ();
//
// Reads input for the problem and performs related tasks.
d88 1
a88 1
noCopyCtorAssign (WitSaeMgr);
d90 3
a92 3
//------------------------------------------------------------------------
// Parameter value wrapper functions.
//------------------------------------------------------------------------
d94 5
a98 5
inline const WitString & stringParamVal  (const char *);
inline const char *      cStringParamVal (const char *);
inline int               intParamVal     (const char *);
inline const WitString & choiceParamVal  (const char *);
inline bool              boolParamVal    (const char *);
d100 1
a100 1
//------------------------------------------------------------------------
d102 3
a104 3
void preprocess ();
//
// Performs preprocessing and related tasks.
d106 3
a108 3
void performAction ();
//
// Performs the action indicated by the "action" control paramater.
d110 3
a112 3
void printMrp ();
//
// Prints the results of MRP.
d114 3
a116 3
void printImplosion ();
//
// Prints the results of implosion.
d118 3
a120 3
void doFss ();
//
// Does FSS for stand-alone purposes.
d122 3
a124 3
void makeVolServObj ();
//
// Turns the objective function into a volume serviceability objective.
d126 3
a128 3
void clearObj ();
//
// Sets the objective to 0.
d130 4
a133 4
void compVolServ ();
//
// Computes and displays the volume serviceability objective for the
// current implosion solution.
d135 3
a137 3
bool tempParIsSet (int);
//
// Wrapper for myProblem ()->myGlobalComp ().
d139 3
a141 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d143 1
a143 1
accessNonNull (WitProblem *, myProblem)
d145 3
a147 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d149 3
a151 3
WitRun * const myWitRun_;
//
// The WitRun for this SaeMgr.
d153 3
a155 3
WitSession * const mySession_;
//
// The Session for this SaeMgr.
d157 3
a159 3
WitMsgFacility & myMsgFac_;
//
// The MsgFac for this SaeMgr.
d161 3
a163 3
WitTimer * myTimer_;
//
// The Timer owned by this SaeMgr.
d165 3
a167 3
WitParamMgr * myParamMgr_;
//
// The ParamMgr owned by this SaeMgr.
d169 3
a171 3
WitProblem * myProblem_;
//
// The Problem for this SaeMgr when one exists; otherwise NULL.
d173 4
a176 4
static bool standAloneMode_;
//
// True, iff WIT is being used in standalone executable mode.
};
@


1.6
log
@Removed some references to objective #1.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d30 2
a31 2
   {
   public:
d33 3
a35 3
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------
d37 20
a56 5
      static void execute (WitRun * theWitRun, int argc, char * argv[]);
         //
         // Uses theWitRun to perform the main actions of the WIT stand-alone
         // executable.
         // argc and argv are to be passed in from the main program.
d58 3
a60 4
      inline static bool standAloneMode ()
         {
         return standAloneMode_;
         }
d62 3
a64 1
   private:
d66 1
a66 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d68 3
a70 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d72 3
a74 3
      WitSaeMgr (WitRun *, int argc, char * argv[]);
         //
         // argc and argv are to be passed in from the main program.
d76 3
a78 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d80 3
a82 1
      ~WitSaeMgr ();
d84 3
a86 3
      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------
d88 1
a88 3
      void execute ();
         //
         // Performs main actions of the WIT stand-alone executable.
d90 3
a92 3
      void setUp ();
         //
         // Sets up WIT for a stand-alone run.
d94 5
a98 3
      void setUpMsg ();
         //
         // Sets up the message facility.
d100 1
a100 3
      void readInput ();
         //
         // Reads input for the problem and performs related tasks.
d102 3
a104 1
      noCopyCtorAssign (WitSaeMgr);
d106 3
a108 3
      //------------------------------------------------------------------------
      // Parameter value wrapper functions.
      //------------------------------------------------------------------------
d110 3
a112 5
      inline const WitString & stringParamVal  (const char *);
      inline const char *      cStringParamVal (const char *);
      inline int               intParamVal     (const char *);
      inline const WitString & choiceParamVal  (const char *);
      inline bool              boolParamVal    (const char *);
d114 3
a116 1
      //------------------------------------------------------------------------
d118 3
a120 3
      void preprocess ();
         //
         // Performs preprocessing and related tasks.
d122 3
a124 3
      void performAction ();
         //
         // Performs the action indicated by the "action" control paramater.
d126 3
a128 3
      void printMrp ();
         //
         // Prints the results of MRP.
d130 4
a133 3
      void printImplosion ();
         //
         // Prints the results of implosion.
d135 3
a137 3
      void doFss ();
         //
         // Does FSS for stand-alone purposes.
d139 3
a141 3
      void makeVolServObj ();
         //
         // Turns the objective function into a volume serviceability objective.
d143 1
a143 3
      void clearObj ();
         //
         // Sets the objective to 0.
d145 3
a147 4
      void compVolServ ();
         //
         // Computes and displays the volume serviceability objective for the
         // current implosion solution.
d149 3
a151 3
      bool tempParIsSet (int);
         //
         // Wrapper for myProblem ()->myGlobalComp ().
d153 3
a155 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d157 3
a159 1
      accessNonNull (WitProblem *, myProblem)
d161 3
a163 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d165 3
a167 3
      WitRun * const myWitRun_;
         //
         // The WitRun for this SaeMgr.
d169 3
a171 3
      WitSession * const mySession_;
         //
         // The Session for this SaeMgr.
d173 4
a176 20
      WitMsgFacility & myMsgFac_;
         //
         // The MsgFac for this SaeMgr.

      WitTimer * myTimer_;
         //
         // The Timer owned by this SaeMgr.

      WitParamMgr * myParamMgr_;
         //
         // The ParamMgr owned by this SaeMgr.

      WitProblem * myProblem_;
         //
         // The Problem for this SaeMgr when one exists; otherwise NULL.

      static bool standAloneMode_;
         //
         // True, iff WIT is being used in standalone executable mode.
   };
@


1.5
log
@Updated the copyright date on all source files.
@
text
@d126 1
a126 1
      void clearObj1 ();
d128 1
a128 1
         // Sets objective #1 to 0.
@


1.4
log
@Ran make depend.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.3
log
@[multi-thread]
@
text
@d34 21
d69 1
a69 1
      // Other public member functions.
a75 13
      inline static bool standAloneMode ()
         {
         return standAloneMode_;
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitSaeMgr);

d88 2
d175 1
a175 1
         // True if WIT is being used in standalone executable mode.
@


1.2
log
@[multi-thread]
@
text
@d55 5
d162 4
@


1.1
log
@[multi-thread]
@
text
@d19 1
a19 2
#include <Session.h>
#include <Problem.h>
d37 3
a39 1
      WitSaeMgr (WitRun *);
d51 1
a51 1
      void execute (int argc, char * argv[]);
a53 14
         // The arguments are to be the same as the arguments passed to the main
         // program.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitRun *, myWitRun)

      accessWrapper (WitProblem *,     myProblem,     mySession_)
      accessWrapper (WitMsgFacility &, myMsgFac,      mySession_)

      accessWrapper (WitCompMgr *,     myCompMgr,     myProblem ())
      accessWrapper (WitOptImploder *, myOptImploder, myProblem ())
d125 6
d142 4
d153 4
@

