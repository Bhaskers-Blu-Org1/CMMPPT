head	1.19;
access;
symbols
	sce_5_01_20080919:1.16
	latest_sce_4_20_20060523:1.16.0.2
	sce_4_20_20060523:1.16
	latest_sce4_20_OSL:1.15.0.2
	sce_4_20_OSL:1.15
	sce_410_withVa:1.15
	sce_4_05_20040511:1.15
	sce_4_00_20040201:1.15
	nextGenBranch:1.14.0.6
	nextGenRoot:1.14
	sce_3_30_20030627:1.14
	EndRw-branch:1.14.0.4
	Root-of-EndRw:1.14
	rwToStl:1.14.0.2
	latest_sce_3_10_20010924:1.10.0.2
	sce_3_10_20010924:1.10
	latest_sce_3_00_20010601:1.7.0.2
	sce_3_00_20010601:1.7
	latest_sce_2_31_20010308:1.6.0.2
	sce_2_31_20010308:1.6
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3;
locks; strict;
comment	@ * @;


1.19
date	2011.09.28.23.50.03;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.09.24.00.28.27;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.08.30.20.18.04;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.02.17.34.11;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.10.16.17.37.31;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.07.09.19.52.36;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.06.05.21.20.01;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.05.10.18.02.13;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.07.20.15.03;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.17.22.00.11;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.14.20.43.54;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.25.16.08.19;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.21.21.55.47;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.22.23.11.48;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.21.20.03.27;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.06.18.45.08;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.08.21.56.14;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.21.17.42.49;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.19.22.35.34;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ReqSchedH
#define ReqSchedH

//------------------------------------------------------------------------------
// Header file: "ReqSched.h"
//
// Contains the declaration of class ReqSched.
//------------------------------------------------------------------------------

#include <Part.h>
#include <Schedule.h>
#include <Mapping.h>

//------------------------------------------------------------------------------
// Class ReqSched
//
// The schedule of requirements for heuristic allocation.
//
// Implemented in HeurAll.C.
//------------------------------------------------------------------------------

class WitReqSched: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitReqSched (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitReqSched ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void addTo (WitPart * thePart, WitPeriod thePer, double qty);
         //
         // Adds qty to reqVol_ (thePart)[thePer].

      void clear ();
         //
         // Returns this ReqSched to its initial (all zero) state.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline double reqVol (WitPart * thePart, WitPeriod thePer)
         {
         return reqVol_ (thePart)[thePer];
         }

      inline WitPeriod firstPer (WitPart * thePart)
         {
         return firstPer_ (thePart);
         }
         
      inline WitPeriod lastPer (WitPart * thePart)
         {
         return lastPer_ (thePart);
         }
         
   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitReqSched);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDataRepos * myDataRepos_;
         //
         // The DataRepos owned by this ReqSched.

      WitSchedule <WitPart, double> reqVol_;
         //
         // The actual requirement schedule.

      WitMapping <WitPart, WitPeriod> firstPer_;
         //
         // firstPer_ (thePart) is the first period, thePer, in which 
         // reqVol_ (thePart)[thePer] > 0.0.

      WitMapping <WitPart, WitPeriod> lastPer_;
         //
         // lastPer_ (thePart) is the last period, thePer, in which 
         // reqVol_ (thePart)[thePer] > 0.0.
   };

#endif
@


1.18
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.17
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d32 2
a33 40
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitReqSched (WitProblem *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitReqSched ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void addTo (WitPart * thePart, WitPeriod thePer, double qty);
//
// Adds qty to reqVol_ (thePart)[thePer].

void clear ();
//
// Returns this ReqSched to its initial (all zero) state.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

inline double reqVol (WitPart * thePart, WitPeriod thePer)
{
return reqVol_ (thePart)[thePer];
}

inline WitPeriod firstPer (WitPart * thePart)
{
return firstPer_ (thePart);
}
d35 73
a107 35
inline WitPeriod lastPer (WitPart * thePart)
{
return lastPer_ (thePart);
}

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitReqSched);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitDataRepos * myDataRepos_;
//
// The DataRepos owned by this ReqSched.

WitSchedule <WitPart, double> reqVol_;
//
// The actual requirement schedule.

WitMapping <WitPart, WitPeriod> firstPer_;
//
// firstPer_ (thePart) is the first period, thePer, in which
// reqVol_ (thePart)[thePer] > 0.0.

WitMapping <WitPart, WitPeriod> lastPer_;
//
// lastPer_ (thePart) is the last period, thePer, in which
// reqVol_ (thePart)[thePer] > 0.0.
};
@


1.16
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d32 40
a71 2
   {
   public:
d73 35
a107 73
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitReqSched (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitReqSched ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void addTo (WitPart * thePart, WitPeriod thePer, double qty);
         //
         // Adds qty to reqVol_ (thePart)[thePer].

      void clear ();
         //
         // Returns this ReqSched to its initial (all zero) state.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline double reqVol (WitPart * thePart, WitPeriod thePer)
         {
         return reqVol_ (thePart)[thePer];
         }

      inline WitPeriod firstPer (WitPart * thePart)
         {
         return firstPer_ (thePart);
         }
         
      inline WitPeriod lastPer (WitPart * thePart)
         {
         return lastPer_ (thePart);
         }
         
   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitReqSched);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDataRepos * myDataRepos_;
         //
         // The DataRepos owned by this ReqSched.

      WitSchedule <WitPart, double> reqVol_;
         //
         // The actual requirement schedule.

      WitMapping <WitPart, WitPeriod> firstPer_;
         //
         // firstPer_ (thePart) is the first period, thePer, in which 
         // reqVol_ (thePart)[thePer] > 0.0.

      WitMapping <WitPart, WitPeriod> lastPer_;
         //
         // lastPer_ (thePart) is the last period, thePer, in which 
         // reqVol_ (thePart)[thePer] > 0.0.
   };
@


1.15
log
@Continued implementation of post-implosion pegging.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.14
log
@Continued implementation of single-source.
@
text
@d19 1
@


1.13
log
@Continued implementation of single-source.
@
text
@d89 1
a89 1
      WitDataRepos & myDataRepos_;
@


1.12
log
@Continued implementation of single source.
@
text
@d52 1
a52 1
         // Adds qty to reqVol_ (thePart, thePer).
d64 1
a64 1
         return reqVol_ (thePart, thePer);
d100 1
a100 1
         // reqVol_ (thePart, thePer) > 0.0.
d105 1
a105 1
         // reqVol_ (thePart, thePer) > 0.0.
@


1.11
log
@Continued preliminary work on single source.
@
text
@d38 1
a38 1
      WitReqSched (WitHeurAtor *);
d54 4
d89 1
a89 1
      WitHeurAtor * const myHeurAtor_;
d91 1
a91 1
         // The HeurAtor that owns this ReqSched.
@


1.10
log
@Implemented selection splitting speed-up by partial allocation reuse.
@
text
@d89 1
a89 1
      WitSchedule (WitPart, double) reqVol_;
d93 1
a93 1
      WitMapping (WitPart, WitPeriod) firstPer_;
d98 1
a98 1
      WitMapping (WitPart, WitPeriod) lastPer_;
@


1.9
log
@Created and used Archive template.
@
text
@a18 2
#include <ObjStack.h>
#include <Archive.h>
a53 4
      void clear ();
         //
         // Sets all requirements to 0.

a101 10

      WitArchive <double>    reqVolArch_;
      WitArchive <WitPeriod> flPerArch_;
         //
         // These Archives save and restore values of reqVol_, firstPer_, and
         // lastPer_.

      WitObjStack <double>    reqVolsToReset_;
      WitObjStack <WitPeriod> firstPersToReset_;
      WitObjStack <WitPeriod> lastPersToReset_;
@


1.8
log
@Initial implementation of pegging.
@
text
@d19 2
d52 1
a52 1
      void init (double qty);
d54 1
a54 2
         // Initializes requirements for attempting to commit qty units of
         // topPart to a shipment in topPer.
d56 1
a56 1
      void addTo (WitPart * thePart, WitPeriod thePer, double qty);
d58 1
a58 1
         // Adds qty to reqVol_ (thePart, thePer).
d108 10
@


1.7
log
@Continued implementation of selection splitting with the new design.
@
text
@d27 1
a27 1
// Implemented in HeurAllS.C.
d38 1
a38 1
      WitReqSched (WitHeurAllPerf *);
d90 1
a90 1
      WitHeurAllPerf * const myHeurAllPerf_;
d92 1
a92 1
         // The HeurAllPerf that owns this ReqSched.
@


1.6
log
@Refactoring for selection splitting.
@
text
@d38 1
a38 3
      WitReqSched (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.
d50 1
a50 1
      void init (WitPart * topPart, WitPeriod topPer, double qty);
d89 4
@


1.5
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d86 1
a86 3
      copyCtorAndAssignment (WitReqSched);
         //
         // Prevents unintentional copying and assignment.
@


1.4
log
@

Revised stand-alone FSS capabilties in development mode.
Modified some stock soft-lower bound controls.
Fixed bug: BOP entry productRate attribute could not be read.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.3
log
@Finished implementing stock reallocation.
@
text
@d26 2
@


1.2
log
@Continued implementation of stock reallocation.
@
text
@a104 5

      WitBoolean trackInterval_;
         //
         // TRUE, iff this ReqSched is to update the [firstPer_, lastPer_]
         // interval.
@


1.1
log
@Continued implementation of stock re-allocation.
@
text
@d57 1
a57 1
         // Adds qty to mySched_ (thePart, thePer).
d63 1
a63 1
      inline double operator () (WitPart * thePart, WitPeriod thePer)
d65 1
a65 1
         return mySched_ (thePart, thePer);
d92 1
a92 1
      WitSchedule (WitPart, double) mySched_;
d99 1
a99 1
         // mySched_ (thePart, thePer) > 0.0.
d104 1
a104 1
         // mySched_ (thePart, thePer) > 0.0.
@

