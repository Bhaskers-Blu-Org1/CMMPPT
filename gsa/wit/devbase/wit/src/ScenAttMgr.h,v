head	1.35;
access;
symbols
	sce_5_01_20080919:1.32;
locks; strict;
comment	@ * @;


1.35
date	2011.09.28.23.50.07;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2011.09.24.00.28.33;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.08.30.20.18.07;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.01.25.00.19.22;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.01.04.20.25.28;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2007.12.11.22.00.28;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.12.06.22.01.21;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2007.12.04.00.18.47;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2007.12.04.00.07.15;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.11.28.23.23.47;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.11.28.20.34.28;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.10.11.19.16.57;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.10.08.18.56.35;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.09.25.21.03.03;	author rjw;	state dead;
branches;
next	1.21;

1.21
date	2007.09.21.23.10.49;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.09.21.23.06.08;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.09.21.17.47.13;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.09.21.14.47.31;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.09.20.20.58.25;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.09.20.18.46.16;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.09.19.22.39.53;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.09.19.21.35.41;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.09.19.14.23.26;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.09.18.20.12.58;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.09.18.18.43.13;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.09.17.21.46.32;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.09.17.18.31.59;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.09.17.14.37.38;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.14.22.38.32;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.09.14.21.13.58;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.09.14.15.44.41;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.13.15.23.19;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.12.23.55.00;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.09.12.23.09.00;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.09.12.21.55.00;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.35
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ScenAttMgrH
#define ScenAttMgrH

//------------------------------------------------------------------------------
// Header file: "ScenAttMgr.h"
//
// Contains the declaration of class ScenAttMgr.
//------------------------------------------------------------------------------

#include <StochAssoc.h>
#include <List.h>

//------------------------------------------------------------------------------
// Class ScenAttMgr
//
// "Scenario Attribute Manager"
// Owns and maintains the ScenInputAtts and ScenSolnAtts for stochastic
// implosion.
//
// Class hierarchy:
//
//    ProbAssoc
//       StochAssoc
//          ScenAttMgr
//
// Implemented in ScenAtt.C.
//------------------------------------------------------------------------------

class WitScenAttMgr: public WitStochAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitScenAttMgr (WitStochModeMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitScenAttMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void downloadInput ();
         //
         // For each scenario-specific input attribute, this function downloads
         // the value of the attribute from each of the owners into the
         // corresponding ScenSolnAtt for the current Scenario.

      void uploadInput ();
         //
         // For each scenario-specific input attribute, this function uploads
         // the value of the attribute for the current Scenario to each of the
         // owners.
         // Valid only when the stochastic implosion subsystem is uploading
         // data.

      void copyInputFrom (WitScenAttMgr * srcScenAttMgr);
         //
         // Copies the input attributes stored by srcScenAttMgr into this
         // ScenAttMgr.

      void writeCompData (WitScenario * theScenario, bool diffedSec);
         //
         // Writes the section of the input data file for a subset of the
         // scenario-specific input attributes/Components for theScenario.
         // diffedSec indicates whether attributes are being written in the
         // differentiated section or the undifferentiated of the file.
 
      void writeBoundSetData (WitScenario * theScenario, bool diffedSec);
         //
         // Writes the section of the input data file for a subset of the
         // scenario-specific input attributes/BoundSets for theScenario.
         // diffedSec indicates whether attributes are being written in the
         // differentiated section or the undifferentiated of the file.
 
      void validateData ();
         //
         // Verifies that the values of all scenario-specific the attribute are
         // valid for a stochastic implosion.

      void uploadSoln ();
         //
         // For each scenario-specific solution attribute, this function uploads
         // the value of the attribute for the current Scenario to each of the
         // owners.
         // Valid only when the stochastic implosion subsystem is uploading
         // data.

      void clearSoln ();
         //
         // Frees the storage space used by the vectors of all ScenSolnAtts.

      void store (WitAbsScenInputAtt * theInputAtt);
         //
         // Stores theInputAtt in this Scenario.
         // Valid only when this Scenario is building its ScenInputAtts.

      void store (WitAbsScenSolnAtt * theSolnAtt);
         //
         // Stores theSolnAtt in this Scenario.
         // Valid only when this Scenario is building its ScenSolnAtts.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitScenInputAtt <WitPart>      *, supplyVol)
      accessFunc (WitScenInputAtt <WitPart>      *, scrapCost)
      accessFunc (WitScenInputAtt <WitMaterial>  *, stockCost)
      accessFunc (WitScenInputAtt <WitDemand>    *, demandVol)
      accessFunc (WitScenInputAtt <WitDemand>    *, shipReward)
      accessFunc (WitScenInputAtt <WitDemand>    *, cumShipReward)
      accessFunc (WitScenInputAtt <WitOperation> *, execCost)
      accessFunc (WitScenInputAtt <WitSubEntry>  *, subCost)
      accessFunc (WitScenInputAtt <WitBoundSet>  *, hardLB)
      accessFunc (WitScenInputAtt <WitBoundSet>  *, softLB)
      accessFunc (WitScenInputAtt <WitBoundSet>  *, hardUB)
      accessFunc (WitScenSolnAtt  <WitPart>      *, scrapVol)
      accessFunc (WitScenSolnAtt  <WitMaterial>  *, stockVol)
      accessFunc (WitScenSolnAtt  <WitDemand>    *, shipVol)
      accessFunc (WitScenSolnAtt  <WitDemand>    *, cumShipVol)
      accessFunc (WitScenSolnAtt  <WitOperation> *, execVol)
      accessFunc (WitScenSolnAtt  <WitSubEntry>  *, subVol)
      accessFunc (const WitList   <WitMaterial>  &, allMats)
      accessFunc (const WitList   <WitDemand>    &, allDemands)
      accessFunc (const WitList   <WitSubEntry>  &, allSubs)
      accessFunc (const WitList   <WitBoundSet>  &, allBoundSets)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void listOwners ();
         //
         // Builds each of the Lists of Owner objects.

      void buildScenInputAtts ();
      void buildScenSolnAtts  ();
         //
         // Builds the ScenInputAtts owned by this ScenAtrMgr.
         // Builds the ScenSolnAtts  owned by this ScenAtrMgr.

      noCopyCtorAssign (WitScenAttMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitList <WitAbsScenInputAtt> myAbsScenInputAtts_;
      WitList <WitAbsScenSolnAtt>  myAbsScenSolnAtts_;
         //
         // The List of all AbsScenInputAtts owned by this ScenAttMgr.
         // The List of all AbsScenSolnAtts  owned by this ScenAttMgr.

      bool buildingInputAtts_;
         //
         // True, iff this Scenario is currently building its ScenInputAtts.

      bool buildingSolnAtts_;
         //
         // True, iff this Scenario is currently building its ScenSolnAtts.

      //------------------------------------------------------------------------
      // The ScenInputAtts owned by this Scenario.
      //------------------------------------------------------------------------

      WitScenInputAtt <WitPart>      * supplyVol_;
      WitScenInputAtt <WitPart>      * scrapCost_;
      WitScenInputAtt <WitMaterial>  * stockCost_;
      WitScenInputAtt <WitDemand>    * demandVol_;
      WitScenInputAtt <WitDemand>    * shipReward_;
      WitScenInputAtt <WitDemand>    * cumShipReward_;
      WitScenInputAtt <WitOperation> * execCost_;
      WitScenInputAtt <WitSubEntry>  * subCost_;
      WitScenInputAtt <WitBoundSet>  * hardLB_;
      WitScenInputAtt <WitBoundSet>  * softLB_;
      WitScenInputAtt <WitBoundSet>  * hardUB_;

      //------------------------------------------------------------------------
      // The ScenSolnAtts owned by this ScenAttMgr.
      //------------------------------------------------------------------------

      WitScenSolnAtt <WitPart>      * scrapVol_;
      WitScenSolnAtt <WitMaterial>  * stockVol_;
      WitScenSolnAtt <WitDemand>    * shipVol_;
      WitScenSolnAtt <WitDemand>    * cumShipVol_;
      WitScenSolnAtt <WitOperation> * execVol_;
      WitScenSolnAtt <WitSubEntry>  * subVol_;

      //------------------------------------------------------------------------
      // Lists of all instances of various classes that will function as Owners
      // for the ScenAtts.
      //------------------------------------------------------------------------

      WitList <WitMaterial> allMats_;
      WitList <WitDemand>   allDemands_;
      WitList <WitSubEntry> allSubs_;
      WitList <WitBoundSet> allBoundSets_;
   };

#endif
@


1.34
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.33
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d39 2
a40 140
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitScenAttMgr (WitStochModeMgr *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitScenAttMgr ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void downloadInput ();
//
// For each scenario-specific input attribute, this function downloads
// the value of the attribute from each of the owners into the
// corresponding ScenSolnAtt for the current Scenario.

void uploadInput ();
//
// For each scenario-specific input attribute, this function uploads
// the value of the attribute for the current Scenario to each of the
// owners.
// Valid only when the stochastic implosion subsystem is uploading
// data.

void copyInputFrom (WitScenAttMgr * srcScenAttMgr);
//
// Copies the input attributes stored by srcScenAttMgr into this
// ScenAttMgr.

void writeCompData (WitScenario * theScenario, bool diffedSec);
//
// Writes the section of the input data file for a subset of the
// scenario-specific input attributes/Components for theScenario.
// diffedSec indicates whether attributes are being written in the
// differentiated section or the undifferentiated of the file.

void writeBoundSetData (WitScenario * theScenario, bool diffedSec);
//
// Writes the section of the input data file for a subset of the
// scenario-specific input attributes/BoundSets for theScenario.
// diffedSec indicates whether attributes are being written in the
// differentiated section or the undifferentiated of the file.

void validateData ();
//
// Verifies that the values of all scenario-specific the attribute are
// valid for a stochastic implosion.

void uploadSoln ();
//
// For each scenario-specific solution attribute, this function uploads
// the value of the attribute for the current Scenario to each of the
// owners.
// Valid only when the stochastic implosion subsystem is uploading
// data.

void clearSoln ();
//
// Frees the storage space used by the vectors of all ScenSolnAtts.

void store (WitAbsScenInputAtt * theInputAtt);
//
// Stores theInputAtt in this Scenario.
// Valid only when this Scenario is building its ScenInputAtts.

void store (WitAbsScenSolnAtt * theSolnAtt);
//
// Stores theSolnAtt in this Scenario.
// Valid only when this Scenario is building its ScenSolnAtts.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitScenInputAtt <WitPart>      *, supplyVol)
accessFunc (WitScenInputAtt <WitPart>      *, scrapCost)
accessFunc (WitScenInputAtt <WitMaterial>  *, stockCost)
accessFunc (WitScenInputAtt <WitDemand>    *, demandVol)
accessFunc (WitScenInputAtt <WitDemand>    *, shipReward)
accessFunc (WitScenInputAtt <WitDemand>    *, cumShipReward)
accessFunc (WitScenInputAtt <WitOperation> *, execCost)
accessFunc (WitScenInputAtt <WitSubEntry>  *, subCost)
accessFunc (WitScenInputAtt <WitBoundSet>  *, hardLB)
accessFunc (WitScenInputAtt <WitBoundSet>  *, softLB)
accessFunc (WitScenInputAtt <WitBoundSet>  *, hardUB)
accessFunc (WitScenSolnAtt  <WitPart>      *, scrapVol)
accessFunc (WitScenSolnAtt  <WitMaterial>  *, stockVol)
accessFunc (WitScenSolnAtt  <WitDemand>    *, shipVol)
accessFunc (WitScenSolnAtt  <WitDemand>    *, cumShipVol)
accessFunc (WitScenSolnAtt  <WitOperation> *, execVol)
accessFunc (WitScenSolnAtt  <WitSubEntry>  *, subVol)
accessFunc (const WitList   <WitMaterial>  &, allMats)
accessFunc (const WitList   <WitDemand>    &, allDemands)
accessFunc (const WitList   <WitSubEntry>  &, allSubs)
accessFunc (const WitList   <WitBoundSet>  &, allBoundSets)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void listOwners ();
//
// Builds each of the Lists of Owner objects.

void buildScenInputAtts ();
void buildScenSolnAtts  ();
//
// Builds the ScenInputAtts owned by this ScenAtrMgr.
// Builds the ScenSolnAtts  owned by this ScenAtrMgr.

noCopyCtorAssign (WitScenAttMgr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitList <WitAbsScenInputAtt> myAbsScenInputAtts_;
WitList <WitAbsScenSolnAtt>  myAbsScenSolnAtts_;
//
// The List of all AbsScenInputAtts owned by this ScenAttMgr.
// The List of all AbsScenSolnAtts  owned by this ScenAttMgr.

bool buildingInputAtts_;
//
// True, iff this Scenario is currently building its ScenInputAtts.

bool buildingSolnAtts_;
//
// True, iff this Scenario is currently building its ScenSolnAtts.
d42 175
a216 37
//------------------------------------------------------------------------
// The ScenInputAtts owned by this Scenario.
//------------------------------------------------------------------------

WitScenInputAtt <WitPart>      * supplyVol_;
WitScenInputAtt <WitPart>      * scrapCost_;
WitScenInputAtt <WitMaterial>  * stockCost_;
WitScenInputAtt <WitDemand>    * demandVol_;
WitScenInputAtt <WitDemand>    * shipReward_;
WitScenInputAtt <WitDemand>    * cumShipReward_;
WitScenInputAtt <WitOperation> * execCost_;
WitScenInputAtt <WitSubEntry>  * subCost_;
WitScenInputAtt <WitBoundSet>  * hardLB_;
WitScenInputAtt <WitBoundSet>  * softLB_;
WitScenInputAtt <WitBoundSet>  * hardUB_;

//------------------------------------------------------------------------
// The ScenSolnAtts owned by this ScenAttMgr.
//------------------------------------------------------------------------

WitScenSolnAtt <WitPart>      * scrapVol_;
WitScenSolnAtt <WitMaterial>  * stockVol_;
WitScenSolnAtt <WitDemand>    * shipVol_;
WitScenSolnAtt <WitDemand>    * cumShipVol_;
WitScenSolnAtt <WitOperation> * execVol_;
WitScenSolnAtt <WitSubEntry>  * subVol_;

//------------------------------------------------------------------------
// Lists of all instances of various classes that will function as Owners
// for the ScenAtts.
//------------------------------------------------------------------------

WitList <WitMaterial> allMats_;
WitList <WitDemand>   allDemands_;
WitList <WitSubEntry> allSubs_;
WitList <WitBoundSet> allBoundSets_;
};
@


1.32
log
@Stochastic Implosion
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d39 140
a178 2
   {
   public:
d180 37
a216 175
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitScenAttMgr (WitStochModeMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitScenAttMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void downloadInput ();
         //
         // For each scenario-specific input attribute, this function downloads
         // the value of the attribute from each of the owners into the
         // corresponding ScenSolnAtt for the current Scenario.

      void uploadInput ();
         //
         // For each scenario-specific input attribute, this function uploads
         // the value of the attribute for the current Scenario to each of the
         // owners.
         // Valid only when the stochastic implosion subsystem is uploading
         // data.

      void copyInputFrom (WitScenAttMgr * srcScenAttMgr);
         //
         // Copies the input attributes stored by srcScenAttMgr into this
         // ScenAttMgr.

      void writeCompData (WitScenario * theScenario, bool diffedSec);
         //
         // Writes the section of the input data file for a subset of the
         // scenario-specific input attributes/Components for theScenario.
         // diffedSec indicates whether attributes are being written in the
         // differentiated section or the undifferentiated of the file.
 
      void writeBoundSetData (WitScenario * theScenario, bool diffedSec);
         //
         // Writes the section of the input data file for a subset of the
         // scenario-specific input attributes/BoundSets for theScenario.
         // diffedSec indicates whether attributes are being written in the
         // differentiated section or the undifferentiated of the file.
 
      void validateData ();
         //
         // Verifies that the values of all scenario-specific the attribute are
         // valid for a stochastic implosion.

      void uploadSoln ();
         //
         // For each scenario-specific solution attribute, this function uploads
         // the value of the attribute for the current Scenario to each of the
         // owners.
         // Valid only when the stochastic implosion subsystem is uploading
         // data.

      void clearSoln ();
         //
         // Frees the storage space used by the vectors of all ScenSolnAtts.

      void store (WitAbsScenInputAtt * theInputAtt);
         //
         // Stores theInputAtt in this Scenario.
         // Valid only when this Scenario is building its ScenInputAtts.

      void store (WitAbsScenSolnAtt * theSolnAtt);
         //
         // Stores theSolnAtt in this Scenario.
         // Valid only when this Scenario is building its ScenSolnAtts.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitScenInputAtt <WitPart>      *, supplyVol)
      accessFunc (WitScenInputAtt <WitPart>      *, scrapCost)
      accessFunc (WitScenInputAtt <WitMaterial>  *, stockCost)
      accessFunc (WitScenInputAtt <WitDemand>    *, demandVol)
      accessFunc (WitScenInputAtt <WitDemand>    *, shipReward)
      accessFunc (WitScenInputAtt <WitDemand>    *, cumShipReward)
      accessFunc (WitScenInputAtt <WitOperation> *, execCost)
      accessFunc (WitScenInputAtt <WitSubEntry>  *, subCost)
      accessFunc (WitScenInputAtt <WitBoundSet>  *, hardLB)
      accessFunc (WitScenInputAtt <WitBoundSet>  *, softLB)
      accessFunc (WitScenInputAtt <WitBoundSet>  *, hardUB)
      accessFunc (WitScenSolnAtt  <WitPart>      *, scrapVol)
      accessFunc (WitScenSolnAtt  <WitMaterial>  *, stockVol)
      accessFunc (WitScenSolnAtt  <WitDemand>    *, shipVol)
      accessFunc (WitScenSolnAtt  <WitDemand>    *, cumShipVol)
      accessFunc (WitScenSolnAtt  <WitOperation> *, execVol)
      accessFunc (WitScenSolnAtt  <WitSubEntry>  *, subVol)
      accessFunc (const WitList   <WitMaterial>  &, allMats)
      accessFunc (const WitList   <WitDemand>    &, allDemands)
      accessFunc (const WitList   <WitSubEntry>  &, allSubs)
      accessFunc (const WitList   <WitBoundSet>  &, allBoundSets)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void listOwners ();
         //
         // Builds each of the Lists of Owner objects.

      void buildScenInputAtts ();
      void buildScenSolnAtts  ();
         //
         // Builds the ScenInputAtts owned by this ScenAtrMgr.
         // Builds the ScenSolnAtts  owned by this ScenAtrMgr.

      noCopyCtorAssign (WitScenAttMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitList <WitAbsScenInputAtt> myAbsScenInputAtts_;
      WitList <WitAbsScenSolnAtt>  myAbsScenSolnAtts_;
         //
         // The List of all AbsScenInputAtts owned by this ScenAttMgr.
         // The List of all AbsScenSolnAtts  owned by this ScenAttMgr.

      bool buildingInputAtts_;
         //
         // True, iff this Scenario is currently building its ScenInputAtts.

      bool buildingSolnAtts_;
         //
         // True, iff this Scenario is currently building its ScenSolnAtts.

      //------------------------------------------------------------------------
      // The ScenInputAtts owned by this Scenario.
      //------------------------------------------------------------------------

      WitScenInputAtt <WitPart>      * supplyVol_;
      WitScenInputAtt <WitPart>      * scrapCost_;
      WitScenInputAtt <WitMaterial>  * stockCost_;
      WitScenInputAtt <WitDemand>    * demandVol_;
      WitScenInputAtt <WitDemand>    * shipReward_;
      WitScenInputAtt <WitDemand>    * cumShipReward_;
      WitScenInputAtt <WitOperation> * execCost_;
      WitScenInputAtt <WitSubEntry>  * subCost_;
      WitScenInputAtt <WitBoundSet>  * hardLB_;
      WitScenInputAtt <WitBoundSet>  * softLB_;
      WitScenInputAtt <WitBoundSet>  * hardUB_;

      //------------------------------------------------------------------------
      // The ScenSolnAtts owned by this ScenAttMgr.
      //------------------------------------------------------------------------

      WitScenSolnAtt <WitPart>      * scrapVol_;
      WitScenSolnAtt <WitMaterial>  * stockVol_;
      WitScenSolnAtt <WitDemand>    * shipVol_;
      WitScenSolnAtt <WitDemand>    * cumShipVol_;
      WitScenSolnAtt <WitOperation> * execVol_;
      WitScenSolnAtt <WitSubEntry>  * subVol_;

      //------------------------------------------------------------------------
      // Lists of all instances of various classes that will function as Owners
      // for the ScenAtts.
      //------------------------------------------------------------------------

      WitList <WitMaterial> allMats_;
      WitList <WitDemand>   allDemands_;
      WitList <WitSubEntry> allSubs_;
      WitList <WitBoundSet> allBoundSets_;
   };
@


1.31
log
@Stochastic Implosion
@
text
@d19 1
a19 1
#include <Assoc.h>
d29 6
d38 1
a38 1
class WitScenAttMgr: public WitProbAssoc
a121 2
      accessFunc (WitStochModeMgr                *, myStochModeMgr)
      accessFunc (WitScenMgr                     *, myScenMgr)
a165 8
      WitStochModeMgr * const myStochModeMgr_;
         //
         // The StochModeMgr that owns this ScenAttMgr.

      WitScenMgr * const myScenMgr_;
         //
         // The ScenMgr for this ScenAttMgr.

@


1.30
log
@Stochastic Implosion
@
text
@d85 5
@


1.29
log
@Stochastic Implosion
@
text
@d114 2
d117 4
d183 11
a193 5
      WitScenInputAtt <WitPart>     * supplyVol_;
      WitScenInputAtt <WitDemand>   * demandVol_;
      WitScenInputAtt <WitBoundSet> * hardLB_;
      WitScenInputAtt <WitBoundSet> * softLB_;
      WitScenInputAtt <WitBoundSet> * hardUB_;
@


1.28
log
@Stochastic Implosion
@
text
@d66 1
a66 1
      void copyInputFrom (WitScenAttMgr * thatScenAttMgr);
d68 1
a68 1
         // Copies the input attributes stored by thatScenAttMgr into this
@


1.27
log
@Stochastic Implosion
@
text
@d71 1
a71 1
      void writeCompData (WitScenario * theScenario, bool diffedAtts);
d75 2
a76 3
         // Specifically, the attributes/Components written are those that are:
         //    Differentiated,   if diffedAtts is true
         //    Undifferentiated, if diffedAtts is false.
d78 1
a78 1
      void writeBoundSetData (WitScenario * theScenario, bool diffedAtts);
d82 2
a83 3
         // Specifically, the attributes/BoundSets written are those that are:
         //    Differentiated,   if diffedAtts is true
         //    Undifferentiated, if diffedAtts is false.
@


1.26
log
@Stochastic Implosion
@
text
@d71 1
a71 1
      void writeCompData (WitScenario * theScenario, int stageToWrite);
d73 14
a86 10
         // Writes the section of the input data file for the scenario-specific
         // input attributes for theScenario for the Components belonging to the
         // stage indicated by stageToWrite.

      void writeBoundSetData (WitScenario * theScenario, int stageToWrite);
         //
         // Writes the section of the input data file for the scenario-specific
         // input attributes for theScenario for the BoundSets belonging to the
         // stage indicated by stageToWrite.

@


1.25
log
@Stochastic Implosion
@
text
@d71 1
a71 1
      void writeData (WitScenario * theScenario, int stageToWrite);
d74 8
a81 2
         // input attributes for theScenario and for the stage indicated by
         // stageToWrite
@


1.24
log
@Stochastic Implosion
@
text
@d71 1
a71 1
      void writeData (WitScenario * theScenario);
d74 2
a75 1
         // input attributes for theScenario.
@


1.23
log
@Stochastic Implosion
@
text
@a75 5
      void validateData ();
         //
         // Verifies that the scenario-specific input attributes are valid for a
         // stochastic implosion.

@


1.22
log
@Stochastic Implosion
@
text
@d25 1
a25 1
// "Scenario-Specific Attribute Manager"
d29 1
a29 1
// Implemented in ScenAtt.C
d52 1
a52 1
      void store (WitAbsScenInputAtt * theAbsScenInputAtt);
d54 3
a56 2
         // Stores theAbsScenInputAtt in this ScenAttgr.
         // Valid only when this ScenAttgris building its ScenInputAtts.
d58 1
a58 1
      void store (WitAbsScenSolnAtt * theAbsScenSolnAtt);
d60 5
a64 8
         // Stores theAbsScenSolnAtt in this ScenAttgr.
         // Valid only when this ScenAttgris building its ScenSolnAtts.

      void downloadInputToCurScen ();
         //
         // For each ScenInputAtt, this function downloads the value of the
         // corresponding attribute from each of the owners into the current
         // Scenario's portion of the ScenInputAtt.
d66 1
a66 1
      void uploadInputFromCurScen ();
d68 2
a69 5
         // For each ScenInputAtt, this function uploads the value of the
         // corresponding attribute to each of the owners from the current
         // Scenario's portion of the ScenInputAtt.
         // Valid only when the stochastic implosion subsystem is uploading
         // data.
d71 1
a71 1
      void copyInputAttrsFrom (WitScenAttMgr * theScenAttMgr);
d73 2
a74 5
         // For each ScenInputAtt in this ScenAttMgr, this function copies
         // the corresponding ScenInputAtt in theScenAttMgr into the
         // ScenInputAtt.
         // It is assumed that theScenAttMgr and this ScenAttMgr belong to
         // WitRuns whose Component set, # Scenarios, and # Periods match.
d76 1
a76 1
      void checkInputInStage0 ();
d78 2
a79 2
         // For each ScenInputAtt, this function verifies that the corresponding
         // attribute values of all stage 0 Owners match between all Scenarios.
d81 1
a81 1
      void uploadSolnFromCurScen ();
d83 3
a85 3
         // For each ScenSolnAtt, this function uploads the value of the
         // corresponding attribute to each of the owners from the current
         // Scenario's portion of the ScenSolnAtt.
d93 10
d108 1
d111 3
d123 1
d136 1
d138 2
a139 5
         // Builds the ScenInputAtts owned by this ScenAttMgr.

      void buildScenSolnAtts ();
         //
         // Builds the ScenSolnAtts owned by this ScenAttMgr.
d151 4
d156 1
d159 1
d161 1
a161 5
      WitList <WitAbsScenSolnAtt> myAbsScenSolnAtts_;
         //
         // The List of all AbsScenSolnAtts owned by this ScenAttMgr.

      bool buildingInputAttrs_;
d163 1
a163 2
         // True, iff this ScenAttMgr is currently building its
         // ScenInputAttrs.
d165 1
a165 1
      bool buildingSolnAttrs_;
d167 1
a167 2
         // True, iff this ScenAttMgr is currently building its
         // ScenSolnAttrs.
d170 1
a170 1
      // The ScenInputAtts owned by this ScenAttMgr.
d173 5
a177 2
      WitScenInputAtt <WitPart>   * supplyVol_;
      WitScenInputAtt <WitDemand> * demandVol_;
d198 1
@


1.21
log
@Stochastic Implosion
@
text
@@


1.20
log
@Stochastic Implosion
@
text
@d84 1
a84 1
      void checkInputAttrsInStage0 ();
@


1.19
log
@Stochastic Implosion
@
text
@d84 5
@


1.18
log
@Stochastic Implosion
@
text
@d29 1
a29 1
// Implemented in ScenAttTable.C
d179 1
a179 1
      // for the ScenAttTables.
@


1.17
log
@Stochastic Implosion.
@
text
@d52 1
a52 1
      void store (WitScenInputAtt * theScenInputAtt);
d54 1
a54 1
         // Stores theScenInputAtt in this ScenAttgr.
d57 1
a57 1
      void store (WitScenSolnAtt * theScenSolnAtt);
d59 1
a59 1
         // Stores theScenSolnAtt in this ScenAttgr.
d78 3
a80 2
         // For each ScenInputAtt in this ScenAttMgr, this function copies the
         // corresponding ScenInputAtt in theScenAttMgr into the ScenInputAtt.
d100 12
a111 12
      accessFunc (WitStochModeMgr                    *, myStochModeMgr)
      accessFunc (WitConcScenInputAtt <WitPart>      *, supplyVol)
      accessFunc (WitConcScenInputAtt <WitDemand>    *, demandVol)
      accessFunc (WitConcScenSolnAtt  <WitPart>      *, scrapVol)
      accessFunc (WitConcScenSolnAtt  <WitMaterial>  *, stockVol)
      accessFunc (WitConcScenSolnAtt  <WitDemand>    *, shipVol)
      accessFunc (WitConcScenSolnAtt  <WitDemand>    *, cumShipVol)
      accessFunc (WitConcScenSolnAtt  <WitOperation> *, execVol)
      accessFunc (WitConcScenSolnAtt  <WitSubEntry>  *, subVol)
      accessFunc (const WitList       <WitMaterial>  &, allMats)
      accessFunc (const WitList       <WitDemand>    &, allDemands)
      accessFunc (const WitList       <WitSubEntry>  &, allSubs)
d141 1
a141 1
      WitList <WitScenInputAtt> myScenInputAtts_;
d143 1
a143 1
         // The List of all ScenInputAtts owned by this ScenAttMgr.
d145 1
a145 1
      WitList <WitScenSolnAtt> myScenSolnAtts_;
d147 1
a147 1
         // The List of all ScenSolnAtts owned by this ScenAttMgr.
d151 2
a152 1
         // True, iff this ScenAttMgr is currently building its ScenInputAttrs.
d156 2
a157 1
         // True, iff this ScenAttMgr is currently building its ScenSolnAttrs.
d160 1
a160 1
      // The ConcScenInputAtts owned by this ScenAttMgr.
d163 2
a164 2
      WitConcScenInputAtt <WitPart>   * supplyVol_;
      WitConcScenInputAtt <WitDemand> * demandVol_;
d167 1
a167 1
      // The ConcScenSolnAtts owned by this ScenAttMgr.
d170 6
a175 6
      WitConcScenSolnAtt <WitPart>      * scrapVol_;
      WitConcScenSolnAtt <WitMaterial>  * stockVol_;
      WitConcScenSolnAtt <WitDemand>    * shipVol_;
      WitConcScenSolnAtt <WitDemand>    * cumShipVol_;
      WitConcScenSolnAtt <WitOperation> * execVol_;
      WitConcScenSolnAtt <WitSubEntry>  * subVol_;
@


1.16
log
@Stochastic Implosion
@
text
@d76 7
@


1.15
log
@Stochastic Implosion
@
text
@d84 1
a84 1
      void uploadZeroSoln ();
d86 1
a86 8
         // Uploads an attribute value of 0 to each owner of each solution
         // attribute.
         // Valid only when the stochastic implosion subsystem is uploading
         // data.

      void clearScenSoln ();
         //
         // Sets all attribute values stored by all ScenSolnAtts to 0.
@


1.14
log
@Stochastic Implosion
@
text
@d84 7
@


1.13
log
@Stochastic Implosion
@
text
@d84 4
@


1.12
log
@Stochastic Implosion
@
text
@d40 1
a40 1
      WitScenAttMgr (WitScenMgr *);
d88 1
a88 1
      accessFunc (WitScenMgr                         *, myScenMgr)
d125 1
a125 1
      WitScenMgr * const myScenMgr_;
d127 1
a127 1
         // The ScenMgr for this ScenAttMgr.
@


1.11
log
@Stochastic Implosion
@
text
@d52 10
d111 1
a111 5
      void buildConcScenInputAtts ();
         //
         // Builds the ConcScenInputAtts owned by this ScenAttMgr.

      void buildConcScenSolnAtts ();
d113 1
a113 1
         // Builds the ConcScenSolnAtts owned by this ScenAttMgr.
d115 1
a115 1
      void listScenInputAtts ();
d117 1
a117 5
         // Builds the myScenInputAtts_ List.

      void listScenSolnAtts ();
         //
         // Builds the myScenSolnAtts_ List.
d137 8
@


1.10
log
@Stochastic Implosion
@
text
@d29 1
a29 1
// Implemented in ScenAtt.C
d155 1
a155 1
      // for the ScenAtts.
@


1.9
log
@Stochastic Implosion
@
text
@d26 2
a27 1
// Owns and maintains the ScenTmps for stochastic implosion.
d54 3
a56 4
         // For each input attribute, this function considers the corresponding
         // ScenTmp and downloads the attribute value from each of the owners
         // into the portion of the ScenTmp that represents the current
         // Scenario.
d60 3
a62 4
         // For each input attribute, this function considers the corresponding
         // ScenTmp and uploads the attribute value to each of the owners
         // from the portion of the ScenTmp that represents the current
         // Scenario.
d68 3
a70 4
         // For each solution attribute, this function considers the
         // corresponding ScenTmp and uploads the attribute value to each of the
         // owners from the portion of the ScenTmp that represents the current
         // Scenario.
d109 1
a109 1
      void listScenTmps ();
d111 5
a115 1
         // Builds themyScenTmps_ List.
d127 5
a131 1
      WitList <WitScenTmp> myScenTmps_;
d133 1
a133 1
         // The List of all ScenTmps owned by this ScenAttMgr.
@


1.8
log
@Stochastic Implosion
@
text
@d26 1
a26 1
// Owns and maintains the ScenAtts for stochastic implosion.
d28 1
a28 1
// Implemented in Scenario.C
d54 2
a55 2
         // ScenAtt and downloads the attribute value from each of the owners
         // into the portion of the ScenAtt that represents the current
d61 2
a62 2
         // ScenAtt and uploads the attribute value to each of the owners
         // from the portion of the ScenAtt that represents the current
d70 2
a71 2
         // corresponding ScenAtt and uploads the attribute value to each of the
         // owners from the portion of the ScenAtt that represents the current
d80 12
a91 12
      accessFunc (WitScenMgr                     *, myScenMgr)
      accessFunc (WitInputScenAtt <WitPart>      *, supplyVol)
      accessFunc (WitInputScenAtt <WitDemand>    *, demandVol)
      accessFunc (WitSolnScenAtt  <WitPart>      *, scrapVol)
      accessFunc (WitSolnScenAtt  <WitMaterial>  *, stockVol)
      accessFunc (WitSolnScenAtt  <WitDemand>    *, shipVol)
      accessFunc (WitSolnScenAtt  <WitDemand>    *, cumShipVol)
      accessFunc (WitSolnScenAtt  <WitOperation> *, execVol)
      accessFunc (WitSolnScenAtt  <WitSubEntry>  *, subVol)
      accessFunc (const WitList   <WitMaterial>  &, allMats)
      accessFunc (const WitList   <WitDemand>    &, allDemands)
      accessFunc (const WitList   <WitSubEntry>  &, allSubs)
d103 1
a103 1
      void buildInputScenAtts ();
d105 1
a105 1
         // Builds the InputScenAtts owned by this ScenAttMgr.
d107 1
a107 1
      void buildSolnScenAtts ();
d109 1
a109 1
         // Builds the SolnScenAtts owned by this ScenAttMgr.
d111 1
a111 1
      void listScenAtts ();
d113 1
a113 1
         // Builds themyScenAtts_ List.
d125 1
a125 1
      WitList <WitScenAtt> myScenAtts_;
d127 1
a127 1
         // The List of all ScenAtts owned by this ScenAttMgr.
d130 1
a130 1
      // The InputScenAtts owned by this ScenAttMgr.
d133 2
a134 2
      WitInputScenAtt <WitPart>   * supplyVol_;
      WitInputScenAtt <WitDemand> * demandVol_;
d137 1
a137 1
      // The SolnScenAtts owned by this ScenAttMgr.
d140 6
a145 6
      WitSolnScenAtt <WitPart>      * scrapVol_;
      WitSolnScenAtt <WitMaterial>  * stockVol_;
      WitSolnScenAtt <WitDemand>    * shipVol_;
      WitSolnScenAtt <WitDemand>    * cumShipVol_;
      WitSolnScenAtt <WitOperation> * execVol_;
      WitSolnScenAtt <WitSubEntry>  * subVol_;
d149 1
a149 1
      // for the ConcScenAtts.
@


1.7
log
@Stochastic Implosion
@
text
@d53 22
a74 3
         // For each input attribute, this function downloads the attribute
         // value from each of the owners into the corresponding ScenAtt,
         // associating the value with the current Scenario.
d99 1
a99 1
      void buildOwnerLists ();
d111 4
@


1.6
log
@Stochastic Implosion
@
text
@d62 8
a69 8
      accessFunc (WitScenInputAtt <WitPart>      *, supplyVol)
      accessFunc (WitScenInputAtt <WitDemand>    *, demandVol)
      accessFunc (WitScenSolnAtt  <WitPart>      *, scrapVol)
      accessFunc (WitScenSolnAtt  <WitMaterial>  *, stockVol)
      accessFunc (WitScenSolnAtt  <WitDemand>    *, shipVol)
      accessFunc (WitScenSolnAtt  <WitDemand>    *, cumShipVol)
      accessFunc (WitScenSolnAtt  <WitOperation> *, execVol)
      accessFunc (WitScenSolnAtt  <WitSubEntry>  *, subVol)
d84 1
a84 1
      void buildScenInputAtts ();
d86 1
a86 1
         // Builds the ScenInputAtts owned by this ScenAttMgr.
d88 1
a88 1
      void buildScenSolnAtts ();
d90 1
a90 1
         // Builds the ScenSolnAtts owned by this ScenAttMgr.
d107 1
a107 1
      // The ScenInputAtts owned by this ScenAttMgr.
d110 2
a111 2
      WitScenInputAtt <WitPart>   * supplyVol_;
      WitScenInputAtt <WitDemand> * demandVol_;
d114 1
a114 1
      // The ScenSolnAtts owned by this ScenAttMgr.
d117 6
a122 6
      WitScenSolnAtt <WitPart>      * scrapVol_;
      WitScenSolnAtt <WitMaterial>  * stockVol_;
      WitScenSolnAtt <WitDemand>    * shipVol_;
      WitScenSolnAtt <WitDemand>    * cumShipVol_;
      WitScenSolnAtt <WitOperation> * execVol_;
      WitScenSolnAtt <WitSubEntry>  * subVol_;
d126 1
a126 1
      // for the OwnedScenAtts.
@


1.5
log
@Stochastic Implosion
@
text
@d39 1
a39 1
      WitScenAttMgr (WitProblem *);
d48 10
d61 1
d70 3
a72 3
      accessFunc (const WitList   <WitMaterial> &,  allMats)
      accessFunc (const WitList   <WitDemand>   &,  allDemands)
      accessFunc (const WitList   <WitSubEntry> &,  allSubs)
d98 4
@


1.4
log
@Stochastic Implosion
@
text
@d95 1
a95 1
      WitScenInputAtt <WitPart> *   supplyVol_;
@


1.3
log
@Stochastic Implosion
@
text
@d59 3
d114 3
a116 5
      const WitList <WitPart> &      allParts_;
      const WitList <WitOperation> & allOpns_;
            WitList <WitMaterial>    allMats_;
            WitList <WitDemand>      allDemands_;
            WitList <WitSubEntry>    allSubs_;
@


1.2
log
@Stochastic Implosion
@
text
@d66 4
d105 11
@


1.1
log
@Stochastic Implosion
@
text
@a47 4
      // Other public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
d51 8
a58 2
      accessFunc (WitScenInputAtt <WitPart> *,   supplyVol)
      accessFunc (WitScenInputAtt <WitDemand> *, demandVol)
@

