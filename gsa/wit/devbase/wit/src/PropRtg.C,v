head	1.34;
access;
symbols
	sce_5_01_20080919:1.13
	latest_sce_4_20_20060523:1.12.0.2
	sce_4_20_20060523:1.12
	latest_sce4_20_OSL:1.11.0.2
	sce_4_20_OSL:1.11
	sce_410_withVa:1.9;
locks; strict;
comment	@ * @;


1.34
date	2011.09.28.23.50.00;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.09.24.00.28.23;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.08.30.20.18.00;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2010.09.28.19.25.16;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2010.09.10.22.10.41;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2010.07.30.20.20.14;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2010.07.30.16.07.52;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2010.07.29.21.03.12;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2010.07.28.21.40.40;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2010.07.28.19.27.46;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2010.07.26.17.48.44;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2010.07.16.22.26.41;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2010.07.16.21.08.25;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2010.07.16.20.21.21;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2010.07.14.18.45.10;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2010.07.13.17.41.29;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2010.07.02.19.15.50;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2010.06.29.23.25.14;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2010.06.29.22.32.31;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.18.23.11.15;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2010.03.16.22.42.28;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.08.01.21.28.05;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.02.17.34.10;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.03.16.48.13;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.05.22.24.09;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.28.20.14.37;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.22.21.45.53;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.22.19.09.34;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.16.17.00.31;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.04.21.45.35;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.04.00.00.28;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.02.23.56.52;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.02.23.17.53;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.02.22.56.29;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.34
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "PropRtg.C"
//
// Contains the implementation of the following classes:
//
//    PrMgr.
//    PrCoord.
//    PrSelMgr.
//    PprSelMgr.
//    CprSelMgr.
//    PrSelPt.
//    PrAltPt.
//    PrCand.
//------------------------------------------------------------------------------

#include <PrMgr.h>
#include <PrCoord.h>
#include <PrSelMgr.h>
#include <PrSelPt.h>
#include <PrAltPt.h>
#include <PrCand.h>
#include <RtMgr.h>
#include <RtSite.h>
#include <RtCand.h>
#include <Selector.h>
#include <SplitPt.h>
#include <SglSrcMgr.h>
#include <HeurAtor.h>
#include <GlobalComp.h>
#include <Part.h>
#include <Operation.h>
#include <BopEntry.h>
#include <CompMgr.h>
#include <PairStack.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------
// Implementation of class PrMgr.
//------------------------------------------------------------------------------

WitPrMgr::WitPrMgr (WitSelector * theSelector):

      WitProbAssoc (theSelector),
      myPrCoord_   (NULL),
      myRtMgr_     (theSelector->myRtMgr ())
   {
   myPrCoord_ = new WitPrCoord (theSelector);
   }

//------------------------------------------------------------------------------

WitPrMgr::~WitPrMgr ()
   {
   delete myPrCoord_;
   }

//------------------------------------------------------------------------------

bool WitPrMgr::instNeededFor (WitProblem * theProblem)
   {
   WitPart *     thePart;
   WitBomEntry * theBomEnt;

   forEachPart (thePart, theProblem)
      if (thePart->propRtg () != false)
         return true;

   forEachBomEntry (theBomEnt, theProblem)
      if (theBomEnt->propRtg () != false)
         return true;

   return false;
   }

//------------------------------------------------------------------------------

void WitPrMgr::print ()
   {
   myPrCoord_->print ();
   }

//------------------------------------------------------------------------------

void WitPrMgr::definePropExp (
      WitRtSite *         theRtSite, 
      WitPeriod           thePer,
      double              expVol,
      WitRtCandDblStack & theExpPairs)
   {
   myPrCoord_->definePropExp (theRtSite, thePer, expVol, theExpPairs);
   }

//------------------------------------------------------------------------------

void WitPrMgr::definePropExp (
      WitPart *           thePart, 
      WitPeriod           expPer,
      double              expVol,
      WitRtCandDblStack & theExpPairs)
   {
   WitRtSite * theRtSite;

   theRtSite = myRtMgr_->myRtSiteFor (thePart);

   myPrCoord_->definePropExp (theRtSite, expPer, expVol, theExpPairs);
   }

//------------------------------------------------------------------------------

void WitPrMgr::definePropExp (
      WitBomEntry *       theBomEnt, 
      WitPeriod           execPer,
      double              expVol,
      WitRtCandDblStack & theExpPairs)
   {
   WitRtSite * theRtSite;

   theRtSite = myRtMgr_->myRtSiteFor (theBomEnt);

   myPrCoord_->definePropExp (theRtSite, execPer, expVol, theExpPairs);
   }

//------------------------------------------------------------------------------

bool WitPrMgr::active (WitRtCand * theRtCand, WitPeriod thePer)
   {
   return myPrCoord_->active (theRtCand, thePer);
   }

//------------------------------------------------------------------------------

void WitPrMgr::setActive (
      WitRtCand * theRtCand,
      WitPeriod   thePer,
      bool        theValue)
   {
   myPrCoord_->setActive (theRtCand, thePer, theValue);
   }

//------------------------------------------------------------------------------

bool WitPrMgr::allowed (WitRtCand * theRtCand, WitPeriod thePer)
   {
   return myPrCoord_->allowed (theRtCand, thePer);
   }

//------------------------------------------------------------------------------

WitSelPt * WitPrMgr::mySelPtFor (WitRtSite * theRtSite, WitPeriod thePer)
   {
   return myPrCoord_->mySelPtFor (theRtSite, thePer);
   }

//------------------------------------------------------------------------------

void WitPrMgr::storeRecoveryPair (WitRtCand * theRtCand, WitPeriod thePer)
   {
   myPrCoord_->storeRecoveryPair (theRtCand, thePer);
   }

//------------------------------------------------------------------------------

void WitPrMgr::recoverInitState ()
   {
   myPrCoord_->recoverInitState ();
   }

//------------------------------------------------------------------------------

bool WitPrMgr::selIsSplit (WitPart * thePart, WitPeriod expPer)
   {
   WitRtSite * theRtSite;

   theRtSite = myRtMgr_->myRtSiteFor (thePart);

   return myPrCoord_->selIsSplit (theRtSite, expPer);
   }

//------------------------------------------------------------------------------

bool WitPrMgr::selIsSplit (WitBomEntry * theBomEnt, WitPeriod execPer)
   {
   WitRtSite * theRtSite;

   theRtSite = myRtMgr_->myRtSiteFor (theBomEnt);

   return myPrCoord_->selIsSplit (theRtSite, execPer);
   }

//------------------------------------------------------------------------------

void WitPrMgr::defineSplit (
      WitPart *           thePart, 
      WitPeriod           expPer,
      double              expVol,
      WitRtCandDblStack & theExpPairs,
      double &            unbddVol)
   {
   WitRtSite * theRtSite;

   theRtSite = myRtMgr_->myRtSiteFor (thePart);

   myPrCoord_->defineSplit (
      theRtSite,
      expPer,
      expVol,
      theExpPairs,
      unbddVol);
   }

//------------------------------------------------------------------------------

void WitPrMgr::defineSplit (
      WitBomEntry *       theBomEnt, 
      WitPeriod           execPer,
      double              expVol,
      WitRtCandDblStack & theExpPairs,
      double &            unbddVol)
   {
   WitRtSite * theRtSite;

   theRtSite = myRtMgr_->myRtSiteFor (theBomEnt);

   myPrCoord_->defineSplit (
      theRtSite,
      execPer,
      expVol,
      theExpPairs,
      unbddVol);
   }

//------------------------------------------------------------------------------

void WitPrMgr::recordFlowSS (
      WitPart * thePart,
      WitPeriod expPer,
      double    incFlowVol)
   {
   WitRtSite * theRtSite;

   theRtSite = myRtMgr_->myRtSiteFor (thePart);

   myPrCoord_->recordFlowSS (theRtSite, expPer, incFlowVol);
   }

//------------------------------------------------------------------------------

void WitPrMgr::recordFlowSS (
      WitBomEntry * theBomEnt,
      WitPeriod     execPer,
      double        incFlowVol)
   {
   WitRtSite * theRtSite;

   theRtSite = myRtMgr_->myRtSiteFor (theBomEnt);

   myPrCoord_->recordFlowSS (theRtSite, execPer, incFlowVol);
   }

//------------------------------------------------------------------------------

WitSelMgr * WitPrMgr::mySelMgrForProd ()
   {
   return myPrCoord_->myPrSelMgrForProd ();
   }

//------------------------------------------------------------------------------

WitSelMgr * WitPrMgr::mySelMgrForCons ()
   {
   return myPrCoord_->myPrSelMgrForCons ();
   }

//------------------------------------------------------------------------------
// Implementation of class PrCoord.
//------------------------------------------------------------------------------

WitPrCoord::WitPrCoord (WitSelector * theSelector):

      WitProbAssoc       (theSelector),
      mySelector_        (theSelector),
      myRtMgr_           (theSelector->myRtMgr ()),
      myPrSelMgrForProd_ (NULL),
      myPrSelMgrForCons_ (NULL),
      myPrSelPts_        (),
      myPrAltPts_        (),
      myRecoveryPairs_   (myProblem ())
   {
   myMsgFac () ("propRtgMsg");

   myPrSelMgrForProd_ = new WitPprSelMgr (this);
   myPrSelMgrForCons_ = new WitCprSelMgr (this);

   buildPrSelPts ();
   buildPrAltPts ();
   }

//------------------------------------------------------------------------------

WitPrCoord::~WitPrCoord ()
   {
   WitRtCand * theRtCand;
   WitRtSite * theRtSite;
   WitPeriod   thePer;

   forEachEl (theRtCand, myRtMgr_->myRtCands ())
      if (myPrAltPts_.myPtrTVecAt (theRtCand).isAllocated ())
         forEachPeriod (thePer, myProblem ())
            delete myPrAltPts_.myPtrAt (theRtCand, thePer);

   forEachEl (theRtSite, myRtMgr_->myRtSites ())
      if (myPrSelPts_.myPtrTVecAt (theRtSite).isAllocated ())
         forEachPeriod (thePer, myProblem ())
            delete myPrSelPtFor (theRtSite, thePer);

   delete myPrSelMgrForCons_;
   delete myPrSelMgrForProd_;
   }

//------------------------------------------------------------------------------

void WitPrCoord::print ()
   {
   WitRtSite *  theRtSite;
   WitPeriod    thePer;
   WitPrSelPt * thePrSelPt;

   fprintf (msgFile (),
      "\n"
      "Proportionate Routing Status:\n");

   forEachEl (theRtSite, myRtMgr_->myRtSites ())
      forEachPeriod (thePer, myProblem ())
         {
         thePrSelPt = myPrSelPtFor (theRtSite, thePer);

         if (thePrSelPt == NULL)
            continue;

         thePrSelPt->print ();

         thePrSelPt->printAllowedRtCands ();
         }

   fprintf (msgFile (), "\n");
   }

//------------------------------------------------------------------------------

void WitPrCoord::definePropExp (
      WitRtSite *         theRtSite, 
      WitPeriod           thePer,
      double              expVol,
      WitRtCandDblStack & theExpPairs)
   {
   WitRtCandStack theRtCands (myProblem ());
   WitRtCand *    theRtCand;

   witAssert (theRtSite->propRtg ()[thePer]);

   theExpPairs.clear ();

   if (theRtSite->myRtCands ().nElements () > 1)
      {
      findActiveRtCands (theRtSite, thePer, theRtCands);

      defineExpPairs (theRtCands, thePer, expVol, theExpPairs);
      }
   else
      {
      witAssert (theRtSite->myRtCands ().nElements () == 1);

      theRtCand = theRtSite->myRtCands ().first ();

      witAssert (theRtCand->isEligible (thePer));

      theExpPairs.push (theRtCand, expVol);
      }

   if (selPrintLevelAt (3))
      printPropExp (theRtSite, thePer, expVol, theExpPairs, false);
   }

//------------------------------------------------------------------------------

bool WitPrCoord::active (WitRtCand * theRtCand, WitPeriod thePer)
   {
   WitPrAltPt * thePrAltPt;

   witAssert (theRtCand->myRtSite ()->propRtg ()[thePer]);

   if (myPrAltPts_.myPtrTVecAt (theRtCand).isAllocated ())
      {
      thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);

      if (thePrAltPt != NULL)
         return thePrAltPt->active ();
      }

   if (theRtCand->myRtSite ()->myRtCands ().nElements () == 1)
      if (theRtCand->isEligible (thePer))
         return true;

   return false;
   }

//------------------------------------------------------------------------------

void WitPrCoord::setActive (
      WitRtCand * theRtCand,
      WitPeriod   thePer,
      bool        theValue)
   {
   WitPrAltPt * thePrAltPt;

   witAssert (mySelector_->tbprMode ());

   witAssert (theRtCand->myRtSite ()->propRtg ()[thePer]);

   thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);

   witAssert (thePrAltPt != NULL);

   witAssert (thePrAltPt->allowed ());

   thePrAltPt->setStatus (theValue, true);
   }

//------------------------------------------------------------------------------

bool WitPrCoord::allowed (WitRtCand * theRtCand, WitPeriod thePer)
   {
   WitPrAltPt * thePrAltPt;

   witAssert (theRtCand->myRtSite ()->propRtg ()[thePer]);

   if (myPrAltPts_.myPtrTVecAt (theRtCand).isAllocated ())
      {
      thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);

      if (thePrAltPt != NULL)
         return thePrAltPt->allowed ();
      }

   if (theRtCand->myRtSite ()->myRtCands ().nElements () == 1)
      if (theRtCand->isEligible (thePer))
         return true;

   return false;
   }

//------------------------------------------------------------------------------

void WitPrCoord::storeRecoveryPair (WitRtCand * theRtCand, WitPeriod thePer)
   {
   myRecoveryPairs_.push (theRtCand, thePer);
   }

//------------------------------------------------------------------------------

void WitPrCoord::recoverInitState ()
   {
   WitRtCand * theRtCand;
   WitPeriod   thePer;

   while (myRecoveryPairs_.pop (theRtCand, thePer))
      {
      myPrAltPts_.myPtrAt (theRtCand, thePer)->recoverInitState ();
      }
   }

//------------------------------------------------------------------------------

WitSelPt * WitPrCoord::mySelPtFor (WitRtSite * theRtSite, WitPeriod thePer)
   {
   return myPrSelPtFor (theRtSite, thePer);
   }

//------------------------------------------------------------------------------

WitAltPt * WitPrCoord::myAltPtFor (WitRtCand * theRtCand, WitPeriod thePer)
   {
   WitPrAltPt * thePrAltPt;

   thePrAltPt = myPrAltPtFor (theRtCand, thePer);

   if (thePrAltPt == NULL)
      return NULL;

   witAssert (thePrAltPt->active ());

   if (thePrAltPt->myPrSelPt ()->nAllowedRtCands () == 1)
      return NULL;

   return thePrAltPt;
   }

//------------------------------------------------------------------------------

WitPrAltPt * WitPrCoord::myPrAltPtFor (WitRtCand * theRtCand, WitPeriod thePer)
   {
   if (not myPrAltPts_.myPtrTVecAt (theRtCand).isAllocated ())
      return NULL;

   return myPrAltPts_.myPtrAt (theRtCand, thePer);
   }

//------------------------------------------------------------------------------

bool WitPrCoord::selIsSplit (WitRtSite * theRtSite, WitPeriod thePer)
   {
   WitPrSelPt * thePrSelPt;

   if (not mySelector_->selSplit ())
      return false;

   thePrSelPt = myPrSelPtFor (theRtSite, thePer);

   if (thePrSelPt == NULL)
      return false;

   return thePrSelPt->isSplit ();
   }

//------------------------------------------------------------------------------

void WitPrCoord::defineSplit (
      WitRtSite *         theRtSite, 
      WitPeriod           thePer,
      double              expVol,
      WitRtCandDblStack & theExpPairs,
      double &            unbddVol)
   {
   WitSelCand * theSelCand;
   double       splitVol;
   WitRtCand *  theRtCand;
   double       propExpVol;

   WitSelCandDblStack theSplitPairs (myProblem ());
   WitRtCandStack     theRtCands    (myProblem ());
   WitRtCandDblStack  localExpPairs (myProblem ());

   witAssert (selIsSplit (theRtSite, thePer));

   witAssert (expVol >= NET_TOL);

   theExpPairs.clear ();

   myPrSelPtFor (theRtSite, thePer)->
      mySplitPt ()->
         defineSplit (expVol, theSplitPairs, unbddVol);

   while (theSplitPairs.pop (theSelCand, splitVol))
      {
      theSelCand->getPrData (theRtCands);

      defineExpPairs (
         theRtCands,
         thePer,
         splitVol,
         localExpPairs);

      localExpPairs.reverse ();

      while (localExpPairs.pop (theRtCand, propExpVol))
         theExpPairs.push (theRtCand, propExpVol);
      }

   if (selPrintLevelAt (3))
      printPropExp (theRtSite, thePer, expVol - unbddVol, theExpPairs, true);
   }

//------------------------------------------------------------------------------

void WitPrCoord::recordFlowSS (
      WitRtSite * theRtSite,
      WitPeriod   thePer,
      double      incFlowVol)
   {
   WitPrSelPt * thePrSelPt;

   thePrSelPt = myPrSelPtFor (theRtSite, thePer);

   if (thePrSelPt == NULL)
      return;

   thePrSelPt->recordFlowSS (incFlowVol);
   }

//------------------------------------------------------------------------------

void WitPrCoord::printPropExp (
      WitRtSite *               theRtSite, 
      WitPeriod                 thePer,
      double                    expVol,
      const WitRtCandDblStack & theExpPairs,
      bool                      bddSplit)
   {
   WitPairStItr <WitRtCand, double> theItr;
   WitRtCand *                      theRtCand;
   double                           propExpVol;

   if (not mySelector_->myHeurAtor ()->permCommActive ())
      return;

   fprintf (msgFile (),
      "\n"
      "Proportionate Explosion%s:\n\n",
      bddSplit? " (Bounded Split)": "");

   theRtSite->printID (4, 22);

   fprintf (msgFile (),
      "   Period:           %d\n"
      "   Exp Vol:          %.3f\n",
      thePer,
      expVol);

   theExpPairs.attachItr (theItr);

   while (theItr.advance (theRtCand, propExpVol))
      {
      fprintf (msgFile (), "\n");

      theRtCand->printID (7, 22);

      fprintf (msgFile (), "      Prop Vol:      %.3f\n", propExpVol);
      }
   }

//------------------------------------------------------------------------------

void WitPrCoord::buildPrSelPts ()
   {
   WitRtSite * theRtSite;
   WitPeriod   thePer;

   myPrSelPts_.allocate1D (myProblem ());

   forEachEl (theRtSite, myRtMgr_->myRtSites ())
      if (theRtSite->myRtCands ().nElements () > 1)
         if (theRtSite->propRtg () != false)
            {
            myPrSelPts_.myPtrTVecAt (theRtSite).allocate (myProblem ());

            forEachPeriod (thePer, myProblem ())
               if (theRtSite->explodeable (thePer))
                  if (theRtSite->propRtg ()[thePer])
                     myPrSelPts_.myPtrAt (theRtSite, thePer) =
                        new WitPrSelPt   (theRtSite, thePer, this);
            }
   }

//------------------------------------------------------------------------------

void WitPrCoord::buildPrAltPts ()
   {
   WitRtCand *  theRtCand;
   WitRtSite *  theRtSite;
   WitPeriod    thePer;
   WitPrSelPt * thePrSelPt;

   myPrAltPts_.allocate1D (myProblem ());

   forEachEl (theRtCand, myRtMgr_->myRtCands ())
      {
      theRtSite = theRtCand->myRtSite ();

      if (not myPrSelPts_.myPtrTVecAt (theRtSite).isAllocated ())
         continue;

      myPrAltPts_.myPtrTVecAt (theRtCand).allocate (myProblem ());

      forEachPeriod (thePer, myProblem ())
         {
         if (not theRtCand->isEligible (thePer))
            continue;

         thePrSelPt = myPrSelPtFor (theRtSite, thePer);

         if (thePrSelPt == NULL)
            continue;

         myPrAltPts_.myPtrAt (theRtCand, thePer) =
            new WitPrAltPt (thePrSelPt, theRtCand, this);
         }
      }
   }

//------------------------------------------------------------------------------

void WitPrCoord::findActiveRtCands (
      WitRtSite *      theRtSite,
      WitPeriod        thePer,
      WitRtCandStack & theRtCands)
   {
   WitRtCand *  theRtCand;
   WitPrAltPt * thePrAltPt;

   witAssert (myPrSelPtFor (theRtSite, thePer) != NULL);

   theRtCands.clear ();

   forEachEl (theRtCand, theRtSite->myRtCands ())
      {
      thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);

      if (thePrAltPt != NULL)
         if (thePrAltPt->active ())
            theRtCands.push (theRtCand);
      }

   theRtCands.reverse ();
   }

//------------------------------------------------------------------------------

void WitPrCoord::defineExpPairs (
      const WitRtCandStack & theRtCands,
      WitPeriod              thePer,
      double                 expVol,
      WitRtCandDblStack &    theExpPairs)
   {
   double                  totShare;
   WitObjStItr <WitRtCand> theItr;
   WitRtCand *             theRtCand;
   double                  expVolPerShare;
   double                  propExpVol;

   witAssert (theRtCands.isNonEmpty ());

   totShare = 0.0;

   theRtCands.attachItr (theItr);

   while (theItr.advance (theRtCand))
      totShare += theRtCand->myBillEnt ()->routingShare ()[thePer];

   expVolPerShare = expVol / totShare;

   theExpPairs.clear ();

   theRtCands.attachItr (theItr);

   while (theItr.advance (theRtCand))
      {
      propExpVol =
         expVolPerShare * theRtCand->myBillEnt ()->routingShare ()[thePer];

      theExpPairs.push (theRtCand, propExpVol);
      }

   witAssert (theExpPairs.isNonEmpty ());

   theExpPairs.reverse ();
   }

//------------------------------------------------------------------------------

WitPrSelPt * WitPrCoord::myPrSelPtFor (WitRtSite * theRtSite, WitPeriod thePer)
   {
   if (not myPrSelPts_.myPtrTVecAt (theRtSite).isAllocated ())
      return NULL;

   return myPrSelPts_.myPtrAt (theRtSite, thePer);
   }

//------------------------------------------------------------------------------
// Implementation of class PrSelMgr.
//------------------------------------------------------------------------------

WitPrSelMgr::~WitPrSelMgr ()
   {
   }

//------------------------------------------------------------------------------

WitPrSelMgr::WitPrSelMgr (WitPrCoord * thePrCoord):

      WitSelMgr  (thePrCoord->mySelector ()),
      myPrCoord_ (thePrCoord)
   {
   }

//------------------------------------------------------------------------------

bool WitPrSelMgr::selSplitNeeded ()
   {
   return myGlobalComp ()->selSplit ();
   }

//------------------------------------------------------------------------------
// Implementation of class PprSelMgr.
//------------------------------------------------------------------------------

WitPprSelMgr::WitPprSelMgr (WitPrCoord * thePrCoord):

      WitPrSelMgr (thePrCoord)
   {
   }

//------------------------------------------------------------------------------

WitPprSelMgr::~WitPprSelMgr ()
   {
   }

//------------------------------------------------------------------------------

WitAltPt * WitPprSelMgr::myAltPtFor (
      WitBopEntry * theBopEnt,
      WitConsEntry *,
      WitPeriod     execPer,
      WitPeriod)
   {
   WitRtCand * theRtCand;
   WitPeriod   expPer;

   theRtCand = mySelector ()->myRtMgr ()->myRtCandFor (theBopEnt);

   expPer    = theBopEnt->impactPeriod ()[execPer];

   return myPrCoord ()->myAltPtFor (theRtCand, expPer);
   }

//------------------------------------------------------------------------------

bool WitPprSelMgr::validForNetting ()
   {
   return true;
   }

//------------------------------------------------------------------------------

bool WitPprSelMgr::validForExecBounds ()
   {
   return true;
   }

//------------------------------------------------------------------------------

bool WitPprSelMgr::validForLTBounds ()
   {
   return false;
   }

//------------------------------------------------------------------------------

const char * WitPprSelMgr::selCaseName ()
   {
   return "Production Proportionate Routing";
   }

//------------------------------------------------------------------------------
// Implementation of class CprSelMgr.
//------------------------------------------------------------------------------

WitCprSelMgr::WitCprSelMgr (WitPrCoord * thePrCoord):

      WitPrSelMgr (thePrCoord)
   {
   }

//------------------------------------------------------------------------------

WitCprSelMgr::~WitCprSelMgr ()
   {
   }

//------------------------------------------------------------------------------

WitAltPt * WitCprSelMgr::myAltPtFor (
      WitBopEntry *,
      WitConsEntry * theConsEnt,
      WitPeriod      execPer,
      WitPeriod)
   {
   WitRtCand * theRtCand;

   theRtCand = mySelector ()->myRtMgr ()->myRtCandFor (theConsEnt);

   return myPrCoord ()->myAltPtFor (theRtCand, execPer);
   }

//------------------------------------------------------------------------------

bool WitCprSelMgr::validForNetting ()
   {
   return false;
   }

//------------------------------------------------------------------------------

bool WitCprSelMgr::validForExecBounds ()
   {
   return false;
   }

//------------------------------------------------------------------------------

bool WitCprSelMgr::validForLTBounds ()
   {
   return false;
   }

//------------------------------------------------------------------------------

const char * WitCprSelMgr::selCaseName ()
   {
   return "Consumption Proportionate Routing";
   }

//------------------------------------------------------------------------------
// Implementation of class PrSelPt.
//------------------------------------------------------------------------------

WitPrSelPt::WitPrSelPt (
         WitRtSite *  theRtSite,
         WitPeriod    thePer,
         WitPrCoord * thePrCoord):

      WitSelPt         (),
      myRtSite_        (theRtSite),
      myPer_           (thePer),
      myPrCoord_       (thePrCoord),
      nAllowedRtCands_ (0)
   {
   }

//------------------------------------------------------------------------------

WitPrSelPt::~WitPrSelPt ()
   {
   }

//------------------------------------------------------------------------------

void WitPrSelPt::print ()
   {
   fprintf (myPrCoord_->msgFile (),
      "\n"
      "Proportionate Routing Point:\n"
      "\n");

   myRtSite_->printID          (4, 22);
   myRtSite_->printPer (myPer_, 4, 22);
   }

//------------------------------------------------------------------------------

void WitPrSelPt::incAllowedRtCands (int delta)
   {
   if (myPrCoord_->mySelector ()->sglSrc ())
      myPrCoord_->
         mySelector ()->
            mySglSrcMgr ()->
               saveConfigVal (nAllowedRtCands_);

   nAllowedRtCands_ += delta;

   witAssert (nAllowedRtCands_ >= 1);
   }

//------------------------------------------------------------------------------

void WitPrSelPt::printAllowedRtCands ()
   {
   WitRtCand *  theRtCand;
   WitPrAltPt * thePrAltPt;

   fprintf (myPrCoord_->msgFile (),
      "\n"
      "   Allowed Routing Candidates:\n");

   forEachEl (theRtCand, myRtSite_->myRtCands ())
      {
      thePrAltPt = myPrCoord_->myPrAltPtFor (theRtCand, myPer_);

      if (thePrAltPt != NULL)
         if (thePrAltPt->allowed ())
            theRtCand->printID (7, 22);
      }
   }

//------------------------------------------------------------------------------

WitSelMgr * WitPrSelPt::mySelMgr ()
   {
   return
      myRtSite_->isForProd ()?
         myPrCoord_->myPrSelMgrForProd ():
         myPrCoord_->myPrSelMgrForCons ();
   }

//------------------------------------------------------------------------------

void WitPrSelPt::prtID () 
   {
   myRtSite_->printID (4, 22);

   fprintf (myRtSite_->msgFile (), "   Period:           %d\n", myPer_);
   }

//------------------------------------------------------------------------------

bool WitPrSelPt::splittable () 
   {
   if (myPrCoord_->myGlobalComp ()->selSplit ())
      return true;

   if (myPrCoord_->myGlobalComp ()->nonMrSelSplit ())
      return true;

   return false;
   }

//------------------------------------------------------------------------------

void WitPrSelPt::getSortData (WitPart * & thePart, WitPeriod & thePer)
   {
   thePart = myRtSite_->mrSortPart ();

   thePer  = myPer_;
   }

//------------------------------------------------------------------------------

WitSelCand * WitPrSelPt::newSelCand ()
   {
   return new WitPrCand (myPrCoord_, myRtSite_, myPer_);
   }

//------------------------------------------------------------------------------
// Implementation of class PrAltPt.
//------------------------------------------------------------------------------

WitPrAltPt::WitPrAltPt (
         WitPrSelPt * thePrSelPt,
         WitRtCand *  theRtCand,
         WitPrCoord * thePrCoord):

      WitAltPt   (),
      myPrSelPt_ (thePrSelPt),
      myRtCand_  (theRtCand),
      myPrCoord_ (thePrCoord),
      active_    (true),
      allowed_   (true)
   {  
   witAssert (myPrSelPt_ != NULL);

   myPrSelPt_->incAllowedRtCands (+1);
   }

//------------------------------------------------------------------------------

WitPrAltPt::~WitPrAltPt ()
   {
   }

//------------------------------------------------------------------------------

void WitPrAltPt::setStatus (bool activeVal, bool allowedVal)
   {
   if (DEBUG_MODE)
      {
      if (activeVal)
         witAssert (allowedVal);

      if (not myPrCoord_->mySelector ()->tbprMode ())
         witAssert (activeVal == allowedVal);
      }

   if (myPrCoord_->mySelector ()->sglSrc ())
      {
      myPrCoord_->mySelector ()->mySglSrcMgr ()->saveConfigVal (allowed_);
      myPrCoord_->mySelector ()->mySglSrcMgr ()->saveConfigVal (active_);
      }

   if (allowedVal != allowed_)
      myPrSelPt_->incAllowedRtCands (allowedVal? +1: -1);

   allowed_ = allowedVal;
   active_  = activeVal;
   }

//------------------------------------------------------------------------------

void WitPrAltPt::recoverInitState ()
   {
   if (not allowed_)
      myPrSelPt_->incAllowedRtCands (+1);

   allowed_ = true;
   active_  = true;

   if (myPrCoord_->selPrintLevelAt (3))
      printRecovery ();
   }

//------------------------------------------------------------------------------

bool WitPrAltPt::hasResAlt ()
   {
   return (myPrSelPt_->nAllowedRtCands () > 1);
   }

//------------------------------------------------------------------------------

void WitPrAltPt::alterSelection ()
   {
   witAssert (myPrSelPt_->nAllowedRtCands () > 1);

   setStatus (false, false);
   }

//------------------------------------------------------------------------------

void WitPrAltPt::storeRecoveryPt ()
   {
   myPrCoord_->storeRecoveryPair (myRtCand_, myPrSelPt_->myPer ());
   }

//------------------------------------------------------------------------------

void WitPrAltPt::tempAlterSel ()
   {
   witAssert (active_);
   witAssert (allowed_);

   witAssert (myPrSelPt_->nAllowedRtCands () > 1);

   setStatus (false, false);
   }

//------------------------------------------------------------------------------

void WitPrAltPt::cancelTempAlt ()
   {
   witAssert (not active_);
   witAssert (not allowed_);

   setStatus (true, true);
   }

//------------------------------------------------------------------------------

WitSelPt * WitPrAltPt::mySelPt ()
   {
   return myPrSelPt_;
   }

//------------------------------------------------------------------------------

void WitPrAltPt::printAlteration ()
   {
   if (not myRtCand_->selPrintLevelAt (3))
      return;

   fprintf (myRtCand_->msgFile (),
      "\n"
      "Proportionate Routing Candidate Disallowance:\n\n");

   myRtCand_->myRtSite ()->printID                        (4, 22);
   myRtCand_->myRtSite ()->printPer (myPrSelPt_->myPer (), 4, 22);
   myRtCand_->             printID                        (7, 22);

   myPrSelPt_->printAllowedRtCands ();
   }

//------------------------------------------------------------------------------

void WitPrAltPt::printRecovery ()
   {
   fprintf (myRtCand_->msgFile (),
      "   Proportionate Routing Candidate Recovered:\n");

   myRtCand_->myRtSite ()->printID                        (4, 22);
   myRtCand_->myRtSite ()->printPer (myPrSelPt_->myPer (), 4, 22);
   myRtCand_->             printID                        (7, 22);

   fprintf (myRtCand_->msgFile (), "\n");
   }

//------------------------------------------------------------------------------
// Implementation of class PrCand.
//------------------------------------------------------------------------------

WitPrCand::WitPrCand (
         WitPrCoord * thePrCoord,
         WitRtSite *  theRtSite,
         WitPeriod    thePer):

      WitSelCand  (thePrCoord->myProblem ()),
      actRtCands_ (myProblem ())
   {
   WitRtCand * theRtCand;

   forEachEl (theRtCand, theRtSite->myRtCands ())
      if (thePrCoord->active (theRtCand, thePer))
         actRtCands_.push (theRtCand);

   actRtCands_.reverse ();

   witAssert (actRtCands_.isNonEmpty ());
   }

//------------------------------------------------------------------------------

WitPrCand::~WitPrCand ()
   {
   }

//------------------------------------------------------------------------------

void WitPrCand::prtID ()
   {
   WitObjStItr <WitRtCand> theItr;
   WitRtCand *             theRtCand;

   actRtCands_.attachItr (theItr);

   while (theItr.advance (theRtCand))
      theRtCand->printID (7, 22);
   }

//------------------------------------------------------------------------------

void WitPrCand::getPrData (WitRtCandStack & theRtCands)
   {
   theRtCands.revCopyFrom (actRtCands_);

   theRtCands.reverse ();
   }
@


1.33
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.32
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d52 6
a57 6
WitProbAssoc (theSelector),
myPrCoord_   (NULL),
myRtMgr_     (theSelector->myRtMgr ())
{
myPrCoord_ = new WitPrCoord (theSelector);
}
d62 3
a64 3
{
delete myPrCoord_;
}
d69 11
a79 11
{
WitPart *     thePart;
WitBomEntry * theBomEnt;

forEachPart (thePart, theProblem)
if (thePart->propRtg () != false)
return true;

forEachBomEntry (theBomEnt, theProblem)
if (theBomEnt->propRtg () != false)
return true;
d81 2
a82 2
return false;
}
d87 3
a89 3
{
myPrCoord_->print ();
}
d94 7
a100 7
WitRtSite *         theRtSite,
WitPeriod           thePer,
double              expVol,
WitRtCandDblStack & theExpPairs)
{
myPrCoord_->definePropExp (theRtSite, thePer, expVol, theExpPairs);
}
d105 6
a110 6
WitPart *           thePart,
WitPeriod           expPer,
double              expVol,
WitRtCandDblStack & theExpPairs)
{
WitRtSite * theRtSite;
d112 1
a112 1
theRtSite = myRtMgr_->myRtSiteFor (thePart);
d114 2
a115 2
myPrCoord_->definePropExp (theRtSite, expPer, expVol, theExpPairs);
}
d120 6
a125 6
WitBomEntry *       theBomEnt,
WitPeriod           execPer,
double              expVol,
WitRtCandDblStack & theExpPairs)
{
WitRtSite * theRtSite;
d127 1
a127 1
theRtSite = myRtMgr_->myRtSiteFor (theBomEnt);
d129 2
a130 2
myPrCoord_->definePropExp (theRtSite, execPer, expVol, theExpPairs);
}
d135 3
a137 3
{
return myPrCoord_->active (theRtCand, thePer);
}
d142 6
a147 6
WitRtCand * theRtCand,
WitPeriod   thePer,
bool        theValue)
{
myPrCoord_->setActive (theRtCand, thePer, theValue);
}
d152 3
a154 3
{
return myPrCoord_->allowed (theRtCand, thePer);
}
d159 3
a161 3
{
return myPrCoord_->mySelPtFor (theRtSite, thePer);
}
d166 3
a168 3
{
myPrCoord_->storeRecoveryPair (theRtCand, thePer);
}
d173 3
a175 3
{
myPrCoord_->recoverInitState ();
}
d180 2
a181 2
{
WitRtSite * theRtSite;
d183 1
a183 1
theRtSite = myRtMgr_->myRtSiteFor (thePart);
d185 2
a186 2
return myPrCoord_->selIsSplit (theRtSite, expPer);
}
d191 2
a192 2
{
WitRtSite * theRtSite;
d194 1
a194 1
theRtSite = myRtMgr_->myRtSiteFor (theBomEnt);
d196 2
a197 2
return myPrCoord_->selIsSplit (theRtSite, execPer);
}
d202 17
a218 17
WitPart *           thePart,
WitPeriod           expPer,
double              expVol,
WitRtCandDblStack & theExpPairs,
double &            unbddVol)
{
WitRtSite * theRtSite;

theRtSite = myRtMgr_->myRtSiteFor (thePart);

myPrCoord_->defineSplit (
theRtSite,
expPer,
expVol,
theExpPairs,
unbddVol);
}
d223 17
a239 17
WitBomEntry *       theBomEnt,
WitPeriod           execPer,
double              expVol,
WitRtCandDblStack & theExpPairs,
double &            unbddVol)
{
WitRtSite * theRtSite;

theRtSite = myRtMgr_->myRtSiteFor (theBomEnt);

myPrCoord_->defineSplit (
theRtSite,
execPer,
expVol,
theExpPairs,
unbddVol);
}
d244 5
a248 5
WitPart * thePart,
WitPeriod expPer,
double    incFlowVol)
{
WitRtSite * theRtSite;
d250 1
a250 1
theRtSite = myRtMgr_->myRtSiteFor (thePart);
d252 2
a253 2
myPrCoord_->recordFlowSS (theRtSite, expPer, incFlowVol);
}
d258 5
a262 5
WitBomEntry * theBomEnt,
WitPeriod     execPer,
double        incFlowVol)
{
WitRtSite * theRtSite;
d264 1
a264 1
theRtSite = myRtMgr_->myRtSiteFor (theBomEnt);
d266 2
a267 2
myPrCoord_->recordFlowSS (theRtSite, execPer, incFlowVol);
}
d272 3
a274 3
{
return myPrCoord_->myPrSelMgrForProd ();
}
d279 3
a281 3
{
return myPrCoord_->myPrSelMgrForCons ();
}
d289 17
a305 17
WitProbAssoc       (theSelector),
mySelector_        (theSelector),
myRtMgr_           (theSelector->myRtMgr ()),
myPrSelMgrForProd_ (NULL),
myPrSelMgrForCons_ (NULL),
myPrSelPts_        (),
myPrAltPts_        (),
myRecoveryPairs_   (myProblem ())
{
myMsgFac () ("propRtgMsg");

myPrSelMgrForProd_ = new WitPprSelMgr (this);
myPrSelMgrForCons_ = new WitCprSelMgr (this);

buildPrSelPts ();
buildPrAltPts ();
}
d310 18
a327 18
{
WitRtCand * theRtCand;
WitRtSite * theRtSite;
WitPeriod   thePer;

forEachEl (theRtCand, myRtMgr_->myRtCands ())
if (myPrAltPts_.myPtrTVecAt (theRtCand).isAllocated ())
forEachPeriod (thePer, myProblem ())
delete myPrAltPts_.myPtrAt (theRtCand, thePer);

forEachEl (theRtSite, myRtMgr_->myRtSites ())
if (myPrSelPts_.myPtrTVecAt (theRtSite).isAllocated ())
forEachPeriod (thePer, myProblem ())
delete myPrSelPtFor (theRtSite, thePer);

delete myPrSelMgrForCons_;
delete myPrSelMgrForProd_;
}
d332 16
a347 16
{
WitRtSite *  theRtSite;
WitPeriod    thePer;
WitPrSelPt * thePrSelPt;

fprintf (msgFile (),
"\n"
"Proportionate Routing Status:\n");

forEachEl (theRtSite, myRtMgr_->myRtSites ())
forEachPeriod (thePer, myProblem ())
{
thePrSelPt = myPrSelPtFor (theRtSite, thePer);

if (thePrSelPt == NULL)
continue;
d349 1
a349 1
thePrSelPt->print ();
d351 2
a352 2
thePrSelPt->printAllowedRtCands ();
}
d354 2
a355 2
fprintf (msgFile (), "\n");
}
d360 32
a391 32
WitRtSite *         theRtSite,
WitPeriod           thePer,
double              expVol,
WitRtCandDblStack & theExpPairs)
{
WitRtCandStack theRtCands (myProblem ());
WitRtCand *    theRtCand;

witAssert (theRtSite->propRtg ()[thePer]);

theExpPairs.clear ();

if (theRtSite->myRtCands ().nElements () > 1)
{
findActiveRtCands (theRtSite, thePer, theRtCands);

defineExpPairs (theRtCands, thePer, expVol, theExpPairs);
}
else
{
witAssert (theRtSite->myRtCands ().nElements () == 1);

theRtCand = theRtSite->myRtCands ().first ();

witAssert (theRtCand->isEligible (thePer));

theExpPairs.push (theRtCand, expVol);
}

if (selPrintLevelAt (3))
printPropExp (theRtSite, thePer, expVol, theExpPairs, false);
}
d396 2
a397 2
{
WitPrAltPt * thePrAltPt;
d399 1
a399 1
witAssert (theRtCand->myRtSite ()->propRtg ()[thePer]);
d401 3
a403 3
if (myPrAltPts_.myPtrTVecAt (theRtCand).isAllocated ())
{
thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);
d405 3
a407 3
if (thePrAltPt != NULL)
return thePrAltPt->active ();
}
d409 3
a411 3
if (theRtCand->myRtSite ()->myRtCands ().nElements () == 1)
if (theRtCand->isEligible (thePer))
return true;
d413 2
a414 2
return false;
}
d419 5
a423 5
WitRtCand * theRtCand,
WitPeriod   thePer,
bool        theValue)
{
WitPrAltPt * thePrAltPt;
d425 1
a425 1
witAssert (mySelector_->tbprMode ());
d427 1
a427 1
witAssert (theRtCand->myRtSite ()->propRtg ()[thePer]);
d429 1
a429 1
thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);
d431 1
a431 1
witAssert (thePrAltPt != NULL);
d433 1
a433 1
witAssert (thePrAltPt->allowed ());
d435 2
a436 2
thePrAltPt->setStatus (theValue, true);
}
d441 2
a442 2
{
WitPrAltPt * thePrAltPt;
d444 1
a444 1
witAssert (theRtCand->myRtSite ()->propRtg ()[thePer]);
d446 3
a448 3
if (myPrAltPts_.myPtrTVecAt (theRtCand).isAllocated ())
{
thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);
d450 3
a452 3
if (thePrAltPt != NULL)
return thePrAltPt->allowed ();
}
d454 3
a456 3
if (theRtCand->myRtSite ()->myRtCands ().nElements () == 1)
if (theRtCand->isEligible (thePer))
return true;
d458 2
a459 2
return false;
}
d464 3
a466 3
{
myRecoveryPairs_.push (theRtCand, thePer);
}
d471 9
a479 9
{
WitRtCand * theRtCand;
WitPeriod   thePer;

while (myRecoveryPairs_.pop (theRtCand, thePer))
{
myPrAltPts_.myPtrAt (theRtCand, thePer)->recoverInitState ();
}
}
d484 3
a486 3
{
return myPrSelPtFor (theRtSite, thePer);
}
d491 2
a492 2
{
WitPrAltPt * thePrAltPt;
d494 1
a494 1
thePrAltPt = myPrAltPtFor (theRtCand, thePer);
d496 2
a497 2
if (thePrAltPt == NULL)
return NULL;
d499 1
a499 1
witAssert (thePrAltPt->active ());
d501 2
a502 2
if (thePrAltPt->myPrSelPt ()->nAllowedRtCands () == 1)
return NULL;
d504 2
a505 2
return thePrAltPt;
}
d510 3
a512 3
{
if (not myPrAltPts_.myPtrTVecAt (theRtCand).isAllocated ())
return NULL;
d514 2
a515 2
return myPrAltPts_.myPtrAt (theRtCand, thePer);
}
d520 2
a521 2
{
WitPrSelPt * thePrSelPt;
d523 2
a524 2
if (not mySelector_->selSplit ())
return false;
d526 1
a526 1
thePrSelPt = myPrSelPtFor (theRtSite, thePer);
d528 2
a529 2
if (thePrSelPt == NULL)
return false;
d531 2
a532 2
return thePrSelPt->isSplit ();
}
d537 44
a580 44
WitRtSite *         theRtSite,
WitPeriod           thePer,
double              expVol,
WitRtCandDblStack & theExpPairs,
double &            unbddVol)
{
WitSelCand * theSelCand;
double       splitVol;
WitRtCand *  theRtCand;
double       propExpVol;

WitSelCandDblStack theSplitPairs (myProblem ());
WitRtCandStack     theRtCands    (myProblem ());
WitRtCandDblStack  localExpPairs (myProblem ());

witAssert (selIsSplit (theRtSite, thePer));

witAssert (expVol >= NET_TOL);

theExpPairs.clear ();

myPrSelPtFor (theRtSite, thePer)->
mySplitPt ()->
defineSplit (expVol, theSplitPairs, unbddVol);

while (theSplitPairs.pop (theSelCand, splitVol))
{
theSelCand->getPrData (theRtCands);

defineExpPairs (
theRtCands,
thePer,
splitVol,
localExpPairs);

localExpPairs.reverse ();

while (localExpPairs.pop (theRtCand, propExpVol))
theExpPairs.push (theRtCand, propExpVol);
}

if (selPrintLevelAt (3))
printPropExp (theRtSite, thePer, expVol - unbddVol, theExpPairs, true);
}
d585 5
a589 5
WitRtSite * theRtSite,
WitPeriod   thePer,
double      incFlowVol)
{
WitPrSelPt * thePrSelPt;
d591 1
a591 1
thePrSelPt = myPrSelPtFor (theRtSite, thePer);
d593 2
a594 2
if (thePrSelPt == NULL)
return;
d596 2
a597 2
thePrSelPt->recordFlowSS (incFlowVol);
}
d602 37
a638 37
WitRtSite *               theRtSite,
WitPeriod                 thePer,
double                    expVol,
const WitRtCandDblStack & theExpPairs,
bool                      bddSplit)
{
WitPairStItr <WitRtCand, double> theItr;
WitRtCand *                      theRtCand;
double                           propExpVol;

if (not mySelector_->myHeurAtor ()->permCommActive ())
return;

fprintf (msgFile (),
"\n"
"Proportionate Explosion%s:\n\n",
bddSplit? " (Bounded Split)": "");

theRtSite->printID (4, 22);

fprintf (msgFile (),
"   Period:           %d\n"
"   Exp Vol:          %.3f\n",
thePer,
expVol);

theExpPairs.attachItr (theItr);

while (theItr.advance (theRtCand, propExpVol))
{
fprintf (msgFile (), "\n");

theRtCand->printID (7, 22);

fprintf (msgFile (), "      Prop Vol:      %.3f\n", propExpVol);
}
}
d643 19
a661 19
{
WitRtSite * theRtSite;
WitPeriod   thePer;

myPrSelPts_.allocate1D (myProblem ());

forEachEl (theRtSite, myRtMgr_->myRtSites ())
if (theRtSite->myRtCands ().nElements () > 1)
if (theRtSite->propRtg () != false)
{
myPrSelPts_.myPtrTVecAt (theRtSite).allocate (myProblem ());

forEachPeriod (thePer, myProblem ())
if (theRtSite->explodeable (thePer))
if (theRtSite->propRtg ()[thePer])
myPrSelPts_.myPtrAt (theRtSite, thePer) =
new WitPrSelPt   (theRtSite, thePer, this);
}
}
d666 32
a697 32
{
WitRtCand *  theRtCand;
WitRtSite *  theRtSite;
WitPeriod    thePer;
WitPrSelPt * thePrSelPt;

myPrAltPts_.allocate1D (myProblem ());

forEachEl (theRtCand, myRtMgr_->myRtCands ())
{
theRtSite = theRtCand->myRtSite ();

if (not myPrSelPts_.myPtrTVecAt (theRtSite).isAllocated ())
continue;

myPrAltPts_.myPtrTVecAt (theRtCand).allocate (myProblem ());

forEachPeriod (thePer, myProblem ())
{
if (not theRtCand->isEligible (thePer))
continue;

thePrSelPt = myPrSelPtFor (theRtSite, thePer);

if (thePrSelPt == NULL)
continue;

myPrAltPts_.myPtrAt (theRtCand, thePer) =
new WitPrAltPt (thePrSelPt, theRtCand, this);
}
}
}
d702 19
a720 19
WitRtSite *      theRtSite,
WitPeriod        thePer,
WitRtCandStack & theRtCands)
{
WitRtCand *  theRtCand;
WitPrAltPt * thePrAltPt;

witAssert (myPrSelPtFor (theRtSite, thePer) != NULL);

theRtCands.clear ();

forEachEl (theRtCand, theRtSite->myRtCands ())
{
thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);

if (thePrAltPt != NULL)
if (thePrAltPt->active ())
theRtCands.push (theRtCand);
}
d722 2
a723 2
theRtCands.reverse ();
}
d728 10
a737 10
const WitRtCandStack & theRtCands,
WitPeriod              thePer,
double                 expVol,
WitRtCandDblStack &    theExpPairs)
{
double                  totShare;
WitObjStItr <WitRtCand> theItr;
WitRtCand *             theRtCand;
double                  expVolPerShare;
double                  propExpVol;
d739 1
a739 1
witAssert (theRtCands.isNonEmpty ());
d741 1
a741 1
totShare = 0.0;
d743 1
a743 1
theRtCands.attachItr (theItr);
d745 2
a746 2
while (theItr.advance (theRtCand))
totShare += theRtCand->myBillEnt ()->routingShare ()[thePer];
d748 1
a748 1
expVolPerShare = expVol / totShare;
d750 1
a750 1
theExpPairs.clear ();
d752 1
a752 1
theRtCands.attachItr (theItr);
d754 4
a757 4
while (theItr.advance (theRtCand))
{
propExpVol =
expVolPerShare * theRtCand->myBillEnt ()->routingShare ()[thePer];
d759 2
a760 2
theExpPairs.push (theRtCand, propExpVol);
}
d762 1
a762 1
witAssert (theExpPairs.isNonEmpty ());
d764 2
a765 2
theExpPairs.reverse ();
}
d770 3
a772 3
{
if (not myPrSelPts_.myPtrTVecAt (theRtSite).isAllocated ())
return NULL;
d774 2
a775 2
return myPrSelPts_.myPtrAt (theRtSite, thePer);
}
d782 2
a783 2
{
}
d789 4
a792 4
WitSelMgr  (thePrCoord->mySelector ()),
myPrCoord_ (thePrCoord)
{
}
d797 3
a799 3
{
return myGlobalComp ()->selSplit ();
}
d807 3
a809 3
WitPrSelMgr (thePrCoord)
{
}
d814 2
a815 2
{
}
d820 7
a826 7
WitBopEntry * theBopEnt,
WitConsEntry *,
WitPeriod     execPer,
WitPeriod)
{
WitRtCand * theRtCand;
WitPeriod   expPer;
d828 1
a828 1
theRtCand = mySelector ()->myRtMgr ()->myRtCandFor (theBopEnt);
d830 1
a830 1
expPer    = theBopEnt->impactPeriod ()[execPer];
d832 2
a833 2
return myPrCoord ()->myAltPtFor (theRtCand, expPer);
}
d838 3
a840 3
{
return true;
}
d845 3
a847 3
{
return true;
}
d852 3
a854 3
{
return false;
}
d859 3
a861 3
{
return "Production Proportionate Routing";
}
d869 3
a871 3
WitPrSelMgr (thePrCoord)
{
}
d876 2
a877 2
{
}
d882 6
a887 6
WitBopEntry *,
WitConsEntry * theConsEnt,
WitPeriod      execPer,
WitPeriod)
{
WitRtCand * theRtCand;
d889 1
a889 1
theRtCand = mySelector ()->myRtMgr ()->myRtCandFor (theConsEnt);
d891 2
a892 2
return myPrCoord ()->myAltPtFor (theRtCand, execPer);
}
d897 3
a899 3
{
return false;
}
d904 3
a906 3
{
return false;
}
d911 3
a913 3
{
return false;
}
d918 3
a920 3
{
return "Consumption Proportionate Routing";
}
d927 11
a937 11
WitRtSite *  theRtSite,
WitPeriod    thePer,
WitPrCoord * thePrCoord):

WitSelPt         (),
myRtSite_        (theRtSite),
myPer_           (thePer),
myPrCoord_       (thePrCoord),
nAllowedRtCands_ (0)
{
}
d942 2
a943 2
{
}
d948 9
a956 9
{
fprintf (myPrCoord_->msgFile (),
"\n"
"Proportionate Routing Point:\n"
"\n");

myRtSite_->printID          (4, 22);
myRtSite_->printPer (myPer_, 4, 22);
}
d961 6
a966 6
{
if (myPrCoord_->mySelector ()->sglSrc ())
myPrCoord_->
mySelector ()->
mySglSrcMgr ()->
saveConfigVal (nAllowedRtCands_);
d968 1
a968 1
nAllowedRtCands_ += delta;
d970 2
a971 2
witAssert (nAllowedRtCands_ >= 1);
}
d976 17
a992 17
{
WitRtCand *  theRtCand;
WitPrAltPt * thePrAltPt;

fprintf (myPrCoord_->msgFile (),
"\n"
"   Allowed Routing Candidates:\n");

forEachEl (theRtCand, myRtSite_->myRtCands ())
{
thePrAltPt = myPrCoord_->myPrAltPtFor (theRtCand, myPer_);

if (thePrAltPt != NULL)
if (thePrAltPt->allowed ())
theRtCand->printID (7, 22);
}
}
d997 6
a1002 6
{
return
myRtSite_->isForProd ()?
myPrCoord_->myPrSelMgrForProd ():
myPrCoord_->myPrSelMgrForCons ();
}
d1006 3
a1008 3
void WitPrSelPt::prtID ()
{
myRtSite_->printID (4, 22);
d1010 2
a1011 2
fprintf (myRtSite_->msgFile (), "   Period:           %d\n", myPer_);
}
d1015 4
a1018 4
bool WitPrSelPt::splittable ()
{
if (myPrCoord_->myGlobalComp ()->selSplit ())
return true;
d1020 2
a1021 2
if (myPrCoord_->myGlobalComp ()->nonMrSelSplit ())
return true;
d1023 2
a1024 2
return false;
}
d1029 2
a1030 2
{
thePart = myRtSite_->mrSortPart ();
d1032 2
a1033 2
thePer  = myPer_;
}
d1038 3
a1040 3
{
return new WitPrCand (myPrCoord_, myRtSite_, myPer_);
}
d1047 12
a1058 12
WitPrSelPt * thePrSelPt,
WitRtCand *  theRtCand,
WitPrCoord * thePrCoord):

WitAltPt   (),
myPrSelPt_ (thePrSelPt),
myRtCand_  (theRtCand),
myPrCoord_ (thePrCoord),
active_    (true),
allowed_   (true)
{
witAssert (myPrSelPt_ != NULL);
d1060 2
a1061 2
myPrSelPt_->incAllowedRtCands (+1);
}
d1066 2
a1067 2
{
}
d1072 22
a1093 22
{
if (DEBUG_MODE)
{
if (activeVal)
witAssert (allowedVal);

if (not myPrCoord_->mySelector ()->tbprMode ())
witAssert (activeVal == allowedVal);
}

if (myPrCoord_->mySelector ()->sglSrc ())
{
myPrCoord_->mySelector ()->mySglSrcMgr ()->saveConfigVal (allowed_);
myPrCoord_->mySelector ()->mySglSrcMgr ()->saveConfigVal (active_);
}

if (allowedVal != allowed_)
myPrSelPt_->incAllowedRtCands (allowedVal? +1: -1);

allowed_ = allowedVal;
active_  = activeVal;
}
d1098 10
a1107 10
{
if (not allowed_)
myPrSelPt_->incAllowedRtCands (+1);

allowed_ = true;
active_  = true;

if (myPrCoord_->selPrintLevelAt (3))
printRecovery ();
}
d1112 3
a1114 3
{
return (myPrSelPt_->nAllowedRtCands () > 1);
}
d1119 2
a1120 2
{
witAssert (myPrSelPt_->nAllowedRtCands () > 1);
d1122 2
a1123 2
setStatus (false, false);
}
d1128 3
a1130 3
{
myPrCoord_->storeRecoveryPair (myRtCand_, myPrSelPt_->myPer ());
}
d1135 3
a1137 3
{
witAssert (active_);
witAssert (allowed_);
d1139 1
a1139 1
witAssert (myPrSelPt_->nAllowedRtCands () > 1);
d1141 2
a1142 2
setStatus (false, false);
}
d1147 3
a1149 3
{
witAssert (not active_);
witAssert (not allowed_);
d1151 2
a1152 2
setStatus (true, true);
}
d1157 3
a1159 3
{
return myPrSelPt_;
}
d1164 11
a1174 11
{
if (not myRtCand_->selPrintLevelAt (3))
return;

fprintf (myRtCand_->msgFile (),
"\n"
"Proportionate Routing Candidate Disallowance:\n\n");

myRtCand_->myRtSite ()->printID                        (4, 22);
myRtCand_->myRtSite ()->printPer (myPrSelPt_->myPer (), 4, 22);
myRtCand_->             printID                        (7, 22);
d1176 2
a1177 2
myPrSelPt_->printAllowedRtCands ();
}
d1182 7
a1188 7
{
fprintf (myRtCand_->msgFile (),
"   Proportionate Routing Candidate Recovered:\n");

myRtCand_->myRtSite ()->printID                        (4, 22);
myRtCand_->myRtSite ()->printPer (myPrSelPt_->myPer (), 4, 22);
myRtCand_->             printID                        (7, 22);
d1190 2
a1191 2
fprintf (myRtCand_->msgFile (), "\n");
}
d1198 12
a1209 12
WitPrCoord * thePrCoord,
WitRtSite *  theRtSite,
WitPeriod    thePer):

WitSelCand  (thePrCoord->myProblem ()),
actRtCands_ (myProblem ())
{
WitRtCand * theRtCand;

forEachEl (theRtCand, theRtSite->myRtCands ())
if (thePrCoord->active (theRtCand, thePer))
actRtCands_.push (theRtCand);
d1211 1
a1211 1
actRtCands_.reverse ();
d1213 2
a1214 2
witAssert (actRtCands_.isNonEmpty ());
}
d1219 2
a1220 2
{
}
d1225 9
a1233 9
{
WitObjStItr <WitRtCand> theItr;
WitRtCand *             theRtCand;

actRtCands_.attachItr (theItr);

while (theItr.advance (theRtCand))
theRtCand->printID (7, 22);
}
d1238 2
a1239 2
{
theRtCands.revCopyFrom (actRtCands_);
d1241 2
a1242 2
theRtCands.reverse ();
}
@


1.31
log
@Modifiable Heuristic Allocation
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d52 6
a57 6
      WitProbAssoc (theSelector),
      myPrCoord_   (NULL),
      myRtMgr_     (theSelector->myRtMgr ())
   {
   myPrCoord_ = new WitPrCoord (theSelector);
   }
d62 3
a64 3
   {
   delete myPrCoord_;
   }
d69 11
a79 11
   {
   WitPart *     thePart;
   WitBomEntry * theBomEnt;

   forEachPart (thePart, theProblem)
      if (thePart->propRtg () != false)
         return true;

   forEachBomEntry (theBomEnt, theProblem)
      if (theBomEnt->propRtg () != false)
         return true;
d81 2
a82 2
   return false;
   }
d87 3
a89 3
   {
   myPrCoord_->print ();
   }
d94 7
a100 7
      WitRtSite *         theRtSite, 
      WitPeriod           thePer,
      double              expVol,
      WitRtCandDblStack & theExpPairs)
   {
   myPrCoord_->definePropExp (theRtSite, thePer, expVol, theExpPairs);
   }
d105 6
a110 6
      WitPart *           thePart, 
      WitPeriod           expPer,
      double              expVol,
      WitRtCandDblStack & theExpPairs)
   {
   WitRtSite * theRtSite;
d112 1
a112 1
   theRtSite = myRtMgr_->myRtSiteFor (thePart);
d114 2
a115 2
   myPrCoord_->definePropExp (theRtSite, expPer, expVol, theExpPairs);
   }
d120 6
a125 6
      WitBomEntry *       theBomEnt, 
      WitPeriod           execPer,
      double              expVol,
      WitRtCandDblStack & theExpPairs)
   {
   WitRtSite * theRtSite;
d127 1
a127 1
   theRtSite = myRtMgr_->myRtSiteFor (theBomEnt);
d129 2
a130 2
   myPrCoord_->definePropExp (theRtSite, execPer, expVol, theExpPairs);
   }
d135 3
a137 3
   {
   return myPrCoord_->active (theRtCand, thePer);
   }
d142 6
a147 6
      WitRtCand * theRtCand,
      WitPeriod   thePer,
      bool        theValue)
   {
   myPrCoord_->setActive (theRtCand, thePer, theValue);
   }
d152 3
a154 3
   {
   return myPrCoord_->allowed (theRtCand, thePer);
   }
d159 3
a161 3
   {
   return myPrCoord_->mySelPtFor (theRtSite, thePer);
   }
d166 3
a168 3
   {
   myPrCoord_->storeRecoveryPair (theRtCand, thePer);
   }
d173 3
a175 3
   {
   myPrCoord_->recoverInitState ();
   }
d180 2
a181 2
   {
   WitRtSite * theRtSite;
d183 1
a183 1
   theRtSite = myRtMgr_->myRtSiteFor (thePart);
d185 2
a186 2
   return myPrCoord_->selIsSplit (theRtSite, expPer);
   }
d191 2
a192 2
   {
   WitRtSite * theRtSite;
d194 1
a194 1
   theRtSite = myRtMgr_->myRtSiteFor (theBomEnt);
d196 2
a197 2
   return myPrCoord_->selIsSplit (theRtSite, execPer);
   }
d202 17
a218 17
      WitPart *           thePart, 
      WitPeriod           expPer,
      double              expVol,
      WitRtCandDblStack & theExpPairs,
      double &            unbddVol)
   {
   WitRtSite * theRtSite;

   theRtSite = myRtMgr_->myRtSiteFor (thePart);

   myPrCoord_->defineSplit (
      theRtSite,
      expPer,
      expVol,
      theExpPairs,
      unbddVol);
   }
d223 17
a239 17
      WitBomEntry *       theBomEnt, 
      WitPeriod           execPer,
      double              expVol,
      WitRtCandDblStack & theExpPairs,
      double &            unbddVol)
   {
   WitRtSite * theRtSite;

   theRtSite = myRtMgr_->myRtSiteFor (theBomEnt);

   myPrCoord_->defineSplit (
      theRtSite,
      execPer,
      expVol,
      theExpPairs,
      unbddVol);
   }
d244 5
a248 5
      WitPart * thePart,
      WitPeriod expPer,
      double    incFlowVol)
   {
   WitRtSite * theRtSite;
d250 1
a250 1
   theRtSite = myRtMgr_->myRtSiteFor (thePart);
d252 2
a253 2
   myPrCoord_->recordFlowSS (theRtSite, expPer, incFlowVol);
   }
d258 5
a262 5
      WitBomEntry * theBomEnt,
      WitPeriod     execPer,
      double        incFlowVol)
   {
   WitRtSite * theRtSite;
d264 1
a264 1
   theRtSite = myRtMgr_->myRtSiteFor (theBomEnt);
d266 2
a267 2
   myPrCoord_->recordFlowSS (theRtSite, execPer, incFlowVol);
   }
d272 3
a274 3
   {
   return myPrCoord_->myPrSelMgrForProd ();
   }
d279 3
a281 3
   {
   return myPrCoord_->myPrSelMgrForCons ();
   }
d289 17
a305 17
      WitProbAssoc       (theSelector),
      mySelector_        (theSelector),
      myRtMgr_           (theSelector->myRtMgr ()),
      myPrSelMgrForProd_ (NULL),
      myPrSelMgrForCons_ (NULL),
      myPrSelPts_        (),
      myPrAltPts_        (),
      myRecoveryPairs_   (myProblem ())
   {
   myMsgFac () ("propRtgMsg");

   myPrSelMgrForProd_ = new WitPprSelMgr (this);
   myPrSelMgrForCons_ = new WitCprSelMgr (this);

   buildPrSelPts ();
   buildPrAltPts ();
   }
d310 18
a327 18
   {
   WitRtCand * theRtCand;
   WitRtSite * theRtSite;
   WitPeriod   thePer;

   forEachEl (theRtCand, myRtMgr_->myRtCands ())
      if (myPrAltPts_.myPtrTVecAt (theRtCand).isAllocated ())
         forEachPeriod (thePer, myProblem ())
            delete myPrAltPts_.myPtrAt (theRtCand, thePer);

   forEachEl (theRtSite, myRtMgr_->myRtSites ())
      if (myPrSelPts_.myPtrTVecAt (theRtSite).isAllocated ())
         forEachPeriod (thePer, myProblem ())
            delete myPrSelPtFor (theRtSite, thePer);

   delete myPrSelMgrForCons_;
   delete myPrSelMgrForProd_;
   }
d332 16
a347 16
   {
   WitRtSite *  theRtSite;
   WitPeriod    thePer;
   WitPrSelPt * thePrSelPt;

   fprintf (msgFile (),
      "\n"
      "Proportionate Routing Status:\n");

   forEachEl (theRtSite, myRtMgr_->myRtSites ())
      forEachPeriod (thePer, myProblem ())
         {
         thePrSelPt = myPrSelPtFor (theRtSite, thePer);

         if (thePrSelPt == NULL)
            continue;
d349 1
a349 1
         thePrSelPt->print ();
d351 2
a352 2
         thePrSelPt->printAllowedRtCands ();
         }
d354 2
a355 2
   fprintf (msgFile (), "\n");
   }
d360 32
a391 32
      WitRtSite *         theRtSite, 
      WitPeriod           thePer,
      double              expVol,
      WitRtCandDblStack & theExpPairs)
   {
   WitRtCandStack theRtCands (myProblem ());
   WitRtCand *    theRtCand;

   witAssert (theRtSite->propRtg ()[thePer]);

   theExpPairs.clear ();

   if (theRtSite->myRtCands ().nElements () > 1)
      {
      findActiveRtCands (theRtSite, thePer, theRtCands);

      defineExpPairs (theRtCands, thePer, expVol, theExpPairs);
      }
   else
      {
      witAssert (theRtSite->myRtCands ().nElements () == 1);

      theRtCand = theRtSite->myRtCands ().first ();

      witAssert (theRtCand->isEligible (thePer));

      theExpPairs.push (theRtCand, expVol);
      }

   if (selPrintLevelAt (3))
      printPropExp (theRtSite, thePer, expVol, theExpPairs, false);
   }
d396 2
a397 2
   {
   WitPrAltPt * thePrAltPt;
d399 1
a399 1
   witAssert (theRtCand->myRtSite ()->propRtg ()[thePer]);
d401 3
a403 3
   if (myPrAltPts_.myPtrTVecAt (theRtCand).isAllocated ())
      {
      thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);
d405 3
a407 3
      if (thePrAltPt != NULL)
         return thePrAltPt->active ();
      }
d409 3
a411 3
   if (theRtCand->myRtSite ()->myRtCands ().nElements () == 1)
      if (theRtCand->isEligible (thePer))
         return true;
d413 2
a414 2
   return false;
   }
d419 5
a423 5
      WitRtCand * theRtCand,
      WitPeriod   thePer,
      bool        theValue)
   {
   WitPrAltPt * thePrAltPt;
d425 1
a425 1
   witAssert (mySelector_->tbprMode ());
d427 1
a427 1
   witAssert (theRtCand->myRtSite ()->propRtg ()[thePer]);
d429 1
a429 1
   thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);
d431 1
a431 1
   witAssert (thePrAltPt != NULL);
d433 1
a433 1
   witAssert (thePrAltPt->allowed ());
d435 2
a436 2
   thePrAltPt->setStatus (theValue, true);
   }
d441 2
a442 2
   {
   WitPrAltPt * thePrAltPt;
d444 1
a444 1
   witAssert (theRtCand->myRtSite ()->propRtg ()[thePer]);
d446 3
a448 3
   if (myPrAltPts_.myPtrTVecAt (theRtCand).isAllocated ())
      {
      thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);
d450 3
a452 3
      if (thePrAltPt != NULL)
         return thePrAltPt->allowed ();
      }
d454 3
a456 3
   if (theRtCand->myRtSite ()->myRtCands ().nElements () == 1)
      if (theRtCand->isEligible (thePer))
         return true;
d458 2
a459 2
   return false;
   }
d464 3
a466 3
   {
   myRecoveryPairs_.push (theRtCand, thePer);
   }
d471 9
a479 9
   {
   WitRtCand * theRtCand;
   WitPeriod   thePer;

   while (myRecoveryPairs_.pop (theRtCand, thePer))
      {
      myPrAltPts_.myPtrAt (theRtCand, thePer)->recoverInitState ();
      }
   }
d484 3
a486 3
   {
   return myPrSelPtFor (theRtSite, thePer);
   }
d491 2
a492 2
   {
   WitPrAltPt * thePrAltPt;
d494 1
a494 1
   thePrAltPt = myPrAltPtFor (theRtCand, thePer);
d496 2
a497 2
   if (thePrAltPt == NULL)
      return NULL;
d499 1
a499 1
   witAssert (thePrAltPt->active ());
d501 2
a502 2
   if (thePrAltPt->myPrSelPt ()->nAllowedRtCands () == 1)
      return NULL;
d504 2
a505 2
   return thePrAltPt;
   }
d510 3
a512 3
   {
   if (not myPrAltPts_.myPtrTVecAt (theRtCand).isAllocated ())
      return NULL;
d514 2
a515 2
   return myPrAltPts_.myPtrAt (theRtCand, thePer);
   }
d520 2
a521 2
   {
   WitPrSelPt * thePrSelPt;
d523 2
a524 2
   if (not mySelector_->selSplit ())
      return false;
d526 1
a526 1
   thePrSelPt = myPrSelPtFor (theRtSite, thePer);
d528 2
a529 2
   if (thePrSelPt == NULL)
      return false;
d531 2
a532 2
   return thePrSelPt->isSplit ();
   }
d537 44
a580 44
      WitRtSite *         theRtSite, 
      WitPeriod           thePer,
      double              expVol,
      WitRtCandDblStack & theExpPairs,
      double &            unbddVol)
   {
   WitSelCand * theSelCand;
   double       splitVol;
   WitRtCand *  theRtCand;
   double       propExpVol;

   WitSelCandDblStack theSplitPairs (myProblem ());
   WitRtCandStack     theRtCands    (myProblem ());
   WitRtCandDblStack  localExpPairs (myProblem ());

   witAssert (selIsSplit (theRtSite, thePer));

   witAssert (expVol >= NET_TOL);

   theExpPairs.clear ();

   myPrSelPtFor (theRtSite, thePer)->
      mySplitPt ()->
         defineSplit (expVol, theSplitPairs, unbddVol);

   while (theSplitPairs.pop (theSelCand, splitVol))
      {
      theSelCand->getPrData (theRtCands);

      defineExpPairs (
         theRtCands,
         thePer,
         splitVol,
         localExpPairs);

      localExpPairs.reverse ();

      while (localExpPairs.pop (theRtCand, propExpVol))
         theExpPairs.push (theRtCand, propExpVol);
      }

   if (selPrintLevelAt (3))
      printPropExp (theRtSite, thePer, expVol - unbddVol, theExpPairs, true);
   }
d585 5
a589 5
      WitRtSite * theRtSite,
      WitPeriod   thePer,
      double      incFlowVol)
   {
   WitPrSelPt * thePrSelPt;
d591 1
a591 1
   thePrSelPt = myPrSelPtFor (theRtSite, thePer);
d593 2
a594 2
   if (thePrSelPt == NULL)
      return;
d596 2
a597 2
   thePrSelPt->recordFlowSS (incFlowVol);
   }
d602 37
a638 37
      WitRtSite *               theRtSite, 
      WitPeriod                 thePer,
      double                    expVol,
      const WitRtCandDblStack & theExpPairs,
      bool                      bddSplit)
   {
   WitPairStItr <WitRtCand, double> theItr;
   WitRtCand *                      theRtCand;
   double                           propExpVol;

   if (not mySelector_->myHeurAtor ()->permCommActive ())
      return;

   fprintf (msgFile (),
      "\n"
      "Proportionate Explosion%s:\n\n",
      bddSplit? " (Bounded Split)": "");

   theRtSite->printID (4, 22);

   fprintf (msgFile (),
      "   Period:           %d\n"
      "   Exp Vol:          %.3f\n",
      thePer,
      expVol);

   theExpPairs.attachItr (theItr);

   while (theItr.advance (theRtCand, propExpVol))
      {
      fprintf (msgFile (), "\n");

      theRtCand->printID (7, 22);

      fprintf (msgFile (), "      Prop Vol:      %.3f\n", propExpVol);
      }
   }
d643 19
a661 19
   {
   WitRtSite * theRtSite;
   WitPeriod   thePer;

   myPrSelPts_.allocate1D (myProblem ());

   forEachEl (theRtSite, myRtMgr_->myRtSites ())
      if (theRtSite->myRtCands ().nElements () > 1)
         if (theRtSite->propRtg () != false)
            {
            myPrSelPts_.myPtrTVecAt (theRtSite).allocate (myProblem ());

            forEachPeriod (thePer, myProblem ())
               if (theRtSite->explodeable (thePer))
                  if (theRtSite->propRtg ()[thePer])
                     myPrSelPts_.myPtrAt (theRtSite, thePer) =
                        new WitPrSelPt   (theRtSite, thePer, this);
            }
   }
d666 32
a697 32
   {
   WitRtCand *  theRtCand;
   WitRtSite *  theRtSite;
   WitPeriod    thePer;
   WitPrSelPt * thePrSelPt;

   myPrAltPts_.allocate1D (myProblem ());

   forEachEl (theRtCand, myRtMgr_->myRtCands ())
      {
      theRtSite = theRtCand->myRtSite ();

      if (not myPrSelPts_.myPtrTVecAt (theRtSite).isAllocated ())
         continue;

      myPrAltPts_.myPtrTVecAt (theRtCand).allocate (myProblem ());

      forEachPeriod (thePer, myProblem ())
         {
         if (not theRtCand->isEligible (thePer))
            continue;

         thePrSelPt = myPrSelPtFor (theRtSite, thePer);

         if (thePrSelPt == NULL)
            continue;

         myPrAltPts_.myPtrAt (theRtCand, thePer) =
            new WitPrAltPt (thePrSelPt, theRtCand, this);
         }
      }
   }
d702 19
a720 19
      WitRtSite *      theRtSite,
      WitPeriod        thePer,
      WitRtCandStack & theRtCands)
   {
   WitRtCand *  theRtCand;
   WitPrAltPt * thePrAltPt;

   witAssert (myPrSelPtFor (theRtSite, thePer) != NULL);

   theRtCands.clear ();

   forEachEl (theRtCand, theRtSite->myRtCands ())
      {
      thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);

      if (thePrAltPt != NULL)
         if (thePrAltPt->active ())
            theRtCands.push (theRtCand);
      }
d722 2
a723 2
   theRtCands.reverse ();
   }
d728 10
a737 10
      const WitRtCandStack & theRtCands,
      WitPeriod              thePer,
      double                 expVol,
      WitRtCandDblStack &    theExpPairs)
   {
   double                  totShare;
   WitObjStItr <WitRtCand> theItr;
   WitRtCand *             theRtCand;
   double                  expVolPerShare;
   double                  propExpVol;
d739 1
a739 1
   witAssert (theRtCands.isNonEmpty ());
d741 1
a741 1
   totShare = 0.0;
d743 1
a743 1
   theRtCands.attachItr (theItr);
d745 2
a746 2
   while (theItr.advance (theRtCand))
      totShare += theRtCand->myBillEnt ()->routingShare ()[thePer];
d748 1
a748 1
   expVolPerShare = expVol / totShare;
d750 1
a750 1
   theExpPairs.clear ();
d752 1
a752 1
   theRtCands.attachItr (theItr);
d754 4
a757 4
   while (theItr.advance (theRtCand))
      {
      propExpVol =
         expVolPerShare * theRtCand->myBillEnt ()->routingShare ()[thePer];
d759 2
a760 2
      theExpPairs.push (theRtCand, propExpVol);
      }
d762 1
a762 1
   witAssert (theExpPairs.isNonEmpty ());
d764 2
a765 2
   theExpPairs.reverse ();
   }
d770 3
a772 3
   {
   if (not myPrSelPts_.myPtrTVecAt (theRtSite).isAllocated ())
      return NULL;
d774 2
a775 2
   return myPrSelPts_.myPtrAt (theRtSite, thePer);
   }
d782 2
a783 2
   {
   }
d789 4
a792 4
      WitSelMgr  (thePrCoord->mySelector ()),
      myPrCoord_ (thePrCoord)
   {
   }
d797 3
a799 3
   {
   return myGlobalComp ()->selSplit ();
   }
d807 3
a809 3
      WitPrSelMgr (thePrCoord)
   {
   }
d814 2
a815 2
   {
   }
d820 7
a826 7
      WitBopEntry * theBopEnt,
      WitConsEntry *,
      WitPeriod     execPer,
      WitPeriod)
   {
   WitRtCand * theRtCand;
   WitPeriod   expPer;
d828 1
a828 1
   theRtCand = mySelector ()->myRtMgr ()->myRtCandFor (theBopEnt);
d830 1
a830 1
   expPer    = theBopEnt->impactPeriod ()[execPer];
d832 2
a833 2
   return myPrCoord ()->myAltPtFor (theRtCand, expPer);
   }
d838 3
a840 3
   {
   return true;
   }
d845 3
a847 3
   {
   return true;
   }
d852 3
a854 3
   {
   return false;
   }
d859 3
a861 3
   {
   return "Production Proportionate Routing";
   }
d869 3
a871 3
      WitPrSelMgr (thePrCoord)
   {
   }
d876 2
a877 2
   {
   }
d882 6
a887 6
      WitBopEntry *,
      WitConsEntry * theConsEnt,
      WitPeriod      execPer,
      WitPeriod)
   {
   WitRtCand * theRtCand;
d889 1
a889 1
   theRtCand = mySelector ()->myRtMgr ()->myRtCandFor (theConsEnt);
d891 2
a892 2
   return myPrCoord ()->myAltPtFor (theRtCand, execPer);
   }
d897 3
a899 3
   {
   return false;
   }
d904 3
a906 3
   {
   return false;
   }
d911 3
a913 3
   {
   return false;
   }
d918 3
a920 3
   {
   return "Consumption Proportionate Routing";
   }
d927 11
a937 11
         WitRtSite *  theRtSite,
         WitPeriod    thePer,
         WitPrCoord * thePrCoord):

      WitSelPt         (),
      myRtSite_        (theRtSite),
      myPer_           (thePer),
      myPrCoord_       (thePrCoord),
      nAllowedRtCands_ (0)
   {
   }
d942 2
a943 2
   {
   }
d948 9
a956 9
   {
   fprintf (myPrCoord_->msgFile (),
      "\n"
      "Proportionate Routing Point:\n"
      "\n");

   myRtSite_->printID          (4, 22);
   myRtSite_->printPer (myPer_, 4, 22);
   }
d961 6
a966 6
   {
   if (myPrCoord_->mySelector ()->sglSrc ())
      myPrCoord_->
         mySelector ()->
            mySglSrcMgr ()->
               saveConfigVal (nAllowedRtCands_);
d968 1
a968 1
   nAllowedRtCands_ += delta;
d970 2
a971 2
   witAssert (nAllowedRtCands_ >= 1);
   }
d976 17
a992 17
   {
   WitRtCand *  theRtCand;
   WitPrAltPt * thePrAltPt;

   fprintf (myPrCoord_->msgFile (),
      "\n"
      "   Allowed Routing Candidates:\n");

   forEachEl (theRtCand, myRtSite_->myRtCands ())
      {
      thePrAltPt = myPrCoord_->myPrAltPtFor (theRtCand, myPer_);

      if (thePrAltPt != NULL)
         if (thePrAltPt->allowed ())
            theRtCand->printID (7, 22);
      }
   }
d997 6
a1002 6
   {
   return
      myRtSite_->isForProd ()?
         myPrCoord_->myPrSelMgrForProd ():
         myPrCoord_->myPrSelMgrForCons ();
   }
d1006 3
a1008 3
void WitPrSelPt::prtID () 
   {
   myRtSite_->printID (4, 22);
d1010 2
a1011 2
   fprintf (myRtSite_->msgFile (), "   Period:           %d\n", myPer_);
   }
d1015 4
a1018 4
bool WitPrSelPt::splittable () 
   {
   if (myPrCoord_->myGlobalComp ()->selSplit ())
      return true;
d1020 2
a1021 2
   if (myPrCoord_->myGlobalComp ()->nonMrSelSplit ())
      return true;
d1023 2
a1024 2
   return false;
   }
d1029 2
a1030 2
   {
   thePart = myRtSite_->mrSortPart ();
d1032 2
a1033 2
   thePer  = myPer_;
   }
d1038 3
a1040 3
   {
   return new WitPrCand (myPrCoord_, myRtSite_, myPer_);
   }
d1047 12
a1058 12
         WitPrSelPt * thePrSelPt,
         WitRtCand *  theRtCand,
         WitPrCoord * thePrCoord):

      WitAltPt   (),
      myPrSelPt_ (thePrSelPt),
      myRtCand_  (theRtCand),
      myPrCoord_ (thePrCoord),
      active_    (true),
      allowed_   (true)
   {  
   witAssert (myPrSelPt_ != NULL);
d1060 2
a1061 2
   myPrSelPt_->incAllowedRtCands (+1);
   }
d1066 2
a1067 2
   {
   }
d1072 22
a1093 22
   {
   if (DEBUG_MODE)
      {
      if (activeVal)
         witAssert (allowedVal);

      if (not myPrCoord_->mySelector ()->tbprMode ())
         witAssert (activeVal == allowedVal);
      }

   if (myPrCoord_->mySelector ()->sglSrc ())
      {
      myPrCoord_->mySelector ()->mySglSrcMgr ()->saveConfigVal (allowed_);
      myPrCoord_->mySelector ()->mySglSrcMgr ()->saveConfigVal (active_);
      }

   if (allowedVal != allowed_)
      myPrSelPt_->incAllowedRtCands (allowedVal? +1: -1);

   allowed_ = allowedVal;
   active_  = activeVal;
   }
d1098 10
a1107 10
   {
   if (not allowed_)
      myPrSelPt_->incAllowedRtCands (+1);

   allowed_ = true;
   active_  = true;

   if (myPrCoord_->selPrintLevelAt (3))
      printRecovery ();
   }
d1112 3
a1114 3
   {
   return (myPrSelPt_->nAllowedRtCands () > 1);
   }
d1119 2
a1120 2
   {
   witAssert (myPrSelPt_->nAllowedRtCands () > 1);
d1122 2
a1123 2
   setStatus (false, false);
   }
d1128 3
a1130 3
   {
   myPrCoord_->storeRecoveryPair (myRtCand_, myPrSelPt_->myPer ());
   }
d1135 3
a1137 3
   {
   witAssert (active_);
   witAssert (allowed_);
d1139 1
a1139 1
   witAssert (myPrSelPt_->nAllowedRtCands () > 1);
d1141 2
a1142 2
   setStatus (false, false);
   }
d1147 3
a1149 3
   {
   witAssert (not active_);
   witAssert (not allowed_);
d1151 2
a1152 2
   setStatus (true, true);
   }
d1157 3
a1159 3
   {
   return myPrSelPt_;
   }
d1164 11
a1174 11
   {
   if (not myRtCand_->selPrintLevelAt (3))
      return;

   fprintf (myRtCand_->msgFile (),
      "\n"
      "Proportionate Routing Candidate Disallowance:\n\n");

   myRtCand_->myRtSite ()->printID                        (4, 22);
   myRtCand_->myRtSite ()->printPer (myPrSelPt_->myPer (), 4, 22);
   myRtCand_->             printID                        (7, 22);
d1176 2
a1177 2
   myPrSelPt_->printAllowedRtCands ();
   }
d1182 7
a1188 7
   {
   fprintf (myRtCand_->msgFile (),
      "   Proportionate Routing Candidate Recovered:\n");

   myRtCand_->myRtSite ()->printID                        (4, 22);
   myRtCand_->myRtSite ()->printPer (myPrSelPt_->myPer (), 4, 22);
   myRtCand_->             printID                        (7, 22);
d1190 2
a1191 2
   fprintf (myRtCand_->msgFile (), "\n");
   }
d1198 12
a1209 12
         WitPrCoord * thePrCoord,
         WitRtSite *  theRtSite,
         WitPeriod    thePer):

      WitSelCand  (thePrCoord->myProblem ()),
      actRtCands_ (myProblem ())
   {
   WitRtCand * theRtCand;

   forEachEl (theRtCand, theRtSite->myRtCands ())
      if (thePrCoord->active (theRtCand, thePer))
         actRtCands_.push (theRtCand);
d1211 1
a1211 1
   actRtCands_.reverse ();
d1213 2
a1214 2
   witAssert (actRtCands_.isNonEmpty ());
   }
d1219 2
a1220 2
   {
   }
d1225 9
a1233 9
   {
   WitObjStItr <WitRtCand> theItr;
   WitRtCand *             theRtCand;

   actRtCands_.attachItr (theItr);

   while (theItr.advance (theRtCand))
      theRtCand->printID (7, 22);
   }
d1238 2
a1239 2
   {
   theRtCands.revCopyFrom (actRtCands_);
d1241 2
a1242 2
   theRtCands.reverse ();
   }
@


1.30
log
@Heuristic Adjustment
@
text
@a34 1
#include <RecoverySet.h>
d165 1
a165 1
void WitPrMgr::storeRecoveryPt (WitRtCand * theRtCand, WitPeriod thePer)
d167 1
a167 1
   myPrCoord_->myRecoverySet ()->storeRecoveryPt (theRtCand, thePer);
d174 1
a174 1
   myPrCoord_->myRecoverySet ()->recoverInitState ();
d296 1
a296 1
      myRecoverySet_     ()
a304 5

   if (myGlobalComp ()->selectionRecovery ())
      {
      myRecoverySet_ = new WitRecoverySet <WitPrCoord, WitRtCand> (this);
      }
a314 2
   delete myRecoverySet_;

d463 8
a470 1
void WitPrCoord::recoverInitState (WitRtCand * theRtCand, WitPeriod thePer)
d472 7
a478 1
   myPrAltPts_.myPtrAt (theRtCand, thePer)->recoverInitState ();
d1129 1
a1129 3
   myPrCoord_->
      myRecoverySet ()->
         storeRecoveryPt (myRtCand_, myPrSelPt_->myPer ());
@


1.29
log
@Selection Recovery
@
text
@d41 1
a41 1
#include <Opn.h>
@


1.28
log
@Selection Recovery
@
text
@d35 1
a35 1
#include <AltSet.h>
d166 1
a166 1
void WitPrMgr::recAltForRecovery (WitRtCand * theRtCand, WitPeriod thePer)
d168 1
a168 1
   myPrCoord_->myAltSet ()->recAltForRecovery (theRtCand, thePer);
d173 1
a173 1
void WitPrMgr::recoverSelections ()
d175 1
a175 1
   myPrCoord_->myAltSet ()->recoverSelections ();
d297 1
a297 1
      myAltSet_          ()
d309 1
a309 1
      myAltSet_ = new WitAltSet <WitPrCoord, WitRtCand> (this);
d321 1
a321 1
   delete myAltSet_;
d471 1
a471 1
void WitPrCoord::recoverInitSel (WitRtCand * theRtCand, WitPeriod thePer)
d473 1
a473 1
   myPrAltPts_.myPtrAt (theRtCand, thePer)->recoverInitSel ();
d1092 1
a1092 1
void WitPrAltPt::recoverInitSel ()
d1122 1
a1122 1
void WitPrAltPt::recAltForRecovery ()
d1124 3
a1126 1
   myPrCoord_->myAltSet ()->recAltForRecovery (myRtCand_, myPrSelPt_->myPer ());
@


1.27
log
@Selection Recovery
@
text
@d166 7
@


1.26
log
@Selection Recovery
@
text
@d1115 1
a1115 1
void WitPrAltPt::recordAlteration ()
d1117 1
a1117 1
   myPrCoord_->myAltSet ()->recordAlteration (myRtCand_, myPrSelPt_->myPer ());
@


1.25
log
@Selection Recovery
@
text
@d35 1
d166 7
d289 2
a290 1
      myPrAltPts_        ()
d299 5
d314 2
d464 7
d1085 14
d1117 1
a1117 1
   stronglyAssert (false);
d1168 14
@


1.24
log
@Selection Recovery.
@
text
@d1078 7
@


1.23
log
@Selection Recovery
@
text
@a828 6

void WitPprSelMgr::recoverSelections ()
   {
   }

//------------------------------------------------------------------------------
a887 6

void WitCprSelMgr::recoverSelections ()
   {
   }

//------------------------------------------------------------------------------
@


1.22
log
@Selection Recovery
@
text
@d829 6
d894 6
a1019 14

void WitPrSelPt::printRecovery ()
   {
   stronglyAssert (false);
   }

//------------------------------------------------------------------------------

void WitPrSelPt::recoverInitSel ()
   {
   stronglyAssert (false);
   }

//------------------------------------------------------------------------------
@


1.21
log
@Selection Recovery
@
text
@a1075 14
void WitPrAltPt::recoverInitState ()
   {
   if (myRtCand_->selPrintLevelAt (3))
      printRecovery ();

   if (not allowed_)
      myPrSelPt_->incAllowedRtCands (1);

   active_  = true;
   allowed_ = true;
   }

//------------------------------------------------------------------------------

a1137 17

void WitPrAltPt::printRecovery ()
   {
   if    (active_)
      if (allowed_)
         return;

   fprintf (myRtCand_->msgFile (),
      "\n"
      "Proportionate Routing Candidate Recovered:\n\n");

   myRtCand_->myRtSite ()->printID                        (4, 22);
   myRtCand_->myRtSite ()->printPer (myPrSelPt_->myPer (), 4, 22);
   myRtCand_->             printID                        (7, 22);
   }

//------------------------------------------------------------------------------
@


1.20
log
@Selection Recovery.
@
text
@d20 1
a20 1
//    PrPt.
d28 1
a28 1
#include <PrPt.h>
d280 1
a280 1
      myPrPts_           (),
d288 1
a288 1
   buildPrPts    ();
d306 1
a306 1
      if (myPrPts_.myPtrTVecAt (theRtSite).isAllocated ())
d308 1
a308 1
            delete myPrPtFor (theRtSite, thePer);
d318 3
a320 3
   WitRtSite * theRtSite;
   WitPeriod   thePer;
   WitPrPt *   thePrPt;
d329 1
a329 1
         thePrPt = myPrPtFor (theRtSite, thePer);
d331 1
a331 1
         if (thePrPt == NULL)
d334 1
a334 1
         thePrPt->print ();
d336 1
a336 1
         thePrPt->printAllowedRtCands ();
d450 1
a450 1
   return myPrPtFor (theRtSite, thePer);
d466 1
a466 1
   if (thePrAltPt->myPrPt ()->nAllowedRtCands () == 1)
d486 1
a486 1
   WitPrPt * thePrPt;
d491 1
a491 1
   thePrPt = myPrPtFor (theRtSite, thePer);
d493 1
a493 1
   if (thePrPt == NULL)
d496 1
a496 1
   return thePrPt->isSplit ();
d523 1
a523 1
   myPrPtFor (theRtSite, thePer)->
d554 1
a554 1
   WitPrPt * thePrPt;
d556 1
a556 1
   thePrPt = myPrPtFor (theRtSite, thePer);
d558 1
a558 1
   if (thePrPt == NULL)
d561 1
a561 1
   thePrPt->recordFlowSS (incFlowVol);
d607 1
a607 1
void WitPrCoord::buildPrPts ()
d612 1
a612 1
   myPrPts_.allocate1D (myProblem ());
d618 1
a618 1
            myPrPts_.myPtrTVecAt (theRtSite).allocate (myProblem ());
d623 2
a624 2
                     myPrPts_.myPtrAt (theRtSite, thePer) =
                        new WitPrPt   (theRtSite, thePer, this);
d632 4
a635 4
   WitRtCand * theRtCand;
   WitRtSite * theRtSite;
   WitPeriod   thePer;
   WitPrPt *   thePrPt;
d643 1
a643 1
      if (not myPrPts_.myPtrTVecAt (theRtSite).isAllocated ())
d653 1
a653 1
         thePrPt = myPrPtFor (theRtSite, thePer);
d655 1
a655 1
         if (thePrPt == NULL)
d659 1
a659 1
            new WitPrAltPt (thePrPt, theRtCand, this);
d674 1
a674 1
   witAssert (myPrPtFor (theRtSite, thePer) != NULL);
d734 1
a734 1
WitPrPt * WitPrCoord::myPrPtFor (WitRtSite * theRtSite, WitPeriod thePer)
d736 1
a736 1
   if (not myPrPts_.myPtrTVecAt (theRtSite).isAllocated ())
d739 1
a739 1
   return myPrPts_.myPtrAt (theRtSite, thePer);
d888 1
a888 1
// Implementation of class PrPt.
d891 1
a891 1
WitPrPt::WitPrPt (
d906 1
a906 1
WitPrPt::~WitPrPt ()
d912 1
a912 1
void WitPrPt::print ()
d925 1
a925 1
void WitPrPt::incAllowedRtCands (int delta)
d940 1
a940 1
void WitPrPt::printAllowedRtCands ()
d961 1
a961 1
WitSelMgr * WitPrPt::mySelMgr ()
d971 1
a971 1
void WitPrPt::prtID () 
d980 1
a980 1
bool WitPrPt::splittable () 
d993 1
a993 1
void WitPrPt::getSortData (WitPart * & thePart, WitPeriod & thePer)
d1002 1
a1002 1
WitSelCand * WitPrPt::newSelCand ()
d1009 1
a1009 1
void WitPrPt::printRecovery ()
d1016 1
a1016 1
void WitPrPt::recoverInitSel ()
d1026 1
a1026 1
         WitPrPt *    thePrPt,
d1031 1
a1031 1
      myPrPt_    (thePrPt),
d1037 1
a1037 1
   witAssert (myPrPt_ != NULL);
d1039 1
a1039 1
   myPrPt_->incAllowedRtCands (+1);
d1068 1
a1068 1
      myPrPt_->incAllowedRtCands (allowedVal? +1: -1);
d1082 1
a1082 1
      myPrPt_->incAllowedRtCands (1);
d1092 1
a1092 1
   return (myPrPt_->nAllowedRtCands () > 1);
d1099 1
a1099 1
   witAssert (myPrPt_->nAllowedRtCands () > 1);
d1111 1
a1111 1
   witAssert (myPrPt_->nAllowedRtCands () > 1);
d1130 1
a1130 1
   return myPrPt_;
d1144 3
a1146 3
   myRtCand_->myRtSite ()->printID                     (4, 22);
   myRtCand_->myRtSite ()->printPer (myPrPt_->myPer (), 4, 22);
   myRtCand_->             printID                     (7, 22);
d1148 1
a1148 1
   myPrPt_->printAllowedRtCands ();
d1163 3
a1165 3
   myRtCand_->myRtSite ()->printID                     (4, 22);
   myRtCand_->myRtSite ()->printPer (myPrPt_->myPer (), 4, 22);
   myRtCand_->             printID                     (7, 22);
@


1.19
log
@Selection Recovery.
@
text
@a1071 6

   if    (myPrCoord_->myGlobalComp ()->selectionRecovery ())
      if (myPrCoord_->myGlobalComp ()->newSelRec         ())
         {
         // Record this altered PrAltPr.
         }
@


1.18
log
@Selection Recovery.
@
text
@d336 1
a336 1
         printAllowedRtCands (theRtSite, thePer);
d448 7
d459 1
a459 4
   if (not myPrAltPts_.myPtrTVecAt (theRtCand).isAllocated ())
      return NULL;

   thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);
d474 1
a474 1
WitSelPt * WitPrCoord::mySelPtFor (WitRtSite * theRtSite, WitPeriod thePer)
d476 4
a479 1
   return myPrPtFor (theRtSite, thePer);
a606 23
void WitPrCoord::printAllowedRtCands (WitRtSite * theRtSite, WitPeriod thePer)
   {
   WitRtCand *  theRtCand;
   WitPrAltPt * thePrAltPt;

   witAssert (selPrintLevelAt (3));

   fprintf (msgFile (),
      "\n"
      "   Allowed Routing Candidates:\n");

   forEachEl (theRtCand, theRtSite->myRtCands ())
      {
      thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);

      if (thePrAltPt != NULL)
         if (thePrAltPt->allowed ())
            theRtCand->printID (7, 22);
      }
   }

//------------------------------------------------------------------------------

d940 21
d1009 1
a1009 1
void WitPrPt::recoverInitSel ()
d1016 1
a1016 1
void WitPrPt::prtRecInitSel ()
d1072 20
d1154 18
a1171 1
   myPrCoord_->printAllowedRtCands (myRtCand_->myRtSite (), myPrPt_->myPer ());
@


1.17
log
@Selection reuse.
@
text
@d1003 14
@


1.16
log
@Selection reuse.
@
text
@d374 2
a375 1
   printPropExpIA (theRtSite, thePer, expVol, theExpPairs, false);
d536 2
a537 1
   printPropExpIA (theRtSite, thePer, expVol - unbddVol, theExpPairs, true);
d559 1
a559 1
void WitPrCoord::printPropExpIA (
a569 3
   if (not selPrintLevelAt (3))
      return;

@


1.15
log
@Lead Time Bounds
@
text
@d568 1
a568 1
   if (myGlobalComp ()->selPrintLevel () < 3)
d606 1
a606 1
   witAssert (myGlobalComp ()->selPrintLevel () >= 3);
d1105 1
a1105 1
   if (myRtCand_->myGlobalComp ()->selPrintLevel () < 3)
@


1.14
log
@Changed source file names:
   Global.h ==> GlobalComp.h
   Global.C ==> GlobalComp.C
@
text
@d833 7
d892 7
@


1.13
log
@Stochastic Implosion
@
text
@d38 1
a38 1
#include <Global.h>
@


1.12
log
@Updated the copyright date on all source files.
@
text
@d52 1
a52 1
      WitProbAssoc (theSelector->myProblem ()),
d275 1
a275 1
      WitProbAssoc       (theSelector->myProblem ()),
@


1.11
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.10
log
@[shared-resource pegging]
@
text
@d587 1
a587 1
   theExpPairs.attach (theItr);
d725 1
a725 1
   theRtCands.attach (theItr);
d734 1
a734 1
   theRtCands.attach (theItr);
d1141 1
a1141 1
   actRtCands_.attach (theItr);
@


1.9
log
@Revised mappingIndex code.
@
text
@d587 1
a587 1
   theItr.attachTo (theExpPairs);
d725 1
a725 1
   theItr.attachTo (theRtCands);
d734 1
a734 1
   theItr.attachTo (theRtCands);
d1141 1
a1141 1
   theItr.attachTo (actRtCands_);
@


1.8
log
@Second attempt to correct a problem with header file inclusion on
g++ 3.3.3.
@
text
@a43 1
#include <MapIdxI.h>
@


1.7
log
@An attempt to correct a problem with header file inclusion on g++ 3.3.3.
@
text
@d39 1
@


1.6
log
@Vector PropRtg.
@
text
@a38 1
#include <Part.h>
a40 1
#include <BomEntry.h>
@


1.5
log
@Vector PropRtg.
@
text
@d690 2
a691 1
   WitRtCand * theRtCand;
d698 7
a704 2
      if (myPrAltPts_.myPtrAt (theRtCand, thePer)->active ())
         theRtCands.push (theRtCand);
@


1.4
log
@Vector PropRtg.
@
text
@d308 1
a308 1
      if (hasPrPtsFor (theRtSite))
d310 1
a310 1
            delete myPrPts_.myPtrAt (theRtSite, thePer);
d329 3
a331 4
      if (hasPrPtsFor (theRtSite))
         forEachPeriod (thePer, myProblem ())
            {
            thePrPt = myPrPts_.myPtrAt (theRtSite, thePer);
d333 2
a334 2
            if (thePrPt == NULL)
               continue;
d336 1
a336 1
            thePrPt->print ();
d338 2
a339 2
            printAllowedRtCands (theRtSite, thePer);
            }
d453 1
a453 1
   if (not hasPrPtsFor (theRtCand->myRtSite ()))
d473 1
a473 4
   if (not hasPrPtsFor (theRtSite))
      return NULL;

   return myPrPts_.myPtrAt (theRtSite, thePer);
d485 1
a485 4
   if (not hasPrPtsFor (theRtSite))
      return false;

   thePrPt = myPrPts_.myPtrAt (theRtSite, thePer);
d517 1
a517 1
   myPrPts_.myPtrAt (theRtSite, thePer)->
d549 1
a549 4
   if (not hasPrPtsFor (theRtSite))
      return;

   thePrPt = myPrPts_.myPtrAt (theRtSite, thePer);
d662 1
a662 1
      if (not hasPrPtsFor (theRtSite))
d672 1
a672 1
         thePrPt = myPrPts_.myPtrAt (theRtSite, thePer);
d692 1
a692 3
   witAssert (hasPrPtsFor (theRtSite));

   witAssert (myPrPts_.myPtrAt (theRtSite, thePer) != NULL);
d747 1
a747 1
bool WitPrCoord::hasPrPtsFor (WitRtSite * theRtSite)
d749 4
a752 1
   return myPrPts_.myPtrTVecAt (theRtSite).isAllocated ();
@


1.3
log
@Vector PropRtg.
@
text
@d459 3
d474 1
a474 3
   if (hasPrPtsFor (theRtSite))
      return myPrPts_.myPtrAt (theRtSite, thePer);
   else
d476 2
d484 7
a490 4
   if (mySelector_->selSplit ())
      if (hasPrPtsFor (theRtSite))
         if (myPrPts_.myPtrAt (theRtSite, thePer)->isSplit ())
            return true;
d492 6
a497 1
   return false;
d554 11
a564 3
   if (hasPrPtsFor (theRtSite))
      myPrPts_.myPtrAt (theRtSite, thePer)->
         recordFlowSS (incFlowVol);
d678 12
a689 7
         if (theRtCand->isEligible (thePer))
            {
            thePrPt = myPrPts_.myPtrAt (theRtSite, thePer);

            myPrAltPts_.myPtrAt (theRtCand, thePer) =
               new WitPrAltPt (thePrPt, theRtCand, this);
            }
d704 2
@


1.2
log
@Vector PropRtg.
@
text
@d285 1
a285 1
   myMsgFac () ("propRoutingMsg");
@


1.1
log
@Vector PropRtg.
@
text
@d76 1
a76 1
      if (not (thePart->propRtg () == false))
d80 1
a80 1
      if (not (theBomEnt->propRtg () == false))
d625 4
a628 3
      {
      if (theRtSite->myRtCands ().nElements () <= 1)
         continue;
d630 6
a635 11
      if (theRtSite->propRtg () == false)
         continue;

      myPrPts_.myPtrTVecAt (theRtSite).allocate (myProblem ());

      forEachPeriod (thePer, myProblem ())
         if (theRtSite->explodeable (thePer))
            if (theRtSite->propRtg ()[thePer])
               myPrPts_.myPtrAt (theRtSite, thePer) =
                  new WitPrPt   (theRtSite, thePer, this);
      }
@

