head	1.19;
access;
symbols
	sce_5_01_20080919:1.12
	latest_sce_4_20_20060523:1.12.0.2
	sce_4_20_20060523:1.12
	latest_sce4_20_OSL:1.11.0.2
	sce_4_20_OSL:1.11
	sce_410_withVa:1.11;
locks; strict;
comment	@ * @;


1.19
date	2011.09.28.23.49.17;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.09.24.00.27.34;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.08.30.20.17.27;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2010.07.30.20.20.13;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2010.07.29.21.03.11;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2010.07.28.19.27.46;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2010.06.29.19.56.41;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.02.17.33.57;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2005.01.15.00.20.07;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2005.01.13.17.24.20;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.10.22.34.47;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.06.20.34.09;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.28.22.34.26;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.28.19.21.18;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.22.19.57.26;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.21.22.13.48;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.20.22.39.36;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.20.21.47.36;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.20.21.13.10;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef DetSelPtH
#define DetSelPtH

//------------------------------------------------------------------------------
// Header file: "DetSelPt.h"
//
// Contains the declaration of class DetSelPt.
//------------------------------------------------------------------------------

#include <SelPt.h>

//------------------------------------------------------------------------------
// Class DetSelPt
//
// "Determined Selection Point"
// A DetSelPt is a SelPt at which any alteration to the selection configuration
// is uniquely determined by the SelPt itself.
//
// Class Hierarchy:
//
// SelPt
//    DetSelPt
//       MrPt
//       BaPt
//       MePt
//       SsrPt
//
// Implemented in Selection.C.
//------------------------------------------------------------------------------

class WitDetSelPt: public WitSelPt
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      virtual bool hasResAlt () = 0;
         //
         // Returns true, iff this DetSelPt currently has a selection and an 
         // shortage-resolving alternative to the current selection exists.

      virtual void alterSelection () = 0;
         //
         // Alters the selection for this DetSelPt.

      virtual void storeRecoveryPt () = 0;
         //
         // Records the fact that the selection configuration is being altered
         // at this DetSelPt.
         // Used for selection recovery.

      virtual void tempAlterSel () = 0;
         //
         // Temporarily alters the selection for this DetSelPt.

      virtual void cancelTempAlt () = 0;
         //
         // Undoes tempAlterSel ().

      virtual void printAlteration () = 0;
         //
         // Prints the alteration of the selection configuration at this
         // DetAltPt.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitDetAltPt *, myDetAltPt)

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDetSelPt ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitDetSelPt ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDetSelPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDetAltPt * myDetAltPt_;
         //
         // The DetAltPt owned by this DetSelPt.
         // myDetAltPt_ is the DetAltPt at which the selection configuration can
         // be altered in a manner that is uniquely determined by this DetSelPt.
   };

#endif
@


1.18
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.17
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d41 2
a42 2
{
public:
d44 3
a46 3
//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------
d48 4
a51 4
virtual bool hasResAlt () = 0;
//
// Returns true, iff this DetSelPt currently has a selection and an
// shortage-resolving alternative to the current selection exists.
d53 3
a55 3
virtual void alterSelection () = 0;
//
// Alters the selection for this DetSelPt.
d57 5
a61 5
virtual void storeRecoveryPt () = 0;
//
// Records the fact that the selection configuration is being altered
// at this DetSelPt.
// Used for selection recovery.
d63 3
a65 3
virtual void tempAlterSel () = 0;
//
// Temporarily alters the selection for this DetSelPt.
d67 3
a69 3
virtual void cancelTempAlt () = 0;
//
// Undoes tempAlterSel ().
d71 4
a74 4
virtual void printAlteration () = 0;
//
// Prints the alteration of the selection configuration at this
// DetAltPt.
d76 3
a78 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d80 1
a80 1
accessFunc (WitDetAltPt *, myDetAltPt)
d82 1
a82 1
protected:
d84 3
a86 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d88 1
a88 1
WitDetSelPt ();
d90 3
a92 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d94 1
a94 1
virtual ~WitDetSelPt ();
d96 1
a96 1
private:
d98 3
a100 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d102 1
a102 1
noCopyCtorAssign (WitDetSelPt);
d104 3
a106 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d108 6
a113 6
WitDetAltPt * myDetAltPt_;
//
// The DetAltPt owned by this DetSelPt.
// myDetAltPt_ is the DetAltPt at which the selection configuration can
// be altered in a manner that is uniquely determined by this DetSelPt.
};
@


1.16
log
@Selection Recovery
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d41 2
a42 2
   {
   public:
d44 3
a46 3
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------
d48 4
a51 4
      virtual bool hasResAlt () = 0;
         //
         // Returns true, iff this DetSelPt currently has a selection and an 
         // shortage-resolving alternative to the current selection exists.
d53 3
a55 3
      virtual void alterSelection () = 0;
         //
         // Alters the selection for this DetSelPt.
d57 5
a61 5
      virtual void storeRecoveryPt () = 0;
         //
         // Records the fact that the selection configuration is being altered
         // at this DetSelPt.
         // Used for selection recovery.
d63 3
a65 3
      virtual void tempAlterSel () = 0;
         //
         // Temporarily alters the selection for this DetSelPt.
d67 3
a69 3
      virtual void cancelTempAlt () = 0;
         //
         // Undoes tempAlterSel ().
d71 4
a74 4
      virtual void printAlteration () = 0;
         //
         // Prints the alteration of the selection configuration at this
         // DetAltPt.
d76 3
a78 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d80 1
a80 1
      accessFunc (WitDetAltPt *, myDetAltPt)
d82 1
a82 1
   protected:
d84 3
a86 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d88 1
a88 1
      WitDetSelPt ();
d90 3
a92 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d94 1
a94 1
      virtual ~WitDetSelPt ();
d96 1
a96 1
   private:
d98 3
a100 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d102 1
a102 1
      noCopyCtorAssign (WitDetSelPt);
d104 3
a106 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d108 6
a113 6
      WitDetAltPt * myDetAltPt_;
         //
         // The DetAltPt owned by this DetSelPt.
         // myDetAltPt_ is the DetAltPt at which the selection configuration can
         // be altered in a manner that is uniquely determined by this DetSelPt.
   };
@


1.15
log
@Selection Recovery
@
text
@d57 1
a57 1
      virtual void recAltForRecovery () = 0;
@


1.14
log
@Selection Recovery
@
text
@d57 1
a57 1
      virtual void recordAlteration () = 0;
@


1.13
log
@Selection Reuse.
@
text
@d57 6
@


1.12
log
@Updated the copyright date on all source files.
@
text
@d37 1
a37 1
// Implemented in MultiSel.C.
@


1.11
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.10
log
@Low-Pri Prop-Rt.
@
text
@d65 5
@


1.9
log
@Low-Pri Prop-Rt.
@
text
@d61 1
a61 1
      virtual void cancelTempAlt (WitSelCand * theSelCand) = 0;
a63 7
         // If cancelNeedsSelCand () returns true, theSelCand is used to restore
         // the previous selection. Otherwise theSelCand must be NULL.

      virtual bool cancelNeedsSelCand () = 0;
         //
         // Returns true, iff the SelCand passed to cancelTempAlt () needs to be
         // non-NULL.
@


1.8
log
@Low-Pri Prop-Rt.
@
text
@a35 1
//       PoPt
@


1.7
log
@Low-Pri Prop-Rt.
@
text
@d62 11
@


1.6
log
@Low-Pri Prop-Rt.
@
text
@d49 5
d66 1
a66 1
      accessFunc (WitAltPt *, myAltPt)
d94 1
a94 1
      WitAltPt * myAltPt_;
d96 3
a98 6
         // The AltPt owned by this DetSelPt.
         // myAltPt_ represents the uniquely determined alteration to the
         // selection configuration for this DetSelPt.
         // It's actually an instance of class DetAltPt, but after
         // construction, this DetSelPt communicates with it exclusively
         // through its AltPt interface.
@


1.5
log
@Low-Pri Prop-Rt.
@
text
@d61 1
a61 1
      accessFunc (WitSelAlt *, mySelAlt)
d89 1
a89 1
      WitSelAlt * mySelAlt_;
d91 2
a92 2
         // The SelAlt owned by this DetSelPt.
         // mySelAlt_ represents the uniquely determined alteration to the
d94 1
a94 1
         // It's actually an instance of class DetSelAlt, but after
d96 1
a96 1
         // through its SelAlt interface.
@


1.4
log
@Low-Pri Prop-Rt.
@
text
@d53 4
@


1.3
log
@Low-Pri Prop-Rt.
@
text
@d25 2
a26 2
// A DetSelPt is a SelPt such that any alteration to the selection scheme that
// occurs at the SelPt is completely determined by the SelPt itself.
d43 16
d88 5
a92 3
         // mySelAlt_ represents the alteration to the selection scheme that's
         // completely determined by this DetSelPt.
         // It is actually a DetSelAlt.
@


1.2
log
@Low-Pri Prop-Rt.
@
text
@d68 7
@


1.1
log
@Low-Pri Prop-Rt.
@
text
@d43 1
a43 1
   public:
a50 2
   protected:

@

