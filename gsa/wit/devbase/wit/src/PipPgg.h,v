head	1.14;
access;
symbols
	sce_5_01_20080919:1.11
	latest_sce_4_20_20060523:1.9.0.2
	sce_4_20_20060523:1.9
	latest_sce4_20_OSL:1.7.0.2
	sce_4_20_OSL:1.7;
locks; strict;
comment	@ * @;


1.14
date	2011.09.28.23.49.54;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.09.24.00.28.17;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.08.30.20.17.56;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.08.09.18.36.40;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.08.07.22.24.28;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.10.23.05.02;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.02.17.34.08;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.15.23.44.52;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.15.21.57.54;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.13.19.26.34;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.13.17.02.22;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.09.19.58.23;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.08.23.57.11;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.06.19.59.46;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PipPggH
#define PipPggH

//------------------------------------------------------------------------------
// Header file: "PipPgg.h"
//
// Contains the declaration of class PipPgg.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class PipPgg
//
// "Post-Implosion Pegging Pegging"
// Represents the pegging for the Post-Implosion Pegging Subsystem.
//------------------------------------------------------------------------------

class WitPipPgg: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipPgg (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPipPgg ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints the pegging.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPipAttPgg <WitOperation> *,   execVolPgg)
      accessFunc (WitPipAttPgg <WitBopEntry>  *, coExecVolPgg)
      accessFunc (WitPipAttPgg <WitSubEntry>  *,    subVolPgg)
      accessFunc (WitPipAttPgg <WitPart>      *, supplyVolPgg)
      accessFunc (WitPipAttPgg <WitPart>      *,   prodVolPgg)
      accessFunc (WitPipAttPgg <WitPart>      *,   consVolPgg)
      accessFunc (WitPipAttPgg <WitPart>      *,   sideVolPgg)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void countTrips ();
         //
         // Counts and displays the total # of pegging triples in this pegging.

      noCopyCtorAssign (WitPipPgg);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPipAttPgg <WitOperation> *   execVolPgg_;
      WitPipAttPgg <WitBopEntry>  * coExecVolPgg_;
      WitPipAttPgg <WitSubEntry>  *    subVolPgg_;
      WitPipAttPgg <WitPart>      * supplyVolPgg_;
      WitPipAttPgg <WitPart>      *   prodVolPgg_;
      WitPipAttPgg <WitPart>      *   consVolPgg_;
      WitPipAttPgg <WitPart>      *   sideVolPgg_;
         //
         // The PipAttPggs owned by this PipPgg for the following attributes:
         //      execVol
         //    coExecVol
         //       subVol
         //    supplyVol
         //      prodVol
         //      consVol
         //      sideVol
   };

#endif
@


1.13
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.12
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d29 2
a30 12
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPipPgg (WitProblem *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d32 65
a96 55
virtual ~WitPipPgg ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void print ();
//
// Prints the pegging.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitPipAttPgg <WitOperation> *,   execVolPgg)
accessFunc (WitPipAttPgg <WitBopEntry>  *, coExecVolPgg)
accessFunc (WitPipAttPgg <WitSubEntry>  *,    subVolPgg)
accessFunc (WitPipAttPgg <WitPart>      *, supplyVolPgg)
accessFunc (WitPipAttPgg <WitPart>      *,   prodVolPgg)
accessFunc (WitPipAttPgg <WitPart>      *,   consVolPgg)
accessFunc (WitPipAttPgg <WitPart>      *,   sideVolPgg)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void countTrips ();
//
// Counts and displays the total # of pegging triples in this pegging.

noCopyCtorAssign (WitPipPgg);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitPipAttPgg <WitOperation> *   execVolPgg_;
WitPipAttPgg <WitBopEntry>  * coExecVolPgg_;
WitPipAttPgg <WitSubEntry>  *    subVolPgg_;
WitPipAttPgg <WitPart>      * supplyVolPgg_;
WitPipAttPgg <WitPart>      *   prodVolPgg_;
WitPipAttPgg <WitPart>      *   consVolPgg_;
WitPipAttPgg <WitPart>      *   sideVolPgg_;
//
// The PipAttPggs owned by this PipPgg for the following attributes:
//      execVol
//    coExecVol
//       subVol
//    supplyVol
//      prodVol
//      consVol
//      sideVol
};
@


1.11
log
@ExecVol pegging for BOP entries.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d29 12
a40 2
   {
   public:
d42 55
a96 65
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipPgg (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPipPgg ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints the pegging.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPipAttPgg <WitOperation> *,   execVolPgg)
      accessFunc (WitPipAttPgg <WitBopEntry>  *, coExecVolPgg)
      accessFunc (WitPipAttPgg <WitSubEntry>  *,    subVolPgg)
      accessFunc (WitPipAttPgg <WitPart>      *, supplyVolPgg)
      accessFunc (WitPipAttPgg <WitPart>      *,   prodVolPgg)
      accessFunc (WitPipAttPgg <WitPart>      *,   consVolPgg)
      accessFunc (WitPipAttPgg <WitPart>      *,   sideVolPgg)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void countTrips ();
         //
         // Counts and displays the total # of pegging triples in this pegging.

      noCopyCtorAssign (WitPipPgg);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPipAttPgg <WitOperation> *   execVolPgg_;
      WitPipAttPgg <WitBopEntry>  * coExecVolPgg_;
      WitPipAttPgg <WitSubEntry>  *    subVolPgg_;
      WitPipAttPgg <WitPart>      * supplyVolPgg_;
      WitPipAttPgg <WitPart>      *   prodVolPgg_;
      WitPipAttPgg <WitPart>      *   consVolPgg_;
      WitPipAttPgg <WitPart>      *   sideVolPgg_;
         //
         // The PipAttPggs owned by this PipPgg for the following attributes:
         //      execVol
         //    coExecVol
         //       subVol
         //    supplyVol
         //      prodVol
         //      consVol
         //      sideVol
   };
@


1.10
log
@execVol pegging for BOP entries.
@
text
@d57 1
a57 1
      accessFunc (WitPipAttPgg <WitBopEntry>  *,   coexVolPgg)
d81 1
a81 1
      WitPipAttPgg <WitBopEntry>  *   coexVolPgg_;
d90 1
@


1.9
log
@New PIP pegging order.
@
text
@d57 1
d81 1
@


1.8
log
@Updated the copyright date on all source files.
@
text
@d69 4
@


1.7
log
@GPIP
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.6
log
@GPIP
@
text
@a47 4
      void consolidatePegging ();
         //
         // Consolidates each of the attribute peggings.

d56 2
a57 2
      accessFunc (WitPipAttPgg <WitOperation> *, execVolPgg)
      accessFunc (WitPipAttPgg <WitSubEntry>  *, subVolPgg)
d59 3
a61 3
      accessFunc (WitPipAttPgg <WitPart>      *, prodVolPgg)
      accessFunc (WitPipAttPgg <WitPart>      *, consVolPgg)
      accessFunc (WitPipAttPgg <WitPart>      *, sideVolPgg)
d75 2
a76 2
      WitPipAttPgg <WitOperation> * execVolPgg_;
      WitPipAttPgg <WitSubEntry>  * subVolPgg_;
d78 3
a80 3
      WitPipAttPgg <WitPart>      * prodVolPgg_;
      WitPipAttPgg <WitPart>      * consVolPgg_;
      WitPipAttPgg <WitPart>      * sideVolPgg_;
d83 2
a84 2
         //    execVol
         //    subVol
d86 3
a88 3
         //    prodVol
         //    consVol
         //    sideVol
@


1.5
log
@GPIP
@
text
@a72 5
      void BuildIndivPip ();
      void buildGroupPip ();
         //
         // Builds the pegging by IPIP or GPIP, respectively.

@


1.4
log
@GPIP
@
text
@d73 1
a73 1
      void buildPeggingByUrp ();
d76 1
a76 1
         // Builds the pegging by URP or GPIP, respectively.
@


1.3
log
@[shared-resource pegging]
@
text
@d74 1
a74 1
      void buildPeggingBySrp ();
d76 1
a76 1
         // Builds the pegging by URP or SRP, respectively.
@


1.2
log
@[shared-resource pegging]
@
text
@d52 1
a52 1
      void printPegging ();
@


1.1
log
@[shared-resource pegging]
@
text
@a19 2
#include <PipPartAtt.h>
#include <PtrSched.h>
a44 29
      // get---Trips functions.
      // Each of these functions sets its last arg to the list of pegging
      // triples for theDemand and shipPer, where the peggings are for:
      //
      //    execVol
      //    subVol
      //    supplyVol
      //    sideVol
      //    prodVol
      //    consVol
      //------------------------------------------------------------------------

      void getExecVolTrips (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitOpnTripStack & execVolTrips);

      void getSubVolTrips (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitSubTripStack & subVolTrips);

      void getPartPegTrips (
            WitDemand *        theDemand,
            WitPeriod          shipPer,
            WitPipPartAtt::Tag theAttTag,
            WitPartTripStack & thePegTrips);

      //------------------------------------------------------------------------
d50 5
a54 1
         // Consolidates all of the PipPegLists in the pegging.
d60 6
a65 4
      WitPipTarg * myTargFor (WitDemand * theDemand, WitPeriod shipPer);
         //
         // Returns the PipTarg for theDemand and shipPer, asserting that it
         // exists.
a72 5
      void buildTargs ();
         //
         // Builds the PipTargs corresponding to the (Demand, Period) pairs in
         // the shipment sequence.

d84 6
a89 1
      WitPtrSched <WitDemand, WitPipTarg> myTargs_;
d91 7
a97 2
         // myTargs_.myPtrAt (theDemand, shipPer) is the PipTarg owned
         // this PipPgg for theDemand in shipPer, or NULL, if there is none.
@

