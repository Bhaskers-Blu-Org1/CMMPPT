head	1.45;
access;
symbols
	sce_5_01_20080919:1.31
	latest_sce_4_20_20060523:1.8.0.2
	sce_4_20_20060523:1.8
	latest_sce4_20_OSL:1.7.0.2
	sce_4_20_OSL:1.7
	sce_410_withVa:1.7
	sce_4_05_20040511:1.7
	sce_4_00_20040201:1.5
	nextGenBranch:1.5.0.2
	nextGenRoot:1.5
	sce_3_30_20030627:1.5
	EndRw-branch:1.3.0.4
	Root-of-EndRw:1.3
	rwToStl:1.3.0.2;
locks; strict;
comment	@ * @;


1.45
date	2011.09.28.23.49.47;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2011.09.24.00.28.08;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2011.08.30.20.17.49;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2011.08.30.18.14.53;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2010.08.19.18.00.14;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2010.03.24.21.31.03;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2010.03.16.20.39.22;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2010.03.13.00.35.50;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2010.03.11.22.36.23;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2010.02.16.20.47.04;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2010.01.26.21.06.11;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2010.01.16.00.09.08;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2010.01.15.17.13.03;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2010.01.04.22.11.24;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.03.03.22.35.43;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.02.29.23.24.29;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.02.27.23.19.11;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.02.27.22.49.17;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2007.09.05.22.23.58;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.09.04.23.01.56;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.09.04.22.20.12;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.08.16.21.27.40;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.08.15.21.36.42;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.08.15.19.15.33;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.08.14.15.03.00;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.08.09.19.30.36;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.08.08.23.27.44;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.08.02.19.39.47;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.08.01.20.38.23;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.07.27.16.33.32;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.06.26.20.01.30;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.06.26.19.06.21;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.06.25.23.12.23;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.10.03.15.08.59;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.08.18.19.32.52;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.08.18.18.43.39;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.08.17.19.36.40;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.02.17.34.06;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.10.22.53.20;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.06.23.27.10;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.23.18.12.37;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.02.22.18.40;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.11.18.53.12;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.06.19.56.09;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.29.23.06.28;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.45
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef OptVarH
#define OptVarH

//------------------------------------------------------------------------------
// Header file: "OptVar.h"
//
// Contains the declaration of class OptVar.
//------------------------------------------------------------------------------

#include <OptVC.h>

//------------------------------------------------------------------------------
// class OptVar
//
// A variable in an optimization problem.
//
// Class hierarchy:
//
//    OptVC
//       OptVar
//          DetVar
//             ScrapVar
//             NonSubVar
//             SubVar
//             ShipVar
//             BoundedVar
//                ExecVar
//                StockVar
//                CumShipVar
//             SlbvVar
//             MultiObjVar
//             NtbvVar
//          StochVar
//             StScrapVar
//             StNonSubVar
//             StSubVar
//             StShipVar
//             StBddVar
//                StExecVar
//                StStockVar
//                StCumShipVar
//             StSlbvVar
//
// Implemented in OptMisc.C.
//------------------------------------------------------------------------------

class WitOptVar: public WitOptVC
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOptVar (WitOptProblem * theOptProblem);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitOptVar ();

      //------------------------------------------------------------------------
      // Overriding public virtual member functions.
      //------------------------------------------------------------------------

      virtual double solnValue ();
         //
         // Returns primalValue ().

      //------------------------------------------------------------------------
      // Other public virtual member functions.
      //------------------------------------------------------------------------

      virtual double compObjCoeff () = 0;
         //
         // Computes and returns the coefficient of this OptVar in the
         // objective function.

      virtual double indepInitValue ();
         //
         // Returns an initial primal value for this OptVar, determined
         // independently of other OptVars.
         // The base class implementation returns 0.0, which should be used for
         // OptVars whose initial value is dependent on other OptVars and
         // will be computed in OptProblem::initDepVars.

      virtual bool isAnIntVar ();
         //
         // Returns true, iff this OptVar is an integer variable.
         // The base class implementation returns false.

      virtual const char * lexObjElemName ();
         //
         // If this OptVar represents an element of a lexicographic objective
         // function, its name is returned; otherwise a fatal error is issued.

      virtual void reportLexUnbounded ();
         //
         // If this OptVar represents an element of a lexicographic objective
         // function, this function does any special error reporting for an
         // unbounded solution for the element, prior to the reporting that will
         // be done by the CplexMgr;
         // otherwise issues a fatal error.

      //------------------------------------------------------------------------
      // mand<derived OptVar> functions.
      //
      // In each case, if this OptVar is actually an instance of the
      // indicated derived class, the function returns that instance;
      // otherwise, a fatal error is issued.
      //------------------------------------------------------------------------

      virtual WitDetVar *   mandDetVar   ();
      virtual WitStochVar * mandStochVar ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (double, primalValue)
      accessFunc (double, objCoeff)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void incCoeff (double delta);
         //
         // Calls myOptProblem ()->incCoeff (...).

      void generateObjCoeff ();
         //
         // Computes and stores the value of objCoeff ().

      void print ();
         //
         // Prints this OptVar to the optProbFile.

      double reducedReward ();
         //
         // Computes and returns the reduced reward value for this OptVar for
         // the current dual solution.

      void setPrimalValue (double);

   protected:

      //------------------------------------------------------------------------
      // Overriding protected virtual member functions.
      //------------------------------------------------------------------------

      virtual const char * kindText ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitOptVar);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      double primalValue_;
         //
         // Primal solution value.

      double objCoeff_;
         //
         // The coefficient value of this OptVar in the main objective.
   };

#endif
@


1.44
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.43
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d57 2
a58 98
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitOptVar (WitOptProblem * theOptProblem);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitOptVar ();

//------------------------------------------------------------------------
// Overriding public virtual member functions.
//------------------------------------------------------------------------

virtual double solnValue ();
//
// Returns primalValue ().

//------------------------------------------------------------------------
// Other public virtual member functions.
//------------------------------------------------------------------------

virtual double compObjCoeff () = 0;
//
// Computes and returns the coefficient of this OptVar in the
// objective function.

virtual double indepInitValue ();
//
// Returns an initial primal value for this OptVar, determined
// independently of other OptVars.
// The base class implementation returns 0.0, which should be used for
// OptVars whose initial value is dependent on other OptVars and
// will be computed in OptProblem::initDepVars.

virtual bool isAnIntVar ();
//
// Returns true, iff this OptVar is an integer variable.
// The base class implementation returns false.

virtual const char * lexObjElemName ();
//
// If this OptVar represents an element of a lexicographic objective
// function, its name is returned; otherwise a fatal error is issued.

virtual void reportLexUnbounded ();
//
// If this OptVar represents an element of a lexicographic objective
// function, this function does any special error reporting for an
// unbounded solution for the element, prior to the reporting that will
// be done by the CplexMgr;
// otherwise issues a fatal error.

//------------------------------------------------------------------------
// mand<derived OptVar> functions.
//
// In each case, if this OptVar is actually an instance of the
// indicated derived class, the function returns that instance;
// otherwise, a fatal error is issued.
//------------------------------------------------------------------------

virtual WitDetVar *   mandDetVar   ();
virtual WitStochVar * mandStochVar ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (double, primalValue)
accessFunc (double, objCoeff)

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void incCoeff (double delta);
//
// Calls myOptProblem ()->incCoeff (...).

void generateObjCoeff ();
//
// Computes and stores the value of objCoeff ().

void print ();
//
// Prints this OptVar to the optProbFile.

double reducedReward ();
//
// Computes and returns the reduced reward value for this OptVar for
// the current dual solution.

void setPrimalValue (double);
d60 124
a183 28
protected:

//------------------------------------------------------------------------
// Overriding protected virtual member functions.
//------------------------------------------------------------------------

virtual const char * kindText ();

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitOptVar);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

double primalValue_;
//
// Primal solution value.

double objCoeff_;
//
// The coefficient value of this OptVar in the main objective.
};
@


1.42
log
@Replaced class SolverMgr with class CplexGateway.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d57 98
a154 2
   {
   public:
d156 28
a183 124
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOptVar (WitOptProblem * theOptProblem);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitOptVar ();

      //------------------------------------------------------------------------
      // Overriding public virtual member functions.
      //------------------------------------------------------------------------

      virtual double solnValue ();
         //
         // Returns primalValue ().

      //------------------------------------------------------------------------
      // Other public virtual member functions.
      //------------------------------------------------------------------------

      virtual double compObjCoeff () = 0;
         //
         // Computes and returns the coefficient of this OptVar in the
         // objective function.

      virtual double indepInitValue ();
         //
         // Returns an initial primal value for this OptVar, determined
         // independently of other OptVars.
         // The base class implementation returns 0.0, which should be used for
         // OptVars whose initial value is dependent on other OptVars and
         // will be computed in OptProblem::initDepVars.

      virtual bool isAnIntVar ();
         //
         // Returns true, iff this OptVar is an integer variable.
         // The base class implementation returns false.

      virtual const char * lexObjElemName ();
         //
         // If this OptVar represents an element of a lexicographic objective
         // function, its name is returned; otherwise a fatal error is issued.

      virtual void reportLexUnbounded ();
         //
         // If this OptVar represents an element of a lexicographic objective
         // function, this function does any special error reporting for an
         // unbounded solution for the element, prior to the reporting that will
         // be done by the CplexMgr;
         // otherwise issues a fatal error.

      //------------------------------------------------------------------------
      // mand<derived OptVar> functions.
      //
      // In each case, if this OptVar is actually an instance of the
      // indicated derived class, the function returns that instance;
      // otherwise, a fatal error is issued.
      //------------------------------------------------------------------------

      virtual WitDetVar *   mandDetVar   ();
      virtual WitStochVar * mandStochVar ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (double, primalValue)
      accessFunc (double, objCoeff)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void incCoeff (double delta);
         //
         // Calls myOptProblem ()->incCoeff (...).

      void generateObjCoeff ();
         //
         // Computes and stores the value of objCoeff ().

      void print ();
         //
         // Prints this OptVar to the optProbFile.

      double reducedReward ();
         //
         // Computes and returns the reduced reward value for this OptVar for
         // the current dual solution.

      void setPrimalValue (double);

   protected:

      //------------------------------------------------------------------------
      // Overriding protected virtual member functions.
      //------------------------------------------------------------------------

      virtual const char * kindText ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitOptVar);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      double primalValue_;
         //
         // Primal solution value.

      double objCoeff_;
         //
         // The coefficient value of this OptVar in the main objective.
   };
@


1.41
log
@CPLEX
@
text
@d112 1
a112 1
         // be done by the SolverMgr;
@


1.40
log
@Removed OptObj classes.
@
text
@d24 1
a24 1
// A variable in an optimization model.
d64 1
a64 1
      WitOptVar (WitOptModel * theOptModel);
d95 1
a95 1
         // will be computed in OptModel::initDepVars.
d139 1
a139 1
         // Calls myOptModel ()->incCoeff (...).
d147 1
a147 1
         // Prints this OptVar to the modelFile.
@


1.39
log
@Multi-Obj Mode
@
text
@d84 5
d131 1
a131 1
      accessFunc (double, mainObjCoeffVal)
d141 1
a141 1
      void compMainObjCoeffVal ();
d143 1
a143 1
         // Computes and stores the value of mainObjCoeffVal ().
d180 1
a180 1
      double mainObjCoeffVal_;
@


1.38
log
@Multi-Obj Mode
@
text
@d41 1
a41 1
//             TbvVar
@


1.37
log
@Multi-Obj Mode
@
text
@d41 1
@


1.36
log
@Multi-Obj Mode
@
text
@d96 1
a96 1
      virtual const char * lexObjCompName ();
d98 1
a98 1
         // If this OptVar represents a component of a lexicographic objective
@


1.35
log
@Multi-objective mode
@
text
@d96 1
a96 1
      virtual const char * lexObjElemName ();
d98 1
a98 1
         // If this OptVar represents an element of a lexicographic objective
@


1.34
log
@Multi-objective mode
@
text
@d96 1
a96 1
      virtual const WitString & lexObjElemName ();
@


1.33
log
@Multi-objective mode
@
text
@d101 8
@


1.32
log
@Multi-objective mode
@
text
@d96 5
@


1.31
log
@Stochastic Implosion
@
text
@d40 1
@


1.30
log
@Stochastic Implosion
@
text
@d24 1
a24 1
// A variable in an optimization problem.
@


1.29
log
@Stochastic Implosion
@
text
@d127 1
a127 1
         // Prints this OptVar to the optProbFile.
@


1.28
log
@Stochastic Implosion
@
text
@d62 1
a62 1
      WitOptVar (WitOptProb * theOptProb);
d88 1
a88 1
         // will be computed in OptProb::initDepVars.
d119 1
a119 1
         // Calls myOptProb ()->incCoeff (...).
@


1.27
log
@Stochastic Implosion
@
text
@d19 1
a19 1
#include <OptProbEl.h>
d28 1
a28 1
//    OptProbEl
d54 1
a54 1
class WitOptVar: public WitOptProbEl
@


1.26
log
@Stochastic Implosion
@
text
@a34 1
//             SlbvVar
d39 1
d49 1
@


1.25
log
@Stochastic Implosion
@
text
@d45 4
a48 3
//             StExecVar
//             StStockVar
//             StCumShipVar
@


1.24
log
@Stochastic Implosion
@
text
@d42 4
a46 1
//             StShipVar
a47 3
//             StExecVar
//             StNonSubVar
//             StSubVar
@


1.23
log
@Stochastic Implosion
@
text
@a42 1
//             StExecVar
d45 3
@


1.22
log
@Stochastic Implosion
@
text
@d42 1
@


1.21
log
@Stochastic Implosion
@
text
@a68 5
      virtual void compBounds ();
         //
         // Computes the bounds for this OptVar.
         // The base class implementation computes the bounds as [0, infinity).

@


1.20
log
@Stochastic Implosion
@
text
@d43 2
@


1.19
log
@Stochastic Implosion
@
text
@d72 1
a72 1
      virtual double solnValue () const;
d80 1
a80 1
      virtual double indepInitValue () const;
d88 1
a88 1
      virtual bool isAnIntVar () const;
d101 2
a102 2
      virtual const WitDetVar *   mandDetVar   () const;
      virtual const WitStochVar * mandStochVar () const;
d123 1
a123 1
      void print () const;
d127 1
a127 1
      double reducedReward () const;
d140 1
a140 1
      virtual const char * kindText () const;
@


1.18
log
@Stochastic Implosion
@
text
@d94 5
a98 4
      // <obj>CoeffVal functions.
      // Each of these functions computes and returns the value of the Coeff of
      // this OptVar in the indicated objective.
      // The base class implementation issues a fatal error.
d101 2
a102 7
      virtual double boundsCoeffVal  () const;
      virtual double primaryCoeffVal () const;
      virtual double revCoeffVal     () const;
      virtual double invCoeffVal     () const;
      virtual double servCoeffVal    () const;
      virtual double subCoeffVal     () const;
      virtual double stochCoeffVal   () const;
@


1.17
log
@Stochastic Implosion
@
text
@d51 1
a51 1
      //-----------------------------------------------------------------------
d53 1
a53 1
      //-----------------------------------------------------------------------
d57 1
a57 1
      //-----------------------------------------------------------------------
d59 1
a59 1
      //-----------------------------------------------------------------------
d63 1
a63 1
      //-----------------------------------------------------------------------
d65 1
a65 1
      //-----------------------------------------------------------------------
d76 1
a76 1
      //-----------------------------------------------------------------------
d78 1
a78 1
      //-----------------------------------------------------------------------
a87 36
      virtual double boundsCoeffVal () const;
         //
         // Computes and returns the value of the Coeff of this OptVar in the
         // BoundsObj.
         // The base class implementation returns 0.0.

      virtual double primaryCoeffVal () const;
         //
         // Computes and returns the value of the Coeff of this OptVar in the
         // PrimaryObj.
         // The base class implementation returns 0.0.

      virtual double revCoeffVal () const;
         //
         // Computes and returns the value of the Coeff of this OptVar in the
         // RevObj.
         // The base class implementation returns 0.0.

      virtual double invCoeffVal () const;
         //
         // Computes and returns the value of the Coeff of this OptVar in the
         // InvObj.
         // The base class implementation returns 0.0.

      virtual double servCoeffVal () const;
         //
         // Computes and returns the value of the Coeff of this OptVar in the
         // ServObj.
         // The base class implementation returns 0.0.

      virtual double subCoeffVal () const;
         //
         // Computes and returns the value of the Coeff of this OptVar in the
         // SubObj.
         // The base class implementation returns 0.0.

d93 16
a108 1
      //-----------------------------------------------------------------------
d110 1
a110 1
      //-----------------------------------------------------------------------
d115 1
a115 1
      //-----------------------------------------------------------------------
d117 1
a117 1
      //-----------------------------------------------------------------------
d140 1
a140 1
      //-----------------------------------------------------------------------
d142 1
a142 1
      //-----------------------------------------------------------------------
d148 1
a148 1
      //-----------------------------------------------------------------------
d150 1
a150 1
      //-----------------------------------------------------------------------
d154 1
a154 1
      //-----------------------------------------------------------------------
d156 1
a156 1
      //-----------------------------------------------------------------------
@


1.16
log
@Stochastic Implosion
@
text
@d44 1
a44 1
// Implemented in OptProbEl.C.
@


1.15
log
@Stochastic Implosion
@
text
@d41 1
@


1.14
log
@Stochastic Implosion
@
text
@d141 1
a141 1
         // Calls myOptProb->incCoeff (...).
@


1.13
log
@Stochastic Implosion
@
text
@d30 1
a30 1
//          PeriodVar
@


1.12
log
@App controlled opt implosion.
@
text
@d40 2
@


1.11
log
@App controlled opt implode.
@
text
@d147 1
a147 1
         // Prints this OptVar to the modelFile.
@


1.10
log
@App controlled opt implosion.
@
text
@d23 2
a24 1
// A variable in optimization model.
d40 2
@


1.9
log
@Removed optimizing implosion with lot sizes.
@
text
@d19 1
a19 1
#include <ModelEl.h>
d27 1
a27 1
//    ModelEl
d41 1
a41 1
class WitOptVar: public WitModelEl
d49 1
a49 1
      WitOptVar (WitOptModel * theOptModel);
d80 1
a80 1
         // will be computed in OptModel::initDepVars.
d136 1
a136 1
         // Calls myOptModel->incCoeff (...).
@


1.8
log
@Updated the copyright date on all source files.
@
text
@a34 2
//             IlsMultVar
//             MlsMultVar
@


1.7
log
@Double Precision.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.6
log
@Continued double precision.
@
text
@d136 1
a136 1
      void incCoeff (float delta);
@


1.5
log
@Continued implementation of opt with COIN.
@
text
@d84 1
a84 1
      virtual float boundsCoeffVal () const;
d90 1
a90 1
      virtual float primaryCoeffVal () const;
d96 1
a96 1
      virtual float revCoeffVal () const;
d102 1
a102 1
      virtual float invCoeffVal () const;
d108 1
a108 1
      virtual float servCoeffVal () const;
d114 1
a114 1
      virtual float subCoeffVal () const;
d130 1
a130 1
      accessFunc (float,  mainObjCoeffVal)
d179 1
a179 1
      float mainObjCoeffVal_;
@


1.4
log
@Internal changes.
@
text
@a132 9
      // Non-const access functions.
      //-----------------------------------------------------------------------

      double & primalValue ()
         {
         return primalValue_;
         }

      //-----------------------------------------------------------------------
d152 2
@


1.3
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d120 1
a120 1
      virtual WitBoolean isAnIntVar () const;
d122 2
a123 2
         // Returns TRUE, iff this OptVar is an integer variable.
         // The base class implementation returns FALSE.
@


1.2
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d36 1
@


1.1
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d24 16
@

